
Station.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ebd0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ccc  0800ecdc  0800ecdc  0001ecdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f9a8  0800f9a8  000205a8  2**0
                  CONTENTS
  4 .ARM          00000008  0800f9a8  0800f9a8  0001f9a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f9b0  0800f9b0  000205a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f9b0  0800f9b0  0001f9b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f9b4  0800f9b4  0001f9b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000005a8  20000000  0800f9b8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000021c8  200005a8  0800ff60  000205a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002770  0800ff60  00022770  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000205a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000202ba  00000000  00000000  000205d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005e5f  00000000  00000000  0004088b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b80  00000000  00000000  000466f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000018b0  00000000  00000000  00048270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000203db  00000000  00000000  00049b20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002ee0a  00000000  00000000  00069efb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096f5c  00000000  00000000  00098d05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012fc61  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007f00  00000000  00000000  0012fcb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200005a8 	.word	0x200005a8
 8000128:	00000000 	.word	0x00000000
 800012c:	0800ecc4 	.word	0x0800ecc4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200005ac 	.word	0x200005ac
 8000148:	0800ecc4 	.word	0x0800ecc4

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <__aeabi_f2uiz>:
 8000170:	0042      	lsls	r2, r0, #1
 8000172:	d20e      	bcs.n	8000192 <__aeabi_f2uiz+0x22>
 8000174:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000178:	d30b      	bcc.n	8000192 <__aeabi_f2uiz+0x22>
 800017a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800017e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000182:	d409      	bmi.n	8000198 <__aeabi_f2uiz+0x28>
 8000184:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000188:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800018c:	fa23 f002 	lsr.w	r0, r3, r2
 8000190:	4770      	bx	lr
 8000192:	f04f 0000 	mov.w	r0, #0
 8000196:	4770      	bx	lr
 8000198:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800019c:	d101      	bne.n	80001a2 <__aeabi_f2uiz+0x32>
 800019e:	0242      	lsls	r2, r0, #9
 80001a0:	d102      	bne.n	80001a8 <__aeabi_f2uiz+0x38>
 80001a2:	f04f 30ff 	mov.w	r0, #4294967295
 80001a6:	4770      	bx	lr
 80001a8:	f04f 0000 	mov.w	r0, #0
 80001ac:	4770      	bx	lr
 80001ae:	bf00      	nop

080001b0 <__aeabi_ldivmod>:
 80001b0:	b97b      	cbnz	r3, 80001d2 <__aeabi_ldivmod+0x22>
 80001b2:	b972      	cbnz	r2, 80001d2 <__aeabi_ldivmod+0x22>
 80001b4:	2900      	cmp	r1, #0
 80001b6:	bfbe      	ittt	lt
 80001b8:	2000      	movlt	r0, #0
 80001ba:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80001be:	e006      	blt.n	80001ce <__aeabi_ldivmod+0x1e>
 80001c0:	bf08      	it	eq
 80001c2:	2800      	cmpeq	r0, #0
 80001c4:	bf1c      	itt	ne
 80001c6:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80001ca:	f04f 30ff 	movne.w	r0, #4294967295
 80001ce:	f000 b9a9 	b.w	8000524 <__aeabi_idiv0>
 80001d2:	f1ad 0c08 	sub.w	ip, sp, #8
 80001d6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001da:	2900      	cmp	r1, #0
 80001dc:	db09      	blt.n	80001f2 <__aeabi_ldivmod+0x42>
 80001de:	2b00      	cmp	r3, #0
 80001e0:	db1a      	blt.n	8000218 <__aeabi_ldivmod+0x68>
 80001e2:	f000 f835 	bl	8000250 <__udivmoddi4>
 80001e6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001ee:	b004      	add	sp, #16
 80001f0:	4770      	bx	lr
 80001f2:	4240      	negs	r0, r0
 80001f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f8:	2b00      	cmp	r3, #0
 80001fa:	db1b      	blt.n	8000234 <__aeabi_ldivmod+0x84>
 80001fc:	f000 f828 	bl	8000250 <__udivmoddi4>
 8000200:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000204:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000208:	b004      	add	sp, #16
 800020a:	4240      	negs	r0, r0
 800020c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000210:	4252      	negs	r2, r2
 8000212:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000216:	4770      	bx	lr
 8000218:	4252      	negs	r2, r2
 800021a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800021e:	f000 f817 	bl	8000250 <__udivmoddi4>
 8000222:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000226:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800022a:	b004      	add	sp, #16
 800022c:	4240      	negs	r0, r0
 800022e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000232:	4770      	bx	lr
 8000234:	4252      	negs	r2, r2
 8000236:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800023a:	f000 f809 	bl	8000250 <__udivmoddi4>
 800023e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000242:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000246:	b004      	add	sp, #16
 8000248:	4252      	negs	r2, r2
 800024a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9e08      	ldr	r6, [sp, #32]
 8000256:	460d      	mov	r5, r1
 8000258:	4604      	mov	r4, r0
 800025a:	4688      	mov	r8, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14d      	bne.n	80002fc <__udivmoddi4+0xac>
 8000260:	428a      	cmp	r2, r1
 8000262:	4694      	mov	ip, r2
 8000264:	d968      	bls.n	8000338 <__udivmoddi4+0xe8>
 8000266:	fab2 f282 	clz	r2, r2
 800026a:	b152      	cbz	r2, 8000282 <__udivmoddi4+0x32>
 800026c:	fa01 f302 	lsl.w	r3, r1, r2
 8000270:	f1c2 0120 	rsb	r1, r2, #32
 8000274:	fa20 f101 	lsr.w	r1, r0, r1
 8000278:	fa0c fc02 	lsl.w	ip, ip, r2
 800027c:	ea41 0803 	orr.w	r8, r1, r3
 8000280:	4094      	lsls	r4, r2
 8000282:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000286:	fbb8 f7f1 	udiv	r7, r8, r1
 800028a:	fa1f fe8c 	uxth.w	lr, ip
 800028e:	fb01 8817 	mls	r8, r1, r7, r8
 8000292:	fb07 f00e 	mul.w	r0, r7, lr
 8000296:	0c23      	lsrs	r3, r4, #16
 8000298:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800029c:	4298      	cmp	r0, r3
 800029e:	d90a      	bls.n	80002b6 <__udivmoddi4+0x66>
 80002a0:	eb1c 0303 	adds.w	r3, ip, r3
 80002a4:	f107 35ff 	add.w	r5, r7, #4294967295
 80002a8:	f080 811e 	bcs.w	80004e8 <__udivmoddi4+0x298>
 80002ac:	4298      	cmp	r0, r3
 80002ae:	f240 811b 	bls.w	80004e8 <__udivmoddi4+0x298>
 80002b2:	3f02      	subs	r7, #2
 80002b4:	4463      	add	r3, ip
 80002b6:	1a1b      	subs	r3, r3, r0
 80002b8:	fbb3 f0f1 	udiv	r0, r3, r1
 80002bc:	fb01 3310 	mls	r3, r1, r0, r3
 80002c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002c4:	b2a4      	uxth	r4, r4
 80002c6:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ca:	45a6      	cmp	lr, r4
 80002cc:	d90a      	bls.n	80002e4 <__udivmoddi4+0x94>
 80002ce:	eb1c 0404 	adds.w	r4, ip, r4
 80002d2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002d6:	f080 8109 	bcs.w	80004ec <__udivmoddi4+0x29c>
 80002da:	45a6      	cmp	lr, r4
 80002dc:	f240 8106 	bls.w	80004ec <__udivmoddi4+0x29c>
 80002e0:	4464      	add	r4, ip
 80002e2:	3802      	subs	r0, #2
 80002e4:	2100      	movs	r1, #0
 80002e6:	eba4 040e 	sub.w	r4, r4, lr
 80002ea:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002ee:	b11e      	cbz	r6, 80002f8 <__udivmoddi4+0xa8>
 80002f0:	2300      	movs	r3, #0
 80002f2:	40d4      	lsrs	r4, r2
 80002f4:	e9c6 4300 	strd	r4, r3, [r6]
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d908      	bls.n	8000312 <__udivmoddi4+0xc2>
 8000300:	2e00      	cmp	r6, #0
 8000302:	f000 80ee 	beq.w	80004e2 <__udivmoddi4+0x292>
 8000306:	2100      	movs	r1, #0
 8000308:	e9c6 0500 	strd	r0, r5, [r6]
 800030c:	4608      	mov	r0, r1
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	fab3 f183 	clz	r1, r3
 8000316:	2900      	cmp	r1, #0
 8000318:	d14a      	bne.n	80003b0 <__udivmoddi4+0x160>
 800031a:	42ab      	cmp	r3, r5
 800031c:	d302      	bcc.n	8000324 <__udivmoddi4+0xd4>
 800031e:	4282      	cmp	r2, r0
 8000320:	f200 80fc 	bhi.w	800051c <__udivmoddi4+0x2cc>
 8000324:	1a84      	subs	r4, r0, r2
 8000326:	eb65 0303 	sbc.w	r3, r5, r3
 800032a:	2001      	movs	r0, #1
 800032c:	4698      	mov	r8, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d0e2      	beq.n	80002f8 <__udivmoddi4+0xa8>
 8000332:	e9c6 4800 	strd	r4, r8, [r6]
 8000336:	e7df      	b.n	80002f8 <__udivmoddi4+0xa8>
 8000338:	b902      	cbnz	r2, 800033c <__udivmoddi4+0xec>
 800033a:	deff      	udf	#255	; 0xff
 800033c:	fab2 f282 	clz	r2, r2
 8000340:	2a00      	cmp	r2, #0
 8000342:	f040 8091 	bne.w	8000468 <__udivmoddi4+0x218>
 8000346:	eba1 000c 	sub.w	r0, r1, ip
 800034a:	2101      	movs	r1, #1
 800034c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000350:	fa1f fe8c 	uxth.w	lr, ip
 8000354:	fbb0 f3f7 	udiv	r3, r0, r7
 8000358:	fb07 0013 	mls	r0, r7, r3, r0
 800035c:	0c25      	lsrs	r5, r4, #16
 800035e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000362:	fb0e f003 	mul.w	r0, lr, r3
 8000366:	42a8      	cmp	r0, r5
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x12c>
 800036a:	eb1c 0505 	adds.w	r5, ip, r5
 800036e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x12a>
 8000374:	42a8      	cmp	r0, r5
 8000376:	f200 80ce 	bhi.w	8000516 <__udivmoddi4+0x2c6>
 800037a:	4643      	mov	r3, r8
 800037c:	1a2d      	subs	r5, r5, r0
 800037e:	fbb5 f0f7 	udiv	r0, r5, r7
 8000382:	fb07 5510 	mls	r5, r7, r0, r5
 8000386:	fb0e fe00 	mul.w	lr, lr, r0
 800038a:	b2a4      	uxth	r4, r4
 800038c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000390:	45a6      	cmp	lr, r4
 8000392:	d908      	bls.n	80003a6 <__udivmoddi4+0x156>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f100 35ff 	add.w	r5, r0, #4294967295
 800039c:	d202      	bcs.n	80003a4 <__udivmoddi4+0x154>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f200 80b6 	bhi.w	8000510 <__udivmoddi4+0x2c0>
 80003a4:	4628      	mov	r0, r5
 80003a6:	eba4 040e 	sub.w	r4, r4, lr
 80003aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ae:	e79e      	b.n	80002ee <__udivmoddi4+0x9e>
 80003b0:	f1c1 0720 	rsb	r7, r1, #32
 80003b4:	408b      	lsls	r3, r1
 80003b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80003be:	fa25 fa07 	lsr.w	sl, r5, r7
 80003c2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c6:	fbba f8f9 	udiv	r8, sl, r9
 80003ca:	fa20 f307 	lsr.w	r3, r0, r7
 80003ce:	fb09 aa18 	mls	sl, r9, r8, sl
 80003d2:	408d      	lsls	r5, r1
 80003d4:	fa1f fe8c 	uxth.w	lr, ip
 80003d8:	431d      	orrs	r5, r3
 80003da:	fa00 f301 	lsl.w	r3, r0, r1
 80003de:	fb08 f00e 	mul.w	r0, r8, lr
 80003e2:	0c2c      	lsrs	r4, r5, #16
 80003e4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80003e8:	42a0      	cmp	r0, r4
 80003ea:	fa02 f201 	lsl.w	r2, r2, r1
 80003ee:	d90b      	bls.n	8000408 <__udivmoddi4+0x1b8>
 80003f0:	eb1c 0404 	adds.w	r4, ip, r4
 80003f4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f8:	f080 8088 	bcs.w	800050c <__udivmoddi4+0x2bc>
 80003fc:	42a0      	cmp	r0, r4
 80003fe:	f240 8085 	bls.w	800050c <__udivmoddi4+0x2bc>
 8000402:	f1a8 0802 	sub.w	r8, r8, #2
 8000406:	4464      	add	r4, ip
 8000408:	1a24      	subs	r4, r4, r0
 800040a:	fbb4 f0f9 	udiv	r0, r4, r9
 800040e:	fb09 4410 	mls	r4, r9, r0, r4
 8000412:	fb00 fe0e 	mul.w	lr, r0, lr
 8000416:	b2ad      	uxth	r5, r5
 8000418:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800041c:	45a6      	cmp	lr, r4
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x1e2>
 8000420:	eb1c 0404 	adds.w	r4, ip, r4
 8000424:	f100 35ff 	add.w	r5, r0, #4294967295
 8000428:	d26c      	bcs.n	8000504 <__udivmoddi4+0x2b4>
 800042a:	45a6      	cmp	lr, r4
 800042c:	d96a      	bls.n	8000504 <__udivmoddi4+0x2b4>
 800042e:	3802      	subs	r0, #2
 8000430:	4464      	add	r4, ip
 8000432:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000436:	fba0 9502 	umull	r9, r5, r0, r2
 800043a:	eba4 040e 	sub.w	r4, r4, lr
 800043e:	42ac      	cmp	r4, r5
 8000440:	46c8      	mov	r8, r9
 8000442:	46ae      	mov	lr, r5
 8000444:	d356      	bcc.n	80004f4 <__udivmoddi4+0x2a4>
 8000446:	d053      	beq.n	80004f0 <__udivmoddi4+0x2a0>
 8000448:	2e00      	cmp	r6, #0
 800044a:	d069      	beq.n	8000520 <__udivmoddi4+0x2d0>
 800044c:	ebb3 0208 	subs.w	r2, r3, r8
 8000450:	eb64 040e 	sbc.w	r4, r4, lr
 8000454:	fa22 f301 	lsr.w	r3, r2, r1
 8000458:	fa04 f707 	lsl.w	r7, r4, r7
 800045c:	431f      	orrs	r7, r3
 800045e:	40cc      	lsrs	r4, r1
 8000460:	e9c6 7400 	strd	r7, r4, [r6]
 8000464:	2100      	movs	r1, #0
 8000466:	e747      	b.n	80002f8 <__udivmoddi4+0xa8>
 8000468:	fa0c fc02 	lsl.w	ip, ip, r2
 800046c:	f1c2 0120 	rsb	r1, r2, #32
 8000470:	fa25 f301 	lsr.w	r3, r5, r1
 8000474:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000478:	fa20 f101 	lsr.w	r1, r0, r1
 800047c:	4095      	lsls	r5, r2
 800047e:	430d      	orrs	r5, r1
 8000480:	fbb3 f1f7 	udiv	r1, r3, r7
 8000484:	fb07 3311 	mls	r3, r7, r1, r3
 8000488:	fa1f fe8c 	uxth.w	lr, ip
 800048c:	0c28      	lsrs	r0, r5, #16
 800048e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000492:	fb01 f30e 	mul.w	r3, r1, lr
 8000496:	4283      	cmp	r3, r0
 8000498:	fa04 f402 	lsl.w	r4, r4, r2
 800049c:	d908      	bls.n	80004b0 <__udivmoddi4+0x260>
 800049e:	eb1c 0000 	adds.w	r0, ip, r0
 80004a2:	f101 38ff 	add.w	r8, r1, #4294967295
 80004a6:	d22f      	bcs.n	8000508 <__udivmoddi4+0x2b8>
 80004a8:	4283      	cmp	r3, r0
 80004aa:	d92d      	bls.n	8000508 <__udivmoddi4+0x2b8>
 80004ac:	3902      	subs	r1, #2
 80004ae:	4460      	add	r0, ip
 80004b0:	1ac0      	subs	r0, r0, r3
 80004b2:	fbb0 f3f7 	udiv	r3, r0, r7
 80004b6:	fb07 0013 	mls	r0, r7, r3, r0
 80004ba:	b2ad      	uxth	r5, r5
 80004bc:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80004c0:	fb03 f00e 	mul.w	r0, r3, lr
 80004c4:	42a8      	cmp	r0, r5
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x28a>
 80004c8:	eb1c 0505 	adds.w	r5, ip, r5
 80004cc:	f103 38ff 	add.w	r8, r3, #4294967295
 80004d0:	d216      	bcs.n	8000500 <__udivmoddi4+0x2b0>
 80004d2:	42a8      	cmp	r0, r5
 80004d4:	d914      	bls.n	8000500 <__udivmoddi4+0x2b0>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	4465      	add	r5, ip
 80004da:	1a28      	subs	r0, r5, r0
 80004dc:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004e0:	e738      	b.n	8000354 <__udivmoddi4+0x104>
 80004e2:	4631      	mov	r1, r6
 80004e4:	4630      	mov	r0, r6
 80004e6:	e707      	b.n	80002f8 <__udivmoddi4+0xa8>
 80004e8:	462f      	mov	r7, r5
 80004ea:	e6e4      	b.n	80002b6 <__udivmoddi4+0x66>
 80004ec:	4618      	mov	r0, r3
 80004ee:	e6f9      	b.n	80002e4 <__udivmoddi4+0x94>
 80004f0:	454b      	cmp	r3, r9
 80004f2:	d2a9      	bcs.n	8000448 <__udivmoddi4+0x1f8>
 80004f4:	ebb9 0802 	subs.w	r8, r9, r2
 80004f8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004fc:	3801      	subs	r0, #1
 80004fe:	e7a3      	b.n	8000448 <__udivmoddi4+0x1f8>
 8000500:	4643      	mov	r3, r8
 8000502:	e7ea      	b.n	80004da <__udivmoddi4+0x28a>
 8000504:	4628      	mov	r0, r5
 8000506:	e794      	b.n	8000432 <__udivmoddi4+0x1e2>
 8000508:	4641      	mov	r1, r8
 800050a:	e7d1      	b.n	80004b0 <__udivmoddi4+0x260>
 800050c:	46d0      	mov	r8, sl
 800050e:	e77b      	b.n	8000408 <__udivmoddi4+0x1b8>
 8000510:	4464      	add	r4, ip
 8000512:	3802      	subs	r0, #2
 8000514:	e747      	b.n	80003a6 <__udivmoddi4+0x156>
 8000516:	3b02      	subs	r3, #2
 8000518:	4465      	add	r5, ip
 800051a:	e72f      	b.n	800037c <__udivmoddi4+0x12c>
 800051c:	4608      	mov	r0, r1
 800051e:	e706      	b.n	800032e <__udivmoddi4+0xde>
 8000520:	4631      	mov	r1, r6
 8000522:	e6e9      	b.n	80002f8 <__udivmoddi4+0xa8>

08000524 <__aeabi_idiv0>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <initApp_Display>:

static uint16_t countdowntime;
static _RTC switchtime;

void initApp_Display ()
{
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
	LCD_Init();
 800052c:	f006 fcce 	bl	8006ecc <LCD_Init>
	Screen_Init(&myRTC);
 8000530:	4802      	ldr	r0, [pc, #8]	; (800053c <initApp_Display+0x14>)
 8000532:	f006 fe85 	bl	8007240 <Screen_Init>
}
 8000536:	bf00      	nop
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	20000f6c 	.word	0x20000f6c

08000540 <display_SensorX>:

void display_SensorX(uint8_t sensorIndex)
{
 8000540:	b590      	push	{r4, r7, lr}
 8000542:	b087      	sub	sp, #28
 8000544:	af02      	add	r7, sp, #8
 8000546:	4603      	mov	r3, r0
 8000548:	71fb      	strb	r3, [r7, #7]
	if (sensorIndex > myStation.ssNode_list->length)	{
 800054a:	79fa      	ldrb	r2, [r7, #7]
 800054c:	4b19      	ldr	r3, [pc, #100]	; (80005b4 <display_SensorX+0x74>)
 800054e:	68db      	ldr	r3, [r3, #12]
 8000550:	689b      	ldr	r3, [r3, #8]
 8000552:	429a      	cmp	r2, r3
 8000554:	d908      	bls.n	8000568 <display_SensorX+0x28>
		Screen_Monitor_Station(myStation.stID, myStation.stCurrent);
 8000556:	4b17      	ldr	r3, [pc, #92]	; (80005b4 <display_SensorX+0x74>)
 8000558:	785b      	ldrb	r3, [r3, #1]
 800055a:	4a16      	ldr	r2, [pc, #88]	; (80005b4 <display_SensorX+0x74>)
 800055c:	8852      	ldrh	r2, [r2, #2]
 800055e:	4611      	mov	r1, r2
 8000560:	4618      	mov	r0, r3
 8000562:	f006 ffbf 	bl	80074e4 <Screen_Monitor_Station>
		return ;
 8000566:	e021      	b.n	80005ac <display_SensorX+0x6c>

	}

	Node * current = myStation.ssNode_list->head;
 8000568:	4b12      	ldr	r3, [pc, #72]	; (80005b4 <display_SensorX+0x74>)
 800056a:	68db      	ldr	r3, [r3, #12]
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < sensorIndex; i++)
 8000570:	2300      	movs	r3, #0
 8000572:	72fb      	strb	r3, [r7, #11]
 8000574:	e005      	b.n	8000582 <display_SensorX+0x42>
	{
		current = current->next;
 8000576:	68fb      	ldr	r3, [r7, #12]
 8000578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800057a:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < sensorIndex; i++)
 800057c:	7afb      	ldrb	r3, [r7, #11]
 800057e:	3301      	adds	r3, #1
 8000580:	72fb      	strb	r3, [r7, #11]
 8000582:	7afa      	ldrb	r2, [r7, #11]
 8000584:	79fb      	ldrb	r3, [r7, #7]
 8000586:	429a      	cmp	r2, r3
 8000588:	d3f5      	bcc.n	8000576 <display_SensorX+0x36>
	}
	Screen_Monitor_Node(current->SSnode.SSnode_ID, current->SSnode.sensorMode,
 800058a:	68fb      	ldr	r3, [r7, #12]
 800058c:	7818      	ldrb	r0, [r3, #0]
 800058e:	68fb      	ldr	r3, [r7, #12]
 8000590:	7a5b      	ldrb	r3, [r3, #9]
 8000592:	b2d9      	uxtb	r1, r3
			current->SSnode.Battery, current->SSnode.V_type, current->SSnode.V_value);
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	785b      	ldrb	r3, [r3, #1]
	Screen_Monitor_Node(current->SSnode.SSnode_ID, current->SSnode.sensorMode,
 8000598:	b29a      	uxth	r2, r3
			current->SSnode.Battery, current->SSnode.V_type, current->SSnode.V_value);
 800059a:	68fb      	ldr	r3, [r7, #12]
 800059c:	789c      	ldrb	r4, [r3, #2]
	Screen_Monitor_Node(current->SSnode.SSnode_ID, current->SSnode.sensorMode,
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	889b      	ldrh	r3, [r3, #4]
 80005a2:	b29b      	uxth	r3, r3
 80005a4:	9300      	str	r3, [sp, #0]
 80005a6:	4623      	mov	r3, r4
 80005a8:	f006 fffe 	bl	80075a8 <Screen_Monitor_Node>

}
 80005ac:	3714      	adds	r7, #20
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd90      	pop	{r4, r7, pc}
 80005b2:	bf00      	nop
 80005b4:	20000474 	.word	0x20000474

080005b8 <setSwitchtime>:

void setSwitchtime()
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
	DS3231_GetTime(&switchtime);
 80005bc:	4802      	ldr	r0, [pc, #8]	; (80005c8 <setSwitchtime+0x10>)
 80005be:	f003 fca5 	bl	8003f0c <DS3231_GetTime>
}
 80005c2:	bf00      	nop
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	200005cc 	.word	0x200005cc

080005cc <getSwitchtime>:
_RTC getSwitchtime()
{
 80005cc:	b480      	push	{r7}
 80005ce:	b083      	sub	sp, #12
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
	return switchtime;
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	4a06      	ldr	r2, [pc, #24]	; (80005f0 <getSwitchtime+0x24>)
 80005d8:	6810      	ldr	r0, [r2, #0]
 80005da:	6018      	str	r0, [r3, #0]
 80005dc:	8891      	ldrh	r1, [r2, #4]
 80005de:	7992      	ldrb	r2, [r2, #6]
 80005e0:	8099      	strh	r1, [r3, #4]
 80005e2:	719a      	strb	r2, [r3, #6]
}
 80005e4:	6878      	ldr	r0, [r7, #4]
 80005e6:	370c      	adds	r7, #12
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bc80      	pop	{r7}
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop
 80005f0:	200005cc 	.word	0x200005cc

080005f4 <processingApp_display>:
void processingApp_display()
{
 80005f4:	b590      	push	{r4, r7, lr}
 80005f6:	b083      	sub	sp, #12
 80005f8:	af00      	add	r7, sp, #0

	if (getClearflag()) 	{
 80005fa:	f003 f97d 	bl	80038f8 <getClearflag>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d004      	beq.n	800060e <processingApp_display+0x1a>
		LCD_Clear();
 8000604:	f006 fe14 	bl	8007230 <LCD_Clear>
		setClearflag(DISABLE);
 8000608:	2000      	movs	r0, #0
 800060a:	f003 f981 	bl	8003910 <setClearflag>
	}
	switch(myDisplayMode)	{
 800060e:	4b5d      	ldr	r3, [pc, #372]	; (8000784 <processingApp_display+0x190>)
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	2b09      	cmp	r3, #9
 8000614:	f200 80b0 	bhi.w	8000778 <processingApp_display+0x184>
 8000618:	a201      	add	r2, pc, #4	; (adr r2, 8000620 <processingApp_display+0x2c>)
 800061a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800061e:	bf00      	nop
 8000620:	08000649 	.word	0x08000649
 8000624:	0800065d 	.word	0x0800065d
 8000628:	08000683 	.word	0x08000683
 800062c:	08000695 	.word	0x08000695
 8000630:	080006bf 	.word	0x080006bf
 8000634:	080006cd 	.word	0x080006cd
 8000638:	08000743 	.word	0x08000743
 800063c:	0800075d 	.word	0x0800075d
 8000640:	0800071f 	.word	0x0800071f
 8000644:	080006fb 	.word	0x080006fb
		case HOME:
			Screen_Home_Origin(myStation.stID, MQTT_getConnectflag());
 8000648:	4b4f      	ldr	r3, [pc, #316]	; (8000788 <processingApp_display+0x194>)
 800064a:	785c      	ldrb	r4, [r3, #1]
 800064c:	f004 f95a 	bl	8004904 <MQTT_getConnectflag>
 8000650:	4603      	mov	r3, r0
 8000652:	4619      	mov	r1, r3
 8000654:	4620      	mov	r0, r4
 8000656:	f006 fe05 	bl	8007264 <Screen_Home_Origin>
			break;
 800065a:	e08e      	b.n	800077a <processingApp_display+0x186>
		case COUNTDOWN_SW_OFF:
			countdowntime = getCountdowntime(myStation.calibTime.hour,
 800065c:	4b4a      	ldr	r3, [pc, #296]	; (8000788 <processingApp_display+0x194>)
 800065e:	7cdb      	ldrb	r3, [r3, #19]
 8000660:	4a49      	ldr	r2, [pc, #292]	; (8000788 <processingApp_display+0x194>)
 8000662:	7d11      	ldrb	r1, [r2, #20]
 8000664:	4a48      	ldr	r2, [pc, #288]	; (8000788 <processingApp_display+0x194>)
 8000666:	7d52      	ldrb	r2, [r2, #21]
 8000668:	4618      	mov	r0, r3
 800066a:	f003 fe69 	bl	8004340 <getCountdowntime>
 800066e:	4603      	mov	r3, r0
 8000670:	461a      	mov	r2, r3
 8000672:	4b46      	ldr	r3, [pc, #280]	; (800078c <processingApp_display+0x198>)
 8000674:	801a      	strh	r2, [r3, #0]
												myStation.calibTime.min, myStation.calibTime.sec);
			Screen_Home_Sync(countdowntime);
 8000676:	4b45      	ldr	r3, [pc, #276]	; (800078c <processingApp_display+0x198>)
 8000678:	881b      	ldrh	r3, [r3, #0]
 800067a:	4618      	mov	r0, r3
 800067c:	f006 fe84 	bl	8007388 <Screen_Home_Sync>
			break;
 8000680:	e07b      	b.n	800077a <processingApp_display+0x186>
		case AFTER_SW_OFF:
			displayCalibFlag = 0;
 8000682:	4b43      	ldr	r3, [pc, #268]	; (8000790 <processingApp_display+0x19c>)
 8000684:	2200      	movs	r2, #0
 8000686:	701a      	strb	r2, [r3, #0]
			displayAfterSwitchoff = 0;
 8000688:	4b42      	ldr	r3, [pc, #264]	; (8000794 <processingApp_display+0x1a0>)
 800068a:	2200      	movs	r2, #0
 800068c:	701a      	strb	r2, [r3, #0]
			Screen_Home_Calib();
 800068e:	f006 fec9 	bl	8007424 <Screen_Home_Calib>
			break;
 8000692:	e072      	b.n	800077a <processingApp_display+0x186>
		case MONITOR:

			if (get_curMonitor() == 0) 	{
 8000694:	f003 f9a6 	bl	80039e4 <get_curMonitor>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d108      	bne.n	80006b0 <processingApp_display+0xbc>
				Screen_Monitor_Station(myStation.MBAstate, myStation.stCurrent);
 800069e:	4b3a      	ldr	r3, [pc, #232]	; (8000788 <processingApp_display+0x194>)
 80006a0:	799b      	ldrb	r3, [r3, #6]
 80006a2:	4a39      	ldr	r2, [pc, #228]	; (8000788 <processingApp_display+0x194>)
 80006a4:	8852      	ldrh	r2, [r2, #2]
 80006a6:	4611      	mov	r1, r2
 80006a8:	4618      	mov	r0, r3
 80006aa:	f006 ff1b 	bl	80074e4 <Screen_Monitor_Station>
			}
			else {
				display_SensorX(get_curMonitor());
			}
			break;
 80006ae:	e064      	b.n	800077a <processingApp_display+0x186>
				display_SensorX(get_curMonitor());
 80006b0:	f003 f998 	bl	80039e4 <get_curMonitor>
 80006b4:	4603      	mov	r3, r0
 80006b6:	4618      	mov	r0, r3
 80006b8:	f7ff ff42 	bl	8000540 <display_SensorX>
			break;
 80006bc:	e05d      	b.n	800077a <processingApp_display+0x186>
		case MENU_CONTROL:
			Screen_Function(getcurControl());
 80006be:	f003 f94f 	bl	8003960 <getcurControl>
 80006c2:	4603      	mov	r3, r0
 80006c4:	4618      	mov	r0, r3
 80006c6:	f007 f875 	bl	80077b4 <Screen_Function>
			break;
 80006ca:	e056      	b.n	800077a <processingApp_display+0x186>
		case VOLTAGE_CONTROL:
			Screen_Voltage_Control(getLimit(), getStepValorDir());
 80006cc:	f002 ffe6 	bl	800369c <getLimit>
 80006d0:	4603      	mov	r3, r0
 80006d2:	461c      	mov	r4, r3
 80006d4:	f003 f8fc 	bl	80038d0 <getStepValorDir>
 80006d8:	4603      	mov	r3, r0
 80006da:	4619      	mov	r1, r3
 80006dc:	4620      	mov	r0, r4
 80006de:	f007 f8a3 	bl	8007828 <Screen_Voltage_Control>
			Screen_Voltage_Control_Control_Motor(getStepchange(), Step_getDir());
 80006e2:	f003 f847 	bl	8003774 <getStepchange>
 80006e6:	4603      	mov	r3, r0
 80006e8:	461c      	mov	r4, r3
 80006ea:	f002 ffe1 	bl	80036b0 <Step_getDir>
 80006ee:	4603      	mov	r3, r0
 80006f0:	4619      	mov	r1, r3
 80006f2:	4620      	mov	r0, r4
 80006f4:	f007 f99a 	bl	8007a2c <Screen_Voltage_Control_Control_Motor>
			break;
 80006f8:	e03f      	b.n	800077a <processingApp_display+0x186>
		case STEP_DIR_CONTROL:
			Screen_Dir_Control(getLimit());
 80006fa:	f002 ffcf 	bl	800369c <getLimit>
 80006fe:	4603      	mov	r3, r0
 8000700:	4618      	mov	r0, r3
 8000702:	f007 f8f3 	bl	80078ec <Screen_Dir_Control>
			Screen_Voltage_Control_Control_Motor(getStepchange(), Step_getDir());
 8000706:	f003 f835 	bl	8003774 <getStepchange>
 800070a:	4603      	mov	r3, r0
 800070c:	461c      	mov	r4, r3
 800070e:	f002 ffcf 	bl	80036b0 <Step_getDir>
 8000712:	4603      	mov	r3, r0
 8000714:	4619      	mov	r1, r3
 8000716:	4620      	mov	r0, r4
 8000718:	f007 f988 	bl	8007a2c <Screen_Voltage_Control_Control_Motor>
			break;
 800071c:	e02d      	b.n	800077a <processingApp_display+0x186>
		case STEP_VAL_CONTROL:
			Screen_StepVal_Control(getLimit());
 800071e:	f002 ffbd 	bl	800369c <getLimit>
 8000722:	4603      	mov	r3, r0
 8000724:	4618      	mov	r0, r3
 8000726:	f007 f931 	bl	800798c <Screen_StepVal_Control>
			Screen_Voltage_Control_Control_Motor(getStepchange(), Step_getDir());
 800072a:	f003 f823 	bl	8003774 <getStepchange>
 800072e:	4603      	mov	r3, r0
 8000730:	461c      	mov	r4, r3
 8000732:	f002 ffbd 	bl	80036b0 <Step_getDir>
 8000736:	4603      	mov	r3, r0
 8000738:	4619      	mov	r1, r3
 800073a:	4620      	mov	r0, r4
 800073c:	f007 f976 	bl	8007a2c <Screen_Voltage_Control_Control_Motor>
			break;
 8000740:	e01b      	b.n	800077a <processingApp_display+0x186>
		case ON_OFF_CONTROL:
			Screen_Control_Relay(1);
 8000742:	2001      	movs	r0, #1
 8000744:	f007 f9a6 	bl	8007a94 <Screen_Control_Relay>
			Screen_Control_Relay_Change_Mode(myStation.MBAstate, getCurswitch());
 8000748:	4b0f      	ldr	r3, [pc, #60]	; (8000788 <processingApp_display+0x194>)
 800074a:	799c      	ldrb	r4, [r3, #6]
 800074c:	f003 f8ca 	bl	80038e4 <getCurswitch>
 8000750:	4603      	mov	r3, r0
 8000752:	4619      	mov	r1, r3
 8000754:	4620      	mov	r0, r4
 8000756:	f007 f9e3 	bl	8007b20 <Screen_Control_Relay_Change_Mode>
			break;
 800075a:	e00e      	b.n	800077a <processingApp_display+0x186>
		case COMPLETE_CONTROL:
			Screen_Accept_Relay(getSwitchtime(), getCurswitch());
 800075c:	463b      	mov	r3, r7
 800075e:	4618      	mov	r0, r3
 8000760:	f7ff ff34 	bl	80005cc <getSwitchtime>
 8000764:	f003 f8be 	bl	80038e4 <getCurswitch>
 8000768:	4603      	mov	r3, r0
 800076a:	461a      	mov	r2, r3
 800076c:	463b      	mov	r3, r7
 800076e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000772:	f007 fa05 	bl	8007b80 <Screen_Accept_Relay>
			break;
 8000776:	e000      	b.n	800077a <processingApp_display+0x186>
		default:
			break;
 8000778:	bf00      	nop
		}
//	Screen_Home_Origin(myStation.stID);

//	Screen_Home_Sync(countdowntime);
}
 800077a:	bf00      	nop
 800077c:	370c      	adds	r7, #12
 800077e:	46bd      	mov	sp, r7
 8000780:	bd90      	pop	{r4, r7, pc}
 8000782:	bf00      	nop
 8000784:	200005c4 	.word	0x200005c4
 8000788:	20000474 	.word	0x20000474
 800078c:	200005c8 	.word	0x200005c8
 8000790:	200005c5 	.word	0x200005c5
 8000794:	200005c6 	.word	0x200005c6

08000798 <initApp_MBA_stepmor>:
#include "Step_motor.h"
#include "user_a4988.h"

static Stepmotor_change_mode_t changeMode;
void initApp_MBA_stepmor()
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0

}
 800079c:	bf00      	nop
 800079e:	46bd      	mov	sp, r7
 80007a0:	bc80      	pop	{r7}
 80007a2:	4770      	bx	lr

080007a4 <processingApp_MBA_stepmor>:

void processingApp_MBA_stepmor()
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
	if(checkTaskflag(TASK_CTRL_STEPMOR))	{
 80007a8:	2004      	movs	r0, #4
 80007aa:	f004 fe29 	bl	8005400 <checkTaskflag>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d038      	beq.n	8000826 <processingApp_MBA_stepmor+0x82>
		switch ( getLimit() )	{
 80007b4:	f002 ff72 	bl	800369c <getLimit>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d00a      	beq.n	80007d4 <processingApp_MBA_stepmor+0x30>
 80007be:	2b01      	cmp	r3, #1
 80007c0:	d111      	bne.n	80007e6 <processingApp_MBA_stepmor+0x42>
		case LIMIT_MAX:
			if (Step_getDir() == STEPM_DIR_DEC)	{
 80007c2:	f002 ff75 	bl	80036b0 <Step_getDir>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b02      	cmp	r3, #2
 80007ca:	d10e      	bne.n	80007ea <processingApp_MBA_stepmor+0x46>
				setLimit(LIMIT_NONE);
 80007cc:	2002      	movs	r0, #2
 80007ce:	f002 ff55 	bl	800367c <setLimit>
			}
			break;
 80007d2:	e00a      	b.n	80007ea <processingApp_MBA_stepmor+0x46>
		case LIMIT_MIN:
			if (Step_getDir() == STEPM_DIR_INC)	{
 80007d4:	f002 ff6c 	bl	80036b0 <Step_getDir>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b01      	cmp	r3, #1
 80007dc:	d107      	bne.n	80007ee <processingApp_MBA_stepmor+0x4a>
				setLimit(LIMIT_NONE);
 80007de:	2002      	movs	r0, #2
 80007e0:	f002 ff4c 	bl	800367c <setLimit>
			}
			break;
 80007e4:	e003      	b.n	80007ee <processingApp_MBA_stepmor+0x4a>
		default :
			break;
 80007e6:	bf00      	nop
 80007e8:	e002      	b.n	80007f0 <processingApp_MBA_stepmor+0x4c>
			break;
 80007ea:	bf00      	nop
 80007ec:	e000      	b.n	80007f0 <processingApp_MBA_stepmor+0x4c>
			break;
 80007ee:	bf00      	nop
		}
		changeMode = Step_getChangemode();
 80007f0:	f003 f806 	bl	8003800 <Step_getChangemode>
 80007f4:	4603      	mov	r3, r0
 80007f6:	461a      	mov	r2, r3
 80007f8:	4b0c      	ldr	r3, [pc, #48]	; (800082c <processingApp_MBA_stepmor+0x88>)
 80007fa:	701a      	strb	r2, [r3, #0]
		switch (changeMode)	{
 80007fc:	4b0b      	ldr	r3, [pc, #44]	; (800082c <processingApp_MBA_stepmor+0x88>)
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	2b01      	cmp	r3, #1
 8000802:	d004      	beq.n	800080e <processingApp_MBA_stepmor+0x6a>
 8000804:	2b02      	cmp	r3, #2
 8000806:	d105      	bne.n	8000814 <processingApp_MBA_stepmor+0x70>
		case STEPM_MODE_STEP:
			Step_step();
 8000808:	f003 f804 	bl	8003814 <Step_step>
			break;
 800080c:	e003      	b.n	8000816 <processingApp_MBA_stepmor+0x72>
		case STEPM_MODE_PERCENTAGE:
			Step_percent();
 800080e:	f003 f827 	bl	8003860 <Step_percent>
			break;
 8000812:	e000      	b.n	8000816 <processingApp_MBA_stepmor+0x72>
		default:
			break;
 8000814:	bf00      	nop
		}
		// trigger task send output data to server
		triggerTaskflag(TASK_SEND_DATAPERIOD, FLAG_EN);
 8000816:	2101      	movs	r1, #1
 8000818:	2007      	movs	r0, #7
 800081a:	f004 fee5 	bl	80055e8 <triggerTaskflag>
		// disable task control step motor
		triggerTaskflag(TASK_CTRL_STEPMOR, FLAG_DIS);
 800081e:	2100      	movs	r1, #0
 8000820:	2004      	movs	r0, #4
 8000822:	f004 fee1 	bl	80055e8 <triggerTaskflag>
	}
}
 8000826:	bf00      	nop
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	200005d3 	.word	0x200005d3

08000830 <processApp_MCU>:
//			current = current->next;
//		}
//	return count;
//}
void processApp_MCU(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
		/*Check for task*/
		if ( checkTaskflag(TASK_PREPARE_CALIB) )	{
 8000834:	2002      	movs	r0, #2
 8000836:	f004 fde3 	bl	8005400 <checkTaskflag>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d019      	beq.n	8000874 <processApp_MCU+0x44>

			//Synchronize RTC time for Station and Sensor
			triggerTaskflag(TASK_GET_GPS_TIME, FLAG_EN);
 8000840:	2101      	movs	r1, #1
 8000842:	2005      	movs	r0, #5
 8000844:	f004 fed0 	bl	80055e8 <triggerTaskflag>

			// Send WAKEUP command for Sensor
			Lora_Setmode(WAKE , 0);
 8000848:	2100      	movs	r1, #0
 800084a:	2001      	movs	r0, #1
 800084c:	f004 f810 	bl	8004870 <Lora_Setmode>

			// This flag for check Sensor ready
			myStation.prepare_flag = 1;
 8000850:	4a23      	ldr	r2, [pc, #140]	; (80008e0 <processApp_MCU+0xb0>)
 8000852:	7813      	ldrb	r3, [r2, #0]
 8000854:	f043 0301 	orr.w	r3, r3, #1
 8000858:	7013      	strb	r3, [r2, #0]

			// Start timer 100s
			NWRDtick = HAL_GetTick();
 800085a:	f007 fa77 	bl	8007d4c <HAL_GetTick>
 800085e:	4603      	mov	r3, r0
 8000860:	4a20      	ldr	r2, [pc, #128]	; (80008e4 <processApp_MCU+0xb4>)
 8000862:	6013      	str	r3, [r2, #0]

			// Trigger send NETWORK READY message to Server
			triggerTaskflag(TASK_SEND_NWREADY, FLAG_EN);
 8000864:	2101      	movs	r1, #1
 8000866:	2006      	movs	r0, #6
 8000868:	f004 febe 	bl	80055e8 <triggerTaskflag>

			triggerTaskflag(TASK_PREPARE_CALIB, FLAG_DIS);
 800086c:	2100      	movs	r1, #0
 800086e:	2002      	movs	r0, #2
 8000870:	f004 feba 	bl	80055e8 <triggerTaskflag>
		}

		if ((HAL_GetTick() - NWRDtick > 100000) && checkTaskflag(TASK_SEND_NWREADY))	{
 8000874:	f007 fa6a 	bl	8007d4c <HAL_GetTick>
 8000878:	4602      	mov	r2, r0
 800087a:	4b1a      	ldr	r3, [pc, #104]	; (80008e4 <processApp_MCU+0xb4>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	1ad3      	subs	r3, r2, r3
 8000880:	4a19      	ldr	r2, [pc, #100]	; (80008e8 <processApp_MCU+0xb8>)
 8000882:	4293      	cmp	r3, r2
 8000884:	d908      	bls.n	8000898 <processApp_MCU+0x68>
 8000886:	2006      	movs	r0, #6
 8000888:	f004 fdba 	bl	8005400 <checkTaskflag>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d002      	beq.n	8000898 <processApp_MCU+0x68>
			sendData2Server(DATA_NETWREADY);
 8000892:	2002      	movs	r0, #2
 8000894:	f001 f878 	bl	8001988 <sendData2Server>
		}

		if( checkTaskflag(TASK_START_CALIB) ) {
 8000898:	2003      	movs	r0, #3
 800089a:	f004 fdb1 	bl	8005400 <checkTaskflag>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d007      	beq.n	80008b4 <processApp_MCU+0x84>

			// Send DATA CALIBRATION to Server
			triggerTaskflag(TASK_SEND_DATACALIB, FLAG_EN);
 80008a4:	2101      	movs	r1, #1
 80008a6:	2008      	movs	r0, #8
 80008a8:	f004 fe9e 	bl	80055e8 <triggerTaskflag>
			triggerTaskflag(TASK_START_CALIB, FLAG_DIS);
 80008ac:	2100      	movs	r1, #0
 80008ae:	2003      	movs	r0, #3
 80008b0:	f004 fe9a 	bl	80055e8 <triggerTaskflag>
		}

		// Send data period
		if (HAL_GetTick() - tick >= UPDATE_DATA_PERIOD *1000)	{
 80008b4:	f007 fa4a 	bl	8007d4c <HAL_GetTick>
 80008b8:	4602      	mov	r2, r0
 80008ba:	4b0c      	ldr	r3, [pc, #48]	; (80008ec <processApp_MCU+0xbc>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	1ad3      	subs	r3, r2, r3
 80008c0:	f242 720f 	movw	r2, #9999	; 0x270f
 80008c4:	4293      	cmp	r3, r2
 80008c6:	d908      	bls.n	80008da <processApp_MCU+0xaa>
			triggerTaskflag(TASK_SEND_DATAPERIOD, FLAG_EN);
 80008c8:	2101      	movs	r1, #1
 80008ca:	2007      	movs	r0, #7
 80008cc:	f004 fe8c 	bl	80055e8 <triggerTaskflag>
			tick = HAL_GetTick();
 80008d0:	f007 fa3c 	bl	8007d4c <HAL_GetTick>
 80008d4:	4603      	mov	r3, r0
 80008d6:	4a05      	ldr	r2, [pc, #20]	; (80008ec <processApp_MCU+0xbc>)
 80008d8:	6013      	str	r3, [r2, #0]
		}

}
 80008da:	bf00      	nop
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	20000474 	.word	0x20000474
 80008e4:	200005d8 	.word	0x200005d8
 80008e8:	000186a0 	.word	0x000186a0
 80008ec:	200005d4 	.word	0x200005d4

080008f0 <initApp_MQTT>:

uint32_t tickconnect =0;
uint32_t tickreg = 0;
uint32_t ticksend = 0;
void initApp_MQTT()
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af02      	add	r7, sp, #8
//	myStation = station;
//	mySim = sim;
	init_MQTT();
 80008f6:	f003 ffff 	bl	80048f8 <init_MQTT>
	initServerMsg();
 80008fa:	f000 fc01 	bl	8001100 <initServerMsg>
	SIM_sendCMD((uint8_t*)"ATE0",(uint8_t*)"OK", ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, 1000);
 80008fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000902:	9300      	str	r3, [sp, #0]
 8000904:	2301      	movs	r3, #1
 8000906:	2201      	movs	r2, #1
 8000908:	4903      	ldr	r1, [pc, #12]	; (8000918 <initApp_MQTT+0x28>)
 800090a:	4804      	ldr	r0, [pc, #16]	; (800091c <initApp_MQTT+0x2c>)
 800090c:	f001 feae 	bl	800266c <SIM_sendCMD>
}
 8000910:	bf00      	nop
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	0800ecdc 	.word	0x0800ecdc
 800091c:	0800ece0 	.word	0x0800ece0

08000920 <dataCalibavailble>:

uint8_t dataCalibavailble()
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
	if (myStation.ssNode_list->length == 0)	{
 8000926:	4b12      	ldr	r3, [pc, #72]	; (8000970 <dataCalibavailble+0x50>)
 8000928:	68db      	ldr	r3, [r3, #12]
 800092a:	689b      	ldr	r3, [r3, #8]
 800092c:	2b00      	cmp	r3, #0
 800092e:	d101      	bne.n	8000934 <dataCalibavailble+0x14>
		return 1;
 8000930:	2301      	movs	r3, #1
 8000932:	e019      	b.n	8000968 <dataCalibavailble+0x48>
	}
	Node * current =myStation.ssNode_list->head->next;
 8000934:	4b0e      	ldr	r3, [pc, #56]	; (8000970 <dataCalibavailble+0x50>)
 8000936:	68db      	ldr	r3, [r3, #12]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800093c:	607b      	str	r3, [r7, #4]
		while (current != myStation.ssNode_list->tail)	{
 800093e:	e00c      	b.n	800095a <dataCalibavailble+0x3a>
			if (current->SSnode.dataCalibAvailable) 	{
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	79db      	ldrb	r3, [r3, #7]
 8000944:	2b00      	cmp	r3, #0
 8000946:	d005      	beq.n	8000954 <dataCalibavailble+0x34>
				triggerTaskflag(TASK_SEND_DATACALIB, FLAG_EN);
 8000948:	2101      	movs	r1, #1
 800094a:	2008      	movs	r0, #8
 800094c:	f004 fe4c 	bl	80055e8 <triggerTaskflag>
				return 1;
 8000950:	2301      	movs	r3, #1
 8000952:	e009      	b.n	8000968 <dataCalibavailble+0x48>
			}
			current = current->next;
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000958:	607b      	str	r3, [r7, #4]
		while (current != myStation.ssNode_list->tail)	{
 800095a:	4b05      	ldr	r3, [pc, #20]	; (8000970 <dataCalibavailble+0x50>)
 800095c:	68db      	ldr	r3, [r3, #12]
 800095e:	685b      	ldr	r3, [r3, #4]
 8000960:	687a      	ldr	r2, [r7, #4]
 8000962:	429a      	cmp	r2, r3
 8000964:	d1ec      	bne.n	8000940 <dataCalibavailble+0x20>
		}
	return 0;
 8000966:	2300      	movs	r3, #0
}
 8000968:	4618      	mov	r0, r3
 800096a:	3708      	adds	r7, #8
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	20000474 	.word	0x20000474

08000974 <checkSensorReady>:
//		}
//	return count;
//}

uint8_t checkSensorReady ()
{
 8000974:	b480      	push	{r7}
 8000976:	b083      	sub	sp, #12
 8000978:	af00      	add	r7, sp, #0
	uint8_t count = 0;
 800097a:	2300      	movs	r3, #0
 800097c:	71fb      	strb	r3, [r7, #7]
	Node * current =myStation.ssNode_list->head->next;
 800097e:	4b0f      	ldr	r3, [pc, #60]	; (80009bc <checkSensorReady+0x48>)
 8000980:	68db      	ldr	r3, [r3, #12]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000986:	603b      	str	r3, [r7, #0]
		while (current != myStation.ssNode_list->tail)	{
 8000988:	e00c      	b.n	80009a4 <checkSensorReady+0x30>
			if (current->SSnode.Ready == 1 ) 	{
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	7a1b      	ldrb	r3, [r3, #8]
 800098e:	f003 0301 	and.w	r3, r3, #1
 8000992:	b2db      	uxtb	r3, r3
 8000994:	2b00      	cmp	r3, #0
 8000996:	d002      	beq.n	800099e <checkSensorReady+0x2a>
				count++;
 8000998:	79fb      	ldrb	r3, [r7, #7]
 800099a:	3301      	adds	r3, #1
 800099c:	71fb      	strb	r3, [r7, #7]
			}
			current = current->next;
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80009a2:	603b      	str	r3, [r7, #0]
		while (current != myStation.ssNode_list->tail)	{
 80009a4:	4b05      	ldr	r3, [pc, #20]	; (80009bc <checkSensorReady+0x48>)
 80009a6:	68db      	ldr	r3, [r3, #12]
 80009a8:	685b      	ldr	r3, [r3, #4]
 80009aa:	683a      	ldr	r2, [r7, #0]
 80009ac:	429a      	cmp	r2, r3
 80009ae:	d1ec      	bne.n	800098a <checkSensorReady+0x16>
		}
	return count;
 80009b0:	79fb      	ldrb	r3, [r7, #7]
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	370c      	adds	r7, #12
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bc80      	pop	{r7}
 80009ba:	4770      	bx	lr
 80009bc:	20000474 	.word	0x20000474

080009c0 <sendNWready>:
void sendNWready()
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
	if (myStation.ssNode_list->length == 0)	{
 80009c4:	4b0a      	ldr	r3, [pc, #40]	; (80009f0 <sendNWready+0x30>)
 80009c6:	68db      	ldr	r3, [r3, #12]
 80009c8:	689b      	ldr	r3, [r3, #8]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d102      	bne.n	80009d4 <sendNWready+0x14>
		sendData2Server(DATA_NETWREADY);
 80009ce:	2002      	movs	r0, #2
 80009d0:	f000 ffda 	bl	8001988 <sendData2Server>
	}
	if ( checkSensorReady() == myStation.ssNode_list->length )	{
 80009d4:	f7ff ffce 	bl	8000974 <checkSensorReady>
 80009d8:	4603      	mov	r3, r0
 80009da:	461a      	mov	r2, r3
 80009dc:	4b04      	ldr	r3, [pc, #16]	; (80009f0 <sendNWready+0x30>)
 80009de:	68db      	ldr	r3, [r3, #12]
 80009e0:	689b      	ldr	r3, [r3, #8]
 80009e2:	429a      	cmp	r2, r3
 80009e4:	d102      	bne.n	80009ec <sendNWready+0x2c>
		sendData2Server(DATA_NETWREADY);
 80009e6:	2002      	movs	r0, #2
 80009e8:	f000 ffce 	bl	8001988 <sendData2Server>
	}
}
 80009ec:	bf00      	nop
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	20000474 	.word	0x20000474

080009f4 <processApp_MQTT>:
void processApp_MQTT(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af02      	add	r7, sp, #8
	//	 Check for connection to MQTT broker every 30s
	if (HAL_GetTick() - tickconnect > 30000)	{
 80009fa:	f007 f9a7 	bl	8007d4c <HAL_GetTick>
 80009fe:	4602      	mov	r2, r0
 8000a00:	4bbd      	ldr	r3, [pc, #756]	; (8000cf8 <processApp_MQTT+0x304>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	1ad3      	subs	r3, r2, r3
 8000a06:	f247 5230 	movw	r2, #30000	; 0x7530
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d921      	bls.n	8000a52 <processApp_MQTT+0x5e>
//		MQTT_connected();
		if (!checkSubcribe((uint8_t*)TOPIC_SUB) || !checkSubcribe((uint8_t*)TOPIC_SUB_BROADCAST) )	{
 8000a0e:	48bb      	ldr	r0, [pc, #748]	; (8000cfc <processApp_MQTT+0x308>)
 8000a10:	f004 fbd6 	bl	80051c0 <checkSubcribe>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d005      	beq.n	8000a26 <processApp_MQTT+0x32>
 8000a1a:	48b9      	ldr	r0, [pc, #740]	; (8000d00 <processApp_MQTT+0x30c>)
 8000a1c:	f004 fbd0 	bl	80051c0 <checkSubcribe>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d110      	bne.n	8000a48 <processApp_MQTT+0x54>

			static uint8_t count = 0;
			count++;
 8000a26:	4bb7      	ldr	r3, [pc, #732]	; (8000d04 <processApp_MQTT+0x310>)
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	3301      	adds	r3, #1
 8000a2c:	b2da      	uxtb	r2, r3
 8000a2e:	4bb5      	ldr	r3, [pc, #724]	; (8000d04 <processApp_MQTT+0x310>)
 8000a30:	701a      	strb	r2, [r3, #0]
			if (count== 2) {
 8000a32:	4bb4      	ldr	r3, [pc, #720]	; (8000d04 <processApp_MQTT+0x310>)
 8000a34:	781b      	ldrb	r3, [r3, #0]
 8000a36:	2b02      	cmp	r3, #2
 8000a38:	d102      	bne.n	8000a40 <processApp_MQTT+0x4c>
				mySIM.mqttServer.connect = 0;
 8000a3a:	4bb3      	ldr	r3, [pc, #716]	; (8000d08 <processApp_MQTT+0x314>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	739a      	strb	r2, [r3, #14]
			}
			triggerTaskflag(TASK_SUBSCRIBE, FLAG_EN);
 8000a40:	2101      	movs	r1, #1
 8000a42:	2001      	movs	r0, #1
 8000a44:	f004 fdd0 	bl	80055e8 <triggerTaskflag>
		}
		tickconnect = HAL_GetTick();
 8000a48:	f007 f980 	bl	8007d4c <HAL_GetTick>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	4aaa      	ldr	r2, [pc, #680]	; (8000cf8 <processApp_MQTT+0x304>)
 8000a50:	6013      	str	r3, [r2, #0]
	}

	if ( !mySIM.mqttServer.connect  ) {
 8000a52:	4bad      	ldr	r3, [pc, #692]	; (8000d08 <processApp_MQTT+0x314>)
 8000a54:	7b9b      	ldrb	r3, [r3, #14]
 8000a56:	b2db      	uxtb	r3, r3
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d108      	bne.n	8000a6e <processApp_MQTT+0x7a>
			if (MQTT_connect())	{
 8000a5c:	f004 fa2a 	bl	8004eb4 <MQTT_connect>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d003      	beq.n	8000a6e <processApp_MQTT+0x7a>
				triggerTaskflag(TASK_SUBSCRIBE, FLAG_EN);
 8000a66:	2101      	movs	r1, #1
 8000a68:	2001      	movs	r0, #1
 8000a6a:	f004 fdbd 	bl	80055e8 <triggerTaskflag>
			}
		}
	/* Check for connect to Broker*/
	if (mySIM.mqttServer.connect)	{
 8000a6e:	4ba6      	ldr	r3, [pc, #664]	; (8000d08 <processApp_MQTT+0x314>)
 8000a70:	7b9b      	ldrb	r3, [r3, #14]
 8000a72:	b2db      	uxtb	r3, r3
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	f000 812a 	beq.w	8000cce <processApp_MQTT+0x2da>

		// Check for subscribe to broker
		if (  checkTaskflag(TASK_SUBSCRIBE) ) {
 8000a7a:	2001      	movs	r0, #1
 8000a7c:	f004 fcc0 	bl	8005400 <checkTaskflag>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d00f      	beq.n	8000aa6 <processApp_MQTT+0xb2>

			if ( MQTT_subcribe( (uint8_t*)TOPIC_SUB ) && MQTT_subcribe((uint8_t*)TOPIC_SUB_BROADCAST)) {
 8000a86:	489d      	ldr	r0, [pc, #628]	; (8000cfc <processApp_MQTT+0x308>)
 8000a88:	f004 fb2e 	bl	80050e8 <MQTT_subcribe>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d009      	beq.n	8000aa6 <processApp_MQTT+0xb2>
 8000a92:	489b      	ldr	r0, [pc, #620]	; (8000d00 <processApp_MQTT+0x30c>)
 8000a94:	f004 fb28 	bl	80050e8 <MQTT_subcribe>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d003      	beq.n	8000aa6 <processApp_MQTT+0xb2>
				triggerTaskflag(TASK_SUBSCRIBE, FLAG_DIS);
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	2001      	movs	r0, #1
 8000aa2:	f004 fda1 	bl	80055e8 <triggerTaskflag>
			}
		}

		// Check for register to Server
		if ( checkTaskflag(TASK_REGISTER) )	{
 8000aa6:	2000      	movs	r0, #0
 8000aa8:	f004 fcaa 	bl	8005400 <checkTaskflag>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d010      	beq.n	8000ad4 <processApp_MQTT+0xe0>
			if (HAL_GetTick() - tickreg > 10000)	{
 8000ab2:	f007 f94b 	bl	8007d4c <HAL_GetTick>
 8000ab6:	4602      	mov	r2, r0
 8000ab8:	4b94      	ldr	r3, [pc, #592]	; (8000d0c <processApp_MQTT+0x318>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	1ad3      	subs	r3, r2, r3
 8000abe:	f242 7210 	movw	r2, #10000	; 0x2710
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d906      	bls.n	8000ad4 <processApp_MQTT+0xe0>
				Register2Server();
 8000ac6:	f000 fe79 	bl	80017bc <Register2Server>
				tickreg = HAL_GetTick();
 8000aca:	f007 f93f 	bl	8007d4c <HAL_GetTick>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	4a8e      	ldr	r2, [pc, #568]	; (8000d0c <processApp_MQTT+0x318>)
 8000ad2:	6013      	str	r3, [r2, #0]
			}
		}

		// Send NETWORK READY message to Server
		if ( checkTaskflag(TASK_SEND_NWREADY))	{
 8000ad4:	2006      	movs	r0, #6
 8000ad6:	f004 fc93 	bl	8005400 <checkTaskflag>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <processApp_MQTT+0xf0>
			sendNWready();
 8000ae0:	f7ff ff6e 	bl	80009c0 <sendNWready>
		}

		// Send DATA CALIB
		if(checkTaskflag(TASK_SEND_DATACALIB) && dataCalibavailble())	{
 8000ae4:	2008      	movs	r0, #8
 8000ae6:	f004 fc8b 	bl	8005400 <checkTaskflag>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d007      	beq.n	8000b00 <processApp_MQTT+0x10c>
 8000af0:	f7ff ff16 	bl	8000920 <dataCalibavailble>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d002      	beq.n	8000b00 <processApp_MQTT+0x10c>

			sendData2Server(DATA_CALIB);
 8000afa:	2005      	movs	r0, #5
 8000afc:	f000 ff44 	bl	8001988 <sendData2Server>
		}

		// Send DATA PERIOD
		if (checkTaskflag(TASK_SEND_DATAPERIOD))	{
 8000b00:	2007      	movs	r0, #7
 8000b02:	f004 fc7d 	bl	8005400 <checkTaskflag>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d010      	beq.n	8000b2e <processApp_MQTT+0x13a>
			if (HAL_GetTick() - ticksend > 2000)	{
 8000b0c:	f007 f91e 	bl	8007d4c <HAL_GetTick>
 8000b10:	4602      	mov	r2, r0
 8000b12:	4b7f      	ldr	r3, [pc, #508]	; (8000d10 <processApp_MQTT+0x31c>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	1ad3      	subs	r3, r2, r3
 8000b18:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000b1c:	d907      	bls.n	8000b2e <processApp_MQTT+0x13a>
				sendData2Server(DATA_PERIOD);
 8000b1e:	2001      	movs	r0, #1
 8000b20:	f000 ff32 	bl	8001988 <sendData2Server>
				ticksend = HAL_GetTick();
 8000b24:	f007 f912 	bl	8007d4c <HAL_GetTick>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	4a79      	ldr	r2, [pc, #484]	; (8000d10 <processApp_MQTT+0x31c>)
 8000b2c:	6013      	str	r3, [r2, #0]
			}

		}

		// Send MBA status
		if (checkTaskflag(TASK_SEND_MBA_STATUS))	{
 8000b2e:	2009      	movs	r0, #9
 8000b30:	f004 fc66 	bl	8005400 <checkTaskflag>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d006      	beq.n	8000b48 <processApp_MQTT+0x154>
			sendData2Server(DATA_MBA_STATE);
 8000b3a:	2008      	movs	r0, #8
 8000b3c:	f000 ff24 	bl	8001988 <sendData2Server>
			triggerTaskflag(TASK_SEND_MBA_STATUS, FLAG_DIS);
 8000b40:	2100      	movs	r1, #0
 8000b42:	2009      	movs	r0, #9
 8000b44:	f004 fd50 	bl	80055e8 <triggerTaskflag>
		}

		// Send step Reach Limit
		if (checkTaskflag(TASK_SEND_STEP_LIMIT))	{
 8000b48:	2010      	movs	r0, #16
 8000b4a:	f004 fc59 	bl	8005400 <checkTaskflag>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d006      	beq.n	8000b62 <processApp_MQTT+0x16e>
			sendData2Server(DATA_STEP_REACH_LIMIT);
 8000b54:	2009      	movs	r0, #9
 8000b56:	f000 ff17 	bl	8001988 <sendData2Server>
			triggerTaskflag(TASK_SEND_STEP_LIMIT, FLAG_DIS);
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	2010      	movs	r0, #16
 8000b5e:	f004 fd43 	bl	80055e8 <triggerTaskflag>
		}

		// SMS control MBA
		if(checkTaskflag(TASK_SEND_CTRLMBA))	{
 8000b62:	200a      	movs	r0, #10
 8000b64:	f004 fc4c 	bl	8005400 <checkTaskflag>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d028      	beq.n	8000bc0 <processApp_MQTT+0x1cc>
			if (checkSMSrequest(SMS_CMD_CTRL_ON) )	{
 8000b6e:	2000      	movs	r0, #0
 8000b70:	f002 faf0 	bl	8003154 <checkSMSrequest>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d00c      	beq.n	8000b94 <processApp_MQTT+0x1a0>
				CMD_SMS_Ctrl_MBA(mySIM.sms.CtrlON.data, mySIM.sms.CtrlON.datalength, MBA_ON);
 8000b7a:	4b63      	ldr	r3, [pc, #396]	; (8000d08 <processApp_MQTT+0x314>)
 8000b7c:	f8b3 3162 	ldrh.w	r3, [r3, #354]	; 0x162
 8000b80:	2201      	movs	r2, #1
 8000b82:	4619      	mov	r1, r3
 8000b84:	4863      	ldr	r0, [pc, #396]	; (8000d14 <processApp_MQTT+0x320>)
 8000b86:	f001 fb09 	bl	800219c <CMD_SMS_Ctrl_MBA>
				triggerSMSrequest(SMS_CMD_CTRL_ON, SMS_CMD_DISABLE);
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	2000      	movs	r0, #0
 8000b8e:	f002 fb69 	bl	8003264 <triggerSMSrequest>
 8000b92:	e011      	b.n	8000bb8 <processApp_MQTT+0x1c4>
			}
			else if (checkSMSrequest(SMS_CMD_CTRL_OFF))	{
 8000b94:	2001      	movs	r0, #1
 8000b96:	f002 fadd 	bl	8003154 <checkSMSrequest>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d00b      	beq.n	8000bb8 <processApp_MQTT+0x1c4>
				CMD_SMS_Ctrl_MBA(mySIM.sms.CtrlOFF.data, mySIM.sms.CtrlOFF.datalength, MBA_OFF);
 8000ba0:	4b59      	ldr	r3, [pc, #356]	; (8000d08 <processApp_MQTT+0x314>)
 8000ba2:	f8b3 3274 	ldrh.w	r3, [r3, #628]	; 0x274
 8000ba6:	2202      	movs	r2, #2
 8000ba8:	4619      	mov	r1, r3
 8000baa:	485b      	ldr	r0, [pc, #364]	; (8000d18 <processApp_MQTT+0x324>)
 8000bac:	f001 faf6 	bl	800219c <CMD_SMS_Ctrl_MBA>
				triggerSMSrequest(SMS_CMD_CTRL_OFF, SMS_CMD_DISABLE);
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	2001      	movs	r0, #1
 8000bb4:	f002 fb56 	bl	8003264 <triggerSMSrequest>
			}
			triggerTaskflag(TASK_SEND_CTRLMBA, FLAG_DIS);
 8000bb8:	2100      	movs	r1, #0
 8000bba:	200a      	movs	r0, #10
 8000bbc:	f004 fd14 	bl	80055e8 <triggerTaskflag>
		}

		// SMS control step motor
		if(checkTaskflag(TASK_SEND_CTRLSTEPMOR))	{
 8000bc0:	200b      	movs	r0, #11
 8000bc2:	f004 fc1d 	bl	8005400 <checkTaskflag>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d02c      	beq.n	8000c26 <processApp_MQTT+0x232>
			if (checkSMSrequest(SMS_CMD_CTRL_INC) )	{
 8000bcc:	2003      	movs	r0, #3
 8000bce:	f002 fac1 	bl	8003154 <checkSMSrequest>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d00e      	beq.n	8000bf6 <processApp_MQTT+0x202>
				CMD_SMS_Ctrl_StepM(mySIM.sms.CtrlINC.data, mySIM.sms.CtrlINC.datalength, STEPM_DIR_INC, STEPM_MODE_STEP, 2);
 8000bd8:	4b4b      	ldr	r3, [pc, #300]	; (8000d08 <processApp_MQTT+0x314>)
 8000bda:	f8b3 1498 	ldrh.w	r1, [r3, #1176]	; 0x498
 8000bde:	2302      	movs	r3, #2
 8000be0:	9300      	str	r3, [sp, #0]
 8000be2:	2302      	movs	r3, #2
 8000be4:	2201      	movs	r2, #1
 8000be6:	484d      	ldr	r0, [pc, #308]	; (8000d1c <processApp_MQTT+0x328>)
 8000be8:	f001 fafc 	bl	80021e4 <CMD_SMS_Ctrl_StepM>
				triggerSMSrequest(SMS_CMD_CTRL_INC, SMS_CMD_DISABLE);
 8000bec:	2100      	movs	r1, #0
 8000bee:	2003      	movs	r0, #3
 8000bf0:	f002 fb38 	bl	8003264 <triggerSMSrequest>
 8000bf4:	e013      	b.n	8000c1e <processApp_MQTT+0x22a>
			}
			else if (checkSMSrequest(SMS_CMD_CTRL_DEC))	{
 8000bf6:	2004      	movs	r0, #4
 8000bf8:	f002 faac 	bl	8003154 <checkSMSrequest>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d00d      	beq.n	8000c1e <processApp_MQTT+0x22a>
				CMD_SMS_Ctrl_StepM(mySIM.sms.CtrlDEC.data, mySIM.sms.CtrlDEC.datalength, STEPM_DIR_DEC, STEPM_MODE_STEP, 2);
 8000c02:	4b41      	ldr	r3, [pc, #260]	; (8000d08 <processApp_MQTT+0x314>)
 8000c04:	f8b3 15aa 	ldrh.w	r1, [r3, #1450]	; 0x5aa
 8000c08:	2302      	movs	r3, #2
 8000c0a:	9300      	str	r3, [sp, #0]
 8000c0c:	2302      	movs	r3, #2
 8000c0e:	2202      	movs	r2, #2
 8000c10:	4843      	ldr	r0, [pc, #268]	; (8000d20 <processApp_MQTT+0x32c>)
 8000c12:	f001 fae7 	bl	80021e4 <CMD_SMS_Ctrl_StepM>
				triggerSMSrequest(SMS_CMD_CTRL_DEC, SMS_CMD_DISABLE);
 8000c16:	2100      	movs	r1, #0
 8000c18:	2004      	movs	r0, #4
 8000c1a:	f002 fb23 	bl	8003264 <triggerSMSrequest>
			}
			triggerTaskflag(TASK_SEND_CTRLSTEPMOR, FLAG_DIS);
 8000c1e:	2100      	movs	r1, #0
 8000c20:	200b      	movs	r0, #11
 8000c22:	f004 fce1 	bl	80055e8 <triggerTaskflag>
		}

		// SMS calib
		if(checkTaskflag(TASK_SEND_CALIB))	{
 8000c26:	200c      	movs	r0, #12
 8000c28:	f004 fbea 	bl	8005400 <checkTaskflag>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d00e      	beq.n	8000c50 <processApp_MQTT+0x25c>
			CMD_SMS_calib(mySIM.sms.CtrlCALIB.data, mySIM.sms.CtrlCALIB.datalength);
 8000c32:	4b35      	ldr	r3, [pc, #212]	; (8000d08 <processApp_MQTT+0x314>)
 8000c34:	f8b3 3386 	ldrh.w	r3, [r3, #902]	; 0x386
 8000c38:	4619      	mov	r1, r3
 8000c3a:	483a      	ldr	r0, [pc, #232]	; (8000d24 <processApp_MQTT+0x330>)
 8000c3c:	f001 fa6a 	bl	8002114 <CMD_SMS_calib>
			triggerSMSrequest(SMS_CMD_CTRL_CALIB, SMS_CMD_DISABLE);
 8000c40:	2100      	movs	r1, #0
 8000c42:	2002      	movs	r0, #2
 8000c44:	f002 fb0e 	bl	8003264 <triggerSMSrequest>
			triggerTaskflag(TASK_SEND_CALIB, FLAG_DIS);
 8000c48:	2100      	movs	r1, #0
 8000c4a:	200c      	movs	r0, #12
 8000c4c:	f004 fccc 	bl	80055e8 <triggerTaskflag>
		}

		// SMS get status
		if(checkTaskflag(TASK_SEND_GETSTATUS))	{
 8000c50:	200d      	movs	r0, #13
 8000c52:	f004 fbd5 	bl	8005400 <checkTaskflag>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d00e      	beq.n	8000c7a <processApp_MQTT+0x286>
			CMD_SMS_getStatus(mySIM.sms.GetStatus.data, mySIM.sms.GetStatus.datalength);
 8000c5c:	4b2a      	ldr	r3, [pc, #168]	; (8000d08 <processApp_MQTT+0x314>)
 8000c5e:	f8b3 36bc 	ldrh.w	r3, [r3, #1724]	; 0x6bc
 8000c62:	4619      	mov	r1, r3
 8000c64:	4830      	ldr	r0, [pc, #192]	; (8000d28 <processApp_MQTT+0x334>)
 8000c66:	f001 fa77 	bl	8002158 <CMD_SMS_getStatus>
			triggerSMSrequest(SMS_CMD_GET_STATUS, SMS_CMD_DISABLE);
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	2005      	movs	r0, #5
 8000c6e:	f002 faf9 	bl	8003264 <triggerSMSrequest>
			triggerTaskflag(TASK_SEND_GETSTATUS, FLAG_DIS);
 8000c72:	2100      	movs	r1, #0
 8000c74:	200d      	movs	r0, #13
 8000c76:	f004 fcb7 	bl	80055e8 <triggerTaskflag>
		}

		//SMS get station latest data
		if(checkTaskflag(TASK_SEND_GETSTATION))	{
 8000c7a:	200e      	movs	r0, #14
 8000c7c:	f004 fbc0 	bl	8005400 <checkTaskflag>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d00e      	beq.n	8000ca4 <processApp_MQTT+0x2b0>
			CMD_SMS_getStationLatestData(mySIM.sms.GetStation.data, mySIM.sms.GetStation.datalength);
 8000c86:	4b20      	ldr	r3, [pc, #128]	; (8000d08 <processApp_MQTT+0x314>)
 8000c88:	f8b3 38e0 	ldrh.w	r3, [r3, #2272]	; 0x8e0
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	4827      	ldr	r0, [pc, #156]	; (8000d2c <processApp_MQTT+0x338>)
 8000c90:	f001 fad2 	bl	8002238 <CMD_SMS_getStationLatestData>
			triggerSMSrequest(SMS_CMD_GET_STATION, SMS_CMD_DISABLE);
 8000c94:	2100      	movs	r1, #0
 8000c96:	2007      	movs	r0, #7
 8000c98:	f002 fae4 	bl	8003264 <triggerSMSrequest>
			triggerTaskflag(TASK_SEND_GETSTATION, FLAG_DIS);
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	200e      	movs	r0, #14
 8000ca0:	f004 fca2 	bl	80055e8 <triggerTaskflag>
		}

		// SMS get sensor lastest data
		if(checkTaskflag(TASK_SEND_GETSENSOR))	{
 8000ca4:	200f      	movs	r0, #15
 8000ca6:	f004 fbab 	bl	8005400 <checkTaskflag>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d00e      	beq.n	8000cce <processApp_MQTT+0x2da>
			CMD_SMS_getSensorLatestData(mySIM.sms.GetSensor.data, mySIM.sms.GetSensor.datalength);
 8000cb0:	4b15      	ldr	r3, [pc, #84]	; (8000d08 <processApp_MQTT+0x314>)
 8000cb2:	f8b3 37ce 	ldrh.w	r3, [r3, #1998]	; 0x7ce
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	481d      	ldr	r0, [pc, #116]	; (8000d30 <processApp_MQTT+0x33c>)
 8000cba:	f001 fadf 	bl	800227c <CMD_SMS_getSensorLatestData>
			triggerSMSrequest(SMS_CMD_GET_SENSOR, SMS_CMD_DISABLE);
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	2006      	movs	r0, #6
 8000cc2:	f002 facf 	bl	8003264 <triggerSMSrequest>
			triggerTaskflag(TASK_SEND_GETSENSOR, FLAG_DIS);
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	200f      	movs	r0, #15
 8000cca:	f004 fc8d 	bl	80055e8 <triggerTaskflag>
		}
	}

	// Processing new coming MQTT message
	if ( mySIM.mqttReceive.newEvent == 1)
 8000cce:	4b0e      	ldr	r3, [pc, #56]	; (8000d08 <processApp_MQTT+0x314>)
 8000cd0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000cd4:	2b01      	cmp	r3, #1
 8000cd6:	d10c      	bne.n	8000cf2 <processApp_MQTT+0x2fe>
	{
		mySIM.mqttReceive.newEvent = 0;
 8000cd8:	4b0b      	ldr	r3, [pc, #44]	; (8000d08 <processApp_MQTT+0x314>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		// call process Server message function
		processingComingMsg(mySIM.mqttReceive.payload, mySIM.mqttReceive.payloadLen,
 8000ce0:	4b09      	ldr	r3, [pc, #36]	; (8000d08 <processApp_MQTT+0x314>)
 8000ce2:	f8b3 3134 	ldrh.w	r3, [r3, #308]	; 0x134
 8000ce6:	4a13      	ldr	r2, [pc, #76]	; (8000d34 <processApp_MQTT+0x340>)
 8000ce8:	7852      	ldrb	r2, [r2, #1]
 8000cea:	4619      	mov	r1, r3
 8000cec:	4812      	ldr	r0, [pc, #72]	; (8000d38 <processApp_MQTT+0x344>)
 8000cee:	f001 f8d3 	bl	8001e98 <processingComingMsg>
				myStation.stID );
	}
}
 8000cf2:	bf00      	nop
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	200005dc 	.word	0x200005dc
 8000cfc:	0800ece8 	.word	0x0800ece8
 8000d00:	0800ecfc 	.word	0x0800ecfc
 8000d04:	200005e8 	.word	0x200005e8
 8000d08:	20001298 	.word	0x20001298
 8000d0c:	200005e0 	.word	0x200005e0
 8000d10:	200005e4 	.word	0x200005e4
 8000d14:	200013fc 	.word	0x200013fc
 8000d18:	2000150e 	.word	0x2000150e
 8000d1c:	20001732 	.word	0x20001732
 8000d20:	20001844 	.word	0x20001844
 8000d24:	20001620 	.word	0x20001620
 8000d28:	20001956 	.word	0x20001956
 8000d2c:	20001b7a 	.word	0x20001b7a
 8000d30:	20001a68 	.word	0x20001a68
 8000d34:	20000474 	.word	0x20000474
 8000d38:	200012cc 	.word	0x200012cc

08000d3c <initApp_SMS>:
#include "Task.h"

static SMS_t *__MY_SMS;

void initApp_SMS(SMS_t *mySMS)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
	__MY_SMS = mySMS;
 8000d44:	4a03      	ldr	r2, [pc, #12]	; (8000d54 <initApp_SMS+0x18>)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	6013      	str	r3, [r2, #0]
}
 8000d4a:	bf00      	nop
 8000d4c:	370c      	adds	r7, #12
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bc80      	pop	{r7}
 8000d52:	4770      	bx	lr
 8000d54:	200005ec 	.word	0x200005ec

08000d58 <SMSreturn>:

uint8_t SMSreturn (SMS_CMD_t smsCMD)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b084      	sub	sp, #16
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	4603      	mov	r3, r0
 8000d60:	71fb      	strb	r3, [r7, #7]
	SMS_request_t *tmpSMScmd;
	switch (smsCMD) 	{
 8000d62:	79fb      	ldrb	r3, [r7, #7]
 8000d64:	2b07      	cmp	r3, #7
 8000d66:	d00c      	beq.n	8000d82 <SMSreturn+0x2a>
 8000d68:	2b07      	cmp	r3, #7
 8000d6a:	dc16      	bgt.n	8000d9a <SMSreturn+0x42>
 8000d6c:	2b05      	cmp	r3, #5
 8000d6e:	d002      	beq.n	8000d76 <SMSreturn+0x1e>
 8000d70:	2b06      	cmp	r3, #6
 8000d72:	d00c      	beq.n	8000d8e <SMSreturn+0x36>
		break;
	case SMS_CMD_GET_SENSOR:
		tmpSMScmd = &__MY_SMS->GetSensor;
		break;
	default:
		break;
 8000d74:	e011      	b.n	8000d9a <SMSreturn+0x42>
		tmpSMScmd = &__MY_SMS->GetStatus;
 8000d76:	4b13      	ldr	r3, [pc, #76]	; (8000dc4 <SMSreturn+0x6c>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	f203 535a 	addw	r3, r3, #1370	; 0x55a
 8000d7e:	60fb      	str	r3, [r7, #12]
		break;
 8000d80:	e00c      	b.n	8000d9c <SMSreturn+0x44>
		tmpSMScmd = &__MY_SMS->GetStation;
 8000d82:	4b10      	ldr	r3, [pc, #64]	; (8000dc4 <SMSreturn+0x6c>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f203 737e 	addw	r3, r3, #1918	; 0x77e
 8000d8a:	60fb      	str	r3, [r7, #12]
		break;
 8000d8c:	e006      	b.n	8000d9c <SMSreturn+0x44>
		tmpSMScmd = &__MY_SMS->GetSensor;
 8000d8e:	4b0d      	ldr	r3, [pc, #52]	; (8000dc4 <SMSreturn+0x6c>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f203 636c 	addw	r3, r3, #1644	; 0x66c
 8000d96:	60fb      	str	r3, [r7, #12]
		break;
 8000d98:	e000      	b.n	8000d9c <SMSreturn+0x44>
		break;
 8000d9a:	bf00      	nop
	}
	if (tmpSMScmd == NULL) 	return 0;
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d101      	bne.n	8000da6 <SMSreturn+0x4e>
 8000da2:	2300      	movs	r3, #0
 8000da4:	e00a      	b.n	8000dbc <SMSreturn+0x64>
	SMS_sendMsg(tmpSMScmd->data, tmpSMScmd->datalength, tmpSMScmd->phonenumb);
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	1d18      	adds	r0, r3, #4
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	8859      	ldrh	r1, [r3, #2]
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8000db4:	461a      	mov	r2, r3
 8000db6:	f002 fc13 	bl	80035e0 <SMS_sendMsg>
	return 1;
 8000dba:	2301      	movs	r3, #1
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	3710      	adds	r7, #16
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	200005ec 	.word	0x200005ec

08000dc8 <processApp_SMS>:
void processApp_SMS(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
	processingSMS();
 8000dcc:	f002 f91a 	bl	8003004 <processingSMS>

	// check for new SMS request
	if (checkSMSrequest(SMS_CMD_CTRL_ON) || checkSMSrequest(SMS_CMD_CTRL_OFF) )	{
 8000dd0:	2000      	movs	r0, #0
 8000dd2:	f002 f9bf 	bl	8003154 <checkSMSrequest>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d105      	bne.n	8000de8 <processApp_SMS+0x20>
 8000ddc:	2001      	movs	r0, #1
 8000dde:	f002 f9b9 	bl	8003154 <checkSMSrequest>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d003      	beq.n	8000df0 <processApp_SMS+0x28>
		triggerTaskflag(TASK_SEND_CTRLMBA, FLAG_EN);
 8000de8:	2101      	movs	r1, #1
 8000dea:	200a      	movs	r0, #10
 8000dec:	f004 fbfc 	bl	80055e8 <triggerTaskflag>
	}
	if (checkSMSrequest(SMS_CMD_CTRL_INC) || checkSMSrequest(SMS_CMD_CTRL_DEC) ) {
 8000df0:	2003      	movs	r0, #3
 8000df2:	f002 f9af 	bl	8003154 <checkSMSrequest>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d105      	bne.n	8000e08 <processApp_SMS+0x40>
 8000dfc:	2004      	movs	r0, #4
 8000dfe:	f002 f9a9 	bl	8003154 <checkSMSrequest>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d003      	beq.n	8000e10 <processApp_SMS+0x48>
		triggerTaskflag(TASK_SEND_CTRLSTEPMOR, FLAG_EN);
 8000e08:	2101      	movs	r1, #1
 8000e0a:	200b      	movs	r0, #11
 8000e0c:	f004 fbec 	bl	80055e8 <triggerTaskflag>
	}
	if (checkSMSrequest(SMS_CMD_CTRL_CALIB))	{
 8000e10:	2002      	movs	r0, #2
 8000e12:	f002 f99f 	bl	8003154 <checkSMSrequest>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d003      	beq.n	8000e24 <processApp_SMS+0x5c>
		triggerTaskflag(TASK_SEND_CALIB, FLAG_EN);
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	200c      	movs	r0, #12
 8000e20:	f004 fbe2 	bl	80055e8 <triggerTaskflag>
	}
	if (checkSMSrequest(SMS_CMD_GET_STATUS))	{
 8000e24:	2005      	movs	r0, #5
 8000e26:	f002 f995 	bl	8003154 <checkSMSrequest>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d003      	beq.n	8000e38 <processApp_SMS+0x70>
		triggerTaskflag(TASK_SEND_GETSTATUS, FLAG_EN);
 8000e30:	2101      	movs	r1, #1
 8000e32:	200d      	movs	r0, #13
 8000e34:	f004 fbd8 	bl	80055e8 <triggerTaskflag>
	}
	if (checkSMSrequest(SMS_CMD_GET_STATION))	{
 8000e38:	2007      	movs	r0, #7
 8000e3a:	f002 f98b 	bl	8003154 <checkSMSrequest>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d003      	beq.n	8000e4c <processApp_SMS+0x84>
		triggerTaskflag(TASK_SEND_GETSTATION, FLAG_EN);
 8000e44:	2101      	movs	r1, #1
 8000e46:	200e      	movs	r0, #14
 8000e48:	f004 fbce 	bl	80055e8 <triggerTaskflag>
	}
	if (checkSMSrequest(SMS_CMD_GET_SENSOR))	{
 8000e4c:	2006      	movs	r0, #6
 8000e4e:	f002 f981 	bl	8003154 <checkSMSrequest>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d003      	beq.n	8000e60 <processApp_SMS+0x98>
		triggerTaskflag(TASK_SEND_GETSENSOR, FLAG_EN);
 8000e58:	2101      	movs	r1, #1
 8000e5a:	200f      	movs	r0, #15
 8000e5c:	f004 fbc4 	bl	80055e8 <triggerTaskflag>
	}
// Check for return SMS
	if (checkSMSreturn(SMS_CMD_GET_STATUS))	{
 8000e60:	2005      	movs	r0, #5
 8000e62:	f002 fa85 	bl	8003370 <checkSMSreturn>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d006      	beq.n	8000e7a <processApp_SMS+0xb2>
		SMSreturn(SMS_CMD_GET_STATUS);
 8000e6c:	2005      	movs	r0, #5
 8000e6e:	f7ff ff73 	bl	8000d58 <SMSreturn>
		triggerSMSreturn(SMS_CMD_GET_STATUS, SMS_CMD_DISABLE);
 8000e72:	2100      	movs	r1, #0
 8000e74:	2005      	movs	r0, #5
 8000e76:	f002 fb03 	bl	8003480 <triggerSMSreturn>
	}
	if (checkSMSreturn(SMS_CMD_GET_STATION))	{
 8000e7a:	2007      	movs	r0, #7
 8000e7c:	f002 fa78 	bl	8003370 <checkSMSreturn>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d006      	beq.n	8000e94 <processApp_SMS+0xcc>
		SMSreturn(SMS_CMD_GET_STATION);
 8000e86:	2007      	movs	r0, #7
 8000e88:	f7ff ff66 	bl	8000d58 <SMSreturn>
		triggerSMSreturn(SMS_CMD_GET_STATION, SMS_CMD_DISABLE);
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	2007      	movs	r0, #7
 8000e90:	f002 faf6 	bl	8003480 <triggerSMSreturn>
	}
	if (checkSMSreturn(SMS_CMD_GET_SENSOR))	{
 8000e94:	2006      	movs	r0, #6
 8000e96:	f002 fa6b 	bl	8003370 <checkSMSreturn>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d006      	beq.n	8000eae <processApp_SMS+0xe6>
		SMSreturn(SMS_CMD_GET_SENSOR);
 8000ea0:	2006      	movs	r0, #6
 8000ea2:	f7ff ff59 	bl	8000d58 <SMSreturn>
		triggerSMSreturn(SMS_CMD_GET_SENSOR, SMS_CMD_DISABLE);
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	2006      	movs	r0, #6
 8000eaa:	f002 fae9 	bl	8003480 <triggerSMSreturn>
//	}
//	if (checkSMSreturn(SMS_CMD_CTRL_CALIB))	{
//		SMSreturn(SMS_CMD_CTRL_CALIB);
//	}

}
 8000eae:	bf00      	nop
 8000eb0:	bd80      	pop	{r7, pc}

08000eb2 <initSerial_CFG>:


uint8_t volatile getflag = 0;

void initSerial_CFG()
{
 8000eb2:	b580      	push	{r7, lr}
 8000eb4:	af00      	add	r7, sp, #0
//	__SCFG_UART = huart;
//	__SCFG_DMA_UART = hdma;
	enableReceiveDMAtoIdle_CFG();
 8000eb6:	f000 f811 	bl	8000edc <enableReceiveDMAtoIdle_CFG>
}
 8000eba:	bf00      	nop
 8000ebc:	bd80      	pop	{r7, pc}
	...

08000ec0 <initGPS>:

void initGPS(_RTC *rtc)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
//	myStation = station;
	__MY_RTC = rtc;
 8000ec8:	4a03      	ldr	r2, [pc, #12]	; (8000ed8 <initGPS+0x18>)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6013      	str	r3, [r2, #0]
}
 8000ece:	bf00      	nop
 8000ed0:	370c      	adds	r7, #12
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bc80      	pop	{r7}
 8000ed6:	4770      	bx	lr
 8000ed8:	200009f4 	.word	0x200009f4

08000edc <enableReceiveDMAtoIdle_CFG>:

void enableReceiveDMAtoIdle_CFG(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
	  HAL_UARTEx_ReceiveToIdle_DMA(__SCFG_UART, Rxbuff_CFG, Rx_SIZE_CFG);
 8000ee0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ee4:	4906      	ldr	r1, [pc, #24]	; (8000f00 <enableReceiveDMAtoIdle_CFG+0x24>)
 8000ee6:	4807      	ldr	r0, [pc, #28]	; (8000f04 <enableReceiveDMAtoIdle_CFG+0x28>)
 8000ee8:	f00a f929 	bl	800b13e <HAL_UARTEx_ReceiveToIdle_DMA>
	  __HAL_DMA_DISABLE_IT(__SCFG_DMA_UART,DMA_IT_HT);
 8000eec:	4b06      	ldr	r3, [pc, #24]	; (8000f08 <enableReceiveDMAtoIdle_CFG+0x2c>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	681a      	ldr	r2, [r3, #0]
 8000ef2:	4b05      	ldr	r3, [pc, #20]	; (8000f08 <enableReceiveDMAtoIdle_CFG+0x2c>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f022 0204 	bic.w	r2, r2, #4
 8000efa:	601a      	str	r2, [r3, #0]
}
 8000efc:	bf00      	nop
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	200005f0 	.word	0x200005f0
 8000f04:	200025d4 	.word	0x200025d4
 8000f08:	200026a8 	.word	0x200026a8

08000f0c <Serial_CFG_Callback>:
void Serial_CFG_Callback(uint16_t Size)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	4603      	mov	r3, r0
 8000f14:	80fb      	strh	r3, [r7, #6]
//	 * Or else the head will be at the new position from the beginning
//	 */
//	if (head_CFG+Size < Main_SIZE_CFG) head_CFG = head_CFG+Size;
//	else head_CFG = head_CFG + Size - Main_SIZE_CFG;

	if ( checkTaskflag(TASK_GET_GPS_TIME) )	{
 8000f16:	2005      	movs	r0, #5
 8000f18:	f004 fa72 	bl	8005400 <checkTaskflag>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d013      	beq.n	8000f4a <Serial_CFG_Callback+0x3e>
		memset(GPS_rxbuffer, 0, GPS_RXBUFF_MAXLEN);
 8000f22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f26:	2100      	movs	r1, #0
 8000f28:	480b      	ldr	r0, [pc, #44]	; (8000f58 <Serial_CFG_Callback+0x4c>)
 8000f2a:	f00b f9dd 	bl	800c2e8 <memset>
		memcpy(GPS_rxbuffer, Rxbuff_CFG, Size);
 8000f2e:	88fb      	ldrh	r3, [r7, #6]
 8000f30:	461a      	mov	r2, r3
 8000f32:	490a      	ldr	r1, [pc, #40]	; (8000f5c <Serial_CFG_Callback+0x50>)
 8000f34:	4808      	ldr	r0, [pc, #32]	; (8000f58 <Serial_CFG_Callback+0x4c>)
 8000f36:	f00b f9c9 	bl	800c2cc <memcpy>
		GPS_size = Size;
 8000f3a:	4a09      	ldr	r2, [pc, #36]	; (8000f60 <Serial_CFG_Callback+0x54>)
 8000f3c:	88fb      	ldrh	r3, [r7, #6]
 8000f3e:	8013      	strh	r3, [r2, #0]
//		getflag = 1;
		getGPS_time(__MY_RTC);
 8000f40:	4b08      	ldr	r3, [pc, #32]	; (8000f64 <Serial_CFG_Callback+0x58>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4618      	mov	r0, r3
 8000f46:	f000 f80f 	bl	8000f68 <getGPS_time>
	}

	enableReceiveDMAtoIdle_CFG();
 8000f4a:	f7ff ffc7 	bl	8000edc <enableReceiveDMAtoIdle_CFG>
	 */

//	if (isWordinBuff(Rxbuff_CFG, Size, (uint8_t*)"MCFG+")) {
//		isSerialConfig = 1;
//	}
}
 8000f4e:	bf00      	nop
 8000f50:	3708      	adds	r7, #8
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	200007f0 	.word	0x200007f0
 8000f5c:	200005f0 	.word	0x200005f0
 8000f60:	200009f0 	.word	0x200009f0
 8000f64:	200009f4 	.word	0x200009f4

08000f68 <getGPS_time>:
//{
//	tail_CFG = head_CFG;
//}

uint8_t getGPS_time(_RTC *myRTC)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b08a      	sub	sp, #40	; 0x28
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
//	triggerTaskflag(TASK_GET_GPS_TIME, FLAG_DIS);
//	if (__MY_GPS->getFlag) return 0;
	if ( !DS3231_GetTime(myRTC) )		return 0;
 8000f70:	6878      	ldr	r0, [r7, #4]
 8000f72:	f002 ffcb 	bl	8003f0c <DS3231_GetTime>
 8000f76:	4603      	mov	r3, r0
 8000f78:	f083 0301 	eor.w	r3, r3, #1
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <getGPS_time+0x1e>
 8000f82:	2300      	movs	r3, #0
 8000f84:	e097      	b.n	80010b6 <getGPS_time+0x14e>
	uint16_t gpslen = GPS_size;
 8000f86:	4b4e      	ldr	r3, [pc, #312]	; (80010c0 <getGPS_time+0x158>)
 8000f88:	881b      	ldrh	r3, [r3, #0]
 8000f8a:	84bb      	strh	r3, [r7, #36]	; 0x24
//	uint8_t *currPos = isWordinBuff(GPS_rxbuffer, gpslen, (uint8_t*)"$GPRMC");
	uint8_t *currPos = (uint8_t*)strstr((char*)GPS_rxbuffer, "$GPRMC" );
 8000f8c:	494d      	ldr	r1, [pc, #308]	; (80010c4 <getGPS_time+0x15c>)
 8000f8e:	484e      	ldr	r0, [pc, #312]	; (80010c8 <getGPS_time+0x160>)
 8000f90:	f00b fd38 	bl	800ca04 <strstr>
 8000f94:	6238      	str	r0, [r7, #32]
	if ( currPos == NULL )	{
 8000f96:	6a3b      	ldr	r3, [r7, #32]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d101      	bne.n	8000fa0 <getGPS_time+0x38>
		return 0;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	e08a      	b.n	80010b6 <getGPS_time+0x14e>
	}
	uint16_t remainlen = getRemainsize(currPos, GPS_rxbuffer, gpslen);
 8000fa0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	4948      	ldr	r1, [pc, #288]	; (80010c8 <getGPS_time+0x160>)
 8000fa6:	6a38      	ldr	r0, [r7, #32]
 8000fa8:	f004 f9a3 	bl	80052f2 <getRemainsize>
 8000fac:	4603      	mov	r3, r0
 8000fae:	83fb      	strh	r3, [r7, #30]
	if (remainlen < 7) {
 8000fb0:	8bfb      	ldrh	r3, [r7, #30]
 8000fb2:	2b06      	cmp	r3, #6
 8000fb4:	d801      	bhi.n	8000fba <getGPS_time+0x52>
		return 0;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	e07d      	b.n	80010b6 <getGPS_time+0x14e>
	}
	currPos+= 7;
 8000fba:	6a3b      	ldr	r3, [r7, #32]
 8000fbc:	3307      	adds	r3, #7
 8000fbe:	623b      	str	r3, [r7, #32]

	// Get time to buffer
	uint8_t timebuffer [10];
	memcpy(timebuffer, currPos, 6);
 8000fc0:	f107 0314 	add.w	r3, r7, #20
 8000fc4:	2206      	movs	r2, #6
 8000fc6:	6a39      	ldr	r1, [r7, #32]
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f00b f97f 	bl	800c2cc <memcpy>
	for( uint8_t i = 0 ; i < 6; i++)
 8000fce:	2300      	movs	r3, #0
 8000fd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000fd4:	e016      	b.n	8001004 <getGPS_time+0x9c>
	{
		if (timebuffer[i] > '9' || timebuffer[i] < '0'){
 8000fd6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000fda:	3328      	adds	r3, #40	; 0x28
 8000fdc:	443b      	add	r3, r7
 8000fde:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8000fe2:	2b39      	cmp	r3, #57	; 0x39
 8000fe4:	d807      	bhi.n	8000ff6 <getGPS_time+0x8e>
 8000fe6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000fea:	3328      	adds	r3, #40	; 0x28
 8000fec:	443b      	add	r3, r7
 8000fee:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8000ff2:	2b2f      	cmp	r3, #47	; 0x2f
 8000ff4:	d801      	bhi.n	8000ffa <getGPS_time+0x92>
			return 0;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	e05d      	b.n	80010b6 <getGPS_time+0x14e>
	for( uint8_t i = 0 ; i < 6; i++)
 8000ffa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000ffe:	3301      	adds	r3, #1
 8001000:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001004:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001008:	2b05      	cmp	r3, #5
 800100a:	d9e4      	bls.n	8000fd6 <getGPS_time+0x6e>
//	}
	// Convert time from buffer and save to myRTC
	uint8_t tmphour[3];
	uint8_t tmpmin[3];
	uint8_t tmpsec[3];
	memset(tmphour, 0, 3);
 800100c:	f107 0310 	add.w	r3, r7, #16
 8001010:	2203      	movs	r2, #3
 8001012:	2100      	movs	r1, #0
 8001014:	4618      	mov	r0, r3
 8001016:	f00b f967 	bl	800c2e8 <memset>
	memset(tmpmin, 0, 3);
 800101a:	f107 030c 	add.w	r3, r7, #12
 800101e:	2203      	movs	r2, #3
 8001020:	2100      	movs	r1, #0
 8001022:	4618      	mov	r0, r3
 8001024:	f00b f960 	bl	800c2e8 <memset>
	memset(tmpsec, 0, 3);
 8001028:	f107 0308 	add.w	r3, r7, #8
 800102c:	2203      	movs	r2, #3
 800102e:	2100      	movs	r1, #0
 8001030:	4618      	mov	r0, r3
 8001032:	f00b f959 	bl	800c2e8 <memset>
 8001036:	8abb      	ldrh	r3, [r7, #20]
	memcpy(tmphour, timebuffer, 2);
 8001038:	823b      	strh	r3, [r7, #16]
	memcpy(tmpmin, timebuffer + 2, 2);
 800103a:	f107 0314 	add.w	r3, r7, #20
 800103e:	3302      	adds	r3, #2
 8001040:	881b      	ldrh	r3, [r3, #0]
 8001042:	b29b      	uxth	r3, r3
 8001044:	81bb      	strh	r3, [r7, #12]
	memcpy(tmpsec, timebuffer + 4, 2);
 8001046:	f107 0314 	add.w	r3, r7, #20
 800104a:	3304      	adds	r3, #4
 800104c:	881b      	ldrh	r3, [r3, #0]
 800104e:	b29b      	uxth	r3, r3
 8001050:	813b      	strh	r3, [r7, #8]
	myRTC->Hour = atoi((char*)tmphour) + (uint8_t)MY_TIME_ZONE;
 8001052:	f107 0310 	add.w	r3, r7, #16
 8001056:	4618      	mov	r0, r3
 8001058:	f00a ffda 	bl	800c010 <atoi>
 800105c:	4603      	mov	r3, r0
 800105e:	b2db      	uxtb	r3, r3
 8001060:	3307      	adds	r3, #7
 8001062:	b2da      	uxtb	r2, r3
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	711a      	strb	r2, [r3, #4]
	myRTC->Min = atoi((char*)tmpmin);
 8001068:	f107 030c 	add.w	r3, r7, #12
 800106c:	4618      	mov	r0, r3
 800106e:	f00a ffcf 	bl	800c010 <atoi>
 8001072:	4603      	mov	r3, r0
 8001074:	b2da      	uxtb	r2, r3
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	715a      	strb	r2, [r3, #5]
	myRTC->Sec = atoi((char*)tmpsec);
 800107a:	f107 0308 	add.w	r3, r7, #8
 800107e:	4618      	mov	r0, r3
 8001080:	f00a ffc6 	bl	800c010 <atoi>
 8001084:	4603      	mov	r3, r0
 8001086:	b2da      	uxtb	r2, r3
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	719a      	strb	r2, [r3, #6]
	if ( !DS3231_SetTime(myRTC) )	return 0;
 800108c:	6878      	ldr	r0, [r7, #4]
 800108e:	f002 ffb9 	bl	8004004 <DS3231_SetTime>
 8001092:	4603      	mov	r3, r0
 8001094:	f083 0301 	eor.w	r3, r3, #1
 8001098:	b2db      	uxtb	r3, r3
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <getGPS_time+0x13a>
 800109e:	2300      	movs	r3, #0
 80010a0:	e009      	b.n	80010b6 <getGPS_time+0x14e>
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80010a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010a6:	4809      	ldr	r0, [pc, #36]	; (80010cc <getGPS_time+0x164>)
 80010a8:	f007 ffdf 	bl	800906a <HAL_GPIO_TogglePin>
	triggerTaskflag(TASK_GET_GPS_TIME, FLAG_DIS);
 80010ac:	2100      	movs	r1, #0
 80010ae:	2005      	movs	r0, #5
 80010b0:	f004 fa9a 	bl	80055e8 <triggerTaskflag>
	return 1;
 80010b4:	2301      	movs	r3, #1
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3728      	adds	r7, #40	; 0x28
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	200009f0 	.word	0x200009f0
 80010c4:	0800ed10 	.word	0x0800ed10
 80010c8:	200007f0 	.word	0x200007f0
 80010cc:	40010800 	.word	0x40010800

080010d0 <Serial_log_string>:
{
	__SERIAL_LOG_UART = huart;
}

void Serial_log_string(char *string)
{
 80010d0:	b590      	push	{r4, r7, lr}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(__SERIAL_LOG_UART, (uint8_t*)string, strlen(string), LOG_TIMEOUT);
 80010d8:	4b08      	ldr	r3, [pc, #32]	; (80010fc <Serial_log_string+0x2c>)
 80010da:	681c      	ldr	r4, [r3, #0]
 80010dc:	6878      	ldr	r0, [r7, #4]
 80010de:	f7ff f83f 	bl	8000160 <strlen>
 80010e2:	4603      	mov	r3, r0
 80010e4:	b29a      	uxth	r2, r3
 80010e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ea:	6879      	ldr	r1, [r7, #4]
 80010ec:	4620      	mov	r0, r4
 80010ee:	f009 ffa3 	bl	800b038 <HAL_UART_Transmit>
}
 80010f2:	bf00      	nop
 80010f4:	370c      	adds	r7, #12
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd90      	pop	{r4, r7, pc}
 80010fa:	bf00      	nop
 80010fc:	200009f8 	.word	0x200009f8

08001100 <initServerMsg>:

uint8_t Pack_buff [PACKBUFF_MAXLEN];


void initServerMsg ()
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
//	myStation = Station;
//	mySIM.sms = mySMS;
//	mySIM = mySIM;
}
 8001104:	bf00      	nop
 8001106:	46bd      	mov	sp, r7
 8001108:	bc80      	pop	{r7}
 800110a:	4770      	bx	lr

0800110c <buffer2num>:

uint32_t buffer2num(uint8_t *buffer)
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
	return (buffer[0] << 24) | (buffer[1] << 16) | (buffer[2] << 8) | buffer[3];
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	061a      	lsls	r2, r3, #24
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	3301      	adds	r3, #1
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	041b      	lsls	r3, r3, #16
 8001122:	431a      	orrs	r2, r3
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	3302      	adds	r3, #2
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	021b      	lsls	r3, r3, #8
 800112c:	4313      	orrs	r3, r2
 800112e:	687a      	ldr	r2, [r7, #4]
 8001130:	3203      	adds	r2, #3
 8001132:	7812      	ldrb	r2, [r2, #0]
 8001134:	4313      	orrs	r3, r2
}
 8001136:	4618      	mov	r0, r3
 8001138:	370c      	adds	r7, #12
 800113a:	46bd      	mov	sp, r7
 800113c:	bc80      	pop	{r7}
 800113e:	4770      	bx	lr

08001140 <addCRCtoPack>:

uint8_t addCRCtoPack(uint8_t *dataBuff, uint8_t bufflen)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b084      	sub	sp, #16
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
 8001148:	460b      	mov	r3, r1
 800114a:	70fb      	strb	r3, [r7, #3]
	uint32_t crc;
//	MQTT_publish( (uint8_t*)TOPIC_PUB, dataBuff, bufflen);
	crc= crc32( (char*)dataBuff, bufflen);
 800114c:	78fb      	ldrb	r3, [r7, #3]
 800114e:	4619      	mov	r1, r3
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	f004 fc6b 	bl	8005a2c <crc32>
 8001156:	60f8      	str	r0, [r7, #12]

	uint8_t crc_buff[4];
	FourbytenumbertoBuff( crc, crc_buff);
 8001158:	f107 0308 	add.w	r3, r7, #8
 800115c:	4619      	mov	r1, r3
 800115e:	68f8      	ldr	r0, [r7, #12]
 8001160:	f004 f907 	bl	8005372 <FourbytenumbertoBuff>

//	MQTT_publish( (uint8_t*)TOPIC_PUB, crc_buff, 4);

	memcpy(dataBuff+bufflen,crc_buff,4);
 8001164:	78fb      	ldrb	r3, [r7, #3]
 8001166:	687a      	ldr	r2, [r7, #4]
 8001168:	4413      	add	r3, r2
 800116a:	68ba      	ldr	r2, [r7, #8]
 800116c:	601a      	str	r2, [r3, #0]

	return 4;    // crc length
 800116e:	2304      	movs	r3, #4
}
 8001170:	4618      	mov	r0, r3
 8001172:	3710      	adds	r7, #16
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}

08001178 <addTimetobuff>:
uint8_t addTimetobuff(uint8_t *buff, uint16_t position)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b088      	sub	sp, #32
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	460b      	mov	r3, r1
 8001182:	807b      	strh	r3, [r7, #2]
//	RTCtime.Month=11;
//	RTCtime.Date = 15;
//	RTCtime.Hour = 7;
//	RTCtime.Min = 56;
//	RTCtime.Sec = 35;
	if (DS3231_GetTime(&RTCtime))
 8001184:	f107 0310 	add.w	r3, r7, #16
 8001188:	4618      	mov	r0, r3
 800118a:	f002 febf 	bl	8003f0c <DS3231_GetTime>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d014      	beq.n	80011be <addTimetobuff+0x46>
	{
		time_t epochtime = RTC2epochtime(&RTCtime);
 8001194:	f107 0310 	add.w	r3, r7, #16
 8001198:	4618      	mov	r0, r3
 800119a:	f002 fe8c 	bl	8003eb6 <RTC2epochtime>
 800119e:	e9c7 0106 	strd	r0, r1, [r7, #24]
		uint8_t time_buff[4];
		FourbytenumbertoBuff((uint32_t)epochtime,time_buff);
 80011a2:	69bb      	ldr	r3, [r7, #24]
 80011a4:	f107 020c 	add.w	r2, r7, #12
 80011a8:	4611      	mov	r1, r2
 80011aa:	4618      	mov	r0, r3
 80011ac:	f004 f8e1 	bl	8005372 <FourbytenumbertoBuff>
		memcpy(buff+position,time_buff,4);
 80011b0:	887b      	ldrh	r3, [r7, #2]
 80011b2:	687a      	ldr	r2, [r7, #4]
 80011b4:	4413      	add	r3, r2
 80011b6:	68fa      	ldr	r2, [r7, #12]
 80011b8:	601a      	str	r2, [r3, #0]
		return 1;
 80011ba:	2301      	movs	r3, #1
 80011bc:	e000      	b.n	80011c0 <addTimetobuff+0x48>
	}
	return 0;
 80011be:	2300      	movs	r3, #0
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	3720      	adds	r7, #32
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}

080011c8 <createPack>:

uint8_t createPack(PACK_t PackType, DATA_t DataType, CMD_t CMDType )
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b084      	sub	sp, #16
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	4603      	mov	r3, r0
 80011d0:	71fb      	strb	r3, [r7, #7]
 80011d2:	460b      	mov	r3, r1
 80011d4:	71bb      	strb	r3, [r7, #6]
 80011d6:	4613      	mov	r3, r2
 80011d8:	717b      	strb	r3, [r7, #5]
	memset(Pack_buff, 0, PACKBUFF_MAXLEN);
 80011da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011de:	2100      	movs	r1, #0
 80011e0:	4816      	ldr	r0, [pc, #88]	; (800123c <createPack+0x74>)
 80011e2:	f00b f881 	bl	800c2e8 <memset>
	uint8_t pack_len = 0;
 80011e6:	2300      	movs	r3, #0
 80011e8:	73fb      	strb	r3, [r7, #15]

	Pack_buff[pack_len++] = myStation.stID;
 80011ea:	7bfb      	ldrb	r3, [r7, #15]
 80011ec:	1c5a      	adds	r2, r3, #1
 80011ee:	73fa      	strb	r2, [r7, #15]
 80011f0:	461a      	mov	r2, r3
 80011f2:	4b13      	ldr	r3, [pc, #76]	; (8001240 <createPack+0x78>)
 80011f4:	7859      	ldrb	r1, [r3, #1]
 80011f6:	4b11      	ldr	r3, [pc, #68]	; (800123c <createPack+0x74>)
 80011f8:	5499      	strb	r1, [r3, r2]
	Pack_buff[pack_len++] = PackType;
 80011fa:	7bfb      	ldrb	r3, [r7, #15]
 80011fc:	1c5a      	adds	r2, r3, #1
 80011fe:	73fa      	strb	r2, [r7, #15]
 8001200:	4619      	mov	r1, r3
 8001202:	4a0e      	ldr	r2, [pc, #56]	; (800123c <createPack+0x74>)
 8001204:	79fb      	ldrb	r3, [r7, #7]
 8001206:	5453      	strb	r3, [r2, r1]

	if ( DataType != DATA_NONE )
 8001208:	79bb      	ldrb	r3, [r7, #6]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d007      	beq.n	800121e <createPack+0x56>
	{
		Pack_buff[pack_len++] = DataType;
 800120e:	7bfb      	ldrb	r3, [r7, #15]
 8001210:	1c5a      	adds	r2, r3, #1
 8001212:	73fa      	strb	r2, [r7, #15]
 8001214:	4619      	mov	r1, r3
 8001216:	4a09      	ldr	r2, [pc, #36]	; (800123c <createPack+0x74>)
 8001218:	79bb      	ldrb	r3, [r7, #6]
 800121a:	5453      	strb	r3, [r2, r1]
 800121c:	e009      	b.n	8001232 <createPack+0x6a>
	}
	else if ( CMDType != CMD_NONE )
 800121e:	797b      	ldrb	r3, [r7, #5]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d006      	beq.n	8001232 <createPack+0x6a>
	{
		Pack_buff[pack_len++] = CMDType;
 8001224:	7bfb      	ldrb	r3, [r7, #15]
 8001226:	1c5a      	adds	r2, r3, #1
 8001228:	73fa      	strb	r2, [r7, #15]
 800122a:	4619      	mov	r1, r3
 800122c:	4a03      	ldr	r2, [pc, #12]	; (800123c <createPack+0x74>)
 800122e:	797b      	ldrb	r3, [r7, #5]
 8001230:	5453      	strb	r3, [r2, r1]
	}
	return pack_len;
 8001232:	7bfb      	ldrb	r3, [r7, #15]
}
 8001234:	4618      	mov	r0, r3
 8001236:	3710      	adds	r7, #16
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	200009fc 	.word	0x200009fc
 8001240:	20000474 	.word	0x20000474

08001244 <Serialize_SSnodedata>:

uint16_t Serialize_SSnodedata(uint8_t* Serial_buff, DATA_t dataType)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	460b      	mov	r3, r1
 800124e:	70fb      	strb	r3, [r7, #3]

	uint16_t buff_len = 0;
 8001250:	2300      	movs	r3, #0
 8001252:	81fb      	strh	r3, [r7, #14]
	Node * current =myStation.ssNode_list->head->next;
 8001254:	4b59      	ldr	r3, [pc, #356]	; (80013bc <Serialize_SSnodedata+0x178>)
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800125c:	60bb      	str	r3, [r7, #8]
	while (current != myStation.ssNode_list->tail)
 800125e:	e0a0      	b.n	80013a2 <Serialize_SSnodedata+0x15e>
	{
		switch ( dataType ) {
 8001260:	78fb      	ldrb	r3, [r7, #3]
 8001262:	3b01      	subs	r3, #1
 8001264:	2b04      	cmp	r3, #4
 8001266:	f200 8096 	bhi.w	8001396 <Serialize_SSnodedata+0x152>
 800126a:	a201      	add	r2, pc, #4	; (adr r2, 8001270 <Serialize_SSnodedata+0x2c>)
 800126c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001270:	080012bd 	.word	0x080012bd
 8001274:	08001327 	.word	0x08001327
 8001278:	08001397 	.word	0x08001397
 800127c:	08001285 	.word	0x08001285
 8001280:	0800135d 	.word	0x0800135d
		case DATA_REGISTER:
			Serial_buff[buff_len++] = current->SSnode.SSnode_ID;
 8001284:	89fb      	ldrh	r3, [r7, #14]
 8001286:	1c5a      	adds	r2, r3, #1
 8001288:	81fa      	strh	r2, [r7, #14]
 800128a:	461a      	mov	r2, r3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	4413      	add	r3, r2
 8001290:	68ba      	ldr	r2, [r7, #8]
 8001292:	7812      	ldrb	r2, [r2, #0]
 8001294:	701a      	strb	r2, [r3, #0]
			Serial_buff[buff_len++]= current->SSnode.Battery;
 8001296:	89fb      	ldrh	r3, [r7, #14]
 8001298:	1c5a      	adds	r2, r3, #1
 800129a:	81fa      	strh	r2, [r7, #14]
 800129c:	461a      	mov	r2, r3
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	4413      	add	r3, r2
 80012a2:	68ba      	ldr	r2, [r7, #8]
 80012a4:	7852      	ldrb	r2, [r2, #1]
 80012a6:	701a      	strb	r2, [r3, #0]
			Serial_buff[buff_len++]= current->SSnode.V_type;
 80012a8:	89fb      	ldrh	r3, [r7, #14]
 80012aa:	1c5a      	adds	r2, r3, #1
 80012ac:	81fa      	strh	r2, [r7, #14]
 80012ae:	461a      	mov	r2, r3
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	4413      	add	r3, r2
 80012b4:	68ba      	ldr	r2, [r7, #8]
 80012b6:	7892      	ldrb	r2, [r2, #2]
 80012b8:	701a      	strb	r2, [r3, #0]
			break;
 80012ba:	e06f      	b.n	800139c <Serialize_SSnodedata+0x158>
		case DATA_PERIOD:
			Serial_buff[buff_len++] = current->SSnode.SSnode_ID;
 80012bc:	89fb      	ldrh	r3, [r7, #14]
 80012be:	1c5a      	adds	r2, r3, #1
 80012c0:	81fa      	strh	r2, [r7, #14]
 80012c2:	461a      	mov	r2, r3
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	4413      	add	r3, r2
 80012c8:	68ba      	ldr	r2, [r7, #8]
 80012ca:	7812      	ldrb	r2, [r2, #0]
 80012cc:	701a      	strb	r2, [r3, #0]
			Serial_buff[buff_len++] = current->SSnode.Battery;
 80012ce:	89fb      	ldrh	r3, [r7, #14]
 80012d0:	1c5a      	adds	r2, r3, #1
 80012d2:	81fa      	strh	r2, [r7, #14]
 80012d4:	461a      	mov	r2, r3
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4413      	add	r3, r2
 80012da:	68ba      	ldr	r2, [r7, #8]
 80012dc:	7852      	ldrb	r2, [r2, #1]
 80012de:	701a      	strb	r2, [r3, #0]
			Serial_buff[buff_len++] = ( current->SSnode.V_value >> 8 ) & 0xFF;
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	889b      	ldrh	r3, [r3, #4]
 80012e4:	b29b      	uxth	r3, r3
 80012e6:	0a1b      	lsrs	r3, r3, #8
 80012e8:	b29a      	uxth	r2, r3
 80012ea:	89fb      	ldrh	r3, [r7, #14]
 80012ec:	1c59      	adds	r1, r3, #1
 80012ee:	81f9      	strh	r1, [r7, #14]
 80012f0:	4619      	mov	r1, r3
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	440b      	add	r3, r1
 80012f6:	b2d2      	uxtb	r2, r2
 80012f8:	701a      	strb	r2, [r3, #0]
			Serial_buff[buff_len++] = current->SSnode.V_value & 0xFF;
 80012fa:	68bb      	ldr	r3, [r7, #8]
 80012fc:	889b      	ldrh	r3, [r3, #4]
 80012fe:	b29a      	uxth	r2, r3
 8001300:	89fb      	ldrh	r3, [r7, #14]
 8001302:	1c59      	adds	r1, r3, #1
 8001304:	81f9      	strh	r1, [r7, #14]
 8001306:	4619      	mov	r1, r3
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	440b      	add	r3, r1
 800130c:	b2d2      	uxtb	r2, r2
 800130e:	701a      	strb	r2, [r3, #0]
			Serial_buff[buff_len++] = current->SSnode.sensorMode;
 8001310:	89fb      	ldrh	r3, [r7, #14]
 8001312:	1c5a      	adds	r2, r3, #1
 8001314:	81fa      	strh	r2, [r7, #14]
 8001316:	461a      	mov	r2, r3
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	4413      	add	r3, r2
 800131c:	68ba      	ldr	r2, [r7, #8]
 800131e:	7a52      	ldrb	r2, [r2, #9]
 8001320:	b2d2      	uxtb	r2, r2
 8001322:	701a      	strb	r2, [r3, #0]
			break;
 8001324:	e03a      	b.n	800139c <Serialize_SSnodedata+0x158>
		case DATA_NETWREADY:
			if (current->SSnode.sensorMode == SLEEP) 	{
 8001326:	68bb      	ldr	r3, [r7, #8]
 8001328:	7a5b      	ldrb	r3, [r3, #9]
 800132a:	b2db      	uxtb	r3, r3
 800132c:	2b00      	cmp	r3, #0
 800132e:	d102      	bne.n	8001336 <Serialize_SSnodedata+0xf2>
				current->SSnode.Sensor_state = SENSOR_DEACTIVE;
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	2202      	movs	r2, #2
 8001334:	719a      	strb	r2, [r3, #6]
			}
			Serial_buff[buff_len++] = current->SSnode.SSnode_ID;
 8001336:	89fb      	ldrh	r3, [r7, #14]
 8001338:	1c5a      	adds	r2, r3, #1
 800133a:	81fa      	strh	r2, [r7, #14]
 800133c:	461a      	mov	r2, r3
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4413      	add	r3, r2
 8001342:	68ba      	ldr	r2, [r7, #8]
 8001344:	7812      	ldrb	r2, [r2, #0]
 8001346:	701a      	strb	r2, [r3, #0]
			Serial_buff[buff_len++]= current->SSnode.Sensor_state;
 8001348:	89fb      	ldrh	r3, [r7, #14]
 800134a:	1c5a      	adds	r2, r3, #1
 800134c:	81fa      	strh	r2, [r7, #14]
 800134e:	461a      	mov	r2, r3
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	4413      	add	r3, r2
 8001354:	68ba      	ldr	r2, [r7, #8]
 8001356:	7992      	ldrb	r2, [r2, #6]
 8001358:	701a      	strb	r2, [r3, #0]
			break;
 800135a:	e01f      	b.n	800139c <Serialize_SSnodedata+0x158>
		case DATA_CALIB:
			if (current->SSnode.dataCalibAvailable)	{
 800135c:	68bb      	ldr	r3, [r7, #8]
 800135e:	79db      	ldrb	r3, [r3, #7]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d01a      	beq.n	800139a <Serialize_SSnodedata+0x156>
				Serial_buff[buff_len++] = current->SSnode.SSnode_ID;
 8001364:	89fb      	ldrh	r3, [r7, #14]
 8001366:	1c5a      	adds	r2, r3, #1
 8001368:	81fa      	strh	r2, [r7, #14]
 800136a:	461a      	mov	r2, r3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	4413      	add	r3, r2
 8001370:	68ba      	ldr	r2, [r7, #8]
 8001372:	7812      	ldrb	r2, [r2, #0]
 8001374:	701a      	strb	r2, [r3, #0]
				memcpy(Serial_buff + buff_len, current->SSnode.dataCalibBuffer, 100);
 8001376:	89fb      	ldrh	r3, [r7, #14]
 8001378:	687a      	ldr	r2, [r7, #4]
 800137a:	18d0      	adds	r0, r2, r3
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	330a      	adds	r3, #10
 8001380:	2264      	movs	r2, #100	; 0x64
 8001382:	4619      	mov	r1, r3
 8001384:	f00a ffa2 	bl	800c2cc <memcpy>
				buff_len += 100;
 8001388:	89fb      	ldrh	r3, [r7, #14]
 800138a:	3364      	adds	r3, #100	; 0x64
 800138c:	81fb      	strh	r3, [r7, #14]
				current->SSnode.dataCalibAvailable = 0;
 800138e:	68bb      	ldr	r3, [r7, #8]
 8001390:	2200      	movs	r2, #0
 8001392:	71da      	strb	r2, [r3, #7]
//				current->SSnode.sentDatacalib = 1;
			}
			break;
 8001394:	e001      	b.n	800139a <Serialize_SSnodedata+0x156>
//		case DATA_AFTERCALIB:
//			break;
		default:
			break;
 8001396:	bf00      	nop
 8001398:	e000      	b.n	800139c <Serialize_SSnodedata+0x158>
			break;
 800139a:	bf00      	nop
		}
		current = current->next;
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013a0:	60bb      	str	r3, [r7, #8]
	while (current != myStation.ssNode_list->tail)
 80013a2:	4b06      	ldr	r3, [pc, #24]	; (80013bc <Serialize_SSnodedata+0x178>)
 80013a4:	68db      	ldr	r3, [r3, #12]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	68ba      	ldr	r2, [r7, #8]
 80013aa:	429a      	cmp	r2, r3
 80013ac:	f47f af58 	bne.w	8001260 <Serialize_SSnodedata+0x1c>
	}
//	Serial_buff[buff_len] = '\0';
	return buff_len;
 80013b0:	89fb      	ldrh	r3, [r7, #14]
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3710      	adds	r7, #16
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	20000474 	.word	0x20000474

080013c0 <Serialize_Stationdata>:

uint8_t Serialize_Stationdata( uint8_t *Buffer, DATA_t dataType)
{
 80013c0:	b590      	push	{r4, r7, lr}
 80013c2:	b085      	sub	sp, #20
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
 80013c8:	460b      	mov	r3, r1
 80013ca:	70fb      	strb	r3, [r7, #3]
	uint8_t buff_len = 0;
 80013cc:	2300      	movs	r3, #0
 80013ce:	73fb      	strb	r3, [r7, #15]
	switch (dataType) {
 80013d0:	78fb      	ldrb	r3, [r7, #3]
 80013d2:	3b01      	subs	r3, #1
 80013d4:	2b08      	cmp	r3, #8
 80013d6:	f200 80f0 	bhi.w	80015ba <Serialize_Stationdata+0x1fa>
 80013da:	a201      	add	r2, pc, #4	; (adr r2, 80013e0 <Serialize_Stationdata+0x20>)
 80013dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013e0:	080014a7 	.word	0x080014a7
 80013e4:	08001483 	.word	0x08001483
 80013e8:	080015bb 	.word	0x080015bb
 80013ec:	08001405 	.word	0x08001405
 80013f0:	08001525 	.word	0x08001525
 80013f4:	080015bb 	.word	0x080015bb
 80013f8:	080015bb 	.word	0x080015bb
 80013fc:	08001591 	.word	0x08001591
 8001400:	080015a5 	.word	0x080015a5
		case DATA_REGISTER:
			Buffer[buff_len++] = myStation.stID;
 8001404:	7bfb      	ldrb	r3, [r7, #15]
 8001406:	1c5a      	adds	r2, r3, #1
 8001408:	73fa      	strb	r2, [r7, #15]
 800140a:	461a      	mov	r2, r3
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	4413      	add	r3, r2
 8001410:	4a6d      	ldr	r2, [pc, #436]	; (80015c8 <Serialize_Stationdata+0x208>)
 8001412:	7852      	ldrb	r2, [r2, #1]
 8001414:	701a      	strb	r2, [r3, #0]
			Buffer[buff_len++] = (uint8_t)( ( myStation.stCurrent >> 8 ) & 0xFF);
 8001416:	4b6c      	ldr	r3, [pc, #432]	; (80015c8 <Serialize_Stationdata+0x208>)
 8001418:	885b      	ldrh	r3, [r3, #2]
 800141a:	0a1b      	lsrs	r3, r3, #8
 800141c:	b29a      	uxth	r2, r3
 800141e:	7bfb      	ldrb	r3, [r7, #15]
 8001420:	1c59      	adds	r1, r3, #1
 8001422:	73f9      	strb	r1, [r7, #15]
 8001424:	4619      	mov	r1, r3
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	440b      	add	r3, r1
 800142a:	b2d2      	uxtb	r2, r2
 800142c:	701a      	strb	r2, [r3, #0]
			Buffer[buff_len++] = (uint8_t)( myStation.stCurrent & 0xFF );
 800142e:	4b66      	ldr	r3, [pc, #408]	; (80015c8 <Serialize_Stationdata+0x208>)
 8001430:	885a      	ldrh	r2, [r3, #2]
 8001432:	7bfb      	ldrb	r3, [r7, #15]
 8001434:	1c59      	adds	r1, r3, #1
 8001436:	73f9      	strb	r1, [r7, #15]
 8001438:	4619      	mov	r1, r3
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	440b      	add	r3, r1
 800143e:	b2d2      	uxtb	r2, r2
 8001440:	701a      	strb	r2, [r3, #0]
			Buffer[buff_len++] = (uint8_t) (myStation.MBAstate);
 8001442:	7bfb      	ldrb	r3, [r7, #15]
 8001444:	1c5a      	adds	r2, r3, #1
 8001446:	73fa      	strb	r2, [r7, #15]
 8001448:	461a      	mov	r2, r3
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4413      	add	r3, r2
 800144e:	4a5e      	ldr	r2, [pc, #376]	; (80015c8 <Serialize_Stationdata+0x208>)
 8001450:	7992      	ldrb	r2, [r2, #6]
 8001452:	701a      	strb	r2, [r3, #0]
			Buffer[buff_len++] = (uint8_t)( ( myStation.stVoltage >> 8 ) & 0xFF );
 8001454:	4b5c      	ldr	r3, [pc, #368]	; (80015c8 <Serialize_Stationdata+0x208>)
 8001456:	889b      	ldrh	r3, [r3, #4]
 8001458:	0a1b      	lsrs	r3, r3, #8
 800145a:	b29a      	uxth	r2, r3
 800145c:	7bfb      	ldrb	r3, [r7, #15]
 800145e:	1c59      	adds	r1, r3, #1
 8001460:	73f9      	strb	r1, [r7, #15]
 8001462:	4619      	mov	r1, r3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	440b      	add	r3, r1
 8001468:	b2d2      	uxtb	r2, r2
 800146a:	701a      	strb	r2, [r3, #0]
			Buffer[buff_len++] = (uint8_t)( myStation.stVoltage & 0xFF );
 800146c:	4b56      	ldr	r3, [pc, #344]	; (80015c8 <Serialize_Stationdata+0x208>)
 800146e:	889a      	ldrh	r2, [r3, #4]
 8001470:	7bfb      	ldrb	r3, [r7, #15]
 8001472:	1c59      	adds	r1, r3, #1
 8001474:	73f9      	strb	r1, [r7, #15]
 8001476:	4619      	mov	r1, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	440b      	add	r3, r1
 800147c:	b2d2      	uxtb	r2, r2
 800147e:	701a      	strb	r2, [r3, #0]
			break;
 8001480:	e09c      	b.n	80015bc <Serialize_Stationdata+0x1fc>
		case DATA_NETWREADY:
			Buffer[buff_len++] = myStation.stID;
 8001482:	7bfb      	ldrb	r3, [r7, #15]
 8001484:	1c5a      	adds	r2, r3, #1
 8001486:	73fa      	strb	r2, [r7, #15]
 8001488:	461a      	mov	r2, r3
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4413      	add	r3, r2
 800148e:	4a4e      	ldr	r2, [pc, #312]	; (80015c8 <Serialize_Stationdata+0x208>)
 8001490:	7852      	ldrb	r2, [r2, #1]
 8001492:	701a      	strb	r2, [r3, #0]
			Buffer[buff_len++] = (uint8_t) ACTIVE;
 8001494:	7bfb      	ldrb	r3, [r7, #15]
 8001496:	1c5a      	adds	r2, r3, #1
 8001498:	73fa      	strb	r2, [r7, #15]
 800149a:	461a      	mov	r2, r3
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	4413      	add	r3, r2
 80014a0:	2201      	movs	r2, #1
 80014a2:	701a      	strb	r2, [r3, #0]
			break;
 80014a4:	e08a      	b.n	80015bc <Serialize_Stationdata+0x1fc>
		case DATA_PERIOD:
			Buffer[buff_len++] = myStation.stID;
 80014a6:	7bfb      	ldrb	r3, [r7, #15]
 80014a8:	1c5a      	adds	r2, r3, #1
 80014aa:	73fa      	strb	r2, [r7, #15]
 80014ac:	461a      	mov	r2, r3
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4413      	add	r3, r2
 80014b2:	4a45      	ldr	r2, [pc, #276]	; (80015c8 <Serialize_Stationdata+0x208>)
 80014b4:	7852      	ldrb	r2, [r2, #1]
 80014b6:	701a      	strb	r2, [r3, #0]
			Buffer[buff_len++] = (uint8_t)( ( myStation.stCurrent >> 8 ) & 0xFF);
 80014b8:	4b43      	ldr	r3, [pc, #268]	; (80015c8 <Serialize_Stationdata+0x208>)
 80014ba:	885b      	ldrh	r3, [r3, #2]
 80014bc:	0a1b      	lsrs	r3, r3, #8
 80014be:	b29a      	uxth	r2, r3
 80014c0:	7bfb      	ldrb	r3, [r7, #15]
 80014c2:	1c59      	adds	r1, r3, #1
 80014c4:	73f9      	strb	r1, [r7, #15]
 80014c6:	4619      	mov	r1, r3
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	440b      	add	r3, r1
 80014cc:	b2d2      	uxtb	r2, r2
 80014ce:	701a      	strb	r2, [r3, #0]
			Buffer[buff_len++] = (uint8_t)( myStation.stCurrent & 0xFF );
 80014d0:	4b3d      	ldr	r3, [pc, #244]	; (80015c8 <Serialize_Stationdata+0x208>)
 80014d2:	885a      	ldrh	r2, [r3, #2]
 80014d4:	7bfb      	ldrb	r3, [r7, #15]
 80014d6:	1c59      	adds	r1, r3, #1
 80014d8:	73f9      	strb	r1, [r7, #15]
 80014da:	4619      	mov	r1, r3
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	440b      	add	r3, r1
 80014e0:	b2d2      	uxtb	r2, r2
 80014e2:	701a      	strb	r2, [r3, #0]
			Buffer[buff_len++] = (uint8_t)(myStation.MBAstate);
 80014e4:	7bfb      	ldrb	r3, [r7, #15]
 80014e6:	1c5a      	adds	r2, r3, #1
 80014e8:	73fa      	strb	r2, [r7, #15]
 80014ea:	461a      	mov	r2, r3
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	4413      	add	r3, r2
 80014f0:	4a35      	ldr	r2, [pc, #212]	; (80015c8 <Serialize_Stationdata+0x208>)
 80014f2:	7992      	ldrb	r2, [r2, #6]
 80014f4:	701a      	strb	r2, [r3, #0]
			Buffer[buff_len++] = (uint8_t)( ( myStation.stVoltage >> 8 ) & 0xFF );
 80014f6:	4b34      	ldr	r3, [pc, #208]	; (80015c8 <Serialize_Stationdata+0x208>)
 80014f8:	889b      	ldrh	r3, [r3, #4]
 80014fa:	0a1b      	lsrs	r3, r3, #8
 80014fc:	b29a      	uxth	r2, r3
 80014fe:	7bfb      	ldrb	r3, [r7, #15]
 8001500:	1c59      	adds	r1, r3, #1
 8001502:	73f9      	strb	r1, [r7, #15]
 8001504:	4619      	mov	r1, r3
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	440b      	add	r3, r1
 800150a:	b2d2      	uxtb	r2, r2
 800150c:	701a      	strb	r2, [r3, #0]
			Buffer[buff_len++] = (uint8_t)( myStation.stVoltage & 0xFF );
 800150e:	4b2e      	ldr	r3, [pc, #184]	; (80015c8 <Serialize_Stationdata+0x208>)
 8001510:	889a      	ldrh	r2, [r3, #4]
 8001512:	7bfb      	ldrb	r3, [r7, #15]
 8001514:	1c59      	adds	r1, r3, #1
 8001516:	73f9      	strb	r1, [r7, #15]
 8001518:	4619      	mov	r1, r3
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	440b      	add	r3, r1
 800151e:	b2d2      	uxtb	r2, r2
 8001520:	701a      	strb	r2, [r3, #0]
			break;
 8001522:	e04b      	b.n	80015bc <Serialize_Stationdata+0x1fc>
		case DATA_CALIB:
			Buffer[buff_len++] = myStation.stID;
 8001524:	7bfb      	ldrb	r3, [r7, #15]
 8001526:	1c5a      	adds	r2, r3, #1
 8001528:	73fa      	strb	r2, [r7, #15]
 800152a:	461a      	mov	r2, r3
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	4413      	add	r3, r2
 8001530:	4a25      	ldr	r2, [pc, #148]	; (80015c8 <Serialize_Stationdata+0x208>)
 8001532:	7852      	ldrb	r2, [r2, #1]
 8001534:	701a      	strb	r2, [r3, #0]
			Buffer[buff_len++] = (uint8_t)( ( myStation.stCurrent >> 8 ) & 0xFF);
 8001536:	4b24      	ldr	r3, [pc, #144]	; (80015c8 <Serialize_Stationdata+0x208>)
 8001538:	885b      	ldrh	r3, [r3, #2]
 800153a:	0a1b      	lsrs	r3, r3, #8
 800153c:	b29a      	uxth	r2, r3
 800153e:	7bfb      	ldrb	r3, [r7, #15]
 8001540:	1c59      	adds	r1, r3, #1
 8001542:	73f9      	strb	r1, [r7, #15]
 8001544:	4619      	mov	r1, r3
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	440b      	add	r3, r1
 800154a:	b2d2      	uxtb	r2, r2
 800154c:	701a      	strb	r2, [r3, #0]
			Buffer[buff_len++] = (uint8_t)( myStation.stCurrent & 0xFF );
 800154e:	4b1e      	ldr	r3, [pc, #120]	; (80015c8 <Serialize_Stationdata+0x208>)
 8001550:	885a      	ldrh	r2, [r3, #2]
 8001552:	7bfb      	ldrb	r3, [r7, #15]
 8001554:	1c59      	adds	r1, r3, #1
 8001556:	73f9      	strb	r1, [r7, #15]
 8001558:	4619      	mov	r1, r3
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	440b      	add	r3, r1
 800155e:	b2d2      	uxtb	r2, r2
 8001560:	701a      	strb	r2, [r3, #0]
			Buffer[buff_len++] = (uint8_t)( ( myStation.stVoltage >> 8 ) & 0xFF );
 8001562:	4b19      	ldr	r3, [pc, #100]	; (80015c8 <Serialize_Stationdata+0x208>)
 8001564:	889b      	ldrh	r3, [r3, #4]
 8001566:	0a1b      	lsrs	r3, r3, #8
 8001568:	b29a      	uxth	r2, r3
 800156a:	7bfb      	ldrb	r3, [r7, #15]
 800156c:	1c59      	adds	r1, r3, #1
 800156e:	73f9      	strb	r1, [r7, #15]
 8001570:	4619      	mov	r1, r3
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	440b      	add	r3, r1
 8001576:	b2d2      	uxtb	r2, r2
 8001578:	701a      	strb	r2, [r3, #0]
			Buffer[buff_len++] = (uint8_t)( myStation.stVoltage & 0xFF );
 800157a:	4b13      	ldr	r3, [pc, #76]	; (80015c8 <Serialize_Stationdata+0x208>)
 800157c:	889a      	ldrh	r2, [r3, #4]
 800157e:	7bfb      	ldrb	r3, [r7, #15]
 8001580:	1c59      	adds	r1, r3, #1
 8001582:	73f9      	strb	r1, [r7, #15]
 8001584:	4619      	mov	r1, r3
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	440b      	add	r3, r1
 800158a:	b2d2      	uxtb	r2, r2
 800158c:	701a      	strb	r2, [r3, #0]
			break;
 800158e:	e015      	b.n	80015bc <Serialize_Stationdata+0x1fc>
//		case DATA_AFTERCALIB:
//			Buffer[buff_len++] = (uint8_t)( ( myStation.stCurrent >> 8 ) & 0xFF);
//			Buffer[buff_len++] = (uint8_t)( myStation.stCurrent & 0xFF );
//			break;
		case DATA_MBA_STATE:
			Buffer[buff_len++] = (uint8_t) (myStation.MBAstate);
 8001590:	7bfb      	ldrb	r3, [r7, #15]
 8001592:	1c5a      	adds	r2, r3, #1
 8001594:	73fa      	strb	r2, [r7, #15]
 8001596:	461a      	mov	r2, r3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	4413      	add	r3, r2
 800159c:	4a0a      	ldr	r2, [pc, #40]	; (80015c8 <Serialize_Stationdata+0x208>)
 800159e:	7992      	ldrb	r2, [r2, #6]
 80015a0:	701a      	strb	r2, [r3, #0]
			break;
 80015a2:	e00b      	b.n	80015bc <Serialize_Stationdata+0x1fc>
		case DATA_STEP_REACH_LIMIT:
			Buffer[buff_len++] = (uint8_t)getLimit();
 80015a4:	7bfb      	ldrb	r3, [r7, #15]
 80015a6:	1c5a      	adds	r2, r3, #1
 80015a8:	73fa      	strb	r2, [r7, #15]
 80015aa:	461a      	mov	r2, r3
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	189c      	adds	r4, r3, r2
 80015b0:	f002 f874 	bl	800369c <getLimit>
 80015b4:	4603      	mov	r3, r0
 80015b6:	7023      	strb	r3, [r4, #0]
			break;
 80015b8:	e000      	b.n	80015bc <Serialize_Stationdata+0x1fc>
		default:
			break;
 80015ba:	bf00      	nop
	}

	return buff_len;
 80015bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3714      	adds	r7, #20
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd90      	pop	{r4, r7, pc}
 80015c6:	bf00      	nop
 80015c8:	20000474 	.word	0x20000474

080015cc <Serialize_Data>:
uint8_t Serialize_Data(uint8_t *databuff, DATA_t dataType)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b084      	sub	sp, #16
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
 80015d4:	460b      	mov	r3, r1
 80015d6:	70fb      	strb	r3, [r7, #3]
	uint16_t data_len = 0 ;
 80015d8:	2300      	movs	r3, #0
 80015da:	81fb      	strh	r3, [r7, #14]
	data_len = Serialize_Stationdata(databuff, dataType );
 80015dc:	78fb      	ldrb	r3, [r7, #3]
 80015de:	4619      	mov	r1, r3
 80015e0:	6878      	ldr	r0, [r7, #4]
 80015e2:	f7ff feed 	bl	80013c0 <Serialize_Stationdata>
 80015e6:	4603      	mov	r3, r0
 80015e8:	81fb      	strh	r3, [r7, #14]
	data_len += Serialize_SSnodedata(databuff + data_len, dataType);
 80015ea:	89fb      	ldrh	r3, [r7, #14]
 80015ec:	687a      	ldr	r2, [r7, #4]
 80015ee:	4413      	add	r3, r2
 80015f0:	78fa      	ldrb	r2, [r7, #3]
 80015f2:	4611      	mov	r1, r2
 80015f4:	4618      	mov	r0, r3
 80015f6:	f7ff fe25 	bl	8001244 <Serialize_SSnodedata>
 80015fa:	4603      	mov	r3, r0
 80015fc:	461a      	mov	r2, r3
 80015fe:	89fb      	ldrh	r3, [r7, #14]
 8001600:	4413      	add	r3, r2
 8001602:	81fb      	strh	r3, [r7, #14]
	if ( !addTimetobuff( databuff, data_len ) )		return 0;
 8001604:	89fb      	ldrh	r3, [r7, #14]
 8001606:	4619      	mov	r1, r3
 8001608:	6878      	ldr	r0, [r7, #4]
 800160a:	f7ff fdb5 	bl	8001178 <addTimetobuff>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d101      	bne.n	8001618 <Serialize_Data+0x4c>
 8001614:	2300      	movs	r3, #0
 8001616:	e004      	b.n	8001622 <Serialize_Data+0x56>
	data_len += 4;      // 4 bytes of time + buffer length
 8001618:	89fb      	ldrh	r3, [r7, #14]
 800161a:	3304      	adds	r3, #4
 800161c:	81fb      	strh	r3, [r7, #14]
	return data_len;
 800161e:	89fb      	ldrh	r3, [r7, #14]
 8001620:	b2db      	uxtb	r3, r3
}
 8001622:	4618      	mov	r0, r3
 8001624:	3710      	adds	r7, #16
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}

0800162a <addDatatoPack>:

uint8_t addDatatoPack(uint8_t *Pack, uint16_t Pack_len, uint8_t *Databuff, uint16_t dataLen)
{
 800162a:	b580      	push	{r7, lr}
 800162c:	b084      	sub	sp, #16
 800162e:	af00      	add	r7, sp, #0
 8001630:	60f8      	str	r0, [r7, #12]
 8001632:	607a      	str	r2, [r7, #4]
 8001634:	461a      	mov	r2, r3
 8001636:	460b      	mov	r3, r1
 8001638:	817b      	strh	r3, [r7, #10]
 800163a:	4613      	mov	r3, r2
 800163c:	813b      	strh	r3, [r7, #8]
	memcpy(Pack+ Pack_len, Databuff, dataLen);
 800163e:	897b      	ldrh	r3, [r7, #10]
 8001640:	68fa      	ldr	r2, [r7, #12]
 8001642:	4413      	add	r3, r2
 8001644:	893a      	ldrh	r2, [r7, #8]
 8001646:	6879      	ldr	r1, [r7, #4]
 8001648:	4618      	mov	r0, r3
 800164a:	f00a fe3f 	bl	800c2cc <memcpy>
	return dataLen ;
 800164e:	893b      	ldrh	r3, [r7, #8]
 8001650:	b2db      	uxtb	r3, r3
}
 8001652:	4618      	mov	r0, r3
 8001654:	3710      	adds	r7, #16
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
	...

0800165c <Serialize_addtionaldata>:

uint8_t Serialize_addtionaldata( CMD_t CMDtype, uint8_t *Getbuffer, uint8_t *databuffer, uint16_t datalen, MBA_state_t MBAstate, Stepmotor_dir_t Stepm_DIR,
							Stepmotor_change_mode_t Stepm_changeMode, uint16_t Stepm_changeValue )
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b086      	sub	sp, #24
 8001660:	af00      	add	r7, sp, #0
 8001662:	60b9      	str	r1, [r7, #8]
 8001664:	607a      	str	r2, [r7, #4]
 8001666:	461a      	mov	r2, r3
 8001668:	4603      	mov	r3, r0
 800166a:	73fb      	strb	r3, [r7, #15]
 800166c:	4613      	mov	r3, r2
 800166e:	81bb      	strh	r3, [r7, #12]
	uint8_t buff_len = 0;
 8001670:	2300      	movs	r3, #0
 8001672:	75fb      	strb	r3, [r7, #23]
	switch ( CMDtype ) {
 8001674:	7bfb      	ldrb	r3, [r7, #15]
 8001676:	3b03      	subs	r3, #3
 8001678:	2b08      	cmp	r3, #8
 800167a:	f200 8098 	bhi.w	80017ae <Serialize_addtionaldata+0x152>
 800167e:	a201      	add	r2, pc, #4	; (adr r2, 8001684 <Serialize_addtionaldata+0x28>)
 8001680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001684:	080016a9 	.word	0x080016a9
 8001688:	080016c5 	.word	0x080016c5
 800168c:	080017af 	.word	0x080017af
 8001690:	080017af 	.word	0x080017af
 8001694:	080016e1 	.word	0x080016e1
 8001698:	0800170f 	.word	0x0800170f
 800169c:	080017af 	.word	0x080017af
 80016a0:	08001777 	.word	0x08001777
 80016a4:	08001793 	.word	0x08001793
		case CMD_SMS_CALIB:
			// Time delay + Phone number
			memcpy(Getbuffer + buff_len, databuffer, datalen);
 80016a8:	7dfb      	ldrb	r3, [r7, #23]
 80016aa:	68ba      	ldr	r2, [r7, #8]
 80016ac:	4413      	add	r3, r2
 80016ae:	89ba      	ldrh	r2, [r7, #12]
 80016b0:	6879      	ldr	r1, [r7, #4]
 80016b2:	4618      	mov	r0, r3
 80016b4:	f00a fe0a 	bl	800c2cc <memcpy>
			buff_len += datalen;
 80016b8:	89bb      	ldrh	r3, [r7, #12]
 80016ba:	b2da      	uxtb	r2, r3
 80016bc:	7dfb      	ldrb	r3, [r7, #23]
 80016be:	4413      	add	r3, r2
 80016c0:	75fb      	strb	r3, [r7, #23]
			break;
 80016c2:	e075      	b.n	80017b0 <Serialize_addtionaldata+0x154>
		case CMD_SMS_GETSTATUS:
			// Phone number	(11 byte)
			memcpy(Getbuffer + buff_len, databuffer, datalen);
 80016c4:	7dfb      	ldrb	r3, [r7, #23]
 80016c6:	68ba      	ldr	r2, [r7, #8]
 80016c8:	4413      	add	r3, r2
 80016ca:	89ba      	ldrh	r2, [r7, #12]
 80016cc:	6879      	ldr	r1, [r7, #4]
 80016ce:	4618      	mov	r0, r3
 80016d0:	f00a fdfc 	bl	800c2cc <memcpy>
			buff_len += datalen;
 80016d4:	89bb      	ldrh	r3, [r7, #12]
 80016d6:	b2da      	uxtb	r2, r3
 80016d8:	7dfb      	ldrb	r3, [r7, #23]
 80016da:	4413      	add	r3, r2
 80016dc:	75fb      	strb	r3, [r7, #23]
			break;
 80016de:	e067      	b.n	80017b0 <Serialize_addtionaldata+0x154>
		case CMD_CTRL_MBA:
			// First byte: ON/OFF
			Getbuffer[buff_len++] = MBAstate;
 80016e0:	7dfb      	ldrb	r3, [r7, #23]
 80016e2:	1c5a      	adds	r2, r3, #1
 80016e4:	75fa      	strb	r2, [r7, #23]
 80016e6:	461a      	mov	r2, r3
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	4413      	add	r3, r2
 80016ec:	f897 2020 	ldrb.w	r2, [r7, #32]
 80016f0:	701a      	strb	r2, [r3, #0]
			// Station ID list + time delay + phone number
			memcpy(Getbuffer + buff_len, databuffer, datalen);
 80016f2:	7dfb      	ldrb	r3, [r7, #23]
 80016f4:	68ba      	ldr	r2, [r7, #8]
 80016f6:	4413      	add	r3, r2
 80016f8:	89ba      	ldrh	r2, [r7, #12]
 80016fa:	6879      	ldr	r1, [r7, #4]
 80016fc:	4618      	mov	r0, r3
 80016fe:	f00a fde5 	bl	800c2cc <memcpy>
			buff_len += datalen;
 8001702:	89bb      	ldrh	r3, [r7, #12]
 8001704:	b2da      	uxtb	r2, r3
 8001706:	7dfb      	ldrb	r3, [r7, #23]
 8001708:	4413      	add	r3, r2
 800170a:	75fb      	strb	r3, [r7, #23]
			break;
 800170c:	e050      	b.n	80017b0 <Serialize_addtionaldata+0x154>
		case CMD_CTRL_STEP_MOTOR:
			// First byte: Increase/Decrease (1 byte)
			Getbuffer[buff_len++] = Stepm_DIR ;
 800170e:	7dfb      	ldrb	r3, [r7, #23]
 8001710:	1c5a      	adds	r2, r3, #1
 8001712:	75fa      	strb	r2, [r7, #23]
 8001714:	461a      	mov	r2, r3
 8001716:	68bb      	ldr	r3, [r7, #8]
 8001718:	4413      	add	r3, r2
 800171a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800171e:	701a      	strb	r2, [r3, #0]
			// Second byte: Change Percentage/Step (1 byte)
			Getbuffer[buff_len++] = Stepm_changeMode;
 8001720:	7dfb      	ldrb	r3, [r7, #23]
 8001722:	1c5a      	adds	r2, r3, #1
 8001724:	75fa      	strb	r2, [r7, #23]
 8001726:	461a      	mov	r2, r3
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	4413      	add	r3, r2
 800172c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001730:	701a      	strb	r2, [r3, #0]
			// Third + fourth byte : Value
//			Getbuffer[buff_len++] = Stepm_changeValue;
			Getbuffer[buff_len++] = (uint8_t)( ( Stepm_changeValue >> 8 ) & 0xFF);
 8001732:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001734:	0a1b      	lsrs	r3, r3, #8
 8001736:	b29a      	uxth	r2, r3
 8001738:	7dfb      	ldrb	r3, [r7, #23]
 800173a:	1c59      	adds	r1, r3, #1
 800173c:	75f9      	strb	r1, [r7, #23]
 800173e:	4619      	mov	r1, r3
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	440b      	add	r3, r1
 8001744:	b2d2      	uxtb	r2, r2
 8001746:	701a      	strb	r2, [r3, #0]
			Getbuffer[buff_len++] = (uint8_t)( Stepm_changeValue & 0xFF );
 8001748:	7dfb      	ldrb	r3, [r7, #23]
 800174a:	1c5a      	adds	r2, r3, #1
 800174c:	75fa      	strb	r2, [r7, #23]
 800174e:	461a      	mov	r2, r3
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	4413      	add	r3, r2
 8001754:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8001756:	b2d2      	uxtb	r2, r2
 8001758:	701a      	strb	r2, [r3, #0]
			// Station ID list + time delay + phone number
			memcpy(Getbuffer + buff_len, databuffer, datalen);
 800175a:	7dfb      	ldrb	r3, [r7, #23]
 800175c:	68ba      	ldr	r2, [r7, #8]
 800175e:	4413      	add	r3, r2
 8001760:	89ba      	ldrh	r2, [r7, #12]
 8001762:	6879      	ldr	r1, [r7, #4]
 8001764:	4618      	mov	r0, r3
 8001766:	f00a fdb1 	bl	800c2cc <memcpy>
			buff_len += datalen;
 800176a:	89bb      	ldrh	r3, [r7, #12]
 800176c:	b2da      	uxtb	r2, r3
 800176e:	7dfb      	ldrb	r3, [r7, #23]
 8001770:	4413      	add	r3, r2
 8001772:	75fb      	strb	r3, [r7, #23]
			break;
 8001774:	e01c      	b.n	80017b0 <Serialize_addtionaldata+0x154>
		case CMD_GET_LATEST_DATA_SENSOR:
			// Sensor ID list + phone number
			memcpy(Getbuffer + buff_len, databuffer, datalen);
 8001776:	7dfb      	ldrb	r3, [r7, #23]
 8001778:	68ba      	ldr	r2, [r7, #8]
 800177a:	4413      	add	r3, r2
 800177c:	89ba      	ldrh	r2, [r7, #12]
 800177e:	6879      	ldr	r1, [r7, #4]
 8001780:	4618      	mov	r0, r3
 8001782:	f00a fda3 	bl	800c2cc <memcpy>
			buff_len += datalen;
 8001786:	89bb      	ldrh	r3, [r7, #12]
 8001788:	b2da      	uxtb	r2, r3
 800178a:	7dfb      	ldrb	r3, [r7, #23]
 800178c:	4413      	add	r3, r2
 800178e:	75fb      	strb	r3, [r7, #23]
			break;
 8001790:	e00e      	b.n	80017b0 <Serialize_addtionaldata+0x154>
		case CMD_GET_LASTEST_DATA_STATION:
			// Station ID list + phone number
			memcpy(Getbuffer + buff_len, databuffer, datalen);
 8001792:	7dfb      	ldrb	r3, [r7, #23]
 8001794:	68ba      	ldr	r2, [r7, #8]
 8001796:	4413      	add	r3, r2
 8001798:	89ba      	ldrh	r2, [r7, #12]
 800179a:	6879      	ldr	r1, [r7, #4]
 800179c:	4618      	mov	r0, r3
 800179e:	f00a fd95 	bl	800c2cc <memcpy>
			buff_len += datalen;
 80017a2:	89bb      	ldrh	r3, [r7, #12]
 80017a4:	b2da      	uxtb	r2, r3
 80017a6:	7dfb      	ldrb	r3, [r7, #23]
 80017a8:	4413      	add	r3, r2
 80017aa:	75fb      	strb	r3, [r7, #23]
			break;
 80017ac:	e000      	b.n	80017b0 <Serialize_addtionaldata+0x154>
		default:
			break;
 80017ae:	bf00      	nop
	}
	return buff_len;
 80017b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3718      	adds	r7, #24
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop

080017bc <Register2Server>:

uint8_t Register2Server()
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b0a2      	sub	sp, #136	; 0x88
 80017c0:	af00      	add	r7, sp, #0
	uint8_t tmp_databuff[128] ;
	uint16_t pack_len = 0;
 80017c2:	2300      	movs	r3, #0
 80017c4:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
	// Create package
	pack_len = createPack(PACKT_REGISTER, DATA_REGISTER, CMD_NONE );
 80017c8:	2200      	movs	r2, #0
 80017ca:	2104      	movs	r1, #4
 80017cc:	20f5      	movs	r0, #245	; 0xf5
 80017ce:	f7ff fcfb 	bl	80011c8 <createPack>
 80017d2:	4603      	mov	r3, r0
 80017d4:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
	if ( !pack_len ) {
 80017d8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d101      	bne.n	80017e4 <Register2Server+0x28>
//		free(tmp_databuff);
		return 0;
 80017e0:	2300      	movs	r3, #0
 80017e2:	e038      	b.n	8001856 <Register2Server+0x9a>
		}
	 //Convert Register data to temp buffer
	uint8_t datalen= Serialize_Data(tmp_databuff, DATA_REGISTER );
 80017e4:	1d3b      	adds	r3, r7, #4
 80017e6:	2104      	movs	r1, #4
 80017e8:	4618      	mov	r0, r3
 80017ea:	f7ff feef 	bl	80015cc <Serialize_Data>
 80017ee:	4603      	mov	r3, r0
 80017f0:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
	if ( !datalen )	{
 80017f4:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d101      	bne.n	8001800 <Register2Server+0x44>
//		free(tmp_databuff);
		return 0;
 80017fc:	2300      	movs	r3, #0
 80017fe:	e02a      	b.n	8001856 <Register2Server+0x9a>
	}
	// Add Register data  temp buffer to package
	pack_len += addDatatoPack( Pack_buff, pack_len, tmp_databuff, datalen );
 8001800:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8001804:	b29b      	uxth	r3, r3
 8001806:	1d3a      	adds	r2, r7, #4
 8001808:	f8b7 1086 	ldrh.w	r1, [r7, #134]	; 0x86
 800180c:	4814      	ldr	r0, [pc, #80]	; (8001860 <Register2Server+0xa4>)
 800180e:	f7ff ff0c 	bl	800162a <addDatatoPack>
 8001812:	4603      	mov	r3, r0
 8001814:	b29a      	uxth	r2, r3
 8001816:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800181a:	4413      	add	r3, r2
 800181c:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
	// Add CRC to package
	pack_len += addCRCtoPack( Pack_buff, pack_len );
 8001820:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001824:	b2db      	uxtb	r3, r3
 8001826:	4619      	mov	r1, r3
 8001828:	480d      	ldr	r0, [pc, #52]	; (8001860 <Register2Server+0xa4>)
 800182a:	f7ff fc89 	bl	8001140 <addCRCtoPack>
 800182e:	4603      	mov	r3, r0
 8001830:	b29a      	uxth	r2, r3
 8001832:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001836:	4413      	add	r3, r2
 8001838:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
	// Publish
	if ( MQTT_publish((uint8_t*)TOPIC_PUB, Pack_buff, pack_len) )	{
 800183c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001840:	461a      	mov	r2, r3
 8001842:	4907      	ldr	r1, [pc, #28]	; (8001860 <Register2Server+0xa4>)
 8001844:	4807      	ldr	r0, [pc, #28]	; (8001864 <Register2Server+0xa8>)
 8001846:	f003 fbcb 	bl	8004fe0 <MQTT_publish>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <Register2Server+0x98>
//		Serial_log_string(" Sent \"Register\" message to server\r\n");
//		free(tmp_databuff);
		return 1;
 8001850:	2301      	movs	r3, #1
 8001852:	e000      	b.n	8001856 <Register2Server+0x9a>
	}
//	free(tmp_databuff);
	return 0;
 8001854:	2300      	movs	r3, #0
}
 8001856:	4618      	mov	r0, r3
 8001858:	3788      	adds	r7, #136	; 0x88
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	200009fc 	.word	0x200009fc
 8001864:	0800ed18 	.word	0x0800ed18

08001868 <sendCMDtoServer>:

uint8_t sendCMDtoServer(CMD_t CMDtype, uint8_t *SMSdatabuffer, uint16_t datalen, MBA_state_t MBAstate,
		Stepmotor_dir_t Stepm_DIR, Stepmotor_change_mode_t Stepm_changeMode,
		uint16_t Stepm_changeValue)
{
 8001868:	b590      	push	{r4, r7, lr}
 800186a:	b0c9      	sub	sp, #292	; 0x124
 800186c:	af04      	add	r7, sp, #16
 800186e:	4604      	mov	r4, r0
 8001870:	f507 7088 	add.w	r0, r7, #272	; 0x110
 8001874:	f5a0 7088 	sub.w	r0, r0, #272	; 0x110
 8001878:	6001      	str	r1, [r0, #0]
 800187a:	4610      	mov	r0, r2
 800187c:	4619      	mov	r1, r3
 800187e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001882:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001886:	4622      	mov	r2, r4
 8001888:	701a      	strb	r2, [r3, #0]
 800188a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800188e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001892:	4602      	mov	r2, r0
 8001894:	801a      	strh	r2, [r3, #0]
 8001896:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800189a:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 800189e:	460a      	mov	r2, r1
 80018a0:	701a      	strb	r2, [r3, #0]
	uint8_t  pack_len = 0;
 80018a2:	2300      	movs	r3, #0
 80018a4:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
	pack_len = createPack(PACKT_CMD, DATA_NONE, CMDtype );
 80018a8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80018ac:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80018b0:	781b      	ldrb	r3, [r3, #0]
 80018b2:	461a      	mov	r2, r3
 80018b4:	2100      	movs	r1, #0
 80018b6:	20f2      	movs	r0, #242	; 0xf2
 80018b8:	f7ff fc86 	bl	80011c8 <createPack>
 80018bc:	4603      	mov	r3, r0
 80018be:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
	if ( !pack_len )	return 0; // Create package
 80018c2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d101      	bne.n	80018ce <sendCMDtoServer+0x66>
 80018ca:	2300      	movs	r3, #0
 80018cc:	e052      	b.n	8001974 <sendCMDtoServer+0x10c>

	uint8_t tmpAbuff [256];
	uint8_t Abuff_len = Serialize_addtionaldata(CMDtype, tmpAbuff, SMSdatabuffer, datalen, MBAstate, Stepm_DIR, Stepm_changeMode, Stepm_changeValue);
 80018ce:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80018d2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80018d6:	881c      	ldrh	r4, [r3, #0]
 80018d8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80018dc:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 80018e0:	f107 010c 	add.w	r1, r7, #12
 80018e4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80018e8:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80018ec:	7818      	ldrb	r0, [r3, #0]
 80018ee:	f8b7 3128 	ldrh.w	r3, [r7, #296]	; 0x128
 80018f2:	9303      	str	r3, [sp, #12]
 80018f4:	f897 3124 	ldrb.w	r3, [r7, #292]	; 0x124
 80018f8:	9302      	str	r3, [sp, #8]
 80018fa:	f897 3120 	ldrb.w	r3, [r7, #288]	; 0x120
 80018fe:	9301      	str	r3, [sp, #4]
 8001900:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001904:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	9300      	str	r3, [sp, #0]
 800190c:	4623      	mov	r3, r4
 800190e:	6812      	ldr	r2, [r2, #0]
 8001910:	f7ff fea4 	bl	800165c <Serialize_addtionaldata>
 8001914:	4603      	mov	r3, r0
 8001916:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
	pack_len += addDatatoPack(Pack_buff, pack_len, tmpAbuff, Abuff_len);    // Add additional data to package
 800191a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800191e:	b299      	uxth	r1, r3
 8001920:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 8001924:	b29b      	uxth	r3, r3
 8001926:	f107 020c 	add.w	r2, r7, #12
 800192a:	4815      	ldr	r0, [pc, #84]	; (8001980 <sendCMDtoServer+0x118>)
 800192c:	f7ff fe7d 	bl	800162a <addDatatoPack>
 8001930:	4603      	mov	r3, r0
 8001932:	461a      	mov	r2, r3
 8001934:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001938:	4413      	add	r3, r2
 800193a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f

	pack_len += addCRCtoPack( Pack_buff, pack_len );		// Add CRC to package
 800193e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001942:	4619      	mov	r1, r3
 8001944:	480e      	ldr	r0, [pc, #56]	; (8001980 <sendCMDtoServer+0x118>)
 8001946:	f7ff fbfb 	bl	8001140 <addCRCtoPack>
 800194a:	4603      	mov	r3, r0
 800194c:	461a      	mov	r2, r3
 800194e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001952:	4413      	add	r3, r2
 8001954:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f

	if ( !MQTT_publish( (uint8_t*)TOPIC_PUB, Pack_buff , pack_len ) )	return 0;
 8001958:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800195c:	b29b      	uxth	r3, r3
 800195e:	461a      	mov	r2, r3
 8001960:	4907      	ldr	r1, [pc, #28]	; (8001980 <sendCMDtoServer+0x118>)
 8001962:	4808      	ldr	r0, [pc, #32]	; (8001984 <sendCMDtoServer+0x11c>)
 8001964:	f003 fb3c 	bl	8004fe0 <MQTT_publish>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d101      	bne.n	8001972 <sendCMDtoServer+0x10a>
 800196e:	2300      	movs	r3, #0
 8001970:	e000      	b.n	8001974 <sendCMDtoServer+0x10c>
	return 1;
 8001972:	2301      	movs	r3, #1
}
 8001974:	4618      	mov	r0, r3
 8001976:	f507 778a 	add.w	r7, r7, #276	; 0x114
 800197a:	46bd      	mov	sp, r7
 800197c:	bd90      	pop	{r4, r7, pc}
 800197e:	bf00      	nop
 8001980:	200009fc 	.word	0x200009fc
 8001984:	0800ed18 	.word	0x0800ed18

08001988 <sendData2Server>:

uint8_t sendData2Server( DATA_t dataType)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 800198e:	af00      	add	r7, sp, #0
 8001990:	4602      	mov	r2, r0
 8001992:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001996:	f2a3 2309 	subw	r3, r3, #521	; 0x209
 800199a:	701a      	strb	r2, [r3, #0]
	uint8_t databuff[DATABUFF_MAXLEN];
	uint16_t data_len = 0;
 800199c:	2300      	movs	r3, #0
 800199e:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
	memset(databuff, 0, DATABUFF_MAXLEN);
 80019a2:	f107 030c 	add.w	r3, r7, #12
 80019a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019aa:	2100      	movs	r1, #0
 80019ac:	4618      	mov	r0, r3
 80019ae:	f00a fc9b 	bl	800c2e8 <memset>
	memset(Pack_buff, 0, PACKBUFF_MAXLEN);
 80019b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019b6:	2100      	movs	r1, #0
 80019b8:	4826      	ldr	r0, [pc, #152]	; (8001a54 <sendData2Server+0xcc>)
 80019ba:	f00a fc95 	bl	800c2e8 <memset>
	// Creat package
	uint16_t pack_len = createPack(PACKT_DATA, dataType, CMD_NONE );
 80019be:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80019c2:	f2a3 2309 	subw	r3, r3, #521	; 0x209
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	2200      	movs	r2, #0
 80019ca:	4619      	mov	r1, r3
 80019cc:	20f1      	movs	r0, #241	; 0xf1
 80019ce:	f7ff fbfb 	bl	80011c8 <createPack>
 80019d2:	4603      	mov	r3, r0
 80019d4:	f8a7 320c 	strh.w	r3, [r7, #524]	; 0x20c
	// Add data to package
	data_len = Serialize_Data(databuff, dataType );
 80019d8:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80019dc:	f2a3 2309 	subw	r3, r3, #521	; 0x209
 80019e0:	781a      	ldrb	r2, [r3, #0]
 80019e2:	f107 030c 	add.w	r3, r7, #12
 80019e6:	4611      	mov	r1, r2
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7ff fdef 	bl	80015cc <Serialize_Data>
 80019ee:	4603      	mov	r3, r0
 80019f0:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
	pack_len += addDatatoPack(Pack_buff, pack_len, databuff, data_len);
 80019f4:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 80019f8:	f107 020c 	add.w	r2, r7, #12
 80019fc:	f8b7 120c 	ldrh.w	r1, [r7, #524]	; 0x20c
 8001a00:	4814      	ldr	r0, [pc, #80]	; (8001a54 <sendData2Server+0xcc>)
 8001a02:	f7ff fe12 	bl	800162a <addDatatoPack>
 8001a06:	4603      	mov	r3, r0
 8001a08:	b29a      	uxth	r2, r3
 8001a0a:	f8b7 320c 	ldrh.w	r3, [r7, #524]	; 0x20c
 8001a0e:	4413      	add	r3, r2
 8001a10:	f8a7 320c 	strh.w	r3, [r7, #524]	; 0x20c
	// Add CRC to package
	pack_len += addCRCtoPack(Pack_buff, pack_len);
 8001a14:	f8b7 320c 	ldrh.w	r3, [r7, #524]	; 0x20c
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	480d      	ldr	r0, [pc, #52]	; (8001a54 <sendData2Server+0xcc>)
 8001a1e:	f7ff fb8f 	bl	8001140 <addCRCtoPack>
 8001a22:	4603      	mov	r3, r0
 8001a24:	b29a      	uxth	r2, r3
 8001a26:	f8b7 320c 	ldrh.w	r3, [r7, #524]	; 0x20c
 8001a2a:	4413      	add	r3, r2
 8001a2c:	f8a7 320c 	strh.w	r3, [r7, #524]	; 0x20c
	// Publish
	if ( !MQTT_publish( (uint8_t*)TOPIC_PUB, Pack_buff, pack_len) ) return 0;
 8001a30:	f8b7 320c 	ldrh.w	r3, [r7, #524]	; 0x20c
 8001a34:	461a      	mov	r2, r3
 8001a36:	4907      	ldr	r1, [pc, #28]	; (8001a54 <sendData2Server+0xcc>)
 8001a38:	4807      	ldr	r0, [pc, #28]	; (8001a58 <sendData2Server+0xd0>)
 8001a3a:	f003 fad1 	bl	8004fe0 <MQTT_publish>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d101      	bne.n	8001a48 <sendData2Server+0xc0>
 8001a44:	2300      	movs	r3, #0
 8001a46:	e000      	b.n	8001a4a <sendData2Server+0xc2>
	return 1;
 8001a48:	2301      	movs	r3, #1
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f507 7704 	add.w	r7, r7, #528	; 0x210
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	200009fc 	.word	0x200009fc
 8001a58:	0800ed18 	.word	0x0800ed18

08001a5c <checkCRC>:
//
//	if ( !MQTT_publish( (uint8_t*)TOPIC_PUB, Pack_buff, packlen) ) return 0;
//	return 1;
//}
uint8_t checkCRC(uint8_t *buffer, uint16_t bufferlen)
{
 8001a5c:	b590      	push	{r4, r7, lr}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
 8001a64:	460b      	mov	r3, r1
 8001a66:	807b      	strh	r3, [r7, #2]
	if ( buffer2num(buffer + bufferlen - 4) != crc32( (char*)buffer, bufferlen - 4) ) return 0;
 8001a68:	887b      	ldrh	r3, [r7, #2]
 8001a6a:	3b04      	subs	r3, #4
 8001a6c:	687a      	ldr	r2, [r7, #4]
 8001a6e:	4413      	add	r3, r2
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7ff fb4b 	bl	800110c <buffer2num>
 8001a76:	4604      	mov	r4, r0
 8001a78:	887b      	ldrh	r3, [r7, #2]
 8001a7a:	3b04      	subs	r3, #4
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	f003 ffd4 	bl	8005a2c <crc32>
 8001a84:	4603      	mov	r3, r0
 8001a86:	429c      	cmp	r4, r3
 8001a88:	d001      	beq.n	8001a8e <checkCRC+0x32>
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	e000      	b.n	8001a90 <checkCRC+0x34>
	return 1;
 8001a8e:	2301      	movs	r3, #1
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	370c      	adds	r7, #12
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd90      	pop	{r4, r7, pc}

08001a98 <checkNodeID>:

uint8_t checkNodeID(uint8_t *Msg, uint8_t nodeID)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	460b      	mov	r3, r1
 8001aa2:	70fb      	strb	r3, [r7, #3]
	if ( Msg[NODEID_POS] != nodeID && Msg[NODEID_POS] != BROADCAST_ID )		return 0;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	78fa      	ldrb	r2, [r7, #3]
 8001aaa:	429a      	cmp	r2, r3
 8001aac:	d005      	beq.n	8001aba <checkNodeID+0x22>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	2bff      	cmp	r3, #255	; 0xff
 8001ab4:	d001      	beq.n	8001aba <checkNodeID+0x22>
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	e000      	b.n	8001abc <checkNodeID+0x24>
	return 1;
 8001aba:	2301      	movs	r3, #1
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	370c      	adds	r7, #12
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bc80      	pop	{r7}
 8001ac4:	4770      	bx	lr

08001ac6 <checkPacktype>:

PACK_t checkPacktype(uint8_t *Msg)
{
 8001ac6:	b480      	push	{r7}
 8001ac8:	b083      	sub	sp, #12
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	6078      	str	r0, [r7, #4]
	return Msg[PACKT_POS];
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	3301      	adds	r3, #1
 8001ad2:	781b      	ldrb	r3, [r3, #0]
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	370c      	adds	r7, #12
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bc80      	pop	{r7}
 8001adc:	4770      	bx	lr

08001ade <checkDatatype>:

DATA_t checkDatatype(uint8_t *Msg)
{
 8001ade:	b480      	push	{r7}
 8001ae0:	b083      	sub	sp, #12
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	6078      	str	r0, [r7, #4]
	return Msg[DATAT_POS];
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	3302      	adds	r3, #2
 8001aea:	781b      	ldrb	r3, [r3, #0]
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	370c      	adds	r7, #12
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bc80      	pop	{r7}
 8001af4:	4770      	bx	lr

08001af6 <checkDataREStype>:
DATA_t checkDataREStype(uint8_t *Msg)
{
 8001af6:	b480      	push	{r7}
 8001af8:	b083      	sub	sp, #12
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	6078      	str	r0, [r7, #4]
	return Msg[DATAREST_POS];
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	3303      	adds	r3, #3
 8001b02:	781b      	ldrb	r3, [r3, #0]
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	370c      	adds	r7, #12
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bc80      	pop	{r7}
 8001b0c:	4770      	bx	lr

08001b0e <checkCMDtype>:
CMD_t checkCmdREStype( uint8_t *Msg)
{
	return Msg[CMDREST_POS];
}
CMD_t checkCMDtype (uint8_t *Msg)
{
 8001b0e:	b480      	push	{r7}
 8001b10:	b083      	sub	sp, #12
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	6078      	str	r0, [r7, #4]
	return Msg[CMD_POS];
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	3302      	adds	r3, #2
 8001b1a:	781b      	ldrb	r3, [r3, #0]
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	370c      	adds	r7, #12
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bc80      	pop	{r7}
 8001b24:	4770      	bx	lr
	...

08001b28 <getDataStatus>:


void getDataStatus(uint8_t *Msg, uint16_t Msglen)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b08a      	sub	sp, #40	; 0x28
 8001b2c:	af06      	add	r7, sp, #24
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	460b      	mov	r3, r1
 8001b32:	807b      	strh	r3, [r7, #2]
	uint8_t numbofActiveStation;
	uint8_t numbofActiveSensor;
	uint8_t numbofFailStation;
	uint8_t numbofFailSensor;
	uint8_t datapos = DATA_POS;
 8001b34:	2303      	movs	r3, #3
 8001b36:	73fb      	strb	r3, [r7, #15]
	numbofActiveStation = Msg[datapos++];
 8001b38:	7bfb      	ldrb	r3, [r7, #15]
 8001b3a:	1c5a      	adds	r2, r3, #1
 8001b3c:	73fa      	strb	r2, [r7, #15]
 8001b3e:	461a      	mov	r2, r3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	4413      	add	r3, r2
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	73bb      	strb	r3, [r7, #14]
	numbofFailStation = Msg[datapos++];
 8001b48:	7bfb      	ldrb	r3, [r7, #15]
 8001b4a:	1c5a      	adds	r2, r3, #1
 8001b4c:	73fa      	strb	r2, [r7, #15]
 8001b4e:	461a      	mov	r2, r3
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	4413      	add	r3, r2
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	737b      	strb	r3, [r7, #13]
	numbofActiveSensor = Msg[datapos++];
 8001b58:	7bfb      	ldrb	r3, [r7, #15]
 8001b5a:	1c5a      	adds	r2, r3, #1
 8001b5c:	73fa      	strb	r2, [r7, #15]
 8001b5e:	461a      	mov	r2, r3
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	4413      	add	r3, r2
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	733b      	strb	r3, [r7, #12]
	numbofFailSensor = Msg[datapos++];
 8001b68:	7bfb      	ldrb	r3, [r7, #15]
 8001b6a:	1c5a      	adds	r2, r3, #1
 8001b6c:	73fa      	strb	r2, [r7, #15]
 8001b6e:	461a      	mov	r2, r3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	4413      	add	r3, r2
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	72fb      	strb	r3, [r7, #11]
	memset(mySIM.sms.GetStatus.data, 0, SMS_DATA_MAXLEN);
 8001b78:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b7c:	2100      	movs	r1, #0
 8001b7e:	4810      	ldr	r0, [pc, #64]	; (8001bc0 <getDataStatus+0x98>)
 8001b80:	f00a fbb2 	bl	800c2e8 <memset>
	uint16_t len = sprintf((char*)mySIM.sms.GetStatus.data,"%s: %d,%s: %d,%s: %d,%s: %d.",
 8001b84:	7bb8      	ldrb	r0, [r7, #14]
 8001b86:	7b7b      	ldrb	r3, [r7, #13]
 8001b88:	7b3a      	ldrb	r2, [r7, #12]
 8001b8a:	7af9      	ldrb	r1, [r7, #11]
 8001b8c:	9105      	str	r1, [sp, #20]
 8001b8e:	490d      	ldr	r1, [pc, #52]	; (8001bc4 <getDataStatus+0x9c>)
 8001b90:	9104      	str	r1, [sp, #16]
 8001b92:	9203      	str	r2, [sp, #12]
 8001b94:	4a0c      	ldr	r2, [pc, #48]	; (8001bc8 <getDataStatus+0xa0>)
 8001b96:	9202      	str	r2, [sp, #8]
 8001b98:	9301      	str	r3, [sp, #4]
 8001b9a:	4b0c      	ldr	r3, [pc, #48]	; (8001bcc <getDataStatus+0xa4>)
 8001b9c:	9300      	str	r3, [sp, #0]
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	4a0b      	ldr	r2, [pc, #44]	; (8001bd0 <getDataStatus+0xa8>)
 8001ba2:	490c      	ldr	r1, [pc, #48]	; (8001bd4 <getDataStatus+0xac>)
 8001ba4:	4806      	ldr	r0, [pc, #24]	; (8001bc0 <getDataStatus+0x98>)
 8001ba6:	f00a ff05 	bl	800c9b4 <siprintf>
 8001baa:	4603      	mov	r3, r0
 8001bac:	813b      	strh	r3, [r7, #8]
			USER_MSG_HEADER_NUMBOF_ACT_STATION, numbofActiveStation,
			USER_MSG_HEADER_NUMBOF_FAIL_STATION, numbofFailStation,
			USER_MSG_HEADER_NUMBOF_ACT_SENSOR, numbofActiveSensor,
			USER_MSG_HEADER_NUMBOF_FAIL_SENSOR, numbofFailSensor);
	mySIM.sms.GetStatus.datalength = len;
 8001bae:	4a0a      	ldr	r2, [pc, #40]	; (8001bd8 <getDataStatus+0xb0>)
 8001bb0:	893b      	ldrh	r3, [r7, #8]
 8001bb2:	f8a2 36bc 	strh.w	r3, [r2, #1724]	; 0x6bc
}
 8001bb6:	bf00      	nop
 8001bb8:	3710      	adds	r7, #16
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	20001956 	.word	0x20001956
 8001bc4:	0800ed5c 	.word	0x0800ed5c
 8001bc8:	0800ed6c 	.word	0x0800ed6c
 8001bcc:	0800ed7c 	.word	0x0800ed7c
 8001bd0:	0800ed2c 	.word	0x0800ed2c
 8001bd4:	0800ed3c 	.word	0x0800ed3c
 8001bd8:	20001298 	.word	0x20001298

08001bdc <getDatalatest>:

ID_t getDatalatest(uint8_t *Msg, uint16_t Msg_len)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b084      	sub	sp, #16
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	460b      	mov	r3, r1
 8001be6:	807b      	strh	r3, [r7, #2]
	uint8_t datapos = DATA_POS;
 8001be8:	2303      	movs	r3, #3
 8001bea:	73fb      	strb	r3, [r7, #15]
	uint16_t crcpos = Msg_len - 4;
 8001bec:	887b      	ldrh	r3, [r7, #2]
 8001bee:	3b04      	subs	r3, #4
 8001bf0:	81bb      	strh	r3, [r7, #12]
	uint8_t len ;
	uint16_t tmpvalue;

	// get ID type ( Station or Sensor)
	ID_t IDtype = Msg[datapos++];
 8001bf2:	7bfb      	ldrb	r3, [r7, #15]
 8001bf4:	1c5a      	adds	r2, r3, #1
 8001bf6:	73fa      	strb	r2, [r7, #15]
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4413      	add	r3, r2
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	72fb      	strb	r3, [r7, #11]

	switch (IDtype){
 8001c02:	7afb      	ldrb	r3, [r7, #11]
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d002      	beq.n	8001c0e <getDatalatest+0x32>
 8001c08:	2b02      	cmp	r3, #2
 8001c0a:	d04a      	beq.n	8001ca2 <getDatalatest+0xc6>
		mySIM.sms.GetStation.datalength += len;
		datapos += 2;
		}
		break;
	default:
		break;
 8001c0c:	e0cd      	b.n	8001daa <getDatalatest+0x1ce>
		mySIM.sms.GetStation.datalength = 0;
 8001c0e:	4b69      	ldr	r3, [pc, #420]	; (8001db4 <getDatalatest+0x1d8>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	f8a3 28e0 	strh.w	r2, [r3, #2272]	; 0x8e0
		while (datapos < crcpos)
 8001c16:	e03e      	b.n	8001c96 <getDatalatest+0xba>
			len = sprintf((char*)(mySIM.sms.GetStation.data + mySIM.sms.GetStation.datalength), "I%d:", Msg[datapos]);
 8001c18:	4b66      	ldr	r3, [pc, #408]	; (8001db4 <getDatalatest+0x1d8>)
 8001c1a:	f8b3 38e0 	ldrh.w	r3, [r3, #2272]	; 0x8e0
 8001c1e:	461a      	mov	r2, r3
 8001c20:	4b65      	ldr	r3, [pc, #404]	; (8001db8 <getDatalatest+0x1dc>)
 8001c22:	18d0      	adds	r0, r2, r3
 8001c24:	7bfb      	ldrb	r3, [r7, #15]
 8001c26:	687a      	ldr	r2, [r7, #4]
 8001c28:	4413      	add	r3, r2
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	4963      	ldr	r1, [pc, #396]	; (8001dbc <getDatalatest+0x1e0>)
 8001c30:	f00a fec0 	bl	800c9b4 <siprintf>
 8001c34:	4603      	mov	r3, r0
 8001c36:	72bb      	strb	r3, [r7, #10]
			mySIM.sms.GetStation.datalength += len;
 8001c38:	4b5e      	ldr	r3, [pc, #376]	; (8001db4 <getDatalatest+0x1d8>)
 8001c3a:	f8b3 28e0 	ldrh.w	r2, [r3, #2272]	; 0x8e0
 8001c3e:	7abb      	ldrb	r3, [r7, #10]
 8001c40:	b29b      	uxth	r3, r3
 8001c42:	4413      	add	r3, r2
 8001c44:	b29a      	uxth	r2, r3
 8001c46:	4b5b      	ldr	r3, [pc, #364]	; (8001db4 <getDatalatest+0x1d8>)
 8001c48:	f8a3 28e0 	strh.w	r2, [r3, #2272]	; 0x8e0
			datapos++;
 8001c4c:	7bfb      	ldrb	r3, [r7, #15]
 8001c4e:	3301      	adds	r3, #1
 8001c50:	73fb      	strb	r3, [r7, #15]
			tmpvalue = buff2twobyte(Msg+ datapos);
 8001c52:	7bfb      	ldrb	r3, [r7, #15]
 8001c54:	687a      	ldr	r2, [r7, #4]
 8001c56:	4413      	add	r3, r2
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f003 fb73 	bl	8005344 <buff2twobyte>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	813b      	strh	r3, [r7, #8]
			len = sprintf((char*)(mySIM.sms.GetStation.data + mySIM.sms.GetStation.datalength), "%d;", tmpvalue);
 8001c62:	4b54      	ldr	r3, [pc, #336]	; (8001db4 <getDatalatest+0x1d8>)
 8001c64:	f8b3 38e0 	ldrh.w	r3, [r3, #2272]	; 0x8e0
 8001c68:	461a      	mov	r2, r3
 8001c6a:	4b53      	ldr	r3, [pc, #332]	; (8001db8 <getDatalatest+0x1dc>)
 8001c6c:	4413      	add	r3, r2
 8001c6e:	893a      	ldrh	r2, [r7, #8]
 8001c70:	4953      	ldr	r1, [pc, #332]	; (8001dc0 <getDatalatest+0x1e4>)
 8001c72:	4618      	mov	r0, r3
 8001c74:	f00a fe9e 	bl	800c9b4 <siprintf>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	72bb      	strb	r3, [r7, #10]
			mySIM.sms.GetStation.datalength += len;
 8001c7c:	4b4d      	ldr	r3, [pc, #308]	; (8001db4 <getDatalatest+0x1d8>)
 8001c7e:	f8b3 28e0 	ldrh.w	r2, [r3, #2272]	; 0x8e0
 8001c82:	7abb      	ldrb	r3, [r7, #10]
 8001c84:	b29b      	uxth	r3, r3
 8001c86:	4413      	add	r3, r2
 8001c88:	b29a      	uxth	r2, r3
 8001c8a:	4b4a      	ldr	r3, [pc, #296]	; (8001db4 <getDatalatest+0x1d8>)
 8001c8c:	f8a3 28e0 	strh.w	r2, [r3, #2272]	; 0x8e0
			datapos += 2;
 8001c90:	7bfb      	ldrb	r3, [r7, #15]
 8001c92:	3302      	adds	r3, #2
 8001c94:	73fb      	strb	r3, [r7, #15]
		while (datapos < crcpos)
 8001c96:	7bfb      	ldrb	r3, [r7, #15]
 8001c98:	b29b      	uxth	r3, r3
 8001c9a:	89ba      	ldrh	r2, [r7, #12]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d8bb      	bhi.n	8001c18 <getDatalatest+0x3c>
		break;
 8001ca0:	e083      	b.n	8001daa <getDatalatest+0x1ce>
		mySIM.sms.GetSensor.datalength = 0;
 8001ca2:	4b44      	ldr	r3, [pc, #272]	; (8001db4 <getDatalatest+0x1d8>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	f8a3 27ce 	strh.w	r2, [r3, #1998]	; 0x7ce
		while (datapos < crcpos){
 8001caa:	e078      	b.n	8001d9e <getDatalatest+0x1c2>
		len = sprintf((char*)(mySIM.sms.GetSensor.data + mySIM.sms.GetSensor.datalength), "V%d", Msg[datapos]);
 8001cac:	4b41      	ldr	r3, [pc, #260]	; (8001db4 <getDatalatest+0x1d8>)
 8001cae:	f8b3 37ce 	ldrh.w	r3, [r3, #1998]	; 0x7ce
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	4b43      	ldr	r3, [pc, #268]	; (8001dc4 <getDatalatest+0x1e8>)
 8001cb6:	18d0      	adds	r0, r2, r3
 8001cb8:	7bfb      	ldrb	r3, [r7, #15]
 8001cba:	687a      	ldr	r2, [r7, #4]
 8001cbc:	4413      	add	r3, r2
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	4941      	ldr	r1, [pc, #260]	; (8001dc8 <getDatalatest+0x1ec>)
 8001cc4:	f00a fe76 	bl	800c9b4 <siprintf>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	72bb      	strb	r3, [r7, #10]
		mySIM.sms.GetSensor.datalength += len;
 8001ccc:	4b39      	ldr	r3, [pc, #228]	; (8001db4 <getDatalatest+0x1d8>)
 8001cce:	f8b3 27ce 	ldrh.w	r2, [r3, #1998]	; 0x7ce
 8001cd2:	7abb      	ldrb	r3, [r7, #10]
 8001cd4:	b29b      	uxth	r3, r3
 8001cd6:	4413      	add	r3, r2
 8001cd8:	b29a      	uxth	r2, r3
 8001cda:	4b36      	ldr	r3, [pc, #216]	; (8001db4 <getDatalatest+0x1d8>)
 8001cdc:	f8a3 27ce 	strh.w	r2, [r3, #1998]	; 0x7ce
		datapos++;
 8001ce0:	7bfb      	ldrb	r3, [r7, #15]
 8001ce2:	3301      	adds	r3, #1
 8001ce4:	73fb      	strb	r3, [r7, #15]
		switch (Msg[datapos++])	{
 8001ce6:	7bfb      	ldrb	r3, [r7, #15]
 8001ce8:	1c5a      	adds	r2, r3, #1
 8001cea:	73fa      	strb	r2, [r7, #15]
 8001cec:	461a      	mov	r2, r3
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	4413      	add	r3, r2
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	d002      	beq.n	8001cfe <getDatalatest+0x122>
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	d017      	beq.n	8001d2c <getDatalatest+0x150>
			break;
 8001cfc:	e02d      	b.n	8001d5a <getDatalatest+0x17e>
			len = sprintf((char*)(mySIM.sms.GetSensor.data + mySIM.sms.GetSensor.datalength), "p:");
 8001cfe:	4b2d      	ldr	r3, [pc, #180]	; (8001db4 <getDatalatest+0x1d8>)
 8001d00:	f8b3 37ce 	ldrh.w	r3, [r3, #1998]	; 0x7ce
 8001d04:	461a      	mov	r2, r3
 8001d06:	4b2f      	ldr	r3, [pc, #188]	; (8001dc4 <getDatalatest+0x1e8>)
 8001d08:	4413      	add	r3, r2
 8001d0a:	4930      	ldr	r1, [pc, #192]	; (8001dcc <getDatalatest+0x1f0>)
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f00a fe51 	bl	800c9b4 <siprintf>
 8001d12:	4603      	mov	r3, r0
 8001d14:	72bb      	strb	r3, [r7, #10]
			mySIM.sms.GetSensor.datalength += len;
 8001d16:	4b27      	ldr	r3, [pc, #156]	; (8001db4 <getDatalatest+0x1d8>)
 8001d18:	f8b3 27ce 	ldrh.w	r2, [r3, #1998]	; 0x7ce
 8001d1c:	7abb      	ldrb	r3, [r7, #10]
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	4413      	add	r3, r2
 8001d22:	b29a      	uxth	r2, r3
 8001d24:	4b23      	ldr	r3, [pc, #140]	; (8001db4 <getDatalatest+0x1d8>)
 8001d26:	f8a3 27ce 	strh.w	r2, [r3, #1998]	; 0x7ce
			break;
 8001d2a:	e016      	b.n	8001d5a <getDatalatest+0x17e>
			len = sprintf((char*)(mySIM.sms.GetSensor.data + mySIM.sms.GetSensor.datalength), "na:");
 8001d2c:	4b21      	ldr	r3, [pc, #132]	; (8001db4 <getDatalatest+0x1d8>)
 8001d2e:	f8b3 37ce 	ldrh.w	r3, [r3, #1998]	; 0x7ce
 8001d32:	461a      	mov	r2, r3
 8001d34:	4b23      	ldr	r3, [pc, #140]	; (8001dc4 <getDatalatest+0x1e8>)
 8001d36:	4413      	add	r3, r2
 8001d38:	4925      	ldr	r1, [pc, #148]	; (8001dd0 <getDatalatest+0x1f4>)
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f00a fe3a 	bl	800c9b4 <siprintf>
 8001d40:	4603      	mov	r3, r0
 8001d42:	72bb      	strb	r3, [r7, #10]
			mySIM.sms.GetSensor.datalength += len;
 8001d44:	4b1b      	ldr	r3, [pc, #108]	; (8001db4 <getDatalatest+0x1d8>)
 8001d46:	f8b3 27ce 	ldrh.w	r2, [r3, #1998]	; 0x7ce
 8001d4a:	7abb      	ldrb	r3, [r7, #10]
 8001d4c:	b29b      	uxth	r3, r3
 8001d4e:	4413      	add	r3, r2
 8001d50:	b29a      	uxth	r2, r3
 8001d52:	4b18      	ldr	r3, [pc, #96]	; (8001db4 <getDatalatest+0x1d8>)
 8001d54:	f8a3 27ce 	strh.w	r2, [r3, #1998]	; 0x7ce
			break;
 8001d58:	bf00      	nop
		tmpvalue = buff2twobyte(Msg+ datapos);
 8001d5a:	7bfb      	ldrb	r3, [r7, #15]
 8001d5c:	687a      	ldr	r2, [r7, #4]
 8001d5e:	4413      	add	r3, r2
 8001d60:	4618      	mov	r0, r3
 8001d62:	f003 faef 	bl	8005344 <buff2twobyte>
 8001d66:	4603      	mov	r3, r0
 8001d68:	813b      	strh	r3, [r7, #8]
		len = sprintf((char*)(mySIM.sms.GetSensor.data + mySIM.sms.GetSensor.datalength), "%d,", tmpvalue);
 8001d6a:	4b12      	ldr	r3, [pc, #72]	; (8001db4 <getDatalatest+0x1d8>)
 8001d6c:	f8b3 37ce 	ldrh.w	r3, [r3, #1998]	; 0x7ce
 8001d70:	461a      	mov	r2, r3
 8001d72:	4b14      	ldr	r3, [pc, #80]	; (8001dc4 <getDatalatest+0x1e8>)
 8001d74:	4413      	add	r3, r2
 8001d76:	893a      	ldrh	r2, [r7, #8]
 8001d78:	4916      	ldr	r1, [pc, #88]	; (8001dd4 <getDatalatest+0x1f8>)
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f00a fe1a 	bl	800c9b4 <siprintf>
 8001d80:	4603      	mov	r3, r0
 8001d82:	72bb      	strb	r3, [r7, #10]
		mySIM.sms.GetStation.datalength += len;
 8001d84:	4b0b      	ldr	r3, [pc, #44]	; (8001db4 <getDatalatest+0x1d8>)
 8001d86:	f8b3 28e0 	ldrh.w	r2, [r3, #2272]	; 0x8e0
 8001d8a:	7abb      	ldrb	r3, [r7, #10]
 8001d8c:	b29b      	uxth	r3, r3
 8001d8e:	4413      	add	r3, r2
 8001d90:	b29a      	uxth	r2, r3
 8001d92:	4b08      	ldr	r3, [pc, #32]	; (8001db4 <getDatalatest+0x1d8>)
 8001d94:	f8a3 28e0 	strh.w	r2, [r3, #2272]	; 0x8e0
		datapos += 2;
 8001d98:	7bfb      	ldrb	r3, [r7, #15]
 8001d9a:	3302      	adds	r3, #2
 8001d9c:	73fb      	strb	r3, [r7, #15]
		while (datapos < crcpos){
 8001d9e:	7bfb      	ldrb	r3, [r7, #15]
 8001da0:	b29b      	uxth	r3, r3
 8001da2:	89ba      	ldrh	r2, [r7, #12]
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d881      	bhi.n	8001cac <getDatalatest+0xd0>
		break;
 8001da8:	bf00      	nop
	}
	return IDtype;
 8001daa:	7afb      	ldrb	r3, [r7, #11]
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3710      	adds	r7, #16
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	20001298 	.word	0x20001298
 8001db8:	20001b7a 	.word	0x20001b7a
 8001dbc:	0800ed8c 	.word	0x0800ed8c
 8001dc0:	0800ed94 	.word	0x0800ed94
 8001dc4:	20001a68 	.word	0x20001a68
 8001dc8:	0800ed98 	.word	0x0800ed98
 8001dcc:	0800ed9c 	.word	0x0800ed9c
 8001dd0:	0800eda0 	.word	0x0800eda0
 8001dd4:	0800eda4 	.word	0x0800eda4

08001dd8 <getMBAstate>:

static MBA_state_t getMBAstate(uint8_t *Msg)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b085      	sub	sp, #20
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
	MBA_state_t res = MBA_NULL;
 8001de0:	2300      	movs	r3, #0
 8001de2:	73fb      	strb	r3, [r7, #15]
	switch (Msg[MBA_STATE_POS])		{
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	3303      	adds	r3, #3
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d004      	beq.n	8001df8 <getMBAstate+0x20>
 8001dee:	2b02      	cmp	r3, #2
 8001df0:	d105      	bne.n	8001dfe <getMBAstate+0x26>
	case MBA_OFF:
		res = MBA_OFF;
 8001df2:	2302      	movs	r3, #2
 8001df4:	73fb      	strb	r3, [r7, #15]
		break;
 8001df6:	e003      	b.n	8001e00 <getMBAstate+0x28>
	case MBA_ON:
		res = MBA_ON;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	73fb      	strb	r3, [r7, #15]
		break;
 8001dfc:	e000      	b.n	8001e00 <getMBAstate+0x28>
	default:
		break;
 8001dfe:	bf00      	nop
	}
	return res;
 8001e00:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3714      	adds	r7, #20
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bc80      	pop	{r7}
 8001e0a:	4770      	bx	lr

08001e0c <getCtrlStepinfor>:
static void  getCtrlStepinfor(uint8_t *Msg)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b084      	sub	sp, #16
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
	Stepmotor_dir_t dir = Msg[DIR_POS];
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	78db      	ldrb	r3, [r3, #3]
 8001e18:	73fb      	strb	r3, [r7, #15]
	if (dir < STEPM_DIR_INC && dir > STEPM_DIR_DEFAULT )	return;
 8001e1a:	7bfb      	ldrb	r3, [r7, #15]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d102      	bne.n	8001e26 <getCtrlStepinfor+0x1a>
 8001e20:	7bfb      	ldrb	r3, [r7, #15]
 8001e22:	2b03      	cmp	r3, #3
 8001e24:	d831      	bhi.n	8001e8a <getCtrlStepinfor+0x7e>
	Stepmotor_change_mode_t changemode = Msg[CHANGE_MODEPOS];
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	791b      	ldrb	r3, [r3, #4]
 8001e2a:	73bb      	strb	r3, [r7, #14]
	if (changemode < STEPM_MODE_PERCENTAGE && changemode > STEPM_MODE_DEFAULT) return;
 8001e2c:	7bbb      	ldrb	r3, [r7, #14]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d102      	bne.n	8001e38 <getCtrlStepinfor+0x2c>
 8001e32:	7bbb      	ldrb	r3, [r7, #14]
 8001e34:	2b03      	cmp	r3, #3
 8001e36:	d82a      	bhi.n	8001e8e <getCtrlStepinfor+0x82>
	uint8_t valuebuff[3] ;
	memset(valuebuff, 0, 3);
 8001e38:	f107 0308 	add.w	r3, r7, #8
 8001e3c:	2203      	movs	r2, #3
 8001e3e:	2100      	movs	r1, #0
 8001e40:	4618      	mov	r0, r3
 8001e42:	f00a fa51 	bl	800c2e8 <memset>
	memcpy(valuebuff, Msg + CHANGE_VALUE, 2);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	3305      	adds	r3, #5
 8001e4a:	881b      	ldrh	r3, [r3, #0]
 8001e4c:	b29b      	uxth	r3, r3
 8001e4e:	813b      	strh	r3, [r7, #8]
	uint16_t value = buff2twobyte(valuebuff);
 8001e50:	f107 0308 	add.w	r3, r7, #8
 8001e54:	4618      	mov	r0, r3
 8001e56:	f003 fa75 	bl	8005344 <buff2twobyte>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	81bb      	strh	r3, [r7, #12]

	Step_setDir(dir);
 8001e5e:	7bfb      	ldrb	r3, [r7, #15]
 8001e60:	4618      	mov	r0, r3
 8001e62:	f001 fc2f 	bl	80036c4 <Step_setDir>
	Step_setChangeMode(changemode);
 8001e66:	7bbb      	ldrb	r3, [r7, #14]
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f001 fcb9 	bl	80037e0 <Step_setChangeMode>
	if (changemode == STEPM_MODE_PERCENTAGE)	{
 8001e6e:	7bbb      	ldrb	r3, [r7, #14]
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d105      	bne.n	8001e80 <getCtrlStepinfor+0x74>
		Step_setPercentChange(value);
 8001e74:	89bb      	ldrh	r3, [r7, #12]
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f001 fca1 	bl	80037c0 <Step_setPercentChange>
 8001e7e:	e007      	b.n	8001e90 <getCtrlStepinfor+0x84>
	}
	else {
		Step_setStepChange(value);
 8001e80:	89bb      	ldrh	r3, [r7, #12]
 8001e82:	4618      	mov	r0, r3
 8001e84:	f001 fc82 	bl	800378c <Step_setStepChange>
 8001e88:	e002      	b.n	8001e90 <getCtrlStepinfor+0x84>
	if (dir < STEPM_DIR_INC && dir > STEPM_DIR_DEFAULT )	return;
 8001e8a:	bf00      	nop
 8001e8c:	e000      	b.n	8001e90 <getCtrlStepinfor+0x84>
	if (changemode < STEPM_MODE_PERCENTAGE && changemode > STEPM_MODE_DEFAULT) return;
 8001e8e:	bf00      	nop
	}

}
 8001e90:	3710      	adds	r7, #16
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
	...

08001e98 <processingComingMsg>:
//			}
//			current = current->next;
//		}
//}
void processingComingMsg(uint8_t *Msg, uint16_t Msg_len, uint8_t stID)
{
 8001e98:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001e9c:	b08a      	sub	sp, #40	; 0x28
 8001e9e:	af02      	add	r7, sp, #8
 8001ea0:	6078      	str	r0, [r7, #4]
 8001ea2:	460b      	mov	r3, r1
 8001ea4:	807b      	strh	r3, [r7, #2]
 8001ea6:	4613      	mov	r3, r2
 8001ea8:	707b      	strb	r3, [r7, #1]
	if ( !checkCRC(Msg, Msg_len) )	return;
 8001eaa:	887b      	ldrh	r3, [r7, #2]
 8001eac:	4619      	mov	r1, r3
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f7ff fdd4 	bl	8001a5c <checkCRC>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	f000 811b 	beq.w	80020f2 <processingComingMsg+0x25a>

	if ( !checkNodeID(Msg, stID) )	return;
 8001ebc:	787b      	ldrb	r3, [r7, #1]
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	f7ff fde9 	bl	8001a98 <checkNodeID>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	f000 8114 	beq.w	80020f6 <processingComingMsg+0x25e>

	PACK_t packageType = checkPacktype(Msg);
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f7ff fdf9 	bl	8001ac6 <checkPacktype>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	77fb      	strb	r3, [r7, #31]
	DATA_t dataREStype;
	ID_t idType;
	uint32_t tmptime;
	_RTC tmpRTC;

	switch (packageType) {
 8001ed8:	7ffb      	ldrb	r3, [r7, #31]
 8001eda:	3bf1      	subs	r3, #241	; 0xf1
 8001edc:	2b05      	cmp	r3, #5
 8001ede:	f200 810c 	bhi.w	80020fa <processingComingMsg+0x262>
 8001ee2:	a201      	add	r2, pc, #4	; (adr r2, 8001ee8 <processingComingMsg+0x50>)
 8001ee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ee8:	08001f01 	.word	0x08001f01
 8001eec:	08001f5b 	.word	0x08001f5b
 8001ef0:	08002075 	.word	0x08002075
 8001ef4:	080020fb 	.word	0x080020fb
 8001ef8:	080020fb 	.word	0x080020fb
 8001efc:	080020df 	.word	0x080020df
		case PACKT_DATA:
			// Check data type
			dataType = checkDatatype(Msg);
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f7ff fdec 	bl	8001ade <checkDatatype>
 8001f06:	4603      	mov	r3, r0
 8001f08:	75fb      	strb	r3, [r7, #23]
			switch (dataType) {
 8001f0a:	7dfb      	ldrb	r3, [r7, #23]
 8001f0c:	2b03      	cmp	r3, #3
 8001f0e:	d002      	beq.n	8001f16 <processingComingMsg+0x7e>
 8001f10:	2b06      	cmp	r3, #6
 8001f12:	d00a      	beq.n	8001f2a <processingComingMsg+0x92>
						triggerSMSreturn(SMS_CMD_GET_STATION, SMS_CMD_DISABLE);
					}
					break;

				default:
					break;
 8001f14:	e020      	b.n	8001f58 <processingComingMsg+0xc0>
					getDataStatus(Msg, Msg_len);
 8001f16:	887b      	ldrh	r3, [r7, #2]
 8001f18:	4619      	mov	r1, r3
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f7ff fe04 	bl	8001b28 <getDataStatus>
					triggerSMSreturn(SMS_CMD_GET_STATUS, SMS_CMD_ENABLE);
 8001f20:	2101      	movs	r1, #1
 8001f22:	2005      	movs	r0, #5
 8001f24:	f001 faac 	bl	8003480 <triggerSMSreturn>
					break;
 8001f28:	e016      	b.n	8001f58 <processingComingMsg+0xc0>
					idType = getDatalatest(Msg, Msg_len);
 8001f2a:	887b      	ldrh	r3, [r7, #2]
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f7ff fe54 	bl	8001bdc <getDatalatest>
 8001f34:	4603      	mov	r3, r0
 8001f36:	75bb      	strb	r3, [r7, #22]
					if (idType == ID_SENSOR)	{
 8001f38:	7dbb      	ldrb	r3, [r7, #22]
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d104      	bne.n	8001f48 <processingComingMsg+0xb0>
						triggerSMSreturn(SMS_CMD_GET_SENSOR, SMS_CMD_ENABLE);
 8001f3e:	2101      	movs	r1, #1
 8001f40:	2006      	movs	r0, #6
 8001f42:	f001 fa9d 	bl	8003480 <triggerSMSreturn>
					break;
 8001f46:	e006      	b.n	8001f56 <processingComingMsg+0xbe>
					else if (idType == ID_STATION)	{
 8001f48:	7dbb      	ldrb	r3, [r7, #22]
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d103      	bne.n	8001f56 <processingComingMsg+0xbe>
						triggerSMSreturn(SMS_CMD_GET_STATION, SMS_CMD_DISABLE);
 8001f4e:	2100      	movs	r1, #0
 8001f50:	2007      	movs	r0, #7
 8001f52:	f001 fa95 	bl	8003480 <triggerSMSreturn>
					break;
 8001f56:	bf00      	nop
			}
			break;
 8001f58:	e0d2      	b.n	8002100 <processingComingMsg+0x268>
		case PACKT_CMD:
			cmdType = checkCMDtype(Msg);
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f7ff fdd7 	bl	8001b0e <checkCMDtype>
 8001f60:	4603      	mov	r3, r0
 8001f62:	777b      	strb	r3, [r7, #29]
			switch (cmdType) {
 8001f64:	7f7b      	ldrb	r3, [r7, #29]
 8001f66:	3b01      	subs	r3, #1
 8001f68:	2b0b      	cmp	r3, #11
 8001f6a:	f200 8081 	bhi.w	8002070 <processingComingMsg+0x1d8>
 8001f6e:	a201      	add	r2, pc, #4	; (adr r2, 8001f74 <processingComingMsg+0xdc>)
 8001f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f74:	08001fa5 	.word	0x08001fa5
 8001f78:	08001faf 	.word	0x08001faf
 8001f7c:	08002071 	.word	0x08002071
 8001f80:	08002071 	.word	0x08002071
 8001f84:	08002071 	.word	0x08002071
 8001f88:	08002071 	.word	0x08002071
 8001f8c:	08002001 	.word	0x08002001
 8001f90:	08002019 	.word	0x08002019
 8001f94:	08002071 	.word	0x08002071
 8001f98:	08002071 	.word	0x08002071
 8001f9c:	08002071 	.word	0x08002071
 8001fa0:	08002029 	.word	0x08002029
				case CMD_PREPARE_CALIB:
					triggerTaskflag(TASK_PREPARE_CALIB, FLAG_EN);
 8001fa4:	2101      	movs	r1, #1
 8001fa6:	2002      	movs	r0, #2
 8001fa8:	f003 fb1e 	bl	80055e8 <triggerTaskflag>
					break;
 8001fac:	e061      	b.n	8002072 <processingComingMsg+0x1da>
				case CMD_START_CALIB:
					// Get time in package
					 tmptime = buff2Fourbyte( Msg+ (uint8_t)ADDDATA_POS );
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	3303      	adds	r3, #3
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f003 f9ff 	bl	80053b6 <buff2Fourbyte>
 8001fb8:	61b8      	str	r0, [r7, #24]
					epochtine2RTC(tmptime, &tmpRTC);
 8001fba:	69bb      	ldr	r3, [r7, #24]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	4698      	mov	r8, r3
 8001fc0:	4691      	mov	r9, r2
 8001fc2:	f107 030c 	add.w	r3, r7, #12
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	4640      	mov	r0, r8
 8001fca:	4649      	mov	r1, r9
 8001fcc:	f001 ff38 	bl	8003e40 <epochtine2RTC>

					// Save Calib time
					myStation.calibTime.hour = tmpRTC.Hour;
 8001fd0:	7c3a      	ldrb	r2, [r7, #16]
 8001fd2:	4b4d      	ldr	r3, [pc, #308]	; (8002108 <processingComingMsg+0x270>)
 8001fd4:	74da      	strb	r2, [r3, #19]
					myStation.calibTime.min = tmpRTC.Min;
 8001fd6:	7c7a      	ldrb	r2, [r7, #17]
 8001fd8:	4b4b      	ldr	r3, [pc, #300]	; (8002108 <processingComingMsg+0x270>)
 8001fda:	751a      	strb	r2, [r3, #20]
					myStation.calibTime.sec = tmpRTC.Sec;
 8001fdc:	7cba      	ldrb	r2, [r7, #18]
 8001fde:	4b4a      	ldr	r3, [pc, #296]	; (8002108 <processingComingMsg+0x270>)
 8001fe0:	755a      	strb	r2, [r3, #21]

					// Set alarm for Calib
					DS3231_ClearAlarm1();
 8001fe2:	f002 f8fb 	bl	80041dc <DS3231_ClearAlarm1>
					DS3231_SetAlarm1(ALARM_MODE_ALL_MATCHED, tmpRTC.Date, tmpRTC.Hour, tmpRTC.Min, tmpRTC.Sec);
 8001fe6:	7bb9      	ldrb	r1, [r7, #14]
 8001fe8:	7c3a      	ldrb	r2, [r7, #16]
 8001fea:	7c78      	ldrb	r0, [r7, #17]
 8001fec:	7cbb      	ldrb	r3, [r7, #18]
 8001fee:	9300      	str	r3, [sp, #0]
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2000      	movs	r0, #0
 8001ff4:	f002 f852 	bl	800409c <DS3231_SetAlarm1>

					// Set display mode
					displayCalibFlag = 1;
 8001ff8:	4b44      	ldr	r3, [pc, #272]	; (800210c <processingComingMsg+0x274>)
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	701a      	strb	r2, [r3, #0]
					break;
 8001ffe:	e038      	b.n	8002072 <processingComingMsg+0x1da>
				case CMD_CTRL_MBA:
					//Get MBA state from package and switch contactor
					myStation.MBAstate = switchContactor(getMBAstate(Msg));
 8002000:	6878      	ldr	r0, [r7, #4]
 8002002:	f7ff fee9 	bl	8001dd8 <getMBAstate>
 8002006:	4603      	mov	r3, r0
 8002008:	4618      	mov	r0, r3
 800200a:	f000 f953 	bl	80022b4 <switchContactor>
 800200e:	4603      	mov	r3, r0
 8002010:	461a      	mov	r2, r3
 8002012:	4b3d      	ldr	r3, [pc, #244]	; (8002108 <processingComingMsg+0x270>)
 8002014:	719a      	strb	r2, [r3, #6]
					break;
 8002016:	e02c      	b.n	8002072 <processingComingMsg+0x1da>
				case CMD_CTRL_STEP_MOTOR:
					//Get data to control step motor
					getCtrlStepinfor(Msg);
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	f7ff fef7 	bl	8001e0c <getCtrlStepinfor>
					triggerTaskflag(TASK_CTRL_STEPMOR, FLAG_EN);
 800201e:	2101      	movs	r1, #1
 8002020:	2004      	movs	r0, #4
 8002022:	f003 fae1 	bl	80055e8 <triggerTaskflag>
					break;
 8002026:	e024      	b.n	8002072 <processingComingMsg+0x1da>
				case CMD_SYN_SENSOR:
					// get synchronize time and set alarm
					tmptime = buff2Fourbyte( Msg+ (uint8_t)ADDDATA_POS );
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	3303      	adds	r3, #3
 800202c:	4618      	mov	r0, r3
 800202e:	f003 f9c2 	bl	80053b6 <buff2Fourbyte>
 8002032:	61b8      	str	r0, [r7, #24]
					epochtine2RTC(tmptime, &tmpRTC);
 8002034:	69bb      	ldr	r3, [r7, #24]
 8002036:	2200      	movs	r2, #0
 8002038:	461c      	mov	r4, r3
 800203a:	4615      	mov	r5, r2
 800203c:	f107 030c 	add.w	r3, r7, #12
 8002040:	461a      	mov	r2, r3
 8002042:	4620      	mov	r0, r4
 8002044:	4629      	mov	r1, r5
 8002046:	f001 fefb 	bl	8003e40 <epochtine2RTC>
					// set synchronize sensor flag
					sync_flag = 1;
 800204a:	4b31      	ldr	r3, [pc, #196]	; (8002110 <processingComingMsg+0x278>)
 800204c:	2201      	movs	r2, #1
 800204e:	701a      	strb	r2, [r3, #0]

					//
					triggerTaskflag(TASK_GET_GPS_TIME, FLAG_EN);
 8002050:	2101      	movs	r1, #1
 8002052:	2005      	movs	r0, #5
 8002054:	f003 fac8 	bl	80055e8 <triggerTaskflag>
					// Set alarm for synchronize
					DS3231_ClearAlarm1();
 8002058:	f002 f8c0 	bl	80041dc <DS3231_ClearAlarm1>
					DS3231_SetAlarm1(ALARM_MODE_ALL_MATCHED, tmpRTC.Date, tmpRTC.Hour, tmpRTC.Min, tmpRTC.Sec);
 800205c:	7bb9      	ldrb	r1, [r7, #14]
 800205e:	7c3a      	ldrb	r2, [r7, #16]
 8002060:	7c78      	ldrb	r0, [r7, #17]
 8002062:	7cbb      	ldrb	r3, [r7, #18]
 8002064:	9300      	str	r3, [sp, #0]
 8002066:	4603      	mov	r3, r0
 8002068:	2000      	movs	r0, #0
 800206a:	f002 f817 	bl	800409c <DS3231_SetAlarm1>
					break;
 800206e:	e000      	b.n	8002072 <processingComingMsg+0x1da>
				default:
					break;
 8002070:	bf00      	nop
			}
			break;
 8002072:	e045      	b.n	8002100 <processingComingMsg+0x268>
		case PACKT_RESDATA:
			dataREStype = checkDataREStype(Msg);
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	f7ff fd3e 	bl	8001af6 <checkDataREStype>
 800207a:	4603      	mov	r3, r0
 800207c:	77bb      	strb	r3, [r7, #30]
			switch (dataREStype) {
 800207e:	7fbb      	ldrb	r3, [r7, #30]
 8002080:	2b05      	cmp	r3, #5
 8002082:	d01a      	beq.n	80020ba <processingComingMsg+0x222>
 8002084:	2b05      	cmp	r3, #5
 8002086:	dc22      	bgt.n	80020ce <processingComingMsg+0x236>
 8002088:	2b01      	cmp	r3, #1
 800208a:	d002      	beq.n	8002092 <processingComingMsg+0x1fa>
 800208c:	2b02      	cmp	r3, #2
 800208e:	d00a      	beq.n	80020a6 <processingComingMsg+0x20e>
				if ( Msg[RESSTATUS_POS] == RES_OK)	{
					triggerTaskflag(TASK_SEND_DATACALIB, FLAG_DIS);
				}
				break;
			default:
				break;
 8002090:	e01d      	b.n	80020ce <processingComingMsg+0x236>
				if ( Msg[RESSTATUS_POS] == RES_OK)	{
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	3302      	adds	r3, #2
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	2b01      	cmp	r3, #1
 800209a:	d11a      	bne.n	80020d2 <processingComingMsg+0x23a>
					triggerTaskflag(TASK_SEND_DATAPERIOD, FLAG_DIS);
 800209c:	2100      	movs	r1, #0
 800209e:	2007      	movs	r0, #7
 80020a0:	f003 faa2 	bl	80055e8 <triggerTaskflag>
				break;
 80020a4:	e015      	b.n	80020d2 <processingComingMsg+0x23a>
				if ( Msg[RESSTATUS_POS] == RES_OK)	{
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	3302      	adds	r3, #2
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d112      	bne.n	80020d6 <processingComingMsg+0x23e>
					triggerTaskflag(TASK_SEND_NWREADY, FLAG_DIS);
 80020b0:	2100      	movs	r1, #0
 80020b2:	2006      	movs	r0, #6
 80020b4:	f003 fa98 	bl	80055e8 <triggerTaskflag>
				break;
 80020b8:	e00d      	b.n	80020d6 <processingComingMsg+0x23e>
				if ( Msg[RESSTATUS_POS] == RES_OK)	{
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	3302      	adds	r3, #2
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d10a      	bne.n	80020da <processingComingMsg+0x242>
					triggerTaskflag(TASK_SEND_DATACALIB, FLAG_DIS);
 80020c4:	2100      	movs	r1, #0
 80020c6:	2008      	movs	r0, #8
 80020c8:	f003 fa8e 	bl	80055e8 <triggerTaskflag>
				break;
 80020cc:	e005      	b.n	80020da <processingComingMsg+0x242>
				break;
 80020ce:	bf00      	nop
 80020d0:	e016      	b.n	8002100 <processingComingMsg+0x268>
				break;
 80020d2:	bf00      	nop
 80020d4:	e014      	b.n	8002100 <processingComingMsg+0x268>
				break;
 80020d6:	bf00      	nop
 80020d8:	e012      	b.n	8002100 <processingComingMsg+0x268>
				break;
 80020da:	bf00      	nop
			}
			break;
 80020dc:	e010      	b.n	8002100 <processingComingMsg+0x268>
//				break;
//			}
//			break;
		case PACKT_RESREGISTER:
			// Get Register status
			if (Msg[RESSTATUS_POS] == RES_OK)	{
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	3302      	adds	r3, #2
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d10a      	bne.n	80020fe <processingComingMsg+0x266>
				triggerTaskflag(TASK_REGISTER, FLAG_DIS);
 80020e8:	2100      	movs	r1, #0
 80020ea:	2000      	movs	r0, #0
 80020ec:	f003 fa7c 	bl	80055e8 <triggerTaskflag>
			}
			break;
 80020f0:	e005      	b.n	80020fe <processingComingMsg+0x266>
	if ( !checkCRC(Msg, Msg_len) )	return;
 80020f2:	bf00      	nop
 80020f4:	e004      	b.n	8002100 <processingComingMsg+0x268>
	if ( !checkNodeID(Msg, stID) )	return;
 80020f6:	bf00      	nop
 80020f8:	e002      	b.n	8002100 <processingComingMsg+0x268>
		default:
			break;
 80020fa:	bf00      	nop
 80020fc:	e000      	b.n	8002100 <processingComingMsg+0x268>
			break;
 80020fe:	bf00      	nop
	}
}
 8002100:	3720      	adds	r7, #32
 8002102:	46bd      	mov	sp, r7
 8002104:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002108:	20000474 	.word	0x20000474
 800210c:	200005c5 	.word	0x200005c5
 8002110:	2000251c 	.word	0x2000251c

08002114 <CMD_SMS_calib>:
#include "stationCMD.h"
#include "Serial_log.h"


uint8_t CMD_SMS_calib (uint8_t *cmddata, uint16_t datalen)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b086      	sub	sp, #24
 8002118:	af04      	add	r7, sp, #16
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	460b      	mov	r3, r1
 800211e:	807b      	strh	r3, [r7, #2]
	if (sendCMDtoServer( CMD_SMS_CALIB, cmddata, datalen, MBA_NULL,
 8002120:	887a      	ldrh	r2, [r7, #2]
 8002122:	2300      	movs	r3, #0
 8002124:	9302      	str	r3, [sp, #8]
 8002126:	2303      	movs	r3, #3
 8002128:	9301      	str	r3, [sp, #4]
 800212a:	2303      	movs	r3, #3
 800212c:	9300      	str	r3, [sp, #0]
 800212e:	2300      	movs	r3, #0
 8002130:	6879      	ldr	r1, [r7, #4]
 8002132:	2003      	movs	r0, #3
 8002134:	f7ff fb98 	bl	8001868 <sendCMDtoServer>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d004      	beq.n	8002148 <CMD_SMS_calib+0x34>
			STEPM_DIR_DEFAULT , STEPM_MODE_DEFAULT, 0) )	{
		Serial_log_string("Sent \"Calibration\" message to server\r\n");
 800213e:	4805      	ldr	r0, [pc, #20]	; (8002154 <CMD_SMS_calib+0x40>)
 8002140:	f7fe ffc6 	bl	80010d0 <Serial_log_string>
		return 1;
 8002144:	2301      	movs	r3, #1
 8002146:	e000      	b.n	800214a <CMD_SMS_calib+0x36>
	}
	return 0;
 8002148:	2300      	movs	r3, #0
}
 800214a:	4618      	mov	r0, r3
 800214c:	3708      	adds	r7, #8
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	0800edb0 	.word	0x0800edb0

08002158 <CMD_SMS_getStatus>:

uint8_t CMD_SMS_getStatus ( uint8_t *cmddata, uint16_t datalen)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b086      	sub	sp, #24
 800215c:	af04      	add	r7, sp, #16
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	460b      	mov	r3, r1
 8002162:	807b      	strh	r3, [r7, #2]
	if (sendCMDtoServer(CMD_SMS_GETSTATUS, cmddata, datalen, MBA_NULL,
 8002164:	887a      	ldrh	r2, [r7, #2]
 8002166:	2300      	movs	r3, #0
 8002168:	9302      	str	r3, [sp, #8]
 800216a:	2303      	movs	r3, #3
 800216c:	9301      	str	r3, [sp, #4]
 800216e:	2303      	movs	r3, #3
 8002170:	9300      	str	r3, [sp, #0]
 8002172:	2300      	movs	r3, #0
 8002174:	6879      	ldr	r1, [r7, #4]
 8002176:	2004      	movs	r0, #4
 8002178:	f7ff fb76 	bl	8001868 <sendCMDtoServer>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d004      	beq.n	800218c <CMD_SMS_getStatus+0x34>
			STEPM_DIR_DEFAULT , STEPM_MODE_DEFAULT, 0) )	{
		Serial_log_string("Sent \"Get status\" message to server\r\n");
 8002182:	4805      	ldr	r0, [pc, #20]	; (8002198 <CMD_SMS_getStatus+0x40>)
 8002184:	f7fe ffa4 	bl	80010d0 <Serial_log_string>
		return 1;
 8002188:	2301      	movs	r3, #1
 800218a:	e000      	b.n	800218e <CMD_SMS_getStatus+0x36>
	}
	return 0;
 800218c:	2300      	movs	r3, #0
}
 800218e:	4618      	mov	r0, r3
 8002190:	3708      	adds	r7, #8
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	0800edd8 	.word	0x0800edd8

0800219c <CMD_SMS_Ctrl_MBA>:

uint8_t CMD_SMS_Ctrl_MBA ( uint8_t *cmddata, uint16_t datalen, MBA_state_t MBAstate)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b086      	sub	sp, #24
 80021a0:	af04      	add	r7, sp, #16
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	460b      	mov	r3, r1
 80021a6:	807b      	strh	r3, [r7, #2]
 80021a8:	4613      	mov	r3, r2
 80021aa:	707b      	strb	r3, [r7, #1]
	if (sendCMDtoServer(CMD_CTRL_MBA, cmddata, datalen, MBAstate,
 80021ac:	787b      	ldrb	r3, [r7, #1]
 80021ae:	887a      	ldrh	r2, [r7, #2]
 80021b0:	2100      	movs	r1, #0
 80021b2:	9102      	str	r1, [sp, #8]
 80021b4:	2103      	movs	r1, #3
 80021b6:	9101      	str	r1, [sp, #4]
 80021b8:	2103      	movs	r1, #3
 80021ba:	9100      	str	r1, [sp, #0]
 80021bc:	6879      	ldr	r1, [r7, #4]
 80021be:	2007      	movs	r0, #7
 80021c0:	f7ff fb52 	bl	8001868 <sendCMDtoServer>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d004      	beq.n	80021d4 <CMD_SMS_Ctrl_MBA+0x38>
			STEPM_DIR_DEFAULT , STEPM_MODE_DEFAULT, 0) )	{
		Serial_log_string("Sent \"Control MBA\" message to server\r\n");
 80021ca:	4805      	ldr	r0, [pc, #20]	; (80021e0 <CMD_SMS_Ctrl_MBA+0x44>)
 80021cc:	f7fe ff80 	bl	80010d0 <Serial_log_string>
		return 1;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e000      	b.n	80021d6 <CMD_SMS_Ctrl_MBA+0x3a>
	}
	return 0;
 80021d4:	2300      	movs	r3, #0


}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3708      	adds	r7, #8
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	0800ee00 	.word	0x0800ee00

080021e4 <CMD_SMS_Ctrl_StepM>:

uint8_t CMD_SMS_Ctrl_StepM ( uint8_t *cmddata, uint16_t datalen, Stepmotor_dir_t stepDIR, Stepmotor_change_mode_t stepMode, uint8_t changeValue)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b086      	sub	sp, #24
 80021e8:	af04      	add	r7, sp, #16
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	4608      	mov	r0, r1
 80021ee:	4611      	mov	r1, r2
 80021f0:	461a      	mov	r2, r3
 80021f2:	4603      	mov	r3, r0
 80021f4:	807b      	strh	r3, [r7, #2]
 80021f6:	460b      	mov	r3, r1
 80021f8:	707b      	strb	r3, [r7, #1]
 80021fa:	4613      	mov	r3, r2
 80021fc:	703b      	strb	r3, [r7, #0]
	if (sendCMDtoServer(CMD_CTRL_STEP_MOTOR, cmddata, datalen, MBA_NULL,stepDIR , stepMode, changeValue) )	{
 80021fe:	7c3b      	ldrb	r3, [r7, #16]
 8002200:	b29b      	uxth	r3, r3
 8002202:	887a      	ldrh	r2, [r7, #2]
 8002204:	9302      	str	r3, [sp, #8]
 8002206:	783b      	ldrb	r3, [r7, #0]
 8002208:	9301      	str	r3, [sp, #4]
 800220a:	787b      	ldrb	r3, [r7, #1]
 800220c:	9300      	str	r3, [sp, #0]
 800220e:	2300      	movs	r3, #0
 8002210:	6879      	ldr	r1, [r7, #4]
 8002212:	2008      	movs	r0, #8
 8002214:	f7ff fb28 	bl	8001868 <sendCMDtoServer>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d004      	beq.n	8002228 <CMD_SMS_Ctrl_StepM+0x44>
		Serial_log_string("Sent \"Control Step motor\" message to server\r\n");
 800221e:	4805      	ldr	r0, [pc, #20]	; (8002234 <CMD_SMS_Ctrl_StepM+0x50>)
 8002220:	f7fe ff56 	bl	80010d0 <Serial_log_string>
		return 1;
 8002224:	2301      	movs	r3, #1
 8002226:	e000      	b.n	800222a <CMD_SMS_Ctrl_StepM+0x46>
	}
	return 0;
 8002228:	2300      	movs	r3, #0
}
 800222a:	4618      	mov	r0, r3
 800222c:	3708      	adds	r7, #8
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	0800ee28 	.word	0x0800ee28

08002238 <CMD_SMS_getStationLatestData>:

uint8_t CMD_SMS_getStationLatestData ( uint8_t *cmddata, uint16_t datalen)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b086      	sub	sp, #24
 800223c:	af04      	add	r7, sp, #16
 800223e:	6078      	str	r0, [r7, #4]
 8002240:	460b      	mov	r3, r1
 8002242:	807b      	strh	r3, [r7, #2]
	if (sendCMDtoServer(CMD_SMS_GETSTATUS, cmddata, datalen, MBA_NULL,
 8002244:	887a      	ldrh	r2, [r7, #2]
 8002246:	2300      	movs	r3, #0
 8002248:	9302      	str	r3, [sp, #8]
 800224a:	2303      	movs	r3, #3
 800224c:	9301      	str	r3, [sp, #4]
 800224e:	2303      	movs	r3, #3
 8002250:	9300      	str	r3, [sp, #0]
 8002252:	2300      	movs	r3, #0
 8002254:	6879      	ldr	r1, [r7, #4]
 8002256:	2004      	movs	r0, #4
 8002258:	f7ff fb06 	bl	8001868 <sendCMDtoServer>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d004      	beq.n	800226c <CMD_SMS_getStationLatestData+0x34>
			STEPM_DIR_DEFAULT , STEPM_MODE_DEFAULT, 0) )	{
		Serial_log_string("Sent \"Get latest station data\" message to server\r\n");
 8002262:	4805      	ldr	r0, [pc, #20]	; (8002278 <CMD_SMS_getStationLatestData+0x40>)
 8002264:	f7fe ff34 	bl	80010d0 <Serial_log_string>
		return 1;
 8002268:	2301      	movs	r3, #1
 800226a:	e000      	b.n	800226e <CMD_SMS_getStationLatestData+0x36>
	}
	return 0;
 800226c:	2300      	movs	r3, #0
}
 800226e:	4618      	mov	r0, r3
 8002270:	3708      	adds	r7, #8
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	0800ee58 	.word	0x0800ee58

0800227c <CMD_SMS_getSensorLatestData>:

uint8_t CMD_SMS_getSensorLatestData ( uint8_t *cmddata, uint16_t datalen)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b086      	sub	sp, #24
 8002280:	af04      	add	r7, sp, #16
 8002282:	6078      	str	r0, [r7, #4]
 8002284:	460b      	mov	r3, r1
 8002286:	807b      	strh	r3, [r7, #2]
	if (sendCMDtoServer( CMD_SMS_GETSTATUS, cmddata, datalen, MBA_NULL,STEPM_DIR_DEFAULT , STEPM_MODE_DEFAULT, 0) )
 8002288:	887a      	ldrh	r2, [r7, #2]
 800228a:	2300      	movs	r3, #0
 800228c:	9302      	str	r3, [sp, #8]
 800228e:	2303      	movs	r3, #3
 8002290:	9301      	str	r3, [sp, #4]
 8002292:	2303      	movs	r3, #3
 8002294:	9300      	str	r3, [sp, #0]
 8002296:	2300      	movs	r3, #0
 8002298:	6879      	ldr	r1, [r7, #4]
 800229a:	2004      	movs	r0, #4
 800229c:	f7ff fae4 	bl	8001868 <sendCMDtoServer>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d001      	beq.n	80022aa <CMD_SMS_getSensorLatestData+0x2e>
		return 1;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e000      	b.n	80022ac <CMD_SMS_getSensorLatestData+0x30>
	return 0;
 80022aa:	2300      	movs	r3, #0
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	3708      	adds	r7, #8
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}

080022b4 <switchContactor>:
#include  "gpio.h"
#include "Task.h"


MBA_state_t switchContactor (MBA_state_t ONofOFF)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	4603      	mov	r3, r0
 80022bc:	71fb      	strb	r3, [r7, #7]
	switch (ONofOFF)	{
 80022be:	79fb      	ldrb	r3, [r7, #7]
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d002      	beq.n	80022ca <switchContactor+0x16>
 80022c4:	2b02      	cmp	r3, #2
 80022c6:	d006      	beq.n	80022d6 <switchContactor+0x22>
		break;
	case MBA_OFF:
		HAL_GPIO_WritePin(MBA_CONTACTOR_GPIO_Port, MBA_CONTACTOR_Pin, GPIO_PIN_RESET);
		break;
	default:
		break;
 80022c8:	e00b      	b.n	80022e2 <switchContactor+0x2e>
		HAL_GPIO_WritePin(MBA_CONTACTOR_GPIO_Port, MBA_CONTACTOR_Pin, GPIO_PIN_SET);
 80022ca:	2201      	movs	r2, #1
 80022cc:	2110      	movs	r1, #16
 80022ce:	4809      	ldr	r0, [pc, #36]	; (80022f4 <switchContactor+0x40>)
 80022d0:	f006 feb3 	bl	800903a <HAL_GPIO_WritePin>
		break;
 80022d4:	e005      	b.n	80022e2 <switchContactor+0x2e>
		HAL_GPIO_WritePin(MBA_CONTACTOR_GPIO_Port, MBA_CONTACTOR_Pin, GPIO_PIN_RESET);
 80022d6:	2200      	movs	r2, #0
 80022d8:	2110      	movs	r1, #16
 80022da:	4806      	ldr	r0, [pc, #24]	; (80022f4 <switchContactor+0x40>)
 80022dc:	f006 fead 	bl	800903a <HAL_GPIO_WritePin>
		break;
 80022e0:	bf00      	nop
	}
	// send MBA status to Server
	triggerTaskflag(TASK_SEND_MBA_STATUS, FLAG_EN);
 80022e2:	2101      	movs	r1, #1
 80022e4:	2009      	movs	r0, #9
 80022e6:	f003 f97f 	bl	80055e8 <triggerTaskflag>
	return ONofOFF;
 80022ea:	79fb      	ldrb	r3, [r7, #7]
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3708      	adds	r7, #8
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	40010800 	.word	0x40010800

080022f8 <initSIM>:
//uint8_t connlost = 0;



void initSIM()
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	af00      	add	r7, sp, #0
	enableReceiveDMAtoIdle_SIM();
 80022fc:	f000 f802 	bl	8002304 <enableReceiveDMAtoIdle_SIM>
//	SIM_sendCMD((uint8_t*)"ATE0",(uint8_t*)"OK", ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, 1000);
}
 8002300:	bf00      	nop
 8002302:	bd80      	pop	{r7, pc}

08002304 <enableReceiveDMAtoIdle_SIM>:
void enableReceiveDMAtoIdle_SIM(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	af00      	add	r7, sp, #0
	 HAL_UARTEx_ReceiveToIdle_DMA(SIM_UART, SIMRxbuff, SIM_RXBUFF_SIZE);
 8002308:	2296      	movs	r2, #150	; 0x96
 800230a:	4907      	ldr	r1, [pc, #28]	; (8002328 <enableReceiveDMAtoIdle_SIM+0x24>)
 800230c:	4807      	ldr	r0, [pc, #28]	; (800232c <enableReceiveDMAtoIdle_SIM+0x28>)
 800230e:	f008 ff16 	bl	800b13e <HAL_UARTEx_ReceiveToIdle_DMA>
	  __HAL_DMA_DISABLE_IT(SIM_DMA_UART,DMA_IT_HT);
 8002312:	4b07      	ldr	r3, [pc, #28]	; (8002330 <enableReceiveDMAtoIdle_SIM+0x2c>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	4b05      	ldr	r3, [pc, #20]	; (8002330 <enableReceiveDMAtoIdle_SIM+0x2c>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f022 0204 	bic.w	r2, r2, #4
 8002320:	601a      	str	r2, [r3, #0]
}
 8002322:	bf00      	nop
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	20000d00 	.word	0x20000d00
 800232c:	2000258c 	.word	0x2000258c
 8002330:	20002664 	.word	0x20002664

08002334 <SIM_callback>:

void SIM_callback(uint16_t Size)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b084      	sub	sp, #16
 8002338:	af00      	add	r7, sp, #0
 800233a:	4603      	mov	r3, r0
 800233c:	80fb      	strh	r3, [r7, #6]


		oldPos = newPos;  // Update the last position before copying new data
 800233e:	4b5f      	ldr	r3, [pc, #380]	; (80024bc <SIM_callback+0x188>)
 8002340:	881a      	ldrh	r2, [r3, #0]
 8002342:	4b5f      	ldr	r3, [pc, #380]	; (80024c0 <SIM_callback+0x18c>)
 8002344:	801a      	strh	r2, [r3, #0]

		/* If the data in large and it is about to exceed the buffer size, we have to route it to the start of the buffer
		 * This is to maintain the circular buffer
		 * The old data in the main buffer will be overlapped
		 */
		if (oldPos+Size > SIM_BUFF_SIZE)  // If the current position + new data size is greater than the main buffer
 8002346:	4b5e      	ldr	r3, [pc, #376]	; (80024c0 <SIM_callback+0x18c>)
 8002348:	881b      	ldrh	r3, [r3, #0]
 800234a:	461a      	mov	r2, r3
 800234c:	88fb      	ldrh	r3, [r7, #6]
 800234e:	4413      	add	r3, r2
 8002350:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002354:	dd22      	ble.n	800239c <SIM_callback+0x68>
		{
			uint16_t datatocopy = SIM_BUFF_SIZE-oldPos;  // find out how much space is left in the main buffer
 8002356:	4b5a      	ldr	r3, [pc, #360]	; (80024c0 <SIM_callback+0x18c>)
 8002358:	881b      	ldrh	r3, [r3, #0]
 800235a:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800235e:	81fb      	strh	r3, [r7, #14]
			memcpy ((uint8_t *)SIMbuff+oldPos, (uint8_t *)SIMRxbuff, datatocopy);  // copy data in that remaining space
 8002360:	4b57      	ldr	r3, [pc, #348]	; (80024c0 <SIM_callback+0x18c>)
 8002362:	881b      	ldrh	r3, [r3, #0]
 8002364:	461a      	mov	r2, r3
 8002366:	4b57      	ldr	r3, [pc, #348]	; (80024c4 <SIM_callback+0x190>)
 8002368:	4413      	add	r3, r2
 800236a:	89fa      	ldrh	r2, [r7, #14]
 800236c:	4956      	ldr	r1, [pc, #344]	; (80024c8 <SIM_callback+0x194>)
 800236e:	4618      	mov	r0, r3
 8002370:	f009 ffac 	bl	800c2cc <memcpy>

			oldPos = 0;  // point to the start of the buffer
 8002374:	4b52      	ldr	r3, [pc, #328]	; (80024c0 <SIM_callback+0x18c>)
 8002376:	2200      	movs	r2, #0
 8002378:	801a      	strh	r2, [r3, #0]
			memcpy ((uint8_t *)SIMbuff, (uint8_t *)SIMRxbuff+datatocopy, (Size-datatocopy));  // copy the remaining data
 800237a:	89fb      	ldrh	r3, [r7, #14]
 800237c:	4a52      	ldr	r2, [pc, #328]	; (80024c8 <SIM_callback+0x194>)
 800237e:	1899      	adds	r1, r3, r2
 8002380:	88fa      	ldrh	r2, [r7, #6]
 8002382:	89fb      	ldrh	r3, [r7, #14]
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	461a      	mov	r2, r3
 8002388:	484e      	ldr	r0, [pc, #312]	; (80024c4 <SIM_callback+0x190>)
 800238a:	f009 ff9f 	bl	800c2cc <memcpy>
			newPos = (Size-datatocopy);  // update the position
 800238e:	88fa      	ldrh	r2, [r7, #6]
 8002390:	89fb      	ldrh	r3, [r7, #14]
 8002392:	1ad3      	subs	r3, r2, r3
 8002394:	b29a      	uxth	r2, r3
 8002396:	4b49      	ldr	r3, [pc, #292]	; (80024bc <SIM_callback+0x188>)
 8002398:	801a      	strh	r2, [r3, #0]
 800239a:	e010      	b.n	80023be <SIM_callback+0x8a>
		/* if the current position + new data size is less than the main buffer
		 * we will simply copy the data into the buffer and update the position
		 */
		else
		{
			memcpy ((uint8_t *)SIMbuff+oldPos, (uint8_t *)SIMRxbuff, Size);
 800239c:	4b48      	ldr	r3, [pc, #288]	; (80024c0 <SIM_callback+0x18c>)
 800239e:	881b      	ldrh	r3, [r3, #0]
 80023a0:	461a      	mov	r2, r3
 80023a2:	4b48      	ldr	r3, [pc, #288]	; (80024c4 <SIM_callback+0x190>)
 80023a4:	4413      	add	r3, r2
 80023a6:	88fa      	ldrh	r2, [r7, #6]
 80023a8:	4947      	ldr	r1, [pc, #284]	; (80024c8 <SIM_callback+0x194>)
 80023aa:	4618      	mov	r0, r3
 80023ac:	f009 ff8e 	bl	800c2cc <memcpy>
			newPos = Size+oldPos;
 80023b0:	4b43      	ldr	r3, [pc, #268]	; (80024c0 <SIM_callback+0x18c>)
 80023b2:	881a      	ldrh	r2, [r3, #0]
 80023b4:	88fb      	ldrh	r3, [r7, #6]
 80023b6:	4413      	add	r3, r2
 80023b8:	b29a      	uxth	r2, r3
 80023ba:	4b40      	ldr	r3, [pc, #256]	; (80024bc <SIM_callback+0x188>)
 80023bc:	801a      	strh	r2, [r3, #0]

		/* Update the position of the Head
		 * If the current position + new size is less then the buffer size, Head will update normally
		 * Or else the head will be at the new position from the beginning
		 */
		if (head + Size < SIM_BUFF_SIZE ) head = head + Size;
 80023be:	4b43      	ldr	r3, [pc, #268]	; (80024cc <SIM_callback+0x198>)
 80023c0:	881b      	ldrh	r3, [r3, #0]
 80023c2:	461a      	mov	r2, r3
 80023c4:	88fb      	ldrh	r3, [r7, #6]
 80023c6:	4413      	add	r3, r2
 80023c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023cc:	da07      	bge.n	80023de <SIM_callback+0xaa>
 80023ce:	4b3f      	ldr	r3, [pc, #252]	; (80024cc <SIM_callback+0x198>)
 80023d0:	881a      	ldrh	r2, [r3, #0]
 80023d2:	88fb      	ldrh	r3, [r7, #6]
 80023d4:	4413      	add	r3, r2
 80023d6:	b29a      	uxth	r2, r3
 80023d8:	4b3c      	ldr	r3, [pc, #240]	; (80024cc <SIM_callback+0x198>)
 80023da:	801a      	strh	r2, [r3, #0]
 80023dc:	e009      	b.n	80023f2 <SIM_callback+0xbe>
		else head = head + Size - SIM_BUFF_SIZE;
 80023de:	4b3b      	ldr	r3, [pc, #236]	; (80024cc <SIM_callback+0x198>)
 80023e0:	881a      	ldrh	r2, [r3, #0]
 80023e2:	88fb      	ldrh	r3, [r7, #6]
 80023e4:	4413      	add	r3, r2
 80023e6:	b29b      	uxth	r3, r3
 80023e8:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 80023ec:	b29a      	uxth	r2, r3
 80023ee:	4b37      	ldr	r3, [pc, #220]	; (80024cc <SIM_callback+0x198>)
 80023f0:	801a      	strh	r2, [r3, #0]

		/* start the DMA again */
		enableReceiveDMAtoIdle_SIM();
 80023f2:	f7ff ff87 	bl	8002304 <enableReceiveDMAtoIdle_SIM>

		// New SMS coming
		if (isWordinBuff(SIMRxbuff, Size, (uint8_t*)"+CMTI: \"SM\"") != NULL)
 80023f6:	88fb      	ldrh	r3, [r7, #6]
 80023f8:	4a35      	ldr	r2, [pc, #212]	; (80024d0 <SIM_callback+0x19c>)
 80023fa:	4619      	mov	r1, r3
 80023fc:	4832      	ldr	r0, [pc, #200]	; (80024c8 <SIM_callback+0x194>)
 80023fe:	f002 fef9 	bl	80051f4 <isWordinBuff>
 8002402:	4603      	mov	r3, r0
 8002404:	2b00      	cmp	r3, #0
 8002406:	d002      	beq.n	800240e <SIM_callback+0xda>
		{
			newSMS = 1;
 8002408:	4b32      	ldr	r3, [pc, #200]	; (80024d4 <SIM_callback+0x1a0>)
 800240a:	2201      	movs	r2, #1
 800240c:	701a      	strb	r2, [r3, #0]
		}

		// Read SMS
		if (isWordinBuff(SIMRxbuff, Size, (uint8_t*)"+CMGR:") != NULL)	{
 800240e:	88fb      	ldrh	r3, [r7, #6]
 8002410:	4a31      	ldr	r2, [pc, #196]	; (80024d8 <SIM_callback+0x1a4>)
 8002412:	4619      	mov	r1, r3
 8002414:	482c      	ldr	r0, [pc, #176]	; (80024c8 <SIM_callback+0x194>)
 8002416:	f002 feed 	bl	80051f4 <isWordinBuff>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d008      	beq.n	8002432 <SIM_callback+0xfe>
			memcpy(SMS_Rxbuff, SIMRxbuff, Size);
 8002420:	88fb      	ldrh	r3, [r7, #6]
 8002422:	461a      	mov	r2, r3
 8002424:	4928      	ldr	r1, [pc, #160]	; (80024c8 <SIM_callback+0x194>)
 8002426:	482d      	ldr	r0, [pc, #180]	; (80024dc <SIM_callback+0x1a8>)
 8002428:	f009 ff50 	bl	800c2cc <memcpy>
			SMS_len = Size;
 800242c:	4a2c      	ldr	r2, [pc, #176]	; (80024e0 <SIM_callback+0x1ac>)
 800242e:	88fb      	ldrh	r3, [r7, #6]
 8002430:	8013      	strh	r3, [r2, #0]
		}
		if (isWordinBuff(SIMRxbuff, Size, (uint8_t*)"+CMGL: ") != NULL)	{
 8002432:	88fb      	ldrh	r3, [r7, #6]
 8002434:	4a2b      	ldr	r2, [pc, #172]	; (80024e4 <SIM_callback+0x1b0>)
 8002436:	4619      	mov	r1, r3
 8002438:	4823      	ldr	r0, [pc, #140]	; (80024c8 <SIM_callback+0x194>)
 800243a:	f002 fedb 	bl	80051f4 <isWordinBuff>
 800243e:	4603      	mov	r3, r0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d008      	beq.n	8002456 <SIM_callback+0x122>
			memcpy(SMS_Rxbuff, SIMRxbuff, Size);
 8002444:	88fb      	ldrh	r3, [r7, #6]
 8002446:	461a      	mov	r2, r3
 8002448:	491f      	ldr	r1, [pc, #124]	; (80024c8 <SIM_callback+0x194>)
 800244a:	4824      	ldr	r0, [pc, #144]	; (80024dc <SIM_callback+0x1a8>)
 800244c:	f009 ff3e 	bl	800c2cc <memcpy>
			SMS_len = Size;
 8002450:	4a23      	ldr	r2, [pc, #140]	; (80024e0 <SIM_callback+0x1ac>)
 8002452:	88fb      	ldrh	r3, [r7, #6]
 8002454:	8013      	strh	r3, [r2, #0]
		}
		// New MQTT message
		if ( (isWordinBuff(SIMRxbuff, Size, (uint8_t*) "+CMQTTRXSTART:") != NULL)
 8002456:	88fb      	ldrh	r3, [r7, #6]
 8002458:	4a23      	ldr	r2, [pc, #140]	; (80024e8 <SIM_callback+0x1b4>)
 800245a:	4619      	mov	r1, r3
 800245c:	481a      	ldr	r0, [pc, #104]	; (80024c8 <SIM_callback+0x194>)
 800245e:	f002 fec9 	bl	80051f4 <isWordinBuff>
 8002462:	4603      	mov	r3, r0
 8002464:	2b00      	cmp	r3, #0
 8002466:	d013      	beq.n	8002490 <SIM_callback+0x15c>
				&& ( isWordinBuff(SIMRxbuff, Size,(uint8_t*) "+CMQTTRXEND:") != NULL ) )  	{
 8002468:	88fb      	ldrh	r3, [r7, #6]
 800246a:	4a20      	ldr	r2, [pc, #128]	; (80024ec <SIM_callback+0x1b8>)
 800246c:	4619      	mov	r1, r3
 800246e:	4816      	ldr	r0, [pc, #88]	; (80024c8 <SIM_callback+0x194>)
 8002470:	f002 fec0 	bl	80051f4 <isWordinBuff>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d00a      	beq.n	8002490 <SIM_callback+0x15c>
			memcpy(MQTT_Rxbuff, SIMRxbuff, Size);
 800247a:	88fb      	ldrh	r3, [r7, #6]
 800247c:	461a      	mov	r2, r3
 800247e:	4912      	ldr	r1, [pc, #72]	; (80024c8 <SIM_callback+0x194>)
 8002480:	481b      	ldr	r0, [pc, #108]	; (80024f0 <SIM_callback+0x1bc>)
 8002482:	f009 ff23 	bl	800c2cc <memcpy>
			MQTT_receive(MQTT_Rxbuff, Size);
 8002486:	88fb      	ldrh	r3, [r7, #6]
 8002488:	4619      	mov	r1, r3
 800248a:	4819      	ldr	r0, [pc, #100]	; (80024f0 <SIM_callback+0x1bc>)
 800248c:	f002 fb56 	bl	8004b3c <MQTT_receive>
		}

		if  (isWordinBuff(SIMRxbuff, Size, (uint8_t*)"+CMQTTCONNLOST:") != NULL) 	{
 8002490:	88fb      	ldrh	r3, [r7, #6]
 8002492:	4a18      	ldr	r2, [pc, #96]	; (80024f4 <SIM_callback+0x1c0>)
 8002494:	4619      	mov	r1, r3
 8002496:	480c      	ldr	r0, [pc, #48]	; (80024c8 <SIM_callback+0x194>)
 8002498:	f002 feac 	bl	80051f4 <isWordinBuff>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d002      	beq.n	80024a8 <SIM_callback+0x174>
			mySIM.mqttServer.connect = 0;
 80024a2:	4b15      	ldr	r3, [pc, #84]	; (80024f8 <SIM_callback+0x1c4>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	739a      	strb	r2, [r3, #14]
		}
		memset(SIMRxbuff, 0, SIM_RXBUFF_SIZE);
 80024a8:	2296      	movs	r2, #150	; 0x96
 80024aa:	2100      	movs	r1, #0
 80024ac:	4806      	ldr	r0, [pc, #24]	; (80024c8 <SIM_callback+0x194>)
 80024ae:	f009 ff1b 	bl	800c2e8 <memset>
//		Serial_log_string("Rx: ");
//		Serial_log_buffer(SIMRxbuff, Size);
//		Serial_log_string(" ");


}
 80024b2:	bf00      	nop
 80024b4:	3710      	adds	r7, #16
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	20000afe 	.word	0x20000afe
 80024c0:	20000afc 	.word	0x20000afc
 80024c4:	20000b00 	.word	0x20000b00
 80024c8:	20000d00 	.word	0x20000d00
 80024cc:	20000f5c 	.word	0x20000f5c
 80024d0:	0800ee8c 	.word	0x0800ee8c
 80024d4:	20000f60 	.word	0x20000f60
 80024d8:	0800ee98 	.word	0x0800ee98
 80024dc:	20000d98 	.word	0x20000d98
 80024e0:	20000f62 	.word	0x20000f62
 80024e4:	0800eea0 	.word	0x0800eea0
 80024e8:	0800eea8 	.word	0x0800eea8
 80024ec:	0800eeb8 	.word	0x0800eeb8
 80024f0:	20000e30 	.word	0x20000e30
 80024f4:	0800eec8 	.word	0x0800eec8
 80024f8:	20001298 	.word	0x20001298

080024fc <SIM_checkMsg>:

SIM_res_t SIM_checkMsg(uint8_t *Msg, uint16_t timeout)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 8002502:	af00      	add	r7, sp, #0
 8002504:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8002508:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800250c:	6018      	str	r0, [r3, #0]
 800250e:	460a      	mov	r2, r1
 8002510:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8002514:	f2a3 230e 	subw	r3, r3, #526	; 0x20e
 8002518:	801a      	strh	r2, [r3, #0]
	SIM_res_t res= SIM_NO_RES;
 800251a:	2302      	movs	r3, #2
 800251c:	f887 320d 	strb.w	r3, [r7, #525]	; 0x20d
	uint8_t dataSize = 0;
 8002520:	2300      	movs	r3, #0
 8002522:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
	uint8_t tmpdbuff[SIM_BUFF_SIZE];
	memset( (char*)tmpdbuff, 0, SIM_BUFF_SIZE );
 8002526:	f107 030c 	add.w	r3, r7, #12
 800252a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800252e:	2100      	movs	r1, #0
 8002530:	4618      	mov	r0, r3
 8002532:	f009 fed9 	bl	800c2e8 <memset>
	timeout /= 20;
 8002536:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800253a:	f2a3 230e 	subw	r3, r3, #526	; 0x20e
 800253e:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8002542:	f2a2 220e 	subw	r2, r2, #526	; 0x20e
 8002546:	8812      	ldrh	r2, [r2, #0]
 8002548:	4943      	ldr	r1, [pc, #268]	; (8002658 <SIM_checkMsg+0x15c>)
 800254a:	fba1 1202 	umull	r1, r2, r1, r2
 800254e:	0912      	lsrs	r2, r2, #4
 8002550:	801a      	strh	r2, [r3, #0]

	for (uint8_t i = 0; i < 20 ; i++)
 8002552:	2300      	movs	r3, #0
 8002554:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e
 8002558:	e073      	b.n	8002642 <SIM_checkMsg+0x146>
	{
		HAL_Delay(timeout);
 800255a:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800255e:	f2a3 230e 	subw	r3, r3, #526	; 0x20e
 8002562:	881b      	ldrh	r3, [r3, #0]
 8002564:	4618      	mov	r0, r3
 8002566:	f005 fbfb 	bl	8007d60 <HAL_Delay>

		if (head > tail)
 800256a:	4b3c      	ldr	r3, [pc, #240]	; (800265c <SIM_checkMsg+0x160>)
 800256c:	881a      	ldrh	r2, [r3, #0]
 800256e:	4b3c      	ldr	r3, [pc, #240]	; (8002660 <SIM_checkMsg+0x164>)
 8002570:	881b      	ldrh	r3, [r3, #0]
 8002572:	429a      	cmp	r2, r3
 8002574:	d915      	bls.n	80025a2 <SIM_checkMsg+0xa6>
		{
			dataSize = head - tail ;
 8002576:	4b39      	ldr	r3, [pc, #228]	; (800265c <SIM_checkMsg+0x160>)
 8002578:	881b      	ldrh	r3, [r3, #0]
 800257a:	b2da      	uxtb	r2, r3
 800257c:	4b38      	ldr	r3, [pc, #224]	; (8002660 <SIM_checkMsg+0x164>)
 800257e:	881b      	ldrh	r3, [r3, #0]
 8002580:	b2db      	uxtb	r3, r3
 8002582:	1ad3      	subs	r3, r2, r3
 8002584:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f

			memcpy(tmpdbuff, SIMbuff + tail, dataSize);
 8002588:	4b35      	ldr	r3, [pc, #212]	; (8002660 <SIM_checkMsg+0x164>)
 800258a:	881b      	ldrh	r3, [r3, #0]
 800258c:	461a      	mov	r2, r3
 800258e:	4b35      	ldr	r3, [pc, #212]	; (8002664 <SIM_checkMsg+0x168>)
 8002590:	18d1      	adds	r1, r2, r3
 8002592:	f897 220f 	ldrb.w	r2, [r7, #527]	; 0x20f
 8002596:	f107 030c 	add.w	r3, r7, #12
 800259a:	4618      	mov	r0, r3
 800259c:	f009 fe96 	bl	800c2cc <memcpy>
 80025a0:	e02a      	b.n	80025f8 <SIM_checkMsg+0xfc>
		}
		else if ( head < tail )
 80025a2:	4b2e      	ldr	r3, [pc, #184]	; (800265c <SIM_checkMsg+0x160>)
 80025a4:	881a      	ldrh	r2, [r3, #0]
 80025a6:	4b2e      	ldr	r3, [pc, #184]	; (8002660 <SIM_checkMsg+0x164>)
 80025a8:	881b      	ldrh	r3, [r3, #0]
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d243      	bcs.n	8002636 <SIM_checkMsg+0x13a>
		{
			dataSize = SIM_BUFF_SIZE - tail + head ;
 80025ae:	4b2b      	ldr	r3, [pc, #172]	; (800265c <SIM_checkMsg+0x160>)
 80025b0:	881b      	ldrh	r3, [r3, #0]
 80025b2:	b2da      	uxtb	r2, r3
 80025b4:	4b2a      	ldr	r3, [pc, #168]	; (8002660 <SIM_checkMsg+0x164>)
 80025b6:	881b      	ldrh	r3, [r3, #0]
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
			memcpy(tmpdbuff, SIMbuff + tail, SIM_BUFF_SIZE - tail);
 80025c0:	4b27      	ldr	r3, [pc, #156]	; (8002660 <SIM_checkMsg+0x164>)
 80025c2:	881b      	ldrh	r3, [r3, #0]
 80025c4:	461a      	mov	r2, r3
 80025c6:	4b27      	ldr	r3, [pc, #156]	; (8002664 <SIM_checkMsg+0x168>)
 80025c8:	18d1      	adds	r1, r2, r3
 80025ca:	4b25      	ldr	r3, [pc, #148]	; (8002660 <SIM_checkMsg+0x164>)
 80025cc:	881b      	ldrh	r3, [r3, #0]
 80025ce:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80025d2:	461a      	mov	r2, r3
 80025d4:	f107 030c 	add.w	r3, r7, #12
 80025d8:	4618      	mov	r0, r3
 80025da:	f009 fe77 	bl	800c2cc <memcpy>
			memcpy(tmpdbuff + SIM_BUFF_SIZE - tail, SIMbuff, head);
 80025de:	4b20      	ldr	r3, [pc, #128]	; (8002660 <SIM_checkMsg+0x164>)
 80025e0:	881b      	ldrh	r3, [r3, #0]
 80025e2:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80025e6:	f107 020c 	add.w	r2, r7, #12
 80025ea:	4413      	add	r3, r2
 80025ec:	4a1b      	ldr	r2, [pc, #108]	; (800265c <SIM_checkMsg+0x160>)
 80025ee:	8812      	ldrh	r2, [r2, #0]
 80025f0:	491c      	ldr	r1, [pc, #112]	; (8002664 <SIM_checkMsg+0x168>)
 80025f2:	4618      	mov	r0, r3
 80025f4:	f009 fe6a 	bl	800c2cc <memcpy>
		}
		else {
			continue;
		}

		if ( isWordinBuff(tmpdbuff, dataSize, Msg) != NULL )	{
 80025f8:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 80025fc:	b299      	uxth	r1, r3
 80025fe:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8002602:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8002606:	f107 000c 	add.w	r0, r7, #12
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	f002 fdf2 	bl	80051f4 <isWordinBuff>
 8002610:	4603      	mov	r3, r0
 8002612:	2b00      	cmp	r3, #0
 8002614:	d001      	beq.n	800261a <SIM_checkMsg+0x11e>
			return SIM_RES_MSG ;
 8002616:	2301      	movs	r3, #1
 8002618:	e019      	b.n	800264e <SIM_checkMsg+0x152>
		}

		if ( isWordinBuff(tmpdbuff, dataSize, (uint8_t*)"ERROR") != NULL )	{
 800261a:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 800261e:	b299      	uxth	r1, r3
 8002620:	f107 030c 	add.w	r3, r7, #12
 8002624:	4a10      	ldr	r2, [pc, #64]	; (8002668 <SIM_checkMsg+0x16c>)
 8002626:	4618      	mov	r0, r3
 8002628:	f002 fde4 	bl	80051f4 <isWordinBuff>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d002      	beq.n	8002638 <SIM_checkMsg+0x13c>
			return SIM_ERROR ;
 8002632:	2300      	movs	r3, #0
 8002634:	e00b      	b.n	800264e <SIM_checkMsg+0x152>
			continue;
 8002636:	bf00      	nop
	for (uint8_t i = 0; i < 20 ; i++)
 8002638:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 800263c:	3301      	adds	r3, #1
 800263e:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e
 8002642:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8002646:	2b13      	cmp	r3, #19
 8002648:	d987      	bls.n	800255a <SIM_checkMsg+0x5e>
		}
	}

 	return res;
 800264a:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
}
 800264e:	4618      	mov	r0, r3
 8002650:	f507 7704 	add.w	r7, r7, #528	; 0x210
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}
 8002658:	cccccccd 	.word	0xcccccccd
 800265c:	20000f5c 	.word	0x20000f5c
 8002660:	20000f5e 	.word	0x20000f5e
 8002664:	20000b00 	.word	0x20000b00
 8002668:	0800eed8 	.word	0x0800eed8

0800266c <SIM_sendCMD>:

SIM_res_t SIM_sendCMD(uint8_t *cmd, uint8_t *checkResMsg, uint8_t CheckResENorDIS, uint8_t ENorDISmarkasread, uint32_t timeout)
{
 800266c:	b590      	push	{r4, r7, lr}
 800266e:	b0c7      	sub	sp, #284	; 0x11c
 8002670:	af00      	add	r7, sp, #0
 8002672:	f507 748c 	add.w	r4, r7, #280	; 0x118
 8002676:	f5a4 7486 	sub.w	r4, r4, #268	; 0x10c
 800267a:	6020      	str	r0, [r4, #0]
 800267c:	f507 708c 	add.w	r0, r7, #280	; 0x118
 8002680:	f5a0 7088 	sub.w	r0, r0, #272	; 0x110
 8002684:	6001      	str	r1, [r0, #0]
 8002686:	4619      	mov	r1, r3
 8002688:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800268c:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8002690:	701a      	strb	r2, [r3, #0]
 8002692:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002696:	f5a3 7389 	sub.w	r3, r3, #274	; 0x112
 800269a:	460a      	mov	r2, r1
 800269c:	701a      	strb	r2, [r3, #0]
	uint8_t SIM_Txbuff[256];
	uint8_t len = sprintf( (char*)SIM_Txbuff, "%s\r\n", cmd);
 800269e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80026a2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80026a6:	f107 0014 	add.w	r0, r7, #20
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	491b      	ldr	r1, [pc, #108]	; (800271c <SIM_sendCMD+0xb0>)
 80026ae:	f00a f981 	bl	800c9b4 <siprintf>
 80026b2:	4603      	mov	r3, r0
 80026b4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	HAL_UART_Transmit(SIM_UART, SIM_Txbuff, len, 0xFFFF) ;
 80026b8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80026bc:	b29a      	uxth	r2, r3
 80026be:	f107 0114 	add.w	r1, r7, #20
 80026c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026c6:	4816      	ldr	r0, [pc, #88]	; (8002720 <SIM_sendCMD+0xb4>)
 80026c8:	f008 fcb6 	bl	800b038 <HAL_UART_Transmit>

	if (CheckResENorDIS == ENABLE_SIM_CHECKRES)
 80026cc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80026d0:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d119      	bne.n	800270e <SIM_sendCMD+0xa2>
	{
		SIM_res_t res = SIM_checkMsg(checkResMsg, timeout);
 80026da:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80026de:	b29a      	uxth	r2, r3
 80026e0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80026e4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80026e8:	4611      	mov	r1, r2
 80026ea:	6818      	ldr	r0, [r3, #0]
 80026ec:	f7ff ff06 	bl	80024fc <SIM_checkMsg>
 80026f0:	4603      	mov	r3, r0
 80026f2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
		if (ENorDISmarkasread == ENABLE_MARKASREAD)
 80026f6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80026fa:	f5a3 7389 	sub.w	r3, r3, #274	; 0x112
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	2b01      	cmp	r3, #1
 8002702:	d101      	bne.n	8002708 <SIM_sendCMD+0x9c>
		{
			MarkAsReadData_SIM();
 8002704:	f000 f880 	bl	8002808 <MarkAsReadData_SIM>
		}
//		Serial_log_string("Res of CMD: ");
//		Serial_log_buffer(cmd, len);
//		Serial_log_number(res);
		return res;
 8002708:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 800270c:	e000      	b.n	8002710 <SIM_sendCMD+0xa4>
	}
	return SIM_NO_RES;
 800270e:	2302      	movs	r3, #2
}
 8002710:	4618      	mov	r0, r3
 8002712:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 8002716:	46bd      	mov	sp, r7
 8002718:	bd90      	pop	{r4, r7, pc}
 800271a:	bf00      	nop
 800271c:	0800eee0 	.word	0x0800eee0
 8002720:	2000258c 	.word	0x2000258c

08002724 <SIM_checkCMD>:
/*
 * Return : 1 success
 * 			0 fail
 */
uint8_t SIM_checkCMD (SIM_CMD_t cmd)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b086      	sub	sp, #24
 8002728:	af02      	add	r7, sp, #8
 800272a:	4603      	mov	r3, r0
 800272c:	71fb      	strb	r3, [r7, #7]
	uint8_t res = 0;
 800272e:	2300      	movs	r3, #0
 8002730:	73fb      	strb	r3, [r7, #15]
//	SIM_res_t check;
	switch (cmd) {
 8002732:	79fb      	ldrb	r3, [r7, #7]
 8002734:	2b04      	cmp	r3, #4
 8002736:	d849      	bhi.n	80027cc <SIM_checkCMD+0xa8>
 8002738:	a201      	add	r2, pc, #4	; (adr r2, 8002740 <SIM_checkCMD+0x1c>)
 800273a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800273e:	bf00      	nop
 8002740:	08002755 	.word	0x08002755
 8002744:	080027af 	.word	0x080027af
 8002748:	08002791 	.word	0x08002791
 800274c:	08002773 	.word	0x08002773
 8002750:	080027cd 	.word	0x080027cd
		case SIM_CMD_SIMCARD_PIN:

			if ( SIM_sendCMD( (uint8_t*)"AT+CPIN?", (uint8_t*)"+CPIN: READY", ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, SIM_TIMEOUT_SHORT) == SIM_RES_MSG ) {
 8002754:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002758:	9300      	str	r3, [sp, #0]
 800275a:	2301      	movs	r3, #1
 800275c:	2201      	movs	r2, #1
 800275e:	4922      	ldr	r1, [pc, #136]	; (80027e8 <SIM_checkCMD+0xc4>)
 8002760:	4822      	ldr	r0, [pc, #136]	; (80027ec <SIM_checkCMD+0xc8>)
 8002762:	f7ff ff83 	bl	800266c <SIM_sendCMD>
 8002766:	4603      	mov	r3, r0
 8002768:	2b01      	cmp	r3, #1
 800276a:	d131      	bne.n	80027d0 <SIM_checkCMD+0xac>
				res = 1;
 800276c:	2301      	movs	r3, #1
 800276e:	73fb      	strb	r3, [r7, #15]
//				Serial_log_string("SIM card READY\r\n");
			}
			break;
 8002770:	e02e      	b.n	80027d0 <SIM_checkCMD+0xac>
		case SIM_CMD_NW_CPSI:
			if ( SIM_sendCMD( (uint8_t*)"AT+CPSI?", (uint8_t*)"+CPSI: NO SERVICE", ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, SIM_TIMEOUT_SHORT) == SIM_RES_MSG ) {
 8002772:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002776:	9300      	str	r3, [sp, #0]
 8002778:	2301      	movs	r3, #1
 800277a:	2201      	movs	r2, #1
 800277c:	491c      	ldr	r1, [pc, #112]	; (80027f0 <SIM_checkCMD+0xcc>)
 800277e:	481d      	ldr	r0, [pc, #116]	; (80027f4 <SIM_checkCMD+0xd0>)
 8002780:	f7ff ff74 	bl	800266c <SIM_sendCMD>
 8002784:	4603      	mov	r3, r0
 8002786:	2b01      	cmp	r3, #1
 8002788:	d024      	beq.n	80027d4 <SIM_checkCMD+0xb0>
//				Serial_log_string("NO SERVICE, network status has some problem");
			}
			else {
				res = 1;
 800278a:	2301      	movs	r3, #1
 800278c:	73fb      	strb	r3, [r7, #15]
//				Serial_log_string("SERVICE available\r\n");
			}
			break;
 800278e:	e021      	b.n	80027d4 <SIM_checkCMD+0xb0>
		case SIM_CMD_NW_CREG:
			if ( SIM_sendCMD( (uint8_t*)"AT+CREG?", (uint8_t*)"+CREG: 0,1", ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, SIM_TIMEOUT_SHORT) == SIM_RES_MSG ) {
 8002790:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002794:	9300      	str	r3, [sp, #0]
 8002796:	2301      	movs	r3, #1
 8002798:	2201      	movs	r2, #1
 800279a:	4917      	ldr	r1, [pc, #92]	; (80027f8 <SIM_checkCMD+0xd4>)
 800279c:	4817      	ldr	r0, [pc, #92]	; (80027fc <SIM_checkCMD+0xd8>)
 800279e:	f7ff ff65 	bl	800266c <SIM_sendCMD>
 80027a2:	4603      	mov	r3, r0
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d117      	bne.n	80027d8 <SIM_checkCMD+0xb4>
				res = 1;
 80027a8:	2301      	movs	r3, #1
 80027aa:	73fb      	strb	r3, [r7, #15]
//				Serial_log_string("Module is registered to CS domain\r\n");
			}
			break;
 80027ac:	e014      	b.n	80027d8 <SIM_checkCMD+0xb4>
		case SIM_CMD_PACKDOM_CGREG:

			break;
		case SIM_CMD_STA_CSQ:
			if ( SIM_sendCMD( (uint8_t*)"AT+CSQ", (uint8_t*)"+CSQ: 99", ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, SIM_TIMEOUT_SHORT) == SIM_RES_MSG ) {
 80027ae:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80027b2:	9300      	str	r3, [sp, #0]
 80027b4:	2301      	movs	r3, #1
 80027b6:	2201      	movs	r2, #1
 80027b8:	4911      	ldr	r1, [pc, #68]	; (8002800 <SIM_checkCMD+0xdc>)
 80027ba:	4812      	ldr	r0, [pc, #72]	; (8002804 <SIM_checkCMD+0xe0>)
 80027bc:	f7ff ff56 	bl	800266c <SIM_sendCMD>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d00a      	beq.n	80027dc <SIM_checkCMD+0xb8>
//				Serial_log_string("Signal quality is bad, please check SIM card or reboot the module\r\n");
			}
			else {
				res = 1;
 80027c6:	2301      	movs	r3, #1
 80027c8:	73fb      	strb	r3, [r7, #15]
//				Serial_log_string("Signal quality is good\r\n");
			}
			break;
 80027ca:	e007      	b.n	80027dc <SIM_checkCMD+0xb8>
		default :
			break;
 80027cc:	bf00      	nop
 80027ce:	e006      	b.n	80027de <SIM_checkCMD+0xba>
			break;
 80027d0:	bf00      	nop
 80027d2:	e004      	b.n	80027de <SIM_checkCMD+0xba>
			break;
 80027d4:	bf00      	nop
 80027d6:	e002      	b.n	80027de <SIM_checkCMD+0xba>
			break;
 80027d8:	bf00      	nop
 80027da:	e000      	b.n	80027de <SIM_checkCMD+0xba>
			break;
 80027dc:	bf00      	nop
	}
	return res;
 80027de:	7bfb      	ldrb	r3, [r7, #15]
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3710      	adds	r7, #16
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	0800eee8 	.word	0x0800eee8
 80027ec:	0800eef8 	.word	0x0800eef8
 80027f0:	0800ef04 	.word	0x0800ef04
 80027f4:	0800ef18 	.word	0x0800ef18
 80027f8:	0800ef24 	.word	0x0800ef24
 80027fc:	0800ef30 	.word	0x0800ef30
 8002800:	0800ef3c 	.word	0x0800ef3c
 8002804:	0800ef48 	.word	0x0800ef48

08002808 <MarkAsReadData_SIM>:
				 ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, 1000);

}

void MarkAsReadData_SIM(void)
{
 8002808:	b480      	push	{r7}
 800280a:	af00      	add	r7, sp, #0
	tail = head;
 800280c:	4b03      	ldr	r3, [pc, #12]	; (800281c <MarkAsReadData_SIM+0x14>)
 800280e:	881a      	ldrh	r2, [r3, #0]
 8002810:	4b03      	ldr	r3, [pc, #12]	; (8002820 <MarkAsReadData_SIM+0x18>)
 8002812:	801a      	strh	r2, [r3, #0]
}
 8002814:	bf00      	nop
 8002816:	46bd      	mov	sp, r7
 8002818:	bc80      	pop	{r7}
 800281a:	4770      	bx	lr
 800281c:	20000f5c 	.word	0x20000f5c
 8002820:	20000f5e 	.word	0x20000f5e

08002824 <getAfterword>:

uint16_t getAfterword(uint8_t *srcBuffer, uint16_t srcBufferlen, uint8_t *word, uint8_t *getBuffer)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b086      	sub	sp, #24
 8002828:	af00      	add	r7, sp, #0
 800282a:	60f8      	str	r0, [r7, #12]
 800282c:	607a      	str	r2, [r7, #4]
 800282e:	603b      	str	r3, [r7, #0]
 8002830:	460b      	mov	r3, r1
 8002832:	817b      	strh	r3, [r7, #10]
	uint16_t remainlen = 0;
 8002834:	2300      	movs	r3, #0
 8002836:	82fb      	strh	r3, [r7, #22]
	uint8_t *currPOS = isWordinBuff(srcBuffer, srcBufferlen, word);
 8002838:	897b      	ldrh	r3, [r7, #10]
 800283a:	687a      	ldr	r2, [r7, #4]
 800283c:	4619      	mov	r1, r3
 800283e:	68f8      	ldr	r0, [r7, #12]
 8002840:	f002 fcd8 	bl	80051f4 <isWordinBuff>
 8002844:	6138      	str	r0, [r7, #16]
	if ( currPOS == NULL ) return	0;
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d101      	bne.n	8002850 <getAfterword+0x2c>
 800284c:	2300      	movs	r3, #0
 800284e:	e015      	b.n	800287c <getAfterword+0x58>
	currPOS += strlen((char*)word);
 8002850:	6878      	ldr	r0, [r7, #4]
 8002852:	f7fd fc85 	bl	8000160 <strlen>
 8002856:	4602      	mov	r2, r0
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	4413      	add	r3, r2
 800285c:	613b      	str	r3, [r7, #16]
	remainlen = getRemainsize(currPOS, srcBuffer, srcBufferlen);
 800285e:	897b      	ldrh	r3, [r7, #10]
 8002860:	461a      	mov	r2, r3
 8002862:	68f9      	ldr	r1, [r7, #12]
 8002864:	6938      	ldr	r0, [r7, #16]
 8002866:	f002 fd44 	bl	80052f2 <getRemainsize>
 800286a:	4603      	mov	r3, r0
 800286c:	82fb      	strh	r3, [r7, #22]
	memcpy(getBuffer, currPOS, remainlen);
 800286e:	8afb      	ldrh	r3, [r7, #22]
 8002870:	461a      	mov	r2, r3
 8002872:	6939      	ldr	r1, [r7, #16]
 8002874:	6838      	ldr	r0, [r7, #0]
 8002876:	f009 fd29 	bl	800c2cc <memcpy>
	return remainlen;
 800287a:	8afb      	ldrh	r3, [r7, #22]
}
 800287c:	4618      	mov	r0, r3
 800287e:	3718      	adds	r7, #24
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}

08002884 <stringIDtoHexID>:

uint16_t stringIDtoHexID (uint8_t *stringIDbuffer, uint8_t *hexIDbuffer, const char *separator, ID_t idtype)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b086      	sub	sp, #24
 8002888:	af00      	add	r7, sp, #0
 800288a:	60f8      	str	r0, [r7, #12]
 800288c:	60b9      	str	r1, [r7, #8]
 800288e:	607a      	str	r2, [r7, #4]
 8002890:	70fb      	strb	r3, [r7, #3]
	uint8_t *token = (uint8_t*)strtok((char*)stringIDbuffer, separator);
 8002892:	6879      	ldr	r1, [r7, #4]
 8002894:	68f8      	ldr	r0, [r7, #12]
 8002896:	f00a f8cb 	bl	800ca30 <strtok>
 800289a:	6178      	str	r0, [r7, #20]
	uint16_t hexbufferlen = 0;
 800289c:	2300      	movs	r3, #0
 800289e:	827b      	strh	r3, [r7, #18]

	while (token != NULL)	{
 80028a0:	e01b      	b.n	80028da <stringIDtoHexID+0x56>
		uint16_t tmp = atoi((char*)token);
 80028a2:	6978      	ldr	r0, [r7, #20]
 80028a4:	f009 fbb4 	bl	800c010 <atoi>
 80028a8:	4603      	mov	r3, r0
 80028aa:	823b      	strh	r3, [r7, #16]
		if ( validationID(tmp, idtype) )	{
 80028ac:	78fa      	ldrb	r2, [r7, #3]
 80028ae:	8a3b      	ldrh	r3, [r7, #16]
 80028b0:	4611      	mov	r1, r2
 80028b2:	4618      	mov	r0, r3
 80028b4:	f002 ff7c 	bl	80057b0 <validationID>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d008      	beq.n	80028d0 <stringIDtoHexID+0x4c>
			hexIDbuffer[hexbufferlen++] = tmp;
 80028be:	8a7b      	ldrh	r3, [r7, #18]
 80028c0:	1c5a      	adds	r2, r3, #1
 80028c2:	827a      	strh	r2, [r7, #18]
 80028c4:	461a      	mov	r2, r3
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	4413      	add	r3, r2
 80028ca:	8a3a      	ldrh	r2, [r7, #16]
 80028cc:	b2d2      	uxtb	r2, r2
 80028ce:	701a      	strb	r2, [r3, #0]
		}
		token = (uint8_t*)strtok(NULL, separator);
 80028d0:	6879      	ldr	r1, [r7, #4]
 80028d2:	2000      	movs	r0, #0
 80028d4:	f00a f8ac 	bl	800ca30 <strtok>
 80028d8:	6178      	str	r0, [r7, #20]
	while (token != NULL)	{
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d1e0      	bne.n	80028a2 <stringIDtoHexID+0x1e>
	}
	return hexbufferlen;
 80028e0:	8a7b      	ldrh	r3, [r7, #18]
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3718      	adds	r7, #24
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
	...

080028ec <SMS_getPhonenumb>:
	getBetween((uint8_t*)" ", (uint8_t*)",", contentbuffer, contentlen, indexbuffer);
	return atoi((char*)indexbuffer);
}

uint8_t SMS_getPhonenumb (uint8_t *SMSbuffer, uint16_t SMS_bufferlen, uint8_t *Phonenumb_buffer )
{
 80028ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80028f0:	b08b      	sub	sp, #44	; 0x2c
 80028f2:	af02      	add	r7, sp, #8
 80028f4:	60f8      	str	r0, [r7, #12]
 80028f6:	460b      	mov	r3, r1
 80028f8:	607a      	str	r2, [r7, #4]
 80028fa:	817b      	strh	r3, [r7, #10]
 80028fc:	466b      	mov	r3, sp
 80028fe:	461e      	mov	r6, r3
	uint8_t contentbuffer[SMS_bufferlen];
 8002900:	8979      	ldrh	r1, [r7, #10]
 8002902:	460b      	mov	r3, r1
 8002904:	3b01      	subs	r3, #1
 8002906:	61bb      	str	r3, [r7, #24]
 8002908:	b28b      	uxth	r3, r1
 800290a:	2200      	movs	r2, #0
 800290c:	4698      	mov	r8, r3
 800290e:	4691      	mov	r9, r2
 8002910:	f04f 0200 	mov.w	r2, #0
 8002914:	f04f 0300 	mov.w	r3, #0
 8002918:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800291c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002920:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002924:	b28b      	uxth	r3, r1
 8002926:	2200      	movs	r2, #0
 8002928:	461c      	mov	r4, r3
 800292a:	4615      	mov	r5, r2
 800292c:	f04f 0200 	mov.w	r2, #0
 8002930:	f04f 0300 	mov.w	r3, #0
 8002934:	00eb      	lsls	r3, r5, #3
 8002936:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800293a:	00e2      	lsls	r2, r4, #3
 800293c:	460b      	mov	r3, r1
 800293e:	3307      	adds	r3, #7
 8002940:	08db      	lsrs	r3, r3, #3
 8002942:	00db      	lsls	r3, r3, #3
 8002944:	ebad 0d03 	sub.w	sp, sp, r3
 8002948:	ab02      	add	r3, sp, #8
 800294a:	3300      	adds	r3, #0
 800294c:	617b      	str	r3, [r7, #20]
	uint16_t contentlen = getAfterword(SMSbuffer, SMS_bufferlen, (uint8_t*)"+CMGL: ", contentbuffer);
 800294e:	8979      	ldrh	r1, [r7, #10]
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	4a13      	ldr	r2, [pc, #76]	; (80029a0 <SMS_getPhonenumb+0xb4>)
 8002954:	68f8      	ldr	r0, [r7, #12]
 8002956:	f7ff ff65 	bl	8002824 <getAfterword>
 800295a:	4603      	mov	r3, r0
 800295c:	83fb      	strh	r3, [r7, #30]
	if (!contentlen) {
 800295e:	8bfb      	ldrh	r3, [r7, #30]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d107      	bne.n	8002974 <SMS_getPhonenumb+0x88>
		contentlen = getAfterword(SMSbuffer, SMS_bufferlen, (uint8_t*)"+CMGR: ", contentbuffer);
 8002964:	8979      	ldrh	r1, [r7, #10]
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	4a0e      	ldr	r2, [pc, #56]	; (80029a4 <SMS_getPhonenumb+0xb8>)
 800296a:	68f8      	ldr	r0, [r7, #12]
 800296c:	f7ff ff5a 	bl	8002824 <getAfterword>
 8002970:	4603      	mov	r3, r0
 8002972:	83fb      	strh	r3, [r7, #30]
	}
	if (!contentlen) return 0;
 8002974:	8bfb      	ldrh	r3, [r7, #30]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d101      	bne.n	800297e <SMS_getPhonenumb+0x92>
 800297a:	2300      	movs	r3, #0
 800297c:	e00a      	b.n	8002994 <SMS_getPhonenumb+0xa8>
//		currPOS = isWordinBuff(contentbuffer, contentlen, (uint8_t*)",");
//		if ( currPOS == NULL ) return	0;
//		remainlen = getRemainsize(currPOS, contentbuffer, contentlen);
//		currPOS++;
//	}
	return getBetween((uint8_t*)"+", (uint8_t*)"\"", contentbuffer, contentlen, Phonenumb_buffer);
 800297e:	8bfa      	ldrh	r2, [r7, #30]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	9300      	str	r3, [sp, #0]
 8002984:	4613      	mov	r3, r2
 8002986:	697a      	ldr	r2, [r7, #20]
 8002988:	4907      	ldr	r1, [pc, #28]	; (80029a8 <SMS_getPhonenumb+0xbc>)
 800298a:	4808      	ldr	r0, [pc, #32]	; (80029ac <SMS_getPhonenumb+0xc0>)
 800298c:	f002 fc5e 	bl	800524c <getBetween>
 8002990:	4603      	mov	r3, r0
 8002992:	b2db      	uxtb	r3, r3
 8002994:	46b5      	mov	sp, r6
}
 8002996:	4618      	mov	r0, r3
 8002998:	3724      	adds	r7, #36	; 0x24
 800299a:	46bd      	mov	sp, r7
 800299c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80029a0:	0800eea0 	.word	0x0800eea0
 80029a4:	0800ef7c 	.word	0x0800ef7c
 80029a8:	0800ef84 	.word	0x0800ef84
 80029ac:	0800ef88 	.word	0x0800ef88

080029b0 <SMS_getContent>:

uint16_t SMS_getContent (uint8_t *SMSbuffer, uint16_t SMS_bufferlen, uint8_t *Content_buffer )
{
 80029b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80029b4:	b08b      	sub	sp, #44	; 0x2c
 80029b6:	af02      	add	r7, sp, #8
 80029b8:	60f8      	str	r0, [r7, #12]
 80029ba:	460b      	mov	r3, r1
 80029bc:	607a      	str	r2, [r7, #4]
 80029be:	817b      	strh	r3, [r7, #10]
 80029c0:	466b      	mov	r3, sp
 80029c2:	461e      	mov	r6, r3
	uint8_t contentbuffer[SMS_bufferlen];
 80029c4:	8979      	ldrh	r1, [r7, #10]
 80029c6:	460b      	mov	r3, r1
 80029c8:	3b01      	subs	r3, #1
 80029ca:	61bb      	str	r3, [r7, #24]
 80029cc:	b28b      	uxth	r3, r1
 80029ce:	2200      	movs	r2, #0
 80029d0:	4698      	mov	r8, r3
 80029d2:	4691      	mov	r9, r2
 80029d4:	f04f 0200 	mov.w	r2, #0
 80029d8:	f04f 0300 	mov.w	r3, #0
 80029dc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80029e0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80029e4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80029e8:	b28b      	uxth	r3, r1
 80029ea:	2200      	movs	r2, #0
 80029ec:	461c      	mov	r4, r3
 80029ee:	4615      	mov	r5, r2
 80029f0:	f04f 0200 	mov.w	r2, #0
 80029f4:	f04f 0300 	mov.w	r3, #0
 80029f8:	00eb      	lsls	r3, r5, #3
 80029fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029fe:	00e2      	lsls	r2, r4, #3
 8002a00:	460b      	mov	r3, r1
 8002a02:	3307      	adds	r3, #7
 8002a04:	08db      	lsrs	r3, r3, #3
 8002a06:	00db      	lsls	r3, r3, #3
 8002a08:	ebad 0d03 	sub.w	sp, sp, r3
 8002a0c:	ab02      	add	r3, sp, #8
 8002a0e:	3300      	adds	r3, #0
 8002a10:	617b      	str	r3, [r7, #20]
	uint16_t contentlen = getAfterword(SMSbuffer, SMS_bufferlen, (uint8_t*)"+CMGL: ", contentbuffer);
 8002a12:	8979      	ldrh	r1, [r7, #10]
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	4a13      	ldr	r2, [pc, #76]	; (8002a64 <SMS_getContent+0xb4>)
 8002a18:	68f8      	ldr	r0, [r7, #12]
 8002a1a:	f7ff ff03 	bl	8002824 <getAfterword>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	83fb      	strh	r3, [r7, #30]
	if (!contentlen) {
 8002a22:	8bfb      	ldrh	r3, [r7, #30]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d107      	bne.n	8002a38 <SMS_getContent+0x88>
		contentlen = getAfterword(SMSbuffer, SMS_bufferlen, (uint8_t*)"+CMGR: ", contentbuffer);
 8002a28:	8979      	ldrh	r1, [r7, #10]
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	4a0e      	ldr	r2, [pc, #56]	; (8002a68 <SMS_getContent+0xb8>)
 8002a2e:	68f8      	ldr	r0, [r7, #12]
 8002a30:	f7ff fef8 	bl	8002824 <getAfterword>
 8002a34:	4603      	mov	r3, r0
 8002a36:	83fb      	strh	r3, [r7, #30]
	}
	if (!contentlen) return 0;
 8002a38:	8bfb      	ldrh	r3, [r7, #30]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d101      	bne.n	8002a42 <SMS_getContent+0x92>
 8002a3e:	2300      	movs	r3, #0
 8002a40:	e009      	b.n	8002a56 <SMS_getContent+0xa6>

	return getBetween((uint8_t*)"\n", (uint8_t*)"\r", contentbuffer, contentlen, Content_buffer);
 8002a42:	8bfa      	ldrh	r2, [r7, #30]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	9300      	str	r3, [sp, #0]
 8002a48:	4613      	mov	r3, r2
 8002a4a:	697a      	ldr	r2, [r7, #20]
 8002a4c:	4907      	ldr	r1, [pc, #28]	; (8002a6c <SMS_getContent+0xbc>)
 8002a4e:	4808      	ldr	r0, [pc, #32]	; (8002a70 <SMS_getContent+0xc0>)
 8002a50:	f002 fbfc 	bl	800524c <getBetween>
 8002a54:	4603      	mov	r3, r0
 8002a56:	46b5      	mov	sp, r6
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3724      	adds	r7, #36	; 0x24
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002a62:	bf00      	nop
 8002a64:	0800eea0 	.word	0x0800eea0
 8002a68:	0800ef7c 	.word	0x0800ef7c
 8002a6c:	0800ef8c 	.word	0x0800ef8c
 8002a70:	0800ef90 	.word	0x0800ef90

08002a74 <SMSaddData>:




uint8_t SMSaddData(SMS_CMD_t smsCMD, uint8_t *contentbuffer, uint16_t contentlen, uint8_t *phonenumb)
{
 8002a74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002a78:	b093      	sub	sp, #76	; 0x4c
 8002a7a:	af02      	add	r7, sp, #8
 8002a7c:	60b9      	str	r1, [r7, #8]
 8002a7e:	607b      	str	r3, [r7, #4]
 8002a80:	4603      	mov	r3, r0
 8002a82:	73fb      	strb	r3, [r7, #15]
 8002a84:	4613      	mov	r3, r2
 8002a86:	81bb      	strh	r3, [r7, #12]
 8002a88:	466b      	mov	r3, sp
 8002a8a:	461e      	mov	r6, r3
	uint8_t *currPOS;
	uint16_t remainlen;
	uint8_t IDbuffer[contentlen];
 8002a8c:	89b9      	ldrh	r1, [r7, #12]
 8002a8e:	460b      	mov	r3, r1
 8002a90:	3b01      	subs	r3, #1
 8002a92:	627b      	str	r3, [r7, #36]	; 0x24
 8002a94:	b28b      	uxth	r3, r1
 8002a96:	2200      	movs	r2, #0
 8002a98:	4698      	mov	r8, r3
 8002a9a:	4691      	mov	r9, r2
 8002a9c:	f04f 0200 	mov.w	r2, #0
 8002aa0:	f04f 0300 	mov.w	r3, #0
 8002aa4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002aa8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002aac:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002ab0:	b28b      	uxth	r3, r1
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	461c      	mov	r4, r3
 8002ab6:	4615      	mov	r5, r2
 8002ab8:	f04f 0200 	mov.w	r2, #0
 8002abc:	f04f 0300 	mov.w	r3, #0
 8002ac0:	00eb      	lsls	r3, r5, #3
 8002ac2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ac6:	00e2      	lsls	r2, r4, #3
 8002ac8:	460b      	mov	r3, r1
 8002aca:	3307      	adds	r3, #7
 8002acc:	08db      	lsrs	r3, r3, #3
 8002ace:	00db      	lsls	r3, r3, #3
 8002ad0:	ebad 0d03 	sub.w	sp, sp, r3
 8002ad4:	ab02      	add	r3, sp, #8
 8002ad6:	3300      	adds	r3, #0
 8002ad8:	623b      	str	r3, [r7, #32]
	uint8_t Timebuffer[10];
	uint16_t time_delay;
	uint16_t datalen = 0;
 8002ada:	2300      	movs	r3, #0
 8002adc:	877b      	strh	r3, [r7, #58]	; 0x3a
	uint8_t phonenumblen = strlen((char*)phonenumb);
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f7fd fb3e 	bl	8000160 <strlen>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	77fb      	strb	r3, [r7, #31]

	uint8_t *Detect_msgType;
	SMS_request_t *Detect_Request;
	uint8_t getIDflag = 0;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t getTimeflag = 0;
 8002aee:	2300      	movs	r3, #0
 8002af0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint8_t getSflag = 0;
 8002af4:	2300      	movs	r3, #0
 8002af6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	ID_t idtype = ID_STATION;
 8002afa:	2301      	movs	r3, #1
 8002afc:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	switch (smsCMD)	{
 8002b00:	7bfb      	ldrb	r3, [r7, #15]
 8002b02:	2b07      	cmp	r3, #7
 8002b04:	d864      	bhi.n	8002bd0 <SMSaddData+0x15c>
 8002b06:	a201      	add	r2, pc, #4	; (adr r2, 8002b0c <SMSaddData+0x98>)
 8002b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b0c:	08002b2d 	.word	0x08002b2d
 8002b10:	08002b43 	.word	0x08002b43
 8002b14:	08002b85 	.word	0x08002b85
 8002b18:	08002b6f 	.word	0x08002b6f
 8002b1c:	08002b59 	.word	0x08002b59
 8002b20:	08002b95 	.word	0x08002b95
 8002b24:	08002bb5 	.word	0x08002bb5
 8002b28:	08002b9f 	.word	0x08002b9f
		case SMS_CMD_CTRL_ON:
			Detect_msgType = (uint8_t*)SMS_MSG_CTRL_ON;
 8002b2c:	4b75      	ldr	r3, [pc, #468]	; (8002d04 <SMSaddData+0x290>)
 8002b2e:	63fb      	str	r3, [r7, #60]	; 0x3c
			Detect_Request = &mySIM.sms.CtrlON;
 8002b30:	4b75      	ldr	r3, [pc, #468]	; (8002d08 <SMSaddData+0x294>)
 8002b32:	633b      	str	r3, [r7, #48]	; 0x30
			getIDflag = 1;
 8002b34:	2301      	movs	r3, #1
 8002b36:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			getTimeflag = 1;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			break;
 8002b40:	e047      	b.n	8002bd2 <SMSaddData+0x15e>
		case SMS_CMD_CTRL_OFF:
			Detect_msgType = (uint8_t*)SMS_MSG_CTRL_OFF;
 8002b42:	4b72      	ldr	r3, [pc, #456]	; (8002d0c <SMSaddData+0x298>)
 8002b44:	63fb      	str	r3, [r7, #60]	; 0x3c
			Detect_Request = &mySIM.sms.CtrlOFF;
 8002b46:	4b72      	ldr	r3, [pc, #456]	; (8002d10 <SMSaddData+0x29c>)
 8002b48:	633b      	str	r3, [r7, #48]	; 0x30
			getIDflag = 1;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			getTimeflag = 1;
 8002b50:	2301      	movs	r3, #1
 8002b52:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			break;
 8002b56:	e03c      	b.n	8002bd2 <SMSaddData+0x15e>
		case SMS_CMD_CTRL_DEC:
			Detect_msgType = (uint8_t*)SMS_MSG_CTRL_DEC;
 8002b58:	4b6e      	ldr	r3, [pc, #440]	; (8002d14 <SMSaddData+0x2a0>)
 8002b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
			Detect_Request = &mySIM.sms.CtrlDEC;
 8002b5c:	4b6e      	ldr	r3, [pc, #440]	; (8002d18 <SMSaddData+0x2a4>)
 8002b5e:	633b      	str	r3, [r7, #48]	; 0x30
			getIDflag = 1;
 8002b60:	2301      	movs	r3, #1
 8002b62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			getTimeflag = 1;
 8002b66:	2301      	movs	r3, #1
 8002b68:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			break;
 8002b6c:	e031      	b.n	8002bd2 <SMSaddData+0x15e>
		case SMS_CMD_CTRL_INC:
			Detect_msgType = (uint8_t*)SMS_MSG_CTRL_INC;
 8002b6e:	4b6b      	ldr	r3, [pc, #428]	; (8002d1c <SMSaddData+0x2a8>)
 8002b70:	63fb      	str	r3, [r7, #60]	; 0x3c
			Detect_Request = &mySIM.sms.CtrlINC;
 8002b72:	4b6b      	ldr	r3, [pc, #428]	; (8002d20 <SMSaddData+0x2ac>)
 8002b74:	633b      	str	r3, [r7, #48]	; 0x30
			getIDflag = 1;
 8002b76:	2301      	movs	r3, #1
 8002b78:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			getTimeflag = 1;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			break;
 8002b82:	e026      	b.n	8002bd2 <SMSaddData+0x15e>
		case SMS_CMD_CTRL_CALIB:
			Detect_msgType = (uint8_t*)SMS_MSG_CTRL_CALIB;
 8002b84:	4b67      	ldr	r3, [pc, #412]	; (8002d24 <SMSaddData+0x2b0>)
 8002b86:	63fb      	str	r3, [r7, #60]	; 0x3c
			Detect_Request = &mySIM.sms.CtrlCALIB;
 8002b88:	4b67      	ldr	r3, [pc, #412]	; (8002d28 <SMSaddData+0x2b4>)
 8002b8a:	633b      	str	r3, [r7, #48]	; 0x30
			getTimeflag = 1;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			break;
 8002b92:	e01e      	b.n	8002bd2 <SMSaddData+0x15e>
		case SMS_CMD_GET_STATUS:
			Detect_msgType = (uint8_t*)SMS_MSG_GET_STATUS;
 8002b94:	4b65      	ldr	r3, [pc, #404]	; (8002d2c <SMSaddData+0x2b8>)
 8002b96:	63fb      	str	r3, [r7, #60]	; 0x3c
			Detect_Request = &mySIM.sms.GetStatus;
 8002b98:	4b65      	ldr	r3, [pc, #404]	; (8002d30 <SMSaddData+0x2bc>)
 8002b9a:	633b      	str	r3, [r7, #48]	; 0x30
			break;
 8002b9c:	e019      	b.n	8002bd2 <SMSaddData+0x15e>
		case SMS_CMD_GET_STATION:
			Detect_msgType = (uint8_t*)SMS_MSG_GET_STATION;
 8002b9e:	4b65      	ldr	r3, [pc, #404]	; (8002d34 <SMSaddData+0x2c0>)
 8002ba0:	63fb      	str	r3, [r7, #60]	; 0x3c
			Detect_Request = &mySIM.sms.GetStation;
 8002ba2:	4b65      	ldr	r3, [pc, #404]	; (8002d38 <SMSaddData+0x2c4>)
 8002ba4:	633b      	str	r3, [r7, #48]	; 0x30
			getIDflag = 1;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			getSflag = 1;
 8002bac:	2301      	movs	r3, #1
 8002bae:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			break;
 8002bb2:	e00e      	b.n	8002bd2 <SMSaddData+0x15e>
		case SMS_CMD_GET_SENSOR:
			Detect_msgType = (uint8_t*)SMS_MSG_GET_SENSOR;
 8002bb4:	4b61      	ldr	r3, [pc, #388]	; (8002d3c <SMSaddData+0x2c8>)
 8002bb6:	63fb      	str	r3, [r7, #60]	; 0x3c
			Detect_Request = &mySIM.sms.GetSensor;
 8002bb8:	4b61      	ldr	r3, [pc, #388]	; (8002d40 <SMSaddData+0x2cc>)
 8002bba:	633b      	str	r3, [r7, #48]	; 0x30
			getIDflag = 1;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			getSflag = 1;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			idtype = ID_SENSOR;
 8002bc8:	2302      	movs	r3, #2
 8002bca:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
			break;
 8002bce:	e000      	b.n	8002bd2 <SMSaddData+0x15e>
		default:
			break;
 8002bd0:	bf00      	nop
		}
	if (Detect_msgType == NULL)	return 0;
 8002bd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d101      	bne.n	8002bdc <SMSaddData+0x168>
 8002bd8:	2300      	movs	r3, #0
 8002bda:	e08c      	b.n	8002cf6 <SMSaddData+0x282>

	currPOS = isWordinBuff(contentbuffer, contentlen, (uint8_t*)Detect_msgType);
 8002bdc:	89bb      	ldrh	r3, [r7, #12]
 8002bde:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002be0:	4619      	mov	r1, r3
 8002be2:	68b8      	ldr	r0, [r7, #8]
 8002be4:	f002 fb06 	bl	80051f4 <isWordinBuff>
 8002be8:	6378      	str	r0, [r7, #52]	; 0x34
	if (currPOS == NULL) 	return 0;
 8002bea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d101      	bne.n	8002bf4 <SMSaddData+0x180>
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	e080      	b.n	8002cf6 <SMSaddData+0x282>

	remainlen = getRemainsize(currPOS, contentbuffer, contentlen);
 8002bf4:	89bb      	ldrh	r3, [r7, #12]
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	68b9      	ldr	r1, [r7, #8]
 8002bfa:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002bfc:	f002 fb79 	bl	80052f2 <getRemainsize>
 8002c00:	4603      	mov	r3, r0
 8002c02:	873b      	strh	r3, [r7, #56]	; 0x38

	/* Get ID list */
	if (getIDflag)	{
 8002c04:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d039      	beq.n	8002c80 <SMSaddData+0x20c>
		uint8_t tmplen;
		if (getSflag)	{
 8002c0c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d00c      	beq.n	8002c2e <SMSaddData+0x1ba>
			tmplen = getBetween((uint8_t*)":", (uint8_t*)";", currPOS, remainlen, IDbuffer);
 8002c14:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8002c16:	6a3b      	ldr	r3, [r7, #32]
 8002c18:	9300      	str	r3, [sp, #0]
 8002c1a:	4613      	mov	r3, r2
 8002c1c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c1e:	4949      	ldr	r1, [pc, #292]	; (8002d44 <SMSaddData+0x2d0>)
 8002c20:	4849      	ldr	r0, [pc, #292]	; (8002d48 <SMSaddData+0x2d4>)
 8002c22:	f002 fb13 	bl	800524c <getBetween>
 8002c26:	4603      	mov	r3, r0
 8002c28:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002c2c:	e00b      	b.n	8002c46 <SMSaddData+0x1d2>
		}
		else {
			tmplen = getBetween((uint8_t*)":", (uint8_t*)":", currPOS, remainlen, IDbuffer);
 8002c2e:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8002c30:	6a3b      	ldr	r3, [r7, #32]
 8002c32:	9300      	str	r3, [sp, #0]
 8002c34:	4613      	mov	r3, r2
 8002c36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c38:	4943      	ldr	r1, [pc, #268]	; (8002d48 <SMSaddData+0x2d4>)
 8002c3a:	4843      	ldr	r0, [pc, #268]	; (8002d48 <SMSaddData+0x2d4>)
 8002c3c:	f002 fb06 	bl	800524c <getBetween>
 8002c40:	4603      	mov	r3, r0
 8002c42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		}
		currPOS += strlen((char*)Detect_msgType) + tmplen + 1;
 8002c46:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002c48:	f7fd fa8a 	bl	8000160 <strlen>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002c52:	4413      	add	r3, r2
 8002c54:	3301      	adds	r3, #1
 8002c56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c58:	4413      	add	r3, r2
 8002c5a:	637b      	str	r3, [r7, #52]	; 0x34
		remainlen = getRemainsize(currPOS, contentbuffer, contentlen);
 8002c5c:	89bb      	ldrh	r3, [r7, #12]
 8002c5e:	461a      	mov	r2, r3
 8002c60:	68b9      	ldr	r1, [r7, #8]
 8002c62:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002c64:	f002 fb45 	bl	80052f2 <getRemainsize>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	873b      	strh	r3, [r7, #56]	; 0x38
		datalen = stringIDtoHexID(IDbuffer, Detect_Request->data, ",", idtype);
 8002c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c6e:	1d19      	adds	r1, r3, #4
 8002c70:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002c74:	4a35      	ldr	r2, [pc, #212]	; (8002d4c <SMSaddData+0x2d8>)
 8002c76:	6a38      	ldr	r0, [r7, #32]
 8002c78:	f7ff fe04 	bl	8002884 <stringIDtoHexID>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	877b      	strh	r3, [r7, #58]	; 0x3a
	}

	/* Get time delay*/
	if (getTimeflag)	{
 8002c80:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d01c      	beq.n	8002cc2 <SMSaddData+0x24e>
		getBetween((uint8_t*)":", (uint8_t*)";", currPOS, remainlen, Timebuffer);
 8002c88:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8002c8a:	f107 0310 	add.w	r3, r7, #16
 8002c8e:	9300      	str	r3, [sp, #0]
 8002c90:	4613      	mov	r3, r2
 8002c92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c94:	492b      	ldr	r1, [pc, #172]	; (8002d44 <SMSaddData+0x2d0>)
 8002c96:	482c      	ldr	r0, [pc, #176]	; (8002d48 <SMSaddData+0x2d4>)
 8002c98:	f002 fad8 	bl	800524c <getBetween>
		time_delay = atoi((char*)Timebuffer);
 8002c9c:	f107 0310 	add.w	r3, r7, #16
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f009 f9b5 	bl	800c010 <atoi>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	83bb      	strh	r3, [r7, #28]
		twobyte2buff(Detect_Request->data +datalen, time_delay);
 8002caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cac:	1d1a      	adds	r2, r3, #4
 8002cae:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8002cb0:	4413      	add	r3, r2
 8002cb2:	8bba      	ldrh	r2, [r7, #28]
 8002cb4:	4611      	mov	r1, r2
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f002 fb2e 	bl	8005318 <twobyte2buff>
		datalen += 2;
 8002cbc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8002cbe:	3302      	adds	r3, #2
 8002cc0:	877b      	strh	r3, [r7, #58]	; 0x3a
	}
	memcpy(Detect_Request->phonenumb, phonenumb, phonenumblen);
 8002cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cc4:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8002cc8:	7ffa      	ldrb	r2, [r7, #31]
 8002cca:	6879      	ldr	r1, [r7, #4]
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f009 fafd 	bl	800c2cc <memcpy>
	memcpy(Detect_Request->data + datalen, phonenumb, phonenumblen);
 8002cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cd4:	1d1a      	adds	r2, r3, #4
 8002cd6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8002cd8:	4413      	add	r3, r2
 8002cda:	7ffa      	ldrb	r2, [r7, #31]
 8002cdc:	6879      	ldr	r1, [r7, #4]
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f009 faf4 	bl	800c2cc <memcpy>
	datalen += phonenumblen;
 8002ce4:	7ffb      	ldrb	r3, [r7, #31]
 8002ce6:	b29a      	uxth	r2, r3
 8002ce8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8002cea:	4413      	add	r3, r2
 8002cec:	877b      	strh	r3, [r7, #58]	; 0x3a
	Detect_Request->datalength = datalen;
 8002cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cf0:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8002cf2:	805a      	strh	r2, [r3, #2]
	return 1;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	46b5      	mov	sp, r6
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3744      	adds	r7, #68	; 0x44
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002d02:	bf00      	nop
 8002d04:	0800ef94 	.word	0x0800ef94
 8002d08:	200013f8 	.word	0x200013f8
 8002d0c:	0800ef9c 	.word	0x0800ef9c
 8002d10:	2000150a 	.word	0x2000150a
 8002d14:	0800efa8 	.word	0x0800efa8
 8002d18:	20001840 	.word	0x20001840
 8002d1c:	0800efb4 	.word	0x0800efb4
 8002d20:	2000172e 	.word	0x2000172e
 8002d24:	0800efc0 	.word	0x0800efc0
 8002d28:	2000161c 	.word	0x2000161c
 8002d2c:	0800efcc 	.word	0x0800efcc
 8002d30:	20001952 	.word	0x20001952
 8002d34:	0800efdc 	.word	0x0800efdc
 8002d38:	20001b76 	.word	0x20001b76
 8002d3c:	0800efe8 	.word	0x0800efe8
 8002d40:	20001a64 	.word	0x20001a64
 8002d44:	0800eff4 	.word	0x0800eff4
 8002d48:	0800eff8 	.word	0x0800eff8
 8002d4c:	0800ef74 	.word	0x0800ef74

08002d50 <SMS_checkCMD>:
static uint8_t SMS_checkCMD(uint8_t *contentbuffer, uint16_t contentlen, uint8_t *phonenumb)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b086      	sub	sp, #24
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	60f8      	str	r0, [r7, #12]
 8002d58:	460b      	mov	r3, r1
 8002d5a:	607a      	str	r2, [r7, #4]
 8002d5c:	817b      	strh	r3, [r7, #10]
	uint8_t *currPOS;

	currPOS = isWordinBuff(contentbuffer, contentlen, (uint8_t*)SMS_MSG_CTRL_ON);
 8002d5e:	897b      	ldrh	r3, [r7, #10]
 8002d60:	4a8b      	ldr	r2, [pc, #556]	; (8002f90 <SMS_checkCMD+0x240>)
 8002d62:	4619      	mov	r1, r3
 8002d64:	68f8      	ldr	r0, [r7, #12]
 8002d66:	f002 fa45 	bl	80051f4 <isWordinBuff>
 8002d6a:	6178      	str	r0, [r7, #20]
	if (currPOS != NULL) 	{
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d018      	beq.n	8002da4 <SMS_checkCMD+0x54>
		if (checkSMSrequest(SMS_CMD_CTRL_ON)) return 2;
 8002d72:	2000      	movs	r0, #0
 8002d74:	f000 f9ee 	bl	8003154 <checkSMSrequest>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d001      	beq.n	8002d82 <SMS_checkCMD+0x32>
 8002d7e:	2302      	movs	r3, #2
 8002d80:	e101      	b.n	8002f86 <SMS_checkCMD+0x236>
		if ( !SMSaddData(SMS_CMD_CTRL_ON, contentbuffer, contentlen, phonenumb) ) return 0;
 8002d82:	897a      	ldrh	r2, [r7, #10]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	68f9      	ldr	r1, [r7, #12]
 8002d88:	2000      	movs	r0, #0
 8002d8a:	f7ff fe73 	bl	8002a74 <SMSaddData>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d101      	bne.n	8002d98 <SMS_checkCMD+0x48>
 8002d94:	2300      	movs	r3, #0
 8002d96:	e0f6      	b.n	8002f86 <SMS_checkCMD+0x236>
		// Trigger cmd flag
		triggerSMSrequest(SMS_CMD_CTRL_ON, FLAG_EN);
 8002d98:	2101      	movs	r1, #1
 8002d9a:	2000      	movs	r0, #0
 8002d9c:	f000 fa62 	bl	8003264 <triggerSMSrequest>
		return 1;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e0f0      	b.n	8002f86 <SMS_checkCMD+0x236>
	}

	currPOS = isWordinBuff(contentbuffer, contentlen, (uint8_t*)SMS_MSG_CTRL_OFF);
 8002da4:	897b      	ldrh	r3, [r7, #10]
 8002da6:	4a7b      	ldr	r2, [pc, #492]	; (8002f94 <SMS_checkCMD+0x244>)
 8002da8:	4619      	mov	r1, r3
 8002daa:	68f8      	ldr	r0, [r7, #12]
 8002dac:	f002 fa22 	bl	80051f4 <isWordinBuff>
 8002db0:	6178      	str	r0, [r7, #20]
	if (currPOS != NULL) 	{
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d018      	beq.n	8002dea <SMS_checkCMD+0x9a>
		if (checkSMSrequest(SMS_CMD_CTRL_OFF)) return 2;
 8002db8:	2001      	movs	r0, #1
 8002dba:	f000 f9cb 	bl	8003154 <checkSMSrequest>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d001      	beq.n	8002dc8 <SMS_checkCMD+0x78>
 8002dc4:	2302      	movs	r3, #2
 8002dc6:	e0de      	b.n	8002f86 <SMS_checkCMD+0x236>
		if ( !SMSaddData(SMS_CMD_CTRL_OFF, contentbuffer, contentlen, phonenumb) )	return 0;
 8002dc8:	897a      	ldrh	r2, [r7, #10]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	68f9      	ldr	r1, [r7, #12]
 8002dce:	2001      	movs	r0, #1
 8002dd0:	f7ff fe50 	bl	8002a74 <SMSaddData>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d101      	bne.n	8002dde <SMS_checkCMD+0x8e>
 8002dda:	2300      	movs	r3, #0
 8002ddc:	e0d3      	b.n	8002f86 <SMS_checkCMD+0x236>
		// Trigger cmd flag
		triggerSMSrequest(SMS_CMD_CTRL_OFF, FLAG_EN);
 8002dde:	2101      	movs	r1, #1
 8002de0:	2001      	movs	r0, #1
 8002de2:	f000 fa3f 	bl	8003264 <triggerSMSrequest>
		return 1;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e0cd      	b.n	8002f86 <SMS_checkCMD+0x236>
	}

	currPOS = isWordinBuff(contentbuffer, contentlen, (uint8_t*)SMS_MSG_CTRL_DEC);
 8002dea:	897b      	ldrh	r3, [r7, #10]
 8002dec:	4a6a      	ldr	r2, [pc, #424]	; (8002f98 <SMS_checkCMD+0x248>)
 8002dee:	4619      	mov	r1, r3
 8002df0:	68f8      	ldr	r0, [r7, #12]
 8002df2:	f002 f9ff 	bl	80051f4 <isWordinBuff>
 8002df6:	6178      	str	r0, [r7, #20]
	if (currPOS != NULL) 	{
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d018      	beq.n	8002e30 <SMS_checkCMD+0xe0>
		if (checkSMSrequest(SMS_CMD_CTRL_DEC)) return 2;
 8002dfe:	2004      	movs	r0, #4
 8002e00:	f000 f9a8 	bl	8003154 <checkSMSrequest>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d001      	beq.n	8002e0e <SMS_checkCMD+0xbe>
 8002e0a:	2302      	movs	r3, #2
 8002e0c:	e0bb      	b.n	8002f86 <SMS_checkCMD+0x236>
		if ( !SMSaddData(SMS_CMD_CTRL_DEC, contentbuffer, contentlen, phonenumb) )	return 0;
 8002e0e:	897a      	ldrh	r2, [r7, #10]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	68f9      	ldr	r1, [r7, #12]
 8002e14:	2004      	movs	r0, #4
 8002e16:	f7ff fe2d 	bl	8002a74 <SMSaddData>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d101      	bne.n	8002e24 <SMS_checkCMD+0xd4>
 8002e20:	2300      	movs	r3, #0
 8002e22:	e0b0      	b.n	8002f86 <SMS_checkCMD+0x236>
		// Trigger cmd flag
		triggerSMSrequest(SMS_CMD_CTRL_DEC, FLAG_EN);
 8002e24:	2101      	movs	r1, #1
 8002e26:	2004      	movs	r0, #4
 8002e28:	f000 fa1c 	bl	8003264 <triggerSMSrequest>
		return 1;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e0aa      	b.n	8002f86 <SMS_checkCMD+0x236>
	}

	currPOS = isWordinBuff(contentbuffer, contentlen, (uint8_t*)SMS_MSG_CTRL_INC);
 8002e30:	897b      	ldrh	r3, [r7, #10]
 8002e32:	4a5a      	ldr	r2, [pc, #360]	; (8002f9c <SMS_checkCMD+0x24c>)
 8002e34:	4619      	mov	r1, r3
 8002e36:	68f8      	ldr	r0, [r7, #12]
 8002e38:	f002 f9dc 	bl	80051f4 <isWordinBuff>
 8002e3c:	6178      	str	r0, [r7, #20]
	if (currPOS != NULL) 	{
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d013      	beq.n	8002e6c <SMS_checkCMD+0x11c>
		if (checkSMSrequest(SMS_CMD_CTRL_INC)) return 2;
 8002e44:	2003      	movs	r0, #3
 8002e46:	f000 f985 	bl	8003154 <checkSMSrequest>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d001      	beq.n	8002e54 <SMS_checkCMD+0x104>
 8002e50:	2302      	movs	r3, #2
 8002e52:	e098      	b.n	8002f86 <SMS_checkCMD+0x236>
		SMSaddData(SMS_CMD_CTRL_INC, contentbuffer, contentlen, phonenumb);
 8002e54:	897a      	ldrh	r2, [r7, #10]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	68f9      	ldr	r1, [r7, #12]
 8002e5a:	2003      	movs	r0, #3
 8002e5c:	f7ff fe0a 	bl	8002a74 <SMSaddData>
		// Trigger cmd flag
		triggerSMSrequest(SMS_CMD_CTRL_INC, FLAG_EN);
 8002e60:	2101      	movs	r1, #1
 8002e62:	2003      	movs	r0, #3
 8002e64:	f000 f9fe 	bl	8003264 <triggerSMSrequest>
		return 1;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e08c      	b.n	8002f86 <SMS_checkCMD+0x236>
	}

	currPOS = isWordinBuff(contentbuffer, contentlen, (uint8_t*)SMS_MSG_CTRL_CALIB);
 8002e6c:	897b      	ldrh	r3, [r7, #10]
 8002e6e:	4a4c      	ldr	r2, [pc, #304]	; (8002fa0 <SMS_checkCMD+0x250>)
 8002e70:	4619      	mov	r1, r3
 8002e72:	68f8      	ldr	r0, [r7, #12]
 8002e74:	f002 f9be 	bl	80051f4 <isWordinBuff>
 8002e78:	6178      	str	r0, [r7, #20]
	if (currPOS != NULL) 	{
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d018      	beq.n	8002eb2 <SMS_checkCMD+0x162>
		if (checkSMSrequest(SMS_CMD_CTRL_CALIB)) return 2;
 8002e80:	2002      	movs	r0, #2
 8002e82:	f000 f967 	bl	8003154 <checkSMSrequest>
 8002e86:	4603      	mov	r3, r0
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d001      	beq.n	8002e90 <SMS_checkCMD+0x140>
 8002e8c:	2302      	movs	r3, #2
 8002e8e:	e07a      	b.n	8002f86 <SMS_checkCMD+0x236>
		if ( !SMSaddData(SMS_CMD_CTRL_CALIB, contentbuffer, contentlen, phonenumb) )	return 0;
 8002e90:	897a      	ldrh	r2, [r7, #10]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	68f9      	ldr	r1, [r7, #12]
 8002e96:	2002      	movs	r0, #2
 8002e98:	f7ff fdec 	bl	8002a74 <SMSaddData>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d101      	bne.n	8002ea6 <SMS_checkCMD+0x156>
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	e06f      	b.n	8002f86 <SMS_checkCMD+0x236>
		// Trigger cmd flag
		triggerSMSrequest(SMS_CMD_CTRL_CALIB, FLAG_EN);
 8002ea6:	2101      	movs	r1, #1
 8002ea8:	2002      	movs	r0, #2
 8002eaa:	f000 f9db 	bl	8003264 <triggerSMSrequest>
		return 1;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e069      	b.n	8002f86 <SMS_checkCMD+0x236>
	}

	currPOS = isWordinBuff(contentbuffer, contentlen, (uint8_t*)SMS_MSG_GET_STATUS);
 8002eb2:	897b      	ldrh	r3, [r7, #10]
 8002eb4:	4a3b      	ldr	r2, [pc, #236]	; (8002fa4 <SMS_checkCMD+0x254>)
 8002eb6:	4619      	mov	r1, r3
 8002eb8:	68f8      	ldr	r0, [r7, #12]
 8002eba:	f002 f99b 	bl	80051f4 <isWordinBuff>
 8002ebe:	6178      	str	r0, [r7, #20]
	if (currPOS != NULL) 	{
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d018      	beq.n	8002ef8 <SMS_checkCMD+0x1a8>
		if (checkSMSrequest(SMS_CMD_GET_STATUS)) return 2;
 8002ec6:	2005      	movs	r0, #5
 8002ec8:	f000 f944 	bl	8003154 <checkSMSrequest>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d001      	beq.n	8002ed6 <SMS_checkCMD+0x186>
 8002ed2:	2302      	movs	r3, #2
 8002ed4:	e057      	b.n	8002f86 <SMS_checkCMD+0x236>
		if ( !SMSaddData(SMS_CMD_GET_STATUS, contentbuffer, contentlen, phonenumb) )	return 0;
 8002ed6:	897a      	ldrh	r2, [r7, #10]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	68f9      	ldr	r1, [r7, #12]
 8002edc:	2005      	movs	r0, #5
 8002ede:	f7ff fdc9 	bl	8002a74 <SMSaddData>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d101      	bne.n	8002eec <SMS_checkCMD+0x19c>
 8002ee8:	2300      	movs	r3, #0
 8002eea:	e04c      	b.n	8002f86 <SMS_checkCMD+0x236>
		// Trigger cmd flag
		triggerSMSrequest(SMS_CMD_GET_STATUS, FLAG_EN);
 8002eec:	2101      	movs	r1, #1
 8002eee:	2005      	movs	r0, #5
 8002ef0:	f000 f9b8 	bl	8003264 <triggerSMSrequest>
//		triggerSMSreturn(SMS_CMD_GET_STATUS, FLAG_EN);
		return 1;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e046      	b.n	8002f86 <SMS_checkCMD+0x236>
	}

	currPOS = isWordinBuff(contentbuffer, contentlen, (uint8_t*)SMS_MSG_GET_STATION);
 8002ef8:	897b      	ldrh	r3, [r7, #10]
 8002efa:	4a2b      	ldr	r2, [pc, #172]	; (8002fa8 <SMS_checkCMD+0x258>)
 8002efc:	4619      	mov	r1, r3
 8002efe:	68f8      	ldr	r0, [r7, #12]
 8002f00:	f002 f978 	bl	80051f4 <isWordinBuff>
 8002f04:	6178      	str	r0, [r7, #20]
	if (currPOS != NULL) 	{
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d018      	beq.n	8002f3e <SMS_checkCMD+0x1ee>
		if (checkSMSrequest(SMS_CMD_GET_STATION)) return 2;
 8002f0c:	2007      	movs	r0, #7
 8002f0e:	f000 f921 	bl	8003154 <checkSMSrequest>
 8002f12:	4603      	mov	r3, r0
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d001      	beq.n	8002f1c <SMS_checkCMD+0x1cc>
 8002f18:	2302      	movs	r3, #2
 8002f1a:	e034      	b.n	8002f86 <SMS_checkCMD+0x236>
		if ( !SMSaddData(SMS_CMD_GET_STATION, contentbuffer, contentlen, phonenumb) ) return 0;
 8002f1c:	897a      	ldrh	r2, [r7, #10]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	68f9      	ldr	r1, [r7, #12]
 8002f22:	2007      	movs	r0, #7
 8002f24:	f7ff fda6 	bl	8002a74 <SMSaddData>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d101      	bne.n	8002f32 <SMS_checkCMD+0x1e2>
 8002f2e:	2300      	movs	r3, #0
 8002f30:	e029      	b.n	8002f86 <SMS_checkCMD+0x236>
		// Trigger cmd flag
		triggerSMSrequest(SMS_CMD_GET_STATION, FLAG_EN);
 8002f32:	2101      	movs	r1, #1
 8002f34:	2007      	movs	r0, #7
 8002f36:	f000 f995 	bl	8003264 <triggerSMSrequest>
//		triggerSMSreturn(SMS_CMD_GET_STATION, FLAG_EN);
		return 1;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e023      	b.n	8002f86 <SMS_checkCMD+0x236>
	}

	currPOS = isWordinBuff(contentbuffer, contentlen, (uint8_t*)SMS_MSG_GET_SENSOR);
 8002f3e:	897b      	ldrh	r3, [r7, #10]
 8002f40:	4a1a      	ldr	r2, [pc, #104]	; (8002fac <SMS_checkCMD+0x25c>)
 8002f42:	4619      	mov	r1, r3
 8002f44:	68f8      	ldr	r0, [r7, #12]
 8002f46:	f002 f955 	bl	80051f4 <isWordinBuff>
 8002f4a:	6178      	str	r0, [r7, #20]
	if (currPOS != NULL) 	{
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d018      	beq.n	8002f84 <SMS_checkCMD+0x234>
		if (checkSMSrequest(SMS_CMD_GET_SENSOR)) return 2;
 8002f52:	2006      	movs	r0, #6
 8002f54:	f000 f8fe 	bl	8003154 <checkSMSrequest>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d001      	beq.n	8002f62 <SMS_checkCMD+0x212>
 8002f5e:	2302      	movs	r3, #2
 8002f60:	e011      	b.n	8002f86 <SMS_checkCMD+0x236>
		if ( !SMSaddData(SMS_CMD_GET_SENSOR, contentbuffer, contentlen, phonenumb) ) return 0;
 8002f62:	897a      	ldrh	r2, [r7, #10]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	68f9      	ldr	r1, [r7, #12]
 8002f68:	2006      	movs	r0, #6
 8002f6a:	f7ff fd83 	bl	8002a74 <SMSaddData>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d101      	bne.n	8002f78 <SMS_checkCMD+0x228>
 8002f74:	2300      	movs	r3, #0
 8002f76:	e006      	b.n	8002f86 <SMS_checkCMD+0x236>
		// Trigger cmd flag
		triggerSMSrequest(SMS_CMD_GET_SENSOR, FLAG_EN);
 8002f78:	2101      	movs	r1, #1
 8002f7a:	2006      	movs	r0, #6
 8002f7c:	f000 f972 	bl	8003264 <triggerSMSrequest>
//		triggerSMSreturn(SMS_CMD_GET_SENSOR, FLAG_EN);
		return 1;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e000      	b.n	8002f86 <SMS_checkCMD+0x236>
	}
	return 0;
 8002f84:	2300      	movs	r3, #0
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3718      	adds	r7, #24
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	0800ef94 	.word	0x0800ef94
 8002f94:	0800ef9c 	.word	0x0800ef9c
 8002f98:	0800efa8 	.word	0x0800efa8
 8002f9c:	0800efb4 	.word	0x0800efb4
 8002fa0:	0800efc0 	.word	0x0800efc0
 8002fa4:	0800efcc 	.word	0x0800efcc
 8002fa8:	0800efdc 	.word	0x0800efdc
 8002fac:	0800efe8 	.word	0x0800efe8

08002fb0 <SMS_read>:

uint8_t SMS_read()
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b082      	sub	sp, #8
 8002fb4:	af02      	add	r7, sp, #8
	if ( SIM_sendCMD((uint8_t*)"AT+CMGL=\"REC UNREAD\"", (uint8_t*)"OK",ENABLE_SIM_CHECKRES,
 8002fb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002fba:	9300      	str	r3, [sp, #0]
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	490d      	ldr	r1, [pc, #52]	; (8002ff8 <SMS_read+0x48>)
 8002fc2:	480e      	ldr	r0, [pc, #56]	; (8002ffc <SMS_read+0x4c>)
 8002fc4:	f7ff fb52 	bl	800266c <SIM_sendCMD>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d010      	beq.n	8002ff0 <SMS_read+0x40>
			ENABLE_MARKASREAD, 1000) != SIM_RES_MSG )	{
		if ( SIM_sendCMD((uint8_t*)"AT+CMGL=\"REC UNREAD\"", (uint8_t*)"OK",ENABLE_SIM_CHECKRES,
 8002fce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002fd2:	9300      	str	r3, [sp, #0]
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	4907      	ldr	r1, [pc, #28]	; (8002ff8 <SMS_read+0x48>)
 8002fda:	4808      	ldr	r0, [pc, #32]	; (8002ffc <SMS_read+0x4c>)
 8002fdc:	f7ff fb46 	bl	800266c <SIM_sendCMD>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d002      	beq.n	8002fec <SMS_read+0x3c>
					ENABLE_MARKASREAD, 1000) != SIM_RES_MSG )
		newSMS = 0;
 8002fe6:	4b06      	ldr	r3, [pc, #24]	; (8003000 <SMS_read+0x50>)
 8002fe8:	2200      	movs	r2, #0
 8002fea:	701a      	strb	r2, [r3, #0]
		return 0;
 8002fec:	2300      	movs	r3, #0
 8002fee:	e000      	b.n	8002ff2 <SMS_read+0x42>
	}
	return 1;
 8002ff0:	2301      	movs	r3, #1
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}
 8002ff8:	0800ef50 	.word	0x0800ef50
 8002ffc:	0800ef54 	.word	0x0800ef54
 8003000:	20000f60 	.word	0x20000f60

08003004 <processingSMS>:
		return 0;
	}
	return 1;
}
uint8_t processingSMS(void)
{
 8003004:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003008:	b089      	sub	sp, #36	; 0x24
 800300a:	af02      	add	r7, sp, #8
 800300c:	466b      	mov	r3, sp
 800300e:	461e      	mov	r6, r3

	if (!newSMS) return 0;
 8003010:	4b4b      	ldr	r3, [pc, #300]	; (8003140 <processingSMS+0x13c>)
 8003012:	781b      	ldrb	r3, [r3, #0]
 8003014:	b2db      	uxtb	r3, r3
 8003016:	2b00      	cmp	r3, #0
 8003018:	d101      	bne.n	800301e <processingSMS+0x1a>
 800301a:	2300      	movs	r3, #0
 800301c:	e08a      	b.n	8003134 <processingSMS+0x130>

//	static uint8_t readagain = 0;
//	static uint16_t SMSindex = 0;

	MarkAsReadData_SIM();
 800301e:	f7ff fbf3 	bl	8002808 <MarkAsReadData_SIM>
//	if ( readagain ) 	{
//		SMS_readAgain(SMSindex);
//	}
//	else 	{
		SMS_read();
 8003022:	f7ff ffc5 	bl	8002fb0 <SMS_read>
//		newSMS = 0;
//		return 0;
//	}
	//Get phone number
	uint8_t phonenumb[PHONENUMB_LEN];
	if ( !SMS_getPhonenumb(SMS_Rxbuff, SMS_len, phonenumb) ) {
 8003026:	4b47      	ldr	r3, [pc, #284]	; (8003144 <processingSMS+0x140>)
 8003028:	881b      	ldrh	r3, [r3, #0]
 800302a:	463a      	mov	r2, r7
 800302c:	4619      	mov	r1, r3
 800302e:	4846      	ldr	r0, [pc, #280]	; (8003148 <processingSMS+0x144>)
 8003030:	f7ff fc5c 	bl	80028ec <SMS_getPhonenumb>
 8003034:	4603      	mov	r3, r0
 8003036:	2b00      	cmp	r3, #0
 8003038:	d10d      	bne.n	8003056 <processingSMS+0x52>
		SIM_sendCMD((uint8_t*)"AT+CMGD=1,1", (uint8_t*)"OK",
 800303a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800303e:	9300      	str	r3, [sp, #0]
 8003040:	2301      	movs	r3, #1
 8003042:	2201      	movs	r2, #1
 8003044:	4941      	ldr	r1, [pc, #260]	; (800314c <processingSMS+0x148>)
 8003046:	4842      	ldr	r0, [pc, #264]	; (8003150 <processingSMS+0x14c>)
 8003048:	f7ff fb10 	bl	800266c <SIM_sendCMD>
					ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, 1000);
		newSMS = 0;
 800304c:	4b3c      	ldr	r3, [pc, #240]	; (8003140 <processingSMS+0x13c>)
 800304e:	2200      	movs	r2, #0
 8003050:	701a      	strb	r2, [r3, #0]
		return 0;
 8003052:	2300      	movs	r3, #0
 8003054:	e06e      	b.n	8003134 <processingSMS+0x130>
	}
	//Get SMS content
	uint8_t tmpSMSdatabuffer[SMS_len];
 8003056:	4b3b      	ldr	r3, [pc, #236]	; (8003144 <processingSMS+0x140>)
 8003058:	8819      	ldrh	r1, [r3, #0]
 800305a:	460b      	mov	r3, r1
 800305c:	3b01      	subs	r3, #1
 800305e:	617b      	str	r3, [r7, #20]
 8003060:	b28b      	uxth	r3, r1
 8003062:	2200      	movs	r2, #0
 8003064:	4698      	mov	r8, r3
 8003066:	4691      	mov	r9, r2
 8003068:	f04f 0200 	mov.w	r2, #0
 800306c:	f04f 0300 	mov.w	r3, #0
 8003070:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003074:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003078:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800307c:	b28b      	uxth	r3, r1
 800307e:	2200      	movs	r2, #0
 8003080:	461c      	mov	r4, r3
 8003082:	4615      	mov	r5, r2
 8003084:	f04f 0200 	mov.w	r2, #0
 8003088:	f04f 0300 	mov.w	r3, #0
 800308c:	00eb      	lsls	r3, r5, #3
 800308e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003092:	00e2      	lsls	r2, r4, #3
 8003094:	460b      	mov	r3, r1
 8003096:	3307      	adds	r3, #7
 8003098:	08db      	lsrs	r3, r3, #3
 800309a:	00db      	lsls	r3, r3, #3
 800309c:	ebad 0d03 	sub.w	sp, sp, r3
 80030a0:	ab02      	add	r3, sp, #8
 80030a2:	3300      	adds	r3, #0
 80030a4:	613b      	str	r3, [r7, #16]
	memset(tmpSMSdatabuffer, 0, SMS_len);
 80030a6:	4b27      	ldr	r3, [pc, #156]	; (8003144 <processingSMS+0x140>)
 80030a8:	881b      	ldrh	r3, [r3, #0]
 80030aa:	461a      	mov	r2, r3
 80030ac:	2100      	movs	r1, #0
 80030ae:	6938      	ldr	r0, [r7, #16]
 80030b0:	f009 f91a 	bl	800c2e8 <memset>
	uint16_t contentlen = SMS_getContent(SMS_Rxbuff, SMS_len, tmpSMSdatabuffer);
 80030b4:	4b23      	ldr	r3, [pc, #140]	; (8003144 <processingSMS+0x140>)
 80030b6:	881b      	ldrh	r3, [r3, #0]
 80030b8:	693a      	ldr	r2, [r7, #16]
 80030ba:	4619      	mov	r1, r3
 80030bc:	4822      	ldr	r0, [pc, #136]	; (8003148 <processingSMS+0x144>)
 80030be:	f7ff fc77 	bl	80029b0 <SMS_getContent>
 80030c2:	4603      	mov	r3, r0
 80030c4:	81fb      	strh	r3, [r7, #14]
//	MQTT_publish((uint8_t*)TOPIC_PUB , tmpSMSdatabuffer, contentlen);
	if ( !contentlen)	{
 80030c6:	89fb      	ldrh	r3, [r7, #14]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d10d      	bne.n	80030e8 <processingSMS+0xe4>
		SIM_sendCMD((uint8_t*)"AT+CMGD=1,1", (uint8_t*)"OK",
 80030cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80030d0:	9300      	str	r3, [sp, #0]
 80030d2:	2301      	movs	r3, #1
 80030d4:	2201      	movs	r2, #1
 80030d6:	491d      	ldr	r1, [pc, #116]	; (800314c <processingSMS+0x148>)
 80030d8:	481d      	ldr	r0, [pc, #116]	; (8003150 <processingSMS+0x14c>)
 80030da:	f7ff fac7 	bl	800266c <SIM_sendCMD>
					ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, 1000);
		newSMS = 0;
 80030de:	4b18      	ldr	r3, [pc, #96]	; (8003140 <processingSMS+0x13c>)
 80030e0:	2200      	movs	r2, #0
 80030e2:	701a      	strb	r2, [r3, #0]
		return 0;
 80030e4:	2300      	movs	r3, #0
 80030e6:	e025      	b.n	8003134 <processingSMS+0x130>
	}
	//Check SMS command
	uint8_t checkres = SMS_checkCMD(tmpSMSdatabuffer, contentlen, phonenumb);
 80030e8:	463a      	mov	r2, r7
 80030ea:	89fb      	ldrh	r3, [r7, #14]
 80030ec:	4619      	mov	r1, r3
 80030ee:	6938      	ldr	r0, [r7, #16]
 80030f0:	f7ff fe2e 	bl	8002d50 <SMS_checkCMD>
 80030f4:	4603      	mov	r3, r0
 80030f6:	737b      	strb	r3, [r7, #13]
	if ( !checkres ) 	{
 80030f8:	7b7b      	ldrb	r3, [r7, #13]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d10d      	bne.n	800311a <processingSMS+0x116>
		SIM_sendCMD((uint8_t*)"AT+CMGD=1,1", (uint8_t*)"OK",
 80030fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003102:	9300      	str	r3, [sp, #0]
 8003104:	2301      	movs	r3, #1
 8003106:	2201      	movs	r2, #1
 8003108:	4910      	ldr	r1, [pc, #64]	; (800314c <processingSMS+0x148>)
 800310a:	4811      	ldr	r0, [pc, #68]	; (8003150 <processingSMS+0x14c>)
 800310c:	f7ff faae 	bl	800266c <SIM_sendCMD>
					ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, 1000);
		newSMS = 0;
 8003110:	4b0b      	ldr	r3, [pc, #44]	; (8003140 <processingSMS+0x13c>)
 8003112:	2200      	movs	r2, #0
 8003114:	701a      	strb	r2, [r3, #0]
		return 0;
 8003116:	2300      	movs	r3, #0
 8003118:	e00c      	b.n	8003134 <processingSMS+0x130>
	}
//	if ( checkres == 2 )	{
//		readagain = 1;
//	}
	SIM_sendCMD((uint8_t*)"AT+CMGD=1,1", (uint8_t*)"OK",
 800311a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800311e:	9300      	str	r3, [sp, #0]
 8003120:	2301      	movs	r3, #1
 8003122:	2201      	movs	r2, #1
 8003124:	4909      	ldr	r1, [pc, #36]	; (800314c <processingSMS+0x148>)
 8003126:	480a      	ldr	r0, [pc, #40]	; (8003150 <processingSMS+0x14c>)
 8003128:	f7ff faa0 	bl	800266c <SIM_sendCMD>
				ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, 1000);
	newSMS = 0;
 800312c:	4b04      	ldr	r3, [pc, #16]	; (8003140 <processingSMS+0x13c>)
 800312e:	2200      	movs	r2, #0
 8003130:	701a      	strb	r2, [r3, #0]

	return 1;
 8003132:	2301      	movs	r3, #1
 8003134:	46b5      	mov	sp, r6
}
 8003136:	4618      	mov	r0, r3
 8003138:	371c      	adds	r7, #28
 800313a:	46bd      	mov	sp, r7
 800313c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003140:	20000f60 	.word	0x20000f60
 8003144:	20000f62 	.word	0x20000f62
 8003148:	20000d98 	.word	0x20000d98
 800314c:	0800ef50 	.word	0x0800ef50
 8003150:	0800f008 	.word	0x0800f008

08003154 <checkSMSrequest>:



bool checkSMSrequest (SMS_CMD_t smsCMD)
{
 8003154:	b480      	push	{r7}
 8003156:	b085      	sub	sp, #20
 8003158:	af00      	add	r7, sp, #0
 800315a:	4603      	mov	r3, r0
 800315c:	71fb      	strb	r3, [r7, #7]
	bool res = false;
 800315e:	2300      	movs	r3, #0
 8003160:	73fb      	strb	r3, [r7, #15]
	switch (smsCMD)	{
 8003162:	79fb      	ldrb	r3, [r7, #7]
 8003164:	2b07      	cmp	r3, #7
 8003166:	d873      	bhi.n	8003250 <checkSMSrequest+0xfc>
 8003168:	a201      	add	r2, pc, #4	; (adr r2, 8003170 <checkSMSrequest+0x1c>)
 800316a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800316e:	bf00      	nop
 8003170:	08003191 	.word	0x08003191
 8003174:	080031a9 	.word	0x080031a9
 8003178:	080031f1 	.word	0x080031f1
 800317c:	080031d9 	.word	0x080031d9
 8003180:	080031c1 	.word	0x080031c1
 8003184:	08003209 	.word	0x08003209
 8003188:	08003239 	.word	0x08003239
 800318c:	08003221 	.word	0x08003221
		case SMS_CMD_CTRL_ON:
			res = mySIM.sms.CtrlON.requestflag ;
 8003190:	4b33      	ldr	r3, [pc, #204]	; (8003260 <checkSMSrequest+0x10c>)
 8003192:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 8003196:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800319a:	b2db      	uxtb	r3, r3
 800319c:	2b00      	cmp	r3, #0
 800319e:	bf14      	ite	ne
 80031a0:	2301      	movne	r3, #1
 80031a2:	2300      	moveq	r3, #0
 80031a4:	73fb      	strb	r3, [r7, #15]
			break;
 80031a6:	e054      	b.n	8003252 <checkSMSrequest+0xfe>
		case SMS_CMD_CTRL_OFF:
			res = mySIM.sms.CtrlOFF.requestflag ;
 80031a8:	4b2d      	ldr	r3, [pc, #180]	; (8003260 <checkSMSrequest+0x10c>)
 80031aa:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
 80031ae:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	bf14      	ite	ne
 80031b8:	2301      	movne	r3, #1
 80031ba:	2300      	moveq	r3, #0
 80031bc:	73fb      	strb	r3, [r7, #15]
			break;
 80031be:	e048      	b.n	8003252 <checkSMSrequest+0xfe>
		case SMS_CMD_CTRL_DEC:
			res = mySIM.sms.CtrlDEC.requestflag ;
 80031c0:	4b27      	ldr	r3, [pc, #156]	; (8003260 <checkSMSrequest+0x10c>)
 80031c2:	f893 35a8 	ldrb.w	r3, [r3, #1448]	; 0x5a8
 80031c6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	bf14      	ite	ne
 80031d0:	2301      	movne	r3, #1
 80031d2:	2300      	moveq	r3, #0
 80031d4:	73fb      	strb	r3, [r7, #15]
			break;
 80031d6:	e03c      	b.n	8003252 <checkSMSrequest+0xfe>
		case SMS_CMD_CTRL_INC:
			res = mySIM.sms.CtrlINC.requestflag ;
 80031d8:	4b21      	ldr	r3, [pc, #132]	; (8003260 <checkSMSrequest+0x10c>)
 80031da:	f893 3496 	ldrb.w	r3, [r3, #1174]	; 0x496
 80031de:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80031e2:	b2db      	uxtb	r3, r3
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	bf14      	ite	ne
 80031e8:	2301      	movne	r3, #1
 80031ea:	2300      	moveq	r3, #0
 80031ec:	73fb      	strb	r3, [r7, #15]
			break;
 80031ee:	e030      	b.n	8003252 <checkSMSrequest+0xfe>
		case SMS_CMD_CTRL_CALIB:
			res = mySIM.sms.CtrlCALIB.requestflag ;
 80031f0:	4b1b      	ldr	r3, [pc, #108]	; (8003260 <checkSMSrequest+0x10c>)
 80031f2:	f893 3384 	ldrb.w	r3, [r3, #900]	; 0x384
 80031f6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	bf14      	ite	ne
 8003200:	2301      	movne	r3, #1
 8003202:	2300      	moveq	r3, #0
 8003204:	73fb      	strb	r3, [r7, #15]
			break;
 8003206:	e024      	b.n	8003252 <checkSMSrequest+0xfe>
		case SMS_CMD_GET_STATUS:
			res = mySIM.sms.GetStatus.requestflag ;
 8003208:	4b15      	ldr	r3, [pc, #84]	; (8003260 <checkSMSrequest+0x10c>)
 800320a:	f893 36ba 	ldrb.w	r3, [r3, #1722]	; 0x6ba
 800320e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003212:	b2db      	uxtb	r3, r3
 8003214:	2b00      	cmp	r3, #0
 8003216:	bf14      	ite	ne
 8003218:	2301      	movne	r3, #1
 800321a:	2300      	moveq	r3, #0
 800321c:	73fb      	strb	r3, [r7, #15]
			break;
 800321e:	e018      	b.n	8003252 <checkSMSrequest+0xfe>
		case SMS_CMD_GET_STATION:
			res = mySIM.sms.GetStation.requestflag ;
 8003220:	4b0f      	ldr	r3, [pc, #60]	; (8003260 <checkSMSrequest+0x10c>)
 8003222:	f893 38de 	ldrb.w	r3, [r3, #2270]	; 0x8de
 8003226:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800322a:	b2db      	uxtb	r3, r3
 800322c:	2b00      	cmp	r3, #0
 800322e:	bf14      	ite	ne
 8003230:	2301      	movne	r3, #1
 8003232:	2300      	moveq	r3, #0
 8003234:	73fb      	strb	r3, [r7, #15]
			break;
 8003236:	e00c      	b.n	8003252 <checkSMSrequest+0xfe>
		case SMS_CMD_GET_SENSOR:
			res = mySIM.sms.GetSensor.requestflag ;
 8003238:	4b09      	ldr	r3, [pc, #36]	; (8003260 <checkSMSrequest+0x10c>)
 800323a:	f893 37cc 	ldrb.w	r3, [r3, #1996]	; 0x7cc
 800323e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003242:	b2db      	uxtb	r3, r3
 8003244:	2b00      	cmp	r3, #0
 8003246:	bf14      	ite	ne
 8003248:	2301      	movne	r3, #1
 800324a:	2300      	moveq	r3, #0
 800324c:	73fb      	strb	r3, [r7, #15]
			break;
 800324e:	e000      	b.n	8003252 <checkSMSrequest+0xfe>
		default:
			break;
 8003250:	bf00      	nop
	}
	return res;
 8003252:	7bfb      	ldrb	r3, [r7, #15]
}
 8003254:	4618      	mov	r0, r3
 8003256:	3714      	adds	r7, #20
 8003258:	46bd      	mov	sp, r7
 800325a:	bc80      	pop	{r7}
 800325c:	4770      	bx	lr
 800325e:	bf00      	nop
 8003260:	20001298 	.word	0x20001298

08003264 <triggerSMSrequest>:

void triggerSMSrequest (SMS_CMD_t smsCMD, SMS_CMD_FLAG_t ENorDIS)
{
 8003264:	b480      	push	{r7}
 8003266:	b083      	sub	sp, #12
 8003268:	af00      	add	r7, sp, #0
 800326a:	4603      	mov	r3, r0
 800326c:	460a      	mov	r2, r1
 800326e:	71fb      	strb	r3, [r7, #7]
 8003270:	4613      	mov	r3, r2
 8003272:	71bb      	strb	r3, [r7, #6]
	switch (smsCMD)	{
 8003274:	79fb      	ldrb	r3, [r7, #7]
 8003276:	2b07      	cmp	r3, #7
 8003278:	d872      	bhi.n	8003360 <triggerSMSrequest+0xfc>
 800327a:	a201      	add	r2, pc, #4	; (adr r2, 8003280 <triggerSMSrequest+0x1c>)
 800327c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003280:	080032a1 	.word	0x080032a1
 8003284:	080032b9 	.word	0x080032b9
 8003288:	08003301 	.word	0x08003301
 800328c:	080032e9 	.word	0x080032e9
 8003290:	080032d1 	.word	0x080032d1
 8003294:	08003319 	.word	0x08003319
 8003298:	08003349 	.word	0x08003349
 800329c:	08003331 	.word	0x08003331
	case SMS_CMD_CTRL_ON:
		mySIM.sms.CtrlON.requestflag = ENorDIS;
 80032a0:	79bb      	ldrb	r3, [r7, #6]
 80032a2:	f003 0301 	and.w	r3, r3, #1
 80032a6:	b2d9      	uxtb	r1, r3
 80032a8:	4a30      	ldr	r2, [pc, #192]	; (800336c <triggerSMSrequest+0x108>)
 80032aa:	f892 3160 	ldrb.w	r3, [r2, #352]	; 0x160
 80032ae:	f361 0300 	bfi	r3, r1, #0, #1
 80032b2:	f882 3160 	strb.w	r3, [r2, #352]	; 0x160
		break;
 80032b6:	e054      	b.n	8003362 <triggerSMSrequest+0xfe>
	case SMS_CMD_CTRL_OFF:
		mySIM.sms.CtrlOFF.requestflag = ENorDIS;
 80032b8:	79bb      	ldrb	r3, [r7, #6]
 80032ba:	f003 0301 	and.w	r3, r3, #1
 80032be:	b2d9      	uxtb	r1, r3
 80032c0:	4a2a      	ldr	r2, [pc, #168]	; (800336c <triggerSMSrequest+0x108>)
 80032c2:	f892 3272 	ldrb.w	r3, [r2, #626]	; 0x272
 80032c6:	f361 0300 	bfi	r3, r1, #0, #1
 80032ca:	f882 3272 	strb.w	r3, [r2, #626]	; 0x272
		break;
 80032ce:	e048      	b.n	8003362 <triggerSMSrequest+0xfe>
	case SMS_CMD_CTRL_DEC:
		mySIM.sms.CtrlDEC.requestflag = ENorDIS;
 80032d0:	79bb      	ldrb	r3, [r7, #6]
 80032d2:	f003 0301 	and.w	r3, r3, #1
 80032d6:	b2d9      	uxtb	r1, r3
 80032d8:	4a24      	ldr	r2, [pc, #144]	; (800336c <triggerSMSrequest+0x108>)
 80032da:	f892 35a8 	ldrb.w	r3, [r2, #1448]	; 0x5a8
 80032de:	f361 0300 	bfi	r3, r1, #0, #1
 80032e2:	f882 35a8 	strb.w	r3, [r2, #1448]	; 0x5a8
		break;
 80032e6:	e03c      	b.n	8003362 <triggerSMSrequest+0xfe>
	case SMS_CMD_CTRL_INC:
		mySIM.sms.CtrlINC.requestflag = ENorDIS;
 80032e8:	79bb      	ldrb	r3, [r7, #6]
 80032ea:	f003 0301 	and.w	r3, r3, #1
 80032ee:	b2d9      	uxtb	r1, r3
 80032f0:	4a1e      	ldr	r2, [pc, #120]	; (800336c <triggerSMSrequest+0x108>)
 80032f2:	f892 3496 	ldrb.w	r3, [r2, #1174]	; 0x496
 80032f6:	f361 0300 	bfi	r3, r1, #0, #1
 80032fa:	f882 3496 	strb.w	r3, [r2, #1174]	; 0x496
		break;
 80032fe:	e030      	b.n	8003362 <triggerSMSrequest+0xfe>
	case SMS_CMD_CTRL_CALIB:
		mySIM.sms.CtrlCALIB.requestflag = ENorDIS;
 8003300:	79bb      	ldrb	r3, [r7, #6]
 8003302:	f003 0301 	and.w	r3, r3, #1
 8003306:	b2d9      	uxtb	r1, r3
 8003308:	4a18      	ldr	r2, [pc, #96]	; (800336c <triggerSMSrequest+0x108>)
 800330a:	f892 3384 	ldrb.w	r3, [r2, #900]	; 0x384
 800330e:	f361 0300 	bfi	r3, r1, #0, #1
 8003312:	f882 3384 	strb.w	r3, [r2, #900]	; 0x384
		break;
 8003316:	e024      	b.n	8003362 <triggerSMSrequest+0xfe>
	case SMS_CMD_GET_STATUS:
		mySIM.sms.GetStatus.requestflag = ENorDIS;
 8003318:	79bb      	ldrb	r3, [r7, #6]
 800331a:	f003 0301 	and.w	r3, r3, #1
 800331e:	b2d9      	uxtb	r1, r3
 8003320:	4a12      	ldr	r2, [pc, #72]	; (800336c <triggerSMSrequest+0x108>)
 8003322:	f892 36ba 	ldrb.w	r3, [r2, #1722]	; 0x6ba
 8003326:	f361 0300 	bfi	r3, r1, #0, #1
 800332a:	f882 36ba 	strb.w	r3, [r2, #1722]	; 0x6ba
		break;
 800332e:	e018      	b.n	8003362 <triggerSMSrequest+0xfe>
	case SMS_CMD_GET_STATION:
		mySIM.sms.GetStation.requestflag = ENorDIS;
 8003330:	79bb      	ldrb	r3, [r7, #6]
 8003332:	f003 0301 	and.w	r3, r3, #1
 8003336:	b2d9      	uxtb	r1, r3
 8003338:	4a0c      	ldr	r2, [pc, #48]	; (800336c <triggerSMSrequest+0x108>)
 800333a:	f892 38de 	ldrb.w	r3, [r2, #2270]	; 0x8de
 800333e:	f361 0300 	bfi	r3, r1, #0, #1
 8003342:	f882 38de 	strb.w	r3, [r2, #2270]	; 0x8de
		break;
 8003346:	e00c      	b.n	8003362 <triggerSMSrequest+0xfe>
	case SMS_CMD_GET_SENSOR:
		mySIM.sms.GetSensor.requestflag = ENorDIS;
 8003348:	79bb      	ldrb	r3, [r7, #6]
 800334a:	f003 0301 	and.w	r3, r3, #1
 800334e:	b2d9      	uxtb	r1, r3
 8003350:	4a06      	ldr	r2, [pc, #24]	; (800336c <triggerSMSrequest+0x108>)
 8003352:	f892 37cc 	ldrb.w	r3, [r2, #1996]	; 0x7cc
 8003356:	f361 0300 	bfi	r3, r1, #0, #1
 800335a:	f882 37cc 	strb.w	r3, [r2, #1996]	; 0x7cc
		break;
 800335e:	e000      	b.n	8003362 <triggerSMSrequest+0xfe>
	default:
		break;
 8003360:	bf00      	nop
	}
}
 8003362:	bf00      	nop
 8003364:	370c      	adds	r7, #12
 8003366:	46bd      	mov	sp, r7
 8003368:	bc80      	pop	{r7}
 800336a:	4770      	bx	lr
 800336c:	20001298 	.word	0x20001298

08003370 <checkSMSreturn>:

bool checkSMSreturn (SMS_CMD_t smsCMD)
{
 8003370:	b480      	push	{r7}
 8003372:	b085      	sub	sp, #20
 8003374:	af00      	add	r7, sp, #0
 8003376:	4603      	mov	r3, r0
 8003378:	71fb      	strb	r3, [r7, #7]
	bool res = false;
 800337a:	2300      	movs	r3, #0
 800337c:	73fb      	strb	r3, [r7, #15]
	switch (smsCMD)	{
 800337e:	79fb      	ldrb	r3, [r7, #7]
 8003380:	2b07      	cmp	r3, #7
 8003382:	d873      	bhi.n	800346c <checkSMSreturn+0xfc>
 8003384:	a201      	add	r2, pc, #4	; (adr r2, 800338c <checkSMSreturn+0x1c>)
 8003386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800338a:	bf00      	nop
 800338c:	080033ad 	.word	0x080033ad
 8003390:	080033c5 	.word	0x080033c5
 8003394:	0800340d 	.word	0x0800340d
 8003398:	080033f5 	.word	0x080033f5
 800339c:	080033dd 	.word	0x080033dd
 80033a0:	08003425 	.word	0x08003425
 80033a4:	08003455 	.word	0x08003455
 80033a8:	0800343d 	.word	0x0800343d
		case SMS_CMD_CTRL_ON:
			res = mySIM.sms.CtrlON.returnflag ;
 80033ac:	4b33      	ldr	r3, [pc, #204]	; (800347c <checkSMSreturn+0x10c>)
 80033ae:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 80033b2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	bf14      	ite	ne
 80033bc:	2301      	movne	r3, #1
 80033be:	2300      	moveq	r3, #0
 80033c0:	73fb      	strb	r3, [r7, #15]
			break;
 80033c2:	e054      	b.n	800346e <checkSMSreturn+0xfe>
		case SMS_CMD_CTRL_OFF:
			res = mySIM.sms.CtrlOFF.returnflag ;
 80033c4:	4b2d      	ldr	r3, [pc, #180]	; (800347c <checkSMSreturn+0x10c>)
 80033c6:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
 80033ca:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80033ce:	b2db      	uxtb	r3, r3
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	bf14      	ite	ne
 80033d4:	2301      	movne	r3, #1
 80033d6:	2300      	moveq	r3, #0
 80033d8:	73fb      	strb	r3, [r7, #15]
			break;
 80033da:	e048      	b.n	800346e <checkSMSreturn+0xfe>
		case SMS_CMD_CTRL_DEC:
			res = mySIM.sms.CtrlDEC.returnflag ;
 80033dc:	4b27      	ldr	r3, [pc, #156]	; (800347c <checkSMSreturn+0x10c>)
 80033de:	f893 35a8 	ldrb.w	r3, [r3, #1448]	; 0x5a8
 80033e2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80033e6:	b2db      	uxtb	r3, r3
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	bf14      	ite	ne
 80033ec:	2301      	movne	r3, #1
 80033ee:	2300      	moveq	r3, #0
 80033f0:	73fb      	strb	r3, [r7, #15]
			break;
 80033f2:	e03c      	b.n	800346e <checkSMSreturn+0xfe>
		case SMS_CMD_CTRL_INC:
			res = mySIM.sms.CtrlINC.returnflag ;
 80033f4:	4b21      	ldr	r3, [pc, #132]	; (800347c <checkSMSreturn+0x10c>)
 80033f6:	f893 3496 	ldrb.w	r3, [r3, #1174]	; 0x496
 80033fa:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	2b00      	cmp	r3, #0
 8003402:	bf14      	ite	ne
 8003404:	2301      	movne	r3, #1
 8003406:	2300      	moveq	r3, #0
 8003408:	73fb      	strb	r3, [r7, #15]
			break;
 800340a:	e030      	b.n	800346e <checkSMSreturn+0xfe>
		case SMS_CMD_CTRL_CALIB:
			res = mySIM.sms.CtrlCALIB.returnflag ;
 800340c:	4b1b      	ldr	r3, [pc, #108]	; (800347c <checkSMSreturn+0x10c>)
 800340e:	f893 3384 	ldrb.w	r3, [r3, #900]	; 0x384
 8003412:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003416:	b2db      	uxtb	r3, r3
 8003418:	2b00      	cmp	r3, #0
 800341a:	bf14      	ite	ne
 800341c:	2301      	movne	r3, #1
 800341e:	2300      	moveq	r3, #0
 8003420:	73fb      	strb	r3, [r7, #15]
			break;
 8003422:	e024      	b.n	800346e <checkSMSreturn+0xfe>
		case SMS_CMD_GET_STATUS:
			res = mySIM.sms.GetStatus.returnflag ;
 8003424:	4b15      	ldr	r3, [pc, #84]	; (800347c <checkSMSreturn+0x10c>)
 8003426:	f893 36ba 	ldrb.w	r3, [r3, #1722]	; 0x6ba
 800342a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800342e:	b2db      	uxtb	r3, r3
 8003430:	2b00      	cmp	r3, #0
 8003432:	bf14      	ite	ne
 8003434:	2301      	movne	r3, #1
 8003436:	2300      	moveq	r3, #0
 8003438:	73fb      	strb	r3, [r7, #15]
			break;
 800343a:	e018      	b.n	800346e <checkSMSreturn+0xfe>
		case SMS_CMD_GET_STATION:
			res = mySIM.sms.GetStation.returnflag ;
 800343c:	4b0f      	ldr	r3, [pc, #60]	; (800347c <checkSMSreturn+0x10c>)
 800343e:	f893 38de 	ldrb.w	r3, [r3, #2270]	; 0x8de
 8003442:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003446:	b2db      	uxtb	r3, r3
 8003448:	2b00      	cmp	r3, #0
 800344a:	bf14      	ite	ne
 800344c:	2301      	movne	r3, #1
 800344e:	2300      	moveq	r3, #0
 8003450:	73fb      	strb	r3, [r7, #15]
			break;
 8003452:	e00c      	b.n	800346e <checkSMSreturn+0xfe>
		case SMS_CMD_GET_SENSOR:
			res = mySIM.sms.GetSensor.returnflag ;
 8003454:	4b09      	ldr	r3, [pc, #36]	; (800347c <checkSMSreturn+0x10c>)
 8003456:	f893 37cc 	ldrb.w	r3, [r3, #1996]	; 0x7cc
 800345a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800345e:	b2db      	uxtb	r3, r3
 8003460:	2b00      	cmp	r3, #0
 8003462:	bf14      	ite	ne
 8003464:	2301      	movne	r3, #1
 8003466:	2300      	moveq	r3, #0
 8003468:	73fb      	strb	r3, [r7, #15]
			break;
 800346a:	e000      	b.n	800346e <checkSMSreturn+0xfe>
		default:
			break;
 800346c:	bf00      	nop
		}
	return res;
 800346e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003470:	4618      	mov	r0, r3
 8003472:	3714      	adds	r7, #20
 8003474:	46bd      	mov	sp, r7
 8003476:	bc80      	pop	{r7}
 8003478:	4770      	bx	lr
 800347a:	bf00      	nop
 800347c:	20001298 	.word	0x20001298

08003480 <triggerSMSreturn>:
void triggerSMSreturn (SMS_CMD_t smsCMD, SMS_CMD_FLAG_t ENorDIS)
{
 8003480:	b480      	push	{r7}
 8003482:	b083      	sub	sp, #12
 8003484:	af00      	add	r7, sp, #0
 8003486:	4603      	mov	r3, r0
 8003488:	460a      	mov	r2, r1
 800348a:	71fb      	strb	r3, [r7, #7]
 800348c:	4613      	mov	r3, r2
 800348e:	71bb      	strb	r3, [r7, #6]
	switch (smsCMD)	{
 8003490:	79fb      	ldrb	r3, [r7, #7]
 8003492:	2b07      	cmp	r3, #7
 8003494:	d872      	bhi.n	800357c <triggerSMSreturn+0xfc>
 8003496:	a201      	add	r2, pc, #4	; (adr r2, 800349c <triggerSMSreturn+0x1c>)
 8003498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800349c:	080034bd 	.word	0x080034bd
 80034a0:	080034d5 	.word	0x080034d5
 80034a4:	0800351d 	.word	0x0800351d
 80034a8:	08003505 	.word	0x08003505
 80034ac:	080034ed 	.word	0x080034ed
 80034b0:	08003535 	.word	0x08003535
 80034b4:	08003565 	.word	0x08003565
 80034b8:	0800354d 	.word	0x0800354d
	case SMS_CMD_CTRL_ON:
		mySIM.sms.CtrlON.returnflag = ENorDIS;
 80034bc:	79bb      	ldrb	r3, [r7, #6]
 80034be:	f003 0301 	and.w	r3, r3, #1
 80034c2:	b2d9      	uxtb	r1, r3
 80034c4:	4a30      	ldr	r2, [pc, #192]	; (8003588 <triggerSMSreturn+0x108>)
 80034c6:	f892 3160 	ldrb.w	r3, [r2, #352]	; 0x160
 80034ca:	f361 0341 	bfi	r3, r1, #1, #1
 80034ce:	f882 3160 	strb.w	r3, [r2, #352]	; 0x160
		break;
 80034d2:	e054      	b.n	800357e <triggerSMSreturn+0xfe>
	case SMS_CMD_CTRL_OFF:
		mySIM.sms.CtrlOFF.returnflag = ENorDIS;
 80034d4:	79bb      	ldrb	r3, [r7, #6]
 80034d6:	f003 0301 	and.w	r3, r3, #1
 80034da:	b2d9      	uxtb	r1, r3
 80034dc:	4a2a      	ldr	r2, [pc, #168]	; (8003588 <triggerSMSreturn+0x108>)
 80034de:	f892 3272 	ldrb.w	r3, [r2, #626]	; 0x272
 80034e2:	f361 0341 	bfi	r3, r1, #1, #1
 80034e6:	f882 3272 	strb.w	r3, [r2, #626]	; 0x272
		break;
 80034ea:	e048      	b.n	800357e <triggerSMSreturn+0xfe>
	case SMS_CMD_CTRL_DEC:
		mySIM.sms.CtrlDEC.returnflag = ENorDIS;
 80034ec:	79bb      	ldrb	r3, [r7, #6]
 80034ee:	f003 0301 	and.w	r3, r3, #1
 80034f2:	b2d9      	uxtb	r1, r3
 80034f4:	4a24      	ldr	r2, [pc, #144]	; (8003588 <triggerSMSreturn+0x108>)
 80034f6:	f892 35a8 	ldrb.w	r3, [r2, #1448]	; 0x5a8
 80034fa:	f361 0341 	bfi	r3, r1, #1, #1
 80034fe:	f882 35a8 	strb.w	r3, [r2, #1448]	; 0x5a8
		break;
 8003502:	e03c      	b.n	800357e <triggerSMSreturn+0xfe>
	case SMS_CMD_CTRL_INC:
		mySIM.sms.CtrlINC.returnflag = ENorDIS;
 8003504:	79bb      	ldrb	r3, [r7, #6]
 8003506:	f003 0301 	and.w	r3, r3, #1
 800350a:	b2d9      	uxtb	r1, r3
 800350c:	4a1e      	ldr	r2, [pc, #120]	; (8003588 <triggerSMSreturn+0x108>)
 800350e:	f892 3496 	ldrb.w	r3, [r2, #1174]	; 0x496
 8003512:	f361 0341 	bfi	r3, r1, #1, #1
 8003516:	f882 3496 	strb.w	r3, [r2, #1174]	; 0x496
		break;
 800351a:	e030      	b.n	800357e <triggerSMSreturn+0xfe>
	case SMS_CMD_CTRL_CALIB:
		mySIM.sms.CtrlCALIB.returnflag = ENorDIS;
 800351c:	79bb      	ldrb	r3, [r7, #6]
 800351e:	f003 0301 	and.w	r3, r3, #1
 8003522:	b2d9      	uxtb	r1, r3
 8003524:	4a18      	ldr	r2, [pc, #96]	; (8003588 <triggerSMSreturn+0x108>)
 8003526:	f892 3384 	ldrb.w	r3, [r2, #900]	; 0x384
 800352a:	f361 0341 	bfi	r3, r1, #1, #1
 800352e:	f882 3384 	strb.w	r3, [r2, #900]	; 0x384
		break;
 8003532:	e024      	b.n	800357e <triggerSMSreturn+0xfe>
	case SMS_CMD_GET_STATUS:
		mySIM.sms.GetStatus.returnflag = ENorDIS;
 8003534:	79bb      	ldrb	r3, [r7, #6]
 8003536:	f003 0301 	and.w	r3, r3, #1
 800353a:	b2d9      	uxtb	r1, r3
 800353c:	4a12      	ldr	r2, [pc, #72]	; (8003588 <triggerSMSreturn+0x108>)
 800353e:	f892 36ba 	ldrb.w	r3, [r2, #1722]	; 0x6ba
 8003542:	f361 0341 	bfi	r3, r1, #1, #1
 8003546:	f882 36ba 	strb.w	r3, [r2, #1722]	; 0x6ba
		break;
 800354a:	e018      	b.n	800357e <triggerSMSreturn+0xfe>
	case SMS_CMD_GET_STATION:
		mySIM.sms.GetStation.returnflag = ENorDIS;
 800354c:	79bb      	ldrb	r3, [r7, #6]
 800354e:	f003 0301 	and.w	r3, r3, #1
 8003552:	b2d9      	uxtb	r1, r3
 8003554:	4a0c      	ldr	r2, [pc, #48]	; (8003588 <triggerSMSreturn+0x108>)
 8003556:	f892 38de 	ldrb.w	r3, [r2, #2270]	; 0x8de
 800355a:	f361 0341 	bfi	r3, r1, #1, #1
 800355e:	f882 38de 	strb.w	r3, [r2, #2270]	; 0x8de
		break;
 8003562:	e00c      	b.n	800357e <triggerSMSreturn+0xfe>
	case SMS_CMD_GET_SENSOR:
		mySIM.sms.GetSensor.returnflag = ENorDIS;
 8003564:	79bb      	ldrb	r3, [r7, #6]
 8003566:	f003 0301 	and.w	r3, r3, #1
 800356a:	b2d9      	uxtb	r1, r3
 800356c:	4a06      	ldr	r2, [pc, #24]	; (8003588 <triggerSMSreturn+0x108>)
 800356e:	f892 37cc 	ldrb.w	r3, [r2, #1996]	; 0x7cc
 8003572:	f361 0341 	bfi	r3, r1, #1, #1
 8003576:	f882 37cc 	strb.w	r3, [r2, #1996]	; 0x7cc
		break;
 800357a:	e000      	b.n	800357e <triggerSMSreturn+0xfe>
	default:
		break;
 800357c:	bf00      	nop
	}
}
 800357e:	bf00      	nop
 8003580:	370c      	adds	r7, #12
 8003582:	46bd      	mov	sp, r7
 8003584:	bc80      	pop	{r7}
 8003586:	4770      	bx	lr
 8003588:	20001298 	.word	0x20001298

0800358c <SMS_config>:

uint8_t SMS_config()
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b082      	sub	sp, #8
 8003590:	af02      	add	r7, sp, #8
	if ( SIM_sendCMD((uint8_t*)"AT+CMGF=1", (uint8_t*)"OK", ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, SIM_TIMEOUT_SHORT) != SIM_RES_MSG ) return 0;
 8003592:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003596:	9300      	str	r3, [sp, #0]
 8003598:	2301      	movs	r3, #1
 800359a:	2201      	movs	r2, #1
 800359c:	490d      	ldr	r1, [pc, #52]	; (80035d4 <SMS_config+0x48>)
 800359e:	480e      	ldr	r0, [pc, #56]	; (80035d8 <SMS_config+0x4c>)
 80035a0:	f7ff f864 	bl	800266c <SIM_sendCMD>
 80035a4:	4603      	mov	r3, r0
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d001      	beq.n	80035ae <SMS_config+0x22>
 80035aa:	2300      	movs	r3, #0
 80035ac:	e00e      	b.n	80035cc <SMS_config+0x40>

	if ( SIM_sendCMD((uint8_t*)"AT+CSCS=\"GSM\"", (uint8_t*)"OK", ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, SIM_TIMEOUT_SHORT) != SIM_RES_MSG)		return 0;
 80035ae:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80035b2:	9300      	str	r3, [sp, #0]
 80035b4:	2301      	movs	r3, #1
 80035b6:	2201      	movs	r2, #1
 80035b8:	4906      	ldr	r1, [pc, #24]	; (80035d4 <SMS_config+0x48>)
 80035ba:	4808      	ldr	r0, [pc, #32]	; (80035dc <SMS_config+0x50>)
 80035bc:	f7ff f856 	bl	800266c <SIM_sendCMD>
 80035c0:	4603      	mov	r3, r0
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d001      	beq.n	80035ca <SMS_config+0x3e>
 80035c6:	2300      	movs	r3, #0
 80035c8:	e000      	b.n	80035cc <SMS_config+0x40>

	return 1;
 80035ca:	2301      	movs	r3, #1
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	0800ef50 	.word	0x0800ef50
 80035d8:	0800f014 	.word	0x0800f014
 80035dc:	0800f020 	.word	0x0800f020

080035e0 <SMS_sendMsg>:

uint8_t SMS_sendMsg(uint8_t *Msg, uint16_t msglen, uint8_t *phonenumber )
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b0a6      	sub	sp, #152	; 0x98
 80035e4:	af02      	add	r7, sp, #8
 80035e6:	60f8      	str	r0, [r7, #12]
 80035e8:	460b      	mov	r3, r1
 80035ea:	607a      	str	r2, [r7, #4]
 80035ec:	817b      	strh	r3, [r7, #10]
	if ( !SMS_config() )	return 0;
 80035ee:	f7ff ffcd 	bl	800358c <SMS_config>
 80035f2:	4603      	mov	r3, r0
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d101      	bne.n	80035fc <SMS_sendMsg+0x1c>
 80035f8:	2300      	movs	r3, #0
 80035fa:	e033      	b.n	8003664 <SMS_sendMsg+0x84>
	uint8_t SIM_Txbuff[128];
	sprintf((char*)SIM_Txbuff, "AT+CMGS=\"%s\"", phonenumber);
 80035fc:	f107 0310 	add.w	r3, r7, #16
 8003600:	687a      	ldr	r2, [r7, #4]
 8003602:	491a      	ldr	r1, [pc, #104]	; (800366c <SMS_sendMsg+0x8c>)
 8003604:	4618      	mov	r0, r3
 8003606:	f009 f9d5 	bl	800c9b4 <siprintf>
	if ( SIM_sendCMD(SIM_Txbuff, (uint8_t*)">", ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, SIM_TIMEOUT_MEDIUM) != SIM_RES_MSG)	return 0;
 800360a:	f107 0010 	add.w	r0, r7, #16
 800360e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003612:	9300      	str	r3, [sp, #0]
 8003614:	2301      	movs	r3, #1
 8003616:	2201      	movs	r2, #1
 8003618:	4915      	ldr	r1, [pc, #84]	; (8003670 <SMS_sendMsg+0x90>)
 800361a:	f7ff f827 	bl	800266c <SIM_sendCMD>
 800361e:	4603      	mov	r3, r0
 8003620:	2b01      	cmp	r3, #1
 8003622:	d001      	beq.n	8003628 <SMS_sendMsg+0x48>
 8003624:	2300      	movs	r3, #0
 8003626:	e01d      	b.n	8003664 <SMS_sendMsg+0x84>

	Msg[msglen++] = 0x1A;
 8003628:	897b      	ldrh	r3, [r7, #10]
 800362a:	1c5a      	adds	r2, r3, #1
 800362c:	817a      	strh	r2, [r7, #10]
 800362e:	461a      	mov	r2, r3
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	4413      	add	r3, r2
 8003634:	221a      	movs	r2, #26
 8003636:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(SIM_UART, Msg, msglen, 0xFFFF);
 8003638:	897a      	ldrh	r2, [r7, #10]
 800363a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800363e:	68f9      	ldr	r1, [r7, #12]
 8003640:	480c      	ldr	r0, [pc, #48]	; (8003674 <SMS_sendMsg+0x94>)
 8003642:	f007 fcf9 	bl	800b038 <HAL_UART_Transmit>
	if ( SIM_checkMsg((uint8_t*)"OK", SIM_TIMEOUT_SHORT) != SIM_RES_MSG)	{
 8003646:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800364a:	480b      	ldr	r0, [pc, #44]	; (8003678 <SMS_sendMsg+0x98>)
 800364c:	f7fe ff56 	bl	80024fc <SIM_checkMsg>
 8003650:	4603      	mov	r3, r0
 8003652:	2b01      	cmp	r3, #1
 8003654:	d003      	beq.n	800365e <SMS_sendMsg+0x7e>
		MarkAsReadData_SIM();
 8003656:	f7ff f8d7 	bl	8002808 <MarkAsReadData_SIM>
		return 0;
 800365a:	2300      	movs	r3, #0
 800365c:	e002      	b.n	8003664 <SMS_sendMsg+0x84>
	}
//	HAL_UART_Transmit(SIM_UART, (uint8_t*), Size, Timeout)
	MarkAsReadData_SIM();
 800365e:	f7ff f8d3 	bl	8002808 <MarkAsReadData_SIM>
	return 1;
 8003662:	2301      	movs	r3, #1
}
 8003664:	4618      	mov	r0, r3
 8003666:	3790      	adds	r7, #144	; 0x90
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}
 800366c:	0800f030 	.word	0x0800f030
 8003670:	0800f040 	.word	0x0800f040
 8003674:	2000258c 	.word	0x2000258c
 8003678:	0800ef50 	.word	0x0800ef50

0800367c <setLimit>:
static uint8_t steppercentChange = 0;
static Stepmotor_change_mode_t stepMode = STEPM_MODE_STEP;


void setLimit(LIMIT_t Limit)
{
 800367c:	b480      	push	{r7}
 800367e:	b083      	sub	sp, #12
 8003680:	af00      	add	r7, sp, #0
 8003682:	4603      	mov	r3, r0
 8003684:	71fb      	strb	r3, [r7, #7]
	limit = Limit;
 8003686:	4a04      	ldr	r2, [pc, #16]	; (8003698 <setLimit+0x1c>)
 8003688:	79fb      	ldrb	r3, [r7, #7]
 800368a:	7013      	strb	r3, [r2, #0]
}
 800368c:	bf00      	nop
 800368e:	370c      	adds	r7, #12
 8003690:	46bd      	mov	sp, r7
 8003692:	bc80      	pop	{r7}
 8003694:	4770      	bx	lr
 8003696:	bf00      	nop
 8003698:	20000000 	.word	0x20000000

0800369c <getLimit>:

LIMIT_t getLimit ()
{
 800369c:	b480      	push	{r7}
 800369e:	af00      	add	r7, sp, #0
	return limit;
 80036a0:	4b02      	ldr	r3, [pc, #8]	; (80036ac <getLimit+0x10>)
 80036a2:	781b      	ldrb	r3, [r3, #0]
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bc80      	pop	{r7}
 80036aa:	4770      	bx	lr
 80036ac:	20000000 	.word	0x20000000

080036b0 <Step_getDir>:

Stepmotor_dir_t Step_getDir()
{
 80036b0:	b480      	push	{r7}
 80036b2:	af00      	add	r7, sp, #0
	return step_dir;
 80036b4:	4b02      	ldr	r3, [pc, #8]	; (80036c0 <Step_getDir+0x10>)
 80036b6:	781b      	ldrb	r3, [r3, #0]
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bc80      	pop	{r7}
 80036be:	4770      	bx	lr
 80036c0:	20000001 	.word	0x20000001

080036c4 <Step_setDir>:

void Step_setDir(Stepmotor_dir_t dir)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b083      	sub	sp, #12
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	4603      	mov	r3, r0
 80036cc:	71fb      	strb	r3, [r7, #7]
	step_dir = dir;
 80036ce:	4a04      	ldr	r2, [pc, #16]	; (80036e0 <Step_setDir+0x1c>)
 80036d0:	79fb      	ldrb	r3, [r7, #7]
 80036d2:	7013      	strb	r3, [r2, #0]
}
 80036d4:	bf00      	nop
 80036d6:	370c      	adds	r7, #12
 80036d8:	46bd      	mov	sp, r7
 80036da:	bc80      	pop	{r7}
 80036dc:	4770      	bx	lr
 80036de:	bf00      	nop
 80036e0:	20000001 	.word	0x20000001

080036e4 <Step_toggleDir>:

void Step_toggleDir()
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	af00      	add	r7, sp, #0
	switch (Step_getDir())	{
 80036e8:	f7ff ffe2 	bl	80036b0 <Step_getDir>
 80036ec:	4603      	mov	r3, r0
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d002      	beq.n	80036f8 <Step_toggleDir+0x14>
 80036f2:	2b02      	cmp	r3, #2
 80036f4:	d004      	beq.n	8003700 <Step_toggleDir+0x1c>
		break;
	case STEPM_DIR_DEC:
		Step_setDir(STEPM_DIR_INC);
		break;
	default:
		break;
 80036f6:	e007      	b.n	8003708 <Step_toggleDir+0x24>
		Step_setDir(STEPM_DIR_DEC);
 80036f8:	2002      	movs	r0, #2
 80036fa:	f7ff ffe3 	bl	80036c4 <Step_setDir>
		break;
 80036fe:	e003      	b.n	8003708 <Step_toggleDir+0x24>
		Step_setDir(STEPM_DIR_INC);
 8003700:	2001      	movs	r0, #1
 8003702:	f7ff ffdf 	bl	80036c4 <Step_setDir>
		break;
 8003706:	bf00      	nop
	}
}
 8003708:	bf00      	nop
 800370a:	bd80      	pop	{r7, pc}

0800370c <increaseStepchange>:

void increaseStepchange()
{
 800370c:	b480      	push	{r7}
 800370e:	af00      	add	r7, sp, #0
	if (stepChange >= MAX_STEP )	{
 8003710:	4b0a      	ldr	r3, [pc, #40]	; (800373c <increaseStepchange+0x30>)
 8003712:	881b      	ldrh	r3, [r3, #0]
 8003714:	b29b      	uxth	r3, r3
 8003716:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800371a:	d303      	bcc.n	8003724 <increaseStepchange+0x18>
		stepChange = 0;
 800371c:	4b07      	ldr	r3, [pc, #28]	; (800373c <increaseStepchange+0x30>)
 800371e:	2200      	movs	r2, #0
 8003720:	801a      	strh	r2, [r3, #0]
	}
	else {
		stepChange ++;
	}
}
 8003722:	e006      	b.n	8003732 <increaseStepchange+0x26>
		stepChange ++;
 8003724:	4b05      	ldr	r3, [pc, #20]	; (800373c <increaseStepchange+0x30>)
 8003726:	881b      	ldrh	r3, [r3, #0]
 8003728:	b29b      	uxth	r3, r3
 800372a:	3301      	adds	r3, #1
 800372c:	b29a      	uxth	r2, r3
 800372e:	4b03      	ldr	r3, [pc, #12]	; (800373c <increaseStepchange+0x30>)
 8003730:	801a      	strh	r2, [r3, #0]
}
 8003732:	bf00      	nop
 8003734:	46bd      	mov	sp, r7
 8003736:	bc80      	pop	{r7}
 8003738:	4770      	bx	lr
 800373a:	bf00      	nop
 800373c:	20000f64 	.word	0x20000f64

08003740 <decreaseStepchange>:

void decreaseStepchange()
{
 8003740:	b480      	push	{r7}
 8003742:	af00      	add	r7, sp, #0
	if (stepChange == 0  )	{
 8003744:	4b0a      	ldr	r3, [pc, #40]	; (8003770 <decreaseStepchange+0x30>)
 8003746:	881b      	ldrh	r3, [r3, #0]
 8003748:	b29b      	uxth	r3, r3
 800374a:	2b00      	cmp	r3, #0
 800374c:	d104      	bne.n	8003758 <decreaseStepchange+0x18>
		stepChange = MAX_STEP;
 800374e:	4b08      	ldr	r3, [pc, #32]	; (8003770 <decreaseStepchange+0x30>)
 8003750:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8003754:	801a      	strh	r2, [r3, #0]
	}
	else {
		stepChange--;
	}
}
 8003756:	e006      	b.n	8003766 <decreaseStepchange+0x26>
		stepChange--;
 8003758:	4b05      	ldr	r3, [pc, #20]	; (8003770 <decreaseStepchange+0x30>)
 800375a:	881b      	ldrh	r3, [r3, #0]
 800375c:	b29b      	uxth	r3, r3
 800375e:	3b01      	subs	r3, #1
 8003760:	b29a      	uxth	r2, r3
 8003762:	4b03      	ldr	r3, [pc, #12]	; (8003770 <decreaseStepchange+0x30>)
 8003764:	801a      	strh	r2, [r3, #0]
}
 8003766:	bf00      	nop
 8003768:	46bd      	mov	sp, r7
 800376a:	bc80      	pop	{r7}
 800376c:	4770      	bx	lr
 800376e:	bf00      	nop
 8003770:	20000f64 	.word	0x20000f64

08003774 <getStepchange>:

uint16_t getStepchange()
{
 8003774:	b480      	push	{r7}
 8003776:	af00      	add	r7, sp, #0
	return stepChange;
 8003778:	4b03      	ldr	r3, [pc, #12]	; (8003788 <getStepchange+0x14>)
 800377a:	881b      	ldrh	r3, [r3, #0]
 800377c:	b29b      	uxth	r3, r3
}
 800377e:	4618      	mov	r0, r3
 8003780:	46bd      	mov	sp, r7
 8003782:	bc80      	pop	{r7}
 8003784:	4770      	bx	lr
 8003786:	bf00      	nop
 8003788:	20000f64 	.word	0x20000f64

0800378c <Step_setStepChange>:
void Step_setStepChange(uint16_t value)
{
 800378c:	b480      	push	{r7}
 800378e:	b083      	sub	sp, #12
 8003790:	af00      	add	r7, sp, #0
 8003792:	4603      	mov	r3, r0
 8003794:	80fb      	strh	r3, [r7, #6]
	stepChange = value;
 8003796:	4a04      	ldr	r2, [pc, #16]	; (80037a8 <Step_setStepChange+0x1c>)
 8003798:	88fb      	ldrh	r3, [r7, #6]
 800379a:	8013      	strh	r3, [r2, #0]
}
 800379c:	bf00      	nop
 800379e:	370c      	adds	r7, #12
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bc80      	pop	{r7}
 80037a4:	4770      	bx	lr
 80037a6:	bf00      	nop
 80037a8:	20000f64 	.word	0x20000f64

080037ac <Step_getPercentChange>:
uint8_t Step_getPercentChange()
{
 80037ac:	b480      	push	{r7}
 80037ae:	af00      	add	r7, sp, #0
	return steppercentChange;
 80037b0:	4b02      	ldr	r3, [pc, #8]	; (80037bc <Step_getPercentChange+0x10>)
 80037b2:	781b      	ldrb	r3, [r3, #0]
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bc80      	pop	{r7}
 80037ba:	4770      	bx	lr
 80037bc:	20000f66 	.word	0x20000f66

080037c0 <Step_setPercentChange>:

void Step_setPercentChange(uint8_t percent)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b083      	sub	sp, #12
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	4603      	mov	r3, r0
 80037c8:	71fb      	strb	r3, [r7, #7]
	steppercentChange = percent;
 80037ca:	4a04      	ldr	r2, [pc, #16]	; (80037dc <Step_setPercentChange+0x1c>)
 80037cc:	79fb      	ldrb	r3, [r7, #7]
 80037ce:	7013      	strb	r3, [r2, #0]
}
 80037d0:	bf00      	nop
 80037d2:	370c      	adds	r7, #12
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bc80      	pop	{r7}
 80037d8:	4770      	bx	lr
 80037da:	bf00      	nop
 80037dc:	20000f66 	.word	0x20000f66

080037e0 <Step_setChangeMode>:

void Step_setChangeMode(Stepmotor_change_mode_t mode)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b083      	sub	sp, #12
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	4603      	mov	r3, r0
 80037e8:	71fb      	strb	r3, [r7, #7]
	stepMode = mode;
 80037ea:	4a04      	ldr	r2, [pc, #16]	; (80037fc <Step_setChangeMode+0x1c>)
 80037ec:	79fb      	ldrb	r3, [r7, #7]
 80037ee:	7013      	strb	r3, [r2, #0]
}
 80037f0:	bf00      	nop
 80037f2:	370c      	adds	r7, #12
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bc80      	pop	{r7}
 80037f8:	4770      	bx	lr
 80037fa:	bf00      	nop
 80037fc:	20000002 	.word	0x20000002

08003800 <Step_getChangemode>:

Stepmotor_change_mode_t Step_getChangemode()
{
 8003800:	b480      	push	{r7}
 8003802:	af00      	add	r7, sp, #0
	return stepMode;
 8003804:	4b02      	ldr	r3, [pc, #8]	; (8003810 <Step_getChangemode+0x10>)
 8003806:	781b      	ldrb	r3, [r3, #0]
}
 8003808:	4618      	mov	r0, r3
 800380a:	46bd      	mov	sp, r7
 800380c:	bc80      	pop	{r7}
 800380e:	4770      	bx	lr
 8003810:	20000002 	.word	0x20000002

08003814 <Step_step>:

void Step_step()
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b082      	sub	sp, #8
 8003818:	af00      	add	r7, sp, #0
	uint8_t dir = Step_getDir();
 800381a:	f7ff ff49 	bl	80036b0 <Step_getDir>
 800381e:	4603      	mov	r3, r0
 8003820:	71fb      	strb	r3, [r7, #7]
//	if (HAL_GPIO_ReadPin(LIMIT_SWITCH_MAX_GPIO_Port, LIMIT_SWITCH_MAX_Pin) == 0 && dir == STEPM_DIR_INC )	return ;
	if (HAL_GPIO_ReadPin(LIMIT_SWITCH_MIN_GPIO_Port, LIMIT_SWITCH_MIN_Pin) == 0 && dir == STEPM_DIR_DEC )  return;
 8003822:	2104      	movs	r1, #4
 8003824:	480d      	ldr	r0, [pc, #52]	; (800385c <Step_step+0x48>)
 8003826:	f005 fbf1 	bl	800900c <HAL_GPIO_ReadPin>
 800382a:	4603      	mov	r3, r0
 800382c:	2b00      	cmp	r3, #0
 800382e:	d102      	bne.n	8003836 <Step_step+0x22>
 8003830:	79fb      	ldrb	r3, [r7, #7]
 8003832:	2b02      	cmp	r3, #2
 8003834:	d00d      	beq.n	8003852 <Step_step+0x3e>
	A4988_EnableDriver();
 8003836:	f003 f9df 	bl	8006bf8 <A4988_EnableDriver>
	A4988_StepByStep(getStepchange(), dir );
 800383a:	f7ff ff9b 	bl	8003774 <getStepchange>
 800383e:	4603      	mov	r3, r0
 8003840:	461a      	mov	r2, r3
 8003842:	79fb      	ldrb	r3, [r7, #7]
 8003844:	4619      	mov	r1, r3
 8003846:	4610      	mov	r0, r2
 8003848:	f003 fa12 	bl	8006c70 <A4988_StepByStep>
	A4988_DisableDriver();
 800384c:	f003 f9f2 	bl	8006c34 <A4988_DisableDriver>
 8003850:	e000      	b.n	8003854 <Step_step+0x40>
	if (HAL_GPIO_ReadPin(LIMIT_SWITCH_MIN_GPIO_Port, LIMIT_SWITCH_MIN_Pin) == 0 && dir == STEPM_DIR_DEC )  return;
 8003852:	bf00      	nop

}
 8003854:	3708      	adds	r7, #8
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop
 800385c:	40010c00 	.word	0x40010c00

08003860 <Step_percent>:

void Step_percent()
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b082      	sub	sp, #8
 8003864:	af00      	add	r7, sp, #0
	uint8_t dir = Step_getDir();
 8003866:	f7ff ff23 	bl	80036b0 <Step_getDir>
 800386a:	4603      	mov	r3, r0
 800386c:	71fb      	strb	r3, [r7, #7]
//	if (HAL_GPIO_ReadPin(LIMIT_SWITCH_MAX_GPIO_Port, LIMIT_SWITCH_MAX_Pin) == 0 && dir == STEPM_DIR_INC )	return ;
	if (HAL_GPIO_ReadPin(LIMIT_SWITCH_MIN_GPIO_Port, LIMIT_SWITCH_MIN_Pin) == 0 && dir == STEPM_DIR_DEC )  return;
 800386e:	2104      	movs	r1, #4
 8003870:	480e      	ldr	r0, [pc, #56]	; (80038ac <Step_percent+0x4c>)
 8003872:	f005 fbcb 	bl	800900c <HAL_GPIO_ReadPin>
 8003876:	4603      	mov	r3, r0
 8003878:	2b00      	cmp	r3, #0
 800387a:	d102      	bne.n	8003882 <Step_percent+0x22>
 800387c:	79fb      	ldrb	r3, [r7, #7]
 800387e:	2b02      	cmp	r3, #2
 8003880:	d010      	beq.n	80038a4 <Step_percent+0x44>
	uint16_t stepChange = (uint16_t)(Step_getPercentChange() * MAX_STEP / 100);
 8003882:	f7ff ff93 	bl	80037ac <Step_getPercentChange>
 8003886:	4603      	mov	r3, r0
 8003888:	b29b      	uxth	r3, r3
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	80bb      	strh	r3, [r7, #4]
	A4988_EnableDriver();
 800388e:	f003 f9b3 	bl	8006bf8 <A4988_EnableDriver>
	A4988_StepByStep(stepChange, dir);
 8003892:	88bb      	ldrh	r3, [r7, #4]
 8003894:	79fa      	ldrb	r2, [r7, #7]
 8003896:	4611      	mov	r1, r2
 8003898:	4618      	mov	r0, r3
 800389a:	f003 f9e9 	bl	8006c70 <A4988_StepByStep>
	A4988_DisableDriver();
 800389e:	f003 f9c9 	bl	8006c34 <A4988_DisableDriver>
 80038a2:	e000      	b.n	80038a6 <Step_percent+0x46>
	if (HAL_GPIO_ReadPin(LIMIT_SWITCH_MIN_GPIO_Port, LIMIT_SWITCH_MIN_Pin) == 0 && dir == STEPM_DIR_DEC )  return;
 80038a4:	bf00      	nop
}
 80038a6:	3708      	adds	r7, #8
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}
 80038ac:	40010c00 	.word	0x40010c00

080038b0 <setStepValorDir>:
{

}

void setStepValorDir (STEP_t ValorDir)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b083      	sub	sp, #12
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	4603      	mov	r3, r0
 80038b8:	71fb      	strb	r3, [r7, #7]
	stepValorDir = ValorDir;
 80038ba:	4a04      	ldr	r2, [pc, #16]	; (80038cc <setStepValorDir+0x1c>)
 80038bc:	79fb      	ldrb	r3, [r7, #7]
 80038be:	7013      	strb	r3, [r2, #0]
}
 80038c0:	bf00      	nop
 80038c2:	370c      	adds	r7, #12
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bc80      	pop	{r7}
 80038c8:	4770      	bx	lr
 80038ca:	bf00      	nop
 80038cc:	20000f6a 	.word	0x20000f6a

080038d0 <getStepValorDir>:

STEP_t getStepValorDir()
{
 80038d0:	b480      	push	{r7}
 80038d2:	af00      	add	r7, sp, #0
	return stepValorDir;
 80038d4:	4b02      	ldr	r3, [pc, #8]	; (80038e0 <getStepValorDir+0x10>)
 80038d6:	781b      	ldrb	r3, [r3, #0]
}
 80038d8:	4618      	mov	r0, r3
 80038da:	46bd      	mov	sp, r7
 80038dc:	bc80      	pop	{r7}
 80038de:	4770      	bx	lr
 80038e0:	20000f6a 	.word	0x20000f6a

080038e4 <getCurswitch>:

SWITCH_t getCurswitch()
{
 80038e4:	b480      	push	{r7}
 80038e6:	af00      	add	r7, sp, #0
	return curSwitch;
 80038e8:	4b02      	ldr	r3, [pc, #8]	; (80038f4 <getCurswitch+0x10>)
 80038ea:	781b      	ldrb	r3, [r3, #0]
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bc80      	pop	{r7}
 80038f2:	4770      	bx	lr
 80038f4:	20000003 	.word	0x20000003

080038f8 <getClearflag>:
	curSwitch = ONorOFF;
}


uint8_t getClearflag()
{
 80038f8:	b480      	push	{r7}
 80038fa:	af00      	add	r7, sp, #0
	return clearflag;
 80038fc:	4b03      	ldr	r3, [pc, #12]	; (800390c <getClearflag+0x14>)
 80038fe:	781b      	ldrb	r3, [r3, #0]
 8003900:	b2db      	uxtb	r3, r3
}
 8003902:	4618      	mov	r0, r3
 8003904:	46bd      	mov	sp, r7
 8003906:	bc80      	pop	{r7}
 8003908:	4770      	bx	lr
 800390a:	bf00      	nop
 800390c:	20000f69 	.word	0x20000f69

08003910 <setClearflag>:

void setClearflag(uint8_t ENorDIS)
{
 8003910:	b480      	push	{r7}
 8003912:	b083      	sub	sp, #12
 8003914:	af00      	add	r7, sp, #0
 8003916:	4603      	mov	r3, r0
 8003918:	71fb      	strb	r3, [r7, #7]
	clearflag = ENorDIS;
 800391a:	4a04      	ldr	r2, [pc, #16]	; (800392c <setClearflag+0x1c>)
 800391c:	79fb      	ldrb	r3, [r7, #7]
 800391e:	7013      	strb	r3, [r2, #0]
}
 8003920:	bf00      	nop
 8003922:	370c      	adds	r7, #12
 8003924:	46bd      	mov	sp, r7
 8003926:	bc80      	pop	{r7}
 8003928:	4770      	bx	lr
 800392a:	bf00      	nop
 800392c:	20000f69 	.word	0x20000f69

08003930 <switchcurControl>:


void switchcurControl()
{
 8003930:	b480      	push	{r7}
 8003932:	af00      	add	r7, sp, #0
	switch (curControl)	{
 8003934:	4b09      	ldr	r3, [pc, #36]	; (800395c <switchcurControl+0x2c>)
 8003936:	781b      	ldrb	r3, [r3, #0]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d005      	beq.n	8003948 <switchcurControl+0x18>
 800393c:	2b01      	cmp	r3, #1
 800393e:	d107      	bne.n	8003950 <switchcurControl+0x20>
	case CONTROL_TRANS:
		curControl = CONTROL_STEP;
 8003940:	4b06      	ldr	r3, [pc, #24]	; (800395c <switchcurControl+0x2c>)
 8003942:	2200      	movs	r2, #0
 8003944:	701a      	strb	r2, [r3, #0]
		break;
 8003946:	e004      	b.n	8003952 <switchcurControl+0x22>
	case CONTROL_STEP:
		curControl = CONTROL_TRANS;
 8003948:	4b04      	ldr	r3, [pc, #16]	; (800395c <switchcurControl+0x2c>)
 800394a:	2201      	movs	r2, #1
 800394c:	701a      	strb	r2, [r3, #0]
		break;
 800394e:	e000      	b.n	8003952 <switchcurControl+0x22>
	default:
		break;
 8003950:	bf00      	nop
	}
}
 8003952:	bf00      	nop
 8003954:	46bd      	mov	sp, r7
 8003956:	bc80      	pop	{r7}
 8003958:	4770      	bx	lr
 800395a:	bf00      	nop
 800395c:	20000f67 	.word	0x20000f67

08003960 <getcurControl>:

CONTROL_t getcurControl()
{
 8003960:	b480      	push	{r7}
 8003962:	af00      	add	r7, sp, #0
	return curControl;
 8003964:	4b02      	ldr	r3, [pc, #8]	; (8003970 <getcurControl+0x10>)
 8003966:	781b      	ldrb	r3, [r3, #0]
}
 8003968:	4618      	mov	r0, r3
 800396a:	46bd      	mov	sp, r7
 800396c:	bc80      	pop	{r7}
 800396e:	4770      	bx	lr
 8003970:	20000f67 	.word	0x20000f67

08003974 <nextMonitor>:

void nextMonitor(uint8_t volatile  * curMonitor, uint8_t max)	{
 8003974:	b480      	push	{r7}
 8003976:	b083      	sub	sp, #12
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
 800397c:	460b      	mov	r3, r1
 800397e:	70fb      	strb	r3, [r7, #3]
	if (*curMonitor >= max )		{
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	781b      	ldrb	r3, [r3, #0]
 8003984:	b2db      	uxtb	r3, r3
 8003986:	78fa      	ldrb	r2, [r7, #3]
 8003988:	429a      	cmp	r2, r3
 800398a:	d803      	bhi.n	8003994 <nextMonitor+0x20>
		*curMonitor = 0;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2200      	movs	r2, #0
 8003990:	701a      	strb	r2, [r3, #0]
	}
	else {
		(*curMonitor)++;
	}
}
 8003992:	e006      	b.n	80039a2 <nextMonitor+0x2e>
		(*curMonitor)++;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	781b      	ldrb	r3, [r3, #0]
 8003998:	b2db      	uxtb	r3, r3
 800399a:	3301      	adds	r3, #1
 800399c:	b2da      	uxtb	r2, r3
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	701a      	strb	r2, [r3, #0]
}
 80039a2:	bf00      	nop
 80039a4:	370c      	adds	r7, #12
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bc80      	pop	{r7}
 80039aa:	4770      	bx	lr

080039ac <previousMonitor>:

void previousMonitor(uint8_t volatile  * curMonitor, uint8_t max)	{
 80039ac:	b480      	push	{r7}
 80039ae:	b083      	sub	sp, #12
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
 80039b4:	460b      	mov	r3, r1
 80039b6:	70fb      	strb	r3, [r7, #3]
	if (*curMonitor == 0 )		{
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	781b      	ldrb	r3, [r3, #0]
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d103      	bne.n	80039ca <previousMonitor+0x1e>
		*curMonitor = max ;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	78fa      	ldrb	r2, [r7, #3]
 80039c6:	701a      	strb	r2, [r3, #0]
	}
	else {
		(*curMonitor)--;
	}
}
 80039c8:	e006      	b.n	80039d8 <previousMonitor+0x2c>
		(*curMonitor)--;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	781b      	ldrb	r3, [r3, #0]
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	3b01      	subs	r3, #1
 80039d2:	b2da      	uxtb	r2, r3
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	701a      	strb	r2, [r3, #0]
}
 80039d8:	bf00      	nop
 80039da:	370c      	adds	r7, #12
 80039dc:	46bd      	mov	sp, r7
 80039de:	bc80      	pop	{r7}
 80039e0:	4770      	bx	lr
	...

080039e4 <get_curMonitor>:

uint8_t get_curMonitor(void)
{
 80039e4:	b480      	push	{r7}
 80039e6:	af00      	add	r7, sp, #0
	return curMonitor;
 80039e8:	4b03      	ldr	r3, [pc, #12]	; (80039f8 <get_curMonitor+0x14>)
 80039ea:	781b      	ldrb	r3, [r3, #0]
 80039ec:	b2db      	uxtb	r3, r3
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bc80      	pop	{r7}
 80039f4:	4770      	bx	lr
 80039f6:	bf00      	nop
 80039f8:	20000f68 	.word	0x20000f68

080039fc <setcurMonitor>:
void setcurMonitor(uint8_t index)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b083      	sub	sp, #12
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	4603      	mov	r3, r0
 8003a04:	71fb      	strb	r3, [r7, #7]
	curMonitor = index;
 8003a06:	4a04      	ldr	r2, [pc, #16]	; (8003a18 <setcurMonitor+0x1c>)
 8003a08:	79fb      	ldrb	r3, [r7, #7]
 8003a0a:	7013      	strb	r3, [r2, #0]
}
 8003a0c:	bf00      	nop
 8003a0e:	370c      	adds	r7, #12
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bc80      	pop	{r7}
 8003a14:	4770      	bx	lr
 8003a16:	bf00      	nop
 8003a18:	20000f68 	.word	0x20000f68

08003a1c <buttonMENU_handler>:



void buttonMENU_handler()
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	af00      	add	r7, sp, #0
	switch(myDisplayMode)	{
 8003a20:	4b37      	ldr	r3, [pc, #220]	; (8003b00 <buttonMENU_handler+0xe4>)
 8003a22:	781b      	ldrb	r3, [r3, #0]
 8003a24:	2b09      	cmp	r3, #9
 8003a26:	d868      	bhi.n	8003afa <buttonMENU_handler+0xde>
 8003a28:	a201      	add	r2, pc, #4	; (adr r2, 8003a30 <buttonMENU_handler+0x14>)
 8003a2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a2e:	bf00      	nop
 8003a30:	08003a59 	.word	0x08003a59
 8003a34:	08003a7d 	.word	0x08003a7d
 8003a38:	08003a8b 	.word	0x08003a8b
 8003a3c:	08003a99 	.word	0x08003a99
 8003a40:	08003aa7 	.word	0x08003aa7
 8003a44:	08003ab5 	.word	0x08003ab5
 8003a48:	08003adf 	.word	0x08003adf
 8003a4c:	08003aed 	.word	0x08003aed
 8003a50:	08003ac3 	.word	0x08003ac3
 8003a54:	08003ad1 	.word	0x08003ad1
	case HOME:
		if (displayCalibFlag)	{
 8003a58:	4b2a      	ldr	r3, [pc, #168]	; (8003b04 <buttonMENU_handler+0xe8>)
 8003a5a:	781b      	ldrb	r3, [r3, #0]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d003      	beq.n	8003a68 <buttonMENU_handler+0x4c>
			myDisplayMode = COUNTDOWN_SW_OFF;
 8003a60:	4b27      	ldr	r3, [pc, #156]	; (8003b00 <buttonMENU_handler+0xe4>)
 8003a62:	2201      	movs	r2, #1
 8003a64:	701a      	strb	r2, [r3, #0]
 8003a66:	e005      	b.n	8003a74 <buttonMENU_handler+0x58>
		}
		else {
			myDisplayMode = MONITOR;
 8003a68:	4b25      	ldr	r3, [pc, #148]	; (8003b00 <buttonMENU_handler+0xe4>)
 8003a6a:	2203      	movs	r2, #3
 8003a6c:	701a      	strb	r2, [r3, #0]
			setcurMonitor(0);
 8003a6e:	2000      	movs	r0, #0
 8003a70:	f7ff ffc4 	bl	80039fc <setcurMonitor>
		}
		setClearflag(ENABLE);
 8003a74:	2001      	movs	r0, #1
 8003a76:	f7ff ff4b 	bl	8003910 <setClearflag>
		break;
 8003a7a:	e03f      	b.n	8003afc <buttonMENU_handler+0xe0>
	case COUNTDOWN_SW_OFF:
		myDisplayMode = MONITOR;
 8003a7c:	4b20      	ldr	r3, [pc, #128]	; (8003b00 <buttonMENU_handler+0xe4>)
 8003a7e:	2203      	movs	r2, #3
 8003a80:	701a      	strb	r2, [r3, #0]
		setClearflag(ENABLE);
 8003a82:	2001      	movs	r0, #1
 8003a84:	f7ff ff44 	bl	8003910 <setClearflag>
		break;
 8003a88:	e038      	b.n	8003afc <buttonMENU_handler+0xe0>
	case AFTER_SW_OFF:
		myDisplayMode = MONITOR;
 8003a8a:	4b1d      	ldr	r3, [pc, #116]	; (8003b00 <buttonMENU_handler+0xe4>)
 8003a8c:	2203      	movs	r2, #3
 8003a8e:	701a      	strb	r2, [r3, #0]
		setClearflag(ENABLE);
 8003a90:	2001      	movs	r0, #1
 8003a92:	f7ff ff3d 	bl	8003910 <setClearflag>
		break;
 8003a96:	e031      	b.n	8003afc <buttonMENU_handler+0xe0>
	case MONITOR:
		myDisplayMode = MENU_CONTROL;
 8003a98:	4b19      	ldr	r3, [pc, #100]	; (8003b00 <buttonMENU_handler+0xe4>)
 8003a9a:	2204      	movs	r2, #4
 8003a9c:	701a      	strb	r2, [r3, #0]
		setClearflag(ENABLE);
 8003a9e:	2001      	movs	r0, #1
 8003aa0:	f7ff ff36 	bl	8003910 <setClearflag>
		break;
 8003aa4:	e02a      	b.n	8003afc <buttonMENU_handler+0xe0>
	case MENU_CONTROL:
		myDisplayMode = HOME;
 8003aa6:	4b16      	ldr	r3, [pc, #88]	; (8003b00 <buttonMENU_handler+0xe4>)
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	701a      	strb	r2, [r3, #0]
		setClearflag(ENABLE);
 8003aac:	2001      	movs	r0, #1
 8003aae:	f7ff ff2f 	bl	8003910 <setClearflag>
		break;
 8003ab2:	e023      	b.n	8003afc <buttonMENU_handler+0xe0>
	case VOLTAGE_CONTROL:
		myDisplayMode = HOME;
 8003ab4:	4b12      	ldr	r3, [pc, #72]	; (8003b00 <buttonMENU_handler+0xe4>)
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	701a      	strb	r2, [r3, #0]
		setClearflag(ENABLE);
 8003aba:	2001      	movs	r0, #1
 8003abc:	f7ff ff28 	bl	8003910 <setClearflag>
		break;
 8003ac0:	e01c      	b.n	8003afc <buttonMENU_handler+0xe0>
	case STEP_VAL_CONTROL:
		myDisplayMode = HOME;
 8003ac2:	4b0f      	ldr	r3, [pc, #60]	; (8003b00 <buttonMENU_handler+0xe4>)
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	701a      	strb	r2, [r3, #0]
		setClearflag(ENABLE);
 8003ac8:	2001      	movs	r0, #1
 8003aca:	f7ff ff21 	bl	8003910 <setClearflag>
		break;
 8003ace:	e015      	b.n	8003afc <buttonMENU_handler+0xe0>
	case STEP_DIR_CONTROL:
		myDisplayMode = HOME;
 8003ad0:	4b0b      	ldr	r3, [pc, #44]	; (8003b00 <buttonMENU_handler+0xe4>)
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	701a      	strb	r2, [r3, #0]
		setClearflag(ENABLE);
 8003ad6:	2001      	movs	r0, #1
 8003ad8:	f7ff ff1a 	bl	8003910 <setClearflag>
			break;
 8003adc:	e00e      	b.n	8003afc <buttonMENU_handler+0xe0>
	case ON_OFF_CONTROL:
		myDisplayMode = HOME;
 8003ade:	4b08      	ldr	r3, [pc, #32]	; (8003b00 <buttonMENU_handler+0xe4>)
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	701a      	strb	r2, [r3, #0]
		setClearflag(ENABLE);
 8003ae4:	2001      	movs	r0, #1
 8003ae6:	f7ff ff13 	bl	8003910 <setClearflag>
		break;
 8003aea:	e007      	b.n	8003afc <buttonMENU_handler+0xe0>
	case COMPLETE_CONTROL:
		myDisplayMode = HOME;
 8003aec:	4b04      	ldr	r3, [pc, #16]	; (8003b00 <buttonMENU_handler+0xe4>)
 8003aee:	2200      	movs	r2, #0
 8003af0:	701a      	strb	r2, [r3, #0]
		setClearflag(ENABLE);
 8003af2:	2001      	movs	r0, #1
 8003af4:	f7ff ff0c 	bl	8003910 <setClearflag>
		break;
 8003af8:	e000      	b.n	8003afc <buttonMENU_handler+0xe0>
	default:
		break;
 8003afa:	bf00      	nop
	}
}
 8003afc:	bf00      	nop
 8003afe:	bd80      	pop	{r7, pc}
 8003b00:	200005c4 	.word	0x200005c4
 8003b04:	200005c5 	.word	0x200005c5

08003b08 <buttonOK_handler>:
void buttonOK_handler()
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	af00      	add	r7, sp, #0
	switch(myDisplayMode)	{
 8003b0c:	4b44      	ldr	r3, [pc, #272]	; (8003c20 <buttonOK_handler+0x118>)
 8003b0e:	781b      	ldrb	r3, [r3, #0]
 8003b10:	2b09      	cmp	r3, #9
 8003b12:	d87f      	bhi.n	8003c14 <buttonOK_handler+0x10c>
 8003b14:	a201      	add	r2, pc, #4	; (adr r2, 8003b1c <buttonOK_handler+0x14>)
 8003b16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b1a:	bf00      	nop
 8003b1c:	08003c15 	.word	0x08003c15
 8003b20:	08003c15 	.word	0x08003c15
 8003b24:	08003c15 	.word	0x08003c15
 8003b28:	08003c15 	.word	0x08003c15
 8003b2c:	08003b45 	.word	0x08003b45
 8003b30:	08003b75 	.word	0x08003b75
 8003b34:	08003bcd 	.word	0x08003bcd
 8003b38:	08003c07 	.word	0x08003c07
 8003b3c:	08003bb1 	.word	0x08003bb1
 8003b40:	08003bbf 	.word	0x08003bbf
	case AFTER_SW_OFF:
		break;
	case MONITOR:
		break;
	case MENU_CONTROL:
		if (getcurControl() == CONTROL_TRANS)	{
 8003b44:	f7ff ff0c 	bl	8003960 <getcurControl>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d106      	bne.n	8003b5c <buttonOK_handler+0x54>
			myDisplayMode = ON_OFF_CONTROL;
 8003b4e:	4b34      	ldr	r3, [pc, #208]	; (8003c20 <buttonOK_handler+0x118>)
 8003b50:	2206      	movs	r2, #6
 8003b52:	701a      	strb	r2, [r3, #0]
			setClearflag(ENABLE);
 8003b54:	2001      	movs	r0, #1
 8003b56:	f7ff fedb 	bl	8003910 <setClearflag>
		}
		else if (getcurControl() == CONTROL_STEP)	{
			myDisplayMode = VOLTAGE_CONTROL;
			setClearflag(ENABLE);
		}
		break;
 8003b5a:	e05d      	b.n	8003c18 <buttonOK_handler+0x110>
		else if (getcurControl() == CONTROL_STEP)	{
 8003b5c:	f7ff ff00 	bl	8003960 <getcurControl>
 8003b60:	4603      	mov	r3, r0
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d158      	bne.n	8003c18 <buttonOK_handler+0x110>
			myDisplayMode = VOLTAGE_CONTROL;
 8003b66:	4b2e      	ldr	r3, [pc, #184]	; (8003c20 <buttonOK_handler+0x118>)
 8003b68:	2205      	movs	r2, #5
 8003b6a:	701a      	strb	r2, [r3, #0]
			setClearflag(ENABLE);
 8003b6c:	2001      	movs	r0, #1
 8003b6e:	f7ff fecf 	bl	8003910 <setClearflag>
		break;
 8003b72:	e051      	b.n	8003c18 <buttonOK_handler+0x110>
	case VOLTAGE_CONTROL:
		switch (getStepValorDir())	{
 8003b74:	f7ff feac 	bl	80038d0 <getStepValorDir>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	2b02      	cmp	r3, #2
 8003b7c:	d00e      	beq.n	8003b9c <buttonOK_handler+0x94>
 8003b7e:	2b02      	cmp	r3, #2
 8003b80:	dc11      	bgt.n	8003ba6 <buttonOK_handler+0x9e>
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d002      	beq.n	8003b8c <buttonOK_handler+0x84>
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	d004      	beq.n	8003b94 <buttonOK_handler+0x8c>
			break;
		case STEP_CONFIRM:
			triggerTaskflag(TASK_CTRL_STEPMOR, FLAG_EN);
			break;
		default:
			break;
 8003b8a:	e00c      	b.n	8003ba6 <buttonOK_handler+0x9e>
			myDisplayMode = STEP_VAL_CONTROL;
 8003b8c:	4b24      	ldr	r3, [pc, #144]	; (8003c20 <buttonOK_handler+0x118>)
 8003b8e:	2208      	movs	r2, #8
 8003b90:	701a      	strb	r2, [r3, #0]
			break;
 8003b92:	e009      	b.n	8003ba8 <buttonOK_handler+0xa0>
			myDisplayMode = STEP_DIR_CONTROL;
 8003b94:	4b22      	ldr	r3, [pc, #136]	; (8003c20 <buttonOK_handler+0x118>)
 8003b96:	2209      	movs	r2, #9
 8003b98:	701a      	strb	r2, [r3, #0]
			break;
 8003b9a:	e005      	b.n	8003ba8 <buttonOK_handler+0xa0>
			triggerTaskflag(TASK_CTRL_STEPMOR, FLAG_EN);
 8003b9c:	2101      	movs	r1, #1
 8003b9e:	2004      	movs	r0, #4
 8003ba0:	f001 fd22 	bl	80055e8 <triggerTaskflag>
			break;
 8003ba4:	e000      	b.n	8003ba8 <buttonOK_handler+0xa0>
			break;
 8003ba6:	bf00      	nop
		}
		setClearflag(ENABLE);
 8003ba8:	2001      	movs	r0, #1
 8003baa:	f7ff feb1 	bl	8003910 <setClearflag>
		break;
 8003bae:	e034      	b.n	8003c1a <buttonOK_handler+0x112>
	case STEP_VAL_CONTROL:
		myDisplayMode = VOLTAGE_CONTROL;
 8003bb0:	4b1b      	ldr	r3, [pc, #108]	; (8003c20 <buttonOK_handler+0x118>)
 8003bb2:	2205      	movs	r2, #5
 8003bb4:	701a      	strb	r2, [r3, #0]
		setClearflag(ENABLE);
 8003bb6:	2001      	movs	r0, #1
 8003bb8:	f7ff feaa 	bl	8003910 <setClearflag>
		break;
 8003bbc:	e02d      	b.n	8003c1a <buttonOK_handler+0x112>
	case STEP_DIR_CONTROL:
		myDisplayMode = VOLTAGE_CONTROL;
 8003bbe:	4b18      	ldr	r3, [pc, #96]	; (8003c20 <buttonOK_handler+0x118>)
 8003bc0:	2205      	movs	r2, #5
 8003bc2:	701a      	strb	r2, [r3, #0]
		setClearflag(ENABLE);
 8003bc4:	2001      	movs	r0, #1
 8003bc6:	f7ff fea3 	bl	8003910 <setClearflag>
		break;
 8003bca:	e026      	b.n	8003c1a <buttonOK_handler+0x112>
	case ON_OFF_CONTROL:
		// switch MBA
		if(getCurswitch() == SW_ON)	{
 8003bcc:	f7ff fe8a 	bl	80038e4 <getCurswitch>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	d107      	bne.n	8003be6 <buttonOK_handler+0xde>
			myStation.MBAstate = switchContactor(MBA_ON);
 8003bd6:	2001      	movs	r0, #1
 8003bd8:	f7fe fb6c 	bl	80022b4 <switchContactor>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	461a      	mov	r2, r3
 8003be0:	4b10      	ldr	r3, [pc, #64]	; (8003c24 <buttonOK_handler+0x11c>)
 8003be2:	719a      	strb	r2, [r3, #6]
 8003be4:	e006      	b.n	8003bf4 <buttonOK_handler+0xec>


		}
		else {
			myStation.MBAstate = switchContactor(MBA_OFF);
 8003be6:	2002      	movs	r0, #2
 8003be8:	f7fe fb64 	bl	80022b4 <switchContactor>
 8003bec:	4603      	mov	r3, r0
 8003bee:	461a      	mov	r2, r3
 8003bf0:	4b0c      	ldr	r3, [pc, #48]	; (8003c24 <buttonOK_handler+0x11c>)
 8003bf2:	719a      	strb	r2, [r3, #6]
		}

		setSwitchtime();
 8003bf4:	f7fc fce0 	bl	80005b8 <setSwitchtime>
		myDisplayMode = COMPLETE_CONTROL;
 8003bf8:	4b09      	ldr	r3, [pc, #36]	; (8003c20 <buttonOK_handler+0x118>)
 8003bfa:	2207      	movs	r2, #7
 8003bfc:	701a      	strb	r2, [r3, #0]
		setClearflag(ENABLE);
 8003bfe:	2001      	movs	r0, #1
 8003c00:	f7ff fe86 	bl	8003910 <setClearflag>
		break;
 8003c04:	e009      	b.n	8003c1a <buttonOK_handler+0x112>
	case COMPLETE_CONTROL:
		myDisplayMode = ON_OFF_CONTROL;
 8003c06:	4b06      	ldr	r3, [pc, #24]	; (8003c20 <buttonOK_handler+0x118>)
 8003c08:	2206      	movs	r2, #6
 8003c0a:	701a      	strb	r2, [r3, #0]
		setClearflag(ENABLE);
 8003c0c:	2001      	movs	r0, #1
 8003c0e:	f7ff fe7f 	bl	8003910 <setClearflag>
		break;
 8003c12:	e002      	b.n	8003c1a <buttonOK_handler+0x112>
	default:
		break;
 8003c14:	bf00      	nop
 8003c16:	e000      	b.n	8003c1a <buttonOK_handler+0x112>
		break;
 8003c18:	bf00      	nop
	}
}
 8003c1a:	bf00      	nop
 8003c1c:	bd80      	pop	{r7, pc}
 8003c1e:	bf00      	nop
 8003c20:	200005c4 	.word	0x200005c4
 8003c24:	20000474 	.word	0x20000474

08003c28 <buttonDOWN_handler>:
void buttonDOWN_handler()
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	af00      	add	r7, sp, #0
	switch(myDisplayMode)	{
 8003c2c:	4b36      	ldr	r3, [pc, #216]	; (8003d08 <buttonDOWN_handler+0xe0>)
 8003c2e:	781b      	ldrb	r3, [r3, #0]
 8003c30:	2b09      	cmp	r3, #9
 8003c32:	d865      	bhi.n	8003d00 <buttonDOWN_handler+0xd8>
 8003c34:	a201      	add	r2, pc, #4	; (adr r2, 8003c3c <buttonDOWN_handler+0x14>)
 8003c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c3a:	bf00      	nop
 8003c3c:	08003d01 	.word	0x08003d01
 8003c40:	08003d01 	.word	0x08003d01
 8003c44:	08003d01 	.word	0x08003d01
 8003c48:	08003c65 	.word	0x08003c65
 8003c4c:	08003c7d 	.word	0x08003c7d
 8003c50:	08003c89 	.word	0x08003c89
 8003c54:	08003cdb 	.word	0x08003cdb
 8003c58:	08003d01 	.word	0x08003d01
 8003c5c:	08003cc3 	.word	0x08003cc3
 8003c60:	08003ccf 	.word	0x08003ccf
		break;
	case AFTER_SW_OFF:
		break;
	case MONITOR:
		// move to next sensor ID
		nextMonitor(&curMonitor, myStation.ssNode_list->length);
 8003c64:	4b29      	ldr	r3, [pc, #164]	; (8003d0c <buttonDOWN_handler+0xe4>)
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	b2db      	uxtb	r3, r3
 8003c6c:	4619      	mov	r1, r3
 8003c6e:	4828      	ldr	r0, [pc, #160]	; (8003d10 <buttonDOWN_handler+0xe8>)
 8003c70:	f7ff fe80 	bl	8003974 <nextMonitor>
		setClearflag(ENABLE);
 8003c74:	2001      	movs	r0, #1
 8003c76:	f7ff fe4b 	bl	8003910 <setClearflag>
		break;
 8003c7a:	e042      	b.n	8003d02 <buttonDOWN_handler+0xda>
	case MENU_CONTROL:
		switchcurControl();
 8003c7c:	f7ff fe58 	bl	8003930 <switchcurControl>
		setClearflag(ENABLE);
 8003c80:	2001      	movs	r0, #1
 8003c82:	f7ff fe45 	bl	8003910 <setClearflag>
		break;
 8003c86:	e03c      	b.n	8003d02 <buttonDOWN_handler+0xda>
	case VOLTAGE_CONTROL:
		switch(getStepValorDir())	{
 8003c88:	f7ff fe22 	bl	80038d0 <getStepValorDir>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	2b02      	cmp	r3, #2
 8003c90:	d00e      	beq.n	8003cb0 <buttonDOWN_handler+0x88>
 8003c92:	2b02      	cmp	r3, #2
 8003c94:	dc10      	bgt.n	8003cb8 <buttonDOWN_handler+0x90>
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d002      	beq.n	8003ca0 <buttonDOWN_handler+0x78>
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	d004      	beq.n	8003ca8 <buttonDOWN_handler+0x80>
			break;
		case STEP_CONFIRM:
			setStepValorDir(STEP_VAL);
			break;
		default:
			break;
 8003c9e:	e00b      	b.n	8003cb8 <buttonDOWN_handler+0x90>
			setStepValorDir(STEP_DIR);
 8003ca0:	2001      	movs	r0, #1
 8003ca2:	f7ff fe05 	bl	80038b0 <setStepValorDir>
			break;
 8003ca6:	e008      	b.n	8003cba <buttonDOWN_handler+0x92>
			setStepValorDir(STEP_CONFIRM);
 8003ca8:	2002      	movs	r0, #2
 8003caa:	f7ff fe01 	bl	80038b0 <setStepValorDir>
			break;
 8003cae:	e004      	b.n	8003cba <buttonDOWN_handler+0x92>
			setStepValorDir(STEP_VAL);
 8003cb0:	2000      	movs	r0, #0
 8003cb2:	f7ff fdfd 	bl	80038b0 <setStepValorDir>
			break;
 8003cb6:	e000      	b.n	8003cba <buttonDOWN_handler+0x92>
			break;
 8003cb8:	bf00      	nop
		}
		setClearflag(ENABLE);
 8003cba:	2001      	movs	r0, #1
 8003cbc:	f7ff fe28 	bl	8003910 <setClearflag>
		break;
 8003cc0:	e01f      	b.n	8003d02 <buttonDOWN_handler+0xda>
	case STEP_VAL_CONTROL:
		// decrease step value
		decreaseStepchange();
 8003cc2:	f7ff fd3d 	bl	8003740 <decreaseStepchange>
		setClearflag(ENABLE);
 8003cc6:	2001      	movs	r0, #1
 8003cc8:	f7ff fe22 	bl	8003910 <setClearflag>
		break;
 8003ccc:	e019      	b.n	8003d02 <buttonDOWN_handler+0xda>
	case STEP_DIR_CONTROL:
		Step_toggleDir();
 8003cce:	f7ff fd09 	bl	80036e4 <Step_toggleDir>
		setClearflag(ENABLE);
 8003cd2:	2001      	movs	r0, #1
 8003cd4:	f7ff fe1c 	bl	8003910 <setClearflag>
		break;
 8003cd8:	e013      	b.n	8003d02 <buttonDOWN_handler+0xda>
	case ON_OFF_CONTROL:
		//  switch ON/OFF
		switch (curSwitch) {
 8003cda:	4b0e      	ldr	r3, [pc, #56]	; (8003d14 <buttonDOWN_handler+0xec>)
 8003cdc:	781b      	ldrb	r3, [r3, #0]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d005      	beq.n	8003cee <buttonDOWN_handler+0xc6>
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d107      	bne.n	8003cf6 <buttonDOWN_handler+0xce>
		case SW_ON:
			curSwitch = SW_OFF;
 8003ce6:	4b0b      	ldr	r3, [pc, #44]	; (8003d14 <buttonDOWN_handler+0xec>)
 8003ce8:	2200      	movs	r2, #0
 8003cea:	701a      	strb	r2, [r3, #0]
			break;
 8003cec:	e004      	b.n	8003cf8 <buttonDOWN_handler+0xd0>
		case SW_OFF:
			curSwitch = SW_ON;
 8003cee:	4b09      	ldr	r3, [pc, #36]	; (8003d14 <buttonDOWN_handler+0xec>)
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	701a      	strb	r2, [r3, #0]
			break;
 8003cf4:	e000      	b.n	8003cf8 <buttonDOWN_handler+0xd0>
		default:
			break;
 8003cf6:	bf00      	nop
		}
		setClearflag(ENABLE);
 8003cf8:	2001      	movs	r0, #1
 8003cfa:	f7ff fe09 	bl	8003910 <setClearflag>
		break;
 8003cfe:	e000      	b.n	8003d02 <buttonDOWN_handler+0xda>
	case COMPLETE_CONTROL:
		break;
	default:
		break;
 8003d00:	bf00      	nop
	}
}
 8003d02:	bf00      	nop
 8003d04:	bd80      	pop	{r7, pc}
 8003d06:	bf00      	nop
 8003d08:	200005c4 	.word	0x200005c4
 8003d0c:	20000474 	.word	0x20000474
 8003d10:	20000f68 	.word	0x20000f68
 8003d14:	20000003 	.word	0x20000003

08003d18 <buttonUP_handler>:
void buttonUP_handler()
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	af00      	add	r7, sp, #0
	switch(myDisplayMode)	{
 8003d1c:	4b34      	ldr	r3, [pc, #208]	; (8003df0 <buttonUP_handler+0xd8>)
 8003d1e:	781b      	ldrb	r3, [r3, #0]
 8003d20:	2b09      	cmp	r3, #9
 8003d22:	d861      	bhi.n	8003de8 <buttonUP_handler+0xd0>
 8003d24:	a201      	add	r2, pc, #4	; (adr r2, 8003d2c <buttonUP_handler+0x14>)
 8003d26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d2a:	bf00      	nop
 8003d2c:	08003de9 	.word	0x08003de9
 8003d30:	08003de9 	.word	0x08003de9
 8003d34:	08003de9 	.word	0x08003de9
 8003d38:	08003d55 	.word	0x08003d55
 8003d3c:	08003d6d 	.word	0x08003d6d
 8003d40:	08003d79 	.word	0x08003d79
 8003d44:	08003dc3 	.word	0x08003dc3
 8003d48:	08003de9 	.word	0x08003de9
 8003d4c:	08003db1 	.word	0x08003db1
 8003d50:	08003dbd 	.word	0x08003dbd
	case COUNTDOWN_SW_OFF:
		break;
	case AFTER_SW_OFF:
		break;
	case MONITOR:
		previousMonitor(&curMonitor, myStation.ssNode_list->length);
 8003d54:	4b27      	ldr	r3, [pc, #156]	; (8003df4 <buttonUP_handler+0xdc>)
 8003d56:	68db      	ldr	r3, [r3, #12]
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	b2db      	uxtb	r3, r3
 8003d5c:	4619      	mov	r1, r3
 8003d5e:	4826      	ldr	r0, [pc, #152]	; (8003df8 <buttonUP_handler+0xe0>)
 8003d60:	f7ff fe24 	bl	80039ac <previousMonitor>
		setClearflag(ENABLE);
 8003d64:	2001      	movs	r0, #1
 8003d66:	f7ff fdd3 	bl	8003910 <setClearflag>
		break;
 8003d6a:	e03e      	b.n	8003dea <buttonUP_handler+0xd2>
	case MENU_CONTROL:
		switchcurControl();
 8003d6c:	f7ff fde0 	bl	8003930 <switchcurControl>
		setClearflag(ENABLE);
 8003d70:	2001      	movs	r0, #1
 8003d72:	f7ff fdcd 	bl	8003910 <setClearflag>
		break;
 8003d76:	e038      	b.n	8003dea <buttonUP_handler+0xd2>
	case VOLTAGE_CONTROL:
		switch (getStepValorDir())	{
 8003d78:	f7ff fdaa 	bl	80038d0 <getStepValorDir>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	2b02      	cmp	r3, #2
 8003d80:	d00d      	beq.n	8003d9e <buttonUP_handler+0x86>
 8003d82:	2b02      	cmp	r3, #2
 8003d84:	dc0f      	bgt.n	8003da6 <buttonUP_handler+0x8e>
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d005      	beq.n	8003d96 <buttonUP_handler+0x7e>
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	d10b      	bne.n	8003da6 <buttonUP_handler+0x8e>
		case STEP_DIR:
			setStepValorDir(STEP_VAL);
 8003d8e:	2000      	movs	r0, #0
 8003d90:	f7ff fd8e 	bl	80038b0 <setStepValorDir>
			break;
 8003d94:	e008      	b.n	8003da8 <buttonUP_handler+0x90>
		case STEP_VAL:
			setStepValorDir(STEP_CONFIRM);
 8003d96:	2002      	movs	r0, #2
 8003d98:	f7ff fd8a 	bl	80038b0 <setStepValorDir>
			break;
 8003d9c:	e004      	b.n	8003da8 <buttonUP_handler+0x90>
		case STEP_CONFIRM:
			setStepValorDir(STEP_DIR);
 8003d9e:	2001      	movs	r0, #1
 8003da0:	f7ff fd86 	bl	80038b0 <setStepValorDir>
			break;
 8003da4:	e000      	b.n	8003da8 <buttonUP_handler+0x90>
		default:
			break;
 8003da6:	bf00      	nop
		}
		setClearflag(ENABLE);
 8003da8:	2001      	movs	r0, #1
 8003daa:	f7ff fdb1 	bl	8003910 <setClearflag>
		break;
 8003dae:	e01c      	b.n	8003dea <buttonUP_handler+0xd2>
	case STEP_VAL_CONTROL:
		// increase step value
		increaseStepchange();
 8003db0:	f7ff fcac 	bl	800370c <increaseStepchange>
		setClearflag(ENABLE);
 8003db4:	2001      	movs	r0, #1
 8003db6:	f7ff fdab 	bl	8003910 <setClearflag>
		break;
 8003dba:	e016      	b.n	8003dea <buttonUP_handler+0xd2>
	case STEP_DIR_CONTROL:
		Step_toggleDir();
 8003dbc:	f7ff fc92 	bl	80036e4 <Step_toggleDir>
		break;
 8003dc0:	e013      	b.n	8003dea <buttonUP_handler+0xd2>
	case ON_OFF_CONTROL:
		switch (curSwitch) {
 8003dc2:	4b0e      	ldr	r3, [pc, #56]	; (8003dfc <buttonUP_handler+0xe4>)
 8003dc4:	781b      	ldrb	r3, [r3, #0]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d005      	beq.n	8003dd6 <buttonUP_handler+0xbe>
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d107      	bne.n	8003dde <buttonUP_handler+0xc6>
		case SW_ON:
			curSwitch = SW_OFF;
 8003dce:	4b0b      	ldr	r3, [pc, #44]	; (8003dfc <buttonUP_handler+0xe4>)
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	701a      	strb	r2, [r3, #0]
			break;
 8003dd4:	e004      	b.n	8003de0 <buttonUP_handler+0xc8>
		case SW_OFF:
			curSwitch = SW_ON;
 8003dd6:	4b09      	ldr	r3, [pc, #36]	; (8003dfc <buttonUP_handler+0xe4>)
 8003dd8:	2201      	movs	r2, #1
 8003dda:	701a      	strb	r2, [r3, #0]
			break;
 8003ddc:	e000      	b.n	8003de0 <buttonUP_handler+0xc8>
		default:
			break;
 8003dde:	bf00      	nop
		}
		setClearflag(ENABLE);
 8003de0:	2001      	movs	r0, #1
 8003de2:	f7ff fd95 	bl	8003910 <setClearflag>
		break;
 8003de6:	e000      	b.n	8003dea <buttonUP_handler+0xd2>
	case COMPLETE_CONTROL:
		break;
	default:
		break;
 8003de8:	bf00      	nop
	}
}
 8003dea:	bf00      	nop
 8003dec:	bd80      	pop	{r7, pc}
 8003dee:	bf00      	nop
 8003df0:	200005c4 	.word	0x200005c4
 8003df4:	20000474 	.word	0x20000474
 8003df8:	20000f68 	.word	0x20000f68
 8003dfc:	20000003 	.word	0x20000003

08003e00 <SW_LIMIT_MIN_handler>:
//	A4988_DisableDriver();
//	setLimit(LIMIT_MAX);
//	triggerTaskflag(TASK_SEND_STEP_LIMIT, FLAG_EN);
//}
void SW_LIMIT_MIN_handler()
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	af00      	add	r7, sp, #0
	setClearflag(ENABLE);
 8003e04:	2001      	movs	r0, #1
 8003e06:	f7ff fd83 	bl	8003910 <setClearflag>
	A4988_DisableDriver();
 8003e0a:	f002 ff13 	bl	8006c34 <A4988_DisableDriver>
	setLimit(LIMIT_MIN);
 8003e0e:	2000      	movs	r0, #0
 8003e10:	f7ff fc34 	bl	800367c <setLimit>
	triggerTaskflag(TASK_SEND_STEP_LIMIT, FLAG_EN);
 8003e14:	2101      	movs	r1, #1
 8003e16:	2010      	movs	r0, #16
 8003e18:	f001 fbe6 	bl	80055e8 <triggerTaskflag>
}
 8003e1c:	bf00      	nop
 8003e1e:	bd80      	pop	{r7, pc}

08003e20 <DS3231_Init>:

static uint8_t B2D(uint8_t bcd);
static uint8_t D2B(uint8_t decimal);

void DS3231_Init(I2C_HandleTypeDef *handle)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b082      	sub	sp, #8
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  i2c = handle;
 8003e28:	4a04      	ldr	r2, [pc, #16]	; (8003e3c <DS3231_Init+0x1c>)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6013      	str	r3, [r2, #0]
  DS3231_ClearAlarm1();
 8003e2e:	f000 f9d5 	bl	80041dc <DS3231_ClearAlarm1>
}
 8003e32:	bf00      	nop
 8003e34:	3708      	adds	r7, #8
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}
 8003e3a:	bf00      	nop
 8003e3c:	20000f74 	.word	0x20000f74

08003e40 <epochtine2RTC>:
void epochtine2RTC(time_t epochtime,  _RTC *myRTC)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b086      	sub	sp, #24
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8003e4a:	607a      	str	r2, [r7, #4]
	struct tm *info;
	info = localtime(&epochtime);
 8003e4c:	f107 0308 	add.w	r3, r7, #8
 8003e50:	4618      	mov	r0, r3
 8003e52:	f008 f90b 	bl	800c06c <localtime>
 8003e56:	6178      	str	r0, [r7, #20]
	myRTC->Year = info->tm_year -100;
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	695b      	ldr	r3, [r3, #20]
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	3b64      	subs	r3, #100	; 0x64
 8003e60:	b2da      	uxtb	r2, r3
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	701a      	strb	r2, [r3, #0]
	myRTC->Month =  info->tm_mon +1;
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	691b      	ldr	r3, [r3, #16]
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	3301      	adds	r3, #1
 8003e6e:	b2da      	uxtb	r2, r3
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	705a      	strb	r2, [r3, #1]
	myRTC->Date = info->tm_mday;
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	68db      	ldr	r3, [r3, #12]
 8003e78:	b2da      	uxtb	r2, r3
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	709a      	strb	r2, [r3, #2]
	myRTC->DaysOfWeek = info->tm_wday + 1;
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	699b      	ldr	r3, [r3, #24]
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	3301      	adds	r3, #1
 8003e86:	b2da      	uxtb	r2, r3
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	70da      	strb	r2, [r3, #3]
	myRTC->Hour = info->tm_hour + 7;
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	3307      	adds	r3, #7
 8003e94:	b2da      	uxtb	r2, r3
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	711a      	strb	r2, [r3, #4]
	myRTC->Min = info->tm_min;
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	b2da      	uxtb	r2, r3
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	715a      	strb	r2, [r3, #5]
	myRTC->Sec = info->tm_sec;
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	b2da      	uxtb	r2, r3
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	719a      	strb	r2, [r3, #6]
}
 8003eae:	bf00      	nop
 8003eb0:	3718      	adds	r7, #24
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}

08003eb6 <RTC2epochtime>:

time_t RTC2epochtime (_RTC *RTCtime)
{
 8003eb6:	b580      	push	{r7, lr}
 8003eb8:	b08e      	sub	sp, #56	; 0x38
 8003eba:	af00      	add	r7, sp, #0
 8003ebc:	6078      	str	r0, [r7, #4]
	struct tm t;
	time_t epochtime;
	t.tm_year = 2000 + RTCtime->Year -1900;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	781b      	ldrb	r3, [r3, #0]
 8003ec2:	3364      	adds	r3, #100	; 0x64
 8003ec4:	623b      	str	r3, [r7, #32]
	t.tm_mon = RTCtime->Month - 1;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	785b      	ldrb	r3, [r3, #1]
 8003eca:	3b01      	subs	r3, #1
 8003ecc:	61fb      	str	r3, [r7, #28]
	t.tm_mday = RTCtime->Date;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	789b      	ldrb	r3, [r3, #2]
 8003ed2:	61bb      	str	r3, [r7, #24]
	t.tm_hour = RTCtime->Hour - 7;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	791b      	ldrb	r3, [r3, #4]
 8003ed8:	3b07      	subs	r3, #7
 8003eda:	617b      	str	r3, [r7, #20]
	t.tm_min = RTCtime->Min;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	795b      	ldrb	r3, [r3, #5]
 8003ee0:	613b      	str	r3, [r7, #16]
	t.tm_sec = RTCtime->Sec;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	799b      	ldrb	r3, [r3, #6]
 8003ee6:	60fb      	str	r3, [r7, #12]
	t.tm_isdst = -1;
 8003ee8:	f04f 33ff 	mov.w	r3, #4294967295
 8003eec:	62fb      	str	r3, [r7, #44]	; 0x2c
	epochtime = mktime(&t);
 8003eee:	f107 030c 	add.w	r3, r7, #12
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f008 fad8 	bl	800c4a8 <mktime>
 8003ef8:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
	return epochtime;
 8003efc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
}
 8003f00:	4610      	mov	r0, r2
 8003f02:	4619      	mov	r1, r3
 8003f04:	3738      	adds	r7, #56	; 0x38
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}
	...

08003f0c <DS3231_GetTime>:
	if ( (rtc.Min < 0) || (rtc.Min >59 ) )	return false;
	if ( (rtc.Hour < 0) || (rtc.Sec >23 ) )	return false;
	return true;
}
bool DS3231_GetTime(_RTC *rtc)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b086      	sub	sp, #24
 8003f10:	af02      	add	r7, sp, #8
 8003f12:	6078      	str	r0, [r7, #4]
  uint8_t startAddr = DS3231_REG_TIME;
 8003f14:	2300      	movs	r3, #0
 8003f16:	73fb      	strb	r3, [r7, #15]
  uint8_t buffer[7] = {0,};
 8003f18:	2300      	movs	r3, #0
 8003f1a:	60bb      	str	r3, [r7, #8]
 8003f1c:	f107 030c 	add.w	r3, r7, #12
 8003f20:	2100      	movs	r1, #0
 8003f22:	460a      	mov	r2, r1
 8003f24:	801a      	strh	r2, [r3, #0]
 8003f26:	460a      	mov	r2, r1
 8003f28:	709a      	strb	r2, [r3, #2]

  if(HAL_I2C_Master_Transmit(i2c, DS3231_ADDR, &startAddr, 1, HAL_MAX_DELAY) != HAL_OK) return false;
 8003f2a:	4b35      	ldr	r3, [pc, #212]	; (8004000 <DS3231_GetTime+0xf4>)
 8003f2c:	6818      	ldr	r0, [r3, #0]
 8003f2e:	f107 020f 	add.w	r2, r7, #15
 8003f32:	f04f 33ff 	mov.w	r3, #4294967295
 8003f36:	9300      	str	r3, [sp, #0]
 8003f38:	2301      	movs	r3, #1
 8003f3a:	21d0      	movs	r1, #208	; 0xd0
 8003f3c:	f005 fa0a 	bl	8009354 <HAL_I2C_Master_Transmit>
 8003f40:	4603      	mov	r3, r0
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d001      	beq.n	8003f4a <DS3231_GetTime+0x3e>
 8003f46:	2300      	movs	r3, #0
 8003f48:	e055      	b.n	8003ff6 <DS3231_GetTime+0xea>
  if(HAL_I2C_Master_Receive(i2c, DS3231_ADDR, buffer, sizeof(buffer), HAL_MAX_DELAY) != HAL_OK) return false;
 8003f4a:	4b2d      	ldr	r3, [pc, #180]	; (8004000 <DS3231_GetTime+0xf4>)
 8003f4c:	6818      	ldr	r0, [r3, #0]
 8003f4e:	f107 0208 	add.w	r2, r7, #8
 8003f52:	f04f 33ff 	mov.w	r3, #4294967295
 8003f56:	9300      	str	r3, [sp, #0]
 8003f58:	2307      	movs	r3, #7
 8003f5a:	21d0      	movs	r1, #208	; 0xd0
 8003f5c:	f005 faf8 	bl	8009550 <HAL_I2C_Master_Receive>
 8003f60:	4603      	mov	r3, r0
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d001      	beq.n	8003f6a <DS3231_GetTime+0x5e>
 8003f66:	2300      	movs	r3, #0
 8003f68:	e045      	b.n	8003ff6 <DS3231_GetTime+0xea>

  rtc->Sec = B2D(buffer[0] & 0x7F);
 8003f6a:	7a3b      	ldrb	r3, [r7, #8]
 8003f6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f70:	b2db      	uxtb	r3, r3
 8003f72:	4618      	mov	r0, r3
 8003f74:	f000 f9a8 	bl	80042c8 <B2D>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	461a      	mov	r2, r3
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	719a      	strb	r2, [r3, #6]
  rtc->Min = B2D(buffer[1] & 0x7F);
 8003f80:	7a7b      	ldrb	r3, [r7, #9]
 8003f82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f86:	b2db      	uxtb	r3, r3
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f000 f99d 	bl	80042c8 <B2D>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	461a      	mov	r2, r3
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	715a      	strb	r2, [r3, #5]
  rtc->Hour = B2D(buffer[2] & 0x3F);
 8003f96:	7abb      	ldrb	r3, [r7, #10]
 8003f98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f9c:	b2db      	uxtb	r3, r3
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f000 f992 	bl	80042c8 <B2D>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	461a      	mov	r2, r3
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	711a      	strb	r2, [r3, #4]
  rtc->DaysOfWeek = buffer[3] & 0x07;
 8003fac:	7afb      	ldrb	r3, [r7, #11]
 8003fae:	f003 0307 	and.w	r3, r3, #7
 8003fb2:	b2da      	uxtb	r2, r3
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	70da      	strb	r2, [r3, #3]
  rtc->Date = B2D(buffer[4] & 0x3F);
 8003fb8:	7b3b      	ldrb	r3, [r7, #12]
 8003fba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003fbe:	b2db      	uxtb	r3, r3
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f000 f981 	bl	80042c8 <B2D>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	461a      	mov	r2, r3
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	709a      	strb	r2, [r3, #2]
  rtc->Month = B2D(buffer[5] & 0x1F);
 8003fce:	7b7b      	ldrb	r3, [r7, #13]
 8003fd0:	f003 031f 	and.w	r3, r3, #31
 8003fd4:	b2db      	uxtb	r3, r3
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f000 f976 	bl	80042c8 <B2D>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	461a      	mov	r2, r3
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	705a      	strb	r2, [r3, #1]
  rtc->Year = B2D(buffer[6]);
 8003fe4:	7bbb      	ldrb	r3, [r7, #14]
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f000 f96e 	bl	80042c8 <B2D>
 8003fec:	4603      	mov	r3, r0
 8003fee:	461a      	mov	r2, r3
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	701a      	strb	r2, [r3, #0]

  return true;
 8003ff4:	2301      	movs	r3, #1
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	3710      	adds	r7, #16
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}
 8003ffe:	bf00      	nop
 8004000:	20000f74 	.word	0x20000f74

08004004 <DS3231_SetTime>:

bool DS3231_SetTime(_RTC *rtc)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b088      	sub	sp, #32
 8004008:	af02      	add	r7, sp, #8
 800400a:	6078      	str	r0, [r7, #4]
  uint8_t startAddr = DS3231_REG_TIME;
 800400c:	2300      	movs	r3, #0
 800400e:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[8] = {startAddr, D2B(rtc->Sec), D2B(rtc->Min), D2B(rtc->Hour), rtc->DaysOfWeek, D2B(rtc->Date), D2B(rtc->Month), D2B(rtc->Year)};
 8004010:	7dfb      	ldrb	r3, [r7, #23]
 8004012:	733b      	strb	r3, [r7, #12]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	799b      	ldrb	r3, [r3, #6]
 8004018:	4618      	mov	r0, r3
 800401a:	f000 f96d 	bl	80042f8 <D2B>
 800401e:	4603      	mov	r3, r0
 8004020:	737b      	strb	r3, [r7, #13]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	795b      	ldrb	r3, [r3, #5]
 8004026:	4618      	mov	r0, r3
 8004028:	f000 f966 	bl	80042f8 <D2B>
 800402c:	4603      	mov	r3, r0
 800402e:	73bb      	strb	r3, [r7, #14]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	791b      	ldrb	r3, [r3, #4]
 8004034:	4618      	mov	r0, r3
 8004036:	f000 f95f 	bl	80042f8 <D2B>
 800403a:	4603      	mov	r3, r0
 800403c:	73fb      	strb	r3, [r7, #15]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	78db      	ldrb	r3, [r3, #3]
 8004042:	743b      	strb	r3, [r7, #16]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	789b      	ldrb	r3, [r3, #2]
 8004048:	4618      	mov	r0, r3
 800404a:	f000 f955 	bl	80042f8 <D2B>
 800404e:	4603      	mov	r3, r0
 8004050:	747b      	strb	r3, [r7, #17]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	785b      	ldrb	r3, [r3, #1]
 8004056:	4618      	mov	r0, r3
 8004058:	f000 f94e 	bl	80042f8 <D2B>
 800405c:	4603      	mov	r3, r0
 800405e:	74bb      	strb	r3, [r7, #18]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	781b      	ldrb	r3, [r3, #0]
 8004064:	4618      	mov	r0, r3
 8004066:	f000 f947 	bl	80042f8 <D2B>
 800406a:	4603      	mov	r3, r0
 800406c:	74fb      	strb	r3, [r7, #19]
  if(HAL_I2C_Master_Transmit(i2c, DS3231_ADDR, buffer, sizeof(buffer), HAL_MAX_DELAY) != HAL_OK) return false;
 800406e:	4b0a      	ldr	r3, [pc, #40]	; (8004098 <DS3231_SetTime+0x94>)
 8004070:	6818      	ldr	r0, [r3, #0]
 8004072:	f107 020c 	add.w	r2, r7, #12
 8004076:	f04f 33ff 	mov.w	r3, #4294967295
 800407a:	9300      	str	r3, [sp, #0]
 800407c:	2308      	movs	r3, #8
 800407e:	21d0      	movs	r1, #208	; 0xd0
 8004080:	f005 f968 	bl	8009354 <HAL_I2C_Master_Transmit>
 8004084:	4603      	mov	r3, r0
 8004086:	2b00      	cmp	r3, #0
 8004088:	d001      	beq.n	800408e <DS3231_SetTime+0x8a>
 800408a:	2300      	movs	r3, #0
 800408c:	e000      	b.n	8004090 <DS3231_SetTime+0x8c>

  return true;
 800408e:	2301      	movs	r3, #1
}
 8004090:	4618      	mov	r0, r3
 8004092:	3718      	adds	r7, #24
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}
 8004098:	20000f74 	.word	0x20000f74

0800409c <DS3231_SetAlarm1>:
  *temp = value / 4.0f;
  return true;
}

bool DS3231_SetAlarm1(uint8_t mode, uint8_t date, uint8_t hour, uint8_t min, uint8_t sec)
{
 800409c:	b590      	push	{r4, r7, lr}
 800409e:	b089      	sub	sp, #36	; 0x24
 80040a0:	af02      	add	r7, sp, #8
 80040a2:	4604      	mov	r4, r0
 80040a4:	4608      	mov	r0, r1
 80040a6:	4611      	mov	r1, r2
 80040a8:	461a      	mov	r2, r3
 80040aa:	4623      	mov	r3, r4
 80040ac:	71fb      	strb	r3, [r7, #7]
 80040ae:	4603      	mov	r3, r0
 80040b0:	71bb      	strb	r3, [r7, #6]
 80040b2:	460b      	mov	r3, r1
 80040b4:	717b      	strb	r3, [r7, #5]
 80040b6:	4613      	mov	r3, r2
 80040b8:	713b      	strb	r3, [r7, #4]
  uint8_t alarmSecond = D2B(sec);
 80040ba:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80040be:	4618      	mov	r0, r3
 80040c0:	f000 f91a 	bl	80042f8 <D2B>
 80040c4:	4603      	mov	r3, r0
 80040c6:	75fb      	strb	r3, [r7, #23]
  uint8_t alarmMinute = D2B(min);
 80040c8:	793b      	ldrb	r3, [r7, #4]
 80040ca:	4618      	mov	r0, r3
 80040cc:	f000 f914 	bl	80042f8 <D2B>
 80040d0:	4603      	mov	r3, r0
 80040d2:	75bb      	strb	r3, [r7, #22]
  uint8_t alarmHour = D2B(hour);
 80040d4:	797b      	ldrb	r3, [r7, #5]
 80040d6:	4618      	mov	r0, r3
 80040d8:	f000 f90e 	bl	80042f8 <D2B>
 80040dc:	4603      	mov	r3, r0
 80040de:	757b      	strb	r3, [r7, #21]
  uint8_t alarmDate = D2B(date);
 80040e0:	79bb      	ldrb	r3, [r7, #6]
 80040e2:	4618      	mov	r0, r3
 80040e4:	f000 f908 	bl	80042f8 <D2B>
 80040e8:	4603      	mov	r3, r0
 80040ea:	753b      	strb	r3, [r7, #20]

  switch(mode)
 80040ec:	79fb      	ldrb	r3, [r7, #7]
 80040ee:	2b04      	cmp	r3, #4
 80040f0:	d838      	bhi.n	8004164 <DS3231_SetAlarm1+0xc8>
 80040f2:	a201      	add	r2, pc, #4	; (adr r2, 80040f8 <DS3231_SetAlarm1+0x5c>)
 80040f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040f8:	08004165 	.word	0x08004165
 80040fc:	0800410d 	.word	0x0800410d
 8004100:	08004117 	.word	0x08004117
 8004104:	08004129 	.word	0x08004129
 8004108:	08004143 	.word	0x08004143
  {
  case ALARM_MODE_ALL_MATCHED:
    break;
  case ALARM_MODE_HOUR_MIN_SEC_MATCHED:
    alarmDate |= 0x80;
 800410c:	7d3b      	ldrb	r3, [r7, #20]
 800410e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004112:	753b      	strb	r3, [r7, #20]
    break;
 8004114:	e027      	b.n	8004166 <DS3231_SetAlarm1+0xca>
  case ALARM_MODE_MIN_SEC_MATCHED:
    alarmDate |= 0x80;
 8004116:	7d3b      	ldrb	r3, [r7, #20]
 8004118:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800411c:	753b      	strb	r3, [r7, #20]
    alarmHour |= 0x80;
 800411e:	7d7b      	ldrb	r3, [r7, #21]
 8004120:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004124:	757b      	strb	r3, [r7, #21]
    break;
 8004126:	e01e      	b.n	8004166 <DS3231_SetAlarm1+0xca>
  case ALARM_MODE_SEC_MATCHED:
    alarmDate |= 0x80;
 8004128:	7d3b      	ldrb	r3, [r7, #20]
 800412a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800412e:	753b      	strb	r3, [r7, #20]
    alarmHour |= 0x80;
 8004130:	7d7b      	ldrb	r3, [r7, #21]
 8004132:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004136:	757b      	strb	r3, [r7, #21]
    alarmMinute |= 0x80;
 8004138:	7dbb      	ldrb	r3, [r7, #22]
 800413a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800413e:	75bb      	strb	r3, [r7, #22]
    break;
 8004140:	e011      	b.n	8004166 <DS3231_SetAlarm1+0xca>
  case ALARM_MODE_ONCE_PER_SECOND:
    alarmDate |= 0x80;
 8004142:	7d3b      	ldrb	r3, [r7, #20]
 8004144:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004148:	753b      	strb	r3, [r7, #20]
    alarmHour |= 0x80;
 800414a:	7d7b      	ldrb	r3, [r7, #21]
 800414c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004150:	757b      	strb	r3, [r7, #21]
    alarmMinute |= 0x80;
 8004152:	7dbb      	ldrb	r3, [r7, #22]
 8004154:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004158:	75bb      	strb	r3, [r7, #22]
    alarmSecond |= 0x80;
 800415a:	7dfb      	ldrb	r3, [r7, #23]
 800415c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004160:	75fb      	strb	r3, [r7, #23]
    break;
 8004162:	e000      	b.n	8004166 <DS3231_SetAlarm1+0xca>
  default:
    break;
 8004164:	bf00      	nop
  }

  /* Write Alarm Registers */
  uint8_t startAddr = DS3231_REG_ALARM1;
 8004166:	2307      	movs	r3, #7
 8004168:	74fb      	strb	r3, [r7, #19]
  uint8_t buffer[5] = {startAddr, alarmSecond, alarmMinute, alarmHour, alarmDate};
 800416a:	7cfb      	ldrb	r3, [r7, #19]
 800416c:	733b      	strb	r3, [r7, #12]
 800416e:	7dfb      	ldrb	r3, [r7, #23]
 8004170:	737b      	strb	r3, [r7, #13]
 8004172:	7dbb      	ldrb	r3, [r7, #22]
 8004174:	73bb      	strb	r3, [r7, #14]
 8004176:	7d7b      	ldrb	r3, [r7, #21]
 8004178:	73fb      	strb	r3, [r7, #15]
 800417a:	7d3b      	ldrb	r3, [r7, #20]
 800417c:	743b      	strb	r3, [r7, #16]
  if(HAL_I2C_Master_Transmit(i2c, DS3231_ADDR, buffer, sizeof(buffer), HAL_MAX_DELAY) != HAL_OK) return false;
 800417e:	4b16      	ldr	r3, [pc, #88]	; (80041d8 <DS3231_SetAlarm1+0x13c>)
 8004180:	6818      	ldr	r0, [r3, #0]
 8004182:	f107 020c 	add.w	r2, r7, #12
 8004186:	f04f 33ff 	mov.w	r3, #4294967295
 800418a:	9300      	str	r3, [sp, #0]
 800418c:	2305      	movs	r3, #5
 800418e:	21d0      	movs	r1, #208	; 0xd0
 8004190:	f005 f8e0 	bl	8009354 <HAL_I2C_Master_Transmit>
 8004194:	4603      	mov	r3, r0
 8004196:	2b00      	cmp	r3, #0
 8004198:	d001      	beq.n	800419e <DS3231_SetAlarm1+0x102>
 800419a:	2300      	movs	r3, #0
 800419c:	e017      	b.n	80041ce <DS3231_SetAlarm1+0x132>

  /* Enable Alarm1 at Control Register */
  uint8_t ctrlReg = 0x00;
 800419e:	2300      	movs	r3, #0
 80041a0:	72fb      	strb	r3, [r7, #11]
  ReadRegister(DS3231_REG_CONTROL, &ctrlReg);
 80041a2:	f107 030b 	add.w	r3, r7, #11
 80041a6:	4619      	mov	r1, r3
 80041a8:	200e      	movs	r0, #14
 80041aa:	f000 f83d 	bl	8004228 <ReadRegister>
  ctrlReg |= DS3231_CON_A1IE;
 80041ae:	7afb      	ldrb	r3, [r7, #11]
 80041b0:	f043 0301 	orr.w	r3, r3, #1
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	72fb      	strb	r3, [r7, #11]
  ctrlReg |= DS3231_CON_INTCN;
 80041b8:	7afb      	ldrb	r3, [r7, #11]
 80041ba:	f043 0304 	orr.w	r3, r3, #4
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	72fb      	strb	r3, [r7, #11]
  WriteRegister(DS3231_REG_CONTROL, ctrlReg);
 80041c2:	7afb      	ldrb	r3, [r7, #11]
 80041c4:	4619      	mov	r1, r3
 80041c6:	200e      	movs	r0, #14
 80041c8:	f000 f85a 	bl	8004280 <WriteRegister>

  return true;
 80041cc:	2301      	movs	r3, #1
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	371c      	adds	r7, #28
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd90      	pop	{r4, r7, pc}
 80041d6:	bf00      	nop
 80041d8:	20000f74 	.word	0x20000f74

080041dc <DS3231_ClearAlarm1>:

bool DS3231_ClearAlarm1()
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b082      	sub	sp, #8
 80041e0:	af00      	add	r7, sp, #0
  uint8_t ctrlReg;
  uint8_t statusReg;

  /* Clear Control Register */
  ReadRegister(DS3231_REG_CONTROL, &ctrlReg);
 80041e2:	1dfb      	adds	r3, r7, #7
 80041e4:	4619      	mov	r1, r3
 80041e6:	200e      	movs	r0, #14
 80041e8:	f000 f81e 	bl	8004228 <ReadRegister>
  ctrlReg &= ~DS3231_CON_A1IE;
 80041ec:	79fb      	ldrb	r3, [r7, #7]
 80041ee:	f023 0301 	bic.w	r3, r3, #1
 80041f2:	b2db      	uxtb	r3, r3
 80041f4:	71fb      	strb	r3, [r7, #7]
  WriteRegister(DS3231_REG_CONTROL, ctrlReg);
 80041f6:	79fb      	ldrb	r3, [r7, #7]
 80041f8:	4619      	mov	r1, r3
 80041fa:	200e      	movs	r0, #14
 80041fc:	f000 f840 	bl	8004280 <WriteRegister>

  /* Clear Status Register */
  ReadRegister(DS3231_REG_STATUS, &statusReg);
 8004200:	1dbb      	adds	r3, r7, #6
 8004202:	4619      	mov	r1, r3
 8004204:	200f      	movs	r0, #15
 8004206:	f000 f80f 	bl	8004228 <ReadRegister>
  statusReg &= ~DS3231_STA_A1F;
 800420a:	79bb      	ldrb	r3, [r7, #6]
 800420c:	f023 0301 	bic.w	r3, r3, #1
 8004210:	b2db      	uxtb	r3, r3
 8004212:	71bb      	strb	r3, [r7, #6]
  WriteRegister(DS3231_REG_STATUS, statusReg);
 8004214:	79bb      	ldrb	r3, [r7, #6]
 8004216:	4619      	mov	r1, r3
 8004218:	200f      	movs	r0, #15
 800421a:	f000 f831 	bl	8004280 <WriteRegister>

  return true;
 800421e:	2301      	movs	r3, #1
}
 8004220:	4618      	mov	r0, r3
 8004222:	3708      	adds	r7, #8
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}

08004228 <ReadRegister>:

bool ReadRegister(uint8_t regAddr, uint8_t *value)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b084      	sub	sp, #16
 800422c:	af02      	add	r7, sp, #8
 800422e:	4603      	mov	r3, r0
 8004230:	6039      	str	r1, [r7, #0]
 8004232:	71fb      	strb	r3, [r7, #7]
  if(HAL_I2C_Master_Transmit(i2c, DS3231_ADDR, &regAddr, 1, HAL_MAX_DELAY) != HAL_OK) return false;
 8004234:	4b11      	ldr	r3, [pc, #68]	; (800427c <ReadRegister+0x54>)
 8004236:	6818      	ldr	r0, [r3, #0]
 8004238:	1dfa      	adds	r2, r7, #7
 800423a:	f04f 33ff 	mov.w	r3, #4294967295
 800423e:	9300      	str	r3, [sp, #0]
 8004240:	2301      	movs	r3, #1
 8004242:	21d0      	movs	r1, #208	; 0xd0
 8004244:	f005 f886 	bl	8009354 <HAL_I2C_Master_Transmit>
 8004248:	4603      	mov	r3, r0
 800424a:	2b00      	cmp	r3, #0
 800424c:	d001      	beq.n	8004252 <ReadRegister+0x2a>
 800424e:	2300      	movs	r3, #0
 8004250:	e00f      	b.n	8004272 <ReadRegister+0x4a>
  if(HAL_I2C_Master_Receive(i2c, DS3231_ADDR, value, 1, HAL_MAX_DELAY) != HAL_OK) return false;
 8004252:	4b0a      	ldr	r3, [pc, #40]	; (800427c <ReadRegister+0x54>)
 8004254:	6818      	ldr	r0, [r3, #0]
 8004256:	f04f 33ff 	mov.w	r3, #4294967295
 800425a:	9300      	str	r3, [sp, #0]
 800425c:	2301      	movs	r3, #1
 800425e:	683a      	ldr	r2, [r7, #0]
 8004260:	21d0      	movs	r1, #208	; 0xd0
 8004262:	f005 f975 	bl	8009550 <HAL_I2C_Master_Receive>
 8004266:	4603      	mov	r3, r0
 8004268:	2b00      	cmp	r3, #0
 800426a:	d001      	beq.n	8004270 <ReadRegister+0x48>
 800426c:	2300      	movs	r3, #0
 800426e:	e000      	b.n	8004272 <ReadRegister+0x4a>

  return true;
 8004270:	2301      	movs	r3, #1
}
 8004272:	4618      	mov	r0, r3
 8004274:	3708      	adds	r7, #8
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}
 800427a:	bf00      	nop
 800427c:	20000f74 	.word	0x20000f74

08004280 <WriteRegister>:

bool WriteRegister(uint8_t regAddr, uint8_t value)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b086      	sub	sp, #24
 8004284:	af02      	add	r7, sp, #8
 8004286:	4603      	mov	r3, r0
 8004288:	460a      	mov	r2, r1
 800428a:	71fb      	strb	r3, [r7, #7]
 800428c:	4613      	mov	r3, r2
 800428e:	71bb      	strb	r3, [r7, #6]
  uint8_t buffer[2] = {regAddr, value};
 8004290:	79fb      	ldrb	r3, [r7, #7]
 8004292:	733b      	strb	r3, [r7, #12]
 8004294:	79bb      	ldrb	r3, [r7, #6]
 8004296:	737b      	strb	r3, [r7, #13]
  if(HAL_I2C_Master_Transmit(i2c, DS3231_ADDR, buffer, sizeof(buffer), HAL_MAX_DELAY) != HAL_OK) return false;
 8004298:	4b0a      	ldr	r3, [pc, #40]	; (80042c4 <WriteRegister+0x44>)
 800429a:	6818      	ldr	r0, [r3, #0]
 800429c:	f107 020c 	add.w	r2, r7, #12
 80042a0:	f04f 33ff 	mov.w	r3, #4294967295
 80042a4:	9300      	str	r3, [sp, #0]
 80042a6:	2302      	movs	r3, #2
 80042a8:	21d0      	movs	r1, #208	; 0xd0
 80042aa:	f005 f853 	bl	8009354 <HAL_I2C_Master_Transmit>
 80042ae:	4603      	mov	r3, r0
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d001      	beq.n	80042b8 <WriteRegister+0x38>
 80042b4:	2300      	movs	r3, #0
 80042b6:	e000      	b.n	80042ba <WriteRegister+0x3a>

  return true;
 80042b8:	2301      	movs	r3, #1
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3710      	adds	r7, #16
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}
 80042c2:	bf00      	nop
 80042c4:	20000f74 	.word	0x20000f74

080042c8 <B2D>:

static uint8_t B2D(uint8_t bcd)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b083      	sub	sp, #12
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	4603      	mov	r3, r0
 80042d0:	71fb      	strb	r3, [r7, #7]
  return (bcd >> 4) * 10 + (bcd & 0x0F);
 80042d2:	79fb      	ldrb	r3, [r7, #7]
 80042d4:	091b      	lsrs	r3, r3, #4
 80042d6:	b2db      	uxtb	r3, r3
 80042d8:	461a      	mov	r2, r3
 80042da:	0092      	lsls	r2, r2, #2
 80042dc:	4413      	add	r3, r2
 80042de:	005b      	lsls	r3, r3, #1
 80042e0:	b2da      	uxtb	r2, r3
 80042e2:	79fb      	ldrb	r3, [r7, #7]
 80042e4:	f003 030f 	and.w	r3, r3, #15
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	4413      	add	r3, r2
 80042ec:	b2db      	uxtb	r3, r3
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	370c      	adds	r7, #12
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bc80      	pop	{r7}
 80042f6:	4770      	bx	lr

080042f8 <D2B>:

static uint8_t D2B(uint8_t decimal)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b083      	sub	sp, #12
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	4603      	mov	r3, r0
 8004300:	71fb      	strb	r3, [r7, #7]
  return (((decimal / 10) << 4) | (decimal % 10));
 8004302:	79fb      	ldrb	r3, [r7, #7]
 8004304:	4a0d      	ldr	r2, [pc, #52]	; (800433c <D2B+0x44>)
 8004306:	fba2 2303 	umull	r2, r3, r2, r3
 800430a:	08db      	lsrs	r3, r3, #3
 800430c:	b2db      	uxtb	r3, r3
 800430e:	011b      	lsls	r3, r3, #4
 8004310:	b258      	sxtb	r0, r3
 8004312:	79fa      	ldrb	r2, [r7, #7]
 8004314:	4b09      	ldr	r3, [pc, #36]	; (800433c <D2B+0x44>)
 8004316:	fba3 1302 	umull	r1, r3, r3, r2
 800431a:	08d9      	lsrs	r1, r3, #3
 800431c:	460b      	mov	r3, r1
 800431e:	009b      	lsls	r3, r3, #2
 8004320:	440b      	add	r3, r1
 8004322:	005b      	lsls	r3, r3, #1
 8004324:	1ad3      	subs	r3, r2, r3
 8004326:	b2db      	uxtb	r3, r3
 8004328:	b25b      	sxtb	r3, r3
 800432a:	4303      	orrs	r3, r0
 800432c:	b25b      	sxtb	r3, r3
 800432e:	b2db      	uxtb	r3, r3
}
 8004330:	4618      	mov	r0, r3
 8004332:	370c      	adds	r7, #12
 8004334:	46bd      	mov	sp, r7
 8004336:	bc80      	pop	{r7}
 8004338:	4770      	bx	lr
 800433a:	bf00      	nop
 800433c:	cccccccd 	.word	0xcccccccd

08004340 <getCountdowntime>:

uint16_t getCountdowntime(uint8_t hour, uint8_t min, uint8_t sec)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b084      	sub	sp, #16
 8004344:	af00      	add	r7, sp, #0
 8004346:	4603      	mov	r3, r0
 8004348:	71fb      	strb	r3, [r7, #7]
 800434a:	460b      	mov	r3, r1
 800434c:	71bb      	strb	r3, [r7, #6]
 800434e:	4613      	mov	r3, r2
 8004350:	717b      	strb	r3, [r7, #5]
	_RTC curRTC;
	if (!DS3231_GetTime(&curRTC))	return 0;
 8004352:	f107 0308 	add.w	r3, r7, #8
 8004356:	4618      	mov	r0, r3
 8004358:	f7ff fdd8 	bl	8003f0c <DS3231_GetTime>
 800435c:	4603      	mov	r3, r0
 800435e:	f083 0301 	eor.w	r3, r3, #1
 8004362:	b2db      	uxtb	r3, r3
 8004364:	2b00      	cmp	r3, #0
 8004366:	d001      	beq.n	800436c <getCountdowntime+0x2c>
 8004368:	2300      	movs	r3, #0
 800436a:	e06d      	b.n	8004448 <getCountdowntime+0x108>
	if ( hour < curRTC.Hour || hour - curRTC.Hour > 18 )	return 0;
 800436c:	7b3b      	ldrb	r3, [r7, #12]
 800436e:	79fa      	ldrb	r2, [r7, #7]
 8004370:	429a      	cmp	r2, r3
 8004372:	d304      	bcc.n	800437e <getCountdowntime+0x3e>
 8004374:	79fb      	ldrb	r3, [r7, #7]
 8004376:	7b3a      	ldrb	r2, [r7, #12]
 8004378:	1a9b      	subs	r3, r3, r2
 800437a:	2b12      	cmp	r3, #18
 800437c:	dd01      	ble.n	8004382 <getCountdowntime+0x42>
 800437e:	2300      	movs	r3, #0
 8004380:	e062      	b.n	8004448 <getCountdowntime+0x108>
	if ( hour == curRTC.Hour && min < curRTC.Min ) return 0;
 8004382:	7b3b      	ldrb	r3, [r7, #12]
 8004384:	79fa      	ldrb	r2, [r7, #7]
 8004386:	429a      	cmp	r2, r3
 8004388:	d105      	bne.n	8004396 <getCountdowntime+0x56>
 800438a:	7b7b      	ldrb	r3, [r7, #13]
 800438c:	79ba      	ldrb	r2, [r7, #6]
 800438e:	429a      	cmp	r2, r3
 8004390:	d201      	bcs.n	8004396 <getCountdowntime+0x56>
 8004392:	2300      	movs	r3, #0
 8004394:	e058      	b.n	8004448 <getCountdowntime+0x108>
	if ( hour == curRTC.Hour && min == curRTC.Min && sec < curRTC.Sec )	return 0;
 8004396:	7b3b      	ldrb	r3, [r7, #12]
 8004398:	79fa      	ldrb	r2, [r7, #7]
 800439a:	429a      	cmp	r2, r3
 800439c:	d109      	bne.n	80043b2 <getCountdowntime+0x72>
 800439e:	7b7b      	ldrb	r3, [r7, #13]
 80043a0:	79ba      	ldrb	r2, [r7, #6]
 80043a2:	429a      	cmp	r2, r3
 80043a4:	d105      	bne.n	80043b2 <getCountdowntime+0x72>
 80043a6:	7bbb      	ldrb	r3, [r7, #14]
 80043a8:	797a      	ldrb	r2, [r7, #5]
 80043aa:	429a      	cmp	r2, r3
 80043ac:	d201      	bcs.n	80043b2 <getCountdowntime+0x72>
 80043ae:	2300      	movs	r3, #0
 80043b0:	e04a      	b.n	8004448 <getCountdowntime+0x108>
	if( hour == curRTC.Hour && min == curRTC.Min)	{
 80043b2:	7b3b      	ldrb	r3, [r7, #12]
 80043b4:	79fa      	ldrb	r2, [r7, #7]
 80043b6:	429a      	cmp	r2, r3
 80043b8:	d10a      	bne.n	80043d0 <getCountdowntime+0x90>
 80043ba:	7b7b      	ldrb	r3, [r7, #13]
 80043bc:	79ba      	ldrb	r2, [r7, #6]
 80043be:	429a      	cmp	r2, r3
 80043c0:	d106      	bne.n	80043d0 <getCountdowntime+0x90>
		return sec - curRTC.Sec;
 80043c2:	797b      	ldrb	r3, [r7, #5]
 80043c4:	b29a      	uxth	r2, r3
 80043c6:	7bbb      	ldrb	r3, [r7, #14]
 80043c8:	b29b      	uxth	r3, r3
 80043ca:	1ad3      	subs	r3, r2, r3
 80043cc:	b29b      	uxth	r3, r3
 80043ce:	e03b      	b.n	8004448 <getCountdowntime+0x108>
	}
	if (hour == curRTC.Hour)	{
 80043d0:	7b3b      	ldrb	r3, [r7, #12]
 80043d2:	79fa      	ldrb	r2, [r7, #7]
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d113      	bne.n	8004400 <getCountdowntime+0xc0>
		return (min - curRTC.Min)*60 + (60 - curRTC.Sec + sec);
 80043d8:	79bb      	ldrb	r3, [r7, #6]
 80043da:	7b7a      	ldrb	r2, [r7, #13]
 80043dc:	1a9b      	subs	r3, r3, r2
 80043de:	b29b      	uxth	r3, r3
 80043e0:	461a      	mov	r2, r3
 80043e2:	0112      	lsls	r2, r2, #4
 80043e4:	1ad3      	subs	r3, r2, r3
 80043e6:	009b      	lsls	r3, r3, #2
 80043e8:	b29a      	uxth	r2, r3
 80043ea:	797b      	ldrb	r3, [r7, #5]
 80043ec:	b299      	uxth	r1, r3
 80043ee:	7bbb      	ldrb	r3, [r7, #14]
 80043f0:	b29b      	uxth	r3, r3
 80043f2:	1acb      	subs	r3, r1, r3
 80043f4:	b29b      	uxth	r3, r3
 80043f6:	4413      	add	r3, r2
 80043f8:	b29b      	uxth	r3, r3
 80043fa:	333c      	adds	r3, #60	; 0x3c
 80043fc:	b29b      	uxth	r3, r3
 80043fe:	e023      	b.n	8004448 <getCountdowntime+0x108>
	}
	else
		return (hour -curRTC.Hour - 1)* 3600 + (60 - curRTC.Min + min)*60 + (60 - curRTC.Sec + sec);
 8004400:	79fb      	ldrb	r3, [r7, #7]
 8004402:	7b3a      	ldrb	r2, [r7, #12]
 8004404:	1a9b      	subs	r3, r3, r2
 8004406:	3b01      	subs	r3, #1
 8004408:	b29b      	uxth	r3, r3
 800440a:	461a      	mov	r2, r3
 800440c:	0112      	lsls	r2, r2, #4
 800440e:	1ad3      	subs	r3, r2, r3
 8004410:	461a      	mov	r2, r3
 8004412:	0112      	lsls	r2, r2, #4
 8004414:	1ad3      	subs	r3, r2, r3
 8004416:	011b      	lsls	r3, r3, #4
 8004418:	b29a      	uxth	r2, r3
 800441a:	7b7b      	ldrb	r3, [r7, #13]
 800441c:	f1c3 013c 	rsb	r1, r3, #60	; 0x3c
 8004420:	79bb      	ldrb	r3, [r7, #6]
 8004422:	440b      	add	r3, r1
 8004424:	b29b      	uxth	r3, r3
 8004426:	4619      	mov	r1, r3
 8004428:	0109      	lsls	r1, r1, #4
 800442a:	1acb      	subs	r3, r1, r3
 800442c:	009b      	lsls	r3, r3, #2
 800442e:	b29b      	uxth	r3, r3
 8004430:	4413      	add	r3, r2
 8004432:	b29a      	uxth	r2, r3
 8004434:	797b      	ldrb	r3, [r7, #5]
 8004436:	b299      	uxth	r1, r3
 8004438:	7bbb      	ldrb	r3, [r7, #14]
 800443a:	b29b      	uxth	r3, r3
 800443c:	1acb      	subs	r3, r1, r3
 800443e:	b29b      	uxth	r3, r3
 8004440:	4413      	add	r3, r2
 8004442:	b29b      	uxth	r3, r3
 8004444:	333c      	adds	r3, #60	; 0x3c
 8004446:	b29b      	uxth	r3, r3

}
 8004448:	4618      	mov	r0, r3
 800444a:	3710      	adds	r7, #16
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}

08004450 <initLora>:
//static uint16_t oldPos = 0, newPos = 0;
static uint16_t head = 0, tail = 0;
uint8_t isOK = 0;

void initLora()
{
 8004450:	b580      	push	{r7, lr}
 8004452:	af00      	add	r7, sp, #0
//	__LORA_UART = huart;
//	__LORA_DMA_UART = hdma;
	enableReceiveDMAtoIdle_Lora();
 8004454:	f000 f802 	bl	800445c <enableReceiveDMAtoIdle_Lora>

}
 8004458:	bf00      	nop
 800445a:	bd80      	pop	{r7, pc}

0800445c <enableReceiveDMAtoIdle_Lora>:
{
//	initLora(huart, hdma);
//	myStation = myStation;
}
void enableReceiveDMAtoIdle_Lora(void)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	af00      	add	r7, sp, #0
	  HAL_UARTEx_ReceiveToIdle_DMA(__LORA_UART, LoraRxbuff, LORARXBUFF_MAXLEN);
 8004460:	2280      	movs	r2, #128	; 0x80
 8004462:	4907      	ldr	r1, [pc, #28]	; (8004480 <enableReceiveDMAtoIdle_Lora+0x24>)
 8004464:	4807      	ldr	r0, [pc, #28]	; (8004484 <enableReceiveDMAtoIdle_Lora+0x28>)
 8004466:	f006 fe6a 	bl	800b13e <HAL_UARTEx_ReceiveToIdle_DMA>
	  __HAL_DMA_DISABLE_IT(__LORA_DMA_UART,DMA_IT_HT);
 800446a:	4b07      	ldr	r3, [pc, #28]	; (8004488 <enableReceiveDMAtoIdle_Lora+0x2c>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	4b05      	ldr	r3, [pc, #20]	; (8004488 <enableReceiveDMAtoIdle_Lora+0x2c>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f022 0204 	bic.w	r2, r2, #4
 8004478:	601a      	str	r2, [r3, #0]
}
 800447a:	bf00      	nop
 800447c:	bd80      	pop	{r7, pc}
 800447e:	bf00      	nop
 8004480:	20000f78 	.word	0x20000f78
 8004484:	2000261c 	.word	0x2000261c
 8004488:	200026ec 	.word	0x200026ec

0800448c <Lora_callback>:

void Lora_callback(uint16_t Size)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b082      	sub	sp, #8
 8004490:	af00      	add	r7, sp, #0
 8004492:	4603      	mov	r3, r0
 8004494:	80fb      	strh	r3, [r7, #6]
	/* if the current position + new data size is less than the main buffer
	 * we will Loraply copy the data into the buffer and update the position
	 */
//	else
//	{
		memcpy ((uint8_t *)Lorabuff, (uint8_t *)LoraRxbuff, Size);
 8004496:	88fb      	ldrh	r3, [r7, #6]
 8004498:	461a      	mov	r2, r3
 800449a:	490e      	ldr	r1, [pc, #56]	; (80044d4 <Lora_callback+0x48>)
 800449c:	480e      	ldr	r0, [pc, #56]	; (80044d8 <Lora_callback+0x4c>)
 800449e:	f007 ff15 	bl	800c2cc <memcpy>
//	if (head + Size < LORABUFF_MAXLEN ) head = head + Size;
//	else head = head + Size - LORABUFF_MAXLEN;

//	memset(LoraRxbuff, 0, LORARXBUFF_MAXLEN);
	/* start the DMA again */
	enableReceiveDMAtoIdle_Lora();
 80044a2:	f7ff ffdb 	bl	800445c <enableReceiveDMAtoIdle_Lora>


	//Processing data
	if (isWordinBuff(Lorabuff, Size, (uint8_t*)"OK")) {
 80044a6:	88fb      	ldrh	r3, [r7, #6]
 80044a8:	4a0c      	ldr	r2, [pc, #48]	; (80044dc <Lora_callback+0x50>)
 80044aa:	4619      	mov	r1, r3
 80044ac:	480a      	ldr	r0, [pc, #40]	; (80044d8 <Lora_callback+0x4c>)
 80044ae:	f000 fea1 	bl	80051f4 <isWordinBuff>
 80044b2:	4603      	mov	r3, r0
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d002      	beq.n	80044be <Lora_callback+0x32>
		isOK = 1;
 80044b8:	4b09      	ldr	r3, [pc, #36]	; (80044e0 <Lora_callback+0x54>)
 80044ba:	2201      	movs	r2, #1
 80044bc:	701a      	strb	r2, [r3, #0]
	}
	Lora_receive(Lorabuff, Size);
 80044be:	88fb      	ldrh	r3, [r7, #6]
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	4619      	mov	r1, r3
 80044c4:	4804      	ldr	r0, [pc, #16]	; (80044d8 <Lora_callback+0x4c>)
 80044c6:	f000 f831 	bl	800452c <Lora_receive>

}
 80044ca:	bf00      	nop
 80044cc:	3708      	adds	r7, #8
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}
 80044d2:	bf00      	nop
 80044d4:	20000f78 	.word	0x20000f78
 80044d8:	20000ff8 	.word	0x20000ff8
 80044dc:	0800f05c 	.word	0x0800f05c
 80044e0:	200010dc 	.word	0x200010dc

080044e4 <isIDExist>:
{
	tail = head;
}

bool isIDExist (uint8_t ID)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b085      	sub	sp, #20
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	4603      	mov	r3, r0
 80044ec:	71fb      	strb	r3, [r7, #7]
	Node * current = myStation.ssNode_list->head->next;
 80044ee:	4b0e      	ldr	r3, [pc, #56]	; (8004528 <isIDExist+0x44>)
 80044f0:	68db      	ldr	r3, [r3, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044f6:	60fb      	str	r3, [r7, #12]
	while (current != myStation.ssNode_list->tail)
 80044f8:	e009      	b.n	800450e <isIDExist+0x2a>
	{
		if ( ID == current->SSnode.SSnode_ID)	return true;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	781b      	ldrb	r3, [r3, #0]
 80044fe:	79fa      	ldrb	r2, [r7, #7]
 8004500:	429a      	cmp	r2, r3
 8004502:	d101      	bne.n	8004508 <isIDExist+0x24>
 8004504:	2301      	movs	r3, #1
 8004506:	e009      	b.n	800451c <isIDExist+0x38>
		current = current->next;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800450c:	60fb      	str	r3, [r7, #12]
	while (current != myStation.ssNode_list->tail)
 800450e:	4b06      	ldr	r3, [pc, #24]	; (8004528 <isIDExist+0x44>)
 8004510:	68db      	ldr	r3, [r3, #12]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	68fa      	ldr	r2, [r7, #12]
 8004516:	429a      	cmp	r2, r3
 8004518:	d1ef      	bne.n	80044fa <isIDExist+0x16>
	}
	return false;
 800451a:	2300      	movs	r3, #0
}
 800451c:	4618      	mov	r0, r3
 800451e:	3714      	adds	r7, #20
 8004520:	46bd      	mov	sp, r7
 8004522:	bc80      	pop	{r7}
 8004524:	4770      	bx	lr
 8004526:	bf00      	nop
 8004528:	20000474 	.word	0x20000474

0800452c <Lora_receive>:
void Lora_receive(uint8_t *Msg, uint8_t msglen)
{
 800452c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004530:	b0d9      	sub	sp, #356	; 0x164
 8004532:	af1a      	add	r7, sp, #104	; 0x68
 8004534:	6078      	str	r0, [r7, #4]
 8004536:	460b      	mov	r3, r1
 8004538:	70fb      	strb	r3, [r7, #3]
 800453a:	466b      	mov	r3, sp
 800453c:	461e      	mov	r6, r3
	if (Msg[START_POS] != START_VALUE)	return ;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	781b      	ldrb	r3, [r3, #0]
 8004542:	2b01      	cmp	r3, #1
 8004544:	f040 8188 	bne.w	8004858 <Lora_receive+0x32c>
	uint8_t id_len = Msg[ID_LENGTH_POS] - 1;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	3301      	adds	r3, #1
 800454c:	781b      	ldrb	r3, [r3, #0]
 800454e:	3b01      	subs	r3, #1
 8004550:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
	// Get sensor ID
	uint8_t tmpidbuff[id_len+1] ;
 8004554:	f897 30eb 	ldrb.w	r3, [r7, #235]	; 0xeb
 8004558:	1c59      	adds	r1, r3, #1
 800455a:	1e4b      	subs	r3, r1, #1
 800455c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004560:	460a      	mov	r2, r1
 8004562:	2300      	movs	r3, #0
 8004564:	4690      	mov	r8, r2
 8004566:	4699      	mov	r9, r3
 8004568:	f04f 0200 	mov.w	r2, #0
 800456c:	f04f 0300 	mov.w	r3, #0
 8004570:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004574:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004578:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800457c:	460a      	mov	r2, r1
 800457e:	2300      	movs	r3, #0
 8004580:	4614      	mov	r4, r2
 8004582:	461d      	mov	r5, r3
 8004584:	f04f 0200 	mov.w	r2, #0
 8004588:	f04f 0300 	mov.w	r3, #0
 800458c:	00eb      	lsls	r3, r5, #3
 800458e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004592:	00e2      	lsls	r2, r4, #3
 8004594:	460b      	mov	r3, r1
 8004596:	3307      	adds	r3, #7
 8004598:	08db      	lsrs	r3, r3, #3
 800459a:	00db      	lsls	r3, r3, #3
 800459c:	ebad 0d03 	sub.w	sp, sp, r3
 80045a0:	ab1a      	add	r3, sp, #104	; 0x68
 80045a2:	3300      	adds	r3, #0
 80045a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
	memset(tmpidbuff, 0, id_len+1);
 80045a8:	f897 30eb 	ldrb.w	r3, [r7, #235]	; 0xeb
 80045ac:	3301      	adds	r3, #1
 80045ae:	461a      	mov	r2, r3
 80045b0:	2100      	movs	r1, #0
 80045b2:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 80045b6:	f007 fe97 	bl	800c2e8 <memset>
	memcpy(tmpidbuff, Msg +ID_STARTPOS, id_len);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	3303      	adds	r3, #3
 80045be:	f897 20eb 	ldrb.w	r2, [r7, #235]	; 0xeb
 80045c2:	4619      	mov	r1, r3
 80045c4:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 80045c8:	f007 fe80 	bl	800c2cc <memcpy>
	uint8_t id = atoi((char*)tmpidbuff);
 80045cc:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 80045d0:	f007 fd1e 	bl	800c010 <atoi>
 80045d4:	4603      	mov	r3, r0
 80045d6:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
	if ( !sensorID_validation(id) )	return;
 80045da:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 80045de:	4618      	mov	r0, r3
 80045e0:	f001 f91e 	bl	8005820 <sensorID_validation>
 80045e4:	4603      	mov	r3, r0
 80045e6:	f083 0301 	eor.w	r3, r3, #1
 80045ea:	b2db      	uxtb	r3, r3
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	f040 8135 	bne.w	800485c <Lora_receive+0x330>

	// Get voltage type or mode
	uint8_t flag = 0;
 80045f2:	2300      	movs	r3, #0
 80045f4:	f887 30f1 	strb.w	r3, [r7, #241]	; 0xf1
	voltage_t vtype = 0;
 80045f8:	2300      	movs	r3, #0
 80045fa:	f887 30f2 	strb.w	r3, [r7, #242]	; 0xf2
	uint8_t modevalue = 0;
 80045fe:	2300      	movs	r3, #0
 8004600:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
	uint16_t Vperiod = 0;
 8004604:	2300      	movs	r3, #0
 8004606:	f8a7 30f4 	strh.w	r3, [r7, #244]	; 0xf4
	uint8_t Vcalib[101];
	uint8_t vbat = 0;
 800460a:	2300      	movs	r3, #0
 800460c:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
	uint8_t mode = 0;
 8004610:	2300      	movs	r3, #0
 8004612:	f887 30f0 	strb.w	r3, [r7, #240]	; 0xf0
	uint8_t tmp = Msg[ID_STARTPOS+id_len];
 8004616:	f897 30eb 	ldrb.w	r3, [r7, #235]	; 0xeb
 800461a:	3303      	adds	r3, #3
 800461c:	461a      	mov	r2, r3
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	4413      	add	r3, r2
 8004622:	781b      	ldrb	r3, [r3, #0]
 8004624:	f887 30de 	strb.w	r3, [r7, #222]	; 0xde
	switch (tmp)	{
 8004628:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 800462c:	2b08      	cmp	r3, #8
 800462e:	d009      	beq.n	8004644 <Lora_receive+0x118>
 8004630:	2b08      	cmp	r3, #8
 8004632:	dc0f      	bgt.n	8004654 <Lora_receive+0x128>
 8004634:	2b04      	cmp	r3, #4
 8004636:	d009      	beq.n	800464c <Lora_receive+0x120>
 8004638:	2b07      	cmp	r3, #7
 800463a:	d10b      	bne.n	8004654 <Lora_receive+0x128>
	case 7:
		vtype = V_na;
 800463c:	2302      	movs	r3, #2
 800463e:	f887 30f2 	strb.w	r3, [r7, #242]	; 0xf2
		break;
 8004642:	e008      	b.n	8004656 <Lora_receive+0x12a>
	case 8:
		vtype = V_p;
 8004644:	2301      	movs	r3, #1
 8004646:	f887 30f2 	strb.w	r3, [r7, #242]	; 0xf2
		break;
 800464a:	e004      	b.n	8004656 <Lora_receive+0x12a>
	case 4:
		mode = 1;
 800464c:	2301      	movs	r3, #1
 800464e:	f887 30f0 	strb.w	r3, [r7, #240]	; 0xf0
		break;
 8004652:	e000      	b.n	8004656 <Lora_receive+0x12a>
	default:
		break;
 8004654:	bf00      	nop
	}
	if (!vtype && !mode)	return;
 8004656:	f897 30f2 	ldrb.w	r3, [r7, #242]	; 0xf2
 800465a:	2b00      	cmp	r3, #0
 800465c:	d104      	bne.n	8004668 <Lora_receive+0x13c>
 800465e:	f897 30f0 	ldrb.w	r3, [r7, #240]	; 0xf0
 8004662:	2b00      	cmp	r3, #0
 8004664:	f000 80fc 	beq.w	8004860 <Lora_receive+0x334>
	if (mode)	{
 8004668:	f897 30f0 	ldrb.w	r3, [r7, #240]	; 0xf0
 800466c:	2b00      	cmp	r3, #0
 800466e:	d00b      	beq.n	8004688 <Lora_receive+0x15c>
		// Get mode
		modevalue = Msg[ID_STARTPOS+id_len +2];
 8004670:	f897 30eb 	ldrb.w	r3, [r7, #235]	; 0xeb
 8004674:	3305      	adds	r3, #5
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	4413      	add	r3, r2
 800467a:	781b      	ldrb	r3, [r3, #0]
 800467c:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
		flag = 1;
 8004680:	2301      	movs	r3, #1
 8004682:	f887 30f1 	strb.w	r3, [r7, #241]	; 0xf1
 8004686:	e030      	b.n	80046ea <Lora_receive+0x1be>
	}
	else {
		// check whether Data Period or Data Calib
		switch	(Msg[ID_STARTPOS +id_len +1]) {
 8004688:	f897 30eb 	ldrb.w	r3, [r7, #235]	; 0xeb
 800468c:	3304      	adds	r3, #4
 800468e:	687a      	ldr	r2, [r7, #4]
 8004690:	4413      	add	r3, r2
 8004692:	781b      	ldrb	r3, [r3, #0]
 8004694:	2b02      	cmp	r3, #2
 8004696:	d002      	beq.n	800469e <Lora_receive+0x172>
 8004698:	2b64      	cmp	r3, #100	; 0x64
 800469a:	d017      	beq.n	80046cc <Lora_receive+0x1a0>
			// Get data calib value
			memcpy(Vcalib , Msg + ID_STARTPOS +id_len +2, 100);
			flag = 3;
			break;
		default:
			break;
 800469c:	e025      	b.n	80046ea <Lora_receive+0x1be>
			Vperiod = buff2twobyte(Msg + ID_STARTPOS +id_len +2);
 800469e:	f897 30eb 	ldrb.w	r3, [r7, #235]	; 0xeb
 80046a2:	3305      	adds	r3, #5
 80046a4:	687a      	ldr	r2, [r7, #4]
 80046a6:	4413      	add	r3, r2
 80046a8:	4618      	mov	r0, r3
 80046aa:	f000 fe4b 	bl	8005344 <buff2twobyte>
 80046ae:	4603      	mov	r3, r0
 80046b0:	f8a7 30f4 	strh.w	r3, [r7, #244]	; 0xf4
			vbat = Msg[ID_STARTPOS +id_len +6];
 80046b4:	f897 30eb 	ldrb.w	r3, [r7, #235]	; 0xeb
 80046b8:	3309      	adds	r3, #9
 80046ba:	687a      	ldr	r2, [r7, #4]
 80046bc:	4413      	add	r3, r2
 80046be:	781b      	ldrb	r3, [r3, #0]
 80046c0:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
			flag = 2;
 80046c4:	2302      	movs	r3, #2
 80046c6:	f887 30f1 	strb.w	r3, [r7, #241]	; 0xf1
			break;
 80046ca:	e00e      	b.n	80046ea <Lora_receive+0x1be>
			memcpy(Vcalib , Msg + ID_STARTPOS +id_len +2, 100);
 80046cc:	f897 30eb 	ldrb.w	r3, [r7, #235]	; 0xeb
 80046d0:	3305      	adds	r3, #5
 80046d2:	687a      	ldr	r2, [r7, #4]
 80046d4:	18d1      	adds	r1, r2, r3
 80046d6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80046da:	2264      	movs	r2, #100	; 0x64
 80046dc:	4618      	mov	r0, r3
 80046de:	f007 fdf5 	bl	800c2cc <memcpy>
			flag = 3;
 80046e2:	2303      	movs	r3, #3
 80046e4:	f887 30f1 	strb.w	r3, [r7, #241]	; 0xf1
			break;
 80046e8:	bf00      	nop
		}

	}

	// If Sensor ID is  not already saved in the Sensor node list
	if ( !isIDExist(id) )		{
 80046ea:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 80046ee:	4618      	mov	r0, r3
 80046f0:	f7ff fef8 	bl	80044e4 <isIDExist>
 80046f4:	4603      	mov	r3, r0
 80046f6:	f083 0301 	eor.w	r3, r3, #1
 80046fa:	b2db      	uxtb	r3, r3
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d04a      	beq.n	8004796 <Lora_receive+0x26a>
		triggerTaskflag(TASK_REGISTER, FLAG_EN);
 8004700:	2101      	movs	r1, #1
 8004702:	2000      	movs	r0, #0
 8004704:	f000 ff70 	bl	80055e8 <triggerTaskflag>
		SensorNode_t newSensor = SENSORNODE_T_INIT;
 8004708:	f107 0308 	add.w	r3, r7, #8
 800470c:	2270      	movs	r2, #112	; 0x70
 800470e:	2100      	movs	r1, #0
 8004710:	4618      	mov	r0, r3
 8004712:	f007 fde9 	bl	800c2e8 <memset>
 8004716:	2301      	movs	r3, #1
 8004718:	72bb      	strb	r3, [r7, #10]
 800471a:	2301      	movs	r3, #1
 800471c:	73bb      	strb	r3, [r7, #14]
		newSensor.SSnode_ID = id;
 800471e:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8004722:	723b      	strb	r3, [r7, #8]
		switch (flag)	{
 8004724:	f897 30f1 	ldrb.w	r3, [r7, #241]	; 0xf1
 8004728:	2b03      	cmp	r3, #3
 800472a:	d014      	beq.n	8004756 <Lora_receive+0x22a>
 800472c:	2b03      	cmp	r3, #3
 800472e:	dc21      	bgt.n	8004774 <Lora_receive+0x248>
 8004730:	2b01      	cmp	r3, #1
 8004732:	d002      	beq.n	800473a <Lora_receive+0x20e>
 8004734:	2b02      	cmp	r3, #2
 8004736:	d004      	beq.n	8004742 <Lora_receive+0x216>
			newSensor.V_type = vtype;
			memcpy(newSensor.dataCalibBuffer, Vcalib, 100);
			newSensor.dataCalibAvailable = 1;
			break;
		default:
			break;
 8004738:	e01c      	b.n	8004774 <Lora_receive+0x248>
			newSensor.sensorMode = modevalue;
 800473a:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 800473e:	747b      	strb	r3, [r7, #17]
			break;
 8004740:	e019      	b.n	8004776 <Lora_receive+0x24a>
			newSensor.V_type = vtype;
 8004742:	f897 30f2 	ldrb.w	r3, [r7, #242]	; 0xf2
 8004746:	72bb      	strb	r3, [r7, #10]
			newSensor.V_value = Vperiod;
 8004748:	f8b7 30f4 	ldrh.w	r3, [r7, #244]	; 0xf4
 800474c:	81bb      	strh	r3, [r7, #12]
			newSensor.Battery = vbat;
 800474e:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
 8004752:	727b      	strb	r3, [r7, #9]
			break;
 8004754:	e00f      	b.n	8004776 <Lora_receive+0x24a>
			newSensor.V_type = vtype;
 8004756:	f897 30f2 	ldrb.w	r3, [r7, #242]	; 0xf2
 800475a:	72bb      	strb	r3, [r7, #10]
			memcpy(newSensor.dataCalibBuffer, Vcalib, 100);
 800475c:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8004760:	f107 0308 	add.w	r3, r7, #8
 8004764:	330a      	adds	r3, #10
 8004766:	2264      	movs	r2, #100	; 0x64
 8004768:	4618      	mov	r0, r3
 800476a:	f007 fdaf 	bl	800c2cc <memcpy>
			newSensor.dataCalibAvailable = 1;
 800476e:	2301      	movs	r3, #1
 8004770:	73fb      	strb	r3, [r7, #15]
			break;
 8004772:	e000      	b.n	8004776 <Lora_receive+0x24a>
			break;
 8004774:	bf00      	nop
		}
		list_append(myStation.ssNode_list, newSensor);
 8004776:	4b3d      	ldr	r3, [pc, #244]	; (800486c <Lora_receive+0x340>)
 8004778:	68dc      	ldr	r4, [r3, #12]
 800477a:	4668      	mov	r0, sp
 800477c:	f107 0314 	add.w	r3, r7, #20
 8004780:	2264      	movs	r2, #100	; 0x64
 8004782:	4619      	mov	r1, r3
 8004784:	f007 fda2 	bl	800c2cc <memcpy>
 8004788:	f107 0308 	add.w	r3, r7, #8
 800478c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800478e:	4620      	mov	r0, r4
 8004790:	f001 fba0 	bl	8005ed4 <list_append>
 8004794:	e05e      	b.n	8004854 <Lora_receive+0x328>
	}
	// If Sensor ID is already saved in the Sensor node list
	else {
		Node * current = myStation.ssNode_list->head->next;
 8004796:	4b35      	ldr	r3, [pc, #212]	; (800486c <Lora_receive+0x340>)
 8004798:	68db      	ldr	r3, [r3, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800479e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
		while (current != myStation.ssNode_list->tail)	{
 80047a2:	e050      	b.n	8004846 <Lora_receive+0x31a>
			if (current->SSnode.SSnode_ID == id) {
 80047a4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80047a8:	781b      	ldrb	r3, [r3, #0]
 80047aa:	f897 20df 	ldrb.w	r2, [r7, #223]	; 0xdf
 80047ae:	429a      	cmp	r2, r3
 80047b0:	d144      	bne.n	800483c <Lora_receive+0x310>
				switch (flag)	{
 80047b2:	f897 30f1 	ldrb.w	r3, [r7, #241]	; 0xf1
 80047b6:	2b03      	cmp	r3, #3
 80047b8:	d029      	beq.n	800480e <Lora_receive+0x2e2>
 80047ba:	2b03      	cmp	r3, #3
 80047bc:	dc3a      	bgt.n	8004834 <Lora_receive+0x308>
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d002      	beq.n	80047c8 <Lora_receive+0x29c>
 80047c2:	2b02      	cmp	r3, #2
 80047c4:	d006      	beq.n	80047d4 <Lora_receive+0x2a8>
					current->SSnode.V_type = vtype;
					memcpy(current->SSnode.dataCalibBuffer, Vcalib, 100);
					current->SSnode.dataCalibAvailable = 1;
					break;
				default:
					break;
 80047c6:	e035      	b.n	8004834 <Lora_receive+0x308>
					current->SSnode.sensorMode = modevalue;
 80047c8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80047cc:	f897 20f3 	ldrb.w	r2, [r7, #243]	; 0xf3
 80047d0:	725a      	strb	r2, [r3, #9]
					break;
 80047d2:	e032      	b.n	800483a <Lora_receive+0x30e>
					current->SSnode.V_type = vtype;
 80047d4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80047d8:	f897 20f2 	ldrb.w	r2, [r7, #242]	; 0xf2
 80047dc:	709a      	strb	r2, [r3, #2]
					current->SSnode.V_value = Vperiod;
 80047de:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80047e2:	f8b7 20f4 	ldrh.w	r2, [r7, #244]	; 0xf4
 80047e6:	809a      	strh	r2, [r3, #4]
					current->SSnode.Battery = vbat;
 80047e8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80047ec:	f897 20f7 	ldrb.w	r2, [r7, #247]	; 0xf7
 80047f0:	705a      	strb	r2, [r3, #1]
					if (myStation.prepare_flag) {
 80047f2:	4b1e      	ldr	r3, [pc, #120]	; (800486c <Lora_receive+0x340>)
 80047f4:	781b      	ldrb	r3, [r3, #0]
 80047f6:	f003 0301 	and.w	r3, r3, #1
 80047fa:	b2db      	uxtb	r3, r3
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d01b      	beq.n	8004838 <Lora_receive+0x30c>
						current->SSnode.Ready = 1;
 8004800:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8004804:	7a13      	ldrb	r3, [r2, #8]
 8004806:	f043 0301 	orr.w	r3, r3, #1
 800480a:	7213      	strb	r3, [r2, #8]
					break;
 800480c:	e014      	b.n	8004838 <Lora_receive+0x30c>
					current->SSnode.V_type = vtype;
 800480e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004812:	f897 20f2 	ldrb.w	r2, [r7, #242]	; 0xf2
 8004816:	709a      	strb	r2, [r3, #2]
					memcpy(current->SSnode.dataCalibBuffer, Vcalib, 100);
 8004818:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800481c:	330a      	adds	r3, #10
 800481e:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8004822:	2264      	movs	r2, #100	; 0x64
 8004824:	4618      	mov	r0, r3
 8004826:	f007 fd51 	bl	800c2cc <memcpy>
					current->SSnode.dataCalibAvailable = 1;
 800482a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800482e:	2201      	movs	r2, #1
 8004830:	71da      	strb	r2, [r3, #7]
					break;
 8004832:	e002      	b.n	800483a <Lora_receive+0x30e>
					break;
 8004834:	bf00      	nop
 8004836:	e014      	b.n	8004862 <Lora_receive+0x336>
					break;
 8004838:	bf00      	nop
				}
				return;
 800483a:	e012      	b.n	8004862 <Lora_receive+0x336>
			}
			current = current->next;
 800483c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004842:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
		while (current != myStation.ssNode_list->tail)	{
 8004846:	4b09      	ldr	r3, [pc, #36]	; (800486c <Lora_receive+0x340>)
 8004848:	68db      	ldr	r3, [r3, #12]
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8004850:	429a      	cmp	r2, r3
 8004852:	d1a7      	bne.n	80047a4 <Lora_receive+0x278>
 8004854:	46b5      	mov	sp, r6
 8004856:	e005      	b.n	8004864 <Lora_receive+0x338>
	if (Msg[START_POS] != START_VALUE)	return ;
 8004858:	bf00      	nop
 800485a:	e002      	b.n	8004862 <Lora_receive+0x336>
	if ( !sensorID_validation(id) )	return;
 800485c:	bf00      	nop
 800485e:	e000      	b.n	8004862 <Lora_receive+0x336>
	if (!vtype && !mode)	return;
 8004860:	bf00      	nop
 8004862:	46b5      	mov	sp, r6
		}
	}
}
 8004864:	37fc      	adds	r7, #252	; 0xfc
 8004866:	46bd      	mov	sp, r7
 8004868:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800486c:	20000474 	.word	0x20000474

08004870 <Lora_Setmode>:
/*
 *  @para: checkres : 0 no check
 *  				  1 check
 */
uint8_t Lora_Setmode(sensor_mode_t mode, uint8_t checkres)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b084      	sub	sp, #16
 8004874:	af00      	add	r7, sp, #0
 8004876:	4603      	mov	r3, r0
 8004878:	460a      	mov	r2, r1
 800487a:	71fb      	strb	r3, [r7, #7]
 800487c:	4613      	mov	r3, r2
 800487e:	71bb      	strb	r3, [r7, #6]
	uint8_t len = sprintf((char*)LoraTxbuff, "AT+MODE=%d", mode);
 8004880:	79fb      	ldrb	r3, [r7, #7]
 8004882:	461a      	mov	r2, r3
 8004884:	4918      	ldr	r1, [pc, #96]	; (80048e8 <Lora_Setmode+0x78>)
 8004886:	4819      	ldr	r0, [pc, #100]	; (80048ec <Lora_Setmode+0x7c>)
 8004888:	f008 f894 	bl	800c9b4 <siprintf>
 800488c:	4603      	mov	r3, r0
 800488e:	737b      	strb	r3, [r7, #13]
	isOK = 0;
 8004890:	4b17      	ldr	r3, [pc, #92]	; (80048f0 <Lora_Setmode+0x80>)
 8004892:	2200      	movs	r2, #0
 8004894:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(__LORA_UART, LoraTxbuff, len, LORA_TIMEOUT);
 8004896:	7b7b      	ldrb	r3, [r7, #13]
 8004898:	b29a      	uxth	r2, r3
 800489a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800489e:	4913      	ldr	r1, [pc, #76]	; (80048ec <Lora_Setmode+0x7c>)
 80048a0:	4814      	ldr	r0, [pc, #80]	; (80048f4 <Lora_Setmode+0x84>)
 80048a2:	f006 fbc9 	bl	800b038 <HAL_UART_Transmit>
	// Wait for responding
	switch (checkres)	{
 80048a6:	79bb      	ldrb	r3, [r7, #6]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d016      	beq.n	80048da <Lora_Setmode+0x6a>
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d000      	beq.n	80048b2 <Lora_Setmode+0x42>
				return 1;
			}
		}
		break;
	default :
		break;
 80048b0:	e014      	b.n	80048dc <Lora_Setmode+0x6c>
		for (uint16_t i = 0; i < 500; i++)	{
 80048b2:	2300      	movs	r3, #0
 80048b4:	81fb      	strh	r3, [r7, #14]
 80048b6:	e00b      	b.n	80048d0 <Lora_Setmode+0x60>
			HAL_Delay(2);
 80048b8:	2002      	movs	r0, #2
 80048ba:	f003 fa51 	bl	8007d60 <HAL_Delay>
			if (isOK) {
 80048be:	4b0c      	ldr	r3, [pc, #48]	; (80048f0 <Lora_Setmode+0x80>)
 80048c0:	781b      	ldrb	r3, [r3, #0]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d001      	beq.n	80048ca <Lora_Setmode+0x5a>
				return 1;
 80048c6:	2301      	movs	r3, #1
 80048c8:	e009      	b.n	80048de <Lora_Setmode+0x6e>
		for (uint16_t i = 0; i < 500; i++)	{
 80048ca:	89fb      	ldrh	r3, [r7, #14]
 80048cc:	3301      	adds	r3, #1
 80048ce:	81fb      	strh	r3, [r7, #14]
 80048d0:	89fb      	ldrh	r3, [r7, #14]
 80048d2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80048d6:	d3ef      	bcc.n	80048b8 <Lora_Setmode+0x48>
		break;
 80048d8:	e000      	b.n	80048dc <Lora_Setmode+0x6c>
		break;
 80048da:	bf00      	nop
	}
	return 0;
 80048dc:	2300      	movs	r3, #0
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3710      	adds	r7, #16
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}
 80048e6:	bf00      	nop
 80048e8:	0800f060 	.word	0x0800f060
 80048ec:	20001078 	.word	0x20001078
 80048f0:	200010dc 	.word	0x200010dc
 80048f4:	2000261c 	.word	0x2000261c

080048f8 <init_MQTT>:

uint8_t MQTT_Txbuff [MQTT_TXBUFF_SIZE];


void init_MQTT()
{
 80048f8:	b480      	push	{r7}
 80048fa:	af00      	add	r7, sp, #0
//	mySIM = SIM;
}
 80048fc:	bf00      	nop
 80048fe:	46bd      	mov	sp, r7
 8004900:	bc80      	pop	{r7}
 8004902:	4770      	bx	lr

08004904 <MQTT_getConnectflag>:

uint8_t MQTT_getConnectflag()
{
 8004904:	b480      	push	{r7}
 8004906:	af00      	add	r7, sp, #0
	return mySIM.mqttServer.connect;
 8004908:	4b03      	ldr	r3, [pc, #12]	; (8004918 <MQTT_getConnectflag+0x14>)
 800490a:	7b9b      	ldrb	r3, [r3, #14]
 800490c:	b2db      	uxtb	r3, r3
}
 800490e:	4618      	mov	r0, r3
 8004910:	46bd      	mov	sp, r7
 8004912:	bc80      	pop	{r7}
 8004914:	4770      	bx	lr
 8004916:	bf00      	nop
 8004918:	20001298 	.word	0x20001298

0800491c <getContent>:

}


static uint8_t getContent(content_t contentType, uint8_t *databuffer, uint16_t datalen, uint8_t *getbuffer, uint16_t contentlen)
{
 800491c:	b5b0      	push	{r4, r5, r7, lr}
 800491e:	b092      	sub	sp, #72	; 0x48
 8004920:	af02      	add	r7, sp, #8
 8004922:	60b9      	str	r1, [r7, #8]
 8004924:	607b      	str	r3, [r7, #4]
 8004926:	4603      	mov	r3, r0
 8004928:	73fb      	strb	r3, [r7, #15]
 800492a:	4613      	mov	r3, r2
 800492c:	81bb      	strh	r3, [r7, #12]
	uint16_t gotcontent_len = 0;
 800492e:	2300      	movs	r3, #0
 8004930:	87fb      	strh	r3, [r7, #62]	; 0x3e

	uint8_t *currentPOS ;
	uint16_t databuffer_Remainlen = datalen;
 8004932:	89bb      	ldrh	r3, [r7, #12]
 8004934:	86fb      	strh	r3, [r7, #54]	; 0x36

	uint16_t subcontent_len;
	uint8_t subContentlen_buff[10];
	uint8_t contentsignature[20];
	if (contentType == CONTENT_PAYLOAD) {
 8004936:	7bfb      	ldrb	r3, [r7, #15]
 8004938:	2b01      	cmp	r3, #1
 800493a:	d109      	bne.n	8004950 <getContent+0x34>
		strcpy( (char*)contentsignature, "+CMQTTRXPAYLOAD:");
 800493c:	f107 0314 	add.w	r3, r7, #20
 8004940:	4a36      	ldr	r2, [pc, #216]	; (8004a1c <getContent+0x100>)
 8004942:	461c      	mov	r4, r3
 8004944:	4615      	mov	r5, r2
 8004946:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004948:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800494a:	682b      	ldr	r3, [r5, #0]
 800494c:	7023      	strb	r3, [r4, #0]
 800494e:	e05b      	b.n	8004a08 <getContent+0xec>
 	}
	else if (contentType == CONTENT_TOPIC) {
 8004950:	7bfb      	ldrb	r3, [r7, #15]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d10b      	bne.n	800496e <getContent+0x52>
		strcpy( (char*)contentsignature, "+CMQTTRXTOPIC:");
 8004956:	f107 0314 	add.w	r3, r7, #20
 800495a:	4a31      	ldr	r2, [pc, #196]	; (8004a20 <getContent+0x104>)
 800495c:	461c      	mov	r4, r3
 800495e:	4613      	mov	r3, r2
 8004960:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004962:	c407      	stmia	r4!, {r0, r1, r2}
 8004964:	8023      	strh	r3, [r4, #0]
 8004966:	3402      	adds	r4, #2
 8004968:	0c1b      	lsrs	r3, r3, #16
 800496a:	7023      	strb	r3, [r4, #0]
 800496c:	e04c      	b.n	8004a08 <getContent+0xec>
	}
	else return 0;
 800496e:	2300      	movs	r3, #0
 8004970:	e050      	b.n	8004a14 <getContent+0xf8>

	while ( gotcontent_len < contentlen )
	{
		currentPOS = isWordinBuff(databuffer, databuffer_Remainlen, contentsignature);
 8004972:	f107 0214 	add.w	r2, r7, #20
 8004976:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004978:	4619      	mov	r1, r3
 800497a:	68b8      	ldr	r0, [r7, #8]
 800497c:	f000 fc3a 	bl	80051f4 <isWordinBuff>
 8004980:	63b8      	str	r0, [r7, #56]	; 0x38
		if (currentPOS == NULL)		return  0;
 8004982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004984:	2b00      	cmp	r3, #0
 8004986:	d101      	bne.n	800498c <getContent+0x70>
 8004988:	2300      	movs	r3, #0
 800498a:	e043      	b.n	8004a14 <getContent+0xf8>
		databuffer_Remainlen = getRemainsize( currentPOS, databuffer, databuffer_Remainlen );
 800498c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800498e:	461a      	mov	r2, r3
 8004990:	68b9      	ldr	r1, [r7, #8]
 8004992:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004994:	f000 fcad 	bl	80052f2 <getRemainsize>
 8004998:	4603      	mov	r3, r0
 800499a:	86fb      	strh	r3, [r7, #54]	; 0x36

		// Get subcontent length
		getBetween( (uint8_t*)",", (uint8_t*) "\r", currentPOS, databuffer_Remainlen, subContentlen_buff);
 800499c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800499e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80049a2:	9300      	str	r3, [sp, #0]
 80049a4:	4613      	mov	r3, r2
 80049a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80049a8:	491e      	ldr	r1, [pc, #120]	; (8004a24 <getContent+0x108>)
 80049aa:	481f      	ldr	r0, [pc, #124]	; (8004a28 <getContent+0x10c>)
 80049ac:	f000 fc4e 	bl	800524c <getBetween>
		subcontent_len = atoi( (char*)subContentlen_buff );
 80049b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80049b4:	4618      	mov	r0, r3
 80049b6:	f007 fb2b 	bl	800c010 <atoi>
 80049ba:	4603      	mov	r3, r0
 80049bc:	867b      	strh	r3, [r7, #50]	; 0x32

		// Get subcontent
		while ( *currentPOS != '\n'){
 80049be:	e002      	b.n	80049c6 <getContent+0xaa>
			currentPOS++;
 80049c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049c2:	3301      	adds	r3, #1
 80049c4:	63bb      	str	r3, [r7, #56]	; 0x38
		while ( *currentPOS != '\n'){
 80049c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049c8:	781b      	ldrb	r3, [r3, #0]
 80049ca:	2b0a      	cmp	r3, #10
 80049cc:	d1f8      	bne.n	80049c0 <getContent+0xa4>
		}
		currentPOS++;
 80049ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049d0:	3301      	adds	r3, #1
 80049d2:	63bb      	str	r3, [r7, #56]	; 0x38
		for (uint16_t i = 0; i< subcontent_len; i++)
 80049d4:	2300      	movs	r3, #0
 80049d6:	86bb      	strh	r3, [r7, #52]	; 0x34
 80049d8:	e00d      	b.n	80049f6 <getContent+0xda>
		{
			getbuffer[gotcontent_len++] = currentPOS[i];
 80049da:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80049dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80049de:	441a      	add	r2, r3
 80049e0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80049e2:	1c59      	adds	r1, r3, #1
 80049e4:	87f9      	strh	r1, [r7, #62]	; 0x3e
 80049e6:	4619      	mov	r1, r3
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	440b      	add	r3, r1
 80049ec:	7812      	ldrb	r2, [r2, #0]
 80049ee:	701a      	strb	r2, [r3, #0]
		for (uint16_t i = 0; i< subcontent_len; i++)
 80049f0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80049f2:	3301      	adds	r3, #1
 80049f4:	86bb      	strh	r3, [r7, #52]	; 0x34
 80049f6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80049f8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80049fa:	429a      	cmp	r2, r3
 80049fc:	d3ed      	bcc.n	80049da <getContent+0xbe>
		}

		// Update databuffer
		databuffer = ++currentPOS;
 80049fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a00:	3301      	adds	r3, #1
 8004a02:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a06:	60bb      	str	r3, [r7, #8]
	while ( gotcontent_len < contentlen )
 8004a08:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8004a0a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004a0e:	429a      	cmp	r2, r3
 8004a10:	d3af      	bcc.n	8004972 <getContent+0x56>
	}
	return 1;
 8004a12:	2301      	movs	r3, #1
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	3740      	adds	r7, #64	; 0x40
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bdb0      	pop	{r4, r5, r7, pc}
 8004a1c:	0800f06c 	.word	0x0800f06c
 8004a20:	0800f080 	.word	0x0800f080
 8004a24:	0800f090 	.word	0x0800f090
 8004a28:	0800f094 	.word	0x0800f094

08004a2c <MQTT_receiveGetTopicandPayloadLength>:

uint8_t MQTT_receiveGetTopicandPayloadLength( uint8_t *MQTTbuff, uint16_t buffsize)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b08c      	sub	sp, #48	; 0x30
 8004a30:	af02      	add	r7, sp, #8
 8004a32:	6078      	str	r0, [r7, #4]
 8004a34:	460b      	mov	r3, r1
 8004a36:	807b      	strh	r3, [r7, #2]
	uint8_t topiclen_buff[10];
	uint8_t payloadlen_buff[10];
//	Serial_log_string("MQTTbuffer: ");
//	Serial_log_buffer(MQTTbuff, buffsize);
//	Serial_log_string(" ");
	uint8_t * currentPos = isWordinBuff(MQTTbuff, buffsize, (uint8_t*)"+CMQTTRXSTART:");
 8004a38:	887b      	ldrh	r3, [r7, #2]
 8004a3a:	4a22      	ldr	r2, [pc, #136]	; (8004ac4 <MQTT_receiveGetTopicandPayloadLength+0x98>)
 8004a3c:	4619      	mov	r1, r3
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f000 fbd8 	bl	80051f4 <isWordinBuff>
 8004a44:	6278      	str	r0, [r7, #36]	; 0x24

	uint16_t remainlen = getRemainsize(currentPos, MQTTbuff, buffsize);
 8004a46:	887b      	ldrh	r3, [r7, #2]
 8004a48:	461a      	mov	r2, r3
 8004a4a:	6879      	ldr	r1, [r7, #4]
 8004a4c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004a4e:	f000 fc50 	bl	80052f2 <getRemainsize>
 8004a52:	4603      	mov	r3, r0
 8004a54:	847b      	strh	r3, [r7, #34]	; 0x22

	getBetween( (uint8_t*)",", (uint8_t*)",", currentPos, remainlen, topiclen_buff);
 8004a56:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8004a58:	f107 0318 	add.w	r3, r7, #24
 8004a5c:	9300      	str	r3, [sp, #0]
 8004a5e:	4613      	mov	r3, r2
 8004a60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a62:	4919      	ldr	r1, [pc, #100]	; (8004ac8 <MQTT_receiveGetTopicandPayloadLength+0x9c>)
 8004a64:	4818      	ldr	r0, [pc, #96]	; (8004ac8 <MQTT_receiveGetTopicandPayloadLength+0x9c>)
 8004a66:	f000 fbf1 	bl	800524c <getBetween>
	mySIM.mqttReceive.topicLen = atoi( (char*)topiclen_buff );
 8004a6a:	f107 0318 	add.w	r3, r7, #24
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f007 face 	bl	800c010 <atoi>
 8004a74:	4603      	mov	r3, r0
 8004a76:	b29a      	uxth	r2, r3
 8004a78:	4b14      	ldr	r3, [pc, #80]	; (8004acc <MQTT_receiveGetTopicandPayloadLength+0xa0>)
 8004a7a:	f8a3 215e 	strh.w	r2, [r3, #350]	; 0x15e

	currentPos = isWordinBuff(currentPos, remainlen,(uint8_t*)",");
 8004a7e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004a80:	4a11      	ldr	r2, [pc, #68]	; (8004ac8 <MQTT_receiveGetTopicandPayloadLength+0x9c>)
 8004a82:	4619      	mov	r1, r3
 8004a84:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004a86:	f000 fbb5 	bl	80051f4 <isWordinBuff>
 8004a8a:	6278      	str	r0, [r7, #36]	; 0x24
	currentPos ++;
 8004a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a8e:	3301      	adds	r3, #1
 8004a90:	627b      	str	r3, [r7, #36]	; 0x24

	getBetween( (uint8_t*)",", (uint8_t*)"\r", currentPos, remainlen, payloadlen_buff);
 8004a92:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8004a94:	f107 030c 	add.w	r3, r7, #12
 8004a98:	9300      	str	r3, [sp, #0]
 8004a9a:	4613      	mov	r3, r2
 8004a9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a9e:	490c      	ldr	r1, [pc, #48]	; (8004ad0 <MQTT_receiveGetTopicandPayloadLength+0xa4>)
 8004aa0:	4809      	ldr	r0, [pc, #36]	; (8004ac8 <MQTT_receiveGetTopicandPayloadLength+0x9c>)
 8004aa2:	f000 fbd3 	bl	800524c <getBetween>
	mySIM.mqttReceive.payloadLen = atoi( (char*)payloadlen_buff );
 8004aa6:	f107 030c 	add.w	r3, r7, #12
 8004aaa:	4618      	mov	r0, r3
 8004aac:	f007 fab0 	bl	800c010 <atoi>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	b29a      	uxth	r2, r3
 8004ab4:	4b05      	ldr	r3, [pc, #20]	; (8004acc <MQTT_receiveGetTopicandPayloadLength+0xa0>)
 8004ab6:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134

	return 1;
 8004aba:	2301      	movs	r3, #1
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3728      	adds	r7, #40	; 0x28
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}
 8004ac4:	0800f098 	.word	0x0800f098
 8004ac8:	0800f094 	.word	0x0800f094
 8004acc:	20001298 	.word	0x20001298
 8004ad0:	0800f090 	.word	0x0800f090

08004ad4 <MQTT_receiveGetTopic>:

uint8_t MQTT_receiveGetTopic (uint8_t *MQTTbuff,uint16_t buffsize)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b084      	sub	sp, #16
 8004ad8:	af02      	add	r7, sp, #8
 8004ada:	6078      	str	r0, [r7, #4]
 8004adc:	460b      	mov	r3, r1
 8004ade:	807b      	strh	r3, [r7, #2]
	return getContent(CONTENT_TOPIC, MQTTbuff, buffsize, mySIM.mqttReceive.topic, mySIM.mqttReceive.topicLen);
 8004ae0:	4b07      	ldr	r3, [pc, #28]	; (8004b00 <MQTT_receiveGetTopic+0x2c>)
 8004ae2:	f8b3 315e 	ldrh.w	r3, [r3, #350]	; 0x15e
 8004ae6:	887a      	ldrh	r2, [r7, #2]
 8004ae8:	9300      	str	r3, [sp, #0]
 8004aea:	4b06      	ldr	r3, [pc, #24]	; (8004b04 <MQTT_receiveGetTopic+0x30>)
 8004aec:	6879      	ldr	r1, [r7, #4]
 8004aee:	2000      	movs	r0, #0
 8004af0:	f7ff ff14 	bl	800491c <getContent>
 8004af4:	4603      	mov	r3, r0
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3708      	adds	r7, #8
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}
 8004afe:	bf00      	nop
 8004b00:	20001298 	.word	0x20001298
 8004b04:	200013ce 	.word	0x200013ce

08004b08 <MQTT_receiveGetPayload>:

uint8_t MQTT_receiveGetPayload (uint8_t *MQTTbuff,uint16_t buffsize)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b084      	sub	sp, #16
 8004b0c:	af02      	add	r7, sp, #8
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	460b      	mov	r3, r1
 8004b12:	807b      	strh	r3, [r7, #2]
	return getContent(CONTENT_PAYLOAD, MQTTbuff, buffsize, mySIM.mqttReceive.payload, mySIM.mqttReceive.payloadLen);
 8004b14:	4b07      	ldr	r3, [pc, #28]	; (8004b34 <MQTT_receiveGetPayload+0x2c>)
 8004b16:	f8b3 3134 	ldrh.w	r3, [r3, #308]	; 0x134
 8004b1a:	887a      	ldrh	r2, [r7, #2]
 8004b1c:	9300      	str	r3, [sp, #0]
 8004b1e:	4b06      	ldr	r3, [pc, #24]	; (8004b38 <MQTT_receiveGetPayload+0x30>)
 8004b20:	6879      	ldr	r1, [r7, #4]
 8004b22:	2001      	movs	r0, #1
 8004b24:	f7ff fefa 	bl	800491c <getContent>
 8004b28:	4603      	mov	r3, r0
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3708      	adds	r7, #8
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}
 8004b32:	bf00      	nop
 8004b34:	20001298 	.word	0x20001298
 8004b38:	200012cc 	.word	0x200012cc

08004b3c <MQTT_receive>:

uint8_t MQTT_receive(uint8_t *MQTTbuff,uint16_t buffsize)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b082      	sub	sp, #8
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
 8004b44:	460b      	mov	r3, r1
 8004b46:	807b      	strh	r3, [r7, #2]
	if ( !MQTT_receiveGetTopicandPayloadLength(MQTTbuff, buffsize) ) return 0;
 8004b48:	887b      	ldrh	r3, [r7, #2]
 8004b4a:	4619      	mov	r1, r3
 8004b4c:	6878      	ldr	r0, [r7, #4]
 8004b4e:	f7ff ff6d 	bl	8004a2c <MQTT_receiveGetTopicandPayloadLength>
 8004b52:	4603      	mov	r3, r0
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d101      	bne.n	8004b5c <MQTT_receive+0x20>
 8004b58:	2300      	movs	r3, #0
 8004b5a:	e023      	b.n	8004ba4 <MQTT_receive+0x68>

	memset( mySIM.mqttReceive.payload, 0, MAX_PAYLOAD_LEN );
 8004b5c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004b60:	2100      	movs	r1, #0
 8004b62:	4812      	ldr	r0, [pc, #72]	; (8004bac <MQTT_receive+0x70>)
 8004b64:	f007 fbc0 	bl	800c2e8 <memset>
	memset( mySIM.mqttReceive.topic, 0, MAX_TOPIC_LEN );
 8004b68:	2228      	movs	r2, #40	; 0x28
 8004b6a:	2100      	movs	r1, #0
 8004b6c:	4810      	ldr	r0, [pc, #64]	; (8004bb0 <MQTT_receive+0x74>)
 8004b6e:	f007 fbbb 	bl	800c2e8 <memset>

	if (! MQTT_receiveGetTopic(MQTTbuff, buffsize))		return 0;
 8004b72:	887b      	ldrh	r3, [r7, #2]
 8004b74:	4619      	mov	r1, r3
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f7ff ffac 	bl	8004ad4 <MQTT_receiveGetTopic>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d101      	bne.n	8004b86 <MQTT_receive+0x4a>
 8004b82:	2300      	movs	r3, #0
 8004b84:	e00e      	b.n	8004ba4 <MQTT_receive+0x68>

	if (! MQTT_receiveGetPayload(MQTTbuff, buffsize))	return 0;
 8004b86:	887b      	ldrh	r3, [r7, #2]
 8004b88:	4619      	mov	r1, r3
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f7ff ffbc 	bl	8004b08 <MQTT_receiveGetPayload>
 8004b90:	4603      	mov	r3, r0
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d101      	bne.n	8004b9a <MQTT_receive+0x5e>
 8004b96:	2300      	movs	r3, #0
 8004b98:	e004      	b.n	8004ba4 <MQTT_receive+0x68>

	mySIM.mqttReceive.newEvent = 1;
 8004b9a:	4b06      	ldr	r3, [pc, #24]	; (8004bb4 <MQTT_receive+0x78>)
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	return 1;
 8004ba2:	2301      	movs	r3, #1
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	3708      	adds	r7, #8
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}
 8004bac:	200012cc 	.word	0x200012cc
 8004bb0:	200013ce 	.word	0x200013ce
 8004bb4:	20001298 	.word	0x20001298

08004bb8 <MQTT_connected>:

uint8_t MQTT_connected(void)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b082      	sub	sp, #8
 8004bbc:	af02      	add	r7, sp, #8
	if ( SIM_sendCMD((uint8_t*)"AT+CMQTTDISC?", (uint8_t*)"+CMQTTDISC: 0,0", ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, 1000) == SIM_RES_MSG )
 8004bbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004bc2:	9300      	str	r3, [sp, #0]
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	4906      	ldr	r1, [pc, #24]	; (8004be4 <MQTT_connected+0x2c>)
 8004bca:	4807      	ldr	r0, [pc, #28]	; (8004be8 <MQTT_connected+0x30>)
 8004bcc:	f7fd fd4e 	bl	800266c <SIM_sendCMD>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	2b01      	cmp	r3, #1
 8004bd4:	d101      	bne.n	8004bda <MQTT_connected+0x22>
	{
//		mySIM.mqttServer.connect = 1;
//		Serial_log_string("MQTT is connected to broker\r\n");
		return 1;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e000      	b.n	8004bdc <MQTT_connected+0x24>
	}

//	Serial_log_string("MQTT is disconnected to broker\r\n");
//	mySIM.mqttServer.connect = 0;
	return 0;
 8004bda:	2300      	movs	r3, #0
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}
 8004be2:	bf00      	nop
 8004be4:	0800f0a8 	.word	0x0800f0a8
 8004be8:	0800f0b8 	.word	0x0800f0b8

08004bec <startMQTT>:
//    // Check network availability
//    // Implement your network check logic here
//    return 1; // Replace with your logic
//}
//
uint8_t startMQTT(void) {
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b084      	sub	sp, #16
 8004bf0:	af02      	add	r7, sp, #8
    // Implement starting MQTT logic
	// Return 1 on success, 0 on failure

	uint8_t check = SIM_sendCMD((uint8_t*)"AT+CMQTTSTART", (uint8_t*)"+CMQTTSTART: 0", ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, MQTT_TIMEOUT_SHORT);
 8004bf2:	f44f 7348 	mov.w	r3, #800	; 0x320
 8004bf6:	9300      	str	r3, [sp, #0]
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	490a      	ldr	r1, [pc, #40]	; (8004c28 <startMQTT+0x3c>)
 8004bfe:	480b      	ldr	r0, [pc, #44]	; (8004c2c <startMQTT+0x40>)
 8004c00:	f7fd fd34 	bl	800266c <SIM_sendCMD>
 8004c04:	4603      	mov	r3, r0
 8004c06:	71fb      	strb	r3, [r7, #7]
	if ( check == SIM_RES_MSG )	{
 8004c08:	79fb      	ldrb	r3, [r7, #7]
 8004c0a:	2b01      	cmp	r3, #1
 8004c0c:	d101      	bne.n	8004c12 <startMQTT+0x26>
//		Serial_log_string("start MQTT success\r\n");
		return 1;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	e005      	b.n	8004c1e <startMQTT+0x32>
	}

//	check = SIM_sendCMD((uint8_t*)"AT+CMQTTSTART", (uint8_t*)"ERROR", ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, 2000);
	else if ( check == SIM_ERROR )	{
 8004c12:	79fb      	ldrb	r3, [r7, #7]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d101      	bne.n	8004c1c <startMQTT+0x30>
//		Serial_log_string("start MQTT success\r\n");
		return 1;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	e000      	b.n	8004c1e <startMQTT+0x32>
	}
//	Serial_log_number(check);
//	Serial_log_string("\r\nstart MQTT fail\r\n");
	return 0;
 8004c1c:	2300      	movs	r3, #0
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	3708      	adds	r7, #8
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}
 8004c26:	bf00      	nop
 8004c28:	0800f0c8 	.word	0x0800f0c8
 8004c2c:	0800f0d8 	.word	0x0800f0d8

08004c30 <acquireMQTTclient>:

uint8_t acquireMQTTclient (uint8_t *clientID){
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b084      	sub	sp, #16
 8004c34:	af02      	add	r7, sp, #8
 8004c36:	6078      	str	r0, [r7, #4]
	sprintf((char*)MQTT_Txbuff,"AT+CMQTTACCQ=0,\"%s\"", clientID);
 8004c38:	687a      	ldr	r2, [r7, #4]
 8004c3a:	490b      	ldr	r1, [pc, #44]	; (8004c68 <acquireMQTTclient+0x38>)
 8004c3c:	480b      	ldr	r0, [pc, #44]	; (8004c6c <acquireMQTTclient+0x3c>)
 8004c3e:	f007 feb9 	bl	800c9b4 <siprintf>
	if (SIM_sendCMD(MQTT_Txbuff, (uint8_t*)"OK", ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, MQTT_TIMEOUT_MEDIUM)== SIM_RES_MSG)	{
 8004c42:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8004c46:	9300      	str	r3, [sp, #0]
 8004c48:	2301      	movs	r3, #1
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	4908      	ldr	r1, [pc, #32]	; (8004c70 <acquireMQTTclient+0x40>)
 8004c4e:	4807      	ldr	r0, [pc, #28]	; (8004c6c <acquireMQTTclient+0x3c>)
 8004c50:	f7fd fd0c 	bl	800266c <SIM_sendCMD>
 8004c54:	4603      	mov	r3, r0
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d101      	bne.n	8004c5e <acquireMQTTclient+0x2e>
//		Serial_log_string("acquire MQTT client success\r\n");
		return 1;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e000      	b.n	8004c60 <acquireMQTTclient+0x30>
	}
//	Serial_log_string("acquire MQTT client fail\r\n");
    return 0;
 8004c5e:	2300      	movs	r3, #0
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	3708      	adds	r7, #8
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}
 8004c68:	0800f0e8 	.word	0x0800f0e8
 8004c6c:	200010e0 	.word	0x200010e0
 8004c70:	0800f0fc 	.word	0x0800f0fc

08004c74 <releaseMQTTclient>:
//	}
////	Serial_log_string("acquire MQTT client fail\r\n");
//    return 0;
//}
uint8_t releaseMQTTclient (void)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b082      	sub	sp, #8
 8004c78:	af02      	add	r7, sp, #8
	if (SIM_sendCMD((uint8_t*)"AT+CMQTTREL=0", (uint8_t*)"OK", ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, MQTT_TIMEOUT_SHORT) == SIM_RES_MSG) {
 8004c7a:	f44f 7348 	mov.w	r3, #800	; 0x320
 8004c7e:	9300      	str	r3, [sp, #0]
 8004c80:	2301      	movs	r3, #1
 8004c82:	2201      	movs	r2, #1
 8004c84:	4906      	ldr	r1, [pc, #24]	; (8004ca0 <releaseMQTTclient+0x2c>)
 8004c86:	4807      	ldr	r0, [pc, #28]	; (8004ca4 <releaseMQTTclient+0x30>)
 8004c88:	f7fd fcf0 	bl	800266c <SIM_sendCMD>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	2b01      	cmp	r3, #1
 8004c90:	d101      	bne.n	8004c96 <releaseMQTTclient+0x22>
//		Serial_log_string("release MQTT client success\r\n");
		return 1;
 8004c92:	2301      	movs	r3, #1
 8004c94:	e000      	b.n	8004c98 <releaseMQTTclient+0x24>
	}
//	Serial_log_string("release MQTT client fail\r\n");
	return 0;
 8004c96:	2300      	movs	r3, #0
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}
 8004c9e:	bf00      	nop
 8004ca0:	0800f0fc 	.word	0x0800f0fc
 8004ca4:	0800f100 	.word	0x0800f100

08004ca8 <configureMQTT>:
uint8_t configureMQTT() {
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b084      	sub	sp, #16
 8004cac:	af02      	add	r7, sp, #8
    // Implement MQTT configuration logic
    // Return 1 on success, 0 on failure
	uint8_t wtplen = strlen(mySIM.mqttServer.willtopic);
 8004cae:	4b3b      	ldr	r3, [pc, #236]	; (8004d9c <configureMQTT+0xf4>)
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f7fb fa54 	bl	8000160 <strlen>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	71fb      	strb	r3, [r7, #7]
	sprintf((char*)MQTT_Txbuff,"AT+CMQTTWILLTOPIC=0,%d",wtplen);
 8004cbc:	79fb      	ldrb	r3, [r7, #7]
 8004cbe:	461a      	mov	r2, r3
 8004cc0:	4937      	ldr	r1, [pc, #220]	; (8004da0 <configureMQTT+0xf8>)
 8004cc2:	4838      	ldr	r0, [pc, #224]	; (8004da4 <configureMQTT+0xfc>)
 8004cc4:	f007 fe76 	bl	800c9b4 <siprintf>
	if (SIM_sendCMD(MQTT_Txbuff, (uint8_t*)">", ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, MQTT_TIMEOUT_SHORT) != SIM_RES_MSG)	return 0;
 8004cc8:	f44f 7348 	mov.w	r3, #800	; 0x320
 8004ccc:	9300      	str	r3, [sp, #0]
 8004cce:	2301      	movs	r3, #1
 8004cd0:	2201      	movs	r2, #1
 8004cd2:	4935      	ldr	r1, [pc, #212]	; (8004da8 <configureMQTT+0x100>)
 8004cd4:	4833      	ldr	r0, [pc, #204]	; (8004da4 <configureMQTT+0xfc>)
 8004cd6:	f7fd fcc9 	bl	800266c <SIM_sendCMD>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	2b01      	cmp	r3, #1
 8004cde:	d001      	beq.n	8004ce4 <configureMQTT+0x3c>
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	e057      	b.n	8004d94 <configureMQTT+0xec>

	sprintf((char*)MQTT_Txbuff,"%s",mySIM.mqttServer.willtopic);
 8004ce4:	4b2d      	ldr	r3, [pc, #180]	; (8004d9c <configureMQTT+0xf4>)
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	461a      	mov	r2, r3
 8004cea:	4930      	ldr	r1, [pc, #192]	; (8004dac <configureMQTT+0x104>)
 8004cec:	482d      	ldr	r0, [pc, #180]	; (8004da4 <configureMQTT+0xfc>)
 8004cee:	f007 fe61 	bl	800c9b4 <siprintf>
	if (SIM_sendCMD(MQTT_Txbuff, (uint8_t*)"OK", ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, MQTT_TIMEOUT_SHORT) != SIM_RES_MSG)	return 0;
 8004cf2:	f44f 7348 	mov.w	r3, #800	; 0x320
 8004cf6:	9300      	str	r3, [sp, #0]
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	492c      	ldr	r1, [pc, #176]	; (8004db0 <configureMQTT+0x108>)
 8004cfe:	4829      	ldr	r0, [pc, #164]	; (8004da4 <configureMQTT+0xfc>)
 8004d00:	f7fd fcb4 	bl	800266c <SIM_sendCMD>
 8004d04:	4603      	mov	r3, r0
 8004d06:	2b01      	cmp	r3, #1
 8004d08:	d001      	beq.n	8004d0e <configureMQTT+0x66>
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	e042      	b.n	8004d94 <configureMQTT+0xec>

	uint8_t wmsglen = strlen((char*)mySIM.mqttServer.willmsg);
 8004d0e:	4b23      	ldr	r3, [pc, #140]	; (8004d9c <configureMQTT+0xf4>)
 8004d10:	689b      	ldr	r3, [r3, #8]
 8004d12:	4618      	mov	r0, r3
 8004d14:	f7fb fa24 	bl	8000160 <strlen>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	71bb      	strb	r3, [r7, #6]
	sprintf((char*)MQTT_Txbuff,"AT+CMQTTWILLMSG=0,%d,1",wmsglen);
 8004d1c:	79bb      	ldrb	r3, [r7, #6]
 8004d1e:	461a      	mov	r2, r3
 8004d20:	4924      	ldr	r1, [pc, #144]	; (8004db4 <configureMQTT+0x10c>)
 8004d22:	4820      	ldr	r0, [pc, #128]	; (8004da4 <configureMQTT+0xfc>)
 8004d24:	f007 fe46 	bl	800c9b4 <siprintf>
	if (SIM_sendCMD(MQTT_Txbuff, (uint8_t*)">", ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, MQTT_TIMEOUT_SHORT)!= SIM_RES_MSG)	return 0;
 8004d28:	f44f 7348 	mov.w	r3, #800	; 0x320
 8004d2c:	9300      	str	r3, [sp, #0]
 8004d2e:	2301      	movs	r3, #1
 8004d30:	2201      	movs	r2, #1
 8004d32:	491d      	ldr	r1, [pc, #116]	; (8004da8 <configureMQTT+0x100>)
 8004d34:	481b      	ldr	r0, [pc, #108]	; (8004da4 <configureMQTT+0xfc>)
 8004d36:	f7fd fc99 	bl	800266c <SIM_sendCMD>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d001      	beq.n	8004d44 <configureMQTT+0x9c>
 8004d40:	2300      	movs	r3, #0
 8004d42:	e027      	b.n	8004d94 <configureMQTT+0xec>

	sprintf((char*)MQTT_Txbuff,"%s",mySIM.mqttServer.willmsg);
 8004d44:	4b15      	ldr	r3, [pc, #84]	; (8004d9c <configureMQTT+0xf4>)
 8004d46:	689b      	ldr	r3, [r3, #8]
 8004d48:	461a      	mov	r2, r3
 8004d4a:	4918      	ldr	r1, [pc, #96]	; (8004dac <configureMQTT+0x104>)
 8004d4c:	4815      	ldr	r0, [pc, #84]	; (8004da4 <configureMQTT+0xfc>)
 8004d4e:	f007 fe31 	bl	800c9b4 <siprintf>
	if (SIM_sendCMD(MQTT_Txbuff, (uint8_t*)"OK", ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, MQTT_TIMEOUT_SHORT)!= SIM_RES_MSG)	return 0;
 8004d52:	f44f 7348 	mov.w	r3, #800	; 0x320
 8004d56:	9300      	str	r3, [sp, #0]
 8004d58:	2301      	movs	r3, #1
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	4914      	ldr	r1, [pc, #80]	; (8004db0 <configureMQTT+0x108>)
 8004d5e:	4811      	ldr	r0, [pc, #68]	; (8004da4 <configureMQTT+0xfc>)
 8004d60:	f7fd fc84 	bl	800266c <SIM_sendCMD>
 8004d64:	4603      	mov	r3, r0
 8004d66:	2b01      	cmp	r3, #1
 8004d68:	d001      	beq.n	8004d6e <configureMQTT+0xc6>
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	e012      	b.n	8004d94 <configureMQTT+0xec>

//	if (! SIM_sendCMD((uint8_t*)"AT+CMQTTCFG?", (uint8_t*)"+CMQTTCFG: 0,0", ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, MQTT_TIMEOUT_SHORT))	{

		sprintf((char*)MQTT_Txbuff,"AT+CMQTTCFG=\"checkUTF8\",0,0");
 8004d6e:	4912      	ldr	r1, [pc, #72]	; (8004db8 <configureMQTT+0x110>)
 8004d70:	480c      	ldr	r0, [pc, #48]	; (8004da4 <configureMQTT+0xfc>)
 8004d72:	f007 fe1f 	bl	800c9b4 <siprintf>
		if (! SIM_sendCMD(MQTT_Txbuff, (uint8_t*)"OK", ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, MQTT_TIMEOUT_SHORT))	return 0;
 8004d76:	f44f 7348 	mov.w	r3, #800	; 0x320
 8004d7a:	9300      	str	r3, [sp, #0]
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	2201      	movs	r2, #1
 8004d80:	490b      	ldr	r1, [pc, #44]	; (8004db0 <configureMQTT+0x108>)
 8004d82:	4808      	ldr	r0, [pc, #32]	; (8004da4 <configureMQTT+0xfc>)
 8004d84:	f7fd fc72 	bl	800266c <SIM_sendCMD>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d101      	bne.n	8004d92 <configureMQTT+0xea>
 8004d8e:	2300      	movs	r3, #0
 8004d90:	e000      	b.n	8004d94 <configureMQTT+0xec>
//	}



//	Serial_log_string("config MQTT success\r\n");
    return 1;
 8004d92:	2301      	movs	r3, #1
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	3708      	adds	r7, #8
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}
 8004d9c:	20001298 	.word	0x20001298
 8004da0:	0800f110 	.word	0x0800f110
 8004da4:	200010e0 	.word	0x200010e0
 8004da8:	0800f128 	.word	0x0800f128
 8004dac:	0800f12c 	.word	0x0800f12c
 8004db0:	0800f0fc 	.word	0x0800f0fc
 8004db4:	0800f130 	.word	0x0800f130
 8004db8:	0800f148 	.word	0x0800f148

08004dbc <sendConnectMessage>:

uint8_t sendConnectMessage() {
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b082      	sub	sp, #8
 8004dc0:	af02      	add	r7, sp, #8
    // Implement sending the CONNECT message
    // Return 1 on success, 0 on failure
	sprintf((char*)MQTT_Txbuff,"AT+CMQTTCONNECT=0,\"%s:%d\",%d,1",mySIM.mqttServer.host,mySIM.mqttServer.port,mySIM.mqttClient.keepAliveInterval);
 8004dc2:	4b0f      	ldr	r3, [pc, #60]	; (8004e00 <sendConnectMessage+0x44>)
 8004dc4:	681a      	ldr	r2, [r3, #0]
 8004dc6:	4b0e      	ldr	r3, [pc, #56]	; (8004e00 <sendConnectMessage+0x44>)
 8004dc8:	899b      	ldrh	r3, [r3, #12]
 8004dca:	4619      	mov	r1, r3
 8004dcc:	4b0c      	ldr	r3, [pc, #48]	; (8004e00 <sendConnectMessage+0x44>)
 8004dce:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004dd0:	9300      	str	r3, [sp, #0]
 8004dd2:	460b      	mov	r3, r1
 8004dd4:	490b      	ldr	r1, [pc, #44]	; (8004e04 <sendConnectMessage+0x48>)
 8004dd6:	480c      	ldr	r0, [pc, #48]	; (8004e08 <sendConnectMessage+0x4c>)
 8004dd8:	f007 fdec 	bl	800c9b4 <siprintf>
	if (SIM_sendCMD(MQTT_Txbuff, (uint8_t*)"+CMQTTCONNECT: 0,0", ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, MQTT_TIMEOUT_LONG) == SIM_RES_MSG)
 8004ddc:	f241 3388 	movw	r3, #5000	; 0x1388
 8004de0:	9300      	str	r3, [sp, #0]
 8004de2:	2301      	movs	r3, #1
 8004de4:	2201      	movs	r2, #1
 8004de6:	4909      	ldr	r1, [pc, #36]	; (8004e0c <sendConnectMessage+0x50>)
 8004de8:	4807      	ldr	r0, [pc, #28]	; (8004e08 <sendConnectMessage+0x4c>)
 8004dea:	f7fd fc3f 	bl	800266c <SIM_sendCMD>
 8004dee:	4603      	mov	r3, r0
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	d101      	bne.n	8004df8 <sendConnectMessage+0x3c>
	{
//		Serial_log_string("Connect to broker success\r\n");
		return 1;
 8004df4:	2301      	movs	r3, #1
 8004df6:	e000      	b.n	8004dfa <sendConnectMessage+0x3e>
	}
//	Serial_log_string("Connect to broker fail\r\n");
    return 0;
 8004df8:	2300      	movs	r3, #0
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}
 8004e00:	20001298 	.word	0x20001298
 8004e04:	0800f164 	.word	0x0800f164
 8004e08:	200010e0 	.word	0x200010e0
 8004e0c:	0800f184 	.word	0x0800f184

08004e10 <MQTT_checkNWavailable>:


uint8_t MQTT_checkNWavailable (void)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b082      	sub	sp, #8
 8004e14:	af02      	add	r7, sp, #8
	static uint8_t count = 0;
	if ( !SIM_checkCMD(SIM_CMD_SIMCARD_PIN) ) {
 8004e16:	2000      	movs	r0, #0
 8004e18:	f7fd fc84 	bl	8002724 <SIM_checkCMD>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d124      	bne.n	8004e6c <MQTT_checkNWavailable+0x5c>
		count++;
 8004e22:	4b20      	ldr	r3, [pc, #128]	; (8004ea4 <MQTT_checkNWavailable+0x94>)
 8004e24:	781b      	ldrb	r3, [r3, #0]
 8004e26:	3301      	adds	r3, #1
 8004e28:	b2da      	uxtb	r2, r3
 8004e2a:	4b1e      	ldr	r3, [pc, #120]	; (8004ea4 <MQTT_checkNWavailable+0x94>)
 8004e2c:	701a      	strb	r2, [r3, #0]
		if (count == 10)	{
 8004e2e:	4b1d      	ldr	r3, [pc, #116]	; (8004ea4 <MQTT_checkNWavailable+0x94>)
 8004e30:	781b      	ldrb	r3, [r3, #0]
 8004e32:	2b0a      	cmp	r3, #10
 8004e34:	d118      	bne.n	8004e68 <MQTT_checkNWavailable+0x58>
			count = 0;
 8004e36:	4b1b      	ldr	r3, [pc, #108]	; (8004ea4 <MQTT_checkNWavailable+0x94>)
 8004e38:	2200      	movs	r2, #0
 8004e3a:	701a      	strb	r2, [r3, #0]
			LCD_Clear();
 8004e3c:	f002 f9f8 	bl	8007230 <LCD_Clear>
			LCD_GotoXY(3,0);
 8004e40:	2100      	movs	r1, #0
 8004e42:	2003      	movs	r0, #3
 8004e44:	f002 f9b4 	bl	80071b0 <LCD_GotoXY>
			LCD_Print("NO SIM");
 8004e48:	4817      	ldr	r0, [pc, #92]	; (8004ea8 <MQTT_checkNWavailable+0x98>)
 8004e4a:	f002 f9dc 	bl	8007206 <LCD_Print>

			SIM_sendCMD( (uint8_t*)"AT+CRESET", (uint8_t*)"OK", ENABLE_SIM_CHECKRES,
 8004e4e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8004e52:	9300      	str	r3, [sp, #0]
 8004e54:	2301      	movs	r3, #1
 8004e56:	2201      	movs	r2, #1
 8004e58:	4914      	ldr	r1, [pc, #80]	; (8004eac <MQTT_checkNWavailable+0x9c>)
 8004e5a:	4815      	ldr	r0, [pc, #84]	; (8004eb0 <MQTT_checkNWavailable+0xa0>)
 8004e5c:	f7fd fc06 	bl	800266c <SIM_sendCMD>
						ENABLE_MARKASREAD, SIM_TIMEOUT_LONG);
			HAL_Delay(10000);
 8004e60:	f242 7010 	movw	r0, #10000	; 0x2710
 8004e64:	f002 ff7c 	bl	8007d60 <HAL_Delay>
		}
		return 1;
 8004e68:	2301      	movs	r3, #1
 8004e6a:	e018      	b.n	8004e9e <MQTT_checkNWavailable+0x8e>
	}
//	count = 0;

	if ( !SIM_checkCMD(SIM_CMD_STA_CSQ) ) {
 8004e6c:	2001      	movs	r0, #1
 8004e6e:	f7fd fc59 	bl	8002724 <SIM_checkCMD>
 8004e72:	4603      	mov	r3, r0
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d101      	bne.n	8004e7c <MQTT_checkNWavailable+0x6c>
		return 2;
 8004e78:	2302      	movs	r3, #2
 8004e7a:	e010      	b.n	8004e9e <MQTT_checkNWavailable+0x8e>
	}

	if ( !SIM_checkCMD(SIM_CMD_NW_CREG) ) {
 8004e7c:	2002      	movs	r0, #2
 8004e7e:	f7fd fc51 	bl	8002724 <SIM_checkCMD>
 8004e82:	4603      	mov	r3, r0
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d101      	bne.n	8004e8c <MQTT_checkNWavailable+0x7c>
		return 3;
 8004e88:	2303      	movs	r3, #3
 8004e8a:	e008      	b.n	8004e9e <MQTT_checkNWavailable+0x8e>
	}

	if ( !SIM_checkCMD(SIM_CMD_NW_CPSI) ) {
 8004e8c:	2003      	movs	r0, #3
 8004e8e:	f7fd fc49 	bl	8002724 <SIM_checkCMD>
 8004e92:	4603      	mov	r3, r0
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d101      	bne.n	8004e9c <MQTT_checkNWavailable+0x8c>
		return 4;
 8004e98:	2304      	movs	r3, #4
 8004e9a:	e000      	b.n	8004e9e <MQTT_checkNWavailable+0x8e>
	}
	return 0;
 8004e9c:	2300      	movs	r3, #0
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}
 8004ea4:	200011e0 	.word	0x200011e0
 8004ea8:	0800f198 	.word	0x0800f198
 8004eac:	0800f0fc 	.word	0x0800f0fc
 8004eb0:	0800f1a0 	.word	0x0800f1a0

08004eb4 <MQTT_connect>:
uint8_t MQTT_connect()
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b082      	sub	sp, #8
 8004eb8:	af02      	add	r7, sp, #8
	if ( SIM_sendCMD((uint8_t*)"AT+CMQTTCONNECT?", (uint8_t*)mySIM.mqttServer.host, ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, MQTT_TIMEOUT_MEDIUM) == SIM_RES_MSG )	{
 8004eba:	4b28      	ldr	r3, [pc, #160]	; (8004f5c <MQTT_connect+0xa8>)
 8004ebc:	6819      	ldr	r1, [r3, #0]
 8004ebe:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8004ec2:	9300      	str	r3, [sp, #0]
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	4825      	ldr	r0, [pc, #148]	; (8004f60 <MQTT_connect+0xac>)
 8004eca:	f7fd fbcf 	bl	800266c <SIM_sendCMD>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	d104      	bne.n	8004ede <MQTT_connect+0x2a>
		mySIM.mqttServer.connect = 1;
 8004ed4:	4b21      	ldr	r3, [pc, #132]	; (8004f5c <MQTT_connect+0xa8>)
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	739a      	strb	r2, [r3, #14]
		return 1;
 8004eda:	2301      	movs	r3, #1
 8004edc:	e03a      	b.n	8004f54 <MQTT_connect+0xa0>
	}

	if ( MQTT_checkNWavailable() )  return 0;
 8004ede:	f7ff ff97 	bl	8004e10 <MQTT_checkNWavailable>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d001      	beq.n	8004eec <MQTT_connect+0x38>
 8004ee8:	2300      	movs	r3, #0
 8004eea:	e033      	b.n	8004f54 <MQTT_connect+0xa0>

	if ( !startMQTT() )		return 0;
 8004eec:	f7ff fe7e 	bl	8004bec <startMQTT>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d101      	bne.n	8004efa <MQTT_connect+0x46>
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	e02c      	b.n	8004f54 <MQTT_connect+0xa0>

	if ( !acquireMQTTclient( (uint8_t*)mySIM.mqttClient.clientID) )
 8004efa:	481a      	ldr	r0, [pc, #104]	; (8004f64 <MQTT_connect+0xb0>)
 8004efc:	f7ff fe98 	bl	8004c30 <acquireMQTTclient>
 8004f00:	4603      	mov	r3, r0
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d114      	bne.n	8004f30 <MQTT_connect+0x7c>
	{
		if (MQTT_connected())
 8004f06:	f7ff fe57 	bl	8004bb8 <MQTT_connected>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d002      	beq.n	8004f16 <MQTT_connect+0x62>
		{
			MQTT_disconnect();
 8004f10:	f000 f82e 	bl	8004f70 <MQTT_disconnect>
 8004f14:	e00a      	b.n	8004f2c <MQTT_connect+0x78>
		}
		else
		{
			releaseMQTTclient();
 8004f16:	f7ff fead 	bl	8004c74 <releaseMQTTclient>
			SIM_sendCMD((uint8_t*)"AT+CMQTTSTOP", (uint8_t*)"+CMQTTSTOP: 0",
 8004f1a:	f44f 7348 	mov.w	r3, #800	; 0x320
 8004f1e:	9300      	str	r3, [sp, #0]
 8004f20:	2301      	movs	r3, #1
 8004f22:	2201      	movs	r2, #1
 8004f24:	4910      	ldr	r1, [pc, #64]	; (8004f68 <MQTT_connect+0xb4>)
 8004f26:	4811      	ldr	r0, [pc, #68]	; (8004f6c <MQTT_connect+0xb8>)
 8004f28:	f7fd fba0 	bl	800266c <SIM_sendCMD>
						ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, MQTT_TIMEOUT_SHORT);
		}
		return 0;
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	e011      	b.n	8004f54 <MQTT_connect+0xa0>

	}
	if ( !(configureMQTT()) )		return 0;
 8004f30:	f7ff feba 	bl	8004ca8 <configureMQTT>
 8004f34:	4603      	mov	r3, r0
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d101      	bne.n	8004f3e <MQTT_connect+0x8a>
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	e00a      	b.n	8004f54 <MQTT_connect+0xa0>

	if ( !sendConnectMessage() )	{
 8004f3e:	f7ff ff3d 	bl	8004dbc <sendConnectMessage>
 8004f42:	4603      	mov	r3, r0
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d101      	bne.n	8004f4c <MQTT_connect+0x98>
//		HAL_Delay(500);
		return 0;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	e003      	b.n	8004f54 <MQTT_connect+0xa0>
	}

	mySIM.mqttServer.connect = 1;
 8004f4c:	4b03      	ldr	r3, [pc, #12]	; (8004f5c <MQTT_connect+0xa8>)
 8004f4e:	2201      	movs	r2, #1
 8004f50:	739a      	strb	r2, [r3, #14]
	return 1;
 8004f52:	2301      	movs	r3, #1

}
 8004f54:	4618      	mov	r0, r3
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}
 8004f5a:	bf00      	nop
 8004f5c:	20001298 	.word	0x20001298
 8004f60:	0800f1ac 	.word	0x0800f1ac
 8004f64:	200012a8 	.word	0x200012a8
 8004f68:	0800f1c0 	.word	0x0800f1c0
 8004f6c:	0800f1d0 	.word	0x0800f1d0

08004f70 <MQTT_disconnect>:

uint8_t MQTT_disconnect ()
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b082      	sub	sp, #8
 8004f74:	af02      	add	r7, sp, #8
	if (SIM_sendCMD((uint8_t*)"AT+CMQTTDISC=0,120", (uint8_t*)"+CMQTTDISC: 0,0",
 8004f76:	f44f 7348 	mov.w	r3, #800	; 0x320
 8004f7a:	9300      	str	r3, [sp, #0]
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	2201      	movs	r2, #1
 8004f80:	4912      	ldr	r1, [pc, #72]	; (8004fcc <MQTT_disconnect+0x5c>)
 8004f82:	4813      	ldr	r0, [pc, #76]	; (8004fd0 <MQTT_disconnect+0x60>)
 8004f84:	f7fd fb72 	bl	800266c <SIM_sendCMD>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	2b01      	cmp	r3, #1
 8004f8c:	d001      	beq.n	8004f92 <MQTT_disconnect+0x22>
			ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, MQTT_TIMEOUT_SHORT) != SIM_RES_MSG )		return 0;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	e018      	b.n	8004fc4 <MQTT_disconnect+0x54>

	if ( !releaseMQTTclient() )		return 0;
 8004f92:	f7ff fe6f 	bl	8004c74 <releaseMQTTclient>
 8004f96:	4603      	mov	r3, r0
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d101      	bne.n	8004fa0 <MQTT_disconnect+0x30>
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	e011      	b.n	8004fc4 <MQTT_disconnect+0x54>

	if (SIM_sendCMD((uint8_t*)"AT+CMQTTSTOP", (uint8_t*)"+CMQTTSTOP: 0",
 8004fa0:	f44f 7348 	mov.w	r3, #800	; 0x320
 8004fa4:	9300      	str	r3, [sp, #0]
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	2201      	movs	r2, #1
 8004faa:	490a      	ldr	r1, [pc, #40]	; (8004fd4 <MQTT_disconnect+0x64>)
 8004fac:	480a      	ldr	r0, [pc, #40]	; (8004fd8 <MQTT_disconnect+0x68>)
 8004fae:	f7fd fb5d 	bl	800266c <SIM_sendCMD>
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	d001      	beq.n	8004fbc <MQTT_disconnect+0x4c>
			ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, MQTT_TIMEOUT_SHORT) != SIM_RES_MSG )		return 0;
 8004fb8:	2300      	movs	r3, #0
 8004fba:	e003      	b.n	8004fc4 <MQTT_disconnect+0x54>

	mySIM.mqttServer.connect = 0;
 8004fbc:	4b07      	ldr	r3, [pc, #28]	; (8004fdc <MQTT_disconnect+0x6c>)
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	739a      	strb	r2, [r3, #14]
	return 1;
 8004fc2:	2301      	movs	r3, #1
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}
 8004fca:	bf00      	nop
 8004fcc:	0800f0a8 	.word	0x0800f0a8
 8004fd0:	0800f1e0 	.word	0x0800f1e0
 8004fd4:	0800f1c0 	.word	0x0800f1c0
 8004fd8:	0800f1d0 	.word	0x0800f1d0
 8004fdc:	20001298 	.word	0x20001298

08004fe0 <MQTT_publish>:
uint8_t MQTT_publish(uint8_t *topic, uint8_t *msg, uint16_t msglen)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b088      	sub	sp, #32
 8004fe4:	af02      	add	r7, sp, #8
 8004fe6:	60f8      	str	r0, [r7, #12]
 8004fe8:	60b9      	str	r1, [r7, #8]
 8004fea:	4613      	mov	r3, r2
 8004fec:	80fb      	strh	r3, [r7, #6]
	uint8_t check =0;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	75fb      	strb	r3, [r7, #23]
	uint8_t topiclen= (uint8_t) strlen((char*)topic);
 8004ff2:	68f8      	ldr	r0, [r7, #12]
 8004ff4:	f7fb f8b4 	bl	8000160 <strlen>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	75bb      	strb	r3, [r7, #22]
	sprintf((char*)MQTT_Txbuff,"AT+CMQTTTOPIC=0,%d", topiclen);
 8004ffc:	7dbb      	ldrb	r3, [r7, #22]
 8004ffe:	461a      	mov	r2, r3
 8005000:	4931      	ldr	r1, [pc, #196]	; (80050c8 <MQTT_publish+0xe8>)
 8005002:	4832      	ldr	r0, [pc, #200]	; (80050cc <MQTT_publish+0xec>)
 8005004:	f007 fcd6 	bl	800c9b4 <siprintf>

	if (SIM_sendCMD(MQTT_Txbuff, (uint8_t*)">", ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, MQTT_TIMEOUT_SHORT)!= SIM_RES_MSG)	return 0;
 8005008:	f44f 7348 	mov.w	r3, #800	; 0x320
 800500c:	9300      	str	r3, [sp, #0]
 800500e:	2301      	movs	r3, #1
 8005010:	2201      	movs	r2, #1
 8005012:	492f      	ldr	r1, [pc, #188]	; (80050d0 <MQTT_publish+0xf0>)
 8005014:	482d      	ldr	r0, [pc, #180]	; (80050cc <MQTT_publish+0xec>)
 8005016:	f7fd fb29 	bl	800266c <SIM_sendCMD>
 800501a:	4603      	mov	r3, r0
 800501c:	2b01      	cmp	r3, #1
 800501e:	d001      	beq.n	8005024 <MQTT_publish+0x44>
 8005020:	2300      	movs	r3, #0
 8005022:	e04d      	b.n	80050c0 <MQTT_publish+0xe0>

	HAL_UART_Transmit(&huart1, topic , topiclen, 0xFFFF);
 8005024:	7dbb      	ldrb	r3, [r7, #22]
 8005026:	b29a      	uxth	r2, r3
 8005028:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800502c:	68f9      	ldr	r1, [r7, #12]
 800502e:	4829      	ldr	r0, [pc, #164]	; (80050d4 <MQTT_publish+0xf4>)
 8005030:	f006 f802 	bl	800b038 <HAL_UART_Transmit>
	check = SIM_checkMsg((uint8_t*)"OK", MQTT_TIMEOUT_VERYSHORT);
 8005034:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8005038:	4827      	ldr	r0, [pc, #156]	; (80050d8 <MQTT_publish+0xf8>)
 800503a:	f7fd fa5f 	bl	80024fc <SIM_checkMsg>
 800503e:	4603      	mov	r3, r0
 8005040:	75fb      	strb	r3, [r7, #23]
	MarkAsReadData_SIM();
 8005042:	f7fd fbe1 	bl	8002808 <MarkAsReadData_SIM>
	if (check != SIM_RES_MSG)	return 0;
 8005046:	7dfb      	ldrb	r3, [r7, #23]
 8005048:	2b01      	cmp	r3, #1
 800504a:	d001      	beq.n	8005050 <MQTT_publish+0x70>
 800504c:	2300      	movs	r3, #0
 800504e:	e037      	b.n	80050c0 <MQTT_publish+0xe0>
//	if (SIM_sendCMD(topic, (uint8_t*)"OK", ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, 2000) != SIM_RES_MSG)		return 0;

	sprintf((char*)MQTT_Txbuff, "AT+CMQTTPAYLOAD=0,%d", msglen);
 8005050:	88fb      	ldrh	r3, [r7, #6]
 8005052:	461a      	mov	r2, r3
 8005054:	4921      	ldr	r1, [pc, #132]	; (80050dc <MQTT_publish+0xfc>)
 8005056:	481d      	ldr	r0, [pc, #116]	; (80050cc <MQTT_publish+0xec>)
 8005058:	f007 fcac 	bl	800c9b4 <siprintf>
	if (SIM_sendCMD(MQTT_Txbuff, (uint8_t*)">", ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, MQTT_TIMEOUT_SHORT)!= SIM_RES_MSG)	return 0;
 800505c:	f44f 7348 	mov.w	r3, #800	; 0x320
 8005060:	9300      	str	r3, [sp, #0]
 8005062:	2301      	movs	r3, #1
 8005064:	2201      	movs	r2, #1
 8005066:	491a      	ldr	r1, [pc, #104]	; (80050d0 <MQTT_publish+0xf0>)
 8005068:	4818      	ldr	r0, [pc, #96]	; (80050cc <MQTT_publish+0xec>)
 800506a:	f7fd faff 	bl	800266c <SIM_sendCMD>
 800506e:	4603      	mov	r3, r0
 8005070:	2b01      	cmp	r3, #1
 8005072:	d001      	beq.n	8005078 <MQTT_publish+0x98>
 8005074:	2300      	movs	r3, #0
 8005076:	e023      	b.n	80050c0 <MQTT_publish+0xe0>

	HAL_UART_Transmit(&huart1, msg, msglen, 0xFFFF);
 8005078:	88fa      	ldrh	r2, [r7, #6]
 800507a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800507e:	68b9      	ldr	r1, [r7, #8]
 8005080:	4814      	ldr	r0, [pc, #80]	; (80050d4 <MQTT_publish+0xf4>)
 8005082:	f005 ffd9 	bl	800b038 <HAL_UART_Transmit>
	check = SIM_checkMsg((uint8_t*)"OK", MQTT_TIMEOUT_VERYSHORT);
 8005086:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800508a:	4813      	ldr	r0, [pc, #76]	; (80050d8 <MQTT_publish+0xf8>)
 800508c:	f7fd fa36 	bl	80024fc <SIM_checkMsg>
 8005090:	4603      	mov	r3, r0
 8005092:	75fb      	strb	r3, [r7, #23]
	MarkAsReadData_SIM();
 8005094:	f7fd fbb8 	bl	8002808 <MarkAsReadData_SIM>
	if (check != SIM_RES_MSG)	return 0;
 8005098:	7dfb      	ldrb	r3, [r7, #23]
 800509a:	2b01      	cmp	r3, #1
 800509c:	d001      	beq.n	80050a2 <MQTT_publish+0xc2>
 800509e:	2300      	movs	r3, #0
 80050a0:	e00e      	b.n	80050c0 <MQTT_publish+0xe0>

	if (SIM_sendCMD((uint8_t*)"AT+CMQTTPUB=0,1,60", (uint8_t*)"+CMQTTPUB: 0,0",
 80050a2:	f44f 7348 	mov.w	r3, #800	; 0x320
 80050a6:	9300      	str	r3, [sp, #0]
 80050a8:	2301      	movs	r3, #1
 80050aa:	2201      	movs	r2, #1
 80050ac:	490c      	ldr	r1, [pc, #48]	; (80050e0 <MQTT_publish+0x100>)
 80050ae:	480d      	ldr	r0, [pc, #52]	; (80050e4 <MQTT_publish+0x104>)
 80050b0:	f7fd fadc 	bl	800266c <SIM_sendCMD>
 80050b4:	4603      	mov	r3, r0
 80050b6:	2b01      	cmp	r3, #1
 80050b8:	d001      	beq.n	80050be <MQTT_publish+0xde>
			ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, MQTT_TIMEOUT_SHORT)!= SIM_RES_MSG)	return 0;
 80050ba:	2300      	movs	r3, #0
 80050bc:	e000      	b.n	80050c0 <MQTT_publish+0xe0>

	return 1;
 80050be:	2301      	movs	r3, #1
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	3718      	adds	r7, #24
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}
 80050c8:	0800f1f4 	.word	0x0800f1f4
 80050cc:	200010e0 	.word	0x200010e0
 80050d0:	0800f128 	.word	0x0800f128
 80050d4:	2000258c 	.word	0x2000258c
 80050d8:	0800f0fc 	.word	0x0800f0fc
 80050dc:	0800f208 	.word	0x0800f208
 80050e0:	0800f220 	.word	0x0800f220
 80050e4:	0800f230 	.word	0x0800f230

080050e8 <MQTT_subcribe>:
uint8_t MQTT_subcribe (uint8_t *topic)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b08c      	sub	sp, #48	; 0x30
 80050ec:	af02      	add	r7, sp, #8
 80050ee:	6078      	str	r0, [r7, #4]
	uint8_t topicbuff[30];
	uint8_t topiclen;
	if (strcmp((char*)topic, (char*)TOPIC_SUB) == 0)	{
 80050f0:	492a      	ldr	r1, [pc, #168]	; (800519c <MQTT_subcribe+0xb4>)
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f7fb f82a 	bl	800014c <strcmp>
 80050f8:	4603      	mov	r3, r0
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d10b      	bne.n	8005116 <MQTT_subcribe+0x2e>
		topiclen = sprintf((char*)topicbuff, "%s%d",topic,myStation.stID);
 80050fe:	4b28      	ldr	r3, [pc, #160]	; (80051a0 <MQTT_subcribe+0xb8>)
 8005100:	785b      	ldrb	r3, [r3, #1]
 8005102:	f107 0008 	add.w	r0, r7, #8
 8005106:	687a      	ldr	r2, [r7, #4]
 8005108:	4926      	ldr	r1, [pc, #152]	; (80051a4 <MQTT_subcribe+0xbc>)
 800510a:	f007 fc53 	bl	800c9b4 <siprintf>
 800510e:	4603      	mov	r3, r0
 8005110:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005114:	e00b      	b.n	800512e <MQTT_subcribe+0x46>
	}
	else {
		strcpy((char*)topicbuff,(char*)topic);
 8005116:	f107 0308 	add.w	r3, r7, #8
 800511a:	6879      	ldr	r1, [r7, #4]
 800511c:	4618      	mov	r0, r3
 800511e:	f007 fc69 	bl	800c9f4 <strcpy>
		topiclen = strlen((char*)topic);
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f7fb f81c 	bl	8000160 <strlen>
 8005128:	4603      	mov	r3, r0
 800512a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	sprintf((char*)MQTT_Txbuff,"AT+CMQTTSUBTOPIC=0,%d,1",topiclen);
 800512e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005132:	461a      	mov	r2, r3
 8005134:	491c      	ldr	r1, [pc, #112]	; (80051a8 <MQTT_subcribe+0xc0>)
 8005136:	481d      	ldr	r0, [pc, #116]	; (80051ac <MQTT_subcribe+0xc4>)
 8005138:	f007 fc3c 	bl	800c9b4 <siprintf>
	if (SIM_sendCMD(MQTT_Txbuff, (uint8_t*)">", ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, MQTT_TIMEOUT_SHORT)!= SIM_RES_MSG)	return 0;
 800513c:	f44f 7348 	mov.w	r3, #800	; 0x320
 8005140:	9300      	str	r3, [sp, #0]
 8005142:	2301      	movs	r3, #1
 8005144:	2201      	movs	r2, #1
 8005146:	491a      	ldr	r1, [pc, #104]	; (80051b0 <MQTT_subcribe+0xc8>)
 8005148:	4818      	ldr	r0, [pc, #96]	; (80051ac <MQTT_subcribe+0xc4>)
 800514a:	f7fd fa8f 	bl	800266c <SIM_sendCMD>
 800514e:	4603      	mov	r3, r0
 8005150:	2b01      	cmp	r3, #1
 8005152:	d001      	beq.n	8005158 <MQTT_subcribe+0x70>
 8005154:	2300      	movs	r3, #0
 8005156:	e01d      	b.n	8005194 <MQTT_subcribe+0xac>

	if (SIM_sendCMD(topicbuff, (uint8_t*)"OK", ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, MQTT_TIMEOUT_VERYSHORT) != SIM_RES_MSG)		return 0;
 8005158:	f107 0008 	add.w	r0, r7, #8
 800515c:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8005160:	9300      	str	r3, [sp, #0]
 8005162:	2301      	movs	r3, #1
 8005164:	2201      	movs	r2, #1
 8005166:	4913      	ldr	r1, [pc, #76]	; (80051b4 <MQTT_subcribe+0xcc>)
 8005168:	f7fd fa80 	bl	800266c <SIM_sendCMD>
 800516c:	4603      	mov	r3, r0
 800516e:	2b01      	cmp	r3, #1
 8005170:	d001      	beq.n	8005176 <MQTT_subcribe+0x8e>
 8005172:	2300      	movs	r3, #0
 8005174:	e00e      	b.n	8005194 <MQTT_subcribe+0xac>

	if (SIM_sendCMD((uint8_t*)"AT+CMQTTSUB=0", (uint8_t*)"+CMQTTSUB: 0,0", ENABLE_SIM_CHECKRES,ENABLE_MARKASREAD, MQTT_TIMEOUT_SHORT)!= SIM_RES_MSG) 	return 0;
 8005176:	f44f 7348 	mov.w	r3, #800	; 0x320
 800517a:	9300      	str	r3, [sp, #0]
 800517c:	2301      	movs	r3, #1
 800517e:	2201      	movs	r2, #1
 8005180:	490d      	ldr	r1, [pc, #52]	; (80051b8 <MQTT_subcribe+0xd0>)
 8005182:	480e      	ldr	r0, [pc, #56]	; (80051bc <MQTT_subcribe+0xd4>)
 8005184:	f7fd fa72 	bl	800266c <SIM_sendCMD>
 8005188:	4603      	mov	r3, r0
 800518a:	2b01      	cmp	r3, #1
 800518c:	d001      	beq.n	8005192 <MQTT_subcribe+0xaa>
 800518e:	2300      	movs	r3, #0
 8005190:	e000      	b.n	8005194 <MQTT_subcribe+0xac>

	return 1;
 8005192:	2301      	movs	r3, #1
}
 8005194:	4618      	mov	r0, r3
 8005196:	3728      	adds	r7, #40	; 0x28
 8005198:	46bd      	mov	sp, r7
 800519a:	bd80      	pop	{r7, pc}
 800519c:	0800f244 	.word	0x0800f244
 80051a0:	20000474 	.word	0x20000474
 80051a4:	0800f258 	.word	0x0800f258
 80051a8:	0800f260 	.word	0x0800f260
 80051ac:	200010e0 	.word	0x200010e0
 80051b0:	0800f128 	.word	0x0800f128
 80051b4:	0800f0fc 	.word	0x0800f0fc
 80051b8:	0800f278 	.word	0x0800f278
 80051bc:	0800f288 	.word	0x0800f288

080051c0 <checkSubcribe>:

uint8_t checkSubcribe(uint8_t *topic)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b084      	sub	sp, #16
 80051c4:	af02      	add	r7, sp, #8
 80051c6:	6078      	str	r0, [r7, #4]
	if (SIM_sendCMD((uint8_t*)"AT+CMQTTSUB?", topic,
 80051c8:	f44f 7348 	mov.w	r3, #800	; 0x320
 80051cc:	9300      	str	r3, [sp, #0]
 80051ce:	2301      	movs	r3, #1
 80051d0:	2201      	movs	r2, #1
 80051d2:	6879      	ldr	r1, [r7, #4]
 80051d4:	4806      	ldr	r0, [pc, #24]	; (80051f0 <checkSubcribe+0x30>)
 80051d6:	f7fd fa49 	bl	800266c <SIM_sendCMD>
 80051da:	4603      	mov	r3, r0
 80051dc:	2b01      	cmp	r3, #1
 80051de:	d001      	beq.n	80051e4 <checkSubcribe+0x24>
			ENABLE_SIM_CHECKRES,ENABLE_MARKASREAD, MQTT_TIMEOUT_SHORT) != SIM_RES_MSG) 	return 0;
 80051e0:	2300      	movs	r3, #0
 80051e2:	e000      	b.n	80051e6 <checkSubcribe+0x26>
	return 1;
 80051e4:	2301      	movs	r3, #1
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3708      	adds	r7, #8
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}
 80051ee:	bf00      	nop
 80051f0:	0800f298 	.word	0x0800f298

080051f4 <isWordinBuff>:
#include "String_process.h"
#include <string.h>


uint8_t* isWordinBuff(uint8_t *databuff,uint16_t buff_size, uint8_t *word)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b086      	sub	sp, #24
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	60f8      	str	r0, [r7, #12]
 80051fc:	460b      	mov	r3, r1
 80051fe:	607a      	str	r2, [r7, #4]
 8005200:	817b      	strh	r3, [r7, #10]
	uint8_t wordlen = strlen((char*)word);
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f7fa ffac 	bl	8000160 <strlen>
 8005208:	4603      	mov	r3, r0
 800520a:	757b      	strb	r3, [r7, #21]
	for (uint16_t i = 0; i< buff_size - wordlen + 1; i++)
 800520c:	2300      	movs	r3, #0
 800520e:	82fb      	strh	r3, [r7, #22]
 8005210:	e011      	b.n	8005236 <isWordinBuff+0x42>
	{
		if ( memcmp(databuff +i,word,wordlen) == 0)
 8005212:	8afb      	ldrh	r3, [r7, #22]
 8005214:	68fa      	ldr	r2, [r7, #12]
 8005216:	4413      	add	r3, r2
 8005218:	7d7a      	ldrb	r2, [r7, #21]
 800521a:	6879      	ldr	r1, [r7, #4]
 800521c:	4618      	mov	r0, r3
 800521e:	f007 f845 	bl	800c2ac <memcmp>
 8005222:	4603      	mov	r3, r0
 8005224:	2b00      	cmp	r3, #0
 8005226:	d103      	bne.n	8005230 <isWordinBuff+0x3c>
		{
			return databuff+ i;
 8005228:	8afb      	ldrh	r3, [r7, #22]
 800522a:	68fa      	ldr	r2, [r7, #12]
 800522c:	4413      	add	r3, r2
 800522e:	e009      	b.n	8005244 <isWordinBuff+0x50>
	for (uint16_t i = 0; i< buff_size - wordlen + 1; i++)
 8005230:	8afb      	ldrh	r3, [r7, #22]
 8005232:	3301      	adds	r3, #1
 8005234:	82fb      	strh	r3, [r7, #22]
 8005236:	897a      	ldrh	r2, [r7, #10]
 8005238:	7d7b      	ldrb	r3, [r7, #21]
 800523a:	1ad2      	subs	r2, r2, r3
 800523c:	8afb      	ldrh	r3, [r7, #22]
 800523e:	429a      	cmp	r2, r3
 8005240:	dae7      	bge.n	8005212 <isWordinBuff+0x1e>
		}
	}
	return NULL;
 8005242:	2300      	movs	r3, #0
}
 8005244:	4618      	mov	r0, r3
 8005246:	3718      	adds	r7, #24
 8005248:	46bd      	mov	sp, r7
 800524a:	bd80      	pop	{r7, pc}

0800524c <getBetween>:

uint16_t getBetween(uint8_t *firstWord,uint8_t *lastWord, uint8_t *buff, uint16_t size, uint8_t *getBuff)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b088      	sub	sp, #32
 8005250:	af00      	add	r7, sp, #0
 8005252:	60f8      	str	r0, [r7, #12]
 8005254:	60b9      	str	r1, [r7, #8]
 8005256:	607a      	str	r2, [r7, #4]
 8005258:	807b      	strh	r3, [r7, #2]
	uint8_t fWlen = strlen((char*)firstWord);
 800525a:	68f8      	ldr	r0, [r7, #12]
 800525c:	f7fa ff80 	bl	8000160 <strlen>
 8005260:	4603      	mov	r3, r0
 8005262:	76bb      	strb	r3, [r7, #26]

	uint8_t *Fp =isWordinBuff(buff, size, firstWord);
 8005264:	887b      	ldrh	r3, [r7, #2]
 8005266:	68fa      	ldr	r2, [r7, #12]
 8005268:	4619      	mov	r1, r3
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f7ff ffc2 	bl	80051f4 <isWordinBuff>
 8005270:	61f8      	str	r0, [r7, #28]

	if (Fp == NULL ) return 0;
 8005272:	69fb      	ldr	r3, [r7, #28]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d101      	bne.n	800527c <getBetween+0x30>
 8005278:	2300      	movs	r3, #0
 800527a:	e036      	b.n	80052ea <getBetween+0x9e>
	Fp += fWlen;
 800527c:	7ebb      	ldrb	r3, [r7, #26]
 800527e:	69fa      	ldr	r2, [r7, #28]
 8005280:	4413      	add	r3, r2
 8005282:	61fb      	str	r3, [r7, #28]
	uint8_t remainSize = getRemainsize(Fp, buff, size);
 8005284:	887b      	ldrh	r3, [r7, #2]
 8005286:	461a      	mov	r2, r3
 8005288:	6879      	ldr	r1, [r7, #4]
 800528a:	69f8      	ldr	r0, [r7, #28]
 800528c:	f000 f831 	bl	80052f2 <getRemainsize>
 8005290:	4603      	mov	r3, r0
 8005292:	767b      	strb	r3, [r7, #25]
	uint8_t *Lp = isWordinBuff(Fp, remainSize, lastWord);
 8005294:	7e7b      	ldrb	r3, [r7, #25]
 8005296:	b29b      	uxth	r3, r3
 8005298:	68ba      	ldr	r2, [r7, #8]
 800529a:	4619      	mov	r1, r3
 800529c:	69f8      	ldr	r0, [r7, #28]
 800529e:	f7ff ffa9 	bl	80051f4 <isWordinBuff>
 80052a2:	6178      	str	r0, [r7, #20]
	if (Lp == NULL || Fp >= Lp) return 0;
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d003      	beq.n	80052b2 <getBetween+0x66>
 80052aa:	69fa      	ldr	r2, [r7, #28]
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	429a      	cmp	r2, r3
 80052b0:	d301      	bcc.n	80052b6 <getBetween+0x6a>
 80052b2:	2300      	movs	r3, #0
 80052b4:	e019      	b.n	80052ea <getBetween+0x9e>

	uint8_t getBuffindex =0;
 80052b6:	2300      	movs	r3, #0
 80052b8:	76fb      	strb	r3, [r7, #27]
	while (Fp != Lp)
 80052ba:	e00b      	b.n	80052d4 <getBetween+0x88>
	{
		getBuff[getBuffindex++] = *Fp;
 80052bc:	7efb      	ldrb	r3, [r7, #27]
 80052be:	1c5a      	adds	r2, r3, #1
 80052c0:	76fa      	strb	r2, [r7, #27]
 80052c2:	461a      	mov	r2, r3
 80052c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052c6:	4413      	add	r3, r2
 80052c8:	69fa      	ldr	r2, [r7, #28]
 80052ca:	7812      	ldrb	r2, [r2, #0]
 80052cc:	701a      	strb	r2, [r3, #0]
		Fp ++;
 80052ce:	69fb      	ldr	r3, [r7, #28]
 80052d0:	3301      	adds	r3, #1
 80052d2:	61fb      	str	r3, [r7, #28]
	while (Fp != Lp)
 80052d4:	69fa      	ldr	r2, [r7, #28]
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	429a      	cmp	r2, r3
 80052da:	d1ef      	bne.n	80052bc <getBetween+0x70>
	}
	getBuff[getBuffindex]= '\0';
 80052dc:	7efb      	ldrb	r3, [r7, #27]
 80052de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052e0:	4413      	add	r3, r2
 80052e2:	2200      	movs	r2, #0
 80052e4:	701a      	strb	r2, [r3, #0]
	return getBuffindex;           // length of getBuff
 80052e6:	7efb      	ldrb	r3, [r7, #27]
 80052e8:	b29b      	uxth	r3, r3
}
 80052ea:	4618      	mov	r0, r3
 80052ec:	3720      	adds	r7, #32
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}

080052f2 <getRemainsize>:

uint16_t getRemainsize(uint8_t *Remainbuff, uint8_t *Originbuff, uint16_t originSize)
{
 80052f2:	b480      	push	{r7}
 80052f4:	b085      	sub	sp, #20
 80052f6:	af00      	add	r7, sp, #0
 80052f8:	60f8      	str	r0, [r7, #12]
 80052fa:	60b9      	str	r1, [r7, #8]
 80052fc:	4613      	mov	r3, r2
 80052fe:	80fb      	strh	r3, [r7, #6]
	return originSize-(Remainbuff - Originbuff)/sizeof(uint8_t);
 8005300:	68fa      	ldr	r2, [r7, #12]
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	1ad3      	subs	r3, r2, r3
 8005306:	b29b      	uxth	r3, r3
 8005308:	88fa      	ldrh	r2, [r7, #6]
 800530a:	1ad3      	subs	r3, r2, r3
 800530c:	b29b      	uxth	r3, r3
}
 800530e:	4618      	mov	r0, r3
 8005310:	3714      	adds	r7, #20
 8005312:	46bd      	mov	sp, r7
 8005314:	bc80      	pop	{r7}
 8005316:	4770      	bx	lr

08005318 <twobyte2buff>:
	}
	return count;
}

void twobyte2buff(uint8_t *buffer, uint16_t number)
{
 8005318:	b480      	push	{r7}
 800531a:	b083      	sub	sp, #12
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
 8005320:	460b      	mov	r3, r1
 8005322:	807b      	strh	r3, [r7, #2]
	buffer[0] = ( number >> 8 ) & 0xFF;
 8005324:	887b      	ldrh	r3, [r7, #2]
 8005326:	0a1b      	lsrs	r3, r3, #8
 8005328:	b29b      	uxth	r3, r3
 800532a:	b2da      	uxtb	r2, r3
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	701a      	strb	r2, [r3, #0]
	buffer[1] = number & 0xFF;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	3301      	adds	r3, #1
 8005334:	887a      	ldrh	r2, [r7, #2]
 8005336:	b2d2      	uxtb	r2, r2
 8005338:	701a      	strb	r2, [r3, #0]
}
 800533a:	bf00      	nop
 800533c:	370c      	adds	r7, #12
 800533e:	46bd      	mov	sp, r7
 8005340:	bc80      	pop	{r7}
 8005342:	4770      	bx	lr

08005344 <buff2twobyte>:
uint16_t buff2twobyte (uint8_t *buff)
{
 8005344:	b480      	push	{r7}
 8005346:	b085      	sub	sp, #20
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
	uint16_t value = 0;
 800534c:	2300      	movs	r3, #0
 800534e:	81fb      	strh	r3, [r7, #14]
	value = buff[0] << 8 | buff[1];
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	781b      	ldrb	r3, [r3, #0]
 8005354:	021b      	lsls	r3, r3, #8
 8005356:	b21a      	sxth	r2, r3
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	3301      	adds	r3, #1
 800535c:	781b      	ldrb	r3, [r3, #0]
 800535e:	b21b      	sxth	r3, r3
 8005360:	4313      	orrs	r3, r2
 8005362:	b21b      	sxth	r3, r3
 8005364:	81fb      	strh	r3, [r7, #14]
	return value;
 8005366:	89fb      	ldrh	r3, [r7, #14]
}
 8005368:	4618      	mov	r0, r3
 800536a:	3714      	adds	r7, #20
 800536c:	46bd      	mov	sp, r7
 800536e:	bc80      	pop	{r7}
 8005370:	4770      	bx	lr

08005372 <FourbytenumbertoBuff>:

void FourbytenumbertoBuff(uint32_t inputNumber, uint8_t *Buff)
{
 8005372:	b480      	push	{r7}
 8005374:	b085      	sub	sp, #20
 8005376:	af00      	add	r7, sp, #0
 8005378:	6078      	str	r0, [r7, #4]
 800537a:	6039      	str	r1, [r7, #0]
    uint32_t tmp =inputNumber;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	60fb      	str	r3, [r7, #12]
	for (uint8_t i=0 ;i< 4;i++)
 8005380:	2300      	movs	r3, #0
 8005382:	72fb      	strb	r3, [r7, #11]
 8005384:	e00e      	b.n	80053a4 <FourbytenumbertoBuff+0x32>
	{
		Buff[3-i] = tmp & (0xFF);
 8005386:	7afb      	ldrb	r3, [r7, #11]
 8005388:	f1c3 0303 	rsb	r3, r3, #3
 800538c:	461a      	mov	r2, r3
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	4413      	add	r3, r2
 8005392:	68fa      	ldr	r2, [r7, #12]
 8005394:	b2d2      	uxtb	r2, r2
 8005396:	701a      	strb	r2, [r3, #0]
 		tmp = tmp >>8;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	0a1b      	lsrs	r3, r3, #8
 800539c:	60fb      	str	r3, [r7, #12]
	for (uint8_t i=0 ;i< 4;i++)
 800539e:	7afb      	ldrb	r3, [r7, #11]
 80053a0:	3301      	adds	r3, #1
 80053a2:	72fb      	strb	r3, [r7, #11]
 80053a4:	7afb      	ldrb	r3, [r7, #11]
 80053a6:	2b03      	cmp	r3, #3
 80053a8:	d9ed      	bls.n	8005386 <FourbytenumbertoBuff+0x14>
	}
}
 80053aa:	bf00      	nop
 80053ac:	bf00      	nop
 80053ae:	3714      	adds	r7, #20
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bc80      	pop	{r7}
 80053b4:	4770      	bx	lr

080053b6 <buff2Fourbyte>:

uint32_t buff2Fourbyte(uint8_t *buff)
{
 80053b6:	b480      	push	{r7}
 80053b8:	b085      	sub	sp, #20
 80053ba:	af00      	add	r7, sp, #0
 80053bc:	6078      	str	r0, [r7, #4]
	uint32_t value = 0;
 80053be:	2300      	movs	r3, #0
 80053c0:	60fb      	str	r3, [r7, #12]
	value = buff[0] << 24 | buff[1] << 16 | buff[2] << 8 | buff[3];
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	781b      	ldrb	r3, [r3, #0]
 80053c6:	061a      	lsls	r2, r3, #24
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	3301      	adds	r3, #1
 80053cc:	781b      	ldrb	r3, [r3, #0]
 80053ce:	041b      	lsls	r3, r3, #16
 80053d0:	431a      	orrs	r2, r3
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	3302      	adds	r3, #2
 80053d6:	781b      	ldrb	r3, [r3, #0]
 80053d8:	021b      	lsls	r3, r3, #8
 80053da:	4313      	orrs	r3, r2
 80053dc:	687a      	ldr	r2, [r7, #4]
 80053de:	3203      	adds	r2, #3
 80053e0:	7812      	ldrb	r2, [r2, #0]
 80053e2:	4313      	orrs	r3, r2
 80053e4:	60fb      	str	r3, [r7, #12]
	return value;
 80053e6:	68fb      	ldr	r3, [r7, #12]
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	3714      	adds	r7, #20
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bc80      	pop	{r7}
 80053f0:	4770      	bx	lr

080053f2 <initTask>:


//static Station_t *myStation;

void initTask()
{
 80053f2:	b480      	push	{r7}
 80053f4:	af00      	add	r7, sp, #0
//	myStation = station;
}
 80053f6:	bf00      	nop
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bc80      	pop	{r7}
 80053fc:	4770      	bx	lr
	...

08005400 <checkTaskflag>:

bool checkTaskflag (Task_t task)
{
 8005400:	b480      	push	{r7}
 8005402:	b085      	sub	sp, #20
 8005404:	af00      	add	r7, sp, #0
 8005406:	4603      	mov	r3, r0
 8005408:	71fb      	strb	r3, [r7, #7]
	bool res = false;
 800540a:	2300      	movs	r3, #0
 800540c:	73fb      	strb	r3, [r7, #15]
	switch (task) {
 800540e:	79fb      	ldrb	r3, [r7, #7]
 8005410:	2b10      	cmp	r3, #16
 8005412:	f200 80e0 	bhi.w	80055d6 <checkTaskflag+0x1d6>
 8005416:	a201      	add	r2, pc, #4	; (adr r2, 800541c <checkTaskflag+0x1c>)
 8005418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800541c:	08005461 	.word	0x08005461
 8005420:	08005477 	.word	0x08005477
 8005424:	080054b9 	.word	0x080054b9
 8005428:	080054cf 	.word	0x080054cf
 800542c:	080054a3 	.word	0x080054a3
 8005430:	080054e5 	.word	0x080054e5
 8005434:	080054fb 	.word	0x080054fb
 8005438:	08005527 	.word	0x08005527
 800543c:	08005511 	.word	0x08005511
 8005440:	0800548d 	.word	0x0800548d
 8005444:	0800553d 	.word	0x0800553d
 8005448:	08005553 	.word	0x08005553
 800544c:	08005569 	.word	0x08005569
 8005450:	0800557f 	.word	0x0800557f
 8005454:	08005595 	.word	0x08005595
 8005458:	080055ab 	.word	0x080055ab
 800545c:	080055c1 	.word	0x080055c1
	case TASK_REGISTER:
		res = (bool)myStation.task.register2server ;
 8005460:	4b60      	ldr	r3, [pc, #384]	; (80055e4 <checkTaskflag+0x1e4>)
 8005462:	7c1b      	ldrb	r3, [r3, #16]
 8005464:	f003 0301 	and.w	r3, r3, #1
 8005468:	b2db      	uxtb	r3, r3
 800546a:	2b00      	cmp	r3, #0
 800546c:	bf14      	ite	ne
 800546e:	2301      	movne	r3, #1
 8005470:	2300      	moveq	r3, #0
 8005472:	73fb      	strb	r3, [r7, #15]
		break;
 8005474:	e0b0      	b.n	80055d8 <checkTaskflag+0x1d8>
	case TASK_SUBSCRIBE:
		res = (bool)myStation.task.subscribe;
 8005476:	4b5b      	ldr	r3, [pc, #364]	; (80055e4 <checkTaskflag+0x1e4>)
 8005478:	7c1b      	ldrb	r3, [r3, #16]
 800547a:	f003 0302 	and.w	r3, r3, #2
 800547e:	b2db      	uxtb	r3, r3
 8005480:	2b00      	cmp	r3, #0
 8005482:	bf14      	ite	ne
 8005484:	2301      	movne	r3, #1
 8005486:	2300      	moveq	r3, #0
 8005488:	73fb      	strb	r3, [r7, #15]
		break;
 800548a:	e0a5      	b.n	80055d8 <checkTaskflag+0x1d8>
	case TASK_SEND_MBA_STATUS:
		res = (bool)myStation.task.sendMBAstatus;
 800548c:	4b55      	ldr	r3, [pc, #340]	; (80055e4 <checkTaskflag+0x1e4>)
 800548e:	7c1b      	ldrb	r3, [r3, #16]
 8005490:	f003 0310 	and.w	r3, r3, #16
 8005494:	b2db      	uxtb	r3, r3
 8005496:	2b00      	cmp	r3, #0
 8005498:	bf14      	ite	ne
 800549a:	2301      	movne	r3, #1
 800549c:	2300      	moveq	r3, #0
 800549e:	73fb      	strb	r3, [r7, #15]
		break;
 80054a0:	e09a      	b.n	80055d8 <checkTaskflag+0x1d8>
	case TASK_CTRL_STEPMOR:
		res = (bool)myStation.task.CtrlStepmotor;
 80054a2:	4b50      	ldr	r3, [pc, #320]	; (80055e4 <checkTaskflag+0x1e4>)
 80054a4:	7c1b      	ldrb	r3, [r3, #16]
 80054a6:	f003 0320 	and.w	r3, r3, #32
 80054aa:	b2db      	uxtb	r3, r3
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	bf14      	ite	ne
 80054b0:	2301      	movne	r3, #1
 80054b2:	2300      	moveq	r3, #0
 80054b4:	73fb      	strb	r3, [r7, #15]
		break;
 80054b6:	e08f      	b.n	80055d8 <checkTaskflag+0x1d8>
	case TASK_PREPARE_CALIB:
		res = (bool)myStation.task.PrepareCalib;
 80054b8:	4b4a      	ldr	r3, [pc, #296]	; (80055e4 <checkTaskflag+0x1e4>)
 80054ba:	7c1b      	ldrb	r3, [r3, #16]
 80054bc:	f003 0304 	and.w	r3, r3, #4
 80054c0:	b2db      	uxtb	r3, r3
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	bf14      	ite	ne
 80054c6:	2301      	movne	r3, #1
 80054c8:	2300      	moveq	r3, #0
 80054ca:	73fb      	strb	r3, [r7, #15]
		break;
 80054cc:	e084      	b.n	80055d8 <checkTaskflag+0x1d8>
	case TASK_START_CALIB:
		res = (bool)myStation.task.StartCalib;
 80054ce:	4b45      	ldr	r3, [pc, #276]	; (80055e4 <checkTaskflag+0x1e4>)
 80054d0:	7c1b      	ldrb	r3, [r3, #16]
 80054d2:	f003 0308 	and.w	r3, r3, #8
 80054d6:	b2db      	uxtb	r3, r3
 80054d8:	2b00      	cmp	r3, #0
 80054da:	bf14      	ite	ne
 80054dc:	2301      	movne	r3, #1
 80054de:	2300      	moveq	r3, #0
 80054e0:	73fb      	strb	r3, [r7, #15]
		break;
 80054e2:	e079      	b.n	80055d8 <checkTaskflag+0x1d8>
	case TASK_GET_GPS_TIME:
		res = (bool)myStation.task.getGPStimeflag;
 80054e4:	4b3f      	ldr	r3, [pc, #252]	; (80055e4 <checkTaskflag+0x1e4>)
 80054e6:	7c1b      	ldrb	r3, [r3, #16]
 80054e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054ec:	b2db      	uxtb	r3, r3
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	bf14      	ite	ne
 80054f2:	2301      	movne	r3, #1
 80054f4:	2300      	moveq	r3, #0
 80054f6:	73fb      	strb	r3, [r7, #15]
		break;
 80054f8:	e06e      	b.n	80055d8 <checkTaskflag+0x1d8>
	case TASK_SEND_NWREADY:
		res = (bool)myStation.task.sendNWready;
 80054fa:	4b3a      	ldr	r3, [pc, #232]	; (80055e4 <checkTaskflag+0x1e4>)
 80054fc:	7c5b      	ldrb	r3, [r3, #17]
 80054fe:	f003 0301 	and.w	r3, r3, #1
 8005502:	b2db      	uxtb	r3, r3
 8005504:	2b00      	cmp	r3, #0
 8005506:	bf14      	ite	ne
 8005508:	2301      	movne	r3, #1
 800550a:	2300      	moveq	r3, #0
 800550c:	73fb      	strb	r3, [r7, #15]
		break;
 800550e:	e063      	b.n	80055d8 <checkTaskflag+0x1d8>
	case TASK_SEND_DATACALIB:
		res = (bool)myStation.task.sendDATACALIB;
 8005510:	4b34      	ldr	r3, [pc, #208]	; (80055e4 <checkTaskflag+0x1e4>)
 8005512:	7c5b      	ldrb	r3, [r3, #17]
 8005514:	f003 0302 	and.w	r3, r3, #2
 8005518:	b2db      	uxtb	r3, r3
 800551a:	2b00      	cmp	r3, #0
 800551c:	bf14      	ite	ne
 800551e:	2301      	movne	r3, #1
 8005520:	2300      	moveq	r3, #0
 8005522:	73fb      	strb	r3, [r7, #15]
		break;
 8005524:	e058      	b.n	80055d8 <checkTaskflag+0x1d8>
	case TASK_SEND_DATAPERIOD:
		res = (bool)myStation.task.sendDataPeriod;
 8005526:	4b2f      	ldr	r3, [pc, #188]	; (80055e4 <checkTaskflag+0x1e4>)
 8005528:	7c1b      	ldrb	r3, [r3, #16]
 800552a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800552e:	b2db      	uxtb	r3, r3
 8005530:	2b00      	cmp	r3, #0
 8005532:	bf14      	ite	ne
 8005534:	2301      	movne	r3, #1
 8005536:	2300      	moveq	r3, #0
 8005538:	73fb      	strb	r3, [r7, #15]
		break;
 800553a:	e04d      	b.n	80055d8 <checkTaskflag+0x1d8>
	case TASK_SEND_CTRLMBA:
		res = (bool)myStation.task.sendcmdCtrlMBA;
 800553c:	4b29      	ldr	r3, [pc, #164]	; (80055e4 <checkTaskflag+0x1e4>)
 800553e:	7c5b      	ldrb	r3, [r3, #17]
 8005540:	f003 0304 	and.w	r3, r3, #4
 8005544:	b2db      	uxtb	r3, r3
 8005546:	2b00      	cmp	r3, #0
 8005548:	bf14      	ite	ne
 800554a:	2301      	movne	r3, #1
 800554c:	2300      	moveq	r3, #0
 800554e:	73fb      	strb	r3, [r7, #15]
		break;
 8005550:	e042      	b.n	80055d8 <checkTaskflag+0x1d8>
	case TASK_SEND_CTRLSTEPMOR:
		res = (bool)myStation.task.sendcmdCtrlStepmotor;
 8005552:	4b24      	ldr	r3, [pc, #144]	; (80055e4 <checkTaskflag+0x1e4>)
 8005554:	7c5b      	ldrb	r3, [r3, #17]
 8005556:	f003 0308 	and.w	r3, r3, #8
 800555a:	b2db      	uxtb	r3, r3
 800555c:	2b00      	cmp	r3, #0
 800555e:	bf14      	ite	ne
 8005560:	2301      	movne	r3, #1
 8005562:	2300      	moveq	r3, #0
 8005564:	73fb      	strb	r3, [r7, #15]
		break;
 8005566:	e037      	b.n	80055d8 <checkTaskflag+0x1d8>
	case TASK_SEND_CALIB:
		res = (bool)myStation.task.sendcmdCalib;
 8005568:	4b1e      	ldr	r3, [pc, #120]	; (80055e4 <checkTaskflag+0x1e4>)
 800556a:	7c5b      	ldrb	r3, [r3, #17]
 800556c:	f003 0310 	and.w	r3, r3, #16
 8005570:	b2db      	uxtb	r3, r3
 8005572:	2b00      	cmp	r3, #0
 8005574:	bf14      	ite	ne
 8005576:	2301      	movne	r3, #1
 8005578:	2300      	moveq	r3, #0
 800557a:	73fb      	strb	r3, [r7, #15]
		break;
 800557c:	e02c      	b.n	80055d8 <checkTaskflag+0x1d8>
	case TASK_SEND_GETSTATUS:
		res = (bool)myStation.task.sendcmdGetstatus;
 800557e:	4b19      	ldr	r3, [pc, #100]	; (80055e4 <checkTaskflag+0x1e4>)
 8005580:	7c5b      	ldrb	r3, [r3, #17]
 8005582:	f003 0320 	and.w	r3, r3, #32
 8005586:	b2db      	uxtb	r3, r3
 8005588:	2b00      	cmp	r3, #0
 800558a:	bf14      	ite	ne
 800558c:	2301      	movne	r3, #1
 800558e:	2300      	moveq	r3, #0
 8005590:	73fb      	strb	r3, [r7, #15]
		break;
 8005592:	e021      	b.n	80055d8 <checkTaskflag+0x1d8>
	case TASK_SEND_GETSTATION:
		res = (bool)myStation.task.sendcmdGetstation;
 8005594:	4b13      	ldr	r3, [pc, #76]	; (80055e4 <checkTaskflag+0x1e4>)
 8005596:	7c5b      	ldrb	r3, [r3, #17]
 8005598:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800559c:	b2db      	uxtb	r3, r3
 800559e:	2b00      	cmp	r3, #0
 80055a0:	bf14      	ite	ne
 80055a2:	2301      	movne	r3, #1
 80055a4:	2300      	moveq	r3, #0
 80055a6:	73fb      	strb	r3, [r7, #15]
		break;
 80055a8:	e016      	b.n	80055d8 <checkTaskflag+0x1d8>
	case TASK_SEND_GETSENSOR:
		res = (bool)myStation.task.sendcmdGetsensor;
 80055aa:	4b0e      	ldr	r3, [pc, #56]	; (80055e4 <checkTaskflag+0x1e4>)
 80055ac:	7c5b      	ldrb	r3, [r3, #17]
 80055ae:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80055b2:	b2db      	uxtb	r3, r3
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	bf14      	ite	ne
 80055b8:	2301      	movne	r3, #1
 80055ba:	2300      	moveq	r3, #0
 80055bc:	73fb      	strb	r3, [r7, #15]
		break;
 80055be:	e00b      	b.n	80055d8 <checkTaskflag+0x1d8>
	case TASK_SEND_STEP_LIMIT:
		res = (bool)myStation.task.sendSTEPLIMIT;
 80055c0:	4b08      	ldr	r3, [pc, #32]	; (80055e4 <checkTaskflag+0x1e4>)
 80055c2:	7c9b      	ldrb	r3, [r3, #18]
 80055c4:	f003 0301 	and.w	r3, r3, #1
 80055c8:	b2db      	uxtb	r3, r3
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	bf14      	ite	ne
 80055ce:	2301      	movne	r3, #1
 80055d0:	2300      	moveq	r3, #0
 80055d2:	73fb      	strb	r3, [r7, #15]
		break;
 80055d4:	e000      	b.n	80055d8 <checkTaskflag+0x1d8>
	default:
		break;
 80055d6:	bf00      	nop
	}
	return res;
 80055d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3714      	adds	r7, #20
 80055de:	46bd      	mov	sp, r7
 80055e0:	bc80      	pop	{r7}
 80055e2:	4770      	bx	lr
 80055e4:	20000474 	.word	0x20000474

080055e8 <triggerTaskflag>:



void triggerTaskflag (Task_t task, Flag_t ENorDIS)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b083      	sub	sp, #12
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	4603      	mov	r3, r0
 80055f0:	460a      	mov	r2, r1
 80055f2:	71fb      	strb	r3, [r7, #7]
 80055f4:	4613      	mov	r3, r2
 80055f6:	71bb      	strb	r3, [r7, #6]
	switch (task) {
 80055f8:	79fb      	ldrb	r3, [r7, #7]
 80055fa:	2b10      	cmp	r3, #16
 80055fc:	f200 80cf 	bhi.w	800579e <triggerTaskflag+0x1b6>
 8005600:	a201      	add	r2, pc, #4	; (adr r2, 8005608 <triggerTaskflag+0x20>)
 8005602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005606:	bf00      	nop
 8005608:	0800564d 	.word	0x0800564d
 800560c:	08005661 	.word	0x08005661
 8005610:	0800569d 	.word	0x0800569d
 8005614:	080056b1 	.word	0x080056b1
 8005618:	08005689 	.word	0x08005689
 800561c:	080056c5 	.word	0x080056c5
 8005620:	080056d9 	.word	0x080056d9
 8005624:	08005701 	.word	0x08005701
 8005628:	080056ed 	.word	0x080056ed
 800562c:	08005675 	.word	0x08005675
 8005630:	08005715 	.word	0x08005715
 8005634:	08005729 	.word	0x08005729
 8005638:	0800573d 	.word	0x0800573d
 800563c:	08005751 	.word	0x08005751
 8005640:	08005765 	.word	0x08005765
 8005644:	08005779 	.word	0x08005779
 8005648:	0800578d 	.word	0x0800578d
	case TASK_REGISTER:
		myStation.task.register2server = ENorDIS;
 800564c:	79bb      	ldrb	r3, [r7, #6]
 800564e:	f003 0301 	and.w	r3, r3, #1
 8005652:	b2d9      	uxtb	r1, r3
 8005654:	4a55      	ldr	r2, [pc, #340]	; (80057ac <triggerTaskflag+0x1c4>)
 8005656:	7c13      	ldrb	r3, [r2, #16]
 8005658:	f361 0300 	bfi	r3, r1, #0, #1
 800565c:	7413      	strb	r3, [r2, #16]
		break;
 800565e:	e09f      	b.n	80057a0 <triggerTaskflag+0x1b8>
	case TASK_SUBSCRIBE:
		myStation.task.subscribe = ENorDIS;
 8005660:	79bb      	ldrb	r3, [r7, #6]
 8005662:	f003 0301 	and.w	r3, r3, #1
 8005666:	b2d9      	uxtb	r1, r3
 8005668:	4a50      	ldr	r2, [pc, #320]	; (80057ac <triggerTaskflag+0x1c4>)
 800566a:	7c13      	ldrb	r3, [r2, #16]
 800566c:	f361 0341 	bfi	r3, r1, #1, #1
 8005670:	7413      	strb	r3, [r2, #16]
		break;
 8005672:	e095      	b.n	80057a0 <triggerTaskflag+0x1b8>
	case TASK_SEND_MBA_STATUS:
		myStation.task.sendMBAstatus = ENorDIS;
 8005674:	79bb      	ldrb	r3, [r7, #6]
 8005676:	f003 0301 	and.w	r3, r3, #1
 800567a:	b2d9      	uxtb	r1, r3
 800567c:	4a4b      	ldr	r2, [pc, #300]	; (80057ac <triggerTaskflag+0x1c4>)
 800567e:	7c13      	ldrb	r3, [r2, #16]
 8005680:	f361 1304 	bfi	r3, r1, #4, #1
 8005684:	7413      	strb	r3, [r2, #16]
		break;
 8005686:	e08b      	b.n	80057a0 <triggerTaskflag+0x1b8>
	case TASK_CTRL_STEPMOR:
		myStation.task.CtrlStepmotor = ENorDIS;
 8005688:	79bb      	ldrb	r3, [r7, #6]
 800568a:	f003 0301 	and.w	r3, r3, #1
 800568e:	b2d9      	uxtb	r1, r3
 8005690:	4a46      	ldr	r2, [pc, #280]	; (80057ac <triggerTaskflag+0x1c4>)
 8005692:	7c13      	ldrb	r3, [r2, #16]
 8005694:	f361 1345 	bfi	r3, r1, #5, #1
 8005698:	7413      	strb	r3, [r2, #16]
		break;
 800569a:	e081      	b.n	80057a0 <triggerTaskflag+0x1b8>
	case TASK_PREPARE_CALIB:
		myStation.task.PrepareCalib = ENorDIS;
 800569c:	79bb      	ldrb	r3, [r7, #6]
 800569e:	f003 0301 	and.w	r3, r3, #1
 80056a2:	b2d9      	uxtb	r1, r3
 80056a4:	4a41      	ldr	r2, [pc, #260]	; (80057ac <triggerTaskflag+0x1c4>)
 80056a6:	7c13      	ldrb	r3, [r2, #16]
 80056a8:	f361 0382 	bfi	r3, r1, #2, #1
 80056ac:	7413      	strb	r3, [r2, #16]
		break;
 80056ae:	e077      	b.n	80057a0 <triggerTaskflag+0x1b8>
	case TASK_START_CALIB:
		myStation.task.StartCalib = ENorDIS;
 80056b0:	79bb      	ldrb	r3, [r7, #6]
 80056b2:	f003 0301 	and.w	r3, r3, #1
 80056b6:	b2d9      	uxtb	r1, r3
 80056b8:	4a3c      	ldr	r2, [pc, #240]	; (80057ac <triggerTaskflag+0x1c4>)
 80056ba:	7c13      	ldrb	r3, [r2, #16]
 80056bc:	f361 03c3 	bfi	r3, r1, #3, #1
 80056c0:	7413      	strb	r3, [r2, #16]
		break;
 80056c2:	e06d      	b.n	80057a0 <triggerTaskflag+0x1b8>
	case TASK_GET_GPS_TIME:
		myStation.task.getGPStimeflag = ENorDIS;
 80056c4:	79bb      	ldrb	r3, [r7, #6]
 80056c6:	f003 0301 	and.w	r3, r3, #1
 80056ca:	b2d9      	uxtb	r1, r3
 80056cc:	4a37      	ldr	r2, [pc, #220]	; (80057ac <triggerTaskflag+0x1c4>)
 80056ce:	7c13      	ldrb	r3, [r2, #16]
 80056d0:	f361 1386 	bfi	r3, r1, #6, #1
 80056d4:	7413      	strb	r3, [r2, #16]
		break;
 80056d6:	e063      	b.n	80057a0 <triggerTaskflag+0x1b8>
	case TASK_SEND_NWREADY:
		myStation.task.sendNWready = ENorDIS;
 80056d8:	79bb      	ldrb	r3, [r7, #6]
 80056da:	f003 0301 	and.w	r3, r3, #1
 80056de:	b2d9      	uxtb	r1, r3
 80056e0:	4a32      	ldr	r2, [pc, #200]	; (80057ac <triggerTaskflag+0x1c4>)
 80056e2:	7c53      	ldrb	r3, [r2, #17]
 80056e4:	f361 0300 	bfi	r3, r1, #0, #1
 80056e8:	7453      	strb	r3, [r2, #17]
		break;
 80056ea:	e059      	b.n	80057a0 <triggerTaskflag+0x1b8>
	case TASK_SEND_DATACALIB:
		myStation.task.sendDATACALIB = ENorDIS;
 80056ec:	79bb      	ldrb	r3, [r7, #6]
 80056ee:	f003 0301 	and.w	r3, r3, #1
 80056f2:	b2d9      	uxtb	r1, r3
 80056f4:	4a2d      	ldr	r2, [pc, #180]	; (80057ac <triggerTaskflag+0x1c4>)
 80056f6:	7c53      	ldrb	r3, [r2, #17]
 80056f8:	f361 0341 	bfi	r3, r1, #1, #1
 80056fc:	7453      	strb	r3, [r2, #17]
		break;
 80056fe:	e04f      	b.n	80057a0 <triggerTaskflag+0x1b8>
	case TASK_SEND_DATAPERIOD:
		myStation.task.sendDataPeriod = ENorDIS;
 8005700:	79bb      	ldrb	r3, [r7, #6]
 8005702:	f003 0301 	and.w	r3, r3, #1
 8005706:	b2d9      	uxtb	r1, r3
 8005708:	4a28      	ldr	r2, [pc, #160]	; (80057ac <triggerTaskflag+0x1c4>)
 800570a:	7c13      	ldrb	r3, [r2, #16]
 800570c:	f361 13c7 	bfi	r3, r1, #7, #1
 8005710:	7413      	strb	r3, [r2, #16]
		break;
 8005712:	e045      	b.n	80057a0 <triggerTaskflag+0x1b8>
	case TASK_SEND_CTRLMBA:
		myStation.task.sendcmdCtrlMBA = ENorDIS;
 8005714:	79bb      	ldrb	r3, [r7, #6]
 8005716:	f003 0301 	and.w	r3, r3, #1
 800571a:	b2d9      	uxtb	r1, r3
 800571c:	4a23      	ldr	r2, [pc, #140]	; (80057ac <triggerTaskflag+0x1c4>)
 800571e:	7c53      	ldrb	r3, [r2, #17]
 8005720:	f361 0382 	bfi	r3, r1, #2, #1
 8005724:	7453      	strb	r3, [r2, #17]
		break;
 8005726:	e03b      	b.n	80057a0 <triggerTaskflag+0x1b8>
	case TASK_SEND_CTRLSTEPMOR:
		myStation.task.sendcmdCtrlStepmotor = ENorDIS;
 8005728:	79bb      	ldrb	r3, [r7, #6]
 800572a:	f003 0301 	and.w	r3, r3, #1
 800572e:	b2d9      	uxtb	r1, r3
 8005730:	4a1e      	ldr	r2, [pc, #120]	; (80057ac <triggerTaskflag+0x1c4>)
 8005732:	7c53      	ldrb	r3, [r2, #17]
 8005734:	f361 03c3 	bfi	r3, r1, #3, #1
 8005738:	7453      	strb	r3, [r2, #17]
		break;
 800573a:	e031      	b.n	80057a0 <triggerTaskflag+0x1b8>
	case TASK_SEND_CALIB:
		myStation.task.sendcmdCalib = ENorDIS;
 800573c:	79bb      	ldrb	r3, [r7, #6]
 800573e:	f003 0301 	and.w	r3, r3, #1
 8005742:	b2d9      	uxtb	r1, r3
 8005744:	4a19      	ldr	r2, [pc, #100]	; (80057ac <triggerTaskflag+0x1c4>)
 8005746:	7c53      	ldrb	r3, [r2, #17]
 8005748:	f361 1304 	bfi	r3, r1, #4, #1
 800574c:	7453      	strb	r3, [r2, #17]
		break;
 800574e:	e027      	b.n	80057a0 <triggerTaskflag+0x1b8>
	case TASK_SEND_GETSTATUS:
		myStation.task.sendcmdGetstatus = ENorDIS;
 8005750:	79bb      	ldrb	r3, [r7, #6]
 8005752:	f003 0301 	and.w	r3, r3, #1
 8005756:	b2d9      	uxtb	r1, r3
 8005758:	4a14      	ldr	r2, [pc, #80]	; (80057ac <triggerTaskflag+0x1c4>)
 800575a:	7c53      	ldrb	r3, [r2, #17]
 800575c:	f361 1345 	bfi	r3, r1, #5, #1
 8005760:	7453      	strb	r3, [r2, #17]
		break;
 8005762:	e01d      	b.n	80057a0 <triggerTaskflag+0x1b8>
	case TASK_SEND_GETSTATION:
		myStation.task.sendcmdGetstation = ENorDIS;
 8005764:	79bb      	ldrb	r3, [r7, #6]
 8005766:	f003 0301 	and.w	r3, r3, #1
 800576a:	b2d9      	uxtb	r1, r3
 800576c:	4a0f      	ldr	r2, [pc, #60]	; (80057ac <triggerTaskflag+0x1c4>)
 800576e:	7c53      	ldrb	r3, [r2, #17]
 8005770:	f361 1386 	bfi	r3, r1, #6, #1
 8005774:	7453      	strb	r3, [r2, #17]
		break;
 8005776:	e013      	b.n	80057a0 <triggerTaskflag+0x1b8>
	case TASK_SEND_GETSENSOR:
		myStation.task.sendcmdGetsensor = ENorDIS;
 8005778:	79bb      	ldrb	r3, [r7, #6]
 800577a:	f003 0301 	and.w	r3, r3, #1
 800577e:	b2d9      	uxtb	r1, r3
 8005780:	4a0a      	ldr	r2, [pc, #40]	; (80057ac <triggerTaskflag+0x1c4>)
 8005782:	7c53      	ldrb	r3, [r2, #17]
 8005784:	f361 13c7 	bfi	r3, r1, #7, #1
 8005788:	7453      	strb	r3, [r2, #17]
		break;
 800578a:	e009      	b.n	80057a0 <triggerTaskflag+0x1b8>
	case TASK_SEND_STEP_LIMIT:
		myStation.task.sendSTEPLIMIT = ENorDIS;
 800578c:	79bb      	ldrb	r3, [r7, #6]
 800578e:	f003 0301 	and.w	r3, r3, #1
 8005792:	b2d9      	uxtb	r1, r3
 8005794:	4a05      	ldr	r2, [pc, #20]	; (80057ac <triggerTaskflag+0x1c4>)
 8005796:	7c93      	ldrb	r3, [r2, #18]
 8005798:	f361 0300 	bfi	r3, r1, #0, #1
 800579c:	7493      	strb	r3, [r2, #18]
	default:
		break;
 800579e:	bf00      	nop
	}
	return ;
 80057a0:	bf00      	nop
}
 80057a2:	370c      	adds	r7, #12
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bc80      	pop	{r7}
 80057a8:	4770      	bx	lr
 80057aa:	bf00      	nop
 80057ac:	20000474 	.word	0x20000474

080057b0 <validationID>:

#define MAX_SENSOR_ID		0xFE
#define MIN_SENSOR_ID		0x51

bool validationID(uint16_t ID, ID_t idtype)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b084      	sub	sp, #16
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	4603      	mov	r3, r0
 80057b8:	460a      	mov	r2, r1
 80057ba:	80fb      	strh	r3, [r7, #6]
 80057bc:	4613      	mov	r3, r2
 80057be:	717b      	strb	r3, [r7, #5]
	bool res = false;
 80057c0:	2300      	movs	r3, #0
 80057c2:	73fb      	strb	r3, [r7, #15]
	switch (idtype)	{
 80057c4:	797b      	ldrb	r3, [r7, #5]
 80057c6:	2b01      	cmp	r3, #1
 80057c8:	d009      	beq.n	80057de <validationID+0x2e>
 80057ca:	2b02      	cmp	r3, #2
 80057cc:	d10f      	bne.n	80057ee <validationID+0x3e>
	case ID_SENSOR:
		res = sensorID_validation(ID);
 80057ce:	88fb      	ldrh	r3, [r7, #6]
 80057d0:	b2db      	uxtb	r3, r3
 80057d2:	4618      	mov	r0, r3
 80057d4:	f000 f824 	bl	8005820 <sensorID_validation>
 80057d8:	4603      	mov	r3, r0
 80057da:	73fb      	strb	r3, [r7, #15]
		break;
 80057dc:	e008      	b.n	80057f0 <validationID+0x40>
	case ID_STATION:
		res = stationID_validation(ID);
 80057de:	88fb      	ldrh	r3, [r7, #6]
 80057e0:	b2db      	uxtb	r3, r3
 80057e2:	4618      	mov	r0, r3
 80057e4:	f000 f809 	bl	80057fa <stationID_validation>
 80057e8:	4603      	mov	r3, r0
 80057ea:	73fb      	strb	r3, [r7, #15]
		break;
 80057ec:	e000      	b.n	80057f0 <validationID+0x40>
	default:
		break;
 80057ee:	bf00      	nop
	}
	return res;
 80057f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	3710      	adds	r7, #16
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}

080057fa <stationID_validation>:

bool stationID_validation(uint8_t ID)
{
 80057fa:	b480      	push	{r7}
 80057fc:	b083      	sub	sp, #12
 80057fe:	af00      	add	r7, sp, #0
 8005800:	4603      	mov	r3, r0
 8005802:	71fb      	strb	r3, [r7, #7]
	if (ID >= MIN_STATION_ID && ID <= MAX_STATION_ID)	return true;
 8005804:	79fb      	ldrb	r3, [r7, #7]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d004      	beq.n	8005814 <stationID_validation+0x1a>
 800580a:	79fb      	ldrb	r3, [r7, #7]
 800580c:	2b50      	cmp	r3, #80	; 0x50
 800580e:	d801      	bhi.n	8005814 <stationID_validation+0x1a>
 8005810:	2301      	movs	r3, #1
 8005812:	e000      	b.n	8005816 <stationID_validation+0x1c>
	return false;
 8005814:	2300      	movs	r3, #0
}
 8005816:	4618      	mov	r0, r3
 8005818:	370c      	adds	r7, #12
 800581a:	46bd      	mov	sp, r7
 800581c:	bc80      	pop	{r7}
 800581e:	4770      	bx	lr

08005820 <sensorID_validation>:

bool sensorID_validation(uint8_t ID)
{
 8005820:	b480      	push	{r7}
 8005822:	b083      	sub	sp, #12
 8005824:	af00      	add	r7, sp, #0
 8005826:	4603      	mov	r3, r0
 8005828:	71fb      	strb	r3, [r7, #7]
	if (ID >= MIN_SENSOR_ID && ID <= MAX_SENSOR_ID)	return true;
 800582a:	79fb      	ldrb	r3, [r7, #7]
 800582c:	2b50      	cmp	r3, #80	; 0x50
 800582e:	d904      	bls.n	800583a <sensorID_validation+0x1a>
 8005830:	79fb      	ldrb	r3, [r7, #7]
 8005832:	2bff      	cmp	r3, #255	; 0xff
 8005834:	d001      	beq.n	800583a <sensorID_validation+0x1a>
 8005836:	2301      	movs	r3, #1
 8005838:	e000      	b.n	800583c <sensorID_validation+0x1c>
	return false;
 800583a:	2300      	movs	r3, #0
}
 800583c:	4618      	mov	r0, r3
 800583e:	370c      	adds	r7, #12
 8005840:	46bd      	mov	sp, r7
 8005842:	bc80      	pop	{r7}
 8005844:	4770      	bx	lr
	...

08005848 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b084      	sub	sp, #16
 800584c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800584e:	1d3b      	adds	r3, r7, #4
 8005850:	2200      	movs	r2, #0
 8005852:	601a      	str	r2, [r3, #0]
 8005854:	605a      	str	r2, [r3, #4]
 8005856:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8005858:	4b18      	ldr	r3, [pc, #96]	; (80058bc <MX_ADC1_Init+0x74>)
 800585a:	4a19      	ldr	r2, [pc, #100]	; (80058c0 <MX_ADC1_Init+0x78>)
 800585c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800585e:	4b17      	ldr	r3, [pc, #92]	; (80058bc <MX_ADC1_Init+0x74>)
 8005860:	2200      	movs	r2, #0
 8005862:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8005864:	4b15      	ldr	r3, [pc, #84]	; (80058bc <MX_ADC1_Init+0x74>)
 8005866:	2201      	movs	r2, #1
 8005868:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800586a:	4b14      	ldr	r3, [pc, #80]	; (80058bc <MX_ADC1_Init+0x74>)
 800586c:	2200      	movs	r2, #0
 800586e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005870:	4b12      	ldr	r3, [pc, #72]	; (80058bc <MX_ADC1_Init+0x74>)
 8005872:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8005876:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005878:	4b10      	ldr	r3, [pc, #64]	; (80058bc <MX_ADC1_Init+0x74>)
 800587a:	2200      	movs	r2, #0
 800587c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800587e:	4b0f      	ldr	r3, [pc, #60]	; (80058bc <MX_ADC1_Init+0x74>)
 8005880:	2201      	movs	r2, #1
 8005882:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8005884:	480d      	ldr	r0, [pc, #52]	; (80058bc <MX_ADC1_Init+0x74>)
 8005886:	f002 fa8f 	bl	8007da8 <HAL_ADC_Init>
 800588a:	4603      	mov	r3, r0
 800588c:	2b00      	cmp	r3, #0
 800588e:	d001      	beq.n	8005894 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8005890:	f000 fdcc 	bl	800642c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8005894:	2306      	movs	r3, #6
 8005896:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8005898:	2301      	movs	r3, #1
 800589a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800589c:	2307      	movs	r3, #7
 800589e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80058a0:	1d3b      	adds	r3, r7, #4
 80058a2:	4619      	mov	r1, r3
 80058a4:	4805      	ldr	r0, [pc, #20]	; (80058bc <MX_ADC1_Init+0x74>)
 80058a6:	f002 fce1 	bl	800826c <HAL_ADC_ConfigChannel>
 80058aa:	4603      	mov	r3, r0
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d001      	beq.n	80058b4 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80058b0:	f000 fdbc 	bl	800642c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80058b4:	bf00      	nop
 80058b6:	3710      	adds	r7, #16
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}
 80058bc:	200011e4 	.word	0x200011e4
 80058c0:	40012400 	.word	0x40012400

080058c4 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b084      	sub	sp, #16
 80058c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80058ca:	1d3b      	adds	r3, r7, #4
 80058cc:	2200      	movs	r2, #0
 80058ce:	601a      	str	r2, [r3, #0]
 80058d0:	605a      	str	r2, [r3, #4]
 80058d2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80058d4:	4b18      	ldr	r3, [pc, #96]	; (8005938 <MX_ADC2_Init+0x74>)
 80058d6:	4a19      	ldr	r2, [pc, #100]	; (800593c <MX_ADC2_Init+0x78>)
 80058d8:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80058da:	4b17      	ldr	r3, [pc, #92]	; (8005938 <MX_ADC2_Init+0x74>)
 80058dc:	2200      	movs	r2, #0
 80058de:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80058e0:	4b15      	ldr	r3, [pc, #84]	; (8005938 <MX_ADC2_Init+0x74>)
 80058e2:	2201      	movs	r2, #1
 80058e4:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80058e6:	4b14      	ldr	r3, [pc, #80]	; (8005938 <MX_ADC2_Init+0x74>)
 80058e8:	2200      	movs	r2, #0
 80058ea:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80058ec:	4b12      	ldr	r3, [pc, #72]	; (8005938 <MX_ADC2_Init+0x74>)
 80058ee:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80058f2:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80058f4:	4b10      	ldr	r3, [pc, #64]	; (8005938 <MX_ADC2_Init+0x74>)
 80058f6:	2200      	movs	r2, #0
 80058f8:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 80058fa:	4b0f      	ldr	r3, [pc, #60]	; (8005938 <MX_ADC2_Init+0x74>)
 80058fc:	2201      	movs	r2, #1
 80058fe:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8005900:	480d      	ldr	r0, [pc, #52]	; (8005938 <MX_ADC2_Init+0x74>)
 8005902:	f002 fa51 	bl	8007da8 <HAL_ADC_Init>
 8005906:	4603      	mov	r3, r0
 8005908:	2b00      	cmp	r3, #0
 800590a:	d001      	beq.n	8005910 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 800590c:	f000 fd8e 	bl	800642c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8005910:	2305      	movs	r3, #5
 8005912:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8005914:	2301      	movs	r3, #1
 8005916:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 8005918:	2306      	movs	r3, #6
 800591a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800591c:	1d3b      	adds	r3, r7, #4
 800591e:	4619      	mov	r1, r3
 8005920:	4805      	ldr	r0, [pc, #20]	; (8005938 <MX_ADC2_Init+0x74>)
 8005922:	f002 fca3 	bl	800826c <HAL_ADC_ConfigChannel>
 8005926:	4603      	mov	r3, r0
 8005928:	2b00      	cmp	r3, #0
 800592a:	d001      	beq.n	8005930 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 800592c:	f000 fd7e 	bl	800642c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8005930:	bf00      	nop
 8005932:	3710      	adds	r7, #16
 8005934:	46bd      	mov	sp, r7
 8005936:	bd80      	pop	{r7, pc}
 8005938:	20001214 	.word	0x20001214
 800593c:	40012800 	.word	0x40012800

08005940 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b08a      	sub	sp, #40	; 0x28
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005948:	f107 0318 	add.w	r3, r7, #24
 800594c:	2200      	movs	r2, #0
 800594e:	601a      	str	r2, [r3, #0]
 8005950:	605a      	str	r2, [r3, #4]
 8005952:	609a      	str	r2, [r3, #8]
 8005954:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a30      	ldr	r2, [pc, #192]	; (8005a1c <HAL_ADC_MspInit+0xdc>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d12a      	bne.n	80059b6 <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005960:	4b2f      	ldr	r3, [pc, #188]	; (8005a20 <HAL_ADC_MspInit+0xe0>)
 8005962:	699b      	ldr	r3, [r3, #24]
 8005964:	4a2e      	ldr	r2, [pc, #184]	; (8005a20 <HAL_ADC_MspInit+0xe0>)
 8005966:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800596a:	6193      	str	r3, [r2, #24]
 800596c:	4b2c      	ldr	r3, [pc, #176]	; (8005a20 <HAL_ADC_MspInit+0xe0>)
 800596e:	699b      	ldr	r3, [r3, #24]
 8005970:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005974:	617b      	str	r3, [r7, #20]
 8005976:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005978:	4b29      	ldr	r3, [pc, #164]	; (8005a20 <HAL_ADC_MspInit+0xe0>)
 800597a:	699b      	ldr	r3, [r3, #24]
 800597c:	4a28      	ldr	r2, [pc, #160]	; (8005a20 <HAL_ADC_MspInit+0xe0>)
 800597e:	f043 0304 	orr.w	r3, r3, #4
 8005982:	6193      	str	r3, [r2, #24]
 8005984:	4b26      	ldr	r3, [pc, #152]	; (8005a20 <HAL_ADC_MspInit+0xe0>)
 8005986:	699b      	ldr	r3, [r3, #24]
 8005988:	f003 0304 	and.w	r3, r3, #4
 800598c:	613b      	str	r3, [r7, #16]
 800598e:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8005990:	2340      	movs	r3, #64	; 0x40
 8005992:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005994:	2303      	movs	r3, #3
 8005996:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005998:	f107 0318 	add.w	r3, r7, #24
 800599c:	4619      	mov	r1, r3
 800599e:	4821      	ldr	r0, [pc, #132]	; (8005a24 <HAL_ADC_MspInit+0xe4>)
 80059a0:	f003 f9b0 	bl	8008d04 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 6, 0);
 80059a4:	2200      	movs	r2, #0
 80059a6:	2106      	movs	r1, #6
 80059a8:	2012      	movs	r0, #18
 80059aa:	f002 fed2 	bl	8008752 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80059ae:	2012      	movs	r0, #18
 80059b0:	f002 feeb 	bl	800878a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80059b4:	e02e      	b.n	8005a14 <HAL_ADC_MspInit+0xd4>
  else if(adcHandle->Instance==ADC2)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a1b      	ldr	r2, [pc, #108]	; (8005a28 <HAL_ADC_MspInit+0xe8>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d129      	bne.n	8005a14 <HAL_ADC_MspInit+0xd4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80059c0:	4b17      	ldr	r3, [pc, #92]	; (8005a20 <HAL_ADC_MspInit+0xe0>)
 80059c2:	699b      	ldr	r3, [r3, #24]
 80059c4:	4a16      	ldr	r2, [pc, #88]	; (8005a20 <HAL_ADC_MspInit+0xe0>)
 80059c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80059ca:	6193      	str	r3, [r2, #24]
 80059cc:	4b14      	ldr	r3, [pc, #80]	; (8005a20 <HAL_ADC_MspInit+0xe0>)
 80059ce:	699b      	ldr	r3, [r3, #24]
 80059d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059d4:	60fb      	str	r3, [r7, #12]
 80059d6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80059d8:	4b11      	ldr	r3, [pc, #68]	; (8005a20 <HAL_ADC_MspInit+0xe0>)
 80059da:	699b      	ldr	r3, [r3, #24]
 80059dc:	4a10      	ldr	r2, [pc, #64]	; (8005a20 <HAL_ADC_MspInit+0xe0>)
 80059de:	f043 0304 	orr.w	r3, r3, #4
 80059e2:	6193      	str	r3, [r2, #24]
 80059e4:	4b0e      	ldr	r3, [pc, #56]	; (8005a20 <HAL_ADC_MspInit+0xe0>)
 80059e6:	699b      	ldr	r3, [r3, #24]
 80059e8:	f003 0304 	and.w	r3, r3, #4
 80059ec:	60bb      	str	r3, [r7, #8]
 80059ee:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80059f0:	2320      	movs	r3, #32
 80059f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80059f4:	2303      	movs	r3, #3
 80059f6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80059f8:	f107 0318 	add.w	r3, r7, #24
 80059fc:	4619      	mov	r1, r3
 80059fe:	4809      	ldr	r0, [pc, #36]	; (8005a24 <HAL_ADC_MspInit+0xe4>)
 8005a00:	f003 f980 	bl	8008d04 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 6, 0);
 8005a04:	2200      	movs	r2, #0
 8005a06:	2106      	movs	r1, #6
 8005a08:	2012      	movs	r0, #18
 8005a0a:	f002 fea2 	bl	8008752 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8005a0e:	2012      	movs	r0, #18
 8005a10:	f002 febb 	bl	800878a <HAL_NVIC_EnableIRQ>
}
 8005a14:	bf00      	nop
 8005a16:	3728      	adds	r7, #40	; 0x28
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	bd80      	pop	{r7, pc}
 8005a1c:	40012400 	.word	0x40012400
 8005a20:	40021000 	.word	0x40021000
 8005a24:	40010800 	.word	0x40010800
 8005a28:	40012800 	.word	0x40012800

08005a2c <crc32>:
    0x2d02ef8dL
};

/* crc32 hash */
uint32_t crc32(const char* s, int len)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b085      	sub	sp, #20
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
 8005a34:	6039      	str	r1, [r7, #0]
    int i;
    uint32_t crc32val = 0;
 8005a36:	2300      	movs	r3, #0
 8005a38:	60bb      	str	r3, [r7, #8]
    crc32val ^= 0xFFFFFFFF;
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	43db      	mvns	r3, r3
 8005a3e:	60bb      	str	r3, [r7, #8]

    for (i = 0;  i < len;  i++) {
 8005a40:	2300      	movs	r3, #0
 8005a42:	60fb      	str	r3, [r7, #12]
 8005a44:	e011      	b.n	8005a6a <crc32+0x3e>
        crc32val = crc32_tab[(crc32val ^ s[i]) & 0xFF] ^ ((crc32val >> 8) & 0x00FFFFFF);
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	687a      	ldr	r2, [r7, #4]
 8005a4a:	4413      	add	r3, r2
 8005a4c:	781b      	ldrb	r3, [r3, #0]
 8005a4e:	461a      	mov	r2, r3
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	4053      	eors	r3, r2
 8005a54:	b2db      	uxtb	r3, r3
 8005a56:	4a0a      	ldr	r2, [pc, #40]	; (8005a80 <crc32+0x54>)
 8005a58:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	0a1b      	lsrs	r3, r3, #8
 8005a60:	4053      	eors	r3, r2
 8005a62:	60bb      	str	r3, [r7, #8]
    for (i = 0;  i < len;  i++) {
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	3301      	adds	r3, #1
 8005a68:	60fb      	str	r3, [r7, #12]
 8005a6a:	68fa      	ldr	r2, [r7, #12]
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	429a      	cmp	r2, r3
 8005a70:	dbe9      	blt.n	8005a46 <crc32+0x1a>
    }

    return crc32val ^ 0xFFFFFFFF;
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	43db      	mvns	r3, r3
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	3714      	adds	r7, #20
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bc80      	pop	{r7}
 8005a7e:	4770      	bx	lr
 8005a80:	20000004 	.word	0x20000004

08005a84 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b082      	sub	sp, #8
 8005a88:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005a8a:	4b14      	ldr	r3, [pc, #80]	; (8005adc <MX_DMA_Init+0x58>)
 8005a8c:	695b      	ldr	r3, [r3, #20]
 8005a8e:	4a13      	ldr	r2, [pc, #76]	; (8005adc <MX_DMA_Init+0x58>)
 8005a90:	f043 0301 	orr.w	r3, r3, #1
 8005a94:	6153      	str	r3, [r2, #20]
 8005a96:	4b11      	ldr	r3, [pc, #68]	; (8005adc <MX_DMA_Init+0x58>)
 8005a98:	695b      	ldr	r3, [r3, #20]
 8005a9a:	f003 0301 	and.w	r3, r3, #1
 8005a9e:	607b      	str	r3, [r7, #4]
 8005aa0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	2100      	movs	r1, #0
 8005aa6:	200d      	movs	r0, #13
 8005aa8:	f002 fe53 	bl	8008752 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8005aac:	200d      	movs	r0, #13
 8005aae:	f002 fe6c 	bl	800878a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	2100      	movs	r1, #0
 8005ab6:	200f      	movs	r0, #15
 8005ab8:	f002 fe4b 	bl	8008752 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8005abc:	200f      	movs	r0, #15
 8005abe:	f002 fe64 	bl	800878a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	2100      	movs	r1, #0
 8005ac6:	2010      	movs	r0, #16
 8005ac8:	f002 fe43 	bl	8008752 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8005acc:	2010      	movs	r0, #16
 8005ace:	f002 fe5c 	bl	800878a <HAL_NVIC_EnableIRQ>

}
 8005ad2:	bf00      	nop
 8005ad4:	3708      	adds	r7, #8
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}
 8005ada:	bf00      	nop
 8005adc:	40021000 	.word	0x40021000

08005ae0 <Bytes2float>:
    }

}

float Bytes2float(uint8_t * ftoa_bytes_temp)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b087      	sub	sp, #28
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
    union {
      float a;
      uint8_t bytes[4];
    } thing;

    for (uint8_t i = 0; i < 4; i++) {
 8005ae8:	2300      	movs	r3, #0
 8005aea:	75fb      	strb	r3, [r7, #23]
 8005aec:	e00b      	b.n	8005b06 <Bytes2float+0x26>
    	thing.bytes[i] = ftoa_bytes_temp[i];
 8005aee:	7dfb      	ldrb	r3, [r7, #23]
 8005af0:	687a      	ldr	r2, [r7, #4]
 8005af2:	441a      	add	r2, r3
 8005af4:	7dfb      	ldrb	r3, [r7, #23]
 8005af6:	7812      	ldrb	r2, [r2, #0]
 8005af8:	3318      	adds	r3, #24
 8005afa:	443b      	add	r3, r7
 8005afc:	f803 2c0c 	strb.w	r2, [r3, #-12]
    for (uint8_t i = 0; i < 4; i++) {
 8005b00:	7dfb      	ldrb	r3, [r7, #23]
 8005b02:	3301      	adds	r3, #1
 8005b04:	75fb      	strb	r3, [r7, #23]
 8005b06:	7dfb      	ldrb	r3, [r7, #23]
 8005b08:	2b03      	cmp	r3, #3
 8005b0a:	d9f0      	bls.n	8005aee <Bytes2float+0xe>
    }

   float float_variable =  thing.a;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	613b      	str	r3, [r7, #16]
   return float_variable;
 8005b10:	693b      	ldr	r3, [r7, #16]
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	371c      	adds	r7, #28
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bc80      	pop	{r7}
 8005b1a:	4770      	bx	lr

08005b1c <Flash_Read_Data>:
	   return 0;
}


void Flash_Read_Data (uint32_t StartPageAddress, uint32_t *RxBuf, uint16_t numberofwords)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b085      	sub	sp, #20
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	60f8      	str	r0, [r7, #12]
 8005b24:	60b9      	str	r1, [r7, #8]
 8005b26:	4613      	mov	r3, r2
 8005b28:	80fb      	strh	r3, [r7, #6]
	while (1)
	{

		*RxBuf = *(__IO uint32_t *)StartPageAddress;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681a      	ldr	r2, [r3, #0]
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	601a      	str	r2, [r3, #0]
		StartPageAddress += 4;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	3304      	adds	r3, #4
 8005b36:	60fb      	str	r3, [r7, #12]
		RxBuf++;
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	3304      	adds	r3, #4
 8005b3c:	60bb      	str	r3, [r7, #8]
		if (!(numberofwords--)) break;
 8005b3e:	88fb      	ldrh	r3, [r7, #6]
 8005b40:	1e5a      	subs	r2, r3, #1
 8005b42:	80fa      	strh	r2, [r7, #6]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d000      	beq.n	8005b4a <Flash_Read_Data+0x2e>
		*RxBuf = *(__IO uint32_t *)StartPageAddress;
 8005b48:	e7ef      	b.n	8005b2a <Flash_Read_Data+0xe>
		if (!(numberofwords--)) break;
 8005b4a:	bf00      	nop
	}
}
 8005b4c:	bf00      	nop
 8005b4e:	3714      	adds	r7, #20
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bc80      	pop	{r7}
 8005b54:	4770      	bx	lr

08005b56 <Flash_Read_NUM>:
	Flash_Write_Data (StartSectorAddress, (uint32_t *)bytes_temp, 1);
}


float Flash_Read_NUM (uint32_t StartSectorAddress)
{
 8005b56:	b580      	push	{r7, lr}
 8005b58:	b084      	sub	sp, #16
 8005b5a:	af00      	add	r7, sp, #0
 8005b5c:	6078      	str	r0, [r7, #4]
	uint8_t buffer[4];
	float value;

	Flash_Read_Data(StartSectorAddress, (uint32_t *)buffer, 1);
 8005b5e:	f107 0308 	add.w	r3, r7, #8
 8005b62:	2201      	movs	r2, #1
 8005b64:	4619      	mov	r1, r3
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f7ff ffd8 	bl	8005b1c <Flash_Read_Data>
	value = Bytes2float(buffer);
 8005b6c:	f107 0308 	add.w	r3, r7, #8
 8005b70:	4618      	mov	r0, r3
 8005b72:	f7ff ffb5 	bl	8005ae0 <Bytes2float>
 8005b76:	60f8      	str	r0, [r7, #12]
	return value;
 8005b78:	68fb      	ldr	r3, [r7, #12]
}
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	3710      	adds	r7, #16
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}
	...

08005b84 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b088      	sub	sp, #32
 8005b88:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b8a:	f107 0310 	add.w	r3, r7, #16
 8005b8e:	2200      	movs	r2, #0
 8005b90:	601a      	str	r2, [r3, #0]
 8005b92:	605a      	str	r2, [r3, #4]
 8005b94:	609a      	str	r2, [r3, #8]
 8005b96:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005b98:	4b5e      	ldr	r3, [pc, #376]	; (8005d14 <MX_GPIO_Init+0x190>)
 8005b9a:	699b      	ldr	r3, [r3, #24]
 8005b9c:	4a5d      	ldr	r2, [pc, #372]	; (8005d14 <MX_GPIO_Init+0x190>)
 8005b9e:	f043 0310 	orr.w	r3, r3, #16
 8005ba2:	6193      	str	r3, [r2, #24]
 8005ba4:	4b5b      	ldr	r3, [pc, #364]	; (8005d14 <MX_GPIO_Init+0x190>)
 8005ba6:	699b      	ldr	r3, [r3, #24]
 8005ba8:	f003 0310 	and.w	r3, r3, #16
 8005bac:	60fb      	str	r3, [r7, #12]
 8005bae:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005bb0:	4b58      	ldr	r3, [pc, #352]	; (8005d14 <MX_GPIO_Init+0x190>)
 8005bb2:	699b      	ldr	r3, [r3, #24]
 8005bb4:	4a57      	ldr	r2, [pc, #348]	; (8005d14 <MX_GPIO_Init+0x190>)
 8005bb6:	f043 0320 	orr.w	r3, r3, #32
 8005bba:	6193      	str	r3, [r2, #24]
 8005bbc:	4b55      	ldr	r3, [pc, #340]	; (8005d14 <MX_GPIO_Init+0x190>)
 8005bbe:	699b      	ldr	r3, [r3, #24]
 8005bc0:	f003 0320 	and.w	r3, r3, #32
 8005bc4:	60bb      	str	r3, [r7, #8]
 8005bc6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005bc8:	4b52      	ldr	r3, [pc, #328]	; (8005d14 <MX_GPIO_Init+0x190>)
 8005bca:	699b      	ldr	r3, [r3, #24]
 8005bcc:	4a51      	ldr	r2, [pc, #324]	; (8005d14 <MX_GPIO_Init+0x190>)
 8005bce:	f043 0304 	orr.w	r3, r3, #4
 8005bd2:	6193      	str	r3, [r2, #24]
 8005bd4:	4b4f      	ldr	r3, [pc, #316]	; (8005d14 <MX_GPIO_Init+0x190>)
 8005bd6:	699b      	ldr	r3, [r3, #24]
 8005bd8:	f003 0304 	and.w	r3, r3, #4
 8005bdc:	607b      	str	r3, [r7, #4]
 8005bde:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005be0:	4b4c      	ldr	r3, [pc, #304]	; (8005d14 <MX_GPIO_Init+0x190>)
 8005be2:	699b      	ldr	r3, [r3, #24]
 8005be4:	4a4b      	ldr	r2, [pc, #300]	; (8005d14 <MX_GPIO_Init+0x190>)
 8005be6:	f043 0308 	orr.w	r3, r3, #8
 8005bea:	6193      	str	r3, [r2, #24]
 8005bec:	4b49      	ldr	r3, [pc, #292]	; (8005d14 <MX_GPIO_Init+0x190>)
 8005bee:	699b      	ldr	r3, [r3, #24]
 8005bf0:	f003 0308 	and.w	r3, r3, #8
 8005bf4:	603b      	str	r3, [r7, #0]
 8005bf6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_DB7_Pin|LCD_DB6_Pin|LCD_DB5_Pin, GPIO_PIN_RESET);
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8005bfe:	4846      	ldr	r0, [pc, #280]	; (8005d18 <MX_GPIO_Init+0x194>)
 8005c00:	f003 fa1b 	bl	800903a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MBA_CONTACTOR_GPIO_Port, MBA_CONTACTOR_Pin, GPIO_PIN_SET);
 8005c04:	2201      	movs	r2, #1
 8005c06:	2110      	movs	r1, #16
 8005c08:	4844      	ldr	r0, [pc, #272]	; (8005d1c <MX_GPIO_Init+0x198>)
 8005c0a:	f003 fa16 	bl	800903a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MOTOR_DIR_Pin|LED_Pin|LCD_RS_Pin|LCD_EN_Pin
 8005c0e:	2200      	movs	r2, #0
 8005c10:	f649 4180 	movw	r1, #40064	; 0x9c80
 8005c14:	4841      	ldr	r0, [pc, #260]	; (8005d1c <MX_GPIO_Init+0x198>)
 8005c16:	f003 fa10 	bl	800903a <HAL_GPIO_WritePin>
                          |LCD_DB4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOTOR_STEP_Pin|MOTOR_SLEEP_Pin|MOTOR_RST_Pin|MOTOR_EN_Pin, GPIO_PIN_RESET);
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	f243 0103 	movw	r1, #12291	; 0x3003
 8005c20:	483f      	ldr	r0, [pc, #252]	; (8005d20 <MX_GPIO_Init+0x19c>)
 8005c22:	f003 fa0a 	bl	800903a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LCD_DB7_Pin|LCD_DB6_Pin|LCD_DB5_Pin;
 8005c26:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8005c2a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c30:	2300      	movs	r3, #0
 8005c32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c34:	2302      	movs	r3, #2
 8005c36:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005c38:	f107 0310 	add.w	r3, r7, #16
 8005c3c:	4619      	mov	r1, r3
 8005c3e:	4836      	ldr	r0, [pc, #216]	; (8005d18 <MX_GPIO_Init+0x194>)
 8005c40:	f003 f860 	bl	8008d04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RTC_ALARM_TRIGGER_Pin|BUTTON_DOWN_Pin|BUTTON_UP_Pin;
 8005c44:	f240 3301 	movw	r3, #769	; 0x301
 8005c48:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8005c4a:	4b36      	ldr	r3, [pc, #216]	; (8005d24 <MX_GPIO_Init+0x1a0>)
 8005c4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005c52:	f107 0310 	add.w	r3, r7, #16
 8005c56:	4619      	mov	r1, r3
 8005c58:	4830      	ldr	r0, [pc, #192]	; (8005d1c <MX_GPIO_Init+0x198>)
 8005c5a:	f003 f853 	bl	8008d04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin */
  GPIO_InitStruct.Pin = MBA_CONTACTOR_Pin|MOTOR_DIR_Pin|LED_Pin|LCD_RS_Pin
 8005c5e:	f649 4390 	movw	r3, #40080	; 0x9c90
 8005c62:	613b      	str	r3, [r7, #16]
                          |LCD_EN_Pin|LCD_DB4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005c64:	2301      	movs	r3, #1
 8005c66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c68:	2300      	movs	r3, #0
 8005c6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c6c:	2302      	movs	r3, #2
 8005c6e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005c70:	f107 0310 	add.w	r3, r7, #16
 8005c74:	4619      	mov	r1, r3
 8005c76:	4829      	ldr	r0, [pc, #164]	; (8005d1c <MX_GPIO_Init+0x198>)
 8005c78:	f003 f844 	bl	8008d04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MOTOR_STEP_Pin|MOTOR_SLEEP_Pin|MOTOR_RST_Pin|MOTOR_EN_Pin;
 8005c7c:	f243 0303 	movw	r3, #12291	; 0x3003
 8005c80:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005c82:	2301      	movs	r3, #1
 8005c84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c86:	2300      	movs	r3, #0
 8005c88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c8a:	2302      	movs	r3, #2
 8005c8c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005c8e:	f107 0310 	add.w	r3, r7, #16
 8005c92:	4619      	mov	r1, r3
 8005c94:	4822      	ldr	r0, [pc, #136]	; (8005d20 <MX_GPIO_Init+0x19c>)
 8005c96:	f003 f835 	bl	8008d04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LIMIT_SWITCH_MIN_Pin;
 8005c9a:	2304      	movs	r3, #4
 8005c9c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005c9e:	4b22      	ldr	r3, [pc, #136]	; (8005d28 <MX_GPIO_Init+0x1a4>)
 8005ca0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LIMIT_SWITCH_MIN_GPIO_Port, &GPIO_InitStruct);
 8005ca6:	f107 0310 	add.w	r3, r7, #16
 8005caa:	4619      	mov	r1, r3
 8005cac:	481c      	ldr	r0, [pc, #112]	; (8005d20 <MX_GPIO_Init+0x19c>)
 8005cae:	f003 f829 	bl	8008d04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = BUTTON_MENU_Pin|BUTTON_OK_Pin;
 8005cb2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8005cb6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8005cb8:	4b1a      	ldr	r3, [pc, #104]	; (8005d24 <MX_GPIO_Init+0x1a0>)
 8005cba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005cc0:	f107 0310 	add.w	r3, r7, #16
 8005cc4:	4619      	mov	r1, r3
 8005cc6:	4816      	ldr	r0, [pc, #88]	; (8005d20 <MX_GPIO_Init+0x19c>)
 8005cc8:	f003 f81c 	bl	8008d04 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8005ccc:	2200      	movs	r2, #0
 8005cce:	2100      	movs	r1, #0
 8005cd0:	2006      	movs	r0, #6
 8005cd2:	f002 fd3e 	bl	8008752 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8005cd6:	2006      	movs	r0, #6
 8005cd8:	f002 fd57 	bl	800878a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8005cdc:	2200      	movs	r2, #0
 8005cde:	2100      	movs	r1, #0
 8005ce0:	2008      	movs	r0, #8
 8005ce2:	f002 fd36 	bl	8008752 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8005ce6:	2008      	movs	r0, #8
 8005ce8:	f002 fd4f 	bl	800878a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8005cec:	2200      	movs	r2, #0
 8005cee:	2100      	movs	r1, #0
 8005cf0:	2017      	movs	r0, #23
 8005cf2:	f002 fd2e 	bl	8008752 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8005cf6:	2017      	movs	r0, #23
 8005cf8:	f002 fd47 	bl	800878a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	2100      	movs	r1, #0
 8005d00:	2028      	movs	r0, #40	; 0x28
 8005d02:	f002 fd26 	bl	8008752 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8005d06:	2028      	movs	r0, #40	; 0x28
 8005d08:	f002 fd3f 	bl	800878a <HAL_NVIC_EnableIRQ>

}
 8005d0c:	bf00      	nop
 8005d0e:	3720      	adds	r7, #32
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bd80      	pop	{r7, pc}
 8005d14:	40021000 	.word	0x40021000
 8005d18:	40011000 	.word	0x40011000
 8005d1c:	40010800 	.word	0x40010800
 8005d20:	40010c00 	.word	0x40010c00
 8005d24:	10210000 	.word	0x10210000
 8005d28:	10110000 	.word	0x10110000

08005d2c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8005d30:	4b12      	ldr	r3, [pc, #72]	; (8005d7c <MX_I2C1_Init+0x50>)
 8005d32:	4a13      	ldr	r2, [pc, #76]	; (8005d80 <MX_I2C1_Init+0x54>)
 8005d34:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8005d36:	4b11      	ldr	r3, [pc, #68]	; (8005d7c <MX_I2C1_Init+0x50>)
 8005d38:	4a12      	ldr	r2, [pc, #72]	; (8005d84 <MX_I2C1_Init+0x58>)
 8005d3a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005d3c:	4b0f      	ldr	r3, [pc, #60]	; (8005d7c <MX_I2C1_Init+0x50>)
 8005d3e:	2200      	movs	r2, #0
 8005d40:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8005d42:	4b0e      	ldr	r3, [pc, #56]	; (8005d7c <MX_I2C1_Init+0x50>)
 8005d44:	2200      	movs	r2, #0
 8005d46:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005d48:	4b0c      	ldr	r3, [pc, #48]	; (8005d7c <MX_I2C1_Init+0x50>)
 8005d4a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005d4e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005d50:	4b0a      	ldr	r3, [pc, #40]	; (8005d7c <MX_I2C1_Init+0x50>)
 8005d52:	2200      	movs	r2, #0
 8005d54:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8005d56:	4b09      	ldr	r3, [pc, #36]	; (8005d7c <MX_I2C1_Init+0x50>)
 8005d58:	2200      	movs	r2, #0
 8005d5a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005d5c:	4b07      	ldr	r3, [pc, #28]	; (8005d7c <MX_I2C1_Init+0x50>)
 8005d5e:	2200      	movs	r2, #0
 8005d60:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005d62:	4b06      	ldr	r3, [pc, #24]	; (8005d7c <MX_I2C1_Init+0x50>)
 8005d64:	2200      	movs	r2, #0
 8005d66:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005d68:	4804      	ldr	r0, [pc, #16]	; (8005d7c <MX_I2C1_Init+0x50>)
 8005d6a:	f003 f9af 	bl	80090cc <HAL_I2C_Init>
 8005d6e:	4603      	mov	r3, r0
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d001      	beq.n	8005d78 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8005d74:	f000 fb5a 	bl	800642c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8005d78:	bf00      	nop
 8005d7a:	bd80      	pop	{r7, pc}
 8005d7c:	20001244 	.word	0x20001244
 8005d80:	40005400 	.word	0x40005400
 8005d84:	00061a80 	.word	0x00061a80

08005d88 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b08a      	sub	sp, #40	; 0x28
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d90:	f107 0314 	add.w	r3, r7, #20
 8005d94:	2200      	movs	r2, #0
 8005d96:	601a      	str	r2, [r3, #0]
 8005d98:	605a      	str	r2, [r3, #4]
 8005d9a:	609a      	str	r2, [r3, #8]
 8005d9c:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a1d      	ldr	r2, [pc, #116]	; (8005e18 <HAL_I2C_MspInit+0x90>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d132      	bne.n	8005e0e <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005da8:	4b1c      	ldr	r3, [pc, #112]	; (8005e1c <HAL_I2C_MspInit+0x94>)
 8005daa:	699b      	ldr	r3, [r3, #24]
 8005dac:	4a1b      	ldr	r2, [pc, #108]	; (8005e1c <HAL_I2C_MspInit+0x94>)
 8005dae:	f043 0308 	orr.w	r3, r3, #8
 8005db2:	6193      	str	r3, [r2, #24]
 8005db4:	4b19      	ldr	r3, [pc, #100]	; (8005e1c <HAL_I2C_MspInit+0x94>)
 8005db6:	699b      	ldr	r3, [r3, #24]
 8005db8:	f003 0308 	and.w	r3, r3, #8
 8005dbc:	613b      	str	r3, [r7, #16]
 8005dbe:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8005dc0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005dc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005dc6:	2312      	movs	r3, #18
 8005dc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005dca:	2303      	movs	r3, #3
 8005dcc:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005dce:	f107 0314 	add.w	r3, r7, #20
 8005dd2:	4619      	mov	r1, r3
 8005dd4:	4812      	ldr	r0, [pc, #72]	; (8005e20 <HAL_I2C_MspInit+0x98>)
 8005dd6:	f002 ff95 	bl	8008d04 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8005dda:	4b12      	ldr	r3, [pc, #72]	; (8005e24 <HAL_I2C_MspInit+0x9c>)
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	627b      	str	r3, [r7, #36]	; 0x24
 8005de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de2:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8005de6:	627b      	str	r3, [r7, #36]	; 0x24
 8005de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dea:	f043 0302 	orr.w	r3, r3, #2
 8005dee:	627b      	str	r3, [r7, #36]	; 0x24
 8005df0:	4a0c      	ldr	r2, [pc, #48]	; (8005e24 <HAL_I2C_MspInit+0x9c>)
 8005df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df4:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005df6:	4b09      	ldr	r3, [pc, #36]	; (8005e1c <HAL_I2C_MspInit+0x94>)
 8005df8:	69db      	ldr	r3, [r3, #28]
 8005dfa:	4a08      	ldr	r2, [pc, #32]	; (8005e1c <HAL_I2C_MspInit+0x94>)
 8005dfc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005e00:	61d3      	str	r3, [r2, #28]
 8005e02:	4b06      	ldr	r3, [pc, #24]	; (8005e1c <HAL_I2C_MspInit+0x94>)
 8005e04:	69db      	ldr	r3, [r3, #28]
 8005e06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005e0a:	60fb      	str	r3, [r7, #12]
 8005e0c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8005e0e:	bf00      	nop
 8005e10:	3728      	adds	r7, #40	; 0x28
 8005e12:	46bd      	mov	sp, r7
 8005e14:	bd80      	pop	{r7, pc}
 8005e16:	bf00      	nop
 8005e18:	40005400 	.word	0x40005400
 8005e1c:	40021000 	.word	0x40021000
 8005e20:	40010c00 	.word	0x40010c00
 8005e24:	40010000 	.word	0x40010000

08005e28 <create_node>:
#include "linkedlist.h"

SensorNode_t SSnode_default = SENSORNODE_T_INIT;

Node* create_node(SensorNode_t  SSnode)
{
 8005e28:	b084      	sub	sp, #16
 8005e2a:	b580      	push	{r7, lr}
 8005e2c:	b082      	sub	sp, #8
 8005e2e:	af00      	add	r7, sp, #0
 8005e30:	f107 0c10 	add.w	ip, r7, #16
 8005e34:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    Node* node = (Node*)malloc(sizeof(Node));
 8005e38:	2074      	movs	r0, #116	; 0x74
 8005e3a:	f006 fa27 	bl	800c28c <malloc>
 8005e3e:	4603      	mov	r3, r0
 8005e40:	607b      	str	r3, [r7, #4]
    node->SSnode= SSnode;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	4618      	mov	r0, r3
 8005e46:	f107 0310 	add.w	r3, r7, #16
 8005e4a:	2270      	movs	r2, #112	; 0x70
 8005e4c:	4619      	mov	r1, r3
 8005e4e:	f006 fa3d 	bl	800c2cc <memcpy>
    node->next = NULL;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2200      	movs	r2, #0
 8005e56:	671a      	str	r2, [r3, #112]	; 0x70
    return node;
 8005e58:	687b      	ldr	r3, [r7, #4]
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	3708      	adds	r7, #8
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005e64:	b004      	add	sp, #16
 8005e66:	4770      	bx	lr

08005e68 <list_create>:

s_list * list_create(void)
{
 8005e68:	b590      	push	{r4, r7, lr}
 8005e6a:	b09b      	sub	sp, #108	; 0x6c
 8005e6c:	af18      	add	r7, sp, #96	; 0x60
    s_list *list = (s_list*)malloc(sizeof(s_list));
 8005e6e:	200c      	movs	r0, #12
 8005e70:	f006 fa0c 	bl	800c28c <malloc>
 8005e74:	4603      	mov	r3, r0
 8005e76:	607b      	str	r3, [r7, #4]
//    assert(list != NULL);
    list->head = create_node(SSnode_default);
 8005e78:	4c15      	ldr	r4, [pc, #84]	; (8005ed0 <list_create+0x68>)
 8005e7a:	4668      	mov	r0, sp
 8005e7c:	f104 0310 	add.w	r3, r4, #16
 8005e80:	2260      	movs	r2, #96	; 0x60
 8005e82:	4619      	mov	r1, r3
 8005e84:	f006 fa22 	bl	800c2cc <memcpy>
 8005e88:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8005e8c:	f7ff ffcc 	bl	8005e28 <create_node>
 8005e90:	4602      	mov	r2, r0
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	601a      	str	r2, [r3, #0]
    list->tail = create_node(SSnode_default);
 8005e96:	4c0e      	ldr	r4, [pc, #56]	; (8005ed0 <list_create+0x68>)
 8005e98:	4668      	mov	r0, sp
 8005e9a:	f104 0310 	add.w	r3, r4, #16
 8005e9e:	2260      	movs	r2, #96	; 0x60
 8005ea0:	4619      	mov	r1, r3
 8005ea2:	f006 fa13 	bl	800c2cc <memcpy>
 8005ea6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8005eaa:	f7ff ffbd 	bl	8005e28 <create_node>
 8005eae:	4602      	mov	r2, r0
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	605a      	str	r2, [r3, #4]
    list->head->next = list->tail;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	687a      	ldr	r2, [r7, #4]
 8005eba:	6852      	ldr	r2, [r2, #4]
 8005ebc:	671a      	str	r2, [r3, #112]	; 0x70
    list->length = 0;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	609a      	str	r2, [r3, #8]
    return list;
 8005ec4:	687b      	ldr	r3, [r7, #4]
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	370c      	adds	r7, #12
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd90      	pop	{r4, r7, pc}
 8005ece:	bf00      	nop
 8005ed0:	20000404 	.word	0x20000404

08005ed4 <list_append>:

void list_append (s_list* list, SensorNode_t SSnode_data)
{
 8005ed4:	b084      	sub	sp, #16
 8005ed6:	b590      	push	{r4, r7, lr}
 8005ed8:	b09d      	sub	sp, #116	; 0x74
 8005eda:	af18      	add	r7, sp, #96	; 0x60
 8005edc:	6078      	str	r0, [r7, #4]
 8005ede:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005ee2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	list->tail->SSnode = SSnode_data;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	4618      	mov	r0, r3
 8005eec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005ef0:	2270      	movs	r2, #112	; 0x70
 8005ef2:	4619      	mov	r1, r3
 8005ef4:	f006 f9ea 	bl	800c2cc <memcpy>
	Node *new_tail = create_node(SSnode_default);
 8005ef8:	4c0f      	ldr	r4, [pc, #60]	; (8005f38 <list_append+0x64>)
 8005efa:	4668      	mov	r0, sp
 8005efc:	f104 0310 	add.w	r3, r4, #16
 8005f00:	2260      	movs	r2, #96	; 0x60
 8005f02:	4619      	mov	r1, r3
 8005f04:	f006 f9e2 	bl	800c2cc <memcpy>
 8005f08:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8005f0c:	f7ff ff8c 	bl	8005e28 <create_node>
 8005f10:	60f8      	str	r0, [r7, #12]
	list->tail->next = new_tail;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	685b      	ldr	r3, [r3, #4]
 8005f16:	68fa      	ldr	r2, [r7, #12]
 8005f18:	671a      	str	r2, [r3, #112]	; 0x70
	list->tail = new_tail;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	68fa      	ldr	r2, [r7, #12]
 8005f1e:	605a      	str	r2, [r3, #4]
	list->length += 1;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	689b      	ldr	r3, [r3, #8]
 8005f24:	1c5a      	adds	r2, r3, #1
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	609a      	str	r2, [r3, #8]
}
 8005f2a:	bf00      	nop
 8005f2c:	3714      	adds	r7, #20
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8005f34:	b004      	add	sp, #16
 8005f36:	4770      	bx	lr
 8005f38:	20000404 	.word	0x20000404

08005f3c <HAL_UARTEx_RxEventCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static void ADC_Convert(uint32_t volatile *adcval, uint8_t CurorVol);
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b082      	sub	sp, #8
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
 8005f44:	460b      	mov	r3, r1
 8005f46:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART1 )
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a0e      	ldr	r2, [pc, #56]	; (8005f88 <HAL_UARTEx_RxEventCallback+0x4c>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d103      	bne.n	8005f5a <HAL_UARTEx_RxEventCallback+0x1e>
	{
		SIM_callback(Size);
 8005f52:	887b      	ldrh	r3, [r7, #2]
 8005f54:	4618      	mov	r0, r3
 8005f56:	f7fc f9ed 	bl	8002334 <SIM_callback>
	}
	if (huart->Instance== USART2)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4a0b      	ldr	r2, [pc, #44]	; (8005f8c <HAL_UARTEx_RxEventCallback+0x50>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d103      	bne.n	8005f6c <HAL_UARTEx_RxEventCallback+0x30>
	{
		Serial_CFG_Callback(Size);
 8005f64:	887b      	ldrh	r3, [r7, #2]
 8005f66:	4618      	mov	r0, r3
 8005f68:	f7fa ffd0 	bl	8000f0c <Serial_CFG_Callback>
	}

	if (huart->Instance == USART3) {
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a07      	ldr	r2, [pc, #28]	; (8005f90 <HAL_UARTEx_RxEventCallback+0x54>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d103      	bne.n	8005f7e <HAL_UARTEx_RxEventCallback+0x42>
		Lora_callback(Size);
 8005f76:	887b      	ldrh	r3, [r7, #2]
 8005f78:	4618      	mov	r0, r3
 8005f7a:	f7fe fa87 	bl	800448c <Lora_callback>
	}
}
 8005f7e:	bf00      	nop
 8005f80:	3708      	adds	r7, #8
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bd80      	pop	{r7, pc}
 8005f86:	bf00      	nop
 8005f88:	40013800 	.word	0x40013800
 8005f8c:	40004400 	.word	0x40004400
 8005f90:	40004800 	.word	0x40004800

08005f94 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b084      	sub	sp, #16
 8005f98:	af02      	add	r7, sp, #8
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == RTC_ALARM_TRIGGER_Pin)	{
 8005f9e:	88fb      	ldrh	r3, [r7, #6]
 8005fa0:	2b01      	cmp	r3, #1
 8005fa2:	d159      	bne.n	8006058 <HAL_GPIO_EXTI_Callback+0xc4>
//		alarmflag = 0;

		if(!sync_flag)	{
 8005fa4:	4b45      	ldr	r3, [pc, #276]	; (80060bc <HAL_GPIO_EXTI_Callback+0x128>)
 8005fa6:	781b      	ldrb	r3, [r3, #0]
 8005fa8:	b2db      	uxtb	r3, r3
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d14e      	bne.n	800604c <HAL_GPIO_EXTI_Callback+0xb8>

			if (flag == 0)	{
 8005fae:	4b44      	ldr	r3, [pc, #272]	; (80060c0 <HAL_GPIO_EXTI_Callback+0x12c>)
 8005fb0:	781b      	ldrb	r3, [r3, #0]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d117      	bne.n	8005fe6 <HAL_GPIO_EXTI_Callback+0x52>

				// Set Mode Measure for Sensor node
				Lora_Setmode(MEASURE, 0);
 8005fb6:	2100      	movs	r1, #0
 8005fb8:	2002      	movs	r0, #2
 8005fba:	f7fe fc59 	bl	8004870 <Lora_Setmode>

				DS3231_ClearAlarm1();
 8005fbe:	f7fe f90d 	bl	80041dc <DS3231_ClearAlarm1>
				// Set alarm for Turn OFF MBA
				DS3231_SetAlarm1(ALARM_MODE_HOUR_MIN_SEC_MATCHED, 0, myStation.calibTime.hour, myStation.calibTime.min, myStation.calibTime.sec + 3);
 8005fc2:	4b40      	ldr	r3, [pc, #256]	; (80060c4 <HAL_GPIO_EXTI_Callback+0x130>)
 8005fc4:	7cda      	ldrb	r2, [r3, #19]
 8005fc6:	4b3f      	ldr	r3, [pc, #252]	; (80060c4 <HAL_GPIO_EXTI_Callback+0x130>)
 8005fc8:	7d19      	ldrb	r1, [r3, #20]
 8005fca:	4b3e      	ldr	r3, [pc, #248]	; (80060c4 <HAL_GPIO_EXTI_Callback+0x130>)
 8005fcc:	7d5b      	ldrb	r3, [r3, #21]
 8005fce:	3303      	adds	r3, #3
 8005fd0:	b2db      	uxtb	r3, r3
 8005fd2:	9300      	str	r3, [sp, #0]
 8005fd4:	460b      	mov	r3, r1
 8005fd6:	2100      	movs	r1, #0
 8005fd8:	2001      	movs	r0, #1
 8005fda:	f7fe f85f 	bl	800409c <DS3231_SetAlarm1>

				flag = 1;
 8005fde:	4b38      	ldr	r3, [pc, #224]	; (80060c0 <HAL_GPIO_EXTI_Callback+0x12c>)
 8005fe0:	2201      	movs	r2, #1
 8005fe2:	701a      	strb	r2, [r3, #0]
 8005fe4:	e038      	b.n	8006058 <HAL_GPIO_EXTI_Callback+0xc4>
			}
			else if (flag == 1)	{
 8005fe6:	4b36      	ldr	r3, [pc, #216]	; (80060c0 <HAL_GPIO_EXTI_Callback+0x12c>)
 8005fe8:	781b      	ldrb	r3, [r3, #0]
 8005fea:	2b01      	cmp	r3, #1
 8005fec:	d121      	bne.n	8006032 <HAL_GPIO_EXTI_Callback+0x9e>

				//Turn OFF MBA
				myStation.MBAstate = switchContactor(MBA_OFF);
 8005fee:	2002      	movs	r0, #2
 8005ff0:	f7fc f960 	bl	80022b4 <switchContactor>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	461a      	mov	r2, r3
 8005ff8:	4b32      	ldr	r3, [pc, #200]	; (80060c4 <HAL_GPIO_EXTI_Callback+0x130>)
 8005ffa:	719a      	strb	r2, [r3, #6]

				DS3231_ClearAlarm1();
 8005ffc:	f7fe f8ee 	bl	80041dc <DS3231_ClearAlarm1>
				DS3231_SetAlarm1(ALARM_MODE_HOUR_MIN_SEC_MATCHED, 0, myStation.calibTime.hour, myStation.calibTime.min, myStation.calibTime.sec + 4);
 8006000:	4b30      	ldr	r3, [pc, #192]	; (80060c4 <HAL_GPIO_EXTI_Callback+0x130>)
 8006002:	7cda      	ldrb	r2, [r3, #19]
 8006004:	4b2f      	ldr	r3, [pc, #188]	; (80060c4 <HAL_GPIO_EXTI_Callback+0x130>)
 8006006:	7d19      	ldrb	r1, [r3, #20]
 8006008:	4b2e      	ldr	r3, [pc, #184]	; (80060c4 <HAL_GPIO_EXTI_Callback+0x130>)
 800600a:	7d5b      	ldrb	r3, [r3, #21]
 800600c:	3304      	adds	r3, #4
 800600e:	b2db      	uxtb	r3, r3
 8006010:	9300      	str	r3, [sp, #0]
 8006012:	460b      	mov	r3, r1
 8006014:	2100      	movs	r1, #0
 8006016:	2001      	movs	r0, #1
 8006018:	f7fe f840 	bl	800409c <DS3231_SetAlarm1>
				triggerTaskflag(TASK_START_CALIB, FLAG_EN);
 800601c:	2101      	movs	r1, #1
 800601e:	2003      	movs	r0, #3
 8006020:	f7ff fae2 	bl	80055e8 <triggerTaskflag>

				displayAfterSwitchoff = 1;
 8006024:	4b28      	ldr	r3, [pc, #160]	; (80060c8 <HAL_GPIO_EXTI_Callback+0x134>)
 8006026:	2201      	movs	r2, #1
 8006028:	701a      	strb	r2, [r3, #0]
				flag = 2;
 800602a:	4b25      	ldr	r3, [pc, #148]	; (80060c0 <HAL_GPIO_EXTI_Callback+0x12c>)
 800602c:	2202      	movs	r2, #2
 800602e:	701a      	strb	r2, [r3, #0]
 8006030:	e012      	b.n	8006058 <HAL_GPIO_EXTI_Callback+0xc4>
			}
			else {
				//Turn OFF MBA
				myStation.MBAstate = switchContactor(MBA_ON);
 8006032:	2001      	movs	r0, #1
 8006034:	f7fc f93e 	bl	80022b4 <switchContactor>
 8006038:	4603      	mov	r3, r0
 800603a:	461a      	mov	r2, r3
 800603c:	4b21      	ldr	r3, [pc, #132]	; (80060c4 <HAL_GPIO_EXTI_Callback+0x130>)
 800603e:	719a      	strb	r2, [r3, #6]

				DS3231_ClearAlarm1();
 8006040:	f7fe f8cc 	bl	80041dc <DS3231_ClearAlarm1>
				flag = 0;
 8006044:	4b1e      	ldr	r3, [pc, #120]	; (80060c0 <HAL_GPIO_EXTI_Callback+0x12c>)
 8006046:	2200      	movs	r2, #0
 8006048:	701a      	strb	r2, [r3, #0]
 800604a:	e005      	b.n	8006058 <HAL_GPIO_EXTI_Callback+0xc4>
			}

		}
		else {
			Lora_Setmode(SLEEP, 0);
 800604c:	2100      	movs	r1, #0
 800604e:	2000      	movs	r0, #0
 8006050:	f7fe fc0e 	bl	8004870 <Lora_Setmode>
			DS3231_ClearAlarm1();
 8006054:	f7fe f8c2 	bl	80041dc <DS3231_ClearAlarm1>
		}

	}
	curtick = HAL_GetTick();
 8006058:	f001 fe78 	bl	8007d4c <HAL_GetTick>
 800605c:	4603      	mov	r3, r0
 800605e:	4a1b      	ldr	r2, [pc, #108]	; (80060cc <HAL_GPIO_EXTI_Callback+0x138>)
 8006060:	6013      	str	r3, [r2, #0]

	if (curtick - pretick > 20)	{
 8006062:	4b1a      	ldr	r3, [pc, #104]	; (80060cc <HAL_GPIO_EXTI_Callback+0x138>)
 8006064:	681a      	ldr	r2, [r3, #0]
 8006066:	4b1a      	ldr	r3, [pc, #104]	; (80060d0 <HAL_GPIO_EXTI_Callback+0x13c>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	1ad3      	subs	r3, r2, r3
 800606c:	2b14      	cmp	r3, #20
 800606e:	d920      	bls.n	80060b2 <HAL_GPIO_EXTI_Callback+0x11e>
		pretick = curtick;
 8006070:	4b16      	ldr	r3, [pc, #88]	; (80060cc <HAL_GPIO_EXTI_Callback+0x138>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4a16      	ldr	r2, [pc, #88]	; (80060d0 <HAL_GPIO_EXTI_Callback+0x13c>)
 8006076:	6013      	str	r3, [r2, #0]

		if (GPIO_Pin == BUTTON_MENU_Pin) {
 8006078:	88fb      	ldrh	r3, [r7, #6]
 800607a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800607e:	d101      	bne.n	8006084 <HAL_GPIO_EXTI_Callback+0xf0>
			// Button Menu handler
			buttonMENU_handler();
 8006080:	f7fd fccc 	bl	8003a1c <buttonMENU_handler>
		}

		if (GPIO_Pin == BUTTON_OK_Pin) {
 8006084:	88fb      	ldrh	r3, [r7, #6]
 8006086:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800608a:	d101      	bne.n	8006090 <HAL_GPIO_EXTI_Callback+0xfc>
			// Button OK handler
			buttonOK_handler();
 800608c:	f7fd fd3c 	bl	8003b08 <buttonOK_handler>
		}

		if (GPIO_Pin == BUTTON_UP_Pin) {
 8006090:	88fb      	ldrh	r3, [r7, #6]
 8006092:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006096:	d101      	bne.n	800609c <HAL_GPIO_EXTI_Callback+0x108>
			// Button UP handler
			buttonUP_handler();
 8006098:	f7fd fe3e 	bl	8003d18 <buttonUP_handler>
		}

		if (GPIO_Pin == BUTTON_DOWN_Pin) {
 800609c:	88fb      	ldrh	r3, [r7, #6]
 800609e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060a2:	d101      	bne.n	80060a8 <HAL_GPIO_EXTI_Callback+0x114>
			// Button DOWN handler
			buttonDOWN_handler();
 80060a4:	f7fd fdc0 	bl	8003c28 <buttonDOWN_handler>
//		if (GPIO_Pin == LIMIT_SWITCH_MAX_Pin) {
//			// Button Limit MAX handler
//			SW_LIMIT_MAX_handler();
//		}

		if (GPIO_Pin == LIMIT_SWITCH_MIN_Pin) {
 80060a8:	88fb      	ldrh	r3, [r7, #6]
 80060aa:	2b04      	cmp	r3, #4
 80060ac:	d101      	bne.n	80060b2 <HAL_GPIO_EXTI_Callback+0x11e>
			// Button Limit MIN handler
			SW_LIMIT_MIN_handler();
 80060ae:	f7fd fea7 	bl	8003e00 <SW_LIMIT_MIN_handler>
		}
	}
}
 80060b2:	bf00      	nop
 80060b4:	3708      	adds	r7, #8
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bd80      	pop	{r7, pc}
 80060ba:	bf00      	nop
 80060bc:	2000251c 	.word	0x2000251c
 80060c0:	20002538 	.word	0x20002538
 80060c4:	20000474 	.word	0x20000474
 80060c8:	200005c6 	.word	0x200005c6
 80060cc:	20002530 	.word	0x20002530
 80060d0:	20002534 	.word	0x20002534

080060d4 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b082      	sub	sp, #8
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == hadc1.Instance)	{
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681a      	ldr	r2, [r3, #0]
 80060e0:	4b1a      	ldr	r3, [pc, #104]	; (800614c <HAL_ADC_ConvCpltCallback+0x78>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	429a      	cmp	r2, r3
 80060e6:	d113      	bne.n	8006110 <HAL_ADC_ConvCpltCallback+0x3c>
		tmpadc += HAL_ADC_GetValue(&hadc1);
 80060e8:	4818      	ldr	r0, [pc, #96]	; (800614c <HAL_ADC_ConvCpltCallback+0x78>)
 80060ea:	f001 ffeb 	bl	80080c4 <HAL_ADC_GetValue>
 80060ee:	4602      	mov	r2, r0
 80060f0:	4b17      	ldr	r3, [pc, #92]	; (8006150 <HAL_ADC_ConvCpltCallback+0x7c>)
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4413      	add	r3, r2
 80060f6:	4a16      	ldr	r2, [pc, #88]	; (8006150 <HAL_ADC_ConvCpltCallback+0x7c>)
 80060f8:	6013      	str	r3, [r2, #0]
		adccount++;
 80060fa:	4b16      	ldr	r3, [pc, #88]	; (8006154 <HAL_ADC_ConvCpltCallback+0x80>)
 80060fc:	881b      	ldrh	r3, [r3, #0]
 80060fe:	b29b      	uxth	r3, r3
 8006100:	3301      	adds	r3, #1
 8006102:	b29a      	uxth	r2, r3
 8006104:	4b13      	ldr	r3, [pc, #76]	; (8006154 <HAL_ADC_ConvCpltCallback+0x80>)
 8006106:	801a      	strh	r2, [r3, #0]
		ADC_Convert(&tmpadc, 0);
 8006108:	2100      	movs	r1, #0
 800610a:	4811      	ldr	r0, [pc, #68]	; (8006150 <HAL_ADC_ConvCpltCallback+0x7c>)
 800610c:	f000 f92e 	bl	800636c <ADC_Convert>
	}
	if (hadc->Instance == hadc2.Instance)	{
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681a      	ldr	r2, [r3, #0]
 8006114:	4b10      	ldr	r3, [pc, #64]	; (8006158 <HAL_ADC_ConvCpltCallback+0x84>)
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	429a      	cmp	r2, r3
 800611a:	d113      	bne.n	8006144 <HAL_ADC_ConvCpltCallback+0x70>
		tmpadc1 += HAL_ADC_GetValue(&hadc2);
 800611c:	480e      	ldr	r0, [pc, #56]	; (8006158 <HAL_ADC_ConvCpltCallback+0x84>)
 800611e:	f001 ffd1 	bl	80080c4 <HAL_ADC_GetValue>
 8006122:	4602      	mov	r2, r0
 8006124:	4b0d      	ldr	r3, [pc, #52]	; (800615c <HAL_ADC_ConvCpltCallback+0x88>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4413      	add	r3, r2
 800612a:	4a0c      	ldr	r2, [pc, #48]	; (800615c <HAL_ADC_ConvCpltCallback+0x88>)
 800612c:	6013      	str	r3, [r2, #0]
		adccount1++;
 800612e:	4b0c      	ldr	r3, [pc, #48]	; (8006160 <HAL_ADC_ConvCpltCallback+0x8c>)
 8006130:	881b      	ldrh	r3, [r3, #0]
 8006132:	b29b      	uxth	r3, r3
 8006134:	3301      	adds	r3, #1
 8006136:	b29a      	uxth	r2, r3
 8006138:	4b09      	ldr	r3, [pc, #36]	; (8006160 <HAL_ADC_ConvCpltCallback+0x8c>)
 800613a:	801a      	strh	r2, [r3, #0]
		ADC_Convert(&tmpadc1, 1);
 800613c:	2101      	movs	r1, #1
 800613e:	4807      	ldr	r0, [pc, #28]	; (800615c <HAL_ADC_ConvCpltCallback+0x88>)
 8006140:	f000 f914 	bl	800636c <ADC_Convert>
	}
}
 8006144:	bf00      	nop
 8006146:	3708      	adds	r7, #8
 8006148:	46bd      	mov	sp, r7
 800614a:	bd80      	pop	{r7, pc}
 800614c:	200011e4 	.word	0x200011e4
 8006150:	20002520 	.word	0x20002520
 8006154:	20002524 	.word	0x20002524
 8006158:	20001214 	.word	0x20001214
 800615c:	20002528 	.word	0x20002528
 8006160:	2000252c 	.word	0x2000252c

08006164 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006168:	f001 fd98 	bl	8007c9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800616c:	f000 f8a2 	bl	80062b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006170:	f7ff fd08 	bl	8005b84 <MX_GPIO_Init>
  MX_DMA_Init();
 8006174:	f7ff fc86 	bl	8005a84 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8006178:	f000 fb5c 	bl	8006834 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800617c:	f000 fb84 	bl	8006888 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8006180:	f7ff fdd4 	bl	8005d2c <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8006184:	f000 fbaa 	bl	80068dc <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8006188:	f000 fae6 	bl	8006758 <MX_TIM1_Init>
  MX_ADC1_Init();
 800618c:	f7ff fb5c 	bl	8005848 <MX_ADC1_Init>
  MX_ADC2_Init();
 8006190:	f7ff fb98 	bl	80058c4 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  SSnode_list =list_create();
 8006194:	f7ff fe68 	bl	8005e68 <list_create>
 8006198:	4603      	mov	r3, r0
 800619a:	4a38      	ldr	r2, [pc, #224]	; (800627c <main+0x118>)
 800619c:	6013      	str	r3, [r2, #0]

  myStation.ssNode_list = SSnode_list;
 800619e:	4b37      	ldr	r3, [pc, #220]	; (800627c <main+0x118>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4a37      	ldr	r2, [pc, #220]	; (8006280 <main+0x11c>)
 80061a4:	60d3      	str	r3, [r2, #12]

  // Get station ID from flash
//  Flash_Write_NUM(FLASH_PAGE_127, 0x04);
  myStation.stID = (uint8_t)Flash_Read_NUM(FLASH_PAGE_127);
 80061a6:	4837      	ldr	r0, [pc, #220]	; (8006284 <main+0x120>)
 80061a8:	f7ff fcd5 	bl	8005b56 <Flash_Read_NUM>
 80061ac:	4603      	mov	r3, r0
 80061ae:	4618      	mov	r0, r3
 80061b0:	f7f9 ffde 	bl	8000170 <__aeabi_f2uiz>
 80061b4:	4603      	mov	r3, r0
 80061b6:	b2da      	uxtb	r2, r3
 80061b8:	4b31      	ldr	r3, [pc, #196]	; (8006280 <main+0x11c>)
 80061ba:	705a      	strb	r2, [r3, #1]

  /********************Configure MQTT********************************/
	mySIM.mqttServer.host = "tcp://broker.hivemq.com";
 80061bc:	4b32      	ldr	r3, [pc, #200]	; (8006288 <main+0x124>)
 80061be:	4a33      	ldr	r2, [pc, #204]	; (800628c <main+0x128>)
 80061c0:	601a      	str	r2, [r3, #0]
	mySIM.mqttServer.port = 1883;
 80061c2:	4b31      	ldr	r3, [pc, #196]	; (8006288 <main+0x124>)
 80061c4:	f240 725b 	movw	r2, #1883	; 0x75b
 80061c8:	819a      	strh	r2, [r3, #12]
	mySIM.mqttServer.willtopic = "unnormal_disconnect";
 80061ca:	4b2f      	ldr	r3, [pc, #188]	; (8006288 <main+0x124>)
 80061cc:	4a30      	ldr	r2, [pc, #192]	; (8006290 <main+0x12c>)
 80061ce:	605a      	str	r2, [r3, #4]
	mySIM.mqttServer.willmsg = (uint8_t*)malloc(sizeof(myStation.stID));
 80061d0:	2001      	movs	r0, #1
 80061d2:	f006 f85b 	bl	800c28c <malloc>
 80061d6:	4603      	mov	r3, r0
 80061d8:	461a      	mov	r2, r3
 80061da:	4b2b      	ldr	r3, [pc, #172]	; (8006288 <main+0x124>)
 80061dc:	609a      	str	r2, [r3, #8]
	sprintf((char*)mySIM.mqttServer.willmsg,"%d",myStation.stID);
 80061de:	4b2a      	ldr	r3, [pc, #168]	; (8006288 <main+0x124>)
 80061e0:	689b      	ldr	r3, [r3, #8]
 80061e2:	4a27      	ldr	r2, [pc, #156]	; (8006280 <main+0x11c>)
 80061e4:	7852      	ldrb	r2, [r2, #1]
 80061e6:	492b      	ldr	r1, [pc, #172]	; (8006294 <main+0x130>)
 80061e8:	4618      	mov	r0, r3
 80061ea:	f006 fbe3 	bl	800c9b4 <siprintf>
	mySIM.mqttClient.keepAliveInterval = 180;
 80061ee:	4b26      	ldr	r3, [pc, #152]	; (8006288 <main+0x124>)
 80061f0:	22b4      	movs	r2, #180	; 0xb4
 80061f2:	849a      	strh	r2, [r3, #36]	; 0x24
	sprintf(mySIM.mqttClient.clientID,"bsrclientII&IL%d",myStation.stID);
 80061f4:	4b22      	ldr	r3, [pc, #136]	; (8006280 <main+0x11c>)
 80061f6:	785b      	ldrb	r3, [r3, #1]
 80061f8:	461a      	mov	r2, r3
 80061fa:	4927      	ldr	r1, [pc, #156]	; (8006298 <main+0x134>)
 80061fc:	4827      	ldr	r0, [pc, #156]	; (800629c <main+0x138>)
 80061fe:	f006 fbd9 	bl	800c9b4 <siprintf>
	mySIM.mqttReceive.qos =1;
 8006202:	4b21      	ldr	r3, [pc, #132]	; (8006288 <main+0x124>)
 8006204:	2201      	movs	r2, #1
 8006206:	62da      	str	r2, [r3, #44]	; 0x2c
	mySIM.mqttServer.connect=0;
 8006208:	4b1f      	ldr	r3, [pc, #124]	; (8006288 <main+0x124>)
 800620a:	2200      	movs	r2, #0
 800620c:	739a      	strb	r2, [r3, #14]

	mySIM.sms = mySMS;
 800620e:	4b1e      	ldr	r3, [pc, #120]	; (8006288 <main+0x124>)
 8006210:	4a23      	ldr	r2, [pc, #140]	; (80062a0 <main+0x13c>)
 8006212:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8006216:	4611      	mov	r1, r2
 8006218:	f44f 6209 	mov.w	r2, #2192	; 0x890
 800621c:	4618      	mov	r0, r3
 800621e:	f006 f855 	bl	800c2cc <memcpy>

	// ADC
	HAL_ADC_Start_IT(&hadc1);
 8006222:	4820      	ldr	r0, [pc, #128]	; (80062a4 <main+0x140>)
 8006224:	f001 fe98 	bl	8007f58 <HAL_ADC_Start_IT>

	initTask();
 8006228:	f7ff f8e3 	bl	80053f2 <initTask>

	// MBA and Step motor
	initApp_MBA_stepmor();
 800622c:	f7fa fab4 	bl	8000798 <initApp_MBA_stepmor>
	// Lora
	initLora();
 8006230:	f7fe f90e 	bl	8004450 <initLora>

	// GPS
	initSerial_CFG();
 8006234:	f7fa fe3d 	bl	8000eb2 <initSerial_CFG>

	initGPS(&myRTC);
 8006238:	481b      	ldr	r0, [pc, #108]	; (80062a8 <main+0x144>)
 800623a:	f7fa fe41 	bl	8000ec0 <initGPS>

	initSIM();
 800623e:	f7fc f85b 	bl	80022f8 <initSIM>

	// Init MQTT app
	initApp_MQTT();
 8006242:	f7fa fb55 	bl	80008f0 <initApp_MQTT>


	initApp_SMS(&mySIM.sms);
 8006246:	4819      	ldr	r0, [pc, #100]	; (80062ac <main+0x148>)
 8006248:	f7fa fd78 	bl	8000d3c <initApp_SMS>

//	init_App_Serial();

	// Init RTC module (DS3231)
	DS3231_Init(&hi2c1);
 800624c:	4818      	ldr	r0, [pc, #96]	; (80062b0 <main+0x14c>)
 800624e:	f7fd fde7 	bl	8003e20 <DS3231_Init>

	initApp_Display();
 8006252:	f7fa f969 	bl	8000528 <initApp_Display>

	triggerTaskflag(TASK_GET_GPS_TIME, FLAG_EN);
 8006256:	2101      	movs	r1, #1
 8006258:	2005      	movs	r0, #5
 800625a:	f7ff f9c5 	bl	80055e8 <triggerTaskflag>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  processApp_MCU();
 800625e:	f7fa fae7 	bl	8000830 <processApp_MCU>
	  processingApp_display();
 8006262:	f7fa f9c7 	bl	80005f4 <processingApp_display>
	  processApp_MQTT();
 8006266:	f7fa fbc5 	bl	80009f4 <processApp_MQTT>
	  processingApp_MBA_stepmor();
 800626a:	f7fa fa9b 	bl	80007a4 <processingApp_MBA_stepmor>
	  processApp_SMS();
 800626e:	f7fa fdab 	bl	8000dc8 <processApp_SMS>

//	  testSynchronize();

	  HAL_Delay(20);
 8006272:	2014      	movs	r0, #20
 8006274:	f001 fd74 	bl	8007d60 <HAL_Delay>
	  processApp_MCU();
 8006278:	e7f1      	b.n	800625e <main+0xfa>
 800627a:	bf00      	nop
 800627c:	20002518 	.word	0x20002518
 8006280:	20000474 	.word	0x20000474
 8006284:	0801fc00 	.word	0x0801fc00
 8006288:	20001298 	.word	0x20001298
 800628c:	0800f2a8 	.word	0x0800f2a8
 8006290:	0800f2c0 	.word	0x0800f2c0
 8006294:	0800f2d4 	.word	0x0800f2d4
 8006298:	0800f2d8 	.word	0x0800f2d8
 800629c:	200012a8 	.word	0x200012a8
 80062a0:	20001c88 	.word	0x20001c88
 80062a4:	200011e4 	.word	0x200011e4
 80062a8:	20000f6c 	.word	0x20000f6c
 80062ac:	200013f8 	.word	0x200013f8
 80062b0:	20001244 	.word	0x20001244

080062b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b094      	sub	sp, #80	; 0x50
 80062b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80062ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80062be:	2228      	movs	r2, #40	; 0x28
 80062c0:	2100      	movs	r1, #0
 80062c2:	4618      	mov	r0, r3
 80062c4:	f006 f810 	bl	800c2e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80062c8:	f107 0314 	add.w	r3, r7, #20
 80062cc:	2200      	movs	r2, #0
 80062ce:	601a      	str	r2, [r3, #0]
 80062d0:	605a      	str	r2, [r3, #4]
 80062d2:	609a      	str	r2, [r3, #8]
 80062d4:	60da      	str	r2, [r3, #12]
 80062d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80062d8:	1d3b      	adds	r3, r7, #4
 80062da:	2200      	movs	r2, #0
 80062dc:	601a      	str	r2, [r3, #0]
 80062de:	605a      	str	r2, [r3, #4]
 80062e0:	609a      	str	r2, [r3, #8]
 80062e2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80062e4:	2301      	movs	r3, #1
 80062e6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80062e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80062ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80062ee:	2300      	movs	r3, #0
 80062f0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80062f2:	2301      	movs	r3, #1
 80062f4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80062f6:	2302      	movs	r3, #2
 80062f8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80062fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80062fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8006300:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8006304:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006306:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800630a:	4618      	mov	r0, r3
 800630c:	f003 ff12 	bl	800a134 <HAL_RCC_OscConfig>
 8006310:	4603      	mov	r3, r0
 8006312:	2b00      	cmp	r3, #0
 8006314:	d001      	beq.n	800631a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8006316:	f000 f889 	bl	800642c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800631a:	230f      	movs	r3, #15
 800631c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800631e:	2302      	movs	r3, #2
 8006320:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006322:	2300      	movs	r3, #0
 8006324:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8006326:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800632a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800632c:	2300      	movs	r3, #0
 800632e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8006330:	f107 0314 	add.w	r3, r7, #20
 8006334:	2102      	movs	r1, #2
 8006336:	4618      	mov	r0, r3
 8006338:	f004 f97e 	bl	800a638 <HAL_RCC_ClockConfig>
 800633c:	4603      	mov	r3, r0
 800633e:	2b00      	cmp	r3, #0
 8006340:	d001      	beq.n	8006346 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8006342:	f000 f873 	bl	800642c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8006346:	2302      	movs	r3, #2
 8006348:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800634a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800634e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006350:	1d3b      	adds	r3, r7, #4
 8006352:	4618      	mov	r0, r3
 8006354:	f004 fafe 	bl	800a954 <HAL_RCCEx_PeriphCLKConfig>
 8006358:	4603      	mov	r3, r0
 800635a:	2b00      	cmp	r3, #0
 800635c:	d001      	beq.n	8006362 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800635e:	f000 f865 	bl	800642c <Error_Handler>
  }
}
 8006362:	bf00      	nop
 8006364:	3750      	adds	r7, #80	; 0x50
 8006366:	46bd      	mov	sp, r7
 8006368:	bd80      	pop	{r7, pc}
	...

0800636c <ADC_Convert>:
/* USER CODE BEGIN 4 */
/*
 *  @Para:  CurorVol : 0 Current, 1 Voltage
 */
static void ADC_Convert(uint32_t volatile *adcval, uint8_t CurorVol)
{
 800636c:	b480      	push	{r7}
 800636e:	b083      	sub	sp, #12
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
 8006374:	460b      	mov	r3, r1
 8006376:	70fb      	strb	r3, [r7, #3]
	switch (CurorVol)	{
 8006378:	78fb      	ldrb	r3, [r7, #3]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d002      	beq.n	8006384 <ADC_Convert+0x18>
 800637e:	2b01      	cmp	r3, #1
 8006380:	d021      	beq.n	80063c6 <ADC_Convert+0x5a>
			*adcval = 0;
			adccount1 = 0;
		}
		break;
	default:
		break;
 8006382:	e044      	b.n	800640e <ADC_Convert+0xa2>
		if (adccount == 1000)	{
 8006384:	4b24      	ldr	r3, [pc, #144]	; (8006418 <ADC_Convert+0xac>)
 8006386:	881b      	ldrh	r3, [r3, #0]
 8006388:	b29b      	uxth	r3, r3
 800638a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800638e:	d13b      	bne.n	8006408 <ADC_Convert+0x9c>
			myStation.stCurrent = (uint16_t)( ( ( (*adcval)*3/4095) + 50)/6);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681a      	ldr	r2, [r3, #0]
 8006394:	4613      	mov	r3, r2
 8006396:	005b      	lsls	r3, r3, #1
 8006398:	441a      	add	r2, r3
 800639a:	4b20      	ldr	r3, [pc, #128]	; (800641c <ADC_Convert+0xb0>)
 800639c:	fba3 1302 	umull	r1, r3, r3, r2
 80063a0:	1ad2      	subs	r2, r2, r3
 80063a2:	0852      	lsrs	r2, r2, #1
 80063a4:	4413      	add	r3, r2
 80063a6:	0adb      	lsrs	r3, r3, #11
 80063a8:	3332      	adds	r3, #50	; 0x32
 80063aa:	4a1d      	ldr	r2, [pc, #116]	; (8006420 <ADC_Convert+0xb4>)
 80063ac:	fba2 2303 	umull	r2, r3, r2, r3
 80063b0:	089b      	lsrs	r3, r3, #2
 80063b2:	b29a      	uxth	r2, r3
 80063b4:	4b1b      	ldr	r3, [pc, #108]	; (8006424 <ADC_Convert+0xb8>)
 80063b6:	805a      	strh	r2, [r3, #2]
			*adcval = 0;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2200      	movs	r2, #0
 80063bc:	601a      	str	r2, [r3, #0]
			adccount = 0;
 80063be:	4b16      	ldr	r3, [pc, #88]	; (8006418 <ADC_Convert+0xac>)
 80063c0:	2200      	movs	r2, #0
 80063c2:	801a      	strh	r2, [r3, #0]
		break;
 80063c4:	e020      	b.n	8006408 <ADC_Convert+0x9c>
		if (adccount1 == 1000)	{
 80063c6:	4b18      	ldr	r3, [pc, #96]	; (8006428 <ADC_Convert+0xbc>)
 80063c8:	881b      	ldrh	r3, [r3, #0]
 80063ca:	b29b      	uxth	r3, r3
 80063cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80063d0:	d11c      	bne.n	800640c <ADC_Convert+0xa0>
			myStation.stVoltage = (uint16_t)( ( ( (*adcval)*3/4095) + 50)/6);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681a      	ldr	r2, [r3, #0]
 80063d6:	4613      	mov	r3, r2
 80063d8:	005b      	lsls	r3, r3, #1
 80063da:	441a      	add	r2, r3
 80063dc:	4b0f      	ldr	r3, [pc, #60]	; (800641c <ADC_Convert+0xb0>)
 80063de:	fba3 1302 	umull	r1, r3, r3, r2
 80063e2:	1ad2      	subs	r2, r2, r3
 80063e4:	0852      	lsrs	r2, r2, #1
 80063e6:	4413      	add	r3, r2
 80063e8:	0adb      	lsrs	r3, r3, #11
 80063ea:	3332      	adds	r3, #50	; 0x32
 80063ec:	4a0c      	ldr	r2, [pc, #48]	; (8006420 <ADC_Convert+0xb4>)
 80063ee:	fba2 2303 	umull	r2, r3, r2, r3
 80063f2:	089b      	lsrs	r3, r3, #2
 80063f4:	b29a      	uxth	r2, r3
 80063f6:	4b0b      	ldr	r3, [pc, #44]	; (8006424 <ADC_Convert+0xb8>)
 80063f8:	809a      	strh	r2, [r3, #4]
			*adcval = 0;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2200      	movs	r2, #0
 80063fe:	601a      	str	r2, [r3, #0]
			adccount1 = 0;
 8006400:	4b09      	ldr	r3, [pc, #36]	; (8006428 <ADC_Convert+0xbc>)
 8006402:	2200      	movs	r2, #0
 8006404:	801a      	strh	r2, [r3, #0]
		break;
 8006406:	e001      	b.n	800640c <ADC_Convert+0xa0>
		break;
 8006408:	bf00      	nop
 800640a:	e000      	b.n	800640e <ADC_Convert+0xa2>
		break;
 800640c:	bf00      	nop
	}

}
 800640e:	bf00      	nop
 8006410:	370c      	adds	r7, #12
 8006412:	46bd      	mov	sp, r7
 8006414:	bc80      	pop	{r7}
 8006416:	4770      	bx	lr
 8006418:	20002524 	.word	0x20002524
 800641c:	00100101 	.word	0x00100101
 8006420:	aaaaaaab 	.word	0xaaaaaaab
 8006424:	20000474 	.word	0x20000474
 8006428:	2000252c 	.word	0x2000252c

0800642c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800642c:	b480      	push	{r7}
 800642e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006430:	b672      	cpsid	i
}
 8006432:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006434:	e7fe      	b.n	8006434 <Error_Handler+0x8>
	...

08006438 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006438:	b480      	push	{r7}
 800643a:	b085      	sub	sp, #20
 800643c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800643e:	4b15      	ldr	r3, [pc, #84]	; (8006494 <HAL_MspInit+0x5c>)
 8006440:	699b      	ldr	r3, [r3, #24]
 8006442:	4a14      	ldr	r2, [pc, #80]	; (8006494 <HAL_MspInit+0x5c>)
 8006444:	f043 0301 	orr.w	r3, r3, #1
 8006448:	6193      	str	r3, [r2, #24]
 800644a:	4b12      	ldr	r3, [pc, #72]	; (8006494 <HAL_MspInit+0x5c>)
 800644c:	699b      	ldr	r3, [r3, #24]
 800644e:	f003 0301 	and.w	r3, r3, #1
 8006452:	60bb      	str	r3, [r7, #8]
 8006454:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006456:	4b0f      	ldr	r3, [pc, #60]	; (8006494 <HAL_MspInit+0x5c>)
 8006458:	69db      	ldr	r3, [r3, #28]
 800645a:	4a0e      	ldr	r2, [pc, #56]	; (8006494 <HAL_MspInit+0x5c>)
 800645c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006460:	61d3      	str	r3, [r2, #28]
 8006462:	4b0c      	ldr	r3, [pc, #48]	; (8006494 <HAL_MspInit+0x5c>)
 8006464:	69db      	ldr	r3, [r3, #28]
 8006466:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800646a:	607b      	str	r3, [r7, #4]
 800646c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800646e:	4b0a      	ldr	r3, [pc, #40]	; (8006498 <HAL_MspInit+0x60>)
 8006470:	685b      	ldr	r3, [r3, #4]
 8006472:	60fb      	str	r3, [r7, #12]
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800647a:	60fb      	str	r3, [r7, #12]
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006482:	60fb      	str	r3, [r7, #12]
 8006484:	4a04      	ldr	r2, [pc, #16]	; (8006498 <HAL_MspInit+0x60>)
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800648a:	bf00      	nop
 800648c:	3714      	adds	r7, #20
 800648e:	46bd      	mov	sp, r7
 8006490:	bc80      	pop	{r7}
 8006492:	4770      	bx	lr
 8006494:	40021000 	.word	0x40021000
 8006498:	40010000 	.word	0x40010000

0800649c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800649c:	b480      	push	{r7}
 800649e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80064a0:	e7fe      	b.n	80064a0 <NMI_Handler+0x4>

080064a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80064a2:	b480      	push	{r7}
 80064a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80064a6:	e7fe      	b.n	80064a6 <HardFault_Handler+0x4>

080064a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80064a8:	b480      	push	{r7}
 80064aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80064ac:	e7fe      	b.n	80064ac <MemManage_Handler+0x4>

080064ae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80064ae:	b480      	push	{r7}
 80064b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80064b2:	e7fe      	b.n	80064b2 <BusFault_Handler+0x4>

080064b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80064b4:	b480      	push	{r7}
 80064b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80064b8:	e7fe      	b.n	80064b8 <UsageFault_Handler+0x4>

080064ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80064ba:	b480      	push	{r7}
 80064bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80064be:	bf00      	nop
 80064c0:	46bd      	mov	sp, r7
 80064c2:	bc80      	pop	{r7}
 80064c4:	4770      	bx	lr

080064c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80064c6:	b480      	push	{r7}
 80064c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80064ca:	bf00      	nop
 80064cc:	46bd      	mov	sp, r7
 80064ce:	bc80      	pop	{r7}
 80064d0:	4770      	bx	lr

080064d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80064d2:	b480      	push	{r7}
 80064d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80064d6:	bf00      	nop
 80064d8:	46bd      	mov	sp, r7
 80064da:	bc80      	pop	{r7}
 80064dc:	4770      	bx	lr

080064de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80064de:	b580      	push	{r7, lr}
 80064e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80064e2:	f001 fc21 	bl	8007d28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80064e6:	bf00      	nop
 80064e8:	bd80      	pop	{r7, pc}

080064ea <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80064ea:	b580      	push	{r7, lr}
 80064ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RTC_ALARM_TRIGGER_Pin);
 80064ee:	2001      	movs	r0, #1
 80064f0:	f002 fdd4 	bl	800909c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80064f4:	bf00      	nop
 80064f6:	bd80      	pop	{r7, pc}

080064f8 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LIMIT_SWITCH_MIN_Pin);
 80064fc:	2004      	movs	r0, #4
 80064fe:	f002 fdcd 	bl	800909c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8006502:	bf00      	nop
 8006504:	bd80      	pop	{r7, pc}
	...

08006508 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800650c:	4802      	ldr	r0, [pc, #8]	; (8006518 <DMA1_Channel3_IRQHandler+0x10>)
 800650e:	f002 fac5 	bl	8008a9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8006512:	bf00      	nop
 8006514:	bd80      	pop	{r7, pc}
 8006516:	bf00      	nop
 8006518:	200026ec 	.word	0x200026ec

0800651c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8006520:	4802      	ldr	r0, [pc, #8]	; (800652c <DMA1_Channel5_IRQHandler+0x10>)
 8006522:	f002 fabb 	bl	8008a9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8006526:	bf00      	nop
 8006528:	bd80      	pop	{r7, pc}
 800652a:	bf00      	nop
 800652c:	20002664 	.word	0x20002664

08006530 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8006534:	4802      	ldr	r0, [pc, #8]	; (8006540 <DMA1_Channel6_IRQHandler+0x10>)
 8006536:	f002 fab1 	bl	8008a9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800653a:	bf00      	nop
 800653c:	bd80      	pop	{r7, pc}
 800653e:	bf00      	nop
 8006540:	200026a8 	.word	0x200026a8

08006544 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8006548:	4803      	ldr	r0, [pc, #12]	; (8006558 <ADC1_2_IRQHandler+0x14>)
 800654a:	f001 fdc7 	bl	80080dc <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 800654e:	4803      	ldr	r0, [pc, #12]	; (800655c <ADC1_2_IRQHandler+0x18>)
 8006550:	f001 fdc4 	bl	80080dc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8006554:	bf00      	nop
 8006556:	bd80      	pop	{r7, pc}
 8006558:	200011e4 	.word	0x200011e4
 800655c:	20001214 	.word	0x20001214

08006560 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_DOWN_Pin);
 8006564:	f44f 7080 	mov.w	r0, #256	; 0x100
 8006568:	f002 fd98 	bl	800909c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_UP_Pin);
 800656c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8006570:	f002 fd94 	bl	800909c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8006574:	bf00      	nop
 8006576:	bd80      	pop	{r7, pc}

08006578 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800657c:	4802      	ldr	r0, [pc, #8]	; (8006588 <USART1_IRQHandler+0x10>)
 800657e:	f004 fe3b 	bl	800b1f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8006582:	bf00      	nop
 8006584:	bd80      	pop	{r7, pc}
 8006586:	bf00      	nop
 8006588:	2000258c 	.word	0x2000258c

0800658c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8006590:	4802      	ldr	r0, [pc, #8]	; (800659c <USART2_IRQHandler+0x10>)
 8006592:	f004 fe31 	bl	800b1f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8006596:	bf00      	nop
 8006598:	bd80      	pop	{r7, pc}
 800659a:	bf00      	nop
 800659c:	200025d4 	.word	0x200025d4

080065a0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80065a4:	4802      	ldr	r0, [pc, #8]	; (80065b0 <USART3_IRQHandler+0x10>)
 80065a6:	f004 fe27 	bl	800b1f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80065aa:	bf00      	nop
 80065ac:	bd80      	pop	{r7, pc}
 80065ae:	bf00      	nop
 80065b0:	2000261c 	.word	0x2000261c

080065b4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_MENU_Pin);
 80065b8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80065bc:	f002 fd6e 	bl	800909c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_OK_Pin);
 80065c0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80065c4:	f002 fd6a 	bl	800909c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80065c8:	bf00      	nop
 80065ca:	bd80      	pop	{r7, pc}

080065cc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80065cc:	b480      	push	{r7}
 80065ce:	af00      	add	r7, sp, #0
	return 1;
 80065d0:	2301      	movs	r3, #1
}
 80065d2:	4618      	mov	r0, r3
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bc80      	pop	{r7}
 80065d8:	4770      	bx	lr

080065da <_kill>:

int _kill(int pid, int sig)
{
 80065da:	b580      	push	{r7, lr}
 80065dc:	b082      	sub	sp, #8
 80065de:	af00      	add	r7, sp, #0
 80065e0:	6078      	str	r0, [r7, #4]
 80065e2:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80065e4:	f005 fd18 	bl	800c018 <__errno>
 80065e8:	4603      	mov	r3, r0
 80065ea:	2216      	movs	r2, #22
 80065ec:	601a      	str	r2, [r3, #0]
	return -1;
 80065ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80065f2:	4618      	mov	r0, r3
 80065f4:	3708      	adds	r7, #8
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}

080065fa <_exit>:

void _exit (int status)
{
 80065fa:	b580      	push	{r7, lr}
 80065fc:	b082      	sub	sp, #8
 80065fe:	af00      	add	r7, sp, #0
 8006600:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8006602:	f04f 31ff 	mov.w	r1, #4294967295
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f7ff ffe7 	bl	80065da <_kill>
	while (1) {}		/* Make sure we hang here */
 800660c:	e7fe      	b.n	800660c <_exit+0x12>

0800660e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800660e:	b580      	push	{r7, lr}
 8006610:	b086      	sub	sp, #24
 8006612:	af00      	add	r7, sp, #0
 8006614:	60f8      	str	r0, [r7, #12]
 8006616:	60b9      	str	r1, [r7, #8]
 8006618:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800661a:	2300      	movs	r3, #0
 800661c:	617b      	str	r3, [r7, #20]
 800661e:	e00a      	b.n	8006636 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8006620:	f3af 8000 	nop.w
 8006624:	4601      	mov	r1, r0
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	1c5a      	adds	r2, r3, #1
 800662a:	60ba      	str	r2, [r7, #8]
 800662c:	b2ca      	uxtb	r2, r1
 800662e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006630:	697b      	ldr	r3, [r7, #20]
 8006632:	3301      	adds	r3, #1
 8006634:	617b      	str	r3, [r7, #20]
 8006636:	697a      	ldr	r2, [r7, #20]
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	429a      	cmp	r2, r3
 800663c:	dbf0      	blt.n	8006620 <_read+0x12>
	}

return len;
 800663e:	687b      	ldr	r3, [r7, #4]
}
 8006640:	4618      	mov	r0, r3
 8006642:	3718      	adds	r7, #24
 8006644:	46bd      	mov	sp, r7
 8006646:	bd80      	pop	{r7, pc}

08006648 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b086      	sub	sp, #24
 800664c:	af00      	add	r7, sp, #0
 800664e:	60f8      	str	r0, [r7, #12]
 8006650:	60b9      	str	r1, [r7, #8]
 8006652:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006654:	2300      	movs	r3, #0
 8006656:	617b      	str	r3, [r7, #20]
 8006658:	e009      	b.n	800666e <_write+0x26>
	{
		__io_putchar(*ptr++);
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	1c5a      	adds	r2, r3, #1
 800665e:	60ba      	str	r2, [r7, #8]
 8006660:	781b      	ldrb	r3, [r3, #0]
 8006662:	4618      	mov	r0, r3
 8006664:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	3301      	adds	r3, #1
 800666c:	617b      	str	r3, [r7, #20]
 800666e:	697a      	ldr	r2, [r7, #20]
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	429a      	cmp	r2, r3
 8006674:	dbf1      	blt.n	800665a <_write+0x12>
	}
	return len;
 8006676:	687b      	ldr	r3, [r7, #4]
}
 8006678:	4618      	mov	r0, r3
 800667a:	3718      	adds	r7, #24
 800667c:	46bd      	mov	sp, r7
 800667e:	bd80      	pop	{r7, pc}

08006680 <_close>:

int _close(int file)
{
 8006680:	b480      	push	{r7}
 8006682:	b083      	sub	sp, #12
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
	return -1;
 8006688:	f04f 33ff 	mov.w	r3, #4294967295
}
 800668c:	4618      	mov	r0, r3
 800668e:	370c      	adds	r7, #12
 8006690:	46bd      	mov	sp, r7
 8006692:	bc80      	pop	{r7}
 8006694:	4770      	bx	lr

08006696 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006696:	b480      	push	{r7}
 8006698:	b083      	sub	sp, #12
 800669a:	af00      	add	r7, sp, #0
 800669c:	6078      	str	r0, [r7, #4]
 800669e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80066a6:	605a      	str	r2, [r3, #4]
	return 0;
 80066a8:	2300      	movs	r3, #0
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	370c      	adds	r7, #12
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bc80      	pop	{r7}
 80066b2:	4770      	bx	lr

080066b4 <_isatty>:

int _isatty(int file)
{
 80066b4:	b480      	push	{r7}
 80066b6:	b083      	sub	sp, #12
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
	return 1;
 80066bc:	2301      	movs	r3, #1
}
 80066be:	4618      	mov	r0, r3
 80066c0:	370c      	adds	r7, #12
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bc80      	pop	{r7}
 80066c6:	4770      	bx	lr

080066c8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80066c8:	b480      	push	{r7}
 80066ca:	b085      	sub	sp, #20
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	60f8      	str	r0, [r7, #12]
 80066d0:	60b9      	str	r1, [r7, #8]
 80066d2:	607a      	str	r2, [r7, #4]
	return 0;
 80066d4:	2300      	movs	r3, #0
}
 80066d6:	4618      	mov	r0, r3
 80066d8:	3714      	adds	r7, #20
 80066da:	46bd      	mov	sp, r7
 80066dc:	bc80      	pop	{r7}
 80066de:	4770      	bx	lr

080066e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b086      	sub	sp, #24
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80066e8:	4a14      	ldr	r2, [pc, #80]	; (800673c <_sbrk+0x5c>)
 80066ea:	4b15      	ldr	r3, [pc, #84]	; (8006740 <_sbrk+0x60>)
 80066ec:	1ad3      	subs	r3, r2, r3
 80066ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80066f0:	697b      	ldr	r3, [r7, #20]
 80066f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80066f4:	4b13      	ldr	r3, [pc, #76]	; (8006744 <_sbrk+0x64>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d102      	bne.n	8006702 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80066fc:	4b11      	ldr	r3, [pc, #68]	; (8006744 <_sbrk+0x64>)
 80066fe:	4a12      	ldr	r2, [pc, #72]	; (8006748 <_sbrk+0x68>)
 8006700:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006702:	4b10      	ldr	r3, [pc, #64]	; (8006744 <_sbrk+0x64>)
 8006704:	681a      	ldr	r2, [r3, #0]
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	4413      	add	r3, r2
 800670a:	693a      	ldr	r2, [r7, #16]
 800670c:	429a      	cmp	r2, r3
 800670e:	d207      	bcs.n	8006720 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006710:	f005 fc82 	bl	800c018 <__errno>
 8006714:	4603      	mov	r3, r0
 8006716:	220c      	movs	r2, #12
 8006718:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800671a:	f04f 33ff 	mov.w	r3, #4294967295
 800671e:	e009      	b.n	8006734 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006720:	4b08      	ldr	r3, [pc, #32]	; (8006744 <_sbrk+0x64>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006726:	4b07      	ldr	r3, [pc, #28]	; (8006744 <_sbrk+0x64>)
 8006728:	681a      	ldr	r2, [r3, #0]
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	4413      	add	r3, r2
 800672e:	4a05      	ldr	r2, [pc, #20]	; (8006744 <_sbrk+0x64>)
 8006730:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006732:	68fb      	ldr	r3, [r7, #12]
}
 8006734:	4618      	mov	r0, r3
 8006736:	3718      	adds	r7, #24
 8006738:	46bd      	mov	sp, r7
 800673a:	bd80      	pop	{r7, pc}
 800673c:	20005000 	.word	0x20005000
 8006740:	00000400 	.word	0x00000400
 8006744:	20002540 	.word	0x20002540
 8006748:	20002770 	.word	0x20002770

0800674c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800674c:	b480      	push	{r7}
 800674e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006750:	bf00      	nop
 8006752:	46bd      	mov	sp, r7
 8006754:	bc80      	pop	{r7}
 8006756:	4770      	bx	lr

08006758 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b086      	sub	sp, #24
 800675c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800675e:	f107 0308 	add.w	r3, r7, #8
 8006762:	2200      	movs	r2, #0
 8006764:	601a      	str	r2, [r3, #0]
 8006766:	605a      	str	r2, [r3, #4]
 8006768:	609a      	str	r2, [r3, #8]
 800676a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800676c:	463b      	mov	r3, r7
 800676e:	2200      	movs	r2, #0
 8006770:	601a      	str	r2, [r3, #0]
 8006772:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8006774:	4b1e      	ldr	r3, [pc, #120]	; (80067f0 <MX_TIM1_Init+0x98>)
 8006776:	4a1f      	ldr	r2, [pc, #124]	; (80067f4 <MX_TIM1_Init+0x9c>)
 8006778:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 800677a:	4b1d      	ldr	r3, [pc, #116]	; (80067f0 <MX_TIM1_Init+0x98>)
 800677c:	2247      	movs	r2, #71	; 0x47
 800677e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006780:	4b1b      	ldr	r3, [pc, #108]	; (80067f0 <MX_TIM1_Init+0x98>)
 8006782:	2200      	movs	r2, #0
 8006784:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xFFFF-1;
 8006786:	4b1a      	ldr	r3, [pc, #104]	; (80067f0 <MX_TIM1_Init+0x98>)
 8006788:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800678c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800678e:	4b18      	ldr	r3, [pc, #96]	; (80067f0 <MX_TIM1_Init+0x98>)
 8006790:	2200      	movs	r2, #0
 8006792:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8006794:	4b16      	ldr	r3, [pc, #88]	; (80067f0 <MX_TIM1_Init+0x98>)
 8006796:	2200      	movs	r2, #0
 8006798:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800679a:	4b15      	ldr	r3, [pc, #84]	; (80067f0 <MX_TIM1_Init+0x98>)
 800679c:	2200      	movs	r2, #0
 800679e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80067a0:	4813      	ldr	r0, [pc, #76]	; (80067f0 <MX_TIM1_Init+0x98>)
 80067a2:	f004 f98d 	bl	800aac0 <HAL_TIM_Base_Init>
 80067a6:	4603      	mov	r3, r0
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d001      	beq.n	80067b0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80067ac:	f7ff fe3e 	bl	800642c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80067b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80067b4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80067b6:	f107 0308 	add.w	r3, r7, #8
 80067ba:	4619      	mov	r1, r3
 80067bc:	480c      	ldr	r0, [pc, #48]	; (80067f0 <MX_TIM1_Init+0x98>)
 80067be:	f004 f9ce 	bl	800ab5e <HAL_TIM_ConfigClockSource>
 80067c2:	4603      	mov	r3, r0
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d001      	beq.n	80067cc <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80067c8:	f7ff fe30 	bl	800642c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80067cc:	2300      	movs	r3, #0
 80067ce:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80067d0:	2300      	movs	r3, #0
 80067d2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80067d4:	463b      	mov	r3, r7
 80067d6:	4619      	mov	r1, r3
 80067d8:	4805      	ldr	r0, [pc, #20]	; (80067f0 <MX_TIM1_Init+0x98>)
 80067da:	f004 fb7f 	bl	800aedc <HAL_TIMEx_MasterConfigSynchronization>
 80067de:	4603      	mov	r3, r0
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d001      	beq.n	80067e8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80067e4:	f7ff fe22 	bl	800642c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80067e8:	bf00      	nop
 80067ea:	3718      	adds	r7, #24
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bd80      	pop	{r7, pc}
 80067f0:	20002544 	.word	0x20002544
 80067f4:	40012c00 	.word	0x40012c00

080067f8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80067f8:	b480      	push	{r7}
 80067fa:	b085      	sub	sp, #20
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4a09      	ldr	r2, [pc, #36]	; (800682c <HAL_TIM_Base_MspInit+0x34>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d10b      	bne.n	8006822 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800680a:	4b09      	ldr	r3, [pc, #36]	; (8006830 <HAL_TIM_Base_MspInit+0x38>)
 800680c:	699b      	ldr	r3, [r3, #24]
 800680e:	4a08      	ldr	r2, [pc, #32]	; (8006830 <HAL_TIM_Base_MspInit+0x38>)
 8006810:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006814:	6193      	str	r3, [r2, #24]
 8006816:	4b06      	ldr	r3, [pc, #24]	; (8006830 <HAL_TIM_Base_MspInit+0x38>)
 8006818:	699b      	ldr	r3, [r3, #24]
 800681a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800681e:	60fb      	str	r3, [r7, #12]
 8006820:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8006822:	bf00      	nop
 8006824:	3714      	adds	r7, #20
 8006826:	46bd      	mov	sp, r7
 8006828:	bc80      	pop	{r7}
 800682a:	4770      	bx	lr
 800682c:	40012c00 	.word	0x40012c00
 8006830:	40021000 	.word	0x40021000

08006834 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8006838:	4b11      	ldr	r3, [pc, #68]	; (8006880 <MX_USART1_UART_Init+0x4c>)
 800683a:	4a12      	ldr	r2, [pc, #72]	; (8006884 <MX_USART1_UART_Init+0x50>)
 800683c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800683e:	4b10      	ldr	r3, [pc, #64]	; (8006880 <MX_USART1_UART_Init+0x4c>)
 8006840:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006844:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006846:	4b0e      	ldr	r3, [pc, #56]	; (8006880 <MX_USART1_UART_Init+0x4c>)
 8006848:	2200      	movs	r2, #0
 800684a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800684c:	4b0c      	ldr	r3, [pc, #48]	; (8006880 <MX_USART1_UART_Init+0x4c>)
 800684e:	2200      	movs	r2, #0
 8006850:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8006852:	4b0b      	ldr	r3, [pc, #44]	; (8006880 <MX_USART1_UART_Init+0x4c>)
 8006854:	2200      	movs	r2, #0
 8006856:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006858:	4b09      	ldr	r3, [pc, #36]	; (8006880 <MX_USART1_UART_Init+0x4c>)
 800685a:	220c      	movs	r2, #12
 800685c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800685e:	4b08      	ldr	r3, [pc, #32]	; (8006880 <MX_USART1_UART_Init+0x4c>)
 8006860:	2200      	movs	r2, #0
 8006862:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006864:	4b06      	ldr	r3, [pc, #24]	; (8006880 <MX_USART1_UART_Init+0x4c>)
 8006866:	2200      	movs	r2, #0
 8006868:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800686a:	4805      	ldr	r0, [pc, #20]	; (8006880 <MX_USART1_UART_Init+0x4c>)
 800686c:	f004 fb94 	bl	800af98 <HAL_UART_Init>
 8006870:	4603      	mov	r3, r0
 8006872:	2b00      	cmp	r3, #0
 8006874:	d001      	beq.n	800687a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8006876:	f7ff fdd9 	bl	800642c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800687a:	bf00      	nop
 800687c:	bd80      	pop	{r7, pc}
 800687e:	bf00      	nop
 8006880:	2000258c 	.word	0x2000258c
 8006884:	40013800 	.word	0x40013800

08006888 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800688c:	4b11      	ldr	r3, [pc, #68]	; (80068d4 <MX_USART2_UART_Init+0x4c>)
 800688e:	4a12      	ldr	r2, [pc, #72]	; (80068d8 <MX_USART2_UART_Init+0x50>)
 8006890:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8006892:	4b10      	ldr	r3, [pc, #64]	; (80068d4 <MX_USART2_UART_Init+0x4c>)
 8006894:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8006898:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800689a:	4b0e      	ldr	r3, [pc, #56]	; (80068d4 <MX_USART2_UART_Init+0x4c>)
 800689c:	2200      	movs	r2, #0
 800689e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80068a0:	4b0c      	ldr	r3, [pc, #48]	; (80068d4 <MX_USART2_UART_Init+0x4c>)
 80068a2:	2200      	movs	r2, #0
 80068a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80068a6:	4b0b      	ldr	r3, [pc, #44]	; (80068d4 <MX_USART2_UART_Init+0x4c>)
 80068a8:	2200      	movs	r2, #0
 80068aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80068ac:	4b09      	ldr	r3, [pc, #36]	; (80068d4 <MX_USART2_UART_Init+0x4c>)
 80068ae:	220c      	movs	r2, #12
 80068b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80068b2:	4b08      	ldr	r3, [pc, #32]	; (80068d4 <MX_USART2_UART_Init+0x4c>)
 80068b4:	2200      	movs	r2, #0
 80068b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80068b8:	4b06      	ldr	r3, [pc, #24]	; (80068d4 <MX_USART2_UART_Init+0x4c>)
 80068ba:	2200      	movs	r2, #0
 80068bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80068be:	4805      	ldr	r0, [pc, #20]	; (80068d4 <MX_USART2_UART_Init+0x4c>)
 80068c0:	f004 fb6a 	bl	800af98 <HAL_UART_Init>
 80068c4:	4603      	mov	r3, r0
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d001      	beq.n	80068ce <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80068ca:	f7ff fdaf 	bl	800642c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80068ce:	bf00      	nop
 80068d0:	bd80      	pop	{r7, pc}
 80068d2:	bf00      	nop
 80068d4:	200025d4 	.word	0x200025d4
 80068d8:	40004400 	.word	0x40004400

080068dc <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80068e0:	4b11      	ldr	r3, [pc, #68]	; (8006928 <MX_USART3_UART_Init+0x4c>)
 80068e2:	4a12      	ldr	r2, [pc, #72]	; (800692c <MX_USART3_UART_Init+0x50>)
 80068e4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80068e6:	4b10      	ldr	r3, [pc, #64]	; (8006928 <MX_USART3_UART_Init+0x4c>)
 80068e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80068ec:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80068ee:	4b0e      	ldr	r3, [pc, #56]	; (8006928 <MX_USART3_UART_Init+0x4c>)
 80068f0:	2200      	movs	r2, #0
 80068f2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80068f4:	4b0c      	ldr	r3, [pc, #48]	; (8006928 <MX_USART3_UART_Init+0x4c>)
 80068f6:	2200      	movs	r2, #0
 80068f8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80068fa:	4b0b      	ldr	r3, [pc, #44]	; (8006928 <MX_USART3_UART_Init+0x4c>)
 80068fc:	2200      	movs	r2, #0
 80068fe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8006900:	4b09      	ldr	r3, [pc, #36]	; (8006928 <MX_USART3_UART_Init+0x4c>)
 8006902:	220c      	movs	r2, #12
 8006904:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006906:	4b08      	ldr	r3, [pc, #32]	; (8006928 <MX_USART3_UART_Init+0x4c>)
 8006908:	2200      	movs	r2, #0
 800690a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800690c:	4b06      	ldr	r3, [pc, #24]	; (8006928 <MX_USART3_UART_Init+0x4c>)
 800690e:	2200      	movs	r2, #0
 8006910:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8006912:	4805      	ldr	r0, [pc, #20]	; (8006928 <MX_USART3_UART_Init+0x4c>)
 8006914:	f004 fb40 	bl	800af98 <HAL_UART_Init>
 8006918:	4603      	mov	r3, r0
 800691a:	2b00      	cmp	r3, #0
 800691c:	d001      	beq.n	8006922 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800691e:	f7ff fd85 	bl	800642c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8006922:	bf00      	nop
 8006924:	bd80      	pop	{r7, pc}
 8006926:	bf00      	nop
 8006928:	2000261c 	.word	0x2000261c
 800692c:	40004800 	.word	0x40004800

08006930 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b08e      	sub	sp, #56	; 0x38
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006938:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800693c:	2200      	movs	r2, #0
 800693e:	601a      	str	r2, [r3, #0]
 8006940:	605a      	str	r2, [r3, #4]
 8006942:	609a      	str	r2, [r3, #8]
 8006944:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4a9e      	ldr	r2, [pc, #632]	; (8006bc4 <HAL_UART_MspInit+0x294>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d16c      	bne.n	8006a2a <HAL_UART_MspInit+0xfa>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006950:	4b9d      	ldr	r3, [pc, #628]	; (8006bc8 <HAL_UART_MspInit+0x298>)
 8006952:	699b      	ldr	r3, [r3, #24]
 8006954:	4a9c      	ldr	r2, [pc, #624]	; (8006bc8 <HAL_UART_MspInit+0x298>)
 8006956:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800695a:	6193      	str	r3, [r2, #24]
 800695c:	4b9a      	ldr	r3, [pc, #616]	; (8006bc8 <HAL_UART_MspInit+0x298>)
 800695e:	699b      	ldr	r3, [r3, #24]
 8006960:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006964:	623b      	str	r3, [r7, #32]
 8006966:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006968:	4b97      	ldr	r3, [pc, #604]	; (8006bc8 <HAL_UART_MspInit+0x298>)
 800696a:	699b      	ldr	r3, [r3, #24]
 800696c:	4a96      	ldr	r2, [pc, #600]	; (8006bc8 <HAL_UART_MspInit+0x298>)
 800696e:	f043 0308 	orr.w	r3, r3, #8
 8006972:	6193      	str	r3, [r2, #24]
 8006974:	4b94      	ldr	r3, [pc, #592]	; (8006bc8 <HAL_UART_MspInit+0x298>)
 8006976:	699b      	ldr	r3, [r3, #24]
 8006978:	f003 0308 	and.w	r3, r3, #8
 800697c:	61fb      	str	r3, [r7, #28]
 800697e:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = SIM_TX_Pin;
 8006980:	2340      	movs	r3, #64	; 0x40
 8006982:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006984:	2302      	movs	r3, #2
 8006986:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006988:	2303      	movs	r3, #3
 800698a:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(SIM_TX_GPIO_Port, &GPIO_InitStruct);
 800698c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006990:	4619      	mov	r1, r3
 8006992:	488e      	ldr	r0, [pc, #568]	; (8006bcc <HAL_UART_MspInit+0x29c>)
 8006994:	f002 f9b6 	bl	8008d04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SIM_RX_Pin;
 8006998:	2380      	movs	r3, #128	; 0x80
 800699a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800699c:	2300      	movs	r3, #0
 800699e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069a0:	2300      	movs	r3, #0
 80069a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SIM_RX_GPIO_Port, &GPIO_InitStruct);
 80069a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80069a8:	4619      	mov	r1, r3
 80069aa:	4888      	ldr	r0, [pc, #544]	; (8006bcc <HAL_UART_MspInit+0x29c>)
 80069ac:	f002 f9aa 	bl	8008d04 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 80069b0:	4b87      	ldr	r3, [pc, #540]	; (8006bd0 <HAL_UART_MspInit+0x2a0>)
 80069b2:	685b      	ldr	r3, [r3, #4]
 80069b4:	637b      	str	r3, [r7, #52]	; 0x34
 80069b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069b8:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80069bc:	637b      	str	r3, [r7, #52]	; 0x34
 80069be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069c0:	f043 0304 	orr.w	r3, r3, #4
 80069c4:	637b      	str	r3, [r7, #52]	; 0x34
 80069c6:	4a82      	ldr	r2, [pc, #520]	; (8006bd0 <HAL_UART_MspInit+0x2a0>)
 80069c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069ca:	6053      	str	r3, [r2, #4]

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80069cc:	4b81      	ldr	r3, [pc, #516]	; (8006bd4 <HAL_UART_MspInit+0x2a4>)
 80069ce:	4a82      	ldr	r2, [pc, #520]	; (8006bd8 <HAL_UART_MspInit+0x2a8>)
 80069d0:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80069d2:	4b80      	ldr	r3, [pc, #512]	; (8006bd4 <HAL_UART_MspInit+0x2a4>)
 80069d4:	2200      	movs	r2, #0
 80069d6:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80069d8:	4b7e      	ldr	r3, [pc, #504]	; (8006bd4 <HAL_UART_MspInit+0x2a4>)
 80069da:	2200      	movs	r2, #0
 80069dc:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80069de:	4b7d      	ldr	r3, [pc, #500]	; (8006bd4 <HAL_UART_MspInit+0x2a4>)
 80069e0:	2280      	movs	r2, #128	; 0x80
 80069e2:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80069e4:	4b7b      	ldr	r3, [pc, #492]	; (8006bd4 <HAL_UART_MspInit+0x2a4>)
 80069e6:	2200      	movs	r2, #0
 80069e8:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80069ea:	4b7a      	ldr	r3, [pc, #488]	; (8006bd4 <HAL_UART_MspInit+0x2a4>)
 80069ec:	2200      	movs	r2, #0
 80069ee:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80069f0:	4b78      	ldr	r3, [pc, #480]	; (8006bd4 <HAL_UART_MspInit+0x2a4>)
 80069f2:	2200      	movs	r2, #0
 80069f4:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80069f6:	4b77      	ldr	r3, [pc, #476]	; (8006bd4 <HAL_UART_MspInit+0x2a4>)
 80069f8:	2200      	movs	r2, #0
 80069fa:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80069fc:	4875      	ldr	r0, [pc, #468]	; (8006bd4 <HAL_UART_MspInit+0x2a4>)
 80069fe:	f001 fedf 	bl	80087c0 <HAL_DMA_Init>
 8006a02:	4603      	mov	r3, r0
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d001      	beq.n	8006a0c <HAL_UART_MspInit+0xdc>
    {
      Error_Handler();
 8006a08:	f7ff fd10 	bl	800642c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	4a71      	ldr	r2, [pc, #452]	; (8006bd4 <HAL_UART_MspInit+0x2a4>)
 8006a10:	63da      	str	r2, [r3, #60]	; 0x3c
 8006a12:	4a70      	ldr	r2, [pc, #448]	; (8006bd4 <HAL_UART_MspInit+0x2a4>)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8006a18:	2200      	movs	r2, #0
 8006a1a:	2100      	movs	r1, #0
 8006a1c:	2025      	movs	r0, #37	; 0x25
 8006a1e:	f001 fe98 	bl	8008752 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8006a22:	2025      	movs	r0, #37	; 0x25
 8006a24:	f001 feb1 	bl	800878a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8006a28:	e0c8      	b.n	8006bbc <HAL_UART_MspInit+0x28c>
  else if(uartHandle->Instance==USART2)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4a6b      	ldr	r2, [pc, #428]	; (8006bdc <HAL_UART_MspInit+0x2ac>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d15e      	bne.n	8006af2 <HAL_UART_MspInit+0x1c2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8006a34:	4b64      	ldr	r3, [pc, #400]	; (8006bc8 <HAL_UART_MspInit+0x298>)
 8006a36:	69db      	ldr	r3, [r3, #28]
 8006a38:	4a63      	ldr	r2, [pc, #396]	; (8006bc8 <HAL_UART_MspInit+0x298>)
 8006a3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a3e:	61d3      	str	r3, [r2, #28]
 8006a40:	4b61      	ldr	r3, [pc, #388]	; (8006bc8 <HAL_UART_MspInit+0x298>)
 8006a42:	69db      	ldr	r3, [r3, #28]
 8006a44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a48:	61bb      	str	r3, [r7, #24]
 8006a4a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006a4c:	4b5e      	ldr	r3, [pc, #376]	; (8006bc8 <HAL_UART_MspInit+0x298>)
 8006a4e:	699b      	ldr	r3, [r3, #24]
 8006a50:	4a5d      	ldr	r2, [pc, #372]	; (8006bc8 <HAL_UART_MspInit+0x298>)
 8006a52:	f043 0304 	orr.w	r3, r3, #4
 8006a56:	6193      	str	r3, [r2, #24]
 8006a58:	4b5b      	ldr	r3, [pc, #364]	; (8006bc8 <HAL_UART_MspInit+0x298>)
 8006a5a:	699b      	ldr	r3, [r3, #24]
 8006a5c:	f003 0304 	and.w	r3, r3, #4
 8006a60:	617b      	str	r3, [r7, #20]
 8006a62:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006a64:	2304      	movs	r3, #4
 8006a66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a68:	2302      	movs	r3, #2
 8006a6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006a6c:	2303      	movs	r3, #3
 8006a6e:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006a70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006a74:	4619      	mov	r1, r3
 8006a76:	485a      	ldr	r0, [pc, #360]	; (8006be0 <HAL_UART_MspInit+0x2b0>)
 8006a78:	f002 f944 	bl	8008d04 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8006a7c:	2308      	movs	r3, #8
 8006a7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006a80:	2300      	movs	r3, #0
 8006a82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a84:	2300      	movs	r3, #0
 8006a86:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006a88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006a8c:	4619      	mov	r1, r3
 8006a8e:	4854      	ldr	r0, [pc, #336]	; (8006be0 <HAL_UART_MspInit+0x2b0>)
 8006a90:	f002 f938 	bl	8008d04 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8006a94:	4b53      	ldr	r3, [pc, #332]	; (8006be4 <HAL_UART_MspInit+0x2b4>)
 8006a96:	4a54      	ldr	r2, [pc, #336]	; (8006be8 <HAL_UART_MspInit+0x2b8>)
 8006a98:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006a9a:	4b52      	ldr	r3, [pc, #328]	; (8006be4 <HAL_UART_MspInit+0x2b4>)
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006aa0:	4b50      	ldr	r3, [pc, #320]	; (8006be4 <HAL_UART_MspInit+0x2b4>)
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006aa6:	4b4f      	ldr	r3, [pc, #316]	; (8006be4 <HAL_UART_MspInit+0x2b4>)
 8006aa8:	2280      	movs	r2, #128	; 0x80
 8006aaa:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006aac:	4b4d      	ldr	r3, [pc, #308]	; (8006be4 <HAL_UART_MspInit+0x2b4>)
 8006aae:	2200      	movs	r2, #0
 8006ab0:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006ab2:	4b4c      	ldr	r3, [pc, #304]	; (8006be4 <HAL_UART_MspInit+0x2b4>)
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8006ab8:	4b4a      	ldr	r3, [pc, #296]	; (8006be4 <HAL_UART_MspInit+0x2b4>)
 8006aba:	2200      	movs	r2, #0
 8006abc:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006abe:	4b49      	ldr	r3, [pc, #292]	; (8006be4 <HAL_UART_MspInit+0x2b4>)
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8006ac4:	4847      	ldr	r0, [pc, #284]	; (8006be4 <HAL_UART_MspInit+0x2b4>)
 8006ac6:	f001 fe7b 	bl	80087c0 <HAL_DMA_Init>
 8006aca:	4603      	mov	r3, r0
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d001      	beq.n	8006ad4 <HAL_UART_MspInit+0x1a4>
      Error_Handler();
 8006ad0:	f7ff fcac 	bl	800642c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	4a43      	ldr	r2, [pc, #268]	; (8006be4 <HAL_UART_MspInit+0x2b4>)
 8006ad8:	63da      	str	r2, [r3, #60]	; 0x3c
 8006ada:	4a42      	ldr	r2, [pc, #264]	; (8006be4 <HAL_UART_MspInit+0x2b4>)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	2101      	movs	r1, #1
 8006ae4:	2026      	movs	r0, #38	; 0x26
 8006ae6:	f001 fe34 	bl	8008752 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8006aea:	2026      	movs	r0, #38	; 0x26
 8006aec:	f001 fe4d 	bl	800878a <HAL_NVIC_EnableIRQ>
}
 8006af0:	e064      	b.n	8006bbc <HAL_UART_MspInit+0x28c>
  else if(uartHandle->Instance==USART3)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	4a3d      	ldr	r2, [pc, #244]	; (8006bec <HAL_UART_MspInit+0x2bc>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d15f      	bne.n	8006bbc <HAL_UART_MspInit+0x28c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8006afc:	4b32      	ldr	r3, [pc, #200]	; (8006bc8 <HAL_UART_MspInit+0x298>)
 8006afe:	69db      	ldr	r3, [r3, #28]
 8006b00:	4a31      	ldr	r2, [pc, #196]	; (8006bc8 <HAL_UART_MspInit+0x298>)
 8006b02:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006b06:	61d3      	str	r3, [r2, #28]
 8006b08:	4b2f      	ldr	r3, [pc, #188]	; (8006bc8 <HAL_UART_MspInit+0x298>)
 8006b0a:	69db      	ldr	r3, [r3, #28]
 8006b0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006b10:	613b      	str	r3, [r7, #16]
 8006b12:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006b14:	4b2c      	ldr	r3, [pc, #176]	; (8006bc8 <HAL_UART_MspInit+0x298>)
 8006b16:	699b      	ldr	r3, [r3, #24]
 8006b18:	4a2b      	ldr	r2, [pc, #172]	; (8006bc8 <HAL_UART_MspInit+0x298>)
 8006b1a:	f043 0308 	orr.w	r3, r3, #8
 8006b1e:	6193      	str	r3, [r2, #24]
 8006b20:	4b29      	ldr	r3, [pc, #164]	; (8006bc8 <HAL_UART_MspInit+0x298>)
 8006b22:	699b      	ldr	r3, [r3, #24]
 8006b24:	f003 0308 	and.w	r3, r3, #8
 8006b28:	60fb      	str	r3, [r7, #12]
 8006b2a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006b2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b30:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b32:	2302      	movs	r3, #2
 8006b34:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006b36:	2303      	movs	r3, #3
 8006b38:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006b3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006b3e:	4619      	mov	r1, r3
 8006b40:	4822      	ldr	r0, [pc, #136]	; (8006bcc <HAL_UART_MspInit+0x29c>)
 8006b42:	f002 f8df 	bl	8008d04 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8006b46:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006b4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b50:	2300      	movs	r3, #0
 8006b52:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006b54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006b58:	4619      	mov	r1, r3
 8006b5a:	481c      	ldr	r0, [pc, #112]	; (8006bcc <HAL_UART_MspInit+0x29c>)
 8006b5c:	f002 f8d2 	bl	8008d04 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8006b60:	4b23      	ldr	r3, [pc, #140]	; (8006bf0 <HAL_UART_MspInit+0x2c0>)
 8006b62:	4a24      	ldr	r2, [pc, #144]	; (8006bf4 <HAL_UART_MspInit+0x2c4>)
 8006b64:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006b66:	4b22      	ldr	r3, [pc, #136]	; (8006bf0 <HAL_UART_MspInit+0x2c0>)
 8006b68:	2200      	movs	r2, #0
 8006b6a:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006b6c:	4b20      	ldr	r3, [pc, #128]	; (8006bf0 <HAL_UART_MspInit+0x2c0>)
 8006b6e:	2200      	movs	r2, #0
 8006b70:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006b72:	4b1f      	ldr	r3, [pc, #124]	; (8006bf0 <HAL_UART_MspInit+0x2c0>)
 8006b74:	2280      	movs	r2, #128	; 0x80
 8006b76:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006b78:	4b1d      	ldr	r3, [pc, #116]	; (8006bf0 <HAL_UART_MspInit+0x2c0>)
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006b7e:	4b1c      	ldr	r3, [pc, #112]	; (8006bf0 <HAL_UART_MspInit+0x2c0>)
 8006b80:	2200      	movs	r2, #0
 8006b82:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8006b84:	4b1a      	ldr	r3, [pc, #104]	; (8006bf0 <HAL_UART_MspInit+0x2c0>)
 8006b86:	2200      	movs	r2, #0
 8006b88:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006b8a:	4b19      	ldr	r3, [pc, #100]	; (8006bf0 <HAL_UART_MspInit+0x2c0>)
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8006b90:	4817      	ldr	r0, [pc, #92]	; (8006bf0 <HAL_UART_MspInit+0x2c0>)
 8006b92:	f001 fe15 	bl	80087c0 <HAL_DMA_Init>
 8006b96:	4603      	mov	r3, r0
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d001      	beq.n	8006ba0 <HAL_UART_MspInit+0x270>
      Error_Handler();
 8006b9c:	f7ff fc46 	bl	800642c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	4a13      	ldr	r2, [pc, #76]	; (8006bf0 <HAL_UART_MspInit+0x2c0>)
 8006ba4:	63da      	str	r2, [r3, #60]	; 0x3c
 8006ba6:	4a12      	ldr	r2, [pc, #72]	; (8006bf0 <HAL_UART_MspInit+0x2c0>)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 2, 0);
 8006bac:	2200      	movs	r2, #0
 8006bae:	2102      	movs	r1, #2
 8006bb0:	2027      	movs	r0, #39	; 0x27
 8006bb2:	f001 fdce 	bl	8008752 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8006bb6:	2027      	movs	r0, #39	; 0x27
 8006bb8:	f001 fde7 	bl	800878a <HAL_NVIC_EnableIRQ>
}
 8006bbc:	bf00      	nop
 8006bbe:	3738      	adds	r7, #56	; 0x38
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	bd80      	pop	{r7, pc}
 8006bc4:	40013800 	.word	0x40013800
 8006bc8:	40021000 	.word	0x40021000
 8006bcc:	40010c00 	.word	0x40010c00
 8006bd0:	40010000 	.word	0x40010000
 8006bd4:	20002664 	.word	0x20002664
 8006bd8:	40020058 	.word	0x40020058
 8006bdc:	40004400 	.word	0x40004400
 8006be0:	40010800 	.word	0x40010800
 8006be4:	200026a8 	.word	0x200026a8
 8006be8:	4002006c 	.word	0x4002006c
 8006bec:	40004800 	.word	0x40004800
 8006bf0:	200026ec 	.word	0x200026ec
 8006bf4:	40020030 	.word	0x40020030

08006bf8 <A4988_EnableDriver>:
{

}

void A4988_EnableDriver()
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(myMotor.PENABLE, myMotor.ENABLE, GPIO_PIN_RESET);
 8006bfc:	4b0c      	ldr	r3, [pc, #48]	; (8006c30 <A4988_EnableDriver+0x38>)
 8006bfe:	695b      	ldr	r3, [r3, #20]
 8006c00:	4a0b      	ldr	r2, [pc, #44]	; (8006c30 <A4988_EnableDriver+0x38>)
 8006c02:	8891      	ldrh	r1, [r2, #4]
 8006c04:	2200      	movs	r2, #0
 8006c06:	4618      	mov	r0, r3
 8006c08:	f002 fa17 	bl	800903a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(myMotor.PSLEEP, myMotor.SLEEP, GPIO_PIN_SET);
 8006c0c:	4b08      	ldr	r3, [pc, #32]	; (8006c30 <A4988_EnableDriver+0x38>)
 8006c0e:	699b      	ldr	r3, [r3, #24]
 8006c10:	4a07      	ldr	r2, [pc, #28]	; (8006c30 <A4988_EnableDriver+0x38>)
 8006c12:	88d1      	ldrh	r1, [r2, #6]
 8006c14:	2201      	movs	r2, #1
 8006c16:	4618      	mov	r0, r3
 8006c18:	f002 fa0f 	bl	800903a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(myMotor.PRESET, myMotor.RESET, GPIO_PIN_SET);
 8006c1c:	4b04      	ldr	r3, [pc, #16]	; (8006c30 <A4988_EnableDriver+0x38>)
 8006c1e:	69db      	ldr	r3, [r3, #28]
 8006c20:	4a03      	ldr	r2, [pc, #12]	; (8006c30 <A4988_EnableDriver+0x38>)
 8006c22:	8911      	ldrh	r1, [r2, #8]
 8006c24:	2201      	movs	r2, #1
 8006c26:	4618      	mov	r0, r3
 8006c28:	f002 fa07 	bl	800903a <HAL_GPIO_WritePin>
}
 8006c2c:	bf00      	nop
 8006c2e:	bd80      	pop	{r7, pc}
 8006c30:	20000494 	.word	0x20000494

08006c34 <A4988_DisableDriver>:

void A4988_DisableDriver()
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(myMotor.PENABLE, myMotor.ENABLE, GPIO_PIN_SET);
 8006c38:	4b0c      	ldr	r3, [pc, #48]	; (8006c6c <A4988_DisableDriver+0x38>)
 8006c3a:	695b      	ldr	r3, [r3, #20]
 8006c3c:	4a0b      	ldr	r2, [pc, #44]	; (8006c6c <A4988_DisableDriver+0x38>)
 8006c3e:	8891      	ldrh	r1, [r2, #4]
 8006c40:	2201      	movs	r2, #1
 8006c42:	4618      	mov	r0, r3
 8006c44:	f002 f9f9 	bl	800903a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(myMotor.PSLEEP, myMotor.SLEEP, GPIO_PIN_RESET);
 8006c48:	4b08      	ldr	r3, [pc, #32]	; (8006c6c <A4988_DisableDriver+0x38>)
 8006c4a:	699b      	ldr	r3, [r3, #24]
 8006c4c:	4a07      	ldr	r2, [pc, #28]	; (8006c6c <A4988_DisableDriver+0x38>)
 8006c4e:	88d1      	ldrh	r1, [r2, #6]
 8006c50:	2200      	movs	r2, #0
 8006c52:	4618      	mov	r0, r3
 8006c54:	f002 f9f1 	bl	800903a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(myMotor.PRESET, myMotor.RESET, GPIO_PIN_RESET);
 8006c58:	4b04      	ldr	r3, [pc, #16]	; (8006c6c <A4988_DisableDriver+0x38>)
 8006c5a:	69db      	ldr	r3, [r3, #28]
 8006c5c:	4a03      	ldr	r2, [pc, #12]	; (8006c6c <A4988_DisableDriver+0x38>)
 8006c5e:	8911      	ldrh	r1, [r2, #8]
 8006c60:	2200      	movs	r2, #0
 8006c62:	4618      	mov	r0, r3
 8006c64:	f002 f9e9 	bl	800903a <HAL_GPIO_WritePin>
}
 8006c68:	bf00      	nop
 8006c6a:	bd80      	pop	{r7, pc}
 8006c6c:	20000494 	.word	0x20000494

08006c70 <A4988_StepByStep>:
	HAL_GPIO_WritePin(myMotor.PSTEP, myMotor.STEP, GPIO_PIN_SET);
	HAL_GPIO_WritePin(myMotor.PSTEP, myMotor.STEP, GPIO_PIN_RESET);
}

void A4988_StepByStep(int steps, int direction)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b084      	sub	sp, #16
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
 8006c78:	6039      	str	r1, [r7, #0]
	if (direction == 1) {
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	2b01      	cmp	r3, #1
 8006c7e:	d108      	bne.n	8006c92 <A4988_StepByStep+0x22>
		HAL_GPIO_WritePin(myMotor.PDIR, myMotor.DIR, GPIO_PIN_SET);
 8006c80:	4b1a      	ldr	r3, [pc, #104]	; (8006cec <A4988_StepByStep+0x7c>)
 8006c82:	68db      	ldr	r3, [r3, #12]
 8006c84:	4a19      	ldr	r2, [pc, #100]	; (8006cec <A4988_StepByStep+0x7c>)
 8006c86:	8811      	ldrh	r1, [r2, #0]
 8006c88:	2201      	movs	r2, #1
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	f002 f9d5 	bl	800903a <HAL_GPIO_WritePin>
 8006c90:	e007      	b.n	8006ca2 <A4988_StepByStep+0x32>
	} else {
		HAL_GPIO_WritePin(myMotor.PDIR, myMotor.DIR, GPIO_PIN_RESET);
 8006c92:	4b16      	ldr	r3, [pc, #88]	; (8006cec <A4988_StepByStep+0x7c>)
 8006c94:	68db      	ldr	r3, [r3, #12]
 8006c96:	4a15      	ldr	r2, [pc, #84]	; (8006cec <A4988_StepByStep+0x7c>)
 8006c98:	8811      	ldrh	r1, [r2, #0]
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	f002 f9cc 	bl	800903a <HAL_GPIO_WritePin>
	}

	// Step the motor
	for (int i = 0; i < steps; i++) {
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	60fb      	str	r3, [r7, #12]
 8006ca6:	e018      	b.n	8006cda <A4988_StepByStep+0x6a>
		HAL_GPIO_WritePin(myMotor.PSTEP, myMotor.STEP, GPIO_PIN_SET);
 8006ca8:	4b10      	ldr	r3, [pc, #64]	; (8006cec <A4988_StepByStep+0x7c>)
 8006caa:	691b      	ldr	r3, [r3, #16]
 8006cac:	4a0f      	ldr	r2, [pc, #60]	; (8006cec <A4988_StepByStep+0x7c>)
 8006cae:	8851      	ldrh	r1, [r2, #2]
 8006cb0:	2201      	movs	r2, #1
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	f002 f9c1 	bl	800903a <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8006cb8:	2001      	movs	r0, #1
 8006cba:	f001 f851 	bl	8007d60 <HAL_Delay>
		HAL_GPIO_WritePin(myMotor.PSTEP, myMotor.STEP, GPIO_PIN_RESET);
 8006cbe:	4b0b      	ldr	r3, [pc, #44]	; (8006cec <A4988_StepByStep+0x7c>)
 8006cc0:	691b      	ldr	r3, [r3, #16]
 8006cc2:	4a0a      	ldr	r2, [pc, #40]	; (8006cec <A4988_StepByStep+0x7c>)
 8006cc4:	8851      	ldrh	r1, [r2, #2]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	4618      	mov	r0, r3
 8006cca:	f002 f9b6 	bl	800903a <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8006cce:	2001      	movs	r0, #1
 8006cd0:	f001 f846 	bl	8007d60 <HAL_Delay>
	for (int i = 0; i < steps; i++) {
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	3301      	adds	r3, #1
 8006cd8:	60fb      	str	r3, [r7, #12]
 8006cda:	68fa      	ldr	r2, [r7, #12]
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	429a      	cmp	r2, r3
 8006ce0:	dbe2      	blt.n	8006ca8 <A4988_StepByStep+0x38>
	}
}
 8006ce2:	bf00      	nop
 8006ce4:	bf00      	nop
 8006ce6:	3710      	adds	r7, #16
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	bd80      	pop	{r7, pc}
 8006cec:	20000494 	.word	0x20000494

08006cf0 <LCD_SpecialChar>:

/* GLOBAL VARIABLES ----------------------------------------------------------*/

/* STATIC FUNCTION PROTOTYPES --- --------------------------------------------*/
static void LCD_SpecialChar(void)
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b098      	sub	sp, #96	; 0x60
 8006cf4:	af00      	add	r7, sp, #0
	uint8_t Right[] = {0x00, 0x04, 0x06, 0x1F, 0x1F, 0x06, 0x04, 0x00}; // Go to right
 8006cf6:	4a6d      	ldr	r2, [pc, #436]	; (8006eac <LCD_SpecialChar+0x1bc>)
 8006cf8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006cfc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006d00:	e883 0003 	stmia.w	r3, {r0, r1}
	LCD_SendCommand(0x40);
 8006d04:	2040      	movs	r0, #64	; 0x40
 8006d06:	f000 f91b 	bl	8006f40 <LCD_SendCommand>
	for (int i=0; i<8; i++) LCD_SendData(Right[i]);
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006d0e:	e00a      	b.n	8006d26 <LCD_SpecialChar+0x36>
 8006d10:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8006d14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006d16:	4413      	add	r3, r2
 8006d18:	781b      	ldrb	r3, [r3, #0]
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	f000 f9ac 	bl	8007078 <LCD_SendData>
 8006d20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006d22:	3301      	adds	r3, #1
 8006d24:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006d26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006d28:	2b07      	cmp	r3, #7
 8006d2a:	ddf1      	ble.n	8006d10 <LCD_SpecialChar+0x20>
	uint8_t RightInvert[] = {0x1F, 0x1B, 0x19, 0x00, 0x00, 0x19, 0x1B, 0x1F};
 8006d2c:	4a60      	ldr	r2, [pc, #384]	; (8006eb0 <LCD_SpecialChar+0x1c0>)
 8006d2e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006d32:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006d36:	e883 0003 	stmia.w	r3, {r0, r1}
	LCD_SendCommand(0x40+8);
 8006d3a:	2048      	movs	r0, #72	; 0x48
 8006d3c:	f000 f900 	bl	8006f40 <LCD_SendCommand>
	for (int i=0; i<8; i++) LCD_SendData(RightInvert[i]);
 8006d40:	2300      	movs	r3, #0
 8006d42:	65bb      	str	r3, [r7, #88]	; 0x58
 8006d44:	e00a      	b.n	8006d5c <LCD_SpecialChar+0x6c>
 8006d46:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006d4a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006d4c:	4413      	add	r3, r2
 8006d4e:	781b      	ldrb	r3, [r3, #0]
 8006d50:	4618      	mov	r0, r3
 8006d52:	f000 f991 	bl	8007078 <LCD_SendData>
 8006d56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006d58:	3301      	adds	r3, #1
 8006d5a:	65bb      	str	r3, [r7, #88]	; 0x58
 8006d5c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006d5e:	2b07      	cmp	r3, #7
 8006d60:	ddf1      	ble.n	8006d46 <LCD_SpecialChar+0x56>
	uint8_t Left[] = {0x00, 0x04, 0x0C, 0x1F, 0x1F, 0x0C, 0x04, 0x00};
 8006d62:	4a54      	ldr	r2, [pc, #336]	; (8006eb4 <LCD_SpecialChar+0x1c4>)
 8006d64:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006d68:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006d6c:	e883 0003 	stmia.w	r3, {r0, r1}
	LCD_SendCommand(0x40+16);
 8006d70:	2050      	movs	r0, #80	; 0x50
 8006d72:	f000 f8e5 	bl	8006f40 <LCD_SendCommand>
	for (int i=0; i<8; i++) LCD_SendData(Left[i]);
 8006d76:	2300      	movs	r3, #0
 8006d78:	657b      	str	r3, [r7, #84]	; 0x54
 8006d7a:	e00a      	b.n	8006d92 <LCD_SpecialChar+0xa2>
 8006d7c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006d80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d82:	4413      	add	r3, r2
 8006d84:	781b      	ldrb	r3, [r3, #0]
 8006d86:	4618      	mov	r0, r3
 8006d88:	f000 f976 	bl	8007078 <LCD_SendData>
 8006d8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d8e:	3301      	adds	r3, #1
 8006d90:	657b      	str	r3, [r7, #84]	; 0x54
 8006d92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d94:	2b07      	cmp	r3, #7
 8006d96:	ddf1      	ble.n	8006d7c <LCD_SpecialChar+0x8c>
	uint8_t LeftInvert[] = {0x1F, 0x1B, 0x13, 0x00, 0x00, 0x13, 0x1B, 0x1F};
 8006d98:	4a47      	ldr	r2, [pc, #284]	; (8006eb8 <LCD_SpecialChar+0x1c8>)
 8006d9a:	f107 0320 	add.w	r3, r7, #32
 8006d9e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006da2:	e883 0003 	stmia.w	r3, {r0, r1}
	LCD_SendCommand(0x40+24);
 8006da6:	2058      	movs	r0, #88	; 0x58
 8006da8:	f000 f8ca 	bl	8006f40 <LCD_SendCommand>
	for (int i=0; i<8; i++) LCD_SendData(LeftInvert[i]);
 8006dac:	2300      	movs	r3, #0
 8006dae:	653b      	str	r3, [r7, #80]	; 0x50
 8006db0:	e00a      	b.n	8006dc8 <LCD_SpecialChar+0xd8>
 8006db2:	f107 0220 	add.w	r2, r7, #32
 8006db6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006db8:	4413      	add	r3, r2
 8006dba:	781b      	ldrb	r3, [r3, #0]
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	f000 f95b 	bl	8007078 <LCD_SendData>
 8006dc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006dc4:	3301      	adds	r3, #1
 8006dc6:	653b      	str	r3, [r7, #80]	; 0x50
 8006dc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006dca:	2b07      	cmp	r3, #7
 8006dcc:	ddf1      	ble.n	8006db2 <LCD_SpecialChar+0xc2>
	uint8_t Empty[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8006dce:	4a3b      	ldr	r2, [pc, #236]	; (8006ebc <LCD_SpecialChar+0x1cc>)
 8006dd0:	f107 0318 	add.w	r3, r7, #24
 8006dd4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006dd8:	e883 0003 	stmia.w	r3, {r0, r1}
	LCD_SendCommand(0x40+32);
 8006ddc:	2060      	movs	r0, #96	; 0x60
 8006dde:	f000 f8af 	bl	8006f40 <LCD_SendCommand>
	for (int i=0; i<8; i++) LCD_SendData(Empty[i]);
 8006de2:	2300      	movs	r3, #0
 8006de4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006de6:	e00a      	b.n	8006dfe <LCD_SpecialChar+0x10e>
 8006de8:	f107 0218 	add.w	r2, r7, #24
 8006dec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006dee:	4413      	add	r3, r2
 8006df0:	781b      	ldrb	r3, [r3, #0]
 8006df2:	4618      	mov	r0, r3
 8006df4:	f000 f940 	bl	8007078 <LCD_SendData>
 8006df8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006dfa:	3301      	adds	r3, #1
 8006dfc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006dfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e00:	2b07      	cmp	r3, #7
 8006e02:	ddf1      	ble.n	8006de8 <LCD_SpecialChar+0xf8>
	uint8_t Full[] = {0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F};
 8006e04:	4a2e      	ldr	r2, [pc, #184]	; (8006ec0 <LCD_SpecialChar+0x1d0>)
 8006e06:	f107 0310 	add.w	r3, r7, #16
 8006e0a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006e0e:	e883 0003 	stmia.w	r3, {r0, r1}
	LCD_SendCommand(0x40+40);
 8006e12:	2068      	movs	r0, #104	; 0x68
 8006e14:	f000 f894 	bl	8006f40 <LCD_SendCommand>
	for (int i=0; i<8; i++) LCD_SendData(Full[i]);
 8006e18:	2300      	movs	r3, #0
 8006e1a:	64bb      	str	r3, [r7, #72]	; 0x48
 8006e1c:	e00a      	b.n	8006e34 <LCD_SpecialChar+0x144>
 8006e1e:	f107 0210 	add.w	r2, r7, #16
 8006e22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e24:	4413      	add	r3, r2
 8006e26:	781b      	ldrb	r3, [r3, #0]
 8006e28:	4618      	mov	r0, r3
 8006e2a:	f000 f925 	bl	8007078 <LCD_SendData>
 8006e2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e30:	3301      	adds	r3, #1
 8006e32:	64bb      	str	r3, [r7, #72]	; 0x48
 8006e34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e36:	2b07      	cmp	r3, #7
 8006e38:	ddf1      	ble.n	8006e1e <LCD_SpecialChar+0x12e>
	uint8_t Up[] = {0x00, 0x00, 0x04, 0x0E, 0x1F, 0x00, 0x00, 0x00};
 8006e3a:	4a22      	ldr	r2, [pc, #136]	; (8006ec4 <LCD_SpecialChar+0x1d4>)
 8006e3c:	f107 0308 	add.w	r3, r7, #8
 8006e40:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006e44:	e883 0003 	stmia.w	r3, {r0, r1}
	LCD_SendCommand(0x40+48);
 8006e48:	2070      	movs	r0, #112	; 0x70
 8006e4a:	f000 f879 	bl	8006f40 <LCD_SendCommand>
	for (int i=0; i<8; i++) LCD_SendData(Up[i]);
 8006e4e:	2300      	movs	r3, #0
 8006e50:	647b      	str	r3, [r7, #68]	; 0x44
 8006e52:	e00a      	b.n	8006e6a <LCD_SpecialChar+0x17a>
 8006e54:	f107 0208 	add.w	r2, r7, #8
 8006e58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e5a:	4413      	add	r3, r2
 8006e5c:	781b      	ldrb	r3, [r3, #0]
 8006e5e:	4618      	mov	r0, r3
 8006e60:	f000 f90a 	bl	8007078 <LCD_SendData>
 8006e64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e66:	3301      	adds	r3, #1
 8006e68:	647b      	str	r3, [r7, #68]	; 0x44
 8006e6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e6c:	2b07      	cmp	r3, #7
 8006e6e:	ddf1      	ble.n	8006e54 <LCD_SpecialChar+0x164>
	uint8_t Down[] = {0x00, 0x00, 0x00, 0x1F, 0x0E, 0x04, 0x00, 0x00};
 8006e70:	4a15      	ldr	r2, [pc, #84]	; (8006ec8 <LCD_SpecialChar+0x1d8>)
 8006e72:	463b      	mov	r3, r7
 8006e74:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006e78:	e883 0003 	stmia.w	r3, {r0, r1}
	LCD_SendCommand(0x40+56);
 8006e7c:	2078      	movs	r0, #120	; 0x78
 8006e7e:	f000 f85f 	bl	8006f40 <LCD_SendCommand>
	for (int i=0; i<8; i++) LCD_SendData(Down[i]);
 8006e82:	2300      	movs	r3, #0
 8006e84:	643b      	str	r3, [r7, #64]	; 0x40
 8006e86:	e009      	b.n	8006e9c <LCD_SpecialChar+0x1ac>
 8006e88:	463a      	mov	r2, r7
 8006e8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e8c:	4413      	add	r3, r2
 8006e8e:	781b      	ldrb	r3, [r3, #0]
 8006e90:	4618      	mov	r0, r3
 8006e92:	f000 f8f1 	bl	8007078 <LCD_SendData>
 8006e96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e98:	3301      	adds	r3, #1
 8006e9a:	643b      	str	r3, [r7, #64]	; 0x40
 8006e9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e9e:	2b07      	cmp	r3, #7
 8006ea0:	ddf2      	ble.n	8006e88 <LCD_SpecialChar+0x198>
}
 8006ea2:	bf00      	nop
 8006ea4:	bf00      	nop
 8006ea6:	3760      	adds	r7, #96	; 0x60
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	bd80      	pop	{r7, pc}
 8006eac:	0800f2ec 	.word	0x0800f2ec
 8006eb0:	0800f2f4 	.word	0x0800f2f4
 8006eb4:	0800f2fc 	.word	0x0800f2fc
 8006eb8:	0800f304 	.word	0x0800f304
 8006ebc:	0800f30c 	.word	0x0800f30c
 8006ec0:	0800f314 	.word	0x0800f314
 8006ec4:	0800f31c 	.word	0x0800f31c
 8006ec8:	0800f324 	.word	0x0800f324

08006ecc <LCD_Init>:
/* STATIC FUNCTIONS ----------------------------------------------------------*/

/* GLOBAL FUNCTIONS ----------------------------------------------------------*/
void LCD_Init(void){
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	af00      	add	r7, sp, #0
	  HAL_Delay(50);
 8006ed0:	2032      	movs	r0, #50	; 0x32
 8006ed2:	f000 ff45 	bl	8007d60 <HAL_Delay>
	  LCD_SendCommand(0x03);
 8006ed6:	2003      	movs	r0, #3
 8006ed8:	f000 f832 	bl	8006f40 <LCD_SendCommand>
	  HAL_Delay(5);
 8006edc:	2005      	movs	r0, #5
 8006ede:	f000 ff3f 	bl	8007d60 <HAL_Delay>
	  LCD_SendCommand(0x03);
 8006ee2:	2003      	movs	r0, #3
 8006ee4:	f000 f82c 	bl	8006f40 <LCD_SendCommand>
	  HAL_Delay(1);
 8006ee8:	2001      	movs	r0, #1
 8006eea:	f000 ff39 	bl	8007d60 <HAL_Delay>
	  LCD_SendCommand(0x03);
 8006eee:	2003      	movs	r0, #3
 8006ef0:	f000 f826 	bl	8006f40 <LCD_SendCommand>
	  HAL_Delay(1);
 8006ef4:	2001      	movs	r0, #1
 8006ef6:	f000 ff33 	bl	8007d60 <HAL_Delay>
	  LCD_SendCommand(0x02);
 8006efa:	2002      	movs	r0, #2
 8006efc:	f000 f820 	bl	8006f40 <LCD_SendCommand>
	  HAL_Delay(1);
 8006f00:	2001      	movs	r0, #1
 8006f02:	f000 ff2d 	bl	8007d60 <HAL_Delay>

	  LCD_SendCommand(0x28);
 8006f06:	2028      	movs	r0, #40	; 0x28
 8006f08:	f000 f81a 	bl	8006f40 <LCD_SendCommand>
	  HAL_Delay(1);
 8006f0c:	2001      	movs	r0, #1
 8006f0e:	f000 ff27 	bl	8007d60 <HAL_Delay>

	  LCD_SendCommand(0x0C);
 8006f12:	200c      	movs	r0, #12
 8006f14:	f000 f814 	bl	8006f40 <LCD_SendCommand>
	  HAL_Delay(1);
 8006f18:	2001      	movs	r0, #1
 8006f1a:	f000 ff21 	bl	8007d60 <HAL_Delay>

	  LCD_SendCommand(0x01);
 8006f1e:	2001      	movs	r0, #1
 8006f20:	f000 f80e 	bl	8006f40 <LCD_SendCommand>
	  HAL_Delay(2);
 8006f24:	2002      	movs	r0, #2
 8006f26:	f000 ff1b 	bl	8007d60 <HAL_Delay>

	  LCD_SendCommand(0x06);
 8006f2a:	2006      	movs	r0, #6
 8006f2c:	f000 f808 	bl	8006f40 <LCD_SendCommand>
	  HAL_Delay(1);
 8006f30:	2001      	movs	r0, #1
 8006f32:	f000 ff15 	bl	8007d60 <HAL_Delay>
	  LCD_SpecialChar();
 8006f36:	f7ff fedb 	bl	8006cf0 <LCD_SpecialChar>
}
 8006f3a:	bf00      	nop
 8006f3c:	bd80      	pop	{r7, pc}
	...

08006f40 <LCD_SendCommand>:

void LCD_SendCommand(uint8_t cmd){
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b082      	sub	sp, #8
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	4603      	mov	r3, r0
 8006f48:	71fb      	strb	r3, [r7, #7]
	  // Send high nibble
	  HAL_GPIO_WritePin(myLCD.RSP, myLCD.RS, GPIO_PIN_RESET);
 8006f4a:	4b4a      	ldr	r3, [pc, #296]	; (8007074 <LCD_SendCommand+0x134>)
 8006f4c:	6a1b      	ldr	r3, [r3, #32]
 8006f4e:	4a49      	ldr	r2, [pc, #292]	; (8007074 <LCD_SendCommand+0x134>)
 8006f50:	8951      	ldrh	r1, [r2, #10]
 8006f52:	2200      	movs	r2, #0
 8006f54:	4618      	mov	r0, r3
 8006f56:	f002 f870 	bl	800903a <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(myLCD.D4P, myLCD.D4, (cmd & 0x10) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8006f5a:	4b46      	ldr	r3, [pc, #280]	; (8007074 <LCD_SendCommand+0x134>)
 8006f5c:	68d8      	ldr	r0, [r3, #12]
 8006f5e:	4b45      	ldr	r3, [pc, #276]	; (8007074 <LCD_SendCommand+0x134>)
 8006f60:	8819      	ldrh	r1, [r3, #0]
 8006f62:	79fb      	ldrb	r3, [r7, #7]
 8006f64:	111b      	asrs	r3, r3, #4
 8006f66:	b2db      	uxtb	r3, r3
 8006f68:	f003 0301 	and.w	r3, r3, #1
 8006f6c:	b2db      	uxtb	r3, r3
 8006f6e:	461a      	mov	r2, r3
 8006f70:	f002 f863 	bl	800903a <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(myLCD.D5P, myLCD.D5, (cmd & 0x20) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8006f74:	4b3f      	ldr	r3, [pc, #252]	; (8007074 <LCD_SendCommand+0x134>)
 8006f76:	6918      	ldr	r0, [r3, #16]
 8006f78:	4b3e      	ldr	r3, [pc, #248]	; (8007074 <LCD_SendCommand+0x134>)
 8006f7a:	8859      	ldrh	r1, [r3, #2]
 8006f7c:	79fb      	ldrb	r3, [r7, #7]
 8006f7e:	115b      	asrs	r3, r3, #5
 8006f80:	b2db      	uxtb	r3, r3
 8006f82:	f003 0301 	and.w	r3, r3, #1
 8006f86:	b2db      	uxtb	r3, r3
 8006f88:	461a      	mov	r2, r3
 8006f8a:	f002 f856 	bl	800903a <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(myLCD.D6P, myLCD.D6, (cmd & 0x40) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8006f8e:	4b39      	ldr	r3, [pc, #228]	; (8007074 <LCD_SendCommand+0x134>)
 8006f90:	6958      	ldr	r0, [r3, #20]
 8006f92:	4b38      	ldr	r3, [pc, #224]	; (8007074 <LCD_SendCommand+0x134>)
 8006f94:	8899      	ldrh	r1, [r3, #4]
 8006f96:	79fb      	ldrb	r3, [r7, #7]
 8006f98:	119b      	asrs	r3, r3, #6
 8006f9a:	b2db      	uxtb	r3, r3
 8006f9c:	f003 0301 	and.w	r3, r3, #1
 8006fa0:	b2db      	uxtb	r3, r3
 8006fa2:	461a      	mov	r2, r3
 8006fa4:	f002 f849 	bl	800903a <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(myLCD.D7P, myLCD.D7, (cmd & 0x80) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8006fa8:	4b32      	ldr	r3, [pc, #200]	; (8007074 <LCD_SendCommand+0x134>)
 8006faa:	6998      	ldr	r0, [r3, #24]
 8006fac:	4b31      	ldr	r3, [pc, #196]	; (8007074 <LCD_SendCommand+0x134>)
 8006fae:	88d9      	ldrh	r1, [r3, #6]
 8006fb0:	79fb      	ldrb	r3, [r7, #7]
 8006fb2:	09db      	lsrs	r3, r3, #7
 8006fb4:	b2db      	uxtb	r3, r3
 8006fb6:	461a      	mov	r2, r3
 8006fb8:	f002 f83f 	bl	800903a <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(myLCD.ENP, myLCD.EN, GPIO_PIN_SET);
 8006fbc:	4b2d      	ldr	r3, [pc, #180]	; (8007074 <LCD_SendCommand+0x134>)
 8006fbe:	69db      	ldr	r3, [r3, #28]
 8006fc0:	4a2c      	ldr	r2, [pc, #176]	; (8007074 <LCD_SendCommand+0x134>)
 8006fc2:	8911      	ldrh	r1, [r2, #8]
 8006fc4:	2201      	movs	r2, #1
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	f002 f837 	bl	800903a <HAL_GPIO_WritePin>
	  HAL_Delay(1);
 8006fcc:	2001      	movs	r0, #1
 8006fce:	f000 fec7 	bl	8007d60 <HAL_Delay>
	  HAL_GPIO_WritePin(myLCD.ENP, myLCD.EN, GPIO_PIN_RESET);
 8006fd2:	4b28      	ldr	r3, [pc, #160]	; (8007074 <LCD_SendCommand+0x134>)
 8006fd4:	69db      	ldr	r3, [r3, #28]
 8006fd6:	4a27      	ldr	r2, [pc, #156]	; (8007074 <LCD_SendCommand+0x134>)
 8006fd8:	8911      	ldrh	r1, [r2, #8]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	4618      	mov	r0, r3
 8006fde:	f002 f82c 	bl	800903a <HAL_GPIO_WritePin>

	  // Send low nibble
	  HAL_GPIO_WritePin(myLCD.D4P, myLCD.D4, (cmd & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8006fe2:	4b24      	ldr	r3, [pc, #144]	; (8007074 <LCD_SendCommand+0x134>)
 8006fe4:	68d8      	ldr	r0, [r3, #12]
 8006fe6:	4b23      	ldr	r3, [pc, #140]	; (8007074 <LCD_SendCommand+0x134>)
 8006fe8:	8819      	ldrh	r1, [r3, #0]
 8006fea:	79fb      	ldrb	r3, [r7, #7]
 8006fec:	f003 0301 	and.w	r3, r3, #1
 8006ff0:	b2db      	uxtb	r3, r3
 8006ff2:	461a      	mov	r2, r3
 8006ff4:	f002 f821 	bl	800903a <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(myLCD.D5P, myLCD.D5, (cmd & 0x02) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8006ff8:	4b1e      	ldr	r3, [pc, #120]	; (8007074 <LCD_SendCommand+0x134>)
 8006ffa:	6918      	ldr	r0, [r3, #16]
 8006ffc:	4b1d      	ldr	r3, [pc, #116]	; (8007074 <LCD_SendCommand+0x134>)
 8006ffe:	8859      	ldrh	r1, [r3, #2]
 8007000:	79fb      	ldrb	r3, [r7, #7]
 8007002:	105b      	asrs	r3, r3, #1
 8007004:	b2db      	uxtb	r3, r3
 8007006:	f003 0301 	and.w	r3, r3, #1
 800700a:	b2db      	uxtb	r3, r3
 800700c:	461a      	mov	r2, r3
 800700e:	f002 f814 	bl	800903a <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(myLCD.D6P, myLCD.D6, (cmd & 0x04) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8007012:	4b18      	ldr	r3, [pc, #96]	; (8007074 <LCD_SendCommand+0x134>)
 8007014:	6958      	ldr	r0, [r3, #20]
 8007016:	4b17      	ldr	r3, [pc, #92]	; (8007074 <LCD_SendCommand+0x134>)
 8007018:	8899      	ldrh	r1, [r3, #4]
 800701a:	79fb      	ldrb	r3, [r7, #7]
 800701c:	109b      	asrs	r3, r3, #2
 800701e:	b2db      	uxtb	r3, r3
 8007020:	f003 0301 	and.w	r3, r3, #1
 8007024:	b2db      	uxtb	r3, r3
 8007026:	461a      	mov	r2, r3
 8007028:	f002 f807 	bl	800903a <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(myLCD.D7P, myLCD.D7, (cmd & 0x08) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800702c:	4b11      	ldr	r3, [pc, #68]	; (8007074 <LCD_SendCommand+0x134>)
 800702e:	6998      	ldr	r0, [r3, #24]
 8007030:	4b10      	ldr	r3, [pc, #64]	; (8007074 <LCD_SendCommand+0x134>)
 8007032:	88d9      	ldrh	r1, [r3, #6]
 8007034:	79fb      	ldrb	r3, [r7, #7]
 8007036:	10db      	asrs	r3, r3, #3
 8007038:	b2db      	uxtb	r3, r3
 800703a:	f003 0301 	and.w	r3, r3, #1
 800703e:	b2db      	uxtb	r3, r3
 8007040:	461a      	mov	r2, r3
 8007042:	f001 fffa 	bl	800903a <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(myLCD.ENP, myLCD.EN, GPIO_PIN_SET);
 8007046:	4b0b      	ldr	r3, [pc, #44]	; (8007074 <LCD_SendCommand+0x134>)
 8007048:	69db      	ldr	r3, [r3, #28]
 800704a:	4a0a      	ldr	r2, [pc, #40]	; (8007074 <LCD_SendCommand+0x134>)
 800704c:	8911      	ldrh	r1, [r2, #8]
 800704e:	2201      	movs	r2, #1
 8007050:	4618      	mov	r0, r3
 8007052:	f001 fff2 	bl	800903a <HAL_GPIO_WritePin>
	  HAL_Delay(1);
 8007056:	2001      	movs	r0, #1
 8007058:	f000 fe82 	bl	8007d60 <HAL_Delay>
	  HAL_GPIO_WritePin(myLCD.ENP, myLCD.EN, GPIO_PIN_RESET);
 800705c:	4b05      	ldr	r3, [pc, #20]	; (8007074 <LCD_SendCommand+0x134>)
 800705e:	69db      	ldr	r3, [r3, #28]
 8007060:	4a04      	ldr	r2, [pc, #16]	; (8007074 <LCD_SendCommand+0x134>)
 8007062:	8911      	ldrh	r1, [r2, #8]
 8007064:	2200      	movs	r2, #0
 8007066:	4618      	mov	r0, r3
 8007068:	f001 ffe7 	bl	800903a <HAL_GPIO_WritePin>
}
 800706c:	bf00      	nop
 800706e:	3708      	adds	r7, #8
 8007070:	46bd      	mov	sp, r7
 8007072:	bd80      	pop	{r7, pc}
 8007074:	200004b4 	.word	0x200004b4

08007078 <LCD_SendData>:

void LCD_SendData(uint8_t data){
 8007078:	b580      	push	{r7, lr}
 800707a:	b082      	sub	sp, #8
 800707c:	af00      	add	r7, sp, #0
 800707e:	4603      	mov	r3, r0
 8007080:	71fb      	strb	r3, [r7, #7]
	  // Send high nibble
	  HAL_GPIO_WritePin(myLCD.RSP, myLCD.RS, GPIO_PIN_SET);
 8007082:	4b4a      	ldr	r3, [pc, #296]	; (80071ac <LCD_SendData+0x134>)
 8007084:	6a1b      	ldr	r3, [r3, #32]
 8007086:	4a49      	ldr	r2, [pc, #292]	; (80071ac <LCD_SendData+0x134>)
 8007088:	8951      	ldrh	r1, [r2, #10]
 800708a:	2201      	movs	r2, #1
 800708c:	4618      	mov	r0, r3
 800708e:	f001 ffd4 	bl	800903a <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(myLCD.D4P, myLCD.D4, (data & 0x10) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8007092:	4b46      	ldr	r3, [pc, #280]	; (80071ac <LCD_SendData+0x134>)
 8007094:	68d8      	ldr	r0, [r3, #12]
 8007096:	4b45      	ldr	r3, [pc, #276]	; (80071ac <LCD_SendData+0x134>)
 8007098:	8819      	ldrh	r1, [r3, #0]
 800709a:	79fb      	ldrb	r3, [r7, #7]
 800709c:	111b      	asrs	r3, r3, #4
 800709e:	b2db      	uxtb	r3, r3
 80070a0:	f003 0301 	and.w	r3, r3, #1
 80070a4:	b2db      	uxtb	r3, r3
 80070a6:	461a      	mov	r2, r3
 80070a8:	f001 ffc7 	bl	800903a <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(myLCD.D5P, myLCD.D5, (data & 0x20) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80070ac:	4b3f      	ldr	r3, [pc, #252]	; (80071ac <LCD_SendData+0x134>)
 80070ae:	6918      	ldr	r0, [r3, #16]
 80070b0:	4b3e      	ldr	r3, [pc, #248]	; (80071ac <LCD_SendData+0x134>)
 80070b2:	8859      	ldrh	r1, [r3, #2]
 80070b4:	79fb      	ldrb	r3, [r7, #7]
 80070b6:	115b      	asrs	r3, r3, #5
 80070b8:	b2db      	uxtb	r3, r3
 80070ba:	f003 0301 	and.w	r3, r3, #1
 80070be:	b2db      	uxtb	r3, r3
 80070c0:	461a      	mov	r2, r3
 80070c2:	f001 ffba 	bl	800903a <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(myLCD.D6P, myLCD.D6, (data & 0x40) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80070c6:	4b39      	ldr	r3, [pc, #228]	; (80071ac <LCD_SendData+0x134>)
 80070c8:	6958      	ldr	r0, [r3, #20]
 80070ca:	4b38      	ldr	r3, [pc, #224]	; (80071ac <LCD_SendData+0x134>)
 80070cc:	8899      	ldrh	r1, [r3, #4]
 80070ce:	79fb      	ldrb	r3, [r7, #7]
 80070d0:	119b      	asrs	r3, r3, #6
 80070d2:	b2db      	uxtb	r3, r3
 80070d4:	f003 0301 	and.w	r3, r3, #1
 80070d8:	b2db      	uxtb	r3, r3
 80070da:	461a      	mov	r2, r3
 80070dc:	f001 ffad 	bl	800903a <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(myLCD.D7P, myLCD.D7, (data & 0x80) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80070e0:	4b32      	ldr	r3, [pc, #200]	; (80071ac <LCD_SendData+0x134>)
 80070e2:	6998      	ldr	r0, [r3, #24]
 80070e4:	4b31      	ldr	r3, [pc, #196]	; (80071ac <LCD_SendData+0x134>)
 80070e6:	88d9      	ldrh	r1, [r3, #6]
 80070e8:	79fb      	ldrb	r3, [r7, #7]
 80070ea:	09db      	lsrs	r3, r3, #7
 80070ec:	b2db      	uxtb	r3, r3
 80070ee:	461a      	mov	r2, r3
 80070f0:	f001 ffa3 	bl	800903a <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(myLCD.ENP, myLCD.EN, GPIO_PIN_SET);
 80070f4:	4b2d      	ldr	r3, [pc, #180]	; (80071ac <LCD_SendData+0x134>)
 80070f6:	69db      	ldr	r3, [r3, #28]
 80070f8:	4a2c      	ldr	r2, [pc, #176]	; (80071ac <LCD_SendData+0x134>)
 80070fa:	8911      	ldrh	r1, [r2, #8]
 80070fc:	2201      	movs	r2, #1
 80070fe:	4618      	mov	r0, r3
 8007100:	f001 ff9b 	bl	800903a <HAL_GPIO_WritePin>
	  HAL_Delay(1);
 8007104:	2001      	movs	r0, #1
 8007106:	f000 fe2b 	bl	8007d60 <HAL_Delay>
	  HAL_GPIO_WritePin(myLCD.ENP, myLCD.EN, GPIO_PIN_RESET);
 800710a:	4b28      	ldr	r3, [pc, #160]	; (80071ac <LCD_SendData+0x134>)
 800710c:	69db      	ldr	r3, [r3, #28]
 800710e:	4a27      	ldr	r2, [pc, #156]	; (80071ac <LCD_SendData+0x134>)
 8007110:	8911      	ldrh	r1, [r2, #8]
 8007112:	2200      	movs	r2, #0
 8007114:	4618      	mov	r0, r3
 8007116:	f001 ff90 	bl	800903a <HAL_GPIO_WritePin>

	  // Send low nibble
	  HAL_GPIO_WritePin(myLCD.D4P, myLCD.D4, (data & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800711a:	4b24      	ldr	r3, [pc, #144]	; (80071ac <LCD_SendData+0x134>)
 800711c:	68d8      	ldr	r0, [r3, #12]
 800711e:	4b23      	ldr	r3, [pc, #140]	; (80071ac <LCD_SendData+0x134>)
 8007120:	8819      	ldrh	r1, [r3, #0]
 8007122:	79fb      	ldrb	r3, [r7, #7]
 8007124:	f003 0301 	and.w	r3, r3, #1
 8007128:	b2db      	uxtb	r3, r3
 800712a:	461a      	mov	r2, r3
 800712c:	f001 ff85 	bl	800903a <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(myLCD.D5P, myLCD.D5, (data & 0x02) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8007130:	4b1e      	ldr	r3, [pc, #120]	; (80071ac <LCD_SendData+0x134>)
 8007132:	6918      	ldr	r0, [r3, #16]
 8007134:	4b1d      	ldr	r3, [pc, #116]	; (80071ac <LCD_SendData+0x134>)
 8007136:	8859      	ldrh	r1, [r3, #2]
 8007138:	79fb      	ldrb	r3, [r7, #7]
 800713a:	105b      	asrs	r3, r3, #1
 800713c:	b2db      	uxtb	r3, r3
 800713e:	f003 0301 	and.w	r3, r3, #1
 8007142:	b2db      	uxtb	r3, r3
 8007144:	461a      	mov	r2, r3
 8007146:	f001 ff78 	bl	800903a <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(myLCD.D6P, myLCD.D6, (data & 0x04) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800714a:	4b18      	ldr	r3, [pc, #96]	; (80071ac <LCD_SendData+0x134>)
 800714c:	6958      	ldr	r0, [r3, #20]
 800714e:	4b17      	ldr	r3, [pc, #92]	; (80071ac <LCD_SendData+0x134>)
 8007150:	8899      	ldrh	r1, [r3, #4]
 8007152:	79fb      	ldrb	r3, [r7, #7]
 8007154:	109b      	asrs	r3, r3, #2
 8007156:	b2db      	uxtb	r3, r3
 8007158:	f003 0301 	and.w	r3, r3, #1
 800715c:	b2db      	uxtb	r3, r3
 800715e:	461a      	mov	r2, r3
 8007160:	f001 ff6b 	bl	800903a <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(myLCD.D7P, myLCD.D7, (data & 0x08) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8007164:	4b11      	ldr	r3, [pc, #68]	; (80071ac <LCD_SendData+0x134>)
 8007166:	6998      	ldr	r0, [r3, #24]
 8007168:	4b10      	ldr	r3, [pc, #64]	; (80071ac <LCD_SendData+0x134>)
 800716a:	88d9      	ldrh	r1, [r3, #6]
 800716c:	79fb      	ldrb	r3, [r7, #7]
 800716e:	10db      	asrs	r3, r3, #3
 8007170:	b2db      	uxtb	r3, r3
 8007172:	f003 0301 	and.w	r3, r3, #1
 8007176:	b2db      	uxtb	r3, r3
 8007178:	461a      	mov	r2, r3
 800717a:	f001 ff5e 	bl	800903a <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(myLCD.ENP, myLCD.EN, GPIO_PIN_SET);
 800717e:	4b0b      	ldr	r3, [pc, #44]	; (80071ac <LCD_SendData+0x134>)
 8007180:	69db      	ldr	r3, [r3, #28]
 8007182:	4a0a      	ldr	r2, [pc, #40]	; (80071ac <LCD_SendData+0x134>)
 8007184:	8911      	ldrh	r1, [r2, #8]
 8007186:	2201      	movs	r2, #1
 8007188:	4618      	mov	r0, r3
 800718a:	f001 ff56 	bl	800903a <HAL_GPIO_WritePin>
	  HAL_Delay(1);
 800718e:	2001      	movs	r0, #1
 8007190:	f000 fde6 	bl	8007d60 <HAL_Delay>
	  HAL_GPIO_WritePin(myLCD.ENP, myLCD.EN, GPIO_PIN_RESET);
 8007194:	4b05      	ldr	r3, [pc, #20]	; (80071ac <LCD_SendData+0x134>)
 8007196:	69db      	ldr	r3, [r3, #28]
 8007198:	4a04      	ldr	r2, [pc, #16]	; (80071ac <LCD_SendData+0x134>)
 800719a:	8911      	ldrh	r1, [r2, #8]
 800719c:	2200      	movs	r2, #0
 800719e:	4618      	mov	r0, r3
 80071a0:	f001 ff4b 	bl	800903a <HAL_GPIO_WritePin>
}
 80071a4:	bf00      	nop
 80071a6:	3708      	adds	r7, #8
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bd80      	pop	{r7, pc}
 80071ac:	200004b4 	.word	0x200004b4

080071b0 <LCD_GotoXY>:

void LCD_GotoXY(uint8_t x, uint8_t y){
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b084      	sub	sp, #16
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	4603      	mov	r3, r0
 80071b8:	460a      	mov	r2, r1
 80071ba:	71fb      	strb	r3, [r7, #7]
 80071bc:	4613      	mov	r3, r2
 80071be:	71bb      	strb	r3, [r7, #6]
    uint8_t address;
    if (y == 0) {
 80071c0:	79bb      	ldrb	r3, [r7, #6]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d103      	bne.n	80071ce <LCD_GotoXY+0x1e>
        address = 0x80 + x;
 80071c6:	79fb      	ldrb	r3, [r7, #7]
 80071c8:	3b80      	subs	r3, #128	; 0x80
 80071ca:	73fb      	strb	r3, [r7, #15]
 80071cc:	e013      	b.n	80071f6 <LCD_GotoXY+0x46>
    } else if (y == 1) {
 80071ce:	79bb      	ldrb	r3, [r7, #6]
 80071d0:	2b01      	cmp	r3, #1
 80071d2:	d103      	bne.n	80071dc <LCD_GotoXY+0x2c>
        address = 0xC0 + x;
 80071d4:	79fb      	ldrb	r3, [r7, #7]
 80071d6:	3b40      	subs	r3, #64	; 0x40
 80071d8:	73fb      	strb	r3, [r7, #15]
 80071da:	e00c      	b.n	80071f6 <LCD_GotoXY+0x46>
    } else if (y == 2){
 80071dc:	79bb      	ldrb	r3, [r7, #6]
 80071de:	2b02      	cmp	r3, #2
 80071e0:	d103      	bne.n	80071ea <LCD_GotoXY+0x3a>
        address = 0x80 + x + 16;
 80071e2:	79fb      	ldrb	r3, [r7, #7]
 80071e4:	3b70      	subs	r3, #112	; 0x70
 80071e6:	73fb      	strb	r3, [r7, #15]
 80071e8:	e005      	b.n	80071f6 <LCD_GotoXY+0x46>
    } else if (y == 3){
 80071ea:	79bb      	ldrb	r3, [r7, #6]
 80071ec:	2b03      	cmp	r3, #3
 80071ee:	d102      	bne.n	80071f6 <LCD_GotoXY+0x46>
        address = 0xC0 + x + 16;
 80071f0:	79fb      	ldrb	r3, [r7, #7]
 80071f2:	3b30      	subs	r3, #48	; 0x30
 80071f4:	73fb      	strb	r3, [r7, #15]
    }
    LCD_SendCommand(address);
 80071f6:	7bfb      	ldrb	r3, [r7, #15]
 80071f8:	4618      	mov	r0, r3
 80071fa:	f7ff fea1 	bl	8006f40 <LCD_SendCommand>
}
 80071fe:	bf00      	nop
 8007200:	3710      	adds	r7, #16
 8007202:	46bd      	mov	sp, r7
 8007204:	bd80      	pop	{r7, pc}

08007206 <LCD_Print>:

void LCD_Print(char *str){
 8007206:	b580      	push	{r7, lr}
 8007208:	b082      	sub	sp, #8
 800720a:	af00      	add	r7, sp, #0
 800720c:	6078      	str	r0, [r7, #4]
    while (*str) {
 800720e:	e006      	b.n	800721e <LCD_Print+0x18>
        LCD_SendData(*str++);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	1c5a      	adds	r2, r3, #1
 8007214:	607a      	str	r2, [r7, #4]
 8007216:	781b      	ldrb	r3, [r3, #0]
 8007218:	4618      	mov	r0, r3
 800721a:	f7ff ff2d 	bl	8007078 <LCD_SendData>
    while (*str) {
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	781b      	ldrb	r3, [r3, #0]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d1f4      	bne.n	8007210 <LCD_Print+0xa>
    }
}
 8007226:	bf00      	nop
 8007228:	bf00      	nop
 800722a:	3708      	adds	r7, #8
 800722c:	46bd      	mov	sp, r7
 800722e:	bd80      	pop	{r7, pc}

08007230 <LCD_Clear>:
	memset(tmpbuffer, 0, 10);
	sprintf((char*)tmpbuffer, "%d", number);
	LCD_Print((char*)tmpbuffer);
}

void LCD_Clear(){
 8007230:	b580      	push	{r7, lr}
 8007232:	af00      	add	r7, sp, #0
	LCD_SendCommand(0x01);
 8007234:	2001      	movs	r0, #1
 8007236:	f7ff fe83 	bl	8006f40 <LCD_SendCommand>
}
 800723a:	bf00      	nop
 800723c:	bd80      	pop	{r7, pc}
	...

08007240 <Screen_Init>:

/* STATIC FUNCTIONS ----------------------------------------------------------*/

/* GLOBAL FUNCTIONS ----------------------------------------------------------*/
void Screen_Init(_RTC *myRTC)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b082      	sub	sp, #8
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
	__MY_RTC = myRTC;
 8007248:	4a05      	ldr	r2, [pc, #20]	; (8007260 <Screen_Init+0x20>)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6013      	str	r3, [r2, #0]
//	__MY_RTC->Date = 1;
//	__MY_RTC->Hour = 15;
//	__MY_RTC->Min = 17;
//	__MY_RTC->Sec = 0;
//	DS3231_SetTime(__MY_RTC);
	LCD_Init();
 800724e:	f7ff fe3d 	bl	8006ecc <LCD_Init>
	LCD_Clear();
 8007252:	f7ff ffed 	bl	8007230 <LCD_Clear>
//	HAL_Delay(1000);
//	LCD_GotoXY(0, 0);
//	LCD_Print("Hello!");
}
 8007256:	bf00      	nop
 8007258:	3708      	adds	r7, #8
 800725a:	46bd      	mov	sp, r7
 800725c:	bd80      	pop	{r7, pc}
 800725e:	bf00      	nop
 8007260:	20002730 	.word	0x20002730

08007264 <Screen_Home_Origin>:

void Screen_Home_Origin(uint8_t ID, uint8_t connectflag)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b08a      	sub	sp, #40	; 0x28
 8007268:	af02      	add	r7, sp, #8
 800726a:	4603      	mov	r3, r0
 800726c:	460a      	mov	r2, r1
 800726e:	71fb      	strb	r3, [r7, #7]
 8007270:	4613      	mov	r3, r2
 8007272:	71bb      	strb	r3, [r7, #6]
    char buffer[20];
    DS3231_GetTime(__MY_RTC);
 8007274:	4b3c      	ldr	r3, [pc, #240]	; (8007368 <Screen_Home_Origin+0x104>)
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4618      	mov	r0, r3
 800727a:	f7fc fe47 	bl	8003f0c <DS3231_GetTime>
//	LCD_Clear();
    LCD_GotoXY(11, 1);
 800727e:	2101      	movs	r1, #1
 8007280:	200b      	movs	r0, #11
 8007282:	f7ff ff95 	bl	80071b0 <LCD_GotoXY>
    LCD_Print("NETW");
 8007286:	4839      	ldr	r0, [pc, #228]	; (800736c <Screen_Home_Origin+0x108>)
 8007288:	f7ff ffbd 	bl	8007206 <LCD_Print>
    LCD_GotoXY(12, 2);
 800728c:	2102      	movs	r1, #2
 800728e:	200c      	movs	r0, #12
 8007290:	f7ff ff8e 	bl	80071b0 <LCD_GotoXY>
    if (connectflag)	{
 8007294:	79bb      	ldrb	r3, [r7, #6]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d003      	beq.n	80072a2 <Screen_Home_Origin+0x3e>
    	LCD_Print("ONL");
 800729a:	4835      	ldr	r0, [pc, #212]	; (8007370 <Screen_Home_Origin+0x10c>)
 800729c:	f7ff ffb3 	bl	8007206 <LCD_Print>
 80072a0:	e002      	b.n	80072a8 <Screen_Home_Origin+0x44>
    }
    else {
    	LCD_Print("OFF");
 80072a2:	4834      	ldr	r0, [pc, #208]	; (8007374 <Screen_Home_Origin+0x110>)
 80072a4:	f7ff ffaf 	bl	8007206 <LCD_Print>
    }

	LCD_GotoXY(0, 0);
 80072a8:	2100      	movs	r1, #0
 80072aa:	2000      	movs	r0, #0
 80072ac:	f7ff ff80 	bl	80071b0 <LCD_GotoXY>
//	LCD_Print("Station Node");
//    LCD_GotoXY(0, 1);
    sprintf(buffer,"Station ID: 0x%02X", ID);
 80072b0:	79fa      	ldrb	r2, [r7, #7]
 80072b2:	f107 030c 	add.w	r3, r7, #12
 80072b6:	4930      	ldr	r1, [pc, #192]	; (8007378 <Screen_Home_Origin+0x114>)
 80072b8:	4618      	mov	r0, r3
 80072ba:	f005 fb7b 	bl	800c9b4 <siprintf>
    LCD_Print(buffer);
 80072be:	f107 030c 	add.w	r3, r7, #12
 80072c2:	4618      	mov	r0, r3
 80072c4:	f7ff ff9f 	bl	8007206 <LCD_Print>
    LCD_GotoXY(0, 1);
 80072c8:	2101      	movs	r1, #1
 80072ca:	2000      	movs	r0, #0
 80072cc:	f7ff ff70 	bl	80071b0 <LCD_GotoXY>
    sprintf(buffer,"%02d/%02d/%d", __MY_RTC->Date, __MY_RTC->Month, __MY_RTC->Year);
 80072d0:	4b25      	ldr	r3, [pc, #148]	; (8007368 <Screen_Home_Origin+0x104>)
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	789b      	ldrb	r3, [r3, #2]
 80072d6:	461a      	mov	r2, r3
 80072d8:	4b23      	ldr	r3, [pc, #140]	; (8007368 <Screen_Home_Origin+0x104>)
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	785b      	ldrb	r3, [r3, #1]
 80072de:	4619      	mov	r1, r3
 80072e0:	4b21      	ldr	r3, [pc, #132]	; (8007368 <Screen_Home_Origin+0x104>)
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	781b      	ldrb	r3, [r3, #0]
 80072e6:	f107 000c 	add.w	r0, r7, #12
 80072ea:	9300      	str	r3, [sp, #0]
 80072ec:	460b      	mov	r3, r1
 80072ee:	4923      	ldr	r1, [pc, #140]	; (800737c <Screen_Home_Origin+0x118>)
 80072f0:	f005 fb60 	bl	800c9b4 <siprintf>
    LCD_Print(buffer);
 80072f4:	f107 030c 	add.w	r3, r7, #12
 80072f8:	4618      	mov	r0, r3
 80072fa:	f7ff ff84 	bl	8007206 <LCD_Print>
    LCD_GotoXY(0, 2);
 80072fe:	2102      	movs	r1, #2
 8007300:	2000      	movs	r0, #0
 8007302:	f7ff ff55 	bl	80071b0 <LCD_GotoXY>
    sprintf(buffer,"%02d:%02d:%02d", __MY_RTC->Hour, __MY_RTC->Min, __MY_RTC->Sec);
 8007306:	4b18      	ldr	r3, [pc, #96]	; (8007368 <Screen_Home_Origin+0x104>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	791b      	ldrb	r3, [r3, #4]
 800730c:	461a      	mov	r2, r3
 800730e:	4b16      	ldr	r3, [pc, #88]	; (8007368 <Screen_Home_Origin+0x104>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	795b      	ldrb	r3, [r3, #5]
 8007314:	4619      	mov	r1, r3
 8007316:	4b14      	ldr	r3, [pc, #80]	; (8007368 <Screen_Home_Origin+0x104>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	799b      	ldrb	r3, [r3, #6]
 800731c:	f107 000c 	add.w	r0, r7, #12
 8007320:	9300      	str	r3, [sp, #0]
 8007322:	460b      	mov	r3, r1
 8007324:	4916      	ldr	r1, [pc, #88]	; (8007380 <Screen_Home_Origin+0x11c>)
 8007326:	f005 fb45 	bl	800c9b4 <siprintf>
    LCD_Print(buffer);
 800732a:	f107 030c 	add.w	r3, r7, #12
 800732e:	4618      	mov	r0, r3
 8007330:	f7ff ff69 	bl	8007206 <LCD_Print>
    LCD_GotoXY(5, 3);
 8007334:	2103      	movs	r1, #3
 8007336:	2005      	movs	r0, #5
 8007338:	f7ff ff3a 	bl	80071b0 <LCD_GotoXY>
    LCD_SendData(_LCD_CHAR_LEFT);
 800733c:	2002      	movs	r0, #2
 800733e:	f7ff fe9b 	bl	8007078 <LCD_SendData>
    LCD_GotoXY(6, 3);
 8007342:	2103      	movs	r1, #3
 8007344:	2006      	movs	r0, #6
 8007346:	f7ff ff33 	bl	80071b0 <LCD_GotoXY>
    LCD_Print("HOME");
 800734a:	480e      	ldr	r0, [pc, #56]	; (8007384 <Screen_Home_Origin+0x120>)
 800734c:	f7ff ff5b 	bl	8007206 <LCD_Print>
    LCD_GotoXY(10,3);
 8007350:	2103      	movs	r1, #3
 8007352:	200a      	movs	r0, #10
 8007354:	f7ff ff2c 	bl	80071b0 <LCD_GotoXY>
    LCD_SendData(_LCD_CHAR_RIGHT);
 8007358:	2000      	movs	r0, #0
 800735a:	f7ff fe8d 	bl	8007078 <LCD_SendData>
}
 800735e:	bf00      	nop
 8007360:	3720      	adds	r7, #32
 8007362:	46bd      	mov	sp, r7
 8007364:	bd80      	pop	{r7, pc}
 8007366:	bf00      	nop
 8007368:	20002730 	.word	0x20002730
 800736c:	0800f330 	.word	0x0800f330
 8007370:	0800f338 	.word	0x0800f338
 8007374:	0800f33c 	.word	0x0800f33c
 8007378:	0800f340 	.word	0x0800f340
 800737c:	0800f354 	.word	0x0800f354
 8007380:	0800f364 	.word	0x0800f364
 8007384:	0800f374 	.word	0x0800f374

08007388 <Screen_Home_Sync>:

void Screen_Home_Sync(uint16_t time)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b088      	sub	sp, #32
 800738c:	af00      	add	r7, sp, #0
 800738e:	4603      	mov	r3, r0
 8007390:	80fb      	strh	r3, [r7, #6]
    char buffer[20];
//	LCD_Clear();
	LCD_GotoXY(1, 0);
 8007392:	2100      	movs	r1, #0
 8007394:	2001      	movs	r0, #1
 8007396:	f7ff ff0b 	bl	80071b0 <LCD_GotoXY>
	LCD_Print("Received Order");
 800739a:	481d      	ldr	r0, [pc, #116]	; (8007410 <Screen_Home_Sync+0x88>)
 800739c:	f7ff ff33 	bl	8007206 <LCD_Print>

    LCD_GotoXY(1, 1);
 80073a0:	2101      	movs	r1, #1
 80073a2:	2001      	movs	r0, #1
 80073a4:	f7ff ff04 	bl	80071b0 <LCD_GotoXY>
    LCD_Print("OFF after:");
 80073a8:	481a      	ldr	r0, [pc, #104]	; (8007414 <Screen_Home_Sync+0x8c>)
 80073aa:	f7ff ff2c 	bl	8007206 <LCD_Print>
    LCD_GotoXY(6, 2);
 80073ae:	2102      	movs	r1, #2
 80073b0:	2006      	movs	r0, #6
 80073b2:	f7ff fefd 	bl	80071b0 <LCD_GotoXY>
    LCD_Print("     ");
 80073b6:	4818      	ldr	r0, [pc, #96]	; (8007418 <Screen_Home_Sync+0x90>)
 80073b8:	f7ff ff25 	bl	8007206 <LCD_Print>
    LCD_GotoXY(6, 2);
 80073bc:	2102      	movs	r1, #2
 80073be:	2006      	movs	r0, #6
 80073c0:	f7ff fef6 	bl	80071b0 <LCD_GotoXY>
    sprintf(buffer, "%ds", time);
 80073c4:	88fa      	ldrh	r2, [r7, #6]
 80073c6:	f107 030c 	add.w	r3, r7, #12
 80073ca:	4914      	ldr	r1, [pc, #80]	; (800741c <Screen_Home_Sync+0x94>)
 80073cc:	4618      	mov	r0, r3
 80073ce:	f005 faf1 	bl	800c9b4 <siprintf>
    LCD_Print(buffer);
 80073d2:	f107 030c 	add.w	r3, r7, #12
 80073d6:	4618      	mov	r0, r3
 80073d8:	f7ff ff15 	bl	8007206 <LCD_Print>
    LCD_GotoXY(5, 3);
 80073dc:	2103      	movs	r1, #3
 80073de:	2005      	movs	r0, #5
 80073e0:	f7ff fee6 	bl	80071b0 <LCD_GotoXY>
    LCD_SendData(_LCD_CHAR_LEFT);
 80073e4:	2002      	movs	r0, #2
 80073e6:	f7ff fe47 	bl	8007078 <LCD_SendData>
    LCD_GotoXY(6, 3);
 80073ea:	2103      	movs	r1, #3
 80073ec:	2006      	movs	r0, #6
 80073ee:	f7ff fedf 	bl	80071b0 <LCD_GotoXY>
    LCD_Print("HOME");
 80073f2:	480b      	ldr	r0, [pc, #44]	; (8007420 <Screen_Home_Sync+0x98>)
 80073f4:	f7ff ff07 	bl	8007206 <LCD_Print>
    LCD_GotoXY(10,3);
 80073f8:	2103      	movs	r1, #3
 80073fa:	200a      	movs	r0, #10
 80073fc:	f7ff fed8 	bl	80071b0 <LCD_GotoXY>
    LCD_SendData(_LCD_CHAR_RIGHT);
 8007400:	2000      	movs	r0, #0
 8007402:	f7ff fe39 	bl	8007078 <LCD_SendData>
}
 8007406:	bf00      	nop
 8007408:	3720      	adds	r7, #32
 800740a:	46bd      	mov	sp, r7
 800740c:	bd80      	pop	{r7, pc}
 800740e:	bf00      	nop
 8007410:	0800f37c 	.word	0x0800f37c
 8007414:	0800f38c 	.word	0x0800f38c
 8007418:	0800f398 	.word	0x0800f398
 800741c:	0800f3a0 	.word	0x0800f3a0
 8007420:	0800f374 	.word	0x0800f374

08007424 <Screen_Home_Calib>:
		LCD_Print(buffer);
	}
}

void Screen_Home_Calib(void)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b088      	sub	sp, #32
 8007428:	af02      	add	r7, sp, #8
    char buffer[20];
//    DS3231_GetTime(&__MY_RTC);
//	LCD_Clear();
	LCD_GotoXY(1, 0);
 800742a:	2100      	movs	r1, #0
 800742c:	2001      	movs	r0, #1
 800742e:	f7ff febf 	bl	80071b0 <LCD_GotoXY>
	LCD_Print("Received Order");
 8007432:	4827      	ldr	r0, [pc, #156]	; (80074d0 <Screen_Home_Calib+0xac>)
 8007434:	f7ff fee7 	bl	8007206 <LCD_Print>
    LCD_GotoXY(0, 1);
 8007438:	2101      	movs	r1, #1
 800743a:	2000      	movs	r0, #0
 800743c:	f7ff feb8 	bl	80071b0 <LCD_GotoXY>
    sprintf(buffer,"SWoff: %02dh%02dm%02ds", __MY_RTC->Hour, __MY_RTC->Min, __MY_RTC->Sec);
 8007440:	4b24      	ldr	r3, [pc, #144]	; (80074d4 <Screen_Home_Calib+0xb0>)
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	791b      	ldrb	r3, [r3, #4]
 8007446:	461a      	mov	r2, r3
 8007448:	4b22      	ldr	r3, [pc, #136]	; (80074d4 <Screen_Home_Calib+0xb0>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	795b      	ldrb	r3, [r3, #5]
 800744e:	4619      	mov	r1, r3
 8007450:	4b20      	ldr	r3, [pc, #128]	; (80074d4 <Screen_Home_Calib+0xb0>)
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	799b      	ldrb	r3, [r3, #6]
 8007456:	1d38      	adds	r0, r7, #4
 8007458:	9300      	str	r3, [sp, #0]
 800745a:	460b      	mov	r3, r1
 800745c:	491e      	ldr	r1, [pc, #120]	; (80074d8 <Screen_Home_Calib+0xb4>)
 800745e:	f005 faa9 	bl	800c9b4 <siprintf>
    LCD_Print(buffer);
 8007462:	1d3b      	adds	r3, r7, #4
 8007464:	4618      	mov	r0, r3
 8007466:	f7ff fece 	bl	8007206 <LCD_Print>
    LCD_GotoXY(0, 2);
 800746a:	2102      	movs	r1, #2
 800746c:	2000      	movs	r0, #0
 800746e:	f7ff fe9f 	bl	80071b0 <LCD_GotoXY>
    sprintf(buffer,"Date:  %02d/%02d/%d", __MY_RTC->Date, __MY_RTC->Month, __MY_RTC->Year);
 8007472:	4b18      	ldr	r3, [pc, #96]	; (80074d4 <Screen_Home_Calib+0xb0>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	789b      	ldrb	r3, [r3, #2]
 8007478:	461a      	mov	r2, r3
 800747a:	4b16      	ldr	r3, [pc, #88]	; (80074d4 <Screen_Home_Calib+0xb0>)
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	785b      	ldrb	r3, [r3, #1]
 8007480:	4619      	mov	r1, r3
 8007482:	4b14      	ldr	r3, [pc, #80]	; (80074d4 <Screen_Home_Calib+0xb0>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	781b      	ldrb	r3, [r3, #0]
 8007488:	1d38      	adds	r0, r7, #4
 800748a:	9300      	str	r3, [sp, #0]
 800748c:	460b      	mov	r3, r1
 800748e:	4913      	ldr	r1, [pc, #76]	; (80074dc <Screen_Home_Calib+0xb8>)
 8007490:	f005 fa90 	bl	800c9b4 <siprintf>
    LCD_Print(buffer);
 8007494:	1d3b      	adds	r3, r7, #4
 8007496:	4618      	mov	r0, r3
 8007498:	f7ff feb5 	bl	8007206 <LCD_Print>
    LCD_GotoXY(5, 3);
 800749c:	2103      	movs	r1, #3
 800749e:	2005      	movs	r0, #5
 80074a0:	f7ff fe86 	bl	80071b0 <LCD_GotoXY>
    LCD_SendData(_LCD_CHAR_LEFT);
 80074a4:	2002      	movs	r0, #2
 80074a6:	f7ff fde7 	bl	8007078 <LCD_SendData>
    LCD_GotoXY(6, 3);
 80074aa:	2103      	movs	r1, #3
 80074ac:	2006      	movs	r0, #6
 80074ae:	f7ff fe7f 	bl	80071b0 <LCD_GotoXY>
    LCD_Print("HOME");
 80074b2:	480b      	ldr	r0, [pc, #44]	; (80074e0 <Screen_Home_Calib+0xbc>)
 80074b4:	f7ff fea7 	bl	8007206 <LCD_Print>
    LCD_GotoXY(10,3);
 80074b8:	2103      	movs	r1, #3
 80074ba:	200a      	movs	r0, #10
 80074bc:	f7ff fe78 	bl	80071b0 <LCD_GotoXY>
    LCD_SendData(_LCD_CHAR_RIGHT);
 80074c0:	2000      	movs	r0, #0
 80074c2:	f7ff fdd9 	bl	8007078 <LCD_SendData>
}
 80074c6:	bf00      	nop
 80074c8:	3718      	adds	r7, #24
 80074ca:	46bd      	mov	sp, r7
 80074cc:	bd80      	pop	{r7, pc}
 80074ce:	bf00      	nop
 80074d0:	0800f37c 	.word	0x0800f37c
 80074d4:	20002730 	.word	0x20002730
 80074d8:	0800f3ac 	.word	0x0800f3ac
 80074dc:	0800f3c4 	.word	0x0800f3c4
 80074e0:	0800f374 	.word	0x0800f374

080074e4 <Screen_Monitor_Station>:

void Screen_Monitor_Station(uint8_t mode, uint16_t current)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b088      	sub	sp, #32
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	4603      	mov	r3, r0
 80074ec:	460a      	mov	r2, r1
 80074ee:	71fb      	strb	r3, [r7, #7]
 80074f0:	4613      	mov	r3, r2
 80074f2:	80bb      	strh	r3, [r7, #4]
    char buffer[20];
	LCD_GotoXY(0, 0);
 80074f4:	2100      	movs	r1, #0
 80074f6:	2000      	movs	r0, #0
 80074f8:	f7ff fe5a 	bl	80071b0 <LCD_GotoXY>
    LCD_SendData(_LCD_CHAR_UP);
 80074fc:	2006      	movs	r0, #6
 80074fe:	f7ff fdbb 	bl	8007078 <LCD_SendData>
	LCD_GotoXY(1, 0);
 8007502:	2100      	movs	r1, #0
 8007504:	2001      	movs	r0, #1
 8007506:	f7ff fe53 	bl	80071b0 <LCD_GotoXY>
	LCD_Print("Station Status");
 800750a:	4822      	ldr	r0, [pc, #136]	; (8007594 <Screen_Monitor_Station+0xb0>)
 800750c:	f7ff fe7b 	bl	8007206 <LCD_Print>
    LCD_GotoXY(1, 1);
 8007510:	2101      	movs	r1, #1
 8007512:	2001      	movs	r0, #1
 8007514:	f7ff fe4c 	bl	80071b0 <LCD_GotoXY>
    if (mode == 2)
 8007518:	79fb      	ldrb	r3, [r7, #7]
 800751a:	2b02      	cmp	r3, #2
 800751c:	d103      	bne.n	8007526 <Screen_Monitor_Station+0x42>
    {
        LCD_Print("Contactor: OFF");
 800751e:	481e      	ldr	r0, [pc, #120]	; (8007598 <Screen_Monitor_Station+0xb4>)
 8007520:	f7ff fe71 	bl	8007206 <LCD_Print>
 8007524:	e005      	b.n	8007532 <Screen_Monitor_Station+0x4e>
    } else if (mode == 1){
 8007526:	79fb      	ldrb	r3, [r7, #7]
 8007528:	2b01      	cmp	r3, #1
 800752a:	d102      	bne.n	8007532 <Screen_Monitor_Station+0x4e>
        LCD_Print("Contactor: ON");
 800752c:	481b      	ldr	r0, [pc, #108]	; (800759c <Screen_Monitor_Station+0xb8>)
 800752e:	f7ff fe6a 	bl	8007206 <LCD_Print>
    }
    LCD_GotoXY(1, 2);
 8007532:	2102      	movs	r1, #2
 8007534:	2001      	movs	r0, #1
 8007536:	f7ff fe3b 	bl	80071b0 <LCD_GotoXY>
    sprintf(buffer,"Current: %04dmA", current);
 800753a:	88ba      	ldrh	r2, [r7, #4]
 800753c:	f107 030c 	add.w	r3, r7, #12
 8007540:	4917      	ldr	r1, [pc, #92]	; (80075a0 <Screen_Monitor_Station+0xbc>)
 8007542:	4618      	mov	r0, r3
 8007544:	f005 fa36 	bl	800c9b4 <siprintf>
    LCD_Print(buffer);
 8007548:	f107 030c 	add.w	r3, r7, #12
 800754c:	4618      	mov	r0, r3
 800754e:	f7ff fe5a 	bl	8007206 <LCD_Print>
    LCD_GotoXY(0, 2);
 8007552:	2102      	movs	r1, #2
 8007554:	2000      	movs	r0, #0
 8007556:	f7ff fe2b 	bl	80071b0 <LCD_GotoXY>
	LCD_SendData(_LCD_CHAR_DOWN);
 800755a:	2007      	movs	r0, #7
 800755c:	f7ff fd8c 	bl	8007078 <LCD_SendData>
    LCD_GotoXY(4, 3);
 8007560:	2103      	movs	r1, #3
 8007562:	2004      	movs	r0, #4
 8007564:	f7ff fe24 	bl	80071b0 <LCD_GotoXY>
    LCD_SendData(_LCD_CHAR_LEFT);
 8007568:	2002      	movs	r0, #2
 800756a:	f7ff fd85 	bl	8007078 <LCD_SendData>
    LCD_GotoXY(5, 3);
 800756e:	2103      	movs	r1, #3
 8007570:	2005      	movs	r0, #5
 8007572:	f7ff fe1d 	bl	80071b0 <LCD_GotoXY>
    LCD_Print("MONITOR");
 8007576:	480b      	ldr	r0, [pc, #44]	; (80075a4 <Screen_Monitor_Station+0xc0>)
 8007578:	f7ff fe45 	bl	8007206 <LCD_Print>
    LCD_GotoXY(12,3);
 800757c:	2103      	movs	r1, #3
 800757e:	200c      	movs	r0, #12
 8007580:	f7ff fe16 	bl	80071b0 <LCD_GotoXY>
    LCD_SendData(_LCD_CHAR_RIGHT);
 8007584:	2000      	movs	r0, #0
 8007586:	f7ff fd77 	bl	8007078 <LCD_SendData>
}
 800758a:	bf00      	nop
 800758c:	3720      	adds	r7, #32
 800758e:	46bd      	mov	sp, r7
 8007590:	bd80      	pop	{r7, pc}
 8007592:	bf00      	nop
 8007594:	0800f3d8 	.word	0x0800f3d8
 8007598:	0800f3e8 	.word	0x0800f3e8
 800759c:	0800f3f8 	.word	0x0800f3f8
 80075a0:	0800f408 	.word	0x0800f408
 80075a4:	0800f418 	.word	0x0800f418

080075a8 <Screen_Monitor_Node>:

void Screen_Monitor_Node(uint8_t ID, uint8_t mode, uint16_t battery, uint8_t type, uint16_t voltage)
{
 80075a8:	b590      	push	{r4, r7, lr}
 80075aa:	b089      	sub	sp, #36	; 0x24
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	4604      	mov	r4, r0
 80075b0:	4608      	mov	r0, r1
 80075b2:	4611      	mov	r1, r2
 80075b4:	461a      	mov	r2, r3
 80075b6:	4623      	mov	r3, r4
 80075b8:	71fb      	strb	r3, [r7, #7]
 80075ba:	4603      	mov	r3, r0
 80075bc:	71bb      	strb	r3, [r7, #6]
 80075be:	460b      	mov	r3, r1
 80075c0:	80bb      	strh	r3, [r7, #4]
 80075c2:	4613      	mov	r3, r2
 80075c4:	70fb      	strb	r3, [r7, #3]
    char buffer[20];
//	LCD_Clear();
	LCD_GotoXY(0, 0);
 80075c6:	2100      	movs	r1, #0
 80075c8:	2000      	movs	r0, #0
 80075ca:	f7ff fdf1 	bl	80071b0 <LCD_GotoXY>
    LCD_SendData(_LCD_CHAR_UP);
 80075ce:	2006      	movs	r0, #6
 80075d0:	f7ff fd52 	bl	8007078 <LCD_SendData>
    LCD_GotoXY(1, 0);
 80075d4:	2100      	movs	r1, #0
 80075d6:	2001      	movs	r0, #1
 80075d8:	f7ff fdea 	bl	80071b0 <LCD_GotoXY>
    sprintf(buffer,"Sensor ID: 0x%02X", ID);
 80075dc:	79fa      	ldrb	r2, [r7, #7]
 80075de:	f107 030c 	add.w	r3, r7, #12
 80075e2:	4968      	ldr	r1, [pc, #416]	; (8007784 <Screen_Monitor_Node+0x1dc>)
 80075e4:	4618      	mov	r0, r3
 80075e6:	f005 f9e5 	bl	800c9b4 <siprintf>
    LCD_Print(buffer);
 80075ea:	f107 030c 	add.w	r3, r7, #12
 80075ee:	4618      	mov	r0, r3
 80075f0:	f7ff fe09 	bl	8007206 <LCD_Print>
    LCD_GotoXY(1, 1);
 80075f4:	2101      	movs	r1, #1
 80075f6:	2001      	movs	r0, #1
 80075f8:	f7ff fdda 	bl	80071b0 <LCD_GotoXY>
    if (mode == 2)
 80075fc:	79bb      	ldrb	r3, [r7, #6]
 80075fe:	2b02      	cmp	r3, #2
 8007600:	d103      	bne.n	800760a <Screen_Monitor_Node+0x62>
    {
        LCD_Print("Status: Measure");
 8007602:	4861      	ldr	r0, [pc, #388]	; (8007788 <Screen_Monitor_Node+0x1e0>)
 8007604:	f7ff fdff 	bl	8007206 <LCD_Print>
 8007608:	e009      	b.n	800761e <Screen_Monitor_Node+0x76>
    } else if (mode == 1){
 800760a:	79bb      	ldrb	r3, [r7, #6]
 800760c:	2b01      	cmp	r3, #1
 800760e:	d103      	bne.n	8007618 <Screen_Monitor_Node+0x70>
        LCD_Print("Status: Wake   ");
 8007610:	485e      	ldr	r0, [pc, #376]	; (800778c <Screen_Monitor_Node+0x1e4>)
 8007612:	f7ff fdf8 	bl	8007206 <LCD_Print>
 8007616:	e002      	b.n	800761e <Screen_Monitor_Node+0x76>
    }
    else {
    	LCD_Print("Status: Sleep  ");
 8007618:	485d      	ldr	r0, [pc, #372]	; (8007790 <Screen_Monitor_Node+0x1e8>)
 800761a:	f7ff fdf4 	bl	8007206 <LCD_Print>
    }
    LCD_GotoXY(1, 2);
 800761e:	2102      	movs	r1, #2
 8007620:	2001      	movs	r0, #1
 8007622:	f7ff fdc5 	bl	80071b0 <LCD_GotoXY>
    sprintf(buffer,"Battery: %03d%%", battery);
 8007626:	88ba      	ldrh	r2, [r7, #4]
 8007628:	f107 030c 	add.w	r3, r7, #12
 800762c:	4959      	ldr	r1, [pc, #356]	; (8007794 <Screen_Monitor_Node+0x1ec>)
 800762e:	4618      	mov	r0, r3
 8007630:	f005 f9c0 	bl	800c9b4 <siprintf>
    LCD_Print(buffer);
 8007634:	f107 030c 	add.w	r3, r7, #12
 8007638:	4618      	mov	r0, r3
 800763a:	f7ff fde4 	bl	8007206 <LCD_Print>
    LCD_GotoXY(0, 3);
 800763e:	2103      	movs	r1, #3
 8007640:	2000      	movs	r0, #0
 8007642:	f7ff fdb5 	bl	80071b0 <LCD_GotoXY>
	LCD_SendData(_LCD_CHAR_DOWN);
 8007646:	2007      	movs	r0, #7
 8007648:	f7ff fd16 	bl	8007078 <LCD_SendData>
    LCD_GotoXY(1, 3);
 800764c:	2103      	movs	r1, #3
 800764e:	2001      	movs	r0, #1
 8007650:	f7ff fdae 	bl	80071b0 <LCD_GotoXY>
    voltage = voltage*2;
 8007654:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8007656:	005b      	lsls	r3, r3, #1
 8007658:	863b      	strh	r3, [r7, #48]	; 0x30
    if (voltage == 0){
 800765a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800765c:	2b00      	cmp	r3, #0
 800765e:	d110      	bne.n	8007682 <Screen_Monitor_Node+0xda>
    	 if (type == 1)
 8007660:	78fb      	ldrb	r3, [r7, #3]
 8007662:	2b01      	cmp	r3, #1
 8007664:	d106      	bne.n	8007674 <Screen_Monitor_Node+0xcc>
			{
				sprintf(buffer,"VP:      ");
 8007666:	f107 030c 	add.w	r3, r7, #12
 800766a:	494b      	ldr	r1, [pc, #300]	; (8007798 <Screen_Monitor_Node+0x1f0>)
 800766c:	4618      	mov	r0, r3
 800766e:	f005 f9a1 	bl	800c9b4 <siprintf>
 8007672:	e07d      	b.n	8007770 <Screen_Monitor_Node+0x1c8>
			} else {
				sprintf(buffer,"VNA:      ");
 8007674:	f107 030c 	add.w	r3, r7, #12
 8007678:	4948      	ldr	r1, [pc, #288]	; (800779c <Screen_Monitor_Node+0x1f4>)
 800767a:	4618      	mov	r0, r3
 800767c:	f005 f99a 	bl	800c9b4 <siprintf>
 8007680:	e076      	b.n	8007770 <Screen_Monitor_Node+0x1c8>
			}
    }
    else if (voltage < 3000){
 8007682:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8007684:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8007688:	4293      	cmp	r3, r2
 800768a:	d839      	bhi.n	8007700 <Screen_Monitor_Node+0x158>
    	voltage = 3000 - voltage;
 800768c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800768e:	f5c3 633b 	rsb	r3, r3, #2992	; 0xbb0
 8007692:	3308      	adds	r3, #8
 8007694:	863b      	strh	r3, [r7, #48]	; 0x30
    	 if (type == 1)
 8007696:	78fb      	ldrb	r3, [r7, #3]
 8007698:	2b01      	cmp	r3, #1
 800769a:	d118      	bne.n	80076ce <Screen_Monitor_Node+0x126>
    	    {
    	        sprintf(buffer,"VP: -%01d.%02dV", voltage/1000, voltage%1000);
 800769c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800769e:	4a40      	ldr	r2, [pc, #256]	; (80077a0 <Screen_Monitor_Node+0x1f8>)
 80076a0:	fba2 2303 	umull	r2, r3, r2, r3
 80076a4:	099b      	lsrs	r3, r3, #6
 80076a6:	b29b      	uxth	r3, r3
 80076a8:	461c      	mov	r4, r3
 80076aa:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80076ac:	4a3c      	ldr	r2, [pc, #240]	; (80077a0 <Screen_Monitor_Node+0x1f8>)
 80076ae:	fba2 1203 	umull	r1, r2, r2, r3
 80076b2:	0992      	lsrs	r2, r2, #6
 80076b4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80076b8:	fb01 f202 	mul.w	r2, r1, r2
 80076bc:	1a9b      	subs	r3, r3, r2
 80076be:	b29b      	uxth	r3, r3
 80076c0:	f107 000c 	add.w	r0, r7, #12
 80076c4:	4622      	mov	r2, r4
 80076c6:	4937      	ldr	r1, [pc, #220]	; (80077a4 <Screen_Monitor_Node+0x1fc>)
 80076c8:	f005 f974 	bl	800c9b4 <siprintf>
 80076cc:	e050      	b.n	8007770 <Screen_Monitor_Node+0x1c8>
    	    } else {
    	        sprintf(buffer,"VNA: -%01d.%02dV", voltage/1000, voltage%1000);
 80076ce:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80076d0:	4a33      	ldr	r2, [pc, #204]	; (80077a0 <Screen_Monitor_Node+0x1f8>)
 80076d2:	fba2 2303 	umull	r2, r3, r2, r3
 80076d6:	099b      	lsrs	r3, r3, #6
 80076d8:	b29b      	uxth	r3, r3
 80076da:	461c      	mov	r4, r3
 80076dc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80076de:	4a30      	ldr	r2, [pc, #192]	; (80077a0 <Screen_Monitor_Node+0x1f8>)
 80076e0:	fba2 1203 	umull	r1, r2, r2, r3
 80076e4:	0992      	lsrs	r2, r2, #6
 80076e6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80076ea:	fb01 f202 	mul.w	r2, r1, r2
 80076ee:	1a9b      	subs	r3, r3, r2
 80076f0:	b29b      	uxth	r3, r3
 80076f2:	f107 000c 	add.w	r0, r7, #12
 80076f6:	4622      	mov	r2, r4
 80076f8:	492b      	ldr	r1, [pc, #172]	; (80077a8 <Screen_Monitor_Node+0x200>)
 80076fa:	f005 f95b 	bl	800c9b4 <siprintf>
 80076fe:	e037      	b.n	8007770 <Screen_Monitor_Node+0x1c8>
    	    }
    }
    else {
    	voltage = voltage - 3000;
 8007700:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8007702:	f6a3 33b8 	subw	r3, r3, #3000	; 0xbb8
 8007706:	863b      	strh	r3, [r7, #48]	; 0x30
		 if (type == 1)
 8007708:	78fb      	ldrb	r3, [r7, #3]
 800770a:	2b01      	cmp	r3, #1
 800770c:	d118      	bne.n	8007740 <Screen_Monitor_Node+0x198>
			{
				sprintf(buffer,"VP: %01d.%02dV", voltage/1000, voltage%1000);
 800770e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8007710:	4a23      	ldr	r2, [pc, #140]	; (80077a0 <Screen_Monitor_Node+0x1f8>)
 8007712:	fba2 2303 	umull	r2, r3, r2, r3
 8007716:	099b      	lsrs	r3, r3, #6
 8007718:	b29b      	uxth	r3, r3
 800771a:	461c      	mov	r4, r3
 800771c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800771e:	4a20      	ldr	r2, [pc, #128]	; (80077a0 <Screen_Monitor_Node+0x1f8>)
 8007720:	fba2 1203 	umull	r1, r2, r2, r3
 8007724:	0992      	lsrs	r2, r2, #6
 8007726:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800772a:	fb01 f202 	mul.w	r2, r1, r2
 800772e:	1a9b      	subs	r3, r3, r2
 8007730:	b29b      	uxth	r3, r3
 8007732:	f107 000c 	add.w	r0, r7, #12
 8007736:	4622      	mov	r2, r4
 8007738:	491c      	ldr	r1, [pc, #112]	; (80077ac <Screen_Monitor_Node+0x204>)
 800773a:	f005 f93b 	bl	800c9b4 <siprintf>
 800773e:	e017      	b.n	8007770 <Screen_Monitor_Node+0x1c8>
			} else {
				sprintf(buffer,"VNA: %01d.%02dV", voltage/1000, voltage%1000);
 8007740:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8007742:	4a17      	ldr	r2, [pc, #92]	; (80077a0 <Screen_Monitor_Node+0x1f8>)
 8007744:	fba2 2303 	umull	r2, r3, r2, r3
 8007748:	099b      	lsrs	r3, r3, #6
 800774a:	b29b      	uxth	r3, r3
 800774c:	461c      	mov	r4, r3
 800774e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8007750:	4a13      	ldr	r2, [pc, #76]	; (80077a0 <Screen_Monitor_Node+0x1f8>)
 8007752:	fba2 1203 	umull	r1, r2, r2, r3
 8007756:	0992      	lsrs	r2, r2, #6
 8007758:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800775c:	fb01 f202 	mul.w	r2, r1, r2
 8007760:	1a9b      	subs	r3, r3, r2
 8007762:	b29b      	uxth	r3, r3
 8007764:	f107 000c 	add.w	r0, r7, #12
 8007768:	4622      	mov	r2, r4
 800776a:	4911      	ldr	r1, [pc, #68]	; (80077b0 <Screen_Monitor_Node+0x208>)
 800776c:	f005 f922 	bl	800c9b4 <siprintf>
			}
    }

    LCD_Print(buffer);
 8007770:	f107 030c 	add.w	r3, r7, #12
 8007774:	4618      	mov	r0, r3
 8007776:	f7ff fd46 	bl	8007206 <LCD_Print>
}
 800777a:	bf00      	nop
 800777c:	3724      	adds	r7, #36	; 0x24
 800777e:	46bd      	mov	sp, r7
 8007780:	bd90      	pop	{r4, r7, pc}
 8007782:	bf00      	nop
 8007784:	0800f420 	.word	0x0800f420
 8007788:	0800f434 	.word	0x0800f434
 800778c:	0800f444 	.word	0x0800f444
 8007790:	0800f454 	.word	0x0800f454
 8007794:	0800f464 	.word	0x0800f464
 8007798:	0800f474 	.word	0x0800f474
 800779c:	0800f480 	.word	0x0800f480
 80077a0:	10624dd3 	.word	0x10624dd3
 80077a4:	0800f48c 	.word	0x0800f48c
 80077a8:	0800f49c 	.word	0x0800f49c
 80077ac:	0800f4b0 	.word	0x0800f4b0
 80077b0:	0800f4c0 	.word	0x0800f4c0

080077b4 <Screen_Function>:

void Screen_Function(uint8_t position)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b082      	sub	sp, #8
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	4603      	mov	r3, r0
 80077bc:	71fb      	strb	r3, [r7, #7]
//	LCD_Clear();
	LCD_GotoXY(0, position);
 80077be:	79fb      	ldrb	r3, [r7, #7]
 80077c0:	4619      	mov	r1, r3
 80077c2:	2000      	movs	r0, #0
 80077c4:	f7ff fcf4 	bl	80071b0 <LCD_GotoXY>
	LCD_SendData(_LCD_CHAR_RIGHT_INVERT);
 80077c8:	2001      	movs	r0, #1
 80077ca:	f7ff fc55 	bl	8007078 <LCD_SendData>
    LCD_GotoXY(1, 0);
 80077ce:	2100      	movs	r1, #0
 80077d0:	2001      	movs	r0, #1
 80077d2:	f7ff fced 	bl	80071b0 <LCD_GotoXY>
    LCD_Print("Control Voltage");
 80077d6:	4811      	ldr	r0, [pc, #68]	; (800781c <Screen_Function+0x68>)
 80077d8:	f7ff fd15 	bl	8007206 <LCD_Print>
    LCD_GotoXY(1, 1);
 80077dc:	2101      	movs	r1, #1
 80077de:	2001      	movs	r0, #1
 80077e0:	f7ff fce6 	bl	80071b0 <LCD_GotoXY>
    LCD_Print("Control ON/OFF");
 80077e4:	480e      	ldr	r0, [pc, #56]	; (8007820 <Screen_Function+0x6c>)
 80077e6:	f7ff fd0e 	bl	8007206 <LCD_Print>
    LCD_GotoXY(3, 3);
 80077ea:	2103      	movs	r1, #3
 80077ec:	2003      	movs	r0, #3
 80077ee:	f7ff fcdf 	bl	80071b0 <LCD_GotoXY>
    LCD_SendData(_LCD_CHAR_LEFT);
 80077f2:	2002      	movs	r0, #2
 80077f4:	f7ff fc40 	bl	8007078 <LCD_SendData>
    LCD_GotoXY(4, 3);
 80077f8:	2103      	movs	r1, #3
 80077fa:	2004      	movs	r0, #4
 80077fc:	f7ff fcd8 	bl	80071b0 <LCD_GotoXY>
    LCD_Print("FUNCTION");
 8007800:	4808      	ldr	r0, [pc, #32]	; (8007824 <Screen_Function+0x70>)
 8007802:	f7ff fd00 	bl	8007206 <LCD_Print>
    LCD_GotoXY(12,3);
 8007806:	2103      	movs	r1, #3
 8007808:	200c      	movs	r0, #12
 800780a:	f7ff fcd1 	bl	80071b0 <LCD_GotoXY>
    LCD_SendData(_LCD_CHAR_RIGHT);
 800780e:	2000      	movs	r0, #0
 8007810:	f7ff fc32 	bl	8007078 <LCD_SendData>
}
 8007814:	bf00      	nop
 8007816:	3708      	adds	r7, #8
 8007818:	46bd      	mov	sp, r7
 800781a:	bd80      	pop	{r7, pc}
 800781c:	0800f4d0 	.word	0x0800f4d0
 8007820:	0800f4e0 	.word	0x0800f4e0
 8007824:	0800f4f0 	.word	0x0800f4f0

08007828 <Screen_Voltage_Control>:
 * @argument :
 * 	- limit : 0 MIN, 1 MAX, other NONE
 * 	- ValorDir: 0 Value, 1 Direction
 */
void Screen_Voltage_Control(uint8_t limit , uint8_t ValorDir)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b082      	sub	sp, #8
 800782c:	af00      	add	r7, sp, #0
 800782e:	4603      	mov	r3, r0
 8007830:	460a      	mov	r2, r1
 8007832:	71fb      	strb	r3, [r7, #7]
 8007834:	4613      	mov	r3, r2
 8007836:	71bb      	strb	r3, [r7, #6]
//	LCD_Clear();
	LCD_GotoXY(0, 0);
 8007838:	2100      	movs	r1, #0
 800783a:	2000      	movs	r0, #0
 800783c:	f7ff fcb8 	bl	80071b0 <LCD_GotoXY>
	LCD_Print("Voltage Control");
 8007840:	4823      	ldr	r0, [pc, #140]	; (80078d0 <Screen_Voltage_Control+0xa8>)
 8007842:	f7ff fce0 	bl	8007206 <LCD_Print>
	if (ValorDir == 0)	{
 8007846:	79bb      	ldrb	r3, [r7, #6]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d104      	bne.n	8007856 <Screen_Voltage_Control+0x2e>
		LCD_GotoXY(0, 1);
 800784c:	2101      	movs	r1, #1
 800784e:	2000      	movs	r0, #0
 8007850:	f7ff fcae 	bl	80071b0 <LCD_GotoXY>
 8007854:	e00b      	b.n	800786e <Screen_Voltage_Control+0x46>
	}
	else if (ValorDir == 1)  {
 8007856:	79bb      	ldrb	r3, [r7, #6]
 8007858:	2b01      	cmp	r3, #1
 800785a:	d104      	bne.n	8007866 <Screen_Voltage_Control+0x3e>
		LCD_GotoXY(0, 2);
 800785c:	2102      	movs	r1, #2
 800785e:	2000      	movs	r0, #0
 8007860:	f7ff fca6 	bl	80071b0 <LCD_GotoXY>
 8007864:	e003      	b.n	800786e <Screen_Voltage_Control+0x46>
	}
	else {
		LCD_GotoXY(0, 3);
 8007866:	2103      	movs	r1, #3
 8007868:	2000      	movs	r0, #0
 800786a:	f7ff fca1 	bl	80071b0 <LCD_GotoXY>
	}
	LCD_SendData(_LCD_CHAR_RIGHT);
 800786e:	2000      	movs	r0, #0
 8007870:	f7ff fc02 	bl	8007078 <LCD_SendData>

    LCD_GotoXY(1, 1);
 8007874:	2101      	movs	r1, #1
 8007876:	2001      	movs	r0, #1
 8007878:	f7ff fc9a 	bl	80071b0 <LCD_GotoXY>
    LCD_Print("Step: ");
 800787c:	4815      	ldr	r0, [pc, #84]	; (80078d4 <Screen_Voltage_Control+0xac>)
 800787e:	f7ff fcc2 	bl	8007206 <LCD_Print>

    LCD_GotoXY(1, 2);
 8007882:	2102      	movs	r1, #2
 8007884:	2001      	movs	r0, #1
 8007886:	f7ff fc93 	bl	80071b0 <LCD_GotoXY>
    LCD_Print("Direction: ");
 800788a:	4813      	ldr	r0, [pc, #76]	; (80078d8 <Screen_Voltage_Control+0xb0>)
 800788c:	f7ff fcbb 	bl	8007206 <LCD_Print>

    LCD_GotoXY(1, 3);
 8007890:	2103      	movs	r1, #3
 8007892:	2001      	movs	r0, #1
 8007894:	f7ff fc8c 	bl	80071b0 <LCD_GotoXY>
    LCD_Print("Confirm");
 8007898:	4810      	ldr	r0, [pc, #64]	; (80078dc <Screen_Voltage_Control+0xb4>)
 800789a:	f7ff fcb4 	bl	8007206 <LCD_Print>

    LCD_GotoXY(12, 3);
 800789e:	2103      	movs	r1, #3
 80078a0:	200c      	movs	r0, #12
 80078a2:	f7ff fc85 	bl	80071b0 <LCD_GotoXY>
    if (limit == 0){
 80078a6:	79fb      	ldrb	r3, [r7, #7]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d103      	bne.n	80078b4 <Screen_Voltage_Control+0x8c>
        LCD_Print("MIN");
 80078ac:	480c      	ldr	r0, [pc, #48]	; (80078e0 <Screen_Voltage_Control+0xb8>)
 80078ae:	f7ff fcaa 	bl	8007206 <LCD_Print>
//    LCD_SendData(_LCD_CHAR_LEFT);
//    LCD_GotoXY(4, 3);
//    LCD_Print("FUNCTION");
//    LCD_GotoXY(12,3);
//    LCD_SendData(_LCD_CHAR_RIGHT);
}
 80078b2:	e009      	b.n	80078c8 <Screen_Voltage_Control+0xa0>
    } else if (limit == 1) {
 80078b4:	79fb      	ldrb	r3, [r7, #7]
 80078b6:	2b01      	cmp	r3, #1
 80078b8:	d103      	bne.n	80078c2 <Screen_Voltage_Control+0x9a>
        LCD_Print("MAX");
 80078ba:	480a      	ldr	r0, [pc, #40]	; (80078e4 <Screen_Voltage_Control+0xbc>)
 80078bc:	f7ff fca3 	bl	8007206 <LCD_Print>
}
 80078c0:	e002      	b.n	80078c8 <Screen_Voltage_Control+0xa0>
        LCD_Print("NONE");
 80078c2:	4809      	ldr	r0, [pc, #36]	; (80078e8 <Screen_Voltage_Control+0xc0>)
 80078c4:	f7ff fc9f 	bl	8007206 <LCD_Print>
}
 80078c8:	bf00      	nop
 80078ca:	3708      	adds	r7, #8
 80078cc:	46bd      	mov	sp, r7
 80078ce:	bd80      	pop	{r7, pc}
 80078d0:	0800f4fc 	.word	0x0800f4fc
 80078d4:	0800f50c 	.word	0x0800f50c
 80078d8:	0800f514 	.word	0x0800f514
 80078dc:	0800f520 	.word	0x0800f520
 80078e0:	0800f528 	.word	0x0800f528
 80078e4:	0800f52c 	.word	0x0800f52c
 80078e8:	0800f530 	.word	0x0800f530

080078ec <Screen_Dir_Control>:

void Screen_Dir_Control(uint8_t limit)
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b082      	sub	sp, #8
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	4603      	mov	r3, r0
 80078f4:	71fb      	strb	r3, [r7, #7]
//	LCD_Clear();
	LCD_GotoXY(0, 0);
 80078f6:	2100      	movs	r1, #0
 80078f8:	2000      	movs	r0, #0
 80078fa:	f7ff fc59 	bl	80071b0 <LCD_GotoXY>
	LCD_Print("Voltage Control");
 80078fe:	481c      	ldr	r0, [pc, #112]	; (8007970 <Screen_Dir_Control+0x84>)
 8007900:	f7ff fc81 	bl	8007206 <LCD_Print>
//		LCD_GotoXY(0, 2);
//	}
//	else {
//		LCD_GotoXY(0, 2);
//	}
	LCD_GotoXY(15, 2);
 8007904:	2102      	movs	r1, #2
 8007906:	200f      	movs	r0, #15
 8007908:	f7ff fc52 	bl	80071b0 <LCD_GotoXY>
	LCD_SendData(_LCD_CHAR_LEFT);
 800790c:	2002      	movs	r0, #2
 800790e:	f7ff fbb3 	bl	8007078 <LCD_SendData>

    LCD_GotoXY(1, 1);
 8007912:	2101      	movs	r1, #1
 8007914:	2001      	movs	r0, #1
 8007916:	f7ff fc4b 	bl	80071b0 <LCD_GotoXY>
    LCD_Print("Step: ");
 800791a:	4816      	ldr	r0, [pc, #88]	; (8007974 <Screen_Dir_Control+0x88>)
 800791c:	f7ff fc73 	bl	8007206 <LCD_Print>

    LCD_GotoXY(1, 2);
 8007920:	2102      	movs	r1, #2
 8007922:	2001      	movs	r0, #1
 8007924:	f7ff fc44 	bl	80071b0 <LCD_GotoXY>
    LCD_Print("Direction: ");
 8007928:	4813      	ldr	r0, [pc, #76]	; (8007978 <Screen_Dir_Control+0x8c>)
 800792a:	f7ff fc6c 	bl	8007206 <LCD_Print>

    LCD_GotoXY(1, 3);
 800792e:	2103      	movs	r1, #3
 8007930:	2001      	movs	r0, #1
 8007932:	f7ff fc3d 	bl	80071b0 <LCD_GotoXY>
    LCD_Print("Confirm");
 8007936:	4811      	ldr	r0, [pc, #68]	; (800797c <Screen_Dir_Control+0x90>)
 8007938:	f7ff fc65 	bl	8007206 <LCD_Print>

    LCD_GotoXY(12, 3);
 800793c:	2103      	movs	r1, #3
 800793e:	200c      	movs	r0, #12
 8007940:	f7ff fc36 	bl	80071b0 <LCD_GotoXY>
    if (limit == 0){
 8007944:	79fb      	ldrb	r3, [r7, #7]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d103      	bne.n	8007952 <Screen_Dir_Control+0x66>
        LCD_Print("MIN");
 800794a:	480d      	ldr	r0, [pc, #52]	; (8007980 <Screen_Dir_Control+0x94>)
 800794c:	f7ff fc5b 	bl	8007206 <LCD_Print>
//    LCD_SendData(_LCD_CHAR_LEFT);
//    LCD_GotoXY(4, 3);
//    LCD_Print("FUNCTION");
//    LCD_GotoXY(12,3);
//    LCD_SendData(_LCD_CHAR_RIGHT);
}
 8007950:	e009      	b.n	8007966 <Screen_Dir_Control+0x7a>
    } else if (limit == 1) {
 8007952:	79fb      	ldrb	r3, [r7, #7]
 8007954:	2b01      	cmp	r3, #1
 8007956:	d103      	bne.n	8007960 <Screen_Dir_Control+0x74>
        LCD_Print("MAX");
 8007958:	480a      	ldr	r0, [pc, #40]	; (8007984 <Screen_Dir_Control+0x98>)
 800795a:	f7ff fc54 	bl	8007206 <LCD_Print>
}
 800795e:	e002      	b.n	8007966 <Screen_Dir_Control+0x7a>
        LCD_Print("NONE");
 8007960:	4809      	ldr	r0, [pc, #36]	; (8007988 <Screen_Dir_Control+0x9c>)
 8007962:	f7ff fc50 	bl	8007206 <LCD_Print>
}
 8007966:	bf00      	nop
 8007968:	3708      	adds	r7, #8
 800796a:	46bd      	mov	sp, r7
 800796c:	bd80      	pop	{r7, pc}
 800796e:	bf00      	nop
 8007970:	0800f4fc 	.word	0x0800f4fc
 8007974:	0800f50c 	.word	0x0800f50c
 8007978:	0800f514 	.word	0x0800f514
 800797c:	0800f520 	.word	0x0800f520
 8007980:	0800f528 	.word	0x0800f528
 8007984:	0800f52c 	.word	0x0800f52c
 8007988:	0800f530 	.word	0x0800f530

0800798c <Screen_StepVal_Control>:

void Screen_StepVal_Control(uint8_t limit)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b082      	sub	sp, #8
 8007990:	af00      	add	r7, sp, #0
 8007992:	4603      	mov	r3, r0
 8007994:	71fb      	strb	r3, [r7, #7]
//	LCD_Clear();
	LCD_GotoXY(0, 0);
 8007996:	2100      	movs	r1, #0
 8007998:	2000      	movs	r0, #0
 800799a:	f7ff fc09 	bl	80071b0 <LCD_GotoXY>
	LCD_Print("Voltage Control");
 800799e:	481c      	ldr	r0, [pc, #112]	; (8007a10 <Screen_StepVal_Control+0x84>)
 80079a0:	f7ff fc31 	bl	8007206 <LCD_Print>

	LCD_GotoXY(12, 1);
 80079a4:	2101      	movs	r1, #1
 80079a6:	200c      	movs	r0, #12
 80079a8:	f7ff fc02 	bl	80071b0 <LCD_GotoXY>
	LCD_SendData(_LCD_CHAR_LEFT);
 80079ac:	2002      	movs	r0, #2
 80079ae:	f7ff fb63 	bl	8007078 <LCD_SendData>
//	else {
//		LCD_GotoXY(0, 2);
//	}
//	LCD_SendData(_LCD_CHAR_RIGHT);

    LCD_GotoXY(1, 1);
 80079b2:	2101      	movs	r1, #1
 80079b4:	2001      	movs	r0, #1
 80079b6:	f7ff fbfb 	bl	80071b0 <LCD_GotoXY>
    LCD_Print("Step: ");
 80079ba:	4816      	ldr	r0, [pc, #88]	; (8007a14 <Screen_StepVal_Control+0x88>)
 80079bc:	f7ff fc23 	bl	8007206 <LCD_Print>

    LCD_GotoXY(1, 2);
 80079c0:	2102      	movs	r1, #2
 80079c2:	2001      	movs	r0, #1
 80079c4:	f7ff fbf4 	bl	80071b0 <LCD_GotoXY>
    LCD_Print("Direction: ");
 80079c8:	4813      	ldr	r0, [pc, #76]	; (8007a18 <Screen_StepVal_Control+0x8c>)
 80079ca:	f7ff fc1c 	bl	8007206 <LCD_Print>

    LCD_GotoXY(1, 3);
 80079ce:	2103      	movs	r1, #3
 80079d0:	2001      	movs	r0, #1
 80079d2:	f7ff fbed 	bl	80071b0 <LCD_GotoXY>
    LCD_Print("Confirm");
 80079d6:	4811      	ldr	r0, [pc, #68]	; (8007a1c <Screen_StepVal_Control+0x90>)
 80079d8:	f7ff fc15 	bl	8007206 <LCD_Print>

    LCD_GotoXY(12, 3);
 80079dc:	2103      	movs	r1, #3
 80079de:	200c      	movs	r0, #12
 80079e0:	f7ff fbe6 	bl	80071b0 <LCD_GotoXY>
    if (limit == 0){
 80079e4:	79fb      	ldrb	r3, [r7, #7]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d103      	bne.n	80079f2 <Screen_StepVal_Control+0x66>
        LCD_Print("MIN");
 80079ea:	480d      	ldr	r0, [pc, #52]	; (8007a20 <Screen_StepVal_Control+0x94>)
 80079ec:	f7ff fc0b 	bl	8007206 <LCD_Print>
//    LCD_SendData(_LCD_CHAR_LEFT);
//    LCD_GotoXY(4, 3);
//    LCD_Print("FUNCTION");
//    LCD_GotoXY(12,3);
//    LCD_SendData(_LCD_CHAR_RIGHT);
}
 80079f0:	e009      	b.n	8007a06 <Screen_StepVal_Control+0x7a>
    } else if (limit == 1) {
 80079f2:	79fb      	ldrb	r3, [r7, #7]
 80079f4:	2b01      	cmp	r3, #1
 80079f6:	d103      	bne.n	8007a00 <Screen_StepVal_Control+0x74>
        LCD_Print("MAX");
 80079f8:	480a      	ldr	r0, [pc, #40]	; (8007a24 <Screen_StepVal_Control+0x98>)
 80079fa:	f7ff fc04 	bl	8007206 <LCD_Print>
}
 80079fe:	e002      	b.n	8007a06 <Screen_StepVal_Control+0x7a>
        LCD_Print("NONE");
 8007a00:	4809      	ldr	r0, [pc, #36]	; (8007a28 <Screen_StepVal_Control+0x9c>)
 8007a02:	f7ff fc00 	bl	8007206 <LCD_Print>
}
 8007a06:	bf00      	nop
 8007a08:	3708      	adds	r7, #8
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	bd80      	pop	{r7, pc}
 8007a0e:	bf00      	nop
 8007a10:	0800f4fc 	.word	0x0800f4fc
 8007a14:	0800f50c 	.word	0x0800f50c
 8007a18:	0800f514 	.word	0x0800f514
 8007a1c:	0800f520 	.word	0x0800f520
 8007a20:	0800f528 	.word	0x0800f528
 8007a24:	0800f52c 	.word	0x0800f52c
 8007a28:	0800f530 	.word	0x0800f530

08007a2c <Screen_Voltage_Control_Control_Motor>:
void Screen_Voltage_Control_Control_Motor(uint16_t step, uint8_t dir)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b088      	sub	sp, #32
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	4603      	mov	r3, r0
 8007a34:	460a      	mov	r2, r1
 8007a36:	80fb      	strh	r3, [r7, #6]
 8007a38:	4613      	mov	r3, r2
 8007a3a:	717b      	strb	r3, [r7, #5]
//        // Motor go to left
//    } else {
//        // Motor go to left
//    }
//    // Read ADC
	LCD_GotoXY(7, 1);
 8007a3c:	2101      	movs	r1, #1
 8007a3e:	2007      	movs	r0, #7
 8007a40:	f7ff fbb6 	bl	80071b0 <LCD_GotoXY>
	sprintf(buffer,"%d", step);
 8007a44:	88fa      	ldrh	r2, [r7, #6]
 8007a46:	f107 030c 	add.w	r3, r7, #12
 8007a4a:	490f      	ldr	r1, [pc, #60]	; (8007a88 <Screen_Voltage_Control_Control_Motor+0x5c>)
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	f004 ffb1 	bl	800c9b4 <siprintf>
//	sprintf(buffer,"%01d.%02dV", adc_value/100, adc_value%100);
	LCD_Print(buffer);
 8007a52:	f107 030c 	add.w	r3, r7, #12
 8007a56:	4618      	mov	r0, r3
 8007a58:	f7ff fbd5 	bl	8007206 <LCD_Print>
	LCD_GotoXY(12, 2);
 8007a5c:	2102      	movs	r1, #2
 8007a5e:	200c      	movs	r0, #12
 8007a60:	f7ff fba6 	bl	80071b0 <LCD_GotoXY>
	if (dir == 0x01) {
 8007a64:	797b      	ldrb	r3, [r7, #5]
 8007a66:	2b01      	cmp	r3, #1
 8007a68:	d103      	bne.n	8007a72 <Screen_Voltage_Control_Control_Motor+0x46>
		LCD_Print("INC");
 8007a6a:	4808      	ldr	r0, [pc, #32]	; (8007a8c <Screen_Voltage_Control_Control_Motor+0x60>)
 8007a6c:	f7ff fbcb 	bl	8007206 <LCD_Print>
		LCD_Print("DEC");
	}



}
 8007a70:	e005      	b.n	8007a7e <Screen_Voltage_Control_Control_Motor+0x52>
	else if (dir == 0x02) {
 8007a72:	797b      	ldrb	r3, [r7, #5]
 8007a74:	2b02      	cmp	r3, #2
 8007a76:	d102      	bne.n	8007a7e <Screen_Voltage_Control_Control_Motor+0x52>
		LCD_Print("DEC");
 8007a78:	4805      	ldr	r0, [pc, #20]	; (8007a90 <Screen_Voltage_Control_Control_Motor+0x64>)
 8007a7a:	f7ff fbc4 	bl	8007206 <LCD_Print>
}
 8007a7e:	bf00      	nop
 8007a80:	3720      	adds	r7, #32
 8007a82:	46bd      	mov	sp, r7
 8007a84:	bd80      	pop	{r7, pc}
 8007a86:	bf00      	nop
 8007a88:	0800f538 	.word	0x0800f538
 8007a8c:	0800f53c 	.word	0x0800f53c
 8007a90:	0800f540 	.word	0x0800f540

08007a94 <Screen_Control_Relay>:

void Screen_Control_Relay(uint8_t position)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b082      	sub	sp, #8
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	71fb      	strb	r3, [r7, #7]
//	LCD_Clear();
	LCD_GotoXY(0, position+1);
 8007a9e:	79fb      	ldrb	r3, [r7, #7]
 8007aa0:	3301      	adds	r3, #1
 8007aa2:	b2db      	uxtb	r3, r3
 8007aa4:	4619      	mov	r1, r3
 8007aa6:	2000      	movs	r0, #0
 8007aa8:	f7ff fb82 	bl	80071b0 <LCD_GotoXY>
	LCD_SendData(_LCD_CHAR_RIGHT_INVERT);
 8007aac:	2001      	movs	r0, #1
 8007aae:	f7ff fae3 	bl	8007078 <LCD_SendData>
    LCD_GotoXY(1, 0);
 8007ab2:	2100      	movs	r1, #0
 8007ab4:	2001      	movs	r0, #1
 8007ab6:	f7ff fb7b 	bl	80071b0 <LCD_GotoXY>
    LCD_Print("Output Control");
 8007aba:	4815      	ldr	r0, [pc, #84]	; (8007b10 <Screen_Control_Relay+0x7c>)
 8007abc:	f7ff fba3 	bl	8007206 <LCD_Print>
    LCD_GotoXY(1, 1);
 8007ac0:	2101      	movs	r1, #1
 8007ac2:	2001      	movs	r0, #1
 8007ac4:	f7ff fb74 	bl	80071b0 <LCD_GotoXY>
    LCD_Print("Trans. is: ");
 8007ac8:	4812      	ldr	r0, [pc, #72]	; (8007b14 <Screen_Control_Relay+0x80>)
 8007aca:	f7ff fb9c 	bl	8007206 <LCD_Print>
    LCD_GotoXY(1, 2);
 8007ace:	2102      	movs	r1, #2
 8007ad0:	2001      	movs	r0, #1
 8007ad2:	f7ff fb6d 	bl	80071b0 <LCD_GotoXY>
    LCD_Print("Confirm: ");
 8007ad6:	4810      	ldr	r0, [pc, #64]	; (8007b18 <Screen_Control_Relay+0x84>)
 8007ad8:	f7ff fb95 	bl	8007206 <LCD_Print>
    LCD_GotoXY(3, 3);
 8007adc:	2103      	movs	r1, #3
 8007ade:	2003      	movs	r0, #3
 8007ae0:	f7ff fb66 	bl	80071b0 <LCD_GotoXY>
    LCD_SendData(_LCD_CHAR_LEFT);
 8007ae4:	2002      	movs	r0, #2
 8007ae6:	f7ff fac7 	bl	8007078 <LCD_SendData>
    LCD_GotoXY(4, 3);
 8007aea:	2103      	movs	r1, #3
 8007aec:	2004      	movs	r0, #4
 8007aee:	f7ff fb5f 	bl	80071b0 <LCD_GotoXY>
    LCD_Print("FUNCTION");
 8007af2:	480a      	ldr	r0, [pc, #40]	; (8007b1c <Screen_Control_Relay+0x88>)
 8007af4:	f7ff fb87 	bl	8007206 <LCD_Print>
    LCD_GotoXY(12,3);
 8007af8:	2103      	movs	r1, #3
 8007afa:	200c      	movs	r0, #12
 8007afc:	f7ff fb58 	bl	80071b0 <LCD_GotoXY>
    LCD_SendData(_LCD_CHAR_RIGHT);
 8007b00:	2000      	movs	r0, #0
 8007b02:	f7ff fab9 	bl	8007078 <LCD_SendData>
}
 8007b06:	bf00      	nop
 8007b08:	3708      	adds	r7, #8
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	bd80      	pop	{r7, pc}
 8007b0e:	bf00      	nop
 8007b10:	0800f544 	.word	0x0800f544
 8007b14:	0800f554 	.word	0x0800f554
 8007b18:	0800f560 	.word	0x0800f560
 8007b1c:	0800f4f0 	.word	0x0800f4f0

08007b20 <Screen_Control_Relay_Change_Mode>:

void Screen_Control_Relay_Change_Mode(uint8_t curStatus,uint8_t status)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b082      	sub	sp, #8
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	4603      	mov	r3, r0
 8007b28:	460a      	mov	r2, r1
 8007b2a:	71fb      	strb	r3, [r7, #7]
 8007b2c:	4613      	mov	r3, r2
 8007b2e:	71bb      	strb	r3, [r7, #6]
	LCD_GotoXY(12, 1);
 8007b30:	2101      	movs	r1, #1
 8007b32:	200c      	movs	r0, #12
 8007b34:	f7ff fb3c 	bl	80071b0 <LCD_GotoXY>
	if (curStatus == 2){
 8007b38:	79fb      	ldrb	r3, [r7, #7]
 8007b3a:	2b02      	cmp	r3, #2
 8007b3c:	d103      	bne.n	8007b46 <Screen_Control_Relay_Change_Mode+0x26>
		LCD_Print("OFF");
 8007b3e:	480e      	ldr	r0, [pc, #56]	; (8007b78 <Screen_Control_Relay_Change_Mode+0x58>)
 8007b40:	f7ff fb61 	bl	8007206 <LCD_Print>
 8007b44:	e005      	b.n	8007b52 <Screen_Control_Relay_Change_Mode+0x32>
	} else if (curStatus == 1){
 8007b46:	79fb      	ldrb	r3, [r7, #7]
 8007b48:	2b01      	cmp	r3, #1
 8007b4a:	d102      	bne.n	8007b52 <Screen_Control_Relay_Change_Mode+0x32>
		LCD_Print("ON");
 8007b4c:	480b      	ldr	r0, [pc, #44]	; (8007b7c <Screen_Control_Relay_Change_Mode+0x5c>)
 8007b4e:	f7ff fb5a 	bl	8007206 <LCD_Print>
	}
	LCD_GotoXY(10, 2);
 8007b52:	2102      	movs	r1, #2
 8007b54:	200a      	movs	r0, #10
 8007b56:	f7ff fb2b 	bl	80071b0 <LCD_GotoXY>
	if (status == 0){
 8007b5a:	79bb      	ldrb	r3, [r7, #6]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d103      	bne.n	8007b68 <Screen_Control_Relay_Change_Mode+0x48>
		LCD_Print("OFF");
 8007b60:	4805      	ldr	r0, [pc, #20]	; (8007b78 <Screen_Control_Relay_Change_Mode+0x58>)
 8007b62:	f7ff fb50 	bl	8007206 <LCD_Print>
	} else {
		LCD_Print("ON");
	}
}
 8007b66:	e002      	b.n	8007b6e <Screen_Control_Relay_Change_Mode+0x4e>
		LCD_Print("ON");
 8007b68:	4804      	ldr	r0, [pc, #16]	; (8007b7c <Screen_Control_Relay_Change_Mode+0x5c>)
 8007b6a:	f7ff fb4c 	bl	8007206 <LCD_Print>
}
 8007b6e:	bf00      	nop
 8007b70:	3708      	adds	r7, #8
 8007b72:	46bd      	mov	sp, r7
 8007b74:	bd80      	pop	{r7, pc}
 8007b76:	bf00      	nop
 8007b78:	0800f33c 	.word	0x0800f33c
 8007b7c:	0800f56c 	.word	0x0800f56c

08007b80 <Screen_Accept_Relay>:

void Screen_Accept_Relay(_RTC switchtime, uint8_t status)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b08c      	sub	sp, #48	; 0x30
 8007b84:	af02      	add	r7, sp, #8
 8007b86:	f107 0308 	add.w	r3, r7, #8
 8007b8a:	e883 0003 	stmia.w	r3, {r0, r1}
 8007b8e:	4613      	mov	r3, r2
 8007b90:	71fb      	strb	r3, [r7, #7]
    char buffer[20];
//    DS3231_GetTime(__MY_RTC);
//	LCD_Clear();
	LCD_GotoXY(1, 0);
 8007b92:	2100      	movs	r1, #0
 8007b94:	2001      	movs	r0, #1
 8007b96:	f7ff fb0b 	bl	80071b0 <LCD_GotoXY>
	LCD_Print("Output Control");
 8007b9a:	4826      	ldr	r0, [pc, #152]	; (8007c34 <Screen_Accept_Relay+0xb4>)
 8007b9c:	f7ff fb33 	bl	8007206 <LCD_Print>
	LCD_GotoXY(0, 1);
 8007ba0:	2101      	movs	r1, #1
 8007ba2:	2000      	movs	r0, #0
 8007ba4:	f7ff fb04 	bl	80071b0 <LCD_GotoXY>
	LCD_Print("SWITCH");
 8007ba8:	4823      	ldr	r0, [pc, #140]	; (8007c38 <Screen_Accept_Relay+0xb8>)
 8007baa:	f7ff fb2c 	bl	8007206 <LCD_Print>
	LCD_GotoXY(7, 1);
 8007bae:	2101      	movs	r1, #1
 8007bb0:	2007      	movs	r0, #7
 8007bb2:	f7ff fafd 	bl	80071b0 <LCD_GotoXY>
	if (status == 0){
 8007bb6:	79fb      	ldrb	r3, [r7, #7]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d103      	bne.n	8007bc4 <Screen_Accept_Relay+0x44>
		LCD_Print("OFF");
 8007bbc:	481f      	ldr	r0, [pc, #124]	; (8007c3c <Screen_Accept_Relay+0xbc>)
 8007bbe:	f7ff fb22 	bl	8007206 <LCD_Print>
 8007bc2:	e002      	b.n	8007bca <Screen_Accept_Relay+0x4a>
	} else {
		LCD_Print("ON");
 8007bc4:	481e      	ldr	r0, [pc, #120]	; (8007c40 <Screen_Accept_Relay+0xc0>)
 8007bc6:	f7ff fb1e 	bl	8007206 <LCD_Print>
	}
	LCD_GotoXY(11, 1);
 8007bca:	2101      	movs	r1, #1
 8007bcc:	200b      	movs	r0, #11
 8007bce:	f7ff faef 	bl	80071b0 <LCD_GotoXY>
	LCD_Print("AT:");
 8007bd2:	481c      	ldr	r0, [pc, #112]	; (8007c44 <Screen_Accept_Relay+0xc4>)
 8007bd4:	f7ff fb17 	bl	8007206 <LCD_Print>
    LCD_GotoXY(4, 2);
 8007bd8:	2102      	movs	r1, #2
 8007bda:	2004      	movs	r0, #4
 8007bdc:	f7ff fae8 	bl	80071b0 <LCD_GotoXY>
    sprintf(buffer,"%02d:%02d:%02d", switchtime.Hour, switchtime.Min, switchtime.Sec);
 8007be0:	7b3b      	ldrb	r3, [r7, #12]
 8007be2:	461a      	mov	r2, r3
 8007be4:	7b7b      	ldrb	r3, [r7, #13]
 8007be6:	4619      	mov	r1, r3
 8007be8:	7bbb      	ldrb	r3, [r7, #14]
 8007bea:	f107 0014 	add.w	r0, r7, #20
 8007bee:	9300      	str	r3, [sp, #0]
 8007bf0:	460b      	mov	r3, r1
 8007bf2:	4915      	ldr	r1, [pc, #84]	; (8007c48 <Screen_Accept_Relay+0xc8>)
 8007bf4:	f004 fede 	bl	800c9b4 <siprintf>
    LCD_Print(buffer);
 8007bf8:	f107 0314 	add.w	r3, r7, #20
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	f7ff fb02 	bl	8007206 <LCD_Print>
    LCD_GotoXY(4, 3);
 8007c02:	2103      	movs	r1, #3
 8007c04:	2004      	movs	r0, #4
 8007c06:	f7ff fad3 	bl	80071b0 <LCD_GotoXY>
    sprintf(buffer,"%02d/%02d/%d", switchtime.Date, switchtime.Month, switchtime.Year);
 8007c0a:	7abb      	ldrb	r3, [r7, #10]
 8007c0c:	461a      	mov	r2, r3
 8007c0e:	7a7b      	ldrb	r3, [r7, #9]
 8007c10:	4619      	mov	r1, r3
 8007c12:	7a3b      	ldrb	r3, [r7, #8]
 8007c14:	f107 0014 	add.w	r0, r7, #20
 8007c18:	9300      	str	r3, [sp, #0]
 8007c1a:	460b      	mov	r3, r1
 8007c1c:	490b      	ldr	r1, [pc, #44]	; (8007c4c <Screen_Accept_Relay+0xcc>)
 8007c1e:	f004 fec9 	bl	800c9b4 <siprintf>
    LCD_Print(buffer);
 8007c22:	f107 0314 	add.w	r3, r7, #20
 8007c26:	4618      	mov	r0, r3
 8007c28:	f7ff faed 	bl	8007206 <LCD_Print>
//    LCD_SendData(_LCD_CHAR_LEFT);
//    LCD_GotoXY(4, 3);
//    LCD_Print("FUNCTION");
//    LCD_GotoXY(12,3);
//    LCD_SendData(_LCD_CHAR_RIGHT);
}
 8007c2c:	bf00      	nop
 8007c2e:	3728      	adds	r7, #40	; 0x28
 8007c30:	46bd      	mov	sp, r7
 8007c32:	bd80      	pop	{r7, pc}
 8007c34:	0800f544 	.word	0x0800f544
 8007c38:	0800f570 	.word	0x0800f570
 8007c3c:	0800f33c 	.word	0x0800f33c
 8007c40:	0800f56c 	.word	0x0800f56c
 8007c44:	0800f578 	.word	0x0800f578
 8007c48:	0800f364 	.word	0x0800f364
 8007c4c:	0800f354 	.word	0x0800f354

08007c50 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8007c50:	f7fe fd7c 	bl	800674c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007c54:	480b      	ldr	r0, [pc, #44]	; (8007c84 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8007c56:	490c      	ldr	r1, [pc, #48]	; (8007c88 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8007c58:	4a0c      	ldr	r2, [pc, #48]	; (8007c8c <LoopFillZerobss+0x16>)
  movs r3, #0
 8007c5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007c5c:	e002      	b.n	8007c64 <LoopCopyDataInit>

08007c5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007c5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007c60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007c62:	3304      	adds	r3, #4

08007c64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007c64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007c66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007c68:	d3f9      	bcc.n	8007c5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007c6a:	4a09      	ldr	r2, [pc, #36]	; (8007c90 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8007c6c:	4c09      	ldr	r4, [pc, #36]	; (8007c94 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8007c6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007c70:	e001      	b.n	8007c76 <LoopFillZerobss>

08007c72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007c72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007c74:	3204      	adds	r2, #4

08007c76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007c76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007c78:	d3fb      	bcc.n	8007c72 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8007c7a:	f004 f9d3 	bl	800c024 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8007c7e:	f7fe fa71 	bl	8006164 <main>
  bx lr
 8007c82:	4770      	bx	lr
  ldr r0, =_sdata
 8007c84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007c88:	200005a8 	.word	0x200005a8
  ldr r2, =_sidata
 8007c8c:	0800f9b8 	.word	0x0800f9b8
  ldr r2, =_sbss
 8007c90:	200005a8 	.word	0x200005a8
  ldr r4, =_ebss
 8007c94:	20002770 	.word	0x20002770

08007c98 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8007c98:	e7fe      	b.n	8007c98 <CAN1_RX1_IRQHandler>
	...

08007c9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007ca0:	4b08      	ldr	r3, [pc, #32]	; (8007cc4 <HAL_Init+0x28>)
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	4a07      	ldr	r2, [pc, #28]	; (8007cc4 <HAL_Init+0x28>)
 8007ca6:	f043 0310 	orr.w	r3, r3, #16
 8007caa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007cac:	2003      	movs	r0, #3
 8007cae:	f000 fd45 	bl	800873c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007cb2:	200f      	movs	r0, #15
 8007cb4:	f000 f808 	bl	8007cc8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007cb8:	f7fe fbbe 	bl	8006438 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007cbc:	2300      	movs	r3, #0
}
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	bd80      	pop	{r7, pc}
 8007cc2:	bf00      	nop
 8007cc4:	40022000 	.word	0x40022000

08007cc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b082      	sub	sp, #8
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007cd0:	4b12      	ldr	r3, [pc, #72]	; (8007d1c <HAL_InitTick+0x54>)
 8007cd2:	681a      	ldr	r2, [r3, #0]
 8007cd4:	4b12      	ldr	r3, [pc, #72]	; (8007d20 <HAL_InitTick+0x58>)
 8007cd6:	781b      	ldrb	r3, [r3, #0]
 8007cd8:	4619      	mov	r1, r3
 8007cda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007cde:	fbb3 f3f1 	udiv	r3, r3, r1
 8007ce2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	f000 fd5d 	bl	80087a6 <HAL_SYSTICK_Config>
 8007cec:	4603      	mov	r3, r0
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d001      	beq.n	8007cf6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8007cf2:	2301      	movs	r3, #1
 8007cf4:	e00e      	b.n	8007d14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2b0f      	cmp	r3, #15
 8007cfa:	d80a      	bhi.n	8007d12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	6879      	ldr	r1, [r7, #4]
 8007d00:	f04f 30ff 	mov.w	r0, #4294967295
 8007d04:	f000 fd25 	bl	8008752 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007d08:	4a06      	ldr	r2, [pc, #24]	; (8007d24 <HAL_InitTick+0x5c>)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007d0e:	2300      	movs	r3, #0
 8007d10:	e000      	b.n	8007d14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8007d12:	2301      	movs	r3, #1
}
 8007d14:	4618      	mov	r0, r3
 8007d16:	3708      	adds	r7, #8
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bd80      	pop	{r7, pc}
 8007d1c:	20000490 	.word	0x20000490
 8007d20:	200004dc 	.word	0x200004dc
 8007d24:	200004d8 	.word	0x200004d8

08007d28 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007d28:	b480      	push	{r7}
 8007d2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007d2c:	4b05      	ldr	r3, [pc, #20]	; (8007d44 <HAL_IncTick+0x1c>)
 8007d2e:	781b      	ldrb	r3, [r3, #0]
 8007d30:	461a      	mov	r2, r3
 8007d32:	4b05      	ldr	r3, [pc, #20]	; (8007d48 <HAL_IncTick+0x20>)
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	4413      	add	r3, r2
 8007d38:	4a03      	ldr	r2, [pc, #12]	; (8007d48 <HAL_IncTick+0x20>)
 8007d3a:	6013      	str	r3, [r2, #0]
}
 8007d3c:	bf00      	nop
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	bc80      	pop	{r7}
 8007d42:	4770      	bx	lr
 8007d44:	200004dc 	.word	0x200004dc
 8007d48:	20002734 	.word	0x20002734

08007d4c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007d4c:	b480      	push	{r7}
 8007d4e:	af00      	add	r7, sp, #0
  return uwTick;
 8007d50:	4b02      	ldr	r3, [pc, #8]	; (8007d5c <HAL_GetTick+0x10>)
 8007d52:	681b      	ldr	r3, [r3, #0]
}
 8007d54:	4618      	mov	r0, r3
 8007d56:	46bd      	mov	sp, r7
 8007d58:	bc80      	pop	{r7}
 8007d5a:	4770      	bx	lr
 8007d5c:	20002734 	.word	0x20002734

08007d60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b084      	sub	sp, #16
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007d68:	f7ff fff0 	bl	8007d4c <HAL_GetTick>
 8007d6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d78:	d005      	beq.n	8007d86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007d7a:	4b0a      	ldr	r3, [pc, #40]	; (8007da4 <HAL_Delay+0x44>)
 8007d7c:	781b      	ldrb	r3, [r3, #0]
 8007d7e:	461a      	mov	r2, r3
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	4413      	add	r3, r2
 8007d84:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007d86:	bf00      	nop
 8007d88:	f7ff ffe0 	bl	8007d4c <HAL_GetTick>
 8007d8c:	4602      	mov	r2, r0
 8007d8e:	68bb      	ldr	r3, [r7, #8]
 8007d90:	1ad3      	subs	r3, r2, r3
 8007d92:	68fa      	ldr	r2, [r7, #12]
 8007d94:	429a      	cmp	r2, r3
 8007d96:	d8f7      	bhi.n	8007d88 <HAL_Delay+0x28>
  {
  }
}
 8007d98:	bf00      	nop
 8007d9a:	bf00      	nop
 8007d9c:	3710      	adds	r7, #16
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	bd80      	pop	{r7, pc}
 8007da2:	bf00      	nop
 8007da4:	200004dc 	.word	0x200004dc

08007da8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b086      	sub	sp, #24
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007db0:	2300      	movs	r3, #0
 8007db2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8007db4:	2300      	movs	r3, #0
 8007db6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8007db8:	2300      	movs	r3, #0
 8007dba:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d101      	bne.n	8007dca <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8007dc6:	2301      	movs	r3, #1
 8007dc8:	e0be      	b.n	8007f48 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	689b      	ldr	r3, [r3, #8]
 8007dce:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d109      	bne.n	8007dec <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2200      	movs	r2, #0
 8007ddc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2200      	movs	r2, #0
 8007de2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8007de6:	6878      	ldr	r0, [r7, #4]
 8007de8:	f7fd fdaa 	bl	8005940 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8007dec:	6878      	ldr	r0, [r7, #4]
 8007dee:	f000 fb8f 	bl	8008510 <ADC_ConversionStop_Disable>
 8007df2:	4603      	mov	r3, r0
 8007df4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dfa:	f003 0310 	and.w	r3, r3, #16
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	f040 8099 	bne.w	8007f36 <HAL_ADC_Init+0x18e>
 8007e04:	7dfb      	ldrb	r3, [r7, #23]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	f040 8095 	bne.w	8007f36 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e10:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8007e14:	f023 0302 	bic.w	r3, r3, #2
 8007e18:	f043 0202 	orr.w	r2, r3, #2
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8007e28:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	7b1b      	ldrb	r3, [r3, #12]
 8007e2e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8007e30:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8007e32:	68ba      	ldr	r2, [r7, #8]
 8007e34:	4313      	orrs	r3, r2
 8007e36:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	689b      	ldr	r3, [r3, #8]
 8007e3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e40:	d003      	beq.n	8007e4a <HAL_ADC_Init+0xa2>
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	689b      	ldr	r3, [r3, #8]
 8007e46:	2b01      	cmp	r3, #1
 8007e48:	d102      	bne.n	8007e50 <HAL_ADC_Init+0xa8>
 8007e4a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007e4e:	e000      	b.n	8007e52 <HAL_ADC_Init+0xaa>
 8007e50:	2300      	movs	r3, #0
 8007e52:	693a      	ldr	r2, [r7, #16]
 8007e54:	4313      	orrs	r3, r2
 8007e56:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	7d1b      	ldrb	r3, [r3, #20]
 8007e5c:	2b01      	cmp	r3, #1
 8007e5e:	d119      	bne.n	8007e94 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	7b1b      	ldrb	r3, [r3, #12]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d109      	bne.n	8007e7c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	699b      	ldr	r3, [r3, #24]
 8007e6c:	3b01      	subs	r3, #1
 8007e6e:	035a      	lsls	r2, r3, #13
 8007e70:	693b      	ldr	r3, [r7, #16]
 8007e72:	4313      	orrs	r3, r2
 8007e74:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007e78:	613b      	str	r3, [r7, #16]
 8007e7a:	e00b      	b.n	8007e94 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e80:	f043 0220 	orr.w	r2, r3, #32
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e8c:	f043 0201 	orr.w	r2, r3, #1
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	685b      	ldr	r3, [r3, #4]
 8007e9a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	693a      	ldr	r2, [r7, #16]
 8007ea4:	430a      	orrs	r2, r1
 8007ea6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	689a      	ldr	r2, [r3, #8]
 8007eae:	4b28      	ldr	r3, [pc, #160]	; (8007f50 <HAL_ADC_Init+0x1a8>)
 8007eb0:	4013      	ands	r3, r2
 8007eb2:	687a      	ldr	r2, [r7, #4]
 8007eb4:	6812      	ldr	r2, [r2, #0]
 8007eb6:	68b9      	ldr	r1, [r7, #8]
 8007eb8:	430b      	orrs	r3, r1
 8007eba:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	689b      	ldr	r3, [r3, #8]
 8007ec0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ec4:	d003      	beq.n	8007ece <HAL_ADC_Init+0x126>
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	689b      	ldr	r3, [r3, #8]
 8007eca:	2b01      	cmp	r3, #1
 8007ecc:	d104      	bne.n	8007ed8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	691b      	ldr	r3, [r3, #16]
 8007ed2:	3b01      	subs	r3, #1
 8007ed4:	051b      	lsls	r3, r3, #20
 8007ed6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ede:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	68fa      	ldr	r2, [r7, #12]
 8007ee8:	430a      	orrs	r2, r1
 8007eea:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	689a      	ldr	r2, [r3, #8]
 8007ef2:	4b18      	ldr	r3, [pc, #96]	; (8007f54 <HAL_ADC_Init+0x1ac>)
 8007ef4:	4013      	ands	r3, r2
 8007ef6:	68ba      	ldr	r2, [r7, #8]
 8007ef8:	429a      	cmp	r2, r3
 8007efa:	d10b      	bne.n	8007f14 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2200      	movs	r2, #0
 8007f00:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f06:	f023 0303 	bic.w	r3, r3, #3
 8007f0a:	f043 0201 	orr.w	r2, r3, #1
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8007f12:	e018      	b.n	8007f46 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f18:	f023 0312 	bic.w	r3, r3, #18
 8007f1c:	f043 0210 	orr.w	r2, r3, #16
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f28:	f043 0201 	orr.w	r2, r3, #1
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8007f30:	2301      	movs	r3, #1
 8007f32:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8007f34:	e007      	b.n	8007f46 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f3a:	f043 0210 	orr.w	r2, r3, #16
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8007f42:	2301      	movs	r3, #1
 8007f44:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8007f46:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f48:	4618      	mov	r0, r3
 8007f4a:	3718      	adds	r7, #24
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	bd80      	pop	{r7, pc}
 8007f50:	ffe1f7fd 	.word	0xffe1f7fd
 8007f54:	ff1f0efe 	.word	0xff1f0efe

08007f58 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b084      	sub	sp, #16
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007f60:	2300      	movs	r3, #0
 8007f62:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007f6a:	2b01      	cmp	r3, #1
 8007f6c:	d101      	bne.n	8007f72 <HAL_ADC_Start_IT+0x1a>
 8007f6e:	2302      	movs	r3, #2
 8007f70:	e0a0      	b.n	80080b4 <HAL_ADC_Start_IT+0x15c>
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2201      	movs	r2, #1
 8007f76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8007f7a:	6878      	ldr	r0, [r7, #4]
 8007f7c:	f000 fa6e 	bl	800845c <ADC_Enable>
 8007f80:	4603      	mov	r3, r0
 8007f82:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8007f84:	7bfb      	ldrb	r3, [r7, #15]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	f040 808f 	bne.w	80080aa <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f90:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007f94:	f023 0301 	bic.w	r3, r3, #1
 8007f98:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	4a45      	ldr	r2, [pc, #276]	; (80080bc <HAL_ADC_Start_IT+0x164>)
 8007fa6:	4293      	cmp	r3, r2
 8007fa8:	d105      	bne.n	8007fb6 <HAL_ADC_Start_IT+0x5e>
 8007faa:	4b45      	ldr	r3, [pc, #276]	; (80080c0 <HAL_ADC_Start_IT+0x168>)
 8007fac:	685b      	ldr	r3, [r3, #4]
 8007fae:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d115      	bne.n	8007fe2 <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fba:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	685b      	ldr	r3, [r3, #4]
 8007fc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d026      	beq.n	800801e <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fd4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007fd8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8007fe0:	e01d      	b.n	800801e <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fe6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	4a33      	ldr	r2, [pc, #204]	; (80080c0 <HAL_ADC_Start_IT+0x168>)
 8007ff4:	4293      	cmp	r3, r2
 8007ff6:	d004      	beq.n	8008002 <HAL_ADC_Start_IT+0xaa>
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	4a2f      	ldr	r2, [pc, #188]	; (80080bc <HAL_ADC_Start_IT+0x164>)
 8007ffe:	4293      	cmp	r3, r2
 8008000:	d10d      	bne.n	800801e <HAL_ADC_Start_IT+0xc6>
 8008002:	4b2f      	ldr	r3, [pc, #188]	; (80080c0 <HAL_ADC_Start_IT+0x168>)
 8008004:	685b      	ldr	r3, [r3, #4]
 8008006:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800800a:	2b00      	cmp	r3, #0
 800800c:	d007      	beq.n	800801e <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008012:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8008016:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008022:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008026:	2b00      	cmp	r3, #0
 8008028:	d006      	beq.n	8008038 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800802e:	f023 0206 	bic.w	r2, r3, #6
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	62da      	str	r2, [r3, #44]	; 0x2c
 8008036:	e002      	b.n	800803e <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2200      	movs	r2, #0
 800803c:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2200      	movs	r2, #0
 8008042:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f06f 0202 	mvn.w	r2, #2
 800804e:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	685a      	ldr	r2, [r3, #4]
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f042 0220 	orr.w	r2, r2, #32
 800805e:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	689b      	ldr	r3, [r3, #8]
 8008066:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800806a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800806e:	d113      	bne.n	8008098 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8008074:	4a11      	ldr	r2, [pc, #68]	; (80080bc <HAL_ADC_Start_IT+0x164>)
 8008076:	4293      	cmp	r3, r2
 8008078:	d105      	bne.n	8008086 <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800807a:	4b11      	ldr	r3, [pc, #68]	; (80080c0 <HAL_ADC_Start_IT+0x168>)
 800807c:	685b      	ldr	r3, [r3, #4]
 800807e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8008082:	2b00      	cmp	r3, #0
 8008084:	d108      	bne.n	8008098 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	689a      	ldr	r2, [r3, #8]
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8008094:	609a      	str	r2, [r3, #8]
 8008096:	e00c      	b.n	80080b2 <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	689a      	ldr	r2, [r3, #8]
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80080a6:	609a      	str	r2, [r3, #8]
 80080a8:	e003      	b.n	80080b2 <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2200      	movs	r2, #0
 80080ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 80080b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80080b4:	4618      	mov	r0, r3
 80080b6:	3710      	adds	r7, #16
 80080b8:	46bd      	mov	sp, r7
 80080ba:	bd80      	pop	{r7, pc}
 80080bc:	40012800 	.word	0x40012800
 80080c0:	40012400 	.word	0x40012400

080080c4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80080c4:	b480      	push	{r7}
 80080c6:	b083      	sub	sp, #12
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80080d2:	4618      	mov	r0, r3
 80080d4:	370c      	adds	r7, #12
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bc80      	pop	{r7}
 80080da:	4770      	bx	lr

080080dc <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b084      	sub	sp, #16
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	685b      	ldr	r3, [r3, #4]
 80080f2:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 80080f4:	68bb      	ldr	r3, [r7, #8]
 80080f6:	f003 0320 	and.w	r3, r3, #32
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d03e      	beq.n	800817c <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	f003 0302 	and.w	r3, r3, #2
 8008104:	2b00      	cmp	r3, #0
 8008106:	d039      	beq.n	800817c <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800810c:	f003 0310 	and.w	r3, r3, #16
 8008110:	2b00      	cmp	r3, #0
 8008112:	d105      	bne.n	8008120 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008118:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	689b      	ldr	r3, [r3, #8]
 8008126:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800812a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800812e:	d11d      	bne.n	800816c <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8008134:	2b00      	cmp	r3, #0
 8008136:	d119      	bne.n	800816c <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	685a      	ldr	r2, [r3, #4]
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	f022 0220 	bic.w	r2, r2, #32
 8008146:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800814c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008158:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800815c:	2b00      	cmp	r3, #0
 800815e:	d105      	bne.n	800816c <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008164:	f043 0201 	orr.w	r2, r3, #1
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800816c:	6878      	ldr	r0, [r7, #4]
 800816e:	f7fd ffb1 	bl	80060d4 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f06f 0212 	mvn.w	r2, #18
 800817a:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 800817c:	68bb      	ldr	r3, [r7, #8]
 800817e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008182:	2b00      	cmp	r3, #0
 8008184:	d04d      	beq.n	8008222 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	f003 0304 	and.w	r3, r3, #4
 800818c:	2b00      	cmp	r3, #0
 800818e:	d048      	beq.n	8008222 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008194:	f003 0310 	and.w	r3, r3, #16
 8008198:	2b00      	cmp	r3, #0
 800819a:	d105      	bne.n	80081a8 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081a0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	689b      	ldr	r3, [r3, #8]
 80081ae:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80081b2:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 80081b6:	d012      	beq.n	80081de <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	685b      	ldr	r3, [r3, #4]
 80081be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d125      	bne.n	8008212 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	689b      	ldr	r3, [r3, #8]
 80081cc:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80081d0:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80081d4:	d11d      	bne.n	8008212 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d119      	bne.n	8008212 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	685a      	ldr	r2, [r3, #4]
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80081ec:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008202:	2b00      	cmp	r3, #0
 8008204:	d105      	bne.n	8008212 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800820a:	f043 0201 	orr.w	r2, r3, #1
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	f000 f9bd 	bl	8008592 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f06f 020c 	mvn.w	r2, #12
 8008220:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8008222:	68bb      	ldr	r3, [r7, #8]
 8008224:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008228:	2b00      	cmp	r3, #0
 800822a:	d012      	beq.n	8008252 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	f003 0301 	and.w	r3, r3, #1
 8008232:	2b00      	cmp	r3, #0
 8008234:	d00d      	beq.n	8008252 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800823a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8008242:	6878      	ldr	r0, [r7, #4]
 8008244:	f000 f809 	bl	800825a <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	f06f 0201 	mvn.w	r2, #1
 8008250:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8008252:	bf00      	nop
 8008254:	3710      	adds	r7, #16
 8008256:	46bd      	mov	sp, r7
 8008258:	bd80      	pop	{r7, pc}

0800825a <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800825a:	b480      	push	{r7}
 800825c:	b083      	sub	sp, #12
 800825e:	af00      	add	r7, sp, #0
 8008260:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8008262:	bf00      	nop
 8008264:	370c      	adds	r7, #12
 8008266:	46bd      	mov	sp, r7
 8008268:	bc80      	pop	{r7}
 800826a:	4770      	bx	lr

0800826c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800826c:	b480      	push	{r7}
 800826e:	b085      	sub	sp, #20
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
 8008274:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008276:	2300      	movs	r3, #0
 8008278:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800827a:	2300      	movs	r3, #0
 800827c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008284:	2b01      	cmp	r3, #1
 8008286:	d101      	bne.n	800828c <HAL_ADC_ConfigChannel+0x20>
 8008288:	2302      	movs	r3, #2
 800828a:	e0dc      	b.n	8008446 <HAL_ADC_ConfigChannel+0x1da>
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2201      	movs	r2, #1
 8008290:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	685b      	ldr	r3, [r3, #4]
 8008298:	2b06      	cmp	r3, #6
 800829a:	d81c      	bhi.n	80082d6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	685a      	ldr	r2, [r3, #4]
 80082a6:	4613      	mov	r3, r2
 80082a8:	009b      	lsls	r3, r3, #2
 80082aa:	4413      	add	r3, r2
 80082ac:	3b05      	subs	r3, #5
 80082ae:	221f      	movs	r2, #31
 80082b0:	fa02 f303 	lsl.w	r3, r2, r3
 80082b4:	43db      	mvns	r3, r3
 80082b6:	4019      	ands	r1, r3
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	6818      	ldr	r0, [r3, #0]
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	685a      	ldr	r2, [r3, #4]
 80082c0:	4613      	mov	r3, r2
 80082c2:	009b      	lsls	r3, r3, #2
 80082c4:	4413      	add	r3, r2
 80082c6:	3b05      	subs	r3, #5
 80082c8:	fa00 f203 	lsl.w	r2, r0, r3
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	430a      	orrs	r2, r1
 80082d2:	635a      	str	r2, [r3, #52]	; 0x34
 80082d4:	e03c      	b.n	8008350 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	685b      	ldr	r3, [r3, #4]
 80082da:	2b0c      	cmp	r3, #12
 80082dc:	d81c      	bhi.n	8008318 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	685a      	ldr	r2, [r3, #4]
 80082e8:	4613      	mov	r3, r2
 80082ea:	009b      	lsls	r3, r3, #2
 80082ec:	4413      	add	r3, r2
 80082ee:	3b23      	subs	r3, #35	; 0x23
 80082f0:	221f      	movs	r2, #31
 80082f2:	fa02 f303 	lsl.w	r3, r2, r3
 80082f6:	43db      	mvns	r3, r3
 80082f8:	4019      	ands	r1, r3
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	6818      	ldr	r0, [r3, #0]
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	685a      	ldr	r2, [r3, #4]
 8008302:	4613      	mov	r3, r2
 8008304:	009b      	lsls	r3, r3, #2
 8008306:	4413      	add	r3, r2
 8008308:	3b23      	subs	r3, #35	; 0x23
 800830a:	fa00 f203 	lsl.w	r2, r0, r3
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	430a      	orrs	r2, r1
 8008314:	631a      	str	r2, [r3, #48]	; 0x30
 8008316:	e01b      	b.n	8008350 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	685a      	ldr	r2, [r3, #4]
 8008322:	4613      	mov	r3, r2
 8008324:	009b      	lsls	r3, r3, #2
 8008326:	4413      	add	r3, r2
 8008328:	3b41      	subs	r3, #65	; 0x41
 800832a:	221f      	movs	r2, #31
 800832c:	fa02 f303 	lsl.w	r3, r2, r3
 8008330:	43db      	mvns	r3, r3
 8008332:	4019      	ands	r1, r3
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	6818      	ldr	r0, [r3, #0]
 8008338:	683b      	ldr	r3, [r7, #0]
 800833a:	685a      	ldr	r2, [r3, #4]
 800833c:	4613      	mov	r3, r2
 800833e:	009b      	lsls	r3, r3, #2
 8008340:	4413      	add	r3, r2
 8008342:	3b41      	subs	r3, #65	; 0x41
 8008344:	fa00 f203 	lsl.w	r2, r0, r3
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	430a      	orrs	r2, r1
 800834e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	2b09      	cmp	r3, #9
 8008356:	d91c      	bls.n	8008392 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	68d9      	ldr	r1, [r3, #12]
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	681a      	ldr	r2, [r3, #0]
 8008362:	4613      	mov	r3, r2
 8008364:	005b      	lsls	r3, r3, #1
 8008366:	4413      	add	r3, r2
 8008368:	3b1e      	subs	r3, #30
 800836a:	2207      	movs	r2, #7
 800836c:	fa02 f303 	lsl.w	r3, r2, r3
 8008370:	43db      	mvns	r3, r3
 8008372:	4019      	ands	r1, r3
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	6898      	ldr	r0, [r3, #8]
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	681a      	ldr	r2, [r3, #0]
 800837c:	4613      	mov	r3, r2
 800837e:	005b      	lsls	r3, r3, #1
 8008380:	4413      	add	r3, r2
 8008382:	3b1e      	subs	r3, #30
 8008384:	fa00 f203 	lsl.w	r2, r0, r3
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	430a      	orrs	r2, r1
 800838e:	60da      	str	r2, [r3, #12]
 8008390:	e019      	b.n	80083c6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	6919      	ldr	r1, [r3, #16]
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	681a      	ldr	r2, [r3, #0]
 800839c:	4613      	mov	r3, r2
 800839e:	005b      	lsls	r3, r3, #1
 80083a0:	4413      	add	r3, r2
 80083a2:	2207      	movs	r2, #7
 80083a4:	fa02 f303 	lsl.w	r3, r2, r3
 80083a8:	43db      	mvns	r3, r3
 80083aa:	4019      	ands	r1, r3
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	6898      	ldr	r0, [r3, #8]
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	681a      	ldr	r2, [r3, #0]
 80083b4:	4613      	mov	r3, r2
 80083b6:	005b      	lsls	r3, r3, #1
 80083b8:	4413      	add	r3, r2
 80083ba:	fa00 f203 	lsl.w	r2, r0, r3
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	430a      	orrs	r2, r1
 80083c4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	2b10      	cmp	r3, #16
 80083cc:	d003      	beq.n	80083d6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80083d2:	2b11      	cmp	r3, #17
 80083d4:	d132      	bne.n	800843c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	4a1d      	ldr	r2, [pc, #116]	; (8008450 <HAL_ADC_ConfigChannel+0x1e4>)
 80083dc:	4293      	cmp	r3, r2
 80083de:	d125      	bne.n	800842c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	689b      	ldr	r3, [r3, #8]
 80083e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d126      	bne.n	800843c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	689a      	ldr	r2, [r3, #8]
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80083fc:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	2b10      	cmp	r3, #16
 8008404:	d11a      	bne.n	800843c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8008406:	4b13      	ldr	r3, [pc, #76]	; (8008454 <HAL_ADC_ConfigChannel+0x1e8>)
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	4a13      	ldr	r2, [pc, #76]	; (8008458 <HAL_ADC_ConfigChannel+0x1ec>)
 800840c:	fba2 2303 	umull	r2, r3, r2, r3
 8008410:	0c9a      	lsrs	r2, r3, #18
 8008412:	4613      	mov	r3, r2
 8008414:	009b      	lsls	r3, r3, #2
 8008416:	4413      	add	r3, r2
 8008418:	005b      	lsls	r3, r3, #1
 800841a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800841c:	e002      	b.n	8008424 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800841e:	68bb      	ldr	r3, [r7, #8]
 8008420:	3b01      	subs	r3, #1
 8008422:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8008424:	68bb      	ldr	r3, [r7, #8]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d1f9      	bne.n	800841e <HAL_ADC_ConfigChannel+0x1b2>
 800842a:	e007      	b.n	800843c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008430:	f043 0220 	orr.w	r2, r3, #32
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8008438:	2301      	movs	r3, #1
 800843a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	2200      	movs	r2, #0
 8008440:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8008444:	7bfb      	ldrb	r3, [r7, #15]
}
 8008446:	4618      	mov	r0, r3
 8008448:	3714      	adds	r7, #20
 800844a:	46bd      	mov	sp, r7
 800844c:	bc80      	pop	{r7}
 800844e:	4770      	bx	lr
 8008450:	40012400 	.word	0x40012400
 8008454:	20000490 	.word	0x20000490
 8008458:	431bde83 	.word	0x431bde83

0800845c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800845c:	b580      	push	{r7, lr}
 800845e:	b084      	sub	sp, #16
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008464:	2300      	movs	r3, #0
 8008466:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8008468:	2300      	movs	r3, #0
 800846a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	689b      	ldr	r3, [r3, #8]
 8008472:	f003 0301 	and.w	r3, r3, #1
 8008476:	2b01      	cmp	r3, #1
 8008478:	d040      	beq.n	80084fc <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	689a      	ldr	r2, [r3, #8]
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f042 0201 	orr.w	r2, r2, #1
 8008488:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800848a:	4b1f      	ldr	r3, [pc, #124]	; (8008508 <ADC_Enable+0xac>)
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	4a1f      	ldr	r2, [pc, #124]	; (800850c <ADC_Enable+0xb0>)
 8008490:	fba2 2303 	umull	r2, r3, r2, r3
 8008494:	0c9b      	lsrs	r3, r3, #18
 8008496:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8008498:	e002      	b.n	80084a0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800849a:	68bb      	ldr	r3, [r7, #8]
 800849c:	3b01      	subs	r3, #1
 800849e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80084a0:	68bb      	ldr	r3, [r7, #8]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d1f9      	bne.n	800849a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80084a6:	f7ff fc51 	bl	8007d4c <HAL_GetTick>
 80084aa:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80084ac:	e01f      	b.n	80084ee <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80084ae:	f7ff fc4d 	bl	8007d4c <HAL_GetTick>
 80084b2:	4602      	mov	r2, r0
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	1ad3      	subs	r3, r2, r3
 80084b8:	2b02      	cmp	r3, #2
 80084ba:	d918      	bls.n	80084ee <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	689b      	ldr	r3, [r3, #8]
 80084c2:	f003 0301 	and.w	r3, r3, #1
 80084c6:	2b01      	cmp	r3, #1
 80084c8:	d011      	beq.n	80084ee <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084ce:	f043 0210 	orr.w	r2, r3, #16
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084da:	f043 0201 	orr.w	r2, r3, #1
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	2200      	movs	r2, #0
 80084e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80084ea:	2301      	movs	r3, #1
 80084ec:	e007      	b.n	80084fe <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	689b      	ldr	r3, [r3, #8]
 80084f4:	f003 0301 	and.w	r3, r3, #1
 80084f8:	2b01      	cmp	r3, #1
 80084fa:	d1d8      	bne.n	80084ae <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80084fc:	2300      	movs	r3, #0
}
 80084fe:	4618      	mov	r0, r3
 8008500:	3710      	adds	r7, #16
 8008502:	46bd      	mov	sp, r7
 8008504:	bd80      	pop	{r7, pc}
 8008506:	bf00      	nop
 8008508:	20000490 	.word	0x20000490
 800850c:	431bde83 	.word	0x431bde83

08008510 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b084      	sub	sp, #16
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008518:	2300      	movs	r3, #0
 800851a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	689b      	ldr	r3, [r3, #8]
 8008522:	f003 0301 	and.w	r3, r3, #1
 8008526:	2b01      	cmp	r3, #1
 8008528:	d12e      	bne.n	8008588 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	689a      	ldr	r2, [r3, #8]
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	f022 0201 	bic.w	r2, r2, #1
 8008538:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800853a:	f7ff fc07 	bl	8007d4c <HAL_GetTick>
 800853e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8008540:	e01b      	b.n	800857a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8008542:	f7ff fc03 	bl	8007d4c <HAL_GetTick>
 8008546:	4602      	mov	r2, r0
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	1ad3      	subs	r3, r2, r3
 800854c:	2b02      	cmp	r3, #2
 800854e:	d914      	bls.n	800857a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	689b      	ldr	r3, [r3, #8]
 8008556:	f003 0301 	and.w	r3, r3, #1
 800855a:	2b01      	cmp	r3, #1
 800855c:	d10d      	bne.n	800857a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008562:	f043 0210 	orr.w	r2, r3, #16
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800856e:	f043 0201 	orr.w	r2, r3, #1
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8008576:	2301      	movs	r3, #1
 8008578:	e007      	b.n	800858a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	689b      	ldr	r3, [r3, #8]
 8008580:	f003 0301 	and.w	r3, r3, #1
 8008584:	2b01      	cmp	r3, #1
 8008586:	d0dc      	beq.n	8008542 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8008588:	2300      	movs	r3, #0
}
 800858a:	4618      	mov	r0, r3
 800858c:	3710      	adds	r7, #16
 800858e:	46bd      	mov	sp, r7
 8008590:	bd80      	pop	{r7, pc}

08008592 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8008592:	b480      	push	{r7}
 8008594:	b083      	sub	sp, #12
 8008596:	af00      	add	r7, sp, #0
 8008598:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 800859a:	bf00      	nop
 800859c:	370c      	adds	r7, #12
 800859e:	46bd      	mov	sp, r7
 80085a0:	bc80      	pop	{r7}
 80085a2:	4770      	bx	lr

080085a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80085a4:	b480      	push	{r7}
 80085a6:	b085      	sub	sp, #20
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	f003 0307 	and.w	r3, r3, #7
 80085b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80085b4:	4b0c      	ldr	r3, [pc, #48]	; (80085e8 <__NVIC_SetPriorityGrouping+0x44>)
 80085b6:	68db      	ldr	r3, [r3, #12]
 80085b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80085ba:	68ba      	ldr	r2, [r7, #8]
 80085bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80085c0:	4013      	ands	r3, r2
 80085c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80085c8:	68bb      	ldr	r3, [r7, #8]
 80085ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80085cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80085d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80085d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80085d6:	4a04      	ldr	r2, [pc, #16]	; (80085e8 <__NVIC_SetPriorityGrouping+0x44>)
 80085d8:	68bb      	ldr	r3, [r7, #8]
 80085da:	60d3      	str	r3, [r2, #12]
}
 80085dc:	bf00      	nop
 80085de:	3714      	adds	r7, #20
 80085e0:	46bd      	mov	sp, r7
 80085e2:	bc80      	pop	{r7}
 80085e4:	4770      	bx	lr
 80085e6:	bf00      	nop
 80085e8:	e000ed00 	.word	0xe000ed00

080085ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80085ec:	b480      	push	{r7}
 80085ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80085f0:	4b04      	ldr	r3, [pc, #16]	; (8008604 <__NVIC_GetPriorityGrouping+0x18>)
 80085f2:	68db      	ldr	r3, [r3, #12]
 80085f4:	0a1b      	lsrs	r3, r3, #8
 80085f6:	f003 0307 	and.w	r3, r3, #7
}
 80085fa:	4618      	mov	r0, r3
 80085fc:	46bd      	mov	sp, r7
 80085fe:	bc80      	pop	{r7}
 8008600:	4770      	bx	lr
 8008602:	bf00      	nop
 8008604:	e000ed00 	.word	0xe000ed00

08008608 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008608:	b480      	push	{r7}
 800860a:	b083      	sub	sp, #12
 800860c:	af00      	add	r7, sp, #0
 800860e:	4603      	mov	r3, r0
 8008610:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008616:	2b00      	cmp	r3, #0
 8008618:	db0b      	blt.n	8008632 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800861a:	79fb      	ldrb	r3, [r7, #7]
 800861c:	f003 021f 	and.w	r2, r3, #31
 8008620:	4906      	ldr	r1, [pc, #24]	; (800863c <__NVIC_EnableIRQ+0x34>)
 8008622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008626:	095b      	lsrs	r3, r3, #5
 8008628:	2001      	movs	r0, #1
 800862a:	fa00 f202 	lsl.w	r2, r0, r2
 800862e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8008632:	bf00      	nop
 8008634:	370c      	adds	r7, #12
 8008636:	46bd      	mov	sp, r7
 8008638:	bc80      	pop	{r7}
 800863a:	4770      	bx	lr
 800863c:	e000e100 	.word	0xe000e100

08008640 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008640:	b480      	push	{r7}
 8008642:	b083      	sub	sp, #12
 8008644:	af00      	add	r7, sp, #0
 8008646:	4603      	mov	r3, r0
 8008648:	6039      	str	r1, [r7, #0]
 800864a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800864c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008650:	2b00      	cmp	r3, #0
 8008652:	db0a      	blt.n	800866a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008654:	683b      	ldr	r3, [r7, #0]
 8008656:	b2da      	uxtb	r2, r3
 8008658:	490c      	ldr	r1, [pc, #48]	; (800868c <__NVIC_SetPriority+0x4c>)
 800865a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800865e:	0112      	lsls	r2, r2, #4
 8008660:	b2d2      	uxtb	r2, r2
 8008662:	440b      	add	r3, r1
 8008664:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008668:	e00a      	b.n	8008680 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800866a:	683b      	ldr	r3, [r7, #0]
 800866c:	b2da      	uxtb	r2, r3
 800866e:	4908      	ldr	r1, [pc, #32]	; (8008690 <__NVIC_SetPriority+0x50>)
 8008670:	79fb      	ldrb	r3, [r7, #7]
 8008672:	f003 030f 	and.w	r3, r3, #15
 8008676:	3b04      	subs	r3, #4
 8008678:	0112      	lsls	r2, r2, #4
 800867a:	b2d2      	uxtb	r2, r2
 800867c:	440b      	add	r3, r1
 800867e:	761a      	strb	r2, [r3, #24]
}
 8008680:	bf00      	nop
 8008682:	370c      	adds	r7, #12
 8008684:	46bd      	mov	sp, r7
 8008686:	bc80      	pop	{r7}
 8008688:	4770      	bx	lr
 800868a:	bf00      	nop
 800868c:	e000e100 	.word	0xe000e100
 8008690:	e000ed00 	.word	0xe000ed00

08008694 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008694:	b480      	push	{r7}
 8008696:	b089      	sub	sp, #36	; 0x24
 8008698:	af00      	add	r7, sp, #0
 800869a:	60f8      	str	r0, [r7, #12]
 800869c:	60b9      	str	r1, [r7, #8]
 800869e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	f003 0307 	and.w	r3, r3, #7
 80086a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80086a8:	69fb      	ldr	r3, [r7, #28]
 80086aa:	f1c3 0307 	rsb	r3, r3, #7
 80086ae:	2b04      	cmp	r3, #4
 80086b0:	bf28      	it	cs
 80086b2:	2304      	movcs	r3, #4
 80086b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80086b6:	69fb      	ldr	r3, [r7, #28]
 80086b8:	3304      	adds	r3, #4
 80086ba:	2b06      	cmp	r3, #6
 80086bc:	d902      	bls.n	80086c4 <NVIC_EncodePriority+0x30>
 80086be:	69fb      	ldr	r3, [r7, #28]
 80086c0:	3b03      	subs	r3, #3
 80086c2:	e000      	b.n	80086c6 <NVIC_EncodePriority+0x32>
 80086c4:	2300      	movs	r3, #0
 80086c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80086c8:	f04f 32ff 	mov.w	r2, #4294967295
 80086cc:	69bb      	ldr	r3, [r7, #24]
 80086ce:	fa02 f303 	lsl.w	r3, r2, r3
 80086d2:	43da      	mvns	r2, r3
 80086d4:	68bb      	ldr	r3, [r7, #8]
 80086d6:	401a      	ands	r2, r3
 80086d8:	697b      	ldr	r3, [r7, #20]
 80086da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80086dc:	f04f 31ff 	mov.w	r1, #4294967295
 80086e0:	697b      	ldr	r3, [r7, #20]
 80086e2:	fa01 f303 	lsl.w	r3, r1, r3
 80086e6:	43d9      	mvns	r1, r3
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80086ec:	4313      	orrs	r3, r2
         );
}
 80086ee:	4618      	mov	r0, r3
 80086f0:	3724      	adds	r7, #36	; 0x24
 80086f2:	46bd      	mov	sp, r7
 80086f4:	bc80      	pop	{r7}
 80086f6:	4770      	bx	lr

080086f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b082      	sub	sp, #8
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	3b01      	subs	r3, #1
 8008704:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008708:	d301      	bcc.n	800870e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800870a:	2301      	movs	r3, #1
 800870c:	e00f      	b.n	800872e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800870e:	4a0a      	ldr	r2, [pc, #40]	; (8008738 <SysTick_Config+0x40>)
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	3b01      	subs	r3, #1
 8008714:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008716:	210f      	movs	r1, #15
 8008718:	f04f 30ff 	mov.w	r0, #4294967295
 800871c:	f7ff ff90 	bl	8008640 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008720:	4b05      	ldr	r3, [pc, #20]	; (8008738 <SysTick_Config+0x40>)
 8008722:	2200      	movs	r2, #0
 8008724:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008726:	4b04      	ldr	r3, [pc, #16]	; (8008738 <SysTick_Config+0x40>)
 8008728:	2207      	movs	r2, #7
 800872a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800872c:	2300      	movs	r3, #0
}
 800872e:	4618      	mov	r0, r3
 8008730:	3708      	adds	r7, #8
 8008732:	46bd      	mov	sp, r7
 8008734:	bd80      	pop	{r7, pc}
 8008736:	bf00      	nop
 8008738:	e000e010 	.word	0xe000e010

0800873c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800873c:	b580      	push	{r7, lr}
 800873e:	b082      	sub	sp, #8
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008744:	6878      	ldr	r0, [r7, #4]
 8008746:	f7ff ff2d 	bl	80085a4 <__NVIC_SetPriorityGrouping>
}
 800874a:	bf00      	nop
 800874c:	3708      	adds	r7, #8
 800874e:	46bd      	mov	sp, r7
 8008750:	bd80      	pop	{r7, pc}

08008752 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008752:	b580      	push	{r7, lr}
 8008754:	b086      	sub	sp, #24
 8008756:	af00      	add	r7, sp, #0
 8008758:	4603      	mov	r3, r0
 800875a:	60b9      	str	r1, [r7, #8]
 800875c:	607a      	str	r2, [r7, #4]
 800875e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008760:	2300      	movs	r3, #0
 8008762:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008764:	f7ff ff42 	bl	80085ec <__NVIC_GetPriorityGrouping>
 8008768:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800876a:	687a      	ldr	r2, [r7, #4]
 800876c:	68b9      	ldr	r1, [r7, #8]
 800876e:	6978      	ldr	r0, [r7, #20]
 8008770:	f7ff ff90 	bl	8008694 <NVIC_EncodePriority>
 8008774:	4602      	mov	r2, r0
 8008776:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800877a:	4611      	mov	r1, r2
 800877c:	4618      	mov	r0, r3
 800877e:	f7ff ff5f 	bl	8008640 <__NVIC_SetPriority>
}
 8008782:	bf00      	nop
 8008784:	3718      	adds	r7, #24
 8008786:	46bd      	mov	sp, r7
 8008788:	bd80      	pop	{r7, pc}

0800878a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800878a:	b580      	push	{r7, lr}
 800878c:	b082      	sub	sp, #8
 800878e:	af00      	add	r7, sp, #0
 8008790:	4603      	mov	r3, r0
 8008792:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008794:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008798:	4618      	mov	r0, r3
 800879a:	f7ff ff35 	bl	8008608 <__NVIC_EnableIRQ>
}
 800879e:	bf00      	nop
 80087a0:	3708      	adds	r7, #8
 80087a2:	46bd      	mov	sp, r7
 80087a4:	bd80      	pop	{r7, pc}

080087a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80087a6:	b580      	push	{r7, lr}
 80087a8:	b082      	sub	sp, #8
 80087aa:	af00      	add	r7, sp, #0
 80087ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f7ff ffa2 	bl	80086f8 <SysTick_Config>
 80087b4:	4603      	mov	r3, r0
}
 80087b6:	4618      	mov	r0, r3
 80087b8:	3708      	adds	r7, #8
 80087ba:	46bd      	mov	sp, r7
 80087bc:	bd80      	pop	{r7, pc}
	...

080087c0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80087c0:	b480      	push	{r7}
 80087c2:	b085      	sub	sp, #20
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80087c8:	2300      	movs	r3, #0
 80087ca:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d101      	bne.n	80087d6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80087d2:	2301      	movs	r3, #1
 80087d4:	e043      	b.n	800885e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	461a      	mov	r2, r3
 80087dc:	4b22      	ldr	r3, [pc, #136]	; (8008868 <HAL_DMA_Init+0xa8>)
 80087de:	4413      	add	r3, r2
 80087e0:	4a22      	ldr	r2, [pc, #136]	; (800886c <HAL_DMA_Init+0xac>)
 80087e2:	fba2 2303 	umull	r2, r3, r2, r3
 80087e6:	091b      	lsrs	r3, r3, #4
 80087e8:	009a      	lsls	r2, r3, #2
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	4a1f      	ldr	r2, [pc, #124]	; (8008870 <HAL_DMA_Init+0xb0>)
 80087f2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2202      	movs	r2, #2
 80087f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800880a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800880e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8008818:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	68db      	ldr	r3, [r3, #12]
 800881e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008824:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	695b      	ldr	r3, [r3, #20]
 800882a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008830:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	69db      	ldr	r3, [r3, #28]
 8008836:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8008838:	68fa      	ldr	r2, [r7, #12]
 800883a:	4313      	orrs	r3, r2
 800883c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	68fa      	ldr	r2, [r7, #12]
 8008844:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	2200      	movs	r2, #0
 800884a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2201      	movs	r2, #1
 8008850:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2200      	movs	r2, #0
 8008858:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800885c:	2300      	movs	r3, #0
}
 800885e:	4618      	mov	r0, r3
 8008860:	3714      	adds	r7, #20
 8008862:	46bd      	mov	sp, r7
 8008864:	bc80      	pop	{r7}
 8008866:	4770      	bx	lr
 8008868:	bffdfff8 	.word	0xbffdfff8
 800886c:	cccccccd 	.word	0xcccccccd
 8008870:	40020000 	.word	0x40020000

08008874 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b086      	sub	sp, #24
 8008878:	af00      	add	r7, sp, #0
 800887a:	60f8      	str	r0, [r7, #12]
 800887c:	60b9      	str	r1, [r7, #8]
 800887e:	607a      	str	r2, [r7, #4]
 8008880:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008882:	2300      	movs	r3, #0
 8008884:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	f893 3020 	ldrb.w	r3, [r3, #32]
 800888c:	2b01      	cmp	r3, #1
 800888e:	d101      	bne.n	8008894 <HAL_DMA_Start_IT+0x20>
 8008890:	2302      	movs	r3, #2
 8008892:	e04b      	b.n	800892c <HAL_DMA_Start_IT+0xb8>
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	2201      	movs	r2, #1
 8008898:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80088a2:	b2db      	uxtb	r3, r3
 80088a4:	2b01      	cmp	r3, #1
 80088a6:	d13a      	bne.n	800891e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	2202      	movs	r2, #2
 80088ac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	2200      	movs	r2, #0
 80088b4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	681a      	ldr	r2, [r3, #0]
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	f022 0201 	bic.w	r2, r2, #1
 80088c4:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	687a      	ldr	r2, [r7, #4]
 80088ca:	68b9      	ldr	r1, [r7, #8]
 80088cc:	68f8      	ldr	r0, [r7, #12]
 80088ce:	f000 f9eb 	bl	8008ca8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d008      	beq.n	80088ec <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	681a      	ldr	r2, [r3, #0]
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	f042 020e 	orr.w	r2, r2, #14
 80088e8:	601a      	str	r2, [r3, #0]
 80088ea:	e00f      	b.n	800890c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	681a      	ldr	r2, [r3, #0]
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	f022 0204 	bic.w	r2, r2, #4
 80088fa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	681a      	ldr	r2, [r3, #0]
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	f042 020a 	orr.w	r2, r2, #10
 800890a:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	681a      	ldr	r2, [r3, #0]
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	f042 0201 	orr.w	r2, r2, #1
 800891a:	601a      	str	r2, [r3, #0]
 800891c:	e005      	b.n	800892a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	2200      	movs	r2, #0
 8008922:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8008926:	2302      	movs	r3, #2
 8008928:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800892a:	7dfb      	ldrb	r3, [r7, #23]
}
 800892c:	4618      	mov	r0, r3
 800892e:	3718      	adds	r7, #24
 8008930:	46bd      	mov	sp, r7
 8008932:	bd80      	pop	{r7, pc}

08008934 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008934:	b480      	push	{r7}
 8008936:	b085      	sub	sp, #20
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800893c:	2300      	movs	r3, #0
 800893e:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008946:	b2db      	uxtb	r3, r3
 8008948:	2b02      	cmp	r3, #2
 800894a:	d008      	beq.n	800895e <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2204      	movs	r2, #4
 8008950:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	2200      	movs	r2, #0
 8008956:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800895a:	2301      	movs	r3, #1
 800895c:	e020      	b.n	80089a0 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	681a      	ldr	r2, [r3, #0]
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	f022 020e 	bic.w	r2, r2, #14
 800896c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	681a      	ldr	r2, [r3, #0]
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f022 0201 	bic.w	r2, r2, #1
 800897c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008986:	2101      	movs	r1, #1
 8008988:	fa01 f202 	lsl.w	r2, r1, r2
 800898c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	2201      	movs	r2, #1
 8008992:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	2200      	movs	r2, #0
 800899a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800899e:	7bfb      	ldrb	r3, [r7, #15]
}
 80089a0:	4618      	mov	r0, r3
 80089a2:	3714      	adds	r7, #20
 80089a4:	46bd      	mov	sp, r7
 80089a6:	bc80      	pop	{r7}
 80089a8:	4770      	bx	lr
	...

080089ac <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b084      	sub	sp, #16
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80089b4:	2300      	movs	r3, #0
 80089b6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80089be:	b2db      	uxtb	r3, r3
 80089c0:	2b02      	cmp	r3, #2
 80089c2:	d005      	beq.n	80089d0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2204      	movs	r2, #4
 80089c8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80089ca:	2301      	movs	r3, #1
 80089cc:	73fb      	strb	r3, [r7, #15]
 80089ce:	e051      	b.n	8008a74 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	681a      	ldr	r2, [r3, #0]
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	f022 020e 	bic.w	r2, r2, #14
 80089de:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	681a      	ldr	r2, [r3, #0]
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	f022 0201 	bic.w	r2, r2, #1
 80089ee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	4a22      	ldr	r2, [pc, #136]	; (8008a80 <HAL_DMA_Abort_IT+0xd4>)
 80089f6:	4293      	cmp	r3, r2
 80089f8:	d029      	beq.n	8008a4e <HAL_DMA_Abort_IT+0xa2>
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	4a21      	ldr	r2, [pc, #132]	; (8008a84 <HAL_DMA_Abort_IT+0xd8>)
 8008a00:	4293      	cmp	r3, r2
 8008a02:	d022      	beq.n	8008a4a <HAL_DMA_Abort_IT+0x9e>
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	4a1f      	ldr	r2, [pc, #124]	; (8008a88 <HAL_DMA_Abort_IT+0xdc>)
 8008a0a:	4293      	cmp	r3, r2
 8008a0c:	d01a      	beq.n	8008a44 <HAL_DMA_Abort_IT+0x98>
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	4a1e      	ldr	r2, [pc, #120]	; (8008a8c <HAL_DMA_Abort_IT+0xe0>)
 8008a14:	4293      	cmp	r3, r2
 8008a16:	d012      	beq.n	8008a3e <HAL_DMA_Abort_IT+0x92>
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	4a1c      	ldr	r2, [pc, #112]	; (8008a90 <HAL_DMA_Abort_IT+0xe4>)
 8008a1e:	4293      	cmp	r3, r2
 8008a20:	d00a      	beq.n	8008a38 <HAL_DMA_Abort_IT+0x8c>
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	4a1b      	ldr	r2, [pc, #108]	; (8008a94 <HAL_DMA_Abort_IT+0xe8>)
 8008a28:	4293      	cmp	r3, r2
 8008a2a:	d102      	bne.n	8008a32 <HAL_DMA_Abort_IT+0x86>
 8008a2c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008a30:	e00e      	b.n	8008a50 <HAL_DMA_Abort_IT+0xa4>
 8008a32:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008a36:	e00b      	b.n	8008a50 <HAL_DMA_Abort_IT+0xa4>
 8008a38:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008a3c:	e008      	b.n	8008a50 <HAL_DMA_Abort_IT+0xa4>
 8008a3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008a42:	e005      	b.n	8008a50 <HAL_DMA_Abort_IT+0xa4>
 8008a44:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008a48:	e002      	b.n	8008a50 <HAL_DMA_Abort_IT+0xa4>
 8008a4a:	2310      	movs	r3, #16
 8008a4c:	e000      	b.n	8008a50 <HAL_DMA_Abort_IT+0xa4>
 8008a4e:	2301      	movs	r3, #1
 8008a50:	4a11      	ldr	r2, [pc, #68]	; (8008a98 <HAL_DMA_Abort_IT+0xec>)
 8008a52:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2201      	movs	r2, #1
 8008a58:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2200      	movs	r2, #0
 8008a60:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d003      	beq.n	8008a74 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a70:	6878      	ldr	r0, [r7, #4]
 8008a72:	4798      	blx	r3
    } 
  }
  return status;
 8008a74:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a76:	4618      	mov	r0, r3
 8008a78:	3710      	adds	r7, #16
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	bd80      	pop	{r7, pc}
 8008a7e:	bf00      	nop
 8008a80:	40020008 	.word	0x40020008
 8008a84:	4002001c 	.word	0x4002001c
 8008a88:	40020030 	.word	0x40020030
 8008a8c:	40020044 	.word	0x40020044
 8008a90:	40020058 	.word	0x40020058
 8008a94:	4002006c 	.word	0x4002006c
 8008a98:	40020000 	.word	0x40020000

08008a9c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b084      	sub	sp, #16
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ab8:	2204      	movs	r2, #4
 8008aba:	409a      	lsls	r2, r3
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	4013      	ands	r3, r2
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d04f      	beq.n	8008b64 <HAL_DMA_IRQHandler+0xc8>
 8008ac4:	68bb      	ldr	r3, [r7, #8]
 8008ac6:	f003 0304 	and.w	r3, r3, #4
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d04a      	beq.n	8008b64 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	f003 0320 	and.w	r3, r3, #32
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d107      	bne.n	8008aec <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	681a      	ldr	r2, [r3, #0]
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	f022 0204 	bic.w	r2, r2, #4
 8008aea:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	4a66      	ldr	r2, [pc, #408]	; (8008c8c <HAL_DMA_IRQHandler+0x1f0>)
 8008af2:	4293      	cmp	r3, r2
 8008af4:	d029      	beq.n	8008b4a <HAL_DMA_IRQHandler+0xae>
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	4a65      	ldr	r2, [pc, #404]	; (8008c90 <HAL_DMA_IRQHandler+0x1f4>)
 8008afc:	4293      	cmp	r3, r2
 8008afe:	d022      	beq.n	8008b46 <HAL_DMA_IRQHandler+0xaa>
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	4a63      	ldr	r2, [pc, #396]	; (8008c94 <HAL_DMA_IRQHandler+0x1f8>)
 8008b06:	4293      	cmp	r3, r2
 8008b08:	d01a      	beq.n	8008b40 <HAL_DMA_IRQHandler+0xa4>
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	4a62      	ldr	r2, [pc, #392]	; (8008c98 <HAL_DMA_IRQHandler+0x1fc>)
 8008b10:	4293      	cmp	r3, r2
 8008b12:	d012      	beq.n	8008b3a <HAL_DMA_IRQHandler+0x9e>
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	4a60      	ldr	r2, [pc, #384]	; (8008c9c <HAL_DMA_IRQHandler+0x200>)
 8008b1a:	4293      	cmp	r3, r2
 8008b1c:	d00a      	beq.n	8008b34 <HAL_DMA_IRQHandler+0x98>
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	4a5f      	ldr	r2, [pc, #380]	; (8008ca0 <HAL_DMA_IRQHandler+0x204>)
 8008b24:	4293      	cmp	r3, r2
 8008b26:	d102      	bne.n	8008b2e <HAL_DMA_IRQHandler+0x92>
 8008b28:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008b2c:	e00e      	b.n	8008b4c <HAL_DMA_IRQHandler+0xb0>
 8008b2e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008b32:	e00b      	b.n	8008b4c <HAL_DMA_IRQHandler+0xb0>
 8008b34:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008b38:	e008      	b.n	8008b4c <HAL_DMA_IRQHandler+0xb0>
 8008b3a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008b3e:	e005      	b.n	8008b4c <HAL_DMA_IRQHandler+0xb0>
 8008b40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008b44:	e002      	b.n	8008b4c <HAL_DMA_IRQHandler+0xb0>
 8008b46:	2340      	movs	r3, #64	; 0x40
 8008b48:	e000      	b.n	8008b4c <HAL_DMA_IRQHandler+0xb0>
 8008b4a:	2304      	movs	r3, #4
 8008b4c:	4a55      	ldr	r2, [pc, #340]	; (8008ca4 <HAL_DMA_IRQHandler+0x208>)
 8008b4e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	f000 8094 	beq.w	8008c82 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b5e:	6878      	ldr	r0, [r7, #4]
 8008b60:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8008b62:	e08e      	b.n	8008c82 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b68:	2202      	movs	r2, #2
 8008b6a:	409a      	lsls	r2, r3
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	4013      	ands	r3, r2
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d056      	beq.n	8008c22 <HAL_DMA_IRQHandler+0x186>
 8008b74:	68bb      	ldr	r3, [r7, #8]
 8008b76:	f003 0302 	and.w	r3, r3, #2
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d051      	beq.n	8008c22 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	f003 0320 	and.w	r3, r3, #32
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d10b      	bne.n	8008ba4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	681a      	ldr	r2, [r3, #0]
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	f022 020a 	bic.w	r2, r2, #10
 8008b9a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2201      	movs	r2, #1
 8008ba0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	4a38      	ldr	r2, [pc, #224]	; (8008c8c <HAL_DMA_IRQHandler+0x1f0>)
 8008baa:	4293      	cmp	r3, r2
 8008bac:	d029      	beq.n	8008c02 <HAL_DMA_IRQHandler+0x166>
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	4a37      	ldr	r2, [pc, #220]	; (8008c90 <HAL_DMA_IRQHandler+0x1f4>)
 8008bb4:	4293      	cmp	r3, r2
 8008bb6:	d022      	beq.n	8008bfe <HAL_DMA_IRQHandler+0x162>
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	4a35      	ldr	r2, [pc, #212]	; (8008c94 <HAL_DMA_IRQHandler+0x1f8>)
 8008bbe:	4293      	cmp	r3, r2
 8008bc0:	d01a      	beq.n	8008bf8 <HAL_DMA_IRQHandler+0x15c>
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	4a34      	ldr	r2, [pc, #208]	; (8008c98 <HAL_DMA_IRQHandler+0x1fc>)
 8008bc8:	4293      	cmp	r3, r2
 8008bca:	d012      	beq.n	8008bf2 <HAL_DMA_IRQHandler+0x156>
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	4a32      	ldr	r2, [pc, #200]	; (8008c9c <HAL_DMA_IRQHandler+0x200>)
 8008bd2:	4293      	cmp	r3, r2
 8008bd4:	d00a      	beq.n	8008bec <HAL_DMA_IRQHandler+0x150>
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	4a31      	ldr	r2, [pc, #196]	; (8008ca0 <HAL_DMA_IRQHandler+0x204>)
 8008bdc:	4293      	cmp	r3, r2
 8008bde:	d102      	bne.n	8008be6 <HAL_DMA_IRQHandler+0x14a>
 8008be0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008be4:	e00e      	b.n	8008c04 <HAL_DMA_IRQHandler+0x168>
 8008be6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008bea:	e00b      	b.n	8008c04 <HAL_DMA_IRQHandler+0x168>
 8008bec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008bf0:	e008      	b.n	8008c04 <HAL_DMA_IRQHandler+0x168>
 8008bf2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008bf6:	e005      	b.n	8008c04 <HAL_DMA_IRQHandler+0x168>
 8008bf8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008bfc:	e002      	b.n	8008c04 <HAL_DMA_IRQHandler+0x168>
 8008bfe:	2320      	movs	r3, #32
 8008c00:	e000      	b.n	8008c04 <HAL_DMA_IRQHandler+0x168>
 8008c02:	2302      	movs	r3, #2
 8008c04:	4a27      	ldr	r2, [pc, #156]	; (8008ca4 <HAL_DMA_IRQHandler+0x208>)
 8008c06:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d034      	beq.n	8008c82 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c1c:	6878      	ldr	r0, [r7, #4]
 8008c1e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8008c20:	e02f      	b.n	8008c82 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c26:	2208      	movs	r2, #8
 8008c28:	409a      	lsls	r2, r3
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	4013      	ands	r3, r2
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d028      	beq.n	8008c84 <HAL_DMA_IRQHandler+0x1e8>
 8008c32:	68bb      	ldr	r3, [r7, #8]
 8008c34:	f003 0308 	and.w	r3, r3, #8
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d023      	beq.n	8008c84 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	681a      	ldr	r2, [r3, #0]
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f022 020e 	bic.w	r2, r2, #14
 8008c4a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c54:	2101      	movs	r1, #1
 8008c56:	fa01 f202 	lsl.w	r2, r1, r2
 8008c5a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2201      	movs	r2, #1
 8008c60:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	2201      	movs	r2, #1
 8008c66:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d004      	beq.n	8008c84 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c7e:	6878      	ldr	r0, [r7, #4]
 8008c80:	4798      	blx	r3
    }
  }
  return;
 8008c82:	bf00      	nop
 8008c84:	bf00      	nop
}
 8008c86:	3710      	adds	r7, #16
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	bd80      	pop	{r7, pc}
 8008c8c:	40020008 	.word	0x40020008
 8008c90:	4002001c 	.word	0x4002001c
 8008c94:	40020030 	.word	0x40020030
 8008c98:	40020044 	.word	0x40020044
 8008c9c:	40020058 	.word	0x40020058
 8008ca0:	4002006c 	.word	0x4002006c
 8008ca4:	40020000 	.word	0x40020000

08008ca8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008ca8:	b480      	push	{r7}
 8008caa:	b085      	sub	sp, #20
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	60f8      	str	r0, [r7, #12]
 8008cb0:	60b9      	str	r1, [r7, #8]
 8008cb2:	607a      	str	r2, [r7, #4]
 8008cb4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cbe:	2101      	movs	r1, #1
 8008cc0:	fa01 f202 	lsl.w	r2, r1, r2
 8008cc4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	683a      	ldr	r2, [r7, #0]
 8008ccc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	685b      	ldr	r3, [r3, #4]
 8008cd2:	2b10      	cmp	r3, #16
 8008cd4:	d108      	bne.n	8008ce8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	687a      	ldr	r2, [r7, #4]
 8008cdc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	68ba      	ldr	r2, [r7, #8]
 8008ce4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8008ce6:	e007      	b.n	8008cf8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	68ba      	ldr	r2, [r7, #8]
 8008cee:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	687a      	ldr	r2, [r7, #4]
 8008cf6:	60da      	str	r2, [r3, #12]
}
 8008cf8:	bf00      	nop
 8008cfa:	3714      	adds	r7, #20
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	bc80      	pop	{r7}
 8008d00:	4770      	bx	lr
	...

08008d04 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008d04:	b480      	push	{r7}
 8008d06:	b08b      	sub	sp, #44	; 0x2c
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
 8008d0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008d0e:	2300      	movs	r3, #0
 8008d10:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8008d12:	2300      	movs	r3, #0
 8008d14:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008d16:	e169      	b.n	8008fec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8008d18:	2201      	movs	r2, #1
 8008d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8008d20:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008d22:	683b      	ldr	r3, [r7, #0]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	69fa      	ldr	r2, [r7, #28]
 8008d28:	4013      	ands	r3, r2
 8008d2a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8008d2c:	69ba      	ldr	r2, [r7, #24]
 8008d2e:	69fb      	ldr	r3, [r7, #28]
 8008d30:	429a      	cmp	r2, r3
 8008d32:	f040 8158 	bne.w	8008fe6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8008d36:	683b      	ldr	r3, [r7, #0]
 8008d38:	685b      	ldr	r3, [r3, #4]
 8008d3a:	4a9a      	ldr	r2, [pc, #616]	; (8008fa4 <HAL_GPIO_Init+0x2a0>)
 8008d3c:	4293      	cmp	r3, r2
 8008d3e:	d05e      	beq.n	8008dfe <HAL_GPIO_Init+0xfa>
 8008d40:	4a98      	ldr	r2, [pc, #608]	; (8008fa4 <HAL_GPIO_Init+0x2a0>)
 8008d42:	4293      	cmp	r3, r2
 8008d44:	d875      	bhi.n	8008e32 <HAL_GPIO_Init+0x12e>
 8008d46:	4a98      	ldr	r2, [pc, #608]	; (8008fa8 <HAL_GPIO_Init+0x2a4>)
 8008d48:	4293      	cmp	r3, r2
 8008d4a:	d058      	beq.n	8008dfe <HAL_GPIO_Init+0xfa>
 8008d4c:	4a96      	ldr	r2, [pc, #600]	; (8008fa8 <HAL_GPIO_Init+0x2a4>)
 8008d4e:	4293      	cmp	r3, r2
 8008d50:	d86f      	bhi.n	8008e32 <HAL_GPIO_Init+0x12e>
 8008d52:	4a96      	ldr	r2, [pc, #600]	; (8008fac <HAL_GPIO_Init+0x2a8>)
 8008d54:	4293      	cmp	r3, r2
 8008d56:	d052      	beq.n	8008dfe <HAL_GPIO_Init+0xfa>
 8008d58:	4a94      	ldr	r2, [pc, #592]	; (8008fac <HAL_GPIO_Init+0x2a8>)
 8008d5a:	4293      	cmp	r3, r2
 8008d5c:	d869      	bhi.n	8008e32 <HAL_GPIO_Init+0x12e>
 8008d5e:	4a94      	ldr	r2, [pc, #592]	; (8008fb0 <HAL_GPIO_Init+0x2ac>)
 8008d60:	4293      	cmp	r3, r2
 8008d62:	d04c      	beq.n	8008dfe <HAL_GPIO_Init+0xfa>
 8008d64:	4a92      	ldr	r2, [pc, #584]	; (8008fb0 <HAL_GPIO_Init+0x2ac>)
 8008d66:	4293      	cmp	r3, r2
 8008d68:	d863      	bhi.n	8008e32 <HAL_GPIO_Init+0x12e>
 8008d6a:	4a92      	ldr	r2, [pc, #584]	; (8008fb4 <HAL_GPIO_Init+0x2b0>)
 8008d6c:	4293      	cmp	r3, r2
 8008d6e:	d046      	beq.n	8008dfe <HAL_GPIO_Init+0xfa>
 8008d70:	4a90      	ldr	r2, [pc, #576]	; (8008fb4 <HAL_GPIO_Init+0x2b0>)
 8008d72:	4293      	cmp	r3, r2
 8008d74:	d85d      	bhi.n	8008e32 <HAL_GPIO_Init+0x12e>
 8008d76:	2b12      	cmp	r3, #18
 8008d78:	d82a      	bhi.n	8008dd0 <HAL_GPIO_Init+0xcc>
 8008d7a:	2b12      	cmp	r3, #18
 8008d7c:	d859      	bhi.n	8008e32 <HAL_GPIO_Init+0x12e>
 8008d7e:	a201      	add	r2, pc, #4	; (adr r2, 8008d84 <HAL_GPIO_Init+0x80>)
 8008d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d84:	08008dff 	.word	0x08008dff
 8008d88:	08008dd9 	.word	0x08008dd9
 8008d8c:	08008deb 	.word	0x08008deb
 8008d90:	08008e2d 	.word	0x08008e2d
 8008d94:	08008e33 	.word	0x08008e33
 8008d98:	08008e33 	.word	0x08008e33
 8008d9c:	08008e33 	.word	0x08008e33
 8008da0:	08008e33 	.word	0x08008e33
 8008da4:	08008e33 	.word	0x08008e33
 8008da8:	08008e33 	.word	0x08008e33
 8008dac:	08008e33 	.word	0x08008e33
 8008db0:	08008e33 	.word	0x08008e33
 8008db4:	08008e33 	.word	0x08008e33
 8008db8:	08008e33 	.word	0x08008e33
 8008dbc:	08008e33 	.word	0x08008e33
 8008dc0:	08008e33 	.word	0x08008e33
 8008dc4:	08008e33 	.word	0x08008e33
 8008dc8:	08008de1 	.word	0x08008de1
 8008dcc:	08008df5 	.word	0x08008df5
 8008dd0:	4a79      	ldr	r2, [pc, #484]	; (8008fb8 <HAL_GPIO_Init+0x2b4>)
 8008dd2:	4293      	cmp	r3, r2
 8008dd4:	d013      	beq.n	8008dfe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8008dd6:	e02c      	b.n	8008e32 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	68db      	ldr	r3, [r3, #12]
 8008ddc:	623b      	str	r3, [r7, #32]
          break;
 8008dde:	e029      	b.n	8008e34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8008de0:	683b      	ldr	r3, [r7, #0]
 8008de2:	68db      	ldr	r3, [r3, #12]
 8008de4:	3304      	adds	r3, #4
 8008de6:	623b      	str	r3, [r7, #32]
          break;
 8008de8:	e024      	b.n	8008e34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	68db      	ldr	r3, [r3, #12]
 8008dee:	3308      	adds	r3, #8
 8008df0:	623b      	str	r3, [r7, #32]
          break;
 8008df2:	e01f      	b.n	8008e34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8008df4:	683b      	ldr	r3, [r7, #0]
 8008df6:	68db      	ldr	r3, [r3, #12]
 8008df8:	330c      	adds	r3, #12
 8008dfa:	623b      	str	r3, [r7, #32]
          break;
 8008dfc:	e01a      	b.n	8008e34 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	689b      	ldr	r3, [r3, #8]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d102      	bne.n	8008e0c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8008e06:	2304      	movs	r3, #4
 8008e08:	623b      	str	r3, [r7, #32]
          break;
 8008e0a:	e013      	b.n	8008e34 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8008e0c:	683b      	ldr	r3, [r7, #0]
 8008e0e:	689b      	ldr	r3, [r3, #8]
 8008e10:	2b01      	cmp	r3, #1
 8008e12:	d105      	bne.n	8008e20 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008e14:	2308      	movs	r3, #8
 8008e16:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	69fa      	ldr	r2, [r7, #28]
 8008e1c:	611a      	str	r2, [r3, #16]
          break;
 8008e1e:	e009      	b.n	8008e34 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008e20:	2308      	movs	r3, #8
 8008e22:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	69fa      	ldr	r2, [r7, #28]
 8008e28:	615a      	str	r2, [r3, #20]
          break;
 8008e2a:	e003      	b.n	8008e34 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	623b      	str	r3, [r7, #32]
          break;
 8008e30:	e000      	b.n	8008e34 <HAL_GPIO_Init+0x130>
          break;
 8008e32:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8008e34:	69bb      	ldr	r3, [r7, #24]
 8008e36:	2bff      	cmp	r3, #255	; 0xff
 8008e38:	d801      	bhi.n	8008e3e <HAL_GPIO_Init+0x13a>
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	e001      	b.n	8008e42 <HAL_GPIO_Init+0x13e>
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	3304      	adds	r3, #4
 8008e42:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8008e44:	69bb      	ldr	r3, [r7, #24]
 8008e46:	2bff      	cmp	r3, #255	; 0xff
 8008e48:	d802      	bhi.n	8008e50 <HAL_GPIO_Init+0x14c>
 8008e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e4c:	009b      	lsls	r3, r3, #2
 8008e4e:	e002      	b.n	8008e56 <HAL_GPIO_Init+0x152>
 8008e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e52:	3b08      	subs	r3, #8
 8008e54:	009b      	lsls	r3, r3, #2
 8008e56:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8008e58:	697b      	ldr	r3, [r7, #20]
 8008e5a:	681a      	ldr	r2, [r3, #0]
 8008e5c:	210f      	movs	r1, #15
 8008e5e:	693b      	ldr	r3, [r7, #16]
 8008e60:	fa01 f303 	lsl.w	r3, r1, r3
 8008e64:	43db      	mvns	r3, r3
 8008e66:	401a      	ands	r2, r3
 8008e68:	6a39      	ldr	r1, [r7, #32]
 8008e6a:	693b      	ldr	r3, [r7, #16]
 8008e6c:	fa01 f303 	lsl.w	r3, r1, r3
 8008e70:	431a      	orrs	r2, r3
 8008e72:	697b      	ldr	r3, [r7, #20]
 8008e74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008e76:	683b      	ldr	r3, [r7, #0]
 8008e78:	685b      	ldr	r3, [r3, #4]
 8008e7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	f000 80b1 	beq.w	8008fe6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8008e84:	4b4d      	ldr	r3, [pc, #308]	; (8008fbc <HAL_GPIO_Init+0x2b8>)
 8008e86:	699b      	ldr	r3, [r3, #24]
 8008e88:	4a4c      	ldr	r2, [pc, #304]	; (8008fbc <HAL_GPIO_Init+0x2b8>)
 8008e8a:	f043 0301 	orr.w	r3, r3, #1
 8008e8e:	6193      	str	r3, [r2, #24]
 8008e90:	4b4a      	ldr	r3, [pc, #296]	; (8008fbc <HAL_GPIO_Init+0x2b8>)
 8008e92:	699b      	ldr	r3, [r3, #24]
 8008e94:	f003 0301 	and.w	r3, r3, #1
 8008e98:	60bb      	str	r3, [r7, #8]
 8008e9a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8008e9c:	4a48      	ldr	r2, [pc, #288]	; (8008fc0 <HAL_GPIO_Init+0x2bc>)
 8008e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ea0:	089b      	lsrs	r3, r3, #2
 8008ea2:	3302      	adds	r3, #2
 8008ea4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008ea8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8008eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eac:	f003 0303 	and.w	r3, r3, #3
 8008eb0:	009b      	lsls	r3, r3, #2
 8008eb2:	220f      	movs	r2, #15
 8008eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8008eb8:	43db      	mvns	r3, r3
 8008eba:	68fa      	ldr	r2, [r7, #12]
 8008ebc:	4013      	ands	r3, r2
 8008ebe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	4a40      	ldr	r2, [pc, #256]	; (8008fc4 <HAL_GPIO_Init+0x2c0>)
 8008ec4:	4293      	cmp	r3, r2
 8008ec6:	d013      	beq.n	8008ef0 <HAL_GPIO_Init+0x1ec>
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	4a3f      	ldr	r2, [pc, #252]	; (8008fc8 <HAL_GPIO_Init+0x2c4>)
 8008ecc:	4293      	cmp	r3, r2
 8008ece:	d00d      	beq.n	8008eec <HAL_GPIO_Init+0x1e8>
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	4a3e      	ldr	r2, [pc, #248]	; (8008fcc <HAL_GPIO_Init+0x2c8>)
 8008ed4:	4293      	cmp	r3, r2
 8008ed6:	d007      	beq.n	8008ee8 <HAL_GPIO_Init+0x1e4>
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	4a3d      	ldr	r2, [pc, #244]	; (8008fd0 <HAL_GPIO_Init+0x2cc>)
 8008edc:	4293      	cmp	r3, r2
 8008ede:	d101      	bne.n	8008ee4 <HAL_GPIO_Init+0x1e0>
 8008ee0:	2303      	movs	r3, #3
 8008ee2:	e006      	b.n	8008ef2 <HAL_GPIO_Init+0x1ee>
 8008ee4:	2304      	movs	r3, #4
 8008ee6:	e004      	b.n	8008ef2 <HAL_GPIO_Init+0x1ee>
 8008ee8:	2302      	movs	r3, #2
 8008eea:	e002      	b.n	8008ef2 <HAL_GPIO_Init+0x1ee>
 8008eec:	2301      	movs	r3, #1
 8008eee:	e000      	b.n	8008ef2 <HAL_GPIO_Init+0x1ee>
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ef4:	f002 0203 	and.w	r2, r2, #3
 8008ef8:	0092      	lsls	r2, r2, #2
 8008efa:	4093      	lsls	r3, r2
 8008efc:	68fa      	ldr	r2, [r7, #12]
 8008efe:	4313      	orrs	r3, r2
 8008f00:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8008f02:	492f      	ldr	r1, [pc, #188]	; (8008fc0 <HAL_GPIO_Init+0x2bc>)
 8008f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f06:	089b      	lsrs	r3, r3, #2
 8008f08:	3302      	adds	r3, #2
 8008f0a:	68fa      	ldr	r2, [r7, #12]
 8008f0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	685b      	ldr	r3, [r3, #4]
 8008f14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d006      	beq.n	8008f2a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8008f1c:	4b2d      	ldr	r3, [pc, #180]	; (8008fd4 <HAL_GPIO_Init+0x2d0>)
 8008f1e:	689a      	ldr	r2, [r3, #8]
 8008f20:	492c      	ldr	r1, [pc, #176]	; (8008fd4 <HAL_GPIO_Init+0x2d0>)
 8008f22:	69bb      	ldr	r3, [r7, #24]
 8008f24:	4313      	orrs	r3, r2
 8008f26:	608b      	str	r3, [r1, #8]
 8008f28:	e006      	b.n	8008f38 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8008f2a:	4b2a      	ldr	r3, [pc, #168]	; (8008fd4 <HAL_GPIO_Init+0x2d0>)
 8008f2c:	689a      	ldr	r2, [r3, #8]
 8008f2e:	69bb      	ldr	r3, [r7, #24]
 8008f30:	43db      	mvns	r3, r3
 8008f32:	4928      	ldr	r1, [pc, #160]	; (8008fd4 <HAL_GPIO_Init+0x2d0>)
 8008f34:	4013      	ands	r3, r2
 8008f36:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	685b      	ldr	r3, [r3, #4]
 8008f3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d006      	beq.n	8008f52 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8008f44:	4b23      	ldr	r3, [pc, #140]	; (8008fd4 <HAL_GPIO_Init+0x2d0>)
 8008f46:	68da      	ldr	r2, [r3, #12]
 8008f48:	4922      	ldr	r1, [pc, #136]	; (8008fd4 <HAL_GPIO_Init+0x2d0>)
 8008f4a:	69bb      	ldr	r3, [r7, #24]
 8008f4c:	4313      	orrs	r3, r2
 8008f4e:	60cb      	str	r3, [r1, #12]
 8008f50:	e006      	b.n	8008f60 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8008f52:	4b20      	ldr	r3, [pc, #128]	; (8008fd4 <HAL_GPIO_Init+0x2d0>)
 8008f54:	68da      	ldr	r2, [r3, #12]
 8008f56:	69bb      	ldr	r3, [r7, #24]
 8008f58:	43db      	mvns	r3, r3
 8008f5a:	491e      	ldr	r1, [pc, #120]	; (8008fd4 <HAL_GPIO_Init+0x2d0>)
 8008f5c:	4013      	ands	r3, r2
 8008f5e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	685b      	ldr	r3, [r3, #4]
 8008f64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d006      	beq.n	8008f7a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8008f6c:	4b19      	ldr	r3, [pc, #100]	; (8008fd4 <HAL_GPIO_Init+0x2d0>)
 8008f6e:	685a      	ldr	r2, [r3, #4]
 8008f70:	4918      	ldr	r1, [pc, #96]	; (8008fd4 <HAL_GPIO_Init+0x2d0>)
 8008f72:	69bb      	ldr	r3, [r7, #24]
 8008f74:	4313      	orrs	r3, r2
 8008f76:	604b      	str	r3, [r1, #4]
 8008f78:	e006      	b.n	8008f88 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8008f7a:	4b16      	ldr	r3, [pc, #88]	; (8008fd4 <HAL_GPIO_Init+0x2d0>)
 8008f7c:	685a      	ldr	r2, [r3, #4]
 8008f7e:	69bb      	ldr	r3, [r7, #24]
 8008f80:	43db      	mvns	r3, r3
 8008f82:	4914      	ldr	r1, [pc, #80]	; (8008fd4 <HAL_GPIO_Init+0x2d0>)
 8008f84:	4013      	ands	r3, r2
 8008f86:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008f88:	683b      	ldr	r3, [r7, #0]
 8008f8a:	685b      	ldr	r3, [r3, #4]
 8008f8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d021      	beq.n	8008fd8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8008f94:	4b0f      	ldr	r3, [pc, #60]	; (8008fd4 <HAL_GPIO_Init+0x2d0>)
 8008f96:	681a      	ldr	r2, [r3, #0]
 8008f98:	490e      	ldr	r1, [pc, #56]	; (8008fd4 <HAL_GPIO_Init+0x2d0>)
 8008f9a:	69bb      	ldr	r3, [r7, #24]
 8008f9c:	4313      	orrs	r3, r2
 8008f9e:	600b      	str	r3, [r1, #0]
 8008fa0:	e021      	b.n	8008fe6 <HAL_GPIO_Init+0x2e2>
 8008fa2:	bf00      	nop
 8008fa4:	10320000 	.word	0x10320000
 8008fa8:	10310000 	.word	0x10310000
 8008fac:	10220000 	.word	0x10220000
 8008fb0:	10210000 	.word	0x10210000
 8008fb4:	10120000 	.word	0x10120000
 8008fb8:	10110000 	.word	0x10110000
 8008fbc:	40021000 	.word	0x40021000
 8008fc0:	40010000 	.word	0x40010000
 8008fc4:	40010800 	.word	0x40010800
 8008fc8:	40010c00 	.word	0x40010c00
 8008fcc:	40011000 	.word	0x40011000
 8008fd0:	40011400 	.word	0x40011400
 8008fd4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8008fd8:	4b0b      	ldr	r3, [pc, #44]	; (8009008 <HAL_GPIO_Init+0x304>)
 8008fda:	681a      	ldr	r2, [r3, #0]
 8008fdc:	69bb      	ldr	r3, [r7, #24]
 8008fde:	43db      	mvns	r3, r3
 8008fe0:	4909      	ldr	r1, [pc, #36]	; (8009008 <HAL_GPIO_Init+0x304>)
 8008fe2:	4013      	ands	r3, r2
 8008fe4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8008fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fe8:	3301      	adds	r3, #1
 8008fea:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008fec:	683b      	ldr	r3, [r7, #0]
 8008fee:	681a      	ldr	r2, [r3, #0]
 8008ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ff2:	fa22 f303 	lsr.w	r3, r2, r3
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	f47f ae8e 	bne.w	8008d18 <HAL_GPIO_Init+0x14>
  }
}
 8008ffc:	bf00      	nop
 8008ffe:	bf00      	nop
 8009000:	372c      	adds	r7, #44	; 0x2c
 8009002:	46bd      	mov	sp, r7
 8009004:	bc80      	pop	{r7}
 8009006:	4770      	bx	lr
 8009008:	40010400 	.word	0x40010400

0800900c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800900c:	b480      	push	{r7}
 800900e:	b085      	sub	sp, #20
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
 8009014:	460b      	mov	r3, r1
 8009016:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	689a      	ldr	r2, [r3, #8]
 800901c:	887b      	ldrh	r3, [r7, #2]
 800901e:	4013      	ands	r3, r2
 8009020:	2b00      	cmp	r3, #0
 8009022:	d002      	beq.n	800902a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009024:	2301      	movs	r3, #1
 8009026:	73fb      	strb	r3, [r7, #15]
 8009028:	e001      	b.n	800902e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800902a:	2300      	movs	r3, #0
 800902c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800902e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009030:	4618      	mov	r0, r3
 8009032:	3714      	adds	r7, #20
 8009034:	46bd      	mov	sp, r7
 8009036:	bc80      	pop	{r7}
 8009038:	4770      	bx	lr

0800903a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800903a:	b480      	push	{r7}
 800903c:	b083      	sub	sp, #12
 800903e:	af00      	add	r7, sp, #0
 8009040:	6078      	str	r0, [r7, #4]
 8009042:	460b      	mov	r3, r1
 8009044:	807b      	strh	r3, [r7, #2]
 8009046:	4613      	mov	r3, r2
 8009048:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800904a:	787b      	ldrb	r3, [r7, #1]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d003      	beq.n	8009058 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009050:	887a      	ldrh	r2, [r7, #2]
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8009056:	e003      	b.n	8009060 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8009058:	887b      	ldrh	r3, [r7, #2]
 800905a:	041a      	lsls	r2, r3, #16
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	611a      	str	r2, [r3, #16]
}
 8009060:	bf00      	nop
 8009062:	370c      	adds	r7, #12
 8009064:	46bd      	mov	sp, r7
 8009066:	bc80      	pop	{r7}
 8009068:	4770      	bx	lr

0800906a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800906a:	b480      	push	{r7}
 800906c:	b085      	sub	sp, #20
 800906e:	af00      	add	r7, sp, #0
 8009070:	6078      	str	r0, [r7, #4]
 8009072:	460b      	mov	r3, r1
 8009074:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	68db      	ldr	r3, [r3, #12]
 800907a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800907c:	887a      	ldrh	r2, [r7, #2]
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	4013      	ands	r3, r2
 8009082:	041a      	lsls	r2, r3, #16
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	43d9      	mvns	r1, r3
 8009088:	887b      	ldrh	r3, [r7, #2]
 800908a:	400b      	ands	r3, r1
 800908c:	431a      	orrs	r2, r3
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	611a      	str	r2, [r3, #16]
}
 8009092:	bf00      	nop
 8009094:	3714      	adds	r7, #20
 8009096:	46bd      	mov	sp, r7
 8009098:	bc80      	pop	{r7}
 800909a:	4770      	bx	lr

0800909c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800909c:	b580      	push	{r7, lr}
 800909e:	b082      	sub	sp, #8
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	4603      	mov	r3, r0
 80090a4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80090a6:	4b08      	ldr	r3, [pc, #32]	; (80090c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80090a8:	695a      	ldr	r2, [r3, #20]
 80090aa:	88fb      	ldrh	r3, [r7, #6]
 80090ac:	4013      	ands	r3, r2
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d006      	beq.n	80090c0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80090b2:	4a05      	ldr	r2, [pc, #20]	; (80090c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80090b4:	88fb      	ldrh	r3, [r7, #6]
 80090b6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80090b8:	88fb      	ldrh	r3, [r7, #6]
 80090ba:	4618      	mov	r0, r3
 80090bc:	f7fc ff6a 	bl	8005f94 <HAL_GPIO_EXTI_Callback>
  }
}
 80090c0:	bf00      	nop
 80090c2:	3708      	adds	r7, #8
 80090c4:	46bd      	mov	sp, r7
 80090c6:	bd80      	pop	{r7, pc}
 80090c8:	40010400 	.word	0x40010400

080090cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b084      	sub	sp, #16
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d101      	bne.n	80090de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80090da:	2301      	movs	r3, #1
 80090dc:	e12b      	b.n	8009336 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80090e4:	b2db      	uxtb	r3, r3
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d106      	bne.n	80090f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	2200      	movs	r2, #0
 80090ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80090f2:	6878      	ldr	r0, [r7, #4]
 80090f4:	f7fc fe48 	bl	8005d88 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2224      	movs	r2, #36	; 0x24
 80090fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	681a      	ldr	r2, [r3, #0]
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	f022 0201 	bic.w	r2, r2, #1
 800910e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	681a      	ldr	r2, [r3, #0]
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800911e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	681a      	ldr	r2, [r3, #0]
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800912e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8009130:	f001 fbca 	bl	800a8c8 <HAL_RCC_GetPCLK1Freq>
 8009134:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	685b      	ldr	r3, [r3, #4]
 800913a:	4a81      	ldr	r2, [pc, #516]	; (8009340 <HAL_I2C_Init+0x274>)
 800913c:	4293      	cmp	r3, r2
 800913e:	d807      	bhi.n	8009150 <HAL_I2C_Init+0x84>
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	4a80      	ldr	r2, [pc, #512]	; (8009344 <HAL_I2C_Init+0x278>)
 8009144:	4293      	cmp	r3, r2
 8009146:	bf94      	ite	ls
 8009148:	2301      	movls	r3, #1
 800914a:	2300      	movhi	r3, #0
 800914c:	b2db      	uxtb	r3, r3
 800914e:	e006      	b.n	800915e <HAL_I2C_Init+0x92>
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	4a7d      	ldr	r2, [pc, #500]	; (8009348 <HAL_I2C_Init+0x27c>)
 8009154:	4293      	cmp	r3, r2
 8009156:	bf94      	ite	ls
 8009158:	2301      	movls	r3, #1
 800915a:	2300      	movhi	r3, #0
 800915c:	b2db      	uxtb	r3, r3
 800915e:	2b00      	cmp	r3, #0
 8009160:	d001      	beq.n	8009166 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8009162:	2301      	movs	r3, #1
 8009164:	e0e7      	b.n	8009336 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	4a78      	ldr	r2, [pc, #480]	; (800934c <HAL_I2C_Init+0x280>)
 800916a:	fba2 2303 	umull	r2, r3, r2, r3
 800916e:	0c9b      	lsrs	r3, r3, #18
 8009170:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	685b      	ldr	r3, [r3, #4]
 8009178:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	68ba      	ldr	r2, [r7, #8]
 8009182:	430a      	orrs	r2, r1
 8009184:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	6a1b      	ldr	r3, [r3, #32]
 800918c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	685b      	ldr	r3, [r3, #4]
 8009194:	4a6a      	ldr	r2, [pc, #424]	; (8009340 <HAL_I2C_Init+0x274>)
 8009196:	4293      	cmp	r3, r2
 8009198:	d802      	bhi.n	80091a0 <HAL_I2C_Init+0xd4>
 800919a:	68bb      	ldr	r3, [r7, #8]
 800919c:	3301      	adds	r3, #1
 800919e:	e009      	b.n	80091b4 <HAL_I2C_Init+0xe8>
 80091a0:	68bb      	ldr	r3, [r7, #8]
 80091a2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80091a6:	fb02 f303 	mul.w	r3, r2, r3
 80091aa:	4a69      	ldr	r2, [pc, #420]	; (8009350 <HAL_I2C_Init+0x284>)
 80091ac:	fba2 2303 	umull	r2, r3, r2, r3
 80091b0:	099b      	lsrs	r3, r3, #6
 80091b2:	3301      	adds	r3, #1
 80091b4:	687a      	ldr	r2, [r7, #4]
 80091b6:	6812      	ldr	r2, [r2, #0]
 80091b8:	430b      	orrs	r3, r1
 80091ba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	69db      	ldr	r3, [r3, #28]
 80091c2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80091c6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	685b      	ldr	r3, [r3, #4]
 80091ce:	495c      	ldr	r1, [pc, #368]	; (8009340 <HAL_I2C_Init+0x274>)
 80091d0:	428b      	cmp	r3, r1
 80091d2:	d819      	bhi.n	8009208 <HAL_I2C_Init+0x13c>
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	1e59      	subs	r1, r3, #1
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	685b      	ldr	r3, [r3, #4]
 80091dc:	005b      	lsls	r3, r3, #1
 80091de:	fbb1 f3f3 	udiv	r3, r1, r3
 80091e2:	1c59      	adds	r1, r3, #1
 80091e4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80091e8:	400b      	ands	r3, r1
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d00a      	beq.n	8009204 <HAL_I2C_Init+0x138>
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	1e59      	subs	r1, r3, #1
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	685b      	ldr	r3, [r3, #4]
 80091f6:	005b      	lsls	r3, r3, #1
 80091f8:	fbb1 f3f3 	udiv	r3, r1, r3
 80091fc:	3301      	adds	r3, #1
 80091fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009202:	e051      	b.n	80092a8 <HAL_I2C_Init+0x1dc>
 8009204:	2304      	movs	r3, #4
 8009206:	e04f      	b.n	80092a8 <HAL_I2C_Init+0x1dc>
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	689b      	ldr	r3, [r3, #8]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d111      	bne.n	8009234 <HAL_I2C_Init+0x168>
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	1e58      	subs	r0, r3, #1
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	6859      	ldr	r1, [r3, #4]
 8009218:	460b      	mov	r3, r1
 800921a:	005b      	lsls	r3, r3, #1
 800921c:	440b      	add	r3, r1
 800921e:	fbb0 f3f3 	udiv	r3, r0, r3
 8009222:	3301      	adds	r3, #1
 8009224:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009228:	2b00      	cmp	r3, #0
 800922a:	bf0c      	ite	eq
 800922c:	2301      	moveq	r3, #1
 800922e:	2300      	movne	r3, #0
 8009230:	b2db      	uxtb	r3, r3
 8009232:	e012      	b.n	800925a <HAL_I2C_Init+0x18e>
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	1e58      	subs	r0, r3, #1
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	6859      	ldr	r1, [r3, #4]
 800923c:	460b      	mov	r3, r1
 800923e:	009b      	lsls	r3, r3, #2
 8009240:	440b      	add	r3, r1
 8009242:	0099      	lsls	r1, r3, #2
 8009244:	440b      	add	r3, r1
 8009246:	fbb0 f3f3 	udiv	r3, r0, r3
 800924a:	3301      	adds	r3, #1
 800924c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009250:	2b00      	cmp	r3, #0
 8009252:	bf0c      	ite	eq
 8009254:	2301      	moveq	r3, #1
 8009256:	2300      	movne	r3, #0
 8009258:	b2db      	uxtb	r3, r3
 800925a:	2b00      	cmp	r3, #0
 800925c:	d001      	beq.n	8009262 <HAL_I2C_Init+0x196>
 800925e:	2301      	movs	r3, #1
 8009260:	e022      	b.n	80092a8 <HAL_I2C_Init+0x1dc>
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	689b      	ldr	r3, [r3, #8]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d10e      	bne.n	8009288 <HAL_I2C_Init+0x1bc>
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	1e58      	subs	r0, r3, #1
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	6859      	ldr	r1, [r3, #4]
 8009272:	460b      	mov	r3, r1
 8009274:	005b      	lsls	r3, r3, #1
 8009276:	440b      	add	r3, r1
 8009278:	fbb0 f3f3 	udiv	r3, r0, r3
 800927c:	3301      	adds	r3, #1
 800927e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009282:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009286:	e00f      	b.n	80092a8 <HAL_I2C_Init+0x1dc>
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	1e58      	subs	r0, r3, #1
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	6859      	ldr	r1, [r3, #4]
 8009290:	460b      	mov	r3, r1
 8009292:	009b      	lsls	r3, r3, #2
 8009294:	440b      	add	r3, r1
 8009296:	0099      	lsls	r1, r3, #2
 8009298:	440b      	add	r3, r1
 800929a:	fbb0 f3f3 	udiv	r3, r0, r3
 800929e:	3301      	adds	r3, #1
 80092a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80092a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80092a8:	6879      	ldr	r1, [r7, #4]
 80092aa:	6809      	ldr	r1, [r1, #0]
 80092ac:	4313      	orrs	r3, r2
 80092ae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	69da      	ldr	r2, [r3, #28]
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	6a1b      	ldr	r3, [r3, #32]
 80092c2:	431a      	orrs	r2, r3
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	430a      	orrs	r2, r1
 80092ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	689b      	ldr	r3, [r3, #8]
 80092d2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80092d6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80092da:	687a      	ldr	r2, [r7, #4]
 80092dc:	6911      	ldr	r1, [r2, #16]
 80092de:	687a      	ldr	r2, [r7, #4]
 80092e0:	68d2      	ldr	r2, [r2, #12]
 80092e2:	4311      	orrs	r1, r2
 80092e4:	687a      	ldr	r2, [r7, #4]
 80092e6:	6812      	ldr	r2, [r2, #0]
 80092e8:	430b      	orrs	r3, r1
 80092ea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	68db      	ldr	r3, [r3, #12]
 80092f2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	695a      	ldr	r2, [r3, #20]
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	699b      	ldr	r3, [r3, #24]
 80092fe:	431a      	orrs	r2, r3
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	430a      	orrs	r2, r1
 8009306:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	681a      	ldr	r2, [r3, #0]
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	f042 0201 	orr.w	r2, r2, #1
 8009316:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2200      	movs	r2, #0
 800931c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	2220      	movs	r2, #32
 8009322:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	2200      	movs	r2, #0
 800932a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	2200      	movs	r2, #0
 8009330:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009334:	2300      	movs	r3, #0
}
 8009336:	4618      	mov	r0, r3
 8009338:	3710      	adds	r7, #16
 800933a:	46bd      	mov	sp, r7
 800933c:	bd80      	pop	{r7, pc}
 800933e:	bf00      	nop
 8009340:	000186a0 	.word	0x000186a0
 8009344:	001e847f 	.word	0x001e847f
 8009348:	003d08ff 	.word	0x003d08ff
 800934c:	431bde83 	.word	0x431bde83
 8009350:	10624dd3 	.word	0x10624dd3

08009354 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009354:	b580      	push	{r7, lr}
 8009356:	b088      	sub	sp, #32
 8009358:	af02      	add	r7, sp, #8
 800935a:	60f8      	str	r0, [r7, #12]
 800935c:	607a      	str	r2, [r7, #4]
 800935e:	461a      	mov	r2, r3
 8009360:	460b      	mov	r3, r1
 8009362:	817b      	strh	r3, [r7, #10]
 8009364:	4613      	mov	r3, r2
 8009366:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009368:	f7fe fcf0 	bl	8007d4c <HAL_GetTick>
 800936c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009374:	b2db      	uxtb	r3, r3
 8009376:	2b20      	cmp	r3, #32
 8009378:	f040 80e0 	bne.w	800953c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800937c:	697b      	ldr	r3, [r7, #20]
 800937e:	9300      	str	r3, [sp, #0]
 8009380:	2319      	movs	r3, #25
 8009382:	2201      	movs	r2, #1
 8009384:	4970      	ldr	r1, [pc, #448]	; (8009548 <HAL_I2C_Master_Transmit+0x1f4>)
 8009386:	68f8      	ldr	r0, [r7, #12]
 8009388:	f000 fc9e 	bl	8009cc8 <I2C_WaitOnFlagUntilTimeout>
 800938c:	4603      	mov	r3, r0
 800938e:	2b00      	cmp	r3, #0
 8009390:	d001      	beq.n	8009396 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8009392:	2302      	movs	r3, #2
 8009394:	e0d3      	b.n	800953e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800939c:	2b01      	cmp	r3, #1
 800939e:	d101      	bne.n	80093a4 <HAL_I2C_Master_Transmit+0x50>
 80093a0:	2302      	movs	r3, #2
 80093a2:	e0cc      	b.n	800953e <HAL_I2C_Master_Transmit+0x1ea>
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	2201      	movs	r2, #1
 80093a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	f003 0301 	and.w	r3, r3, #1
 80093b6:	2b01      	cmp	r3, #1
 80093b8:	d007      	beq.n	80093ca <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	681a      	ldr	r2, [r3, #0]
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	f042 0201 	orr.w	r2, r2, #1
 80093c8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	681a      	ldr	r2, [r3, #0]
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80093d8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	2221      	movs	r2, #33	; 0x21
 80093de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	2210      	movs	r2, #16
 80093e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	2200      	movs	r2, #0
 80093ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	687a      	ldr	r2, [r7, #4]
 80093f4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	893a      	ldrh	r2, [r7, #8]
 80093fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009400:	b29a      	uxth	r2, r3
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	4a50      	ldr	r2, [pc, #320]	; (800954c <HAL_I2C_Master_Transmit+0x1f8>)
 800940a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800940c:	8979      	ldrh	r1, [r7, #10]
 800940e:	697b      	ldr	r3, [r7, #20]
 8009410:	6a3a      	ldr	r2, [r7, #32]
 8009412:	68f8      	ldr	r0, [r7, #12]
 8009414:	f000 fb08 	bl	8009a28 <I2C_MasterRequestWrite>
 8009418:	4603      	mov	r3, r0
 800941a:	2b00      	cmp	r3, #0
 800941c:	d001      	beq.n	8009422 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800941e:	2301      	movs	r3, #1
 8009420:	e08d      	b.n	800953e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009422:	2300      	movs	r3, #0
 8009424:	613b      	str	r3, [r7, #16]
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	695b      	ldr	r3, [r3, #20]
 800942c:	613b      	str	r3, [r7, #16]
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	699b      	ldr	r3, [r3, #24]
 8009434:	613b      	str	r3, [r7, #16]
 8009436:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8009438:	e066      	b.n	8009508 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800943a:	697a      	ldr	r2, [r7, #20]
 800943c:	6a39      	ldr	r1, [r7, #32]
 800943e:	68f8      	ldr	r0, [r7, #12]
 8009440:	f000 fd5c 	bl	8009efc <I2C_WaitOnTXEFlagUntilTimeout>
 8009444:	4603      	mov	r3, r0
 8009446:	2b00      	cmp	r3, #0
 8009448:	d00d      	beq.n	8009466 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800944e:	2b04      	cmp	r3, #4
 8009450:	d107      	bne.n	8009462 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	681a      	ldr	r2, [r3, #0]
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009460:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009462:	2301      	movs	r3, #1
 8009464:	e06b      	b.n	800953e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800946a:	781a      	ldrb	r2, [r3, #0]
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009476:	1c5a      	adds	r2, r3, #1
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009480:	b29b      	uxth	r3, r3
 8009482:	3b01      	subs	r3, #1
 8009484:	b29a      	uxth	r2, r3
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800948e:	3b01      	subs	r3, #1
 8009490:	b29a      	uxth	r2, r3
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	695b      	ldr	r3, [r3, #20]
 800949c:	f003 0304 	and.w	r3, r3, #4
 80094a0:	2b04      	cmp	r3, #4
 80094a2:	d11b      	bne.n	80094dc <HAL_I2C_Master_Transmit+0x188>
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d017      	beq.n	80094dc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094b0:	781a      	ldrb	r2, [r3, #0]
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094bc:	1c5a      	adds	r2, r3, #1
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094c6:	b29b      	uxth	r3, r3
 80094c8:	3b01      	subs	r3, #1
 80094ca:	b29a      	uxth	r2, r3
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094d4:	3b01      	subs	r3, #1
 80094d6:	b29a      	uxth	r2, r3
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80094dc:	697a      	ldr	r2, [r7, #20]
 80094de:	6a39      	ldr	r1, [r7, #32]
 80094e0:	68f8      	ldr	r0, [r7, #12]
 80094e2:	f000 fd53 	bl	8009f8c <I2C_WaitOnBTFFlagUntilTimeout>
 80094e6:	4603      	mov	r3, r0
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d00d      	beq.n	8009508 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094f0:	2b04      	cmp	r3, #4
 80094f2:	d107      	bne.n	8009504 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	681a      	ldr	r2, [r3, #0]
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009502:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009504:	2301      	movs	r3, #1
 8009506:	e01a      	b.n	800953e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800950c:	2b00      	cmp	r3, #0
 800950e:	d194      	bne.n	800943a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	681a      	ldr	r2, [r3, #0]
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800951e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	2220      	movs	r2, #32
 8009524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	2200      	movs	r2, #0
 800952c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	2200      	movs	r2, #0
 8009534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009538:	2300      	movs	r3, #0
 800953a:	e000      	b.n	800953e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800953c:	2302      	movs	r3, #2
  }
}
 800953e:	4618      	mov	r0, r3
 8009540:	3718      	adds	r7, #24
 8009542:	46bd      	mov	sp, r7
 8009544:	bd80      	pop	{r7, pc}
 8009546:	bf00      	nop
 8009548:	00100002 	.word	0x00100002
 800954c:	ffff0000 	.word	0xffff0000

08009550 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b08c      	sub	sp, #48	; 0x30
 8009554:	af02      	add	r7, sp, #8
 8009556:	60f8      	str	r0, [r7, #12]
 8009558:	607a      	str	r2, [r7, #4]
 800955a:	461a      	mov	r2, r3
 800955c:	460b      	mov	r3, r1
 800955e:	817b      	strh	r3, [r7, #10]
 8009560:	4613      	mov	r3, r2
 8009562:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8009564:	2300      	movs	r3, #0
 8009566:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009568:	f7fe fbf0 	bl	8007d4c <HAL_GetTick>
 800956c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009574:	b2db      	uxtb	r3, r3
 8009576:	2b20      	cmp	r3, #32
 8009578:	f040 824b 	bne.w	8009a12 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800957c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800957e:	9300      	str	r3, [sp, #0]
 8009580:	2319      	movs	r3, #25
 8009582:	2201      	movs	r2, #1
 8009584:	497f      	ldr	r1, [pc, #508]	; (8009784 <HAL_I2C_Master_Receive+0x234>)
 8009586:	68f8      	ldr	r0, [r7, #12]
 8009588:	f000 fb9e 	bl	8009cc8 <I2C_WaitOnFlagUntilTimeout>
 800958c:	4603      	mov	r3, r0
 800958e:	2b00      	cmp	r3, #0
 8009590:	d001      	beq.n	8009596 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8009592:	2302      	movs	r3, #2
 8009594:	e23e      	b.n	8009a14 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800959c:	2b01      	cmp	r3, #1
 800959e:	d101      	bne.n	80095a4 <HAL_I2C_Master_Receive+0x54>
 80095a0:	2302      	movs	r3, #2
 80095a2:	e237      	b.n	8009a14 <HAL_I2C_Master_Receive+0x4c4>
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	2201      	movs	r2, #1
 80095a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	f003 0301 	and.w	r3, r3, #1
 80095b6:	2b01      	cmp	r3, #1
 80095b8:	d007      	beq.n	80095ca <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	681a      	ldr	r2, [r3, #0]
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	f042 0201 	orr.w	r2, r2, #1
 80095c8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	681a      	ldr	r2, [r3, #0]
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80095d8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	2222      	movs	r2, #34	; 0x22
 80095de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	2210      	movs	r2, #16
 80095e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	2200      	movs	r2, #0
 80095ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	687a      	ldr	r2, [r7, #4]
 80095f4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	893a      	ldrh	r2, [r7, #8]
 80095fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009600:	b29a      	uxth	r2, r3
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	4a5f      	ldr	r2, [pc, #380]	; (8009788 <HAL_I2C_Master_Receive+0x238>)
 800960a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800960c:	8979      	ldrh	r1, [r7, #10]
 800960e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009610:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009612:	68f8      	ldr	r0, [r7, #12]
 8009614:	f000 fa8a 	bl	8009b2c <I2C_MasterRequestRead>
 8009618:	4603      	mov	r3, r0
 800961a:	2b00      	cmp	r3, #0
 800961c:	d001      	beq.n	8009622 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 800961e:	2301      	movs	r3, #1
 8009620:	e1f8      	b.n	8009a14 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009626:	2b00      	cmp	r3, #0
 8009628:	d113      	bne.n	8009652 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800962a:	2300      	movs	r3, #0
 800962c:	61fb      	str	r3, [r7, #28]
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	695b      	ldr	r3, [r3, #20]
 8009634:	61fb      	str	r3, [r7, #28]
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	699b      	ldr	r3, [r3, #24]
 800963c:	61fb      	str	r3, [r7, #28]
 800963e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	681a      	ldr	r2, [r3, #0]
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800964e:	601a      	str	r2, [r3, #0]
 8009650:	e1cc      	b.n	80099ec <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009656:	2b01      	cmp	r3, #1
 8009658:	d11e      	bne.n	8009698 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	681a      	ldr	r2, [r3, #0]
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009668:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800966a:	b672      	cpsid	i
}
 800966c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800966e:	2300      	movs	r3, #0
 8009670:	61bb      	str	r3, [r7, #24]
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	695b      	ldr	r3, [r3, #20]
 8009678:	61bb      	str	r3, [r7, #24]
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	699b      	ldr	r3, [r3, #24]
 8009680:	61bb      	str	r3, [r7, #24]
 8009682:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	681a      	ldr	r2, [r3, #0]
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009692:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8009694:	b662      	cpsie	i
}
 8009696:	e035      	b.n	8009704 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800969c:	2b02      	cmp	r3, #2
 800969e:	d11e      	bne.n	80096de <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	681a      	ldr	r2, [r3, #0]
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80096ae:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80096b0:	b672      	cpsid	i
}
 80096b2:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80096b4:	2300      	movs	r3, #0
 80096b6:	617b      	str	r3, [r7, #20]
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	695b      	ldr	r3, [r3, #20]
 80096be:	617b      	str	r3, [r7, #20]
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	699b      	ldr	r3, [r3, #24]
 80096c6:	617b      	str	r3, [r7, #20]
 80096c8:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	681a      	ldr	r2, [r3, #0]
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80096d8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80096da:	b662      	cpsie	i
}
 80096dc:	e012      	b.n	8009704 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	681a      	ldr	r2, [r3, #0]
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80096ec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80096ee:	2300      	movs	r3, #0
 80096f0:	613b      	str	r3, [r7, #16]
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	695b      	ldr	r3, [r3, #20]
 80096f8:	613b      	str	r3, [r7, #16]
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	699b      	ldr	r3, [r3, #24]
 8009700:	613b      	str	r3, [r7, #16]
 8009702:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8009704:	e172      	b.n	80099ec <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800970a:	2b03      	cmp	r3, #3
 800970c:	f200 811f 	bhi.w	800994e <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009714:	2b01      	cmp	r3, #1
 8009716:	d123      	bne.n	8009760 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009718:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800971a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800971c:	68f8      	ldr	r0, [r7, #12]
 800971e:	f000 fc7d 	bl	800a01c <I2C_WaitOnRXNEFlagUntilTimeout>
 8009722:	4603      	mov	r3, r0
 8009724:	2b00      	cmp	r3, #0
 8009726:	d001      	beq.n	800972c <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8009728:	2301      	movs	r3, #1
 800972a:	e173      	b.n	8009a14 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	691a      	ldr	r2, [r3, #16]
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009736:	b2d2      	uxtb	r2, r2
 8009738:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800973e:	1c5a      	adds	r2, r3, #1
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009748:	3b01      	subs	r3, #1
 800974a:	b29a      	uxth	r2, r3
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009754:	b29b      	uxth	r3, r3
 8009756:	3b01      	subs	r3, #1
 8009758:	b29a      	uxth	r2, r3
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800975e:	e145      	b.n	80099ec <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009764:	2b02      	cmp	r3, #2
 8009766:	d152      	bne.n	800980e <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800976a:	9300      	str	r3, [sp, #0]
 800976c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800976e:	2200      	movs	r2, #0
 8009770:	4906      	ldr	r1, [pc, #24]	; (800978c <HAL_I2C_Master_Receive+0x23c>)
 8009772:	68f8      	ldr	r0, [r7, #12]
 8009774:	f000 faa8 	bl	8009cc8 <I2C_WaitOnFlagUntilTimeout>
 8009778:	4603      	mov	r3, r0
 800977a:	2b00      	cmp	r3, #0
 800977c:	d008      	beq.n	8009790 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 800977e:	2301      	movs	r3, #1
 8009780:	e148      	b.n	8009a14 <HAL_I2C_Master_Receive+0x4c4>
 8009782:	bf00      	nop
 8009784:	00100002 	.word	0x00100002
 8009788:	ffff0000 	.word	0xffff0000
 800978c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8009790:	b672      	cpsid	i
}
 8009792:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	681a      	ldr	r2, [r3, #0]
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80097a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	691a      	ldr	r2, [r3, #16]
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097ae:	b2d2      	uxtb	r2, r2
 80097b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097b6:	1c5a      	adds	r2, r3, #1
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80097c0:	3b01      	subs	r3, #1
 80097c2:	b29a      	uxth	r2, r3
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097cc:	b29b      	uxth	r3, r3
 80097ce:	3b01      	subs	r3, #1
 80097d0:	b29a      	uxth	r2, r3
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80097d6:	b662      	cpsie	i
}
 80097d8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	691a      	ldr	r2, [r3, #16]
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097e4:	b2d2      	uxtb	r2, r2
 80097e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097ec:	1c5a      	adds	r2, r3, #1
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80097f6:	3b01      	subs	r3, #1
 80097f8:	b29a      	uxth	r2, r3
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009802:	b29b      	uxth	r3, r3
 8009804:	3b01      	subs	r3, #1
 8009806:	b29a      	uxth	r2, r3
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800980c:	e0ee      	b.n	80099ec <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800980e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009810:	9300      	str	r3, [sp, #0]
 8009812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009814:	2200      	movs	r2, #0
 8009816:	4981      	ldr	r1, [pc, #516]	; (8009a1c <HAL_I2C_Master_Receive+0x4cc>)
 8009818:	68f8      	ldr	r0, [r7, #12]
 800981a:	f000 fa55 	bl	8009cc8 <I2C_WaitOnFlagUntilTimeout>
 800981e:	4603      	mov	r3, r0
 8009820:	2b00      	cmp	r3, #0
 8009822:	d001      	beq.n	8009828 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8009824:	2301      	movs	r3, #1
 8009826:	e0f5      	b.n	8009a14 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	681a      	ldr	r2, [r3, #0]
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009836:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009838:	b672      	cpsid	i
}
 800983a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	691a      	ldr	r2, [r3, #16]
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009846:	b2d2      	uxtb	r2, r2
 8009848:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800984e:	1c5a      	adds	r2, r3, #1
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009858:	3b01      	subs	r3, #1
 800985a:	b29a      	uxth	r2, r3
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009864:	b29b      	uxth	r3, r3
 8009866:	3b01      	subs	r3, #1
 8009868:	b29a      	uxth	r2, r3
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800986e:	4b6c      	ldr	r3, [pc, #432]	; (8009a20 <HAL_I2C_Master_Receive+0x4d0>)
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	08db      	lsrs	r3, r3, #3
 8009874:	4a6b      	ldr	r2, [pc, #428]	; (8009a24 <HAL_I2C_Master_Receive+0x4d4>)
 8009876:	fba2 2303 	umull	r2, r3, r2, r3
 800987a:	0a1a      	lsrs	r2, r3, #8
 800987c:	4613      	mov	r3, r2
 800987e:	009b      	lsls	r3, r3, #2
 8009880:	4413      	add	r3, r2
 8009882:	00da      	lsls	r2, r3, #3
 8009884:	1ad3      	subs	r3, r2, r3
 8009886:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8009888:	6a3b      	ldr	r3, [r7, #32]
 800988a:	3b01      	subs	r3, #1
 800988c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800988e:	6a3b      	ldr	r3, [r7, #32]
 8009890:	2b00      	cmp	r3, #0
 8009892:	d118      	bne.n	80098c6 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	2200      	movs	r2, #0
 8009898:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	2220      	movs	r2, #32
 800989e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	2200      	movs	r2, #0
 80098a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098ae:	f043 0220 	orr.w	r2, r3, #32
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80098b6:	b662      	cpsie	i
}
 80098b8:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	2200      	movs	r2, #0
 80098be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80098c2:	2301      	movs	r3, #1
 80098c4:	e0a6      	b.n	8009a14 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	695b      	ldr	r3, [r3, #20]
 80098cc:	f003 0304 	and.w	r3, r3, #4
 80098d0:	2b04      	cmp	r3, #4
 80098d2:	d1d9      	bne.n	8009888 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	681a      	ldr	r2, [r3, #0]
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80098e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	691a      	ldr	r2, [r3, #16]
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098ee:	b2d2      	uxtb	r2, r2
 80098f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098f6:	1c5a      	adds	r2, r3, #1
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009900:	3b01      	subs	r3, #1
 8009902:	b29a      	uxth	r2, r3
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800990c:	b29b      	uxth	r3, r3
 800990e:	3b01      	subs	r3, #1
 8009910:	b29a      	uxth	r2, r3
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8009916:	b662      	cpsie	i
}
 8009918:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	691a      	ldr	r2, [r3, #16]
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009924:	b2d2      	uxtb	r2, r2
 8009926:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800992c:	1c5a      	adds	r2, r3, #1
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009936:	3b01      	subs	r3, #1
 8009938:	b29a      	uxth	r2, r3
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009942:	b29b      	uxth	r3, r3
 8009944:	3b01      	subs	r3, #1
 8009946:	b29a      	uxth	r2, r3
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800994c:	e04e      	b.n	80099ec <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800994e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009950:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009952:	68f8      	ldr	r0, [r7, #12]
 8009954:	f000 fb62 	bl	800a01c <I2C_WaitOnRXNEFlagUntilTimeout>
 8009958:	4603      	mov	r3, r0
 800995a:	2b00      	cmp	r3, #0
 800995c:	d001      	beq.n	8009962 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 800995e:	2301      	movs	r3, #1
 8009960:	e058      	b.n	8009a14 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	691a      	ldr	r2, [r3, #16]
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800996c:	b2d2      	uxtb	r2, r2
 800996e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009974:	1c5a      	adds	r2, r3, #1
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800997e:	3b01      	subs	r3, #1
 8009980:	b29a      	uxth	r2, r3
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800998a:	b29b      	uxth	r3, r3
 800998c:	3b01      	subs	r3, #1
 800998e:	b29a      	uxth	r2, r3
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	695b      	ldr	r3, [r3, #20]
 800999a:	f003 0304 	and.w	r3, r3, #4
 800999e:	2b04      	cmp	r3, #4
 80099a0:	d124      	bne.n	80099ec <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80099a6:	2b03      	cmp	r3, #3
 80099a8:	d107      	bne.n	80099ba <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	681a      	ldr	r2, [r3, #0]
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80099b8:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	691a      	ldr	r2, [r3, #16]
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099c4:	b2d2      	uxtb	r2, r2
 80099c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099cc:	1c5a      	adds	r2, r3, #1
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80099d6:	3b01      	subs	r3, #1
 80099d8:	b29a      	uxth	r2, r3
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80099e2:	b29b      	uxth	r3, r3
 80099e4:	3b01      	subs	r3, #1
 80099e6:	b29a      	uxth	r2, r3
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	f47f ae88 	bne.w	8009706 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	2220      	movs	r2, #32
 80099fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	2200      	movs	r2, #0
 8009a02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	2200      	movs	r2, #0
 8009a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009a0e:	2300      	movs	r3, #0
 8009a10:	e000      	b.n	8009a14 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8009a12:	2302      	movs	r3, #2
  }
}
 8009a14:	4618      	mov	r0, r3
 8009a16:	3728      	adds	r7, #40	; 0x28
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	bd80      	pop	{r7, pc}
 8009a1c:	00010004 	.word	0x00010004
 8009a20:	20000490 	.word	0x20000490
 8009a24:	14f8b589 	.word	0x14f8b589

08009a28 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8009a28:	b580      	push	{r7, lr}
 8009a2a:	b088      	sub	sp, #32
 8009a2c:	af02      	add	r7, sp, #8
 8009a2e:	60f8      	str	r0, [r7, #12]
 8009a30:	607a      	str	r2, [r7, #4]
 8009a32:	603b      	str	r3, [r7, #0]
 8009a34:	460b      	mov	r3, r1
 8009a36:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a3c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8009a3e:	697b      	ldr	r3, [r7, #20]
 8009a40:	2b08      	cmp	r3, #8
 8009a42:	d006      	beq.n	8009a52 <I2C_MasterRequestWrite+0x2a>
 8009a44:	697b      	ldr	r3, [r7, #20]
 8009a46:	2b01      	cmp	r3, #1
 8009a48:	d003      	beq.n	8009a52 <I2C_MasterRequestWrite+0x2a>
 8009a4a:	697b      	ldr	r3, [r7, #20]
 8009a4c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009a50:	d108      	bne.n	8009a64 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	681a      	ldr	r2, [r3, #0]
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009a60:	601a      	str	r2, [r3, #0]
 8009a62:	e00b      	b.n	8009a7c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a68:	2b12      	cmp	r3, #18
 8009a6a:	d107      	bne.n	8009a7c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	681a      	ldr	r2, [r3, #0]
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009a7a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009a7c:	683b      	ldr	r3, [r7, #0]
 8009a7e:	9300      	str	r3, [sp, #0]
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	2200      	movs	r2, #0
 8009a84:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009a88:	68f8      	ldr	r0, [r7, #12]
 8009a8a:	f000 f91d 	bl	8009cc8 <I2C_WaitOnFlagUntilTimeout>
 8009a8e:	4603      	mov	r3, r0
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d00d      	beq.n	8009ab0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009aa2:	d103      	bne.n	8009aac <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009aaa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009aac:	2303      	movs	r3, #3
 8009aae:	e035      	b.n	8009b1c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	691b      	ldr	r3, [r3, #16]
 8009ab4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009ab8:	d108      	bne.n	8009acc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009aba:	897b      	ldrh	r3, [r7, #10]
 8009abc:	b2db      	uxtb	r3, r3
 8009abe:	461a      	mov	r2, r3
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009ac8:	611a      	str	r2, [r3, #16]
 8009aca:	e01b      	b.n	8009b04 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009acc:	897b      	ldrh	r3, [r7, #10]
 8009ace:	11db      	asrs	r3, r3, #7
 8009ad0:	b2db      	uxtb	r3, r3
 8009ad2:	f003 0306 	and.w	r3, r3, #6
 8009ad6:	b2db      	uxtb	r3, r3
 8009ad8:	f063 030f 	orn	r3, r3, #15
 8009adc:	b2da      	uxtb	r2, r3
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8009ae4:	683b      	ldr	r3, [r7, #0]
 8009ae6:	687a      	ldr	r2, [r7, #4]
 8009ae8:	490e      	ldr	r1, [pc, #56]	; (8009b24 <I2C_MasterRequestWrite+0xfc>)
 8009aea:	68f8      	ldr	r0, [r7, #12]
 8009aec:	f000 f966 	bl	8009dbc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009af0:	4603      	mov	r3, r0
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d001      	beq.n	8009afa <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8009af6:	2301      	movs	r3, #1
 8009af8:	e010      	b.n	8009b1c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8009afa:	897b      	ldrh	r3, [r7, #10]
 8009afc:	b2da      	uxtb	r2, r3
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009b04:	683b      	ldr	r3, [r7, #0]
 8009b06:	687a      	ldr	r2, [r7, #4]
 8009b08:	4907      	ldr	r1, [pc, #28]	; (8009b28 <I2C_MasterRequestWrite+0x100>)
 8009b0a:	68f8      	ldr	r0, [r7, #12]
 8009b0c:	f000 f956 	bl	8009dbc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009b10:	4603      	mov	r3, r0
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d001      	beq.n	8009b1a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8009b16:	2301      	movs	r3, #1
 8009b18:	e000      	b.n	8009b1c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8009b1a:	2300      	movs	r3, #0
}
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	3718      	adds	r7, #24
 8009b20:	46bd      	mov	sp, r7
 8009b22:	bd80      	pop	{r7, pc}
 8009b24:	00010008 	.word	0x00010008
 8009b28:	00010002 	.word	0x00010002

08009b2c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	b088      	sub	sp, #32
 8009b30:	af02      	add	r7, sp, #8
 8009b32:	60f8      	str	r0, [r7, #12]
 8009b34:	607a      	str	r2, [r7, #4]
 8009b36:	603b      	str	r3, [r7, #0]
 8009b38:	460b      	mov	r3, r1
 8009b3a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b40:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	681a      	ldr	r2, [r3, #0]
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009b50:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8009b52:	697b      	ldr	r3, [r7, #20]
 8009b54:	2b08      	cmp	r3, #8
 8009b56:	d006      	beq.n	8009b66 <I2C_MasterRequestRead+0x3a>
 8009b58:	697b      	ldr	r3, [r7, #20]
 8009b5a:	2b01      	cmp	r3, #1
 8009b5c:	d003      	beq.n	8009b66 <I2C_MasterRequestRead+0x3a>
 8009b5e:	697b      	ldr	r3, [r7, #20]
 8009b60:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009b64:	d108      	bne.n	8009b78 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	681a      	ldr	r2, [r3, #0]
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009b74:	601a      	str	r2, [r3, #0]
 8009b76:	e00b      	b.n	8009b90 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b7c:	2b11      	cmp	r3, #17
 8009b7e:	d107      	bne.n	8009b90 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	681a      	ldr	r2, [r3, #0]
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009b8e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009b90:	683b      	ldr	r3, [r7, #0]
 8009b92:	9300      	str	r3, [sp, #0]
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	2200      	movs	r2, #0
 8009b98:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009b9c:	68f8      	ldr	r0, [r7, #12]
 8009b9e:	f000 f893 	bl	8009cc8 <I2C_WaitOnFlagUntilTimeout>
 8009ba2:	4603      	mov	r3, r0
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d00d      	beq.n	8009bc4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009bb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009bb6:	d103      	bne.n	8009bc0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009bbe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009bc0:	2303      	movs	r3, #3
 8009bc2:	e079      	b.n	8009cb8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	691b      	ldr	r3, [r3, #16]
 8009bc8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009bcc:	d108      	bne.n	8009be0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8009bce:	897b      	ldrh	r3, [r7, #10]
 8009bd0:	b2db      	uxtb	r3, r3
 8009bd2:	f043 0301 	orr.w	r3, r3, #1
 8009bd6:	b2da      	uxtb	r2, r3
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	611a      	str	r2, [r3, #16]
 8009bde:	e05f      	b.n	8009ca0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009be0:	897b      	ldrh	r3, [r7, #10]
 8009be2:	11db      	asrs	r3, r3, #7
 8009be4:	b2db      	uxtb	r3, r3
 8009be6:	f003 0306 	and.w	r3, r3, #6
 8009bea:	b2db      	uxtb	r3, r3
 8009bec:	f063 030f 	orn	r3, r3, #15
 8009bf0:	b2da      	uxtb	r2, r3
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8009bf8:	683b      	ldr	r3, [r7, #0]
 8009bfa:	687a      	ldr	r2, [r7, #4]
 8009bfc:	4930      	ldr	r1, [pc, #192]	; (8009cc0 <I2C_MasterRequestRead+0x194>)
 8009bfe:	68f8      	ldr	r0, [r7, #12]
 8009c00:	f000 f8dc 	bl	8009dbc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009c04:	4603      	mov	r3, r0
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d001      	beq.n	8009c0e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8009c0a:	2301      	movs	r3, #1
 8009c0c:	e054      	b.n	8009cb8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8009c0e:	897b      	ldrh	r3, [r7, #10]
 8009c10:	b2da      	uxtb	r2, r3
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009c18:	683b      	ldr	r3, [r7, #0]
 8009c1a:	687a      	ldr	r2, [r7, #4]
 8009c1c:	4929      	ldr	r1, [pc, #164]	; (8009cc4 <I2C_MasterRequestRead+0x198>)
 8009c1e:	68f8      	ldr	r0, [r7, #12]
 8009c20:	f000 f8cc 	bl	8009dbc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009c24:	4603      	mov	r3, r0
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d001      	beq.n	8009c2e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8009c2a:	2301      	movs	r3, #1
 8009c2c:	e044      	b.n	8009cb8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009c2e:	2300      	movs	r3, #0
 8009c30:	613b      	str	r3, [r7, #16]
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	695b      	ldr	r3, [r3, #20]
 8009c38:	613b      	str	r3, [r7, #16]
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	699b      	ldr	r3, [r3, #24]
 8009c40:	613b      	str	r3, [r7, #16]
 8009c42:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	681a      	ldr	r2, [r3, #0]
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009c52:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009c54:	683b      	ldr	r3, [r7, #0]
 8009c56:	9300      	str	r3, [sp, #0]
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009c60:	68f8      	ldr	r0, [r7, #12]
 8009c62:	f000 f831 	bl	8009cc8 <I2C_WaitOnFlagUntilTimeout>
 8009c66:	4603      	mov	r3, r0
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d00d      	beq.n	8009c88 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c7a:	d103      	bne.n	8009c84 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009c82:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8009c84:	2303      	movs	r3, #3
 8009c86:	e017      	b.n	8009cb8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8009c88:	897b      	ldrh	r3, [r7, #10]
 8009c8a:	11db      	asrs	r3, r3, #7
 8009c8c:	b2db      	uxtb	r3, r3
 8009c8e:	f003 0306 	and.w	r3, r3, #6
 8009c92:	b2db      	uxtb	r3, r3
 8009c94:	f063 030e 	orn	r3, r3, #14
 8009c98:	b2da      	uxtb	r2, r3
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009ca0:	683b      	ldr	r3, [r7, #0]
 8009ca2:	687a      	ldr	r2, [r7, #4]
 8009ca4:	4907      	ldr	r1, [pc, #28]	; (8009cc4 <I2C_MasterRequestRead+0x198>)
 8009ca6:	68f8      	ldr	r0, [r7, #12]
 8009ca8:	f000 f888 	bl	8009dbc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009cac:	4603      	mov	r3, r0
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d001      	beq.n	8009cb6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8009cb2:	2301      	movs	r3, #1
 8009cb4:	e000      	b.n	8009cb8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8009cb6:	2300      	movs	r3, #0
}
 8009cb8:	4618      	mov	r0, r3
 8009cba:	3718      	adds	r7, #24
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	bd80      	pop	{r7, pc}
 8009cc0:	00010008 	.word	0x00010008
 8009cc4:	00010002 	.word	0x00010002

08009cc8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	b084      	sub	sp, #16
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	60f8      	str	r0, [r7, #12]
 8009cd0:	60b9      	str	r1, [r7, #8]
 8009cd2:	603b      	str	r3, [r7, #0]
 8009cd4:	4613      	mov	r3, r2
 8009cd6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009cd8:	e048      	b.n	8009d6c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009cda:	683b      	ldr	r3, [r7, #0]
 8009cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ce0:	d044      	beq.n	8009d6c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009ce2:	f7fe f833 	bl	8007d4c <HAL_GetTick>
 8009ce6:	4602      	mov	r2, r0
 8009ce8:	69bb      	ldr	r3, [r7, #24]
 8009cea:	1ad3      	subs	r3, r2, r3
 8009cec:	683a      	ldr	r2, [r7, #0]
 8009cee:	429a      	cmp	r2, r3
 8009cf0:	d302      	bcc.n	8009cf8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8009cf2:	683b      	ldr	r3, [r7, #0]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d139      	bne.n	8009d6c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8009cf8:	68bb      	ldr	r3, [r7, #8]
 8009cfa:	0c1b      	lsrs	r3, r3, #16
 8009cfc:	b2db      	uxtb	r3, r3
 8009cfe:	2b01      	cmp	r3, #1
 8009d00:	d10d      	bne.n	8009d1e <I2C_WaitOnFlagUntilTimeout+0x56>
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	695b      	ldr	r3, [r3, #20]
 8009d08:	43da      	mvns	r2, r3
 8009d0a:	68bb      	ldr	r3, [r7, #8]
 8009d0c:	4013      	ands	r3, r2
 8009d0e:	b29b      	uxth	r3, r3
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	bf0c      	ite	eq
 8009d14:	2301      	moveq	r3, #1
 8009d16:	2300      	movne	r3, #0
 8009d18:	b2db      	uxtb	r3, r3
 8009d1a:	461a      	mov	r2, r3
 8009d1c:	e00c      	b.n	8009d38 <I2C_WaitOnFlagUntilTimeout+0x70>
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	699b      	ldr	r3, [r3, #24]
 8009d24:	43da      	mvns	r2, r3
 8009d26:	68bb      	ldr	r3, [r7, #8]
 8009d28:	4013      	ands	r3, r2
 8009d2a:	b29b      	uxth	r3, r3
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	bf0c      	ite	eq
 8009d30:	2301      	moveq	r3, #1
 8009d32:	2300      	movne	r3, #0
 8009d34:	b2db      	uxtb	r3, r3
 8009d36:	461a      	mov	r2, r3
 8009d38:	79fb      	ldrb	r3, [r7, #7]
 8009d3a:	429a      	cmp	r2, r3
 8009d3c:	d116      	bne.n	8009d6c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	2200      	movs	r2, #0
 8009d42:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	2220      	movs	r2, #32
 8009d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	2200      	movs	r2, #0
 8009d50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d58:	f043 0220 	orr.w	r2, r3, #32
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	2200      	movs	r2, #0
 8009d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8009d68:	2301      	movs	r3, #1
 8009d6a:	e023      	b.n	8009db4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009d6c:	68bb      	ldr	r3, [r7, #8]
 8009d6e:	0c1b      	lsrs	r3, r3, #16
 8009d70:	b2db      	uxtb	r3, r3
 8009d72:	2b01      	cmp	r3, #1
 8009d74:	d10d      	bne.n	8009d92 <I2C_WaitOnFlagUntilTimeout+0xca>
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	695b      	ldr	r3, [r3, #20]
 8009d7c:	43da      	mvns	r2, r3
 8009d7e:	68bb      	ldr	r3, [r7, #8]
 8009d80:	4013      	ands	r3, r2
 8009d82:	b29b      	uxth	r3, r3
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	bf0c      	ite	eq
 8009d88:	2301      	moveq	r3, #1
 8009d8a:	2300      	movne	r3, #0
 8009d8c:	b2db      	uxtb	r3, r3
 8009d8e:	461a      	mov	r2, r3
 8009d90:	e00c      	b.n	8009dac <I2C_WaitOnFlagUntilTimeout+0xe4>
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	699b      	ldr	r3, [r3, #24]
 8009d98:	43da      	mvns	r2, r3
 8009d9a:	68bb      	ldr	r3, [r7, #8]
 8009d9c:	4013      	ands	r3, r2
 8009d9e:	b29b      	uxth	r3, r3
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	bf0c      	ite	eq
 8009da4:	2301      	moveq	r3, #1
 8009da6:	2300      	movne	r3, #0
 8009da8:	b2db      	uxtb	r3, r3
 8009daa:	461a      	mov	r2, r3
 8009dac:	79fb      	ldrb	r3, [r7, #7]
 8009dae:	429a      	cmp	r2, r3
 8009db0:	d093      	beq.n	8009cda <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009db2:	2300      	movs	r3, #0
}
 8009db4:	4618      	mov	r0, r3
 8009db6:	3710      	adds	r7, #16
 8009db8:	46bd      	mov	sp, r7
 8009dba:	bd80      	pop	{r7, pc}

08009dbc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	b084      	sub	sp, #16
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	60f8      	str	r0, [r7, #12]
 8009dc4:	60b9      	str	r1, [r7, #8]
 8009dc6:	607a      	str	r2, [r7, #4]
 8009dc8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009dca:	e071      	b.n	8009eb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	695b      	ldr	r3, [r3, #20]
 8009dd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009dd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009dda:	d123      	bne.n	8009e24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	681a      	ldr	r2, [r3, #0]
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009dea:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009df4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	2200      	movs	r2, #0
 8009dfa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	2220      	movs	r2, #32
 8009e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	2200      	movs	r2, #0
 8009e08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e10:	f043 0204 	orr.w	r2, r3, #4
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009e20:	2301      	movs	r3, #1
 8009e22:	e067      	b.n	8009ef4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e2a:	d041      	beq.n	8009eb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009e2c:	f7fd ff8e 	bl	8007d4c <HAL_GetTick>
 8009e30:	4602      	mov	r2, r0
 8009e32:	683b      	ldr	r3, [r7, #0]
 8009e34:	1ad3      	subs	r3, r2, r3
 8009e36:	687a      	ldr	r2, [r7, #4]
 8009e38:	429a      	cmp	r2, r3
 8009e3a:	d302      	bcc.n	8009e42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d136      	bne.n	8009eb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8009e42:	68bb      	ldr	r3, [r7, #8]
 8009e44:	0c1b      	lsrs	r3, r3, #16
 8009e46:	b2db      	uxtb	r3, r3
 8009e48:	2b01      	cmp	r3, #1
 8009e4a:	d10c      	bne.n	8009e66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	695b      	ldr	r3, [r3, #20]
 8009e52:	43da      	mvns	r2, r3
 8009e54:	68bb      	ldr	r3, [r7, #8]
 8009e56:	4013      	ands	r3, r2
 8009e58:	b29b      	uxth	r3, r3
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	bf14      	ite	ne
 8009e5e:	2301      	movne	r3, #1
 8009e60:	2300      	moveq	r3, #0
 8009e62:	b2db      	uxtb	r3, r3
 8009e64:	e00b      	b.n	8009e7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	699b      	ldr	r3, [r3, #24]
 8009e6c:	43da      	mvns	r2, r3
 8009e6e:	68bb      	ldr	r3, [r7, #8]
 8009e70:	4013      	ands	r3, r2
 8009e72:	b29b      	uxth	r3, r3
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	bf14      	ite	ne
 8009e78:	2301      	movne	r3, #1
 8009e7a:	2300      	moveq	r3, #0
 8009e7c:	b2db      	uxtb	r3, r3
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d016      	beq.n	8009eb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	2200      	movs	r2, #0
 8009e86:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	2220      	movs	r2, #32
 8009e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	2200      	movs	r2, #0
 8009e94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e9c:	f043 0220 	orr.w	r2, r3, #32
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8009eac:	2301      	movs	r3, #1
 8009eae:	e021      	b.n	8009ef4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009eb0:	68bb      	ldr	r3, [r7, #8]
 8009eb2:	0c1b      	lsrs	r3, r3, #16
 8009eb4:	b2db      	uxtb	r3, r3
 8009eb6:	2b01      	cmp	r3, #1
 8009eb8:	d10c      	bne.n	8009ed4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	695b      	ldr	r3, [r3, #20]
 8009ec0:	43da      	mvns	r2, r3
 8009ec2:	68bb      	ldr	r3, [r7, #8]
 8009ec4:	4013      	ands	r3, r2
 8009ec6:	b29b      	uxth	r3, r3
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	bf14      	ite	ne
 8009ecc:	2301      	movne	r3, #1
 8009ece:	2300      	moveq	r3, #0
 8009ed0:	b2db      	uxtb	r3, r3
 8009ed2:	e00b      	b.n	8009eec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	699b      	ldr	r3, [r3, #24]
 8009eda:	43da      	mvns	r2, r3
 8009edc:	68bb      	ldr	r3, [r7, #8]
 8009ede:	4013      	ands	r3, r2
 8009ee0:	b29b      	uxth	r3, r3
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	bf14      	ite	ne
 8009ee6:	2301      	movne	r3, #1
 8009ee8:	2300      	moveq	r3, #0
 8009eea:	b2db      	uxtb	r3, r3
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	f47f af6d 	bne.w	8009dcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8009ef2:	2300      	movs	r3, #0
}
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	3710      	adds	r7, #16
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	bd80      	pop	{r7, pc}

08009efc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009efc:	b580      	push	{r7, lr}
 8009efe:	b084      	sub	sp, #16
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	60f8      	str	r0, [r7, #12]
 8009f04:	60b9      	str	r1, [r7, #8]
 8009f06:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009f08:	e034      	b.n	8009f74 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009f0a:	68f8      	ldr	r0, [r7, #12]
 8009f0c:	f000 f8e3 	bl	800a0d6 <I2C_IsAcknowledgeFailed>
 8009f10:	4603      	mov	r3, r0
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d001      	beq.n	8009f1a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009f16:	2301      	movs	r3, #1
 8009f18:	e034      	b.n	8009f84 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009f1a:	68bb      	ldr	r3, [r7, #8]
 8009f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f20:	d028      	beq.n	8009f74 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009f22:	f7fd ff13 	bl	8007d4c <HAL_GetTick>
 8009f26:	4602      	mov	r2, r0
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	1ad3      	subs	r3, r2, r3
 8009f2c:	68ba      	ldr	r2, [r7, #8]
 8009f2e:	429a      	cmp	r2, r3
 8009f30:	d302      	bcc.n	8009f38 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8009f32:	68bb      	ldr	r3, [r7, #8]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d11d      	bne.n	8009f74 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	695b      	ldr	r3, [r3, #20]
 8009f3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f42:	2b80      	cmp	r3, #128	; 0x80
 8009f44:	d016      	beq.n	8009f74 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	2200      	movs	r2, #0
 8009f4a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	2220      	movs	r2, #32
 8009f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	2200      	movs	r2, #0
 8009f58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f60:	f043 0220 	orr.w	r2, r3, #32
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8009f70:	2301      	movs	r3, #1
 8009f72:	e007      	b.n	8009f84 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	695b      	ldr	r3, [r3, #20]
 8009f7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f7e:	2b80      	cmp	r3, #128	; 0x80
 8009f80:	d1c3      	bne.n	8009f0a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009f82:	2300      	movs	r3, #0
}
 8009f84:	4618      	mov	r0, r3
 8009f86:	3710      	adds	r7, #16
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	bd80      	pop	{r7, pc}

08009f8c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	b084      	sub	sp, #16
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	60f8      	str	r0, [r7, #12]
 8009f94:	60b9      	str	r1, [r7, #8]
 8009f96:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009f98:	e034      	b.n	800a004 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009f9a:	68f8      	ldr	r0, [r7, #12]
 8009f9c:	f000 f89b 	bl	800a0d6 <I2C_IsAcknowledgeFailed>
 8009fa0:	4603      	mov	r3, r0
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d001      	beq.n	8009faa <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009fa6:	2301      	movs	r3, #1
 8009fa8:	e034      	b.n	800a014 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009faa:	68bb      	ldr	r3, [r7, #8]
 8009fac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fb0:	d028      	beq.n	800a004 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009fb2:	f7fd fecb 	bl	8007d4c <HAL_GetTick>
 8009fb6:	4602      	mov	r2, r0
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	1ad3      	subs	r3, r2, r3
 8009fbc:	68ba      	ldr	r2, [r7, #8]
 8009fbe:	429a      	cmp	r2, r3
 8009fc0:	d302      	bcc.n	8009fc8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8009fc2:	68bb      	ldr	r3, [r7, #8]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d11d      	bne.n	800a004 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	695b      	ldr	r3, [r3, #20]
 8009fce:	f003 0304 	and.w	r3, r3, #4
 8009fd2:	2b04      	cmp	r3, #4
 8009fd4:	d016      	beq.n	800a004 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	2200      	movs	r2, #0
 8009fda:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	2220      	movs	r2, #32
 8009fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ff0:	f043 0220 	orr.w	r2, r3, #32
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a000:	2301      	movs	r3, #1
 800a002:	e007      	b.n	800a014 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	695b      	ldr	r3, [r3, #20]
 800a00a:	f003 0304 	and.w	r3, r3, #4
 800a00e:	2b04      	cmp	r3, #4
 800a010:	d1c3      	bne.n	8009f9a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a012:	2300      	movs	r3, #0
}
 800a014:	4618      	mov	r0, r3
 800a016:	3710      	adds	r7, #16
 800a018:	46bd      	mov	sp, r7
 800a01a:	bd80      	pop	{r7, pc}

0800a01c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a01c:	b580      	push	{r7, lr}
 800a01e:	b084      	sub	sp, #16
 800a020:	af00      	add	r7, sp, #0
 800a022:	60f8      	str	r0, [r7, #12]
 800a024:	60b9      	str	r1, [r7, #8]
 800a026:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a028:	e049      	b.n	800a0be <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	695b      	ldr	r3, [r3, #20]
 800a030:	f003 0310 	and.w	r3, r3, #16
 800a034:	2b10      	cmp	r3, #16
 800a036:	d119      	bne.n	800a06c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	f06f 0210 	mvn.w	r2, #16
 800a040:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	2200      	movs	r2, #0
 800a046:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	2220      	movs	r2, #32
 800a04c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	2200      	movs	r2, #0
 800a054:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	2200      	movs	r2, #0
 800a064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a068:	2301      	movs	r3, #1
 800a06a:	e030      	b.n	800a0ce <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a06c:	f7fd fe6e 	bl	8007d4c <HAL_GetTick>
 800a070:	4602      	mov	r2, r0
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	1ad3      	subs	r3, r2, r3
 800a076:	68ba      	ldr	r2, [r7, #8]
 800a078:	429a      	cmp	r2, r3
 800a07a:	d302      	bcc.n	800a082 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800a07c:	68bb      	ldr	r3, [r7, #8]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d11d      	bne.n	800a0be <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	695b      	ldr	r3, [r3, #20]
 800a088:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a08c:	2b40      	cmp	r3, #64	; 0x40
 800a08e:	d016      	beq.n	800a0be <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	2200      	movs	r2, #0
 800a094:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	2220      	movs	r2, #32
 800a09a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	2200      	movs	r2, #0
 800a0a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0aa:	f043 0220 	orr.w	r2, r3, #32
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	2200      	movs	r2, #0
 800a0b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a0ba:	2301      	movs	r3, #1
 800a0bc:	e007      	b.n	800a0ce <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	695b      	ldr	r3, [r3, #20]
 800a0c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0c8:	2b40      	cmp	r3, #64	; 0x40
 800a0ca:	d1ae      	bne.n	800a02a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a0cc:	2300      	movs	r3, #0
}
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	3710      	adds	r7, #16
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	bd80      	pop	{r7, pc}

0800a0d6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800a0d6:	b480      	push	{r7}
 800a0d8:	b083      	sub	sp, #12
 800a0da:	af00      	add	r7, sp, #0
 800a0dc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	695b      	ldr	r3, [r3, #20]
 800a0e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a0e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a0ec:	d11b      	bne.n	800a126 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a0f6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	2220      	movs	r2, #32
 800a102:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	2200      	movs	r2, #0
 800a10a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a112:	f043 0204 	orr.w	r2, r3, #4
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	2200      	movs	r2, #0
 800a11e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800a122:	2301      	movs	r3, #1
 800a124:	e000      	b.n	800a128 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800a126:	2300      	movs	r3, #0
}
 800a128:	4618      	mov	r0, r3
 800a12a:	370c      	adds	r7, #12
 800a12c:	46bd      	mov	sp, r7
 800a12e:	bc80      	pop	{r7}
 800a130:	4770      	bx	lr
	...

0800a134 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a134:	b580      	push	{r7, lr}
 800a136:	b086      	sub	sp, #24
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d101      	bne.n	800a146 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a142:	2301      	movs	r3, #1
 800a144:	e272      	b.n	800a62c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	f003 0301 	and.w	r3, r3, #1
 800a14e:	2b00      	cmp	r3, #0
 800a150:	f000 8087 	beq.w	800a262 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a154:	4b92      	ldr	r3, [pc, #584]	; (800a3a0 <HAL_RCC_OscConfig+0x26c>)
 800a156:	685b      	ldr	r3, [r3, #4]
 800a158:	f003 030c 	and.w	r3, r3, #12
 800a15c:	2b04      	cmp	r3, #4
 800a15e:	d00c      	beq.n	800a17a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800a160:	4b8f      	ldr	r3, [pc, #572]	; (800a3a0 <HAL_RCC_OscConfig+0x26c>)
 800a162:	685b      	ldr	r3, [r3, #4]
 800a164:	f003 030c 	and.w	r3, r3, #12
 800a168:	2b08      	cmp	r3, #8
 800a16a:	d112      	bne.n	800a192 <HAL_RCC_OscConfig+0x5e>
 800a16c:	4b8c      	ldr	r3, [pc, #560]	; (800a3a0 <HAL_RCC_OscConfig+0x26c>)
 800a16e:	685b      	ldr	r3, [r3, #4]
 800a170:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a174:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a178:	d10b      	bne.n	800a192 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a17a:	4b89      	ldr	r3, [pc, #548]	; (800a3a0 <HAL_RCC_OscConfig+0x26c>)
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a182:	2b00      	cmp	r3, #0
 800a184:	d06c      	beq.n	800a260 <HAL_RCC_OscConfig+0x12c>
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	685b      	ldr	r3, [r3, #4]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d168      	bne.n	800a260 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800a18e:	2301      	movs	r3, #1
 800a190:	e24c      	b.n	800a62c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	685b      	ldr	r3, [r3, #4]
 800a196:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a19a:	d106      	bne.n	800a1aa <HAL_RCC_OscConfig+0x76>
 800a19c:	4b80      	ldr	r3, [pc, #512]	; (800a3a0 <HAL_RCC_OscConfig+0x26c>)
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	4a7f      	ldr	r2, [pc, #508]	; (800a3a0 <HAL_RCC_OscConfig+0x26c>)
 800a1a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a1a6:	6013      	str	r3, [r2, #0]
 800a1a8:	e02e      	b.n	800a208 <HAL_RCC_OscConfig+0xd4>
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	685b      	ldr	r3, [r3, #4]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d10c      	bne.n	800a1cc <HAL_RCC_OscConfig+0x98>
 800a1b2:	4b7b      	ldr	r3, [pc, #492]	; (800a3a0 <HAL_RCC_OscConfig+0x26c>)
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	4a7a      	ldr	r2, [pc, #488]	; (800a3a0 <HAL_RCC_OscConfig+0x26c>)
 800a1b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a1bc:	6013      	str	r3, [r2, #0]
 800a1be:	4b78      	ldr	r3, [pc, #480]	; (800a3a0 <HAL_RCC_OscConfig+0x26c>)
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	4a77      	ldr	r2, [pc, #476]	; (800a3a0 <HAL_RCC_OscConfig+0x26c>)
 800a1c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a1c8:	6013      	str	r3, [r2, #0]
 800a1ca:	e01d      	b.n	800a208 <HAL_RCC_OscConfig+0xd4>
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	685b      	ldr	r3, [r3, #4]
 800a1d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a1d4:	d10c      	bne.n	800a1f0 <HAL_RCC_OscConfig+0xbc>
 800a1d6:	4b72      	ldr	r3, [pc, #456]	; (800a3a0 <HAL_RCC_OscConfig+0x26c>)
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	4a71      	ldr	r2, [pc, #452]	; (800a3a0 <HAL_RCC_OscConfig+0x26c>)
 800a1dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a1e0:	6013      	str	r3, [r2, #0]
 800a1e2:	4b6f      	ldr	r3, [pc, #444]	; (800a3a0 <HAL_RCC_OscConfig+0x26c>)
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	4a6e      	ldr	r2, [pc, #440]	; (800a3a0 <HAL_RCC_OscConfig+0x26c>)
 800a1e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a1ec:	6013      	str	r3, [r2, #0]
 800a1ee:	e00b      	b.n	800a208 <HAL_RCC_OscConfig+0xd4>
 800a1f0:	4b6b      	ldr	r3, [pc, #428]	; (800a3a0 <HAL_RCC_OscConfig+0x26c>)
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	4a6a      	ldr	r2, [pc, #424]	; (800a3a0 <HAL_RCC_OscConfig+0x26c>)
 800a1f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a1fa:	6013      	str	r3, [r2, #0]
 800a1fc:	4b68      	ldr	r3, [pc, #416]	; (800a3a0 <HAL_RCC_OscConfig+0x26c>)
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	4a67      	ldr	r2, [pc, #412]	; (800a3a0 <HAL_RCC_OscConfig+0x26c>)
 800a202:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a206:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	685b      	ldr	r3, [r3, #4]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d013      	beq.n	800a238 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a210:	f7fd fd9c 	bl	8007d4c <HAL_GetTick>
 800a214:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a216:	e008      	b.n	800a22a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a218:	f7fd fd98 	bl	8007d4c <HAL_GetTick>
 800a21c:	4602      	mov	r2, r0
 800a21e:	693b      	ldr	r3, [r7, #16]
 800a220:	1ad3      	subs	r3, r2, r3
 800a222:	2b64      	cmp	r3, #100	; 0x64
 800a224:	d901      	bls.n	800a22a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800a226:	2303      	movs	r3, #3
 800a228:	e200      	b.n	800a62c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a22a:	4b5d      	ldr	r3, [pc, #372]	; (800a3a0 <HAL_RCC_OscConfig+0x26c>)
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a232:	2b00      	cmp	r3, #0
 800a234:	d0f0      	beq.n	800a218 <HAL_RCC_OscConfig+0xe4>
 800a236:	e014      	b.n	800a262 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a238:	f7fd fd88 	bl	8007d4c <HAL_GetTick>
 800a23c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a23e:	e008      	b.n	800a252 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a240:	f7fd fd84 	bl	8007d4c <HAL_GetTick>
 800a244:	4602      	mov	r2, r0
 800a246:	693b      	ldr	r3, [r7, #16]
 800a248:	1ad3      	subs	r3, r2, r3
 800a24a:	2b64      	cmp	r3, #100	; 0x64
 800a24c:	d901      	bls.n	800a252 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800a24e:	2303      	movs	r3, #3
 800a250:	e1ec      	b.n	800a62c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a252:	4b53      	ldr	r3, [pc, #332]	; (800a3a0 <HAL_RCC_OscConfig+0x26c>)
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d1f0      	bne.n	800a240 <HAL_RCC_OscConfig+0x10c>
 800a25e:	e000      	b.n	800a262 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a260:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	f003 0302 	and.w	r3, r3, #2
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d063      	beq.n	800a336 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a26e:	4b4c      	ldr	r3, [pc, #304]	; (800a3a0 <HAL_RCC_OscConfig+0x26c>)
 800a270:	685b      	ldr	r3, [r3, #4]
 800a272:	f003 030c 	and.w	r3, r3, #12
 800a276:	2b00      	cmp	r3, #0
 800a278:	d00b      	beq.n	800a292 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800a27a:	4b49      	ldr	r3, [pc, #292]	; (800a3a0 <HAL_RCC_OscConfig+0x26c>)
 800a27c:	685b      	ldr	r3, [r3, #4]
 800a27e:	f003 030c 	and.w	r3, r3, #12
 800a282:	2b08      	cmp	r3, #8
 800a284:	d11c      	bne.n	800a2c0 <HAL_RCC_OscConfig+0x18c>
 800a286:	4b46      	ldr	r3, [pc, #280]	; (800a3a0 <HAL_RCC_OscConfig+0x26c>)
 800a288:	685b      	ldr	r3, [r3, #4]
 800a28a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d116      	bne.n	800a2c0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a292:	4b43      	ldr	r3, [pc, #268]	; (800a3a0 <HAL_RCC_OscConfig+0x26c>)
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	f003 0302 	and.w	r3, r3, #2
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d005      	beq.n	800a2aa <HAL_RCC_OscConfig+0x176>
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	691b      	ldr	r3, [r3, #16]
 800a2a2:	2b01      	cmp	r3, #1
 800a2a4:	d001      	beq.n	800a2aa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800a2a6:	2301      	movs	r3, #1
 800a2a8:	e1c0      	b.n	800a62c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a2aa:	4b3d      	ldr	r3, [pc, #244]	; (800a3a0 <HAL_RCC_OscConfig+0x26c>)
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	695b      	ldr	r3, [r3, #20]
 800a2b6:	00db      	lsls	r3, r3, #3
 800a2b8:	4939      	ldr	r1, [pc, #228]	; (800a3a0 <HAL_RCC_OscConfig+0x26c>)
 800a2ba:	4313      	orrs	r3, r2
 800a2bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a2be:	e03a      	b.n	800a336 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	691b      	ldr	r3, [r3, #16]
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d020      	beq.n	800a30a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a2c8:	4b36      	ldr	r3, [pc, #216]	; (800a3a4 <HAL_RCC_OscConfig+0x270>)
 800a2ca:	2201      	movs	r2, #1
 800a2cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a2ce:	f7fd fd3d 	bl	8007d4c <HAL_GetTick>
 800a2d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a2d4:	e008      	b.n	800a2e8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a2d6:	f7fd fd39 	bl	8007d4c <HAL_GetTick>
 800a2da:	4602      	mov	r2, r0
 800a2dc:	693b      	ldr	r3, [r7, #16]
 800a2de:	1ad3      	subs	r3, r2, r3
 800a2e0:	2b02      	cmp	r3, #2
 800a2e2:	d901      	bls.n	800a2e8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800a2e4:	2303      	movs	r3, #3
 800a2e6:	e1a1      	b.n	800a62c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a2e8:	4b2d      	ldr	r3, [pc, #180]	; (800a3a0 <HAL_RCC_OscConfig+0x26c>)
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	f003 0302 	and.w	r3, r3, #2
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d0f0      	beq.n	800a2d6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a2f4:	4b2a      	ldr	r3, [pc, #168]	; (800a3a0 <HAL_RCC_OscConfig+0x26c>)
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	695b      	ldr	r3, [r3, #20]
 800a300:	00db      	lsls	r3, r3, #3
 800a302:	4927      	ldr	r1, [pc, #156]	; (800a3a0 <HAL_RCC_OscConfig+0x26c>)
 800a304:	4313      	orrs	r3, r2
 800a306:	600b      	str	r3, [r1, #0]
 800a308:	e015      	b.n	800a336 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a30a:	4b26      	ldr	r3, [pc, #152]	; (800a3a4 <HAL_RCC_OscConfig+0x270>)
 800a30c:	2200      	movs	r2, #0
 800a30e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a310:	f7fd fd1c 	bl	8007d4c <HAL_GetTick>
 800a314:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a316:	e008      	b.n	800a32a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a318:	f7fd fd18 	bl	8007d4c <HAL_GetTick>
 800a31c:	4602      	mov	r2, r0
 800a31e:	693b      	ldr	r3, [r7, #16]
 800a320:	1ad3      	subs	r3, r2, r3
 800a322:	2b02      	cmp	r3, #2
 800a324:	d901      	bls.n	800a32a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800a326:	2303      	movs	r3, #3
 800a328:	e180      	b.n	800a62c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a32a:	4b1d      	ldr	r3, [pc, #116]	; (800a3a0 <HAL_RCC_OscConfig+0x26c>)
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	f003 0302 	and.w	r3, r3, #2
 800a332:	2b00      	cmp	r3, #0
 800a334:	d1f0      	bne.n	800a318 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	f003 0308 	and.w	r3, r3, #8
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d03a      	beq.n	800a3b8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	699b      	ldr	r3, [r3, #24]
 800a346:	2b00      	cmp	r3, #0
 800a348:	d019      	beq.n	800a37e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a34a:	4b17      	ldr	r3, [pc, #92]	; (800a3a8 <HAL_RCC_OscConfig+0x274>)
 800a34c:	2201      	movs	r2, #1
 800a34e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a350:	f7fd fcfc 	bl	8007d4c <HAL_GetTick>
 800a354:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a356:	e008      	b.n	800a36a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a358:	f7fd fcf8 	bl	8007d4c <HAL_GetTick>
 800a35c:	4602      	mov	r2, r0
 800a35e:	693b      	ldr	r3, [r7, #16]
 800a360:	1ad3      	subs	r3, r2, r3
 800a362:	2b02      	cmp	r3, #2
 800a364:	d901      	bls.n	800a36a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800a366:	2303      	movs	r3, #3
 800a368:	e160      	b.n	800a62c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a36a:	4b0d      	ldr	r3, [pc, #52]	; (800a3a0 <HAL_RCC_OscConfig+0x26c>)
 800a36c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a36e:	f003 0302 	and.w	r3, r3, #2
 800a372:	2b00      	cmp	r3, #0
 800a374:	d0f0      	beq.n	800a358 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800a376:	2001      	movs	r0, #1
 800a378:	f000 face 	bl	800a918 <RCC_Delay>
 800a37c:	e01c      	b.n	800a3b8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a37e:	4b0a      	ldr	r3, [pc, #40]	; (800a3a8 <HAL_RCC_OscConfig+0x274>)
 800a380:	2200      	movs	r2, #0
 800a382:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a384:	f7fd fce2 	bl	8007d4c <HAL_GetTick>
 800a388:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a38a:	e00f      	b.n	800a3ac <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a38c:	f7fd fcde 	bl	8007d4c <HAL_GetTick>
 800a390:	4602      	mov	r2, r0
 800a392:	693b      	ldr	r3, [r7, #16]
 800a394:	1ad3      	subs	r3, r2, r3
 800a396:	2b02      	cmp	r3, #2
 800a398:	d908      	bls.n	800a3ac <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800a39a:	2303      	movs	r3, #3
 800a39c:	e146      	b.n	800a62c <HAL_RCC_OscConfig+0x4f8>
 800a39e:	bf00      	nop
 800a3a0:	40021000 	.word	0x40021000
 800a3a4:	42420000 	.word	0x42420000
 800a3a8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a3ac:	4b92      	ldr	r3, [pc, #584]	; (800a5f8 <HAL_RCC_OscConfig+0x4c4>)
 800a3ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3b0:	f003 0302 	and.w	r3, r3, #2
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d1e9      	bne.n	800a38c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	f003 0304 	and.w	r3, r3, #4
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	f000 80a6 	beq.w	800a512 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a3c6:	2300      	movs	r3, #0
 800a3c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a3ca:	4b8b      	ldr	r3, [pc, #556]	; (800a5f8 <HAL_RCC_OscConfig+0x4c4>)
 800a3cc:	69db      	ldr	r3, [r3, #28]
 800a3ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d10d      	bne.n	800a3f2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a3d6:	4b88      	ldr	r3, [pc, #544]	; (800a5f8 <HAL_RCC_OscConfig+0x4c4>)
 800a3d8:	69db      	ldr	r3, [r3, #28]
 800a3da:	4a87      	ldr	r2, [pc, #540]	; (800a5f8 <HAL_RCC_OscConfig+0x4c4>)
 800a3dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a3e0:	61d3      	str	r3, [r2, #28]
 800a3e2:	4b85      	ldr	r3, [pc, #532]	; (800a5f8 <HAL_RCC_OscConfig+0x4c4>)
 800a3e4:	69db      	ldr	r3, [r3, #28]
 800a3e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a3ea:	60bb      	str	r3, [r7, #8]
 800a3ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a3ee:	2301      	movs	r3, #1
 800a3f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a3f2:	4b82      	ldr	r3, [pc, #520]	; (800a5fc <HAL_RCC_OscConfig+0x4c8>)
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d118      	bne.n	800a430 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a3fe:	4b7f      	ldr	r3, [pc, #508]	; (800a5fc <HAL_RCC_OscConfig+0x4c8>)
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	4a7e      	ldr	r2, [pc, #504]	; (800a5fc <HAL_RCC_OscConfig+0x4c8>)
 800a404:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a408:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a40a:	f7fd fc9f 	bl	8007d4c <HAL_GetTick>
 800a40e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a410:	e008      	b.n	800a424 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a412:	f7fd fc9b 	bl	8007d4c <HAL_GetTick>
 800a416:	4602      	mov	r2, r0
 800a418:	693b      	ldr	r3, [r7, #16]
 800a41a:	1ad3      	subs	r3, r2, r3
 800a41c:	2b64      	cmp	r3, #100	; 0x64
 800a41e:	d901      	bls.n	800a424 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800a420:	2303      	movs	r3, #3
 800a422:	e103      	b.n	800a62c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a424:	4b75      	ldr	r3, [pc, #468]	; (800a5fc <HAL_RCC_OscConfig+0x4c8>)
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d0f0      	beq.n	800a412 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	68db      	ldr	r3, [r3, #12]
 800a434:	2b01      	cmp	r3, #1
 800a436:	d106      	bne.n	800a446 <HAL_RCC_OscConfig+0x312>
 800a438:	4b6f      	ldr	r3, [pc, #444]	; (800a5f8 <HAL_RCC_OscConfig+0x4c4>)
 800a43a:	6a1b      	ldr	r3, [r3, #32]
 800a43c:	4a6e      	ldr	r2, [pc, #440]	; (800a5f8 <HAL_RCC_OscConfig+0x4c4>)
 800a43e:	f043 0301 	orr.w	r3, r3, #1
 800a442:	6213      	str	r3, [r2, #32]
 800a444:	e02d      	b.n	800a4a2 <HAL_RCC_OscConfig+0x36e>
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	68db      	ldr	r3, [r3, #12]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d10c      	bne.n	800a468 <HAL_RCC_OscConfig+0x334>
 800a44e:	4b6a      	ldr	r3, [pc, #424]	; (800a5f8 <HAL_RCC_OscConfig+0x4c4>)
 800a450:	6a1b      	ldr	r3, [r3, #32]
 800a452:	4a69      	ldr	r2, [pc, #420]	; (800a5f8 <HAL_RCC_OscConfig+0x4c4>)
 800a454:	f023 0301 	bic.w	r3, r3, #1
 800a458:	6213      	str	r3, [r2, #32]
 800a45a:	4b67      	ldr	r3, [pc, #412]	; (800a5f8 <HAL_RCC_OscConfig+0x4c4>)
 800a45c:	6a1b      	ldr	r3, [r3, #32]
 800a45e:	4a66      	ldr	r2, [pc, #408]	; (800a5f8 <HAL_RCC_OscConfig+0x4c4>)
 800a460:	f023 0304 	bic.w	r3, r3, #4
 800a464:	6213      	str	r3, [r2, #32]
 800a466:	e01c      	b.n	800a4a2 <HAL_RCC_OscConfig+0x36e>
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	68db      	ldr	r3, [r3, #12]
 800a46c:	2b05      	cmp	r3, #5
 800a46e:	d10c      	bne.n	800a48a <HAL_RCC_OscConfig+0x356>
 800a470:	4b61      	ldr	r3, [pc, #388]	; (800a5f8 <HAL_RCC_OscConfig+0x4c4>)
 800a472:	6a1b      	ldr	r3, [r3, #32]
 800a474:	4a60      	ldr	r2, [pc, #384]	; (800a5f8 <HAL_RCC_OscConfig+0x4c4>)
 800a476:	f043 0304 	orr.w	r3, r3, #4
 800a47a:	6213      	str	r3, [r2, #32]
 800a47c:	4b5e      	ldr	r3, [pc, #376]	; (800a5f8 <HAL_RCC_OscConfig+0x4c4>)
 800a47e:	6a1b      	ldr	r3, [r3, #32]
 800a480:	4a5d      	ldr	r2, [pc, #372]	; (800a5f8 <HAL_RCC_OscConfig+0x4c4>)
 800a482:	f043 0301 	orr.w	r3, r3, #1
 800a486:	6213      	str	r3, [r2, #32]
 800a488:	e00b      	b.n	800a4a2 <HAL_RCC_OscConfig+0x36e>
 800a48a:	4b5b      	ldr	r3, [pc, #364]	; (800a5f8 <HAL_RCC_OscConfig+0x4c4>)
 800a48c:	6a1b      	ldr	r3, [r3, #32]
 800a48e:	4a5a      	ldr	r2, [pc, #360]	; (800a5f8 <HAL_RCC_OscConfig+0x4c4>)
 800a490:	f023 0301 	bic.w	r3, r3, #1
 800a494:	6213      	str	r3, [r2, #32]
 800a496:	4b58      	ldr	r3, [pc, #352]	; (800a5f8 <HAL_RCC_OscConfig+0x4c4>)
 800a498:	6a1b      	ldr	r3, [r3, #32]
 800a49a:	4a57      	ldr	r2, [pc, #348]	; (800a5f8 <HAL_RCC_OscConfig+0x4c4>)
 800a49c:	f023 0304 	bic.w	r3, r3, #4
 800a4a0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	68db      	ldr	r3, [r3, #12]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d015      	beq.n	800a4d6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a4aa:	f7fd fc4f 	bl	8007d4c <HAL_GetTick>
 800a4ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a4b0:	e00a      	b.n	800a4c8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a4b2:	f7fd fc4b 	bl	8007d4c <HAL_GetTick>
 800a4b6:	4602      	mov	r2, r0
 800a4b8:	693b      	ldr	r3, [r7, #16]
 800a4ba:	1ad3      	subs	r3, r2, r3
 800a4bc:	f241 3288 	movw	r2, #5000	; 0x1388
 800a4c0:	4293      	cmp	r3, r2
 800a4c2:	d901      	bls.n	800a4c8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800a4c4:	2303      	movs	r3, #3
 800a4c6:	e0b1      	b.n	800a62c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a4c8:	4b4b      	ldr	r3, [pc, #300]	; (800a5f8 <HAL_RCC_OscConfig+0x4c4>)
 800a4ca:	6a1b      	ldr	r3, [r3, #32]
 800a4cc:	f003 0302 	and.w	r3, r3, #2
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d0ee      	beq.n	800a4b2 <HAL_RCC_OscConfig+0x37e>
 800a4d4:	e014      	b.n	800a500 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a4d6:	f7fd fc39 	bl	8007d4c <HAL_GetTick>
 800a4da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a4dc:	e00a      	b.n	800a4f4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a4de:	f7fd fc35 	bl	8007d4c <HAL_GetTick>
 800a4e2:	4602      	mov	r2, r0
 800a4e4:	693b      	ldr	r3, [r7, #16]
 800a4e6:	1ad3      	subs	r3, r2, r3
 800a4e8:	f241 3288 	movw	r2, #5000	; 0x1388
 800a4ec:	4293      	cmp	r3, r2
 800a4ee:	d901      	bls.n	800a4f4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800a4f0:	2303      	movs	r3, #3
 800a4f2:	e09b      	b.n	800a62c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a4f4:	4b40      	ldr	r3, [pc, #256]	; (800a5f8 <HAL_RCC_OscConfig+0x4c4>)
 800a4f6:	6a1b      	ldr	r3, [r3, #32]
 800a4f8:	f003 0302 	and.w	r3, r3, #2
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d1ee      	bne.n	800a4de <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800a500:	7dfb      	ldrb	r3, [r7, #23]
 800a502:	2b01      	cmp	r3, #1
 800a504:	d105      	bne.n	800a512 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a506:	4b3c      	ldr	r3, [pc, #240]	; (800a5f8 <HAL_RCC_OscConfig+0x4c4>)
 800a508:	69db      	ldr	r3, [r3, #28]
 800a50a:	4a3b      	ldr	r2, [pc, #236]	; (800a5f8 <HAL_RCC_OscConfig+0x4c4>)
 800a50c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a510:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	69db      	ldr	r3, [r3, #28]
 800a516:	2b00      	cmp	r3, #0
 800a518:	f000 8087 	beq.w	800a62a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a51c:	4b36      	ldr	r3, [pc, #216]	; (800a5f8 <HAL_RCC_OscConfig+0x4c4>)
 800a51e:	685b      	ldr	r3, [r3, #4]
 800a520:	f003 030c 	and.w	r3, r3, #12
 800a524:	2b08      	cmp	r3, #8
 800a526:	d061      	beq.n	800a5ec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	69db      	ldr	r3, [r3, #28]
 800a52c:	2b02      	cmp	r3, #2
 800a52e:	d146      	bne.n	800a5be <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a530:	4b33      	ldr	r3, [pc, #204]	; (800a600 <HAL_RCC_OscConfig+0x4cc>)
 800a532:	2200      	movs	r2, #0
 800a534:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a536:	f7fd fc09 	bl	8007d4c <HAL_GetTick>
 800a53a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a53c:	e008      	b.n	800a550 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a53e:	f7fd fc05 	bl	8007d4c <HAL_GetTick>
 800a542:	4602      	mov	r2, r0
 800a544:	693b      	ldr	r3, [r7, #16]
 800a546:	1ad3      	subs	r3, r2, r3
 800a548:	2b02      	cmp	r3, #2
 800a54a:	d901      	bls.n	800a550 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800a54c:	2303      	movs	r3, #3
 800a54e:	e06d      	b.n	800a62c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a550:	4b29      	ldr	r3, [pc, #164]	; (800a5f8 <HAL_RCC_OscConfig+0x4c4>)
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d1f0      	bne.n	800a53e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	6a1b      	ldr	r3, [r3, #32]
 800a560:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a564:	d108      	bne.n	800a578 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800a566:	4b24      	ldr	r3, [pc, #144]	; (800a5f8 <HAL_RCC_OscConfig+0x4c4>)
 800a568:	685b      	ldr	r3, [r3, #4]
 800a56a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	689b      	ldr	r3, [r3, #8]
 800a572:	4921      	ldr	r1, [pc, #132]	; (800a5f8 <HAL_RCC_OscConfig+0x4c4>)
 800a574:	4313      	orrs	r3, r2
 800a576:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a578:	4b1f      	ldr	r3, [pc, #124]	; (800a5f8 <HAL_RCC_OscConfig+0x4c4>)
 800a57a:	685b      	ldr	r3, [r3, #4]
 800a57c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	6a19      	ldr	r1, [r3, #32]
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a588:	430b      	orrs	r3, r1
 800a58a:	491b      	ldr	r1, [pc, #108]	; (800a5f8 <HAL_RCC_OscConfig+0x4c4>)
 800a58c:	4313      	orrs	r3, r2
 800a58e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a590:	4b1b      	ldr	r3, [pc, #108]	; (800a600 <HAL_RCC_OscConfig+0x4cc>)
 800a592:	2201      	movs	r2, #1
 800a594:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a596:	f7fd fbd9 	bl	8007d4c <HAL_GetTick>
 800a59a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800a59c:	e008      	b.n	800a5b0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a59e:	f7fd fbd5 	bl	8007d4c <HAL_GetTick>
 800a5a2:	4602      	mov	r2, r0
 800a5a4:	693b      	ldr	r3, [r7, #16]
 800a5a6:	1ad3      	subs	r3, r2, r3
 800a5a8:	2b02      	cmp	r3, #2
 800a5aa:	d901      	bls.n	800a5b0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800a5ac:	2303      	movs	r3, #3
 800a5ae:	e03d      	b.n	800a62c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800a5b0:	4b11      	ldr	r3, [pc, #68]	; (800a5f8 <HAL_RCC_OscConfig+0x4c4>)
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d0f0      	beq.n	800a59e <HAL_RCC_OscConfig+0x46a>
 800a5bc:	e035      	b.n	800a62a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a5be:	4b10      	ldr	r3, [pc, #64]	; (800a600 <HAL_RCC_OscConfig+0x4cc>)
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a5c4:	f7fd fbc2 	bl	8007d4c <HAL_GetTick>
 800a5c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a5ca:	e008      	b.n	800a5de <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a5cc:	f7fd fbbe 	bl	8007d4c <HAL_GetTick>
 800a5d0:	4602      	mov	r2, r0
 800a5d2:	693b      	ldr	r3, [r7, #16]
 800a5d4:	1ad3      	subs	r3, r2, r3
 800a5d6:	2b02      	cmp	r3, #2
 800a5d8:	d901      	bls.n	800a5de <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800a5da:	2303      	movs	r3, #3
 800a5dc:	e026      	b.n	800a62c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a5de:	4b06      	ldr	r3, [pc, #24]	; (800a5f8 <HAL_RCC_OscConfig+0x4c4>)
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d1f0      	bne.n	800a5cc <HAL_RCC_OscConfig+0x498>
 800a5ea:	e01e      	b.n	800a62a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	69db      	ldr	r3, [r3, #28]
 800a5f0:	2b01      	cmp	r3, #1
 800a5f2:	d107      	bne.n	800a604 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800a5f4:	2301      	movs	r3, #1
 800a5f6:	e019      	b.n	800a62c <HAL_RCC_OscConfig+0x4f8>
 800a5f8:	40021000 	.word	0x40021000
 800a5fc:	40007000 	.word	0x40007000
 800a600:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800a604:	4b0b      	ldr	r3, [pc, #44]	; (800a634 <HAL_RCC_OscConfig+0x500>)
 800a606:	685b      	ldr	r3, [r3, #4]
 800a608:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	6a1b      	ldr	r3, [r3, #32]
 800a614:	429a      	cmp	r2, r3
 800a616:	d106      	bne.n	800a626 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a622:	429a      	cmp	r2, r3
 800a624:	d001      	beq.n	800a62a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800a626:	2301      	movs	r3, #1
 800a628:	e000      	b.n	800a62c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800a62a:	2300      	movs	r3, #0
}
 800a62c:	4618      	mov	r0, r3
 800a62e:	3718      	adds	r7, #24
 800a630:	46bd      	mov	sp, r7
 800a632:	bd80      	pop	{r7, pc}
 800a634:	40021000 	.word	0x40021000

0800a638 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a638:	b580      	push	{r7, lr}
 800a63a:	b084      	sub	sp, #16
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	6078      	str	r0, [r7, #4]
 800a640:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	2b00      	cmp	r3, #0
 800a646:	d101      	bne.n	800a64c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a648:	2301      	movs	r3, #1
 800a64a:	e0d0      	b.n	800a7ee <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a64c:	4b6a      	ldr	r3, [pc, #424]	; (800a7f8 <HAL_RCC_ClockConfig+0x1c0>)
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	f003 0307 	and.w	r3, r3, #7
 800a654:	683a      	ldr	r2, [r7, #0]
 800a656:	429a      	cmp	r2, r3
 800a658:	d910      	bls.n	800a67c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a65a:	4b67      	ldr	r3, [pc, #412]	; (800a7f8 <HAL_RCC_ClockConfig+0x1c0>)
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	f023 0207 	bic.w	r2, r3, #7
 800a662:	4965      	ldr	r1, [pc, #404]	; (800a7f8 <HAL_RCC_ClockConfig+0x1c0>)
 800a664:	683b      	ldr	r3, [r7, #0]
 800a666:	4313      	orrs	r3, r2
 800a668:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a66a:	4b63      	ldr	r3, [pc, #396]	; (800a7f8 <HAL_RCC_ClockConfig+0x1c0>)
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	f003 0307 	and.w	r3, r3, #7
 800a672:	683a      	ldr	r2, [r7, #0]
 800a674:	429a      	cmp	r2, r3
 800a676:	d001      	beq.n	800a67c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800a678:	2301      	movs	r3, #1
 800a67a:	e0b8      	b.n	800a7ee <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	f003 0302 	and.w	r3, r3, #2
 800a684:	2b00      	cmp	r3, #0
 800a686:	d020      	beq.n	800a6ca <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	f003 0304 	and.w	r3, r3, #4
 800a690:	2b00      	cmp	r3, #0
 800a692:	d005      	beq.n	800a6a0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a694:	4b59      	ldr	r3, [pc, #356]	; (800a7fc <HAL_RCC_ClockConfig+0x1c4>)
 800a696:	685b      	ldr	r3, [r3, #4]
 800a698:	4a58      	ldr	r2, [pc, #352]	; (800a7fc <HAL_RCC_ClockConfig+0x1c4>)
 800a69a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800a69e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	f003 0308 	and.w	r3, r3, #8
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d005      	beq.n	800a6b8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a6ac:	4b53      	ldr	r3, [pc, #332]	; (800a7fc <HAL_RCC_ClockConfig+0x1c4>)
 800a6ae:	685b      	ldr	r3, [r3, #4]
 800a6b0:	4a52      	ldr	r2, [pc, #328]	; (800a7fc <HAL_RCC_ClockConfig+0x1c4>)
 800a6b2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800a6b6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a6b8:	4b50      	ldr	r3, [pc, #320]	; (800a7fc <HAL_RCC_ClockConfig+0x1c4>)
 800a6ba:	685b      	ldr	r3, [r3, #4]
 800a6bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	689b      	ldr	r3, [r3, #8]
 800a6c4:	494d      	ldr	r1, [pc, #308]	; (800a7fc <HAL_RCC_ClockConfig+0x1c4>)
 800a6c6:	4313      	orrs	r3, r2
 800a6c8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	f003 0301 	and.w	r3, r3, #1
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d040      	beq.n	800a758 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	685b      	ldr	r3, [r3, #4]
 800a6da:	2b01      	cmp	r3, #1
 800a6dc:	d107      	bne.n	800a6ee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a6de:	4b47      	ldr	r3, [pc, #284]	; (800a7fc <HAL_RCC_ClockConfig+0x1c4>)
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d115      	bne.n	800a716 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a6ea:	2301      	movs	r3, #1
 800a6ec:	e07f      	b.n	800a7ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	685b      	ldr	r3, [r3, #4]
 800a6f2:	2b02      	cmp	r3, #2
 800a6f4:	d107      	bne.n	800a706 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a6f6:	4b41      	ldr	r3, [pc, #260]	; (800a7fc <HAL_RCC_ClockConfig+0x1c4>)
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d109      	bne.n	800a716 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a702:	2301      	movs	r3, #1
 800a704:	e073      	b.n	800a7ee <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a706:	4b3d      	ldr	r3, [pc, #244]	; (800a7fc <HAL_RCC_ClockConfig+0x1c4>)
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	f003 0302 	and.w	r3, r3, #2
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d101      	bne.n	800a716 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a712:	2301      	movs	r3, #1
 800a714:	e06b      	b.n	800a7ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a716:	4b39      	ldr	r3, [pc, #228]	; (800a7fc <HAL_RCC_ClockConfig+0x1c4>)
 800a718:	685b      	ldr	r3, [r3, #4]
 800a71a:	f023 0203 	bic.w	r2, r3, #3
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	685b      	ldr	r3, [r3, #4]
 800a722:	4936      	ldr	r1, [pc, #216]	; (800a7fc <HAL_RCC_ClockConfig+0x1c4>)
 800a724:	4313      	orrs	r3, r2
 800a726:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a728:	f7fd fb10 	bl	8007d4c <HAL_GetTick>
 800a72c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a72e:	e00a      	b.n	800a746 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a730:	f7fd fb0c 	bl	8007d4c <HAL_GetTick>
 800a734:	4602      	mov	r2, r0
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	1ad3      	subs	r3, r2, r3
 800a73a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a73e:	4293      	cmp	r3, r2
 800a740:	d901      	bls.n	800a746 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a742:	2303      	movs	r3, #3
 800a744:	e053      	b.n	800a7ee <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a746:	4b2d      	ldr	r3, [pc, #180]	; (800a7fc <HAL_RCC_ClockConfig+0x1c4>)
 800a748:	685b      	ldr	r3, [r3, #4]
 800a74a:	f003 020c 	and.w	r2, r3, #12
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	685b      	ldr	r3, [r3, #4]
 800a752:	009b      	lsls	r3, r3, #2
 800a754:	429a      	cmp	r2, r3
 800a756:	d1eb      	bne.n	800a730 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a758:	4b27      	ldr	r3, [pc, #156]	; (800a7f8 <HAL_RCC_ClockConfig+0x1c0>)
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	f003 0307 	and.w	r3, r3, #7
 800a760:	683a      	ldr	r2, [r7, #0]
 800a762:	429a      	cmp	r2, r3
 800a764:	d210      	bcs.n	800a788 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a766:	4b24      	ldr	r3, [pc, #144]	; (800a7f8 <HAL_RCC_ClockConfig+0x1c0>)
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	f023 0207 	bic.w	r2, r3, #7
 800a76e:	4922      	ldr	r1, [pc, #136]	; (800a7f8 <HAL_RCC_ClockConfig+0x1c0>)
 800a770:	683b      	ldr	r3, [r7, #0]
 800a772:	4313      	orrs	r3, r2
 800a774:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a776:	4b20      	ldr	r3, [pc, #128]	; (800a7f8 <HAL_RCC_ClockConfig+0x1c0>)
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	f003 0307 	and.w	r3, r3, #7
 800a77e:	683a      	ldr	r2, [r7, #0]
 800a780:	429a      	cmp	r2, r3
 800a782:	d001      	beq.n	800a788 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800a784:	2301      	movs	r3, #1
 800a786:	e032      	b.n	800a7ee <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	f003 0304 	and.w	r3, r3, #4
 800a790:	2b00      	cmp	r3, #0
 800a792:	d008      	beq.n	800a7a6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a794:	4b19      	ldr	r3, [pc, #100]	; (800a7fc <HAL_RCC_ClockConfig+0x1c4>)
 800a796:	685b      	ldr	r3, [r3, #4]
 800a798:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	68db      	ldr	r3, [r3, #12]
 800a7a0:	4916      	ldr	r1, [pc, #88]	; (800a7fc <HAL_RCC_ClockConfig+0x1c4>)
 800a7a2:	4313      	orrs	r3, r2
 800a7a4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	f003 0308 	and.w	r3, r3, #8
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d009      	beq.n	800a7c6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800a7b2:	4b12      	ldr	r3, [pc, #72]	; (800a7fc <HAL_RCC_ClockConfig+0x1c4>)
 800a7b4:	685b      	ldr	r3, [r3, #4]
 800a7b6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	691b      	ldr	r3, [r3, #16]
 800a7be:	00db      	lsls	r3, r3, #3
 800a7c0:	490e      	ldr	r1, [pc, #56]	; (800a7fc <HAL_RCC_ClockConfig+0x1c4>)
 800a7c2:	4313      	orrs	r3, r2
 800a7c4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800a7c6:	f000 f821 	bl	800a80c <HAL_RCC_GetSysClockFreq>
 800a7ca:	4602      	mov	r2, r0
 800a7cc:	4b0b      	ldr	r3, [pc, #44]	; (800a7fc <HAL_RCC_ClockConfig+0x1c4>)
 800a7ce:	685b      	ldr	r3, [r3, #4]
 800a7d0:	091b      	lsrs	r3, r3, #4
 800a7d2:	f003 030f 	and.w	r3, r3, #15
 800a7d6:	490a      	ldr	r1, [pc, #40]	; (800a800 <HAL_RCC_ClockConfig+0x1c8>)
 800a7d8:	5ccb      	ldrb	r3, [r1, r3]
 800a7da:	fa22 f303 	lsr.w	r3, r2, r3
 800a7de:	4a09      	ldr	r2, [pc, #36]	; (800a804 <HAL_RCC_ClockConfig+0x1cc>)
 800a7e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800a7e2:	4b09      	ldr	r3, [pc, #36]	; (800a808 <HAL_RCC_ClockConfig+0x1d0>)
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	f7fd fa6e 	bl	8007cc8 <HAL_InitTick>

  return HAL_OK;
 800a7ec:	2300      	movs	r3, #0
}
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	3710      	adds	r7, #16
 800a7f2:	46bd      	mov	sp, r7
 800a7f4:	bd80      	pop	{r7, pc}
 800a7f6:	bf00      	nop
 800a7f8:	40022000 	.word	0x40022000
 800a7fc:	40021000 	.word	0x40021000
 800a800:	0800f5bc 	.word	0x0800f5bc
 800a804:	20000490 	.word	0x20000490
 800a808:	200004d8 	.word	0x200004d8

0800a80c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a80c:	b480      	push	{r7}
 800a80e:	b087      	sub	sp, #28
 800a810:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800a812:	2300      	movs	r3, #0
 800a814:	60fb      	str	r3, [r7, #12]
 800a816:	2300      	movs	r3, #0
 800a818:	60bb      	str	r3, [r7, #8]
 800a81a:	2300      	movs	r3, #0
 800a81c:	617b      	str	r3, [r7, #20]
 800a81e:	2300      	movs	r3, #0
 800a820:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800a822:	2300      	movs	r3, #0
 800a824:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800a826:	4b1e      	ldr	r3, [pc, #120]	; (800a8a0 <HAL_RCC_GetSysClockFreq+0x94>)
 800a828:	685b      	ldr	r3, [r3, #4]
 800a82a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	f003 030c 	and.w	r3, r3, #12
 800a832:	2b04      	cmp	r3, #4
 800a834:	d002      	beq.n	800a83c <HAL_RCC_GetSysClockFreq+0x30>
 800a836:	2b08      	cmp	r3, #8
 800a838:	d003      	beq.n	800a842 <HAL_RCC_GetSysClockFreq+0x36>
 800a83a:	e027      	b.n	800a88c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800a83c:	4b19      	ldr	r3, [pc, #100]	; (800a8a4 <HAL_RCC_GetSysClockFreq+0x98>)
 800a83e:	613b      	str	r3, [r7, #16]
      break;
 800a840:	e027      	b.n	800a892 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	0c9b      	lsrs	r3, r3, #18
 800a846:	f003 030f 	and.w	r3, r3, #15
 800a84a:	4a17      	ldr	r2, [pc, #92]	; (800a8a8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800a84c:	5cd3      	ldrb	r3, [r2, r3]
 800a84e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a856:	2b00      	cmp	r3, #0
 800a858:	d010      	beq.n	800a87c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800a85a:	4b11      	ldr	r3, [pc, #68]	; (800a8a0 <HAL_RCC_GetSysClockFreq+0x94>)
 800a85c:	685b      	ldr	r3, [r3, #4]
 800a85e:	0c5b      	lsrs	r3, r3, #17
 800a860:	f003 0301 	and.w	r3, r3, #1
 800a864:	4a11      	ldr	r2, [pc, #68]	; (800a8ac <HAL_RCC_GetSysClockFreq+0xa0>)
 800a866:	5cd3      	ldrb	r3, [r2, r3]
 800a868:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	4a0d      	ldr	r2, [pc, #52]	; (800a8a4 <HAL_RCC_GetSysClockFreq+0x98>)
 800a86e:	fb03 f202 	mul.w	r2, r3, r2
 800a872:	68bb      	ldr	r3, [r7, #8]
 800a874:	fbb2 f3f3 	udiv	r3, r2, r3
 800a878:	617b      	str	r3, [r7, #20]
 800a87a:	e004      	b.n	800a886 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	4a0c      	ldr	r2, [pc, #48]	; (800a8b0 <HAL_RCC_GetSysClockFreq+0xa4>)
 800a880:	fb02 f303 	mul.w	r3, r2, r3
 800a884:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800a886:	697b      	ldr	r3, [r7, #20]
 800a888:	613b      	str	r3, [r7, #16]
      break;
 800a88a:	e002      	b.n	800a892 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800a88c:	4b05      	ldr	r3, [pc, #20]	; (800a8a4 <HAL_RCC_GetSysClockFreq+0x98>)
 800a88e:	613b      	str	r3, [r7, #16]
      break;
 800a890:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a892:	693b      	ldr	r3, [r7, #16]
}
 800a894:	4618      	mov	r0, r3
 800a896:	371c      	adds	r7, #28
 800a898:	46bd      	mov	sp, r7
 800a89a:	bc80      	pop	{r7}
 800a89c:	4770      	bx	lr
 800a89e:	bf00      	nop
 800a8a0:	40021000 	.word	0x40021000
 800a8a4:	007a1200 	.word	0x007a1200
 800a8a8:	0800f5d4 	.word	0x0800f5d4
 800a8ac:	0800f5e4 	.word	0x0800f5e4
 800a8b0:	003d0900 	.word	0x003d0900

0800a8b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a8b4:	b480      	push	{r7}
 800a8b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a8b8:	4b02      	ldr	r3, [pc, #8]	; (800a8c4 <HAL_RCC_GetHCLKFreq+0x10>)
 800a8ba:	681b      	ldr	r3, [r3, #0]
}
 800a8bc:	4618      	mov	r0, r3
 800a8be:	46bd      	mov	sp, r7
 800a8c0:	bc80      	pop	{r7}
 800a8c2:	4770      	bx	lr
 800a8c4:	20000490 	.word	0x20000490

0800a8c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a8c8:	b580      	push	{r7, lr}
 800a8ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800a8cc:	f7ff fff2 	bl	800a8b4 <HAL_RCC_GetHCLKFreq>
 800a8d0:	4602      	mov	r2, r0
 800a8d2:	4b05      	ldr	r3, [pc, #20]	; (800a8e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a8d4:	685b      	ldr	r3, [r3, #4]
 800a8d6:	0a1b      	lsrs	r3, r3, #8
 800a8d8:	f003 0307 	and.w	r3, r3, #7
 800a8dc:	4903      	ldr	r1, [pc, #12]	; (800a8ec <HAL_RCC_GetPCLK1Freq+0x24>)
 800a8de:	5ccb      	ldrb	r3, [r1, r3]
 800a8e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a8e4:	4618      	mov	r0, r3
 800a8e6:	bd80      	pop	{r7, pc}
 800a8e8:	40021000 	.word	0x40021000
 800a8ec:	0800f5cc 	.word	0x0800f5cc

0800a8f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a8f0:	b580      	push	{r7, lr}
 800a8f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800a8f4:	f7ff ffde 	bl	800a8b4 <HAL_RCC_GetHCLKFreq>
 800a8f8:	4602      	mov	r2, r0
 800a8fa:	4b05      	ldr	r3, [pc, #20]	; (800a910 <HAL_RCC_GetPCLK2Freq+0x20>)
 800a8fc:	685b      	ldr	r3, [r3, #4]
 800a8fe:	0adb      	lsrs	r3, r3, #11
 800a900:	f003 0307 	and.w	r3, r3, #7
 800a904:	4903      	ldr	r1, [pc, #12]	; (800a914 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a906:	5ccb      	ldrb	r3, [r1, r3]
 800a908:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a90c:	4618      	mov	r0, r3
 800a90e:	bd80      	pop	{r7, pc}
 800a910:	40021000 	.word	0x40021000
 800a914:	0800f5cc 	.word	0x0800f5cc

0800a918 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800a918:	b480      	push	{r7}
 800a91a:	b085      	sub	sp, #20
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800a920:	4b0a      	ldr	r3, [pc, #40]	; (800a94c <RCC_Delay+0x34>)
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	4a0a      	ldr	r2, [pc, #40]	; (800a950 <RCC_Delay+0x38>)
 800a926:	fba2 2303 	umull	r2, r3, r2, r3
 800a92a:	0a5b      	lsrs	r3, r3, #9
 800a92c:	687a      	ldr	r2, [r7, #4]
 800a92e:	fb02 f303 	mul.w	r3, r2, r3
 800a932:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800a934:	bf00      	nop
  }
  while (Delay --);
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	1e5a      	subs	r2, r3, #1
 800a93a:	60fa      	str	r2, [r7, #12]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d1f9      	bne.n	800a934 <RCC_Delay+0x1c>
}
 800a940:	bf00      	nop
 800a942:	bf00      	nop
 800a944:	3714      	adds	r7, #20
 800a946:	46bd      	mov	sp, r7
 800a948:	bc80      	pop	{r7}
 800a94a:	4770      	bx	lr
 800a94c:	20000490 	.word	0x20000490
 800a950:	10624dd3 	.word	0x10624dd3

0800a954 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a954:	b580      	push	{r7, lr}
 800a956:	b086      	sub	sp, #24
 800a958:	af00      	add	r7, sp, #0
 800a95a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800a95c:	2300      	movs	r3, #0
 800a95e:	613b      	str	r3, [r7, #16]
 800a960:	2300      	movs	r3, #0
 800a962:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	f003 0301 	and.w	r3, r3, #1
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d07d      	beq.n	800aa6c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800a970:	2300      	movs	r3, #0
 800a972:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a974:	4b4f      	ldr	r3, [pc, #316]	; (800aab4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a976:	69db      	ldr	r3, [r3, #28]
 800a978:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d10d      	bne.n	800a99c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a980:	4b4c      	ldr	r3, [pc, #304]	; (800aab4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a982:	69db      	ldr	r3, [r3, #28]
 800a984:	4a4b      	ldr	r2, [pc, #300]	; (800aab4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a986:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a98a:	61d3      	str	r3, [r2, #28]
 800a98c:	4b49      	ldr	r3, [pc, #292]	; (800aab4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a98e:	69db      	ldr	r3, [r3, #28]
 800a990:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a994:	60bb      	str	r3, [r7, #8]
 800a996:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a998:	2301      	movs	r3, #1
 800a99a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a99c:	4b46      	ldr	r3, [pc, #280]	; (800aab8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d118      	bne.n	800a9da <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a9a8:	4b43      	ldr	r3, [pc, #268]	; (800aab8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	4a42      	ldr	r2, [pc, #264]	; (800aab8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800a9ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a9b2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a9b4:	f7fd f9ca 	bl	8007d4c <HAL_GetTick>
 800a9b8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a9ba:	e008      	b.n	800a9ce <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a9bc:	f7fd f9c6 	bl	8007d4c <HAL_GetTick>
 800a9c0:	4602      	mov	r2, r0
 800a9c2:	693b      	ldr	r3, [r7, #16]
 800a9c4:	1ad3      	subs	r3, r2, r3
 800a9c6:	2b64      	cmp	r3, #100	; 0x64
 800a9c8:	d901      	bls.n	800a9ce <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800a9ca:	2303      	movs	r3, #3
 800a9cc:	e06d      	b.n	800aaaa <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a9ce:	4b3a      	ldr	r3, [pc, #232]	; (800aab8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d0f0      	beq.n	800a9bc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800a9da:	4b36      	ldr	r3, [pc, #216]	; (800aab4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a9dc:	6a1b      	ldr	r3, [r3, #32]
 800a9de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a9e2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d02e      	beq.n	800aa48 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	685b      	ldr	r3, [r3, #4]
 800a9ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a9f2:	68fa      	ldr	r2, [r7, #12]
 800a9f4:	429a      	cmp	r2, r3
 800a9f6:	d027      	beq.n	800aa48 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a9f8:	4b2e      	ldr	r3, [pc, #184]	; (800aab4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a9fa:	6a1b      	ldr	r3, [r3, #32]
 800a9fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aa00:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800aa02:	4b2e      	ldr	r3, [pc, #184]	; (800aabc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800aa04:	2201      	movs	r2, #1
 800aa06:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800aa08:	4b2c      	ldr	r3, [pc, #176]	; (800aabc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800aa0e:	4a29      	ldr	r2, [pc, #164]	; (800aab4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	f003 0301 	and.w	r3, r3, #1
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d014      	beq.n	800aa48 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800aa1e:	f7fd f995 	bl	8007d4c <HAL_GetTick>
 800aa22:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800aa24:	e00a      	b.n	800aa3c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800aa26:	f7fd f991 	bl	8007d4c <HAL_GetTick>
 800aa2a:	4602      	mov	r2, r0
 800aa2c:	693b      	ldr	r3, [r7, #16]
 800aa2e:	1ad3      	subs	r3, r2, r3
 800aa30:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa34:	4293      	cmp	r3, r2
 800aa36:	d901      	bls.n	800aa3c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800aa38:	2303      	movs	r3, #3
 800aa3a:	e036      	b.n	800aaaa <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800aa3c:	4b1d      	ldr	r3, [pc, #116]	; (800aab4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800aa3e:	6a1b      	ldr	r3, [r3, #32]
 800aa40:	f003 0302 	and.w	r3, r3, #2
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d0ee      	beq.n	800aa26 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800aa48:	4b1a      	ldr	r3, [pc, #104]	; (800aab4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800aa4a:	6a1b      	ldr	r3, [r3, #32]
 800aa4c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	685b      	ldr	r3, [r3, #4]
 800aa54:	4917      	ldr	r1, [pc, #92]	; (800aab4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800aa56:	4313      	orrs	r3, r2
 800aa58:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800aa5a:	7dfb      	ldrb	r3, [r7, #23]
 800aa5c:	2b01      	cmp	r3, #1
 800aa5e:	d105      	bne.n	800aa6c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800aa60:	4b14      	ldr	r3, [pc, #80]	; (800aab4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800aa62:	69db      	ldr	r3, [r3, #28]
 800aa64:	4a13      	ldr	r2, [pc, #76]	; (800aab4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800aa66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800aa6a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	f003 0302 	and.w	r3, r3, #2
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d008      	beq.n	800aa8a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800aa78:	4b0e      	ldr	r3, [pc, #56]	; (800aab4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800aa7a:	685b      	ldr	r3, [r3, #4]
 800aa7c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	689b      	ldr	r3, [r3, #8]
 800aa84:	490b      	ldr	r1, [pc, #44]	; (800aab4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800aa86:	4313      	orrs	r3, r2
 800aa88:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	f003 0310 	and.w	r3, r3, #16
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d008      	beq.n	800aaa8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800aa96:	4b07      	ldr	r3, [pc, #28]	; (800aab4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800aa98:	685b      	ldr	r3, [r3, #4]
 800aa9a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	68db      	ldr	r3, [r3, #12]
 800aaa2:	4904      	ldr	r1, [pc, #16]	; (800aab4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800aaa4:	4313      	orrs	r3, r2
 800aaa6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800aaa8:	2300      	movs	r3, #0
}
 800aaaa:	4618      	mov	r0, r3
 800aaac:	3718      	adds	r7, #24
 800aaae:	46bd      	mov	sp, r7
 800aab0:	bd80      	pop	{r7, pc}
 800aab2:	bf00      	nop
 800aab4:	40021000 	.word	0x40021000
 800aab8:	40007000 	.word	0x40007000
 800aabc:	42420440 	.word	0x42420440

0800aac0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800aac0:	b580      	push	{r7, lr}
 800aac2:	b082      	sub	sp, #8
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d101      	bne.n	800aad2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800aace:	2301      	movs	r3, #1
 800aad0:	e041      	b.n	800ab56 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aad8:	b2db      	uxtb	r3, r3
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d106      	bne.n	800aaec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	2200      	movs	r2, #0
 800aae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800aae6:	6878      	ldr	r0, [r7, #4]
 800aae8:	f7fb fe86 	bl	80067f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	2202      	movs	r2, #2
 800aaf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681a      	ldr	r2, [r3, #0]
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	3304      	adds	r3, #4
 800aafc:	4619      	mov	r1, r3
 800aafe:	4610      	mov	r0, r2
 800ab00:	f000 f8f4 	bl	800acec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	2201      	movs	r2, #1
 800ab08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	2201      	movs	r2, #1
 800ab10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	2201      	movs	r2, #1
 800ab18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	2201      	movs	r2, #1
 800ab20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	2201      	movs	r2, #1
 800ab28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	2201      	movs	r2, #1
 800ab30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	2201      	movs	r2, #1
 800ab38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	2201      	movs	r2, #1
 800ab40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	2201      	movs	r2, #1
 800ab48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	2201      	movs	r2, #1
 800ab50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ab54:	2300      	movs	r3, #0
}
 800ab56:	4618      	mov	r0, r3
 800ab58:	3708      	adds	r7, #8
 800ab5a:	46bd      	mov	sp, r7
 800ab5c:	bd80      	pop	{r7, pc}

0800ab5e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ab5e:	b580      	push	{r7, lr}
 800ab60:	b084      	sub	sp, #16
 800ab62:	af00      	add	r7, sp, #0
 800ab64:	6078      	str	r0, [r7, #4]
 800ab66:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ab68:	2300      	movs	r3, #0
 800ab6a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ab72:	2b01      	cmp	r3, #1
 800ab74:	d101      	bne.n	800ab7a <HAL_TIM_ConfigClockSource+0x1c>
 800ab76:	2302      	movs	r3, #2
 800ab78:	e0b4      	b.n	800ace4 <HAL_TIM_ConfigClockSource+0x186>
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	2201      	movs	r2, #1
 800ab7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	2202      	movs	r2, #2
 800ab86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	689b      	ldr	r3, [r3, #8]
 800ab90:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ab92:	68bb      	ldr	r3, [r7, #8]
 800ab94:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800ab98:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ab9a:	68bb      	ldr	r3, [r7, #8]
 800ab9c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800aba0:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	68ba      	ldr	r2, [r7, #8]
 800aba8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800abaa:	683b      	ldr	r3, [r7, #0]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800abb2:	d03e      	beq.n	800ac32 <HAL_TIM_ConfigClockSource+0xd4>
 800abb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800abb8:	f200 8087 	bhi.w	800acca <HAL_TIM_ConfigClockSource+0x16c>
 800abbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800abc0:	f000 8086 	beq.w	800acd0 <HAL_TIM_ConfigClockSource+0x172>
 800abc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800abc8:	d87f      	bhi.n	800acca <HAL_TIM_ConfigClockSource+0x16c>
 800abca:	2b70      	cmp	r3, #112	; 0x70
 800abcc:	d01a      	beq.n	800ac04 <HAL_TIM_ConfigClockSource+0xa6>
 800abce:	2b70      	cmp	r3, #112	; 0x70
 800abd0:	d87b      	bhi.n	800acca <HAL_TIM_ConfigClockSource+0x16c>
 800abd2:	2b60      	cmp	r3, #96	; 0x60
 800abd4:	d050      	beq.n	800ac78 <HAL_TIM_ConfigClockSource+0x11a>
 800abd6:	2b60      	cmp	r3, #96	; 0x60
 800abd8:	d877      	bhi.n	800acca <HAL_TIM_ConfigClockSource+0x16c>
 800abda:	2b50      	cmp	r3, #80	; 0x50
 800abdc:	d03c      	beq.n	800ac58 <HAL_TIM_ConfigClockSource+0xfa>
 800abde:	2b50      	cmp	r3, #80	; 0x50
 800abe0:	d873      	bhi.n	800acca <HAL_TIM_ConfigClockSource+0x16c>
 800abe2:	2b40      	cmp	r3, #64	; 0x40
 800abe4:	d058      	beq.n	800ac98 <HAL_TIM_ConfigClockSource+0x13a>
 800abe6:	2b40      	cmp	r3, #64	; 0x40
 800abe8:	d86f      	bhi.n	800acca <HAL_TIM_ConfigClockSource+0x16c>
 800abea:	2b30      	cmp	r3, #48	; 0x30
 800abec:	d064      	beq.n	800acb8 <HAL_TIM_ConfigClockSource+0x15a>
 800abee:	2b30      	cmp	r3, #48	; 0x30
 800abf0:	d86b      	bhi.n	800acca <HAL_TIM_ConfigClockSource+0x16c>
 800abf2:	2b20      	cmp	r3, #32
 800abf4:	d060      	beq.n	800acb8 <HAL_TIM_ConfigClockSource+0x15a>
 800abf6:	2b20      	cmp	r3, #32
 800abf8:	d867      	bhi.n	800acca <HAL_TIM_ConfigClockSource+0x16c>
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d05c      	beq.n	800acb8 <HAL_TIM_ConfigClockSource+0x15a>
 800abfe:	2b10      	cmp	r3, #16
 800ac00:	d05a      	beq.n	800acb8 <HAL_TIM_ConfigClockSource+0x15a>
 800ac02:	e062      	b.n	800acca <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	6818      	ldr	r0, [r3, #0]
 800ac08:	683b      	ldr	r3, [r7, #0]
 800ac0a:	6899      	ldr	r1, [r3, #8]
 800ac0c:	683b      	ldr	r3, [r7, #0]
 800ac0e:	685a      	ldr	r2, [r3, #4]
 800ac10:	683b      	ldr	r3, [r7, #0]
 800ac12:	68db      	ldr	r3, [r3, #12]
 800ac14:	f000 f943 	bl	800ae9e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	689b      	ldr	r3, [r3, #8]
 800ac1e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ac20:	68bb      	ldr	r3, [r7, #8]
 800ac22:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800ac26:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	68ba      	ldr	r2, [r7, #8]
 800ac2e:	609a      	str	r2, [r3, #8]
      break;
 800ac30:	e04f      	b.n	800acd2 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	6818      	ldr	r0, [r3, #0]
 800ac36:	683b      	ldr	r3, [r7, #0]
 800ac38:	6899      	ldr	r1, [r3, #8]
 800ac3a:	683b      	ldr	r3, [r7, #0]
 800ac3c:	685a      	ldr	r2, [r3, #4]
 800ac3e:	683b      	ldr	r3, [r7, #0]
 800ac40:	68db      	ldr	r3, [r3, #12]
 800ac42:	f000 f92c 	bl	800ae9e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	689a      	ldr	r2, [r3, #8]
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ac54:	609a      	str	r2, [r3, #8]
      break;
 800ac56:	e03c      	b.n	800acd2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	6818      	ldr	r0, [r3, #0]
 800ac5c:	683b      	ldr	r3, [r7, #0]
 800ac5e:	6859      	ldr	r1, [r3, #4]
 800ac60:	683b      	ldr	r3, [r7, #0]
 800ac62:	68db      	ldr	r3, [r3, #12]
 800ac64:	461a      	mov	r2, r3
 800ac66:	f000 f8a3 	bl	800adb0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	2150      	movs	r1, #80	; 0x50
 800ac70:	4618      	mov	r0, r3
 800ac72:	f000 f8fa 	bl	800ae6a <TIM_ITRx_SetConfig>
      break;
 800ac76:	e02c      	b.n	800acd2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	6818      	ldr	r0, [r3, #0]
 800ac7c:	683b      	ldr	r3, [r7, #0]
 800ac7e:	6859      	ldr	r1, [r3, #4]
 800ac80:	683b      	ldr	r3, [r7, #0]
 800ac82:	68db      	ldr	r3, [r3, #12]
 800ac84:	461a      	mov	r2, r3
 800ac86:	f000 f8c1 	bl	800ae0c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	2160      	movs	r1, #96	; 0x60
 800ac90:	4618      	mov	r0, r3
 800ac92:	f000 f8ea 	bl	800ae6a <TIM_ITRx_SetConfig>
      break;
 800ac96:	e01c      	b.n	800acd2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	6818      	ldr	r0, [r3, #0]
 800ac9c:	683b      	ldr	r3, [r7, #0]
 800ac9e:	6859      	ldr	r1, [r3, #4]
 800aca0:	683b      	ldr	r3, [r7, #0]
 800aca2:	68db      	ldr	r3, [r3, #12]
 800aca4:	461a      	mov	r2, r3
 800aca6:	f000 f883 	bl	800adb0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	2140      	movs	r1, #64	; 0x40
 800acb0:	4618      	mov	r0, r3
 800acb2:	f000 f8da 	bl	800ae6a <TIM_ITRx_SetConfig>
      break;
 800acb6:	e00c      	b.n	800acd2 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	681a      	ldr	r2, [r3, #0]
 800acbc:	683b      	ldr	r3, [r7, #0]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	4619      	mov	r1, r3
 800acc2:	4610      	mov	r0, r2
 800acc4:	f000 f8d1 	bl	800ae6a <TIM_ITRx_SetConfig>
      break;
 800acc8:	e003      	b.n	800acd2 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800acca:	2301      	movs	r3, #1
 800accc:	73fb      	strb	r3, [r7, #15]
      break;
 800acce:	e000      	b.n	800acd2 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800acd0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	2201      	movs	r2, #1
 800acd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	2200      	movs	r2, #0
 800acde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ace2:	7bfb      	ldrb	r3, [r7, #15]
}
 800ace4:	4618      	mov	r0, r3
 800ace6:	3710      	adds	r7, #16
 800ace8:	46bd      	mov	sp, r7
 800acea:	bd80      	pop	{r7, pc}

0800acec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800acec:	b480      	push	{r7}
 800acee:	b085      	sub	sp, #20
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	6078      	str	r0, [r7, #4]
 800acf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	4a29      	ldr	r2, [pc, #164]	; (800ada4 <TIM_Base_SetConfig+0xb8>)
 800ad00:	4293      	cmp	r3, r2
 800ad02:	d00b      	beq.n	800ad1c <TIM_Base_SetConfig+0x30>
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad0a:	d007      	beq.n	800ad1c <TIM_Base_SetConfig+0x30>
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	4a26      	ldr	r2, [pc, #152]	; (800ada8 <TIM_Base_SetConfig+0xbc>)
 800ad10:	4293      	cmp	r3, r2
 800ad12:	d003      	beq.n	800ad1c <TIM_Base_SetConfig+0x30>
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	4a25      	ldr	r2, [pc, #148]	; (800adac <TIM_Base_SetConfig+0xc0>)
 800ad18:	4293      	cmp	r3, r2
 800ad1a:	d108      	bne.n	800ad2e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ad24:	683b      	ldr	r3, [r7, #0]
 800ad26:	685b      	ldr	r3, [r3, #4]
 800ad28:	68fa      	ldr	r2, [r7, #12]
 800ad2a:	4313      	orrs	r3, r2
 800ad2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	4a1c      	ldr	r2, [pc, #112]	; (800ada4 <TIM_Base_SetConfig+0xb8>)
 800ad32:	4293      	cmp	r3, r2
 800ad34:	d00b      	beq.n	800ad4e <TIM_Base_SetConfig+0x62>
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad3c:	d007      	beq.n	800ad4e <TIM_Base_SetConfig+0x62>
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	4a19      	ldr	r2, [pc, #100]	; (800ada8 <TIM_Base_SetConfig+0xbc>)
 800ad42:	4293      	cmp	r3, r2
 800ad44:	d003      	beq.n	800ad4e <TIM_Base_SetConfig+0x62>
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	4a18      	ldr	r2, [pc, #96]	; (800adac <TIM_Base_SetConfig+0xc0>)
 800ad4a:	4293      	cmp	r3, r2
 800ad4c:	d108      	bne.n	800ad60 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ad54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ad56:	683b      	ldr	r3, [r7, #0]
 800ad58:	68db      	ldr	r3, [r3, #12]
 800ad5a:	68fa      	ldr	r2, [r7, #12]
 800ad5c:	4313      	orrs	r3, r2
 800ad5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ad66:	683b      	ldr	r3, [r7, #0]
 800ad68:	695b      	ldr	r3, [r3, #20]
 800ad6a:	4313      	orrs	r3, r2
 800ad6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	68fa      	ldr	r2, [r7, #12]
 800ad72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ad74:	683b      	ldr	r3, [r7, #0]
 800ad76:	689a      	ldr	r2, [r3, #8]
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ad7c:	683b      	ldr	r3, [r7, #0]
 800ad7e:	681a      	ldr	r2, [r3, #0]
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	4a07      	ldr	r2, [pc, #28]	; (800ada4 <TIM_Base_SetConfig+0xb8>)
 800ad88:	4293      	cmp	r3, r2
 800ad8a:	d103      	bne.n	800ad94 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ad8c:	683b      	ldr	r3, [r7, #0]
 800ad8e:	691a      	ldr	r2, [r3, #16]
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	2201      	movs	r2, #1
 800ad98:	615a      	str	r2, [r3, #20]
}
 800ad9a:	bf00      	nop
 800ad9c:	3714      	adds	r7, #20
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	bc80      	pop	{r7}
 800ada2:	4770      	bx	lr
 800ada4:	40012c00 	.word	0x40012c00
 800ada8:	40000400 	.word	0x40000400
 800adac:	40000800 	.word	0x40000800

0800adb0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800adb0:	b480      	push	{r7}
 800adb2:	b087      	sub	sp, #28
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	60f8      	str	r0, [r7, #12]
 800adb8:	60b9      	str	r1, [r7, #8]
 800adba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	6a1b      	ldr	r3, [r3, #32]
 800adc0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	6a1b      	ldr	r3, [r3, #32]
 800adc6:	f023 0201 	bic.w	r2, r3, #1
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	699b      	ldr	r3, [r3, #24]
 800add2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800add4:	693b      	ldr	r3, [r7, #16]
 800add6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800adda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	011b      	lsls	r3, r3, #4
 800ade0:	693a      	ldr	r2, [r7, #16]
 800ade2:	4313      	orrs	r3, r2
 800ade4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ade6:	697b      	ldr	r3, [r7, #20]
 800ade8:	f023 030a 	bic.w	r3, r3, #10
 800adec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800adee:	697a      	ldr	r2, [r7, #20]
 800adf0:	68bb      	ldr	r3, [r7, #8]
 800adf2:	4313      	orrs	r3, r2
 800adf4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	693a      	ldr	r2, [r7, #16]
 800adfa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	697a      	ldr	r2, [r7, #20]
 800ae00:	621a      	str	r2, [r3, #32]
}
 800ae02:	bf00      	nop
 800ae04:	371c      	adds	r7, #28
 800ae06:	46bd      	mov	sp, r7
 800ae08:	bc80      	pop	{r7}
 800ae0a:	4770      	bx	lr

0800ae0c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ae0c:	b480      	push	{r7}
 800ae0e:	b087      	sub	sp, #28
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	60f8      	str	r0, [r7, #12]
 800ae14:	60b9      	str	r1, [r7, #8]
 800ae16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	6a1b      	ldr	r3, [r3, #32]
 800ae1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	6a1b      	ldr	r3, [r3, #32]
 800ae22:	f023 0210 	bic.w	r2, r3, #16
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	699b      	ldr	r3, [r3, #24]
 800ae2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ae30:	693b      	ldr	r3, [r7, #16]
 800ae32:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ae36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	031b      	lsls	r3, r3, #12
 800ae3c:	693a      	ldr	r2, [r7, #16]
 800ae3e:	4313      	orrs	r3, r2
 800ae40:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ae42:	697b      	ldr	r3, [r7, #20]
 800ae44:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ae48:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ae4a:	68bb      	ldr	r3, [r7, #8]
 800ae4c:	011b      	lsls	r3, r3, #4
 800ae4e:	697a      	ldr	r2, [r7, #20]
 800ae50:	4313      	orrs	r3, r2
 800ae52:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	693a      	ldr	r2, [r7, #16]
 800ae58:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	697a      	ldr	r2, [r7, #20]
 800ae5e:	621a      	str	r2, [r3, #32]
}
 800ae60:	bf00      	nop
 800ae62:	371c      	adds	r7, #28
 800ae64:	46bd      	mov	sp, r7
 800ae66:	bc80      	pop	{r7}
 800ae68:	4770      	bx	lr

0800ae6a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ae6a:	b480      	push	{r7}
 800ae6c:	b085      	sub	sp, #20
 800ae6e:	af00      	add	r7, sp, #0
 800ae70:	6078      	str	r0, [r7, #4]
 800ae72:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	689b      	ldr	r3, [r3, #8]
 800ae78:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae80:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ae82:	683a      	ldr	r2, [r7, #0]
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	4313      	orrs	r3, r2
 800ae88:	f043 0307 	orr.w	r3, r3, #7
 800ae8c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	68fa      	ldr	r2, [r7, #12]
 800ae92:	609a      	str	r2, [r3, #8]
}
 800ae94:	bf00      	nop
 800ae96:	3714      	adds	r7, #20
 800ae98:	46bd      	mov	sp, r7
 800ae9a:	bc80      	pop	{r7}
 800ae9c:	4770      	bx	lr

0800ae9e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ae9e:	b480      	push	{r7}
 800aea0:	b087      	sub	sp, #28
 800aea2:	af00      	add	r7, sp, #0
 800aea4:	60f8      	str	r0, [r7, #12]
 800aea6:	60b9      	str	r1, [r7, #8]
 800aea8:	607a      	str	r2, [r7, #4]
 800aeaa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	689b      	ldr	r3, [r3, #8]
 800aeb0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800aeb2:	697b      	ldr	r3, [r7, #20]
 800aeb4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800aeb8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800aeba:	683b      	ldr	r3, [r7, #0]
 800aebc:	021a      	lsls	r2, r3, #8
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	431a      	orrs	r2, r3
 800aec2:	68bb      	ldr	r3, [r7, #8]
 800aec4:	4313      	orrs	r3, r2
 800aec6:	697a      	ldr	r2, [r7, #20]
 800aec8:	4313      	orrs	r3, r2
 800aeca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	697a      	ldr	r2, [r7, #20]
 800aed0:	609a      	str	r2, [r3, #8]
}
 800aed2:	bf00      	nop
 800aed4:	371c      	adds	r7, #28
 800aed6:	46bd      	mov	sp, r7
 800aed8:	bc80      	pop	{r7}
 800aeda:	4770      	bx	lr

0800aedc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800aedc:	b480      	push	{r7}
 800aede:	b085      	sub	sp, #20
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	6078      	str	r0, [r7, #4]
 800aee4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aeec:	2b01      	cmp	r3, #1
 800aeee:	d101      	bne.n	800aef4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800aef0:	2302      	movs	r3, #2
 800aef2:	e046      	b.n	800af82 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	2201      	movs	r2, #1
 800aef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	2202      	movs	r2, #2
 800af00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	685b      	ldr	r3, [r3, #4]
 800af0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	689b      	ldr	r3, [r3, #8]
 800af12:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af1a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800af1c:	683b      	ldr	r3, [r7, #0]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	68fa      	ldr	r2, [r7, #12]
 800af22:	4313      	orrs	r3, r2
 800af24:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	68fa      	ldr	r2, [r7, #12]
 800af2c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	4a16      	ldr	r2, [pc, #88]	; (800af8c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800af34:	4293      	cmp	r3, r2
 800af36:	d00e      	beq.n	800af56 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800af40:	d009      	beq.n	800af56 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	4a12      	ldr	r2, [pc, #72]	; (800af90 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800af48:	4293      	cmp	r3, r2
 800af4a:	d004      	beq.n	800af56 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	4a10      	ldr	r2, [pc, #64]	; (800af94 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800af52:	4293      	cmp	r3, r2
 800af54:	d10c      	bne.n	800af70 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800af56:	68bb      	ldr	r3, [r7, #8]
 800af58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800af5c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800af5e:	683b      	ldr	r3, [r7, #0]
 800af60:	685b      	ldr	r3, [r3, #4]
 800af62:	68ba      	ldr	r2, [r7, #8]
 800af64:	4313      	orrs	r3, r2
 800af66:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	68ba      	ldr	r2, [r7, #8]
 800af6e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	2201      	movs	r2, #1
 800af74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	2200      	movs	r2, #0
 800af7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800af80:	2300      	movs	r3, #0
}
 800af82:	4618      	mov	r0, r3
 800af84:	3714      	adds	r7, #20
 800af86:	46bd      	mov	sp, r7
 800af88:	bc80      	pop	{r7}
 800af8a:	4770      	bx	lr
 800af8c:	40012c00 	.word	0x40012c00
 800af90:	40000400 	.word	0x40000400
 800af94:	40000800 	.word	0x40000800

0800af98 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800af98:	b580      	push	{r7, lr}
 800af9a:	b082      	sub	sp, #8
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d101      	bne.n	800afaa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800afa6:	2301      	movs	r3, #1
 800afa8:	e042      	b.n	800b030 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800afb0:	b2db      	uxtb	r3, r3
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d106      	bne.n	800afc4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	2200      	movs	r2, #0
 800afba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800afbe:	6878      	ldr	r0, [r7, #4]
 800afc0:	f7fb fcb6 	bl	8006930 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	2224      	movs	r2, #36	; 0x24
 800afc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	68da      	ldr	r2, [r3, #12]
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800afda:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800afdc:	6878      	ldr	r0, [r7, #4]
 800afde:	f000 ff89 	bl	800bef4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	691a      	ldr	r2, [r3, #16]
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800aff0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	695a      	ldr	r2, [r3, #20]
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b000:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	68da      	ldr	r2, [r3, #12]
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b010:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	2200      	movs	r2, #0
 800b016:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	2220      	movs	r2, #32
 800b01c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	2220      	movs	r2, #32
 800b024:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	2200      	movs	r2, #0
 800b02c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800b02e:	2300      	movs	r3, #0
}
 800b030:	4618      	mov	r0, r3
 800b032:	3708      	adds	r7, #8
 800b034:	46bd      	mov	sp, r7
 800b036:	bd80      	pop	{r7, pc}

0800b038 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b038:	b580      	push	{r7, lr}
 800b03a:	b08a      	sub	sp, #40	; 0x28
 800b03c:	af02      	add	r7, sp, #8
 800b03e:	60f8      	str	r0, [r7, #12]
 800b040:	60b9      	str	r1, [r7, #8]
 800b042:	603b      	str	r3, [r7, #0]
 800b044:	4613      	mov	r3, r2
 800b046:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800b048:	2300      	movs	r3, #0
 800b04a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b052:	b2db      	uxtb	r3, r3
 800b054:	2b20      	cmp	r3, #32
 800b056:	d16d      	bne.n	800b134 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800b058:	68bb      	ldr	r3, [r7, #8]
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d002      	beq.n	800b064 <HAL_UART_Transmit+0x2c>
 800b05e:	88fb      	ldrh	r3, [r7, #6]
 800b060:	2b00      	cmp	r3, #0
 800b062:	d101      	bne.n	800b068 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800b064:	2301      	movs	r3, #1
 800b066:	e066      	b.n	800b136 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	2200      	movs	r2, #0
 800b06c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	2221      	movs	r2, #33	; 0x21
 800b072:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b076:	f7fc fe69 	bl	8007d4c <HAL_GetTick>
 800b07a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	88fa      	ldrh	r2, [r7, #6]
 800b080:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	88fa      	ldrh	r2, [r7, #6]
 800b086:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	689b      	ldr	r3, [r3, #8]
 800b08c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b090:	d108      	bne.n	800b0a4 <HAL_UART_Transmit+0x6c>
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	691b      	ldr	r3, [r3, #16]
 800b096:	2b00      	cmp	r3, #0
 800b098:	d104      	bne.n	800b0a4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800b09a:	2300      	movs	r3, #0
 800b09c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b09e:	68bb      	ldr	r3, [r7, #8]
 800b0a0:	61bb      	str	r3, [r7, #24]
 800b0a2:	e003      	b.n	800b0ac <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800b0a4:	68bb      	ldr	r3, [r7, #8]
 800b0a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b0a8:	2300      	movs	r3, #0
 800b0aa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800b0ac:	e02a      	b.n	800b104 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b0ae:	683b      	ldr	r3, [r7, #0]
 800b0b0:	9300      	str	r3, [sp, #0]
 800b0b2:	697b      	ldr	r3, [r7, #20]
 800b0b4:	2200      	movs	r2, #0
 800b0b6:	2180      	movs	r1, #128	; 0x80
 800b0b8:	68f8      	ldr	r0, [r7, #12]
 800b0ba:	f000 fc51 	bl	800b960 <UART_WaitOnFlagUntilTimeout>
 800b0be:	4603      	mov	r3, r0
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d001      	beq.n	800b0c8 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800b0c4:	2303      	movs	r3, #3
 800b0c6:	e036      	b.n	800b136 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800b0c8:	69fb      	ldr	r3, [r7, #28]
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d10b      	bne.n	800b0e6 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b0ce:	69bb      	ldr	r3, [r7, #24]
 800b0d0:	881b      	ldrh	r3, [r3, #0]
 800b0d2:	461a      	mov	r2, r3
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b0dc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800b0de:	69bb      	ldr	r3, [r7, #24]
 800b0e0:	3302      	adds	r3, #2
 800b0e2:	61bb      	str	r3, [r7, #24]
 800b0e4:	e007      	b.n	800b0f6 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800b0e6:	69fb      	ldr	r3, [r7, #28]
 800b0e8:	781a      	ldrb	r2, [r3, #0]
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800b0f0:	69fb      	ldr	r3, [r7, #28]
 800b0f2:	3301      	adds	r3, #1
 800b0f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b0fa:	b29b      	uxth	r3, r3
 800b0fc:	3b01      	subs	r3, #1
 800b0fe:	b29a      	uxth	r2, r3
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b108:	b29b      	uxth	r3, r3
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d1cf      	bne.n	800b0ae <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b10e:	683b      	ldr	r3, [r7, #0]
 800b110:	9300      	str	r3, [sp, #0]
 800b112:	697b      	ldr	r3, [r7, #20]
 800b114:	2200      	movs	r2, #0
 800b116:	2140      	movs	r1, #64	; 0x40
 800b118:	68f8      	ldr	r0, [r7, #12]
 800b11a:	f000 fc21 	bl	800b960 <UART_WaitOnFlagUntilTimeout>
 800b11e:	4603      	mov	r3, r0
 800b120:	2b00      	cmp	r3, #0
 800b122:	d001      	beq.n	800b128 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800b124:	2303      	movs	r3, #3
 800b126:	e006      	b.n	800b136 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	2220      	movs	r2, #32
 800b12c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800b130:	2300      	movs	r3, #0
 800b132:	e000      	b.n	800b136 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800b134:	2302      	movs	r3, #2
  }
}
 800b136:	4618      	mov	r0, r3
 800b138:	3720      	adds	r7, #32
 800b13a:	46bd      	mov	sp, r7
 800b13c:	bd80      	pop	{r7, pc}

0800b13e <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b13e:	b580      	push	{r7, lr}
 800b140:	b08c      	sub	sp, #48	; 0x30
 800b142:	af00      	add	r7, sp, #0
 800b144:	60f8      	str	r0, [r7, #12]
 800b146:	60b9      	str	r1, [r7, #8]
 800b148:	4613      	mov	r3, r2
 800b14a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b152:	b2db      	uxtb	r3, r3
 800b154:	2b20      	cmp	r3, #32
 800b156:	d14a      	bne.n	800b1ee <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 800b158:	68bb      	ldr	r3, [r7, #8]
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d002      	beq.n	800b164 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800b15e:	88fb      	ldrh	r3, [r7, #6]
 800b160:	2b00      	cmp	r3, #0
 800b162:	d101      	bne.n	800b168 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800b164:	2301      	movs	r3, #1
 800b166:	e043      	b.n	800b1f0 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	2201      	movs	r2, #1
 800b16c:	631a      	str	r2, [r3, #48]	; 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	2200      	movs	r2, #0
 800b172:	635a      	str	r2, [r3, #52]	; 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800b174:	88fb      	ldrh	r3, [r7, #6]
 800b176:	461a      	mov	r2, r3
 800b178:	68b9      	ldr	r1, [r7, #8]
 800b17a:	68f8      	ldr	r0, [r7, #12]
 800b17c:	f000 fc5e 	bl	800ba3c <UART_Start_Receive_DMA>
 800b180:	4603      	mov	r3, r0
 800b182:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800b186:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d12c      	bne.n	800b1e8 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b192:	2b01      	cmp	r3, #1
 800b194:	d125      	bne.n	800b1e2 <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b196:	2300      	movs	r3, #0
 800b198:	613b      	str	r3, [r7, #16]
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	613b      	str	r3, [r7, #16]
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	685b      	ldr	r3, [r3, #4]
 800b1a8:	613b      	str	r3, [r7, #16]
 800b1aa:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	330c      	adds	r3, #12
 800b1b2:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1b4:	69bb      	ldr	r3, [r7, #24]
 800b1b6:	e853 3f00 	ldrex	r3, [r3]
 800b1ba:	617b      	str	r3, [r7, #20]
   return(result);
 800b1bc:	697b      	ldr	r3, [r7, #20]
 800b1be:	f043 0310 	orr.w	r3, r3, #16
 800b1c2:	62bb      	str	r3, [r7, #40]	; 0x28
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	330c      	adds	r3, #12
 800b1ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b1cc:	627a      	str	r2, [r7, #36]	; 0x24
 800b1ce:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1d0:	6a39      	ldr	r1, [r7, #32]
 800b1d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b1d4:	e841 2300 	strex	r3, r2, [r1]
 800b1d8:	61fb      	str	r3, [r7, #28]
   return(result);
 800b1da:	69fb      	ldr	r3, [r7, #28]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d1e5      	bne.n	800b1ac <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 800b1e0:	e002      	b.n	800b1e8 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800b1e2:	2301      	movs	r3, #1
 800b1e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800b1e8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b1ec:	e000      	b.n	800b1f0 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 800b1ee:	2302      	movs	r3, #2
  }
}
 800b1f0:	4618      	mov	r0, r3
 800b1f2:	3730      	adds	r7, #48	; 0x30
 800b1f4:	46bd      	mov	sp, r7
 800b1f6:	bd80      	pop	{r7, pc}

0800b1f8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b1f8:	b580      	push	{r7, lr}
 800b1fa:	b0ba      	sub	sp, #232	; 0xe8
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	68db      	ldr	r3, [r3, #12]
 800b210:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	695b      	ldr	r3, [r3, #20]
 800b21a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800b21e:	2300      	movs	r3, #0
 800b220:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800b224:	2300      	movs	r3, #0
 800b226:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b22a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b22e:	f003 030f 	and.w	r3, r3, #15
 800b232:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800b236:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d10f      	bne.n	800b25e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b23e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b242:	f003 0320 	and.w	r3, r3, #32
 800b246:	2b00      	cmp	r3, #0
 800b248:	d009      	beq.n	800b25e <HAL_UART_IRQHandler+0x66>
 800b24a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b24e:	f003 0320 	and.w	r3, r3, #32
 800b252:	2b00      	cmp	r3, #0
 800b254:	d003      	beq.n	800b25e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800b256:	6878      	ldr	r0, [r7, #4]
 800b258:	f000 fd8e 	bl	800bd78 <UART_Receive_IT>
      return;
 800b25c:	e25b      	b.n	800b716 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800b25e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b262:	2b00      	cmp	r3, #0
 800b264:	f000 80de 	beq.w	800b424 <HAL_UART_IRQHandler+0x22c>
 800b268:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b26c:	f003 0301 	and.w	r3, r3, #1
 800b270:	2b00      	cmp	r3, #0
 800b272:	d106      	bne.n	800b282 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b274:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b278:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	f000 80d1 	beq.w	800b424 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b282:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b286:	f003 0301 	and.w	r3, r3, #1
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d00b      	beq.n	800b2a6 <HAL_UART_IRQHandler+0xae>
 800b28e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b292:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b296:	2b00      	cmp	r3, #0
 800b298:	d005      	beq.n	800b2a6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b29e:	f043 0201 	orr.w	r2, r3, #1
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b2a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b2aa:	f003 0304 	and.w	r3, r3, #4
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d00b      	beq.n	800b2ca <HAL_UART_IRQHandler+0xd2>
 800b2b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b2b6:	f003 0301 	and.w	r3, r3, #1
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d005      	beq.n	800b2ca <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b2c2:	f043 0202 	orr.w	r2, r3, #2
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b2ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b2ce:	f003 0302 	and.w	r3, r3, #2
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d00b      	beq.n	800b2ee <HAL_UART_IRQHandler+0xf6>
 800b2d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b2da:	f003 0301 	and.w	r3, r3, #1
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d005      	beq.n	800b2ee <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b2e6:	f043 0204 	orr.w	r2, r3, #4
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800b2ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b2f2:	f003 0308 	and.w	r3, r3, #8
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d011      	beq.n	800b31e <HAL_UART_IRQHandler+0x126>
 800b2fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b2fe:	f003 0320 	and.w	r3, r3, #32
 800b302:	2b00      	cmp	r3, #0
 800b304:	d105      	bne.n	800b312 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800b306:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b30a:	f003 0301 	and.w	r3, r3, #1
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d005      	beq.n	800b31e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b316:	f043 0208 	orr.w	r2, r3, #8
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b322:	2b00      	cmp	r3, #0
 800b324:	f000 81f2 	beq.w	800b70c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b328:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b32c:	f003 0320 	and.w	r3, r3, #32
 800b330:	2b00      	cmp	r3, #0
 800b332:	d008      	beq.n	800b346 <HAL_UART_IRQHandler+0x14e>
 800b334:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b338:	f003 0320 	and.w	r3, r3, #32
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d002      	beq.n	800b346 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800b340:	6878      	ldr	r0, [r7, #4]
 800b342:	f000 fd19 	bl	800bd78 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	695b      	ldr	r3, [r3, #20]
 800b34c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b350:	2b00      	cmp	r3, #0
 800b352:	bf14      	ite	ne
 800b354:	2301      	movne	r3, #1
 800b356:	2300      	moveq	r3, #0
 800b358:	b2db      	uxtb	r3, r3
 800b35a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b362:	f003 0308 	and.w	r3, r3, #8
 800b366:	2b00      	cmp	r3, #0
 800b368:	d103      	bne.n	800b372 <HAL_UART_IRQHandler+0x17a>
 800b36a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d04f      	beq.n	800b412 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b372:	6878      	ldr	r0, [r7, #4]
 800b374:	f000 fc23 	bl	800bbbe <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	695b      	ldr	r3, [r3, #20]
 800b37e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b382:	2b00      	cmp	r3, #0
 800b384:	d041      	beq.n	800b40a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	3314      	adds	r3, #20
 800b38c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b390:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b394:	e853 3f00 	ldrex	r3, [r3]
 800b398:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b39c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b3a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b3a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	3314      	adds	r3, #20
 800b3ae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b3b2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b3b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3ba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b3be:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b3c2:	e841 2300 	strex	r3, r2, [r1]
 800b3c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b3ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d1d9      	bne.n	800b386 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d013      	beq.n	800b402 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b3de:	4a7e      	ldr	r2, [pc, #504]	; (800b5d8 <HAL_UART_IRQHandler+0x3e0>)
 800b3e0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b3e6:	4618      	mov	r0, r3
 800b3e8:	f7fd fae0 	bl	80089ac <HAL_DMA_Abort_IT>
 800b3ec:	4603      	mov	r3, r0
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d016      	beq.n	800b420 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b3f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3f8:	687a      	ldr	r2, [r7, #4]
 800b3fa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800b3fc:	4610      	mov	r0, r2
 800b3fe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b400:	e00e      	b.n	800b420 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b402:	6878      	ldr	r0, [r7, #4]
 800b404:	f000 f9a5 	bl	800b752 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b408:	e00a      	b.n	800b420 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b40a:	6878      	ldr	r0, [r7, #4]
 800b40c:	f000 f9a1 	bl	800b752 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b410:	e006      	b.n	800b420 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b412:	6878      	ldr	r0, [r7, #4]
 800b414:	f000 f99d 	bl	800b752 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	2200      	movs	r2, #0
 800b41c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800b41e:	e175      	b.n	800b70c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b420:	bf00      	nop
    return;
 800b422:	e173      	b.n	800b70c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b428:	2b01      	cmp	r3, #1
 800b42a:	f040 814f 	bne.w	800b6cc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800b42e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b432:	f003 0310 	and.w	r3, r3, #16
 800b436:	2b00      	cmp	r3, #0
 800b438:	f000 8148 	beq.w	800b6cc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800b43c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b440:	f003 0310 	and.w	r3, r3, #16
 800b444:	2b00      	cmp	r3, #0
 800b446:	f000 8141 	beq.w	800b6cc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b44a:	2300      	movs	r3, #0
 800b44c:	60bb      	str	r3, [r7, #8]
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	60bb      	str	r3, [r7, #8]
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	685b      	ldr	r3, [r3, #4]
 800b45c:	60bb      	str	r3, [r7, #8]
 800b45e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	695b      	ldr	r3, [r3, #20]
 800b466:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	f000 80b6 	beq.w	800b5dc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	685b      	ldr	r3, [r3, #4]
 800b478:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b47c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b480:	2b00      	cmp	r3, #0
 800b482:	f000 8145 	beq.w	800b710 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b48a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b48e:	429a      	cmp	r2, r3
 800b490:	f080 813e 	bcs.w	800b710 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b49a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b4a0:	699b      	ldr	r3, [r3, #24]
 800b4a2:	2b20      	cmp	r3, #32
 800b4a4:	f000 8088 	beq.w	800b5b8 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	330c      	adds	r3, #12
 800b4ae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4b2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b4b6:	e853 3f00 	ldrex	r3, [r3]
 800b4ba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b4be:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b4c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b4c6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	330c      	adds	r3, #12
 800b4d0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800b4d4:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b4d8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4dc:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b4e0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b4e4:	e841 2300 	strex	r3, r2, [r1]
 800b4e8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b4ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d1d9      	bne.n	800b4a8 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	3314      	adds	r3, #20
 800b4fa:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b4fe:	e853 3f00 	ldrex	r3, [r3]
 800b502:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b504:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b506:	f023 0301 	bic.w	r3, r3, #1
 800b50a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	3314      	adds	r3, #20
 800b514:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b518:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b51c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b51e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b520:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b524:	e841 2300 	strex	r3, r2, [r1]
 800b528:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b52a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d1e1      	bne.n	800b4f4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	3314      	adds	r3, #20
 800b536:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b538:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b53a:	e853 3f00 	ldrex	r3, [r3]
 800b53e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b540:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b542:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b546:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	3314      	adds	r3, #20
 800b550:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b554:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b556:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b558:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b55a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b55c:	e841 2300 	strex	r3, r2, [r1]
 800b560:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b562:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b564:	2b00      	cmp	r3, #0
 800b566:	d1e3      	bne.n	800b530 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	2220      	movs	r2, #32
 800b56c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	2200      	movs	r2, #0
 800b574:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	330c      	adds	r3, #12
 800b57c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b57e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b580:	e853 3f00 	ldrex	r3, [r3]
 800b584:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b586:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b588:	f023 0310 	bic.w	r3, r3, #16
 800b58c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	330c      	adds	r3, #12
 800b596:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b59a:	65ba      	str	r2, [r7, #88]	; 0x58
 800b59c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b59e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b5a0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b5a2:	e841 2300 	strex	r3, r2, [r1]
 800b5a6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b5a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d1e3      	bne.n	800b576 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	f7fd f9be 	bl	8008934 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	2202      	movs	r2, #2
 800b5bc:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b5c6:	b29b      	uxth	r3, r3
 800b5c8:	1ad3      	subs	r3, r2, r3
 800b5ca:	b29b      	uxth	r3, r3
 800b5cc:	4619      	mov	r1, r3
 800b5ce:	6878      	ldr	r0, [r7, #4]
 800b5d0:	f7fa fcb4 	bl	8005f3c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b5d4:	e09c      	b.n	800b710 <HAL_UART_IRQHandler+0x518>
 800b5d6:	bf00      	nop
 800b5d8:	0800bc83 	.word	0x0800bc83
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b5e4:	b29b      	uxth	r3, r3
 800b5e6:	1ad3      	subs	r3, r2, r3
 800b5e8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b5f0:	b29b      	uxth	r3, r3
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	f000 808e 	beq.w	800b714 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800b5f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	f000 8089 	beq.w	800b714 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	330c      	adds	r3, #12
 800b608:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b60a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b60c:	e853 3f00 	ldrex	r3, [r3]
 800b610:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b612:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b614:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b618:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	330c      	adds	r3, #12
 800b622:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800b626:	647a      	str	r2, [r7, #68]	; 0x44
 800b628:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b62a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b62c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b62e:	e841 2300 	strex	r3, r2, [r1]
 800b632:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b634:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b636:	2b00      	cmp	r3, #0
 800b638:	d1e3      	bne.n	800b602 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	3314      	adds	r3, #20
 800b640:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b644:	e853 3f00 	ldrex	r3, [r3]
 800b648:	623b      	str	r3, [r7, #32]
   return(result);
 800b64a:	6a3b      	ldr	r3, [r7, #32]
 800b64c:	f023 0301 	bic.w	r3, r3, #1
 800b650:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	3314      	adds	r3, #20
 800b65a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b65e:	633a      	str	r2, [r7, #48]	; 0x30
 800b660:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b662:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b664:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b666:	e841 2300 	strex	r3, r2, [r1]
 800b66a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b66c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d1e3      	bne.n	800b63a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	2220      	movs	r2, #32
 800b676:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	2200      	movs	r2, #0
 800b67e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	330c      	adds	r3, #12
 800b686:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b688:	693b      	ldr	r3, [r7, #16]
 800b68a:	e853 3f00 	ldrex	r3, [r3]
 800b68e:	60fb      	str	r3, [r7, #12]
   return(result);
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	f023 0310 	bic.w	r3, r3, #16
 800b696:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	330c      	adds	r3, #12
 800b6a0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800b6a4:	61fa      	str	r2, [r7, #28]
 800b6a6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6a8:	69b9      	ldr	r1, [r7, #24]
 800b6aa:	69fa      	ldr	r2, [r7, #28]
 800b6ac:	e841 2300 	strex	r3, r2, [r1]
 800b6b0:	617b      	str	r3, [r7, #20]
   return(result);
 800b6b2:	697b      	ldr	r3, [r7, #20]
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d1e3      	bne.n	800b680 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	2202      	movs	r2, #2
 800b6bc:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b6be:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b6c2:	4619      	mov	r1, r3
 800b6c4:	6878      	ldr	r0, [r7, #4]
 800b6c6:	f7fa fc39 	bl	8005f3c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b6ca:	e023      	b.n	800b714 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b6cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b6d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d009      	beq.n	800b6ec <HAL_UART_IRQHandler+0x4f4>
 800b6d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b6dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d003      	beq.n	800b6ec <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800b6e4:	6878      	ldr	r0, [r7, #4]
 800b6e6:	f000 fae0 	bl	800bcaa <UART_Transmit_IT>
    return;
 800b6ea:	e014      	b.n	800b716 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b6ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b6f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d00e      	beq.n	800b716 <HAL_UART_IRQHandler+0x51e>
 800b6f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b6fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b700:	2b00      	cmp	r3, #0
 800b702:	d008      	beq.n	800b716 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800b704:	6878      	ldr	r0, [r7, #4]
 800b706:	f000 fb1f 	bl	800bd48 <UART_EndTransmit_IT>
    return;
 800b70a:	e004      	b.n	800b716 <HAL_UART_IRQHandler+0x51e>
    return;
 800b70c:	bf00      	nop
 800b70e:	e002      	b.n	800b716 <HAL_UART_IRQHandler+0x51e>
      return;
 800b710:	bf00      	nop
 800b712:	e000      	b.n	800b716 <HAL_UART_IRQHandler+0x51e>
      return;
 800b714:	bf00      	nop
  }
}
 800b716:	37e8      	adds	r7, #232	; 0xe8
 800b718:	46bd      	mov	sp, r7
 800b71a:	bd80      	pop	{r7, pc}

0800b71c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b71c:	b480      	push	{r7}
 800b71e:	b083      	sub	sp, #12
 800b720:	af00      	add	r7, sp, #0
 800b722:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800b724:	bf00      	nop
 800b726:	370c      	adds	r7, #12
 800b728:	46bd      	mov	sp, r7
 800b72a:	bc80      	pop	{r7}
 800b72c:	4770      	bx	lr

0800b72e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800b72e:	b480      	push	{r7}
 800b730:	b083      	sub	sp, #12
 800b732:	af00      	add	r7, sp, #0
 800b734:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800b736:	bf00      	nop
 800b738:	370c      	adds	r7, #12
 800b73a:	46bd      	mov	sp, r7
 800b73c:	bc80      	pop	{r7}
 800b73e:	4770      	bx	lr

0800b740 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b740:	b480      	push	{r7}
 800b742:	b083      	sub	sp, #12
 800b744:	af00      	add	r7, sp, #0
 800b746:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800b748:	bf00      	nop
 800b74a:	370c      	adds	r7, #12
 800b74c:	46bd      	mov	sp, r7
 800b74e:	bc80      	pop	{r7}
 800b750:	4770      	bx	lr

0800b752 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b752:	b480      	push	{r7}
 800b754:	b083      	sub	sp, #12
 800b756:	af00      	add	r7, sp, #0
 800b758:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b75a:	bf00      	nop
 800b75c:	370c      	adds	r7, #12
 800b75e:	46bd      	mov	sp, r7
 800b760:	bc80      	pop	{r7}
 800b762:	4770      	bx	lr

0800b764 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b764:	b580      	push	{r7, lr}
 800b766:	b09c      	sub	sp, #112	; 0x70
 800b768:	af00      	add	r7, sp, #0
 800b76a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b770:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	f003 0320 	and.w	r3, r3, #32
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d172      	bne.n	800b866 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800b780:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b782:	2200      	movs	r2, #0
 800b784:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b786:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	330c      	adds	r3, #12
 800b78c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b78e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b790:	e853 3f00 	ldrex	r3, [r3]
 800b794:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b796:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b798:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b79c:	66bb      	str	r3, [r7, #104]	; 0x68
 800b79e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	330c      	adds	r3, #12
 800b7a4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b7a6:	65ba      	str	r2, [r7, #88]	; 0x58
 800b7a8:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7aa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b7ac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b7ae:	e841 2300 	strex	r3, r2, [r1]
 800b7b2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b7b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d1e5      	bne.n	800b786 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b7ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	3314      	adds	r3, #20
 800b7c0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7c4:	e853 3f00 	ldrex	r3, [r3]
 800b7c8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b7ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7cc:	f023 0301 	bic.w	r3, r3, #1
 800b7d0:	667b      	str	r3, [r7, #100]	; 0x64
 800b7d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	3314      	adds	r3, #20
 800b7d8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b7da:	647a      	str	r2, [r7, #68]	; 0x44
 800b7dc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7de:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b7e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b7e2:	e841 2300 	strex	r3, r2, [r1]
 800b7e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b7e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d1e5      	bne.n	800b7ba <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b7ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	3314      	adds	r3, #20
 800b7f4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7f8:	e853 3f00 	ldrex	r3, [r3]
 800b7fc:	623b      	str	r3, [r7, #32]
   return(result);
 800b7fe:	6a3b      	ldr	r3, [r7, #32]
 800b800:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b804:	663b      	str	r3, [r7, #96]	; 0x60
 800b806:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	3314      	adds	r3, #20
 800b80c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b80e:	633a      	str	r2, [r7, #48]	; 0x30
 800b810:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b812:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b814:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b816:	e841 2300 	strex	r3, r2, [r1]
 800b81a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b81c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d1e5      	bne.n	800b7ee <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b822:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b824:	2220      	movs	r2, #32
 800b826:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b82a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b82c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b82e:	2b01      	cmp	r3, #1
 800b830:	d119      	bne.n	800b866 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b832:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	330c      	adds	r3, #12
 800b838:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b83a:	693b      	ldr	r3, [r7, #16]
 800b83c:	e853 3f00 	ldrex	r3, [r3]
 800b840:	60fb      	str	r3, [r7, #12]
   return(result);
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	f023 0310 	bic.w	r3, r3, #16
 800b848:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b84a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	330c      	adds	r3, #12
 800b850:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b852:	61fa      	str	r2, [r7, #28]
 800b854:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b856:	69b9      	ldr	r1, [r7, #24]
 800b858:	69fa      	ldr	r2, [r7, #28]
 800b85a:	e841 2300 	strex	r3, r2, [r1]
 800b85e:	617b      	str	r3, [r7, #20]
   return(result);
 800b860:	697b      	ldr	r3, [r7, #20]
 800b862:	2b00      	cmp	r3, #0
 800b864:	d1e5      	bne.n	800b832 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b866:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b868:	2200      	movs	r2, #0
 800b86a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b86c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b86e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b870:	2b01      	cmp	r3, #1
 800b872:	d106      	bne.n	800b882 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b874:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b876:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b878:	4619      	mov	r1, r3
 800b87a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b87c:	f7fa fb5e 	bl	8005f3c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b880:	e002      	b.n	800b888 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800b882:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b884:	f7ff ff53 	bl	800b72e <HAL_UART_RxCpltCallback>
}
 800b888:	bf00      	nop
 800b88a:	3770      	adds	r7, #112	; 0x70
 800b88c:	46bd      	mov	sp, r7
 800b88e:	bd80      	pop	{r7, pc}

0800b890 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b890:	b580      	push	{r7, lr}
 800b892:	b084      	sub	sp, #16
 800b894:	af00      	add	r7, sp, #0
 800b896:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b89c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	2201      	movs	r2, #1
 800b8a2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8a8:	2b01      	cmp	r3, #1
 800b8aa:	d108      	bne.n	800b8be <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b8b0:	085b      	lsrs	r3, r3, #1
 800b8b2:	b29b      	uxth	r3, r3
 800b8b4:	4619      	mov	r1, r3
 800b8b6:	68f8      	ldr	r0, [r7, #12]
 800b8b8:	f7fa fb40 	bl	8005f3c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b8bc:	e002      	b.n	800b8c4 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800b8be:	68f8      	ldr	r0, [r7, #12]
 800b8c0:	f7ff ff3e 	bl	800b740 <HAL_UART_RxHalfCpltCallback>
}
 800b8c4:	bf00      	nop
 800b8c6:	3710      	adds	r7, #16
 800b8c8:	46bd      	mov	sp, r7
 800b8ca:	bd80      	pop	{r7, pc}

0800b8cc <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b8cc:	b580      	push	{r7, lr}
 800b8ce:	b084      	sub	sp, #16
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800b8d4:	2300      	movs	r3, #0
 800b8d6:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8dc:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800b8de:	68bb      	ldr	r3, [r7, #8]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	695b      	ldr	r3, [r3, #20]
 800b8e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	bf14      	ite	ne
 800b8ec:	2301      	movne	r3, #1
 800b8ee:	2300      	moveq	r3, #0
 800b8f0:	b2db      	uxtb	r3, r3
 800b8f2:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800b8f4:	68bb      	ldr	r3, [r7, #8]
 800b8f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b8fa:	b2db      	uxtb	r3, r3
 800b8fc:	2b21      	cmp	r3, #33	; 0x21
 800b8fe:	d108      	bne.n	800b912 <UART_DMAError+0x46>
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	2b00      	cmp	r3, #0
 800b904:	d005      	beq.n	800b912 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800b906:	68bb      	ldr	r3, [r7, #8]
 800b908:	2200      	movs	r2, #0
 800b90a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800b90c:	68b8      	ldr	r0, [r7, #8]
 800b90e:	f000 f92f 	bl	800bb70 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b912:	68bb      	ldr	r3, [r7, #8]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	695b      	ldr	r3, [r3, #20]
 800b918:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	bf14      	ite	ne
 800b920:	2301      	movne	r3, #1
 800b922:	2300      	moveq	r3, #0
 800b924:	b2db      	uxtb	r3, r3
 800b926:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800b928:	68bb      	ldr	r3, [r7, #8]
 800b92a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b92e:	b2db      	uxtb	r3, r3
 800b930:	2b22      	cmp	r3, #34	; 0x22
 800b932:	d108      	bne.n	800b946 <UART_DMAError+0x7a>
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	2b00      	cmp	r3, #0
 800b938:	d005      	beq.n	800b946 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800b93a:	68bb      	ldr	r3, [r7, #8]
 800b93c:	2200      	movs	r2, #0
 800b93e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800b940:	68b8      	ldr	r0, [r7, #8]
 800b942:	f000 f93c 	bl	800bbbe <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b946:	68bb      	ldr	r3, [r7, #8]
 800b948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b94a:	f043 0210 	orr.w	r2, r3, #16
 800b94e:	68bb      	ldr	r3, [r7, #8]
 800b950:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b952:	68b8      	ldr	r0, [r7, #8]
 800b954:	f7ff fefd 	bl	800b752 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b958:	bf00      	nop
 800b95a:	3710      	adds	r7, #16
 800b95c:	46bd      	mov	sp, r7
 800b95e:	bd80      	pop	{r7, pc}

0800b960 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800b960:	b580      	push	{r7, lr}
 800b962:	b090      	sub	sp, #64	; 0x40
 800b964:	af00      	add	r7, sp, #0
 800b966:	60f8      	str	r0, [r7, #12]
 800b968:	60b9      	str	r1, [r7, #8]
 800b96a:	603b      	str	r3, [r7, #0]
 800b96c:	4613      	mov	r3, r2
 800b96e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b970:	e050      	b.n	800ba14 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b972:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b974:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b978:	d04c      	beq.n	800ba14 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800b97a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d007      	beq.n	800b990 <UART_WaitOnFlagUntilTimeout+0x30>
 800b980:	f7fc f9e4 	bl	8007d4c <HAL_GetTick>
 800b984:	4602      	mov	r2, r0
 800b986:	683b      	ldr	r3, [r7, #0]
 800b988:	1ad3      	subs	r3, r2, r3
 800b98a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b98c:	429a      	cmp	r2, r3
 800b98e:	d241      	bcs.n	800ba14 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	330c      	adds	r3, #12
 800b996:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b99a:	e853 3f00 	ldrex	r3, [r3]
 800b99e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b9a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9a2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b9a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	330c      	adds	r3, #12
 800b9ae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b9b0:	637a      	str	r2, [r7, #52]	; 0x34
 800b9b2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b9b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b9b8:	e841 2300 	strex	r3, r2, [r1]
 800b9bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b9be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d1e5      	bne.n	800b990 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	3314      	adds	r3, #20
 800b9ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9cc:	697b      	ldr	r3, [r7, #20]
 800b9ce:	e853 3f00 	ldrex	r3, [r3]
 800b9d2:	613b      	str	r3, [r7, #16]
   return(result);
 800b9d4:	693b      	ldr	r3, [r7, #16]
 800b9d6:	f023 0301 	bic.w	r3, r3, #1
 800b9da:	63bb      	str	r3, [r7, #56]	; 0x38
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	3314      	adds	r3, #20
 800b9e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b9e4:	623a      	str	r2, [r7, #32]
 800b9e6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9e8:	69f9      	ldr	r1, [r7, #28]
 800b9ea:	6a3a      	ldr	r2, [r7, #32]
 800b9ec:	e841 2300 	strex	r3, r2, [r1]
 800b9f0:	61bb      	str	r3, [r7, #24]
   return(result);
 800b9f2:	69bb      	ldr	r3, [r7, #24]
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d1e5      	bne.n	800b9c4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	2220      	movs	r2, #32
 800b9fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	2220      	movs	r2, #32
 800ba04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	2200      	movs	r2, #0
 800ba0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800ba10:	2303      	movs	r3, #3
 800ba12:	e00f      	b.n	800ba34 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	681a      	ldr	r2, [r3, #0]
 800ba1a:	68bb      	ldr	r3, [r7, #8]
 800ba1c:	4013      	ands	r3, r2
 800ba1e:	68ba      	ldr	r2, [r7, #8]
 800ba20:	429a      	cmp	r2, r3
 800ba22:	bf0c      	ite	eq
 800ba24:	2301      	moveq	r3, #1
 800ba26:	2300      	movne	r3, #0
 800ba28:	b2db      	uxtb	r3, r3
 800ba2a:	461a      	mov	r2, r3
 800ba2c:	79fb      	ldrb	r3, [r7, #7]
 800ba2e:	429a      	cmp	r2, r3
 800ba30:	d09f      	beq.n	800b972 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800ba32:	2300      	movs	r3, #0
}
 800ba34:	4618      	mov	r0, r3
 800ba36:	3740      	adds	r7, #64	; 0x40
 800ba38:	46bd      	mov	sp, r7
 800ba3a:	bd80      	pop	{r7, pc}

0800ba3c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ba3c:	b580      	push	{r7, lr}
 800ba3e:	b098      	sub	sp, #96	; 0x60
 800ba40:	af00      	add	r7, sp, #0
 800ba42:	60f8      	str	r0, [r7, #12]
 800ba44:	60b9      	str	r1, [r7, #8]
 800ba46:	4613      	mov	r3, r2
 800ba48:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800ba4a:	68ba      	ldr	r2, [r7, #8]
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	88fa      	ldrh	r2, [r7, #6]
 800ba54:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	2200      	movs	r2, #0
 800ba5a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	2222      	movs	r2, #34	; 0x22
 800ba60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba68:	4a3e      	ldr	r2, [pc, #248]	; (800bb64 <UART_Start_Receive_DMA+0x128>)
 800ba6a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba70:	4a3d      	ldr	r2, [pc, #244]	; (800bb68 <UART_Start_Receive_DMA+0x12c>)
 800ba72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba78:	4a3c      	ldr	r2, [pc, #240]	; (800bb6c <UART_Start_Receive_DMA+0x130>)
 800ba7a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba80:	2200      	movs	r2, #0
 800ba82:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800ba84:	f107 0308 	add.w	r3, r7, #8
 800ba88:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	3304      	adds	r3, #4
 800ba94:	4619      	mov	r1, r3
 800ba96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ba98:	681a      	ldr	r2, [r3, #0]
 800ba9a:	88fb      	ldrh	r3, [r7, #6]
 800ba9c:	f7fc feea 	bl	8008874 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800baa0:	2300      	movs	r3, #0
 800baa2:	613b      	str	r3, [r7, #16]
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	613b      	str	r3, [r7, #16]
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	685b      	ldr	r3, [r3, #4]
 800bab2:	613b      	str	r3, [r7, #16]
 800bab4:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	691b      	ldr	r3, [r3, #16]
 800baba:	2b00      	cmp	r3, #0
 800babc:	d019      	beq.n	800baf2 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	330c      	adds	r3, #12
 800bac4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bac6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bac8:	e853 3f00 	ldrex	r3, [r3]
 800bacc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bace:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bad0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bad4:	65bb      	str	r3, [r7, #88]	; 0x58
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	330c      	adds	r3, #12
 800badc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bade:	64fa      	str	r2, [r7, #76]	; 0x4c
 800bae0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bae2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800bae4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bae6:	e841 2300 	strex	r3, r2, [r1]
 800baea:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800baec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d1e5      	bne.n	800babe <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	3314      	adds	r3, #20
 800baf8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bafa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bafc:	e853 3f00 	ldrex	r3, [r3]
 800bb00:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bb02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb04:	f043 0301 	orr.w	r3, r3, #1
 800bb08:	657b      	str	r3, [r7, #84]	; 0x54
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	3314      	adds	r3, #20
 800bb10:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bb12:	63ba      	str	r2, [r7, #56]	; 0x38
 800bb14:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb16:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800bb18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bb1a:	e841 2300 	strex	r3, r2, [r1]
 800bb1e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bb20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d1e5      	bne.n	800baf2 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	3314      	adds	r3, #20
 800bb2c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb2e:	69bb      	ldr	r3, [r7, #24]
 800bb30:	e853 3f00 	ldrex	r3, [r3]
 800bb34:	617b      	str	r3, [r7, #20]
   return(result);
 800bb36:	697b      	ldr	r3, [r7, #20]
 800bb38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bb3c:	653b      	str	r3, [r7, #80]	; 0x50
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	3314      	adds	r3, #20
 800bb44:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bb46:	627a      	str	r2, [r7, #36]	; 0x24
 800bb48:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb4a:	6a39      	ldr	r1, [r7, #32]
 800bb4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb4e:	e841 2300 	strex	r3, r2, [r1]
 800bb52:	61fb      	str	r3, [r7, #28]
   return(result);
 800bb54:	69fb      	ldr	r3, [r7, #28]
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d1e5      	bne.n	800bb26 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800bb5a:	2300      	movs	r3, #0
}
 800bb5c:	4618      	mov	r0, r3
 800bb5e:	3760      	adds	r7, #96	; 0x60
 800bb60:	46bd      	mov	sp, r7
 800bb62:	bd80      	pop	{r7, pc}
 800bb64:	0800b765 	.word	0x0800b765
 800bb68:	0800b891 	.word	0x0800b891
 800bb6c:	0800b8cd 	.word	0x0800b8cd

0800bb70 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800bb70:	b480      	push	{r7}
 800bb72:	b089      	sub	sp, #36	; 0x24
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	330c      	adds	r3, #12
 800bb7e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	e853 3f00 	ldrex	r3, [r3]
 800bb86:	60bb      	str	r3, [r7, #8]
   return(result);
 800bb88:	68bb      	ldr	r3, [r7, #8]
 800bb8a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800bb8e:	61fb      	str	r3, [r7, #28]
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	330c      	adds	r3, #12
 800bb96:	69fa      	ldr	r2, [r7, #28]
 800bb98:	61ba      	str	r2, [r7, #24]
 800bb9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb9c:	6979      	ldr	r1, [r7, #20]
 800bb9e:	69ba      	ldr	r2, [r7, #24]
 800bba0:	e841 2300 	strex	r3, r2, [r1]
 800bba4:	613b      	str	r3, [r7, #16]
   return(result);
 800bba6:	693b      	ldr	r3, [r7, #16]
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d1e5      	bne.n	800bb78 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	2220      	movs	r2, #32
 800bbb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 800bbb4:	bf00      	nop
 800bbb6:	3724      	adds	r7, #36	; 0x24
 800bbb8:	46bd      	mov	sp, r7
 800bbba:	bc80      	pop	{r7}
 800bbbc:	4770      	bx	lr

0800bbbe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bbbe:	b480      	push	{r7}
 800bbc0:	b095      	sub	sp, #84	; 0x54
 800bbc2:	af00      	add	r7, sp, #0
 800bbc4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	330c      	adds	r3, #12
 800bbcc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbd0:	e853 3f00 	ldrex	r3, [r3]
 800bbd4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bbd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbd8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bbdc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	330c      	adds	r3, #12
 800bbe4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bbe6:	643a      	str	r2, [r7, #64]	; 0x40
 800bbe8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbea:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bbec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bbee:	e841 2300 	strex	r3, r2, [r1]
 800bbf2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bbf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d1e5      	bne.n	800bbc6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	3314      	adds	r3, #20
 800bc00:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc02:	6a3b      	ldr	r3, [r7, #32]
 800bc04:	e853 3f00 	ldrex	r3, [r3]
 800bc08:	61fb      	str	r3, [r7, #28]
   return(result);
 800bc0a:	69fb      	ldr	r3, [r7, #28]
 800bc0c:	f023 0301 	bic.w	r3, r3, #1
 800bc10:	64bb      	str	r3, [r7, #72]	; 0x48
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	3314      	adds	r3, #20
 800bc18:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bc1a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bc1c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc1e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bc20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bc22:	e841 2300 	strex	r3, r2, [r1]
 800bc26:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bc28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d1e5      	bne.n	800bbfa <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc32:	2b01      	cmp	r3, #1
 800bc34:	d119      	bne.n	800bc6a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	330c      	adds	r3, #12
 800bc3c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	e853 3f00 	ldrex	r3, [r3]
 800bc44:	60bb      	str	r3, [r7, #8]
   return(result);
 800bc46:	68bb      	ldr	r3, [r7, #8]
 800bc48:	f023 0310 	bic.w	r3, r3, #16
 800bc4c:	647b      	str	r3, [r7, #68]	; 0x44
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	330c      	adds	r3, #12
 800bc54:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bc56:	61ba      	str	r2, [r7, #24]
 800bc58:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc5a:	6979      	ldr	r1, [r7, #20]
 800bc5c:	69ba      	ldr	r2, [r7, #24]
 800bc5e:	e841 2300 	strex	r3, r2, [r1]
 800bc62:	613b      	str	r3, [r7, #16]
   return(result);
 800bc64:	693b      	ldr	r3, [r7, #16]
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d1e5      	bne.n	800bc36 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	2220      	movs	r2, #32
 800bc6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	2200      	movs	r2, #0
 800bc76:	631a      	str	r2, [r3, #48]	; 0x30
}
 800bc78:	bf00      	nop
 800bc7a:	3754      	adds	r7, #84	; 0x54
 800bc7c:	46bd      	mov	sp, r7
 800bc7e:	bc80      	pop	{r7}
 800bc80:	4770      	bx	lr

0800bc82 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bc82:	b580      	push	{r7, lr}
 800bc84:	b084      	sub	sp, #16
 800bc86:	af00      	add	r7, sp, #0
 800bc88:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc8e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	2200      	movs	r2, #0
 800bc94:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	2200      	movs	r2, #0
 800bc9a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bc9c:	68f8      	ldr	r0, [r7, #12]
 800bc9e:	f7ff fd58 	bl	800b752 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bca2:	bf00      	nop
 800bca4:	3710      	adds	r7, #16
 800bca6:	46bd      	mov	sp, r7
 800bca8:	bd80      	pop	{r7, pc}

0800bcaa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800bcaa:	b480      	push	{r7}
 800bcac:	b085      	sub	sp, #20
 800bcae:	af00      	add	r7, sp, #0
 800bcb0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bcb8:	b2db      	uxtb	r3, r3
 800bcba:	2b21      	cmp	r3, #33	; 0x21
 800bcbc:	d13e      	bne.n	800bd3c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	689b      	ldr	r3, [r3, #8]
 800bcc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bcc6:	d114      	bne.n	800bcf2 <UART_Transmit_IT+0x48>
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	691b      	ldr	r3, [r3, #16]
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d110      	bne.n	800bcf2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	6a1b      	ldr	r3, [r3, #32]
 800bcd4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	881b      	ldrh	r3, [r3, #0]
 800bcda:	461a      	mov	r2, r3
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bce4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	6a1b      	ldr	r3, [r3, #32]
 800bcea:	1c9a      	adds	r2, r3, #2
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	621a      	str	r2, [r3, #32]
 800bcf0:	e008      	b.n	800bd04 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	6a1b      	ldr	r3, [r3, #32]
 800bcf6:	1c59      	adds	r1, r3, #1
 800bcf8:	687a      	ldr	r2, [r7, #4]
 800bcfa:	6211      	str	r1, [r2, #32]
 800bcfc:	781a      	ldrb	r2, [r3, #0]
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800bd08:	b29b      	uxth	r3, r3
 800bd0a:	3b01      	subs	r3, #1
 800bd0c:	b29b      	uxth	r3, r3
 800bd0e:	687a      	ldr	r2, [r7, #4]
 800bd10:	4619      	mov	r1, r3
 800bd12:	84d1      	strh	r1, [r2, #38]	; 0x26
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d10f      	bne.n	800bd38 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	68da      	ldr	r2, [r3, #12]
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bd26:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	68da      	ldr	r2, [r3, #12]
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bd36:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800bd38:	2300      	movs	r3, #0
 800bd3a:	e000      	b.n	800bd3e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800bd3c:	2302      	movs	r3, #2
  }
}
 800bd3e:	4618      	mov	r0, r3
 800bd40:	3714      	adds	r7, #20
 800bd42:	46bd      	mov	sp, r7
 800bd44:	bc80      	pop	{r7}
 800bd46:	4770      	bx	lr

0800bd48 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bd48:	b580      	push	{r7, lr}
 800bd4a:	b082      	sub	sp, #8
 800bd4c:	af00      	add	r7, sp, #0
 800bd4e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	68da      	ldr	r2, [r3, #12]
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bd5e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	2220      	movs	r2, #32
 800bd64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bd68:	6878      	ldr	r0, [r7, #4]
 800bd6a:	f7ff fcd7 	bl	800b71c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800bd6e:	2300      	movs	r3, #0
}
 800bd70:	4618      	mov	r0, r3
 800bd72:	3708      	adds	r7, #8
 800bd74:	46bd      	mov	sp, r7
 800bd76:	bd80      	pop	{r7, pc}

0800bd78 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800bd78:	b580      	push	{r7, lr}
 800bd7a:	b08c      	sub	sp, #48	; 0x30
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bd86:	b2db      	uxtb	r3, r3
 800bd88:	2b22      	cmp	r3, #34	; 0x22
 800bd8a:	f040 80ae 	bne.w	800beea <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	689b      	ldr	r3, [r3, #8]
 800bd92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bd96:	d117      	bne.n	800bdc8 <UART_Receive_IT+0x50>
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	691b      	ldr	r3, [r3, #16]
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d113      	bne.n	800bdc8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800bda0:	2300      	movs	r3, #0
 800bda2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bda8:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	685b      	ldr	r3, [r3, #4]
 800bdb0:	b29b      	uxth	r3, r3
 800bdb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bdb6:	b29a      	uxth	r2, r3
 800bdb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdba:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bdc0:	1c9a      	adds	r2, r3, #2
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	629a      	str	r2, [r3, #40]	; 0x28
 800bdc6:	e026      	b.n	800be16 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bdcc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800bdce:	2300      	movs	r3, #0
 800bdd0:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	689b      	ldr	r3, [r3, #8]
 800bdd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bdda:	d007      	beq.n	800bdec <UART_Receive_IT+0x74>
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	689b      	ldr	r3, [r3, #8]
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d10a      	bne.n	800bdfa <UART_Receive_IT+0x82>
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	691b      	ldr	r3, [r3, #16]
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d106      	bne.n	800bdfa <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	685b      	ldr	r3, [r3, #4]
 800bdf2:	b2da      	uxtb	r2, r3
 800bdf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdf6:	701a      	strb	r2, [r3, #0]
 800bdf8:	e008      	b.n	800be0c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	685b      	ldr	r3, [r3, #4]
 800be00:	b2db      	uxtb	r3, r3
 800be02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800be06:	b2da      	uxtb	r2, r3
 800be08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be0a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be10:	1c5a      	adds	r2, r3, #1
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800be1a:	b29b      	uxth	r3, r3
 800be1c:	3b01      	subs	r3, #1
 800be1e:	b29b      	uxth	r3, r3
 800be20:	687a      	ldr	r2, [r7, #4]
 800be22:	4619      	mov	r1, r3
 800be24:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800be26:	2b00      	cmp	r3, #0
 800be28:	d15d      	bne.n	800bee6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	68da      	ldr	r2, [r3, #12]
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	f022 0220 	bic.w	r2, r2, #32
 800be38:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	68da      	ldr	r2, [r3, #12]
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800be48:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	695a      	ldr	r2, [r3, #20]
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	f022 0201 	bic.w	r2, r2, #1
 800be58:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	2220      	movs	r2, #32
 800be5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	2200      	movs	r2, #0
 800be66:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be6c:	2b01      	cmp	r3, #1
 800be6e:	d135      	bne.n	800bedc <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	2200      	movs	r2, #0
 800be74:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	330c      	adds	r3, #12
 800be7c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be7e:	697b      	ldr	r3, [r7, #20]
 800be80:	e853 3f00 	ldrex	r3, [r3]
 800be84:	613b      	str	r3, [r7, #16]
   return(result);
 800be86:	693b      	ldr	r3, [r7, #16]
 800be88:	f023 0310 	bic.w	r3, r3, #16
 800be8c:	627b      	str	r3, [r7, #36]	; 0x24
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	330c      	adds	r3, #12
 800be94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be96:	623a      	str	r2, [r7, #32]
 800be98:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be9a:	69f9      	ldr	r1, [r7, #28]
 800be9c:	6a3a      	ldr	r2, [r7, #32]
 800be9e:	e841 2300 	strex	r3, r2, [r1]
 800bea2:	61bb      	str	r3, [r7, #24]
   return(result);
 800bea4:	69bb      	ldr	r3, [r7, #24]
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d1e5      	bne.n	800be76 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	f003 0310 	and.w	r3, r3, #16
 800beb4:	2b10      	cmp	r3, #16
 800beb6:	d10a      	bne.n	800bece <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800beb8:	2300      	movs	r3, #0
 800beba:	60fb      	str	r3, [r7, #12]
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	60fb      	str	r3, [r7, #12]
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	685b      	ldr	r3, [r3, #4]
 800beca:	60fb      	str	r3, [r7, #12]
 800becc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800bed2:	4619      	mov	r1, r3
 800bed4:	6878      	ldr	r0, [r7, #4]
 800bed6:	f7fa f831 	bl	8005f3c <HAL_UARTEx_RxEventCallback>
 800beda:	e002      	b.n	800bee2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800bedc:	6878      	ldr	r0, [r7, #4]
 800bede:	f7ff fc26 	bl	800b72e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800bee2:	2300      	movs	r3, #0
 800bee4:	e002      	b.n	800beec <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800bee6:	2300      	movs	r3, #0
 800bee8:	e000      	b.n	800beec <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800beea:	2302      	movs	r3, #2
  }
}
 800beec:	4618      	mov	r0, r3
 800beee:	3730      	adds	r7, #48	; 0x30
 800bef0:	46bd      	mov	sp, r7
 800bef2:	bd80      	pop	{r7, pc}

0800bef4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bef4:	b580      	push	{r7, lr}
 800bef6:	b084      	sub	sp, #16
 800bef8:	af00      	add	r7, sp, #0
 800befa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	691b      	ldr	r3, [r3, #16]
 800bf02:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	68da      	ldr	r2, [r3, #12]
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	430a      	orrs	r2, r1
 800bf10:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	689a      	ldr	r2, [r3, #8]
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	691b      	ldr	r3, [r3, #16]
 800bf1a:	431a      	orrs	r2, r3
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	695b      	ldr	r3, [r3, #20]
 800bf20:	4313      	orrs	r3, r2
 800bf22:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	68db      	ldr	r3, [r3, #12]
 800bf2a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800bf2e:	f023 030c 	bic.w	r3, r3, #12
 800bf32:	687a      	ldr	r2, [r7, #4]
 800bf34:	6812      	ldr	r2, [r2, #0]
 800bf36:	68b9      	ldr	r1, [r7, #8]
 800bf38:	430b      	orrs	r3, r1
 800bf3a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	695b      	ldr	r3, [r3, #20]
 800bf42:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	699a      	ldr	r2, [r3, #24]
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	430a      	orrs	r2, r1
 800bf50:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	4a2c      	ldr	r2, [pc, #176]	; (800c008 <UART_SetConfig+0x114>)
 800bf58:	4293      	cmp	r3, r2
 800bf5a:	d103      	bne.n	800bf64 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800bf5c:	f7fe fcc8 	bl	800a8f0 <HAL_RCC_GetPCLK2Freq>
 800bf60:	60f8      	str	r0, [r7, #12]
 800bf62:	e002      	b.n	800bf6a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800bf64:	f7fe fcb0 	bl	800a8c8 <HAL_RCC_GetPCLK1Freq>
 800bf68:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800bf6a:	68fa      	ldr	r2, [r7, #12]
 800bf6c:	4613      	mov	r3, r2
 800bf6e:	009b      	lsls	r3, r3, #2
 800bf70:	4413      	add	r3, r2
 800bf72:	009a      	lsls	r2, r3, #2
 800bf74:	441a      	add	r2, r3
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	685b      	ldr	r3, [r3, #4]
 800bf7a:	009b      	lsls	r3, r3, #2
 800bf7c:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf80:	4a22      	ldr	r2, [pc, #136]	; (800c00c <UART_SetConfig+0x118>)
 800bf82:	fba2 2303 	umull	r2, r3, r2, r3
 800bf86:	095b      	lsrs	r3, r3, #5
 800bf88:	0119      	lsls	r1, r3, #4
 800bf8a:	68fa      	ldr	r2, [r7, #12]
 800bf8c:	4613      	mov	r3, r2
 800bf8e:	009b      	lsls	r3, r3, #2
 800bf90:	4413      	add	r3, r2
 800bf92:	009a      	lsls	r2, r3, #2
 800bf94:	441a      	add	r2, r3
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	685b      	ldr	r3, [r3, #4]
 800bf9a:	009b      	lsls	r3, r3, #2
 800bf9c:	fbb2 f2f3 	udiv	r2, r2, r3
 800bfa0:	4b1a      	ldr	r3, [pc, #104]	; (800c00c <UART_SetConfig+0x118>)
 800bfa2:	fba3 0302 	umull	r0, r3, r3, r2
 800bfa6:	095b      	lsrs	r3, r3, #5
 800bfa8:	2064      	movs	r0, #100	; 0x64
 800bfaa:	fb00 f303 	mul.w	r3, r0, r3
 800bfae:	1ad3      	subs	r3, r2, r3
 800bfb0:	011b      	lsls	r3, r3, #4
 800bfb2:	3332      	adds	r3, #50	; 0x32
 800bfb4:	4a15      	ldr	r2, [pc, #84]	; (800c00c <UART_SetConfig+0x118>)
 800bfb6:	fba2 2303 	umull	r2, r3, r2, r3
 800bfba:	095b      	lsrs	r3, r3, #5
 800bfbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bfc0:	4419      	add	r1, r3
 800bfc2:	68fa      	ldr	r2, [r7, #12]
 800bfc4:	4613      	mov	r3, r2
 800bfc6:	009b      	lsls	r3, r3, #2
 800bfc8:	4413      	add	r3, r2
 800bfca:	009a      	lsls	r2, r3, #2
 800bfcc:	441a      	add	r2, r3
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	685b      	ldr	r3, [r3, #4]
 800bfd2:	009b      	lsls	r3, r3, #2
 800bfd4:	fbb2 f2f3 	udiv	r2, r2, r3
 800bfd8:	4b0c      	ldr	r3, [pc, #48]	; (800c00c <UART_SetConfig+0x118>)
 800bfda:	fba3 0302 	umull	r0, r3, r3, r2
 800bfde:	095b      	lsrs	r3, r3, #5
 800bfe0:	2064      	movs	r0, #100	; 0x64
 800bfe2:	fb00 f303 	mul.w	r3, r0, r3
 800bfe6:	1ad3      	subs	r3, r2, r3
 800bfe8:	011b      	lsls	r3, r3, #4
 800bfea:	3332      	adds	r3, #50	; 0x32
 800bfec:	4a07      	ldr	r2, [pc, #28]	; (800c00c <UART_SetConfig+0x118>)
 800bfee:	fba2 2303 	umull	r2, r3, r2, r3
 800bff2:	095b      	lsrs	r3, r3, #5
 800bff4:	f003 020f 	and.w	r2, r3, #15
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	440a      	add	r2, r1
 800bffe:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800c000:	bf00      	nop
 800c002:	3710      	adds	r7, #16
 800c004:	46bd      	mov	sp, r7
 800c006:	bd80      	pop	{r7, pc}
 800c008:	40013800 	.word	0x40013800
 800c00c:	51eb851f 	.word	0x51eb851f

0800c010 <atoi>:
 800c010:	220a      	movs	r2, #10
 800c012:	2100      	movs	r1, #0
 800c014:	f000 bde6 	b.w	800cbe4 <strtol>

0800c018 <__errno>:
 800c018:	4b01      	ldr	r3, [pc, #4]	; (800c020 <__errno+0x8>)
 800c01a:	6818      	ldr	r0, [r3, #0]
 800c01c:	4770      	bx	lr
 800c01e:	bf00      	nop
 800c020:	200004e0 	.word	0x200004e0

0800c024 <__libc_init_array>:
 800c024:	b570      	push	{r4, r5, r6, lr}
 800c026:	2600      	movs	r6, #0
 800c028:	4d0c      	ldr	r5, [pc, #48]	; (800c05c <__libc_init_array+0x38>)
 800c02a:	4c0d      	ldr	r4, [pc, #52]	; (800c060 <__libc_init_array+0x3c>)
 800c02c:	1b64      	subs	r4, r4, r5
 800c02e:	10a4      	asrs	r4, r4, #2
 800c030:	42a6      	cmp	r6, r4
 800c032:	d109      	bne.n	800c048 <__libc_init_array+0x24>
 800c034:	f002 fe46 	bl	800ecc4 <_init>
 800c038:	2600      	movs	r6, #0
 800c03a:	4d0a      	ldr	r5, [pc, #40]	; (800c064 <__libc_init_array+0x40>)
 800c03c:	4c0a      	ldr	r4, [pc, #40]	; (800c068 <__libc_init_array+0x44>)
 800c03e:	1b64      	subs	r4, r4, r5
 800c040:	10a4      	asrs	r4, r4, #2
 800c042:	42a6      	cmp	r6, r4
 800c044:	d105      	bne.n	800c052 <__libc_init_array+0x2e>
 800c046:	bd70      	pop	{r4, r5, r6, pc}
 800c048:	f855 3b04 	ldr.w	r3, [r5], #4
 800c04c:	4798      	blx	r3
 800c04e:	3601      	adds	r6, #1
 800c050:	e7ee      	b.n	800c030 <__libc_init_array+0xc>
 800c052:	f855 3b04 	ldr.w	r3, [r5], #4
 800c056:	4798      	blx	r3
 800c058:	3601      	adds	r6, #1
 800c05a:	e7f2      	b.n	800c042 <__libc_init_array+0x1e>
 800c05c:	0800f9b0 	.word	0x0800f9b0
 800c060:	0800f9b0 	.word	0x0800f9b0
 800c064:	0800f9b0 	.word	0x0800f9b0
 800c068:	0800f9b4 	.word	0x0800f9b4

0800c06c <localtime>:
 800c06c:	b538      	push	{r3, r4, r5, lr}
 800c06e:	4b0b      	ldr	r3, [pc, #44]	; (800c09c <localtime+0x30>)
 800c070:	4604      	mov	r4, r0
 800c072:	681d      	ldr	r5, [r3, #0]
 800c074:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800c076:	b953      	cbnz	r3, 800c08e <localtime+0x22>
 800c078:	2024      	movs	r0, #36	; 0x24
 800c07a:	f000 f907 	bl	800c28c <malloc>
 800c07e:	4602      	mov	r2, r0
 800c080:	63e8      	str	r0, [r5, #60]	; 0x3c
 800c082:	b920      	cbnz	r0, 800c08e <localtime+0x22>
 800c084:	2132      	movs	r1, #50	; 0x32
 800c086:	4b06      	ldr	r3, [pc, #24]	; (800c0a0 <localtime+0x34>)
 800c088:	4806      	ldr	r0, [pc, #24]	; (800c0a4 <localtime+0x38>)
 800c08a:	f000 fff3 	bl	800d074 <__assert_func>
 800c08e:	4620      	mov	r0, r4
 800c090:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 800c092:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c096:	f000 b807 	b.w	800c0a8 <localtime_r>
 800c09a:	bf00      	nop
 800c09c:	200004e0 	.word	0x200004e0
 800c0a0:	0800f5ec 	.word	0x0800f5ec
 800c0a4:	0800f603 	.word	0x0800f603

0800c0a8 <localtime_r>:
 800c0a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0ac:	460c      	mov	r4, r1
 800c0ae:	4680      	mov	r8, r0
 800c0b0:	f001 f868 	bl	800d184 <__gettzinfo>
 800c0b4:	4621      	mov	r1, r4
 800c0b6:	4605      	mov	r5, r0
 800c0b8:	4640      	mov	r0, r8
 800c0ba:	f001 f867 	bl	800d18c <gmtime_r>
 800c0be:	6943      	ldr	r3, [r0, #20]
 800c0c0:	4604      	mov	r4, r0
 800c0c2:	0799      	lsls	r1, r3, #30
 800c0c4:	f203 776c 	addw	r7, r3, #1900	; 0x76c
 800c0c8:	d105      	bne.n	800c0d6 <localtime_r+0x2e>
 800c0ca:	2264      	movs	r2, #100	; 0x64
 800c0cc:	fb97 f3f2 	sdiv	r3, r7, r2
 800c0d0:	fb02 7313 	mls	r3, r2, r3, r7
 800c0d4:	bb73      	cbnz	r3, 800c134 <localtime_r+0x8c>
 800c0d6:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800c0da:	fb97 f6f3 	sdiv	r6, r7, r3
 800c0de:	fb03 7616 	mls	r6, r3, r6, r7
 800c0e2:	fab6 f386 	clz	r3, r6
 800c0e6:	095b      	lsrs	r3, r3, #5
 800c0e8:	2230      	movs	r2, #48	; 0x30
 800c0ea:	4e66      	ldr	r6, [pc, #408]	; (800c284 <localtime_r+0x1dc>)
 800c0ec:	fb02 6603 	mla	r6, r2, r3, r6
 800c0f0:	f000 fe2c 	bl	800cd4c <__tz_lock>
 800c0f4:	f000 fe36 	bl	800cd64 <_tzset_unlocked>
 800c0f8:	4b63      	ldr	r3, [pc, #396]	; (800c288 <localtime_r+0x1e0>)
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	b34b      	cbz	r3, 800c152 <localtime_r+0xaa>
 800c0fe:	686b      	ldr	r3, [r5, #4]
 800c100:	42bb      	cmp	r3, r7
 800c102:	d119      	bne.n	800c138 <localtime_r+0x90>
 800c104:	e9d8 2300 	ldrd	r2, r3, [r8]
 800c108:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 800c10c:	682f      	ldr	r7, [r5, #0]
 800c10e:	b9df      	cbnz	r7, 800c148 <localtime_r+0xa0>
 800c110:	4282      	cmp	r2, r0
 800c112:	eb73 0101 	sbcs.w	r1, r3, r1
 800c116:	da23      	bge.n	800c160 <localtime_r+0xb8>
 800c118:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
 800c11c:	4282      	cmp	r2, r0
 800c11e:	eb73 0701 	sbcs.w	r7, r3, r1
 800c122:	bfb4      	ite	lt
 800c124:	2701      	movlt	r7, #1
 800c126:	2700      	movge	r7, #0
 800c128:	4282      	cmp	r2, r0
 800c12a:	418b      	sbcs	r3, r1
 800c12c:	6227      	str	r7, [r4, #32]
 800c12e:	db19      	blt.n	800c164 <localtime_r+0xbc>
 800c130:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800c132:	e018      	b.n	800c166 <localtime_r+0xbe>
 800c134:	2301      	movs	r3, #1
 800c136:	e7d7      	b.n	800c0e8 <localtime_r+0x40>
 800c138:	4638      	mov	r0, r7
 800c13a:	f000 fd5d 	bl	800cbf8 <__tzcalc_limits>
 800c13e:	2800      	cmp	r0, #0
 800c140:	d1e0      	bne.n	800c104 <localtime_r+0x5c>
 800c142:	f04f 33ff 	mov.w	r3, #4294967295
 800c146:	e004      	b.n	800c152 <localtime_r+0xaa>
 800c148:	4282      	cmp	r2, r0
 800c14a:	eb73 0101 	sbcs.w	r1, r3, r1
 800c14e:	da02      	bge.n	800c156 <localtime_r+0xae>
 800c150:	2300      	movs	r3, #0
 800c152:	6223      	str	r3, [r4, #32]
 800c154:	e7ec      	b.n	800c130 <localtime_r+0x88>
 800c156:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
 800c15a:	4282      	cmp	r2, r0
 800c15c:	418b      	sbcs	r3, r1
 800c15e:	daf7      	bge.n	800c150 <localtime_r+0xa8>
 800c160:	2301      	movs	r3, #1
 800c162:	6223      	str	r3, [r4, #32]
 800c164:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800c166:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 800c16a:	fb93 f5f2 	sdiv	r5, r3, r2
 800c16e:	203c      	movs	r0, #60	; 0x3c
 800c170:	fb02 3315 	mls	r3, r2, r5, r3
 800c174:	fb93 f2f0 	sdiv	r2, r3, r0
 800c178:	fb00 3012 	mls	r0, r0, r2, r3
 800c17c:	6861      	ldr	r1, [r4, #4]
 800c17e:	6823      	ldr	r3, [r4, #0]
 800c180:	1a89      	subs	r1, r1, r2
 800c182:	68a2      	ldr	r2, [r4, #8]
 800c184:	1a1b      	subs	r3, r3, r0
 800c186:	1b52      	subs	r2, r2, r5
 800c188:	2b3b      	cmp	r3, #59	; 0x3b
 800c18a:	6023      	str	r3, [r4, #0]
 800c18c:	6061      	str	r1, [r4, #4]
 800c18e:	60a2      	str	r2, [r4, #8]
 800c190:	dd34      	ble.n	800c1fc <localtime_r+0x154>
 800c192:	3101      	adds	r1, #1
 800c194:	6061      	str	r1, [r4, #4]
 800c196:	3b3c      	subs	r3, #60	; 0x3c
 800c198:	6023      	str	r3, [r4, #0]
 800c19a:	6863      	ldr	r3, [r4, #4]
 800c19c:	2b3b      	cmp	r3, #59	; 0x3b
 800c19e:	dd33      	ble.n	800c208 <localtime_r+0x160>
 800c1a0:	3201      	adds	r2, #1
 800c1a2:	60a2      	str	r2, [r4, #8]
 800c1a4:	3b3c      	subs	r3, #60	; 0x3c
 800c1a6:	6063      	str	r3, [r4, #4]
 800c1a8:	68a3      	ldr	r3, [r4, #8]
 800c1aa:	2b17      	cmp	r3, #23
 800c1ac:	dd32      	ble.n	800c214 <localtime_r+0x16c>
 800c1ae:	69e2      	ldr	r2, [r4, #28]
 800c1b0:	3b18      	subs	r3, #24
 800c1b2:	3201      	adds	r2, #1
 800c1b4:	61e2      	str	r2, [r4, #28]
 800c1b6:	69a2      	ldr	r2, [r4, #24]
 800c1b8:	60a3      	str	r3, [r4, #8]
 800c1ba:	3201      	adds	r2, #1
 800c1bc:	2a06      	cmp	r2, #6
 800c1be:	bfc8      	it	gt
 800c1c0:	2200      	movgt	r2, #0
 800c1c2:	61a2      	str	r2, [r4, #24]
 800c1c4:	68e2      	ldr	r2, [r4, #12]
 800c1c6:	6923      	ldr	r3, [r4, #16]
 800c1c8:	3201      	adds	r2, #1
 800c1ca:	60e2      	str	r2, [r4, #12]
 800c1cc:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 800c1d0:	428a      	cmp	r2, r1
 800c1d2:	dd0e      	ble.n	800c1f2 <localtime_r+0x14a>
 800c1d4:	2b0b      	cmp	r3, #11
 800c1d6:	eba2 0201 	sub.w	r2, r2, r1
 800c1da:	60e2      	str	r2, [r4, #12]
 800c1dc:	f103 0201 	add.w	r2, r3, #1
 800c1e0:	bf05      	ittet	eq
 800c1e2:	2200      	moveq	r2, #0
 800c1e4:	6963      	ldreq	r3, [r4, #20]
 800c1e6:	6122      	strne	r2, [r4, #16]
 800c1e8:	3301      	addeq	r3, #1
 800c1ea:	bf02      	ittt	eq
 800c1ec:	6122      	streq	r2, [r4, #16]
 800c1ee:	6163      	streq	r3, [r4, #20]
 800c1f0:	61e2      	streq	r2, [r4, #28]
 800c1f2:	f000 fdb1 	bl	800cd58 <__tz_unlock>
 800c1f6:	4620      	mov	r0, r4
 800c1f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	dacc      	bge.n	800c19a <localtime_r+0xf2>
 800c200:	3901      	subs	r1, #1
 800c202:	6061      	str	r1, [r4, #4]
 800c204:	333c      	adds	r3, #60	; 0x3c
 800c206:	e7c7      	b.n	800c198 <localtime_r+0xf0>
 800c208:	2b00      	cmp	r3, #0
 800c20a:	dacd      	bge.n	800c1a8 <localtime_r+0x100>
 800c20c:	3a01      	subs	r2, #1
 800c20e:	60a2      	str	r2, [r4, #8]
 800c210:	333c      	adds	r3, #60	; 0x3c
 800c212:	e7c8      	b.n	800c1a6 <localtime_r+0xfe>
 800c214:	2b00      	cmp	r3, #0
 800c216:	daec      	bge.n	800c1f2 <localtime_r+0x14a>
 800c218:	69e2      	ldr	r2, [r4, #28]
 800c21a:	3318      	adds	r3, #24
 800c21c:	3a01      	subs	r2, #1
 800c21e:	61e2      	str	r2, [r4, #28]
 800c220:	69a2      	ldr	r2, [r4, #24]
 800c222:	60a3      	str	r3, [r4, #8]
 800c224:	3a01      	subs	r2, #1
 800c226:	bf48      	it	mi
 800c228:	2206      	movmi	r2, #6
 800c22a:	61a2      	str	r2, [r4, #24]
 800c22c:	68e2      	ldr	r2, [r4, #12]
 800c22e:	3a01      	subs	r2, #1
 800c230:	60e2      	str	r2, [r4, #12]
 800c232:	2a00      	cmp	r2, #0
 800c234:	d1dd      	bne.n	800c1f2 <localtime_r+0x14a>
 800c236:	6923      	ldr	r3, [r4, #16]
 800c238:	3b01      	subs	r3, #1
 800c23a:	d405      	bmi.n	800c248 <localtime_r+0x1a0>
 800c23c:	6123      	str	r3, [r4, #16]
 800c23e:	6923      	ldr	r3, [r4, #16]
 800c240:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 800c244:	60e3      	str	r3, [r4, #12]
 800c246:	e7d4      	b.n	800c1f2 <localtime_r+0x14a>
 800c248:	230b      	movs	r3, #11
 800c24a:	6123      	str	r3, [r4, #16]
 800c24c:	6963      	ldr	r3, [r4, #20]
 800c24e:	1e5a      	subs	r2, r3, #1
 800c250:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 800c254:	6162      	str	r2, [r4, #20]
 800c256:	079a      	lsls	r2, r3, #30
 800c258:	d105      	bne.n	800c266 <localtime_r+0x1be>
 800c25a:	2164      	movs	r1, #100	; 0x64
 800c25c:	fb93 f2f1 	sdiv	r2, r3, r1
 800c260:	fb01 3212 	mls	r2, r1, r2, r3
 800c264:	b962      	cbnz	r2, 800c280 <localtime_r+0x1d8>
 800c266:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800c26a:	fb93 f1f2 	sdiv	r1, r3, r2
 800c26e:	fb02 3311 	mls	r3, r2, r1, r3
 800c272:	fab3 f383 	clz	r3, r3
 800c276:	095b      	lsrs	r3, r3, #5
 800c278:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 800c27c:	61e3      	str	r3, [r4, #28]
 800c27e:	e7de      	b.n	800c23e <localtime_r+0x196>
 800c280:	2301      	movs	r3, #1
 800c282:	e7f9      	b.n	800c278 <localtime_r+0x1d0>
 800c284:	0800f6c0 	.word	0x0800f6c0
 800c288:	2000275c 	.word	0x2000275c

0800c28c <malloc>:
 800c28c:	4b02      	ldr	r3, [pc, #8]	; (800c298 <malloc+0xc>)
 800c28e:	4601      	mov	r1, r0
 800c290:	6818      	ldr	r0, [r3, #0]
 800c292:	f000 bb0b 	b.w	800c8ac <_malloc_r>
 800c296:	bf00      	nop
 800c298:	200004e0 	.word	0x200004e0

0800c29c <free>:
 800c29c:	4b02      	ldr	r3, [pc, #8]	; (800c2a8 <free+0xc>)
 800c29e:	4601      	mov	r1, r0
 800c2a0:	6818      	ldr	r0, [r3, #0]
 800c2a2:	f000 ba9b 	b.w	800c7dc <_free_r>
 800c2a6:	bf00      	nop
 800c2a8:	200004e0 	.word	0x200004e0

0800c2ac <memcmp>:
 800c2ac:	b510      	push	{r4, lr}
 800c2ae:	3901      	subs	r1, #1
 800c2b0:	4402      	add	r2, r0
 800c2b2:	4290      	cmp	r0, r2
 800c2b4:	d101      	bne.n	800c2ba <memcmp+0xe>
 800c2b6:	2000      	movs	r0, #0
 800c2b8:	e005      	b.n	800c2c6 <memcmp+0x1a>
 800c2ba:	7803      	ldrb	r3, [r0, #0]
 800c2bc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c2c0:	42a3      	cmp	r3, r4
 800c2c2:	d001      	beq.n	800c2c8 <memcmp+0x1c>
 800c2c4:	1b18      	subs	r0, r3, r4
 800c2c6:	bd10      	pop	{r4, pc}
 800c2c8:	3001      	adds	r0, #1
 800c2ca:	e7f2      	b.n	800c2b2 <memcmp+0x6>

0800c2cc <memcpy>:
 800c2cc:	440a      	add	r2, r1
 800c2ce:	4291      	cmp	r1, r2
 800c2d0:	f100 33ff 	add.w	r3, r0, #4294967295
 800c2d4:	d100      	bne.n	800c2d8 <memcpy+0xc>
 800c2d6:	4770      	bx	lr
 800c2d8:	b510      	push	{r4, lr}
 800c2da:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c2de:	4291      	cmp	r1, r2
 800c2e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c2e4:	d1f9      	bne.n	800c2da <memcpy+0xe>
 800c2e6:	bd10      	pop	{r4, pc}

0800c2e8 <memset>:
 800c2e8:	4603      	mov	r3, r0
 800c2ea:	4402      	add	r2, r0
 800c2ec:	4293      	cmp	r3, r2
 800c2ee:	d100      	bne.n	800c2f2 <memset+0xa>
 800c2f0:	4770      	bx	lr
 800c2f2:	f803 1b01 	strb.w	r1, [r3], #1
 800c2f6:	e7f9      	b.n	800c2ec <memset+0x4>

0800c2f8 <validate_structure>:
 800c2f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c2fa:	6801      	ldr	r1, [r0, #0]
 800c2fc:	4604      	mov	r4, r0
 800c2fe:	293b      	cmp	r1, #59	; 0x3b
 800c300:	d911      	bls.n	800c326 <validate_structure+0x2e>
 800c302:	223c      	movs	r2, #60	; 0x3c
 800c304:	4668      	mov	r0, sp
 800c306:	f000 fed3 	bl	800d0b0 <div>
 800c30a:	9a01      	ldr	r2, [sp, #4]
 800c30c:	6863      	ldr	r3, [r4, #4]
 800c30e:	9900      	ldr	r1, [sp, #0]
 800c310:	2a00      	cmp	r2, #0
 800c312:	440b      	add	r3, r1
 800c314:	6063      	str	r3, [r4, #4]
 800c316:	bfbb      	ittet	lt
 800c318:	323c      	addlt	r2, #60	; 0x3c
 800c31a:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800c31e:	6022      	strge	r2, [r4, #0]
 800c320:	6022      	strlt	r2, [r4, #0]
 800c322:	bfb8      	it	lt
 800c324:	6063      	strlt	r3, [r4, #4]
 800c326:	6861      	ldr	r1, [r4, #4]
 800c328:	293b      	cmp	r1, #59	; 0x3b
 800c32a:	d911      	bls.n	800c350 <validate_structure+0x58>
 800c32c:	223c      	movs	r2, #60	; 0x3c
 800c32e:	4668      	mov	r0, sp
 800c330:	f000 febe 	bl	800d0b0 <div>
 800c334:	9a01      	ldr	r2, [sp, #4]
 800c336:	68a3      	ldr	r3, [r4, #8]
 800c338:	9900      	ldr	r1, [sp, #0]
 800c33a:	2a00      	cmp	r2, #0
 800c33c:	440b      	add	r3, r1
 800c33e:	60a3      	str	r3, [r4, #8]
 800c340:	bfbb      	ittet	lt
 800c342:	323c      	addlt	r2, #60	; 0x3c
 800c344:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800c348:	6062      	strge	r2, [r4, #4]
 800c34a:	6062      	strlt	r2, [r4, #4]
 800c34c:	bfb8      	it	lt
 800c34e:	60a3      	strlt	r3, [r4, #8]
 800c350:	68a1      	ldr	r1, [r4, #8]
 800c352:	2917      	cmp	r1, #23
 800c354:	d911      	bls.n	800c37a <validate_structure+0x82>
 800c356:	2218      	movs	r2, #24
 800c358:	4668      	mov	r0, sp
 800c35a:	f000 fea9 	bl	800d0b0 <div>
 800c35e:	9a01      	ldr	r2, [sp, #4]
 800c360:	68e3      	ldr	r3, [r4, #12]
 800c362:	9900      	ldr	r1, [sp, #0]
 800c364:	2a00      	cmp	r2, #0
 800c366:	440b      	add	r3, r1
 800c368:	60e3      	str	r3, [r4, #12]
 800c36a:	bfbb      	ittet	lt
 800c36c:	3218      	addlt	r2, #24
 800c36e:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800c372:	60a2      	strge	r2, [r4, #8]
 800c374:	60a2      	strlt	r2, [r4, #8]
 800c376:	bfb8      	it	lt
 800c378:	60e3      	strlt	r3, [r4, #12]
 800c37a:	6921      	ldr	r1, [r4, #16]
 800c37c:	290b      	cmp	r1, #11
 800c37e:	d911      	bls.n	800c3a4 <validate_structure+0xac>
 800c380:	220c      	movs	r2, #12
 800c382:	4668      	mov	r0, sp
 800c384:	f000 fe94 	bl	800d0b0 <div>
 800c388:	9a01      	ldr	r2, [sp, #4]
 800c38a:	6963      	ldr	r3, [r4, #20]
 800c38c:	9900      	ldr	r1, [sp, #0]
 800c38e:	2a00      	cmp	r2, #0
 800c390:	440b      	add	r3, r1
 800c392:	6163      	str	r3, [r4, #20]
 800c394:	bfbb      	ittet	lt
 800c396:	320c      	addlt	r2, #12
 800c398:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800c39c:	6122      	strge	r2, [r4, #16]
 800c39e:	6122      	strlt	r2, [r4, #16]
 800c3a0:	bfb8      	it	lt
 800c3a2:	6163      	strlt	r3, [r4, #20]
 800c3a4:	6963      	ldr	r3, [r4, #20]
 800c3a6:	0798      	lsls	r0, r3, #30
 800c3a8:	d120      	bne.n	800c3ec <validate_structure+0xf4>
 800c3aa:	2164      	movs	r1, #100	; 0x64
 800c3ac:	fb93 f2f1 	sdiv	r2, r3, r1
 800c3b0:	fb01 3212 	mls	r2, r1, r2, r3
 800c3b4:	b9e2      	cbnz	r2, 800c3f0 <validate_structure+0xf8>
 800c3b6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800c3ba:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 800c3be:	fb93 f1f2 	sdiv	r1, r3, r2
 800c3c2:	fb02 3311 	mls	r3, r2, r1, r3
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	bf14      	ite	ne
 800c3ca:	231c      	movne	r3, #28
 800c3cc:	231d      	moveq	r3, #29
 800c3ce:	68e2      	ldr	r2, [r4, #12]
 800c3d0:	2a00      	cmp	r2, #0
 800c3d2:	dc0f      	bgt.n	800c3f4 <validate_structure+0xfc>
 800c3d4:	260b      	movs	r6, #11
 800c3d6:	2064      	movs	r0, #100	; 0x64
 800c3d8:	f44f 75c8 	mov.w	r5, #400	; 0x190
 800c3dc:	4f31      	ldr	r7, [pc, #196]	; (800c4a4 <validate_structure+0x1ac>)
 800c3de:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 800c3e2:	f1bc 0f00 	cmp.w	ip, #0
 800c3e6:	dd31      	ble.n	800c44c <validate_structure+0x154>
 800c3e8:	b003      	add	sp, #12
 800c3ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c3ec:	231c      	movs	r3, #28
 800c3ee:	e7ee      	b.n	800c3ce <validate_structure+0xd6>
 800c3f0:	231d      	movs	r3, #29
 800c3f2:	e7ec      	b.n	800c3ce <validate_structure+0xd6>
 800c3f4:	2700      	movs	r7, #0
 800c3f6:	2064      	movs	r0, #100	; 0x64
 800c3f8:	f44f 75c8 	mov.w	r5, #400	; 0x190
 800c3fc:	4e29      	ldr	r6, [pc, #164]	; (800c4a4 <validate_structure+0x1ac>)
 800c3fe:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 800c402:	2a01      	cmp	r2, #1
 800c404:	bf0c      	ite	eq
 800c406:	469c      	moveq	ip, r3
 800c408:	f856 c022 	ldrne.w	ip, [r6, r2, lsl #2]
 800c40c:	4561      	cmp	r1, ip
 800c40e:	ddeb      	ble.n	800c3e8 <validate_structure+0xf0>
 800c410:	3201      	adds	r2, #1
 800c412:	eba1 010c 	sub.w	r1, r1, ip
 800c416:	2a0c      	cmp	r2, #12
 800c418:	60e1      	str	r1, [r4, #12]
 800c41a:	6122      	str	r2, [r4, #16]
 800c41c:	d1ef      	bne.n	800c3fe <validate_structure+0x106>
 800c41e:	6963      	ldr	r3, [r4, #20]
 800c420:	1c5a      	adds	r2, r3, #1
 800c422:	0791      	lsls	r1, r2, #30
 800c424:	e9c4 7204 	strd	r7, r2, [r4, #16]
 800c428:	d137      	bne.n	800c49a <validate_structure+0x1a2>
 800c42a:	fb92 f1f0 	sdiv	r1, r2, r0
 800c42e:	fb00 2211 	mls	r2, r0, r1, r2
 800c432:	2a00      	cmp	r2, #0
 800c434:	d133      	bne.n	800c49e <validate_structure+0x1a6>
 800c436:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 800c43a:	fb93 f2f5 	sdiv	r2, r3, r5
 800c43e:	fb05 3312 	mls	r3, r5, r2, r3
 800c442:	2b00      	cmp	r3, #0
 800c444:	bf14      	ite	ne
 800c446:	231c      	movne	r3, #28
 800c448:	231d      	moveq	r3, #29
 800c44a:	e7d8      	b.n	800c3fe <validate_structure+0x106>
 800c44c:	6921      	ldr	r1, [r4, #16]
 800c44e:	3901      	subs	r1, #1
 800c450:	6121      	str	r1, [r4, #16]
 800c452:	3101      	adds	r1, #1
 800c454:	d114      	bne.n	800c480 <validate_structure+0x188>
 800c456:	6963      	ldr	r3, [r4, #20]
 800c458:	1e5a      	subs	r2, r3, #1
 800c45a:	0791      	lsls	r1, r2, #30
 800c45c:	e9c4 6204 	strd	r6, r2, [r4, #16]
 800c460:	d117      	bne.n	800c492 <validate_structure+0x19a>
 800c462:	fb92 f1f0 	sdiv	r1, r2, r0
 800c466:	fb00 2211 	mls	r2, r0, r1, r2
 800c46a:	b9a2      	cbnz	r2, 800c496 <validate_structure+0x19e>
 800c46c:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 800c470:	fb93 f2f5 	sdiv	r2, r3, r5
 800c474:	fb05 3312 	mls	r3, r5, r2, r3
 800c478:	2b00      	cmp	r3, #0
 800c47a:	bf14      	ite	ne
 800c47c:	231c      	movne	r3, #28
 800c47e:	231d      	moveq	r3, #29
 800c480:	6922      	ldr	r2, [r4, #16]
 800c482:	2a01      	cmp	r2, #1
 800c484:	bf0c      	ite	eq
 800c486:	461a      	moveq	r2, r3
 800c488:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 800c48c:	4462      	add	r2, ip
 800c48e:	60e2      	str	r2, [r4, #12]
 800c490:	e7a5      	b.n	800c3de <validate_structure+0xe6>
 800c492:	231c      	movs	r3, #28
 800c494:	e7f4      	b.n	800c480 <validate_structure+0x188>
 800c496:	231d      	movs	r3, #29
 800c498:	e7f2      	b.n	800c480 <validate_structure+0x188>
 800c49a:	231c      	movs	r3, #28
 800c49c:	e7af      	b.n	800c3fe <validate_structure+0x106>
 800c49e:	231d      	movs	r3, #29
 800c4a0:	e7ad      	b.n	800c3fe <validate_structure+0x106>
 800c4a2:	bf00      	nop
 800c4a4:	0800f660 	.word	0x0800f660

0800c4a8 <mktime>:
 800c4a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4ac:	b085      	sub	sp, #20
 800c4ae:	4607      	mov	r7, r0
 800c4b0:	f000 fe68 	bl	800d184 <__gettzinfo>
 800c4b4:	4681      	mov	r9, r0
 800c4b6:	4638      	mov	r0, r7
 800c4b8:	f7ff ff1e 	bl	800c2f8 <validate_structure>
 800c4bc:	e9d7 4000 	ldrd	r4, r0, [r7]
 800c4c0:	233c      	movs	r3, #60	; 0x3c
 800c4c2:	fb03 4400 	mla	r4, r3, r0, r4
 800c4c6:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800c4ca:	68b8      	ldr	r0, [r7, #8]
 800c4cc:	4abc      	ldr	r2, [pc, #752]	; (800c7c0 <mktime+0x318>)
 800c4ce:	fb03 4400 	mla	r4, r3, r0, r4
 800c4d2:	e9d7 5303 	ldrd	r5, r3, [r7, #12]
 800c4d6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800c4da:	3d01      	subs	r5, #1
 800c4dc:	2b01      	cmp	r3, #1
 800c4de:	697e      	ldr	r6, [r7, #20]
 800c4e0:	4415      	add	r5, r2
 800c4e2:	dd11      	ble.n	800c508 <mktime+0x60>
 800c4e4:	07b1      	lsls	r1, r6, #30
 800c4e6:	d10f      	bne.n	800c508 <mktime+0x60>
 800c4e8:	2264      	movs	r2, #100	; 0x64
 800c4ea:	fb96 f3f2 	sdiv	r3, r6, r2
 800c4ee:	fb02 6313 	mls	r3, r2, r3, r6
 800c4f2:	b943      	cbnz	r3, 800c506 <mktime+0x5e>
 800c4f4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800c4f8:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 800c4fc:	fb93 f1f2 	sdiv	r1, r3, r2
 800c500:	fb02 3311 	mls	r3, r2, r1, r3
 800c504:	b903      	cbnz	r3, 800c508 <mktime+0x60>
 800c506:	3501      	adds	r5, #1
 800c508:	f644 6220 	movw	r2, #20000	; 0x4e20
 800c50c:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
 800c510:	3310      	adds	r3, #16
 800c512:	4293      	cmp	r3, r2
 800c514:	61fd      	str	r5, [r7, #28]
 800c516:	f200 815c 	bhi.w	800c7d2 <mktime+0x32a>
 800c51a:	2e46      	cmp	r6, #70	; 0x46
 800c51c:	dd71      	ble.n	800c602 <mktime+0x15a>
 800c51e:	2346      	movs	r3, #70	; 0x46
 800c520:	f240 1c6d 	movw	ip, #365	; 0x16d
 800c524:	2164      	movs	r1, #100	; 0x64
 800c526:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800c52a:	079a      	lsls	r2, r3, #30
 800c52c:	d163      	bne.n	800c5f6 <mktime+0x14e>
 800c52e:	fb93 f2f1 	sdiv	r2, r3, r1
 800c532:	fb01 3212 	mls	r2, r1, r2, r3
 800c536:	2a00      	cmp	r2, #0
 800c538:	d160      	bne.n	800c5fc <mktime+0x154>
 800c53a:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 800c53e:	fb92 fef0 	sdiv	lr, r2, r0
 800c542:	fb00 221e 	mls	r2, r0, lr, r2
 800c546:	2a00      	cmp	r2, #0
 800c548:	bf14      	ite	ne
 800c54a:	4662      	movne	r2, ip
 800c54c:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 800c550:	3301      	adds	r3, #1
 800c552:	429e      	cmp	r6, r3
 800c554:	4415      	add	r5, r2
 800c556:	d1e8      	bne.n	800c52a <mktime+0x82>
 800c558:	4b9a      	ldr	r3, [pc, #616]	; (800c7c4 <mktime+0x31c>)
 800c55a:	ea4f 78e4 	mov.w	r8, r4, asr #31
 800c55e:	fbc5 4803 	smlal	r4, r8, r5, r3
 800c562:	f000 fbf3 	bl	800cd4c <__tz_lock>
 800c566:	f000 fbfd 	bl	800cd64 <_tzset_unlocked>
 800c56a:	4b97      	ldr	r3, [pc, #604]	; (800c7c8 <mktime+0x320>)
 800c56c:	f8d3 b000 	ldr.w	fp, [r3]
 800c570:	f1bb 0f00 	cmp.w	fp, #0
 800c574:	d039      	beq.n	800c5ea <mktime+0x142>
 800c576:	f8d7 b020 	ldr.w	fp, [r7, #32]
 800c57a:	6978      	ldr	r0, [r7, #20]
 800c57c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800c580:	f1bb 0f01 	cmp.w	fp, #1
 800c584:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 800c588:	46da      	mov	sl, fp
 800c58a:	bfa8      	it	ge
 800c58c:	f04f 0a01 	movge.w	sl, #1
 800c590:	4283      	cmp	r3, r0
 800c592:	d178      	bne.n	800c686 <mktime+0x1de>
 800c594:	e9d9 3208 	ldrd	r3, r2, [r9, #32]
 800c598:	f8d9 1050 	ldr.w	r1, [r9, #80]	; 0x50
 800c59c:	f8d9 e04c 	ldr.w	lr, [r9, #76]	; 0x4c
 800c5a0:	1a5b      	subs	r3, r3, r1
 800c5a2:	9302      	str	r3, [sp, #8]
 800c5a4:	eb62 73e1 	sbc.w	r3, r2, r1, asr #31
 800c5a8:	9303      	str	r3, [sp, #12]
 800c5aa:	f8d9 2028 	ldr.w	r2, [r9, #40]	; 0x28
 800c5ae:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 800c5b2:	ebb3 0c02 	subs.w	ip, r3, r2
 800c5b6:	eb6e 70e2 	sbc.w	r0, lr, r2, asr #31
 800c5ba:	4564      	cmp	r4, ip
 800c5bc:	9301      	str	r3, [sp, #4]
 800c5be:	eb78 0300 	sbcs.w	r3, r8, r0
 800c5c2:	da66      	bge.n	800c692 <mktime+0x1ea>
 800c5c4:	f8d9 3000 	ldr.w	r3, [r9]
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d06f      	beq.n	800c6ac <mktime+0x204>
 800c5cc:	9b02      	ldr	r3, [sp, #8]
 800c5ce:	429c      	cmp	r4, r3
 800c5d0:	9b03      	ldr	r3, [sp, #12]
 800c5d2:	eb78 0303 	sbcs.w	r3, r8, r3
 800c5d6:	db03      	blt.n	800c5e0 <mktime+0x138>
 800c5d8:	4564      	cmp	r4, ip
 800c5da:	eb78 0300 	sbcs.w	r3, r8, r0
 800c5de:	db6b      	blt.n	800c6b8 <mktime+0x210>
 800c5e0:	f1bb 0f00 	cmp.w	fp, #0
 800c5e4:	f04f 0b00 	mov.w	fp, #0
 800c5e8:	da6b      	bge.n	800c6c2 <mktime+0x21a>
 800c5ea:	f8d9 1028 	ldr.w	r1, [r9, #40]	; 0x28
 800c5ee:	190c      	adds	r4, r1, r4
 800c5f0:	eb48 78e1 	adc.w	r8, r8, r1, asr #31
 800c5f4:	e0a9      	b.n	800c74a <mktime+0x2a2>
 800c5f6:	f240 126d 	movw	r2, #365	; 0x16d
 800c5fa:	e7a9      	b.n	800c550 <mktime+0xa8>
 800c5fc:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 800c600:	e7a6      	b.n	800c550 <mktime+0xa8>
 800c602:	d0a9      	beq.n	800c558 <mktime+0xb0>
 800c604:	2345      	movs	r3, #69	; 0x45
 800c606:	f240 1c6d 	movw	ip, #365	; 0x16d
 800c60a:	2164      	movs	r1, #100	; 0x64
 800c60c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800c610:	e012      	b.n	800c638 <mktime+0x190>
 800c612:	bb62      	cbnz	r2, 800c66e <mktime+0x1c6>
 800c614:	fb93 f2f1 	sdiv	r2, r3, r1
 800c618:	fb01 3212 	mls	r2, r1, r2, r3
 800c61c:	bb52      	cbnz	r2, 800c674 <mktime+0x1cc>
 800c61e:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 800c622:	fb92 fef0 	sdiv	lr, r2, r0
 800c626:	fb00 221e 	mls	r2, r0, lr, r2
 800c62a:	2a00      	cmp	r2, #0
 800c62c:	bf14      	ite	ne
 800c62e:	4662      	movne	r2, ip
 800c630:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 800c634:	1aad      	subs	r5, r5, r2
 800c636:	3b01      	subs	r3, #1
 800c638:	429e      	cmp	r6, r3
 800c63a:	f003 0203 	and.w	r2, r3, #3
 800c63e:	dbe8      	blt.n	800c612 <mktime+0x16a>
 800c640:	b9da      	cbnz	r2, 800c67a <mktime+0x1d2>
 800c642:	2264      	movs	r2, #100	; 0x64
 800c644:	fb96 f3f2 	sdiv	r3, r6, r2
 800c648:	fb02 6313 	mls	r3, r2, r3, r6
 800c64c:	b9c3      	cbnz	r3, 800c680 <mktime+0x1d8>
 800c64e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800c652:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 800c656:	fb93 f1f2 	sdiv	r1, r3, r2
 800c65a:	fb02 3311 	mls	r3, r2, r1, r3
 800c65e:	2b00      	cmp	r3, #0
 800c660:	f240 136d 	movw	r3, #365	; 0x16d
 800c664:	bf08      	it	eq
 800c666:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 800c66a:	1aed      	subs	r5, r5, r3
 800c66c:	e774      	b.n	800c558 <mktime+0xb0>
 800c66e:	f240 126d 	movw	r2, #365	; 0x16d
 800c672:	e7df      	b.n	800c634 <mktime+0x18c>
 800c674:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 800c678:	e7dc      	b.n	800c634 <mktime+0x18c>
 800c67a:	f240 136d 	movw	r3, #365	; 0x16d
 800c67e:	e7f4      	b.n	800c66a <mktime+0x1c2>
 800c680:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 800c684:	e7f1      	b.n	800c66a <mktime+0x1c2>
 800c686:	f000 fab7 	bl	800cbf8 <__tzcalc_limits>
 800c68a:	2800      	cmp	r0, #0
 800c68c:	d182      	bne.n	800c594 <mktime+0xec>
 800c68e:	46d3      	mov	fp, sl
 800c690:	e050      	b.n	800c734 <mktime+0x28c>
 800c692:	9b01      	ldr	r3, [sp, #4]
 800c694:	1a5b      	subs	r3, r3, r1
 800c696:	9301      	str	r3, [sp, #4]
 800c698:	ea4f 73e1 	mov.w	r3, r1, asr #31
 800c69c:	eb6e 0e03 	sbc.w	lr, lr, r3
 800c6a0:	9b01      	ldr	r3, [sp, #4]
 800c6a2:	429c      	cmp	r4, r3
 800c6a4:	eb78 030e 	sbcs.w	r3, r8, lr
 800c6a8:	dbf1      	blt.n	800c68e <mktime+0x1e6>
 800c6aa:	e78b      	b.n	800c5c4 <mktime+0x11c>
 800c6ac:	9b02      	ldr	r3, [sp, #8]
 800c6ae:	429c      	cmp	r4, r3
 800c6b0:	9b03      	ldr	r3, [sp, #12]
 800c6b2:	eb78 0303 	sbcs.w	r3, r8, r3
 800c6b6:	db8f      	blt.n	800c5d8 <mktime+0x130>
 800c6b8:	f1bb 0f00 	cmp.w	fp, #0
 800c6bc:	db3e      	blt.n	800c73c <mktime+0x294>
 800c6be:	f04f 0b01 	mov.w	fp, #1
 800c6c2:	ea8a 0a0b 	eor.w	sl, sl, fp
 800c6c6:	f1ba 0f01 	cmp.w	sl, #1
 800c6ca:	d133      	bne.n	800c734 <mktime+0x28c>
 800c6cc:	f1bb 0f00 	cmp.w	fp, #0
 800c6d0:	d04e      	beq.n	800c770 <mktime+0x2c8>
 800c6d2:	1a52      	subs	r2, r2, r1
 800c6d4:	683b      	ldr	r3, [r7, #0]
 800c6d6:	1914      	adds	r4, r2, r4
 800c6d8:	4413      	add	r3, r2
 800c6da:	4638      	mov	r0, r7
 800c6dc:	603b      	str	r3, [r7, #0]
 800c6de:	eb48 78e2 	adc.w	r8, r8, r2, asr #31
 800c6e2:	f8d7 a00c 	ldr.w	sl, [r7, #12]
 800c6e6:	f7ff fe07 	bl	800c2f8 <validate_structure>
 800c6ea:	68fa      	ldr	r2, [r7, #12]
 800c6ec:	ebb2 020a 	subs.w	r2, r2, sl
 800c6f0:	d020      	beq.n	800c734 <mktime+0x28c>
 800c6f2:	2a01      	cmp	r2, #1
 800c6f4:	dc3e      	bgt.n	800c774 <mktime+0x2cc>
 800c6f6:	1c90      	adds	r0, r2, #2
 800c6f8:	bfd8      	it	le
 800c6fa:	2201      	movle	r2, #1
 800c6fc:	69fb      	ldr	r3, [r7, #28]
 800c6fe:	4415      	add	r5, r2
 800c700:	18d3      	adds	r3, r2, r3
 800c702:	d540      	bpl.n	800c786 <mktime+0x2de>
 800c704:	1e73      	subs	r3, r6, #1
 800c706:	0799      	lsls	r1, r3, #30
 800c708:	d137      	bne.n	800c77a <mktime+0x2d2>
 800c70a:	2264      	movs	r2, #100	; 0x64
 800c70c:	fb93 f1f2 	sdiv	r1, r3, r2
 800c710:	fb02 3311 	mls	r3, r2, r1, r3
 800c714:	bba3      	cbnz	r3, 800c780 <mktime+0x2d8>
 800c716:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800c71a:	f206 766b 	addw	r6, r6, #1899	; 0x76b
 800c71e:	fb96 f2f3 	sdiv	r2, r6, r3
 800c722:	fb03 6612 	mls	r6, r3, r2, r6
 800c726:	2e00      	cmp	r6, #0
 800c728:	f240 136d 	movw	r3, #365	; 0x16d
 800c72c:	bf18      	it	ne
 800c72e:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 800c732:	61fb      	str	r3, [r7, #28]
 800c734:	f1bb 0f01 	cmp.w	fp, #1
 800c738:	f47f af57 	bne.w	800c5ea <mktime+0x142>
 800c73c:	f04f 0b01 	mov.w	fp, #1
 800c740:	f8d9 1050 	ldr.w	r1, [r9, #80]	; 0x50
 800c744:	190c      	adds	r4, r1, r4
 800c746:	eb48 78e1 	adc.w	r8, r8, r1, asr #31
 800c74a:	f000 fb05 	bl	800cd58 <__tz_unlock>
 800c74e:	2307      	movs	r3, #7
 800c750:	3504      	adds	r5, #4
 800c752:	fb95 f3f3 	sdiv	r3, r5, r3
 800c756:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800c75a:	1aed      	subs	r5, r5, r3
 800c75c:	bf48      	it	mi
 800c75e:	3507      	addmi	r5, #7
 800c760:	f8c7 b020 	str.w	fp, [r7, #32]
 800c764:	61bd      	str	r5, [r7, #24]
 800c766:	4620      	mov	r0, r4
 800c768:	4641      	mov	r1, r8
 800c76a:	b005      	add	sp, #20
 800c76c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c770:	1a8a      	subs	r2, r1, r2
 800c772:	e7af      	b.n	800c6d4 <mktime+0x22c>
 800c774:	f04f 32ff 	mov.w	r2, #4294967295
 800c778:	e7c0      	b.n	800c6fc <mktime+0x254>
 800c77a:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 800c77e:	e7d8      	b.n	800c732 <mktime+0x28a>
 800c780:	f240 136d 	movw	r3, #365	; 0x16d
 800c784:	e7d5      	b.n	800c732 <mktime+0x28a>
 800c786:	07b2      	lsls	r2, r6, #30
 800c788:	d117      	bne.n	800c7ba <mktime+0x312>
 800c78a:	2164      	movs	r1, #100	; 0x64
 800c78c:	fb96 f2f1 	sdiv	r2, r6, r1
 800c790:	fb01 6212 	mls	r2, r1, r2, r6
 800c794:	b9d2      	cbnz	r2, 800c7cc <mktime+0x324>
 800c796:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800c79a:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 800c79e:	fb96 f1f2 	sdiv	r1, r6, r2
 800c7a2:	fb02 6611 	mls	r6, r2, r1, r6
 800c7a6:	2e00      	cmp	r6, #0
 800c7a8:	f240 126d 	movw	r2, #365	; 0x16d
 800c7ac:	bf08      	it	eq
 800c7ae:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 800c7b2:	4293      	cmp	r3, r2
 800c7b4:	bfa8      	it	ge
 800c7b6:	1a9b      	subge	r3, r3, r2
 800c7b8:	e7bb      	b.n	800c732 <mktime+0x28a>
 800c7ba:	f240 126d 	movw	r2, #365	; 0x16d
 800c7be:	e7f8      	b.n	800c7b2 <mktime+0x30a>
 800c7c0:	0800f690 	.word	0x0800f690
 800c7c4:	00015180 	.word	0x00015180
 800c7c8:	2000275c 	.word	0x2000275c
 800c7cc:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 800c7d0:	e7ef      	b.n	800c7b2 <mktime+0x30a>
 800c7d2:	f04f 34ff 	mov.w	r4, #4294967295
 800c7d6:	46a0      	mov	r8, r4
 800c7d8:	e7c5      	b.n	800c766 <mktime+0x2be>
 800c7da:	bf00      	nop

0800c7dc <_free_r>:
 800c7dc:	b538      	push	{r3, r4, r5, lr}
 800c7de:	4605      	mov	r5, r0
 800c7e0:	2900      	cmp	r1, #0
 800c7e2:	d040      	beq.n	800c866 <_free_r+0x8a>
 800c7e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c7e8:	1f0c      	subs	r4, r1, #4
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	bfb8      	it	lt
 800c7ee:	18e4      	addlt	r4, r4, r3
 800c7f0:	f000 fd80 	bl	800d2f4 <__malloc_lock>
 800c7f4:	4a1c      	ldr	r2, [pc, #112]	; (800c868 <_free_r+0x8c>)
 800c7f6:	6813      	ldr	r3, [r2, #0]
 800c7f8:	b933      	cbnz	r3, 800c808 <_free_r+0x2c>
 800c7fa:	6063      	str	r3, [r4, #4]
 800c7fc:	6014      	str	r4, [r2, #0]
 800c7fe:	4628      	mov	r0, r5
 800c800:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c804:	f000 bd7c 	b.w	800d300 <__malloc_unlock>
 800c808:	42a3      	cmp	r3, r4
 800c80a:	d908      	bls.n	800c81e <_free_r+0x42>
 800c80c:	6820      	ldr	r0, [r4, #0]
 800c80e:	1821      	adds	r1, r4, r0
 800c810:	428b      	cmp	r3, r1
 800c812:	bf01      	itttt	eq
 800c814:	6819      	ldreq	r1, [r3, #0]
 800c816:	685b      	ldreq	r3, [r3, #4]
 800c818:	1809      	addeq	r1, r1, r0
 800c81a:	6021      	streq	r1, [r4, #0]
 800c81c:	e7ed      	b.n	800c7fa <_free_r+0x1e>
 800c81e:	461a      	mov	r2, r3
 800c820:	685b      	ldr	r3, [r3, #4]
 800c822:	b10b      	cbz	r3, 800c828 <_free_r+0x4c>
 800c824:	42a3      	cmp	r3, r4
 800c826:	d9fa      	bls.n	800c81e <_free_r+0x42>
 800c828:	6811      	ldr	r1, [r2, #0]
 800c82a:	1850      	adds	r0, r2, r1
 800c82c:	42a0      	cmp	r0, r4
 800c82e:	d10b      	bne.n	800c848 <_free_r+0x6c>
 800c830:	6820      	ldr	r0, [r4, #0]
 800c832:	4401      	add	r1, r0
 800c834:	1850      	adds	r0, r2, r1
 800c836:	4283      	cmp	r3, r0
 800c838:	6011      	str	r1, [r2, #0]
 800c83a:	d1e0      	bne.n	800c7fe <_free_r+0x22>
 800c83c:	6818      	ldr	r0, [r3, #0]
 800c83e:	685b      	ldr	r3, [r3, #4]
 800c840:	4401      	add	r1, r0
 800c842:	6011      	str	r1, [r2, #0]
 800c844:	6053      	str	r3, [r2, #4]
 800c846:	e7da      	b.n	800c7fe <_free_r+0x22>
 800c848:	d902      	bls.n	800c850 <_free_r+0x74>
 800c84a:	230c      	movs	r3, #12
 800c84c:	602b      	str	r3, [r5, #0]
 800c84e:	e7d6      	b.n	800c7fe <_free_r+0x22>
 800c850:	6820      	ldr	r0, [r4, #0]
 800c852:	1821      	adds	r1, r4, r0
 800c854:	428b      	cmp	r3, r1
 800c856:	bf01      	itttt	eq
 800c858:	6819      	ldreq	r1, [r3, #0]
 800c85a:	685b      	ldreq	r3, [r3, #4]
 800c85c:	1809      	addeq	r1, r1, r0
 800c85e:	6021      	streq	r1, [r4, #0]
 800c860:	6063      	str	r3, [r4, #4]
 800c862:	6054      	str	r4, [r2, #4]
 800c864:	e7cb      	b.n	800c7fe <_free_r+0x22>
 800c866:	bd38      	pop	{r3, r4, r5, pc}
 800c868:	20002738 	.word	0x20002738

0800c86c <sbrk_aligned>:
 800c86c:	b570      	push	{r4, r5, r6, lr}
 800c86e:	4e0e      	ldr	r6, [pc, #56]	; (800c8a8 <sbrk_aligned+0x3c>)
 800c870:	460c      	mov	r4, r1
 800c872:	6831      	ldr	r1, [r6, #0]
 800c874:	4605      	mov	r5, r0
 800c876:	b911      	cbnz	r1, 800c87e <sbrk_aligned+0x12>
 800c878:	f000 f88c 	bl	800c994 <_sbrk_r>
 800c87c:	6030      	str	r0, [r6, #0]
 800c87e:	4621      	mov	r1, r4
 800c880:	4628      	mov	r0, r5
 800c882:	f000 f887 	bl	800c994 <_sbrk_r>
 800c886:	1c43      	adds	r3, r0, #1
 800c888:	d00a      	beq.n	800c8a0 <sbrk_aligned+0x34>
 800c88a:	1cc4      	adds	r4, r0, #3
 800c88c:	f024 0403 	bic.w	r4, r4, #3
 800c890:	42a0      	cmp	r0, r4
 800c892:	d007      	beq.n	800c8a4 <sbrk_aligned+0x38>
 800c894:	1a21      	subs	r1, r4, r0
 800c896:	4628      	mov	r0, r5
 800c898:	f000 f87c 	bl	800c994 <_sbrk_r>
 800c89c:	3001      	adds	r0, #1
 800c89e:	d101      	bne.n	800c8a4 <sbrk_aligned+0x38>
 800c8a0:	f04f 34ff 	mov.w	r4, #4294967295
 800c8a4:	4620      	mov	r0, r4
 800c8a6:	bd70      	pop	{r4, r5, r6, pc}
 800c8a8:	2000273c 	.word	0x2000273c

0800c8ac <_malloc_r>:
 800c8ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8b0:	1ccd      	adds	r5, r1, #3
 800c8b2:	f025 0503 	bic.w	r5, r5, #3
 800c8b6:	3508      	adds	r5, #8
 800c8b8:	2d0c      	cmp	r5, #12
 800c8ba:	bf38      	it	cc
 800c8bc:	250c      	movcc	r5, #12
 800c8be:	2d00      	cmp	r5, #0
 800c8c0:	4607      	mov	r7, r0
 800c8c2:	db01      	blt.n	800c8c8 <_malloc_r+0x1c>
 800c8c4:	42a9      	cmp	r1, r5
 800c8c6:	d905      	bls.n	800c8d4 <_malloc_r+0x28>
 800c8c8:	230c      	movs	r3, #12
 800c8ca:	2600      	movs	r6, #0
 800c8cc:	603b      	str	r3, [r7, #0]
 800c8ce:	4630      	mov	r0, r6
 800c8d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8d4:	4e2e      	ldr	r6, [pc, #184]	; (800c990 <_malloc_r+0xe4>)
 800c8d6:	f000 fd0d 	bl	800d2f4 <__malloc_lock>
 800c8da:	6833      	ldr	r3, [r6, #0]
 800c8dc:	461c      	mov	r4, r3
 800c8de:	bb34      	cbnz	r4, 800c92e <_malloc_r+0x82>
 800c8e0:	4629      	mov	r1, r5
 800c8e2:	4638      	mov	r0, r7
 800c8e4:	f7ff ffc2 	bl	800c86c <sbrk_aligned>
 800c8e8:	1c43      	adds	r3, r0, #1
 800c8ea:	4604      	mov	r4, r0
 800c8ec:	d14d      	bne.n	800c98a <_malloc_r+0xde>
 800c8ee:	6834      	ldr	r4, [r6, #0]
 800c8f0:	4626      	mov	r6, r4
 800c8f2:	2e00      	cmp	r6, #0
 800c8f4:	d140      	bne.n	800c978 <_malloc_r+0xcc>
 800c8f6:	6823      	ldr	r3, [r4, #0]
 800c8f8:	4631      	mov	r1, r6
 800c8fa:	4638      	mov	r0, r7
 800c8fc:	eb04 0803 	add.w	r8, r4, r3
 800c900:	f000 f848 	bl	800c994 <_sbrk_r>
 800c904:	4580      	cmp	r8, r0
 800c906:	d13a      	bne.n	800c97e <_malloc_r+0xd2>
 800c908:	6821      	ldr	r1, [r4, #0]
 800c90a:	3503      	adds	r5, #3
 800c90c:	1a6d      	subs	r5, r5, r1
 800c90e:	f025 0503 	bic.w	r5, r5, #3
 800c912:	3508      	adds	r5, #8
 800c914:	2d0c      	cmp	r5, #12
 800c916:	bf38      	it	cc
 800c918:	250c      	movcc	r5, #12
 800c91a:	4638      	mov	r0, r7
 800c91c:	4629      	mov	r1, r5
 800c91e:	f7ff ffa5 	bl	800c86c <sbrk_aligned>
 800c922:	3001      	adds	r0, #1
 800c924:	d02b      	beq.n	800c97e <_malloc_r+0xd2>
 800c926:	6823      	ldr	r3, [r4, #0]
 800c928:	442b      	add	r3, r5
 800c92a:	6023      	str	r3, [r4, #0]
 800c92c:	e00e      	b.n	800c94c <_malloc_r+0xa0>
 800c92e:	6822      	ldr	r2, [r4, #0]
 800c930:	1b52      	subs	r2, r2, r5
 800c932:	d41e      	bmi.n	800c972 <_malloc_r+0xc6>
 800c934:	2a0b      	cmp	r2, #11
 800c936:	d916      	bls.n	800c966 <_malloc_r+0xba>
 800c938:	1961      	adds	r1, r4, r5
 800c93a:	42a3      	cmp	r3, r4
 800c93c:	6025      	str	r5, [r4, #0]
 800c93e:	bf18      	it	ne
 800c940:	6059      	strne	r1, [r3, #4]
 800c942:	6863      	ldr	r3, [r4, #4]
 800c944:	bf08      	it	eq
 800c946:	6031      	streq	r1, [r6, #0]
 800c948:	5162      	str	r2, [r4, r5]
 800c94a:	604b      	str	r3, [r1, #4]
 800c94c:	4638      	mov	r0, r7
 800c94e:	f104 060b 	add.w	r6, r4, #11
 800c952:	f000 fcd5 	bl	800d300 <__malloc_unlock>
 800c956:	f026 0607 	bic.w	r6, r6, #7
 800c95a:	1d23      	adds	r3, r4, #4
 800c95c:	1af2      	subs	r2, r6, r3
 800c95e:	d0b6      	beq.n	800c8ce <_malloc_r+0x22>
 800c960:	1b9b      	subs	r3, r3, r6
 800c962:	50a3      	str	r3, [r4, r2]
 800c964:	e7b3      	b.n	800c8ce <_malloc_r+0x22>
 800c966:	6862      	ldr	r2, [r4, #4]
 800c968:	42a3      	cmp	r3, r4
 800c96a:	bf0c      	ite	eq
 800c96c:	6032      	streq	r2, [r6, #0]
 800c96e:	605a      	strne	r2, [r3, #4]
 800c970:	e7ec      	b.n	800c94c <_malloc_r+0xa0>
 800c972:	4623      	mov	r3, r4
 800c974:	6864      	ldr	r4, [r4, #4]
 800c976:	e7b2      	b.n	800c8de <_malloc_r+0x32>
 800c978:	4634      	mov	r4, r6
 800c97a:	6876      	ldr	r6, [r6, #4]
 800c97c:	e7b9      	b.n	800c8f2 <_malloc_r+0x46>
 800c97e:	230c      	movs	r3, #12
 800c980:	4638      	mov	r0, r7
 800c982:	603b      	str	r3, [r7, #0]
 800c984:	f000 fcbc 	bl	800d300 <__malloc_unlock>
 800c988:	e7a1      	b.n	800c8ce <_malloc_r+0x22>
 800c98a:	6025      	str	r5, [r4, #0]
 800c98c:	e7de      	b.n	800c94c <_malloc_r+0xa0>
 800c98e:	bf00      	nop
 800c990:	20002738 	.word	0x20002738

0800c994 <_sbrk_r>:
 800c994:	b538      	push	{r3, r4, r5, lr}
 800c996:	2300      	movs	r3, #0
 800c998:	4d05      	ldr	r5, [pc, #20]	; (800c9b0 <_sbrk_r+0x1c>)
 800c99a:	4604      	mov	r4, r0
 800c99c:	4608      	mov	r0, r1
 800c99e:	602b      	str	r3, [r5, #0]
 800c9a0:	f7f9 fe9e 	bl	80066e0 <_sbrk>
 800c9a4:	1c43      	adds	r3, r0, #1
 800c9a6:	d102      	bne.n	800c9ae <_sbrk_r+0x1a>
 800c9a8:	682b      	ldr	r3, [r5, #0]
 800c9aa:	b103      	cbz	r3, 800c9ae <_sbrk_r+0x1a>
 800c9ac:	6023      	str	r3, [r4, #0]
 800c9ae:	bd38      	pop	{r3, r4, r5, pc}
 800c9b0:	2000276c 	.word	0x2000276c

0800c9b4 <siprintf>:
 800c9b4:	b40e      	push	{r1, r2, r3}
 800c9b6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c9ba:	b500      	push	{lr}
 800c9bc:	b09c      	sub	sp, #112	; 0x70
 800c9be:	ab1d      	add	r3, sp, #116	; 0x74
 800c9c0:	9002      	str	r0, [sp, #8]
 800c9c2:	9006      	str	r0, [sp, #24]
 800c9c4:	9107      	str	r1, [sp, #28]
 800c9c6:	9104      	str	r1, [sp, #16]
 800c9c8:	4808      	ldr	r0, [pc, #32]	; (800c9ec <siprintf+0x38>)
 800c9ca:	4909      	ldr	r1, [pc, #36]	; (800c9f0 <siprintf+0x3c>)
 800c9cc:	f853 2b04 	ldr.w	r2, [r3], #4
 800c9d0:	9105      	str	r1, [sp, #20]
 800c9d2:	6800      	ldr	r0, [r0, #0]
 800c9d4:	a902      	add	r1, sp, #8
 800c9d6:	9301      	str	r3, [sp, #4]
 800c9d8:	f000 fcf4 	bl	800d3c4 <_svfiprintf_r>
 800c9dc:	2200      	movs	r2, #0
 800c9de:	9b02      	ldr	r3, [sp, #8]
 800c9e0:	701a      	strb	r2, [r3, #0]
 800c9e2:	b01c      	add	sp, #112	; 0x70
 800c9e4:	f85d eb04 	ldr.w	lr, [sp], #4
 800c9e8:	b003      	add	sp, #12
 800c9ea:	4770      	bx	lr
 800c9ec:	200004e0 	.word	0x200004e0
 800c9f0:	ffff0208 	.word	0xffff0208

0800c9f4 <strcpy>:
 800c9f4:	4603      	mov	r3, r0
 800c9f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c9fa:	f803 2b01 	strb.w	r2, [r3], #1
 800c9fe:	2a00      	cmp	r2, #0
 800ca00:	d1f9      	bne.n	800c9f6 <strcpy+0x2>
 800ca02:	4770      	bx	lr

0800ca04 <strstr>:
 800ca04:	780a      	ldrb	r2, [r1, #0]
 800ca06:	b570      	push	{r4, r5, r6, lr}
 800ca08:	b96a      	cbnz	r2, 800ca26 <strstr+0x22>
 800ca0a:	bd70      	pop	{r4, r5, r6, pc}
 800ca0c:	429a      	cmp	r2, r3
 800ca0e:	d109      	bne.n	800ca24 <strstr+0x20>
 800ca10:	460c      	mov	r4, r1
 800ca12:	4605      	mov	r5, r0
 800ca14:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d0f6      	beq.n	800ca0a <strstr+0x6>
 800ca1c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800ca20:	429e      	cmp	r6, r3
 800ca22:	d0f7      	beq.n	800ca14 <strstr+0x10>
 800ca24:	3001      	adds	r0, #1
 800ca26:	7803      	ldrb	r3, [r0, #0]
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d1ef      	bne.n	800ca0c <strstr+0x8>
 800ca2c:	4618      	mov	r0, r3
 800ca2e:	e7ec      	b.n	800ca0a <strstr+0x6>

0800ca30 <strtok>:
 800ca30:	4b16      	ldr	r3, [pc, #88]	; (800ca8c <strtok+0x5c>)
 800ca32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca36:	681f      	ldr	r7, [r3, #0]
 800ca38:	4605      	mov	r5, r0
 800ca3a:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 800ca3c:	460e      	mov	r6, r1
 800ca3e:	b9ec      	cbnz	r4, 800ca7c <strtok+0x4c>
 800ca40:	2050      	movs	r0, #80	; 0x50
 800ca42:	f7ff fc23 	bl	800c28c <malloc>
 800ca46:	4602      	mov	r2, r0
 800ca48:	65b8      	str	r0, [r7, #88]	; 0x58
 800ca4a:	b920      	cbnz	r0, 800ca56 <strtok+0x26>
 800ca4c:	2157      	movs	r1, #87	; 0x57
 800ca4e:	4b10      	ldr	r3, [pc, #64]	; (800ca90 <strtok+0x60>)
 800ca50:	4810      	ldr	r0, [pc, #64]	; (800ca94 <strtok+0x64>)
 800ca52:	f000 fb0f 	bl	800d074 <__assert_func>
 800ca56:	e9c0 4400 	strd	r4, r4, [r0]
 800ca5a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800ca5e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800ca62:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800ca66:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800ca6a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800ca6e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800ca72:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800ca76:	6184      	str	r4, [r0, #24]
 800ca78:	7704      	strb	r4, [r0, #28]
 800ca7a:	6244      	str	r4, [r0, #36]	; 0x24
 800ca7c:	4631      	mov	r1, r6
 800ca7e:	4628      	mov	r0, r5
 800ca80:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ca82:	2301      	movs	r3, #1
 800ca84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ca88:	f000 b806 	b.w	800ca98 <__strtok_r>
 800ca8c:	200004e0 	.word	0x200004e0
 800ca90:	0800f5ec 	.word	0x0800f5ec
 800ca94:	0800f720 	.word	0x0800f720

0800ca98 <__strtok_r>:
 800ca98:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ca9a:	b908      	cbnz	r0, 800caa0 <__strtok_r+0x8>
 800ca9c:	6810      	ldr	r0, [r2, #0]
 800ca9e:	b188      	cbz	r0, 800cac4 <__strtok_r+0x2c>
 800caa0:	4604      	mov	r4, r0
 800caa2:	460f      	mov	r7, r1
 800caa4:	4620      	mov	r0, r4
 800caa6:	f814 5b01 	ldrb.w	r5, [r4], #1
 800caaa:	f817 6b01 	ldrb.w	r6, [r7], #1
 800caae:	b91e      	cbnz	r6, 800cab8 <__strtok_r+0x20>
 800cab0:	b965      	cbnz	r5, 800cacc <__strtok_r+0x34>
 800cab2:	4628      	mov	r0, r5
 800cab4:	6015      	str	r5, [r2, #0]
 800cab6:	e005      	b.n	800cac4 <__strtok_r+0x2c>
 800cab8:	42b5      	cmp	r5, r6
 800caba:	d1f6      	bne.n	800caaa <__strtok_r+0x12>
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d1f0      	bne.n	800caa2 <__strtok_r+0xa>
 800cac0:	6014      	str	r4, [r2, #0]
 800cac2:	7003      	strb	r3, [r0, #0]
 800cac4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cac6:	461c      	mov	r4, r3
 800cac8:	e00c      	b.n	800cae4 <__strtok_r+0x4c>
 800caca:	b915      	cbnz	r5, 800cad2 <__strtok_r+0x3a>
 800cacc:	460e      	mov	r6, r1
 800cace:	f814 3b01 	ldrb.w	r3, [r4], #1
 800cad2:	f816 5b01 	ldrb.w	r5, [r6], #1
 800cad6:	42ab      	cmp	r3, r5
 800cad8:	d1f7      	bne.n	800caca <__strtok_r+0x32>
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d0f3      	beq.n	800cac6 <__strtok_r+0x2e>
 800cade:	2300      	movs	r3, #0
 800cae0:	f804 3c01 	strb.w	r3, [r4, #-1]
 800cae4:	6014      	str	r4, [r2, #0]
 800cae6:	e7ed      	b.n	800cac4 <__strtok_r+0x2c>

0800cae8 <_strtol_l.constprop.0>:
 800cae8:	2b01      	cmp	r3, #1
 800caea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800caee:	4680      	mov	r8, r0
 800caf0:	d001      	beq.n	800caf6 <_strtol_l.constprop.0+0xe>
 800caf2:	2b24      	cmp	r3, #36	; 0x24
 800caf4:	d906      	bls.n	800cb04 <_strtol_l.constprop.0+0x1c>
 800caf6:	f7ff fa8f 	bl	800c018 <__errno>
 800cafa:	2316      	movs	r3, #22
 800cafc:	6003      	str	r3, [r0, #0]
 800cafe:	2000      	movs	r0, #0
 800cb00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb04:	460d      	mov	r5, r1
 800cb06:	4f35      	ldr	r7, [pc, #212]	; (800cbdc <_strtol_l.constprop.0+0xf4>)
 800cb08:	4628      	mov	r0, r5
 800cb0a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cb0e:	5de6      	ldrb	r6, [r4, r7]
 800cb10:	f016 0608 	ands.w	r6, r6, #8
 800cb14:	d1f8      	bne.n	800cb08 <_strtol_l.constprop.0+0x20>
 800cb16:	2c2d      	cmp	r4, #45	; 0x2d
 800cb18:	d12f      	bne.n	800cb7a <_strtol_l.constprop.0+0x92>
 800cb1a:	2601      	movs	r6, #1
 800cb1c:	782c      	ldrb	r4, [r5, #0]
 800cb1e:	1c85      	adds	r5, r0, #2
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d057      	beq.n	800cbd4 <_strtol_l.constprop.0+0xec>
 800cb24:	2b10      	cmp	r3, #16
 800cb26:	d109      	bne.n	800cb3c <_strtol_l.constprop.0+0x54>
 800cb28:	2c30      	cmp	r4, #48	; 0x30
 800cb2a:	d107      	bne.n	800cb3c <_strtol_l.constprop.0+0x54>
 800cb2c:	7828      	ldrb	r0, [r5, #0]
 800cb2e:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800cb32:	2858      	cmp	r0, #88	; 0x58
 800cb34:	d149      	bne.n	800cbca <_strtol_l.constprop.0+0xe2>
 800cb36:	2310      	movs	r3, #16
 800cb38:	786c      	ldrb	r4, [r5, #1]
 800cb3a:	3502      	adds	r5, #2
 800cb3c:	2700      	movs	r7, #0
 800cb3e:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800cb42:	f10e 3eff 	add.w	lr, lr, #4294967295
 800cb46:	fbbe f9f3 	udiv	r9, lr, r3
 800cb4a:	4638      	mov	r0, r7
 800cb4c:	fb03 ea19 	mls	sl, r3, r9, lr
 800cb50:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800cb54:	f1bc 0f09 	cmp.w	ip, #9
 800cb58:	d814      	bhi.n	800cb84 <_strtol_l.constprop.0+0x9c>
 800cb5a:	4664      	mov	r4, ip
 800cb5c:	42a3      	cmp	r3, r4
 800cb5e:	dd22      	ble.n	800cba6 <_strtol_l.constprop.0+0xbe>
 800cb60:	2f00      	cmp	r7, #0
 800cb62:	db1d      	blt.n	800cba0 <_strtol_l.constprop.0+0xb8>
 800cb64:	4581      	cmp	r9, r0
 800cb66:	d31b      	bcc.n	800cba0 <_strtol_l.constprop.0+0xb8>
 800cb68:	d101      	bne.n	800cb6e <_strtol_l.constprop.0+0x86>
 800cb6a:	45a2      	cmp	sl, r4
 800cb6c:	db18      	blt.n	800cba0 <_strtol_l.constprop.0+0xb8>
 800cb6e:	2701      	movs	r7, #1
 800cb70:	fb00 4003 	mla	r0, r0, r3, r4
 800cb74:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cb78:	e7ea      	b.n	800cb50 <_strtol_l.constprop.0+0x68>
 800cb7a:	2c2b      	cmp	r4, #43	; 0x2b
 800cb7c:	bf04      	itt	eq
 800cb7e:	782c      	ldrbeq	r4, [r5, #0]
 800cb80:	1c85      	addeq	r5, r0, #2
 800cb82:	e7cd      	b.n	800cb20 <_strtol_l.constprop.0+0x38>
 800cb84:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800cb88:	f1bc 0f19 	cmp.w	ip, #25
 800cb8c:	d801      	bhi.n	800cb92 <_strtol_l.constprop.0+0xaa>
 800cb8e:	3c37      	subs	r4, #55	; 0x37
 800cb90:	e7e4      	b.n	800cb5c <_strtol_l.constprop.0+0x74>
 800cb92:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800cb96:	f1bc 0f19 	cmp.w	ip, #25
 800cb9a:	d804      	bhi.n	800cba6 <_strtol_l.constprop.0+0xbe>
 800cb9c:	3c57      	subs	r4, #87	; 0x57
 800cb9e:	e7dd      	b.n	800cb5c <_strtol_l.constprop.0+0x74>
 800cba0:	f04f 37ff 	mov.w	r7, #4294967295
 800cba4:	e7e6      	b.n	800cb74 <_strtol_l.constprop.0+0x8c>
 800cba6:	2f00      	cmp	r7, #0
 800cba8:	da07      	bge.n	800cbba <_strtol_l.constprop.0+0xd2>
 800cbaa:	2322      	movs	r3, #34	; 0x22
 800cbac:	4670      	mov	r0, lr
 800cbae:	f8c8 3000 	str.w	r3, [r8]
 800cbb2:	2a00      	cmp	r2, #0
 800cbb4:	d0a4      	beq.n	800cb00 <_strtol_l.constprop.0+0x18>
 800cbb6:	1e69      	subs	r1, r5, #1
 800cbb8:	e005      	b.n	800cbc6 <_strtol_l.constprop.0+0xde>
 800cbba:	b106      	cbz	r6, 800cbbe <_strtol_l.constprop.0+0xd6>
 800cbbc:	4240      	negs	r0, r0
 800cbbe:	2a00      	cmp	r2, #0
 800cbc0:	d09e      	beq.n	800cb00 <_strtol_l.constprop.0+0x18>
 800cbc2:	2f00      	cmp	r7, #0
 800cbc4:	d1f7      	bne.n	800cbb6 <_strtol_l.constprop.0+0xce>
 800cbc6:	6011      	str	r1, [r2, #0]
 800cbc8:	e79a      	b.n	800cb00 <_strtol_l.constprop.0+0x18>
 800cbca:	2430      	movs	r4, #48	; 0x30
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d1b5      	bne.n	800cb3c <_strtol_l.constprop.0+0x54>
 800cbd0:	2308      	movs	r3, #8
 800cbd2:	e7b3      	b.n	800cb3c <_strtol_l.constprop.0+0x54>
 800cbd4:	2c30      	cmp	r4, #48	; 0x30
 800cbd6:	d0a9      	beq.n	800cb2c <_strtol_l.constprop.0+0x44>
 800cbd8:	230a      	movs	r3, #10
 800cbda:	e7af      	b.n	800cb3c <_strtol_l.constprop.0+0x54>
 800cbdc:	0800f7f6 	.word	0x0800f7f6

0800cbe0 <_strtol_r>:
 800cbe0:	f7ff bf82 	b.w	800cae8 <_strtol_l.constprop.0>

0800cbe4 <strtol>:
 800cbe4:	4613      	mov	r3, r2
 800cbe6:	460a      	mov	r2, r1
 800cbe8:	4601      	mov	r1, r0
 800cbea:	4802      	ldr	r0, [pc, #8]	; (800cbf4 <strtol+0x10>)
 800cbec:	6800      	ldr	r0, [r0, #0]
 800cbee:	f7ff bf7b 	b.w	800cae8 <_strtol_l.constprop.0>
 800cbf2:	bf00      	nop
 800cbf4:	200004e0 	.word	0x200004e0

0800cbf8 <__tzcalc_limits>:
 800cbf8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbfc:	4605      	mov	r5, r0
 800cbfe:	f000 fac1 	bl	800d184 <__gettzinfo>
 800cc02:	f240 73b1 	movw	r3, #1969	; 0x7b1
 800cc06:	429d      	cmp	r5, r3
 800cc08:	f340 809a 	ble.w	800cd40 <__tzcalc_limits+0x148>
 800cc0c:	f46f 62f6 	mvn.w	r2, #1968	; 0x7b0
 800cc10:	18ac      	adds	r4, r5, r2
 800cc12:	f240 126d 	movw	r2, #365	; 0x16d
 800cc16:	f2a5 73b2 	subw	r3, r5, #1970	; 0x7b2
 800cc1a:	10a4      	asrs	r4, r4, #2
 800cc1c:	fb02 4403 	mla	r4, r2, r3, r4
 800cc20:	f06f 0263 	mvn.w	r2, #99	; 0x63
 800cc24:	f2a5 736d 	subw	r3, r5, #1901	; 0x76d
 800cc28:	fb93 f3f2 	sdiv	r3, r3, r2
 800cc2c:	f46f 61c8 	mvn.w	r1, #1600	; 0x640
 800cc30:	441c      	add	r4, r3
 800cc32:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800cc36:	186a      	adds	r2, r5, r1
 800cc38:	fbb2 f2f3 	udiv	r2, r2, r3
 800cc3c:	fb95 fcf3 	sdiv	ip, r5, r3
 800cc40:	4414      	add	r4, r2
 800cc42:	2264      	movs	r2, #100	; 0x64
 800cc44:	fb03 5c1c 	mls	ip, r3, ip, r5
 800cc48:	fb95 f7f2 	sdiv	r7, r5, r2
 800cc4c:	fabc f68c 	clz	r6, ip
 800cc50:	4601      	mov	r1, r0
 800cc52:	fb02 5717 	mls	r7, r2, r7, r5
 800cc56:	6045      	str	r5, [r0, #4]
 800cc58:	0976      	lsrs	r6, r6, #5
 800cc5a:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 800cc5e:	f005 0203 	and.w	r2, r5, #3
 800cc62:	7a0d      	ldrb	r5, [r1, #8]
 800cc64:	694b      	ldr	r3, [r1, #20]
 800cc66:	2d4a      	cmp	r5, #74	; 0x4a
 800cc68:	d12d      	bne.n	800ccc6 <__tzcalc_limits+0xce>
 800cc6a:	eb04 0e03 	add.w	lr, r4, r3
 800cc6e:	b902      	cbnz	r2, 800cc72 <__tzcalc_limits+0x7a>
 800cc70:	b917      	cbnz	r7, 800cc78 <__tzcalc_limits+0x80>
 800cc72:	f1bc 0f00 	cmp.w	ip, #0
 800cc76:	d124      	bne.n	800ccc2 <__tzcalc_limits+0xca>
 800cc78:	2b3b      	cmp	r3, #59	; 0x3b
 800cc7a:	bfd4      	ite	le
 800cc7c:	2300      	movle	r3, #0
 800cc7e:	2301      	movgt	r3, #1
 800cc80:	4473      	add	r3, lr
 800cc82:	3b01      	subs	r3, #1
 800cc84:	698d      	ldr	r5, [r1, #24]
 800cc86:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 800cd44 <__tzcalc_limits+0x14c>
 800cc8a:	ea4f 7ee5 	mov.w	lr, r5, asr #31
 800cc8e:	fbc3 5e08 	smlal	r5, lr, r3, r8
 800cc92:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800cc94:	18ed      	adds	r5, r5, r3
 800cc96:	eb4e 73e3 	adc.w	r3, lr, r3, asr #31
 800cc9a:	e9c1 5308 	strd	r5, r3, [r1, #32]
 800cc9e:	3128      	adds	r1, #40	; 0x28
 800cca0:	458b      	cmp	fp, r1
 800cca2:	d1de      	bne.n	800cc62 <__tzcalc_limits+0x6a>
 800cca4:	e9d0 1312 	ldrd	r1, r3, [r0, #72]	; 0x48
 800cca8:	e9d0 4208 	ldrd	r4, r2, [r0, #32]
 800ccac:	428c      	cmp	r4, r1
 800ccae:	eb72 0303 	sbcs.w	r3, r2, r3
 800ccb2:	bfb4      	ite	lt
 800ccb4:	2301      	movlt	r3, #1
 800ccb6:	2300      	movge	r3, #0
 800ccb8:	6003      	str	r3, [r0, #0]
 800ccba:	2001      	movs	r0, #1
 800ccbc:	b003      	add	sp, #12
 800ccbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccc2:	2300      	movs	r3, #0
 800ccc4:	e7dc      	b.n	800cc80 <__tzcalc_limits+0x88>
 800ccc6:	2d44      	cmp	r5, #68	; 0x44
 800ccc8:	d101      	bne.n	800ccce <__tzcalc_limits+0xd6>
 800ccca:	4423      	add	r3, r4
 800cccc:	e7da      	b.n	800cc84 <__tzcalc_limits+0x8c>
 800ccce:	bb8a      	cbnz	r2, 800cd34 <__tzcalc_limits+0x13c>
 800ccd0:	2f00      	cmp	r7, #0
 800ccd2:	bf0c      	ite	eq
 800ccd4:	4635      	moveq	r5, r6
 800ccd6:	2501      	movne	r5, #1
 800ccd8:	f04f 0a30 	mov.w	sl, #48	; 0x30
 800ccdc:	f8d1 e00c 	ldr.w	lr, [r1, #12]
 800cce0:	f04f 0800 	mov.w	r8, #0
 800cce4:	f8cd e004 	str.w	lr, [sp, #4]
 800cce8:	46a6      	mov	lr, r4
 800ccea:	f8df 905c 	ldr.w	r9, [pc, #92]	; 800cd48 <__tzcalc_limits+0x150>
 800ccee:	fb0a 9505 	mla	r5, sl, r5, r9
 800ccf2:	3d04      	subs	r5, #4
 800ccf4:	f8dd a004 	ldr.w	sl, [sp, #4]
 800ccf8:	f108 0801 	add.w	r8, r8, #1
 800ccfc:	45c2      	cmp	sl, r8
 800ccfe:	f855 9028 	ldr.w	r9, [r5, r8, lsl #2]
 800cd02:	dc19      	bgt.n	800cd38 <__tzcalc_limits+0x140>
 800cd04:	f04f 0807 	mov.w	r8, #7
 800cd08:	f10e 0504 	add.w	r5, lr, #4
 800cd0c:	fb95 f8f8 	sdiv	r8, r5, r8
 800cd10:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
 800cd14:	eba5 0808 	sub.w	r8, r5, r8
 800cd18:	ebb3 0808 	subs.w	r8, r3, r8
 800cd1c:	690b      	ldr	r3, [r1, #16]
 800cd1e:	bf48      	it	mi
 800cd20:	f108 0807 	addmi.w	r8, r8, #7
 800cd24:	3b01      	subs	r3, #1
 800cd26:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800cd2a:	4443      	add	r3, r8
 800cd2c:	454b      	cmp	r3, r9
 800cd2e:	da05      	bge.n	800cd3c <__tzcalc_limits+0x144>
 800cd30:	4473      	add	r3, lr
 800cd32:	e7a7      	b.n	800cc84 <__tzcalc_limits+0x8c>
 800cd34:	4635      	mov	r5, r6
 800cd36:	e7cf      	b.n	800ccd8 <__tzcalc_limits+0xe0>
 800cd38:	44ce      	add	lr, r9
 800cd3a:	e7db      	b.n	800ccf4 <__tzcalc_limits+0xfc>
 800cd3c:	3b07      	subs	r3, #7
 800cd3e:	e7f5      	b.n	800cd2c <__tzcalc_limits+0x134>
 800cd40:	2000      	movs	r0, #0
 800cd42:	e7bb      	b.n	800ccbc <__tzcalc_limits+0xc4>
 800cd44:	00015180 	.word	0x00015180
 800cd48:	0800f6c0 	.word	0x0800f6c0

0800cd4c <__tz_lock>:
 800cd4c:	4801      	ldr	r0, [pc, #4]	; (800cd54 <__tz_lock+0x8>)
 800cd4e:	f000 bacc 	b.w	800d2ea <__retarget_lock_acquire>
 800cd52:	bf00      	nop
 800cd54:	20002768 	.word	0x20002768

0800cd58 <__tz_unlock>:
 800cd58:	4801      	ldr	r0, [pc, #4]	; (800cd60 <__tz_unlock+0x8>)
 800cd5a:	f000 bac8 	b.w	800d2ee <__retarget_lock_release>
 800cd5e:	bf00      	nop
 800cd60:	20002768 	.word	0x20002768

0800cd64 <_tzset_unlocked>:
 800cd64:	4b01      	ldr	r3, [pc, #4]	; (800cd6c <_tzset_unlocked+0x8>)
 800cd66:	6818      	ldr	r0, [r3, #0]
 800cd68:	f000 b802 	b.w	800cd70 <_tzset_unlocked_r>
 800cd6c:	200004e0 	.word	0x200004e0

0800cd70 <_tzset_unlocked_r>:
 800cd70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd74:	b08d      	sub	sp, #52	; 0x34
 800cd76:	4607      	mov	r7, r0
 800cd78:	f000 fa04 	bl	800d184 <__gettzinfo>
 800cd7c:	49b1      	ldr	r1, [pc, #708]	; (800d044 <_tzset_unlocked_r+0x2d4>)
 800cd7e:	4605      	mov	r5, r0
 800cd80:	4638      	mov	r0, r7
 800cd82:	f000 f9f7 	bl	800d174 <_getenv_r>
 800cd86:	4eb0      	ldr	r6, [pc, #704]	; (800d048 <_tzset_unlocked_r+0x2d8>)
 800cd88:	4604      	mov	r4, r0
 800cd8a:	b970      	cbnz	r0, 800cdaa <_tzset_unlocked_r+0x3a>
 800cd8c:	4baf      	ldr	r3, [pc, #700]	; (800d04c <_tzset_unlocked_r+0x2dc>)
 800cd8e:	4ab0      	ldr	r2, [pc, #704]	; (800d050 <_tzset_unlocked_r+0x2e0>)
 800cd90:	6018      	str	r0, [r3, #0]
 800cd92:	4bb0      	ldr	r3, [pc, #704]	; (800d054 <_tzset_unlocked_r+0x2e4>)
 800cd94:	6018      	str	r0, [r3, #0]
 800cd96:	4bb0      	ldr	r3, [pc, #704]	; (800d058 <_tzset_unlocked_r+0x2e8>)
 800cd98:	6830      	ldr	r0, [r6, #0]
 800cd9a:	e9c3 2200 	strd	r2, r2, [r3]
 800cd9e:	f7ff fa7d 	bl	800c29c <free>
 800cda2:	6034      	str	r4, [r6, #0]
 800cda4:	b00d      	add	sp, #52	; 0x34
 800cda6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdaa:	6831      	ldr	r1, [r6, #0]
 800cdac:	2900      	cmp	r1, #0
 800cdae:	d162      	bne.n	800ce76 <_tzset_unlocked_r+0x106>
 800cdb0:	6830      	ldr	r0, [r6, #0]
 800cdb2:	f7ff fa73 	bl	800c29c <free>
 800cdb6:	4620      	mov	r0, r4
 800cdb8:	f7f3 f9d2 	bl	8000160 <strlen>
 800cdbc:	1c41      	adds	r1, r0, #1
 800cdbe:	4638      	mov	r0, r7
 800cdc0:	f7ff fd74 	bl	800c8ac <_malloc_r>
 800cdc4:	6030      	str	r0, [r6, #0]
 800cdc6:	2800      	cmp	r0, #0
 800cdc8:	d15a      	bne.n	800ce80 <_tzset_unlocked_r+0x110>
 800cdca:	7823      	ldrb	r3, [r4, #0]
 800cdcc:	ae0a      	add	r6, sp, #40	; 0x28
 800cdce:	2b3a      	cmp	r3, #58	; 0x3a
 800cdd0:	bf08      	it	eq
 800cdd2:	3401      	addeq	r4, #1
 800cdd4:	4633      	mov	r3, r6
 800cdd6:	4620      	mov	r0, r4
 800cdd8:	4aa0      	ldr	r2, [pc, #640]	; (800d05c <_tzset_unlocked_r+0x2ec>)
 800cdda:	49a1      	ldr	r1, [pc, #644]	; (800d060 <_tzset_unlocked_r+0x2f0>)
 800cddc:	f000 fee0 	bl	800dba0 <siscanf>
 800cde0:	2800      	cmp	r0, #0
 800cde2:	dddf      	ble.n	800cda4 <_tzset_unlocked_r+0x34>
 800cde4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cde6:	18e7      	adds	r7, r4, r3
 800cde8:	5ce3      	ldrb	r3, [r4, r3]
 800cdea:	2b2d      	cmp	r3, #45	; 0x2d
 800cdec:	d14c      	bne.n	800ce88 <_tzset_unlocked_r+0x118>
 800cdee:	f04f 38ff 	mov.w	r8, #4294967295
 800cdf2:	3701      	adds	r7, #1
 800cdf4:	2400      	movs	r4, #0
 800cdf6:	f10d 0a20 	add.w	sl, sp, #32
 800cdfa:	f10d 0b1e 	add.w	fp, sp, #30
 800cdfe:	4633      	mov	r3, r6
 800ce00:	4638      	mov	r0, r7
 800ce02:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 800ce06:	4997      	ldr	r1, [pc, #604]	; (800d064 <_tzset_unlocked_r+0x2f4>)
 800ce08:	9603      	str	r6, [sp, #12]
 800ce0a:	f8cd b000 	str.w	fp, [sp]
 800ce0e:	aa07      	add	r2, sp, #28
 800ce10:	f8ad 401e 	strh.w	r4, [sp, #30]
 800ce14:	f8ad 4020 	strh.w	r4, [sp, #32]
 800ce18:	f000 fec2 	bl	800dba0 <siscanf>
 800ce1c:	42a0      	cmp	r0, r4
 800ce1e:	ddc1      	ble.n	800cda4 <_tzset_unlocked_r+0x34>
 800ce20:	213c      	movs	r1, #60	; 0x3c
 800ce22:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800ce26:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800ce2a:	f8df 923c 	ldr.w	r9, [pc, #572]	; 800d068 <_tzset_unlocked_r+0x2f8>
 800ce2e:	fb01 3302 	mla	r3, r1, r2, r3
 800ce32:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800ce36:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800ce3a:	fb01 3302 	mla	r3, r1, r2, r3
 800ce3e:	fb08 f303 	mul.w	r3, r8, r3
 800ce42:	f8df 8214 	ldr.w	r8, [pc, #532]	; 800d058 <_tzset_unlocked_r+0x2e8>
 800ce46:	62ab      	str	r3, [r5, #40]	; 0x28
 800ce48:	4b84      	ldr	r3, [pc, #528]	; (800d05c <_tzset_unlocked_r+0x2ec>)
 800ce4a:	464a      	mov	r2, r9
 800ce4c:	f8c8 3000 	str.w	r3, [r8]
 800ce50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce52:	4983      	ldr	r1, [pc, #524]	; (800d060 <_tzset_unlocked_r+0x2f0>)
 800ce54:	441f      	add	r7, r3
 800ce56:	4638      	mov	r0, r7
 800ce58:	4633      	mov	r3, r6
 800ce5a:	f000 fea1 	bl	800dba0 <siscanf>
 800ce5e:	42a0      	cmp	r0, r4
 800ce60:	dc18      	bgt.n	800ce94 <_tzset_unlocked_r+0x124>
 800ce62:	f8d8 3000 	ldr.w	r3, [r8]
 800ce66:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800ce68:	f8c8 3004 	str.w	r3, [r8, #4]
 800ce6c:	4b77      	ldr	r3, [pc, #476]	; (800d04c <_tzset_unlocked_r+0x2dc>)
 800ce6e:	601a      	str	r2, [r3, #0]
 800ce70:	4b78      	ldr	r3, [pc, #480]	; (800d054 <_tzset_unlocked_r+0x2e4>)
 800ce72:	601c      	str	r4, [r3, #0]
 800ce74:	e796      	b.n	800cda4 <_tzset_unlocked_r+0x34>
 800ce76:	f7f3 f969 	bl	800014c <strcmp>
 800ce7a:	2800      	cmp	r0, #0
 800ce7c:	d198      	bne.n	800cdb0 <_tzset_unlocked_r+0x40>
 800ce7e:	e791      	b.n	800cda4 <_tzset_unlocked_r+0x34>
 800ce80:	4621      	mov	r1, r4
 800ce82:	f7ff fdb7 	bl	800c9f4 <strcpy>
 800ce86:	e7a0      	b.n	800cdca <_tzset_unlocked_r+0x5a>
 800ce88:	2b2b      	cmp	r3, #43	; 0x2b
 800ce8a:	f04f 0801 	mov.w	r8, #1
 800ce8e:	bf08      	it	eq
 800ce90:	3701      	addeq	r7, #1
 800ce92:	e7af      	b.n	800cdf4 <_tzset_unlocked_r+0x84>
 800ce94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce96:	f8c8 9004 	str.w	r9, [r8, #4]
 800ce9a:	18fc      	adds	r4, r7, r3
 800ce9c:	5cfb      	ldrb	r3, [r7, r3]
 800ce9e:	2b2d      	cmp	r3, #45	; 0x2d
 800cea0:	f040 808c 	bne.w	800cfbc <_tzset_unlocked_r+0x24c>
 800cea4:	f04f 37ff 	mov.w	r7, #4294967295
 800cea8:	3401      	adds	r4, #1
 800ceaa:	2300      	movs	r3, #0
 800ceac:	4620      	mov	r0, r4
 800ceae:	f8ad 301c 	strh.w	r3, [sp, #28]
 800ceb2:	f8ad 301e 	strh.w	r3, [sp, #30]
 800ceb6:	f8ad 3020 	strh.w	r3, [sp, #32]
 800ceba:	930a      	str	r3, [sp, #40]	; 0x28
 800cebc:	e9cd a602 	strd	sl, r6, [sp, #8]
 800cec0:	4633      	mov	r3, r6
 800cec2:	e9cd b600 	strd	fp, r6, [sp]
 800cec6:	4967      	ldr	r1, [pc, #412]	; (800d064 <_tzset_unlocked_r+0x2f4>)
 800cec8:	aa07      	add	r2, sp, #28
 800ceca:	f000 fe69 	bl	800dba0 <siscanf>
 800cece:	2800      	cmp	r0, #0
 800ced0:	dc7a      	bgt.n	800cfc8 <_tzset_unlocked_r+0x258>
 800ced2:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800ced4:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 800ced8:	462f      	mov	r7, r5
 800ceda:	f04f 0900 	mov.w	r9, #0
 800cede:	652b      	str	r3, [r5, #80]	; 0x50
 800cee0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cee2:	441c      	add	r4, r3
 800cee4:	7823      	ldrb	r3, [r4, #0]
 800cee6:	2b2c      	cmp	r3, #44	; 0x2c
 800cee8:	bf08      	it	eq
 800ceea:	3401      	addeq	r4, #1
 800ceec:	f894 8000 	ldrb.w	r8, [r4]
 800cef0:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 800cef4:	d17a      	bne.n	800cfec <_tzset_unlocked_r+0x27c>
 800cef6:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 800cefa:	e9cd 6301 	strd	r6, r3, [sp, #4]
 800cefe:	ab09      	add	r3, sp, #36	; 0x24
 800cf00:	9300      	str	r3, [sp, #0]
 800cf02:	4620      	mov	r0, r4
 800cf04:	4633      	mov	r3, r6
 800cf06:	4959      	ldr	r1, [pc, #356]	; (800d06c <_tzset_unlocked_r+0x2fc>)
 800cf08:	9603      	str	r6, [sp, #12]
 800cf0a:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 800cf0e:	f000 fe47 	bl	800dba0 <siscanf>
 800cf12:	2803      	cmp	r0, #3
 800cf14:	f47f af46 	bne.w	800cda4 <_tzset_unlocked_r+0x34>
 800cf18:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 800cf1c:	1e4b      	subs	r3, r1, #1
 800cf1e:	2b0b      	cmp	r3, #11
 800cf20:	f63f af40 	bhi.w	800cda4 <_tzset_unlocked_r+0x34>
 800cf24:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 800cf28:	1e53      	subs	r3, r2, #1
 800cf2a:	2b04      	cmp	r3, #4
 800cf2c:	f63f af3a 	bhi.w	800cda4 <_tzset_unlocked_r+0x34>
 800cf30:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 800cf34:	2b06      	cmp	r3, #6
 800cf36:	f63f af35 	bhi.w	800cda4 <_tzset_unlocked_r+0x34>
 800cf3a:	e9c7 1203 	strd	r1, r2, [r7, #12]
 800cf3e:	f887 8008 	strb.w	r8, [r7, #8]
 800cf42:	617b      	str	r3, [r7, #20]
 800cf44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cf46:	eb04 0803 	add.w	r8, r4, r3
 800cf4a:	2302      	movs	r3, #2
 800cf4c:	f8ad 301c 	strh.w	r3, [sp, #28]
 800cf50:	2300      	movs	r3, #0
 800cf52:	f8ad 301e 	strh.w	r3, [sp, #30]
 800cf56:	f8ad 3020 	strh.w	r3, [sp, #32]
 800cf5a:	930a      	str	r3, [sp, #40]	; 0x28
 800cf5c:	f898 3000 	ldrb.w	r3, [r8]
 800cf60:	2b2f      	cmp	r3, #47	; 0x2f
 800cf62:	d109      	bne.n	800cf78 <_tzset_unlocked_r+0x208>
 800cf64:	4633      	mov	r3, r6
 800cf66:	4640      	mov	r0, r8
 800cf68:	e9cd a602 	strd	sl, r6, [sp, #8]
 800cf6c:	e9cd b600 	strd	fp, r6, [sp]
 800cf70:	493f      	ldr	r1, [pc, #252]	; (800d070 <_tzset_unlocked_r+0x300>)
 800cf72:	aa07      	add	r2, sp, #28
 800cf74:	f000 fe14 	bl	800dba0 <siscanf>
 800cf78:	213c      	movs	r1, #60	; 0x3c
 800cf7a:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800cf7e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800cf82:	3728      	adds	r7, #40	; 0x28
 800cf84:	fb01 3302 	mla	r3, r1, r2, r3
 800cf88:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800cf8c:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800cf90:	fb01 3302 	mla	r3, r1, r2, r3
 800cf94:	f847 3c10 	str.w	r3, [r7, #-16]
 800cf98:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800cf9a:	4444      	add	r4, r8
 800cf9c:	f1b9 0f00 	cmp.w	r9, #0
 800cfa0:	d021      	beq.n	800cfe6 <_tzset_unlocked_r+0x276>
 800cfa2:	6868      	ldr	r0, [r5, #4]
 800cfa4:	f7ff fe28 	bl	800cbf8 <__tzcalc_limits>
 800cfa8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800cfaa:	4b28      	ldr	r3, [pc, #160]	; (800d04c <_tzset_unlocked_r+0x2dc>)
 800cfac:	601a      	str	r2, [r3, #0]
 800cfae:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800cfb0:	1a9b      	subs	r3, r3, r2
 800cfb2:	bf18      	it	ne
 800cfb4:	2301      	movne	r3, #1
 800cfb6:	4a27      	ldr	r2, [pc, #156]	; (800d054 <_tzset_unlocked_r+0x2e4>)
 800cfb8:	6013      	str	r3, [r2, #0]
 800cfba:	e6f3      	b.n	800cda4 <_tzset_unlocked_r+0x34>
 800cfbc:	2b2b      	cmp	r3, #43	; 0x2b
 800cfbe:	f04f 0701 	mov.w	r7, #1
 800cfc2:	bf08      	it	eq
 800cfc4:	3401      	addeq	r4, #1
 800cfc6:	e770      	b.n	800ceaa <_tzset_unlocked_r+0x13a>
 800cfc8:	213c      	movs	r1, #60	; 0x3c
 800cfca:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800cfce:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800cfd2:	fb01 3302 	mla	r3, r1, r2, r3
 800cfd6:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800cfda:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800cfde:	fb01 3302 	mla	r3, r1, r2, r3
 800cfe2:	437b      	muls	r3, r7
 800cfe4:	e778      	b.n	800ced8 <_tzset_unlocked_r+0x168>
 800cfe6:	f04f 0901 	mov.w	r9, #1
 800cfea:	e77b      	b.n	800cee4 <_tzset_unlocked_r+0x174>
 800cfec:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 800cff0:	bf0a      	itet	eq
 800cff2:	4643      	moveq	r3, r8
 800cff4:	2344      	movne	r3, #68	; 0x44
 800cff6:	3401      	addeq	r4, #1
 800cff8:	220a      	movs	r2, #10
 800cffa:	4620      	mov	r0, r4
 800cffc:	a90b      	add	r1, sp, #44	; 0x2c
 800cffe:	9305      	str	r3, [sp, #20]
 800d000:	f000 fec6 	bl	800dd90 <strtoul>
 800d004:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800d008:	9b05      	ldr	r3, [sp, #20]
 800d00a:	45a0      	cmp	r8, r4
 800d00c:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 800d010:	d114      	bne.n	800d03c <_tzset_unlocked_r+0x2cc>
 800d012:	234d      	movs	r3, #77	; 0x4d
 800d014:	f1b9 0f00 	cmp.w	r9, #0
 800d018:	d107      	bne.n	800d02a <_tzset_unlocked_r+0x2ba>
 800d01a:	2103      	movs	r1, #3
 800d01c:	722b      	strb	r3, [r5, #8]
 800d01e:	2302      	movs	r3, #2
 800d020:	f8c5 9014 	str.w	r9, [r5, #20]
 800d024:	e9c5 1303 	strd	r1, r3, [r5, #12]
 800d028:	e78f      	b.n	800cf4a <_tzset_unlocked_r+0x1da>
 800d02a:	220b      	movs	r2, #11
 800d02c:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 800d030:	2301      	movs	r3, #1
 800d032:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 800d036:	2300      	movs	r3, #0
 800d038:	63eb      	str	r3, [r5, #60]	; 0x3c
 800d03a:	e786      	b.n	800cf4a <_tzset_unlocked_r+0x1da>
 800d03c:	b280      	uxth	r0, r0
 800d03e:	723b      	strb	r3, [r7, #8]
 800d040:	6178      	str	r0, [r7, #20]
 800d042:	e782      	b.n	800cf4a <_tzset_unlocked_r+0x1da>
 800d044:	0800f77d 	.word	0x0800f77d
 800d048:	20002758 	.word	0x20002758
 800d04c:	20002760 	.word	0x20002760
 800d050:	0800f780 	.word	0x0800f780
 800d054:	2000275c 	.word	0x2000275c
 800d058:	20000544 	.word	0x20000544
 800d05c:	2000274b 	.word	0x2000274b
 800d060:	0800f784 	.word	0x0800f784
 800d064:	0800f7a7 	.word	0x0800f7a7
 800d068:	20002740 	.word	0x20002740
 800d06c:	0800f793 	.word	0x0800f793
 800d070:	0800f7a6 	.word	0x0800f7a6

0800d074 <__assert_func>:
 800d074:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d076:	4614      	mov	r4, r2
 800d078:	461a      	mov	r2, r3
 800d07a:	4b09      	ldr	r3, [pc, #36]	; (800d0a0 <__assert_func+0x2c>)
 800d07c:	4605      	mov	r5, r0
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	68d8      	ldr	r0, [r3, #12]
 800d082:	b14c      	cbz	r4, 800d098 <__assert_func+0x24>
 800d084:	4b07      	ldr	r3, [pc, #28]	; (800d0a4 <__assert_func+0x30>)
 800d086:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d08a:	9100      	str	r1, [sp, #0]
 800d08c:	462b      	mov	r3, r5
 800d08e:	4906      	ldr	r1, [pc, #24]	; (800d0a8 <__assert_func+0x34>)
 800d090:	f000 f822 	bl	800d0d8 <fiprintf>
 800d094:	f000 ff58 	bl	800df48 <abort>
 800d098:	4b04      	ldr	r3, [pc, #16]	; (800d0ac <__assert_func+0x38>)
 800d09a:	461c      	mov	r4, r3
 800d09c:	e7f3      	b.n	800d086 <__assert_func+0x12>
 800d09e:	bf00      	nop
 800d0a0:	200004e0 	.word	0x200004e0
 800d0a4:	0800f7b9 	.word	0x0800f7b9
 800d0a8:	0800f7c6 	.word	0x0800f7c6
 800d0ac:	0800f7f4 	.word	0x0800f7f4

0800d0b0 <div>:
 800d0b0:	b510      	push	{r4, lr}
 800d0b2:	fb91 f4f2 	sdiv	r4, r1, r2
 800d0b6:	2900      	cmp	r1, #0
 800d0b8:	fb02 1314 	mls	r3, r2, r4, r1
 800d0bc:	db06      	blt.n	800d0cc <div+0x1c>
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	da01      	bge.n	800d0c6 <div+0x16>
 800d0c2:	3401      	adds	r4, #1
 800d0c4:	1a9b      	subs	r3, r3, r2
 800d0c6:	e9c0 4300 	strd	r4, r3, [r0]
 800d0ca:	bd10      	pop	{r4, pc}
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	bfc4      	itt	gt
 800d0d0:	f104 34ff 	addgt.w	r4, r4, #4294967295
 800d0d4:	189b      	addgt	r3, r3, r2
 800d0d6:	e7f6      	b.n	800d0c6 <div+0x16>

0800d0d8 <fiprintf>:
 800d0d8:	b40e      	push	{r1, r2, r3}
 800d0da:	b503      	push	{r0, r1, lr}
 800d0dc:	4601      	mov	r1, r0
 800d0de:	ab03      	add	r3, sp, #12
 800d0e0:	4805      	ldr	r0, [pc, #20]	; (800d0f8 <fiprintf+0x20>)
 800d0e2:	f853 2b04 	ldr.w	r2, [r3], #4
 800d0e6:	6800      	ldr	r0, [r0, #0]
 800d0e8:	9301      	str	r3, [sp, #4]
 800d0ea:	f000 fa93 	bl	800d614 <_vfiprintf_r>
 800d0ee:	b002      	add	sp, #8
 800d0f0:	f85d eb04 	ldr.w	lr, [sp], #4
 800d0f4:	b003      	add	sp, #12
 800d0f6:	4770      	bx	lr
 800d0f8:	200004e0 	.word	0x200004e0

0800d0fc <_findenv_r>:
 800d0fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d100:	f8df a06c 	ldr.w	sl, [pc, #108]	; 800d170 <_findenv_r+0x74>
 800d104:	4607      	mov	r7, r0
 800d106:	4689      	mov	r9, r1
 800d108:	4616      	mov	r6, r2
 800d10a:	f000 ff35 	bl	800df78 <__env_lock>
 800d10e:	f8da 4000 	ldr.w	r4, [sl]
 800d112:	b134      	cbz	r4, 800d122 <_findenv_r+0x26>
 800d114:	464b      	mov	r3, r9
 800d116:	4698      	mov	r8, r3
 800d118:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d11c:	b13a      	cbz	r2, 800d12e <_findenv_r+0x32>
 800d11e:	2a3d      	cmp	r2, #61	; 0x3d
 800d120:	d1f9      	bne.n	800d116 <_findenv_r+0x1a>
 800d122:	4638      	mov	r0, r7
 800d124:	f000 ff2e 	bl	800df84 <__env_unlock>
 800d128:	2000      	movs	r0, #0
 800d12a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d12e:	eba8 0809 	sub.w	r8, r8, r9
 800d132:	46a3      	mov	fp, r4
 800d134:	f854 0b04 	ldr.w	r0, [r4], #4
 800d138:	2800      	cmp	r0, #0
 800d13a:	d0f2      	beq.n	800d122 <_findenv_r+0x26>
 800d13c:	4642      	mov	r2, r8
 800d13e:	4649      	mov	r1, r9
 800d140:	f000 fd9d 	bl	800dc7e <strncmp>
 800d144:	2800      	cmp	r0, #0
 800d146:	d1f4      	bne.n	800d132 <_findenv_r+0x36>
 800d148:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800d14c:	eb03 0508 	add.w	r5, r3, r8
 800d150:	f813 3008 	ldrb.w	r3, [r3, r8]
 800d154:	2b3d      	cmp	r3, #61	; 0x3d
 800d156:	d1ec      	bne.n	800d132 <_findenv_r+0x36>
 800d158:	f8da 3000 	ldr.w	r3, [sl]
 800d15c:	4638      	mov	r0, r7
 800d15e:	ebab 0303 	sub.w	r3, fp, r3
 800d162:	109b      	asrs	r3, r3, #2
 800d164:	6033      	str	r3, [r6, #0]
 800d166:	f000 ff0d 	bl	800df84 <__env_unlock>
 800d16a:	1c68      	adds	r0, r5, #1
 800d16c:	e7dd      	b.n	800d12a <_findenv_r+0x2e>
 800d16e:	bf00      	nop
 800d170:	2000048c 	.word	0x2000048c

0800d174 <_getenv_r>:
 800d174:	b507      	push	{r0, r1, r2, lr}
 800d176:	aa01      	add	r2, sp, #4
 800d178:	f7ff ffc0 	bl	800d0fc <_findenv_r>
 800d17c:	b003      	add	sp, #12
 800d17e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800d184 <__gettzinfo>:
 800d184:	4800      	ldr	r0, [pc, #0]	; (800d188 <__gettzinfo+0x4>)
 800d186:	4770      	bx	lr
 800d188:	20000550 	.word	0x20000550

0800d18c <gmtime_r>:
 800d18c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d190:	e9d0 6700 	ldrd	r6, r7, [r0]
 800d194:	460c      	mov	r4, r1
 800d196:	2300      	movs	r3, #0
 800d198:	4630      	mov	r0, r6
 800d19a:	4639      	mov	r1, r7
 800d19c:	4a4e      	ldr	r2, [pc, #312]	; (800d2d8 <gmtime_r+0x14c>)
 800d19e:	f7f3 f807 	bl	80001b0 <__aeabi_ldivmod>
 800d1a2:	4639      	mov	r1, r7
 800d1a4:	4605      	mov	r5, r0
 800d1a6:	2300      	movs	r3, #0
 800d1a8:	4630      	mov	r0, r6
 800d1aa:	4a4b      	ldr	r2, [pc, #300]	; (800d2d8 <gmtime_r+0x14c>)
 800d1ac:	f7f3 f800 	bl	80001b0 <__aeabi_ldivmod>
 800d1b0:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 800d1b4:	2a00      	cmp	r2, #0
 800d1b6:	bfbc      	itt	lt
 800d1b8:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 800d1bc:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 800d1c0:	fbb2 f1f0 	udiv	r1, r2, r0
 800d1c4:	fb00 2211 	mls	r2, r0, r1, r2
 800d1c8:	f04f 003c 	mov.w	r0, #60	; 0x3c
 800d1cc:	60a1      	str	r1, [r4, #8]
 800d1ce:	fbb2 f1f0 	udiv	r1, r2, r0
 800d1d2:	fb00 2211 	mls	r2, r0, r1, r2
 800d1d6:	6061      	str	r1, [r4, #4]
 800d1d8:	f04f 0107 	mov.w	r1, #7
 800d1dc:	f505 232f 	add.w	r3, r5, #716800	; 0xaf000
 800d1e0:	bfac      	ite	ge
 800d1e2:	f603 236c 	addwge	r3, r3, #2668	; 0xa6c
 800d1e6:	f603 236b 	addwlt	r3, r3, #2667	; 0xa6b
 800d1ea:	6022      	str	r2, [r4, #0]
 800d1ec:	1cda      	adds	r2, r3, #3
 800d1ee:	fb92 f1f1 	sdiv	r1, r2, r1
 800d1f2:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800d1f6:	1a52      	subs	r2, r2, r1
 800d1f8:	bf48      	it	mi
 800d1fa:	3207      	addmi	r2, #7
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	4d37      	ldr	r5, [pc, #220]	; (800d2dc <gmtime_r+0x150>)
 800d200:	61a2      	str	r2, [r4, #24]
 800d202:	bfbd      	ittte	lt
 800d204:	f5a3 320e 	sublt.w	r2, r3, #145408	; 0x23800
 800d208:	f5a2 722c 	sublt.w	r2, r2, #688	; 0x2b0
 800d20c:	fb92 f5f5 	sdivlt	r5, r2, r5
 800d210:	fb93 f5f5 	sdivge	r5, r3, r5
 800d214:	4832      	ldr	r0, [pc, #200]	; (800d2e0 <gmtime_r+0x154>)
 800d216:	f648 62ac 	movw	r2, #36524	; 0x8eac
 800d21a:	fb00 3005 	mla	r0, r0, r5, r3
 800d21e:	f240 53b4 	movw	r3, #1460	; 0x5b4
 800d222:	fbb0 f2f2 	udiv	r2, r0, r2
 800d226:	fbb0 f1f3 	udiv	r1, r0, r3
 800d22a:	4402      	add	r2, r0
 800d22c:	1a52      	subs	r2, r2, r1
 800d22e:	492d      	ldr	r1, [pc, #180]	; (800d2e4 <gmtime_r+0x158>)
 800d230:	f240 1c6d 	movw	ip, #365	; 0x16d
 800d234:	fbb0 f1f1 	udiv	r1, r0, r1
 800d238:	1a52      	subs	r2, r2, r1
 800d23a:	fbb2 f1fc 	udiv	r1, r2, ip
 800d23e:	2764      	movs	r7, #100	; 0x64
 800d240:	fbb2 f3f3 	udiv	r3, r2, r3
 800d244:	fbb1 f6f7 	udiv	r6, r1, r7
 800d248:	2299      	movs	r2, #153	; 0x99
 800d24a:	1af3      	subs	r3, r6, r3
 800d24c:	4403      	add	r3, r0
 800d24e:	fb0c 3311 	mls	r3, ip, r1, r3
 800d252:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
 800d256:	f10e 0e02 	add.w	lr, lr, #2
 800d25a:	fbbe f0f2 	udiv	r0, lr, r2
 800d25e:	f04f 0805 	mov.w	r8, #5
 800d262:	4342      	muls	r2, r0
 800d264:	3202      	adds	r2, #2
 800d266:	fbb2 f2f8 	udiv	r2, r2, r8
 800d26a:	f103 0c01 	add.w	ip, r3, #1
 800d26e:	ebac 0c02 	sub.w	ip, ip, r2
 800d272:	f240 52f9 	movw	r2, #1529	; 0x5f9
 800d276:	4596      	cmp	lr, r2
 800d278:	bf94      	ite	ls
 800d27a:	2202      	movls	r2, #2
 800d27c:	f06f 0209 	mvnhi.w	r2, #9
 800d280:	4410      	add	r0, r2
 800d282:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800d286:	fb02 1505 	mla	r5, r2, r5, r1
 800d28a:	2801      	cmp	r0, #1
 800d28c:	bf98      	it	ls
 800d28e:	3501      	addls	r5, #1
 800d290:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 800d294:	d30d      	bcc.n	800d2b2 <gmtime_r+0x126>
 800d296:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800d29a:	61e3      	str	r3, [r4, #28]
 800d29c:	2300      	movs	r3, #0
 800d29e:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 800d2a2:	e9c4 0504 	strd	r0, r5, [r4, #16]
 800d2a6:	f8c4 c00c 	str.w	ip, [r4, #12]
 800d2aa:	4620      	mov	r0, r4
 800d2ac:	6223      	str	r3, [r4, #32]
 800d2ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d2b2:	078a      	lsls	r2, r1, #30
 800d2b4:	d102      	bne.n	800d2bc <gmtime_r+0x130>
 800d2b6:	fb07 1616 	mls	r6, r7, r6, r1
 800d2ba:	b95e      	cbnz	r6, 800d2d4 <gmtime_r+0x148>
 800d2bc:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800d2c0:	fbb1 f6f2 	udiv	r6, r1, r2
 800d2c4:	fb02 1216 	mls	r2, r2, r6, r1
 800d2c8:	fab2 f282 	clz	r2, r2
 800d2cc:	0952      	lsrs	r2, r2, #5
 800d2ce:	333b      	adds	r3, #59	; 0x3b
 800d2d0:	4413      	add	r3, r2
 800d2d2:	e7e2      	b.n	800d29a <gmtime_r+0x10e>
 800d2d4:	2201      	movs	r2, #1
 800d2d6:	e7fa      	b.n	800d2ce <gmtime_r+0x142>
 800d2d8:	00015180 	.word	0x00015180
 800d2dc:	00023ab1 	.word	0x00023ab1
 800d2e0:	fffdc54f 	.word	0xfffdc54f
 800d2e4:	00023ab0 	.word	0x00023ab0

0800d2e8 <__retarget_lock_init_recursive>:
 800d2e8:	4770      	bx	lr

0800d2ea <__retarget_lock_acquire>:
 800d2ea:	4770      	bx	lr

0800d2ec <__retarget_lock_acquire_recursive>:
 800d2ec:	4770      	bx	lr

0800d2ee <__retarget_lock_release>:
 800d2ee:	4770      	bx	lr

0800d2f0 <__retarget_lock_release_recursive>:
 800d2f0:	4770      	bx	lr
	...

0800d2f4 <__malloc_lock>:
 800d2f4:	4801      	ldr	r0, [pc, #4]	; (800d2fc <__malloc_lock+0x8>)
 800d2f6:	f7ff bff9 	b.w	800d2ec <__retarget_lock_acquire_recursive>
 800d2fa:	bf00      	nop
 800d2fc:	20002765 	.word	0x20002765

0800d300 <__malloc_unlock>:
 800d300:	4801      	ldr	r0, [pc, #4]	; (800d308 <__malloc_unlock+0x8>)
 800d302:	f7ff bff5 	b.w	800d2f0 <__retarget_lock_release_recursive>
 800d306:	bf00      	nop
 800d308:	20002765 	.word	0x20002765

0800d30c <__ssputs_r>:
 800d30c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d310:	688e      	ldr	r6, [r1, #8]
 800d312:	4682      	mov	sl, r0
 800d314:	429e      	cmp	r6, r3
 800d316:	460c      	mov	r4, r1
 800d318:	4690      	mov	r8, r2
 800d31a:	461f      	mov	r7, r3
 800d31c:	d838      	bhi.n	800d390 <__ssputs_r+0x84>
 800d31e:	898a      	ldrh	r2, [r1, #12]
 800d320:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d324:	d032      	beq.n	800d38c <__ssputs_r+0x80>
 800d326:	6825      	ldr	r5, [r4, #0]
 800d328:	6909      	ldr	r1, [r1, #16]
 800d32a:	3301      	adds	r3, #1
 800d32c:	eba5 0901 	sub.w	r9, r5, r1
 800d330:	6965      	ldr	r5, [r4, #20]
 800d332:	444b      	add	r3, r9
 800d334:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d338:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d33c:	106d      	asrs	r5, r5, #1
 800d33e:	429d      	cmp	r5, r3
 800d340:	bf38      	it	cc
 800d342:	461d      	movcc	r5, r3
 800d344:	0553      	lsls	r3, r2, #21
 800d346:	d531      	bpl.n	800d3ac <__ssputs_r+0xa0>
 800d348:	4629      	mov	r1, r5
 800d34a:	f7ff faaf 	bl	800c8ac <_malloc_r>
 800d34e:	4606      	mov	r6, r0
 800d350:	b950      	cbnz	r0, 800d368 <__ssputs_r+0x5c>
 800d352:	230c      	movs	r3, #12
 800d354:	f04f 30ff 	mov.w	r0, #4294967295
 800d358:	f8ca 3000 	str.w	r3, [sl]
 800d35c:	89a3      	ldrh	r3, [r4, #12]
 800d35e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d362:	81a3      	strh	r3, [r4, #12]
 800d364:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d368:	464a      	mov	r2, r9
 800d36a:	6921      	ldr	r1, [r4, #16]
 800d36c:	f7fe ffae 	bl	800c2cc <memcpy>
 800d370:	89a3      	ldrh	r3, [r4, #12]
 800d372:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d376:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d37a:	81a3      	strh	r3, [r4, #12]
 800d37c:	6126      	str	r6, [r4, #16]
 800d37e:	444e      	add	r6, r9
 800d380:	6026      	str	r6, [r4, #0]
 800d382:	463e      	mov	r6, r7
 800d384:	6165      	str	r5, [r4, #20]
 800d386:	eba5 0509 	sub.w	r5, r5, r9
 800d38a:	60a5      	str	r5, [r4, #8]
 800d38c:	42be      	cmp	r6, r7
 800d38e:	d900      	bls.n	800d392 <__ssputs_r+0x86>
 800d390:	463e      	mov	r6, r7
 800d392:	4632      	mov	r2, r6
 800d394:	4641      	mov	r1, r8
 800d396:	6820      	ldr	r0, [r4, #0]
 800d398:	f001 f834 	bl	800e404 <memmove>
 800d39c:	68a3      	ldr	r3, [r4, #8]
 800d39e:	2000      	movs	r0, #0
 800d3a0:	1b9b      	subs	r3, r3, r6
 800d3a2:	60a3      	str	r3, [r4, #8]
 800d3a4:	6823      	ldr	r3, [r4, #0]
 800d3a6:	4433      	add	r3, r6
 800d3a8:	6023      	str	r3, [r4, #0]
 800d3aa:	e7db      	b.n	800d364 <__ssputs_r+0x58>
 800d3ac:	462a      	mov	r2, r5
 800d3ae:	f001 f843 	bl	800e438 <_realloc_r>
 800d3b2:	4606      	mov	r6, r0
 800d3b4:	2800      	cmp	r0, #0
 800d3b6:	d1e1      	bne.n	800d37c <__ssputs_r+0x70>
 800d3b8:	4650      	mov	r0, sl
 800d3ba:	6921      	ldr	r1, [r4, #16]
 800d3bc:	f7ff fa0e 	bl	800c7dc <_free_r>
 800d3c0:	e7c7      	b.n	800d352 <__ssputs_r+0x46>
	...

0800d3c4 <_svfiprintf_r>:
 800d3c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3c8:	4698      	mov	r8, r3
 800d3ca:	898b      	ldrh	r3, [r1, #12]
 800d3cc:	4607      	mov	r7, r0
 800d3ce:	061b      	lsls	r3, r3, #24
 800d3d0:	460d      	mov	r5, r1
 800d3d2:	4614      	mov	r4, r2
 800d3d4:	b09d      	sub	sp, #116	; 0x74
 800d3d6:	d50e      	bpl.n	800d3f6 <_svfiprintf_r+0x32>
 800d3d8:	690b      	ldr	r3, [r1, #16]
 800d3da:	b963      	cbnz	r3, 800d3f6 <_svfiprintf_r+0x32>
 800d3dc:	2140      	movs	r1, #64	; 0x40
 800d3de:	f7ff fa65 	bl	800c8ac <_malloc_r>
 800d3e2:	6028      	str	r0, [r5, #0]
 800d3e4:	6128      	str	r0, [r5, #16]
 800d3e6:	b920      	cbnz	r0, 800d3f2 <_svfiprintf_r+0x2e>
 800d3e8:	230c      	movs	r3, #12
 800d3ea:	603b      	str	r3, [r7, #0]
 800d3ec:	f04f 30ff 	mov.w	r0, #4294967295
 800d3f0:	e0d1      	b.n	800d596 <_svfiprintf_r+0x1d2>
 800d3f2:	2340      	movs	r3, #64	; 0x40
 800d3f4:	616b      	str	r3, [r5, #20]
 800d3f6:	2300      	movs	r3, #0
 800d3f8:	9309      	str	r3, [sp, #36]	; 0x24
 800d3fa:	2320      	movs	r3, #32
 800d3fc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d400:	2330      	movs	r3, #48	; 0x30
 800d402:	f04f 0901 	mov.w	r9, #1
 800d406:	f8cd 800c 	str.w	r8, [sp, #12]
 800d40a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800d5b0 <_svfiprintf_r+0x1ec>
 800d40e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d412:	4623      	mov	r3, r4
 800d414:	469a      	mov	sl, r3
 800d416:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d41a:	b10a      	cbz	r2, 800d420 <_svfiprintf_r+0x5c>
 800d41c:	2a25      	cmp	r2, #37	; 0x25
 800d41e:	d1f9      	bne.n	800d414 <_svfiprintf_r+0x50>
 800d420:	ebba 0b04 	subs.w	fp, sl, r4
 800d424:	d00b      	beq.n	800d43e <_svfiprintf_r+0x7a>
 800d426:	465b      	mov	r3, fp
 800d428:	4622      	mov	r2, r4
 800d42a:	4629      	mov	r1, r5
 800d42c:	4638      	mov	r0, r7
 800d42e:	f7ff ff6d 	bl	800d30c <__ssputs_r>
 800d432:	3001      	adds	r0, #1
 800d434:	f000 80aa 	beq.w	800d58c <_svfiprintf_r+0x1c8>
 800d438:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d43a:	445a      	add	r2, fp
 800d43c:	9209      	str	r2, [sp, #36]	; 0x24
 800d43e:	f89a 3000 	ldrb.w	r3, [sl]
 800d442:	2b00      	cmp	r3, #0
 800d444:	f000 80a2 	beq.w	800d58c <_svfiprintf_r+0x1c8>
 800d448:	2300      	movs	r3, #0
 800d44a:	f04f 32ff 	mov.w	r2, #4294967295
 800d44e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d452:	f10a 0a01 	add.w	sl, sl, #1
 800d456:	9304      	str	r3, [sp, #16]
 800d458:	9307      	str	r3, [sp, #28]
 800d45a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d45e:	931a      	str	r3, [sp, #104]	; 0x68
 800d460:	4654      	mov	r4, sl
 800d462:	2205      	movs	r2, #5
 800d464:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d468:	4851      	ldr	r0, [pc, #324]	; (800d5b0 <_svfiprintf_r+0x1ec>)
 800d46a:	f000 ffbd 	bl	800e3e8 <memchr>
 800d46e:	9a04      	ldr	r2, [sp, #16]
 800d470:	b9d8      	cbnz	r0, 800d4aa <_svfiprintf_r+0xe6>
 800d472:	06d0      	lsls	r0, r2, #27
 800d474:	bf44      	itt	mi
 800d476:	2320      	movmi	r3, #32
 800d478:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d47c:	0711      	lsls	r1, r2, #28
 800d47e:	bf44      	itt	mi
 800d480:	232b      	movmi	r3, #43	; 0x2b
 800d482:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d486:	f89a 3000 	ldrb.w	r3, [sl]
 800d48a:	2b2a      	cmp	r3, #42	; 0x2a
 800d48c:	d015      	beq.n	800d4ba <_svfiprintf_r+0xf6>
 800d48e:	4654      	mov	r4, sl
 800d490:	2000      	movs	r0, #0
 800d492:	f04f 0c0a 	mov.w	ip, #10
 800d496:	9a07      	ldr	r2, [sp, #28]
 800d498:	4621      	mov	r1, r4
 800d49a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d49e:	3b30      	subs	r3, #48	; 0x30
 800d4a0:	2b09      	cmp	r3, #9
 800d4a2:	d94e      	bls.n	800d542 <_svfiprintf_r+0x17e>
 800d4a4:	b1b0      	cbz	r0, 800d4d4 <_svfiprintf_r+0x110>
 800d4a6:	9207      	str	r2, [sp, #28]
 800d4a8:	e014      	b.n	800d4d4 <_svfiprintf_r+0x110>
 800d4aa:	eba0 0308 	sub.w	r3, r0, r8
 800d4ae:	fa09 f303 	lsl.w	r3, r9, r3
 800d4b2:	4313      	orrs	r3, r2
 800d4b4:	46a2      	mov	sl, r4
 800d4b6:	9304      	str	r3, [sp, #16]
 800d4b8:	e7d2      	b.n	800d460 <_svfiprintf_r+0x9c>
 800d4ba:	9b03      	ldr	r3, [sp, #12]
 800d4bc:	1d19      	adds	r1, r3, #4
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	9103      	str	r1, [sp, #12]
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	bfbb      	ittet	lt
 800d4c6:	425b      	neglt	r3, r3
 800d4c8:	f042 0202 	orrlt.w	r2, r2, #2
 800d4cc:	9307      	strge	r3, [sp, #28]
 800d4ce:	9307      	strlt	r3, [sp, #28]
 800d4d0:	bfb8      	it	lt
 800d4d2:	9204      	strlt	r2, [sp, #16]
 800d4d4:	7823      	ldrb	r3, [r4, #0]
 800d4d6:	2b2e      	cmp	r3, #46	; 0x2e
 800d4d8:	d10c      	bne.n	800d4f4 <_svfiprintf_r+0x130>
 800d4da:	7863      	ldrb	r3, [r4, #1]
 800d4dc:	2b2a      	cmp	r3, #42	; 0x2a
 800d4de:	d135      	bne.n	800d54c <_svfiprintf_r+0x188>
 800d4e0:	9b03      	ldr	r3, [sp, #12]
 800d4e2:	3402      	adds	r4, #2
 800d4e4:	1d1a      	adds	r2, r3, #4
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	9203      	str	r2, [sp, #12]
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	bfb8      	it	lt
 800d4ee:	f04f 33ff 	movlt.w	r3, #4294967295
 800d4f2:	9305      	str	r3, [sp, #20]
 800d4f4:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800d5b4 <_svfiprintf_r+0x1f0>
 800d4f8:	2203      	movs	r2, #3
 800d4fa:	4650      	mov	r0, sl
 800d4fc:	7821      	ldrb	r1, [r4, #0]
 800d4fe:	f000 ff73 	bl	800e3e8 <memchr>
 800d502:	b140      	cbz	r0, 800d516 <_svfiprintf_r+0x152>
 800d504:	2340      	movs	r3, #64	; 0x40
 800d506:	eba0 000a 	sub.w	r0, r0, sl
 800d50a:	fa03 f000 	lsl.w	r0, r3, r0
 800d50e:	9b04      	ldr	r3, [sp, #16]
 800d510:	3401      	adds	r4, #1
 800d512:	4303      	orrs	r3, r0
 800d514:	9304      	str	r3, [sp, #16]
 800d516:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d51a:	2206      	movs	r2, #6
 800d51c:	4826      	ldr	r0, [pc, #152]	; (800d5b8 <_svfiprintf_r+0x1f4>)
 800d51e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d522:	f000 ff61 	bl	800e3e8 <memchr>
 800d526:	2800      	cmp	r0, #0
 800d528:	d038      	beq.n	800d59c <_svfiprintf_r+0x1d8>
 800d52a:	4b24      	ldr	r3, [pc, #144]	; (800d5bc <_svfiprintf_r+0x1f8>)
 800d52c:	bb1b      	cbnz	r3, 800d576 <_svfiprintf_r+0x1b2>
 800d52e:	9b03      	ldr	r3, [sp, #12]
 800d530:	3307      	adds	r3, #7
 800d532:	f023 0307 	bic.w	r3, r3, #7
 800d536:	3308      	adds	r3, #8
 800d538:	9303      	str	r3, [sp, #12]
 800d53a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d53c:	4433      	add	r3, r6
 800d53e:	9309      	str	r3, [sp, #36]	; 0x24
 800d540:	e767      	b.n	800d412 <_svfiprintf_r+0x4e>
 800d542:	460c      	mov	r4, r1
 800d544:	2001      	movs	r0, #1
 800d546:	fb0c 3202 	mla	r2, ip, r2, r3
 800d54a:	e7a5      	b.n	800d498 <_svfiprintf_r+0xd4>
 800d54c:	2300      	movs	r3, #0
 800d54e:	f04f 0c0a 	mov.w	ip, #10
 800d552:	4619      	mov	r1, r3
 800d554:	3401      	adds	r4, #1
 800d556:	9305      	str	r3, [sp, #20]
 800d558:	4620      	mov	r0, r4
 800d55a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d55e:	3a30      	subs	r2, #48	; 0x30
 800d560:	2a09      	cmp	r2, #9
 800d562:	d903      	bls.n	800d56c <_svfiprintf_r+0x1a8>
 800d564:	2b00      	cmp	r3, #0
 800d566:	d0c5      	beq.n	800d4f4 <_svfiprintf_r+0x130>
 800d568:	9105      	str	r1, [sp, #20]
 800d56a:	e7c3      	b.n	800d4f4 <_svfiprintf_r+0x130>
 800d56c:	4604      	mov	r4, r0
 800d56e:	2301      	movs	r3, #1
 800d570:	fb0c 2101 	mla	r1, ip, r1, r2
 800d574:	e7f0      	b.n	800d558 <_svfiprintf_r+0x194>
 800d576:	ab03      	add	r3, sp, #12
 800d578:	9300      	str	r3, [sp, #0]
 800d57a:	462a      	mov	r2, r5
 800d57c:	4638      	mov	r0, r7
 800d57e:	4b10      	ldr	r3, [pc, #64]	; (800d5c0 <_svfiprintf_r+0x1fc>)
 800d580:	a904      	add	r1, sp, #16
 800d582:	f3af 8000 	nop.w
 800d586:	1c42      	adds	r2, r0, #1
 800d588:	4606      	mov	r6, r0
 800d58a:	d1d6      	bne.n	800d53a <_svfiprintf_r+0x176>
 800d58c:	89ab      	ldrh	r3, [r5, #12]
 800d58e:	065b      	lsls	r3, r3, #25
 800d590:	f53f af2c 	bmi.w	800d3ec <_svfiprintf_r+0x28>
 800d594:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d596:	b01d      	add	sp, #116	; 0x74
 800d598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d59c:	ab03      	add	r3, sp, #12
 800d59e:	9300      	str	r3, [sp, #0]
 800d5a0:	462a      	mov	r2, r5
 800d5a2:	4638      	mov	r0, r7
 800d5a4:	4b06      	ldr	r3, [pc, #24]	; (800d5c0 <_svfiprintf_r+0x1fc>)
 800d5a6:	a904      	add	r1, sp, #16
 800d5a8:	f000 f9d4 	bl	800d954 <_printf_i>
 800d5ac:	e7eb      	b.n	800d586 <_svfiprintf_r+0x1c2>
 800d5ae:	bf00      	nop
 800d5b0:	0800f8f6 	.word	0x0800f8f6
 800d5b4:	0800f8fc 	.word	0x0800f8fc
 800d5b8:	0800f900 	.word	0x0800f900
 800d5bc:	00000000 	.word	0x00000000
 800d5c0:	0800d30d 	.word	0x0800d30d

0800d5c4 <__sfputc_r>:
 800d5c4:	6893      	ldr	r3, [r2, #8]
 800d5c6:	b410      	push	{r4}
 800d5c8:	3b01      	subs	r3, #1
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	6093      	str	r3, [r2, #8]
 800d5ce:	da07      	bge.n	800d5e0 <__sfputc_r+0x1c>
 800d5d0:	6994      	ldr	r4, [r2, #24]
 800d5d2:	42a3      	cmp	r3, r4
 800d5d4:	db01      	blt.n	800d5da <__sfputc_r+0x16>
 800d5d6:	290a      	cmp	r1, #10
 800d5d8:	d102      	bne.n	800d5e0 <__sfputc_r+0x1c>
 800d5da:	bc10      	pop	{r4}
 800d5dc:	f000 bbe2 	b.w	800dda4 <__swbuf_r>
 800d5e0:	6813      	ldr	r3, [r2, #0]
 800d5e2:	1c58      	adds	r0, r3, #1
 800d5e4:	6010      	str	r0, [r2, #0]
 800d5e6:	7019      	strb	r1, [r3, #0]
 800d5e8:	4608      	mov	r0, r1
 800d5ea:	bc10      	pop	{r4}
 800d5ec:	4770      	bx	lr

0800d5ee <__sfputs_r>:
 800d5ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5f0:	4606      	mov	r6, r0
 800d5f2:	460f      	mov	r7, r1
 800d5f4:	4614      	mov	r4, r2
 800d5f6:	18d5      	adds	r5, r2, r3
 800d5f8:	42ac      	cmp	r4, r5
 800d5fa:	d101      	bne.n	800d600 <__sfputs_r+0x12>
 800d5fc:	2000      	movs	r0, #0
 800d5fe:	e007      	b.n	800d610 <__sfputs_r+0x22>
 800d600:	463a      	mov	r2, r7
 800d602:	4630      	mov	r0, r6
 800d604:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d608:	f7ff ffdc 	bl	800d5c4 <__sfputc_r>
 800d60c:	1c43      	adds	r3, r0, #1
 800d60e:	d1f3      	bne.n	800d5f8 <__sfputs_r+0xa>
 800d610:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d614 <_vfiprintf_r>:
 800d614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d618:	460d      	mov	r5, r1
 800d61a:	4614      	mov	r4, r2
 800d61c:	4698      	mov	r8, r3
 800d61e:	4606      	mov	r6, r0
 800d620:	b09d      	sub	sp, #116	; 0x74
 800d622:	b118      	cbz	r0, 800d62c <_vfiprintf_r+0x18>
 800d624:	6983      	ldr	r3, [r0, #24]
 800d626:	b90b      	cbnz	r3, 800d62c <_vfiprintf_r+0x18>
 800d628:	f000 fdc8 	bl	800e1bc <__sinit>
 800d62c:	4b89      	ldr	r3, [pc, #548]	; (800d854 <_vfiprintf_r+0x240>)
 800d62e:	429d      	cmp	r5, r3
 800d630:	d11b      	bne.n	800d66a <_vfiprintf_r+0x56>
 800d632:	6875      	ldr	r5, [r6, #4]
 800d634:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d636:	07d9      	lsls	r1, r3, #31
 800d638:	d405      	bmi.n	800d646 <_vfiprintf_r+0x32>
 800d63a:	89ab      	ldrh	r3, [r5, #12]
 800d63c:	059a      	lsls	r2, r3, #22
 800d63e:	d402      	bmi.n	800d646 <_vfiprintf_r+0x32>
 800d640:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d642:	f7ff fe53 	bl	800d2ec <__retarget_lock_acquire_recursive>
 800d646:	89ab      	ldrh	r3, [r5, #12]
 800d648:	071b      	lsls	r3, r3, #28
 800d64a:	d501      	bpl.n	800d650 <_vfiprintf_r+0x3c>
 800d64c:	692b      	ldr	r3, [r5, #16]
 800d64e:	b9eb      	cbnz	r3, 800d68c <_vfiprintf_r+0x78>
 800d650:	4629      	mov	r1, r5
 800d652:	4630      	mov	r0, r6
 800d654:	f000 fc0a 	bl	800de6c <__swsetup_r>
 800d658:	b1c0      	cbz	r0, 800d68c <_vfiprintf_r+0x78>
 800d65a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d65c:	07dc      	lsls	r4, r3, #31
 800d65e:	d50e      	bpl.n	800d67e <_vfiprintf_r+0x6a>
 800d660:	f04f 30ff 	mov.w	r0, #4294967295
 800d664:	b01d      	add	sp, #116	; 0x74
 800d666:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d66a:	4b7b      	ldr	r3, [pc, #492]	; (800d858 <_vfiprintf_r+0x244>)
 800d66c:	429d      	cmp	r5, r3
 800d66e:	d101      	bne.n	800d674 <_vfiprintf_r+0x60>
 800d670:	68b5      	ldr	r5, [r6, #8]
 800d672:	e7df      	b.n	800d634 <_vfiprintf_r+0x20>
 800d674:	4b79      	ldr	r3, [pc, #484]	; (800d85c <_vfiprintf_r+0x248>)
 800d676:	429d      	cmp	r5, r3
 800d678:	bf08      	it	eq
 800d67a:	68f5      	ldreq	r5, [r6, #12]
 800d67c:	e7da      	b.n	800d634 <_vfiprintf_r+0x20>
 800d67e:	89ab      	ldrh	r3, [r5, #12]
 800d680:	0598      	lsls	r0, r3, #22
 800d682:	d4ed      	bmi.n	800d660 <_vfiprintf_r+0x4c>
 800d684:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d686:	f7ff fe33 	bl	800d2f0 <__retarget_lock_release_recursive>
 800d68a:	e7e9      	b.n	800d660 <_vfiprintf_r+0x4c>
 800d68c:	2300      	movs	r3, #0
 800d68e:	9309      	str	r3, [sp, #36]	; 0x24
 800d690:	2320      	movs	r3, #32
 800d692:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d696:	2330      	movs	r3, #48	; 0x30
 800d698:	f04f 0901 	mov.w	r9, #1
 800d69c:	f8cd 800c 	str.w	r8, [sp, #12]
 800d6a0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800d860 <_vfiprintf_r+0x24c>
 800d6a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d6a8:	4623      	mov	r3, r4
 800d6aa:	469a      	mov	sl, r3
 800d6ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d6b0:	b10a      	cbz	r2, 800d6b6 <_vfiprintf_r+0xa2>
 800d6b2:	2a25      	cmp	r2, #37	; 0x25
 800d6b4:	d1f9      	bne.n	800d6aa <_vfiprintf_r+0x96>
 800d6b6:	ebba 0b04 	subs.w	fp, sl, r4
 800d6ba:	d00b      	beq.n	800d6d4 <_vfiprintf_r+0xc0>
 800d6bc:	465b      	mov	r3, fp
 800d6be:	4622      	mov	r2, r4
 800d6c0:	4629      	mov	r1, r5
 800d6c2:	4630      	mov	r0, r6
 800d6c4:	f7ff ff93 	bl	800d5ee <__sfputs_r>
 800d6c8:	3001      	adds	r0, #1
 800d6ca:	f000 80aa 	beq.w	800d822 <_vfiprintf_r+0x20e>
 800d6ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d6d0:	445a      	add	r2, fp
 800d6d2:	9209      	str	r2, [sp, #36]	; 0x24
 800d6d4:	f89a 3000 	ldrb.w	r3, [sl]
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	f000 80a2 	beq.w	800d822 <_vfiprintf_r+0x20e>
 800d6de:	2300      	movs	r3, #0
 800d6e0:	f04f 32ff 	mov.w	r2, #4294967295
 800d6e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d6e8:	f10a 0a01 	add.w	sl, sl, #1
 800d6ec:	9304      	str	r3, [sp, #16]
 800d6ee:	9307      	str	r3, [sp, #28]
 800d6f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d6f4:	931a      	str	r3, [sp, #104]	; 0x68
 800d6f6:	4654      	mov	r4, sl
 800d6f8:	2205      	movs	r2, #5
 800d6fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d6fe:	4858      	ldr	r0, [pc, #352]	; (800d860 <_vfiprintf_r+0x24c>)
 800d700:	f000 fe72 	bl	800e3e8 <memchr>
 800d704:	9a04      	ldr	r2, [sp, #16]
 800d706:	b9d8      	cbnz	r0, 800d740 <_vfiprintf_r+0x12c>
 800d708:	06d1      	lsls	r1, r2, #27
 800d70a:	bf44      	itt	mi
 800d70c:	2320      	movmi	r3, #32
 800d70e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d712:	0713      	lsls	r3, r2, #28
 800d714:	bf44      	itt	mi
 800d716:	232b      	movmi	r3, #43	; 0x2b
 800d718:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d71c:	f89a 3000 	ldrb.w	r3, [sl]
 800d720:	2b2a      	cmp	r3, #42	; 0x2a
 800d722:	d015      	beq.n	800d750 <_vfiprintf_r+0x13c>
 800d724:	4654      	mov	r4, sl
 800d726:	2000      	movs	r0, #0
 800d728:	f04f 0c0a 	mov.w	ip, #10
 800d72c:	9a07      	ldr	r2, [sp, #28]
 800d72e:	4621      	mov	r1, r4
 800d730:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d734:	3b30      	subs	r3, #48	; 0x30
 800d736:	2b09      	cmp	r3, #9
 800d738:	d94e      	bls.n	800d7d8 <_vfiprintf_r+0x1c4>
 800d73a:	b1b0      	cbz	r0, 800d76a <_vfiprintf_r+0x156>
 800d73c:	9207      	str	r2, [sp, #28]
 800d73e:	e014      	b.n	800d76a <_vfiprintf_r+0x156>
 800d740:	eba0 0308 	sub.w	r3, r0, r8
 800d744:	fa09 f303 	lsl.w	r3, r9, r3
 800d748:	4313      	orrs	r3, r2
 800d74a:	46a2      	mov	sl, r4
 800d74c:	9304      	str	r3, [sp, #16]
 800d74e:	e7d2      	b.n	800d6f6 <_vfiprintf_r+0xe2>
 800d750:	9b03      	ldr	r3, [sp, #12]
 800d752:	1d19      	adds	r1, r3, #4
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	9103      	str	r1, [sp, #12]
 800d758:	2b00      	cmp	r3, #0
 800d75a:	bfbb      	ittet	lt
 800d75c:	425b      	neglt	r3, r3
 800d75e:	f042 0202 	orrlt.w	r2, r2, #2
 800d762:	9307      	strge	r3, [sp, #28]
 800d764:	9307      	strlt	r3, [sp, #28]
 800d766:	bfb8      	it	lt
 800d768:	9204      	strlt	r2, [sp, #16]
 800d76a:	7823      	ldrb	r3, [r4, #0]
 800d76c:	2b2e      	cmp	r3, #46	; 0x2e
 800d76e:	d10c      	bne.n	800d78a <_vfiprintf_r+0x176>
 800d770:	7863      	ldrb	r3, [r4, #1]
 800d772:	2b2a      	cmp	r3, #42	; 0x2a
 800d774:	d135      	bne.n	800d7e2 <_vfiprintf_r+0x1ce>
 800d776:	9b03      	ldr	r3, [sp, #12]
 800d778:	3402      	adds	r4, #2
 800d77a:	1d1a      	adds	r2, r3, #4
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	9203      	str	r2, [sp, #12]
 800d780:	2b00      	cmp	r3, #0
 800d782:	bfb8      	it	lt
 800d784:	f04f 33ff 	movlt.w	r3, #4294967295
 800d788:	9305      	str	r3, [sp, #20]
 800d78a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800d864 <_vfiprintf_r+0x250>
 800d78e:	2203      	movs	r2, #3
 800d790:	4650      	mov	r0, sl
 800d792:	7821      	ldrb	r1, [r4, #0]
 800d794:	f000 fe28 	bl	800e3e8 <memchr>
 800d798:	b140      	cbz	r0, 800d7ac <_vfiprintf_r+0x198>
 800d79a:	2340      	movs	r3, #64	; 0x40
 800d79c:	eba0 000a 	sub.w	r0, r0, sl
 800d7a0:	fa03 f000 	lsl.w	r0, r3, r0
 800d7a4:	9b04      	ldr	r3, [sp, #16]
 800d7a6:	3401      	adds	r4, #1
 800d7a8:	4303      	orrs	r3, r0
 800d7aa:	9304      	str	r3, [sp, #16]
 800d7ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d7b0:	2206      	movs	r2, #6
 800d7b2:	482d      	ldr	r0, [pc, #180]	; (800d868 <_vfiprintf_r+0x254>)
 800d7b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d7b8:	f000 fe16 	bl	800e3e8 <memchr>
 800d7bc:	2800      	cmp	r0, #0
 800d7be:	d03f      	beq.n	800d840 <_vfiprintf_r+0x22c>
 800d7c0:	4b2a      	ldr	r3, [pc, #168]	; (800d86c <_vfiprintf_r+0x258>)
 800d7c2:	bb1b      	cbnz	r3, 800d80c <_vfiprintf_r+0x1f8>
 800d7c4:	9b03      	ldr	r3, [sp, #12]
 800d7c6:	3307      	adds	r3, #7
 800d7c8:	f023 0307 	bic.w	r3, r3, #7
 800d7cc:	3308      	adds	r3, #8
 800d7ce:	9303      	str	r3, [sp, #12]
 800d7d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d7d2:	443b      	add	r3, r7
 800d7d4:	9309      	str	r3, [sp, #36]	; 0x24
 800d7d6:	e767      	b.n	800d6a8 <_vfiprintf_r+0x94>
 800d7d8:	460c      	mov	r4, r1
 800d7da:	2001      	movs	r0, #1
 800d7dc:	fb0c 3202 	mla	r2, ip, r2, r3
 800d7e0:	e7a5      	b.n	800d72e <_vfiprintf_r+0x11a>
 800d7e2:	2300      	movs	r3, #0
 800d7e4:	f04f 0c0a 	mov.w	ip, #10
 800d7e8:	4619      	mov	r1, r3
 800d7ea:	3401      	adds	r4, #1
 800d7ec:	9305      	str	r3, [sp, #20]
 800d7ee:	4620      	mov	r0, r4
 800d7f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d7f4:	3a30      	subs	r2, #48	; 0x30
 800d7f6:	2a09      	cmp	r2, #9
 800d7f8:	d903      	bls.n	800d802 <_vfiprintf_r+0x1ee>
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d0c5      	beq.n	800d78a <_vfiprintf_r+0x176>
 800d7fe:	9105      	str	r1, [sp, #20]
 800d800:	e7c3      	b.n	800d78a <_vfiprintf_r+0x176>
 800d802:	4604      	mov	r4, r0
 800d804:	2301      	movs	r3, #1
 800d806:	fb0c 2101 	mla	r1, ip, r1, r2
 800d80a:	e7f0      	b.n	800d7ee <_vfiprintf_r+0x1da>
 800d80c:	ab03      	add	r3, sp, #12
 800d80e:	9300      	str	r3, [sp, #0]
 800d810:	462a      	mov	r2, r5
 800d812:	4630      	mov	r0, r6
 800d814:	4b16      	ldr	r3, [pc, #88]	; (800d870 <_vfiprintf_r+0x25c>)
 800d816:	a904      	add	r1, sp, #16
 800d818:	f3af 8000 	nop.w
 800d81c:	4607      	mov	r7, r0
 800d81e:	1c78      	adds	r0, r7, #1
 800d820:	d1d6      	bne.n	800d7d0 <_vfiprintf_r+0x1bc>
 800d822:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d824:	07d9      	lsls	r1, r3, #31
 800d826:	d405      	bmi.n	800d834 <_vfiprintf_r+0x220>
 800d828:	89ab      	ldrh	r3, [r5, #12]
 800d82a:	059a      	lsls	r2, r3, #22
 800d82c:	d402      	bmi.n	800d834 <_vfiprintf_r+0x220>
 800d82e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d830:	f7ff fd5e 	bl	800d2f0 <__retarget_lock_release_recursive>
 800d834:	89ab      	ldrh	r3, [r5, #12]
 800d836:	065b      	lsls	r3, r3, #25
 800d838:	f53f af12 	bmi.w	800d660 <_vfiprintf_r+0x4c>
 800d83c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d83e:	e711      	b.n	800d664 <_vfiprintf_r+0x50>
 800d840:	ab03      	add	r3, sp, #12
 800d842:	9300      	str	r3, [sp, #0]
 800d844:	462a      	mov	r2, r5
 800d846:	4630      	mov	r0, r6
 800d848:	4b09      	ldr	r3, [pc, #36]	; (800d870 <_vfiprintf_r+0x25c>)
 800d84a:	a904      	add	r1, sp, #16
 800d84c:	f000 f882 	bl	800d954 <_printf_i>
 800d850:	e7e4      	b.n	800d81c <_vfiprintf_r+0x208>
 800d852:	bf00      	nop
 800d854:	0800f94c 	.word	0x0800f94c
 800d858:	0800f96c 	.word	0x0800f96c
 800d85c:	0800f92c 	.word	0x0800f92c
 800d860:	0800f8f6 	.word	0x0800f8f6
 800d864:	0800f8fc 	.word	0x0800f8fc
 800d868:	0800f900 	.word	0x0800f900
 800d86c:	00000000 	.word	0x00000000
 800d870:	0800d5ef 	.word	0x0800d5ef

0800d874 <_printf_common>:
 800d874:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d878:	4616      	mov	r6, r2
 800d87a:	4699      	mov	r9, r3
 800d87c:	688a      	ldr	r2, [r1, #8]
 800d87e:	690b      	ldr	r3, [r1, #16]
 800d880:	4607      	mov	r7, r0
 800d882:	4293      	cmp	r3, r2
 800d884:	bfb8      	it	lt
 800d886:	4613      	movlt	r3, r2
 800d888:	6033      	str	r3, [r6, #0]
 800d88a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d88e:	460c      	mov	r4, r1
 800d890:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d894:	b10a      	cbz	r2, 800d89a <_printf_common+0x26>
 800d896:	3301      	adds	r3, #1
 800d898:	6033      	str	r3, [r6, #0]
 800d89a:	6823      	ldr	r3, [r4, #0]
 800d89c:	0699      	lsls	r1, r3, #26
 800d89e:	bf42      	ittt	mi
 800d8a0:	6833      	ldrmi	r3, [r6, #0]
 800d8a2:	3302      	addmi	r3, #2
 800d8a4:	6033      	strmi	r3, [r6, #0]
 800d8a6:	6825      	ldr	r5, [r4, #0]
 800d8a8:	f015 0506 	ands.w	r5, r5, #6
 800d8ac:	d106      	bne.n	800d8bc <_printf_common+0x48>
 800d8ae:	f104 0a19 	add.w	sl, r4, #25
 800d8b2:	68e3      	ldr	r3, [r4, #12]
 800d8b4:	6832      	ldr	r2, [r6, #0]
 800d8b6:	1a9b      	subs	r3, r3, r2
 800d8b8:	42ab      	cmp	r3, r5
 800d8ba:	dc28      	bgt.n	800d90e <_printf_common+0x9a>
 800d8bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d8c0:	1e13      	subs	r3, r2, #0
 800d8c2:	6822      	ldr	r2, [r4, #0]
 800d8c4:	bf18      	it	ne
 800d8c6:	2301      	movne	r3, #1
 800d8c8:	0692      	lsls	r2, r2, #26
 800d8ca:	d42d      	bmi.n	800d928 <_printf_common+0xb4>
 800d8cc:	4649      	mov	r1, r9
 800d8ce:	4638      	mov	r0, r7
 800d8d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d8d4:	47c0      	blx	r8
 800d8d6:	3001      	adds	r0, #1
 800d8d8:	d020      	beq.n	800d91c <_printf_common+0xa8>
 800d8da:	6823      	ldr	r3, [r4, #0]
 800d8dc:	68e5      	ldr	r5, [r4, #12]
 800d8de:	f003 0306 	and.w	r3, r3, #6
 800d8e2:	2b04      	cmp	r3, #4
 800d8e4:	bf18      	it	ne
 800d8e6:	2500      	movne	r5, #0
 800d8e8:	6832      	ldr	r2, [r6, #0]
 800d8ea:	f04f 0600 	mov.w	r6, #0
 800d8ee:	68a3      	ldr	r3, [r4, #8]
 800d8f0:	bf08      	it	eq
 800d8f2:	1aad      	subeq	r5, r5, r2
 800d8f4:	6922      	ldr	r2, [r4, #16]
 800d8f6:	bf08      	it	eq
 800d8f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d8fc:	4293      	cmp	r3, r2
 800d8fe:	bfc4      	itt	gt
 800d900:	1a9b      	subgt	r3, r3, r2
 800d902:	18ed      	addgt	r5, r5, r3
 800d904:	341a      	adds	r4, #26
 800d906:	42b5      	cmp	r5, r6
 800d908:	d11a      	bne.n	800d940 <_printf_common+0xcc>
 800d90a:	2000      	movs	r0, #0
 800d90c:	e008      	b.n	800d920 <_printf_common+0xac>
 800d90e:	2301      	movs	r3, #1
 800d910:	4652      	mov	r2, sl
 800d912:	4649      	mov	r1, r9
 800d914:	4638      	mov	r0, r7
 800d916:	47c0      	blx	r8
 800d918:	3001      	adds	r0, #1
 800d91a:	d103      	bne.n	800d924 <_printf_common+0xb0>
 800d91c:	f04f 30ff 	mov.w	r0, #4294967295
 800d920:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d924:	3501      	adds	r5, #1
 800d926:	e7c4      	b.n	800d8b2 <_printf_common+0x3e>
 800d928:	2030      	movs	r0, #48	; 0x30
 800d92a:	18e1      	adds	r1, r4, r3
 800d92c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d930:	1c5a      	adds	r2, r3, #1
 800d932:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d936:	4422      	add	r2, r4
 800d938:	3302      	adds	r3, #2
 800d93a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d93e:	e7c5      	b.n	800d8cc <_printf_common+0x58>
 800d940:	2301      	movs	r3, #1
 800d942:	4622      	mov	r2, r4
 800d944:	4649      	mov	r1, r9
 800d946:	4638      	mov	r0, r7
 800d948:	47c0      	blx	r8
 800d94a:	3001      	adds	r0, #1
 800d94c:	d0e6      	beq.n	800d91c <_printf_common+0xa8>
 800d94e:	3601      	adds	r6, #1
 800d950:	e7d9      	b.n	800d906 <_printf_common+0x92>
	...

0800d954 <_printf_i>:
 800d954:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d958:	7e0f      	ldrb	r7, [r1, #24]
 800d95a:	4691      	mov	r9, r2
 800d95c:	2f78      	cmp	r7, #120	; 0x78
 800d95e:	4680      	mov	r8, r0
 800d960:	460c      	mov	r4, r1
 800d962:	469a      	mov	sl, r3
 800d964:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d966:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d96a:	d807      	bhi.n	800d97c <_printf_i+0x28>
 800d96c:	2f62      	cmp	r7, #98	; 0x62
 800d96e:	d80a      	bhi.n	800d986 <_printf_i+0x32>
 800d970:	2f00      	cmp	r7, #0
 800d972:	f000 80d9 	beq.w	800db28 <_printf_i+0x1d4>
 800d976:	2f58      	cmp	r7, #88	; 0x58
 800d978:	f000 80a4 	beq.w	800dac4 <_printf_i+0x170>
 800d97c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d980:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d984:	e03a      	b.n	800d9fc <_printf_i+0xa8>
 800d986:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d98a:	2b15      	cmp	r3, #21
 800d98c:	d8f6      	bhi.n	800d97c <_printf_i+0x28>
 800d98e:	a101      	add	r1, pc, #4	; (adr r1, 800d994 <_printf_i+0x40>)
 800d990:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d994:	0800d9ed 	.word	0x0800d9ed
 800d998:	0800da01 	.word	0x0800da01
 800d99c:	0800d97d 	.word	0x0800d97d
 800d9a0:	0800d97d 	.word	0x0800d97d
 800d9a4:	0800d97d 	.word	0x0800d97d
 800d9a8:	0800d97d 	.word	0x0800d97d
 800d9ac:	0800da01 	.word	0x0800da01
 800d9b0:	0800d97d 	.word	0x0800d97d
 800d9b4:	0800d97d 	.word	0x0800d97d
 800d9b8:	0800d97d 	.word	0x0800d97d
 800d9bc:	0800d97d 	.word	0x0800d97d
 800d9c0:	0800db0f 	.word	0x0800db0f
 800d9c4:	0800da31 	.word	0x0800da31
 800d9c8:	0800daf1 	.word	0x0800daf1
 800d9cc:	0800d97d 	.word	0x0800d97d
 800d9d0:	0800d97d 	.word	0x0800d97d
 800d9d4:	0800db31 	.word	0x0800db31
 800d9d8:	0800d97d 	.word	0x0800d97d
 800d9dc:	0800da31 	.word	0x0800da31
 800d9e0:	0800d97d 	.word	0x0800d97d
 800d9e4:	0800d97d 	.word	0x0800d97d
 800d9e8:	0800daf9 	.word	0x0800daf9
 800d9ec:	682b      	ldr	r3, [r5, #0]
 800d9ee:	1d1a      	adds	r2, r3, #4
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	602a      	str	r2, [r5, #0]
 800d9f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d9f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d9fc:	2301      	movs	r3, #1
 800d9fe:	e0a4      	b.n	800db4a <_printf_i+0x1f6>
 800da00:	6820      	ldr	r0, [r4, #0]
 800da02:	6829      	ldr	r1, [r5, #0]
 800da04:	0606      	lsls	r6, r0, #24
 800da06:	f101 0304 	add.w	r3, r1, #4
 800da0a:	d50a      	bpl.n	800da22 <_printf_i+0xce>
 800da0c:	680e      	ldr	r6, [r1, #0]
 800da0e:	602b      	str	r3, [r5, #0]
 800da10:	2e00      	cmp	r6, #0
 800da12:	da03      	bge.n	800da1c <_printf_i+0xc8>
 800da14:	232d      	movs	r3, #45	; 0x2d
 800da16:	4276      	negs	r6, r6
 800da18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800da1c:	230a      	movs	r3, #10
 800da1e:	485e      	ldr	r0, [pc, #376]	; (800db98 <_printf_i+0x244>)
 800da20:	e019      	b.n	800da56 <_printf_i+0x102>
 800da22:	680e      	ldr	r6, [r1, #0]
 800da24:	f010 0f40 	tst.w	r0, #64	; 0x40
 800da28:	602b      	str	r3, [r5, #0]
 800da2a:	bf18      	it	ne
 800da2c:	b236      	sxthne	r6, r6
 800da2e:	e7ef      	b.n	800da10 <_printf_i+0xbc>
 800da30:	682b      	ldr	r3, [r5, #0]
 800da32:	6820      	ldr	r0, [r4, #0]
 800da34:	1d19      	adds	r1, r3, #4
 800da36:	6029      	str	r1, [r5, #0]
 800da38:	0601      	lsls	r1, r0, #24
 800da3a:	d501      	bpl.n	800da40 <_printf_i+0xec>
 800da3c:	681e      	ldr	r6, [r3, #0]
 800da3e:	e002      	b.n	800da46 <_printf_i+0xf2>
 800da40:	0646      	lsls	r6, r0, #25
 800da42:	d5fb      	bpl.n	800da3c <_printf_i+0xe8>
 800da44:	881e      	ldrh	r6, [r3, #0]
 800da46:	2f6f      	cmp	r7, #111	; 0x6f
 800da48:	bf0c      	ite	eq
 800da4a:	2308      	moveq	r3, #8
 800da4c:	230a      	movne	r3, #10
 800da4e:	4852      	ldr	r0, [pc, #328]	; (800db98 <_printf_i+0x244>)
 800da50:	2100      	movs	r1, #0
 800da52:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800da56:	6865      	ldr	r5, [r4, #4]
 800da58:	2d00      	cmp	r5, #0
 800da5a:	bfa8      	it	ge
 800da5c:	6821      	ldrge	r1, [r4, #0]
 800da5e:	60a5      	str	r5, [r4, #8]
 800da60:	bfa4      	itt	ge
 800da62:	f021 0104 	bicge.w	r1, r1, #4
 800da66:	6021      	strge	r1, [r4, #0]
 800da68:	b90e      	cbnz	r6, 800da6e <_printf_i+0x11a>
 800da6a:	2d00      	cmp	r5, #0
 800da6c:	d04d      	beq.n	800db0a <_printf_i+0x1b6>
 800da6e:	4615      	mov	r5, r2
 800da70:	fbb6 f1f3 	udiv	r1, r6, r3
 800da74:	fb03 6711 	mls	r7, r3, r1, r6
 800da78:	5dc7      	ldrb	r7, [r0, r7]
 800da7a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800da7e:	4637      	mov	r7, r6
 800da80:	42bb      	cmp	r3, r7
 800da82:	460e      	mov	r6, r1
 800da84:	d9f4      	bls.n	800da70 <_printf_i+0x11c>
 800da86:	2b08      	cmp	r3, #8
 800da88:	d10b      	bne.n	800daa2 <_printf_i+0x14e>
 800da8a:	6823      	ldr	r3, [r4, #0]
 800da8c:	07de      	lsls	r6, r3, #31
 800da8e:	d508      	bpl.n	800daa2 <_printf_i+0x14e>
 800da90:	6923      	ldr	r3, [r4, #16]
 800da92:	6861      	ldr	r1, [r4, #4]
 800da94:	4299      	cmp	r1, r3
 800da96:	bfde      	ittt	le
 800da98:	2330      	movle	r3, #48	; 0x30
 800da9a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800da9e:	f105 35ff 	addle.w	r5, r5, #4294967295
 800daa2:	1b52      	subs	r2, r2, r5
 800daa4:	6122      	str	r2, [r4, #16]
 800daa6:	464b      	mov	r3, r9
 800daa8:	4621      	mov	r1, r4
 800daaa:	4640      	mov	r0, r8
 800daac:	f8cd a000 	str.w	sl, [sp]
 800dab0:	aa03      	add	r2, sp, #12
 800dab2:	f7ff fedf 	bl	800d874 <_printf_common>
 800dab6:	3001      	adds	r0, #1
 800dab8:	d14c      	bne.n	800db54 <_printf_i+0x200>
 800daba:	f04f 30ff 	mov.w	r0, #4294967295
 800dabe:	b004      	add	sp, #16
 800dac0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dac4:	4834      	ldr	r0, [pc, #208]	; (800db98 <_printf_i+0x244>)
 800dac6:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800daca:	6829      	ldr	r1, [r5, #0]
 800dacc:	6823      	ldr	r3, [r4, #0]
 800dace:	f851 6b04 	ldr.w	r6, [r1], #4
 800dad2:	6029      	str	r1, [r5, #0]
 800dad4:	061d      	lsls	r5, r3, #24
 800dad6:	d514      	bpl.n	800db02 <_printf_i+0x1ae>
 800dad8:	07df      	lsls	r7, r3, #31
 800dada:	bf44      	itt	mi
 800dadc:	f043 0320 	orrmi.w	r3, r3, #32
 800dae0:	6023      	strmi	r3, [r4, #0]
 800dae2:	b91e      	cbnz	r6, 800daec <_printf_i+0x198>
 800dae4:	6823      	ldr	r3, [r4, #0]
 800dae6:	f023 0320 	bic.w	r3, r3, #32
 800daea:	6023      	str	r3, [r4, #0]
 800daec:	2310      	movs	r3, #16
 800daee:	e7af      	b.n	800da50 <_printf_i+0xfc>
 800daf0:	6823      	ldr	r3, [r4, #0]
 800daf2:	f043 0320 	orr.w	r3, r3, #32
 800daf6:	6023      	str	r3, [r4, #0]
 800daf8:	2378      	movs	r3, #120	; 0x78
 800dafa:	4828      	ldr	r0, [pc, #160]	; (800db9c <_printf_i+0x248>)
 800dafc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800db00:	e7e3      	b.n	800daca <_printf_i+0x176>
 800db02:	0659      	lsls	r1, r3, #25
 800db04:	bf48      	it	mi
 800db06:	b2b6      	uxthmi	r6, r6
 800db08:	e7e6      	b.n	800dad8 <_printf_i+0x184>
 800db0a:	4615      	mov	r5, r2
 800db0c:	e7bb      	b.n	800da86 <_printf_i+0x132>
 800db0e:	682b      	ldr	r3, [r5, #0]
 800db10:	6826      	ldr	r6, [r4, #0]
 800db12:	1d18      	adds	r0, r3, #4
 800db14:	6961      	ldr	r1, [r4, #20]
 800db16:	6028      	str	r0, [r5, #0]
 800db18:	0635      	lsls	r5, r6, #24
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	d501      	bpl.n	800db22 <_printf_i+0x1ce>
 800db1e:	6019      	str	r1, [r3, #0]
 800db20:	e002      	b.n	800db28 <_printf_i+0x1d4>
 800db22:	0670      	lsls	r0, r6, #25
 800db24:	d5fb      	bpl.n	800db1e <_printf_i+0x1ca>
 800db26:	8019      	strh	r1, [r3, #0]
 800db28:	2300      	movs	r3, #0
 800db2a:	4615      	mov	r5, r2
 800db2c:	6123      	str	r3, [r4, #16]
 800db2e:	e7ba      	b.n	800daa6 <_printf_i+0x152>
 800db30:	682b      	ldr	r3, [r5, #0]
 800db32:	2100      	movs	r1, #0
 800db34:	1d1a      	adds	r2, r3, #4
 800db36:	602a      	str	r2, [r5, #0]
 800db38:	681d      	ldr	r5, [r3, #0]
 800db3a:	6862      	ldr	r2, [r4, #4]
 800db3c:	4628      	mov	r0, r5
 800db3e:	f000 fc53 	bl	800e3e8 <memchr>
 800db42:	b108      	cbz	r0, 800db48 <_printf_i+0x1f4>
 800db44:	1b40      	subs	r0, r0, r5
 800db46:	6060      	str	r0, [r4, #4]
 800db48:	6863      	ldr	r3, [r4, #4]
 800db4a:	6123      	str	r3, [r4, #16]
 800db4c:	2300      	movs	r3, #0
 800db4e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800db52:	e7a8      	b.n	800daa6 <_printf_i+0x152>
 800db54:	462a      	mov	r2, r5
 800db56:	4649      	mov	r1, r9
 800db58:	4640      	mov	r0, r8
 800db5a:	6923      	ldr	r3, [r4, #16]
 800db5c:	47d0      	blx	sl
 800db5e:	3001      	adds	r0, #1
 800db60:	d0ab      	beq.n	800daba <_printf_i+0x166>
 800db62:	6823      	ldr	r3, [r4, #0]
 800db64:	079b      	lsls	r3, r3, #30
 800db66:	d413      	bmi.n	800db90 <_printf_i+0x23c>
 800db68:	68e0      	ldr	r0, [r4, #12]
 800db6a:	9b03      	ldr	r3, [sp, #12]
 800db6c:	4298      	cmp	r0, r3
 800db6e:	bfb8      	it	lt
 800db70:	4618      	movlt	r0, r3
 800db72:	e7a4      	b.n	800dabe <_printf_i+0x16a>
 800db74:	2301      	movs	r3, #1
 800db76:	4632      	mov	r2, r6
 800db78:	4649      	mov	r1, r9
 800db7a:	4640      	mov	r0, r8
 800db7c:	47d0      	blx	sl
 800db7e:	3001      	adds	r0, #1
 800db80:	d09b      	beq.n	800daba <_printf_i+0x166>
 800db82:	3501      	adds	r5, #1
 800db84:	68e3      	ldr	r3, [r4, #12]
 800db86:	9903      	ldr	r1, [sp, #12]
 800db88:	1a5b      	subs	r3, r3, r1
 800db8a:	42ab      	cmp	r3, r5
 800db8c:	dcf2      	bgt.n	800db74 <_printf_i+0x220>
 800db8e:	e7eb      	b.n	800db68 <_printf_i+0x214>
 800db90:	2500      	movs	r5, #0
 800db92:	f104 0619 	add.w	r6, r4, #25
 800db96:	e7f5      	b.n	800db84 <_printf_i+0x230>
 800db98:	0800f907 	.word	0x0800f907
 800db9c:	0800f918 	.word	0x0800f918

0800dba0 <siscanf>:
 800dba0:	b40e      	push	{r1, r2, r3}
 800dba2:	f44f 7201 	mov.w	r2, #516	; 0x204
 800dba6:	b530      	push	{r4, r5, lr}
 800dba8:	b09c      	sub	sp, #112	; 0x70
 800dbaa:	ac1f      	add	r4, sp, #124	; 0x7c
 800dbac:	f854 5b04 	ldr.w	r5, [r4], #4
 800dbb0:	f8ad 2014 	strh.w	r2, [sp, #20]
 800dbb4:	9002      	str	r0, [sp, #8]
 800dbb6:	9006      	str	r0, [sp, #24]
 800dbb8:	f7f2 fad2 	bl	8000160 <strlen>
 800dbbc:	4b0b      	ldr	r3, [pc, #44]	; (800dbec <siscanf+0x4c>)
 800dbbe:	9003      	str	r0, [sp, #12]
 800dbc0:	930b      	str	r3, [sp, #44]	; 0x2c
 800dbc2:	2300      	movs	r3, #0
 800dbc4:	930f      	str	r3, [sp, #60]	; 0x3c
 800dbc6:	9314      	str	r3, [sp, #80]	; 0x50
 800dbc8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800dbcc:	9007      	str	r0, [sp, #28]
 800dbce:	4808      	ldr	r0, [pc, #32]	; (800dbf0 <siscanf+0x50>)
 800dbd0:	f8ad 3016 	strh.w	r3, [sp, #22]
 800dbd4:	462a      	mov	r2, r5
 800dbd6:	4623      	mov	r3, r4
 800dbd8:	a902      	add	r1, sp, #8
 800dbda:	6800      	ldr	r0, [r0, #0]
 800dbdc:	9401      	str	r4, [sp, #4]
 800dbde:	f000 fcb5 	bl	800e54c <__ssvfiscanf_r>
 800dbe2:	b01c      	add	sp, #112	; 0x70
 800dbe4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dbe8:	b003      	add	sp, #12
 800dbea:	4770      	bx	lr
 800dbec:	0800dc17 	.word	0x0800dc17
 800dbf0:	200004e0 	.word	0x200004e0

0800dbf4 <__sread>:
 800dbf4:	b510      	push	{r4, lr}
 800dbf6:	460c      	mov	r4, r1
 800dbf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dbfc:	f000 ff72 	bl	800eae4 <_read_r>
 800dc00:	2800      	cmp	r0, #0
 800dc02:	bfab      	itete	ge
 800dc04:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800dc06:	89a3      	ldrhlt	r3, [r4, #12]
 800dc08:	181b      	addge	r3, r3, r0
 800dc0a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800dc0e:	bfac      	ite	ge
 800dc10:	6563      	strge	r3, [r4, #84]	; 0x54
 800dc12:	81a3      	strhlt	r3, [r4, #12]
 800dc14:	bd10      	pop	{r4, pc}

0800dc16 <__seofread>:
 800dc16:	2000      	movs	r0, #0
 800dc18:	4770      	bx	lr

0800dc1a <__swrite>:
 800dc1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc1e:	461f      	mov	r7, r3
 800dc20:	898b      	ldrh	r3, [r1, #12]
 800dc22:	4605      	mov	r5, r0
 800dc24:	05db      	lsls	r3, r3, #23
 800dc26:	460c      	mov	r4, r1
 800dc28:	4616      	mov	r6, r2
 800dc2a:	d505      	bpl.n	800dc38 <__swrite+0x1e>
 800dc2c:	2302      	movs	r3, #2
 800dc2e:	2200      	movs	r2, #0
 800dc30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc34:	f000 fb60 	bl	800e2f8 <_lseek_r>
 800dc38:	89a3      	ldrh	r3, [r4, #12]
 800dc3a:	4632      	mov	r2, r6
 800dc3c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800dc40:	81a3      	strh	r3, [r4, #12]
 800dc42:	4628      	mov	r0, r5
 800dc44:	463b      	mov	r3, r7
 800dc46:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dc4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dc4e:	f000 b8fb 	b.w	800de48 <_write_r>

0800dc52 <__sseek>:
 800dc52:	b510      	push	{r4, lr}
 800dc54:	460c      	mov	r4, r1
 800dc56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc5a:	f000 fb4d 	bl	800e2f8 <_lseek_r>
 800dc5e:	1c43      	adds	r3, r0, #1
 800dc60:	89a3      	ldrh	r3, [r4, #12]
 800dc62:	bf15      	itete	ne
 800dc64:	6560      	strne	r0, [r4, #84]	; 0x54
 800dc66:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800dc6a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800dc6e:	81a3      	strheq	r3, [r4, #12]
 800dc70:	bf18      	it	ne
 800dc72:	81a3      	strhne	r3, [r4, #12]
 800dc74:	bd10      	pop	{r4, pc}

0800dc76 <__sclose>:
 800dc76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc7a:	f000 b96d 	b.w	800df58 <_close_r>

0800dc7e <strncmp>:
 800dc7e:	4603      	mov	r3, r0
 800dc80:	b510      	push	{r4, lr}
 800dc82:	b172      	cbz	r2, 800dca2 <strncmp+0x24>
 800dc84:	3901      	subs	r1, #1
 800dc86:	1884      	adds	r4, r0, r2
 800dc88:	f813 0b01 	ldrb.w	r0, [r3], #1
 800dc8c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800dc90:	4290      	cmp	r0, r2
 800dc92:	d101      	bne.n	800dc98 <strncmp+0x1a>
 800dc94:	42a3      	cmp	r3, r4
 800dc96:	d101      	bne.n	800dc9c <strncmp+0x1e>
 800dc98:	1a80      	subs	r0, r0, r2
 800dc9a:	bd10      	pop	{r4, pc}
 800dc9c:	2800      	cmp	r0, #0
 800dc9e:	d1f3      	bne.n	800dc88 <strncmp+0xa>
 800dca0:	e7fa      	b.n	800dc98 <strncmp+0x1a>
 800dca2:	4610      	mov	r0, r2
 800dca4:	e7f9      	b.n	800dc9a <strncmp+0x1c>
	...

0800dca8 <_strtoul_l.constprop.0>:
 800dca8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dcac:	4686      	mov	lr, r0
 800dcae:	460d      	mov	r5, r1
 800dcb0:	4f35      	ldr	r7, [pc, #212]	; (800dd88 <_strtoul_l.constprop.0+0xe0>)
 800dcb2:	4628      	mov	r0, r5
 800dcb4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dcb8:	5de6      	ldrb	r6, [r4, r7]
 800dcba:	f016 0608 	ands.w	r6, r6, #8
 800dcbe:	d1f8      	bne.n	800dcb2 <_strtoul_l.constprop.0+0xa>
 800dcc0:	2c2d      	cmp	r4, #45	; 0x2d
 800dcc2:	d12f      	bne.n	800dd24 <_strtoul_l.constprop.0+0x7c>
 800dcc4:	2601      	movs	r6, #1
 800dcc6:	782c      	ldrb	r4, [r5, #0]
 800dcc8:	1c85      	adds	r5, r0, #2
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d057      	beq.n	800dd7e <_strtoul_l.constprop.0+0xd6>
 800dcce:	2b10      	cmp	r3, #16
 800dcd0:	d109      	bne.n	800dce6 <_strtoul_l.constprop.0+0x3e>
 800dcd2:	2c30      	cmp	r4, #48	; 0x30
 800dcd4:	d107      	bne.n	800dce6 <_strtoul_l.constprop.0+0x3e>
 800dcd6:	7828      	ldrb	r0, [r5, #0]
 800dcd8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800dcdc:	2858      	cmp	r0, #88	; 0x58
 800dcde:	d149      	bne.n	800dd74 <_strtoul_l.constprop.0+0xcc>
 800dce0:	2310      	movs	r3, #16
 800dce2:	786c      	ldrb	r4, [r5, #1]
 800dce4:	3502      	adds	r5, #2
 800dce6:	f04f 38ff 	mov.w	r8, #4294967295
 800dcea:	fbb8 f8f3 	udiv	r8, r8, r3
 800dcee:	2700      	movs	r7, #0
 800dcf0:	fb03 f908 	mul.w	r9, r3, r8
 800dcf4:	4638      	mov	r0, r7
 800dcf6:	ea6f 0909 	mvn.w	r9, r9
 800dcfa:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800dcfe:	f1bc 0f09 	cmp.w	ip, #9
 800dd02:	d814      	bhi.n	800dd2e <_strtoul_l.constprop.0+0x86>
 800dd04:	4664      	mov	r4, ip
 800dd06:	42a3      	cmp	r3, r4
 800dd08:	dd22      	ble.n	800dd50 <_strtoul_l.constprop.0+0xa8>
 800dd0a:	2f00      	cmp	r7, #0
 800dd0c:	db1d      	blt.n	800dd4a <_strtoul_l.constprop.0+0xa2>
 800dd0e:	4580      	cmp	r8, r0
 800dd10:	d31b      	bcc.n	800dd4a <_strtoul_l.constprop.0+0xa2>
 800dd12:	d101      	bne.n	800dd18 <_strtoul_l.constprop.0+0x70>
 800dd14:	45a1      	cmp	r9, r4
 800dd16:	db18      	blt.n	800dd4a <_strtoul_l.constprop.0+0xa2>
 800dd18:	2701      	movs	r7, #1
 800dd1a:	fb00 4003 	mla	r0, r0, r3, r4
 800dd1e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dd22:	e7ea      	b.n	800dcfa <_strtoul_l.constprop.0+0x52>
 800dd24:	2c2b      	cmp	r4, #43	; 0x2b
 800dd26:	bf04      	itt	eq
 800dd28:	782c      	ldrbeq	r4, [r5, #0]
 800dd2a:	1c85      	addeq	r5, r0, #2
 800dd2c:	e7cd      	b.n	800dcca <_strtoul_l.constprop.0+0x22>
 800dd2e:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800dd32:	f1bc 0f19 	cmp.w	ip, #25
 800dd36:	d801      	bhi.n	800dd3c <_strtoul_l.constprop.0+0x94>
 800dd38:	3c37      	subs	r4, #55	; 0x37
 800dd3a:	e7e4      	b.n	800dd06 <_strtoul_l.constprop.0+0x5e>
 800dd3c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800dd40:	f1bc 0f19 	cmp.w	ip, #25
 800dd44:	d804      	bhi.n	800dd50 <_strtoul_l.constprop.0+0xa8>
 800dd46:	3c57      	subs	r4, #87	; 0x57
 800dd48:	e7dd      	b.n	800dd06 <_strtoul_l.constprop.0+0x5e>
 800dd4a:	f04f 37ff 	mov.w	r7, #4294967295
 800dd4e:	e7e6      	b.n	800dd1e <_strtoul_l.constprop.0+0x76>
 800dd50:	2f00      	cmp	r7, #0
 800dd52:	da07      	bge.n	800dd64 <_strtoul_l.constprop.0+0xbc>
 800dd54:	2322      	movs	r3, #34	; 0x22
 800dd56:	f04f 30ff 	mov.w	r0, #4294967295
 800dd5a:	f8ce 3000 	str.w	r3, [lr]
 800dd5e:	b932      	cbnz	r2, 800dd6e <_strtoul_l.constprop.0+0xc6>
 800dd60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dd64:	b106      	cbz	r6, 800dd68 <_strtoul_l.constprop.0+0xc0>
 800dd66:	4240      	negs	r0, r0
 800dd68:	2a00      	cmp	r2, #0
 800dd6a:	d0f9      	beq.n	800dd60 <_strtoul_l.constprop.0+0xb8>
 800dd6c:	b107      	cbz	r7, 800dd70 <_strtoul_l.constprop.0+0xc8>
 800dd6e:	1e69      	subs	r1, r5, #1
 800dd70:	6011      	str	r1, [r2, #0]
 800dd72:	e7f5      	b.n	800dd60 <_strtoul_l.constprop.0+0xb8>
 800dd74:	2430      	movs	r4, #48	; 0x30
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d1b5      	bne.n	800dce6 <_strtoul_l.constprop.0+0x3e>
 800dd7a:	2308      	movs	r3, #8
 800dd7c:	e7b3      	b.n	800dce6 <_strtoul_l.constprop.0+0x3e>
 800dd7e:	2c30      	cmp	r4, #48	; 0x30
 800dd80:	d0a9      	beq.n	800dcd6 <_strtoul_l.constprop.0+0x2e>
 800dd82:	230a      	movs	r3, #10
 800dd84:	e7af      	b.n	800dce6 <_strtoul_l.constprop.0+0x3e>
 800dd86:	bf00      	nop
 800dd88:	0800f7f6 	.word	0x0800f7f6

0800dd8c <_strtoul_r>:
 800dd8c:	f7ff bf8c 	b.w	800dca8 <_strtoul_l.constprop.0>

0800dd90 <strtoul>:
 800dd90:	4613      	mov	r3, r2
 800dd92:	460a      	mov	r2, r1
 800dd94:	4601      	mov	r1, r0
 800dd96:	4802      	ldr	r0, [pc, #8]	; (800dda0 <strtoul+0x10>)
 800dd98:	6800      	ldr	r0, [r0, #0]
 800dd9a:	f7ff bf85 	b.w	800dca8 <_strtoul_l.constprop.0>
 800dd9e:	bf00      	nop
 800dda0:	200004e0 	.word	0x200004e0

0800dda4 <__swbuf_r>:
 800dda4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dda6:	460e      	mov	r6, r1
 800dda8:	4614      	mov	r4, r2
 800ddaa:	4605      	mov	r5, r0
 800ddac:	b118      	cbz	r0, 800ddb6 <__swbuf_r+0x12>
 800ddae:	6983      	ldr	r3, [r0, #24]
 800ddb0:	b90b      	cbnz	r3, 800ddb6 <__swbuf_r+0x12>
 800ddb2:	f000 fa03 	bl	800e1bc <__sinit>
 800ddb6:	4b21      	ldr	r3, [pc, #132]	; (800de3c <__swbuf_r+0x98>)
 800ddb8:	429c      	cmp	r4, r3
 800ddba:	d12b      	bne.n	800de14 <__swbuf_r+0x70>
 800ddbc:	686c      	ldr	r4, [r5, #4]
 800ddbe:	69a3      	ldr	r3, [r4, #24]
 800ddc0:	60a3      	str	r3, [r4, #8]
 800ddc2:	89a3      	ldrh	r3, [r4, #12]
 800ddc4:	071a      	lsls	r2, r3, #28
 800ddc6:	d52f      	bpl.n	800de28 <__swbuf_r+0x84>
 800ddc8:	6923      	ldr	r3, [r4, #16]
 800ddca:	b36b      	cbz	r3, 800de28 <__swbuf_r+0x84>
 800ddcc:	6923      	ldr	r3, [r4, #16]
 800ddce:	6820      	ldr	r0, [r4, #0]
 800ddd0:	b2f6      	uxtb	r6, r6
 800ddd2:	1ac0      	subs	r0, r0, r3
 800ddd4:	6963      	ldr	r3, [r4, #20]
 800ddd6:	4637      	mov	r7, r6
 800ddd8:	4283      	cmp	r3, r0
 800ddda:	dc04      	bgt.n	800dde6 <__swbuf_r+0x42>
 800dddc:	4621      	mov	r1, r4
 800ddde:	4628      	mov	r0, r5
 800dde0:	f000 f958 	bl	800e094 <_fflush_r>
 800dde4:	bb30      	cbnz	r0, 800de34 <__swbuf_r+0x90>
 800dde6:	68a3      	ldr	r3, [r4, #8]
 800dde8:	3001      	adds	r0, #1
 800ddea:	3b01      	subs	r3, #1
 800ddec:	60a3      	str	r3, [r4, #8]
 800ddee:	6823      	ldr	r3, [r4, #0]
 800ddf0:	1c5a      	adds	r2, r3, #1
 800ddf2:	6022      	str	r2, [r4, #0]
 800ddf4:	701e      	strb	r6, [r3, #0]
 800ddf6:	6963      	ldr	r3, [r4, #20]
 800ddf8:	4283      	cmp	r3, r0
 800ddfa:	d004      	beq.n	800de06 <__swbuf_r+0x62>
 800ddfc:	89a3      	ldrh	r3, [r4, #12]
 800ddfe:	07db      	lsls	r3, r3, #31
 800de00:	d506      	bpl.n	800de10 <__swbuf_r+0x6c>
 800de02:	2e0a      	cmp	r6, #10
 800de04:	d104      	bne.n	800de10 <__swbuf_r+0x6c>
 800de06:	4621      	mov	r1, r4
 800de08:	4628      	mov	r0, r5
 800de0a:	f000 f943 	bl	800e094 <_fflush_r>
 800de0e:	b988      	cbnz	r0, 800de34 <__swbuf_r+0x90>
 800de10:	4638      	mov	r0, r7
 800de12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800de14:	4b0a      	ldr	r3, [pc, #40]	; (800de40 <__swbuf_r+0x9c>)
 800de16:	429c      	cmp	r4, r3
 800de18:	d101      	bne.n	800de1e <__swbuf_r+0x7a>
 800de1a:	68ac      	ldr	r4, [r5, #8]
 800de1c:	e7cf      	b.n	800ddbe <__swbuf_r+0x1a>
 800de1e:	4b09      	ldr	r3, [pc, #36]	; (800de44 <__swbuf_r+0xa0>)
 800de20:	429c      	cmp	r4, r3
 800de22:	bf08      	it	eq
 800de24:	68ec      	ldreq	r4, [r5, #12]
 800de26:	e7ca      	b.n	800ddbe <__swbuf_r+0x1a>
 800de28:	4621      	mov	r1, r4
 800de2a:	4628      	mov	r0, r5
 800de2c:	f000 f81e 	bl	800de6c <__swsetup_r>
 800de30:	2800      	cmp	r0, #0
 800de32:	d0cb      	beq.n	800ddcc <__swbuf_r+0x28>
 800de34:	f04f 37ff 	mov.w	r7, #4294967295
 800de38:	e7ea      	b.n	800de10 <__swbuf_r+0x6c>
 800de3a:	bf00      	nop
 800de3c:	0800f94c 	.word	0x0800f94c
 800de40:	0800f96c 	.word	0x0800f96c
 800de44:	0800f92c 	.word	0x0800f92c

0800de48 <_write_r>:
 800de48:	b538      	push	{r3, r4, r5, lr}
 800de4a:	4604      	mov	r4, r0
 800de4c:	4608      	mov	r0, r1
 800de4e:	4611      	mov	r1, r2
 800de50:	2200      	movs	r2, #0
 800de52:	4d05      	ldr	r5, [pc, #20]	; (800de68 <_write_r+0x20>)
 800de54:	602a      	str	r2, [r5, #0]
 800de56:	461a      	mov	r2, r3
 800de58:	f7f8 fbf6 	bl	8006648 <_write>
 800de5c:	1c43      	adds	r3, r0, #1
 800de5e:	d102      	bne.n	800de66 <_write_r+0x1e>
 800de60:	682b      	ldr	r3, [r5, #0]
 800de62:	b103      	cbz	r3, 800de66 <_write_r+0x1e>
 800de64:	6023      	str	r3, [r4, #0]
 800de66:	bd38      	pop	{r3, r4, r5, pc}
 800de68:	2000276c 	.word	0x2000276c

0800de6c <__swsetup_r>:
 800de6c:	4b32      	ldr	r3, [pc, #200]	; (800df38 <__swsetup_r+0xcc>)
 800de6e:	b570      	push	{r4, r5, r6, lr}
 800de70:	681d      	ldr	r5, [r3, #0]
 800de72:	4606      	mov	r6, r0
 800de74:	460c      	mov	r4, r1
 800de76:	b125      	cbz	r5, 800de82 <__swsetup_r+0x16>
 800de78:	69ab      	ldr	r3, [r5, #24]
 800de7a:	b913      	cbnz	r3, 800de82 <__swsetup_r+0x16>
 800de7c:	4628      	mov	r0, r5
 800de7e:	f000 f99d 	bl	800e1bc <__sinit>
 800de82:	4b2e      	ldr	r3, [pc, #184]	; (800df3c <__swsetup_r+0xd0>)
 800de84:	429c      	cmp	r4, r3
 800de86:	d10f      	bne.n	800dea8 <__swsetup_r+0x3c>
 800de88:	686c      	ldr	r4, [r5, #4]
 800de8a:	89a3      	ldrh	r3, [r4, #12]
 800de8c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800de90:	0719      	lsls	r1, r3, #28
 800de92:	d42c      	bmi.n	800deee <__swsetup_r+0x82>
 800de94:	06dd      	lsls	r5, r3, #27
 800de96:	d411      	bmi.n	800debc <__swsetup_r+0x50>
 800de98:	2309      	movs	r3, #9
 800de9a:	6033      	str	r3, [r6, #0]
 800de9c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800dea0:	f04f 30ff 	mov.w	r0, #4294967295
 800dea4:	81a3      	strh	r3, [r4, #12]
 800dea6:	e03e      	b.n	800df26 <__swsetup_r+0xba>
 800dea8:	4b25      	ldr	r3, [pc, #148]	; (800df40 <__swsetup_r+0xd4>)
 800deaa:	429c      	cmp	r4, r3
 800deac:	d101      	bne.n	800deb2 <__swsetup_r+0x46>
 800deae:	68ac      	ldr	r4, [r5, #8]
 800deb0:	e7eb      	b.n	800de8a <__swsetup_r+0x1e>
 800deb2:	4b24      	ldr	r3, [pc, #144]	; (800df44 <__swsetup_r+0xd8>)
 800deb4:	429c      	cmp	r4, r3
 800deb6:	bf08      	it	eq
 800deb8:	68ec      	ldreq	r4, [r5, #12]
 800deba:	e7e6      	b.n	800de8a <__swsetup_r+0x1e>
 800debc:	0758      	lsls	r0, r3, #29
 800debe:	d512      	bpl.n	800dee6 <__swsetup_r+0x7a>
 800dec0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dec2:	b141      	cbz	r1, 800ded6 <__swsetup_r+0x6a>
 800dec4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dec8:	4299      	cmp	r1, r3
 800deca:	d002      	beq.n	800ded2 <__swsetup_r+0x66>
 800decc:	4630      	mov	r0, r6
 800dece:	f7fe fc85 	bl	800c7dc <_free_r>
 800ded2:	2300      	movs	r3, #0
 800ded4:	6363      	str	r3, [r4, #52]	; 0x34
 800ded6:	89a3      	ldrh	r3, [r4, #12]
 800ded8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800dedc:	81a3      	strh	r3, [r4, #12]
 800dede:	2300      	movs	r3, #0
 800dee0:	6063      	str	r3, [r4, #4]
 800dee2:	6923      	ldr	r3, [r4, #16]
 800dee4:	6023      	str	r3, [r4, #0]
 800dee6:	89a3      	ldrh	r3, [r4, #12]
 800dee8:	f043 0308 	orr.w	r3, r3, #8
 800deec:	81a3      	strh	r3, [r4, #12]
 800deee:	6923      	ldr	r3, [r4, #16]
 800def0:	b94b      	cbnz	r3, 800df06 <__swsetup_r+0x9a>
 800def2:	89a3      	ldrh	r3, [r4, #12]
 800def4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800def8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800defc:	d003      	beq.n	800df06 <__swsetup_r+0x9a>
 800defe:	4621      	mov	r1, r4
 800df00:	4630      	mov	r0, r6
 800df02:	f000 fa31 	bl	800e368 <__smakebuf_r>
 800df06:	89a0      	ldrh	r0, [r4, #12]
 800df08:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800df0c:	f010 0301 	ands.w	r3, r0, #1
 800df10:	d00a      	beq.n	800df28 <__swsetup_r+0xbc>
 800df12:	2300      	movs	r3, #0
 800df14:	60a3      	str	r3, [r4, #8]
 800df16:	6963      	ldr	r3, [r4, #20]
 800df18:	425b      	negs	r3, r3
 800df1a:	61a3      	str	r3, [r4, #24]
 800df1c:	6923      	ldr	r3, [r4, #16]
 800df1e:	b943      	cbnz	r3, 800df32 <__swsetup_r+0xc6>
 800df20:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800df24:	d1ba      	bne.n	800de9c <__swsetup_r+0x30>
 800df26:	bd70      	pop	{r4, r5, r6, pc}
 800df28:	0781      	lsls	r1, r0, #30
 800df2a:	bf58      	it	pl
 800df2c:	6963      	ldrpl	r3, [r4, #20]
 800df2e:	60a3      	str	r3, [r4, #8]
 800df30:	e7f4      	b.n	800df1c <__swsetup_r+0xb0>
 800df32:	2000      	movs	r0, #0
 800df34:	e7f7      	b.n	800df26 <__swsetup_r+0xba>
 800df36:	bf00      	nop
 800df38:	200004e0 	.word	0x200004e0
 800df3c:	0800f94c 	.word	0x0800f94c
 800df40:	0800f96c 	.word	0x0800f96c
 800df44:	0800f92c 	.word	0x0800f92c

0800df48 <abort>:
 800df48:	2006      	movs	r0, #6
 800df4a:	b508      	push	{r3, lr}
 800df4c:	f000 fe3c 	bl	800ebc8 <raise>
 800df50:	2001      	movs	r0, #1
 800df52:	f7f8 fb52 	bl	80065fa <_exit>
	...

0800df58 <_close_r>:
 800df58:	b538      	push	{r3, r4, r5, lr}
 800df5a:	2300      	movs	r3, #0
 800df5c:	4d05      	ldr	r5, [pc, #20]	; (800df74 <_close_r+0x1c>)
 800df5e:	4604      	mov	r4, r0
 800df60:	4608      	mov	r0, r1
 800df62:	602b      	str	r3, [r5, #0]
 800df64:	f7f8 fb8c 	bl	8006680 <_close>
 800df68:	1c43      	adds	r3, r0, #1
 800df6a:	d102      	bne.n	800df72 <_close_r+0x1a>
 800df6c:	682b      	ldr	r3, [r5, #0]
 800df6e:	b103      	cbz	r3, 800df72 <_close_r+0x1a>
 800df70:	6023      	str	r3, [r4, #0]
 800df72:	bd38      	pop	{r3, r4, r5, pc}
 800df74:	2000276c 	.word	0x2000276c

0800df78 <__env_lock>:
 800df78:	4801      	ldr	r0, [pc, #4]	; (800df80 <__env_lock+0x8>)
 800df7a:	f7ff b9b7 	b.w	800d2ec <__retarget_lock_acquire_recursive>
 800df7e:	bf00      	nop
 800df80:	20002764 	.word	0x20002764

0800df84 <__env_unlock>:
 800df84:	4801      	ldr	r0, [pc, #4]	; (800df8c <__env_unlock+0x8>)
 800df86:	f7ff b9b3 	b.w	800d2f0 <__retarget_lock_release_recursive>
 800df8a:	bf00      	nop
 800df8c:	20002764 	.word	0x20002764

0800df90 <__sflush_r>:
 800df90:	898a      	ldrh	r2, [r1, #12]
 800df92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df94:	4605      	mov	r5, r0
 800df96:	0710      	lsls	r0, r2, #28
 800df98:	460c      	mov	r4, r1
 800df9a:	d457      	bmi.n	800e04c <__sflush_r+0xbc>
 800df9c:	684b      	ldr	r3, [r1, #4]
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	dc04      	bgt.n	800dfac <__sflush_r+0x1c>
 800dfa2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	dc01      	bgt.n	800dfac <__sflush_r+0x1c>
 800dfa8:	2000      	movs	r0, #0
 800dfaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dfac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dfae:	2e00      	cmp	r6, #0
 800dfb0:	d0fa      	beq.n	800dfa8 <__sflush_r+0x18>
 800dfb2:	2300      	movs	r3, #0
 800dfb4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800dfb8:	682f      	ldr	r7, [r5, #0]
 800dfba:	602b      	str	r3, [r5, #0]
 800dfbc:	d032      	beq.n	800e024 <__sflush_r+0x94>
 800dfbe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800dfc0:	89a3      	ldrh	r3, [r4, #12]
 800dfc2:	075a      	lsls	r2, r3, #29
 800dfc4:	d505      	bpl.n	800dfd2 <__sflush_r+0x42>
 800dfc6:	6863      	ldr	r3, [r4, #4]
 800dfc8:	1ac0      	subs	r0, r0, r3
 800dfca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800dfcc:	b10b      	cbz	r3, 800dfd2 <__sflush_r+0x42>
 800dfce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800dfd0:	1ac0      	subs	r0, r0, r3
 800dfd2:	2300      	movs	r3, #0
 800dfd4:	4602      	mov	r2, r0
 800dfd6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dfd8:	4628      	mov	r0, r5
 800dfda:	6a21      	ldr	r1, [r4, #32]
 800dfdc:	47b0      	blx	r6
 800dfde:	1c43      	adds	r3, r0, #1
 800dfe0:	89a3      	ldrh	r3, [r4, #12]
 800dfe2:	d106      	bne.n	800dff2 <__sflush_r+0x62>
 800dfe4:	6829      	ldr	r1, [r5, #0]
 800dfe6:	291d      	cmp	r1, #29
 800dfe8:	d82c      	bhi.n	800e044 <__sflush_r+0xb4>
 800dfea:	4a29      	ldr	r2, [pc, #164]	; (800e090 <__sflush_r+0x100>)
 800dfec:	40ca      	lsrs	r2, r1
 800dfee:	07d6      	lsls	r6, r2, #31
 800dff0:	d528      	bpl.n	800e044 <__sflush_r+0xb4>
 800dff2:	2200      	movs	r2, #0
 800dff4:	6062      	str	r2, [r4, #4]
 800dff6:	6922      	ldr	r2, [r4, #16]
 800dff8:	04d9      	lsls	r1, r3, #19
 800dffa:	6022      	str	r2, [r4, #0]
 800dffc:	d504      	bpl.n	800e008 <__sflush_r+0x78>
 800dffe:	1c42      	adds	r2, r0, #1
 800e000:	d101      	bne.n	800e006 <__sflush_r+0x76>
 800e002:	682b      	ldr	r3, [r5, #0]
 800e004:	b903      	cbnz	r3, 800e008 <__sflush_r+0x78>
 800e006:	6560      	str	r0, [r4, #84]	; 0x54
 800e008:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e00a:	602f      	str	r7, [r5, #0]
 800e00c:	2900      	cmp	r1, #0
 800e00e:	d0cb      	beq.n	800dfa8 <__sflush_r+0x18>
 800e010:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e014:	4299      	cmp	r1, r3
 800e016:	d002      	beq.n	800e01e <__sflush_r+0x8e>
 800e018:	4628      	mov	r0, r5
 800e01a:	f7fe fbdf 	bl	800c7dc <_free_r>
 800e01e:	2000      	movs	r0, #0
 800e020:	6360      	str	r0, [r4, #52]	; 0x34
 800e022:	e7c2      	b.n	800dfaa <__sflush_r+0x1a>
 800e024:	6a21      	ldr	r1, [r4, #32]
 800e026:	2301      	movs	r3, #1
 800e028:	4628      	mov	r0, r5
 800e02a:	47b0      	blx	r6
 800e02c:	1c41      	adds	r1, r0, #1
 800e02e:	d1c7      	bne.n	800dfc0 <__sflush_r+0x30>
 800e030:	682b      	ldr	r3, [r5, #0]
 800e032:	2b00      	cmp	r3, #0
 800e034:	d0c4      	beq.n	800dfc0 <__sflush_r+0x30>
 800e036:	2b1d      	cmp	r3, #29
 800e038:	d001      	beq.n	800e03e <__sflush_r+0xae>
 800e03a:	2b16      	cmp	r3, #22
 800e03c:	d101      	bne.n	800e042 <__sflush_r+0xb2>
 800e03e:	602f      	str	r7, [r5, #0]
 800e040:	e7b2      	b.n	800dfa8 <__sflush_r+0x18>
 800e042:	89a3      	ldrh	r3, [r4, #12]
 800e044:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e048:	81a3      	strh	r3, [r4, #12]
 800e04a:	e7ae      	b.n	800dfaa <__sflush_r+0x1a>
 800e04c:	690f      	ldr	r7, [r1, #16]
 800e04e:	2f00      	cmp	r7, #0
 800e050:	d0aa      	beq.n	800dfa8 <__sflush_r+0x18>
 800e052:	0793      	lsls	r3, r2, #30
 800e054:	bf18      	it	ne
 800e056:	2300      	movne	r3, #0
 800e058:	680e      	ldr	r6, [r1, #0]
 800e05a:	bf08      	it	eq
 800e05c:	694b      	ldreq	r3, [r1, #20]
 800e05e:	1bf6      	subs	r6, r6, r7
 800e060:	600f      	str	r7, [r1, #0]
 800e062:	608b      	str	r3, [r1, #8]
 800e064:	2e00      	cmp	r6, #0
 800e066:	dd9f      	ble.n	800dfa8 <__sflush_r+0x18>
 800e068:	4633      	mov	r3, r6
 800e06a:	463a      	mov	r2, r7
 800e06c:	4628      	mov	r0, r5
 800e06e:	6a21      	ldr	r1, [r4, #32]
 800e070:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800e074:	47e0      	blx	ip
 800e076:	2800      	cmp	r0, #0
 800e078:	dc06      	bgt.n	800e088 <__sflush_r+0xf8>
 800e07a:	89a3      	ldrh	r3, [r4, #12]
 800e07c:	f04f 30ff 	mov.w	r0, #4294967295
 800e080:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e084:	81a3      	strh	r3, [r4, #12]
 800e086:	e790      	b.n	800dfaa <__sflush_r+0x1a>
 800e088:	4407      	add	r7, r0
 800e08a:	1a36      	subs	r6, r6, r0
 800e08c:	e7ea      	b.n	800e064 <__sflush_r+0xd4>
 800e08e:	bf00      	nop
 800e090:	20400001 	.word	0x20400001

0800e094 <_fflush_r>:
 800e094:	b538      	push	{r3, r4, r5, lr}
 800e096:	690b      	ldr	r3, [r1, #16]
 800e098:	4605      	mov	r5, r0
 800e09a:	460c      	mov	r4, r1
 800e09c:	b913      	cbnz	r3, 800e0a4 <_fflush_r+0x10>
 800e09e:	2500      	movs	r5, #0
 800e0a0:	4628      	mov	r0, r5
 800e0a2:	bd38      	pop	{r3, r4, r5, pc}
 800e0a4:	b118      	cbz	r0, 800e0ae <_fflush_r+0x1a>
 800e0a6:	6983      	ldr	r3, [r0, #24]
 800e0a8:	b90b      	cbnz	r3, 800e0ae <_fflush_r+0x1a>
 800e0aa:	f000 f887 	bl	800e1bc <__sinit>
 800e0ae:	4b14      	ldr	r3, [pc, #80]	; (800e100 <_fflush_r+0x6c>)
 800e0b0:	429c      	cmp	r4, r3
 800e0b2:	d11b      	bne.n	800e0ec <_fflush_r+0x58>
 800e0b4:	686c      	ldr	r4, [r5, #4]
 800e0b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d0ef      	beq.n	800e09e <_fflush_r+0xa>
 800e0be:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e0c0:	07d0      	lsls	r0, r2, #31
 800e0c2:	d404      	bmi.n	800e0ce <_fflush_r+0x3a>
 800e0c4:	0599      	lsls	r1, r3, #22
 800e0c6:	d402      	bmi.n	800e0ce <_fflush_r+0x3a>
 800e0c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e0ca:	f7ff f90f 	bl	800d2ec <__retarget_lock_acquire_recursive>
 800e0ce:	4628      	mov	r0, r5
 800e0d0:	4621      	mov	r1, r4
 800e0d2:	f7ff ff5d 	bl	800df90 <__sflush_r>
 800e0d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e0d8:	4605      	mov	r5, r0
 800e0da:	07da      	lsls	r2, r3, #31
 800e0dc:	d4e0      	bmi.n	800e0a0 <_fflush_r+0xc>
 800e0de:	89a3      	ldrh	r3, [r4, #12]
 800e0e0:	059b      	lsls	r3, r3, #22
 800e0e2:	d4dd      	bmi.n	800e0a0 <_fflush_r+0xc>
 800e0e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e0e6:	f7ff f903 	bl	800d2f0 <__retarget_lock_release_recursive>
 800e0ea:	e7d9      	b.n	800e0a0 <_fflush_r+0xc>
 800e0ec:	4b05      	ldr	r3, [pc, #20]	; (800e104 <_fflush_r+0x70>)
 800e0ee:	429c      	cmp	r4, r3
 800e0f0:	d101      	bne.n	800e0f6 <_fflush_r+0x62>
 800e0f2:	68ac      	ldr	r4, [r5, #8]
 800e0f4:	e7df      	b.n	800e0b6 <_fflush_r+0x22>
 800e0f6:	4b04      	ldr	r3, [pc, #16]	; (800e108 <_fflush_r+0x74>)
 800e0f8:	429c      	cmp	r4, r3
 800e0fa:	bf08      	it	eq
 800e0fc:	68ec      	ldreq	r4, [r5, #12]
 800e0fe:	e7da      	b.n	800e0b6 <_fflush_r+0x22>
 800e100:	0800f94c 	.word	0x0800f94c
 800e104:	0800f96c 	.word	0x0800f96c
 800e108:	0800f92c 	.word	0x0800f92c

0800e10c <std>:
 800e10c:	2300      	movs	r3, #0
 800e10e:	b510      	push	{r4, lr}
 800e110:	4604      	mov	r4, r0
 800e112:	e9c0 3300 	strd	r3, r3, [r0]
 800e116:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e11a:	6083      	str	r3, [r0, #8]
 800e11c:	8181      	strh	r1, [r0, #12]
 800e11e:	6643      	str	r3, [r0, #100]	; 0x64
 800e120:	81c2      	strh	r2, [r0, #14]
 800e122:	6183      	str	r3, [r0, #24]
 800e124:	4619      	mov	r1, r3
 800e126:	2208      	movs	r2, #8
 800e128:	305c      	adds	r0, #92	; 0x5c
 800e12a:	f7fe f8dd 	bl	800c2e8 <memset>
 800e12e:	4b05      	ldr	r3, [pc, #20]	; (800e144 <std+0x38>)
 800e130:	6224      	str	r4, [r4, #32]
 800e132:	6263      	str	r3, [r4, #36]	; 0x24
 800e134:	4b04      	ldr	r3, [pc, #16]	; (800e148 <std+0x3c>)
 800e136:	62a3      	str	r3, [r4, #40]	; 0x28
 800e138:	4b04      	ldr	r3, [pc, #16]	; (800e14c <std+0x40>)
 800e13a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e13c:	4b04      	ldr	r3, [pc, #16]	; (800e150 <std+0x44>)
 800e13e:	6323      	str	r3, [r4, #48]	; 0x30
 800e140:	bd10      	pop	{r4, pc}
 800e142:	bf00      	nop
 800e144:	0800dbf5 	.word	0x0800dbf5
 800e148:	0800dc1b 	.word	0x0800dc1b
 800e14c:	0800dc53 	.word	0x0800dc53
 800e150:	0800dc77 	.word	0x0800dc77

0800e154 <_cleanup_r>:
 800e154:	4901      	ldr	r1, [pc, #4]	; (800e15c <_cleanup_r+0x8>)
 800e156:	f000 b8af 	b.w	800e2b8 <_fwalk_reent>
 800e15a:	bf00      	nop
 800e15c:	0800e095 	.word	0x0800e095

0800e160 <__sfmoreglue>:
 800e160:	2268      	movs	r2, #104	; 0x68
 800e162:	b570      	push	{r4, r5, r6, lr}
 800e164:	1e4d      	subs	r5, r1, #1
 800e166:	4355      	muls	r5, r2
 800e168:	460e      	mov	r6, r1
 800e16a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e16e:	f7fe fb9d 	bl	800c8ac <_malloc_r>
 800e172:	4604      	mov	r4, r0
 800e174:	b140      	cbz	r0, 800e188 <__sfmoreglue+0x28>
 800e176:	2100      	movs	r1, #0
 800e178:	e9c0 1600 	strd	r1, r6, [r0]
 800e17c:	300c      	adds	r0, #12
 800e17e:	60a0      	str	r0, [r4, #8]
 800e180:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e184:	f7fe f8b0 	bl	800c2e8 <memset>
 800e188:	4620      	mov	r0, r4
 800e18a:	bd70      	pop	{r4, r5, r6, pc}

0800e18c <__sfp_lock_acquire>:
 800e18c:	4801      	ldr	r0, [pc, #4]	; (800e194 <__sfp_lock_acquire+0x8>)
 800e18e:	f7ff b8ad 	b.w	800d2ec <__retarget_lock_acquire_recursive>
 800e192:	bf00      	nop
 800e194:	20002766 	.word	0x20002766

0800e198 <__sfp_lock_release>:
 800e198:	4801      	ldr	r0, [pc, #4]	; (800e1a0 <__sfp_lock_release+0x8>)
 800e19a:	f7ff b8a9 	b.w	800d2f0 <__retarget_lock_release_recursive>
 800e19e:	bf00      	nop
 800e1a0:	20002766 	.word	0x20002766

0800e1a4 <__sinit_lock_acquire>:
 800e1a4:	4801      	ldr	r0, [pc, #4]	; (800e1ac <__sinit_lock_acquire+0x8>)
 800e1a6:	f7ff b8a1 	b.w	800d2ec <__retarget_lock_acquire_recursive>
 800e1aa:	bf00      	nop
 800e1ac:	20002767 	.word	0x20002767

0800e1b0 <__sinit_lock_release>:
 800e1b0:	4801      	ldr	r0, [pc, #4]	; (800e1b8 <__sinit_lock_release+0x8>)
 800e1b2:	f7ff b89d 	b.w	800d2f0 <__retarget_lock_release_recursive>
 800e1b6:	bf00      	nop
 800e1b8:	20002767 	.word	0x20002767

0800e1bc <__sinit>:
 800e1bc:	b510      	push	{r4, lr}
 800e1be:	4604      	mov	r4, r0
 800e1c0:	f7ff fff0 	bl	800e1a4 <__sinit_lock_acquire>
 800e1c4:	69a3      	ldr	r3, [r4, #24]
 800e1c6:	b11b      	cbz	r3, 800e1d0 <__sinit+0x14>
 800e1c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e1cc:	f7ff bff0 	b.w	800e1b0 <__sinit_lock_release>
 800e1d0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e1d4:	6523      	str	r3, [r4, #80]	; 0x50
 800e1d6:	4b13      	ldr	r3, [pc, #76]	; (800e224 <__sinit+0x68>)
 800e1d8:	4a13      	ldr	r2, [pc, #76]	; (800e228 <__sinit+0x6c>)
 800e1da:	681b      	ldr	r3, [r3, #0]
 800e1dc:	62a2      	str	r2, [r4, #40]	; 0x28
 800e1de:	42a3      	cmp	r3, r4
 800e1e0:	bf08      	it	eq
 800e1e2:	2301      	moveq	r3, #1
 800e1e4:	4620      	mov	r0, r4
 800e1e6:	bf08      	it	eq
 800e1e8:	61a3      	streq	r3, [r4, #24]
 800e1ea:	f000 f81f 	bl	800e22c <__sfp>
 800e1ee:	6060      	str	r0, [r4, #4]
 800e1f0:	4620      	mov	r0, r4
 800e1f2:	f000 f81b 	bl	800e22c <__sfp>
 800e1f6:	60a0      	str	r0, [r4, #8]
 800e1f8:	4620      	mov	r0, r4
 800e1fa:	f000 f817 	bl	800e22c <__sfp>
 800e1fe:	2200      	movs	r2, #0
 800e200:	2104      	movs	r1, #4
 800e202:	60e0      	str	r0, [r4, #12]
 800e204:	6860      	ldr	r0, [r4, #4]
 800e206:	f7ff ff81 	bl	800e10c <std>
 800e20a:	2201      	movs	r2, #1
 800e20c:	2109      	movs	r1, #9
 800e20e:	68a0      	ldr	r0, [r4, #8]
 800e210:	f7ff ff7c 	bl	800e10c <std>
 800e214:	2202      	movs	r2, #2
 800e216:	2112      	movs	r1, #18
 800e218:	68e0      	ldr	r0, [r4, #12]
 800e21a:	f7ff ff77 	bl	800e10c <std>
 800e21e:	2301      	movs	r3, #1
 800e220:	61a3      	str	r3, [r4, #24]
 800e222:	e7d1      	b.n	800e1c8 <__sinit+0xc>
 800e224:	0800f5e8 	.word	0x0800f5e8
 800e228:	0800e155 	.word	0x0800e155

0800e22c <__sfp>:
 800e22c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e22e:	4607      	mov	r7, r0
 800e230:	f7ff ffac 	bl	800e18c <__sfp_lock_acquire>
 800e234:	4b1e      	ldr	r3, [pc, #120]	; (800e2b0 <__sfp+0x84>)
 800e236:	681e      	ldr	r6, [r3, #0]
 800e238:	69b3      	ldr	r3, [r6, #24]
 800e23a:	b913      	cbnz	r3, 800e242 <__sfp+0x16>
 800e23c:	4630      	mov	r0, r6
 800e23e:	f7ff ffbd 	bl	800e1bc <__sinit>
 800e242:	3648      	adds	r6, #72	; 0x48
 800e244:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e248:	3b01      	subs	r3, #1
 800e24a:	d503      	bpl.n	800e254 <__sfp+0x28>
 800e24c:	6833      	ldr	r3, [r6, #0]
 800e24e:	b30b      	cbz	r3, 800e294 <__sfp+0x68>
 800e250:	6836      	ldr	r6, [r6, #0]
 800e252:	e7f7      	b.n	800e244 <__sfp+0x18>
 800e254:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e258:	b9d5      	cbnz	r5, 800e290 <__sfp+0x64>
 800e25a:	4b16      	ldr	r3, [pc, #88]	; (800e2b4 <__sfp+0x88>)
 800e25c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e260:	60e3      	str	r3, [r4, #12]
 800e262:	6665      	str	r5, [r4, #100]	; 0x64
 800e264:	f7ff f840 	bl	800d2e8 <__retarget_lock_init_recursive>
 800e268:	f7ff ff96 	bl	800e198 <__sfp_lock_release>
 800e26c:	2208      	movs	r2, #8
 800e26e:	4629      	mov	r1, r5
 800e270:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e274:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e278:	6025      	str	r5, [r4, #0]
 800e27a:	61a5      	str	r5, [r4, #24]
 800e27c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e280:	f7fe f832 	bl	800c2e8 <memset>
 800e284:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e288:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e28c:	4620      	mov	r0, r4
 800e28e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e290:	3468      	adds	r4, #104	; 0x68
 800e292:	e7d9      	b.n	800e248 <__sfp+0x1c>
 800e294:	2104      	movs	r1, #4
 800e296:	4638      	mov	r0, r7
 800e298:	f7ff ff62 	bl	800e160 <__sfmoreglue>
 800e29c:	4604      	mov	r4, r0
 800e29e:	6030      	str	r0, [r6, #0]
 800e2a0:	2800      	cmp	r0, #0
 800e2a2:	d1d5      	bne.n	800e250 <__sfp+0x24>
 800e2a4:	f7ff ff78 	bl	800e198 <__sfp_lock_release>
 800e2a8:	230c      	movs	r3, #12
 800e2aa:	603b      	str	r3, [r7, #0]
 800e2ac:	e7ee      	b.n	800e28c <__sfp+0x60>
 800e2ae:	bf00      	nop
 800e2b0:	0800f5e8 	.word	0x0800f5e8
 800e2b4:	ffff0001 	.word	0xffff0001

0800e2b8 <_fwalk_reent>:
 800e2b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e2bc:	4606      	mov	r6, r0
 800e2be:	4688      	mov	r8, r1
 800e2c0:	2700      	movs	r7, #0
 800e2c2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e2c6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e2ca:	f1b9 0901 	subs.w	r9, r9, #1
 800e2ce:	d505      	bpl.n	800e2dc <_fwalk_reent+0x24>
 800e2d0:	6824      	ldr	r4, [r4, #0]
 800e2d2:	2c00      	cmp	r4, #0
 800e2d4:	d1f7      	bne.n	800e2c6 <_fwalk_reent+0xe>
 800e2d6:	4638      	mov	r0, r7
 800e2d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e2dc:	89ab      	ldrh	r3, [r5, #12]
 800e2de:	2b01      	cmp	r3, #1
 800e2e0:	d907      	bls.n	800e2f2 <_fwalk_reent+0x3a>
 800e2e2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e2e6:	3301      	adds	r3, #1
 800e2e8:	d003      	beq.n	800e2f2 <_fwalk_reent+0x3a>
 800e2ea:	4629      	mov	r1, r5
 800e2ec:	4630      	mov	r0, r6
 800e2ee:	47c0      	blx	r8
 800e2f0:	4307      	orrs	r7, r0
 800e2f2:	3568      	adds	r5, #104	; 0x68
 800e2f4:	e7e9      	b.n	800e2ca <_fwalk_reent+0x12>
	...

0800e2f8 <_lseek_r>:
 800e2f8:	b538      	push	{r3, r4, r5, lr}
 800e2fa:	4604      	mov	r4, r0
 800e2fc:	4608      	mov	r0, r1
 800e2fe:	4611      	mov	r1, r2
 800e300:	2200      	movs	r2, #0
 800e302:	4d05      	ldr	r5, [pc, #20]	; (800e318 <_lseek_r+0x20>)
 800e304:	602a      	str	r2, [r5, #0]
 800e306:	461a      	mov	r2, r3
 800e308:	f7f8 f9de 	bl	80066c8 <_lseek>
 800e30c:	1c43      	adds	r3, r0, #1
 800e30e:	d102      	bne.n	800e316 <_lseek_r+0x1e>
 800e310:	682b      	ldr	r3, [r5, #0]
 800e312:	b103      	cbz	r3, 800e316 <_lseek_r+0x1e>
 800e314:	6023      	str	r3, [r4, #0]
 800e316:	bd38      	pop	{r3, r4, r5, pc}
 800e318:	2000276c 	.word	0x2000276c

0800e31c <__swhatbuf_r>:
 800e31c:	b570      	push	{r4, r5, r6, lr}
 800e31e:	460e      	mov	r6, r1
 800e320:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e324:	4614      	mov	r4, r2
 800e326:	2900      	cmp	r1, #0
 800e328:	461d      	mov	r5, r3
 800e32a:	b096      	sub	sp, #88	; 0x58
 800e32c:	da08      	bge.n	800e340 <__swhatbuf_r+0x24>
 800e32e:	2200      	movs	r2, #0
 800e330:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800e334:	602a      	str	r2, [r5, #0]
 800e336:	061a      	lsls	r2, r3, #24
 800e338:	d410      	bmi.n	800e35c <__swhatbuf_r+0x40>
 800e33a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e33e:	e00e      	b.n	800e35e <__swhatbuf_r+0x42>
 800e340:	466a      	mov	r2, sp
 800e342:	f000 fc95 	bl	800ec70 <_fstat_r>
 800e346:	2800      	cmp	r0, #0
 800e348:	dbf1      	blt.n	800e32e <__swhatbuf_r+0x12>
 800e34a:	9a01      	ldr	r2, [sp, #4]
 800e34c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e350:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e354:	425a      	negs	r2, r3
 800e356:	415a      	adcs	r2, r3
 800e358:	602a      	str	r2, [r5, #0]
 800e35a:	e7ee      	b.n	800e33a <__swhatbuf_r+0x1e>
 800e35c:	2340      	movs	r3, #64	; 0x40
 800e35e:	2000      	movs	r0, #0
 800e360:	6023      	str	r3, [r4, #0]
 800e362:	b016      	add	sp, #88	; 0x58
 800e364:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e368 <__smakebuf_r>:
 800e368:	898b      	ldrh	r3, [r1, #12]
 800e36a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e36c:	079d      	lsls	r5, r3, #30
 800e36e:	4606      	mov	r6, r0
 800e370:	460c      	mov	r4, r1
 800e372:	d507      	bpl.n	800e384 <__smakebuf_r+0x1c>
 800e374:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e378:	6023      	str	r3, [r4, #0]
 800e37a:	6123      	str	r3, [r4, #16]
 800e37c:	2301      	movs	r3, #1
 800e37e:	6163      	str	r3, [r4, #20]
 800e380:	b002      	add	sp, #8
 800e382:	bd70      	pop	{r4, r5, r6, pc}
 800e384:	466a      	mov	r2, sp
 800e386:	ab01      	add	r3, sp, #4
 800e388:	f7ff ffc8 	bl	800e31c <__swhatbuf_r>
 800e38c:	9900      	ldr	r1, [sp, #0]
 800e38e:	4605      	mov	r5, r0
 800e390:	4630      	mov	r0, r6
 800e392:	f7fe fa8b 	bl	800c8ac <_malloc_r>
 800e396:	b948      	cbnz	r0, 800e3ac <__smakebuf_r+0x44>
 800e398:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e39c:	059a      	lsls	r2, r3, #22
 800e39e:	d4ef      	bmi.n	800e380 <__smakebuf_r+0x18>
 800e3a0:	f023 0303 	bic.w	r3, r3, #3
 800e3a4:	f043 0302 	orr.w	r3, r3, #2
 800e3a8:	81a3      	strh	r3, [r4, #12]
 800e3aa:	e7e3      	b.n	800e374 <__smakebuf_r+0xc>
 800e3ac:	4b0d      	ldr	r3, [pc, #52]	; (800e3e4 <__smakebuf_r+0x7c>)
 800e3ae:	62b3      	str	r3, [r6, #40]	; 0x28
 800e3b0:	89a3      	ldrh	r3, [r4, #12]
 800e3b2:	6020      	str	r0, [r4, #0]
 800e3b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e3b8:	81a3      	strh	r3, [r4, #12]
 800e3ba:	9b00      	ldr	r3, [sp, #0]
 800e3bc:	6120      	str	r0, [r4, #16]
 800e3be:	6163      	str	r3, [r4, #20]
 800e3c0:	9b01      	ldr	r3, [sp, #4]
 800e3c2:	b15b      	cbz	r3, 800e3dc <__smakebuf_r+0x74>
 800e3c4:	4630      	mov	r0, r6
 800e3c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e3ca:	f000 fc63 	bl	800ec94 <_isatty_r>
 800e3ce:	b128      	cbz	r0, 800e3dc <__smakebuf_r+0x74>
 800e3d0:	89a3      	ldrh	r3, [r4, #12]
 800e3d2:	f023 0303 	bic.w	r3, r3, #3
 800e3d6:	f043 0301 	orr.w	r3, r3, #1
 800e3da:	81a3      	strh	r3, [r4, #12]
 800e3dc:	89a0      	ldrh	r0, [r4, #12]
 800e3de:	4305      	orrs	r5, r0
 800e3e0:	81a5      	strh	r5, [r4, #12]
 800e3e2:	e7cd      	b.n	800e380 <__smakebuf_r+0x18>
 800e3e4:	0800e155 	.word	0x0800e155

0800e3e8 <memchr>:
 800e3e8:	4603      	mov	r3, r0
 800e3ea:	b510      	push	{r4, lr}
 800e3ec:	b2c9      	uxtb	r1, r1
 800e3ee:	4402      	add	r2, r0
 800e3f0:	4293      	cmp	r3, r2
 800e3f2:	4618      	mov	r0, r3
 800e3f4:	d101      	bne.n	800e3fa <memchr+0x12>
 800e3f6:	2000      	movs	r0, #0
 800e3f8:	e003      	b.n	800e402 <memchr+0x1a>
 800e3fa:	7804      	ldrb	r4, [r0, #0]
 800e3fc:	3301      	adds	r3, #1
 800e3fe:	428c      	cmp	r4, r1
 800e400:	d1f6      	bne.n	800e3f0 <memchr+0x8>
 800e402:	bd10      	pop	{r4, pc}

0800e404 <memmove>:
 800e404:	4288      	cmp	r0, r1
 800e406:	b510      	push	{r4, lr}
 800e408:	eb01 0402 	add.w	r4, r1, r2
 800e40c:	d902      	bls.n	800e414 <memmove+0x10>
 800e40e:	4284      	cmp	r4, r0
 800e410:	4623      	mov	r3, r4
 800e412:	d807      	bhi.n	800e424 <memmove+0x20>
 800e414:	1e43      	subs	r3, r0, #1
 800e416:	42a1      	cmp	r1, r4
 800e418:	d008      	beq.n	800e42c <memmove+0x28>
 800e41a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e41e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e422:	e7f8      	b.n	800e416 <memmove+0x12>
 800e424:	4601      	mov	r1, r0
 800e426:	4402      	add	r2, r0
 800e428:	428a      	cmp	r2, r1
 800e42a:	d100      	bne.n	800e42e <memmove+0x2a>
 800e42c:	bd10      	pop	{r4, pc}
 800e42e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e432:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e436:	e7f7      	b.n	800e428 <memmove+0x24>

0800e438 <_realloc_r>:
 800e438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e43c:	4680      	mov	r8, r0
 800e43e:	4614      	mov	r4, r2
 800e440:	460e      	mov	r6, r1
 800e442:	b921      	cbnz	r1, 800e44e <_realloc_r+0x16>
 800e444:	4611      	mov	r1, r2
 800e446:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e44a:	f7fe ba2f 	b.w	800c8ac <_malloc_r>
 800e44e:	b92a      	cbnz	r2, 800e45c <_realloc_r+0x24>
 800e450:	f7fe f9c4 	bl	800c7dc <_free_r>
 800e454:	4625      	mov	r5, r4
 800e456:	4628      	mov	r0, r5
 800e458:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e45c:	f000 fc2a 	bl	800ecb4 <_malloc_usable_size_r>
 800e460:	4284      	cmp	r4, r0
 800e462:	4607      	mov	r7, r0
 800e464:	d802      	bhi.n	800e46c <_realloc_r+0x34>
 800e466:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e46a:	d812      	bhi.n	800e492 <_realloc_r+0x5a>
 800e46c:	4621      	mov	r1, r4
 800e46e:	4640      	mov	r0, r8
 800e470:	f7fe fa1c 	bl	800c8ac <_malloc_r>
 800e474:	4605      	mov	r5, r0
 800e476:	2800      	cmp	r0, #0
 800e478:	d0ed      	beq.n	800e456 <_realloc_r+0x1e>
 800e47a:	42bc      	cmp	r4, r7
 800e47c:	4622      	mov	r2, r4
 800e47e:	4631      	mov	r1, r6
 800e480:	bf28      	it	cs
 800e482:	463a      	movcs	r2, r7
 800e484:	f7fd ff22 	bl	800c2cc <memcpy>
 800e488:	4631      	mov	r1, r6
 800e48a:	4640      	mov	r0, r8
 800e48c:	f7fe f9a6 	bl	800c7dc <_free_r>
 800e490:	e7e1      	b.n	800e456 <_realloc_r+0x1e>
 800e492:	4635      	mov	r5, r6
 800e494:	e7df      	b.n	800e456 <_realloc_r+0x1e>

0800e496 <_sungetc_r>:
 800e496:	b538      	push	{r3, r4, r5, lr}
 800e498:	1c4b      	adds	r3, r1, #1
 800e49a:	4614      	mov	r4, r2
 800e49c:	d103      	bne.n	800e4a6 <_sungetc_r+0x10>
 800e49e:	f04f 35ff 	mov.w	r5, #4294967295
 800e4a2:	4628      	mov	r0, r5
 800e4a4:	bd38      	pop	{r3, r4, r5, pc}
 800e4a6:	8993      	ldrh	r3, [r2, #12]
 800e4a8:	b2cd      	uxtb	r5, r1
 800e4aa:	f023 0320 	bic.w	r3, r3, #32
 800e4ae:	8193      	strh	r3, [r2, #12]
 800e4b0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e4b2:	6852      	ldr	r2, [r2, #4]
 800e4b4:	b18b      	cbz	r3, 800e4da <_sungetc_r+0x44>
 800e4b6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e4b8:	4293      	cmp	r3, r2
 800e4ba:	dd08      	ble.n	800e4ce <_sungetc_r+0x38>
 800e4bc:	6823      	ldr	r3, [r4, #0]
 800e4be:	1e5a      	subs	r2, r3, #1
 800e4c0:	6022      	str	r2, [r4, #0]
 800e4c2:	f803 5c01 	strb.w	r5, [r3, #-1]
 800e4c6:	6863      	ldr	r3, [r4, #4]
 800e4c8:	3301      	adds	r3, #1
 800e4ca:	6063      	str	r3, [r4, #4]
 800e4cc:	e7e9      	b.n	800e4a2 <_sungetc_r+0xc>
 800e4ce:	4621      	mov	r1, r4
 800e4d0:	f000 fb96 	bl	800ec00 <__submore>
 800e4d4:	2800      	cmp	r0, #0
 800e4d6:	d0f1      	beq.n	800e4bc <_sungetc_r+0x26>
 800e4d8:	e7e1      	b.n	800e49e <_sungetc_r+0x8>
 800e4da:	6921      	ldr	r1, [r4, #16]
 800e4dc:	6823      	ldr	r3, [r4, #0]
 800e4de:	b151      	cbz	r1, 800e4f6 <_sungetc_r+0x60>
 800e4e0:	4299      	cmp	r1, r3
 800e4e2:	d208      	bcs.n	800e4f6 <_sungetc_r+0x60>
 800e4e4:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800e4e8:	42a9      	cmp	r1, r5
 800e4ea:	d104      	bne.n	800e4f6 <_sungetc_r+0x60>
 800e4ec:	3b01      	subs	r3, #1
 800e4ee:	3201      	adds	r2, #1
 800e4f0:	6023      	str	r3, [r4, #0]
 800e4f2:	6062      	str	r2, [r4, #4]
 800e4f4:	e7d5      	b.n	800e4a2 <_sungetc_r+0xc>
 800e4f6:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800e4fa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e4fe:	6363      	str	r3, [r4, #52]	; 0x34
 800e500:	2303      	movs	r3, #3
 800e502:	63a3      	str	r3, [r4, #56]	; 0x38
 800e504:	4623      	mov	r3, r4
 800e506:	f803 5f46 	strb.w	r5, [r3, #70]!
 800e50a:	6023      	str	r3, [r4, #0]
 800e50c:	2301      	movs	r3, #1
 800e50e:	e7dc      	b.n	800e4ca <_sungetc_r+0x34>

0800e510 <__ssrefill_r>:
 800e510:	b510      	push	{r4, lr}
 800e512:	460c      	mov	r4, r1
 800e514:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800e516:	b169      	cbz	r1, 800e534 <__ssrefill_r+0x24>
 800e518:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e51c:	4299      	cmp	r1, r3
 800e51e:	d001      	beq.n	800e524 <__ssrefill_r+0x14>
 800e520:	f7fe f95c 	bl	800c7dc <_free_r>
 800e524:	2000      	movs	r0, #0
 800e526:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e528:	6360      	str	r0, [r4, #52]	; 0x34
 800e52a:	6063      	str	r3, [r4, #4]
 800e52c:	b113      	cbz	r3, 800e534 <__ssrefill_r+0x24>
 800e52e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e530:	6023      	str	r3, [r4, #0]
 800e532:	bd10      	pop	{r4, pc}
 800e534:	6923      	ldr	r3, [r4, #16]
 800e536:	f04f 30ff 	mov.w	r0, #4294967295
 800e53a:	6023      	str	r3, [r4, #0]
 800e53c:	2300      	movs	r3, #0
 800e53e:	6063      	str	r3, [r4, #4]
 800e540:	89a3      	ldrh	r3, [r4, #12]
 800e542:	f043 0320 	orr.w	r3, r3, #32
 800e546:	81a3      	strh	r3, [r4, #12]
 800e548:	e7f3      	b.n	800e532 <__ssrefill_r+0x22>
	...

0800e54c <__ssvfiscanf_r>:
 800e54c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e550:	460c      	mov	r4, r1
 800e552:	2100      	movs	r1, #0
 800e554:	4606      	mov	r6, r0
 800e556:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800e55a:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800e55e:	49a7      	ldr	r1, [pc, #668]	; (800e7fc <__ssvfiscanf_r+0x2b0>)
 800e560:	f10d 0804 	add.w	r8, sp, #4
 800e564:	91a0      	str	r1, [sp, #640]	; 0x280
 800e566:	49a6      	ldr	r1, [pc, #664]	; (800e800 <__ssvfiscanf_r+0x2b4>)
 800e568:	4fa6      	ldr	r7, [pc, #664]	; (800e804 <__ssvfiscanf_r+0x2b8>)
 800e56a:	f8df 929c 	ldr.w	r9, [pc, #668]	; 800e808 <__ssvfiscanf_r+0x2bc>
 800e56e:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800e572:	91a1      	str	r1, [sp, #644]	; 0x284
 800e574:	9300      	str	r3, [sp, #0]
 800e576:	7813      	ldrb	r3, [r2, #0]
 800e578:	2b00      	cmp	r3, #0
 800e57a:	f000 815c 	beq.w	800e836 <__ssvfiscanf_r+0x2ea>
 800e57e:	5dd9      	ldrb	r1, [r3, r7]
 800e580:	1c55      	adds	r5, r2, #1
 800e582:	f011 0108 	ands.w	r1, r1, #8
 800e586:	d019      	beq.n	800e5bc <__ssvfiscanf_r+0x70>
 800e588:	6863      	ldr	r3, [r4, #4]
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	dd0f      	ble.n	800e5ae <__ssvfiscanf_r+0x62>
 800e58e:	6823      	ldr	r3, [r4, #0]
 800e590:	781a      	ldrb	r2, [r3, #0]
 800e592:	5cba      	ldrb	r2, [r7, r2]
 800e594:	0712      	lsls	r2, r2, #28
 800e596:	d401      	bmi.n	800e59c <__ssvfiscanf_r+0x50>
 800e598:	462a      	mov	r2, r5
 800e59a:	e7ec      	b.n	800e576 <__ssvfiscanf_r+0x2a>
 800e59c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800e59e:	3301      	adds	r3, #1
 800e5a0:	3201      	adds	r2, #1
 800e5a2:	9245      	str	r2, [sp, #276]	; 0x114
 800e5a4:	6862      	ldr	r2, [r4, #4]
 800e5a6:	6023      	str	r3, [r4, #0]
 800e5a8:	3a01      	subs	r2, #1
 800e5aa:	6062      	str	r2, [r4, #4]
 800e5ac:	e7ec      	b.n	800e588 <__ssvfiscanf_r+0x3c>
 800e5ae:	4621      	mov	r1, r4
 800e5b0:	4630      	mov	r0, r6
 800e5b2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e5b4:	4798      	blx	r3
 800e5b6:	2800      	cmp	r0, #0
 800e5b8:	d0e9      	beq.n	800e58e <__ssvfiscanf_r+0x42>
 800e5ba:	e7ed      	b.n	800e598 <__ssvfiscanf_r+0x4c>
 800e5bc:	2b25      	cmp	r3, #37	; 0x25
 800e5be:	d012      	beq.n	800e5e6 <__ssvfiscanf_r+0x9a>
 800e5c0:	469a      	mov	sl, r3
 800e5c2:	6863      	ldr	r3, [r4, #4]
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	f340 8094 	ble.w	800e6f2 <__ssvfiscanf_r+0x1a6>
 800e5ca:	6822      	ldr	r2, [r4, #0]
 800e5cc:	7813      	ldrb	r3, [r2, #0]
 800e5ce:	4553      	cmp	r3, sl
 800e5d0:	f040 8131 	bne.w	800e836 <__ssvfiscanf_r+0x2ea>
 800e5d4:	6863      	ldr	r3, [r4, #4]
 800e5d6:	3201      	adds	r2, #1
 800e5d8:	3b01      	subs	r3, #1
 800e5da:	6063      	str	r3, [r4, #4]
 800e5dc:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800e5de:	6022      	str	r2, [r4, #0]
 800e5e0:	3301      	adds	r3, #1
 800e5e2:	9345      	str	r3, [sp, #276]	; 0x114
 800e5e4:	e7d8      	b.n	800e598 <__ssvfiscanf_r+0x4c>
 800e5e6:	9141      	str	r1, [sp, #260]	; 0x104
 800e5e8:	9143      	str	r1, [sp, #268]	; 0x10c
 800e5ea:	7853      	ldrb	r3, [r2, #1]
 800e5ec:	2b2a      	cmp	r3, #42	; 0x2a
 800e5ee:	bf04      	itt	eq
 800e5f0:	2310      	moveq	r3, #16
 800e5f2:	1c95      	addeq	r5, r2, #2
 800e5f4:	f04f 020a 	mov.w	r2, #10
 800e5f8:	bf08      	it	eq
 800e5fa:	9341      	streq	r3, [sp, #260]	; 0x104
 800e5fc:	46aa      	mov	sl, r5
 800e5fe:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800e602:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800e606:	2b09      	cmp	r3, #9
 800e608:	d91d      	bls.n	800e646 <__ssvfiscanf_r+0xfa>
 800e60a:	2203      	movs	r2, #3
 800e60c:	487e      	ldr	r0, [pc, #504]	; (800e808 <__ssvfiscanf_r+0x2bc>)
 800e60e:	f7ff feeb 	bl	800e3e8 <memchr>
 800e612:	b140      	cbz	r0, 800e626 <__ssvfiscanf_r+0xda>
 800e614:	2301      	movs	r3, #1
 800e616:	4655      	mov	r5, sl
 800e618:	eba0 0009 	sub.w	r0, r0, r9
 800e61c:	fa03 f000 	lsl.w	r0, r3, r0
 800e620:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e622:	4318      	orrs	r0, r3
 800e624:	9041      	str	r0, [sp, #260]	; 0x104
 800e626:	f815 3b01 	ldrb.w	r3, [r5], #1
 800e62a:	2b78      	cmp	r3, #120	; 0x78
 800e62c:	d806      	bhi.n	800e63c <__ssvfiscanf_r+0xf0>
 800e62e:	2b57      	cmp	r3, #87	; 0x57
 800e630:	d810      	bhi.n	800e654 <__ssvfiscanf_r+0x108>
 800e632:	2b25      	cmp	r3, #37	; 0x25
 800e634:	d0c4      	beq.n	800e5c0 <__ssvfiscanf_r+0x74>
 800e636:	d857      	bhi.n	800e6e8 <__ssvfiscanf_r+0x19c>
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d065      	beq.n	800e708 <__ssvfiscanf_r+0x1bc>
 800e63c:	2303      	movs	r3, #3
 800e63e:	9347      	str	r3, [sp, #284]	; 0x11c
 800e640:	230a      	movs	r3, #10
 800e642:	9342      	str	r3, [sp, #264]	; 0x108
 800e644:	e072      	b.n	800e72c <__ssvfiscanf_r+0x1e0>
 800e646:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800e648:	4655      	mov	r5, sl
 800e64a:	fb02 1103 	mla	r1, r2, r3, r1
 800e64e:	3930      	subs	r1, #48	; 0x30
 800e650:	9143      	str	r1, [sp, #268]	; 0x10c
 800e652:	e7d3      	b.n	800e5fc <__ssvfiscanf_r+0xb0>
 800e654:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800e658:	2a20      	cmp	r2, #32
 800e65a:	d8ef      	bhi.n	800e63c <__ssvfiscanf_r+0xf0>
 800e65c:	a101      	add	r1, pc, #4	; (adr r1, 800e664 <__ssvfiscanf_r+0x118>)
 800e65e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800e662:	bf00      	nop
 800e664:	0800e717 	.word	0x0800e717
 800e668:	0800e63d 	.word	0x0800e63d
 800e66c:	0800e63d 	.word	0x0800e63d
 800e670:	0800e775 	.word	0x0800e775
 800e674:	0800e63d 	.word	0x0800e63d
 800e678:	0800e63d 	.word	0x0800e63d
 800e67c:	0800e63d 	.word	0x0800e63d
 800e680:	0800e63d 	.word	0x0800e63d
 800e684:	0800e63d 	.word	0x0800e63d
 800e688:	0800e63d 	.word	0x0800e63d
 800e68c:	0800e63d 	.word	0x0800e63d
 800e690:	0800e78b 	.word	0x0800e78b
 800e694:	0800e761 	.word	0x0800e761
 800e698:	0800e6ef 	.word	0x0800e6ef
 800e69c:	0800e6ef 	.word	0x0800e6ef
 800e6a0:	0800e6ef 	.word	0x0800e6ef
 800e6a4:	0800e63d 	.word	0x0800e63d
 800e6a8:	0800e765 	.word	0x0800e765
 800e6ac:	0800e63d 	.word	0x0800e63d
 800e6b0:	0800e63d 	.word	0x0800e63d
 800e6b4:	0800e63d 	.word	0x0800e63d
 800e6b8:	0800e63d 	.word	0x0800e63d
 800e6bc:	0800e79b 	.word	0x0800e79b
 800e6c0:	0800e76d 	.word	0x0800e76d
 800e6c4:	0800e70f 	.word	0x0800e70f
 800e6c8:	0800e63d 	.word	0x0800e63d
 800e6cc:	0800e63d 	.word	0x0800e63d
 800e6d0:	0800e797 	.word	0x0800e797
 800e6d4:	0800e63d 	.word	0x0800e63d
 800e6d8:	0800e761 	.word	0x0800e761
 800e6dc:	0800e63d 	.word	0x0800e63d
 800e6e0:	0800e63d 	.word	0x0800e63d
 800e6e4:	0800e717 	.word	0x0800e717
 800e6e8:	3b45      	subs	r3, #69	; 0x45
 800e6ea:	2b02      	cmp	r3, #2
 800e6ec:	d8a6      	bhi.n	800e63c <__ssvfiscanf_r+0xf0>
 800e6ee:	2305      	movs	r3, #5
 800e6f0:	e01b      	b.n	800e72a <__ssvfiscanf_r+0x1de>
 800e6f2:	4621      	mov	r1, r4
 800e6f4:	4630      	mov	r0, r6
 800e6f6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e6f8:	4798      	blx	r3
 800e6fa:	2800      	cmp	r0, #0
 800e6fc:	f43f af65 	beq.w	800e5ca <__ssvfiscanf_r+0x7e>
 800e700:	9844      	ldr	r0, [sp, #272]	; 0x110
 800e702:	2800      	cmp	r0, #0
 800e704:	f040 808d 	bne.w	800e822 <__ssvfiscanf_r+0x2d6>
 800e708:	f04f 30ff 	mov.w	r0, #4294967295
 800e70c:	e08f      	b.n	800e82e <__ssvfiscanf_r+0x2e2>
 800e70e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800e710:	f042 0220 	orr.w	r2, r2, #32
 800e714:	9241      	str	r2, [sp, #260]	; 0x104
 800e716:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800e718:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e71c:	9241      	str	r2, [sp, #260]	; 0x104
 800e71e:	2210      	movs	r2, #16
 800e720:	2b6f      	cmp	r3, #111	; 0x6f
 800e722:	bf34      	ite	cc
 800e724:	2303      	movcc	r3, #3
 800e726:	2304      	movcs	r3, #4
 800e728:	9242      	str	r2, [sp, #264]	; 0x108
 800e72a:	9347      	str	r3, [sp, #284]	; 0x11c
 800e72c:	6863      	ldr	r3, [r4, #4]
 800e72e:	2b00      	cmp	r3, #0
 800e730:	dd42      	ble.n	800e7b8 <__ssvfiscanf_r+0x26c>
 800e732:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e734:	0659      	lsls	r1, r3, #25
 800e736:	d404      	bmi.n	800e742 <__ssvfiscanf_r+0x1f6>
 800e738:	6823      	ldr	r3, [r4, #0]
 800e73a:	781a      	ldrb	r2, [r3, #0]
 800e73c:	5cba      	ldrb	r2, [r7, r2]
 800e73e:	0712      	lsls	r2, r2, #28
 800e740:	d441      	bmi.n	800e7c6 <__ssvfiscanf_r+0x27a>
 800e742:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800e744:	2b02      	cmp	r3, #2
 800e746:	dc50      	bgt.n	800e7ea <__ssvfiscanf_r+0x29e>
 800e748:	466b      	mov	r3, sp
 800e74a:	4622      	mov	r2, r4
 800e74c:	4630      	mov	r0, r6
 800e74e:	a941      	add	r1, sp, #260	; 0x104
 800e750:	f000 f876 	bl	800e840 <_scanf_chars>
 800e754:	2801      	cmp	r0, #1
 800e756:	d06e      	beq.n	800e836 <__ssvfiscanf_r+0x2ea>
 800e758:	2802      	cmp	r0, #2
 800e75a:	f47f af1d 	bne.w	800e598 <__ssvfiscanf_r+0x4c>
 800e75e:	e7cf      	b.n	800e700 <__ssvfiscanf_r+0x1b4>
 800e760:	220a      	movs	r2, #10
 800e762:	e7dd      	b.n	800e720 <__ssvfiscanf_r+0x1d4>
 800e764:	2300      	movs	r3, #0
 800e766:	9342      	str	r3, [sp, #264]	; 0x108
 800e768:	2303      	movs	r3, #3
 800e76a:	e7de      	b.n	800e72a <__ssvfiscanf_r+0x1de>
 800e76c:	2308      	movs	r3, #8
 800e76e:	9342      	str	r3, [sp, #264]	; 0x108
 800e770:	2304      	movs	r3, #4
 800e772:	e7da      	b.n	800e72a <__ssvfiscanf_r+0x1de>
 800e774:	4629      	mov	r1, r5
 800e776:	4640      	mov	r0, r8
 800e778:	f000 f9c6 	bl	800eb08 <__sccl>
 800e77c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e77e:	4605      	mov	r5, r0
 800e780:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e784:	9341      	str	r3, [sp, #260]	; 0x104
 800e786:	2301      	movs	r3, #1
 800e788:	e7cf      	b.n	800e72a <__ssvfiscanf_r+0x1de>
 800e78a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e78c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e790:	9341      	str	r3, [sp, #260]	; 0x104
 800e792:	2300      	movs	r3, #0
 800e794:	e7c9      	b.n	800e72a <__ssvfiscanf_r+0x1de>
 800e796:	2302      	movs	r3, #2
 800e798:	e7c7      	b.n	800e72a <__ssvfiscanf_r+0x1de>
 800e79a:	9841      	ldr	r0, [sp, #260]	; 0x104
 800e79c:	06c3      	lsls	r3, r0, #27
 800e79e:	f53f aefb 	bmi.w	800e598 <__ssvfiscanf_r+0x4c>
 800e7a2:	9b00      	ldr	r3, [sp, #0]
 800e7a4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800e7a6:	1d19      	adds	r1, r3, #4
 800e7a8:	9100      	str	r1, [sp, #0]
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	f010 0f01 	tst.w	r0, #1
 800e7b0:	bf14      	ite	ne
 800e7b2:	801a      	strhne	r2, [r3, #0]
 800e7b4:	601a      	streq	r2, [r3, #0]
 800e7b6:	e6ef      	b.n	800e598 <__ssvfiscanf_r+0x4c>
 800e7b8:	4621      	mov	r1, r4
 800e7ba:	4630      	mov	r0, r6
 800e7bc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e7be:	4798      	blx	r3
 800e7c0:	2800      	cmp	r0, #0
 800e7c2:	d0b6      	beq.n	800e732 <__ssvfiscanf_r+0x1e6>
 800e7c4:	e79c      	b.n	800e700 <__ssvfiscanf_r+0x1b4>
 800e7c6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800e7c8:	3201      	adds	r2, #1
 800e7ca:	9245      	str	r2, [sp, #276]	; 0x114
 800e7cc:	6862      	ldr	r2, [r4, #4]
 800e7ce:	3a01      	subs	r2, #1
 800e7d0:	2a00      	cmp	r2, #0
 800e7d2:	6062      	str	r2, [r4, #4]
 800e7d4:	dd02      	ble.n	800e7dc <__ssvfiscanf_r+0x290>
 800e7d6:	3301      	adds	r3, #1
 800e7d8:	6023      	str	r3, [r4, #0]
 800e7da:	e7ad      	b.n	800e738 <__ssvfiscanf_r+0x1ec>
 800e7dc:	4621      	mov	r1, r4
 800e7de:	4630      	mov	r0, r6
 800e7e0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e7e2:	4798      	blx	r3
 800e7e4:	2800      	cmp	r0, #0
 800e7e6:	d0a7      	beq.n	800e738 <__ssvfiscanf_r+0x1ec>
 800e7e8:	e78a      	b.n	800e700 <__ssvfiscanf_r+0x1b4>
 800e7ea:	2b04      	cmp	r3, #4
 800e7ec:	dc0e      	bgt.n	800e80c <__ssvfiscanf_r+0x2c0>
 800e7ee:	466b      	mov	r3, sp
 800e7f0:	4622      	mov	r2, r4
 800e7f2:	4630      	mov	r0, r6
 800e7f4:	a941      	add	r1, sp, #260	; 0x104
 800e7f6:	f000 f87d 	bl	800e8f4 <_scanf_i>
 800e7fa:	e7ab      	b.n	800e754 <__ssvfiscanf_r+0x208>
 800e7fc:	0800e497 	.word	0x0800e497
 800e800:	0800e511 	.word	0x0800e511
 800e804:	0800f7f6 	.word	0x0800f7f6
 800e808:	0800f8fc 	.word	0x0800f8fc
 800e80c:	4b0b      	ldr	r3, [pc, #44]	; (800e83c <__ssvfiscanf_r+0x2f0>)
 800e80e:	2b00      	cmp	r3, #0
 800e810:	f43f aec2 	beq.w	800e598 <__ssvfiscanf_r+0x4c>
 800e814:	466b      	mov	r3, sp
 800e816:	4622      	mov	r2, r4
 800e818:	4630      	mov	r0, r6
 800e81a:	a941      	add	r1, sp, #260	; 0x104
 800e81c:	f3af 8000 	nop.w
 800e820:	e798      	b.n	800e754 <__ssvfiscanf_r+0x208>
 800e822:	89a3      	ldrh	r3, [r4, #12]
 800e824:	f013 0f40 	tst.w	r3, #64	; 0x40
 800e828:	bf18      	it	ne
 800e82a:	f04f 30ff 	movne.w	r0, #4294967295
 800e82e:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800e832:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e836:	9844      	ldr	r0, [sp, #272]	; 0x110
 800e838:	e7f9      	b.n	800e82e <__ssvfiscanf_r+0x2e2>
 800e83a:	bf00      	nop
 800e83c:	00000000 	.word	0x00000000

0800e840 <_scanf_chars>:
 800e840:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e844:	4615      	mov	r5, r2
 800e846:	688a      	ldr	r2, [r1, #8]
 800e848:	4680      	mov	r8, r0
 800e84a:	460c      	mov	r4, r1
 800e84c:	b932      	cbnz	r2, 800e85c <_scanf_chars+0x1c>
 800e84e:	698a      	ldr	r2, [r1, #24]
 800e850:	2a00      	cmp	r2, #0
 800e852:	bf0c      	ite	eq
 800e854:	2201      	moveq	r2, #1
 800e856:	f04f 32ff 	movne.w	r2, #4294967295
 800e85a:	608a      	str	r2, [r1, #8]
 800e85c:	2700      	movs	r7, #0
 800e85e:	6822      	ldr	r2, [r4, #0]
 800e860:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800e8f0 <_scanf_chars+0xb0>
 800e864:	06d1      	lsls	r1, r2, #27
 800e866:	bf5f      	itttt	pl
 800e868:	681a      	ldrpl	r2, [r3, #0]
 800e86a:	1d11      	addpl	r1, r2, #4
 800e86c:	6019      	strpl	r1, [r3, #0]
 800e86e:	6816      	ldrpl	r6, [r2, #0]
 800e870:	69a0      	ldr	r0, [r4, #24]
 800e872:	b188      	cbz	r0, 800e898 <_scanf_chars+0x58>
 800e874:	2801      	cmp	r0, #1
 800e876:	d107      	bne.n	800e888 <_scanf_chars+0x48>
 800e878:	682b      	ldr	r3, [r5, #0]
 800e87a:	781a      	ldrb	r2, [r3, #0]
 800e87c:	6963      	ldr	r3, [r4, #20]
 800e87e:	5c9b      	ldrb	r3, [r3, r2]
 800e880:	b953      	cbnz	r3, 800e898 <_scanf_chars+0x58>
 800e882:	2f00      	cmp	r7, #0
 800e884:	d031      	beq.n	800e8ea <_scanf_chars+0xaa>
 800e886:	e022      	b.n	800e8ce <_scanf_chars+0x8e>
 800e888:	2802      	cmp	r0, #2
 800e88a:	d120      	bne.n	800e8ce <_scanf_chars+0x8e>
 800e88c:	682b      	ldr	r3, [r5, #0]
 800e88e:	781b      	ldrb	r3, [r3, #0]
 800e890:	f813 3009 	ldrb.w	r3, [r3, r9]
 800e894:	071b      	lsls	r3, r3, #28
 800e896:	d41a      	bmi.n	800e8ce <_scanf_chars+0x8e>
 800e898:	6823      	ldr	r3, [r4, #0]
 800e89a:	3701      	adds	r7, #1
 800e89c:	06da      	lsls	r2, r3, #27
 800e89e:	bf5e      	ittt	pl
 800e8a0:	682b      	ldrpl	r3, [r5, #0]
 800e8a2:	781b      	ldrbpl	r3, [r3, #0]
 800e8a4:	f806 3b01 	strbpl.w	r3, [r6], #1
 800e8a8:	682a      	ldr	r2, [r5, #0]
 800e8aa:	686b      	ldr	r3, [r5, #4]
 800e8ac:	3201      	adds	r2, #1
 800e8ae:	602a      	str	r2, [r5, #0]
 800e8b0:	68a2      	ldr	r2, [r4, #8]
 800e8b2:	3b01      	subs	r3, #1
 800e8b4:	3a01      	subs	r2, #1
 800e8b6:	606b      	str	r3, [r5, #4]
 800e8b8:	60a2      	str	r2, [r4, #8]
 800e8ba:	b142      	cbz	r2, 800e8ce <_scanf_chars+0x8e>
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	dcd7      	bgt.n	800e870 <_scanf_chars+0x30>
 800e8c0:	4629      	mov	r1, r5
 800e8c2:	4640      	mov	r0, r8
 800e8c4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800e8c8:	4798      	blx	r3
 800e8ca:	2800      	cmp	r0, #0
 800e8cc:	d0d0      	beq.n	800e870 <_scanf_chars+0x30>
 800e8ce:	6823      	ldr	r3, [r4, #0]
 800e8d0:	f013 0310 	ands.w	r3, r3, #16
 800e8d4:	d105      	bne.n	800e8e2 <_scanf_chars+0xa2>
 800e8d6:	68e2      	ldr	r2, [r4, #12]
 800e8d8:	3201      	adds	r2, #1
 800e8da:	60e2      	str	r2, [r4, #12]
 800e8dc:	69a2      	ldr	r2, [r4, #24]
 800e8de:	b102      	cbz	r2, 800e8e2 <_scanf_chars+0xa2>
 800e8e0:	7033      	strb	r3, [r6, #0]
 800e8e2:	2000      	movs	r0, #0
 800e8e4:	6923      	ldr	r3, [r4, #16]
 800e8e6:	443b      	add	r3, r7
 800e8e8:	6123      	str	r3, [r4, #16]
 800e8ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e8ee:	bf00      	nop
 800e8f0:	0800f7f6 	.word	0x0800f7f6

0800e8f4 <_scanf_i>:
 800e8f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8f8:	460c      	mov	r4, r1
 800e8fa:	4698      	mov	r8, r3
 800e8fc:	4b75      	ldr	r3, [pc, #468]	; (800ead4 <_scanf_i+0x1e0>)
 800e8fe:	b087      	sub	sp, #28
 800e900:	4682      	mov	sl, r0
 800e902:	4616      	mov	r6, r2
 800e904:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e908:	ab03      	add	r3, sp, #12
 800e90a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800e90e:	4b72      	ldr	r3, [pc, #456]	; (800ead8 <_scanf_i+0x1e4>)
 800e910:	69a1      	ldr	r1, [r4, #24]
 800e912:	4a72      	ldr	r2, [pc, #456]	; (800eadc <_scanf_i+0x1e8>)
 800e914:	4627      	mov	r7, r4
 800e916:	2903      	cmp	r1, #3
 800e918:	bf18      	it	ne
 800e91a:	461a      	movne	r2, r3
 800e91c:	68a3      	ldr	r3, [r4, #8]
 800e91e:	9201      	str	r2, [sp, #4]
 800e920:	1e5a      	subs	r2, r3, #1
 800e922:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800e926:	bf81      	itttt	hi
 800e928:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800e92c:	eb03 0905 	addhi.w	r9, r3, r5
 800e930:	f240 135d 	movwhi	r3, #349	; 0x15d
 800e934:	60a3      	strhi	r3, [r4, #8]
 800e936:	f857 3b1c 	ldr.w	r3, [r7], #28
 800e93a:	bf98      	it	ls
 800e93c:	f04f 0900 	movls.w	r9, #0
 800e940:	463d      	mov	r5, r7
 800e942:	f04f 0b00 	mov.w	fp, #0
 800e946:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800e94a:	6023      	str	r3, [r4, #0]
 800e94c:	6831      	ldr	r1, [r6, #0]
 800e94e:	ab03      	add	r3, sp, #12
 800e950:	2202      	movs	r2, #2
 800e952:	7809      	ldrb	r1, [r1, #0]
 800e954:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800e958:	f7ff fd46 	bl	800e3e8 <memchr>
 800e95c:	b328      	cbz	r0, 800e9aa <_scanf_i+0xb6>
 800e95e:	f1bb 0f01 	cmp.w	fp, #1
 800e962:	d159      	bne.n	800ea18 <_scanf_i+0x124>
 800e964:	6862      	ldr	r2, [r4, #4]
 800e966:	b92a      	cbnz	r2, 800e974 <_scanf_i+0x80>
 800e968:	2308      	movs	r3, #8
 800e96a:	6822      	ldr	r2, [r4, #0]
 800e96c:	6063      	str	r3, [r4, #4]
 800e96e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e972:	6022      	str	r2, [r4, #0]
 800e974:	6822      	ldr	r2, [r4, #0]
 800e976:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800e97a:	6022      	str	r2, [r4, #0]
 800e97c:	68a2      	ldr	r2, [r4, #8]
 800e97e:	1e51      	subs	r1, r2, #1
 800e980:	60a1      	str	r1, [r4, #8]
 800e982:	b192      	cbz	r2, 800e9aa <_scanf_i+0xb6>
 800e984:	6832      	ldr	r2, [r6, #0]
 800e986:	1c51      	adds	r1, r2, #1
 800e988:	6031      	str	r1, [r6, #0]
 800e98a:	7812      	ldrb	r2, [r2, #0]
 800e98c:	f805 2b01 	strb.w	r2, [r5], #1
 800e990:	6872      	ldr	r2, [r6, #4]
 800e992:	3a01      	subs	r2, #1
 800e994:	2a00      	cmp	r2, #0
 800e996:	6072      	str	r2, [r6, #4]
 800e998:	dc07      	bgt.n	800e9aa <_scanf_i+0xb6>
 800e99a:	4631      	mov	r1, r6
 800e99c:	4650      	mov	r0, sl
 800e99e:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800e9a2:	4790      	blx	r2
 800e9a4:	2800      	cmp	r0, #0
 800e9a6:	f040 8085 	bne.w	800eab4 <_scanf_i+0x1c0>
 800e9aa:	f10b 0b01 	add.w	fp, fp, #1
 800e9ae:	f1bb 0f03 	cmp.w	fp, #3
 800e9b2:	d1cb      	bne.n	800e94c <_scanf_i+0x58>
 800e9b4:	6863      	ldr	r3, [r4, #4]
 800e9b6:	b90b      	cbnz	r3, 800e9bc <_scanf_i+0xc8>
 800e9b8:	230a      	movs	r3, #10
 800e9ba:	6063      	str	r3, [r4, #4]
 800e9bc:	6863      	ldr	r3, [r4, #4]
 800e9be:	4948      	ldr	r1, [pc, #288]	; (800eae0 <_scanf_i+0x1ec>)
 800e9c0:	6960      	ldr	r0, [r4, #20]
 800e9c2:	1ac9      	subs	r1, r1, r3
 800e9c4:	f000 f8a0 	bl	800eb08 <__sccl>
 800e9c8:	f04f 0b00 	mov.w	fp, #0
 800e9cc:	68a3      	ldr	r3, [r4, #8]
 800e9ce:	6822      	ldr	r2, [r4, #0]
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	d03d      	beq.n	800ea50 <_scanf_i+0x15c>
 800e9d4:	6831      	ldr	r1, [r6, #0]
 800e9d6:	6960      	ldr	r0, [r4, #20]
 800e9d8:	f891 c000 	ldrb.w	ip, [r1]
 800e9dc:	f810 000c 	ldrb.w	r0, [r0, ip]
 800e9e0:	2800      	cmp	r0, #0
 800e9e2:	d035      	beq.n	800ea50 <_scanf_i+0x15c>
 800e9e4:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800e9e8:	d124      	bne.n	800ea34 <_scanf_i+0x140>
 800e9ea:	0510      	lsls	r0, r2, #20
 800e9ec:	d522      	bpl.n	800ea34 <_scanf_i+0x140>
 800e9ee:	f10b 0b01 	add.w	fp, fp, #1
 800e9f2:	f1b9 0f00 	cmp.w	r9, #0
 800e9f6:	d003      	beq.n	800ea00 <_scanf_i+0x10c>
 800e9f8:	3301      	adds	r3, #1
 800e9fa:	f109 39ff 	add.w	r9, r9, #4294967295
 800e9fe:	60a3      	str	r3, [r4, #8]
 800ea00:	6873      	ldr	r3, [r6, #4]
 800ea02:	3b01      	subs	r3, #1
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	6073      	str	r3, [r6, #4]
 800ea08:	dd1b      	ble.n	800ea42 <_scanf_i+0x14e>
 800ea0a:	6833      	ldr	r3, [r6, #0]
 800ea0c:	3301      	adds	r3, #1
 800ea0e:	6033      	str	r3, [r6, #0]
 800ea10:	68a3      	ldr	r3, [r4, #8]
 800ea12:	3b01      	subs	r3, #1
 800ea14:	60a3      	str	r3, [r4, #8]
 800ea16:	e7d9      	b.n	800e9cc <_scanf_i+0xd8>
 800ea18:	f1bb 0f02 	cmp.w	fp, #2
 800ea1c:	d1ae      	bne.n	800e97c <_scanf_i+0x88>
 800ea1e:	6822      	ldr	r2, [r4, #0]
 800ea20:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800ea24:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800ea28:	d1bf      	bne.n	800e9aa <_scanf_i+0xb6>
 800ea2a:	2310      	movs	r3, #16
 800ea2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ea30:	6063      	str	r3, [r4, #4]
 800ea32:	e7a2      	b.n	800e97a <_scanf_i+0x86>
 800ea34:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800ea38:	6022      	str	r2, [r4, #0]
 800ea3a:	780b      	ldrb	r3, [r1, #0]
 800ea3c:	f805 3b01 	strb.w	r3, [r5], #1
 800ea40:	e7de      	b.n	800ea00 <_scanf_i+0x10c>
 800ea42:	4631      	mov	r1, r6
 800ea44:	4650      	mov	r0, sl
 800ea46:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ea4a:	4798      	blx	r3
 800ea4c:	2800      	cmp	r0, #0
 800ea4e:	d0df      	beq.n	800ea10 <_scanf_i+0x11c>
 800ea50:	6823      	ldr	r3, [r4, #0]
 800ea52:	05db      	lsls	r3, r3, #23
 800ea54:	d50d      	bpl.n	800ea72 <_scanf_i+0x17e>
 800ea56:	42bd      	cmp	r5, r7
 800ea58:	d909      	bls.n	800ea6e <_scanf_i+0x17a>
 800ea5a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800ea5e:	4632      	mov	r2, r6
 800ea60:	4650      	mov	r0, sl
 800ea62:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ea66:	f105 39ff 	add.w	r9, r5, #4294967295
 800ea6a:	4798      	blx	r3
 800ea6c:	464d      	mov	r5, r9
 800ea6e:	42bd      	cmp	r5, r7
 800ea70:	d02d      	beq.n	800eace <_scanf_i+0x1da>
 800ea72:	6822      	ldr	r2, [r4, #0]
 800ea74:	f012 0210 	ands.w	r2, r2, #16
 800ea78:	d113      	bne.n	800eaa2 <_scanf_i+0x1ae>
 800ea7a:	702a      	strb	r2, [r5, #0]
 800ea7c:	4639      	mov	r1, r7
 800ea7e:	6863      	ldr	r3, [r4, #4]
 800ea80:	4650      	mov	r0, sl
 800ea82:	9e01      	ldr	r6, [sp, #4]
 800ea84:	47b0      	blx	r6
 800ea86:	6821      	ldr	r1, [r4, #0]
 800ea88:	f8d8 3000 	ldr.w	r3, [r8]
 800ea8c:	f011 0f20 	tst.w	r1, #32
 800ea90:	d013      	beq.n	800eaba <_scanf_i+0x1c6>
 800ea92:	1d1a      	adds	r2, r3, #4
 800ea94:	f8c8 2000 	str.w	r2, [r8]
 800ea98:	681b      	ldr	r3, [r3, #0]
 800ea9a:	6018      	str	r0, [r3, #0]
 800ea9c:	68e3      	ldr	r3, [r4, #12]
 800ea9e:	3301      	adds	r3, #1
 800eaa0:	60e3      	str	r3, [r4, #12]
 800eaa2:	2000      	movs	r0, #0
 800eaa4:	1bed      	subs	r5, r5, r7
 800eaa6:	44ab      	add	fp, r5
 800eaa8:	6925      	ldr	r5, [r4, #16]
 800eaaa:	445d      	add	r5, fp
 800eaac:	6125      	str	r5, [r4, #16]
 800eaae:	b007      	add	sp, #28
 800eab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eab4:	f04f 0b00 	mov.w	fp, #0
 800eab8:	e7ca      	b.n	800ea50 <_scanf_i+0x15c>
 800eaba:	1d1a      	adds	r2, r3, #4
 800eabc:	f8c8 2000 	str.w	r2, [r8]
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	f011 0f01 	tst.w	r1, #1
 800eac6:	bf14      	ite	ne
 800eac8:	8018      	strhne	r0, [r3, #0]
 800eaca:	6018      	streq	r0, [r3, #0]
 800eacc:	e7e6      	b.n	800ea9c <_scanf_i+0x1a8>
 800eace:	2001      	movs	r0, #1
 800ead0:	e7ed      	b.n	800eaae <_scanf_i+0x1ba>
 800ead2:	bf00      	nop
 800ead4:	0800f5b0 	.word	0x0800f5b0
 800ead8:	0800dd8d 	.word	0x0800dd8d
 800eadc:	0800cbe1 	.word	0x0800cbe1
 800eae0:	0800f9a5 	.word	0x0800f9a5

0800eae4 <_read_r>:
 800eae4:	b538      	push	{r3, r4, r5, lr}
 800eae6:	4604      	mov	r4, r0
 800eae8:	4608      	mov	r0, r1
 800eaea:	4611      	mov	r1, r2
 800eaec:	2200      	movs	r2, #0
 800eaee:	4d05      	ldr	r5, [pc, #20]	; (800eb04 <_read_r+0x20>)
 800eaf0:	602a      	str	r2, [r5, #0]
 800eaf2:	461a      	mov	r2, r3
 800eaf4:	f7f7 fd8b 	bl	800660e <_read>
 800eaf8:	1c43      	adds	r3, r0, #1
 800eafa:	d102      	bne.n	800eb02 <_read_r+0x1e>
 800eafc:	682b      	ldr	r3, [r5, #0]
 800eafe:	b103      	cbz	r3, 800eb02 <_read_r+0x1e>
 800eb00:	6023      	str	r3, [r4, #0]
 800eb02:	bd38      	pop	{r3, r4, r5, pc}
 800eb04:	2000276c 	.word	0x2000276c

0800eb08 <__sccl>:
 800eb08:	b570      	push	{r4, r5, r6, lr}
 800eb0a:	780b      	ldrb	r3, [r1, #0]
 800eb0c:	4604      	mov	r4, r0
 800eb0e:	2b5e      	cmp	r3, #94	; 0x5e
 800eb10:	bf13      	iteet	ne
 800eb12:	2200      	movne	r2, #0
 800eb14:	2201      	moveq	r2, #1
 800eb16:	784b      	ldrbeq	r3, [r1, #1]
 800eb18:	1c48      	addne	r0, r1, #1
 800eb1a:	bf08      	it	eq
 800eb1c:	1c88      	addeq	r0, r1, #2
 800eb1e:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800eb22:	1e61      	subs	r1, r4, #1
 800eb24:	f801 2f01 	strb.w	r2, [r1, #1]!
 800eb28:	42a9      	cmp	r1, r5
 800eb2a:	d1fb      	bne.n	800eb24 <__sccl+0x1c>
 800eb2c:	b90b      	cbnz	r3, 800eb32 <__sccl+0x2a>
 800eb2e:	3801      	subs	r0, #1
 800eb30:	bd70      	pop	{r4, r5, r6, pc}
 800eb32:	f082 0201 	eor.w	r2, r2, #1
 800eb36:	4605      	mov	r5, r0
 800eb38:	54e2      	strb	r2, [r4, r3]
 800eb3a:	4628      	mov	r0, r5
 800eb3c:	f810 1b01 	ldrb.w	r1, [r0], #1
 800eb40:	292d      	cmp	r1, #45	; 0x2d
 800eb42:	d006      	beq.n	800eb52 <__sccl+0x4a>
 800eb44:	295d      	cmp	r1, #93	; 0x5d
 800eb46:	d0f3      	beq.n	800eb30 <__sccl+0x28>
 800eb48:	b909      	cbnz	r1, 800eb4e <__sccl+0x46>
 800eb4a:	4628      	mov	r0, r5
 800eb4c:	e7f0      	b.n	800eb30 <__sccl+0x28>
 800eb4e:	460b      	mov	r3, r1
 800eb50:	e7f1      	b.n	800eb36 <__sccl+0x2e>
 800eb52:	786e      	ldrb	r6, [r5, #1]
 800eb54:	2e5d      	cmp	r6, #93	; 0x5d
 800eb56:	d0fa      	beq.n	800eb4e <__sccl+0x46>
 800eb58:	42b3      	cmp	r3, r6
 800eb5a:	dcf8      	bgt.n	800eb4e <__sccl+0x46>
 800eb5c:	4619      	mov	r1, r3
 800eb5e:	3502      	adds	r5, #2
 800eb60:	3101      	adds	r1, #1
 800eb62:	428e      	cmp	r6, r1
 800eb64:	5462      	strb	r2, [r4, r1]
 800eb66:	dcfb      	bgt.n	800eb60 <__sccl+0x58>
 800eb68:	1af1      	subs	r1, r6, r3
 800eb6a:	3901      	subs	r1, #1
 800eb6c:	42b3      	cmp	r3, r6
 800eb6e:	bfa8      	it	ge
 800eb70:	2100      	movge	r1, #0
 800eb72:	1c58      	adds	r0, r3, #1
 800eb74:	1843      	adds	r3, r0, r1
 800eb76:	e7e0      	b.n	800eb3a <__sccl+0x32>

0800eb78 <_raise_r>:
 800eb78:	291f      	cmp	r1, #31
 800eb7a:	b538      	push	{r3, r4, r5, lr}
 800eb7c:	4604      	mov	r4, r0
 800eb7e:	460d      	mov	r5, r1
 800eb80:	d904      	bls.n	800eb8c <_raise_r+0x14>
 800eb82:	2316      	movs	r3, #22
 800eb84:	6003      	str	r3, [r0, #0]
 800eb86:	f04f 30ff 	mov.w	r0, #4294967295
 800eb8a:	bd38      	pop	{r3, r4, r5, pc}
 800eb8c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800eb8e:	b112      	cbz	r2, 800eb96 <_raise_r+0x1e>
 800eb90:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800eb94:	b94b      	cbnz	r3, 800ebaa <_raise_r+0x32>
 800eb96:	4620      	mov	r0, r4
 800eb98:	f000 f830 	bl	800ebfc <_getpid_r>
 800eb9c:	462a      	mov	r2, r5
 800eb9e:	4601      	mov	r1, r0
 800eba0:	4620      	mov	r0, r4
 800eba2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eba6:	f000 b817 	b.w	800ebd8 <_kill_r>
 800ebaa:	2b01      	cmp	r3, #1
 800ebac:	d00a      	beq.n	800ebc4 <_raise_r+0x4c>
 800ebae:	1c59      	adds	r1, r3, #1
 800ebb0:	d103      	bne.n	800ebba <_raise_r+0x42>
 800ebb2:	2316      	movs	r3, #22
 800ebb4:	6003      	str	r3, [r0, #0]
 800ebb6:	2001      	movs	r0, #1
 800ebb8:	e7e7      	b.n	800eb8a <_raise_r+0x12>
 800ebba:	2400      	movs	r4, #0
 800ebbc:	4628      	mov	r0, r5
 800ebbe:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ebc2:	4798      	blx	r3
 800ebc4:	2000      	movs	r0, #0
 800ebc6:	e7e0      	b.n	800eb8a <_raise_r+0x12>

0800ebc8 <raise>:
 800ebc8:	4b02      	ldr	r3, [pc, #8]	; (800ebd4 <raise+0xc>)
 800ebca:	4601      	mov	r1, r0
 800ebcc:	6818      	ldr	r0, [r3, #0]
 800ebce:	f7ff bfd3 	b.w	800eb78 <_raise_r>
 800ebd2:	bf00      	nop
 800ebd4:	200004e0 	.word	0x200004e0

0800ebd8 <_kill_r>:
 800ebd8:	b538      	push	{r3, r4, r5, lr}
 800ebda:	2300      	movs	r3, #0
 800ebdc:	4d06      	ldr	r5, [pc, #24]	; (800ebf8 <_kill_r+0x20>)
 800ebde:	4604      	mov	r4, r0
 800ebe0:	4608      	mov	r0, r1
 800ebe2:	4611      	mov	r1, r2
 800ebe4:	602b      	str	r3, [r5, #0]
 800ebe6:	f7f7 fcf8 	bl	80065da <_kill>
 800ebea:	1c43      	adds	r3, r0, #1
 800ebec:	d102      	bne.n	800ebf4 <_kill_r+0x1c>
 800ebee:	682b      	ldr	r3, [r5, #0]
 800ebf0:	b103      	cbz	r3, 800ebf4 <_kill_r+0x1c>
 800ebf2:	6023      	str	r3, [r4, #0]
 800ebf4:	bd38      	pop	{r3, r4, r5, pc}
 800ebf6:	bf00      	nop
 800ebf8:	2000276c 	.word	0x2000276c

0800ebfc <_getpid_r>:
 800ebfc:	f7f7 bce6 	b.w	80065cc <_getpid>

0800ec00 <__submore>:
 800ec00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec04:	460c      	mov	r4, r1
 800ec06:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800ec08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ec0c:	4299      	cmp	r1, r3
 800ec0e:	d11b      	bne.n	800ec48 <__submore+0x48>
 800ec10:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800ec14:	f7fd fe4a 	bl	800c8ac <_malloc_r>
 800ec18:	b918      	cbnz	r0, 800ec22 <__submore+0x22>
 800ec1a:	f04f 30ff 	mov.w	r0, #4294967295
 800ec1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ec26:	63a3      	str	r3, [r4, #56]	; 0x38
 800ec28:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800ec2c:	6360      	str	r0, [r4, #52]	; 0x34
 800ec2e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800ec32:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800ec36:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800ec3a:	7043      	strb	r3, [r0, #1]
 800ec3c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800ec40:	7003      	strb	r3, [r0, #0]
 800ec42:	6020      	str	r0, [r4, #0]
 800ec44:	2000      	movs	r0, #0
 800ec46:	e7ea      	b.n	800ec1e <__submore+0x1e>
 800ec48:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800ec4a:	0077      	lsls	r7, r6, #1
 800ec4c:	463a      	mov	r2, r7
 800ec4e:	f7ff fbf3 	bl	800e438 <_realloc_r>
 800ec52:	4605      	mov	r5, r0
 800ec54:	2800      	cmp	r0, #0
 800ec56:	d0e0      	beq.n	800ec1a <__submore+0x1a>
 800ec58:	eb00 0806 	add.w	r8, r0, r6
 800ec5c:	4601      	mov	r1, r0
 800ec5e:	4632      	mov	r2, r6
 800ec60:	4640      	mov	r0, r8
 800ec62:	f7fd fb33 	bl	800c2cc <memcpy>
 800ec66:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800ec6a:	f8c4 8000 	str.w	r8, [r4]
 800ec6e:	e7e9      	b.n	800ec44 <__submore+0x44>

0800ec70 <_fstat_r>:
 800ec70:	b538      	push	{r3, r4, r5, lr}
 800ec72:	2300      	movs	r3, #0
 800ec74:	4d06      	ldr	r5, [pc, #24]	; (800ec90 <_fstat_r+0x20>)
 800ec76:	4604      	mov	r4, r0
 800ec78:	4608      	mov	r0, r1
 800ec7a:	4611      	mov	r1, r2
 800ec7c:	602b      	str	r3, [r5, #0]
 800ec7e:	f7f7 fd0a 	bl	8006696 <_fstat>
 800ec82:	1c43      	adds	r3, r0, #1
 800ec84:	d102      	bne.n	800ec8c <_fstat_r+0x1c>
 800ec86:	682b      	ldr	r3, [r5, #0]
 800ec88:	b103      	cbz	r3, 800ec8c <_fstat_r+0x1c>
 800ec8a:	6023      	str	r3, [r4, #0]
 800ec8c:	bd38      	pop	{r3, r4, r5, pc}
 800ec8e:	bf00      	nop
 800ec90:	2000276c 	.word	0x2000276c

0800ec94 <_isatty_r>:
 800ec94:	b538      	push	{r3, r4, r5, lr}
 800ec96:	2300      	movs	r3, #0
 800ec98:	4d05      	ldr	r5, [pc, #20]	; (800ecb0 <_isatty_r+0x1c>)
 800ec9a:	4604      	mov	r4, r0
 800ec9c:	4608      	mov	r0, r1
 800ec9e:	602b      	str	r3, [r5, #0]
 800eca0:	f7f7 fd08 	bl	80066b4 <_isatty>
 800eca4:	1c43      	adds	r3, r0, #1
 800eca6:	d102      	bne.n	800ecae <_isatty_r+0x1a>
 800eca8:	682b      	ldr	r3, [r5, #0]
 800ecaa:	b103      	cbz	r3, 800ecae <_isatty_r+0x1a>
 800ecac:	6023      	str	r3, [r4, #0]
 800ecae:	bd38      	pop	{r3, r4, r5, pc}
 800ecb0:	2000276c 	.word	0x2000276c

0800ecb4 <_malloc_usable_size_r>:
 800ecb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ecb8:	1f18      	subs	r0, r3, #4
 800ecba:	2b00      	cmp	r3, #0
 800ecbc:	bfbc      	itt	lt
 800ecbe:	580b      	ldrlt	r3, [r1, r0]
 800ecc0:	18c0      	addlt	r0, r0, r3
 800ecc2:	4770      	bx	lr

0800ecc4 <_init>:
 800ecc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ecc6:	bf00      	nop
 800ecc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ecca:	bc08      	pop	{r3}
 800eccc:	469e      	mov	lr, r3
 800ecce:	4770      	bx	lr

0800ecd0 <_fini>:
 800ecd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ecd2:	bf00      	nop
 800ecd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ecd6:	bc08      	pop	{r3}
 800ecd8:	469e      	mov	lr, r3
 800ecda:	4770      	bx	lr


Station.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000eb9c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d58  0800eca8  0800eca8  0001eca8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fa00  0800fa00  000205a8  2**0
                  CONTENTS
  4 .ARM          00000008  0800fa00  0800fa00  0001fa00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fa08  0800fa08  000205a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fa08  0800fa08  0001fa08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fa0c  0800fa0c  0001fa0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000005a8  20000000  0800fa10  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000026a4  200005a8  0800ffb8  000205a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002c4c  0800ffb8  00022c4c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000205a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020f61  00000000  00000000  000205d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005fe2  00000000  00000000  00041532  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001bd8  00000000  00000000  00047518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000018f8  00000000  00000000  000490f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000207ce  00000000  00000000  0004a9e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002faeb  00000000  00000000  0006b1b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009723a  00000000  00000000  0009aca1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00131edb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008054  00000000  00000000  00131f2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200005a8 	.word	0x200005a8
 8000128:	00000000 	.word	0x00000000
 800012c:	0800ec90 	.word	0x0800ec90

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200005ac 	.word	0x200005ac
 8000148:	0800ec90 	.word	0x0800ec90

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <strcmp>:
 800015c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000160:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000164:	2a01      	cmp	r2, #1
 8000166:	bf28      	it	cs
 8000168:	429a      	cmpcs	r2, r3
 800016a:	d0f7      	beq.n	800015c <strcmp>
 800016c:	1ad0      	subs	r0, r2, r3
 800016e:	4770      	bx	lr

08000170 <__aeabi_f2uiz>:
 8000170:	0042      	lsls	r2, r0, #1
 8000172:	d20e      	bcs.n	8000192 <__aeabi_f2uiz+0x22>
 8000174:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000178:	d30b      	bcc.n	8000192 <__aeabi_f2uiz+0x22>
 800017a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800017e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000182:	d409      	bmi.n	8000198 <__aeabi_f2uiz+0x28>
 8000184:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000188:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800018c:	fa23 f002 	lsr.w	r0, r3, r2
 8000190:	4770      	bx	lr
 8000192:	f04f 0000 	mov.w	r0, #0
 8000196:	4770      	bx	lr
 8000198:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800019c:	d101      	bne.n	80001a2 <__aeabi_f2uiz+0x32>
 800019e:	0242      	lsls	r2, r0, #9
 80001a0:	d102      	bne.n	80001a8 <__aeabi_f2uiz+0x38>
 80001a2:	f04f 30ff 	mov.w	r0, #4294967295
 80001a6:	4770      	bx	lr
 80001a8:	f04f 0000 	mov.w	r0, #0
 80001ac:	4770      	bx	lr
 80001ae:	bf00      	nop

080001b0 <__aeabi_ldivmod>:
 80001b0:	b97b      	cbnz	r3, 80001d2 <__aeabi_ldivmod+0x22>
 80001b2:	b972      	cbnz	r2, 80001d2 <__aeabi_ldivmod+0x22>
 80001b4:	2900      	cmp	r1, #0
 80001b6:	bfbe      	ittt	lt
 80001b8:	2000      	movlt	r0, #0
 80001ba:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80001be:	e006      	blt.n	80001ce <__aeabi_ldivmod+0x1e>
 80001c0:	bf08      	it	eq
 80001c2:	2800      	cmpeq	r0, #0
 80001c4:	bf1c      	itt	ne
 80001c6:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80001ca:	f04f 30ff 	movne.w	r0, #4294967295
 80001ce:	f000 b9a9 	b.w	8000524 <__aeabi_idiv0>
 80001d2:	f1ad 0c08 	sub.w	ip, sp, #8
 80001d6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001da:	2900      	cmp	r1, #0
 80001dc:	db09      	blt.n	80001f2 <__aeabi_ldivmod+0x42>
 80001de:	2b00      	cmp	r3, #0
 80001e0:	db1a      	blt.n	8000218 <__aeabi_ldivmod+0x68>
 80001e2:	f000 f835 	bl	8000250 <__udivmoddi4>
 80001e6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001ee:	b004      	add	sp, #16
 80001f0:	4770      	bx	lr
 80001f2:	4240      	negs	r0, r0
 80001f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f8:	2b00      	cmp	r3, #0
 80001fa:	db1b      	blt.n	8000234 <__aeabi_ldivmod+0x84>
 80001fc:	f000 f828 	bl	8000250 <__udivmoddi4>
 8000200:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000204:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000208:	b004      	add	sp, #16
 800020a:	4240      	negs	r0, r0
 800020c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000210:	4252      	negs	r2, r2
 8000212:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000216:	4770      	bx	lr
 8000218:	4252      	negs	r2, r2
 800021a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800021e:	f000 f817 	bl	8000250 <__udivmoddi4>
 8000222:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000226:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800022a:	b004      	add	sp, #16
 800022c:	4240      	negs	r0, r0
 800022e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000232:	4770      	bx	lr
 8000234:	4252      	negs	r2, r2
 8000236:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800023a:	f000 f809 	bl	8000250 <__udivmoddi4>
 800023e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000242:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000246:	b004      	add	sp, #16
 8000248:	4252      	negs	r2, r2
 800024a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9e08      	ldr	r6, [sp, #32]
 8000256:	460d      	mov	r5, r1
 8000258:	4604      	mov	r4, r0
 800025a:	4688      	mov	r8, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14d      	bne.n	80002fc <__udivmoddi4+0xac>
 8000260:	428a      	cmp	r2, r1
 8000262:	4694      	mov	ip, r2
 8000264:	d968      	bls.n	8000338 <__udivmoddi4+0xe8>
 8000266:	fab2 f282 	clz	r2, r2
 800026a:	b152      	cbz	r2, 8000282 <__udivmoddi4+0x32>
 800026c:	fa01 f302 	lsl.w	r3, r1, r2
 8000270:	f1c2 0120 	rsb	r1, r2, #32
 8000274:	fa20 f101 	lsr.w	r1, r0, r1
 8000278:	fa0c fc02 	lsl.w	ip, ip, r2
 800027c:	ea41 0803 	orr.w	r8, r1, r3
 8000280:	4094      	lsls	r4, r2
 8000282:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000286:	fbb8 f7f1 	udiv	r7, r8, r1
 800028a:	fa1f fe8c 	uxth.w	lr, ip
 800028e:	fb01 8817 	mls	r8, r1, r7, r8
 8000292:	fb07 f00e 	mul.w	r0, r7, lr
 8000296:	0c23      	lsrs	r3, r4, #16
 8000298:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800029c:	4298      	cmp	r0, r3
 800029e:	d90a      	bls.n	80002b6 <__udivmoddi4+0x66>
 80002a0:	eb1c 0303 	adds.w	r3, ip, r3
 80002a4:	f107 35ff 	add.w	r5, r7, #4294967295
 80002a8:	f080 811e 	bcs.w	80004e8 <__udivmoddi4+0x298>
 80002ac:	4298      	cmp	r0, r3
 80002ae:	f240 811b 	bls.w	80004e8 <__udivmoddi4+0x298>
 80002b2:	3f02      	subs	r7, #2
 80002b4:	4463      	add	r3, ip
 80002b6:	1a1b      	subs	r3, r3, r0
 80002b8:	fbb3 f0f1 	udiv	r0, r3, r1
 80002bc:	fb01 3310 	mls	r3, r1, r0, r3
 80002c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002c4:	b2a4      	uxth	r4, r4
 80002c6:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ca:	45a6      	cmp	lr, r4
 80002cc:	d90a      	bls.n	80002e4 <__udivmoddi4+0x94>
 80002ce:	eb1c 0404 	adds.w	r4, ip, r4
 80002d2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002d6:	f080 8109 	bcs.w	80004ec <__udivmoddi4+0x29c>
 80002da:	45a6      	cmp	lr, r4
 80002dc:	f240 8106 	bls.w	80004ec <__udivmoddi4+0x29c>
 80002e0:	4464      	add	r4, ip
 80002e2:	3802      	subs	r0, #2
 80002e4:	2100      	movs	r1, #0
 80002e6:	eba4 040e 	sub.w	r4, r4, lr
 80002ea:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002ee:	b11e      	cbz	r6, 80002f8 <__udivmoddi4+0xa8>
 80002f0:	2300      	movs	r3, #0
 80002f2:	40d4      	lsrs	r4, r2
 80002f4:	e9c6 4300 	strd	r4, r3, [r6]
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d908      	bls.n	8000312 <__udivmoddi4+0xc2>
 8000300:	2e00      	cmp	r6, #0
 8000302:	f000 80ee 	beq.w	80004e2 <__udivmoddi4+0x292>
 8000306:	2100      	movs	r1, #0
 8000308:	e9c6 0500 	strd	r0, r5, [r6]
 800030c:	4608      	mov	r0, r1
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	fab3 f183 	clz	r1, r3
 8000316:	2900      	cmp	r1, #0
 8000318:	d14a      	bne.n	80003b0 <__udivmoddi4+0x160>
 800031a:	42ab      	cmp	r3, r5
 800031c:	d302      	bcc.n	8000324 <__udivmoddi4+0xd4>
 800031e:	4282      	cmp	r2, r0
 8000320:	f200 80fc 	bhi.w	800051c <__udivmoddi4+0x2cc>
 8000324:	1a84      	subs	r4, r0, r2
 8000326:	eb65 0303 	sbc.w	r3, r5, r3
 800032a:	2001      	movs	r0, #1
 800032c:	4698      	mov	r8, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d0e2      	beq.n	80002f8 <__udivmoddi4+0xa8>
 8000332:	e9c6 4800 	strd	r4, r8, [r6]
 8000336:	e7df      	b.n	80002f8 <__udivmoddi4+0xa8>
 8000338:	b902      	cbnz	r2, 800033c <__udivmoddi4+0xec>
 800033a:	deff      	udf	#255	; 0xff
 800033c:	fab2 f282 	clz	r2, r2
 8000340:	2a00      	cmp	r2, #0
 8000342:	f040 8091 	bne.w	8000468 <__udivmoddi4+0x218>
 8000346:	eba1 000c 	sub.w	r0, r1, ip
 800034a:	2101      	movs	r1, #1
 800034c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000350:	fa1f fe8c 	uxth.w	lr, ip
 8000354:	fbb0 f3f7 	udiv	r3, r0, r7
 8000358:	fb07 0013 	mls	r0, r7, r3, r0
 800035c:	0c25      	lsrs	r5, r4, #16
 800035e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000362:	fb0e f003 	mul.w	r0, lr, r3
 8000366:	42a8      	cmp	r0, r5
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x12c>
 800036a:	eb1c 0505 	adds.w	r5, ip, r5
 800036e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x12a>
 8000374:	42a8      	cmp	r0, r5
 8000376:	f200 80ce 	bhi.w	8000516 <__udivmoddi4+0x2c6>
 800037a:	4643      	mov	r3, r8
 800037c:	1a2d      	subs	r5, r5, r0
 800037e:	fbb5 f0f7 	udiv	r0, r5, r7
 8000382:	fb07 5510 	mls	r5, r7, r0, r5
 8000386:	fb0e fe00 	mul.w	lr, lr, r0
 800038a:	b2a4      	uxth	r4, r4
 800038c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000390:	45a6      	cmp	lr, r4
 8000392:	d908      	bls.n	80003a6 <__udivmoddi4+0x156>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f100 35ff 	add.w	r5, r0, #4294967295
 800039c:	d202      	bcs.n	80003a4 <__udivmoddi4+0x154>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f200 80b6 	bhi.w	8000510 <__udivmoddi4+0x2c0>
 80003a4:	4628      	mov	r0, r5
 80003a6:	eba4 040e 	sub.w	r4, r4, lr
 80003aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ae:	e79e      	b.n	80002ee <__udivmoddi4+0x9e>
 80003b0:	f1c1 0720 	rsb	r7, r1, #32
 80003b4:	408b      	lsls	r3, r1
 80003b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80003be:	fa25 fa07 	lsr.w	sl, r5, r7
 80003c2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c6:	fbba f8f9 	udiv	r8, sl, r9
 80003ca:	fa20 f307 	lsr.w	r3, r0, r7
 80003ce:	fb09 aa18 	mls	sl, r9, r8, sl
 80003d2:	408d      	lsls	r5, r1
 80003d4:	fa1f fe8c 	uxth.w	lr, ip
 80003d8:	431d      	orrs	r5, r3
 80003da:	fa00 f301 	lsl.w	r3, r0, r1
 80003de:	fb08 f00e 	mul.w	r0, r8, lr
 80003e2:	0c2c      	lsrs	r4, r5, #16
 80003e4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80003e8:	42a0      	cmp	r0, r4
 80003ea:	fa02 f201 	lsl.w	r2, r2, r1
 80003ee:	d90b      	bls.n	8000408 <__udivmoddi4+0x1b8>
 80003f0:	eb1c 0404 	adds.w	r4, ip, r4
 80003f4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f8:	f080 8088 	bcs.w	800050c <__udivmoddi4+0x2bc>
 80003fc:	42a0      	cmp	r0, r4
 80003fe:	f240 8085 	bls.w	800050c <__udivmoddi4+0x2bc>
 8000402:	f1a8 0802 	sub.w	r8, r8, #2
 8000406:	4464      	add	r4, ip
 8000408:	1a24      	subs	r4, r4, r0
 800040a:	fbb4 f0f9 	udiv	r0, r4, r9
 800040e:	fb09 4410 	mls	r4, r9, r0, r4
 8000412:	fb00 fe0e 	mul.w	lr, r0, lr
 8000416:	b2ad      	uxth	r5, r5
 8000418:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800041c:	45a6      	cmp	lr, r4
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x1e2>
 8000420:	eb1c 0404 	adds.w	r4, ip, r4
 8000424:	f100 35ff 	add.w	r5, r0, #4294967295
 8000428:	d26c      	bcs.n	8000504 <__udivmoddi4+0x2b4>
 800042a:	45a6      	cmp	lr, r4
 800042c:	d96a      	bls.n	8000504 <__udivmoddi4+0x2b4>
 800042e:	3802      	subs	r0, #2
 8000430:	4464      	add	r4, ip
 8000432:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000436:	fba0 9502 	umull	r9, r5, r0, r2
 800043a:	eba4 040e 	sub.w	r4, r4, lr
 800043e:	42ac      	cmp	r4, r5
 8000440:	46c8      	mov	r8, r9
 8000442:	46ae      	mov	lr, r5
 8000444:	d356      	bcc.n	80004f4 <__udivmoddi4+0x2a4>
 8000446:	d053      	beq.n	80004f0 <__udivmoddi4+0x2a0>
 8000448:	2e00      	cmp	r6, #0
 800044a:	d069      	beq.n	8000520 <__udivmoddi4+0x2d0>
 800044c:	ebb3 0208 	subs.w	r2, r3, r8
 8000450:	eb64 040e 	sbc.w	r4, r4, lr
 8000454:	fa22 f301 	lsr.w	r3, r2, r1
 8000458:	fa04 f707 	lsl.w	r7, r4, r7
 800045c:	431f      	orrs	r7, r3
 800045e:	40cc      	lsrs	r4, r1
 8000460:	e9c6 7400 	strd	r7, r4, [r6]
 8000464:	2100      	movs	r1, #0
 8000466:	e747      	b.n	80002f8 <__udivmoddi4+0xa8>
 8000468:	fa0c fc02 	lsl.w	ip, ip, r2
 800046c:	f1c2 0120 	rsb	r1, r2, #32
 8000470:	fa25 f301 	lsr.w	r3, r5, r1
 8000474:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000478:	fa20 f101 	lsr.w	r1, r0, r1
 800047c:	4095      	lsls	r5, r2
 800047e:	430d      	orrs	r5, r1
 8000480:	fbb3 f1f7 	udiv	r1, r3, r7
 8000484:	fb07 3311 	mls	r3, r7, r1, r3
 8000488:	fa1f fe8c 	uxth.w	lr, ip
 800048c:	0c28      	lsrs	r0, r5, #16
 800048e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000492:	fb01 f30e 	mul.w	r3, r1, lr
 8000496:	4283      	cmp	r3, r0
 8000498:	fa04 f402 	lsl.w	r4, r4, r2
 800049c:	d908      	bls.n	80004b0 <__udivmoddi4+0x260>
 800049e:	eb1c 0000 	adds.w	r0, ip, r0
 80004a2:	f101 38ff 	add.w	r8, r1, #4294967295
 80004a6:	d22f      	bcs.n	8000508 <__udivmoddi4+0x2b8>
 80004a8:	4283      	cmp	r3, r0
 80004aa:	d92d      	bls.n	8000508 <__udivmoddi4+0x2b8>
 80004ac:	3902      	subs	r1, #2
 80004ae:	4460      	add	r0, ip
 80004b0:	1ac0      	subs	r0, r0, r3
 80004b2:	fbb0 f3f7 	udiv	r3, r0, r7
 80004b6:	fb07 0013 	mls	r0, r7, r3, r0
 80004ba:	b2ad      	uxth	r5, r5
 80004bc:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80004c0:	fb03 f00e 	mul.w	r0, r3, lr
 80004c4:	42a8      	cmp	r0, r5
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x28a>
 80004c8:	eb1c 0505 	adds.w	r5, ip, r5
 80004cc:	f103 38ff 	add.w	r8, r3, #4294967295
 80004d0:	d216      	bcs.n	8000500 <__udivmoddi4+0x2b0>
 80004d2:	42a8      	cmp	r0, r5
 80004d4:	d914      	bls.n	8000500 <__udivmoddi4+0x2b0>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	4465      	add	r5, ip
 80004da:	1a28      	subs	r0, r5, r0
 80004dc:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004e0:	e738      	b.n	8000354 <__udivmoddi4+0x104>
 80004e2:	4631      	mov	r1, r6
 80004e4:	4630      	mov	r0, r6
 80004e6:	e707      	b.n	80002f8 <__udivmoddi4+0xa8>
 80004e8:	462f      	mov	r7, r5
 80004ea:	e6e4      	b.n	80002b6 <__udivmoddi4+0x66>
 80004ec:	4618      	mov	r0, r3
 80004ee:	e6f9      	b.n	80002e4 <__udivmoddi4+0x94>
 80004f0:	454b      	cmp	r3, r9
 80004f2:	d2a9      	bcs.n	8000448 <__udivmoddi4+0x1f8>
 80004f4:	ebb9 0802 	subs.w	r8, r9, r2
 80004f8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004fc:	3801      	subs	r0, #1
 80004fe:	e7a3      	b.n	8000448 <__udivmoddi4+0x1f8>
 8000500:	4643      	mov	r3, r8
 8000502:	e7ea      	b.n	80004da <__udivmoddi4+0x28a>
 8000504:	4628      	mov	r0, r5
 8000506:	e794      	b.n	8000432 <__udivmoddi4+0x1e2>
 8000508:	4641      	mov	r1, r8
 800050a:	e7d1      	b.n	80004b0 <__udivmoddi4+0x260>
 800050c:	46d0      	mov	r8, sl
 800050e:	e77b      	b.n	8000408 <__udivmoddi4+0x1b8>
 8000510:	4464      	add	r4, ip
 8000512:	3802      	subs	r0, #2
 8000514:	e747      	b.n	80003a6 <__udivmoddi4+0x156>
 8000516:	3b02      	subs	r3, #2
 8000518:	4465      	add	r5, ip
 800051a:	e72f      	b.n	800037c <__udivmoddi4+0x12c>
 800051c:	4608      	mov	r0, r1
 800051e:	e706      	b.n	800032e <__udivmoddi4+0xde>
 8000520:	4631      	mov	r1, r6
 8000522:	e6e9      	b.n	80002f8 <__udivmoddi4+0xa8>

08000524 <__aeabi_idiv0>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <initApp_Display>:

static uint16_t countdowntime;
static _RTC switchtime;

void initApp_Display (DISPLAY_MODE_t *myDisplayMode, _RTC *myRTC)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
 8000530:	6039      	str	r1, [r7, #0]
	LCD_Init();
 8000532:	f006 fced 	bl	8006f10 <LCD_Init>
	__MY_DISPLAY_MODE = myDisplayMode;
 8000536:	4a07      	ldr	r2, [pc, #28]	; (8000554 <initApp_Display+0x2c>)
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	6013      	str	r3, [r2, #0]
	__MY_RTC = myRTC;
 800053c:	4a06      	ldr	r2, [pc, #24]	; (8000558 <initApp_Display+0x30>)
 800053e:	683b      	ldr	r3, [r7, #0]
 8000540:	6013      	str	r3, [r2, #0]
//	myStation = myStation;
	Screen_Init(__MY_RTC);
 8000542:	4b05      	ldr	r3, [pc, #20]	; (8000558 <initApp_Display+0x30>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	4618      	mov	r0, r3
 8000548:	f006 fe9c 	bl	8007284 <Screen_Init>

}
 800054c:	bf00      	nop
 800054e:	3708      	adds	r7, #8
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}
 8000554:	200005c4 	.word	0x200005c4
 8000558:	200005c8 	.word	0x200005c8

0800055c <display_SensorX>:

void display_SensorX(uint8_t sensorIndex)
{
 800055c:	b590      	push	{r4, r7, lr}
 800055e:	b087      	sub	sp, #28
 8000560:	af02      	add	r7, sp, #8
 8000562:	4603      	mov	r3, r0
 8000564:	71fb      	strb	r3, [r7, #7]
	if (sensorIndex > myStation.ssNode_list->length)	{
 8000566:	79fa      	ldrb	r2, [r7, #7]
 8000568:	4b18      	ldr	r3, [pc, #96]	; (80005cc <display_SensorX+0x70>)
 800056a:	68db      	ldr	r3, [r3, #12]
 800056c:	689b      	ldr	r3, [r3, #8]
 800056e:	429a      	cmp	r2, r3
 8000570:	d908      	bls.n	8000584 <display_SensorX+0x28>
		Screen_Monitor_Station(myStation.stID, myStation.stCurrent);
 8000572:	4b16      	ldr	r3, [pc, #88]	; (80005cc <display_SensorX+0x70>)
 8000574:	785b      	ldrb	r3, [r3, #1]
 8000576:	4a15      	ldr	r2, [pc, #84]	; (80005cc <display_SensorX+0x70>)
 8000578:	8852      	ldrh	r2, [r2, #2]
 800057a:	4611      	mov	r1, r2
 800057c:	4618      	mov	r0, r3
 800057e:	f006 ffc9 	bl	8007514 <Screen_Monitor_Station>
		return ;
 8000582:	e01f      	b.n	80005c4 <display_SensorX+0x68>

	}

	Node * current = myStation.ssNode_list->head;
 8000584:	4b11      	ldr	r3, [pc, #68]	; (80005cc <display_SensorX+0x70>)
 8000586:	68db      	ldr	r3, [r3, #12]
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < sensorIndex; i++)
 800058c:	2300      	movs	r3, #0
 800058e:	72fb      	strb	r3, [r7, #11]
 8000590:	e005      	b.n	800059e <display_SensorX+0x42>
	{
		current = current->next;
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000596:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < sensorIndex; i++)
 8000598:	7afb      	ldrb	r3, [r7, #11]
 800059a:	3301      	adds	r3, #1
 800059c:	72fb      	strb	r3, [r7, #11]
 800059e:	7afa      	ldrb	r2, [r7, #11]
 80005a0:	79fb      	ldrb	r3, [r7, #7]
 80005a2:	429a      	cmp	r2, r3
 80005a4:	d3f5      	bcc.n	8000592 <display_SensorX+0x36>
	}
	Screen_Monitor_Node(current->SSnode.SSnode_ID, current->SSnode.Sensor_state,
 80005a6:	68fb      	ldr	r3, [r7, #12]
 80005a8:	7818      	ldrb	r0, [r3, #0]
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	7a19      	ldrb	r1, [r3, #8]
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	885a      	ldrh	r2, [r3, #2]
			current->SSnode.Battery, current->SSnode.V_type, current->SSnode.V_value);
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	791c      	ldrb	r4, [r3, #4]
	Screen_Monitor_Node(current->SSnode.SSnode_ID, current->SSnode.Sensor_state,
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	88db      	ldrh	r3, [r3, #6]
 80005ba:	b29b      	uxth	r3, r3
 80005bc:	9300      	str	r3, [sp, #0]
 80005be:	4623      	mov	r3, r4
 80005c0:	f007 f80a 	bl	80075d8 <Screen_Monitor_Node>

}
 80005c4:	3714      	adds	r7, #20
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd90      	pop	{r4, r7, pc}
 80005ca:	bf00      	nop
 80005cc:	20000478 	.word	0x20000478

080005d0 <setSwitchtime>:

void setSwitchtime()
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
	DS3231_GetTime(&switchtime);
 80005d4:	4802      	ldr	r0, [pc, #8]	; (80005e0 <setSwitchtime+0x10>)
 80005d6:	f003 fd73 	bl	80040c0 <DS3231_GetTime>
}
 80005da:	bf00      	nop
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	200005d0 	.word	0x200005d0

080005e4 <getSwitchtime>:
_RTC getSwitchtime()
{
 80005e4:	b480      	push	{r7}
 80005e6:	b083      	sub	sp, #12
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
	return switchtime;
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	4a06      	ldr	r2, [pc, #24]	; (8000608 <getSwitchtime+0x24>)
 80005f0:	6810      	ldr	r0, [r2, #0]
 80005f2:	6018      	str	r0, [r3, #0]
 80005f4:	8891      	ldrh	r1, [r2, #4]
 80005f6:	7992      	ldrb	r2, [r2, #6]
 80005f8:	8099      	strh	r1, [r3, #4]
 80005fa:	719a      	strb	r2, [r3, #6]
}
 80005fc:	6878      	ldr	r0, [r7, #4]
 80005fe:	370c      	adds	r7, #12
 8000600:	46bd      	mov	sp, r7
 8000602:	bc80      	pop	{r7}
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop
 8000608:	200005d0 	.word	0x200005d0

0800060c <processingApp_display>:
void processingApp_display()
{
 800060c:	b590      	push	{r4, r7, lr}
 800060e:	b083      	sub	sp, #12
 8000610:	af00      	add	r7, sp, #0

	if (getClearflag()) 	{
 8000612:	f003 fa35 	bl	8003a80 <getClearflag>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d004      	beq.n	8000626 <processingApp_display+0x1a>
		LCD_Clear();
 800061c:	f006 fe2a 	bl	8007274 <LCD_Clear>
		setClearflag(DISABLE);
 8000620:	2000      	movs	r0, #0
 8000622:	f003 fa39 	bl	8003a98 <setClearflag>
	}
	switch(*__MY_DISPLAY_MODE)	{
 8000626:	4b5a      	ldr	r3, [pc, #360]	; (8000790 <processingApp_display+0x184>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	2b09      	cmp	r3, #9
 800062e:	f200 80aa 	bhi.w	8000786 <processingApp_display+0x17a>
 8000632:	a201      	add	r2, pc, #4	; (adr r2, 8000638 <processingApp_display+0x2c>)
 8000634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000638:	08000661 	.word	0x08000661
 800063c:	08000675 	.word	0x08000675
 8000640:	0800069d 	.word	0x0800069d
 8000644:	080006a3 	.word	0x080006a3
 8000648:	080006cd 	.word	0x080006cd
 800064c:	080006db 	.word	0x080006db
 8000650:	08000751 	.word	0x08000751
 8000654:	0800076b 	.word	0x0800076b
 8000658:	0800072d 	.word	0x0800072d
 800065c:	08000709 	.word	0x08000709
		case HOME:
			Screen_Home_Origin(myStation.stID, MQTT_getConnectflag());
 8000660:	4b4c      	ldr	r3, [pc, #304]	; (8000794 <processingApp_display+0x188>)
 8000662:	785c      	ldrb	r4, [r3, #1]
 8000664:	f004 f9c8 	bl	80049f8 <MQTT_getConnectflag>
 8000668:	4603      	mov	r3, r0
 800066a:	4619      	mov	r1, r3
 800066c:	4620      	mov	r0, r4
 800066e:	f006 fe1b 	bl	80072a8 <Screen_Home_Origin>
			break;
 8000672:	e089      	b.n	8000788 <processingApp_display+0x17c>
		case COUNTDOWN_SW_OFF:
			countdowntime = getCountdowntime(myStation.calibTime.hour,
 8000674:	4b47      	ldr	r3, [pc, #284]	; (8000794 <processingApp_display+0x188>)
 8000676:	7cdb      	ldrb	r3, [r3, #19]
 8000678:	4a46      	ldr	r2, [pc, #280]	; (8000794 <processingApp_display+0x188>)
 800067a:	7d11      	ldrb	r1, [r2, #20]
 800067c:	4a45      	ldr	r2, [pc, #276]	; (8000794 <processingApp_display+0x188>)
 800067e:	7d52      	ldrb	r2, [r2, #21]
 8000680:	4618      	mov	r0, r3
 8000682:	f003 ff37 	bl	80044f4 <getCountdowntime>
 8000686:	4603      	mov	r3, r0
 8000688:	461a      	mov	r2, r3
 800068a:	4b43      	ldr	r3, [pc, #268]	; (8000798 <processingApp_display+0x18c>)
 800068c:	801a      	strh	r2, [r3, #0]
												myStation.calibTime.min, myStation.calibTime.sec);
			Screen_Home_Sync(countdowntime);
 800068e:	4b42      	ldr	r3, [pc, #264]	; (8000798 <processingApp_display+0x18c>)
 8000690:	881b      	ldrh	r3, [r3, #0]
 8000692:	b2db      	uxtb	r3, r3
 8000694:	4618      	mov	r0, r3
 8000696:	f006 fe99 	bl	80073cc <Screen_Home_Sync>
			break;
 800069a:	e075      	b.n	8000788 <processingApp_display+0x17c>
		case AFTER_SW_OFF:
			Screen_Home_Calib();
 800069c:	f006 feda 	bl	8007454 <Screen_Home_Calib>
			break;
 80006a0:	e072      	b.n	8000788 <processingApp_display+0x17c>
		case MONITOR:

			if (get_curMonitor() == 0) 	{
 80006a2:	f003 fa63 	bl	8003b6c <get_curMonitor>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d108      	bne.n	80006be <processingApp_display+0xb2>
				Screen_Monitor_Station(myStation.MBAstate, myStation.stCurrent);
 80006ac:	4b39      	ldr	r3, [pc, #228]	; (8000794 <processingApp_display+0x188>)
 80006ae:	799b      	ldrb	r3, [r3, #6]
 80006b0:	4a38      	ldr	r2, [pc, #224]	; (8000794 <processingApp_display+0x188>)
 80006b2:	8852      	ldrh	r2, [r2, #2]
 80006b4:	4611      	mov	r1, r2
 80006b6:	4618      	mov	r0, r3
 80006b8:	f006 ff2c 	bl	8007514 <Screen_Monitor_Station>
			}
			else {
				display_SensorX(get_curMonitor());
			}
			break;
 80006bc:	e064      	b.n	8000788 <processingApp_display+0x17c>
				display_SensorX(get_curMonitor());
 80006be:	f003 fa55 	bl	8003b6c <get_curMonitor>
 80006c2:	4603      	mov	r3, r0
 80006c4:	4618      	mov	r0, r3
 80006c6:	f7ff ff49 	bl	800055c <display_SensorX>
			break;
 80006ca:	e05d      	b.n	8000788 <processingApp_display+0x17c>
		case MENU_CONTROL:
			Screen_Function(getcurControl());
 80006cc:	f003 fa0c 	bl	8003ae8 <getcurControl>
 80006d0:	4603      	mov	r3, r0
 80006d2:	4618      	mov	r0, r3
 80006d4:	f007 f82c 	bl	8007730 <Screen_Function>
			break;
 80006d8:	e056      	b.n	8000788 <processingApp_display+0x17c>
		case VOLTAGE_CONTROL:
			Screen_Voltage_Control(getLimit(), getStepValorDir());
 80006da:	f003 f87f 	bl	80037dc <getLimit>
 80006de:	4603      	mov	r3, r0
 80006e0:	461c      	mov	r4, r3
 80006e2:	f003 f9b9 	bl	8003a58 <getStepValorDir>
 80006e6:	4603      	mov	r3, r0
 80006e8:	4619      	mov	r1, r3
 80006ea:	4620      	mov	r0, r4
 80006ec:	f007 f85a 	bl	80077a4 <Screen_Voltage_Control>
			Screen_Voltage_Control_Control_Motor(getStepchange(), Step_getDir());
 80006f0:	f003 f8dc 	bl	80038ac <getStepchange>
 80006f4:	4603      	mov	r3, r0
 80006f6:	461c      	mov	r4, r3
 80006f8:	f003 f87a 	bl	80037f0 <Step_getDir>
 80006fc:	4603      	mov	r3, r0
 80006fe:	4619      	mov	r1, r3
 8000700:	4620      	mov	r0, r4
 8000702:	f007 f951 	bl	80079a8 <Screen_Voltage_Control_Control_Motor>
			break;
 8000706:	e03f      	b.n	8000788 <processingApp_display+0x17c>
		case STEP_DIR_CONTROL:
			Screen_Dir_Control(getLimit());
 8000708:	f003 f868 	bl	80037dc <getLimit>
 800070c:	4603      	mov	r3, r0
 800070e:	4618      	mov	r0, r3
 8000710:	f007 f8aa 	bl	8007868 <Screen_Dir_Control>
			Screen_Voltage_Control_Control_Motor(getStepchange(), Step_getDir());
 8000714:	f003 f8ca 	bl	80038ac <getStepchange>
 8000718:	4603      	mov	r3, r0
 800071a:	461c      	mov	r4, r3
 800071c:	f003 f868 	bl	80037f0 <Step_getDir>
 8000720:	4603      	mov	r3, r0
 8000722:	4619      	mov	r1, r3
 8000724:	4620      	mov	r0, r4
 8000726:	f007 f93f 	bl	80079a8 <Screen_Voltage_Control_Control_Motor>
			break;
 800072a:	e02d      	b.n	8000788 <processingApp_display+0x17c>
		case STEP_VAL_CONTROL:
			Screen_StepVal_Control(getLimit());
 800072c:	f003 f856 	bl	80037dc <getLimit>
 8000730:	4603      	mov	r3, r0
 8000732:	4618      	mov	r0, r3
 8000734:	f007 f8e8 	bl	8007908 <Screen_StepVal_Control>
			Screen_Voltage_Control_Control_Motor(getStepchange(), Step_getDir());
 8000738:	f003 f8b8 	bl	80038ac <getStepchange>
 800073c:	4603      	mov	r3, r0
 800073e:	461c      	mov	r4, r3
 8000740:	f003 f856 	bl	80037f0 <Step_getDir>
 8000744:	4603      	mov	r3, r0
 8000746:	4619      	mov	r1, r3
 8000748:	4620      	mov	r0, r4
 800074a:	f007 f92d 	bl	80079a8 <Screen_Voltage_Control_Control_Motor>
			break;
 800074e:	e01b      	b.n	8000788 <processingApp_display+0x17c>
		case ON_OFF_CONTROL:
			Screen_Control_Relay(1);
 8000750:	2001      	movs	r0, #1
 8000752:	f007 f95d 	bl	8007a10 <Screen_Control_Relay>
			Screen_Control_Relay_Change_Mode(myStation.MBAstate, getCurswitch());
 8000756:	4b0f      	ldr	r3, [pc, #60]	; (8000794 <processingApp_display+0x188>)
 8000758:	799c      	ldrb	r4, [r3, #6]
 800075a:	f003 f987 	bl	8003a6c <getCurswitch>
 800075e:	4603      	mov	r3, r0
 8000760:	4619      	mov	r1, r3
 8000762:	4620      	mov	r0, r4
 8000764:	f007 f99a 	bl	8007a9c <Screen_Control_Relay_Change_Mode>
			break;
 8000768:	e00e      	b.n	8000788 <processingApp_display+0x17c>
		case COMPLETE_CONTROL:
			Screen_Accept_Relay(getSwitchtime(), getCurswitch());
 800076a:	463b      	mov	r3, r7
 800076c:	4618      	mov	r0, r3
 800076e:	f7ff ff39 	bl	80005e4 <getSwitchtime>
 8000772:	f003 f97b 	bl	8003a6c <getCurswitch>
 8000776:	4603      	mov	r3, r0
 8000778:	461a      	mov	r2, r3
 800077a:	463b      	mov	r3, r7
 800077c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000780:	f007 f9bc 	bl	8007afc <Screen_Accept_Relay>
			break;
 8000784:	e000      	b.n	8000788 <processingApp_display+0x17c>
		default:
			break;
 8000786:	bf00      	nop
		}
//	Screen_Home_Origin(myStation.stID);

//	Screen_Home_Sync(countdowntime);
}
 8000788:	bf00      	nop
 800078a:	370c      	adds	r7, #12
 800078c:	46bd      	mov	sp, r7
 800078e:	bd90      	pop	{r4, r7, pc}
 8000790:	200005c4 	.word	0x200005c4
 8000794:	20000478 	.word	0x20000478
 8000798:	200005cc 	.word	0x200005cc

0800079c <initApp_MBA_stepmor>:
#include "Step_motor.h"
#include "user_a4988.h"

static Stepmotor_change_mode_t changeMode;
void initApp_MBA_stepmor()
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0

}
 80007a0:	bf00      	nop
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bc80      	pop	{r7}
 80007a6:	4770      	bx	lr

080007a8 <processingApp_MBA_stepmor>:

void processingApp_MBA_stepmor()
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
	if(checkTaskflag(TASK_CTRL_STEPMOR))	{
 80007ac:	2006      	movs	r0, #6
 80007ae:	f004 fe49 	bl	8005444 <checkTaskflag>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d034      	beq.n	8000822 <processingApp_MBA_stepmor+0x7a>
		switch ( getLimit() )	{
 80007b8:	f003 f810 	bl	80037dc <getLimit>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d00a      	beq.n	80007d8 <processingApp_MBA_stepmor+0x30>
 80007c2:	2b01      	cmp	r3, #1
 80007c4:	d111      	bne.n	80007ea <processingApp_MBA_stepmor+0x42>
		case LIMIT_MAX:
			if (Step_getDir() == STEPM_DIR_DEC)	{
 80007c6:	f003 f813 	bl	80037f0 <Step_getDir>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b02      	cmp	r3, #2
 80007ce:	d10e      	bne.n	80007ee <processingApp_MBA_stepmor+0x46>
				setLimit(LIMIT_NONE);
 80007d0:	2002      	movs	r0, #2
 80007d2:	f002 fff3 	bl	80037bc <setLimit>
			}
			break;
 80007d6:	e00a      	b.n	80007ee <processingApp_MBA_stepmor+0x46>
		case LIMIT_MIN:
			if (Step_getDir() == STEPM_DIR_INC)	{
 80007d8:	f003 f80a 	bl	80037f0 <Step_getDir>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b01      	cmp	r3, #1
 80007e0:	d107      	bne.n	80007f2 <processingApp_MBA_stepmor+0x4a>
				setLimit(LIMIT_NONE);
 80007e2:	2002      	movs	r0, #2
 80007e4:	f002 ffea 	bl	80037bc <setLimit>
			}
			break;
 80007e8:	e003      	b.n	80007f2 <processingApp_MBA_stepmor+0x4a>
		default :
			break;
 80007ea:	bf00      	nop
 80007ec:	e002      	b.n	80007f4 <processingApp_MBA_stepmor+0x4c>
			break;
 80007ee:	bf00      	nop
 80007f0:	e000      	b.n	80007f4 <processingApp_MBA_stepmor+0x4c>
			break;
 80007f2:	bf00      	nop
		}
		changeMode = Step_getChangemode();
 80007f4:	f003 f8a0 	bl	8003938 <Step_getChangemode>
 80007f8:	4603      	mov	r3, r0
 80007fa:	461a      	mov	r2, r3
 80007fc:	4b0a      	ldr	r3, [pc, #40]	; (8000828 <processingApp_MBA_stepmor+0x80>)
 80007fe:	701a      	strb	r2, [r3, #0]
		switch (changeMode)	{
 8000800:	4b09      	ldr	r3, [pc, #36]	; (8000828 <processingApp_MBA_stepmor+0x80>)
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	2b01      	cmp	r3, #1
 8000806:	d004      	beq.n	8000812 <processingApp_MBA_stepmor+0x6a>
 8000808:	2b02      	cmp	r3, #2
 800080a:	d105      	bne.n	8000818 <processingApp_MBA_stepmor+0x70>
		case STEPM_MODE_STEP:
			Step_step();
 800080c:	f003 f89e 	bl	800394c <Step_step>
			break;
 8000810:	e003      	b.n	800081a <processingApp_MBA_stepmor+0x72>
		case STEPM_MODE_PERCENTAGE:
			Step_percent();
 8000812:	f003 f8cf 	bl	80039b4 <Step_percent>
			break;
 8000816:	e000      	b.n	800081a <processingApp_MBA_stepmor+0x72>
		default:
			break;
 8000818:	bf00      	nop
		}

		triggerTaskflag(TASK_CTRL_STEPMOR, FLAG_DIS);
 800081a:	2100      	movs	r1, #0
 800081c:	2006      	movs	r0, #6
 800081e:	f004 ff25 	bl	800566c <triggerTaskflag>
	}
}
 8000822:	bf00      	nop
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	200005d7 	.word	0x200005d7

0800082c <processApp_MCU>:
//			current = current->next;
//		}
//	return count;
//}
void processApp_MCU(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
		/*Check for task*/
		if ( checkTaskflag(TASK_PREPARE_CALIB) )	{
 8000830:	2002      	movs	r0, #2
 8000832:	f004 fe07 	bl	8005444 <checkTaskflag>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d013      	beq.n	8000864 <processApp_MCU+0x38>

			//Synchronize RTC time for Station and Sensor
			triggerTaskflag(TASK_GET_GPS_TIME, FLAG_EN);
 800083c:	2101      	movs	r1, #1
 800083e:	2007      	movs	r0, #7
 8000840:	f004 ff14 	bl	800566c <triggerTaskflag>

			// Send WAKEUP command for Sensor
			Lora_Setmode(WAKE);
 8000844:	2001      	movs	r0, #1
 8000846:	f004 f89d 	bl	8004984 <Lora_Setmode>
			// Start timer 100s
			NWRDtick = HAL_GetTick();
 800084a:	f007 fa3d 	bl	8007cc8 <HAL_GetTick>
 800084e:	4603      	mov	r3, r0
 8000850:	4a2c      	ldr	r2, [pc, #176]	; (8000904 <processApp_MCU+0xd8>)
 8000852:	6013      	str	r3, [r2, #0]
			// Trigger send NETWORK READY message to Server
			triggerTaskflag(TASK_SEND_NWREADY, FLAG_EN);
 8000854:	2101      	movs	r1, #1
 8000856:	2008      	movs	r0, #8
 8000858:	f004 ff08 	bl	800566c <triggerTaskflag>

			triggerTaskflag(TASK_PREPARE_CALIB, FLAG_DIS);
 800085c:	2100      	movs	r1, #0
 800085e:	2002      	movs	r0, #2
 8000860:	f004 ff04 	bl	800566c <triggerTaskflag>
		}

		if ((HAL_GetTick() - NWRDtick > 100000) && checkTaskflag(TASK_SEND_NWREADY))	{
 8000864:	f007 fa30 	bl	8007cc8 <HAL_GetTick>
 8000868:	4602      	mov	r2, r0
 800086a:	4b26      	ldr	r3, [pc, #152]	; (8000904 <processApp_MCU+0xd8>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	1ad3      	subs	r3, r2, r3
 8000870:	4a25      	ldr	r2, [pc, #148]	; (8000908 <processApp_MCU+0xdc>)
 8000872:	4293      	cmp	r3, r2
 8000874:	d908      	bls.n	8000888 <processApp_MCU+0x5c>
 8000876:	2008      	movs	r0, #8
 8000878:	f004 fde4 	bl	8005444 <checkTaskflag>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d002      	beq.n	8000888 <processApp_MCU+0x5c>
			sendData2Server(DATA_NETWREADY);
 8000882:	2002      	movs	r0, #2
 8000884:	f001 f8d0 	bl	8001a28 <sendData2Server>
		}
		// Calibration Mode
		if (checkStationMode() == STATION_MODE_CALIB)	{
 8000888:	f005 fbea 	bl	8006060 <checkStationMode>
 800088c:	4603      	mov	r3, r0
 800088e:	2b01      	cmp	r3, #1
 8000890:	d11e      	bne.n	80008d0 <processApp_MCU+0xa4>
			if( checkTaskflag(TASK_START_CALIB) ) {
 8000892:	2003      	movs	r0, #3
 8000894:	f004 fdd6 	bl	8005444 <checkTaskflag>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d007      	beq.n	80008ae <processApp_MCU+0x82>
				// Receive Sensor DATA CALIBRATION

				// Send DATA CALIBRATION to Server
				triggerTaskflag(TASK_SEND_DATACALIB, FLAG_EN);
 800089e:	2101      	movs	r1, #1
 80008a0:	200a      	movs	r0, #10
 80008a2:	f004 fee3 	bl	800566c <triggerTaskflag>
				triggerTaskflag(TASK_START_CALIB, FLAG_DIS);
 80008a6:	2100      	movs	r1, #0
 80008a8:	2003      	movs	r0, #3
 80008aa:	f004 fedf 	bl	800566c <triggerTaskflag>
			}

			if (checkTaskflag(TASK_CTRL_STEPMOR))	{
 80008ae:	2006      	movs	r0, #6
 80008b0:	f004 fdc8 	bl	8005444 <checkTaskflag>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d00a      	beq.n	80008d0 <processApp_MCU+0xa4>
				// Control step motor for desire output

				// Send data after calibration
				triggerTaskflag(TASK_SEND_DATAAFTERCALIB, FLAG_EN);
 80008ba:	2101      	movs	r1, #1
 80008bc:	200b      	movs	r0, #11
 80008be:	f004 fed5 	bl	800566c <triggerTaskflag>
				setStationMode(STATION_MODE_NORMAL);
 80008c2:	2000      	movs	r0, #0
 80008c4:	f005 fbbc 	bl	8006040 <setStationMode>
				triggerTaskflag(TASK_CTRL_STEPMOR, FLAG_DIS);
 80008c8:	2100      	movs	r1, #0
 80008ca:	2006      	movs	r0, #6
 80008cc:	f004 fece 	bl	800566c <triggerTaskflag>
			}
		}

	// Normal Mode
	if (checkStationMode() == STATION_MODE_NORMAL)	{
 80008d0:	f005 fbc6 	bl	8006060 <checkStationMode>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d112      	bne.n	8000900 <processApp_MCU+0xd4>

		// Send data period
		if (HAL_GetTick() - tick >= UPDATE_DATA_PERIOD *1000)	{
 80008da:	f007 f9f5 	bl	8007cc8 <HAL_GetTick>
 80008de:	4602      	mov	r2, r0
 80008e0:	4b0a      	ldr	r3, [pc, #40]	; (800090c <processApp_MCU+0xe0>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	1ad3      	subs	r3, r2, r3
 80008e6:	f242 720f 	movw	r2, #9999	; 0x270f
 80008ea:	4293      	cmp	r3, r2
 80008ec:	d908      	bls.n	8000900 <processApp_MCU+0xd4>
			triggerTaskflag(TASK_SEND_DATAPERIOD, FLAG_EN);
 80008ee:	2101      	movs	r1, #1
 80008f0:	2009      	movs	r0, #9
 80008f2:	f004 febb 	bl	800566c <triggerTaskflag>
			tick = HAL_GetTick();
 80008f6:	f007 f9e7 	bl	8007cc8 <HAL_GetTick>
 80008fa:	4603      	mov	r3, r0
 80008fc:	4a03      	ldr	r2, [pc, #12]	; (800090c <processApp_MCU+0xe0>)
 80008fe:	6013      	str	r3, [r2, #0]
		}
	}



}
 8000900:	bf00      	nop
 8000902:	bd80      	pop	{r7, pc}
 8000904:	200005dc 	.word	0x200005dc
 8000908:	000186a0 	.word	0x000186a0
 800090c:	200005d8 	.word	0x200005d8

08000910 <initApp_MQTT>:
//static Station_t *myStation;
//static SIM_t *mySim;
uint8_t buffer [10];
uint8_t stIDbuffer[] = {1,2,3,4,5};
void initApp_MQTT()
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af02      	add	r7, sp, #8
//	myStation = station;
//	mySim = sim;
	init_MQTT();
 8000916:	f004 f869 	bl	80049ec <init_MQTT>
	initServerMsg();
 800091a:	f000 fc5b 	bl	80011d4 <initServerMsg>
	SIM_sendCMD((uint8_t*)"ATE0",(uint8_t*)"OK", ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, 1000);
 800091e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000922:	9300      	str	r3, [sp, #0]
 8000924:	2301      	movs	r3, #1
 8000926:	2201      	movs	r2, #1
 8000928:	4903      	ldr	r1, [pc, #12]	; (8000938 <initApp_MQTT+0x28>)
 800092a:	4804      	ldr	r0, [pc, #16]	; (800093c <initApp_MQTT+0x2c>)
 800092c:	f001 fec8 	bl	80026c0 <SIM_sendCMD>
}
 8000930:	bf00      	nop
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	0800eca8 	.word	0x0800eca8
 800093c:	0800ecac 	.word	0x0800ecac

08000940 <dataCalibavailble>:

uint8_t dataCalibavailble()
{
 8000940:	b480      	push	{r7}
 8000942:	b083      	sub	sp, #12
 8000944:	af00      	add	r7, sp, #0
	Node * current =myStation.ssNode_list->head->next;
 8000946:	4b0d      	ldr	r3, [pc, #52]	; (800097c <dataCalibavailble+0x3c>)
 8000948:	68db      	ldr	r3, [r3, #12]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800094e:	607b      	str	r3, [r7, #4]
		while (current != myStation.ssNode_list->tail)	{
 8000950:	e008      	b.n	8000964 <dataCalibavailble+0x24>
			if (current->SSnode.dataCalibAvailable) 	{
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	7a5b      	ldrb	r3, [r3, #9]
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <dataCalibavailble+0x1e>
				return 1;
 800095a:	2301      	movs	r3, #1
 800095c:	e009      	b.n	8000972 <dataCalibavailble+0x32>
			}
			current = current->next;
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000962:	607b      	str	r3, [r7, #4]
		while (current != myStation.ssNode_list->tail)	{
 8000964:	4b05      	ldr	r3, [pc, #20]	; (800097c <dataCalibavailble+0x3c>)
 8000966:	68db      	ldr	r3, [r3, #12]
 8000968:	685b      	ldr	r3, [r3, #4]
 800096a:	687a      	ldr	r2, [r7, #4]
 800096c:	429a      	cmp	r2, r3
 800096e:	d1f0      	bne.n	8000952 <dataCalibavailble+0x12>
		}
	return 0;
 8000970:	2300      	movs	r3, #0
}
 8000972:	4618      	mov	r0, r3
 8000974:	370c      	adds	r7, #12
 8000976:	46bd      	mov	sp, r7
 8000978:	bc80      	pop	{r7}
 800097a:	4770      	bx	lr
 800097c:	20000478 	.word	0x20000478

08000980 <checkSensorState>:

uint8_t checkSensorState(sensor_state_t state)
{
 8000980:	b480      	push	{r7}
 8000982:	b085      	sub	sp, #20
 8000984:	af00      	add	r7, sp, #0
 8000986:	4603      	mov	r3, r0
 8000988:	71fb      	strb	r3, [r7, #7]
	uint8_t count = 0;
 800098a:	2300      	movs	r3, #0
 800098c:	73fb      	strb	r3, [r7, #15]
	Node * current =myStation.ssNode_list->head->next;
 800098e:	4b0e      	ldr	r3, [pc, #56]	; (80009c8 <checkSensorState+0x48>)
 8000990:	68db      	ldr	r3, [r3, #12]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000996:	60bb      	str	r3, [r7, #8]
		while (current != myStation.ssNode_list->tail)	{
 8000998:	e00a      	b.n	80009b0 <checkSensorState+0x30>
			if (current->SSnode.Sensor_state == state ) 	{
 800099a:	68bb      	ldr	r3, [r7, #8]
 800099c:	7a1b      	ldrb	r3, [r3, #8]
 800099e:	79fa      	ldrb	r2, [r7, #7]
 80009a0:	429a      	cmp	r2, r3
 80009a2:	d102      	bne.n	80009aa <checkSensorState+0x2a>
				count++;
 80009a4:	7bfb      	ldrb	r3, [r7, #15]
 80009a6:	3301      	adds	r3, #1
 80009a8:	73fb      	strb	r3, [r7, #15]
			}
			current = current->next;
 80009aa:	68bb      	ldr	r3, [r7, #8]
 80009ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80009ae:	60bb      	str	r3, [r7, #8]
		while (current != myStation.ssNode_list->tail)	{
 80009b0:	4b05      	ldr	r3, [pc, #20]	; (80009c8 <checkSensorState+0x48>)
 80009b2:	68db      	ldr	r3, [r3, #12]
 80009b4:	685b      	ldr	r3, [r3, #4]
 80009b6:	68ba      	ldr	r2, [r7, #8]
 80009b8:	429a      	cmp	r2, r3
 80009ba:	d1ee      	bne.n	800099a <checkSensorState+0x1a>
		}
	return count;
 80009bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80009be:	4618      	mov	r0, r3
 80009c0:	3714      	adds	r7, #20
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bc80      	pop	{r7}
 80009c6:	4770      	bx	lr
 80009c8:	20000478 	.word	0x20000478

080009cc <checkSensorMode>:

uint8_t checkSensorMode(sensor_mode_t mode)
{
 80009cc:	b480      	push	{r7}
 80009ce:	b085      	sub	sp, #20
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	4603      	mov	r3, r0
 80009d4:	71fb      	strb	r3, [r7, #7]
	uint8_t count = 0;
 80009d6:	2300      	movs	r3, #0
 80009d8:	73fb      	strb	r3, [r7, #15]
	Node * current =myStation.ssNode_list->head->next;
 80009da:	4b0e      	ldr	r3, [pc, #56]	; (8000a14 <checkSensorMode+0x48>)
 80009dc:	68db      	ldr	r3, [r3, #12]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80009e2:	60bb      	str	r3, [r7, #8]
		while (current != myStation.ssNode_list->tail)	{
 80009e4:	e00a      	b.n	80009fc <checkSensorMode+0x30>
			if (current->SSnode.sensorMode == mode ) 	{
 80009e6:	68bb      	ldr	r3, [r7, #8]
 80009e8:	7adb      	ldrb	r3, [r3, #11]
 80009ea:	79fa      	ldrb	r2, [r7, #7]
 80009ec:	429a      	cmp	r2, r3
 80009ee:	d102      	bne.n	80009f6 <checkSensorMode+0x2a>
				count++;
 80009f0:	7bfb      	ldrb	r3, [r7, #15]
 80009f2:	3301      	adds	r3, #1
 80009f4:	73fb      	strb	r3, [r7, #15]
			}
			current = current->next;
 80009f6:	68bb      	ldr	r3, [r7, #8]
 80009f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80009fa:	60bb      	str	r3, [r7, #8]
		while (current != myStation.ssNode_list->tail)	{
 80009fc:	4b05      	ldr	r3, [pc, #20]	; (8000a14 <checkSensorMode+0x48>)
 80009fe:	68db      	ldr	r3, [r3, #12]
 8000a00:	685b      	ldr	r3, [r3, #4]
 8000a02:	68ba      	ldr	r2, [r7, #8]
 8000a04:	429a      	cmp	r2, r3
 8000a06:	d1ee      	bne.n	80009e6 <checkSensorMode+0x1a>
		}
	return count;
 8000a08:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	3714      	adds	r7, #20
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bc80      	pop	{r7}
 8000a12:	4770      	bx	lr
 8000a14:	20000478 	.word	0x20000478

08000a18 <sendNWready>:
void sendNWready()
{
 8000a18:	b598      	push	{r3, r4, r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
	if ( checkSensorMode(WAKE) + checkSensorState(SENSOR_DEACTIVE) == myStation.ssNode_list->length  )	{
 8000a1c:	2001      	movs	r0, #1
 8000a1e:	f7ff ffd5 	bl	80009cc <checkSensorMode>
 8000a22:	4603      	mov	r3, r0
 8000a24:	461c      	mov	r4, r3
 8000a26:	2002      	movs	r0, #2
 8000a28:	f7ff ffaa 	bl	8000980 <checkSensorState>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	4423      	add	r3, r4
 8000a30:	461a      	mov	r2, r3
 8000a32:	4b05      	ldr	r3, [pc, #20]	; (8000a48 <sendNWready+0x30>)
 8000a34:	68db      	ldr	r3, [r3, #12]
 8000a36:	689b      	ldr	r3, [r3, #8]
 8000a38:	429a      	cmp	r2, r3
 8000a3a:	d102      	bne.n	8000a42 <sendNWready+0x2a>
		sendData2Server(DATA_CALIB);
 8000a3c:	2005      	movs	r0, #5
 8000a3e:	f000 fff3 	bl	8001a28 <sendData2Server>
	}
}
 8000a42:	bf00      	nop
 8000a44:	bd98      	pop	{r3, r4, r7, pc}
 8000a46:	bf00      	nop
 8000a48:	20000478 	.word	0x20000478

08000a4c <processApp_MQTT>:
void processApp_MQTT(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af02      	add	r7, sp, #8
	// Check for connection to MQTT broker
	if ( !MQTT_connected() ) {
 8000a52:	f004 f929 	bl	8004ca8 <MQTT_connected>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d105      	bne.n	8000a68 <processApp_MQTT+0x1c>
		triggerTaskflag(TASK_SUBSCRIBE, FLAG_EN);
 8000a5c:	2101      	movs	r1, #1
 8000a5e:	2001      	movs	r0, #1
 8000a60:	f004 fe04 	bl	800566c <triggerTaskflag>
		MQTT_connect();
 8000a64:	f004 faa8 	bl	8004fb8 <MQTT_connect>
	}
	// Check for subscribe to broker
	if ( mySIM.mqttServer.connect && checkTaskflag(TASK_SUBSCRIBE) ) {
 8000a68:	4b93      	ldr	r3, [pc, #588]	; (8000cb8 <processApp_MQTT+0x26c>)
 8000a6a:	7e9b      	ldrb	r3, [r3, #26]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d00f      	beq.n	8000a90 <processApp_MQTT+0x44>
 8000a70:	2001      	movs	r0, #1
 8000a72:	f004 fce7 	bl	8005444 <checkTaskflag>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d009      	beq.n	8000a90 <processApp_MQTT+0x44>

		if ( MQTT_subcribe( (uint8_t*)TOPIC_SUB ) ) {
 8000a7c:	488f      	ldr	r0, [pc, #572]	; (8000cbc <processApp_MQTT+0x270>)
 8000a7e:	f004 fb8b 	bl	8005198 <MQTT_subcribe>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d003      	beq.n	8000a90 <processApp_MQTT+0x44>
			triggerTaskflag(TASK_SUBSCRIBE, FLAG_DIS);
 8000a88:	2100      	movs	r1, #0
 8000a8a:	2001      	movs	r0, #1
 8000a8c:	f004 fdee 	bl	800566c <triggerTaskflag>
		}
	}
	// Check for register to Server
	if ( checkTaskflag(TASK_REGISTER) )	{
 8000a90:	2000      	movs	r0, #0
 8000a92:	f004 fcd7 	bl	8005444 <checkTaskflag>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <processApp_MQTT+0x54>
		Register2Server();
 8000a9c:	f000 fed6 	bl	800184c <Register2Server>
	}
	// Send NETWORK READY message to Server
	if ( checkTaskflag(TASK_SEND_NWREADY))	{
 8000aa0:	2008      	movs	r0, #8
 8000aa2:	f004 fccf 	bl	8005444 <checkTaskflag>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <processApp_MQTT+0x64>
		sendNWready();
 8000aac:	f7ff ffb4 	bl	8000a18 <sendNWready>
	}
	// Send DATA CALIB
	if(checkTaskflag(TASK_SEND_DATACALIB) && dataCalibavailble())	{
 8000ab0:	200a      	movs	r0, #10
 8000ab2:	f004 fcc7 	bl	8005444 <checkTaskflag>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <processApp_MQTT+0x74>
 8000abc:	f7ff ff40 	bl	8000940 <dataCalibavailble>

	}
	// Send DATA AFTER CALIB
	if (checkTaskflag(TASK_SEND_DATAAFTERCALIB) )	{
 8000ac0:	200b      	movs	r0, #11
 8000ac2:	f004 fcbf 	bl	8005444 <checkTaskflag>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d006      	beq.n	8000ada <processApp_MQTT+0x8e>
		triggerTaskflag(TASK_SEND_DATACALIB, FLAG_DIS);
 8000acc:	2100      	movs	r1, #0
 8000ace:	200a      	movs	r0, #10
 8000ad0:	f004 fdcc 	bl	800566c <triggerTaskflag>
		sendData2Server(DATA_AFTERCALIB);
 8000ad4:	2007      	movs	r0, #7
 8000ad6:	f000 ffa7 	bl	8001a28 <sendData2Server>
	}

	// Send DATA PERIOD
	if (checkTaskflag(TASK_SEND_DATAPERIOD))	{
 8000ada:	2009      	movs	r0, #9
 8000adc:	f004 fcb2 	bl	8005444 <checkTaskflag>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d002      	beq.n	8000aec <processApp_MQTT+0xa0>
		sendData2Server(DATA_PERIOD);
 8000ae6:	2001      	movs	r0, #1
 8000ae8:	f000 ff9e 	bl	8001a28 <sendData2Server>
	}
	// Send MBA status
	if (checkTaskflag(TASK_SEND_MBA_STATUS))	{
 8000aec:	2004      	movs	r0, #4
 8000aee:	f004 fca9 	bl	8005444 <checkTaskflag>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d006      	beq.n	8000b06 <processApp_MQTT+0xba>
		sendData2Server(DATA_MBA_STATE);
 8000af8:	2008      	movs	r0, #8
 8000afa:	f000 ff95 	bl	8001a28 <sendData2Server>
		triggerTaskflag(TASK_SEND_MBA_STATUS, FLAG_DIS);
 8000afe:	2100      	movs	r1, #0
 8000b00:	2004      	movs	r0, #4
 8000b02:	f004 fdb3 	bl	800566c <triggerTaskflag>
	}
	// Send step Reach Limit
	if (checkTaskflag(TASK_SEND_STEP_LIMIT))	{
 8000b06:	2005      	movs	r0, #5
 8000b08:	f004 fc9c 	bl	8005444 <checkTaskflag>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d006      	beq.n	8000b20 <processApp_MQTT+0xd4>
		sendData2Server(DATA_STEP_REACH_LIMIT);
 8000b12:	2009      	movs	r0, #9
 8000b14:	f000 ff88 	bl	8001a28 <sendData2Server>
		triggerTaskflag(TASK_SEND_STEP_LIMIT, FLAG_DIS);
 8000b18:	2100      	movs	r1, #0
 8000b1a:	2005      	movs	r0, #5
 8000b1c:	f004 fda6 	bl	800566c <triggerTaskflag>
	}
	// SMS control MBA
	if(checkTaskflag(TASK_SEND_CTRLMBA))	{
 8000b20:	200c      	movs	r0, #12
 8000b22:	f004 fc8f 	bl	8005444 <checkTaskflag>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d028      	beq.n	8000b7e <processApp_MQTT+0x132>
		if (checkSMSrequest(SMS_CMD_CTRL_ON) )	{
 8000b2c:	2000      	movs	r0, #0
 8000b2e:	f002 fbb1 	bl	8003294 <checkSMSrequest>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d00c      	beq.n	8000b52 <processApp_MQTT+0x106>
			CMD_SMS_Ctrl_MBA(mySIM.sms.CtrlON.data, mySIM.sms.CtrlON.datalength, MBA_ON);
 8000b38:	4b5f      	ldr	r3, [pc, #380]	; (8000cb8 <processApp_MQTT+0x26c>)
 8000b3a:	f8b3 3166 	ldrh.w	r3, [r3, #358]	; 0x166
 8000b3e:	2201      	movs	r2, #1
 8000b40:	4619      	mov	r1, r3
 8000b42:	485f      	ldr	r0, [pc, #380]	; (8000cc0 <processApp_MQTT+0x274>)
 8000b44:	f001 fb6a 	bl	800221c <CMD_SMS_Ctrl_MBA>
			triggerSMSrequest(SMS_CMD_CTRL_ON, SMS_CMD_DISABLE);
 8000b48:	2100      	movs	r1, #0
 8000b4a:	2000      	movs	r0, #0
 8000b4c:	f002 fc2a 	bl	80033a4 <triggerSMSrequest>
 8000b50:	e011      	b.n	8000b76 <processApp_MQTT+0x12a>
		}
		else if (checkSMSrequest(SMS_CMD_CTRL_OFF))	{
 8000b52:	2001      	movs	r0, #1
 8000b54:	f002 fb9e 	bl	8003294 <checkSMSrequest>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d00b      	beq.n	8000b76 <processApp_MQTT+0x12a>
			CMD_SMS_Ctrl_MBA(mySIM.sms.CtrlOFF.data, mySIM.sms.CtrlOFF.datalength, MBA_OFF);
 8000b5e:	4b56      	ldr	r3, [pc, #344]	; (8000cb8 <processApp_MQTT+0x26c>)
 8000b60:	f8b3 3278 	ldrh.w	r3, [r3, #632]	; 0x278
 8000b64:	2202      	movs	r2, #2
 8000b66:	4619      	mov	r1, r3
 8000b68:	4856      	ldr	r0, [pc, #344]	; (8000cc4 <processApp_MQTT+0x278>)
 8000b6a:	f001 fb57 	bl	800221c <CMD_SMS_Ctrl_MBA>
			triggerSMSrequest(SMS_CMD_CTRL_OFF, SMS_CMD_DISABLE);
 8000b6e:	2100      	movs	r1, #0
 8000b70:	2001      	movs	r0, #1
 8000b72:	f002 fc17 	bl	80033a4 <triggerSMSrequest>
		}
		triggerTaskflag(TASK_SEND_CTRLMBA, FLAG_DIS);
 8000b76:	2100      	movs	r1, #0
 8000b78:	200c      	movs	r0, #12
 8000b7a:	f004 fd77 	bl	800566c <triggerTaskflag>
	}
	// SMS control step motor
	if(checkTaskflag(TASK_SEND_CTRLSTEPMOR))	{
 8000b7e:	200d      	movs	r0, #13
 8000b80:	f004 fc60 	bl	8005444 <checkTaskflag>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d02c      	beq.n	8000be4 <processApp_MQTT+0x198>
		if (checkSMSrequest(SMS_CMD_CTRL_INC) )	{
 8000b8a:	2003      	movs	r0, #3
 8000b8c:	f002 fb82 	bl	8003294 <checkSMSrequest>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d00e      	beq.n	8000bb4 <processApp_MQTT+0x168>
			CMD_SMS_Ctrl_StepM(mySIM.sms.CtrlINC.data, mySIM.sms.CtrlINC.datalength, STEPM_DIR_INC, STEPM_MODE_STEP, 1);
 8000b96:	4b48      	ldr	r3, [pc, #288]	; (8000cb8 <processApp_MQTT+0x26c>)
 8000b98:	f8b3 149c 	ldrh.w	r1, [r3, #1180]	; 0x49c
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	9300      	str	r3, [sp, #0]
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	4848      	ldr	r0, [pc, #288]	; (8000cc8 <processApp_MQTT+0x27c>)
 8000ba6:	f001 fb5d 	bl	8002264 <CMD_SMS_Ctrl_StepM>
			triggerSMSrequest(SMS_CMD_CTRL_INC, SMS_CMD_DISABLE);
 8000baa:	2100      	movs	r1, #0
 8000bac:	2003      	movs	r0, #3
 8000bae:	f002 fbf9 	bl	80033a4 <triggerSMSrequest>
 8000bb2:	e013      	b.n	8000bdc <processApp_MQTT+0x190>
		}
		else if (checkSMSrequest(SMS_CMD_CTRL_DEC))	{
 8000bb4:	2004      	movs	r0, #4
 8000bb6:	f002 fb6d 	bl	8003294 <checkSMSrequest>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d00d      	beq.n	8000bdc <processApp_MQTT+0x190>
			CMD_SMS_Ctrl_StepM(mySIM.sms.CtrlDEC.data, mySIM.sms.CtrlDEC.datalength, STEPM_DIR_DEC, STEPM_MODE_STEP, 1);
 8000bc0:	4b3d      	ldr	r3, [pc, #244]	; (8000cb8 <processApp_MQTT+0x26c>)
 8000bc2:	f8b3 15ae 	ldrh.w	r1, [r3, #1454]	; 0x5ae
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	9300      	str	r3, [sp, #0]
 8000bca:	2302      	movs	r3, #2
 8000bcc:	2202      	movs	r2, #2
 8000bce:	483f      	ldr	r0, [pc, #252]	; (8000ccc <processApp_MQTT+0x280>)
 8000bd0:	f001 fb48 	bl	8002264 <CMD_SMS_Ctrl_StepM>
			triggerSMSrequest(SMS_CMD_CTRL_DEC, SMS_CMD_DISABLE);
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	2004      	movs	r0, #4
 8000bd8:	f002 fbe4 	bl	80033a4 <triggerSMSrequest>
		}
		triggerTaskflag(TASK_SEND_CTRLSTEPMOR, FLAG_DIS);
 8000bdc:	2100      	movs	r1, #0
 8000bde:	200d      	movs	r0, #13
 8000be0:	f004 fd44 	bl	800566c <triggerTaskflag>
	}
	// SMS calib
	if(checkTaskflag(TASK_SEND_CALIB))	{
 8000be4:	200e      	movs	r0, #14
 8000be6:	f004 fc2d 	bl	8005444 <checkTaskflag>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d00e      	beq.n	8000c0e <processApp_MQTT+0x1c2>
		CMD_SMS_calib(mySIM.sms.CtrlCALIB.data, mySIM.sms.CtrlCALIB.datalength);
 8000bf0:	4b31      	ldr	r3, [pc, #196]	; (8000cb8 <processApp_MQTT+0x26c>)
 8000bf2:	f8b3 338a 	ldrh.w	r3, [r3, #906]	; 0x38a
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	4835      	ldr	r0, [pc, #212]	; (8000cd0 <processApp_MQTT+0x284>)
 8000bfa:	f001 facb 	bl	8002194 <CMD_SMS_calib>
		triggerSMSrequest(SMS_CMD_CTRL_CALIB, SMS_CMD_DISABLE);
 8000bfe:	2100      	movs	r1, #0
 8000c00:	2002      	movs	r0, #2
 8000c02:	f002 fbcf 	bl	80033a4 <triggerSMSrequest>
		triggerTaskflag(TASK_SEND_CALIB, FLAG_DIS);
 8000c06:	2100      	movs	r1, #0
 8000c08:	200e      	movs	r0, #14
 8000c0a:	f004 fd2f 	bl	800566c <triggerTaskflag>
	}
	// SMS get status
	if(checkTaskflag(TASK_SEND_GETSTATUS))	{
 8000c0e:	200f      	movs	r0, #15
 8000c10:	f004 fc18 	bl	8005444 <checkTaskflag>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d00e      	beq.n	8000c38 <processApp_MQTT+0x1ec>
		CMD_SMS_getStatus(mySIM.sms.GetStatus.data, mySIM.sms.GetStatus.datalength);
 8000c1a:	4b27      	ldr	r3, [pc, #156]	; (8000cb8 <processApp_MQTT+0x26c>)
 8000c1c:	f8b3 36c0 	ldrh.w	r3, [r3, #1728]	; 0x6c0
 8000c20:	4619      	mov	r1, r3
 8000c22:	482c      	ldr	r0, [pc, #176]	; (8000cd4 <processApp_MQTT+0x288>)
 8000c24:	f001 fad8 	bl	80021d8 <CMD_SMS_getStatus>
		triggerSMSrequest(SMS_CMD_GET_STATUS, SMS_CMD_DISABLE);
 8000c28:	2100      	movs	r1, #0
 8000c2a:	2005      	movs	r0, #5
 8000c2c:	f002 fbba 	bl	80033a4 <triggerSMSrequest>
		triggerTaskflag(TASK_SEND_GETSTATUS, FLAG_DIS);
 8000c30:	2100      	movs	r1, #0
 8000c32:	200f      	movs	r0, #15
 8000c34:	f004 fd1a 	bl	800566c <triggerTaskflag>
	}
	//SMS get station latest data
	if(checkTaskflag(TASK_SEND_GETSTATION))	{
 8000c38:	2010      	movs	r0, #16
 8000c3a:	f004 fc03 	bl	8005444 <checkTaskflag>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d00e      	beq.n	8000c62 <processApp_MQTT+0x216>
		CMD_SMS_getStationLatestData(mySIM.sms.GetStation.data, mySIM.sms.GetStation.datalength);
 8000c44:	4b1c      	ldr	r3, [pc, #112]	; (8000cb8 <processApp_MQTT+0x26c>)
 8000c46:	f8b3 38e4 	ldrh.w	r3, [r3, #2276]	; 0x8e4
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	4822      	ldr	r0, [pc, #136]	; (8000cd8 <processApp_MQTT+0x28c>)
 8000c4e:	f001 fb31 	bl	80022b4 <CMD_SMS_getStationLatestData>
		triggerSMSrequest(SMS_CMD_GET_STATION, SMS_CMD_DISABLE);
 8000c52:	2100      	movs	r1, #0
 8000c54:	2007      	movs	r0, #7
 8000c56:	f002 fba5 	bl	80033a4 <triggerSMSrequest>
		triggerTaskflag(TASK_SEND_GETSTATION, FLAG_DIS);
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	2010      	movs	r0, #16
 8000c5e:	f004 fd05 	bl	800566c <triggerTaskflag>
	}
	// SMS get sensor lastest data
	if(checkTaskflag(TASK_SEND_GETSENSOR))	{
 8000c62:	2011      	movs	r0, #17
 8000c64:	f004 fbee 	bl	8005444 <checkTaskflag>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d00e      	beq.n	8000c8c <processApp_MQTT+0x240>
		CMD_SMS_getSensorLatestData(mySIM.sms.GetSensor.data, mySIM.sms.GetSensor.datalength);
 8000c6e:	4b12      	ldr	r3, [pc, #72]	; (8000cb8 <processApp_MQTT+0x26c>)
 8000c70:	f8b3 37d2 	ldrh.w	r3, [r3, #2002]	; 0x7d2
 8000c74:	4619      	mov	r1, r3
 8000c76:	4819      	ldr	r0, [pc, #100]	; (8000cdc <processApp_MQTT+0x290>)
 8000c78:	f001 fb3e 	bl	80022f8 <CMD_SMS_getSensorLatestData>
		triggerSMSrequest(SMS_CMD_GET_SENSOR, SMS_CMD_DISABLE);
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	2006      	movs	r0, #6
 8000c80:	f002 fb90 	bl	80033a4 <triggerSMSrequest>
		triggerTaskflag(TASK_SEND_GETSENSOR, FLAG_DIS);
 8000c84:	2100      	movs	r1, #0
 8000c86:	2011      	movs	r0, #17
 8000c88:	f004 fcf0 	bl	800566c <triggerTaskflag>
	}
	// Processing new coming MQTT message
	if ( mySIM.mqttReceive.newEvent == 1)
 8000c8c:	4b0a      	ldr	r3, [pc, #40]	; (8000cb8 <processApp_MQTT+0x26c>)
 8000c8e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8000c92:	2b01      	cmp	r3, #1
 8000c94:	d10c      	bne.n	8000cb0 <processApp_MQTT+0x264>
	{
		mySIM.mqttReceive.newEvent = 0;
 8000c96:	4b08      	ldr	r3, [pc, #32]	; (8000cb8 <processApp_MQTT+0x26c>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		// call process Server message function
		processingComingMsg(mySIM.mqttReceive.payload, mySIM.mqttReceive.payloadLen,
 8000c9e:	4b06      	ldr	r3, [pc, #24]	; (8000cb8 <processApp_MQTT+0x26c>)
 8000ca0:	f8b3 3138 	ldrh.w	r3, [r3, #312]	; 0x138
 8000ca4:	4a0e      	ldr	r2, [pc, #56]	; (8000ce0 <processApp_MQTT+0x294>)
 8000ca6:	7852      	ldrb	r2, [r2, #1]
 8000ca8:	4619      	mov	r1, r3
 8000caa:	480e      	ldr	r0, [pc, #56]	; (8000ce4 <processApp_MQTT+0x298>)
 8000cac:	f001 f90a 	bl	8001ec4 <processingComingMsg>
				myStation.stID );
	}
}
 8000cb0:	bf00      	nop
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	20001774 	.word	0x20001774
 8000cbc:	0800ecb4 	.word	0x0800ecb4
 8000cc0:	200018dc 	.word	0x200018dc
 8000cc4:	200019ee 	.word	0x200019ee
 8000cc8:	20001c12 	.word	0x20001c12
 8000ccc:	20001d24 	.word	0x20001d24
 8000cd0:	20001b00 	.word	0x20001b00
 8000cd4:	20001e36 	.word	0x20001e36
 8000cd8:	2000205a 	.word	0x2000205a
 8000cdc:	20001f48 	.word	0x20001f48
 8000ce0:	20000478 	.word	0x20000478
 8000ce4:	200017ac 	.word	0x200017ac

08000ce8 <initApp_SMS>:
#include "Task.h"

static SMS_t *__MY_SMS;

void initApp_SMS(SMS_t *mySMS)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b083      	sub	sp, #12
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
	__MY_SMS = mySMS;
 8000cf0:	4a03      	ldr	r2, [pc, #12]	; (8000d00 <initApp_SMS+0x18>)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	6013      	str	r3, [r2, #0]
}
 8000cf6:	bf00      	nop
 8000cf8:	370c      	adds	r7, #12
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bc80      	pop	{r7}
 8000cfe:	4770      	bx	lr
 8000d00:	200005e0 	.word	0x200005e0

08000d04 <SMSreturn>:

uint8_t SMSreturn (SMS_CMD_t smsCMD)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b084      	sub	sp, #16
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	71fb      	strb	r3, [r7, #7]
	SMS_request_t *tmpSMScmd;
	switch (smsCMD) 	{
 8000d0e:	79fb      	ldrb	r3, [r7, #7]
 8000d10:	2b07      	cmp	r3, #7
 8000d12:	d841      	bhi.n	8000d98 <SMSreturn+0x94>
 8000d14:	a201      	add	r2, pc, #4	; (adr r2, 8000d1c <SMSreturn+0x18>)
 8000d16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d1a:	bf00      	nop
 8000d1c:	08000d3d 	.word	0x08000d3d
 8000d20:	08000d45 	.word	0x08000d45
 8000d24:	08000d69 	.word	0x08000d69
 8000d28:	08000d51 	.word	0x08000d51
 8000d2c:	08000d5d 	.word	0x08000d5d
 8000d30:	08000d75 	.word	0x08000d75
 8000d34:	08000d8d 	.word	0x08000d8d
 8000d38:	08000d81 	.word	0x08000d81
	case SMS_CMD_CTRL_ON:
		tmpSMScmd = &__MY_SMS->CtrlON;
 8000d3c:	4b21      	ldr	r3, [pc, #132]	; (8000dc4 <SMSreturn+0xc0>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	60fb      	str	r3, [r7, #12]
		break;
 8000d42:	e02a      	b.n	8000d9a <SMSreturn+0x96>
	case SMS_CMD_CTRL_OFF:
		tmpSMScmd = &__MY_SMS->CtrlOFF;
 8000d44:	4b1f      	ldr	r3, [pc, #124]	; (8000dc4 <SMSreturn+0xc0>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	f503 7389 	add.w	r3, r3, #274	; 0x112
 8000d4c:	60fb      	str	r3, [r7, #12]
		break;
 8000d4e:	e024      	b.n	8000d9a <SMSreturn+0x96>
	case SMS_CMD_CTRL_INC:
		tmpSMScmd = &__MY_SMS->CtrlINC;
 8000d50:	4b1c      	ldr	r3, [pc, #112]	; (8000dc4 <SMSreturn+0xc0>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	f203 3336 	addw	r3, r3, #822	; 0x336
 8000d58:	60fb      	str	r3, [r7, #12]
		break;
 8000d5a:	e01e      	b.n	8000d9a <SMSreturn+0x96>
	case SMS_CMD_CTRL_DEC:
		tmpSMScmd = &__MY_SMS->CtrlDEC;
 8000d5c:	4b19      	ldr	r3, [pc, #100]	; (8000dc4 <SMSreturn+0xc0>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	f503 6389 	add.w	r3, r3, #1096	; 0x448
 8000d64:	60fb      	str	r3, [r7, #12]
		break;
 8000d66:	e018      	b.n	8000d9a <SMSreturn+0x96>
	case SMS_CMD_CTRL_CALIB:
		tmpSMScmd = &__MY_SMS->CtrlCALIB;
 8000d68:	4b16      	ldr	r3, [pc, #88]	; (8000dc4 <SMSreturn+0xc0>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	f503 7309 	add.w	r3, r3, #548	; 0x224
 8000d70:	60fb      	str	r3, [r7, #12]
		break;
 8000d72:	e012      	b.n	8000d9a <SMSreturn+0x96>
	case SMS_CMD_GET_STATUS:
		tmpSMScmd = &__MY_SMS->GetStatus;
 8000d74:	4b13      	ldr	r3, [pc, #76]	; (8000dc4 <SMSreturn+0xc0>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	f203 535a 	addw	r3, r3, #1370	; 0x55a
 8000d7c:	60fb      	str	r3, [r7, #12]
		break;
 8000d7e:	e00c      	b.n	8000d9a <SMSreturn+0x96>
	case SMS_CMD_GET_STATION:
		tmpSMScmd = &__MY_SMS->GetStation;
 8000d80:	4b10      	ldr	r3, [pc, #64]	; (8000dc4 <SMSreturn+0xc0>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f203 737e 	addw	r3, r3, #1918	; 0x77e
 8000d88:	60fb      	str	r3, [r7, #12]
		break;
 8000d8a:	e006      	b.n	8000d9a <SMSreturn+0x96>
	case SMS_CMD_GET_SENSOR:
		tmpSMScmd = &__MY_SMS->GetSensor;
 8000d8c:	4b0d      	ldr	r3, [pc, #52]	; (8000dc4 <SMSreturn+0xc0>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f203 636c 	addw	r3, r3, #1644	; 0x66c
 8000d94:	60fb      	str	r3, [r7, #12]
		break;
 8000d96:	e000      	b.n	8000d9a <SMSreturn+0x96>
	default:
		break;
 8000d98:	bf00      	nop
	}
	if (tmpSMScmd == NULL) 	return 0;
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d101      	bne.n	8000da4 <SMSreturn+0xa0>
 8000da0:	2300      	movs	r3, #0
 8000da2:	e00a      	b.n	8000dba <SMSreturn+0xb6>
	SMS_sendMsg(tmpSMScmd->data, tmpSMScmd->datalength, tmpSMScmd->phonenumb);
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	1d18      	adds	r0, r3, #4
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	8859      	ldrh	r1, [r3, #2]
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8000db2:	461a      	mov	r2, r3
 8000db4:	f002 fcb4 	bl	8003720 <SMS_sendMsg>
	return 1;
 8000db8:	2301      	movs	r3, #1
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3710      	adds	r7, #16
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	200005e0 	.word	0x200005e0

08000dc8 <processApp_SMS>:
void processApp_SMS(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
	processingSMS();
 8000dcc:	f002 f9ac 	bl	8003128 <processingSMS>
	// check for new SMS request
	if (checkSMSrequest(SMS_CMD_CTRL_ON) || checkSMSrequest(SMS_CMD_CTRL_OFF) )	{
 8000dd0:	2000      	movs	r0, #0
 8000dd2:	f002 fa5f 	bl	8003294 <checkSMSrequest>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d105      	bne.n	8000de8 <processApp_SMS+0x20>
 8000ddc:	2001      	movs	r0, #1
 8000dde:	f002 fa59 	bl	8003294 <checkSMSrequest>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d003      	beq.n	8000df0 <processApp_SMS+0x28>
		triggerTaskflag(TASK_SEND_CTRLMBA, FLAG_EN);
 8000de8:	2101      	movs	r1, #1
 8000dea:	200c      	movs	r0, #12
 8000dec:	f004 fc3e 	bl	800566c <triggerTaskflag>
	}
	if (checkSMSrequest(SMS_CMD_CTRL_INC) || checkSMSrequest(SMS_CMD_CTRL_DEC) ) {
 8000df0:	2003      	movs	r0, #3
 8000df2:	f002 fa4f 	bl	8003294 <checkSMSrequest>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d105      	bne.n	8000e08 <processApp_SMS+0x40>
 8000dfc:	2004      	movs	r0, #4
 8000dfe:	f002 fa49 	bl	8003294 <checkSMSrequest>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d003      	beq.n	8000e10 <processApp_SMS+0x48>
		triggerTaskflag(TASK_SEND_CTRLSTEPMOR, FLAG_EN);
 8000e08:	2101      	movs	r1, #1
 8000e0a:	200d      	movs	r0, #13
 8000e0c:	f004 fc2e 	bl	800566c <triggerTaskflag>
	}
	if (checkSMSrequest(SMS_CMD_CTRL_CALIB))	{
 8000e10:	2002      	movs	r0, #2
 8000e12:	f002 fa3f 	bl	8003294 <checkSMSrequest>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d003      	beq.n	8000e24 <processApp_SMS+0x5c>
		triggerTaskflag(TASK_SEND_CALIB, FLAG_EN);
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	200e      	movs	r0, #14
 8000e20:	f004 fc24 	bl	800566c <triggerTaskflag>
	}
	if (checkSMSrequest(SMS_CMD_GET_STATUS))	{
 8000e24:	2005      	movs	r0, #5
 8000e26:	f002 fa35 	bl	8003294 <checkSMSrequest>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d003      	beq.n	8000e38 <processApp_SMS+0x70>
		triggerTaskflag(TASK_SEND_GETSTATUS, FLAG_EN);
 8000e30:	2101      	movs	r1, #1
 8000e32:	200f      	movs	r0, #15
 8000e34:	f004 fc1a 	bl	800566c <triggerTaskflag>
	}
	if (checkSMSrequest(SMS_CMD_GET_STATION))	{
 8000e38:	2007      	movs	r0, #7
 8000e3a:	f002 fa2b 	bl	8003294 <checkSMSrequest>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d003      	beq.n	8000e4c <processApp_SMS+0x84>
		triggerTaskflag(TASK_SEND_GETSTATION, FLAG_EN);
 8000e44:	2101      	movs	r1, #1
 8000e46:	2010      	movs	r0, #16
 8000e48:	f004 fc10 	bl	800566c <triggerTaskflag>
	}
	if (checkSMSrequest(SMS_CMD_GET_SENSOR))	{
 8000e4c:	2006      	movs	r0, #6
 8000e4e:	f002 fa21 	bl	8003294 <checkSMSrequest>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d003      	beq.n	8000e60 <processApp_SMS+0x98>
		triggerTaskflag(TASK_SEND_GETSENSOR, FLAG_EN);
 8000e58:	2101      	movs	r1, #1
 8000e5a:	2011      	movs	r0, #17
 8000e5c:	f004 fc06 	bl	800566c <triggerTaskflag>
//		SMSreturn(SMS_CMD_CTRL_DEC);
//	}
//	if (checkSMSreturn(SMS_CMD_CTRL_CALIB))	{
//		SMSreturn(SMS_CMD_CTRL_CALIB);
//	}
	if (checkSMSreturn(SMS_CMD_GET_STATUS))	{
 8000e60:	2005      	movs	r0, #5
 8000e62:	f002 fb25 	bl	80034b0 <checkSMSreturn>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d006      	beq.n	8000e7a <processApp_SMS+0xb2>
		SMSreturn(SMS_CMD_GET_STATUS);
 8000e6c:	2005      	movs	r0, #5
 8000e6e:	f7ff ff49 	bl	8000d04 <SMSreturn>
		triggerSMSreturn(SMS_CMD_GET_STATUS, SMS_CMD_DISABLE);
 8000e72:	2100      	movs	r1, #0
 8000e74:	2005      	movs	r0, #5
 8000e76:	f002 fba3 	bl	80035c0 <triggerSMSreturn>
	}
	if (checkSMSreturn(SMS_CMD_GET_STATION))	{
 8000e7a:	2007      	movs	r0, #7
 8000e7c:	f002 fb18 	bl	80034b0 <checkSMSreturn>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d006      	beq.n	8000e94 <processApp_SMS+0xcc>
		SMSreturn(SMS_CMD_GET_STATION);
 8000e86:	2007      	movs	r0, #7
 8000e88:	f7ff ff3c 	bl	8000d04 <SMSreturn>
		triggerSMSreturn(SMS_CMD_GET_STATION, SMS_CMD_DISABLE);
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	2007      	movs	r0, #7
 8000e90:	f002 fb96 	bl	80035c0 <triggerSMSreturn>
	}
	if (checkSMSreturn(SMS_CMD_GET_SENSOR))	{
 8000e94:	2006      	movs	r0, #6
 8000e96:	f002 fb0b 	bl	80034b0 <checkSMSreturn>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d006      	beq.n	8000eae <processApp_SMS+0xe6>
		SMSreturn(SMS_CMD_GET_SENSOR);
 8000ea0:	2006      	movs	r0, #6
 8000ea2:	f7ff ff2f 	bl	8000d04 <SMSreturn>
		triggerSMSreturn(SMS_CMD_GET_SENSOR, SMS_CMD_DISABLE);
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	2006      	movs	r0, #6
 8000eaa:	f002 fb89 	bl	80035c0 <triggerSMSreturn>
	}
}
 8000eae:	bf00      	nop
 8000eb0:	bd80      	pop	{r7, pc}
	...

08000eb4 <init_App_Serial>:
#include "main.h"

//Station_t *__MY_STATION_SERIAL;

void init_App_Serial ()
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
//	__MY_STATION_SERIAL = station;
	initSerial_CFG(&huart2,&hdma_usart2_rx);
 8000eb8:	4902      	ldr	r1, [pc, #8]	; (8000ec4 <init_App_Serial+0x10>)
 8000eba:	4803      	ldr	r0, [pc, #12]	; (8000ec8 <init_App_Serial+0x14>)
 8000ebc:	f000 f806 	bl	8000ecc <initSerial_CFG>
}
 8000ec0:	bf00      	nop
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	20002b84 	.word	0x20002b84
 8000ec8:	20002ab0 	.word	0x20002ab0

08000ecc <initSerial_CFG>:
_RTC *__MY_RTC;

uint8_t alarmflag = 0;

void initSerial_CFG(UART_HandleTypeDef *huart, DMA_HandleTypeDef  *hdma)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	6039      	str	r1, [r7, #0]
	__SCFG_UART = huart;
 8000ed6:	4a06      	ldr	r2, [pc, #24]	; (8000ef0 <initSerial_CFG+0x24>)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	6013      	str	r3, [r2, #0]
	__SCFG_DMA_UART = hdma;
 8000edc:	4a05      	ldr	r2, [pc, #20]	; (8000ef4 <initSerial_CFG+0x28>)
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	6013      	str	r3, [r2, #0]
	enableReceiveDMAtoIdle_CFG();
 8000ee2:	f000 f81d 	bl	8000f20 <enableReceiveDMAtoIdle_CFG>
}
 8000ee6:	bf00      	nop
 8000ee8:	3708      	adds	r7, #8
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	200005e4 	.word	0x200005e4
 8000ef4:	200005e8 	.word	0x200005e8

08000ef8 <initGPS>:

void initGPS(Station_t *station, _RTC *rtc)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
 8000f00:	6039      	str	r1, [r7, #0]
	__MY_STATION_GPS = station;
 8000f02:	4a05      	ldr	r2, [pc, #20]	; (8000f18 <initGPS+0x20>)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	6013      	str	r3, [r2, #0]
	__MY_RTC = rtc;
 8000f08:	4a04      	ldr	r2, [pc, #16]	; (8000f1c <initGPS+0x24>)
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	6013      	str	r3, [r2, #0]
}
 8000f0e:	bf00      	nop
 8000f10:	370c      	adds	r7, #12
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bc80      	pop	{r7}
 8000f16:	4770      	bx	lr
 8000f18:	20000cf8 	.word	0x20000cf8
 8000f1c:	20000cfc 	.word	0x20000cfc

08000f20 <enableReceiveDMAtoIdle_CFG>:

void enableReceiveDMAtoIdle_CFG(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
	  HAL_UARTEx_ReceiveToIdle_DMA(__SCFG_UART, Rxbuff_CFG, Rx_SIZE_CFG);
 8000f24:	4b09      	ldr	r3, [pc, #36]	; (8000f4c <enableReceiveDMAtoIdle_CFG+0x2c>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f2c:	4908      	ldr	r1, [pc, #32]	; (8000f50 <enableReceiveDMAtoIdle_CFG+0x30>)
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f00a f8c3 	bl	800b0ba <HAL_UARTEx_ReceiveToIdle_DMA>
	  __HAL_DMA_DISABLE_IT(__SCFG_DMA_UART,DMA_IT_HT);
 8000f34:	4b07      	ldr	r3, [pc, #28]	; (8000f54 <enableReceiveDMAtoIdle_CFG+0x34>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	4b05      	ldr	r3, [pc, #20]	; (8000f54 <enableReceiveDMAtoIdle_CFG+0x34>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f022 0204 	bic.w	r2, r2, #4
 8000f46:	601a      	str	r2, [r3, #0]
}
 8000f48:	bf00      	nop
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	200005e4 	.word	0x200005e4
 8000f50:	200005ec 	.word	0x200005ec
 8000f54:	200005e8 	.word	0x200005e8

08000f58 <Serial_CFG_Callback>:
void Serial_CFG_Callback(uint16_t Size)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b084      	sub	sp, #16
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	4603      	mov	r3, r0
 8000f60:	80fb      	strh	r3, [r7, #6]

	oldPos_CFG = newPos_CFG;  // Update the last position before copying new data
 8000f62:	4b43      	ldr	r3, [pc, #268]	; (8001070 <Serial_CFG_Callback+0x118>)
 8000f64:	881a      	ldrh	r2, [r3, #0]
 8000f66:	4b43      	ldr	r3, [pc, #268]	; (8001074 <Serial_CFG_Callback+0x11c>)
 8000f68:	801a      	strh	r2, [r3, #0]

	/* If the data in large and it is about to exceed the buffer size, we have to route it to the start of the buffer
	 * This is to maintain the circular buffer
	 * The old data in the main buffer will be overlapped
	 */
	if (oldPos_CFG+Size > Main_SIZE_CFG)  // If the current position + new data size is greater than the main buffer
 8000f6a:	4b42      	ldr	r3, [pc, #264]	; (8001074 <Serial_CFG_Callback+0x11c>)
 8000f6c:	881b      	ldrh	r3, [r3, #0]
 8000f6e:	461a      	mov	r2, r3
 8000f70:	88fb      	ldrh	r3, [r7, #6]
 8000f72:	4413      	add	r3, r2
 8000f74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f78:	dd23      	ble.n	8000fc2 <Serial_CFG_Callback+0x6a>
	{
		uint8_t datatocopy = Main_SIZE_CFG-oldPos_CFG;  // find out how much space is left in the main buffer
 8000f7a:	4b3e      	ldr	r3, [pc, #248]	; (8001074 <Serial_CFG_Callback+0x11c>)
 8000f7c:	881b      	ldrh	r3, [r3, #0]
 8000f7e:	b2db      	uxtb	r3, r3
 8000f80:	425b      	negs	r3, r3
 8000f82:	73fb      	strb	r3, [r7, #15]
		memcpy ((uint8_t *)Mainbuff_CFG+oldPos_CFG, (uint8_t *)Rxbuff_CFG, datatocopy);  // copy data in that remaining space
 8000f84:	4b3b      	ldr	r3, [pc, #236]	; (8001074 <Serial_CFG_Callback+0x11c>)
 8000f86:	881b      	ldrh	r3, [r3, #0]
 8000f88:	461a      	mov	r2, r3
 8000f8a:	4b3b      	ldr	r3, [pc, #236]	; (8001078 <Serial_CFG_Callback+0x120>)
 8000f8c:	4413      	add	r3, r2
 8000f8e:	7bfa      	ldrb	r2, [r7, #15]
 8000f90:	493a      	ldr	r1, [pc, #232]	; (800107c <Serial_CFG_Callback+0x124>)
 8000f92:	4618      	mov	r0, r3
 8000f94:	f00b f958 	bl	800c248 <memcpy>

		oldPos_CFG = 0;  // point to the start of the buffer
 8000f98:	4b36      	ldr	r3, [pc, #216]	; (8001074 <Serial_CFG_Callback+0x11c>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	801a      	strh	r2, [r3, #0]
		memcpy ((uint8_t *)Mainbuff_CFG, (uint8_t *)Rxbuff_CFG+datatocopy, (Size-datatocopy));  // copy the remaining data
 8000f9e:	7bfb      	ldrb	r3, [r7, #15]
 8000fa0:	4a36      	ldr	r2, [pc, #216]	; (800107c <Serial_CFG_Callback+0x124>)
 8000fa2:	1899      	adds	r1, r3, r2
 8000fa4:	88fa      	ldrh	r2, [r7, #6]
 8000fa6:	7bfb      	ldrb	r3, [r7, #15]
 8000fa8:	1ad3      	subs	r3, r2, r3
 8000faa:	461a      	mov	r2, r3
 8000fac:	4832      	ldr	r0, [pc, #200]	; (8001078 <Serial_CFG_Callback+0x120>)
 8000fae:	f00b f94b 	bl	800c248 <memcpy>
		newPos_CFG = (Size-datatocopy);  // update the position
 8000fb2:	7bfb      	ldrb	r3, [r7, #15]
 8000fb4:	b29b      	uxth	r3, r3
 8000fb6:	88fa      	ldrh	r2, [r7, #6]
 8000fb8:	1ad3      	subs	r3, r2, r3
 8000fba:	b29a      	uxth	r2, r3
 8000fbc:	4b2c      	ldr	r3, [pc, #176]	; (8001070 <Serial_CFG_Callback+0x118>)
 8000fbe:	801a      	strh	r2, [r3, #0]
 8000fc0:	e010      	b.n	8000fe4 <Serial_CFG_Callback+0x8c>
	/* if the current position + new data size is less than the main buffer
	 * we will simply copy the data into the buffer and update the position
	 */
	else
	{
		memcpy ((uint8_t *)Mainbuff_CFG+oldPos_CFG, (uint8_t *)Rxbuff_CFG, Size);
 8000fc2:	4b2c      	ldr	r3, [pc, #176]	; (8001074 <Serial_CFG_Callback+0x11c>)
 8000fc4:	881b      	ldrh	r3, [r3, #0]
 8000fc6:	461a      	mov	r2, r3
 8000fc8:	4b2b      	ldr	r3, [pc, #172]	; (8001078 <Serial_CFG_Callback+0x120>)
 8000fca:	4413      	add	r3, r2
 8000fcc:	88fa      	ldrh	r2, [r7, #6]
 8000fce:	492b      	ldr	r1, [pc, #172]	; (800107c <Serial_CFG_Callback+0x124>)
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f00b f939 	bl	800c248 <memcpy>
		newPos_CFG = Size+oldPos_CFG;
 8000fd6:	4b27      	ldr	r3, [pc, #156]	; (8001074 <Serial_CFG_Callback+0x11c>)
 8000fd8:	881a      	ldrh	r2, [r3, #0]
 8000fda:	88fb      	ldrh	r3, [r7, #6]
 8000fdc:	4413      	add	r3, r2
 8000fde:	b29a      	uxth	r2, r3
 8000fe0:	4b23      	ldr	r3, [pc, #140]	; (8001070 <Serial_CFG_Callback+0x118>)
 8000fe2:	801a      	strh	r2, [r3, #0]

	/* Update the position of the Head
	 * If the current position + new size is less then the buffer size, Head will update normally
	 * Or else the head will be at the new position from the beginning
	 */
	if (head_CFG+Size < Main_SIZE_CFG) head_CFG = head_CFG+Size;
 8000fe4:	4b26      	ldr	r3, [pc, #152]	; (8001080 <Serial_CFG_Callback+0x128>)
 8000fe6:	881b      	ldrh	r3, [r3, #0]
 8000fe8:	461a      	mov	r2, r3
 8000fea:	88fb      	ldrh	r3, [r7, #6]
 8000fec:	4413      	add	r3, r2
 8000fee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ff2:	da07      	bge.n	8001004 <Serial_CFG_Callback+0xac>
 8000ff4:	4b22      	ldr	r3, [pc, #136]	; (8001080 <Serial_CFG_Callback+0x128>)
 8000ff6:	881a      	ldrh	r2, [r3, #0]
 8000ff8:	88fb      	ldrh	r3, [r7, #6]
 8000ffa:	4413      	add	r3, r2
 8000ffc:	b29a      	uxth	r2, r3
 8000ffe:	4b20      	ldr	r3, [pc, #128]	; (8001080 <Serial_CFG_Callback+0x128>)
 8001000:	801a      	strh	r2, [r3, #0]
 8001002:	e009      	b.n	8001018 <Serial_CFG_Callback+0xc0>
	else head_CFG = head_CFG + Size - Main_SIZE_CFG;
 8001004:	4b1e      	ldr	r3, [pc, #120]	; (8001080 <Serial_CFG_Callback+0x128>)
 8001006:	881a      	ldrh	r2, [r3, #0]
 8001008:	88fb      	ldrh	r3, [r7, #6]
 800100a:	4413      	add	r3, r2
 800100c:	b29b      	uxth	r3, r3
 800100e:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8001012:	b29a      	uxth	r2, r3
 8001014:	4b1a      	ldr	r3, [pc, #104]	; (8001080 <Serial_CFG_Callback+0x128>)
 8001016:	801a      	strh	r2, [r3, #0]

	if ( checkTaskflag(TASK_GET_GPS_TIME) )	{
 8001018:	2007      	movs	r0, #7
 800101a:	f004 fa13 	bl	8005444 <checkTaskflag>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d013      	beq.n	800104c <Serial_CFG_Callback+0xf4>
		memset(GPS_rxbuffer, 0, GPS_RXBUFF_MAXLEN);
 8001024:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001028:	2100      	movs	r1, #0
 800102a:	4816      	ldr	r0, [pc, #88]	; (8001084 <Serial_CFG_Callback+0x12c>)
 800102c:	f00b f91a 	bl	800c264 <memset>
		memcpy(GPS_rxbuffer, Rxbuff_CFG, Size);
 8001030:	88fb      	ldrh	r3, [r7, #6]
 8001032:	461a      	mov	r2, r3
 8001034:	4911      	ldr	r1, [pc, #68]	; (800107c <Serial_CFG_Callback+0x124>)
 8001036:	4813      	ldr	r0, [pc, #76]	; (8001084 <Serial_CFG_Callback+0x12c>)
 8001038:	f00b f906 	bl	800c248 <memcpy>
		GPS_size = Size;
 800103c:	4a12      	ldr	r2, [pc, #72]	; (8001088 <Serial_CFG_Callback+0x130>)
 800103e:	88fb      	ldrh	r3, [r7, #6]
 8001040:	8013      	strh	r3, [r2, #0]
		getGPS_time(__MY_RTC);
 8001042:	4b12      	ldr	r3, [pc, #72]	; (800108c <Serial_CFG_Callback+0x134>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4618      	mov	r0, r3
 8001048:	f000 f826 	bl	8001098 <getGPS_time>
	}

	enableReceiveDMAtoIdle_CFG();
 800104c:	f7ff ff68 	bl	8000f20 <enableReceiveDMAtoIdle_CFG>
	/*
	 * Processing data
	 */

	if (isWordinBuff(Rxbuff_CFG, Size, (uint8_t*)"MCFG+")) {
 8001050:	88fb      	ldrh	r3, [r7, #6]
 8001052:	4a0f      	ldr	r2, [pc, #60]	; (8001090 <Serial_CFG_Callback+0x138>)
 8001054:	4619      	mov	r1, r3
 8001056:	4809      	ldr	r0, [pc, #36]	; (800107c <Serial_CFG_Callback+0x124>)
 8001058:	f004 f8e6 	bl	8005228 <isWordinBuff>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d002      	beq.n	8001068 <Serial_CFG_Callback+0x110>
		isSerialConfig = 1;
 8001062:	4b0c      	ldr	r3, [pc, #48]	; (8001094 <Serial_CFG_Callback+0x13c>)
 8001064:	2201      	movs	r2, #1
 8001066:	701a      	strb	r2, [r3, #0]
	}
}
 8001068:	bf00      	nop
 800106a:	3710      	adds	r7, #16
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	20000cee 	.word	0x20000cee
 8001074:	20000cec 	.word	0x20000cec
 8001078:	200006ec 	.word	0x200006ec
 800107c:	200005ec 	.word	0x200005ec
 8001080:	20000cf0 	.word	0x20000cf0
 8001084:	20000aec 	.word	0x20000aec
 8001088:	20000cf2 	.word	0x20000cf2
 800108c:	20000cfc 	.word	0x20000cfc
 8001090:	0800ecc8 	.word	0x0800ecc8
 8001094:	20000cf4 	.word	0x20000cf4

08001098 <getGPS_time>:
{
	tail_CFG = head_CFG;
}

uint8_t getGPS_time(_RTC *myRTC)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b08c      	sub	sp, #48	; 0x30
 800109c:	af02      	add	r7, sp, #8
 800109e:	6078      	str	r0, [r7, #4]
//	if (__MY_GPS->getFlag) return 0;
	if ( !DS3231_GetTime(myRTC) )		return 0;
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f003 f80d 	bl	80040c0 <DS3231_GetTime>
 80010a6:	4603      	mov	r3, r0
 80010a8:	f083 0301 	eor.w	r3, r3, #1
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <getGPS_time+0x1e>
 80010b2:	2300      	movs	r3, #0
 80010b4:	e065      	b.n	8001182 <getGPS_time+0xea>
	uint16_t gpslen = GPS_size;
 80010b6:	4b35      	ldr	r3, [pc, #212]	; (800118c <getGPS_time+0xf4>)
 80010b8:	881b      	ldrh	r3, [r3, #0]
 80010ba:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint8_t *currPos = isWordinBuff(GPS_rxbuffer, gpslen, (uint8_t*)"$GPRMC");
 80010bc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80010be:	4a34      	ldr	r2, [pc, #208]	; (8001190 <getGPS_time+0xf8>)
 80010c0:	4619      	mov	r1, r3
 80010c2:	4834      	ldr	r0, [pc, #208]	; (8001194 <getGPS_time+0xfc>)
 80010c4:	f004 f8b0 	bl	8005228 <isWordinBuff>
 80010c8:	6238      	str	r0, [r7, #32]
	if ( currPos == NULL )	{
 80010ca:	6a3b      	ldr	r3, [r7, #32]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d101      	bne.n	80010d4 <getGPS_time+0x3c>
		return 0;
 80010d0:	2300      	movs	r3, #0
 80010d2:	e056      	b.n	8001182 <getGPS_time+0xea>
	}
	uint16_t remainlen = getRemainsize(currPos, GPS_rxbuffer, gpslen);
 80010d4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80010d6:	461a      	mov	r2, r3
 80010d8:	492e      	ldr	r1, [pc, #184]	; (8001194 <getGPS_time+0xfc>)
 80010da:	6a38      	ldr	r0, [r7, #32]
 80010dc:	f004 f923 	bl	8005326 <getRemainsize>
 80010e0:	4603      	mov	r3, r0
 80010e2:	83fb      	strh	r3, [r7, #30]
	// Get time to buffer
	uint8_t timebuffer [10];
	if ( getBetween((uint8_t*)",", (uint8_t*)".", currPos, remainlen, timebuffer) != 6 )	{
 80010e4:	8bfa      	ldrh	r2, [r7, #30]
 80010e6:	f107 0314 	add.w	r3, r7, #20
 80010ea:	9300      	str	r3, [sp, #0]
 80010ec:	4613      	mov	r3, r2
 80010ee:	6a3a      	ldr	r2, [r7, #32]
 80010f0:	4929      	ldr	r1, [pc, #164]	; (8001198 <getGPS_time+0x100>)
 80010f2:	482a      	ldr	r0, [pc, #168]	; (800119c <getGPS_time+0x104>)
 80010f4:	f004 f8c4 	bl	8005280 <getBetween>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b06      	cmp	r3, #6
 80010fc:	d001      	beq.n	8001102 <getGPS_time+0x6a>
		return 0;
 80010fe:	2300      	movs	r3, #0
 8001100:	e03f      	b.n	8001182 <getGPS_time+0xea>
 8001102:	8abb      	ldrh	r3, [r7, #20]
	}
	// Convert time from buffer and save to myRTC
	uint8_t tmphour[3];
	uint8_t tmpmin[3];
	uint8_t tmpsec[3];
	memcpy(tmphour, timebuffer, 2);
 8001104:	823b      	strh	r3, [r7, #16]
	memcpy(tmpmin, timebuffer + 2, 2);
 8001106:	f107 0314 	add.w	r3, r7, #20
 800110a:	3302      	adds	r3, #2
 800110c:	881b      	ldrh	r3, [r3, #0]
 800110e:	b29b      	uxth	r3, r3
 8001110:	81bb      	strh	r3, [r7, #12]
	memcpy(tmpsec, timebuffer + 4, 2);
 8001112:	f107 0314 	add.w	r3, r7, #20
 8001116:	3304      	adds	r3, #4
 8001118:	881b      	ldrh	r3, [r3, #0]
 800111a:	b29b      	uxth	r3, r3
 800111c:	813b      	strh	r3, [r7, #8]
	myRTC->Hour = atoi((char*)tmphour) + (uint8_t)MY_TIME_ZONE;
 800111e:	f107 0310 	add.w	r3, r7, #16
 8001122:	4618      	mov	r0, r3
 8001124:	f00a ff32 	bl	800bf8c <atoi>
 8001128:	4603      	mov	r3, r0
 800112a:	b2db      	uxtb	r3, r3
 800112c:	3307      	adds	r3, #7
 800112e:	b2da      	uxtb	r2, r3
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	711a      	strb	r2, [r3, #4]
	myRTC->Min = atoi((char*)tmpmin);
 8001134:	f107 030c 	add.w	r3, r7, #12
 8001138:	4618      	mov	r0, r3
 800113a:	f00a ff27 	bl	800bf8c <atoi>
 800113e:	4603      	mov	r3, r0
 8001140:	b2da      	uxtb	r2, r3
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	715a      	strb	r2, [r3, #5]
	myRTC->Sec = atoi((char*)tmpsec);
 8001146:	f107 0308 	add.w	r3, r7, #8
 800114a:	4618      	mov	r0, r3
 800114c:	f00a ff1e 	bl	800bf8c <atoi>
 8001150:	4603      	mov	r3, r0
 8001152:	b2da      	uxtb	r2, r3
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	719a      	strb	r2, [r3, #6]
	if ( !DS3231_SetTime(myRTC) )	return 0;
 8001158:	6878      	ldr	r0, [r7, #4]
 800115a:	f003 f82d 	bl	80041b8 <DS3231_SetTime>
 800115e:	4603      	mov	r3, r0
 8001160:	f083 0301 	eor.w	r3, r3, #1
 8001164:	b2db      	uxtb	r3, r3
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <getGPS_time+0xd6>
 800116a:	2300      	movs	r3, #0
 800116c:	e009      	b.n	8001182 <getGPS_time+0xea>
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800116e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001172:	480b      	ldr	r0, [pc, #44]	; (80011a0 <getGPS_time+0x108>)
 8001174:	f007 ff37 	bl	8008fe6 <HAL_GPIO_TogglePin>
	triggerTaskflag(TASK_GET_GPS_TIME, FLAG_DIS);
 8001178:	2100      	movs	r1, #0
 800117a:	2007      	movs	r0, #7
 800117c:	f004 fa76 	bl	800566c <triggerTaskflag>
	return 1;
 8001180:	2301      	movs	r3, #1
}
 8001182:	4618      	mov	r0, r3
 8001184:	3728      	adds	r7, #40	; 0x28
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	20000cf2 	.word	0x20000cf2
 8001190:	0800ed2c 	.word	0x0800ed2c
 8001194:	20000aec 	.word	0x20000aec
 8001198:	0800ed34 	.word	0x0800ed34
 800119c:	0800ed38 	.word	0x0800ed38
 80011a0:	40010800 	.word	0x40010800

080011a4 <Serial_log_string>:
{
	__SERIAL_LOG_UART = huart;
}

void Serial_log_string(char *string)
{
 80011a4:	b590      	push	{r4, r7, lr}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(__SERIAL_LOG_UART, (uint8_t*)string, strlen(string), LOG_TIMEOUT);
 80011ac:	4b08      	ldr	r3, [pc, #32]	; (80011d0 <Serial_log_string+0x2c>)
 80011ae:	681c      	ldr	r4, [r3, #0]
 80011b0:	6878      	ldr	r0, [r7, #4]
 80011b2:	f7fe ffcb 	bl	800014c <strlen>
 80011b6:	4603      	mov	r3, r0
 80011b8:	b29a      	uxth	r2, r3
 80011ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011be:	6879      	ldr	r1, [r7, #4]
 80011c0:	4620      	mov	r0, r4
 80011c2:	f009 fef7 	bl	800afb4 <HAL_UART_Transmit>
}
 80011c6:	bf00      	nop
 80011c8:	370c      	adds	r7, #12
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd90      	pop	{r4, r7, pc}
 80011ce:	bf00      	nop
 80011d0:	20000d00 	.word	0x20000d00

080011d4 <initServerMsg>:
//static Station_t *myStation;
//static SMS_t *mySIM.sms;
//static SIM_t *mySIM;

void initServerMsg ()
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
//	myStation = Station;
//	mySIM.sms = mySMS;
//	mySIM = mySIM;
}
 80011d8:	bf00      	nop
 80011da:	46bd      	mov	sp, r7
 80011dc:	bc80      	pop	{r7}
 80011de:	4770      	bx	lr

080011e0 <buffer2num>:

uint32_t buffer2num(uint8_t *buffer)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
	return (buffer[0] << 24) | (buffer[1] << 16) | (buffer[2] << 8) | buffer[3];
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	061a      	lsls	r2, r3, #24
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	3301      	adds	r3, #1
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	041b      	lsls	r3, r3, #16
 80011f6:	431a      	orrs	r2, r3
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	3302      	adds	r3, #2
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	021b      	lsls	r3, r3, #8
 8001200:	4313      	orrs	r3, r2
 8001202:	687a      	ldr	r2, [r7, #4]
 8001204:	3203      	adds	r2, #3
 8001206:	7812      	ldrb	r2, [r2, #0]
 8001208:	4313      	orrs	r3, r2
}
 800120a:	4618      	mov	r0, r3
 800120c:	370c      	adds	r7, #12
 800120e:	46bd      	mov	sp, r7
 8001210:	bc80      	pop	{r7}
 8001212:	4770      	bx	lr

08001214 <addCRCtoPack>:

uint8_t addCRCtoPack(uint8_t *dataBuff, uint8_t bufflen)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b084      	sub	sp, #16
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
 800121c:	460b      	mov	r3, r1
 800121e:	70fb      	strb	r3, [r7, #3]
	uint32_t crc;
//	MQTT_publish( (uint8_t*)TOPIC_PUB, dataBuff, bufflen);
	crc= crc32( (char*)dataBuff, bufflen);
 8001220:	78fb      	ldrb	r3, [r7, #3]
 8001222:	4619      	mov	r1, r3
 8001224:	6878      	ldr	r0, [r7, #4]
 8001226:	f004 fbf1 	bl	8005a0c <crc32>
 800122a:	60f8      	str	r0, [r7, #12]

	uint8_t crc_buff[4];
	FourbytenumbertoBuff( crc, crc_buff);
 800122c:	f107 0308 	add.w	r3, r7, #8
 8001230:	4619      	mov	r1, r3
 8001232:	68f8      	ldr	r0, [r7, #12]
 8001234:	f004 f8b7 	bl	80053a6 <FourbytenumbertoBuff>

//	MQTT_publish( (uint8_t*)TOPIC_PUB, crc_buff, 4);

	memcpy(dataBuff+bufflen,crc_buff,4);
 8001238:	78fb      	ldrb	r3, [r7, #3]
 800123a:	687a      	ldr	r2, [r7, #4]
 800123c:	4413      	add	r3, r2
 800123e:	68ba      	ldr	r2, [r7, #8]
 8001240:	601a      	str	r2, [r3, #0]

	return 4;    // crc length
 8001242:	2304      	movs	r3, #4
}
 8001244:	4618      	mov	r0, r3
 8001246:	3710      	adds	r7, #16
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}

0800124c <addTimetobuff>:
uint8_t addTimetobuff(uint8_t *buff, uint16_t position)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b088      	sub	sp, #32
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	460b      	mov	r3, r1
 8001256:	807b      	strh	r3, [r7, #2]
//	RTCtime.Month=11;
//	RTCtime.Date = 15;
//	RTCtime.Hour = 7;
//	RTCtime.Min = 56;
//	RTCtime.Sec = 35;
	if (DS3231_GetTime(&RTCtime))
 8001258:	f107 0310 	add.w	r3, r7, #16
 800125c:	4618      	mov	r0, r3
 800125e:	f002 ff2f 	bl	80040c0 <DS3231_GetTime>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d014      	beq.n	8001292 <addTimetobuff+0x46>
	{
		time_t epochtime = RTC2epochtime(&RTCtime);
 8001268:	f107 0310 	add.w	r3, r7, #16
 800126c:	4618      	mov	r0, r3
 800126e:	f002 fefc 	bl	800406a <RTC2epochtime>
 8001272:	e9c7 0106 	strd	r0, r1, [r7, #24]
		uint8_t time_buff[4];
		FourbytenumbertoBuff((uint32_t)epochtime,time_buff);
 8001276:	69bb      	ldr	r3, [r7, #24]
 8001278:	f107 020c 	add.w	r2, r7, #12
 800127c:	4611      	mov	r1, r2
 800127e:	4618      	mov	r0, r3
 8001280:	f004 f891 	bl	80053a6 <FourbytenumbertoBuff>
		memcpy(buff+position,time_buff,4);
 8001284:	887b      	ldrh	r3, [r7, #2]
 8001286:	687a      	ldr	r2, [r7, #4]
 8001288:	4413      	add	r3, r2
 800128a:	68fa      	ldr	r2, [r7, #12]
 800128c:	601a      	str	r2, [r3, #0]
		return 1;
 800128e:	2301      	movs	r3, #1
 8001290:	e000      	b.n	8001294 <addTimetobuff+0x48>
	}
	return 0;
 8001292:	2300      	movs	r3, #0
}
 8001294:	4618      	mov	r0, r3
 8001296:	3720      	adds	r7, #32
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}

0800129c <createPack>:

uint8_t createPack(PACK_t PackType, DATA_t DataType, CMD_t CMDType )
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	4603      	mov	r3, r0
 80012a4:	71fb      	strb	r3, [r7, #7]
 80012a6:	460b      	mov	r3, r1
 80012a8:	71bb      	strb	r3, [r7, #6]
 80012aa:	4613      	mov	r3, r2
 80012ac:	717b      	strb	r3, [r7, #5]
	memset(Pack_buff, 0, PACKBUFF_MAXLEN);
 80012ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012b2:	2100      	movs	r1, #0
 80012b4:	4816      	ldr	r0, [pc, #88]	; (8001310 <createPack+0x74>)
 80012b6:	f00a ffd5 	bl	800c264 <memset>
	uint8_t pack_len = 0;
 80012ba:	2300      	movs	r3, #0
 80012bc:	73fb      	strb	r3, [r7, #15]

	Pack_buff[pack_len++] = myStation.stID;
 80012be:	7bfb      	ldrb	r3, [r7, #15]
 80012c0:	1c5a      	adds	r2, r3, #1
 80012c2:	73fa      	strb	r2, [r7, #15]
 80012c4:	461a      	mov	r2, r3
 80012c6:	4b13      	ldr	r3, [pc, #76]	; (8001314 <createPack+0x78>)
 80012c8:	7859      	ldrb	r1, [r3, #1]
 80012ca:	4b11      	ldr	r3, [pc, #68]	; (8001310 <createPack+0x74>)
 80012cc:	5499      	strb	r1, [r3, r2]
	Pack_buff[pack_len++] = PackType;
 80012ce:	7bfb      	ldrb	r3, [r7, #15]
 80012d0:	1c5a      	adds	r2, r3, #1
 80012d2:	73fa      	strb	r2, [r7, #15]
 80012d4:	4619      	mov	r1, r3
 80012d6:	4a0e      	ldr	r2, [pc, #56]	; (8001310 <createPack+0x74>)
 80012d8:	79fb      	ldrb	r3, [r7, #7]
 80012da:	5453      	strb	r3, [r2, r1]

	if ( DataType != DATA_NONE )
 80012dc:	79bb      	ldrb	r3, [r7, #6]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d007      	beq.n	80012f2 <createPack+0x56>
	{
		Pack_buff[pack_len++] = DataType;
 80012e2:	7bfb      	ldrb	r3, [r7, #15]
 80012e4:	1c5a      	adds	r2, r3, #1
 80012e6:	73fa      	strb	r2, [r7, #15]
 80012e8:	4619      	mov	r1, r3
 80012ea:	4a09      	ldr	r2, [pc, #36]	; (8001310 <createPack+0x74>)
 80012ec:	79bb      	ldrb	r3, [r7, #6]
 80012ee:	5453      	strb	r3, [r2, r1]
 80012f0:	e009      	b.n	8001306 <createPack+0x6a>
	}
	else if ( CMDType != CMD_NONE )
 80012f2:	797b      	ldrb	r3, [r7, #5]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d006      	beq.n	8001306 <createPack+0x6a>
	{
		Pack_buff[pack_len++] = CMDType;
 80012f8:	7bfb      	ldrb	r3, [r7, #15]
 80012fa:	1c5a      	adds	r2, r3, #1
 80012fc:	73fa      	strb	r2, [r7, #15]
 80012fe:	4619      	mov	r1, r3
 8001300:	4a03      	ldr	r2, [pc, #12]	; (8001310 <createPack+0x74>)
 8001302:	797b      	ldrb	r3, [r7, #5]
 8001304:	5453      	strb	r3, [r2, r1]
	}
	return pack_len;
 8001306:	7bfb      	ldrb	r3, [r7, #15]
}
 8001308:	4618      	mov	r0, r3
 800130a:	3710      	adds	r7, #16
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	20000d04 	.word	0x20000d04
 8001314:	20000478 	.word	0x20000478

08001318 <Serialize_SSnodedata>:

uint16_t Serialize_SSnodedata(uint8_t* Serial_buff, DATA_t dataType)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b084      	sub	sp, #16
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
 8001320:	460b      	mov	r3, r1
 8001322:	70fb      	strb	r3, [r7, #3]

	uint16_t buff_len = 0;
 8001324:	2300      	movs	r3, #0
 8001326:	81fb      	strh	r3, [r7, #14]
	Node * current =myStation.ssNode_list->head->next;
 8001328:	4b53      	ldr	r3, [pc, #332]	; (8001478 <Serialize_SSnodedata+0x160>)
 800132a:	68db      	ldr	r3, [r3, #12]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001330:	60bb      	str	r3, [r7, #8]
	while (current != myStation.ssNode_list->tail)
 8001332:	e094      	b.n	800145e <Serialize_SSnodedata+0x146>
	{
		switch ( dataType ) {
 8001334:	78fb      	ldrb	r3, [r7, #3]
 8001336:	3b01      	subs	r3, #1
 8001338:	2b06      	cmp	r3, #6
 800133a:	f200 808a 	bhi.w	8001452 <Serialize_SSnodedata+0x13a>
 800133e:	a201      	add	r2, pc, #4	; (adr r2, 8001344 <Serialize_SSnodedata+0x2c>)
 8001340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001344:	0800139b 	.word	0x0800139b
 8001348:	080013f3 	.word	0x080013f3
 800134c:	08001453 	.word	0x08001453
 8001350:	08001361 	.word	0x08001361
 8001354:	08001419 	.word	0x08001419
 8001358:	08001453 	.word	0x08001453
 800135c:	08001453 	.word	0x08001453
		case DATA_REGISTER:
			Serial_buff[buff_len++] = current->SSnode.SSnode_ID;
 8001360:	89fb      	ldrh	r3, [r7, #14]
 8001362:	1c5a      	adds	r2, r3, #1
 8001364:	81fa      	strh	r2, [r7, #14]
 8001366:	461a      	mov	r2, r3
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	4413      	add	r3, r2
 800136c:	68ba      	ldr	r2, [r7, #8]
 800136e:	7812      	ldrb	r2, [r2, #0]
 8001370:	701a      	strb	r2, [r3, #0]
			Serial_buff[buff_len++]= current->SSnode.Battery;
 8001372:	68bb      	ldr	r3, [r7, #8]
 8001374:	885a      	ldrh	r2, [r3, #2]
 8001376:	89fb      	ldrh	r3, [r7, #14]
 8001378:	1c59      	adds	r1, r3, #1
 800137a:	81f9      	strh	r1, [r7, #14]
 800137c:	4619      	mov	r1, r3
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	440b      	add	r3, r1
 8001382:	b2d2      	uxtb	r2, r2
 8001384:	701a      	strb	r2, [r3, #0]
			Serial_buff[buff_len++]= current->SSnode.V_type;
 8001386:	89fb      	ldrh	r3, [r7, #14]
 8001388:	1c5a      	adds	r2, r3, #1
 800138a:	81fa      	strh	r2, [r7, #14]
 800138c:	461a      	mov	r2, r3
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4413      	add	r3, r2
 8001392:	68ba      	ldr	r2, [r7, #8]
 8001394:	7912      	ldrb	r2, [r2, #4]
 8001396:	701a      	strb	r2, [r3, #0]
			break;
 8001398:	e05e      	b.n	8001458 <Serialize_SSnodedata+0x140>
		case DATA_PERIOD:
			Serial_buff[buff_len++] = current->SSnode.SSnode_ID;
 800139a:	89fb      	ldrh	r3, [r7, #14]
 800139c:	1c5a      	adds	r2, r3, #1
 800139e:	81fa      	strh	r2, [r7, #14]
 80013a0:	461a      	mov	r2, r3
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4413      	add	r3, r2
 80013a6:	68ba      	ldr	r2, [r7, #8]
 80013a8:	7812      	ldrb	r2, [r2, #0]
 80013aa:	701a      	strb	r2, [r3, #0]
			Serial_buff[buff_len++]= current->SSnode.Battery;
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	885a      	ldrh	r2, [r3, #2]
 80013b0:	89fb      	ldrh	r3, [r7, #14]
 80013b2:	1c59      	adds	r1, r3, #1
 80013b4:	81f9      	strh	r1, [r7, #14]
 80013b6:	4619      	mov	r1, r3
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	440b      	add	r3, r1
 80013bc:	b2d2      	uxtb	r2, r2
 80013be:	701a      	strb	r2, [r3, #0]
			Serial_buff[buff_len++]= ( current->SSnode.V_value >> 8 ) & 0xFF;
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	88db      	ldrh	r3, [r3, #6]
 80013c4:	b29b      	uxth	r3, r3
 80013c6:	0a1b      	lsrs	r3, r3, #8
 80013c8:	b29a      	uxth	r2, r3
 80013ca:	89fb      	ldrh	r3, [r7, #14]
 80013cc:	1c59      	adds	r1, r3, #1
 80013ce:	81f9      	strh	r1, [r7, #14]
 80013d0:	4619      	mov	r1, r3
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	440b      	add	r3, r1
 80013d6:	b2d2      	uxtb	r2, r2
 80013d8:	701a      	strb	r2, [r3, #0]
			Serial_buff[buff_len++]= current->SSnode.V_value & 0xFF;
 80013da:	68bb      	ldr	r3, [r7, #8]
 80013dc:	88db      	ldrh	r3, [r3, #6]
 80013de:	b29a      	uxth	r2, r3
 80013e0:	89fb      	ldrh	r3, [r7, #14]
 80013e2:	1c59      	adds	r1, r3, #1
 80013e4:	81f9      	strh	r1, [r7, #14]
 80013e6:	4619      	mov	r1, r3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	440b      	add	r3, r1
 80013ec:	b2d2      	uxtb	r2, r2
 80013ee:	701a      	strb	r2, [r3, #0]
			break;
 80013f0:	e032      	b.n	8001458 <Serialize_SSnodedata+0x140>
		case DATA_NETWREADY:
			Serial_buff[buff_len++] = current->SSnode.SSnode_ID;
 80013f2:	89fb      	ldrh	r3, [r7, #14]
 80013f4:	1c5a      	adds	r2, r3, #1
 80013f6:	81fa      	strh	r2, [r7, #14]
 80013f8:	461a      	mov	r2, r3
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4413      	add	r3, r2
 80013fe:	68ba      	ldr	r2, [r7, #8]
 8001400:	7812      	ldrb	r2, [r2, #0]
 8001402:	701a      	strb	r2, [r3, #0]
			Serial_buff[buff_len++]= current->SSnode.Sensor_state;
 8001404:	89fb      	ldrh	r3, [r7, #14]
 8001406:	1c5a      	adds	r2, r3, #1
 8001408:	81fa      	strh	r2, [r7, #14]
 800140a:	461a      	mov	r2, r3
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	4413      	add	r3, r2
 8001410:	68ba      	ldr	r2, [r7, #8]
 8001412:	7a12      	ldrb	r2, [r2, #8]
 8001414:	701a      	strb	r2, [r3, #0]
			break;
 8001416:	e01f      	b.n	8001458 <Serialize_SSnodedata+0x140>
		case DATA_CALIB:
			if (current->SSnode.dataCalibAvailable)	{
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	7a5b      	ldrb	r3, [r3, #9]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d01a      	beq.n	8001456 <Serialize_SSnodedata+0x13e>
				Serial_buff[buff_len++] = current->SSnode.SSnode_ID;
 8001420:	89fb      	ldrh	r3, [r7, #14]
 8001422:	1c5a      	adds	r2, r3, #1
 8001424:	81fa      	strh	r2, [r7, #14]
 8001426:	461a      	mov	r2, r3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	4413      	add	r3, r2
 800142c:	68ba      	ldr	r2, [r7, #8]
 800142e:	7812      	ldrb	r2, [r2, #0]
 8001430:	701a      	strb	r2, [r3, #0]
				memcpy(Serial_buff + buff_len, current->SSnode.dataCalibBuffer, 100);
 8001432:	89fb      	ldrh	r3, [r7, #14]
 8001434:	687a      	ldr	r2, [r7, #4]
 8001436:	18d0      	adds	r0, r2, r3
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	330c      	adds	r3, #12
 800143c:	2264      	movs	r2, #100	; 0x64
 800143e:	4619      	mov	r1, r3
 8001440:	f00a ff02 	bl	800c248 <memcpy>
				buff_len += 100;
 8001444:	89fb      	ldrh	r3, [r7, #14]
 8001446:	3364      	adds	r3, #100	; 0x64
 8001448:	81fb      	strh	r3, [r7, #14]
				current->SSnode.dataCalibAvailable = 0;
 800144a:	68bb      	ldr	r3, [r7, #8]
 800144c:	2200      	movs	r2, #0
 800144e:	725a      	strb	r2, [r3, #9]
//				current->SSnode.sentDatacalib = 1;
			}
			break;
 8001450:	e001      	b.n	8001456 <Serialize_SSnodedata+0x13e>
		case DATA_AFTERCALIB:
			break;
		default:
			break;
 8001452:	bf00      	nop
 8001454:	e000      	b.n	8001458 <Serialize_SSnodedata+0x140>
			break;
 8001456:	bf00      	nop
		}
		current = current->next;
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800145c:	60bb      	str	r3, [r7, #8]
	while (current != myStation.ssNode_list->tail)
 800145e:	4b06      	ldr	r3, [pc, #24]	; (8001478 <Serialize_SSnodedata+0x160>)
 8001460:	68db      	ldr	r3, [r3, #12]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	68ba      	ldr	r2, [r7, #8]
 8001466:	429a      	cmp	r2, r3
 8001468:	f47f af64 	bne.w	8001334 <Serialize_SSnodedata+0x1c>
	}
//	Serial_buff[buff_len] = '\0';
	return buff_len;
 800146c:	89fb      	ldrh	r3, [r7, #14]
}
 800146e:	4618      	mov	r0, r3
 8001470:	3710      	adds	r7, #16
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	20000478 	.word	0x20000478

0800147c <Serialize_Stationdata>:

uint8_t Serialize_Stationdata( uint8_t *Buffer, DATA_t dataType)
{
 800147c:	b590      	push	{r4, r7, lr}
 800147e:	b085      	sub	sp, #20
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	460b      	mov	r3, r1
 8001486:	70fb      	strb	r3, [r7, #3]
	uint8_t buff_len = 0;
 8001488:	2300      	movs	r3, #0
 800148a:	73fb      	strb	r3, [r7, #15]
	switch (dataType) {
 800148c:	78fb      	ldrb	r3, [r7, #3]
 800148e:	3b01      	subs	r3, #1
 8001490:	2b08      	cmp	r3, #8
 8001492:	f200 80e7 	bhi.w	8001664 <Serialize_Stationdata+0x1e8>
 8001496:	a201      	add	r2, pc, #4	; (adr r2, 800149c <Serialize_Stationdata+0x20>)
 8001498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800149c:	08001551 	.word	0x08001551
 80014a0:	0800152d 	.word	0x0800152d
 80014a4:	08001665 	.word	0x08001665
 80014a8:	080014c1 	.word	0x080014c1
 80014ac:	080015a3 	.word	0x080015a3
 80014b0:	08001665 	.word	0x08001665
 80014b4:	0800160f 	.word	0x0800160f
 80014b8:	0800163d 	.word	0x0800163d
 80014bc:	0800164f 	.word	0x0800164f
		case DATA_REGISTER:
			Buffer[buff_len++] = myStation.stID;
 80014c0:	7bfb      	ldrb	r3, [r7, #15]
 80014c2:	1c5a      	adds	r2, r3, #1
 80014c4:	73fa      	strb	r2, [r7, #15]
 80014c6:	461a      	mov	r2, r3
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	4413      	add	r3, r2
 80014cc:	4a68      	ldr	r2, [pc, #416]	; (8001670 <Serialize_Stationdata+0x1f4>)
 80014ce:	7852      	ldrb	r2, [r2, #1]
 80014d0:	701a      	strb	r2, [r3, #0]
			Buffer[buff_len++] = (uint8_t)( ( myStation.stCurrent >> 8 ) & 0xFF);
 80014d2:	4b67      	ldr	r3, [pc, #412]	; (8001670 <Serialize_Stationdata+0x1f4>)
 80014d4:	885b      	ldrh	r3, [r3, #2]
 80014d6:	0a1b      	lsrs	r3, r3, #8
 80014d8:	b29a      	uxth	r2, r3
 80014da:	7bfb      	ldrb	r3, [r7, #15]
 80014dc:	1c59      	adds	r1, r3, #1
 80014de:	73f9      	strb	r1, [r7, #15]
 80014e0:	4619      	mov	r1, r3
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	440b      	add	r3, r1
 80014e6:	b2d2      	uxtb	r2, r2
 80014e8:	701a      	strb	r2, [r3, #0]
			Buffer[buff_len++] = (uint8_t)( myStation.stCurrent & 0xFF );
 80014ea:	4b61      	ldr	r3, [pc, #388]	; (8001670 <Serialize_Stationdata+0x1f4>)
 80014ec:	885a      	ldrh	r2, [r3, #2]
 80014ee:	7bfb      	ldrb	r3, [r7, #15]
 80014f0:	1c59      	adds	r1, r3, #1
 80014f2:	73f9      	strb	r1, [r7, #15]
 80014f4:	4619      	mov	r1, r3
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	440b      	add	r3, r1
 80014fa:	b2d2      	uxtb	r2, r2
 80014fc:	701a      	strb	r2, [r3, #0]
			Buffer[buff_len++] = (uint8_t)( ( myStation.stVoltage >> 8 ) & 0xFF );
 80014fe:	4b5c      	ldr	r3, [pc, #368]	; (8001670 <Serialize_Stationdata+0x1f4>)
 8001500:	889b      	ldrh	r3, [r3, #4]
 8001502:	0a1b      	lsrs	r3, r3, #8
 8001504:	b29a      	uxth	r2, r3
 8001506:	7bfb      	ldrb	r3, [r7, #15]
 8001508:	1c59      	adds	r1, r3, #1
 800150a:	73f9      	strb	r1, [r7, #15]
 800150c:	4619      	mov	r1, r3
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	440b      	add	r3, r1
 8001512:	b2d2      	uxtb	r2, r2
 8001514:	701a      	strb	r2, [r3, #0]
			Buffer[buff_len++] = (uint8_t)( myStation.stVoltage & 0xFF );
 8001516:	4b56      	ldr	r3, [pc, #344]	; (8001670 <Serialize_Stationdata+0x1f4>)
 8001518:	889a      	ldrh	r2, [r3, #4]
 800151a:	7bfb      	ldrb	r3, [r7, #15]
 800151c:	1c59      	adds	r1, r3, #1
 800151e:	73f9      	strb	r1, [r7, #15]
 8001520:	4619      	mov	r1, r3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	440b      	add	r3, r1
 8001526:	b2d2      	uxtb	r2, r2
 8001528:	701a      	strb	r2, [r3, #0]
			break;
 800152a:	e09c      	b.n	8001666 <Serialize_Stationdata+0x1ea>
		case DATA_NETWREADY:
			Buffer[buff_len++] = myStation.stID;
 800152c:	7bfb      	ldrb	r3, [r7, #15]
 800152e:	1c5a      	adds	r2, r3, #1
 8001530:	73fa      	strb	r2, [r7, #15]
 8001532:	461a      	mov	r2, r3
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	4413      	add	r3, r2
 8001538:	4a4d      	ldr	r2, [pc, #308]	; (8001670 <Serialize_Stationdata+0x1f4>)
 800153a:	7852      	ldrb	r2, [r2, #1]
 800153c:	701a      	strb	r2, [r3, #0]
			Buffer[buff_len++] = (uint8_t) ACTIVE;
 800153e:	7bfb      	ldrb	r3, [r7, #15]
 8001540:	1c5a      	adds	r2, r3, #1
 8001542:	73fa      	strb	r2, [r7, #15]
 8001544:	461a      	mov	r2, r3
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4413      	add	r3, r2
 800154a:	2201      	movs	r2, #1
 800154c:	701a      	strb	r2, [r3, #0]
			break;
 800154e:	e08a      	b.n	8001666 <Serialize_Stationdata+0x1ea>
		case DATA_PERIOD:
			Buffer[buff_len++] = myStation.stID;
 8001550:	7bfb      	ldrb	r3, [r7, #15]
 8001552:	1c5a      	adds	r2, r3, #1
 8001554:	73fa      	strb	r2, [r7, #15]
 8001556:	461a      	mov	r2, r3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	4413      	add	r3, r2
 800155c:	4a44      	ldr	r2, [pc, #272]	; (8001670 <Serialize_Stationdata+0x1f4>)
 800155e:	7852      	ldrb	r2, [r2, #1]
 8001560:	701a      	strb	r2, [r3, #0]
			Buffer[buff_len++] = (uint8_t)( ( myStation.stCurrent >> 8 ) & 0xFF);
 8001562:	4b43      	ldr	r3, [pc, #268]	; (8001670 <Serialize_Stationdata+0x1f4>)
 8001564:	885b      	ldrh	r3, [r3, #2]
 8001566:	0a1b      	lsrs	r3, r3, #8
 8001568:	b29a      	uxth	r2, r3
 800156a:	7bfb      	ldrb	r3, [r7, #15]
 800156c:	1c59      	adds	r1, r3, #1
 800156e:	73f9      	strb	r1, [r7, #15]
 8001570:	4619      	mov	r1, r3
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	440b      	add	r3, r1
 8001576:	b2d2      	uxtb	r2, r2
 8001578:	701a      	strb	r2, [r3, #0]
			Buffer[buff_len++] = (uint8_t)( myStation.stCurrent & 0xFF );
 800157a:	4b3d      	ldr	r3, [pc, #244]	; (8001670 <Serialize_Stationdata+0x1f4>)
 800157c:	885a      	ldrh	r2, [r3, #2]
 800157e:	7bfb      	ldrb	r3, [r7, #15]
 8001580:	1c59      	adds	r1, r3, #1
 8001582:	73f9      	strb	r1, [r7, #15]
 8001584:	4619      	mov	r1, r3
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	440b      	add	r3, r1
 800158a:	b2d2      	uxtb	r2, r2
 800158c:	701a      	strb	r2, [r3, #0]
			Buffer[buff_len++] = (uint8_t)(myStation.MBAstate);
 800158e:	7bfb      	ldrb	r3, [r7, #15]
 8001590:	1c5a      	adds	r2, r3, #1
 8001592:	73fa      	strb	r2, [r7, #15]
 8001594:	461a      	mov	r2, r3
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4413      	add	r3, r2
 800159a:	4a35      	ldr	r2, [pc, #212]	; (8001670 <Serialize_Stationdata+0x1f4>)
 800159c:	7992      	ldrb	r2, [r2, #6]
 800159e:	701a      	strb	r2, [r3, #0]
//			Buffer[buff_len++] = (uint8_t)( ( myStation.stVoltage >> 8 ) & 0xFF );
//			Buffer[buff_len++] = (uint8_t)( myStation.stVoltage & 0xFF );
			break;
 80015a0:	e061      	b.n	8001666 <Serialize_Stationdata+0x1ea>
		case DATA_CALIB:
			Buffer[buff_len++] = myStation.stID;
 80015a2:	7bfb      	ldrb	r3, [r7, #15]
 80015a4:	1c5a      	adds	r2, r3, #1
 80015a6:	73fa      	strb	r2, [r7, #15]
 80015a8:	461a      	mov	r2, r3
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4413      	add	r3, r2
 80015ae:	4a30      	ldr	r2, [pc, #192]	; (8001670 <Serialize_Stationdata+0x1f4>)
 80015b0:	7852      	ldrb	r2, [r2, #1]
 80015b2:	701a      	strb	r2, [r3, #0]
			Buffer[buff_len++] = (uint8_t)( ( myStation.stCurrent >> 8 ) & 0xFF);
 80015b4:	4b2e      	ldr	r3, [pc, #184]	; (8001670 <Serialize_Stationdata+0x1f4>)
 80015b6:	885b      	ldrh	r3, [r3, #2]
 80015b8:	0a1b      	lsrs	r3, r3, #8
 80015ba:	b29a      	uxth	r2, r3
 80015bc:	7bfb      	ldrb	r3, [r7, #15]
 80015be:	1c59      	adds	r1, r3, #1
 80015c0:	73f9      	strb	r1, [r7, #15]
 80015c2:	4619      	mov	r1, r3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	440b      	add	r3, r1
 80015c8:	b2d2      	uxtb	r2, r2
 80015ca:	701a      	strb	r2, [r3, #0]
			Buffer[buff_len++] = (uint8_t)( myStation.stCurrent & 0xFF );
 80015cc:	4b28      	ldr	r3, [pc, #160]	; (8001670 <Serialize_Stationdata+0x1f4>)
 80015ce:	885a      	ldrh	r2, [r3, #2]
 80015d0:	7bfb      	ldrb	r3, [r7, #15]
 80015d2:	1c59      	adds	r1, r3, #1
 80015d4:	73f9      	strb	r1, [r7, #15]
 80015d6:	4619      	mov	r1, r3
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	440b      	add	r3, r1
 80015dc:	b2d2      	uxtb	r2, r2
 80015de:	701a      	strb	r2, [r3, #0]
			Buffer[buff_len++] = (uint8_t)( ( myStation.stVoltage >> 8 ) & 0xFF );
 80015e0:	4b23      	ldr	r3, [pc, #140]	; (8001670 <Serialize_Stationdata+0x1f4>)
 80015e2:	889b      	ldrh	r3, [r3, #4]
 80015e4:	0a1b      	lsrs	r3, r3, #8
 80015e6:	b29a      	uxth	r2, r3
 80015e8:	7bfb      	ldrb	r3, [r7, #15]
 80015ea:	1c59      	adds	r1, r3, #1
 80015ec:	73f9      	strb	r1, [r7, #15]
 80015ee:	4619      	mov	r1, r3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	440b      	add	r3, r1
 80015f4:	b2d2      	uxtb	r2, r2
 80015f6:	701a      	strb	r2, [r3, #0]
			Buffer[buff_len++] = (uint8_t)( myStation.stVoltage & 0xFF );
 80015f8:	4b1d      	ldr	r3, [pc, #116]	; (8001670 <Serialize_Stationdata+0x1f4>)
 80015fa:	889a      	ldrh	r2, [r3, #4]
 80015fc:	7bfb      	ldrb	r3, [r7, #15]
 80015fe:	1c59      	adds	r1, r3, #1
 8001600:	73f9      	strb	r1, [r7, #15]
 8001602:	4619      	mov	r1, r3
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	440b      	add	r3, r1
 8001608:	b2d2      	uxtb	r2, r2
 800160a:	701a      	strb	r2, [r3, #0]
			break;
 800160c:	e02b      	b.n	8001666 <Serialize_Stationdata+0x1ea>
		case DATA_AFTERCALIB:
			Buffer[buff_len++] = (uint8_t)( ( myStation.stCurrent >> 8 ) & 0xFF);
 800160e:	4b18      	ldr	r3, [pc, #96]	; (8001670 <Serialize_Stationdata+0x1f4>)
 8001610:	885b      	ldrh	r3, [r3, #2]
 8001612:	0a1b      	lsrs	r3, r3, #8
 8001614:	b29a      	uxth	r2, r3
 8001616:	7bfb      	ldrb	r3, [r7, #15]
 8001618:	1c59      	adds	r1, r3, #1
 800161a:	73f9      	strb	r1, [r7, #15]
 800161c:	4619      	mov	r1, r3
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	440b      	add	r3, r1
 8001622:	b2d2      	uxtb	r2, r2
 8001624:	701a      	strb	r2, [r3, #0]
			Buffer[buff_len++] = (uint8_t)( myStation.stCurrent & 0xFF );
 8001626:	4b12      	ldr	r3, [pc, #72]	; (8001670 <Serialize_Stationdata+0x1f4>)
 8001628:	885a      	ldrh	r2, [r3, #2]
 800162a:	7bfb      	ldrb	r3, [r7, #15]
 800162c:	1c59      	adds	r1, r3, #1
 800162e:	73f9      	strb	r1, [r7, #15]
 8001630:	4619      	mov	r1, r3
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	440b      	add	r3, r1
 8001636:	b2d2      	uxtb	r2, r2
 8001638:	701a      	strb	r2, [r3, #0]
			break;
 800163a:	e014      	b.n	8001666 <Serialize_Stationdata+0x1ea>
		case DATA_MBA_STATE:
			Buffer[buff_len++] = (uint8_t) (myStation.MBAstate);
 800163c:	7bfb      	ldrb	r3, [r7, #15]
 800163e:	1c5a      	adds	r2, r3, #1
 8001640:	73fa      	strb	r2, [r7, #15]
 8001642:	461a      	mov	r2, r3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	4413      	add	r3, r2
 8001648:	4a09      	ldr	r2, [pc, #36]	; (8001670 <Serialize_Stationdata+0x1f4>)
 800164a:	7992      	ldrb	r2, [r2, #6]
 800164c:	701a      	strb	r2, [r3, #0]
		case DATA_STEP_REACH_LIMIT:
			Buffer[buff_len++] = (uint8_t)getLimit();
 800164e:	7bfb      	ldrb	r3, [r7, #15]
 8001650:	1c5a      	adds	r2, r3, #1
 8001652:	73fa      	strb	r2, [r7, #15]
 8001654:	461a      	mov	r2, r3
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	189c      	adds	r4, r3, r2
 800165a:	f002 f8bf 	bl	80037dc <getLimit>
 800165e:	4603      	mov	r3, r0
 8001660:	7023      	strb	r3, [r4, #0]
			break;
 8001662:	e000      	b.n	8001666 <Serialize_Stationdata+0x1ea>
		default:
			break;
 8001664:	bf00      	nop
	}

	return buff_len;
 8001666:	7bfb      	ldrb	r3, [r7, #15]
}
 8001668:	4618      	mov	r0, r3
 800166a:	3714      	adds	r7, #20
 800166c:	46bd      	mov	sp, r7
 800166e:	bd90      	pop	{r4, r7, pc}
 8001670:	20000478 	.word	0x20000478

08001674 <Serialize_Data>:
uint8_t Serialize_Data(uint8_t *databuff, DATA_t dataType)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b084      	sub	sp, #16
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	460b      	mov	r3, r1
 800167e:	70fb      	strb	r3, [r7, #3]
	uint16_t data_len = 0 ;
 8001680:	2300      	movs	r3, #0
 8001682:	81fb      	strh	r3, [r7, #14]
	data_len = Serialize_Stationdata(databuff, dataType );
 8001684:	78fb      	ldrb	r3, [r7, #3]
 8001686:	4619      	mov	r1, r3
 8001688:	6878      	ldr	r0, [r7, #4]
 800168a:	f7ff fef7 	bl	800147c <Serialize_Stationdata>
 800168e:	4603      	mov	r3, r0
 8001690:	81fb      	strh	r3, [r7, #14]
	data_len += Serialize_SSnodedata(databuff + data_len, dataType);
 8001692:	89fb      	ldrh	r3, [r7, #14]
 8001694:	687a      	ldr	r2, [r7, #4]
 8001696:	4413      	add	r3, r2
 8001698:	78fa      	ldrb	r2, [r7, #3]
 800169a:	4611      	mov	r1, r2
 800169c:	4618      	mov	r0, r3
 800169e:	f7ff fe3b 	bl	8001318 <Serialize_SSnodedata>
 80016a2:	4603      	mov	r3, r0
 80016a4:	461a      	mov	r2, r3
 80016a6:	89fb      	ldrh	r3, [r7, #14]
 80016a8:	4413      	add	r3, r2
 80016aa:	81fb      	strh	r3, [r7, #14]
	if ( !addTimetobuff( databuff, data_len ) )		return 0;
 80016ac:	89fb      	ldrh	r3, [r7, #14]
 80016ae:	4619      	mov	r1, r3
 80016b0:	6878      	ldr	r0, [r7, #4]
 80016b2:	f7ff fdcb 	bl	800124c <addTimetobuff>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d101      	bne.n	80016c0 <Serialize_Data+0x4c>
 80016bc:	2300      	movs	r3, #0
 80016be:	e004      	b.n	80016ca <Serialize_Data+0x56>
	data_len += 4;      // 4 bytes of time + buffer length
 80016c0:	89fb      	ldrh	r3, [r7, #14]
 80016c2:	3304      	adds	r3, #4
 80016c4:	81fb      	strh	r3, [r7, #14]
	return data_len;
 80016c6:	89fb      	ldrh	r3, [r7, #14]
 80016c8:	b2db      	uxtb	r3, r3
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3710      	adds	r7, #16
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}

080016d2 <addDatatoPack>:

uint8_t addDatatoPack(uint8_t *Pack, uint16_t Pack_len, uint8_t *Databuff, uint16_t dataLen)
{
 80016d2:	b580      	push	{r7, lr}
 80016d4:	b084      	sub	sp, #16
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	60f8      	str	r0, [r7, #12]
 80016da:	607a      	str	r2, [r7, #4]
 80016dc:	461a      	mov	r2, r3
 80016de:	460b      	mov	r3, r1
 80016e0:	817b      	strh	r3, [r7, #10]
 80016e2:	4613      	mov	r3, r2
 80016e4:	813b      	strh	r3, [r7, #8]
	memcpy(Pack+ Pack_len, Databuff, dataLen);
 80016e6:	897b      	ldrh	r3, [r7, #10]
 80016e8:	68fa      	ldr	r2, [r7, #12]
 80016ea:	4413      	add	r3, r2
 80016ec:	893a      	ldrh	r2, [r7, #8]
 80016ee:	6879      	ldr	r1, [r7, #4]
 80016f0:	4618      	mov	r0, r3
 80016f2:	f00a fda9 	bl	800c248 <memcpy>
	return dataLen ;
 80016f6:	893b      	ldrh	r3, [r7, #8]
 80016f8:	b2db      	uxtb	r3, r3
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3710      	adds	r7, #16
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
	...

08001704 <Serialize_addtionaldata>:

uint8_t Serialize_addtionaldata( CMD_t CMDtype, uint8_t *Getbuffer, uint8_t *databuffer, uint16_t datalen, MBA_state_t MBAstate, Stepmotor_dir_t Stepm_DIR,
							Stepmotor_change_mode_t Stepm_changeMode, uint8_t Stepm_changeValue )
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b086      	sub	sp, #24
 8001708:	af00      	add	r7, sp, #0
 800170a:	60b9      	str	r1, [r7, #8]
 800170c:	607a      	str	r2, [r7, #4]
 800170e:	461a      	mov	r2, r3
 8001710:	4603      	mov	r3, r0
 8001712:	73fb      	strb	r3, [r7, #15]
 8001714:	4613      	mov	r3, r2
 8001716:	81bb      	strh	r3, [r7, #12]
	uint8_t buff_len = 0;
 8001718:	2300      	movs	r3, #0
 800171a:	75fb      	strb	r3, [r7, #23]
	switch ( CMDtype ) {
 800171c:	7bfb      	ldrb	r3, [r7, #15]
 800171e:	3b03      	subs	r3, #3
 8001720:	2b08      	cmp	r3, #8
 8001722:	f200 808d 	bhi.w	8001840 <Serialize_addtionaldata+0x13c>
 8001726:	a201      	add	r2, pc, #4	; (adr r2, 800172c <Serialize_addtionaldata+0x28>)
 8001728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800172c:	08001751 	.word	0x08001751
 8001730:	0800176d 	.word	0x0800176d
 8001734:	08001841 	.word	0x08001841
 8001738:	08001841 	.word	0x08001841
 800173c:	08001789 	.word	0x08001789
 8001740:	080017b7 	.word	0x080017b7
 8001744:	08001841 	.word	0x08001841
 8001748:	08001809 	.word	0x08001809
 800174c:	08001825 	.word	0x08001825
		case CMD_SMS_CALIB:
			// Time delay + Phone number
			memcpy(Getbuffer + buff_len, databuffer, datalen);
 8001750:	7dfb      	ldrb	r3, [r7, #23]
 8001752:	68ba      	ldr	r2, [r7, #8]
 8001754:	4413      	add	r3, r2
 8001756:	89ba      	ldrh	r2, [r7, #12]
 8001758:	6879      	ldr	r1, [r7, #4]
 800175a:	4618      	mov	r0, r3
 800175c:	f00a fd74 	bl	800c248 <memcpy>
			buff_len += datalen;
 8001760:	89bb      	ldrh	r3, [r7, #12]
 8001762:	b2da      	uxtb	r2, r3
 8001764:	7dfb      	ldrb	r3, [r7, #23]
 8001766:	4413      	add	r3, r2
 8001768:	75fb      	strb	r3, [r7, #23]
			break;
 800176a:	e06a      	b.n	8001842 <Serialize_addtionaldata+0x13e>
		case CMD_SMS_GETSTATUS:
			// Phone number	(11 byte)
			memcpy(Getbuffer + buff_len, databuffer, datalen);
 800176c:	7dfb      	ldrb	r3, [r7, #23]
 800176e:	68ba      	ldr	r2, [r7, #8]
 8001770:	4413      	add	r3, r2
 8001772:	89ba      	ldrh	r2, [r7, #12]
 8001774:	6879      	ldr	r1, [r7, #4]
 8001776:	4618      	mov	r0, r3
 8001778:	f00a fd66 	bl	800c248 <memcpy>
			buff_len += datalen;
 800177c:	89bb      	ldrh	r3, [r7, #12]
 800177e:	b2da      	uxtb	r2, r3
 8001780:	7dfb      	ldrb	r3, [r7, #23]
 8001782:	4413      	add	r3, r2
 8001784:	75fb      	strb	r3, [r7, #23]
			break;
 8001786:	e05c      	b.n	8001842 <Serialize_addtionaldata+0x13e>
		case CMD_CTRL_MBA:
			// First byte: ON/OFF
			Getbuffer[buff_len++] = MBAstate;
 8001788:	7dfb      	ldrb	r3, [r7, #23]
 800178a:	1c5a      	adds	r2, r3, #1
 800178c:	75fa      	strb	r2, [r7, #23]
 800178e:	461a      	mov	r2, r3
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	4413      	add	r3, r2
 8001794:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001798:	701a      	strb	r2, [r3, #0]
			// Station ID list + time delay + phone number
			memcpy(Getbuffer + buff_len, databuffer, datalen);
 800179a:	7dfb      	ldrb	r3, [r7, #23]
 800179c:	68ba      	ldr	r2, [r7, #8]
 800179e:	4413      	add	r3, r2
 80017a0:	89ba      	ldrh	r2, [r7, #12]
 80017a2:	6879      	ldr	r1, [r7, #4]
 80017a4:	4618      	mov	r0, r3
 80017a6:	f00a fd4f 	bl	800c248 <memcpy>
			buff_len += datalen;
 80017aa:	89bb      	ldrh	r3, [r7, #12]
 80017ac:	b2da      	uxtb	r2, r3
 80017ae:	7dfb      	ldrb	r3, [r7, #23]
 80017b0:	4413      	add	r3, r2
 80017b2:	75fb      	strb	r3, [r7, #23]
			break;
 80017b4:	e045      	b.n	8001842 <Serialize_addtionaldata+0x13e>
		case CMD_CTRL_STEP_MOTOR:
			// First byte: Increase/Decrease (1 byte)
			Getbuffer[buff_len++] = Stepm_DIR ;
 80017b6:	7dfb      	ldrb	r3, [r7, #23]
 80017b8:	1c5a      	adds	r2, r3, #1
 80017ba:	75fa      	strb	r2, [r7, #23]
 80017bc:	461a      	mov	r2, r3
 80017be:	68bb      	ldr	r3, [r7, #8]
 80017c0:	4413      	add	r3, r2
 80017c2:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80017c6:	701a      	strb	r2, [r3, #0]
			// Second byte: Change Percentage/Step (1 byte)
			Getbuffer[buff_len++] = Stepm_changeMode;
 80017c8:	7dfb      	ldrb	r3, [r7, #23]
 80017ca:	1c5a      	adds	r2, r3, #1
 80017cc:	75fa      	strb	r2, [r7, #23]
 80017ce:	461a      	mov	r2, r3
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	4413      	add	r3, r2
 80017d4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80017d8:	701a      	strb	r2, [r3, #0]
			// Third byte : Value
			Getbuffer[buff_len++] = Stepm_changeValue;
 80017da:	7dfb      	ldrb	r3, [r7, #23]
 80017dc:	1c5a      	adds	r2, r3, #1
 80017de:	75fa      	strb	r2, [r7, #23]
 80017e0:	461a      	mov	r2, r3
 80017e2:	68bb      	ldr	r3, [r7, #8]
 80017e4:	4413      	add	r3, r2
 80017e6:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80017ea:	701a      	strb	r2, [r3, #0]
			// Station ID list + time delay + phone number
			memcpy(Getbuffer + buff_len, databuffer, datalen);
 80017ec:	7dfb      	ldrb	r3, [r7, #23]
 80017ee:	68ba      	ldr	r2, [r7, #8]
 80017f0:	4413      	add	r3, r2
 80017f2:	89ba      	ldrh	r2, [r7, #12]
 80017f4:	6879      	ldr	r1, [r7, #4]
 80017f6:	4618      	mov	r0, r3
 80017f8:	f00a fd26 	bl	800c248 <memcpy>
			buff_len += datalen;
 80017fc:	89bb      	ldrh	r3, [r7, #12]
 80017fe:	b2da      	uxtb	r2, r3
 8001800:	7dfb      	ldrb	r3, [r7, #23]
 8001802:	4413      	add	r3, r2
 8001804:	75fb      	strb	r3, [r7, #23]
			break;
 8001806:	e01c      	b.n	8001842 <Serialize_addtionaldata+0x13e>
		case CMD_GET_LATEST_DATA_SENSOR:
			// Sensor ID list + phone number
			memcpy(Getbuffer + buff_len, databuffer, datalen);
 8001808:	7dfb      	ldrb	r3, [r7, #23]
 800180a:	68ba      	ldr	r2, [r7, #8]
 800180c:	4413      	add	r3, r2
 800180e:	89ba      	ldrh	r2, [r7, #12]
 8001810:	6879      	ldr	r1, [r7, #4]
 8001812:	4618      	mov	r0, r3
 8001814:	f00a fd18 	bl	800c248 <memcpy>
			buff_len += datalen;
 8001818:	89bb      	ldrh	r3, [r7, #12]
 800181a:	b2da      	uxtb	r2, r3
 800181c:	7dfb      	ldrb	r3, [r7, #23]
 800181e:	4413      	add	r3, r2
 8001820:	75fb      	strb	r3, [r7, #23]
			break;
 8001822:	e00e      	b.n	8001842 <Serialize_addtionaldata+0x13e>
		case CMD_GET_LASTEST_DATA_STATION:
			// Station ID list + phone number
			memcpy(Getbuffer + buff_len, databuffer, datalen);
 8001824:	7dfb      	ldrb	r3, [r7, #23]
 8001826:	68ba      	ldr	r2, [r7, #8]
 8001828:	4413      	add	r3, r2
 800182a:	89ba      	ldrh	r2, [r7, #12]
 800182c:	6879      	ldr	r1, [r7, #4]
 800182e:	4618      	mov	r0, r3
 8001830:	f00a fd0a 	bl	800c248 <memcpy>
			buff_len += datalen;
 8001834:	89bb      	ldrh	r3, [r7, #12]
 8001836:	b2da      	uxtb	r2, r3
 8001838:	7dfb      	ldrb	r3, [r7, #23]
 800183a:	4413      	add	r3, r2
 800183c:	75fb      	strb	r3, [r7, #23]
			break;
 800183e:	e000      	b.n	8001842 <Serialize_addtionaldata+0x13e>
		default:
			break;
 8001840:	bf00      	nop
	}
	return buff_len;
 8001842:	7dfb      	ldrb	r3, [r7, #23]
}
 8001844:	4618      	mov	r0, r3
 8001846:	3718      	adds	r7, #24
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}

0800184c <Register2Server>:

uint8_t Register2Server()
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
	uint8_t *tmp_databuff = (uint8_t*)malloc(256*sizeof(uint8_t));
 8001852:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001856:	f00a fcd7 	bl	800c208 <malloc>
 800185a:	4603      	mov	r3, r0
 800185c:	607b      	str	r3, [r7, #4]
	uint16_t pack_len = 0;
 800185e:	2300      	movs	r3, #0
 8001860:	807b      	strh	r3, [r7, #2]
	// Create package
	pack_len = createPack(PACKT_REGISTER, DATA_REGISTER, CMD_NONE );
 8001862:	2200      	movs	r2, #0
 8001864:	2104      	movs	r1, #4
 8001866:	20f5      	movs	r0, #245	; 0xf5
 8001868:	f7ff fd18 	bl	800129c <createPack>
 800186c:	4603      	mov	r3, r0
 800186e:	807b      	strh	r3, [r7, #2]
	if ( !pack_len ) {
 8001870:	887b      	ldrh	r3, [r7, #2]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d104      	bne.n	8001880 <Register2Server+0x34>
		free(tmp_databuff);
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f00a fcce 	bl	800c218 <free>
		return 0;
 800187c:	2300      	movs	r3, #0
 800187e:	e039      	b.n	80018f4 <Register2Server+0xa8>
		}
	 //Convert Register data to temp buffer
	uint8_t datalen= Serialize_Data(tmp_databuff, DATA_REGISTER );
 8001880:	2104      	movs	r1, #4
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f7ff fef6 	bl	8001674 <Serialize_Data>
 8001888:	4603      	mov	r3, r0
 800188a:	707b      	strb	r3, [r7, #1]
	if ( !datalen )	{
 800188c:	787b      	ldrb	r3, [r7, #1]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d104      	bne.n	800189c <Register2Server+0x50>
		free(tmp_databuff);
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	f00a fcc0 	bl	800c218 <free>
		return 0;
 8001898:	2300      	movs	r3, #0
 800189a:	e02b      	b.n	80018f4 <Register2Server+0xa8>
	}
	// Add Register data  temp buffer to package
	pack_len += addDatatoPack( Pack_buff, pack_len, tmp_databuff, datalen );
 800189c:	787b      	ldrb	r3, [r7, #1]
 800189e:	b29b      	uxth	r3, r3
 80018a0:	8879      	ldrh	r1, [r7, #2]
 80018a2:	687a      	ldr	r2, [r7, #4]
 80018a4:	4815      	ldr	r0, [pc, #84]	; (80018fc <Register2Server+0xb0>)
 80018a6:	f7ff ff14 	bl	80016d2 <addDatatoPack>
 80018aa:	4603      	mov	r3, r0
 80018ac:	b29a      	uxth	r2, r3
 80018ae:	887b      	ldrh	r3, [r7, #2]
 80018b0:	4413      	add	r3, r2
 80018b2:	807b      	strh	r3, [r7, #2]
	// Add CRC to package
	pack_len += addCRCtoPack( Pack_buff, pack_len );
 80018b4:	887b      	ldrh	r3, [r7, #2]
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	4619      	mov	r1, r3
 80018ba:	4810      	ldr	r0, [pc, #64]	; (80018fc <Register2Server+0xb0>)
 80018bc:	f7ff fcaa 	bl	8001214 <addCRCtoPack>
 80018c0:	4603      	mov	r3, r0
 80018c2:	b29a      	uxth	r2, r3
 80018c4:	887b      	ldrh	r3, [r7, #2]
 80018c6:	4413      	add	r3, r2
 80018c8:	807b      	strh	r3, [r7, #2]
	// Publish
	if ( MQTT_publish((uint8_t*)TOPIC_PUB, Pack_buff, pack_len) )	{
 80018ca:	887b      	ldrh	r3, [r7, #2]
 80018cc:	461a      	mov	r2, r3
 80018ce:	490b      	ldr	r1, [pc, #44]	; (80018fc <Register2Server+0xb0>)
 80018d0:	480b      	ldr	r0, [pc, #44]	; (8001900 <Register2Server+0xb4>)
 80018d2:	f003 fbe7 	bl	80050a4 <MQTT_publish>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d007      	beq.n	80018ec <Register2Server+0xa0>
		Serial_log_string(" Sent \"Register\" message to server\r\n");
 80018dc:	4809      	ldr	r0, [pc, #36]	; (8001904 <Register2Server+0xb8>)
 80018de:	f7ff fc61 	bl	80011a4 <Serial_log_string>
		free(tmp_databuff);
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	f00a fc98 	bl	800c218 <free>
		return 1;
 80018e8:	2301      	movs	r3, #1
 80018ea:	e003      	b.n	80018f4 <Register2Server+0xa8>
	}
	free(tmp_databuff);
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	f00a fc93 	bl	800c218 <free>
	return 0;
 80018f2:	2300      	movs	r3, #0
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	3708      	adds	r7, #8
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	20000d04 	.word	0x20000d04
 8001900:	0800ed3c 	.word	0x0800ed3c
 8001904:	0800ed50 	.word	0x0800ed50

08001908 <sendCMDtoServer>:

uint8_t sendCMDtoServer(CMD_t CMDtype, uint8_t *SMSdatabuffer, uint16_t datalen, MBA_state_t MBAstate,
		Stepmotor_dir_t Stepm_DIR, Stepmotor_change_mode_t Stepm_changeMode,
		uint8_t Stepm_changeValue)
{
 8001908:	b590      	push	{r4, r7, lr}
 800190a:	b0c9      	sub	sp, #292	; 0x124
 800190c:	af04      	add	r7, sp, #16
 800190e:	4604      	mov	r4, r0
 8001910:	f507 7088 	add.w	r0, r7, #272	; 0x110
 8001914:	f5a0 7088 	sub.w	r0, r0, #272	; 0x110
 8001918:	6001      	str	r1, [r0, #0]
 800191a:	4610      	mov	r0, r2
 800191c:	4619      	mov	r1, r3
 800191e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001922:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001926:	4622      	mov	r2, r4
 8001928:	701a      	strb	r2, [r3, #0]
 800192a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800192e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001932:	4602      	mov	r2, r0
 8001934:	801a      	strh	r2, [r3, #0]
 8001936:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800193a:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 800193e:	460a      	mov	r2, r1
 8001940:	701a      	strb	r2, [r3, #0]
	uint8_t  pack_len = 0;
 8001942:	2300      	movs	r3, #0
 8001944:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
	pack_len = createPack(PACKT_CMD, DATA_NONE, CMDtype );
 8001948:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800194c:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	461a      	mov	r2, r3
 8001954:	2100      	movs	r1, #0
 8001956:	20f2      	movs	r0, #242	; 0xf2
 8001958:	f7ff fca0 	bl	800129c <createPack>
 800195c:	4603      	mov	r3, r0
 800195e:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
	if ( !pack_len )	return 0; // Create package
 8001962:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001966:	2b00      	cmp	r3, #0
 8001968:	d101      	bne.n	800196e <sendCMDtoServer+0x66>
 800196a:	2300      	movs	r3, #0
 800196c:	e052      	b.n	8001a14 <sendCMDtoServer+0x10c>

	uint8_t tmpAbuff [256];
	uint8_t Abuff_len = Serialize_addtionaldata(CMDtype, tmpAbuff, SMSdatabuffer, datalen, MBAstate, Stepm_DIR, Stepm_changeMode, Stepm_changeValue);
 800196e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001972:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001976:	881c      	ldrh	r4, [r3, #0]
 8001978:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800197c:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 8001980:	f107 010c 	add.w	r1, r7, #12
 8001984:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001988:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800198c:	7818      	ldrb	r0, [r3, #0]
 800198e:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
 8001992:	9303      	str	r3, [sp, #12]
 8001994:	f897 3124 	ldrb.w	r3, [r7, #292]	; 0x124
 8001998:	9302      	str	r3, [sp, #8]
 800199a:	f897 3120 	ldrb.w	r3, [r7, #288]	; 0x120
 800199e:	9301      	str	r3, [sp, #4]
 80019a0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80019a4:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	9300      	str	r3, [sp, #0]
 80019ac:	4623      	mov	r3, r4
 80019ae:	6812      	ldr	r2, [r2, #0]
 80019b0:	f7ff fea8 	bl	8001704 <Serialize_addtionaldata>
 80019b4:	4603      	mov	r3, r0
 80019b6:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
	pack_len += addDatatoPack(Pack_buff, pack_len, tmpAbuff, Abuff_len);    // Add additional data to package
 80019ba:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80019be:	b299      	uxth	r1, r3
 80019c0:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 80019c4:	b29b      	uxth	r3, r3
 80019c6:	f107 020c 	add.w	r2, r7, #12
 80019ca:	4815      	ldr	r0, [pc, #84]	; (8001a20 <sendCMDtoServer+0x118>)
 80019cc:	f7ff fe81 	bl	80016d2 <addDatatoPack>
 80019d0:	4603      	mov	r3, r0
 80019d2:	461a      	mov	r2, r3
 80019d4:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80019d8:	4413      	add	r3, r2
 80019da:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f

	pack_len += addCRCtoPack( Pack_buff, pack_len );		// Add CRC to package
 80019de:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80019e2:	4619      	mov	r1, r3
 80019e4:	480e      	ldr	r0, [pc, #56]	; (8001a20 <sendCMDtoServer+0x118>)
 80019e6:	f7ff fc15 	bl	8001214 <addCRCtoPack>
 80019ea:	4603      	mov	r3, r0
 80019ec:	461a      	mov	r2, r3
 80019ee:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80019f2:	4413      	add	r3, r2
 80019f4:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f

	if ( !MQTT_publish( (uint8_t*)TOPIC_PUB, Pack_buff , pack_len ) )	return 0;
 80019f8:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80019fc:	b29b      	uxth	r3, r3
 80019fe:	461a      	mov	r2, r3
 8001a00:	4907      	ldr	r1, [pc, #28]	; (8001a20 <sendCMDtoServer+0x118>)
 8001a02:	4808      	ldr	r0, [pc, #32]	; (8001a24 <sendCMDtoServer+0x11c>)
 8001a04:	f003 fb4e 	bl	80050a4 <MQTT_publish>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d101      	bne.n	8001a12 <sendCMDtoServer+0x10a>
 8001a0e:	2300      	movs	r3, #0
 8001a10:	e000      	b.n	8001a14 <sendCMDtoServer+0x10c>
	return 1;
 8001a12:	2301      	movs	r3, #1
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd90      	pop	{r4, r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	20000d04 	.word	0x20000d04
 8001a24:	0800ed3c 	.word	0x0800ed3c

08001a28 <sendData2Server>:

uint8_t sendData2Server( DATA_t dataType)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	4602      	mov	r2, r0
 8001a32:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001a36:	f2a3 2309 	subw	r3, r3, #521	; 0x209
 8001a3a:	701a      	strb	r2, [r3, #0]
	uint8_t databuff[DATABUFF_MAXLEN];
	uint16_t data_len = 0;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
	memset(databuff, 0, DATABUFF_MAXLEN);
 8001a42:	f107 030c 	add.w	r3, r7, #12
 8001a46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a4a:	2100      	movs	r1, #0
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f00a fc09 	bl	800c264 <memset>
	memset(Pack_buff, 0, PACKBUFF_MAXLEN);
 8001a52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a56:	2100      	movs	r1, #0
 8001a58:	4826      	ldr	r0, [pc, #152]	; (8001af4 <sendData2Server+0xcc>)
 8001a5a:	f00a fc03 	bl	800c264 <memset>
	// Creat package
	uint16_t pack_len = createPack(PACKT_DATA, dataType, CMD_NONE );
 8001a5e:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001a62:	f2a3 2309 	subw	r3, r3, #521	; 0x209
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	20f1      	movs	r0, #241	; 0xf1
 8001a6e:	f7ff fc15 	bl	800129c <createPack>
 8001a72:	4603      	mov	r3, r0
 8001a74:	f8a7 320c 	strh.w	r3, [r7, #524]	; 0x20c
	// Add data to package
	data_len = Serialize_Data(databuff, dataType );
 8001a78:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001a7c:	f2a3 2309 	subw	r3, r3, #521	; 0x209
 8001a80:	781a      	ldrb	r2, [r3, #0]
 8001a82:	f107 030c 	add.w	r3, r7, #12
 8001a86:	4611      	mov	r1, r2
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f7ff fdf3 	bl	8001674 <Serialize_Data>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
	pack_len += addDatatoPack(Pack_buff, pack_len, databuff, data_len);
 8001a94:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8001a98:	f107 020c 	add.w	r2, r7, #12
 8001a9c:	f8b7 120c 	ldrh.w	r1, [r7, #524]	; 0x20c
 8001aa0:	4814      	ldr	r0, [pc, #80]	; (8001af4 <sendData2Server+0xcc>)
 8001aa2:	f7ff fe16 	bl	80016d2 <addDatatoPack>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	b29a      	uxth	r2, r3
 8001aaa:	f8b7 320c 	ldrh.w	r3, [r7, #524]	; 0x20c
 8001aae:	4413      	add	r3, r2
 8001ab0:	f8a7 320c 	strh.w	r3, [r7, #524]	; 0x20c
	// Add CRC to package
	pack_len += addCRCtoPack(Pack_buff, pack_len);
 8001ab4:	f8b7 320c 	ldrh.w	r3, [r7, #524]	; 0x20c
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	4619      	mov	r1, r3
 8001abc:	480d      	ldr	r0, [pc, #52]	; (8001af4 <sendData2Server+0xcc>)
 8001abe:	f7ff fba9 	bl	8001214 <addCRCtoPack>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	b29a      	uxth	r2, r3
 8001ac6:	f8b7 320c 	ldrh.w	r3, [r7, #524]	; 0x20c
 8001aca:	4413      	add	r3, r2
 8001acc:	f8a7 320c 	strh.w	r3, [r7, #524]	; 0x20c
	// Publish
	if ( !MQTT_publish( (uint8_t*)TOPIC_PUB, Pack_buff, pack_len) ) return 0;
 8001ad0:	f8b7 320c 	ldrh.w	r3, [r7, #524]	; 0x20c
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	4907      	ldr	r1, [pc, #28]	; (8001af4 <sendData2Server+0xcc>)
 8001ad8:	4807      	ldr	r0, [pc, #28]	; (8001af8 <sendData2Server+0xd0>)
 8001ada:	f003 fae3 	bl	80050a4 <MQTT_publish>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d101      	bne.n	8001ae8 <sendData2Server+0xc0>
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	e000      	b.n	8001aea <sendData2Server+0xc2>
	return 1;
 8001ae8:	2301      	movs	r3, #1
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	f507 7704 	add.w	r7, r7, #528	; 0x210
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	20000d04 	.word	0x20000d04
 8001af8:	0800ed3c 	.word	0x0800ed3c

08001afc <checkCRC>:

	if ( !MQTT_publish( (uint8_t*)TOPIC_PUB, Pack_buff, packlen) ) return 0;
	return 1;
}
uint8_t checkCRC(uint8_t *buffer, uint16_t bufferlen)
{
 8001afc:	b590      	push	{r4, r7, lr}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
 8001b04:	460b      	mov	r3, r1
 8001b06:	807b      	strh	r3, [r7, #2]
	if ( buffer2num(buffer + bufferlen - 4) != crc32( (char*)buffer, bufferlen - 4) ) return 0;
 8001b08:	887b      	ldrh	r3, [r7, #2]
 8001b0a:	3b04      	subs	r3, #4
 8001b0c:	687a      	ldr	r2, [r7, #4]
 8001b0e:	4413      	add	r3, r2
 8001b10:	4618      	mov	r0, r3
 8001b12:	f7ff fb65 	bl	80011e0 <buffer2num>
 8001b16:	4604      	mov	r4, r0
 8001b18:	887b      	ldrh	r3, [r7, #2]
 8001b1a:	3b04      	subs	r3, #4
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f003 ff74 	bl	8005a0c <crc32>
 8001b24:	4603      	mov	r3, r0
 8001b26:	429c      	cmp	r4, r3
 8001b28:	d001      	beq.n	8001b2e <checkCRC+0x32>
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	e000      	b.n	8001b30 <checkCRC+0x34>
	return 1;
 8001b2e:	2301      	movs	r3, #1
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	370c      	adds	r7, #12
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd90      	pop	{r4, r7, pc}

08001b38 <checkNodeID>:

uint8_t checkNodeID(uint8_t *Msg, uint8_t nodeID)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	460b      	mov	r3, r1
 8001b42:	70fb      	strb	r3, [r7, #3]
	if ( Msg[NODEID_POS] != nodeID && Msg[NODEID_POS] != BROADCAST_ID )		return 0;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	78fa      	ldrb	r2, [r7, #3]
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	d005      	beq.n	8001b5a <checkNodeID+0x22>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	2bff      	cmp	r3, #255	; 0xff
 8001b54:	d001      	beq.n	8001b5a <checkNodeID+0x22>
 8001b56:	2300      	movs	r3, #0
 8001b58:	e000      	b.n	8001b5c <checkNodeID+0x24>
	return 1;
 8001b5a:	2301      	movs	r3, #1
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	370c      	adds	r7, #12
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bc80      	pop	{r7}
 8001b64:	4770      	bx	lr

08001b66 <checkPacktype>:

PACK_t checkPacktype(uint8_t *Msg)
{
 8001b66:	b480      	push	{r7}
 8001b68:	b083      	sub	sp, #12
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	6078      	str	r0, [r7, #4]
	return Msg[PACKT_POS];
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	3301      	adds	r3, #1
 8001b72:	781b      	ldrb	r3, [r3, #0]
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	370c      	adds	r7, #12
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bc80      	pop	{r7}
 8001b7c:	4770      	bx	lr

08001b7e <checkDatatype>:

DATA_t checkDatatype(uint8_t *Msg)
{
 8001b7e:	b480      	push	{r7}
 8001b80:	b083      	sub	sp, #12
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	6078      	str	r0, [r7, #4]
	return Msg[DATAT_POS];
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	3302      	adds	r3, #2
 8001b8a:	781b      	ldrb	r3, [r3, #0]
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	370c      	adds	r7, #12
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bc80      	pop	{r7}
 8001b94:	4770      	bx	lr

08001b96 <checkDataREStype>:
DATA_t checkDataREStype(uint8_t *Msg)
{
 8001b96:	b480      	push	{r7}
 8001b98:	b083      	sub	sp, #12
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	6078      	str	r0, [r7, #4]
	return Msg[DATAREST_POS];
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	3303      	adds	r3, #3
 8001ba2:	781b      	ldrb	r3, [r3, #0]
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	370c      	adds	r7, #12
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bc80      	pop	{r7}
 8001bac:	4770      	bx	lr

08001bae <checkCMDtype>:
CMD_t checkCmdREStype( uint8_t *Msg)
{
	return Msg[CMDREST_POS];
}
CMD_t checkCMDtype (uint8_t *Msg)
{
 8001bae:	b480      	push	{r7}
 8001bb0:	b083      	sub	sp, #12
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	6078      	str	r0, [r7, #4]
	return Msg[CMD_POS];
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	3302      	adds	r3, #2
 8001bba:	781b      	ldrb	r3, [r3, #0]
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	370c      	adds	r7, #12
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bc80      	pop	{r7}
 8001bc4:	4770      	bx	lr
	...

08001bc8 <getDataStatus>:


void getDataStatus(uint8_t *Msg, uint16_t Msglen)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b08a      	sub	sp, #40	; 0x28
 8001bcc:	af06      	add	r7, sp, #24
 8001bce:	6078      	str	r0, [r7, #4]
 8001bd0:	460b      	mov	r3, r1
 8001bd2:	807b      	strh	r3, [r7, #2]
	uint8_t numbofActiveStation;
	uint8_t numbofActiveSensor;
	uint8_t numbofFailStation;
	uint8_t numbofFailSensor;
	uint8_t datapos = DATA_POS;
 8001bd4:	2303      	movs	r3, #3
 8001bd6:	73fb      	strb	r3, [r7, #15]
	numbofActiveStation = Msg[datapos++];
 8001bd8:	7bfb      	ldrb	r3, [r7, #15]
 8001bda:	1c5a      	adds	r2, r3, #1
 8001bdc:	73fa      	strb	r2, [r7, #15]
 8001bde:	461a      	mov	r2, r3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	4413      	add	r3, r2
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	73bb      	strb	r3, [r7, #14]
	numbofFailStation = Msg[datapos++];
 8001be8:	7bfb      	ldrb	r3, [r7, #15]
 8001bea:	1c5a      	adds	r2, r3, #1
 8001bec:	73fa      	strb	r2, [r7, #15]
 8001bee:	461a      	mov	r2, r3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	4413      	add	r3, r2
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	737b      	strb	r3, [r7, #13]
	numbofActiveSensor = Msg[datapos++];
 8001bf8:	7bfb      	ldrb	r3, [r7, #15]
 8001bfa:	1c5a      	adds	r2, r3, #1
 8001bfc:	73fa      	strb	r2, [r7, #15]
 8001bfe:	461a      	mov	r2, r3
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	4413      	add	r3, r2
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	733b      	strb	r3, [r7, #12]
	numbofFailSensor = Msg[datapos++];
 8001c08:	7bfb      	ldrb	r3, [r7, #15]
 8001c0a:	1c5a      	adds	r2, r3, #1
 8001c0c:	73fa      	strb	r2, [r7, #15]
 8001c0e:	461a      	mov	r2, r3
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	4413      	add	r3, r2
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	72fb      	strb	r3, [r7, #11]
	memset(mySIM.sms.GetStatus.data, 0, SMS_DATA_MAXLEN);
 8001c18:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c1c:	2100      	movs	r1, #0
 8001c1e:	4810      	ldr	r0, [pc, #64]	; (8001c60 <getDataStatus+0x98>)
 8001c20:	f00a fb20 	bl	800c264 <memset>
	uint16_t len = sprintf((char*)mySIM.sms.GetStatus.data,"%s: %d,%s: %d,%s: %d,%s: %d.",
 8001c24:	7bb8      	ldrb	r0, [r7, #14]
 8001c26:	7b7b      	ldrb	r3, [r7, #13]
 8001c28:	7b3a      	ldrb	r2, [r7, #12]
 8001c2a:	7af9      	ldrb	r1, [r7, #11]
 8001c2c:	9105      	str	r1, [sp, #20]
 8001c2e:	490d      	ldr	r1, [pc, #52]	; (8001c64 <getDataStatus+0x9c>)
 8001c30:	9104      	str	r1, [sp, #16]
 8001c32:	9203      	str	r2, [sp, #12]
 8001c34:	4a0c      	ldr	r2, [pc, #48]	; (8001c68 <getDataStatus+0xa0>)
 8001c36:	9202      	str	r2, [sp, #8]
 8001c38:	9301      	str	r3, [sp, #4]
 8001c3a:	4b0c      	ldr	r3, [pc, #48]	; (8001c6c <getDataStatus+0xa4>)
 8001c3c:	9300      	str	r3, [sp, #0]
 8001c3e:	4603      	mov	r3, r0
 8001c40:	4a0b      	ldr	r2, [pc, #44]	; (8001c70 <getDataStatus+0xa8>)
 8001c42:	490c      	ldr	r1, [pc, #48]	; (8001c74 <getDataStatus+0xac>)
 8001c44:	4806      	ldr	r0, [pc, #24]	; (8001c60 <getDataStatus+0x98>)
 8001c46:	f00a feb1 	bl	800c9ac <siprintf>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	813b      	strh	r3, [r7, #8]
			USER_MSG_HEADER_NUMBOF_ACT_STATION, numbofActiveStation,
			USER_MSG_HEADER_NUMBOF_FAIL_STATION, numbofFailStation,
			USER_MSG_HEADER_NUMBOF_ACT_SENSOR, numbofActiveSensor,
			USER_MSG_HEADER_NUMBOF_FAIL_SENSOR, numbofFailSensor);
	mySIM.sms.GetStatus.datalength = len;
 8001c4e:	4a0a      	ldr	r2, [pc, #40]	; (8001c78 <getDataStatus+0xb0>)
 8001c50:	893b      	ldrh	r3, [r7, #8]
 8001c52:	f8a2 36c0 	strh.w	r3, [r2, #1728]	; 0x6c0
}
 8001c56:	bf00      	nop
 8001c58:	3710      	adds	r7, #16
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	20001e36 	.word	0x20001e36
 8001c64:	0800edc0 	.word	0x0800edc0
 8001c68:	0800eddc 	.word	0x0800eddc
 8001c6c:	0800ee00 	.word	0x0800ee00
 8001c70:	0800ed78 	.word	0x0800ed78
 8001c74:	0800eda0 	.word	0x0800eda0
 8001c78:	20001774 	.word	0x20001774

08001c7c <getDatalatest>:

ID_t getDatalatest(uint8_t *Msg, uint16_t Msg_len)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b084      	sub	sp, #16
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	460b      	mov	r3, r1
 8001c86:	807b      	strh	r3, [r7, #2]
	uint8_t datapos = DATA_POS;
 8001c88:	2303      	movs	r3, #3
 8001c8a:	73fb      	strb	r3, [r7, #15]
	uint16_t crcpos = Msg_len - 4;
 8001c8c:	887b      	ldrh	r3, [r7, #2]
 8001c8e:	3b04      	subs	r3, #4
 8001c90:	81bb      	strh	r3, [r7, #12]
	uint8_t len ;
	uint16_t tmpvalue;

	// get ID type ( Station or Sensor)
	ID_t IDtype = Msg[datapos++];
 8001c92:	7bfb      	ldrb	r3, [r7, #15]
 8001c94:	1c5a      	adds	r2, r3, #1
 8001c96:	73fa      	strb	r2, [r7, #15]
 8001c98:	461a      	mov	r2, r3
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4413      	add	r3, r2
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	72fb      	strb	r3, [r7, #11]

	switch (IDtype){
 8001ca2:	7afb      	ldrb	r3, [r7, #11]
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d002      	beq.n	8001cae <getDatalatest+0x32>
 8001ca8:	2b02      	cmp	r3, #2
 8001caa:	d04a      	beq.n	8001d42 <getDatalatest+0xc6>
		len = sprintf((char*)(mySIM.sms.GetStation.data + mySIM.sms.GetStation.datalength), "%d;", tmpvalue);
		mySIM.sms.GetStation.datalength += len;
		datapos += 2;
		break;
	default:
		break;
 8001cac:	e095      	b.n	8001dda <getDatalatest+0x15e>
		mySIM.sms.GetStation.datalength = 0;
 8001cae:	4b4d      	ldr	r3, [pc, #308]	; (8001de4 <getDatalatest+0x168>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	f8a3 28e4 	strh.w	r2, [r3, #2276]	; 0x8e4
		while (datapos < crcpos)
 8001cb6:	e03e      	b.n	8001d36 <getDatalatest+0xba>
			len = sprintf((char*)(mySIM.sms.GetStation.data + mySIM.sms.GetStation.datalength), "I%d:", Msg[datapos]);
 8001cb8:	4b4a      	ldr	r3, [pc, #296]	; (8001de4 <getDatalatest+0x168>)
 8001cba:	f8b3 38e4 	ldrh.w	r3, [r3, #2276]	; 0x8e4
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	4b49      	ldr	r3, [pc, #292]	; (8001de8 <getDatalatest+0x16c>)
 8001cc2:	18d0      	adds	r0, r2, r3
 8001cc4:	7bfb      	ldrb	r3, [r7, #15]
 8001cc6:	687a      	ldr	r2, [r7, #4]
 8001cc8:	4413      	add	r3, r2
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	461a      	mov	r2, r3
 8001cce:	4947      	ldr	r1, [pc, #284]	; (8001dec <getDatalatest+0x170>)
 8001cd0:	f00a fe6c 	bl	800c9ac <siprintf>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	72bb      	strb	r3, [r7, #10]
			mySIM.sms.GetStation.datalength += len;
 8001cd8:	4b42      	ldr	r3, [pc, #264]	; (8001de4 <getDatalatest+0x168>)
 8001cda:	f8b3 28e4 	ldrh.w	r2, [r3, #2276]	; 0x8e4
 8001cde:	7abb      	ldrb	r3, [r7, #10]
 8001ce0:	b29b      	uxth	r3, r3
 8001ce2:	4413      	add	r3, r2
 8001ce4:	b29a      	uxth	r2, r3
 8001ce6:	4b3f      	ldr	r3, [pc, #252]	; (8001de4 <getDatalatest+0x168>)
 8001ce8:	f8a3 28e4 	strh.w	r2, [r3, #2276]	; 0x8e4
			datapos++;
 8001cec:	7bfb      	ldrb	r3, [r7, #15]
 8001cee:	3301      	adds	r3, #1
 8001cf0:	73fb      	strb	r3, [r7, #15]
			tmpvalue = buff2twobyte(Msg+ datapos);
 8001cf2:	7bfb      	ldrb	r3, [r7, #15]
 8001cf4:	687a      	ldr	r2, [r7, #4]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f003 fb3d 	bl	8005378 <buff2twobyte>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	813b      	strh	r3, [r7, #8]
			len = sprintf((char*)(mySIM.sms.GetStation.data + mySIM.sms.GetStation.datalength), "%d;", tmpvalue);
 8001d02:	4b38      	ldr	r3, [pc, #224]	; (8001de4 <getDatalatest+0x168>)
 8001d04:	f8b3 38e4 	ldrh.w	r3, [r3, #2276]	; 0x8e4
 8001d08:	461a      	mov	r2, r3
 8001d0a:	4b37      	ldr	r3, [pc, #220]	; (8001de8 <getDatalatest+0x16c>)
 8001d0c:	4413      	add	r3, r2
 8001d0e:	893a      	ldrh	r2, [r7, #8]
 8001d10:	4937      	ldr	r1, [pc, #220]	; (8001df0 <getDatalatest+0x174>)
 8001d12:	4618      	mov	r0, r3
 8001d14:	f00a fe4a 	bl	800c9ac <siprintf>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	72bb      	strb	r3, [r7, #10]
			mySIM.sms.GetStation.datalength += len;
 8001d1c:	4b31      	ldr	r3, [pc, #196]	; (8001de4 <getDatalatest+0x168>)
 8001d1e:	f8b3 28e4 	ldrh.w	r2, [r3, #2276]	; 0x8e4
 8001d22:	7abb      	ldrb	r3, [r7, #10]
 8001d24:	b29b      	uxth	r3, r3
 8001d26:	4413      	add	r3, r2
 8001d28:	b29a      	uxth	r2, r3
 8001d2a:	4b2e      	ldr	r3, [pc, #184]	; (8001de4 <getDatalatest+0x168>)
 8001d2c:	f8a3 28e4 	strh.w	r2, [r3, #2276]	; 0x8e4
			datapos += 2;
 8001d30:	7bfb      	ldrb	r3, [r7, #15]
 8001d32:	3302      	adds	r3, #2
 8001d34:	73fb      	strb	r3, [r7, #15]
		while (datapos < crcpos)
 8001d36:	7bfb      	ldrb	r3, [r7, #15]
 8001d38:	b29b      	uxth	r3, r3
 8001d3a:	89ba      	ldrh	r2, [r7, #12]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d8bb      	bhi.n	8001cb8 <getDatalatest+0x3c>
		break;
 8001d40:	e04b      	b.n	8001dda <getDatalatest+0x15e>
		len = sprintf((char*)(mySIM.sms.GetStation.data + mySIM.sms.GetStation.datalength), "V%d:", Msg[datapos]);
 8001d42:	4b28      	ldr	r3, [pc, #160]	; (8001de4 <getDatalatest+0x168>)
 8001d44:	f8b3 38e4 	ldrh.w	r3, [r3, #2276]	; 0x8e4
 8001d48:	461a      	mov	r2, r3
 8001d4a:	4b27      	ldr	r3, [pc, #156]	; (8001de8 <getDatalatest+0x16c>)
 8001d4c:	18d0      	adds	r0, r2, r3
 8001d4e:	7bfb      	ldrb	r3, [r7, #15]
 8001d50:	687a      	ldr	r2, [r7, #4]
 8001d52:	4413      	add	r3, r2
 8001d54:	781b      	ldrb	r3, [r3, #0]
 8001d56:	461a      	mov	r2, r3
 8001d58:	4926      	ldr	r1, [pc, #152]	; (8001df4 <getDatalatest+0x178>)
 8001d5a:	f00a fe27 	bl	800c9ac <siprintf>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	72bb      	strb	r3, [r7, #10]
		mySIM.sms.GetStation.datalength += len;
 8001d62:	4b20      	ldr	r3, [pc, #128]	; (8001de4 <getDatalatest+0x168>)
 8001d64:	f8b3 28e4 	ldrh.w	r2, [r3, #2276]	; 0x8e4
 8001d68:	7abb      	ldrb	r3, [r7, #10]
 8001d6a:	b29b      	uxth	r3, r3
 8001d6c:	4413      	add	r3, r2
 8001d6e:	b29a      	uxth	r2, r3
 8001d70:	4b1c      	ldr	r3, [pc, #112]	; (8001de4 <getDatalatest+0x168>)
 8001d72:	f8a3 28e4 	strh.w	r2, [r3, #2276]	; 0x8e4
		datapos++;
 8001d76:	7bfb      	ldrb	r3, [r7, #15]
 8001d78:	3301      	adds	r3, #1
 8001d7a:	73fb      	strb	r3, [r7, #15]
		switch (Msg[datapos++])	{
 8001d7c:	7bfb      	ldrb	r3, [r7, #15]
 8001d7e:	1c5a      	adds	r2, r3, #1
 8001d80:	73fa      	strb	r2, [r7, #15]
 8001d82:	461a      	mov	r2, r3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	4413      	add	r3, r2
 8001d88:	781b      	ldrb	r3, [r3, #0]
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d001      	beq.n	8001d92 <getDatalatest+0x116>
 8001d8e:	2b02      	cmp	r3, #2
			break;
 8001d90:	e000      	b.n	8001d94 <getDatalatest+0x118>
			break;
 8001d92:	bf00      	nop
		tmpvalue = buff2twobyte(Msg+ datapos);
 8001d94:	7bfb      	ldrb	r3, [r7, #15]
 8001d96:	687a      	ldr	r2, [r7, #4]
 8001d98:	4413      	add	r3, r2
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f003 faec 	bl	8005378 <buff2twobyte>
 8001da0:	4603      	mov	r3, r0
 8001da2:	813b      	strh	r3, [r7, #8]
		len = sprintf((char*)(mySIM.sms.GetStation.data + mySIM.sms.GetStation.datalength), "%d;", tmpvalue);
 8001da4:	4b0f      	ldr	r3, [pc, #60]	; (8001de4 <getDatalatest+0x168>)
 8001da6:	f8b3 38e4 	ldrh.w	r3, [r3, #2276]	; 0x8e4
 8001daa:	461a      	mov	r2, r3
 8001dac:	4b0e      	ldr	r3, [pc, #56]	; (8001de8 <getDatalatest+0x16c>)
 8001dae:	4413      	add	r3, r2
 8001db0:	893a      	ldrh	r2, [r7, #8]
 8001db2:	490f      	ldr	r1, [pc, #60]	; (8001df0 <getDatalatest+0x174>)
 8001db4:	4618      	mov	r0, r3
 8001db6:	f00a fdf9 	bl	800c9ac <siprintf>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	72bb      	strb	r3, [r7, #10]
		mySIM.sms.GetStation.datalength += len;
 8001dbe:	4b09      	ldr	r3, [pc, #36]	; (8001de4 <getDatalatest+0x168>)
 8001dc0:	f8b3 28e4 	ldrh.w	r2, [r3, #2276]	; 0x8e4
 8001dc4:	7abb      	ldrb	r3, [r7, #10]
 8001dc6:	b29b      	uxth	r3, r3
 8001dc8:	4413      	add	r3, r2
 8001dca:	b29a      	uxth	r2, r3
 8001dcc:	4b05      	ldr	r3, [pc, #20]	; (8001de4 <getDatalatest+0x168>)
 8001dce:	f8a3 28e4 	strh.w	r2, [r3, #2276]	; 0x8e4
		datapos += 2;
 8001dd2:	7bfb      	ldrb	r3, [r7, #15]
 8001dd4:	3302      	adds	r3, #2
 8001dd6:	73fb      	strb	r3, [r7, #15]
		break;
 8001dd8:	bf00      	nop
	}
	return IDtype;
 8001dda:	7afb      	ldrb	r3, [r7, #11]
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3710      	adds	r7, #16
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	20001774 	.word	0x20001774
 8001de8:	2000205a 	.word	0x2000205a
 8001dec:	0800ee20 	.word	0x0800ee20
 8001df0:	0800ee28 	.word	0x0800ee28
 8001df4:	0800ee2c 	.word	0x0800ee2c

08001df8 <getMBAstate>:

static MBA_state_t getMBAstate(uint8_t *Msg)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b085      	sub	sp, #20
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
	MBA_state_t res = MBA_NULL;
 8001e00:	2300      	movs	r3, #0
 8001e02:	73fb      	strb	r3, [r7, #15]
	switch (Msg[MBA_STATE_POS])		{
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	3303      	adds	r3, #3
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d004      	beq.n	8001e18 <getMBAstate+0x20>
 8001e0e:	2b02      	cmp	r3, #2
 8001e10:	d105      	bne.n	8001e1e <getMBAstate+0x26>
	case MBA_OFF:
		res = MBA_OFF;
 8001e12:	2302      	movs	r3, #2
 8001e14:	73fb      	strb	r3, [r7, #15]
		break;
 8001e16:	e003      	b.n	8001e20 <getMBAstate+0x28>
	case MBA_ON:
		res = MBA_ON;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	73fb      	strb	r3, [r7, #15]
		break;
 8001e1c:	e000      	b.n	8001e20 <getMBAstate+0x28>
	default:
		break;
 8001e1e:	bf00      	nop
	}
	myStation.MBAstate = res;
 8001e20:	4a04      	ldr	r2, [pc, #16]	; (8001e34 <getMBAstate+0x3c>)
 8001e22:	7bfb      	ldrb	r3, [r7, #15]
 8001e24:	7193      	strb	r3, [r2, #6]
	return res;
 8001e26:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3714      	adds	r7, #20
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bc80      	pop	{r7}
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	20000478 	.word	0x20000478

08001e38 <getCtrlStepinfor>:
static void  getCtrlStepinfor(uint8_t *Msg)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b084      	sub	sp, #16
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
	Stepmotor_dir_t dir = Msg[DIR_POS];
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	78db      	ldrb	r3, [r3, #3]
 8001e44:	73fb      	strb	r3, [r7, #15]
	if (dir < STEPM_DIR_INC && dir > STEPM_DIR_DEFAULT )	return;
 8001e46:	7bfb      	ldrb	r3, [r7, #15]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d102      	bne.n	8001e52 <getCtrlStepinfor+0x1a>
 8001e4c:	7bfb      	ldrb	r3, [r7, #15]
 8001e4e:	2b03      	cmp	r3, #3
 8001e50:	d831      	bhi.n	8001eb6 <getCtrlStepinfor+0x7e>
	Stepmotor_change_mode_t changemode = Msg[CHANGE_MODEPOS];
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	791b      	ldrb	r3, [r3, #4]
 8001e56:	73bb      	strb	r3, [r7, #14]
	if (changemode < STEPM_MODE_PERCENTAGE && changemode > STEPM_MODE_DEFAULT) return;
 8001e58:	7bbb      	ldrb	r3, [r7, #14]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d102      	bne.n	8001e64 <getCtrlStepinfor+0x2c>
 8001e5e:	7bbb      	ldrb	r3, [r7, #14]
 8001e60:	2b03      	cmp	r3, #3
 8001e62:	d82a      	bhi.n	8001eba <getCtrlStepinfor+0x82>
	uint8_t valuebuff[3] ;
	memset(valuebuff, 0, 3);
 8001e64:	f107 0308 	add.w	r3, r7, #8
 8001e68:	2203      	movs	r2, #3
 8001e6a:	2100      	movs	r1, #0
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f00a f9f9 	bl	800c264 <memset>
	memcpy(valuebuff, Msg + CHANGE_VALUE, 2);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	3305      	adds	r3, #5
 8001e76:	881b      	ldrh	r3, [r3, #0]
 8001e78:	b29b      	uxth	r3, r3
 8001e7a:	813b      	strh	r3, [r7, #8]
	uint16_t value = buff2twobyte(valuebuff);
 8001e7c:	f107 0308 	add.w	r3, r7, #8
 8001e80:	4618      	mov	r0, r3
 8001e82:	f003 fa79 	bl	8005378 <buff2twobyte>
 8001e86:	4603      	mov	r3, r0
 8001e88:	81bb      	strh	r3, [r7, #12]

	Step_setDir(dir);
 8001e8a:	7bfb      	ldrb	r3, [r7, #15]
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f001 fcb9 	bl	8003804 <Step_setDir>
	Step_setChangeMode(changemode);
 8001e92:	7bbb      	ldrb	r3, [r7, #14]
 8001e94:	4618      	mov	r0, r3
 8001e96:	f001 fd3f 	bl	8003918 <Step_setChangeMode>
	if (changemode == STEPM_MODE_PERCENTAGE)	{
 8001e9a:	7bbb      	ldrb	r3, [r7, #14]
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d105      	bne.n	8001eac <getCtrlStepinfor+0x74>
		Step_setPercentChange(value);
 8001ea0:	89bb      	ldrh	r3, [r7, #12]
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f001 fd27 	bl	80038f8 <Step_setPercentChange>
 8001eaa:	e007      	b.n	8001ebc <getCtrlStepinfor+0x84>
	}
	else {
		Step_setStepChange(value);
 8001eac:	89bb      	ldrh	r3, [r7, #12]
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f001 fd08 	bl	80038c4 <Step_setStepChange>
 8001eb4:	e002      	b.n	8001ebc <getCtrlStepinfor+0x84>
	if (dir < STEPM_DIR_INC && dir > STEPM_DIR_DEFAULT )	return;
 8001eb6:	bf00      	nop
 8001eb8:	e000      	b.n	8001ebc <getCtrlStepinfor+0x84>
	if (changemode < STEPM_MODE_PERCENTAGE && changemode > STEPM_MODE_DEFAULT) return;
 8001eba:	bf00      	nop
	}

}
 8001ebc:	3710      	adds	r7, #16
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
	...

08001ec4 <processingComingMsg>:
			}
			current = current->next;
		}
}
void processingComingMsg(uint8_t *Msg, uint16_t Msg_len, uint8_t stID)
{
 8001ec4:	b5b0      	push	{r4, r5, r7, lr}
 8001ec6:	b08a      	sub	sp, #40	; 0x28
 8001ec8:	af02      	add	r7, sp, #8
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	460b      	mov	r3, r1
 8001ece:	807b      	strh	r3, [r7, #2]
 8001ed0:	4613      	mov	r3, r2
 8001ed2:	707b      	strb	r3, [r7, #1]
	if ( !checkCRC(Msg, Msg_len) )	return;
 8001ed4:	887b      	ldrh	r3, [r7, #2]
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	6878      	ldr	r0, [r7, #4]
 8001eda:	f7ff fe0f 	bl	8001afc <checkCRC>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	f000 8141 	beq.w	8002168 <processingComingMsg+0x2a4>

	if ( !checkNodeID(Msg, stID) )	return;
 8001ee6:	787b      	ldrb	r3, [r7, #1]
 8001ee8:	4619      	mov	r1, r3
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f7ff fe24 	bl	8001b38 <checkNodeID>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	f000 813a 	beq.w	800216c <processingComingMsg+0x2a8>

	PACK_t packageType = checkPacktype(Msg);
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	f7ff fe34 	bl	8001b66 <checkPacktype>
 8001efe:	4603      	mov	r3, r0
 8001f00:	77fb      	strb	r3, [r7, #31]
	CMD_t cmdType;
	DATA_t dataREStype;
	ID_t idType;
	uint32_t calibtime;

	switch (packageType) {
 8001f02:	7ffb      	ldrb	r3, [r7, #31]
 8001f04:	3bf1      	subs	r3, #241	; 0xf1
 8001f06:	2b05      	cmp	r3, #5
 8001f08:	f200 8132 	bhi.w	8002170 <processingComingMsg+0x2ac>
 8001f0c:	a201      	add	r2, pc, #4	; (adr r2, 8001f14 <processingComingMsg+0x50>)
 8001f0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f12:	bf00      	nop
 8001f14:	08001f2d 	.word	0x08001f2d
 8001f18:	08001fa7 	.word	0x08001fa7
 8001f1c:	0800205b 	.word	0x0800205b
 8001f20:	080020e3 	.word	0x080020e3
 8001f24:	08002171 	.word	0x08002171
 8001f28:	08002155 	.word	0x08002155
		case PACKT_DATA:
			// Check data type
			dataType = checkDatatype(Msg);
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	f7ff fe26 	bl	8001b7e <checkDatatype>
 8001f32:	4603      	mov	r3, r0
 8001f34:	74fb      	strb	r3, [r7, #19]
			switch (dataType) {
 8001f36:	7cfb      	ldrb	r3, [r7, #19]
 8001f38:	2b03      	cmp	r3, #3
 8001f3a:	d002      	beq.n	8001f42 <processingComingMsg+0x7e>
 8001f3c:	2b06      	cmp	r3, #6
 8001f3e:	d00a      	beq.n	8001f56 <processingComingMsg+0x92>
					default:
						break;
					}
					break;
				default:
					break;
 8001f40:	e030      	b.n	8001fa4 <processingComingMsg+0xe0>
					getDataStatus(Msg, Msg_len);
 8001f42:	887b      	ldrh	r3, [r7, #2]
 8001f44:	4619      	mov	r1, r3
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f7ff fe3e 	bl	8001bc8 <getDataStatus>
					triggerSMSreturn(SMS_CMD_GET_STATUS, SMS_CMD_ENABLE);
 8001f4c:	2101      	movs	r1, #1
 8001f4e:	2005      	movs	r0, #5
 8001f50:	f001 fb36 	bl	80035c0 <triggerSMSreturn>
					break;
 8001f54:	e026      	b.n	8001fa4 <processingComingMsg+0xe0>
					idType = getDatalatest(Msg, Msg_len);
 8001f56:	887b      	ldrh	r3, [r7, #2]
 8001f58:	4619      	mov	r1, r3
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f7ff fe8e 	bl	8001c7c <getDatalatest>
 8001f60:	4603      	mov	r3, r0
 8001f62:	74bb      	strb	r3, [r7, #18]
					switch (checkStationMode())	{
 8001f64:	f004 f87c 	bl	8006060 <checkStationMode>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d006      	beq.n	8001f7c <processingComingMsg+0xb8>
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d114      	bne.n	8001f9c <processingComingMsg+0xd8>
						triggerTaskflag(TASK_CTRL_STEPMOR, FLAG_EN);
 8001f72:	2101      	movs	r1, #1
 8001f74:	2006      	movs	r0, #6
 8001f76:	f003 fb79 	bl	800566c <triggerTaskflag>
						break;
 8001f7a:	e012      	b.n	8001fa2 <processingComingMsg+0xde>
						if (idType == ID_SENSOR)	{
 8001f7c:	7cbb      	ldrb	r3, [r7, #18]
 8001f7e:	2b02      	cmp	r3, #2
 8001f80:	d104      	bne.n	8001f8c <processingComingMsg+0xc8>
							triggerSMSreturn(SMS_CMD_GET_SENSOR, SMS_CMD_ENABLE);
 8001f82:	2101      	movs	r1, #1
 8001f84:	2006      	movs	r0, #6
 8001f86:	f001 fb1b 	bl	80035c0 <triggerSMSreturn>
						break;
 8001f8a:	e009      	b.n	8001fa0 <processingComingMsg+0xdc>
						else if (idType == ID_STATION)	{
 8001f8c:	7cbb      	ldrb	r3, [r7, #18]
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d106      	bne.n	8001fa0 <processingComingMsg+0xdc>
							triggerSMSreturn(SMS_CMD_GET_STATION, SMS_CMD_DISABLE);
 8001f92:	2100      	movs	r1, #0
 8001f94:	2007      	movs	r0, #7
 8001f96:	f001 fb13 	bl	80035c0 <triggerSMSreturn>
						break;
 8001f9a:	e001      	b.n	8001fa0 <processingComingMsg+0xdc>
						break;
 8001f9c:	bf00      	nop
 8001f9e:	e000      	b.n	8001fa2 <processingComingMsg+0xde>
						break;
 8001fa0:	bf00      	nop
					break;
 8001fa2:	bf00      	nop
			}
			break;
 8001fa4:	e0e7      	b.n	8002176 <processingComingMsg+0x2b2>
		case PACKT_CMD:
			cmdType = checkCMDtype(Msg);
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f7ff fe01 	bl	8001bae <checkCMDtype>
 8001fac:	4603      	mov	r3, r0
 8001fae:	77bb      	strb	r3, [r7, #30]
			switch (cmdType) {
 8001fb0:	7fbb      	ldrb	r3, [r7, #30]
 8001fb2:	3b01      	subs	r3, #1
 8001fb4:	2b07      	cmp	r3, #7
 8001fb6:	d84e      	bhi.n	8002056 <processingComingMsg+0x192>
 8001fb8:	a201      	add	r2, pc, #4	; (adr r2, 8001fc0 <processingComingMsg+0xfc>)
 8001fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fbe:	bf00      	nop
 8001fc0:	08001fe1 	.word	0x08001fe1
 8001fc4:	08001feb 	.word	0x08001feb
 8001fc8:	08002057 	.word	0x08002057
 8001fcc:	08002057 	.word	0x08002057
 8001fd0:	08002057 	.word	0x08002057
 8001fd4:	08002057 	.word	0x08002057
 8001fd8:	08002037 	.word	0x08002037
 8001fdc:	08002047 	.word	0x08002047
				case CMD_PREPARE_CALIB:
					triggerTaskflag(TASK_PREPARE_CALIB, FLAG_EN);
 8001fe0:	2101      	movs	r1, #1
 8001fe2:	2002      	movs	r0, #2
 8001fe4:	f003 fb42 	bl	800566c <triggerTaskflag>
					break;
 8001fe8:	e036      	b.n	8002058 <processingComingMsg+0x194>
				case CMD_START_CALIB:
					// Get time in package
					 calibtime = buff2Fourbyte( Msg+ (uint8_t)ADDDATA_POS );
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	3303      	adds	r3, #3
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f003 f9fb 	bl	80053ea <buff2Fourbyte>
 8001ff4:	6178      	str	r0, [r7, #20]
					_RTC tmpRTC;
					epochtine2RTC(calibtime, &tmpRTC);
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	461c      	mov	r4, r3
 8001ffc:	4615      	mov	r5, r2
 8001ffe:	f107 0308 	add.w	r3, r7, #8
 8002002:	461a      	mov	r2, r3
 8002004:	4620      	mov	r0, r4
 8002006:	4629      	mov	r1, r5
 8002008:	f001 fff4 	bl	8003ff4 <epochtine2RTC>
					// Save Calib time
					myStation.calibTime.hour = tmpRTC.Hour;
 800200c:	7b3a      	ldrb	r2, [r7, #12]
 800200e:	4b5b      	ldr	r3, [pc, #364]	; (800217c <processingComingMsg+0x2b8>)
 8002010:	74da      	strb	r2, [r3, #19]
					myStation.calibTime.min = tmpRTC.Min;
 8002012:	7b7a      	ldrb	r2, [r7, #13]
 8002014:	4b59      	ldr	r3, [pc, #356]	; (800217c <processingComingMsg+0x2b8>)
 8002016:	751a      	strb	r2, [r3, #20]
					myStation.calibTime.sec = tmpRTC.Sec;
 8002018:	7bba      	ldrb	r2, [r7, #14]
 800201a:	4b58      	ldr	r3, [pc, #352]	; (800217c <processingComingMsg+0x2b8>)
 800201c:	755a      	strb	r2, [r3, #21]
					// Set alarm for Calib
					DS3231_ClearAlarm1();
 800201e:	f002 f9b7 	bl	8004390 <DS3231_ClearAlarm1>
					DS3231_SetAlarm1(ALARM_MODE_ALL_MATCHED, tmpRTC.Date, tmpRTC.Hour, tmpRTC.Min, tmpRTC.Sec);
 8002022:	7ab9      	ldrb	r1, [r7, #10]
 8002024:	7b3a      	ldrb	r2, [r7, #12]
 8002026:	7b78      	ldrb	r0, [r7, #13]
 8002028:	7bbb      	ldrb	r3, [r7, #14]
 800202a:	9300      	str	r3, [sp, #0]
 800202c:	4603      	mov	r3, r0
 800202e:	2000      	movs	r0, #0
 8002030:	f002 f90e 	bl	8004250 <DS3231_SetAlarm1>

					break;
 8002034:	e010      	b.n	8002058 <processingComingMsg+0x194>
				case CMD_CTRL_MBA:
					//Get MBA state from package and switch contactor
					switchContactor(getMBAstate(Msg));
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f7ff fede 	bl	8001df8 <getMBAstate>
 800203c:	4603      	mov	r3, r0
 800203e:	4618      	mov	r0, r3
 8002040:	f000 f976 	bl	8002330 <switchContactor>
					break;
 8002044:	e008      	b.n	8002058 <processingComingMsg+0x194>
				case CMD_CTRL_STEP_MOTOR:
					//Get data to control step motor
					getCtrlStepinfor(Msg);
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f7ff fef6 	bl	8001e38 <getCtrlStepinfor>
					triggerTaskflag(TASK_CTRL_STEPMOR, FLAG_EN);
 800204c:	2101      	movs	r1, #1
 800204e:	2006      	movs	r0, #6
 8002050:	f003 fb0c 	bl	800566c <triggerTaskflag>
					break;
 8002054:	e000      	b.n	8002058 <processingComingMsg+0x194>
				default:
					break;
 8002056:	bf00      	nop
			}
			break;
 8002058:	e08d      	b.n	8002176 <processingComingMsg+0x2b2>
		case PACKT_RESDATA:
			dataREStype = checkDataREStype(Msg);
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f7ff fd9b 	bl	8001b96 <checkDataREStype>
 8002060:	4603      	mov	r3, r0
 8002062:	76fb      	strb	r3, [r7, #27]
			switch (dataREStype) {
 8002064:	7efb      	ldrb	r3, [r7, #27]
 8002066:	3b01      	subs	r3, #1
 8002068:	2b06      	cmp	r3, #6
 800206a:	d832      	bhi.n	80020d2 <processingComingMsg+0x20e>
 800206c:	a201      	add	r2, pc, #4	; (adr r2, 8002074 <processingComingMsg+0x1b0>)
 800206e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002072:	bf00      	nop
 8002074:	08002091 	.word	0x08002091
 8002078:	080020a5 	.word	0x080020a5
 800207c:	080020d3 	.word	0x080020d3
 8002080:	080020d3 	.word	0x080020d3
 8002084:	080020d3 	.word	0x080020d3
 8002088:	080020d3 	.word	0x080020d3
 800208c:	080020b9 	.word	0x080020b9
			case DATA_PERIOD:
				if ( Msg[RESSTATUS_POS] == RES_OK)	{
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	3302      	adds	r3, #2
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	2b01      	cmp	r3, #1
 8002098:	d11d      	bne.n	80020d6 <processingComingMsg+0x212>
					triggerTaskflag(TASK_SEND_DATAPERIOD, FLAG_DIS);
 800209a:	2100      	movs	r1, #0
 800209c:	2009      	movs	r0, #9
 800209e:	f003 fae5 	bl	800566c <triggerTaskflag>
				}
				break;
 80020a2:	e018      	b.n	80020d6 <processingComingMsg+0x212>
			case DATA_NETWREADY:
				if ( Msg[RESSTATUS_POS] == RES_OK)	{
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	3302      	adds	r3, #2
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d115      	bne.n	80020da <processingComingMsg+0x216>
					triggerTaskflag(TASK_SEND_NWREADY, FLAG_DIS);
 80020ae:	2100      	movs	r1, #0
 80020b0:	2008      	movs	r0, #8
 80020b2:	f003 fadb 	bl	800566c <triggerTaskflag>

				}
				break;
 80020b6:	e010      	b.n	80020da <processingComingMsg+0x216>
//					markassentDatacalibsuccess();
//					triggerTaskflag(TASK_SEND_DATACALIB, FLAG_DIS);
				}
				break;
			case DATA_AFTERCALIB:
				if ( Msg[RESSTATUS_POS] == RES_OK)	{
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	3302      	adds	r3, #2
 80020bc:	781b      	ldrb	r3, [r3, #0]
 80020be:	2b01      	cmp	r3, #1
 80020c0:	d10d      	bne.n	80020de <processingComingMsg+0x21a>
					triggerTaskflag(TASK_SEND_DATAAFTERCALIB, FLAG_DIS);
 80020c2:	2100      	movs	r1, #0
 80020c4:	200b      	movs	r0, #11
 80020c6:	f003 fad1 	bl	800566c <triggerTaskflag>
					setStationMode(STATION_MODE_NORMAL);
 80020ca:	2000      	movs	r0, #0
 80020cc:	f003 ffb8 	bl	8006040 <setStationMode>
				}
				break;
 80020d0:	e005      	b.n	80020de <processingComingMsg+0x21a>
			default:
				break;
 80020d2:	bf00      	nop
 80020d4:	e04f      	b.n	8002176 <processingComingMsg+0x2b2>
				break;
 80020d6:	bf00      	nop
 80020d8:	e04d      	b.n	8002176 <processingComingMsg+0x2b2>
				break;
 80020da:	bf00      	nop
 80020dc:	e04b      	b.n	8002176 <processingComingMsg+0x2b2>
				break;
 80020de:	bf00      	nop
			}
			break;
 80020e0:	e049      	b.n	8002176 <processingComingMsg+0x2b2>
		case PACKT_RESCMD:
			cmdType = checkCMDtype(Msg);
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f7ff fd63 	bl	8001bae <checkCMDtype>
 80020e8:	4603      	mov	r3, r0
 80020ea:	77bb      	strb	r3, [r7, #30]
			switch (cmdType)	{
 80020ec:	7fbb      	ldrb	r3, [r7, #30]
 80020ee:	2b07      	cmp	r3, #7
 80020f0:	d002      	beq.n	80020f8 <processingComingMsg+0x234>
 80020f2:	2b08      	cmp	r3, #8
 80020f4:	d015      	beq.n	8002122 <processingComingMsg+0x25e>
					mySIM.sms.CtrlDEC.datalength = len;
					triggerSMSreturn(SMS_CMD_CTRL_DEC, ENABLE);
				}
				break;
			default:
				break;
 80020f6:	e02c      	b.n	8002152 <processingComingMsg+0x28e>
				if (Msg[RESSTATUS_POS] == RES_OK)	{
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	3302      	adds	r3, #2
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d124      	bne.n	800214c <processingComingMsg+0x288>
					uint8_t len= sprintf((char*)mySIM.sms.CtrlON.data,"Ctrl MBA success");
 8002102:	491f      	ldr	r1, [pc, #124]	; (8002180 <processingComingMsg+0x2bc>)
 8002104:	481f      	ldr	r0, [pc, #124]	; (8002184 <processingComingMsg+0x2c0>)
 8002106:	f00a fc51 	bl	800c9ac <siprintf>
 800210a:	4603      	mov	r3, r0
 800210c:	773b      	strb	r3, [r7, #28]
					mySIM.sms.CtrlON.datalength = len;
 800210e:	7f3b      	ldrb	r3, [r7, #28]
 8002110:	b29a      	uxth	r2, r3
 8002112:	4b1d      	ldr	r3, [pc, #116]	; (8002188 <processingComingMsg+0x2c4>)
 8002114:	f8a3 2166 	strh.w	r2, [r3, #358]	; 0x166
					triggerSMSreturn(SMS_CMD_CTRL_ON, ENABLE);
 8002118:	2101      	movs	r1, #1
 800211a:	2000      	movs	r0, #0
 800211c:	f001 fa50 	bl	80035c0 <triggerSMSreturn>
				break;
 8002120:	e014      	b.n	800214c <processingComingMsg+0x288>
				if (Msg[RESSTATUS_POS] == RES_OK)	{
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	3302      	adds	r3, #2
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	2b01      	cmp	r3, #1
 800212a:	d111      	bne.n	8002150 <processingComingMsg+0x28c>
					uint8_t len= sprintf((char*)mySIM.sms.CtrlDEC.data,"Ctrl StepMor success");
 800212c:	4917      	ldr	r1, [pc, #92]	; (800218c <processingComingMsg+0x2c8>)
 800212e:	4818      	ldr	r0, [pc, #96]	; (8002190 <processingComingMsg+0x2cc>)
 8002130:	f00a fc3c 	bl	800c9ac <siprintf>
 8002134:	4603      	mov	r3, r0
 8002136:	777b      	strb	r3, [r7, #29]
					mySIM.sms.CtrlDEC.datalength = len;
 8002138:	7f7b      	ldrb	r3, [r7, #29]
 800213a:	b29a      	uxth	r2, r3
 800213c:	4b12      	ldr	r3, [pc, #72]	; (8002188 <processingComingMsg+0x2c4>)
 800213e:	f8a3 25ae 	strh.w	r2, [r3, #1454]	; 0x5ae
					triggerSMSreturn(SMS_CMD_CTRL_DEC, ENABLE);
 8002142:	2101      	movs	r1, #1
 8002144:	2004      	movs	r0, #4
 8002146:	f001 fa3b 	bl	80035c0 <triggerSMSreturn>
				break;
 800214a:	e001      	b.n	8002150 <processingComingMsg+0x28c>
				break;
 800214c:	bf00      	nop
 800214e:	e012      	b.n	8002176 <processingComingMsg+0x2b2>
				break;
 8002150:	bf00      	nop
			}
			break;
 8002152:	e010      	b.n	8002176 <processingComingMsg+0x2b2>
		case PACKT_RESREGISTER:
			// Get Register status
			if (Msg[RESSTATUS_POS] == RES_OK)	{
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	3302      	adds	r3, #2
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	2b01      	cmp	r3, #1
 800215c:	d10a      	bne.n	8002174 <processingComingMsg+0x2b0>
				triggerTaskflag(TASK_REGISTER, FLAG_DIS);
 800215e:	2100      	movs	r1, #0
 8002160:	2000      	movs	r0, #0
 8002162:	f003 fa83 	bl	800566c <triggerTaskflag>
			}
			break;
 8002166:	e005      	b.n	8002174 <processingComingMsg+0x2b0>
	if ( !checkCRC(Msg, Msg_len) )	return;
 8002168:	bf00      	nop
 800216a:	e004      	b.n	8002176 <processingComingMsg+0x2b2>
	if ( !checkNodeID(Msg, stID) )	return;
 800216c:	bf00      	nop
 800216e:	e002      	b.n	8002176 <processingComingMsg+0x2b2>
		default:
			break;
 8002170:	bf00      	nop
 8002172:	e000      	b.n	8002176 <processingComingMsg+0x2b2>
			break;
 8002174:	bf00      	nop
	}
}
 8002176:	3720      	adds	r7, #32
 8002178:	46bd      	mov	sp, r7
 800217a:	bdb0      	pop	{r4, r5, r7, pc}
 800217c:	20000478 	.word	0x20000478
 8002180:	0800ee34 	.word	0x0800ee34
 8002184:	200018dc 	.word	0x200018dc
 8002188:	20001774 	.word	0x20001774
 800218c:	0800ee48 	.word	0x0800ee48
 8002190:	20001d24 	.word	0x20001d24

08002194 <CMD_SMS_calib>:
#include "stationCMD.h"
#include "Serial_log.h"


uint8_t CMD_SMS_calib (uint8_t *cmddata, uint16_t datalen)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b086      	sub	sp, #24
 8002198:	af04      	add	r7, sp, #16
 800219a:	6078      	str	r0, [r7, #4]
 800219c:	460b      	mov	r3, r1
 800219e:	807b      	strh	r3, [r7, #2]
	if (sendCMDtoServer( CMD_SMS_CALIB, cmddata, datalen, MBA_NULL,
 80021a0:	887a      	ldrh	r2, [r7, #2]
 80021a2:	2300      	movs	r3, #0
 80021a4:	9302      	str	r3, [sp, #8]
 80021a6:	2303      	movs	r3, #3
 80021a8:	9301      	str	r3, [sp, #4]
 80021aa:	2303      	movs	r3, #3
 80021ac:	9300      	str	r3, [sp, #0]
 80021ae:	2300      	movs	r3, #0
 80021b0:	6879      	ldr	r1, [r7, #4]
 80021b2:	2003      	movs	r0, #3
 80021b4:	f7ff fba8 	bl	8001908 <sendCMDtoServer>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d004      	beq.n	80021c8 <CMD_SMS_calib+0x34>
			STEPM_DIR_DEFAULT , STEPM_MODE_DEFAULT, 0) )	{
		Serial_log_string("Sent \"Calibration\" message to server\r\n");
 80021be:	4805      	ldr	r0, [pc, #20]	; (80021d4 <CMD_SMS_calib+0x40>)
 80021c0:	f7fe fff0 	bl	80011a4 <Serial_log_string>
		return 1;
 80021c4:	2301      	movs	r3, #1
 80021c6:	e000      	b.n	80021ca <CMD_SMS_calib+0x36>
	}
	return 0;
 80021c8:	2300      	movs	r3, #0
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3708      	adds	r7, #8
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	0800ee68 	.word	0x0800ee68

080021d8 <CMD_SMS_getStatus>:

uint8_t CMD_SMS_getStatus ( uint8_t *cmddata, uint16_t datalen)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b086      	sub	sp, #24
 80021dc:	af04      	add	r7, sp, #16
 80021de:	6078      	str	r0, [r7, #4]
 80021e0:	460b      	mov	r3, r1
 80021e2:	807b      	strh	r3, [r7, #2]
	if (sendCMDtoServer(CMD_SMS_GETSTATUS, cmddata, datalen, MBA_NULL,
 80021e4:	887a      	ldrh	r2, [r7, #2]
 80021e6:	2300      	movs	r3, #0
 80021e8:	9302      	str	r3, [sp, #8]
 80021ea:	2303      	movs	r3, #3
 80021ec:	9301      	str	r3, [sp, #4]
 80021ee:	2303      	movs	r3, #3
 80021f0:	9300      	str	r3, [sp, #0]
 80021f2:	2300      	movs	r3, #0
 80021f4:	6879      	ldr	r1, [r7, #4]
 80021f6:	2004      	movs	r0, #4
 80021f8:	f7ff fb86 	bl	8001908 <sendCMDtoServer>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d004      	beq.n	800220c <CMD_SMS_getStatus+0x34>
			STEPM_DIR_DEFAULT , STEPM_MODE_DEFAULT, 0) )	{
		Serial_log_string("Sent \"Get status\" message to server\r\n");
 8002202:	4805      	ldr	r0, [pc, #20]	; (8002218 <CMD_SMS_getStatus+0x40>)
 8002204:	f7fe ffce 	bl	80011a4 <Serial_log_string>
		return 1;
 8002208:	2301      	movs	r3, #1
 800220a:	e000      	b.n	800220e <CMD_SMS_getStatus+0x36>
	}
	return 0;
 800220c:	2300      	movs	r3, #0
}
 800220e:	4618      	mov	r0, r3
 8002210:	3708      	adds	r7, #8
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	0800ee90 	.word	0x0800ee90

0800221c <CMD_SMS_Ctrl_MBA>:

uint8_t CMD_SMS_Ctrl_MBA ( uint8_t *cmddata, uint16_t datalen, MBA_state_t MBAstate)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b086      	sub	sp, #24
 8002220:	af04      	add	r7, sp, #16
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	460b      	mov	r3, r1
 8002226:	807b      	strh	r3, [r7, #2]
 8002228:	4613      	mov	r3, r2
 800222a:	707b      	strb	r3, [r7, #1]
	if (sendCMDtoServer(CMD_CTRL_MBA, cmddata, datalen, MBAstate,
 800222c:	787b      	ldrb	r3, [r7, #1]
 800222e:	887a      	ldrh	r2, [r7, #2]
 8002230:	2100      	movs	r1, #0
 8002232:	9102      	str	r1, [sp, #8]
 8002234:	2103      	movs	r1, #3
 8002236:	9101      	str	r1, [sp, #4]
 8002238:	2103      	movs	r1, #3
 800223a:	9100      	str	r1, [sp, #0]
 800223c:	6879      	ldr	r1, [r7, #4]
 800223e:	2007      	movs	r0, #7
 8002240:	f7ff fb62 	bl	8001908 <sendCMDtoServer>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d004      	beq.n	8002254 <CMD_SMS_Ctrl_MBA+0x38>
			STEPM_DIR_DEFAULT , STEPM_MODE_DEFAULT, 0) )	{
		Serial_log_string("Sent \"Control MBA\" message to server\r\n");
 800224a:	4805      	ldr	r0, [pc, #20]	; (8002260 <CMD_SMS_Ctrl_MBA+0x44>)
 800224c:	f7fe ffaa 	bl	80011a4 <Serial_log_string>
		return 1;
 8002250:	2301      	movs	r3, #1
 8002252:	e000      	b.n	8002256 <CMD_SMS_Ctrl_MBA+0x3a>
	}
	return 0;
 8002254:	2300      	movs	r3, #0


}
 8002256:	4618      	mov	r0, r3
 8002258:	3708      	adds	r7, #8
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	0800eeb8 	.word	0x0800eeb8

08002264 <CMD_SMS_Ctrl_StepM>:

uint8_t CMD_SMS_Ctrl_StepM ( uint8_t *cmddata, uint16_t datalen, Stepmotor_dir_t stepDIR, Stepmotor_change_mode_t stepMode, uint8_t changeValue)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b086      	sub	sp, #24
 8002268:	af04      	add	r7, sp, #16
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	4608      	mov	r0, r1
 800226e:	4611      	mov	r1, r2
 8002270:	461a      	mov	r2, r3
 8002272:	4603      	mov	r3, r0
 8002274:	807b      	strh	r3, [r7, #2]
 8002276:	460b      	mov	r3, r1
 8002278:	707b      	strb	r3, [r7, #1]
 800227a:	4613      	mov	r3, r2
 800227c:	703b      	strb	r3, [r7, #0]
	if (sendCMDtoServer(CMD_CTRL_STEP_MOTOR, cmddata, datalen, MBA_NULL,stepDIR , stepMode, changeValue) )	{
 800227e:	887a      	ldrh	r2, [r7, #2]
 8002280:	7c3b      	ldrb	r3, [r7, #16]
 8002282:	9302      	str	r3, [sp, #8]
 8002284:	783b      	ldrb	r3, [r7, #0]
 8002286:	9301      	str	r3, [sp, #4]
 8002288:	787b      	ldrb	r3, [r7, #1]
 800228a:	9300      	str	r3, [sp, #0]
 800228c:	2300      	movs	r3, #0
 800228e:	6879      	ldr	r1, [r7, #4]
 8002290:	2008      	movs	r0, #8
 8002292:	f7ff fb39 	bl	8001908 <sendCMDtoServer>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d004      	beq.n	80022a6 <CMD_SMS_Ctrl_StepM+0x42>
		Serial_log_string("Sent \"Control Step motor\" message to server\r\n");
 800229c:	4804      	ldr	r0, [pc, #16]	; (80022b0 <CMD_SMS_Ctrl_StepM+0x4c>)
 800229e:	f7fe ff81 	bl	80011a4 <Serial_log_string>
		return 1;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e000      	b.n	80022a8 <CMD_SMS_Ctrl_StepM+0x44>
	}
	return 0;
 80022a6:	2300      	movs	r3, #0
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3708      	adds	r7, #8
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	0800eee0 	.word	0x0800eee0

080022b4 <CMD_SMS_getStationLatestData>:

uint8_t CMD_SMS_getStationLatestData ( uint8_t *cmddata, uint16_t datalen)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b086      	sub	sp, #24
 80022b8:	af04      	add	r7, sp, #16
 80022ba:	6078      	str	r0, [r7, #4]
 80022bc:	460b      	mov	r3, r1
 80022be:	807b      	strh	r3, [r7, #2]
	if (sendCMDtoServer(CMD_SMS_GETSTATUS, cmddata, datalen, MBA_NULL,
 80022c0:	887a      	ldrh	r2, [r7, #2]
 80022c2:	2300      	movs	r3, #0
 80022c4:	9302      	str	r3, [sp, #8]
 80022c6:	2303      	movs	r3, #3
 80022c8:	9301      	str	r3, [sp, #4]
 80022ca:	2303      	movs	r3, #3
 80022cc:	9300      	str	r3, [sp, #0]
 80022ce:	2300      	movs	r3, #0
 80022d0:	6879      	ldr	r1, [r7, #4]
 80022d2:	2004      	movs	r0, #4
 80022d4:	f7ff fb18 	bl	8001908 <sendCMDtoServer>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d004      	beq.n	80022e8 <CMD_SMS_getStationLatestData+0x34>
			STEPM_DIR_DEFAULT , STEPM_MODE_DEFAULT, 0) )	{
		Serial_log_string("Sent \"Get latest station data\" message to server\r\n");
 80022de:	4805      	ldr	r0, [pc, #20]	; (80022f4 <CMD_SMS_getStationLatestData+0x40>)
 80022e0:	f7fe ff60 	bl	80011a4 <Serial_log_string>
		return 1;
 80022e4:	2301      	movs	r3, #1
 80022e6:	e000      	b.n	80022ea <CMD_SMS_getStationLatestData+0x36>
	}
	return 0;
 80022e8:	2300      	movs	r3, #0
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3708      	adds	r7, #8
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	0800ef10 	.word	0x0800ef10

080022f8 <CMD_SMS_getSensorLatestData>:

uint8_t CMD_SMS_getSensorLatestData ( uint8_t *cmddata, uint16_t datalen)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b086      	sub	sp, #24
 80022fc:	af04      	add	r7, sp, #16
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	460b      	mov	r3, r1
 8002302:	807b      	strh	r3, [r7, #2]
	if (sendCMDtoServer( CMD_SMS_GETSTATUS, cmddata, datalen, MBA_NULL,STEPM_DIR_DEFAULT , STEPM_MODE_DEFAULT, 0) )
 8002304:	887a      	ldrh	r2, [r7, #2]
 8002306:	2300      	movs	r3, #0
 8002308:	9302      	str	r3, [sp, #8]
 800230a:	2303      	movs	r3, #3
 800230c:	9301      	str	r3, [sp, #4]
 800230e:	2303      	movs	r3, #3
 8002310:	9300      	str	r3, [sp, #0]
 8002312:	2300      	movs	r3, #0
 8002314:	6879      	ldr	r1, [r7, #4]
 8002316:	2004      	movs	r0, #4
 8002318:	f7ff faf6 	bl	8001908 <sendCMDtoServer>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d001      	beq.n	8002326 <CMD_SMS_getSensorLatestData+0x2e>
		return 1;
 8002322:	2301      	movs	r3, #1
 8002324:	e000      	b.n	8002328 <CMD_SMS_getSensorLatestData+0x30>
	return 0;
 8002326:	2300      	movs	r3, #0
}
 8002328:	4618      	mov	r0, r3
 800232a:	3708      	adds	r7, #8
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}

08002330 <switchContactor>:
#include  "gpio.h"
#include "Task.h"


MBA_state_t switchContactor (MBA_state_t ONofOFF)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
 8002336:	4603      	mov	r3, r0
 8002338:	71fb      	strb	r3, [r7, #7]
	switch (ONofOFF)	{
 800233a:	79fb      	ldrb	r3, [r7, #7]
 800233c:	2b01      	cmp	r3, #1
 800233e:	d002      	beq.n	8002346 <switchContactor+0x16>
 8002340:	2b02      	cmp	r3, #2
 8002342:	d006      	beq.n	8002352 <switchContactor+0x22>
		break;
	case MBA_OFF:
		HAL_GPIO_WritePin(MBA_CONTACTOR_GPIO_Port, MBA_CONTACTOR_Pin, GPIO_PIN_RESET);
		break;
	default:
		break;
 8002344:	e00b      	b.n	800235e <switchContactor+0x2e>
		HAL_GPIO_WritePin(MBA_CONTACTOR_GPIO_Port, MBA_CONTACTOR_Pin, GPIO_PIN_SET);
 8002346:	2201      	movs	r2, #1
 8002348:	2110      	movs	r1, #16
 800234a:	4809      	ldr	r0, [pc, #36]	; (8002370 <switchContactor+0x40>)
 800234c:	f006 fe33 	bl	8008fb6 <HAL_GPIO_WritePin>
		break;
 8002350:	e005      	b.n	800235e <switchContactor+0x2e>
		HAL_GPIO_WritePin(MBA_CONTACTOR_GPIO_Port, MBA_CONTACTOR_Pin, GPIO_PIN_RESET);
 8002352:	2200      	movs	r2, #0
 8002354:	2110      	movs	r1, #16
 8002356:	4806      	ldr	r0, [pc, #24]	; (8002370 <switchContactor+0x40>)
 8002358:	f006 fe2d 	bl	8008fb6 <HAL_GPIO_WritePin>
		break;
 800235c:	bf00      	nop
	}
	// send MBA status to Server
	triggerTaskflag(TASK_SEND_MBA_STATUS, FLAG_EN);
 800235e:	2101      	movs	r1, #1
 8002360:	2004      	movs	r0, #4
 8002362:	f003 f983 	bl	800566c <triggerTaskflag>
	return ONofOFF;
 8002366:	79fb      	ldrb	r3, [r7, #7]
}
 8002368:	4618      	mov	r0, r3
 800236a:	3708      	adds	r7, #8
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}
 8002370:	40010800 	.word	0x40010800

08002374 <initSIM>:
uint16_t SMS_len = 0;



void initSIM()
{
 8002374:	b580      	push	{r7, lr}
 8002376:	af00      	add	r7, sp, #0
	enableReceiveDMAtoIdle_SIM();
 8002378:	f000 f802 	bl	8002380 <enableReceiveDMAtoIdle_SIM>
//	SIM_sendCMD((uint8_t*)"ATE0",(uint8_t*)"OK", ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, 1000);
}
 800237c:	bf00      	nop
 800237e:	bd80      	pop	{r7, pc}

08002380 <enableReceiveDMAtoIdle_SIM>:
void enableReceiveDMAtoIdle_SIM(void)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	af00      	add	r7, sp, #0
	 HAL_UARTEx_ReceiveToIdle_DMA(SIM_UART, SIMRxbuff, SIM_RXBUFF_SIZE);
 8002384:	2296      	movs	r2, #150	; 0x96
 8002386:	4907      	ldr	r1, [pc, #28]	; (80023a4 <enableReceiveDMAtoIdle_SIM+0x24>)
 8002388:	4807      	ldr	r0, [pc, #28]	; (80023a8 <enableReceiveDMAtoIdle_SIM+0x28>)
 800238a:	f008 fe96 	bl	800b0ba <HAL_UARTEx_ReceiveToIdle_DMA>
	  __HAL_DMA_DISABLE_IT(SIM_DMA_UART,DMA_IT_HT);
 800238e:	4b07      	ldr	r3, [pc, #28]	; (80023ac <enableReceiveDMAtoIdle_SIM+0x2c>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	4b05      	ldr	r3, [pc, #20]	; (80023ac <enableReceiveDMAtoIdle_SIM+0x2c>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f022 0204 	bic.w	r2, r2, #4
 800239c:	601a      	str	r2, [r3, #0]
}
 800239e:	bf00      	nop
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	20001108 	.word	0x20001108
 80023a8:	20002a68 	.word	0x20002a68
 80023ac:	20002b40 	.word	0x20002b40

080023b0 <SIM_callback>:

void SIM_callback(uint16_t Size)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b084      	sub	sp, #16
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	4603      	mov	r3, r0
 80023b8:	80fb      	strh	r3, [r7, #6]


		oldPos = newPos;  // Update the last position before copying new data
 80023ba:	4b56      	ldr	r3, [pc, #344]	; (8002514 <SIM_callback+0x164>)
 80023bc:	881a      	ldrh	r2, [r3, #0]
 80023be:	4b56      	ldr	r3, [pc, #344]	; (8002518 <SIM_callback+0x168>)
 80023c0:	801a      	strh	r2, [r3, #0]

		/* If the data in large and it is about to exceed the buffer size, we have to route it to the start of the buffer
		 * This is to maintain the circular buffer
		 * The old data in the main buffer will be overlapped
		 */
		if (oldPos+Size > SIM_BUFF_SIZE)  // If the current position + new data size is greater than the main buffer
 80023c2:	4b55      	ldr	r3, [pc, #340]	; (8002518 <SIM_callback+0x168>)
 80023c4:	881b      	ldrh	r3, [r3, #0]
 80023c6:	461a      	mov	r2, r3
 80023c8:	88fb      	ldrh	r3, [r7, #6]
 80023ca:	4413      	add	r3, r2
 80023cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023d0:	dd22      	ble.n	8002418 <SIM_callback+0x68>
		{
			uint16_t datatocopy = SIM_BUFF_SIZE-oldPos;  // find out how much space is left in the main buffer
 80023d2:	4b51      	ldr	r3, [pc, #324]	; (8002518 <SIM_callback+0x168>)
 80023d4:	881b      	ldrh	r3, [r3, #0]
 80023d6:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80023da:	81fb      	strh	r3, [r7, #14]
			memcpy ((uint8_t *)SIMbuff+oldPos, (uint8_t *)SIMRxbuff, datatocopy);  // copy data in that remaining space
 80023dc:	4b4e      	ldr	r3, [pc, #312]	; (8002518 <SIM_callback+0x168>)
 80023de:	881b      	ldrh	r3, [r3, #0]
 80023e0:	461a      	mov	r2, r3
 80023e2:	4b4e      	ldr	r3, [pc, #312]	; (800251c <SIM_callback+0x16c>)
 80023e4:	4413      	add	r3, r2
 80023e6:	89fa      	ldrh	r2, [r7, #14]
 80023e8:	494d      	ldr	r1, [pc, #308]	; (8002520 <SIM_callback+0x170>)
 80023ea:	4618      	mov	r0, r3
 80023ec:	f009 ff2c 	bl	800c248 <memcpy>

			oldPos = 0;  // point to the start of the buffer
 80023f0:	4b49      	ldr	r3, [pc, #292]	; (8002518 <SIM_callback+0x168>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	801a      	strh	r2, [r3, #0]
			memcpy ((uint8_t *)SIMbuff, (uint8_t *)SIMRxbuff+datatocopy, (Size-datatocopy));  // copy the remaining data
 80023f6:	89fb      	ldrh	r3, [r7, #14]
 80023f8:	4a49      	ldr	r2, [pc, #292]	; (8002520 <SIM_callback+0x170>)
 80023fa:	1899      	adds	r1, r3, r2
 80023fc:	88fa      	ldrh	r2, [r7, #6]
 80023fe:	89fb      	ldrh	r3, [r7, #14]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	461a      	mov	r2, r3
 8002404:	4845      	ldr	r0, [pc, #276]	; (800251c <SIM_callback+0x16c>)
 8002406:	f009 ff1f 	bl	800c248 <memcpy>
			newPos = (Size-datatocopy);  // update the position
 800240a:	88fa      	ldrh	r2, [r7, #6]
 800240c:	89fb      	ldrh	r3, [r7, #14]
 800240e:	1ad3      	subs	r3, r2, r3
 8002410:	b29a      	uxth	r2, r3
 8002412:	4b40      	ldr	r3, [pc, #256]	; (8002514 <SIM_callback+0x164>)
 8002414:	801a      	strh	r2, [r3, #0]
 8002416:	e010      	b.n	800243a <SIM_callback+0x8a>
		/* if the current position + new data size is less than the main buffer
		 * we will simply copy the data into the buffer and update the position
		 */
		else
		{
			memcpy ((uint8_t *)SIMbuff+oldPos, (uint8_t *)SIMRxbuff, Size);
 8002418:	4b3f      	ldr	r3, [pc, #252]	; (8002518 <SIM_callback+0x168>)
 800241a:	881b      	ldrh	r3, [r3, #0]
 800241c:	461a      	mov	r2, r3
 800241e:	4b3f      	ldr	r3, [pc, #252]	; (800251c <SIM_callback+0x16c>)
 8002420:	4413      	add	r3, r2
 8002422:	88fa      	ldrh	r2, [r7, #6]
 8002424:	493e      	ldr	r1, [pc, #248]	; (8002520 <SIM_callback+0x170>)
 8002426:	4618      	mov	r0, r3
 8002428:	f009 ff0e 	bl	800c248 <memcpy>
			newPos = Size+oldPos;
 800242c:	4b3a      	ldr	r3, [pc, #232]	; (8002518 <SIM_callback+0x168>)
 800242e:	881a      	ldrh	r2, [r3, #0]
 8002430:	88fb      	ldrh	r3, [r7, #6]
 8002432:	4413      	add	r3, r2
 8002434:	b29a      	uxth	r2, r3
 8002436:	4b37      	ldr	r3, [pc, #220]	; (8002514 <SIM_callback+0x164>)
 8002438:	801a      	strh	r2, [r3, #0]

		/* Update the position of the Head
		 * If the current position + new size is less then the buffer size, Head will update normally
		 * Or else the head will be at the new position from the beginning
		 */
		if (head + Size < SIM_BUFF_SIZE ) head = head + Size;
 800243a:	4b3a      	ldr	r3, [pc, #232]	; (8002524 <SIM_callback+0x174>)
 800243c:	881b      	ldrh	r3, [r3, #0]
 800243e:	461a      	mov	r2, r3
 8002440:	88fb      	ldrh	r3, [r7, #6]
 8002442:	4413      	add	r3, r2
 8002444:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002448:	da07      	bge.n	800245a <SIM_callback+0xaa>
 800244a:	4b36      	ldr	r3, [pc, #216]	; (8002524 <SIM_callback+0x174>)
 800244c:	881a      	ldrh	r2, [r3, #0]
 800244e:	88fb      	ldrh	r3, [r7, #6]
 8002450:	4413      	add	r3, r2
 8002452:	b29a      	uxth	r2, r3
 8002454:	4b33      	ldr	r3, [pc, #204]	; (8002524 <SIM_callback+0x174>)
 8002456:	801a      	strh	r2, [r3, #0]
 8002458:	e009      	b.n	800246e <SIM_callback+0xbe>
		else head = head + Size - SIM_BUFF_SIZE;
 800245a:	4b32      	ldr	r3, [pc, #200]	; (8002524 <SIM_callback+0x174>)
 800245c:	881a      	ldrh	r2, [r3, #0]
 800245e:	88fb      	ldrh	r3, [r7, #6]
 8002460:	4413      	add	r3, r2
 8002462:	b29b      	uxth	r3, r3
 8002464:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8002468:	b29a      	uxth	r2, r3
 800246a:	4b2e      	ldr	r3, [pc, #184]	; (8002524 <SIM_callback+0x174>)
 800246c:	801a      	strh	r2, [r3, #0]

		/* start the DMA again */
		enableReceiveDMAtoIdle_SIM();
 800246e:	f7ff ff87 	bl	8002380 <enableReceiveDMAtoIdle_SIM>

		// New SMS coming
		if (isWordinBuff(SIMRxbuff, Size, (uint8_t*)"+CMTI: \"SM\"") != NULL)
 8002472:	88fb      	ldrh	r3, [r7, #6]
 8002474:	4a2c      	ldr	r2, [pc, #176]	; (8002528 <SIM_callback+0x178>)
 8002476:	4619      	mov	r1, r3
 8002478:	4829      	ldr	r0, [pc, #164]	; (8002520 <SIM_callback+0x170>)
 800247a:	f002 fed5 	bl	8005228 <isWordinBuff>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d002      	beq.n	800248a <SIM_callback+0xda>
		{
			newSMS = 1;
 8002484:	4b29      	ldr	r3, [pc, #164]	; (800252c <SIM_callback+0x17c>)
 8002486:	2201      	movs	r2, #1
 8002488:	701a      	strb	r2, [r3, #0]
		}

		// Read SMS
		if (isWordinBuff(SIMRxbuff, Size, (uint8_t*)"+CMGR:") != NULL)	{
 800248a:	88fb      	ldrh	r3, [r7, #6]
 800248c:	4a28      	ldr	r2, [pc, #160]	; (8002530 <SIM_callback+0x180>)
 800248e:	4619      	mov	r1, r3
 8002490:	4823      	ldr	r0, [pc, #140]	; (8002520 <SIM_callback+0x170>)
 8002492:	f002 fec9 	bl	8005228 <isWordinBuff>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d008      	beq.n	80024ae <SIM_callback+0xfe>
			memcpy(SMS_Rxbuff, SIMRxbuff, Size);
 800249c:	88fb      	ldrh	r3, [r7, #6]
 800249e:	461a      	mov	r2, r3
 80024a0:	491f      	ldr	r1, [pc, #124]	; (8002520 <SIM_callback+0x170>)
 80024a2:	4824      	ldr	r0, [pc, #144]	; (8002534 <SIM_callback+0x184>)
 80024a4:	f009 fed0 	bl	800c248 <memcpy>
			SMS_len = Size;
 80024a8:	4a23      	ldr	r2, [pc, #140]	; (8002538 <SIM_callback+0x188>)
 80024aa:	88fb      	ldrh	r3, [r7, #6]
 80024ac:	8013      	strh	r3, [r2, #0]
		}
		if (isWordinBuff(SIMRxbuff, Size, (uint8_t*)"+CMGL: ") != NULL)	{
 80024ae:	88fb      	ldrh	r3, [r7, #6]
 80024b0:	4a22      	ldr	r2, [pc, #136]	; (800253c <SIM_callback+0x18c>)
 80024b2:	4619      	mov	r1, r3
 80024b4:	481a      	ldr	r0, [pc, #104]	; (8002520 <SIM_callback+0x170>)
 80024b6:	f002 feb7 	bl	8005228 <isWordinBuff>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d008      	beq.n	80024d2 <SIM_callback+0x122>
			memcpy(SMS_Rxbuff, SIMRxbuff, Size);
 80024c0:	88fb      	ldrh	r3, [r7, #6]
 80024c2:	461a      	mov	r2, r3
 80024c4:	4916      	ldr	r1, [pc, #88]	; (8002520 <SIM_callback+0x170>)
 80024c6:	481b      	ldr	r0, [pc, #108]	; (8002534 <SIM_callback+0x184>)
 80024c8:	f009 febe 	bl	800c248 <memcpy>
			SMS_len = Size;
 80024cc:	4a1a      	ldr	r2, [pc, #104]	; (8002538 <SIM_callback+0x188>)
 80024ce:	88fb      	ldrh	r3, [r7, #6]
 80024d0:	8013      	strh	r3, [r2, #0]
		}
		// New MQTT message
		if ( (isWordinBuff(SIMRxbuff, Size, (uint8_t*) "+CMQTTRXSTART:") != NULL)
 80024d2:	88fb      	ldrh	r3, [r7, #6]
 80024d4:	4a1a      	ldr	r2, [pc, #104]	; (8002540 <SIM_callback+0x190>)
 80024d6:	4619      	mov	r1, r3
 80024d8:	4811      	ldr	r0, [pc, #68]	; (8002520 <SIM_callback+0x170>)
 80024da:	f002 fea5 	bl	8005228 <isWordinBuff>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d013      	beq.n	800250c <SIM_callback+0x15c>
				&& ( isWordinBuff(SIMRxbuff, Size,(uint8_t*) "+CMQTTRXEND:") != NULL ) )  	{
 80024e4:	88fb      	ldrh	r3, [r7, #6]
 80024e6:	4a17      	ldr	r2, [pc, #92]	; (8002544 <SIM_callback+0x194>)
 80024e8:	4619      	mov	r1, r3
 80024ea:	480d      	ldr	r0, [pc, #52]	; (8002520 <SIM_callback+0x170>)
 80024ec:	f002 fe9c 	bl	8005228 <isWordinBuff>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d00a      	beq.n	800250c <SIM_callback+0x15c>
			memcpy(MQTT_Rxbuff, SIMRxbuff, Size);
 80024f6:	88fb      	ldrh	r3, [r7, #6]
 80024f8:	461a      	mov	r2, r3
 80024fa:	4909      	ldr	r1, [pc, #36]	; (8002520 <SIM_callback+0x170>)
 80024fc:	4812      	ldr	r0, [pc, #72]	; (8002548 <SIM_callback+0x198>)
 80024fe:	f009 fea3 	bl	800c248 <memcpy>
			MQTT_receive(MQTT_Rxbuff, Size);
 8002502:	88fb      	ldrh	r3, [r7, #6]
 8002504:	4619      	mov	r1, r3
 8002506:	4810      	ldr	r0, [pc, #64]	; (8002548 <SIM_callback+0x198>)
 8002508:	f002 fb90 	bl	8004c2c <MQTT_receive>

//		Serial_log_string("Rx: ");
//		Serial_log_buffer(SIMRxbuff, Size);
//		Serial_log_string(" ");

}
 800250c:	bf00      	nop
 800250e:	3710      	adds	r7, #16
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}
 8002514:	20000f06 	.word	0x20000f06
 8002518:	20000f04 	.word	0x20000f04
 800251c:	20000f08 	.word	0x20000f08
 8002520:	20001108 	.word	0x20001108
 8002524:	20001364 	.word	0x20001364
 8002528:	0800ef44 	.word	0x0800ef44
 800252c:	20001368 	.word	0x20001368
 8002530:	0800ef50 	.word	0x0800ef50
 8002534:	200011a0 	.word	0x200011a0
 8002538:	2000136a 	.word	0x2000136a
 800253c:	0800ef58 	.word	0x0800ef58
 8002540:	0800ef60 	.word	0x0800ef60
 8002544:	0800ef70 	.word	0x0800ef70
 8002548:	20001238 	.word	0x20001238

0800254c <SIM_checkMsg>:

SIM_res_t SIM_checkMsg(uint8_t *Msg, uint16_t timeout)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 8002552:	af00      	add	r7, sp, #0
 8002554:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8002558:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800255c:	6018      	str	r0, [r3, #0]
 800255e:	460a      	mov	r2, r1
 8002560:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8002564:	f2a3 230e 	subw	r3, r3, #526	; 0x20e
 8002568:	801a      	strh	r2, [r3, #0]
	SIM_res_t res= SIM_NO_RES;
 800256a:	2302      	movs	r3, #2
 800256c:	f887 320b 	strb.w	r3, [r7, #523]	; 0x20b
	timeout /= 500;
 8002570:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8002574:	f2a3 230e 	subw	r3, r3, #526	; 0x20e
 8002578:	f507 7204 	add.w	r2, r7, #528	; 0x210
 800257c:	f2a2 220e 	subw	r2, r2, #526	; 0x20e
 8002580:	8812      	ldrh	r2, [r2, #0]
 8002582:	494a      	ldr	r1, [pc, #296]	; (80026ac <SIM_checkMsg+0x160>)
 8002584:	fba1 1202 	umull	r1, r2, r1, r2
 8002588:	0952      	lsrs	r2, r2, #5
 800258a:	801a      	strh	r2, [r3, #0]
	uint8_t dataSize = 0;
 800258c:	2300      	movs	r3, #0
 800258e:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
	uint8_t tmpdbuff[SIM_BUFF_SIZE];
	memset( (char*)tmpdbuff, 0, SIM_BUFF_SIZE );
 8002592:	f107 0308 	add.w	r3, r7, #8
 8002596:	f44f 7200 	mov.w	r2, #512	; 0x200
 800259a:	2100      	movs	r1, #0
 800259c:	4618      	mov	r0, r3
 800259e:	f009 fe61 	bl	800c264 <memset>
	for (uint16_t i = 0; i < 500 ; i++)
 80025a2:	2300      	movs	r3, #0
 80025a4:	f8a7 320c 	strh.w	r3, [r7, #524]	; 0x20c
 80025a8:	e073      	b.n	8002692 <SIM_checkMsg+0x146>
	{
		HAL_Delay(timeout);
 80025aa:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80025ae:	f2a3 230e 	subw	r3, r3, #526	; 0x20e
 80025b2:	881b      	ldrh	r3, [r3, #0]
 80025b4:	4618      	mov	r0, r3
 80025b6:	f005 fb91 	bl	8007cdc <HAL_Delay>

		if (head > tail)
 80025ba:	4b3d      	ldr	r3, [pc, #244]	; (80026b0 <SIM_checkMsg+0x164>)
 80025bc:	881a      	ldrh	r2, [r3, #0]
 80025be:	4b3d      	ldr	r3, [pc, #244]	; (80026b4 <SIM_checkMsg+0x168>)
 80025c0:	881b      	ldrh	r3, [r3, #0]
 80025c2:	429a      	cmp	r2, r3
 80025c4:	d915      	bls.n	80025f2 <SIM_checkMsg+0xa6>
		{
			dataSize = head - tail ;
 80025c6:	4b3a      	ldr	r3, [pc, #232]	; (80026b0 <SIM_checkMsg+0x164>)
 80025c8:	881b      	ldrh	r3, [r3, #0]
 80025ca:	b2da      	uxtb	r2, r3
 80025cc:	4b39      	ldr	r3, [pc, #228]	; (80026b4 <SIM_checkMsg+0x168>)
 80025ce:	881b      	ldrh	r3, [r3, #0]
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	1ad3      	subs	r3, r2, r3
 80025d4:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
//			tmpdbuff = (uint8_t*)malloc(dataSize*sizeof(uint8_t));

			memcpy(tmpdbuff, SIMbuff + tail, dataSize);
 80025d8:	4b36      	ldr	r3, [pc, #216]	; (80026b4 <SIM_checkMsg+0x168>)
 80025da:	881b      	ldrh	r3, [r3, #0]
 80025dc:	461a      	mov	r2, r3
 80025de:	4b36      	ldr	r3, [pc, #216]	; (80026b8 <SIM_checkMsg+0x16c>)
 80025e0:	18d1      	adds	r1, r2, r3
 80025e2:	f897 220f 	ldrb.w	r2, [r7, #527]	; 0x20f
 80025e6:	f107 0308 	add.w	r3, r7, #8
 80025ea:	4618      	mov	r0, r3
 80025ec:	f009 fe2c 	bl	800c248 <memcpy>
 80025f0:	e02a      	b.n	8002648 <SIM_checkMsg+0xfc>
		}
		else if ( head < tail )
 80025f2:	4b2f      	ldr	r3, [pc, #188]	; (80026b0 <SIM_checkMsg+0x164>)
 80025f4:	881a      	ldrh	r2, [r3, #0]
 80025f6:	4b2f      	ldr	r3, [pc, #188]	; (80026b4 <SIM_checkMsg+0x168>)
 80025f8:	881b      	ldrh	r3, [r3, #0]
 80025fa:	429a      	cmp	r2, r3
 80025fc:	d243      	bcs.n	8002686 <SIM_checkMsg+0x13a>
		{
			dataSize = SIM_BUFF_SIZE - tail + head ;
 80025fe:	4b2c      	ldr	r3, [pc, #176]	; (80026b0 <SIM_checkMsg+0x164>)
 8002600:	881b      	ldrh	r3, [r3, #0]
 8002602:	b2da      	uxtb	r2, r3
 8002604:	4b2b      	ldr	r3, [pc, #172]	; (80026b4 <SIM_checkMsg+0x168>)
 8002606:	881b      	ldrh	r3, [r3, #0]
 8002608:	b2db      	uxtb	r3, r3
 800260a:	1ad3      	subs	r3, r2, r3
 800260c:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
//		 	tmpdbuff = (uint8_t*)malloc(dataSize*sizeof(uint8_t));
			memcpy(tmpdbuff, SIMbuff + tail, SIM_BUFF_SIZE - tail);
 8002610:	4b28      	ldr	r3, [pc, #160]	; (80026b4 <SIM_checkMsg+0x168>)
 8002612:	881b      	ldrh	r3, [r3, #0]
 8002614:	461a      	mov	r2, r3
 8002616:	4b28      	ldr	r3, [pc, #160]	; (80026b8 <SIM_checkMsg+0x16c>)
 8002618:	18d1      	adds	r1, r2, r3
 800261a:	4b26      	ldr	r3, [pc, #152]	; (80026b4 <SIM_checkMsg+0x168>)
 800261c:	881b      	ldrh	r3, [r3, #0]
 800261e:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8002622:	461a      	mov	r2, r3
 8002624:	f107 0308 	add.w	r3, r7, #8
 8002628:	4618      	mov	r0, r3
 800262a:	f009 fe0d 	bl	800c248 <memcpy>
			memcpy(tmpdbuff + SIM_BUFF_SIZE - tail, SIMbuff, head);
 800262e:	4b21      	ldr	r3, [pc, #132]	; (80026b4 <SIM_checkMsg+0x168>)
 8002630:	881b      	ldrh	r3, [r3, #0]
 8002632:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8002636:	f107 0208 	add.w	r2, r7, #8
 800263a:	4413      	add	r3, r2
 800263c:	4a1c      	ldr	r2, [pc, #112]	; (80026b0 <SIM_checkMsg+0x164>)
 800263e:	8812      	ldrh	r2, [r2, #0]
 8002640:	491d      	ldr	r1, [pc, #116]	; (80026b8 <SIM_checkMsg+0x16c>)
 8002642:	4618      	mov	r0, r3
 8002644:	f009 fe00 	bl	800c248 <memcpy>
		}
		else {
			continue;
		}

		if ( isWordinBuff(tmpdbuff, dataSize, Msg) != NULL )	{
 8002648:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 800264c:	b299      	uxth	r1, r3
 800264e:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8002652:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8002656:	f107 0008 	add.w	r0, r7, #8
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	f002 fde4 	bl	8005228 <isWordinBuff>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d001      	beq.n	800266a <SIM_checkMsg+0x11e>
//			Serial_log_number(tail);
//			Serial_log_string(" ");
//			Serial_log_string("\nhead: ");
//			Serial_log_number(head);
//			Serial_log_string(" ");
			return SIM_RES_MSG ;
 8002666:	2301      	movs	r3, #1
 8002668:	e01a      	b.n	80026a0 <SIM_checkMsg+0x154>
		}

		if ( isWordinBuff(tmpdbuff, dataSize, (uint8_t*)"ERROR") != NULL )	{
 800266a:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 800266e:	b299      	uxth	r1, r3
 8002670:	f107 0308 	add.w	r3, r7, #8
 8002674:	4a11      	ldr	r2, [pc, #68]	; (80026bc <SIM_checkMsg+0x170>)
 8002676:	4618      	mov	r0, r3
 8002678:	f002 fdd6 	bl	8005228 <isWordinBuff>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d002      	beq.n	8002688 <SIM_checkMsg+0x13c>
//			Serial_log_string("err: ");
//			Serial_log_buffer(tmpdbuff, dataSize);
//			Serial_log_string(";");
			return SIM_ERROR ;
 8002682:	2300      	movs	r3, #0
 8002684:	e00c      	b.n	80026a0 <SIM_checkMsg+0x154>
			continue;
 8002686:	bf00      	nop
	for (uint16_t i = 0; i < 500 ; i++)
 8002688:	f8b7 320c 	ldrh.w	r3, [r7, #524]	; 0x20c
 800268c:	3301      	adds	r3, #1
 800268e:	f8a7 320c 	strh.w	r3, [r7, #524]	; 0x20c
 8002692:	f8b7 320c 	ldrh.w	r3, [r7, #524]	; 0x20c
 8002696:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800269a:	d386      	bcc.n	80025aa <SIM_checkMsg+0x5e>
//	Serial_log_number(tail);
//	Serial_log_string(" ");
//	Serial_log_string("\nhead: ");
//	Serial_log_number(head);
//	Serial_log_string(" ");
 	return res;
 800269c:	f897 320b 	ldrb.w	r3, [r7, #523]	; 0x20b

}
 80026a0:	4618      	mov	r0, r3
 80026a2:	f507 7704 	add.w	r7, r7, #528	; 0x210
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	10624dd3 	.word	0x10624dd3
 80026b0:	20001364 	.word	0x20001364
 80026b4:	20001366 	.word	0x20001366
 80026b8:	20000f08 	.word	0x20000f08
 80026bc:	0800ef80 	.word	0x0800ef80

080026c0 <SIM_sendCMD>:

SIM_res_t SIM_sendCMD(uint8_t *cmd, uint8_t *checkResMsg, uint8_t CheckResENorDIS, uint8_t ENorDISmarkasread, uint32_t timeout)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b09e      	sub	sp, #120	; 0x78
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	60f8      	str	r0, [r7, #12]
 80026c8:	60b9      	str	r1, [r7, #8]
 80026ca:	4611      	mov	r1, r2
 80026cc:	461a      	mov	r2, r3
 80026ce:	460b      	mov	r3, r1
 80026d0:	71fb      	strb	r3, [r7, #7]
 80026d2:	4613      	mov	r3, r2
 80026d4:	71bb      	strb	r3, [r7, #6]
	uint8_t SIM_Txbuff[100];
	uint8_t len = sprintf( (char*)SIM_Txbuff, "%s\r\n", cmd);
 80026d6:	f107 0310 	add.w	r3, r7, #16
 80026da:	68fa      	ldr	r2, [r7, #12]
 80026dc:	4915      	ldr	r1, [pc, #84]	; (8002734 <SIM_sendCMD+0x74>)
 80026de:	4618      	mov	r0, r3
 80026e0:	f00a f964 	bl	800c9ac <siprintf>
 80026e4:	4603      	mov	r3, r0
 80026e6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	if ( HAL_UART_Transmit(SIM_UART, SIM_Txbuff, len, 0xFFFF) != HAL_OK )	{
 80026ea:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80026ee:	b29a      	uxth	r2, r3
 80026f0:	f107 0110 	add.w	r1, r7, #16
 80026f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026f8:	480f      	ldr	r0, [pc, #60]	; (8002738 <SIM_sendCMD+0x78>)
 80026fa:	f008 fc5b 	bl	800afb4 <HAL_UART_Transmit>
//		Serial_log_string("UART transmit ERROR\r\n");
	}

	if (CheckResENorDIS == ENABLE_SIM_CHECKRES)
 80026fe:	79fb      	ldrb	r3, [r7, #7]
 8002700:	2b01      	cmp	r3, #1
 8002702:	d111      	bne.n	8002728 <SIM_sendCMD+0x68>
	{
		SIM_res_t res = SIM_checkMsg(checkResMsg, timeout);
 8002704:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002708:	b29b      	uxth	r3, r3
 800270a:	4619      	mov	r1, r3
 800270c:	68b8      	ldr	r0, [r7, #8]
 800270e:	f7ff ff1d 	bl	800254c <SIM_checkMsg>
 8002712:	4603      	mov	r3, r0
 8002714:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
		if (ENorDISmarkasread == ENABLE_MARKASREAD)
 8002718:	79bb      	ldrb	r3, [r7, #6]
 800271a:	2b01      	cmp	r3, #1
 800271c:	d101      	bne.n	8002722 <SIM_sendCMD+0x62>
		{
			MarkAsReadData_SIM();
 800271e:	f000 f87f 	bl	8002820 <MarkAsReadData_SIM>
		}
//		Serial_log_string("Res of CMD: ");
//		Serial_log_buffer(cmd, len);
//		Serial_log_number(res);
		return res;
 8002722:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8002726:	e000      	b.n	800272a <SIM_sendCMD+0x6a>
	}
	return SIM_NO_RES;
 8002728:	2302      	movs	r3, #2
}
 800272a:	4618      	mov	r0, r3
 800272c:	3778      	adds	r7, #120	; 0x78
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	0800ef88 	.word	0x0800ef88
 8002738:	20002a68 	.word	0x20002a68

0800273c <SIM_checkCMD>:

uint8_t SIM_checkCMD (SIM_CMD_t cmd)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b086      	sub	sp, #24
 8002740:	af02      	add	r7, sp, #8
 8002742:	4603      	mov	r3, r0
 8002744:	71fb      	strb	r3, [r7, #7]
	uint8_t res = 0;
 8002746:	2300      	movs	r3, #0
 8002748:	73fb      	strb	r3, [r7, #15]
//	SIM_res_t check;
	switch (cmd) {
 800274a:	79fb      	ldrb	r3, [r7, #7]
 800274c:	2b04      	cmp	r3, #4
 800274e:	d849      	bhi.n	80027e4 <SIM_checkCMD+0xa8>
 8002750:	a201      	add	r2, pc, #4	; (adr r2, 8002758 <SIM_checkCMD+0x1c>)
 8002752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002756:	bf00      	nop
 8002758:	0800276d 	.word	0x0800276d
 800275c:	080027c7 	.word	0x080027c7
 8002760:	080027a9 	.word	0x080027a9
 8002764:	0800278b 	.word	0x0800278b
 8002768:	080027e5 	.word	0x080027e5
		case SIM_CMD_SIMCARD_PIN:
			if ( SIM_sendCMD( (uint8_t*)"AT+CPIN?", (uint8_t*)"+CPIN: READY", ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, SIM_TIMEOUT_LONG) == SIM_RES_MSG ) {
 800276c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002770:	9300      	str	r3, [sp, #0]
 8002772:	2301      	movs	r3, #1
 8002774:	2201      	movs	r2, #1
 8002776:	4922      	ldr	r1, [pc, #136]	; (8002800 <SIM_checkCMD+0xc4>)
 8002778:	4822      	ldr	r0, [pc, #136]	; (8002804 <SIM_checkCMD+0xc8>)
 800277a:	f7ff ffa1 	bl	80026c0 <SIM_sendCMD>
 800277e:	4603      	mov	r3, r0
 8002780:	2b01      	cmp	r3, #1
 8002782:	d131      	bne.n	80027e8 <SIM_checkCMD+0xac>
				res = 1;
 8002784:	2301      	movs	r3, #1
 8002786:	73fb      	strb	r3, [r7, #15]
			}
			else {
//				Serial_log_string("SIM card not READY\r\n");

			}
			break;
 8002788:	e02e      	b.n	80027e8 <SIM_checkCMD+0xac>
		case SIM_CMD_NW_CPSI:
			if ( SIM_sendCMD( (uint8_t*)"AT+CPSI?", (uint8_t*)"+CPSI: NO SERVICE", ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, SIM_TIMEOUT_LONG) == SIM_RES_MSG ) {
 800278a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800278e:	9300      	str	r3, [sp, #0]
 8002790:	2301      	movs	r3, #1
 8002792:	2201      	movs	r2, #1
 8002794:	491c      	ldr	r1, [pc, #112]	; (8002808 <SIM_checkCMD+0xcc>)
 8002796:	481d      	ldr	r0, [pc, #116]	; (800280c <SIM_checkCMD+0xd0>)
 8002798:	f7ff ff92 	bl	80026c0 <SIM_sendCMD>
 800279c:	4603      	mov	r3, r0
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d024      	beq.n	80027ec <SIM_checkCMD+0xb0>
//				Serial_log_string("NO SERVICE, network status has some problem");
			}
			else {
				res = 1;
 80027a2:	2301      	movs	r3, #1
 80027a4:	73fb      	strb	r3, [r7, #15]
//				Serial_log_string("SERVICE available\r\n");
			}
			break;
 80027a6:	e021      	b.n	80027ec <SIM_checkCMD+0xb0>
		case SIM_CMD_NW_CREG:
			if ( SIM_sendCMD( (uint8_t*)"AT+CREG?", (uint8_t*)"+CREG: 0,1", ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, SIM_TIMEOUT_LONG) == SIM_RES_MSG ) {
 80027a8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80027ac:	9300      	str	r3, [sp, #0]
 80027ae:	2301      	movs	r3, #1
 80027b0:	2201      	movs	r2, #1
 80027b2:	4917      	ldr	r1, [pc, #92]	; (8002810 <SIM_checkCMD+0xd4>)
 80027b4:	4817      	ldr	r0, [pc, #92]	; (8002814 <SIM_checkCMD+0xd8>)
 80027b6:	f7ff ff83 	bl	80026c0 <SIM_sendCMD>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d117      	bne.n	80027f0 <SIM_checkCMD+0xb4>
				res = 1;
 80027c0:	2301      	movs	r3, #1
 80027c2:	73fb      	strb	r3, [r7, #15]
//				Serial_log_string("Module is registered to CS domain\r\n");
			}
			else {
//				Serial_log_string("Module is not registered to CS domain, reboot the module\r\n");
			}
			break;
 80027c4:	e014      	b.n	80027f0 <SIM_checkCMD+0xb4>
		case SIM_CMD_PACKDOM_CGREG:

			break;
		case SIM_CMD_STA_CSQ:
			if ( SIM_sendCMD( (uint8_t*)"AT+CSQ", (uint8_t*)"+CSQ: 99", ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, SIM_TIMEOUT_LONG) == SIM_RES_MSG ) {
 80027c6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80027ca:	9300      	str	r3, [sp, #0]
 80027cc:	2301      	movs	r3, #1
 80027ce:	2201      	movs	r2, #1
 80027d0:	4911      	ldr	r1, [pc, #68]	; (8002818 <SIM_checkCMD+0xdc>)
 80027d2:	4812      	ldr	r0, [pc, #72]	; (800281c <SIM_checkCMD+0xe0>)
 80027d4:	f7ff ff74 	bl	80026c0 <SIM_sendCMD>
 80027d8:	4603      	mov	r3, r0
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d00a      	beq.n	80027f4 <SIM_checkCMD+0xb8>
//				Serial_log_string("Signal quality is bad, please check SIM card or reboot the module\r\n");
			}
			else {
				res = 1;
 80027de:	2301      	movs	r3, #1
 80027e0:	73fb      	strb	r3, [r7, #15]
//				Serial_log_string("Signal quality is good\r\n");
			}
			break;
 80027e2:	e007      	b.n	80027f4 <SIM_checkCMD+0xb8>
		default :
			break;
 80027e4:	bf00      	nop
 80027e6:	e006      	b.n	80027f6 <SIM_checkCMD+0xba>
			break;
 80027e8:	bf00      	nop
 80027ea:	e004      	b.n	80027f6 <SIM_checkCMD+0xba>
			break;
 80027ec:	bf00      	nop
 80027ee:	e002      	b.n	80027f6 <SIM_checkCMD+0xba>
			break;
 80027f0:	bf00      	nop
 80027f2:	e000      	b.n	80027f6 <SIM_checkCMD+0xba>
			break;
 80027f4:	bf00      	nop
	}
	return res;
 80027f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	3710      	adds	r7, #16
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	0800ef90 	.word	0x0800ef90
 8002804:	0800efa0 	.word	0x0800efa0
 8002808:	0800efac 	.word	0x0800efac
 800280c:	0800efc0 	.word	0x0800efc0
 8002810:	0800efcc 	.word	0x0800efcc
 8002814:	0800efd8 	.word	0x0800efd8
 8002818:	0800efe4 	.word	0x0800efe4
 800281c:	0800eff0 	.word	0x0800eff0

08002820 <MarkAsReadData_SIM>:


}

void MarkAsReadData_SIM(void)
{
 8002820:	b480      	push	{r7}
 8002822:	af00      	add	r7, sp, #0
	tail = head;
 8002824:	4b03      	ldr	r3, [pc, #12]	; (8002834 <MarkAsReadData_SIM+0x14>)
 8002826:	881a      	ldrh	r2, [r3, #0]
 8002828:	4b03      	ldr	r3, [pc, #12]	; (8002838 <MarkAsReadData_SIM+0x18>)
 800282a:	801a      	strh	r2, [r3, #0]
}
 800282c:	bf00      	nop
 800282e:	46bd      	mov	sp, r7
 8002830:	bc80      	pop	{r7}
 8002832:	4770      	bx	lr
 8002834:	20001364 	.word	0x20001364
 8002838:	20001366 	.word	0x20001366

0800283c <getAfterword>:

uint16_t getAfterword(uint8_t *srcBuffer, uint16_t srcBufferlen, uint8_t *word, uint8_t *getBuffer)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b086      	sub	sp, #24
 8002840:	af00      	add	r7, sp, #0
 8002842:	60f8      	str	r0, [r7, #12]
 8002844:	607a      	str	r2, [r7, #4]
 8002846:	603b      	str	r3, [r7, #0]
 8002848:	460b      	mov	r3, r1
 800284a:	817b      	strh	r3, [r7, #10]
	uint16_t remainlen = 0;
 800284c:	2300      	movs	r3, #0
 800284e:	82fb      	strh	r3, [r7, #22]
	uint8_t *currPOS = isWordinBuff(srcBuffer, srcBufferlen, word);
 8002850:	897b      	ldrh	r3, [r7, #10]
 8002852:	687a      	ldr	r2, [r7, #4]
 8002854:	4619      	mov	r1, r3
 8002856:	68f8      	ldr	r0, [r7, #12]
 8002858:	f002 fce6 	bl	8005228 <isWordinBuff>
 800285c:	6138      	str	r0, [r7, #16]
	if ( currPOS == NULL ) return	0;
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d101      	bne.n	8002868 <getAfterword+0x2c>
 8002864:	2300      	movs	r3, #0
 8002866:	e015      	b.n	8002894 <getAfterword+0x58>
	currPOS += strlen((char*)word);
 8002868:	6878      	ldr	r0, [r7, #4]
 800286a:	f7fd fc6f 	bl	800014c <strlen>
 800286e:	4602      	mov	r2, r0
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	4413      	add	r3, r2
 8002874:	613b      	str	r3, [r7, #16]
	remainlen = getRemainsize(currPOS, srcBuffer, srcBufferlen);
 8002876:	897b      	ldrh	r3, [r7, #10]
 8002878:	461a      	mov	r2, r3
 800287a:	68f9      	ldr	r1, [r7, #12]
 800287c:	6938      	ldr	r0, [r7, #16]
 800287e:	f002 fd52 	bl	8005326 <getRemainsize>
 8002882:	4603      	mov	r3, r0
 8002884:	82fb      	strh	r3, [r7, #22]
	memcpy(getBuffer, currPOS, remainlen);
 8002886:	8afb      	ldrh	r3, [r7, #22]
 8002888:	461a      	mov	r2, r3
 800288a:	6939      	ldr	r1, [r7, #16]
 800288c:	6838      	ldr	r0, [r7, #0]
 800288e:	f009 fcdb 	bl	800c248 <memcpy>
	return remainlen;
 8002892:	8afb      	ldrh	r3, [r7, #22]
}
 8002894:	4618      	mov	r0, r3
 8002896:	3718      	adds	r7, #24
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}

0800289c <stringIDtoHexID>:

uint16_t stringIDtoHexID (uint8_t *stringIDbuffer, uint8_t *hexIDbuffer, const char *separator, ID_t idtype)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b086      	sub	sp, #24
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	60f8      	str	r0, [r7, #12]
 80028a4:	60b9      	str	r1, [r7, #8]
 80028a6:	607a      	str	r2, [r7, #4]
 80028a8:	70fb      	strb	r3, [r7, #3]
	uint8_t *token = (uint8_t*)strtok((char*)stringIDbuffer, separator);
 80028aa:	6879      	ldr	r1, [r7, #4]
 80028ac:	68f8      	ldr	r0, [r7, #12]
 80028ae:	f00a f89d 	bl	800c9ec <strtok>
 80028b2:	6178      	str	r0, [r7, #20]
	uint16_t hexbufferlen = 0;
 80028b4:	2300      	movs	r3, #0
 80028b6:	827b      	strh	r3, [r7, #18]

	while (token != NULL)	{
 80028b8:	e01b      	b.n	80028f2 <stringIDtoHexID+0x56>
		uint16_t tmp = atoi((char*)token);
 80028ba:	6978      	ldr	r0, [r7, #20]
 80028bc:	f009 fb66 	bl	800bf8c <atoi>
 80028c0:	4603      	mov	r3, r0
 80028c2:	823b      	strh	r3, [r7, #16]
		if ( validationID(tmp, idtype) )	{
 80028c4:	78fa      	ldrb	r2, [r7, #3]
 80028c6:	8a3b      	ldrh	r3, [r7, #16]
 80028c8:	4611      	mov	r1, r2
 80028ca:	4618      	mov	r0, r3
 80028cc:	f002 ffd0 	bl	8005870 <validationID>
 80028d0:	4603      	mov	r3, r0
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d008      	beq.n	80028e8 <stringIDtoHexID+0x4c>
			hexIDbuffer[hexbufferlen++] = tmp;
 80028d6:	8a7b      	ldrh	r3, [r7, #18]
 80028d8:	1c5a      	adds	r2, r3, #1
 80028da:	827a      	strh	r2, [r7, #18]
 80028dc:	461a      	mov	r2, r3
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	4413      	add	r3, r2
 80028e2:	8a3a      	ldrh	r2, [r7, #16]
 80028e4:	b2d2      	uxtb	r2, r2
 80028e6:	701a      	strb	r2, [r3, #0]
		}
		token = (uint8_t*)strtok(NULL, separator);
 80028e8:	6879      	ldr	r1, [r7, #4]
 80028ea:	2000      	movs	r0, #0
 80028ec:	f00a f87e 	bl	800c9ec <strtok>
 80028f0:	6178      	str	r0, [r7, #20]
	while (token != NULL)	{
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d1e0      	bne.n	80028ba <stringIDtoHexID+0x1e>
	}
	return hexbufferlen;
 80028f8:	8a7b      	ldrh	r3, [r7, #18]
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3718      	adds	r7, #24
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
	...

08002904 <SMS_getindex>:

uint16_t SMS_getindex(uint8_t *SMSbuffer,uint16_t SMS_bufferlen)
{
 8002904:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002908:	b08b      	sub	sp, #44	; 0x2c
 800290a:	af02      	add	r7, sp, #8
 800290c:	6078      	str	r0, [r7, #4]
 800290e:	460b      	mov	r3, r1
 8002910:	807b      	strh	r3, [r7, #2]
 8002912:	466b      	mov	r3, sp
 8002914:	461e      	mov	r6, r3
	uint8_t contentbuffer[SMS_bufferlen];
 8002916:	8879      	ldrh	r1, [r7, #2]
 8002918:	460b      	mov	r3, r1
 800291a:	3b01      	subs	r3, #1
 800291c:	61bb      	str	r3, [r7, #24]
 800291e:	b28b      	uxth	r3, r1
 8002920:	2200      	movs	r2, #0
 8002922:	4698      	mov	r8, r3
 8002924:	4691      	mov	r9, r2
 8002926:	f04f 0200 	mov.w	r2, #0
 800292a:	f04f 0300 	mov.w	r3, #0
 800292e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002932:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002936:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800293a:	b28b      	uxth	r3, r1
 800293c:	2200      	movs	r2, #0
 800293e:	461c      	mov	r4, r3
 8002940:	4615      	mov	r5, r2
 8002942:	f04f 0200 	mov.w	r2, #0
 8002946:	f04f 0300 	mov.w	r3, #0
 800294a:	00eb      	lsls	r3, r5, #3
 800294c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002950:	00e2      	lsls	r2, r4, #3
 8002952:	460b      	mov	r3, r1
 8002954:	3307      	adds	r3, #7
 8002956:	08db      	lsrs	r3, r3, #3
 8002958:	00db      	lsls	r3, r3, #3
 800295a:	ebad 0d03 	sub.w	sp, sp, r3
 800295e:	ab02      	add	r3, sp, #8
 8002960:	3300      	adds	r3, #0
 8002962:	617b      	str	r3, [r7, #20]
	uint16_t contentlen = getAfterword(SMSbuffer, SMS_bufferlen, (uint8_t*)"+CMGL:", contentbuffer);
 8002964:	8879      	ldrh	r1, [r7, #2]
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	4a16      	ldr	r2, [pc, #88]	; (80029c4 <SMS_getindex+0xc0>)
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f7ff ff66 	bl	800283c <getAfterword>
 8002970:	4603      	mov	r3, r0
 8002972:	83fb      	strh	r3, [r7, #30]
	if (!contentlen) {
 8002974:	8bfb      	ldrh	r3, [r7, #30]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d107      	bne.n	800298a <SMS_getindex+0x86>
		contentlen = getAfterword(SMSbuffer, SMS_bufferlen, (uint8_t*)"+CMGR:", contentbuffer);
 800297a:	8879      	ldrh	r1, [r7, #2]
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	4a12      	ldr	r2, [pc, #72]	; (80029c8 <SMS_getindex+0xc4>)
 8002980:	6878      	ldr	r0, [r7, #4]
 8002982:	f7ff ff5b 	bl	800283c <getAfterword>
 8002986:	4603      	mov	r3, r0
 8002988:	83fb      	strh	r3, [r7, #30]
	}
	if (!contentlen) return 0;
 800298a:	8bfb      	ldrh	r3, [r7, #30]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d101      	bne.n	8002994 <SMS_getindex+0x90>
 8002990:	2300      	movs	r3, #0
 8002992:	e010      	b.n	80029b6 <SMS_getindex+0xb2>

	uint8_t indexbuffer[10];
	getBetween((uint8_t*)" ", (uint8_t*)",", contentbuffer, contentlen, indexbuffer);
 8002994:	8bfa      	ldrh	r2, [r7, #30]
 8002996:	f107 0308 	add.w	r3, r7, #8
 800299a:	9300      	str	r3, [sp, #0]
 800299c:	4613      	mov	r3, r2
 800299e:	697a      	ldr	r2, [r7, #20]
 80029a0:	490a      	ldr	r1, [pc, #40]	; (80029cc <SMS_getindex+0xc8>)
 80029a2:	480b      	ldr	r0, [pc, #44]	; (80029d0 <SMS_getindex+0xcc>)
 80029a4:	f002 fc6c 	bl	8005280 <getBetween>
	return atoi((char*)indexbuffer);
 80029a8:	f107 0308 	add.w	r3, r7, #8
 80029ac:	4618      	mov	r0, r3
 80029ae:	f009 faed 	bl	800bf8c <atoi>
 80029b2:	4603      	mov	r3, r0
 80029b4:	b29b      	uxth	r3, r3
 80029b6:	46b5      	mov	sp, r6
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3724      	adds	r7, #36	; 0x24
 80029bc:	46bd      	mov	sp, r7
 80029be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80029c2:	bf00      	nop
 80029c4:	0800f014 	.word	0x0800f014
 80029c8:	0800ef50 	.word	0x0800ef50
 80029cc:	0800f01c 	.word	0x0800f01c
 80029d0:	0800f020 	.word	0x0800f020

080029d4 <SMS_getPhonenumb>:

uint8_t SMS_getPhonenumb (uint8_t *SMSbuffer, uint16_t SMS_bufferlen, uint8_t *Phonenumb_buffer )
{
 80029d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80029d8:	b08b      	sub	sp, #44	; 0x2c
 80029da:	af02      	add	r7, sp, #8
 80029dc:	60f8      	str	r0, [r7, #12]
 80029de:	460b      	mov	r3, r1
 80029e0:	607a      	str	r2, [r7, #4]
 80029e2:	817b      	strh	r3, [r7, #10]
 80029e4:	466b      	mov	r3, sp
 80029e6:	461e      	mov	r6, r3
	uint8_t contentbuffer[SMS_bufferlen];
 80029e8:	8979      	ldrh	r1, [r7, #10]
 80029ea:	460b      	mov	r3, r1
 80029ec:	3b01      	subs	r3, #1
 80029ee:	61bb      	str	r3, [r7, #24]
 80029f0:	b28b      	uxth	r3, r1
 80029f2:	2200      	movs	r2, #0
 80029f4:	4698      	mov	r8, r3
 80029f6:	4691      	mov	r9, r2
 80029f8:	f04f 0200 	mov.w	r2, #0
 80029fc:	f04f 0300 	mov.w	r3, #0
 8002a00:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a04:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a08:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a0c:	b28b      	uxth	r3, r1
 8002a0e:	2200      	movs	r2, #0
 8002a10:	461c      	mov	r4, r3
 8002a12:	4615      	mov	r5, r2
 8002a14:	f04f 0200 	mov.w	r2, #0
 8002a18:	f04f 0300 	mov.w	r3, #0
 8002a1c:	00eb      	lsls	r3, r5, #3
 8002a1e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a22:	00e2      	lsls	r2, r4, #3
 8002a24:	460b      	mov	r3, r1
 8002a26:	3307      	adds	r3, #7
 8002a28:	08db      	lsrs	r3, r3, #3
 8002a2a:	00db      	lsls	r3, r3, #3
 8002a2c:	ebad 0d03 	sub.w	sp, sp, r3
 8002a30:	ab02      	add	r3, sp, #8
 8002a32:	3300      	adds	r3, #0
 8002a34:	617b      	str	r3, [r7, #20]
	uint16_t contentlen = getAfterword(SMSbuffer, SMS_bufferlen, (uint8_t*)"+CMGL: ", contentbuffer);
 8002a36:	8979      	ldrh	r1, [r7, #10]
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	4a13      	ldr	r2, [pc, #76]	; (8002a88 <SMS_getPhonenumb+0xb4>)
 8002a3c:	68f8      	ldr	r0, [r7, #12]
 8002a3e:	f7ff fefd 	bl	800283c <getAfterword>
 8002a42:	4603      	mov	r3, r0
 8002a44:	83fb      	strh	r3, [r7, #30]
	if (!contentlen) {
 8002a46:	8bfb      	ldrh	r3, [r7, #30]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d107      	bne.n	8002a5c <SMS_getPhonenumb+0x88>
		contentlen = getAfterword(SMSbuffer, SMS_bufferlen, (uint8_t*)"+CMGR: ", contentbuffer);
 8002a4c:	8979      	ldrh	r1, [r7, #10]
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	4a0e      	ldr	r2, [pc, #56]	; (8002a8c <SMS_getPhonenumb+0xb8>)
 8002a52:	68f8      	ldr	r0, [r7, #12]
 8002a54:	f7ff fef2 	bl	800283c <getAfterword>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	83fb      	strh	r3, [r7, #30]
	}
	if (!contentlen) return 0;
 8002a5c:	8bfb      	ldrh	r3, [r7, #30]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d101      	bne.n	8002a66 <SMS_getPhonenumb+0x92>
 8002a62:	2300      	movs	r3, #0
 8002a64:	e00a      	b.n	8002a7c <SMS_getPhonenumb+0xa8>
//		currPOS = isWordinBuff(contentbuffer, contentlen, (uint8_t*)",");
//		if ( currPOS == NULL ) return	0;
//		remainlen = getRemainsize(currPOS, contentbuffer, contentlen);
//		currPOS++;
//	}
	return getBetween((uint8_t*)"+", (uint8_t*)"\"", contentbuffer, contentlen, Phonenumb_buffer);
 8002a66:	8bfa      	ldrh	r2, [r7, #30]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	9300      	str	r3, [sp, #0]
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	697a      	ldr	r2, [r7, #20]
 8002a70:	4907      	ldr	r1, [pc, #28]	; (8002a90 <SMS_getPhonenumb+0xbc>)
 8002a72:	4808      	ldr	r0, [pc, #32]	; (8002a94 <SMS_getPhonenumb+0xc0>)
 8002a74:	f002 fc04 	bl	8005280 <getBetween>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	46b5      	mov	sp, r6
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3724      	adds	r7, #36	; 0x24
 8002a82:	46bd      	mov	sp, r7
 8002a84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002a88:	0800ef58 	.word	0x0800ef58
 8002a8c:	0800f024 	.word	0x0800f024
 8002a90:	0800f02c 	.word	0x0800f02c
 8002a94:	0800f030 	.word	0x0800f030

08002a98 <SMS_getContent>:

uint16_t SMS_getContent (uint8_t *SMSbuffer, uint16_t SMS_bufferlen, uint8_t *Content_buffer )
{
 8002a98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002a9c:	b08b      	sub	sp, #44	; 0x2c
 8002a9e:	af02      	add	r7, sp, #8
 8002aa0:	60f8      	str	r0, [r7, #12]
 8002aa2:	460b      	mov	r3, r1
 8002aa4:	607a      	str	r2, [r7, #4]
 8002aa6:	817b      	strh	r3, [r7, #10]
 8002aa8:	466b      	mov	r3, sp
 8002aaa:	461e      	mov	r6, r3
	uint8_t contentbuffer[SMS_bufferlen];
 8002aac:	8979      	ldrh	r1, [r7, #10]
 8002aae:	460b      	mov	r3, r1
 8002ab0:	3b01      	subs	r3, #1
 8002ab2:	61bb      	str	r3, [r7, #24]
 8002ab4:	b28b      	uxth	r3, r1
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	4698      	mov	r8, r3
 8002aba:	4691      	mov	r9, r2
 8002abc:	f04f 0200 	mov.w	r2, #0
 8002ac0:	f04f 0300 	mov.w	r3, #0
 8002ac4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ac8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002acc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002ad0:	b28b      	uxth	r3, r1
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	461c      	mov	r4, r3
 8002ad6:	4615      	mov	r5, r2
 8002ad8:	f04f 0200 	mov.w	r2, #0
 8002adc:	f04f 0300 	mov.w	r3, #0
 8002ae0:	00eb      	lsls	r3, r5, #3
 8002ae2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ae6:	00e2      	lsls	r2, r4, #3
 8002ae8:	460b      	mov	r3, r1
 8002aea:	3307      	adds	r3, #7
 8002aec:	08db      	lsrs	r3, r3, #3
 8002aee:	00db      	lsls	r3, r3, #3
 8002af0:	ebad 0d03 	sub.w	sp, sp, r3
 8002af4:	ab02      	add	r3, sp, #8
 8002af6:	3300      	adds	r3, #0
 8002af8:	617b      	str	r3, [r7, #20]
	uint16_t contentlen = getAfterword(SMSbuffer, SMS_bufferlen, (uint8_t*)"+CMGL: ", contentbuffer);
 8002afa:	8979      	ldrh	r1, [r7, #10]
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	4a13      	ldr	r2, [pc, #76]	; (8002b4c <SMS_getContent+0xb4>)
 8002b00:	68f8      	ldr	r0, [r7, #12]
 8002b02:	f7ff fe9b 	bl	800283c <getAfterword>
 8002b06:	4603      	mov	r3, r0
 8002b08:	83fb      	strh	r3, [r7, #30]
	if (!contentlen) {
 8002b0a:	8bfb      	ldrh	r3, [r7, #30]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d107      	bne.n	8002b20 <SMS_getContent+0x88>
		contentlen = getAfterword(SMSbuffer, SMS_bufferlen, (uint8_t*)"+CMGR: ", contentbuffer);
 8002b10:	8979      	ldrh	r1, [r7, #10]
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	4a0e      	ldr	r2, [pc, #56]	; (8002b50 <SMS_getContent+0xb8>)
 8002b16:	68f8      	ldr	r0, [r7, #12]
 8002b18:	f7ff fe90 	bl	800283c <getAfterword>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	83fb      	strh	r3, [r7, #30]
	}
	if (!contentlen) return 0;
 8002b20:	8bfb      	ldrh	r3, [r7, #30]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d101      	bne.n	8002b2a <SMS_getContent+0x92>
 8002b26:	2300      	movs	r3, #0
 8002b28:	e009      	b.n	8002b3e <SMS_getContent+0xa6>

	return getBetween((uint8_t*)"\n", (uint8_t*)"\r", contentbuffer, contentlen, Content_buffer);
 8002b2a:	8bfa      	ldrh	r2, [r7, #30]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	9300      	str	r3, [sp, #0]
 8002b30:	4613      	mov	r3, r2
 8002b32:	697a      	ldr	r2, [r7, #20]
 8002b34:	4907      	ldr	r1, [pc, #28]	; (8002b54 <SMS_getContent+0xbc>)
 8002b36:	4808      	ldr	r0, [pc, #32]	; (8002b58 <SMS_getContent+0xc0>)
 8002b38:	f002 fba2 	bl	8005280 <getBetween>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	46b5      	mov	sp, r6
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3724      	adds	r7, #36	; 0x24
 8002b44:	46bd      	mov	sp, r7
 8002b46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002b4a:	bf00      	nop
 8002b4c:	0800ef58 	.word	0x0800ef58
 8002b50:	0800f024 	.word	0x0800f024
 8002b54:	0800f034 	.word	0x0800f034
 8002b58:	0800f038 	.word	0x0800f038

08002b5c <SMSaddData>:




uint8_t SMSaddData(SMS_CMD_t smsCMD, uint8_t *contentbuffer, uint16_t contentlen, uint8_t *phonenumb)
{
 8002b5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002b60:	b093      	sub	sp, #76	; 0x4c
 8002b62:	af02      	add	r7, sp, #8
 8002b64:	60b9      	str	r1, [r7, #8]
 8002b66:	607b      	str	r3, [r7, #4]
 8002b68:	4603      	mov	r3, r0
 8002b6a:	73fb      	strb	r3, [r7, #15]
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	81bb      	strh	r3, [r7, #12]
 8002b70:	466b      	mov	r3, sp
 8002b72:	461e      	mov	r6, r3
	uint8_t *currPOS;
	uint16_t remainlen;
	uint8_t IDbuffer[contentlen];
 8002b74:	89b9      	ldrh	r1, [r7, #12]
 8002b76:	460b      	mov	r3, r1
 8002b78:	3b01      	subs	r3, #1
 8002b7a:	627b      	str	r3, [r7, #36]	; 0x24
 8002b7c:	b28b      	uxth	r3, r1
 8002b7e:	2200      	movs	r2, #0
 8002b80:	4698      	mov	r8, r3
 8002b82:	4691      	mov	r9, r2
 8002b84:	f04f 0200 	mov.w	r2, #0
 8002b88:	f04f 0300 	mov.w	r3, #0
 8002b8c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b90:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b94:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b98:	b28b      	uxth	r3, r1
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	461c      	mov	r4, r3
 8002b9e:	4615      	mov	r5, r2
 8002ba0:	f04f 0200 	mov.w	r2, #0
 8002ba4:	f04f 0300 	mov.w	r3, #0
 8002ba8:	00eb      	lsls	r3, r5, #3
 8002baa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002bae:	00e2      	lsls	r2, r4, #3
 8002bb0:	460b      	mov	r3, r1
 8002bb2:	3307      	adds	r3, #7
 8002bb4:	08db      	lsrs	r3, r3, #3
 8002bb6:	00db      	lsls	r3, r3, #3
 8002bb8:	ebad 0d03 	sub.w	sp, sp, r3
 8002bbc:	ab02      	add	r3, sp, #8
 8002bbe:	3300      	adds	r3, #0
 8002bc0:	623b      	str	r3, [r7, #32]
	uint8_t Timebuffer[10];
	uint16_t time_delay;
	uint16_t datalen = 0;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	877b      	strh	r3, [r7, #58]	; 0x3a
	uint8_t phonenumblen = strlen((char*)phonenumb);
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f7fd fac0 	bl	800014c <strlen>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	77fb      	strb	r3, [r7, #31]

	uint8_t *Detect_msgType;
	SMS_request_t *Detect_Request;
	uint8_t getIDflag = 0;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t getTimeflag = 0;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint8_t getSflag = 0;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	ID_t idtype = ID_STATION;
 8002be2:	2301      	movs	r3, #1
 8002be4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	switch (smsCMD)	{
 8002be8:	7bfb      	ldrb	r3, [r7, #15]
 8002bea:	2b07      	cmp	r3, #7
 8002bec:	d864      	bhi.n	8002cb8 <SMSaddData+0x15c>
 8002bee:	a201      	add	r2, pc, #4	; (adr r2, 8002bf4 <SMSaddData+0x98>)
 8002bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bf4:	08002c15 	.word	0x08002c15
 8002bf8:	08002c2b 	.word	0x08002c2b
 8002bfc:	08002c6d 	.word	0x08002c6d
 8002c00:	08002c57 	.word	0x08002c57
 8002c04:	08002c41 	.word	0x08002c41
 8002c08:	08002c7d 	.word	0x08002c7d
 8002c0c:	08002c9d 	.word	0x08002c9d
 8002c10:	08002c87 	.word	0x08002c87
		case SMS_CMD_CTRL_ON:
			Detect_msgType = (uint8_t*)SMS_MSG_CTRL_ON;
 8002c14:	4b75      	ldr	r3, [pc, #468]	; (8002dec <SMSaddData+0x290>)
 8002c16:	63fb      	str	r3, [r7, #60]	; 0x3c
			Detect_Request = &mySIM.sms.CtrlON;
 8002c18:	4b75      	ldr	r3, [pc, #468]	; (8002df0 <SMSaddData+0x294>)
 8002c1a:	633b      	str	r3, [r7, #48]	; 0x30
			getIDflag = 1;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			getTimeflag = 1;
 8002c22:	2301      	movs	r3, #1
 8002c24:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			break;
 8002c28:	e047      	b.n	8002cba <SMSaddData+0x15e>
		case SMS_CMD_CTRL_OFF:
			Detect_msgType = (uint8_t*)SMS_MSG_CTRL_OFF;
 8002c2a:	4b72      	ldr	r3, [pc, #456]	; (8002df4 <SMSaddData+0x298>)
 8002c2c:	63fb      	str	r3, [r7, #60]	; 0x3c
			Detect_Request = &mySIM.sms.CtrlOFF;
 8002c2e:	4b72      	ldr	r3, [pc, #456]	; (8002df8 <SMSaddData+0x29c>)
 8002c30:	633b      	str	r3, [r7, #48]	; 0x30
			getIDflag = 1;
 8002c32:	2301      	movs	r3, #1
 8002c34:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			getTimeflag = 1;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			break;
 8002c3e:	e03c      	b.n	8002cba <SMSaddData+0x15e>
		case SMS_CMD_CTRL_DEC:
			Detect_msgType = (uint8_t*)SMS_MSG_CTRL_DEC;
 8002c40:	4b6e      	ldr	r3, [pc, #440]	; (8002dfc <SMSaddData+0x2a0>)
 8002c42:	63fb      	str	r3, [r7, #60]	; 0x3c
			Detect_Request = &mySIM.sms.CtrlDEC;
 8002c44:	4b6e      	ldr	r3, [pc, #440]	; (8002e00 <SMSaddData+0x2a4>)
 8002c46:	633b      	str	r3, [r7, #48]	; 0x30
			getIDflag = 1;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			getTimeflag = 1;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			break;
 8002c54:	e031      	b.n	8002cba <SMSaddData+0x15e>
		case SMS_CMD_CTRL_INC:
			Detect_msgType = (uint8_t*)SMS_MSG_CTRL_INC;
 8002c56:	4b6b      	ldr	r3, [pc, #428]	; (8002e04 <SMSaddData+0x2a8>)
 8002c58:	63fb      	str	r3, [r7, #60]	; 0x3c
			Detect_Request = &mySIM.sms.CtrlINC;
 8002c5a:	4b6b      	ldr	r3, [pc, #428]	; (8002e08 <SMSaddData+0x2ac>)
 8002c5c:	633b      	str	r3, [r7, #48]	; 0x30
			getIDflag = 1;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			getTimeflag = 1;
 8002c64:	2301      	movs	r3, #1
 8002c66:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			break;
 8002c6a:	e026      	b.n	8002cba <SMSaddData+0x15e>
		case SMS_CMD_CTRL_CALIB:
			Detect_msgType = (uint8_t*)SMS_MSG_CTRL_CALIB;
 8002c6c:	4b67      	ldr	r3, [pc, #412]	; (8002e0c <SMSaddData+0x2b0>)
 8002c6e:	63fb      	str	r3, [r7, #60]	; 0x3c
			Detect_Request = &mySIM.sms.CtrlCALIB;
 8002c70:	4b67      	ldr	r3, [pc, #412]	; (8002e10 <SMSaddData+0x2b4>)
 8002c72:	633b      	str	r3, [r7, #48]	; 0x30
			getTimeflag = 1;
 8002c74:	2301      	movs	r3, #1
 8002c76:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			break;
 8002c7a:	e01e      	b.n	8002cba <SMSaddData+0x15e>
		case SMS_CMD_GET_STATUS:
			Detect_msgType = (uint8_t*)SMS_MSG_GET_STATUS;
 8002c7c:	4b65      	ldr	r3, [pc, #404]	; (8002e14 <SMSaddData+0x2b8>)
 8002c7e:	63fb      	str	r3, [r7, #60]	; 0x3c
			Detect_Request = &mySIM.sms.GetStatus;
 8002c80:	4b65      	ldr	r3, [pc, #404]	; (8002e18 <SMSaddData+0x2bc>)
 8002c82:	633b      	str	r3, [r7, #48]	; 0x30
			break;
 8002c84:	e019      	b.n	8002cba <SMSaddData+0x15e>
		case SMS_CMD_GET_STATION:
			Detect_msgType = (uint8_t*)SMS_MSG_GET_STATION;
 8002c86:	4b65      	ldr	r3, [pc, #404]	; (8002e1c <SMSaddData+0x2c0>)
 8002c88:	63fb      	str	r3, [r7, #60]	; 0x3c
			Detect_Request = &mySIM.sms.GetStation;
 8002c8a:	4b65      	ldr	r3, [pc, #404]	; (8002e20 <SMSaddData+0x2c4>)
 8002c8c:	633b      	str	r3, [r7, #48]	; 0x30
			getIDflag = 1;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			getSflag = 1;
 8002c94:	2301      	movs	r3, #1
 8002c96:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			break;
 8002c9a:	e00e      	b.n	8002cba <SMSaddData+0x15e>
		case SMS_CMD_GET_SENSOR:
			Detect_msgType = (uint8_t*)SMS_MSG_GET_SENSOR;
 8002c9c:	4b61      	ldr	r3, [pc, #388]	; (8002e24 <SMSaddData+0x2c8>)
 8002c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
			Detect_Request = &mySIM.sms.GetSensor;
 8002ca0:	4b61      	ldr	r3, [pc, #388]	; (8002e28 <SMSaddData+0x2cc>)
 8002ca2:	633b      	str	r3, [r7, #48]	; 0x30
			getIDflag = 1;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			getSflag = 1;
 8002caa:	2301      	movs	r3, #1
 8002cac:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			idtype = ID_SENSOR;
 8002cb0:	2302      	movs	r3, #2
 8002cb2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
			break;
 8002cb6:	e000      	b.n	8002cba <SMSaddData+0x15e>
		default:
			break;
 8002cb8:	bf00      	nop
		}
	if (Detect_msgType == NULL)	return 0;
 8002cba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d101      	bne.n	8002cc4 <SMSaddData+0x168>
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	e08c      	b.n	8002dde <SMSaddData+0x282>

	currPOS = isWordinBuff(contentbuffer, contentlen, (uint8_t*)Detect_msgType);
 8002cc4:	89bb      	ldrh	r3, [r7, #12]
 8002cc6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002cc8:	4619      	mov	r1, r3
 8002cca:	68b8      	ldr	r0, [r7, #8]
 8002ccc:	f002 faac 	bl	8005228 <isWordinBuff>
 8002cd0:	6378      	str	r0, [r7, #52]	; 0x34
	if (currPOS == NULL) 	return 0;
 8002cd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d101      	bne.n	8002cdc <SMSaddData+0x180>
 8002cd8:	2300      	movs	r3, #0
 8002cda:	e080      	b.n	8002dde <SMSaddData+0x282>

	remainlen = getRemainsize(currPOS, contentbuffer, contentlen);
 8002cdc:	89bb      	ldrh	r3, [r7, #12]
 8002cde:	461a      	mov	r2, r3
 8002ce0:	68b9      	ldr	r1, [r7, #8]
 8002ce2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002ce4:	f002 fb1f 	bl	8005326 <getRemainsize>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	873b      	strh	r3, [r7, #56]	; 0x38

	/* Get ID list */
	if (getIDflag)	{
 8002cec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d039      	beq.n	8002d68 <SMSaddData+0x20c>
		uint8_t tmplen;
		if (getSflag)	{
 8002cf4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d00c      	beq.n	8002d16 <SMSaddData+0x1ba>
			tmplen = getBetween((uint8_t*)":", (uint8_t*)";", currPOS, remainlen, IDbuffer);
 8002cfc:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8002cfe:	6a3b      	ldr	r3, [r7, #32]
 8002d00:	9300      	str	r3, [sp, #0]
 8002d02:	4613      	mov	r3, r2
 8002d04:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d06:	4949      	ldr	r1, [pc, #292]	; (8002e2c <SMSaddData+0x2d0>)
 8002d08:	4849      	ldr	r0, [pc, #292]	; (8002e30 <SMSaddData+0x2d4>)
 8002d0a:	f002 fab9 	bl	8005280 <getBetween>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002d14:	e00b      	b.n	8002d2e <SMSaddData+0x1d2>
		}
		else {
			tmplen = getBetween((uint8_t*)":", (uint8_t*)":", currPOS, remainlen, IDbuffer);
 8002d16:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8002d18:	6a3b      	ldr	r3, [r7, #32]
 8002d1a:	9300      	str	r3, [sp, #0]
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d20:	4943      	ldr	r1, [pc, #268]	; (8002e30 <SMSaddData+0x2d4>)
 8002d22:	4843      	ldr	r0, [pc, #268]	; (8002e30 <SMSaddData+0x2d4>)
 8002d24:	f002 faac 	bl	8005280 <getBetween>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		}
		currPOS += strlen((char*)Detect_msgType) + tmplen + 1;
 8002d2e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002d30:	f7fd fa0c 	bl	800014c <strlen>
 8002d34:	4602      	mov	r2, r0
 8002d36:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002d3a:	4413      	add	r3, r2
 8002d3c:	3301      	adds	r3, #1
 8002d3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d40:	4413      	add	r3, r2
 8002d42:	637b      	str	r3, [r7, #52]	; 0x34
		remainlen = getRemainsize(currPOS, contentbuffer, contentlen);
 8002d44:	89bb      	ldrh	r3, [r7, #12]
 8002d46:	461a      	mov	r2, r3
 8002d48:	68b9      	ldr	r1, [r7, #8]
 8002d4a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002d4c:	f002 faeb 	bl	8005326 <getRemainsize>
 8002d50:	4603      	mov	r3, r0
 8002d52:	873b      	strh	r3, [r7, #56]	; 0x38
		datalen = stringIDtoHexID(IDbuffer, Detect_Request->data, ",", idtype);
 8002d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d56:	1d19      	adds	r1, r3, #4
 8002d58:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002d5c:	4a35      	ldr	r2, [pc, #212]	; (8002e34 <SMSaddData+0x2d8>)
 8002d5e:	6a38      	ldr	r0, [r7, #32]
 8002d60:	f7ff fd9c 	bl	800289c <stringIDtoHexID>
 8002d64:	4603      	mov	r3, r0
 8002d66:	877b      	strh	r3, [r7, #58]	; 0x3a
	}

	/* Get time delay*/
	if (getTimeflag)	{
 8002d68:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d01c      	beq.n	8002daa <SMSaddData+0x24e>
		getBetween((uint8_t*)":", (uint8_t*)";", currPOS, remainlen, Timebuffer);
 8002d70:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8002d72:	f107 0310 	add.w	r3, r7, #16
 8002d76:	9300      	str	r3, [sp, #0]
 8002d78:	4613      	mov	r3, r2
 8002d7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d7c:	492b      	ldr	r1, [pc, #172]	; (8002e2c <SMSaddData+0x2d0>)
 8002d7e:	482c      	ldr	r0, [pc, #176]	; (8002e30 <SMSaddData+0x2d4>)
 8002d80:	f002 fa7e 	bl	8005280 <getBetween>
		time_delay = atoi((char*)Timebuffer);
 8002d84:	f107 0310 	add.w	r3, r7, #16
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f009 f8ff 	bl	800bf8c <atoi>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	83bb      	strh	r3, [r7, #28]
		twobyte2buff(Detect_Request->data +datalen, time_delay);
 8002d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d94:	1d1a      	adds	r2, r3, #4
 8002d96:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8002d98:	4413      	add	r3, r2
 8002d9a:	8bba      	ldrh	r2, [r7, #28]
 8002d9c:	4611      	mov	r1, r2
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f002 fad4 	bl	800534c <twobyte2buff>
		datalen += 2;
 8002da4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8002da6:	3302      	adds	r3, #2
 8002da8:	877b      	strh	r3, [r7, #58]	; 0x3a
	}
	memcpy(Detect_Request->phonenumb, phonenumb, phonenumblen);
 8002daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dac:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8002db0:	7ffa      	ldrb	r2, [r7, #31]
 8002db2:	6879      	ldr	r1, [r7, #4]
 8002db4:	4618      	mov	r0, r3
 8002db6:	f009 fa47 	bl	800c248 <memcpy>
	memcpy(Detect_Request->data + datalen, phonenumb, phonenumblen);
 8002dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dbc:	1d1a      	adds	r2, r3, #4
 8002dbe:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8002dc0:	4413      	add	r3, r2
 8002dc2:	7ffa      	ldrb	r2, [r7, #31]
 8002dc4:	6879      	ldr	r1, [r7, #4]
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f009 fa3e 	bl	800c248 <memcpy>
	datalen += phonenumblen;
 8002dcc:	7ffb      	ldrb	r3, [r7, #31]
 8002dce:	b29a      	uxth	r2, r3
 8002dd0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8002dd2:	4413      	add	r3, r2
 8002dd4:	877b      	strh	r3, [r7, #58]	; 0x3a
	Detect_Request->datalength = datalen;
 8002dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dd8:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8002dda:	805a      	strh	r2, [r3, #2]
	return 1;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	46b5      	mov	sp, r6
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3744      	adds	r7, #68	; 0x44
 8002de4:	46bd      	mov	sp, r7
 8002de6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002dea:	bf00      	nop
 8002dec:	0800f03c 	.word	0x0800f03c
 8002df0:	200018d8 	.word	0x200018d8
 8002df4:	0800f044 	.word	0x0800f044
 8002df8:	200019ea 	.word	0x200019ea
 8002dfc:	0800f050 	.word	0x0800f050
 8002e00:	20001d20 	.word	0x20001d20
 8002e04:	0800f05c 	.word	0x0800f05c
 8002e08:	20001c0e 	.word	0x20001c0e
 8002e0c:	0800f068 	.word	0x0800f068
 8002e10:	20001afc 	.word	0x20001afc
 8002e14:	0800f074 	.word	0x0800f074
 8002e18:	20001e32 	.word	0x20001e32
 8002e1c:	0800f084 	.word	0x0800f084
 8002e20:	20002056 	.word	0x20002056
 8002e24:	0800f090 	.word	0x0800f090
 8002e28:	20001f44 	.word	0x20001f44
 8002e2c:	0800f09c 	.word	0x0800f09c
 8002e30:	0800f0a0 	.word	0x0800f0a0
 8002e34:	0800f01c 	.word	0x0800f01c

08002e38 <SMS_checkCMD>:
static uint8_t SMS_checkCMD(uint8_t *contentbuffer, uint16_t contentlen, uint8_t *phonenumb)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b086      	sub	sp, #24
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	60f8      	str	r0, [r7, #12]
 8002e40:	460b      	mov	r3, r1
 8002e42:	607a      	str	r2, [r7, #4]
 8002e44:	817b      	strh	r3, [r7, #10]
	uint8_t *currPOS;

	currPOS = isWordinBuff(contentbuffer, contentlen, (uint8_t*)SMS_MSG_CTRL_ON);
 8002e46:	897b      	ldrh	r3, [r7, #10]
 8002e48:	4a8b      	ldr	r2, [pc, #556]	; (8003078 <SMS_checkCMD+0x240>)
 8002e4a:	4619      	mov	r1, r3
 8002e4c:	68f8      	ldr	r0, [r7, #12]
 8002e4e:	f002 f9eb 	bl	8005228 <isWordinBuff>
 8002e52:	6178      	str	r0, [r7, #20]
	if (currPOS != NULL) 	{
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d018      	beq.n	8002e8c <SMS_checkCMD+0x54>
		if (checkSMSrequest(SMS_CMD_CTRL_ON)) return 2;
 8002e5a:	2000      	movs	r0, #0
 8002e5c:	f000 fa1a 	bl	8003294 <checkSMSrequest>
 8002e60:	4603      	mov	r3, r0
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d001      	beq.n	8002e6a <SMS_checkCMD+0x32>
 8002e66:	2302      	movs	r3, #2
 8002e68:	e101      	b.n	800306e <SMS_checkCMD+0x236>
		if ( !SMSaddData(SMS_CMD_CTRL_ON, contentbuffer, contentlen, phonenumb) ) return 0;
 8002e6a:	897a      	ldrh	r2, [r7, #10]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	68f9      	ldr	r1, [r7, #12]
 8002e70:	2000      	movs	r0, #0
 8002e72:	f7ff fe73 	bl	8002b5c <SMSaddData>
 8002e76:	4603      	mov	r3, r0
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d101      	bne.n	8002e80 <SMS_checkCMD+0x48>
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	e0f6      	b.n	800306e <SMS_checkCMD+0x236>
		// Trigger cmd flag
		triggerSMSrequest(SMS_CMD_CTRL_ON, FLAG_EN);
 8002e80:	2101      	movs	r1, #1
 8002e82:	2000      	movs	r0, #0
 8002e84:	f000 fa8e 	bl	80033a4 <triggerSMSrequest>
		return 1;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e0f0      	b.n	800306e <SMS_checkCMD+0x236>
	}

	currPOS = isWordinBuff(contentbuffer, contentlen, (uint8_t*)SMS_MSG_CTRL_OFF);
 8002e8c:	897b      	ldrh	r3, [r7, #10]
 8002e8e:	4a7b      	ldr	r2, [pc, #492]	; (800307c <SMS_checkCMD+0x244>)
 8002e90:	4619      	mov	r1, r3
 8002e92:	68f8      	ldr	r0, [r7, #12]
 8002e94:	f002 f9c8 	bl	8005228 <isWordinBuff>
 8002e98:	6178      	str	r0, [r7, #20]
	if (currPOS != NULL) 	{
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d018      	beq.n	8002ed2 <SMS_checkCMD+0x9a>
		if (checkSMSrequest(SMS_CMD_CTRL_OFF)) return 2;
 8002ea0:	2001      	movs	r0, #1
 8002ea2:	f000 f9f7 	bl	8003294 <checkSMSrequest>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d001      	beq.n	8002eb0 <SMS_checkCMD+0x78>
 8002eac:	2302      	movs	r3, #2
 8002eae:	e0de      	b.n	800306e <SMS_checkCMD+0x236>
		if ( !SMSaddData(SMS_CMD_CTRL_OFF, contentbuffer, contentlen, phonenumb) )	return 0;
 8002eb0:	897a      	ldrh	r2, [r7, #10]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	68f9      	ldr	r1, [r7, #12]
 8002eb6:	2001      	movs	r0, #1
 8002eb8:	f7ff fe50 	bl	8002b5c <SMSaddData>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d101      	bne.n	8002ec6 <SMS_checkCMD+0x8e>
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	e0d3      	b.n	800306e <SMS_checkCMD+0x236>
		// Trigger cmd flag
		triggerSMSrequest(SMS_CMD_CTRL_OFF, FLAG_EN);
 8002ec6:	2101      	movs	r1, #1
 8002ec8:	2001      	movs	r0, #1
 8002eca:	f000 fa6b 	bl	80033a4 <triggerSMSrequest>
		return 1;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e0cd      	b.n	800306e <SMS_checkCMD+0x236>
	}

	currPOS = isWordinBuff(contentbuffer, contentlen, (uint8_t*)SMS_MSG_CTRL_DEC);
 8002ed2:	897b      	ldrh	r3, [r7, #10]
 8002ed4:	4a6a      	ldr	r2, [pc, #424]	; (8003080 <SMS_checkCMD+0x248>)
 8002ed6:	4619      	mov	r1, r3
 8002ed8:	68f8      	ldr	r0, [r7, #12]
 8002eda:	f002 f9a5 	bl	8005228 <isWordinBuff>
 8002ede:	6178      	str	r0, [r7, #20]
	if (currPOS != NULL) 	{
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d018      	beq.n	8002f18 <SMS_checkCMD+0xe0>
		if (checkSMSrequest(SMS_CMD_CTRL_DEC)) return 2;
 8002ee6:	2004      	movs	r0, #4
 8002ee8:	f000 f9d4 	bl	8003294 <checkSMSrequest>
 8002eec:	4603      	mov	r3, r0
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d001      	beq.n	8002ef6 <SMS_checkCMD+0xbe>
 8002ef2:	2302      	movs	r3, #2
 8002ef4:	e0bb      	b.n	800306e <SMS_checkCMD+0x236>
		if ( !SMSaddData(SMS_CMD_CTRL_DEC, contentbuffer, contentlen, phonenumb) )	return 0;
 8002ef6:	897a      	ldrh	r2, [r7, #10]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	68f9      	ldr	r1, [r7, #12]
 8002efc:	2004      	movs	r0, #4
 8002efe:	f7ff fe2d 	bl	8002b5c <SMSaddData>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d101      	bne.n	8002f0c <SMS_checkCMD+0xd4>
 8002f08:	2300      	movs	r3, #0
 8002f0a:	e0b0      	b.n	800306e <SMS_checkCMD+0x236>
		// Trigger cmd flag
		triggerSMSrequest(SMS_CMD_CTRL_DEC, FLAG_EN);
 8002f0c:	2101      	movs	r1, #1
 8002f0e:	2004      	movs	r0, #4
 8002f10:	f000 fa48 	bl	80033a4 <triggerSMSrequest>
		return 1;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e0aa      	b.n	800306e <SMS_checkCMD+0x236>
	}

	currPOS = isWordinBuff(contentbuffer, contentlen, (uint8_t*)SMS_MSG_CTRL_INC);
 8002f18:	897b      	ldrh	r3, [r7, #10]
 8002f1a:	4a5a      	ldr	r2, [pc, #360]	; (8003084 <SMS_checkCMD+0x24c>)
 8002f1c:	4619      	mov	r1, r3
 8002f1e:	68f8      	ldr	r0, [r7, #12]
 8002f20:	f002 f982 	bl	8005228 <isWordinBuff>
 8002f24:	6178      	str	r0, [r7, #20]
	if (currPOS != NULL) 	{
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d013      	beq.n	8002f54 <SMS_checkCMD+0x11c>
		if (checkSMSrequest(SMS_CMD_CTRL_INC)) return 2;
 8002f2c:	2003      	movs	r0, #3
 8002f2e:	f000 f9b1 	bl	8003294 <checkSMSrequest>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d001      	beq.n	8002f3c <SMS_checkCMD+0x104>
 8002f38:	2302      	movs	r3, #2
 8002f3a:	e098      	b.n	800306e <SMS_checkCMD+0x236>
		SMSaddData(SMS_CMD_CTRL_INC, contentbuffer, contentlen, phonenumb);
 8002f3c:	897a      	ldrh	r2, [r7, #10]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	68f9      	ldr	r1, [r7, #12]
 8002f42:	2003      	movs	r0, #3
 8002f44:	f7ff fe0a 	bl	8002b5c <SMSaddData>
		// Trigger cmd flag
		triggerSMSrequest(SMS_CMD_CTRL_INC, FLAG_EN);
 8002f48:	2101      	movs	r1, #1
 8002f4a:	2003      	movs	r0, #3
 8002f4c:	f000 fa2a 	bl	80033a4 <triggerSMSrequest>
		return 1;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e08c      	b.n	800306e <SMS_checkCMD+0x236>
	}

	currPOS = isWordinBuff(contentbuffer, contentlen, (uint8_t*)SMS_MSG_CTRL_CALIB);
 8002f54:	897b      	ldrh	r3, [r7, #10]
 8002f56:	4a4c      	ldr	r2, [pc, #304]	; (8003088 <SMS_checkCMD+0x250>)
 8002f58:	4619      	mov	r1, r3
 8002f5a:	68f8      	ldr	r0, [r7, #12]
 8002f5c:	f002 f964 	bl	8005228 <isWordinBuff>
 8002f60:	6178      	str	r0, [r7, #20]
	if (currPOS != NULL) 	{
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d018      	beq.n	8002f9a <SMS_checkCMD+0x162>
		if (checkSMSrequest(SMS_CMD_CTRL_CALIB)) return 2;
 8002f68:	2002      	movs	r0, #2
 8002f6a:	f000 f993 	bl	8003294 <checkSMSrequest>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d001      	beq.n	8002f78 <SMS_checkCMD+0x140>
 8002f74:	2302      	movs	r3, #2
 8002f76:	e07a      	b.n	800306e <SMS_checkCMD+0x236>
		if ( !SMSaddData(SMS_CMD_CTRL_CALIB, contentbuffer, contentlen, phonenumb) )	return 0;
 8002f78:	897a      	ldrh	r2, [r7, #10]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	68f9      	ldr	r1, [r7, #12]
 8002f7e:	2002      	movs	r0, #2
 8002f80:	f7ff fdec 	bl	8002b5c <SMSaddData>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d101      	bne.n	8002f8e <SMS_checkCMD+0x156>
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	e06f      	b.n	800306e <SMS_checkCMD+0x236>
		// Trigger cmd flag
		triggerSMSrequest(SMS_CMD_CTRL_CALIB, FLAG_EN);
 8002f8e:	2101      	movs	r1, #1
 8002f90:	2002      	movs	r0, #2
 8002f92:	f000 fa07 	bl	80033a4 <triggerSMSrequest>
		return 1;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e069      	b.n	800306e <SMS_checkCMD+0x236>
	}

	currPOS = isWordinBuff(contentbuffer, contentlen, (uint8_t*)SMS_MSG_GET_STATUS);
 8002f9a:	897b      	ldrh	r3, [r7, #10]
 8002f9c:	4a3b      	ldr	r2, [pc, #236]	; (800308c <SMS_checkCMD+0x254>)
 8002f9e:	4619      	mov	r1, r3
 8002fa0:	68f8      	ldr	r0, [r7, #12]
 8002fa2:	f002 f941 	bl	8005228 <isWordinBuff>
 8002fa6:	6178      	str	r0, [r7, #20]
	if (currPOS != NULL) 	{
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d018      	beq.n	8002fe0 <SMS_checkCMD+0x1a8>
		if (checkSMSrequest(SMS_CMD_GET_STATUS)) return 2;
 8002fae:	2005      	movs	r0, #5
 8002fb0:	f000 f970 	bl	8003294 <checkSMSrequest>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d001      	beq.n	8002fbe <SMS_checkCMD+0x186>
 8002fba:	2302      	movs	r3, #2
 8002fbc:	e057      	b.n	800306e <SMS_checkCMD+0x236>
		if ( !SMSaddData(SMS_CMD_GET_STATUS, contentbuffer, contentlen, phonenumb) )	return 0;
 8002fbe:	897a      	ldrh	r2, [r7, #10]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	68f9      	ldr	r1, [r7, #12]
 8002fc4:	2005      	movs	r0, #5
 8002fc6:	f7ff fdc9 	bl	8002b5c <SMSaddData>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d101      	bne.n	8002fd4 <SMS_checkCMD+0x19c>
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	e04c      	b.n	800306e <SMS_checkCMD+0x236>
		// Trigger cmd flag
		triggerSMSrequest(SMS_CMD_GET_STATUS, FLAG_EN);
 8002fd4:	2101      	movs	r1, #1
 8002fd6:	2005      	movs	r0, #5
 8002fd8:	f000 f9e4 	bl	80033a4 <triggerSMSrequest>
//		triggerSMSreturn(SMS_CMD_GET_STATUS, FLAG_EN);
		return 1;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e046      	b.n	800306e <SMS_checkCMD+0x236>
	}

	currPOS = isWordinBuff(contentbuffer, contentlen, (uint8_t*)SMS_MSG_GET_STATION);
 8002fe0:	897b      	ldrh	r3, [r7, #10]
 8002fe2:	4a2b      	ldr	r2, [pc, #172]	; (8003090 <SMS_checkCMD+0x258>)
 8002fe4:	4619      	mov	r1, r3
 8002fe6:	68f8      	ldr	r0, [r7, #12]
 8002fe8:	f002 f91e 	bl	8005228 <isWordinBuff>
 8002fec:	6178      	str	r0, [r7, #20]
	if (currPOS != NULL) 	{
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d018      	beq.n	8003026 <SMS_checkCMD+0x1ee>
		if (checkSMSrequest(SMS_CMD_GET_STATION)) return 2;
 8002ff4:	2007      	movs	r0, #7
 8002ff6:	f000 f94d 	bl	8003294 <checkSMSrequest>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d001      	beq.n	8003004 <SMS_checkCMD+0x1cc>
 8003000:	2302      	movs	r3, #2
 8003002:	e034      	b.n	800306e <SMS_checkCMD+0x236>
		if ( !SMSaddData(SMS_CMD_GET_STATION, contentbuffer, contentlen, phonenumb) ) return 0;
 8003004:	897a      	ldrh	r2, [r7, #10]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	68f9      	ldr	r1, [r7, #12]
 800300a:	2007      	movs	r0, #7
 800300c:	f7ff fda6 	bl	8002b5c <SMSaddData>
 8003010:	4603      	mov	r3, r0
 8003012:	2b00      	cmp	r3, #0
 8003014:	d101      	bne.n	800301a <SMS_checkCMD+0x1e2>
 8003016:	2300      	movs	r3, #0
 8003018:	e029      	b.n	800306e <SMS_checkCMD+0x236>
		// Trigger cmd flag
		triggerSMSrequest(SMS_CMD_GET_STATION, FLAG_EN);
 800301a:	2101      	movs	r1, #1
 800301c:	2007      	movs	r0, #7
 800301e:	f000 f9c1 	bl	80033a4 <triggerSMSrequest>
//		triggerSMSreturn(SMS_CMD_GET_STATION, FLAG_EN);
		return 1;
 8003022:	2301      	movs	r3, #1
 8003024:	e023      	b.n	800306e <SMS_checkCMD+0x236>
	}

	currPOS = isWordinBuff(contentbuffer, contentlen, (uint8_t*)SMS_MSG_GET_SENSOR);
 8003026:	897b      	ldrh	r3, [r7, #10]
 8003028:	4a1a      	ldr	r2, [pc, #104]	; (8003094 <SMS_checkCMD+0x25c>)
 800302a:	4619      	mov	r1, r3
 800302c:	68f8      	ldr	r0, [r7, #12]
 800302e:	f002 f8fb 	bl	8005228 <isWordinBuff>
 8003032:	6178      	str	r0, [r7, #20]
	if (currPOS != NULL) 	{
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d018      	beq.n	800306c <SMS_checkCMD+0x234>
		if (checkSMSrequest(SMS_CMD_GET_SENSOR)) return 2;
 800303a:	2006      	movs	r0, #6
 800303c:	f000 f92a 	bl	8003294 <checkSMSrequest>
 8003040:	4603      	mov	r3, r0
 8003042:	2b00      	cmp	r3, #0
 8003044:	d001      	beq.n	800304a <SMS_checkCMD+0x212>
 8003046:	2302      	movs	r3, #2
 8003048:	e011      	b.n	800306e <SMS_checkCMD+0x236>
		if ( !SMSaddData(SMS_CMD_GET_SENSOR, contentbuffer, contentlen, phonenumb) ) return 0;
 800304a:	897a      	ldrh	r2, [r7, #10]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	68f9      	ldr	r1, [r7, #12]
 8003050:	2006      	movs	r0, #6
 8003052:	f7ff fd83 	bl	8002b5c <SMSaddData>
 8003056:	4603      	mov	r3, r0
 8003058:	2b00      	cmp	r3, #0
 800305a:	d101      	bne.n	8003060 <SMS_checkCMD+0x228>
 800305c:	2300      	movs	r3, #0
 800305e:	e006      	b.n	800306e <SMS_checkCMD+0x236>
		// Trigger cmd flag
		triggerSMSrequest(SMS_CMD_GET_SENSOR, FLAG_EN);
 8003060:	2101      	movs	r1, #1
 8003062:	2006      	movs	r0, #6
 8003064:	f000 f99e 	bl	80033a4 <triggerSMSrequest>
//		triggerSMSreturn(SMS_CMD_GET_SENSOR, FLAG_EN);
		return 1;
 8003068:	2301      	movs	r3, #1
 800306a:	e000      	b.n	800306e <SMS_checkCMD+0x236>
	}
	return 0;
 800306c:	2300      	movs	r3, #0
}
 800306e:	4618      	mov	r0, r3
 8003070:	3718      	adds	r7, #24
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
 8003076:	bf00      	nop
 8003078:	0800f03c 	.word	0x0800f03c
 800307c:	0800f044 	.word	0x0800f044
 8003080:	0800f050 	.word	0x0800f050
 8003084:	0800f05c 	.word	0x0800f05c
 8003088:	0800f068 	.word	0x0800f068
 800308c:	0800f074 	.word	0x0800f074
 8003090:	0800f084 	.word	0x0800f084
 8003094:	0800f090 	.word	0x0800f090

08003098 <SMS_read>:

uint8_t SMS_read()
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b082      	sub	sp, #8
 800309c:	af02      	add	r7, sp, #8
	if ( SIM_sendCMD((uint8_t*)"AT+CMGL=\"REC UNREAD\"", (uint8_t*)"OK",ENABLE_SIM_CHECKRES,
 800309e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80030a2:	9300      	str	r3, [sp, #0]
 80030a4:	2301      	movs	r3, #1
 80030a6:	2201      	movs	r2, #1
 80030a8:	4907      	ldr	r1, [pc, #28]	; (80030c8 <SMS_read+0x30>)
 80030aa:	4808      	ldr	r0, [pc, #32]	; (80030cc <SMS_read+0x34>)
 80030ac:	f7ff fb08 	bl	80026c0 <SIM_sendCMD>
 80030b0:	4603      	mov	r3, r0
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d004      	beq.n	80030c0 <SMS_read+0x28>
			ENABLE_MARKASREAD, 1000) != SIM_RES_MSG )	{
		newSMS = 0;
 80030b6:	4b06      	ldr	r3, [pc, #24]	; (80030d0 <SMS_read+0x38>)
 80030b8:	2200      	movs	r2, #0
 80030ba:	701a      	strb	r2, [r3, #0]
		return 0;
 80030bc:	2300      	movs	r3, #0
 80030be:	e000      	b.n	80030c2 <SMS_read+0x2a>
	}
	return 1;
 80030c0:	2301      	movs	r3, #1
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}
 80030c8:	0800eff8 	.word	0x0800eff8
 80030cc:	0800effc 	.word	0x0800effc
 80030d0:	20001368 	.word	0x20001368

080030d4 <SMS_readAgain>:

uint8_t SMS_readAgain(uint8_t SMSindex)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b09e      	sub	sp, #120	; 0x78
 80030d8:	af02      	add	r7, sp, #8
 80030da:	4603      	mov	r3, r0
 80030dc:	71fb      	strb	r3, [r7, #7]
	uint8_t SIM_Txbuff[100];
	sprintf((char*)SIM_Txbuff, "AT+CMGR=%d",SMSindex);
 80030de:	79fa      	ldrb	r2, [r7, #7]
 80030e0:	f107 030c 	add.w	r3, r7, #12
 80030e4:	490d      	ldr	r1, [pc, #52]	; (800311c <SMS_readAgain+0x48>)
 80030e6:	4618      	mov	r0, r3
 80030e8:	f009 fc60 	bl	800c9ac <siprintf>
	if  ( SIM_sendCMD(SIM_Txbuff, (uint8_t*)"OK",ENABLE_SIM_CHECKRES,
 80030ec:	f107 000c 	add.w	r0, r7, #12
 80030f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80030f4:	9300      	str	r3, [sp, #0]
 80030f6:	2301      	movs	r3, #1
 80030f8:	2201      	movs	r2, #1
 80030fa:	4909      	ldr	r1, [pc, #36]	; (8003120 <SMS_readAgain+0x4c>)
 80030fc:	f7ff fae0 	bl	80026c0 <SIM_sendCMD>
 8003100:	4603      	mov	r3, r0
 8003102:	2b01      	cmp	r3, #1
 8003104:	d004      	beq.n	8003110 <SMS_readAgain+0x3c>
					  ENABLE_MARKASREAD, 1000) != SIM_RES_MSG)	{
		newSMS = 0;
 8003106:	4b07      	ldr	r3, [pc, #28]	; (8003124 <SMS_readAgain+0x50>)
 8003108:	2200      	movs	r2, #0
 800310a:	701a      	strb	r2, [r3, #0]
		return 0;
 800310c:	2300      	movs	r3, #0
 800310e:	e000      	b.n	8003112 <SMS_readAgain+0x3e>
	}
	return 1;
 8003110:	2301      	movs	r3, #1
}
 8003112:	4618      	mov	r0, r3
 8003114:	3770      	adds	r7, #112	; 0x70
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	0800f0a4 	.word	0x0800f0a4
 8003120:	0800eff8 	.word	0x0800eff8
 8003124:	20001368 	.word	0x20001368

08003128 <processingSMS>:
uint8_t processingSMS(void)
{
 8003128:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800312c:	b089      	sub	sp, #36	; 0x24
 800312e:	af02      	add	r7, sp, #8
 8003130:	466b      	mov	r3, sp
 8003132:	461e      	mov	r6, r3

	if (!newSMS) return 0;
 8003134:	4b50      	ldr	r3, [pc, #320]	; (8003278 <processingSMS+0x150>)
 8003136:	781b      	ldrb	r3, [r3, #0]
 8003138:	b2db      	uxtb	r3, r3
 800313a:	2b00      	cmp	r3, #0
 800313c:	d101      	bne.n	8003142 <processingSMS+0x1a>
 800313e:	2300      	movs	r3, #0
 8003140:	e094      	b.n	800326c <processingSMS+0x144>

	static uint8_t readagain = 0;
	static uint16_t SMSindex = 0;

	MarkAsReadData_SIM();
 8003142:	f7ff fb6d 	bl	8002820 <MarkAsReadData_SIM>
	if ( readagain ) 	{
 8003146:	4b4d      	ldr	r3, [pc, #308]	; (800327c <processingSMS+0x154>)
 8003148:	781b      	ldrb	r3, [r3, #0]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d006      	beq.n	800315c <processingSMS+0x34>
		SMS_readAgain(SMSindex);
 800314e:	4b4c      	ldr	r3, [pc, #304]	; (8003280 <processingSMS+0x158>)
 8003150:	881b      	ldrh	r3, [r3, #0]
 8003152:	b2db      	uxtb	r3, r3
 8003154:	4618      	mov	r0, r3
 8003156:	f7ff ffbd 	bl	80030d4 <SMS_readAgain>
 800315a:	e001      	b.n	8003160 <processingSMS+0x38>
	}
	else 	{
		SMS_read();
 800315c:	f7ff ff9c 	bl	8003098 <SMS_read>
	}
	/* Processing SMS*/
	//Get SMS index
	SMSindex = SMS_getindex(SMS_Rxbuff, SMS_len);
 8003160:	4b48      	ldr	r3, [pc, #288]	; (8003284 <processingSMS+0x15c>)
 8003162:	881b      	ldrh	r3, [r3, #0]
 8003164:	4619      	mov	r1, r3
 8003166:	4848      	ldr	r0, [pc, #288]	; (8003288 <processingSMS+0x160>)
 8003168:	f7ff fbcc 	bl	8002904 <SMS_getindex>
 800316c:	4603      	mov	r3, r0
 800316e:	461a      	mov	r2, r3
 8003170:	4b43      	ldr	r3, [pc, #268]	; (8003280 <processingSMS+0x158>)
 8003172:	801a      	strh	r2, [r3, #0]
	if (!SMSindex)	{
 8003174:	4b42      	ldr	r3, [pc, #264]	; (8003280 <processingSMS+0x158>)
 8003176:	881b      	ldrh	r3, [r3, #0]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d104      	bne.n	8003186 <processingSMS+0x5e>
		newSMS = 0;
 800317c:	4b3e      	ldr	r3, [pc, #248]	; (8003278 <processingSMS+0x150>)
 800317e:	2200      	movs	r2, #0
 8003180:	701a      	strb	r2, [r3, #0]
		return 0;
 8003182:	2300      	movs	r3, #0
 8003184:	e072      	b.n	800326c <processingSMS+0x144>
	}
	//Get phone number
	uint8_t phonenumb[PHONENUMB_LEN];
	if ( !SMS_getPhonenumb(SMS_Rxbuff, SMS_len, phonenumb) ) {
 8003186:	4b3f      	ldr	r3, [pc, #252]	; (8003284 <processingSMS+0x15c>)
 8003188:	881b      	ldrh	r3, [r3, #0]
 800318a:	463a      	mov	r2, r7
 800318c:	4619      	mov	r1, r3
 800318e:	483e      	ldr	r0, [pc, #248]	; (8003288 <processingSMS+0x160>)
 8003190:	f7ff fc20 	bl	80029d4 <SMS_getPhonenumb>
 8003194:	4603      	mov	r3, r0
 8003196:	2b00      	cmp	r3, #0
 8003198:	d104      	bne.n	80031a4 <processingSMS+0x7c>
		newSMS = 0;
 800319a:	4b37      	ldr	r3, [pc, #220]	; (8003278 <processingSMS+0x150>)
 800319c:	2200      	movs	r2, #0
 800319e:	701a      	strb	r2, [r3, #0]
		return 0;
 80031a0:	2300      	movs	r3, #0
 80031a2:	e063      	b.n	800326c <processingSMS+0x144>
	}
	//Get SMS content
	uint8_t tmpSMSdatabuffer[SMS_len];
 80031a4:	4b37      	ldr	r3, [pc, #220]	; (8003284 <processingSMS+0x15c>)
 80031a6:	8819      	ldrh	r1, [r3, #0]
 80031a8:	460b      	mov	r3, r1
 80031aa:	3b01      	subs	r3, #1
 80031ac:	617b      	str	r3, [r7, #20]
 80031ae:	b28b      	uxth	r3, r1
 80031b0:	2200      	movs	r2, #0
 80031b2:	4698      	mov	r8, r3
 80031b4:	4691      	mov	r9, r2
 80031b6:	f04f 0200 	mov.w	r2, #0
 80031ba:	f04f 0300 	mov.w	r3, #0
 80031be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80031c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80031c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80031ca:	b28b      	uxth	r3, r1
 80031cc:	2200      	movs	r2, #0
 80031ce:	461c      	mov	r4, r3
 80031d0:	4615      	mov	r5, r2
 80031d2:	f04f 0200 	mov.w	r2, #0
 80031d6:	f04f 0300 	mov.w	r3, #0
 80031da:	00eb      	lsls	r3, r5, #3
 80031dc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80031e0:	00e2      	lsls	r2, r4, #3
 80031e2:	460b      	mov	r3, r1
 80031e4:	3307      	adds	r3, #7
 80031e6:	08db      	lsrs	r3, r3, #3
 80031e8:	00db      	lsls	r3, r3, #3
 80031ea:	ebad 0d03 	sub.w	sp, sp, r3
 80031ee:	ab02      	add	r3, sp, #8
 80031f0:	3300      	adds	r3, #0
 80031f2:	613b      	str	r3, [r7, #16]
	memset(tmpSMSdatabuffer, 0, SMS_len);
 80031f4:	4b23      	ldr	r3, [pc, #140]	; (8003284 <processingSMS+0x15c>)
 80031f6:	881b      	ldrh	r3, [r3, #0]
 80031f8:	461a      	mov	r2, r3
 80031fa:	2100      	movs	r1, #0
 80031fc:	6938      	ldr	r0, [r7, #16]
 80031fe:	f009 f831 	bl	800c264 <memset>
	uint16_t contentlen = SMS_getContent(SMS_Rxbuff, SMS_len, tmpSMSdatabuffer);
 8003202:	4b20      	ldr	r3, [pc, #128]	; (8003284 <processingSMS+0x15c>)
 8003204:	881b      	ldrh	r3, [r3, #0]
 8003206:	693a      	ldr	r2, [r7, #16]
 8003208:	4619      	mov	r1, r3
 800320a:	481f      	ldr	r0, [pc, #124]	; (8003288 <processingSMS+0x160>)
 800320c:	f7ff fc44 	bl	8002a98 <SMS_getContent>
 8003210:	4603      	mov	r3, r0
 8003212:	81fb      	strh	r3, [r7, #14]
//	MQTT_publish((uint8_t*)TOPIC_PUB , tmpSMSdatabuffer, contentlen);
	if ( !contentlen)	{
 8003214:	89fb      	ldrh	r3, [r7, #14]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d104      	bne.n	8003224 <processingSMS+0xfc>
		newSMS = 0;
 800321a:	4b17      	ldr	r3, [pc, #92]	; (8003278 <processingSMS+0x150>)
 800321c:	2200      	movs	r2, #0
 800321e:	701a      	strb	r2, [r3, #0]
		return 0;
 8003220:	2300      	movs	r3, #0
 8003222:	e023      	b.n	800326c <processingSMS+0x144>
	}
	//Check SMS command
	uint8_t checkres = SMS_checkCMD(tmpSMSdatabuffer, contentlen, phonenumb);
 8003224:	463a      	mov	r2, r7
 8003226:	89fb      	ldrh	r3, [r7, #14]
 8003228:	4619      	mov	r1, r3
 800322a:	6938      	ldr	r0, [r7, #16]
 800322c:	f7ff fe04 	bl	8002e38 <SMS_checkCMD>
 8003230:	4603      	mov	r3, r0
 8003232:	737b      	strb	r3, [r7, #13]
	if ( !checkres ) 	{
 8003234:	7b7b      	ldrb	r3, [r7, #13]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d104      	bne.n	8003244 <processingSMS+0x11c>
		newSMS = 0;
 800323a:	4b0f      	ldr	r3, [pc, #60]	; (8003278 <processingSMS+0x150>)
 800323c:	2200      	movs	r2, #0
 800323e:	701a      	strb	r2, [r3, #0]
		return 0;
 8003240:	2300      	movs	r3, #0
 8003242:	e013      	b.n	800326c <processingSMS+0x144>
	}

	if ( checkres == 2 )	{
 8003244:	7b7b      	ldrb	r3, [r7, #13]
 8003246:	2b02      	cmp	r3, #2
 8003248:	d103      	bne.n	8003252 <processingSMS+0x12a>
		readagain = 1;
 800324a:	4b0c      	ldr	r3, [pc, #48]	; (800327c <processingSMS+0x154>)
 800324c:	2201      	movs	r2, #1
 800324e:	701a      	strb	r2, [r3, #0]
 8003250:	e00b      	b.n	800326a <processingSMS+0x142>
	}
	else {
		SIM_sendCMD((uint8_t*)"AT+CMGD=1,1", (uint8_t*)"OK",
 8003252:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003256:	9300      	str	r3, [sp, #0]
 8003258:	2301      	movs	r3, #1
 800325a:	2201      	movs	r2, #1
 800325c:	490b      	ldr	r1, [pc, #44]	; (800328c <processingSMS+0x164>)
 800325e:	480c      	ldr	r0, [pc, #48]	; (8003290 <processingSMS+0x168>)
 8003260:	f7ff fa2e 	bl	80026c0 <SIM_sendCMD>
					ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, 1000);
		newSMS = 0;
 8003264:	4b04      	ldr	r3, [pc, #16]	; (8003278 <processingSMS+0x150>)
 8003266:	2200      	movs	r2, #0
 8003268:	701a      	strb	r2, [r3, #0]
	}

	return 1;
 800326a:	2301      	movs	r3, #1
 800326c:	46b5      	mov	sp, r6
}
 800326e:	4618      	mov	r0, r3
 8003270:	371c      	adds	r7, #28
 8003272:	46bd      	mov	sp, r7
 8003274:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003278:	20001368 	.word	0x20001368
 800327c:	2000136c 	.word	0x2000136c
 8003280:	2000136e 	.word	0x2000136e
 8003284:	2000136a 	.word	0x2000136a
 8003288:	200011a0 	.word	0x200011a0
 800328c:	0800eff8 	.word	0x0800eff8
 8003290:	0800f0b0 	.word	0x0800f0b0

08003294 <checkSMSrequest>:



bool checkSMSrequest (SMS_CMD_t smsCMD)
{
 8003294:	b480      	push	{r7}
 8003296:	b085      	sub	sp, #20
 8003298:	af00      	add	r7, sp, #0
 800329a:	4603      	mov	r3, r0
 800329c:	71fb      	strb	r3, [r7, #7]
	bool res = false;
 800329e:	2300      	movs	r3, #0
 80032a0:	73fb      	strb	r3, [r7, #15]
	switch (smsCMD)	{
 80032a2:	79fb      	ldrb	r3, [r7, #7]
 80032a4:	2b07      	cmp	r3, #7
 80032a6:	d873      	bhi.n	8003390 <checkSMSrequest+0xfc>
 80032a8:	a201      	add	r2, pc, #4	; (adr r2, 80032b0 <checkSMSrequest+0x1c>)
 80032aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032ae:	bf00      	nop
 80032b0:	080032d1 	.word	0x080032d1
 80032b4:	080032e9 	.word	0x080032e9
 80032b8:	08003331 	.word	0x08003331
 80032bc:	08003319 	.word	0x08003319
 80032c0:	08003301 	.word	0x08003301
 80032c4:	08003349 	.word	0x08003349
 80032c8:	08003379 	.word	0x08003379
 80032cc:	08003361 	.word	0x08003361
		case SMS_CMD_CTRL_ON:
			res = mySIM.sms.CtrlON.requestflag ;
 80032d0:	4b33      	ldr	r3, [pc, #204]	; (80033a0 <checkSMSrequest+0x10c>)
 80032d2:	f893 3164 	ldrb.w	r3, [r3, #356]	; 0x164
 80032d6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	2b00      	cmp	r3, #0
 80032de:	bf14      	ite	ne
 80032e0:	2301      	movne	r3, #1
 80032e2:	2300      	moveq	r3, #0
 80032e4:	73fb      	strb	r3, [r7, #15]
			break;
 80032e6:	e054      	b.n	8003392 <checkSMSrequest+0xfe>
		case SMS_CMD_CTRL_OFF:
			res = mySIM.sms.CtrlOFF.requestflag ;
 80032e8:	4b2d      	ldr	r3, [pc, #180]	; (80033a0 <checkSMSrequest+0x10c>)
 80032ea:	f893 3276 	ldrb.w	r3, [r3, #630]	; 0x276
 80032ee:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	bf14      	ite	ne
 80032f8:	2301      	movne	r3, #1
 80032fa:	2300      	moveq	r3, #0
 80032fc:	73fb      	strb	r3, [r7, #15]
			break;
 80032fe:	e048      	b.n	8003392 <checkSMSrequest+0xfe>
		case SMS_CMD_CTRL_DEC:
			res = mySIM.sms.CtrlDEC.requestflag ;
 8003300:	4b27      	ldr	r3, [pc, #156]	; (80033a0 <checkSMSrequest+0x10c>)
 8003302:	f893 35ac 	ldrb.w	r3, [r3, #1452]	; 0x5ac
 8003306:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800330a:	b2db      	uxtb	r3, r3
 800330c:	2b00      	cmp	r3, #0
 800330e:	bf14      	ite	ne
 8003310:	2301      	movne	r3, #1
 8003312:	2300      	moveq	r3, #0
 8003314:	73fb      	strb	r3, [r7, #15]
			break;
 8003316:	e03c      	b.n	8003392 <checkSMSrequest+0xfe>
		case SMS_CMD_CTRL_INC:
			res = mySIM.sms.CtrlINC.requestflag ;
 8003318:	4b21      	ldr	r3, [pc, #132]	; (80033a0 <checkSMSrequest+0x10c>)
 800331a:	f893 349a 	ldrb.w	r3, [r3, #1178]	; 0x49a
 800331e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003322:	b2db      	uxtb	r3, r3
 8003324:	2b00      	cmp	r3, #0
 8003326:	bf14      	ite	ne
 8003328:	2301      	movne	r3, #1
 800332a:	2300      	moveq	r3, #0
 800332c:	73fb      	strb	r3, [r7, #15]
			break;
 800332e:	e030      	b.n	8003392 <checkSMSrequest+0xfe>
		case SMS_CMD_CTRL_CALIB:
			res = mySIM.sms.CtrlCALIB.requestflag ;
 8003330:	4b1b      	ldr	r3, [pc, #108]	; (80033a0 <checkSMSrequest+0x10c>)
 8003332:	f893 3388 	ldrb.w	r3, [r3, #904]	; 0x388
 8003336:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800333a:	b2db      	uxtb	r3, r3
 800333c:	2b00      	cmp	r3, #0
 800333e:	bf14      	ite	ne
 8003340:	2301      	movne	r3, #1
 8003342:	2300      	moveq	r3, #0
 8003344:	73fb      	strb	r3, [r7, #15]
			break;
 8003346:	e024      	b.n	8003392 <checkSMSrequest+0xfe>
		case SMS_CMD_GET_STATUS:
			res = mySIM.sms.GetStatus.requestflag ;
 8003348:	4b15      	ldr	r3, [pc, #84]	; (80033a0 <checkSMSrequest+0x10c>)
 800334a:	f893 36be 	ldrb.w	r3, [r3, #1726]	; 0x6be
 800334e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003352:	b2db      	uxtb	r3, r3
 8003354:	2b00      	cmp	r3, #0
 8003356:	bf14      	ite	ne
 8003358:	2301      	movne	r3, #1
 800335a:	2300      	moveq	r3, #0
 800335c:	73fb      	strb	r3, [r7, #15]
			break;
 800335e:	e018      	b.n	8003392 <checkSMSrequest+0xfe>
		case SMS_CMD_GET_STATION:
			res = mySIM.sms.GetStation.requestflag ;
 8003360:	4b0f      	ldr	r3, [pc, #60]	; (80033a0 <checkSMSrequest+0x10c>)
 8003362:	f893 38e2 	ldrb.w	r3, [r3, #2274]	; 0x8e2
 8003366:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800336a:	b2db      	uxtb	r3, r3
 800336c:	2b00      	cmp	r3, #0
 800336e:	bf14      	ite	ne
 8003370:	2301      	movne	r3, #1
 8003372:	2300      	moveq	r3, #0
 8003374:	73fb      	strb	r3, [r7, #15]
			break;
 8003376:	e00c      	b.n	8003392 <checkSMSrequest+0xfe>
		case SMS_CMD_GET_SENSOR:
			res = mySIM.sms.GetSensor.requestflag ;
 8003378:	4b09      	ldr	r3, [pc, #36]	; (80033a0 <checkSMSrequest+0x10c>)
 800337a:	f893 37d0 	ldrb.w	r3, [r3, #2000]	; 0x7d0
 800337e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003382:	b2db      	uxtb	r3, r3
 8003384:	2b00      	cmp	r3, #0
 8003386:	bf14      	ite	ne
 8003388:	2301      	movne	r3, #1
 800338a:	2300      	moveq	r3, #0
 800338c:	73fb      	strb	r3, [r7, #15]
			break;
 800338e:	e000      	b.n	8003392 <checkSMSrequest+0xfe>
		default:
			break;
 8003390:	bf00      	nop
	}
	return res;
 8003392:	7bfb      	ldrb	r3, [r7, #15]
}
 8003394:	4618      	mov	r0, r3
 8003396:	3714      	adds	r7, #20
 8003398:	46bd      	mov	sp, r7
 800339a:	bc80      	pop	{r7}
 800339c:	4770      	bx	lr
 800339e:	bf00      	nop
 80033a0:	20001774 	.word	0x20001774

080033a4 <triggerSMSrequest>:

void triggerSMSrequest (SMS_CMD_t smsCMD, SMS_CMD_FLAG_t ENorDIS)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b083      	sub	sp, #12
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	4603      	mov	r3, r0
 80033ac:	460a      	mov	r2, r1
 80033ae:	71fb      	strb	r3, [r7, #7]
 80033b0:	4613      	mov	r3, r2
 80033b2:	71bb      	strb	r3, [r7, #6]
	switch (smsCMD)	{
 80033b4:	79fb      	ldrb	r3, [r7, #7]
 80033b6:	2b07      	cmp	r3, #7
 80033b8:	d872      	bhi.n	80034a0 <triggerSMSrequest+0xfc>
 80033ba:	a201      	add	r2, pc, #4	; (adr r2, 80033c0 <triggerSMSrequest+0x1c>)
 80033bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033c0:	080033e1 	.word	0x080033e1
 80033c4:	080033f9 	.word	0x080033f9
 80033c8:	08003441 	.word	0x08003441
 80033cc:	08003429 	.word	0x08003429
 80033d0:	08003411 	.word	0x08003411
 80033d4:	08003459 	.word	0x08003459
 80033d8:	08003489 	.word	0x08003489
 80033dc:	08003471 	.word	0x08003471
	case SMS_CMD_CTRL_ON:
		mySIM.sms.CtrlON.requestflag = ENorDIS;
 80033e0:	79bb      	ldrb	r3, [r7, #6]
 80033e2:	f003 0301 	and.w	r3, r3, #1
 80033e6:	b2d9      	uxtb	r1, r3
 80033e8:	4a30      	ldr	r2, [pc, #192]	; (80034ac <triggerSMSrequest+0x108>)
 80033ea:	f892 3164 	ldrb.w	r3, [r2, #356]	; 0x164
 80033ee:	f361 0300 	bfi	r3, r1, #0, #1
 80033f2:	f882 3164 	strb.w	r3, [r2, #356]	; 0x164
		break;
 80033f6:	e054      	b.n	80034a2 <triggerSMSrequest+0xfe>
	case SMS_CMD_CTRL_OFF:
		mySIM.sms.CtrlOFF.requestflag = ENorDIS;
 80033f8:	79bb      	ldrb	r3, [r7, #6]
 80033fa:	f003 0301 	and.w	r3, r3, #1
 80033fe:	b2d9      	uxtb	r1, r3
 8003400:	4a2a      	ldr	r2, [pc, #168]	; (80034ac <triggerSMSrequest+0x108>)
 8003402:	f892 3276 	ldrb.w	r3, [r2, #630]	; 0x276
 8003406:	f361 0300 	bfi	r3, r1, #0, #1
 800340a:	f882 3276 	strb.w	r3, [r2, #630]	; 0x276
		break;
 800340e:	e048      	b.n	80034a2 <triggerSMSrequest+0xfe>
	case SMS_CMD_CTRL_DEC:
		mySIM.sms.CtrlDEC.requestflag = ENorDIS;
 8003410:	79bb      	ldrb	r3, [r7, #6]
 8003412:	f003 0301 	and.w	r3, r3, #1
 8003416:	b2d9      	uxtb	r1, r3
 8003418:	4a24      	ldr	r2, [pc, #144]	; (80034ac <triggerSMSrequest+0x108>)
 800341a:	f892 35ac 	ldrb.w	r3, [r2, #1452]	; 0x5ac
 800341e:	f361 0300 	bfi	r3, r1, #0, #1
 8003422:	f882 35ac 	strb.w	r3, [r2, #1452]	; 0x5ac
		break;
 8003426:	e03c      	b.n	80034a2 <triggerSMSrequest+0xfe>
	case SMS_CMD_CTRL_INC:
		mySIM.sms.CtrlINC.requestflag = ENorDIS;
 8003428:	79bb      	ldrb	r3, [r7, #6]
 800342a:	f003 0301 	and.w	r3, r3, #1
 800342e:	b2d9      	uxtb	r1, r3
 8003430:	4a1e      	ldr	r2, [pc, #120]	; (80034ac <triggerSMSrequest+0x108>)
 8003432:	f892 349a 	ldrb.w	r3, [r2, #1178]	; 0x49a
 8003436:	f361 0300 	bfi	r3, r1, #0, #1
 800343a:	f882 349a 	strb.w	r3, [r2, #1178]	; 0x49a
		break;
 800343e:	e030      	b.n	80034a2 <triggerSMSrequest+0xfe>
	case SMS_CMD_CTRL_CALIB:
		mySIM.sms.CtrlCALIB.requestflag = ENorDIS;
 8003440:	79bb      	ldrb	r3, [r7, #6]
 8003442:	f003 0301 	and.w	r3, r3, #1
 8003446:	b2d9      	uxtb	r1, r3
 8003448:	4a18      	ldr	r2, [pc, #96]	; (80034ac <triggerSMSrequest+0x108>)
 800344a:	f892 3388 	ldrb.w	r3, [r2, #904]	; 0x388
 800344e:	f361 0300 	bfi	r3, r1, #0, #1
 8003452:	f882 3388 	strb.w	r3, [r2, #904]	; 0x388
		break;
 8003456:	e024      	b.n	80034a2 <triggerSMSrequest+0xfe>
	case SMS_CMD_GET_STATUS:
		mySIM.sms.GetStatus.requestflag = ENorDIS;
 8003458:	79bb      	ldrb	r3, [r7, #6]
 800345a:	f003 0301 	and.w	r3, r3, #1
 800345e:	b2d9      	uxtb	r1, r3
 8003460:	4a12      	ldr	r2, [pc, #72]	; (80034ac <triggerSMSrequest+0x108>)
 8003462:	f892 36be 	ldrb.w	r3, [r2, #1726]	; 0x6be
 8003466:	f361 0300 	bfi	r3, r1, #0, #1
 800346a:	f882 36be 	strb.w	r3, [r2, #1726]	; 0x6be
		break;
 800346e:	e018      	b.n	80034a2 <triggerSMSrequest+0xfe>
	case SMS_CMD_GET_STATION:
		mySIM.sms.GetStation.requestflag = ENorDIS;
 8003470:	79bb      	ldrb	r3, [r7, #6]
 8003472:	f003 0301 	and.w	r3, r3, #1
 8003476:	b2d9      	uxtb	r1, r3
 8003478:	4a0c      	ldr	r2, [pc, #48]	; (80034ac <triggerSMSrequest+0x108>)
 800347a:	f892 38e2 	ldrb.w	r3, [r2, #2274]	; 0x8e2
 800347e:	f361 0300 	bfi	r3, r1, #0, #1
 8003482:	f882 38e2 	strb.w	r3, [r2, #2274]	; 0x8e2
		break;
 8003486:	e00c      	b.n	80034a2 <triggerSMSrequest+0xfe>
	case SMS_CMD_GET_SENSOR:
		mySIM.sms.GetSensor.requestflag = ENorDIS;
 8003488:	79bb      	ldrb	r3, [r7, #6]
 800348a:	f003 0301 	and.w	r3, r3, #1
 800348e:	b2d9      	uxtb	r1, r3
 8003490:	4a06      	ldr	r2, [pc, #24]	; (80034ac <triggerSMSrequest+0x108>)
 8003492:	f892 37d0 	ldrb.w	r3, [r2, #2000]	; 0x7d0
 8003496:	f361 0300 	bfi	r3, r1, #0, #1
 800349a:	f882 37d0 	strb.w	r3, [r2, #2000]	; 0x7d0
		break;
 800349e:	e000      	b.n	80034a2 <triggerSMSrequest+0xfe>
	default:
		break;
 80034a0:	bf00      	nop
	}
}
 80034a2:	bf00      	nop
 80034a4:	370c      	adds	r7, #12
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bc80      	pop	{r7}
 80034aa:	4770      	bx	lr
 80034ac:	20001774 	.word	0x20001774

080034b0 <checkSMSreturn>:

bool checkSMSreturn (SMS_CMD_t smsCMD)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b085      	sub	sp, #20
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	4603      	mov	r3, r0
 80034b8:	71fb      	strb	r3, [r7, #7]
	bool res = false;
 80034ba:	2300      	movs	r3, #0
 80034bc:	73fb      	strb	r3, [r7, #15]
	switch (smsCMD)	{
 80034be:	79fb      	ldrb	r3, [r7, #7]
 80034c0:	2b07      	cmp	r3, #7
 80034c2:	d873      	bhi.n	80035ac <checkSMSreturn+0xfc>
 80034c4:	a201      	add	r2, pc, #4	; (adr r2, 80034cc <checkSMSreturn+0x1c>)
 80034c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034ca:	bf00      	nop
 80034cc:	080034ed 	.word	0x080034ed
 80034d0:	08003505 	.word	0x08003505
 80034d4:	0800354d 	.word	0x0800354d
 80034d8:	08003535 	.word	0x08003535
 80034dc:	0800351d 	.word	0x0800351d
 80034e0:	08003565 	.word	0x08003565
 80034e4:	08003595 	.word	0x08003595
 80034e8:	0800357d 	.word	0x0800357d
		case SMS_CMD_CTRL_ON:
			res = mySIM.sms.CtrlON.returnflag ;
 80034ec:	4b33      	ldr	r3, [pc, #204]	; (80035bc <checkSMSreturn+0x10c>)
 80034ee:	f893 3164 	ldrb.w	r3, [r3, #356]	; 0x164
 80034f2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	bf14      	ite	ne
 80034fc:	2301      	movne	r3, #1
 80034fe:	2300      	moveq	r3, #0
 8003500:	73fb      	strb	r3, [r7, #15]
			break;
 8003502:	e054      	b.n	80035ae <checkSMSreturn+0xfe>
		case SMS_CMD_CTRL_OFF:
			res = mySIM.sms.CtrlOFF.returnflag ;
 8003504:	4b2d      	ldr	r3, [pc, #180]	; (80035bc <checkSMSreturn+0x10c>)
 8003506:	f893 3276 	ldrb.w	r3, [r3, #630]	; 0x276
 800350a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800350e:	b2db      	uxtb	r3, r3
 8003510:	2b00      	cmp	r3, #0
 8003512:	bf14      	ite	ne
 8003514:	2301      	movne	r3, #1
 8003516:	2300      	moveq	r3, #0
 8003518:	73fb      	strb	r3, [r7, #15]
			break;
 800351a:	e048      	b.n	80035ae <checkSMSreturn+0xfe>
		case SMS_CMD_CTRL_DEC:
			res = mySIM.sms.CtrlDEC.returnflag ;
 800351c:	4b27      	ldr	r3, [pc, #156]	; (80035bc <checkSMSreturn+0x10c>)
 800351e:	f893 35ac 	ldrb.w	r3, [r3, #1452]	; 0x5ac
 8003522:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003526:	b2db      	uxtb	r3, r3
 8003528:	2b00      	cmp	r3, #0
 800352a:	bf14      	ite	ne
 800352c:	2301      	movne	r3, #1
 800352e:	2300      	moveq	r3, #0
 8003530:	73fb      	strb	r3, [r7, #15]
			break;
 8003532:	e03c      	b.n	80035ae <checkSMSreturn+0xfe>
		case SMS_CMD_CTRL_INC:
			res = mySIM.sms.CtrlINC.returnflag ;
 8003534:	4b21      	ldr	r3, [pc, #132]	; (80035bc <checkSMSreturn+0x10c>)
 8003536:	f893 349a 	ldrb.w	r3, [r3, #1178]	; 0x49a
 800353a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800353e:	b2db      	uxtb	r3, r3
 8003540:	2b00      	cmp	r3, #0
 8003542:	bf14      	ite	ne
 8003544:	2301      	movne	r3, #1
 8003546:	2300      	moveq	r3, #0
 8003548:	73fb      	strb	r3, [r7, #15]
			break;
 800354a:	e030      	b.n	80035ae <checkSMSreturn+0xfe>
		case SMS_CMD_CTRL_CALIB:
			res = mySIM.sms.CtrlCALIB.returnflag ;
 800354c:	4b1b      	ldr	r3, [pc, #108]	; (80035bc <checkSMSreturn+0x10c>)
 800354e:	f893 3388 	ldrb.w	r3, [r3, #904]	; 0x388
 8003552:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003556:	b2db      	uxtb	r3, r3
 8003558:	2b00      	cmp	r3, #0
 800355a:	bf14      	ite	ne
 800355c:	2301      	movne	r3, #1
 800355e:	2300      	moveq	r3, #0
 8003560:	73fb      	strb	r3, [r7, #15]
			break;
 8003562:	e024      	b.n	80035ae <checkSMSreturn+0xfe>
		case SMS_CMD_GET_STATUS:
			res = mySIM.sms.GetStatus.returnflag ;
 8003564:	4b15      	ldr	r3, [pc, #84]	; (80035bc <checkSMSreturn+0x10c>)
 8003566:	f893 36be 	ldrb.w	r3, [r3, #1726]	; 0x6be
 800356a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800356e:	b2db      	uxtb	r3, r3
 8003570:	2b00      	cmp	r3, #0
 8003572:	bf14      	ite	ne
 8003574:	2301      	movne	r3, #1
 8003576:	2300      	moveq	r3, #0
 8003578:	73fb      	strb	r3, [r7, #15]
			break;
 800357a:	e018      	b.n	80035ae <checkSMSreturn+0xfe>
		case SMS_CMD_GET_STATION:
			res = mySIM.sms.GetStation.returnflag ;
 800357c:	4b0f      	ldr	r3, [pc, #60]	; (80035bc <checkSMSreturn+0x10c>)
 800357e:	f893 38e2 	ldrb.w	r3, [r3, #2274]	; 0x8e2
 8003582:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003586:	b2db      	uxtb	r3, r3
 8003588:	2b00      	cmp	r3, #0
 800358a:	bf14      	ite	ne
 800358c:	2301      	movne	r3, #1
 800358e:	2300      	moveq	r3, #0
 8003590:	73fb      	strb	r3, [r7, #15]
			break;
 8003592:	e00c      	b.n	80035ae <checkSMSreturn+0xfe>
		case SMS_CMD_GET_SENSOR:
			res = mySIM.sms.GetSensor.returnflag ;
 8003594:	4b09      	ldr	r3, [pc, #36]	; (80035bc <checkSMSreturn+0x10c>)
 8003596:	f893 37d0 	ldrb.w	r3, [r3, #2000]	; 0x7d0
 800359a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	bf14      	ite	ne
 80035a4:	2301      	movne	r3, #1
 80035a6:	2300      	moveq	r3, #0
 80035a8:	73fb      	strb	r3, [r7, #15]
			break;
 80035aa:	e000      	b.n	80035ae <checkSMSreturn+0xfe>
		default:
			break;
 80035ac:	bf00      	nop
		}
	return res;
 80035ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	3714      	adds	r7, #20
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bc80      	pop	{r7}
 80035b8:	4770      	bx	lr
 80035ba:	bf00      	nop
 80035bc:	20001774 	.word	0x20001774

080035c0 <triggerSMSreturn>:
void triggerSMSreturn (SMS_CMD_t smsCMD, SMS_CMD_FLAG_t ENorDIS)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b083      	sub	sp, #12
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	4603      	mov	r3, r0
 80035c8:	460a      	mov	r2, r1
 80035ca:	71fb      	strb	r3, [r7, #7]
 80035cc:	4613      	mov	r3, r2
 80035ce:	71bb      	strb	r3, [r7, #6]
	switch (smsCMD)	{
 80035d0:	79fb      	ldrb	r3, [r7, #7]
 80035d2:	2b07      	cmp	r3, #7
 80035d4:	d872      	bhi.n	80036bc <triggerSMSreturn+0xfc>
 80035d6:	a201      	add	r2, pc, #4	; (adr r2, 80035dc <triggerSMSreturn+0x1c>)
 80035d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035dc:	080035fd 	.word	0x080035fd
 80035e0:	08003615 	.word	0x08003615
 80035e4:	0800365d 	.word	0x0800365d
 80035e8:	08003645 	.word	0x08003645
 80035ec:	0800362d 	.word	0x0800362d
 80035f0:	08003675 	.word	0x08003675
 80035f4:	080036a5 	.word	0x080036a5
 80035f8:	0800368d 	.word	0x0800368d
	case SMS_CMD_CTRL_ON:
		mySIM.sms.CtrlON.returnflag = ENorDIS;
 80035fc:	79bb      	ldrb	r3, [r7, #6]
 80035fe:	f003 0301 	and.w	r3, r3, #1
 8003602:	b2d9      	uxtb	r1, r3
 8003604:	4a30      	ldr	r2, [pc, #192]	; (80036c8 <triggerSMSreturn+0x108>)
 8003606:	f892 3164 	ldrb.w	r3, [r2, #356]	; 0x164
 800360a:	f361 0341 	bfi	r3, r1, #1, #1
 800360e:	f882 3164 	strb.w	r3, [r2, #356]	; 0x164
		break;
 8003612:	e054      	b.n	80036be <triggerSMSreturn+0xfe>
	case SMS_CMD_CTRL_OFF:
		mySIM.sms.CtrlOFF.returnflag = ENorDIS;
 8003614:	79bb      	ldrb	r3, [r7, #6]
 8003616:	f003 0301 	and.w	r3, r3, #1
 800361a:	b2d9      	uxtb	r1, r3
 800361c:	4a2a      	ldr	r2, [pc, #168]	; (80036c8 <triggerSMSreturn+0x108>)
 800361e:	f892 3276 	ldrb.w	r3, [r2, #630]	; 0x276
 8003622:	f361 0341 	bfi	r3, r1, #1, #1
 8003626:	f882 3276 	strb.w	r3, [r2, #630]	; 0x276
		break;
 800362a:	e048      	b.n	80036be <triggerSMSreturn+0xfe>
	case SMS_CMD_CTRL_DEC:
		mySIM.sms.CtrlDEC.returnflag = ENorDIS;
 800362c:	79bb      	ldrb	r3, [r7, #6]
 800362e:	f003 0301 	and.w	r3, r3, #1
 8003632:	b2d9      	uxtb	r1, r3
 8003634:	4a24      	ldr	r2, [pc, #144]	; (80036c8 <triggerSMSreturn+0x108>)
 8003636:	f892 35ac 	ldrb.w	r3, [r2, #1452]	; 0x5ac
 800363a:	f361 0341 	bfi	r3, r1, #1, #1
 800363e:	f882 35ac 	strb.w	r3, [r2, #1452]	; 0x5ac
		break;
 8003642:	e03c      	b.n	80036be <triggerSMSreturn+0xfe>
	case SMS_CMD_CTRL_INC:
		mySIM.sms.CtrlINC.returnflag = ENorDIS;
 8003644:	79bb      	ldrb	r3, [r7, #6]
 8003646:	f003 0301 	and.w	r3, r3, #1
 800364a:	b2d9      	uxtb	r1, r3
 800364c:	4a1e      	ldr	r2, [pc, #120]	; (80036c8 <triggerSMSreturn+0x108>)
 800364e:	f892 349a 	ldrb.w	r3, [r2, #1178]	; 0x49a
 8003652:	f361 0341 	bfi	r3, r1, #1, #1
 8003656:	f882 349a 	strb.w	r3, [r2, #1178]	; 0x49a
		break;
 800365a:	e030      	b.n	80036be <triggerSMSreturn+0xfe>
	case SMS_CMD_CTRL_CALIB:
		mySIM.sms.CtrlCALIB.returnflag = ENorDIS;
 800365c:	79bb      	ldrb	r3, [r7, #6]
 800365e:	f003 0301 	and.w	r3, r3, #1
 8003662:	b2d9      	uxtb	r1, r3
 8003664:	4a18      	ldr	r2, [pc, #96]	; (80036c8 <triggerSMSreturn+0x108>)
 8003666:	f892 3388 	ldrb.w	r3, [r2, #904]	; 0x388
 800366a:	f361 0341 	bfi	r3, r1, #1, #1
 800366e:	f882 3388 	strb.w	r3, [r2, #904]	; 0x388
		break;
 8003672:	e024      	b.n	80036be <triggerSMSreturn+0xfe>
	case SMS_CMD_GET_STATUS:
		mySIM.sms.GetStatus.returnflag = ENorDIS;
 8003674:	79bb      	ldrb	r3, [r7, #6]
 8003676:	f003 0301 	and.w	r3, r3, #1
 800367a:	b2d9      	uxtb	r1, r3
 800367c:	4a12      	ldr	r2, [pc, #72]	; (80036c8 <triggerSMSreturn+0x108>)
 800367e:	f892 36be 	ldrb.w	r3, [r2, #1726]	; 0x6be
 8003682:	f361 0341 	bfi	r3, r1, #1, #1
 8003686:	f882 36be 	strb.w	r3, [r2, #1726]	; 0x6be
		break;
 800368a:	e018      	b.n	80036be <triggerSMSreturn+0xfe>
	case SMS_CMD_GET_STATION:
		mySIM.sms.GetStation.returnflag = ENorDIS;
 800368c:	79bb      	ldrb	r3, [r7, #6]
 800368e:	f003 0301 	and.w	r3, r3, #1
 8003692:	b2d9      	uxtb	r1, r3
 8003694:	4a0c      	ldr	r2, [pc, #48]	; (80036c8 <triggerSMSreturn+0x108>)
 8003696:	f892 38e2 	ldrb.w	r3, [r2, #2274]	; 0x8e2
 800369a:	f361 0341 	bfi	r3, r1, #1, #1
 800369e:	f882 38e2 	strb.w	r3, [r2, #2274]	; 0x8e2
		break;
 80036a2:	e00c      	b.n	80036be <triggerSMSreturn+0xfe>
	case SMS_CMD_GET_SENSOR:
		mySIM.sms.GetSensor.returnflag = ENorDIS;
 80036a4:	79bb      	ldrb	r3, [r7, #6]
 80036a6:	f003 0301 	and.w	r3, r3, #1
 80036aa:	b2d9      	uxtb	r1, r3
 80036ac:	4a06      	ldr	r2, [pc, #24]	; (80036c8 <triggerSMSreturn+0x108>)
 80036ae:	f892 37d0 	ldrb.w	r3, [r2, #2000]	; 0x7d0
 80036b2:	f361 0341 	bfi	r3, r1, #1, #1
 80036b6:	f882 37d0 	strb.w	r3, [r2, #2000]	; 0x7d0
		break;
 80036ba:	e000      	b.n	80036be <triggerSMSreturn+0xfe>
	default:
		break;
 80036bc:	bf00      	nop
	}
}
 80036be:	bf00      	nop
 80036c0:	370c      	adds	r7, #12
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bc80      	pop	{r7}
 80036c6:	4770      	bx	lr
 80036c8:	20001774 	.word	0x20001774

080036cc <SMS_config>:

uint8_t SMS_config()
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b082      	sub	sp, #8
 80036d0:	af02      	add	r7, sp, #8
	if ( SIM_sendCMD((uint8_t*)"AT+CMGF=1", (uint8_t*)"OK", ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, SIM_TIMEOUT_LONG) != SIM_RES_MSG ) return 0;
 80036d2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80036d6:	9300      	str	r3, [sp, #0]
 80036d8:	2301      	movs	r3, #1
 80036da:	2201      	movs	r2, #1
 80036dc:	490d      	ldr	r1, [pc, #52]	; (8003714 <SMS_config+0x48>)
 80036de:	480e      	ldr	r0, [pc, #56]	; (8003718 <SMS_config+0x4c>)
 80036e0:	f7fe ffee 	bl	80026c0 <SIM_sendCMD>
 80036e4:	4603      	mov	r3, r0
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d001      	beq.n	80036ee <SMS_config+0x22>
 80036ea:	2300      	movs	r3, #0
 80036ec:	e00e      	b.n	800370c <SMS_config+0x40>

	if ( SIM_sendCMD((uint8_t*)"AT+CSCS=\"GSM\"", (uint8_t*)"OK", ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, SIM_TIMEOUT_LONG) != SIM_RES_MSG)		return 0;
 80036ee:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80036f2:	9300      	str	r3, [sp, #0]
 80036f4:	2301      	movs	r3, #1
 80036f6:	2201      	movs	r2, #1
 80036f8:	4906      	ldr	r1, [pc, #24]	; (8003714 <SMS_config+0x48>)
 80036fa:	4808      	ldr	r0, [pc, #32]	; (800371c <SMS_config+0x50>)
 80036fc:	f7fe ffe0 	bl	80026c0 <SIM_sendCMD>
 8003700:	4603      	mov	r3, r0
 8003702:	2b01      	cmp	r3, #1
 8003704:	d001      	beq.n	800370a <SMS_config+0x3e>
 8003706:	2300      	movs	r3, #0
 8003708:	e000      	b.n	800370c <SMS_config+0x40>

	return 1;
 800370a:	2301      	movs	r3, #1
}
 800370c:	4618      	mov	r0, r3
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop
 8003714:	0800eff8 	.word	0x0800eff8
 8003718:	0800f0bc 	.word	0x0800f0bc
 800371c:	0800f0c8 	.word	0x0800f0c8

08003720 <SMS_sendMsg>:

uint8_t SMS_sendMsg(uint8_t *Msg, uint16_t msglen, uint8_t *phonenumber )
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b0a6      	sub	sp, #152	; 0x98
 8003724:	af02      	add	r7, sp, #8
 8003726:	60f8      	str	r0, [r7, #12]
 8003728:	460b      	mov	r3, r1
 800372a:	607a      	str	r2, [r7, #4]
 800372c:	817b      	strh	r3, [r7, #10]
	if ( !SMS_config() )	return 0;
 800372e:	f7ff ffcd 	bl	80036cc <SMS_config>
 8003732:	4603      	mov	r3, r0
 8003734:	2b00      	cmp	r3, #0
 8003736:	d101      	bne.n	800373c <SMS_sendMsg+0x1c>
 8003738:	2300      	movs	r3, #0
 800373a:	e033      	b.n	80037a4 <SMS_sendMsg+0x84>
	uint8_t SIM_Txbuff[128];
	sprintf((char*)SIM_Txbuff, "AT+CMGS=\"%s\"", phonenumber);
 800373c:	f107 0310 	add.w	r3, r7, #16
 8003740:	687a      	ldr	r2, [r7, #4]
 8003742:	491a      	ldr	r1, [pc, #104]	; (80037ac <SMS_sendMsg+0x8c>)
 8003744:	4618      	mov	r0, r3
 8003746:	f009 f931 	bl	800c9ac <siprintf>
	if ( SIM_sendCMD(SIM_Txbuff, (uint8_t*)">", ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, SIM_TIMEOUT_LONG) != SIM_RES_MSG)	return 0;
 800374a:	f107 0010 	add.w	r0, r7, #16
 800374e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003752:	9300      	str	r3, [sp, #0]
 8003754:	2301      	movs	r3, #1
 8003756:	2201      	movs	r2, #1
 8003758:	4915      	ldr	r1, [pc, #84]	; (80037b0 <SMS_sendMsg+0x90>)
 800375a:	f7fe ffb1 	bl	80026c0 <SIM_sendCMD>
 800375e:	4603      	mov	r3, r0
 8003760:	2b01      	cmp	r3, #1
 8003762:	d001      	beq.n	8003768 <SMS_sendMsg+0x48>
 8003764:	2300      	movs	r3, #0
 8003766:	e01d      	b.n	80037a4 <SMS_sendMsg+0x84>

	Msg[msglen++] = 0x1A;
 8003768:	897b      	ldrh	r3, [r7, #10]
 800376a:	1c5a      	adds	r2, r3, #1
 800376c:	817a      	strh	r2, [r7, #10]
 800376e:	461a      	mov	r2, r3
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	4413      	add	r3, r2
 8003774:	221a      	movs	r2, #26
 8003776:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(SIM_UART, Msg, msglen, 0xFFFF);
 8003778:	897a      	ldrh	r2, [r7, #10]
 800377a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800377e:	68f9      	ldr	r1, [r7, #12]
 8003780:	480c      	ldr	r0, [pc, #48]	; (80037b4 <SMS_sendMsg+0x94>)
 8003782:	f007 fc17 	bl	800afb4 <HAL_UART_Transmit>
	if ( SIM_checkMsg((uint8_t*)"OK", SIM_TIMEOUT_LONG) != SIM_RES_MSG)	{
 8003786:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800378a:	480b      	ldr	r0, [pc, #44]	; (80037b8 <SMS_sendMsg+0x98>)
 800378c:	f7fe fede 	bl	800254c <SIM_checkMsg>
 8003790:	4603      	mov	r3, r0
 8003792:	2b01      	cmp	r3, #1
 8003794:	d003      	beq.n	800379e <SMS_sendMsg+0x7e>
		MarkAsReadData_SIM();
 8003796:	f7ff f843 	bl	8002820 <MarkAsReadData_SIM>
		return 0;
 800379a:	2300      	movs	r3, #0
 800379c:	e002      	b.n	80037a4 <SMS_sendMsg+0x84>
	}
//	HAL_UART_Transmit(SIM_UART, (uint8_t*), Size, Timeout)
	MarkAsReadData_SIM();
 800379e:	f7ff f83f 	bl	8002820 <MarkAsReadData_SIM>
	return 1;
 80037a2:	2301      	movs	r3, #1
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	3790      	adds	r7, #144	; 0x90
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	0800f0d8 	.word	0x0800f0d8
 80037b0:	0800f0e8 	.word	0x0800f0e8
 80037b4:	20002a68 	.word	0x20002a68
 80037b8:	0800eff8 	.word	0x0800eff8

080037bc <setLimit>:
static uint8_t steppercentChange = 0;
static Stepmotor_change_mode_t stepMode = STEPM_MODE_STEP;


void setLimit(LIMIT_t Limit)
{
 80037bc:	b480      	push	{r7}
 80037be:	b083      	sub	sp, #12
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	4603      	mov	r3, r0
 80037c4:	71fb      	strb	r3, [r7, #7]
	limit = Limit;
 80037c6:	4a04      	ldr	r2, [pc, #16]	; (80037d8 <setLimit+0x1c>)
 80037c8:	79fb      	ldrb	r3, [r7, #7]
 80037ca:	7013      	strb	r3, [r2, #0]
}
 80037cc:	bf00      	nop
 80037ce:	370c      	adds	r7, #12
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bc80      	pop	{r7}
 80037d4:	4770      	bx	lr
 80037d6:	bf00      	nop
 80037d8:	20000000 	.word	0x20000000

080037dc <getLimit>:

LIMIT_t getLimit ()
{
 80037dc:	b480      	push	{r7}
 80037de:	af00      	add	r7, sp, #0
	return limit;
 80037e0:	4b02      	ldr	r3, [pc, #8]	; (80037ec <getLimit+0x10>)
 80037e2:	781b      	ldrb	r3, [r3, #0]
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bc80      	pop	{r7}
 80037ea:	4770      	bx	lr
 80037ec:	20000000 	.word	0x20000000

080037f0 <Step_getDir>:

Stepmotor_dir_t Step_getDir()
{
 80037f0:	b480      	push	{r7}
 80037f2:	af00      	add	r7, sp, #0
	return step_dir;
 80037f4:	4b02      	ldr	r3, [pc, #8]	; (8003800 <Step_getDir+0x10>)
 80037f6:	781b      	ldrb	r3, [r3, #0]
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bc80      	pop	{r7}
 80037fe:	4770      	bx	lr
 8003800:	20000001 	.word	0x20000001

08003804 <Step_setDir>:

void Step_setDir(Stepmotor_dir_t dir)
{
 8003804:	b480      	push	{r7}
 8003806:	b083      	sub	sp, #12
 8003808:	af00      	add	r7, sp, #0
 800380a:	4603      	mov	r3, r0
 800380c:	71fb      	strb	r3, [r7, #7]
	step_dir = dir;
 800380e:	4a04      	ldr	r2, [pc, #16]	; (8003820 <Step_setDir+0x1c>)
 8003810:	79fb      	ldrb	r3, [r7, #7]
 8003812:	7013      	strb	r3, [r2, #0]
}
 8003814:	bf00      	nop
 8003816:	370c      	adds	r7, #12
 8003818:	46bd      	mov	sp, r7
 800381a:	bc80      	pop	{r7}
 800381c:	4770      	bx	lr
 800381e:	bf00      	nop
 8003820:	20000001 	.word	0x20000001

08003824 <Step_toggleDir>:

void Step_toggleDir()
{
 8003824:	b580      	push	{r7, lr}
 8003826:	af00      	add	r7, sp, #0
	switch (Step_getDir())	{
 8003828:	f7ff ffe2 	bl	80037f0 <Step_getDir>
 800382c:	4603      	mov	r3, r0
 800382e:	2b01      	cmp	r3, #1
 8003830:	d002      	beq.n	8003838 <Step_toggleDir+0x14>
 8003832:	2b02      	cmp	r3, #2
 8003834:	d004      	beq.n	8003840 <Step_toggleDir+0x1c>
		break;
	case STEPM_DIR_DEC:
		Step_setDir(STEPM_DIR_INC);
		break;
	default:
		break;
 8003836:	e007      	b.n	8003848 <Step_toggleDir+0x24>
		Step_setDir(STEPM_DIR_DEC);
 8003838:	2002      	movs	r0, #2
 800383a:	f7ff ffe3 	bl	8003804 <Step_setDir>
		break;
 800383e:	e003      	b.n	8003848 <Step_toggleDir+0x24>
		Step_setDir(STEPM_DIR_INC);
 8003840:	2001      	movs	r0, #1
 8003842:	f7ff ffdf 	bl	8003804 <Step_setDir>
		break;
 8003846:	bf00      	nop
	}
}
 8003848:	bf00      	nop
 800384a:	bd80      	pop	{r7, pc}

0800384c <increaseStepchange>:

void increaseStepchange()
{
 800384c:	b480      	push	{r7}
 800384e:	af00      	add	r7, sp, #0
	if (stepChange >= MAX_STEP )	{
 8003850:	4b09      	ldr	r3, [pc, #36]	; (8003878 <increaseStepchange+0x2c>)
 8003852:	881b      	ldrh	r3, [r3, #0]
 8003854:	b29b      	uxth	r3, r3
 8003856:	2b63      	cmp	r3, #99	; 0x63
 8003858:	d903      	bls.n	8003862 <increaseStepchange+0x16>
		stepChange = 0;
 800385a:	4b07      	ldr	r3, [pc, #28]	; (8003878 <increaseStepchange+0x2c>)
 800385c:	2200      	movs	r2, #0
 800385e:	801a      	strh	r2, [r3, #0]
	}
	else {
		stepChange ++;
	}
}
 8003860:	e006      	b.n	8003870 <increaseStepchange+0x24>
		stepChange ++;
 8003862:	4b05      	ldr	r3, [pc, #20]	; (8003878 <increaseStepchange+0x2c>)
 8003864:	881b      	ldrh	r3, [r3, #0]
 8003866:	b29b      	uxth	r3, r3
 8003868:	3301      	adds	r3, #1
 800386a:	b29a      	uxth	r2, r3
 800386c:	4b02      	ldr	r3, [pc, #8]	; (8003878 <increaseStepchange+0x2c>)
 800386e:	801a      	strh	r2, [r3, #0]
}
 8003870:	bf00      	nop
 8003872:	46bd      	mov	sp, r7
 8003874:	bc80      	pop	{r7}
 8003876:	4770      	bx	lr
 8003878:	20001370 	.word	0x20001370

0800387c <decreaseStepchange>:

void decreaseStepchange()
{
 800387c:	b480      	push	{r7}
 800387e:	af00      	add	r7, sp, #0
	if (stepChange == 0  )	{
 8003880:	4b09      	ldr	r3, [pc, #36]	; (80038a8 <decreaseStepchange+0x2c>)
 8003882:	881b      	ldrh	r3, [r3, #0]
 8003884:	b29b      	uxth	r3, r3
 8003886:	2b00      	cmp	r3, #0
 8003888:	d103      	bne.n	8003892 <decreaseStepchange+0x16>
		stepChange = MAX_STEP;
 800388a:	4b07      	ldr	r3, [pc, #28]	; (80038a8 <decreaseStepchange+0x2c>)
 800388c:	2264      	movs	r2, #100	; 0x64
 800388e:	801a      	strh	r2, [r3, #0]
	}
	else {
		stepChange--;
	}
}
 8003890:	e006      	b.n	80038a0 <decreaseStepchange+0x24>
		stepChange--;
 8003892:	4b05      	ldr	r3, [pc, #20]	; (80038a8 <decreaseStepchange+0x2c>)
 8003894:	881b      	ldrh	r3, [r3, #0]
 8003896:	b29b      	uxth	r3, r3
 8003898:	3b01      	subs	r3, #1
 800389a:	b29a      	uxth	r2, r3
 800389c:	4b02      	ldr	r3, [pc, #8]	; (80038a8 <decreaseStepchange+0x2c>)
 800389e:	801a      	strh	r2, [r3, #0]
}
 80038a0:	bf00      	nop
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bc80      	pop	{r7}
 80038a6:	4770      	bx	lr
 80038a8:	20001370 	.word	0x20001370

080038ac <getStepchange>:

uint16_t getStepchange()
{
 80038ac:	b480      	push	{r7}
 80038ae:	af00      	add	r7, sp, #0
	return stepChange;
 80038b0:	4b03      	ldr	r3, [pc, #12]	; (80038c0 <getStepchange+0x14>)
 80038b2:	881b      	ldrh	r3, [r3, #0]
 80038b4:	b29b      	uxth	r3, r3
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bc80      	pop	{r7}
 80038bc:	4770      	bx	lr
 80038be:	bf00      	nop
 80038c0:	20001370 	.word	0x20001370

080038c4 <Step_setStepChange>:
void Step_setStepChange(uint16_t value)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b083      	sub	sp, #12
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	4603      	mov	r3, r0
 80038cc:	80fb      	strh	r3, [r7, #6]
	stepChange = value;
 80038ce:	4a04      	ldr	r2, [pc, #16]	; (80038e0 <Step_setStepChange+0x1c>)
 80038d0:	88fb      	ldrh	r3, [r7, #6]
 80038d2:	8013      	strh	r3, [r2, #0]
}
 80038d4:	bf00      	nop
 80038d6:	370c      	adds	r7, #12
 80038d8:	46bd      	mov	sp, r7
 80038da:	bc80      	pop	{r7}
 80038dc:	4770      	bx	lr
 80038de:	bf00      	nop
 80038e0:	20001370 	.word	0x20001370

080038e4 <Step_getPercentChange>:
uint8_t Step_getPercentChange()
{
 80038e4:	b480      	push	{r7}
 80038e6:	af00      	add	r7, sp, #0
	return steppercentChange;
 80038e8:	4b02      	ldr	r3, [pc, #8]	; (80038f4 <Step_getPercentChange+0x10>)
 80038ea:	781b      	ldrb	r3, [r3, #0]
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bc80      	pop	{r7}
 80038f2:	4770      	bx	lr
 80038f4:	20001372 	.word	0x20001372

080038f8 <Step_setPercentChange>:

void Step_setPercentChange(uint8_t percent)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b083      	sub	sp, #12
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	4603      	mov	r3, r0
 8003900:	71fb      	strb	r3, [r7, #7]
	steppercentChange = percent;
 8003902:	4a04      	ldr	r2, [pc, #16]	; (8003914 <Step_setPercentChange+0x1c>)
 8003904:	79fb      	ldrb	r3, [r7, #7]
 8003906:	7013      	strb	r3, [r2, #0]
}
 8003908:	bf00      	nop
 800390a:	370c      	adds	r7, #12
 800390c:	46bd      	mov	sp, r7
 800390e:	bc80      	pop	{r7}
 8003910:	4770      	bx	lr
 8003912:	bf00      	nop
 8003914:	20001372 	.word	0x20001372

08003918 <Step_setChangeMode>:

void Step_setChangeMode(Stepmotor_change_mode_t mode)
{
 8003918:	b480      	push	{r7}
 800391a:	b083      	sub	sp, #12
 800391c:	af00      	add	r7, sp, #0
 800391e:	4603      	mov	r3, r0
 8003920:	71fb      	strb	r3, [r7, #7]
	stepMode = mode;
 8003922:	4a04      	ldr	r2, [pc, #16]	; (8003934 <Step_setChangeMode+0x1c>)
 8003924:	79fb      	ldrb	r3, [r7, #7]
 8003926:	7013      	strb	r3, [r2, #0]
}
 8003928:	bf00      	nop
 800392a:	370c      	adds	r7, #12
 800392c:	46bd      	mov	sp, r7
 800392e:	bc80      	pop	{r7}
 8003930:	4770      	bx	lr
 8003932:	bf00      	nop
 8003934:	20000002 	.word	0x20000002

08003938 <Step_getChangemode>:

Stepmotor_change_mode_t Step_getChangemode()
{
 8003938:	b480      	push	{r7}
 800393a:	af00      	add	r7, sp, #0
	return stepMode;
 800393c:	4b02      	ldr	r3, [pc, #8]	; (8003948 <Step_getChangemode+0x10>)
 800393e:	781b      	ldrb	r3, [r3, #0]
}
 8003940:	4618      	mov	r0, r3
 8003942:	46bd      	mov	sp, r7
 8003944:	bc80      	pop	{r7}
 8003946:	4770      	bx	lr
 8003948:	20000002 	.word	0x20000002

0800394c <Step_step>:

void Step_step()
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b082      	sub	sp, #8
 8003950:	af00      	add	r7, sp, #0
	uint8_t dir = Step_getDir();
 8003952:	f7ff ff4d 	bl	80037f0 <Step_getDir>
 8003956:	4603      	mov	r3, r0
 8003958:	71fb      	strb	r3, [r7, #7]
	if (HAL_GPIO_ReadPin(LIMIT_SWITCH_MAX_GPIO_Port, LIMIT_SWITCH_MAX_Pin) == 0 && dir == STEPM_DIR_INC )	return ;
 800395a:	2120      	movs	r1, #32
 800395c:	4813      	ldr	r0, [pc, #76]	; (80039ac <Step_step+0x60>)
 800395e:	f005 fb13 	bl	8008f88 <HAL_GPIO_ReadPin>
 8003962:	4603      	mov	r3, r0
 8003964:	2b00      	cmp	r3, #0
 8003966:	d102      	bne.n	800396e <Step_step+0x22>
 8003968:	79fb      	ldrb	r3, [r7, #7]
 800396a:	2b01      	cmp	r3, #1
 800396c:	d017      	beq.n	800399e <Step_step+0x52>
	if (HAL_GPIO_ReadPin(LIMIT_SWITCH_MIN_GPIO_Port, LIMIT_SWITCH_MIN_Pin) == 0 && dir == STEPM_DIR_DEC )  return;
 800396e:	2104      	movs	r1, #4
 8003970:	480f      	ldr	r0, [pc, #60]	; (80039b0 <Step_step+0x64>)
 8003972:	f005 fb09 	bl	8008f88 <HAL_GPIO_ReadPin>
 8003976:	4603      	mov	r3, r0
 8003978:	2b00      	cmp	r3, #0
 800397a:	d102      	bne.n	8003982 <Step_step+0x36>
 800397c:	79fb      	ldrb	r3, [r7, #7]
 800397e:	2b02      	cmp	r3, #2
 8003980:	d00f      	beq.n	80039a2 <Step_step+0x56>
	A4988_EnableDriver();
 8003982:	f003 f95b 	bl	8006c3c <A4988_EnableDriver>
	A4988_StepByStep(getStepchange(), dir );
 8003986:	f7ff ff91 	bl	80038ac <getStepchange>
 800398a:	4603      	mov	r3, r0
 800398c:	461a      	mov	r2, r3
 800398e:	79fb      	ldrb	r3, [r7, #7]
 8003990:	4619      	mov	r1, r3
 8003992:	4610      	mov	r0, r2
 8003994:	f003 f98e 	bl	8006cb4 <A4988_StepByStep>
	A4988_DisableDriver();
 8003998:	f003 f96e 	bl	8006c78 <A4988_DisableDriver>
 800399c:	e002      	b.n	80039a4 <Step_step+0x58>
	if (HAL_GPIO_ReadPin(LIMIT_SWITCH_MAX_GPIO_Port, LIMIT_SWITCH_MAX_Pin) == 0 && dir == STEPM_DIR_INC )	return ;
 800399e:	bf00      	nop
 80039a0:	e000      	b.n	80039a4 <Step_step+0x58>
	if (HAL_GPIO_ReadPin(LIMIT_SWITCH_MIN_GPIO_Port, LIMIT_SWITCH_MIN_Pin) == 0 && dir == STEPM_DIR_DEC )  return;
 80039a2:	bf00      	nop

}
 80039a4:	3708      	adds	r7, #8
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	bf00      	nop
 80039ac:	40010800 	.word	0x40010800
 80039b0:	40010c00 	.word	0x40010c00

080039b4 <Step_percent>:

void Step_percent()
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b082      	sub	sp, #8
 80039b8:	af00      	add	r7, sp, #0
	uint8_t dir = Step_getDir();
 80039ba:	f7ff ff19 	bl	80037f0 <Step_getDir>
 80039be:	4603      	mov	r3, r0
 80039c0:	71fb      	strb	r3, [r7, #7]
	if (HAL_GPIO_ReadPin(LIMIT_SWITCH_MAX_GPIO_Port, LIMIT_SWITCH_MAX_Pin) == 0 && dir == STEPM_DIR_INC )	return ;
 80039c2:	2120      	movs	r1, #32
 80039c4:	4813      	ldr	r0, [pc, #76]	; (8003a14 <Step_percent+0x60>)
 80039c6:	f005 fadf 	bl	8008f88 <HAL_GPIO_ReadPin>
 80039ca:	4603      	mov	r3, r0
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d102      	bne.n	80039d6 <Step_percent+0x22>
 80039d0:	79fb      	ldrb	r3, [r7, #7]
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	d018      	beq.n	8003a08 <Step_percent+0x54>
	if (HAL_GPIO_ReadPin(LIMIT_SWITCH_MIN_GPIO_Port, LIMIT_SWITCH_MIN_Pin) && dir == STEPM_DIR_DEC )  return;
 80039d6:	2104      	movs	r1, #4
 80039d8:	480f      	ldr	r0, [pc, #60]	; (8003a18 <Step_percent+0x64>)
 80039da:	f005 fad5 	bl	8008f88 <HAL_GPIO_ReadPin>
 80039de:	4603      	mov	r3, r0
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d002      	beq.n	80039ea <Step_percent+0x36>
 80039e4:	79fb      	ldrb	r3, [r7, #7]
 80039e6:	2b02      	cmp	r3, #2
 80039e8:	d010      	beq.n	8003a0c <Step_percent+0x58>
	uint16_t stepChange = (uint16_t)(Step_getPercentChange() * MAX_STEP / 100);
 80039ea:	f7ff ff7b 	bl	80038e4 <Step_getPercentChange>
 80039ee:	4603      	mov	r3, r0
 80039f0:	80bb      	strh	r3, [r7, #4]
	A4988_EnableDriver();
 80039f2:	f003 f923 	bl	8006c3c <A4988_EnableDriver>
	A4988_StepByStep(stepChange, dir);
 80039f6:	88bb      	ldrh	r3, [r7, #4]
 80039f8:	79fa      	ldrb	r2, [r7, #7]
 80039fa:	4611      	mov	r1, r2
 80039fc:	4618      	mov	r0, r3
 80039fe:	f003 f959 	bl	8006cb4 <A4988_StepByStep>
	A4988_DisableDriver();
 8003a02:	f003 f939 	bl	8006c78 <A4988_DisableDriver>
 8003a06:	e002      	b.n	8003a0e <Step_percent+0x5a>
	if (HAL_GPIO_ReadPin(LIMIT_SWITCH_MAX_GPIO_Port, LIMIT_SWITCH_MAX_Pin) == 0 && dir == STEPM_DIR_INC )	return ;
 8003a08:	bf00      	nop
 8003a0a:	e000      	b.n	8003a0e <Step_percent+0x5a>
	if (HAL_GPIO_ReadPin(LIMIT_SWITCH_MIN_GPIO_Port, LIMIT_SWITCH_MIN_Pin) && dir == STEPM_DIR_DEC )  return;
 8003a0c:	bf00      	nop
}
 8003a0e:	3708      	adds	r7, #8
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}
 8003a14:	40010800 	.word	0x40010800
 8003a18:	40010c00 	.word	0x40010c00

08003a1c <initButton>:
static STEP_t stepValorDir = STEP_VAL;

//, s_list *mylist, Station_t *myStation

void initButton(DISPLAY_MODE_t *displaymode)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b083      	sub	sp, #12
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
	__MY_DISPLAY_MODE = displaymode;
 8003a24:	4a03      	ldr	r2, [pc, #12]	; (8003a34 <initButton+0x18>)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6013      	str	r3, [r2, #0]
//	myStation.ssNode_list = mylist;
//	myStation = myStation;
}
 8003a2a:	bf00      	nop
 8003a2c:	370c      	adds	r7, #12
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bc80      	pop	{r7}
 8003a32:	4770      	bx	lr
 8003a34:	20001374 	.word	0x20001374

08003a38 <setStepValorDir>:

void setStepValorDir (STEP_t ValorDir)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b083      	sub	sp, #12
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	4603      	mov	r3, r0
 8003a40:	71fb      	strb	r3, [r7, #7]
	stepValorDir = ValorDir;
 8003a42:	4a04      	ldr	r2, [pc, #16]	; (8003a54 <setStepValorDir+0x1c>)
 8003a44:	79fb      	ldrb	r3, [r7, #7]
 8003a46:	7013      	strb	r3, [r2, #0]
}
 8003a48:	bf00      	nop
 8003a4a:	370c      	adds	r7, #12
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bc80      	pop	{r7}
 8003a50:	4770      	bx	lr
 8003a52:	bf00      	nop
 8003a54:	2000137b 	.word	0x2000137b

08003a58 <getStepValorDir>:

STEP_t getStepValorDir()
{
 8003a58:	b480      	push	{r7}
 8003a5a:	af00      	add	r7, sp, #0
	return stepValorDir;
 8003a5c:	4b02      	ldr	r3, [pc, #8]	; (8003a68 <getStepValorDir+0x10>)
 8003a5e:	781b      	ldrb	r3, [r3, #0]
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bc80      	pop	{r7}
 8003a66:	4770      	bx	lr
 8003a68:	2000137b 	.word	0x2000137b

08003a6c <getCurswitch>:
//		return clearPosY;
//	}
//}

SWITCH_t getCurswitch()
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	af00      	add	r7, sp, #0
	return curSwitch;
 8003a70:	4b02      	ldr	r3, [pc, #8]	; (8003a7c <getCurswitch+0x10>)
 8003a72:	781b      	ldrb	r3, [r3, #0]
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bc80      	pop	{r7}
 8003a7a:	4770      	bx	lr
 8003a7c:	20000003 	.word	0x20000003

08003a80 <getClearflag>:
	curSwitch = ONorOFF;
}


uint8_t getClearflag()
{
 8003a80:	b480      	push	{r7}
 8003a82:	af00      	add	r7, sp, #0
	return clearflag;
 8003a84:	4b03      	ldr	r3, [pc, #12]	; (8003a94 <getClearflag+0x14>)
 8003a86:	781b      	ldrb	r3, [r3, #0]
 8003a88:	b2db      	uxtb	r3, r3
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bc80      	pop	{r7}
 8003a90:	4770      	bx	lr
 8003a92:	bf00      	nop
 8003a94:	2000137a 	.word	0x2000137a

08003a98 <setClearflag>:

void setClearflag(uint8_t ENorDIS)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b083      	sub	sp, #12
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	71fb      	strb	r3, [r7, #7]
	clearflag = ENorDIS;
 8003aa2:	4a04      	ldr	r2, [pc, #16]	; (8003ab4 <setClearflag+0x1c>)
 8003aa4:	79fb      	ldrb	r3, [r7, #7]
 8003aa6:	7013      	strb	r3, [r2, #0]
}
 8003aa8:	bf00      	nop
 8003aaa:	370c      	adds	r7, #12
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bc80      	pop	{r7}
 8003ab0:	4770      	bx	lr
 8003ab2:	bf00      	nop
 8003ab4:	2000137a 	.word	0x2000137a

08003ab8 <switchcurControl>:


void switchcurControl()
{
 8003ab8:	b480      	push	{r7}
 8003aba:	af00      	add	r7, sp, #0
	switch (curControl)	{
 8003abc:	4b09      	ldr	r3, [pc, #36]	; (8003ae4 <switchcurControl+0x2c>)
 8003abe:	781b      	ldrb	r3, [r3, #0]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d005      	beq.n	8003ad0 <switchcurControl+0x18>
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d107      	bne.n	8003ad8 <switchcurControl+0x20>
	case CONTROL_TRANS:
		curControl = CONTROL_STEP;
 8003ac8:	4b06      	ldr	r3, [pc, #24]	; (8003ae4 <switchcurControl+0x2c>)
 8003aca:	2200      	movs	r2, #0
 8003acc:	701a      	strb	r2, [r3, #0]
		break;
 8003ace:	e004      	b.n	8003ada <switchcurControl+0x22>
	case CONTROL_STEP:
		curControl = CONTROL_TRANS;
 8003ad0:	4b04      	ldr	r3, [pc, #16]	; (8003ae4 <switchcurControl+0x2c>)
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	701a      	strb	r2, [r3, #0]
		break;
 8003ad6:	e000      	b.n	8003ada <switchcurControl+0x22>
	default:
		break;
 8003ad8:	bf00      	nop
	}
}
 8003ada:	bf00      	nop
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bc80      	pop	{r7}
 8003ae0:	4770      	bx	lr
 8003ae2:	bf00      	nop
 8003ae4:	20001378 	.word	0x20001378

08003ae8 <getcurControl>:

CONTROL_t getcurControl()
{
 8003ae8:	b480      	push	{r7}
 8003aea:	af00      	add	r7, sp, #0
	return curControl;
 8003aec:	4b02      	ldr	r3, [pc, #8]	; (8003af8 <getcurControl+0x10>)
 8003aee:	781b      	ldrb	r3, [r3, #0]
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bc80      	pop	{r7}
 8003af6:	4770      	bx	lr
 8003af8:	20001378 	.word	0x20001378

08003afc <nextMonitor>:

void nextMonitor(uint8_t volatile  * curMonitor, uint8_t max)	{
 8003afc:	b480      	push	{r7}
 8003afe:	b083      	sub	sp, #12
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
 8003b04:	460b      	mov	r3, r1
 8003b06:	70fb      	strb	r3, [r7, #3]
	if (*curMonitor >= max )		{
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	781b      	ldrb	r3, [r3, #0]
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	78fa      	ldrb	r2, [r7, #3]
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d803      	bhi.n	8003b1c <nextMonitor+0x20>
		*curMonitor = 0;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2200      	movs	r2, #0
 8003b18:	701a      	strb	r2, [r3, #0]
	}
	else {
		(*curMonitor)++;
	}
}
 8003b1a:	e006      	b.n	8003b2a <nextMonitor+0x2e>
		(*curMonitor)++;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	781b      	ldrb	r3, [r3, #0]
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	3301      	adds	r3, #1
 8003b24:	b2da      	uxtb	r2, r3
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	701a      	strb	r2, [r3, #0]
}
 8003b2a:	bf00      	nop
 8003b2c:	370c      	adds	r7, #12
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bc80      	pop	{r7}
 8003b32:	4770      	bx	lr

08003b34 <previousMonitor>:

void previousMonitor(uint8_t volatile  * curMonitor, uint8_t max)	{
 8003b34:	b480      	push	{r7}
 8003b36:	b083      	sub	sp, #12
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
 8003b3c:	460b      	mov	r3, r1
 8003b3e:	70fb      	strb	r3, [r7, #3]
	if (*curMonitor == 0 )		{
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	781b      	ldrb	r3, [r3, #0]
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d103      	bne.n	8003b52 <previousMonitor+0x1e>
		*curMonitor = max ;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	78fa      	ldrb	r2, [r7, #3]
 8003b4e:	701a      	strb	r2, [r3, #0]
	}
	else {
		(*curMonitor)--;
	}
}
 8003b50:	e006      	b.n	8003b60 <previousMonitor+0x2c>
		(*curMonitor)--;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	781b      	ldrb	r3, [r3, #0]
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	3b01      	subs	r3, #1
 8003b5a:	b2da      	uxtb	r2, r3
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	701a      	strb	r2, [r3, #0]
}
 8003b60:	bf00      	nop
 8003b62:	370c      	adds	r7, #12
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bc80      	pop	{r7}
 8003b68:	4770      	bx	lr
	...

08003b6c <get_curMonitor>:

uint8_t get_curMonitor(void)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	af00      	add	r7, sp, #0
	return curMonitor;
 8003b70:	4b03      	ldr	r3, [pc, #12]	; (8003b80 <get_curMonitor+0x14>)
 8003b72:	781b      	ldrb	r3, [r3, #0]
 8003b74:	b2db      	uxtb	r3, r3
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bc80      	pop	{r7}
 8003b7c:	4770      	bx	lr
 8003b7e:	bf00      	nop
 8003b80:	20001379 	.word	0x20001379

08003b84 <setcurMonitor>:
void setcurMonitor(uint8_t index)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b083      	sub	sp, #12
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	71fb      	strb	r3, [r7, #7]
	curMonitor = index;
 8003b8e:	4a04      	ldr	r2, [pc, #16]	; (8003ba0 <setcurMonitor+0x1c>)
 8003b90:	79fb      	ldrb	r3, [r7, #7]
 8003b92:	7013      	strb	r3, [r2, #0]
}
 8003b94:	bf00      	nop
 8003b96:	370c      	adds	r7, #12
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bc80      	pop	{r7}
 8003b9c:	4770      	bx	lr
 8003b9e:	bf00      	nop
 8003ba0:	20001379 	.word	0x20001379

08003ba4 <buttonMENU_handler>:



void buttonMENU_handler()
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	af00      	add	r7, sp, #0
	switch(*__MY_DISPLAY_MODE)	{
 8003ba8:	4b38      	ldr	r3, [pc, #224]	; (8003c8c <buttonMENU_handler+0xe8>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	781b      	ldrb	r3, [r3, #0]
 8003bae:	2b09      	cmp	r3, #9
 8003bb0:	d869      	bhi.n	8003c86 <buttonMENU_handler+0xe2>
 8003bb2:	a201      	add	r2, pc, #4	; (adr r2, 8003bb8 <buttonMENU_handler+0x14>)
 8003bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bb8:	08003be1 	.word	0x08003be1
 8003bbc:	08003bf7 	.word	0x08003bf7
 8003bc0:	08003c07 	.word	0x08003c07
 8003bc4:	08003c17 	.word	0x08003c17
 8003bc8:	08003c27 	.word	0x08003c27
 8003bcc:	08003c37 	.word	0x08003c37
 8003bd0:	08003c67 	.word	0x08003c67
 8003bd4:	08003c77 	.word	0x08003c77
 8003bd8:	08003c47 	.word	0x08003c47
 8003bdc:	08003c57 	.word	0x08003c57
	case HOME:
		*__MY_DISPLAY_MODE = MONITOR;
 8003be0:	4b2a      	ldr	r3, [pc, #168]	; (8003c8c <buttonMENU_handler+0xe8>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	2203      	movs	r2, #3
 8003be6:	701a      	strb	r2, [r3, #0]
		setcurMonitor(0);
 8003be8:	2000      	movs	r0, #0
 8003bea:	f7ff ffcb 	bl	8003b84 <setcurMonitor>
		setClearflag(ENABLE);
 8003bee:	2001      	movs	r0, #1
 8003bf0:	f7ff ff52 	bl	8003a98 <setClearflag>
		break;
 8003bf4:	e048      	b.n	8003c88 <buttonMENU_handler+0xe4>
	case COUNTDOWN_SW_OFF:
		*__MY_DISPLAY_MODE = MONITOR;
 8003bf6:	4b25      	ldr	r3, [pc, #148]	; (8003c8c <buttonMENU_handler+0xe8>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	2203      	movs	r2, #3
 8003bfc:	701a      	strb	r2, [r3, #0]
		setClearflag(ENABLE);
 8003bfe:	2001      	movs	r0, #1
 8003c00:	f7ff ff4a 	bl	8003a98 <setClearflag>
		break;
 8003c04:	e040      	b.n	8003c88 <buttonMENU_handler+0xe4>
	case AFTER_SW_OFF:
		*__MY_DISPLAY_MODE = MONITOR;
 8003c06:	4b21      	ldr	r3, [pc, #132]	; (8003c8c <buttonMENU_handler+0xe8>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	2203      	movs	r2, #3
 8003c0c:	701a      	strb	r2, [r3, #0]
		setClearflag(ENABLE);
 8003c0e:	2001      	movs	r0, #1
 8003c10:	f7ff ff42 	bl	8003a98 <setClearflag>
		break;
 8003c14:	e038      	b.n	8003c88 <buttonMENU_handler+0xe4>
	case MONITOR:
		*__MY_DISPLAY_MODE = MENU_CONTROL;
 8003c16:	4b1d      	ldr	r3, [pc, #116]	; (8003c8c <buttonMENU_handler+0xe8>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	2204      	movs	r2, #4
 8003c1c:	701a      	strb	r2, [r3, #0]
		setClearflag(ENABLE);
 8003c1e:	2001      	movs	r0, #1
 8003c20:	f7ff ff3a 	bl	8003a98 <setClearflag>
		break;
 8003c24:	e030      	b.n	8003c88 <buttonMENU_handler+0xe4>
	case MENU_CONTROL:
		*__MY_DISPLAY_MODE = HOME;
 8003c26:	4b19      	ldr	r3, [pc, #100]	; (8003c8c <buttonMENU_handler+0xe8>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	701a      	strb	r2, [r3, #0]
		setClearflag(ENABLE);
 8003c2e:	2001      	movs	r0, #1
 8003c30:	f7ff ff32 	bl	8003a98 <setClearflag>
		break;
 8003c34:	e028      	b.n	8003c88 <buttonMENU_handler+0xe4>
	case VOLTAGE_CONTROL:
		*__MY_DISPLAY_MODE = HOME;
 8003c36:	4b15      	ldr	r3, [pc, #84]	; (8003c8c <buttonMENU_handler+0xe8>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	701a      	strb	r2, [r3, #0]
		setClearflag(ENABLE);
 8003c3e:	2001      	movs	r0, #1
 8003c40:	f7ff ff2a 	bl	8003a98 <setClearflag>
		break;
 8003c44:	e020      	b.n	8003c88 <buttonMENU_handler+0xe4>
	case STEP_VAL_CONTROL:
		*__MY_DISPLAY_MODE = HOME;
 8003c46:	4b11      	ldr	r3, [pc, #68]	; (8003c8c <buttonMENU_handler+0xe8>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	701a      	strb	r2, [r3, #0]
		setClearflag(ENABLE);
 8003c4e:	2001      	movs	r0, #1
 8003c50:	f7ff ff22 	bl	8003a98 <setClearflag>
		break;
 8003c54:	e018      	b.n	8003c88 <buttonMENU_handler+0xe4>
	case STEP_DIR_CONTROL:
		*__MY_DISPLAY_MODE = HOME;
 8003c56:	4b0d      	ldr	r3, [pc, #52]	; (8003c8c <buttonMENU_handler+0xe8>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	701a      	strb	r2, [r3, #0]
		setClearflag(ENABLE);
 8003c5e:	2001      	movs	r0, #1
 8003c60:	f7ff ff1a 	bl	8003a98 <setClearflag>
			break;
 8003c64:	e010      	b.n	8003c88 <buttonMENU_handler+0xe4>
	case ON_OFF_CONTROL:
		*__MY_DISPLAY_MODE = HOME;
 8003c66:	4b09      	ldr	r3, [pc, #36]	; (8003c8c <buttonMENU_handler+0xe8>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	701a      	strb	r2, [r3, #0]
		setClearflag(ENABLE);
 8003c6e:	2001      	movs	r0, #1
 8003c70:	f7ff ff12 	bl	8003a98 <setClearflag>
		break;
 8003c74:	e008      	b.n	8003c88 <buttonMENU_handler+0xe4>
	case COMPLETE_CONTROL:
		*__MY_DISPLAY_MODE = HOME;
 8003c76:	4b05      	ldr	r3, [pc, #20]	; (8003c8c <buttonMENU_handler+0xe8>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	701a      	strb	r2, [r3, #0]
		setClearflag(ENABLE);
 8003c7e:	2001      	movs	r0, #1
 8003c80:	f7ff ff0a 	bl	8003a98 <setClearflag>
		break;
 8003c84:	e000      	b.n	8003c88 <buttonMENU_handler+0xe4>
	default:
		break;
 8003c86:	bf00      	nop
	}
}
 8003c88:	bf00      	nop
 8003c8a:	bd80      	pop	{r7, pc}
 8003c8c:	20001374 	.word	0x20001374

08003c90 <buttonOK_handler>:
void buttonOK_handler()
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	af00      	add	r7, sp, #0
	switch(*__MY_DISPLAY_MODE)	{
 8003c94:	4b49      	ldr	r3, [pc, #292]	; (8003dbc <buttonOK_handler+0x12c>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	781b      	ldrb	r3, [r3, #0]
 8003c9a:	2b09      	cmp	r3, #9
 8003c9c:	f200 8088 	bhi.w	8003db0 <buttonOK_handler+0x120>
 8003ca0:	a201      	add	r2, pc, #4	; (adr r2, 8003ca8 <buttonOK_handler+0x18>)
 8003ca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ca6:	bf00      	nop
 8003ca8:	08003db1 	.word	0x08003db1
 8003cac:	08003db1 	.word	0x08003db1
 8003cb0:	08003db1 	.word	0x08003db1
 8003cb4:	08003db1 	.word	0x08003db1
 8003cb8:	08003cd1 	.word	0x08003cd1
 8003cbc:	08003d05 	.word	0x08003d05
 8003cc0:	08003d65 	.word	0x08003d65
 8003cc4:	08003da1 	.word	0x08003da1
 8003cc8:	08003d45 	.word	0x08003d45
 8003ccc:	08003d55 	.word	0x08003d55
	case AFTER_SW_OFF:
		break;
	case MONITOR:
		break;
	case MENU_CONTROL:
		if (getcurControl() == CONTROL_TRANS)	{
 8003cd0:	f7ff ff0a 	bl	8003ae8 <getcurControl>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d107      	bne.n	8003cea <buttonOK_handler+0x5a>
			*__MY_DISPLAY_MODE = ON_OFF_CONTROL;
 8003cda:	4b38      	ldr	r3, [pc, #224]	; (8003dbc <buttonOK_handler+0x12c>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	2206      	movs	r2, #6
 8003ce0:	701a      	strb	r2, [r3, #0]
			setClearflag(ENABLE);
 8003ce2:	2001      	movs	r0, #1
 8003ce4:	f7ff fed8 	bl	8003a98 <setClearflag>
		}
		else if (getcurControl() == CONTROL_STEP)	{
			*__MY_DISPLAY_MODE = VOLTAGE_CONTROL;
			setClearflag(ENABLE);
		}
		break;
 8003ce8:	e064      	b.n	8003db4 <buttonOK_handler+0x124>
		else if (getcurControl() == CONTROL_STEP)	{
 8003cea:	f7ff fefd 	bl	8003ae8 <getcurControl>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d15f      	bne.n	8003db4 <buttonOK_handler+0x124>
			*__MY_DISPLAY_MODE = VOLTAGE_CONTROL;
 8003cf4:	4b31      	ldr	r3, [pc, #196]	; (8003dbc <buttonOK_handler+0x12c>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	2205      	movs	r2, #5
 8003cfa:	701a      	strb	r2, [r3, #0]
			setClearflag(ENABLE);
 8003cfc:	2001      	movs	r0, #1
 8003cfe:	f7ff fecb 	bl	8003a98 <setClearflag>
		break;
 8003d02:	e057      	b.n	8003db4 <buttonOK_handler+0x124>
	case VOLTAGE_CONTROL:
		switch (getStepValorDir())	{
 8003d04:	f7ff fea8 	bl	8003a58 <getStepValorDir>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	2b02      	cmp	r3, #2
 8003d0c:	d010      	beq.n	8003d30 <buttonOK_handler+0xa0>
 8003d0e:	2b02      	cmp	r3, #2
 8003d10:	dc13      	bgt.n	8003d3a <buttonOK_handler+0xaa>
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d002      	beq.n	8003d1c <buttonOK_handler+0x8c>
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d005      	beq.n	8003d26 <buttonOK_handler+0x96>
			break;
		case STEP_CONFIRM:
			triggerTaskflag(TASK_CTRL_STEPMOR, FLAG_EN);
			break;
		default:
			break;
 8003d1a:	e00e      	b.n	8003d3a <buttonOK_handler+0xaa>
			*__MY_DISPLAY_MODE = STEP_VAL_CONTROL;
 8003d1c:	4b27      	ldr	r3, [pc, #156]	; (8003dbc <buttonOK_handler+0x12c>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	2208      	movs	r2, #8
 8003d22:	701a      	strb	r2, [r3, #0]
			break;
 8003d24:	e00a      	b.n	8003d3c <buttonOK_handler+0xac>
			*__MY_DISPLAY_MODE = STEP_DIR_CONTROL;
 8003d26:	4b25      	ldr	r3, [pc, #148]	; (8003dbc <buttonOK_handler+0x12c>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	2209      	movs	r2, #9
 8003d2c:	701a      	strb	r2, [r3, #0]
			break;
 8003d2e:	e005      	b.n	8003d3c <buttonOK_handler+0xac>
			triggerTaskflag(TASK_CTRL_STEPMOR, FLAG_EN);
 8003d30:	2101      	movs	r1, #1
 8003d32:	2006      	movs	r0, #6
 8003d34:	f001 fc9a 	bl	800566c <triggerTaskflag>
			break;
 8003d38:	e000      	b.n	8003d3c <buttonOK_handler+0xac>
			break;
 8003d3a:	bf00      	nop
		}
		setClearflag(ENABLE);
 8003d3c:	2001      	movs	r0, #1
 8003d3e:	f7ff feab 	bl	8003a98 <setClearflag>
		break;
 8003d42:	e038      	b.n	8003db6 <buttonOK_handler+0x126>
	case STEP_VAL_CONTROL:
		*__MY_DISPLAY_MODE = VOLTAGE_CONTROL;
 8003d44:	4b1d      	ldr	r3, [pc, #116]	; (8003dbc <buttonOK_handler+0x12c>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	2205      	movs	r2, #5
 8003d4a:	701a      	strb	r2, [r3, #0]
		setClearflag(ENABLE);
 8003d4c:	2001      	movs	r0, #1
 8003d4e:	f7ff fea3 	bl	8003a98 <setClearflag>
		break;
 8003d52:	e030      	b.n	8003db6 <buttonOK_handler+0x126>
	case STEP_DIR_CONTROL:
		*__MY_DISPLAY_MODE = VOLTAGE_CONTROL;
 8003d54:	4b19      	ldr	r3, [pc, #100]	; (8003dbc <buttonOK_handler+0x12c>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	2205      	movs	r2, #5
 8003d5a:	701a      	strb	r2, [r3, #0]
		setClearflag(ENABLE);
 8003d5c:	2001      	movs	r0, #1
 8003d5e:	f7ff fe9b 	bl	8003a98 <setClearflag>
		break;
 8003d62:	e028      	b.n	8003db6 <buttonOK_handler+0x126>
	case ON_OFF_CONTROL:
		// switch MBA
		if(getCurswitch() == SW_ON)	{
 8003d64:	f7ff fe82 	bl	8003a6c <getCurswitch>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d107      	bne.n	8003d7e <buttonOK_handler+0xee>
			myStation.MBAstate = switchContactor(MBA_ON);
 8003d6e:	2001      	movs	r0, #1
 8003d70:	f7fe fade 	bl	8002330 <switchContactor>
 8003d74:	4603      	mov	r3, r0
 8003d76:	461a      	mov	r2, r3
 8003d78:	4b11      	ldr	r3, [pc, #68]	; (8003dc0 <buttonOK_handler+0x130>)
 8003d7a:	719a      	strb	r2, [r3, #6]
 8003d7c:	e006      	b.n	8003d8c <buttonOK_handler+0xfc>


		}
		else {
			myStation.MBAstate = switchContactor(MBA_OFF);
 8003d7e:	2002      	movs	r0, #2
 8003d80:	f7fe fad6 	bl	8002330 <switchContactor>
 8003d84:	4603      	mov	r3, r0
 8003d86:	461a      	mov	r2, r3
 8003d88:	4b0d      	ldr	r3, [pc, #52]	; (8003dc0 <buttonOK_handler+0x130>)
 8003d8a:	719a      	strb	r2, [r3, #6]
		}

		setSwitchtime();
 8003d8c:	f7fc fc20 	bl	80005d0 <setSwitchtime>
		*__MY_DISPLAY_MODE = COMPLETE_CONTROL;
 8003d90:	4b0a      	ldr	r3, [pc, #40]	; (8003dbc <buttonOK_handler+0x12c>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	2207      	movs	r2, #7
 8003d96:	701a      	strb	r2, [r3, #0]
		setClearflag(ENABLE);
 8003d98:	2001      	movs	r0, #1
 8003d9a:	f7ff fe7d 	bl	8003a98 <setClearflag>
		break;
 8003d9e:	e00a      	b.n	8003db6 <buttonOK_handler+0x126>
	case COMPLETE_CONTROL:
		*__MY_DISPLAY_MODE = ON_OFF_CONTROL;
 8003da0:	4b06      	ldr	r3, [pc, #24]	; (8003dbc <buttonOK_handler+0x12c>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	2206      	movs	r2, #6
 8003da6:	701a      	strb	r2, [r3, #0]
		setClearflag(ENABLE);
 8003da8:	2001      	movs	r0, #1
 8003daa:	f7ff fe75 	bl	8003a98 <setClearflag>
		break;
 8003dae:	e002      	b.n	8003db6 <buttonOK_handler+0x126>
	default:
		break;
 8003db0:	bf00      	nop
 8003db2:	e000      	b.n	8003db6 <buttonOK_handler+0x126>
		break;
 8003db4:	bf00      	nop
	}
}
 8003db6:	bf00      	nop
 8003db8:	bd80      	pop	{r7, pc}
 8003dba:	bf00      	nop
 8003dbc:	20001374 	.word	0x20001374
 8003dc0:	20000478 	.word	0x20000478

08003dc4 <buttonDOWN_handler>:
void buttonDOWN_handler()
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	af00      	add	r7, sp, #0
	switch(*__MY_DISPLAY_MODE)	{
 8003dc8:	4b36      	ldr	r3, [pc, #216]	; (8003ea4 <buttonDOWN_handler+0xe0>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	781b      	ldrb	r3, [r3, #0]
 8003dce:	2b09      	cmp	r3, #9
 8003dd0:	d864      	bhi.n	8003e9c <buttonDOWN_handler+0xd8>
 8003dd2:	a201      	add	r2, pc, #4	; (adr r2, 8003dd8 <buttonDOWN_handler+0x14>)
 8003dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dd8:	08003e9d 	.word	0x08003e9d
 8003ddc:	08003e9d 	.word	0x08003e9d
 8003de0:	08003e9d 	.word	0x08003e9d
 8003de4:	08003e01 	.word	0x08003e01
 8003de8:	08003e19 	.word	0x08003e19
 8003dec:	08003e25 	.word	0x08003e25
 8003df0:	08003e77 	.word	0x08003e77
 8003df4:	08003e9d 	.word	0x08003e9d
 8003df8:	08003e5f 	.word	0x08003e5f
 8003dfc:	08003e6b 	.word	0x08003e6b
		break;
	case AFTER_SW_OFF:
		break;
	case MONITOR:
		// move to next sensor ID
		nextMonitor(&curMonitor, myStation.ssNode_list->length);
 8003e00:	4b29      	ldr	r3, [pc, #164]	; (8003ea8 <buttonDOWN_handler+0xe4>)
 8003e02:	68db      	ldr	r3, [r3, #12]
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	b2db      	uxtb	r3, r3
 8003e08:	4619      	mov	r1, r3
 8003e0a:	4828      	ldr	r0, [pc, #160]	; (8003eac <buttonDOWN_handler+0xe8>)
 8003e0c:	f7ff fe76 	bl	8003afc <nextMonitor>
		setClearflag(ENABLE);
 8003e10:	2001      	movs	r0, #1
 8003e12:	f7ff fe41 	bl	8003a98 <setClearflag>
		break;
 8003e16:	e042      	b.n	8003e9e <buttonDOWN_handler+0xda>
	case MENU_CONTROL:
		switchcurControl();
 8003e18:	f7ff fe4e 	bl	8003ab8 <switchcurControl>
		setClearflag(ENABLE);
 8003e1c:	2001      	movs	r0, #1
 8003e1e:	f7ff fe3b 	bl	8003a98 <setClearflag>
		break;
 8003e22:	e03c      	b.n	8003e9e <buttonDOWN_handler+0xda>
	case VOLTAGE_CONTROL:
		switch(getStepValorDir())	{
 8003e24:	f7ff fe18 	bl	8003a58 <getStepValorDir>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	2b02      	cmp	r3, #2
 8003e2c:	d00e      	beq.n	8003e4c <buttonDOWN_handler+0x88>
 8003e2e:	2b02      	cmp	r3, #2
 8003e30:	dc10      	bgt.n	8003e54 <buttonDOWN_handler+0x90>
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d002      	beq.n	8003e3c <buttonDOWN_handler+0x78>
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	d004      	beq.n	8003e44 <buttonDOWN_handler+0x80>
			break;
		case STEP_CONFIRM:
			setStepValorDir(STEP_VAL);
			break;
		default:
			break;
 8003e3a:	e00b      	b.n	8003e54 <buttonDOWN_handler+0x90>
			setStepValorDir(STEP_DIR);
 8003e3c:	2001      	movs	r0, #1
 8003e3e:	f7ff fdfb 	bl	8003a38 <setStepValorDir>
			break;
 8003e42:	e008      	b.n	8003e56 <buttonDOWN_handler+0x92>
			setStepValorDir(STEP_CONFIRM);
 8003e44:	2002      	movs	r0, #2
 8003e46:	f7ff fdf7 	bl	8003a38 <setStepValorDir>
			break;
 8003e4a:	e004      	b.n	8003e56 <buttonDOWN_handler+0x92>
			setStepValorDir(STEP_VAL);
 8003e4c:	2000      	movs	r0, #0
 8003e4e:	f7ff fdf3 	bl	8003a38 <setStepValorDir>
			break;
 8003e52:	e000      	b.n	8003e56 <buttonDOWN_handler+0x92>
			break;
 8003e54:	bf00      	nop
		}
		setClearflag(ENABLE);
 8003e56:	2001      	movs	r0, #1
 8003e58:	f7ff fe1e 	bl	8003a98 <setClearflag>
		break;
 8003e5c:	e01f      	b.n	8003e9e <buttonDOWN_handler+0xda>
	case STEP_VAL_CONTROL:
		// decrease step value
		decreaseStepchange();
 8003e5e:	f7ff fd0d 	bl	800387c <decreaseStepchange>
		setClearflag(ENABLE);
 8003e62:	2001      	movs	r0, #1
 8003e64:	f7ff fe18 	bl	8003a98 <setClearflag>
		break;
 8003e68:	e019      	b.n	8003e9e <buttonDOWN_handler+0xda>
	case STEP_DIR_CONTROL:
		Step_toggleDir();
 8003e6a:	f7ff fcdb 	bl	8003824 <Step_toggleDir>
		setClearflag(ENABLE);
 8003e6e:	2001      	movs	r0, #1
 8003e70:	f7ff fe12 	bl	8003a98 <setClearflag>
		break;
 8003e74:	e013      	b.n	8003e9e <buttonDOWN_handler+0xda>
	case ON_OFF_CONTROL:
		//  switch ON/OFF
		switch (curSwitch) {
 8003e76:	4b0e      	ldr	r3, [pc, #56]	; (8003eb0 <buttonDOWN_handler+0xec>)
 8003e78:	781b      	ldrb	r3, [r3, #0]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d005      	beq.n	8003e8a <buttonDOWN_handler+0xc6>
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	d107      	bne.n	8003e92 <buttonDOWN_handler+0xce>
		case SW_ON:
			curSwitch = SW_OFF;
 8003e82:	4b0b      	ldr	r3, [pc, #44]	; (8003eb0 <buttonDOWN_handler+0xec>)
 8003e84:	2200      	movs	r2, #0
 8003e86:	701a      	strb	r2, [r3, #0]
			break;
 8003e88:	e004      	b.n	8003e94 <buttonDOWN_handler+0xd0>
		case SW_OFF:
			curSwitch = SW_ON;
 8003e8a:	4b09      	ldr	r3, [pc, #36]	; (8003eb0 <buttonDOWN_handler+0xec>)
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	701a      	strb	r2, [r3, #0]
			break;
 8003e90:	e000      	b.n	8003e94 <buttonDOWN_handler+0xd0>
		default:
			break;
 8003e92:	bf00      	nop
		}
		setClearflag(ENABLE);
 8003e94:	2001      	movs	r0, #1
 8003e96:	f7ff fdff 	bl	8003a98 <setClearflag>
		break;
 8003e9a:	e000      	b.n	8003e9e <buttonDOWN_handler+0xda>
	case COMPLETE_CONTROL:
		break;
	default:
		break;
 8003e9c:	bf00      	nop
	}
}
 8003e9e:	bf00      	nop
 8003ea0:	bd80      	pop	{r7, pc}
 8003ea2:	bf00      	nop
 8003ea4:	20001374 	.word	0x20001374
 8003ea8:	20000478 	.word	0x20000478
 8003eac:	20001379 	.word	0x20001379
 8003eb0:	20000003 	.word	0x20000003

08003eb4 <buttonUP_handler>:
void buttonUP_handler()
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	af00      	add	r7, sp, #0
	switch(*__MY_DISPLAY_MODE)	{
 8003eb8:	4b32      	ldr	r3, [pc, #200]	; (8003f84 <buttonUP_handler+0xd0>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	781b      	ldrb	r3, [r3, #0]
 8003ebe:	2b09      	cmp	r3, #9
 8003ec0:	d85d      	bhi.n	8003f7e <buttonUP_handler+0xca>
 8003ec2:	a201      	add	r2, pc, #4	; (adr r2, 8003ec8 <buttonUP_handler+0x14>)
 8003ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ec8:	08003f7f 	.word	0x08003f7f
 8003ecc:	08003f7f 	.word	0x08003f7f
 8003ed0:	08003f7f 	.word	0x08003f7f
 8003ed4:	08003ef1 	.word	0x08003ef1
 8003ed8:	08003f09 	.word	0x08003f09
 8003edc:	08003f15 	.word	0x08003f15
 8003ee0:	08003f59 	.word	0x08003f59
 8003ee4:	08003f7f 	.word	0x08003f7f
 8003ee8:	08003f4d 	.word	0x08003f4d
 8003eec:	08003f53 	.word	0x08003f53
	case COUNTDOWN_SW_OFF:
		break;
	case AFTER_SW_OFF:
		break;
	case MONITOR:
		previousMonitor(&curMonitor, myStation.ssNode_list->length);
 8003ef0:	4b25      	ldr	r3, [pc, #148]	; (8003f88 <buttonUP_handler+0xd4>)
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	b2db      	uxtb	r3, r3
 8003ef8:	4619      	mov	r1, r3
 8003efa:	4824      	ldr	r0, [pc, #144]	; (8003f8c <buttonUP_handler+0xd8>)
 8003efc:	f7ff fe1a 	bl	8003b34 <previousMonitor>
		setClearflag(ENABLE);
 8003f00:	2001      	movs	r0, #1
 8003f02:	f7ff fdc9 	bl	8003a98 <setClearflag>
		break;
 8003f06:	e03b      	b.n	8003f80 <buttonUP_handler+0xcc>
	case MENU_CONTROL:
		switchcurControl();
 8003f08:	f7ff fdd6 	bl	8003ab8 <switchcurControl>
		setClearflag(ENABLE);
 8003f0c:	2001      	movs	r0, #1
 8003f0e:	f7ff fdc3 	bl	8003a98 <setClearflag>
		break;
 8003f12:	e035      	b.n	8003f80 <buttonUP_handler+0xcc>
	case VOLTAGE_CONTROL:
		switch (getStepValorDir())	{
 8003f14:	f7ff fda0 	bl	8003a58 <getStepValorDir>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	2b02      	cmp	r3, #2
 8003f1c:	d00d      	beq.n	8003f3a <buttonUP_handler+0x86>
 8003f1e:	2b02      	cmp	r3, #2
 8003f20:	dc0f      	bgt.n	8003f42 <buttonUP_handler+0x8e>
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d005      	beq.n	8003f32 <buttonUP_handler+0x7e>
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d10b      	bne.n	8003f42 <buttonUP_handler+0x8e>
		case STEP_DIR:
			setStepValorDir(STEP_VAL);
 8003f2a:	2000      	movs	r0, #0
 8003f2c:	f7ff fd84 	bl	8003a38 <setStepValorDir>
			break;
 8003f30:	e008      	b.n	8003f44 <buttonUP_handler+0x90>
		case STEP_VAL:
			setStepValorDir(STEP_CONFIRM);
 8003f32:	2002      	movs	r0, #2
 8003f34:	f7ff fd80 	bl	8003a38 <setStepValorDir>
			break;
 8003f38:	e004      	b.n	8003f44 <buttonUP_handler+0x90>
		case STEP_CONFIRM:
			setStepValorDir(STEP_DIR);
 8003f3a:	2001      	movs	r0, #1
 8003f3c:	f7ff fd7c 	bl	8003a38 <setStepValorDir>
			break;
 8003f40:	e000      	b.n	8003f44 <buttonUP_handler+0x90>
		default:
			break;
 8003f42:	bf00      	nop
		}
		setClearflag(ENABLE);
 8003f44:	2001      	movs	r0, #1
 8003f46:	f7ff fda7 	bl	8003a98 <setClearflag>
		break;
 8003f4a:	e019      	b.n	8003f80 <buttonUP_handler+0xcc>
	case STEP_VAL_CONTROL:
		// increase step value
		increaseStepchange();
 8003f4c:	f7ff fc7e 	bl	800384c <increaseStepchange>
		break;
 8003f50:	e016      	b.n	8003f80 <buttonUP_handler+0xcc>
	case STEP_DIR_CONTROL:
		Step_toggleDir();
 8003f52:	f7ff fc67 	bl	8003824 <Step_toggleDir>
		break;
 8003f56:	e013      	b.n	8003f80 <buttonUP_handler+0xcc>
	case ON_OFF_CONTROL:
		switch (curSwitch) {
 8003f58:	4b0d      	ldr	r3, [pc, #52]	; (8003f90 <buttonUP_handler+0xdc>)
 8003f5a:	781b      	ldrb	r3, [r3, #0]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d005      	beq.n	8003f6c <buttonUP_handler+0xb8>
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d107      	bne.n	8003f74 <buttonUP_handler+0xc0>
		case SW_ON:
			curSwitch = SW_OFF;
 8003f64:	4b0a      	ldr	r3, [pc, #40]	; (8003f90 <buttonUP_handler+0xdc>)
 8003f66:	2200      	movs	r2, #0
 8003f68:	701a      	strb	r2, [r3, #0]
			break;
 8003f6a:	e004      	b.n	8003f76 <buttonUP_handler+0xc2>
		case SW_OFF:
			curSwitch = SW_ON;
 8003f6c:	4b08      	ldr	r3, [pc, #32]	; (8003f90 <buttonUP_handler+0xdc>)
 8003f6e:	2201      	movs	r2, #1
 8003f70:	701a      	strb	r2, [r3, #0]
			break;
 8003f72:	e000      	b.n	8003f76 <buttonUP_handler+0xc2>
		default:
			break;
 8003f74:	bf00      	nop
		}
		setClearflag(ENABLE);
 8003f76:	2001      	movs	r0, #1
 8003f78:	f7ff fd8e 	bl	8003a98 <setClearflag>
		break;
 8003f7c:	e000      	b.n	8003f80 <buttonUP_handler+0xcc>
	case COMPLETE_CONTROL:
		break;
	default:
		break;
 8003f7e:	bf00      	nop
	}
}
 8003f80:	bf00      	nop
 8003f82:	bd80      	pop	{r7, pc}
 8003f84:	20001374 	.word	0x20001374
 8003f88:	20000478 	.word	0x20000478
 8003f8c:	20001379 	.word	0x20001379
 8003f90:	20000003 	.word	0x20000003

08003f94 <SW_LIMIT_MAX_handler>:
void SW_LIMIT_MAX_handler()
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	af00      	add	r7, sp, #0
	setClearflag(ENABLE);
 8003f98:	2001      	movs	r0, #1
 8003f9a:	f7ff fd7d 	bl	8003a98 <setClearflag>
	A4988_DisableDriver();
 8003f9e:	f002 fe6b 	bl	8006c78 <A4988_DisableDriver>
	setLimit(LIMIT_MAX);
 8003fa2:	2001      	movs	r0, #1
 8003fa4:	f7ff fc0a 	bl	80037bc <setLimit>
	triggerTaskflag(TASK_SEND_STEP_LIMIT, FLAG_EN);
 8003fa8:	2101      	movs	r1, #1
 8003faa:	2005      	movs	r0, #5
 8003fac:	f001 fb5e 	bl	800566c <triggerTaskflag>
}
 8003fb0:	bf00      	nop
 8003fb2:	bd80      	pop	{r7, pc}

08003fb4 <SW_LIMIT_MIN_handler>:
void SW_LIMIT_MIN_handler()
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	af00      	add	r7, sp, #0
	setClearflag(ENABLE);
 8003fb8:	2001      	movs	r0, #1
 8003fba:	f7ff fd6d 	bl	8003a98 <setClearflag>
	A4988_DisableDriver();
 8003fbe:	f002 fe5b 	bl	8006c78 <A4988_DisableDriver>
	setLimit(LIMIT_MIN);
 8003fc2:	2000      	movs	r0, #0
 8003fc4:	f7ff fbfa 	bl	80037bc <setLimit>
	triggerTaskflag(TASK_SEND_STEP_LIMIT, FLAG_EN);
 8003fc8:	2101      	movs	r1, #1
 8003fca:	2005      	movs	r0, #5
 8003fcc:	f001 fb4e 	bl	800566c <triggerTaskflag>
}
 8003fd0:	bf00      	nop
 8003fd2:	bd80      	pop	{r7, pc}

08003fd4 <DS3231_Init>:

static uint8_t B2D(uint8_t bcd);
static uint8_t D2B(uint8_t decimal);

void DS3231_Init(I2C_HandleTypeDef *handle)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b082      	sub	sp, #8
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  i2c = handle;
 8003fdc:	4a04      	ldr	r2, [pc, #16]	; (8003ff0 <DS3231_Init+0x1c>)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6013      	str	r3, [r2, #0]
  DS3231_ClearAlarm1();
 8003fe2:	f000 f9d5 	bl	8004390 <DS3231_ClearAlarm1>
}
 8003fe6:	bf00      	nop
 8003fe8:	3708      	adds	r7, #8
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}
 8003fee:	bf00      	nop
 8003ff0:	2000137c 	.word	0x2000137c

08003ff4 <epochtine2RTC>:
void epochtine2RTC(time_t epochtime,  _RTC *myRTC)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b086      	sub	sp, #24
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8003ffe:	607a      	str	r2, [r7, #4]
	struct tm *info;
	info = localtime(&epochtime);
 8004000:	f107 0308 	add.w	r3, r7, #8
 8004004:	4618      	mov	r0, r3
 8004006:	f007 ffef 	bl	800bfe8 <localtime>
 800400a:	6178      	str	r0, [r7, #20]
	myRTC->Year = info->tm_year -100;
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	695b      	ldr	r3, [r3, #20]
 8004010:	b2db      	uxtb	r3, r3
 8004012:	3b64      	subs	r3, #100	; 0x64
 8004014:	b2da      	uxtb	r2, r3
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	701a      	strb	r2, [r3, #0]
	myRTC->Month =  info->tm_mon +1;
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	691b      	ldr	r3, [r3, #16]
 800401e:	b2db      	uxtb	r3, r3
 8004020:	3301      	adds	r3, #1
 8004022:	b2da      	uxtb	r2, r3
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	705a      	strb	r2, [r3, #1]
	myRTC->Date = info->tm_mday;
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	68db      	ldr	r3, [r3, #12]
 800402c:	b2da      	uxtb	r2, r3
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	709a      	strb	r2, [r3, #2]
	myRTC->DaysOfWeek = info->tm_wday + 1;
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	699b      	ldr	r3, [r3, #24]
 8004036:	b2db      	uxtb	r3, r3
 8004038:	3301      	adds	r3, #1
 800403a:	b2da      	uxtb	r2, r3
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	70da      	strb	r2, [r3, #3]
	myRTC->Hour = info->tm_hour + 7;
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	b2db      	uxtb	r3, r3
 8004046:	3307      	adds	r3, #7
 8004048:	b2da      	uxtb	r2, r3
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	711a      	strb	r2, [r3, #4]
	myRTC->Min = info->tm_min;
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	b2da      	uxtb	r2, r3
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	715a      	strb	r2, [r3, #5]
	myRTC->Sec = info->tm_sec;
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	b2da      	uxtb	r2, r3
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	719a      	strb	r2, [r3, #6]
}
 8004062:	bf00      	nop
 8004064:	3718      	adds	r7, #24
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}

0800406a <RTC2epochtime>:

time_t RTC2epochtime (_RTC *RTCtime)
{
 800406a:	b580      	push	{r7, lr}
 800406c:	b08e      	sub	sp, #56	; 0x38
 800406e:	af00      	add	r7, sp, #0
 8004070:	6078      	str	r0, [r7, #4]
	struct tm t;
	time_t epochtime;
	t.tm_year = 2000 + RTCtime->Year -1900;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	781b      	ldrb	r3, [r3, #0]
 8004076:	3364      	adds	r3, #100	; 0x64
 8004078:	623b      	str	r3, [r7, #32]
	t.tm_mon = RTCtime->Month - 1;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	785b      	ldrb	r3, [r3, #1]
 800407e:	3b01      	subs	r3, #1
 8004080:	61fb      	str	r3, [r7, #28]
	t.tm_mday = RTCtime->Date;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	789b      	ldrb	r3, [r3, #2]
 8004086:	61bb      	str	r3, [r7, #24]
	t.tm_hour = RTCtime->Hour - 7;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	791b      	ldrb	r3, [r3, #4]
 800408c:	3b07      	subs	r3, #7
 800408e:	617b      	str	r3, [r7, #20]
	t.tm_min = RTCtime->Min;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	795b      	ldrb	r3, [r3, #5]
 8004094:	613b      	str	r3, [r7, #16]
	t.tm_sec = RTCtime->Sec;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	799b      	ldrb	r3, [r3, #6]
 800409a:	60fb      	str	r3, [r7, #12]
	t.tm_isdst = -1;
 800409c:	f04f 33ff 	mov.w	r3, #4294967295
 80040a0:	62fb      	str	r3, [r7, #44]	; 0x2c
	epochtime = mktime(&t);
 80040a2:	f107 030c 	add.w	r3, r7, #12
 80040a6:	4618      	mov	r0, r3
 80040a8:	f008 f9bc 	bl	800c424 <mktime>
 80040ac:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
	return epochtime;
 80040b0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
}
 80040b4:	4610      	mov	r0, r2
 80040b6:	4619      	mov	r1, r3
 80040b8:	3738      	adds	r7, #56	; 0x38
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}
	...

080040c0 <DS3231_GetTime>:
	if ( (rtc.Min < 0) || (rtc.Min >59 ) )	return false;
	if ( (rtc.Hour < 0) || (rtc.Sec >23 ) )	return false;
	return true;
}
bool DS3231_GetTime(_RTC *rtc)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b086      	sub	sp, #24
 80040c4:	af02      	add	r7, sp, #8
 80040c6:	6078      	str	r0, [r7, #4]
  uint8_t startAddr = DS3231_REG_TIME;
 80040c8:	2300      	movs	r3, #0
 80040ca:	73fb      	strb	r3, [r7, #15]
  uint8_t buffer[7] = {0,};
 80040cc:	2300      	movs	r3, #0
 80040ce:	60bb      	str	r3, [r7, #8]
 80040d0:	f107 030c 	add.w	r3, r7, #12
 80040d4:	2100      	movs	r1, #0
 80040d6:	460a      	mov	r2, r1
 80040d8:	801a      	strh	r2, [r3, #0]
 80040da:	460a      	mov	r2, r1
 80040dc:	709a      	strb	r2, [r3, #2]

  if(HAL_I2C_Master_Transmit(i2c, DS3231_ADDR, &startAddr, 1, HAL_MAX_DELAY) != HAL_OK) return false;
 80040de:	4b35      	ldr	r3, [pc, #212]	; (80041b4 <DS3231_GetTime+0xf4>)
 80040e0:	6818      	ldr	r0, [r3, #0]
 80040e2:	f107 020f 	add.w	r2, r7, #15
 80040e6:	f04f 33ff 	mov.w	r3, #4294967295
 80040ea:	9300      	str	r3, [sp, #0]
 80040ec:	2301      	movs	r3, #1
 80040ee:	21d0      	movs	r1, #208	; 0xd0
 80040f0:	f005 f8ee 	bl	80092d0 <HAL_I2C_Master_Transmit>
 80040f4:	4603      	mov	r3, r0
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d001      	beq.n	80040fe <DS3231_GetTime+0x3e>
 80040fa:	2300      	movs	r3, #0
 80040fc:	e055      	b.n	80041aa <DS3231_GetTime+0xea>
  if(HAL_I2C_Master_Receive(i2c, DS3231_ADDR, buffer, sizeof(buffer), HAL_MAX_DELAY) != HAL_OK) return false;
 80040fe:	4b2d      	ldr	r3, [pc, #180]	; (80041b4 <DS3231_GetTime+0xf4>)
 8004100:	6818      	ldr	r0, [r3, #0]
 8004102:	f107 0208 	add.w	r2, r7, #8
 8004106:	f04f 33ff 	mov.w	r3, #4294967295
 800410a:	9300      	str	r3, [sp, #0]
 800410c:	2307      	movs	r3, #7
 800410e:	21d0      	movs	r1, #208	; 0xd0
 8004110:	f005 f9dc 	bl	80094cc <HAL_I2C_Master_Receive>
 8004114:	4603      	mov	r3, r0
 8004116:	2b00      	cmp	r3, #0
 8004118:	d001      	beq.n	800411e <DS3231_GetTime+0x5e>
 800411a:	2300      	movs	r3, #0
 800411c:	e045      	b.n	80041aa <DS3231_GetTime+0xea>

  rtc->Sec = B2D(buffer[0] & 0x7F);
 800411e:	7a3b      	ldrb	r3, [r7, #8]
 8004120:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004124:	b2db      	uxtb	r3, r3
 8004126:	4618      	mov	r0, r3
 8004128:	f000 f9a8 	bl	800447c <B2D>
 800412c:	4603      	mov	r3, r0
 800412e:	461a      	mov	r2, r3
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	719a      	strb	r2, [r3, #6]
  rtc->Min = B2D(buffer[1] & 0x7F);
 8004134:	7a7b      	ldrb	r3, [r7, #9]
 8004136:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800413a:	b2db      	uxtb	r3, r3
 800413c:	4618      	mov	r0, r3
 800413e:	f000 f99d 	bl	800447c <B2D>
 8004142:	4603      	mov	r3, r0
 8004144:	461a      	mov	r2, r3
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	715a      	strb	r2, [r3, #5]
  rtc->Hour = B2D(buffer[2] & 0x3F);
 800414a:	7abb      	ldrb	r3, [r7, #10]
 800414c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004150:	b2db      	uxtb	r3, r3
 8004152:	4618      	mov	r0, r3
 8004154:	f000 f992 	bl	800447c <B2D>
 8004158:	4603      	mov	r3, r0
 800415a:	461a      	mov	r2, r3
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	711a      	strb	r2, [r3, #4]
  rtc->DaysOfWeek = buffer[3] & 0x07;
 8004160:	7afb      	ldrb	r3, [r7, #11]
 8004162:	f003 0307 	and.w	r3, r3, #7
 8004166:	b2da      	uxtb	r2, r3
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	70da      	strb	r2, [r3, #3]
  rtc->Date = B2D(buffer[4] & 0x3F);
 800416c:	7b3b      	ldrb	r3, [r7, #12]
 800416e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004172:	b2db      	uxtb	r3, r3
 8004174:	4618      	mov	r0, r3
 8004176:	f000 f981 	bl	800447c <B2D>
 800417a:	4603      	mov	r3, r0
 800417c:	461a      	mov	r2, r3
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	709a      	strb	r2, [r3, #2]
  rtc->Month = B2D(buffer[5] & 0x1F);
 8004182:	7b7b      	ldrb	r3, [r7, #13]
 8004184:	f003 031f 	and.w	r3, r3, #31
 8004188:	b2db      	uxtb	r3, r3
 800418a:	4618      	mov	r0, r3
 800418c:	f000 f976 	bl	800447c <B2D>
 8004190:	4603      	mov	r3, r0
 8004192:	461a      	mov	r2, r3
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	705a      	strb	r2, [r3, #1]
  rtc->Year = B2D(buffer[6]);
 8004198:	7bbb      	ldrb	r3, [r7, #14]
 800419a:	4618      	mov	r0, r3
 800419c:	f000 f96e 	bl	800447c <B2D>
 80041a0:	4603      	mov	r3, r0
 80041a2:	461a      	mov	r2, r3
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	701a      	strb	r2, [r3, #0]

  return true;
 80041a8:	2301      	movs	r3, #1
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3710      	adds	r7, #16
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}
 80041b2:	bf00      	nop
 80041b4:	2000137c 	.word	0x2000137c

080041b8 <DS3231_SetTime>:

bool DS3231_SetTime(_RTC *rtc)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b088      	sub	sp, #32
 80041bc:	af02      	add	r7, sp, #8
 80041be:	6078      	str	r0, [r7, #4]
  uint8_t startAddr = DS3231_REG_TIME;
 80041c0:	2300      	movs	r3, #0
 80041c2:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[8] = {startAddr, D2B(rtc->Sec), D2B(rtc->Min), D2B(rtc->Hour), rtc->DaysOfWeek, D2B(rtc->Date), D2B(rtc->Month), D2B(rtc->Year)};
 80041c4:	7dfb      	ldrb	r3, [r7, #23]
 80041c6:	733b      	strb	r3, [r7, #12]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	799b      	ldrb	r3, [r3, #6]
 80041cc:	4618      	mov	r0, r3
 80041ce:	f000 f96d 	bl	80044ac <D2B>
 80041d2:	4603      	mov	r3, r0
 80041d4:	737b      	strb	r3, [r7, #13]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	795b      	ldrb	r3, [r3, #5]
 80041da:	4618      	mov	r0, r3
 80041dc:	f000 f966 	bl	80044ac <D2B>
 80041e0:	4603      	mov	r3, r0
 80041e2:	73bb      	strb	r3, [r7, #14]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	791b      	ldrb	r3, [r3, #4]
 80041e8:	4618      	mov	r0, r3
 80041ea:	f000 f95f 	bl	80044ac <D2B>
 80041ee:	4603      	mov	r3, r0
 80041f0:	73fb      	strb	r3, [r7, #15]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	78db      	ldrb	r3, [r3, #3]
 80041f6:	743b      	strb	r3, [r7, #16]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	789b      	ldrb	r3, [r3, #2]
 80041fc:	4618      	mov	r0, r3
 80041fe:	f000 f955 	bl	80044ac <D2B>
 8004202:	4603      	mov	r3, r0
 8004204:	747b      	strb	r3, [r7, #17]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	785b      	ldrb	r3, [r3, #1]
 800420a:	4618      	mov	r0, r3
 800420c:	f000 f94e 	bl	80044ac <D2B>
 8004210:	4603      	mov	r3, r0
 8004212:	74bb      	strb	r3, [r7, #18]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	781b      	ldrb	r3, [r3, #0]
 8004218:	4618      	mov	r0, r3
 800421a:	f000 f947 	bl	80044ac <D2B>
 800421e:	4603      	mov	r3, r0
 8004220:	74fb      	strb	r3, [r7, #19]
  if(HAL_I2C_Master_Transmit(i2c, DS3231_ADDR, buffer, sizeof(buffer), HAL_MAX_DELAY) != HAL_OK) return false;
 8004222:	4b0a      	ldr	r3, [pc, #40]	; (800424c <DS3231_SetTime+0x94>)
 8004224:	6818      	ldr	r0, [r3, #0]
 8004226:	f107 020c 	add.w	r2, r7, #12
 800422a:	f04f 33ff 	mov.w	r3, #4294967295
 800422e:	9300      	str	r3, [sp, #0]
 8004230:	2308      	movs	r3, #8
 8004232:	21d0      	movs	r1, #208	; 0xd0
 8004234:	f005 f84c 	bl	80092d0 <HAL_I2C_Master_Transmit>
 8004238:	4603      	mov	r3, r0
 800423a:	2b00      	cmp	r3, #0
 800423c:	d001      	beq.n	8004242 <DS3231_SetTime+0x8a>
 800423e:	2300      	movs	r3, #0
 8004240:	e000      	b.n	8004244 <DS3231_SetTime+0x8c>

  return true;
 8004242:	2301      	movs	r3, #1
}
 8004244:	4618      	mov	r0, r3
 8004246:	3718      	adds	r7, #24
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}
 800424c:	2000137c 	.word	0x2000137c

08004250 <DS3231_SetAlarm1>:
  *temp = value / 4.0f;
  return true;
}

bool DS3231_SetAlarm1(uint8_t mode, uint8_t date, uint8_t hour, uint8_t min, uint8_t sec)
{
 8004250:	b590      	push	{r4, r7, lr}
 8004252:	b089      	sub	sp, #36	; 0x24
 8004254:	af02      	add	r7, sp, #8
 8004256:	4604      	mov	r4, r0
 8004258:	4608      	mov	r0, r1
 800425a:	4611      	mov	r1, r2
 800425c:	461a      	mov	r2, r3
 800425e:	4623      	mov	r3, r4
 8004260:	71fb      	strb	r3, [r7, #7]
 8004262:	4603      	mov	r3, r0
 8004264:	71bb      	strb	r3, [r7, #6]
 8004266:	460b      	mov	r3, r1
 8004268:	717b      	strb	r3, [r7, #5]
 800426a:	4613      	mov	r3, r2
 800426c:	713b      	strb	r3, [r7, #4]
  uint8_t alarmSecond = D2B(sec);
 800426e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004272:	4618      	mov	r0, r3
 8004274:	f000 f91a 	bl	80044ac <D2B>
 8004278:	4603      	mov	r3, r0
 800427a:	75fb      	strb	r3, [r7, #23]
  uint8_t alarmMinute = D2B(min);
 800427c:	793b      	ldrb	r3, [r7, #4]
 800427e:	4618      	mov	r0, r3
 8004280:	f000 f914 	bl	80044ac <D2B>
 8004284:	4603      	mov	r3, r0
 8004286:	75bb      	strb	r3, [r7, #22]
  uint8_t alarmHour = D2B(hour);
 8004288:	797b      	ldrb	r3, [r7, #5]
 800428a:	4618      	mov	r0, r3
 800428c:	f000 f90e 	bl	80044ac <D2B>
 8004290:	4603      	mov	r3, r0
 8004292:	757b      	strb	r3, [r7, #21]
  uint8_t alarmDate = D2B(date);
 8004294:	79bb      	ldrb	r3, [r7, #6]
 8004296:	4618      	mov	r0, r3
 8004298:	f000 f908 	bl	80044ac <D2B>
 800429c:	4603      	mov	r3, r0
 800429e:	753b      	strb	r3, [r7, #20]

  switch(mode)
 80042a0:	79fb      	ldrb	r3, [r7, #7]
 80042a2:	2b04      	cmp	r3, #4
 80042a4:	d838      	bhi.n	8004318 <DS3231_SetAlarm1+0xc8>
 80042a6:	a201      	add	r2, pc, #4	; (adr r2, 80042ac <DS3231_SetAlarm1+0x5c>)
 80042a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042ac:	08004319 	.word	0x08004319
 80042b0:	080042c1 	.word	0x080042c1
 80042b4:	080042cb 	.word	0x080042cb
 80042b8:	080042dd 	.word	0x080042dd
 80042bc:	080042f7 	.word	0x080042f7
  {
  case ALARM_MODE_ALL_MATCHED:
    break;
  case ALARM_MODE_HOUR_MIN_SEC_MATCHED:
    alarmDate |= 0x80;
 80042c0:	7d3b      	ldrb	r3, [r7, #20]
 80042c2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80042c6:	753b      	strb	r3, [r7, #20]
    break;
 80042c8:	e027      	b.n	800431a <DS3231_SetAlarm1+0xca>
  case ALARM_MODE_MIN_SEC_MATCHED:
    alarmDate |= 0x80;
 80042ca:	7d3b      	ldrb	r3, [r7, #20]
 80042cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80042d0:	753b      	strb	r3, [r7, #20]
    alarmHour |= 0x80;
 80042d2:	7d7b      	ldrb	r3, [r7, #21]
 80042d4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80042d8:	757b      	strb	r3, [r7, #21]
    break;
 80042da:	e01e      	b.n	800431a <DS3231_SetAlarm1+0xca>
  case ALARM_MODE_SEC_MATCHED:
    alarmDate |= 0x80;
 80042dc:	7d3b      	ldrb	r3, [r7, #20]
 80042de:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80042e2:	753b      	strb	r3, [r7, #20]
    alarmHour |= 0x80;
 80042e4:	7d7b      	ldrb	r3, [r7, #21]
 80042e6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80042ea:	757b      	strb	r3, [r7, #21]
    alarmMinute |= 0x80;
 80042ec:	7dbb      	ldrb	r3, [r7, #22]
 80042ee:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80042f2:	75bb      	strb	r3, [r7, #22]
    break;
 80042f4:	e011      	b.n	800431a <DS3231_SetAlarm1+0xca>
  case ALARM_MODE_ONCE_PER_SECOND:
    alarmDate |= 0x80;
 80042f6:	7d3b      	ldrb	r3, [r7, #20]
 80042f8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80042fc:	753b      	strb	r3, [r7, #20]
    alarmHour |= 0x80;
 80042fe:	7d7b      	ldrb	r3, [r7, #21]
 8004300:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004304:	757b      	strb	r3, [r7, #21]
    alarmMinute |= 0x80;
 8004306:	7dbb      	ldrb	r3, [r7, #22]
 8004308:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800430c:	75bb      	strb	r3, [r7, #22]
    alarmSecond |= 0x80;
 800430e:	7dfb      	ldrb	r3, [r7, #23]
 8004310:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004314:	75fb      	strb	r3, [r7, #23]
    break;
 8004316:	e000      	b.n	800431a <DS3231_SetAlarm1+0xca>
  default:
    break;
 8004318:	bf00      	nop
  }

  /* Write Alarm Registers */
  uint8_t startAddr = DS3231_REG_ALARM1;
 800431a:	2307      	movs	r3, #7
 800431c:	74fb      	strb	r3, [r7, #19]
  uint8_t buffer[5] = {startAddr, alarmSecond, alarmMinute, alarmHour, alarmDate};
 800431e:	7cfb      	ldrb	r3, [r7, #19]
 8004320:	733b      	strb	r3, [r7, #12]
 8004322:	7dfb      	ldrb	r3, [r7, #23]
 8004324:	737b      	strb	r3, [r7, #13]
 8004326:	7dbb      	ldrb	r3, [r7, #22]
 8004328:	73bb      	strb	r3, [r7, #14]
 800432a:	7d7b      	ldrb	r3, [r7, #21]
 800432c:	73fb      	strb	r3, [r7, #15]
 800432e:	7d3b      	ldrb	r3, [r7, #20]
 8004330:	743b      	strb	r3, [r7, #16]
  if(HAL_I2C_Master_Transmit(i2c, DS3231_ADDR, buffer, sizeof(buffer), HAL_MAX_DELAY) != HAL_OK) return false;
 8004332:	4b16      	ldr	r3, [pc, #88]	; (800438c <DS3231_SetAlarm1+0x13c>)
 8004334:	6818      	ldr	r0, [r3, #0]
 8004336:	f107 020c 	add.w	r2, r7, #12
 800433a:	f04f 33ff 	mov.w	r3, #4294967295
 800433e:	9300      	str	r3, [sp, #0]
 8004340:	2305      	movs	r3, #5
 8004342:	21d0      	movs	r1, #208	; 0xd0
 8004344:	f004 ffc4 	bl	80092d0 <HAL_I2C_Master_Transmit>
 8004348:	4603      	mov	r3, r0
 800434a:	2b00      	cmp	r3, #0
 800434c:	d001      	beq.n	8004352 <DS3231_SetAlarm1+0x102>
 800434e:	2300      	movs	r3, #0
 8004350:	e017      	b.n	8004382 <DS3231_SetAlarm1+0x132>

  /* Enable Alarm1 at Control Register */
  uint8_t ctrlReg = 0x00;
 8004352:	2300      	movs	r3, #0
 8004354:	72fb      	strb	r3, [r7, #11]
  ReadRegister(DS3231_REG_CONTROL, &ctrlReg);
 8004356:	f107 030b 	add.w	r3, r7, #11
 800435a:	4619      	mov	r1, r3
 800435c:	200e      	movs	r0, #14
 800435e:	f000 f83d 	bl	80043dc <ReadRegister>
  ctrlReg |= DS3231_CON_A1IE;
 8004362:	7afb      	ldrb	r3, [r7, #11]
 8004364:	f043 0301 	orr.w	r3, r3, #1
 8004368:	b2db      	uxtb	r3, r3
 800436a:	72fb      	strb	r3, [r7, #11]
  ctrlReg |= DS3231_CON_INTCN;
 800436c:	7afb      	ldrb	r3, [r7, #11]
 800436e:	f043 0304 	orr.w	r3, r3, #4
 8004372:	b2db      	uxtb	r3, r3
 8004374:	72fb      	strb	r3, [r7, #11]
  WriteRegister(DS3231_REG_CONTROL, ctrlReg);
 8004376:	7afb      	ldrb	r3, [r7, #11]
 8004378:	4619      	mov	r1, r3
 800437a:	200e      	movs	r0, #14
 800437c:	f000 f85a 	bl	8004434 <WriteRegister>

  return true;
 8004380:	2301      	movs	r3, #1
}
 8004382:	4618      	mov	r0, r3
 8004384:	371c      	adds	r7, #28
 8004386:	46bd      	mov	sp, r7
 8004388:	bd90      	pop	{r4, r7, pc}
 800438a:	bf00      	nop
 800438c:	2000137c 	.word	0x2000137c

08004390 <DS3231_ClearAlarm1>:

bool DS3231_ClearAlarm1()
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b082      	sub	sp, #8
 8004394:	af00      	add	r7, sp, #0
  uint8_t ctrlReg;
  uint8_t statusReg;

  /* Clear Control Register */
  ReadRegister(DS3231_REG_CONTROL, &ctrlReg);
 8004396:	1dfb      	adds	r3, r7, #7
 8004398:	4619      	mov	r1, r3
 800439a:	200e      	movs	r0, #14
 800439c:	f000 f81e 	bl	80043dc <ReadRegister>
  ctrlReg &= ~DS3231_CON_A1IE;
 80043a0:	79fb      	ldrb	r3, [r7, #7]
 80043a2:	f023 0301 	bic.w	r3, r3, #1
 80043a6:	b2db      	uxtb	r3, r3
 80043a8:	71fb      	strb	r3, [r7, #7]
  WriteRegister(DS3231_REG_CONTROL, ctrlReg);
 80043aa:	79fb      	ldrb	r3, [r7, #7]
 80043ac:	4619      	mov	r1, r3
 80043ae:	200e      	movs	r0, #14
 80043b0:	f000 f840 	bl	8004434 <WriteRegister>

  /* Clear Status Register */
  ReadRegister(DS3231_REG_STATUS, &statusReg);
 80043b4:	1dbb      	adds	r3, r7, #6
 80043b6:	4619      	mov	r1, r3
 80043b8:	200f      	movs	r0, #15
 80043ba:	f000 f80f 	bl	80043dc <ReadRegister>
  statusReg &= ~DS3231_STA_A1F;
 80043be:	79bb      	ldrb	r3, [r7, #6]
 80043c0:	f023 0301 	bic.w	r3, r3, #1
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	71bb      	strb	r3, [r7, #6]
  WriteRegister(DS3231_REG_STATUS, statusReg);
 80043c8:	79bb      	ldrb	r3, [r7, #6]
 80043ca:	4619      	mov	r1, r3
 80043cc:	200f      	movs	r0, #15
 80043ce:	f000 f831 	bl	8004434 <WriteRegister>

  return true;
 80043d2:	2301      	movs	r3, #1
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	3708      	adds	r7, #8
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}

080043dc <ReadRegister>:

bool ReadRegister(uint8_t regAddr, uint8_t *value)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b084      	sub	sp, #16
 80043e0:	af02      	add	r7, sp, #8
 80043e2:	4603      	mov	r3, r0
 80043e4:	6039      	str	r1, [r7, #0]
 80043e6:	71fb      	strb	r3, [r7, #7]
  if(HAL_I2C_Master_Transmit(i2c, DS3231_ADDR, &regAddr, 1, HAL_MAX_DELAY) != HAL_OK) return false;
 80043e8:	4b11      	ldr	r3, [pc, #68]	; (8004430 <ReadRegister+0x54>)
 80043ea:	6818      	ldr	r0, [r3, #0]
 80043ec:	1dfa      	adds	r2, r7, #7
 80043ee:	f04f 33ff 	mov.w	r3, #4294967295
 80043f2:	9300      	str	r3, [sp, #0]
 80043f4:	2301      	movs	r3, #1
 80043f6:	21d0      	movs	r1, #208	; 0xd0
 80043f8:	f004 ff6a 	bl	80092d0 <HAL_I2C_Master_Transmit>
 80043fc:	4603      	mov	r3, r0
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d001      	beq.n	8004406 <ReadRegister+0x2a>
 8004402:	2300      	movs	r3, #0
 8004404:	e00f      	b.n	8004426 <ReadRegister+0x4a>
  if(HAL_I2C_Master_Receive(i2c, DS3231_ADDR, value, 1, HAL_MAX_DELAY) != HAL_OK) return false;
 8004406:	4b0a      	ldr	r3, [pc, #40]	; (8004430 <ReadRegister+0x54>)
 8004408:	6818      	ldr	r0, [r3, #0]
 800440a:	f04f 33ff 	mov.w	r3, #4294967295
 800440e:	9300      	str	r3, [sp, #0]
 8004410:	2301      	movs	r3, #1
 8004412:	683a      	ldr	r2, [r7, #0]
 8004414:	21d0      	movs	r1, #208	; 0xd0
 8004416:	f005 f859 	bl	80094cc <HAL_I2C_Master_Receive>
 800441a:	4603      	mov	r3, r0
 800441c:	2b00      	cmp	r3, #0
 800441e:	d001      	beq.n	8004424 <ReadRegister+0x48>
 8004420:	2300      	movs	r3, #0
 8004422:	e000      	b.n	8004426 <ReadRegister+0x4a>

  return true;
 8004424:	2301      	movs	r3, #1
}
 8004426:	4618      	mov	r0, r3
 8004428:	3708      	adds	r7, #8
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}
 800442e:	bf00      	nop
 8004430:	2000137c 	.word	0x2000137c

08004434 <WriteRegister>:

bool WriteRegister(uint8_t regAddr, uint8_t value)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b086      	sub	sp, #24
 8004438:	af02      	add	r7, sp, #8
 800443a:	4603      	mov	r3, r0
 800443c:	460a      	mov	r2, r1
 800443e:	71fb      	strb	r3, [r7, #7]
 8004440:	4613      	mov	r3, r2
 8004442:	71bb      	strb	r3, [r7, #6]
  uint8_t buffer[2] = {regAddr, value};
 8004444:	79fb      	ldrb	r3, [r7, #7]
 8004446:	733b      	strb	r3, [r7, #12]
 8004448:	79bb      	ldrb	r3, [r7, #6]
 800444a:	737b      	strb	r3, [r7, #13]
  if(HAL_I2C_Master_Transmit(i2c, DS3231_ADDR, buffer, sizeof(buffer), HAL_MAX_DELAY) != HAL_OK) return false;
 800444c:	4b0a      	ldr	r3, [pc, #40]	; (8004478 <WriteRegister+0x44>)
 800444e:	6818      	ldr	r0, [r3, #0]
 8004450:	f107 020c 	add.w	r2, r7, #12
 8004454:	f04f 33ff 	mov.w	r3, #4294967295
 8004458:	9300      	str	r3, [sp, #0]
 800445a:	2302      	movs	r3, #2
 800445c:	21d0      	movs	r1, #208	; 0xd0
 800445e:	f004 ff37 	bl	80092d0 <HAL_I2C_Master_Transmit>
 8004462:	4603      	mov	r3, r0
 8004464:	2b00      	cmp	r3, #0
 8004466:	d001      	beq.n	800446c <WriteRegister+0x38>
 8004468:	2300      	movs	r3, #0
 800446a:	e000      	b.n	800446e <WriteRegister+0x3a>

  return true;
 800446c:	2301      	movs	r3, #1
}
 800446e:	4618      	mov	r0, r3
 8004470:	3710      	adds	r7, #16
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}
 8004476:	bf00      	nop
 8004478:	2000137c 	.word	0x2000137c

0800447c <B2D>:

static uint8_t B2D(uint8_t bcd)
{
 800447c:	b480      	push	{r7}
 800447e:	b083      	sub	sp, #12
 8004480:	af00      	add	r7, sp, #0
 8004482:	4603      	mov	r3, r0
 8004484:	71fb      	strb	r3, [r7, #7]
  return (bcd >> 4) * 10 + (bcd & 0x0F);
 8004486:	79fb      	ldrb	r3, [r7, #7]
 8004488:	091b      	lsrs	r3, r3, #4
 800448a:	b2db      	uxtb	r3, r3
 800448c:	461a      	mov	r2, r3
 800448e:	0092      	lsls	r2, r2, #2
 8004490:	4413      	add	r3, r2
 8004492:	005b      	lsls	r3, r3, #1
 8004494:	b2da      	uxtb	r2, r3
 8004496:	79fb      	ldrb	r3, [r7, #7]
 8004498:	f003 030f 	and.w	r3, r3, #15
 800449c:	b2db      	uxtb	r3, r3
 800449e:	4413      	add	r3, r2
 80044a0:	b2db      	uxtb	r3, r3
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	370c      	adds	r7, #12
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bc80      	pop	{r7}
 80044aa:	4770      	bx	lr

080044ac <D2B>:

static uint8_t D2B(uint8_t decimal)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b083      	sub	sp, #12
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	4603      	mov	r3, r0
 80044b4:	71fb      	strb	r3, [r7, #7]
  return (((decimal / 10) << 4) | (decimal % 10));
 80044b6:	79fb      	ldrb	r3, [r7, #7]
 80044b8:	4a0d      	ldr	r2, [pc, #52]	; (80044f0 <D2B+0x44>)
 80044ba:	fba2 2303 	umull	r2, r3, r2, r3
 80044be:	08db      	lsrs	r3, r3, #3
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	011b      	lsls	r3, r3, #4
 80044c4:	b258      	sxtb	r0, r3
 80044c6:	79fa      	ldrb	r2, [r7, #7]
 80044c8:	4b09      	ldr	r3, [pc, #36]	; (80044f0 <D2B+0x44>)
 80044ca:	fba3 1302 	umull	r1, r3, r3, r2
 80044ce:	08d9      	lsrs	r1, r3, #3
 80044d0:	460b      	mov	r3, r1
 80044d2:	009b      	lsls	r3, r3, #2
 80044d4:	440b      	add	r3, r1
 80044d6:	005b      	lsls	r3, r3, #1
 80044d8:	1ad3      	subs	r3, r2, r3
 80044da:	b2db      	uxtb	r3, r3
 80044dc:	b25b      	sxtb	r3, r3
 80044de:	4303      	orrs	r3, r0
 80044e0:	b25b      	sxtb	r3, r3
 80044e2:	b2db      	uxtb	r3, r3
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	370c      	adds	r7, #12
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bc80      	pop	{r7}
 80044ec:	4770      	bx	lr
 80044ee:	bf00      	nop
 80044f0:	cccccccd 	.word	0xcccccccd

080044f4 <getCountdowntime>:

uint16_t getCountdowntime(uint8_t hour, uint8_t min, uint8_t sec)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b084      	sub	sp, #16
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	4603      	mov	r3, r0
 80044fc:	71fb      	strb	r3, [r7, #7]
 80044fe:	460b      	mov	r3, r1
 8004500:	71bb      	strb	r3, [r7, #6]
 8004502:	4613      	mov	r3, r2
 8004504:	717b      	strb	r3, [r7, #5]
	_RTC curRTC;
	if (!DS3231_GetTime(&curRTC))	return 0;
 8004506:	f107 0308 	add.w	r3, r7, #8
 800450a:	4618      	mov	r0, r3
 800450c:	f7ff fdd8 	bl	80040c0 <DS3231_GetTime>
 8004510:	4603      	mov	r3, r0
 8004512:	f083 0301 	eor.w	r3, r3, #1
 8004516:	b2db      	uxtb	r3, r3
 8004518:	2b00      	cmp	r3, #0
 800451a:	d001      	beq.n	8004520 <getCountdowntime+0x2c>
 800451c:	2300      	movs	r3, #0
 800451e:	e041      	b.n	80045a4 <getCountdowntime+0xb0>
	if ( hour < curRTC.Hour || hour - curRTC.Hour > 18 )	return 0;
 8004520:	7b3b      	ldrb	r3, [r7, #12]
 8004522:	79fa      	ldrb	r2, [r7, #7]
 8004524:	429a      	cmp	r2, r3
 8004526:	d304      	bcc.n	8004532 <getCountdowntime+0x3e>
 8004528:	79fb      	ldrb	r3, [r7, #7]
 800452a:	7b3a      	ldrb	r2, [r7, #12]
 800452c:	1a9b      	subs	r3, r3, r2
 800452e:	2b12      	cmp	r3, #18
 8004530:	dd01      	ble.n	8004536 <getCountdowntime+0x42>
 8004532:	2300      	movs	r3, #0
 8004534:	e036      	b.n	80045a4 <getCountdowntime+0xb0>
	if ( hour == curRTC.Hour && min < curRTC.Min ) return 0;
 8004536:	7b3b      	ldrb	r3, [r7, #12]
 8004538:	79fa      	ldrb	r2, [r7, #7]
 800453a:	429a      	cmp	r2, r3
 800453c:	d105      	bne.n	800454a <getCountdowntime+0x56>
 800453e:	7b7b      	ldrb	r3, [r7, #13]
 8004540:	79ba      	ldrb	r2, [r7, #6]
 8004542:	429a      	cmp	r2, r3
 8004544:	d201      	bcs.n	800454a <getCountdowntime+0x56>
 8004546:	2300      	movs	r3, #0
 8004548:	e02c      	b.n	80045a4 <getCountdowntime+0xb0>
	if ( hour == curRTC.Hour && min == curRTC.Min && sec < curRTC.Sec )	return 0;
 800454a:	7b3b      	ldrb	r3, [r7, #12]
 800454c:	79fa      	ldrb	r2, [r7, #7]
 800454e:	429a      	cmp	r2, r3
 8004550:	d109      	bne.n	8004566 <getCountdowntime+0x72>
 8004552:	7b7b      	ldrb	r3, [r7, #13]
 8004554:	79ba      	ldrb	r2, [r7, #6]
 8004556:	429a      	cmp	r2, r3
 8004558:	d105      	bne.n	8004566 <getCountdowntime+0x72>
 800455a:	7bbb      	ldrb	r3, [r7, #14]
 800455c:	797a      	ldrb	r2, [r7, #5]
 800455e:	429a      	cmp	r2, r3
 8004560:	d201      	bcs.n	8004566 <getCountdowntime+0x72>
 8004562:	2300      	movs	r3, #0
 8004564:	e01e      	b.n	80045a4 <getCountdowntime+0xb0>
	return (hour- curRTC.Hour)*3600 + (min - curRTC.Min)*60 + (sec - curRTC.Sec);
 8004566:	79fb      	ldrb	r3, [r7, #7]
 8004568:	7b3a      	ldrb	r2, [r7, #12]
 800456a:	1a9b      	subs	r3, r3, r2
 800456c:	b29b      	uxth	r3, r3
 800456e:	461a      	mov	r2, r3
 8004570:	0112      	lsls	r2, r2, #4
 8004572:	1ad3      	subs	r3, r2, r3
 8004574:	461a      	mov	r2, r3
 8004576:	0112      	lsls	r2, r2, #4
 8004578:	1ad3      	subs	r3, r2, r3
 800457a:	011b      	lsls	r3, r3, #4
 800457c:	b29a      	uxth	r2, r3
 800457e:	79bb      	ldrb	r3, [r7, #6]
 8004580:	7b79      	ldrb	r1, [r7, #13]
 8004582:	1a5b      	subs	r3, r3, r1
 8004584:	b29b      	uxth	r3, r3
 8004586:	4619      	mov	r1, r3
 8004588:	0109      	lsls	r1, r1, #4
 800458a:	1acb      	subs	r3, r1, r3
 800458c:	009b      	lsls	r3, r3, #2
 800458e:	b29b      	uxth	r3, r3
 8004590:	4413      	add	r3, r2
 8004592:	b29a      	uxth	r2, r3
 8004594:	797b      	ldrb	r3, [r7, #5]
 8004596:	b299      	uxth	r1, r3
 8004598:	7bbb      	ldrb	r3, [r7, #14]
 800459a:	b29b      	uxth	r3, r3
 800459c:	1acb      	subs	r3, r1, r3
 800459e:	b29b      	uxth	r3, r3
 80045a0:	4413      	add	r3, r2
 80045a2:	b29b      	uxth	r3, r3
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	3710      	adds	r7, #16
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}

080045ac <initmyLora>:
//	__LORA_DMA_UART = hdma;
	enableReceiveDMAtoIdle_Lora();
}

void initmyLora()
{
 80045ac:	b480      	push	{r7}
 80045ae:	af00      	add	r7, sp, #0
//	initLora(huart, hdma);
//	myStation = myStation;
}
 80045b0:	bf00      	nop
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bc80      	pop	{r7}
 80045b6:	4770      	bx	lr

080045b8 <enableReceiveDMAtoIdle_Lora>:
void enableReceiveDMAtoIdle_Lora(void)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	af00      	add	r7, sp, #0
	  HAL_UARTEx_ReceiveToIdle_DMA(__LORA_UART, LoraRxbuff, LORARXBUFF_MAXLEN);
 80045bc:	2280      	movs	r2, #128	; 0x80
 80045be:	4907      	ldr	r1, [pc, #28]	; (80045dc <enableReceiveDMAtoIdle_Lora+0x24>)
 80045c0:	4807      	ldr	r0, [pc, #28]	; (80045e0 <enableReceiveDMAtoIdle_Lora+0x28>)
 80045c2:	f006 fd7a 	bl	800b0ba <HAL_UARTEx_ReceiveToIdle_DMA>
	  __HAL_DMA_DISABLE_IT(__LORA_DMA_UART,DMA_IT_HT);
 80045c6:	4b07      	ldr	r3, [pc, #28]	; (80045e4 <enableReceiveDMAtoIdle_Lora+0x2c>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	4b05      	ldr	r3, [pc, #20]	; (80045e4 <enableReceiveDMAtoIdle_Lora+0x2c>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f022 0204 	bic.w	r2, r2, #4
 80045d4:	601a      	str	r2, [r3, #0]
}
 80045d6:	bf00      	nop
 80045d8:	bd80      	pop	{r7, pc}
 80045da:	bf00      	nop
 80045dc:	20001380 	.word	0x20001380
 80045e0:	20002af8 	.word	0x20002af8
 80045e4:	20002bc8 	.word	0x20002bc8

080045e8 <Lora_callback>:

void Lora_callback(uint16_t Size)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b082      	sub	sp, #8
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	4603      	mov	r3, r0
 80045f0:	80fb      	strh	r3, [r7, #6]
	/* if the current position + new data size is less than the main buffer
	 * we will Loraply copy the data into the buffer and update the position
	 */
//	else
//	{
		memcpy ((uint8_t *)Lorabuff, (uint8_t *)LoraRxbuff, Size);
 80045f2:	88fb      	ldrh	r3, [r7, #6]
 80045f4:	461a      	mov	r2, r3
 80045f6:	490e      	ldr	r1, [pc, #56]	; (8004630 <Lora_callback+0x48>)
 80045f8:	480e      	ldr	r0, [pc, #56]	; (8004634 <Lora_callback+0x4c>)
 80045fa:	f007 fe25 	bl	800c248 <memcpy>
//	if (head + Size < LORABUFF_MAXLEN ) head = head + Size;
//	else head = head + Size - LORABUFF_MAXLEN;

//	memset(LoraRxbuff, 0, LORARXBUFF_MAXLEN);
	/* start the DMA again */
	enableReceiveDMAtoIdle_Lora();
 80045fe:	f7ff ffdb 	bl	80045b8 <enableReceiveDMAtoIdle_Lora>


	//Processing data
	if (isWordinBuff(Lorabuff, Size, (uint8_t*)"OK")) {
 8004602:	88fb      	ldrh	r3, [r7, #6]
 8004604:	4a0c      	ldr	r2, [pc, #48]	; (8004638 <Lora_callback+0x50>)
 8004606:	4619      	mov	r1, r3
 8004608:	480a      	ldr	r0, [pc, #40]	; (8004634 <Lora_callback+0x4c>)
 800460a:	f000 fe0d 	bl	8005228 <isWordinBuff>
 800460e:	4603      	mov	r3, r0
 8004610:	2b00      	cmp	r3, #0
 8004612:	d002      	beq.n	800461a <Lora_callback+0x32>
		isOK = 1;
 8004614:	4b09      	ldr	r3, [pc, #36]	; (800463c <Lora_callback+0x54>)
 8004616:	2201      	movs	r2, #1
 8004618:	701a      	strb	r2, [r3, #0]
	}
	Lora_receive(Lorabuff, Size);
 800461a:	88fb      	ldrh	r3, [r7, #6]
 800461c:	b2db      	uxtb	r3, r3
 800461e:	4619      	mov	r1, r3
 8004620:	4804      	ldr	r0, [pc, #16]	; (8004634 <Lora_callback+0x4c>)
 8004622:	f000 f831 	bl	8004688 <Lora_receive>

}
 8004626:	bf00      	nop
 8004628:	3708      	adds	r7, #8
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}
 800462e:	bf00      	nop
 8004630:	20001380 	.word	0x20001380
 8004634:	20001400 	.word	0x20001400
 8004638:	0800f104 	.word	0x0800f104
 800463c:	200014e4 	.word	0x200014e4

08004640 <isIDExist>:
{
	tail = head;
}

bool isIDExist (uint8_t ID)
{
 8004640:	b480      	push	{r7}
 8004642:	b085      	sub	sp, #20
 8004644:	af00      	add	r7, sp, #0
 8004646:	4603      	mov	r3, r0
 8004648:	71fb      	strb	r3, [r7, #7]
	Node * current = myStation.ssNode_list->head->next;
 800464a:	4b0e      	ldr	r3, [pc, #56]	; (8004684 <isIDExist+0x44>)
 800464c:	68db      	ldr	r3, [r3, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004652:	60fb      	str	r3, [r7, #12]
	while (current != myStation.ssNode_list->tail)
 8004654:	e009      	b.n	800466a <isIDExist+0x2a>
	{
		if ( ID == current->SSnode.SSnode_ID)	return true;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	781b      	ldrb	r3, [r3, #0]
 800465a:	79fa      	ldrb	r2, [r7, #7]
 800465c:	429a      	cmp	r2, r3
 800465e:	d101      	bne.n	8004664 <isIDExist+0x24>
 8004660:	2301      	movs	r3, #1
 8004662:	e009      	b.n	8004678 <isIDExist+0x38>
		current = current->next;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004668:	60fb      	str	r3, [r7, #12]
	while (current != myStation.ssNode_list->tail)
 800466a:	4b06      	ldr	r3, [pc, #24]	; (8004684 <isIDExist+0x44>)
 800466c:	68db      	ldr	r3, [r3, #12]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	68fa      	ldr	r2, [r7, #12]
 8004672:	429a      	cmp	r2, r3
 8004674:	d1ef      	bne.n	8004656 <isIDExist+0x16>
	}
	return false;
 8004676:	2300      	movs	r3, #0
}
 8004678:	4618      	mov	r0, r3
 800467a:	3714      	adds	r7, #20
 800467c:	46bd      	mov	sp, r7
 800467e:	bc80      	pop	{r7}
 8004680:	4770      	bx	lr
 8004682:	bf00      	nop
 8004684:	20000478 	.word	0x20000478

08004688 <Lora_receive>:
void Lora_receive(uint8_t *Msg, uint8_t msglen)
{
 8004688:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800468c:	b0db      	sub	sp, #364	; 0x16c
 800468e:	af1a      	add	r7, sp, #104	; 0x68
 8004690:	6078      	str	r0, [r7, #4]
 8004692:	460b      	mov	r3, r1
 8004694:	70fb      	strb	r3, [r7, #3]
 8004696:	466b      	mov	r3, sp
 8004698:	461e      	mov	r6, r3
	if (Msg[START_POS] != START_VALUE)	return ;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	781b      	ldrb	r3, [r3, #0]
 800469e:	2b01      	cmp	r3, #1
 80046a0:	f040 8162 	bne.w	8004968 <Lora_receive+0x2e0>
	uint8_t id_len = Msg[ID_LENGTH_POS] - 1;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	3301      	adds	r3, #1
 80046a8:	781b      	ldrb	r3, [r3, #0]
 80046aa:	3b01      	subs	r3, #1
 80046ac:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
	// Get sensor ID
	uint8_t tmpidbuff[id_len+1] ;
 80046b0:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 80046b4:	1c59      	adds	r1, r3, #1
 80046b6:	1e4b      	subs	r3, r1, #1
 80046b8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80046bc:	460a      	mov	r2, r1
 80046be:	2300      	movs	r3, #0
 80046c0:	4690      	mov	r8, r2
 80046c2:	4699      	mov	r9, r3
 80046c4:	f04f 0200 	mov.w	r2, #0
 80046c8:	f04f 0300 	mov.w	r3, #0
 80046cc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80046d0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80046d4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80046d8:	460a      	mov	r2, r1
 80046da:	2300      	movs	r3, #0
 80046dc:	4614      	mov	r4, r2
 80046de:	461d      	mov	r5, r3
 80046e0:	f04f 0200 	mov.w	r2, #0
 80046e4:	f04f 0300 	mov.w	r3, #0
 80046e8:	00eb      	lsls	r3, r5, #3
 80046ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80046ee:	00e2      	lsls	r2, r4, #3
 80046f0:	460b      	mov	r3, r1
 80046f2:	3307      	adds	r3, #7
 80046f4:	08db      	lsrs	r3, r3, #3
 80046f6:	00db      	lsls	r3, r3, #3
 80046f8:	ebad 0d03 	sub.w	sp, sp, r3
 80046fc:	ab1a      	add	r3, sp, #104	; 0x68
 80046fe:	3300      	adds	r3, #0
 8004700:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
	memset(tmpidbuff, 0, id_len+1);
 8004704:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 8004708:	3301      	adds	r3, #1
 800470a:	461a      	mov	r2, r3
 800470c:	2100      	movs	r1, #0
 800470e:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8004712:	f007 fda7 	bl	800c264 <memset>
	memcpy(tmpidbuff, Msg +ID_STARTPOS, id_len);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	3303      	adds	r3, #3
 800471a:	f897 20f3 	ldrb.w	r2, [r7, #243]	; 0xf3
 800471e:	4619      	mov	r1, r3
 8004720:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8004724:	f007 fd90 	bl	800c248 <memcpy>
	uint8_t id = atoi((char*)tmpidbuff);
 8004728:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 800472c:	f007 fc2e 	bl	800bf8c <atoi>
 8004730:	4603      	mov	r3, r0
 8004732:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
	if ( !sensorID_validation(id) )	return;
 8004736:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 800473a:	4618      	mov	r0, r3
 800473c:	f001 f8d0 	bl	80058e0 <sensorID_validation>
 8004740:	4603      	mov	r3, r0
 8004742:	f083 0301 	eor.w	r3, r3, #1
 8004746:	b2db      	uxtb	r3, r3
 8004748:	2b00      	cmp	r3, #0
 800474a:	f040 810f 	bne.w	800496c <Lora_receive+0x2e4>

	// Get voltage type or mode
	uint8_t flag = 0;
 800474e:	2300      	movs	r3, #0
 8004750:	f887 30f9 	strb.w	r3, [r7, #249]	; 0xf9
	voltage_t vtype = 0;
 8004754:	2300      	movs	r3, #0
 8004756:	f887 30fa 	strb.w	r3, [r7, #250]	; 0xfa
	uint8_t modevalue = 0;
 800475a:	2300      	movs	r3, #0
 800475c:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
	uint16_t Vperiod = 0;
 8004760:	2300      	movs	r3, #0
 8004762:	f8a7 30fc 	strh.w	r3, [r7, #252]	; 0xfc
	uint8_t Vcalib[101];
	uint8_t mode = 0;
 8004766:	2300      	movs	r3, #0
 8004768:	f887 30ff 	strb.w	r3, [r7, #255]	; 0xff
	uint8_t tmp = Msg[ID_STARTPOS+id_len];
 800476c:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 8004770:	3303      	adds	r3, #3
 8004772:	461a      	mov	r2, r3
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	4413      	add	r3, r2
 8004778:	781b      	ldrb	r3, [r3, #0]
 800477a:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
	switch (tmp)	{
 800477e:	f897 30e6 	ldrb.w	r3, [r7, #230]	; 0xe6
 8004782:	2b08      	cmp	r3, #8
 8004784:	d009      	beq.n	800479a <Lora_receive+0x112>
 8004786:	2b08      	cmp	r3, #8
 8004788:	dc0f      	bgt.n	80047aa <Lora_receive+0x122>
 800478a:	2b04      	cmp	r3, #4
 800478c:	d009      	beq.n	80047a2 <Lora_receive+0x11a>
 800478e:	2b07      	cmp	r3, #7
 8004790:	d10b      	bne.n	80047aa <Lora_receive+0x122>
	case 7:
		vtype = V_na;
 8004792:	2302      	movs	r3, #2
 8004794:	f887 30fa 	strb.w	r3, [r7, #250]	; 0xfa
		break;
 8004798:	e008      	b.n	80047ac <Lora_receive+0x124>
	case 8:
		vtype = V_p;
 800479a:	2301      	movs	r3, #1
 800479c:	f887 30fa 	strb.w	r3, [r7, #250]	; 0xfa
		break;
 80047a0:	e004      	b.n	80047ac <Lora_receive+0x124>
	case 4:
		mode = 1;
 80047a2:	2301      	movs	r3, #1
 80047a4:	f887 30ff 	strb.w	r3, [r7, #255]	; 0xff
		break;
 80047a8:	e000      	b.n	80047ac <Lora_receive+0x124>
	default:
		break;
 80047aa:	bf00      	nop
	}
	if (!vtype && !mode)	return;
 80047ac:	f897 30fa 	ldrb.w	r3, [r7, #250]	; 0xfa
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d104      	bne.n	80047be <Lora_receive+0x136>
 80047b4:	f897 30ff 	ldrb.w	r3, [r7, #255]	; 0xff
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	f000 80d9 	beq.w	8004970 <Lora_receive+0x2e8>
	if (mode)	{
 80047be:	f897 30ff 	ldrb.w	r3, [r7, #255]	; 0xff
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d00b      	beq.n	80047de <Lora_receive+0x156>
		// Get mode
		modevalue = Msg[ID_STARTPOS+id_len +2];
 80047c6:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 80047ca:	3305      	adds	r3, #5
 80047cc:	687a      	ldr	r2, [r7, #4]
 80047ce:	4413      	add	r3, r2
 80047d0:	781b      	ldrb	r3, [r3, #0]
 80047d2:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
		flag = 1;
 80047d6:	2301      	movs	r3, #1
 80047d8:	f887 30f9 	strb.w	r3, [r7, #249]	; 0xf9
 80047dc:	e028      	b.n	8004830 <Lora_receive+0x1a8>
	}
	else {

		// check whether Data Period or Data Calib
		switch	(Msg[ID_STARTPOS +id_len +1]) {
 80047de:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 80047e2:	3304      	adds	r3, #4
 80047e4:	687a      	ldr	r2, [r7, #4]
 80047e6:	4413      	add	r3, r2
 80047e8:	781b      	ldrb	r3, [r3, #0]
 80047ea:	2b02      	cmp	r3, #2
 80047ec:	d002      	beq.n	80047f4 <Lora_receive+0x16c>
 80047ee:	2b64      	cmp	r3, #100	; 0x64
 80047f0:	d00f      	beq.n	8004812 <Lora_receive+0x18a>
			// Get data calib value
			memcpy(Vcalib , Msg + ID_STARTPOS +id_len +2, 100);
			flag = 3;
			break;
		default:
			break;
 80047f2:	e01d      	b.n	8004830 <Lora_receive+0x1a8>
			Vperiod = buff2twobyte(Msg + ID_STARTPOS +id_len +2);
 80047f4:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 80047f8:	3305      	adds	r3, #5
 80047fa:	687a      	ldr	r2, [r7, #4]
 80047fc:	4413      	add	r3, r2
 80047fe:	4618      	mov	r0, r3
 8004800:	f000 fdba 	bl	8005378 <buff2twobyte>
 8004804:	4603      	mov	r3, r0
 8004806:	f8a7 30fc 	strh.w	r3, [r7, #252]	; 0xfc
			flag = 2;
 800480a:	2302      	movs	r3, #2
 800480c:	f887 30f9 	strb.w	r3, [r7, #249]	; 0xf9
			break;
 8004810:	e00e      	b.n	8004830 <Lora_receive+0x1a8>
			memcpy(Vcalib , Msg + ID_STARTPOS +id_len +2, 100);
 8004812:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 8004816:	3305      	adds	r3, #5
 8004818:	687a      	ldr	r2, [r7, #4]
 800481a:	18d1      	adds	r1, r2, r3
 800481c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8004820:	2264      	movs	r2, #100	; 0x64
 8004822:	4618      	mov	r0, r3
 8004824:	f007 fd10 	bl	800c248 <memcpy>
			flag = 3;
 8004828:	2303      	movs	r3, #3
 800482a:	f887 30f9 	strb.w	r3, [r7, #249]	; 0xf9
			break;
 800482e:	bf00      	nop
		}

	}

	// If Sensor ID is  not already saved in the Sensor node list
	if ( !isIDExist(id) )		{
 8004830:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 8004834:	4618      	mov	r0, r3
 8004836:	f7ff ff03 	bl	8004640 <isIDExist>
 800483a:	4603      	mov	r3, r0
 800483c:	f083 0301 	eor.w	r3, r3, #1
 8004840:	b2db      	uxtb	r3, r3
 8004842:	2b00      	cmp	r3, #0
 8004844:	d043      	beq.n	80048ce <Lora_receive+0x246>
		SensorNode_t newSensor = SENSORNODE_T_INIT;
 8004846:	f107 030c 	add.w	r3, r7, #12
 800484a:	2272      	movs	r2, #114	; 0x72
 800484c:	2100      	movs	r1, #0
 800484e:	4618      	mov	r0, r3
 8004850:	f007 fd08 	bl	800c264 <memset>
 8004854:	2301      	movs	r3, #1
 8004856:	743b      	strb	r3, [r7, #16]
 8004858:	2301      	movs	r3, #1
 800485a:	753b      	strb	r3, [r7, #20]
		newSensor.SSnode_ID = id;
 800485c:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 8004860:	733b      	strb	r3, [r7, #12]
		switch (flag)	{
 8004862:	f897 30f9 	ldrb.w	r3, [r7, #249]	; 0xf9
 8004866:	2b03      	cmp	r3, #3
 8004868:	d011      	beq.n	800488e <Lora_receive+0x206>
 800486a:	2b03      	cmp	r3, #3
 800486c:	dc1e      	bgt.n	80048ac <Lora_receive+0x224>
 800486e:	2b01      	cmp	r3, #1
 8004870:	d002      	beq.n	8004878 <Lora_receive+0x1f0>
 8004872:	2b02      	cmp	r3, #2
 8004874:	d004      	beq.n	8004880 <Lora_receive+0x1f8>
			newSensor.V_type = vtype;
			memcpy(newSensor.dataCalibBuffer, Vcalib, 100);
			newSensor.dataCalibAvailable = 1;
			break;
		default:
			break;
 8004876:	e019      	b.n	80048ac <Lora_receive+0x224>
			newSensor.sensorMode = modevalue;
 8004878:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 800487c:	75fb      	strb	r3, [r7, #23]
			break;
 800487e:	e016      	b.n	80048ae <Lora_receive+0x226>
			newSensor.V_type = vtype;
 8004880:	f897 30fa 	ldrb.w	r3, [r7, #250]	; 0xfa
 8004884:	743b      	strb	r3, [r7, #16]
			newSensor.V_value = Vperiod;
 8004886:	f8b7 30fc 	ldrh.w	r3, [r7, #252]	; 0xfc
 800488a:	827b      	strh	r3, [r7, #18]
			break;
 800488c:	e00f      	b.n	80048ae <Lora_receive+0x226>
			newSensor.V_type = vtype;
 800488e:	f897 30fa 	ldrb.w	r3, [r7, #250]	; 0xfa
 8004892:	743b      	strb	r3, [r7, #16]
			memcpy(newSensor.dataCalibBuffer, Vcalib, 100);
 8004894:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8004898:	f107 030c 	add.w	r3, r7, #12
 800489c:	330c      	adds	r3, #12
 800489e:	2264      	movs	r2, #100	; 0x64
 80048a0:	4618      	mov	r0, r3
 80048a2:	f007 fcd1 	bl	800c248 <memcpy>
			newSensor.dataCalibAvailable = 1;
 80048a6:	2301      	movs	r3, #1
 80048a8:	757b      	strb	r3, [r7, #21]
			break;
 80048aa:	e000      	b.n	80048ae <Lora_receive+0x226>
			break;
 80048ac:	bf00      	nop
		}
		list_append(myStation.ssNode_list, newSensor);
 80048ae:	4b34      	ldr	r3, [pc, #208]	; (8004980 <Lora_receive+0x2f8>)
 80048b0:	68dc      	ldr	r4, [r3, #12]
 80048b2:	4668      	mov	r0, sp
 80048b4:	f107 0318 	add.w	r3, r7, #24
 80048b8:	2266      	movs	r2, #102	; 0x66
 80048ba:	4619      	mov	r1, r3
 80048bc:	f007 fcc4 	bl	800c248 <memcpy>
 80048c0:	f107 030c 	add.w	r3, r7, #12
 80048c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80048c6:	4620      	mov	r0, r4
 80048c8:	f001 faf0 	bl	8005eac <list_append>
 80048cc:	e04a      	b.n	8004964 <Lora_receive+0x2dc>
	}
	// If Sensor ID is already saved in the Sensor node list
	else {
		Node * current = myStation.ssNode_list->head->next;
 80048ce:	4b2c      	ldr	r3, [pc, #176]	; (8004980 <Lora_receive+0x2f8>)
 80048d0:	68db      	ldr	r3, [r3, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048d6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
		while (current != myStation.ssNode_list->tail)	{
 80048da:	e03c      	b.n	8004956 <Lora_receive+0x2ce>
			if (current->SSnode.SSnode_ID == id) {
 80048dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048e0:	781b      	ldrb	r3, [r3, #0]
 80048e2:	f897 20e7 	ldrb.w	r2, [r7, #231]	; 0xe7
 80048e6:	429a      	cmp	r2, r3
 80048e8:	d130      	bne.n	800494c <Lora_receive+0x2c4>
				switch (flag)	{
 80048ea:	f897 30f9 	ldrb.w	r3, [r7, #249]	; 0xf9
 80048ee:	2b03      	cmp	r3, #3
 80048f0:	d017      	beq.n	8004922 <Lora_receive+0x29a>
 80048f2:	2b03      	cmp	r3, #3
 80048f4:	dc28      	bgt.n	8004948 <Lora_receive+0x2c0>
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d002      	beq.n	8004900 <Lora_receive+0x278>
 80048fa:	2b02      	cmp	r3, #2
 80048fc:	d006      	beq.n	800490c <Lora_receive+0x284>
					current->SSnode.V_type = vtype;
					memcpy(current->SSnode.dataCalibBuffer, Vcalib, 100);
					current->SSnode.dataCalibAvailable = 1;
					break;
				default:
					break;
 80048fe:	e023      	b.n	8004948 <Lora_receive+0x2c0>
					current->SSnode.sensorMode = modevalue;
 8004900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004904:	f897 20fb 	ldrb.w	r2, [r7, #251]	; 0xfb
 8004908:	72da      	strb	r2, [r3, #11]
					break;
 800490a:	e01e      	b.n	800494a <Lora_receive+0x2c2>
					current->SSnode.V_type = vtype;
 800490c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004910:	f897 20fa 	ldrb.w	r2, [r7, #250]	; 0xfa
 8004914:	711a      	strb	r2, [r3, #4]
					current->SSnode.V_value = Vperiod;
 8004916:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800491a:	f8b7 20fc 	ldrh.w	r2, [r7, #252]	; 0xfc
 800491e:	80da      	strh	r2, [r3, #6]
					break;
 8004920:	e013      	b.n	800494a <Lora_receive+0x2c2>
					current->SSnode.V_type = vtype;
 8004922:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004926:	f897 20fa 	ldrb.w	r2, [r7, #250]	; 0xfa
 800492a:	711a      	strb	r2, [r3, #4]
					memcpy(current->SSnode.dataCalibBuffer, Vcalib, 100);
 800492c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004930:	330c      	adds	r3, #12
 8004932:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8004936:	2264      	movs	r2, #100	; 0x64
 8004938:	4618      	mov	r0, r3
 800493a:	f007 fc85 	bl	800c248 <memcpy>
					current->SSnode.dataCalibAvailable = 1;
 800493e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004942:	2201      	movs	r2, #1
 8004944:	725a      	strb	r2, [r3, #9]
					break;
 8004946:	e000      	b.n	800494a <Lora_receive+0x2c2>
					break;
 8004948:	bf00      	nop
				}
				return;
 800494a:	e012      	b.n	8004972 <Lora_receive+0x2ea>
			}
			current = current->next;
 800494c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004950:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004952:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
		while (current != myStation.ssNode_list->tail)	{
 8004956:	4b0a      	ldr	r3, [pc, #40]	; (8004980 <Lora_receive+0x2f8>)
 8004958:	68db      	ldr	r3, [r3, #12]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8004960:	429a      	cmp	r2, r3
 8004962:	d1bb      	bne.n	80048dc <Lora_receive+0x254>
 8004964:	46b5      	mov	sp, r6
 8004966:	e005      	b.n	8004974 <Lora_receive+0x2ec>
	if (Msg[START_POS] != START_VALUE)	return ;
 8004968:	bf00      	nop
 800496a:	e002      	b.n	8004972 <Lora_receive+0x2ea>
	if ( !sensorID_validation(id) )	return;
 800496c:	bf00      	nop
 800496e:	e000      	b.n	8004972 <Lora_receive+0x2ea>
	if (!vtype && !mode)	return;
 8004970:	bf00      	nop
 8004972:	46b5      	mov	sp, r6
		}
	}
}
 8004974:	f507 7782 	add.w	r7, r7, #260	; 0x104
 8004978:	46bd      	mov	sp, r7
 800497a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800497e:	bf00      	nop
 8004980:	20000478 	.word	0x20000478

08004984 <Lora_Setmode>:

uint8_t Lora_Setmode(sensor_mode_t mode)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b084      	sub	sp, #16
 8004988:	af00      	add	r7, sp, #0
 800498a:	4603      	mov	r3, r0
 800498c:	71fb      	strb	r3, [r7, #7]
	uint8_t len = sprintf((char*)LoraTxbuff, "AT+MODE=%d", mode);
 800498e:	79fb      	ldrb	r3, [r7, #7]
 8004990:	461a      	mov	r2, r3
 8004992:	4912      	ldr	r1, [pc, #72]	; (80049dc <Lora_Setmode+0x58>)
 8004994:	4812      	ldr	r0, [pc, #72]	; (80049e0 <Lora_Setmode+0x5c>)
 8004996:	f008 f809 	bl	800c9ac <siprintf>
 800499a:	4603      	mov	r3, r0
 800499c:	73bb      	strb	r3, [r7, #14]
	isOK = 0;
 800499e:	4b11      	ldr	r3, [pc, #68]	; (80049e4 <Lora_Setmode+0x60>)
 80049a0:	2200      	movs	r2, #0
 80049a2:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(__LORA_UART, LoraTxbuff, len, LORA_TIMEOUT);
 80049a4:	7bbb      	ldrb	r3, [r7, #14]
 80049a6:	b29a      	uxth	r2, r3
 80049a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80049ac:	490c      	ldr	r1, [pc, #48]	; (80049e0 <Lora_Setmode+0x5c>)
 80049ae:	480e      	ldr	r0, [pc, #56]	; (80049e8 <Lora_Setmode+0x64>)
 80049b0:	f006 fb00 	bl	800afb4 <HAL_UART_Transmit>
	// Wait for responding
	for (uint8_t i = 0; i < 500; i++)	{
 80049b4:	2300      	movs	r3, #0
 80049b6:	73fb      	strb	r3, [r7, #15]
		HAL_Delay(2);
 80049b8:	2002      	movs	r0, #2
 80049ba:	f003 f98f 	bl	8007cdc <HAL_Delay>
		if (isOK)	return 1;
 80049be:	4b09      	ldr	r3, [pc, #36]	; (80049e4 <Lora_Setmode+0x60>)
 80049c0:	781b      	ldrb	r3, [r3, #0]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d001      	beq.n	80049ca <Lora_Setmode+0x46>
 80049c6:	2301      	movs	r3, #1
 80049c8:	e003      	b.n	80049d2 <Lora_Setmode+0x4e>
	for (uint8_t i = 0; i < 500; i++)	{
 80049ca:	7bfb      	ldrb	r3, [r7, #15]
 80049cc:	3301      	adds	r3, #1
 80049ce:	73fb      	strb	r3, [r7, #15]
		HAL_Delay(2);
 80049d0:	e7f2      	b.n	80049b8 <Lora_Setmode+0x34>
	}
	return 0;
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3710      	adds	r7, #16
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}
 80049da:	bf00      	nop
 80049dc:	0800f108 	.word	0x0800f108
 80049e0:	20001480 	.word	0x20001480
 80049e4:	200014e4 	.word	0x200014e4
 80049e8:	20002af8 	.word	0x20002af8

080049ec <init_MQTT>:

uint8_t MQTT_Txbuff [MQTT_TXBUFF_SIZE];


void init_MQTT()
{
 80049ec:	b480      	push	{r7}
 80049ee:	af00      	add	r7, sp, #0
//	mySIM = SIM;
}
 80049f0:	bf00      	nop
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bc80      	pop	{r7}
 80049f6:	4770      	bx	lr

080049f8 <MQTT_getConnectflag>:

uint8_t MQTT_getConnectflag()
{
 80049f8:	b480      	push	{r7}
 80049fa:	af00      	add	r7, sp, #0
	return mySIM.mqttServer.connect;
 80049fc:	4b02      	ldr	r3, [pc, #8]	; (8004a08 <MQTT_getConnectflag+0x10>)
 80049fe:	7e9b      	ldrb	r3, [r3, #26]
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bc80      	pop	{r7}
 8004a06:	4770      	bx	lr
 8004a08:	20001774 	.word	0x20001774

08004a0c <getContent>:

}


static uint8_t getContent(content_t contentType, uint8_t *databuffer, uint16_t datalen, uint8_t *getbuffer, uint16_t contentlen)
{
 8004a0c:	b5b0      	push	{r4, r5, r7, lr}
 8004a0e:	b092      	sub	sp, #72	; 0x48
 8004a10:	af02      	add	r7, sp, #8
 8004a12:	60b9      	str	r1, [r7, #8]
 8004a14:	607b      	str	r3, [r7, #4]
 8004a16:	4603      	mov	r3, r0
 8004a18:	73fb      	strb	r3, [r7, #15]
 8004a1a:	4613      	mov	r3, r2
 8004a1c:	81bb      	strh	r3, [r7, #12]
	uint16_t gotcontent_len = 0;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	87fb      	strh	r3, [r7, #62]	; 0x3e

	uint8_t *currentPOS ;
	uint16_t databuffer_Remainlen = datalen;
 8004a22:	89bb      	ldrh	r3, [r7, #12]
 8004a24:	86fb      	strh	r3, [r7, #54]	; 0x36

	uint16_t subcontent_len;
	uint8_t subContentlen_buff[10];
	uint8_t contentsignature[20];
	if (contentType == CONTENT_PAYLOAD) {
 8004a26:	7bfb      	ldrb	r3, [r7, #15]
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	d109      	bne.n	8004a40 <getContent+0x34>
		strcpy( (char*)contentsignature, "+CMQTTRXPAYLOAD:");
 8004a2c:	f107 0314 	add.w	r3, r7, #20
 8004a30:	4a36      	ldr	r2, [pc, #216]	; (8004b0c <getContent+0x100>)
 8004a32:	461c      	mov	r4, r3
 8004a34:	4615      	mov	r5, r2
 8004a36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004a38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004a3a:	682b      	ldr	r3, [r5, #0]
 8004a3c:	7023      	strb	r3, [r4, #0]
 8004a3e:	e05b      	b.n	8004af8 <getContent+0xec>
 	}
	else if (contentType == CONTENT_TOPIC) {
 8004a40:	7bfb      	ldrb	r3, [r7, #15]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d10b      	bne.n	8004a5e <getContent+0x52>
		strcpy( (char*)contentsignature, "+CMQTTRXTOPIC:");
 8004a46:	f107 0314 	add.w	r3, r7, #20
 8004a4a:	4a31      	ldr	r2, [pc, #196]	; (8004b10 <getContent+0x104>)
 8004a4c:	461c      	mov	r4, r3
 8004a4e:	4613      	mov	r3, r2
 8004a50:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004a52:	c407      	stmia	r4!, {r0, r1, r2}
 8004a54:	8023      	strh	r3, [r4, #0]
 8004a56:	3402      	adds	r4, #2
 8004a58:	0c1b      	lsrs	r3, r3, #16
 8004a5a:	7023      	strb	r3, [r4, #0]
 8004a5c:	e04c      	b.n	8004af8 <getContent+0xec>
	}
	else return 0;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	e050      	b.n	8004b04 <getContent+0xf8>

	while ( gotcontent_len < contentlen )
	{
		currentPOS = isWordinBuff(databuffer, databuffer_Remainlen, contentsignature);
 8004a62:	f107 0214 	add.w	r2, r7, #20
 8004a66:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004a68:	4619      	mov	r1, r3
 8004a6a:	68b8      	ldr	r0, [r7, #8]
 8004a6c:	f000 fbdc 	bl	8005228 <isWordinBuff>
 8004a70:	63b8      	str	r0, [r7, #56]	; 0x38
		if (currentPOS == NULL)		return  0;
 8004a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d101      	bne.n	8004a7c <getContent+0x70>
 8004a78:	2300      	movs	r3, #0
 8004a7a:	e043      	b.n	8004b04 <getContent+0xf8>
		databuffer_Remainlen = getRemainsize( currentPOS, databuffer, databuffer_Remainlen );
 8004a7c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004a7e:	461a      	mov	r2, r3
 8004a80:	68b9      	ldr	r1, [r7, #8]
 8004a82:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004a84:	f000 fc4f 	bl	8005326 <getRemainsize>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	86fb      	strh	r3, [r7, #54]	; 0x36

		// Get subcontent length
		getBetween( (uint8_t*)",", (uint8_t*) "\r", currentPOS, databuffer_Remainlen, subContentlen_buff);
 8004a8c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8004a8e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004a92:	9300      	str	r3, [sp, #0]
 8004a94:	4613      	mov	r3, r2
 8004a96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a98:	491e      	ldr	r1, [pc, #120]	; (8004b14 <getContent+0x108>)
 8004a9a:	481f      	ldr	r0, [pc, #124]	; (8004b18 <getContent+0x10c>)
 8004a9c:	f000 fbf0 	bl	8005280 <getBetween>
		subcontent_len = atoi( (char*)subContentlen_buff );
 8004aa0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	f007 fa71 	bl	800bf8c <atoi>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	867b      	strh	r3, [r7, #50]	; 0x32

		// Get subcontent
		while ( *currentPOS != '\n'){
 8004aae:	e002      	b.n	8004ab6 <getContent+0xaa>
			currentPOS++;
 8004ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ab2:	3301      	adds	r3, #1
 8004ab4:	63bb      	str	r3, [r7, #56]	; 0x38
		while ( *currentPOS != '\n'){
 8004ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ab8:	781b      	ldrb	r3, [r3, #0]
 8004aba:	2b0a      	cmp	r3, #10
 8004abc:	d1f8      	bne.n	8004ab0 <getContent+0xa4>
		}
		currentPOS++;
 8004abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ac0:	3301      	adds	r3, #1
 8004ac2:	63bb      	str	r3, [r7, #56]	; 0x38
		for (uint16_t i = 0; i< subcontent_len; i++)
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004ac8:	e00d      	b.n	8004ae6 <getContent+0xda>
		{
			getbuffer[gotcontent_len++] = currentPOS[i];
 8004aca:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004acc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ace:	441a      	add	r2, r3
 8004ad0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004ad2:	1c59      	adds	r1, r3, #1
 8004ad4:	87f9      	strh	r1, [r7, #62]	; 0x3e
 8004ad6:	4619      	mov	r1, r3
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	440b      	add	r3, r1
 8004adc:	7812      	ldrb	r2, [r2, #0]
 8004ade:	701a      	strb	r2, [r3, #0]
		for (uint16_t i = 0; i< subcontent_len; i++)
 8004ae0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004ae2:	3301      	adds	r3, #1
 8004ae4:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004ae6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004ae8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004aea:	429a      	cmp	r2, r3
 8004aec:	d3ed      	bcc.n	8004aca <getContent+0xbe>
		}

		// Update databuffer
		databuffer = ++currentPOS;
 8004aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004af0:	3301      	adds	r3, #1
 8004af2:	63bb      	str	r3, [r7, #56]	; 0x38
 8004af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004af6:	60bb      	str	r3, [r7, #8]
	while ( gotcontent_len < contentlen )
 8004af8:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8004afa:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004afe:	429a      	cmp	r2, r3
 8004b00:	d3af      	bcc.n	8004a62 <getContent+0x56>
	}
	return 1;
 8004b02:	2301      	movs	r3, #1
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	3740      	adds	r7, #64	; 0x40
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bdb0      	pop	{r4, r5, r7, pc}
 8004b0c:	0800f120 	.word	0x0800f120
 8004b10:	0800f134 	.word	0x0800f134
 8004b14:	0800f144 	.word	0x0800f144
 8004b18:	0800f148 	.word	0x0800f148

08004b1c <MQTT_receiveGetTopicandPayloadLength>:

uint8_t MQTT_receiveGetTopicandPayloadLength( uint8_t *MQTTbuff, uint16_t buffsize)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b08c      	sub	sp, #48	; 0x30
 8004b20:	af02      	add	r7, sp, #8
 8004b22:	6078      	str	r0, [r7, #4]
 8004b24:	460b      	mov	r3, r1
 8004b26:	807b      	strh	r3, [r7, #2]
	uint8_t topiclen_buff[10];
	uint8_t payloadlen_buff[10];
//	Serial_log_string("MQTTbuffer: ");
//	Serial_log_buffer(MQTTbuff, buffsize);
//	Serial_log_string(" ");
	uint8_t * currentPos = isWordinBuff(MQTTbuff, buffsize, (uint8_t*)"+CMQTTRXSTART:");
 8004b28:	887b      	ldrh	r3, [r7, #2]
 8004b2a:	4a22      	ldr	r2, [pc, #136]	; (8004bb4 <MQTT_receiveGetTopicandPayloadLength+0x98>)
 8004b2c:	4619      	mov	r1, r3
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f000 fb7a 	bl	8005228 <isWordinBuff>
 8004b34:	6278      	str	r0, [r7, #36]	; 0x24

	uint16_t remainlen = getRemainsize(currentPos, MQTTbuff, buffsize);
 8004b36:	887b      	ldrh	r3, [r7, #2]
 8004b38:	461a      	mov	r2, r3
 8004b3a:	6879      	ldr	r1, [r7, #4]
 8004b3c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004b3e:	f000 fbf2 	bl	8005326 <getRemainsize>
 8004b42:	4603      	mov	r3, r0
 8004b44:	847b      	strh	r3, [r7, #34]	; 0x22

	getBetween( (uint8_t*)",", (uint8_t*)",", currentPos, remainlen, topiclen_buff);
 8004b46:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8004b48:	f107 0318 	add.w	r3, r7, #24
 8004b4c:	9300      	str	r3, [sp, #0]
 8004b4e:	4613      	mov	r3, r2
 8004b50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b52:	4919      	ldr	r1, [pc, #100]	; (8004bb8 <MQTT_receiveGetTopicandPayloadLength+0x9c>)
 8004b54:	4818      	ldr	r0, [pc, #96]	; (8004bb8 <MQTT_receiveGetTopicandPayloadLength+0x9c>)
 8004b56:	f000 fb93 	bl	8005280 <getBetween>
	mySIM.mqttReceive.topicLen = atoi( (char*)topiclen_buff );
 8004b5a:	f107 0318 	add.w	r3, r7, #24
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f007 fa14 	bl	800bf8c <atoi>
 8004b64:	4603      	mov	r3, r0
 8004b66:	b29a      	uxth	r2, r3
 8004b68:	4b14      	ldr	r3, [pc, #80]	; (8004bbc <MQTT_receiveGetTopicandPayloadLength+0xa0>)
 8004b6a:	f8a3 2162 	strh.w	r2, [r3, #354]	; 0x162

	currentPos = isWordinBuff(currentPos, remainlen,(uint8_t*)",");
 8004b6e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004b70:	4a11      	ldr	r2, [pc, #68]	; (8004bb8 <MQTT_receiveGetTopicandPayloadLength+0x9c>)
 8004b72:	4619      	mov	r1, r3
 8004b74:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004b76:	f000 fb57 	bl	8005228 <isWordinBuff>
 8004b7a:	6278      	str	r0, [r7, #36]	; 0x24
	currentPos ++;
 8004b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7e:	3301      	adds	r3, #1
 8004b80:	627b      	str	r3, [r7, #36]	; 0x24

	getBetween( (uint8_t*)",", (uint8_t*)"\r", currentPos, remainlen, payloadlen_buff);
 8004b82:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8004b84:	f107 030c 	add.w	r3, r7, #12
 8004b88:	9300      	str	r3, [sp, #0]
 8004b8a:	4613      	mov	r3, r2
 8004b8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b8e:	490c      	ldr	r1, [pc, #48]	; (8004bc0 <MQTT_receiveGetTopicandPayloadLength+0xa4>)
 8004b90:	4809      	ldr	r0, [pc, #36]	; (8004bb8 <MQTT_receiveGetTopicandPayloadLength+0x9c>)
 8004b92:	f000 fb75 	bl	8005280 <getBetween>
	mySIM.mqttReceive.payloadLen = atoi( (char*)payloadlen_buff );
 8004b96:	f107 030c 	add.w	r3, r7, #12
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	f007 f9f6 	bl	800bf8c <atoi>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	b29a      	uxth	r2, r3
 8004ba4:	4b05      	ldr	r3, [pc, #20]	; (8004bbc <MQTT_receiveGetTopicandPayloadLength+0xa0>)
 8004ba6:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138

	return 1;
 8004baa:	2301      	movs	r3, #1
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	3728      	adds	r7, #40	; 0x28
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}
 8004bb4:	0800f14c 	.word	0x0800f14c
 8004bb8:	0800f148 	.word	0x0800f148
 8004bbc:	20001774 	.word	0x20001774
 8004bc0:	0800f144 	.word	0x0800f144

08004bc4 <MQTT_receiveGetTopic>:

uint8_t MQTT_receiveGetTopic (uint8_t *MQTTbuff,uint16_t buffsize)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b084      	sub	sp, #16
 8004bc8:	af02      	add	r7, sp, #8
 8004bca:	6078      	str	r0, [r7, #4]
 8004bcc:	460b      	mov	r3, r1
 8004bce:	807b      	strh	r3, [r7, #2]
	return getContent(CONTENT_TOPIC, MQTTbuff, buffsize, mySIM.mqttReceive.topic, mySIM.mqttReceive.topicLen);
 8004bd0:	4b07      	ldr	r3, [pc, #28]	; (8004bf0 <MQTT_receiveGetTopic+0x2c>)
 8004bd2:	f8b3 3162 	ldrh.w	r3, [r3, #354]	; 0x162
 8004bd6:	887a      	ldrh	r2, [r7, #2]
 8004bd8:	9300      	str	r3, [sp, #0]
 8004bda:	4b06      	ldr	r3, [pc, #24]	; (8004bf4 <MQTT_receiveGetTopic+0x30>)
 8004bdc:	6879      	ldr	r1, [r7, #4]
 8004bde:	2000      	movs	r0, #0
 8004be0:	f7ff ff14 	bl	8004a0c <getContent>
 8004be4:	4603      	mov	r3, r0
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3708      	adds	r7, #8
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}
 8004bee:	bf00      	nop
 8004bf0:	20001774 	.word	0x20001774
 8004bf4:	200018ae 	.word	0x200018ae

08004bf8 <MQTT_receiveGetPayload>:

uint8_t MQTT_receiveGetPayload (uint8_t *MQTTbuff,uint16_t buffsize)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b084      	sub	sp, #16
 8004bfc:	af02      	add	r7, sp, #8
 8004bfe:	6078      	str	r0, [r7, #4]
 8004c00:	460b      	mov	r3, r1
 8004c02:	807b      	strh	r3, [r7, #2]
	return getContent(CONTENT_PAYLOAD, MQTTbuff, buffsize, mySIM.mqttReceive.payload, mySIM.mqttReceive.payloadLen);
 8004c04:	4b07      	ldr	r3, [pc, #28]	; (8004c24 <MQTT_receiveGetPayload+0x2c>)
 8004c06:	f8b3 3138 	ldrh.w	r3, [r3, #312]	; 0x138
 8004c0a:	887a      	ldrh	r2, [r7, #2]
 8004c0c:	9300      	str	r3, [sp, #0]
 8004c0e:	4b06      	ldr	r3, [pc, #24]	; (8004c28 <MQTT_receiveGetPayload+0x30>)
 8004c10:	6879      	ldr	r1, [r7, #4]
 8004c12:	2001      	movs	r0, #1
 8004c14:	f7ff fefa 	bl	8004a0c <getContent>
 8004c18:	4603      	mov	r3, r0
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3708      	adds	r7, #8
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}
 8004c22:	bf00      	nop
 8004c24:	20001774 	.word	0x20001774
 8004c28:	200017ac 	.word	0x200017ac

08004c2c <MQTT_receive>:
uint8_t MQTT_receive(uint8_t *MQTTbuff,uint16_t buffsize)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b082      	sub	sp, #8
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
 8004c34:	460b      	mov	r3, r1
 8004c36:	807b      	strh	r3, [r7, #2]
	if ( !MQTT_receiveGetTopicandPayloadLength(MQTTbuff, buffsize) ) return 0;
 8004c38:	887b      	ldrh	r3, [r7, #2]
 8004c3a:	4619      	mov	r1, r3
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	f7ff ff6d 	bl	8004b1c <MQTT_receiveGetTopicandPayloadLength>
 8004c42:	4603      	mov	r3, r0
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d101      	bne.n	8004c4c <MQTT_receive+0x20>
 8004c48:	2300      	movs	r3, #0
 8004c4a:	e023      	b.n	8004c94 <MQTT_receive+0x68>

	memset( mySIM.mqttReceive.payload, 0, MAX_PAYLOAD_LEN );
 8004c4c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004c50:	2100      	movs	r1, #0
 8004c52:	4812      	ldr	r0, [pc, #72]	; (8004c9c <MQTT_receive+0x70>)
 8004c54:	f007 fb06 	bl	800c264 <memset>
	memset( mySIM.mqttReceive.topic, 0, MAX_TOPIC_LEN );
 8004c58:	2228      	movs	r2, #40	; 0x28
 8004c5a:	2100      	movs	r1, #0
 8004c5c:	4810      	ldr	r0, [pc, #64]	; (8004ca0 <MQTT_receive+0x74>)
 8004c5e:	f007 fb01 	bl	800c264 <memset>

	if (! MQTT_receiveGetTopic(MQTTbuff, buffsize))		return 0;
 8004c62:	887b      	ldrh	r3, [r7, #2]
 8004c64:	4619      	mov	r1, r3
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f7ff ffac 	bl	8004bc4 <MQTT_receiveGetTopic>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d101      	bne.n	8004c76 <MQTT_receive+0x4a>
 8004c72:	2300      	movs	r3, #0
 8004c74:	e00e      	b.n	8004c94 <MQTT_receive+0x68>

	if (! MQTT_receiveGetPayload(MQTTbuff, buffsize))	return 0;
 8004c76:	887b      	ldrh	r3, [r7, #2]
 8004c78:	4619      	mov	r1, r3
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f7ff ffbc 	bl	8004bf8 <MQTT_receiveGetPayload>
 8004c80:	4603      	mov	r3, r0
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d101      	bne.n	8004c8a <MQTT_receive+0x5e>
 8004c86:	2300      	movs	r3, #0
 8004c88:	e004      	b.n	8004c94 <MQTT_receive+0x68>

	mySIM.mqttReceive.newEvent = 1;
 8004c8a:	4b06      	ldr	r3, [pc, #24]	; (8004ca4 <MQTT_receive+0x78>)
 8004c8c:	2201      	movs	r2, #1
 8004c8e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	return 1;
 8004c92:	2301      	movs	r3, #1
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	3708      	adds	r7, #8
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}
 8004c9c:	200017ac 	.word	0x200017ac
 8004ca0:	200018ae 	.word	0x200018ae
 8004ca4:	20001774 	.word	0x20001774

08004ca8 <MQTT_connected>:

uint8_t MQTT_connected(void)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b082      	sub	sp, #8
 8004cac:	af02      	add	r7, sp, #8
	if ( SIM_sendCMD((uint8_t*)"AT+CMQTTDISC?", (uint8_t*)"+CMQTTDISC: 0,0", ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, 2000) == SIM_RES_MSG )
 8004cae:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8004cb2:	9300      	str	r3, [sp, #0]
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	4909      	ldr	r1, [pc, #36]	; (8004ce0 <MQTT_connected+0x38>)
 8004cba:	480a      	ldr	r0, [pc, #40]	; (8004ce4 <MQTT_connected+0x3c>)
 8004cbc:	f7fd fd00 	bl	80026c0 <SIM_sendCMD>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	2b01      	cmp	r3, #1
 8004cc4:	d104      	bne.n	8004cd0 <MQTT_connected+0x28>
	{
		mySIM.mqttServer.connect = 1;
 8004cc6:	4b08      	ldr	r3, [pc, #32]	; (8004ce8 <MQTT_connected+0x40>)
 8004cc8:	2201      	movs	r2, #1
 8004cca:	769a      	strb	r2, [r3, #26]
//		Serial_log_string("MQTT is connected to broker\r\n");
		return 1;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	e003      	b.n	8004cd8 <MQTT_connected+0x30>
	}
//	Serial_log_string("MQTT is disconnected to broker\r\n");
	mySIM.mqttServer.connect = 0;
 8004cd0:	4b05      	ldr	r3, [pc, #20]	; (8004ce8 <MQTT_connected+0x40>)
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	769a      	strb	r2, [r3, #26]
	return 0;
 8004cd6:	2300      	movs	r3, #0
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}
 8004cde:	bf00      	nop
 8004ce0:	0800f15c 	.word	0x0800f15c
 8004ce4:	0800f16c 	.word	0x0800f16c
 8004ce8:	20001774 	.word	0x20001774

08004cec <startMQTT>:
//    // Check network availability
//    // Implement your network check logic here
//    return 1; // Replace with your logic
//}
//
uint8_t startMQTT(void) {
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b084      	sub	sp, #16
 8004cf0:	af02      	add	r7, sp, #8
    // Implement starting MQTT logic
	// Return 1 on success, 0 on failure

	uint8_t check = SIM_sendCMD((uint8_t*)"AT+CMQTTSTART", (uint8_t*)"+CMQTTSTART: 0", ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, 2000);
 8004cf2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8004cf6:	9300      	str	r3, [sp, #0]
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	490f      	ldr	r1, [pc, #60]	; (8004d3c <startMQTT+0x50>)
 8004cfe:	4810      	ldr	r0, [pc, #64]	; (8004d40 <startMQTT+0x54>)
 8004d00:	f7fd fcde 	bl	80026c0 <SIM_sendCMD>
 8004d04:	4603      	mov	r3, r0
 8004d06:	71fb      	strb	r3, [r7, #7]
	if ( check == SIM_RES_MSG )	{
 8004d08:	79fb      	ldrb	r3, [r7, #7]
 8004d0a:	2b01      	cmp	r3, #1
 8004d0c:	d101      	bne.n	8004d12 <startMQTT+0x26>
//		Serial_log_string("start MQTT success\r\n");
		return 1;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	e010      	b.n	8004d34 <startMQTT+0x48>
	}

	check = SIM_sendCMD((uint8_t*)"AT+CMQTTSTART", (uint8_t*)"ERROR", ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, 2000);
 8004d12:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8004d16:	9300      	str	r3, [sp, #0]
 8004d18:	2301      	movs	r3, #1
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	4909      	ldr	r1, [pc, #36]	; (8004d44 <startMQTT+0x58>)
 8004d1e:	4808      	ldr	r0, [pc, #32]	; (8004d40 <startMQTT+0x54>)
 8004d20:	f7fd fcce 	bl	80026c0 <SIM_sendCMD>
 8004d24:	4603      	mov	r3, r0
 8004d26:	71fb      	strb	r3, [r7, #7]
	if ( check == SIM_RES_MSG )	{
 8004d28:	79fb      	ldrb	r3, [r7, #7]
 8004d2a:	2b01      	cmp	r3, #1
 8004d2c:	d101      	bne.n	8004d32 <startMQTT+0x46>
//		Serial_log_string("start MQTT success\r\n");
		return 1;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	e000      	b.n	8004d34 <startMQTT+0x48>
	}
//	Serial_log_number(check);
//	Serial_log_string("\r\nstart MQTT fail\r\n");
	return 0;
 8004d32:	2300      	movs	r3, #0
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	3708      	adds	r7, #8
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}
 8004d3c:	0800f17c 	.word	0x0800f17c
 8004d40:	0800f18c 	.word	0x0800f18c
 8004d44:	0800f19c 	.word	0x0800f19c

08004d48 <acquireMQTTclient>:

uint8_t acquireMQTTclient (uint8_t *clientID){
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b084      	sub	sp, #16
 8004d4c:	af02      	add	r7, sp, #8
 8004d4e:	6078      	str	r0, [r7, #4]
	sprintf((char*)MQTT_Txbuff,"AT+CMQTTACCQ=0,\"%s\"", clientID);
 8004d50:	687a      	ldr	r2, [r7, #4]
 8004d52:	490b      	ldr	r1, [pc, #44]	; (8004d80 <acquireMQTTclient+0x38>)
 8004d54:	480b      	ldr	r0, [pc, #44]	; (8004d84 <acquireMQTTclient+0x3c>)
 8004d56:	f007 fe29 	bl	800c9ac <siprintf>
	if (SIM_sendCMD(MQTT_Txbuff, (uint8_t*)"OK", ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, 1000)== SIM_RES_MSG)	{
 8004d5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004d5e:	9300      	str	r3, [sp, #0]
 8004d60:	2301      	movs	r3, #1
 8004d62:	2201      	movs	r2, #1
 8004d64:	4908      	ldr	r1, [pc, #32]	; (8004d88 <acquireMQTTclient+0x40>)
 8004d66:	4807      	ldr	r0, [pc, #28]	; (8004d84 <acquireMQTTclient+0x3c>)
 8004d68:	f7fd fcaa 	bl	80026c0 <SIM_sendCMD>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	2b01      	cmp	r3, #1
 8004d70:	d101      	bne.n	8004d76 <acquireMQTTclient+0x2e>
//		Serial_log_string("acquire MQTT client success\r\n");
		return 1;
 8004d72:	2301      	movs	r3, #1
 8004d74:	e000      	b.n	8004d78 <acquireMQTTclient+0x30>
	}
//	Serial_log_string("acquire MQTT client fail\r\n");
    return 0;
 8004d76:	2300      	movs	r3, #0
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	3708      	adds	r7, #8
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}
 8004d80:	0800f1a4 	.word	0x0800f1a4
 8004d84:	200014e8 	.word	0x200014e8
 8004d88:	0800f1b8 	.word	0x0800f1b8

08004d8c <releaseMQTTclient>:
uint8_t releaseMQTTclient (void)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b082      	sub	sp, #8
 8004d90:	af02      	add	r7, sp, #8
	if (SIM_sendCMD((uint8_t*)"AT+CMQTTREL=0", (uint8_t*)"OK", ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, 2000)) {
 8004d92:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8004d96:	9300      	str	r3, [sp, #0]
 8004d98:	2301      	movs	r3, #1
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	4906      	ldr	r1, [pc, #24]	; (8004db8 <releaseMQTTclient+0x2c>)
 8004d9e:	4807      	ldr	r0, [pc, #28]	; (8004dbc <releaseMQTTclient+0x30>)
 8004da0:	f7fd fc8e 	bl	80026c0 <SIM_sendCMD>
 8004da4:	4603      	mov	r3, r0
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d001      	beq.n	8004dae <releaseMQTTclient+0x22>
//		Serial_log_string("release MQTT client success\r\n");
		return 1;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e000      	b.n	8004db0 <releaseMQTTclient+0x24>
	}
//	Serial_log_string("release MQTT client fail\r\n");
	return 0;
 8004dae:	2300      	movs	r3, #0
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}
 8004db6:	bf00      	nop
 8004db8:	0800f1b8 	.word	0x0800f1b8
 8004dbc:	0800f1bc 	.word	0x0800f1bc

08004dc0 <configureMQTT>:
uint8_t configureMQTT() {
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b084      	sub	sp, #16
 8004dc4:	af02      	add	r7, sp, #8
    // Implement MQTT configuration logic
    // Return 1 on success, 0 on failure
	uint8_t wtplen = strlen(mySIM.mqttServer.willtopic);
 8004dc6:	4b3b      	ldr	r3, [pc, #236]	; (8004eb4 <configureMQTT+0xf4>)
 8004dc8:	691b      	ldr	r3, [r3, #16]
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f7fb f9be 	bl	800014c <strlen>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	71fb      	strb	r3, [r7, #7]
	sprintf((char*)MQTT_Txbuff,"AT+CMQTTWILLTOPIC=0,%d",wtplen);
 8004dd4:	79fb      	ldrb	r3, [r7, #7]
 8004dd6:	461a      	mov	r2, r3
 8004dd8:	4937      	ldr	r1, [pc, #220]	; (8004eb8 <configureMQTT+0xf8>)
 8004dda:	4838      	ldr	r0, [pc, #224]	; (8004ebc <configureMQTT+0xfc>)
 8004ddc:	f007 fde6 	bl	800c9ac <siprintf>
	if (SIM_sendCMD(MQTT_Txbuff, (uint8_t*)'>', ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, 2000) != SIM_RES_MSG)	return 0;
 8004de0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8004de4:	9300      	str	r3, [sp, #0]
 8004de6:	2301      	movs	r3, #1
 8004de8:	2201      	movs	r2, #1
 8004dea:	213e      	movs	r1, #62	; 0x3e
 8004dec:	4833      	ldr	r0, [pc, #204]	; (8004ebc <configureMQTT+0xfc>)
 8004dee:	f7fd fc67 	bl	80026c0 <SIM_sendCMD>
 8004df2:	4603      	mov	r3, r0
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	d001      	beq.n	8004dfc <configureMQTT+0x3c>
 8004df8:	2300      	movs	r3, #0
 8004dfa:	e057      	b.n	8004eac <configureMQTT+0xec>

	sprintf((char*)MQTT_Txbuff,"%s",mySIM.mqttServer.willtopic);
 8004dfc:	4b2d      	ldr	r3, [pc, #180]	; (8004eb4 <configureMQTT+0xf4>)
 8004dfe:	691b      	ldr	r3, [r3, #16]
 8004e00:	461a      	mov	r2, r3
 8004e02:	492f      	ldr	r1, [pc, #188]	; (8004ec0 <configureMQTT+0x100>)
 8004e04:	482d      	ldr	r0, [pc, #180]	; (8004ebc <configureMQTT+0xfc>)
 8004e06:	f007 fdd1 	bl	800c9ac <siprintf>
	if (SIM_sendCMD(MQTT_Txbuff, (uint8_t*)"OK", ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, 1000) != SIM_RES_MSG)	return 0;
 8004e0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004e0e:	9300      	str	r3, [sp, #0]
 8004e10:	2301      	movs	r3, #1
 8004e12:	2201      	movs	r2, #1
 8004e14:	492b      	ldr	r1, [pc, #172]	; (8004ec4 <configureMQTT+0x104>)
 8004e16:	4829      	ldr	r0, [pc, #164]	; (8004ebc <configureMQTT+0xfc>)
 8004e18:	f7fd fc52 	bl	80026c0 <SIM_sendCMD>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	d001      	beq.n	8004e26 <configureMQTT+0x66>
 8004e22:	2300      	movs	r3, #0
 8004e24:	e042      	b.n	8004eac <configureMQTT+0xec>

	uint8_t wmsglen = strlen((char*)mySIM.mqttServer.willmsg);
 8004e26:	4b23      	ldr	r3, [pc, #140]	; (8004eb4 <configureMQTT+0xf4>)
 8004e28:	695b      	ldr	r3, [r3, #20]
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f7fb f98e 	bl	800014c <strlen>
 8004e30:	4603      	mov	r3, r0
 8004e32:	71bb      	strb	r3, [r7, #6]
	sprintf((char*)MQTT_Txbuff,"AT+CMQTTWILLMSG=0,%d,1",wmsglen);
 8004e34:	79bb      	ldrb	r3, [r7, #6]
 8004e36:	461a      	mov	r2, r3
 8004e38:	4923      	ldr	r1, [pc, #140]	; (8004ec8 <configureMQTT+0x108>)
 8004e3a:	4820      	ldr	r0, [pc, #128]	; (8004ebc <configureMQTT+0xfc>)
 8004e3c:	f007 fdb6 	bl	800c9ac <siprintf>
	if (SIM_sendCMD(MQTT_Txbuff, (uint8_t*)'>', ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, 2000)!= SIM_RES_MSG)	return 0;
 8004e40:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8004e44:	9300      	str	r3, [sp, #0]
 8004e46:	2301      	movs	r3, #1
 8004e48:	2201      	movs	r2, #1
 8004e4a:	213e      	movs	r1, #62	; 0x3e
 8004e4c:	481b      	ldr	r0, [pc, #108]	; (8004ebc <configureMQTT+0xfc>)
 8004e4e:	f7fd fc37 	bl	80026c0 <SIM_sendCMD>
 8004e52:	4603      	mov	r3, r0
 8004e54:	2b01      	cmp	r3, #1
 8004e56:	d001      	beq.n	8004e5c <configureMQTT+0x9c>
 8004e58:	2300      	movs	r3, #0
 8004e5a:	e027      	b.n	8004eac <configureMQTT+0xec>

	sprintf((char*)MQTT_Txbuff,"%s",mySIM.mqttServer.willmsg);
 8004e5c:	4b15      	ldr	r3, [pc, #84]	; (8004eb4 <configureMQTT+0xf4>)
 8004e5e:	695b      	ldr	r3, [r3, #20]
 8004e60:	461a      	mov	r2, r3
 8004e62:	4917      	ldr	r1, [pc, #92]	; (8004ec0 <configureMQTT+0x100>)
 8004e64:	4815      	ldr	r0, [pc, #84]	; (8004ebc <configureMQTT+0xfc>)
 8004e66:	f007 fda1 	bl	800c9ac <siprintf>
	if (SIM_sendCMD(MQTT_Txbuff, (uint8_t*)"OK", ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, 2000)!= SIM_RES_MSG)	return 0;
 8004e6a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8004e6e:	9300      	str	r3, [sp, #0]
 8004e70:	2301      	movs	r3, #1
 8004e72:	2201      	movs	r2, #1
 8004e74:	4913      	ldr	r1, [pc, #76]	; (8004ec4 <configureMQTT+0x104>)
 8004e76:	4811      	ldr	r0, [pc, #68]	; (8004ebc <configureMQTT+0xfc>)
 8004e78:	f7fd fc22 	bl	80026c0 <SIM_sendCMD>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	2b01      	cmp	r3, #1
 8004e80:	d001      	beq.n	8004e86 <configureMQTT+0xc6>
 8004e82:	2300      	movs	r3, #0
 8004e84:	e012      	b.n	8004eac <configureMQTT+0xec>

	sprintf((char*)MQTT_Txbuff,"AT+CMQTTCFG=\"checkUTF8\",0,0");
 8004e86:	4911      	ldr	r1, [pc, #68]	; (8004ecc <configureMQTT+0x10c>)
 8004e88:	480c      	ldr	r0, [pc, #48]	; (8004ebc <configureMQTT+0xfc>)
 8004e8a:	f007 fd8f 	bl	800c9ac <siprintf>
	if (! SIM_sendCMD(MQTT_Txbuff, (uint8_t*)"OK", ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, 1000))	return 0;
 8004e8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004e92:	9300      	str	r3, [sp, #0]
 8004e94:	2301      	movs	r3, #1
 8004e96:	2201      	movs	r2, #1
 8004e98:	490a      	ldr	r1, [pc, #40]	; (8004ec4 <configureMQTT+0x104>)
 8004e9a:	4808      	ldr	r0, [pc, #32]	; (8004ebc <configureMQTT+0xfc>)
 8004e9c:	f7fd fc10 	bl	80026c0 <SIM_sendCMD>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d101      	bne.n	8004eaa <configureMQTT+0xea>
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	e000      	b.n	8004eac <configureMQTT+0xec>

//	Serial_log_string("config MQTT success\r\n");
    return 1;
 8004eaa:	2301      	movs	r3, #1
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	3708      	adds	r7, #8
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd80      	pop	{r7, pc}
 8004eb4:	20001774 	.word	0x20001774
 8004eb8:	0800f1cc 	.word	0x0800f1cc
 8004ebc:	200014e8 	.word	0x200014e8
 8004ec0:	0800f1e4 	.word	0x0800f1e4
 8004ec4:	0800f1b8 	.word	0x0800f1b8
 8004ec8:	0800f1e8 	.word	0x0800f1e8
 8004ecc:	0800f200 	.word	0x0800f200

08004ed0 <sendConnectMessage>:

uint8_t sendConnectMessage() {
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b082      	sub	sp, #8
 8004ed4:	af02      	add	r7, sp, #8
    // Implement sending the CONNECT message
    // Return 1 on success, 0 on failure
	sprintf((char*)MQTT_Txbuff,"AT+CMQTTCONNECT=0,\"%s:%d\",%d,1",mySIM.mqttServer.host,mySIM.mqttServer.port,mySIM.mqttClient.keepAliveInterval);
 8004ed6:	4b0f      	ldr	r3, [pc, #60]	; (8004f14 <sendConnectMessage+0x44>)
 8004ed8:	68da      	ldr	r2, [r3, #12]
 8004eda:	4b0e      	ldr	r3, [pc, #56]	; (8004f14 <sendConnectMessage+0x44>)
 8004edc:	8b1b      	ldrh	r3, [r3, #24]
 8004ede:	4619      	mov	r1, r3
 8004ee0:	4b0c      	ldr	r3, [pc, #48]	; (8004f14 <sendConnectMessage+0x44>)
 8004ee2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ee4:	9300      	str	r3, [sp, #0]
 8004ee6:	460b      	mov	r3, r1
 8004ee8:	490b      	ldr	r1, [pc, #44]	; (8004f18 <sendConnectMessage+0x48>)
 8004eea:	480c      	ldr	r0, [pc, #48]	; (8004f1c <sendConnectMessage+0x4c>)
 8004eec:	f007 fd5e 	bl	800c9ac <siprintf>
	if (SIM_sendCMD(MQTT_Txbuff, (uint8_t*)"+CMQTTCONNECT: 0,0", ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, 2000) == SIM_RES_MSG)
 8004ef0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8004ef4:	9300      	str	r3, [sp, #0]
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	2201      	movs	r2, #1
 8004efa:	4909      	ldr	r1, [pc, #36]	; (8004f20 <sendConnectMessage+0x50>)
 8004efc:	4807      	ldr	r0, [pc, #28]	; (8004f1c <sendConnectMessage+0x4c>)
 8004efe:	f7fd fbdf 	bl	80026c0 <SIM_sendCMD>
 8004f02:	4603      	mov	r3, r0
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	d101      	bne.n	8004f0c <sendConnectMessage+0x3c>
	{
//		Serial_log_string("Connect to broker success\r\n");
		return 1;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	e000      	b.n	8004f0e <sendConnectMessage+0x3e>
	}
//	Serial_log_string("Connect to broker fail\r\n");
    return 0;
 8004f0c:	2300      	movs	r3, #0
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}
 8004f14:	20001774 	.word	0x20001774
 8004f18:	0800f21c 	.word	0x0800f21c
 8004f1c:	200014e8 	.word	0x200014e8
 8004f20:	0800f23c 	.word	0x0800f23c

08004f24 <MQTT_checkNWavailable>:


uint8_t MQTT_checkNWavailable (void)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b082      	sub	sp, #8
 8004f28:	af02      	add	r7, sp, #8
	if ( !SIM_checkCMD(SIM_CMD_SIMCARD_PIN) ) {
 8004f2a:	2000      	movs	r0, #0
 8004f2c:	f7fd fc06 	bl	800273c <SIM_checkCMD>
 8004f30:	4603      	mov	r3, r0
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d11d      	bne.n	8004f72 <MQTT_checkNWavailable+0x4e>
		static uint32_t tick = 0;
		if (HAL_GetTick() - tick > 20000) {
 8004f36:	f002 fec7 	bl	8007cc8 <HAL_GetTick>
 8004f3a:	4602      	mov	r2, r0
 8004f3c:	4b1b      	ldr	r3, [pc, #108]	; (8004fac <MQTT_checkNWavailable+0x88>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	1ad3      	subs	r3, r2, r3
 8004f42:	f644 6220 	movw	r2, #20000	; 0x4e20
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d911      	bls.n	8004f6e <MQTT_checkNWavailable+0x4a>
			tick = HAL_GetTick();
 8004f4a:	f002 febd 	bl	8007cc8 <HAL_GetTick>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	4a16      	ldr	r2, [pc, #88]	; (8004fac <MQTT_checkNWavailable+0x88>)
 8004f52:	6013      	str	r3, [r2, #0]
			SIM_sendCMD( (uint8_t*)"AT+CRESET", (uint8_t*)"OK", ENABLE_SIM_CHECKRES,
 8004f54:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8004f58:	9300      	str	r3, [sp, #0]
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	2201      	movs	r2, #1
 8004f5e:	4914      	ldr	r1, [pc, #80]	; (8004fb0 <MQTT_checkNWavailable+0x8c>)
 8004f60:	4814      	ldr	r0, [pc, #80]	; (8004fb4 <MQTT_checkNWavailable+0x90>)
 8004f62:	f7fd fbad 	bl	80026c0 <SIM_sendCMD>
						ENABLE_MARKASREAD, SIM_TIMEOUT_LONG);
//			Serial_log_string("Reset Module\r\n");
			HAL_Delay(1000);
 8004f66:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004f6a:	f002 feb7 	bl	8007cdc <HAL_Delay>
		}
		return 1;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	e018      	b.n	8004fa4 <MQTT_checkNWavailable+0x80>
	}

	if ( !SIM_checkCMD(SIM_CMD_STA_CSQ) ) {
 8004f72:	2001      	movs	r0, #1
 8004f74:	f7fd fbe2 	bl	800273c <SIM_checkCMD>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d101      	bne.n	8004f82 <MQTT_checkNWavailable+0x5e>
		return 2;
 8004f7e:	2302      	movs	r3, #2
 8004f80:	e010      	b.n	8004fa4 <MQTT_checkNWavailable+0x80>
	}

	if ( !SIM_checkCMD(SIM_CMD_NW_CREG) ) {
 8004f82:	2002      	movs	r0, #2
 8004f84:	f7fd fbda 	bl	800273c <SIM_checkCMD>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d101      	bne.n	8004f92 <MQTT_checkNWavailable+0x6e>
		return 3;
 8004f8e:	2303      	movs	r3, #3
 8004f90:	e008      	b.n	8004fa4 <MQTT_checkNWavailable+0x80>
	}

	if ( !SIM_checkCMD(SIM_CMD_NW_CPSI) ) {
 8004f92:	2003      	movs	r0, #3
 8004f94:	f7fd fbd2 	bl	800273c <SIM_checkCMD>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d101      	bne.n	8004fa2 <MQTT_checkNWavailable+0x7e>
		return 4;
 8004f9e:	2304      	movs	r3, #4
 8004fa0:	e000      	b.n	8004fa4 <MQTT_checkNWavailable+0x80>
	}
	return 0;
 8004fa2:	2300      	movs	r3, #0
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}
 8004faa:	bf00      	nop
 8004fac:	200016e8 	.word	0x200016e8
 8004fb0:	0800f1b8 	.word	0x0800f1b8
 8004fb4:	0800f250 	.word	0x0800f250

08004fb8 <MQTT_connect>:
uint8_t MQTT_connect()
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	af00      	add	r7, sp, #0

	if ( MQTT_checkNWavailable() )  return 0;
 8004fbc:	f7ff ffb2 	bl	8004f24 <MQTT_checkNWavailable>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d001      	beq.n	8004fca <MQTT_connect+0x12>
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	e02f      	b.n	800502a <MQTT_connect+0x72>

	if ( !startMQTT() )		return 0;
 8004fca:	f7ff fe8f 	bl	8004cec <startMQTT>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d101      	bne.n	8004fd8 <MQTT_connect+0x20>
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	e028      	b.n	800502a <MQTT_connect+0x72>

	if ( !acquireMQTTclient( (uint8_t*)mySIM.mqttClient.clientID) )
 8004fd8:	4b15      	ldr	r3, [pc, #84]	; (8005030 <MQTT_connect+0x78>)
 8004fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fdc:	4618      	mov	r0, r3
 8004fde:	f7ff feb3 	bl	8004d48 <acquireMQTTclient>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d10b      	bne.n	8005000 <MQTT_connect+0x48>
	{
		if (MQTT_connected())
 8004fe8:	f7ff fe5e 	bl	8004ca8 <MQTT_connected>
 8004fec:	4603      	mov	r3, r0
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d002      	beq.n	8004ff8 <MQTT_connect+0x40>
		{
			MQTT_disconnect();
 8004ff2:	f000 f81f 	bl	8005034 <MQTT_disconnect>
 8004ff6:	e001      	b.n	8004ffc <MQTT_connect+0x44>
		}
		else
		{
			releaseMQTTclient();
 8004ff8:	f7ff fec8 	bl	8004d8c <releaseMQTTclient>
		}
		return 0;
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	e014      	b.n	800502a <MQTT_connect+0x72>
	}
	if ( !(configureMQTT()) )		return 0;
 8005000:	f7ff fede 	bl	8004dc0 <configureMQTT>
 8005004:	4603      	mov	r3, r0
 8005006:	2b00      	cmp	r3, #0
 8005008:	d101      	bne.n	800500e <MQTT_connect+0x56>
 800500a:	2300      	movs	r3, #0
 800500c:	e00d      	b.n	800502a <MQTT_connect+0x72>

	if ( !sendConnectMessage() )	{
 800500e:	f7ff ff5f 	bl	8004ed0 <sendConnectMessage>
 8005012:	4603      	mov	r3, r0
 8005014:	2b00      	cmp	r3, #0
 8005016:	d104      	bne.n	8005022 <MQTT_connect+0x6a>
		HAL_Delay(200);
 8005018:	20c8      	movs	r0, #200	; 0xc8
 800501a:	f002 fe5f 	bl	8007cdc <HAL_Delay>
		return 0;
 800501e:	2300      	movs	r3, #0
 8005020:	e003      	b.n	800502a <MQTT_connect+0x72>
	}

	mySIM.mqttServer.connect = 1;
 8005022:	4b03      	ldr	r3, [pc, #12]	; (8005030 <MQTT_connect+0x78>)
 8005024:	2201      	movs	r2, #1
 8005026:	769a      	strb	r2, [r3, #26]
	return 1;
 8005028:	2301      	movs	r3, #1

}
 800502a:	4618      	mov	r0, r3
 800502c:	bd80      	pop	{r7, pc}
 800502e:	bf00      	nop
 8005030:	20001774 	.word	0x20001774

08005034 <MQTT_disconnect>:

uint8_t MQTT_disconnect ()
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b082      	sub	sp, #8
 8005038:	af02      	add	r7, sp, #8
	if (SIM_sendCMD((uint8_t*)"AT+CMQTTDISC=0,120", (uint8_t*)"+CMQTTDISC: 0,0",
 800503a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800503e:	9300      	str	r3, [sp, #0]
 8005040:	2301      	movs	r3, #1
 8005042:	2201      	movs	r2, #1
 8005044:	4912      	ldr	r1, [pc, #72]	; (8005090 <MQTT_disconnect+0x5c>)
 8005046:	4813      	ldr	r0, [pc, #76]	; (8005094 <MQTT_disconnect+0x60>)
 8005048:	f7fd fb3a 	bl	80026c0 <SIM_sendCMD>
 800504c:	4603      	mov	r3, r0
 800504e:	2b01      	cmp	r3, #1
 8005050:	d001      	beq.n	8005056 <MQTT_disconnect+0x22>
			ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, 2000) != SIM_RES_MSG )		return 0;
 8005052:	2300      	movs	r3, #0
 8005054:	e018      	b.n	8005088 <MQTT_disconnect+0x54>

	if ( !releaseMQTTclient() )		return 0;
 8005056:	f7ff fe99 	bl	8004d8c <releaseMQTTclient>
 800505a:	4603      	mov	r3, r0
 800505c:	2b00      	cmp	r3, #0
 800505e:	d101      	bne.n	8005064 <MQTT_disconnect+0x30>
 8005060:	2300      	movs	r3, #0
 8005062:	e011      	b.n	8005088 <MQTT_disconnect+0x54>

	if (SIM_sendCMD((uint8_t*)"AT+CMQTTSTOP", (uint8_t*)"+CMQTTSTOP: 0",
 8005064:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8005068:	9300      	str	r3, [sp, #0]
 800506a:	2301      	movs	r3, #1
 800506c:	2201      	movs	r2, #1
 800506e:	490a      	ldr	r1, [pc, #40]	; (8005098 <MQTT_disconnect+0x64>)
 8005070:	480a      	ldr	r0, [pc, #40]	; (800509c <MQTT_disconnect+0x68>)
 8005072:	f7fd fb25 	bl	80026c0 <SIM_sendCMD>
 8005076:	4603      	mov	r3, r0
 8005078:	2b01      	cmp	r3, #1
 800507a:	d001      	beq.n	8005080 <MQTT_disconnect+0x4c>
			ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, 2000) != SIM_RES_MSG )		return 0;
 800507c:	2300      	movs	r3, #0
 800507e:	e003      	b.n	8005088 <MQTT_disconnect+0x54>

	mySIM.mqttServer.connect = 0;
 8005080:	4b07      	ldr	r3, [pc, #28]	; (80050a0 <MQTT_disconnect+0x6c>)
 8005082:	2200      	movs	r2, #0
 8005084:	769a      	strb	r2, [r3, #26]
	return 1;
 8005086:	2301      	movs	r3, #1
}
 8005088:	4618      	mov	r0, r3
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}
 800508e:	bf00      	nop
 8005090:	0800f15c 	.word	0x0800f15c
 8005094:	0800f25c 	.word	0x0800f25c
 8005098:	0800f270 	.word	0x0800f270
 800509c:	0800f280 	.word	0x0800f280
 80050a0:	20001774 	.word	0x20001774

080050a4 <MQTT_publish>:
uint8_t MQTT_publish(uint8_t *topic, uint8_t *msg, uint16_t msglen)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b088      	sub	sp, #32
 80050a8:	af02      	add	r7, sp, #8
 80050aa:	60f8      	str	r0, [r7, #12]
 80050ac:	60b9      	str	r1, [r7, #8]
 80050ae:	4613      	mov	r3, r2
 80050b0:	80fb      	strh	r3, [r7, #6]
	uint8_t check =0;
 80050b2:	2300      	movs	r3, #0
 80050b4:	75fb      	strb	r3, [r7, #23]
	uint8_t topiclen= (uint8_t) strlen((char*)topic);
 80050b6:	68f8      	ldr	r0, [r7, #12]
 80050b8:	f7fb f848 	bl	800014c <strlen>
 80050bc:	4603      	mov	r3, r0
 80050be:	75bb      	strb	r3, [r7, #22]
	sprintf((char*)MQTT_Txbuff,"AT+CMQTTTOPIC=0,%d", topiclen);
 80050c0:	7dbb      	ldrb	r3, [r7, #22]
 80050c2:	461a      	mov	r2, r3
 80050c4:	492d      	ldr	r1, [pc, #180]	; (800517c <MQTT_publish+0xd8>)
 80050c6:	482e      	ldr	r0, [pc, #184]	; (8005180 <MQTT_publish+0xdc>)
 80050c8:	f007 fc70 	bl	800c9ac <siprintf>

	if (SIM_sendCMD(MQTT_Txbuff, (uint8_t*)'>', ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, 2000)!= SIM_RES_MSG)	return 0;
 80050cc:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80050d0:	9300      	str	r3, [sp, #0]
 80050d2:	2301      	movs	r3, #1
 80050d4:	2201      	movs	r2, #1
 80050d6:	213e      	movs	r1, #62	; 0x3e
 80050d8:	4829      	ldr	r0, [pc, #164]	; (8005180 <MQTT_publish+0xdc>)
 80050da:	f7fd faf1 	bl	80026c0 <SIM_sendCMD>
 80050de:	4603      	mov	r3, r0
 80050e0:	2b01      	cmp	r3, #1
 80050e2:	d001      	beq.n	80050e8 <MQTT_publish+0x44>
 80050e4:	2300      	movs	r3, #0
 80050e6:	e045      	b.n	8005174 <MQTT_publish+0xd0>

	if (SIM_sendCMD(topic, (uint8_t*)"OK", ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, 2000)!= SIM_RES_MSG)		return 0;
 80050e8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80050ec:	9300      	str	r3, [sp, #0]
 80050ee:	2301      	movs	r3, #1
 80050f0:	2201      	movs	r2, #1
 80050f2:	4924      	ldr	r1, [pc, #144]	; (8005184 <MQTT_publish+0xe0>)
 80050f4:	68f8      	ldr	r0, [r7, #12]
 80050f6:	f7fd fae3 	bl	80026c0 <SIM_sendCMD>
 80050fa:	4603      	mov	r3, r0
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	d001      	beq.n	8005104 <MQTT_publish+0x60>
 8005100:	2300      	movs	r3, #0
 8005102:	e037      	b.n	8005174 <MQTT_publish+0xd0>

	sprintf((char*)MQTT_Txbuff,"AT+CMQTTPAYLOAD=0,%d",msglen);
 8005104:	88fb      	ldrh	r3, [r7, #6]
 8005106:	461a      	mov	r2, r3
 8005108:	491f      	ldr	r1, [pc, #124]	; (8005188 <MQTT_publish+0xe4>)
 800510a:	481d      	ldr	r0, [pc, #116]	; (8005180 <MQTT_publish+0xdc>)
 800510c:	f007 fc4e 	bl	800c9ac <siprintf>

	if (SIM_sendCMD(MQTT_Txbuff, (uint8_t*)'>', ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, 2000)!= SIM_RES_MSG)	return 0;
 8005110:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8005114:	9300      	str	r3, [sp, #0]
 8005116:	2301      	movs	r3, #1
 8005118:	2201      	movs	r2, #1
 800511a:	213e      	movs	r1, #62	; 0x3e
 800511c:	4818      	ldr	r0, [pc, #96]	; (8005180 <MQTT_publish+0xdc>)
 800511e:	f7fd facf 	bl	80026c0 <SIM_sendCMD>
 8005122:	4603      	mov	r3, r0
 8005124:	2b01      	cmp	r3, #1
 8005126:	d001      	beq.n	800512c <MQTT_publish+0x88>
 8005128:	2300      	movs	r3, #0
 800512a:	e023      	b.n	8005174 <MQTT_publish+0xd0>

	HAL_UART_Transmit(&huart1, msg, msglen, 0xFFFF);
 800512c:	88fa      	ldrh	r2, [r7, #6]
 800512e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005132:	68b9      	ldr	r1, [r7, #8]
 8005134:	4815      	ldr	r0, [pc, #84]	; (800518c <MQTT_publish+0xe8>)
 8005136:	f005 ff3d 	bl	800afb4 <HAL_UART_Transmit>
	check = SIM_checkMsg((uint8_t*)"OK", 2000);
 800513a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800513e:	4811      	ldr	r0, [pc, #68]	; (8005184 <MQTT_publish+0xe0>)
 8005140:	f7fd fa04 	bl	800254c <SIM_checkMsg>
 8005144:	4603      	mov	r3, r0
 8005146:	75fb      	strb	r3, [r7, #23]
	MarkAsReadData_SIM();
 8005148:	f7fd fb6a 	bl	8002820 <MarkAsReadData_SIM>
	if (check != SIM_RES_MSG)	return 0;
 800514c:	7dfb      	ldrb	r3, [r7, #23]
 800514e:	2b01      	cmp	r3, #1
 8005150:	d001      	beq.n	8005156 <MQTT_publish+0xb2>
 8005152:	2300      	movs	r3, #0
 8005154:	e00e      	b.n	8005174 <MQTT_publish+0xd0>

	if (SIM_sendCMD((uint8_t*)"AT+CMQTTPUB=0,1,60", (uint8_t*)"+CMQTTPUB: 0,0",
 8005156:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800515a:	9300      	str	r3, [sp, #0]
 800515c:	2301      	movs	r3, #1
 800515e:	2201      	movs	r2, #1
 8005160:	490b      	ldr	r1, [pc, #44]	; (8005190 <MQTT_publish+0xec>)
 8005162:	480c      	ldr	r0, [pc, #48]	; (8005194 <MQTT_publish+0xf0>)
 8005164:	f7fd faac 	bl	80026c0 <SIM_sendCMD>
 8005168:	4603      	mov	r3, r0
 800516a:	2b01      	cmp	r3, #1
 800516c:	d001      	beq.n	8005172 <MQTT_publish+0xce>
			ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, 2000)!= SIM_RES_MSG)	return 0;
 800516e:	2300      	movs	r3, #0
 8005170:	e000      	b.n	8005174 <MQTT_publish+0xd0>

	return 1;
 8005172:	2301      	movs	r3, #1
}
 8005174:	4618      	mov	r0, r3
 8005176:	3718      	adds	r7, #24
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}
 800517c:	0800f290 	.word	0x0800f290
 8005180:	200014e8 	.word	0x200014e8
 8005184:	0800f1b8 	.word	0x0800f1b8
 8005188:	0800f2a4 	.word	0x0800f2a4
 800518c:	20002a68 	.word	0x20002a68
 8005190:	0800f2bc 	.word	0x0800f2bc
 8005194:	0800f2cc 	.word	0x0800f2cc

08005198 <MQTT_subcribe>:
uint8_t MQTT_subcribe (uint8_t *topic)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b086      	sub	sp, #24
 800519c:	af02      	add	r7, sp, #8
 800519e:	6078      	str	r0, [r7, #4]
	uint8_t topiclen = strlen ((char*)topic);
 80051a0:	6878      	ldr	r0, [r7, #4]
 80051a2:	f7fa ffd3 	bl	800014c <strlen>
 80051a6:	4603      	mov	r3, r0
 80051a8:	73fb      	strb	r3, [r7, #15]

	sprintf((char*)MQTT_Txbuff,"AT+CMQTTSUBTOPIC=0,%d,1",topiclen);
 80051aa:	7bfb      	ldrb	r3, [r7, #15]
 80051ac:	461a      	mov	r2, r3
 80051ae:	4919      	ldr	r1, [pc, #100]	; (8005214 <MQTT_subcribe+0x7c>)
 80051b0:	4819      	ldr	r0, [pc, #100]	; (8005218 <MQTT_subcribe+0x80>)
 80051b2:	f007 fbfb 	bl	800c9ac <siprintf>
	if (SIM_sendCMD(MQTT_Txbuff, (uint8_t*)'>', ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, 2000)!= SIM_RES_MSG)	return 0;
 80051b6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80051ba:	9300      	str	r3, [sp, #0]
 80051bc:	2301      	movs	r3, #1
 80051be:	2201      	movs	r2, #1
 80051c0:	213e      	movs	r1, #62	; 0x3e
 80051c2:	4815      	ldr	r0, [pc, #84]	; (8005218 <MQTT_subcribe+0x80>)
 80051c4:	f7fd fa7c 	bl	80026c0 <SIM_sendCMD>
 80051c8:	4603      	mov	r3, r0
 80051ca:	2b01      	cmp	r3, #1
 80051cc:	d001      	beq.n	80051d2 <MQTT_subcribe+0x3a>
 80051ce:	2300      	movs	r3, #0
 80051d0:	e01c      	b.n	800520c <MQTT_subcribe+0x74>

	if (SIM_sendCMD(topic, (uint8_t*)"OK", ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, 2000)!= SIM_RES_MSG)		return 0;
 80051d2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80051d6:	9300      	str	r3, [sp, #0]
 80051d8:	2301      	movs	r3, #1
 80051da:	2201      	movs	r2, #1
 80051dc:	490f      	ldr	r1, [pc, #60]	; (800521c <MQTT_subcribe+0x84>)
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f7fd fa6e 	bl	80026c0 <SIM_sendCMD>
 80051e4:	4603      	mov	r3, r0
 80051e6:	2b01      	cmp	r3, #1
 80051e8:	d001      	beq.n	80051ee <MQTT_subcribe+0x56>
 80051ea:	2300      	movs	r3, #0
 80051ec:	e00e      	b.n	800520c <MQTT_subcribe+0x74>

	if (SIM_sendCMD((uint8_t*)"AT+CMQTTSUB=0", (uint8_t*)"+CMQTTSUB: 0,0", ENABLE_SIM_CHECKRES,ENABLE_MARKASREAD, 2000)!= SIM_RES_MSG) 	return 0;
 80051ee:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80051f2:	9300      	str	r3, [sp, #0]
 80051f4:	2301      	movs	r3, #1
 80051f6:	2201      	movs	r2, #1
 80051f8:	4909      	ldr	r1, [pc, #36]	; (8005220 <MQTT_subcribe+0x88>)
 80051fa:	480a      	ldr	r0, [pc, #40]	; (8005224 <MQTT_subcribe+0x8c>)
 80051fc:	f7fd fa60 	bl	80026c0 <SIM_sendCMD>
 8005200:	4603      	mov	r3, r0
 8005202:	2b01      	cmp	r3, #1
 8005204:	d001      	beq.n	800520a <MQTT_subcribe+0x72>
 8005206:	2300      	movs	r3, #0
 8005208:	e000      	b.n	800520c <MQTT_subcribe+0x74>

	return 1;
 800520a:	2301      	movs	r3, #1
}
 800520c:	4618      	mov	r0, r3
 800520e:	3710      	adds	r7, #16
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}
 8005214:	0800f2e0 	.word	0x0800f2e0
 8005218:	200014e8 	.word	0x200014e8
 800521c:	0800f1b8 	.word	0x0800f1b8
 8005220:	0800f2f8 	.word	0x0800f2f8
 8005224:	0800f308 	.word	0x0800f308

08005228 <isWordinBuff>:
#include "String_process.h"
#include <string.h>


uint8_t* isWordinBuff(uint8_t *databuff,uint16_t buff_size, uint8_t *word)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b086      	sub	sp, #24
 800522c:	af00      	add	r7, sp, #0
 800522e:	60f8      	str	r0, [r7, #12]
 8005230:	460b      	mov	r3, r1
 8005232:	607a      	str	r2, [r7, #4]
 8005234:	817b      	strh	r3, [r7, #10]
	uint8_t wordlen = strlen((char*)word);
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f7fa ff88 	bl	800014c <strlen>
 800523c:	4603      	mov	r3, r0
 800523e:	757b      	strb	r3, [r7, #21]
	for (uint16_t i = 0; i< buff_size - wordlen + 1; i++)
 8005240:	2300      	movs	r3, #0
 8005242:	82fb      	strh	r3, [r7, #22]
 8005244:	e011      	b.n	800526a <isWordinBuff+0x42>
	{
		if (!memcmp(databuff +i,word,wordlen))
 8005246:	8afb      	ldrh	r3, [r7, #22]
 8005248:	68fa      	ldr	r2, [r7, #12]
 800524a:	4413      	add	r3, r2
 800524c:	7d7a      	ldrb	r2, [r7, #21]
 800524e:	6879      	ldr	r1, [r7, #4]
 8005250:	4618      	mov	r0, r3
 8005252:	f006 ffe9 	bl	800c228 <memcmp>
 8005256:	4603      	mov	r3, r0
 8005258:	2b00      	cmp	r3, #0
 800525a:	d103      	bne.n	8005264 <isWordinBuff+0x3c>
		{
			return databuff+ i;
 800525c:	8afb      	ldrh	r3, [r7, #22]
 800525e:	68fa      	ldr	r2, [r7, #12]
 8005260:	4413      	add	r3, r2
 8005262:	e009      	b.n	8005278 <isWordinBuff+0x50>
	for (uint16_t i = 0; i< buff_size - wordlen + 1; i++)
 8005264:	8afb      	ldrh	r3, [r7, #22]
 8005266:	3301      	adds	r3, #1
 8005268:	82fb      	strh	r3, [r7, #22]
 800526a:	897a      	ldrh	r2, [r7, #10]
 800526c:	7d7b      	ldrb	r3, [r7, #21]
 800526e:	1ad2      	subs	r2, r2, r3
 8005270:	8afb      	ldrh	r3, [r7, #22]
 8005272:	429a      	cmp	r2, r3
 8005274:	dae7      	bge.n	8005246 <isWordinBuff+0x1e>
		}
	}
	return NULL;
 8005276:	2300      	movs	r3, #0
}
 8005278:	4618      	mov	r0, r3
 800527a:	3718      	adds	r7, #24
 800527c:	46bd      	mov	sp, r7
 800527e:	bd80      	pop	{r7, pc}

08005280 <getBetween>:

uint16_t getBetween(uint8_t *firstWord,uint8_t *lastWord, uint8_t *buff, uint16_t size, uint8_t *getBuff)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b088      	sub	sp, #32
 8005284:	af00      	add	r7, sp, #0
 8005286:	60f8      	str	r0, [r7, #12]
 8005288:	60b9      	str	r1, [r7, #8]
 800528a:	607a      	str	r2, [r7, #4]
 800528c:	807b      	strh	r3, [r7, #2]
	uint8_t fWlen = strlen((char*)firstWord);
 800528e:	68f8      	ldr	r0, [r7, #12]
 8005290:	f7fa ff5c 	bl	800014c <strlen>
 8005294:	4603      	mov	r3, r0
 8005296:	76bb      	strb	r3, [r7, #26]

	uint8_t *Fp =isWordinBuff(buff, size, firstWord);
 8005298:	887b      	ldrh	r3, [r7, #2]
 800529a:	68fa      	ldr	r2, [r7, #12]
 800529c:	4619      	mov	r1, r3
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	f7ff ffc2 	bl	8005228 <isWordinBuff>
 80052a4:	61f8      	str	r0, [r7, #28]

	if (Fp == NULL ) return 0;
 80052a6:	69fb      	ldr	r3, [r7, #28]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d101      	bne.n	80052b0 <getBetween+0x30>
 80052ac:	2300      	movs	r3, #0
 80052ae:	e036      	b.n	800531e <getBetween+0x9e>
	Fp += fWlen;
 80052b0:	7ebb      	ldrb	r3, [r7, #26]
 80052b2:	69fa      	ldr	r2, [r7, #28]
 80052b4:	4413      	add	r3, r2
 80052b6:	61fb      	str	r3, [r7, #28]
	uint8_t remainSize = getRemainsize(Fp, buff, size);
 80052b8:	887b      	ldrh	r3, [r7, #2]
 80052ba:	461a      	mov	r2, r3
 80052bc:	6879      	ldr	r1, [r7, #4]
 80052be:	69f8      	ldr	r0, [r7, #28]
 80052c0:	f000 f831 	bl	8005326 <getRemainsize>
 80052c4:	4603      	mov	r3, r0
 80052c6:	767b      	strb	r3, [r7, #25]
	uint8_t *Lp = isWordinBuff(Fp, remainSize, lastWord);
 80052c8:	7e7b      	ldrb	r3, [r7, #25]
 80052ca:	b29b      	uxth	r3, r3
 80052cc:	68ba      	ldr	r2, [r7, #8]
 80052ce:	4619      	mov	r1, r3
 80052d0:	69f8      	ldr	r0, [r7, #28]
 80052d2:	f7ff ffa9 	bl	8005228 <isWordinBuff>
 80052d6:	6178      	str	r0, [r7, #20]
	if (Lp == NULL || Fp >= Lp) return 0;
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d003      	beq.n	80052e6 <getBetween+0x66>
 80052de:	69fa      	ldr	r2, [r7, #28]
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	429a      	cmp	r2, r3
 80052e4:	d301      	bcc.n	80052ea <getBetween+0x6a>
 80052e6:	2300      	movs	r3, #0
 80052e8:	e019      	b.n	800531e <getBetween+0x9e>

	uint8_t getBuffindex =0;
 80052ea:	2300      	movs	r3, #0
 80052ec:	76fb      	strb	r3, [r7, #27]
	while (Fp != Lp)
 80052ee:	e00b      	b.n	8005308 <getBetween+0x88>
	{
		getBuff[getBuffindex++] = *Fp;
 80052f0:	7efb      	ldrb	r3, [r7, #27]
 80052f2:	1c5a      	adds	r2, r3, #1
 80052f4:	76fa      	strb	r2, [r7, #27]
 80052f6:	461a      	mov	r2, r3
 80052f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052fa:	4413      	add	r3, r2
 80052fc:	69fa      	ldr	r2, [r7, #28]
 80052fe:	7812      	ldrb	r2, [r2, #0]
 8005300:	701a      	strb	r2, [r3, #0]
		Fp ++;
 8005302:	69fb      	ldr	r3, [r7, #28]
 8005304:	3301      	adds	r3, #1
 8005306:	61fb      	str	r3, [r7, #28]
	while (Fp != Lp)
 8005308:	69fa      	ldr	r2, [r7, #28]
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	429a      	cmp	r2, r3
 800530e:	d1ef      	bne.n	80052f0 <getBetween+0x70>
	}
	getBuff[getBuffindex]= '\0';
 8005310:	7efb      	ldrb	r3, [r7, #27]
 8005312:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005314:	4413      	add	r3, r2
 8005316:	2200      	movs	r2, #0
 8005318:	701a      	strb	r2, [r3, #0]
	return getBuffindex;           // length of getBuff
 800531a:	7efb      	ldrb	r3, [r7, #27]
 800531c:	b29b      	uxth	r3, r3
}
 800531e:	4618      	mov	r0, r3
 8005320:	3720      	adds	r7, #32
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}

08005326 <getRemainsize>:

uint16_t getRemainsize(uint8_t *Remainbuff, uint8_t *Originbuff, uint16_t originSize)
{
 8005326:	b480      	push	{r7}
 8005328:	b085      	sub	sp, #20
 800532a:	af00      	add	r7, sp, #0
 800532c:	60f8      	str	r0, [r7, #12]
 800532e:	60b9      	str	r1, [r7, #8]
 8005330:	4613      	mov	r3, r2
 8005332:	80fb      	strh	r3, [r7, #6]
	return originSize-(Remainbuff - Originbuff)/sizeof(uint8_t);
 8005334:	68fa      	ldr	r2, [r7, #12]
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	1ad3      	subs	r3, r2, r3
 800533a:	b29b      	uxth	r3, r3
 800533c:	88fa      	ldrh	r2, [r7, #6]
 800533e:	1ad3      	subs	r3, r2, r3
 8005340:	b29b      	uxth	r3, r3
}
 8005342:	4618      	mov	r0, r3
 8005344:	3714      	adds	r7, #20
 8005346:	46bd      	mov	sp, r7
 8005348:	bc80      	pop	{r7}
 800534a:	4770      	bx	lr

0800534c <twobyte2buff>:
	}
	return count;
}

void twobyte2buff(uint8_t *buffer, uint16_t number)
{
 800534c:	b480      	push	{r7}
 800534e:	b083      	sub	sp, #12
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
 8005354:	460b      	mov	r3, r1
 8005356:	807b      	strh	r3, [r7, #2]
	buffer[0] = ( number >> 8 ) & 0xFF;
 8005358:	887b      	ldrh	r3, [r7, #2]
 800535a:	0a1b      	lsrs	r3, r3, #8
 800535c:	b29b      	uxth	r3, r3
 800535e:	b2da      	uxtb	r2, r3
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	701a      	strb	r2, [r3, #0]
	buffer[1] = number & 0xFF;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	3301      	adds	r3, #1
 8005368:	887a      	ldrh	r2, [r7, #2]
 800536a:	b2d2      	uxtb	r2, r2
 800536c:	701a      	strb	r2, [r3, #0]
}
 800536e:	bf00      	nop
 8005370:	370c      	adds	r7, #12
 8005372:	46bd      	mov	sp, r7
 8005374:	bc80      	pop	{r7}
 8005376:	4770      	bx	lr

08005378 <buff2twobyte>:
uint16_t buff2twobyte (uint8_t *buff)
{
 8005378:	b480      	push	{r7}
 800537a:	b085      	sub	sp, #20
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
	uint16_t value = 0;
 8005380:	2300      	movs	r3, #0
 8005382:	81fb      	strh	r3, [r7, #14]
	value = buff[0] << 8 | buff[1];
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	781b      	ldrb	r3, [r3, #0]
 8005388:	021b      	lsls	r3, r3, #8
 800538a:	b21a      	sxth	r2, r3
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	3301      	adds	r3, #1
 8005390:	781b      	ldrb	r3, [r3, #0]
 8005392:	b21b      	sxth	r3, r3
 8005394:	4313      	orrs	r3, r2
 8005396:	b21b      	sxth	r3, r3
 8005398:	81fb      	strh	r3, [r7, #14]
	return value;
 800539a:	89fb      	ldrh	r3, [r7, #14]
}
 800539c:	4618      	mov	r0, r3
 800539e:	3714      	adds	r7, #20
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bc80      	pop	{r7}
 80053a4:	4770      	bx	lr

080053a6 <FourbytenumbertoBuff>:

void FourbytenumbertoBuff(uint32_t inputNumber, uint8_t *Buff)
{
 80053a6:	b480      	push	{r7}
 80053a8:	b085      	sub	sp, #20
 80053aa:	af00      	add	r7, sp, #0
 80053ac:	6078      	str	r0, [r7, #4]
 80053ae:	6039      	str	r1, [r7, #0]
    uint32_t tmp =inputNumber;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	60fb      	str	r3, [r7, #12]
	for (uint8_t i=0 ;i< 4;i++)
 80053b4:	2300      	movs	r3, #0
 80053b6:	72fb      	strb	r3, [r7, #11]
 80053b8:	e00e      	b.n	80053d8 <FourbytenumbertoBuff+0x32>
	{
		Buff[3-i] = tmp & (0xFF);
 80053ba:	7afb      	ldrb	r3, [r7, #11]
 80053bc:	f1c3 0303 	rsb	r3, r3, #3
 80053c0:	461a      	mov	r2, r3
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	4413      	add	r3, r2
 80053c6:	68fa      	ldr	r2, [r7, #12]
 80053c8:	b2d2      	uxtb	r2, r2
 80053ca:	701a      	strb	r2, [r3, #0]
 		tmp = tmp >>8;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	0a1b      	lsrs	r3, r3, #8
 80053d0:	60fb      	str	r3, [r7, #12]
	for (uint8_t i=0 ;i< 4;i++)
 80053d2:	7afb      	ldrb	r3, [r7, #11]
 80053d4:	3301      	adds	r3, #1
 80053d6:	72fb      	strb	r3, [r7, #11]
 80053d8:	7afb      	ldrb	r3, [r7, #11]
 80053da:	2b03      	cmp	r3, #3
 80053dc:	d9ed      	bls.n	80053ba <FourbytenumbertoBuff+0x14>
	}
}
 80053de:	bf00      	nop
 80053e0:	bf00      	nop
 80053e2:	3714      	adds	r7, #20
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bc80      	pop	{r7}
 80053e8:	4770      	bx	lr

080053ea <buff2Fourbyte>:

uint32_t buff2Fourbyte(uint8_t *buff)
{
 80053ea:	b480      	push	{r7}
 80053ec:	b085      	sub	sp, #20
 80053ee:	af00      	add	r7, sp, #0
 80053f0:	6078      	str	r0, [r7, #4]
	uint32_t value = 0;
 80053f2:	2300      	movs	r3, #0
 80053f4:	60fb      	str	r3, [r7, #12]
	value = buff[0] << 24 | buff[1] << 16 | buff[2] << 8 | buff[3];
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	781b      	ldrb	r3, [r3, #0]
 80053fa:	061a      	lsls	r2, r3, #24
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	3301      	adds	r3, #1
 8005400:	781b      	ldrb	r3, [r3, #0]
 8005402:	041b      	lsls	r3, r3, #16
 8005404:	431a      	orrs	r2, r3
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	3302      	adds	r3, #2
 800540a:	781b      	ldrb	r3, [r3, #0]
 800540c:	021b      	lsls	r3, r3, #8
 800540e:	4313      	orrs	r3, r2
 8005410:	687a      	ldr	r2, [r7, #4]
 8005412:	3203      	adds	r2, #3
 8005414:	7812      	ldrb	r2, [r2, #0]
 8005416:	4313      	orrs	r3, r2
 8005418:	60fb      	str	r3, [r7, #12]
	return value;
 800541a:	68fb      	ldr	r3, [r7, #12]
}
 800541c:	4618      	mov	r0, r3
 800541e:	3714      	adds	r7, #20
 8005420:	46bd      	mov	sp, r7
 8005422:	bc80      	pop	{r7}
 8005424:	4770      	bx	lr
	...

08005428 <initTask>:


static Station_t *__MY_STATION;

void initTask(Station_t *station)
{
 8005428:	b480      	push	{r7}
 800542a:	b083      	sub	sp, #12
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
	__MY_STATION = station;
 8005430:	4a03      	ldr	r2, [pc, #12]	; (8005440 <initTask+0x18>)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6013      	str	r3, [r2, #0]
}
 8005436:	bf00      	nop
 8005438:	370c      	adds	r7, #12
 800543a:	46bd      	mov	sp, r7
 800543c:	bc80      	pop	{r7}
 800543e:	4770      	bx	lr
 8005440:	200016ec 	.word	0x200016ec

08005444 <checkTaskflag>:

bool checkTaskflag (Task_t task)
{
 8005444:	b480      	push	{r7}
 8005446:	b085      	sub	sp, #20
 8005448:	af00      	add	r7, sp, #0
 800544a:	4603      	mov	r3, r0
 800544c:	71fb      	strb	r3, [r7, #7]
	bool res = false;
 800544e:	2300      	movs	r3, #0
 8005450:	73fb      	strb	r3, [r7, #15]
	switch (task) {
 8005452:	79fb      	ldrb	r3, [r7, #7]
 8005454:	2b11      	cmp	r3, #17
 8005456:	f200 80ff 	bhi.w	8005658 <checkTaskflag+0x214>
 800545a:	a201      	add	r2, pc, #4	; (adr r2, 8005460 <checkTaskflag+0x1c>)
 800545c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005460:	080054a9 	.word	0x080054a9
 8005464:	080054c1 	.word	0x080054c1
 8005468:	08005509 	.word	0x08005509
 800546c:	08005521 	.word	0x08005521
 8005470:	080054d9 	.word	0x080054d9
 8005474:	08005641 	.word	0x08005641
 8005478:	080054f1 	.word	0x080054f1
 800547c:	08005539 	.word	0x08005539
 8005480:	08005551 	.word	0x08005551
 8005484:	08005581 	.word	0x08005581
 8005488:	08005569 	.word	0x08005569
 800548c:	08005599 	.word	0x08005599
 8005490:	080055b1 	.word	0x080055b1
 8005494:	080055c9 	.word	0x080055c9
 8005498:	080055e1 	.word	0x080055e1
 800549c:	080055f9 	.word	0x080055f9
 80054a0:	08005611 	.word	0x08005611
 80054a4:	08005629 	.word	0x08005629
	case TASK_REGISTER:
		res = (bool)__MY_STATION->task.register2server ;
 80054a8:	4b6f      	ldr	r3, [pc, #444]	; (8005668 <checkTaskflag+0x224>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	7c1b      	ldrb	r3, [r3, #16]
 80054ae:	f003 0301 	and.w	r3, r3, #1
 80054b2:	b2db      	uxtb	r3, r3
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	bf14      	ite	ne
 80054b8:	2301      	movne	r3, #1
 80054ba:	2300      	moveq	r3, #0
 80054bc:	73fb      	strb	r3, [r7, #15]
		break;
 80054be:	e0cc      	b.n	800565a <checkTaskflag+0x216>
	case TASK_SUBSCRIBE:
		res = (bool)__MY_STATION->task.subscribe;
 80054c0:	4b69      	ldr	r3, [pc, #420]	; (8005668 <checkTaskflag+0x224>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	7c1b      	ldrb	r3, [r3, #16]
 80054c6:	f003 0302 	and.w	r3, r3, #2
 80054ca:	b2db      	uxtb	r3, r3
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	bf14      	ite	ne
 80054d0:	2301      	movne	r3, #1
 80054d2:	2300      	moveq	r3, #0
 80054d4:	73fb      	strb	r3, [r7, #15]
		break;
 80054d6:	e0c0      	b.n	800565a <checkTaskflag+0x216>
	case TASK_SEND_MBA_STATUS:
		res = (bool)__MY_STATION->task.sendMBAstatus;
 80054d8:	4b63      	ldr	r3, [pc, #396]	; (8005668 <checkTaskflag+0x224>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	7c1b      	ldrb	r3, [r3, #16]
 80054de:	f003 0310 	and.w	r3, r3, #16
 80054e2:	b2db      	uxtb	r3, r3
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	bf14      	ite	ne
 80054e8:	2301      	movne	r3, #1
 80054ea:	2300      	moveq	r3, #0
 80054ec:	73fb      	strb	r3, [r7, #15]
		break;
 80054ee:	e0b4      	b.n	800565a <checkTaskflag+0x216>
	case TASK_CTRL_STEPMOR:
		res = (bool)__MY_STATION->task.CtrlStepmotor;
 80054f0:	4b5d      	ldr	r3, [pc, #372]	; (8005668 <checkTaskflag+0x224>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	7c1b      	ldrb	r3, [r3, #16]
 80054f6:	f003 0320 	and.w	r3, r3, #32
 80054fa:	b2db      	uxtb	r3, r3
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	bf14      	ite	ne
 8005500:	2301      	movne	r3, #1
 8005502:	2300      	moveq	r3, #0
 8005504:	73fb      	strb	r3, [r7, #15]
		break;
 8005506:	e0a8      	b.n	800565a <checkTaskflag+0x216>
	case TASK_PREPARE_CALIB:
		res = (bool)__MY_STATION->task.PrepareCalib;
 8005508:	4b57      	ldr	r3, [pc, #348]	; (8005668 <checkTaskflag+0x224>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	7c1b      	ldrb	r3, [r3, #16]
 800550e:	f003 0304 	and.w	r3, r3, #4
 8005512:	b2db      	uxtb	r3, r3
 8005514:	2b00      	cmp	r3, #0
 8005516:	bf14      	ite	ne
 8005518:	2301      	movne	r3, #1
 800551a:	2300      	moveq	r3, #0
 800551c:	73fb      	strb	r3, [r7, #15]
		break;
 800551e:	e09c      	b.n	800565a <checkTaskflag+0x216>
	case TASK_START_CALIB:
		res = (bool)__MY_STATION->task.StartCalib;
 8005520:	4b51      	ldr	r3, [pc, #324]	; (8005668 <checkTaskflag+0x224>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	7c1b      	ldrb	r3, [r3, #16]
 8005526:	f003 0308 	and.w	r3, r3, #8
 800552a:	b2db      	uxtb	r3, r3
 800552c:	2b00      	cmp	r3, #0
 800552e:	bf14      	ite	ne
 8005530:	2301      	movne	r3, #1
 8005532:	2300      	moveq	r3, #0
 8005534:	73fb      	strb	r3, [r7, #15]
		break;
 8005536:	e090      	b.n	800565a <checkTaskflag+0x216>
	case TASK_GET_GPS_TIME:
		res = (bool)__MY_STATION->task.getGPStimeflag;
 8005538:	4b4b      	ldr	r3, [pc, #300]	; (8005668 <checkTaskflag+0x224>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	7c1b      	ldrb	r3, [r3, #16]
 800553e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005542:	b2db      	uxtb	r3, r3
 8005544:	2b00      	cmp	r3, #0
 8005546:	bf14      	ite	ne
 8005548:	2301      	movne	r3, #1
 800554a:	2300      	moveq	r3, #0
 800554c:	73fb      	strb	r3, [r7, #15]
		break;
 800554e:	e084      	b.n	800565a <checkTaskflag+0x216>
	case TASK_SEND_NWREADY:
		res = (bool)__MY_STATION->task.sendNWready;
 8005550:	4b45      	ldr	r3, [pc, #276]	; (8005668 <checkTaskflag+0x224>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	7c5b      	ldrb	r3, [r3, #17]
 8005556:	f003 0301 	and.w	r3, r3, #1
 800555a:	b2db      	uxtb	r3, r3
 800555c:	2b00      	cmp	r3, #0
 800555e:	bf14      	ite	ne
 8005560:	2301      	movne	r3, #1
 8005562:	2300      	moveq	r3, #0
 8005564:	73fb      	strb	r3, [r7, #15]
		break;
 8005566:	e078      	b.n	800565a <checkTaskflag+0x216>
	case TASK_SEND_DATACALIB:
		res = (bool)__MY_STATION->task.sendDATACALIB;
 8005568:	4b3f      	ldr	r3, [pc, #252]	; (8005668 <checkTaskflag+0x224>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	7c5b      	ldrb	r3, [r3, #17]
 800556e:	f003 0302 	and.w	r3, r3, #2
 8005572:	b2db      	uxtb	r3, r3
 8005574:	2b00      	cmp	r3, #0
 8005576:	bf14      	ite	ne
 8005578:	2301      	movne	r3, #1
 800557a:	2300      	moveq	r3, #0
 800557c:	73fb      	strb	r3, [r7, #15]
		break;
 800557e:	e06c      	b.n	800565a <checkTaskflag+0x216>
	case TASK_SEND_DATAPERIOD:
		res = (bool)__MY_STATION->task.sendDataPeriod;
 8005580:	4b39      	ldr	r3, [pc, #228]	; (8005668 <checkTaskflag+0x224>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	7c1b      	ldrb	r3, [r3, #16]
 8005586:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800558a:	b2db      	uxtb	r3, r3
 800558c:	2b00      	cmp	r3, #0
 800558e:	bf14      	ite	ne
 8005590:	2301      	movne	r3, #1
 8005592:	2300      	moveq	r3, #0
 8005594:	73fb      	strb	r3, [r7, #15]
		break;
 8005596:	e060      	b.n	800565a <checkTaskflag+0x216>
	case TASK_SEND_DATAAFTERCALIB:
		res = (bool)__MY_STATION->task.sendDATAafterCALIB;
 8005598:	4b33      	ldr	r3, [pc, #204]	; (8005668 <checkTaskflag+0x224>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	7c5b      	ldrb	r3, [r3, #17]
 800559e:	f003 0304 	and.w	r3, r3, #4
 80055a2:	b2db      	uxtb	r3, r3
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	bf14      	ite	ne
 80055a8:	2301      	movne	r3, #1
 80055aa:	2300      	moveq	r3, #0
 80055ac:	73fb      	strb	r3, [r7, #15]
		break;
 80055ae:	e054      	b.n	800565a <checkTaskflag+0x216>
	case TASK_SEND_CTRLMBA:
		res = (bool)__MY_STATION->task.sendcmdCtrlMBA;
 80055b0:	4b2d      	ldr	r3, [pc, #180]	; (8005668 <checkTaskflag+0x224>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	7c5b      	ldrb	r3, [r3, #17]
 80055b6:	f003 0308 	and.w	r3, r3, #8
 80055ba:	b2db      	uxtb	r3, r3
 80055bc:	2b00      	cmp	r3, #0
 80055be:	bf14      	ite	ne
 80055c0:	2301      	movne	r3, #1
 80055c2:	2300      	moveq	r3, #0
 80055c4:	73fb      	strb	r3, [r7, #15]
		break;
 80055c6:	e048      	b.n	800565a <checkTaskflag+0x216>
	case TASK_SEND_CTRLSTEPMOR:
		res = (bool)__MY_STATION->task.sendcmdCtrlStepmotor;
 80055c8:	4b27      	ldr	r3, [pc, #156]	; (8005668 <checkTaskflag+0x224>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	7c5b      	ldrb	r3, [r3, #17]
 80055ce:	f003 0310 	and.w	r3, r3, #16
 80055d2:	b2db      	uxtb	r3, r3
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	bf14      	ite	ne
 80055d8:	2301      	movne	r3, #1
 80055da:	2300      	moveq	r3, #0
 80055dc:	73fb      	strb	r3, [r7, #15]
		break;
 80055de:	e03c      	b.n	800565a <checkTaskflag+0x216>
	case TASK_SEND_CALIB:
		res = (bool)__MY_STATION->task.sendcmdCalib;
 80055e0:	4b21      	ldr	r3, [pc, #132]	; (8005668 <checkTaskflag+0x224>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	7c5b      	ldrb	r3, [r3, #17]
 80055e6:	f003 0320 	and.w	r3, r3, #32
 80055ea:	b2db      	uxtb	r3, r3
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	bf14      	ite	ne
 80055f0:	2301      	movne	r3, #1
 80055f2:	2300      	moveq	r3, #0
 80055f4:	73fb      	strb	r3, [r7, #15]
		break;
 80055f6:	e030      	b.n	800565a <checkTaskflag+0x216>
	case TASK_SEND_GETSTATUS:
		res = (bool)__MY_STATION->task.sendcmdGetstatus;
 80055f8:	4b1b      	ldr	r3, [pc, #108]	; (8005668 <checkTaskflag+0x224>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	7c5b      	ldrb	r3, [r3, #17]
 80055fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005602:	b2db      	uxtb	r3, r3
 8005604:	2b00      	cmp	r3, #0
 8005606:	bf14      	ite	ne
 8005608:	2301      	movne	r3, #1
 800560a:	2300      	moveq	r3, #0
 800560c:	73fb      	strb	r3, [r7, #15]
		break;
 800560e:	e024      	b.n	800565a <checkTaskflag+0x216>
	case TASK_SEND_GETSTATION:
		res = (bool)__MY_STATION->task.sendcmdGetstation;
 8005610:	4b15      	ldr	r3, [pc, #84]	; (8005668 <checkTaskflag+0x224>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	7c5b      	ldrb	r3, [r3, #17]
 8005616:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800561a:	b2db      	uxtb	r3, r3
 800561c:	2b00      	cmp	r3, #0
 800561e:	bf14      	ite	ne
 8005620:	2301      	movne	r3, #1
 8005622:	2300      	moveq	r3, #0
 8005624:	73fb      	strb	r3, [r7, #15]
		break;
 8005626:	e018      	b.n	800565a <checkTaskflag+0x216>
	case TASK_SEND_GETSENSOR:
		res = (bool)__MY_STATION->task.sendcmdGetsensor;
 8005628:	4b0f      	ldr	r3, [pc, #60]	; (8005668 <checkTaskflag+0x224>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	7c9b      	ldrb	r3, [r3, #18]
 800562e:	f003 0301 	and.w	r3, r3, #1
 8005632:	b2db      	uxtb	r3, r3
 8005634:	2b00      	cmp	r3, #0
 8005636:	bf14      	ite	ne
 8005638:	2301      	movne	r3, #1
 800563a:	2300      	moveq	r3, #0
 800563c:	73fb      	strb	r3, [r7, #15]
		break;
 800563e:	e00c      	b.n	800565a <checkTaskflag+0x216>
	case TASK_SEND_STEP_LIMIT:
		res = (bool)__MY_STATION->task.sendSTEPLIMIT;
 8005640:	4b09      	ldr	r3, [pc, #36]	; (8005668 <checkTaskflag+0x224>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	7c9b      	ldrb	r3, [r3, #18]
 8005646:	f003 0302 	and.w	r3, r3, #2
 800564a:	b2db      	uxtb	r3, r3
 800564c:	2b00      	cmp	r3, #0
 800564e:	bf14      	ite	ne
 8005650:	2301      	movne	r3, #1
 8005652:	2300      	moveq	r3, #0
 8005654:	73fb      	strb	r3, [r7, #15]
		break;
 8005656:	e000      	b.n	800565a <checkTaskflag+0x216>
	default:
		break;
 8005658:	bf00      	nop
	}
	return res;
 800565a:	7bfb      	ldrb	r3, [r7, #15]
}
 800565c:	4618      	mov	r0, r3
 800565e:	3714      	adds	r7, #20
 8005660:	46bd      	mov	sp, r7
 8005662:	bc80      	pop	{r7}
 8005664:	4770      	bx	lr
 8005666:	bf00      	nop
 8005668:	200016ec 	.word	0x200016ec

0800566c <triggerTaskflag>:



void triggerTaskflag (Task_t task, Flag_t ENorDIS)
{
 800566c:	b480      	push	{r7}
 800566e:	b083      	sub	sp, #12
 8005670:	af00      	add	r7, sp, #0
 8005672:	4603      	mov	r3, r0
 8005674:	460a      	mov	r2, r1
 8005676:	71fb      	strb	r3, [r7, #7]
 8005678:	4613      	mov	r3, r2
 800567a:	71bb      	strb	r3, [r7, #6]
	switch (task) {
 800567c:	79fb      	ldrb	r3, [r7, #7]
 800567e:	2b11      	cmp	r3, #17
 8005680:	f200 80ed 	bhi.w	800585e <triggerTaskflag+0x1f2>
 8005684:	a201      	add	r2, pc, #4	; (adr r2, 800568c <triggerTaskflag+0x20>)
 8005686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800568a:	bf00      	nop
 800568c:	080056d5 	.word	0x080056d5
 8005690:	080056eb 	.word	0x080056eb
 8005694:	0800572d 	.word	0x0800572d
 8005698:	08005743 	.word	0x08005743
 800569c:	08005701 	.word	0x08005701
 80056a0:	0800584b 	.word	0x0800584b
 80056a4:	08005717 	.word	0x08005717
 80056a8:	08005759 	.word	0x08005759
 80056ac:	0800576f 	.word	0x0800576f
 80056b0:	0800579b 	.word	0x0800579b
 80056b4:	08005785 	.word	0x08005785
 80056b8:	080057b1 	.word	0x080057b1
 80056bc:	080057c7 	.word	0x080057c7
 80056c0:	080057dd 	.word	0x080057dd
 80056c4:	080057f3 	.word	0x080057f3
 80056c8:	08005809 	.word	0x08005809
 80056cc:	0800581f 	.word	0x0800581f
 80056d0:	08005835 	.word	0x08005835
	case TASK_REGISTER:
		__MY_STATION->task.register2server = ENorDIS;
 80056d4:	4b65      	ldr	r3, [pc, #404]	; (800586c <triggerTaskflag+0x200>)
 80056d6:	681a      	ldr	r2, [r3, #0]
 80056d8:	79bb      	ldrb	r3, [r7, #6]
 80056da:	f003 0301 	and.w	r3, r3, #1
 80056de:	b2d9      	uxtb	r1, r3
 80056e0:	7c13      	ldrb	r3, [r2, #16]
 80056e2:	f361 0300 	bfi	r3, r1, #0, #1
 80056e6:	7413      	strb	r3, [r2, #16]
		break;
 80056e8:	e0ba      	b.n	8005860 <triggerTaskflag+0x1f4>
	case TASK_SUBSCRIBE:
		__MY_STATION->task.subscribe = ENorDIS;
 80056ea:	4b60      	ldr	r3, [pc, #384]	; (800586c <triggerTaskflag+0x200>)
 80056ec:	681a      	ldr	r2, [r3, #0]
 80056ee:	79bb      	ldrb	r3, [r7, #6]
 80056f0:	f003 0301 	and.w	r3, r3, #1
 80056f4:	b2d9      	uxtb	r1, r3
 80056f6:	7c13      	ldrb	r3, [r2, #16]
 80056f8:	f361 0341 	bfi	r3, r1, #1, #1
 80056fc:	7413      	strb	r3, [r2, #16]
		break;
 80056fe:	e0af      	b.n	8005860 <triggerTaskflag+0x1f4>
	case TASK_SEND_MBA_STATUS:
		__MY_STATION->task.sendMBAstatus = ENorDIS;
 8005700:	4b5a      	ldr	r3, [pc, #360]	; (800586c <triggerTaskflag+0x200>)
 8005702:	681a      	ldr	r2, [r3, #0]
 8005704:	79bb      	ldrb	r3, [r7, #6]
 8005706:	f003 0301 	and.w	r3, r3, #1
 800570a:	b2d9      	uxtb	r1, r3
 800570c:	7c13      	ldrb	r3, [r2, #16]
 800570e:	f361 1304 	bfi	r3, r1, #4, #1
 8005712:	7413      	strb	r3, [r2, #16]
		break;
 8005714:	e0a4      	b.n	8005860 <triggerTaskflag+0x1f4>
	case TASK_CTRL_STEPMOR:
		__MY_STATION->task.CtrlStepmotor = ENorDIS;
 8005716:	4b55      	ldr	r3, [pc, #340]	; (800586c <triggerTaskflag+0x200>)
 8005718:	681a      	ldr	r2, [r3, #0]
 800571a:	79bb      	ldrb	r3, [r7, #6]
 800571c:	f003 0301 	and.w	r3, r3, #1
 8005720:	b2d9      	uxtb	r1, r3
 8005722:	7c13      	ldrb	r3, [r2, #16]
 8005724:	f361 1345 	bfi	r3, r1, #5, #1
 8005728:	7413      	strb	r3, [r2, #16]
		break;
 800572a:	e099      	b.n	8005860 <triggerTaskflag+0x1f4>
	case TASK_PREPARE_CALIB:
		__MY_STATION->task.PrepareCalib = ENorDIS;
 800572c:	4b4f      	ldr	r3, [pc, #316]	; (800586c <triggerTaskflag+0x200>)
 800572e:	681a      	ldr	r2, [r3, #0]
 8005730:	79bb      	ldrb	r3, [r7, #6]
 8005732:	f003 0301 	and.w	r3, r3, #1
 8005736:	b2d9      	uxtb	r1, r3
 8005738:	7c13      	ldrb	r3, [r2, #16]
 800573a:	f361 0382 	bfi	r3, r1, #2, #1
 800573e:	7413      	strb	r3, [r2, #16]
		break;
 8005740:	e08e      	b.n	8005860 <triggerTaskflag+0x1f4>
	case TASK_START_CALIB:
		__MY_STATION->task.StartCalib = ENorDIS;
 8005742:	4b4a      	ldr	r3, [pc, #296]	; (800586c <triggerTaskflag+0x200>)
 8005744:	681a      	ldr	r2, [r3, #0]
 8005746:	79bb      	ldrb	r3, [r7, #6]
 8005748:	f003 0301 	and.w	r3, r3, #1
 800574c:	b2d9      	uxtb	r1, r3
 800574e:	7c13      	ldrb	r3, [r2, #16]
 8005750:	f361 03c3 	bfi	r3, r1, #3, #1
 8005754:	7413      	strb	r3, [r2, #16]
		break;
 8005756:	e083      	b.n	8005860 <triggerTaskflag+0x1f4>
	case TASK_GET_GPS_TIME:
		__MY_STATION->task.getGPStimeflag = ENorDIS;
 8005758:	4b44      	ldr	r3, [pc, #272]	; (800586c <triggerTaskflag+0x200>)
 800575a:	681a      	ldr	r2, [r3, #0]
 800575c:	79bb      	ldrb	r3, [r7, #6]
 800575e:	f003 0301 	and.w	r3, r3, #1
 8005762:	b2d9      	uxtb	r1, r3
 8005764:	7c13      	ldrb	r3, [r2, #16]
 8005766:	f361 1386 	bfi	r3, r1, #6, #1
 800576a:	7413      	strb	r3, [r2, #16]
		break;
 800576c:	e078      	b.n	8005860 <triggerTaskflag+0x1f4>
	case TASK_SEND_NWREADY:
		__MY_STATION->task.sendNWready = ENorDIS;
 800576e:	4b3f      	ldr	r3, [pc, #252]	; (800586c <triggerTaskflag+0x200>)
 8005770:	681a      	ldr	r2, [r3, #0]
 8005772:	79bb      	ldrb	r3, [r7, #6]
 8005774:	f003 0301 	and.w	r3, r3, #1
 8005778:	b2d9      	uxtb	r1, r3
 800577a:	7c53      	ldrb	r3, [r2, #17]
 800577c:	f361 0300 	bfi	r3, r1, #0, #1
 8005780:	7453      	strb	r3, [r2, #17]
		break;
 8005782:	e06d      	b.n	8005860 <triggerTaskflag+0x1f4>
	case TASK_SEND_DATACALIB:
		__MY_STATION->task.sendDATACALIB = ENorDIS;
 8005784:	4b39      	ldr	r3, [pc, #228]	; (800586c <triggerTaskflag+0x200>)
 8005786:	681a      	ldr	r2, [r3, #0]
 8005788:	79bb      	ldrb	r3, [r7, #6]
 800578a:	f003 0301 	and.w	r3, r3, #1
 800578e:	b2d9      	uxtb	r1, r3
 8005790:	7c53      	ldrb	r3, [r2, #17]
 8005792:	f361 0341 	bfi	r3, r1, #1, #1
 8005796:	7453      	strb	r3, [r2, #17]
		break;
 8005798:	e062      	b.n	8005860 <triggerTaskflag+0x1f4>
	case TASK_SEND_DATAPERIOD:
		__MY_STATION->task.sendDataPeriod = ENorDIS;
 800579a:	4b34      	ldr	r3, [pc, #208]	; (800586c <triggerTaskflag+0x200>)
 800579c:	681a      	ldr	r2, [r3, #0]
 800579e:	79bb      	ldrb	r3, [r7, #6]
 80057a0:	f003 0301 	and.w	r3, r3, #1
 80057a4:	b2d9      	uxtb	r1, r3
 80057a6:	7c13      	ldrb	r3, [r2, #16]
 80057a8:	f361 13c7 	bfi	r3, r1, #7, #1
 80057ac:	7413      	strb	r3, [r2, #16]
		break;
 80057ae:	e057      	b.n	8005860 <triggerTaskflag+0x1f4>
	case TASK_SEND_DATAAFTERCALIB:
		__MY_STATION->task.sendDATAafterCALIB = ENorDIS;
 80057b0:	4b2e      	ldr	r3, [pc, #184]	; (800586c <triggerTaskflag+0x200>)
 80057b2:	681a      	ldr	r2, [r3, #0]
 80057b4:	79bb      	ldrb	r3, [r7, #6]
 80057b6:	f003 0301 	and.w	r3, r3, #1
 80057ba:	b2d9      	uxtb	r1, r3
 80057bc:	7c53      	ldrb	r3, [r2, #17]
 80057be:	f361 0382 	bfi	r3, r1, #2, #1
 80057c2:	7453      	strb	r3, [r2, #17]
		break;
 80057c4:	e04c      	b.n	8005860 <triggerTaskflag+0x1f4>
	case TASK_SEND_CTRLMBA:
		__MY_STATION->task.sendcmdCtrlMBA = ENorDIS;
 80057c6:	4b29      	ldr	r3, [pc, #164]	; (800586c <triggerTaskflag+0x200>)
 80057c8:	681a      	ldr	r2, [r3, #0]
 80057ca:	79bb      	ldrb	r3, [r7, #6]
 80057cc:	f003 0301 	and.w	r3, r3, #1
 80057d0:	b2d9      	uxtb	r1, r3
 80057d2:	7c53      	ldrb	r3, [r2, #17]
 80057d4:	f361 03c3 	bfi	r3, r1, #3, #1
 80057d8:	7453      	strb	r3, [r2, #17]
		break;
 80057da:	e041      	b.n	8005860 <triggerTaskflag+0x1f4>
	case TASK_SEND_CTRLSTEPMOR:
		__MY_STATION->task.sendcmdCtrlStepmotor = ENorDIS;
 80057dc:	4b23      	ldr	r3, [pc, #140]	; (800586c <triggerTaskflag+0x200>)
 80057de:	681a      	ldr	r2, [r3, #0]
 80057e0:	79bb      	ldrb	r3, [r7, #6]
 80057e2:	f003 0301 	and.w	r3, r3, #1
 80057e6:	b2d9      	uxtb	r1, r3
 80057e8:	7c53      	ldrb	r3, [r2, #17]
 80057ea:	f361 1304 	bfi	r3, r1, #4, #1
 80057ee:	7453      	strb	r3, [r2, #17]
		break;
 80057f0:	e036      	b.n	8005860 <triggerTaskflag+0x1f4>
	case TASK_SEND_CALIB:
		__MY_STATION->task.sendcmdCalib = ENorDIS;
 80057f2:	4b1e      	ldr	r3, [pc, #120]	; (800586c <triggerTaskflag+0x200>)
 80057f4:	681a      	ldr	r2, [r3, #0]
 80057f6:	79bb      	ldrb	r3, [r7, #6]
 80057f8:	f003 0301 	and.w	r3, r3, #1
 80057fc:	b2d9      	uxtb	r1, r3
 80057fe:	7c53      	ldrb	r3, [r2, #17]
 8005800:	f361 1345 	bfi	r3, r1, #5, #1
 8005804:	7453      	strb	r3, [r2, #17]
		break;
 8005806:	e02b      	b.n	8005860 <triggerTaskflag+0x1f4>
	case TASK_SEND_GETSTATUS:
		__MY_STATION->task.sendcmdGetstatus = ENorDIS;
 8005808:	4b18      	ldr	r3, [pc, #96]	; (800586c <triggerTaskflag+0x200>)
 800580a:	681a      	ldr	r2, [r3, #0]
 800580c:	79bb      	ldrb	r3, [r7, #6]
 800580e:	f003 0301 	and.w	r3, r3, #1
 8005812:	b2d9      	uxtb	r1, r3
 8005814:	7c53      	ldrb	r3, [r2, #17]
 8005816:	f361 1386 	bfi	r3, r1, #6, #1
 800581a:	7453      	strb	r3, [r2, #17]
		break;
 800581c:	e020      	b.n	8005860 <triggerTaskflag+0x1f4>
	case TASK_SEND_GETSTATION:
		__MY_STATION->task.sendcmdGetstation = ENorDIS;
 800581e:	4b13      	ldr	r3, [pc, #76]	; (800586c <triggerTaskflag+0x200>)
 8005820:	681a      	ldr	r2, [r3, #0]
 8005822:	79bb      	ldrb	r3, [r7, #6]
 8005824:	f003 0301 	and.w	r3, r3, #1
 8005828:	b2d9      	uxtb	r1, r3
 800582a:	7c53      	ldrb	r3, [r2, #17]
 800582c:	f361 13c7 	bfi	r3, r1, #7, #1
 8005830:	7453      	strb	r3, [r2, #17]
		break;
 8005832:	e015      	b.n	8005860 <triggerTaskflag+0x1f4>
	case TASK_SEND_GETSENSOR:
		__MY_STATION->task.sendcmdGetsensor = ENorDIS;
 8005834:	4b0d      	ldr	r3, [pc, #52]	; (800586c <triggerTaskflag+0x200>)
 8005836:	681a      	ldr	r2, [r3, #0]
 8005838:	79bb      	ldrb	r3, [r7, #6]
 800583a:	f003 0301 	and.w	r3, r3, #1
 800583e:	b2d9      	uxtb	r1, r3
 8005840:	7c93      	ldrb	r3, [r2, #18]
 8005842:	f361 0300 	bfi	r3, r1, #0, #1
 8005846:	7493      	strb	r3, [r2, #18]
		break;
 8005848:	e00a      	b.n	8005860 <triggerTaskflag+0x1f4>
	case TASK_SEND_STEP_LIMIT:
		__MY_STATION->task.sendSTEPLIMIT = ENorDIS;
 800584a:	4b08      	ldr	r3, [pc, #32]	; (800586c <triggerTaskflag+0x200>)
 800584c:	681a      	ldr	r2, [r3, #0]
 800584e:	79bb      	ldrb	r3, [r7, #6]
 8005850:	f003 0301 	and.w	r3, r3, #1
 8005854:	b2d9      	uxtb	r1, r3
 8005856:	7c93      	ldrb	r3, [r2, #18]
 8005858:	f361 0341 	bfi	r3, r1, #1, #1
 800585c:	7493      	strb	r3, [r2, #18]
	default:
		break;
 800585e:	bf00      	nop
	}
	return ;
 8005860:	bf00      	nop
}
 8005862:	370c      	adds	r7, #12
 8005864:	46bd      	mov	sp, r7
 8005866:	bc80      	pop	{r7}
 8005868:	4770      	bx	lr
 800586a:	bf00      	nop
 800586c:	200016ec 	.word	0x200016ec

08005870 <validationID>:

#define MAX_SENSOR_ID		0xFE
#define MIN_SENSOR_ID		0x51

bool validationID(uint16_t ID, ID_t idtype)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b084      	sub	sp, #16
 8005874:	af00      	add	r7, sp, #0
 8005876:	4603      	mov	r3, r0
 8005878:	460a      	mov	r2, r1
 800587a:	80fb      	strh	r3, [r7, #6]
 800587c:	4613      	mov	r3, r2
 800587e:	717b      	strb	r3, [r7, #5]
	bool res = false;
 8005880:	2300      	movs	r3, #0
 8005882:	73fb      	strb	r3, [r7, #15]
	switch (idtype)	{
 8005884:	797b      	ldrb	r3, [r7, #5]
 8005886:	2b01      	cmp	r3, #1
 8005888:	d009      	beq.n	800589e <validationID+0x2e>
 800588a:	2b02      	cmp	r3, #2
 800588c:	d10f      	bne.n	80058ae <validationID+0x3e>
	case ID_SENSOR:
		res = sensorID_validation(ID);
 800588e:	88fb      	ldrh	r3, [r7, #6]
 8005890:	b2db      	uxtb	r3, r3
 8005892:	4618      	mov	r0, r3
 8005894:	f000 f824 	bl	80058e0 <sensorID_validation>
 8005898:	4603      	mov	r3, r0
 800589a:	73fb      	strb	r3, [r7, #15]
		break;
 800589c:	e008      	b.n	80058b0 <validationID+0x40>
	case ID_STATION:
		res = stationID_validation(ID);
 800589e:	88fb      	ldrh	r3, [r7, #6]
 80058a0:	b2db      	uxtb	r3, r3
 80058a2:	4618      	mov	r0, r3
 80058a4:	f000 f809 	bl	80058ba <stationID_validation>
 80058a8:	4603      	mov	r3, r0
 80058aa:	73fb      	strb	r3, [r7, #15]
		break;
 80058ac:	e000      	b.n	80058b0 <validationID+0x40>
	default:
		break;
 80058ae:	bf00      	nop
	}
	return res;
 80058b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	3710      	adds	r7, #16
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd80      	pop	{r7, pc}

080058ba <stationID_validation>:

bool stationID_validation(uint8_t ID)
{
 80058ba:	b480      	push	{r7}
 80058bc:	b083      	sub	sp, #12
 80058be:	af00      	add	r7, sp, #0
 80058c0:	4603      	mov	r3, r0
 80058c2:	71fb      	strb	r3, [r7, #7]
	if (ID >= MIN_STATION_ID && ID <= MAX_STATION_ID)	return true;
 80058c4:	79fb      	ldrb	r3, [r7, #7]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d004      	beq.n	80058d4 <stationID_validation+0x1a>
 80058ca:	79fb      	ldrb	r3, [r7, #7]
 80058cc:	2b50      	cmp	r3, #80	; 0x50
 80058ce:	d801      	bhi.n	80058d4 <stationID_validation+0x1a>
 80058d0:	2301      	movs	r3, #1
 80058d2:	e000      	b.n	80058d6 <stationID_validation+0x1c>
	return false;
 80058d4:	2300      	movs	r3, #0
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	370c      	adds	r7, #12
 80058da:	46bd      	mov	sp, r7
 80058dc:	bc80      	pop	{r7}
 80058de:	4770      	bx	lr

080058e0 <sensorID_validation>:

bool sensorID_validation(uint8_t ID)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b083      	sub	sp, #12
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	4603      	mov	r3, r0
 80058e8:	71fb      	strb	r3, [r7, #7]
	if (ID >= MIN_SENSOR_ID && ID <= MAX_SENSOR_ID)	return true;
 80058ea:	79fb      	ldrb	r3, [r7, #7]
 80058ec:	2b50      	cmp	r3, #80	; 0x50
 80058ee:	d904      	bls.n	80058fa <sensorID_validation+0x1a>
 80058f0:	79fb      	ldrb	r3, [r7, #7]
 80058f2:	2bff      	cmp	r3, #255	; 0xff
 80058f4:	d001      	beq.n	80058fa <sensorID_validation+0x1a>
 80058f6:	2301      	movs	r3, #1
 80058f8:	e000      	b.n	80058fc <sensorID_validation+0x1c>
	return false;
 80058fa:	2300      	movs	r3, #0
}
 80058fc:	4618      	mov	r0, r3
 80058fe:	370c      	adds	r7, #12
 8005900:	46bd      	mov	sp, r7
 8005902:	bc80      	pop	{r7}
 8005904:	4770      	bx	lr
	...

08005908 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b084      	sub	sp, #16
 800590c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800590e:	1d3b      	adds	r3, r7, #4
 8005910:	2200      	movs	r2, #0
 8005912:	601a      	str	r2, [r3, #0]
 8005914:	605a      	str	r2, [r3, #4]
 8005916:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8005918:	4b18      	ldr	r3, [pc, #96]	; (800597c <MX_ADC1_Init+0x74>)
 800591a:	4a19      	ldr	r2, [pc, #100]	; (8005980 <MX_ADC1_Init+0x78>)
 800591c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800591e:	4b17      	ldr	r3, [pc, #92]	; (800597c <MX_ADC1_Init+0x74>)
 8005920:	2200      	movs	r2, #0
 8005922:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8005924:	4b15      	ldr	r3, [pc, #84]	; (800597c <MX_ADC1_Init+0x74>)
 8005926:	2201      	movs	r2, #1
 8005928:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800592a:	4b14      	ldr	r3, [pc, #80]	; (800597c <MX_ADC1_Init+0x74>)
 800592c:	2200      	movs	r2, #0
 800592e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005930:	4b12      	ldr	r3, [pc, #72]	; (800597c <MX_ADC1_Init+0x74>)
 8005932:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8005936:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005938:	4b10      	ldr	r3, [pc, #64]	; (800597c <MX_ADC1_Init+0x74>)
 800593a:	2200      	movs	r2, #0
 800593c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800593e:	4b0f      	ldr	r3, [pc, #60]	; (800597c <MX_ADC1_Init+0x74>)
 8005940:	2201      	movs	r2, #1
 8005942:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8005944:	480d      	ldr	r0, [pc, #52]	; (800597c <MX_ADC1_Init+0x74>)
 8005946:	f002 f9ed 	bl	8007d24 <HAL_ADC_Init>
 800594a:	4603      	mov	r3, r0
 800594c:	2b00      	cmp	r3, #0
 800594e:	d001      	beq.n	8005954 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8005950:	f000 fd8e 	bl	8006470 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8005954:	2306      	movs	r3, #6
 8005956:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8005958:	2301      	movs	r3, #1
 800595a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800595c:	2307      	movs	r3, #7
 800595e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005960:	1d3b      	adds	r3, r7, #4
 8005962:	4619      	mov	r1, r3
 8005964:	4805      	ldr	r0, [pc, #20]	; (800597c <MX_ADC1_Init+0x74>)
 8005966:	f002 fc3f 	bl	80081e8 <HAL_ADC_ConfigChannel>
 800596a:	4603      	mov	r3, r0
 800596c:	2b00      	cmp	r3, #0
 800596e:	d001      	beq.n	8005974 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8005970:	f000 fd7e 	bl	8006470 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8005974:	bf00      	nop
 8005976:	3710      	adds	r7, #16
 8005978:	46bd      	mov	sp, r7
 800597a:	bd80      	pop	{r7, pc}
 800597c:	200016f0 	.word	0x200016f0
 8005980:	40012400 	.word	0x40012400

08005984 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b088      	sub	sp, #32
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800598c:	f107 0310 	add.w	r3, r7, #16
 8005990:	2200      	movs	r2, #0
 8005992:	601a      	str	r2, [r3, #0]
 8005994:	605a      	str	r2, [r3, #4]
 8005996:	609a      	str	r2, [r3, #8]
 8005998:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a18      	ldr	r2, [pc, #96]	; (8005a00 <HAL_ADC_MspInit+0x7c>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d129      	bne.n	80059f8 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80059a4:	4b17      	ldr	r3, [pc, #92]	; (8005a04 <HAL_ADC_MspInit+0x80>)
 80059a6:	699b      	ldr	r3, [r3, #24]
 80059a8:	4a16      	ldr	r2, [pc, #88]	; (8005a04 <HAL_ADC_MspInit+0x80>)
 80059aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80059ae:	6193      	str	r3, [r2, #24]
 80059b0:	4b14      	ldr	r3, [pc, #80]	; (8005a04 <HAL_ADC_MspInit+0x80>)
 80059b2:	699b      	ldr	r3, [r3, #24]
 80059b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80059b8:	60fb      	str	r3, [r7, #12]
 80059ba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80059bc:	4b11      	ldr	r3, [pc, #68]	; (8005a04 <HAL_ADC_MspInit+0x80>)
 80059be:	699b      	ldr	r3, [r3, #24]
 80059c0:	4a10      	ldr	r2, [pc, #64]	; (8005a04 <HAL_ADC_MspInit+0x80>)
 80059c2:	f043 0304 	orr.w	r3, r3, #4
 80059c6:	6193      	str	r3, [r2, #24]
 80059c8:	4b0e      	ldr	r3, [pc, #56]	; (8005a04 <HAL_ADC_MspInit+0x80>)
 80059ca:	699b      	ldr	r3, [r3, #24]
 80059cc:	f003 0304 	and.w	r3, r3, #4
 80059d0:	60bb      	str	r3, [r7, #8]
 80059d2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80059d4:	2340      	movs	r3, #64	; 0x40
 80059d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80059d8:	2303      	movs	r3, #3
 80059da:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80059dc:	f107 0310 	add.w	r3, r7, #16
 80059e0:	4619      	mov	r1, r3
 80059e2:	4809      	ldr	r0, [pc, #36]	; (8005a08 <HAL_ADC_MspInit+0x84>)
 80059e4:	f003 f94c 	bl	8008c80 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80059e8:	2200      	movs	r2, #0
 80059ea:	2100      	movs	r1, #0
 80059ec:	2012      	movs	r0, #18
 80059ee:	f002 fe6e 	bl	80086ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80059f2:	2012      	movs	r0, #18
 80059f4:	f002 fe87 	bl	8008706 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80059f8:	bf00      	nop
 80059fa:	3720      	adds	r7, #32
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bd80      	pop	{r7, pc}
 8005a00:	40012400 	.word	0x40012400
 8005a04:	40021000 	.word	0x40021000
 8005a08:	40010800 	.word	0x40010800

08005a0c <crc32>:
    0x2d02ef8dL
};

/* crc32 hash */
uint32_t crc32(const char* s, int len)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b085      	sub	sp, #20
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
 8005a14:	6039      	str	r1, [r7, #0]
    int i;
    uint32_t crc32val = 0;
 8005a16:	2300      	movs	r3, #0
 8005a18:	60bb      	str	r3, [r7, #8]
    crc32val ^= 0xFFFFFFFF;
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	43db      	mvns	r3, r3
 8005a1e:	60bb      	str	r3, [r7, #8]

    for (i = 0;  i < len;  i++) {
 8005a20:	2300      	movs	r3, #0
 8005a22:	60fb      	str	r3, [r7, #12]
 8005a24:	e011      	b.n	8005a4a <crc32+0x3e>
        crc32val = crc32_tab[(crc32val ^ s[i]) & 0xFF] ^ ((crc32val >> 8) & 0x00FFFFFF);
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	687a      	ldr	r2, [r7, #4]
 8005a2a:	4413      	add	r3, r2
 8005a2c:	781b      	ldrb	r3, [r3, #0]
 8005a2e:	461a      	mov	r2, r3
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	4053      	eors	r3, r2
 8005a34:	b2db      	uxtb	r3, r3
 8005a36:	4a0a      	ldr	r2, [pc, #40]	; (8005a60 <crc32+0x54>)
 8005a38:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	0a1b      	lsrs	r3, r3, #8
 8005a40:	4053      	eors	r3, r2
 8005a42:	60bb      	str	r3, [r7, #8]
    for (i = 0;  i < len;  i++) {
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	3301      	adds	r3, #1
 8005a48:	60fb      	str	r3, [r7, #12]
 8005a4a:	68fa      	ldr	r2, [r7, #12]
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	429a      	cmp	r2, r3
 8005a50:	dbe9      	blt.n	8005a26 <crc32+0x1a>
    }

    return crc32val ^ 0xFFFFFFFF;
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	43db      	mvns	r3, r3
}
 8005a56:	4618      	mov	r0, r3
 8005a58:	3714      	adds	r7, #20
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bc80      	pop	{r7}
 8005a5e:	4770      	bx	lr
 8005a60:	20000004 	.word	0x20000004

08005a64 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b082      	sub	sp, #8
 8005a68:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005a6a:	4b14      	ldr	r3, [pc, #80]	; (8005abc <MX_DMA_Init+0x58>)
 8005a6c:	695b      	ldr	r3, [r3, #20]
 8005a6e:	4a13      	ldr	r2, [pc, #76]	; (8005abc <MX_DMA_Init+0x58>)
 8005a70:	f043 0301 	orr.w	r3, r3, #1
 8005a74:	6153      	str	r3, [r2, #20]
 8005a76:	4b11      	ldr	r3, [pc, #68]	; (8005abc <MX_DMA_Init+0x58>)
 8005a78:	695b      	ldr	r3, [r3, #20]
 8005a7a:	f003 0301 	and.w	r3, r3, #1
 8005a7e:	607b      	str	r3, [r7, #4]
 8005a80:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8005a82:	2200      	movs	r2, #0
 8005a84:	2100      	movs	r1, #0
 8005a86:	200d      	movs	r0, #13
 8005a88:	f002 fe21 	bl	80086ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8005a8c:	200d      	movs	r0, #13
 8005a8e:	f002 fe3a 	bl	8008706 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8005a92:	2200      	movs	r2, #0
 8005a94:	2100      	movs	r1, #0
 8005a96:	200f      	movs	r0, #15
 8005a98:	f002 fe19 	bl	80086ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8005a9c:	200f      	movs	r0, #15
 8005a9e:	f002 fe32 	bl	8008706 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	2100      	movs	r1, #0
 8005aa6:	2010      	movs	r0, #16
 8005aa8:	f002 fe11 	bl	80086ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8005aac:	2010      	movs	r0, #16
 8005aae:	f002 fe2a 	bl	8008706 <HAL_NVIC_EnableIRQ>

}
 8005ab2:	bf00      	nop
 8005ab4:	3708      	adds	r7, #8
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bd80      	pop	{r7, pc}
 8005aba:	bf00      	nop
 8005abc:	40021000 	.word	0x40021000

08005ac0 <Bytes2float>:
    }

}

float Bytes2float(uint8_t * ftoa_bytes_temp)
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b087      	sub	sp, #28
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
    union {
      float a;
      uint8_t bytes[4];
    } thing;

    for (uint8_t i = 0; i < 4; i++) {
 8005ac8:	2300      	movs	r3, #0
 8005aca:	75fb      	strb	r3, [r7, #23]
 8005acc:	e00b      	b.n	8005ae6 <Bytes2float+0x26>
    	thing.bytes[i] = ftoa_bytes_temp[i];
 8005ace:	7dfb      	ldrb	r3, [r7, #23]
 8005ad0:	687a      	ldr	r2, [r7, #4]
 8005ad2:	441a      	add	r2, r3
 8005ad4:	7dfb      	ldrb	r3, [r7, #23]
 8005ad6:	7812      	ldrb	r2, [r2, #0]
 8005ad8:	3318      	adds	r3, #24
 8005ada:	443b      	add	r3, r7
 8005adc:	f803 2c0c 	strb.w	r2, [r3, #-12]
    for (uint8_t i = 0; i < 4; i++) {
 8005ae0:	7dfb      	ldrb	r3, [r7, #23]
 8005ae2:	3301      	adds	r3, #1
 8005ae4:	75fb      	strb	r3, [r7, #23]
 8005ae6:	7dfb      	ldrb	r3, [r7, #23]
 8005ae8:	2b03      	cmp	r3, #3
 8005aea:	d9f0      	bls.n	8005ace <Bytes2float+0xe>
    }

   float float_variable =  thing.a;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	613b      	str	r3, [r7, #16]
   return float_variable;
 8005af0:	693b      	ldr	r3, [r7, #16]
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	371c      	adds	r7, #28
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bc80      	pop	{r7}
 8005afa:	4770      	bx	lr

08005afc <Flash_Read_Data>:
	   return 0;
}


void Flash_Read_Data (uint32_t StartPageAddress, uint32_t *RxBuf, uint16_t numberofwords)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b085      	sub	sp, #20
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	60f8      	str	r0, [r7, #12]
 8005b04:	60b9      	str	r1, [r7, #8]
 8005b06:	4613      	mov	r3, r2
 8005b08:	80fb      	strh	r3, [r7, #6]
	while (1)
	{

		*RxBuf = *(__IO uint32_t *)StartPageAddress;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681a      	ldr	r2, [r3, #0]
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	601a      	str	r2, [r3, #0]
		StartPageAddress += 4;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	3304      	adds	r3, #4
 8005b16:	60fb      	str	r3, [r7, #12]
		RxBuf++;
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	3304      	adds	r3, #4
 8005b1c:	60bb      	str	r3, [r7, #8]
		if (!(numberofwords--)) break;
 8005b1e:	88fb      	ldrh	r3, [r7, #6]
 8005b20:	1e5a      	subs	r2, r3, #1
 8005b22:	80fa      	strh	r2, [r7, #6]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d000      	beq.n	8005b2a <Flash_Read_Data+0x2e>
		*RxBuf = *(__IO uint32_t *)StartPageAddress;
 8005b28:	e7ef      	b.n	8005b0a <Flash_Read_Data+0xe>
		if (!(numberofwords--)) break;
 8005b2a:	bf00      	nop
	}
}
 8005b2c:	bf00      	nop
 8005b2e:	3714      	adds	r7, #20
 8005b30:	46bd      	mov	sp, r7
 8005b32:	bc80      	pop	{r7}
 8005b34:	4770      	bx	lr

08005b36 <Flash_Read_NUM>:
	Flash_Write_Data (StartSectorAddress, (uint32_t *)bytes_temp, 1);
}


float Flash_Read_NUM (uint32_t StartSectorAddress)
{
 8005b36:	b580      	push	{r7, lr}
 8005b38:	b084      	sub	sp, #16
 8005b3a:	af00      	add	r7, sp, #0
 8005b3c:	6078      	str	r0, [r7, #4]
	uint8_t buffer[4];
	float value;

	Flash_Read_Data(StartSectorAddress, (uint32_t *)buffer, 1);
 8005b3e:	f107 0308 	add.w	r3, r7, #8
 8005b42:	2201      	movs	r2, #1
 8005b44:	4619      	mov	r1, r3
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f7ff ffd8 	bl	8005afc <Flash_Read_Data>
	value = Bytes2float(buffer);
 8005b4c:	f107 0308 	add.w	r3, r7, #8
 8005b50:	4618      	mov	r0, r3
 8005b52:	f7ff ffb5 	bl	8005ac0 <Bytes2float>
 8005b56:	60f8      	str	r0, [r7, #12]
	return value;
 8005b58:	68fb      	ldr	r3, [r7, #12]
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	3710      	adds	r7, #16
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}
	...

08005b64 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b088      	sub	sp, #32
 8005b68:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b6a:	f107 0310 	add.w	r3, r7, #16
 8005b6e:	2200      	movs	r2, #0
 8005b70:	601a      	str	r2, [r3, #0]
 8005b72:	605a      	str	r2, [r3, #4]
 8005b74:	609a      	str	r2, [r3, #8]
 8005b76:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005b78:	4b5c      	ldr	r3, [pc, #368]	; (8005cec <MX_GPIO_Init+0x188>)
 8005b7a:	699b      	ldr	r3, [r3, #24]
 8005b7c:	4a5b      	ldr	r2, [pc, #364]	; (8005cec <MX_GPIO_Init+0x188>)
 8005b7e:	f043 0310 	orr.w	r3, r3, #16
 8005b82:	6193      	str	r3, [r2, #24]
 8005b84:	4b59      	ldr	r3, [pc, #356]	; (8005cec <MX_GPIO_Init+0x188>)
 8005b86:	699b      	ldr	r3, [r3, #24]
 8005b88:	f003 0310 	and.w	r3, r3, #16
 8005b8c:	60fb      	str	r3, [r7, #12]
 8005b8e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005b90:	4b56      	ldr	r3, [pc, #344]	; (8005cec <MX_GPIO_Init+0x188>)
 8005b92:	699b      	ldr	r3, [r3, #24]
 8005b94:	4a55      	ldr	r2, [pc, #340]	; (8005cec <MX_GPIO_Init+0x188>)
 8005b96:	f043 0320 	orr.w	r3, r3, #32
 8005b9a:	6193      	str	r3, [r2, #24]
 8005b9c:	4b53      	ldr	r3, [pc, #332]	; (8005cec <MX_GPIO_Init+0x188>)
 8005b9e:	699b      	ldr	r3, [r3, #24]
 8005ba0:	f003 0320 	and.w	r3, r3, #32
 8005ba4:	60bb      	str	r3, [r7, #8]
 8005ba6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005ba8:	4b50      	ldr	r3, [pc, #320]	; (8005cec <MX_GPIO_Init+0x188>)
 8005baa:	699b      	ldr	r3, [r3, #24]
 8005bac:	4a4f      	ldr	r2, [pc, #316]	; (8005cec <MX_GPIO_Init+0x188>)
 8005bae:	f043 0304 	orr.w	r3, r3, #4
 8005bb2:	6193      	str	r3, [r2, #24]
 8005bb4:	4b4d      	ldr	r3, [pc, #308]	; (8005cec <MX_GPIO_Init+0x188>)
 8005bb6:	699b      	ldr	r3, [r3, #24]
 8005bb8:	f003 0304 	and.w	r3, r3, #4
 8005bbc:	607b      	str	r3, [r7, #4]
 8005bbe:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005bc0:	4b4a      	ldr	r3, [pc, #296]	; (8005cec <MX_GPIO_Init+0x188>)
 8005bc2:	699b      	ldr	r3, [r3, #24]
 8005bc4:	4a49      	ldr	r2, [pc, #292]	; (8005cec <MX_GPIO_Init+0x188>)
 8005bc6:	f043 0308 	orr.w	r3, r3, #8
 8005bca:	6193      	str	r3, [r2, #24]
 8005bcc:	4b47      	ldr	r3, [pc, #284]	; (8005cec <MX_GPIO_Init+0x188>)
 8005bce:	699b      	ldr	r3, [r3, #24]
 8005bd0:	f003 0308 	and.w	r3, r3, #8
 8005bd4:	603b      	str	r3, [r7, #0]
 8005bd6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_DB7_Pin|LCD_DB6_Pin|LCD_DB5_Pin, GPIO_PIN_RESET);
 8005bd8:	2200      	movs	r2, #0
 8005bda:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8005bde:	4844      	ldr	r0, [pc, #272]	; (8005cf0 <MX_GPIO_Init+0x18c>)
 8005be0:	f003 f9e9 	bl	8008fb6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MBA_CONTACTOR_Pin|MOTOR_DIR_Pin|LED_Pin|LCD_RS_Pin
 8005be4:	2200      	movs	r2, #0
 8005be6:	f649 4190 	movw	r1, #40080	; 0x9c90
 8005bea:	4842      	ldr	r0, [pc, #264]	; (8005cf4 <MX_GPIO_Init+0x190>)
 8005bec:	f003 f9e3 	bl	8008fb6 <HAL_GPIO_WritePin>
                          |LCD_EN_Pin|LCD_DB4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOTOR_STEP_Pin|MOTOR_SLEEP_Pin|MOTOR_RST_Pin|MOTOR_EN_Pin, GPIO_PIN_RESET);
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	f243 0103 	movw	r1, #12291	; 0x3003
 8005bf6:	4840      	ldr	r0, [pc, #256]	; (8005cf8 <MX_GPIO_Init+0x194>)
 8005bf8:	f003 f9dd 	bl	8008fb6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LCD_DB7_Pin|LCD_DB6_Pin|LCD_DB5_Pin;
 8005bfc:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8005c00:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005c02:	2301      	movs	r3, #1
 8005c04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c06:	2300      	movs	r3, #0
 8005c08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c0a:	2302      	movs	r3, #2
 8005c0c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005c0e:	f107 0310 	add.w	r3, r7, #16
 8005c12:	4619      	mov	r1, r3
 8005c14:	4836      	ldr	r0, [pc, #216]	; (8005cf0 <MX_GPIO_Init+0x18c>)
 8005c16:	f003 f833 	bl	8008c80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RTC_ALARM_TRIGGER_Pin|LIMIT_SWITCH_MAX_Pin|BUTTON_DOWN_Pin|BUTTON_UP_Pin;
 8005c1a:	f240 3321 	movw	r3, #801	; 0x321
 8005c1e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8005c20:	4b36      	ldr	r3, [pc, #216]	; (8005cfc <MX_GPIO_Init+0x198>)
 8005c22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c24:	2300      	movs	r3, #0
 8005c26:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005c28:	f107 0310 	add.w	r3, r7, #16
 8005c2c:	4619      	mov	r1, r3
 8005c2e:	4831      	ldr	r0, [pc, #196]	; (8005cf4 <MX_GPIO_Init+0x190>)
 8005c30:	f003 f826 	bl	8008c80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin */
  GPIO_InitStruct.Pin = MBA_CONTACTOR_Pin|MOTOR_DIR_Pin|LED_Pin|LCD_RS_Pin
 8005c34:	f649 4390 	movw	r3, #40080	; 0x9c90
 8005c38:	613b      	str	r3, [r7, #16]
                          |LCD_EN_Pin|LCD_DB4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c42:	2302      	movs	r3, #2
 8005c44:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005c46:	f107 0310 	add.w	r3, r7, #16
 8005c4a:	4619      	mov	r1, r3
 8005c4c:	4829      	ldr	r0, [pc, #164]	; (8005cf4 <MX_GPIO_Init+0x190>)
 8005c4e:	f003 f817 	bl	8008c80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MOTOR_STEP_Pin|MOTOR_SLEEP_Pin|MOTOR_RST_Pin|MOTOR_EN_Pin;
 8005c52:	f243 0303 	movw	r3, #12291	; 0x3003
 8005c56:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005c58:	2301      	movs	r3, #1
 8005c5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c60:	2302      	movs	r3, #2
 8005c62:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005c64:	f107 0310 	add.w	r3, r7, #16
 8005c68:	4619      	mov	r1, r3
 8005c6a:	4823      	ldr	r0, [pc, #140]	; (8005cf8 <MX_GPIO_Init+0x194>)
 8005c6c:	f003 f808 	bl	8008c80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LIMIT_SWITCH_MIN_Pin;
 8005c70:	2304      	movs	r3, #4
 8005c72:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005c74:	4b22      	ldr	r3, [pc, #136]	; (8005d00 <MX_GPIO_Init+0x19c>)
 8005c76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c78:	2300      	movs	r3, #0
 8005c7a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LIMIT_SWITCH_MIN_GPIO_Port, &GPIO_InitStruct);
 8005c7c:	f107 0310 	add.w	r3, r7, #16
 8005c80:	4619      	mov	r1, r3
 8005c82:	481d      	ldr	r0, [pc, #116]	; (8005cf8 <MX_GPIO_Init+0x194>)
 8005c84:	f002 fffc 	bl	8008c80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = BUTTON_MENU_Pin|BUTTON_OK_Pin;
 8005c88:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8005c8c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8005c8e:	4b1b      	ldr	r3, [pc, #108]	; (8005cfc <MX_GPIO_Init+0x198>)
 8005c90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c92:	2300      	movs	r3, #0
 8005c94:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005c96:	f107 0310 	add.w	r3, r7, #16
 8005c9a:	4619      	mov	r1, r3
 8005c9c:	4816      	ldr	r0, [pc, #88]	; (8005cf8 <MX_GPIO_Init+0x194>)
 8005c9e:	f002 ffef 	bl	8008c80 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	2100      	movs	r1, #0
 8005ca6:	2006      	movs	r0, #6
 8005ca8:	f002 fd11 	bl	80086ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8005cac:	2006      	movs	r0, #6
 8005cae:	f002 fd2a 	bl	8008706 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	2100      	movs	r1, #0
 8005cb6:	2008      	movs	r0, #8
 8005cb8:	f002 fd09 	bl	80086ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8005cbc:	2008      	movs	r0, #8
 8005cbe:	f002 fd22 	bl	8008706 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	2100      	movs	r1, #0
 8005cc6:	2017      	movs	r0, #23
 8005cc8:	f002 fd01 	bl	80086ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8005ccc:	2017      	movs	r0, #23
 8005cce:	f002 fd1a 	bl	8008706 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	2100      	movs	r1, #0
 8005cd6:	2028      	movs	r0, #40	; 0x28
 8005cd8:	f002 fcf9 	bl	80086ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8005cdc:	2028      	movs	r0, #40	; 0x28
 8005cde:	f002 fd12 	bl	8008706 <HAL_NVIC_EnableIRQ>

}
 8005ce2:	bf00      	nop
 8005ce4:	3720      	adds	r7, #32
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bd80      	pop	{r7, pc}
 8005cea:	bf00      	nop
 8005cec:	40021000 	.word	0x40021000
 8005cf0:	40011000 	.word	0x40011000
 8005cf4:	40010800 	.word	0x40010800
 8005cf8:	40010c00 	.word	0x40010c00
 8005cfc:	10210000 	.word	0x10210000
 8005d00:	10110000 	.word	0x10110000

08005d04 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8005d08:	4b12      	ldr	r3, [pc, #72]	; (8005d54 <MX_I2C1_Init+0x50>)
 8005d0a:	4a13      	ldr	r2, [pc, #76]	; (8005d58 <MX_I2C1_Init+0x54>)
 8005d0c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8005d0e:	4b11      	ldr	r3, [pc, #68]	; (8005d54 <MX_I2C1_Init+0x50>)
 8005d10:	4a12      	ldr	r2, [pc, #72]	; (8005d5c <MX_I2C1_Init+0x58>)
 8005d12:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005d14:	4b0f      	ldr	r3, [pc, #60]	; (8005d54 <MX_I2C1_Init+0x50>)
 8005d16:	2200      	movs	r2, #0
 8005d18:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8005d1a:	4b0e      	ldr	r3, [pc, #56]	; (8005d54 <MX_I2C1_Init+0x50>)
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005d20:	4b0c      	ldr	r3, [pc, #48]	; (8005d54 <MX_I2C1_Init+0x50>)
 8005d22:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005d26:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005d28:	4b0a      	ldr	r3, [pc, #40]	; (8005d54 <MX_I2C1_Init+0x50>)
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8005d2e:	4b09      	ldr	r3, [pc, #36]	; (8005d54 <MX_I2C1_Init+0x50>)
 8005d30:	2200      	movs	r2, #0
 8005d32:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005d34:	4b07      	ldr	r3, [pc, #28]	; (8005d54 <MX_I2C1_Init+0x50>)
 8005d36:	2200      	movs	r2, #0
 8005d38:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005d3a:	4b06      	ldr	r3, [pc, #24]	; (8005d54 <MX_I2C1_Init+0x50>)
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005d40:	4804      	ldr	r0, [pc, #16]	; (8005d54 <MX_I2C1_Init+0x50>)
 8005d42:	f003 f981 	bl	8009048 <HAL_I2C_Init>
 8005d46:	4603      	mov	r3, r0
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d001      	beq.n	8005d50 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8005d4c:	f000 fb90 	bl	8006470 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8005d50:	bf00      	nop
 8005d52:	bd80      	pop	{r7, pc}
 8005d54:	20001720 	.word	0x20001720
 8005d58:	40005400 	.word	0x40005400
 8005d5c:	00061a80 	.word	0x00061a80

08005d60 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b08a      	sub	sp, #40	; 0x28
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d68:	f107 0314 	add.w	r3, r7, #20
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	601a      	str	r2, [r3, #0]
 8005d70:	605a      	str	r2, [r3, #4]
 8005d72:	609a      	str	r2, [r3, #8]
 8005d74:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a1d      	ldr	r2, [pc, #116]	; (8005df0 <HAL_I2C_MspInit+0x90>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d132      	bne.n	8005de6 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005d80:	4b1c      	ldr	r3, [pc, #112]	; (8005df4 <HAL_I2C_MspInit+0x94>)
 8005d82:	699b      	ldr	r3, [r3, #24]
 8005d84:	4a1b      	ldr	r2, [pc, #108]	; (8005df4 <HAL_I2C_MspInit+0x94>)
 8005d86:	f043 0308 	orr.w	r3, r3, #8
 8005d8a:	6193      	str	r3, [r2, #24]
 8005d8c:	4b19      	ldr	r3, [pc, #100]	; (8005df4 <HAL_I2C_MspInit+0x94>)
 8005d8e:	699b      	ldr	r3, [r3, #24]
 8005d90:	f003 0308 	and.w	r3, r3, #8
 8005d94:	613b      	str	r3, [r7, #16]
 8005d96:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8005d98:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005d9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005d9e:	2312      	movs	r3, #18
 8005da0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005da2:	2303      	movs	r3, #3
 8005da4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005da6:	f107 0314 	add.w	r3, r7, #20
 8005daa:	4619      	mov	r1, r3
 8005dac:	4812      	ldr	r0, [pc, #72]	; (8005df8 <HAL_I2C_MspInit+0x98>)
 8005dae:	f002 ff67 	bl	8008c80 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8005db2:	4b12      	ldr	r3, [pc, #72]	; (8005dfc <HAL_I2C_MspInit+0x9c>)
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	627b      	str	r3, [r7, #36]	; 0x24
 8005db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dba:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8005dbe:	627b      	str	r3, [r7, #36]	; 0x24
 8005dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc2:	f043 0302 	orr.w	r3, r3, #2
 8005dc6:	627b      	str	r3, [r7, #36]	; 0x24
 8005dc8:	4a0c      	ldr	r2, [pc, #48]	; (8005dfc <HAL_I2C_MspInit+0x9c>)
 8005dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dcc:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005dce:	4b09      	ldr	r3, [pc, #36]	; (8005df4 <HAL_I2C_MspInit+0x94>)
 8005dd0:	69db      	ldr	r3, [r3, #28]
 8005dd2:	4a08      	ldr	r2, [pc, #32]	; (8005df4 <HAL_I2C_MspInit+0x94>)
 8005dd4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005dd8:	61d3      	str	r3, [r2, #28]
 8005dda:	4b06      	ldr	r3, [pc, #24]	; (8005df4 <HAL_I2C_MspInit+0x94>)
 8005ddc:	69db      	ldr	r3, [r3, #28]
 8005dde:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005de2:	60fb      	str	r3, [r7, #12]
 8005de4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8005de6:	bf00      	nop
 8005de8:	3728      	adds	r7, #40	; 0x28
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}
 8005dee:	bf00      	nop
 8005df0:	40005400 	.word	0x40005400
 8005df4:	40021000 	.word	0x40021000
 8005df8:	40010c00 	.word	0x40010c00
 8005dfc:	40010000 	.word	0x40010000

08005e00 <create_node>:
#include "linkedlist.h"

SensorNode_t SSnode_default = SENSORNODE_T_INIT;

Node* create_node(SensorNode_t  SSnode)
{
 8005e00:	b084      	sub	sp, #16
 8005e02:	b580      	push	{r7, lr}
 8005e04:	b082      	sub	sp, #8
 8005e06:	af00      	add	r7, sp, #0
 8005e08:	f107 0c10 	add.w	ip, r7, #16
 8005e0c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    Node* node = (Node*)malloc(sizeof(Node));
 8005e10:	2078      	movs	r0, #120	; 0x78
 8005e12:	f006 f9f9 	bl	800c208 <malloc>
 8005e16:	4603      	mov	r3, r0
 8005e18:	607b      	str	r3, [r7, #4]
    node->SSnode= SSnode;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	f107 0310 	add.w	r3, r7, #16
 8005e22:	2272      	movs	r2, #114	; 0x72
 8005e24:	4619      	mov	r1, r3
 8005e26:	f006 fa0f 	bl	800c248 <memcpy>
    node->next = NULL;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	675a      	str	r2, [r3, #116]	; 0x74
    return node;
 8005e30:	687b      	ldr	r3, [r7, #4]
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	3708      	adds	r7, #8
 8005e36:	46bd      	mov	sp, r7
 8005e38:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005e3c:	b004      	add	sp, #16
 8005e3e:	4770      	bx	lr

08005e40 <list_create>:

s_list * list_create(void)
{
 8005e40:	b590      	push	{r4, r7, lr}
 8005e42:	b09d      	sub	sp, #116	; 0x74
 8005e44:	af1a      	add	r7, sp, #104	; 0x68
    s_list *list = (s_list*)malloc(sizeof(s_list));
 8005e46:	200c      	movs	r0, #12
 8005e48:	f006 f9de 	bl	800c208 <malloc>
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	607b      	str	r3, [r7, #4]
//    assert(list != NULL);
    list->head = create_node(SSnode_default);
 8005e50:	4c15      	ldr	r4, [pc, #84]	; (8005ea8 <list_create+0x68>)
 8005e52:	4668      	mov	r0, sp
 8005e54:	f104 0310 	add.w	r3, r4, #16
 8005e58:	2262      	movs	r2, #98	; 0x62
 8005e5a:	4619      	mov	r1, r3
 8005e5c:	f006 f9f4 	bl	800c248 <memcpy>
 8005e60:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8005e64:	f7ff ffcc 	bl	8005e00 <create_node>
 8005e68:	4602      	mov	r2, r0
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	601a      	str	r2, [r3, #0]
    list->tail = create_node(SSnode_default);
 8005e6e:	4c0e      	ldr	r4, [pc, #56]	; (8005ea8 <list_create+0x68>)
 8005e70:	4668      	mov	r0, sp
 8005e72:	f104 0310 	add.w	r3, r4, #16
 8005e76:	2262      	movs	r2, #98	; 0x62
 8005e78:	4619      	mov	r1, r3
 8005e7a:	f006 f9e5 	bl	800c248 <memcpy>
 8005e7e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8005e82:	f7ff ffbd 	bl	8005e00 <create_node>
 8005e86:	4602      	mov	r2, r0
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	605a      	str	r2, [r3, #4]
    list->head->next = list->tail;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	687a      	ldr	r2, [r7, #4]
 8005e92:	6852      	ldr	r2, [r2, #4]
 8005e94:	675a      	str	r2, [r3, #116]	; 0x74
    list->length = 0;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	609a      	str	r2, [r3, #8]
    return list;
 8005e9c:	687b      	ldr	r3, [r7, #4]
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	370c      	adds	r7, #12
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bd90      	pop	{r4, r7, pc}
 8005ea6:	bf00      	nop
 8005ea8:	20000404 	.word	0x20000404

08005eac <list_append>:

void list_append (s_list* list, SensorNode_t SSnode_data)
{
 8005eac:	b084      	sub	sp, #16
 8005eae:	b590      	push	{r4, r7, lr}
 8005eb0:	b09f      	sub	sp, #124	; 0x7c
 8005eb2:	af1a      	add	r7, sp, #104	; 0x68
 8005eb4:	6078      	str	r0, [r7, #4]
 8005eb6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005eba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	list->tail->SSnode = SSnode_data;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	685b      	ldr	r3, [r3, #4]
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005ec8:	2272      	movs	r2, #114	; 0x72
 8005eca:	4619      	mov	r1, r3
 8005ecc:	f006 f9bc 	bl	800c248 <memcpy>
	Node *new_tail = create_node(SSnode_default);
 8005ed0:	4c0f      	ldr	r4, [pc, #60]	; (8005f10 <list_append+0x64>)
 8005ed2:	4668      	mov	r0, sp
 8005ed4:	f104 0310 	add.w	r3, r4, #16
 8005ed8:	2262      	movs	r2, #98	; 0x62
 8005eda:	4619      	mov	r1, r3
 8005edc:	f006 f9b4 	bl	800c248 <memcpy>
 8005ee0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8005ee4:	f7ff ff8c 	bl	8005e00 <create_node>
 8005ee8:	60f8      	str	r0, [r7, #12]
	list->tail->next = new_tail;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	68fa      	ldr	r2, [r7, #12]
 8005ef0:	675a      	str	r2, [r3, #116]	; 0x74
	list->tail = new_tail;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	68fa      	ldr	r2, [r7, #12]
 8005ef6:	605a      	str	r2, [r3, #4]
	list->length += 1;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	689b      	ldr	r3, [r3, #8]
 8005efc:	1c5a      	adds	r2, r3, #1
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	609a      	str	r2, [r3, #8]
}
 8005f02:	bf00      	nop
 8005f04:	3714      	adds	r7, #20
 8005f06:	46bd      	mov	sp, r7
 8005f08:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8005f0c:	b004      	add	sp, #16
 8005f0e:	4770      	bx	lr
 8005f10:	20000404 	.word	0x20000404

08005f14 <HAL_UARTEx_RxEventCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static void currentConvert(uint32_t volatile *adcval);
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b082      	sub	sp, #8
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
 8005f1c:	460b      	mov	r3, r1
 8005f1e:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART1 )
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a0f      	ldr	r2, [pc, #60]	; (8005f64 <HAL_UARTEx_RxEventCallback+0x50>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d103      	bne.n	8005f32 <HAL_UARTEx_RxEventCallback+0x1e>
	{
		SIM_callback(Size);
 8005f2a:	887b      	ldrh	r3, [r7, #2]
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	f7fc fa3f 	bl	80023b0 <SIM_callback>
	}
	if (huart->Instance== __SCFG_UART->Instance)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681a      	ldr	r2, [r3, #0]
 8005f36:	4b0c      	ldr	r3, [pc, #48]	; (8005f68 <HAL_UARTEx_RxEventCallback+0x54>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	429a      	cmp	r2, r3
 8005f3e:	d103      	bne.n	8005f48 <HAL_UARTEx_RxEventCallback+0x34>
	{
		Serial_CFG_Callback(Size);
 8005f40:	887b      	ldrh	r3, [r7, #2]
 8005f42:	4618      	mov	r0, r3
 8005f44:	f7fb f808 	bl	8000f58 <Serial_CFG_Callback>
	}

	if (huart->Instance == USART3) {
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a07      	ldr	r2, [pc, #28]	; (8005f6c <HAL_UARTEx_RxEventCallback+0x58>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d103      	bne.n	8005f5a <HAL_UARTEx_RxEventCallback+0x46>
		Lora_callback(Size);
 8005f52:	887b      	ldrh	r3, [r7, #2]
 8005f54:	4618      	mov	r0, r3
 8005f56:	f7fe fb47 	bl	80045e8 <Lora_callback>
	}
}
 8005f5a:	bf00      	nop
 8005f5c:	3708      	adds	r7, #8
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bd80      	pop	{r7, pc}
 8005f62:	bf00      	nop
 8005f64:	40013800 	.word	0x40013800
 8005f68:	200005e4 	.word	0x200005e4
 8005f6c:	40004800 	.word	0x40004800

08005f70 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b082      	sub	sp, #8
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	4603      	mov	r3, r0
 8005f78:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == RTC_ALARM_TRIGGER_Pin)	{
 8005f7a:	88fb      	ldrh	r3, [r7, #6]
 8005f7c:	2b01      	cmp	r3, #1
 8005f7e:	d10f      	bne.n	8005fa0 <HAL_GPIO_EXTI_Callback+0x30>
//		alarmflag = 0;
		// turn OFF MBA
		myStation.MBAstate = switchContactor(MBA_OFF);
 8005f80:	2002      	movs	r0, #2
 8005f82:	f7fc f9d5 	bl	8002330 <switchContactor>
 8005f86:	4603      	mov	r3, r0
 8005f88:	461a      	mov	r2, r3
 8005f8a:	4b18      	ldr	r3, [pc, #96]	; (8005fec <HAL_GPIO_EXTI_Callback+0x7c>)
 8005f8c:	719a      	strb	r2, [r3, #6]
//		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
		DS3231_ClearAlarm1();
 8005f8e:	f7fe f9ff 	bl	8004390 <DS3231_ClearAlarm1>
		// Change to Calib mode
		setStationMode(STATION_MODE_CALIB);
 8005f92:	2001      	movs	r0, #1
 8005f94:	f000 f854 	bl	8006040 <setStationMode>
		triggerTaskflag(TASK_START_CALIB, FLAG_EN);
 8005f98:	2101      	movs	r1, #1
 8005f9a:	2003      	movs	r0, #3
 8005f9c:	f7ff fb66 	bl	800566c <triggerTaskflag>
	}
	if (GPIO_Pin == BUTTON_MENU_Pin) {
 8005fa0:	88fb      	ldrh	r3, [r7, #6]
 8005fa2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005fa6:	d101      	bne.n	8005fac <HAL_GPIO_EXTI_Callback+0x3c>
		// Button Menu handler
		buttonMENU_handler();
 8005fa8:	f7fd fdfc 	bl	8003ba4 <buttonMENU_handler>
	}

	if (GPIO_Pin == BUTTON_OK_Pin) {
 8005fac:	88fb      	ldrh	r3, [r7, #6]
 8005fae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fb2:	d101      	bne.n	8005fb8 <HAL_GPIO_EXTI_Callback+0x48>
		// Button OK handler
		buttonOK_handler();
 8005fb4:	f7fd fe6c 	bl	8003c90 <buttonOK_handler>
	}

	if (GPIO_Pin == BUTTON_UP_Pin) {
 8005fb8:	88fb      	ldrh	r3, [r7, #6]
 8005fba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005fbe:	d101      	bne.n	8005fc4 <HAL_GPIO_EXTI_Callback+0x54>
		// Button UP handler
		buttonUP_handler();
 8005fc0:	f7fd ff78 	bl	8003eb4 <buttonUP_handler>
	}

	if (GPIO_Pin == BUTTON_DOWN_Pin) {
 8005fc4:	88fb      	ldrh	r3, [r7, #6]
 8005fc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fca:	d101      	bne.n	8005fd0 <HAL_GPIO_EXTI_Callback+0x60>
		// Button DOWN handler
		buttonDOWN_handler();
 8005fcc:	f7fd fefa 	bl	8003dc4 <buttonDOWN_handler>
	}

	if (GPIO_Pin == LIMIT_SWITCH_MAX_Pin) {
 8005fd0:	88fb      	ldrh	r3, [r7, #6]
 8005fd2:	2b20      	cmp	r3, #32
 8005fd4:	d101      	bne.n	8005fda <HAL_GPIO_EXTI_Callback+0x6a>
		// Button Limit MAX handler
		SW_LIMIT_MAX_handler();
 8005fd6:	f7fd ffdd 	bl	8003f94 <SW_LIMIT_MAX_handler>
	}

	if (GPIO_Pin == LIMIT_SWITCH_MIN_Pin) {
 8005fda:	88fb      	ldrh	r3, [r7, #6]
 8005fdc:	2b04      	cmp	r3, #4
 8005fde:	d101      	bne.n	8005fe4 <HAL_GPIO_EXTI_Callback+0x74>
		// Button Limit MIN handler
		SW_LIMIT_MIN_handler();
 8005fe0:	f7fd ffe8 	bl	8003fb4 <SW_LIMIT_MIN_handler>
	}
}
 8005fe4:	bf00      	nop
 8005fe6:	3708      	adds	r7, #8
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	bd80      	pop	{r7, pc}
 8005fec:	20000478 	.word	0x20000478

08005ff0 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b082      	sub	sp, #8
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == hadc1.Instance)	{
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681a      	ldr	r2, [r3, #0]
 8005ffc:	4b0d      	ldr	r3, [pc, #52]	; (8006034 <HAL_ADC_ConvCpltCallback+0x44>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	429a      	cmp	r2, r3
 8006002:	d112      	bne.n	800602a <HAL_ADC_ConvCpltCallback+0x3a>
		tmpadc += HAL_ADC_GetValue(hadc);
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f002 f81b 	bl	8008040 <HAL_ADC_GetValue>
 800600a:	4602      	mov	r2, r0
 800600c:	4b0a      	ldr	r3, [pc, #40]	; (8006038 <HAL_ADC_ConvCpltCallback+0x48>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4413      	add	r3, r2
 8006012:	4a09      	ldr	r2, [pc, #36]	; (8006038 <HAL_ADC_ConvCpltCallback+0x48>)
 8006014:	6013      	str	r3, [r2, #0]
		adccount++;
 8006016:	4b09      	ldr	r3, [pc, #36]	; (800603c <HAL_ADC_ConvCpltCallback+0x4c>)
 8006018:	881b      	ldrh	r3, [r3, #0]
 800601a:	b29b      	uxth	r3, r3
 800601c:	3301      	adds	r3, #1
 800601e:	b29a      	uxth	r2, r3
 8006020:	4b06      	ldr	r3, [pc, #24]	; (800603c <HAL_ADC_ConvCpltCallback+0x4c>)
 8006022:	801a      	strh	r2, [r3, #0]
		currentConvert(&tmpadc);
 8006024:	4804      	ldr	r0, [pc, #16]	; (8006038 <HAL_ADC_ConvCpltCallback+0x48>)
 8006026:	f000 f9f1 	bl	800640c <currentConvert>
	}
}
 800602a:	bf00      	nop
 800602c:	3708      	adds	r7, #8
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}
 8006032:	bf00      	nop
 8006034:	200016f0 	.word	0x200016f0
 8006038:	20002a10 	.word	0x20002a10
 800603c:	20002a14 	.word	0x20002a14

08006040 <setStationMode>:
void setStationMode(Station_Mode_t mode)
{
 8006040:	b480      	push	{r7}
 8006042:	b083      	sub	sp, #12
 8006044:	af00      	add	r7, sp, #0
 8006046:	4603      	mov	r3, r0
 8006048:	71fb      	strb	r3, [r7, #7]
	myStation.StMODE = mode;
 800604a:	4a04      	ldr	r2, [pc, #16]	; (800605c <setStationMode+0x1c>)
 800604c:	79fb      	ldrb	r3, [r7, #7]
 800604e:	7013      	strb	r3, [r2, #0]
}
 8006050:	bf00      	nop
 8006052:	370c      	adds	r7, #12
 8006054:	46bd      	mov	sp, r7
 8006056:	bc80      	pop	{r7}
 8006058:	4770      	bx	lr
 800605a:	bf00      	nop
 800605c:	20000478 	.word	0x20000478

08006060 <checkStationMode>:

Station_Mode_t checkStationMode()
{
 8006060:	b480      	push	{r7}
 8006062:	af00      	add	r7, sp, #0
	return myStation.StMODE;
 8006064:	4b02      	ldr	r3, [pc, #8]	; (8006070 <checkStationMode+0x10>)
 8006066:	781b      	ldrb	r3, [r3, #0]
}
 8006068:	4618      	mov	r0, r3
 800606a:	46bd      	mov	sp, r7
 800606c:	bc80      	pop	{r7}
 800606e:	4770      	bx	lr
 8006070:	20000478 	.word	0x20000478

08006074 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006074:	b5b0      	push	{r4, r5, r7, lr}
 8006076:	f5ad 7d08 	sub.w	sp, sp, #544	; 0x220
 800607a:	af1a      	add	r7, sp, #104	; 0x68
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800607c:	f001 fdcc 	bl	8007c18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006080:	f000 f968 	bl	8006354 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006084:	f7ff fd6e 	bl	8005b64 <MX_GPIO_Init>
  MX_DMA_Init();
 8006088:	f7ff fcec 	bl	8005a64 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800608c:	f000 fbf4 	bl	8006878 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8006090:	f000 fc1c 	bl	80068cc <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8006094:	f7ff fe36 	bl	8005d04 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8006098:	f000 fc42 	bl	8006920 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 800609c:	f000 fb7e 	bl	800679c <MX_TIM1_Init>
  MX_ADC1_Init();
 80060a0:	f7ff fc32 	bl	8005908 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  SSnode_list =list_create();
 80060a4:	f7ff fecc 	bl	8005e40 <list_create>
 80060a8:	4603      	mov	r3, r0
 80060aa:	4a9b      	ldr	r2, [pc, #620]	; (8006318 <main+0x2a4>)
 80060ac:	6013      	str	r3, [r2, #0]
  /* For Emulator only */
  uint8_t Sensorcalibvalue1 [101];
  for (uint8_t i =0 ; i < 100 ; i++)	{
 80060ae:	2300      	movs	r3, #0
 80060b0:	f887 31b7 	strb.w	r3, [r7, #439]	; 0x1b7
 80060b4:	e01a      	b.n	80060ec <main+0x78>
	  Sensorcalibvalue1[i] = rand() % 255 ;
 80060b6:	f006 fc2b 	bl	800c910 <rand>
 80060ba:	4602      	mov	r2, r0
 80060bc:	4b97      	ldr	r3, [pc, #604]	; (800631c <main+0x2a8>)
 80060be:	fb83 1302 	smull	r1, r3, r3, r2
 80060c2:	4413      	add	r3, r2
 80060c4:	11d9      	asrs	r1, r3, #7
 80060c6:	17d3      	asrs	r3, r2, #31
 80060c8:	1ac9      	subs	r1, r1, r3
 80060ca:	460b      	mov	r3, r1
 80060cc:	021b      	lsls	r3, r3, #8
 80060ce:	1a5b      	subs	r3, r3, r1
 80060d0:	1ad1      	subs	r1, r2, r3
 80060d2:	f897 31b7 	ldrb.w	r3, [r7, #439]	; 0x1b7
 80060d6:	b2ca      	uxtb	r2, r1
 80060d8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80060dc:	443b      	add	r3, r7
 80060de:	f803 2c68 	strb.w	r2, [r3, #-104]
  for (uint8_t i =0 ; i < 100 ; i++)	{
 80060e2:	f897 31b7 	ldrb.w	r3, [r7, #439]	; 0x1b7
 80060e6:	3301      	adds	r3, #1
 80060e8:	f887 31b7 	strb.w	r3, [r7, #439]	; 0x1b7
 80060ec:	f897 31b7 	ldrb.w	r3, [r7, #439]	; 0x1b7
 80060f0:	2b63      	cmp	r3, #99	; 0x63
 80060f2:	d9e0      	bls.n	80060b6 <main+0x42>
  }
  SensorNode_t firstSensornode = {0x51, 0, V_p, 10, SENSOR_ACTIVE , 1 };
 80060f4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80060f8:	2272      	movs	r2, #114	; 0x72
 80060fa:	2100      	movs	r1, #0
 80060fc:	4618      	mov	r0, r3
 80060fe:	f006 f8b1 	bl	800c264 <memset>
 8006102:	2351      	movs	r3, #81	; 0x51
 8006104:	f887 30dc 	strb.w	r3, [r7, #220]	; 0xdc
 8006108:	2301      	movs	r3, #1
 800610a:	f887 30e0 	strb.w	r3, [r7, #224]	; 0xe0
 800610e:	230a      	movs	r3, #10
 8006110:	f8a7 30e2 	strh.w	r3, [r7, #226]	; 0xe2
 8006114:	2301      	movs	r3, #1
 8006116:	f887 30e4 	strb.w	r3, [r7, #228]	; 0xe4
 800611a:	2301      	movs	r3, #1
 800611c:	f887 30e5 	strb.w	r3, [r7, #229]	; 0xe5
  memcpy(firstSensornode.dataCalibBuffer, Sensorcalibvalue1, 100);
 8006120:	f507 71a8 	add.w	r1, r7, #336	; 0x150
 8006124:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8006128:	330c      	adds	r3, #12
 800612a:	2264      	movs	r2, #100	; 0x64
 800612c:	4618      	mov	r0, r3
 800612e:	f006 f88b 	bl	800c248 <memcpy>
  list_append(SSnode_list, firstSensornode);
 8006132:	4b79      	ldr	r3, [pc, #484]	; (8006318 <main+0x2a4>)
 8006134:	681c      	ldr	r4, [r3, #0]
 8006136:	4668      	mov	r0, sp
 8006138:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800613c:	2266      	movs	r2, #102	; 0x66
 800613e:	4619      	mov	r1, r3
 8006140:	f006 f882 	bl	800c248 <memcpy>
 8006144:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8006148:	cb0e      	ldmia	r3, {r1, r2, r3}
 800614a:	4620      	mov	r0, r4
 800614c:	f7ff feae 	bl	8005eac <list_append>

  uint8_t Sensorcalibvalue2 [101];
  for (uint8_t i =0 ; i < 100 ; i++)	{
 8006150:	2300      	movs	r3, #0
 8006152:	f887 31b6 	strb.w	r3, [r7, #438]	; 0x1b6
 8006156:	e01a      	b.n	800618e <main+0x11a>
	  Sensorcalibvalue2[i] = rand() % 255 ;
 8006158:	f006 fbda 	bl	800c910 <rand>
 800615c:	4602      	mov	r2, r0
 800615e:	4b6f      	ldr	r3, [pc, #444]	; (800631c <main+0x2a8>)
 8006160:	fb83 1302 	smull	r1, r3, r3, r2
 8006164:	4413      	add	r3, r2
 8006166:	11d9      	asrs	r1, r3, #7
 8006168:	17d3      	asrs	r3, r2, #31
 800616a:	1ac9      	subs	r1, r1, r3
 800616c:	460b      	mov	r3, r1
 800616e:	021b      	lsls	r3, r3, #8
 8006170:	1a5b      	subs	r3, r3, r1
 8006172:	1ad1      	subs	r1, r2, r3
 8006174:	f897 31b6 	ldrb.w	r3, [r7, #438]	; 0x1b6
 8006178:	b2c9      	uxtb	r1, r1
 800617a:	f507 72dc 	add.w	r2, r7, #440	; 0x1b8
 800617e:	f5a2 72a2 	sub.w	r2, r2, #324	; 0x144
 8006182:	54d1      	strb	r1, [r2, r3]
  for (uint8_t i =0 ; i < 100 ; i++)	{
 8006184:	f897 31b6 	ldrb.w	r3, [r7, #438]	; 0x1b6
 8006188:	3301      	adds	r3, #1
 800618a:	f887 31b6 	strb.w	r3, [r7, #438]	; 0x1b6
 800618e:	f897 31b6 	ldrb.w	r3, [r7, #438]	; 0x1b6
 8006192:	2b63      	cmp	r3, #99	; 0x63
 8006194:	d9e0      	bls.n	8006158 <main+0xe4>
  }
  SensorNode_t secondSensornode = {0x52, 0, V_p, 10, SENSOR_ACTIVE , 1};
 8006196:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800619a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800619e:	4618      	mov	r0, r3
 80061a0:	2372      	movs	r3, #114	; 0x72
 80061a2:	461a      	mov	r2, r3
 80061a4:	2100      	movs	r1, #0
 80061a6:	f006 f85d 	bl	800c264 <memset>
 80061aa:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 80061ae:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80061b2:	2252      	movs	r2, #82	; 0x52
 80061b4:	701a      	strb	r2, [r3, #0]
 80061b6:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 80061ba:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80061be:	2201      	movs	r2, #1
 80061c0:	711a      	strb	r2, [r3, #4]
 80061c2:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 80061c6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80061ca:	220a      	movs	r2, #10
 80061cc:	80da      	strh	r2, [r3, #6]
 80061ce:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 80061d2:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80061d6:	2201      	movs	r2, #1
 80061d8:	721a      	strb	r2, [r3, #8]
 80061da:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 80061de:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80061e2:	2201      	movs	r2, #1
 80061e4:	725a      	strb	r2, [r3, #9]
  memcpy(secondSensornode.dataCalibBuffer, Sensorcalibvalue2, 100);
 80061e6:	f107 0174 	add.w	r1, r7, #116	; 0x74
 80061ea:	463b      	mov	r3, r7
 80061ec:	330c      	adds	r3, #12
 80061ee:	2264      	movs	r2, #100	; 0x64
 80061f0:	4618      	mov	r0, r3
 80061f2:	f006 f829 	bl	800c248 <memcpy>
  list_append(SSnode_list, secondSensornode);
 80061f6:	4b48      	ldr	r3, [pc, #288]	; (8006318 <main+0x2a4>)
 80061f8:	681d      	ldr	r5, [r3, #0]
 80061fa:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 80061fe:	f5a3 74dc 	sub.w	r4, r3, #440	; 0x1b8
 8006202:	4668      	mov	r0, sp
 8006204:	f104 030c 	add.w	r3, r4, #12
 8006208:	2266      	movs	r2, #102	; 0x66
 800620a:	4619      	mov	r1, r3
 800620c:	f006 f81c 	bl	800c248 <memcpy>
 8006210:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8006214:	4628      	mov	r0, r5
 8006216:	f7ff fe49 	bl	8005eac <list_append>
  /**********************************************************************/

  myStation.ssNode_list = SSnode_list;
 800621a:	4b3f      	ldr	r3, [pc, #252]	; (8006318 <main+0x2a4>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4a40      	ldr	r2, [pc, #256]	; (8006320 <main+0x2ac>)
 8006220:	60d3      	str	r3, [r2, #12]

  // Get station ID from flash
  myStation.stID = (uint8_t)Flash_Read_NUM(FLASH_PAGE_127);
 8006222:	4840      	ldr	r0, [pc, #256]	; (8006324 <main+0x2b0>)
 8006224:	f7ff fc87 	bl	8005b36 <Flash_Read_NUM>
 8006228:	4603      	mov	r3, r0
 800622a:	4618      	mov	r0, r3
 800622c:	f7f9 ffa0 	bl	8000170 <__aeabi_f2uiz>
 8006230:	4603      	mov	r3, r0
 8006232:	b2da      	uxtb	r2, r3
 8006234:	4b3a      	ldr	r3, [pc, #232]	; (8006320 <main+0x2ac>)
 8006236:	705a      	strb	r2, [r3, #1]

	mySIM.mqttServer.host = "tcp://broker.hivemq.com";
 8006238:	4b3b      	ldr	r3, [pc, #236]	; (8006328 <main+0x2b4>)
 800623a:	4a3c      	ldr	r2, [pc, #240]	; (800632c <main+0x2b8>)
 800623c:	60da      	str	r2, [r3, #12]
	mySIM.mqttServer.port = 1883;
 800623e:	4b3a      	ldr	r3, [pc, #232]	; (8006328 <main+0x2b4>)
 8006240:	f240 725b 	movw	r2, #1883	; 0x75b
 8006244:	831a      	strh	r2, [r3, #24]
	mySIM.mqttServer.willtopic = "unnormal_disconnect";
 8006246:	4b38      	ldr	r3, [pc, #224]	; (8006328 <main+0x2b4>)
 8006248:	4a39      	ldr	r2, [pc, #228]	; (8006330 <main+0x2bc>)
 800624a:	611a      	str	r2, [r3, #16]
	mySIM.mqttServer.willmsg = (uint8_t*)malloc(sizeof(myStation.stID));
 800624c:	2001      	movs	r0, #1
 800624e:	f005 ffdb 	bl	800c208 <malloc>
 8006252:	4603      	mov	r3, r0
 8006254:	461a      	mov	r2, r3
 8006256:	4b34      	ldr	r3, [pc, #208]	; (8006328 <main+0x2b4>)
 8006258:	615a      	str	r2, [r3, #20]
	sprintf((char*)mySIM.mqttServer.willmsg,"%d",myStation.stID);
 800625a:	4b33      	ldr	r3, [pc, #204]	; (8006328 <main+0x2b4>)
 800625c:	695b      	ldr	r3, [r3, #20]
 800625e:	4a30      	ldr	r2, [pc, #192]	; (8006320 <main+0x2ac>)
 8006260:	7852      	ldrb	r2, [r2, #1]
 8006262:	4934      	ldr	r1, [pc, #208]	; (8006334 <main+0x2c0>)
 8006264:	4618      	mov	r0, r3
 8006266:	f006 fba1 	bl	800c9ac <siprintf>
	mySIM.mqttClient.keepAliveInterval = 10;
 800626a:	4b2f      	ldr	r3, [pc, #188]	; (8006328 <main+0x2b4>)
 800626c:	220a      	movs	r2, #10
 800626e:	851a      	strh	r2, [r3, #40]	; 0x28
	mySIM.mqttClient.clientID = (char*)malloc(sizeof(myStation.stID));
 8006270:	2001      	movs	r0, #1
 8006272:	f005 ffc9 	bl	800c208 <malloc>
 8006276:	4603      	mov	r3, r0
 8006278:	461a      	mov	r2, r3
 800627a:	4b2b      	ldr	r3, [pc, #172]	; (8006328 <main+0x2b4>)
 800627c:	625a      	str	r2, [r3, #36]	; 0x24
	sprintf((char*)mySIM.mqttClient.clientID,"%d",myStation.stID);
 800627e:	4b2a      	ldr	r3, [pc, #168]	; (8006328 <main+0x2b4>)
 8006280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006282:	4a27      	ldr	r2, [pc, #156]	; (8006320 <main+0x2ac>)
 8006284:	7852      	ldrb	r2, [r2, #1]
 8006286:	492b      	ldr	r1, [pc, #172]	; (8006334 <main+0x2c0>)
 8006288:	4618      	mov	r0, r3
 800628a:	f006 fb8f 	bl	800c9ac <siprintf>
	mySIM.mqttReceive.qos =1;
 800628e:	4b26      	ldr	r3, [pc, #152]	; (8006328 <main+0x2b4>)
 8006290:	2201      	movs	r2, #1
 8006292:	631a      	str	r2, [r3, #48]	; 0x30
	mySIM.mqttServer.connect=0;
 8006294:	4b24      	ldr	r3, [pc, #144]	; (8006328 <main+0x2b4>)
 8006296:	2200      	movs	r2, #0
 8006298:	769a      	strb	r2, [r3, #26]

	mySIM.sms = mySMS;
 800629a:	4b23      	ldr	r3, [pc, #140]	; (8006328 <main+0x2b4>)
 800629c:	4a26      	ldr	r2, [pc, #152]	; (8006338 <main+0x2c4>)
 800629e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80062a2:	4611      	mov	r1, r2
 80062a4:	f44f 6209 	mov.w	r2, #2192	; 0x890
 80062a8:	4618      	mov	r0, r3
 80062aa:	f005 ffcd 	bl	800c248 <memcpy>

	// ADC
	HAL_ADC_Start_IT(&hadc1);
 80062ae:	4823      	ldr	r0, [pc, #140]	; (800633c <main+0x2c8>)
 80062b0:	f001 fe10 	bl	8007ed4 <HAL_ADC_Start_IT>


	initTask(&myStation);
 80062b4:	481a      	ldr	r0, [pc, #104]	; (8006320 <main+0x2ac>)
 80062b6:	f7ff f8b7 	bl	8005428 <initTask>

	// MBA and Step motor
	initApp_MBA_stepmor();
 80062ba:	f7fa fa6f 	bl	800079c <initApp_MBA_stepmor>
	// Lora
//	initLora(&huart2, &hdma_usart2_rx);
	initmyLora();
 80062be:	f7fe f975 	bl	80045ac <initmyLora>
	// GPS
	myGPS.getFlag = 0;
 80062c2:	4a1f      	ldr	r2, [pc, #124]	; (8006340 <main+0x2cc>)
 80062c4:	79d3      	ldrb	r3, [r2, #7]
 80062c6:	f36f 0300 	bfc	r3, #0, #1
 80062ca:	71d3      	strb	r3, [r2, #7]
	initGPS(&myStation, &myRTC);
 80062cc:	491d      	ldr	r1, [pc, #116]	; (8006344 <main+0x2d0>)
 80062ce:	4814      	ldr	r0, [pc, #80]	; (8006320 <main+0x2ac>)
 80062d0:	f7fa fe12 	bl	8000ef8 <initGPS>

	initSIM();
 80062d4:	f7fc f84e 	bl	8002374 <initSIM>

	// Init Serial log
//	init_Serial_log(&huart2);

	// Init MQTT app
	initApp_MQTT();
 80062d8:	f7fa fb1a 	bl	8000910 <initApp_MQTT>

//	initApp_MCU(&mySIM);

	initApp_SMS(&mySIM.sms);
 80062dc:	481a      	ldr	r0, [pc, #104]	; (8006348 <main+0x2d4>)
 80062de:	f7fa fd03 	bl	8000ce8 <initApp_SMS>

	init_App_Serial();
 80062e2:	f7fa fde7 	bl	8000eb4 <init_App_Serial>

	// Init RTC module (DS3231)
	DS3231_Init(&hi2c1);
 80062e6:	4819      	ldr	r0, [pc, #100]	; (800634c <main+0x2d8>)
 80062e8:	f7fd fe74 	bl	8003fd4 <DS3231_Init>



	initButton(&myDisplayMode);
 80062ec:	4818      	ldr	r0, [pc, #96]	; (8006350 <main+0x2dc>)
 80062ee:	f7fd fb95 	bl	8003a1c <initButton>


	initApp_Display(&myDisplayMode, &myRTC);
 80062f2:	4914      	ldr	r1, [pc, #80]	; (8006344 <main+0x2d0>)
 80062f4:	4816      	ldr	r0, [pc, #88]	; (8006350 <main+0x2dc>)
 80062f6:	f7fa f917 	bl	8000528 <initApp_Display>
//	  Serial_log_testOperation();
//	  SIM_checkOperation();
//	  MQTT_testReceive();
//	  LCD_GotoXY(1, 1);
//	  LCD_Print("hello");
	  processApp_MCU();
 80062fa:	f7fa fa97 	bl	800082c <processApp_MCU>
	  processApp_MQTT();
 80062fe:	f7fa fba5 	bl	8000a4c <processApp_MQTT>
	  processingApp_display();
 8006302:	f7fa f983 	bl	800060c <processingApp_display>
	  processingApp_MBA_stepmor();
 8006306:	f7fa fa4f 	bl	80007a8 <processingApp_MBA_stepmor>

	  processApp_SMS();
 800630a:	f7fa fd5d 	bl	8000dc8 <processApp_SMS>
//	  DS3231_GetTime(&myRTC);

//	  testSMS();
//	  myStation.getGPStimeflag = 1;
//	  HAL_GPIO_TogglePin(MBA_CONTACTOR_GPIO_Port, MBA_CONTACTOR_Pin);
	  HAL_Delay(200);
 800630e:	20c8      	movs	r0, #200	; 0xc8
 8006310:	f001 fce4 	bl	8007cdc <HAL_Delay>
	  processApp_MCU();
 8006314:	e7f1      	b.n	80062fa <main+0x286>
 8006316:	bf00      	nop
 8006318:	200029f8 	.word	0x200029f8
 800631c:	80808081 	.word	0x80808081
 8006320:	20000478 	.word	0x20000478
 8006324:	0801fc00 	.word	0x0801fc00
 8006328:	20001774 	.word	0x20001774
 800632c:	0800f318 	.word	0x0800f318
 8006330:	0800f330 	.word	0x0800f330
 8006334:	0800f344 	.word	0x0800f344
 8006338:	20002168 	.word	0x20002168
 800633c:	200016f0 	.word	0x200016f0
 8006340:	20002a04 	.word	0x20002a04
 8006344:	200029fc 	.word	0x200029fc
 8006348:	200018d8 	.word	0x200018d8
 800634c:	20001720 	.word	0x20001720
 8006350:	20002a0c 	.word	0x20002a0c

08006354 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b094      	sub	sp, #80	; 0x50
 8006358:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800635a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800635e:	2228      	movs	r2, #40	; 0x28
 8006360:	2100      	movs	r1, #0
 8006362:	4618      	mov	r0, r3
 8006364:	f005 ff7e 	bl	800c264 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006368:	f107 0314 	add.w	r3, r7, #20
 800636c:	2200      	movs	r2, #0
 800636e:	601a      	str	r2, [r3, #0]
 8006370:	605a      	str	r2, [r3, #4]
 8006372:	609a      	str	r2, [r3, #8]
 8006374:	60da      	str	r2, [r3, #12]
 8006376:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006378:	1d3b      	adds	r3, r7, #4
 800637a:	2200      	movs	r2, #0
 800637c:	601a      	str	r2, [r3, #0]
 800637e:	605a      	str	r2, [r3, #4]
 8006380:	609a      	str	r2, [r3, #8]
 8006382:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8006384:	2301      	movs	r3, #1
 8006386:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8006388:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800638c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800638e:	2300      	movs	r3, #0
 8006390:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006392:	2301      	movs	r3, #1
 8006394:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006396:	2302      	movs	r3, #2
 8006398:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800639a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800639e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80063a0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80063a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80063a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80063aa:	4618      	mov	r0, r3
 80063ac:	f003 fe80 	bl	800a0b0 <HAL_RCC_OscConfig>
 80063b0:	4603      	mov	r3, r0
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d001      	beq.n	80063ba <SystemClock_Config+0x66>
  {
    Error_Handler();
 80063b6:	f000 f85b 	bl	8006470 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80063ba:	230f      	movs	r3, #15
 80063bc:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80063be:	2302      	movs	r3, #2
 80063c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80063c2:	2300      	movs	r3, #0
 80063c4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80063c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80063ca:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80063cc:	2300      	movs	r3, #0
 80063ce:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80063d0:	f107 0314 	add.w	r3, r7, #20
 80063d4:	2102      	movs	r1, #2
 80063d6:	4618      	mov	r0, r3
 80063d8:	f004 f8ec 	bl	800a5b4 <HAL_RCC_ClockConfig>
 80063dc:	4603      	mov	r3, r0
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d001      	beq.n	80063e6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80063e2:	f000 f845 	bl	8006470 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80063e6:	2302      	movs	r3, #2
 80063e8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80063ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063ee:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80063f0:	1d3b      	adds	r3, r7, #4
 80063f2:	4618      	mov	r0, r3
 80063f4:	f004 fa6c 	bl	800a8d0 <HAL_RCCEx_PeriphCLKConfig>
 80063f8:	4603      	mov	r3, r0
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d001      	beq.n	8006402 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80063fe:	f000 f837 	bl	8006470 <Error_Handler>
  }
}
 8006402:	bf00      	nop
 8006404:	3750      	adds	r7, #80	; 0x50
 8006406:	46bd      	mov	sp, r7
 8006408:	bd80      	pop	{r7, pc}
	...

0800640c <currentConvert>:

/* USER CODE BEGIN 4 */

static void currentConvert(uint32_t volatile *adcval)
{
 800640c:	b480      	push	{r7}
 800640e:	b083      	sub	sp, #12
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
	if (adccount == 1000)	{
 8006414:	4b12      	ldr	r3, [pc, #72]	; (8006460 <currentConvert+0x54>)
 8006416:	881b      	ldrh	r3, [r3, #0]
 8006418:	b29b      	uxth	r3, r3
 800641a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800641e:	d119      	bne.n	8006454 <currentConvert+0x48>
		myStation.stCurrent = (uint16_t)( ( ( (*adcval)*3/4095) + 50)/6);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681a      	ldr	r2, [r3, #0]
 8006424:	4613      	mov	r3, r2
 8006426:	005b      	lsls	r3, r3, #1
 8006428:	441a      	add	r2, r3
 800642a:	4b0e      	ldr	r3, [pc, #56]	; (8006464 <currentConvert+0x58>)
 800642c:	fba3 1302 	umull	r1, r3, r3, r2
 8006430:	1ad2      	subs	r2, r2, r3
 8006432:	0852      	lsrs	r2, r2, #1
 8006434:	4413      	add	r3, r2
 8006436:	0adb      	lsrs	r3, r3, #11
 8006438:	3332      	adds	r3, #50	; 0x32
 800643a:	4a0b      	ldr	r2, [pc, #44]	; (8006468 <currentConvert+0x5c>)
 800643c:	fba2 2303 	umull	r2, r3, r2, r3
 8006440:	089b      	lsrs	r3, r3, #2
 8006442:	b29a      	uxth	r2, r3
 8006444:	4b09      	ldr	r3, [pc, #36]	; (800646c <currentConvert+0x60>)
 8006446:	805a      	strh	r2, [r3, #2]
		*adcval = 0;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2200      	movs	r2, #0
 800644c:	601a      	str	r2, [r3, #0]
		adccount = 0;
 800644e:	4b04      	ldr	r3, [pc, #16]	; (8006460 <currentConvert+0x54>)
 8006450:	2200      	movs	r2, #0
 8006452:	801a      	strh	r2, [r3, #0]
	}
}
 8006454:	bf00      	nop
 8006456:	370c      	adds	r7, #12
 8006458:	46bd      	mov	sp, r7
 800645a:	bc80      	pop	{r7}
 800645c:	4770      	bx	lr
 800645e:	bf00      	nop
 8006460:	20002a14 	.word	0x20002a14
 8006464:	00100101 	.word	0x00100101
 8006468:	aaaaaaab 	.word	0xaaaaaaab
 800646c:	20000478 	.word	0x20000478

08006470 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006470:	b480      	push	{r7}
 8006472:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006474:	b672      	cpsid	i
}
 8006476:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006478:	e7fe      	b.n	8006478 <Error_Handler+0x8>
	...

0800647c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800647c:	b480      	push	{r7}
 800647e:	b085      	sub	sp, #20
 8006480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8006482:	4b15      	ldr	r3, [pc, #84]	; (80064d8 <HAL_MspInit+0x5c>)
 8006484:	699b      	ldr	r3, [r3, #24]
 8006486:	4a14      	ldr	r2, [pc, #80]	; (80064d8 <HAL_MspInit+0x5c>)
 8006488:	f043 0301 	orr.w	r3, r3, #1
 800648c:	6193      	str	r3, [r2, #24]
 800648e:	4b12      	ldr	r3, [pc, #72]	; (80064d8 <HAL_MspInit+0x5c>)
 8006490:	699b      	ldr	r3, [r3, #24]
 8006492:	f003 0301 	and.w	r3, r3, #1
 8006496:	60bb      	str	r3, [r7, #8]
 8006498:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800649a:	4b0f      	ldr	r3, [pc, #60]	; (80064d8 <HAL_MspInit+0x5c>)
 800649c:	69db      	ldr	r3, [r3, #28]
 800649e:	4a0e      	ldr	r2, [pc, #56]	; (80064d8 <HAL_MspInit+0x5c>)
 80064a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064a4:	61d3      	str	r3, [r2, #28]
 80064a6:	4b0c      	ldr	r3, [pc, #48]	; (80064d8 <HAL_MspInit+0x5c>)
 80064a8:	69db      	ldr	r3, [r3, #28]
 80064aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064ae:	607b      	str	r3, [r7, #4]
 80064b0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80064b2:	4b0a      	ldr	r3, [pc, #40]	; (80064dc <HAL_MspInit+0x60>)
 80064b4:	685b      	ldr	r3, [r3, #4]
 80064b6:	60fb      	str	r3, [r7, #12]
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80064be:	60fb      	str	r3, [r7, #12]
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80064c6:	60fb      	str	r3, [r7, #12]
 80064c8:	4a04      	ldr	r2, [pc, #16]	; (80064dc <HAL_MspInit+0x60>)
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80064ce:	bf00      	nop
 80064d0:	3714      	adds	r7, #20
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bc80      	pop	{r7}
 80064d6:	4770      	bx	lr
 80064d8:	40021000 	.word	0x40021000
 80064dc:	40010000 	.word	0x40010000

080064e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80064e0:	b480      	push	{r7}
 80064e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80064e4:	e7fe      	b.n	80064e4 <NMI_Handler+0x4>

080064e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80064e6:	b480      	push	{r7}
 80064e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80064ea:	e7fe      	b.n	80064ea <HardFault_Handler+0x4>

080064ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80064ec:	b480      	push	{r7}
 80064ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80064f0:	e7fe      	b.n	80064f0 <MemManage_Handler+0x4>

080064f2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80064f2:	b480      	push	{r7}
 80064f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80064f6:	e7fe      	b.n	80064f6 <BusFault_Handler+0x4>

080064f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80064f8:	b480      	push	{r7}
 80064fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80064fc:	e7fe      	b.n	80064fc <UsageFault_Handler+0x4>

080064fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80064fe:	b480      	push	{r7}
 8006500:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006502:	bf00      	nop
 8006504:	46bd      	mov	sp, r7
 8006506:	bc80      	pop	{r7}
 8006508:	4770      	bx	lr

0800650a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800650a:	b480      	push	{r7}
 800650c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800650e:	bf00      	nop
 8006510:	46bd      	mov	sp, r7
 8006512:	bc80      	pop	{r7}
 8006514:	4770      	bx	lr

08006516 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006516:	b480      	push	{r7}
 8006518:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800651a:	bf00      	nop
 800651c:	46bd      	mov	sp, r7
 800651e:	bc80      	pop	{r7}
 8006520:	4770      	bx	lr

08006522 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006522:	b580      	push	{r7, lr}
 8006524:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006526:	f001 fbbd 	bl	8007ca4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800652a:	bf00      	nop
 800652c:	bd80      	pop	{r7, pc}

0800652e <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800652e:	b580      	push	{r7, lr}
 8006530:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RTC_ALARM_TRIGGER_Pin);
 8006532:	2001      	movs	r0, #1
 8006534:	f002 fd70 	bl	8009018 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8006538:	bf00      	nop
 800653a:	bd80      	pop	{r7, pc}

0800653c <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LIMIT_SWITCH_MIN_Pin);
 8006540:	2004      	movs	r0, #4
 8006542:	f002 fd69 	bl	8009018 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8006546:	bf00      	nop
 8006548:	bd80      	pop	{r7, pc}
	...

0800654c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8006550:	4802      	ldr	r0, [pc, #8]	; (800655c <DMA1_Channel3_IRQHandler+0x10>)
 8006552:	f002 fa61 	bl	8008a18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8006556:	bf00      	nop
 8006558:	bd80      	pop	{r7, pc}
 800655a:	bf00      	nop
 800655c:	20002bc8 	.word	0x20002bc8

08006560 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8006564:	4802      	ldr	r0, [pc, #8]	; (8006570 <DMA1_Channel5_IRQHandler+0x10>)
 8006566:	f002 fa57 	bl	8008a18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800656a:	bf00      	nop
 800656c:	bd80      	pop	{r7, pc}
 800656e:	bf00      	nop
 8006570:	20002b40 	.word	0x20002b40

08006574 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8006578:	4802      	ldr	r0, [pc, #8]	; (8006584 <DMA1_Channel6_IRQHandler+0x10>)
 800657a:	f002 fa4d 	bl	8008a18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800657e:	bf00      	nop
 8006580:	bd80      	pop	{r7, pc}
 8006582:	bf00      	nop
 8006584:	20002b84 	.word	0x20002b84

08006588 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800658c:	4802      	ldr	r0, [pc, #8]	; (8006598 <ADC1_2_IRQHandler+0x10>)
 800658e:	f001 fd63 	bl	8008058 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8006592:	bf00      	nop
 8006594:	bd80      	pop	{r7, pc}
 8006596:	bf00      	nop
 8006598:	200016f0 	.word	0x200016f0

0800659c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LIMIT_SWITCH_MAX_Pin);
 80065a0:	2020      	movs	r0, #32
 80065a2:	f002 fd39 	bl	8009018 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_DOWN_Pin);
 80065a6:	f44f 7080 	mov.w	r0, #256	; 0x100
 80065aa:	f002 fd35 	bl	8009018 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_UP_Pin);
 80065ae:	f44f 7000 	mov.w	r0, #512	; 0x200
 80065b2:	f002 fd31 	bl	8009018 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80065b6:	bf00      	nop
 80065b8:	bd80      	pop	{r7, pc}
	...

080065bc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80065c0:	4802      	ldr	r0, [pc, #8]	; (80065cc <USART1_IRQHandler+0x10>)
 80065c2:	f004 fdd7 	bl	800b174 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80065c6:	bf00      	nop
 80065c8:	bd80      	pop	{r7, pc}
 80065ca:	bf00      	nop
 80065cc:	20002a68 	.word	0x20002a68

080065d0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80065d4:	4802      	ldr	r0, [pc, #8]	; (80065e0 <USART2_IRQHandler+0x10>)
 80065d6:	f004 fdcd 	bl	800b174 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80065da:	bf00      	nop
 80065dc:	bd80      	pop	{r7, pc}
 80065de:	bf00      	nop
 80065e0:	20002ab0 	.word	0x20002ab0

080065e4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80065e8:	4802      	ldr	r0, [pc, #8]	; (80065f4 <USART3_IRQHandler+0x10>)
 80065ea:	f004 fdc3 	bl	800b174 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80065ee:	bf00      	nop
 80065f0:	bd80      	pop	{r7, pc}
 80065f2:	bf00      	nop
 80065f4:	20002af8 	.word	0x20002af8

080065f8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_MENU_Pin);
 80065fc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8006600:	f002 fd0a 	bl	8009018 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_OK_Pin);
 8006604:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8006608:	f002 fd06 	bl	8009018 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800660c:	bf00      	nop
 800660e:	bd80      	pop	{r7, pc}

08006610 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006610:	b480      	push	{r7}
 8006612:	af00      	add	r7, sp, #0
	return 1;
 8006614:	2301      	movs	r3, #1
}
 8006616:	4618      	mov	r0, r3
 8006618:	46bd      	mov	sp, r7
 800661a:	bc80      	pop	{r7}
 800661c:	4770      	bx	lr

0800661e <_kill>:

int _kill(int pid, int sig)
{
 800661e:	b580      	push	{r7, lr}
 8006620:	b082      	sub	sp, #8
 8006622:	af00      	add	r7, sp, #0
 8006624:	6078      	str	r0, [r7, #4]
 8006626:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8006628:	f005 fcb4 	bl	800bf94 <__errno>
 800662c:	4603      	mov	r3, r0
 800662e:	2216      	movs	r2, #22
 8006630:	601a      	str	r2, [r3, #0]
	return -1;
 8006632:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006636:	4618      	mov	r0, r3
 8006638:	3708      	adds	r7, #8
 800663a:	46bd      	mov	sp, r7
 800663c:	bd80      	pop	{r7, pc}

0800663e <_exit>:

void _exit (int status)
{
 800663e:	b580      	push	{r7, lr}
 8006640:	b082      	sub	sp, #8
 8006642:	af00      	add	r7, sp, #0
 8006644:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8006646:	f04f 31ff 	mov.w	r1, #4294967295
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	f7ff ffe7 	bl	800661e <_kill>
	while (1) {}		/* Make sure we hang here */
 8006650:	e7fe      	b.n	8006650 <_exit+0x12>

08006652 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006652:	b580      	push	{r7, lr}
 8006654:	b086      	sub	sp, #24
 8006656:	af00      	add	r7, sp, #0
 8006658:	60f8      	str	r0, [r7, #12]
 800665a:	60b9      	str	r1, [r7, #8]
 800665c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800665e:	2300      	movs	r3, #0
 8006660:	617b      	str	r3, [r7, #20]
 8006662:	e00a      	b.n	800667a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8006664:	f3af 8000 	nop.w
 8006668:	4601      	mov	r1, r0
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	1c5a      	adds	r2, r3, #1
 800666e:	60ba      	str	r2, [r7, #8]
 8006670:	b2ca      	uxtb	r2, r1
 8006672:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006674:	697b      	ldr	r3, [r7, #20]
 8006676:	3301      	adds	r3, #1
 8006678:	617b      	str	r3, [r7, #20]
 800667a:	697a      	ldr	r2, [r7, #20]
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	429a      	cmp	r2, r3
 8006680:	dbf0      	blt.n	8006664 <_read+0x12>
	}

return len;
 8006682:	687b      	ldr	r3, [r7, #4]
}
 8006684:	4618      	mov	r0, r3
 8006686:	3718      	adds	r7, #24
 8006688:	46bd      	mov	sp, r7
 800668a:	bd80      	pop	{r7, pc}

0800668c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b086      	sub	sp, #24
 8006690:	af00      	add	r7, sp, #0
 8006692:	60f8      	str	r0, [r7, #12]
 8006694:	60b9      	str	r1, [r7, #8]
 8006696:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006698:	2300      	movs	r3, #0
 800669a:	617b      	str	r3, [r7, #20]
 800669c:	e009      	b.n	80066b2 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	1c5a      	adds	r2, r3, #1
 80066a2:	60ba      	str	r2, [r7, #8]
 80066a4:	781b      	ldrb	r3, [r3, #0]
 80066a6:	4618      	mov	r0, r3
 80066a8:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80066ac:	697b      	ldr	r3, [r7, #20]
 80066ae:	3301      	adds	r3, #1
 80066b0:	617b      	str	r3, [r7, #20]
 80066b2:	697a      	ldr	r2, [r7, #20]
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	429a      	cmp	r2, r3
 80066b8:	dbf1      	blt.n	800669e <_write+0x12>
	}
	return len;
 80066ba:	687b      	ldr	r3, [r7, #4]
}
 80066bc:	4618      	mov	r0, r3
 80066be:	3718      	adds	r7, #24
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bd80      	pop	{r7, pc}

080066c4 <_close>:

int _close(int file)
{
 80066c4:	b480      	push	{r7}
 80066c6:	b083      	sub	sp, #12
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
	return -1;
 80066cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80066d0:	4618      	mov	r0, r3
 80066d2:	370c      	adds	r7, #12
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bc80      	pop	{r7}
 80066d8:	4770      	bx	lr

080066da <_fstat>:


int _fstat(int file, struct stat *st)
{
 80066da:	b480      	push	{r7}
 80066dc:	b083      	sub	sp, #12
 80066de:	af00      	add	r7, sp, #0
 80066e0:	6078      	str	r0, [r7, #4]
 80066e2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80066ea:	605a      	str	r2, [r3, #4]
	return 0;
 80066ec:	2300      	movs	r3, #0
}
 80066ee:	4618      	mov	r0, r3
 80066f0:	370c      	adds	r7, #12
 80066f2:	46bd      	mov	sp, r7
 80066f4:	bc80      	pop	{r7}
 80066f6:	4770      	bx	lr

080066f8 <_isatty>:

int _isatty(int file)
{
 80066f8:	b480      	push	{r7}
 80066fa:	b083      	sub	sp, #12
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
	return 1;
 8006700:	2301      	movs	r3, #1
}
 8006702:	4618      	mov	r0, r3
 8006704:	370c      	adds	r7, #12
 8006706:	46bd      	mov	sp, r7
 8006708:	bc80      	pop	{r7}
 800670a:	4770      	bx	lr

0800670c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800670c:	b480      	push	{r7}
 800670e:	b085      	sub	sp, #20
 8006710:	af00      	add	r7, sp, #0
 8006712:	60f8      	str	r0, [r7, #12]
 8006714:	60b9      	str	r1, [r7, #8]
 8006716:	607a      	str	r2, [r7, #4]
	return 0;
 8006718:	2300      	movs	r3, #0
}
 800671a:	4618      	mov	r0, r3
 800671c:	3714      	adds	r7, #20
 800671e:	46bd      	mov	sp, r7
 8006720:	bc80      	pop	{r7}
 8006722:	4770      	bx	lr

08006724 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b086      	sub	sp, #24
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800672c:	4a14      	ldr	r2, [pc, #80]	; (8006780 <_sbrk+0x5c>)
 800672e:	4b15      	ldr	r3, [pc, #84]	; (8006784 <_sbrk+0x60>)
 8006730:	1ad3      	subs	r3, r2, r3
 8006732:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006734:	697b      	ldr	r3, [r7, #20]
 8006736:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006738:	4b13      	ldr	r3, [pc, #76]	; (8006788 <_sbrk+0x64>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d102      	bne.n	8006746 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006740:	4b11      	ldr	r3, [pc, #68]	; (8006788 <_sbrk+0x64>)
 8006742:	4a12      	ldr	r2, [pc, #72]	; (800678c <_sbrk+0x68>)
 8006744:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006746:	4b10      	ldr	r3, [pc, #64]	; (8006788 <_sbrk+0x64>)
 8006748:	681a      	ldr	r2, [r3, #0]
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	4413      	add	r3, r2
 800674e:	693a      	ldr	r2, [r7, #16]
 8006750:	429a      	cmp	r2, r3
 8006752:	d207      	bcs.n	8006764 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006754:	f005 fc1e 	bl	800bf94 <__errno>
 8006758:	4603      	mov	r3, r0
 800675a:	220c      	movs	r2, #12
 800675c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800675e:	f04f 33ff 	mov.w	r3, #4294967295
 8006762:	e009      	b.n	8006778 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006764:	4b08      	ldr	r3, [pc, #32]	; (8006788 <_sbrk+0x64>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800676a:	4b07      	ldr	r3, [pc, #28]	; (8006788 <_sbrk+0x64>)
 800676c:	681a      	ldr	r2, [r3, #0]
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	4413      	add	r3, r2
 8006772:	4a05      	ldr	r2, [pc, #20]	; (8006788 <_sbrk+0x64>)
 8006774:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006776:	68fb      	ldr	r3, [r7, #12]
}
 8006778:	4618      	mov	r0, r3
 800677a:	3718      	adds	r7, #24
 800677c:	46bd      	mov	sp, r7
 800677e:	bd80      	pop	{r7, pc}
 8006780:	20005000 	.word	0x20005000
 8006784:	00000400 	.word	0x00000400
 8006788:	20002a1c 	.word	0x20002a1c
 800678c:	20002c50 	.word	0x20002c50

08006790 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8006790:	b480      	push	{r7}
 8006792:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006794:	bf00      	nop
 8006796:	46bd      	mov	sp, r7
 8006798:	bc80      	pop	{r7}
 800679a:	4770      	bx	lr

0800679c <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b086      	sub	sp, #24
 80067a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80067a2:	f107 0308 	add.w	r3, r7, #8
 80067a6:	2200      	movs	r2, #0
 80067a8:	601a      	str	r2, [r3, #0]
 80067aa:	605a      	str	r2, [r3, #4]
 80067ac:	609a      	str	r2, [r3, #8]
 80067ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80067b0:	463b      	mov	r3, r7
 80067b2:	2200      	movs	r2, #0
 80067b4:	601a      	str	r2, [r3, #0]
 80067b6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80067b8:	4b1e      	ldr	r3, [pc, #120]	; (8006834 <MX_TIM1_Init+0x98>)
 80067ba:	4a1f      	ldr	r2, [pc, #124]	; (8006838 <MX_TIM1_Init+0x9c>)
 80067bc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 80067be:	4b1d      	ldr	r3, [pc, #116]	; (8006834 <MX_TIM1_Init+0x98>)
 80067c0:	2247      	movs	r2, #71	; 0x47
 80067c2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80067c4:	4b1b      	ldr	r3, [pc, #108]	; (8006834 <MX_TIM1_Init+0x98>)
 80067c6:	2200      	movs	r2, #0
 80067c8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xFFFF-1;
 80067ca:	4b1a      	ldr	r3, [pc, #104]	; (8006834 <MX_TIM1_Init+0x98>)
 80067cc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80067d0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80067d2:	4b18      	ldr	r3, [pc, #96]	; (8006834 <MX_TIM1_Init+0x98>)
 80067d4:	2200      	movs	r2, #0
 80067d6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80067d8:	4b16      	ldr	r3, [pc, #88]	; (8006834 <MX_TIM1_Init+0x98>)
 80067da:	2200      	movs	r2, #0
 80067dc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80067de:	4b15      	ldr	r3, [pc, #84]	; (8006834 <MX_TIM1_Init+0x98>)
 80067e0:	2200      	movs	r2, #0
 80067e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80067e4:	4813      	ldr	r0, [pc, #76]	; (8006834 <MX_TIM1_Init+0x98>)
 80067e6:	f004 f929 	bl	800aa3c <HAL_TIM_Base_Init>
 80067ea:	4603      	mov	r3, r0
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d001      	beq.n	80067f4 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80067f0:	f7ff fe3e 	bl	8006470 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80067f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80067f8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80067fa:	f107 0308 	add.w	r3, r7, #8
 80067fe:	4619      	mov	r1, r3
 8006800:	480c      	ldr	r0, [pc, #48]	; (8006834 <MX_TIM1_Init+0x98>)
 8006802:	f004 f96a 	bl	800aada <HAL_TIM_ConfigClockSource>
 8006806:	4603      	mov	r3, r0
 8006808:	2b00      	cmp	r3, #0
 800680a:	d001      	beq.n	8006810 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800680c:	f7ff fe30 	bl	8006470 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006810:	2300      	movs	r3, #0
 8006812:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006814:	2300      	movs	r3, #0
 8006816:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8006818:	463b      	mov	r3, r7
 800681a:	4619      	mov	r1, r3
 800681c:	4805      	ldr	r0, [pc, #20]	; (8006834 <MX_TIM1_Init+0x98>)
 800681e:	f004 fb1b 	bl	800ae58 <HAL_TIMEx_MasterConfigSynchronization>
 8006822:	4603      	mov	r3, r0
 8006824:	2b00      	cmp	r3, #0
 8006826:	d001      	beq.n	800682c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8006828:	f7ff fe22 	bl	8006470 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800682c:	bf00      	nop
 800682e:	3718      	adds	r7, #24
 8006830:	46bd      	mov	sp, r7
 8006832:	bd80      	pop	{r7, pc}
 8006834:	20002a20 	.word	0x20002a20
 8006838:	40012c00 	.word	0x40012c00

0800683c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800683c:	b480      	push	{r7}
 800683e:	b085      	sub	sp, #20
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4a09      	ldr	r2, [pc, #36]	; (8006870 <HAL_TIM_Base_MspInit+0x34>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d10b      	bne.n	8006866 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800684e:	4b09      	ldr	r3, [pc, #36]	; (8006874 <HAL_TIM_Base_MspInit+0x38>)
 8006850:	699b      	ldr	r3, [r3, #24]
 8006852:	4a08      	ldr	r2, [pc, #32]	; (8006874 <HAL_TIM_Base_MspInit+0x38>)
 8006854:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006858:	6193      	str	r3, [r2, #24]
 800685a:	4b06      	ldr	r3, [pc, #24]	; (8006874 <HAL_TIM_Base_MspInit+0x38>)
 800685c:	699b      	ldr	r3, [r3, #24]
 800685e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006862:	60fb      	str	r3, [r7, #12]
 8006864:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8006866:	bf00      	nop
 8006868:	3714      	adds	r7, #20
 800686a:	46bd      	mov	sp, r7
 800686c:	bc80      	pop	{r7}
 800686e:	4770      	bx	lr
 8006870:	40012c00 	.word	0x40012c00
 8006874:	40021000 	.word	0x40021000

08006878 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800687c:	4b11      	ldr	r3, [pc, #68]	; (80068c4 <MX_USART1_UART_Init+0x4c>)
 800687e:	4a12      	ldr	r2, [pc, #72]	; (80068c8 <MX_USART1_UART_Init+0x50>)
 8006880:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8006882:	4b10      	ldr	r3, [pc, #64]	; (80068c4 <MX_USART1_UART_Init+0x4c>)
 8006884:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006888:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800688a:	4b0e      	ldr	r3, [pc, #56]	; (80068c4 <MX_USART1_UART_Init+0x4c>)
 800688c:	2200      	movs	r2, #0
 800688e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006890:	4b0c      	ldr	r3, [pc, #48]	; (80068c4 <MX_USART1_UART_Init+0x4c>)
 8006892:	2200      	movs	r2, #0
 8006894:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8006896:	4b0b      	ldr	r3, [pc, #44]	; (80068c4 <MX_USART1_UART_Init+0x4c>)
 8006898:	2200      	movs	r2, #0
 800689a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800689c:	4b09      	ldr	r3, [pc, #36]	; (80068c4 <MX_USART1_UART_Init+0x4c>)
 800689e:	220c      	movs	r2, #12
 80068a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80068a2:	4b08      	ldr	r3, [pc, #32]	; (80068c4 <MX_USART1_UART_Init+0x4c>)
 80068a4:	2200      	movs	r2, #0
 80068a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80068a8:	4b06      	ldr	r3, [pc, #24]	; (80068c4 <MX_USART1_UART_Init+0x4c>)
 80068aa:	2200      	movs	r2, #0
 80068ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80068ae:	4805      	ldr	r0, [pc, #20]	; (80068c4 <MX_USART1_UART_Init+0x4c>)
 80068b0:	f004 fb30 	bl	800af14 <HAL_UART_Init>
 80068b4:	4603      	mov	r3, r0
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d001      	beq.n	80068be <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80068ba:	f7ff fdd9 	bl	8006470 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80068be:	bf00      	nop
 80068c0:	bd80      	pop	{r7, pc}
 80068c2:	bf00      	nop
 80068c4:	20002a68 	.word	0x20002a68
 80068c8:	40013800 	.word	0x40013800

080068cc <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80068d0:	4b11      	ldr	r3, [pc, #68]	; (8006918 <MX_USART2_UART_Init+0x4c>)
 80068d2:	4a12      	ldr	r2, [pc, #72]	; (800691c <MX_USART2_UART_Init+0x50>)
 80068d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80068d6:	4b10      	ldr	r3, [pc, #64]	; (8006918 <MX_USART2_UART_Init+0x4c>)
 80068d8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80068dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80068de:	4b0e      	ldr	r3, [pc, #56]	; (8006918 <MX_USART2_UART_Init+0x4c>)
 80068e0:	2200      	movs	r2, #0
 80068e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80068e4:	4b0c      	ldr	r3, [pc, #48]	; (8006918 <MX_USART2_UART_Init+0x4c>)
 80068e6:	2200      	movs	r2, #0
 80068e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80068ea:	4b0b      	ldr	r3, [pc, #44]	; (8006918 <MX_USART2_UART_Init+0x4c>)
 80068ec:	2200      	movs	r2, #0
 80068ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80068f0:	4b09      	ldr	r3, [pc, #36]	; (8006918 <MX_USART2_UART_Init+0x4c>)
 80068f2:	220c      	movs	r2, #12
 80068f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80068f6:	4b08      	ldr	r3, [pc, #32]	; (8006918 <MX_USART2_UART_Init+0x4c>)
 80068f8:	2200      	movs	r2, #0
 80068fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80068fc:	4b06      	ldr	r3, [pc, #24]	; (8006918 <MX_USART2_UART_Init+0x4c>)
 80068fe:	2200      	movs	r2, #0
 8006900:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8006902:	4805      	ldr	r0, [pc, #20]	; (8006918 <MX_USART2_UART_Init+0x4c>)
 8006904:	f004 fb06 	bl	800af14 <HAL_UART_Init>
 8006908:	4603      	mov	r3, r0
 800690a:	2b00      	cmp	r3, #0
 800690c:	d001      	beq.n	8006912 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800690e:	f7ff fdaf 	bl	8006470 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8006912:	bf00      	nop
 8006914:	bd80      	pop	{r7, pc}
 8006916:	bf00      	nop
 8006918:	20002ab0 	.word	0x20002ab0
 800691c:	40004400 	.word	0x40004400

08006920 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8006924:	4b11      	ldr	r3, [pc, #68]	; (800696c <MX_USART3_UART_Init+0x4c>)
 8006926:	4a12      	ldr	r2, [pc, #72]	; (8006970 <MX_USART3_UART_Init+0x50>)
 8006928:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800692a:	4b10      	ldr	r3, [pc, #64]	; (800696c <MX_USART3_UART_Init+0x4c>)
 800692c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006930:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8006932:	4b0e      	ldr	r3, [pc, #56]	; (800696c <MX_USART3_UART_Init+0x4c>)
 8006934:	2200      	movs	r2, #0
 8006936:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8006938:	4b0c      	ldr	r3, [pc, #48]	; (800696c <MX_USART3_UART_Init+0x4c>)
 800693a:	2200      	movs	r2, #0
 800693c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800693e:	4b0b      	ldr	r3, [pc, #44]	; (800696c <MX_USART3_UART_Init+0x4c>)
 8006940:	2200      	movs	r2, #0
 8006942:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8006944:	4b09      	ldr	r3, [pc, #36]	; (800696c <MX_USART3_UART_Init+0x4c>)
 8006946:	220c      	movs	r2, #12
 8006948:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800694a:	4b08      	ldr	r3, [pc, #32]	; (800696c <MX_USART3_UART_Init+0x4c>)
 800694c:	2200      	movs	r2, #0
 800694e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8006950:	4b06      	ldr	r3, [pc, #24]	; (800696c <MX_USART3_UART_Init+0x4c>)
 8006952:	2200      	movs	r2, #0
 8006954:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8006956:	4805      	ldr	r0, [pc, #20]	; (800696c <MX_USART3_UART_Init+0x4c>)
 8006958:	f004 fadc 	bl	800af14 <HAL_UART_Init>
 800695c:	4603      	mov	r3, r0
 800695e:	2b00      	cmp	r3, #0
 8006960:	d001      	beq.n	8006966 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8006962:	f7ff fd85 	bl	8006470 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8006966:	bf00      	nop
 8006968:	bd80      	pop	{r7, pc}
 800696a:	bf00      	nop
 800696c:	20002af8 	.word	0x20002af8
 8006970:	40004800 	.word	0x40004800

08006974 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b08e      	sub	sp, #56	; 0x38
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800697c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006980:	2200      	movs	r2, #0
 8006982:	601a      	str	r2, [r3, #0]
 8006984:	605a      	str	r2, [r3, #4]
 8006986:	609a      	str	r2, [r3, #8]
 8006988:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	4a9e      	ldr	r2, [pc, #632]	; (8006c08 <HAL_UART_MspInit+0x294>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d16c      	bne.n	8006a6e <HAL_UART_MspInit+0xfa>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006994:	4b9d      	ldr	r3, [pc, #628]	; (8006c0c <HAL_UART_MspInit+0x298>)
 8006996:	699b      	ldr	r3, [r3, #24]
 8006998:	4a9c      	ldr	r2, [pc, #624]	; (8006c0c <HAL_UART_MspInit+0x298>)
 800699a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800699e:	6193      	str	r3, [r2, #24]
 80069a0:	4b9a      	ldr	r3, [pc, #616]	; (8006c0c <HAL_UART_MspInit+0x298>)
 80069a2:	699b      	ldr	r3, [r3, #24]
 80069a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80069a8:	623b      	str	r3, [r7, #32]
 80069aa:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80069ac:	4b97      	ldr	r3, [pc, #604]	; (8006c0c <HAL_UART_MspInit+0x298>)
 80069ae:	699b      	ldr	r3, [r3, #24]
 80069b0:	4a96      	ldr	r2, [pc, #600]	; (8006c0c <HAL_UART_MspInit+0x298>)
 80069b2:	f043 0308 	orr.w	r3, r3, #8
 80069b6:	6193      	str	r3, [r2, #24]
 80069b8:	4b94      	ldr	r3, [pc, #592]	; (8006c0c <HAL_UART_MspInit+0x298>)
 80069ba:	699b      	ldr	r3, [r3, #24]
 80069bc:	f003 0308 	and.w	r3, r3, #8
 80069c0:	61fb      	str	r3, [r7, #28]
 80069c2:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = SIM_TX_Pin;
 80069c4:	2340      	movs	r3, #64	; 0x40
 80069c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80069c8:	2302      	movs	r3, #2
 80069ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80069cc:	2303      	movs	r3, #3
 80069ce:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(SIM_TX_GPIO_Port, &GPIO_InitStruct);
 80069d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80069d4:	4619      	mov	r1, r3
 80069d6:	488e      	ldr	r0, [pc, #568]	; (8006c10 <HAL_UART_MspInit+0x29c>)
 80069d8:	f002 f952 	bl	8008c80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SIM_RX_Pin;
 80069dc:	2380      	movs	r3, #128	; 0x80
 80069de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80069e0:	2300      	movs	r3, #0
 80069e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069e4:	2300      	movs	r3, #0
 80069e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SIM_RX_GPIO_Port, &GPIO_InitStruct);
 80069e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80069ec:	4619      	mov	r1, r3
 80069ee:	4888      	ldr	r0, [pc, #544]	; (8006c10 <HAL_UART_MspInit+0x29c>)
 80069f0:	f002 f946 	bl	8008c80 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 80069f4:	4b87      	ldr	r3, [pc, #540]	; (8006c14 <HAL_UART_MspInit+0x2a0>)
 80069f6:	685b      	ldr	r3, [r3, #4]
 80069f8:	637b      	str	r3, [r7, #52]	; 0x34
 80069fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069fc:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8006a00:	637b      	str	r3, [r7, #52]	; 0x34
 8006a02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a04:	f043 0304 	orr.w	r3, r3, #4
 8006a08:	637b      	str	r3, [r7, #52]	; 0x34
 8006a0a:	4a82      	ldr	r2, [pc, #520]	; (8006c14 <HAL_UART_MspInit+0x2a0>)
 8006a0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a0e:	6053      	str	r3, [r2, #4]

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8006a10:	4b81      	ldr	r3, [pc, #516]	; (8006c18 <HAL_UART_MspInit+0x2a4>)
 8006a12:	4a82      	ldr	r2, [pc, #520]	; (8006c1c <HAL_UART_MspInit+0x2a8>)
 8006a14:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006a16:	4b80      	ldr	r3, [pc, #512]	; (8006c18 <HAL_UART_MspInit+0x2a4>)
 8006a18:	2200      	movs	r2, #0
 8006a1a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006a1c:	4b7e      	ldr	r3, [pc, #504]	; (8006c18 <HAL_UART_MspInit+0x2a4>)
 8006a1e:	2200      	movs	r2, #0
 8006a20:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006a22:	4b7d      	ldr	r3, [pc, #500]	; (8006c18 <HAL_UART_MspInit+0x2a4>)
 8006a24:	2280      	movs	r2, #128	; 0x80
 8006a26:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006a28:	4b7b      	ldr	r3, [pc, #492]	; (8006c18 <HAL_UART_MspInit+0x2a4>)
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006a2e:	4b7a      	ldr	r3, [pc, #488]	; (8006c18 <HAL_UART_MspInit+0x2a4>)
 8006a30:	2200      	movs	r2, #0
 8006a32:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8006a34:	4b78      	ldr	r3, [pc, #480]	; (8006c18 <HAL_UART_MspInit+0x2a4>)
 8006a36:	2200      	movs	r2, #0
 8006a38:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006a3a:	4b77      	ldr	r3, [pc, #476]	; (8006c18 <HAL_UART_MspInit+0x2a4>)
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8006a40:	4875      	ldr	r0, [pc, #468]	; (8006c18 <HAL_UART_MspInit+0x2a4>)
 8006a42:	f001 fe7b 	bl	800873c <HAL_DMA_Init>
 8006a46:	4603      	mov	r3, r0
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d001      	beq.n	8006a50 <HAL_UART_MspInit+0xdc>
    {
      Error_Handler();
 8006a4c:	f7ff fd10 	bl	8006470 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	4a71      	ldr	r2, [pc, #452]	; (8006c18 <HAL_UART_MspInit+0x2a4>)
 8006a54:	63da      	str	r2, [r3, #60]	; 0x3c
 8006a56:	4a70      	ldr	r2, [pc, #448]	; (8006c18 <HAL_UART_MspInit+0x2a4>)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	2101      	movs	r1, #1
 8006a60:	2025      	movs	r0, #37	; 0x25
 8006a62:	f001 fe34 	bl	80086ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8006a66:	2025      	movs	r0, #37	; 0x25
 8006a68:	f001 fe4d 	bl	8008706 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8006a6c:	e0c8      	b.n	8006c00 <HAL_UART_MspInit+0x28c>
  else if(uartHandle->Instance==USART2)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	4a6b      	ldr	r2, [pc, #428]	; (8006c20 <HAL_UART_MspInit+0x2ac>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d15e      	bne.n	8006b36 <HAL_UART_MspInit+0x1c2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8006a78:	4b64      	ldr	r3, [pc, #400]	; (8006c0c <HAL_UART_MspInit+0x298>)
 8006a7a:	69db      	ldr	r3, [r3, #28]
 8006a7c:	4a63      	ldr	r2, [pc, #396]	; (8006c0c <HAL_UART_MspInit+0x298>)
 8006a7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a82:	61d3      	str	r3, [r2, #28]
 8006a84:	4b61      	ldr	r3, [pc, #388]	; (8006c0c <HAL_UART_MspInit+0x298>)
 8006a86:	69db      	ldr	r3, [r3, #28]
 8006a88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a8c:	61bb      	str	r3, [r7, #24]
 8006a8e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006a90:	4b5e      	ldr	r3, [pc, #376]	; (8006c0c <HAL_UART_MspInit+0x298>)
 8006a92:	699b      	ldr	r3, [r3, #24]
 8006a94:	4a5d      	ldr	r2, [pc, #372]	; (8006c0c <HAL_UART_MspInit+0x298>)
 8006a96:	f043 0304 	orr.w	r3, r3, #4
 8006a9a:	6193      	str	r3, [r2, #24]
 8006a9c:	4b5b      	ldr	r3, [pc, #364]	; (8006c0c <HAL_UART_MspInit+0x298>)
 8006a9e:	699b      	ldr	r3, [r3, #24]
 8006aa0:	f003 0304 	and.w	r3, r3, #4
 8006aa4:	617b      	str	r3, [r7, #20]
 8006aa6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006aa8:	2304      	movs	r3, #4
 8006aaa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006aac:	2302      	movs	r3, #2
 8006aae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006ab0:	2303      	movs	r3, #3
 8006ab2:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006ab4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006ab8:	4619      	mov	r1, r3
 8006aba:	485a      	ldr	r0, [pc, #360]	; (8006c24 <HAL_UART_MspInit+0x2b0>)
 8006abc:	f002 f8e0 	bl	8008c80 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8006ac0:	2308      	movs	r3, #8
 8006ac2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ac8:	2300      	movs	r3, #0
 8006aca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006acc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006ad0:	4619      	mov	r1, r3
 8006ad2:	4854      	ldr	r0, [pc, #336]	; (8006c24 <HAL_UART_MspInit+0x2b0>)
 8006ad4:	f002 f8d4 	bl	8008c80 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8006ad8:	4b53      	ldr	r3, [pc, #332]	; (8006c28 <HAL_UART_MspInit+0x2b4>)
 8006ada:	4a54      	ldr	r2, [pc, #336]	; (8006c2c <HAL_UART_MspInit+0x2b8>)
 8006adc:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006ade:	4b52      	ldr	r3, [pc, #328]	; (8006c28 <HAL_UART_MspInit+0x2b4>)
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006ae4:	4b50      	ldr	r3, [pc, #320]	; (8006c28 <HAL_UART_MspInit+0x2b4>)
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006aea:	4b4f      	ldr	r3, [pc, #316]	; (8006c28 <HAL_UART_MspInit+0x2b4>)
 8006aec:	2280      	movs	r2, #128	; 0x80
 8006aee:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006af0:	4b4d      	ldr	r3, [pc, #308]	; (8006c28 <HAL_UART_MspInit+0x2b4>)
 8006af2:	2200      	movs	r2, #0
 8006af4:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006af6:	4b4c      	ldr	r3, [pc, #304]	; (8006c28 <HAL_UART_MspInit+0x2b4>)
 8006af8:	2200      	movs	r2, #0
 8006afa:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8006afc:	4b4a      	ldr	r3, [pc, #296]	; (8006c28 <HAL_UART_MspInit+0x2b4>)
 8006afe:	2200      	movs	r2, #0
 8006b00:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006b02:	4b49      	ldr	r3, [pc, #292]	; (8006c28 <HAL_UART_MspInit+0x2b4>)
 8006b04:	2200      	movs	r2, #0
 8006b06:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8006b08:	4847      	ldr	r0, [pc, #284]	; (8006c28 <HAL_UART_MspInit+0x2b4>)
 8006b0a:	f001 fe17 	bl	800873c <HAL_DMA_Init>
 8006b0e:	4603      	mov	r3, r0
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d001      	beq.n	8006b18 <HAL_UART_MspInit+0x1a4>
      Error_Handler();
 8006b14:	f7ff fcac 	bl	8006470 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	4a43      	ldr	r2, [pc, #268]	; (8006c28 <HAL_UART_MspInit+0x2b4>)
 8006b1c:	63da      	str	r2, [r3, #60]	; 0x3c
 8006b1e:	4a42      	ldr	r2, [pc, #264]	; (8006c28 <HAL_UART_MspInit+0x2b4>)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 8006b24:	2200      	movs	r2, #0
 8006b26:	2101      	movs	r1, #1
 8006b28:	2026      	movs	r0, #38	; 0x26
 8006b2a:	f001 fdd0 	bl	80086ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8006b2e:	2026      	movs	r0, #38	; 0x26
 8006b30:	f001 fde9 	bl	8008706 <HAL_NVIC_EnableIRQ>
}
 8006b34:	e064      	b.n	8006c00 <HAL_UART_MspInit+0x28c>
  else if(uartHandle->Instance==USART3)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4a3d      	ldr	r2, [pc, #244]	; (8006c30 <HAL_UART_MspInit+0x2bc>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d15f      	bne.n	8006c00 <HAL_UART_MspInit+0x28c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8006b40:	4b32      	ldr	r3, [pc, #200]	; (8006c0c <HAL_UART_MspInit+0x298>)
 8006b42:	69db      	ldr	r3, [r3, #28]
 8006b44:	4a31      	ldr	r2, [pc, #196]	; (8006c0c <HAL_UART_MspInit+0x298>)
 8006b46:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006b4a:	61d3      	str	r3, [r2, #28]
 8006b4c:	4b2f      	ldr	r3, [pc, #188]	; (8006c0c <HAL_UART_MspInit+0x298>)
 8006b4e:	69db      	ldr	r3, [r3, #28]
 8006b50:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006b54:	613b      	str	r3, [r7, #16]
 8006b56:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006b58:	4b2c      	ldr	r3, [pc, #176]	; (8006c0c <HAL_UART_MspInit+0x298>)
 8006b5a:	699b      	ldr	r3, [r3, #24]
 8006b5c:	4a2b      	ldr	r2, [pc, #172]	; (8006c0c <HAL_UART_MspInit+0x298>)
 8006b5e:	f043 0308 	orr.w	r3, r3, #8
 8006b62:	6193      	str	r3, [r2, #24]
 8006b64:	4b29      	ldr	r3, [pc, #164]	; (8006c0c <HAL_UART_MspInit+0x298>)
 8006b66:	699b      	ldr	r3, [r3, #24]
 8006b68:	f003 0308 	and.w	r3, r3, #8
 8006b6c:	60fb      	str	r3, [r7, #12]
 8006b6e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006b70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b74:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b76:	2302      	movs	r3, #2
 8006b78:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006b7a:	2303      	movs	r3, #3
 8006b7c:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006b7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006b82:	4619      	mov	r1, r3
 8006b84:	4822      	ldr	r0, [pc, #136]	; (8006c10 <HAL_UART_MspInit+0x29c>)
 8006b86:	f002 f87b 	bl	8008c80 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8006b8a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006b8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006b90:	2300      	movs	r3, #0
 8006b92:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b94:	2300      	movs	r3, #0
 8006b96:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006b98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006b9c:	4619      	mov	r1, r3
 8006b9e:	481c      	ldr	r0, [pc, #112]	; (8006c10 <HAL_UART_MspInit+0x29c>)
 8006ba0:	f002 f86e 	bl	8008c80 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8006ba4:	4b23      	ldr	r3, [pc, #140]	; (8006c34 <HAL_UART_MspInit+0x2c0>)
 8006ba6:	4a24      	ldr	r2, [pc, #144]	; (8006c38 <HAL_UART_MspInit+0x2c4>)
 8006ba8:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006baa:	4b22      	ldr	r3, [pc, #136]	; (8006c34 <HAL_UART_MspInit+0x2c0>)
 8006bac:	2200      	movs	r2, #0
 8006bae:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006bb0:	4b20      	ldr	r3, [pc, #128]	; (8006c34 <HAL_UART_MspInit+0x2c0>)
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006bb6:	4b1f      	ldr	r3, [pc, #124]	; (8006c34 <HAL_UART_MspInit+0x2c0>)
 8006bb8:	2280      	movs	r2, #128	; 0x80
 8006bba:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006bbc:	4b1d      	ldr	r3, [pc, #116]	; (8006c34 <HAL_UART_MspInit+0x2c0>)
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006bc2:	4b1c      	ldr	r3, [pc, #112]	; (8006c34 <HAL_UART_MspInit+0x2c0>)
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8006bc8:	4b1a      	ldr	r3, [pc, #104]	; (8006c34 <HAL_UART_MspInit+0x2c0>)
 8006bca:	2200      	movs	r2, #0
 8006bcc:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006bce:	4b19      	ldr	r3, [pc, #100]	; (8006c34 <HAL_UART_MspInit+0x2c0>)
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8006bd4:	4817      	ldr	r0, [pc, #92]	; (8006c34 <HAL_UART_MspInit+0x2c0>)
 8006bd6:	f001 fdb1 	bl	800873c <HAL_DMA_Init>
 8006bda:	4603      	mov	r3, r0
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d001      	beq.n	8006be4 <HAL_UART_MspInit+0x270>
      Error_Handler();
 8006be0:	f7ff fc46 	bl	8006470 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	4a13      	ldr	r2, [pc, #76]	; (8006c34 <HAL_UART_MspInit+0x2c0>)
 8006be8:	63da      	str	r2, [r3, #60]	; 0x3c
 8006bea:	4a12      	ldr	r2, [pc, #72]	; (8006c34 <HAL_UART_MspInit+0x2c0>)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	2101      	movs	r1, #1
 8006bf4:	2027      	movs	r0, #39	; 0x27
 8006bf6:	f001 fd6a 	bl	80086ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8006bfa:	2027      	movs	r0, #39	; 0x27
 8006bfc:	f001 fd83 	bl	8008706 <HAL_NVIC_EnableIRQ>
}
 8006c00:	bf00      	nop
 8006c02:	3738      	adds	r7, #56	; 0x38
 8006c04:	46bd      	mov	sp, r7
 8006c06:	bd80      	pop	{r7, pc}
 8006c08:	40013800 	.word	0x40013800
 8006c0c:	40021000 	.word	0x40021000
 8006c10:	40010c00 	.word	0x40010c00
 8006c14:	40010000 	.word	0x40010000
 8006c18:	20002b40 	.word	0x20002b40
 8006c1c:	40020058 	.word	0x40020058
 8006c20:	40004400 	.word	0x40004400
 8006c24:	40010800 	.word	0x40010800
 8006c28:	20002b84 	.word	0x20002b84
 8006c2c:	4002006c 	.word	0x4002006c
 8006c30:	40004800 	.word	0x40004800
 8006c34:	20002bc8 	.word	0x20002bc8
 8006c38:	40020030 	.word	0x40020030

08006c3c <A4988_EnableDriver>:
{

}

void A4988_EnableDriver()
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(myMotor.PENABLE, myMotor.ENABLE, GPIO_PIN_RESET);
 8006c40:	4b0c      	ldr	r3, [pc, #48]	; (8006c74 <A4988_EnableDriver+0x38>)
 8006c42:	695b      	ldr	r3, [r3, #20]
 8006c44:	4a0b      	ldr	r2, [pc, #44]	; (8006c74 <A4988_EnableDriver+0x38>)
 8006c46:	8891      	ldrh	r1, [r2, #4]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	f002 f9b3 	bl	8008fb6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(myMotor.PSLEEP, myMotor.SLEEP, GPIO_PIN_SET);
 8006c50:	4b08      	ldr	r3, [pc, #32]	; (8006c74 <A4988_EnableDriver+0x38>)
 8006c52:	699b      	ldr	r3, [r3, #24]
 8006c54:	4a07      	ldr	r2, [pc, #28]	; (8006c74 <A4988_EnableDriver+0x38>)
 8006c56:	88d1      	ldrh	r1, [r2, #6]
 8006c58:	2201      	movs	r2, #1
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	f002 f9ab 	bl	8008fb6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(myMotor.PRESET, myMotor.RESET, GPIO_PIN_SET);
 8006c60:	4b04      	ldr	r3, [pc, #16]	; (8006c74 <A4988_EnableDriver+0x38>)
 8006c62:	69db      	ldr	r3, [r3, #28]
 8006c64:	4a03      	ldr	r2, [pc, #12]	; (8006c74 <A4988_EnableDriver+0x38>)
 8006c66:	8911      	ldrh	r1, [r2, #8]
 8006c68:	2201      	movs	r2, #1
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	f002 f9a3 	bl	8008fb6 <HAL_GPIO_WritePin>
}
 8006c70:	bf00      	nop
 8006c72:	bd80      	pop	{r7, pc}
 8006c74:	20000498 	.word	0x20000498

08006c78 <A4988_DisableDriver>:

void A4988_DisableDriver()
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(myMotor.PENABLE, myMotor.ENABLE, GPIO_PIN_SET);
 8006c7c:	4b0c      	ldr	r3, [pc, #48]	; (8006cb0 <A4988_DisableDriver+0x38>)
 8006c7e:	695b      	ldr	r3, [r3, #20]
 8006c80:	4a0b      	ldr	r2, [pc, #44]	; (8006cb0 <A4988_DisableDriver+0x38>)
 8006c82:	8891      	ldrh	r1, [r2, #4]
 8006c84:	2201      	movs	r2, #1
 8006c86:	4618      	mov	r0, r3
 8006c88:	f002 f995 	bl	8008fb6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(myMotor.PSLEEP, myMotor.SLEEP, GPIO_PIN_RESET);
 8006c8c:	4b08      	ldr	r3, [pc, #32]	; (8006cb0 <A4988_DisableDriver+0x38>)
 8006c8e:	699b      	ldr	r3, [r3, #24]
 8006c90:	4a07      	ldr	r2, [pc, #28]	; (8006cb0 <A4988_DisableDriver+0x38>)
 8006c92:	88d1      	ldrh	r1, [r2, #6]
 8006c94:	2200      	movs	r2, #0
 8006c96:	4618      	mov	r0, r3
 8006c98:	f002 f98d 	bl	8008fb6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(myMotor.PRESET, myMotor.RESET, GPIO_PIN_RESET);
 8006c9c:	4b04      	ldr	r3, [pc, #16]	; (8006cb0 <A4988_DisableDriver+0x38>)
 8006c9e:	69db      	ldr	r3, [r3, #28]
 8006ca0:	4a03      	ldr	r2, [pc, #12]	; (8006cb0 <A4988_DisableDriver+0x38>)
 8006ca2:	8911      	ldrh	r1, [r2, #8]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	f002 f985 	bl	8008fb6 <HAL_GPIO_WritePin>
}
 8006cac:	bf00      	nop
 8006cae:	bd80      	pop	{r7, pc}
 8006cb0:	20000498 	.word	0x20000498

08006cb4 <A4988_StepByStep>:
	HAL_GPIO_WritePin(myMotor.PSTEP, myMotor.STEP, GPIO_PIN_SET);
	HAL_GPIO_WritePin(myMotor.PSTEP, myMotor.STEP, GPIO_PIN_RESET);
}

void A4988_StepByStep(int steps, int direction)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b084      	sub	sp, #16
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
 8006cbc:	6039      	str	r1, [r7, #0]
	if (direction == 1) {
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	2b01      	cmp	r3, #1
 8006cc2:	d108      	bne.n	8006cd6 <A4988_StepByStep+0x22>
		HAL_GPIO_WritePin(myMotor.PDIR, myMotor.DIR, GPIO_PIN_SET);
 8006cc4:	4b1a      	ldr	r3, [pc, #104]	; (8006d30 <A4988_StepByStep+0x7c>)
 8006cc6:	68db      	ldr	r3, [r3, #12]
 8006cc8:	4a19      	ldr	r2, [pc, #100]	; (8006d30 <A4988_StepByStep+0x7c>)
 8006cca:	8811      	ldrh	r1, [r2, #0]
 8006ccc:	2201      	movs	r2, #1
 8006cce:	4618      	mov	r0, r3
 8006cd0:	f002 f971 	bl	8008fb6 <HAL_GPIO_WritePin>
 8006cd4:	e007      	b.n	8006ce6 <A4988_StepByStep+0x32>
	} else {
		HAL_GPIO_WritePin(myMotor.PDIR, myMotor.DIR, GPIO_PIN_RESET);
 8006cd6:	4b16      	ldr	r3, [pc, #88]	; (8006d30 <A4988_StepByStep+0x7c>)
 8006cd8:	68db      	ldr	r3, [r3, #12]
 8006cda:	4a15      	ldr	r2, [pc, #84]	; (8006d30 <A4988_StepByStep+0x7c>)
 8006cdc:	8811      	ldrh	r1, [r2, #0]
 8006cde:	2200      	movs	r2, #0
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	f002 f968 	bl	8008fb6 <HAL_GPIO_WritePin>
	}

	// Step the motor
	for (int i = 0; i < steps; i++) {
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	60fb      	str	r3, [r7, #12]
 8006cea:	e018      	b.n	8006d1e <A4988_StepByStep+0x6a>
		HAL_GPIO_WritePin(myMotor.PSTEP, myMotor.STEP, GPIO_PIN_SET);
 8006cec:	4b10      	ldr	r3, [pc, #64]	; (8006d30 <A4988_StepByStep+0x7c>)
 8006cee:	691b      	ldr	r3, [r3, #16]
 8006cf0:	4a0f      	ldr	r2, [pc, #60]	; (8006d30 <A4988_StepByStep+0x7c>)
 8006cf2:	8851      	ldrh	r1, [r2, #2]
 8006cf4:	2201      	movs	r2, #1
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	f002 f95d 	bl	8008fb6 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8006cfc:	2001      	movs	r0, #1
 8006cfe:	f000 ffed 	bl	8007cdc <HAL_Delay>
		HAL_GPIO_WritePin(myMotor.PSTEP, myMotor.STEP, GPIO_PIN_RESET);
 8006d02:	4b0b      	ldr	r3, [pc, #44]	; (8006d30 <A4988_StepByStep+0x7c>)
 8006d04:	691b      	ldr	r3, [r3, #16]
 8006d06:	4a0a      	ldr	r2, [pc, #40]	; (8006d30 <A4988_StepByStep+0x7c>)
 8006d08:	8851      	ldrh	r1, [r2, #2]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	f002 f952 	bl	8008fb6 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8006d12:	2001      	movs	r0, #1
 8006d14:	f000 ffe2 	bl	8007cdc <HAL_Delay>
	for (int i = 0; i < steps; i++) {
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	3301      	adds	r3, #1
 8006d1c:	60fb      	str	r3, [r7, #12]
 8006d1e:	68fa      	ldr	r2, [r7, #12]
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	429a      	cmp	r2, r3
 8006d24:	dbe2      	blt.n	8006cec <A4988_StepByStep+0x38>
	}
}
 8006d26:	bf00      	nop
 8006d28:	bf00      	nop
 8006d2a:	3710      	adds	r7, #16
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	bd80      	pop	{r7, pc}
 8006d30:	20000498 	.word	0x20000498

08006d34 <LCD_SpecialChar>:

/* GLOBAL VARIABLES ----------------------------------------------------------*/

/* STATIC FUNCTION PROTOTYPES --- --------------------------------------------*/
static void LCD_SpecialChar(void)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b098      	sub	sp, #96	; 0x60
 8006d38:	af00      	add	r7, sp, #0
	uint8_t Right[] = {0x00, 0x04, 0x06, 0x1F, 0x1F, 0x06, 0x04, 0x00}; // Go to right
 8006d3a:	4a6d      	ldr	r2, [pc, #436]	; (8006ef0 <LCD_SpecialChar+0x1bc>)
 8006d3c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006d40:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006d44:	e883 0003 	stmia.w	r3, {r0, r1}
	LCD_SendCommand(0x40);
 8006d48:	2040      	movs	r0, #64	; 0x40
 8006d4a:	f000 f91b 	bl	8006f84 <LCD_SendCommand>
	for (int i=0; i<8; i++) LCD_SendData(Right[i]);
 8006d4e:	2300      	movs	r3, #0
 8006d50:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006d52:	e00a      	b.n	8006d6a <LCD_SpecialChar+0x36>
 8006d54:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8006d58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006d5a:	4413      	add	r3, r2
 8006d5c:	781b      	ldrb	r3, [r3, #0]
 8006d5e:	4618      	mov	r0, r3
 8006d60:	f000 f9ac 	bl	80070bc <LCD_SendData>
 8006d64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006d66:	3301      	adds	r3, #1
 8006d68:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006d6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006d6c:	2b07      	cmp	r3, #7
 8006d6e:	ddf1      	ble.n	8006d54 <LCD_SpecialChar+0x20>
	uint8_t RightInvert[] = {0x1F, 0x1B, 0x19, 0x00, 0x00, 0x19, 0x1B, 0x1F};
 8006d70:	4a60      	ldr	r2, [pc, #384]	; (8006ef4 <LCD_SpecialChar+0x1c0>)
 8006d72:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006d76:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006d7a:	e883 0003 	stmia.w	r3, {r0, r1}
	LCD_SendCommand(0x40+8);
 8006d7e:	2048      	movs	r0, #72	; 0x48
 8006d80:	f000 f900 	bl	8006f84 <LCD_SendCommand>
	for (int i=0; i<8; i++) LCD_SendData(RightInvert[i]);
 8006d84:	2300      	movs	r3, #0
 8006d86:	65bb      	str	r3, [r7, #88]	; 0x58
 8006d88:	e00a      	b.n	8006da0 <LCD_SpecialChar+0x6c>
 8006d8a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006d8e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006d90:	4413      	add	r3, r2
 8006d92:	781b      	ldrb	r3, [r3, #0]
 8006d94:	4618      	mov	r0, r3
 8006d96:	f000 f991 	bl	80070bc <LCD_SendData>
 8006d9a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006d9c:	3301      	adds	r3, #1
 8006d9e:	65bb      	str	r3, [r7, #88]	; 0x58
 8006da0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006da2:	2b07      	cmp	r3, #7
 8006da4:	ddf1      	ble.n	8006d8a <LCD_SpecialChar+0x56>
	uint8_t Left[] = {0x00, 0x04, 0x0C, 0x1F, 0x1F, 0x0C, 0x04, 0x00};
 8006da6:	4a54      	ldr	r2, [pc, #336]	; (8006ef8 <LCD_SpecialChar+0x1c4>)
 8006da8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006dac:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006db0:	e883 0003 	stmia.w	r3, {r0, r1}
	LCD_SendCommand(0x40+16);
 8006db4:	2050      	movs	r0, #80	; 0x50
 8006db6:	f000 f8e5 	bl	8006f84 <LCD_SendCommand>
	for (int i=0; i<8; i++) LCD_SendData(Left[i]);
 8006dba:	2300      	movs	r3, #0
 8006dbc:	657b      	str	r3, [r7, #84]	; 0x54
 8006dbe:	e00a      	b.n	8006dd6 <LCD_SpecialChar+0xa2>
 8006dc0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006dc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006dc6:	4413      	add	r3, r2
 8006dc8:	781b      	ldrb	r3, [r3, #0]
 8006dca:	4618      	mov	r0, r3
 8006dcc:	f000 f976 	bl	80070bc <LCD_SendData>
 8006dd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006dd2:	3301      	adds	r3, #1
 8006dd4:	657b      	str	r3, [r7, #84]	; 0x54
 8006dd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006dd8:	2b07      	cmp	r3, #7
 8006dda:	ddf1      	ble.n	8006dc0 <LCD_SpecialChar+0x8c>
	uint8_t LeftInvert[] = {0x1F, 0x1B, 0x13, 0x00, 0x00, 0x13, 0x1B, 0x1F};
 8006ddc:	4a47      	ldr	r2, [pc, #284]	; (8006efc <LCD_SpecialChar+0x1c8>)
 8006dde:	f107 0320 	add.w	r3, r7, #32
 8006de2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006de6:	e883 0003 	stmia.w	r3, {r0, r1}
	LCD_SendCommand(0x40+24);
 8006dea:	2058      	movs	r0, #88	; 0x58
 8006dec:	f000 f8ca 	bl	8006f84 <LCD_SendCommand>
	for (int i=0; i<8; i++) LCD_SendData(LeftInvert[i]);
 8006df0:	2300      	movs	r3, #0
 8006df2:	653b      	str	r3, [r7, #80]	; 0x50
 8006df4:	e00a      	b.n	8006e0c <LCD_SpecialChar+0xd8>
 8006df6:	f107 0220 	add.w	r2, r7, #32
 8006dfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006dfc:	4413      	add	r3, r2
 8006dfe:	781b      	ldrb	r3, [r3, #0]
 8006e00:	4618      	mov	r0, r3
 8006e02:	f000 f95b 	bl	80070bc <LCD_SendData>
 8006e06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e08:	3301      	adds	r3, #1
 8006e0a:	653b      	str	r3, [r7, #80]	; 0x50
 8006e0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e0e:	2b07      	cmp	r3, #7
 8006e10:	ddf1      	ble.n	8006df6 <LCD_SpecialChar+0xc2>
	uint8_t Empty[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8006e12:	4a3b      	ldr	r2, [pc, #236]	; (8006f00 <LCD_SpecialChar+0x1cc>)
 8006e14:	f107 0318 	add.w	r3, r7, #24
 8006e18:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006e1c:	e883 0003 	stmia.w	r3, {r0, r1}
	LCD_SendCommand(0x40+32);
 8006e20:	2060      	movs	r0, #96	; 0x60
 8006e22:	f000 f8af 	bl	8006f84 <LCD_SendCommand>
	for (int i=0; i<8; i++) LCD_SendData(Empty[i]);
 8006e26:	2300      	movs	r3, #0
 8006e28:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e2a:	e00a      	b.n	8006e42 <LCD_SpecialChar+0x10e>
 8006e2c:	f107 0218 	add.w	r2, r7, #24
 8006e30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e32:	4413      	add	r3, r2
 8006e34:	781b      	ldrb	r3, [r3, #0]
 8006e36:	4618      	mov	r0, r3
 8006e38:	f000 f940 	bl	80070bc <LCD_SendData>
 8006e3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e3e:	3301      	adds	r3, #1
 8006e40:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e44:	2b07      	cmp	r3, #7
 8006e46:	ddf1      	ble.n	8006e2c <LCD_SpecialChar+0xf8>
	uint8_t Full[] = {0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F};
 8006e48:	4a2e      	ldr	r2, [pc, #184]	; (8006f04 <LCD_SpecialChar+0x1d0>)
 8006e4a:	f107 0310 	add.w	r3, r7, #16
 8006e4e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006e52:	e883 0003 	stmia.w	r3, {r0, r1}
	LCD_SendCommand(0x40+40);
 8006e56:	2068      	movs	r0, #104	; 0x68
 8006e58:	f000 f894 	bl	8006f84 <LCD_SendCommand>
	for (int i=0; i<8; i++) LCD_SendData(Full[i]);
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006e60:	e00a      	b.n	8006e78 <LCD_SpecialChar+0x144>
 8006e62:	f107 0210 	add.w	r2, r7, #16
 8006e66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e68:	4413      	add	r3, r2
 8006e6a:	781b      	ldrb	r3, [r3, #0]
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	f000 f925 	bl	80070bc <LCD_SendData>
 8006e72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e74:	3301      	adds	r3, #1
 8006e76:	64bb      	str	r3, [r7, #72]	; 0x48
 8006e78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e7a:	2b07      	cmp	r3, #7
 8006e7c:	ddf1      	ble.n	8006e62 <LCD_SpecialChar+0x12e>
	uint8_t Up[] = {0x00, 0x00, 0x04, 0x0E, 0x1F, 0x00, 0x00, 0x00};
 8006e7e:	4a22      	ldr	r2, [pc, #136]	; (8006f08 <LCD_SpecialChar+0x1d4>)
 8006e80:	f107 0308 	add.w	r3, r7, #8
 8006e84:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006e88:	e883 0003 	stmia.w	r3, {r0, r1}
	LCD_SendCommand(0x40+48);
 8006e8c:	2070      	movs	r0, #112	; 0x70
 8006e8e:	f000 f879 	bl	8006f84 <LCD_SendCommand>
	for (int i=0; i<8; i++) LCD_SendData(Up[i]);
 8006e92:	2300      	movs	r3, #0
 8006e94:	647b      	str	r3, [r7, #68]	; 0x44
 8006e96:	e00a      	b.n	8006eae <LCD_SpecialChar+0x17a>
 8006e98:	f107 0208 	add.w	r2, r7, #8
 8006e9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e9e:	4413      	add	r3, r2
 8006ea0:	781b      	ldrb	r3, [r3, #0]
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	f000 f90a 	bl	80070bc <LCD_SendData>
 8006ea8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006eaa:	3301      	adds	r3, #1
 8006eac:	647b      	str	r3, [r7, #68]	; 0x44
 8006eae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006eb0:	2b07      	cmp	r3, #7
 8006eb2:	ddf1      	ble.n	8006e98 <LCD_SpecialChar+0x164>
	uint8_t Down[] = {0x00, 0x00, 0x00, 0x1F, 0x0E, 0x04, 0x00, 0x00};
 8006eb4:	4a15      	ldr	r2, [pc, #84]	; (8006f0c <LCD_SpecialChar+0x1d8>)
 8006eb6:	463b      	mov	r3, r7
 8006eb8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006ebc:	e883 0003 	stmia.w	r3, {r0, r1}
	LCD_SendCommand(0x40+56);
 8006ec0:	2078      	movs	r0, #120	; 0x78
 8006ec2:	f000 f85f 	bl	8006f84 <LCD_SendCommand>
	for (int i=0; i<8; i++) LCD_SendData(Down[i]);
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	643b      	str	r3, [r7, #64]	; 0x40
 8006eca:	e009      	b.n	8006ee0 <LCD_SpecialChar+0x1ac>
 8006ecc:	463a      	mov	r2, r7
 8006ece:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ed0:	4413      	add	r3, r2
 8006ed2:	781b      	ldrb	r3, [r3, #0]
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	f000 f8f1 	bl	80070bc <LCD_SendData>
 8006eda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006edc:	3301      	adds	r3, #1
 8006ede:	643b      	str	r3, [r7, #64]	; 0x40
 8006ee0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ee2:	2b07      	cmp	r3, #7
 8006ee4:	ddf2      	ble.n	8006ecc <LCD_SpecialChar+0x198>
}
 8006ee6:	bf00      	nop
 8006ee8:	bf00      	nop
 8006eea:	3760      	adds	r7, #96	; 0x60
 8006eec:	46bd      	mov	sp, r7
 8006eee:	bd80      	pop	{r7, pc}
 8006ef0:	0800f348 	.word	0x0800f348
 8006ef4:	0800f350 	.word	0x0800f350
 8006ef8:	0800f358 	.word	0x0800f358
 8006efc:	0800f360 	.word	0x0800f360
 8006f00:	0800f368 	.word	0x0800f368
 8006f04:	0800f370 	.word	0x0800f370
 8006f08:	0800f378 	.word	0x0800f378
 8006f0c:	0800f380 	.word	0x0800f380

08006f10 <LCD_Init>:
/* STATIC FUNCTIONS ----------------------------------------------------------*/

/* GLOBAL FUNCTIONS ----------------------------------------------------------*/
void LCD_Init(void){
 8006f10:	b580      	push	{r7, lr}
 8006f12:	af00      	add	r7, sp, #0
	  HAL_Delay(50);
 8006f14:	2032      	movs	r0, #50	; 0x32
 8006f16:	f000 fee1 	bl	8007cdc <HAL_Delay>
	  LCD_SendCommand(0x03);
 8006f1a:	2003      	movs	r0, #3
 8006f1c:	f000 f832 	bl	8006f84 <LCD_SendCommand>
	  HAL_Delay(5);
 8006f20:	2005      	movs	r0, #5
 8006f22:	f000 fedb 	bl	8007cdc <HAL_Delay>
	  LCD_SendCommand(0x03);
 8006f26:	2003      	movs	r0, #3
 8006f28:	f000 f82c 	bl	8006f84 <LCD_SendCommand>
	  HAL_Delay(1);
 8006f2c:	2001      	movs	r0, #1
 8006f2e:	f000 fed5 	bl	8007cdc <HAL_Delay>
	  LCD_SendCommand(0x03);
 8006f32:	2003      	movs	r0, #3
 8006f34:	f000 f826 	bl	8006f84 <LCD_SendCommand>
	  HAL_Delay(1);
 8006f38:	2001      	movs	r0, #1
 8006f3a:	f000 fecf 	bl	8007cdc <HAL_Delay>
	  LCD_SendCommand(0x02);
 8006f3e:	2002      	movs	r0, #2
 8006f40:	f000 f820 	bl	8006f84 <LCD_SendCommand>
	  HAL_Delay(1);
 8006f44:	2001      	movs	r0, #1
 8006f46:	f000 fec9 	bl	8007cdc <HAL_Delay>

	  LCD_SendCommand(0x28);
 8006f4a:	2028      	movs	r0, #40	; 0x28
 8006f4c:	f000 f81a 	bl	8006f84 <LCD_SendCommand>
	  HAL_Delay(1);
 8006f50:	2001      	movs	r0, #1
 8006f52:	f000 fec3 	bl	8007cdc <HAL_Delay>

	  LCD_SendCommand(0x0C);
 8006f56:	200c      	movs	r0, #12
 8006f58:	f000 f814 	bl	8006f84 <LCD_SendCommand>
	  HAL_Delay(1);
 8006f5c:	2001      	movs	r0, #1
 8006f5e:	f000 febd 	bl	8007cdc <HAL_Delay>

	  LCD_SendCommand(0x01);
 8006f62:	2001      	movs	r0, #1
 8006f64:	f000 f80e 	bl	8006f84 <LCD_SendCommand>
	  HAL_Delay(2);
 8006f68:	2002      	movs	r0, #2
 8006f6a:	f000 feb7 	bl	8007cdc <HAL_Delay>

	  LCD_SendCommand(0x06);
 8006f6e:	2006      	movs	r0, #6
 8006f70:	f000 f808 	bl	8006f84 <LCD_SendCommand>
	  HAL_Delay(1);
 8006f74:	2001      	movs	r0, #1
 8006f76:	f000 feb1 	bl	8007cdc <HAL_Delay>
	  LCD_SpecialChar();
 8006f7a:	f7ff fedb 	bl	8006d34 <LCD_SpecialChar>
}
 8006f7e:	bf00      	nop
 8006f80:	bd80      	pop	{r7, pc}
	...

08006f84 <LCD_SendCommand>:

void LCD_SendCommand(uint8_t cmd){
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b082      	sub	sp, #8
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	71fb      	strb	r3, [r7, #7]
	  // Send high nibble
	  HAL_GPIO_WritePin(myLCD.RSP, myLCD.RS, GPIO_PIN_RESET);
 8006f8e:	4b4a      	ldr	r3, [pc, #296]	; (80070b8 <LCD_SendCommand+0x134>)
 8006f90:	6a1b      	ldr	r3, [r3, #32]
 8006f92:	4a49      	ldr	r2, [pc, #292]	; (80070b8 <LCD_SendCommand+0x134>)
 8006f94:	8951      	ldrh	r1, [r2, #10]
 8006f96:	2200      	movs	r2, #0
 8006f98:	4618      	mov	r0, r3
 8006f9a:	f002 f80c 	bl	8008fb6 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(myLCD.D4P, myLCD.D4, (cmd & 0x10) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8006f9e:	4b46      	ldr	r3, [pc, #280]	; (80070b8 <LCD_SendCommand+0x134>)
 8006fa0:	68d8      	ldr	r0, [r3, #12]
 8006fa2:	4b45      	ldr	r3, [pc, #276]	; (80070b8 <LCD_SendCommand+0x134>)
 8006fa4:	8819      	ldrh	r1, [r3, #0]
 8006fa6:	79fb      	ldrb	r3, [r7, #7]
 8006fa8:	111b      	asrs	r3, r3, #4
 8006faa:	b2db      	uxtb	r3, r3
 8006fac:	f003 0301 	and.w	r3, r3, #1
 8006fb0:	b2db      	uxtb	r3, r3
 8006fb2:	461a      	mov	r2, r3
 8006fb4:	f001 ffff 	bl	8008fb6 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(myLCD.D5P, myLCD.D5, (cmd & 0x20) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8006fb8:	4b3f      	ldr	r3, [pc, #252]	; (80070b8 <LCD_SendCommand+0x134>)
 8006fba:	6918      	ldr	r0, [r3, #16]
 8006fbc:	4b3e      	ldr	r3, [pc, #248]	; (80070b8 <LCD_SendCommand+0x134>)
 8006fbe:	8859      	ldrh	r1, [r3, #2]
 8006fc0:	79fb      	ldrb	r3, [r7, #7]
 8006fc2:	115b      	asrs	r3, r3, #5
 8006fc4:	b2db      	uxtb	r3, r3
 8006fc6:	f003 0301 	and.w	r3, r3, #1
 8006fca:	b2db      	uxtb	r3, r3
 8006fcc:	461a      	mov	r2, r3
 8006fce:	f001 fff2 	bl	8008fb6 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(myLCD.D6P, myLCD.D6, (cmd & 0x40) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8006fd2:	4b39      	ldr	r3, [pc, #228]	; (80070b8 <LCD_SendCommand+0x134>)
 8006fd4:	6958      	ldr	r0, [r3, #20]
 8006fd6:	4b38      	ldr	r3, [pc, #224]	; (80070b8 <LCD_SendCommand+0x134>)
 8006fd8:	8899      	ldrh	r1, [r3, #4]
 8006fda:	79fb      	ldrb	r3, [r7, #7]
 8006fdc:	119b      	asrs	r3, r3, #6
 8006fde:	b2db      	uxtb	r3, r3
 8006fe0:	f003 0301 	and.w	r3, r3, #1
 8006fe4:	b2db      	uxtb	r3, r3
 8006fe6:	461a      	mov	r2, r3
 8006fe8:	f001 ffe5 	bl	8008fb6 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(myLCD.D7P, myLCD.D7, (cmd & 0x80) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8006fec:	4b32      	ldr	r3, [pc, #200]	; (80070b8 <LCD_SendCommand+0x134>)
 8006fee:	6998      	ldr	r0, [r3, #24]
 8006ff0:	4b31      	ldr	r3, [pc, #196]	; (80070b8 <LCD_SendCommand+0x134>)
 8006ff2:	88d9      	ldrh	r1, [r3, #6]
 8006ff4:	79fb      	ldrb	r3, [r7, #7]
 8006ff6:	09db      	lsrs	r3, r3, #7
 8006ff8:	b2db      	uxtb	r3, r3
 8006ffa:	461a      	mov	r2, r3
 8006ffc:	f001 ffdb 	bl	8008fb6 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(myLCD.ENP, myLCD.EN, GPIO_PIN_SET);
 8007000:	4b2d      	ldr	r3, [pc, #180]	; (80070b8 <LCD_SendCommand+0x134>)
 8007002:	69db      	ldr	r3, [r3, #28]
 8007004:	4a2c      	ldr	r2, [pc, #176]	; (80070b8 <LCD_SendCommand+0x134>)
 8007006:	8911      	ldrh	r1, [r2, #8]
 8007008:	2201      	movs	r2, #1
 800700a:	4618      	mov	r0, r3
 800700c:	f001 ffd3 	bl	8008fb6 <HAL_GPIO_WritePin>
	  HAL_Delay(1);
 8007010:	2001      	movs	r0, #1
 8007012:	f000 fe63 	bl	8007cdc <HAL_Delay>
	  HAL_GPIO_WritePin(myLCD.ENP, myLCD.EN, GPIO_PIN_RESET);
 8007016:	4b28      	ldr	r3, [pc, #160]	; (80070b8 <LCD_SendCommand+0x134>)
 8007018:	69db      	ldr	r3, [r3, #28]
 800701a:	4a27      	ldr	r2, [pc, #156]	; (80070b8 <LCD_SendCommand+0x134>)
 800701c:	8911      	ldrh	r1, [r2, #8]
 800701e:	2200      	movs	r2, #0
 8007020:	4618      	mov	r0, r3
 8007022:	f001 ffc8 	bl	8008fb6 <HAL_GPIO_WritePin>

	  // Send low nibble
	  HAL_GPIO_WritePin(myLCD.D4P, myLCD.D4, (cmd & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8007026:	4b24      	ldr	r3, [pc, #144]	; (80070b8 <LCD_SendCommand+0x134>)
 8007028:	68d8      	ldr	r0, [r3, #12]
 800702a:	4b23      	ldr	r3, [pc, #140]	; (80070b8 <LCD_SendCommand+0x134>)
 800702c:	8819      	ldrh	r1, [r3, #0]
 800702e:	79fb      	ldrb	r3, [r7, #7]
 8007030:	f003 0301 	and.w	r3, r3, #1
 8007034:	b2db      	uxtb	r3, r3
 8007036:	461a      	mov	r2, r3
 8007038:	f001 ffbd 	bl	8008fb6 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(myLCD.D5P, myLCD.D5, (cmd & 0x02) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800703c:	4b1e      	ldr	r3, [pc, #120]	; (80070b8 <LCD_SendCommand+0x134>)
 800703e:	6918      	ldr	r0, [r3, #16]
 8007040:	4b1d      	ldr	r3, [pc, #116]	; (80070b8 <LCD_SendCommand+0x134>)
 8007042:	8859      	ldrh	r1, [r3, #2]
 8007044:	79fb      	ldrb	r3, [r7, #7]
 8007046:	105b      	asrs	r3, r3, #1
 8007048:	b2db      	uxtb	r3, r3
 800704a:	f003 0301 	and.w	r3, r3, #1
 800704e:	b2db      	uxtb	r3, r3
 8007050:	461a      	mov	r2, r3
 8007052:	f001 ffb0 	bl	8008fb6 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(myLCD.D6P, myLCD.D6, (cmd & 0x04) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8007056:	4b18      	ldr	r3, [pc, #96]	; (80070b8 <LCD_SendCommand+0x134>)
 8007058:	6958      	ldr	r0, [r3, #20]
 800705a:	4b17      	ldr	r3, [pc, #92]	; (80070b8 <LCD_SendCommand+0x134>)
 800705c:	8899      	ldrh	r1, [r3, #4]
 800705e:	79fb      	ldrb	r3, [r7, #7]
 8007060:	109b      	asrs	r3, r3, #2
 8007062:	b2db      	uxtb	r3, r3
 8007064:	f003 0301 	and.w	r3, r3, #1
 8007068:	b2db      	uxtb	r3, r3
 800706a:	461a      	mov	r2, r3
 800706c:	f001 ffa3 	bl	8008fb6 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(myLCD.D7P, myLCD.D7, (cmd & 0x08) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8007070:	4b11      	ldr	r3, [pc, #68]	; (80070b8 <LCD_SendCommand+0x134>)
 8007072:	6998      	ldr	r0, [r3, #24]
 8007074:	4b10      	ldr	r3, [pc, #64]	; (80070b8 <LCD_SendCommand+0x134>)
 8007076:	88d9      	ldrh	r1, [r3, #6]
 8007078:	79fb      	ldrb	r3, [r7, #7]
 800707a:	10db      	asrs	r3, r3, #3
 800707c:	b2db      	uxtb	r3, r3
 800707e:	f003 0301 	and.w	r3, r3, #1
 8007082:	b2db      	uxtb	r3, r3
 8007084:	461a      	mov	r2, r3
 8007086:	f001 ff96 	bl	8008fb6 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(myLCD.ENP, myLCD.EN, GPIO_PIN_SET);
 800708a:	4b0b      	ldr	r3, [pc, #44]	; (80070b8 <LCD_SendCommand+0x134>)
 800708c:	69db      	ldr	r3, [r3, #28]
 800708e:	4a0a      	ldr	r2, [pc, #40]	; (80070b8 <LCD_SendCommand+0x134>)
 8007090:	8911      	ldrh	r1, [r2, #8]
 8007092:	2201      	movs	r2, #1
 8007094:	4618      	mov	r0, r3
 8007096:	f001 ff8e 	bl	8008fb6 <HAL_GPIO_WritePin>
	  HAL_Delay(1);
 800709a:	2001      	movs	r0, #1
 800709c:	f000 fe1e 	bl	8007cdc <HAL_Delay>
	  HAL_GPIO_WritePin(myLCD.ENP, myLCD.EN, GPIO_PIN_RESET);
 80070a0:	4b05      	ldr	r3, [pc, #20]	; (80070b8 <LCD_SendCommand+0x134>)
 80070a2:	69db      	ldr	r3, [r3, #28]
 80070a4:	4a04      	ldr	r2, [pc, #16]	; (80070b8 <LCD_SendCommand+0x134>)
 80070a6:	8911      	ldrh	r1, [r2, #8]
 80070a8:	2200      	movs	r2, #0
 80070aa:	4618      	mov	r0, r3
 80070ac:	f001 ff83 	bl	8008fb6 <HAL_GPIO_WritePin>
}
 80070b0:	bf00      	nop
 80070b2:	3708      	adds	r7, #8
 80070b4:	46bd      	mov	sp, r7
 80070b6:	bd80      	pop	{r7, pc}
 80070b8:	200004b8 	.word	0x200004b8

080070bc <LCD_SendData>:

void LCD_SendData(uint8_t data){
 80070bc:	b580      	push	{r7, lr}
 80070be:	b082      	sub	sp, #8
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	4603      	mov	r3, r0
 80070c4:	71fb      	strb	r3, [r7, #7]
	  // Send high nibble
	  HAL_GPIO_WritePin(myLCD.RSP, myLCD.RS, GPIO_PIN_SET);
 80070c6:	4b4a      	ldr	r3, [pc, #296]	; (80071f0 <LCD_SendData+0x134>)
 80070c8:	6a1b      	ldr	r3, [r3, #32]
 80070ca:	4a49      	ldr	r2, [pc, #292]	; (80071f0 <LCD_SendData+0x134>)
 80070cc:	8951      	ldrh	r1, [r2, #10]
 80070ce:	2201      	movs	r2, #1
 80070d0:	4618      	mov	r0, r3
 80070d2:	f001 ff70 	bl	8008fb6 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(myLCD.D4P, myLCD.D4, (data & 0x10) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80070d6:	4b46      	ldr	r3, [pc, #280]	; (80071f0 <LCD_SendData+0x134>)
 80070d8:	68d8      	ldr	r0, [r3, #12]
 80070da:	4b45      	ldr	r3, [pc, #276]	; (80071f0 <LCD_SendData+0x134>)
 80070dc:	8819      	ldrh	r1, [r3, #0]
 80070de:	79fb      	ldrb	r3, [r7, #7]
 80070e0:	111b      	asrs	r3, r3, #4
 80070e2:	b2db      	uxtb	r3, r3
 80070e4:	f003 0301 	and.w	r3, r3, #1
 80070e8:	b2db      	uxtb	r3, r3
 80070ea:	461a      	mov	r2, r3
 80070ec:	f001 ff63 	bl	8008fb6 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(myLCD.D5P, myLCD.D5, (data & 0x20) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80070f0:	4b3f      	ldr	r3, [pc, #252]	; (80071f0 <LCD_SendData+0x134>)
 80070f2:	6918      	ldr	r0, [r3, #16]
 80070f4:	4b3e      	ldr	r3, [pc, #248]	; (80071f0 <LCD_SendData+0x134>)
 80070f6:	8859      	ldrh	r1, [r3, #2]
 80070f8:	79fb      	ldrb	r3, [r7, #7]
 80070fa:	115b      	asrs	r3, r3, #5
 80070fc:	b2db      	uxtb	r3, r3
 80070fe:	f003 0301 	and.w	r3, r3, #1
 8007102:	b2db      	uxtb	r3, r3
 8007104:	461a      	mov	r2, r3
 8007106:	f001 ff56 	bl	8008fb6 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(myLCD.D6P, myLCD.D6, (data & 0x40) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800710a:	4b39      	ldr	r3, [pc, #228]	; (80071f0 <LCD_SendData+0x134>)
 800710c:	6958      	ldr	r0, [r3, #20]
 800710e:	4b38      	ldr	r3, [pc, #224]	; (80071f0 <LCD_SendData+0x134>)
 8007110:	8899      	ldrh	r1, [r3, #4]
 8007112:	79fb      	ldrb	r3, [r7, #7]
 8007114:	119b      	asrs	r3, r3, #6
 8007116:	b2db      	uxtb	r3, r3
 8007118:	f003 0301 	and.w	r3, r3, #1
 800711c:	b2db      	uxtb	r3, r3
 800711e:	461a      	mov	r2, r3
 8007120:	f001 ff49 	bl	8008fb6 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(myLCD.D7P, myLCD.D7, (data & 0x80) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8007124:	4b32      	ldr	r3, [pc, #200]	; (80071f0 <LCD_SendData+0x134>)
 8007126:	6998      	ldr	r0, [r3, #24]
 8007128:	4b31      	ldr	r3, [pc, #196]	; (80071f0 <LCD_SendData+0x134>)
 800712a:	88d9      	ldrh	r1, [r3, #6]
 800712c:	79fb      	ldrb	r3, [r7, #7]
 800712e:	09db      	lsrs	r3, r3, #7
 8007130:	b2db      	uxtb	r3, r3
 8007132:	461a      	mov	r2, r3
 8007134:	f001 ff3f 	bl	8008fb6 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(myLCD.ENP, myLCD.EN, GPIO_PIN_SET);
 8007138:	4b2d      	ldr	r3, [pc, #180]	; (80071f0 <LCD_SendData+0x134>)
 800713a:	69db      	ldr	r3, [r3, #28]
 800713c:	4a2c      	ldr	r2, [pc, #176]	; (80071f0 <LCD_SendData+0x134>)
 800713e:	8911      	ldrh	r1, [r2, #8]
 8007140:	2201      	movs	r2, #1
 8007142:	4618      	mov	r0, r3
 8007144:	f001 ff37 	bl	8008fb6 <HAL_GPIO_WritePin>
	  HAL_Delay(1);
 8007148:	2001      	movs	r0, #1
 800714a:	f000 fdc7 	bl	8007cdc <HAL_Delay>
	  HAL_GPIO_WritePin(myLCD.ENP, myLCD.EN, GPIO_PIN_RESET);
 800714e:	4b28      	ldr	r3, [pc, #160]	; (80071f0 <LCD_SendData+0x134>)
 8007150:	69db      	ldr	r3, [r3, #28]
 8007152:	4a27      	ldr	r2, [pc, #156]	; (80071f0 <LCD_SendData+0x134>)
 8007154:	8911      	ldrh	r1, [r2, #8]
 8007156:	2200      	movs	r2, #0
 8007158:	4618      	mov	r0, r3
 800715a:	f001 ff2c 	bl	8008fb6 <HAL_GPIO_WritePin>

	  // Send low nibble
	  HAL_GPIO_WritePin(myLCD.D4P, myLCD.D4, (data & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800715e:	4b24      	ldr	r3, [pc, #144]	; (80071f0 <LCD_SendData+0x134>)
 8007160:	68d8      	ldr	r0, [r3, #12]
 8007162:	4b23      	ldr	r3, [pc, #140]	; (80071f0 <LCD_SendData+0x134>)
 8007164:	8819      	ldrh	r1, [r3, #0]
 8007166:	79fb      	ldrb	r3, [r7, #7]
 8007168:	f003 0301 	and.w	r3, r3, #1
 800716c:	b2db      	uxtb	r3, r3
 800716e:	461a      	mov	r2, r3
 8007170:	f001 ff21 	bl	8008fb6 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(myLCD.D5P, myLCD.D5, (data & 0x02) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8007174:	4b1e      	ldr	r3, [pc, #120]	; (80071f0 <LCD_SendData+0x134>)
 8007176:	6918      	ldr	r0, [r3, #16]
 8007178:	4b1d      	ldr	r3, [pc, #116]	; (80071f0 <LCD_SendData+0x134>)
 800717a:	8859      	ldrh	r1, [r3, #2]
 800717c:	79fb      	ldrb	r3, [r7, #7]
 800717e:	105b      	asrs	r3, r3, #1
 8007180:	b2db      	uxtb	r3, r3
 8007182:	f003 0301 	and.w	r3, r3, #1
 8007186:	b2db      	uxtb	r3, r3
 8007188:	461a      	mov	r2, r3
 800718a:	f001 ff14 	bl	8008fb6 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(myLCD.D6P, myLCD.D6, (data & 0x04) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800718e:	4b18      	ldr	r3, [pc, #96]	; (80071f0 <LCD_SendData+0x134>)
 8007190:	6958      	ldr	r0, [r3, #20]
 8007192:	4b17      	ldr	r3, [pc, #92]	; (80071f0 <LCD_SendData+0x134>)
 8007194:	8899      	ldrh	r1, [r3, #4]
 8007196:	79fb      	ldrb	r3, [r7, #7]
 8007198:	109b      	asrs	r3, r3, #2
 800719a:	b2db      	uxtb	r3, r3
 800719c:	f003 0301 	and.w	r3, r3, #1
 80071a0:	b2db      	uxtb	r3, r3
 80071a2:	461a      	mov	r2, r3
 80071a4:	f001 ff07 	bl	8008fb6 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(myLCD.D7P, myLCD.D7, (data & 0x08) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80071a8:	4b11      	ldr	r3, [pc, #68]	; (80071f0 <LCD_SendData+0x134>)
 80071aa:	6998      	ldr	r0, [r3, #24]
 80071ac:	4b10      	ldr	r3, [pc, #64]	; (80071f0 <LCD_SendData+0x134>)
 80071ae:	88d9      	ldrh	r1, [r3, #6]
 80071b0:	79fb      	ldrb	r3, [r7, #7]
 80071b2:	10db      	asrs	r3, r3, #3
 80071b4:	b2db      	uxtb	r3, r3
 80071b6:	f003 0301 	and.w	r3, r3, #1
 80071ba:	b2db      	uxtb	r3, r3
 80071bc:	461a      	mov	r2, r3
 80071be:	f001 fefa 	bl	8008fb6 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(myLCD.ENP, myLCD.EN, GPIO_PIN_SET);
 80071c2:	4b0b      	ldr	r3, [pc, #44]	; (80071f0 <LCD_SendData+0x134>)
 80071c4:	69db      	ldr	r3, [r3, #28]
 80071c6:	4a0a      	ldr	r2, [pc, #40]	; (80071f0 <LCD_SendData+0x134>)
 80071c8:	8911      	ldrh	r1, [r2, #8]
 80071ca:	2201      	movs	r2, #1
 80071cc:	4618      	mov	r0, r3
 80071ce:	f001 fef2 	bl	8008fb6 <HAL_GPIO_WritePin>
	  HAL_Delay(1);
 80071d2:	2001      	movs	r0, #1
 80071d4:	f000 fd82 	bl	8007cdc <HAL_Delay>
	  HAL_GPIO_WritePin(myLCD.ENP, myLCD.EN, GPIO_PIN_RESET);
 80071d8:	4b05      	ldr	r3, [pc, #20]	; (80071f0 <LCD_SendData+0x134>)
 80071da:	69db      	ldr	r3, [r3, #28]
 80071dc:	4a04      	ldr	r2, [pc, #16]	; (80071f0 <LCD_SendData+0x134>)
 80071de:	8911      	ldrh	r1, [r2, #8]
 80071e0:	2200      	movs	r2, #0
 80071e2:	4618      	mov	r0, r3
 80071e4:	f001 fee7 	bl	8008fb6 <HAL_GPIO_WritePin>
}
 80071e8:	bf00      	nop
 80071ea:	3708      	adds	r7, #8
 80071ec:	46bd      	mov	sp, r7
 80071ee:	bd80      	pop	{r7, pc}
 80071f0:	200004b8 	.word	0x200004b8

080071f4 <LCD_GotoXY>:

void LCD_GotoXY(uint8_t x, uint8_t y){
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b084      	sub	sp, #16
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	4603      	mov	r3, r0
 80071fc:	460a      	mov	r2, r1
 80071fe:	71fb      	strb	r3, [r7, #7]
 8007200:	4613      	mov	r3, r2
 8007202:	71bb      	strb	r3, [r7, #6]
    uint8_t address;
    if (y == 0) {
 8007204:	79bb      	ldrb	r3, [r7, #6]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d103      	bne.n	8007212 <LCD_GotoXY+0x1e>
        address = 0x80 + x;
 800720a:	79fb      	ldrb	r3, [r7, #7]
 800720c:	3b80      	subs	r3, #128	; 0x80
 800720e:	73fb      	strb	r3, [r7, #15]
 8007210:	e013      	b.n	800723a <LCD_GotoXY+0x46>
    } else if (y == 1) {
 8007212:	79bb      	ldrb	r3, [r7, #6]
 8007214:	2b01      	cmp	r3, #1
 8007216:	d103      	bne.n	8007220 <LCD_GotoXY+0x2c>
        address = 0xC0 + x;
 8007218:	79fb      	ldrb	r3, [r7, #7]
 800721a:	3b40      	subs	r3, #64	; 0x40
 800721c:	73fb      	strb	r3, [r7, #15]
 800721e:	e00c      	b.n	800723a <LCD_GotoXY+0x46>
    } else if (y == 2){
 8007220:	79bb      	ldrb	r3, [r7, #6]
 8007222:	2b02      	cmp	r3, #2
 8007224:	d103      	bne.n	800722e <LCD_GotoXY+0x3a>
        address = 0x80 + x + 16;
 8007226:	79fb      	ldrb	r3, [r7, #7]
 8007228:	3b70      	subs	r3, #112	; 0x70
 800722a:	73fb      	strb	r3, [r7, #15]
 800722c:	e005      	b.n	800723a <LCD_GotoXY+0x46>
    } else if (y == 3){
 800722e:	79bb      	ldrb	r3, [r7, #6]
 8007230:	2b03      	cmp	r3, #3
 8007232:	d102      	bne.n	800723a <LCD_GotoXY+0x46>
        address = 0xC0 + x + 16;
 8007234:	79fb      	ldrb	r3, [r7, #7]
 8007236:	3b30      	subs	r3, #48	; 0x30
 8007238:	73fb      	strb	r3, [r7, #15]
    }
    LCD_SendCommand(address);
 800723a:	7bfb      	ldrb	r3, [r7, #15]
 800723c:	4618      	mov	r0, r3
 800723e:	f7ff fea1 	bl	8006f84 <LCD_SendCommand>
}
 8007242:	bf00      	nop
 8007244:	3710      	adds	r7, #16
 8007246:	46bd      	mov	sp, r7
 8007248:	bd80      	pop	{r7, pc}

0800724a <LCD_Print>:

void LCD_Print(char *str){
 800724a:	b580      	push	{r7, lr}
 800724c:	b082      	sub	sp, #8
 800724e:	af00      	add	r7, sp, #0
 8007250:	6078      	str	r0, [r7, #4]
    while (*str) {
 8007252:	e006      	b.n	8007262 <LCD_Print+0x18>
        LCD_SendData(*str++);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	1c5a      	adds	r2, r3, #1
 8007258:	607a      	str	r2, [r7, #4]
 800725a:	781b      	ldrb	r3, [r3, #0]
 800725c:	4618      	mov	r0, r3
 800725e:	f7ff ff2d 	bl	80070bc <LCD_SendData>
    while (*str) {
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	781b      	ldrb	r3, [r3, #0]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d1f4      	bne.n	8007254 <LCD_Print+0xa>
    }
}
 800726a:	bf00      	nop
 800726c:	bf00      	nop
 800726e:	3708      	adds	r7, #8
 8007270:	46bd      	mov	sp, r7
 8007272:	bd80      	pop	{r7, pc}

08007274 <LCD_Clear>:
	memset(tmpbuffer, 0, 10);
	sprintf((char*)tmpbuffer, "%d", number);
	LCD_Print((char*)tmpbuffer);
}

void LCD_Clear(){
 8007274:	b580      	push	{r7, lr}
 8007276:	af00      	add	r7, sp, #0
	LCD_SendCommand(0x01);
 8007278:	2001      	movs	r0, #1
 800727a:	f7ff fe83 	bl	8006f84 <LCD_SendCommand>
}
 800727e:	bf00      	nop
 8007280:	bd80      	pop	{r7, pc}
	...

08007284 <Screen_Init>:

/* STATIC FUNCTIONS ----------------------------------------------------------*/

/* GLOBAL FUNCTIONS ----------------------------------------------------------*/
void Screen_Init(_RTC *myRTC)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b082      	sub	sp, #8
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
	__MY_RTC = myRTC;
 800728c:	4a05      	ldr	r2, [pc, #20]	; (80072a4 <Screen_Init+0x20>)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6013      	str	r3, [r2, #0]
//	__MY_RTC->Date = 1;
//	__MY_RTC->Hour = 15;
//	__MY_RTC->Min = 17;
//	__MY_RTC->Sec = 0;
//	DS3231_SetTime(__MY_RTC);
	LCD_Init();
 8007292:	f7ff fe3d 	bl	8006f10 <LCD_Init>
	LCD_Clear();
 8007296:	f7ff ffed 	bl	8007274 <LCD_Clear>
//	HAL_Delay(1000);
//	LCD_GotoXY(0, 0);
//	LCD_Print("Hello!");
}
 800729a:	bf00      	nop
 800729c:	3708      	adds	r7, #8
 800729e:	46bd      	mov	sp, r7
 80072a0:	bd80      	pop	{r7, pc}
 80072a2:	bf00      	nop
 80072a4:	20002c0c 	.word	0x20002c0c

080072a8 <Screen_Home_Origin>:

void Screen_Home_Origin(uint8_t ID, uint8_t connectflag)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b08a      	sub	sp, #40	; 0x28
 80072ac:	af02      	add	r7, sp, #8
 80072ae:	4603      	mov	r3, r0
 80072b0:	460a      	mov	r2, r1
 80072b2:	71fb      	strb	r3, [r7, #7]
 80072b4:	4613      	mov	r3, r2
 80072b6:	71bb      	strb	r3, [r7, #6]
    char buffer[20];
    DS3231_GetTime(__MY_RTC);
 80072b8:	4b3c      	ldr	r3, [pc, #240]	; (80073ac <Screen_Home_Origin+0x104>)
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	4618      	mov	r0, r3
 80072be:	f7fc feff 	bl	80040c0 <DS3231_GetTime>
//	LCD_Clear();
    LCD_GotoXY(11, 1);
 80072c2:	2101      	movs	r1, #1
 80072c4:	200b      	movs	r0, #11
 80072c6:	f7ff ff95 	bl	80071f4 <LCD_GotoXY>
    LCD_Print("NETW");
 80072ca:	4839      	ldr	r0, [pc, #228]	; (80073b0 <Screen_Home_Origin+0x108>)
 80072cc:	f7ff ffbd 	bl	800724a <LCD_Print>
    LCD_GotoXY(12, 2);
 80072d0:	2102      	movs	r1, #2
 80072d2:	200c      	movs	r0, #12
 80072d4:	f7ff ff8e 	bl	80071f4 <LCD_GotoXY>
    if (connectflag)	{
 80072d8:	79bb      	ldrb	r3, [r7, #6]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d003      	beq.n	80072e6 <Screen_Home_Origin+0x3e>
    	LCD_Print("ONL");
 80072de:	4835      	ldr	r0, [pc, #212]	; (80073b4 <Screen_Home_Origin+0x10c>)
 80072e0:	f7ff ffb3 	bl	800724a <LCD_Print>
 80072e4:	e002      	b.n	80072ec <Screen_Home_Origin+0x44>
    }
    else {
    	LCD_Print("OFF");
 80072e6:	4834      	ldr	r0, [pc, #208]	; (80073b8 <Screen_Home_Origin+0x110>)
 80072e8:	f7ff ffaf 	bl	800724a <LCD_Print>
    }

	LCD_GotoXY(0, 0);
 80072ec:	2100      	movs	r1, #0
 80072ee:	2000      	movs	r0, #0
 80072f0:	f7ff ff80 	bl	80071f4 <LCD_GotoXY>
//	LCD_Print("Station Node");
//    LCD_GotoXY(0, 1);
    sprintf(buffer,"Station ID: 0x%02X", ID);
 80072f4:	79fa      	ldrb	r2, [r7, #7]
 80072f6:	f107 030c 	add.w	r3, r7, #12
 80072fa:	4930      	ldr	r1, [pc, #192]	; (80073bc <Screen_Home_Origin+0x114>)
 80072fc:	4618      	mov	r0, r3
 80072fe:	f005 fb55 	bl	800c9ac <siprintf>
    LCD_Print(buffer);
 8007302:	f107 030c 	add.w	r3, r7, #12
 8007306:	4618      	mov	r0, r3
 8007308:	f7ff ff9f 	bl	800724a <LCD_Print>
    LCD_GotoXY(0, 1);
 800730c:	2101      	movs	r1, #1
 800730e:	2000      	movs	r0, #0
 8007310:	f7ff ff70 	bl	80071f4 <LCD_GotoXY>
    sprintf(buffer,"%02d/%02d/%d", __MY_RTC->Date, __MY_RTC->Month, __MY_RTC->Year);
 8007314:	4b25      	ldr	r3, [pc, #148]	; (80073ac <Screen_Home_Origin+0x104>)
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	789b      	ldrb	r3, [r3, #2]
 800731a:	461a      	mov	r2, r3
 800731c:	4b23      	ldr	r3, [pc, #140]	; (80073ac <Screen_Home_Origin+0x104>)
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	785b      	ldrb	r3, [r3, #1]
 8007322:	4619      	mov	r1, r3
 8007324:	4b21      	ldr	r3, [pc, #132]	; (80073ac <Screen_Home_Origin+0x104>)
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	781b      	ldrb	r3, [r3, #0]
 800732a:	f107 000c 	add.w	r0, r7, #12
 800732e:	9300      	str	r3, [sp, #0]
 8007330:	460b      	mov	r3, r1
 8007332:	4923      	ldr	r1, [pc, #140]	; (80073c0 <Screen_Home_Origin+0x118>)
 8007334:	f005 fb3a 	bl	800c9ac <siprintf>
    LCD_Print(buffer);
 8007338:	f107 030c 	add.w	r3, r7, #12
 800733c:	4618      	mov	r0, r3
 800733e:	f7ff ff84 	bl	800724a <LCD_Print>
    LCD_GotoXY(0, 2);
 8007342:	2102      	movs	r1, #2
 8007344:	2000      	movs	r0, #0
 8007346:	f7ff ff55 	bl	80071f4 <LCD_GotoXY>
    sprintf(buffer,"%02d:%02d:%02d", __MY_RTC->Hour, __MY_RTC->Min, __MY_RTC->Sec);
 800734a:	4b18      	ldr	r3, [pc, #96]	; (80073ac <Screen_Home_Origin+0x104>)
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	791b      	ldrb	r3, [r3, #4]
 8007350:	461a      	mov	r2, r3
 8007352:	4b16      	ldr	r3, [pc, #88]	; (80073ac <Screen_Home_Origin+0x104>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	795b      	ldrb	r3, [r3, #5]
 8007358:	4619      	mov	r1, r3
 800735a:	4b14      	ldr	r3, [pc, #80]	; (80073ac <Screen_Home_Origin+0x104>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	799b      	ldrb	r3, [r3, #6]
 8007360:	f107 000c 	add.w	r0, r7, #12
 8007364:	9300      	str	r3, [sp, #0]
 8007366:	460b      	mov	r3, r1
 8007368:	4916      	ldr	r1, [pc, #88]	; (80073c4 <Screen_Home_Origin+0x11c>)
 800736a:	f005 fb1f 	bl	800c9ac <siprintf>
    LCD_Print(buffer);
 800736e:	f107 030c 	add.w	r3, r7, #12
 8007372:	4618      	mov	r0, r3
 8007374:	f7ff ff69 	bl	800724a <LCD_Print>
    LCD_GotoXY(5, 3);
 8007378:	2103      	movs	r1, #3
 800737a:	2005      	movs	r0, #5
 800737c:	f7ff ff3a 	bl	80071f4 <LCD_GotoXY>
    LCD_SendData(_LCD_CHAR_LEFT);
 8007380:	2002      	movs	r0, #2
 8007382:	f7ff fe9b 	bl	80070bc <LCD_SendData>
    LCD_GotoXY(6, 3);
 8007386:	2103      	movs	r1, #3
 8007388:	2006      	movs	r0, #6
 800738a:	f7ff ff33 	bl	80071f4 <LCD_GotoXY>
    LCD_Print("HOME");
 800738e:	480e      	ldr	r0, [pc, #56]	; (80073c8 <Screen_Home_Origin+0x120>)
 8007390:	f7ff ff5b 	bl	800724a <LCD_Print>
    LCD_GotoXY(10,3);
 8007394:	2103      	movs	r1, #3
 8007396:	200a      	movs	r0, #10
 8007398:	f7ff ff2c 	bl	80071f4 <LCD_GotoXY>
    LCD_SendData(_LCD_CHAR_RIGHT);
 800739c:	2000      	movs	r0, #0
 800739e:	f7ff fe8d 	bl	80070bc <LCD_SendData>
}
 80073a2:	bf00      	nop
 80073a4:	3720      	adds	r7, #32
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bd80      	pop	{r7, pc}
 80073aa:	bf00      	nop
 80073ac:	20002c0c 	.word	0x20002c0c
 80073b0:	0800f38c 	.word	0x0800f38c
 80073b4:	0800f394 	.word	0x0800f394
 80073b8:	0800f398 	.word	0x0800f398
 80073bc:	0800f39c 	.word	0x0800f39c
 80073c0:	0800f3b0 	.word	0x0800f3b0
 80073c4:	0800f3c0 	.word	0x0800f3c0
 80073c8:	0800f3d0 	.word	0x0800f3d0

080073cc <Screen_Home_Sync>:

void Screen_Home_Sync(uint8_t time)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b088      	sub	sp, #32
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	4603      	mov	r3, r0
 80073d4:	71fb      	strb	r3, [r7, #7]
    char buffer[20];
//	LCD_Clear();
	LCD_GotoXY(1, 0);
 80073d6:	2100      	movs	r1, #0
 80073d8:	2001      	movs	r0, #1
 80073da:	f7ff ff0b 	bl	80071f4 <LCD_GotoXY>
	LCD_Print("Received Order");
 80073de:	4819      	ldr	r0, [pc, #100]	; (8007444 <Screen_Home_Sync+0x78>)
 80073e0:	f7ff ff33 	bl	800724a <LCD_Print>

    LCD_GotoXY(1, 1);
 80073e4:	2101      	movs	r1, #1
 80073e6:	2001      	movs	r0, #1
 80073e8:	f7ff ff04 	bl	80071f4 <LCD_GotoXY>
    LCD_Print("OFF after:");
 80073ec:	4816      	ldr	r0, [pc, #88]	; (8007448 <Screen_Home_Sync+0x7c>)
 80073ee:	f7ff ff2c 	bl	800724a <LCD_Print>
    LCD_GotoXY(6, 2);
 80073f2:	2102      	movs	r1, #2
 80073f4:	2006      	movs	r0, #6
 80073f6:	f7ff fefd 	bl	80071f4 <LCD_GotoXY>
    sprintf(buffer, "%03ds", time);
 80073fa:	79fa      	ldrb	r2, [r7, #7]
 80073fc:	f107 030c 	add.w	r3, r7, #12
 8007400:	4912      	ldr	r1, [pc, #72]	; (800744c <Screen_Home_Sync+0x80>)
 8007402:	4618      	mov	r0, r3
 8007404:	f005 fad2 	bl	800c9ac <siprintf>
    LCD_Print(buffer);
 8007408:	f107 030c 	add.w	r3, r7, #12
 800740c:	4618      	mov	r0, r3
 800740e:	f7ff ff1c 	bl	800724a <LCD_Print>
    LCD_GotoXY(5, 3);
 8007412:	2103      	movs	r1, #3
 8007414:	2005      	movs	r0, #5
 8007416:	f7ff feed 	bl	80071f4 <LCD_GotoXY>
    LCD_SendData(_LCD_CHAR_LEFT);
 800741a:	2002      	movs	r0, #2
 800741c:	f7ff fe4e 	bl	80070bc <LCD_SendData>
    LCD_GotoXY(6, 3);
 8007420:	2103      	movs	r1, #3
 8007422:	2006      	movs	r0, #6
 8007424:	f7ff fee6 	bl	80071f4 <LCD_GotoXY>
    LCD_Print("HOME");
 8007428:	4809      	ldr	r0, [pc, #36]	; (8007450 <Screen_Home_Sync+0x84>)
 800742a:	f7ff ff0e 	bl	800724a <LCD_Print>
    LCD_GotoXY(10,3);
 800742e:	2103      	movs	r1, #3
 8007430:	200a      	movs	r0, #10
 8007432:	f7ff fedf 	bl	80071f4 <LCD_GotoXY>
    LCD_SendData(_LCD_CHAR_RIGHT);
 8007436:	2000      	movs	r0, #0
 8007438:	f7ff fe40 	bl	80070bc <LCD_SendData>
}
 800743c:	bf00      	nop
 800743e:	3720      	adds	r7, #32
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}
 8007444:	0800f3d8 	.word	0x0800f3d8
 8007448:	0800f3e8 	.word	0x0800f3e8
 800744c:	0800f3f4 	.word	0x0800f3f4
 8007450:	0800f3d0 	.word	0x0800f3d0

08007454 <Screen_Home_Calib>:
		LCD_Print(buffer);
	}
}

void Screen_Home_Calib(void)
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b088      	sub	sp, #32
 8007458:	af02      	add	r7, sp, #8
    char buffer[20];
//    DS3231_GetTime(&__MY_RTC);
//	LCD_Clear();
	LCD_GotoXY(1, 0);
 800745a:	2100      	movs	r1, #0
 800745c:	2001      	movs	r0, #1
 800745e:	f7ff fec9 	bl	80071f4 <LCD_GotoXY>
	LCD_Print("Received Order");
 8007462:	4827      	ldr	r0, [pc, #156]	; (8007500 <Screen_Home_Calib+0xac>)
 8007464:	f7ff fef1 	bl	800724a <LCD_Print>
    LCD_GotoXY(0, 1);
 8007468:	2101      	movs	r1, #1
 800746a:	2000      	movs	r0, #0
 800746c:	f7ff fec2 	bl	80071f4 <LCD_GotoXY>
    sprintf(buffer,"SWoff: %02dh%02dm%02ds", __MY_RTC->Hour, __MY_RTC->Min, __MY_RTC->Sec);
 8007470:	4b24      	ldr	r3, [pc, #144]	; (8007504 <Screen_Home_Calib+0xb0>)
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	791b      	ldrb	r3, [r3, #4]
 8007476:	461a      	mov	r2, r3
 8007478:	4b22      	ldr	r3, [pc, #136]	; (8007504 <Screen_Home_Calib+0xb0>)
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	795b      	ldrb	r3, [r3, #5]
 800747e:	4619      	mov	r1, r3
 8007480:	4b20      	ldr	r3, [pc, #128]	; (8007504 <Screen_Home_Calib+0xb0>)
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	799b      	ldrb	r3, [r3, #6]
 8007486:	1d38      	adds	r0, r7, #4
 8007488:	9300      	str	r3, [sp, #0]
 800748a:	460b      	mov	r3, r1
 800748c:	491e      	ldr	r1, [pc, #120]	; (8007508 <Screen_Home_Calib+0xb4>)
 800748e:	f005 fa8d 	bl	800c9ac <siprintf>
    LCD_Print(buffer);
 8007492:	1d3b      	adds	r3, r7, #4
 8007494:	4618      	mov	r0, r3
 8007496:	f7ff fed8 	bl	800724a <LCD_Print>
    LCD_GotoXY(0, 2);
 800749a:	2102      	movs	r1, #2
 800749c:	2000      	movs	r0, #0
 800749e:	f7ff fea9 	bl	80071f4 <LCD_GotoXY>
    sprintf(buffer,"Date:  %02d/%02d/%d", __MY_RTC->Date, __MY_RTC->Month, __MY_RTC->Year);
 80074a2:	4b18      	ldr	r3, [pc, #96]	; (8007504 <Screen_Home_Calib+0xb0>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	789b      	ldrb	r3, [r3, #2]
 80074a8:	461a      	mov	r2, r3
 80074aa:	4b16      	ldr	r3, [pc, #88]	; (8007504 <Screen_Home_Calib+0xb0>)
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	785b      	ldrb	r3, [r3, #1]
 80074b0:	4619      	mov	r1, r3
 80074b2:	4b14      	ldr	r3, [pc, #80]	; (8007504 <Screen_Home_Calib+0xb0>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	781b      	ldrb	r3, [r3, #0]
 80074b8:	1d38      	adds	r0, r7, #4
 80074ba:	9300      	str	r3, [sp, #0]
 80074bc:	460b      	mov	r3, r1
 80074be:	4913      	ldr	r1, [pc, #76]	; (800750c <Screen_Home_Calib+0xb8>)
 80074c0:	f005 fa74 	bl	800c9ac <siprintf>
    LCD_Print(buffer);
 80074c4:	1d3b      	adds	r3, r7, #4
 80074c6:	4618      	mov	r0, r3
 80074c8:	f7ff febf 	bl	800724a <LCD_Print>
    LCD_GotoXY(5, 3);
 80074cc:	2103      	movs	r1, #3
 80074ce:	2005      	movs	r0, #5
 80074d0:	f7ff fe90 	bl	80071f4 <LCD_GotoXY>
    LCD_SendData(_LCD_CHAR_LEFT);
 80074d4:	2002      	movs	r0, #2
 80074d6:	f7ff fdf1 	bl	80070bc <LCD_SendData>
    LCD_GotoXY(6, 3);
 80074da:	2103      	movs	r1, #3
 80074dc:	2006      	movs	r0, #6
 80074de:	f7ff fe89 	bl	80071f4 <LCD_GotoXY>
    LCD_Print("HOME");
 80074e2:	480b      	ldr	r0, [pc, #44]	; (8007510 <Screen_Home_Calib+0xbc>)
 80074e4:	f7ff feb1 	bl	800724a <LCD_Print>
    LCD_GotoXY(10,3);
 80074e8:	2103      	movs	r1, #3
 80074ea:	200a      	movs	r0, #10
 80074ec:	f7ff fe82 	bl	80071f4 <LCD_GotoXY>
    LCD_SendData(_LCD_CHAR_RIGHT);
 80074f0:	2000      	movs	r0, #0
 80074f2:	f7ff fde3 	bl	80070bc <LCD_SendData>
}
 80074f6:	bf00      	nop
 80074f8:	3718      	adds	r7, #24
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bd80      	pop	{r7, pc}
 80074fe:	bf00      	nop
 8007500:	0800f3d8 	.word	0x0800f3d8
 8007504:	20002c0c 	.word	0x20002c0c
 8007508:	0800f3fc 	.word	0x0800f3fc
 800750c:	0800f414 	.word	0x0800f414
 8007510:	0800f3d0 	.word	0x0800f3d0

08007514 <Screen_Monitor_Station>:

void Screen_Monitor_Station(uint8_t mode, uint16_t current)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b088      	sub	sp, #32
 8007518:	af00      	add	r7, sp, #0
 800751a:	4603      	mov	r3, r0
 800751c:	460a      	mov	r2, r1
 800751e:	71fb      	strb	r3, [r7, #7]
 8007520:	4613      	mov	r3, r2
 8007522:	80bb      	strh	r3, [r7, #4]
    char buffer[20];
	LCD_GotoXY(0, 0);
 8007524:	2100      	movs	r1, #0
 8007526:	2000      	movs	r0, #0
 8007528:	f7ff fe64 	bl	80071f4 <LCD_GotoXY>
    LCD_SendData(_LCD_CHAR_UP);
 800752c:	2006      	movs	r0, #6
 800752e:	f7ff fdc5 	bl	80070bc <LCD_SendData>
	LCD_GotoXY(1, 0);
 8007532:	2100      	movs	r1, #0
 8007534:	2001      	movs	r0, #1
 8007536:	f7ff fe5d 	bl	80071f4 <LCD_GotoXY>
	LCD_Print("Station Status");
 800753a:	4822      	ldr	r0, [pc, #136]	; (80075c4 <Screen_Monitor_Station+0xb0>)
 800753c:	f7ff fe85 	bl	800724a <LCD_Print>
    LCD_GotoXY(1, 1);
 8007540:	2101      	movs	r1, #1
 8007542:	2001      	movs	r0, #1
 8007544:	f7ff fe56 	bl	80071f4 <LCD_GotoXY>
    if (mode == 2)
 8007548:	79fb      	ldrb	r3, [r7, #7]
 800754a:	2b02      	cmp	r3, #2
 800754c:	d103      	bne.n	8007556 <Screen_Monitor_Station+0x42>
    {
        LCD_Print("Contactor: OFF");
 800754e:	481e      	ldr	r0, [pc, #120]	; (80075c8 <Screen_Monitor_Station+0xb4>)
 8007550:	f7ff fe7b 	bl	800724a <LCD_Print>
 8007554:	e005      	b.n	8007562 <Screen_Monitor_Station+0x4e>
    } else if (mode == 1){
 8007556:	79fb      	ldrb	r3, [r7, #7]
 8007558:	2b01      	cmp	r3, #1
 800755a:	d102      	bne.n	8007562 <Screen_Monitor_Station+0x4e>
        LCD_Print("Contactor: ON");
 800755c:	481b      	ldr	r0, [pc, #108]	; (80075cc <Screen_Monitor_Station+0xb8>)
 800755e:	f7ff fe74 	bl	800724a <LCD_Print>
    }
    LCD_GotoXY(1, 2);
 8007562:	2102      	movs	r1, #2
 8007564:	2001      	movs	r0, #1
 8007566:	f7ff fe45 	bl	80071f4 <LCD_GotoXY>
    sprintf(buffer,"Current: %04dmA", current);
 800756a:	88ba      	ldrh	r2, [r7, #4]
 800756c:	f107 030c 	add.w	r3, r7, #12
 8007570:	4917      	ldr	r1, [pc, #92]	; (80075d0 <Screen_Monitor_Station+0xbc>)
 8007572:	4618      	mov	r0, r3
 8007574:	f005 fa1a 	bl	800c9ac <siprintf>
    LCD_Print(buffer);
 8007578:	f107 030c 	add.w	r3, r7, #12
 800757c:	4618      	mov	r0, r3
 800757e:	f7ff fe64 	bl	800724a <LCD_Print>
    LCD_GotoXY(0, 2);
 8007582:	2102      	movs	r1, #2
 8007584:	2000      	movs	r0, #0
 8007586:	f7ff fe35 	bl	80071f4 <LCD_GotoXY>
	LCD_SendData(_LCD_CHAR_DOWN);
 800758a:	2007      	movs	r0, #7
 800758c:	f7ff fd96 	bl	80070bc <LCD_SendData>
    LCD_GotoXY(4, 3);
 8007590:	2103      	movs	r1, #3
 8007592:	2004      	movs	r0, #4
 8007594:	f7ff fe2e 	bl	80071f4 <LCD_GotoXY>
    LCD_SendData(_LCD_CHAR_LEFT);
 8007598:	2002      	movs	r0, #2
 800759a:	f7ff fd8f 	bl	80070bc <LCD_SendData>
    LCD_GotoXY(5, 3);
 800759e:	2103      	movs	r1, #3
 80075a0:	2005      	movs	r0, #5
 80075a2:	f7ff fe27 	bl	80071f4 <LCD_GotoXY>
    LCD_Print("MONITOR");
 80075a6:	480b      	ldr	r0, [pc, #44]	; (80075d4 <Screen_Monitor_Station+0xc0>)
 80075a8:	f7ff fe4f 	bl	800724a <LCD_Print>
    LCD_GotoXY(12,3);
 80075ac:	2103      	movs	r1, #3
 80075ae:	200c      	movs	r0, #12
 80075b0:	f7ff fe20 	bl	80071f4 <LCD_GotoXY>
    LCD_SendData(_LCD_CHAR_RIGHT);
 80075b4:	2000      	movs	r0, #0
 80075b6:	f7ff fd81 	bl	80070bc <LCD_SendData>
}
 80075ba:	bf00      	nop
 80075bc:	3720      	adds	r7, #32
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}
 80075c2:	bf00      	nop
 80075c4:	0800f428 	.word	0x0800f428
 80075c8:	0800f438 	.word	0x0800f438
 80075cc:	0800f448 	.word	0x0800f448
 80075d0:	0800f458 	.word	0x0800f458
 80075d4:	0800f468 	.word	0x0800f468

080075d8 <Screen_Monitor_Node>:

void Screen_Monitor_Node(uint8_t ID, uint8_t mode, uint16_t battery, uint8_t type, uint16_t voltage)
{
 80075d8:	b590      	push	{r4, r7, lr}
 80075da:	b089      	sub	sp, #36	; 0x24
 80075dc:	af00      	add	r7, sp, #0
 80075de:	4604      	mov	r4, r0
 80075e0:	4608      	mov	r0, r1
 80075e2:	4611      	mov	r1, r2
 80075e4:	461a      	mov	r2, r3
 80075e6:	4623      	mov	r3, r4
 80075e8:	71fb      	strb	r3, [r7, #7]
 80075ea:	4603      	mov	r3, r0
 80075ec:	71bb      	strb	r3, [r7, #6]
 80075ee:	460b      	mov	r3, r1
 80075f0:	80bb      	strh	r3, [r7, #4]
 80075f2:	4613      	mov	r3, r2
 80075f4:	70fb      	strb	r3, [r7, #3]
    char buffer[20];
//	LCD_Clear();
	LCD_GotoXY(0, 0);
 80075f6:	2100      	movs	r1, #0
 80075f8:	2000      	movs	r0, #0
 80075fa:	f7ff fdfb 	bl	80071f4 <LCD_GotoXY>
    LCD_SendData(_LCD_CHAR_UP);
 80075fe:	2006      	movs	r0, #6
 8007600:	f7ff fd5c 	bl	80070bc <LCD_SendData>
    LCD_GotoXY(1, 0);
 8007604:	2100      	movs	r1, #0
 8007606:	2001      	movs	r0, #1
 8007608:	f7ff fdf4 	bl	80071f4 <LCD_GotoXY>
    sprintf(buffer,"Sensor ID: 0x%02X", ID);
 800760c:	79fa      	ldrb	r2, [r7, #7]
 800760e:	f107 030c 	add.w	r3, r7, #12
 8007612:	4940      	ldr	r1, [pc, #256]	; (8007714 <Screen_Monitor_Node+0x13c>)
 8007614:	4618      	mov	r0, r3
 8007616:	f005 f9c9 	bl	800c9ac <siprintf>
    LCD_Print(buffer);
 800761a:	f107 030c 	add.w	r3, r7, #12
 800761e:	4618      	mov	r0, r3
 8007620:	f7ff fe13 	bl	800724a <LCD_Print>
    LCD_GotoXY(1, 1);
 8007624:	2101      	movs	r1, #1
 8007626:	2001      	movs	r0, #1
 8007628:	f7ff fde4 	bl	80071f4 <LCD_GotoXY>
    if (mode == 2)
 800762c:	79bb      	ldrb	r3, [r7, #6]
 800762e:	2b02      	cmp	r3, #2
 8007630:	d103      	bne.n	800763a <Screen_Monitor_Node+0x62>
    {
        LCD_Print("Status: OFF");
 8007632:	4839      	ldr	r0, [pc, #228]	; (8007718 <Screen_Monitor_Node+0x140>)
 8007634:	f7ff fe09 	bl	800724a <LCD_Print>
 8007638:	e005      	b.n	8007646 <Screen_Monitor_Node+0x6e>
    } else if (mode == 1){
 800763a:	79bb      	ldrb	r3, [r7, #6]
 800763c:	2b01      	cmp	r3, #1
 800763e:	d102      	bne.n	8007646 <Screen_Monitor_Node+0x6e>
        LCD_Print("Status: ON");
 8007640:	4836      	ldr	r0, [pc, #216]	; (800771c <Screen_Monitor_Node+0x144>)
 8007642:	f7ff fe02 	bl	800724a <LCD_Print>
    }
    LCD_GotoXY(1, 2);
 8007646:	2102      	movs	r1, #2
 8007648:	2001      	movs	r0, #1
 800764a:	f7ff fdd3 	bl	80071f4 <LCD_GotoXY>
    sprintf(buffer,"Battery: %01d.%02dV", battery/100, battery%100);
 800764e:	88bb      	ldrh	r3, [r7, #4]
 8007650:	4a33      	ldr	r2, [pc, #204]	; (8007720 <Screen_Monitor_Node+0x148>)
 8007652:	fba2 2303 	umull	r2, r3, r2, r3
 8007656:	095b      	lsrs	r3, r3, #5
 8007658:	b29b      	uxth	r3, r3
 800765a:	461c      	mov	r4, r3
 800765c:	88bb      	ldrh	r3, [r7, #4]
 800765e:	4a30      	ldr	r2, [pc, #192]	; (8007720 <Screen_Monitor_Node+0x148>)
 8007660:	fba2 1203 	umull	r1, r2, r2, r3
 8007664:	0952      	lsrs	r2, r2, #5
 8007666:	2164      	movs	r1, #100	; 0x64
 8007668:	fb01 f202 	mul.w	r2, r1, r2
 800766c:	1a9b      	subs	r3, r3, r2
 800766e:	b29b      	uxth	r3, r3
 8007670:	f107 000c 	add.w	r0, r7, #12
 8007674:	4622      	mov	r2, r4
 8007676:	492b      	ldr	r1, [pc, #172]	; (8007724 <Screen_Monitor_Node+0x14c>)
 8007678:	f005 f998 	bl	800c9ac <siprintf>
    LCD_Print(buffer);
 800767c:	f107 030c 	add.w	r3, r7, #12
 8007680:	4618      	mov	r0, r3
 8007682:	f7ff fde2 	bl	800724a <LCD_Print>
    LCD_GotoXY(0, 3);
 8007686:	2103      	movs	r1, #3
 8007688:	2000      	movs	r0, #0
 800768a:	f7ff fdb3 	bl	80071f4 <LCD_GotoXY>
	LCD_SendData(_LCD_CHAR_DOWN);
 800768e:	2007      	movs	r0, #7
 8007690:	f7ff fd14 	bl	80070bc <LCD_SendData>
    LCD_GotoXY(1, 3);
 8007694:	2103      	movs	r1, #3
 8007696:	2001      	movs	r0, #1
 8007698:	f7ff fdac 	bl	80071f4 <LCD_GotoXY>
    if (type == 1)
 800769c:	78fb      	ldrb	r3, [r7, #3]
 800769e:	2b01      	cmp	r3, #1
 80076a0:	d117      	bne.n	80076d2 <Screen_Monitor_Node+0xfa>
    {
        sprintf(buffer,"VP: %01d.%02dV", voltage/100, voltage%100);
 80076a2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80076a4:	4a1e      	ldr	r2, [pc, #120]	; (8007720 <Screen_Monitor_Node+0x148>)
 80076a6:	fba2 2303 	umull	r2, r3, r2, r3
 80076aa:	095b      	lsrs	r3, r3, #5
 80076ac:	b29b      	uxth	r3, r3
 80076ae:	461c      	mov	r4, r3
 80076b0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80076b2:	4a1b      	ldr	r2, [pc, #108]	; (8007720 <Screen_Monitor_Node+0x148>)
 80076b4:	fba2 1203 	umull	r1, r2, r2, r3
 80076b8:	0952      	lsrs	r2, r2, #5
 80076ba:	2164      	movs	r1, #100	; 0x64
 80076bc:	fb01 f202 	mul.w	r2, r1, r2
 80076c0:	1a9b      	subs	r3, r3, r2
 80076c2:	b29b      	uxth	r3, r3
 80076c4:	f107 000c 	add.w	r0, r7, #12
 80076c8:	4622      	mov	r2, r4
 80076ca:	4917      	ldr	r1, [pc, #92]	; (8007728 <Screen_Monitor_Node+0x150>)
 80076cc:	f005 f96e 	bl	800c9ac <siprintf>
 80076d0:	e016      	b.n	8007700 <Screen_Monitor_Node+0x128>
    } else {
        sprintf(buffer,"VNA: %01d.%02dV", voltage/100, voltage%100);
 80076d2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80076d4:	4a12      	ldr	r2, [pc, #72]	; (8007720 <Screen_Monitor_Node+0x148>)
 80076d6:	fba2 2303 	umull	r2, r3, r2, r3
 80076da:	095b      	lsrs	r3, r3, #5
 80076dc:	b29b      	uxth	r3, r3
 80076de:	461c      	mov	r4, r3
 80076e0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80076e2:	4a0f      	ldr	r2, [pc, #60]	; (8007720 <Screen_Monitor_Node+0x148>)
 80076e4:	fba2 1203 	umull	r1, r2, r2, r3
 80076e8:	0952      	lsrs	r2, r2, #5
 80076ea:	2164      	movs	r1, #100	; 0x64
 80076ec:	fb01 f202 	mul.w	r2, r1, r2
 80076f0:	1a9b      	subs	r3, r3, r2
 80076f2:	b29b      	uxth	r3, r3
 80076f4:	f107 000c 	add.w	r0, r7, #12
 80076f8:	4622      	mov	r2, r4
 80076fa:	490c      	ldr	r1, [pc, #48]	; (800772c <Screen_Monitor_Node+0x154>)
 80076fc:	f005 f956 	bl	800c9ac <siprintf>
    }
    LCD_Print(buffer);
 8007700:	f107 030c 	add.w	r3, r7, #12
 8007704:	4618      	mov	r0, r3
 8007706:	f7ff fda0 	bl	800724a <LCD_Print>
}
 800770a:	bf00      	nop
 800770c:	3724      	adds	r7, #36	; 0x24
 800770e:	46bd      	mov	sp, r7
 8007710:	bd90      	pop	{r4, r7, pc}
 8007712:	bf00      	nop
 8007714:	0800f470 	.word	0x0800f470
 8007718:	0800f484 	.word	0x0800f484
 800771c:	0800f490 	.word	0x0800f490
 8007720:	51eb851f 	.word	0x51eb851f
 8007724:	0800f49c 	.word	0x0800f49c
 8007728:	0800f4b0 	.word	0x0800f4b0
 800772c:	0800f4c0 	.word	0x0800f4c0

08007730 <Screen_Function>:

void Screen_Function(uint8_t position)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b082      	sub	sp, #8
 8007734:	af00      	add	r7, sp, #0
 8007736:	4603      	mov	r3, r0
 8007738:	71fb      	strb	r3, [r7, #7]
//	LCD_Clear();
	LCD_GotoXY(0, position);
 800773a:	79fb      	ldrb	r3, [r7, #7]
 800773c:	4619      	mov	r1, r3
 800773e:	2000      	movs	r0, #0
 8007740:	f7ff fd58 	bl	80071f4 <LCD_GotoXY>
	LCD_SendData(_LCD_CHAR_RIGHT_INVERT);
 8007744:	2001      	movs	r0, #1
 8007746:	f7ff fcb9 	bl	80070bc <LCD_SendData>
    LCD_GotoXY(1, 0);
 800774a:	2100      	movs	r1, #0
 800774c:	2001      	movs	r0, #1
 800774e:	f7ff fd51 	bl	80071f4 <LCD_GotoXY>
    LCD_Print("Control Voltage");
 8007752:	4811      	ldr	r0, [pc, #68]	; (8007798 <Screen_Function+0x68>)
 8007754:	f7ff fd79 	bl	800724a <LCD_Print>
    LCD_GotoXY(1, 1);
 8007758:	2101      	movs	r1, #1
 800775a:	2001      	movs	r0, #1
 800775c:	f7ff fd4a 	bl	80071f4 <LCD_GotoXY>
    LCD_Print("Control ON/OFF");
 8007760:	480e      	ldr	r0, [pc, #56]	; (800779c <Screen_Function+0x6c>)
 8007762:	f7ff fd72 	bl	800724a <LCD_Print>
    LCD_GotoXY(3, 3);
 8007766:	2103      	movs	r1, #3
 8007768:	2003      	movs	r0, #3
 800776a:	f7ff fd43 	bl	80071f4 <LCD_GotoXY>
    LCD_SendData(_LCD_CHAR_LEFT);
 800776e:	2002      	movs	r0, #2
 8007770:	f7ff fca4 	bl	80070bc <LCD_SendData>
    LCD_GotoXY(4, 3);
 8007774:	2103      	movs	r1, #3
 8007776:	2004      	movs	r0, #4
 8007778:	f7ff fd3c 	bl	80071f4 <LCD_GotoXY>
    LCD_Print("FUNCTION");
 800777c:	4808      	ldr	r0, [pc, #32]	; (80077a0 <Screen_Function+0x70>)
 800777e:	f7ff fd64 	bl	800724a <LCD_Print>
    LCD_GotoXY(12,3);
 8007782:	2103      	movs	r1, #3
 8007784:	200c      	movs	r0, #12
 8007786:	f7ff fd35 	bl	80071f4 <LCD_GotoXY>
    LCD_SendData(_LCD_CHAR_RIGHT);
 800778a:	2000      	movs	r0, #0
 800778c:	f7ff fc96 	bl	80070bc <LCD_SendData>
}
 8007790:	bf00      	nop
 8007792:	3708      	adds	r7, #8
 8007794:	46bd      	mov	sp, r7
 8007796:	bd80      	pop	{r7, pc}
 8007798:	0800f4d0 	.word	0x0800f4d0
 800779c:	0800f4e0 	.word	0x0800f4e0
 80077a0:	0800f4f0 	.word	0x0800f4f0

080077a4 <Screen_Voltage_Control>:
 * @argument :
 * 	- limit : 0 MIN, 1 MAX, other NONE
 * 	- ValorDir: 0 Value, 1 Direction
 */
void Screen_Voltage_Control(uint8_t limit , uint8_t ValorDir)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b082      	sub	sp, #8
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	4603      	mov	r3, r0
 80077ac:	460a      	mov	r2, r1
 80077ae:	71fb      	strb	r3, [r7, #7]
 80077b0:	4613      	mov	r3, r2
 80077b2:	71bb      	strb	r3, [r7, #6]
//	LCD_Clear();
	LCD_GotoXY(0, 0);
 80077b4:	2100      	movs	r1, #0
 80077b6:	2000      	movs	r0, #0
 80077b8:	f7ff fd1c 	bl	80071f4 <LCD_GotoXY>
	LCD_Print("Voltage Control");
 80077bc:	4823      	ldr	r0, [pc, #140]	; (800784c <Screen_Voltage_Control+0xa8>)
 80077be:	f7ff fd44 	bl	800724a <LCD_Print>
	if (ValorDir == 0)	{
 80077c2:	79bb      	ldrb	r3, [r7, #6]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d104      	bne.n	80077d2 <Screen_Voltage_Control+0x2e>
		LCD_GotoXY(0, 1);
 80077c8:	2101      	movs	r1, #1
 80077ca:	2000      	movs	r0, #0
 80077cc:	f7ff fd12 	bl	80071f4 <LCD_GotoXY>
 80077d0:	e00b      	b.n	80077ea <Screen_Voltage_Control+0x46>
	}
	else if (ValorDir == 1)  {
 80077d2:	79bb      	ldrb	r3, [r7, #6]
 80077d4:	2b01      	cmp	r3, #1
 80077d6:	d104      	bne.n	80077e2 <Screen_Voltage_Control+0x3e>
		LCD_GotoXY(0, 2);
 80077d8:	2102      	movs	r1, #2
 80077da:	2000      	movs	r0, #0
 80077dc:	f7ff fd0a 	bl	80071f4 <LCD_GotoXY>
 80077e0:	e003      	b.n	80077ea <Screen_Voltage_Control+0x46>
	}
	else {
		LCD_GotoXY(0, 3);
 80077e2:	2103      	movs	r1, #3
 80077e4:	2000      	movs	r0, #0
 80077e6:	f7ff fd05 	bl	80071f4 <LCD_GotoXY>
	}
	LCD_SendData(_LCD_CHAR_RIGHT);
 80077ea:	2000      	movs	r0, #0
 80077ec:	f7ff fc66 	bl	80070bc <LCD_SendData>

    LCD_GotoXY(1, 1);
 80077f0:	2101      	movs	r1, #1
 80077f2:	2001      	movs	r0, #1
 80077f4:	f7ff fcfe 	bl	80071f4 <LCD_GotoXY>
    LCD_Print("Step: ");
 80077f8:	4815      	ldr	r0, [pc, #84]	; (8007850 <Screen_Voltage_Control+0xac>)
 80077fa:	f7ff fd26 	bl	800724a <LCD_Print>

    LCD_GotoXY(1, 2);
 80077fe:	2102      	movs	r1, #2
 8007800:	2001      	movs	r0, #1
 8007802:	f7ff fcf7 	bl	80071f4 <LCD_GotoXY>
    LCD_Print("Direction: ");
 8007806:	4813      	ldr	r0, [pc, #76]	; (8007854 <Screen_Voltage_Control+0xb0>)
 8007808:	f7ff fd1f 	bl	800724a <LCD_Print>

    LCD_GotoXY(1, 3);
 800780c:	2103      	movs	r1, #3
 800780e:	2001      	movs	r0, #1
 8007810:	f7ff fcf0 	bl	80071f4 <LCD_GotoXY>
    LCD_Print("Confirm");
 8007814:	4810      	ldr	r0, [pc, #64]	; (8007858 <Screen_Voltage_Control+0xb4>)
 8007816:	f7ff fd18 	bl	800724a <LCD_Print>

    LCD_GotoXY(12, 3);
 800781a:	2103      	movs	r1, #3
 800781c:	200c      	movs	r0, #12
 800781e:	f7ff fce9 	bl	80071f4 <LCD_GotoXY>
    if (limit == 0){
 8007822:	79fb      	ldrb	r3, [r7, #7]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d103      	bne.n	8007830 <Screen_Voltage_Control+0x8c>
        LCD_Print("MIN");
 8007828:	480c      	ldr	r0, [pc, #48]	; (800785c <Screen_Voltage_Control+0xb8>)
 800782a:	f7ff fd0e 	bl	800724a <LCD_Print>
//    LCD_SendData(_LCD_CHAR_LEFT);
//    LCD_GotoXY(4, 3);
//    LCD_Print("FUNCTION");
//    LCD_GotoXY(12,3);
//    LCD_SendData(_LCD_CHAR_RIGHT);
}
 800782e:	e009      	b.n	8007844 <Screen_Voltage_Control+0xa0>
    } else if (limit == 1) {
 8007830:	79fb      	ldrb	r3, [r7, #7]
 8007832:	2b01      	cmp	r3, #1
 8007834:	d103      	bne.n	800783e <Screen_Voltage_Control+0x9a>
        LCD_Print("MAX");
 8007836:	480a      	ldr	r0, [pc, #40]	; (8007860 <Screen_Voltage_Control+0xbc>)
 8007838:	f7ff fd07 	bl	800724a <LCD_Print>
}
 800783c:	e002      	b.n	8007844 <Screen_Voltage_Control+0xa0>
        LCD_Print("NONE");
 800783e:	4809      	ldr	r0, [pc, #36]	; (8007864 <Screen_Voltage_Control+0xc0>)
 8007840:	f7ff fd03 	bl	800724a <LCD_Print>
}
 8007844:	bf00      	nop
 8007846:	3708      	adds	r7, #8
 8007848:	46bd      	mov	sp, r7
 800784a:	bd80      	pop	{r7, pc}
 800784c:	0800f4fc 	.word	0x0800f4fc
 8007850:	0800f50c 	.word	0x0800f50c
 8007854:	0800f514 	.word	0x0800f514
 8007858:	0800f520 	.word	0x0800f520
 800785c:	0800f528 	.word	0x0800f528
 8007860:	0800f52c 	.word	0x0800f52c
 8007864:	0800f530 	.word	0x0800f530

08007868 <Screen_Dir_Control>:

void Screen_Dir_Control(uint8_t limit)
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b082      	sub	sp, #8
 800786c:	af00      	add	r7, sp, #0
 800786e:	4603      	mov	r3, r0
 8007870:	71fb      	strb	r3, [r7, #7]
//	LCD_Clear();
	LCD_GotoXY(0, 0);
 8007872:	2100      	movs	r1, #0
 8007874:	2000      	movs	r0, #0
 8007876:	f7ff fcbd 	bl	80071f4 <LCD_GotoXY>
	LCD_Print("Voltage Control");
 800787a:	481c      	ldr	r0, [pc, #112]	; (80078ec <Screen_Dir_Control+0x84>)
 800787c:	f7ff fce5 	bl	800724a <LCD_Print>
//		LCD_GotoXY(0, 2);
//	}
//	else {
//		LCD_GotoXY(0, 2);
//	}
	LCD_GotoXY(15, 2);
 8007880:	2102      	movs	r1, #2
 8007882:	200f      	movs	r0, #15
 8007884:	f7ff fcb6 	bl	80071f4 <LCD_GotoXY>
	LCD_SendData(_LCD_CHAR_LEFT);
 8007888:	2002      	movs	r0, #2
 800788a:	f7ff fc17 	bl	80070bc <LCD_SendData>

    LCD_GotoXY(1, 1);
 800788e:	2101      	movs	r1, #1
 8007890:	2001      	movs	r0, #1
 8007892:	f7ff fcaf 	bl	80071f4 <LCD_GotoXY>
    LCD_Print("Step: ");
 8007896:	4816      	ldr	r0, [pc, #88]	; (80078f0 <Screen_Dir_Control+0x88>)
 8007898:	f7ff fcd7 	bl	800724a <LCD_Print>

    LCD_GotoXY(1, 2);
 800789c:	2102      	movs	r1, #2
 800789e:	2001      	movs	r0, #1
 80078a0:	f7ff fca8 	bl	80071f4 <LCD_GotoXY>
    LCD_Print("Direction: ");
 80078a4:	4813      	ldr	r0, [pc, #76]	; (80078f4 <Screen_Dir_Control+0x8c>)
 80078a6:	f7ff fcd0 	bl	800724a <LCD_Print>

    LCD_GotoXY(1, 3);
 80078aa:	2103      	movs	r1, #3
 80078ac:	2001      	movs	r0, #1
 80078ae:	f7ff fca1 	bl	80071f4 <LCD_GotoXY>
    LCD_Print("Confirm");
 80078b2:	4811      	ldr	r0, [pc, #68]	; (80078f8 <Screen_Dir_Control+0x90>)
 80078b4:	f7ff fcc9 	bl	800724a <LCD_Print>

    LCD_GotoXY(12, 3);
 80078b8:	2103      	movs	r1, #3
 80078ba:	200c      	movs	r0, #12
 80078bc:	f7ff fc9a 	bl	80071f4 <LCD_GotoXY>
    if (limit == 0){
 80078c0:	79fb      	ldrb	r3, [r7, #7]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d103      	bne.n	80078ce <Screen_Dir_Control+0x66>
        LCD_Print("MIN");
 80078c6:	480d      	ldr	r0, [pc, #52]	; (80078fc <Screen_Dir_Control+0x94>)
 80078c8:	f7ff fcbf 	bl	800724a <LCD_Print>
//    LCD_SendData(_LCD_CHAR_LEFT);
//    LCD_GotoXY(4, 3);
//    LCD_Print("FUNCTION");
//    LCD_GotoXY(12,3);
//    LCD_SendData(_LCD_CHAR_RIGHT);
}
 80078cc:	e009      	b.n	80078e2 <Screen_Dir_Control+0x7a>
    } else if (limit == 1) {
 80078ce:	79fb      	ldrb	r3, [r7, #7]
 80078d0:	2b01      	cmp	r3, #1
 80078d2:	d103      	bne.n	80078dc <Screen_Dir_Control+0x74>
        LCD_Print("MAX");
 80078d4:	480a      	ldr	r0, [pc, #40]	; (8007900 <Screen_Dir_Control+0x98>)
 80078d6:	f7ff fcb8 	bl	800724a <LCD_Print>
}
 80078da:	e002      	b.n	80078e2 <Screen_Dir_Control+0x7a>
        LCD_Print("NONE");
 80078dc:	4809      	ldr	r0, [pc, #36]	; (8007904 <Screen_Dir_Control+0x9c>)
 80078de:	f7ff fcb4 	bl	800724a <LCD_Print>
}
 80078e2:	bf00      	nop
 80078e4:	3708      	adds	r7, #8
 80078e6:	46bd      	mov	sp, r7
 80078e8:	bd80      	pop	{r7, pc}
 80078ea:	bf00      	nop
 80078ec:	0800f4fc 	.word	0x0800f4fc
 80078f0:	0800f50c 	.word	0x0800f50c
 80078f4:	0800f514 	.word	0x0800f514
 80078f8:	0800f520 	.word	0x0800f520
 80078fc:	0800f528 	.word	0x0800f528
 8007900:	0800f52c 	.word	0x0800f52c
 8007904:	0800f530 	.word	0x0800f530

08007908 <Screen_StepVal_Control>:

void Screen_StepVal_Control(uint8_t limit)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b082      	sub	sp, #8
 800790c:	af00      	add	r7, sp, #0
 800790e:	4603      	mov	r3, r0
 8007910:	71fb      	strb	r3, [r7, #7]
//	LCD_Clear();
	LCD_GotoXY(0, 0);
 8007912:	2100      	movs	r1, #0
 8007914:	2000      	movs	r0, #0
 8007916:	f7ff fc6d 	bl	80071f4 <LCD_GotoXY>
	LCD_Print("Voltage Control");
 800791a:	481c      	ldr	r0, [pc, #112]	; (800798c <Screen_StepVal_Control+0x84>)
 800791c:	f7ff fc95 	bl	800724a <LCD_Print>

	LCD_GotoXY(12, 1);
 8007920:	2101      	movs	r1, #1
 8007922:	200c      	movs	r0, #12
 8007924:	f7ff fc66 	bl	80071f4 <LCD_GotoXY>
	LCD_SendData(_LCD_CHAR_LEFT);
 8007928:	2002      	movs	r0, #2
 800792a:	f7ff fbc7 	bl	80070bc <LCD_SendData>
//	else {
//		LCD_GotoXY(0, 2);
//	}
//	LCD_SendData(_LCD_CHAR_RIGHT);

    LCD_GotoXY(1, 1);
 800792e:	2101      	movs	r1, #1
 8007930:	2001      	movs	r0, #1
 8007932:	f7ff fc5f 	bl	80071f4 <LCD_GotoXY>
    LCD_Print("Step: ");
 8007936:	4816      	ldr	r0, [pc, #88]	; (8007990 <Screen_StepVal_Control+0x88>)
 8007938:	f7ff fc87 	bl	800724a <LCD_Print>

    LCD_GotoXY(1, 2);
 800793c:	2102      	movs	r1, #2
 800793e:	2001      	movs	r0, #1
 8007940:	f7ff fc58 	bl	80071f4 <LCD_GotoXY>
    LCD_Print("Direction: ");
 8007944:	4813      	ldr	r0, [pc, #76]	; (8007994 <Screen_StepVal_Control+0x8c>)
 8007946:	f7ff fc80 	bl	800724a <LCD_Print>

    LCD_GotoXY(1, 3);
 800794a:	2103      	movs	r1, #3
 800794c:	2001      	movs	r0, #1
 800794e:	f7ff fc51 	bl	80071f4 <LCD_GotoXY>
    LCD_Print("Confirm");
 8007952:	4811      	ldr	r0, [pc, #68]	; (8007998 <Screen_StepVal_Control+0x90>)
 8007954:	f7ff fc79 	bl	800724a <LCD_Print>

    LCD_GotoXY(12, 3);
 8007958:	2103      	movs	r1, #3
 800795a:	200c      	movs	r0, #12
 800795c:	f7ff fc4a 	bl	80071f4 <LCD_GotoXY>
    if (limit == 0){
 8007960:	79fb      	ldrb	r3, [r7, #7]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d103      	bne.n	800796e <Screen_StepVal_Control+0x66>
        LCD_Print("MIN");
 8007966:	480d      	ldr	r0, [pc, #52]	; (800799c <Screen_StepVal_Control+0x94>)
 8007968:	f7ff fc6f 	bl	800724a <LCD_Print>
//    LCD_SendData(_LCD_CHAR_LEFT);
//    LCD_GotoXY(4, 3);
//    LCD_Print("FUNCTION");
//    LCD_GotoXY(12,3);
//    LCD_SendData(_LCD_CHAR_RIGHT);
}
 800796c:	e009      	b.n	8007982 <Screen_StepVal_Control+0x7a>
    } else if (limit == 1) {
 800796e:	79fb      	ldrb	r3, [r7, #7]
 8007970:	2b01      	cmp	r3, #1
 8007972:	d103      	bne.n	800797c <Screen_StepVal_Control+0x74>
        LCD_Print("MAX");
 8007974:	480a      	ldr	r0, [pc, #40]	; (80079a0 <Screen_StepVal_Control+0x98>)
 8007976:	f7ff fc68 	bl	800724a <LCD_Print>
}
 800797a:	e002      	b.n	8007982 <Screen_StepVal_Control+0x7a>
        LCD_Print("NONE");
 800797c:	4809      	ldr	r0, [pc, #36]	; (80079a4 <Screen_StepVal_Control+0x9c>)
 800797e:	f7ff fc64 	bl	800724a <LCD_Print>
}
 8007982:	bf00      	nop
 8007984:	3708      	adds	r7, #8
 8007986:	46bd      	mov	sp, r7
 8007988:	bd80      	pop	{r7, pc}
 800798a:	bf00      	nop
 800798c:	0800f4fc 	.word	0x0800f4fc
 8007990:	0800f50c 	.word	0x0800f50c
 8007994:	0800f514 	.word	0x0800f514
 8007998:	0800f520 	.word	0x0800f520
 800799c:	0800f528 	.word	0x0800f528
 80079a0:	0800f52c 	.word	0x0800f52c
 80079a4:	0800f530 	.word	0x0800f530

080079a8 <Screen_Voltage_Control_Control_Motor>:
void Screen_Voltage_Control_Control_Motor(uint16_t step, uint8_t dir)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b088      	sub	sp, #32
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	4603      	mov	r3, r0
 80079b0:	460a      	mov	r2, r1
 80079b2:	80fb      	strh	r3, [r7, #6]
 80079b4:	4613      	mov	r3, r2
 80079b6:	717b      	strb	r3, [r7, #5]
//        // Motor go to left
//    } else {
//        // Motor go to left
//    }
//    // Read ADC
	LCD_GotoXY(7, 1);
 80079b8:	2101      	movs	r1, #1
 80079ba:	2007      	movs	r0, #7
 80079bc:	f7ff fc1a 	bl	80071f4 <LCD_GotoXY>
	sprintf(buffer,"%d", step);
 80079c0:	88fa      	ldrh	r2, [r7, #6]
 80079c2:	f107 030c 	add.w	r3, r7, #12
 80079c6:	490f      	ldr	r1, [pc, #60]	; (8007a04 <Screen_Voltage_Control_Control_Motor+0x5c>)
 80079c8:	4618      	mov	r0, r3
 80079ca:	f004 ffef 	bl	800c9ac <siprintf>
//	sprintf(buffer,"%01d.%02dV", adc_value/100, adc_value%100);
	LCD_Print(buffer);
 80079ce:	f107 030c 	add.w	r3, r7, #12
 80079d2:	4618      	mov	r0, r3
 80079d4:	f7ff fc39 	bl	800724a <LCD_Print>
	LCD_GotoXY(12, 2);
 80079d8:	2102      	movs	r1, #2
 80079da:	200c      	movs	r0, #12
 80079dc:	f7ff fc0a 	bl	80071f4 <LCD_GotoXY>
	if (dir == 0x01) {
 80079e0:	797b      	ldrb	r3, [r7, #5]
 80079e2:	2b01      	cmp	r3, #1
 80079e4:	d103      	bne.n	80079ee <Screen_Voltage_Control_Control_Motor+0x46>
		LCD_Print("INC");
 80079e6:	4808      	ldr	r0, [pc, #32]	; (8007a08 <Screen_Voltage_Control_Control_Motor+0x60>)
 80079e8:	f7ff fc2f 	bl	800724a <LCD_Print>
		LCD_Print("DEC");
	}



}
 80079ec:	e005      	b.n	80079fa <Screen_Voltage_Control_Control_Motor+0x52>
	else if (dir == 0x02) {
 80079ee:	797b      	ldrb	r3, [r7, #5]
 80079f0:	2b02      	cmp	r3, #2
 80079f2:	d102      	bne.n	80079fa <Screen_Voltage_Control_Control_Motor+0x52>
		LCD_Print("DEC");
 80079f4:	4805      	ldr	r0, [pc, #20]	; (8007a0c <Screen_Voltage_Control_Control_Motor+0x64>)
 80079f6:	f7ff fc28 	bl	800724a <LCD_Print>
}
 80079fa:	bf00      	nop
 80079fc:	3720      	adds	r7, #32
 80079fe:	46bd      	mov	sp, r7
 8007a00:	bd80      	pop	{r7, pc}
 8007a02:	bf00      	nop
 8007a04:	0800f538 	.word	0x0800f538
 8007a08:	0800f53c 	.word	0x0800f53c
 8007a0c:	0800f540 	.word	0x0800f540

08007a10 <Screen_Control_Relay>:

void Screen_Control_Relay(uint8_t position)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b082      	sub	sp, #8
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	4603      	mov	r3, r0
 8007a18:	71fb      	strb	r3, [r7, #7]
//	LCD_Clear();
	LCD_GotoXY(0, position+1);
 8007a1a:	79fb      	ldrb	r3, [r7, #7]
 8007a1c:	3301      	adds	r3, #1
 8007a1e:	b2db      	uxtb	r3, r3
 8007a20:	4619      	mov	r1, r3
 8007a22:	2000      	movs	r0, #0
 8007a24:	f7ff fbe6 	bl	80071f4 <LCD_GotoXY>
	LCD_SendData(_LCD_CHAR_RIGHT_INVERT);
 8007a28:	2001      	movs	r0, #1
 8007a2a:	f7ff fb47 	bl	80070bc <LCD_SendData>
    LCD_GotoXY(1, 0);
 8007a2e:	2100      	movs	r1, #0
 8007a30:	2001      	movs	r0, #1
 8007a32:	f7ff fbdf 	bl	80071f4 <LCD_GotoXY>
    LCD_Print("Output Control");
 8007a36:	4815      	ldr	r0, [pc, #84]	; (8007a8c <Screen_Control_Relay+0x7c>)
 8007a38:	f7ff fc07 	bl	800724a <LCD_Print>
    LCD_GotoXY(1, 1);
 8007a3c:	2101      	movs	r1, #1
 8007a3e:	2001      	movs	r0, #1
 8007a40:	f7ff fbd8 	bl	80071f4 <LCD_GotoXY>
    LCD_Print("Trans. is: ");
 8007a44:	4812      	ldr	r0, [pc, #72]	; (8007a90 <Screen_Control_Relay+0x80>)
 8007a46:	f7ff fc00 	bl	800724a <LCD_Print>
    LCD_GotoXY(1, 2);
 8007a4a:	2102      	movs	r1, #2
 8007a4c:	2001      	movs	r0, #1
 8007a4e:	f7ff fbd1 	bl	80071f4 <LCD_GotoXY>
    LCD_Print("Confirm: ");
 8007a52:	4810      	ldr	r0, [pc, #64]	; (8007a94 <Screen_Control_Relay+0x84>)
 8007a54:	f7ff fbf9 	bl	800724a <LCD_Print>
    LCD_GotoXY(3, 3);
 8007a58:	2103      	movs	r1, #3
 8007a5a:	2003      	movs	r0, #3
 8007a5c:	f7ff fbca 	bl	80071f4 <LCD_GotoXY>
    LCD_SendData(_LCD_CHAR_LEFT);
 8007a60:	2002      	movs	r0, #2
 8007a62:	f7ff fb2b 	bl	80070bc <LCD_SendData>
    LCD_GotoXY(4, 3);
 8007a66:	2103      	movs	r1, #3
 8007a68:	2004      	movs	r0, #4
 8007a6a:	f7ff fbc3 	bl	80071f4 <LCD_GotoXY>
    LCD_Print("FUNCTION");
 8007a6e:	480a      	ldr	r0, [pc, #40]	; (8007a98 <Screen_Control_Relay+0x88>)
 8007a70:	f7ff fbeb 	bl	800724a <LCD_Print>
    LCD_GotoXY(12,3);
 8007a74:	2103      	movs	r1, #3
 8007a76:	200c      	movs	r0, #12
 8007a78:	f7ff fbbc 	bl	80071f4 <LCD_GotoXY>
    LCD_SendData(_LCD_CHAR_RIGHT);
 8007a7c:	2000      	movs	r0, #0
 8007a7e:	f7ff fb1d 	bl	80070bc <LCD_SendData>
}
 8007a82:	bf00      	nop
 8007a84:	3708      	adds	r7, #8
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd80      	pop	{r7, pc}
 8007a8a:	bf00      	nop
 8007a8c:	0800f544 	.word	0x0800f544
 8007a90:	0800f554 	.word	0x0800f554
 8007a94:	0800f560 	.word	0x0800f560
 8007a98:	0800f4f0 	.word	0x0800f4f0

08007a9c <Screen_Control_Relay_Change_Mode>:

void Screen_Control_Relay_Change_Mode(uint8_t curStatus,uint8_t status)
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b082      	sub	sp, #8
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	460a      	mov	r2, r1
 8007aa6:	71fb      	strb	r3, [r7, #7]
 8007aa8:	4613      	mov	r3, r2
 8007aaa:	71bb      	strb	r3, [r7, #6]
	LCD_GotoXY(12, 1);
 8007aac:	2101      	movs	r1, #1
 8007aae:	200c      	movs	r0, #12
 8007ab0:	f7ff fba0 	bl	80071f4 <LCD_GotoXY>
	if (curStatus == 2){
 8007ab4:	79fb      	ldrb	r3, [r7, #7]
 8007ab6:	2b02      	cmp	r3, #2
 8007ab8:	d103      	bne.n	8007ac2 <Screen_Control_Relay_Change_Mode+0x26>
		LCD_Print("OFF");
 8007aba:	480e      	ldr	r0, [pc, #56]	; (8007af4 <Screen_Control_Relay_Change_Mode+0x58>)
 8007abc:	f7ff fbc5 	bl	800724a <LCD_Print>
 8007ac0:	e005      	b.n	8007ace <Screen_Control_Relay_Change_Mode+0x32>
	} else if (curStatus == 1){
 8007ac2:	79fb      	ldrb	r3, [r7, #7]
 8007ac4:	2b01      	cmp	r3, #1
 8007ac6:	d102      	bne.n	8007ace <Screen_Control_Relay_Change_Mode+0x32>
		LCD_Print("ON");
 8007ac8:	480b      	ldr	r0, [pc, #44]	; (8007af8 <Screen_Control_Relay_Change_Mode+0x5c>)
 8007aca:	f7ff fbbe 	bl	800724a <LCD_Print>
	}
	LCD_GotoXY(10, 2);
 8007ace:	2102      	movs	r1, #2
 8007ad0:	200a      	movs	r0, #10
 8007ad2:	f7ff fb8f 	bl	80071f4 <LCD_GotoXY>
	if (status == 0){
 8007ad6:	79bb      	ldrb	r3, [r7, #6]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d103      	bne.n	8007ae4 <Screen_Control_Relay_Change_Mode+0x48>
		LCD_Print("OFF");
 8007adc:	4805      	ldr	r0, [pc, #20]	; (8007af4 <Screen_Control_Relay_Change_Mode+0x58>)
 8007ade:	f7ff fbb4 	bl	800724a <LCD_Print>
	} else {
		LCD_Print("ON");
	}
}
 8007ae2:	e002      	b.n	8007aea <Screen_Control_Relay_Change_Mode+0x4e>
		LCD_Print("ON");
 8007ae4:	4804      	ldr	r0, [pc, #16]	; (8007af8 <Screen_Control_Relay_Change_Mode+0x5c>)
 8007ae6:	f7ff fbb0 	bl	800724a <LCD_Print>
}
 8007aea:	bf00      	nop
 8007aec:	3708      	adds	r7, #8
 8007aee:	46bd      	mov	sp, r7
 8007af0:	bd80      	pop	{r7, pc}
 8007af2:	bf00      	nop
 8007af4:	0800f398 	.word	0x0800f398
 8007af8:	0800f56c 	.word	0x0800f56c

08007afc <Screen_Accept_Relay>:

void Screen_Accept_Relay(_RTC switchtime, uint8_t status)
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b08c      	sub	sp, #48	; 0x30
 8007b00:	af02      	add	r7, sp, #8
 8007b02:	f107 0308 	add.w	r3, r7, #8
 8007b06:	e883 0003 	stmia.w	r3, {r0, r1}
 8007b0a:	4613      	mov	r3, r2
 8007b0c:	71fb      	strb	r3, [r7, #7]
    char buffer[20];
//    DS3231_GetTime(__MY_RTC);
//	LCD_Clear();
	LCD_GotoXY(1, 0);
 8007b0e:	2100      	movs	r1, #0
 8007b10:	2001      	movs	r0, #1
 8007b12:	f7ff fb6f 	bl	80071f4 <LCD_GotoXY>
	LCD_Print("Output Control");
 8007b16:	4826      	ldr	r0, [pc, #152]	; (8007bb0 <Screen_Accept_Relay+0xb4>)
 8007b18:	f7ff fb97 	bl	800724a <LCD_Print>
	LCD_GotoXY(0, 1);
 8007b1c:	2101      	movs	r1, #1
 8007b1e:	2000      	movs	r0, #0
 8007b20:	f7ff fb68 	bl	80071f4 <LCD_GotoXY>
	LCD_Print("SWITCH");
 8007b24:	4823      	ldr	r0, [pc, #140]	; (8007bb4 <Screen_Accept_Relay+0xb8>)
 8007b26:	f7ff fb90 	bl	800724a <LCD_Print>
	LCD_GotoXY(7, 1);
 8007b2a:	2101      	movs	r1, #1
 8007b2c:	2007      	movs	r0, #7
 8007b2e:	f7ff fb61 	bl	80071f4 <LCD_GotoXY>
	if (status == 0){
 8007b32:	79fb      	ldrb	r3, [r7, #7]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d103      	bne.n	8007b40 <Screen_Accept_Relay+0x44>
		LCD_Print("OFF");
 8007b38:	481f      	ldr	r0, [pc, #124]	; (8007bb8 <Screen_Accept_Relay+0xbc>)
 8007b3a:	f7ff fb86 	bl	800724a <LCD_Print>
 8007b3e:	e002      	b.n	8007b46 <Screen_Accept_Relay+0x4a>
	} else {
		LCD_Print("ON");
 8007b40:	481e      	ldr	r0, [pc, #120]	; (8007bbc <Screen_Accept_Relay+0xc0>)
 8007b42:	f7ff fb82 	bl	800724a <LCD_Print>
	}
	LCD_GotoXY(11, 1);
 8007b46:	2101      	movs	r1, #1
 8007b48:	200b      	movs	r0, #11
 8007b4a:	f7ff fb53 	bl	80071f4 <LCD_GotoXY>
	LCD_Print("AT:");
 8007b4e:	481c      	ldr	r0, [pc, #112]	; (8007bc0 <Screen_Accept_Relay+0xc4>)
 8007b50:	f7ff fb7b 	bl	800724a <LCD_Print>
    LCD_GotoXY(4, 2);
 8007b54:	2102      	movs	r1, #2
 8007b56:	2004      	movs	r0, #4
 8007b58:	f7ff fb4c 	bl	80071f4 <LCD_GotoXY>
    sprintf(buffer,"%02d:%02d:%02d", switchtime.Hour, switchtime.Min, switchtime.Sec);
 8007b5c:	7b3b      	ldrb	r3, [r7, #12]
 8007b5e:	461a      	mov	r2, r3
 8007b60:	7b7b      	ldrb	r3, [r7, #13]
 8007b62:	4619      	mov	r1, r3
 8007b64:	7bbb      	ldrb	r3, [r7, #14]
 8007b66:	f107 0014 	add.w	r0, r7, #20
 8007b6a:	9300      	str	r3, [sp, #0]
 8007b6c:	460b      	mov	r3, r1
 8007b6e:	4915      	ldr	r1, [pc, #84]	; (8007bc4 <Screen_Accept_Relay+0xc8>)
 8007b70:	f004 ff1c 	bl	800c9ac <siprintf>
    LCD_Print(buffer);
 8007b74:	f107 0314 	add.w	r3, r7, #20
 8007b78:	4618      	mov	r0, r3
 8007b7a:	f7ff fb66 	bl	800724a <LCD_Print>
    LCD_GotoXY(4, 3);
 8007b7e:	2103      	movs	r1, #3
 8007b80:	2004      	movs	r0, #4
 8007b82:	f7ff fb37 	bl	80071f4 <LCD_GotoXY>
    sprintf(buffer,"%02d/%02d/%d", switchtime.Date, switchtime.Month, switchtime.Year);
 8007b86:	7abb      	ldrb	r3, [r7, #10]
 8007b88:	461a      	mov	r2, r3
 8007b8a:	7a7b      	ldrb	r3, [r7, #9]
 8007b8c:	4619      	mov	r1, r3
 8007b8e:	7a3b      	ldrb	r3, [r7, #8]
 8007b90:	f107 0014 	add.w	r0, r7, #20
 8007b94:	9300      	str	r3, [sp, #0]
 8007b96:	460b      	mov	r3, r1
 8007b98:	490b      	ldr	r1, [pc, #44]	; (8007bc8 <Screen_Accept_Relay+0xcc>)
 8007b9a:	f004 ff07 	bl	800c9ac <siprintf>
    LCD_Print(buffer);
 8007b9e:	f107 0314 	add.w	r3, r7, #20
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	f7ff fb51 	bl	800724a <LCD_Print>
//    LCD_SendData(_LCD_CHAR_LEFT);
//    LCD_GotoXY(4, 3);
//    LCD_Print("FUNCTION");
//    LCD_GotoXY(12,3);
//    LCD_SendData(_LCD_CHAR_RIGHT);
}
 8007ba8:	bf00      	nop
 8007baa:	3728      	adds	r7, #40	; 0x28
 8007bac:	46bd      	mov	sp, r7
 8007bae:	bd80      	pop	{r7, pc}
 8007bb0:	0800f544 	.word	0x0800f544
 8007bb4:	0800f570 	.word	0x0800f570
 8007bb8:	0800f398 	.word	0x0800f398
 8007bbc:	0800f56c 	.word	0x0800f56c
 8007bc0:	0800f578 	.word	0x0800f578
 8007bc4:	0800f3c0 	.word	0x0800f3c0
 8007bc8:	0800f3b0 	.word	0x0800f3b0

08007bcc <Reset_Handler>:
 8007bcc:	f7fe fde0 	bl	8006790 <SystemInit>
 8007bd0:	480b      	ldr	r0, [pc, #44]	; (8007c00 <LoopFillZerobss+0xe>)
 8007bd2:	490c      	ldr	r1, [pc, #48]	; (8007c04 <LoopFillZerobss+0x12>)
 8007bd4:	4a0c      	ldr	r2, [pc, #48]	; (8007c08 <LoopFillZerobss+0x16>)
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	e002      	b.n	8007be0 <LoopCopyDataInit>

08007bda <CopyDataInit>:
 8007bda:	58d4      	ldr	r4, [r2, r3]
 8007bdc:	50c4      	str	r4, [r0, r3]
 8007bde:	3304      	adds	r3, #4

08007be0 <LoopCopyDataInit>:
 8007be0:	18c4      	adds	r4, r0, r3
 8007be2:	428c      	cmp	r4, r1
 8007be4:	d3f9      	bcc.n	8007bda <CopyDataInit>
 8007be6:	4a09      	ldr	r2, [pc, #36]	; (8007c0c <LoopFillZerobss+0x1a>)
 8007be8:	4c09      	ldr	r4, [pc, #36]	; (8007c10 <LoopFillZerobss+0x1e>)
 8007bea:	2300      	movs	r3, #0
 8007bec:	e001      	b.n	8007bf2 <LoopFillZerobss>

08007bee <FillZerobss>:
 8007bee:	6013      	str	r3, [r2, #0]
 8007bf0:	3204      	adds	r2, #4

08007bf2 <LoopFillZerobss>:
 8007bf2:	42a2      	cmp	r2, r4
 8007bf4:	d3fb      	bcc.n	8007bee <FillZerobss>
 8007bf6:	f004 f9d3 	bl	800bfa0 <__libc_init_array>
 8007bfa:	f7fe fa3b 	bl	8006074 <main>
 8007bfe:	4770      	bx	lr
 8007c00:	20000000 	.word	0x20000000
 8007c04:	200005a8 	.word	0x200005a8
 8007c08:	0800fa10 	.word	0x0800fa10
 8007c0c:	200005a8 	.word	0x200005a8
 8007c10:	20002c4c 	.word	0x20002c4c

08007c14 <CAN1_RX1_IRQHandler>:
 8007c14:	e7fe      	b.n	8007c14 <CAN1_RX1_IRQHandler>
	...

08007c18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007c1c:	4b08      	ldr	r3, [pc, #32]	; (8007c40 <HAL_Init+0x28>)
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	4a07      	ldr	r2, [pc, #28]	; (8007c40 <HAL_Init+0x28>)
 8007c22:	f043 0310 	orr.w	r3, r3, #16
 8007c26:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007c28:	2003      	movs	r0, #3
 8007c2a:	f000 fd45 	bl	80086b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007c2e:	200f      	movs	r0, #15
 8007c30:	f000 f808 	bl	8007c44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007c34:	f7fe fc22 	bl	800647c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007c38:	2300      	movs	r3, #0
}
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	bd80      	pop	{r7, pc}
 8007c3e:	bf00      	nop
 8007c40:	40022000 	.word	0x40022000

08007c44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b082      	sub	sp, #8
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007c4c:	4b12      	ldr	r3, [pc, #72]	; (8007c98 <HAL_InitTick+0x54>)
 8007c4e:	681a      	ldr	r2, [r3, #0]
 8007c50:	4b12      	ldr	r3, [pc, #72]	; (8007c9c <HAL_InitTick+0x58>)
 8007c52:	781b      	ldrb	r3, [r3, #0]
 8007c54:	4619      	mov	r1, r3
 8007c56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007c5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8007c5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c62:	4618      	mov	r0, r3
 8007c64:	f000 fd5d 	bl	8008722 <HAL_SYSTICK_Config>
 8007c68:	4603      	mov	r3, r0
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d001      	beq.n	8007c72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8007c6e:	2301      	movs	r3, #1
 8007c70:	e00e      	b.n	8007c90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2b0f      	cmp	r3, #15
 8007c76:	d80a      	bhi.n	8007c8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007c78:	2200      	movs	r2, #0
 8007c7a:	6879      	ldr	r1, [r7, #4]
 8007c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8007c80:	f000 fd25 	bl	80086ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007c84:	4a06      	ldr	r2, [pc, #24]	; (8007ca0 <HAL_InitTick+0x5c>)
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	e000      	b.n	8007c90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8007c8e:	2301      	movs	r3, #1
}
 8007c90:	4618      	mov	r0, r3
 8007c92:	3708      	adds	r7, #8
 8007c94:	46bd      	mov	sp, r7
 8007c96:	bd80      	pop	{r7, pc}
 8007c98:	20000494 	.word	0x20000494
 8007c9c:	200004e0 	.word	0x200004e0
 8007ca0:	200004dc 	.word	0x200004dc

08007ca4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007ca4:	b480      	push	{r7}
 8007ca6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007ca8:	4b05      	ldr	r3, [pc, #20]	; (8007cc0 <HAL_IncTick+0x1c>)
 8007caa:	781b      	ldrb	r3, [r3, #0]
 8007cac:	461a      	mov	r2, r3
 8007cae:	4b05      	ldr	r3, [pc, #20]	; (8007cc4 <HAL_IncTick+0x20>)
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	4413      	add	r3, r2
 8007cb4:	4a03      	ldr	r2, [pc, #12]	; (8007cc4 <HAL_IncTick+0x20>)
 8007cb6:	6013      	str	r3, [r2, #0]
}
 8007cb8:	bf00      	nop
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	bc80      	pop	{r7}
 8007cbe:	4770      	bx	lr
 8007cc0:	200004e0 	.word	0x200004e0
 8007cc4:	20002c10 	.word	0x20002c10

08007cc8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007cc8:	b480      	push	{r7}
 8007cca:	af00      	add	r7, sp, #0
  return uwTick;
 8007ccc:	4b02      	ldr	r3, [pc, #8]	; (8007cd8 <HAL_GetTick+0x10>)
 8007cce:	681b      	ldr	r3, [r3, #0]
}
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	bc80      	pop	{r7}
 8007cd6:	4770      	bx	lr
 8007cd8:	20002c10 	.word	0x20002c10

08007cdc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b084      	sub	sp, #16
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007ce4:	f7ff fff0 	bl	8007cc8 <HAL_GetTick>
 8007ce8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cf4:	d005      	beq.n	8007d02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007cf6:	4b0a      	ldr	r3, [pc, #40]	; (8007d20 <HAL_Delay+0x44>)
 8007cf8:	781b      	ldrb	r3, [r3, #0]
 8007cfa:	461a      	mov	r2, r3
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	4413      	add	r3, r2
 8007d00:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007d02:	bf00      	nop
 8007d04:	f7ff ffe0 	bl	8007cc8 <HAL_GetTick>
 8007d08:	4602      	mov	r2, r0
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	1ad3      	subs	r3, r2, r3
 8007d0e:	68fa      	ldr	r2, [r7, #12]
 8007d10:	429a      	cmp	r2, r3
 8007d12:	d8f7      	bhi.n	8007d04 <HAL_Delay+0x28>
  {
  }
}
 8007d14:	bf00      	nop
 8007d16:	bf00      	nop
 8007d18:	3710      	adds	r7, #16
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	bd80      	pop	{r7, pc}
 8007d1e:	bf00      	nop
 8007d20:	200004e0 	.word	0x200004e0

08007d24 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b086      	sub	sp, #24
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8007d30:	2300      	movs	r3, #0
 8007d32:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8007d34:	2300      	movs	r3, #0
 8007d36:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8007d38:	2300      	movs	r3, #0
 8007d3a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d101      	bne.n	8007d46 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8007d42:	2301      	movs	r3, #1
 8007d44:	e0be      	b.n	8007ec4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	689b      	ldr	r3, [r3, #8]
 8007d4a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d109      	bne.n	8007d68 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2200      	movs	r2, #0
 8007d58:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8007d62:	6878      	ldr	r0, [r7, #4]
 8007d64:	f7fd fe0e 	bl	8005984 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8007d68:	6878      	ldr	r0, [r7, #4]
 8007d6a:	f000 fb8f 	bl	800848c <ADC_ConversionStop_Disable>
 8007d6e:	4603      	mov	r3, r0
 8007d70:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d76:	f003 0310 	and.w	r3, r3, #16
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	f040 8099 	bne.w	8007eb2 <HAL_ADC_Init+0x18e>
 8007d80:	7dfb      	ldrb	r3, [r7, #23]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	f040 8095 	bne.w	8007eb2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d8c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8007d90:	f023 0302 	bic.w	r3, r3, #2
 8007d94:	f043 0202 	orr.w	r2, r3, #2
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8007da4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	7b1b      	ldrb	r3, [r3, #12]
 8007daa:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8007dac:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8007dae:	68ba      	ldr	r2, [r7, #8]
 8007db0:	4313      	orrs	r3, r2
 8007db2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	689b      	ldr	r3, [r3, #8]
 8007db8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007dbc:	d003      	beq.n	8007dc6 <HAL_ADC_Init+0xa2>
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	689b      	ldr	r3, [r3, #8]
 8007dc2:	2b01      	cmp	r3, #1
 8007dc4:	d102      	bne.n	8007dcc <HAL_ADC_Init+0xa8>
 8007dc6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007dca:	e000      	b.n	8007dce <HAL_ADC_Init+0xaa>
 8007dcc:	2300      	movs	r3, #0
 8007dce:	693a      	ldr	r2, [r7, #16]
 8007dd0:	4313      	orrs	r3, r2
 8007dd2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	7d1b      	ldrb	r3, [r3, #20]
 8007dd8:	2b01      	cmp	r3, #1
 8007dda:	d119      	bne.n	8007e10 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	7b1b      	ldrb	r3, [r3, #12]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d109      	bne.n	8007df8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	699b      	ldr	r3, [r3, #24]
 8007de8:	3b01      	subs	r3, #1
 8007dea:	035a      	lsls	r2, r3, #13
 8007dec:	693b      	ldr	r3, [r7, #16]
 8007dee:	4313      	orrs	r3, r2
 8007df0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007df4:	613b      	str	r3, [r7, #16]
 8007df6:	e00b      	b.n	8007e10 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dfc:	f043 0220 	orr.w	r2, r3, #32
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e08:	f043 0201 	orr.w	r2, r3, #1
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	685b      	ldr	r3, [r3, #4]
 8007e16:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	693a      	ldr	r2, [r7, #16]
 8007e20:	430a      	orrs	r2, r1
 8007e22:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	689a      	ldr	r2, [r3, #8]
 8007e2a:	4b28      	ldr	r3, [pc, #160]	; (8007ecc <HAL_ADC_Init+0x1a8>)
 8007e2c:	4013      	ands	r3, r2
 8007e2e:	687a      	ldr	r2, [r7, #4]
 8007e30:	6812      	ldr	r2, [r2, #0]
 8007e32:	68b9      	ldr	r1, [r7, #8]
 8007e34:	430b      	orrs	r3, r1
 8007e36:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	689b      	ldr	r3, [r3, #8]
 8007e3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e40:	d003      	beq.n	8007e4a <HAL_ADC_Init+0x126>
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	689b      	ldr	r3, [r3, #8]
 8007e46:	2b01      	cmp	r3, #1
 8007e48:	d104      	bne.n	8007e54 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	691b      	ldr	r3, [r3, #16]
 8007e4e:	3b01      	subs	r3, #1
 8007e50:	051b      	lsls	r3, r3, #20
 8007e52:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e5a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	68fa      	ldr	r2, [r7, #12]
 8007e64:	430a      	orrs	r2, r1
 8007e66:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	689a      	ldr	r2, [r3, #8]
 8007e6e:	4b18      	ldr	r3, [pc, #96]	; (8007ed0 <HAL_ADC_Init+0x1ac>)
 8007e70:	4013      	ands	r3, r2
 8007e72:	68ba      	ldr	r2, [r7, #8]
 8007e74:	429a      	cmp	r2, r3
 8007e76:	d10b      	bne.n	8007e90 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e82:	f023 0303 	bic.w	r3, r3, #3
 8007e86:	f043 0201 	orr.w	r2, r3, #1
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8007e8e:	e018      	b.n	8007ec2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e94:	f023 0312 	bic.w	r3, r3, #18
 8007e98:	f043 0210 	orr.w	r2, r3, #16
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ea4:	f043 0201 	orr.w	r2, r3, #1
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8007eac:	2301      	movs	r3, #1
 8007eae:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8007eb0:	e007      	b.n	8007ec2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eb6:	f043 0210 	orr.w	r2, r3, #16
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8007ebe:	2301      	movs	r3, #1
 8007ec0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8007ec2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	3718      	adds	r7, #24
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	bd80      	pop	{r7, pc}
 8007ecc:	ffe1f7fd 	.word	0xffe1f7fd
 8007ed0:	ff1f0efe 	.word	0xff1f0efe

08007ed4 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b084      	sub	sp, #16
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007edc:	2300      	movs	r3, #0
 8007ede:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007ee6:	2b01      	cmp	r3, #1
 8007ee8:	d101      	bne.n	8007eee <HAL_ADC_Start_IT+0x1a>
 8007eea:	2302      	movs	r3, #2
 8007eec:	e0a0      	b.n	8008030 <HAL_ADC_Start_IT+0x15c>
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2201      	movs	r2, #1
 8007ef2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8007ef6:	6878      	ldr	r0, [r7, #4]
 8007ef8:	f000 fa6e 	bl	80083d8 <ADC_Enable>
 8007efc:	4603      	mov	r3, r0
 8007efe:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8007f00:	7bfb      	ldrb	r3, [r7, #15]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	f040 808f 	bne.w	8008026 <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f0c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007f10:	f023 0301 	bic.w	r3, r3, #1
 8007f14:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	4a45      	ldr	r2, [pc, #276]	; (8008038 <HAL_ADC_Start_IT+0x164>)
 8007f22:	4293      	cmp	r3, r2
 8007f24:	d105      	bne.n	8007f32 <HAL_ADC_Start_IT+0x5e>
 8007f26:	4b45      	ldr	r3, [pc, #276]	; (800803c <HAL_ADC_Start_IT+0x168>)
 8007f28:	685b      	ldr	r3, [r3, #4]
 8007f2a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d115      	bne.n	8007f5e <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f36:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	685b      	ldr	r3, [r3, #4]
 8007f44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d026      	beq.n	8007f9a <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f50:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007f54:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8007f5c:	e01d      	b.n	8007f9a <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f62:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	4a33      	ldr	r2, [pc, #204]	; (800803c <HAL_ADC_Start_IT+0x168>)
 8007f70:	4293      	cmp	r3, r2
 8007f72:	d004      	beq.n	8007f7e <HAL_ADC_Start_IT+0xaa>
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	4a2f      	ldr	r2, [pc, #188]	; (8008038 <HAL_ADC_Start_IT+0x164>)
 8007f7a:	4293      	cmp	r3, r2
 8007f7c:	d10d      	bne.n	8007f9a <HAL_ADC_Start_IT+0xc6>
 8007f7e:	4b2f      	ldr	r3, [pc, #188]	; (800803c <HAL_ADC_Start_IT+0x168>)
 8007f80:	685b      	ldr	r3, [r3, #4]
 8007f82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d007      	beq.n	8007f9a <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f8e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007f92:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f9e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d006      	beq.n	8007fb4 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007faa:	f023 0206 	bic.w	r2, r3, #6
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	62da      	str	r2, [r3, #44]	; 0x2c
 8007fb2:	e002      	b.n	8007fba <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f06f 0202 	mvn.w	r2, #2
 8007fca:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	685a      	ldr	r2, [r3, #4]
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f042 0220 	orr.w	r2, r2, #32
 8007fda:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	689b      	ldr	r3, [r3, #8]
 8007fe2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8007fe6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8007fea:	d113      	bne.n	8008014 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8007ff0:	4a11      	ldr	r2, [pc, #68]	; (8008038 <HAL_ADC_Start_IT+0x164>)
 8007ff2:	4293      	cmp	r3, r2
 8007ff4:	d105      	bne.n	8008002 <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8007ff6:	4b11      	ldr	r3, [pc, #68]	; (800803c <HAL_ADC_Start_IT+0x168>)
 8007ff8:	685b      	ldr	r3, [r3, #4]
 8007ffa:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d108      	bne.n	8008014 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	689a      	ldr	r2, [r3, #8]
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8008010:	609a      	str	r2, [r3, #8]
 8008012:	e00c      	b.n	800802e <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	689a      	ldr	r2, [r3, #8]
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8008022:	609a      	str	r2, [r3, #8]
 8008024:	e003      	b.n	800802e <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2200      	movs	r2, #0
 800802a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 800802e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008030:	4618      	mov	r0, r3
 8008032:	3710      	adds	r7, #16
 8008034:	46bd      	mov	sp, r7
 8008036:	bd80      	pop	{r7, pc}
 8008038:	40012800 	.word	0x40012800
 800803c:	40012400 	.word	0x40012400

08008040 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8008040:	b480      	push	{r7}
 8008042:	b083      	sub	sp, #12
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800804e:	4618      	mov	r0, r3
 8008050:	370c      	adds	r7, #12
 8008052:	46bd      	mov	sp, r7
 8008054:	bc80      	pop	{r7}
 8008056:	4770      	bx	lr

08008058 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b084      	sub	sp, #16
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	685b      	ldr	r3, [r3, #4]
 800806e:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8008070:	68bb      	ldr	r3, [r7, #8]
 8008072:	f003 0320 	and.w	r3, r3, #32
 8008076:	2b00      	cmp	r3, #0
 8008078:	d03e      	beq.n	80080f8 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	f003 0302 	and.w	r3, r3, #2
 8008080:	2b00      	cmp	r3, #0
 8008082:	d039      	beq.n	80080f8 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008088:	f003 0310 	and.w	r3, r3, #16
 800808c:	2b00      	cmp	r3, #0
 800808e:	d105      	bne.n	800809c <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008094:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	689b      	ldr	r3, [r3, #8]
 80080a2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80080a6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80080aa:	d11d      	bne.n	80080e8 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d119      	bne.n	80080e8 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	685a      	ldr	r2, [r3, #4]
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	f022 0220 	bic.w	r2, r2, #32
 80080c2:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080c8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d105      	bne.n	80080e8 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080e0:	f043 0201 	orr.w	r2, r3, #1
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80080e8:	6878      	ldr	r0, [r7, #4]
 80080ea:	f7fd ff81 	bl	8005ff0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	f06f 0212 	mvn.w	r2, #18
 80080f6:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 80080f8:	68bb      	ldr	r3, [r7, #8]
 80080fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d04d      	beq.n	800819e <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	f003 0304 	and.w	r3, r3, #4
 8008108:	2b00      	cmp	r3, #0
 800810a:	d048      	beq.n	800819e <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008110:	f003 0310 	and.w	r3, r3, #16
 8008114:	2b00      	cmp	r3, #0
 8008116:	d105      	bne.n	8008124 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800811c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	689b      	ldr	r3, [r3, #8]
 800812a:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800812e:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8008132:	d012      	beq.n	800815a <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	685b      	ldr	r3, [r3, #4]
 800813a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800813e:	2b00      	cmp	r3, #0
 8008140:	d125      	bne.n	800818e <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	689b      	ldr	r3, [r3, #8]
 8008148:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 800814c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8008150:	d11d      	bne.n	800818e <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8008156:	2b00      	cmp	r3, #0
 8008158:	d119      	bne.n	800818e <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	685a      	ldr	r2, [r3, #4]
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008168:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800816e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800817a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800817e:	2b00      	cmp	r3, #0
 8008180:	d105      	bne.n	800818e <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008186:	f043 0201 	orr.w	r2, r3, #1
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800818e:	6878      	ldr	r0, [r7, #4]
 8008190:	f000 f9bd 	bl	800850e <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f06f 020c 	mvn.w	r2, #12
 800819c:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 800819e:	68bb      	ldr	r3, [r7, #8]
 80081a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d012      	beq.n	80081ce <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	f003 0301 	and.w	r3, r3, #1
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d00d      	beq.n	80081ce <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081b6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80081be:	6878      	ldr	r0, [r7, #4]
 80081c0:	f000 f809 	bl	80081d6 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f06f 0201 	mvn.w	r2, #1
 80081cc:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 80081ce:	bf00      	nop
 80081d0:	3710      	adds	r7, #16
 80081d2:	46bd      	mov	sp, r7
 80081d4:	bd80      	pop	{r7, pc}

080081d6 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80081d6:	b480      	push	{r7}
 80081d8:	b083      	sub	sp, #12
 80081da:	af00      	add	r7, sp, #0
 80081dc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80081de:	bf00      	nop
 80081e0:	370c      	adds	r7, #12
 80081e2:	46bd      	mov	sp, r7
 80081e4:	bc80      	pop	{r7}
 80081e6:	4770      	bx	lr

080081e8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80081e8:	b480      	push	{r7}
 80081ea:	b085      	sub	sp, #20
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
 80081f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80081f2:	2300      	movs	r3, #0
 80081f4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80081f6:	2300      	movs	r3, #0
 80081f8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008200:	2b01      	cmp	r3, #1
 8008202:	d101      	bne.n	8008208 <HAL_ADC_ConfigChannel+0x20>
 8008204:	2302      	movs	r3, #2
 8008206:	e0dc      	b.n	80083c2 <HAL_ADC_ConfigChannel+0x1da>
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2201      	movs	r2, #1
 800820c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	685b      	ldr	r3, [r3, #4]
 8008214:	2b06      	cmp	r3, #6
 8008216:	d81c      	bhi.n	8008252 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	685a      	ldr	r2, [r3, #4]
 8008222:	4613      	mov	r3, r2
 8008224:	009b      	lsls	r3, r3, #2
 8008226:	4413      	add	r3, r2
 8008228:	3b05      	subs	r3, #5
 800822a:	221f      	movs	r2, #31
 800822c:	fa02 f303 	lsl.w	r3, r2, r3
 8008230:	43db      	mvns	r3, r3
 8008232:	4019      	ands	r1, r3
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	6818      	ldr	r0, [r3, #0]
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	685a      	ldr	r2, [r3, #4]
 800823c:	4613      	mov	r3, r2
 800823e:	009b      	lsls	r3, r3, #2
 8008240:	4413      	add	r3, r2
 8008242:	3b05      	subs	r3, #5
 8008244:	fa00 f203 	lsl.w	r2, r0, r3
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	430a      	orrs	r2, r1
 800824e:	635a      	str	r2, [r3, #52]	; 0x34
 8008250:	e03c      	b.n	80082cc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	685b      	ldr	r3, [r3, #4]
 8008256:	2b0c      	cmp	r3, #12
 8008258:	d81c      	bhi.n	8008294 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	685a      	ldr	r2, [r3, #4]
 8008264:	4613      	mov	r3, r2
 8008266:	009b      	lsls	r3, r3, #2
 8008268:	4413      	add	r3, r2
 800826a:	3b23      	subs	r3, #35	; 0x23
 800826c:	221f      	movs	r2, #31
 800826e:	fa02 f303 	lsl.w	r3, r2, r3
 8008272:	43db      	mvns	r3, r3
 8008274:	4019      	ands	r1, r3
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	6818      	ldr	r0, [r3, #0]
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	685a      	ldr	r2, [r3, #4]
 800827e:	4613      	mov	r3, r2
 8008280:	009b      	lsls	r3, r3, #2
 8008282:	4413      	add	r3, r2
 8008284:	3b23      	subs	r3, #35	; 0x23
 8008286:	fa00 f203 	lsl.w	r2, r0, r3
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	430a      	orrs	r2, r1
 8008290:	631a      	str	r2, [r3, #48]	; 0x30
 8008292:	e01b      	b.n	80082cc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	685a      	ldr	r2, [r3, #4]
 800829e:	4613      	mov	r3, r2
 80082a0:	009b      	lsls	r3, r3, #2
 80082a2:	4413      	add	r3, r2
 80082a4:	3b41      	subs	r3, #65	; 0x41
 80082a6:	221f      	movs	r2, #31
 80082a8:	fa02 f303 	lsl.w	r3, r2, r3
 80082ac:	43db      	mvns	r3, r3
 80082ae:	4019      	ands	r1, r3
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	6818      	ldr	r0, [r3, #0]
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	685a      	ldr	r2, [r3, #4]
 80082b8:	4613      	mov	r3, r2
 80082ba:	009b      	lsls	r3, r3, #2
 80082bc:	4413      	add	r3, r2
 80082be:	3b41      	subs	r3, #65	; 0x41
 80082c0:	fa00 f203 	lsl.w	r2, r0, r3
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	430a      	orrs	r2, r1
 80082ca:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	2b09      	cmp	r3, #9
 80082d2:	d91c      	bls.n	800830e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	68d9      	ldr	r1, [r3, #12]
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	681a      	ldr	r2, [r3, #0]
 80082de:	4613      	mov	r3, r2
 80082e0:	005b      	lsls	r3, r3, #1
 80082e2:	4413      	add	r3, r2
 80082e4:	3b1e      	subs	r3, #30
 80082e6:	2207      	movs	r2, #7
 80082e8:	fa02 f303 	lsl.w	r3, r2, r3
 80082ec:	43db      	mvns	r3, r3
 80082ee:	4019      	ands	r1, r3
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	6898      	ldr	r0, [r3, #8]
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	681a      	ldr	r2, [r3, #0]
 80082f8:	4613      	mov	r3, r2
 80082fa:	005b      	lsls	r3, r3, #1
 80082fc:	4413      	add	r3, r2
 80082fe:	3b1e      	subs	r3, #30
 8008300:	fa00 f203 	lsl.w	r2, r0, r3
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	430a      	orrs	r2, r1
 800830a:	60da      	str	r2, [r3, #12]
 800830c:	e019      	b.n	8008342 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	6919      	ldr	r1, [r3, #16]
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	681a      	ldr	r2, [r3, #0]
 8008318:	4613      	mov	r3, r2
 800831a:	005b      	lsls	r3, r3, #1
 800831c:	4413      	add	r3, r2
 800831e:	2207      	movs	r2, #7
 8008320:	fa02 f303 	lsl.w	r3, r2, r3
 8008324:	43db      	mvns	r3, r3
 8008326:	4019      	ands	r1, r3
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	6898      	ldr	r0, [r3, #8]
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	681a      	ldr	r2, [r3, #0]
 8008330:	4613      	mov	r3, r2
 8008332:	005b      	lsls	r3, r3, #1
 8008334:	4413      	add	r3, r2
 8008336:	fa00 f203 	lsl.w	r2, r0, r3
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	430a      	orrs	r2, r1
 8008340:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	2b10      	cmp	r3, #16
 8008348:	d003      	beq.n	8008352 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800834a:	683b      	ldr	r3, [r7, #0]
 800834c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800834e:	2b11      	cmp	r3, #17
 8008350:	d132      	bne.n	80083b8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	4a1d      	ldr	r2, [pc, #116]	; (80083cc <HAL_ADC_ConfigChannel+0x1e4>)
 8008358:	4293      	cmp	r3, r2
 800835a:	d125      	bne.n	80083a8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	689b      	ldr	r3, [r3, #8]
 8008362:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008366:	2b00      	cmp	r3, #0
 8008368:	d126      	bne.n	80083b8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	689a      	ldr	r2, [r3, #8]
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8008378:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	2b10      	cmp	r3, #16
 8008380:	d11a      	bne.n	80083b8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8008382:	4b13      	ldr	r3, [pc, #76]	; (80083d0 <HAL_ADC_ConfigChannel+0x1e8>)
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	4a13      	ldr	r2, [pc, #76]	; (80083d4 <HAL_ADC_ConfigChannel+0x1ec>)
 8008388:	fba2 2303 	umull	r2, r3, r2, r3
 800838c:	0c9a      	lsrs	r2, r3, #18
 800838e:	4613      	mov	r3, r2
 8008390:	009b      	lsls	r3, r3, #2
 8008392:	4413      	add	r3, r2
 8008394:	005b      	lsls	r3, r3, #1
 8008396:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8008398:	e002      	b.n	80083a0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800839a:	68bb      	ldr	r3, [r7, #8]
 800839c:	3b01      	subs	r3, #1
 800839e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d1f9      	bne.n	800839a <HAL_ADC_ConfigChannel+0x1b2>
 80083a6:	e007      	b.n	80083b8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083ac:	f043 0220 	orr.w	r2, r3, #32
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80083b4:	2301      	movs	r3, #1
 80083b6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2200      	movs	r2, #0
 80083bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80083c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80083c2:	4618      	mov	r0, r3
 80083c4:	3714      	adds	r7, #20
 80083c6:	46bd      	mov	sp, r7
 80083c8:	bc80      	pop	{r7}
 80083ca:	4770      	bx	lr
 80083cc:	40012400 	.word	0x40012400
 80083d0:	20000494 	.word	0x20000494
 80083d4:	431bde83 	.word	0x431bde83

080083d8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b084      	sub	sp, #16
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80083e0:	2300      	movs	r3, #0
 80083e2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80083e4:	2300      	movs	r3, #0
 80083e6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	689b      	ldr	r3, [r3, #8]
 80083ee:	f003 0301 	and.w	r3, r3, #1
 80083f2:	2b01      	cmp	r3, #1
 80083f4:	d040      	beq.n	8008478 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	689a      	ldr	r2, [r3, #8]
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	f042 0201 	orr.w	r2, r2, #1
 8008404:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8008406:	4b1f      	ldr	r3, [pc, #124]	; (8008484 <ADC_Enable+0xac>)
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	4a1f      	ldr	r2, [pc, #124]	; (8008488 <ADC_Enable+0xb0>)
 800840c:	fba2 2303 	umull	r2, r3, r2, r3
 8008410:	0c9b      	lsrs	r3, r3, #18
 8008412:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8008414:	e002      	b.n	800841c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8008416:	68bb      	ldr	r3, [r7, #8]
 8008418:	3b01      	subs	r3, #1
 800841a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800841c:	68bb      	ldr	r3, [r7, #8]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d1f9      	bne.n	8008416 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8008422:	f7ff fc51 	bl	8007cc8 <HAL_GetTick>
 8008426:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8008428:	e01f      	b.n	800846a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800842a:	f7ff fc4d 	bl	8007cc8 <HAL_GetTick>
 800842e:	4602      	mov	r2, r0
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	1ad3      	subs	r3, r2, r3
 8008434:	2b02      	cmp	r3, #2
 8008436:	d918      	bls.n	800846a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	689b      	ldr	r3, [r3, #8]
 800843e:	f003 0301 	and.w	r3, r3, #1
 8008442:	2b01      	cmp	r3, #1
 8008444:	d011      	beq.n	800846a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800844a:	f043 0210 	orr.w	r2, r3, #16
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008456:	f043 0201 	orr.w	r2, r3, #1
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	2200      	movs	r2, #0
 8008462:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8008466:	2301      	movs	r3, #1
 8008468:	e007      	b.n	800847a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	689b      	ldr	r3, [r3, #8]
 8008470:	f003 0301 	and.w	r3, r3, #1
 8008474:	2b01      	cmp	r3, #1
 8008476:	d1d8      	bne.n	800842a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8008478:	2300      	movs	r3, #0
}
 800847a:	4618      	mov	r0, r3
 800847c:	3710      	adds	r7, #16
 800847e:	46bd      	mov	sp, r7
 8008480:	bd80      	pop	{r7, pc}
 8008482:	bf00      	nop
 8008484:	20000494 	.word	0x20000494
 8008488:	431bde83 	.word	0x431bde83

0800848c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800848c:	b580      	push	{r7, lr}
 800848e:	b084      	sub	sp, #16
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008494:	2300      	movs	r3, #0
 8008496:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	689b      	ldr	r3, [r3, #8]
 800849e:	f003 0301 	and.w	r3, r3, #1
 80084a2:	2b01      	cmp	r3, #1
 80084a4:	d12e      	bne.n	8008504 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	689a      	ldr	r2, [r3, #8]
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f022 0201 	bic.w	r2, r2, #1
 80084b4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80084b6:	f7ff fc07 	bl	8007cc8 <HAL_GetTick>
 80084ba:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80084bc:	e01b      	b.n	80084f6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80084be:	f7ff fc03 	bl	8007cc8 <HAL_GetTick>
 80084c2:	4602      	mov	r2, r0
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	1ad3      	subs	r3, r2, r3
 80084c8:	2b02      	cmp	r3, #2
 80084ca:	d914      	bls.n	80084f6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	689b      	ldr	r3, [r3, #8]
 80084d2:	f003 0301 	and.w	r3, r3, #1
 80084d6:	2b01      	cmp	r3, #1
 80084d8:	d10d      	bne.n	80084f6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084de:	f043 0210 	orr.w	r2, r3, #16
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084ea:	f043 0201 	orr.w	r2, r3, #1
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80084f2:	2301      	movs	r3, #1
 80084f4:	e007      	b.n	8008506 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	689b      	ldr	r3, [r3, #8]
 80084fc:	f003 0301 	and.w	r3, r3, #1
 8008500:	2b01      	cmp	r3, #1
 8008502:	d0dc      	beq.n	80084be <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8008504:	2300      	movs	r3, #0
}
 8008506:	4618      	mov	r0, r3
 8008508:	3710      	adds	r7, #16
 800850a:	46bd      	mov	sp, r7
 800850c:	bd80      	pop	{r7, pc}

0800850e <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800850e:	b480      	push	{r7}
 8008510:	b083      	sub	sp, #12
 8008512:	af00      	add	r7, sp, #0
 8008514:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8008516:	bf00      	nop
 8008518:	370c      	adds	r7, #12
 800851a:	46bd      	mov	sp, r7
 800851c:	bc80      	pop	{r7}
 800851e:	4770      	bx	lr

08008520 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008520:	b480      	push	{r7}
 8008522:	b085      	sub	sp, #20
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	f003 0307 	and.w	r3, r3, #7
 800852e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008530:	4b0c      	ldr	r3, [pc, #48]	; (8008564 <__NVIC_SetPriorityGrouping+0x44>)
 8008532:	68db      	ldr	r3, [r3, #12]
 8008534:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008536:	68ba      	ldr	r2, [r7, #8]
 8008538:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800853c:	4013      	ands	r3, r2
 800853e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008544:	68bb      	ldr	r3, [r7, #8]
 8008546:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008548:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800854c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008550:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008552:	4a04      	ldr	r2, [pc, #16]	; (8008564 <__NVIC_SetPriorityGrouping+0x44>)
 8008554:	68bb      	ldr	r3, [r7, #8]
 8008556:	60d3      	str	r3, [r2, #12]
}
 8008558:	bf00      	nop
 800855a:	3714      	adds	r7, #20
 800855c:	46bd      	mov	sp, r7
 800855e:	bc80      	pop	{r7}
 8008560:	4770      	bx	lr
 8008562:	bf00      	nop
 8008564:	e000ed00 	.word	0xe000ed00

08008568 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008568:	b480      	push	{r7}
 800856a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800856c:	4b04      	ldr	r3, [pc, #16]	; (8008580 <__NVIC_GetPriorityGrouping+0x18>)
 800856e:	68db      	ldr	r3, [r3, #12]
 8008570:	0a1b      	lsrs	r3, r3, #8
 8008572:	f003 0307 	and.w	r3, r3, #7
}
 8008576:	4618      	mov	r0, r3
 8008578:	46bd      	mov	sp, r7
 800857a:	bc80      	pop	{r7}
 800857c:	4770      	bx	lr
 800857e:	bf00      	nop
 8008580:	e000ed00 	.word	0xe000ed00

08008584 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008584:	b480      	push	{r7}
 8008586:	b083      	sub	sp, #12
 8008588:	af00      	add	r7, sp, #0
 800858a:	4603      	mov	r3, r0
 800858c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800858e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008592:	2b00      	cmp	r3, #0
 8008594:	db0b      	blt.n	80085ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008596:	79fb      	ldrb	r3, [r7, #7]
 8008598:	f003 021f 	and.w	r2, r3, #31
 800859c:	4906      	ldr	r1, [pc, #24]	; (80085b8 <__NVIC_EnableIRQ+0x34>)
 800859e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80085a2:	095b      	lsrs	r3, r3, #5
 80085a4:	2001      	movs	r0, #1
 80085a6:	fa00 f202 	lsl.w	r2, r0, r2
 80085aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80085ae:	bf00      	nop
 80085b0:	370c      	adds	r7, #12
 80085b2:	46bd      	mov	sp, r7
 80085b4:	bc80      	pop	{r7}
 80085b6:	4770      	bx	lr
 80085b8:	e000e100 	.word	0xe000e100

080085bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80085bc:	b480      	push	{r7}
 80085be:	b083      	sub	sp, #12
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	4603      	mov	r3, r0
 80085c4:	6039      	str	r1, [r7, #0]
 80085c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80085c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	db0a      	blt.n	80085e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	b2da      	uxtb	r2, r3
 80085d4:	490c      	ldr	r1, [pc, #48]	; (8008608 <__NVIC_SetPriority+0x4c>)
 80085d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80085da:	0112      	lsls	r2, r2, #4
 80085dc:	b2d2      	uxtb	r2, r2
 80085de:	440b      	add	r3, r1
 80085e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80085e4:	e00a      	b.n	80085fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	b2da      	uxtb	r2, r3
 80085ea:	4908      	ldr	r1, [pc, #32]	; (800860c <__NVIC_SetPriority+0x50>)
 80085ec:	79fb      	ldrb	r3, [r7, #7]
 80085ee:	f003 030f 	and.w	r3, r3, #15
 80085f2:	3b04      	subs	r3, #4
 80085f4:	0112      	lsls	r2, r2, #4
 80085f6:	b2d2      	uxtb	r2, r2
 80085f8:	440b      	add	r3, r1
 80085fa:	761a      	strb	r2, [r3, #24]
}
 80085fc:	bf00      	nop
 80085fe:	370c      	adds	r7, #12
 8008600:	46bd      	mov	sp, r7
 8008602:	bc80      	pop	{r7}
 8008604:	4770      	bx	lr
 8008606:	bf00      	nop
 8008608:	e000e100 	.word	0xe000e100
 800860c:	e000ed00 	.word	0xe000ed00

08008610 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008610:	b480      	push	{r7}
 8008612:	b089      	sub	sp, #36	; 0x24
 8008614:	af00      	add	r7, sp, #0
 8008616:	60f8      	str	r0, [r7, #12]
 8008618:	60b9      	str	r1, [r7, #8]
 800861a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	f003 0307 	and.w	r3, r3, #7
 8008622:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008624:	69fb      	ldr	r3, [r7, #28]
 8008626:	f1c3 0307 	rsb	r3, r3, #7
 800862a:	2b04      	cmp	r3, #4
 800862c:	bf28      	it	cs
 800862e:	2304      	movcs	r3, #4
 8008630:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008632:	69fb      	ldr	r3, [r7, #28]
 8008634:	3304      	adds	r3, #4
 8008636:	2b06      	cmp	r3, #6
 8008638:	d902      	bls.n	8008640 <NVIC_EncodePriority+0x30>
 800863a:	69fb      	ldr	r3, [r7, #28]
 800863c:	3b03      	subs	r3, #3
 800863e:	e000      	b.n	8008642 <NVIC_EncodePriority+0x32>
 8008640:	2300      	movs	r3, #0
 8008642:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008644:	f04f 32ff 	mov.w	r2, #4294967295
 8008648:	69bb      	ldr	r3, [r7, #24]
 800864a:	fa02 f303 	lsl.w	r3, r2, r3
 800864e:	43da      	mvns	r2, r3
 8008650:	68bb      	ldr	r3, [r7, #8]
 8008652:	401a      	ands	r2, r3
 8008654:	697b      	ldr	r3, [r7, #20]
 8008656:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008658:	f04f 31ff 	mov.w	r1, #4294967295
 800865c:	697b      	ldr	r3, [r7, #20]
 800865e:	fa01 f303 	lsl.w	r3, r1, r3
 8008662:	43d9      	mvns	r1, r3
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008668:	4313      	orrs	r3, r2
         );
}
 800866a:	4618      	mov	r0, r3
 800866c:	3724      	adds	r7, #36	; 0x24
 800866e:	46bd      	mov	sp, r7
 8008670:	bc80      	pop	{r7}
 8008672:	4770      	bx	lr

08008674 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b082      	sub	sp, #8
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	3b01      	subs	r3, #1
 8008680:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008684:	d301      	bcc.n	800868a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008686:	2301      	movs	r3, #1
 8008688:	e00f      	b.n	80086aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800868a:	4a0a      	ldr	r2, [pc, #40]	; (80086b4 <SysTick_Config+0x40>)
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	3b01      	subs	r3, #1
 8008690:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008692:	210f      	movs	r1, #15
 8008694:	f04f 30ff 	mov.w	r0, #4294967295
 8008698:	f7ff ff90 	bl	80085bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800869c:	4b05      	ldr	r3, [pc, #20]	; (80086b4 <SysTick_Config+0x40>)
 800869e:	2200      	movs	r2, #0
 80086a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80086a2:	4b04      	ldr	r3, [pc, #16]	; (80086b4 <SysTick_Config+0x40>)
 80086a4:	2207      	movs	r2, #7
 80086a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80086a8:	2300      	movs	r3, #0
}
 80086aa:	4618      	mov	r0, r3
 80086ac:	3708      	adds	r7, #8
 80086ae:	46bd      	mov	sp, r7
 80086b0:	bd80      	pop	{r7, pc}
 80086b2:	bf00      	nop
 80086b4:	e000e010 	.word	0xe000e010

080086b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b082      	sub	sp, #8
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80086c0:	6878      	ldr	r0, [r7, #4]
 80086c2:	f7ff ff2d 	bl	8008520 <__NVIC_SetPriorityGrouping>
}
 80086c6:	bf00      	nop
 80086c8:	3708      	adds	r7, #8
 80086ca:	46bd      	mov	sp, r7
 80086cc:	bd80      	pop	{r7, pc}

080086ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80086ce:	b580      	push	{r7, lr}
 80086d0:	b086      	sub	sp, #24
 80086d2:	af00      	add	r7, sp, #0
 80086d4:	4603      	mov	r3, r0
 80086d6:	60b9      	str	r1, [r7, #8]
 80086d8:	607a      	str	r2, [r7, #4]
 80086da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80086dc:	2300      	movs	r3, #0
 80086de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80086e0:	f7ff ff42 	bl	8008568 <__NVIC_GetPriorityGrouping>
 80086e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80086e6:	687a      	ldr	r2, [r7, #4]
 80086e8:	68b9      	ldr	r1, [r7, #8]
 80086ea:	6978      	ldr	r0, [r7, #20]
 80086ec:	f7ff ff90 	bl	8008610 <NVIC_EncodePriority>
 80086f0:	4602      	mov	r2, r0
 80086f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80086f6:	4611      	mov	r1, r2
 80086f8:	4618      	mov	r0, r3
 80086fa:	f7ff ff5f 	bl	80085bc <__NVIC_SetPriority>
}
 80086fe:	bf00      	nop
 8008700:	3718      	adds	r7, #24
 8008702:	46bd      	mov	sp, r7
 8008704:	bd80      	pop	{r7, pc}

08008706 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008706:	b580      	push	{r7, lr}
 8008708:	b082      	sub	sp, #8
 800870a:	af00      	add	r7, sp, #0
 800870c:	4603      	mov	r3, r0
 800870e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008710:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008714:	4618      	mov	r0, r3
 8008716:	f7ff ff35 	bl	8008584 <__NVIC_EnableIRQ>
}
 800871a:	bf00      	nop
 800871c:	3708      	adds	r7, #8
 800871e:	46bd      	mov	sp, r7
 8008720:	bd80      	pop	{r7, pc}

08008722 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008722:	b580      	push	{r7, lr}
 8008724:	b082      	sub	sp, #8
 8008726:	af00      	add	r7, sp, #0
 8008728:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800872a:	6878      	ldr	r0, [r7, #4]
 800872c:	f7ff ffa2 	bl	8008674 <SysTick_Config>
 8008730:	4603      	mov	r3, r0
}
 8008732:	4618      	mov	r0, r3
 8008734:	3708      	adds	r7, #8
 8008736:	46bd      	mov	sp, r7
 8008738:	bd80      	pop	{r7, pc}
	...

0800873c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800873c:	b480      	push	{r7}
 800873e:	b085      	sub	sp, #20
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8008744:	2300      	movs	r3, #0
 8008746:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d101      	bne.n	8008752 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800874e:	2301      	movs	r3, #1
 8008750:	e043      	b.n	80087da <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	461a      	mov	r2, r3
 8008758:	4b22      	ldr	r3, [pc, #136]	; (80087e4 <HAL_DMA_Init+0xa8>)
 800875a:	4413      	add	r3, r2
 800875c:	4a22      	ldr	r2, [pc, #136]	; (80087e8 <HAL_DMA_Init+0xac>)
 800875e:	fba2 2303 	umull	r2, r3, r2, r3
 8008762:	091b      	lsrs	r3, r3, #4
 8008764:	009a      	lsls	r2, r3, #2
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	4a1f      	ldr	r2, [pc, #124]	; (80087ec <HAL_DMA_Init+0xb0>)
 800876e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2202      	movs	r2, #2
 8008774:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8008786:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800878a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8008794:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	68db      	ldr	r3, [r3, #12]
 800879a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80087a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	695b      	ldr	r3, [r3, #20]
 80087a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80087ac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	69db      	ldr	r3, [r3, #28]
 80087b2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80087b4:	68fa      	ldr	r2, [r7, #12]
 80087b6:	4313      	orrs	r3, r2
 80087b8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	68fa      	ldr	r2, [r7, #12]
 80087c0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	2200      	movs	r2, #0
 80087c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2201      	movs	r2, #1
 80087cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2200      	movs	r2, #0
 80087d4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80087d8:	2300      	movs	r3, #0
}
 80087da:	4618      	mov	r0, r3
 80087dc:	3714      	adds	r7, #20
 80087de:	46bd      	mov	sp, r7
 80087e0:	bc80      	pop	{r7}
 80087e2:	4770      	bx	lr
 80087e4:	bffdfff8 	.word	0xbffdfff8
 80087e8:	cccccccd 	.word	0xcccccccd
 80087ec:	40020000 	.word	0x40020000

080087f0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b086      	sub	sp, #24
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	60f8      	str	r0, [r7, #12]
 80087f8:	60b9      	str	r1, [r7, #8]
 80087fa:	607a      	str	r2, [r7, #4]
 80087fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80087fe:	2300      	movs	r3, #0
 8008800:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008808:	2b01      	cmp	r3, #1
 800880a:	d101      	bne.n	8008810 <HAL_DMA_Start_IT+0x20>
 800880c:	2302      	movs	r3, #2
 800880e:	e04b      	b.n	80088a8 <HAL_DMA_Start_IT+0xb8>
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	2201      	movs	r2, #1
 8008814:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800881e:	b2db      	uxtb	r3, r3
 8008820:	2b01      	cmp	r3, #1
 8008822:	d13a      	bne.n	800889a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	2202      	movs	r2, #2
 8008828:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	2200      	movs	r2, #0
 8008830:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	681a      	ldr	r2, [r3, #0]
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	f022 0201 	bic.w	r2, r2, #1
 8008840:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	687a      	ldr	r2, [r7, #4]
 8008846:	68b9      	ldr	r1, [r7, #8]
 8008848:	68f8      	ldr	r0, [r7, #12]
 800884a:	f000 f9eb 	bl	8008c24 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008852:	2b00      	cmp	r3, #0
 8008854:	d008      	beq.n	8008868 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	681a      	ldr	r2, [r3, #0]
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	f042 020e 	orr.w	r2, r2, #14
 8008864:	601a      	str	r2, [r3, #0]
 8008866:	e00f      	b.n	8008888 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	681a      	ldr	r2, [r3, #0]
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	f022 0204 	bic.w	r2, r2, #4
 8008876:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	681a      	ldr	r2, [r3, #0]
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	f042 020a 	orr.w	r2, r2, #10
 8008886:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	681a      	ldr	r2, [r3, #0]
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	f042 0201 	orr.w	r2, r2, #1
 8008896:	601a      	str	r2, [r3, #0]
 8008898:	e005      	b.n	80088a6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	2200      	movs	r2, #0
 800889e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80088a2:	2302      	movs	r3, #2
 80088a4:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80088a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80088a8:	4618      	mov	r0, r3
 80088aa:	3718      	adds	r7, #24
 80088ac:	46bd      	mov	sp, r7
 80088ae:	bd80      	pop	{r7, pc}

080088b0 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80088b0:	b480      	push	{r7}
 80088b2:	b085      	sub	sp, #20
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80088b8:	2300      	movs	r3, #0
 80088ba:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80088c2:	b2db      	uxtb	r3, r3
 80088c4:	2b02      	cmp	r3, #2
 80088c6:	d008      	beq.n	80088da <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2204      	movs	r2, #4
 80088cc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	2200      	movs	r2, #0
 80088d2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80088d6:	2301      	movs	r3, #1
 80088d8:	e020      	b.n	800891c <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	681a      	ldr	r2, [r3, #0]
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	f022 020e 	bic.w	r2, r2, #14
 80088e8:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	681a      	ldr	r2, [r3, #0]
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	f022 0201 	bic.w	r2, r2, #1
 80088f8:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008902:	2101      	movs	r1, #1
 8008904:	fa01 f202 	lsl.w	r2, r1, r2
 8008908:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	2201      	movs	r2, #1
 800890e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	2200      	movs	r2, #0
 8008916:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800891a:	7bfb      	ldrb	r3, [r7, #15]
}
 800891c:	4618      	mov	r0, r3
 800891e:	3714      	adds	r7, #20
 8008920:	46bd      	mov	sp, r7
 8008922:	bc80      	pop	{r7}
 8008924:	4770      	bx	lr
	...

08008928 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8008928:	b580      	push	{r7, lr}
 800892a:	b084      	sub	sp, #16
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008930:	2300      	movs	r3, #0
 8008932:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800893a:	b2db      	uxtb	r3, r3
 800893c:	2b02      	cmp	r3, #2
 800893e:	d005      	beq.n	800894c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	2204      	movs	r2, #4
 8008944:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8008946:	2301      	movs	r3, #1
 8008948:	73fb      	strb	r3, [r7, #15]
 800894a:	e051      	b.n	80089f0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	681a      	ldr	r2, [r3, #0]
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	f022 020e 	bic.w	r2, r2, #14
 800895a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	681a      	ldr	r2, [r3, #0]
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	f022 0201 	bic.w	r2, r2, #1
 800896a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	4a22      	ldr	r2, [pc, #136]	; (80089fc <HAL_DMA_Abort_IT+0xd4>)
 8008972:	4293      	cmp	r3, r2
 8008974:	d029      	beq.n	80089ca <HAL_DMA_Abort_IT+0xa2>
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	4a21      	ldr	r2, [pc, #132]	; (8008a00 <HAL_DMA_Abort_IT+0xd8>)
 800897c:	4293      	cmp	r3, r2
 800897e:	d022      	beq.n	80089c6 <HAL_DMA_Abort_IT+0x9e>
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	4a1f      	ldr	r2, [pc, #124]	; (8008a04 <HAL_DMA_Abort_IT+0xdc>)
 8008986:	4293      	cmp	r3, r2
 8008988:	d01a      	beq.n	80089c0 <HAL_DMA_Abort_IT+0x98>
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	4a1e      	ldr	r2, [pc, #120]	; (8008a08 <HAL_DMA_Abort_IT+0xe0>)
 8008990:	4293      	cmp	r3, r2
 8008992:	d012      	beq.n	80089ba <HAL_DMA_Abort_IT+0x92>
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	4a1c      	ldr	r2, [pc, #112]	; (8008a0c <HAL_DMA_Abort_IT+0xe4>)
 800899a:	4293      	cmp	r3, r2
 800899c:	d00a      	beq.n	80089b4 <HAL_DMA_Abort_IT+0x8c>
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	4a1b      	ldr	r2, [pc, #108]	; (8008a10 <HAL_DMA_Abort_IT+0xe8>)
 80089a4:	4293      	cmp	r3, r2
 80089a6:	d102      	bne.n	80089ae <HAL_DMA_Abort_IT+0x86>
 80089a8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80089ac:	e00e      	b.n	80089cc <HAL_DMA_Abort_IT+0xa4>
 80089ae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80089b2:	e00b      	b.n	80089cc <HAL_DMA_Abort_IT+0xa4>
 80089b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80089b8:	e008      	b.n	80089cc <HAL_DMA_Abort_IT+0xa4>
 80089ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80089be:	e005      	b.n	80089cc <HAL_DMA_Abort_IT+0xa4>
 80089c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80089c4:	e002      	b.n	80089cc <HAL_DMA_Abort_IT+0xa4>
 80089c6:	2310      	movs	r3, #16
 80089c8:	e000      	b.n	80089cc <HAL_DMA_Abort_IT+0xa4>
 80089ca:	2301      	movs	r3, #1
 80089cc:	4a11      	ldr	r2, [pc, #68]	; (8008a14 <HAL_DMA_Abort_IT+0xec>)
 80089ce:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	2201      	movs	r2, #1
 80089d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2200      	movs	r2, #0
 80089dc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d003      	beq.n	80089f0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089ec:	6878      	ldr	r0, [r7, #4]
 80089ee:	4798      	blx	r3
    } 
  }
  return status;
 80089f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80089f2:	4618      	mov	r0, r3
 80089f4:	3710      	adds	r7, #16
 80089f6:	46bd      	mov	sp, r7
 80089f8:	bd80      	pop	{r7, pc}
 80089fa:	bf00      	nop
 80089fc:	40020008 	.word	0x40020008
 8008a00:	4002001c 	.word	0x4002001c
 8008a04:	40020030 	.word	0x40020030
 8008a08:	40020044 	.word	0x40020044
 8008a0c:	40020058 	.word	0x40020058
 8008a10:	4002006c 	.word	0x4002006c
 8008a14:	40020000 	.word	0x40020000

08008a18 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b084      	sub	sp, #16
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a34:	2204      	movs	r2, #4
 8008a36:	409a      	lsls	r2, r3
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	4013      	ands	r3, r2
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d04f      	beq.n	8008ae0 <HAL_DMA_IRQHandler+0xc8>
 8008a40:	68bb      	ldr	r3, [r7, #8]
 8008a42:	f003 0304 	and.w	r3, r3, #4
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d04a      	beq.n	8008ae0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	f003 0320 	and.w	r3, r3, #32
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d107      	bne.n	8008a68 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	681a      	ldr	r2, [r3, #0]
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	f022 0204 	bic.w	r2, r2, #4
 8008a66:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	4a66      	ldr	r2, [pc, #408]	; (8008c08 <HAL_DMA_IRQHandler+0x1f0>)
 8008a6e:	4293      	cmp	r3, r2
 8008a70:	d029      	beq.n	8008ac6 <HAL_DMA_IRQHandler+0xae>
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	4a65      	ldr	r2, [pc, #404]	; (8008c0c <HAL_DMA_IRQHandler+0x1f4>)
 8008a78:	4293      	cmp	r3, r2
 8008a7a:	d022      	beq.n	8008ac2 <HAL_DMA_IRQHandler+0xaa>
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	4a63      	ldr	r2, [pc, #396]	; (8008c10 <HAL_DMA_IRQHandler+0x1f8>)
 8008a82:	4293      	cmp	r3, r2
 8008a84:	d01a      	beq.n	8008abc <HAL_DMA_IRQHandler+0xa4>
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	4a62      	ldr	r2, [pc, #392]	; (8008c14 <HAL_DMA_IRQHandler+0x1fc>)
 8008a8c:	4293      	cmp	r3, r2
 8008a8e:	d012      	beq.n	8008ab6 <HAL_DMA_IRQHandler+0x9e>
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	4a60      	ldr	r2, [pc, #384]	; (8008c18 <HAL_DMA_IRQHandler+0x200>)
 8008a96:	4293      	cmp	r3, r2
 8008a98:	d00a      	beq.n	8008ab0 <HAL_DMA_IRQHandler+0x98>
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	4a5f      	ldr	r2, [pc, #380]	; (8008c1c <HAL_DMA_IRQHandler+0x204>)
 8008aa0:	4293      	cmp	r3, r2
 8008aa2:	d102      	bne.n	8008aaa <HAL_DMA_IRQHandler+0x92>
 8008aa4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008aa8:	e00e      	b.n	8008ac8 <HAL_DMA_IRQHandler+0xb0>
 8008aaa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008aae:	e00b      	b.n	8008ac8 <HAL_DMA_IRQHandler+0xb0>
 8008ab0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008ab4:	e008      	b.n	8008ac8 <HAL_DMA_IRQHandler+0xb0>
 8008ab6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008aba:	e005      	b.n	8008ac8 <HAL_DMA_IRQHandler+0xb0>
 8008abc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008ac0:	e002      	b.n	8008ac8 <HAL_DMA_IRQHandler+0xb0>
 8008ac2:	2340      	movs	r3, #64	; 0x40
 8008ac4:	e000      	b.n	8008ac8 <HAL_DMA_IRQHandler+0xb0>
 8008ac6:	2304      	movs	r3, #4
 8008ac8:	4a55      	ldr	r2, [pc, #340]	; (8008c20 <HAL_DMA_IRQHandler+0x208>)
 8008aca:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	f000 8094 	beq.w	8008bfe <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ada:	6878      	ldr	r0, [r7, #4]
 8008adc:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8008ade:	e08e      	b.n	8008bfe <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ae4:	2202      	movs	r2, #2
 8008ae6:	409a      	lsls	r2, r3
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	4013      	ands	r3, r2
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d056      	beq.n	8008b9e <HAL_DMA_IRQHandler+0x186>
 8008af0:	68bb      	ldr	r3, [r7, #8]
 8008af2:	f003 0302 	and.w	r3, r3, #2
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d051      	beq.n	8008b9e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	f003 0320 	and.w	r3, r3, #32
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d10b      	bne.n	8008b20 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	681a      	ldr	r2, [r3, #0]
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	f022 020a 	bic.w	r2, r2, #10
 8008b16:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2201      	movs	r2, #1
 8008b1c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	4a38      	ldr	r2, [pc, #224]	; (8008c08 <HAL_DMA_IRQHandler+0x1f0>)
 8008b26:	4293      	cmp	r3, r2
 8008b28:	d029      	beq.n	8008b7e <HAL_DMA_IRQHandler+0x166>
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	4a37      	ldr	r2, [pc, #220]	; (8008c0c <HAL_DMA_IRQHandler+0x1f4>)
 8008b30:	4293      	cmp	r3, r2
 8008b32:	d022      	beq.n	8008b7a <HAL_DMA_IRQHandler+0x162>
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	4a35      	ldr	r2, [pc, #212]	; (8008c10 <HAL_DMA_IRQHandler+0x1f8>)
 8008b3a:	4293      	cmp	r3, r2
 8008b3c:	d01a      	beq.n	8008b74 <HAL_DMA_IRQHandler+0x15c>
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	4a34      	ldr	r2, [pc, #208]	; (8008c14 <HAL_DMA_IRQHandler+0x1fc>)
 8008b44:	4293      	cmp	r3, r2
 8008b46:	d012      	beq.n	8008b6e <HAL_DMA_IRQHandler+0x156>
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	4a32      	ldr	r2, [pc, #200]	; (8008c18 <HAL_DMA_IRQHandler+0x200>)
 8008b4e:	4293      	cmp	r3, r2
 8008b50:	d00a      	beq.n	8008b68 <HAL_DMA_IRQHandler+0x150>
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	4a31      	ldr	r2, [pc, #196]	; (8008c1c <HAL_DMA_IRQHandler+0x204>)
 8008b58:	4293      	cmp	r3, r2
 8008b5a:	d102      	bne.n	8008b62 <HAL_DMA_IRQHandler+0x14a>
 8008b5c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008b60:	e00e      	b.n	8008b80 <HAL_DMA_IRQHandler+0x168>
 8008b62:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008b66:	e00b      	b.n	8008b80 <HAL_DMA_IRQHandler+0x168>
 8008b68:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008b6c:	e008      	b.n	8008b80 <HAL_DMA_IRQHandler+0x168>
 8008b6e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008b72:	e005      	b.n	8008b80 <HAL_DMA_IRQHandler+0x168>
 8008b74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008b78:	e002      	b.n	8008b80 <HAL_DMA_IRQHandler+0x168>
 8008b7a:	2320      	movs	r3, #32
 8008b7c:	e000      	b.n	8008b80 <HAL_DMA_IRQHandler+0x168>
 8008b7e:	2302      	movs	r3, #2
 8008b80:	4a27      	ldr	r2, [pc, #156]	; (8008c20 <HAL_DMA_IRQHandler+0x208>)
 8008b82:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2200      	movs	r2, #0
 8008b88:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d034      	beq.n	8008bfe <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b98:	6878      	ldr	r0, [r7, #4]
 8008b9a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8008b9c:	e02f      	b.n	8008bfe <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ba2:	2208      	movs	r2, #8
 8008ba4:	409a      	lsls	r2, r3
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	4013      	ands	r3, r2
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d028      	beq.n	8008c00 <HAL_DMA_IRQHandler+0x1e8>
 8008bae:	68bb      	ldr	r3, [r7, #8]
 8008bb0:	f003 0308 	and.w	r3, r3, #8
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d023      	beq.n	8008c00 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	681a      	ldr	r2, [r3, #0]
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	f022 020e 	bic.w	r2, r2, #14
 8008bc6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bd0:	2101      	movs	r1, #1
 8008bd2:	fa01 f202 	lsl.w	r2, r1, r2
 8008bd6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2201      	movs	r2, #1
 8008bdc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	2201      	movs	r2, #1
 8008be2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	2200      	movs	r2, #0
 8008bea:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d004      	beq.n	8008c00 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bfa:	6878      	ldr	r0, [r7, #4]
 8008bfc:	4798      	blx	r3
    }
  }
  return;
 8008bfe:	bf00      	nop
 8008c00:	bf00      	nop
}
 8008c02:	3710      	adds	r7, #16
 8008c04:	46bd      	mov	sp, r7
 8008c06:	bd80      	pop	{r7, pc}
 8008c08:	40020008 	.word	0x40020008
 8008c0c:	4002001c 	.word	0x4002001c
 8008c10:	40020030 	.word	0x40020030
 8008c14:	40020044 	.word	0x40020044
 8008c18:	40020058 	.word	0x40020058
 8008c1c:	4002006c 	.word	0x4002006c
 8008c20:	40020000 	.word	0x40020000

08008c24 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008c24:	b480      	push	{r7}
 8008c26:	b085      	sub	sp, #20
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	60f8      	str	r0, [r7, #12]
 8008c2c:	60b9      	str	r1, [r7, #8]
 8008c2e:	607a      	str	r2, [r7, #4]
 8008c30:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c3a:	2101      	movs	r1, #1
 8008c3c:	fa01 f202 	lsl.w	r2, r1, r2
 8008c40:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	683a      	ldr	r2, [r7, #0]
 8008c48:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	685b      	ldr	r3, [r3, #4]
 8008c4e:	2b10      	cmp	r3, #16
 8008c50:	d108      	bne.n	8008c64 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	687a      	ldr	r2, [r7, #4]
 8008c58:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	68ba      	ldr	r2, [r7, #8]
 8008c60:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8008c62:	e007      	b.n	8008c74 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	68ba      	ldr	r2, [r7, #8]
 8008c6a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	687a      	ldr	r2, [r7, #4]
 8008c72:	60da      	str	r2, [r3, #12]
}
 8008c74:	bf00      	nop
 8008c76:	3714      	adds	r7, #20
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	bc80      	pop	{r7}
 8008c7c:	4770      	bx	lr
	...

08008c80 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008c80:	b480      	push	{r7}
 8008c82:	b08b      	sub	sp, #44	; 0x2c
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
 8008c88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8008c8e:	2300      	movs	r3, #0
 8008c90:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008c92:	e169      	b.n	8008f68 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8008c94:	2201      	movs	r2, #1
 8008c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c98:	fa02 f303 	lsl.w	r3, r2, r3
 8008c9c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	69fa      	ldr	r2, [r7, #28]
 8008ca4:	4013      	ands	r3, r2
 8008ca6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8008ca8:	69ba      	ldr	r2, [r7, #24]
 8008caa:	69fb      	ldr	r3, [r7, #28]
 8008cac:	429a      	cmp	r2, r3
 8008cae:	f040 8158 	bne.w	8008f62 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	685b      	ldr	r3, [r3, #4]
 8008cb6:	4a9a      	ldr	r2, [pc, #616]	; (8008f20 <HAL_GPIO_Init+0x2a0>)
 8008cb8:	4293      	cmp	r3, r2
 8008cba:	d05e      	beq.n	8008d7a <HAL_GPIO_Init+0xfa>
 8008cbc:	4a98      	ldr	r2, [pc, #608]	; (8008f20 <HAL_GPIO_Init+0x2a0>)
 8008cbe:	4293      	cmp	r3, r2
 8008cc0:	d875      	bhi.n	8008dae <HAL_GPIO_Init+0x12e>
 8008cc2:	4a98      	ldr	r2, [pc, #608]	; (8008f24 <HAL_GPIO_Init+0x2a4>)
 8008cc4:	4293      	cmp	r3, r2
 8008cc6:	d058      	beq.n	8008d7a <HAL_GPIO_Init+0xfa>
 8008cc8:	4a96      	ldr	r2, [pc, #600]	; (8008f24 <HAL_GPIO_Init+0x2a4>)
 8008cca:	4293      	cmp	r3, r2
 8008ccc:	d86f      	bhi.n	8008dae <HAL_GPIO_Init+0x12e>
 8008cce:	4a96      	ldr	r2, [pc, #600]	; (8008f28 <HAL_GPIO_Init+0x2a8>)
 8008cd0:	4293      	cmp	r3, r2
 8008cd2:	d052      	beq.n	8008d7a <HAL_GPIO_Init+0xfa>
 8008cd4:	4a94      	ldr	r2, [pc, #592]	; (8008f28 <HAL_GPIO_Init+0x2a8>)
 8008cd6:	4293      	cmp	r3, r2
 8008cd8:	d869      	bhi.n	8008dae <HAL_GPIO_Init+0x12e>
 8008cda:	4a94      	ldr	r2, [pc, #592]	; (8008f2c <HAL_GPIO_Init+0x2ac>)
 8008cdc:	4293      	cmp	r3, r2
 8008cde:	d04c      	beq.n	8008d7a <HAL_GPIO_Init+0xfa>
 8008ce0:	4a92      	ldr	r2, [pc, #584]	; (8008f2c <HAL_GPIO_Init+0x2ac>)
 8008ce2:	4293      	cmp	r3, r2
 8008ce4:	d863      	bhi.n	8008dae <HAL_GPIO_Init+0x12e>
 8008ce6:	4a92      	ldr	r2, [pc, #584]	; (8008f30 <HAL_GPIO_Init+0x2b0>)
 8008ce8:	4293      	cmp	r3, r2
 8008cea:	d046      	beq.n	8008d7a <HAL_GPIO_Init+0xfa>
 8008cec:	4a90      	ldr	r2, [pc, #576]	; (8008f30 <HAL_GPIO_Init+0x2b0>)
 8008cee:	4293      	cmp	r3, r2
 8008cf0:	d85d      	bhi.n	8008dae <HAL_GPIO_Init+0x12e>
 8008cf2:	2b12      	cmp	r3, #18
 8008cf4:	d82a      	bhi.n	8008d4c <HAL_GPIO_Init+0xcc>
 8008cf6:	2b12      	cmp	r3, #18
 8008cf8:	d859      	bhi.n	8008dae <HAL_GPIO_Init+0x12e>
 8008cfa:	a201      	add	r2, pc, #4	; (adr r2, 8008d00 <HAL_GPIO_Init+0x80>)
 8008cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d00:	08008d7b 	.word	0x08008d7b
 8008d04:	08008d55 	.word	0x08008d55
 8008d08:	08008d67 	.word	0x08008d67
 8008d0c:	08008da9 	.word	0x08008da9
 8008d10:	08008daf 	.word	0x08008daf
 8008d14:	08008daf 	.word	0x08008daf
 8008d18:	08008daf 	.word	0x08008daf
 8008d1c:	08008daf 	.word	0x08008daf
 8008d20:	08008daf 	.word	0x08008daf
 8008d24:	08008daf 	.word	0x08008daf
 8008d28:	08008daf 	.word	0x08008daf
 8008d2c:	08008daf 	.word	0x08008daf
 8008d30:	08008daf 	.word	0x08008daf
 8008d34:	08008daf 	.word	0x08008daf
 8008d38:	08008daf 	.word	0x08008daf
 8008d3c:	08008daf 	.word	0x08008daf
 8008d40:	08008daf 	.word	0x08008daf
 8008d44:	08008d5d 	.word	0x08008d5d
 8008d48:	08008d71 	.word	0x08008d71
 8008d4c:	4a79      	ldr	r2, [pc, #484]	; (8008f34 <HAL_GPIO_Init+0x2b4>)
 8008d4e:	4293      	cmp	r3, r2
 8008d50:	d013      	beq.n	8008d7a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8008d52:	e02c      	b.n	8008dae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8008d54:	683b      	ldr	r3, [r7, #0]
 8008d56:	68db      	ldr	r3, [r3, #12]
 8008d58:	623b      	str	r3, [r7, #32]
          break;
 8008d5a:	e029      	b.n	8008db0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	68db      	ldr	r3, [r3, #12]
 8008d60:	3304      	adds	r3, #4
 8008d62:	623b      	str	r3, [r7, #32]
          break;
 8008d64:	e024      	b.n	8008db0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8008d66:	683b      	ldr	r3, [r7, #0]
 8008d68:	68db      	ldr	r3, [r3, #12]
 8008d6a:	3308      	adds	r3, #8
 8008d6c:	623b      	str	r3, [r7, #32]
          break;
 8008d6e:	e01f      	b.n	8008db0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8008d70:	683b      	ldr	r3, [r7, #0]
 8008d72:	68db      	ldr	r3, [r3, #12]
 8008d74:	330c      	adds	r3, #12
 8008d76:	623b      	str	r3, [r7, #32]
          break;
 8008d78:	e01a      	b.n	8008db0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	689b      	ldr	r3, [r3, #8]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d102      	bne.n	8008d88 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8008d82:	2304      	movs	r3, #4
 8008d84:	623b      	str	r3, [r7, #32]
          break;
 8008d86:	e013      	b.n	8008db0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8008d88:	683b      	ldr	r3, [r7, #0]
 8008d8a:	689b      	ldr	r3, [r3, #8]
 8008d8c:	2b01      	cmp	r3, #1
 8008d8e:	d105      	bne.n	8008d9c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008d90:	2308      	movs	r3, #8
 8008d92:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	69fa      	ldr	r2, [r7, #28]
 8008d98:	611a      	str	r2, [r3, #16]
          break;
 8008d9a:	e009      	b.n	8008db0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008d9c:	2308      	movs	r3, #8
 8008d9e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	69fa      	ldr	r2, [r7, #28]
 8008da4:	615a      	str	r2, [r3, #20]
          break;
 8008da6:	e003      	b.n	8008db0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8008da8:	2300      	movs	r3, #0
 8008daa:	623b      	str	r3, [r7, #32]
          break;
 8008dac:	e000      	b.n	8008db0 <HAL_GPIO_Init+0x130>
          break;
 8008dae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8008db0:	69bb      	ldr	r3, [r7, #24]
 8008db2:	2bff      	cmp	r3, #255	; 0xff
 8008db4:	d801      	bhi.n	8008dba <HAL_GPIO_Init+0x13a>
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	e001      	b.n	8008dbe <HAL_GPIO_Init+0x13e>
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	3304      	adds	r3, #4
 8008dbe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8008dc0:	69bb      	ldr	r3, [r7, #24]
 8008dc2:	2bff      	cmp	r3, #255	; 0xff
 8008dc4:	d802      	bhi.n	8008dcc <HAL_GPIO_Init+0x14c>
 8008dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dc8:	009b      	lsls	r3, r3, #2
 8008dca:	e002      	b.n	8008dd2 <HAL_GPIO_Init+0x152>
 8008dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dce:	3b08      	subs	r3, #8
 8008dd0:	009b      	lsls	r3, r3, #2
 8008dd2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8008dd4:	697b      	ldr	r3, [r7, #20]
 8008dd6:	681a      	ldr	r2, [r3, #0]
 8008dd8:	210f      	movs	r1, #15
 8008dda:	693b      	ldr	r3, [r7, #16]
 8008ddc:	fa01 f303 	lsl.w	r3, r1, r3
 8008de0:	43db      	mvns	r3, r3
 8008de2:	401a      	ands	r2, r3
 8008de4:	6a39      	ldr	r1, [r7, #32]
 8008de6:	693b      	ldr	r3, [r7, #16]
 8008de8:	fa01 f303 	lsl.w	r3, r1, r3
 8008dec:	431a      	orrs	r2, r3
 8008dee:	697b      	ldr	r3, [r7, #20]
 8008df0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008df2:	683b      	ldr	r3, [r7, #0]
 8008df4:	685b      	ldr	r3, [r3, #4]
 8008df6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	f000 80b1 	beq.w	8008f62 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8008e00:	4b4d      	ldr	r3, [pc, #308]	; (8008f38 <HAL_GPIO_Init+0x2b8>)
 8008e02:	699b      	ldr	r3, [r3, #24]
 8008e04:	4a4c      	ldr	r2, [pc, #304]	; (8008f38 <HAL_GPIO_Init+0x2b8>)
 8008e06:	f043 0301 	orr.w	r3, r3, #1
 8008e0a:	6193      	str	r3, [r2, #24]
 8008e0c:	4b4a      	ldr	r3, [pc, #296]	; (8008f38 <HAL_GPIO_Init+0x2b8>)
 8008e0e:	699b      	ldr	r3, [r3, #24]
 8008e10:	f003 0301 	and.w	r3, r3, #1
 8008e14:	60bb      	str	r3, [r7, #8]
 8008e16:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8008e18:	4a48      	ldr	r2, [pc, #288]	; (8008f3c <HAL_GPIO_Init+0x2bc>)
 8008e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e1c:	089b      	lsrs	r3, r3, #2
 8008e1e:	3302      	adds	r3, #2
 8008e20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e24:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8008e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e28:	f003 0303 	and.w	r3, r3, #3
 8008e2c:	009b      	lsls	r3, r3, #2
 8008e2e:	220f      	movs	r2, #15
 8008e30:	fa02 f303 	lsl.w	r3, r2, r3
 8008e34:	43db      	mvns	r3, r3
 8008e36:	68fa      	ldr	r2, [r7, #12]
 8008e38:	4013      	ands	r3, r2
 8008e3a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	4a40      	ldr	r2, [pc, #256]	; (8008f40 <HAL_GPIO_Init+0x2c0>)
 8008e40:	4293      	cmp	r3, r2
 8008e42:	d013      	beq.n	8008e6c <HAL_GPIO_Init+0x1ec>
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	4a3f      	ldr	r2, [pc, #252]	; (8008f44 <HAL_GPIO_Init+0x2c4>)
 8008e48:	4293      	cmp	r3, r2
 8008e4a:	d00d      	beq.n	8008e68 <HAL_GPIO_Init+0x1e8>
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	4a3e      	ldr	r2, [pc, #248]	; (8008f48 <HAL_GPIO_Init+0x2c8>)
 8008e50:	4293      	cmp	r3, r2
 8008e52:	d007      	beq.n	8008e64 <HAL_GPIO_Init+0x1e4>
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	4a3d      	ldr	r2, [pc, #244]	; (8008f4c <HAL_GPIO_Init+0x2cc>)
 8008e58:	4293      	cmp	r3, r2
 8008e5a:	d101      	bne.n	8008e60 <HAL_GPIO_Init+0x1e0>
 8008e5c:	2303      	movs	r3, #3
 8008e5e:	e006      	b.n	8008e6e <HAL_GPIO_Init+0x1ee>
 8008e60:	2304      	movs	r3, #4
 8008e62:	e004      	b.n	8008e6e <HAL_GPIO_Init+0x1ee>
 8008e64:	2302      	movs	r3, #2
 8008e66:	e002      	b.n	8008e6e <HAL_GPIO_Init+0x1ee>
 8008e68:	2301      	movs	r3, #1
 8008e6a:	e000      	b.n	8008e6e <HAL_GPIO_Init+0x1ee>
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e70:	f002 0203 	and.w	r2, r2, #3
 8008e74:	0092      	lsls	r2, r2, #2
 8008e76:	4093      	lsls	r3, r2
 8008e78:	68fa      	ldr	r2, [r7, #12]
 8008e7a:	4313      	orrs	r3, r2
 8008e7c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8008e7e:	492f      	ldr	r1, [pc, #188]	; (8008f3c <HAL_GPIO_Init+0x2bc>)
 8008e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e82:	089b      	lsrs	r3, r3, #2
 8008e84:	3302      	adds	r3, #2
 8008e86:	68fa      	ldr	r2, [r7, #12]
 8008e88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	685b      	ldr	r3, [r3, #4]
 8008e90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d006      	beq.n	8008ea6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8008e98:	4b2d      	ldr	r3, [pc, #180]	; (8008f50 <HAL_GPIO_Init+0x2d0>)
 8008e9a:	689a      	ldr	r2, [r3, #8]
 8008e9c:	492c      	ldr	r1, [pc, #176]	; (8008f50 <HAL_GPIO_Init+0x2d0>)
 8008e9e:	69bb      	ldr	r3, [r7, #24]
 8008ea0:	4313      	orrs	r3, r2
 8008ea2:	608b      	str	r3, [r1, #8]
 8008ea4:	e006      	b.n	8008eb4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8008ea6:	4b2a      	ldr	r3, [pc, #168]	; (8008f50 <HAL_GPIO_Init+0x2d0>)
 8008ea8:	689a      	ldr	r2, [r3, #8]
 8008eaa:	69bb      	ldr	r3, [r7, #24]
 8008eac:	43db      	mvns	r3, r3
 8008eae:	4928      	ldr	r1, [pc, #160]	; (8008f50 <HAL_GPIO_Init+0x2d0>)
 8008eb0:	4013      	ands	r3, r2
 8008eb2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008eb4:	683b      	ldr	r3, [r7, #0]
 8008eb6:	685b      	ldr	r3, [r3, #4]
 8008eb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d006      	beq.n	8008ece <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8008ec0:	4b23      	ldr	r3, [pc, #140]	; (8008f50 <HAL_GPIO_Init+0x2d0>)
 8008ec2:	68da      	ldr	r2, [r3, #12]
 8008ec4:	4922      	ldr	r1, [pc, #136]	; (8008f50 <HAL_GPIO_Init+0x2d0>)
 8008ec6:	69bb      	ldr	r3, [r7, #24]
 8008ec8:	4313      	orrs	r3, r2
 8008eca:	60cb      	str	r3, [r1, #12]
 8008ecc:	e006      	b.n	8008edc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8008ece:	4b20      	ldr	r3, [pc, #128]	; (8008f50 <HAL_GPIO_Init+0x2d0>)
 8008ed0:	68da      	ldr	r2, [r3, #12]
 8008ed2:	69bb      	ldr	r3, [r7, #24]
 8008ed4:	43db      	mvns	r3, r3
 8008ed6:	491e      	ldr	r1, [pc, #120]	; (8008f50 <HAL_GPIO_Init+0x2d0>)
 8008ed8:	4013      	ands	r3, r2
 8008eda:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	685b      	ldr	r3, [r3, #4]
 8008ee0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d006      	beq.n	8008ef6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8008ee8:	4b19      	ldr	r3, [pc, #100]	; (8008f50 <HAL_GPIO_Init+0x2d0>)
 8008eea:	685a      	ldr	r2, [r3, #4]
 8008eec:	4918      	ldr	r1, [pc, #96]	; (8008f50 <HAL_GPIO_Init+0x2d0>)
 8008eee:	69bb      	ldr	r3, [r7, #24]
 8008ef0:	4313      	orrs	r3, r2
 8008ef2:	604b      	str	r3, [r1, #4]
 8008ef4:	e006      	b.n	8008f04 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8008ef6:	4b16      	ldr	r3, [pc, #88]	; (8008f50 <HAL_GPIO_Init+0x2d0>)
 8008ef8:	685a      	ldr	r2, [r3, #4]
 8008efa:	69bb      	ldr	r3, [r7, #24]
 8008efc:	43db      	mvns	r3, r3
 8008efe:	4914      	ldr	r1, [pc, #80]	; (8008f50 <HAL_GPIO_Init+0x2d0>)
 8008f00:	4013      	ands	r3, r2
 8008f02:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	685b      	ldr	r3, [r3, #4]
 8008f08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d021      	beq.n	8008f54 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8008f10:	4b0f      	ldr	r3, [pc, #60]	; (8008f50 <HAL_GPIO_Init+0x2d0>)
 8008f12:	681a      	ldr	r2, [r3, #0]
 8008f14:	490e      	ldr	r1, [pc, #56]	; (8008f50 <HAL_GPIO_Init+0x2d0>)
 8008f16:	69bb      	ldr	r3, [r7, #24]
 8008f18:	4313      	orrs	r3, r2
 8008f1a:	600b      	str	r3, [r1, #0]
 8008f1c:	e021      	b.n	8008f62 <HAL_GPIO_Init+0x2e2>
 8008f1e:	bf00      	nop
 8008f20:	10320000 	.word	0x10320000
 8008f24:	10310000 	.word	0x10310000
 8008f28:	10220000 	.word	0x10220000
 8008f2c:	10210000 	.word	0x10210000
 8008f30:	10120000 	.word	0x10120000
 8008f34:	10110000 	.word	0x10110000
 8008f38:	40021000 	.word	0x40021000
 8008f3c:	40010000 	.word	0x40010000
 8008f40:	40010800 	.word	0x40010800
 8008f44:	40010c00 	.word	0x40010c00
 8008f48:	40011000 	.word	0x40011000
 8008f4c:	40011400 	.word	0x40011400
 8008f50:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8008f54:	4b0b      	ldr	r3, [pc, #44]	; (8008f84 <HAL_GPIO_Init+0x304>)
 8008f56:	681a      	ldr	r2, [r3, #0]
 8008f58:	69bb      	ldr	r3, [r7, #24]
 8008f5a:	43db      	mvns	r3, r3
 8008f5c:	4909      	ldr	r1, [pc, #36]	; (8008f84 <HAL_GPIO_Init+0x304>)
 8008f5e:	4013      	ands	r3, r2
 8008f60:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8008f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f64:	3301      	adds	r3, #1
 8008f66:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008f68:	683b      	ldr	r3, [r7, #0]
 8008f6a:	681a      	ldr	r2, [r3, #0]
 8008f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f6e:	fa22 f303 	lsr.w	r3, r2, r3
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	f47f ae8e 	bne.w	8008c94 <HAL_GPIO_Init+0x14>
  }
}
 8008f78:	bf00      	nop
 8008f7a:	bf00      	nop
 8008f7c:	372c      	adds	r7, #44	; 0x2c
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	bc80      	pop	{r7}
 8008f82:	4770      	bx	lr
 8008f84:	40010400 	.word	0x40010400

08008f88 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008f88:	b480      	push	{r7}
 8008f8a:	b085      	sub	sp, #20
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
 8008f90:	460b      	mov	r3, r1
 8008f92:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	689a      	ldr	r2, [r3, #8]
 8008f98:	887b      	ldrh	r3, [r7, #2]
 8008f9a:	4013      	ands	r3, r2
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d002      	beq.n	8008fa6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008fa0:	2301      	movs	r3, #1
 8008fa2:	73fb      	strb	r3, [r7, #15]
 8008fa4:	e001      	b.n	8008faa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008faa:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fac:	4618      	mov	r0, r3
 8008fae:	3714      	adds	r7, #20
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	bc80      	pop	{r7}
 8008fb4:	4770      	bx	lr

08008fb6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008fb6:	b480      	push	{r7}
 8008fb8:	b083      	sub	sp, #12
 8008fba:	af00      	add	r7, sp, #0
 8008fbc:	6078      	str	r0, [r7, #4]
 8008fbe:	460b      	mov	r3, r1
 8008fc0:	807b      	strh	r3, [r7, #2]
 8008fc2:	4613      	mov	r3, r2
 8008fc4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008fc6:	787b      	ldrb	r3, [r7, #1]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d003      	beq.n	8008fd4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008fcc:	887a      	ldrh	r2, [r7, #2]
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8008fd2:	e003      	b.n	8008fdc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8008fd4:	887b      	ldrh	r3, [r7, #2]
 8008fd6:	041a      	lsls	r2, r3, #16
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	611a      	str	r2, [r3, #16]
}
 8008fdc:	bf00      	nop
 8008fde:	370c      	adds	r7, #12
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	bc80      	pop	{r7}
 8008fe4:	4770      	bx	lr

08008fe6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008fe6:	b480      	push	{r7}
 8008fe8:	b085      	sub	sp, #20
 8008fea:	af00      	add	r7, sp, #0
 8008fec:	6078      	str	r0, [r7, #4]
 8008fee:	460b      	mov	r3, r1
 8008ff0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	68db      	ldr	r3, [r3, #12]
 8008ff6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008ff8:	887a      	ldrh	r2, [r7, #2]
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	4013      	ands	r3, r2
 8008ffe:	041a      	lsls	r2, r3, #16
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	43d9      	mvns	r1, r3
 8009004:	887b      	ldrh	r3, [r7, #2]
 8009006:	400b      	ands	r3, r1
 8009008:	431a      	orrs	r2, r3
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	611a      	str	r2, [r3, #16]
}
 800900e:	bf00      	nop
 8009010:	3714      	adds	r7, #20
 8009012:	46bd      	mov	sp, r7
 8009014:	bc80      	pop	{r7}
 8009016:	4770      	bx	lr

08009018 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8009018:	b580      	push	{r7, lr}
 800901a:	b082      	sub	sp, #8
 800901c:	af00      	add	r7, sp, #0
 800901e:	4603      	mov	r3, r0
 8009020:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8009022:	4b08      	ldr	r3, [pc, #32]	; (8009044 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009024:	695a      	ldr	r2, [r3, #20]
 8009026:	88fb      	ldrh	r3, [r7, #6]
 8009028:	4013      	ands	r3, r2
 800902a:	2b00      	cmp	r3, #0
 800902c:	d006      	beq.n	800903c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800902e:	4a05      	ldr	r2, [pc, #20]	; (8009044 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009030:	88fb      	ldrh	r3, [r7, #6]
 8009032:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8009034:	88fb      	ldrh	r3, [r7, #6]
 8009036:	4618      	mov	r0, r3
 8009038:	f7fc ff9a 	bl	8005f70 <HAL_GPIO_EXTI_Callback>
  }
}
 800903c:	bf00      	nop
 800903e:	3708      	adds	r7, #8
 8009040:	46bd      	mov	sp, r7
 8009042:	bd80      	pop	{r7, pc}
 8009044:	40010400 	.word	0x40010400

08009048 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b084      	sub	sp, #16
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d101      	bne.n	800905a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009056:	2301      	movs	r3, #1
 8009058:	e12b      	b.n	80092b2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009060:	b2db      	uxtb	r3, r3
 8009062:	2b00      	cmp	r3, #0
 8009064:	d106      	bne.n	8009074 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	2200      	movs	r2, #0
 800906a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800906e:	6878      	ldr	r0, [r7, #4]
 8009070:	f7fc fe76 	bl	8005d60 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2224      	movs	r2, #36	; 0x24
 8009078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	681a      	ldr	r2, [r3, #0]
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	f022 0201 	bic.w	r2, r2, #1
 800908a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	681a      	ldr	r2, [r3, #0]
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800909a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	681a      	ldr	r2, [r3, #0]
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80090aa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80090ac:	f001 fbca 	bl	800a844 <HAL_RCC_GetPCLK1Freq>
 80090b0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	685b      	ldr	r3, [r3, #4]
 80090b6:	4a81      	ldr	r2, [pc, #516]	; (80092bc <HAL_I2C_Init+0x274>)
 80090b8:	4293      	cmp	r3, r2
 80090ba:	d807      	bhi.n	80090cc <HAL_I2C_Init+0x84>
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	4a80      	ldr	r2, [pc, #512]	; (80092c0 <HAL_I2C_Init+0x278>)
 80090c0:	4293      	cmp	r3, r2
 80090c2:	bf94      	ite	ls
 80090c4:	2301      	movls	r3, #1
 80090c6:	2300      	movhi	r3, #0
 80090c8:	b2db      	uxtb	r3, r3
 80090ca:	e006      	b.n	80090da <HAL_I2C_Init+0x92>
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	4a7d      	ldr	r2, [pc, #500]	; (80092c4 <HAL_I2C_Init+0x27c>)
 80090d0:	4293      	cmp	r3, r2
 80090d2:	bf94      	ite	ls
 80090d4:	2301      	movls	r3, #1
 80090d6:	2300      	movhi	r3, #0
 80090d8:	b2db      	uxtb	r3, r3
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d001      	beq.n	80090e2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80090de:	2301      	movs	r3, #1
 80090e0:	e0e7      	b.n	80092b2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	4a78      	ldr	r2, [pc, #480]	; (80092c8 <HAL_I2C_Init+0x280>)
 80090e6:	fba2 2303 	umull	r2, r3, r2, r3
 80090ea:	0c9b      	lsrs	r3, r3, #18
 80090ec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	685b      	ldr	r3, [r3, #4]
 80090f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	68ba      	ldr	r2, [r7, #8]
 80090fe:	430a      	orrs	r2, r1
 8009100:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	6a1b      	ldr	r3, [r3, #32]
 8009108:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	685b      	ldr	r3, [r3, #4]
 8009110:	4a6a      	ldr	r2, [pc, #424]	; (80092bc <HAL_I2C_Init+0x274>)
 8009112:	4293      	cmp	r3, r2
 8009114:	d802      	bhi.n	800911c <HAL_I2C_Init+0xd4>
 8009116:	68bb      	ldr	r3, [r7, #8]
 8009118:	3301      	adds	r3, #1
 800911a:	e009      	b.n	8009130 <HAL_I2C_Init+0xe8>
 800911c:	68bb      	ldr	r3, [r7, #8]
 800911e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8009122:	fb02 f303 	mul.w	r3, r2, r3
 8009126:	4a69      	ldr	r2, [pc, #420]	; (80092cc <HAL_I2C_Init+0x284>)
 8009128:	fba2 2303 	umull	r2, r3, r2, r3
 800912c:	099b      	lsrs	r3, r3, #6
 800912e:	3301      	adds	r3, #1
 8009130:	687a      	ldr	r2, [r7, #4]
 8009132:	6812      	ldr	r2, [r2, #0]
 8009134:	430b      	orrs	r3, r1
 8009136:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	69db      	ldr	r3, [r3, #28]
 800913e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8009142:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	685b      	ldr	r3, [r3, #4]
 800914a:	495c      	ldr	r1, [pc, #368]	; (80092bc <HAL_I2C_Init+0x274>)
 800914c:	428b      	cmp	r3, r1
 800914e:	d819      	bhi.n	8009184 <HAL_I2C_Init+0x13c>
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	1e59      	subs	r1, r3, #1
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	685b      	ldr	r3, [r3, #4]
 8009158:	005b      	lsls	r3, r3, #1
 800915a:	fbb1 f3f3 	udiv	r3, r1, r3
 800915e:	1c59      	adds	r1, r3, #1
 8009160:	f640 73fc 	movw	r3, #4092	; 0xffc
 8009164:	400b      	ands	r3, r1
 8009166:	2b00      	cmp	r3, #0
 8009168:	d00a      	beq.n	8009180 <HAL_I2C_Init+0x138>
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	1e59      	subs	r1, r3, #1
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	685b      	ldr	r3, [r3, #4]
 8009172:	005b      	lsls	r3, r3, #1
 8009174:	fbb1 f3f3 	udiv	r3, r1, r3
 8009178:	3301      	adds	r3, #1
 800917a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800917e:	e051      	b.n	8009224 <HAL_I2C_Init+0x1dc>
 8009180:	2304      	movs	r3, #4
 8009182:	e04f      	b.n	8009224 <HAL_I2C_Init+0x1dc>
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	689b      	ldr	r3, [r3, #8]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d111      	bne.n	80091b0 <HAL_I2C_Init+0x168>
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	1e58      	subs	r0, r3, #1
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	6859      	ldr	r1, [r3, #4]
 8009194:	460b      	mov	r3, r1
 8009196:	005b      	lsls	r3, r3, #1
 8009198:	440b      	add	r3, r1
 800919a:	fbb0 f3f3 	udiv	r3, r0, r3
 800919e:	3301      	adds	r3, #1
 80091a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	bf0c      	ite	eq
 80091a8:	2301      	moveq	r3, #1
 80091aa:	2300      	movne	r3, #0
 80091ac:	b2db      	uxtb	r3, r3
 80091ae:	e012      	b.n	80091d6 <HAL_I2C_Init+0x18e>
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	1e58      	subs	r0, r3, #1
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	6859      	ldr	r1, [r3, #4]
 80091b8:	460b      	mov	r3, r1
 80091ba:	009b      	lsls	r3, r3, #2
 80091bc:	440b      	add	r3, r1
 80091be:	0099      	lsls	r1, r3, #2
 80091c0:	440b      	add	r3, r1
 80091c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80091c6:	3301      	adds	r3, #1
 80091c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	bf0c      	ite	eq
 80091d0:	2301      	moveq	r3, #1
 80091d2:	2300      	movne	r3, #0
 80091d4:	b2db      	uxtb	r3, r3
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d001      	beq.n	80091de <HAL_I2C_Init+0x196>
 80091da:	2301      	movs	r3, #1
 80091dc:	e022      	b.n	8009224 <HAL_I2C_Init+0x1dc>
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	689b      	ldr	r3, [r3, #8]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d10e      	bne.n	8009204 <HAL_I2C_Init+0x1bc>
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	1e58      	subs	r0, r3, #1
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	6859      	ldr	r1, [r3, #4]
 80091ee:	460b      	mov	r3, r1
 80091f0:	005b      	lsls	r3, r3, #1
 80091f2:	440b      	add	r3, r1
 80091f4:	fbb0 f3f3 	udiv	r3, r0, r3
 80091f8:	3301      	adds	r3, #1
 80091fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80091fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009202:	e00f      	b.n	8009224 <HAL_I2C_Init+0x1dc>
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	1e58      	subs	r0, r3, #1
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	6859      	ldr	r1, [r3, #4]
 800920c:	460b      	mov	r3, r1
 800920e:	009b      	lsls	r3, r3, #2
 8009210:	440b      	add	r3, r1
 8009212:	0099      	lsls	r1, r3, #2
 8009214:	440b      	add	r3, r1
 8009216:	fbb0 f3f3 	udiv	r3, r0, r3
 800921a:	3301      	adds	r3, #1
 800921c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009220:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009224:	6879      	ldr	r1, [r7, #4]
 8009226:	6809      	ldr	r1, [r1, #0]
 8009228:	4313      	orrs	r3, r2
 800922a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	69da      	ldr	r2, [r3, #28]
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	6a1b      	ldr	r3, [r3, #32]
 800923e:	431a      	orrs	r2, r3
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	430a      	orrs	r2, r1
 8009246:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	689b      	ldr	r3, [r3, #8]
 800924e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8009252:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009256:	687a      	ldr	r2, [r7, #4]
 8009258:	6911      	ldr	r1, [r2, #16]
 800925a:	687a      	ldr	r2, [r7, #4]
 800925c:	68d2      	ldr	r2, [r2, #12]
 800925e:	4311      	orrs	r1, r2
 8009260:	687a      	ldr	r2, [r7, #4]
 8009262:	6812      	ldr	r2, [r2, #0]
 8009264:	430b      	orrs	r3, r1
 8009266:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	68db      	ldr	r3, [r3, #12]
 800926e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	695a      	ldr	r2, [r3, #20]
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	699b      	ldr	r3, [r3, #24]
 800927a:	431a      	orrs	r2, r3
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	430a      	orrs	r2, r1
 8009282:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	681a      	ldr	r2, [r3, #0]
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	f042 0201 	orr.w	r2, r2, #1
 8009292:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	2200      	movs	r2, #0
 8009298:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	2220      	movs	r2, #32
 800929e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	2200      	movs	r2, #0
 80092a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2200      	movs	r2, #0
 80092ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80092b0:	2300      	movs	r3, #0
}
 80092b2:	4618      	mov	r0, r3
 80092b4:	3710      	adds	r7, #16
 80092b6:	46bd      	mov	sp, r7
 80092b8:	bd80      	pop	{r7, pc}
 80092ba:	bf00      	nop
 80092bc:	000186a0 	.word	0x000186a0
 80092c0:	001e847f 	.word	0x001e847f
 80092c4:	003d08ff 	.word	0x003d08ff
 80092c8:	431bde83 	.word	0x431bde83
 80092cc:	10624dd3 	.word	0x10624dd3

080092d0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b088      	sub	sp, #32
 80092d4:	af02      	add	r7, sp, #8
 80092d6:	60f8      	str	r0, [r7, #12]
 80092d8:	607a      	str	r2, [r7, #4]
 80092da:	461a      	mov	r2, r3
 80092dc:	460b      	mov	r3, r1
 80092de:	817b      	strh	r3, [r7, #10]
 80092e0:	4613      	mov	r3, r2
 80092e2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80092e4:	f7fe fcf0 	bl	8007cc8 <HAL_GetTick>
 80092e8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80092f0:	b2db      	uxtb	r3, r3
 80092f2:	2b20      	cmp	r3, #32
 80092f4:	f040 80e0 	bne.w	80094b8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80092f8:	697b      	ldr	r3, [r7, #20]
 80092fa:	9300      	str	r3, [sp, #0]
 80092fc:	2319      	movs	r3, #25
 80092fe:	2201      	movs	r2, #1
 8009300:	4970      	ldr	r1, [pc, #448]	; (80094c4 <HAL_I2C_Master_Transmit+0x1f4>)
 8009302:	68f8      	ldr	r0, [r7, #12]
 8009304:	f000 fc9e 	bl	8009c44 <I2C_WaitOnFlagUntilTimeout>
 8009308:	4603      	mov	r3, r0
 800930a:	2b00      	cmp	r3, #0
 800930c:	d001      	beq.n	8009312 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800930e:	2302      	movs	r3, #2
 8009310:	e0d3      	b.n	80094ba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009318:	2b01      	cmp	r3, #1
 800931a:	d101      	bne.n	8009320 <HAL_I2C_Master_Transmit+0x50>
 800931c:	2302      	movs	r3, #2
 800931e:	e0cc      	b.n	80094ba <HAL_I2C_Master_Transmit+0x1ea>
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	2201      	movs	r2, #1
 8009324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	f003 0301 	and.w	r3, r3, #1
 8009332:	2b01      	cmp	r3, #1
 8009334:	d007      	beq.n	8009346 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	681a      	ldr	r2, [r3, #0]
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	f042 0201 	orr.w	r2, r2, #1
 8009344:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	681a      	ldr	r2, [r3, #0]
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009354:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	2221      	movs	r2, #33	; 0x21
 800935a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	2210      	movs	r2, #16
 8009362:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	2200      	movs	r2, #0
 800936a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	687a      	ldr	r2, [r7, #4]
 8009370:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	893a      	ldrh	r2, [r7, #8]
 8009376:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800937c:	b29a      	uxth	r2, r3
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	4a50      	ldr	r2, [pc, #320]	; (80094c8 <HAL_I2C_Master_Transmit+0x1f8>)
 8009386:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8009388:	8979      	ldrh	r1, [r7, #10]
 800938a:	697b      	ldr	r3, [r7, #20]
 800938c:	6a3a      	ldr	r2, [r7, #32]
 800938e:	68f8      	ldr	r0, [r7, #12]
 8009390:	f000 fb08 	bl	80099a4 <I2C_MasterRequestWrite>
 8009394:	4603      	mov	r3, r0
 8009396:	2b00      	cmp	r3, #0
 8009398:	d001      	beq.n	800939e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800939a:	2301      	movs	r3, #1
 800939c:	e08d      	b.n	80094ba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800939e:	2300      	movs	r3, #0
 80093a0:	613b      	str	r3, [r7, #16]
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	695b      	ldr	r3, [r3, #20]
 80093a8:	613b      	str	r3, [r7, #16]
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	699b      	ldr	r3, [r3, #24]
 80093b0:	613b      	str	r3, [r7, #16]
 80093b2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80093b4:	e066      	b.n	8009484 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80093b6:	697a      	ldr	r2, [r7, #20]
 80093b8:	6a39      	ldr	r1, [r7, #32]
 80093ba:	68f8      	ldr	r0, [r7, #12]
 80093bc:	f000 fd5c 	bl	8009e78 <I2C_WaitOnTXEFlagUntilTimeout>
 80093c0:	4603      	mov	r3, r0
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d00d      	beq.n	80093e2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093ca:	2b04      	cmp	r3, #4
 80093cc:	d107      	bne.n	80093de <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	681a      	ldr	r2, [r3, #0]
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80093dc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80093de:	2301      	movs	r3, #1
 80093e0:	e06b      	b.n	80094ba <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093e6:	781a      	ldrb	r2, [r3, #0]
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093f2:	1c5a      	adds	r2, r3, #1
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093fc:	b29b      	uxth	r3, r3
 80093fe:	3b01      	subs	r3, #1
 8009400:	b29a      	uxth	r2, r3
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800940a:	3b01      	subs	r3, #1
 800940c:	b29a      	uxth	r2, r3
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	695b      	ldr	r3, [r3, #20]
 8009418:	f003 0304 	and.w	r3, r3, #4
 800941c:	2b04      	cmp	r3, #4
 800941e:	d11b      	bne.n	8009458 <HAL_I2C_Master_Transmit+0x188>
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009424:	2b00      	cmp	r3, #0
 8009426:	d017      	beq.n	8009458 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800942c:	781a      	ldrb	r2, [r3, #0]
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009438:	1c5a      	adds	r2, r3, #1
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009442:	b29b      	uxth	r3, r3
 8009444:	3b01      	subs	r3, #1
 8009446:	b29a      	uxth	r2, r3
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009450:	3b01      	subs	r3, #1
 8009452:	b29a      	uxth	r2, r3
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009458:	697a      	ldr	r2, [r7, #20]
 800945a:	6a39      	ldr	r1, [r7, #32]
 800945c:	68f8      	ldr	r0, [r7, #12]
 800945e:	f000 fd53 	bl	8009f08 <I2C_WaitOnBTFFlagUntilTimeout>
 8009462:	4603      	mov	r3, r0
 8009464:	2b00      	cmp	r3, #0
 8009466:	d00d      	beq.n	8009484 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800946c:	2b04      	cmp	r3, #4
 800946e:	d107      	bne.n	8009480 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	681a      	ldr	r2, [r3, #0]
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800947e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009480:	2301      	movs	r3, #1
 8009482:	e01a      	b.n	80094ba <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009488:	2b00      	cmp	r3, #0
 800948a:	d194      	bne.n	80093b6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	681a      	ldr	r2, [r3, #0]
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800949a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	2220      	movs	r2, #32
 80094a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	2200      	movs	r2, #0
 80094a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	2200      	movs	r2, #0
 80094b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80094b4:	2300      	movs	r3, #0
 80094b6:	e000      	b.n	80094ba <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80094b8:	2302      	movs	r3, #2
  }
}
 80094ba:	4618      	mov	r0, r3
 80094bc:	3718      	adds	r7, #24
 80094be:	46bd      	mov	sp, r7
 80094c0:	bd80      	pop	{r7, pc}
 80094c2:	bf00      	nop
 80094c4:	00100002 	.word	0x00100002
 80094c8:	ffff0000 	.word	0xffff0000

080094cc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b08c      	sub	sp, #48	; 0x30
 80094d0:	af02      	add	r7, sp, #8
 80094d2:	60f8      	str	r0, [r7, #12]
 80094d4:	607a      	str	r2, [r7, #4]
 80094d6:	461a      	mov	r2, r3
 80094d8:	460b      	mov	r3, r1
 80094da:	817b      	strh	r3, [r7, #10]
 80094dc:	4613      	mov	r3, r2
 80094de:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80094e0:	2300      	movs	r3, #0
 80094e2:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80094e4:	f7fe fbf0 	bl	8007cc8 <HAL_GetTick>
 80094e8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80094f0:	b2db      	uxtb	r3, r3
 80094f2:	2b20      	cmp	r3, #32
 80094f4:	f040 824b 	bne.w	800998e <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80094f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094fa:	9300      	str	r3, [sp, #0]
 80094fc:	2319      	movs	r3, #25
 80094fe:	2201      	movs	r2, #1
 8009500:	497f      	ldr	r1, [pc, #508]	; (8009700 <HAL_I2C_Master_Receive+0x234>)
 8009502:	68f8      	ldr	r0, [r7, #12]
 8009504:	f000 fb9e 	bl	8009c44 <I2C_WaitOnFlagUntilTimeout>
 8009508:	4603      	mov	r3, r0
 800950a:	2b00      	cmp	r3, #0
 800950c:	d001      	beq.n	8009512 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 800950e:	2302      	movs	r3, #2
 8009510:	e23e      	b.n	8009990 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009518:	2b01      	cmp	r3, #1
 800951a:	d101      	bne.n	8009520 <HAL_I2C_Master_Receive+0x54>
 800951c:	2302      	movs	r3, #2
 800951e:	e237      	b.n	8009990 <HAL_I2C_Master_Receive+0x4c4>
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	2201      	movs	r2, #1
 8009524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	f003 0301 	and.w	r3, r3, #1
 8009532:	2b01      	cmp	r3, #1
 8009534:	d007      	beq.n	8009546 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	681a      	ldr	r2, [r3, #0]
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	f042 0201 	orr.w	r2, r2, #1
 8009544:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	681a      	ldr	r2, [r3, #0]
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009554:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	2222      	movs	r2, #34	; 0x22
 800955a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	2210      	movs	r2, #16
 8009562:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	2200      	movs	r2, #0
 800956a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	687a      	ldr	r2, [r7, #4]
 8009570:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	893a      	ldrh	r2, [r7, #8]
 8009576:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800957c:	b29a      	uxth	r2, r3
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	4a5f      	ldr	r2, [pc, #380]	; (8009704 <HAL_I2C_Master_Receive+0x238>)
 8009586:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8009588:	8979      	ldrh	r1, [r7, #10]
 800958a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800958c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800958e:	68f8      	ldr	r0, [r7, #12]
 8009590:	f000 fa8a 	bl	8009aa8 <I2C_MasterRequestRead>
 8009594:	4603      	mov	r3, r0
 8009596:	2b00      	cmp	r3, #0
 8009598:	d001      	beq.n	800959e <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 800959a:	2301      	movs	r3, #1
 800959c:	e1f8      	b.n	8009990 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d113      	bne.n	80095ce <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80095a6:	2300      	movs	r3, #0
 80095a8:	61fb      	str	r3, [r7, #28]
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	695b      	ldr	r3, [r3, #20]
 80095b0:	61fb      	str	r3, [r7, #28]
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	699b      	ldr	r3, [r3, #24]
 80095b8:	61fb      	str	r3, [r7, #28]
 80095ba:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	681a      	ldr	r2, [r3, #0]
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80095ca:	601a      	str	r2, [r3, #0]
 80095cc:	e1cc      	b.n	8009968 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095d2:	2b01      	cmp	r3, #1
 80095d4:	d11e      	bne.n	8009614 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	681a      	ldr	r2, [r3, #0]
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80095e4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80095e6:	b672      	cpsid	i
}
 80095e8:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80095ea:	2300      	movs	r3, #0
 80095ec:	61bb      	str	r3, [r7, #24]
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	695b      	ldr	r3, [r3, #20]
 80095f4:	61bb      	str	r3, [r7, #24]
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	699b      	ldr	r3, [r3, #24]
 80095fc:	61bb      	str	r3, [r7, #24]
 80095fe:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	681a      	ldr	r2, [r3, #0]
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800960e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8009610:	b662      	cpsie	i
}
 8009612:	e035      	b.n	8009680 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009618:	2b02      	cmp	r3, #2
 800961a:	d11e      	bne.n	800965a <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	681a      	ldr	r2, [r3, #0]
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800962a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800962c:	b672      	cpsid	i
}
 800962e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009630:	2300      	movs	r3, #0
 8009632:	617b      	str	r3, [r7, #20]
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	695b      	ldr	r3, [r3, #20]
 800963a:	617b      	str	r3, [r7, #20]
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	699b      	ldr	r3, [r3, #24]
 8009642:	617b      	str	r3, [r7, #20]
 8009644:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	681a      	ldr	r2, [r3, #0]
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009654:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8009656:	b662      	cpsie	i
}
 8009658:	e012      	b.n	8009680 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	681a      	ldr	r2, [r3, #0]
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009668:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800966a:	2300      	movs	r3, #0
 800966c:	613b      	str	r3, [r7, #16]
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	695b      	ldr	r3, [r3, #20]
 8009674:	613b      	str	r3, [r7, #16]
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	699b      	ldr	r3, [r3, #24]
 800967c:	613b      	str	r3, [r7, #16]
 800967e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8009680:	e172      	b.n	8009968 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009686:	2b03      	cmp	r3, #3
 8009688:	f200 811f 	bhi.w	80098ca <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009690:	2b01      	cmp	r3, #1
 8009692:	d123      	bne.n	80096dc <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009694:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009696:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009698:	68f8      	ldr	r0, [r7, #12]
 800969a:	f000 fc7d 	bl	8009f98 <I2C_WaitOnRXNEFlagUntilTimeout>
 800969e:	4603      	mov	r3, r0
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d001      	beq.n	80096a8 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 80096a4:	2301      	movs	r3, #1
 80096a6:	e173      	b.n	8009990 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	691a      	ldr	r2, [r3, #16]
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096b2:	b2d2      	uxtb	r2, r2
 80096b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096ba:	1c5a      	adds	r2, r3, #1
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096c4:	3b01      	subs	r3, #1
 80096c6:	b29a      	uxth	r2, r3
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80096d0:	b29b      	uxth	r3, r3
 80096d2:	3b01      	subs	r3, #1
 80096d4:	b29a      	uxth	r2, r3
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80096da:	e145      	b.n	8009968 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096e0:	2b02      	cmp	r3, #2
 80096e2:	d152      	bne.n	800978a <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80096e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096e6:	9300      	str	r3, [sp, #0]
 80096e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096ea:	2200      	movs	r2, #0
 80096ec:	4906      	ldr	r1, [pc, #24]	; (8009708 <HAL_I2C_Master_Receive+0x23c>)
 80096ee:	68f8      	ldr	r0, [r7, #12]
 80096f0:	f000 faa8 	bl	8009c44 <I2C_WaitOnFlagUntilTimeout>
 80096f4:	4603      	mov	r3, r0
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d008      	beq.n	800970c <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 80096fa:	2301      	movs	r3, #1
 80096fc:	e148      	b.n	8009990 <HAL_I2C_Master_Receive+0x4c4>
 80096fe:	bf00      	nop
 8009700:	00100002 	.word	0x00100002
 8009704:	ffff0000 	.word	0xffff0000
 8009708:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800970c:	b672      	cpsid	i
}
 800970e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	681a      	ldr	r2, [r3, #0]
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800971e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	691a      	ldr	r2, [r3, #16]
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800972a:	b2d2      	uxtb	r2, r2
 800972c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009732:	1c5a      	adds	r2, r3, #1
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800973c:	3b01      	subs	r3, #1
 800973e:	b29a      	uxth	r2, r3
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009748:	b29b      	uxth	r3, r3
 800974a:	3b01      	subs	r3, #1
 800974c:	b29a      	uxth	r2, r3
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8009752:	b662      	cpsie	i
}
 8009754:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	691a      	ldr	r2, [r3, #16]
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009760:	b2d2      	uxtb	r2, r2
 8009762:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009768:	1c5a      	adds	r2, r3, #1
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009772:	3b01      	subs	r3, #1
 8009774:	b29a      	uxth	r2, r3
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800977e:	b29b      	uxth	r3, r3
 8009780:	3b01      	subs	r3, #1
 8009782:	b29a      	uxth	r2, r3
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009788:	e0ee      	b.n	8009968 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800978a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800978c:	9300      	str	r3, [sp, #0]
 800978e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009790:	2200      	movs	r2, #0
 8009792:	4981      	ldr	r1, [pc, #516]	; (8009998 <HAL_I2C_Master_Receive+0x4cc>)
 8009794:	68f8      	ldr	r0, [r7, #12]
 8009796:	f000 fa55 	bl	8009c44 <I2C_WaitOnFlagUntilTimeout>
 800979a:	4603      	mov	r3, r0
 800979c:	2b00      	cmp	r3, #0
 800979e:	d001      	beq.n	80097a4 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 80097a0:	2301      	movs	r3, #1
 80097a2:	e0f5      	b.n	8009990 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	681a      	ldr	r2, [r3, #0]
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80097b2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80097b4:	b672      	cpsid	i
}
 80097b6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	691a      	ldr	r2, [r3, #16]
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097c2:	b2d2      	uxtb	r2, r2
 80097c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097ca:	1c5a      	adds	r2, r3, #1
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80097d4:	3b01      	subs	r3, #1
 80097d6:	b29a      	uxth	r2, r3
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097e0:	b29b      	uxth	r3, r3
 80097e2:	3b01      	subs	r3, #1
 80097e4:	b29a      	uxth	r2, r3
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80097ea:	4b6c      	ldr	r3, [pc, #432]	; (800999c <HAL_I2C_Master_Receive+0x4d0>)
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	08db      	lsrs	r3, r3, #3
 80097f0:	4a6b      	ldr	r2, [pc, #428]	; (80099a0 <HAL_I2C_Master_Receive+0x4d4>)
 80097f2:	fba2 2303 	umull	r2, r3, r2, r3
 80097f6:	0a1a      	lsrs	r2, r3, #8
 80097f8:	4613      	mov	r3, r2
 80097fa:	009b      	lsls	r3, r3, #2
 80097fc:	4413      	add	r3, r2
 80097fe:	00da      	lsls	r2, r3, #3
 8009800:	1ad3      	subs	r3, r2, r3
 8009802:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8009804:	6a3b      	ldr	r3, [r7, #32]
 8009806:	3b01      	subs	r3, #1
 8009808:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800980a:	6a3b      	ldr	r3, [r7, #32]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d118      	bne.n	8009842 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	2200      	movs	r2, #0
 8009814:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	2220      	movs	r2, #32
 800981a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	2200      	movs	r2, #0
 8009822:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800982a:	f043 0220 	orr.w	r2, r3, #32
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8009832:	b662      	cpsie	i
}
 8009834:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	2200      	movs	r2, #0
 800983a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800983e:	2301      	movs	r3, #1
 8009840:	e0a6      	b.n	8009990 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	695b      	ldr	r3, [r3, #20]
 8009848:	f003 0304 	and.w	r3, r3, #4
 800984c:	2b04      	cmp	r3, #4
 800984e:	d1d9      	bne.n	8009804 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	681a      	ldr	r2, [r3, #0]
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800985e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	691a      	ldr	r2, [r3, #16]
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800986a:	b2d2      	uxtb	r2, r2
 800986c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009872:	1c5a      	adds	r2, r3, #1
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800987c:	3b01      	subs	r3, #1
 800987e:	b29a      	uxth	r2, r3
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009888:	b29b      	uxth	r3, r3
 800988a:	3b01      	subs	r3, #1
 800988c:	b29a      	uxth	r2, r3
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8009892:	b662      	cpsie	i
}
 8009894:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	691a      	ldr	r2, [r3, #16]
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098a0:	b2d2      	uxtb	r2, r2
 80098a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098a8:	1c5a      	adds	r2, r3, #1
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80098b2:	3b01      	subs	r3, #1
 80098b4:	b29a      	uxth	r2, r3
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80098be:	b29b      	uxth	r3, r3
 80098c0:	3b01      	subs	r3, #1
 80098c2:	b29a      	uxth	r2, r3
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80098c8:	e04e      	b.n	8009968 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80098ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098cc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80098ce:	68f8      	ldr	r0, [r7, #12]
 80098d0:	f000 fb62 	bl	8009f98 <I2C_WaitOnRXNEFlagUntilTimeout>
 80098d4:	4603      	mov	r3, r0
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d001      	beq.n	80098de <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 80098da:	2301      	movs	r3, #1
 80098dc:	e058      	b.n	8009990 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	691a      	ldr	r2, [r3, #16]
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098e8:	b2d2      	uxtb	r2, r2
 80098ea:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098f0:	1c5a      	adds	r2, r3, #1
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80098fa:	3b01      	subs	r3, #1
 80098fc:	b29a      	uxth	r2, r3
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009906:	b29b      	uxth	r3, r3
 8009908:	3b01      	subs	r3, #1
 800990a:	b29a      	uxth	r2, r3
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	695b      	ldr	r3, [r3, #20]
 8009916:	f003 0304 	and.w	r3, r3, #4
 800991a:	2b04      	cmp	r3, #4
 800991c:	d124      	bne.n	8009968 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009922:	2b03      	cmp	r3, #3
 8009924:	d107      	bne.n	8009936 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	681a      	ldr	r2, [r3, #0]
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009934:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	691a      	ldr	r2, [r3, #16]
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009940:	b2d2      	uxtb	r2, r2
 8009942:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009948:	1c5a      	adds	r2, r3, #1
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009952:	3b01      	subs	r3, #1
 8009954:	b29a      	uxth	r2, r3
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800995e:	b29b      	uxth	r3, r3
 8009960:	3b01      	subs	r3, #1
 8009962:	b29a      	uxth	r2, r3
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800996c:	2b00      	cmp	r3, #0
 800996e:	f47f ae88 	bne.w	8009682 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	2220      	movs	r2, #32
 8009976:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	2200      	movs	r2, #0
 800997e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	2200      	movs	r2, #0
 8009986:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800998a:	2300      	movs	r3, #0
 800998c:	e000      	b.n	8009990 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 800998e:	2302      	movs	r3, #2
  }
}
 8009990:	4618      	mov	r0, r3
 8009992:	3728      	adds	r7, #40	; 0x28
 8009994:	46bd      	mov	sp, r7
 8009996:	bd80      	pop	{r7, pc}
 8009998:	00010004 	.word	0x00010004
 800999c:	20000494 	.word	0x20000494
 80099a0:	14f8b589 	.word	0x14f8b589

080099a4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b088      	sub	sp, #32
 80099a8:	af02      	add	r7, sp, #8
 80099aa:	60f8      	str	r0, [r7, #12]
 80099ac:	607a      	str	r2, [r7, #4]
 80099ae:	603b      	str	r3, [r7, #0]
 80099b0:	460b      	mov	r3, r1
 80099b2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099b8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80099ba:	697b      	ldr	r3, [r7, #20]
 80099bc:	2b08      	cmp	r3, #8
 80099be:	d006      	beq.n	80099ce <I2C_MasterRequestWrite+0x2a>
 80099c0:	697b      	ldr	r3, [r7, #20]
 80099c2:	2b01      	cmp	r3, #1
 80099c4:	d003      	beq.n	80099ce <I2C_MasterRequestWrite+0x2a>
 80099c6:	697b      	ldr	r3, [r7, #20]
 80099c8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80099cc:	d108      	bne.n	80099e0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	681a      	ldr	r2, [r3, #0]
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80099dc:	601a      	str	r2, [r3, #0]
 80099de:	e00b      	b.n	80099f8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099e4:	2b12      	cmp	r3, #18
 80099e6:	d107      	bne.n	80099f8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	681a      	ldr	r2, [r3, #0]
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80099f6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80099f8:	683b      	ldr	r3, [r7, #0]
 80099fa:	9300      	str	r3, [sp, #0]
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	2200      	movs	r2, #0
 8009a00:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009a04:	68f8      	ldr	r0, [r7, #12]
 8009a06:	f000 f91d 	bl	8009c44 <I2C_WaitOnFlagUntilTimeout>
 8009a0a:	4603      	mov	r3, r0
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d00d      	beq.n	8009a2c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a1e:	d103      	bne.n	8009a28 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009a26:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009a28:	2303      	movs	r3, #3
 8009a2a:	e035      	b.n	8009a98 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	691b      	ldr	r3, [r3, #16]
 8009a30:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009a34:	d108      	bne.n	8009a48 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009a36:	897b      	ldrh	r3, [r7, #10]
 8009a38:	b2db      	uxtb	r3, r3
 8009a3a:	461a      	mov	r2, r3
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009a44:	611a      	str	r2, [r3, #16]
 8009a46:	e01b      	b.n	8009a80 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009a48:	897b      	ldrh	r3, [r7, #10]
 8009a4a:	11db      	asrs	r3, r3, #7
 8009a4c:	b2db      	uxtb	r3, r3
 8009a4e:	f003 0306 	and.w	r3, r3, #6
 8009a52:	b2db      	uxtb	r3, r3
 8009a54:	f063 030f 	orn	r3, r3, #15
 8009a58:	b2da      	uxtb	r2, r3
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8009a60:	683b      	ldr	r3, [r7, #0]
 8009a62:	687a      	ldr	r2, [r7, #4]
 8009a64:	490e      	ldr	r1, [pc, #56]	; (8009aa0 <I2C_MasterRequestWrite+0xfc>)
 8009a66:	68f8      	ldr	r0, [r7, #12]
 8009a68:	f000 f966 	bl	8009d38 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009a6c:	4603      	mov	r3, r0
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d001      	beq.n	8009a76 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8009a72:	2301      	movs	r3, #1
 8009a74:	e010      	b.n	8009a98 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8009a76:	897b      	ldrh	r3, [r7, #10]
 8009a78:	b2da      	uxtb	r2, r3
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009a80:	683b      	ldr	r3, [r7, #0]
 8009a82:	687a      	ldr	r2, [r7, #4]
 8009a84:	4907      	ldr	r1, [pc, #28]	; (8009aa4 <I2C_MasterRequestWrite+0x100>)
 8009a86:	68f8      	ldr	r0, [r7, #12]
 8009a88:	f000 f956 	bl	8009d38 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009a8c:	4603      	mov	r3, r0
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d001      	beq.n	8009a96 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8009a92:	2301      	movs	r3, #1
 8009a94:	e000      	b.n	8009a98 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8009a96:	2300      	movs	r3, #0
}
 8009a98:	4618      	mov	r0, r3
 8009a9a:	3718      	adds	r7, #24
 8009a9c:	46bd      	mov	sp, r7
 8009a9e:	bd80      	pop	{r7, pc}
 8009aa0:	00010008 	.word	0x00010008
 8009aa4:	00010002 	.word	0x00010002

08009aa8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b088      	sub	sp, #32
 8009aac:	af02      	add	r7, sp, #8
 8009aae:	60f8      	str	r0, [r7, #12]
 8009ab0:	607a      	str	r2, [r7, #4]
 8009ab2:	603b      	str	r3, [r7, #0]
 8009ab4:	460b      	mov	r3, r1
 8009ab6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009abc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	681a      	ldr	r2, [r3, #0]
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009acc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8009ace:	697b      	ldr	r3, [r7, #20]
 8009ad0:	2b08      	cmp	r3, #8
 8009ad2:	d006      	beq.n	8009ae2 <I2C_MasterRequestRead+0x3a>
 8009ad4:	697b      	ldr	r3, [r7, #20]
 8009ad6:	2b01      	cmp	r3, #1
 8009ad8:	d003      	beq.n	8009ae2 <I2C_MasterRequestRead+0x3a>
 8009ada:	697b      	ldr	r3, [r7, #20]
 8009adc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009ae0:	d108      	bne.n	8009af4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	681a      	ldr	r2, [r3, #0]
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009af0:	601a      	str	r2, [r3, #0]
 8009af2:	e00b      	b.n	8009b0c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009af8:	2b11      	cmp	r3, #17
 8009afa:	d107      	bne.n	8009b0c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	681a      	ldr	r2, [r3, #0]
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009b0a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009b0c:	683b      	ldr	r3, [r7, #0]
 8009b0e:	9300      	str	r3, [sp, #0]
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	2200      	movs	r2, #0
 8009b14:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009b18:	68f8      	ldr	r0, [r7, #12]
 8009b1a:	f000 f893 	bl	8009c44 <I2C_WaitOnFlagUntilTimeout>
 8009b1e:	4603      	mov	r3, r0
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d00d      	beq.n	8009b40 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009b32:	d103      	bne.n	8009b3c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009b3a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009b3c:	2303      	movs	r3, #3
 8009b3e:	e079      	b.n	8009c34 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	691b      	ldr	r3, [r3, #16]
 8009b44:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009b48:	d108      	bne.n	8009b5c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8009b4a:	897b      	ldrh	r3, [r7, #10]
 8009b4c:	b2db      	uxtb	r3, r3
 8009b4e:	f043 0301 	orr.w	r3, r3, #1
 8009b52:	b2da      	uxtb	r2, r3
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	611a      	str	r2, [r3, #16]
 8009b5a:	e05f      	b.n	8009c1c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009b5c:	897b      	ldrh	r3, [r7, #10]
 8009b5e:	11db      	asrs	r3, r3, #7
 8009b60:	b2db      	uxtb	r3, r3
 8009b62:	f003 0306 	and.w	r3, r3, #6
 8009b66:	b2db      	uxtb	r3, r3
 8009b68:	f063 030f 	orn	r3, r3, #15
 8009b6c:	b2da      	uxtb	r2, r3
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8009b74:	683b      	ldr	r3, [r7, #0]
 8009b76:	687a      	ldr	r2, [r7, #4]
 8009b78:	4930      	ldr	r1, [pc, #192]	; (8009c3c <I2C_MasterRequestRead+0x194>)
 8009b7a:	68f8      	ldr	r0, [r7, #12]
 8009b7c:	f000 f8dc 	bl	8009d38 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009b80:	4603      	mov	r3, r0
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d001      	beq.n	8009b8a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8009b86:	2301      	movs	r3, #1
 8009b88:	e054      	b.n	8009c34 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8009b8a:	897b      	ldrh	r3, [r7, #10]
 8009b8c:	b2da      	uxtb	r2, r3
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009b94:	683b      	ldr	r3, [r7, #0]
 8009b96:	687a      	ldr	r2, [r7, #4]
 8009b98:	4929      	ldr	r1, [pc, #164]	; (8009c40 <I2C_MasterRequestRead+0x198>)
 8009b9a:	68f8      	ldr	r0, [r7, #12]
 8009b9c:	f000 f8cc 	bl	8009d38 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009ba0:	4603      	mov	r3, r0
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d001      	beq.n	8009baa <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8009ba6:	2301      	movs	r3, #1
 8009ba8:	e044      	b.n	8009c34 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009baa:	2300      	movs	r3, #0
 8009bac:	613b      	str	r3, [r7, #16]
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	695b      	ldr	r3, [r3, #20]
 8009bb4:	613b      	str	r3, [r7, #16]
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	699b      	ldr	r3, [r3, #24]
 8009bbc:	613b      	str	r3, [r7, #16]
 8009bbe:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	681a      	ldr	r2, [r3, #0]
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009bce:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009bd0:	683b      	ldr	r3, [r7, #0]
 8009bd2:	9300      	str	r3, [sp, #0]
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009bdc:	68f8      	ldr	r0, [r7, #12]
 8009bde:	f000 f831 	bl	8009c44 <I2C_WaitOnFlagUntilTimeout>
 8009be2:	4603      	mov	r3, r0
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d00d      	beq.n	8009c04 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009bf2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009bf6:	d103      	bne.n	8009c00 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009bfe:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8009c00:	2303      	movs	r3, #3
 8009c02:	e017      	b.n	8009c34 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8009c04:	897b      	ldrh	r3, [r7, #10]
 8009c06:	11db      	asrs	r3, r3, #7
 8009c08:	b2db      	uxtb	r3, r3
 8009c0a:	f003 0306 	and.w	r3, r3, #6
 8009c0e:	b2db      	uxtb	r3, r3
 8009c10:	f063 030e 	orn	r3, r3, #14
 8009c14:	b2da      	uxtb	r2, r3
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009c1c:	683b      	ldr	r3, [r7, #0]
 8009c1e:	687a      	ldr	r2, [r7, #4]
 8009c20:	4907      	ldr	r1, [pc, #28]	; (8009c40 <I2C_MasterRequestRead+0x198>)
 8009c22:	68f8      	ldr	r0, [r7, #12]
 8009c24:	f000 f888 	bl	8009d38 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009c28:	4603      	mov	r3, r0
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d001      	beq.n	8009c32 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8009c2e:	2301      	movs	r3, #1
 8009c30:	e000      	b.n	8009c34 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8009c32:	2300      	movs	r3, #0
}
 8009c34:	4618      	mov	r0, r3
 8009c36:	3718      	adds	r7, #24
 8009c38:	46bd      	mov	sp, r7
 8009c3a:	bd80      	pop	{r7, pc}
 8009c3c:	00010008 	.word	0x00010008
 8009c40:	00010002 	.word	0x00010002

08009c44 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009c44:	b580      	push	{r7, lr}
 8009c46:	b084      	sub	sp, #16
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	60f8      	str	r0, [r7, #12]
 8009c4c:	60b9      	str	r1, [r7, #8]
 8009c4e:	603b      	str	r3, [r7, #0]
 8009c50:	4613      	mov	r3, r2
 8009c52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009c54:	e048      	b.n	8009ce8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009c56:	683b      	ldr	r3, [r7, #0]
 8009c58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c5c:	d044      	beq.n	8009ce8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009c5e:	f7fe f833 	bl	8007cc8 <HAL_GetTick>
 8009c62:	4602      	mov	r2, r0
 8009c64:	69bb      	ldr	r3, [r7, #24]
 8009c66:	1ad3      	subs	r3, r2, r3
 8009c68:	683a      	ldr	r2, [r7, #0]
 8009c6a:	429a      	cmp	r2, r3
 8009c6c:	d302      	bcc.n	8009c74 <I2C_WaitOnFlagUntilTimeout+0x30>
 8009c6e:	683b      	ldr	r3, [r7, #0]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d139      	bne.n	8009ce8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8009c74:	68bb      	ldr	r3, [r7, #8]
 8009c76:	0c1b      	lsrs	r3, r3, #16
 8009c78:	b2db      	uxtb	r3, r3
 8009c7a:	2b01      	cmp	r3, #1
 8009c7c:	d10d      	bne.n	8009c9a <I2C_WaitOnFlagUntilTimeout+0x56>
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	695b      	ldr	r3, [r3, #20]
 8009c84:	43da      	mvns	r2, r3
 8009c86:	68bb      	ldr	r3, [r7, #8]
 8009c88:	4013      	ands	r3, r2
 8009c8a:	b29b      	uxth	r3, r3
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	bf0c      	ite	eq
 8009c90:	2301      	moveq	r3, #1
 8009c92:	2300      	movne	r3, #0
 8009c94:	b2db      	uxtb	r3, r3
 8009c96:	461a      	mov	r2, r3
 8009c98:	e00c      	b.n	8009cb4 <I2C_WaitOnFlagUntilTimeout+0x70>
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	699b      	ldr	r3, [r3, #24]
 8009ca0:	43da      	mvns	r2, r3
 8009ca2:	68bb      	ldr	r3, [r7, #8]
 8009ca4:	4013      	ands	r3, r2
 8009ca6:	b29b      	uxth	r3, r3
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	bf0c      	ite	eq
 8009cac:	2301      	moveq	r3, #1
 8009cae:	2300      	movne	r3, #0
 8009cb0:	b2db      	uxtb	r3, r3
 8009cb2:	461a      	mov	r2, r3
 8009cb4:	79fb      	ldrb	r3, [r7, #7]
 8009cb6:	429a      	cmp	r2, r3
 8009cb8:	d116      	bne.n	8009ce8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	2200      	movs	r2, #0
 8009cbe:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	2220      	movs	r2, #32
 8009cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	2200      	movs	r2, #0
 8009ccc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cd4:	f043 0220 	orr.w	r2, r3, #32
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	2200      	movs	r2, #0
 8009ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8009ce4:	2301      	movs	r3, #1
 8009ce6:	e023      	b.n	8009d30 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009ce8:	68bb      	ldr	r3, [r7, #8]
 8009cea:	0c1b      	lsrs	r3, r3, #16
 8009cec:	b2db      	uxtb	r3, r3
 8009cee:	2b01      	cmp	r3, #1
 8009cf0:	d10d      	bne.n	8009d0e <I2C_WaitOnFlagUntilTimeout+0xca>
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	695b      	ldr	r3, [r3, #20]
 8009cf8:	43da      	mvns	r2, r3
 8009cfa:	68bb      	ldr	r3, [r7, #8]
 8009cfc:	4013      	ands	r3, r2
 8009cfe:	b29b      	uxth	r3, r3
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	bf0c      	ite	eq
 8009d04:	2301      	moveq	r3, #1
 8009d06:	2300      	movne	r3, #0
 8009d08:	b2db      	uxtb	r3, r3
 8009d0a:	461a      	mov	r2, r3
 8009d0c:	e00c      	b.n	8009d28 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	699b      	ldr	r3, [r3, #24]
 8009d14:	43da      	mvns	r2, r3
 8009d16:	68bb      	ldr	r3, [r7, #8]
 8009d18:	4013      	ands	r3, r2
 8009d1a:	b29b      	uxth	r3, r3
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	bf0c      	ite	eq
 8009d20:	2301      	moveq	r3, #1
 8009d22:	2300      	movne	r3, #0
 8009d24:	b2db      	uxtb	r3, r3
 8009d26:	461a      	mov	r2, r3
 8009d28:	79fb      	ldrb	r3, [r7, #7]
 8009d2a:	429a      	cmp	r2, r3
 8009d2c:	d093      	beq.n	8009c56 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009d2e:	2300      	movs	r3, #0
}
 8009d30:	4618      	mov	r0, r3
 8009d32:	3710      	adds	r7, #16
 8009d34:	46bd      	mov	sp, r7
 8009d36:	bd80      	pop	{r7, pc}

08009d38 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	b084      	sub	sp, #16
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	60f8      	str	r0, [r7, #12]
 8009d40:	60b9      	str	r1, [r7, #8]
 8009d42:	607a      	str	r2, [r7, #4]
 8009d44:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009d46:	e071      	b.n	8009e2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	695b      	ldr	r3, [r3, #20]
 8009d4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009d52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009d56:	d123      	bne.n	8009da0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	681a      	ldr	r2, [r3, #0]
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009d66:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009d70:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	2200      	movs	r2, #0
 8009d76:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	2220      	movs	r2, #32
 8009d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	2200      	movs	r2, #0
 8009d84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d8c:	f043 0204 	orr.w	r2, r3, #4
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	2200      	movs	r2, #0
 8009d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009d9c:	2301      	movs	r3, #1
 8009d9e:	e067      	b.n	8009e70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009da6:	d041      	beq.n	8009e2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009da8:	f7fd ff8e 	bl	8007cc8 <HAL_GetTick>
 8009dac:	4602      	mov	r2, r0
 8009dae:	683b      	ldr	r3, [r7, #0]
 8009db0:	1ad3      	subs	r3, r2, r3
 8009db2:	687a      	ldr	r2, [r7, #4]
 8009db4:	429a      	cmp	r2, r3
 8009db6:	d302      	bcc.n	8009dbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d136      	bne.n	8009e2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8009dbe:	68bb      	ldr	r3, [r7, #8]
 8009dc0:	0c1b      	lsrs	r3, r3, #16
 8009dc2:	b2db      	uxtb	r3, r3
 8009dc4:	2b01      	cmp	r3, #1
 8009dc6:	d10c      	bne.n	8009de2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	695b      	ldr	r3, [r3, #20]
 8009dce:	43da      	mvns	r2, r3
 8009dd0:	68bb      	ldr	r3, [r7, #8]
 8009dd2:	4013      	ands	r3, r2
 8009dd4:	b29b      	uxth	r3, r3
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	bf14      	ite	ne
 8009dda:	2301      	movne	r3, #1
 8009ddc:	2300      	moveq	r3, #0
 8009dde:	b2db      	uxtb	r3, r3
 8009de0:	e00b      	b.n	8009dfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	699b      	ldr	r3, [r3, #24]
 8009de8:	43da      	mvns	r2, r3
 8009dea:	68bb      	ldr	r3, [r7, #8]
 8009dec:	4013      	ands	r3, r2
 8009dee:	b29b      	uxth	r3, r3
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	bf14      	ite	ne
 8009df4:	2301      	movne	r3, #1
 8009df6:	2300      	moveq	r3, #0
 8009df8:	b2db      	uxtb	r3, r3
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d016      	beq.n	8009e2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	2200      	movs	r2, #0
 8009e02:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	2220      	movs	r2, #32
 8009e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	2200      	movs	r2, #0
 8009e10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e18:	f043 0220 	orr.w	r2, r3, #32
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	2200      	movs	r2, #0
 8009e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8009e28:	2301      	movs	r3, #1
 8009e2a:	e021      	b.n	8009e70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009e2c:	68bb      	ldr	r3, [r7, #8]
 8009e2e:	0c1b      	lsrs	r3, r3, #16
 8009e30:	b2db      	uxtb	r3, r3
 8009e32:	2b01      	cmp	r3, #1
 8009e34:	d10c      	bne.n	8009e50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	695b      	ldr	r3, [r3, #20]
 8009e3c:	43da      	mvns	r2, r3
 8009e3e:	68bb      	ldr	r3, [r7, #8]
 8009e40:	4013      	ands	r3, r2
 8009e42:	b29b      	uxth	r3, r3
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	bf14      	ite	ne
 8009e48:	2301      	movne	r3, #1
 8009e4a:	2300      	moveq	r3, #0
 8009e4c:	b2db      	uxtb	r3, r3
 8009e4e:	e00b      	b.n	8009e68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	699b      	ldr	r3, [r3, #24]
 8009e56:	43da      	mvns	r2, r3
 8009e58:	68bb      	ldr	r3, [r7, #8]
 8009e5a:	4013      	ands	r3, r2
 8009e5c:	b29b      	uxth	r3, r3
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	bf14      	ite	ne
 8009e62:	2301      	movne	r3, #1
 8009e64:	2300      	moveq	r3, #0
 8009e66:	b2db      	uxtb	r3, r3
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	f47f af6d 	bne.w	8009d48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8009e6e:	2300      	movs	r3, #0
}
 8009e70:	4618      	mov	r0, r3
 8009e72:	3710      	adds	r7, #16
 8009e74:	46bd      	mov	sp, r7
 8009e76:	bd80      	pop	{r7, pc}

08009e78 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b084      	sub	sp, #16
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	60f8      	str	r0, [r7, #12]
 8009e80:	60b9      	str	r1, [r7, #8]
 8009e82:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009e84:	e034      	b.n	8009ef0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009e86:	68f8      	ldr	r0, [r7, #12]
 8009e88:	f000 f8e3 	bl	800a052 <I2C_IsAcknowledgeFailed>
 8009e8c:	4603      	mov	r3, r0
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d001      	beq.n	8009e96 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009e92:	2301      	movs	r3, #1
 8009e94:	e034      	b.n	8009f00 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009e96:	68bb      	ldr	r3, [r7, #8]
 8009e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e9c:	d028      	beq.n	8009ef0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009e9e:	f7fd ff13 	bl	8007cc8 <HAL_GetTick>
 8009ea2:	4602      	mov	r2, r0
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	1ad3      	subs	r3, r2, r3
 8009ea8:	68ba      	ldr	r2, [r7, #8]
 8009eaa:	429a      	cmp	r2, r3
 8009eac:	d302      	bcc.n	8009eb4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8009eae:	68bb      	ldr	r3, [r7, #8]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d11d      	bne.n	8009ef0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	695b      	ldr	r3, [r3, #20]
 8009eba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ebe:	2b80      	cmp	r3, #128	; 0x80
 8009ec0:	d016      	beq.n	8009ef0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	2220      	movs	r2, #32
 8009ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009edc:	f043 0220 	orr.w	r2, r3, #32
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	2200      	movs	r2, #0
 8009ee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8009eec:	2301      	movs	r3, #1
 8009eee:	e007      	b.n	8009f00 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	695b      	ldr	r3, [r3, #20]
 8009ef6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009efa:	2b80      	cmp	r3, #128	; 0x80
 8009efc:	d1c3      	bne.n	8009e86 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009efe:	2300      	movs	r3, #0
}
 8009f00:	4618      	mov	r0, r3
 8009f02:	3710      	adds	r7, #16
 8009f04:	46bd      	mov	sp, r7
 8009f06:	bd80      	pop	{r7, pc}

08009f08 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	b084      	sub	sp, #16
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	60f8      	str	r0, [r7, #12]
 8009f10:	60b9      	str	r1, [r7, #8]
 8009f12:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009f14:	e034      	b.n	8009f80 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009f16:	68f8      	ldr	r0, [r7, #12]
 8009f18:	f000 f89b 	bl	800a052 <I2C_IsAcknowledgeFailed>
 8009f1c:	4603      	mov	r3, r0
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d001      	beq.n	8009f26 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009f22:	2301      	movs	r3, #1
 8009f24:	e034      	b.n	8009f90 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009f26:	68bb      	ldr	r3, [r7, #8]
 8009f28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f2c:	d028      	beq.n	8009f80 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009f2e:	f7fd fecb 	bl	8007cc8 <HAL_GetTick>
 8009f32:	4602      	mov	r2, r0
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	1ad3      	subs	r3, r2, r3
 8009f38:	68ba      	ldr	r2, [r7, #8]
 8009f3a:	429a      	cmp	r2, r3
 8009f3c:	d302      	bcc.n	8009f44 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8009f3e:	68bb      	ldr	r3, [r7, #8]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d11d      	bne.n	8009f80 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	695b      	ldr	r3, [r3, #20]
 8009f4a:	f003 0304 	and.w	r3, r3, #4
 8009f4e:	2b04      	cmp	r3, #4
 8009f50:	d016      	beq.n	8009f80 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	2200      	movs	r2, #0
 8009f56:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	2220      	movs	r2, #32
 8009f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	2200      	movs	r2, #0
 8009f64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f6c:	f043 0220 	orr.w	r2, r3, #32
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	2200      	movs	r2, #0
 8009f78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8009f7c:	2301      	movs	r3, #1
 8009f7e:	e007      	b.n	8009f90 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	695b      	ldr	r3, [r3, #20]
 8009f86:	f003 0304 	and.w	r3, r3, #4
 8009f8a:	2b04      	cmp	r3, #4
 8009f8c:	d1c3      	bne.n	8009f16 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009f8e:	2300      	movs	r3, #0
}
 8009f90:	4618      	mov	r0, r3
 8009f92:	3710      	adds	r7, #16
 8009f94:	46bd      	mov	sp, r7
 8009f96:	bd80      	pop	{r7, pc}

08009f98 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009f98:	b580      	push	{r7, lr}
 8009f9a:	b084      	sub	sp, #16
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	60f8      	str	r0, [r7, #12]
 8009fa0:	60b9      	str	r1, [r7, #8]
 8009fa2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009fa4:	e049      	b.n	800a03a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	695b      	ldr	r3, [r3, #20]
 8009fac:	f003 0310 	and.w	r3, r3, #16
 8009fb0:	2b10      	cmp	r3, #16
 8009fb2:	d119      	bne.n	8009fe8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	f06f 0210 	mvn.w	r2, #16
 8009fbc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	2200      	movs	r2, #0
 8009fc2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	2220      	movs	r2, #32
 8009fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	2200      	movs	r2, #0
 8009fd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	2200      	movs	r2, #0
 8009fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009fe4:	2301      	movs	r3, #1
 8009fe6:	e030      	b.n	800a04a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009fe8:	f7fd fe6e 	bl	8007cc8 <HAL_GetTick>
 8009fec:	4602      	mov	r2, r0
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	1ad3      	subs	r3, r2, r3
 8009ff2:	68ba      	ldr	r2, [r7, #8]
 8009ff4:	429a      	cmp	r2, r3
 8009ff6:	d302      	bcc.n	8009ffe <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8009ff8:	68bb      	ldr	r3, [r7, #8]
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d11d      	bne.n	800a03a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	695b      	ldr	r3, [r3, #20]
 800a004:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a008:	2b40      	cmp	r3, #64	; 0x40
 800a00a:	d016      	beq.n	800a03a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	2200      	movs	r2, #0
 800a010:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	2220      	movs	r2, #32
 800a016:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	2200      	movs	r2, #0
 800a01e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a026:	f043 0220 	orr.w	r2, r3, #32
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	2200      	movs	r2, #0
 800a032:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a036:	2301      	movs	r3, #1
 800a038:	e007      	b.n	800a04a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	695b      	ldr	r3, [r3, #20]
 800a040:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a044:	2b40      	cmp	r3, #64	; 0x40
 800a046:	d1ae      	bne.n	8009fa6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a048:	2300      	movs	r3, #0
}
 800a04a:	4618      	mov	r0, r3
 800a04c:	3710      	adds	r7, #16
 800a04e:	46bd      	mov	sp, r7
 800a050:	bd80      	pop	{r7, pc}

0800a052 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800a052:	b480      	push	{r7}
 800a054:	b083      	sub	sp, #12
 800a056:	af00      	add	r7, sp, #0
 800a058:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	695b      	ldr	r3, [r3, #20]
 800a060:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a064:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a068:	d11b      	bne.n	800a0a2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a072:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	2200      	movs	r2, #0
 800a078:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	2220      	movs	r2, #32
 800a07e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	2200      	movs	r2, #0
 800a086:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a08e:	f043 0204 	orr.w	r2, r3, #4
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	2200      	movs	r2, #0
 800a09a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800a09e:	2301      	movs	r3, #1
 800a0a0:	e000      	b.n	800a0a4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800a0a2:	2300      	movs	r3, #0
}
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	370c      	adds	r7, #12
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	bc80      	pop	{r7}
 800a0ac:	4770      	bx	lr
	...

0800a0b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a0b0:	b580      	push	{r7, lr}
 800a0b2:	b086      	sub	sp, #24
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d101      	bne.n	800a0c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a0be:	2301      	movs	r3, #1
 800a0c0:	e272      	b.n	800a5a8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	f003 0301 	and.w	r3, r3, #1
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	f000 8087 	beq.w	800a1de <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a0d0:	4b92      	ldr	r3, [pc, #584]	; (800a31c <HAL_RCC_OscConfig+0x26c>)
 800a0d2:	685b      	ldr	r3, [r3, #4]
 800a0d4:	f003 030c 	and.w	r3, r3, #12
 800a0d8:	2b04      	cmp	r3, #4
 800a0da:	d00c      	beq.n	800a0f6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800a0dc:	4b8f      	ldr	r3, [pc, #572]	; (800a31c <HAL_RCC_OscConfig+0x26c>)
 800a0de:	685b      	ldr	r3, [r3, #4]
 800a0e0:	f003 030c 	and.w	r3, r3, #12
 800a0e4:	2b08      	cmp	r3, #8
 800a0e6:	d112      	bne.n	800a10e <HAL_RCC_OscConfig+0x5e>
 800a0e8:	4b8c      	ldr	r3, [pc, #560]	; (800a31c <HAL_RCC_OscConfig+0x26c>)
 800a0ea:	685b      	ldr	r3, [r3, #4]
 800a0ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a0f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a0f4:	d10b      	bne.n	800a10e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a0f6:	4b89      	ldr	r3, [pc, #548]	; (800a31c <HAL_RCC_OscConfig+0x26c>)
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d06c      	beq.n	800a1dc <HAL_RCC_OscConfig+0x12c>
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	685b      	ldr	r3, [r3, #4]
 800a106:	2b00      	cmp	r3, #0
 800a108:	d168      	bne.n	800a1dc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800a10a:	2301      	movs	r3, #1
 800a10c:	e24c      	b.n	800a5a8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	685b      	ldr	r3, [r3, #4]
 800a112:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a116:	d106      	bne.n	800a126 <HAL_RCC_OscConfig+0x76>
 800a118:	4b80      	ldr	r3, [pc, #512]	; (800a31c <HAL_RCC_OscConfig+0x26c>)
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	4a7f      	ldr	r2, [pc, #508]	; (800a31c <HAL_RCC_OscConfig+0x26c>)
 800a11e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a122:	6013      	str	r3, [r2, #0]
 800a124:	e02e      	b.n	800a184 <HAL_RCC_OscConfig+0xd4>
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	685b      	ldr	r3, [r3, #4]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d10c      	bne.n	800a148 <HAL_RCC_OscConfig+0x98>
 800a12e:	4b7b      	ldr	r3, [pc, #492]	; (800a31c <HAL_RCC_OscConfig+0x26c>)
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	4a7a      	ldr	r2, [pc, #488]	; (800a31c <HAL_RCC_OscConfig+0x26c>)
 800a134:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a138:	6013      	str	r3, [r2, #0]
 800a13a:	4b78      	ldr	r3, [pc, #480]	; (800a31c <HAL_RCC_OscConfig+0x26c>)
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	4a77      	ldr	r2, [pc, #476]	; (800a31c <HAL_RCC_OscConfig+0x26c>)
 800a140:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a144:	6013      	str	r3, [r2, #0]
 800a146:	e01d      	b.n	800a184 <HAL_RCC_OscConfig+0xd4>
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	685b      	ldr	r3, [r3, #4]
 800a14c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a150:	d10c      	bne.n	800a16c <HAL_RCC_OscConfig+0xbc>
 800a152:	4b72      	ldr	r3, [pc, #456]	; (800a31c <HAL_RCC_OscConfig+0x26c>)
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	4a71      	ldr	r2, [pc, #452]	; (800a31c <HAL_RCC_OscConfig+0x26c>)
 800a158:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a15c:	6013      	str	r3, [r2, #0]
 800a15e:	4b6f      	ldr	r3, [pc, #444]	; (800a31c <HAL_RCC_OscConfig+0x26c>)
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	4a6e      	ldr	r2, [pc, #440]	; (800a31c <HAL_RCC_OscConfig+0x26c>)
 800a164:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a168:	6013      	str	r3, [r2, #0]
 800a16a:	e00b      	b.n	800a184 <HAL_RCC_OscConfig+0xd4>
 800a16c:	4b6b      	ldr	r3, [pc, #428]	; (800a31c <HAL_RCC_OscConfig+0x26c>)
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	4a6a      	ldr	r2, [pc, #424]	; (800a31c <HAL_RCC_OscConfig+0x26c>)
 800a172:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a176:	6013      	str	r3, [r2, #0]
 800a178:	4b68      	ldr	r3, [pc, #416]	; (800a31c <HAL_RCC_OscConfig+0x26c>)
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	4a67      	ldr	r2, [pc, #412]	; (800a31c <HAL_RCC_OscConfig+0x26c>)
 800a17e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a182:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	685b      	ldr	r3, [r3, #4]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d013      	beq.n	800a1b4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a18c:	f7fd fd9c 	bl	8007cc8 <HAL_GetTick>
 800a190:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a192:	e008      	b.n	800a1a6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a194:	f7fd fd98 	bl	8007cc8 <HAL_GetTick>
 800a198:	4602      	mov	r2, r0
 800a19a:	693b      	ldr	r3, [r7, #16]
 800a19c:	1ad3      	subs	r3, r2, r3
 800a19e:	2b64      	cmp	r3, #100	; 0x64
 800a1a0:	d901      	bls.n	800a1a6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800a1a2:	2303      	movs	r3, #3
 800a1a4:	e200      	b.n	800a5a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a1a6:	4b5d      	ldr	r3, [pc, #372]	; (800a31c <HAL_RCC_OscConfig+0x26c>)
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d0f0      	beq.n	800a194 <HAL_RCC_OscConfig+0xe4>
 800a1b2:	e014      	b.n	800a1de <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a1b4:	f7fd fd88 	bl	8007cc8 <HAL_GetTick>
 800a1b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a1ba:	e008      	b.n	800a1ce <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a1bc:	f7fd fd84 	bl	8007cc8 <HAL_GetTick>
 800a1c0:	4602      	mov	r2, r0
 800a1c2:	693b      	ldr	r3, [r7, #16]
 800a1c4:	1ad3      	subs	r3, r2, r3
 800a1c6:	2b64      	cmp	r3, #100	; 0x64
 800a1c8:	d901      	bls.n	800a1ce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800a1ca:	2303      	movs	r3, #3
 800a1cc:	e1ec      	b.n	800a5a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a1ce:	4b53      	ldr	r3, [pc, #332]	; (800a31c <HAL_RCC_OscConfig+0x26c>)
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d1f0      	bne.n	800a1bc <HAL_RCC_OscConfig+0x10c>
 800a1da:	e000      	b.n	800a1de <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a1dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	f003 0302 	and.w	r3, r3, #2
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d063      	beq.n	800a2b2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a1ea:	4b4c      	ldr	r3, [pc, #304]	; (800a31c <HAL_RCC_OscConfig+0x26c>)
 800a1ec:	685b      	ldr	r3, [r3, #4]
 800a1ee:	f003 030c 	and.w	r3, r3, #12
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d00b      	beq.n	800a20e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800a1f6:	4b49      	ldr	r3, [pc, #292]	; (800a31c <HAL_RCC_OscConfig+0x26c>)
 800a1f8:	685b      	ldr	r3, [r3, #4]
 800a1fa:	f003 030c 	and.w	r3, r3, #12
 800a1fe:	2b08      	cmp	r3, #8
 800a200:	d11c      	bne.n	800a23c <HAL_RCC_OscConfig+0x18c>
 800a202:	4b46      	ldr	r3, [pc, #280]	; (800a31c <HAL_RCC_OscConfig+0x26c>)
 800a204:	685b      	ldr	r3, [r3, #4]
 800a206:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d116      	bne.n	800a23c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a20e:	4b43      	ldr	r3, [pc, #268]	; (800a31c <HAL_RCC_OscConfig+0x26c>)
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	f003 0302 	and.w	r3, r3, #2
 800a216:	2b00      	cmp	r3, #0
 800a218:	d005      	beq.n	800a226 <HAL_RCC_OscConfig+0x176>
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	691b      	ldr	r3, [r3, #16]
 800a21e:	2b01      	cmp	r3, #1
 800a220:	d001      	beq.n	800a226 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800a222:	2301      	movs	r3, #1
 800a224:	e1c0      	b.n	800a5a8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a226:	4b3d      	ldr	r3, [pc, #244]	; (800a31c <HAL_RCC_OscConfig+0x26c>)
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	695b      	ldr	r3, [r3, #20]
 800a232:	00db      	lsls	r3, r3, #3
 800a234:	4939      	ldr	r1, [pc, #228]	; (800a31c <HAL_RCC_OscConfig+0x26c>)
 800a236:	4313      	orrs	r3, r2
 800a238:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a23a:	e03a      	b.n	800a2b2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	691b      	ldr	r3, [r3, #16]
 800a240:	2b00      	cmp	r3, #0
 800a242:	d020      	beq.n	800a286 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a244:	4b36      	ldr	r3, [pc, #216]	; (800a320 <HAL_RCC_OscConfig+0x270>)
 800a246:	2201      	movs	r2, #1
 800a248:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a24a:	f7fd fd3d 	bl	8007cc8 <HAL_GetTick>
 800a24e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a250:	e008      	b.n	800a264 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a252:	f7fd fd39 	bl	8007cc8 <HAL_GetTick>
 800a256:	4602      	mov	r2, r0
 800a258:	693b      	ldr	r3, [r7, #16]
 800a25a:	1ad3      	subs	r3, r2, r3
 800a25c:	2b02      	cmp	r3, #2
 800a25e:	d901      	bls.n	800a264 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800a260:	2303      	movs	r3, #3
 800a262:	e1a1      	b.n	800a5a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a264:	4b2d      	ldr	r3, [pc, #180]	; (800a31c <HAL_RCC_OscConfig+0x26c>)
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	f003 0302 	and.w	r3, r3, #2
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d0f0      	beq.n	800a252 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a270:	4b2a      	ldr	r3, [pc, #168]	; (800a31c <HAL_RCC_OscConfig+0x26c>)
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	695b      	ldr	r3, [r3, #20]
 800a27c:	00db      	lsls	r3, r3, #3
 800a27e:	4927      	ldr	r1, [pc, #156]	; (800a31c <HAL_RCC_OscConfig+0x26c>)
 800a280:	4313      	orrs	r3, r2
 800a282:	600b      	str	r3, [r1, #0]
 800a284:	e015      	b.n	800a2b2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a286:	4b26      	ldr	r3, [pc, #152]	; (800a320 <HAL_RCC_OscConfig+0x270>)
 800a288:	2200      	movs	r2, #0
 800a28a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a28c:	f7fd fd1c 	bl	8007cc8 <HAL_GetTick>
 800a290:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a292:	e008      	b.n	800a2a6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a294:	f7fd fd18 	bl	8007cc8 <HAL_GetTick>
 800a298:	4602      	mov	r2, r0
 800a29a:	693b      	ldr	r3, [r7, #16]
 800a29c:	1ad3      	subs	r3, r2, r3
 800a29e:	2b02      	cmp	r3, #2
 800a2a0:	d901      	bls.n	800a2a6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800a2a2:	2303      	movs	r3, #3
 800a2a4:	e180      	b.n	800a5a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a2a6:	4b1d      	ldr	r3, [pc, #116]	; (800a31c <HAL_RCC_OscConfig+0x26c>)
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	f003 0302 	and.w	r3, r3, #2
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d1f0      	bne.n	800a294 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	f003 0308 	and.w	r3, r3, #8
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d03a      	beq.n	800a334 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	699b      	ldr	r3, [r3, #24]
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d019      	beq.n	800a2fa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a2c6:	4b17      	ldr	r3, [pc, #92]	; (800a324 <HAL_RCC_OscConfig+0x274>)
 800a2c8:	2201      	movs	r2, #1
 800a2ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a2cc:	f7fd fcfc 	bl	8007cc8 <HAL_GetTick>
 800a2d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a2d2:	e008      	b.n	800a2e6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a2d4:	f7fd fcf8 	bl	8007cc8 <HAL_GetTick>
 800a2d8:	4602      	mov	r2, r0
 800a2da:	693b      	ldr	r3, [r7, #16]
 800a2dc:	1ad3      	subs	r3, r2, r3
 800a2de:	2b02      	cmp	r3, #2
 800a2e0:	d901      	bls.n	800a2e6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800a2e2:	2303      	movs	r3, #3
 800a2e4:	e160      	b.n	800a5a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a2e6:	4b0d      	ldr	r3, [pc, #52]	; (800a31c <HAL_RCC_OscConfig+0x26c>)
 800a2e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2ea:	f003 0302 	and.w	r3, r3, #2
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d0f0      	beq.n	800a2d4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800a2f2:	2001      	movs	r0, #1
 800a2f4:	f000 face 	bl	800a894 <RCC_Delay>
 800a2f8:	e01c      	b.n	800a334 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a2fa:	4b0a      	ldr	r3, [pc, #40]	; (800a324 <HAL_RCC_OscConfig+0x274>)
 800a2fc:	2200      	movs	r2, #0
 800a2fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a300:	f7fd fce2 	bl	8007cc8 <HAL_GetTick>
 800a304:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a306:	e00f      	b.n	800a328 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a308:	f7fd fcde 	bl	8007cc8 <HAL_GetTick>
 800a30c:	4602      	mov	r2, r0
 800a30e:	693b      	ldr	r3, [r7, #16]
 800a310:	1ad3      	subs	r3, r2, r3
 800a312:	2b02      	cmp	r3, #2
 800a314:	d908      	bls.n	800a328 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800a316:	2303      	movs	r3, #3
 800a318:	e146      	b.n	800a5a8 <HAL_RCC_OscConfig+0x4f8>
 800a31a:	bf00      	nop
 800a31c:	40021000 	.word	0x40021000
 800a320:	42420000 	.word	0x42420000
 800a324:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a328:	4b92      	ldr	r3, [pc, #584]	; (800a574 <HAL_RCC_OscConfig+0x4c4>)
 800a32a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a32c:	f003 0302 	and.w	r3, r3, #2
 800a330:	2b00      	cmp	r3, #0
 800a332:	d1e9      	bne.n	800a308 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	f003 0304 	and.w	r3, r3, #4
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	f000 80a6 	beq.w	800a48e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a342:	2300      	movs	r3, #0
 800a344:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a346:	4b8b      	ldr	r3, [pc, #556]	; (800a574 <HAL_RCC_OscConfig+0x4c4>)
 800a348:	69db      	ldr	r3, [r3, #28]
 800a34a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d10d      	bne.n	800a36e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a352:	4b88      	ldr	r3, [pc, #544]	; (800a574 <HAL_RCC_OscConfig+0x4c4>)
 800a354:	69db      	ldr	r3, [r3, #28]
 800a356:	4a87      	ldr	r2, [pc, #540]	; (800a574 <HAL_RCC_OscConfig+0x4c4>)
 800a358:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a35c:	61d3      	str	r3, [r2, #28]
 800a35e:	4b85      	ldr	r3, [pc, #532]	; (800a574 <HAL_RCC_OscConfig+0x4c4>)
 800a360:	69db      	ldr	r3, [r3, #28]
 800a362:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a366:	60bb      	str	r3, [r7, #8]
 800a368:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a36a:	2301      	movs	r3, #1
 800a36c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a36e:	4b82      	ldr	r3, [pc, #520]	; (800a578 <HAL_RCC_OscConfig+0x4c8>)
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a376:	2b00      	cmp	r3, #0
 800a378:	d118      	bne.n	800a3ac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a37a:	4b7f      	ldr	r3, [pc, #508]	; (800a578 <HAL_RCC_OscConfig+0x4c8>)
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	4a7e      	ldr	r2, [pc, #504]	; (800a578 <HAL_RCC_OscConfig+0x4c8>)
 800a380:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a384:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a386:	f7fd fc9f 	bl	8007cc8 <HAL_GetTick>
 800a38a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a38c:	e008      	b.n	800a3a0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a38e:	f7fd fc9b 	bl	8007cc8 <HAL_GetTick>
 800a392:	4602      	mov	r2, r0
 800a394:	693b      	ldr	r3, [r7, #16]
 800a396:	1ad3      	subs	r3, r2, r3
 800a398:	2b64      	cmp	r3, #100	; 0x64
 800a39a:	d901      	bls.n	800a3a0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800a39c:	2303      	movs	r3, #3
 800a39e:	e103      	b.n	800a5a8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a3a0:	4b75      	ldr	r3, [pc, #468]	; (800a578 <HAL_RCC_OscConfig+0x4c8>)
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d0f0      	beq.n	800a38e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	68db      	ldr	r3, [r3, #12]
 800a3b0:	2b01      	cmp	r3, #1
 800a3b2:	d106      	bne.n	800a3c2 <HAL_RCC_OscConfig+0x312>
 800a3b4:	4b6f      	ldr	r3, [pc, #444]	; (800a574 <HAL_RCC_OscConfig+0x4c4>)
 800a3b6:	6a1b      	ldr	r3, [r3, #32]
 800a3b8:	4a6e      	ldr	r2, [pc, #440]	; (800a574 <HAL_RCC_OscConfig+0x4c4>)
 800a3ba:	f043 0301 	orr.w	r3, r3, #1
 800a3be:	6213      	str	r3, [r2, #32]
 800a3c0:	e02d      	b.n	800a41e <HAL_RCC_OscConfig+0x36e>
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	68db      	ldr	r3, [r3, #12]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d10c      	bne.n	800a3e4 <HAL_RCC_OscConfig+0x334>
 800a3ca:	4b6a      	ldr	r3, [pc, #424]	; (800a574 <HAL_RCC_OscConfig+0x4c4>)
 800a3cc:	6a1b      	ldr	r3, [r3, #32]
 800a3ce:	4a69      	ldr	r2, [pc, #420]	; (800a574 <HAL_RCC_OscConfig+0x4c4>)
 800a3d0:	f023 0301 	bic.w	r3, r3, #1
 800a3d4:	6213      	str	r3, [r2, #32]
 800a3d6:	4b67      	ldr	r3, [pc, #412]	; (800a574 <HAL_RCC_OscConfig+0x4c4>)
 800a3d8:	6a1b      	ldr	r3, [r3, #32]
 800a3da:	4a66      	ldr	r2, [pc, #408]	; (800a574 <HAL_RCC_OscConfig+0x4c4>)
 800a3dc:	f023 0304 	bic.w	r3, r3, #4
 800a3e0:	6213      	str	r3, [r2, #32]
 800a3e2:	e01c      	b.n	800a41e <HAL_RCC_OscConfig+0x36e>
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	68db      	ldr	r3, [r3, #12]
 800a3e8:	2b05      	cmp	r3, #5
 800a3ea:	d10c      	bne.n	800a406 <HAL_RCC_OscConfig+0x356>
 800a3ec:	4b61      	ldr	r3, [pc, #388]	; (800a574 <HAL_RCC_OscConfig+0x4c4>)
 800a3ee:	6a1b      	ldr	r3, [r3, #32]
 800a3f0:	4a60      	ldr	r2, [pc, #384]	; (800a574 <HAL_RCC_OscConfig+0x4c4>)
 800a3f2:	f043 0304 	orr.w	r3, r3, #4
 800a3f6:	6213      	str	r3, [r2, #32]
 800a3f8:	4b5e      	ldr	r3, [pc, #376]	; (800a574 <HAL_RCC_OscConfig+0x4c4>)
 800a3fa:	6a1b      	ldr	r3, [r3, #32]
 800a3fc:	4a5d      	ldr	r2, [pc, #372]	; (800a574 <HAL_RCC_OscConfig+0x4c4>)
 800a3fe:	f043 0301 	orr.w	r3, r3, #1
 800a402:	6213      	str	r3, [r2, #32]
 800a404:	e00b      	b.n	800a41e <HAL_RCC_OscConfig+0x36e>
 800a406:	4b5b      	ldr	r3, [pc, #364]	; (800a574 <HAL_RCC_OscConfig+0x4c4>)
 800a408:	6a1b      	ldr	r3, [r3, #32]
 800a40a:	4a5a      	ldr	r2, [pc, #360]	; (800a574 <HAL_RCC_OscConfig+0x4c4>)
 800a40c:	f023 0301 	bic.w	r3, r3, #1
 800a410:	6213      	str	r3, [r2, #32]
 800a412:	4b58      	ldr	r3, [pc, #352]	; (800a574 <HAL_RCC_OscConfig+0x4c4>)
 800a414:	6a1b      	ldr	r3, [r3, #32]
 800a416:	4a57      	ldr	r2, [pc, #348]	; (800a574 <HAL_RCC_OscConfig+0x4c4>)
 800a418:	f023 0304 	bic.w	r3, r3, #4
 800a41c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	68db      	ldr	r3, [r3, #12]
 800a422:	2b00      	cmp	r3, #0
 800a424:	d015      	beq.n	800a452 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a426:	f7fd fc4f 	bl	8007cc8 <HAL_GetTick>
 800a42a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a42c:	e00a      	b.n	800a444 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a42e:	f7fd fc4b 	bl	8007cc8 <HAL_GetTick>
 800a432:	4602      	mov	r2, r0
 800a434:	693b      	ldr	r3, [r7, #16]
 800a436:	1ad3      	subs	r3, r2, r3
 800a438:	f241 3288 	movw	r2, #5000	; 0x1388
 800a43c:	4293      	cmp	r3, r2
 800a43e:	d901      	bls.n	800a444 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800a440:	2303      	movs	r3, #3
 800a442:	e0b1      	b.n	800a5a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a444:	4b4b      	ldr	r3, [pc, #300]	; (800a574 <HAL_RCC_OscConfig+0x4c4>)
 800a446:	6a1b      	ldr	r3, [r3, #32]
 800a448:	f003 0302 	and.w	r3, r3, #2
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d0ee      	beq.n	800a42e <HAL_RCC_OscConfig+0x37e>
 800a450:	e014      	b.n	800a47c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a452:	f7fd fc39 	bl	8007cc8 <HAL_GetTick>
 800a456:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a458:	e00a      	b.n	800a470 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a45a:	f7fd fc35 	bl	8007cc8 <HAL_GetTick>
 800a45e:	4602      	mov	r2, r0
 800a460:	693b      	ldr	r3, [r7, #16]
 800a462:	1ad3      	subs	r3, r2, r3
 800a464:	f241 3288 	movw	r2, #5000	; 0x1388
 800a468:	4293      	cmp	r3, r2
 800a46a:	d901      	bls.n	800a470 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800a46c:	2303      	movs	r3, #3
 800a46e:	e09b      	b.n	800a5a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a470:	4b40      	ldr	r3, [pc, #256]	; (800a574 <HAL_RCC_OscConfig+0x4c4>)
 800a472:	6a1b      	ldr	r3, [r3, #32]
 800a474:	f003 0302 	and.w	r3, r3, #2
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d1ee      	bne.n	800a45a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800a47c:	7dfb      	ldrb	r3, [r7, #23]
 800a47e:	2b01      	cmp	r3, #1
 800a480:	d105      	bne.n	800a48e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a482:	4b3c      	ldr	r3, [pc, #240]	; (800a574 <HAL_RCC_OscConfig+0x4c4>)
 800a484:	69db      	ldr	r3, [r3, #28]
 800a486:	4a3b      	ldr	r2, [pc, #236]	; (800a574 <HAL_RCC_OscConfig+0x4c4>)
 800a488:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a48c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	69db      	ldr	r3, [r3, #28]
 800a492:	2b00      	cmp	r3, #0
 800a494:	f000 8087 	beq.w	800a5a6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a498:	4b36      	ldr	r3, [pc, #216]	; (800a574 <HAL_RCC_OscConfig+0x4c4>)
 800a49a:	685b      	ldr	r3, [r3, #4]
 800a49c:	f003 030c 	and.w	r3, r3, #12
 800a4a0:	2b08      	cmp	r3, #8
 800a4a2:	d061      	beq.n	800a568 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	69db      	ldr	r3, [r3, #28]
 800a4a8:	2b02      	cmp	r3, #2
 800a4aa:	d146      	bne.n	800a53a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a4ac:	4b33      	ldr	r3, [pc, #204]	; (800a57c <HAL_RCC_OscConfig+0x4cc>)
 800a4ae:	2200      	movs	r2, #0
 800a4b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a4b2:	f7fd fc09 	bl	8007cc8 <HAL_GetTick>
 800a4b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a4b8:	e008      	b.n	800a4cc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a4ba:	f7fd fc05 	bl	8007cc8 <HAL_GetTick>
 800a4be:	4602      	mov	r2, r0
 800a4c0:	693b      	ldr	r3, [r7, #16]
 800a4c2:	1ad3      	subs	r3, r2, r3
 800a4c4:	2b02      	cmp	r3, #2
 800a4c6:	d901      	bls.n	800a4cc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800a4c8:	2303      	movs	r3, #3
 800a4ca:	e06d      	b.n	800a5a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a4cc:	4b29      	ldr	r3, [pc, #164]	; (800a574 <HAL_RCC_OscConfig+0x4c4>)
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d1f0      	bne.n	800a4ba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	6a1b      	ldr	r3, [r3, #32]
 800a4dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a4e0:	d108      	bne.n	800a4f4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800a4e2:	4b24      	ldr	r3, [pc, #144]	; (800a574 <HAL_RCC_OscConfig+0x4c4>)
 800a4e4:	685b      	ldr	r3, [r3, #4]
 800a4e6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	689b      	ldr	r3, [r3, #8]
 800a4ee:	4921      	ldr	r1, [pc, #132]	; (800a574 <HAL_RCC_OscConfig+0x4c4>)
 800a4f0:	4313      	orrs	r3, r2
 800a4f2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a4f4:	4b1f      	ldr	r3, [pc, #124]	; (800a574 <HAL_RCC_OscConfig+0x4c4>)
 800a4f6:	685b      	ldr	r3, [r3, #4]
 800a4f8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	6a19      	ldr	r1, [r3, #32]
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a504:	430b      	orrs	r3, r1
 800a506:	491b      	ldr	r1, [pc, #108]	; (800a574 <HAL_RCC_OscConfig+0x4c4>)
 800a508:	4313      	orrs	r3, r2
 800a50a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a50c:	4b1b      	ldr	r3, [pc, #108]	; (800a57c <HAL_RCC_OscConfig+0x4cc>)
 800a50e:	2201      	movs	r2, #1
 800a510:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a512:	f7fd fbd9 	bl	8007cc8 <HAL_GetTick>
 800a516:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800a518:	e008      	b.n	800a52c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a51a:	f7fd fbd5 	bl	8007cc8 <HAL_GetTick>
 800a51e:	4602      	mov	r2, r0
 800a520:	693b      	ldr	r3, [r7, #16]
 800a522:	1ad3      	subs	r3, r2, r3
 800a524:	2b02      	cmp	r3, #2
 800a526:	d901      	bls.n	800a52c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800a528:	2303      	movs	r3, #3
 800a52a:	e03d      	b.n	800a5a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800a52c:	4b11      	ldr	r3, [pc, #68]	; (800a574 <HAL_RCC_OscConfig+0x4c4>)
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a534:	2b00      	cmp	r3, #0
 800a536:	d0f0      	beq.n	800a51a <HAL_RCC_OscConfig+0x46a>
 800a538:	e035      	b.n	800a5a6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a53a:	4b10      	ldr	r3, [pc, #64]	; (800a57c <HAL_RCC_OscConfig+0x4cc>)
 800a53c:	2200      	movs	r2, #0
 800a53e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a540:	f7fd fbc2 	bl	8007cc8 <HAL_GetTick>
 800a544:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a546:	e008      	b.n	800a55a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a548:	f7fd fbbe 	bl	8007cc8 <HAL_GetTick>
 800a54c:	4602      	mov	r2, r0
 800a54e:	693b      	ldr	r3, [r7, #16]
 800a550:	1ad3      	subs	r3, r2, r3
 800a552:	2b02      	cmp	r3, #2
 800a554:	d901      	bls.n	800a55a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800a556:	2303      	movs	r3, #3
 800a558:	e026      	b.n	800a5a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a55a:	4b06      	ldr	r3, [pc, #24]	; (800a574 <HAL_RCC_OscConfig+0x4c4>)
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a562:	2b00      	cmp	r3, #0
 800a564:	d1f0      	bne.n	800a548 <HAL_RCC_OscConfig+0x498>
 800a566:	e01e      	b.n	800a5a6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	69db      	ldr	r3, [r3, #28]
 800a56c:	2b01      	cmp	r3, #1
 800a56e:	d107      	bne.n	800a580 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800a570:	2301      	movs	r3, #1
 800a572:	e019      	b.n	800a5a8 <HAL_RCC_OscConfig+0x4f8>
 800a574:	40021000 	.word	0x40021000
 800a578:	40007000 	.word	0x40007000
 800a57c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800a580:	4b0b      	ldr	r3, [pc, #44]	; (800a5b0 <HAL_RCC_OscConfig+0x500>)
 800a582:	685b      	ldr	r3, [r3, #4]
 800a584:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	6a1b      	ldr	r3, [r3, #32]
 800a590:	429a      	cmp	r2, r3
 800a592:	d106      	bne.n	800a5a2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a59e:	429a      	cmp	r2, r3
 800a5a0:	d001      	beq.n	800a5a6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800a5a2:	2301      	movs	r3, #1
 800a5a4:	e000      	b.n	800a5a8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800a5a6:	2300      	movs	r3, #0
}
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	3718      	adds	r7, #24
 800a5ac:	46bd      	mov	sp, r7
 800a5ae:	bd80      	pop	{r7, pc}
 800a5b0:	40021000 	.word	0x40021000

0800a5b4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a5b4:	b580      	push	{r7, lr}
 800a5b6:	b084      	sub	sp, #16
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	6078      	str	r0, [r7, #4]
 800a5bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d101      	bne.n	800a5c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a5c4:	2301      	movs	r3, #1
 800a5c6:	e0d0      	b.n	800a76a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a5c8:	4b6a      	ldr	r3, [pc, #424]	; (800a774 <HAL_RCC_ClockConfig+0x1c0>)
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	f003 0307 	and.w	r3, r3, #7
 800a5d0:	683a      	ldr	r2, [r7, #0]
 800a5d2:	429a      	cmp	r2, r3
 800a5d4:	d910      	bls.n	800a5f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a5d6:	4b67      	ldr	r3, [pc, #412]	; (800a774 <HAL_RCC_ClockConfig+0x1c0>)
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	f023 0207 	bic.w	r2, r3, #7
 800a5de:	4965      	ldr	r1, [pc, #404]	; (800a774 <HAL_RCC_ClockConfig+0x1c0>)
 800a5e0:	683b      	ldr	r3, [r7, #0]
 800a5e2:	4313      	orrs	r3, r2
 800a5e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a5e6:	4b63      	ldr	r3, [pc, #396]	; (800a774 <HAL_RCC_ClockConfig+0x1c0>)
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	f003 0307 	and.w	r3, r3, #7
 800a5ee:	683a      	ldr	r2, [r7, #0]
 800a5f0:	429a      	cmp	r2, r3
 800a5f2:	d001      	beq.n	800a5f8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800a5f4:	2301      	movs	r3, #1
 800a5f6:	e0b8      	b.n	800a76a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	f003 0302 	and.w	r3, r3, #2
 800a600:	2b00      	cmp	r3, #0
 800a602:	d020      	beq.n	800a646 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	f003 0304 	and.w	r3, r3, #4
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d005      	beq.n	800a61c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a610:	4b59      	ldr	r3, [pc, #356]	; (800a778 <HAL_RCC_ClockConfig+0x1c4>)
 800a612:	685b      	ldr	r3, [r3, #4]
 800a614:	4a58      	ldr	r2, [pc, #352]	; (800a778 <HAL_RCC_ClockConfig+0x1c4>)
 800a616:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800a61a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	f003 0308 	and.w	r3, r3, #8
 800a624:	2b00      	cmp	r3, #0
 800a626:	d005      	beq.n	800a634 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a628:	4b53      	ldr	r3, [pc, #332]	; (800a778 <HAL_RCC_ClockConfig+0x1c4>)
 800a62a:	685b      	ldr	r3, [r3, #4]
 800a62c:	4a52      	ldr	r2, [pc, #328]	; (800a778 <HAL_RCC_ClockConfig+0x1c4>)
 800a62e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800a632:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a634:	4b50      	ldr	r3, [pc, #320]	; (800a778 <HAL_RCC_ClockConfig+0x1c4>)
 800a636:	685b      	ldr	r3, [r3, #4]
 800a638:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	689b      	ldr	r3, [r3, #8]
 800a640:	494d      	ldr	r1, [pc, #308]	; (800a778 <HAL_RCC_ClockConfig+0x1c4>)
 800a642:	4313      	orrs	r3, r2
 800a644:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	f003 0301 	and.w	r3, r3, #1
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d040      	beq.n	800a6d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	685b      	ldr	r3, [r3, #4]
 800a656:	2b01      	cmp	r3, #1
 800a658:	d107      	bne.n	800a66a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a65a:	4b47      	ldr	r3, [pc, #284]	; (800a778 <HAL_RCC_ClockConfig+0x1c4>)
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a662:	2b00      	cmp	r3, #0
 800a664:	d115      	bne.n	800a692 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a666:	2301      	movs	r3, #1
 800a668:	e07f      	b.n	800a76a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	685b      	ldr	r3, [r3, #4]
 800a66e:	2b02      	cmp	r3, #2
 800a670:	d107      	bne.n	800a682 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a672:	4b41      	ldr	r3, [pc, #260]	; (800a778 <HAL_RCC_ClockConfig+0x1c4>)
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d109      	bne.n	800a692 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a67e:	2301      	movs	r3, #1
 800a680:	e073      	b.n	800a76a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a682:	4b3d      	ldr	r3, [pc, #244]	; (800a778 <HAL_RCC_ClockConfig+0x1c4>)
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	f003 0302 	and.w	r3, r3, #2
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d101      	bne.n	800a692 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a68e:	2301      	movs	r3, #1
 800a690:	e06b      	b.n	800a76a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a692:	4b39      	ldr	r3, [pc, #228]	; (800a778 <HAL_RCC_ClockConfig+0x1c4>)
 800a694:	685b      	ldr	r3, [r3, #4]
 800a696:	f023 0203 	bic.w	r2, r3, #3
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	685b      	ldr	r3, [r3, #4]
 800a69e:	4936      	ldr	r1, [pc, #216]	; (800a778 <HAL_RCC_ClockConfig+0x1c4>)
 800a6a0:	4313      	orrs	r3, r2
 800a6a2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a6a4:	f7fd fb10 	bl	8007cc8 <HAL_GetTick>
 800a6a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a6aa:	e00a      	b.n	800a6c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a6ac:	f7fd fb0c 	bl	8007cc8 <HAL_GetTick>
 800a6b0:	4602      	mov	r2, r0
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	1ad3      	subs	r3, r2, r3
 800a6b6:	f241 3288 	movw	r2, #5000	; 0x1388
 800a6ba:	4293      	cmp	r3, r2
 800a6bc:	d901      	bls.n	800a6c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a6be:	2303      	movs	r3, #3
 800a6c0:	e053      	b.n	800a76a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a6c2:	4b2d      	ldr	r3, [pc, #180]	; (800a778 <HAL_RCC_ClockConfig+0x1c4>)
 800a6c4:	685b      	ldr	r3, [r3, #4]
 800a6c6:	f003 020c 	and.w	r2, r3, #12
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	685b      	ldr	r3, [r3, #4]
 800a6ce:	009b      	lsls	r3, r3, #2
 800a6d0:	429a      	cmp	r2, r3
 800a6d2:	d1eb      	bne.n	800a6ac <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a6d4:	4b27      	ldr	r3, [pc, #156]	; (800a774 <HAL_RCC_ClockConfig+0x1c0>)
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	f003 0307 	and.w	r3, r3, #7
 800a6dc:	683a      	ldr	r2, [r7, #0]
 800a6de:	429a      	cmp	r2, r3
 800a6e0:	d210      	bcs.n	800a704 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a6e2:	4b24      	ldr	r3, [pc, #144]	; (800a774 <HAL_RCC_ClockConfig+0x1c0>)
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	f023 0207 	bic.w	r2, r3, #7
 800a6ea:	4922      	ldr	r1, [pc, #136]	; (800a774 <HAL_RCC_ClockConfig+0x1c0>)
 800a6ec:	683b      	ldr	r3, [r7, #0]
 800a6ee:	4313      	orrs	r3, r2
 800a6f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a6f2:	4b20      	ldr	r3, [pc, #128]	; (800a774 <HAL_RCC_ClockConfig+0x1c0>)
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	f003 0307 	and.w	r3, r3, #7
 800a6fa:	683a      	ldr	r2, [r7, #0]
 800a6fc:	429a      	cmp	r2, r3
 800a6fe:	d001      	beq.n	800a704 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800a700:	2301      	movs	r3, #1
 800a702:	e032      	b.n	800a76a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	f003 0304 	and.w	r3, r3, #4
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d008      	beq.n	800a722 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a710:	4b19      	ldr	r3, [pc, #100]	; (800a778 <HAL_RCC_ClockConfig+0x1c4>)
 800a712:	685b      	ldr	r3, [r3, #4]
 800a714:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	68db      	ldr	r3, [r3, #12]
 800a71c:	4916      	ldr	r1, [pc, #88]	; (800a778 <HAL_RCC_ClockConfig+0x1c4>)
 800a71e:	4313      	orrs	r3, r2
 800a720:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	f003 0308 	and.w	r3, r3, #8
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d009      	beq.n	800a742 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800a72e:	4b12      	ldr	r3, [pc, #72]	; (800a778 <HAL_RCC_ClockConfig+0x1c4>)
 800a730:	685b      	ldr	r3, [r3, #4]
 800a732:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	691b      	ldr	r3, [r3, #16]
 800a73a:	00db      	lsls	r3, r3, #3
 800a73c:	490e      	ldr	r1, [pc, #56]	; (800a778 <HAL_RCC_ClockConfig+0x1c4>)
 800a73e:	4313      	orrs	r3, r2
 800a740:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800a742:	f000 f821 	bl	800a788 <HAL_RCC_GetSysClockFreq>
 800a746:	4602      	mov	r2, r0
 800a748:	4b0b      	ldr	r3, [pc, #44]	; (800a778 <HAL_RCC_ClockConfig+0x1c4>)
 800a74a:	685b      	ldr	r3, [r3, #4]
 800a74c:	091b      	lsrs	r3, r3, #4
 800a74e:	f003 030f 	and.w	r3, r3, #15
 800a752:	490a      	ldr	r1, [pc, #40]	; (800a77c <HAL_RCC_ClockConfig+0x1c8>)
 800a754:	5ccb      	ldrb	r3, [r1, r3]
 800a756:	fa22 f303 	lsr.w	r3, r2, r3
 800a75a:	4a09      	ldr	r2, [pc, #36]	; (800a780 <HAL_RCC_ClockConfig+0x1cc>)
 800a75c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800a75e:	4b09      	ldr	r3, [pc, #36]	; (800a784 <HAL_RCC_ClockConfig+0x1d0>)
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	4618      	mov	r0, r3
 800a764:	f7fd fa6e 	bl	8007c44 <HAL_InitTick>

  return HAL_OK;
 800a768:	2300      	movs	r3, #0
}
 800a76a:	4618      	mov	r0, r3
 800a76c:	3710      	adds	r7, #16
 800a76e:	46bd      	mov	sp, r7
 800a770:	bd80      	pop	{r7, pc}
 800a772:	bf00      	nop
 800a774:	40022000 	.word	0x40022000
 800a778:	40021000 	.word	0x40021000
 800a77c:	0800f5bc 	.word	0x0800f5bc
 800a780:	20000494 	.word	0x20000494
 800a784:	200004dc 	.word	0x200004dc

0800a788 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a788:	b480      	push	{r7}
 800a78a:	b087      	sub	sp, #28
 800a78c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800a78e:	2300      	movs	r3, #0
 800a790:	60fb      	str	r3, [r7, #12]
 800a792:	2300      	movs	r3, #0
 800a794:	60bb      	str	r3, [r7, #8]
 800a796:	2300      	movs	r3, #0
 800a798:	617b      	str	r3, [r7, #20]
 800a79a:	2300      	movs	r3, #0
 800a79c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800a79e:	2300      	movs	r3, #0
 800a7a0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800a7a2:	4b1e      	ldr	r3, [pc, #120]	; (800a81c <HAL_RCC_GetSysClockFreq+0x94>)
 800a7a4:	685b      	ldr	r3, [r3, #4]
 800a7a6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	f003 030c 	and.w	r3, r3, #12
 800a7ae:	2b04      	cmp	r3, #4
 800a7b0:	d002      	beq.n	800a7b8 <HAL_RCC_GetSysClockFreq+0x30>
 800a7b2:	2b08      	cmp	r3, #8
 800a7b4:	d003      	beq.n	800a7be <HAL_RCC_GetSysClockFreq+0x36>
 800a7b6:	e027      	b.n	800a808 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800a7b8:	4b19      	ldr	r3, [pc, #100]	; (800a820 <HAL_RCC_GetSysClockFreq+0x98>)
 800a7ba:	613b      	str	r3, [r7, #16]
      break;
 800a7bc:	e027      	b.n	800a80e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	0c9b      	lsrs	r3, r3, #18
 800a7c2:	f003 030f 	and.w	r3, r3, #15
 800a7c6:	4a17      	ldr	r2, [pc, #92]	; (800a824 <HAL_RCC_GetSysClockFreq+0x9c>)
 800a7c8:	5cd3      	ldrb	r3, [r2, r3]
 800a7ca:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d010      	beq.n	800a7f8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800a7d6:	4b11      	ldr	r3, [pc, #68]	; (800a81c <HAL_RCC_GetSysClockFreq+0x94>)
 800a7d8:	685b      	ldr	r3, [r3, #4]
 800a7da:	0c5b      	lsrs	r3, r3, #17
 800a7dc:	f003 0301 	and.w	r3, r3, #1
 800a7e0:	4a11      	ldr	r2, [pc, #68]	; (800a828 <HAL_RCC_GetSysClockFreq+0xa0>)
 800a7e2:	5cd3      	ldrb	r3, [r2, r3]
 800a7e4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	4a0d      	ldr	r2, [pc, #52]	; (800a820 <HAL_RCC_GetSysClockFreq+0x98>)
 800a7ea:	fb03 f202 	mul.w	r2, r3, r2
 800a7ee:	68bb      	ldr	r3, [r7, #8]
 800a7f0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a7f4:	617b      	str	r3, [r7, #20]
 800a7f6:	e004      	b.n	800a802 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	4a0c      	ldr	r2, [pc, #48]	; (800a82c <HAL_RCC_GetSysClockFreq+0xa4>)
 800a7fc:	fb02 f303 	mul.w	r3, r2, r3
 800a800:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800a802:	697b      	ldr	r3, [r7, #20]
 800a804:	613b      	str	r3, [r7, #16]
      break;
 800a806:	e002      	b.n	800a80e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800a808:	4b05      	ldr	r3, [pc, #20]	; (800a820 <HAL_RCC_GetSysClockFreq+0x98>)
 800a80a:	613b      	str	r3, [r7, #16]
      break;
 800a80c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a80e:	693b      	ldr	r3, [r7, #16]
}
 800a810:	4618      	mov	r0, r3
 800a812:	371c      	adds	r7, #28
 800a814:	46bd      	mov	sp, r7
 800a816:	bc80      	pop	{r7}
 800a818:	4770      	bx	lr
 800a81a:	bf00      	nop
 800a81c:	40021000 	.word	0x40021000
 800a820:	007a1200 	.word	0x007a1200
 800a824:	0800f5d4 	.word	0x0800f5d4
 800a828:	0800f5e4 	.word	0x0800f5e4
 800a82c:	003d0900 	.word	0x003d0900

0800a830 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a830:	b480      	push	{r7}
 800a832:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a834:	4b02      	ldr	r3, [pc, #8]	; (800a840 <HAL_RCC_GetHCLKFreq+0x10>)
 800a836:	681b      	ldr	r3, [r3, #0]
}
 800a838:	4618      	mov	r0, r3
 800a83a:	46bd      	mov	sp, r7
 800a83c:	bc80      	pop	{r7}
 800a83e:	4770      	bx	lr
 800a840:	20000494 	.word	0x20000494

0800a844 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a844:	b580      	push	{r7, lr}
 800a846:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800a848:	f7ff fff2 	bl	800a830 <HAL_RCC_GetHCLKFreq>
 800a84c:	4602      	mov	r2, r0
 800a84e:	4b05      	ldr	r3, [pc, #20]	; (800a864 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a850:	685b      	ldr	r3, [r3, #4]
 800a852:	0a1b      	lsrs	r3, r3, #8
 800a854:	f003 0307 	and.w	r3, r3, #7
 800a858:	4903      	ldr	r1, [pc, #12]	; (800a868 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a85a:	5ccb      	ldrb	r3, [r1, r3]
 800a85c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a860:	4618      	mov	r0, r3
 800a862:	bd80      	pop	{r7, pc}
 800a864:	40021000 	.word	0x40021000
 800a868:	0800f5cc 	.word	0x0800f5cc

0800a86c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a86c:	b580      	push	{r7, lr}
 800a86e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800a870:	f7ff ffde 	bl	800a830 <HAL_RCC_GetHCLKFreq>
 800a874:	4602      	mov	r2, r0
 800a876:	4b05      	ldr	r3, [pc, #20]	; (800a88c <HAL_RCC_GetPCLK2Freq+0x20>)
 800a878:	685b      	ldr	r3, [r3, #4]
 800a87a:	0adb      	lsrs	r3, r3, #11
 800a87c:	f003 0307 	and.w	r3, r3, #7
 800a880:	4903      	ldr	r1, [pc, #12]	; (800a890 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a882:	5ccb      	ldrb	r3, [r1, r3]
 800a884:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a888:	4618      	mov	r0, r3
 800a88a:	bd80      	pop	{r7, pc}
 800a88c:	40021000 	.word	0x40021000
 800a890:	0800f5cc 	.word	0x0800f5cc

0800a894 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800a894:	b480      	push	{r7}
 800a896:	b085      	sub	sp, #20
 800a898:	af00      	add	r7, sp, #0
 800a89a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800a89c:	4b0a      	ldr	r3, [pc, #40]	; (800a8c8 <RCC_Delay+0x34>)
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	4a0a      	ldr	r2, [pc, #40]	; (800a8cc <RCC_Delay+0x38>)
 800a8a2:	fba2 2303 	umull	r2, r3, r2, r3
 800a8a6:	0a5b      	lsrs	r3, r3, #9
 800a8a8:	687a      	ldr	r2, [r7, #4]
 800a8aa:	fb02 f303 	mul.w	r3, r2, r3
 800a8ae:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800a8b0:	bf00      	nop
  }
  while (Delay --);
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	1e5a      	subs	r2, r3, #1
 800a8b6:	60fa      	str	r2, [r7, #12]
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d1f9      	bne.n	800a8b0 <RCC_Delay+0x1c>
}
 800a8bc:	bf00      	nop
 800a8be:	bf00      	nop
 800a8c0:	3714      	adds	r7, #20
 800a8c2:	46bd      	mov	sp, r7
 800a8c4:	bc80      	pop	{r7}
 800a8c6:	4770      	bx	lr
 800a8c8:	20000494 	.word	0x20000494
 800a8cc:	10624dd3 	.word	0x10624dd3

0800a8d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a8d0:	b580      	push	{r7, lr}
 800a8d2:	b086      	sub	sp, #24
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800a8d8:	2300      	movs	r3, #0
 800a8da:	613b      	str	r3, [r7, #16]
 800a8dc:	2300      	movs	r3, #0
 800a8de:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	f003 0301 	and.w	r3, r3, #1
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d07d      	beq.n	800a9e8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800a8ec:	2300      	movs	r3, #0
 800a8ee:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a8f0:	4b4f      	ldr	r3, [pc, #316]	; (800aa30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a8f2:	69db      	ldr	r3, [r3, #28]
 800a8f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d10d      	bne.n	800a918 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a8fc:	4b4c      	ldr	r3, [pc, #304]	; (800aa30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a8fe:	69db      	ldr	r3, [r3, #28]
 800a900:	4a4b      	ldr	r2, [pc, #300]	; (800aa30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a902:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a906:	61d3      	str	r3, [r2, #28]
 800a908:	4b49      	ldr	r3, [pc, #292]	; (800aa30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a90a:	69db      	ldr	r3, [r3, #28]
 800a90c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a910:	60bb      	str	r3, [r7, #8]
 800a912:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a914:	2301      	movs	r3, #1
 800a916:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a918:	4b46      	ldr	r3, [pc, #280]	; (800aa34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a920:	2b00      	cmp	r3, #0
 800a922:	d118      	bne.n	800a956 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a924:	4b43      	ldr	r3, [pc, #268]	; (800aa34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	4a42      	ldr	r2, [pc, #264]	; (800aa34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800a92a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a92e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a930:	f7fd f9ca 	bl	8007cc8 <HAL_GetTick>
 800a934:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a936:	e008      	b.n	800a94a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a938:	f7fd f9c6 	bl	8007cc8 <HAL_GetTick>
 800a93c:	4602      	mov	r2, r0
 800a93e:	693b      	ldr	r3, [r7, #16]
 800a940:	1ad3      	subs	r3, r2, r3
 800a942:	2b64      	cmp	r3, #100	; 0x64
 800a944:	d901      	bls.n	800a94a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800a946:	2303      	movs	r3, #3
 800a948:	e06d      	b.n	800aa26 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a94a:	4b3a      	ldr	r3, [pc, #232]	; (800aa34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a952:	2b00      	cmp	r3, #0
 800a954:	d0f0      	beq.n	800a938 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800a956:	4b36      	ldr	r3, [pc, #216]	; (800aa30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a958:	6a1b      	ldr	r3, [r3, #32]
 800a95a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a95e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	2b00      	cmp	r3, #0
 800a964:	d02e      	beq.n	800a9c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	685b      	ldr	r3, [r3, #4]
 800a96a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a96e:	68fa      	ldr	r2, [r7, #12]
 800a970:	429a      	cmp	r2, r3
 800a972:	d027      	beq.n	800a9c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a974:	4b2e      	ldr	r3, [pc, #184]	; (800aa30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a976:	6a1b      	ldr	r3, [r3, #32]
 800a978:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a97c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800a97e:	4b2e      	ldr	r3, [pc, #184]	; (800aa38 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800a980:	2201      	movs	r2, #1
 800a982:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800a984:	4b2c      	ldr	r3, [pc, #176]	; (800aa38 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800a986:	2200      	movs	r2, #0
 800a988:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800a98a:	4a29      	ldr	r2, [pc, #164]	; (800aa30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	f003 0301 	and.w	r3, r3, #1
 800a996:	2b00      	cmp	r3, #0
 800a998:	d014      	beq.n	800a9c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a99a:	f7fd f995 	bl	8007cc8 <HAL_GetTick>
 800a99e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a9a0:	e00a      	b.n	800a9b8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a9a2:	f7fd f991 	bl	8007cc8 <HAL_GetTick>
 800a9a6:	4602      	mov	r2, r0
 800a9a8:	693b      	ldr	r3, [r7, #16]
 800a9aa:	1ad3      	subs	r3, r2, r3
 800a9ac:	f241 3288 	movw	r2, #5000	; 0x1388
 800a9b0:	4293      	cmp	r3, r2
 800a9b2:	d901      	bls.n	800a9b8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800a9b4:	2303      	movs	r3, #3
 800a9b6:	e036      	b.n	800aa26 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a9b8:	4b1d      	ldr	r3, [pc, #116]	; (800aa30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a9ba:	6a1b      	ldr	r3, [r3, #32]
 800a9bc:	f003 0302 	and.w	r3, r3, #2
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d0ee      	beq.n	800a9a2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a9c4:	4b1a      	ldr	r3, [pc, #104]	; (800aa30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a9c6:	6a1b      	ldr	r3, [r3, #32]
 800a9c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	685b      	ldr	r3, [r3, #4]
 800a9d0:	4917      	ldr	r1, [pc, #92]	; (800aa30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a9d2:	4313      	orrs	r3, r2
 800a9d4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800a9d6:	7dfb      	ldrb	r3, [r7, #23]
 800a9d8:	2b01      	cmp	r3, #1
 800a9da:	d105      	bne.n	800a9e8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a9dc:	4b14      	ldr	r3, [pc, #80]	; (800aa30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a9de:	69db      	ldr	r3, [r3, #28]
 800a9e0:	4a13      	ldr	r2, [pc, #76]	; (800aa30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a9e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a9e6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	f003 0302 	and.w	r3, r3, #2
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d008      	beq.n	800aa06 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a9f4:	4b0e      	ldr	r3, [pc, #56]	; (800aa30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a9f6:	685b      	ldr	r3, [r3, #4]
 800a9f8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	689b      	ldr	r3, [r3, #8]
 800aa00:	490b      	ldr	r1, [pc, #44]	; (800aa30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800aa02:	4313      	orrs	r3, r2
 800aa04:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	f003 0310 	and.w	r3, r3, #16
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d008      	beq.n	800aa24 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800aa12:	4b07      	ldr	r3, [pc, #28]	; (800aa30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800aa14:	685b      	ldr	r3, [r3, #4]
 800aa16:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	68db      	ldr	r3, [r3, #12]
 800aa1e:	4904      	ldr	r1, [pc, #16]	; (800aa30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800aa20:	4313      	orrs	r3, r2
 800aa22:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800aa24:	2300      	movs	r3, #0
}
 800aa26:	4618      	mov	r0, r3
 800aa28:	3718      	adds	r7, #24
 800aa2a:	46bd      	mov	sp, r7
 800aa2c:	bd80      	pop	{r7, pc}
 800aa2e:	bf00      	nop
 800aa30:	40021000 	.word	0x40021000
 800aa34:	40007000 	.word	0x40007000
 800aa38:	42420440 	.word	0x42420440

0800aa3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800aa3c:	b580      	push	{r7, lr}
 800aa3e:	b082      	sub	sp, #8
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d101      	bne.n	800aa4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800aa4a:	2301      	movs	r3, #1
 800aa4c:	e041      	b.n	800aad2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aa54:	b2db      	uxtb	r3, r3
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d106      	bne.n	800aa68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	2200      	movs	r2, #0
 800aa5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800aa62:	6878      	ldr	r0, [r7, #4]
 800aa64:	f7fb feea 	bl	800683c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	2202      	movs	r2, #2
 800aa6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	681a      	ldr	r2, [r3, #0]
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	3304      	adds	r3, #4
 800aa78:	4619      	mov	r1, r3
 800aa7a:	4610      	mov	r0, r2
 800aa7c:	f000 f8f4 	bl	800ac68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	2201      	movs	r2, #1
 800aa84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	2201      	movs	r2, #1
 800aa8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	2201      	movs	r2, #1
 800aa94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	2201      	movs	r2, #1
 800aa9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	2201      	movs	r2, #1
 800aaa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	2201      	movs	r2, #1
 800aaac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	2201      	movs	r2, #1
 800aab4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	2201      	movs	r2, #1
 800aabc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	2201      	movs	r2, #1
 800aac4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	2201      	movs	r2, #1
 800aacc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800aad0:	2300      	movs	r3, #0
}
 800aad2:	4618      	mov	r0, r3
 800aad4:	3708      	adds	r7, #8
 800aad6:	46bd      	mov	sp, r7
 800aad8:	bd80      	pop	{r7, pc}

0800aada <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800aada:	b580      	push	{r7, lr}
 800aadc:	b084      	sub	sp, #16
 800aade:	af00      	add	r7, sp, #0
 800aae0:	6078      	str	r0, [r7, #4]
 800aae2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800aae4:	2300      	movs	r3, #0
 800aae6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aaee:	2b01      	cmp	r3, #1
 800aaf0:	d101      	bne.n	800aaf6 <HAL_TIM_ConfigClockSource+0x1c>
 800aaf2:	2302      	movs	r3, #2
 800aaf4:	e0b4      	b.n	800ac60 <HAL_TIM_ConfigClockSource+0x186>
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	2201      	movs	r2, #1
 800aafa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	2202      	movs	r2, #2
 800ab02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	689b      	ldr	r3, [r3, #8]
 800ab0c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ab0e:	68bb      	ldr	r3, [r7, #8]
 800ab10:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800ab14:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ab16:	68bb      	ldr	r3, [r7, #8]
 800ab18:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ab1c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	68ba      	ldr	r2, [r7, #8]
 800ab24:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ab26:	683b      	ldr	r3, [r7, #0]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ab2e:	d03e      	beq.n	800abae <HAL_TIM_ConfigClockSource+0xd4>
 800ab30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ab34:	f200 8087 	bhi.w	800ac46 <HAL_TIM_ConfigClockSource+0x16c>
 800ab38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab3c:	f000 8086 	beq.w	800ac4c <HAL_TIM_ConfigClockSource+0x172>
 800ab40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab44:	d87f      	bhi.n	800ac46 <HAL_TIM_ConfigClockSource+0x16c>
 800ab46:	2b70      	cmp	r3, #112	; 0x70
 800ab48:	d01a      	beq.n	800ab80 <HAL_TIM_ConfigClockSource+0xa6>
 800ab4a:	2b70      	cmp	r3, #112	; 0x70
 800ab4c:	d87b      	bhi.n	800ac46 <HAL_TIM_ConfigClockSource+0x16c>
 800ab4e:	2b60      	cmp	r3, #96	; 0x60
 800ab50:	d050      	beq.n	800abf4 <HAL_TIM_ConfigClockSource+0x11a>
 800ab52:	2b60      	cmp	r3, #96	; 0x60
 800ab54:	d877      	bhi.n	800ac46 <HAL_TIM_ConfigClockSource+0x16c>
 800ab56:	2b50      	cmp	r3, #80	; 0x50
 800ab58:	d03c      	beq.n	800abd4 <HAL_TIM_ConfigClockSource+0xfa>
 800ab5a:	2b50      	cmp	r3, #80	; 0x50
 800ab5c:	d873      	bhi.n	800ac46 <HAL_TIM_ConfigClockSource+0x16c>
 800ab5e:	2b40      	cmp	r3, #64	; 0x40
 800ab60:	d058      	beq.n	800ac14 <HAL_TIM_ConfigClockSource+0x13a>
 800ab62:	2b40      	cmp	r3, #64	; 0x40
 800ab64:	d86f      	bhi.n	800ac46 <HAL_TIM_ConfigClockSource+0x16c>
 800ab66:	2b30      	cmp	r3, #48	; 0x30
 800ab68:	d064      	beq.n	800ac34 <HAL_TIM_ConfigClockSource+0x15a>
 800ab6a:	2b30      	cmp	r3, #48	; 0x30
 800ab6c:	d86b      	bhi.n	800ac46 <HAL_TIM_ConfigClockSource+0x16c>
 800ab6e:	2b20      	cmp	r3, #32
 800ab70:	d060      	beq.n	800ac34 <HAL_TIM_ConfigClockSource+0x15a>
 800ab72:	2b20      	cmp	r3, #32
 800ab74:	d867      	bhi.n	800ac46 <HAL_TIM_ConfigClockSource+0x16c>
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d05c      	beq.n	800ac34 <HAL_TIM_ConfigClockSource+0x15a>
 800ab7a:	2b10      	cmp	r3, #16
 800ab7c:	d05a      	beq.n	800ac34 <HAL_TIM_ConfigClockSource+0x15a>
 800ab7e:	e062      	b.n	800ac46 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	6818      	ldr	r0, [r3, #0]
 800ab84:	683b      	ldr	r3, [r7, #0]
 800ab86:	6899      	ldr	r1, [r3, #8]
 800ab88:	683b      	ldr	r3, [r7, #0]
 800ab8a:	685a      	ldr	r2, [r3, #4]
 800ab8c:	683b      	ldr	r3, [r7, #0]
 800ab8e:	68db      	ldr	r3, [r3, #12]
 800ab90:	f000 f943 	bl	800ae1a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	689b      	ldr	r3, [r3, #8]
 800ab9a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ab9c:	68bb      	ldr	r3, [r7, #8]
 800ab9e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800aba2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	68ba      	ldr	r2, [r7, #8]
 800abaa:	609a      	str	r2, [r3, #8]
      break;
 800abac:	e04f      	b.n	800ac4e <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	6818      	ldr	r0, [r3, #0]
 800abb2:	683b      	ldr	r3, [r7, #0]
 800abb4:	6899      	ldr	r1, [r3, #8]
 800abb6:	683b      	ldr	r3, [r7, #0]
 800abb8:	685a      	ldr	r2, [r3, #4]
 800abba:	683b      	ldr	r3, [r7, #0]
 800abbc:	68db      	ldr	r3, [r3, #12]
 800abbe:	f000 f92c 	bl	800ae1a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	689a      	ldr	r2, [r3, #8]
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800abd0:	609a      	str	r2, [r3, #8]
      break;
 800abd2:	e03c      	b.n	800ac4e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	6818      	ldr	r0, [r3, #0]
 800abd8:	683b      	ldr	r3, [r7, #0]
 800abda:	6859      	ldr	r1, [r3, #4]
 800abdc:	683b      	ldr	r3, [r7, #0]
 800abde:	68db      	ldr	r3, [r3, #12]
 800abe0:	461a      	mov	r2, r3
 800abe2:	f000 f8a3 	bl	800ad2c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	2150      	movs	r1, #80	; 0x50
 800abec:	4618      	mov	r0, r3
 800abee:	f000 f8fa 	bl	800ade6 <TIM_ITRx_SetConfig>
      break;
 800abf2:	e02c      	b.n	800ac4e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	6818      	ldr	r0, [r3, #0]
 800abf8:	683b      	ldr	r3, [r7, #0]
 800abfa:	6859      	ldr	r1, [r3, #4]
 800abfc:	683b      	ldr	r3, [r7, #0]
 800abfe:	68db      	ldr	r3, [r3, #12]
 800ac00:	461a      	mov	r2, r3
 800ac02:	f000 f8c1 	bl	800ad88 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	2160      	movs	r1, #96	; 0x60
 800ac0c:	4618      	mov	r0, r3
 800ac0e:	f000 f8ea 	bl	800ade6 <TIM_ITRx_SetConfig>
      break;
 800ac12:	e01c      	b.n	800ac4e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	6818      	ldr	r0, [r3, #0]
 800ac18:	683b      	ldr	r3, [r7, #0]
 800ac1a:	6859      	ldr	r1, [r3, #4]
 800ac1c:	683b      	ldr	r3, [r7, #0]
 800ac1e:	68db      	ldr	r3, [r3, #12]
 800ac20:	461a      	mov	r2, r3
 800ac22:	f000 f883 	bl	800ad2c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	2140      	movs	r1, #64	; 0x40
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	f000 f8da 	bl	800ade6 <TIM_ITRx_SetConfig>
      break;
 800ac32:	e00c      	b.n	800ac4e <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	681a      	ldr	r2, [r3, #0]
 800ac38:	683b      	ldr	r3, [r7, #0]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	4619      	mov	r1, r3
 800ac3e:	4610      	mov	r0, r2
 800ac40:	f000 f8d1 	bl	800ade6 <TIM_ITRx_SetConfig>
      break;
 800ac44:	e003      	b.n	800ac4e <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800ac46:	2301      	movs	r3, #1
 800ac48:	73fb      	strb	r3, [r7, #15]
      break;
 800ac4a:	e000      	b.n	800ac4e <HAL_TIM_ConfigClockSource+0x174>
      break;
 800ac4c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	2201      	movs	r2, #1
 800ac52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	2200      	movs	r2, #0
 800ac5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ac5e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac60:	4618      	mov	r0, r3
 800ac62:	3710      	adds	r7, #16
 800ac64:	46bd      	mov	sp, r7
 800ac66:	bd80      	pop	{r7, pc}

0800ac68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ac68:	b480      	push	{r7}
 800ac6a:	b085      	sub	sp, #20
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	6078      	str	r0, [r7, #4]
 800ac70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	4a29      	ldr	r2, [pc, #164]	; (800ad20 <TIM_Base_SetConfig+0xb8>)
 800ac7c:	4293      	cmp	r3, r2
 800ac7e:	d00b      	beq.n	800ac98 <TIM_Base_SetConfig+0x30>
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ac86:	d007      	beq.n	800ac98 <TIM_Base_SetConfig+0x30>
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	4a26      	ldr	r2, [pc, #152]	; (800ad24 <TIM_Base_SetConfig+0xbc>)
 800ac8c:	4293      	cmp	r3, r2
 800ac8e:	d003      	beq.n	800ac98 <TIM_Base_SetConfig+0x30>
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	4a25      	ldr	r2, [pc, #148]	; (800ad28 <TIM_Base_SetConfig+0xc0>)
 800ac94:	4293      	cmp	r3, r2
 800ac96:	d108      	bne.n	800acaa <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800aca0:	683b      	ldr	r3, [r7, #0]
 800aca2:	685b      	ldr	r3, [r3, #4]
 800aca4:	68fa      	ldr	r2, [r7, #12]
 800aca6:	4313      	orrs	r3, r2
 800aca8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	4a1c      	ldr	r2, [pc, #112]	; (800ad20 <TIM_Base_SetConfig+0xb8>)
 800acae:	4293      	cmp	r3, r2
 800acb0:	d00b      	beq.n	800acca <TIM_Base_SetConfig+0x62>
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800acb8:	d007      	beq.n	800acca <TIM_Base_SetConfig+0x62>
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	4a19      	ldr	r2, [pc, #100]	; (800ad24 <TIM_Base_SetConfig+0xbc>)
 800acbe:	4293      	cmp	r3, r2
 800acc0:	d003      	beq.n	800acca <TIM_Base_SetConfig+0x62>
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	4a18      	ldr	r2, [pc, #96]	; (800ad28 <TIM_Base_SetConfig+0xc0>)
 800acc6:	4293      	cmp	r3, r2
 800acc8:	d108      	bne.n	800acdc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800acd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800acd2:	683b      	ldr	r3, [r7, #0]
 800acd4:	68db      	ldr	r3, [r3, #12]
 800acd6:	68fa      	ldr	r2, [r7, #12]
 800acd8:	4313      	orrs	r3, r2
 800acda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ace2:	683b      	ldr	r3, [r7, #0]
 800ace4:	695b      	ldr	r3, [r3, #20]
 800ace6:	4313      	orrs	r3, r2
 800ace8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	68fa      	ldr	r2, [r7, #12]
 800acee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800acf0:	683b      	ldr	r3, [r7, #0]
 800acf2:	689a      	ldr	r2, [r3, #8]
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800acf8:	683b      	ldr	r3, [r7, #0]
 800acfa:	681a      	ldr	r2, [r3, #0]
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	4a07      	ldr	r2, [pc, #28]	; (800ad20 <TIM_Base_SetConfig+0xb8>)
 800ad04:	4293      	cmp	r3, r2
 800ad06:	d103      	bne.n	800ad10 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ad08:	683b      	ldr	r3, [r7, #0]
 800ad0a:	691a      	ldr	r2, [r3, #16]
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	2201      	movs	r2, #1
 800ad14:	615a      	str	r2, [r3, #20]
}
 800ad16:	bf00      	nop
 800ad18:	3714      	adds	r7, #20
 800ad1a:	46bd      	mov	sp, r7
 800ad1c:	bc80      	pop	{r7}
 800ad1e:	4770      	bx	lr
 800ad20:	40012c00 	.word	0x40012c00
 800ad24:	40000400 	.word	0x40000400
 800ad28:	40000800 	.word	0x40000800

0800ad2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ad2c:	b480      	push	{r7}
 800ad2e:	b087      	sub	sp, #28
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	60f8      	str	r0, [r7, #12]
 800ad34:	60b9      	str	r1, [r7, #8]
 800ad36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	6a1b      	ldr	r3, [r3, #32]
 800ad3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	6a1b      	ldr	r3, [r3, #32]
 800ad42:	f023 0201 	bic.w	r2, r3, #1
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	699b      	ldr	r3, [r3, #24]
 800ad4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ad50:	693b      	ldr	r3, [r7, #16]
 800ad52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ad56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	011b      	lsls	r3, r3, #4
 800ad5c:	693a      	ldr	r2, [r7, #16]
 800ad5e:	4313      	orrs	r3, r2
 800ad60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ad62:	697b      	ldr	r3, [r7, #20]
 800ad64:	f023 030a 	bic.w	r3, r3, #10
 800ad68:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ad6a:	697a      	ldr	r2, [r7, #20]
 800ad6c:	68bb      	ldr	r3, [r7, #8]
 800ad6e:	4313      	orrs	r3, r2
 800ad70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	693a      	ldr	r2, [r7, #16]
 800ad76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	697a      	ldr	r2, [r7, #20]
 800ad7c:	621a      	str	r2, [r3, #32]
}
 800ad7e:	bf00      	nop
 800ad80:	371c      	adds	r7, #28
 800ad82:	46bd      	mov	sp, r7
 800ad84:	bc80      	pop	{r7}
 800ad86:	4770      	bx	lr

0800ad88 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ad88:	b480      	push	{r7}
 800ad8a:	b087      	sub	sp, #28
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	60f8      	str	r0, [r7, #12]
 800ad90:	60b9      	str	r1, [r7, #8]
 800ad92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	6a1b      	ldr	r3, [r3, #32]
 800ad98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	6a1b      	ldr	r3, [r3, #32]
 800ad9e:	f023 0210 	bic.w	r2, r3, #16
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	699b      	ldr	r3, [r3, #24]
 800adaa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800adac:	693b      	ldr	r3, [r7, #16]
 800adae:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800adb2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	031b      	lsls	r3, r3, #12
 800adb8:	693a      	ldr	r2, [r7, #16]
 800adba:	4313      	orrs	r3, r2
 800adbc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800adbe:	697b      	ldr	r3, [r7, #20]
 800adc0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800adc4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800adc6:	68bb      	ldr	r3, [r7, #8]
 800adc8:	011b      	lsls	r3, r3, #4
 800adca:	697a      	ldr	r2, [r7, #20]
 800adcc:	4313      	orrs	r3, r2
 800adce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	693a      	ldr	r2, [r7, #16]
 800add4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	697a      	ldr	r2, [r7, #20]
 800adda:	621a      	str	r2, [r3, #32]
}
 800addc:	bf00      	nop
 800adde:	371c      	adds	r7, #28
 800ade0:	46bd      	mov	sp, r7
 800ade2:	bc80      	pop	{r7}
 800ade4:	4770      	bx	lr

0800ade6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ade6:	b480      	push	{r7}
 800ade8:	b085      	sub	sp, #20
 800adea:	af00      	add	r7, sp, #0
 800adec:	6078      	str	r0, [r7, #4]
 800adee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	689b      	ldr	r3, [r3, #8]
 800adf4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800adfc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800adfe:	683a      	ldr	r2, [r7, #0]
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	4313      	orrs	r3, r2
 800ae04:	f043 0307 	orr.w	r3, r3, #7
 800ae08:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	68fa      	ldr	r2, [r7, #12]
 800ae0e:	609a      	str	r2, [r3, #8]
}
 800ae10:	bf00      	nop
 800ae12:	3714      	adds	r7, #20
 800ae14:	46bd      	mov	sp, r7
 800ae16:	bc80      	pop	{r7}
 800ae18:	4770      	bx	lr

0800ae1a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ae1a:	b480      	push	{r7}
 800ae1c:	b087      	sub	sp, #28
 800ae1e:	af00      	add	r7, sp, #0
 800ae20:	60f8      	str	r0, [r7, #12]
 800ae22:	60b9      	str	r1, [r7, #8]
 800ae24:	607a      	str	r2, [r7, #4]
 800ae26:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	689b      	ldr	r3, [r3, #8]
 800ae2c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ae2e:	697b      	ldr	r3, [r7, #20]
 800ae30:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ae34:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ae36:	683b      	ldr	r3, [r7, #0]
 800ae38:	021a      	lsls	r2, r3, #8
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	431a      	orrs	r2, r3
 800ae3e:	68bb      	ldr	r3, [r7, #8]
 800ae40:	4313      	orrs	r3, r2
 800ae42:	697a      	ldr	r2, [r7, #20]
 800ae44:	4313      	orrs	r3, r2
 800ae46:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	697a      	ldr	r2, [r7, #20]
 800ae4c:	609a      	str	r2, [r3, #8]
}
 800ae4e:	bf00      	nop
 800ae50:	371c      	adds	r7, #28
 800ae52:	46bd      	mov	sp, r7
 800ae54:	bc80      	pop	{r7}
 800ae56:	4770      	bx	lr

0800ae58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ae58:	b480      	push	{r7}
 800ae5a:	b085      	sub	sp, #20
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	6078      	str	r0, [r7, #4]
 800ae60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ae68:	2b01      	cmp	r3, #1
 800ae6a:	d101      	bne.n	800ae70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ae6c:	2302      	movs	r3, #2
 800ae6e:	e046      	b.n	800aefe <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	2201      	movs	r2, #1
 800ae74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	2202      	movs	r2, #2
 800ae7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	685b      	ldr	r3, [r3, #4]
 800ae86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	689b      	ldr	r3, [r3, #8]
 800ae8e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae96:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ae98:	683b      	ldr	r3, [r7, #0]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	68fa      	ldr	r2, [r7, #12]
 800ae9e:	4313      	orrs	r3, r2
 800aea0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	68fa      	ldr	r2, [r7, #12]
 800aea8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	4a16      	ldr	r2, [pc, #88]	; (800af08 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800aeb0:	4293      	cmp	r3, r2
 800aeb2:	d00e      	beq.n	800aed2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aebc:	d009      	beq.n	800aed2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	4a12      	ldr	r2, [pc, #72]	; (800af0c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800aec4:	4293      	cmp	r3, r2
 800aec6:	d004      	beq.n	800aed2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	4a10      	ldr	r2, [pc, #64]	; (800af10 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800aece:	4293      	cmp	r3, r2
 800aed0:	d10c      	bne.n	800aeec <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800aed2:	68bb      	ldr	r3, [r7, #8]
 800aed4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aed8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800aeda:	683b      	ldr	r3, [r7, #0]
 800aedc:	685b      	ldr	r3, [r3, #4]
 800aede:	68ba      	ldr	r2, [r7, #8]
 800aee0:	4313      	orrs	r3, r2
 800aee2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	68ba      	ldr	r2, [r7, #8]
 800aeea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	2201      	movs	r2, #1
 800aef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	2200      	movs	r2, #0
 800aef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800aefc:	2300      	movs	r3, #0
}
 800aefe:	4618      	mov	r0, r3
 800af00:	3714      	adds	r7, #20
 800af02:	46bd      	mov	sp, r7
 800af04:	bc80      	pop	{r7}
 800af06:	4770      	bx	lr
 800af08:	40012c00 	.word	0x40012c00
 800af0c:	40000400 	.word	0x40000400
 800af10:	40000800 	.word	0x40000800

0800af14 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800af14:	b580      	push	{r7, lr}
 800af16:	b082      	sub	sp, #8
 800af18:	af00      	add	r7, sp, #0
 800af1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d101      	bne.n	800af26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800af22:	2301      	movs	r3, #1
 800af24:	e042      	b.n	800afac <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800af2c:	b2db      	uxtb	r3, r3
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d106      	bne.n	800af40 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	2200      	movs	r2, #0
 800af36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800af3a:	6878      	ldr	r0, [r7, #4]
 800af3c:	f7fb fd1a 	bl	8006974 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	2224      	movs	r2, #36	; 0x24
 800af44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	68da      	ldr	r2, [r3, #12]
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800af56:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800af58:	6878      	ldr	r0, [r7, #4]
 800af5a:	f000 ff89 	bl	800be70 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	691a      	ldr	r2, [r3, #16]
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800af6c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	695a      	ldr	r2, [r3, #20]
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800af7c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	68da      	ldr	r2, [r3, #12]
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800af8c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	2200      	movs	r2, #0
 800af92:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	2220      	movs	r2, #32
 800af98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	2220      	movs	r2, #32
 800afa0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	2200      	movs	r2, #0
 800afa8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800afaa:	2300      	movs	r3, #0
}
 800afac:	4618      	mov	r0, r3
 800afae:	3708      	adds	r7, #8
 800afb0:	46bd      	mov	sp, r7
 800afb2:	bd80      	pop	{r7, pc}

0800afb4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800afb4:	b580      	push	{r7, lr}
 800afb6:	b08a      	sub	sp, #40	; 0x28
 800afb8:	af02      	add	r7, sp, #8
 800afba:	60f8      	str	r0, [r7, #12]
 800afbc:	60b9      	str	r1, [r7, #8]
 800afbe:	603b      	str	r3, [r7, #0]
 800afc0:	4613      	mov	r3, r2
 800afc2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800afc4:	2300      	movs	r3, #0
 800afc6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800afce:	b2db      	uxtb	r3, r3
 800afd0:	2b20      	cmp	r3, #32
 800afd2:	d16d      	bne.n	800b0b0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800afd4:	68bb      	ldr	r3, [r7, #8]
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d002      	beq.n	800afe0 <HAL_UART_Transmit+0x2c>
 800afda:	88fb      	ldrh	r3, [r7, #6]
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d101      	bne.n	800afe4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800afe0:	2301      	movs	r3, #1
 800afe2:	e066      	b.n	800b0b2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	2200      	movs	r2, #0
 800afe8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	2221      	movs	r2, #33	; 0x21
 800afee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800aff2:	f7fc fe69 	bl	8007cc8 <HAL_GetTick>
 800aff6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	88fa      	ldrh	r2, [r7, #6]
 800affc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	88fa      	ldrh	r2, [r7, #6]
 800b002:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	689b      	ldr	r3, [r3, #8]
 800b008:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b00c:	d108      	bne.n	800b020 <HAL_UART_Transmit+0x6c>
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	691b      	ldr	r3, [r3, #16]
 800b012:	2b00      	cmp	r3, #0
 800b014:	d104      	bne.n	800b020 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800b016:	2300      	movs	r3, #0
 800b018:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b01a:	68bb      	ldr	r3, [r7, #8]
 800b01c:	61bb      	str	r3, [r7, #24]
 800b01e:	e003      	b.n	800b028 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800b020:	68bb      	ldr	r3, [r7, #8]
 800b022:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b024:	2300      	movs	r3, #0
 800b026:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800b028:	e02a      	b.n	800b080 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b02a:	683b      	ldr	r3, [r7, #0]
 800b02c:	9300      	str	r3, [sp, #0]
 800b02e:	697b      	ldr	r3, [r7, #20]
 800b030:	2200      	movs	r2, #0
 800b032:	2180      	movs	r1, #128	; 0x80
 800b034:	68f8      	ldr	r0, [r7, #12]
 800b036:	f000 fc51 	bl	800b8dc <UART_WaitOnFlagUntilTimeout>
 800b03a:	4603      	mov	r3, r0
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d001      	beq.n	800b044 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800b040:	2303      	movs	r3, #3
 800b042:	e036      	b.n	800b0b2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800b044:	69fb      	ldr	r3, [r7, #28]
 800b046:	2b00      	cmp	r3, #0
 800b048:	d10b      	bne.n	800b062 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b04a:	69bb      	ldr	r3, [r7, #24]
 800b04c:	881b      	ldrh	r3, [r3, #0]
 800b04e:	461a      	mov	r2, r3
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b058:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800b05a:	69bb      	ldr	r3, [r7, #24]
 800b05c:	3302      	adds	r3, #2
 800b05e:	61bb      	str	r3, [r7, #24]
 800b060:	e007      	b.n	800b072 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800b062:	69fb      	ldr	r3, [r7, #28]
 800b064:	781a      	ldrb	r2, [r3, #0]
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800b06c:	69fb      	ldr	r3, [r7, #28]
 800b06e:	3301      	adds	r3, #1
 800b070:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b076:	b29b      	uxth	r3, r3
 800b078:	3b01      	subs	r3, #1
 800b07a:	b29a      	uxth	r2, r3
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b084:	b29b      	uxth	r3, r3
 800b086:	2b00      	cmp	r3, #0
 800b088:	d1cf      	bne.n	800b02a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b08a:	683b      	ldr	r3, [r7, #0]
 800b08c:	9300      	str	r3, [sp, #0]
 800b08e:	697b      	ldr	r3, [r7, #20]
 800b090:	2200      	movs	r2, #0
 800b092:	2140      	movs	r1, #64	; 0x40
 800b094:	68f8      	ldr	r0, [r7, #12]
 800b096:	f000 fc21 	bl	800b8dc <UART_WaitOnFlagUntilTimeout>
 800b09a:	4603      	mov	r3, r0
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d001      	beq.n	800b0a4 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800b0a0:	2303      	movs	r3, #3
 800b0a2:	e006      	b.n	800b0b2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	2220      	movs	r2, #32
 800b0a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800b0ac:	2300      	movs	r3, #0
 800b0ae:	e000      	b.n	800b0b2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800b0b0:	2302      	movs	r3, #2
  }
}
 800b0b2:	4618      	mov	r0, r3
 800b0b4:	3720      	adds	r7, #32
 800b0b6:	46bd      	mov	sp, r7
 800b0b8:	bd80      	pop	{r7, pc}

0800b0ba <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b0ba:	b580      	push	{r7, lr}
 800b0bc:	b08c      	sub	sp, #48	; 0x30
 800b0be:	af00      	add	r7, sp, #0
 800b0c0:	60f8      	str	r0, [r7, #12]
 800b0c2:	60b9      	str	r1, [r7, #8]
 800b0c4:	4613      	mov	r3, r2
 800b0c6:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b0ce:	b2db      	uxtb	r3, r3
 800b0d0:	2b20      	cmp	r3, #32
 800b0d2:	d14a      	bne.n	800b16a <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 800b0d4:	68bb      	ldr	r3, [r7, #8]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d002      	beq.n	800b0e0 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800b0da:	88fb      	ldrh	r3, [r7, #6]
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d101      	bne.n	800b0e4 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800b0e0:	2301      	movs	r3, #1
 800b0e2:	e043      	b.n	800b16c <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	2201      	movs	r2, #1
 800b0e8:	631a      	str	r2, [r3, #48]	; 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	2200      	movs	r2, #0
 800b0ee:	635a      	str	r2, [r3, #52]	; 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800b0f0:	88fb      	ldrh	r3, [r7, #6]
 800b0f2:	461a      	mov	r2, r3
 800b0f4:	68b9      	ldr	r1, [r7, #8]
 800b0f6:	68f8      	ldr	r0, [r7, #12]
 800b0f8:	f000 fc5e 	bl	800b9b8 <UART_Start_Receive_DMA>
 800b0fc:	4603      	mov	r3, r0
 800b0fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800b102:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b106:	2b00      	cmp	r3, #0
 800b108:	d12c      	bne.n	800b164 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b10e:	2b01      	cmp	r3, #1
 800b110:	d125      	bne.n	800b15e <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b112:	2300      	movs	r3, #0
 800b114:	613b      	str	r3, [r7, #16]
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	613b      	str	r3, [r7, #16]
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	685b      	ldr	r3, [r3, #4]
 800b124:	613b      	str	r3, [r7, #16]
 800b126:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	330c      	adds	r3, #12
 800b12e:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b130:	69bb      	ldr	r3, [r7, #24]
 800b132:	e853 3f00 	ldrex	r3, [r3]
 800b136:	617b      	str	r3, [r7, #20]
   return(result);
 800b138:	697b      	ldr	r3, [r7, #20]
 800b13a:	f043 0310 	orr.w	r3, r3, #16
 800b13e:	62bb      	str	r3, [r7, #40]	; 0x28
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	330c      	adds	r3, #12
 800b146:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b148:	627a      	str	r2, [r7, #36]	; 0x24
 800b14a:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b14c:	6a39      	ldr	r1, [r7, #32]
 800b14e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b150:	e841 2300 	strex	r3, r2, [r1]
 800b154:	61fb      	str	r3, [r7, #28]
   return(result);
 800b156:	69fb      	ldr	r3, [r7, #28]
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d1e5      	bne.n	800b128 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 800b15c:	e002      	b.n	800b164 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800b15e:	2301      	movs	r3, #1
 800b160:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800b164:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b168:	e000      	b.n	800b16c <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 800b16a:	2302      	movs	r3, #2
  }
}
 800b16c:	4618      	mov	r0, r3
 800b16e:	3730      	adds	r7, #48	; 0x30
 800b170:	46bd      	mov	sp, r7
 800b172:	bd80      	pop	{r7, pc}

0800b174 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b174:	b580      	push	{r7, lr}
 800b176:	b0ba      	sub	sp, #232	; 0xe8
 800b178:	af00      	add	r7, sp, #0
 800b17a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	68db      	ldr	r3, [r3, #12]
 800b18c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	695b      	ldr	r3, [r3, #20]
 800b196:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800b19a:	2300      	movs	r3, #0
 800b19c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800b1a0:	2300      	movs	r3, #0
 800b1a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b1a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b1aa:	f003 030f 	and.w	r3, r3, #15
 800b1ae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800b1b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d10f      	bne.n	800b1da <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b1ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b1be:	f003 0320 	and.w	r3, r3, #32
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d009      	beq.n	800b1da <HAL_UART_IRQHandler+0x66>
 800b1c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b1ca:	f003 0320 	and.w	r3, r3, #32
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d003      	beq.n	800b1da <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800b1d2:	6878      	ldr	r0, [r7, #4]
 800b1d4:	f000 fd8e 	bl	800bcf4 <UART_Receive_IT>
      return;
 800b1d8:	e25b      	b.n	800b692 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800b1da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	f000 80de 	beq.w	800b3a0 <HAL_UART_IRQHandler+0x22c>
 800b1e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b1e8:	f003 0301 	and.w	r3, r3, #1
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d106      	bne.n	800b1fe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b1f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b1f4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	f000 80d1 	beq.w	800b3a0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b1fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b202:	f003 0301 	and.w	r3, r3, #1
 800b206:	2b00      	cmp	r3, #0
 800b208:	d00b      	beq.n	800b222 <HAL_UART_IRQHandler+0xae>
 800b20a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b20e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b212:	2b00      	cmp	r3, #0
 800b214:	d005      	beq.n	800b222 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b21a:	f043 0201 	orr.w	r2, r3, #1
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b222:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b226:	f003 0304 	and.w	r3, r3, #4
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d00b      	beq.n	800b246 <HAL_UART_IRQHandler+0xd2>
 800b22e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b232:	f003 0301 	and.w	r3, r3, #1
 800b236:	2b00      	cmp	r3, #0
 800b238:	d005      	beq.n	800b246 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b23e:	f043 0202 	orr.w	r2, r3, #2
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b246:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b24a:	f003 0302 	and.w	r3, r3, #2
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d00b      	beq.n	800b26a <HAL_UART_IRQHandler+0xf6>
 800b252:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b256:	f003 0301 	and.w	r3, r3, #1
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d005      	beq.n	800b26a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b262:	f043 0204 	orr.w	r2, r3, #4
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800b26a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b26e:	f003 0308 	and.w	r3, r3, #8
 800b272:	2b00      	cmp	r3, #0
 800b274:	d011      	beq.n	800b29a <HAL_UART_IRQHandler+0x126>
 800b276:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b27a:	f003 0320 	and.w	r3, r3, #32
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d105      	bne.n	800b28e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800b282:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b286:	f003 0301 	and.w	r3, r3, #1
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d005      	beq.n	800b29a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b292:	f043 0208 	orr.w	r2, r3, #8
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	f000 81f2 	beq.w	800b688 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b2a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b2a8:	f003 0320 	and.w	r3, r3, #32
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d008      	beq.n	800b2c2 <HAL_UART_IRQHandler+0x14e>
 800b2b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b2b4:	f003 0320 	and.w	r3, r3, #32
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d002      	beq.n	800b2c2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800b2bc:	6878      	ldr	r0, [r7, #4]
 800b2be:	f000 fd19 	bl	800bcf4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	695b      	ldr	r3, [r3, #20]
 800b2c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	bf14      	ite	ne
 800b2d0:	2301      	movne	r3, #1
 800b2d2:	2300      	moveq	r3, #0
 800b2d4:	b2db      	uxtb	r3, r3
 800b2d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b2de:	f003 0308 	and.w	r3, r3, #8
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d103      	bne.n	800b2ee <HAL_UART_IRQHandler+0x17a>
 800b2e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d04f      	beq.n	800b38e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b2ee:	6878      	ldr	r0, [r7, #4]
 800b2f0:	f000 fc23 	bl	800bb3a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	695b      	ldr	r3, [r3, #20]
 800b2fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d041      	beq.n	800b386 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	3314      	adds	r3, #20
 800b308:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b30c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b310:	e853 3f00 	ldrex	r3, [r3]
 800b314:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b318:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b31c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b320:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	3314      	adds	r3, #20
 800b32a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b32e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b332:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b336:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b33a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b33e:	e841 2300 	strex	r3, r2, [r1]
 800b342:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b346:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d1d9      	bne.n	800b302 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b352:	2b00      	cmp	r3, #0
 800b354:	d013      	beq.n	800b37e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b35a:	4a7e      	ldr	r2, [pc, #504]	; (800b554 <HAL_UART_IRQHandler+0x3e0>)
 800b35c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b362:	4618      	mov	r0, r3
 800b364:	f7fd fae0 	bl	8008928 <HAL_DMA_Abort_IT>
 800b368:	4603      	mov	r3, r0
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d016      	beq.n	800b39c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b372:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b374:	687a      	ldr	r2, [r7, #4]
 800b376:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800b378:	4610      	mov	r0, r2
 800b37a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b37c:	e00e      	b.n	800b39c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b37e:	6878      	ldr	r0, [r7, #4]
 800b380:	f000 f9a5 	bl	800b6ce <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b384:	e00a      	b.n	800b39c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b386:	6878      	ldr	r0, [r7, #4]
 800b388:	f000 f9a1 	bl	800b6ce <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b38c:	e006      	b.n	800b39c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b38e:	6878      	ldr	r0, [r7, #4]
 800b390:	f000 f99d 	bl	800b6ce <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	2200      	movs	r2, #0
 800b398:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800b39a:	e175      	b.n	800b688 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b39c:	bf00      	nop
    return;
 800b39e:	e173      	b.n	800b688 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3a4:	2b01      	cmp	r3, #1
 800b3a6:	f040 814f 	bne.w	800b648 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800b3aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b3ae:	f003 0310 	and.w	r3, r3, #16
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	f000 8148 	beq.w	800b648 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800b3b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b3bc:	f003 0310 	and.w	r3, r3, #16
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	f000 8141 	beq.w	800b648 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b3c6:	2300      	movs	r3, #0
 800b3c8:	60bb      	str	r3, [r7, #8]
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	60bb      	str	r3, [r7, #8]
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	685b      	ldr	r3, [r3, #4]
 800b3d8:	60bb      	str	r3, [r7, #8]
 800b3da:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	695b      	ldr	r3, [r3, #20]
 800b3e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	f000 80b6 	beq.w	800b558 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	685b      	ldr	r3, [r3, #4]
 800b3f4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b3f8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	f000 8145 	beq.w	800b68c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b406:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b40a:	429a      	cmp	r2, r3
 800b40c:	f080 813e 	bcs.w	800b68c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b416:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b41c:	699b      	ldr	r3, [r3, #24]
 800b41e:	2b20      	cmp	r3, #32
 800b420:	f000 8088 	beq.w	800b534 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	330c      	adds	r3, #12
 800b42a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b42e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b432:	e853 3f00 	ldrex	r3, [r3]
 800b436:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b43a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b43e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b442:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	330c      	adds	r3, #12
 800b44c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800b450:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b454:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b458:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b45c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b460:	e841 2300 	strex	r3, r2, [r1]
 800b464:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b468:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d1d9      	bne.n	800b424 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	3314      	adds	r3, #20
 800b476:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b478:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b47a:	e853 3f00 	ldrex	r3, [r3]
 800b47e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b480:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b482:	f023 0301 	bic.w	r3, r3, #1
 800b486:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	3314      	adds	r3, #20
 800b490:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b494:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b498:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b49a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b49c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b4a0:	e841 2300 	strex	r3, r2, [r1]
 800b4a4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b4a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d1e1      	bne.n	800b470 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	3314      	adds	r3, #20
 800b4b2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b4b6:	e853 3f00 	ldrex	r3, [r3]
 800b4ba:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b4bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b4be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b4c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	3314      	adds	r3, #20
 800b4cc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b4d0:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b4d2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4d4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b4d6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b4d8:	e841 2300 	strex	r3, r2, [r1]
 800b4dc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b4de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d1e3      	bne.n	800b4ac <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	2220      	movs	r2, #32
 800b4e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	2200      	movs	r2, #0
 800b4f0:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	330c      	adds	r3, #12
 800b4f8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b4fc:	e853 3f00 	ldrex	r3, [r3]
 800b500:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b502:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b504:	f023 0310 	bic.w	r3, r3, #16
 800b508:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	330c      	adds	r3, #12
 800b512:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b516:	65ba      	str	r2, [r7, #88]	; 0x58
 800b518:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b51a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b51c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b51e:	e841 2300 	strex	r3, r2, [r1]
 800b522:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b524:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b526:	2b00      	cmp	r3, #0
 800b528:	d1e3      	bne.n	800b4f2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b52e:	4618      	mov	r0, r3
 800b530:	f7fd f9be 	bl	80088b0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	2202      	movs	r2, #2
 800b538:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b542:	b29b      	uxth	r3, r3
 800b544:	1ad3      	subs	r3, r2, r3
 800b546:	b29b      	uxth	r3, r3
 800b548:	4619      	mov	r1, r3
 800b54a:	6878      	ldr	r0, [r7, #4]
 800b54c:	f7fa fce2 	bl	8005f14 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b550:	e09c      	b.n	800b68c <HAL_UART_IRQHandler+0x518>
 800b552:	bf00      	nop
 800b554:	0800bbff 	.word	0x0800bbff
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b560:	b29b      	uxth	r3, r3
 800b562:	1ad3      	subs	r3, r2, r3
 800b564:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b56c:	b29b      	uxth	r3, r3
 800b56e:	2b00      	cmp	r3, #0
 800b570:	f000 808e 	beq.w	800b690 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800b574:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b578:	2b00      	cmp	r3, #0
 800b57a:	f000 8089 	beq.w	800b690 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	330c      	adds	r3, #12
 800b584:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b588:	e853 3f00 	ldrex	r3, [r3]
 800b58c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b58e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b590:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b594:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	330c      	adds	r3, #12
 800b59e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800b5a2:	647a      	str	r2, [r7, #68]	; 0x44
 800b5a4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5a6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b5a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b5aa:	e841 2300 	strex	r3, r2, [r1]
 800b5ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b5b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d1e3      	bne.n	800b57e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	3314      	adds	r3, #20
 800b5bc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5c0:	e853 3f00 	ldrex	r3, [r3]
 800b5c4:	623b      	str	r3, [r7, #32]
   return(result);
 800b5c6:	6a3b      	ldr	r3, [r7, #32]
 800b5c8:	f023 0301 	bic.w	r3, r3, #1
 800b5cc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	3314      	adds	r3, #20
 800b5d6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b5da:	633a      	str	r2, [r7, #48]	; 0x30
 800b5dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b5e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b5e2:	e841 2300 	strex	r3, r2, [r1]
 800b5e6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b5e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d1e3      	bne.n	800b5b6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	2220      	movs	r2, #32
 800b5f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	2200      	movs	r2, #0
 800b5fa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	330c      	adds	r3, #12
 800b602:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b604:	693b      	ldr	r3, [r7, #16]
 800b606:	e853 3f00 	ldrex	r3, [r3]
 800b60a:	60fb      	str	r3, [r7, #12]
   return(result);
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	f023 0310 	bic.w	r3, r3, #16
 800b612:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	330c      	adds	r3, #12
 800b61c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800b620:	61fa      	str	r2, [r7, #28]
 800b622:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b624:	69b9      	ldr	r1, [r7, #24]
 800b626:	69fa      	ldr	r2, [r7, #28]
 800b628:	e841 2300 	strex	r3, r2, [r1]
 800b62c:	617b      	str	r3, [r7, #20]
   return(result);
 800b62e:	697b      	ldr	r3, [r7, #20]
 800b630:	2b00      	cmp	r3, #0
 800b632:	d1e3      	bne.n	800b5fc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	2202      	movs	r2, #2
 800b638:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b63a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b63e:	4619      	mov	r1, r3
 800b640:	6878      	ldr	r0, [r7, #4]
 800b642:	f7fa fc67 	bl	8005f14 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b646:	e023      	b.n	800b690 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b648:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b64c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b650:	2b00      	cmp	r3, #0
 800b652:	d009      	beq.n	800b668 <HAL_UART_IRQHandler+0x4f4>
 800b654:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b658:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d003      	beq.n	800b668 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800b660:	6878      	ldr	r0, [r7, #4]
 800b662:	f000 fae0 	bl	800bc26 <UART_Transmit_IT>
    return;
 800b666:	e014      	b.n	800b692 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b668:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b66c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b670:	2b00      	cmp	r3, #0
 800b672:	d00e      	beq.n	800b692 <HAL_UART_IRQHandler+0x51e>
 800b674:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b678:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d008      	beq.n	800b692 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800b680:	6878      	ldr	r0, [r7, #4]
 800b682:	f000 fb1f 	bl	800bcc4 <UART_EndTransmit_IT>
    return;
 800b686:	e004      	b.n	800b692 <HAL_UART_IRQHandler+0x51e>
    return;
 800b688:	bf00      	nop
 800b68a:	e002      	b.n	800b692 <HAL_UART_IRQHandler+0x51e>
      return;
 800b68c:	bf00      	nop
 800b68e:	e000      	b.n	800b692 <HAL_UART_IRQHandler+0x51e>
      return;
 800b690:	bf00      	nop
  }
}
 800b692:	37e8      	adds	r7, #232	; 0xe8
 800b694:	46bd      	mov	sp, r7
 800b696:	bd80      	pop	{r7, pc}

0800b698 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b698:	b480      	push	{r7}
 800b69a:	b083      	sub	sp, #12
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800b6a0:	bf00      	nop
 800b6a2:	370c      	adds	r7, #12
 800b6a4:	46bd      	mov	sp, r7
 800b6a6:	bc80      	pop	{r7}
 800b6a8:	4770      	bx	lr

0800b6aa <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800b6aa:	b480      	push	{r7}
 800b6ac:	b083      	sub	sp, #12
 800b6ae:	af00      	add	r7, sp, #0
 800b6b0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800b6b2:	bf00      	nop
 800b6b4:	370c      	adds	r7, #12
 800b6b6:	46bd      	mov	sp, r7
 800b6b8:	bc80      	pop	{r7}
 800b6ba:	4770      	bx	lr

0800b6bc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b6bc:	b480      	push	{r7}
 800b6be:	b083      	sub	sp, #12
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800b6c4:	bf00      	nop
 800b6c6:	370c      	adds	r7, #12
 800b6c8:	46bd      	mov	sp, r7
 800b6ca:	bc80      	pop	{r7}
 800b6cc:	4770      	bx	lr

0800b6ce <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b6ce:	b480      	push	{r7}
 800b6d0:	b083      	sub	sp, #12
 800b6d2:	af00      	add	r7, sp, #0
 800b6d4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b6d6:	bf00      	nop
 800b6d8:	370c      	adds	r7, #12
 800b6da:	46bd      	mov	sp, r7
 800b6dc:	bc80      	pop	{r7}
 800b6de:	4770      	bx	lr

0800b6e0 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b6e0:	b580      	push	{r7, lr}
 800b6e2:	b09c      	sub	sp, #112	; 0x70
 800b6e4:	af00      	add	r7, sp, #0
 800b6e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6ec:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	f003 0320 	and.w	r3, r3, #32
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d172      	bne.n	800b7e2 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800b6fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b6fe:	2200      	movs	r2, #0
 800b700:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b702:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	330c      	adds	r3, #12
 800b708:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b70a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b70c:	e853 3f00 	ldrex	r3, [r3]
 800b710:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b712:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b714:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b718:	66bb      	str	r3, [r7, #104]	; 0x68
 800b71a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	330c      	adds	r3, #12
 800b720:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b722:	65ba      	str	r2, [r7, #88]	; 0x58
 800b724:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b726:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b728:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b72a:	e841 2300 	strex	r3, r2, [r1]
 800b72e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b730:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b732:	2b00      	cmp	r3, #0
 800b734:	d1e5      	bne.n	800b702 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b736:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	3314      	adds	r3, #20
 800b73c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b73e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b740:	e853 3f00 	ldrex	r3, [r3]
 800b744:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b748:	f023 0301 	bic.w	r3, r3, #1
 800b74c:	667b      	str	r3, [r7, #100]	; 0x64
 800b74e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	3314      	adds	r3, #20
 800b754:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b756:	647a      	str	r2, [r7, #68]	; 0x44
 800b758:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b75a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b75c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b75e:	e841 2300 	strex	r3, r2, [r1]
 800b762:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b764:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b766:	2b00      	cmp	r3, #0
 800b768:	d1e5      	bne.n	800b736 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b76a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	3314      	adds	r3, #20
 800b770:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b774:	e853 3f00 	ldrex	r3, [r3]
 800b778:	623b      	str	r3, [r7, #32]
   return(result);
 800b77a:	6a3b      	ldr	r3, [r7, #32]
 800b77c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b780:	663b      	str	r3, [r7, #96]	; 0x60
 800b782:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	3314      	adds	r3, #20
 800b788:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b78a:	633a      	str	r2, [r7, #48]	; 0x30
 800b78c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b78e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b790:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b792:	e841 2300 	strex	r3, r2, [r1]
 800b796:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d1e5      	bne.n	800b76a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b79e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b7a0:	2220      	movs	r2, #32
 800b7a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b7a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b7a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7aa:	2b01      	cmp	r3, #1
 800b7ac:	d119      	bne.n	800b7e2 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b7ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	330c      	adds	r3, #12
 800b7b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7b6:	693b      	ldr	r3, [r7, #16]
 800b7b8:	e853 3f00 	ldrex	r3, [r3]
 800b7bc:	60fb      	str	r3, [r7, #12]
   return(result);
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	f023 0310 	bic.w	r3, r3, #16
 800b7c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b7c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	330c      	adds	r3, #12
 800b7cc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b7ce:	61fa      	str	r2, [r7, #28]
 800b7d0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7d2:	69b9      	ldr	r1, [r7, #24]
 800b7d4:	69fa      	ldr	r2, [r7, #28]
 800b7d6:	e841 2300 	strex	r3, r2, [r1]
 800b7da:	617b      	str	r3, [r7, #20]
   return(result);
 800b7dc:	697b      	ldr	r3, [r7, #20]
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d1e5      	bne.n	800b7ae <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b7e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b7e4:	2200      	movs	r2, #0
 800b7e6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b7e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b7ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7ec:	2b01      	cmp	r3, #1
 800b7ee:	d106      	bne.n	800b7fe <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b7f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b7f2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b7f4:	4619      	mov	r1, r3
 800b7f6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b7f8:	f7fa fb8c 	bl	8005f14 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b7fc:	e002      	b.n	800b804 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800b7fe:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b800:	f7ff ff53 	bl	800b6aa <HAL_UART_RxCpltCallback>
}
 800b804:	bf00      	nop
 800b806:	3770      	adds	r7, #112	; 0x70
 800b808:	46bd      	mov	sp, r7
 800b80a:	bd80      	pop	{r7, pc}

0800b80c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b80c:	b580      	push	{r7, lr}
 800b80e:	b084      	sub	sp, #16
 800b810:	af00      	add	r7, sp, #0
 800b812:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b818:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	2201      	movs	r2, #1
 800b81e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b824:	2b01      	cmp	r3, #1
 800b826:	d108      	bne.n	800b83a <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b82c:	085b      	lsrs	r3, r3, #1
 800b82e:	b29b      	uxth	r3, r3
 800b830:	4619      	mov	r1, r3
 800b832:	68f8      	ldr	r0, [r7, #12]
 800b834:	f7fa fb6e 	bl	8005f14 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b838:	e002      	b.n	800b840 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800b83a:	68f8      	ldr	r0, [r7, #12]
 800b83c:	f7ff ff3e 	bl	800b6bc <HAL_UART_RxHalfCpltCallback>
}
 800b840:	bf00      	nop
 800b842:	3710      	adds	r7, #16
 800b844:	46bd      	mov	sp, r7
 800b846:	bd80      	pop	{r7, pc}

0800b848 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b848:	b580      	push	{r7, lr}
 800b84a:	b084      	sub	sp, #16
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800b850:	2300      	movs	r3, #0
 800b852:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b858:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800b85a:	68bb      	ldr	r3, [r7, #8]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	695b      	ldr	r3, [r3, #20]
 800b860:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b864:	2b00      	cmp	r3, #0
 800b866:	bf14      	ite	ne
 800b868:	2301      	movne	r3, #1
 800b86a:	2300      	moveq	r3, #0
 800b86c:	b2db      	uxtb	r3, r3
 800b86e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800b870:	68bb      	ldr	r3, [r7, #8]
 800b872:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b876:	b2db      	uxtb	r3, r3
 800b878:	2b21      	cmp	r3, #33	; 0x21
 800b87a:	d108      	bne.n	800b88e <UART_DMAError+0x46>
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d005      	beq.n	800b88e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800b882:	68bb      	ldr	r3, [r7, #8]
 800b884:	2200      	movs	r2, #0
 800b886:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800b888:	68b8      	ldr	r0, [r7, #8]
 800b88a:	f000 f92f 	bl	800baec <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b88e:	68bb      	ldr	r3, [r7, #8]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	695b      	ldr	r3, [r3, #20]
 800b894:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b898:	2b00      	cmp	r3, #0
 800b89a:	bf14      	ite	ne
 800b89c:	2301      	movne	r3, #1
 800b89e:	2300      	moveq	r3, #0
 800b8a0:	b2db      	uxtb	r3, r3
 800b8a2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800b8a4:	68bb      	ldr	r3, [r7, #8]
 800b8a6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b8aa:	b2db      	uxtb	r3, r3
 800b8ac:	2b22      	cmp	r3, #34	; 0x22
 800b8ae:	d108      	bne.n	800b8c2 <UART_DMAError+0x7a>
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d005      	beq.n	800b8c2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800b8b6:	68bb      	ldr	r3, [r7, #8]
 800b8b8:	2200      	movs	r2, #0
 800b8ba:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800b8bc:	68b8      	ldr	r0, [r7, #8]
 800b8be:	f000 f93c 	bl	800bb3a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b8c2:	68bb      	ldr	r3, [r7, #8]
 800b8c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b8c6:	f043 0210 	orr.w	r2, r3, #16
 800b8ca:	68bb      	ldr	r3, [r7, #8]
 800b8cc:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b8ce:	68b8      	ldr	r0, [r7, #8]
 800b8d0:	f7ff fefd 	bl	800b6ce <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b8d4:	bf00      	nop
 800b8d6:	3710      	adds	r7, #16
 800b8d8:	46bd      	mov	sp, r7
 800b8da:	bd80      	pop	{r7, pc}

0800b8dc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800b8dc:	b580      	push	{r7, lr}
 800b8de:	b090      	sub	sp, #64	; 0x40
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	60f8      	str	r0, [r7, #12]
 800b8e4:	60b9      	str	r1, [r7, #8]
 800b8e6:	603b      	str	r3, [r7, #0]
 800b8e8:	4613      	mov	r3, r2
 800b8ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b8ec:	e050      	b.n	800b990 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b8ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b8f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8f4:	d04c      	beq.n	800b990 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800b8f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d007      	beq.n	800b90c <UART_WaitOnFlagUntilTimeout+0x30>
 800b8fc:	f7fc f9e4 	bl	8007cc8 <HAL_GetTick>
 800b900:	4602      	mov	r2, r0
 800b902:	683b      	ldr	r3, [r7, #0]
 800b904:	1ad3      	subs	r3, r2, r3
 800b906:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b908:	429a      	cmp	r2, r3
 800b90a:	d241      	bcs.n	800b990 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	330c      	adds	r3, #12
 800b912:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b916:	e853 3f00 	ldrex	r3, [r3]
 800b91a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b91c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b91e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b922:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	330c      	adds	r3, #12
 800b92a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b92c:	637a      	str	r2, [r7, #52]	; 0x34
 800b92e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b930:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b932:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b934:	e841 2300 	strex	r3, r2, [r1]
 800b938:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b93a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d1e5      	bne.n	800b90c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	3314      	adds	r3, #20
 800b946:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b948:	697b      	ldr	r3, [r7, #20]
 800b94a:	e853 3f00 	ldrex	r3, [r3]
 800b94e:	613b      	str	r3, [r7, #16]
   return(result);
 800b950:	693b      	ldr	r3, [r7, #16]
 800b952:	f023 0301 	bic.w	r3, r3, #1
 800b956:	63bb      	str	r3, [r7, #56]	; 0x38
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	3314      	adds	r3, #20
 800b95e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b960:	623a      	str	r2, [r7, #32]
 800b962:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b964:	69f9      	ldr	r1, [r7, #28]
 800b966:	6a3a      	ldr	r2, [r7, #32]
 800b968:	e841 2300 	strex	r3, r2, [r1]
 800b96c:	61bb      	str	r3, [r7, #24]
   return(result);
 800b96e:	69bb      	ldr	r3, [r7, #24]
 800b970:	2b00      	cmp	r3, #0
 800b972:	d1e5      	bne.n	800b940 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	2220      	movs	r2, #32
 800b978:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	2220      	movs	r2, #32
 800b980:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	2200      	movs	r2, #0
 800b988:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800b98c:	2303      	movs	r3, #3
 800b98e:	e00f      	b.n	800b9b0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	681a      	ldr	r2, [r3, #0]
 800b996:	68bb      	ldr	r3, [r7, #8]
 800b998:	4013      	ands	r3, r2
 800b99a:	68ba      	ldr	r2, [r7, #8]
 800b99c:	429a      	cmp	r2, r3
 800b99e:	bf0c      	ite	eq
 800b9a0:	2301      	moveq	r3, #1
 800b9a2:	2300      	movne	r3, #0
 800b9a4:	b2db      	uxtb	r3, r3
 800b9a6:	461a      	mov	r2, r3
 800b9a8:	79fb      	ldrb	r3, [r7, #7]
 800b9aa:	429a      	cmp	r2, r3
 800b9ac:	d09f      	beq.n	800b8ee <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b9ae:	2300      	movs	r3, #0
}
 800b9b0:	4618      	mov	r0, r3
 800b9b2:	3740      	adds	r7, #64	; 0x40
 800b9b4:	46bd      	mov	sp, r7
 800b9b6:	bd80      	pop	{r7, pc}

0800b9b8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b9b8:	b580      	push	{r7, lr}
 800b9ba:	b098      	sub	sp, #96	; 0x60
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	60f8      	str	r0, [r7, #12]
 800b9c0:	60b9      	str	r1, [r7, #8]
 800b9c2:	4613      	mov	r3, r2
 800b9c4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800b9c6:	68ba      	ldr	r2, [r7, #8]
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	88fa      	ldrh	r2, [r7, #6]
 800b9d0:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	2200      	movs	r2, #0
 800b9d6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	2222      	movs	r2, #34	; 0x22
 800b9dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b9e4:	4a3e      	ldr	r2, [pc, #248]	; (800bae0 <UART_Start_Receive_DMA+0x128>)
 800b9e6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b9ec:	4a3d      	ldr	r2, [pc, #244]	; (800bae4 <UART_Start_Receive_DMA+0x12c>)
 800b9ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b9f4:	4a3c      	ldr	r2, [pc, #240]	; (800bae8 <UART_Start_Receive_DMA+0x130>)
 800b9f6:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b9fc:	2200      	movs	r2, #0
 800b9fe:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800ba00:	f107 0308 	add.w	r3, r7, #8
 800ba04:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	3304      	adds	r3, #4
 800ba10:	4619      	mov	r1, r3
 800ba12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ba14:	681a      	ldr	r2, [r3, #0]
 800ba16:	88fb      	ldrh	r3, [r7, #6]
 800ba18:	f7fc feea 	bl	80087f0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800ba1c:	2300      	movs	r3, #0
 800ba1e:	613b      	str	r3, [r7, #16]
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	613b      	str	r3, [r7, #16]
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	685b      	ldr	r3, [r3, #4]
 800ba2e:	613b      	str	r3, [r7, #16]
 800ba30:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	691b      	ldr	r3, [r3, #16]
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d019      	beq.n	800ba6e <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	330c      	adds	r3, #12
 800ba40:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ba44:	e853 3f00 	ldrex	r3, [r3]
 800ba48:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ba4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ba50:	65bb      	str	r3, [r7, #88]	; 0x58
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	330c      	adds	r3, #12
 800ba58:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ba5a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800ba5c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba5e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800ba60:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ba62:	e841 2300 	strex	r3, r2, [r1]
 800ba66:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800ba68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d1e5      	bne.n	800ba3a <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	3314      	adds	r3, #20
 800ba74:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba78:	e853 3f00 	ldrex	r3, [r3]
 800ba7c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ba7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba80:	f043 0301 	orr.w	r3, r3, #1
 800ba84:	657b      	str	r3, [r7, #84]	; 0x54
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	3314      	adds	r3, #20
 800ba8c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ba8e:	63ba      	str	r2, [r7, #56]	; 0x38
 800ba90:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba92:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ba94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ba96:	e841 2300 	strex	r3, r2, [r1]
 800ba9a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ba9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d1e5      	bne.n	800ba6e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	3314      	adds	r3, #20
 800baa8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800baaa:	69bb      	ldr	r3, [r7, #24]
 800baac:	e853 3f00 	ldrex	r3, [r3]
 800bab0:	617b      	str	r3, [r7, #20]
   return(result);
 800bab2:	697b      	ldr	r3, [r7, #20]
 800bab4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bab8:	653b      	str	r3, [r7, #80]	; 0x50
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	3314      	adds	r3, #20
 800bac0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bac2:	627a      	str	r2, [r7, #36]	; 0x24
 800bac4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bac6:	6a39      	ldr	r1, [r7, #32]
 800bac8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800baca:	e841 2300 	strex	r3, r2, [r1]
 800bace:	61fb      	str	r3, [r7, #28]
   return(result);
 800bad0:	69fb      	ldr	r3, [r7, #28]
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d1e5      	bne.n	800baa2 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800bad6:	2300      	movs	r3, #0
}
 800bad8:	4618      	mov	r0, r3
 800bada:	3760      	adds	r7, #96	; 0x60
 800badc:	46bd      	mov	sp, r7
 800bade:	bd80      	pop	{r7, pc}
 800bae0:	0800b6e1 	.word	0x0800b6e1
 800bae4:	0800b80d 	.word	0x0800b80d
 800bae8:	0800b849 	.word	0x0800b849

0800baec <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800baec:	b480      	push	{r7}
 800baee:	b089      	sub	sp, #36	; 0x24
 800baf0:	af00      	add	r7, sp, #0
 800baf2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	330c      	adds	r3, #12
 800bafa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	e853 3f00 	ldrex	r3, [r3]
 800bb02:	60bb      	str	r3, [r7, #8]
   return(result);
 800bb04:	68bb      	ldr	r3, [r7, #8]
 800bb06:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800bb0a:	61fb      	str	r3, [r7, #28]
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	330c      	adds	r3, #12
 800bb12:	69fa      	ldr	r2, [r7, #28]
 800bb14:	61ba      	str	r2, [r7, #24]
 800bb16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb18:	6979      	ldr	r1, [r7, #20]
 800bb1a:	69ba      	ldr	r2, [r7, #24]
 800bb1c:	e841 2300 	strex	r3, r2, [r1]
 800bb20:	613b      	str	r3, [r7, #16]
   return(result);
 800bb22:	693b      	ldr	r3, [r7, #16]
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d1e5      	bne.n	800baf4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	2220      	movs	r2, #32
 800bb2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 800bb30:	bf00      	nop
 800bb32:	3724      	adds	r7, #36	; 0x24
 800bb34:	46bd      	mov	sp, r7
 800bb36:	bc80      	pop	{r7}
 800bb38:	4770      	bx	lr

0800bb3a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bb3a:	b480      	push	{r7}
 800bb3c:	b095      	sub	sp, #84	; 0x54
 800bb3e:	af00      	add	r7, sp, #0
 800bb40:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	330c      	adds	r3, #12
 800bb48:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb4c:	e853 3f00 	ldrex	r3, [r3]
 800bb50:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bb52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb54:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bb58:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	330c      	adds	r3, #12
 800bb60:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bb62:	643a      	str	r2, [r7, #64]	; 0x40
 800bb64:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb66:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bb68:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bb6a:	e841 2300 	strex	r3, r2, [r1]
 800bb6e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bb70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d1e5      	bne.n	800bb42 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	3314      	adds	r3, #20
 800bb7c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb7e:	6a3b      	ldr	r3, [r7, #32]
 800bb80:	e853 3f00 	ldrex	r3, [r3]
 800bb84:	61fb      	str	r3, [r7, #28]
   return(result);
 800bb86:	69fb      	ldr	r3, [r7, #28]
 800bb88:	f023 0301 	bic.w	r3, r3, #1
 800bb8c:	64bb      	str	r3, [r7, #72]	; 0x48
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	3314      	adds	r3, #20
 800bb94:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bb96:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bb98:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb9a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bb9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bb9e:	e841 2300 	strex	r3, r2, [r1]
 800bba2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d1e5      	bne.n	800bb76 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbae:	2b01      	cmp	r3, #1
 800bbb0:	d119      	bne.n	800bbe6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	330c      	adds	r3, #12
 800bbb8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	e853 3f00 	ldrex	r3, [r3]
 800bbc0:	60bb      	str	r3, [r7, #8]
   return(result);
 800bbc2:	68bb      	ldr	r3, [r7, #8]
 800bbc4:	f023 0310 	bic.w	r3, r3, #16
 800bbc8:	647b      	str	r3, [r7, #68]	; 0x44
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	330c      	adds	r3, #12
 800bbd0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bbd2:	61ba      	str	r2, [r7, #24]
 800bbd4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbd6:	6979      	ldr	r1, [r7, #20]
 800bbd8:	69ba      	ldr	r2, [r7, #24]
 800bbda:	e841 2300 	strex	r3, r2, [r1]
 800bbde:	613b      	str	r3, [r7, #16]
   return(result);
 800bbe0:	693b      	ldr	r3, [r7, #16]
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d1e5      	bne.n	800bbb2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	2220      	movs	r2, #32
 800bbea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	2200      	movs	r2, #0
 800bbf2:	631a      	str	r2, [r3, #48]	; 0x30
}
 800bbf4:	bf00      	nop
 800bbf6:	3754      	adds	r7, #84	; 0x54
 800bbf8:	46bd      	mov	sp, r7
 800bbfa:	bc80      	pop	{r7}
 800bbfc:	4770      	bx	lr

0800bbfe <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bbfe:	b580      	push	{r7, lr}
 800bc00:	b084      	sub	sp, #16
 800bc02:	af00      	add	r7, sp, #0
 800bc04:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc0a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	2200      	movs	r2, #0
 800bc10:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	2200      	movs	r2, #0
 800bc16:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bc18:	68f8      	ldr	r0, [r7, #12]
 800bc1a:	f7ff fd58 	bl	800b6ce <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bc1e:	bf00      	nop
 800bc20:	3710      	adds	r7, #16
 800bc22:	46bd      	mov	sp, r7
 800bc24:	bd80      	pop	{r7, pc}

0800bc26 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800bc26:	b480      	push	{r7}
 800bc28:	b085      	sub	sp, #20
 800bc2a:	af00      	add	r7, sp, #0
 800bc2c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bc34:	b2db      	uxtb	r3, r3
 800bc36:	2b21      	cmp	r3, #33	; 0x21
 800bc38:	d13e      	bne.n	800bcb8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	689b      	ldr	r3, [r3, #8]
 800bc3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bc42:	d114      	bne.n	800bc6e <UART_Transmit_IT+0x48>
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	691b      	ldr	r3, [r3, #16]
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d110      	bne.n	800bc6e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	6a1b      	ldr	r3, [r3, #32]
 800bc50:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	881b      	ldrh	r3, [r3, #0]
 800bc56:	461a      	mov	r2, r3
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bc60:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	6a1b      	ldr	r3, [r3, #32]
 800bc66:	1c9a      	adds	r2, r3, #2
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	621a      	str	r2, [r3, #32]
 800bc6c:	e008      	b.n	800bc80 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	6a1b      	ldr	r3, [r3, #32]
 800bc72:	1c59      	adds	r1, r3, #1
 800bc74:	687a      	ldr	r2, [r7, #4]
 800bc76:	6211      	str	r1, [r2, #32]
 800bc78:	781a      	ldrb	r2, [r3, #0]
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800bc84:	b29b      	uxth	r3, r3
 800bc86:	3b01      	subs	r3, #1
 800bc88:	b29b      	uxth	r3, r3
 800bc8a:	687a      	ldr	r2, [r7, #4]
 800bc8c:	4619      	mov	r1, r3
 800bc8e:	84d1      	strh	r1, [r2, #38]	; 0x26
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d10f      	bne.n	800bcb4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	68da      	ldr	r2, [r3, #12]
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bca2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	68da      	ldr	r2, [r3, #12]
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bcb2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800bcb4:	2300      	movs	r3, #0
 800bcb6:	e000      	b.n	800bcba <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800bcb8:	2302      	movs	r3, #2
  }
}
 800bcba:	4618      	mov	r0, r3
 800bcbc:	3714      	adds	r7, #20
 800bcbe:	46bd      	mov	sp, r7
 800bcc0:	bc80      	pop	{r7}
 800bcc2:	4770      	bx	lr

0800bcc4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bcc4:	b580      	push	{r7, lr}
 800bcc6:	b082      	sub	sp, #8
 800bcc8:	af00      	add	r7, sp, #0
 800bcca:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	68da      	ldr	r2, [r3, #12]
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bcda:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	2220      	movs	r2, #32
 800bce0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bce4:	6878      	ldr	r0, [r7, #4]
 800bce6:	f7ff fcd7 	bl	800b698 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800bcea:	2300      	movs	r3, #0
}
 800bcec:	4618      	mov	r0, r3
 800bcee:	3708      	adds	r7, #8
 800bcf0:	46bd      	mov	sp, r7
 800bcf2:	bd80      	pop	{r7, pc}

0800bcf4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800bcf4:	b580      	push	{r7, lr}
 800bcf6:	b08c      	sub	sp, #48	; 0x30
 800bcf8:	af00      	add	r7, sp, #0
 800bcfa:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bd02:	b2db      	uxtb	r3, r3
 800bd04:	2b22      	cmp	r3, #34	; 0x22
 800bd06:	f040 80ae 	bne.w	800be66 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	689b      	ldr	r3, [r3, #8]
 800bd0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bd12:	d117      	bne.n	800bd44 <UART_Receive_IT+0x50>
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	691b      	ldr	r3, [r3, #16]
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d113      	bne.n	800bd44 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800bd1c:	2300      	movs	r3, #0
 800bd1e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd24:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	685b      	ldr	r3, [r3, #4]
 800bd2c:	b29b      	uxth	r3, r3
 800bd2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd32:	b29a      	uxth	r2, r3
 800bd34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd36:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd3c:	1c9a      	adds	r2, r3, #2
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	629a      	str	r2, [r3, #40]	; 0x28
 800bd42:	e026      	b.n	800bd92 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd48:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800bd4a:	2300      	movs	r3, #0
 800bd4c:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	689b      	ldr	r3, [r3, #8]
 800bd52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bd56:	d007      	beq.n	800bd68 <UART_Receive_IT+0x74>
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	689b      	ldr	r3, [r3, #8]
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d10a      	bne.n	800bd76 <UART_Receive_IT+0x82>
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	691b      	ldr	r3, [r3, #16]
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d106      	bne.n	800bd76 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	685b      	ldr	r3, [r3, #4]
 800bd6e:	b2da      	uxtb	r2, r3
 800bd70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd72:	701a      	strb	r2, [r3, #0]
 800bd74:	e008      	b.n	800bd88 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	685b      	ldr	r3, [r3, #4]
 800bd7c:	b2db      	uxtb	r3, r3
 800bd7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bd82:	b2da      	uxtb	r2, r3
 800bd84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd86:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd8c:	1c5a      	adds	r2, r3, #1
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bd96:	b29b      	uxth	r3, r3
 800bd98:	3b01      	subs	r3, #1
 800bd9a:	b29b      	uxth	r3, r3
 800bd9c:	687a      	ldr	r2, [r7, #4]
 800bd9e:	4619      	mov	r1, r3
 800bda0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d15d      	bne.n	800be62 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	68da      	ldr	r2, [r3, #12]
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	f022 0220 	bic.w	r2, r2, #32
 800bdb4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	68da      	ldr	r2, [r3, #12]
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bdc4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	695a      	ldr	r2, [r3, #20]
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	f022 0201 	bic.w	r2, r2, #1
 800bdd4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	2220      	movs	r2, #32
 800bdda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	2200      	movs	r2, #0
 800bde2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bde8:	2b01      	cmp	r3, #1
 800bdea:	d135      	bne.n	800be58 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	2200      	movs	r2, #0
 800bdf0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	330c      	adds	r3, #12
 800bdf8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdfa:	697b      	ldr	r3, [r7, #20]
 800bdfc:	e853 3f00 	ldrex	r3, [r3]
 800be00:	613b      	str	r3, [r7, #16]
   return(result);
 800be02:	693b      	ldr	r3, [r7, #16]
 800be04:	f023 0310 	bic.w	r3, r3, #16
 800be08:	627b      	str	r3, [r7, #36]	; 0x24
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	330c      	adds	r3, #12
 800be10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be12:	623a      	str	r2, [r7, #32]
 800be14:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be16:	69f9      	ldr	r1, [r7, #28]
 800be18:	6a3a      	ldr	r2, [r7, #32]
 800be1a:	e841 2300 	strex	r3, r2, [r1]
 800be1e:	61bb      	str	r3, [r7, #24]
   return(result);
 800be20:	69bb      	ldr	r3, [r7, #24]
 800be22:	2b00      	cmp	r3, #0
 800be24:	d1e5      	bne.n	800bdf2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	f003 0310 	and.w	r3, r3, #16
 800be30:	2b10      	cmp	r3, #16
 800be32:	d10a      	bne.n	800be4a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800be34:	2300      	movs	r3, #0
 800be36:	60fb      	str	r3, [r7, #12]
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	60fb      	str	r3, [r7, #12]
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	685b      	ldr	r3, [r3, #4]
 800be46:	60fb      	str	r3, [r7, #12]
 800be48:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800be4e:	4619      	mov	r1, r3
 800be50:	6878      	ldr	r0, [r7, #4]
 800be52:	f7fa f85f 	bl	8005f14 <HAL_UARTEx_RxEventCallback>
 800be56:	e002      	b.n	800be5e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800be58:	6878      	ldr	r0, [r7, #4]
 800be5a:	f7ff fc26 	bl	800b6aa <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800be5e:	2300      	movs	r3, #0
 800be60:	e002      	b.n	800be68 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800be62:	2300      	movs	r3, #0
 800be64:	e000      	b.n	800be68 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800be66:	2302      	movs	r3, #2
  }
}
 800be68:	4618      	mov	r0, r3
 800be6a:	3730      	adds	r7, #48	; 0x30
 800be6c:	46bd      	mov	sp, r7
 800be6e:	bd80      	pop	{r7, pc}

0800be70 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800be70:	b580      	push	{r7, lr}
 800be72:	b084      	sub	sp, #16
 800be74:	af00      	add	r7, sp, #0
 800be76:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	691b      	ldr	r3, [r3, #16]
 800be7e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	68da      	ldr	r2, [r3, #12]
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	430a      	orrs	r2, r1
 800be8c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	689a      	ldr	r2, [r3, #8]
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	691b      	ldr	r3, [r3, #16]
 800be96:	431a      	orrs	r2, r3
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	695b      	ldr	r3, [r3, #20]
 800be9c:	4313      	orrs	r3, r2
 800be9e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	68db      	ldr	r3, [r3, #12]
 800bea6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800beaa:	f023 030c 	bic.w	r3, r3, #12
 800beae:	687a      	ldr	r2, [r7, #4]
 800beb0:	6812      	ldr	r2, [r2, #0]
 800beb2:	68b9      	ldr	r1, [r7, #8]
 800beb4:	430b      	orrs	r3, r1
 800beb6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	695b      	ldr	r3, [r3, #20]
 800bebe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	699a      	ldr	r2, [r3, #24]
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	430a      	orrs	r2, r1
 800becc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	4a2c      	ldr	r2, [pc, #176]	; (800bf84 <UART_SetConfig+0x114>)
 800bed4:	4293      	cmp	r3, r2
 800bed6:	d103      	bne.n	800bee0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800bed8:	f7fe fcc8 	bl	800a86c <HAL_RCC_GetPCLK2Freq>
 800bedc:	60f8      	str	r0, [r7, #12]
 800bede:	e002      	b.n	800bee6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800bee0:	f7fe fcb0 	bl	800a844 <HAL_RCC_GetPCLK1Freq>
 800bee4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800bee6:	68fa      	ldr	r2, [r7, #12]
 800bee8:	4613      	mov	r3, r2
 800beea:	009b      	lsls	r3, r3, #2
 800beec:	4413      	add	r3, r2
 800beee:	009a      	lsls	r2, r3, #2
 800bef0:	441a      	add	r2, r3
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	685b      	ldr	r3, [r3, #4]
 800bef6:	009b      	lsls	r3, r3, #2
 800bef8:	fbb2 f3f3 	udiv	r3, r2, r3
 800befc:	4a22      	ldr	r2, [pc, #136]	; (800bf88 <UART_SetConfig+0x118>)
 800befe:	fba2 2303 	umull	r2, r3, r2, r3
 800bf02:	095b      	lsrs	r3, r3, #5
 800bf04:	0119      	lsls	r1, r3, #4
 800bf06:	68fa      	ldr	r2, [r7, #12]
 800bf08:	4613      	mov	r3, r2
 800bf0a:	009b      	lsls	r3, r3, #2
 800bf0c:	4413      	add	r3, r2
 800bf0e:	009a      	lsls	r2, r3, #2
 800bf10:	441a      	add	r2, r3
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	685b      	ldr	r3, [r3, #4]
 800bf16:	009b      	lsls	r3, r3, #2
 800bf18:	fbb2 f2f3 	udiv	r2, r2, r3
 800bf1c:	4b1a      	ldr	r3, [pc, #104]	; (800bf88 <UART_SetConfig+0x118>)
 800bf1e:	fba3 0302 	umull	r0, r3, r3, r2
 800bf22:	095b      	lsrs	r3, r3, #5
 800bf24:	2064      	movs	r0, #100	; 0x64
 800bf26:	fb00 f303 	mul.w	r3, r0, r3
 800bf2a:	1ad3      	subs	r3, r2, r3
 800bf2c:	011b      	lsls	r3, r3, #4
 800bf2e:	3332      	adds	r3, #50	; 0x32
 800bf30:	4a15      	ldr	r2, [pc, #84]	; (800bf88 <UART_SetConfig+0x118>)
 800bf32:	fba2 2303 	umull	r2, r3, r2, r3
 800bf36:	095b      	lsrs	r3, r3, #5
 800bf38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bf3c:	4419      	add	r1, r3
 800bf3e:	68fa      	ldr	r2, [r7, #12]
 800bf40:	4613      	mov	r3, r2
 800bf42:	009b      	lsls	r3, r3, #2
 800bf44:	4413      	add	r3, r2
 800bf46:	009a      	lsls	r2, r3, #2
 800bf48:	441a      	add	r2, r3
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	685b      	ldr	r3, [r3, #4]
 800bf4e:	009b      	lsls	r3, r3, #2
 800bf50:	fbb2 f2f3 	udiv	r2, r2, r3
 800bf54:	4b0c      	ldr	r3, [pc, #48]	; (800bf88 <UART_SetConfig+0x118>)
 800bf56:	fba3 0302 	umull	r0, r3, r3, r2
 800bf5a:	095b      	lsrs	r3, r3, #5
 800bf5c:	2064      	movs	r0, #100	; 0x64
 800bf5e:	fb00 f303 	mul.w	r3, r0, r3
 800bf62:	1ad3      	subs	r3, r2, r3
 800bf64:	011b      	lsls	r3, r3, #4
 800bf66:	3332      	adds	r3, #50	; 0x32
 800bf68:	4a07      	ldr	r2, [pc, #28]	; (800bf88 <UART_SetConfig+0x118>)
 800bf6a:	fba2 2303 	umull	r2, r3, r2, r3
 800bf6e:	095b      	lsrs	r3, r3, #5
 800bf70:	f003 020f 	and.w	r2, r3, #15
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	440a      	add	r2, r1
 800bf7a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800bf7c:	bf00      	nop
 800bf7e:	3710      	adds	r7, #16
 800bf80:	46bd      	mov	sp, r7
 800bf82:	bd80      	pop	{r7, pc}
 800bf84:	40013800 	.word	0x40013800
 800bf88:	51eb851f 	.word	0x51eb851f

0800bf8c <atoi>:
 800bf8c:	220a      	movs	r2, #10
 800bf8e:	2100      	movs	r1, #0
 800bf90:	f000 be06 	b.w	800cba0 <strtol>

0800bf94 <__errno>:
 800bf94:	4b01      	ldr	r3, [pc, #4]	; (800bf9c <__errno+0x8>)
 800bf96:	6818      	ldr	r0, [r3, #0]
 800bf98:	4770      	bx	lr
 800bf9a:	bf00      	nop
 800bf9c:	200004e4 	.word	0x200004e4

0800bfa0 <__libc_init_array>:
 800bfa0:	b570      	push	{r4, r5, r6, lr}
 800bfa2:	2600      	movs	r6, #0
 800bfa4:	4d0c      	ldr	r5, [pc, #48]	; (800bfd8 <__libc_init_array+0x38>)
 800bfa6:	4c0d      	ldr	r4, [pc, #52]	; (800bfdc <__libc_init_array+0x3c>)
 800bfa8:	1b64      	subs	r4, r4, r5
 800bfaa:	10a4      	asrs	r4, r4, #2
 800bfac:	42a6      	cmp	r6, r4
 800bfae:	d109      	bne.n	800bfc4 <__libc_init_array+0x24>
 800bfb0:	f002 fe6e 	bl	800ec90 <_init>
 800bfb4:	2600      	movs	r6, #0
 800bfb6:	4d0a      	ldr	r5, [pc, #40]	; (800bfe0 <__libc_init_array+0x40>)
 800bfb8:	4c0a      	ldr	r4, [pc, #40]	; (800bfe4 <__libc_init_array+0x44>)
 800bfba:	1b64      	subs	r4, r4, r5
 800bfbc:	10a4      	asrs	r4, r4, #2
 800bfbe:	42a6      	cmp	r6, r4
 800bfc0:	d105      	bne.n	800bfce <__libc_init_array+0x2e>
 800bfc2:	bd70      	pop	{r4, r5, r6, pc}
 800bfc4:	f855 3b04 	ldr.w	r3, [r5], #4
 800bfc8:	4798      	blx	r3
 800bfca:	3601      	adds	r6, #1
 800bfcc:	e7ee      	b.n	800bfac <__libc_init_array+0xc>
 800bfce:	f855 3b04 	ldr.w	r3, [r5], #4
 800bfd2:	4798      	blx	r3
 800bfd4:	3601      	adds	r6, #1
 800bfd6:	e7f2      	b.n	800bfbe <__libc_init_array+0x1e>
 800bfd8:	0800fa08 	.word	0x0800fa08
 800bfdc:	0800fa08 	.word	0x0800fa08
 800bfe0:	0800fa08 	.word	0x0800fa08
 800bfe4:	0800fa0c 	.word	0x0800fa0c

0800bfe8 <localtime>:
 800bfe8:	b538      	push	{r3, r4, r5, lr}
 800bfea:	4b0b      	ldr	r3, [pc, #44]	; (800c018 <localtime+0x30>)
 800bfec:	4604      	mov	r4, r0
 800bfee:	681d      	ldr	r5, [r3, #0]
 800bff0:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800bff2:	b953      	cbnz	r3, 800c00a <localtime+0x22>
 800bff4:	2024      	movs	r0, #36	; 0x24
 800bff6:	f000 f907 	bl	800c208 <malloc>
 800bffa:	4602      	mov	r2, r0
 800bffc:	63e8      	str	r0, [r5, #60]	; 0x3c
 800bffe:	b920      	cbnz	r0, 800c00a <localtime+0x22>
 800c000:	2132      	movs	r1, #50	; 0x32
 800c002:	4b06      	ldr	r3, [pc, #24]	; (800c01c <localtime+0x34>)
 800c004:	4806      	ldr	r0, [pc, #24]	; (800c020 <localtime+0x38>)
 800c006:	f001 f813 	bl	800d030 <__assert_func>
 800c00a:	4620      	mov	r0, r4
 800c00c:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 800c00e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c012:	f000 b807 	b.w	800c024 <localtime_r>
 800c016:	bf00      	nop
 800c018:	200004e4 	.word	0x200004e4
 800c01c:	0800f5ec 	.word	0x0800f5ec
 800c020:	0800f603 	.word	0x0800f603

0800c024 <localtime_r>:
 800c024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c028:	460c      	mov	r4, r1
 800c02a:	4680      	mov	r8, r0
 800c02c:	f001 f888 	bl	800d140 <__gettzinfo>
 800c030:	4621      	mov	r1, r4
 800c032:	4605      	mov	r5, r0
 800c034:	4640      	mov	r0, r8
 800c036:	f001 f887 	bl	800d148 <gmtime_r>
 800c03a:	6943      	ldr	r3, [r0, #20]
 800c03c:	4604      	mov	r4, r0
 800c03e:	0799      	lsls	r1, r3, #30
 800c040:	f203 776c 	addw	r7, r3, #1900	; 0x76c
 800c044:	d105      	bne.n	800c052 <localtime_r+0x2e>
 800c046:	2264      	movs	r2, #100	; 0x64
 800c048:	fb97 f3f2 	sdiv	r3, r7, r2
 800c04c:	fb02 7313 	mls	r3, r2, r3, r7
 800c050:	bb73      	cbnz	r3, 800c0b0 <localtime_r+0x8c>
 800c052:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800c056:	fb97 f6f3 	sdiv	r6, r7, r3
 800c05a:	fb03 7616 	mls	r6, r3, r6, r7
 800c05e:	fab6 f386 	clz	r3, r6
 800c062:	095b      	lsrs	r3, r3, #5
 800c064:	2230      	movs	r2, #48	; 0x30
 800c066:	4e66      	ldr	r6, [pc, #408]	; (800c200 <localtime_r+0x1dc>)
 800c068:	fb02 6603 	mla	r6, r2, r3, r6
 800c06c:	f000 fe4c 	bl	800cd08 <__tz_lock>
 800c070:	f000 fe56 	bl	800cd20 <_tzset_unlocked>
 800c074:	4b63      	ldr	r3, [pc, #396]	; (800c204 <localtime_r+0x1e0>)
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	b34b      	cbz	r3, 800c0ce <localtime_r+0xaa>
 800c07a:	686b      	ldr	r3, [r5, #4]
 800c07c:	42bb      	cmp	r3, r7
 800c07e:	d119      	bne.n	800c0b4 <localtime_r+0x90>
 800c080:	e9d8 2300 	ldrd	r2, r3, [r8]
 800c084:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 800c088:	682f      	ldr	r7, [r5, #0]
 800c08a:	b9df      	cbnz	r7, 800c0c4 <localtime_r+0xa0>
 800c08c:	4282      	cmp	r2, r0
 800c08e:	eb73 0101 	sbcs.w	r1, r3, r1
 800c092:	da23      	bge.n	800c0dc <localtime_r+0xb8>
 800c094:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
 800c098:	4282      	cmp	r2, r0
 800c09a:	eb73 0701 	sbcs.w	r7, r3, r1
 800c09e:	bfb4      	ite	lt
 800c0a0:	2701      	movlt	r7, #1
 800c0a2:	2700      	movge	r7, #0
 800c0a4:	4282      	cmp	r2, r0
 800c0a6:	418b      	sbcs	r3, r1
 800c0a8:	6227      	str	r7, [r4, #32]
 800c0aa:	db19      	blt.n	800c0e0 <localtime_r+0xbc>
 800c0ac:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800c0ae:	e018      	b.n	800c0e2 <localtime_r+0xbe>
 800c0b0:	2301      	movs	r3, #1
 800c0b2:	e7d7      	b.n	800c064 <localtime_r+0x40>
 800c0b4:	4638      	mov	r0, r7
 800c0b6:	f000 fd7d 	bl	800cbb4 <__tzcalc_limits>
 800c0ba:	2800      	cmp	r0, #0
 800c0bc:	d1e0      	bne.n	800c080 <localtime_r+0x5c>
 800c0be:	f04f 33ff 	mov.w	r3, #4294967295
 800c0c2:	e004      	b.n	800c0ce <localtime_r+0xaa>
 800c0c4:	4282      	cmp	r2, r0
 800c0c6:	eb73 0101 	sbcs.w	r1, r3, r1
 800c0ca:	da02      	bge.n	800c0d2 <localtime_r+0xae>
 800c0cc:	2300      	movs	r3, #0
 800c0ce:	6223      	str	r3, [r4, #32]
 800c0d0:	e7ec      	b.n	800c0ac <localtime_r+0x88>
 800c0d2:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
 800c0d6:	4282      	cmp	r2, r0
 800c0d8:	418b      	sbcs	r3, r1
 800c0da:	daf7      	bge.n	800c0cc <localtime_r+0xa8>
 800c0dc:	2301      	movs	r3, #1
 800c0de:	6223      	str	r3, [r4, #32]
 800c0e0:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800c0e2:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 800c0e6:	fb93 f5f2 	sdiv	r5, r3, r2
 800c0ea:	203c      	movs	r0, #60	; 0x3c
 800c0ec:	fb02 3315 	mls	r3, r2, r5, r3
 800c0f0:	fb93 f2f0 	sdiv	r2, r3, r0
 800c0f4:	fb00 3012 	mls	r0, r0, r2, r3
 800c0f8:	6861      	ldr	r1, [r4, #4]
 800c0fa:	6823      	ldr	r3, [r4, #0]
 800c0fc:	1a89      	subs	r1, r1, r2
 800c0fe:	68a2      	ldr	r2, [r4, #8]
 800c100:	1a1b      	subs	r3, r3, r0
 800c102:	1b52      	subs	r2, r2, r5
 800c104:	2b3b      	cmp	r3, #59	; 0x3b
 800c106:	6023      	str	r3, [r4, #0]
 800c108:	6061      	str	r1, [r4, #4]
 800c10a:	60a2      	str	r2, [r4, #8]
 800c10c:	dd34      	ble.n	800c178 <localtime_r+0x154>
 800c10e:	3101      	adds	r1, #1
 800c110:	6061      	str	r1, [r4, #4]
 800c112:	3b3c      	subs	r3, #60	; 0x3c
 800c114:	6023      	str	r3, [r4, #0]
 800c116:	6863      	ldr	r3, [r4, #4]
 800c118:	2b3b      	cmp	r3, #59	; 0x3b
 800c11a:	dd33      	ble.n	800c184 <localtime_r+0x160>
 800c11c:	3201      	adds	r2, #1
 800c11e:	60a2      	str	r2, [r4, #8]
 800c120:	3b3c      	subs	r3, #60	; 0x3c
 800c122:	6063      	str	r3, [r4, #4]
 800c124:	68a3      	ldr	r3, [r4, #8]
 800c126:	2b17      	cmp	r3, #23
 800c128:	dd32      	ble.n	800c190 <localtime_r+0x16c>
 800c12a:	69e2      	ldr	r2, [r4, #28]
 800c12c:	3b18      	subs	r3, #24
 800c12e:	3201      	adds	r2, #1
 800c130:	61e2      	str	r2, [r4, #28]
 800c132:	69a2      	ldr	r2, [r4, #24]
 800c134:	60a3      	str	r3, [r4, #8]
 800c136:	3201      	adds	r2, #1
 800c138:	2a06      	cmp	r2, #6
 800c13a:	bfc8      	it	gt
 800c13c:	2200      	movgt	r2, #0
 800c13e:	61a2      	str	r2, [r4, #24]
 800c140:	68e2      	ldr	r2, [r4, #12]
 800c142:	6923      	ldr	r3, [r4, #16]
 800c144:	3201      	adds	r2, #1
 800c146:	60e2      	str	r2, [r4, #12]
 800c148:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 800c14c:	428a      	cmp	r2, r1
 800c14e:	dd0e      	ble.n	800c16e <localtime_r+0x14a>
 800c150:	2b0b      	cmp	r3, #11
 800c152:	eba2 0201 	sub.w	r2, r2, r1
 800c156:	60e2      	str	r2, [r4, #12]
 800c158:	f103 0201 	add.w	r2, r3, #1
 800c15c:	bf05      	ittet	eq
 800c15e:	2200      	moveq	r2, #0
 800c160:	6963      	ldreq	r3, [r4, #20]
 800c162:	6122      	strne	r2, [r4, #16]
 800c164:	3301      	addeq	r3, #1
 800c166:	bf02      	ittt	eq
 800c168:	6122      	streq	r2, [r4, #16]
 800c16a:	6163      	streq	r3, [r4, #20]
 800c16c:	61e2      	streq	r2, [r4, #28]
 800c16e:	f000 fdd1 	bl	800cd14 <__tz_unlock>
 800c172:	4620      	mov	r0, r4
 800c174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c178:	2b00      	cmp	r3, #0
 800c17a:	dacc      	bge.n	800c116 <localtime_r+0xf2>
 800c17c:	3901      	subs	r1, #1
 800c17e:	6061      	str	r1, [r4, #4]
 800c180:	333c      	adds	r3, #60	; 0x3c
 800c182:	e7c7      	b.n	800c114 <localtime_r+0xf0>
 800c184:	2b00      	cmp	r3, #0
 800c186:	dacd      	bge.n	800c124 <localtime_r+0x100>
 800c188:	3a01      	subs	r2, #1
 800c18a:	60a2      	str	r2, [r4, #8]
 800c18c:	333c      	adds	r3, #60	; 0x3c
 800c18e:	e7c8      	b.n	800c122 <localtime_r+0xfe>
 800c190:	2b00      	cmp	r3, #0
 800c192:	daec      	bge.n	800c16e <localtime_r+0x14a>
 800c194:	69e2      	ldr	r2, [r4, #28]
 800c196:	3318      	adds	r3, #24
 800c198:	3a01      	subs	r2, #1
 800c19a:	61e2      	str	r2, [r4, #28]
 800c19c:	69a2      	ldr	r2, [r4, #24]
 800c19e:	60a3      	str	r3, [r4, #8]
 800c1a0:	3a01      	subs	r2, #1
 800c1a2:	bf48      	it	mi
 800c1a4:	2206      	movmi	r2, #6
 800c1a6:	61a2      	str	r2, [r4, #24]
 800c1a8:	68e2      	ldr	r2, [r4, #12]
 800c1aa:	3a01      	subs	r2, #1
 800c1ac:	60e2      	str	r2, [r4, #12]
 800c1ae:	2a00      	cmp	r2, #0
 800c1b0:	d1dd      	bne.n	800c16e <localtime_r+0x14a>
 800c1b2:	6923      	ldr	r3, [r4, #16]
 800c1b4:	3b01      	subs	r3, #1
 800c1b6:	d405      	bmi.n	800c1c4 <localtime_r+0x1a0>
 800c1b8:	6123      	str	r3, [r4, #16]
 800c1ba:	6923      	ldr	r3, [r4, #16]
 800c1bc:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 800c1c0:	60e3      	str	r3, [r4, #12]
 800c1c2:	e7d4      	b.n	800c16e <localtime_r+0x14a>
 800c1c4:	230b      	movs	r3, #11
 800c1c6:	6123      	str	r3, [r4, #16]
 800c1c8:	6963      	ldr	r3, [r4, #20]
 800c1ca:	1e5a      	subs	r2, r3, #1
 800c1cc:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 800c1d0:	6162      	str	r2, [r4, #20]
 800c1d2:	079a      	lsls	r2, r3, #30
 800c1d4:	d105      	bne.n	800c1e2 <localtime_r+0x1be>
 800c1d6:	2164      	movs	r1, #100	; 0x64
 800c1d8:	fb93 f2f1 	sdiv	r2, r3, r1
 800c1dc:	fb01 3212 	mls	r2, r1, r2, r3
 800c1e0:	b962      	cbnz	r2, 800c1fc <localtime_r+0x1d8>
 800c1e2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800c1e6:	fb93 f1f2 	sdiv	r1, r3, r2
 800c1ea:	fb02 3311 	mls	r3, r2, r1, r3
 800c1ee:	fab3 f383 	clz	r3, r3
 800c1f2:	095b      	lsrs	r3, r3, #5
 800c1f4:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 800c1f8:	61e3      	str	r3, [r4, #28]
 800c1fa:	e7de      	b.n	800c1ba <localtime_r+0x196>
 800c1fc:	2301      	movs	r3, #1
 800c1fe:	e7f9      	b.n	800c1f4 <localtime_r+0x1d0>
 800c200:	0800f6c0 	.word	0x0800f6c0
 800c204:	20002c38 	.word	0x20002c38

0800c208 <malloc>:
 800c208:	4b02      	ldr	r3, [pc, #8]	; (800c214 <malloc+0xc>)
 800c20a:	4601      	mov	r1, r0
 800c20c:	6818      	ldr	r0, [r3, #0]
 800c20e:	f000 bb0b 	b.w	800c828 <_malloc_r>
 800c212:	bf00      	nop
 800c214:	200004e4 	.word	0x200004e4

0800c218 <free>:
 800c218:	4b02      	ldr	r3, [pc, #8]	; (800c224 <free+0xc>)
 800c21a:	4601      	mov	r1, r0
 800c21c:	6818      	ldr	r0, [r3, #0]
 800c21e:	f000 ba9b 	b.w	800c758 <_free_r>
 800c222:	bf00      	nop
 800c224:	200004e4 	.word	0x200004e4

0800c228 <memcmp>:
 800c228:	b510      	push	{r4, lr}
 800c22a:	3901      	subs	r1, #1
 800c22c:	4402      	add	r2, r0
 800c22e:	4290      	cmp	r0, r2
 800c230:	d101      	bne.n	800c236 <memcmp+0xe>
 800c232:	2000      	movs	r0, #0
 800c234:	e005      	b.n	800c242 <memcmp+0x1a>
 800c236:	7803      	ldrb	r3, [r0, #0]
 800c238:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c23c:	42a3      	cmp	r3, r4
 800c23e:	d001      	beq.n	800c244 <memcmp+0x1c>
 800c240:	1b18      	subs	r0, r3, r4
 800c242:	bd10      	pop	{r4, pc}
 800c244:	3001      	adds	r0, #1
 800c246:	e7f2      	b.n	800c22e <memcmp+0x6>

0800c248 <memcpy>:
 800c248:	440a      	add	r2, r1
 800c24a:	4291      	cmp	r1, r2
 800c24c:	f100 33ff 	add.w	r3, r0, #4294967295
 800c250:	d100      	bne.n	800c254 <memcpy+0xc>
 800c252:	4770      	bx	lr
 800c254:	b510      	push	{r4, lr}
 800c256:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c25a:	4291      	cmp	r1, r2
 800c25c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c260:	d1f9      	bne.n	800c256 <memcpy+0xe>
 800c262:	bd10      	pop	{r4, pc}

0800c264 <memset>:
 800c264:	4603      	mov	r3, r0
 800c266:	4402      	add	r2, r0
 800c268:	4293      	cmp	r3, r2
 800c26a:	d100      	bne.n	800c26e <memset+0xa>
 800c26c:	4770      	bx	lr
 800c26e:	f803 1b01 	strb.w	r1, [r3], #1
 800c272:	e7f9      	b.n	800c268 <memset+0x4>

0800c274 <validate_structure>:
 800c274:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c276:	6801      	ldr	r1, [r0, #0]
 800c278:	4604      	mov	r4, r0
 800c27a:	293b      	cmp	r1, #59	; 0x3b
 800c27c:	d911      	bls.n	800c2a2 <validate_structure+0x2e>
 800c27e:	223c      	movs	r2, #60	; 0x3c
 800c280:	4668      	mov	r0, sp
 800c282:	f000 fef3 	bl	800d06c <div>
 800c286:	9a01      	ldr	r2, [sp, #4]
 800c288:	6863      	ldr	r3, [r4, #4]
 800c28a:	9900      	ldr	r1, [sp, #0]
 800c28c:	2a00      	cmp	r2, #0
 800c28e:	440b      	add	r3, r1
 800c290:	6063      	str	r3, [r4, #4]
 800c292:	bfbb      	ittet	lt
 800c294:	323c      	addlt	r2, #60	; 0x3c
 800c296:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800c29a:	6022      	strge	r2, [r4, #0]
 800c29c:	6022      	strlt	r2, [r4, #0]
 800c29e:	bfb8      	it	lt
 800c2a0:	6063      	strlt	r3, [r4, #4]
 800c2a2:	6861      	ldr	r1, [r4, #4]
 800c2a4:	293b      	cmp	r1, #59	; 0x3b
 800c2a6:	d911      	bls.n	800c2cc <validate_structure+0x58>
 800c2a8:	223c      	movs	r2, #60	; 0x3c
 800c2aa:	4668      	mov	r0, sp
 800c2ac:	f000 fede 	bl	800d06c <div>
 800c2b0:	9a01      	ldr	r2, [sp, #4]
 800c2b2:	68a3      	ldr	r3, [r4, #8]
 800c2b4:	9900      	ldr	r1, [sp, #0]
 800c2b6:	2a00      	cmp	r2, #0
 800c2b8:	440b      	add	r3, r1
 800c2ba:	60a3      	str	r3, [r4, #8]
 800c2bc:	bfbb      	ittet	lt
 800c2be:	323c      	addlt	r2, #60	; 0x3c
 800c2c0:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800c2c4:	6062      	strge	r2, [r4, #4]
 800c2c6:	6062      	strlt	r2, [r4, #4]
 800c2c8:	bfb8      	it	lt
 800c2ca:	60a3      	strlt	r3, [r4, #8]
 800c2cc:	68a1      	ldr	r1, [r4, #8]
 800c2ce:	2917      	cmp	r1, #23
 800c2d0:	d911      	bls.n	800c2f6 <validate_structure+0x82>
 800c2d2:	2218      	movs	r2, #24
 800c2d4:	4668      	mov	r0, sp
 800c2d6:	f000 fec9 	bl	800d06c <div>
 800c2da:	9a01      	ldr	r2, [sp, #4]
 800c2dc:	68e3      	ldr	r3, [r4, #12]
 800c2de:	9900      	ldr	r1, [sp, #0]
 800c2e0:	2a00      	cmp	r2, #0
 800c2e2:	440b      	add	r3, r1
 800c2e4:	60e3      	str	r3, [r4, #12]
 800c2e6:	bfbb      	ittet	lt
 800c2e8:	3218      	addlt	r2, #24
 800c2ea:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800c2ee:	60a2      	strge	r2, [r4, #8]
 800c2f0:	60a2      	strlt	r2, [r4, #8]
 800c2f2:	bfb8      	it	lt
 800c2f4:	60e3      	strlt	r3, [r4, #12]
 800c2f6:	6921      	ldr	r1, [r4, #16]
 800c2f8:	290b      	cmp	r1, #11
 800c2fa:	d911      	bls.n	800c320 <validate_structure+0xac>
 800c2fc:	220c      	movs	r2, #12
 800c2fe:	4668      	mov	r0, sp
 800c300:	f000 feb4 	bl	800d06c <div>
 800c304:	9a01      	ldr	r2, [sp, #4]
 800c306:	6963      	ldr	r3, [r4, #20]
 800c308:	9900      	ldr	r1, [sp, #0]
 800c30a:	2a00      	cmp	r2, #0
 800c30c:	440b      	add	r3, r1
 800c30e:	6163      	str	r3, [r4, #20]
 800c310:	bfbb      	ittet	lt
 800c312:	320c      	addlt	r2, #12
 800c314:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800c318:	6122      	strge	r2, [r4, #16]
 800c31a:	6122      	strlt	r2, [r4, #16]
 800c31c:	bfb8      	it	lt
 800c31e:	6163      	strlt	r3, [r4, #20]
 800c320:	6963      	ldr	r3, [r4, #20]
 800c322:	0798      	lsls	r0, r3, #30
 800c324:	d120      	bne.n	800c368 <validate_structure+0xf4>
 800c326:	2164      	movs	r1, #100	; 0x64
 800c328:	fb93 f2f1 	sdiv	r2, r3, r1
 800c32c:	fb01 3212 	mls	r2, r1, r2, r3
 800c330:	b9e2      	cbnz	r2, 800c36c <validate_structure+0xf8>
 800c332:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800c336:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 800c33a:	fb93 f1f2 	sdiv	r1, r3, r2
 800c33e:	fb02 3311 	mls	r3, r2, r1, r3
 800c342:	2b00      	cmp	r3, #0
 800c344:	bf14      	ite	ne
 800c346:	231c      	movne	r3, #28
 800c348:	231d      	moveq	r3, #29
 800c34a:	68e2      	ldr	r2, [r4, #12]
 800c34c:	2a00      	cmp	r2, #0
 800c34e:	dc0f      	bgt.n	800c370 <validate_structure+0xfc>
 800c350:	260b      	movs	r6, #11
 800c352:	2064      	movs	r0, #100	; 0x64
 800c354:	f44f 75c8 	mov.w	r5, #400	; 0x190
 800c358:	4f31      	ldr	r7, [pc, #196]	; (800c420 <validate_structure+0x1ac>)
 800c35a:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 800c35e:	f1bc 0f00 	cmp.w	ip, #0
 800c362:	dd31      	ble.n	800c3c8 <validate_structure+0x154>
 800c364:	b003      	add	sp, #12
 800c366:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c368:	231c      	movs	r3, #28
 800c36a:	e7ee      	b.n	800c34a <validate_structure+0xd6>
 800c36c:	231d      	movs	r3, #29
 800c36e:	e7ec      	b.n	800c34a <validate_structure+0xd6>
 800c370:	2700      	movs	r7, #0
 800c372:	2064      	movs	r0, #100	; 0x64
 800c374:	f44f 75c8 	mov.w	r5, #400	; 0x190
 800c378:	4e29      	ldr	r6, [pc, #164]	; (800c420 <validate_structure+0x1ac>)
 800c37a:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 800c37e:	2a01      	cmp	r2, #1
 800c380:	bf0c      	ite	eq
 800c382:	469c      	moveq	ip, r3
 800c384:	f856 c022 	ldrne.w	ip, [r6, r2, lsl #2]
 800c388:	4561      	cmp	r1, ip
 800c38a:	ddeb      	ble.n	800c364 <validate_structure+0xf0>
 800c38c:	3201      	adds	r2, #1
 800c38e:	eba1 010c 	sub.w	r1, r1, ip
 800c392:	2a0c      	cmp	r2, #12
 800c394:	60e1      	str	r1, [r4, #12]
 800c396:	6122      	str	r2, [r4, #16]
 800c398:	d1ef      	bne.n	800c37a <validate_structure+0x106>
 800c39a:	6963      	ldr	r3, [r4, #20]
 800c39c:	1c5a      	adds	r2, r3, #1
 800c39e:	0791      	lsls	r1, r2, #30
 800c3a0:	e9c4 7204 	strd	r7, r2, [r4, #16]
 800c3a4:	d137      	bne.n	800c416 <validate_structure+0x1a2>
 800c3a6:	fb92 f1f0 	sdiv	r1, r2, r0
 800c3aa:	fb00 2211 	mls	r2, r0, r1, r2
 800c3ae:	2a00      	cmp	r2, #0
 800c3b0:	d133      	bne.n	800c41a <validate_structure+0x1a6>
 800c3b2:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 800c3b6:	fb93 f2f5 	sdiv	r2, r3, r5
 800c3ba:	fb05 3312 	mls	r3, r5, r2, r3
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	bf14      	ite	ne
 800c3c2:	231c      	movne	r3, #28
 800c3c4:	231d      	moveq	r3, #29
 800c3c6:	e7d8      	b.n	800c37a <validate_structure+0x106>
 800c3c8:	6921      	ldr	r1, [r4, #16]
 800c3ca:	3901      	subs	r1, #1
 800c3cc:	6121      	str	r1, [r4, #16]
 800c3ce:	3101      	adds	r1, #1
 800c3d0:	d114      	bne.n	800c3fc <validate_structure+0x188>
 800c3d2:	6963      	ldr	r3, [r4, #20]
 800c3d4:	1e5a      	subs	r2, r3, #1
 800c3d6:	0791      	lsls	r1, r2, #30
 800c3d8:	e9c4 6204 	strd	r6, r2, [r4, #16]
 800c3dc:	d117      	bne.n	800c40e <validate_structure+0x19a>
 800c3de:	fb92 f1f0 	sdiv	r1, r2, r0
 800c3e2:	fb00 2211 	mls	r2, r0, r1, r2
 800c3e6:	b9a2      	cbnz	r2, 800c412 <validate_structure+0x19e>
 800c3e8:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 800c3ec:	fb93 f2f5 	sdiv	r2, r3, r5
 800c3f0:	fb05 3312 	mls	r3, r5, r2, r3
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	bf14      	ite	ne
 800c3f8:	231c      	movne	r3, #28
 800c3fa:	231d      	moveq	r3, #29
 800c3fc:	6922      	ldr	r2, [r4, #16]
 800c3fe:	2a01      	cmp	r2, #1
 800c400:	bf0c      	ite	eq
 800c402:	461a      	moveq	r2, r3
 800c404:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 800c408:	4462      	add	r2, ip
 800c40a:	60e2      	str	r2, [r4, #12]
 800c40c:	e7a5      	b.n	800c35a <validate_structure+0xe6>
 800c40e:	231c      	movs	r3, #28
 800c410:	e7f4      	b.n	800c3fc <validate_structure+0x188>
 800c412:	231d      	movs	r3, #29
 800c414:	e7f2      	b.n	800c3fc <validate_structure+0x188>
 800c416:	231c      	movs	r3, #28
 800c418:	e7af      	b.n	800c37a <validate_structure+0x106>
 800c41a:	231d      	movs	r3, #29
 800c41c:	e7ad      	b.n	800c37a <validate_structure+0x106>
 800c41e:	bf00      	nop
 800c420:	0800f660 	.word	0x0800f660

0800c424 <mktime>:
 800c424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c428:	b085      	sub	sp, #20
 800c42a:	4607      	mov	r7, r0
 800c42c:	f000 fe88 	bl	800d140 <__gettzinfo>
 800c430:	4681      	mov	r9, r0
 800c432:	4638      	mov	r0, r7
 800c434:	f7ff ff1e 	bl	800c274 <validate_structure>
 800c438:	e9d7 4000 	ldrd	r4, r0, [r7]
 800c43c:	233c      	movs	r3, #60	; 0x3c
 800c43e:	fb03 4400 	mla	r4, r3, r0, r4
 800c442:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800c446:	68b8      	ldr	r0, [r7, #8]
 800c448:	4abc      	ldr	r2, [pc, #752]	; (800c73c <mktime+0x318>)
 800c44a:	fb03 4400 	mla	r4, r3, r0, r4
 800c44e:	e9d7 5303 	ldrd	r5, r3, [r7, #12]
 800c452:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800c456:	3d01      	subs	r5, #1
 800c458:	2b01      	cmp	r3, #1
 800c45a:	697e      	ldr	r6, [r7, #20]
 800c45c:	4415      	add	r5, r2
 800c45e:	dd11      	ble.n	800c484 <mktime+0x60>
 800c460:	07b1      	lsls	r1, r6, #30
 800c462:	d10f      	bne.n	800c484 <mktime+0x60>
 800c464:	2264      	movs	r2, #100	; 0x64
 800c466:	fb96 f3f2 	sdiv	r3, r6, r2
 800c46a:	fb02 6313 	mls	r3, r2, r3, r6
 800c46e:	b943      	cbnz	r3, 800c482 <mktime+0x5e>
 800c470:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800c474:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 800c478:	fb93 f1f2 	sdiv	r1, r3, r2
 800c47c:	fb02 3311 	mls	r3, r2, r1, r3
 800c480:	b903      	cbnz	r3, 800c484 <mktime+0x60>
 800c482:	3501      	adds	r5, #1
 800c484:	f644 6220 	movw	r2, #20000	; 0x4e20
 800c488:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
 800c48c:	3310      	adds	r3, #16
 800c48e:	4293      	cmp	r3, r2
 800c490:	61fd      	str	r5, [r7, #28]
 800c492:	f200 815c 	bhi.w	800c74e <mktime+0x32a>
 800c496:	2e46      	cmp	r6, #70	; 0x46
 800c498:	dd71      	ble.n	800c57e <mktime+0x15a>
 800c49a:	2346      	movs	r3, #70	; 0x46
 800c49c:	f240 1c6d 	movw	ip, #365	; 0x16d
 800c4a0:	2164      	movs	r1, #100	; 0x64
 800c4a2:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800c4a6:	079a      	lsls	r2, r3, #30
 800c4a8:	d163      	bne.n	800c572 <mktime+0x14e>
 800c4aa:	fb93 f2f1 	sdiv	r2, r3, r1
 800c4ae:	fb01 3212 	mls	r2, r1, r2, r3
 800c4b2:	2a00      	cmp	r2, #0
 800c4b4:	d160      	bne.n	800c578 <mktime+0x154>
 800c4b6:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 800c4ba:	fb92 fef0 	sdiv	lr, r2, r0
 800c4be:	fb00 221e 	mls	r2, r0, lr, r2
 800c4c2:	2a00      	cmp	r2, #0
 800c4c4:	bf14      	ite	ne
 800c4c6:	4662      	movne	r2, ip
 800c4c8:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 800c4cc:	3301      	adds	r3, #1
 800c4ce:	429e      	cmp	r6, r3
 800c4d0:	4415      	add	r5, r2
 800c4d2:	d1e8      	bne.n	800c4a6 <mktime+0x82>
 800c4d4:	4b9a      	ldr	r3, [pc, #616]	; (800c740 <mktime+0x31c>)
 800c4d6:	ea4f 78e4 	mov.w	r8, r4, asr #31
 800c4da:	fbc5 4803 	smlal	r4, r8, r5, r3
 800c4de:	f000 fc13 	bl	800cd08 <__tz_lock>
 800c4e2:	f000 fc1d 	bl	800cd20 <_tzset_unlocked>
 800c4e6:	4b97      	ldr	r3, [pc, #604]	; (800c744 <mktime+0x320>)
 800c4e8:	f8d3 b000 	ldr.w	fp, [r3]
 800c4ec:	f1bb 0f00 	cmp.w	fp, #0
 800c4f0:	d039      	beq.n	800c566 <mktime+0x142>
 800c4f2:	f8d7 b020 	ldr.w	fp, [r7, #32]
 800c4f6:	6978      	ldr	r0, [r7, #20]
 800c4f8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800c4fc:	f1bb 0f01 	cmp.w	fp, #1
 800c500:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 800c504:	46da      	mov	sl, fp
 800c506:	bfa8      	it	ge
 800c508:	f04f 0a01 	movge.w	sl, #1
 800c50c:	4283      	cmp	r3, r0
 800c50e:	d178      	bne.n	800c602 <mktime+0x1de>
 800c510:	e9d9 3208 	ldrd	r3, r2, [r9, #32]
 800c514:	f8d9 1050 	ldr.w	r1, [r9, #80]	; 0x50
 800c518:	f8d9 e04c 	ldr.w	lr, [r9, #76]	; 0x4c
 800c51c:	1a5b      	subs	r3, r3, r1
 800c51e:	9302      	str	r3, [sp, #8]
 800c520:	eb62 73e1 	sbc.w	r3, r2, r1, asr #31
 800c524:	9303      	str	r3, [sp, #12]
 800c526:	f8d9 2028 	ldr.w	r2, [r9, #40]	; 0x28
 800c52a:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 800c52e:	ebb3 0c02 	subs.w	ip, r3, r2
 800c532:	eb6e 70e2 	sbc.w	r0, lr, r2, asr #31
 800c536:	4564      	cmp	r4, ip
 800c538:	9301      	str	r3, [sp, #4]
 800c53a:	eb78 0300 	sbcs.w	r3, r8, r0
 800c53e:	da66      	bge.n	800c60e <mktime+0x1ea>
 800c540:	f8d9 3000 	ldr.w	r3, [r9]
 800c544:	2b00      	cmp	r3, #0
 800c546:	d06f      	beq.n	800c628 <mktime+0x204>
 800c548:	9b02      	ldr	r3, [sp, #8]
 800c54a:	429c      	cmp	r4, r3
 800c54c:	9b03      	ldr	r3, [sp, #12]
 800c54e:	eb78 0303 	sbcs.w	r3, r8, r3
 800c552:	db03      	blt.n	800c55c <mktime+0x138>
 800c554:	4564      	cmp	r4, ip
 800c556:	eb78 0300 	sbcs.w	r3, r8, r0
 800c55a:	db6b      	blt.n	800c634 <mktime+0x210>
 800c55c:	f1bb 0f00 	cmp.w	fp, #0
 800c560:	f04f 0b00 	mov.w	fp, #0
 800c564:	da6b      	bge.n	800c63e <mktime+0x21a>
 800c566:	f8d9 1028 	ldr.w	r1, [r9, #40]	; 0x28
 800c56a:	190c      	adds	r4, r1, r4
 800c56c:	eb48 78e1 	adc.w	r8, r8, r1, asr #31
 800c570:	e0a9      	b.n	800c6c6 <mktime+0x2a2>
 800c572:	f240 126d 	movw	r2, #365	; 0x16d
 800c576:	e7a9      	b.n	800c4cc <mktime+0xa8>
 800c578:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 800c57c:	e7a6      	b.n	800c4cc <mktime+0xa8>
 800c57e:	d0a9      	beq.n	800c4d4 <mktime+0xb0>
 800c580:	2345      	movs	r3, #69	; 0x45
 800c582:	f240 1c6d 	movw	ip, #365	; 0x16d
 800c586:	2164      	movs	r1, #100	; 0x64
 800c588:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800c58c:	e012      	b.n	800c5b4 <mktime+0x190>
 800c58e:	bb62      	cbnz	r2, 800c5ea <mktime+0x1c6>
 800c590:	fb93 f2f1 	sdiv	r2, r3, r1
 800c594:	fb01 3212 	mls	r2, r1, r2, r3
 800c598:	bb52      	cbnz	r2, 800c5f0 <mktime+0x1cc>
 800c59a:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 800c59e:	fb92 fef0 	sdiv	lr, r2, r0
 800c5a2:	fb00 221e 	mls	r2, r0, lr, r2
 800c5a6:	2a00      	cmp	r2, #0
 800c5a8:	bf14      	ite	ne
 800c5aa:	4662      	movne	r2, ip
 800c5ac:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 800c5b0:	1aad      	subs	r5, r5, r2
 800c5b2:	3b01      	subs	r3, #1
 800c5b4:	429e      	cmp	r6, r3
 800c5b6:	f003 0203 	and.w	r2, r3, #3
 800c5ba:	dbe8      	blt.n	800c58e <mktime+0x16a>
 800c5bc:	b9da      	cbnz	r2, 800c5f6 <mktime+0x1d2>
 800c5be:	2264      	movs	r2, #100	; 0x64
 800c5c0:	fb96 f3f2 	sdiv	r3, r6, r2
 800c5c4:	fb02 6313 	mls	r3, r2, r3, r6
 800c5c8:	b9c3      	cbnz	r3, 800c5fc <mktime+0x1d8>
 800c5ca:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800c5ce:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 800c5d2:	fb93 f1f2 	sdiv	r1, r3, r2
 800c5d6:	fb02 3311 	mls	r3, r2, r1, r3
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	f240 136d 	movw	r3, #365	; 0x16d
 800c5e0:	bf08      	it	eq
 800c5e2:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 800c5e6:	1aed      	subs	r5, r5, r3
 800c5e8:	e774      	b.n	800c4d4 <mktime+0xb0>
 800c5ea:	f240 126d 	movw	r2, #365	; 0x16d
 800c5ee:	e7df      	b.n	800c5b0 <mktime+0x18c>
 800c5f0:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 800c5f4:	e7dc      	b.n	800c5b0 <mktime+0x18c>
 800c5f6:	f240 136d 	movw	r3, #365	; 0x16d
 800c5fa:	e7f4      	b.n	800c5e6 <mktime+0x1c2>
 800c5fc:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 800c600:	e7f1      	b.n	800c5e6 <mktime+0x1c2>
 800c602:	f000 fad7 	bl	800cbb4 <__tzcalc_limits>
 800c606:	2800      	cmp	r0, #0
 800c608:	d182      	bne.n	800c510 <mktime+0xec>
 800c60a:	46d3      	mov	fp, sl
 800c60c:	e050      	b.n	800c6b0 <mktime+0x28c>
 800c60e:	9b01      	ldr	r3, [sp, #4]
 800c610:	1a5b      	subs	r3, r3, r1
 800c612:	9301      	str	r3, [sp, #4]
 800c614:	ea4f 73e1 	mov.w	r3, r1, asr #31
 800c618:	eb6e 0e03 	sbc.w	lr, lr, r3
 800c61c:	9b01      	ldr	r3, [sp, #4]
 800c61e:	429c      	cmp	r4, r3
 800c620:	eb78 030e 	sbcs.w	r3, r8, lr
 800c624:	dbf1      	blt.n	800c60a <mktime+0x1e6>
 800c626:	e78b      	b.n	800c540 <mktime+0x11c>
 800c628:	9b02      	ldr	r3, [sp, #8]
 800c62a:	429c      	cmp	r4, r3
 800c62c:	9b03      	ldr	r3, [sp, #12]
 800c62e:	eb78 0303 	sbcs.w	r3, r8, r3
 800c632:	db8f      	blt.n	800c554 <mktime+0x130>
 800c634:	f1bb 0f00 	cmp.w	fp, #0
 800c638:	db3e      	blt.n	800c6b8 <mktime+0x294>
 800c63a:	f04f 0b01 	mov.w	fp, #1
 800c63e:	ea8a 0a0b 	eor.w	sl, sl, fp
 800c642:	f1ba 0f01 	cmp.w	sl, #1
 800c646:	d133      	bne.n	800c6b0 <mktime+0x28c>
 800c648:	f1bb 0f00 	cmp.w	fp, #0
 800c64c:	d04e      	beq.n	800c6ec <mktime+0x2c8>
 800c64e:	1a52      	subs	r2, r2, r1
 800c650:	683b      	ldr	r3, [r7, #0]
 800c652:	1914      	adds	r4, r2, r4
 800c654:	4413      	add	r3, r2
 800c656:	4638      	mov	r0, r7
 800c658:	603b      	str	r3, [r7, #0]
 800c65a:	eb48 78e2 	adc.w	r8, r8, r2, asr #31
 800c65e:	f8d7 a00c 	ldr.w	sl, [r7, #12]
 800c662:	f7ff fe07 	bl	800c274 <validate_structure>
 800c666:	68fa      	ldr	r2, [r7, #12]
 800c668:	ebb2 020a 	subs.w	r2, r2, sl
 800c66c:	d020      	beq.n	800c6b0 <mktime+0x28c>
 800c66e:	2a01      	cmp	r2, #1
 800c670:	dc3e      	bgt.n	800c6f0 <mktime+0x2cc>
 800c672:	1c90      	adds	r0, r2, #2
 800c674:	bfd8      	it	le
 800c676:	2201      	movle	r2, #1
 800c678:	69fb      	ldr	r3, [r7, #28]
 800c67a:	4415      	add	r5, r2
 800c67c:	18d3      	adds	r3, r2, r3
 800c67e:	d540      	bpl.n	800c702 <mktime+0x2de>
 800c680:	1e73      	subs	r3, r6, #1
 800c682:	0799      	lsls	r1, r3, #30
 800c684:	d137      	bne.n	800c6f6 <mktime+0x2d2>
 800c686:	2264      	movs	r2, #100	; 0x64
 800c688:	fb93 f1f2 	sdiv	r1, r3, r2
 800c68c:	fb02 3311 	mls	r3, r2, r1, r3
 800c690:	bba3      	cbnz	r3, 800c6fc <mktime+0x2d8>
 800c692:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800c696:	f206 766b 	addw	r6, r6, #1899	; 0x76b
 800c69a:	fb96 f2f3 	sdiv	r2, r6, r3
 800c69e:	fb03 6612 	mls	r6, r3, r2, r6
 800c6a2:	2e00      	cmp	r6, #0
 800c6a4:	f240 136d 	movw	r3, #365	; 0x16d
 800c6a8:	bf18      	it	ne
 800c6aa:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 800c6ae:	61fb      	str	r3, [r7, #28]
 800c6b0:	f1bb 0f01 	cmp.w	fp, #1
 800c6b4:	f47f af57 	bne.w	800c566 <mktime+0x142>
 800c6b8:	f04f 0b01 	mov.w	fp, #1
 800c6bc:	f8d9 1050 	ldr.w	r1, [r9, #80]	; 0x50
 800c6c0:	190c      	adds	r4, r1, r4
 800c6c2:	eb48 78e1 	adc.w	r8, r8, r1, asr #31
 800c6c6:	f000 fb25 	bl	800cd14 <__tz_unlock>
 800c6ca:	2307      	movs	r3, #7
 800c6cc:	3504      	adds	r5, #4
 800c6ce:	fb95 f3f3 	sdiv	r3, r5, r3
 800c6d2:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800c6d6:	1aed      	subs	r5, r5, r3
 800c6d8:	bf48      	it	mi
 800c6da:	3507      	addmi	r5, #7
 800c6dc:	f8c7 b020 	str.w	fp, [r7, #32]
 800c6e0:	61bd      	str	r5, [r7, #24]
 800c6e2:	4620      	mov	r0, r4
 800c6e4:	4641      	mov	r1, r8
 800c6e6:	b005      	add	sp, #20
 800c6e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6ec:	1a8a      	subs	r2, r1, r2
 800c6ee:	e7af      	b.n	800c650 <mktime+0x22c>
 800c6f0:	f04f 32ff 	mov.w	r2, #4294967295
 800c6f4:	e7c0      	b.n	800c678 <mktime+0x254>
 800c6f6:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 800c6fa:	e7d8      	b.n	800c6ae <mktime+0x28a>
 800c6fc:	f240 136d 	movw	r3, #365	; 0x16d
 800c700:	e7d5      	b.n	800c6ae <mktime+0x28a>
 800c702:	07b2      	lsls	r2, r6, #30
 800c704:	d117      	bne.n	800c736 <mktime+0x312>
 800c706:	2164      	movs	r1, #100	; 0x64
 800c708:	fb96 f2f1 	sdiv	r2, r6, r1
 800c70c:	fb01 6212 	mls	r2, r1, r2, r6
 800c710:	b9d2      	cbnz	r2, 800c748 <mktime+0x324>
 800c712:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800c716:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 800c71a:	fb96 f1f2 	sdiv	r1, r6, r2
 800c71e:	fb02 6611 	mls	r6, r2, r1, r6
 800c722:	2e00      	cmp	r6, #0
 800c724:	f240 126d 	movw	r2, #365	; 0x16d
 800c728:	bf08      	it	eq
 800c72a:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 800c72e:	4293      	cmp	r3, r2
 800c730:	bfa8      	it	ge
 800c732:	1a9b      	subge	r3, r3, r2
 800c734:	e7bb      	b.n	800c6ae <mktime+0x28a>
 800c736:	f240 126d 	movw	r2, #365	; 0x16d
 800c73a:	e7f8      	b.n	800c72e <mktime+0x30a>
 800c73c:	0800f690 	.word	0x0800f690
 800c740:	00015180 	.word	0x00015180
 800c744:	20002c38 	.word	0x20002c38
 800c748:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 800c74c:	e7ef      	b.n	800c72e <mktime+0x30a>
 800c74e:	f04f 34ff 	mov.w	r4, #4294967295
 800c752:	46a0      	mov	r8, r4
 800c754:	e7c5      	b.n	800c6e2 <mktime+0x2be>
 800c756:	bf00      	nop

0800c758 <_free_r>:
 800c758:	b538      	push	{r3, r4, r5, lr}
 800c75a:	4605      	mov	r5, r0
 800c75c:	2900      	cmp	r1, #0
 800c75e:	d040      	beq.n	800c7e2 <_free_r+0x8a>
 800c760:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c764:	1f0c      	subs	r4, r1, #4
 800c766:	2b00      	cmp	r3, #0
 800c768:	bfb8      	it	lt
 800c76a:	18e4      	addlt	r4, r4, r3
 800c76c:	f000 fda0 	bl	800d2b0 <__malloc_lock>
 800c770:	4a1c      	ldr	r2, [pc, #112]	; (800c7e4 <_free_r+0x8c>)
 800c772:	6813      	ldr	r3, [r2, #0]
 800c774:	b933      	cbnz	r3, 800c784 <_free_r+0x2c>
 800c776:	6063      	str	r3, [r4, #4]
 800c778:	6014      	str	r4, [r2, #0]
 800c77a:	4628      	mov	r0, r5
 800c77c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c780:	f000 bd9c 	b.w	800d2bc <__malloc_unlock>
 800c784:	42a3      	cmp	r3, r4
 800c786:	d908      	bls.n	800c79a <_free_r+0x42>
 800c788:	6820      	ldr	r0, [r4, #0]
 800c78a:	1821      	adds	r1, r4, r0
 800c78c:	428b      	cmp	r3, r1
 800c78e:	bf01      	itttt	eq
 800c790:	6819      	ldreq	r1, [r3, #0]
 800c792:	685b      	ldreq	r3, [r3, #4]
 800c794:	1809      	addeq	r1, r1, r0
 800c796:	6021      	streq	r1, [r4, #0]
 800c798:	e7ed      	b.n	800c776 <_free_r+0x1e>
 800c79a:	461a      	mov	r2, r3
 800c79c:	685b      	ldr	r3, [r3, #4]
 800c79e:	b10b      	cbz	r3, 800c7a4 <_free_r+0x4c>
 800c7a0:	42a3      	cmp	r3, r4
 800c7a2:	d9fa      	bls.n	800c79a <_free_r+0x42>
 800c7a4:	6811      	ldr	r1, [r2, #0]
 800c7a6:	1850      	adds	r0, r2, r1
 800c7a8:	42a0      	cmp	r0, r4
 800c7aa:	d10b      	bne.n	800c7c4 <_free_r+0x6c>
 800c7ac:	6820      	ldr	r0, [r4, #0]
 800c7ae:	4401      	add	r1, r0
 800c7b0:	1850      	adds	r0, r2, r1
 800c7b2:	4283      	cmp	r3, r0
 800c7b4:	6011      	str	r1, [r2, #0]
 800c7b6:	d1e0      	bne.n	800c77a <_free_r+0x22>
 800c7b8:	6818      	ldr	r0, [r3, #0]
 800c7ba:	685b      	ldr	r3, [r3, #4]
 800c7bc:	4401      	add	r1, r0
 800c7be:	6011      	str	r1, [r2, #0]
 800c7c0:	6053      	str	r3, [r2, #4]
 800c7c2:	e7da      	b.n	800c77a <_free_r+0x22>
 800c7c4:	d902      	bls.n	800c7cc <_free_r+0x74>
 800c7c6:	230c      	movs	r3, #12
 800c7c8:	602b      	str	r3, [r5, #0]
 800c7ca:	e7d6      	b.n	800c77a <_free_r+0x22>
 800c7cc:	6820      	ldr	r0, [r4, #0]
 800c7ce:	1821      	adds	r1, r4, r0
 800c7d0:	428b      	cmp	r3, r1
 800c7d2:	bf01      	itttt	eq
 800c7d4:	6819      	ldreq	r1, [r3, #0]
 800c7d6:	685b      	ldreq	r3, [r3, #4]
 800c7d8:	1809      	addeq	r1, r1, r0
 800c7da:	6021      	streq	r1, [r4, #0]
 800c7dc:	6063      	str	r3, [r4, #4]
 800c7de:	6054      	str	r4, [r2, #4]
 800c7e0:	e7cb      	b.n	800c77a <_free_r+0x22>
 800c7e2:	bd38      	pop	{r3, r4, r5, pc}
 800c7e4:	20002c14 	.word	0x20002c14

0800c7e8 <sbrk_aligned>:
 800c7e8:	b570      	push	{r4, r5, r6, lr}
 800c7ea:	4e0e      	ldr	r6, [pc, #56]	; (800c824 <sbrk_aligned+0x3c>)
 800c7ec:	460c      	mov	r4, r1
 800c7ee:	6831      	ldr	r1, [r6, #0]
 800c7f0:	4605      	mov	r5, r0
 800c7f2:	b911      	cbnz	r1, 800c7fa <sbrk_aligned+0x12>
 800c7f4:	f000 f8ca 	bl	800c98c <_sbrk_r>
 800c7f8:	6030      	str	r0, [r6, #0]
 800c7fa:	4621      	mov	r1, r4
 800c7fc:	4628      	mov	r0, r5
 800c7fe:	f000 f8c5 	bl	800c98c <_sbrk_r>
 800c802:	1c43      	adds	r3, r0, #1
 800c804:	d00a      	beq.n	800c81c <sbrk_aligned+0x34>
 800c806:	1cc4      	adds	r4, r0, #3
 800c808:	f024 0403 	bic.w	r4, r4, #3
 800c80c:	42a0      	cmp	r0, r4
 800c80e:	d007      	beq.n	800c820 <sbrk_aligned+0x38>
 800c810:	1a21      	subs	r1, r4, r0
 800c812:	4628      	mov	r0, r5
 800c814:	f000 f8ba 	bl	800c98c <_sbrk_r>
 800c818:	3001      	adds	r0, #1
 800c81a:	d101      	bne.n	800c820 <sbrk_aligned+0x38>
 800c81c:	f04f 34ff 	mov.w	r4, #4294967295
 800c820:	4620      	mov	r0, r4
 800c822:	bd70      	pop	{r4, r5, r6, pc}
 800c824:	20002c18 	.word	0x20002c18

0800c828 <_malloc_r>:
 800c828:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c82c:	1ccd      	adds	r5, r1, #3
 800c82e:	f025 0503 	bic.w	r5, r5, #3
 800c832:	3508      	adds	r5, #8
 800c834:	2d0c      	cmp	r5, #12
 800c836:	bf38      	it	cc
 800c838:	250c      	movcc	r5, #12
 800c83a:	2d00      	cmp	r5, #0
 800c83c:	4607      	mov	r7, r0
 800c83e:	db01      	blt.n	800c844 <_malloc_r+0x1c>
 800c840:	42a9      	cmp	r1, r5
 800c842:	d905      	bls.n	800c850 <_malloc_r+0x28>
 800c844:	230c      	movs	r3, #12
 800c846:	2600      	movs	r6, #0
 800c848:	603b      	str	r3, [r7, #0]
 800c84a:	4630      	mov	r0, r6
 800c84c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c850:	4e2e      	ldr	r6, [pc, #184]	; (800c90c <_malloc_r+0xe4>)
 800c852:	f000 fd2d 	bl	800d2b0 <__malloc_lock>
 800c856:	6833      	ldr	r3, [r6, #0]
 800c858:	461c      	mov	r4, r3
 800c85a:	bb34      	cbnz	r4, 800c8aa <_malloc_r+0x82>
 800c85c:	4629      	mov	r1, r5
 800c85e:	4638      	mov	r0, r7
 800c860:	f7ff ffc2 	bl	800c7e8 <sbrk_aligned>
 800c864:	1c43      	adds	r3, r0, #1
 800c866:	4604      	mov	r4, r0
 800c868:	d14d      	bne.n	800c906 <_malloc_r+0xde>
 800c86a:	6834      	ldr	r4, [r6, #0]
 800c86c:	4626      	mov	r6, r4
 800c86e:	2e00      	cmp	r6, #0
 800c870:	d140      	bne.n	800c8f4 <_malloc_r+0xcc>
 800c872:	6823      	ldr	r3, [r4, #0]
 800c874:	4631      	mov	r1, r6
 800c876:	4638      	mov	r0, r7
 800c878:	eb04 0803 	add.w	r8, r4, r3
 800c87c:	f000 f886 	bl	800c98c <_sbrk_r>
 800c880:	4580      	cmp	r8, r0
 800c882:	d13a      	bne.n	800c8fa <_malloc_r+0xd2>
 800c884:	6821      	ldr	r1, [r4, #0]
 800c886:	3503      	adds	r5, #3
 800c888:	1a6d      	subs	r5, r5, r1
 800c88a:	f025 0503 	bic.w	r5, r5, #3
 800c88e:	3508      	adds	r5, #8
 800c890:	2d0c      	cmp	r5, #12
 800c892:	bf38      	it	cc
 800c894:	250c      	movcc	r5, #12
 800c896:	4638      	mov	r0, r7
 800c898:	4629      	mov	r1, r5
 800c89a:	f7ff ffa5 	bl	800c7e8 <sbrk_aligned>
 800c89e:	3001      	adds	r0, #1
 800c8a0:	d02b      	beq.n	800c8fa <_malloc_r+0xd2>
 800c8a2:	6823      	ldr	r3, [r4, #0]
 800c8a4:	442b      	add	r3, r5
 800c8a6:	6023      	str	r3, [r4, #0]
 800c8a8:	e00e      	b.n	800c8c8 <_malloc_r+0xa0>
 800c8aa:	6822      	ldr	r2, [r4, #0]
 800c8ac:	1b52      	subs	r2, r2, r5
 800c8ae:	d41e      	bmi.n	800c8ee <_malloc_r+0xc6>
 800c8b0:	2a0b      	cmp	r2, #11
 800c8b2:	d916      	bls.n	800c8e2 <_malloc_r+0xba>
 800c8b4:	1961      	adds	r1, r4, r5
 800c8b6:	42a3      	cmp	r3, r4
 800c8b8:	6025      	str	r5, [r4, #0]
 800c8ba:	bf18      	it	ne
 800c8bc:	6059      	strne	r1, [r3, #4]
 800c8be:	6863      	ldr	r3, [r4, #4]
 800c8c0:	bf08      	it	eq
 800c8c2:	6031      	streq	r1, [r6, #0]
 800c8c4:	5162      	str	r2, [r4, r5]
 800c8c6:	604b      	str	r3, [r1, #4]
 800c8c8:	4638      	mov	r0, r7
 800c8ca:	f104 060b 	add.w	r6, r4, #11
 800c8ce:	f000 fcf5 	bl	800d2bc <__malloc_unlock>
 800c8d2:	f026 0607 	bic.w	r6, r6, #7
 800c8d6:	1d23      	adds	r3, r4, #4
 800c8d8:	1af2      	subs	r2, r6, r3
 800c8da:	d0b6      	beq.n	800c84a <_malloc_r+0x22>
 800c8dc:	1b9b      	subs	r3, r3, r6
 800c8de:	50a3      	str	r3, [r4, r2]
 800c8e0:	e7b3      	b.n	800c84a <_malloc_r+0x22>
 800c8e2:	6862      	ldr	r2, [r4, #4]
 800c8e4:	42a3      	cmp	r3, r4
 800c8e6:	bf0c      	ite	eq
 800c8e8:	6032      	streq	r2, [r6, #0]
 800c8ea:	605a      	strne	r2, [r3, #4]
 800c8ec:	e7ec      	b.n	800c8c8 <_malloc_r+0xa0>
 800c8ee:	4623      	mov	r3, r4
 800c8f0:	6864      	ldr	r4, [r4, #4]
 800c8f2:	e7b2      	b.n	800c85a <_malloc_r+0x32>
 800c8f4:	4634      	mov	r4, r6
 800c8f6:	6876      	ldr	r6, [r6, #4]
 800c8f8:	e7b9      	b.n	800c86e <_malloc_r+0x46>
 800c8fa:	230c      	movs	r3, #12
 800c8fc:	4638      	mov	r0, r7
 800c8fe:	603b      	str	r3, [r7, #0]
 800c900:	f000 fcdc 	bl	800d2bc <__malloc_unlock>
 800c904:	e7a1      	b.n	800c84a <_malloc_r+0x22>
 800c906:	6025      	str	r5, [r4, #0]
 800c908:	e7de      	b.n	800c8c8 <_malloc_r+0xa0>
 800c90a:	bf00      	nop
 800c90c:	20002c14 	.word	0x20002c14

0800c910 <rand>:
 800c910:	4b16      	ldr	r3, [pc, #88]	; (800c96c <rand+0x5c>)
 800c912:	b510      	push	{r4, lr}
 800c914:	681c      	ldr	r4, [r3, #0]
 800c916:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c918:	b9b3      	cbnz	r3, 800c948 <rand+0x38>
 800c91a:	2018      	movs	r0, #24
 800c91c:	f7ff fc74 	bl	800c208 <malloc>
 800c920:	4602      	mov	r2, r0
 800c922:	63a0      	str	r0, [r4, #56]	; 0x38
 800c924:	b920      	cbnz	r0, 800c930 <rand+0x20>
 800c926:	214e      	movs	r1, #78	; 0x4e
 800c928:	4b11      	ldr	r3, [pc, #68]	; (800c970 <rand+0x60>)
 800c92a:	4812      	ldr	r0, [pc, #72]	; (800c974 <rand+0x64>)
 800c92c:	f000 fb80 	bl	800d030 <__assert_func>
 800c930:	4911      	ldr	r1, [pc, #68]	; (800c978 <rand+0x68>)
 800c932:	4b12      	ldr	r3, [pc, #72]	; (800c97c <rand+0x6c>)
 800c934:	e9c0 1300 	strd	r1, r3, [r0]
 800c938:	4b11      	ldr	r3, [pc, #68]	; (800c980 <rand+0x70>)
 800c93a:	2100      	movs	r1, #0
 800c93c:	6083      	str	r3, [r0, #8]
 800c93e:	230b      	movs	r3, #11
 800c940:	8183      	strh	r3, [r0, #12]
 800c942:	2001      	movs	r0, #1
 800c944:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800c948:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800c94a:	4a0e      	ldr	r2, [pc, #56]	; (800c984 <rand+0x74>)
 800c94c:	6920      	ldr	r0, [r4, #16]
 800c94e:	6963      	ldr	r3, [r4, #20]
 800c950:	4342      	muls	r2, r0
 800c952:	490d      	ldr	r1, [pc, #52]	; (800c988 <rand+0x78>)
 800c954:	fb01 2203 	mla	r2, r1, r3, r2
 800c958:	fba0 0101 	umull	r0, r1, r0, r1
 800c95c:	1c43      	adds	r3, r0, #1
 800c95e:	eb42 0001 	adc.w	r0, r2, r1
 800c962:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800c966:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800c96a:	bd10      	pop	{r4, pc}
 800c96c:	200004e4 	.word	0x200004e4
 800c970:	0800f5ec 	.word	0x0800f5ec
 800c974:	0800f720 	.word	0x0800f720
 800c978:	abcd330e 	.word	0xabcd330e
 800c97c:	e66d1234 	.word	0xe66d1234
 800c980:	0005deec 	.word	0x0005deec
 800c984:	5851f42d 	.word	0x5851f42d
 800c988:	4c957f2d 	.word	0x4c957f2d

0800c98c <_sbrk_r>:
 800c98c:	b538      	push	{r3, r4, r5, lr}
 800c98e:	2300      	movs	r3, #0
 800c990:	4d05      	ldr	r5, [pc, #20]	; (800c9a8 <_sbrk_r+0x1c>)
 800c992:	4604      	mov	r4, r0
 800c994:	4608      	mov	r0, r1
 800c996:	602b      	str	r3, [r5, #0]
 800c998:	f7f9 fec4 	bl	8006724 <_sbrk>
 800c99c:	1c43      	adds	r3, r0, #1
 800c99e:	d102      	bne.n	800c9a6 <_sbrk_r+0x1a>
 800c9a0:	682b      	ldr	r3, [r5, #0]
 800c9a2:	b103      	cbz	r3, 800c9a6 <_sbrk_r+0x1a>
 800c9a4:	6023      	str	r3, [r4, #0]
 800c9a6:	bd38      	pop	{r3, r4, r5, pc}
 800c9a8:	20002c48 	.word	0x20002c48

0800c9ac <siprintf>:
 800c9ac:	b40e      	push	{r1, r2, r3}
 800c9ae:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c9b2:	b500      	push	{lr}
 800c9b4:	b09c      	sub	sp, #112	; 0x70
 800c9b6:	ab1d      	add	r3, sp, #116	; 0x74
 800c9b8:	9002      	str	r0, [sp, #8]
 800c9ba:	9006      	str	r0, [sp, #24]
 800c9bc:	9107      	str	r1, [sp, #28]
 800c9be:	9104      	str	r1, [sp, #16]
 800c9c0:	4808      	ldr	r0, [pc, #32]	; (800c9e4 <siprintf+0x38>)
 800c9c2:	4909      	ldr	r1, [pc, #36]	; (800c9e8 <siprintf+0x3c>)
 800c9c4:	f853 2b04 	ldr.w	r2, [r3], #4
 800c9c8:	9105      	str	r1, [sp, #20]
 800c9ca:	6800      	ldr	r0, [r0, #0]
 800c9cc:	a902      	add	r1, sp, #8
 800c9ce:	9301      	str	r3, [sp, #4]
 800c9d0:	f000 fcd6 	bl	800d380 <_svfiprintf_r>
 800c9d4:	2200      	movs	r2, #0
 800c9d6:	9b02      	ldr	r3, [sp, #8]
 800c9d8:	701a      	strb	r2, [r3, #0]
 800c9da:	b01c      	add	sp, #112	; 0x70
 800c9dc:	f85d eb04 	ldr.w	lr, [sp], #4
 800c9e0:	b003      	add	sp, #12
 800c9e2:	4770      	bx	lr
 800c9e4:	200004e4 	.word	0x200004e4
 800c9e8:	ffff0208 	.word	0xffff0208

0800c9ec <strtok>:
 800c9ec:	4b16      	ldr	r3, [pc, #88]	; (800ca48 <strtok+0x5c>)
 800c9ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9f2:	681f      	ldr	r7, [r3, #0]
 800c9f4:	4605      	mov	r5, r0
 800c9f6:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 800c9f8:	460e      	mov	r6, r1
 800c9fa:	b9ec      	cbnz	r4, 800ca38 <strtok+0x4c>
 800c9fc:	2050      	movs	r0, #80	; 0x50
 800c9fe:	f7ff fc03 	bl	800c208 <malloc>
 800ca02:	4602      	mov	r2, r0
 800ca04:	65b8      	str	r0, [r7, #88]	; 0x58
 800ca06:	b920      	cbnz	r0, 800ca12 <strtok+0x26>
 800ca08:	2157      	movs	r1, #87	; 0x57
 800ca0a:	4b10      	ldr	r3, [pc, #64]	; (800ca4c <strtok+0x60>)
 800ca0c:	4810      	ldr	r0, [pc, #64]	; (800ca50 <strtok+0x64>)
 800ca0e:	f000 fb0f 	bl	800d030 <__assert_func>
 800ca12:	e9c0 4400 	strd	r4, r4, [r0]
 800ca16:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800ca1a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800ca1e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800ca22:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800ca26:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800ca2a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800ca2e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800ca32:	6184      	str	r4, [r0, #24]
 800ca34:	7704      	strb	r4, [r0, #28]
 800ca36:	6244      	str	r4, [r0, #36]	; 0x24
 800ca38:	4631      	mov	r1, r6
 800ca3a:	4628      	mov	r0, r5
 800ca3c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ca3e:	2301      	movs	r3, #1
 800ca40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ca44:	f000 b806 	b.w	800ca54 <__strtok_r>
 800ca48:	200004e4 	.word	0x200004e4
 800ca4c:	0800f5ec 	.word	0x0800f5ec
 800ca50:	0800f77b 	.word	0x0800f77b

0800ca54 <__strtok_r>:
 800ca54:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ca56:	b908      	cbnz	r0, 800ca5c <__strtok_r+0x8>
 800ca58:	6810      	ldr	r0, [r2, #0]
 800ca5a:	b188      	cbz	r0, 800ca80 <__strtok_r+0x2c>
 800ca5c:	4604      	mov	r4, r0
 800ca5e:	460f      	mov	r7, r1
 800ca60:	4620      	mov	r0, r4
 800ca62:	f814 5b01 	ldrb.w	r5, [r4], #1
 800ca66:	f817 6b01 	ldrb.w	r6, [r7], #1
 800ca6a:	b91e      	cbnz	r6, 800ca74 <__strtok_r+0x20>
 800ca6c:	b965      	cbnz	r5, 800ca88 <__strtok_r+0x34>
 800ca6e:	4628      	mov	r0, r5
 800ca70:	6015      	str	r5, [r2, #0]
 800ca72:	e005      	b.n	800ca80 <__strtok_r+0x2c>
 800ca74:	42b5      	cmp	r5, r6
 800ca76:	d1f6      	bne.n	800ca66 <__strtok_r+0x12>
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d1f0      	bne.n	800ca5e <__strtok_r+0xa>
 800ca7c:	6014      	str	r4, [r2, #0]
 800ca7e:	7003      	strb	r3, [r0, #0]
 800ca80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ca82:	461c      	mov	r4, r3
 800ca84:	e00c      	b.n	800caa0 <__strtok_r+0x4c>
 800ca86:	b915      	cbnz	r5, 800ca8e <__strtok_r+0x3a>
 800ca88:	460e      	mov	r6, r1
 800ca8a:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ca8e:	f816 5b01 	ldrb.w	r5, [r6], #1
 800ca92:	42ab      	cmp	r3, r5
 800ca94:	d1f7      	bne.n	800ca86 <__strtok_r+0x32>
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d0f3      	beq.n	800ca82 <__strtok_r+0x2e>
 800ca9a:	2300      	movs	r3, #0
 800ca9c:	f804 3c01 	strb.w	r3, [r4, #-1]
 800caa0:	6014      	str	r4, [r2, #0]
 800caa2:	e7ed      	b.n	800ca80 <__strtok_r+0x2c>

0800caa4 <_strtol_l.constprop.0>:
 800caa4:	2b01      	cmp	r3, #1
 800caa6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800caaa:	4680      	mov	r8, r0
 800caac:	d001      	beq.n	800cab2 <_strtol_l.constprop.0+0xe>
 800caae:	2b24      	cmp	r3, #36	; 0x24
 800cab0:	d906      	bls.n	800cac0 <_strtol_l.constprop.0+0x1c>
 800cab2:	f7ff fa6f 	bl	800bf94 <__errno>
 800cab6:	2316      	movs	r3, #22
 800cab8:	6003      	str	r3, [r0, #0]
 800caba:	2000      	movs	r0, #0
 800cabc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cac0:	460d      	mov	r5, r1
 800cac2:	4f35      	ldr	r7, [pc, #212]	; (800cb98 <_strtol_l.constprop.0+0xf4>)
 800cac4:	4628      	mov	r0, r5
 800cac6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800caca:	5de6      	ldrb	r6, [r4, r7]
 800cacc:	f016 0608 	ands.w	r6, r6, #8
 800cad0:	d1f8      	bne.n	800cac4 <_strtol_l.constprop.0+0x20>
 800cad2:	2c2d      	cmp	r4, #45	; 0x2d
 800cad4:	d12f      	bne.n	800cb36 <_strtol_l.constprop.0+0x92>
 800cad6:	2601      	movs	r6, #1
 800cad8:	782c      	ldrb	r4, [r5, #0]
 800cada:	1c85      	adds	r5, r0, #2
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d057      	beq.n	800cb90 <_strtol_l.constprop.0+0xec>
 800cae0:	2b10      	cmp	r3, #16
 800cae2:	d109      	bne.n	800caf8 <_strtol_l.constprop.0+0x54>
 800cae4:	2c30      	cmp	r4, #48	; 0x30
 800cae6:	d107      	bne.n	800caf8 <_strtol_l.constprop.0+0x54>
 800cae8:	7828      	ldrb	r0, [r5, #0]
 800caea:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800caee:	2858      	cmp	r0, #88	; 0x58
 800caf0:	d149      	bne.n	800cb86 <_strtol_l.constprop.0+0xe2>
 800caf2:	2310      	movs	r3, #16
 800caf4:	786c      	ldrb	r4, [r5, #1]
 800caf6:	3502      	adds	r5, #2
 800caf8:	2700      	movs	r7, #0
 800cafa:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800cafe:	f10e 3eff 	add.w	lr, lr, #4294967295
 800cb02:	fbbe f9f3 	udiv	r9, lr, r3
 800cb06:	4638      	mov	r0, r7
 800cb08:	fb03 ea19 	mls	sl, r3, r9, lr
 800cb0c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800cb10:	f1bc 0f09 	cmp.w	ip, #9
 800cb14:	d814      	bhi.n	800cb40 <_strtol_l.constprop.0+0x9c>
 800cb16:	4664      	mov	r4, ip
 800cb18:	42a3      	cmp	r3, r4
 800cb1a:	dd22      	ble.n	800cb62 <_strtol_l.constprop.0+0xbe>
 800cb1c:	2f00      	cmp	r7, #0
 800cb1e:	db1d      	blt.n	800cb5c <_strtol_l.constprop.0+0xb8>
 800cb20:	4581      	cmp	r9, r0
 800cb22:	d31b      	bcc.n	800cb5c <_strtol_l.constprop.0+0xb8>
 800cb24:	d101      	bne.n	800cb2a <_strtol_l.constprop.0+0x86>
 800cb26:	45a2      	cmp	sl, r4
 800cb28:	db18      	blt.n	800cb5c <_strtol_l.constprop.0+0xb8>
 800cb2a:	2701      	movs	r7, #1
 800cb2c:	fb00 4003 	mla	r0, r0, r3, r4
 800cb30:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cb34:	e7ea      	b.n	800cb0c <_strtol_l.constprop.0+0x68>
 800cb36:	2c2b      	cmp	r4, #43	; 0x2b
 800cb38:	bf04      	itt	eq
 800cb3a:	782c      	ldrbeq	r4, [r5, #0]
 800cb3c:	1c85      	addeq	r5, r0, #2
 800cb3e:	e7cd      	b.n	800cadc <_strtol_l.constprop.0+0x38>
 800cb40:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800cb44:	f1bc 0f19 	cmp.w	ip, #25
 800cb48:	d801      	bhi.n	800cb4e <_strtol_l.constprop.0+0xaa>
 800cb4a:	3c37      	subs	r4, #55	; 0x37
 800cb4c:	e7e4      	b.n	800cb18 <_strtol_l.constprop.0+0x74>
 800cb4e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800cb52:	f1bc 0f19 	cmp.w	ip, #25
 800cb56:	d804      	bhi.n	800cb62 <_strtol_l.constprop.0+0xbe>
 800cb58:	3c57      	subs	r4, #87	; 0x57
 800cb5a:	e7dd      	b.n	800cb18 <_strtol_l.constprop.0+0x74>
 800cb5c:	f04f 37ff 	mov.w	r7, #4294967295
 800cb60:	e7e6      	b.n	800cb30 <_strtol_l.constprop.0+0x8c>
 800cb62:	2f00      	cmp	r7, #0
 800cb64:	da07      	bge.n	800cb76 <_strtol_l.constprop.0+0xd2>
 800cb66:	2322      	movs	r3, #34	; 0x22
 800cb68:	4670      	mov	r0, lr
 800cb6a:	f8c8 3000 	str.w	r3, [r8]
 800cb6e:	2a00      	cmp	r2, #0
 800cb70:	d0a4      	beq.n	800cabc <_strtol_l.constprop.0+0x18>
 800cb72:	1e69      	subs	r1, r5, #1
 800cb74:	e005      	b.n	800cb82 <_strtol_l.constprop.0+0xde>
 800cb76:	b106      	cbz	r6, 800cb7a <_strtol_l.constprop.0+0xd6>
 800cb78:	4240      	negs	r0, r0
 800cb7a:	2a00      	cmp	r2, #0
 800cb7c:	d09e      	beq.n	800cabc <_strtol_l.constprop.0+0x18>
 800cb7e:	2f00      	cmp	r7, #0
 800cb80:	d1f7      	bne.n	800cb72 <_strtol_l.constprop.0+0xce>
 800cb82:	6011      	str	r1, [r2, #0]
 800cb84:	e79a      	b.n	800cabc <_strtol_l.constprop.0+0x18>
 800cb86:	2430      	movs	r4, #48	; 0x30
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d1b5      	bne.n	800caf8 <_strtol_l.constprop.0+0x54>
 800cb8c:	2308      	movs	r3, #8
 800cb8e:	e7b3      	b.n	800caf8 <_strtol_l.constprop.0+0x54>
 800cb90:	2c30      	cmp	r4, #48	; 0x30
 800cb92:	d0a9      	beq.n	800cae8 <_strtol_l.constprop.0+0x44>
 800cb94:	230a      	movs	r3, #10
 800cb96:	e7af      	b.n	800caf8 <_strtol_l.constprop.0+0x54>
 800cb98:	0800f851 	.word	0x0800f851

0800cb9c <_strtol_r>:
 800cb9c:	f7ff bf82 	b.w	800caa4 <_strtol_l.constprop.0>

0800cba0 <strtol>:
 800cba0:	4613      	mov	r3, r2
 800cba2:	460a      	mov	r2, r1
 800cba4:	4601      	mov	r1, r0
 800cba6:	4802      	ldr	r0, [pc, #8]	; (800cbb0 <strtol+0x10>)
 800cba8:	6800      	ldr	r0, [r0, #0]
 800cbaa:	f7ff bf7b 	b.w	800caa4 <_strtol_l.constprop.0>
 800cbae:	bf00      	nop
 800cbb0:	200004e4 	.word	0x200004e4

0800cbb4 <__tzcalc_limits>:
 800cbb4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbb8:	4605      	mov	r5, r0
 800cbba:	f000 fac1 	bl	800d140 <__gettzinfo>
 800cbbe:	f240 73b1 	movw	r3, #1969	; 0x7b1
 800cbc2:	429d      	cmp	r5, r3
 800cbc4:	f340 809a 	ble.w	800ccfc <__tzcalc_limits+0x148>
 800cbc8:	f46f 62f6 	mvn.w	r2, #1968	; 0x7b0
 800cbcc:	18ac      	adds	r4, r5, r2
 800cbce:	f240 126d 	movw	r2, #365	; 0x16d
 800cbd2:	f2a5 73b2 	subw	r3, r5, #1970	; 0x7b2
 800cbd6:	10a4      	asrs	r4, r4, #2
 800cbd8:	fb02 4403 	mla	r4, r2, r3, r4
 800cbdc:	f06f 0263 	mvn.w	r2, #99	; 0x63
 800cbe0:	f2a5 736d 	subw	r3, r5, #1901	; 0x76d
 800cbe4:	fb93 f3f2 	sdiv	r3, r3, r2
 800cbe8:	f46f 61c8 	mvn.w	r1, #1600	; 0x640
 800cbec:	441c      	add	r4, r3
 800cbee:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800cbf2:	186a      	adds	r2, r5, r1
 800cbf4:	fbb2 f2f3 	udiv	r2, r2, r3
 800cbf8:	fb95 fcf3 	sdiv	ip, r5, r3
 800cbfc:	4414      	add	r4, r2
 800cbfe:	2264      	movs	r2, #100	; 0x64
 800cc00:	fb03 5c1c 	mls	ip, r3, ip, r5
 800cc04:	fb95 f7f2 	sdiv	r7, r5, r2
 800cc08:	fabc f68c 	clz	r6, ip
 800cc0c:	4601      	mov	r1, r0
 800cc0e:	fb02 5717 	mls	r7, r2, r7, r5
 800cc12:	6045      	str	r5, [r0, #4]
 800cc14:	0976      	lsrs	r6, r6, #5
 800cc16:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 800cc1a:	f005 0203 	and.w	r2, r5, #3
 800cc1e:	7a0d      	ldrb	r5, [r1, #8]
 800cc20:	694b      	ldr	r3, [r1, #20]
 800cc22:	2d4a      	cmp	r5, #74	; 0x4a
 800cc24:	d12d      	bne.n	800cc82 <__tzcalc_limits+0xce>
 800cc26:	eb04 0e03 	add.w	lr, r4, r3
 800cc2a:	b902      	cbnz	r2, 800cc2e <__tzcalc_limits+0x7a>
 800cc2c:	b917      	cbnz	r7, 800cc34 <__tzcalc_limits+0x80>
 800cc2e:	f1bc 0f00 	cmp.w	ip, #0
 800cc32:	d124      	bne.n	800cc7e <__tzcalc_limits+0xca>
 800cc34:	2b3b      	cmp	r3, #59	; 0x3b
 800cc36:	bfd4      	ite	le
 800cc38:	2300      	movle	r3, #0
 800cc3a:	2301      	movgt	r3, #1
 800cc3c:	4473      	add	r3, lr
 800cc3e:	3b01      	subs	r3, #1
 800cc40:	698d      	ldr	r5, [r1, #24]
 800cc42:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 800cd00 <__tzcalc_limits+0x14c>
 800cc46:	ea4f 7ee5 	mov.w	lr, r5, asr #31
 800cc4a:	fbc3 5e08 	smlal	r5, lr, r3, r8
 800cc4e:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800cc50:	18ed      	adds	r5, r5, r3
 800cc52:	eb4e 73e3 	adc.w	r3, lr, r3, asr #31
 800cc56:	e9c1 5308 	strd	r5, r3, [r1, #32]
 800cc5a:	3128      	adds	r1, #40	; 0x28
 800cc5c:	458b      	cmp	fp, r1
 800cc5e:	d1de      	bne.n	800cc1e <__tzcalc_limits+0x6a>
 800cc60:	e9d0 1312 	ldrd	r1, r3, [r0, #72]	; 0x48
 800cc64:	e9d0 4208 	ldrd	r4, r2, [r0, #32]
 800cc68:	428c      	cmp	r4, r1
 800cc6a:	eb72 0303 	sbcs.w	r3, r2, r3
 800cc6e:	bfb4      	ite	lt
 800cc70:	2301      	movlt	r3, #1
 800cc72:	2300      	movge	r3, #0
 800cc74:	6003      	str	r3, [r0, #0]
 800cc76:	2001      	movs	r0, #1
 800cc78:	b003      	add	sp, #12
 800cc7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc7e:	2300      	movs	r3, #0
 800cc80:	e7dc      	b.n	800cc3c <__tzcalc_limits+0x88>
 800cc82:	2d44      	cmp	r5, #68	; 0x44
 800cc84:	d101      	bne.n	800cc8a <__tzcalc_limits+0xd6>
 800cc86:	4423      	add	r3, r4
 800cc88:	e7da      	b.n	800cc40 <__tzcalc_limits+0x8c>
 800cc8a:	bb8a      	cbnz	r2, 800ccf0 <__tzcalc_limits+0x13c>
 800cc8c:	2f00      	cmp	r7, #0
 800cc8e:	bf0c      	ite	eq
 800cc90:	4635      	moveq	r5, r6
 800cc92:	2501      	movne	r5, #1
 800cc94:	f04f 0a30 	mov.w	sl, #48	; 0x30
 800cc98:	f8d1 e00c 	ldr.w	lr, [r1, #12]
 800cc9c:	f04f 0800 	mov.w	r8, #0
 800cca0:	f8cd e004 	str.w	lr, [sp, #4]
 800cca4:	46a6      	mov	lr, r4
 800cca6:	f8df 905c 	ldr.w	r9, [pc, #92]	; 800cd04 <__tzcalc_limits+0x150>
 800ccaa:	fb0a 9505 	mla	r5, sl, r5, r9
 800ccae:	3d04      	subs	r5, #4
 800ccb0:	f8dd a004 	ldr.w	sl, [sp, #4]
 800ccb4:	f108 0801 	add.w	r8, r8, #1
 800ccb8:	45c2      	cmp	sl, r8
 800ccba:	f855 9028 	ldr.w	r9, [r5, r8, lsl #2]
 800ccbe:	dc19      	bgt.n	800ccf4 <__tzcalc_limits+0x140>
 800ccc0:	f04f 0807 	mov.w	r8, #7
 800ccc4:	f10e 0504 	add.w	r5, lr, #4
 800ccc8:	fb95 f8f8 	sdiv	r8, r5, r8
 800cccc:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
 800ccd0:	eba5 0808 	sub.w	r8, r5, r8
 800ccd4:	ebb3 0808 	subs.w	r8, r3, r8
 800ccd8:	690b      	ldr	r3, [r1, #16]
 800ccda:	bf48      	it	mi
 800ccdc:	f108 0807 	addmi.w	r8, r8, #7
 800cce0:	3b01      	subs	r3, #1
 800cce2:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800cce6:	4443      	add	r3, r8
 800cce8:	454b      	cmp	r3, r9
 800ccea:	da05      	bge.n	800ccf8 <__tzcalc_limits+0x144>
 800ccec:	4473      	add	r3, lr
 800ccee:	e7a7      	b.n	800cc40 <__tzcalc_limits+0x8c>
 800ccf0:	4635      	mov	r5, r6
 800ccf2:	e7cf      	b.n	800cc94 <__tzcalc_limits+0xe0>
 800ccf4:	44ce      	add	lr, r9
 800ccf6:	e7db      	b.n	800ccb0 <__tzcalc_limits+0xfc>
 800ccf8:	3b07      	subs	r3, #7
 800ccfa:	e7f5      	b.n	800cce8 <__tzcalc_limits+0x134>
 800ccfc:	2000      	movs	r0, #0
 800ccfe:	e7bb      	b.n	800cc78 <__tzcalc_limits+0xc4>
 800cd00:	00015180 	.word	0x00015180
 800cd04:	0800f6c0 	.word	0x0800f6c0

0800cd08 <__tz_lock>:
 800cd08:	4801      	ldr	r0, [pc, #4]	; (800cd10 <__tz_lock+0x8>)
 800cd0a:	f000 bacc 	b.w	800d2a6 <__retarget_lock_acquire>
 800cd0e:	bf00      	nop
 800cd10:	20002c44 	.word	0x20002c44

0800cd14 <__tz_unlock>:
 800cd14:	4801      	ldr	r0, [pc, #4]	; (800cd1c <__tz_unlock+0x8>)
 800cd16:	f000 bac8 	b.w	800d2aa <__retarget_lock_release>
 800cd1a:	bf00      	nop
 800cd1c:	20002c44 	.word	0x20002c44

0800cd20 <_tzset_unlocked>:
 800cd20:	4b01      	ldr	r3, [pc, #4]	; (800cd28 <_tzset_unlocked+0x8>)
 800cd22:	6818      	ldr	r0, [r3, #0]
 800cd24:	f000 b802 	b.w	800cd2c <_tzset_unlocked_r>
 800cd28:	200004e4 	.word	0x200004e4

0800cd2c <_tzset_unlocked_r>:
 800cd2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd30:	b08d      	sub	sp, #52	; 0x34
 800cd32:	4607      	mov	r7, r0
 800cd34:	f000 fa04 	bl	800d140 <__gettzinfo>
 800cd38:	49b1      	ldr	r1, [pc, #708]	; (800d000 <_tzset_unlocked_r+0x2d4>)
 800cd3a:	4605      	mov	r5, r0
 800cd3c:	4638      	mov	r0, r7
 800cd3e:	f000 f9f7 	bl	800d130 <_getenv_r>
 800cd42:	4eb0      	ldr	r6, [pc, #704]	; (800d004 <_tzset_unlocked_r+0x2d8>)
 800cd44:	4604      	mov	r4, r0
 800cd46:	b970      	cbnz	r0, 800cd66 <_tzset_unlocked_r+0x3a>
 800cd48:	4baf      	ldr	r3, [pc, #700]	; (800d008 <_tzset_unlocked_r+0x2dc>)
 800cd4a:	4ab0      	ldr	r2, [pc, #704]	; (800d00c <_tzset_unlocked_r+0x2e0>)
 800cd4c:	6018      	str	r0, [r3, #0]
 800cd4e:	4bb0      	ldr	r3, [pc, #704]	; (800d010 <_tzset_unlocked_r+0x2e4>)
 800cd50:	6018      	str	r0, [r3, #0]
 800cd52:	4bb0      	ldr	r3, [pc, #704]	; (800d014 <_tzset_unlocked_r+0x2e8>)
 800cd54:	6830      	ldr	r0, [r6, #0]
 800cd56:	e9c3 2200 	strd	r2, r2, [r3]
 800cd5a:	f7ff fa5d 	bl	800c218 <free>
 800cd5e:	6034      	str	r4, [r6, #0]
 800cd60:	b00d      	add	sp, #52	; 0x34
 800cd62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd66:	6831      	ldr	r1, [r6, #0]
 800cd68:	2900      	cmp	r1, #0
 800cd6a:	d162      	bne.n	800ce32 <_tzset_unlocked_r+0x106>
 800cd6c:	6830      	ldr	r0, [r6, #0]
 800cd6e:	f7ff fa53 	bl	800c218 <free>
 800cd72:	4620      	mov	r0, r4
 800cd74:	f7f3 f9ea 	bl	800014c <strlen>
 800cd78:	1c41      	adds	r1, r0, #1
 800cd7a:	4638      	mov	r0, r7
 800cd7c:	f7ff fd54 	bl	800c828 <_malloc_r>
 800cd80:	6030      	str	r0, [r6, #0]
 800cd82:	2800      	cmp	r0, #0
 800cd84:	d15a      	bne.n	800ce3c <_tzset_unlocked_r+0x110>
 800cd86:	7823      	ldrb	r3, [r4, #0]
 800cd88:	ae0a      	add	r6, sp, #40	; 0x28
 800cd8a:	2b3a      	cmp	r3, #58	; 0x3a
 800cd8c:	bf08      	it	eq
 800cd8e:	3401      	addeq	r4, #1
 800cd90:	4633      	mov	r3, r6
 800cd92:	4620      	mov	r0, r4
 800cd94:	4aa0      	ldr	r2, [pc, #640]	; (800d018 <_tzset_unlocked_r+0x2ec>)
 800cd96:	49a1      	ldr	r1, [pc, #644]	; (800d01c <_tzset_unlocked_r+0x2f0>)
 800cd98:	f000 fee0 	bl	800db5c <siscanf>
 800cd9c:	2800      	cmp	r0, #0
 800cd9e:	dddf      	ble.n	800cd60 <_tzset_unlocked_r+0x34>
 800cda0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cda2:	18e7      	adds	r7, r4, r3
 800cda4:	5ce3      	ldrb	r3, [r4, r3]
 800cda6:	2b2d      	cmp	r3, #45	; 0x2d
 800cda8:	d14c      	bne.n	800ce44 <_tzset_unlocked_r+0x118>
 800cdaa:	f04f 38ff 	mov.w	r8, #4294967295
 800cdae:	3701      	adds	r7, #1
 800cdb0:	2400      	movs	r4, #0
 800cdb2:	f10d 0a20 	add.w	sl, sp, #32
 800cdb6:	f10d 0b1e 	add.w	fp, sp, #30
 800cdba:	4633      	mov	r3, r6
 800cdbc:	4638      	mov	r0, r7
 800cdbe:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 800cdc2:	4997      	ldr	r1, [pc, #604]	; (800d020 <_tzset_unlocked_r+0x2f4>)
 800cdc4:	9603      	str	r6, [sp, #12]
 800cdc6:	f8cd b000 	str.w	fp, [sp]
 800cdca:	aa07      	add	r2, sp, #28
 800cdcc:	f8ad 401e 	strh.w	r4, [sp, #30]
 800cdd0:	f8ad 4020 	strh.w	r4, [sp, #32]
 800cdd4:	f000 fec2 	bl	800db5c <siscanf>
 800cdd8:	42a0      	cmp	r0, r4
 800cdda:	ddc1      	ble.n	800cd60 <_tzset_unlocked_r+0x34>
 800cddc:	213c      	movs	r1, #60	; 0x3c
 800cdde:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800cde2:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800cde6:	f8df 923c 	ldr.w	r9, [pc, #572]	; 800d024 <_tzset_unlocked_r+0x2f8>
 800cdea:	fb01 3302 	mla	r3, r1, r2, r3
 800cdee:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800cdf2:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800cdf6:	fb01 3302 	mla	r3, r1, r2, r3
 800cdfa:	fb08 f303 	mul.w	r3, r8, r3
 800cdfe:	f8df 8214 	ldr.w	r8, [pc, #532]	; 800d014 <_tzset_unlocked_r+0x2e8>
 800ce02:	62ab      	str	r3, [r5, #40]	; 0x28
 800ce04:	4b84      	ldr	r3, [pc, #528]	; (800d018 <_tzset_unlocked_r+0x2ec>)
 800ce06:	464a      	mov	r2, r9
 800ce08:	f8c8 3000 	str.w	r3, [r8]
 800ce0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce0e:	4983      	ldr	r1, [pc, #524]	; (800d01c <_tzset_unlocked_r+0x2f0>)
 800ce10:	441f      	add	r7, r3
 800ce12:	4638      	mov	r0, r7
 800ce14:	4633      	mov	r3, r6
 800ce16:	f000 fea1 	bl	800db5c <siscanf>
 800ce1a:	42a0      	cmp	r0, r4
 800ce1c:	dc18      	bgt.n	800ce50 <_tzset_unlocked_r+0x124>
 800ce1e:	f8d8 3000 	ldr.w	r3, [r8]
 800ce22:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800ce24:	f8c8 3004 	str.w	r3, [r8, #4]
 800ce28:	4b77      	ldr	r3, [pc, #476]	; (800d008 <_tzset_unlocked_r+0x2dc>)
 800ce2a:	601a      	str	r2, [r3, #0]
 800ce2c:	4b78      	ldr	r3, [pc, #480]	; (800d010 <_tzset_unlocked_r+0x2e4>)
 800ce2e:	601c      	str	r4, [r3, #0]
 800ce30:	e796      	b.n	800cd60 <_tzset_unlocked_r+0x34>
 800ce32:	f7f3 f993 	bl	800015c <strcmp>
 800ce36:	2800      	cmp	r0, #0
 800ce38:	d198      	bne.n	800cd6c <_tzset_unlocked_r+0x40>
 800ce3a:	e791      	b.n	800cd60 <_tzset_unlocked_r+0x34>
 800ce3c:	4621      	mov	r1, r4
 800ce3e:	f000 fefc 	bl	800dc3a <strcpy>
 800ce42:	e7a0      	b.n	800cd86 <_tzset_unlocked_r+0x5a>
 800ce44:	2b2b      	cmp	r3, #43	; 0x2b
 800ce46:	f04f 0801 	mov.w	r8, #1
 800ce4a:	bf08      	it	eq
 800ce4c:	3701      	addeq	r7, #1
 800ce4e:	e7af      	b.n	800cdb0 <_tzset_unlocked_r+0x84>
 800ce50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce52:	f8c8 9004 	str.w	r9, [r8, #4]
 800ce56:	18fc      	adds	r4, r7, r3
 800ce58:	5cfb      	ldrb	r3, [r7, r3]
 800ce5a:	2b2d      	cmp	r3, #45	; 0x2d
 800ce5c:	f040 808c 	bne.w	800cf78 <_tzset_unlocked_r+0x24c>
 800ce60:	f04f 37ff 	mov.w	r7, #4294967295
 800ce64:	3401      	adds	r4, #1
 800ce66:	2300      	movs	r3, #0
 800ce68:	4620      	mov	r0, r4
 800ce6a:	f8ad 301c 	strh.w	r3, [sp, #28]
 800ce6e:	f8ad 301e 	strh.w	r3, [sp, #30]
 800ce72:	f8ad 3020 	strh.w	r3, [sp, #32]
 800ce76:	930a      	str	r3, [sp, #40]	; 0x28
 800ce78:	e9cd a602 	strd	sl, r6, [sp, #8]
 800ce7c:	4633      	mov	r3, r6
 800ce7e:	e9cd b600 	strd	fp, r6, [sp]
 800ce82:	4967      	ldr	r1, [pc, #412]	; (800d020 <_tzset_unlocked_r+0x2f4>)
 800ce84:	aa07      	add	r2, sp, #28
 800ce86:	f000 fe69 	bl	800db5c <siscanf>
 800ce8a:	2800      	cmp	r0, #0
 800ce8c:	dc7a      	bgt.n	800cf84 <_tzset_unlocked_r+0x258>
 800ce8e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800ce90:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 800ce94:	462f      	mov	r7, r5
 800ce96:	f04f 0900 	mov.w	r9, #0
 800ce9a:	652b      	str	r3, [r5, #80]	; 0x50
 800ce9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce9e:	441c      	add	r4, r3
 800cea0:	7823      	ldrb	r3, [r4, #0]
 800cea2:	2b2c      	cmp	r3, #44	; 0x2c
 800cea4:	bf08      	it	eq
 800cea6:	3401      	addeq	r4, #1
 800cea8:	f894 8000 	ldrb.w	r8, [r4]
 800ceac:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 800ceb0:	d17a      	bne.n	800cfa8 <_tzset_unlocked_r+0x27c>
 800ceb2:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 800ceb6:	e9cd 6301 	strd	r6, r3, [sp, #4]
 800ceba:	ab09      	add	r3, sp, #36	; 0x24
 800cebc:	9300      	str	r3, [sp, #0]
 800cebe:	4620      	mov	r0, r4
 800cec0:	4633      	mov	r3, r6
 800cec2:	4959      	ldr	r1, [pc, #356]	; (800d028 <_tzset_unlocked_r+0x2fc>)
 800cec4:	9603      	str	r6, [sp, #12]
 800cec6:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 800ceca:	f000 fe47 	bl	800db5c <siscanf>
 800cece:	2803      	cmp	r0, #3
 800ced0:	f47f af46 	bne.w	800cd60 <_tzset_unlocked_r+0x34>
 800ced4:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 800ced8:	1e4b      	subs	r3, r1, #1
 800ceda:	2b0b      	cmp	r3, #11
 800cedc:	f63f af40 	bhi.w	800cd60 <_tzset_unlocked_r+0x34>
 800cee0:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 800cee4:	1e53      	subs	r3, r2, #1
 800cee6:	2b04      	cmp	r3, #4
 800cee8:	f63f af3a 	bhi.w	800cd60 <_tzset_unlocked_r+0x34>
 800ceec:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 800cef0:	2b06      	cmp	r3, #6
 800cef2:	f63f af35 	bhi.w	800cd60 <_tzset_unlocked_r+0x34>
 800cef6:	e9c7 1203 	strd	r1, r2, [r7, #12]
 800cefa:	f887 8008 	strb.w	r8, [r7, #8]
 800cefe:	617b      	str	r3, [r7, #20]
 800cf00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cf02:	eb04 0803 	add.w	r8, r4, r3
 800cf06:	2302      	movs	r3, #2
 800cf08:	f8ad 301c 	strh.w	r3, [sp, #28]
 800cf0c:	2300      	movs	r3, #0
 800cf0e:	f8ad 301e 	strh.w	r3, [sp, #30]
 800cf12:	f8ad 3020 	strh.w	r3, [sp, #32]
 800cf16:	930a      	str	r3, [sp, #40]	; 0x28
 800cf18:	f898 3000 	ldrb.w	r3, [r8]
 800cf1c:	2b2f      	cmp	r3, #47	; 0x2f
 800cf1e:	d109      	bne.n	800cf34 <_tzset_unlocked_r+0x208>
 800cf20:	4633      	mov	r3, r6
 800cf22:	4640      	mov	r0, r8
 800cf24:	e9cd a602 	strd	sl, r6, [sp, #8]
 800cf28:	e9cd b600 	strd	fp, r6, [sp]
 800cf2c:	493f      	ldr	r1, [pc, #252]	; (800d02c <_tzset_unlocked_r+0x300>)
 800cf2e:	aa07      	add	r2, sp, #28
 800cf30:	f000 fe14 	bl	800db5c <siscanf>
 800cf34:	213c      	movs	r1, #60	; 0x3c
 800cf36:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800cf3a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800cf3e:	3728      	adds	r7, #40	; 0x28
 800cf40:	fb01 3302 	mla	r3, r1, r2, r3
 800cf44:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800cf48:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800cf4c:	fb01 3302 	mla	r3, r1, r2, r3
 800cf50:	f847 3c10 	str.w	r3, [r7, #-16]
 800cf54:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800cf56:	4444      	add	r4, r8
 800cf58:	f1b9 0f00 	cmp.w	r9, #0
 800cf5c:	d021      	beq.n	800cfa2 <_tzset_unlocked_r+0x276>
 800cf5e:	6868      	ldr	r0, [r5, #4]
 800cf60:	f7ff fe28 	bl	800cbb4 <__tzcalc_limits>
 800cf64:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800cf66:	4b28      	ldr	r3, [pc, #160]	; (800d008 <_tzset_unlocked_r+0x2dc>)
 800cf68:	601a      	str	r2, [r3, #0]
 800cf6a:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800cf6c:	1a9b      	subs	r3, r3, r2
 800cf6e:	bf18      	it	ne
 800cf70:	2301      	movne	r3, #1
 800cf72:	4a27      	ldr	r2, [pc, #156]	; (800d010 <_tzset_unlocked_r+0x2e4>)
 800cf74:	6013      	str	r3, [r2, #0]
 800cf76:	e6f3      	b.n	800cd60 <_tzset_unlocked_r+0x34>
 800cf78:	2b2b      	cmp	r3, #43	; 0x2b
 800cf7a:	f04f 0701 	mov.w	r7, #1
 800cf7e:	bf08      	it	eq
 800cf80:	3401      	addeq	r4, #1
 800cf82:	e770      	b.n	800ce66 <_tzset_unlocked_r+0x13a>
 800cf84:	213c      	movs	r1, #60	; 0x3c
 800cf86:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800cf8a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800cf8e:	fb01 3302 	mla	r3, r1, r2, r3
 800cf92:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800cf96:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800cf9a:	fb01 3302 	mla	r3, r1, r2, r3
 800cf9e:	437b      	muls	r3, r7
 800cfa0:	e778      	b.n	800ce94 <_tzset_unlocked_r+0x168>
 800cfa2:	f04f 0901 	mov.w	r9, #1
 800cfa6:	e77b      	b.n	800cea0 <_tzset_unlocked_r+0x174>
 800cfa8:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 800cfac:	bf0a      	itet	eq
 800cfae:	4643      	moveq	r3, r8
 800cfb0:	2344      	movne	r3, #68	; 0x44
 800cfb2:	3401      	addeq	r4, #1
 800cfb4:	220a      	movs	r2, #10
 800cfb6:	4620      	mov	r0, r4
 800cfb8:	a90b      	add	r1, sp, #44	; 0x2c
 800cfba:	9305      	str	r3, [sp, #20]
 800cfbc:	f000 fece 	bl	800dd5c <strtoul>
 800cfc0:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800cfc4:	9b05      	ldr	r3, [sp, #20]
 800cfc6:	45a0      	cmp	r8, r4
 800cfc8:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 800cfcc:	d114      	bne.n	800cff8 <_tzset_unlocked_r+0x2cc>
 800cfce:	234d      	movs	r3, #77	; 0x4d
 800cfd0:	f1b9 0f00 	cmp.w	r9, #0
 800cfd4:	d107      	bne.n	800cfe6 <_tzset_unlocked_r+0x2ba>
 800cfd6:	2103      	movs	r1, #3
 800cfd8:	722b      	strb	r3, [r5, #8]
 800cfda:	2302      	movs	r3, #2
 800cfdc:	f8c5 9014 	str.w	r9, [r5, #20]
 800cfe0:	e9c5 1303 	strd	r1, r3, [r5, #12]
 800cfe4:	e78f      	b.n	800cf06 <_tzset_unlocked_r+0x1da>
 800cfe6:	220b      	movs	r2, #11
 800cfe8:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 800cfec:	2301      	movs	r3, #1
 800cfee:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 800cff2:	2300      	movs	r3, #0
 800cff4:	63eb      	str	r3, [r5, #60]	; 0x3c
 800cff6:	e786      	b.n	800cf06 <_tzset_unlocked_r+0x1da>
 800cff8:	b280      	uxth	r0, r0
 800cffa:	723b      	strb	r3, [r7, #8]
 800cffc:	6178      	str	r0, [r7, #20]
 800cffe:	e782      	b.n	800cf06 <_tzset_unlocked_r+0x1da>
 800d000:	0800f7d8 	.word	0x0800f7d8
 800d004:	20002c34 	.word	0x20002c34
 800d008:	20002c3c 	.word	0x20002c3c
 800d00c:	0800f7db 	.word	0x0800f7db
 800d010:	20002c38 	.word	0x20002c38
 800d014:	20000548 	.word	0x20000548
 800d018:	20002c27 	.word	0x20002c27
 800d01c:	0800f7df 	.word	0x0800f7df
 800d020:	0800f802 	.word	0x0800f802
 800d024:	20002c1c 	.word	0x20002c1c
 800d028:	0800f7ee 	.word	0x0800f7ee
 800d02c:	0800f801 	.word	0x0800f801

0800d030 <__assert_func>:
 800d030:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d032:	4614      	mov	r4, r2
 800d034:	461a      	mov	r2, r3
 800d036:	4b09      	ldr	r3, [pc, #36]	; (800d05c <__assert_func+0x2c>)
 800d038:	4605      	mov	r5, r0
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	68d8      	ldr	r0, [r3, #12]
 800d03e:	b14c      	cbz	r4, 800d054 <__assert_func+0x24>
 800d040:	4b07      	ldr	r3, [pc, #28]	; (800d060 <__assert_func+0x30>)
 800d042:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d046:	9100      	str	r1, [sp, #0]
 800d048:	462b      	mov	r3, r5
 800d04a:	4906      	ldr	r1, [pc, #24]	; (800d064 <__assert_func+0x34>)
 800d04c:	f000 f822 	bl	800d094 <fiprintf>
 800d050:	f000 ff60 	bl	800df14 <abort>
 800d054:	4b04      	ldr	r3, [pc, #16]	; (800d068 <__assert_func+0x38>)
 800d056:	461c      	mov	r4, r3
 800d058:	e7f3      	b.n	800d042 <__assert_func+0x12>
 800d05a:	bf00      	nop
 800d05c:	200004e4 	.word	0x200004e4
 800d060:	0800f814 	.word	0x0800f814
 800d064:	0800f821 	.word	0x0800f821
 800d068:	0800f84f 	.word	0x0800f84f

0800d06c <div>:
 800d06c:	b510      	push	{r4, lr}
 800d06e:	fb91 f4f2 	sdiv	r4, r1, r2
 800d072:	2900      	cmp	r1, #0
 800d074:	fb02 1314 	mls	r3, r2, r4, r1
 800d078:	db06      	blt.n	800d088 <div+0x1c>
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	da01      	bge.n	800d082 <div+0x16>
 800d07e:	3401      	adds	r4, #1
 800d080:	1a9b      	subs	r3, r3, r2
 800d082:	e9c0 4300 	strd	r4, r3, [r0]
 800d086:	bd10      	pop	{r4, pc}
 800d088:	2b00      	cmp	r3, #0
 800d08a:	bfc4      	itt	gt
 800d08c:	f104 34ff 	addgt.w	r4, r4, #4294967295
 800d090:	189b      	addgt	r3, r3, r2
 800d092:	e7f6      	b.n	800d082 <div+0x16>

0800d094 <fiprintf>:
 800d094:	b40e      	push	{r1, r2, r3}
 800d096:	b503      	push	{r0, r1, lr}
 800d098:	4601      	mov	r1, r0
 800d09a:	ab03      	add	r3, sp, #12
 800d09c:	4805      	ldr	r0, [pc, #20]	; (800d0b4 <fiprintf+0x20>)
 800d09e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d0a2:	6800      	ldr	r0, [r0, #0]
 800d0a4:	9301      	str	r3, [sp, #4]
 800d0a6:	f000 fa93 	bl	800d5d0 <_vfiprintf_r>
 800d0aa:	b002      	add	sp, #8
 800d0ac:	f85d eb04 	ldr.w	lr, [sp], #4
 800d0b0:	b003      	add	sp, #12
 800d0b2:	4770      	bx	lr
 800d0b4:	200004e4 	.word	0x200004e4

0800d0b8 <_findenv_r>:
 800d0b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0bc:	f8df a06c 	ldr.w	sl, [pc, #108]	; 800d12c <_findenv_r+0x74>
 800d0c0:	4607      	mov	r7, r0
 800d0c2:	4689      	mov	r9, r1
 800d0c4:	4616      	mov	r6, r2
 800d0c6:	f000 ff3d 	bl	800df44 <__env_lock>
 800d0ca:	f8da 4000 	ldr.w	r4, [sl]
 800d0ce:	b134      	cbz	r4, 800d0de <_findenv_r+0x26>
 800d0d0:	464b      	mov	r3, r9
 800d0d2:	4698      	mov	r8, r3
 800d0d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d0d8:	b13a      	cbz	r2, 800d0ea <_findenv_r+0x32>
 800d0da:	2a3d      	cmp	r2, #61	; 0x3d
 800d0dc:	d1f9      	bne.n	800d0d2 <_findenv_r+0x1a>
 800d0de:	4638      	mov	r0, r7
 800d0e0:	f000 ff36 	bl	800df50 <__env_unlock>
 800d0e4:	2000      	movs	r0, #0
 800d0e6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0ea:	eba8 0809 	sub.w	r8, r8, r9
 800d0ee:	46a3      	mov	fp, r4
 800d0f0:	f854 0b04 	ldr.w	r0, [r4], #4
 800d0f4:	2800      	cmp	r0, #0
 800d0f6:	d0f2      	beq.n	800d0de <_findenv_r+0x26>
 800d0f8:	4642      	mov	r2, r8
 800d0fa:	4649      	mov	r1, r9
 800d0fc:	f000 fda5 	bl	800dc4a <strncmp>
 800d100:	2800      	cmp	r0, #0
 800d102:	d1f4      	bne.n	800d0ee <_findenv_r+0x36>
 800d104:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800d108:	eb03 0508 	add.w	r5, r3, r8
 800d10c:	f813 3008 	ldrb.w	r3, [r3, r8]
 800d110:	2b3d      	cmp	r3, #61	; 0x3d
 800d112:	d1ec      	bne.n	800d0ee <_findenv_r+0x36>
 800d114:	f8da 3000 	ldr.w	r3, [sl]
 800d118:	4638      	mov	r0, r7
 800d11a:	ebab 0303 	sub.w	r3, fp, r3
 800d11e:	109b      	asrs	r3, r3, #2
 800d120:	6033      	str	r3, [r6, #0]
 800d122:	f000 ff15 	bl	800df50 <__env_unlock>
 800d126:	1c68      	adds	r0, r5, #1
 800d128:	e7dd      	b.n	800d0e6 <_findenv_r+0x2e>
 800d12a:	bf00      	nop
 800d12c:	20000490 	.word	0x20000490

0800d130 <_getenv_r>:
 800d130:	b507      	push	{r0, r1, r2, lr}
 800d132:	aa01      	add	r2, sp, #4
 800d134:	f7ff ffc0 	bl	800d0b8 <_findenv_r>
 800d138:	b003      	add	sp, #12
 800d13a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800d140 <__gettzinfo>:
 800d140:	4800      	ldr	r0, [pc, #0]	; (800d144 <__gettzinfo+0x4>)
 800d142:	4770      	bx	lr
 800d144:	20000550 	.word	0x20000550

0800d148 <gmtime_r>:
 800d148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d14c:	e9d0 6700 	ldrd	r6, r7, [r0]
 800d150:	460c      	mov	r4, r1
 800d152:	2300      	movs	r3, #0
 800d154:	4630      	mov	r0, r6
 800d156:	4639      	mov	r1, r7
 800d158:	4a4e      	ldr	r2, [pc, #312]	; (800d294 <gmtime_r+0x14c>)
 800d15a:	f7f3 f829 	bl	80001b0 <__aeabi_ldivmod>
 800d15e:	4639      	mov	r1, r7
 800d160:	4605      	mov	r5, r0
 800d162:	2300      	movs	r3, #0
 800d164:	4630      	mov	r0, r6
 800d166:	4a4b      	ldr	r2, [pc, #300]	; (800d294 <gmtime_r+0x14c>)
 800d168:	f7f3 f822 	bl	80001b0 <__aeabi_ldivmod>
 800d16c:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 800d170:	2a00      	cmp	r2, #0
 800d172:	bfbc      	itt	lt
 800d174:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 800d178:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 800d17c:	fbb2 f1f0 	udiv	r1, r2, r0
 800d180:	fb00 2211 	mls	r2, r0, r1, r2
 800d184:	f04f 003c 	mov.w	r0, #60	; 0x3c
 800d188:	60a1      	str	r1, [r4, #8]
 800d18a:	fbb2 f1f0 	udiv	r1, r2, r0
 800d18e:	fb00 2211 	mls	r2, r0, r1, r2
 800d192:	6061      	str	r1, [r4, #4]
 800d194:	f04f 0107 	mov.w	r1, #7
 800d198:	f505 232f 	add.w	r3, r5, #716800	; 0xaf000
 800d19c:	bfac      	ite	ge
 800d19e:	f603 236c 	addwge	r3, r3, #2668	; 0xa6c
 800d1a2:	f603 236b 	addwlt	r3, r3, #2667	; 0xa6b
 800d1a6:	6022      	str	r2, [r4, #0]
 800d1a8:	1cda      	adds	r2, r3, #3
 800d1aa:	fb92 f1f1 	sdiv	r1, r2, r1
 800d1ae:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800d1b2:	1a52      	subs	r2, r2, r1
 800d1b4:	bf48      	it	mi
 800d1b6:	3207      	addmi	r2, #7
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	4d37      	ldr	r5, [pc, #220]	; (800d298 <gmtime_r+0x150>)
 800d1bc:	61a2      	str	r2, [r4, #24]
 800d1be:	bfbd      	ittte	lt
 800d1c0:	f5a3 320e 	sublt.w	r2, r3, #145408	; 0x23800
 800d1c4:	f5a2 722c 	sublt.w	r2, r2, #688	; 0x2b0
 800d1c8:	fb92 f5f5 	sdivlt	r5, r2, r5
 800d1cc:	fb93 f5f5 	sdivge	r5, r3, r5
 800d1d0:	4832      	ldr	r0, [pc, #200]	; (800d29c <gmtime_r+0x154>)
 800d1d2:	f648 62ac 	movw	r2, #36524	; 0x8eac
 800d1d6:	fb00 3005 	mla	r0, r0, r5, r3
 800d1da:	f240 53b4 	movw	r3, #1460	; 0x5b4
 800d1de:	fbb0 f2f2 	udiv	r2, r0, r2
 800d1e2:	fbb0 f1f3 	udiv	r1, r0, r3
 800d1e6:	4402      	add	r2, r0
 800d1e8:	1a52      	subs	r2, r2, r1
 800d1ea:	492d      	ldr	r1, [pc, #180]	; (800d2a0 <gmtime_r+0x158>)
 800d1ec:	f240 1c6d 	movw	ip, #365	; 0x16d
 800d1f0:	fbb0 f1f1 	udiv	r1, r0, r1
 800d1f4:	1a52      	subs	r2, r2, r1
 800d1f6:	fbb2 f1fc 	udiv	r1, r2, ip
 800d1fa:	2764      	movs	r7, #100	; 0x64
 800d1fc:	fbb2 f3f3 	udiv	r3, r2, r3
 800d200:	fbb1 f6f7 	udiv	r6, r1, r7
 800d204:	2299      	movs	r2, #153	; 0x99
 800d206:	1af3      	subs	r3, r6, r3
 800d208:	4403      	add	r3, r0
 800d20a:	fb0c 3311 	mls	r3, ip, r1, r3
 800d20e:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
 800d212:	f10e 0e02 	add.w	lr, lr, #2
 800d216:	fbbe f0f2 	udiv	r0, lr, r2
 800d21a:	f04f 0805 	mov.w	r8, #5
 800d21e:	4342      	muls	r2, r0
 800d220:	3202      	adds	r2, #2
 800d222:	fbb2 f2f8 	udiv	r2, r2, r8
 800d226:	f103 0c01 	add.w	ip, r3, #1
 800d22a:	ebac 0c02 	sub.w	ip, ip, r2
 800d22e:	f240 52f9 	movw	r2, #1529	; 0x5f9
 800d232:	4596      	cmp	lr, r2
 800d234:	bf94      	ite	ls
 800d236:	2202      	movls	r2, #2
 800d238:	f06f 0209 	mvnhi.w	r2, #9
 800d23c:	4410      	add	r0, r2
 800d23e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800d242:	fb02 1505 	mla	r5, r2, r5, r1
 800d246:	2801      	cmp	r0, #1
 800d248:	bf98      	it	ls
 800d24a:	3501      	addls	r5, #1
 800d24c:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 800d250:	d30d      	bcc.n	800d26e <gmtime_r+0x126>
 800d252:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800d256:	61e3      	str	r3, [r4, #28]
 800d258:	2300      	movs	r3, #0
 800d25a:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 800d25e:	e9c4 0504 	strd	r0, r5, [r4, #16]
 800d262:	f8c4 c00c 	str.w	ip, [r4, #12]
 800d266:	4620      	mov	r0, r4
 800d268:	6223      	str	r3, [r4, #32]
 800d26a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d26e:	078a      	lsls	r2, r1, #30
 800d270:	d102      	bne.n	800d278 <gmtime_r+0x130>
 800d272:	fb07 1616 	mls	r6, r7, r6, r1
 800d276:	b95e      	cbnz	r6, 800d290 <gmtime_r+0x148>
 800d278:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800d27c:	fbb1 f6f2 	udiv	r6, r1, r2
 800d280:	fb02 1216 	mls	r2, r2, r6, r1
 800d284:	fab2 f282 	clz	r2, r2
 800d288:	0952      	lsrs	r2, r2, #5
 800d28a:	333b      	adds	r3, #59	; 0x3b
 800d28c:	4413      	add	r3, r2
 800d28e:	e7e2      	b.n	800d256 <gmtime_r+0x10e>
 800d290:	2201      	movs	r2, #1
 800d292:	e7fa      	b.n	800d28a <gmtime_r+0x142>
 800d294:	00015180 	.word	0x00015180
 800d298:	00023ab1 	.word	0x00023ab1
 800d29c:	fffdc54f 	.word	0xfffdc54f
 800d2a0:	00023ab0 	.word	0x00023ab0

0800d2a4 <__retarget_lock_init_recursive>:
 800d2a4:	4770      	bx	lr

0800d2a6 <__retarget_lock_acquire>:
 800d2a6:	4770      	bx	lr

0800d2a8 <__retarget_lock_acquire_recursive>:
 800d2a8:	4770      	bx	lr

0800d2aa <__retarget_lock_release>:
 800d2aa:	4770      	bx	lr

0800d2ac <__retarget_lock_release_recursive>:
 800d2ac:	4770      	bx	lr
	...

0800d2b0 <__malloc_lock>:
 800d2b0:	4801      	ldr	r0, [pc, #4]	; (800d2b8 <__malloc_lock+0x8>)
 800d2b2:	f7ff bff9 	b.w	800d2a8 <__retarget_lock_acquire_recursive>
 800d2b6:	bf00      	nop
 800d2b8:	20002c41 	.word	0x20002c41

0800d2bc <__malloc_unlock>:
 800d2bc:	4801      	ldr	r0, [pc, #4]	; (800d2c4 <__malloc_unlock+0x8>)
 800d2be:	f7ff bff5 	b.w	800d2ac <__retarget_lock_release_recursive>
 800d2c2:	bf00      	nop
 800d2c4:	20002c41 	.word	0x20002c41

0800d2c8 <__ssputs_r>:
 800d2c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d2cc:	688e      	ldr	r6, [r1, #8]
 800d2ce:	4682      	mov	sl, r0
 800d2d0:	429e      	cmp	r6, r3
 800d2d2:	460c      	mov	r4, r1
 800d2d4:	4690      	mov	r8, r2
 800d2d6:	461f      	mov	r7, r3
 800d2d8:	d838      	bhi.n	800d34c <__ssputs_r+0x84>
 800d2da:	898a      	ldrh	r2, [r1, #12]
 800d2dc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d2e0:	d032      	beq.n	800d348 <__ssputs_r+0x80>
 800d2e2:	6825      	ldr	r5, [r4, #0]
 800d2e4:	6909      	ldr	r1, [r1, #16]
 800d2e6:	3301      	adds	r3, #1
 800d2e8:	eba5 0901 	sub.w	r9, r5, r1
 800d2ec:	6965      	ldr	r5, [r4, #20]
 800d2ee:	444b      	add	r3, r9
 800d2f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d2f4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d2f8:	106d      	asrs	r5, r5, #1
 800d2fa:	429d      	cmp	r5, r3
 800d2fc:	bf38      	it	cc
 800d2fe:	461d      	movcc	r5, r3
 800d300:	0553      	lsls	r3, r2, #21
 800d302:	d531      	bpl.n	800d368 <__ssputs_r+0xa0>
 800d304:	4629      	mov	r1, r5
 800d306:	f7ff fa8f 	bl	800c828 <_malloc_r>
 800d30a:	4606      	mov	r6, r0
 800d30c:	b950      	cbnz	r0, 800d324 <__ssputs_r+0x5c>
 800d30e:	230c      	movs	r3, #12
 800d310:	f04f 30ff 	mov.w	r0, #4294967295
 800d314:	f8ca 3000 	str.w	r3, [sl]
 800d318:	89a3      	ldrh	r3, [r4, #12]
 800d31a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d31e:	81a3      	strh	r3, [r4, #12]
 800d320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d324:	464a      	mov	r2, r9
 800d326:	6921      	ldr	r1, [r4, #16]
 800d328:	f7fe ff8e 	bl	800c248 <memcpy>
 800d32c:	89a3      	ldrh	r3, [r4, #12]
 800d32e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d332:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d336:	81a3      	strh	r3, [r4, #12]
 800d338:	6126      	str	r6, [r4, #16]
 800d33a:	444e      	add	r6, r9
 800d33c:	6026      	str	r6, [r4, #0]
 800d33e:	463e      	mov	r6, r7
 800d340:	6165      	str	r5, [r4, #20]
 800d342:	eba5 0509 	sub.w	r5, r5, r9
 800d346:	60a5      	str	r5, [r4, #8]
 800d348:	42be      	cmp	r6, r7
 800d34a:	d900      	bls.n	800d34e <__ssputs_r+0x86>
 800d34c:	463e      	mov	r6, r7
 800d34e:	4632      	mov	r2, r6
 800d350:	4641      	mov	r1, r8
 800d352:	6820      	ldr	r0, [r4, #0]
 800d354:	f001 f83c 	bl	800e3d0 <memmove>
 800d358:	68a3      	ldr	r3, [r4, #8]
 800d35a:	2000      	movs	r0, #0
 800d35c:	1b9b      	subs	r3, r3, r6
 800d35e:	60a3      	str	r3, [r4, #8]
 800d360:	6823      	ldr	r3, [r4, #0]
 800d362:	4433      	add	r3, r6
 800d364:	6023      	str	r3, [r4, #0]
 800d366:	e7db      	b.n	800d320 <__ssputs_r+0x58>
 800d368:	462a      	mov	r2, r5
 800d36a:	f001 f84b 	bl	800e404 <_realloc_r>
 800d36e:	4606      	mov	r6, r0
 800d370:	2800      	cmp	r0, #0
 800d372:	d1e1      	bne.n	800d338 <__ssputs_r+0x70>
 800d374:	4650      	mov	r0, sl
 800d376:	6921      	ldr	r1, [r4, #16]
 800d378:	f7ff f9ee 	bl	800c758 <_free_r>
 800d37c:	e7c7      	b.n	800d30e <__ssputs_r+0x46>
	...

0800d380 <_svfiprintf_r>:
 800d380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d384:	4698      	mov	r8, r3
 800d386:	898b      	ldrh	r3, [r1, #12]
 800d388:	4607      	mov	r7, r0
 800d38a:	061b      	lsls	r3, r3, #24
 800d38c:	460d      	mov	r5, r1
 800d38e:	4614      	mov	r4, r2
 800d390:	b09d      	sub	sp, #116	; 0x74
 800d392:	d50e      	bpl.n	800d3b2 <_svfiprintf_r+0x32>
 800d394:	690b      	ldr	r3, [r1, #16]
 800d396:	b963      	cbnz	r3, 800d3b2 <_svfiprintf_r+0x32>
 800d398:	2140      	movs	r1, #64	; 0x40
 800d39a:	f7ff fa45 	bl	800c828 <_malloc_r>
 800d39e:	6028      	str	r0, [r5, #0]
 800d3a0:	6128      	str	r0, [r5, #16]
 800d3a2:	b920      	cbnz	r0, 800d3ae <_svfiprintf_r+0x2e>
 800d3a4:	230c      	movs	r3, #12
 800d3a6:	603b      	str	r3, [r7, #0]
 800d3a8:	f04f 30ff 	mov.w	r0, #4294967295
 800d3ac:	e0d1      	b.n	800d552 <_svfiprintf_r+0x1d2>
 800d3ae:	2340      	movs	r3, #64	; 0x40
 800d3b0:	616b      	str	r3, [r5, #20]
 800d3b2:	2300      	movs	r3, #0
 800d3b4:	9309      	str	r3, [sp, #36]	; 0x24
 800d3b6:	2320      	movs	r3, #32
 800d3b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d3bc:	2330      	movs	r3, #48	; 0x30
 800d3be:	f04f 0901 	mov.w	r9, #1
 800d3c2:	f8cd 800c 	str.w	r8, [sp, #12]
 800d3c6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800d56c <_svfiprintf_r+0x1ec>
 800d3ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d3ce:	4623      	mov	r3, r4
 800d3d0:	469a      	mov	sl, r3
 800d3d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d3d6:	b10a      	cbz	r2, 800d3dc <_svfiprintf_r+0x5c>
 800d3d8:	2a25      	cmp	r2, #37	; 0x25
 800d3da:	d1f9      	bne.n	800d3d0 <_svfiprintf_r+0x50>
 800d3dc:	ebba 0b04 	subs.w	fp, sl, r4
 800d3e0:	d00b      	beq.n	800d3fa <_svfiprintf_r+0x7a>
 800d3e2:	465b      	mov	r3, fp
 800d3e4:	4622      	mov	r2, r4
 800d3e6:	4629      	mov	r1, r5
 800d3e8:	4638      	mov	r0, r7
 800d3ea:	f7ff ff6d 	bl	800d2c8 <__ssputs_r>
 800d3ee:	3001      	adds	r0, #1
 800d3f0:	f000 80aa 	beq.w	800d548 <_svfiprintf_r+0x1c8>
 800d3f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d3f6:	445a      	add	r2, fp
 800d3f8:	9209      	str	r2, [sp, #36]	; 0x24
 800d3fa:	f89a 3000 	ldrb.w	r3, [sl]
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	f000 80a2 	beq.w	800d548 <_svfiprintf_r+0x1c8>
 800d404:	2300      	movs	r3, #0
 800d406:	f04f 32ff 	mov.w	r2, #4294967295
 800d40a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d40e:	f10a 0a01 	add.w	sl, sl, #1
 800d412:	9304      	str	r3, [sp, #16]
 800d414:	9307      	str	r3, [sp, #28]
 800d416:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d41a:	931a      	str	r3, [sp, #104]	; 0x68
 800d41c:	4654      	mov	r4, sl
 800d41e:	2205      	movs	r2, #5
 800d420:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d424:	4851      	ldr	r0, [pc, #324]	; (800d56c <_svfiprintf_r+0x1ec>)
 800d426:	f000 ffc5 	bl	800e3b4 <memchr>
 800d42a:	9a04      	ldr	r2, [sp, #16]
 800d42c:	b9d8      	cbnz	r0, 800d466 <_svfiprintf_r+0xe6>
 800d42e:	06d0      	lsls	r0, r2, #27
 800d430:	bf44      	itt	mi
 800d432:	2320      	movmi	r3, #32
 800d434:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d438:	0711      	lsls	r1, r2, #28
 800d43a:	bf44      	itt	mi
 800d43c:	232b      	movmi	r3, #43	; 0x2b
 800d43e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d442:	f89a 3000 	ldrb.w	r3, [sl]
 800d446:	2b2a      	cmp	r3, #42	; 0x2a
 800d448:	d015      	beq.n	800d476 <_svfiprintf_r+0xf6>
 800d44a:	4654      	mov	r4, sl
 800d44c:	2000      	movs	r0, #0
 800d44e:	f04f 0c0a 	mov.w	ip, #10
 800d452:	9a07      	ldr	r2, [sp, #28]
 800d454:	4621      	mov	r1, r4
 800d456:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d45a:	3b30      	subs	r3, #48	; 0x30
 800d45c:	2b09      	cmp	r3, #9
 800d45e:	d94e      	bls.n	800d4fe <_svfiprintf_r+0x17e>
 800d460:	b1b0      	cbz	r0, 800d490 <_svfiprintf_r+0x110>
 800d462:	9207      	str	r2, [sp, #28]
 800d464:	e014      	b.n	800d490 <_svfiprintf_r+0x110>
 800d466:	eba0 0308 	sub.w	r3, r0, r8
 800d46a:	fa09 f303 	lsl.w	r3, r9, r3
 800d46e:	4313      	orrs	r3, r2
 800d470:	46a2      	mov	sl, r4
 800d472:	9304      	str	r3, [sp, #16]
 800d474:	e7d2      	b.n	800d41c <_svfiprintf_r+0x9c>
 800d476:	9b03      	ldr	r3, [sp, #12]
 800d478:	1d19      	adds	r1, r3, #4
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	9103      	str	r1, [sp, #12]
 800d47e:	2b00      	cmp	r3, #0
 800d480:	bfbb      	ittet	lt
 800d482:	425b      	neglt	r3, r3
 800d484:	f042 0202 	orrlt.w	r2, r2, #2
 800d488:	9307      	strge	r3, [sp, #28]
 800d48a:	9307      	strlt	r3, [sp, #28]
 800d48c:	bfb8      	it	lt
 800d48e:	9204      	strlt	r2, [sp, #16]
 800d490:	7823      	ldrb	r3, [r4, #0]
 800d492:	2b2e      	cmp	r3, #46	; 0x2e
 800d494:	d10c      	bne.n	800d4b0 <_svfiprintf_r+0x130>
 800d496:	7863      	ldrb	r3, [r4, #1]
 800d498:	2b2a      	cmp	r3, #42	; 0x2a
 800d49a:	d135      	bne.n	800d508 <_svfiprintf_r+0x188>
 800d49c:	9b03      	ldr	r3, [sp, #12]
 800d49e:	3402      	adds	r4, #2
 800d4a0:	1d1a      	adds	r2, r3, #4
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	9203      	str	r2, [sp, #12]
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	bfb8      	it	lt
 800d4aa:	f04f 33ff 	movlt.w	r3, #4294967295
 800d4ae:	9305      	str	r3, [sp, #20]
 800d4b0:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800d570 <_svfiprintf_r+0x1f0>
 800d4b4:	2203      	movs	r2, #3
 800d4b6:	4650      	mov	r0, sl
 800d4b8:	7821      	ldrb	r1, [r4, #0]
 800d4ba:	f000 ff7b 	bl	800e3b4 <memchr>
 800d4be:	b140      	cbz	r0, 800d4d2 <_svfiprintf_r+0x152>
 800d4c0:	2340      	movs	r3, #64	; 0x40
 800d4c2:	eba0 000a 	sub.w	r0, r0, sl
 800d4c6:	fa03 f000 	lsl.w	r0, r3, r0
 800d4ca:	9b04      	ldr	r3, [sp, #16]
 800d4cc:	3401      	adds	r4, #1
 800d4ce:	4303      	orrs	r3, r0
 800d4d0:	9304      	str	r3, [sp, #16]
 800d4d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d4d6:	2206      	movs	r2, #6
 800d4d8:	4826      	ldr	r0, [pc, #152]	; (800d574 <_svfiprintf_r+0x1f4>)
 800d4da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d4de:	f000 ff69 	bl	800e3b4 <memchr>
 800d4e2:	2800      	cmp	r0, #0
 800d4e4:	d038      	beq.n	800d558 <_svfiprintf_r+0x1d8>
 800d4e6:	4b24      	ldr	r3, [pc, #144]	; (800d578 <_svfiprintf_r+0x1f8>)
 800d4e8:	bb1b      	cbnz	r3, 800d532 <_svfiprintf_r+0x1b2>
 800d4ea:	9b03      	ldr	r3, [sp, #12]
 800d4ec:	3307      	adds	r3, #7
 800d4ee:	f023 0307 	bic.w	r3, r3, #7
 800d4f2:	3308      	adds	r3, #8
 800d4f4:	9303      	str	r3, [sp, #12]
 800d4f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d4f8:	4433      	add	r3, r6
 800d4fa:	9309      	str	r3, [sp, #36]	; 0x24
 800d4fc:	e767      	b.n	800d3ce <_svfiprintf_r+0x4e>
 800d4fe:	460c      	mov	r4, r1
 800d500:	2001      	movs	r0, #1
 800d502:	fb0c 3202 	mla	r2, ip, r2, r3
 800d506:	e7a5      	b.n	800d454 <_svfiprintf_r+0xd4>
 800d508:	2300      	movs	r3, #0
 800d50a:	f04f 0c0a 	mov.w	ip, #10
 800d50e:	4619      	mov	r1, r3
 800d510:	3401      	adds	r4, #1
 800d512:	9305      	str	r3, [sp, #20]
 800d514:	4620      	mov	r0, r4
 800d516:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d51a:	3a30      	subs	r2, #48	; 0x30
 800d51c:	2a09      	cmp	r2, #9
 800d51e:	d903      	bls.n	800d528 <_svfiprintf_r+0x1a8>
 800d520:	2b00      	cmp	r3, #0
 800d522:	d0c5      	beq.n	800d4b0 <_svfiprintf_r+0x130>
 800d524:	9105      	str	r1, [sp, #20]
 800d526:	e7c3      	b.n	800d4b0 <_svfiprintf_r+0x130>
 800d528:	4604      	mov	r4, r0
 800d52a:	2301      	movs	r3, #1
 800d52c:	fb0c 2101 	mla	r1, ip, r1, r2
 800d530:	e7f0      	b.n	800d514 <_svfiprintf_r+0x194>
 800d532:	ab03      	add	r3, sp, #12
 800d534:	9300      	str	r3, [sp, #0]
 800d536:	462a      	mov	r2, r5
 800d538:	4638      	mov	r0, r7
 800d53a:	4b10      	ldr	r3, [pc, #64]	; (800d57c <_svfiprintf_r+0x1fc>)
 800d53c:	a904      	add	r1, sp, #16
 800d53e:	f3af 8000 	nop.w
 800d542:	1c42      	adds	r2, r0, #1
 800d544:	4606      	mov	r6, r0
 800d546:	d1d6      	bne.n	800d4f6 <_svfiprintf_r+0x176>
 800d548:	89ab      	ldrh	r3, [r5, #12]
 800d54a:	065b      	lsls	r3, r3, #25
 800d54c:	f53f af2c 	bmi.w	800d3a8 <_svfiprintf_r+0x28>
 800d550:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d552:	b01d      	add	sp, #116	; 0x74
 800d554:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d558:	ab03      	add	r3, sp, #12
 800d55a:	9300      	str	r3, [sp, #0]
 800d55c:	462a      	mov	r2, r5
 800d55e:	4638      	mov	r0, r7
 800d560:	4b06      	ldr	r3, [pc, #24]	; (800d57c <_svfiprintf_r+0x1fc>)
 800d562:	a904      	add	r1, sp, #16
 800d564:	f000 f9d4 	bl	800d910 <_printf_i>
 800d568:	e7eb      	b.n	800d542 <_svfiprintf_r+0x1c2>
 800d56a:	bf00      	nop
 800d56c:	0800f951 	.word	0x0800f951
 800d570:	0800f957 	.word	0x0800f957
 800d574:	0800f95b 	.word	0x0800f95b
 800d578:	00000000 	.word	0x00000000
 800d57c:	0800d2c9 	.word	0x0800d2c9

0800d580 <__sfputc_r>:
 800d580:	6893      	ldr	r3, [r2, #8]
 800d582:	b410      	push	{r4}
 800d584:	3b01      	subs	r3, #1
 800d586:	2b00      	cmp	r3, #0
 800d588:	6093      	str	r3, [r2, #8]
 800d58a:	da07      	bge.n	800d59c <__sfputc_r+0x1c>
 800d58c:	6994      	ldr	r4, [r2, #24]
 800d58e:	42a3      	cmp	r3, r4
 800d590:	db01      	blt.n	800d596 <__sfputc_r+0x16>
 800d592:	290a      	cmp	r1, #10
 800d594:	d102      	bne.n	800d59c <__sfputc_r+0x1c>
 800d596:	bc10      	pop	{r4}
 800d598:	f000 bbea 	b.w	800dd70 <__swbuf_r>
 800d59c:	6813      	ldr	r3, [r2, #0]
 800d59e:	1c58      	adds	r0, r3, #1
 800d5a0:	6010      	str	r0, [r2, #0]
 800d5a2:	7019      	strb	r1, [r3, #0]
 800d5a4:	4608      	mov	r0, r1
 800d5a6:	bc10      	pop	{r4}
 800d5a8:	4770      	bx	lr

0800d5aa <__sfputs_r>:
 800d5aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5ac:	4606      	mov	r6, r0
 800d5ae:	460f      	mov	r7, r1
 800d5b0:	4614      	mov	r4, r2
 800d5b2:	18d5      	adds	r5, r2, r3
 800d5b4:	42ac      	cmp	r4, r5
 800d5b6:	d101      	bne.n	800d5bc <__sfputs_r+0x12>
 800d5b8:	2000      	movs	r0, #0
 800d5ba:	e007      	b.n	800d5cc <__sfputs_r+0x22>
 800d5bc:	463a      	mov	r2, r7
 800d5be:	4630      	mov	r0, r6
 800d5c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d5c4:	f7ff ffdc 	bl	800d580 <__sfputc_r>
 800d5c8:	1c43      	adds	r3, r0, #1
 800d5ca:	d1f3      	bne.n	800d5b4 <__sfputs_r+0xa>
 800d5cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d5d0 <_vfiprintf_r>:
 800d5d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5d4:	460d      	mov	r5, r1
 800d5d6:	4614      	mov	r4, r2
 800d5d8:	4698      	mov	r8, r3
 800d5da:	4606      	mov	r6, r0
 800d5dc:	b09d      	sub	sp, #116	; 0x74
 800d5de:	b118      	cbz	r0, 800d5e8 <_vfiprintf_r+0x18>
 800d5e0:	6983      	ldr	r3, [r0, #24]
 800d5e2:	b90b      	cbnz	r3, 800d5e8 <_vfiprintf_r+0x18>
 800d5e4:	f000 fdd0 	bl	800e188 <__sinit>
 800d5e8:	4b89      	ldr	r3, [pc, #548]	; (800d810 <_vfiprintf_r+0x240>)
 800d5ea:	429d      	cmp	r5, r3
 800d5ec:	d11b      	bne.n	800d626 <_vfiprintf_r+0x56>
 800d5ee:	6875      	ldr	r5, [r6, #4]
 800d5f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d5f2:	07d9      	lsls	r1, r3, #31
 800d5f4:	d405      	bmi.n	800d602 <_vfiprintf_r+0x32>
 800d5f6:	89ab      	ldrh	r3, [r5, #12]
 800d5f8:	059a      	lsls	r2, r3, #22
 800d5fa:	d402      	bmi.n	800d602 <_vfiprintf_r+0x32>
 800d5fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d5fe:	f7ff fe53 	bl	800d2a8 <__retarget_lock_acquire_recursive>
 800d602:	89ab      	ldrh	r3, [r5, #12]
 800d604:	071b      	lsls	r3, r3, #28
 800d606:	d501      	bpl.n	800d60c <_vfiprintf_r+0x3c>
 800d608:	692b      	ldr	r3, [r5, #16]
 800d60a:	b9eb      	cbnz	r3, 800d648 <_vfiprintf_r+0x78>
 800d60c:	4629      	mov	r1, r5
 800d60e:	4630      	mov	r0, r6
 800d610:	f000 fc12 	bl	800de38 <__swsetup_r>
 800d614:	b1c0      	cbz	r0, 800d648 <_vfiprintf_r+0x78>
 800d616:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d618:	07dc      	lsls	r4, r3, #31
 800d61a:	d50e      	bpl.n	800d63a <_vfiprintf_r+0x6a>
 800d61c:	f04f 30ff 	mov.w	r0, #4294967295
 800d620:	b01d      	add	sp, #116	; 0x74
 800d622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d626:	4b7b      	ldr	r3, [pc, #492]	; (800d814 <_vfiprintf_r+0x244>)
 800d628:	429d      	cmp	r5, r3
 800d62a:	d101      	bne.n	800d630 <_vfiprintf_r+0x60>
 800d62c:	68b5      	ldr	r5, [r6, #8]
 800d62e:	e7df      	b.n	800d5f0 <_vfiprintf_r+0x20>
 800d630:	4b79      	ldr	r3, [pc, #484]	; (800d818 <_vfiprintf_r+0x248>)
 800d632:	429d      	cmp	r5, r3
 800d634:	bf08      	it	eq
 800d636:	68f5      	ldreq	r5, [r6, #12]
 800d638:	e7da      	b.n	800d5f0 <_vfiprintf_r+0x20>
 800d63a:	89ab      	ldrh	r3, [r5, #12]
 800d63c:	0598      	lsls	r0, r3, #22
 800d63e:	d4ed      	bmi.n	800d61c <_vfiprintf_r+0x4c>
 800d640:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d642:	f7ff fe33 	bl	800d2ac <__retarget_lock_release_recursive>
 800d646:	e7e9      	b.n	800d61c <_vfiprintf_r+0x4c>
 800d648:	2300      	movs	r3, #0
 800d64a:	9309      	str	r3, [sp, #36]	; 0x24
 800d64c:	2320      	movs	r3, #32
 800d64e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d652:	2330      	movs	r3, #48	; 0x30
 800d654:	f04f 0901 	mov.w	r9, #1
 800d658:	f8cd 800c 	str.w	r8, [sp, #12]
 800d65c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800d81c <_vfiprintf_r+0x24c>
 800d660:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d664:	4623      	mov	r3, r4
 800d666:	469a      	mov	sl, r3
 800d668:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d66c:	b10a      	cbz	r2, 800d672 <_vfiprintf_r+0xa2>
 800d66e:	2a25      	cmp	r2, #37	; 0x25
 800d670:	d1f9      	bne.n	800d666 <_vfiprintf_r+0x96>
 800d672:	ebba 0b04 	subs.w	fp, sl, r4
 800d676:	d00b      	beq.n	800d690 <_vfiprintf_r+0xc0>
 800d678:	465b      	mov	r3, fp
 800d67a:	4622      	mov	r2, r4
 800d67c:	4629      	mov	r1, r5
 800d67e:	4630      	mov	r0, r6
 800d680:	f7ff ff93 	bl	800d5aa <__sfputs_r>
 800d684:	3001      	adds	r0, #1
 800d686:	f000 80aa 	beq.w	800d7de <_vfiprintf_r+0x20e>
 800d68a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d68c:	445a      	add	r2, fp
 800d68e:	9209      	str	r2, [sp, #36]	; 0x24
 800d690:	f89a 3000 	ldrb.w	r3, [sl]
 800d694:	2b00      	cmp	r3, #0
 800d696:	f000 80a2 	beq.w	800d7de <_vfiprintf_r+0x20e>
 800d69a:	2300      	movs	r3, #0
 800d69c:	f04f 32ff 	mov.w	r2, #4294967295
 800d6a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d6a4:	f10a 0a01 	add.w	sl, sl, #1
 800d6a8:	9304      	str	r3, [sp, #16]
 800d6aa:	9307      	str	r3, [sp, #28]
 800d6ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d6b0:	931a      	str	r3, [sp, #104]	; 0x68
 800d6b2:	4654      	mov	r4, sl
 800d6b4:	2205      	movs	r2, #5
 800d6b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d6ba:	4858      	ldr	r0, [pc, #352]	; (800d81c <_vfiprintf_r+0x24c>)
 800d6bc:	f000 fe7a 	bl	800e3b4 <memchr>
 800d6c0:	9a04      	ldr	r2, [sp, #16]
 800d6c2:	b9d8      	cbnz	r0, 800d6fc <_vfiprintf_r+0x12c>
 800d6c4:	06d1      	lsls	r1, r2, #27
 800d6c6:	bf44      	itt	mi
 800d6c8:	2320      	movmi	r3, #32
 800d6ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d6ce:	0713      	lsls	r3, r2, #28
 800d6d0:	bf44      	itt	mi
 800d6d2:	232b      	movmi	r3, #43	; 0x2b
 800d6d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d6d8:	f89a 3000 	ldrb.w	r3, [sl]
 800d6dc:	2b2a      	cmp	r3, #42	; 0x2a
 800d6de:	d015      	beq.n	800d70c <_vfiprintf_r+0x13c>
 800d6e0:	4654      	mov	r4, sl
 800d6e2:	2000      	movs	r0, #0
 800d6e4:	f04f 0c0a 	mov.w	ip, #10
 800d6e8:	9a07      	ldr	r2, [sp, #28]
 800d6ea:	4621      	mov	r1, r4
 800d6ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d6f0:	3b30      	subs	r3, #48	; 0x30
 800d6f2:	2b09      	cmp	r3, #9
 800d6f4:	d94e      	bls.n	800d794 <_vfiprintf_r+0x1c4>
 800d6f6:	b1b0      	cbz	r0, 800d726 <_vfiprintf_r+0x156>
 800d6f8:	9207      	str	r2, [sp, #28]
 800d6fa:	e014      	b.n	800d726 <_vfiprintf_r+0x156>
 800d6fc:	eba0 0308 	sub.w	r3, r0, r8
 800d700:	fa09 f303 	lsl.w	r3, r9, r3
 800d704:	4313      	orrs	r3, r2
 800d706:	46a2      	mov	sl, r4
 800d708:	9304      	str	r3, [sp, #16]
 800d70a:	e7d2      	b.n	800d6b2 <_vfiprintf_r+0xe2>
 800d70c:	9b03      	ldr	r3, [sp, #12]
 800d70e:	1d19      	adds	r1, r3, #4
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	9103      	str	r1, [sp, #12]
 800d714:	2b00      	cmp	r3, #0
 800d716:	bfbb      	ittet	lt
 800d718:	425b      	neglt	r3, r3
 800d71a:	f042 0202 	orrlt.w	r2, r2, #2
 800d71e:	9307      	strge	r3, [sp, #28]
 800d720:	9307      	strlt	r3, [sp, #28]
 800d722:	bfb8      	it	lt
 800d724:	9204      	strlt	r2, [sp, #16]
 800d726:	7823      	ldrb	r3, [r4, #0]
 800d728:	2b2e      	cmp	r3, #46	; 0x2e
 800d72a:	d10c      	bne.n	800d746 <_vfiprintf_r+0x176>
 800d72c:	7863      	ldrb	r3, [r4, #1]
 800d72e:	2b2a      	cmp	r3, #42	; 0x2a
 800d730:	d135      	bne.n	800d79e <_vfiprintf_r+0x1ce>
 800d732:	9b03      	ldr	r3, [sp, #12]
 800d734:	3402      	adds	r4, #2
 800d736:	1d1a      	adds	r2, r3, #4
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	9203      	str	r2, [sp, #12]
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	bfb8      	it	lt
 800d740:	f04f 33ff 	movlt.w	r3, #4294967295
 800d744:	9305      	str	r3, [sp, #20]
 800d746:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800d820 <_vfiprintf_r+0x250>
 800d74a:	2203      	movs	r2, #3
 800d74c:	4650      	mov	r0, sl
 800d74e:	7821      	ldrb	r1, [r4, #0]
 800d750:	f000 fe30 	bl	800e3b4 <memchr>
 800d754:	b140      	cbz	r0, 800d768 <_vfiprintf_r+0x198>
 800d756:	2340      	movs	r3, #64	; 0x40
 800d758:	eba0 000a 	sub.w	r0, r0, sl
 800d75c:	fa03 f000 	lsl.w	r0, r3, r0
 800d760:	9b04      	ldr	r3, [sp, #16]
 800d762:	3401      	adds	r4, #1
 800d764:	4303      	orrs	r3, r0
 800d766:	9304      	str	r3, [sp, #16]
 800d768:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d76c:	2206      	movs	r2, #6
 800d76e:	482d      	ldr	r0, [pc, #180]	; (800d824 <_vfiprintf_r+0x254>)
 800d770:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d774:	f000 fe1e 	bl	800e3b4 <memchr>
 800d778:	2800      	cmp	r0, #0
 800d77a:	d03f      	beq.n	800d7fc <_vfiprintf_r+0x22c>
 800d77c:	4b2a      	ldr	r3, [pc, #168]	; (800d828 <_vfiprintf_r+0x258>)
 800d77e:	bb1b      	cbnz	r3, 800d7c8 <_vfiprintf_r+0x1f8>
 800d780:	9b03      	ldr	r3, [sp, #12]
 800d782:	3307      	adds	r3, #7
 800d784:	f023 0307 	bic.w	r3, r3, #7
 800d788:	3308      	adds	r3, #8
 800d78a:	9303      	str	r3, [sp, #12]
 800d78c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d78e:	443b      	add	r3, r7
 800d790:	9309      	str	r3, [sp, #36]	; 0x24
 800d792:	e767      	b.n	800d664 <_vfiprintf_r+0x94>
 800d794:	460c      	mov	r4, r1
 800d796:	2001      	movs	r0, #1
 800d798:	fb0c 3202 	mla	r2, ip, r2, r3
 800d79c:	e7a5      	b.n	800d6ea <_vfiprintf_r+0x11a>
 800d79e:	2300      	movs	r3, #0
 800d7a0:	f04f 0c0a 	mov.w	ip, #10
 800d7a4:	4619      	mov	r1, r3
 800d7a6:	3401      	adds	r4, #1
 800d7a8:	9305      	str	r3, [sp, #20]
 800d7aa:	4620      	mov	r0, r4
 800d7ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d7b0:	3a30      	subs	r2, #48	; 0x30
 800d7b2:	2a09      	cmp	r2, #9
 800d7b4:	d903      	bls.n	800d7be <_vfiprintf_r+0x1ee>
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d0c5      	beq.n	800d746 <_vfiprintf_r+0x176>
 800d7ba:	9105      	str	r1, [sp, #20]
 800d7bc:	e7c3      	b.n	800d746 <_vfiprintf_r+0x176>
 800d7be:	4604      	mov	r4, r0
 800d7c0:	2301      	movs	r3, #1
 800d7c2:	fb0c 2101 	mla	r1, ip, r1, r2
 800d7c6:	e7f0      	b.n	800d7aa <_vfiprintf_r+0x1da>
 800d7c8:	ab03      	add	r3, sp, #12
 800d7ca:	9300      	str	r3, [sp, #0]
 800d7cc:	462a      	mov	r2, r5
 800d7ce:	4630      	mov	r0, r6
 800d7d0:	4b16      	ldr	r3, [pc, #88]	; (800d82c <_vfiprintf_r+0x25c>)
 800d7d2:	a904      	add	r1, sp, #16
 800d7d4:	f3af 8000 	nop.w
 800d7d8:	4607      	mov	r7, r0
 800d7da:	1c78      	adds	r0, r7, #1
 800d7dc:	d1d6      	bne.n	800d78c <_vfiprintf_r+0x1bc>
 800d7de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d7e0:	07d9      	lsls	r1, r3, #31
 800d7e2:	d405      	bmi.n	800d7f0 <_vfiprintf_r+0x220>
 800d7e4:	89ab      	ldrh	r3, [r5, #12]
 800d7e6:	059a      	lsls	r2, r3, #22
 800d7e8:	d402      	bmi.n	800d7f0 <_vfiprintf_r+0x220>
 800d7ea:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d7ec:	f7ff fd5e 	bl	800d2ac <__retarget_lock_release_recursive>
 800d7f0:	89ab      	ldrh	r3, [r5, #12]
 800d7f2:	065b      	lsls	r3, r3, #25
 800d7f4:	f53f af12 	bmi.w	800d61c <_vfiprintf_r+0x4c>
 800d7f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d7fa:	e711      	b.n	800d620 <_vfiprintf_r+0x50>
 800d7fc:	ab03      	add	r3, sp, #12
 800d7fe:	9300      	str	r3, [sp, #0]
 800d800:	462a      	mov	r2, r5
 800d802:	4630      	mov	r0, r6
 800d804:	4b09      	ldr	r3, [pc, #36]	; (800d82c <_vfiprintf_r+0x25c>)
 800d806:	a904      	add	r1, sp, #16
 800d808:	f000 f882 	bl	800d910 <_printf_i>
 800d80c:	e7e4      	b.n	800d7d8 <_vfiprintf_r+0x208>
 800d80e:	bf00      	nop
 800d810:	0800f9a4 	.word	0x0800f9a4
 800d814:	0800f9c4 	.word	0x0800f9c4
 800d818:	0800f984 	.word	0x0800f984
 800d81c:	0800f951 	.word	0x0800f951
 800d820:	0800f957 	.word	0x0800f957
 800d824:	0800f95b 	.word	0x0800f95b
 800d828:	00000000 	.word	0x00000000
 800d82c:	0800d5ab 	.word	0x0800d5ab

0800d830 <_printf_common>:
 800d830:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d834:	4616      	mov	r6, r2
 800d836:	4699      	mov	r9, r3
 800d838:	688a      	ldr	r2, [r1, #8]
 800d83a:	690b      	ldr	r3, [r1, #16]
 800d83c:	4607      	mov	r7, r0
 800d83e:	4293      	cmp	r3, r2
 800d840:	bfb8      	it	lt
 800d842:	4613      	movlt	r3, r2
 800d844:	6033      	str	r3, [r6, #0]
 800d846:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d84a:	460c      	mov	r4, r1
 800d84c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d850:	b10a      	cbz	r2, 800d856 <_printf_common+0x26>
 800d852:	3301      	adds	r3, #1
 800d854:	6033      	str	r3, [r6, #0]
 800d856:	6823      	ldr	r3, [r4, #0]
 800d858:	0699      	lsls	r1, r3, #26
 800d85a:	bf42      	ittt	mi
 800d85c:	6833      	ldrmi	r3, [r6, #0]
 800d85e:	3302      	addmi	r3, #2
 800d860:	6033      	strmi	r3, [r6, #0]
 800d862:	6825      	ldr	r5, [r4, #0]
 800d864:	f015 0506 	ands.w	r5, r5, #6
 800d868:	d106      	bne.n	800d878 <_printf_common+0x48>
 800d86a:	f104 0a19 	add.w	sl, r4, #25
 800d86e:	68e3      	ldr	r3, [r4, #12]
 800d870:	6832      	ldr	r2, [r6, #0]
 800d872:	1a9b      	subs	r3, r3, r2
 800d874:	42ab      	cmp	r3, r5
 800d876:	dc28      	bgt.n	800d8ca <_printf_common+0x9a>
 800d878:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d87c:	1e13      	subs	r3, r2, #0
 800d87e:	6822      	ldr	r2, [r4, #0]
 800d880:	bf18      	it	ne
 800d882:	2301      	movne	r3, #1
 800d884:	0692      	lsls	r2, r2, #26
 800d886:	d42d      	bmi.n	800d8e4 <_printf_common+0xb4>
 800d888:	4649      	mov	r1, r9
 800d88a:	4638      	mov	r0, r7
 800d88c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d890:	47c0      	blx	r8
 800d892:	3001      	adds	r0, #1
 800d894:	d020      	beq.n	800d8d8 <_printf_common+0xa8>
 800d896:	6823      	ldr	r3, [r4, #0]
 800d898:	68e5      	ldr	r5, [r4, #12]
 800d89a:	f003 0306 	and.w	r3, r3, #6
 800d89e:	2b04      	cmp	r3, #4
 800d8a0:	bf18      	it	ne
 800d8a2:	2500      	movne	r5, #0
 800d8a4:	6832      	ldr	r2, [r6, #0]
 800d8a6:	f04f 0600 	mov.w	r6, #0
 800d8aa:	68a3      	ldr	r3, [r4, #8]
 800d8ac:	bf08      	it	eq
 800d8ae:	1aad      	subeq	r5, r5, r2
 800d8b0:	6922      	ldr	r2, [r4, #16]
 800d8b2:	bf08      	it	eq
 800d8b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d8b8:	4293      	cmp	r3, r2
 800d8ba:	bfc4      	itt	gt
 800d8bc:	1a9b      	subgt	r3, r3, r2
 800d8be:	18ed      	addgt	r5, r5, r3
 800d8c0:	341a      	adds	r4, #26
 800d8c2:	42b5      	cmp	r5, r6
 800d8c4:	d11a      	bne.n	800d8fc <_printf_common+0xcc>
 800d8c6:	2000      	movs	r0, #0
 800d8c8:	e008      	b.n	800d8dc <_printf_common+0xac>
 800d8ca:	2301      	movs	r3, #1
 800d8cc:	4652      	mov	r2, sl
 800d8ce:	4649      	mov	r1, r9
 800d8d0:	4638      	mov	r0, r7
 800d8d2:	47c0      	blx	r8
 800d8d4:	3001      	adds	r0, #1
 800d8d6:	d103      	bne.n	800d8e0 <_printf_common+0xb0>
 800d8d8:	f04f 30ff 	mov.w	r0, #4294967295
 800d8dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d8e0:	3501      	adds	r5, #1
 800d8e2:	e7c4      	b.n	800d86e <_printf_common+0x3e>
 800d8e4:	2030      	movs	r0, #48	; 0x30
 800d8e6:	18e1      	adds	r1, r4, r3
 800d8e8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d8ec:	1c5a      	adds	r2, r3, #1
 800d8ee:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d8f2:	4422      	add	r2, r4
 800d8f4:	3302      	adds	r3, #2
 800d8f6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d8fa:	e7c5      	b.n	800d888 <_printf_common+0x58>
 800d8fc:	2301      	movs	r3, #1
 800d8fe:	4622      	mov	r2, r4
 800d900:	4649      	mov	r1, r9
 800d902:	4638      	mov	r0, r7
 800d904:	47c0      	blx	r8
 800d906:	3001      	adds	r0, #1
 800d908:	d0e6      	beq.n	800d8d8 <_printf_common+0xa8>
 800d90a:	3601      	adds	r6, #1
 800d90c:	e7d9      	b.n	800d8c2 <_printf_common+0x92>
	...

0800d910 <_printf_i>:
 800d910:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d914:	7e0f      	ldrb	r7, [r1, #24]
 800d916:	4691      	mov	r9, r2
 800d918:	2f78      	cmp	r7, #120	; 0x78
 800d91a:	4680      	mov	r8, r0
 800d91c:	460c      	mov	r4, r1
 800d91e:	469a      	mov	sl, r3
 800d920:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d922:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d926:	d807      	bhi.n	800d938 <_printf_i+0x28>
 800d928:	2f62      	cmp	r7, #98	; 0x62
 800d92a:	d80a      	bhi.n	800d942 <_printf_i+0x32>
 800d92c:	2f00      	cmp	r7, #0
 800d92e:	f000 80d9 	beq.w	800dae4 <_printf_i+0x1d4>
 800d932:	2f58      	cmp	r7, #88	; 0x58
 800d934:	f000 80a4 	beq.w	800da80 <_printf_i+0x170>
 800d938:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d93c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d940:	e03a      	b.n	800d9b8 <_printf_i+0xa8>
 800d942:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d946:	2b15      	cmp	r3, #21
 800d948:	d8f6      	bhi.n	800d938 <_printf_i+0x28>
 800d94a:	a101      	add	r1, pc, #4	; (adr r1, 800d950 <_printf_i+0x40>)
 800d94c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d950:	0800d9a9 	.word	0x0800d9a9
 800d954:	0800d9bd 	.word	0x0800d9bd
 800d958:	0800d939 	.word	0x0800d939
 800d95c:	0800d939 	.word	0x0800d939
 800d960:	0800d939 	.word	0x0800d939
 800d964:	0800d939 	.word	0x0800d939
 800d968:	0800d9bd 	.word	0x0800d9bd
 800d96c:	0800d939 	.word	0x0800d939
 800d970:	0800d939 	.word	0x0800d939
 800d974:	0800d939 	.word	0x0800d939
 800d978:	0800d939 	.word	0x0800d939
 800d97c:	0800dacb 	.word	0x0800dacb
 800d980:	0800d9ed 	.word	0x0800d9ed
 800d984:	0800daad 	.word	0x0800daad
 800d988:	0800d939 	.word	0x0800d939
 800d98c:	0800d939 	.word	0x0800d939
 800d990:	0800daed 	.word	0x0800daed
 800d994:	0800d939 	.word	0x0800d939
 800d998:	0800d9ed 	.word	0x0800d9ed
 800d99c:	0800d939 	.word	0x0800d939
 800d9a0:	0800d939 	.word	0x0800d939
 800d9a4:	0800dab5 	.word	0x0800dab5
 800d9a8:	682b      	ldr	r3, [r5, #0]
 800d9aa:	1d1a      	adds	r2, r3, #4
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	602a      	str	r2, [r5, #0]
 800d9b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d9b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d9b8:	2301      	movs	r3, #1
 800d9ba:	e0a4      	b.n	800db06 <_printf_i+0x1f6>
 800d9bc:	6820      	ldr	r0, [r4, #0]
 800d9be:	6829      	ldr	r1, [r5, #0]
 800d9c0:	0606      	lsls	r6, r0, #24
 800d9c2:	f101 0304 	add.w	r3, r1, #4
 800d9c6:	d50a      	bpl.n	800d9de <_printf_i+0xce>
 800d9c8:	680e      	ldr	r6, [r1, #0]
 800d9ca:	602b      	str	r3, [r5, #0]
 800d9cc:	2e00      	cmp	r6, #0
 800d9ce:	da03      	bge.n	800d9d8 <_printf_i+0xc8>
 800d9d0:	232d      	movs	r3, #45	; 0x2d
 800d9d2:	4276      	negs	r6, r6
 800d9d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d9d8:	230a      	movs	r3, #10
 800d9da:	485e      	ldr	r0, [pc, #376]	; (800db54 <_printf_i+0x244>)
 800d9dc:	e019      	b.n	800da12 <_printf_i+0x102>
 800d9de:	680e      	ldr	r6, [r1, #0]
 800d9e0:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d9e4:	602b      	str	r3, [r5, #0]
 800d9e6:	bf18      	it	ne
 800d9e8:	b236      	sxthne	r6, r6
 800d9ea:	e7ef      	b.n	800d9cc <_printf_i+0xbc>
 800d9ec:	682b      	ldr	r3, [r5, #0]
 800d9ee:	6820      	ldr	r0, [r4, #0]
 800d9f0:	1d19      	adds	r1, r3, #4
 800d9f2:	6029      	str	r1, [r5, #0]
 800d9f4:	0601      	lsls	r1, r0, #24
 800d9f6:	d501      	bpl.n	800d9fc <_printf_i+0xec>
 800d9f8:	681e      	ldr	r6, [r3, #0]
 800d9fa:	e002      	b.n	800da02 <_printf_i+0xf2>
 800d9fc:	0646      	lsls	r6, r0, #25
 800d9fe:	d5fb      	bpl.n	800d9f8 <_printf_i+0xe8>
 800da00:	881e      	ldrh	r6, [r3, #0]
 800da02:	2f6f      	cmp	r7, #111	; 0x6f
 800da04:	bf0c      	ite	eq
 800da06:	2308      	moveq	r3, #8
 800da08:	230a      	movne	r3, #10
 800da0a:	4852      	ldr	r0, [pc, #328]	; (800db54 <_printf_i+0x244>)
 800da0c:	2100      	movs	r1, #0
 800da0e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800da12:	6865      	ldr	r5, [r4, #4]
 800da14:	2d00      	cmp	r5, #0
 800da16:	bfa8      	it	ge
 800da18:	6821      	ldrge	r1, [r4, #0]
 800da1a:	60a5      	str	r5, [r4, #8]
 800da1c:	bfa4      	itt	ge
 800da1e:	f021 0104 	bicge.w	r1, r1, #4
 800da22:	6021      	strge	r1, [r4, #0]
 800da24:	b90e      	cbnz	r6, 800da2a <_printf_i+0x11a>
 800da26:	2d00      	cmp	r5, #0
 800da28:	d04d      	beq.n	800dac6 <_printf_i+0x1b6>
 800da2a:	4615      	mov	r5, r2
 800da2c:	fbb6 f1f3 	udiv	r1, r6, r3
 800da30:	fb03 6711 	mls	r7, r3, r1, r6
 800da34:	5dc7      	ldrb	r7, [r0, r7]
 800da36:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800da3a:	4637      	mov	r7, r6
 800da3c:	42bb      	cmp	r3, r7
 800da3e:	460e      	mov	r6, r1
 800da40:	d9f4      	bls.n	800da2c <_printf_i+0x11c>
 800da42:	2b08      	cmp	r3, #8
 800da44:	d10b      	bne.n	800da5e <_printf_i+0x14e>
 800da46:	6823      	ldr	r3, [r4, #0]
 800da48:	07de      	lsls	r6, r3, #31
 800da4a:	d508      	bpl.n	800da5e <_printf_i+0x14e>
 800da4c:	6923      	ldr	r3, [r4, #16]
 800da4e:	6861      	ldr	r1, [r4, #4]
 800da50:	4299      	cmp	r1, r3
 800da52:	bfde      	ittt	le
 800da54:	2330      	movle	r3, #48	; 0x30
 800da56:	f805 3c01 	strble.w	r3, [r5, #-1]
 800da5a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800da5e:	1b52      	subs	r2, r2, r5
 800da60:	6122      	str	r2, [r4, #16]
 800da62:	464b      	mov	r3, r9
 800da64:	4621      	mov	r1, r4
 800da66:	4640      	mov	r0, r8
 800da68:	f8cd a000 	str.w	sl, [sp]
 800da6c:	aa03      	add	r2, sp, #12
 800da6e:	f7ff fedf 	bl	800d830 <_printf_common>
 800da72:	3001      	adds	r0, #1
 800da74:	d14c      	bne.n	800db10 <_printf_i+0x200>
 800da76:	f04f 30ff 	mov.w	r0, #4294967295
 800da7a:	b004      	add	sp, #16
 800da7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da80:	4834      	ldr	r0, [pc, #208]	; (800db54 <_printf_i+0x244>)
 800da82:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800da86:	6829      	ldr	r1, [r5, #0]
 800da88:	6823      	ldr	r3, [r4, #0]
 800da8a:	f851 6b04 	ldr.w	r6, [r1], #4
 800da8e:	6029      	str	r1, [r5, #0]
 800da90:	061d      	lsls	r5, r3, #24
 800da92:	d514      	bpl.n	800dabe <_printf_i+0x1ae>
 800da94:	07df      	lsls	r7, r3, #31
 800da96:	bf44      	itt	mi
 800da98:	f043 0320 	orrmi.w	r3, r3, #32
 800da9c:	6023      	strmi	r3, [r4, #0]
 800da9e:	b91e      	cbnz	r6, 800daa8 <_printf_i+0x198>
 800daa0:	6823      	ldr	r3, [r4, #0]
 800daa2:	f023 0320 	bic.w	r3, r3, #32
 800daa6:	6023      	str	r3, [r4, #0]
 800daa8:	2310      	movs	r3, #16
 800daaa:	e7af      	b.n	800da0c <_printf_i+0xfc>
 800daac:	6823      	ldr	r3, [r4, #0]
 800daae:	f043 0320 	orr.w	r3, r3, #32
 800dab2:	6023      	str	r3, [r4, #0]
 800dab4:	2378      	movs	r3, #120	; 0x78
 800dab6:	4828      	ldr	r0, [pc, #160]	; (800db58 <_printf_i+0x248>)
 800dab8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800dabc:	e7e3      	b.n	800da86 <_printf_i+0x176>
 800dabe:	0659      	lsls	r1, r3, #25
 800dac0:	bf48      	it	mi
 800dac2:	b2b6      	uxthmi	r6, r6
 800dac4:	e7e6      	b.n	800da94 <_printf_i+0x184>
 800dac6:	4615      	mov	r5, r2
 800dac8:	e7bb      	b.n	800da42 <_printf_i+0x132>
 800daca:	682b      	ldr	r3, [r5, #0]
 800dacc:	6826      	ldr	r6, [r4, #0]
 800dace:	1d18      	adds	r0, r3, #4
 800dad0:	6961      	ldr	r1, [r4, #20]
 800dad2:	6028      	str	r0, [r5, #0]
 800dad4:	0635      	lsls	r5, r6, #24
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	d501      	bpl.n	800dade <_printf_i+0x1ce>
 800dada:	6019      	str	r1, [r3, #0]
 800dadc:	e002      	b.n	800dae4 <_printf_i+0x1d4>
 800dade:	0670      	lsls	r0, r6, #25
 800dae0:	d5fb      	bpl.n	800dada <_printf_i+0x1ca>
 800dae2:	8019      	strh	r1, [r3, #0]
 800dae4:	2300      	movs	r3, #0
 800dae6:	4615      	mov	r5, r2
 800dae8:	6123      	str	r3, [r4, #16]
 800daea:	e7ba      	b.n	800da62 <_printf_i+0x152>
 800daec:	682b      	ldr	r3, [r5, #0]
 800daee:	2100      	movs	r1, #0
 800daf0:	1d1a      	adds	r2, r3, #4
 800daf2:	602a      	str	r2, [r5, #0]
 800daf4:	681d      	ldr	r5, [r3, #0]
 800daf6:	6862      	ldr	r2, [r4, #4]
 800daf8:	4628      	mov	r0, r5
 800dafa:	f000 fc5b 	bl	800e3b4 <memchr>
 800dafe:	b108      	cbz	r0, 800db04 <_printf_i+0x1f4>
 800db00:	1b40      	subs	r0, r0, r5
 800db02:	6060      	str	r0, [r4, #4]
 800db04:	6863      	ldr	r3, [r4, #4]
 800db06:	6123      	str	r3, [r4, #16]
 800db08:	2300      	movs	r3, #0
 800db0a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800db0e:	e7a8      	b.n	800da62 <_printf_i+0x152>
 800db10:	462a      	mov	r2, r5
 800db12:	4649      	mov	r1, r9
 800db14:	4640      	mov	r0, r8
 800db16:	6923      	ldr	r3, [r4, #16]
 800db18:	47d0      	blx	sl
 800db1a:	3001      	adds	r0, #1
 800db1c:	d0ab      	beq.n	800da76 <_printf_i+0x166>
 800db1e:	6823      	ldr	r3, [r4, #0]
 800db20:	079b      	lsls	r3, r3, #30
 800db22:	d413      	bmi.n	800db4c <_printf_i+0x23c>
 800db24:	68e0      	ldr	r0, [r4, #12]
 800db26:	9b03      	ldr	r3, [sp, #12]
 800db28:	4298      	cmp	r0, r3
 800db2a:	bfb8      	it	lt
 800db2c:	4618      	movlt	r0, r3
 800db2e:	e7a4      	b.n	800da7a <_printf_i+0x16a>
 800db30:	2301      	movs	r3, #1
 800db32:	4632      	mov	r2, r6
 800db34:	4649      	mov	r1, r9
 800db36:	4640      	mov	r0, r8
 800db38:	47d0      	blx	sl
 800db3a:	3001      	adds	r0, #1
 800db3c:	d09b      	beq.n	800da76 <_printf_i+0x166>
 800db3e:	3501      	adds	r5, #1
 800db40:	68e3      	ldr	r3, [r4, #12]
 800db42:	9903      	ldr	r1, [sp, #12]
 800db44:	1a5b      	subs	r3, r3, r1
 800db46:	42ab      	cmp	r3, r5
 800db48:	dcf2      	bgt.n	800db30 <_printf_i+0x220>
 800db4a:	e7eb      	b.n	800db24 <_printf_i+0x214>
 800db4c:	2500      	movs	r5, #0
 800db4e:	f104 0619 	add.w	r6, r4, #25
 800db52:	e7f5      	b.n	800db40 <_printf_i+0x230>
 800db54:	0800f962 	.word	0x0800f962
 800db58:	0800f973 	.word	0x0800f973

0800db5c <siscanf>:
 800db5c:	b40e      	push	{r1, r2, r3}
 800db5e:	f44f 7201 	mov.w	r2, #516	; 0x204
 800db62:	b530      	push	{r4, r5, lr}
 800db64:	b09c      	sub	sp, #112	; 0x70
 800db66:	ac1f      	add	r4, sp, #124	; 0x7c
 800db68:	f854 5b04 	ldr.w	r5, [r4], #4
 800db6c:	f8ad 2014 	strh.w	r2, [sp, #20]
 800db70:	9002      	str	r0, [sp, #8]
 800db72:	9006      	str	r0, [sp, #24]
 800db74:	f7f2 faea 	bl	800014c <strlen>
 800db78:	4b0b      	ldr	r3, [pc, #44]	; (800dba8 <siscanf+0x4c>)
 800db7a:	9003      	str	r0, [sp, #12]
 800db7c:	930b      	str	r3, [sp, #44]	; 0x2c
 800db7e:	2300      	movs	r3, #0
 800db80:	930f      	str	r3, [sp, #60]	; 0x3c
 800db82:	9314      	str	r3, [sp, #80]	; 0x50
 800db84:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800db88:	9007      	str	r0, [sp, #28]
 800db8a:	4808      	ldr	r0, [pc, #32]	; (800dbac <siscanf+0x50>)
 800db8c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800db90:	462a      	mov	r2, r5
 800db92:	4623      	mov	r3, r4
 800db94:	a902      	add	r1, sp, #8
 800db96:	6800      	ldr	r0, [r0, #0]
 800db98:	9401      	str	r4, [sp, #4]
 800db9a:	f000 fcbd 	bl	800e518 <__ssvfiscanf_r>
 800db9e:	b01c      	add	sp, #112	; 0x70
 800dba0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dba4:	b003      	add	sp, #12
 800dba6:	4770      	bx	lr
 800dba8:	0800dbd3 	.word	0x0800dbd3
 800dbac:	200004e4 	.word	0x200004e4

0800dbb0 <__sread>:
 800dbb0:	b510      	push	{r4, lr}
 800dbb2:	460c      	mov	r4, r1
 800dbb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dbb8:	f000 ff7a 	bl	800eab0 <_read_r>
 800dbbc:	2800      	cmp	r0, #0
 800dbbe:	bfab      	itete	ge
 800dbc0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800dbc2:	89a3      	ldrhlt	r3, [r4, #12]
 800dbc4:	181b      	addge	r3, r3, r0
 800dbc6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800dbca:	bfac      	ite	ge
 800dbcc:	6563      	strge	r3, [r4, #84]	; 0x54
 800dbce:	81a3      	strhlt	r3, [r4, #12]
 800dbd0:	bd10      	pop	{r4, pc}

0800dbd2 <__seofread>:
 800dbd2:	2000      	movs	r0, #0
 800dbd4:	4770      	bx	lr

0800dbd6 <__swrite>:
 800dbd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dbda:	461f      	mov	r7, r3
 800dbdc:	898b      	ldrh	r3, [r1, #12]
 800dbde:	4605      	mov	r5, r0
 800dbe0:	05db      	lsls	r3, r3, #23
 800dbe2:	460c      	mov	r4, r1
 800dbe4:	4616      	mov	r6, r2
 800dbe6:	d505      	bpl.n	800dbf4 <__swrite+0x1e>
 800dbe8:	2302      	movs	r3, #2
 800dbea:	2200      	movs	r2, #0
 800dbec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dbf0:	f000 fb68 	bl	800e2c4 <_lseek_r>
 800dbf4:	89a3      	ldrh	r3, [r4, #12]
 800dbf6:	4632      	mov	r2, r6
 800dbf8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800dbfc:	81a3      	strh	r3, [r4, #12]
 800dbfe:	4628      	mov	r0, r5
 800dc00:	463b      	mov	r3, r7
 800dc02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dc06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dc0a:	f000 b903 	b.w	800de14 <_write_r>

0800dc0e <__sseek>:
 800dc0e:	b510      	push	{r4, lr}
 800dc10:	460c      	mov	r4, r1
 800dc12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc16:	f000 fb55 	bl	800e2c4 <_lseek_r>
 800dc1a:	1c43      	adds	r3, r0, #1
 800dc1c:	89a3      	ldrh	r3, [r4, #12]
 800dc1e:	bf15      	itete	ne
 800dc20:	6560      	strne	r0, [r4, #84]	; 0x54
 800dc22:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800dc26:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800dc2a:	81a3      	strheq	r3, [r4, #12]
 800dc2c:	bf18      	it	ne
 800dc2e:	81a3      	strhne	r3, [r4, #12]
 800dc30:	bd10      	pop	{r4, pc}

0800dc32 <__sclose>:
 800dc32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc36:	f000 b975 	b.w	800df24 <_close_r>

0800dc3a <strcpy>:
 800dc3a:	4603      	mov	r3, r0
 800dc3c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dc40:	f803 2b01 	strb.w	r2, [r3], #1
 800dc44:	2a00      	cmp	r2, #0
 800dc46:	d1f9      	bne.n	800dc3c <strcpy+0x2>
 800dc48:	4770      	bx	lr

0800dc4a <strncmp>:
 800dc4a:	4603      	mov	r3, r0
 800dc4c:	b510      	push	{r4, lr}
 800dc4e:	b172      	cbz	r2, 800dc6e <strncmp+0x24>
 800dc50:	3901      	subs	r1, #1
 800dc52:	1884      	adds	r4, r0, r2
 800dc54:	f813 0b01 	ldrb.w	r0, [r3], #1
 800dc58:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800dc5c:	4290      	cmp	r0, r2
 800dc5e:	d101      	bne.n	800dc64 <strncmp+0x1a>
 800dc60:	42a3      	cmp	r3, r4
 800dc62:	d101      	bne.n	800dc68 <strncmp+0x1e>
 800dc64:	1a80      	subs	r0, r0, r2
 800dc66:	bd10      	pop	{r4, pc}
 800dc68:	2800      	cmp	r0, #0
 800dc6a:	d1f3      	bne.n	800dc54 <strncmp+0xa>
 800dc6c:	e7fa      	b.n	800dc64 <strncmp+0x1a>
 800dc6e:	4610      	mov	r0, r2
 800dc70:	e7f9      	b.n	800dc66 <strncmp+0x1c>
	...

0800dc74 <_strtoul_l.constprop.0>:
 800dc74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dc78:	4686      	mov	lr, r0
 800dc7a:	460d      	mov	r5, r1
 800dc7c:	4f35      	ldr	r7, [pc, #212]	; (800dd54 <_strtoul_l.constprop.0+0xe0>)
 800dc7e:	4628      	mov	r0, r5
 800dc80:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dc84:	5de6      	ldrb	r6, [r4, r7]
 800dc86:	f016 0608 	ands.w	r6, r6, #8
 800dc8a:	d1f8      	bne.n	800dc7e <_strtoul_l.constprop.0+0xa>
 800dc8c:	2c2d      	cmp	r4, #45	; 0x2d
 800dc8e:	d12f      	bne.n	800dcf0 <_strtoul_l.constprop.0+0x7c>
 800dc90:	2601      	movs	r6, #1
 800dc92:	782c      	ldrb	r4, [r5, #0]
 800dc94:	1c85      	adds	r5, r0, #2
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d057      	beq.n	800dd4a <_strtoul_l.constprop.0+0xd6>
 800dc9a:	2b10      	cmp	r3, #16
 800dc9c:	d109      	bne.n	800dcb2 <_strtoul_l.constprop.0+0x3e>
 800dc9e:	2c30      	cmp	r4, #48	; 0x30
 800dca0:	d107      	bne.n	800dcb2 <_strtoul_l.constprop.0+0x3e>
 800dca2:	7828      	ldrb	r0, [r5, #0]
 800dca4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800dca8:	2858      	cmp	r0, #88	; 0x58
 800dcaa:	d149      	bne.n	800dd40 <_strtoul_l.constprop.0+0xcc>
 800dcac:	2310      	movs	r3, #16
 800dcae:	786c      	ldrb	r4, [r5, #1]
 800dcb0:	3502      	adds	r5, #2
 800dcb2:	f04f 38ff 	mov.w	r8, #4294967295
 800dcb6:	fbb8 f8f3 	udiv	r8, r8, r3
 800dcba:	2700      	movs	r7, #0
 800dcbc:	fb03 f908 	mul.w	r9, r3, r8
 800dcc0:	4638      	mov	r0, r7
 800dcc2:	ea6f 0909 	mvn.w	r9, r9
 800dcc6:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800dcca:	f1bc 0f09 	cmp.w	ip, #9
 800dcce:	d814      	bhi.n	800dcfa <_strtoul_l.constprop.0+0x86>
 800dcd0:	4664      	mov	r4, ip
 800dcd2:	42a3      	cmp	r3, r4
 800dcd4:	dd22      	ble.n	800dd1c <_strtoul_l.constprop.0+0xa8>
 800dcd6:	2f00      	cmp	r7, #0
 800dcd8:	db1d      	blt.n	800dd16 <_strtoul_l.constprop.0+0xa2>
 800dcda:	4580      	cmp	r8, r0
 800dcdc:	d31b      	bcc.n	800dd16 <_strtoul_l.constprop.0+0xa2>
 800dcde:	d101      	bne.n	800dce4 <_strtoul_l.constprop.0+0x70>
 800dce0:	45a1      	cmp	r9, r4
 800dce2:	db18      	blt.n	800dd16 <_strtoul_l.constprop.0+0xa2>
 800dce4:	2701      	movs	r7, #1
 800dce6:	fb00 4003 	mla	r0, r0, r3, r4
 800dcea:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dcee:	e7ea      	b.n	800dcc6 <_strtoul_l.constprop.0+0x52>
 800dcf0:	2c2b      	cmp	r4, #43	; 0x2b
 800dcf2:	bf04      	itt	eq
 800dcf4:	782c      	ldrbeq	r4, [r5, #0]
 800dcf6:	1c85      	addeq	r5, r0, #2
 800dcf8:	e7cd      	b.n	800dc96 <_strtoul_l.constprop.0+0x22>
 800dcfa:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800dcfe:	f1bc 0f19 	cmp.w	ip, #25
 800dd02:	d801      	bhi.n	800dd08 <_strtoul_l.constprop.0+0x94>
 800dd04:	3c37      	subs	r4, #55	; 0x37
 800dd06:	e7e4      	b.n	800dcd2 <_strtoul_l.constprop.0+0x5e>
 800dd08:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800dd0c:	f1bc 0f19 	cmp.w	ip, #25
 800dd10:	d804      	bhi.n	800dd1c <_strtoul_l.constprop.0+0xa8>
 800dd12:	3c57      	subs	r4, #87	; 0x57
 800dd14:	e7dd      	b.n	800dcd2 <_strtoul_l.constprop.0+0x5e>
 800dd16:	f04f 37ff 	mov.w	r7, #4294967295
 800dd1a:	e7e6      	b.n	800dcea <_strtoul_l.constprop.0+0x76>
 800dd1c:	2f00      	cmp	r7, #0
 800dd1e:	da07      	bge.n	800dd30 <_strtoul_l.constprop.0+0xbc>
 800dd20:	2322      	movs	r3, #34	; 0x22
 800dd22:	f04f 30ff 	mov.w	r0, #4294967295
 800dd26:	f8ce 3000 	str.w	r3, [lr]
 800dd2a:	b932      	cbnz	r2, 800dd3a <_strtoul_l.constprop.0+0xc6>
 800dd2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dd30:	b106      	cbz	r6, 800dd34 <_strtoul_l.constprop.0+0xc0>
 800dd32:	4240      	negs	r0, r0
 800dd34:	2a00      	cmp	r2, #0
 800dd36:	d0f9      	beq.n	800dd2c <_strtoul_l.constprop.0+0xb8>
 800dd38:	b107      	cbz	r7, 800dd3c <_strtoul_l.constprop.0+0xc8>
 800dd3a:	1e69      	subs	r1, r5, #1
 800dd3c:	6011      	str	r1, [r2, #0]
 800dd3e:	e7f5      	b.n	800dd2c <_strtoul_l.constprop.0+0xb8>
 800dd40:	2430      	movs	r4, #48	; 0x30
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d1b5      	bne.n	800dcb2 <_strtoul_l.constprop.0+0x3e>
 800dd46:	2308      	movs	r3, #8
 800dd48:	e7b3      	b.n	800dcb2 <_strtoul_l.constprop.0+0x3e>
 800dd4a:	2c30      	cmp	r4, #48	; 0x30
 800dd4c:	d0a9      	beq.n	800dca2 <_strtoul_l.constprop.0+0x2e>
 800dd4e:	230a      	movs	r3, #10
 800dd50:	e7af      	b.n	800dcb2 <_strtoul_l.constprop.0+0x3e>
 800dd52:	bf00      	nop
 800dd54:	0800f851 	.word	0x0800f851

0800dd58 <_strtoul_r>:
 800dd58:	f7ff bf8c 	b.w	800dc74 <_strtoul_l.constprop.0>

0800dd5c <strtoul>:
 800dd5c:	4613      	mov	r3, r2
 800dd5e:	460a      	mov	r2, r1
 800dd60:	4601      	mov	r1, r0
 800dd62:	4802      	ldr	r0, [pc, #8]	; (800dd6c <strtoul+0x10>)
 800dd64:	6800      	ldr	r0, [r0, #0]
 800dd66:	f7ff bf85 	b.w	800dc74 <_strtoul_l.constprop.0>
 800dd6a:	bf00      	nop
 800dd6c:	200004e4 	.word	0x200004e4

0800dd70 <__swbuf_r>:
 800dd70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd72:	460e      	mov	r6, r1
 800dd74:	4614      	mov	r4, r2
 800dd76:	4605      	mov	r5, r0
 800dd78:	b118      	cbz	r0, 800dd82 <__swbuf_r+0x12>
 800dd7a:	6983      	ldr	r3, [r0, #24]
 800dd7c:	b90b      	cbnz	r3, 800dd82 <__swbuf_r+0x12>
 800dd7e:	f000 fa03 	bl	800e188 <__sinit>
 800dd82:	4b21      	ldr	r3, [pc, #132]	; (800de08 <__swbuf_r+0x98>)
 800dd84:	429c      	cmp	r4, r3
 800dd86:	d12b      	bne.n	800dde0 <__swbuf_r+0x70>
 800dd88:	686c      	ldr	r4, [r5, #4]
 800dd8a:	69a3      	ldr	r3, [r4, #24]
 800dd8c:	60a3      	str	r3, [r4, #8]
 800dd8e:	89a3      	ldrh	r3, [r4, #12]
 800dd90:	071a      	lsls	r2, r3, #28
 800dd92:	d52f      	bpl.n	800ddf4 <__swbuf_r+0x84>
 800dd94:	6923      	ldr	r3, [r4, #16]
 800dd96:	b36b      	cbz	r3, 800ddf4 <__swbuf_r+0x84>
 800dd98:	6923      	ldr	r3, [r4, #16]
 800dd9a:	6820      	ldr	r0, [r4, #0]
 800dd9c:	b2f6      	uxtb	r6, r6
 800dd9e:	1ac0      	subs	r0, r0, r3
 800dda0:	6963      	ldr	r3, [r4, #20]
 800dda2:	4637      	mov	r7, r6
 800dda4:	4283      	cmp	r3, r0
 800dda6:	dc04      	bgt.n	800ddb2 <__swbuf_r+0x42>
 800dda8:	4621      	mov	r1, r4
 800ddaa:	4628      	mov	r0, r5
 800ddac:	f000 f958 	bl	800e060 <_fflush_r>
 800ddb0:	bb30      	cbnz	r0, 800de00 <__swbuf_r+0x90>
 800ddb2:	68a3      	ldr	r3, [r4, #8]
 800ddb4:	3001      	adds	r0, #1
 800ddb6:	3b01      	subs	r3, #1
 800ddb8:	60a3      	str	r3, [r4, #8]
 800ddba:	6823      	ldr	r3, [r4, #0]
 800ddbc:	1c5a      	adds	r2, r3, #1
 800ddbe:	6022      	str	r2, [r4, #0]
 800ddc0:	701e      	strb	r6, [r3, #0]
 800ddc2:	6963      	ldr	r3, [r4, #20]
 800ddc4:	4283      	cmp	r3, r0
 800ddc6:	d004      	beq.n	800ddd2 <__swbuf_r+0x62>
 800ddc8:	89a3      	ldrh	r3, [r4, #12]
 800ddca:	07db      	lsls	r3, r3, #31
 800ddcc:	d506      	bpl.n	800dddc <__swbuf_r+0x6c>
 800ddce:	2e0a      	cmp	r6, #10
 800ddd0:	d104      	bne.n	800dddc <__swbuf_r+0x6c>
 800ddd2:	4621      	mov	r1, r4
 800ddd4:	4628      	mov	r0, r5
 800ddd6:	f000 f943 	bl	800e060 <_fflush_r>
 800ddda:	b988      	cbnz	r0, 800de00 <__swbuf_r+0x90>
 800dddc:	4638      	mov	r0, r7
 800ddde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dde0:	4b0a      	ldr	r3, [pc, #40]	; (800de0c <__swbuf_r+0x9c>)
 800dde2:	429c      	cmp	r4, r3
 800dde4:	d101      	bne.n	800ddea <__swbuf_r+0x7a>
 800dde6:	68ac      	ldr	r4, [r5, #8]
 800dde8:	e7cf      	b.n	800dd8a <__swbuf_r+0x1a>
 800ddea:	4b09      	ldr	r3, [pc, #36]	; (800de10 <__swbuf_r+0xa0>)
 800ddec:	429c      	cmp	r4, r3
 800ddee:	bf08      	it	eq
 800ddf0:	68ec      	ldreq	r4, [r5, #12]
 800ddf2:	e7ca      	b.n	800dd8a <__swbuf_r+0x1a>
 800ddf4:	4621      	mov	r1, r4
 800ddf6:	4628      	mov	r0, r5
 800ddf8:	f000 f81e 	bl	800de38 <__swsetup_r>
 800ddfc:	2800      	cmp	r0, #0
 800ddfe:	d0cb      	beq.n	800dd98 <__swbuf_r+0x28>
 800de00:	f04f 37ff 	mov.w	r7, #4294967295
 800de04:	e7ea      	b.n	800dddc <__swbuf_r+0x6c>
 800de06:	bf00      	nop
 800de08:	0800f9a4 	.word	0x0800f9a4
 800de0c:	0800f9c4 	.word	0x0800f9c4
 800de10:	0800f984 	.word	0x0800f984

0800de14 <_write_r>:
 800de14:	b538      	push	{r3, r4, r5, lr}
 800de16:	4604      	mov	r4, r0
 800de18:	4608      	mov	r0, r1
 800de1a:	4611      	mov	r1, r2
 800de1c:	2200      	movs	r2, #0
 800de1e:	4d05      	ldr	r5, [pc, #20]	; (800de34 <_write_r+0x20>)
 800de20:	602a      	str	r2, [r5, #0]
 800de22:	461a      	mov	r2, r3
 800de24:	f7f8 fc32 	bl	800668c <_write>
 800de28:	1c43      	adds	r3, r0, #1
 800de2a:	d102      	bne.n	800de32 <_write_r+0x1e>
 800de2c:	682b      	ldr	r3, [r5, #0]
 800de2e:	b103      	cbz	r3, 800de32 <_write_r+0x1e>
 800de30:	6023      	str	r3, [r4, #0]
 800de32:	bd38      	pop	{r3, r4, r5, pc}
 800de34:	20002c48 	.word	0x20002c48

0800de38 <__swsetup_r>:
 800de38:	4b32      	ldr	r3, [pc, #200]	; (800df04 <__swsetup_r+0xcc>)
 800de3a:	b570      	push	{r4, r5, r6, lr}
 800de3c:	681d      	ldr	r5, [r3, #0]
 800de3e:	4606      	mov	r6, r0
 800de40:	460c      	mov	r4, r1
 800de42:	b125      	cbz	r5, 800de4e <__swsetup_r+0x16>
 800de44:	69ab      	ldr	r3, [r5, #24]
 800de46:	b913      	cbnz	r3, 800de4e <__swsetup_r+0x16>
 800de48:	4628      	mov	r0, r5
 800de4a:	f000 f99d 	bl	800e188 <__sinit>
 800de4e:	4b2e      	ldr	r3, [pc, #184]	; (800df08 <__swsetup_r+0xd0>)
 800de50:	429c      	cmp	r4, r3
 800de52:	d10f      	bne.n	800de74 <__swsetup_r+0x3c>
 800de54:	686c      	ldr	r4, [r5, #4]
 800de56:	89a3      	ldrh	r3, [r4, #12]
 800de58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800de5c:	0719      	lsls	r1, r3, #28
 800de5e:	d42c      	bmi.n	800deba <__swsetup_r+0x82>
 800de60:	06dd      	lsls	r5, r3, #27
 800de62:	d411      	bmi.n	800de88 <__swsetup_r+0x50>
 800de64:	2309      	movs	r3, #9
 800de66:	6033      	str	r3, [r6, #0]
 800de68:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800de6c:	f04f 30ff 	mov.w	r0, #4294967295
 800de70:	81a3      	strh	r3, [r4, #12]
 800de72:	e03e      	b.n	800def2 <__swsetup_r+0xba>
 800de74:	4b25      	ldr	r3, [pc, #148]	; (800df0c <__swsetup_r+0xd4>)
 800de76:	429c      	cmp	r4, r3
 800de78:	d101      	bne.n	800de7e <__swsetup_r+0x46>
 800de7a:	68ac      	ldr	r4, [r5, #8]
 800de7c:	e7eb      	b.n	800de56 <__swsetup_r+0x1e>
 800de7e:	4b24      	ldr	r3, [pc, #144]	; (800df10 <__swsetup_r+0xd8>)
 800de80:	429c      	cmp	r4, r3
 800de82:	bf08      	it	eq
 800de84:	68ec      	ldreq	r4, [r5, #12]
 800de86:	e7e6      	b.n	800de56 <__swsetup_r+0x1e>
 800de88:	0758      	lsls	r0, r3, #29
 800de8a:	d512      	bpl.n	800deb2 <__swsetup_r+0x7a>
 800de8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800de8e:	b141      	cbz	r1, 800dea2 <__swsetup_r+0x6a>
 800de90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800de94:	4299      	cmp	r1, r3
 800de96:	d002      	beq.n	800de9e <__swsetup_r+0x66>
 800de98:	4630      	mov	r0, r6
 800de9a:	f7fe fc5d 	bl	800c758 <_free_r>
 800de9e:	2300      	movs	r3, #0
 800dea0:	6363      	str	r3, [r4, #52]	; 0x34
 800dea2:	89a3      	ldrh	r3, [r4, #12]
 800dea4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800dea8:	81a3      	strh	r3, [r4, #12]
 800deaa:	2300      	movs	r3, #0
 800deac:	6063      	str	r3, [r4, #4]
 800deae:	6923      	ldr	r3, [r4, #16]
 800deb0:	6023      	str	r3, [r4, #0]
 800deb2:	89a3      	ldrh	r3, [r4, #12]
 800deb4:	f043 0308 	orr.w	r3, r3, #8
 800deb8:	81a3      	strh	r3, [r4, #12]
 800deba:	6923      	ldr	r3, [r4, #16]
 800debc:	b94b      	cbnz	r3, 800ded2 <__swsetup_r+0x9a>
 800debe:	89a3      	ldrh	r3, [r4, #12]
 800dec0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800dec4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dec8:	d003      	beq.n	800ded2 <__swsetup_r+0x9a>
 800deca:	4621      	mov	r1, r4
 800decc:	4630      	mov	r0, r6
 800dece:	f000 fa31 	bl	800e334 <__smakebuf_r>
 800ded2:	89a0      	ldrh	r0, [r4, #12]
 800ded4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ded8:	f010 0301 	ands.w	r3, r0, #1
 800dedc:	d00a      	beq.n	800def4 <__swsetup_r+0xbc>
 800dede:	2300      	movs	r3, #0
 800dee0:	60a3      	str	r3, [r4, #8]
 800dee2:	6963      	ldr	r3, [r4, #20]
 800dee4:	425b      	negs	r3, r3
 800dee6:	61a3      	str	r3, [r4, #24]
 800dee8:	6923      	ldr	r3, [r4, #16]
 800deea:	b943      	cbnz	r3, 800defe <__swsetup_r+0xc6>
 800deec:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800def0:	d1ba      	bne.n	800de68 <__swsetup_r+0x30>
 800def2:	bd70      	pop	{r4, r5, r6, pc}
 800def4:	0781      	lsls	r1, r0, #30
 800def6:	bf58      	it	pl
 800def8:	6963      	ldrpl	r3, [r4, #20]
 800defa:	60a3      	str	r3, [r4, #8]
 800defc:	e7f4      	b.n	800dee8 <__swsetup_r+0xb0>
 800defe:	2000      	movs	r0, #0
 800df00:	e7f7      	b.n	800def2 <__swsetup_r+0xba>
 800df02:	bf00      	nop
 800df04:	200004e4 	.word	0x200004e4
 800df08:	0800f9a4 	.word	0x0800f9a4
 800df0c:	0800f9c4 	.word	0x0800f9c4
 800df10:	0800f984 	.word	0x0800f984

0800df14 <abort>:
 800df14:	2006      	movs	r0, #6
 800df16:	b508      	push	{r3, lr}
 800df18:	f000 fe3c 	bl	800eb94 <raise>
 800df1c:	2001      	movs	r0, #1
 800df1e:	f7f8 fb8e 	bl	800663e <_exit>
	...

0800df24 <_close_r>:
 800df24:	b538      	push	{r3, r4, r5, lr}
 800df26:	2300      	movs	r3, #0
 800df28:	4d05      	ldr	r5, [pc, #20]	; (800df40 <_close_r+0x1c>)
 800df2a:	4604      	mov	r4, r0
 800df2c:	4608      	mov	r0, r1
 800df2e:	602b      	str	r3, [r5, #0]
 800df30:	f7f8 fbc8 	bl	80066c4 <_close>
 800df34:	1c43      	adds	r3, r0, #1
 800df36:	d102      	bne.n	800df3e <_close_r+0x1a>
 800df38:	682b      	ldr	r3, [r5, #0]
 800df3a:	b103      	cbz	r3, 800df3e <_close_r+0x1a>
 800df3c:	6023      	str	r3, [r4, #0]
 800df3e:	bd38      	pop	{r3, r4, r5, pc}
 800df40:	20002c48 	.word	0x20002c48

0800df44 <__env_lock>:
 800df44:	4801      	ldr	r0, [pc, #4]	; (800df4c <__env_lock+0x8>)
 800df46:	f7ff b9af 	b.w	800d2a8 <__retarget_lock_acquire_recursive>
 800df4a:	bf00      	nop
 800df4c:	20002c40 	.word	0x20002c40

0800df50 <__env_unlock>:
 800df50:	4801      	ldr	r0, [pc, #4]	; (800df58 <__env_unlock+0x8>)
 800df52:	f7ff b9ab 	b.w	800d2ac <__retarget_lock_release_recursive>
 800df56:	bf00      	nop
 800df58:	20002c40 	.word	0x20002c40

0800df5c <__sflush_r>:
 800df5c:	898a      	ldrh	r2, [r1, #12]
 800df5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df60:	4605      	mov	r5, r0
 800df62:	0710      	lsls	r0, r2, #28
 800df64:	460c      	mov	r4, r1
 800df66:	d457      	bmi.n	800e018 <__sflush_r+0xbc>
 800df68:	684b      	ldr	r3, [r1, #4]
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	dc04      	bgt.n	800df78 <__sflush_r+0x1c>
 800df6e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800df70:	2b00      	cmp	r3, #0
 800df72:	dc01      	bgt.n	800df78 <__sflush_r+0x1c>
 800df74:	2000      	movs	r0, #0
 800df76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800df78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800df7a:	2e00      	cmp	r6, #0
 800df7c:	d0fa      	beq.n	800df74 <__sflush_r+0x18>
 800df7e:	2300      	movs	r3, #0
 800df80:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800df84:	682f      	ldr	r7, [r5, #0]
 800df86:	602b      	str	r3, [r5, #0]
 800df88:	d032      	beq.n	800dff0 <__sflush_r+0x94>
 800df8a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800df8c:	89a3      	ldrh	r3, [r4, #12]
 800df8e:	075a      	lsls	r2, r3, #29
 800df90:	d505      	bpl.n	800df9e <__sflush_r+0x42>
 800df92:	6863      	ldr	r3, [r4, #4]
 800df94:	1ac0      	subs	r0, r0, r3
 800df96:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800df98:	b10b      	cbz	r3, 800df9e <__sflush_r+0x42>
 800df9a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800df9c:	1ac0      	subs	r0, r0, r3
 800df9e:	2300      	movs	r3, #0
 800dfa0:	4602      	mov	r2, r0
 800dfa2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dfa4:	4628      	mov	r0, r5
 800dfa6:	6a21      	ldr	r1, [r4, #32]
 800dfa8:	47b0      	blx	r6
 800dfaa:	1c43      	adds	r3, r0, #1
 800dfac:	89a3      	ldrh	r3, [r4, #12]
 800dfae:	d106      	bne.n	800dfbe <__sflush_r+0x62>
 800dfb0:	6829      	ldr	r1, [r5, #0]
 800dfb2:	291d      	cmp	r1, #29
 800dfb4:	d82c      	bhi.n	800e010 <__sflush_r+0xb4>
 800dfb6:	4a29      	ldr	r2, [pc, #164]	; (800e05c <__sflush_r+0x100>)
 800dfb8:	40ca      	lsrs	r2, r1
 800dfba:	07d6      	lsls	r6, r2, #31
 800dfbc:	d528      	bpl.n	800e010 <__sflush_r+0xb4>
 800dfbe:	2200      	movs	r2, #0
 800dfc0:	6062      	str	r2, [r4, #4]
 800dfc2:	6922      	ldr	r2, [r4, #16]
 800dfc4:	04d9      	lsls	r1, r3, #19
 800dfc6:	6022      	str	r2, [r4, #0]
 800dfc8:	d504      	bpl.n	800dfd4 <__sflush_r+0x78>
 800dfca:	1c42      	adds	r2, r0, #1
 800dfcc:	d101      	bne.n	800dfd2 <__sflush_r+0x76>
 800dfce:	682b      	ldr	r3, [r5, #0]
 800dfd0:	b903      	cbnz	r3, 800dfd4 <__sflush_r+0x78>
 800dfd2:	6560      	str	r0, [r4, #84]	; 0x54
 800dfd4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dfd6:	602f      	str	r7, [r5, #0]
 800dfd8:	2900      	cmp	r1, #0
 800dfda:	d0cb      	beq.n	800df74 <__sflush_r+0x18>
 800dfdc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dfe0:	4299      	cmp	r1, r3
 800dfe2:	d002      	beq.n	800dfea <__sflush_r+0x8e>
 800dfe4:	4628      	mov	r0, r5
 800dfe6:	f7fe fbb7 	bl	800c758 <_free_r>
 800dfea:	2000      	movs	r0, #0
 800dfec:	6360      	str	r0, [r4, #52]	; 0x34
 800dfee:	e7c2      	b.n	800df76 <__sflush_r+0x1a>
 800dff0:	6a21      	ldr	r1, [r4, #32]
 800dff2:	2301      	movs	r3, #1
 800dff4:	4628      	mov	r0, r5
 800dff6:	47b0      	blx	r6
 800dff8:	1c41      	adds	r1, r0, #1
 800dffa:	d1c7      	bne.n	800df8c <__sflush_r+0x30>
 800dffc:	682b      	ldr	r3, [r5, #0]
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d0c4      	beq.n	800df8c <__sflush_r+0x30>
 800e002:	2b1d      	cmp	r3, #29
 800e004:	d001      	beq.n	800e00a <__sflush_r+0xae>
 800e006:	2b16      	cmp	r3, #22
 800e008:	d101      	bne.n	800e00e <__sflush_r+0xb2>
 800e00a:	602f      	str	r7, [r5, #0]
 800e00c:	e7b2      	b.n	800df74 <__sflush_r+0x18>
 800e00e:	89a3      	ldrh	r3, [r4, #12]
 800e010:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e014:	81a3      	strh	r3, [r4, #12]
 800e016:	e7ae      	b.n	800df76 <__sflush_r+0x1a>
 800e018:	690f      	ldr	r7, [r1, #16]
 800e01a:	2f00      	cmp	r7, #0
 800e01c:	d0aa      	beq.n	800df74 <__sflush_r+0x18>
 800e01e:	0793      	lsls	r3, r2, #30
 800e020:	bf18      	it	ne
 800e022:	2300      	movne	r3, #0
 800e024:	680e      	ldr	r6, [r1, #0]
 800e026:	bf08      	it	eq
 800e028:	694b      	ldreq	r3, [r1, #20]
 800e02a:	1bf6      	subs	r6, r6, r7
 800e02c:	600f      	str	r7, [r1, #0]
 800e02e:	608b      	str	r3, [r1, #8]
 800e030:	2e00      	cmp	r6, #0
 800e032:	dd9f      	ble.n	800df74 <__sflush_r+0x18>
 800e034:	4633      	mov	r3, r6
 800e036:	463a      	mov	r2, r7
 800e038:	4628      	mov	r0, r5
 800e03a:	6a21      	ldr	r1, [r4, #32]
 800e03c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800e040:	47e0      	blx	ip
 800e042:	2800      	cmp	r0, #0
 800e044:	dc06      	bgt.n	800e054 <__sflush_r+0xf8>
 800e046:	89a3      	ldrh	r3, [r4, #12]
 800e048:	f04f 30ff 	mov.w	r0, #4294967295
 800e04c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e050:	81a3      	strh	r3, [r4, #12]
 800e052:	e790      	b.n	800df76 <__sflush_r+0x1a>
 800e054:	4407      	add	r7, r0
 800e056:	1a36      	subs	r6, r6, r0
 800e058:	e7ea      	b.n	800e030 <__sflush_r+0xd4>
 800e05a:	bf00      	nop
 800e05c:	20400001 	.word	0x20400001

0800e060 <_fflush_r>:
 800e060:	b538      	push	{r3, r4, r5, lr}
 800e062:	690b      	ldr	r3, [r1, #16]
 800e064:	4605      	mov	r5, r0
 800e066:	460c      	mov	r4, r1
 800e068:	b913      	cbnz	r3, 800e070 <_fflush_r+0x10>
 800e06a:	2500      	movs	r5, #0
 800e06c:	4628      	mov	r0, r5
 800e06e:	bd38      	pop	{r3, r4, r5, pc}
 800e070:	b118      	cbz	r0, 800e07a <_fflush_r+0x1a>
 800e072:	6983      	ldr	r3, [r0, #24]
 800e074:	b90b      	cbnz	r3, 800e07a <_fflush_r+0x1a>
 800e076:	f000 f887 	bl	800e188 <__sinit>
 800e07a:	4b14      	ldr	r3, [pc, #80]	; (800e0cc <_fflush_r+0x6c>)
 800e07c:	429c      	cmp	r4, r3
 800e07e:	d11b      	bne.n	800e0b8 <_fflush_r+0x58>
 800e080:	686c      	ldr	r4, [r5, #4]
 800e082:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e086:	2b00      	cmp	r3, #0
 800e088:	d0ef      	beq.n	800e06a <_fflush_r+0xa>
 800e08a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e08c:	07d0      	lsls	r0, r2, #31
 800e08e:	d404      	bmi.n	800e09a <_fflush_r+0x3a>
 800e090:	0599      	lsls	r1, r3, #22
 800e092:	d402      	bmi.n	800e09a <_fflush_r+0x3a>
 800e094:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e096:	f7ff f907 	bl	800d2a8 <__retarget_lock_acquire_recursive>
 800e09a:	4628      	mov	r0, r5
 800e09c:	4621      	mov	r1, r4
 800e09e:	f7ff ff5d 	bl	800df5c <__sflush_r>
 800e0a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e0a4:	4605      	mov	r5, r0
 800e0a6:	07da      	lsls	r2, r3, #31
 800e0a8:	d4e0      	bmi.n	800e06c <_fflush_r+0xc>
 800e0aa:	89a3      	ldrh	r3, [r4, #12]
 800e0ac:	059b      	lsls	r3, r3, #22
 800e0ae:	d4dd      	bmi.n	800e06c <_fflush_r+0xc>
 800e0b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e0b2:	f7ff f8fb 	bl	800d2ac <__retarget_lock_release_recursive>
 800e0b6:	e7d9      	b.n	800e06c <_fflush_r+0xc>
 800e0b8:	4b05      	ldr	r3, [pc, #20]	; (800e0d0 <_fflush_r+0x70>)
 800e0ba:	429c      	cmp	r4, r3
 800e0bc:	d101      	bne.n	800e0c2 <_fflush_r+0x62>
 800e0be:	68ac      	ldr	r4, [r5, #8]
 800e0c0:	e7df      	b.n	800e082 <_fflush_r+0x22>
 800e0c2:	4b04      	ldr	r3, [pc, #16]	; (800e0d4 <_fflush_r+0x74>)
 800e0c4:	429c      	cmp	r4, r3
 800e0c6:	bf08      	it	eq
 800e0c8:	68ec      	ldreq	r4, [r5, #12]
 800e0ca:	e7da      	b.n	800e082 <_fflush_r+0x22>
 800e0cc:	0800f9a4 	.word	0x0800f9a4
 800e0d0:	0800f9c4 	.word	0x0800f9c4
 800e0d4:	0800f984 	.word	0x0800f984

0800e0d8 <std>:
 800e0d8:	2300      	movs	r3, #0
 800e0da:	b510      	push	{r4, lr}
 800e0dc:	4604      	mov	r4, r0
 800e0de:	e9c0 3300 	strd	r3, r3, [r0]
 800e0e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e0e6:	6083      	str	r3, [r0, #8]
 800e0e8:	8181      	strh	r1, [r0, #12]
 800e0ea:	6643      	str	r3, [r0, #100]	; 0x64
 800e0ec:	81c2      	strh	r2, [r0, #14]
 800e0ee:	6183      	str	r3, [r0, #24]
 800e0f0:	4619      	mov	r1, r3
 800e0f2:	2208      	movs	r2, #8
 800e0f4:	305c      	adds	r0, #92	; 0x5c
 800e0f6:	f7fe f8b5 	bl	800c264 <memset>
 800e0fa:	4b05      	ldr	r3, [pc, #20]	; (800e110 <std+0x38>)
 800e0fc:	6224      	str	r4, [r4, #32]
 800e0fe:	6263      	str	r3, [r4, #36]	; 0x24
 800e100:	4b04      	ldr	r3, [pc, #16]	; (800e114 <std+0x3c>)
 800e102:	62a3      	str	r3, [r4, #40]	; 0x28
 800e104:	4b04      	ldr	r3, [pc, #16]	; (800e118 <std+0x40>)
 800e106:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e108:	4b04      	ldr	r3, [pc, #16]	; (800e11c <std+0x44>)
 800e10a:	6323      	str	r3, [r4, #48]	; 0x30
 800e10c:	bd10      	pop	{r4, pc}
 800e10e:	bf00      	nop
 800e110:	0800dbb1 	.word	0x0800dbb1
 800e114:	0800dbd7 	.word	0x0800dbd7
 800e118:	0800dc0f 	.word	0x0800dc0f
 800e11c:	0800dc33 	.word	0x0800dc33

0800e120 <_cleanup_r>:
 800e120:	4901      	ldr	r1, [pc, #4]	; (800e128 <_cleanup_r+0x8>)
 800e122:	f000 b8af 	b.w	800e284 <_fwalk_reent>
 800e126:	bf00      	nop
 800e128:	0800e061 	.word	0x0800e061

0800e12c <__sfmoreglue>:
 800e12c:	2268      	movs	r2, #104	; 0x68
 800e12e:	b570      	push	{r4, r5, r6, lr}
 800e130:	1e4d      	subs	r5, r1, #1
 800e132:	4355      	muls	r5, r2
 800e134:	460e      	mov	r6, r1
 800e136:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e13a:	f7fe fb75 	bl	800c828 <_malloc_r>
 800e13e:	4604      	mov	r4, r0
 800e140:	b140      	cbz	r0, 800e154 <__sfmoreglue+0x28>
 800e142:	2100      	movs	r1, #0
 800e144:	e9c0 1600 	strd	r1, r6, [r0]
 800e148:	300c      	adds	r0, #12
 800e14a:	60a0      	str	r0, [r4, #8]
 800e14c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e150:	f7fe f888 	bl	800c264 <memset>
 800e154:	4620      	mov	r0, r4
 800e156:	bd70      	pop	{r4, r5, r6, pc}

0800e158 <__sfp_lock_acquire>:
 800e158:	4801      	ldr	r0, [pc, #4]	; (800e160 <__sfp_lock_acquire+0x8>)
 800e15a:	f7ff b8a5 	b.w	800d2a8 <__retarget_lock_acquire_recursive>
 800e15e:	bf00      	nop
 800e160:	20002c42 	.word	0x20002c42

0800e164 <__sfp_lock_release>:
 800e164:	4801      	ldr	r0, [pc, #4]	; (800e16c <__sfp_lock_release+0x8>)
 800e166:	f7ff b8a1 	b.w	800d2ac <__retarget_lock_release_recursive>
 800e16a:	bf00      	nop
 800e16c:	20002c42 	.word	0x20002c42

0800e170 <__sinit_lock_acquire>:
 800e170:	4801      	ldr	r0, [pc, #4]	; (800e178 <__sinit_lock_acquire+0x8>)
 800e172:	f7ff b899 	b.w	800d2a8 <__retarget_lock_acquire_recursive>
 800e176:	bf00      	nop
 800e178:	20002c43 	.word	0x20002c43

0800e17c <__sinit_lock_release>:
 800e17c:	4801      	ldr	r0, [pc, #4]	; (800e184 <__sinit_lock_release+0x8>)
 800e17e:	f7ff b895 	b.w	800d2ac <__retarget_lock_release_recursive>
 800e182:	bf00      	nop
 800e184:	20002c43 	.word	0x20002c43

0800e188 <__sinit>:
 800e188:	b510      	push	{r4, lr}
 800e18a:	4604      	mov	r4, r0
 800e18c:	f7ff fff0 	bl	800e170 <__sinit_lock_acquire>
 800e190:	69a3      	ldr	r3, [r4, #24]
 800e192:	b11b      	cbz	r3, 800e19c <__sinit+0x14>
 800e194:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e198:	f7ff bff0 	b.w	800e17c <__sinit_lock_release>
 800e19c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e1a0:	6523      	str	r3, [r4, #80]	; 0x50
 800e1a2:	4b13      	ldr	r3, [pc, #76]	; (800e1f0 <__sinit+0x68>)
 800e1a4:	4a13      	ldr	r2, [pc, #76]	; (800e1f4 <__sinit+0x6c>)
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	62a2      	str	r2, [r4, #40]	; 0x28
 800e1aa:	42a3      	cmp	r3, r4
 800e1ac:	bf08      	it	eq
 800e1ae:	2301      	moveq	r3, #1
 800e1b0:	4620      	mov	r0, r4
 800e1b2:	bf08      	it	eq
 800e1b4:	61a3      	streq	r3, [r4, #24]
 800e1b6:	f000 f81f 	bl	800e1f8 <__sfp>
 800e1ba:	6060      	str	r0, [r4, #4]
 800e1bc:	4620      	mov	r0, r4
 800e1be:	f000 f81b 	bl	800e1f8 <__sfp>
 800e1c2:	60a0      	str	r0, [r4, #8]
 800e1c4:	4620      	mov	r0, r4
 800e1c6:	f000 f817 	bl	800e1f8 <__sfp>
 800e1ca:	2200      	movs	r2, #0
 800e1cc:	2104      	movs	r1, #4
 800e1ce:	60e0      	str	r0, [r4, #12]
 800e1d0:	6860      	ldr	r0, [r4, #4]
 800e1d2:	f7ff ff81 	bl	800e0d8 <std>
 800e1d6:	2201      	movs	r2, #1
 800e1d8:	2109      	movs	r1, #9
 800e1da:	68a0      	ldr	r0, [r4, #8]
 800e1dc:	f7ff ff7c 	bl	800e0d8 <std>
 800e1e0:	2202      	movs	r2, #2
 800e1e2:	2112      	movs	r1, #18
 800e1e4:	68e0      	ldr	r0, [r4, #12]
 800e1e6:	f7ff ff77 	bl	800e0d8 <std>
 800e1ea:	2301      	movs	r3, #1
 800e1ec:	61a3      	str	r3, [r4, #24]
 800e1ee:	e7d1      	b.n	800e194 <__sinit+0xc>
 800e1f0:	0800f5e8 	.word	0x0800f5e8
 800e1f4:	0800e121 	.word	0x0800e121

0800e1f8 <__sfp>:
 800e1f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1fa:	4607      	mov	r7, r0
 800e1fc:	f7ff ffac 	bl	800e158 <__sfp_lock_acquire>
 800e200:	4b1e      	ldr	r3, [pc, #120]	; (800e27c <__sfp+0x84>)
 800e202:	681e      	ldr	r6, [r3, #0]
 800e204:	69b3      	ldr	r3, [r6, #24]
 800e206:	b913      	cbnz	r3, 800e20e <__sfp+0x16>
 800e208:	4630      	mov	r0, r6
 800e20a:	f7ff ffbd 	bl	800e188 <__sinit>
 800e20e:	3648      	adds	r6, #72	; 0x48
 800e210:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e214:	3b01      	subs	r3, #1
 800e216:	d503      	bpl.n	800e220 <__sfp+0x28>
 800e218:	6833      	ldr	r3, [r6, #0]
 800e21a:	b30b      	cbz	r3, 800e260 <__sfp+0x68>
 800e21c:	6836      	ldr	r6, [r6, #0]
 800e21e:	e7f7      	b.n	800e210 <__sfp+0x18>
 800e220:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e224:	b9d5      	cbnz	r5, 800e25c <__sfp+0x64>
 800e226:	4b16      	ldr	r3, [pc, #88]	; (800e280 <__sfp+0x88>)
 800e228:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e22c:	60e3      	str	r3, [r4, #12]
 800e22e:	6665      	str	r5, [r4, #100]	; 0x64
 800e230:	f7ff f838 	bl	800d2a4 <__retarget_lock_init_recursive>
 800e234:	f7ff ff96 	bl	800e164 <__sfp_lock_release>
 800e238:	2208      	movs	r2, #8
 800e23a:	4629      	mov	r1, r5
 800e23c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e240:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e244:	6025      	str	r5, [r4, #0]
 800e246:	61a5      	str	r5, [r4, #24]
 800e248:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e24c:	f7fe f80a 	bl	800c264 <memset>
 800e250:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e254:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e258:	4620      	mov	r0, r4
 800e25a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e25c:	3468      	adds	r4, #104	; 0x68
 800e25e:	e7d9      	b.n	800e214 <__sfp+0x1c>
 800e260:	2104      	movs	r1, #4
 800e262:	4638      	mov	r0, r7
 800e264:	f7ff ff62 	bl	800e12c <__sfmoreglue>
 800e268:	4604      	mov	r4, r0
 800e26a:	6030      	str	r0, [r6, #0]
 800e26c:	2800      	cmp	r0, #0
 800e26e:	d1d5      	bne.n	800e21c <__sfp+0x24>
 800e270:	f7ff ff78 	bl	800e164 <__sfp_lock_release>
 800e274:	230c      	movs	r3, #12
 800e276:	603b      	str	r3, [r7, #0]
 800e278:	e7ee      	b.n	800e258 <__sfp+0x60>
 800e27a:	bf00      	nop
 800e27c:	0800f5e8 	.word	0x0800f5e8
 800e280:	ffff0001 	.word	0xffff0001

0800e284 <_fwalk_reent>:
 800e284:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e288:	4606      	mov	r6, r0
 800e28a:	4688      	mov	r8, r1
 800e28c:	2700      	movs	r7, #0
 800e28e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e292:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e296:	f1b9 0901 	subs.w	r9, r9, #1
 800e29a:	d505      	bpl.n	800e2a8 <_fwalk_reent+0x24>
 800e29c:	6824      	ldr	r4, [r4, #0]
 800e29e:	2c00      	cmp	r4, #0
 800e2a0:	d1f7      	bne.n	800e292 <_fwalk_reent+0xe>
 800e2a2:	4638      	mov	r0, r7
 800e2a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e2a8:	89ab      	ldrh	r3, [r5, #12]
 800e2aa:	2b01      	cmp	r3, #1
 800e2ac:	d907      	bls.n	800e2be <_fwalk_reent+0x3a>
 800e2ae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e2b2:	3301      	adds	r3, #1
 800e2b4:	d003      	beq.n	800e2be <_fwalk_reent+0x3a>
 800e2b6:	4629      	mov	r1, r5
 800e2b8:	4630      	mov	r0, r6
 800e2ba:	47c0      	blx	r8
 800e2bc:	4307      	orrs	r7, r0
 800e2be:	3568      	adds	r5, #104	; 0x68
 800e2c0:	e7e9      	b.n	800e296 <_fwalk_reent+0x12>
	...

0800e2c4 <_lseek_r>:
 800e2c4:	b538      	push	{r3, r4, r5, lr}
 800e2c6:	4604      	mov	r4, r0
 800e2c8:	4608      	mov	r0, r1
 800e2ca:	4611      	mov	r1, r2
 800e2cc:	2200      	movs	r2, #0
 800e2ce:	4d05      	ldr	r5, [pc, #20]	; (800e2e4 <_lseek_r+0x20>)
 800e2d0:	602a      	str	r2, [r5, #0]
 800e2d2:	461a      	mov	r2, r3
 800e2d4:	f7f8 fa1a 	bl	800670c <_lseek>
 800e2d8:	1c43      	adds	r3, r0, #1
 800e2da:	d102      	bne.n	800e2e2 <_lseek_r+0x1e>
 800e2dc:	682b      	ldr	r3, [r5, #0]
 800e2de:	b103      	cbz	r3, 800e2e2 <_lseek_r+0x1e>
 800e2e0:	6023      	str	r3, [r4, #0]
 800e2e2:	bd38      	pop	{r3, r4, r5, pc}
 800e2e4:	20002c48 	.word	0x20002c48

0800e2e8 <__swhatbuf_r>:
 800e2e8:	b570      	push	{r4, r5, r6, lr}
 800e2ea:	460e      	mov	r6, r1
 800e2ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e2f0:	4614      	mov	r4, r2
 800e2f2:	2900      	cmp	r1, #0
 800e2f4:	461d      	mov	r5, r3
 800e2f6:	b096      	sub	sp, #88	; 0x58
 800e2f8:	da08      	bge.n	800e30c <__swhatbuf_r+0x24>
 800e2fa:	2200      	movs	r2, #0
 800e2fc:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800e300:	602a      	str	r2, [r5, #0]
 800e302:	061a      	lsls	r2, r3, #24
 800e304:	d410      	bmi.n	800e328 <__swhatbuf_r+0x40>
 800e306:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e30a:	e00e      	b.n	800e32a <__swhatbuf_r+0x42>
 800e30c:	466a      	mov	r2, sp
 800e30e:	f000 fc95 	bl	800ec3c <_fstat_r>
 800e312:	2800      	cmp	r0, #0
 800e314:	dbf1      	blt.n	800e2fa <__swhatbuf_r+0x12>
 800e316:	9a01      	ldr	r2, [sp, #4]
 800e318:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e31c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e320:	425a      	negs	r2, r3
 800e322:	415a      	adcs	r2, r3
 800e324:	602a      	str	r2, [r5, #0]
 800e326:	e7ee      	b.n	800e306 <__swhatbuf_r+0x1e>
 800e328:	2340      	movs	r3, #64	; 0x40
 800e32a:	2000      	movs	r0, #0
 800e32c:	6023      	str	r3, [r4, #0]
 800e32e:	b016      	add	sp, #88	; 0x58
 800e330:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e334 <__smakebuf_r>:
 800e334:	898b      	ldrh	r3, [r1, #12]
 800e336:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e338:	079d      	lsls	r5, r3, #30
 800e33a:	4606      	mov	r6, r0
 800e33c:	460c      	mov	r4, r1
 800e33e:	d507      	bpl.n	800e350 <__smakebuf_r+0x1c>
 800e340:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e344:	6023      	str	r3, [r4, #0]
 800e346:	6123      	str	r3, [r4, #16]
 800e348:	2301      	movs	r3, #1
 800e34a:	6163      	str	r3, [r4, #20]
 800e34c:	b002      	add	sp, #8
 800e34e:	bd70      	pop	{r4, r5, r6, pc}
 800e350:	466a      	mov	r2, sp
 800e352:	ab01      	add	r3, sp, #4
 800e354:	f7ff ffc8 	bl	800e2e8 <__swhatbuf_r>
 800e358:	9900      	ldr	r1, [sp, #0]
 800e35a:	4605      	mov	r5, r0
 800e35c:	4630      	mov	r0, r6
 800e35e:	f7fe fa63 	bl	800c828 <_malloc_r>
 800e362:	b948      	cbnz	r0, 800e378 <__smakebuf_r+0x44>
 800e364:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e368:	059a      	lsls	r2, r3, #22
 800e36a:	d4ef      	bmi.n	800e34c <__smakebuf_r+0x18>
 800e36c:	f023 0303 	bic.w	r3, r3, #3
 800e370:	f043 0302 	orr.w	r3, r3, #2
 800e374:	81a3      	strh	r3, [r4, #12]
 800e376:	e7e3      	b.n	800e340 <__smakebuf_r+0xc>
 800e378:	4b0d      	ldr	r3, [pc, #52]	; (800e3b0 <__smakebuf_r+0x7c>)
 800e37a:	62b3      	str	r3, [r6, #40]	; 0x28
 800e37c:	89a3      	ldrh	r3, [r4, #12]
 800e37e:	6020      	str	r0, [r4, #0]
 800e380:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e384:	81a3      	strh	r3, [r4, #12]
 800e386:	9b00      	ldr	r3, [sp, #0]
 800e388:	6120      	str	r0, [r4, #16]
 800e38a:	6163      	str	r3, [r4, #20]
 800e38c:	9b01      	ldr	r3, [sp, #4]
 800e38e:	b15b      	cbz	r3, 800e3a8 <__smakebuf_r+0x74>
 800e390:	4630      	mov	r0, r6
 800e392:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e396:	f000 fc63 	bl	800ec60 <_isatty_r>
 800e39a:	b128      	cbz	r0, 800e3a8 <__smakebuf_r+0x74>
 800e39c:	89a3      	ldrh	r3, [r4, #12]
 800e39e:	f023 0303 	bic.w	r3, r3, #3
 800e3a2:	f043 0301 	orr.w	r3, r3, #1
 800e3a6:	81a3      	strh	r3, [r4, #12]
 800e3a8:	89a0      	ldrh	r0, [r4, #12]
 800e3aa:	4305      	orrs	r5, r0
 800e3ac:	81a5      	strh	r5, [r4, #12]
 800e3ae:	e7cd      	b.n	800e34c <__smakebuf_r+0x18>
 800e3b0:	0800e121 	.word	0x0800e121

0800e3b4 <memchr>:
 800e3b4:	4603      	mov	r3, r0
 800e3b6:	b510      	push	{r4, lr}
 800e3b8:	b2c9      	uxtb	r1, r1
 800e3ba:	4402      	add	r2, r0
 800e3bc:	4293      	cmp	r3, r2
 800e3be:	4618      	mov	r0, r3
 800e3c0:	d101      	bne.n	800e3c6 <memchr+0x12>
 800e3c2:	2000      	movs	r0, #0
 800e3c4:	e003      	b.n	800e3ce <memchr+0x1a>
 800e3c6:	7804      	ldrb	r4, [r0, #0]
 800e3c8:	3301      	adds	r3, #1
 800e3ca:	428c      	cmp	r4, r1
 800e3cc:	d1f6      	bne.n	800e3bc <memchr+0x8>
 800e3ce:	bd10      	pop	{r4, pc}

0800e3d0 <memmove>:
 800e3d0:	4288      	cmp	r0, r1
 800e3d2:	b510      	push	{r4, lr}
 800e3d4:	eb01 0402 	add.w	r4, r1, r2
 800e3d8:	d902      	bls.n	800e3e0 <memmove+0x10>
 800e3da:	4284      	cmp	r4, r0
 800e3dc:	4623      	mov	r3, r4
 800e3de:	d807      	bhi.n	800e3f0 <memmove+0x20>
 800e3e0:	1e43      	subs	r3, r0, #1
 800e3e2:	42a1      	cmp	r1, r4
 800e3e4:	d008      	beq.n	800e3f8 <memmove+0x28>
 800e3e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e3ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e3ee:	e7f8      	b.n	800e3e2 <memmove+0x12>
 800e3f0:	4601      	mov	r1, r0
 800e3f2:	4402      	add	r2, r0
 800e3f4:	428a      	cmp	r2, r1
 800e3f6:	d100      	bne.n	800e3fa <memmove+0x2a>
 800e3f8:	bd10      	pop	{r4, pc}
 800e3fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e3fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e402:	e7f7      	b.n	800e3f4 <memmove+0x24>

0800e404 <_realloc_r>:
 800e404:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e408:	4680      	mov	r8, r0
 800e40a:	4614      	mov	r4, r2
 800e40c:	460e      	mov	r6, r1
 800e40e:	b921      	cbnz	r1, 800e41a <_realloc_r+0x16>
 800e410:	4611      	mov	r1, r2
 800e412:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e416:	f7fe ba07 	b.w	800c828 <_malloc_r>
 800e41a:	b92a      	cbnz	r2, 800e428 <_realloc_r+0x24>
 800e41c:	f7fe f99c 	bl	800c758 <_free_r>
 800e420:	4625      	mov	r5, r4
 800e422:	4628      	mov	r0, r5
 800e424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e428:	f000 fc2a 	bl	800ec80 <_malloc_usable_size_r>
 800e42c:	4284      	cmp	r4, r0
 800e42e:	4607      	mov	r7, r0
 800e430:	d802      	bhi.n	800e438 <_realloc_r+0x34>
 800e432:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e436:	d812      	bhi.n	800e45e <_realloc_r+0x5a>
 800e438:	4621      	mov	r1, r4
 800e43a:	4640      	mov	r0, r8
 800e43c:	f7fe f9f4 	bl	800c828 <_malloc_r>
 800e440:	4605      	mov	r5, r0
 800e442:	2800      	cmp	r0, #0
 800e444:	d0ed      	beq.n	800e422 <_realloc_r+0x1e>
 800e446:	42bc      	cmp	r4, r7
 800e448:	4622      	mov	r2, r4
 800e44a:	4631      	mov	r1, r6
 800e44c:	bf28      	it	cs
 800e44e:	463a      	movcs	r2, r7
 800e450:	f7fd fefa 	bl	800c248 <memcpy>
 800e454:	4631      	mov	r1, r6
 800e456:	4640      	mov	r0, r8
 800e458:	f7fe f97e 	bl	800c758 <_free_r>
 800e45c:	e7e1      	b.n	800e422 <_realloc_r+0x1e>
 800e45e:	4635      	mov	r5, r6
 800e460:	e7df      	b.n	800e422 <_realloc_r+0x1e>

0800e462 <_sungetc_r>:
 800e462:	b538      	push	{r3, r4, r5, lr}
 800e464:	1c4b      	adds	r3, r1, #1
 800e466:	4614      	mov	r4, r2
 800e468:	d103      	bne.n	800e472 <_sungetc_r+0x10>
 800e46a:	f04f 35ff 	mov.w	r5, #4294967295
 800e46e:	4628      	mov	r0, r5
 800e470:	bd38      	pop	{r3, r4, r5, pc}
 800e472:	8993      	ldrh	r3, [r2, #12]
 800e474:	b2cd      	uxtb	r5, r1
 800e476:	f023 0320 	bic.w	r3, r3, #32
 800e47a:	8193      	strh	r3, [r2, #12]
 800e47c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e47e:	6852      	ldr	r2, [r2, #4]
 800e480:	b18b      	cbz	r3, 800e4a6 <_sungetc_r+0x44>
 800e482:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e484:	4293      	cmp	r3, r2
 800e486:	dd08      	ble.n	800e49a <_sungetc_r+0x38>
 800e488:	6823      	ldr	r3, [r4, #0]
 800e48a:	1e5a      	subs	r2, r3, #1
 800e48c:	6022      	str	r2, [r4, #0]
 800e48e:	f803 5c01 	strb.w	r5, [r3, #-1]
 800e492:	6863      	ldr	r3, [r4, #4]
 800e494:	3301      	adds	r3, #1
 800e496:	6063      	str	r3, [r4, #4]
 800e498:	e7e9      	b.n	800e46e <_sungetc_r+0xc>
 800e49a:	4621      	mov	r1, r4
 800e49c:	f000 fb96 	bl	800ebcc <__submore>
 800e4a0:	2800      	cmp	r0, #0
 800e4a2:	d0f1      	beq.n	800e488 <_sungetc_r+0x26>
 800e4a4:	e7e1      	b.n	800e46a <_sungetc_r+0x8>
 800e4a6:	6921      	ldr	r1, [r4, #16]
 800e4a8:	6823      	ldr	r3, [r4, #0]
 800e4aa:	b151      	cbz	r1, 800e4c2 <_sungetc_r+0x60>
 800e4ac:	4299      	cmp	r1, r3
 800e4ae:	d208      	bcs.n	800e4c2 <_sungetc_r+0x60>
 800e4b0:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800e4b4:	42a9      	cmp	r1, r5
 800e4b6:	d104      	bne.n	800e4c2 <_sungetc_r+0x60>
 800e4b8:	3b01      	subs	r3, #1
 800e4ba:	3201      	adds	r2, #1
 800e4bc:	6023      	str	r3, [r4, #0]
 800e4be:	6062      	str	r2, [r4, #4]
 800e4c0:	e7d5      	b.n	800e46e <_sungetc_r+0xc>
 800e4c2:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800e4c6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e4ca:	6363      	str	r3, [r4, #52]	; 0x34
 800e4cc:	2303      	movs	r3, #3
 800e4ce:	63a3      	str	r3, [r4, #56]	; 0x38
 800e4d0:	4623      	mov	r3, r4
 800e4d2:	f803 5f46 	strb.w	r5, [r3, #70]!
 800e4d6:	6023      	str	r3, [r4, #0]
 800e4d8:	2301      	movs	r3, #1
 800e4da:	e7dc      	b.n	800e496 <_sungetc_r+0x34>

0800e4dc <__ssrefill_r>:
 800e4dc:	b510      	push	{r4, lr}
 800e4de:	460c      	mov	r4, r1
 800e4e0:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800e4e2:	b169      	cbz	r1, 800e500 <__ssrefill_r+0x24>
 800e4e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e4e8:	4299      	cmp	r1, r3
 800e4ea:	d001      	beq.n	800e4f0 <__ssrefill_r+0x14>
 800e4ec:	f7fe f934 	bl	800c758 <_free_r>
 800e4f0:	2000      	movs	r0, #0
 800e4f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e4f4:	6360      	str	r0, [r4, #52]	; 0x34
 800e4f6:	6063      	str	r3, [r4, #4]
 800e4f8:	b113      	cbz	r3, 800e500 <__ssrefill_r+0x24>
 800e4fa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e4fc:	6023      	str	r3, [r4, #0]
 800e4fe:	bd10      	pop	{r4, pc}
 800e500:	6923      	ldr	r3, [r4, #16]
 800e502:	f04f 30ff 	mov.w	r0, #4294967295
 800e506:	6023      	str	r3, [r4, #0]
 800e508:	2300      	movs	r3, #0
 800e50a:	6063      	str	r3, [r4, #4]
 800e50c:	89a3      	ldrh	r3, [r4, #12]
 800e50e:	f043 0320 	orr.w	r3, r3, #32
 800e512:	81a3      	strh	r3, [r4, #12]
 800e514:	e7f3      	b.n	800e4fe <__ssrefill_r+0x22>
	...

0800e518 <__ssvfiscanf_r>:
 800e518:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e51c:	460c      	mov	r4, r1
 800e51e:	2100      	movs	r1, #0
 800e520:	4606      	mov	r6, r0
 800e522:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800e526:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800e52a:	49a7      	ldr	r1, [pc, #668]	; (800e7c8 <__ssvfiscanf_r+0x2b0>)
 800e52c:	f10d 0804 	add.w	r8, sp, #4
 800e530:	91a0      	str	r1, [sp, #640]	; 0x280
 800e532:	49a6      	ldr	r1, [pc, #664]	; (800e7cc <__ssvfiscanf_r+0x2b4>)
 800e534:	4fa6      	ldr	r7, [pc, #664]	; (800e7d0 <__ssvfiscanf_r+0x2b8>)
 800e536:	f8df 929c 	ldr.w	r9, [pc, #668]	; 800e7d4 <__ssvfiscanf_r+0x2bc>
 800e53a:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800e53e:	91a1      	str	r1, [sp, #644]	; 0x284
 800e540:	9300      	str	r3, [sp, #0]
 800e542:	7813      	ldrb	r3, [r2, #0]
 800e544:	2b00      	cmp	r3, #0
 800e546:	f000 815c 	beq.w	800e802 <__ssvfiscanf_r+0x2ea>
 800e54a:	5dd9      	ldrb	r1, [r3, r7]
 800e54c:	1c55      	adds	r5, r2, #1
 800e54e:	f011 0108 	ands.w	r1, r1, #8
 800e552:	d019      	beq.n	800e588 <__ssvfiscanf_r+0x70>
 800e554:	6863      	ldr	r3, [r4, #4]
 800e556:	2b00      	cmp	r3, #0
 800e558:	dd0f      	ble.n	800e57a <__ssvfiscanf_r+0x62>
 800e55a:	6823      	ldr	r3, [r4, #0]
 800e55c:	781a      	ldrb	r2, [r3, #0]
 800e55e:	5cba      	ldrb	r2, [r7, r2]
 800e560:	0712      	lsls	r2, r2, #28
 800e562:	d401      	bmi.n	800e568 <__ssvfiscanf_r+0x50>
 800e564:	462a      	mov	r2, r5
 800e566:	e7ec      	b.n	800e542 <__ssvfiscanf_r+0x2a>
 800e568:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800e56a:	3301      	adds	r3, #1
 800e56c:	3201      	adds	r2, #1
 800e56e:	9245      	str	r2, [sp, #276]	; 0x114
 800e570:	6862      	ldr	r2, [r4, #4]
 800e572:	6023      	str	r3, [r4, #0]
 800e574:	3a01      	subs	r2, #1
 800e576:	6062      	str	r2, [r4, #4]
 800e578:	e7ec      	b.n	800e554 <__ssvfiscanf_r+0x3c>
 800e57a:	4621      	mov	r1, r4
 800e57c:	4630      	mov	r0, r6
 800e57e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e580:	4798      	blx	r3
 800e582:	2800      	cmp	r0, #0
 800e584:	d0e9      	beq.n	800e55a <__ssvfiscanf_r+0x42>
 800e586:	e7ed      	b.n	800e564 <__ssvfiscanf_r+0x4c>
 800e588:	2b25      	cmp	r3, #37	; 0x25
 800e58a:	d012      	beq.n	800e5b2 <__ssvfiscanf_r+0x9a>
 800e58c:	469a      	mov	sl, r3
 800e58e:	6863      	ldr	r3, [r4, #4]
 800e590:	2b00      	cmp	r3, #0
 800e592:	f340 8094 	ble.w	800e6be <__ssvfiscanf_r+0x1a6>
 800e596:	6822      	ldr	r2, [r4, #0]
 800e598:	7813      	ldrb	r3, [r2, #0]
 800e59a:	4553      	cmp	r3, sl
 800e59c:	f040 8131 	bne.w	800e802 <__ssvfiscanf_r+0x2ea>
 800e5a0:	6863      	ldr	r3, [r4, #4]
 800e5a2:	3201      	adds	r2, #1
 800e5a4:	3b01      	subs	r3, #1
 800e5a6:	6063      	str	r3, [r4, #4]
 800e5a8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800e5aa:	6022      	str	r2, [r4, #0]
 800e5ac:	3301      	adds	r3, #1
 800e5ae:	9345      	str	r3, [sp, #276]	; 0x114
 800e5b0:	e7d8      	b.n	800e564 <__ssvfiscanf_r+0x4c>
 800e5b2:	9141      	str	r1, [sp, #260]	; 0x104
 800e5b4:	9143      	str	r1, [sp, #268]	; 0x10c
 800e5b6:	7853      	ldrb	r3, [r2, #1]
 800e5b8:	2b2a      	cmp	r3, #42	; 0x2a
 800e5ba:	bf04      	itt	eq
 800e5bc:	2310      	moveq	r3, #16
 800e5be:	1c95      	addeq	r5, r2, #2
 800e5c0:	f04f 020a 	mov.w	r2, #10
 800e5c4:	bf08      	it	eq
 800e5c6:	9341      	streq	r3, [sp, #260]	; 0x104
 800e5c8:	46aa      	mov	sl, r5
 800e5ca:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800e5ce:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800e5d2:	2b09      	cmp	r3, #9
 800e5d4:	d91d      	bls.n	800e612 <__ssvfiscanf_r+0xfa>
 800e5d6:	2203      	movs	r2, #3
 800e5d8:	487e      	ldr	r0, [pc, #504]	; (800e7d4 <__ssvfiscanf_r+0x2bc>)
 800e5da:	f7ff feeb 	bl	800e3b4 <memchr>
 800e5de:	b140      	cbz	r0, 800e5f2 <__ssvfiscanf_r+0xda>
 800e5e0:	2301      	movs	r3, #1
 800e5e2:	4655      	mov	r5, sl
 800e5e4:	eba0 0009 	sub.w	r0, r0, r9
 800e5e8:	fa03 f000 	lsl.w	r0, r3, r0
 800e5ec:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e5ee:	4318      	orrs	r0, r3
 800e5f0:	9041      	str	r0, [sp, #260]	; 0x104
 800e5f2:	f815 3b01 	ldrb.w	r3, [r5], #1
 800e5f6:	2b78      	cmp	r3, #120	; 0x78
 800e5f8:	d806      	bhi.n	800e608 <__ssvfiscanf_r+0xf0>
 800e5fa:	2b57      	cmp	r3, #87	; 0x57
 800e5fc:	d810      	bhi.n	800e620 <__ssvfiscanf_r+0x108>
 800e5fe:	2b25      	cmp	r3, #37	; 0x25
 800e600:	d0c4      	beq.n	800e58c <__ssvfiscanf_r+0x74>
 800e602:	d857      	bhi.n	800e6b4 <__ssvfiscanf_r+0x19c>
 800e604:	2b00      	cmp	r3, #0
 800e606:	d065      	beq.n	800e6d4 <__ssvfiscanf_r+0x1bc>
 800e608:	2303      	movs	r3, #3
 800e60a:	9347      	str	r3, [sp, #284]	; 0x11c
 800e60c:	230a      	movs	r3, #10
 800e60e:	9342      	str	r3, [sp, #264]	; 0x108
 800e610:	e072      	b.n	800e6f8 <__ssvfiscanf_r+0x1e0>
 800e612:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800e614:	4655      	mov	r5, sl
 800e616:	fb02 1103 	mla	r1, r2, r3, r1
 800e61a:	3930      	subs	r1, #48	; 0x30
 800e61c:	9143      	str	r1, [sp, #268]	; 0x10c
 800e61e:	e7d3      	b.n	800e5c8 <__ssvfiscanf_r+0xb0>
 800e620:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800e624:	2a20      	cmp	r2, #32
 800e626:	d8ef      	bhi.n	800e608 <__ssvfiscanf_r+0xf0>
 800e628:	a101      	add	r1, pc, #4	; (adr r1, 800e630 <__ssvfiscanf_r+0x118>)
 800e62a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800e62e:	bf00      	nop
 800e630:	0800e6e3 	.word	0x0800e6e3
 800e634:	0800e609 	.word	0x0800e609
 800e638:	0800e609 	.word	0x0800e609
 800e63c:	0800e741 	.word	0x0800e741
 800e640:	0800e609 	.word	0x0800e609
 800e644:	0800e609 	.word	0x0800e609
 800e648:	0800e609 	.word	0x0800e609
 800e64c:	0800e609 	.word	0x0800e609
 800e650:	0800e609 	.word	0x0800e609
 800e654:	0800e609 	.word	0x0800e609
 800e658:	0800e609 	.word	0x0800e609
 800e65c:	0800e757 	.word	0x0800e757
 800e660:	0800e72d 	.word	0x0800e72d
 800e664:	0800e6bb 	.word	0x0800e6bb
 800e668:	0800e6bb 	.word	0x0800e6bb
 800e66c:	0800e6bb 	.word	0x0800e6bb
 800e670:	0800e609 	.word	0x0800e609
 800e674:	0800e731 	.word	0x0800e731
 800e678:	0800e609 	.word	0x0800e609
 800e67c:	0800e609 	.word	0x0800e609
 800e680:	0800e609 	.word	0x0800e609
 800e684:	0800e609 	.word	0x0800e609
 800e688:	0800e767 	.word	0x0800e767
 800e68c:	0800e739 	.word	0x0800e739
 800e690:	0800e6db 	.word	0x0800e6db
 800e694:	0800e609 	.word	0x0800e609
 800e698:	0800e609 	.word	0x0800e609
 800e69c:	0800e763 	.word	0x0800e763
 800e6a0:	0800e609 	.word	0x0800e609
 800e6a4:	0800e72d 	.word	0x0800e72d
 800e6a8:	0800e609 	.word	0x0800e609
 800e6ac:	0800e609 	.word	0x0800e609
 800e6b0:	0800e6e3 	.word	0x0800e6e3
 800e6b4:	3b45      	subs	r3, #69	; 0x45
 800e6b6:	2b02      	cmp	r3, #2
 800e6b8:	d8a6      	bhi.n	800e608 <__ssvfiscanf_r+0xf0>
 800e6ba:	2305      	movs	r3, #5
 800e6bc:	e01b      	b.n	800e6f6 <__ssvfiscanf_r+0x1de>
 800e6be:	4621      	mov	r1, r4
 800e6c0:	4630      	mov	r0, r6
 800e6c2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e6c4:	4798      	blx	r3
 800e6c6:	2800      	cmp	r0, #0
 800e6c8:	f43f af65 	beq.w	800e596 <__ssvfiscanf_r+0x7e>
 800e6cc:	9844      	ldr	r0, [sp, #272]	; 0x110
 800e6ce:	2800      	cmp	r0, #0
 800e6d0:	f040 808d 	bne.w	800e7ee <__ssvfiscanf_r+0x2d6>
 800e6d4:	f04f 30ff 	mov.w	r0, #4294967295
 800e6d8:	e08f      	b.n	800e7fa <__ssvfiscanf_r+0x2e2>
 800e6da:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800e6dc:	f042 0220 	orr.w	r2, r2, #32
 800e6e0:	9241      	str	r2, [sp, #260]	; 0x104
 800e6e2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800e6e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e6e8:	9241      	str	r2, [sp, #260]	; 0x104
 800e6ea:	2210      	movs	r2, #16
 800e6ec:	2b6f      	cmp	r3, #111	; 0x6f
 800e6ee:	bf34      	ite	cc
 800e6f0:	2303      	movcc	r3, #3
 800e6f2:	2304      	movcs	r3, #4
 800e6f4:	9242      	str	r2, [sp, #264]	; 0x108
 800e6f6:	9347      	str	r3, [sp, #284]	; 0x11c
 800e6f8:	6863      	ldr	r3, [r4, #4]
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	dd42      	ble.n	800e784 <__ssvfiscanf_r+0x26c>
 800e6fe:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e700:	0659      	lsls	r1, r3, #25
 800e702:	d404      	bmi.n	800e70e <__ssvfiscanf_r+0x1f6>
 800e704:	6823      	ldr	r3, [r4, #0]
 800e706:	781a      	ldrb	r2, [r3, #0]
 800e708:	5cba      	ldrb	r2, [r7, r2]
 800e70a:	0712      	lsls	r2, r2, #28
 800e70c:	d441      	bmi.n	800e792 <__ssvfiscanf_r+0x27a>
 800e70e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800e710:	2b02      	cmp	r3, #2
 800e712:	dc50      	bgt.n	800e7b6 <__ssvfiscanf_r+0x29e>
 800e714:	466b      	mov	r3, sp
 800e716:	4622      	mov	r2, r4
 800e718:	4630      	mov	r0, r6
 800e71a:	a941      	add	r1, sp, #260	; 0x104
 800e71c:	f000 f876 	bl	800e80c <_scanf_chars>
 800e720:	2801      	cmp	r0, #1
 800e722:	d06e      	beq.n	800e802 <__ssvfiscanf_r+0x2ea>
 800e724:	2802      	cmp	r0, #2
 800e726:	f47f af1d 	bne.w	800e564 <__ssvfiscanf_r+0x4c>
 800e72a:	e7cf      	b.n	800e6cc <__ssvfiscanf_r+0x1b4>
 800e72c:	220a      	movs	r2, #10
 800e72e:	e7dd      	b.n	800e6ec <__ssvfiscanf_r+0x1d4>
 800e730:	2300      	movs	r3, #0
 800e732:	9342      	str	r3, [sp, #264]	; 0x108
 800e734:	2303      	movs	r3, #3
 800e736:	e7de      	b.n	800e6f6 <__ssvfiscanf_r+0x1de>
 800e738:	2308      	movs	r3, #8
 800e73a:	9342      	str	r3, [sp, #264]	; 0x108
 800e73c:	2304      	movs	r3, #4
 800e73e:	e7da      	b.n	800e6f6 <__ssvfiscanf_r+0x1de>
 800e740:	4629      	mov	r1, r5
 800e742:	4640      	mov	r0, r8
 800e744:	f000 f9c6 	bl	800ead4 <__sccl>
 800e748:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e74a:	4605      	mov	r5, r0
 800e74c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e750:	9341      	str	r3, [sp, #260]	; 0x104
 800e752:	2301      	movs	r3, #1
 800e754:	e7cf      	b.n	800e6f6 <__ssvfiscanf_r+0x1de>
 800e756:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e758:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e75c:	9341      	str	r3, [sp, #260]	; 0x104
 800e75e:	2300      	movs	r3, #0
 800e760:	e7c9      	b.n	800e6f6 <__ssvfiscanf_r+0x1de>
 800e762:	2302      	movs	r3, #2
 800e764:	e7c7      	b.n	800e6f6 <__ssvfiscanf_r+0x1de>
 800e766:	9841      	ldr	r0, [sp, #260]	; 0x104
 800e768:	06c3      	lsls	r3, r0, #27
 800e76a:	f53f aefb 	bmi.w	800e564 <__ssvfiscanf_r+0x4c>
 800e76e:	9b00      	ldr	r3, [sp, #0]
 800e770:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800e772:	1d19      	adds	r1, r3, #4
 800e774:	9100      	str	r1, [sp, #0]
 800e776:	681b      	ldr	r3, [r3, #0]
 800e778:	f010 0f01 	tst.w	r0, #1
 800e77c:	bf14      	ite	ne
 800e77e:	801a      	strhne	r2, [r3, #0]
 800e780:	601a      	streq	r2, [r3, #0]
 800e782:	e6ef      	b.n	800e564 <__ssvfiscanf_r+0x4c>
 800e784:	4621      	mov	r1, r4
 800e786:	4630      	mov	r0, r6
 800e788:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e78a:	4798      	blx	r3
 800e78c:	2800      	cmp	r0, #0
 800e78e:	d0b6      	beq.n	800e6fe <__ssvfiscanf_r+0x1e6>
 800e790:	e79c      	b.n	800e6cc <__ssvfiscanf_r+0x1b4>
 800e792:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800e794:	3201      	adds	r2, #1
 800e796:	9245      	str	r2, [sp, #276]	; 0x114
 800e798:	6862      	ldr	r2, [r4, #4]
 800e79a:	3a01      	subs	r2, #1
 800e79c:	2a00      	cmp	r2, #0
 800e79e:	6062      	str	r2, [r4, #4]
 800e7a0:	dd02      	ble.n	800e7a8 <__ssvfiscanf_r+0x290>
 800e7a2:	3301      	adds	r3, #1
 800e7a4:	6023      	str	r3, [r4, #0]
 800e7a6:	e7ad      	b.n	800e704 <__ssvfiscanf_r+0x1ec>
 800e7a8:	4621      	mov	r1, r4
 800e7aa:	4630      	mov	r0, r6
 800e7ac:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e7ae:	4798      	blx	r3
 800e7b0:	2800      	cmp	r0, #0
 800e7b2:	d0a7      	beq.n	800e704 <__ssvfiscanf_r+0x1ec>
 800e7b4:	e78a      	b.n	800e6cc <__ssvfiscanf_r+0x1b4>
 800e7b6:	2b04      	cmp	r3, #4
 800e7b8:	dc0e      	bgt.n	800e7d8 <__ssvfiscanf_r+0x2c0>
 800e7ba:	466b      	mov	r3, sp
 800e7bc:	4622      	mov	r2, r4
 800e7be:	4630      	mov	r0, r6
 800e7c0:	a941      	add	r1, sp, #260	; 0x104
 800e7c2:	f000 f87d 	bl	800e8c0 <_scanf_i>
 800e7c6:	e7ab      	b.n	800e720 <__ssvfiscanf_r+0x208>
 800e7c8:	0800e463 	.word	0x0800e463
 800e7cc:	0800e4dd 	.word	0x0800e4dd
 800e7d0:	0800f851 	.word	0x0800f851
 800e7d4:	0800f957 	.word	0x0800f957
 800e7d8:	4b0b      	ldr	r3, [pc, #44]	; (800e808 <__ssvfiscanf_r+0x2f0>)
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	f43f aec2 	beq.w	800e564 <__ssvfiscanf_r+0x4c>
 800e7e0:	466b      	mov	r3, sp
 800e7e2:	4622      	mov	r2, r4
 800e7e4:	4630      	mov	r0, r6
 800e7e6:	a941      	add	r1, sp, #260	; 0x104
 800e7e8:	f3af 8000 	nop.w
 800e7ec:	e798      	b.n	800e720 <__ssvfiscanf_r+0x208>
 800e7ee:	89a3      	ldrh	r3, [r4, #12]
 800e7f0:	f013 0f40 	tst.w	r3, #64	; 0x40
 800e7f4:	bf18      	it	ne
 800e7f6:	f04f 30ff 	movne.w	r0, #4294967295
 800e7fa:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800e7fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e802:	9844      	ldr	r0, [sp, #272]	; 0x110
 800e804:	e7f9      	b.n	800e7fa <__ssvfiscanf_r+0x2e2>
 800e806:	bf00      	nop
 800e808:	00000000 	.word	0x00000000

0800e80c <_scanf_chars>:
 800e80c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e810:	4615      	mov	r5, r2
 800e812:	688a      	ldr	r2, [r1, #8]
 800e814:	4680      	mov	r8, r0
 800e816:	460c      	mov	r4, r1
 800e818:	b932      	cbnz	r2, 800e828 <_scanf_chars+0x1c>
 800e81a:	698a      	ldr	r2, [r1, #24]
 800e81c:	2a00      	cmp	r2, #0
 800e81e:	bf0c      	ite	eq
 800e820:	2201      	moveq	r2, #1
 800e822:	f04f 32ff 	movne.w	r2, #4294967295
 800e826:	608a      	str	r2, [r1, #8]
 800e828:	2700      	movs	r7, #0
 800e82a:	6822      	ldr	r2, [r4, #0]
 800e82c:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800e8bc <_scanf_chars+0xb0>
 800e830:	06d1      	lsls	r1, r2, #27
 800e832:	bf5f      	itttt	pl
 800e834:	681a      	ldrpl	r2, [r3, #0]
 800e836:	1d11      	addpl	r1, r2, #4
 800e838:	6019      	strpl	r1, [r3, #0]
 800e83a:	6816      	ldrpl	r6, [r2, #0]
 800e83c:	69a0      	ldr	r0, [r4, #24]
 800e83e:	b188      	cbz	r0, 800e864 <_scanf_chars+0x58>
 800e840:	2801      	cmp	r0, #1
 800e842:	d107      	bne.n	800e854 <_scanf_chars+0x48>
 800e844:	682b      	ldr	r3, [r5, #0]
 800e846:	781a      	ldrb	r2, [r3, #0]
 800e848:	6963      	ldr	r3, [r4, #20]
 800e84a:	5c9b      	ldrb	r3, [r3, r2]
 800e84c:	b953      	cbnz	r3, 800e864 <_scanf_chars+0x58>
 800e84e:	2f00      	cmp	r7, #0
 800e850:	d031      	beq.n	800e8b6 <_scanf_chars+0xaa>
 800e852:	e022      	b.n	800e89a <_scanf_chars+0x8e>
 800e854:	2802      	cmp	r0, #2
 800e856:	d120      	bne.n	800e89a <_scanf_chars+0x8e>
 800e858:	682b      	ldr	r3, [r5, #0]
 800e85a:	781b      	ldrb	r3, [r3, #0]
 800e85c:	f813 3009 	ldrb.w	r3, [r3, r9]
 800e860:	071b      	lsls	r3, r3, #28
 800e862:	d41a      	bmi.n	800e89a <_scanf_chars+0x8e>
 800e864:	6823      	ldr	r3, [r4, #0]
 800e866:	3701      	adds	r7, #1
 800e868:	06da      	lsls	r2, r3, #27
 800e86a:	bf5e      	ittt	pl
 800e86c:	682b      	ldrpl	r3, [r5, #0]
 800e86e:	781b      	ldrbpl	r3, [r3, #0]
 800e870:	f806 3b01 	strbpl.w	r3, [r6], #1
 800e874:	682a      	ldr	r2, [r5, #0]
 800e876:	686b      	ldr	r3, [r5, #4]
 800e878:	3201      	adds	r2, #1
 800e87a:	602a      	str	r2, [r5, #0]
 800e87c:	68a2      	ldr	r2, [r4, #8]
 800e87e:	3b01      	subs	r3, #1
 800e880:	3a01      	subs	r2, #1
 800e882:	606b      	str	r3, [r5, #4]
 800e884:	60a2      	str	r2, [r4, #8]
 800e886:	b142      	cbz	r2, 800e89a <_scanf_chars+0x8e>
 800e888:	2b00      	cmp	r3, #0
 800e88a:	dcd7      	bgt.n	800e83c <_scanf_chars+0x30>
 800e88c:	4629      	mov	r1, r5
 800e88e:	4640      	mov	r0, r8
 800e890:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800e894:	4798      	blx	r3
 800e896:	2800      	cmp	r0, #0
 800e898:	d0d0      	beq.n	800e83c <_scanf_chars+0x30>
 800e89a:	6823      	ldr	r3, [r4, #0]
 800e89c:	f013 0310 	ands.w	r3, r3, #16
 800e8a0:	d105      	bne.n	800e8ae <_scanf_chars+0xa2>
 800e8a2:	68e2      	ldr	r2, [r4, #12]
 800e8a4:	3201      	adds	r2, #1
 800e8a6:	60e2      	str	r2, [r4, #12]
 800e8a8:	69a2      	ldr	r2, [r4, #24]
 800e8aa:	b102      	cbz	r2, 800e8ae <_scanf_chars+0xa2>
 800e8ac:	7033      	strb	r3, [r6, #0]
 800e8ae:	2000      	movs	r0, #0
 800e8b0:	6923      	ldr	r3, [r4, #16]
 800e8b2:	443b      	add	r3, r7
 800e8b4:	6123      	str	r3, [r4, #16]
 800e8b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e8ba:	bf00      	nop
 800e8bc:	0800f851 	.word	0x0800f851

0800e8c0 <_scanf_i>:
 800e8c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8c4:	460c      	mov	r4, r1
 800e8c6:	4698      	mov	r8, r3
 800e8c8:	4b75      	ldr	r3, [pc, #468]	; (800eaa0 <_scanf_i+0x1e0>)
 800e8ca:	b087      	sub	sp, #28
 800e8cc:	4682      	mov	sl, r0
 800e8ce:	4616      	mov	r6, r2
 800e8d0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e8d4:	ab03      	add	r3, sp, #12
 800e8d6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800e8da:	4b72      	ldr	r3, [pc, #456]	; (800eaa4 <_scanf_i+0x1e4>)
 800e8dc:	69a1      	ldr	r1, [r4, #24]
 800e8de:	4a72      	ldr	r2, [pc, #456]	; (800eaa8 <_scanf_i+0x1e8>)
 800e8e0:	4627      	mov	r7, r4
 800e8e2:	2903      	cmp	r1, #3
 800e8e4:	bf18      	it	ne
 800e8e6:	461a      	movne	r2, r3
 800e8e8:	68a3      	ldr	r3, [r4, #8]
 800e8ea:	9201      	str	r2, [sp, #4]
 800e8ec:	1e5a      	subs	r2, r3, #1
 800e8ee:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800e8f2:	bf81      	itttt	hi
 800e8f4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800e8f8:	eb03 0905 	addhi.w	r9, r3, r5
 800e8fc:	f240 135d 	movwhi	r3, #349	; 0x15d
 800e900:	60a3      	strhi	r3, [r4, #8]
 800e902:	f857 3b1c 	ldr.w	r3, [r7], #28
 800e906:	bf98      	it	ls
 800e908:	f04f 0900 	movls.w	r9, #0
 800e90c:	463d      	mov	r5, r7
 800e90e:	f04f 0b00 	mov.w	fp, #0
 800e912:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800e916:	6023      	str	r3, [r4, #0]
 800e918:	6831      	ldr	r1, [r6, #0]
 800e91a:	ab03      	add	r3, sp, #12
 800e91c:	2202      	movs	r2, #2
 800e91e:	7809      	ldrb	r1, [r1, #0]
 800e920:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800e924:	f7ff fd46 	bl	800e3b4 <memchr>
 800e928:	b328      	cbz	r0, 800e976 <_scanf_i+0xb6>
 800e92a:	f1bb 0f01 	cmp.w	fp, #1
 800e92e:	d159      	bne.n	800e9e4 <_scanf_i+0x124>
 800e930:	6862      	ldr	r2, [r4, #4]
 800e932:	b92a      	cbnz	r2, 800e940 <_scanf_i+0x80>
 800e934:	2308      	movs	r3, #8
 800e936:	6822      	ldr	r2, [r4, #0]
 800e938:	6063      	str	r3, [r4, #4]
 800e93a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e93e:	6022      	str	r2, [r4, #0]
 800e940:	6822      	ldr	r2, [r4, #0]
 800e942:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800e946:	6022      	str	r2, [r4, #0]
 800e948:	68a2      	ldr	r2, [r4, #8]
 800e94a:	1e51      	subs	r1, r2, #1
 800e94c:	60a1      	str	r1, [r4, #8]
 800e94e:	b192      	cbz	r2, 800e976 <_scanf_i+0xb6>
 800e950:	6832      	ldr	r2, [r6, #0]
 800e952:	1c51      	adds	r1, r2, #1
 800e954:	6031      	str	r1, [r6, #0]
 800e956:	7812      	ldrb	r2, [r2, #0]
 800e958:	f805 2b01 	strb.w	r2, [r5], #1
 800e95c:	6872      	ldr	r2, [r6, #4]
 800e95e:	3a01      	subs	r2, #1
 800e960:	2a00      	cmp	r2, #0
 800e962:	6072      	str	r2, [r6, #4]
 800e964:	dc07      	bgt.n	800e976 <_scanf_i+0xb6>
 800e966:	4631      	mov	r1, r6
 800e968:	4650      	mov	r0, sl
 800e96a:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800e96e:	4790      	blx	r2
 800e970:	2800      	cmp	r0, #0
 800e972:	f040 8085 	bne.w	800ea80 <_scanf_i+0x1c0>
 800e976:	f10b 0b01 	add.w	fp, fp, #1
 800e97a:	f1bb 0f03 	cmp.w	fp, #3
 800e97e:	d1cb      	bne.n	800e918 <_scanf_i+0x58>
 800e980:	6863      	ldr	r3, [r4, #4]
 800e982:	b90b      	cbnz	r3, 800e988 <_scanf_i+0xc8>
 800e984:	230a      	movs	r3, #10
 800e986:	6063      	str	r3, [r4, #4]
 800e988:	6863      	ldr	r3, [r4, #4]
 800e98a:	4948      	ldr	r1, [pc, #288]	; (800eaac <_scanf_i+0x1ec>)
 800e98c:	6960      	ldr	r0, [r4, #20]
 800e98e:	1ac9      	subs	r1, r1, r3
 800e990:	f000 f8a0 	bl	800ead4 <__sccl>
 800e994:	f04f 0b00 	mov.w	fp, #0
 800e998:	68a3      	ldr	r3, [r4, #8]
 800e99a:	6822      	ldr	r2, [r4, #0]
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	d03d      	beq.n	800ea1c <_scanf_i+0x15c>
 800e9a0:	6831      	ldr	r1, [r6, #0]
 800e9a2:	6960      	ldr	r0, [r4, #20]
 800e9a4:	f891 c000 	ldrb.w	ip, [r1]
 800e9a8:	f810 000c 	ldrb.w	r0, [r0, ip]
 800e9ac:	2800      	cmp	r0, #0
 800e9ae:	d035      	beq.n	800ea1c <_scanf_i+0x15c>
 800e9b0:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800e9b4:	d124      	bne.n	800ea00 <_scanf_i+0x140>
 800e9b6:	0510      	lsls	r0, r2, #20
 800e9b8:	d522      	bpl.n	800ea00 <_scanf_i+0x140>
 800e9ba:	f10b 0b01 	add.w	fp, fp, #1
 800e9be:	f1b9 0f00 	cmp.w	r9, #0
 800e9c2:	d003      	beq.n	800e9cc <_scanf_i+0x10c>
 800e9c4:	3301      	adds	r3, #1
 800e9c6:	f109 39ff 	add.w	r9, r9, #4294967295
 800e9ca:	60a3      	str	r3, [r4, #8]
 800e9cc:	6873      	ldr	r3, [r6, #4]
 800e9ce:	3b01      	subs	r3, #1
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	6073      	str	r3, [r6, #4]
 800e9d4:	dd1b      	ble.n	800ea0e <_scanf_i+0x14e>
 800e9d6:	6833      	ldr	r3, [r6, #0]
 800e9d8:	3301      	adds	r3, #1
 800e9da:	6033      	str	r3, [r6, #0]
 800e9dc:	68a3      	ldr	r3, [r4, #8]
 800e9de:	3b01      	subs	r3, #1
 800e9e0:	60a3      	str	r3, [r4, #8]
 800e9e2:	e7d9      	b.n	800e998 <_scanf_i+0xd8>
 800e9e4:	f1bb 0f02 	cmp.w	fp, #2
 800e9e8:	d1ae      	bne.n	800e948 <_scanf_i+0x88>
 800e9ea:	6822      	ldr	r2, [r4, #0]
 800e9ec:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800e9f0:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800e9f4:	d1bf      	bne.n	800e976 <_scanf_i+0xb6>
 800e9f6:	2310      	movs	r3, #16
 800e9f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e9fc:	6063      	str	r3, [r4, #4]
 800e9fe:	e7a2      	b.n	800e946 <_scanf_i+0x86>
 800ea00:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800ea04:	6022      	str	r2, [r4, #0]
 800ea06:	780b      	ldrb	r3, [r1, #0]
 800ea08:	f805 3b01 	strb.w	r3, [r5], #1
 800ea0c:	e7de      	b.n	800e9cc <_scanf_i+0x10c>
 800ea0e:	4631      	mov	r1, r6
 800ea10:	4650      	mov	r0, sl
 800ea12:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ea16:	4798      	blx	r3
 800ea18:	2800      	cmp	r0, #0
 800ea1a:	d0df      	beq.n	800e9dc <_scanf_i+0x11c>
 800ea1c:	6823      	ldr	r3, [r4, #0]
 800ea1e:	05db      	lsls	r3, r3, #23
 800ea20:	d50d      	bpl.n	800ea3e <_scanf_i+0x17e>
 800ea22:	42bd      	cmp	r5, r7
 800ea24:	d909      	bls.n	800ea3a <_scanf_i+0x17a>
 800ea26:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800ea2a:	4632      	mov	r2, r6
 800ea2c:	4650      	mov	r0, sl
 800ea2e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ea32:	f105 39ff 	add.w	r9, r5, #4294967295
 800ea36:	4798      	blx	r3
 800ea38:	464d      	mov	r5, r9
 800ea3a:	42bd      	cmp	r5, r7
 800ea3c:	d02d      	beq.n	800ea9a <_scanf_i+0x1da>
 800ea3e:	6822      	ldr	r2, [r4, #0]
 800ea40:	f012 0210 	ands.w	r2, r2, #16
 800ea44:	d113      	bne.n	800ea6e <_scanf_i+0x1ae>
 800ea46:	702a      	strb	r2, [r5, #0]
 800ea48:	4639      	mov	r1, r7
 800ea4a:	6863      	ldr	r3, [r4, #4]
 800ea4c:	4650      	mov	r0, sl
 800ea4e:	9e01      	ldr	r6, [sp, #4]
 800ea50:	47b0      	blx	r6
 800ea52:	6821      	ldr	r1, [r4, #0]
 800ea54:	f8d8 3000 	ldr.w	r3, [r8]
 800ea58:	f011 0f20 	tst.w	r1, #32
 800ea5c:	d013      	beq.n	800ea86 <_scanf_i+0x1c6>
 800ea5e:	1d1a      	adds	r2, r3, #4
 800ea60:	f8c8 2000 	str.w	r2, [r8]
 800ea64:	681b      	ldr	r3, [r3, #0]
 800ea66:	6018      	str	r0, [r3, #0]
 800ea68:	68e3      	ldr	r3, [r4, #12]
 800ea6a:	3301      	adds	r3, #1
 800ea6c:	60e3      	str	r3, [r4, #12]
 800ea6e:	2000      	movs	r0, #0
 800ea70:	1bed      	subs	r5, r5, r7
 800ea72:	44ab      	add	fp, r5
 800ea74:	6925      	ldr	r5, [r4, #16]
 800ea76:	445d      	add	r5, fp
 800ea78:	6125      	str	r5, [r4, #16]
 800ea7a:	b007      	add	sp, #28
 800ea7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea80:	f04f 0b00 	mov.w	fp, #0
 800ea84:	e7ca      	b.n	800ea1c <_scanf_i+0x15c>
 800ea86:	1d1a      	adds	r2, r3, #4
 800ea88:	f8c8 2000 	str.w	r2, [r8]
 800ea8c:	681b      	ldr	r3, [r3, #0]
 800ea8e:	f011 0f01 	tst.w	r1, #1
 800ea92:	bf14      	ite	ne
 800ea94:	8018      	strhne	r0, [r3, #0]
 800ea96:	6018      	streq	r0, [r3, #0]
 800ea98:	e7e6      	b.n	800ea68 <_scanf_i+0x1a8>
 800ea9a:	2001      	movs	r0, #1
 800ea9c:	e7ed      	b.n	800ea7a <_scanf_i+0x1ba>
 800ea9e:	bf00      	nop
 800eaa0:	0800f5b0 	.word	0x0800f5b0
 800eaa4:	0800dd59 	.word	0x0800dd59
 800eaa8:	0800cb9d 	.word	0x0800cb9d
 800eaac:	0800f9fd 	.word	0x0800f9fd

0800eab0 <_read_r>:
 800eab0:	b538      	push	{r3, r4, r5, lr}
 800eab2:	4604      	mov	r4, r0
 800eab4:	4608      	mov	r0, r1
 800eab6:	4611      	mov	r1, r2
 800eab8:	2200      	movs	r2, #0
 800eaba:	4d05      	ldr	r5, [pc, #20]	; (800ead0 <_read_r+0x20>)
 800eabc:	602a      	str	r2, [r5, #0]
 800eabe:	461a      	mov	r2, r3
 800eac0:	f7f7 fdc7 	bl	8006652 <_read>
 800eac4:	1c43      	adds	r3, r0, #1
 800eac6:	d102      	bne.n	800eace <_read_r+0x1e>
 800eac8:	682b      	ldr	r3, [r5, #0]
 800eaca:	b103      	cbz	r3, 800eace <_read_r+0x1e>
 800eacc:	6023      	str	r3, [r4, #0]
 800eace:	bd38      	pop	{r3, r4, r5, pc}
 800ead0:	20002c48 	.word	0x20002c48

0800ead4 <__sccl>:
 800ead4:	b570      	push	{r4, r5, r6, lr}
 800ead6:	780b      	ldrb	r3, [r1, #0]
 800ead8:	4604      	mov	r4, r0
 800eada:	2b5e      	cmp	r3, #94	; 0x5e
 800eadc:	bf13      	iteet	ne
 800eade:	2200      	movne	r2, #0
 800eae0:	2201      	moveq	r2, #1
 800eae2:	784b      	ldrbeq	r3, [r1, #1]
 800eae4:	1c48      	addne	r0, r1, #1
 800eae6:	bf08      	it	eq
 800eae8:	1c88      	addeq	r0, r1, #2
 800eaea:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800eaee:	1e61      	subs	r1, r4, #1
 800eaf0:	f801 2f01 	strb.w	r2, [r1, #1]!
 800eaf4:	42a9      	cmp	r1, r5
 800eaf6:	d1fb      	bne.n	800eaf0 <__sccl+0x1c>
 800eaf8:	b90b      	cbnz	r3, 800eafe <__sccl+0x2a>
 800eafa:	3801      	subs	r0, #1
 800eafc:	bd70      	pop	{r4, r5, r6, pc}
 800eafe:	f082 0201 	eor.w	r2, r2, #1
 800eb02:	4605      	mov	r5, r0
 800eb04:	54e2      	strb	r2, [r4, r3]
 800eb06:	4628      	mov	r0, r5
 800eb08:	f810 1b01 	ldrb.w	r1, [r0], #1
 800eb0c:	292d      	cmp	r1, #45	; 0x2d
 800eb0e:	d006      	beq.n	800eb1e <__sccl+0x4a>
 800eb10:	295d      	cmp	r1, #93	; 0x5d
 800eb12:	d0f3      	beq.n	800eafc <__sccl+0x28>
 800eb14:	b909      	cbnz	r1, 800eb1a <__sccl+0x46>
 800eb16:	4628      	mov	r0, r5
 800eb18:	e7f0      	b.n	800eafc <__sccl+0x28>
 800eb1a:	460b      	mov	r3, r1
 800eb1c:	e7f1      	b.n	800eb02 <__sccl+0x2e>
 800eb1e:	786e      	ldrb	r6, [r5, #1]
 800eb20:	2e5d      	cmp	r6, #93	; 0x5d
 800eb22:	d0fa      	beq.n	800eb1a <__sccl+0x46>
 800eb24:	42b3      	cmp	r3, r6
 800eb26:	dcf8      	bgt.n	800eb1a <__sccl+0x46>
 800eb28:	4619      	mov	r1, r3
 800eb2a:	3502      	adds	r5, #2
 800eb2c:	3101      	adds	r1, #1
 800eb2e:	428e      	cmp	r6, r1
 800eb30:	5462      	strb	r2, [r4, r1]
 800eb32:	dcfb      	bgt.n	800eb2c <__sccl+0x58>
 800eb34:	1af1      	subs	r1, r6, r3
 800eb36:	3901      	subs	r1, #1
 800eb38:	42b3      	cmp	r3, r6
 800eb3a:	bfa8      	it	ge
 800eb3c:	2100      	movge	r1, #0
 800eb3e:	1c58      	adds	r0, r3, #1
 800eb40:	1843      	adds	r3, r0, r1
 800eb42:	e7e0      	b.n	800eb06 <__sccl+0x32>

0800eb44 <_raise_r>:
 800eb44:	291f      	cmp	r1, #31
 800eb46:	b538      	push	{r3, r4, r5, lr}
 800eb48:	4604      	mov	r4, r0
 800eb4a:	460d      	mov	r5, r1
 800eb4c:	d904      	bls.n	800eb58 <_raise_r+0x14>
 800eb4e:	2316      	movs	r3, #22
 800eb50:	6003      	str	r3, [r0, #0]
 800eb52:	f04f 30ff 	mov.w	r0, #4294967295
 800eb56:	bd38      	pop	{r3, r4, r5, pc}
 800eb58:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800eb5a:	b112      	cbz	r2, 800eb62 <_raise_r+0x1e>
 800eb5c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800eb60:	b94b      	cbnz	r3, 800eb76 <_raise_r+0x32>
 800eb62:	4620      	mov	r0, r4
 800eb64:	f000 f830 	bl	800ebc8 <_getpid_r>
 800eb68:	462a      	mov	r2, r5
 800eb6a:	4601      	mov	r1, r0
 800eb6c:	4620      	mov	r0, r4
 800eb6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eb72:	f000 b817 	b.w	800eba4 <_kill_r>
 800eb76:	2b01      	cmp	r3, #1
 800eb78:	d00a      	beq.n	800eb90 <_raise_r+0x4c>
 800eb7a:	1c59      	adds	r1, r3, #1
 800eb7c:	d103      	bne.n	800eb86 <_raise_r+0x42>
 800eb7e:	2316      	movs	r3, #22
 800eb80:	6003      	str	r3, [r0, #0]
 800eb82:	2001      	movs	r0, #1
 800eb84:	e7e7      	b.n	800eb56 <_raise_r+0x12>
 800eb86:	2400      	movs	r4, #0
 800eb88:	4628      	mov	r0, r5
 800eb8a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800eb8e:	4798      	blx	r3
 800eb90:	2000      	movs	r0, #0
 800eb92:	e7e0      	b.n	800eb56 <_raise_r+0x12>

0800eb94 <raise>:
 800eb94:	4b02      	ldr	r3, [pc, #8]	; (800eba0 <raise+0xc>)
 800eb96:	4601      	mov	r1, r0
 800eb98:	6818      	ldr	r0, [r3, #0]
 800eb9a:	f7ff bfd3 	b.w	800eb44 <_raise_r>
 800eb9e:	bf00      	nop
 800eba0:	200004e4 	.word	0x200004e4

0800eba4 <_kill_r>:
 800eba4:	b538      	push	{r3, r4, r5, lr}
 800eba6:	2300      	movs	r3, #0
 800eba8:	4d06      	ldr	r5, [pc, #24]	; (800ebc4 <_kill_r+0x20>)
 800ebaa:	4604      	mov	r4, r0
 800ebac:	4608      	mov	r0, r1
 800ebae:	4611      	mov	r1, r2
 800ebb0:	602b      	str	r3, [r5, #0]
 800ebb2:	f7f7 fd34 	bl	800661e <_kill>
 800ebb6:	1c43      	adds	r3, r0, #1
 800ebb8:	d102      	bne.n	800ebc0 <_kill_r+0x1c>
 800ebba:	682b      	ldr	r3, [r5, #0]
 800ebbc:	b103      	cbz	r3, 800ebc0 <_kill_r+0x1c>
 800ebbe:	6023      	str	r3, [r4, #0]
 800ebc0:	bd38      	pop	{r3, r4, r5, pc}
 800ebc2:	bf00      	nop
 800ebc4:	20002c48 	.word	0x20002c48

0800ebc8 <_getpid_r>:
 800ebc8:	f7f7 bd22 	b.w	8006610 <_getpid>

0800ebcc <__submore>:
 800ebcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ebd0:	460c      	mov	r4, r1
 800ebd2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800ebd4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ebd8:	4299      	cmp	r1, r3
 800ebda:	d11b      	bne.n	800ec14 <__submore+0x48>
 800ebdc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800ebe0:	f7fd fe22 	bl	800c828 <_malloc_r>
 800ebe4:	b918      	cbnz	r0, 800ebee <__submore+0x22>
 800ebe6:	f04f 30ff 	mov.w	r0, #4294967295
 800ebea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ebee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ebf2:	63a3      	str	r3, [r4, #56]	; 0x38
 800ebf4:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800ebf8:	6360      	str	r0, [r4, #52]	; 0x34
 800ebfa:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800ebfe:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800ec02:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800ec06:	7043      	strb	r3, [r0, #1]
 800ec08:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800ec0c:	7003      	strb	r3, [r0, #0]
 800ec0e:	6020      	str	r0, [r4, #0]
 800ec10:	2000      	movs	r0, #0
 800ec12:	e7ea      	b.n	800ebea <__submore+0x1e>
 800ec14:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800ec16:	0077      	lsls	r7, r6, #1
 800ec18:	463a      	mov	r2, r7
 800ec1a:	f7ff fbf3 	bl	800e404 <_realloc_r>
 800ec1e:	4605      	mov	r5, r0
 800ec20:	2800      	cmp	r0, #0
 800ec22:	d0e0      	beq.n	800ebe6 <__submore+0x1a>
 800ec24:	eb00 0806 	add.w	r8, r0, r6
 800ec28:	4601      	mov	r1, r0
 800ec2a:	4632      	mov	r2, r6
 800ec2c:	4640      	mov	r0, r8
 800ec2e:	f7fd fb0b 	bl	800c248 <memcpy>
 800ec32:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800ec36:	f8c4 8000 	str.w	r8, [r4]
 800ec3a:	e7e9      	b.n	800ec10 <__submore+0x44>

0800ec3c <_fstat_r>:
 800ec3c:	b538      	push	{r3, r4, r5, lr}
 800ec3e:	2300      	movs	r3, #0
 800ec40:	4d06      	ldr	r5, [pc, #24]	; (800ec5c <_fstat_r+0x20>)
 800ec42:	4604      	mov	r4, r0
 800ec44:	4608      	mov	r0, r1
 800ec46:	4611      	mov	r1, r2
 800ec48:	602b      	str	r3, [r5, #0]
 800ec4a:	f7f7 fd46 	bl	80066da <_fstat>
 800ec4e:	1c43      	adds	r3, r0, #1
 800ec50:	d102      	bne.n	800ec58 <_fstat_r+0x1c>
 800ec52:	682b      	ldr	r3, [r5, #0]
 800ec54:	b103      	cbz	r3, 800ec58 <_fstat_r+0x1c>
 800ec56:	6023      	str	r3, [r4, #0]
 800ec58:	bd38      	pop	{r3, r4, r5, pc}
 800ec5a:	bf00      	nop
 800ec5c:	20002c48 	.word	0x20002c48

0800ec60 <_isatty_r>:
 800ec60:	b538      	push	{r3, r4, r5, lr}
 800ec62:	2300      	movs	r3, #0
 800ec64:	4d05      	ldr	r5, [pc, #20]	; (800ec7c <_isatty_r+0x1c>)
 800ec66:	4604      	mov	r4, r0
 800ec68:	4608      	mov	r0, r1
 800ec6a:	602b      	str	r3, [r5, #0]
 800ec6c:	f7f7 fd44 	bl	80066f8 <_isatty>
 800ec70:	1c43      	adds	r3, r0, #1
 800ec72:	d102      	bne.n	800ec7a <_isatty_r+0x1a>
 800ec74:	682b      	ldr	r3, [r5, #0]
 800ec76:	b103      	cbz	r3, 800ec7a <_isatty_r+0x1a>
 800ec78:	6023      	str	r3, [r4, #0]
 800ec7a:	bd38      	pop	{r3, r4, r5, pc}
 800ec7c:	20002c48 	.word	0x20002c48

0800ec80 <_malloc_usable_size_r>:
 800ec80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ec84:	1f18      	subs	r0, r3, #4
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	bfbc      	itt	lt
 800ec8a:	580b      	ldrlt	r3, [r1, r0]
 800ec8c:	18c0      	addlt	r0, r0, r3
 800ec8e:	4770      	bx	lr

0800ec90 <_init>:
 800ec90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec92:	bf00      	nop
 800ec94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ec96:	bc08      	pop	{r3}
 800ec98:	469e      	mov	lr, r3
 800ec9a:	4770      	bx	lr

0800ec9c <_fini>:
 800ec9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec9e:	bf00      	nop
 800eca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eca2:	bc08      	pop	{r3}
 800eca4:	469e      	mov	lr, r3
 800eca6:	4770      	bx	lr

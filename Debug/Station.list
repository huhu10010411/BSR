
Station.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d6e8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f7c  0800d7f4  0800d7f4  0001d7f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e770  0800e770  000205b0  2**0
                  CONTENTS
  4 .ARM          00000008  0800e770  0800e770  0001e770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e778  0800e778  000205b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e778  0800e778  0001e778  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e77c  0800e77c  0001e77c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000005b0  20000000  0800e780  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000031d8  200005b0  0800ed30  000205b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003788  0800ed30  00023788  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000205b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020f76  00000000  00000000  000205d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005fcd  00000000  00000000  0004154f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b98  00000000  00000000  00047520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000018b8  00000000  00000000  000490b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020793  00000000  00000000  0004a970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002fa12  00000000  00000000  0006b103  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009718c  00000000  00000000  0009ab15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00131ca1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007ef8  00000000  00000000  00131cf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200005b0 	.word	0x200005b0
 8000128:	00000000 	.word	0x00000000
 800012c:	0800d7dc 	.word	0x0800d7dc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200005b4 	.word	0x200005b4
 8000148:	0800d7dc 	.word	0x0800d7dc

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <strcmp>:
 800015c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000160:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000164:	2a01      	cmp	r2, #1
 8000166:	bf28      	it	cs
 8000168:	429a      	cmpcs	r2, r3
 800016a:	d0f7      	beq.n	800015c <strcmp>
 800016c:	1ad0      	subs	r0, r2, r3
 800016e:	4770      	bx	lr

08000170 <__aeabi_f2uiz>:
 8000170:	0042      	lsls	r2, r0, #1
 8000172:	d20e      	bcs.n	8000192 <__aeabi_f2uiz+0x22>
 8000174:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000178:	d30b      	bcc.n	8000192 <__aeabi_f2uiz+0x22>
 800017a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800017e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000182:	d409      	bmi.n	8000198 <__aeabi_f2uiz+0x28>
 8000184:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000188:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800018c:	fa23 f002 	lsr.w	r0, r3, r2
 8000190:	4770      	bx	lr
 8000192:	f04f 0000 	mov.w	r0, #0
 8000196:	4770      	bx	lr
 8000198:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800019c:	d101      	bne.n	80001a2 <__aeabi_f2uiz+0x32>
 800019e:	0242      	lsls	r2, r0, #9
 80001a0:	d102      	bne.n	80001a8 <__aeabi_f2uiz+0x38>
 80001a2:	f04f 30ff 	mov.w	r0, #4294967295
 80001a6:	4770      	bx	lr
 80001a8:	f04f 0000 	mov.w	r0, #0
 80001ac:	4770      	bx	lr
 80001ae:	bf00      	nop

080001b0 <__aeabi_ldivmod>:
 80001b0:	b97b      	cbnz	r3, 80001d2 <__aeabi_ldivmod+0x22>
 80001b2:	b972      	cbnz	r2, 80001d2 <__aeabi_ldivmod+0x22>
 80001b4:	2900      	cmp	r1, #0
 80001b6:	bfbe      	ittt	lt
 80001b8:	2000      	movlt	r0, #0
 80001ba:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80001be:	e006      	blt.n	80001ce <__aeabi_ldivmod+0x1e>
 80001c0:	bf08      	it	eq
 80001c2:	2800      	cmpeq	r0, #0
 80001c4:	bf1c      	itt	ne
 80001c6:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80001ca:	f04f 30ff 	movne.w	r0, #4294967295
 80001ce:	f000 b9a9 	b.w	8000524 <__aeabi_idiv0>
 80001d2:	f1ad 0c08 	sub.w	ip, sp, #8
 80001d6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001da:	2900      	cmp	r1, #0
 80001dc:	db09      	blt.n	80001f2 <__aeabi_ldivmod+0x42>
 80001de:	2b00      	cmp	r3, #0
 80001e0:	db1a      	blt.n	8000218 <__aeabi_ldivmod+0x68>
 80001e2:	f000 f835 	bl	8000250 <__udivmoddi4>
 80001e6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001ee:	b004      	add	sp, #16
 80001f0:	4770      	bx	lr
 80001f2:	4240      	negs	r0, r0
 80001f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f8:	2b00      	cmp	r3, #0
 80001fa:	db1b      	blt.n	8000234 <__aeabi_ldivmod+0x84>
 80001fc:	f000 f828 	bl	8000250 <__udivmoddi4>
 8000200:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000204:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000208:	b004      	add	sp, #16
 800020a:	4240      	negs	r0, r0
 800020c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000210:	4252      	negs	r2, r2
 8000212:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000216:	4770      	bx	lr
 8000218:	4252      	negs	r2, r2
 800021a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800021e:	f000 f817 	bl	8000250 <__udivmoddi4>
 8000222:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000226:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800022a:	b004      	add	sp, #16
 800022c:	4240      	negs	r0, r0
 800022e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000232:	4770      	bx	lr
 8000234:	4252      	negs	r2, r2
 8000236:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800023a:	f000 f809 	bl	8000250 <__udivmoddi4>
 800023e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000242:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000246:	b004      	add	sp, #16
 8000248:	4252      	negs	r2, r2
 800024a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9e08      	ldr	r6, [sp, #32]
 8000256:	460d      	mov	r5, r1
 8000258:	4604      	mov	r4, r0
 800025a:	4688      	mov	r8, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14d      	bne.n	80002fc <__udivmoddi4+0xac>
 8000260:	428a      	cmp	r2, r1
 8000262:	4694      	mov	ip, r2
 8000264:	d968      	bls.n	8000338 <__udivmoddi4+0xe8>
 8000266:	fab2 f282 	clz	r2, r2
 800026a:	b152      	cbz	r2, 8000282 <__udivmoddi4+0x32>
 800026c:	fa01 f302 	lsl.w	r3, r1, r2
 8000270:	f1c2 0120 	rsb	r1, r2, #32
 8000274:	fa20 f101 	lsr.w	r1, r0, r1
 8000278:	fa0c fc02 	lsl.w	ip, ip, r2
 800027c:	ea41 0803 	orr.w	r8, r1, r3
 8000280:	4094      	lsls	r4, r2
 8000282:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000286:	fbb8 f7f1 	udiv	r7, r8, r1
 800028a:	fa1f fe8c 	uxth.w	lr, ip
 800028e:	fb01 8817 	mls	r8, r1, r7, r8
 8000292:	fb07 f00e 	mul.w	r0, r7, lr
 8000296:	0c23      	lsrs	r3, r4, #16
 8000298:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800029c:	4298      	cmp	r0, r3
 800029e:	d90a      	bls.n	80002b6 <__udivmoddi4+0x66>
 80002a0:	eb1c 0303 	adds.w	r3, ip, r3
 80002a4:	f107 35ff 	add.w	r5, r7, #4294967295
 80002a8:	f080 811e 	bcs.w	80004e8 <__udivmoddi4+0x298>
 80002ac:	4298      	cmp	r0, r3
 80002ae:	f240 811b 	bls.w	80004e8 <__udivmoddi4+0x298>
 80002b2:	3f02      	subs	r7, #2
 80002b4:	4463      	add	r3, ip
 80002b6:	1a1b      	subs	r3, r3, r0
 80002b8:	fbb3 f0f1 	udiv	r0, r3, r1
 80002bc:	fb01 3310 	mls	r3, r1, r0, r3
 80002c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002c4:	b2a4      	uxth	r4, r4
 80002c6:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ca:	45a6      	cmp	lr, r4
 80002cc:	d90a      	bls.n	80002e4 <__udivmoddi4+0x94>
 80002ce:	eb1c 0404 	adds.w	r4, ip, r4
 80002d2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002d6:	f080 8109 	bcs.w	80004ec <__udivmoddi4+0x29c>
 80002da:	45a6      	cmp	lr, r4
 80002dc:	f240 8106 	bls.w	80004ec <__udivmoddi4+0x29c>
 80002e0:	4464      	add	r4, ip
 80002e2:	3802      	subs	r0, #2
 80002e4:	2100      	movs	r1, #0
 80002e6:	eba4 040e 	sub.w	r4, r4, lr
 80002ea:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002ee:	b11e      	cbz	r6, 80002f8 <__udivmoddi4+0xa8>
 80002f0:	2300      	movs	r3, #0
 80002f2:	40d4      	lsrs	r4, r2
 80002f4:	e9c6 4300 	strd	r4, r3, [r6]
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d908      	bls.n	8000312 <__udivmoddi4+0xc2>
 8000300:	2e00      	cmp	r6, #0
 8000302:	f000 80ee 	beq.w	80004e2 <__udivmoddi4+0x292>
 8000306:	2100      	movs	r1, #0
 8000308:	e9c6 0500 	strd	r0, r5, [r6]
 800030c:	4608      	mov	r0, r1
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	fab3 f183 	clz	r1, r3
 8000316:	2900      	cmp	r1, #0
 8000318:	d14a      	bne.n	80003b0 <__udivmoddi4+0x160>
 800031a:	42ab      	cmp	r3, r5
 800031c:	d302      	bcc.n	8000324 <__udivmoddi4+0xd4>
 800031e:	4282      	cmp	r2, r0
 8000320:	f200 80fc 	bhi.w	800051c <__udivmoddi4+0x2cc>
 8000324:	1a84      	subs	r4, r0, r2
 8000326:	eb65 0303 	sbc.w	r3, r5, r3
 800032a:	2001      	movs	r0, #1
 800032c:	4698      	mov	r8, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d0e2      	beq.n	80002f8 <__udivmoddi4+0xa8>
 8000332:	e9c6 4800 	strd	r4, r8, [r6]
 8000336:	e7df      	b.n	80002f8 <__udivmoddi4+0xa8>
 8000338:	b902      	cbnz	r2, 800033c <__udivmoddi4+0xec>
 800033a:	deff      	udf	#255	; 0xff
 800033c:	fab2 f282 	clz	r2, r2
 8000340:	2a00      	cmp	r2, #0
 8000342:	f040 8091 	bne.w	8000468 <__udivmoddi4+0x218>
 8000346:	eba1 000c 	sub.w	r0, r1, ip
 800034a:	2101      	movs	r1, #1
 800034c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000350:	fa1f fe8c 	uxth.w	lr, ip
 8000354:	fbb0 f3f7 	udiv	r3, r0, r7
 8000358:	fb07 0013 	mls	r0, r7, r3, r0
 800035c:	0c25      	lsrs	r5, r4, #16
 800035e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000362:	fb0e f003 	mul.w	r0, lr, r3
 8000366:	42a8      	cmp	r0, r5
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x12c>
 800036a:	eb1c 0505 	adds.w	r5, ip, r5
 800036e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x12a>
 8000374:	42a8      	cmp	r0, r5
 8000376:	f200 80ce 	bhi.w	8000516 <__udivmoddi4+0x2c6>
 800037a:	4643      	mov	r3, r8
 800037c:	1a2d      	subs	r5, r5, r0
 800037e:	fbb5 f0f7 	udiv	r0, r5, r7
 8000382:	fb07 5510 	mls	r5, r7, r0, r5
 8000386:	fb0e fe00 	mul.w	lr, lr, r0
 800038a:	b2a4      	uxth	r4, r4
 800038c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000390:	45a6      	cmp	lr, r4
 8000392:	d908      	bls.n	80003a6 <__udivmoddi4+0x156>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f100 35ff 	add.w	r5, r0, #4294967295
 800039c:	d202      	bcs.n	80003a4 <__udivmoddi4+0x154>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f200 80b6 	bhi.w	8000510 <__udivmoddi4+0x2c0>
 80003a4:	4628      	mov	r0, r5
 80003a6:	eba4 040e 	sub.w	r4, r4, lr
 80003aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ae:	e79e      	b.n	80002ee <__udivmoddi4+0x9e>
 80003b0:	f1c1 0720 	rsb	r7, r1, #32
 80003b4:	408b      	lsls	r3, r1
 80003b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80003be:	fa25 fa07 	lsr.w	sl, r5, r7
 80003c2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c6:	fbba f8f9 	udiv	r8, sl, r9
 80003ca:	fa20 f307 	lsr.w	r3, r0, r7
 80003ce:	fb09 aa18 	mls	sl, r9, r8, sl
 80003d2:	408d      	lsls	r5, r1
 80003d4:	fa1f fe8c 	uxth.w	lr, ip
 80003d8:	431d      	orrs	r5, r3
 80003da:	fa00 f301 	lsl.w	r3, r0, r1
 80003de:	fb08 f00e 	mul.w	r0, r8, lr
 80003e2:	0c2c      	lsrs	r4, r5, #16
 80003e4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80003e8:	42a0      	cmp	r0, r4
 80003ea:	fa02 f201 	lsl.w	r2, r2, r1
 80003ee:	d90b      	bls.n	8000408 <__udivmoddi4+0x1b8>
 80003f0:	eb1c 0404 	adds.w	r4, ip, r4
 80003f4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f8:	f080 8088 	bcs.w	800050c <__udivmoddi4+0x2bc>
 80003fc:	42a0      	cmp	r0, r4
 80003fe:	f240 8085 	bls.w	800050c <__udivmoddi4+0x2bc>
 8000402:	f1a8 0802 	sub.w	r8, r8, #2
 8000406:	4464      	add	r4, ip
 8000408:	1a24      	subs	r4, r4, r0
 800040a:	fbb4 f0f9 	udiv	r0, r4, r9
 800040e:	fb09 4410 	mls	r4, r9, r0, r4
 8000412:	fb00 fe0e 	mul.w	lr, r0, lr
 8000416:	b2ad      	uxth	r5, r5
 8000418:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800041c:	45a6      	cmp	lr, r4
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x1e2>
 8000420:	eb1c 0404 	adds.w	r4, ip, r4
 8000424:	f100 35ff 	add.w	r5, r0, #4294967295
 8000428:	d26c      	bcs.n	8000504 <__udivmoddi4+0x2b4>
 800042a:	45a6      	cmp	lr, r4
 800042c:	d96a      	bls.n	8000504 <__udivmoddi4+0x2b4>
 800042e:	3802      	subs	r0, #2
 8000430:	4464      	add	r4, ip
 8000432:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000436:	fba0 9502 	umull	r9, r5, r0, r2
 800043a:	eba4 040e 	sub.w	r4, r4, lr
 800043e:	42ac      	cmp	r4, r5
 8000440:	46c8      	mov	r8, r9
 8000442:	46ae      	mov	lr, r5
 8000444:	d356      	bcc.n	80004f4 <__udivmoddi4+0x2a4>
 8000446:	d053      	beq.n	80004f0 <__udivmoddi4+0x2a0>
 8000448:	2e00      	cmp	r6, #0
 800044a:	d069      	beq.n	8000520 <__udivmoddi4+0x2d0>
 800044c:	ebb3 0208 	subs.w	r2, r3, r8
 8000450:	eb64 040e 	sbc.w	r4, r4, lr
 8000454:	fa22 f301 	lsr.w	r3, r2, r1
 8000458:	fa04 f707 	lsl.w	r7, r4, r7
 800045c:	431f      	orrs	r7, r3
 800045e:	40cc      	lsrs	r4, r1
 8000460:	e9c6 7400 	strd	r7, r4, [r6]
 8000464:	2100      	movs	r1, #0
 8000466:	e747      	b.n	80002f8 <__udivmoddi4+0xa8>
 8000468:	fa0c fc02 	lsl.w	ip, ip, r2
 800046c:	f1c2 0120 	rsb	r1, r2, #32
 8000470:	fa25 f301 	lsr.w	r3, r5, r1
 8000474:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000478:	fa20 f101 	lsr.w	r1, r0, r1
 800047c:	4095      	lsls	r5, r2
 800047e:	430d      	orrs	r5, r1
 8000480:	fbb3 f1f7 	udiv	r1, r3, r7
 8000484:	fb07 3311 	mls	r3, r7, r1, r3
 8000488:	fa1f fe8c 	uxth.w	lr, ip
 800048c:	0c28      	lsrs	r0, r5, #16
 800048e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000492:	fb01 f30e 	mul.w	r3, r1, lr
 8000496:	4283      	cmp	r3, r0
 8000498:	fa04 f402 	lsl.w	r4, r4, r2
 800049c:	d908      	bls.n	80004b0 <__udivmoddi4+0x260>
 800049e:	eb1c 0000 	adds.w	r0, ip, r0
 80004a2:	f101 38ff 	add.w	r8, r1, #4294967295
 80004a6:	d22f      	bcs.n	8000508 <__udivmoddi4+0x2b8>
 80004a8:	4283      	cmp	r3, r0
 80004aa:	d92d      	bls.n	8000508 <__udivmoddi4+0x2b8>
 80004ac:	3902      	subs	r1, #2
 80004ae:	4460      	add	r0, ip
 80004b0:	1ac0      	subs	r0, r0, r3
 80004b2:	fbb0 f3f7 	udiv	r3, r0, r7
 80004b6:	fb07 0013 	mls	r0, r7, r3, r0
 80004ba:	b2ad      	uxth	r5, r5
 80004bc:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80004c0:	fb03 f00e 	mul.w	r0, r3, lr
 80004c4:	42a8      	cmp	r0, r5
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x28a>
 80004c8:	eb1c 0505 	adds.w	r5, ip, r5
 80004cc:	f103 38ff 	add.w	r8, r3, #4294967295
 80004d0:	d216      	bcs.n	8000500 <__udivmoddi4+0x2b0>
 80004d2:	42a8      	cmp	r0, r5
 80004d4:	d914      	bls.n	8000500 <__udivmoddi4+0x2b0>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	4465      	add	r5, ip
 80004da:	1a28      	subs	r0, r5, r0
 80004dc:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004e0:	e738      	b.n	8000354 <__udivmoddi4+0x104>
 80004e2:	4631      	mov	r1, r6
 80004e4:	4630      	mov	r0, r6
 80004e6:	e707      	b.n	80002f8 <__udivmoddi4+0xa8>
 80004e8:	462f      	mov	r7, r5
 80004ea:	e6e4      	b.n	80002b6 <__udivmoddi4+0x66>
 80004ec:	4618      	mov	r0, r3
 80004ee:	e6f9      	b.n	80002e4 <__udivmoddi4+0x94>
 80004f0:	454b      	cmp	r3, r9
 80004f2:	d2a9      	bcs.n	8000448 <__udivmoddi4+0x1f8>
 80004f4:	ebb9 0802 	subs.w	r8, r9, r2
 80004f8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004fc:	3801      	subs	r0, #1
 80004fe:	e7a3      	b.n	8000448 <__udivmoddi4+0x1f8>
 8000500:	4643      	mov	r3, r8
 8000502:	e7ea      	b.n	80004da <__udivmoddi4+0x28a>
 8000504:	4628      	mov	r0, r5
 8000506:	e794      	b.n	8000432 <__udivmoddi4+0x1e2>
 8000508:	4641      	mov	r1, r8
 800050a:	e7d1      	b.n	80004b0 <__udivmoddi4+0x260>
 800050c:	46d0      	mov	r8, sl
 800050e:	e77b      	b.n	8000408 <__udivmoddi4+0x1b8>
 8000510:	4464      	add	r4, ip
 8000512:	3802      	subs	r0, #2
 8000514:	e747      	b.n	80003a6 <__udivmoddi4+0x156>
 8000516:	3b02      	subs	r3, #2
 8000518:	4465      	add	r5, ip
 800051a:	e72f      	b.n	800037c <__udivmoddi4+0x12c>
 800051c:	4608      	mov	r0, r1
 800051e:	e706      	b.n	800032e <__udivmoddi4+0xde>
 8000520:	4631      	mov	r1, r6
 8000522:	e6e9      	b.n	80002f8 <__udivmoddi4+0xa8>

08000524 <__aeabi_idiv0>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <initApp_Display>:

static uint16_t countdowntime;
static _RTC switchtime;

void initApp_Display (DISPLAY_MODE_t *myDisplayMode, _RTC *myRTC, Station_t *myStation)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b084      	sub	sp, #16
 800052c:	af00      	add	r7, sp, #0
 800052e:	60f8      	str	r0, [r7, #12]
 8000530:	60b9      	str	r1, [r7, #8]
 8000532:	607a      	str	r2, [r7, #4]
	__MY_DISPLAY_MODE = myDisplayMode;
 8000534:	4a08      	ldr	r2, [pc, #32]	; (8000558 <initApp_Display+0x30>)
 8000536:	68fb      	ldr	r3, [r7, #12]
 8000538:	6013      	str	r3, [r2, #0]
	__MY_RTC = myRTC;
 800053a:	4a08      	ldr	r2, [pc, #32]	; (800055c <initApp_Display+0x34>)
 800053c:	68bb      	ldr	r3, [r7, #8]
 800053e:	6013      	str	r3, [r2, #0]
	__MY_STATION = myStation;
 8000540:	4a07      	ldr	r2, [pc, #28]	; (8000560 <initApp_Display+0x38>)
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	6013      	str	r3, [r2, #0]
	Screen_Init(__MY_RTC);
 8000546:	4b05      	ldr	r3, [pc, #20]	; (800055c <initApp_Display+0x34>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	4618      	mov	r0, r3
 800054c:	f005 fdb0 	bl	80060b0 <Screen_Init>
}
 8000550:	bf00      	nop
 8000552:	3710      	adds	r7, #16
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}
 8000558:	200005cc 	.word	0x200005cc
 800055c:	200005d0 	.word	0x200005d0
 8000560:	200005d4 	.word	0x200005d4

08000564 <display_SensorX>:

void display_SensorX(uint8_t sensorIndex)
{
 8000564:	b590      	push	{r4, r7, lr}
 8000566:	b087      	sub	sp, #28
 8000568:	af02      	add	r7, sp, #8
 800056a:	4603      	mov	r3, r0
 800056c:	71fb      	strb	r3, [r7, #7]
	if (sensorIndex > __MY_STATION->ssNode_list->length)	{
 800056e:	79fa      	ldrb	r2, [r7, #7]
 8000570:	4b1a      	ldr	r3, [pc, #104]	; (80005dc <display_SensorX+0x78>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	68db      	ldr	r3, [r3, #12]
 8000576:	689b      	ldr	r3, [r3, #8]
 8000578:	429a      	cmp	r2, r3
 800057a:	d90a      	bls.n	8000592 <display_SensorX+0x2e>
		Screen_Monitor_Station(__MY_STATION->stID, __MY_STATION->stCurrent);
 800057c:	4b17      	ldr	r3, [pc, #92]	; (80005dc <display_SensorX+0x78>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	785a      	ldrb	r2, [r3, #1]
 8000582:	4b16      	ldr	r3, [pc, #88]	; (80005dc <display_SensorX+0x78>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	885b      	ldrh	r3, [r3, #2]
 8000588:	4619      	mov	r1, r3
 800058a:	4610      	mov	r0, r2
 800058c:	f005 feba 	bl	8006304 <Screen_Monitor_Station>
		return ;
 8000590:	e020      	b.n	80005d4 <display_SensorX+0x70>
	}

	Node * current = __MY_STATION->ssNode_list->head;
 8000592:	4b12      	ldr	r3, [pc, #72]	; (80005dc <display_SensorX+0x78>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	68db      	ldr	r3, [r3, #12]
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < sensorIndex; i++)
 800059c:	2300      	movs	r3, #0
 800059e:	72fb      	strb	r3, [r7, #11]
 80005a0:	e005      	b.n	80005ae <display_SensorX+0x4a>
	{
		current = current->next;
 80005a2:	68fb      	ldr	r3, [r7, #12]
 80005a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80005a6:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < sensorIndex; i++)
 80005a8:	7afb      	ldrb	r3, [r7, #11]
 80005aa:	3301      	adds	r3, #1
 80005ac:	72fb      	strb	r3, [r7, #11]
 80005ae:	7afa      	ldrb	r2, [r7, #11]
 80005b0:	79fb      	ldrb	r3, [r7, #7]
 80005b2:	429a      	cmp	r2, r3
 80005b4:	d3f5      	bcc.n	80005a2 <display_SensorX+0x3e>
	}
	Screen_Monitor_Node(current->SSnode.SSnode_ID, current->SSnode.Sensor_state,
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	7818      	ldrb	r0, [r3, #0]
 80005ba:	68fb      	ldr	r3, [r7, #12]
 80005bc:	7a19      	ldrb	r1, [r3, #8]
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	885a      	ldrh	r2, [r3, #2]
			current->SSnode.Battery, current->SSnode.V_type, current->SSnode.V_value);
 80005c2:	68fb      	ldr	r3, [r7, #12]
 80005c4:	791c      	ldrb	r4, [r3, #4]
	Screen_Monitor_Node(current->SSnode.SSnode_ID, current->SSnode.Sensor_state,
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	88db      	ldrh	r3, [r3, #6]
 80005ca:	b29b      	uxth	r3, r3
 80005cc:	9300      	str	r3, [sp, #0]
 80005ce:	4623      	mov	r3, r4
 80005d0:	f005 fefa 	bl	80063c8 <Screen_Monitor_Node>

}
 80005d4:	3714      	adds	r7, #20
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd90      	pop	{r4, r7, pc}
 80005da:	bf00      	nop
 80005dc:	200005d4 	.word	0x200005d4

080005e0 <setSwitchtime>:

void setSwitchtime()
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
	DS3231_GetTime(&switchtime);
 80005e4:	4802      	ldr	r0, [pc, #8]	; (80005f0 <setSwitchtime+0x10>)
 80005e6:	f002 fce3 	bl	8002fb0 <DS3231_GetTime>
}
 80005ea:	bf00      	nop
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	200005dc 	.word	0x200005dc

080005f4 <getSwitchtime>:
_RTC getSwitchtime()
{
 80005f4:	b480      	push	{r7}
 80005f6:	b083      	sub	sp, #12
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
	return switchtime;
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	4a06      	ldr	r2, [pc, #24]	; (8000618 <getSwitchtime+0x24>)
 8000600:	6810      	ldr	r0, [r2, #0]
 8000602:	6018      	str	r0, [r3, #0]
 8000604:	8891      	ldrh	r1, [r2, #4]
 8000606:	7992      	ldrb	r2, [r2, #6]
 8000608:	8099      	strh	r1, [r3, #4]
 800060a:	719a      	strb	r2, [r3, #6]
}
 800060c:	6878      	ldr	r0, [r7, #4]
 800060e:	370c      	adds	r7, #12
 8000610:	46bd      	mov	sp, r7
 8000612:	bc80      	pop	{r7}
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop
 8000618:	200005dc 	.word	0x200005dc

0800061c <processingApp_display>:
void processingApp_display()
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0

	if (getClearflag()) 	{
 8000622:	f002 fa2d 	bl	8002a80 <getClearflag>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d004      	beq.n	8000636 <processingApp_display+0x1a>
		LCD_Clear();
 800062c:	f005 fd38 	bl	80060a0 <LCD_Clear>
		setClearflag(DISABLE);
 8000630:	2000      	movs	r0, #0
 8000632:	f002 fa31 	bl	8002a98 <setClearflag>
	}
	switch(*__MY_DISPLAY_MODE)	{
 8000636:	4b41      	ldr	r3, [pc, #260]	; (800073c <processingApp_display+0x120>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	2b07      	cmp	r3, #7
 800063e:	d877      	bhi.n	8000730 <processingApp_display+0x114>
 8000640:	a201      	add	r2, pc, #4	; (adr r2, 8000648 <processingApp_display+0x2c>)
 8000642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000646:	bf00      	nop
 8000648:	08000669 	.word	0x08000669
 800064c:	08000677 	.word	0x08000677
 8000650:	080006a5 	.word	0x080006a5
 8000654:	080006ab 	.word	0x080006ab
 8000658:	080006d9 	.word	0x080006d9
 800065c:	080006e7 	.word	0x080006e7
 8000660:	08000701 	.word	0x08000701
 8000664:	08000715 	.word	0x08000715
		case HOME:
			Screen_Home_Origin(__MY_STATION->stID);
 8000668:	4b35      	ldr	r3, [pc, #212]	; (8000740 <processingApp_display+0x124>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	785b      	ldrb	r3, [r3, #1]
 800066e:	4618      	mov	r0, r3
 8000670:	f005 fd30 	bl	80060d4 <Screen_Home_Origin>
			break;
 8000674:	e05d      	b.n	8000732 <processingApp_display+0x116>
		case COUNTDOWN_SW_OFF:
			countdowntime = getCountdowntime(__MY_STATION->calibTime.hour,
 8000676:	4b32      	ldr	r3, [pc, #200]	; (8000740 <processingApp_display+0x124>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	7cd8      	ldrb	r0, [r3, #19]
												__MY_STATION->calibTime.min, __MY_STATION->calibTime.sec);
 800067c:	4b30      	ldr	r3, [pc, #192]	; (8000740 <processingApp_display+0x124>)
 800067e:	681b      	ldr	r3, [r3, #0]
			countdowntime = getCountdowntime(__MY_STATION->calibTime.hour,
 8000680:	7d19      	ldrb	r1, [r3, #20]
												__MY_STATION->calibTime.min, __MY_STATION->calibTime.sec);
 8000682:	4b2f      	ldr	r3, [pc, #188]	; (8000740 <processingApp_display+0x124>)
 8000684:	681b      	ldr	r3, [r3, #0]
			countdowntime = getCountdowntime(__MY_STATION->calibTime.hour,
 8000686:	7d5b      	ldrb	r3, [r3, #21]
 8000688:	461a      	mov	r2, r3
 800068a:	f002 feab 	bl	80033e4 <getCountdowntime>
 800068e:	4603      	mov	r3, r0
 8000690:	461a      	mov	r2, r3
 8000692:	4b2c      	ldr	r3, [pc, #176]	; (8000744 <processingApp_display+0x128>)
 8000694:	801a      	strh	r2, [r3, #0]
			Screen_Home_Sync(countdowntime);
 8000696:	4b2b      	ldr	r3, [pc, #172]	; (8000744 <processingApp_display+0x128>)
 8000698:	881b      	ldrh	r3, [r3, #0]
 800069a:	b2db      	uxtb	r3, r3
 800069c:	4618      	mov	r0, r3
 800069e:	f005 fd8d 	bl	80061bc <Screen_Home_Sync>
			break;
 80006a2:	e046      	b.n	8000732 <processingApp_display+0x116>
		case AFTER_SW_OFF:
			Screen_Home_Calib();
 80006a4:	f005 fdce 	bl	8006244 <Screen_Home_Calib>
			break;
 80006a8:	e043      	b.n	8000732 <processingApp_display+0x116>
		case MONITOR:

			if (get_curMonitor() == 0) 	{
 80006aa:	f002 fa79 	bl	8002ba0 <get_curMonitor>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d10a      	bne.n	80006ca <processingApp_display+0xae>
				Screen_Monitor_Station(__MY_STATION->MBAstate, __MY_STATION->stCurrent);
 80006b4:	4b22      	ldr	r3, [pc, #136]	; (8000740 <processingApp_display+0x124>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	799a      	ldrb	r2, [r3, #6]
 80006ba:	4b21      	ldr	r3, [pc, #132]	; (8000740 <processingApp_display+0x124>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	885b      	ldrh	r3, [r3, #2]
 80006c0:	4619      	mov	r1, r3
 80006c2:	4610      	mov	r0, r2
 80006c4:	f005 fe1e 	bl	8006304 <Screen_Monitor_Station>
			}
			else {
				display_SensorX(get_curMonitor());
			}
			break;
 80006c8:	e033      	b.n	8000732 <processingApp_display+0x116>
				display_SensorX(get_curMonitor());
 80006ca:	f002 fa69 	bl	8002ba0 <get_curMonitor>
 80006ce:	4603      	mov	r3, r0
 80006d0:	4618      	mov	r0, r3
 80006d2:	f7ff ff47 	bl	8000564 <display_SensorX>
			break;
 80006d6:	e02c      	b.n	8000732 <processingApp_display+0x116>
		case MENU_CONTROL:
			Screen_Function(getcurControl());
 80006d8:	f002 fa20 	bl	8002b1c <getcurControl>
 80006dc:	4603      	mov	r3, r0
 80006de:	4618      	mov	r0, r3
 80006e0:	f005 ff1e 	bl	8006520 <Screen_Function>
			break;
 80006e4:	e025      	b.n	8000732 <processingApp_display+0x116>
		case VOLTAGE_CONTROL:
			Screen_Voltage_Control(getLimit());
 80006e6:	f002 f93b 	bl	8002960 <getLimit>
 80006ea:	4603      	mov	r3, r0
 80006ec:	4618      	mov	r0, r3
 80006ee:	f005 ff51 	bl	8006594 <Screen_Voltage_Control>
			Screen_Voltage_Control_Control_Motor(getStepchange());
 80006f2:	f002 f979 	bl	80029e8 <getStepchange>
 80006f6:	4603      	mov	r3, r0
 80006f8:	4618      	mov	r0, r3
 80006fa:	f005 ff99 	bl	8006630 <Screen_Voltage_Control_Control_Motor>
			break;
 80006fe:	e018      	b.n	8000732 <processingApp_display+0x116>
		case ON_OFF_CONTROL:
			Screen_Control_Relay(1);
 8000700:	2001      	movs	r0, #1
 8000702:	f005 ffb1 	bl	8006668 <Screen_Control_Relay>
			Screen_Control_Relay_Change_Mode(getCurswitch());
 8000706:	f002 f9b1 	bl	8002a6c <getCurswitch>
 800070a:	4603      	mov	r3, r0
 800070c:	4618      	mov	r0, r3
 800070e:	f005 fff1 	bl	80066f4 <Screen_Control_Relay_Change_Mode>
			break;
 8000712:	e00e      	b.n	8000732 <processingApp_display+0x116>
		case COMPLETE_CONTROL:
			Screen_Accept_Relay(getSwitchtime(), getCurswitch());
 8000714:	463b      	mov	r3, r7
 8000716:	4618      	mov	r0, r3
 8000718:	f7ff ff6c 	bl	80005f4 <getSwitchtime>
 800071c:	f002 f9a6 	bl	8002a6c <getCurswitch>
 8000720:	4603      	mov	r3, r0
 8000722:	461a      	mov	r2, r3
 8000724:	463b      	mov	r3, r7
 8000726:	e893 0003 	ldmia.w	r3, {r0, r1}
 800072a:	f005 ffff 	bl	800672c <Screen_Accept_Relay>
			break;
 800072e:	e000      	b.n	8000732 <processingApp_display+0x116>
		default:
			break;
 8000730:	bf00      	nop
		}
//	Screen_Home_Origin(__MY_STATION->stID);

//	Screen_Home_Sync(countdowntime);
}
 8000732:	bf00      	nop
 8000734:	3708      	adds	r7, #8
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	200005cc 	.word	0x200005cc
 8000740:	200005d4 	.word	0x200005d4
 8000744:	200005d8 	.word	0x200005d8

08000748 <initApp_MBA_stepmor>:
#include "Step_motor.h"
#include "user_a4988.h"

static Stepmotor_change_mode_t changeMode;
void initApp_MBA_stepmor()
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0

}
 800074c:	bf00      	nop
 800074e:	46bd      	mov	sp, r7
 8000750:	bc80      	pop	{r7}
 8000752:	4770      	bx	lr

08000754 <processingApp_MBA_stepmor>:

void processingApp_MBA_stepmor()
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
	if(checkTaskflag(TASK_CTRL_STEPMOR))	{
 8000758:	2005      	movs	r0, #5
 800075a:	f003 fdfb 	bl	8004354 <checkTaskflag>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d016      	beq.n	8000792 <processingApp_MBA_stepmor+0x3e>
		changeMode = Step_getChangemode();
 8000764:	f002 f956 	bl	8002a14 <Step_getChangemode>
 8000768:	4603      	mov	r3, r0
 800076a:	461a      	mov	r2, r3
 800076c:	4b0a      	ldr	r3, [pc, #40]	; (8000798 <processingApp_MBA_stepmor+0x44>)
 800076e:	701a      	strb	r2, [r3, #0]
		switch (changeMode)	{
 8000770:	4b09      	ldr	r3, [pc, #36]	; (8000798 <processingApp_MBA_stepmor+0x44>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	2b01      	cmp	r3, #1
 8000776:	d004      	beq.n	8000782 <processingApp_MBA_stepmor+0x2e>
 8000778:	2b02      	cmp	r3, #2
 800077a:	d105      	bne.n	8000788 <processingApp_MBA_stepmor+0x34>
		case STEPM_MODE_STEP:
			Step_step();
 800077c:	f002 f954 	bl	8002a28 <Step_step>
			break;
 8000780:	e003      	b.n	800078a <processingApp_MBA_stepmor+0x36>
		case STEPM_MODE_PERCENTAGE:
			Step_percent();
 8000782:	f002 f960 	bl	8002a46 <Step_percent>
			break;
 8000786:	e000      	b.n	800078a <processingApp_MBA_stepmor+0x36>
		default:
			break;
 8000788:	bf00      	nop
		}
		triggerTaskflag(TASK_CTRL_STEPMOR, FLAG_DIS);
 800078a:	2100      	movs	r1, #0
 800078c:	2005      	movs	r0, #5
 800078e:	f003 fee7 	bl	8004560 <triggerTaskflag>
	}
}
 8000792:	bf00      	nop
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	200005e3 	.word	0x200005e3

0800079c <initApp_MCU>:


uint32_t tick = 0;

void initApp_MCU(Station_t *station, SIM_t *mySIM)
{
 800079c:	b480      	push	{r7}
 800079e:	b083      	sub	sp, #12
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
 80007a4:	6039      	str	r1, [r7, #0]
	__MY_STATION_MCU = station;
 80007a6:	4a05      	ldr	r2, [pc, #20]	; (80007bc <initApp_MCU+0x20>)
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	6013      	str	r3, [r2, #0]
	__MY_SIM_MCU = mySIM;
 80007ac:	4a04      	ldr	r2, [pc, #16]	; (80007c0 <initApp_MCU+0x24>)
 80007ae:	683b      	ldr	r3, [r7, #0]
 80007b0:	6013      	str	r3, [r2, #0]
}
 80007b2:	bf00      	nop
 80007b4:	370c      	adds	r7, #12
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bc80      	pop	{r7}
 80007ba:	4770      	bx	lr
 80007bc:	200005e4 	.word	0x200005e4
 80007c0:	200005e8 	.word	0x200005e8

080007c4 <processApp_MCU>:
			current = current->next;
		}
	return count;
}
void processApp_MCU(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
		/*Check for task*/
		if ( checkTaskflag(TASK_PREPARE_CALIB) )	{
 80007c8:	2002      	movs	r0, #2
 80007ca:	f003 fdc3 	bl	8004354 <checkTaskflag>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d00b      	beq.n	80007ec <processApp_MCU+0x28>

			//Synchronize RTC time for Station and Sensor
			triggerTaskflag(TASK_GET_GPS_TIME, FLAG_EN);
 80007d4:	2101      	movs	r1, #1
 80007d6:	2006      	movs	r0, #6
 80007d8:	f003 fec2 	bl	8004560 <triggerTaskflag>
			// Send WAKEUP command for Sensor
//			Lora_Setmode(WAKE);
			//Check for sensor Ready

			// Trigger send NETWORK READY message to Server
			triggerTaskflag(TASK_SEND_NWREADY, FLAG_EN);
 80007dc:	2101      	movs	r1, #1
 80007de:	2007      	movs	r0, #7
 80007e0:	f003 febe 	bl	8004560 <triggerTaskflag>

			triggerTaskflag(TASK_PREPARE_CALIB, FLAG_DIS);
 80007e4:	2100      	movs	r1, #0
 80007e6:	2002      	movs	r0, #2
 80007e8:	f003 feba 	bl	8004560 <triggerTaskflag>
		}

		// Calibration Mode
		if (checkStationMode() == STATION_MODE_CALIB)	{
 80007ec:	f004 fb68 	bl	8004ec0 <checkStationMode>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b01      	cmp	r3, #1
 80007f4:	d11e      	bne.n	8000834 <processApp_MCU+0x70>
			if( checkTaskflag(TASK_START_CALIB) ) {
 80007f6:	2003      	movs	r0, #3
 80007f8:	f003 fdac 	bl	8004354 <checkTaskflag>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d007      	beq.n	8000812 <processApp_MCU+0x4e>
				// Receive Sensor DATA CALIBRATION

				// Send DATA CALIBRATION to Server
				triggerTaskflag(TASK_SEND_DATACALIB, FLAG_EN);
 8000802:	2101      	movs	r1, #1
 8000804:	2009      	movs	r0, #9
 8000806:	f003 feab 	bl	8004560 <triggerTaskflag>
				triggerTaskflag(TASK_START_CALIB, FLAG_DIS);
 800080a:	2100      	movs	r1, #0
 800080c:	2003      	movs	r0, #3
 800080e:	f003 fea7 	bl	8004560 <triggerTaskflag>
			}

			if (checkTaskflag(TASK_CTRL_STEPMOR))	{
 8000812:	2005      	movs	r0, #5
 8000814:	f003 fd9e 	bl	8004354 <checkTaskflag>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d00a      	beq.n	8000834 <processApp_MCU+0x70>
				// Control step motor for desire output

				// Send data after calibration
				triggerTaskflag(TASK_SEND_DATAAFTERCALIB, FLAG_EN);
 800081e:	2101      	movs	r1, #1
 8000820:	200a      	movs	r0, #10
 8000822:	f003 fe9d 	bl	8004560 <triggerTaskflag>
				setStationMode(STATION_MODE_NORMAL);
 8000826:	2000      	movs	r0, #0
 8000828:	f004 fb3a 	bl	8004ea0 <setStationMode>
				triggerTaskflag(TASK_CTRL_STEPMOR, FLAG_DIS);
 800082c:	2100      	movs	r1, #0
 800082e:	2005      	movs	r0, #5
 8000830:	f003 fe96 	bl	8004560 <triggerTaskflag>
			}
		}

	// Normal Mode
	if (checkStationMode() == STATION_MODE_NORMAL)	{
 8000834:	f004 fb44 	bl	8004ec0 <checkStationMode>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d112      	bne.n	8000864 <processApp_MCU+0xa0>

		// Send data period
		if (HAL_GetTick() - tick >= UPDATE_DATA_PERIOD *1000)	{
 800083e:	f006 f85b 	bl	80068f8 <HAL_GetTick>
 8000842:	4602      	mov	r2, r0
 8000844:	4b08      	ldr	r3, [pc, #32]	; (8000868 <processApp_MCU+0xa4>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	1ad3      	subs	r3, r2, r3
 800084a:	f242 720f 	movw	r2, #9999	; 0x270f
 800084e:	4293      	cmp	r3, r2
 8000850:	d908      	bls.n	8000864 <processApp_MCU+0xa0>
			triggerTaskflag(TASK_SEND_DATAPERIOD, FLAG_EN);
 8000852:	2101      	movs	r1, #1
 8000854:	2008      	movs	r0, #8
 8000856:	f003 fe83 	bl	8004560 <triggerTaskflag>
			tick = HAL_GetTick();
 800085a:	f006 f84d 	bl	80068f8 <HAL_GetTick>
 800085e:	4603      	mov	r3, r0
 8000860:	4a01      	ldr	r2, [pc, #4]	; (8000868 <processApp_MCU+0xa4>)
 8000862:	6013      	str	r3, [r2, #0]
		}
	}



}
 8000864:	bf00      	nop
 8000866:	bd80      	pop	{r7, pc}
 8000868:	200005ec 	.word	0x200005ec

0800086c <initApp_MQTT>:
static Station_t *__MY_STATION_MQTT;
static SIM_t *__MY_SIM_MQTT;
uint8_t buffer [10];
uint8_t stIDbuffer[] = {1,2,3,4,5};
void initApp_MQTT(Station_t *station, SIM_t *sim)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b084      	sub	sp, #16
 8000870:	af02      	add	r7, sp, #8
 8000872:	6078      	str	r0, [r7, #4]
 8000874:	6039      	str	r1, [r7, #0]
	__MY_STATION_MQTT = station;
 8000876:	4a11      	ldr	r2, [pc, #68]	; (80008bc <initApp_MQTT+0x50>)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	6013      	str	r3, [r2, #0]
	__MY_SIM_MQTT = sim;
 800087c:	4a10      	ldr	r2, [pc, #64]	; (80008c0 <initApp_MQTT+0x54>)
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	6013      	str	r3, [r2, #0]
	init_MQTT(__MY_SIM_MQTT);
 8000882:	4b0f      	ldr	r3, [pc, #60]	; (80008c0 <initApp_MQTT+0x54>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	4618      	mov	r0, r3
 8000888:	f002 fff6 	bl	8003878 <init_MQTT>
	initServerMsg(__MY_STATION_MQTT, &__MY_SIM_MQTT->sms);
 800088c:	4b0b      	ldr	r3, [pc, #44]	; (80008bc <initApp_MQTT+0x50>)
 800088e:	681a      	ldr	r2, [r3, #0]
 8000890:	4b0b      	ldr	r3, [pc, #44]	; (80008c0 <initApp_MQTT+0x54>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	f203 43bc 	addw	r3, r3, #1212	; 0x4bc
 8000898:	4619      	mov	r1, r3
 800089a:	4610      	mov	r0, r2
 800089c:	f000 fb50 	bl	8000f40 <initServerMsg>
	SIM_sendCMD((uint8_t*)"ATE0",(uint8_t*)"OK", ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, 1000);
 80008a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008a4:	9300      	str	r3, [sp, #0]
 80008a6:	2301      	movs	r3, #1
 80008a8:	2201      	movs	r2, #1
 80008aa:	4906      	ldr	r1, [pc, #24]	; (80008c4 <initApp_MQTT+0x58>)
 80008ac:	4806      	ldr	r0, [pc, #24]	; (80008c8 <initApp_MQTT+0x5c>)
 80008ae:	f001 fdb1 	bl	8002414 <SIM_sendCMD>
}
 80008b2:	bf00      	nop
 80008b4:	3708      	adds	r7, #8
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	200005f0 	.word	0x200005f0
 80008c0:	200005f4 	.word	0x200005f4
 80008c4:	0800d7f4 	.word	0x0800d7f4
 80008c8:	0800d7f8 	.word	0x0800d7f8

080008cc <dataCalibavailble>:

uint8_t dataCalibavailble()
{
 80008cc:	b480      	push	{r7}
 80008ce:	b083      	sub	sp, #12
 80008d0:	af00      	add	r7, sp, #0
	Node * current =__MY_STATION_MQTT->ssNode_list->head->next;
 80008d2:	4b0e      	ldr	r3, [pc, #56]	; (800090c <dataCalibavailble+0x40>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	68db      	ldr	r3, [r3, #12]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80008dc:	607b      	str	r3, [r7, #4]
		while (current != __MY_STATION_MQTT->ssNode_list->tail)	{
 80008de:	e008      	b.n	80008f2 <dataCalibavailble+0x26>
			if (current->SSnode.dataCalibAvailable) 	{
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	7a5b      	ldrb	r3, [r3, #9]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <dataCalibavailble+0x20>
				return 1;
 80008e8:	2301      	movs	r3, #1
 80008ea:	e00a      	b.n	8000902 <dataCalibavailble+0x36>
			}
			current = current->next;
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80008f0:	607b      	str	r3, [r7, #4]
		while (current != __MY_STATION_MQTT->ssNode_list->tail)	{
 80008f2:	4b06      	ldr	r3, [pc, #24]	; (800090c <dataCalibavailble+0x40>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	68db      	ldr	r3, [r3, #12]
 80008f8:	685b      	ldr	r3, [r3, #4]
 80008fa:	687a      	ldr	r2, [r7, #4]
 80008fc:	429a      	cmp	r2, r3
 80008fe:	d1ef      	bne.n	80008e0 <dataCalibavailble+0x14>
		}
	return 0;
 8000900:	2300      	movs	r3, #0
}
 8000902:	4618      	mov	r0, r3
 8000904:	370c      	adds	r7, #12
 8000906:	46bd      	mov	sp, r7
 8000908:	bc80      	pop	{r7}
 800090a:	4770      	bx	lr
 800090c:	200005f0 	.word	0x200005f0

08000910 <processApp_MQTT>:
void processApp_MQTT(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af02      	add	r7, sp, #8
	// Check for connection to MQTT broker
	if ( !MQTT_connected() ) {
 8000916:	f003 f915 	bl	8003b44 <MQTT_connected>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d105      	bne.n	800092c <processApp_MQTT+0x1c>
		triggerTaskflag(TASK_SUBSCRIBE, FLAG_EN);
 8000920:	2101      	movs	r1, #1
 8000922:	2001      	movs	r0, #1
 8000924:	f003 fe1c 	bl	8004560 <triggerTaskflag>
		MQTT_connect();
 8000928:	f003 fae2 	bl	8003ef0 <MQTT_connect>
	}
	// Check for subscribe to broker
	if ( __MY_SIM_MQTT->mqttServer.connect && checkTaskflag(TASK_SUBSCRIBE) ) {
 800092c:	4b9d      	ldr	r3, [pc, #628]	; (8000ba4 <processApp_MQTT+0x294>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	7e9b      	ldrb	r3, [r3, #26]
 8000932:	2b00      	cmp	r3, #0
 8000934:	d00f      	beq.n	8000956 <processApp_MQTT+0x46>
 8000936:	2001      	movs	r0, #1
 8000938:	f003 fd0c 	bl	8004354 <checkTaskflag>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d009      	beq.n	8000956 <processApp_MQTT+0x46>

		if ( MQTT_subcribe( (uint8_t*)TOPIC_SUB ) ) {
 8000942:	4899      	ldr	r0, [pc, #612]	; (8000ba8 <processApp_MQTT+0x298>)
 8000944:	f003 fbc6 	bl	80040d4 <MQTT_subcribe>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d003      	beq.n	8000956 <processApp_MQTT+0x46>
			triggerTaskflag(TASK_SUBSCRIBE, FLAG_DIS);
 800094e:	2100      	movs	r1, #0
 8000950:	2001      	movs	r0, #1
 8000952:	f003 fe05 	bl	8004560 <triggerTaskflag>
		}
	}
	// Check for register to Server
	if ( checkTaskflag(TASK_REGISTER) )	{
 8000956:	2000      	movs	r0, #0
 8000958:	f003 fcfc 	bl	8004354 <checkTaskflag>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <processApp_MQTT+0x56>
		Register2Server();
 8000962:	f000 fe5b 	bl	800161c <Register2Server>
	}
	// Send NETWORK READY message to Server
	if ( checkTaskflag(TASK_SEND_NWREADY))	{
 8000966:	2007      	movs	r0, #7
 8000968:	f003 fcf4 	bl	8004354 <checkTaskflag>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d002      	beq.n	8000978 <processApp_MQTT+0x68>
		sendData2Server(DATA_NETWREADY);
 8000972:	2002      	movs	r0, #2
 8000974:	f000 ff40 	bl	80017f8 <sendData2Server>
	}
	// Send DATA CALIB
	if(checkTaskflag(TASK_SEND_DATACALIB) && dataCalibavailble())	{
 8000978:	2009      	movs	r0, #9
 800097a:	f003 fceb 	bl	8004354 <checkTaskflag>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d007      	beq.n	8000994 <processApp_MQTT+0x84>
 8000984:	f7ff ffa2 	bl	80008cc <dataCalibavailble>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d002      	beq.n	8000994 <processApp_MQTT+0x84>
		sendData2Server(DATA_CALIB);
 800098e:	2005      	movs	r0, #5
 8000990:	f000 ff32 	bl	80017f8 <sendData2Server>
	}
	// Send DATA AFTER CALIB
	if (checkTaskflag(TASK_SEND_DATAAFTERCALIB) )	{
 8000994:	200a      	movs	r0, #10
 8000996:	f003 fcdd 	bl	8004354 <checkTaskflag>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d002      	beq.n	80009a6 <processApp_MQTT+0x96>
		sendData2Server(DATA_AFTERCALIB);
 80009a0:	2007      	movs	r0, #7
 80009a2:	f000 ff29 	bl	80017f8 <sendData2Server>
	}

	// Send DATA PERIOD
	if (checkTaskflag(TASK_SEND_DATAPERIOD))	{
 80009a6:	2008      	movs	r0, #8
 80009a8:	f003 fcd4 	bl	8004354 <checkTaskflag>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d002      	beq.n	80009b8 <processApp_MQTT+0xa8>
		sendData2Server(DATA_PERIOD);
 80009b2:	2001      	movs	r0, #1
 80009b4:	f000 ff20 	bl	80017f8 <sendData2Server>
	}
	// SMS control MBA
	if(checkTaskflag(TASK_SEND_CTRLMBA))	{
 80009b8:	200b      	movs	r0, #11
 80009ba:	f003 fccb 	bl	8004354 <checkTaskflag>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d030      	beq.n	8000a26 <processApp_MQTT+0x116>
		if (checkSMSrequest(SMS_CMD_CTRL_ON) )	{
 80009c4:	2000      	movs	r0, #0
 80009c6:	f001 fe0f 	bl	80025e8 <checkSMSrequest>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d010      	beq.n	80009f2 <processApp_MQTT+0xe2>
			CMD_SMS_Ctrl_MBA(__MY_SIM_MQTT->sms.CtrlON.data, __MY_SIM_MQTT->sms.CtrlON.datalength, MBA_ON);
 80009d0:	4b74      	ldr	r3, [pc, #464]	; (8000ba4 <processApp_MQTT+0x294>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	f503 6098 	add.w	r0, r3, #1216	; 0x4c0
 80009d8:	4b72      	ldr	r3, [pc, #456]	; (8000ba4 <processApp_MQTT+0x294>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	f8b3 34be 	ldrh.w	r3, [r3, #1214]	; 0x4be
 80009e0:	2201      	movs	r2, #1
 80009e2:	4619      	mov	r1, r3
 80009e4:	f001 faae 	bl	8001f44 <CMD_SMS_Ctrl_MBA>
			triggerSMSrequest(SMS_CMD_CTRL_ON, SMS_CMD_DISABLE);
 80009e8:	2100      	movs	r1, #0
 80009ea:	2000      	movs	r0, #0
 80009ec:	f001 fe8c 	bl	8002708 <triggerSMSrequest>
 80009f0:	e015      	b.n	8000a1e <processApp_MQTT+0x10e>
		}
		else if (checkSMSrequest(SMS_CMD_CTRL_OFF))	{
 80009f2:	2001      	movs	r0, #1
 80009f4:	f001 fdf8 	bl	80025e8 <checkSMSrequest>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d00f      	beq.n	8000a1e <processApp_MQTT+0x10e>
			CMD_SMS_Ctrl_MBA(__MY_SIM_MQTT->sms.CtrlOFF.data, __MY_SIM_MQTT->sms.CtrlOFF.datalength, MBA_OFF);
 80009fe:	4b69      	ldr	r3, [pc, #420]	; (8000ba4 <processApp_MQTT+0x294>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	f503 60ba 	add.w	r0, r3, #1488	; 0x5d0
 8000a06:	4b67      	ldr	r3, [pc, #412]	; (8000ba4 <processApp_MQTT+0x294>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	f8b3 35ce 	ldrh.w	r3, [r3, #1486]	; 0x5ce
 8000a0e:	2202      	movs	r2, #2
 8000a10:	4619      	mov	r1, r3
 8000a12:	f001 fa97 	bl	8001f44 <CMD_SMS_Ctrl_MBA>
			triggerSMSrequest(SMS_CMD_CTRL_OFF, SMS_CMD_DISABLE);
 8000a16:	2100      	movs	r1, #0
 8000a18:	2001      	movs	r0, #1
 8000a1a:	f001 fe75 	bl	8002708 <triggerSMSrequest>
		}
		triggerTaskflag(TASK_SEND_CTRLMBA, FLAG_DIS);
 8000a1e:	2100      	movs	r1, #0
 8000a20:	200b      	movs	r0, #11
 8000a22:	f003 fd9d 	bl	8004560 <triggerTaskflag>
	}
	// SMS control step motor
	if(checkTaskflag(TASK_SEND_CTRLSTEPMOR))	{
 8000a26:	200c      	movs	r0, #12
 8000a28:	f003 fc94 	bl	8004354 <checkTaskflag>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d034      	beq.n	8000a9c <processApp_MQTT+0x18c>
		if (checkSMSrequest(SMS_CMD_CTRL_INC) )	{
 8000a32:	2003      	movs	r0, #3
 8000a34:	f001 fdd8 	bl	80025e8 <checkSMSrequest>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d012      	beq.n	8000a64 <processApp_MQTT+0x154>
			CMD_SMS_Ctrl_StepM(__MY_SIM_MQTT->sms.CtrlINC.data, __MY_SIM_MQTT->sms.CtrlINC.datalength, STEPM_DIR_INC, STEPM_MODE_STEP, 1);
 8000a3e:	4b59      	ldr	r3, [pc, #356]	; (8000ba4 <processApp_MQTT+0x294>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	f503 60fe 	add.w	r0, r3, #2032	; 0x7f0
 8000a46:	4b57      	ldr	r3, [pc, #348]	; (8000ba4 <processApp_MQTT+0x294>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	f8b3 17ee 	ldrh.w	r1, [r3, #2030]	; 0x7ee
 8000a4e:	2301      	movs	r3, #1
 8000a50:	9300      	str	r3, [sp, #0]
 8000a52:	2302      	movs	r3, #2
 8000a54:	2201      	movs	r2, #1
 8000a56:	f001 fa99 	bl	8001f8c <CMD_SMS_Ctrl_StepM>
			triggerSMSrequest(SMS_CMD_CTRL_INC, SMS_CMD_DISABLE);
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	2003      	movs	r0, #3
 8000a5e:	f001 fe53 	bl	8002708 <triggerSMSrequest>
 8000a62:	e017      	b.n	8000a94 <processApp_MQTT+0x184>
		}
		else if (checkSMSrequest(SMS_CMD_CTRL_DEC))	{
 8000a64:	2004      	movs	r0, #4
 8000a66:	f001 fdbf 	bl	80025e8 <checkSMSrequest>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d011      	beq.n	8000a94 <processApp_MQTT+0x184>
			CMD_SMS_Ctrl_StepM(__MY_SIM_MQTT->sms.CtrlDEC.data, __MY_SIM_MQTT->sms.CtrlDEC.datalength, STEPM_DIR_DEC, STEPM_MODE_STEP, 1);
 8000a70:	4b4c      	ldr	r3, [pc, #304]	; (8000ba4 <processApp_MQTT+0x294>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	f503 6010 	add.w	r0, r3, #2304	; 0x900
 8000a78:	4b4a      	ldr	r3, [pc, #296]	; (8000ba4 <processApp_MQTT+0x294>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	f8b3 18fe 	ldrh.w	r1, [r3, #2302]	; 0x8fe
 8000a80:	2301      	movs	r3, #1
 8000a82:	9300      	str	r3, [sp, #0]
 8000a84:	2302      	movs	r3, #2
 8000a86:	2202      	movs	r2, #2
 8000a88:	f001 fa80 	bl	8001f8c <CMD_SMS_Ctrl_StepM>
			triggerSMSrequest(SMS_CMD_CTRL_DEC, SMS_CMD_DISABLE);
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	2004      	movs	r0, #4
 8000a90:	f001 fe3a 	bl	8002708 <triggerSMSrequest>
		}
		triggerTaskflag(TASK_SEND_CTRLSTEPMOR, FLAG_DIS);
 8000a94:	2100      	movs	r1, #0
 8000a96:	200c      	movs	r0, #12
 8000a98:	f003 fd62 	bl	8004560 <triggerTaskflag>
	}
	// SMS calib
	if(checkTaskflag(TASK_SEND_CALIB))	{
 8000a9c:	200d      	movs	r0, #13
 8000a9e:	f003 fc59 	bl	8004354 <checkTaskflag>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d013      	beq.n	8000ad0 <processApp_MQTT+0x1c0>
		CMD_SMS_calib(__MY_SIM_MQTT->sms.CtrlCALIB.data, __MY_SIM_MQTT->sms.CtrlCALIB.datalength);
 8000aa8:	4b3e      	ldr	r3, [pc, #248]	; (8000ba4 <processApp_MQTT+0x294>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	f503 62dc 	add.w	r2, r3, #1760	; 0x6e0
 8000ab0:	4b3c      	ldr	r3, [pc, #240]	; (8000ba4 <processApp_MQTT+0x294>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	f8b3 36de 	ldrh.w	r3, [r3, #1758]	; 0x6de
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4610      	mov	r0, r2
 8000abc:	f001 f9fe 	bl	8001ebc <CMD_SMS_calib>
		triggerSMSrequest(SMS_CMD_CTRL_CALIB, SMS_CMD_DISABLE);
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	2002      	movs	r0, #2
 8000ac4:	f001 fe20 	bl	8002708 <triggerSMSrequest>
		triggerTaskflag(TASK_SEND_CALIB, FLAG_DIS);
 8000ac8:	2100      	movs	r1, #0
 8000aca:	200d      	movs	r0, #13
 8000acc:	f003 fd48 	bl	8004560 <triggerTaskflag>
	}
	// SMS get status
	if(checkTaskflag(TASK_SEND_GETSTATUS))	{
 8000ad0:	200e      	movs	r0, #14
 8000ad2:	f003 fc3f 	bl	8004354 <checkTaskflag>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d013      	beq.n	8000b04 <processApp_MQTT+0x1f4>
		CMD_SMS_getStatus(__MY_SIM_MQTT->sms.GetStatus.data, __MY_SIM_MQTT->sms.GetStatus.datalength);
 8000adc:	4b31      	ldr	r3, [pc, #196]	; (8000ba4 <processApp_MQTT+0x294>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	f503 6221 	add.w	r2, r3, #2576	; 0xa10
 8000ae4:	4b2f      	ldr	r3, [pc, #188]	; (8000ba4 <processApp_MQTT+0x294>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	f8b3 3a0e 	ldrh.w	r3, [r3, #2574]	; 0xa0e
 8000aec:	4619      	mov	r1, r3
 8000aee:	4610      	mov	r0, r2
 8000af0:	f001 fa06 	bl	8001f00 <CMD_SMS_getStatus>
		triggerSMSrequest(SMS_CMD_GET_STATUS, SMS_CMD_DISABLE);
 8000af4:	2100      	movs	r1, #0
 8000af6:	2005      	movs	r0, #5
 8000af8:	f001 fe06 	bl	8002708 <triggerSMSrequest>
		triggerTaskflag(TASK_SEND_GETSTATUS, FLAG_DIS);
 8000afc:	2100      	movs	r1, #0
 8000afe:	200e      	movs	r0, #14
 8000b00:	f003 fd2e 	bl	8004560 <triggerTaskflag>
	}
	//SMS get station latest data
	if(checkTaskflag(TASK_SEND_GETSTATION))	{
 8000b04:	200f      	movs	r0, #15
 8000b06:	f003 fc25 	bl	8004354 <checkTaskflag>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d013      	beq.n	8000b38 <processApp_MQTT+0x228>
		CMD_SMS_getStationLatestData(__MY_SIM_MQTT->sms.GetStation.data, __MY_SIM_MQTT->sms.GetStation.datalength);
 8000b10:	4b24      	ldr	r3, [pc, #144]	; (8000ba4 <processApp_MQTT+0x294>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	f503 6243 	add.w	r2, r3, #3120	; 0xc30
 8000b18:	4b22      	ldr	r3, [pc, #136]	; (8000ba4 <processApp_MQTT+0x294>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	f8b3 3c2e 	ldrh.w	r3, [r3, #3118]	; 0xc2e
 8000b20:	4619      	mov	r1, r3
 8000b22:	4610      	mov	r0, r2
 8000b24:	f001 fa5a 	bl	8001fdc <CMD_SMS_getStationLatestData>
		triggerSMSrequest(SMS_CMD_GET_STATION, SMS_CMD_DISABLE);
 8000b28:	2100      	movs	r1, #0
 8000b2a:	2007      	movs	r0, #7
 8000b2c:	f001 fdec 	bl	8002708 <triggerSMSrequest>
		triggerTaskflag(TASK_SEND_GETSTATION, FLAG_DIS);
 8000b30:	2100      	movs	r1, #0
 8000b32:	200f      	movs	r0, #15
 8000b34:	f003 fd14 	bl	8004560 <triggerTaskflag>
	}
	// SMS get sensor lastest data
	if(checkTaskflag(TASK_SEND_GETSENSOR))	{
 8000b38:	2010      	movs	r0, #16
 8000b3a:	f003 fc0b 	bl	8004354 <checkTaskflag>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d013      	beq.n	8000b6c <processApp_MQTT+0x25c>
		CMD_SMS_getSensorLatestData(__MY_SIM_MQTT->sms.GetSensor.data, __MY_SIM_MQTT->sms.GetSensor.datalength);
 8000b44:	4b17      	ldr	r3, [pc, #92]	; (8000ba4 <processApp_MQTT+0x294>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	f503 6232 	add.w	r2, r3, #2848	; 0xb20
 8000b4c:	4b15      	ldr	r3, [pc, #84]	; (8000ba4 <processApp_MQTT+0x294>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	f8b3 3b1e 	ldrh.w	r3, [r3, #2846]	; 0xb1e
 8000b54:	4619      	mov	r1, r3
 8000b56:	4610      	mov	r0, r2
 8000b58:	f001 fa62 	bl	8002020 <CMD_SMS_getSensorLatestData>
		triggerSMSrequest(SMS_CMD_GET_SENSOR, SMS_CMD_DISABLE);
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	2006      	movs	r0, #6
 8000b60:	f001 fdd2 	bl	8002708 <triggerSMSrequest>
		triggerTaskflag(TASK_SEND_GETSENSOR, FLAG_DIS);
 8000b64:	2100      	movs	r1, #0
 8000b66:	2010      	movs	r0, #16
 8000b68:	f003 fcfa 	bl	8004560 <triggerTaskflag>
	}
	// Processing new coming MQTT message
	if ( __MY_SIM_MQTT->mqttReceive.newEvent == 1)
 8000b6c:	4b0d      	ldr	r3, [pc, #52]	; (8000ba4 <processApp_MQTT+0x294>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8000b74:	2b01      	cmp	r3, #1
 8000b76:	d112      	bne.n	8000b9e <processApp_MQTT+0x28e>
	{
		__MY_SIM_MQTT->mqttReceive.newEvent = 0;
 8000b78:	4b0a      	ldr	r3, [pc, #40]	; (8000ba4 <processApp_MQTT+0x294>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		// call process Server message function
		processingComingMsg(__MY_SIM_MQTT->mqttReceive.payload, __MY_SIM_MQTT->mqttReceive.payloadLen,
 8000b82:	4b08      	ldr	r3, [pc, #32]	; (8000ba4 <processApp_MQTT+0x294>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8000b8a:	4b06      	ldr	r3, [pc, #24]	; (8000ba4 <processApp_MQTT+0x294>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	f8b3 1438 	ldrh.w	r1, [r3, #1080]	; 0x438
				__MY_STATION_MQTT->stID );
 8000b92:	4b06      	ldr	r3, [pc, #24]	; (8000bac <processApp_MQTT+0x29c>)
 8000b94:	681b      	ldr	r3, [r3, #0]
		processingComingMsg(__MY_SIM_MQTT->mqttReceive.payload, __MY_SIM_MQTT->mqttReceive.payloadLen,
 8000b96:	785b      	ldrb	r3, [r3, #1]
 8000b98:	461a      	mov	r2, r3
 8000b9a:	f001 f851 	bl	8001c40 <processingComingMsg>
	}
}
 8000b9e:	bf00      	nop
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	200005f4 	.word	0x200005f4
 8000ba8:	0800d800 	.word	0x0800d800
 8000bac:	200005f0 	.word	0x200005f0

08000bb0 <initApp_SMS>:
#include "Task.h"

static SMS_t *__MY_SMS;

void initApp_SMS(SMS_t *mySMS)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
	__MY_SMS = mySMS;
 8000bb8:	4a03      	ldr	r2, [pc, #12]	; (8000bc8 <initApp_SMS+0x18>)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	6013      	str	r3, [r2, #0]
}
 8000bbe:	bf00      	nop
 8000bc0:	370c      	adds	r7, #12
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bc80      	pop	{r7}
 8000bc6:	4770      	bx	lr
 8000bc8:	200005f8 	.word	0x200005f8

08000bcc <init_App_Serial>:
#include "usart.h"

Station_t *__MY_STATION_SERIAL;

void init_App_Serial (Station_t *station)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
	__MY_STATION_SERIAL = station;
 8000bd4:	4a05      	ldr	r2, [pc, #20]	; (8000bec <init_App_Serial+0x20>)
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	6013      	str	r3, [r2, #0]
	initSerial_CFG(&huart2,&hdma_usart2_rx);
 8000bda:	4905      	ldr	r1, [pc, #20]	; (8000bf0 <init_App_Serial+0x24>)
 8000bdc:	4805      	ldr	r0, [pc, #20]	; (8000bf4 <init_App_Serial+0x28>)
 8000bde:	f000 f80b 	bl	8000bf8 <initSerial_CFG>
}
 8000be2:	bf00      	nop
 8000be4:	3708      	adds	r7, #8
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	200005fc 	.word	0x200005fc
 8000bf0:	200036c0 	.word	0x200036c0
 8000bf4:	200035ec 	.word	0x200035ec

08000bf8 <initSerial_CFG>:
_RTC *__MY_RTC;

uint8_t alarmflag = 0;

void initSerial_CFG(UART_HandleTypeDef *huart, DMA_HandleTypeDef  *hdma)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
 8000c00:	6039      	str	r1, [r7, #0]
	__SCFG_UART = huart;
 8000c02:	4a06      	ldr	r2, [pc, #24]	; (8000c1c <initSerial_CFG+0x24>)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	6013      	str	r3, [r2, #0]
	__SCFG_DMA_UART = hdma;
 8000c08:	4a05      	ldr	r2, [pc, #20]	; (8000c20 <initSerial_CFG+0x28>)
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	6013      	str	r3, [r2, #0]
	enableReceiveDMAtoIdle_CFG();
 8000c0e:	f000 f81d 	bl	8000c4c <enableReceiveDMAtoIdle_CFG>
}
 8000c12:	bf00      	nop
 8000c14:	3708      	adds	r7, #8
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	20000600 	.word	0x20000600
 8000c20:	20000604 	.word	0x20000604

08000c24 <initGPS>:

void initGPS(Station_t *station, _RTC *rtc)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
 8000c2c:	6039      	str	r1, [r7, #0]
	__MY_STATION_GPS = station;
 8000c2e:	4a05      	ldr	r2, [pc, #20]	; (8000c44 <initGPS+0x20>)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	6013      	str	r3, [r2, #0]
	__MY_RTC = rtc;
 8000c34:	4a04      	ldr	r2, [pc, #16]	; (8000c48 <initGPS+0x24>)
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	6013      	str	r3, [r2, #0]
}
 8000c3a:	bf00      	nop
 8000c3c:	370c      	adds	r7, #12
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bc80      	pop	{r7}
 8000c42:	4770      	bx	lr
 8000c44:	20000d14 	.word	0x20000d14
 8000c48:	20000d18 	.word	0x20000d18

08000c4c <enableReceiveDMAtoIdle_CFG>:

void enableReceiveDMAtoIdle_CFG(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
	  HAL_UARTEx_ReceiveToIdle_DMA(__SCFG_UART, Rxbuff_CFG, Rx_SIZE_CFG);
 8000c50:	4b09      	ldr	r3, [pc, #36]	; (8000c78 <enableReceiveDMAtoIdle_CFG+0x2c>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c58:	4908      	ldr	r1, [pc, #32]	; (8000c7c <enableReceiveDMAtoIdle_CFG+0x30>)
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f009 f82f 	bl	8009cbe <HAL_UARTEx_ReceiveToIdle_DMA>
	  __HAL_DMA_DISABLE_IT(__SCFG_DMA_UART,DMA_IT_HT);
 8000c60:	4b07      	ldr	r3, [pc, #28]	; (8000c80 <enableReceiveDMAtoIdle_CFG+0x34>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	681a      	ldr	r2, [r3, #0]
 8000c68:	4b05      	ldr	r3, [pc, #20]	; (8000c80 <enableReceiveDMAtoIdle_CFG+0x34>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	f022 0204 	bic.w	r2, r2, #4
 8000c72:	601a      	str	r2, [r3, #0]
}
 8000c74:	bf00      	nop
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	20000600 	.word	0x20000600
 8000c7c:	20000608 	.word	0x20000608
 8000c80:	20000604 	.word	0x20000604

08000c84 <Serial_CFG_Callback>:
void Serial_CFG_Callback(uint16_t Size)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b084      	sub	sp, #16
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	80fb      	strh	r3, [r7, #6]

	oldPos_CFG = newPos_CFG;  // Update the last position before copying new data
 8000c8e:	4b43      	ldr	r3, [pc, #268]	; (8000d9c <Serial_CFG_Callback+0x118>)
 8000c90:	881a      	ldrh	r2, [r3, #0]
 8000c92:	4b43      	ldr	r3, [pc, #268]	; (8000da0 <Serial_CFG_Callback+0x11c>)
 8000c94:	801a      	strh	r2, [r3, #0]

	/* If the data in large and it is about to exceed the buffer size, we have to route it to the start of the buffer
	 * This is to maintain the circular buffer
	 * The old data in the main buffer will be overlapped
	 */
	if (oldPos_CFG+Size > Main_SIZE_CFG)  // If the current position + new data size is greater than the main buffer
 8000c96:	4b42      	ldr	r3, [pc, #264]	; (8000da0 <Serial_CFG_Callback+0x11c>)
 8000c98:	881b      	ldrh	r3, [r3, #0]
 8000c9a:	461a      	mov	r2, r3
 8000c9c:	88fb      	ldrh	r3, [r7, #6]
 8000c9e:	4413      	add	r3, r2
 8000ca0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ca4:	dd23      	ble.n	8000cee <Serial_CFG_Callback+0x6a>
	{
		uint8_t datatocopy = Main_SIZE_CFG-oldPos_CFG;  // find out how much space is left in the main buffer
 8000ca6:	4b3e      	ldr	r3, [pc, #248]	; (8000da0 <Serial_CFG_Callback+0x11c>)
 8000ca8:	881b      	ldrh	r3, [r3, #0]
 8000caa:	b2db      	uxtb	r3, r3
 8000cac:	425b      	negs	r3, r3
 8000cae:	73fb      	strb	r3, [r7, #15]
		memcpy ((uint8_t *)Mainbuff_CFG+oldPos_CFG, (uint8_t *)Rxbuff_CFG, datatocopy);  // copy data in that remaining space
 8000cb0:	4b3b      	ldr	r3, [pc, #236]	; (8000da0 <Serial_CFG_Callback+0x11c>)
 8000cb2:	881b      	ldrh	r3, [r3, #0]
 8000cb4:	461a      	mov	r2, r3
 8000cb6:	4b3b      	ldr	r3, [pc, #236]	; (8000da4 <Serial_CFG_Callback+0x120>)
 8000cb8:	4413      	add	r3, r2
 8000cba:	7bfa      	ldrb	r2, [r7, #15]
 8000cbc:	493a      	ldr	r1, [pc, #232]	; (8000da8 <Serial_CFG_Callback+0x124>)
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f00a f8c4 	bl	800ae4c <memcpy>

		oldPos_CFG = 0;  // point to the start of the buffer
 8000cc4:	4b36      	ldr	r3, [pc, #216]	; (8000da0 <Serial_CFG_Callback+0x11c>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	801a      	strh	r2, [r3, #0]
		memcpy ((uint8_t *)Mainbuff_CFG, (uint8_t *)Rxbuff_CFG+datatocopy, (Size-datatocopy));  // copy the remaining data
 8000cca:	7bfb      	ldrb	r3, [r7, #15]
 8000ccc:	4a36      	ldr	r2, [pc, #216]	; (8000da8 <Serial_CFG_Callback+0x124>)
 8000cce:	1899      	adds	r1, r3, r2
 8000cd0:	88fa      	ldrh	r2, [r7, #6]
 8000cd2:	7bfb      	ldrb	r3, [r7, #15]
 8000cd4:	1ad3      	subs	r3, r2, r3
 8000cd6:	461a      	mov	r2, r3
 8000cd8:	4832      	ldr	r0, [pc, #200]	; (8000da4 <Serial_CFG_Callback+0x120>)
 8000cda:	f00a f8b7 	bl	800ae4c <memcpy>
		newPos_CFG = (Size-datatocopy);  // update the position
 8000cde:	7bfb      	ldrb	r3, [r7, #15]
 8000ce0:	b29b      	uxth	r3, r3
 8000ce2:	88fa      	ldrh	r2, [r7, #6]
 8000ce4:	1ad3      	subs	r3, r2, r3
 8000ce6:	b29a      	uxth	r2, r3
 8000ce8:	4b2c      	ldr	r3, [pc, #176]	; (8000d9c <Serial_CFG_Callback+0x118>)
 8000cea:	801a      	strh	r2, [r3, #0]
 8000cec:	e010      	b.n	8000d10 <Serial_CFG_Callback+0x8c>
	/* if the current position + new data size is less than the main buffer
	 * we will simply copy the data into the buffer and update the position
	 */
	else
	{
		memcpy ((uint8_t *)Mainbuff_CFG+oldPos_CFG, (uint8_t *)Rxbuff_CFG, Size);
 8000cee:	4b2c      	ldr	r3, [pc, #176]	; (8000da0 <Serial_CFG_Callback+0x11c>)
 8000cf0:	881b      	ldrh	r3, [r3, #0]
 8000cf2:	461a      	mov	r2, r3
 8000cf4:	4b2b      	ldr	r3, [pc, #172]	; (8000da4 <Serial_CFG_Callback+0x120>)
 8000cf6:	4413      	add	r3, r2
 8000cf8:	88fa      	ldrh	r2, [r7, #6]
 8000cfa:	492b      	ldr	r1, [pc, #172]	; (8000da8 <Serial_CFG_Callback+0x124>)
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f00a f8a5 	bl	800ae4c <memcpy>
		newPos_CFG = Size+oldPos_CFG;
 8000d02:	4b27      	ldr	r3, [pc, #156]	; (8000da0 <Serial_CFG_Callback+0x11c>)
 8000d04:	881a      	ldrh	r2, [r3, #0]
 8000d06:	88fb      	ldrh	r3, [r7, #6]
 8000d08:	4413      	add	r3, r2
 8000d0a:	b29a      	uxth	r2, r3
 8000d0c:	4b23      	ldr	r3, [pc, #140]	; (8000d9c <Serial_CFG_Callback+0x118>)
 8000d0e:	801a      	strh	r2, [r3, #0]

	/* Update the position of the Head
	 * If the current position + new size is less then the buffer size, Head will update normally
	 * Or else the head will be at the new position from the beginning
	 */
	if (head_CFG+Size < Main_SIZE_CFG) head_CFG = head_CFG+Size;
 8000d10:	4b26      	ldr	r3, [pc, #152]	; (8000dac <Serial_CFG_Callback+0x128>)
 8000d12:	881b      	ldrh	r3, [r3, #0]
 8000d14:	461a      	mov	r2, r3
 8000d16:	88fb      	ldrh	r3, [r7, #6]
 8000d18:	4413      	add	r3, r2
 8000d1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d1e:	da07      	bge.n	8000d30 <Serial_CFG_Callback+0xac>
 8000d20:	4b22      	ldr	r3, [pc, #136]	; (8000dac <Serial_CFG_Callback+0x128>)
 8000d22:	881a      	ldrh	r2, [r3, #0]
 8000d24:	88fb      	ldrh	r3, [r7, #6]
 8000d26:	4413      	add	r3, r2
 8000d28:	b29a      	uxth	r2, r3
 8000d2a:	4b20      	ldr	r3, [pc, #128]	; (8000dac <Serial_CFG_Callback+0x128>)
 8000d2c:	801a      	strh	r2, [r3, #0]
 8000d2e:	e009      	b.n	8000d44 <Serial_CFG_Callback+0xc0>
	else head_CFG = head_CFG + Size - Main_SIZE_CFG;
 8000d30:	4b1e      	ldr	r3, [pc, #120]	; (8000dac <Serial_CFG_Callback+0x128>)
 8000d32:	881a      	ldrh	r2, [r3, #0]
 8000d34:	88fb      	ldrh	r3, [r7, #6]
 8000d36:	4413      	add	r3, r2
 8000d38:	b29b      	uxth	r3, r3
 8000d3a:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8000d3e:	b29a      	uxth	r2, r3
 8000d40:	4b1a      	ldr	r3, [pc, #104]	; (8000dac <Serial_CFG_Callback+0x128>)
 8000d42:	801a      	strh	r2, [r3, #0]

	if ( checkTaskflag(TASK_GET_GPS_TIME) )	{
 8000d44:	2006      	movs	r0, #6
 8000d46:	f003 fb05 	bl	8004354 <checkTaskflag>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d013      	beq.n	8000d78 <Serial_CFG_Callback+0xf4>
		memset(GPS_rxbuffer, 0, GPS_RXBUFF_MAXLEN);
 8000d50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d54:	2100      	movs	r1, #0
 8000d56:	4816      	ldr	r0, [pc, #88]	; (8000db0 <Serial_CFG_Callback+0x12c>)
 8000d58:	f00a f886 	bl	800ae68 <memset>
		memcpy(GPS_rxbuffer, Rxbuff_CFG, Size);
 8000d5c:	88fb      	ldrh	r3, [r7, #6]
 8000d5e:	461a      	mov	r2, r3
 8000d60:	4911      	ldr	r1, [pc, #68]	; (8000da8 <Serial_CFG_Callback+0x124>)
 8000d62:	4813      	ldr	r0, [pc, #76]	; (8000db0 <Serial_CFG_Callback+0x12c>)
 8000d64:	f00a f872 	bl	800ae4c <memcpy>
		GPS_size = Size;
 8000d68:	4a12      	ldr	r2, [pc, #72]	; (8000db4 <Serial_CFG_Callback+0x130>)
 8000d6a:	88fb      	ldrh	r3, [r7, #6]
 8000d6c:	8013      	strh	r3, [r2, #0]
		getGPS_time(__MY_RTC);
 8000d6e:	4b12      	ldr	r3, [pc, #72]	; (8000db8 <Serial_CFG_Callback+0x134>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4618      	mov	r0, r3
 8000d74:	f000 f826 	bl	8000dc4 <getGPS_time>
	}

	enableReceiveDMAtoIdle_CFG();
 8000d78:	f7ff ff68 	bl	8000c4c <enableReceiveDMAtoIdle_CFG>
	/*
	 * Processing data
	 */

	if (isWordinBuff(Rxbuff_CFG, Size, (uint8_t*)"MCFG+")) {
 8000d7c:	88fb      	ldrh	r3, [r7, #6]
 8000d7e:	4a0f      	ldr	r2, [pc, #60]	; (8000dbc <Serial_CFG_Callback+0x138>)
 8000d80:	4619      	mov	r1, r3
 8000d82:	4809      	ldr	r0, [pc, #36]	; (8000da8 <Serial_CFG_Callback+0x124>)
 8000d84:	f003 f9ee 	bl	8004164 <isWordinBuff>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d002      	beq.n	8000d94 <Serial_CFG_Callback+0x110>
		isSerialConfig = 1;
 8000d8e:	4b0c      	ldr	r3, [pc, #48]	; (8000dc0 <Serial_CFG_Callback+0x13c>)
 8000d90:	2201      	movs	r2, #1
 8000d92:	701a      	strb	r2, [r3, #0]
	}
}
 8000d94:	bf00      	nop
 8000d96:	3710      	adds	r7, #16
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	20000d0a 	.word	0x20000d0a
 8000da0:	20000d08 	.word	0x20000d08
 8000da4:	20000708 	.word	0x20000708
 8000da8:	20000608 	.word	0x20000608
 8000dac:	20000d0c 	.word	0x20000d0c
 8000db0:	20000b08 	.word	0x20000b08
 8000db4:	20000d0e 	.word	0x20000d0e
 8000db8:	20000d18 	.word	0x20000d18
 8000dbc:	0800d814 	.word	0x0800d814
 8000dc0:	20000d10 	.word	0x20000d10

08000dc4 <getGPS_time>:
{
	tail_CFG = head_CFG;
}

uint8_t getGPS_time(_RTC *myRTC)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b08c      	sub	sp, #48	; 0x30
 8000dc8:	af02      	add	r7, sp, #8
 8000dca:	6078      	str	r0, [r7, #4]
//	if (__MY_GPS->getFlag) return 0;
	if ( !DS3231_GetTime(myRTC) )		return 0;
 8000dcc:	6878      	ldr	r0, [r7, #4]
 8000dce:	f002 f8ef 	bl	8002fb0 <DS3231_GetTime>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	f083 0301 	eor.w	r3, r3, #1
 8000dd8:	b2db      	uxtb	r3, r3
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <getGPS_time+0x1e>
 8000dde:	2300      	movs	r3, #0
 8000de0:	e065      	b.n	8000eae <getGPS_time+0xea>
	uint16_t gpslen = GPS_size;
 8000de2:	4b35      	ldr	r3, [pc, #212]	; (8000eb8 <getGPS_time+0xf4>)
 8000de4:	881b      	ldrh	r3, [r3, #0]
 8000de6:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint8_t *currPos = isWordinBuff(GPS_rxbuffer, gpslen, (uint8_t*)"$GPRMC");
 8000de8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000dea:	4a34      	ldr	r2, [pc, #208]	; (8000ebc <getGPS_time+0xf8>)
 8000dec:	4619      	mov	r1, r3
 8000dee:	4834      	ldr	r0, [pc, #208]	; (8000ec0 <getGPS_time+0xfc>)
 8000df0:	f003 f9b8 	bl	8004164 <isWordinBuff>
 8000df4:	6238      	str	r0, [r7, #32]
	if ( currPos == NULL )	{
 8000df6:	6a3b      	ldr	r3, [r7, #32]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d101      	bne.n	8000e00 <getGPS_time+0x3c>
		return 0;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	e056      	b.n	8000eae <getGPS_time+0xea>
	}
	uint16_t remainlen = getRemainsize(currPos, GPS_rxbuffer, gpslen);
 8000e00:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000e02:	461a      	mov	r2, r3
 8000e04:	492e      	ldr	r1, [pc, #184]	; (8000ec0 <getGPS_time+0xfc>)
 8000e06:	6a38      	ldr	r0, [r7, #32]
 8000e08:	f003 fa2b 	bl	8004262 <getRemainsize>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	83fb      	strh	r3, [r7, #30]
	// Get time to buffer
	uint8_t timebuffer [10];
	if ( getBetween((uint8_t*)",", (uint8_t*)".", currPos, remainlen, timebuffer) != 6 )	{
 8000e10:	8bfa      	ldrh	r2, [r7, #30]
 8000e12:	f107 0314 	add.w	r3, r7, #20
 8000e16:	9300      	str	r3, [sp, #0]
 8000e18:	4613      	mov	r3, r2
 8000e1a:	6a3a      	ldr	r2, [r7, #32]
 8000e1c:	4929      	ldr	r1, [pc, #164]	; (8000ec4 <getGPS_time+0x100>)
 8000e1e:	482a      	ldr	r0, [pc, #168]	; (8000ec8 <getGPS_time+0x104>)
 8000e20:	f003 f9cc 	bl	80041bc <getBetween>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b06      	cmp	r3, #6
 8000e28:	d001      	beq.n	8000e2e <getGPS_time+0x6a>
		return 0;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	e03f      	b.n	8000eae <getGPS_time+0xea>
 8000e2e:	8abb      	ldrh	r3, [r7, #20]
	}
	// Convert time from buffer and save to myRTC
	uint8_t tmphour[3];
	uint8_t tmpmin[3];
	uint8_t tmpsec[3];
	memcpy(tmphour, timebuffer, 2);
 8000e30:	823b      	strh	r3, [r7, #16]
	memcpy(tmpmin, timebuffer + 2, 2);
 8000e32:	f107 0314 	add.w	r3, r7, #20
 8000e36:	3302      	adds	r3, #2
 8000e38:	881b      	ldrh	r3, [r3, #0]
 8000e3a:	b29b      	uxth	r3, r3
 8000e3c:	81bb      	strh	r3, [r7, #12]
	memcpy(tmpsec, timebuffer + 4, 2);
 8000e3e:	f107 0314 	add.w	r3, r7, #20
 8000e42:	3304      	adds	r3, #4
 8000e44:	881b      	ldrh	r3, [r3, #0]
 8000e46:	b29b      	uxth	r3, r3
 8000e48:	813b      	strh	r3, [r7, #8]
	myRTC->Hour = atoi((char*)tmphour) + (uint8_t)MY_TIME_ZONE;
 8000e4a:	f107 0310 	add.w	r3, r7, #16
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f009 fe9e 	bl	800ab90 <atoi>
 8000e54:	4603      	mov	r3, r0
 8000e56:	b2db      	uxtb	r3, r3
 8000e58:	3307      	adds	r3, #7
 8000e5a:	b2da      	uxtb	r2, r3
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	711a      	strb	r2, [r3, #4]
	myRTC->Min = atoi((char*)tmpmin);
 8000e60:	f107 030c 	add.w	r3, r7, #12
 8000e64:	4618      	mov	r0, r3
 8000e66:	f009 fe93 	bl	800ab90 <atoi>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	b2da      	uxtb	r2, r3
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	715a      	strb	r2, [r3, #5]
	myRTC->Sec = atoi((char*)tmpsec);
 8000e72:	f107 0308 	add.w	r3, r7, #8
 8000e76:	4618      	mov	r0, r3
 8000e78:	f009 fe8a 	bl	800ab90 <atoi>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	b2da      	uxtb	r2, r3
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	719a      	strb	r2, [r3, #6]
	if ( !DS3231_SetTime(myRTC) )	return 0;
 8000e84:	6878      	ldr	r0, [r7, #4]
 8000e86:	f002 f90f 	bl	80030a8 <DS3231_SetTime>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	f083 0301 	eor.w	r3, r3, #1
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <getGPS_time+0xd6>
 8000e96:	2300      	movs	r3, #0
 8000e98:	e009      	b.n	8000eae <getGPS_time+0xea>
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000e9a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e9e:	480b      	ldr	r0, [pc, #44]	; (8000ecc <getGPS_time+0x108>)
 8000ea0:	f006 fea2 	bl	8007be8 <HAL_GPIO_TogglePin>
	triggerTaskflag(TASK_GET_GPS_TIME, FLAG_DIS);
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	2006      	movs	r0, #6
 8000ea8:	f003 fb5a 	bl	8004560 <triggerTaskflag>
	return 1;
 8000eac:	2301      	movs	r3, #1
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3728      	adds	r7, #40	; 0x28
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	20000d0e 	.word	0x20000d0e
 8000ebc:	0800d878 	.word	0x0800d878
 8000ec0:	20000b08 	.word	0x20000b08
 8000ec4:	0800d880 	.word	0x0800d880
 8000ec8:	0800d884 	.word	0x0800d884
 8000ecc:	40010800 	.word	0x40010800

08000ed0 <Serial_log_string>:
{
	__SERIAL_LOG_UART = huart;
}

void Serial_log_string(char *string)
{
 8000ed0:	b590      	push	{r4, r7, lr}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(__SERIAL_LOG_UART, (uint8_t*)string, strlen(string), LOG_TIMEOUT);
 8000ed8:	4b08      	ldr	r3, [pc, #32]	; (8000efc <Serial_log_string+0x2c>)
 8000eda:	681c      	ldr	r4, [r3, #0]
 8000edc:	6878      	ldr	r0, [r7, #4]
 8000ede:	f7ff f935 	bl	800014c <strlen>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	b29a      	uxth	r2, r3
 8000ee6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eea:	6879      	ldr	r1, [r7, #4]
 8000eec:	4620      	mov	r0, r4
 8000eee:	f008 fe63 	bl	8009bb8 <HAL_UART_Transmit>
}
 8000ef2:	bf00      	nop
 8000ef4:	370c      	adds	r7, #12
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd90      	pop	{r4, r7, pc}
 8000efa:	bf00      	nop
 8000efc:	20000d1c 	.word	0x20000d1c

08000f00 <Serial_log_number>:
{
	HAL_UART_Transmit(__SERIAL_LOG_UART, buffer, buffersize, LOG_TIMEOUT);
}

void Serial_log_number(uint16_t number)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b086      	sub	sp, #24
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	4603      	mov	r3, r0
 8000f08:	80fb      	strh	r3, [r7, #6]
	uint8_t tmpbuffer[10];
	uint8_t len = sprintf( (char*)tmpbuffer, "%d", number);
 8000f0a:	88fa      	ldrh	r2, [r7, #6]
 8000f0c:	f107 030c 	add.w	r3, r7, #12
 8000f10:	4909      	ldr	r1, [pc, #36]	; (8000f38 <Serial_log_number+0x38>)
 8000f12:	4618      	mov	r0, r3
 8000f14:	f00a fb4c 	bl	800b5b0 <siprintf>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	75fb      	strb	r3, [r7, #23]
//	HAL_UART_Transmit_DMA(__SERIAL_LOG_UART, tmpbuffer, len);
	HAL_UART_Transmit(__SERIAL_LOG_UART, tmpbuffer, len, LOG_TIMEOUT);
 8000f1c:	4b07      	ldr	r3, [pc, #28]	; (8000f3c <Serial_log_number+0x3c>)
 8000f1e:	6818      	ldr	r0, [r3, #0]
 8000f20:	7dfb      	ldrb	r3, [r7, #23]
 8000f22:	b29a      	uxth	r2, r3
 8000f24:	f107 010c 	add.w	r1, r7, #12
 8000f28:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f2c:	f008 fe44 	bl	8009bb8 <HAL_UART_Transmit>
}
 8000f30:	bf00      	nop
 8000f32:	3718      	adds	r7, #24
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	0800d88c 	.word	0x0800d88c
 8000f3c:	20000d1c 	.word	0x20000d1c

08000f40 <initServerMsg>:

static Station_t *__MY_STATION;
static SMS_t *__MY_SMS;

void initServerMsg (Station_t *Station, SMS_t *mySMS)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
 8000f48:	6039      	str	r1, [r7, #0]
	__MY_STATION = Station;
 8000f4a:	4a05      	ldr	r2, [pc, #20]	; (8000f60 <initServerMsg+0x20>)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	6013      	str	r3, [r2, #0]
	__MY_SMS = mySMS;
 8000f50:	4a04      	ldr	r2, [pc, #16]	; (8000f64 <initServerMsg+0x24>)
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	6013      	str	r3, [r2, #0]
}
 8000f56:	bf00      	nop
 8000f58:	370c      	adds	r7, #12
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bc80      	pop	{r7}
 8000f5e:	4770      	bx	lr
 8000f60:	20001120 	.word	0x20001120
 8000f64:	20001124 	.word	0x20001124

08000f68 <buffer2num>:

uint32_t buffer2num(uint8_t *buffer)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
	return (buffer[0] << 24) | (buffer[1] << 16) | (buffer[2] << 8) | buffer[3];
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	061a      	lsls	r2, r3, #24
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	3301      	adds	r3, #1
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	041b      	lsls	r3, r3, #16
 8000f7e:	431a      	orrs	r2, r3
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	3302      	adds	r3, #2
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	021b      	lsls	r3, r3, #8
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	687a      	ldr	r2, [r7, #4]
 8000f8c:	3203      	adds	r2, #3
 8000f8e:	7812      	ldrb	r2, [r2, #0]
 8000f90:	4313      	orrs	r3, r2
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	370c      	adds	r7, #12
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bc80      	pop	{r7}
 8000f9a:	4770      	bx	lr

08000f9c <addCRCtoPack>:

uint8_t addCRCtoPack(uint8_t *dataBuff, uint8_t bufflen)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	460b      	mov	r3, r1
 8000fa6:	70fb      	strb	r3, [r7, #3]
	uint32_t crc;
//	MQTT_publish( (uint8_t*)TOPIC_PUB, dataBuff, bufflen);
	crc= crc32( (char*)dataBuff, bufflen);
 8000fa8:	78fb      	ldrb	r3, [r7, #3]
 8000faa:	4619      	mov	r1, r3
 8000fac:	6878      	ldr	r0, [r7, #4]
 8000fae:	f003 fc63 	bl	8004878 <crc32>
 8000fb2:	60f8      	str	r0, [r7, #12]

	uint8_t crc_buff[4];
	FourbytenumbertoBuff( crc, crc_buff);
 8000fb4:	f107 0308 	add.w	r3, r7, #8
 8000fb8:	4619      	mov	r1, r3
 8000fba:	68f8      	ldr	r0, [r7, #12]
 8000fbc:	f003 f97b 	bl	80042b6 <FourbytenumbertoBuff>

//	MQTT_publish( (uint8_t*)TOPIC_PUB, crc_buff, 4);

	memcpy(dataBuff+bufflen,crc_buff,4);
 8000fc0:	78fb      	ldrb	r3, [r7, #3]
 8000fc2:	687a      	ldr	r2, [r7, #4]
 8000fc4:	4413      	add	r3, r2
 8000fc6:	68ba      	ldr	r2, [r7, #8]
 8000fc8:	601a      	str	r2, [r3, #0]

	return 4;    // crc length
 8000fca:	2304      	movs	r3, #4
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	3710      	adds	r7, #16
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}

08000fd4 <addTimetobuff>:
uint8_t addTimetobuff(uint8_t *buff, uint16_t position)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b088      	sub	sp, #32
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
 8000fdc:	460b      	mov	r3, r1
 8000fde:	807b      	strh	r3, [r7, #2]
//	RTCtime.Month=11;
//	RTCtime.Date = 15;
//	RTCtime.Hour = 7;
//	RTCtime.Min = 56;
//	RTCtime.Sec = 35;
	if (DS3231_GetTime(&RTCtime))
 8000fe0:	f107 0310 	add.w	r3, r7, #16
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f001 ffe3 	bl	8002fb0 <DS3231_GetTime>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d014      	beq.n	800101a <addTimetobuff+0x46>
	{
		time_t epochtime = RTC2epochtime(&RTCtime);
 8000ff0:	f107 0310 	add.w	r3, r7, #16
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f001 ffb0 	bl	8002f5a <RTC2epochtime>
 8000ffa:	e9c7 0106 	strd	r0, r1, [r7, #24]
		uint8_t time_buff[4];
		FourbytenumbertoBuff((uint32_t)epochtime,time_buff);
 8000ffe:	69bb      	ldr	r3, [r7, #24]
 8001000:	f107 020c 	add.w	r2, r7, #12
 8001004:	4611      	mov	r1, r2
 8001006:	4618      	mov	r0, r3
 8001008:	f003 f955 	bl	80042b6 <FourbytenumbertoBuff>
		memcpy(buff+position,time_buff,4);
 800100c:	887b      	ldrh	r3, [r7, #2]
 800100e:	687a      	ldr	r2, [r7, #4]
 8001010:	4413      	add	r3, r2
 8001012:	68fa      	ldr	r2, [r7, #12]
 8001014:	601a      	str	r2, [r3, #0]
		return 1;
 8001016:	2301      	movs	r3, #1
 8001018:	e000      	b.n	800101c <addTimetobuff+0x48>
	}
	return 0;
 800101a:	2300      	movs	r3, #0
}
 800101c:	4618      	mov	r0, r3
 800101e:	3720      	adds	r7, #32
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}

08001024 <createPack>:

uint8_t createPack(PACK_t PackType, DATA_t DataType, CMD_t CMDType )
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b084      	sub	sp, #16
 8001028:	af00      	add	r7, sp, #0
 800102a:	4603      	mov	r3, r0
 800102c:	71fb      	strb	r3, [r7, #7]
 800102e:	460b      	mov	r3, r1
 8001030:	71bb      	strb	r3, [r7, #6]
 8001032:	4613      	mov	r3, r2
 8001034:	717b      	strb	r3, [r7, #5]
	memset(Pack_buff, 0, PACKBUFF_MAXLEN);
 8001036:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800103a:	2100      	movs	r1, #0
 800103c:	4817      	ldr	r0, [pc, #92]	; (800109c <createPack+0x78>)
 800103e:	f009 ff13 	bl	800ae68 <memset>
	uint8_t pack_len = 0;
 8001042:	2300      	movs	r3, #0
 8001044:	73fb      	strb	r3, [r7, #15]

	Pack_buff[pack_len++] = __MY_STATION->stID;
 8001046:	4b16      	ldr	r3, [pc, #88]	; (80010a0 <createPack+0x7c>)
 8001048:	681a      	ldr	r2, [r3, #0]
 800104a:	7bfb      	ldrb	r3, [r7, #15]
 800104c:	1c59      	adds	r1, r3, #1
 800104e:	73f9      	strb	r1, [r7, #15]
 8001050:	4619      	mov	r1, r3
 8001052:	7852      	ldrb	r2, [r2, #1]
 8001054:	4b11      	ldr	r3, [pc, #68]	; (800109c <createPack+0x78>)
 8001056:	545a      	strb	r2, [r3, r1]
	Pack_buff[pack_len++] = PackType;
 8001058:	7bfb      	ldrb	r3, [r7, #15]
 800105a:	1c5a      	adds	r2, r3, #1
 800105c:	73fa      	strb	r2, [r7, #15]
 800105e:	4619      	mov	r1, r3
 8001060:	4a0e      	ldr	r2, [pc, #56]	; (800109c <createPack+0x78>)
 8001062:	79fb      	ldrb	r3, [r7, #7]
 8001064:	5453      	strb	r3, [r2, r1]

	if ( DataType != DATA_NONE )
 8001066:	79bb      	ldrb	r3, [r7, #6]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d007      	beq.n	800107c <createPack+0x58>
	{
		Pack_buff[pack_len++] = DataType;
 800106c:	7bfb      	ldrb	r3, [r7, #15]
 800106e:	1c5a      	adds	r2, r3, #1
 8001070:	73fa      	strb	r2, [r7, #15]
 8001072:	4619      	mov	r1, r3
 8001074:	4a09      	ldr	r2, [pc, #36]	; (800109c <createPack+0x78>)
 8001076:	79bb      	ldrb	r3, [r7, #6]
 8001078:	5453      	strb	r3, [r2, r1]
 800107a:	e009      	b.n	8001090 <createPack+0x6c>
	}
	else if ( CMDType != CMD_NONE )
 800107c:	797b      	ldrb	r3, [r7, #5]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d006      	beq.n	8001090 <createPack+0x6c>
	{
		Pack_buff[pack_len++] = CMDType;
 8001082:	7bfb      	ldrb	r3, [r7, #15]
 8001084:	1c5a      	adds	r2, r3, #1
 8001086:	73fa      	strb	r2, [r7, #15]
 8001088:	4619      	mov	r1, r3
 800108a:	4a04      	ldr	r2, [pc, #16]	; (800109c <createPack+0x78>)
 800108c:	797b      	ldrb	r3, [r7, #5]
 800108e:	5453      	strb	r3, [r2, r1]
	}
	return pack_len;
 8001090:	7bfb      	ldrb	r3, [r7, #15]
}
 8001092:	4618      	mov	r0, r3
 8001094:	3710      	adds	r7, #16
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	20000d20 	.word	0x20000d20
 80010a0:	20001120 	.word	0x20001120

080010a4 <Serialize_SSnodedata>:

uint16_t Serialize_SSnodedata(uint8_t* Serial_buff, DATA_t dataType)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b084      	sub	sp, #16
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
 80010ac:	460b      	mov	r3, r1
 80010ae:	70fb      	strb	r3, [r7, #3]

	uint16_t buff_len = 0;
 80010b0:	2300      	movs	r3, #0
 80010b2:	81fb      	strh	r3, [r7, #14]
	Node * current =__MY_STATION->ssNode_list->head->next;
 80010b4:	4b54      	ldr	r3, [pc, #336]	; (8001208 <Serialize_SSnodedata+0x164>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	68db      	ldr	r3, [r3, #12]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80010be:	60bb      	str	r3, [r7, #8]
	while (current != __MY_STATION->ssNode_list->tail)
 80010c0:	e095      	b.n	80011ee <Serialize_SSnodedata+0x14a>
	{
		switch ( dataType ) {
 80010c2:	78fb      	ldrb	r3, [r7, #3]
 80010c4:	3b01      	subs	r3, #1
 80010c6:	2b06      	cmp	r3, #6
 80010c8:	f200 808b 	bhi.w	80011e2 <Serialize_SSnodedata+0x13e>
 80010cc:	a201      	add	r2, pc, #4	; (adr r2, 80010d4 <Serialize_SSnodedata+0x30>)
 80010ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010d2:	bf00      	nop
 80010d4:	0800112b 	.word	0x0800112b
 80010d8:	08001183 	.word	0x08001183
 80010dc:	080011e3 	.word	0x080011e3
 80010e0:	080010f1 	.word	0x080010f1
 80010e4:	080011a9 	.word	0x080011a9
 80010e8:	080011e3 	.word	0x080011e3
 80010ec:	080011e3 	.word	0x080011e3
		case DATA_REGISTER:
			Serial_buff[buff_len++] = current->SSnode.SSnode_ID;
 80010f0:	89fb      	ldrh	r3, [r7, #14]
 80010f2:	1c5a      	adds	r2, r3, #1
 80010f4:	81fa      	strh	r2, [r7, #14]
 80010f6:	461a      	mov	r2, r3
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	4413      	add	r3, r2
 80010fc:	68ba      	ldr	r2, [r7, #8]
 80010fe:	7812      	ldrb	r2, [r2, #0]
 8001100:	701a      	strb	r2, [r3, #0]
			Serial_buff[buff_len++]= current->SSnode.Battery;
 8001102:	68bb      	ldr	r3, [r7, #8]
 8001104:	885a      	ldrh	r2, [r3, #2]
 8001106:	89fb      	ldrh	r3, [r7, #14]
 8001108:	1c59      	adds	r1, r3, #1
 800110a:	81f9      	strh	r1, [r7, #14]
 800110c:	4619      	mov	r1, r3
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	440b      	add	r3, r1
 8001112:	b2d2      	uxtb	r2, r2
 8001114:	701a      	strb	r2, [r3, #0]
			Serial_buff[buff_len++]= current->SSnode.V_type;
 8001116:	89fb      	ldrh	r3, [r7, #14]
 8001118:	1c5a      	adds	r2, r3, #1
 800111a:	81fa      	strh	r2, [r7, #14]
 800111c:	461a      	mov	r2, r3
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4413      	add	r3, r2
 8001122:	68ba      	ldr	r2, [r7, #8]
 8001124:	7912      	ldrb	r2, [r2, #4]
 8001126:	701a      	strb	r2, [r3, #0]
			break;
 8001128:	e05e      	b.n	80011e8 <Serialize_SSnodedata+0x144>
		case DATA_PERIOD:
			Serial_buff[buff_len++] = current->SSnode.SSnode_ID;
 800112a:	89fb      	ldrh	r3, [r7, #14]
 800112c:	1c5a      	adds	r2, r3, #1
 800112e:	81fa      	strh	r2, [r7, #14]
 8001130:	461a      	mov	r2, r3
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4413      	add	r3, r2
 8001136:	68ba      	ldr	r2, [r7, #8]
 8001138:	7812      	ldrb	r2, [r2, #0]
 800113a:	701a      	strb	r2, [r3, #0]
			Serial_buff[buff_len++]= current->SSnode.Battery;
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	885a      	ldrh	r2, [r3, #2]
 8001140:	89fb      	ldrh	r3, [r7, #14]
 8001142:	1c59      	adds	r1, r3, #1
 8001144:	81f9      	strh	r1, [r7, #14]
 8001146:	4619      	mov	r1, r3
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	440b      	add	r3, r1
 800114c:	b2d2      	uxtb	r2, r2
 800114e:	701a      	strb	r2, [r3, #0]
			Serial_buff[buff_len++]= ( current->SSnode.V_value >> 8 ) & 0xFF;
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	88db      	ldrh	r3, [r3, #6]
 8001154:	b29b      	uxth	r3, r3
 8001156:	0a1b      	lsrs	r3, r3, #8
 8001158:	b29a      	uxth	r2, r3
 800115a:	89fb      	ldrh	r3, [r7, #14]
 800115c:	1c59      	adds	r1, r3, #1
 800115e:	81f9      	strh	r1, [r7, #14]
 8001160:	4619      	mov	r1, r3
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	440b      	add	r3, r1
 8001166:	b2d2      	uxtb	r2, r2
 8001168:	701a      	strb	r2, [r3, #0]
			Serial_buff[buff_len++]= current->SSnode.V_value & 0xFF;
 800116a:	68bb      	ldr	r3, [r7, #8]
 800116c:	88db      	ldrh	r3, [r3, #6]
 800116e:	b29a      	uxth	r2, r3
 8001170:	89fb      	ldrh	r3, [r7, #14]
 8001172:	1c59      	adds	r1, r3, #1
 8001174:	81f9      	strh	r1, [r7, #14]
 8001176:	4619      	mov	r1, r3
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	440b      	add	r3, r1
 800117c:	b2d2      	uxtb	r2, r2
 800117e:	701a      	strb	r2, [r3, #0]
			break;
 8001180:	e032      	b.n	80011e8 <Serialize_SSnodedata+0x144>
		case DATA_NETWREADY:
			Serial_buff[buff_len++] = current->SSnode.SSnode_ID;
 8001182:	89fb      	ldrh	r3, [r7, #14]
 8001184:	1c5a      	adds	r2, r3, #1
 8001186:	81fa      	strh	r2, [r7, #14]
 8001188:	461a      	mov	r2, r3
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4413      	add	r3, r2
 800118e:	68ba      	ldr	r2, [r7, #8]
 8001190:	7812      	ldrb	r2, [r2, #0]
 8001192:	701a      	strb	r2, [r3, #0]
			Serial_buff[buff_len++]= current->SSnode.Sensor_state;
 8001194:	89fb      	ldrh	r3, [r7, #14]
 8001196:	1c5a      	adds	r2, r3, #1
 8001198:	81fa      	strh	r2, [r7, #14]
 800119a:	461a      	mov	r2, r3
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	4413      	add	r3, r2
 80011a0:	68ba      	ldr	r2, [r7, #8]
 80011a2:	7a12      	ldrb	r2, [r2, #8]
 80011a4:	701a      	strb	r2, [r3, #0]
			break;
 80011a6:	e01f      	b.n	80011e8 <Serialize_SSnodedata+0x144>
		case DATA_CALIB:
			if (current->SSnode.dataCalibAvailable)	{
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	7a5b      	ldrb	r3, [r3, #9]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d01a      	beq.n	80011e6 <Serialize_SSnodedata+0x142>
				Serial_buff[buff_len++] = current->SSnode.SSnode_ID;
 80011b0:	89fb      	ldrh	r3, [r7, #14]
 80011b2:	1c5a      	adds	r2, r3, #1
 80011b4:	81fa      	strh	r2, [r7, #14]
 80011b6:	461a      	mov	r2, r3
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	4413      	add	r3, r2
 80011bc:	68ba      	ldr	r2, [r7, #8]
 80011be:	7812      	ldrb	r2, [r2, #0]
 80011c0:	701a      	strb	r2, [r3, #0]
				memcpy(Serial_buff + buff_len, current->SSnode.dataCalibBuffer, 100);
 80011c2:	89fb      	ldrh	r3, [r7, #14]
 80011c4:	687a      	ldr	r2, [r7, #4]
 80011c6:	18d0      	adds	r0, r2, r3
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	330c      	adds	r3, #12
 80011cc:	2264      	movs	r2, #100	; 0x64
 80011ce:	4619      	mov	r1, r3
 80011d0:	f009 fe3c 	bl	800ae4c <memcpy>
				buff_len += 100;
 80011d4:	89fb      	ldrh	r3, [r7, #14]
 80011d6:	3364      	adds	r3, #100	; 0x64
 80011d8:	81fb      	strh	r3, [r7, #14]
				current->SSnode.sentDatacalib = 1;
 80011da:	68bb      	ldr	r3, [r7, #8]
 80011dc:	2201      	movs	r2, #1
 80011de:	729a      	strb	r2, [r3, #10]
			}
			break;
 80011e0:	e001      	b.n	80011e6 <Serialize_SSnodedata+0x142>
		case DATA_AFTERCALIB:
			break;
		default:
			break;
 80011e2:	bf00      	nop
 80011e4:	e000      	b.n	80011e8 <Serialize_SSnodedata+0x144>
			break;
 80011e6:	bf00      	nop
		}
		current = current->next;
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80011ec:	60bb      	str	r3, [r7, #8]
	while (current != __MY_STATION->ssNode_list->tail)
 80011ee:	4b06      	ldr	r3, [pc, #24]	; (8001208 <Serialize_SSnodedata+0x164>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	68db      	ldr	r3, [r3, #12]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	68ba      	ldr	r2, [r7, #8]
 80011f8:	429a      	cmp	r2, r3
 80011fa:	f47f af62 	bne.w	80010c2 <Serialize_SSnodedata+0x1e>
	}
//	Serial_buff[buff_len] = '\0';
	return buff_len;
 80011fe:	89fb      	ldrh	r3, [r7, #14]
}
 8001200:	4618      	mov	r0, r3
 8001202:	3710      	adds	r7, #16
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	20001120 	.word	0x20001120

0800120c <Serialize_Stationdata>:

uint8_t Serialize_Stationdata( uint8_t *Buffer, DATA_t dataType)
{
 800120c:	b590      	push	{r4, r7, lr}
 800120e:	b085      	sub	sp, #20
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	460b      	mov	r3, r1
 8001216:	70fb      	strb	r3, [r7, #3]
	uint8_t buff_len = 0;
 8001218:	2300      	movs	r3, #0
 800121a:	73fb      	strb	r3, [r7, #15]
	switch (dataType) {
 800121c:	78fb      	ldrb	r3, [r7, #3]
 800121e:	3b01      	subs	r3, #1
 8001220:	2b08      	cmp	r3, #8
 8001222:	f200 8107 	bhi.w	8001434 <Serialize_Stationdata+0x228>
 8001226:	a201      	add	r2, pc, #4	; (adr r2, 800122c <Serialize_Stationdata+0x20>)
 8001228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800122c:	080012ed 	.word	0x080012ed
 8001230:	080012c7 	.word	0x080012c7
 8001234:	08001435 	.word	0x08001435
 8001238:	08001251 	.word	0x08001251
 800123c:	08001363 	.word	0x08001363
 8001240:	08001435 	.word	0x08001435
 8001244:	080013d9 	.word	0x080013d9
 8001248:	0800140b 	.word	0x0800140b
 800124c:	0800141f 	.word	0x0800141f
		case DATA_REGISTER:
			Buffer[buff_len++] = __MY_STATION->stID;
 8001250:	4b7b      	ldr	r3, [pc, #492]	; (8001440 <Serialize_Stationdata+0x234>)
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	7bfb      	ldrb	r3, [r7, #15]
 8001256:	1c59      	adds	r1, r3, #1
 8001258:	73f9      	strb	r1, [r7, #15]
 800125a:	4619      	mov	r1, r3
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	440b      	add	r3, r1
 8001260:	7852      	ldrb	r2, [r2, #1]
 8001262:	701a      	strb	r2, [r3, #0]
			Buffer[buff_len++] = (uint8_t)( ( __MY_STATION->stCurrent >> 8 ) & 0xFF);
 8001264:	4b76      	ldr	r3, [pc, #472]	; (8001440 <Serialize_Stationdata+0x234>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	885b      	ldrh	r3, [r3, #2]
 800126a:	0a1b      	lsrs	r3, r3, #8
 800126c:	b29a      	uxth	r2, r3
 800126e:	7bfb      	ldrb	r3, [r7, #15]
 8001270:	1c59      	adds	r1, r3, #1
 8001272:	73f9      	strb	r1, [r7, #15]
 8001274:	4619      	mov	r1, r3
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	440b      	add	r3, r1
 800127a:	b2d2      	uxtb	r2, r2
 800127c:	701a      	strb	r2, [r3, #0]
			Buffer[buff_len++] = (uint8_t)( __MY_STATION->stCurrent & 0xFF );
 800127e:	4b70      	ldr	r3, [pc, #448]	; (8001440 <Serialize_Stationdata+0x234>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	885a      	ldrh	r2, [r3, #2]
 8001284:	7bfb      	ldrb	r3, [r7, #15]
 8001286:	1c59      	adds	r1, r3, #1
 8001288:	73f9      	strb	r1, [r7, #15]
 800128a:	4619      	mov	r1, r3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	440b      	add	r3, r1
 8001290:	b2d2      	uxtb	r2, r2
 8001292:	701a      	strb	r2, [r3, #0]
			Buffer[buff_len++] = (uint8_t)( ( __MY_STATION->stVoltage >> 8 ) & 0xFF );
 8001294:	4b6a      	ldr	r3, [pc, #424]	; (8001440 <Serialize_Stationdata+0x234>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	889b      	ldrh	r3, [r3, #4]
 800129a:	0a1b      	lsrs	r3, r3, #8
 800129c:	b29a      	uxth	r2, r3
 800129e:	7bfb      	ldrb	r3, [r7, #15]
 80012a0:	1c59      	adds	r1, r3, #1
 80012a2:	73f9      	strb	r1, [r7, #15]
 80012a4:	4619      	mov	r1, r3
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	440b      	add	r3, r1
 80012aa:	b2d2      	uxtb	r2, r2
 80012ac:	701a      	strb	r2, [r3, #0]
			Buffer[buff_len++] = (uint8_t)( __MY_STATION->stVoltage & 0xFF );
 80012ae:	4b64      	ldr	r3, [pc, #400]	; (8001440 <Serialize_Stationdata+0x234>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	889a      	ldrh	r2, [r3, #4]
 80012b4:	7bfb      	ldrb	r3, [r7, #15]
 80012b6:	1c59      	adds	r1, r3, #1
 80012b8:	73f9      	strb	r1, [r7, #15]
 80012ba:	4619      	mov	r1, r3
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	440b      	add	r3, r1
 80012c0:	b2d2      	uxtb	r2, r2
 80012c2:	701a      	strb	r2, [r3, #0]
			break;
 80012c4:	e0b7      	b.n	8001436 <Serialize_Stationdata+0x22a>
		case DATA_NETWREADY:
			Buffer[buff_len++] = __MY_STATION->stID;
 80012c6:	4b5e      	ldr	r3, [pc, #376]	; (8001440 <Serialize_Stationdata+0x234>)
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	7bfb      	ldrb	r3, [r7, #15]
 80012cc:	1c59      	adds	r1, r3, #1
 80012ce:	73f9      	strb	r1, [r7, #15]
 80012d0:	4619      	mov	r1, r3
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	440b      	add	r3, r1
 80012d6:	7852      	ldrb	r2, [r2, #1]
 80012d8:	701a      	strb	r2, [r3, #0]
			Buffer[buff_len++] = (uint8_t) ACTIVE;
 80012da:	7bfb      	ldrb	r3, [r7, #15]
 80012dc:	1c5a      	adds	r2, r3, #1
 80012de:	73fa      	strb	r2, [r7, #15]
 80012e0:	461a      	mov	r2, r3
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4413      	add	r3, r2
 80012e6:	2201      	movs	r2, #1
 80012e8:	701a      	strb	r2, [r3, #0]
			break;
 80012ea:	e0a4      	b.n	8001436 <Serialize_Stationdata+0x22a>
		case DATA_PERIOD:
			Buffer[buff_len++] = __MY_STATION->stID;
 80012ec:	4b54      	ldr	r3, [pc, #336]	; (8001440 <Serialize_Stationdata+0x234>)
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	7bfb      	ldrb	r3, [r7, #15]
 80012f2:	1c59      	adds	r1, r3, #1
 80012f4:	73f9      	strb	r1, [r7, #15]
 80012f6:	4619      	mov	r1, r3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	440b      	add	r3, r1
 80012fc:	7852      	ldrb	r2, [r2, #1]
 80012fe:	701a      	strb	r2, [r3, #0]
			Buffer[buff_len++] = (uint8_t)( ( __MY_STATION->stCurrent >> 8 ) & 0xFF);
 8001300:	4b4f      	ldr	r3, [pc, #316]	; (8001440 <Serialize_Stationdata+0x234>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	885b      	ldrh	r3, [r3, #2]
 8001306:	0a1b      	lsrs	r3, r3, #8
 8001308:	b29a      	uxth	r2, r3
 800130a:	7bfb      	ldrb	r3, [r7, #15]
 800130c:	1c59      	adds	r1, r3, #1
 800130e:	73f9      	strb	r1, [r7, #15]
 8001310:	4619      	mov	r1, r3
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	440b      	add	r3, r1
 8001316:	b2d2      	uxtb	r2, r2
 8001318:	701a      	strb	r2, [r3, #0]
			Buffer[buff_len++] = (uint8_t)( __MY_STATION->stCurrent & 0xFF );
 800131a:	4b49      	ldr	r3, [pc, #292]	; (8001440 <Serialize_Stationdata+0x234>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	885a      	ldrh	r2, [r3, #2]
 8001320:	7bfb      	ldrb	r3, [r7, #15]
 8001322:	1c59      	adds	r1, r3, #1
 8001324:	73f9      	strb	r1, [r7, #15]
 8001326:	4619      	mov	r1, r3
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	440b      	add	r3, r1
 800132c:	b2d2      	uxtb	r2, r2
 800132e:	701a      	strb	r2, [r3, #0]
			Buffer[buff_len++] = (uint8_t)( ( __MY_STATION->stVoltage >> 8 ) & 0xFF );
 8001330:	4b43      	ldr	r3, [pc, #268]	; (8001440 <Serialize_Stationdata+0x234>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	889b      	ldrh	r3, [r3, #4]
 8001336:	0a1b      	lsrs	r3, r3, #8
 8001338:	b29a      	uxth	r2, r3
 800133a:	7bfb      	ldrb	r3, [r7, #15]
 800133c:	1c59      	adds	r1, r3, #1
 800133e:	73f9      	strb	r1, [r7, #15]
 8001340:	4619      	mov	r1, r3
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	440b      	add	r3, r1
 8001346:	b2d2      	uxtb	r2, r2
 8001348:	701a      	strb	r2, [r3, #0]
			Buffer[buff_len++] = (uint8_t)( __MY_STATION->stVoltage & 0xFF );
 800134a:	4b3d      	ldr	r3, [pc, #244]	; (8001440 <Serialize_Stationdata+0x234>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	889a      	ldrh	r2, [r3, #4]
 8001350:	7bfb      	ldrb	r3, [r7, #15]
 8001352:	1c59      	adds	r1, r3, #1
 8001354:	73f9      	strb	r1, [r7, #15]
 8001356:	4619      	mov	r1, r3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	440b      	add	r3, r1
 800135c:	b2d2      	uxtb	r2, r2
 800135e:	701a      	strb	r2, [r3, #0]
			break;
 8001360:	e069      	b.n	8001436 <Serialize_Stationdata+0x22a>
		case DATA_CALIB:
			Buffer[buff_len++] = __MY_STATION->stID;
 8001362:	4b37      	ldr	r3, [pc, #220]	; (8001440 <Serialize_Stationdata+0x234>)
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	7bfb      	ldrb	r3, [r7, #15]
 8001368:	1c59      	adds	r1, r3, #1
 800136a:	73f9      	strb	r1, [r7, #15]
 800136c:	4619      	mov	r1, r3
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	440b      	add	r3, r1
 8001372:	7852      	ldrb	r2, [r2, #1]
 8001374:	701a      	strb	r2, [r3, #0]
			Buffer[buff_len++] = (uint8_t)( ( __MY_STATION->stCurrent >> 8 ) & 0xFF);
 8001376:	4b32      	ldr	r3, [pc, #200]	; (8001440 <Serialize_Stationdata+0x234>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	885b      	ldrh	r3, [r3, #2]
 800137c:	0a1b      	lsrs	r3, r3, #8
 800137e:	b29a      	uxth	r2, r3
 8001380:	7bfb      	ldrb	r3, [r7, #15]
 8001382:	1c59      	adds	r1, r3, #1
 8001384:	73f9      	strb	r1, [r7, #15]
 8001386:	4619      	mov	r1, r3
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	440b      	add	r3, r1
 800138c:	b2d2      	uxtb	r2, r2
 800138e:	701a      	strb	r2, [r3, #0]
			Buffer[buff_len++] = (uint8_t)( __MY_STATION->stCurrent & 0xFF );
 8001390:	4b2b      	ldr	r3, [pc, #172]	; (8001440 <Serialize_Stationdata+0x234>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	885a      	ldrh	r2, [r3, #2]
 8001396:	7bfb      	ldrb	r3, [r7, #15]
 8001398:	1c59      	adds	r1, r3, #1
 800139a:	73f9      	strb	r1, [r7, #15]
 800139c:	4619      	mov	r1, r3
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	440b      	add	r3, r1
 80013a2:	b2d2      	uxtb	r2, r2
 80013a4:	701a      	strb	r2, [r3, #0]
			Buffer[buff_len++] = (uint8_t)( ( __MY_STATION->stVoltage >> 8 ) & 0xFF );
 80013a6:	4b26      	ldr	r3, [pc, #152]	; (8001440 <Serialize_Stationdata+0x234>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	889b      	ldrh	r3, [r3, #4]
 80013ac:	0a1b      	lsrs	r3, r3, #8
 80013ae:	b29a      	uxth	r2, r3
 80013b0:	7bfb      	ldrb	r3, [r7, #15]
 80013b2:	1c59      	adds	r1, r3, #1
 80013b4:	73f9      	strb	r1, [r7, #15]
 80013b6:	4619      	mov	r1, r3
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	440b      	add	r3, r1
 80013bc:	b2d2      	uxtb	r2, r2
 80013be:	701a      	strb	r2, [r3, #0]
			Buffer[buff_len++] = (uint8_t)( __MY_STATION->stVoltage & 0xFF );
 80013c0:	4b1f      	ldr	r3, [pc, #124]	; (8001440 <Serialize_Stationdata+0x234>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	889a      	ldrh	r2, [r3, #4]
 80013c6:	7bfb      	ldrb	r3, [r7, #15]
 80013c8:	1c59      	adds	r1, r3, #1
 80013ca:	73f9      	strb	r1, [r7, #15]
 80013cc:	4619      	mov	r1, r3
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	440b      	add	r3, r1
 80013d2:	b2d2      	uxtb	r2, r2
 80013d4:	701a      	strb	r2, [r3, #0]
			break;
 80013d6:	e02e      	b.n	8001436 <Serialize_Stationdata+0x22a>
		case DATA_AFTERCALIB:
			Buffer[buff_len++] = (uint8_t)( ( __MY_STATION->stCurrent >> 8 ) & 0xFF);
 80013d8:	4b19      	ldr	r3, [pc, #100]	; (8001440 <Serialize_Stationdata+0x234>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	885b      	ldrh	r3, [r3, #2]
 80013de:	0a1b      	lsrs	r3, r3, #8
 80013e0:	b29a      	uxth	r2, r3
 80013e2:	7bfb      	ldrb	r3, [r7, #15]
 80013e4:	1c59      	adds	r1, r3, #1
 80013e6:	73f9      	strb	r1, [r7, #15]
 80013e8:	4619      	mov	r1, r3
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	440b      	add	r3, r1
 80013ee:	b2d2      	uxtb	r2, r2
 80013f0:	701a      	strb	r2, [r3, #0]
			Buffer[buff_len++] = (uint8_t)( __MY_STATION->stCurrent & 0xFF );
 80013f2:	4b13      	ldr	r3, [pc, #76]	; (8001440 <Serialize_Stationdata+0x234>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	885a      	ldrh	r2, [r3, #2]
 80013f8:	7bfb      	ldrb	r3, [r7, #15]
 80013fa:	1c59      	adds	r1, r3, #1
 80013fc:	73f9      	strb	r1, [r7, #15]
 80013fe:	4619      	mov	r1, r3
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	440b      	add	r3, r1
 8001404:	b2d2      	uxtb	r2, r2
 8001406:	701a      	strb	r2, [r3, #0]
			break;
 8001408:	e015      	b.n	8001436 <Serialize_Stationdata+0x22a>
		case DATA_MBA_STATE:
			Buffer[buff_len++] = (uint8_t) (__MY_STATION->MBAstate);
 800140a:	4b0d      	ldr	r3, [pc, #52]	; (8001440 <Serialize_Stationdata+0x234>)
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	7bfb      	ldrb	r3, [r7, #15]
 8001410:	1c59      	adds	r1, r3, #1
 8001412:	73f9      	strb	r1, [r7, #15]
 8001414:	4619      	mov	r1, r3
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	440b      	add	r3, r1
 800141a:	7992      	ldrb	r2, [r2, #6]
 800141c:	701a      	strb	r2, [r3, #0]
		case DATA_STEP_REACH_LIMIT:
			Buffer[buff_len++] = (uint8_t)getLimit();
 800141e:	7bfb      	ldrb	r3, [r7, #15]
 8001420:	1c5a      	adds	r2, r3, #1
 8001422:	73fa      	strb	r2, [r7, #15]
 8001424:	461a      	mov	r2, r3
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	189c      	adds	r4, r3, r2
 800142a:	f001 fa99 	bl	8002960 <getLimit>
 800142e:	4603      	mov	r3, r0
 8001430:	7023      	strb	r3, [r4, #0]
			break;
 8001432:	e000      	b.n	8001436 <Serialize_Stationdata+0x22a>
		default:
			break;
 8001434:	bf00      	nop
	}

	return buff_len;
 8001436:	7bfb      	ldrb	r3, [r7, #15]
}
 8001438:	4618      	mov	r0, r3
 800143a:	3714      	adds	r7, #20
 800143c:	46bd      	mov	sp, r7
 800143e:	bd90      	pop	{r4, r7, pc}
 8001440:	20001120 	.word	0x20001120

08001444 <Serialize_Data>:
uint8_t Serialize_Data(uint8_t *databuff, DATA_t dataType)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b084      	sub	sp, #16
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	460b      	mov	r3, r1
 800144e:	70fb      	strb	r3, [r7, #3]
	uint16_t data_len = 0 ;
 8001450:	2300      	movs	r3, #0
 8001452:	81fb      	strh	r3, [r7, #14]
	data_len = Serialize_Stationdata(databuff, dataType );
 8001454:	78fb      	ldrb	r3, [r7, #3]
 8001456:	4619      	mov	r1, r3
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	f7ff fed7 	bl	800120c <Serialize_Stationdata>
 800145e:	4603      	mov	r3, r0
 8001460:	81fb      	strh	r3, [r7, #14]
	data_len += Serialize_SSnodedata(databuff + data_len, dataType);
 8001462:	89fb      	ldrh	r3, [r7, #14]
 8001464:	687a      	ldr	r2, [r7, #4]
 8001466:	4413      	add	r3, r2
 8001468:	78fa      	ldrb	r2, [r7, #3]
 800146a:	4611      	mov	r1, r2
 800146c:	4618      	mov	r0, r3
 800146e:	f7ff fe19 	bl	80010a4 <Serialize_SSnodedata>
 8001472:	4603      	mov	r3, r0
 8001474:	461a      	mov	r2, r3
 8001476:	89fb      	ldrh	r3, [r7, #14]
 8001478:	4413      	add	r3, r2
 800147a:	81fb      	strh	r3, [r7, #14]
	if ( !addTimetobuff( databuff, data_len ) )		return 0;
 800147c:	89fb      	ldrh	r3, [r7, #14]
 800147e:	4619      	mov	r1, r3
 8001480:	6878      	ldr	r0, [r7, #4]
 8001482:	f7ff fda7 	bl	8000fd4 <addTimetobuff>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d101      	bne.n	8001490 <Serialize_Data+0x4c>
 800148c:	2300      	movs	r3, #0
 800148e:	e004      	b.n	800149a <Serialize_Data+0x56>
	data_len += 4;      // 4 bytes of time + buffer length
 8001490:	89fb      	ldrh	r3, [r7, #14]
 8001492:	3304      	adds	r3, #4
 8001494:	81fb      	strh	r3, [r7, #14]
	return data_len;
 8001496:	89fb      	ldrh	r3, [r7, #14]
 8001498:	b2db      	uxtb	r3, r3
}
 800149a:	4618      	mov	r0, r3
 800149c:	3710      	adds	r7, #16
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}

080014a2 <addDatatoPack>:

uint8_t addDatatoPack(uint8_t *Pack, uint16_t Pack_len, uint8_t *Databuff, uint16_t dataLen)
{
 80014a2:	b580      	push	{r7, lr}
 80014a4:	b084      	sub	sp, #16
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	60f8      	str	r0, [r7, #12]
 80014aa:	607a      	str	r2, [r7, #4]
 80014ac:	461a      	mov	r2, r3
 80014ae:	460b      	mov	r3, r1
 80014b0:	817b      	strh	r3, [r7, #10]
 80014b2:	4613      	mov	r3, r2
 80014b4:	813b      	strh	r3, [r7, #8]
	memcpy(Pack+ Pack_len, Databuff, dataLen);
 80014b6:	897b      	ldrh	r3, [r7, #10]
 80014b8:	68fa      	ldr	r2, [r7, #12]
 80014ba:	4413      	add	r3, r2
 80014bc:	893a      	ldrh	r2, [r7, #8]
 80014be:	6879      	ldr	r1, [r7, #4]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f009 fcc3 	bl	800ae4c <memcpy>
	return dataLen ;
 80014c6:	893b      	ldrh	r3, [r7, #8]
 80014c8:	b2db      	uxtb	r3, r3
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3710      	adds	r7, #16
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
	...

080014d4 <Serialize_addtionaldata>:

uint8_t Serialize_addtionaldata( CMD_t CMDtype, uint8_t *Getbuffer, uint8_t *databuffer, uint16_t datalen, MBA_state_t MBAstate, Stepmotor_dir_t Stepm_DIR,
							Stepmotor_change_mode_t Stepm_changeMode, uint8_t Stepm_changeValue )
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b086      	sub	sp, #24
 80014d8:	af00      	add	r7, sp, #0
 80014da:	60b9      	str	r1, [r7, #8]
 80014dc:	607a      	str	r2, [r7, #4]
 80014de:	461a      	mov	r2, r3
 80014e0:	4603      	mov	r3, r0
 80014e2:	73fb      	strb	r3, [r7, #15]
 80014e4:	4613      	mov	r3, r2
 80014e6:	81bb      	strh	r3, [r7, #12]
	uint8_t buff_len = 0;
 80014e8:	2300      	movs	r3, #0
 80014ea:	75fb      	strb	r3, [r7, #23]
	switch ( CMDtype ) {
 80014ec:	7bfb      	ldrb	r3, [r7, #15]
 80014ee:	3b03      	subs	r3, #3
 80014f0:	2b08      	cmp	r3, #8
 80014f2:	f200 808d 	bhi.w	8001610 <Serialize_addtionaldata+0x13c>
 80014f6:	a201      	add	r2, pc, #4	; (adr r2, 80014fc <Serialize_addtionaldata+0x28>)
 80014f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014fc:	08001521 	.word	0x08001521
 8001500:	0800153d 	.word	0x0800153d
 8001504:	08001611 	.word	0x08001611
 8001508:	08001611 	.word	0x08001611
 800150c:	08001559 	.word	0x08001559
 8001510:	08001587 	.word	0x08001587
 8001514:	08001611 	.word	0x08001611
 8001518:	080015d9 	.word	0x080015d9
 800151c:	080015f5 	.word	0x080015f5
		case CMD_SMS_CALIB:
			// Time delay + Phone number
			memcpy(Getbuffer + buff_len, databuffer, datalen);
 8001520:	7dfb      	ldrb	r3, [r7, #23]
 8001522:	68ba      	ldr	r2, [r7, #8]
 8001524:	4413      	add	r3, r2
 8001526:	89ba      	ldrh	r2, [r7, #12]
 8001528:	6879      	ldr	r1, [r7, #4]
 800152a:	4618      	mov	r0, r3
 800152c:	f009 fc8e 	bl	800ae4c <memcpy>
			buff_len += datalen;
 8001530:	89bb      	ldrh	r3, [r7, #12]
 8001532:	b2da      	uxtb	r2, r3
 8001534:	7dfb      	ldrb	r3, [r7, #23]
 8001536:	4413      	add	r3, r2
 8001538:	75fb      	strb	r3, [r7, #23]
			break;
 800153a:	e06a      	b.n	8001612 <Serialize_addtionaldata+0x13e>
		case CMD_SMS_GETSTATUS:
			// Phone number	(11 byte)
			memcpy(Getbuffer + buff_len, databuffer, datalen);
 800153c:	7dfb      	ldrb	r3, [r7, #23]
 800153e:	68ba      	ldr	r2, [r7, #8]
 8001540:	4413      	add	r3, r2
 8001542:	89ba      	ldrh	r2, [r7, #12]
 8001544:	6879      	ldr	r1, [r7, #4]
 8001546:	4618      	mov	r0, r3
 8001548:	f009 fc80 	bl	800ae4c <memcpy>
			buff_len += datalen;
 800154c:	89bb      	ldrh	r3, [r7, #12]
 800154e:	b2da      	uxtb	r2, r3
 8001550:	7dfb      	ldrb	r3, [r7, #23]
 8001552:	4413      	add	r3, r2
 8001554:	75fb      	strb	r3, [r7, #23]
			break;
 8001556:	e05c      	b.n	8001612 <Serialize_addtionaldata+0x13e>
		case CMD_CTRL_MBA:
			// First byte: ON/OFF
			Getbuffer[buff_len++] = MBAstate;
 8001558:	7dfb      	ldrb	r3, [r7, #23]
 800155a:	1c5a      	adds	r2, r3, #1
 800155c:	75fa      	strb	r2, [r7, #23]
 800155e:	461a      	mov	r2, r3
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	4413      	add	r3, r2
 8001564:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001568:	701a      	strb	r2, [r3, #0]
			// Station ID list + time delay + phone number
			memcpy(Getbuffer + buff_len, databuffer, datalen);
 800156a:	7dfb      	ldrb	r3, [r7, #23]
 800156c:	68ba      	ldr	r2, [r7, #8]
 800156e:	4413      	add	r3, r2
 8001570:	89ba      	ldrh	r2, [r7, #12]
 8001572:	6879      	ldr	r1, [r7, #4]
 8001574:	4618      	mov	r0, r3
 8001576:	f009 fc69 	bl	800ae4c <memcpy>
			buff_len += datalen;
 800157a:	89bb      	ldrh	r3, [r7, #12]
 800157c:	b2da      	uxtb	r2, r3
 800157e:	7dfb      	ldrb	r3, [r7, #23]
 8001580:	4413      	add	r3, r2
 8001582:	75fb      	strb	r3, [r7, #23]
			break;
 8001584:	e045      	b.n	8001612 <Serialize_addtionaldata+0x13e>
		case CMD_CTRL_STEP_MOTOR:
			// First byte: Increase/Decrease (1 byte)
			Getbuffer[buff_len++] = Stepm_DIR ;
 8001586:	7dfb      	ldrb	r3, [r7, #23]
 8001588:	1c5a      	adds	r2, r3, #1
 800158a:	75fa      	strb	r2, [r7, #23]
 800158c:	461a      	mov	r2, r3
 800158e:	68bb      	ldr	r3, [r7, #8]
 8001590:	4413      	add	r3, r2
 8001592:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001596:	701a      	strb	r2, [r3, #0]
			// Second byte: Change Percentage/Step (1 byte)
			Getbuffer[buff_len++] = Stepm_changeMode;
 8001598:	7dfb      	ldrb	r3, [r7, #23]
 800159a:	1c5a      	adds	r2, r3, #1
 800159c:	75fa      	strb	r2, [r7, #23]
 800159e:	461a      	mov	r2, r3
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	4413      	add	r3, r2
 80015a4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80015a8:	701a      	strb	r2, [r3, #0]
			// Third byte : Value
			Getbuffer[buff_len++] = Stepm_changeValue;
 80015aa:	7dfb      	ldrb	r3, [r7, #23]
 80015ac:	1c5a      	adds	r2, r3, #1
 80015ae:	75fa      	strb	r2, [r7, #23]
 80015b0:	461a      	mov	r2, r3
 80015b2:	68bb      	ldr	r3, [r7, #8]
 80015b4:	4413      	add	r3, r2
 80015b6:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80015ba:	701a      	strb	r2, [r3, #0]
			// Station ID list + time delay + phone number
			memcpy(Getbuffer + buff_len, databuffer, datalen);
 80015bc:	7dfb      	ldrb	r3, [r7, #23]
 80015be:	68ba      	ldr	r2, [r7, #8]
 80015c0:	4413      	add	r3, r2
 80015c2:	89ba      	ldrh	r2, [r7, #12]
 80015c4:	6879      	ldr	r1, [r7, #4]
 80015c6:	4618      	mov	r0, r3
 80015c8:	f009 fc40 	bl	800ae4c <memcpy>
			buff_len += datalen;
 80015cc:	89bb      	ldrh	r3, [r7, #12]
 80015ce:	b2da      	uxtb	r2, r3
 80015d0:	7dfb      	ldrb	r3, [r7, #23]
 80015d2:	4413      	add	r3, r2
 80015d4:	75fb      	strb	r3, [r7, #23]
			break;
 80015d6:	e01c      	b.n	8001612 <Serialize_addtionaldata+0x13e>
		case CMD_GET_LATEST_DATA_SENSOR:
			// Sensor ID list + phone number
			memcpy(Getbuffer + buff_len, databuffer, datalen);
 80015d8:	7dfb      	ldrb	r3, [r7, #23]
 80015da:	68ba      	ldr	r2, [r7, #8]
 80015dc:	4413      	add	r3, r2
 80015de:	89ba      	ldrh	r2, [r7, #12]
 80015e0:	6879      	ldr	r1, [r7, #4]
 80015e2:	4618      	mov	r0, r3
 80015e4:	f009 fc32 	bl	800ae4c <memcpy>
			buff_len += datalen;
 80015e8:	89bb      	ldrh	r3, [r7, #12]
 80015ea:	b2da      	uxtb	r2, r3
 80015ec:	7dfb      	ldrb	r3, [r7, #23]
 80015ee:	4413      	add	r3, r2
 80015f0:	75fb      	strb	r3, [r7, #23]
			break;
 80015f2:	e00e      	b.n	8001612 <Serialize_addtionaldata+0x13e>
		case CMD_GET_LASTEST_DATA_STATION:
			// Station ID list + phone number
			memcpy(Getbuffer + buff_len, databuffer, datalen);
 80015f4:	7dfb      	ldrb	r3, [r7, #23]
 80015f6:	68ba      	ldr	r2, [r7, #8]
 80015f8:	4413      	add	r3, r2
 80015fa:	89ba      	ldrh	r2, [r7, #12]
 80015fc:	6879      	ldr	r1, [r7, #4]
 80015fe:	4618      	mov	r0, r3
 8001600:	f009 fc24 	bl	800ae4c <memcpy>
			buff_len += datalen;
 8001604:	89bb      	ldrh	r3, [r7, #12]
 8001606:	b2da      	uxtb	r2, r3
 8001608:	7dfb      	ldrb	r3, [r7, #23]
 800160a:	4413      	add	r3, r2
 800160c:	75fb      	strb	r3, [r7, #23]
			break;
 800160e:	e000      	b.n	8001612 <Serialize_addtionaldata+0x13e>
		default:
			break;
 8001610:	bf00      	nop
	}
	return buff_len;
 8001612:	7dfb      	ldrb	r3, [r7, #23]
}
 8001614:	4618      	mov	r0, r3
 8001616:	3718      	adds	r7, #24
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}

0800161c <Register2Server>:

uint8_t Register2Server()
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
	uint8_t *tmp_databuff = (uint8_t*)malloc(256*sizeof(uint8_t));
 8001622:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001626:	f009 fbf1 	bl	800ae0c <malloc>
 800162a:	4603      	mov	r3, r0
 800162c:	607b      	str	r3, [r7, #4]
	uint16_t pack_len = 0;
 800162e:	2300      	movs	r3, #0
 8001630:	807b      	strh	r3, [r7, #2]
	// Create package
	pack_len = createPack(PACKT_REGISTER, DATA_REGISTER, CMD_NONE );
 8001632:	2200      	movs	r2, #0
 8001634:	2104      	movs	r1, #4
 8001636:	20f5      	movs	r0, #245	; 0xf5
 8001638:	f7ff fcf4 	bl	8001024 <createPack>
 800163c:	4603      	mov	r3, r0
 800163e:	807b      	strh	r3, [r7, #2]
	if ( !pack_len ) {
 8001640:	887b      	ldrh	r3, [r7, #2]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d104      	bne.n	8001650 <Register2Server+0x34>
		free(tmp_databuff);
 8001646:	6878      	ldr	r0, [r7, #4]
 8001648:	f009 fbe8 	bl	800ae1c <free>
		return 0;
 800164c:	2300      	movs	r3, #0
 800164e:	e039      	b.n	80016c4 <Register2Server+0xa8>
		}
	 //Convert Register data to temp buffer
	uint8_t datalen= Serialize_Data(tmp_databuff, DATA_REGISTER );
 8001650:	2104      	movs	r1, #4
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	f7ff fef6 	bl	8001444 <Serialize_Data>
 8001658:	4603      	mov	r3, r0
 800165a:	707b      	strb	r3, [r7, #1]
	if ( !datalen )	{
 800165c:	787b      	ldrb	r3, [r7, #1]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d104      	bne.n	800166c <Register2Server+0x50>
		free(tmp_databuff);
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	f009 fbda 	bl	800ae1c <free>
		return 0;
 8001668:	2300      	movs	r3, #0
 800166a:	e02b      	b.n	80016c4 <Register2Server+0xa8>
	}
	// Add Register data  temp buffer to package
	pack_len += addDatatoPack( Pack_buff, pack_len, tmp_databuff, datalen );
 800166c:	787b      	ldrb	r3, [r7, #1]
 800166e:	b29b      	uxth	r3, r3
 8001670:	8879      	ldrh	r1, [r7, #2]
 8001672:	687a      	ldr	r2, [r7, #4]
 8001674:	4815      	ldr	r0, [pc, #84]	; (80016cc <Register2Server+0xb0>)
 8001676:	f7ff ff14 	bl	80014a2 <addDatatoPack>
 800167a:	4603      	mov	r3, r0
 800167c:	b29a      	uxth	r2, r3
 800167e:	887b      	ldrh	r3, [r7, #2]
 8001680:	4413      	add	r3, r2
 8001682:	807b      	strh	r3, [r7, #2]
	// Add CRC to package
	pack_len += addCRCtoPack( Pack_buff, pack_len );
 8001684:	887b      	ldrh	r3, [r7, #2]
 8001686:	b2db      	uxtb	r3, r3
 8001688:	4619      	mov	r1, r3
 800168a:	4810      	ldr	r0, [pc, #64]	; (80016cc <Register2Server+0xb0>)
 800168c:	f7ff fc86 	bl	8000f9c <addCRCtoPack>
 8001690:	4603      	mov	r3, r0
 8001692:	b29a      	uxth	r2, r3
 8001694:	887b      	ldrh	r3, [r7, #2]
 8001696:	4413      	add	r3, r2
 8001698:	807b      	strh	r3, [r7, #2]
	// Publish
	if ( MQTT_publish((uint8_t*)TOPIC_PUB, Pack_buff, pack_len) )	{
 800169a:	887b      	ldrh	r3, [r7, #2]
 800169c:	461a      	mov	r2, r3
 800169e:	490b      	ldr	r1, [pc, #44]	; (80016cc <Register2Server+0xb0>)
 80016a0:	480b      	ldr	r0, [pc, #44]	; (80016d0 <Register2Server+0xb4>)
 80016a2:	f002 fc9d 	bl	8003fe0 <MQTT_publish>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d007      	beq.n	80016bc <Register2Server+0xa0>
		Serial_log_string(" Sent \"Register\" message to server\r\n");
 80016ac:	4809      	ldr	r0, [pc, #36]	; (80016d4 <Register2Server+0xb8>)
 80016ae:	f7ff fc0f 	bl	8000ed0 <Serial_log_string>
		free(tmp_databuff);
 80016b2:	6878      	ldr	r0, [r7, #4]
 80016b4:	f009 fbb2 	bl	800ae1c <free>
		return 1;
 80016b8:	2301      	movs	r3, #1
 80016ba:	e003      	b.n	80016c4 <Register2Server+0xa8>
	}
	free(tmp_databuff);
 80016bc:	6878      	ldr	r0, [r7, #4]
 80016be:	f009 fbad 	bl	800ae1c <free>
	return 0;
 80016c2:	2300      	movs	r3, #0
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	3708      	adds	r7, #8
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	20000d20 	.word	0x20000d20
 80016d0:	0800d8bc 	.word	0x0800d8bc
 80016d4:	0800d8d0 	.word	0x0800d8d0

080016d8 <sendCMDtoServer>:

uint8_t sendCMDtoServer(CMD_t CMDtype, uint8_t *SMSdatabuffer, uint16_t datalen, MBA_state_t MBAstate,
		Stepmotor_dir_t Stepm_DIR, Stepmotor_change_mode_t Stepm_changeMode,
		uint8_t Stepm_changeValue)
{
 80016d8:	b590      	push	{r4, r7, lr}
 80016da:	b0c9      	sub	sp, #292	; 0x124
 80016dc:	af04      	add	r7, sp, #16
 80016de:	4604      	mov	r4, r0
 80016e0:	f507 7088 	add.w	r0, r7, #272	; 0x110
 80016e4:	f5a0 7088 	sub.w	r0, r0, #272	; 0x110
 80016e8:	6001      	str	r1, [r0, #0]
 80016ea:	4610      	mov	r0, r2
 80016ec:	4619      	mov	r1, r3
 80016ee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80016f2:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80016f6:	4622      	mov	r2, r4
 80016f8:	701a      	strb	r2, [r3, #0]
 80016fa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80016fe:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001702:	4602      	mov	r2, r0
 8001704:	801a      	strh	r2, [r3, #0]
 8001706:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800170a:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 800170e:	460a      	mov	r2, r1
 8001710:	701a      	strb	r2, [r3, #0]
	uint8_t  pack_len = 0;
 8001712:	2300      	movs	r3, #0
 8001714:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
	pack_len = createPack(PACKT_CMD, DATA_NONE, CMDtype );
 8001718:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800171c:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	461a      	mov	r2, r3
 8001724:	2100      	movs	r1, #0
 8001726:	20f2      	movs	r0, #242	; 0xf2
 8001728:	f7ff fc7c 	bl	8001024 <createPack>
 800172c:	4603      	mov	r3, r0
 800172e:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
	if ( !pack_len )	return 0; // Create package
 8001732:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001736:	2b00      	cmp	r3, #0
 8001738:	d101      	bne.n	800173e <sendCMDtoServer+0x66>
 800173a:	2300      	movs	r3, #0
 800173c:	e052      	b.n	80017e4 <sendCMDtoServer+0x10c>

	uint8_t tmpAbuff [256];
	uint8_t Abuff_len = Serialize_addtionaldata(CMDtype, tmpAbuff, SMSdatabuffer, datalen, MBAstate, Stepm_DIR, Stepm_changeMode, Stepm_changeValue);
 800173e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001742:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001746:	881c      	ldrh	r4, [r3, #0]
 8001748:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800174c:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 8001750:	f107 010c 	add.w	r1, r7, #12
 8001754:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001758:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800175c:	7818      	ldrb	r0, [r3, #0]
 800175e:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
 8001762:	9303      	str	r3, [sp, #12]
 8001764:	f897 3124 	ldrb.w	r3, [r7, #292]	; 0x124
 8001768:	9302      	str	r3, [sp, #8]
 800176a:	f897 3120 	ldrb.w	r3, [r7, #288]	; 0x120
 800176e:	9301      	str	r3, [sp, #4]
 8001770:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001774:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	9300      	str	r3, [sp, #0]
 800177c:	4623      	mov	r3, r4
 800177e:	6812      	ldr	r2, [r2, #0]
 8001780:	f7ff fea8 	bl	80014d4 <Serialize_addtionaldata>
 8001784:	4603      	mov	r3, r0
 8001786:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
	pack_len += addDatatoPack(Pack_buff, pack_len, tmpAbuff, Abuff_len);    // Add additional data to package
 800178a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800178e:	b299      	uxth	r1, r3
 8001790:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 8001794:	b29b      	uxth	r3, r3
 8001796:	f107 020c 	add.w	r2, r7, #12
 800179a:	4815      	ldr	r0, [pc, #84]	; (80017f0 <sendCMDtoServer+0x118>)
 800179c:	f7ff fe81 	bl	80014a2 <addDatatoPack>
 80017a0:	4603      	mov	r3, r0
 80017a2:	461a      	mov	r2, r3
 80017a4:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80017a8:	4413      	add	r3, r2
 80017aa:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f

	pack_len += addCRCtoPack( Pack_buff, pack_len );		// Add CRC to package
 80017ae:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80017b2:	4619      	mov	r1, r3
 80017b4:	480e      	ldr	r0, [pc, #56]	; (80017f0 <sendCMDtoServer+0x118>)
 80017b6:	f7ff fbf1 	bl	8000f9c <addCRCtoPack>
 80017ba:	4603      	mov	r3, r0
 80017bc:	461a      	mov	r2, r3
 80017be:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80017c2:	4413      	add	r3, r2
 80017c4:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f

	if ( !MQTT_publish( (uint8_t*)TOPIC_PUB, Pack_buff , pack_len ) )	return 0;
 80017c8:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80017cc:	b29b      	uxth	r3, r3
 80017ce:	461a      	mov	r2, r3
 80017d0:	4907      	ldr	r1, [pc, #28]	; (80017f0 <sendCMDtoServer+0x118>)
 80017d2:	4808      	ldr	r0, [pc, #32]	; (80017f4 <sendCMDtoServer+0x11c>)
 80017d4:	f002 fc04 	bl	8003fe0 <MQTT_publish>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d101      	bne.n	80017e2 <sendCMDtoServer+0x10a>
 80017de:	2300      	movs	r3, #0
 80017e0:	e000      	b.n	80017e4 <sendCMDtoServer+0x10c>
	return 1;
 80017e2:	2301      	movs	r3, #1
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd90      	pop	{r4, r7, pc}
 80017ee:	bf00      	nop
 80017f0:	20000d20 	.word	0x20000d20
 80017f4:	0800d8bc 	.word	0x0800d8bc

080017f8 <sendData2Server>:

uint8_t sendData2Server( DATA_t dataType)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	f5ad 6d82 	sub.w	sp, sp, #1040	; 0x410
 80017fe:	af00      	add	r7, sp, #0
 8001800:	4602      	mov	r2, r0
 8001802:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8001806:	f2a3 4309 	subw	r3, r3, #1033	; 0x409
 800180a:	701a      	strb	r2, [r3, #0]
	uint8_t databuff[DATABUFF_MAXLEN];
	uint16_t data_len = 0;
 800180c:	2300      	movs	r3, #0
 800180e:	f8a7 340e 	strh.w	r3, [r7, #1038]	; 0x40e
	memset(databuff, 0, DATABUFF_MAXLEN);
 8001812:	f107 030c 	add.w	r3, r7, #12
 8001816:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800181a:	2100      	movs	r1, #0
 800181c:	4618      	mov	r0, r3
 800181e:	f009 fb23 	bl	800ae68 <memset>
	memset(Pack_buff, 0, PACKBUFF_MAXLEN);
 8001822:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001826:	2100      	movs	r1, #0
 8001828:	4826      	ldr	r0, [pc, #152]	; (80018c4 <sendData2Server+0xcc>)
 800182a:	f009 fb1d 	bl	800ae68 <memset>
	// Creat package
	uint16_t pack_len = createPack(PACKT_DATA, dataType, CMD_NONE );
 800182e:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8001832:	f2a3 4309 	subw	r3, r3, #1033	; 0x409
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	2200      	movs	r2, #0
 800183a:	4619      	mov	r1, r3
 800183c:	20f1      	movs	r0, #241	; 0xf1
 800183e:	f7ff fbf1 	bl	8001024 <createPack>
 8001842:	4603      	mov	r3, r0
 8001844:	f8a7 340c 	strh.w	r3, [r7, #1036]	; 0x40c
	// Add data to package
	data_len = Serialize_Data(databuff, dataType );
 8001848:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 800184c:	f2a3 4309 	subw	r3, r3, #1033	; 0x409
 8001850:	781a      	ldrb	r2, [r3, #0]
 8001852:	f107 030c 	add.w	r3, r7, #12
 8001856:	4611      	mov	r1, r2
 8001858:	4618      	mov	r0, r3
 800185a:	f7ff fdf3 	bl	8001444 <Serialize_Data>
 800185e:	4603      	mov	r3, r0
 8001860:	f8a7 340e 	strh.w	r3, [r7, #1038]	; 0x40e
	pack_len += addDatatoPack(Pack_buff, pack_len, databuff, data_len);
 8001864:	f8b7 340e 	ldrh.w	r3, [r7, #1038]	; 0x40e
 8001868:	f107 020c 	add.w	r2, r7, #12
 800186c:	f8b7 140c 	ldrh.w	r1, [r7, #1036]	; 0x40c
 8001870:	4814      	ldr	r0, [pc, #80]	; (80018c4 <sendData2Server+0xcc>)
 8001872:	f7ff fe16 	bl	80014a2 <addDatatoPack>
 8001876:	4603      	mov	r3, r0
 8001878:	b29a      	uxth	r2, r3
 800187a:	f8b7 340c 	ldrh.w	r3, [r7, #1036]	; 0x40c
 800187e:	4413      	add	r3, r2
 8001880:	f8a7 340c 	strh.w	r3, [r7, #1036]	; 0x40c
	// Add CRC to package
	pack_len += addCRCtoPack(Pack_buff, pack_len);
 8001884:	f8b7 340c 	ldrh.w	r3, [r7, #1036]	; 0x40c
 8001888:	b2db      	uxtb	r3, r3
 800188a:	4619      	mov	r1, r3
 800188c:	480d      	ldr	r0, [pc, #52]	; (80018c4 <sendData2Server+0xcc>)
 800188e:	f7ff fb85 	bl	8000f9c <addCRCtoPack>
 8001892:	4603      	mov	r3, r0
 8001894:	b29a      	uxth	r2, r3
 8001896:	f8b7 340c 	ldrh.w	r3, [r7, #1036]	; 0x40c
 800189a:	4413      	add	r3, r2
 800189c:	f8a7 340c 	strh.w	r3, [r7, #1036]	; 0x40c
	// Publish
	if ( !MQTT_publish( (uint8_t*)TOPIC_PUB, Pack_buff, pack_len) ) return 0;
 80018a0:	f8b7 340c 	ldrh.w	r3, [r7, #1036]	; 0x40c
 80018a4:	461a      	mov	r2, r3
 80018a6:	4907      	ldr	r1, [pc, #28]	; (80018c4 <sendData2Server+0xcc>)
 80018a8:	4807      	ldr	r0, [pc, #28]	; (80018c8 <sendData2Server+0xd0>)
 80018aa:	f002 fb99 	bl	8003fe0 <MQTT_publish>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d101      	bne.n	80018b8 <sendData2Server+0xc0>
 80018b4:	2300      	movs	r3, #0
 80018b6:	e000      	b.n	80018ba <sendData2Server+0xc2>
	return 1;
 80018b8:	2301      	movs	r3, #1
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	f507 6782 	add.w	r7, r7, #1040	; 0x410
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	20000d20 	.word	0x20000d20
 80018c8:	0800d8bc 	.word	0x0800d8bc

080018cc <checkCRC>:

	if ( !MQTT_publish( (uint8_t*)TOPIC_PUB, Pack_buff, packlen) ) return 0;
	return 1;
}
uint8_t checkCRC(uint8_t *buffer, uint16_t bufferlen)
{
 80018cc:	b590      	push	{r4, r7, lr}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	460b      	mov	r3, r1
 80018d6:	807b      	strh	r3, [r7, #2]
	if ( buffer2num(buffer + bufferlen - 4) != crc32( (char*)buffer, bufferlen - 4) ) return 0;
 80018d8:	887b      	ldrh	r3, [r7, #2]
 80018da:	3b04      	subs	r3, #4
 80018dc:	687a      	ldr	r2, [r7, #4]
 80018de:	4413      	add	r3, r2
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7ff fb41 	bl	8000f68 <buffer2num>
 80018e6:	4604      	mov	r4, r0
 80018e8:	887b      	ldrh	r3, [r7, #2]
 80018ea:	3b04      	subs	r3, #4
 80018ec:	4619      	mov	r1, r3
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	f002 ffc2 	bl	8004878 <crc32>
 80018f4:	4603      	mov	r3, r0
 80018f6:	429c      	cmp	r4, r3
 80018f8:	d001      	beq.n	80018fe <checkCRC+0x32>
 80018fa:	2300      	movs	r3, #0
 80018fc:	e000      	b.n	8001900 <checkCRC+0x34>
	return 1;
 80018fe:	2301      	movs	r3, #1
}
 8001900:	4618      	mov	r0, r3
 8001902:	370c      	adds	r7, #12
 8001904:	46bd      	mov	sp, r7
 8001906:	bd90      	pop	{r4, r7, pc}

08001908 <checkNodeID>:

uint8_t checkNodeID(uint8_t *Msg, uint8_t nodeID)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	460b      	mov	r3, r1
 8001912:	70fb      	strb	r3, [r7, #3]
	if ( Msg[NODEID_POS] != nodeID && Msg[NODEID_POS] != BROADCAST_ID )		return 0;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	78fa      	ldrb	r2, [r7, #3]
 800191a:	429a      	cmp	r2, r3
 800191c:	d005      	beq.n	800192a <checkNodeID+0x22>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	2bff      	cmp	r3, #255	; 0xff
 8001924:	d001      	beq.n	800192a <checkNodeID+0x22>
 8001926:	2300      	movs	r3, #0
 8001928:	e000      	b.n	800192c <checkNodeID+0x24>
	return 1;
 800192a:	2301      	movs	r3, #1
}
 800192c:	4618      	mov	r0, r3
 800192e:	370c      	adds	r7, #12
 8001930:	46bd      	mov	sp, r7
 8001932:	bc80      	pop	{r7}
 8001934:	4770      	bx	lr

08001936 <checkPacktype>:

PACK_t checkPacktype(uint8_t *Msg)
{
 8001936:	b480      	push	{r7}
 8001938:	b083      	sub	sp, #12
 800193a:	af00      	add	r7, sp, #0
 800193c:	6078      	str	r0, [r7, #4]
	return Msg[PACKT_POS];
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	3301      	adds	r3, #1
 8001942:	781b      	ldrb	r3, [r3, #0]
}
 8001944:	4618      	mov	r0, r3
 8001946:	370c      	adds	r7, #12
 8001948:	46bd      	mov	sp, r7
 800194a:	bc80      	pop	{r7}
 800194c:	4770      	bx	lr

0800194e <checkDatatype>:

DATA_t checkDatatype(uint8_t *Msg)
{
 800194e:	b480      	push	{r7}
 8001950:	b083      	sub	sp, #12
 8001952:	af00      	add	r7, sp, #0
 8001954:	6078      	str	r0, [r7, #4]
	return Msg[DATAT_POS];
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	3302      	adds	r3, #2
 800195a:	781b      	ldrb	r3, [r3, #0]
}
 800195c:	4618      	mov	r0, r3
 800195e:	370c      	adds	r7, #12
 8001960:	46bd      	mov	sp, r7
 8001962:	bc80      	pop	{r7}
 8001964:	4770      	bx	lr

08001966 <checkDataREStype>:
DATA_t checkDataREStype(uint8_t *Msg)
{
 8001966:	b480      	push	{r7}
 8001968:	b083      	sub	sp, #12
 800196a:	af00      	add	r7, sp, #0
 800196c:	6078      	str	r0, [r7, #4]
	return Msg[DATAREST_POS];
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	3303      	adds	r3, #3
 8001972:	781b      	ldrb	r3, [r3, #0]
}
 8001974:	4618      	mov	r0, r3
 8001976:	370c      	adds	r7, #12
 8001978:	46bd      	mov	sp, r7
 800197a:	bc80      	pop	{r7}
 800197c:	4770      	bx	lr

0800197e <checkCMDtype>:
CMD_t checkCmdREStype( uint8_t *Msg)
{
	return Msg[CMDREST_POS];
}
CMD_t checkCMDtype (uint8_t *Msg)
{
 800197e:	b480      	push	{r7}
 8001980:	b083      	sub	sp, #12
 8001982:	af00      	add	r7, sp, #0
 8001984:	6078      	str	r0, [r7, #4]
	return Msg[CMD_POS];
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	3302      	adds	r3, #2
 800198a:	781b      	ldrb	r3, [r3, #0]
}
 800198c:	4618      	mov	r0, r3
 800198e:	370c      	adds	r7, #12
 8001990:	46bd      	mov	sp, r7
 8001992:	bc80      	pop	{r7}
 8001994:	4770      	bx	lr
	...

08001998 <getDataStatus>:


void getDataStatus(uint8_t *Msg, uint16_t Msglen)
{
 8001998:	b590      	push	{r4, r7, lr}
 800199a:	b08b      	sub	sp, #44	; 0x2c
 800199c:	af06      	add	r7, sp, #24
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	460b      	mov	r3, r1
 80019a2:	807b      	strh	r3, [r7, #2]
	uint8_t numbofActiveStation;
	uint8_t numbofActiveSensor;
	uint8_t numbofFailStation;
	uint8_t numbofFailSensor;
	uint8_t datapos = DATA_POS;
 80019a4:	2303      	movs	r3, #3
 80019a6:	73fb      	strb	r3, [r7, #15]
	numbofActiveStation = Msg[datapos++];
 80019a8:	7bfb      	ldrb	r3, [r7, #15]
 80019aa:	1c5a      	adds	r2, r3, #1
 80019ac:	73fa      	strb	r2, [r7, #15]
 80019ae:	461a      	mov	r2, r3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	4413      	add	r3, r2
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	73bb      	strb	r3, [r7, #14]
	numbofFailStation = Msg[datapos++];
 80019b8:	7bfb      	ldrb	r3, [r7, #15]
 80019ba:	1c5a      	adds	r2, r3, #1
 80019bc:	73fa      	strb	r2, [r7, #15]
 80019be:	461a      	mov	r2, r3
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	4413      	add	r3, r2
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	737b      	strb	r3, [r7, #13]
	numbofActiveSensor = Msg[datapos++];
 80019c8:	7bfb      	ldrb	r3, [r7, #15]
 80019ca:	1c5a      	adds	r2, r3, #1
 80019cc:	73fa      	strb	r2, [r7, #15]
 80019ce:	461a      	mov	r2, r3
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	4413      	add	r3, r2
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	733b      	strb	r3, [r7, #12]
	numbofFailSensor = Msg[datapos++];
 80019d8:	7bfb      	ldrb	r3, [r7, #15]
 80019da:	1c5a      	adds	r2, r3, #1
 80019dc:	73fa      	strb	r2, [r7, #15]
 80019de:	461a      	mov	r2, r3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	4413      	add	r3, r2
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	72fb      	strb	r3, [r7, #11]
	memset(__MY_SIM->sms.GetStatus.data, 0, SMS_DATA_MAXLEN);
 80019e8:	4b15      	ldr	r3, [pc, #84]	; (8001a40 <getDataStatus+0xa8>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f503 6321 	add.w	r3, r3, #2576	; 0xa10
 80019f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019f4:	2100      	movs	r1, #0
 80019f6:	4618      	mov	r0, r3
 80019f8:	f009 fa36 	bl	800ae68 <memset>
	uint16_t len = sprintf((char*)__MY_SMS->GetStatus.data,"%s: %d,%s: %d,%s: %d,%s: %d.",
 80019fc:	4b11      	ldr	r3, [pc, #68]	; (8001a44 <getDataStatus+0xac>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f203 5054 	addw	r0, r3, #1364	; 0x554
 8001a04:	7bbc      	ldrb	r4, [r7, #14]
 8001a06:	7b7b      	ldrb	r3, [r7, #13]
 8001a08:	7b3a      	ldrb	r2, [r7, #12]
 8001a0a:	7af9      	ldrb	r1, [r7, #11]
 8001a0c:	9105      	str	r1, [sp, #20]
 8001a0e:	490e      	ldr	r1, [pc, #56]	; (8001a48 <getDataStatus+0xb0>)
 8001a10:	9104      	str	r1, [sp, #16]
 8001a12:	9203      	str	r2, [sp, #12]
 8001a14:	4a0d      	ldr	r2, [pc, #52]	; (8001a4c <getDataStatus+0xb4>)
 8001a16:	9202      	str	r2, [sp, #8]
 8001a18:	9301      	str	r3, [sp, #4]
 8001a1a:	4b0d      	ldr	r3, [pc, #52]	; (8001a50 <getDataStatus+0xb8>)
 8001a1c:	9300      	str	r3, [sp, #0]
 8001a1e:	4623      	mov	r3, r4
 8001a20:	4a0c      	ldr	r2, [pc, #48]	; (8001a54 <getDataStatus+0xbc>)
 8001a22:	490d      	ldr	r1, [pc, #52]	; (8001a58 <getDataStatus+0xc0>)
 8001a24:	f009 fdc4 	bl	800b5b0 <siprintf>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	813b      	strh	r3, [r7, #8]
			USER_MSG_HEADER_NUMBOF_ACT_STATION, numbofActiveStation,
			USER_MSG_HEADER_NUMBOF_FAIL_STATION, numbofFailStation,
			USER_MSG_HEADER_NUMBOF_ACT_SENSOR, numbofActiveSensor,
			USER_MSG_HEADER_NUMBOF_FAIL_SENSOR, numbofFailSensor);
	__MY_SMS->GetStatus.datalength = len;
 8001a2c:	4b05      	ldr	r3, [pc, #20]	; (8001a44 <getDataStatus+0xac>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	893a      	ldrh	r2, [r7, #8]
 8001a32:	f8a3 2552 	strh.w	r2, [r3, #1362]	; 0x552
}
 8001a36:	bf00      	nop
 8001a38:	3714      	adds	r7, #20
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd90      	pop	{r4, r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	20001ae8 	.word	0x20001ae8
 8001a44:	20001124 	.word	0x20001124
 8001a48:	0800d940 	.word	0x0800d940
 8001a4c:	0800d95c 	.word	0x0800d95c
 8001a50:	0800d980 	.word	0x0800d980
 8001a54:	0800d8f8 	.word	0x0800d8f8
 8001a58:	0800d920 	.word	0x0800d920

08001a5c <getDatalatest>:

ID_t getDatalatest(uint8_t *Msg, uint16_t Msg_len)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b084      	sub	sp, #16
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
 8001a64:	460b      	mov	r3, r1
 8001a66:	807b      	strh	r3, [r7, #2]
	uint8_t datapos = DATA_POS;
 8001a68:	2303      	movs	r3, #3
 8001a6a:	73fb      	strb	r3, [r7, #15]
	uint16_t crcpos = Msg_len - 4;
 8001a6c:	887b      	ldrh	r3, [r7, #2]
 8001a6e:	3b04      	subs	r3, #4
 8001a70:	81bb      	strh	r3, [r7, #12]
	uint8_t len ;
	uint16_t tmpvalue;

	// get ID type ( Station or Sensor)
	ID_t IDtype = Msg[datapos++];
 8001a72:	7bfb      	ldrb	r3, [r7, #15]
 8001a74:	1c5a      	adds	r2, r3, #1
 8001a76:	73fa      	strb	r2, [r7, #15]
 8001a78:	461a      	mov	r2, r3
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4413      	add	r3, r2
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	72fb      	strb	r3, [r7, #11]

	switch (IDtype){
 8001a82:	7afb      	ldrb	r3, [r7, #11]
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	d002      	beq.n	8001a8e <getDatalatest+0x32>
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	d055      	beq.n	8001b38 <getDatalatest+0xdc>
		len = sprintf((char*)(__MY_SMS->GetStation.data + __MY_SMS->GetStation.datalength), "%d;", tmpvalue);
		__MY_SMS->GetStation.datalength += len;
		datapos += 2;
		break;
	default:
		break;
 8001a8c:	e0aa      	b.n	8001be4 <getDatalatest+0x188>
		__MY_SMS->GetStation.datalength = 0;
 8001a8e:	4b58      	ldr	r3, [pc, #352]	; (8001bf0 <getDatalatest+0x194>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	2200      	movs	r2, #0
 8001a94:	f8a3 2772 	strh.w	r2, [r3, #1906]	; 0x772
		while (datapos < crcpos)
 8001a98:	e048      	b.n	8001b2c <getDatalatest+0xd0>
			len = sprintf((char*)(__MY_SMS->GetStation.data + __MY_SMS->GetStation.datalength), "I%d:", Msg[datapos]);
 8001a9a:	4b55      	ldr	r3, [pc, #340]	; (8001bf0 <getDatalatest+0x194>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f203 7374 	addw	r3, r3, #1908	; 0x774
 8001aa2:	4a53      	ldr	r2, [pc, #332]	; (8001bf0 <getDatalatest+0x194>)
 8001aa4:	6812      	ldr	r2, [r2, #0]
 8001aa6:	f8b2 2772 	ldrh.w	r2, [r2, #1906]	; 0x772
 8001aaa:	1898      	adds	r0, r3, r2
 8001aac:	7bfb      	ldrb	r3, [r7, #15]
 8001aae:	687a      	ldr	r2, [r7, #4]
 8001ab0:	4413      	add	r3, r2
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	494f      	ldr	r1, [pc, #316]	; (8001bf4 <getDatalatest+0x198>)
 8001ab8:	f009 fd7a 	bl	800b5b0 <siprintf>
 8001abc:	4603      	mov	r3, r0
 8001abe:	72bb      	strb	r3, [r7, #10]
			__MY_SMS->GetStation.datalength += len;
 8001ac0:	4b4b      	ldr	r3, [pc, #300]	; (8001bf0 <getDatalatest+0x194>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f8b3 1772 	ldrh.w	r1, [r3, #1906]	; 0x772
 8001ac8:	7abb      	ldrb	r3, [r7, #10]
 8001aca:	b29a      	uxth	r2, r3
 8001acc:	4b48      	ldr	r3, [pc, #288]	; (8001bf0 <getDatalatest+0x194>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	440a      	add	r2, r1
 8001ad2:	b292      	uxth	r2, r2
 8001ad4:	f8a3 2772 	strh.w	r2, [r3, #1906]	; 0x772
			datapos++;
 8001ad8:	7bfb      	ldrb	r3, [r7, #15]
 8001ada:	3301      	adds	r3, #1
 8001adc:	73fb      	strb	r3, [r7, #15]
			tmpvalue = buff2twobyte(Msg+ datapos);
 8001ade:	7bfb      	ldrb	r3, [r7, #15]
 8001ae0:	687a      	ldr	r2, [r7, #4]
 8001ae2:	4413      	add	r3, r2
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f002 fbcf 	bl	8004288 <buff2twobyte>
 8001aea:	4603      	mov	r3, r0
 8001aec:	813b      	strh	r3, [r7, #8]
			len = sprintf((char*)(__MY_SMS->GetStation.data + __MY_SMS->GetStation.datalength), "%d;", tmpvalue);
 8001aee:	4b40      	ldr	r3, [pc, #256]	; (8001bf0 <getDatalatest+0x194>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f203 7374 	addw	r3, r3, #1908	; 0x774
 8001af6:	4a3e      	ldr	r2, [pc, #248]	; (8001bf0 <getDatalatest+0x194>)
 8001af8:	6812      	ldr	r2, [r2, #0]
 8001afa:	f8b2 2772 	ldrh.w	r2, [r2, #1906]	; 0x772
 8001afe:	4413      	add	r3, r2
 8001b00:	893a      	ldrh	r2, [r7, #8]
 8001b02:	493d      	ldr	r1, [pc, #244]	; (8001bf8 <getDatalatest+0x19c>)
 8001b04:	4618      	mov	r0, r3
 8001b06:	f009 fd53 	bl	800b5b0 <siprintf>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	72bb      	strb	r3, [r7, #10]
			__MY_SMS->GetStation.datalength += len;
 8001b0e:	4b38      	ldr	r3, [pc, #224]	; (8001bf0 <getDatalatest+0x194>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f8b3 1772 	ldrh.w	r1, [r3, #1906]	; 0x772
 8001b16:	7abb      	ldrb	r3, [r7, #10]
 8001b18:	b29a      	uxth	r2, r3
 8001b1a:	4b35      	ldr	r3, [pc, #212]	; (8001bf0 <getDatalatest+0x194>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	440a      	add	r2, r1
 8001b20:	b292      	uxth	r2, r2
 8001b22:	f8a3 2772 	strh.w	r2, [r3, #1906]	; 0x772
			datapos += 2;
 8001b26:	7bfb      	ldrb	r3, [r7, #15]
 8001b28:	3302      	adds	r3, #2
 8001b2a:	73fb      	strb	r3, [r7, #15]
		while (datapos < crcpos)
 8001b2c:	7bfb      	ldrb	r3, [r7, #15]
 8001b2e:	b29b      	uxth	r3, r3
 8001b30:	89ba      	ldrh	r2, [r7, #12]
 8001b32:	429a      	cmp	r2, r3
 8001b34:	d8b1      	bhi.n	8001a9a <getDatalatest+0x3e>
		break;
 8001b36:	e055      	b.n	8001be4 <getDatalatest+0x188>
		len = sprintf((char*)(__MY_SMS->GetStation.data + __MY_SMS->GetStation.datalength), "V%d:", Msg[datapos]);
 8001b38:	4b2d      	ldr	r3, [pc, #180]	; (8001bf0 <getDatalatest+0x194>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f203 7374 	addw	r3, r3, #1908	; 0x774
 8001b40:	4a2b      	ldr	r2, [pc, #172]	; (8001bf0 <getDatalatest+0x194>)
 8001b42:	6812      	ldr	r2, [r2, #0]
 8001b44:	f8b2 2772 	ldrh.w	r2, [r2, #1906]	; 0x772
 8001b48:	1898      	adds	r0, r3, r2
 8001b4a:	7bfb      	ldrb	r3, [r7, #15]
 8001b4c:	687a      	ldr	r2, [r7, #4]
 8001b4e:	4413      	add	r3, r2
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	461a      	mov	r2, r3
 8001b54:	4929      	ldr	r1, [pc, #164]	; (8001bfc <getDatalatest+0x1a0>)
 8001b56:	f009 fd2b 	bl	800b5b0 <siprintf>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	72bb      	strb	r3, [r7, #10]
		__MY_SMS->GetStation.datalength += len;
 8001b5e:	4b24      	ldr	r3, [pc, #144]	; (8001bf0 <getDatalatest+0x194>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f8b3 1772 	ldrh.w	r1, [r3, #1906]	; 0x772
 8001b66:	7abb      	ldrb	r3, [r7, #10]
 8001b68:	b29a      	uxth	r2, r3
 8001b6a:	4b21      	ldr	r3, [pc, #132]	; (8001bf0 <getDatalatest+0x194>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	440a      	add	r2, r1
 8001b70:	b292      	uxth	r2, r2
 8001b72:	f8a3 2772 	strh.w	r2, [r3, #1906]	; 0x772
		datapos++;
 8001b76:	7bfb      	ldrb	r3, [r7, #15]
 8001b78:	3301      	adds	r3, #1
 8001b7a:	73fb      	strb	r3, [r7, #15]
		switch (Msg[datapos++])	{
 8001b7c:	7bfb      	ldrb	r3, [r7, #15]
 8001b7e:	1c5a      	adds	r2, r3, #1
 8001b80:	73fa      	strb	r2, [r7, #15]
 8001b82:	461a      	mov	r2, r3
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	4413      	add	r3, r2
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d001      	beq.n	8001b92 <getDatalatest+0x136>
 8001b8e:	2b02      	cmp	r3, #2
			break;
 8001b90:	e000      	b.n	8001b94 <getDatalatest+0x138>
			break;
 8001b92:	bf00      	nop
		tmpvalue = buff2twobyte(Msg+ datapos);
 8001b94:	7bfb      	ldrb	r3, [r7, #15]
 8001b96:	687a      	ldr	r2, [r7, #4]
 8001b98:	4413      	add	r3, r2
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f002 fb74 	bl	8004288 <buff2twobyte>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	813b      	strh	r3, [r7, #8]
		len = sprintf((char*)(__MY_SMS->GetStation.data + __MY_SMS->GetStation.datalength), "%d;", tmpvalue);
 8001ba4:	4b12      	ldr	r3, [pc, #72]	; (8001bf0 <getDatalatest+0x194>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f203 7374 	addw	r3, r3, #1908	; 0x774
 8001bac:	4a10      	ldr	r2, [pc, #64]	; (8001bf0 <getDatalatest+0x194>)
 8001bae:	6812      	ldr	r2, [r2, #0]
 8001bb0:	f8b2 2772 	ldrh.w	r2, [r2, #1906]	; 0x772
 8001bb4:	4413      	add	r3, r2
 8001bb6:	893a      	ldrh	r2, [r7, #8]
 8001bb8:	490f      	ldr	r1, [pc, #60]	; (8001bf8 <getDatalatest+0x19c>)
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f009 fcf8 	bl	800b5b0 <siprintf>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	72bb      	strb	r3, [r7, #10]
		__MY_SMS->GetStation.datalength += len;
 8001bc4:	4b0a      	ldr	r3, [pc, #40]	; (8001bf0 <getDatalatest+0x194>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f8b3 1772 	ldrh.w	r1, [r3, #1906]	; 0x772
 8001bcc:	7abb      	ldrb	r3, [r7, #10]
 8001bce:	b29a      	uxth	r2, r3
 8001bd0:	4b07      	ldr	r3, [pc, #28]	; (8001bf0 <getDatalatest+0x194>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	440a      	add	r2, r1
 8001bd6:	b292      	uxth	r2, r2
 8001bd8:	f8a3 2772 	strh.w	r2, [r3, #1906]	; 0x772
		datapos += 2;
 8001bdc:	7bfb      	ldrb	r3, [r7, #15]
 8001bde:	3302      	adds	r3, #2
 8001be0:	73fb      	strb	r3, [r7, #15]
		break;
 8001be2:	bf00      	nop
	}
	return IDtype;
 8001be4:	7afb      	ldrb	r3, [r7, #11]
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3710      	adds	r7, #16
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	20001124 	.word	0x20001124
 8001bf4:	0800d9a0 	.word	0x0800d9a0
 8001bf8:	0800d9a8 	.word	0x0800d9a8
 8001bfc:	0800d9ac 	.word	0x0800d9ac

08001c00 <getMBAstate>:

MBA_state_t getMBAstate(uint8_t *Msg)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b085      	sub	sp, #20
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
	MBA_state_t res = MBA_NULL;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	73fb      	strb	r3, [r7, #15]
	switch (Msg[MBA_STATE_POS])		{
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	3303      	adds	r3, #3
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d004      	beq.n	8001c20 <getMBAstate+0x20>
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	d105      	bne.n	8001c26 <getMBAstate+0x26>
	case MBA_OFF:
		res = MBA_OFF;
 8001c1a:	2302      	movs	r3, #2
 8001c1c:	73fb      	strb	r3, [r7, #15]
		break;
 8001c1e:	e003      	b.n	8001c28 <getMBAstate+0x28>
	case MBA_ON:
		res = MBA_ON;
 8001c20:	2301      	movs	r3, #1
 8001c22:	73fb      	strb	r3, [r7, #15]
		break;
 8001c24:	e000      	b.n	8001c28 <getMBAstate+0x28>
	default:
		break;
 8001c26:	bf00      	nop
	}
	__MY_STATION->MBAstate = res;
 8001c28:	4b04      	ldr	r3, [pc, #16]	; (8001c3c <getMBAstate+0x3c>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	7bfa      	ldrb	r2, [r7, #15]
 8001c2e:	719a      	strb	r2, [r3, #6]
	return res;
 8001c30:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3714      	adds	r7, #20
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bc80      	pop	{r7}
 8001c3a:	4770      	bx	lr
 8001c3c:	20001120 	.word	0x20001120

08001c40 <processingComingMsg>:
			}
			current = current->next;
		}
}
void processingComingMsg(uint8_t *Msg, uint16_t Msg_len, uint8_t stID)
{
 8001c40:	b5b0      	push	{r4, r5, r7, lr}
 8001c42:	b08a      	sub	sp, #40	; 0x28
 8001c44:	af02      	add	r7, sp, #8
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	460b      	mov	r3, r1
 8001c4a:	807b      	strh	r3, [r7, #2]
 8001c4c:	4613      	mov	r3, r2
 8001c4e:	707b      	strb	r3, [r7, #1]
	if ( !checkCRC(Msg, Msg_len) )	return;
 8001c50:	887b      	ldrh	r3, [r7, #2]
 8001c52:	4619      	mov	r1, r3
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	f7ff fe39 	bl	80018cc <checkCRC>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	f000 8120 	beq.w	8001ea2 <processingComingMsg+0x262>

	if ( !checkNodeID(Msg, stID) )	return;
 8001c62:	787b      	ldrb	r3, [r7, #1]
 8001c64:	4619      	mov	r1, r3
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	f7ff fe4e 	bl	8001908 <checkNodeID>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	f000 8119 	beq.w	8001ea6 <processingComingMsg+0x266>

	PACK_t packageType = checkPacktype(Msg);
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	f7ff fe5e 	bl	8001936 <checkPacktype>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	77fb      	strb	r3, [r7, #31]
	CMD_t cmdType;
	DATA_t dataREStype;
	ID_t idType;
	uint32_t calibtime;

	switch (packageType) {
 8001c7e:	7ffb      	ldrb	r3, [r7, #31]
 8001c80:	3bf1      	subs	r3, #241	; 0xf1
 8001c82:	2b05      	cmp	r3, #5
 8001c84:	f200 8111 	bhi.w	8001eaa <processingComingMsg+0x26a>
 8001c88:	a201      	add	r2, pc, #4	; (adr r2, 8001c90 <processingComingMsg+0x50>)
 8001c8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c8e:	bf00      	nop
 8001c90:	08001ca9 	.word	0x08001ca9
 8001c94:	08001d23 	.word	0x08001d23
 8001c98:	08001dd7 	.word	0x08001dd7
 8001c9c:	08001e77 	.word	0x08001e77
 8001ca0:	08001eab 	.word	0x08001eab
 8001ca4:	08001e8f 	.word	0x08001e8f
		case PACKT_DATA:
			// Call the processing data function
			dataType = checkDatatype(Msg);
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	f7ff fe50 	bl	800194e <checkDatatype>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	75fb      	strb	r3, [r7, #23]
			switch (dataType) {
 8001cb2:	7dfb      	ldrb	r3, [r7, #23]
 8001cb4:	2b03      	cmp	r3, #3
 8001cb6:	d002      	beq.n	8001cbe <processingComingMsg+0x7e>
 8001cb8:	2b06      	cmp	r3, #6
 8001cba:	d00a      	beq.n	8001cd2 <processingComingMsg+0x92>
					default:
						break;
					}
					break;
				default:
					break;
 8001cbc:	e030      	b.n	8001d20 <processingComingMsg+0xe0>
					getDataStatus(Msg, Msg_len);
 8001cbe:	887b      	ldrh	r3, [r7, #2]
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f7ff fe68 	bl	8001998 <getDataStatus>
					triggerSMSreturn(SMS_CMD_GET_STATUS, SMS_CMD_ENABLE);
 8001cc8:	2101      	movs	r1, #1
 8001cca:	2005      	movs	r0, #5
 8001ccc:	f000 fdaa 	bl	8002824 <triggerSMSreturn>
					break;
 8001cd0:	e026      	b.n	8001d20 <processingComingMsg+0xe0>
					idType = getDatalatest(Msg, Msg_len);
 8001cd2:	887b      	ldrh	r3, [r7, #2]
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f7ff fec0 	bl	8001a5c <getDatalatest>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	75bb      	strb	r3, [r7, #22]
					switch (checkStationMode())	{
 8001ce0:	f003 f8ee 	bl	8004ec0 <checkStationMode>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d006      	beq.n	8001cf8 <processingComingMsg+0xb8>
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	d114      	bne.n	8001d18 <processingComingMsg+0xd8>
						triggerTaskflag(TASK_CTRL_STEPMOR, FLAG_EN);
 8001cee:	2101      	movs	r1, #1
 8001cf0:	2005      	movs	r0, #5
 8001cf2:	f002 fc35 	bl	8004560 <triggerTaskflag>
						break;
 8001cf6:	e012      	b.n	8001d1e <processingComingMsg+0xde>
						if (idType == ID_SENSOR)	{
 8001cf8:	7dbb      	ldrb	r3, [r7, #22]
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	d104      	bne.n	8001d08 <processingComingMsg+0xc8>
							triggerSMSreturn(SMS_CMD_GET_SENSOR, SMS_CMD_ENABLE);
 8001cfe:	2101      	movs	r1, #1
 8001d00:	2006      	movs	r0, #6
 8001d02:	f000 fd8f 	bl	8002824 <triggerSMSreturn>
						break;
 8001d06:	e009      	b.n	8001d1c <processingComingMsg+0xdc>
						else if (idType == ID_STATION)	{
 8001d08:	7dbb      	ldrb	r3, [r7, #22]
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d106      	bne.n	8001d1c <processingComingMsg+0xdc>
							triggerSMSreturn(SMS_CMD_GET_STATION, SMS_CMD_DISABLE);
 8001d0e:	2100      	movs	r1, #0
 8001d10:	2007      	movs	r0, #7
 8001d12:	f000 fd87 	bl	8002824 <triggerSMSreturn>
						break;
 8001d16:	e001      	b.n	8001d1c <processingComingMsg+0xdc>
						break;
 8001d18:	bf00      	nop
 8001d1a:	e000      	b.n	8001d1e <processingComingMsg+0xde>
						break;
 8001d1c:	bf00      	nop
					break;
 8001d1e:	bf00      	nop
			}
			break;
 8001d20:	e0c6      	b.n	8001eb0 <processingComingMsg+0x270>
		case PACKT_CMD:
			cmdType = checkCMDtype(Msg);
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f7ff fe2b 	bl	800197e <checkCMDtype>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	77bb      	strb	r3, [r7, #30]
			switch (cmdType) {
 8001d2c:	7fbb      	ldrb	r3, [r7, #30]
 8001d2e:	3b01      	subs	r3, #1
 8001d30:	2b07      	cmp	r3, #7
 8001d32:	d84e      	bhi.n	8001dd2 <processingComingMsg+0x192>
 8001d34:	a201      	add	r2, pc, #4	; (adr r2, 8001d3c <processingComingMsg+0xfc>)
 8001d36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d3a:	bf00      	nop
 8001d3c:	08001d5d 	.word	0x08001d5d
 8001d40:	08001d67 	.word	0x08001d67
 8001d44:	08001dd3 	.word	0x08001dd3
 8001d48:	08001dd3 	.word	0x08001dd3
 8001d4c:	08001dd3 	.word	0x08001dd3
 8001d50:	08001dd3 	.word	0x08001dd3
 8001d54:	08001db9 	.word	0x08001db9
 8001d58:	08001dc9 	.word	0x08001dc9
				case CMD_PREPARE_CALIB:
					triggerTaskflag(TASK_PREPARE_CALIB, FLAG_EN);
 8001d5c:	2101      	movs	r1, #1
 8001d5e:	2002      	movs	r0, #2
 8001d60:	f002 fbfe 	bl	8004560 <triggerTaskflag>
					break;
 8001d64:	e036      	b.n	8001dd4 <processingComingMsg+0x194>
				case CMD_START_CALIB:
					// Get time in package
					 calibtime = buff2Fourbyte( Msg+ (uint8_t)ADDDATA_POS );
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	3303      	adds	r3, #3
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f002 fac5 	bl	80042fa <buff2Fourbyte>
 8001d70:	61b8      	str	r0, [r7, #24]
					_RTC tmpRTC;
					epochtine2RTC(calibtime, &tmpRTC);
 8001d72:	69bb      	ldr	r3, [r7, #24]
 8001d74:	2200      	movs	r2, #0
 8001d76:	461c      	mov	r4, r3
 8001d78:	4615      	mov	r5, r2
 8001d7a:	f107 030c 	add.w	r3, r7, #12
 8001d7e:	461a      	mov	r2, r3
 8001d80:	4620      	mov	r0, r4
 8001d82:	4629      	mov	r1, r5
 8001d84:	f001 f8ae 	bl	8002ee4 <epochtine2RTC>
					// Save Calib time
					__MY_STATION->calibTime.hour = tmpRTC.Hour;
 8001d88:	4b4b      	ldr	r3, [pc, #300]	; (8001eb8 <processingComingMsg+0x278>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	7c3a      	ldrb	r2, [r7, #16]
 8001d8e:	74da      	strb	r2, [r3, #19]
					__MY_STATION->calibTime.min = tmpRTC.Min;
 8001d90:	4b49      	ldr	r3, [pc, #292]	; (8001eb8 <processingComingMsg+0x278>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	7c7a      	ldrb	r2, [r7, #17]
 8001d96:	751a      	strb	r2, [r3, #20]
					__MY_STATION->calibTime.sec = tmpRTC.Sec;
 8001d98:	4b47      	ldr	r3, [pc, #284]	; (8001eb8 <processingComingMsg+0x278>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	7cba      	ldrb	r2, [r7, #18]
 8001d9e:	755a      	strb	r2, [r3, #21]
					// Set alarm for Calib
					DS3231_ClearAlarm1();
 8001da0:	f001 fa6e 	bl	8003280 <DS3231_ClearAlarm1>
					DS3231_SetAlarm1(ALARM_MODE_ALL_MATCHED, tmpRTC.Date, tmpRTC.Hour, tmpRTC.Min, tmpRTC.Sec);
 8001da4:	7bb9      	ldrb	r1, [r7, #14]
 8001da6:	7c3a      	ldrb	r2, [r7, #16]
 8001da8:	7c78      	ldrb	r0, [r7, #17]
 8001daa:	7cbb      	ldrb	r3, [r7, #18]
 8001dac:	9300      	str	r3, [sp, #0]
 8001dae:	4603      	mov	r3, r0
 8001db0:	2000      	movs	r0, #0
 8001db2:	f001 f9c5 	bl	8003140 <DS3231_SetAlarm1>

					break;
 8001db6:	e00d      	b.n	8001dd4 <processingComingMsg+0x194>
				case CMD_CTRL_MBA:
					//Get MBA state from package and switch contactor
					switchContactor(getMBAstate(Msg));
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	f7ff ff21 	bl	8001c00 <getMBAstate>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f000 f949 	bl	8002058 <switchContactor>
					break;
 8001dc6:	e005      	b.n	8001dd4 <processingComingMsg+0x194>
				case CMD_CTRL_STEP_MOTOR:
					//Get data to control step motor
					triggerTaskflag(TASK_CTRL_STEPMOR, FLAG_EN);
 8001dc8:	2101      	movs	r1, #1
 8001dca:	2005      	movs	r0, #5
 8001dcc:	f002 fbc8 	bl	8004560 <triggerTaskflag>
					break;
 8001dd0:	e000      	b.n	8001dd4 <processingComingMsg+0x194>
				default:
					break;
 8001dd2:	bf00      	nop
			}
			break;
 8001dd4:	e06c      	b.n	8001eb0 <processingComingMsg+0x270>
		case PACKT_RESDATA:
			dataREStype = checkDataREStype(Msg);
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f7ff fdc5 	bl	8001966 <checkDataREStype>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	777b      	strb	r3, [r7, #29]
			switch (dataREStype) {
 8001de0:	7f7b      	ldrb	r3, [r7, #29]
 8001de2:	3b01      	subs	r3, #1
 8001de4:	2b06      	cmp	r3, #6
 8001de6:	d83c      	bhi.n	8001e62 <processingComingMsg+0x222>
 8001de8:	a201      	add	r2, pc, #4	; (adr r2, 8001df0 <processingComingMsg+0x1b0>)
 8001dea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dee:	bf00      	nop
 8001df0:	08001e0d 	.word	0x08001e0d
 8001df4:	08001e21 	.word	0x08001e21
 8001df8:	08001e63 	.word	0x08001e63
 8001dfc:	08001e63 	.word	0x08001e63
 8001e00:	08001e35 	.word	0x08001e35
 8001e04:	08001e63 	.word	0x08001e63
 8001e08:	08001e49 	.word	0x08001e49
			case DATA_PERIOD:
				if ( Msg[RESSTATUS_POS] == RES_OK)	{
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	3302      	adds	r3, #2
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d127      	bne.n	8001e66 <processingComingMsg+0x226>
					triggerTaskflag(TASK_SEND_DATAPERIOD, FLAG_DIS);
 8001e16:	2100      	movs	r1, #0
 8001e18:	2008      	movs	r0, #8
 8001e1a:	f002 fba1 	bl	8004560 <triggerTaskflag>
				}
				break;
 8001e1e:	e022      	b.n	8001e66 <processingComingMsg+0x226>
			case DATA_NETWREADY:
				if ( Msg[RESSTATUS_POS] == RES_OK)	{
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	3302      	adds	r3, #2
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d11f      	bne.n	8001e6a <processingComingMsg+0x22a>
					triggerTaskflag(TASK_SEND_NWREADY, FLAG_DIS);
 8001e2a:	2100      	movs	r1, #0
 8001e2c:	2007      	movs	r0, #7
 8001e2e:	f002 fb97 	bl	8004560 <triggerTaskflag>

				}
				break;
 8001e32:	e01a      	b.n	8001e6a <processingComingMsg+0x22a>
			case DATA_CALIB:
				if ( Msg[RESSTATUS_POS] == RES_OK)	{
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	3302      	adds	r3, #2
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d117      	bne.n	8001e6e <processingComingMsg+0x22e>
//					markassentDatacalibsuccess();
					triggerTaskflag(TASK_SEND_DATACALIB, FLAG_DIS);
 8001e3e:	2100      	movs	r1, #0
 8001e40:	2009      	movs	r0, #9
 8001e42:	f002 fb8d 	bl	8004560 <triggerTaskflag>
				}
				break;
 8001e46:	e012      	b.n	8001e6e <processingComingMsg+0x22e>
			case DATA_AFTERCALIB:
				if ( Msg[RESSTATUS_POS] == RES_OK)	{
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	3302      	adds	r3, #2
 8001e4c:	781b      	ldrb	r3, [r3, #0]
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d10f      	bne.n	8001e72 <processingComingMsg+0x232>
					triggerTaskflag(TASK_SEND_DATAAFTERCALIB, FLAG_DIS);
 8001e52:	2100      	movs	r1, #0
 8001e54:	200a      	movs	r0, #10
 8001e56:	f002 fb83 	bl	8004560 <triggerTaskflag>
					setStationMode(STATION_MODE_NORMAL);
 8001e5a:	2000      	movs	r0, #0
 8001e5c:	f003 f820 	bl	8004ea0 <setStationMode>
				}
				break;
 8001e60:	e007      	b.n	8001e72 <processingComingMsg+0x232>
			default:
				break;
 8001e62:	bf00      	nop
 8001e64:	e024      	b.n	8001eb0 <processingComingMsg+0x270>
				break;
 8001e66:	bf00      	nop
 8001e68:	e022      	b.n	8001eb0 <processingComingMsg+0x270>
				break;
 8001e6a:	bf00      	nop
 8001e6c:	e020      	b.n	8001eb0 <processingComingMsg+0x270>
				break;
 8001e6e:	bf00      	nop
 8001e70:	e01e      	b.n	8001eb0 <processingComingMsg+0x270>
				break;
 8001e72:	bf00      	nop
			}
			break;
 8001e74:	e01c      	b.n	8001eb0 <processingComingMsg+0x270>
		case PACKT_RESCMD:
			cmdType = checkCMDtype(Msg);
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f7ff fd81 	bl	800197e <checkCMDtype>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	77bb      	strb	r3, [r7, #30]
			switch (cmdType)	{
 8001e80:	7fbb      	ldrb	r3, [r7, #30]
 8001e82:	2b07      	cmp	r3, #7
 8001e84:	d001      	beq.n	8001e8a <processingComingMsg+0x24a>
 8001e86:	2b08      	cmp	r3, #8
				if (Msg[RESSTATUS_POS] == RES_OK)	{

				}
				break;
			default:
				break;
 8001e88:	e000      	b.n	8001e8c <processingComingMsg+0x24c>
				break;
 8001e8a:	bf00      	nop
			}
			break;
 8001e8c:	e010      	b.n	8001eb0 <processingComingMsg+0x270>
		case PACKT_RESREGISTER:
			// Get Register status
			if (Msg[RESSTATUS_POS] == RES_OK)	{
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	3302      	adds	r3, #2
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d10a      	bne.n	8001eae <processingComingMsg+0x26e>
				triggerTaskflag(TASK_REGISTER, FLAG_DIS);
 8001e98:	2100      	movs	r1, #0
 8001e9a:	2000      	movs	r0, #0
 8001e9c:	f002 fb60 	bl	8004560 <triggerTaskflag>
			}
			break;
 8001ea0:	e005      	b.n	8001eae <processingComingMsg+0x26e>
	if ( !checkCRC(Msg, Msg_len) )	return;
 8001ea2:	bf00      	nop
 8001ea4:	e004      	b.n	8001eb0 <processingComingMsg+0x270>
	if ( !checkNodeID(Msg, stID) )	return;
 8001ea6:	bf00      	nop
 8001ea8:	e002      	b.n	8001eb0 <processingComingMsg+0x270>
		default:
			break;
 8001eaa:	bf00      	nop
 8001eac:	e000      	b.n	8001eb0 <processingComingMsg+0x270>
			break;
 8001eae:	bf00      	nop
	}
}
 8001eb0:	3720      	adds	r7, #32
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bdb0      	pop	{r4, r5, r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	20001120 	.word	0x20001120

08001ebc <CMD_SMS_calib>:
#include "stationCMD.h"
#include "Serial_log.h"


uint8_t CMD_SMS_calib (uint8_t *cmddata, uint16_t datalen)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b086      	sub	sp, #24
 8001ec0:	af04      	add	r7, sp, #16
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	460b      	mov	r3, r1
 8001ec6:	807b      	strh	r3, [r7, #2]
	if (sendCMDtoServer( CMD_SMS_CALIB, cmddata, datalen, MBA_NULL,
 8001ec8:	887a      	ldrh	r2, [r7, #2]
 8001eca:	2300      	movs	r3, #0
 8001ecc:	9302      	str	r3, [sp, #8]
 8001ece:	2303      	movs	r3, #3
 8001ed0:	9301      	str	r3, [sp, #4]
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	9300      	str	r3, [sp, #0]
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	6879      	ldr	r1, [r7, #4]
 8001eda:	2003      	movs	r0, #3
 8001edc:	f7ff fbfc 	bl	80016d8 <sendCMDtoServer>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d004      	beq.n	8001ef0 <CMD_SMS_calib+0x34>
			STEPM_DIR_DEFAULT , STEPM_MODE_DEFAULT, 0) )	{
		Serial_log_string("Sent \"Calibration\" message to server\r\n");
 8001ee6:	4805      	ldr	r0, [pc, #20]	; (8001efc <CMD_SMS_calib+0x40>)
 8001ee8:	f7fe fff2 	bl	8000ed0 <Serial_log_string>
		return 1;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e000      	b.n	8001ef2 <CMD_SMS_calib+0x36>
	}
	return 0;
 8001ef0:	2300      	movs	r3, #0
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3708      	adds	r7, #8
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	0800d9bc 	.word	0x0800d9bc

08001f00 <CMD_SMS_getStatus>:

uint8_t CMD_SMS_getStatus ( uint8_t *cmddata, uint16_t datalen)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b086      	sub	sp, #24
 8001f04:	af04      	add	r7, sp, #16
 8001f06:	6078      	str	r0, [r7, #4]
 8001f08:	460b      	mov	r3, r1
 8001f0a:	807b      	strh	r3, [r7, #2]
	if (sendCMDtoServer(CMD_SMS_GETSTATUS, cmddata, datalen, MBA_NULL,
 8001f0c:	887a      	ldrh	r2, [r7, #2]
 8001f0e:	2300      	movs	r3, #0
 8001f10:	9302      	str	r3, [sp, #8]
 8001f12:	2303      	movs	r3, #3
 8001f14:	9301      	str	r3, [sp, #4]
 8001f16:	2303      	movs	r3, #3
 8001f18:	9300      	str	r3, [sp, #0]
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	6879      	ldr	r1, [r7, #4]
 8001f1e:	2004      	movs	r0, #4
 8001f20:	f7ff fbda 	bl	80016d8 <sendCMDtoServer>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d004      	beq.n	8001f34 <CMD_SMS_getStatus+0x34>
			STEPM_DIR_DEFAULT , STEPM_MODE_DEFAULT, 0) )	{
		Serial_log_string("Sent \"Get status\" message to server\r\n");
 8001f2a:	4805      	ldr	r0, [pc, #20]	; (8001f40 <CMD_SMS_getStatus+0x40>)
 8001f2c:	f7fe ffd0 	bl	8000ed0 <Serial_log_string>
		return 1;
 8001f30:	2301      	movs	r3, #1
 8001f32:	e000      	b.n	8001f36 <CMD_SMS_getStatus+0x36>
	}
	return 0;
 8001f34:	2300      	movs	r3, #0
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3708      	adds	r7, #8
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	0800d9e4 	.word	0x0800d9e4

08001f44 <CMD_SMS_Ctrl_MBA>:

uint8_t CMD_SMS_Ctrl_MBA ( uint8_t *cmddata, uint16_t datalen, MBA_state_t MBAstate)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b086      	sub	sp, #24
 8001f48:	af04      	add	r7, sp, #16
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	460b      	mov	r3, r1
 8001f4e:	807b      	strh	r3, [r7, #2]
 8001f50:	4613      	mov	r3, r2
 8001f52:	707b      	strb	r3, [r7, #1]
	if (sendCMDtoServer(CMD_CTRL_MBA, cmddata, datalen, MBAstate,
 8001f54:	787b      	ldrb	r3, [r7, #1]
 8001f56:	887a      	ldrh	r2, [r7, #2]
 8001f58:	2100      	movs	r1, #0
 8001f5a:	9102      	str	r1, [sp, #8]
 8001f5c:	2103      	movs	r1, #3
 8001f5e:	9101      	str	r1, [sp, #4]
 8001f60:	2103      	movs	r1, #3
 8001f62:	9100      	str	r1, [sp, #0]
 8001f64:	6879      	ldr	r1, [r7, #4]
 8001f66:	2007      	movs	r0, #7
 8001f68:	f7ff fbb6 	bl	80016d8 <sendCMDtoServer>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d004      	beq.n	8001f7c <CMD_SMS_Ctrl_MBA+0x38>
			STEPM_DIR_DEFAULT , STEPM_MODE_DEFAULT, 0) )	{
		Serial_log_string("Sent \"Control MBA\" message to server\r\n");
 8001f72:	4805      	ldr	r0, [pc, #20]	; (8001f88 <CMD_SMS_Ctrl_MBA+0x44>)
 8001f74:	f7fe ffac 	bl	8000ed0 <Serial_log_string>
		return 1;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e000      	b.n	8001f7e <CMD_SMS_Ctrl_MBA+0x3a>
	}
	return 0;
 8001f7c:	2300      	movs	r3, #0


}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3708      	adds	r7, #8
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	0800da0c 	.word	0x0800da0c

08001f8c <CMD_SMS_Ctrl_StepM>:

uint8_t CMD_SMS_Ctrl_StepM ( uint8_t *cmddata, uint16_t datalen, Stepmotor_dir_t stepDIR, Stepmotor_change_mode_t stepMode, uint8_t changeValue)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b086      	sub	sp, #24
 8001f90:	af04      	add	r7, sp, #16
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	4608      	mov	r0, r1
 8001f96:	4611      	mov	r1, r2
 8001f98:	461a      	mov	r2, r3
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	807b      	strh	r3, [r7, #2]
 8001f9e:	460b      	mov	r3, r1
 8001fa0:	707b      	strb	r3, [r7, #1]
 8001fa2:	4613      	mov	r3, r2
 8001fa4:	703b      	strb	r3, [r7, #0]
	if (sendCMDtoServer(CMD_CTRL_STEP_MOTOR, cmddata, datalen, MBA_NULL,stepDIR , stepMode, changeValue) )	{
 8001fa6:	887a      	ldrh	r2, [r7, #2]
 8001fa8:	7c3b      	ldrb	r3, [r7, #16]
 8001faa:	9302      	str	r3, [sp, #8]
 8001fac:	783b      	ldrb	r3, [r7, #0]
 8001fae:	9301      	str	r3, [sp, #4]
 8001fb0:	787b      	ldrb	r3, [r7, #1]
 8001fb2:	9300      	str	r3, [sp, #0]
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	6879      	ldr	r1, [r7, #4]
 8001fb8:	2008      	movs	r0, #8
 8001fba:	f7ff fb8d 	bl	80016d8 <sendCMDtoServer>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d004      	beq.n	8001fce <CMD_SMS_Ctrl_StepM+0x42>
		Serial_log_string("Sent \"Control Step motor\" message to server\r\n");
 8001fc4:	4804      	ldr	r0, [pc, #16]	; (8001fd8 <CMD_SMS_Ctrl_StepM+0x4c>)
 8001fc6:	f7fe ff83 	bl	8000ed0 <Serial_log_string>
		return 1;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e000      	b.n	8001fd0 <CMD_SMS_Ctrl_StepM+0x44>
	}
	return 0;
 8001fce:	2300      	movs	r3, #0
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3708      	adds	r7, #8
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	0800da34 	.word	0x0800da34

08001fdc <CMD_SMS_getStationLatestData>:

uint8_t CMD_SMS_getStationLatestData ( uint8_t *cmddata, uint16_t datalen)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b086      	sub	sp, #24
 8001fe0:	af04      	add	r7, sp, #16
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	460b      	mov	r3, r1
 8001fe6:	807b      	strh	r3, [r7, #2]
	if (sendCMDtoServer(CMD_SMS_GETSTATUS, cmddata, datalen, MBA_NULL,
 8001fe8:	887a      	ldrh	r2, [r7, #2]
 8001fea:	2300      	movs	r3, #0
 8001fec:	9302      	str	r3, [sp, #8]
 8001fee:	2303      	movs	r3, #3
 8001ff0:	9301      	str	r3, [sp, #4]
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	9300      	str	r3, [sp, #0]
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	6879      	ldr	r1, [r7, #4]
 8001ffa:	2004      	movs	r0, #4
 8001ffc:	f7ff fb6c 	bl	80016d8 <sendCMDtoServer>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d004      	beq.n	8002010 <CMD_SMS_getStationLatestData+0x34>
			STEPM_DIR_DEFAULT , STEPM_MODE_DEFAULT, 0) )	{
		Serial_log_string("Sent \"Get latest station data\" message to server\r\n");
 8002006:	4805      	ldr	r0, [pc, #20]	; (800201c <CMD_SMS_getStationLatestData+0x40>)
 8002008:	f7fe ff62 	bl	8000ed0 <Serial_log_string>
		return 1;
 800200c:	2301      	movs	r3, #1
 800200e:	e000      	b.n	8002012 <CMD_SMS_getStationLatestData+0x36>
	}
	return 0;
 8002010:	2300      	movs	r3, #0
}
 8002012:	4618      	mov	r0, r3
 8002014:	3708      	adds	r7, #8
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	0800da64 	.word	0x0800da64

08002020 <CMD_SMS_getSensorLatestData>:

uint8_t CMD_SMS_getSensorLatestData ( uint8_t *cmddata, uint16_t datalen)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b086      	sub	sp, #24
 8002024:	af04      	add	r7, sp, #16
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	460b      	mov	r3, r1
 800202a:	807b      	strh	r3, [r7, #2]
	if (sendCMDtoServer( CMD_SMS_GETSTATUS, cmddata, datalen, MBA_NULL,STEPM_DIR_DEFAULT , STEPM_MODE_DEFAULT, 0) )
 800202c:	887a      	ldrh	r2, [r7, #2]
 800202e:	2300      	movs	r3, #0
 8002030:	9302      	str	r3, [sp, #8]
 8002032:	2303      	movs	r3, #3
 8002034:	9301      	str	r3, [sp, #4]
 8002036:	2303      	movs	r3, #3
 8002038:	9300      	str	r3, [sp, #0]
 800203a:	2300      	movs	r3, #0
 800203c:	6879      	ldr	r1, [r7, #4]
 800203e:	2004      	movs	r0, #4
 8002040:	f7ff fb4a 	bl	80016d8 <sendCMDtoServer>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d001      	beq.n	800204e <CMD_SMS_getSensorLatestData+0x2e>
		return 1;
 800204a:	2301      	movs	r3, #1
 800204c:	e000      	b.n	8002050 <CMD_SMS_getSensorLatestData+0x30>
	return 0;
 800204e:	2300      	movs	r3, #0
}
 8002050:	4618      	mov	r0, r3
 8002052:	3708      	adds	r7, #8
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}

08002058 <switchContactor>:
#include  "gpio.h"
#include "Task.h"


MBA_state_t switchContactor (MBA_state_t ONofOFF)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0
 800205e:	4603      	mov	r3, r0
 8002060:	71fb      	strb	r3, [r7, #7]
	switch (ONofOFF)	{
 8002062:	79fb      	ldrb	r3, [r7, #7]
 8002064:	2b01      	cmp	r3, #1
 8002066:	d002      	beq.n	800206e <switchContactor+0x16>
 8002068:	2b02      	cmp	r3, #2
 800206a:	d006      	beq.n	800207a <switchContactor+0x22>
		break;
	case MBA_OFF:
		HAL_GPIO_WritePin(MBA_CONTACTOR_GPIO_Port, MBA_CONTACTOR_Pin, GPIO_PIN_RESET);
		break;
	default:
		break;
 800206c:	e00b      	b.n	8002086 <switchContactor+0x2e>
		HAL_GPIO_WritePin(MBA_CONTACTOR_GPIO_Port, MBA_CONTACTOR_Pin, GPIO_PIN_SET);
 800206e:	2201      	movs	r2, #1
 8002070:	2110      	movs	r1, #16
 8002072:	4807      	ldr	r0, [pc, #28]	; (8002090 <switchContactor+0x38>)
 8002074:	f005 fda0 	bl	8007bb8 <HAL_GPIO_WritePin>
		break;
 8002078:	e005      	b.n	8002086 <switchContactor+0x2e>
		HAL_GPIO_WritePin(MBA_CONTACTOR_GPIO_Port, MBA_CONTACTOR_Pin, GPIO_PIN_RESET);
 800207a:	2200      	movs	r2, #0
 800207c:	2110      	movs	r1, #16
 800207e:	4804      	ldr	r0, [pc, #16]	; (8002090 <switchContactor+0x38>)
 8002080:	f005 fd9a 	bl	8007bb8 <HAL_GPIO_WritePin>
		break;
 8002084:	bf00      	nop
	}
	// send MBA status to Server
	return ONofOFF;
 8002086:	79fb      	ldrb	r3, [r7, #7]
}
 8002088:	4618      	mov	r0, r3
 800208a:	3708      	adds	r7, #8
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}
 8002090:	40010800 	.word	0x40010800

08002094 <initSIM>:
uint16_t SMS_len = 0;



void initSIM(UART_HandleTypeDef *huart, DMA_HandleTypeDef  *hdma , SIM_t *mySIM)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b084      	sub	sp, #16
 8002098:	af00      	add	r7, sp, #0
 800209a:	60f8      	str	r0, [r7, #12]
 800209c:	60b9      	str	r1, [r7, #8]
 800209e:	607a      	str	r2, [r7, #4]
	__SIM = mySIM;
 80020a0:	4a07      	ldr	r2, [pc, #28]	; (80020c0 <initSIM+0x2c>)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6013      	str	r3, [r2, #0]
	__SIM_UART = huart;
 80020a6:	4a07      	ldr	r2, [pc, #28]	; (80020c4 <initSIM+0x30>)
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	6013      	str	r3, [r2, #0]
	__SIM_DMA_UART = hdma;
 80020ac:	4a06      	ldr	r2, [pc, #24]	; (80020c8 <initSIM+0x34>)
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	6013      	str	r3, [r2, #0]
	enableReceiveDMAtoIdle_SIM();
 80020b2:	f000 f80b 	bl	80020cc <enableReceiveDMAtoIdle_SIM>
//	SIM_sendCMD((uint8_t*)"ATE0",(uint8_t*)"OK", ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, 1000);
}
 80020b6:	bf00      	nop
 80020b8:	3710      	adds	r7, #16
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	20001130 	.word	0x20001130
 80020c4:	20001128 	.word	0x20001128
 80020c8:	2000112c 	.word	0x2000112c

080020cc <enableReceiveDMAtoIdle_SIM>:
void enableReceiveDMAtoIdle_SIM(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
	 HAL_UARTEx_ReceiveToIdle_DMA(__SIM_UART, SIMRxbuff, SIM_RXBUFF_SIZE);
 80020d0:	4b09      	ldr	r3, [pc, #36]	; (80020f8 <enableReceiveDMAtoIdle_SIM+0x2c>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020d8:	4908      	ldr	r1, [pc, #32]	; (80020fc <enableReceiveDMAtoIdle_SIM+0x30>)
 80020da:	4618      	mov	r0, r3
 80020dc:	f007 fdef 	bl	8009cbe <HAL_UARTEx_ReceiveToIdle_DMA>
	  __HAL_DMA_DISABLE_IT(__SIM_DMA_UART,DMA_IT_HT);
 80020e0:	4b07      	ldr	r3, [pc, #28]	; (8002100 <enableReceiveDMAtoIdle_SIM+0x34>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	4b05      	ldr	r3, [pc, #20]	; (8002100 <enableReceiveDMAtoIdle_SIM+0x34>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f022 0204 	bic.w	r2, r2, #4
 80020f2:	601a      	str	r2, [r3, #0]
}
 80020f4:	bf00      	nop
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	20001128 	.word	0x20001128
 80020fc:	20001338 	.word	0x20001338
 8002100:	2000112c 	.word	0x2000112c

08002104 <SIM_callback>:

void SIM_callback(uint16_t Size)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b084      	sub	sp, #16
 8002108:	af00      	add	r7, sp, #0
 800210a:	4603      	mov	r3, r0
 800210c:	80fb      	strh	r3, [r7, #6]


		oldPos = newPos;  // Update the last position before copying new data
 800210e:	4b56      	ldr	r3, [pc, #344]	; (8002268 <SIM_callback+0x164>)
 8002110:	881a      	ldrh	r2, [r3, #0]
 8002112:	4b56      	ldr	r3, [pc, #344]	; (800226c <SIM_callback+0x168>)
 8002114:	801a      	strh	r2, [r3, #0]

		/* If the data in large and it is about to exceed the buffer size, we have to route it to the start of the buffer
		 * This is to maintain the circular buffer
		 * The old data in the main buffer will be overlapped
		 */
		if (oldPos+Size > SIM_BUFF_SIZE)  // If the current position + new data size is greater than the main buffer
 8002116:	4b55      	ldr	r3, [pc, #340]	; (800226c <SIM_callback+0x168>)
 8002118:	881b      	ldrh	r3, [r3, #0]
 800211a:	461a      	mov	r2, r3
 800211c:	88fb      	ldrh	r3, [r7, #6]
 800211e:	4413      	add	r3, r2
 8002120:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002124:	dd22      	ble.n	800216c <SIM_callback+0x68>
		{
			uint16_t datatocopy = SIM_BUFF_SIZE-oldPos;  // find out how much space is left in the main buffer
 8002126:	4b51      	ldr	r3, [pc, #324]	; (800226c <SIM_callback+0x168>)
 8002128:	881b      	ldrh	r3, [r3, #0]
 800212a:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800212e:	81fb      	strh	r3, [r7, #14]
			memcpy ((uint8_t *)SIMbuff+oldPos, (uint8_t *)SIMRxbuff, datatocopy);  // copy data in that remaining space
 8002130:	4b4e      	ldr	r3, [pc, #312]	; (800226c <SIM_callback+0x168>)
 8002132:	881b      	ldrh	r3, [r3, #0]
 8002134:	461a      	mov	r2, r3
 8002136:	4b4e      	ldr	r3, [pc, #312]	; (8002270 <SIM_callback+0x16c>)
 8002138:	4413      	add	r3, r2
 800213a:	89fa      	ldrh	r2, [r7, #14]
 800213c:	494d      	ldr	r1, [pc, #308]	; (8002274 <SIM_callback+0x170>)
 800213e:	4618      	mov	r0, r3
 8002140:	f008 fe84 	bl	800ae4c <memcpy>

			oldPos = 0;  // point to the start of the buffer
 8002144:	4b49      	ldr	r3, [pc, #292]	; (800226c <SIM_callback+0x168>)
 8002146:	2200      	movs	r2, #0
 8002148:	801a      	strh	r2, [r3, #0]
			memcpy ((uint8_t *)SIMbuff, (uint8_t *)SIMRxbuff+datatocopy, (Size-datatocopy));  // copy the remaining data
 800214a:	89fb      	ldrh	r3, [r7, #14]
 800214c:	4a49      	ldr	r2, [pc, #292]	; (8002274 <SIM_callback+0x170>)
 800214e:	1899      	adds	r1, r3, r2
 8002150:	88fa      	ldrh	r2, [r7, #6]
 8002152:	89fb      	ldrh	r3, [r7, #14]
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	461a      	mov	r2, r3
 8002158:	4845      	ldr	r0, [pc, #276]	; (8002270 <SIM_callback+0x16c>)
 800215a:	f008 fe77 	bl	800ae4c <memcpy>
			newPos = (Size-datatocopy);  // update the position
 800215e:	88fa      	ldrh	r2, [r7, #6]
 8002160:	89fb      	ldrh	r3, [r7, #14]
 8002162:	1ad3      	subs	r3, r2, r3
 8002164:	b29a      	uxth	r2, r3
 8002166:	4b40      	ldr	r3, [pc, #256]	; (8002268 <SIM_callback+0x164>)
 8002168:	801a      	strh	r2, [r3, #0]
 800216a:	e010      	b.n	800218e <SIM_callback+0x8a>
		/* if the current position + new data size is less than the main buffer
		 * we will simply copy the data into the buffer and update the position
		 */
		else
		{
			memcpy ((uint8_t *)SIMbuff+oldPos, (uint8_t *)SIMRxbuff, Size);
 800216c:	4b3f      	ldr	r3, [pc, #252]	; (800226c <SIM_callback+0x168>)
 800216e:	881b      	ldrh	r3, [r3, #0]
 8002170:	461a      	mov	r2, r3
 8002172:	4b3f      	ldr	r3, [pc, #252]	; (8002270 <SIM_callback+0x16c>)
 8002174:	4413      	add	r3, r2
 8002176:	88fa      	ldrh	r2, [r7, #6]
 8002178:	493e      	ldr	r1, [pc, #248]	; (8002274 <SIM_callback+0x170>)
 800217a:	4618      	mov	r0, r3
 800217c:	f008 fe66 	bl	800ae4c <memcpy>
			newPos = Size+oldPos;
 8002180:	4b3a      	ldr	r3, [pc, #232]	; (800226c <SIM_callback+0x168>)
 8002182:	881a      	ldrh	r2, [r3, #0]
 8002184:	88fb      	ldrh	r3, [r7, #6]
 8002186:	4413      	add	r3, r2
 8002188:	b29a      	uxth	r2, r3
 800218a:	4b37      	ldr	r3, [pc, #220]	; (8002268 <SIM_callback+0x164>)
 800218c:	801a      	strh	r2, [r3, #0]

		/* Update the position of the Head
		 * If the current position + new size is less then the buffer size, Head will update normally
		 * Or else the head will be at the new position from the beginning
		 */
		if (head + Size < SIM_BUFF_SIZE ) head = head + Size;
 800218e:	4b3a      	ldr	r3, [pc, #232]	; (8002278 <SIM_callback+0x174>)
 8002190:	881b      	ldrh	r3, [r3, #0]
 8002192:	461a      	mov	r2, r3
 8002194:	88fb      	ldrh	r3, [r7, #6]
 8002196:	4413      	add	r3, r2
 8002198:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800219c:	da07      	bge.n	80021ae <SIM_callback+0xaa>
 800219e:	4b36      	ldr	r3, [pc, #216]	; (8002278 <SIM_callback+0x174>)
 80021a0:	881a      	ldrh	r2, [r3, #0]
 80021a2:	88fb      	ldrh	r3, [r7, #6]
 80021a4:	4413      	add	r3, r2
 80021a6:	b29a      	uxth	r2, r3
 80021a8:	4b33      	ldr	r3, [pc, #204]	; (8002278 <SIM_callback+0x174>)
 80021aa:	801a      	strh	r2, [r3, #0]
 80021ac:	e009      	b.n	80021c2 <SIM_callback+0xbe>
		else head = head + Size - SIM_BUFF_SIZE;
 80021ae:	4b32      	ldr	r3, [pc, #200]	; (8002278 <SIM_callback+0x174>)
 80021b0:	881a      	ldrh	r2, [r3, #0]
 80021b2:	88fb      	ldrh	r3, [r7, #6]
 80021b4:	4413      	add	r3, r2
 80021b6:	b29b      	uxth	r3, r3
 80021b8:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 80021bc:	b29a      	uxth	r2, r3
 80021be:	4b2e      	ldr	r3, [pc, #184]	; (8002278 <SIM_callback+0x174>)
 80021c0:	801a      	strh	r2, [r3, #0]

		/* start the DMA again */
		enableReceiveDMAtoIdle_SIM();
 80021c2:	f7ff ff83 	bl	80020cc <enableReceiveDMAtoIdle_SIM>

		// New SMS coming
		if (isWordinBuff(SIMRxbuff, Size, (uint8_t*)"+CMTI: \"SM\"") != NULL)
 80021c6:	88fb      	ldrh	r3, [r7, #6]
 80021c8:	4a2c      	ldr	r2, [pc, #176]	; (800227c <SIM_callback+0x178>)
 80021ca:	4619      	mov	r1, r3
 80021cc:	4829      	ldr	r0, [pc, #164]	; (8002274 <SIM_callback+0x170>)
 80021ce:	f001 ffc9 	bl	8004164 <isWordinBuff>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d002      	beq.n	80021de <SIM_callback+0xda>
		{
			newSMS = 1;
 80021d8:	4b29      	ldr	r3, [pc, #164]	; (8002280 <SIM_callback+0x17c>)
 80021da:	2201      	movs	r2, #1
 80021dc:	701a      	strb	r2, [r3, #0]
		}

		// Read SMS
		if (isWordinBuff(SIMRxbuff, Size, (uint8_t*)"+CMGR:") != NULL)	{
 80021de:	88fb      	ldrh	r3, [r7, #6]
 80021e0:	4a28      	ldr	r2, [pc, #160]	; (8002284 <SIM_callback+0x180>)
 80021e2:	4619      	mov	r1, r3
 80021e4:	4823      	ldr	r0, [pc, #140]	; (8002274 <SIM_callback+0x170>)
 80021e6:	f001 ffbd 	bl	8004164 <isWordinBuff>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d008      	beq.n	8002202 <SIM_callback+0xfe>
			memcpy(SMS_Rxbuff, SIMRxbuff, Size);
 80021f0:	88fb      	ldrh	r3, [r7, #6]
 80021f2:	461a      	mov	r2, r3
 80021f4:	491f      	ldr	r1, [pc, #124]	; (8002274 <SIM_callback+0x170>)
 80021f6:	4824      	ldr	r0, [pc, #144]	; (8002288 <SIM_callback+0x184>)
 80021f8:	f008 fe28 	bl	800ae4c <memcpy>
			SMS_len = Size;
 80021fc:	4a23      	ldr	r2, [pc, #140]	; (800228c <SIM_callback+0x188>)
 80021fe:	88fb      	ldrh	r3, [r7, #6]
 8002200:	8013      	strh	r3, [r2, #0]
		}
		if (isWordinBuff(SIMRxbuff, Size, (uint8_t*)"+CMGL: ") != NULL)	{
 8002202:	88fb      	ldrh	r3, [r7, #6]
 8002204:	4a22      	ldr	r2, [pc, #136]	; (8002290 <SIM_callback+0x18c>)
 8002206:	4619      	mov	r1, r3
 8002208:	481a      	ldr	r0, [pc, #104]	; (8002274 <SIM_callback+0x170>)
 800220a:	f001 ffab 	bl	8004164 <isWordinBuff>
 800220e:	4603      	mov	r3, r0
 8002210:	2b00      	cmp	r3, #0
 8002212:	d008      	beq.n	8002226 <SIM_callback+0x122>
			memcpy(SMS_Rxbuff, SIMRxbuff, Size);
 8002214:	88fb      	ldrh	r3, [r7, #6]
 8002216:	461a      	mov	r2, r3
 8002218:	4916      	ldr	r1, [pc, #88]	; (8002274 <SIM_callback+0x170>)
 800221a:	481b      	ldr	r0, [pc, #108]	; (8002288 <SIM_callback+0x184>)
 800221c:	f008 fe16 	bl	800ae4c <memcpy>
			SMS_len = Size;
 8002220:	4a1a      	ldr	r2, [pc, #104]	; (800228c <SIM_callback+0x188>)
 8002222:	88fb      	ldrh	r3, [r7, #6]
 8002224:	8013      	strh	r3, [r2, #0]
		}
		// New MQTT message
		if ( (isWordinBuff(SIMRxbuff, Size, (uint8_t*) "+CMQTTRXSTART:") != NULL)
 8002226:	88fb      	ldrh	r3, [r7, #6]
 8002228:	4a1a      	ldr	r2, [pc, #104]	; (8002294 <SIM_callback+0x190>)
 800222a:	4619      	mov	r1, r3
 800222c:	4811      	ldr	r0, [pc, #68]	; (8002274 <SIM_callback+0x170>)
 800222e:	f001 ff99 	bl	8004164 <isWordinBuff>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d013      	beq.n	8002260 <SIM_callback+0x15c>
				&& ( isWordinBuff(SIMRxbuff, Size,(uint8_t*) "+CMQTTRXEND:") != NULL ) )  	{
 8002238:	88fb      	ldrh	r3, [r7, #6]
 800223a:	4a17      	ldr	r2, [pc, #92]	; (8002298 <SIM_callback+0x194>)
 800223c:	4619      	mov	r1, r3
 800223e:	480d      	ldr	r0, [pc, #52]	; (8002274 <SIM_callback+0x170>)
 8002240:	f001 ff90 	bl	8004164 <isWordinBuff>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d00a      	beq.n	8002260 <SIM_callback+0x15c>
			memcpy(MQTT_Rxbuff, SIMRxbuff, Size);
 800224a:	88fb      	ldrh	r3, [r7, #6]
 800224c:	461a      	mov	r2, r3
 800224e:	4909      	ldr	r1, [pc, #36]	; (8002274 <SIM_callback+0x170>)
 8002250:	4812      	ldr	r0, [pc, #72]	; (800229c <SIM_callback+0x198>)
 8002252:	f008 fdfb 	bl	800ae4c <memcpy>
			MQTT_receive(MQTT_Rxbuff, Size);
 8002256:	88fb      	ldrh	r3, [r7, #6]
 8002258:	4619      	mov	r1, r3
 800225a:	4810      	ldr	r0, [pc, #64]	; (800229c <SIM_callback+0x198>)
 800225c:	f001 fc30 	bl	8003ac0 <MQTT_receive>

//		Serial_log_string("Rx: ");
//		Serial_log_buffer(SIMRxbuff, Size);
//		Serial_log_string(" ");

}
 8002260:	bf00      	nop
 8002262:	3710      	adds	r7, #16
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	20001136 	.word	0x20001136
 800226c:	20001134 	.word	0x20001134
 8002270:	20001138 	.word	0x20001138
 8002274:	20001338 	.word	0x20001338
 8002278:	20001938 	.word	0x20001938
 800227c:	0800da98 	.word	0x0800da98
 8002280:	2000193c 	.word	0x2000193c
 8002284:	0800daa4 	.word	0x0800daa4
 8002288:	20001438 	.word	0x20001438
 800228c:	2000193e 	.word	0x2000193e
 8002290:	0800daac 	.word	0x0800daac
 8002294:	0800dab4 	.word	0x0800dab4
 8002298:	0800dac4 	.word	0x0800dac4
 800229c:	20001538 	.word	0x20001538

080022a0 <SIM_checkMsg>:

SIM_res_t SIM_checkMsg(uint8_t *Msg, uint16_t timeout)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80022ac:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80022b0:	6018      	str	r0, [r3, #0]
 80022b2:	460a      	mov	r2, r1
 80022b4:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80022b8:	f2a3 230e 	subw	r3, r3, #526	; 0x20e
 80022bc:	801a      	strh	r2, [r3, #0]
	SIM_res_t res= SIM_NO_RES;
 80022be:	2302      	movs	r3, #2
 80022c0:	f887 320b 	strb.w	r3, [r7, #523]	; 0x20b
	timeout /= 500;
 80022c4:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80022c8:	f2a3 230e 	subw	r3, r3, #526	; 0x20e
 80022cc:	f507 7204 	add.w	r2, r7, #528	; 0x210
 80022d0:	f2a2 220e 	subw	r2, r2, #526	; 0x20e
 80022d4:	8812      	ldrh	r2, [r2, #0]
 80022d6:	494a      	ldr	r1, [pc, #296]	; (8002400 <SIM_checkMsg+0x160>)
 80022d8:	fba1 1202 	umull	r1, r2, r1, r2
 80022dc:	0952      	lsrs	r2, r2, #5
 80022de:	801a      	strh	r2, [r3, #0]
	uint8_t dataSize = 0;
 80022e0:	2300      	movs	r3, #0
 80022e2:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
	uint8_t tmpdbuff[SIM_BUFF_SIZE];
	memset( (char*)tmpdbuff, 0, SIM_BUFF_SIZE );
 80022e6:	f107 0308 	add.w	r3, r7, #8
 80022ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022ee:	2100      	movs	r1, #0
 80022f0:	4618      	mov	r0, r3
 80022f2:	f008 fdb9 	bl	800ae68 <memset>
	for (uint16_t i = 0; i < 500 ; i++)
 80022f6:	2300      	movs	r3, #0
 80022f8:	f8a7 320c 	strh.w	r3, [r7, #524]	; 0x20c
 80022fc:	e073      	b.n	80023e6 <SIM_checkMsg+0x146>
	{
		HAL_Delay(timeout);
 80022fe:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8002302:	f2a3 230e 	subw	r3, r3, #526	; 0x20e
 8002306:	881b      	ldrh	r3, [r3, #0]
 8002308:	4618      	mov	r0, r3
 800230a:	f004 faff 	bl	800690c <HAL_Delay>

		if (head > tail)
 800230e:	4b3d      	ldr	r3, [pc, #244]	; (8002404 <SIM_checkMsg+0x164>)
 8002310:	881a      	ldrh	r2, [r3, #0]
 8002312:	4b3d      	ldr	r3, [pc, #244]	; (8002408 <SIM_checkMsg+0x168>)
 8002314:	881b      	ldrh	r3, [r3, #0]
 8002316:	429a      	cmp	r2, r3
 8002318:	d915      	bls.n	8002346 <SIM_checkMsg+0xa6>
		{
			dataSize = head - tail ;
 800231a:	4b3a      	ldr	r3, [pc, #232]	; (8002404 <SIM_checkMsg+0x164>)
 800231c:	881b      	ldrh	r3, [r3, #0]
 800231e:	b2da      	uxtb	r2, r3
 8002320:	4b39      	ldr	r3, [pc, #228]	; (8002408 <SIM_checkMsg+0x168>)
 8002322:	881b      	ldrh	r3, [r3, #0]
 8002324:	b2db      	uxtb	r3, r3
 8002326:	1ad3      	subs	r3, r2, r3
 8002328:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
//			tmpdbuff = (uint8_t*)malloc(dataSize*sizeof(uint8_t));

			memcpy(tmpdbuff, SIMbuff + tail, dataSize);
 800232c:	4b36      	ldr	r3, [pc, #216]	; (8002408 <SIM_checkMsg+0x168>)
 800232e:	881b      	ldrh	r3, [r3, #0]
 8002330:	461a      	mov	r2, r3
 8002332:	4b36      	ldr	r3, [pc, #216]	; (800240c <SIM_checkMsg+0x16c>)
 8002334:	18d1      	adds	r1, r2, r3
 8002336:	f897 220f 	ldrb.w	r2, [r7, #527]	; 0x20f
 800233a:	f107 0308 	add.w	r3, r7, #8
 800233e:	4618      	mov	r0, r3
 8002340:	f008 fd84 	bl	800ae4c <memcpy>
 8002344:	e02a      	b.n	800239c <SIM_checkMsg+0xfc>
		}
		else if ( head < tail )
 8002346:	4b2f      	ldr	r3, [pc, #188]	; (8002404 <SIM_checkMsg+0x164>)
 8002348:	881a      	ldrh	r2, [r3, #0]
 800234a:	4b2f      	ldr	r3, [pc, #188]	; (8002408 <SIM_checkMsg+0x168>)
 800234c:	881b      	ldrh	r3, [r3, #0]
 800234e:	429a      	cmp	r2, r3
 8002350:	d243      	bcs.n	80023da <SIM_checkMsg+0x13a>
		{
			dataSize = SIM_BUFF_SIZE - tail + head ;
 8002352:	4b2c      	ldr	r3, [pc, #176]	; (8002404 <SIM_checkMsg+0x164>)
 8002354:	881b      	ldrh	r3, [r3, #0]
 8002356:	b2da      	uxtb	r2, r3
 8002358:	4b2b      	ldr	r3, [pc, #172]	; (8002408 <SIM_checkMsg+0x168>)
 800235a:	881b      	ldrh	r3, [r3, #0]
 800235c:	b2db      	uxtb	r3, r3
 800235e:	1ad3      	subs	r3, r2, r3
 8002360:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
//		 	tmpdbuff = (uint8_t*)malloc(dataSize*sizeof(uint8_t));
			memcpy(tmpdbuff, SIMbuff + tail, SIM_BUFF_SIZE - tail);
 8002364:	4b28      	ldr	r3, [pc, #160]	; (8002408 <SIM_checkMsg+0x168>)
 8002366:	881b      	ldrh	r3, [r3, #0]
 8002368:	461a      	mov	r2, r3
 800236a:	4b28      	ldr	r3, [pc, #160]	; (800240c <SIM_checkMsg+0x16c>)
 800236c:	18d1      	adds	r1, r2, r3
 800236e:	4b26      	ldr	r3, [pc, #152]	; (8002408 <SIM_checkMsg+0x168>)
 8002370:	881b      	ldrh	r3, [r3, #0]
 8002372:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8002376:	461a      	mov	r2, r3
 8002378:	f107 0308 	add.w	r3, r7, #8
 800237c:	4618      	mov	r0, r3
 800237e:	f008 fd65 	bl	800ae4c <memcpy>
			memcpy(tmpdbuff + SIM_BUFF_SIZE - tail, SIMbuff, head);
 8002382:	4b21      	ldr	r3, [pc, #132]	; (8002408 <SIM_checkMsg+0x168>)
 8002384:	881b      	ldrh	r3, [r3, #0]
 8002386:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800238a:	f107 0208 	add.w	r2, r7, #8
 800238e:	4413      	add	r3, r2
 8002390:	4a1c      	ldr	r2, [pc, #112]	; (8002404 <SIM_checkMsg+0x164>)
 8002392:	8812      	ldrh	r2, [r2, #0]
 8002394:	491d      	ldr	r1, [pc, #116]	; (800240c <SIM_checkMsg+0x16c>)
 8002396:	4618      	mov	r0, r3
 8002398:	f008 fd58 	bl	800ae4c <memcpy>
		}
		else {
			continue;
		}

		if ( isWordinBuff(tmpdbuff, dataSize, Msg) != NULL )	{
 800239c:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 80023a0:	b299      	uxth	r1, r3
 80023a2:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80023a6:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80023aa:	f107 0008 	add.w	r0, r7, #8
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	f001 fed8 	bl	8004164 <isWordinBuff>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d001      	beq.n	80023be <SIM_checkMsg+0x11e>
//			Serial_log_number(tail);
//			Serial_log_string(" ");
//			Serial_log_string("\nhead: ");
//			Serial_log_number(head);
//			Serial_log_string(" ");
			return SIM_RES_MSG ;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e01a      	b.n	80023f4 <SIM_checkMsg+0x154>
		}

		if ( isWordinBuff(tmpdbuff, dataSize, (uint8_t*)"ERROR") != NULL )	{
 80023be:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 80023c2:	b299      	uxth	r1, r3
 80023c4:	f107 0308 	add.w	r3, r7, #8
 80023c8:	4a11      	ldr	r2, [pc, #68]	; (8002410 <SIM_checkMsg+0x170>)
 80023ca:	4618      	mov	r0, r3
 80023cc:	f001 feca 	bl	8004164 <isWordinBuff>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d002      	beq.n	80023dc <SIM_checkMsg+0x13c>
//			Serial_log_string("err: ");
//			Serial_log_buffer(tmpdbuff, dataSize);
//			Serial_log_string(";");
			return SIM_ERROR ;
 80023d6:	2300      	movs	r3, #0
 80023d8:	e00c      	b.n	80023f4 <SIM_checkMsg+0x154>
			continue;
 80023da:	bf00      	nop
	for (uint16_t i = 0; i < 500 ; i++)
 80023dc:	f8b7 320c 	ldrh.w	r3, [r7, #524]	; 0x20c
 80023e0:	3301      	adds	r3, #1
 80023e2:	f8a7 320c 	strh.w	r3, [r7, #524]	; 0x20c
 80023e6:	f8b7 320c 	ldrh.w	r3, [r7, #524]	; 0x20c
 80023ea:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80023ee:	d386      	bcc.n	80022fe <SIM_checkMsg+0x5e>
//	Serial_log_number(tail);
//	Serial_log_string(" ");
//	Serial_log_string("\nhead: ");
//	Serial_log_number(head);
//	Serial_log_string(" ");
 	return res;
 80023f0:	f897 320b 	ldrb.w	r3, [r7, #523]	; 0x20b

}
 80023f4:	4618      	mov	r0, r3
 80023f6:	f507 7704 	add.w	r7, r7, #528	; 0x210
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	10624dd3 	.word	0x10624dd3
 8002404:	20001938 	.word	0x20001938
 8002408:	2000193a 	.word	0x2000193a
 800240c:	20001138 	.word	0x20001138
 8002410:	0800dad4 	.word	0x0800dad4

08002414 <SIM_sendCMD>:

SIM_res_t SIM_sendCMD(uint8_t *cmd, uint8_t *checkResMsg, uint8_t CheckResENorDIS, uint8_t ENorDISmarkasread, uint32_t timeout)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b09e      	sub	sp, #120	; 0x78
 8002418:	af00      	add	r7, sp, #0
 800241a:	60f8      	str	r0, [r7, #12]
 800241c:	60b9      	str	r1, [r7, #8]
 800241e:	4611      	mov	r1, r2
 8002420:	461a      	mov	r2, r3
 8002422:	460b      	mov	r3, r1
 8002424:	71fb      	strb	r3, [r7, #7]
 8002426:	4613      	mov	r3, r2
 8002428:	71bb      	strb	r3, [r7, #6]
	uint8_t SIM_Txbuff[100];
	uint8_t len = sprintf( (char*)SIM_Txbuff, "%s\r\n", cmd);
 800242a:	f107 0310 	add.w	r3, r7, #16
 800242e:	68fa      	ldr	r2, [r7, #12]
 8002430:	4918      	ldr	r1, [pc, #96]	; (8002494 <SIM_sendCMD+0x80>)
 8002432:	4618      	mov	r0, r3
 8002434:	f009 f8bc 	bl	800b5b0 <siprintf>
 8002438:	4603      	mov	r3, r0
 800243a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	if ( HAL_UART_Transmit(__SIM_UART, SIM_Txbuff, len, 0xFFFF) != HAL_OK )	{
 800243e:	4b16      	ldr	r3, [pc, #88]	; (8002498 <SIM_sendCMD+0x84>)
 8002440:	6818      	ldr	r0, [r3, #0]
 8002442:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8002446:	b29a      	uxth	r2, r3
 8002448:	f107 0110 	add.w	r1, r7, #16
 800244c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002450:	f007 fbb2 	bl	8009bb8 <HAL_UART_Transmit>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d002      	beq.n	8002460 <SIM_sendCMD+0x4c>
		Serial_log_string("UART transmit ERROR\r\n");
 800245a:	4810      	ldr	r0, [pc, #64]	; (800249c <SIM_sendCMD+0x88>)
 800245c:	f7fe fd38 	bl	8000ed0 <Serial_log_string>
	}

	if (CheckResENorDIS == ENABLE_SIM_CHECKRES)
 8002460:	79fb      	ldrb	r3, [r7, #7]
 8002462:	2b01      	cmp	r3, #1
 8002464:	d111      	bne.n	800248a <SIM_sendCMD+0x76>
	{
		SIM_res_t res = SIM_checkMsg(checkResMsg, timeout);
 8002466:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800246a:	b29b      	uxth	r3, r3
 800246c:	4619      	mov	r1, r3
 800246e:	68b8      	ldr	r0, [r7, #8]
 8002470:	f7ff ff16 	bl	80022a0 <SIM_checkMsg>
 8002474:	4603      	mov	r3, r0
 8002476:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
		if (ENorDISmarkasread == ENABLE_MARKASREAD)
 800247a:	79bb      	ldrb	r3, [r7, #6]
 800247c:	2b01      	cmp	r3, #1
 800247e:	d101      	bne.n	8002484 <SIM_sendCMD+0x70>
		{
			MarkAsReadData_SIM();
 8002480:	f000 f80e 	bl	80024a0 <MarkAsReadData_SIM>
		}
//		Serial_log_string("Res of CMD: ");
//		Serial_log_buffer(cmd, len);
//		Serial_log_number(res);
		return res;
 8002484:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8002488:	e000      	b.n	800248c <SIM_sendCMD+0x78>
	}
	return SIM_NO_RES;
 800248a:	2302      	movs	r3, #2
}
 800248c:	4618      	mov	r0, r3
 800248e:	3778      	adds	r7, #120	; 0x78
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}
 8002494:	0800dadc 	.word	0x0800dadc
 8002498:	20001128 	.word	0x20001128
 800249c:	0800dae4 	.word	0x0800dae4

080024a0 <MarkAsReadData_SIM>:

void MarkAsReadData_SIM(void)
{
 80024a0:	b480      	push	{r7}
 80024a2:	af00      	add	r7, sp, #0
	tail = head;
 80024a4:	4b03      	ldr	r3, [pc, #12]	; (80024b4 <MarkAsReadData_SIM+0x14>)
 80024a6:	881a      	ldrh	r2, [r3, #0]
 80024a8:	4b03      	ldr	r3, [pc, #12]	; (80024b8 <MarkAsReadData_SIM+0x18>)
 80024aa:	801a      	strh	r2, [r3, #0]
}
 80024ac:	bf00      	nop
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bc80      	pop	{r7}
 80024b2:	4770      	bx	lr
 80024b4:	20001938 	.word	0x20001938
 80024b8:	2000193a 	.word	0x2000193a

080024bc <SIM_checkCMD>:

	return 1;
}

uint8_t SIM_checkCMD (SIM_CMD_t cmd)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b086      	sub	sp, #24
 80024c0:	af02      	add	r7, sp, #8
 80024c2:	4603      	mov	r3, r0
 80024c4:	71fb      	strb	r3, [r7, #7]
	uint8_t res = 0;
 80024c6:	2300      	movs	r3, #0
 80024c8:	73fb      	strb	r3, [r7, #15]
//	SIM_res_t check;
	switch (cmd) {
 80024ca:	79fb      	ldrb	r3, [r7, #7]
 80024cc:	2b04      	cmp	r3, #4
 80024ce:	d865      	bhi.n	800259c <SIM_checkCMD+0xe0>
 80024d0:	a201      	add	r2, pc, #4	; (adr r2, 80024d8 <SIM_checkCMD+0x1c>)
 80024d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024d6:	bf00      	nop
 80024d8:	080024ed 	.word	0x080024ed
 80024dc:	08002571 	.word	0x08002571
 80024e0:	08002545 	.word	0x08002545
 80024e4:	08002519 	.word	0x08002519
 80024e8:	0800259d 	.word	0x0800259d
		case SIM_CMD_SIMCARD_PIN:
			if ( SIM_sendCMD( (uint8_t*)"AT+CPIN?", (uint8_t*)"+CPIN: READY", ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, SIM_TIMEOUT_LONG) == SIM_RES_MSG ) {
 80024ec:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80024f0:	9300      	str	r3, [sp, #0]
 80024f2:	2301      	movs	r3, #1
 80024f4:	2201      	movs	r2, #1
 80024f6:	492c      	ldr	r1, [pc, #176]	; (80025a8 <SIM_checkCMD+0xec>)
 80024f8:	482c      	ldr	r0, [pc, #176]	; (80025ac <SIM_checkCMD+0xf0>)
 80024fa:	f7ff ff8b 	bl	8002414 <SIM_sendCMD>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b01      	cmp	r3, #1
 8002502:	d105      	bne.n	8002510 <SIM_checkCMD+0x54>
				res = 1;
 8002504:	2301      	movs	r3, #1
 8002506:	73fb      	strb	r3, [r7, #15]
				Serial_log_string("SIM card READY\r\n");
 8002508:	4829      	ldr	r0, [pc, #164]	; (80025b0 <SIM_checkCMD+0xf4>)
 800250a:	f7fe fce1 	bl	8000ed0 <Serial_log_string>
			}
			else {
				Serial_log_string("SIM card not READY\r\n");

			}
			break;
 800250e:	e046      	b.n	800259e <SIM_checkCMD+0xe2>
				Serial_log_string("SIM card not READY\r\n");
 8002510:	4828      	ldr	r0, [pc, #160]	; (80025b4 <SIM_checkCMD+0xf8>)
 8002512:	f7fe fcdd 	bl	8000ed0 <Serial_log_string>
			break;
 8002516:	e042      	b.n	800259e <SIM_checkCMD+0xe2>
		case SIM_CMD_NW_CPSI:
			if ( SIM_sendCMD( (uint8_t*)"AT+CPSI?", (uint8_t*)"+CPSI: NO SERVICE", ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, SIM_TIMEOUT_LONG) == SIM_RES_MSG ) {
 8002518:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800251c:	9300      	str	r3, [sp, #0]
 800251e:	2301      	movs	r3, #1
 8002520:	2201      	movs	r2, #1
 8002522:	4925      	ldr	r1, [pc, #148]	; (80025b8 <SIM_checkCMD+0xfc>)
 8002524:	4825      	ldr	r0, [pc, #148]	; (80025bc <SIM_checkCMD+0x100>)
 8002526:	f7ff ff75 	bl	8002414 <SIM_sendCMD>
 800252a:	4603      	mov	r3, r0
 800252c:	2b01      	cmp	r3, #1
 800252e:	d103      	bne.n	8002538 <SIM_checkCMD+0x7c>
				Serial_log_string("NO SERVICE, network status has some problem");
 8002530:	4823      	ldr	r0, [pc, #140]	; (80025c0 <SIM_checkCMD+0x104>)
 8002532:	f7fe fccd 	bl	8000ed0 <Serial_log_string>
			}
			else {
				res = 1;
				Serial_log_string("SERVICE available\r\n");
			}
			break;
 8002536:	e032      	b.n	800259e <SIM_checkCMD+0xe2>
				res = 1;
 8002538:	2301      	movs	r3, #1
 800253a:	73fb      	strb	r3, [r7, #15]
				Serial_log_string("SERVICE available\r\n");
 800253c:	4821      	ldr	r0, [pc, #132]	; (80025c4 <SIM_checkCMD+0x108>)
 800253e:	f7fe fcc7 	bl	8000ed0 <Serial_log_string>
			break;
 8002542:	e02c      	b.n	800259e <SIM_checkCMD+0xe2>
		case SIM_CMD_NW_CREG:
			if ( SIM_sendCMD( (uint8_t*)"AT+CREG?", (uint8_t*)"+CREG: 0,1", ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, SIM_TIMEOUT_LONG) == SIM_RES_MSG ) {
 8002544:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002548:	9300      	str	r3, [sp, #0]
 800254a:	2301      	movs	r3, #1
 800254c:	2201      	movs	r2, #1
 800254e:	491e      	ldr	r1, [pc, #120]	; (80025c8 <SIM_checkCMD+0x10c>)
 8002550:	481e      	ldr	r0, [pc, #120]	; (80025cc <SIM_checkCMD+0x110>)
 8002552:	f7ff ff5f 	bl	8002414 <SIM_sendCMD>
 8002556:	4603      	mov	r3, r0
 8002558:	2b01      	cmp	r3, #1
 800255a:	d105      	bne.n	8002568 <SIM_checkCMD+0xac>
				res = 1;
 800255c:	2301      	movs	r3, #1
 800255e:	73fb      	strb	r3, [r7, #15]
				Serial_log_string("Module is registered to CS domain\r\n");
 8002560:	481b      	ldr	r0, [pc, #108]	; (80025d0 <SIM_checkCMD+0x114>)
 8002562:	f7fe fcb5 	bl	8000ed0 <Serial_log_string>
			}
			else {
				Serial_log_string("Module is not registered to CS domain, reboot the module\r\n");
			}
			break;
 8002566:	e01a      	b.n	800259e <SIM_checkCMD+0xe2>
				Serial_log_string("Module is not registered to CS domain, reboot the module\r\n");
 8002568:	481a      	ldr	r0, [pc, #104]	; (80025d4 <SIM_checkCMD+0x118>)
 800256a:	f7fe fcb1 	bl	8000ed0 <Serial_log_string>
			break;
 800256e:	e016      	b.n	800259e <SIM_checkCMD+0xe2>
		case SIM_CMD_PACKDOM_CGREG:

			break;
		case SIM_CMD_STA_CSQ:
			if ( SIM_sendCMD( (uint8_t*)"AT+CSQ", (uint8_t*)"+CSQ: 99", ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, SIM_TIMEOUT_LONG) == SIM_RES_MSG ) {
 8002570:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002574:	9300      	str	r3, [sp, #0]
 8002576:	2301      	movs	r3, #1
 8002578:	2201      	movs	r2, #1
 800257a:	4917      	ldr	r1, [pc, #92]	; (80025d8 <SIM_checkCMD+0x11c>)
 800257c:	4817      	ldr	r0, [pc, #92]	; (80025dc <SIM_checkCMD+0x120>)
 800257e:	f7ff ff49 	bl	8002414 <SIM_sendCMD>
 8002582:	4603      	mov	r3, r0
 8002584:	2b01      	cmp	r3, #1
 8002586:	d103      	bne.n	8002590 <SIM_checkCMD+0xd4>
				Serial_log_string("Signal quality is bad, please check SIM card or reboot the module\r\n");
 8002588:	4815      	ldr	r0, [pc, #84]	; (80025e0 <SIM_checkCMD+0x124>)
 800258a:	f7fe fca1 	bl	8000ed0 <Serial_log_string>
			}
			else {
				res = 1;
				Serial_log_string("Signal quality is good\r\n");
			}
			break;
 800258e:	e006      	b.n	800259e <SIM_checkCMD+0xe2>
				res = 1;
 8002590:	2301      	movs	r3, #1
 8002592:	73fb      	strb	r3, [r7, #15]
				Serial_log_string("Signal quality is good\r\n");
 8002594:	4813      	ldr	r0, [pc, #76]	; (80025e4 <SIM_checkCMD+0x128>)
 8002596:	f7fe fc9b 	bl	8000ed0 <Serial_log_string>
			break;
 800259a:	e000      	b.n	800259e <SIM_checkCMD+0xe2>
		default :
			break;
 800259c:	bf00      	nop
	}
	return res;
 800259e:	7bfb      	ldrb	r3, [r7, #15]
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3710      	adds	r7, #16
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	0800dbc0 	.word	0x0800dbc0
 80025ac:	0800dbd0 	.word	0x0800dbd0
 80025b0:	0800dbdc 	.word	0x0800dbdc
 80025b4:	0800dbf0 	.word	0x0800dbf0
 80025b8:	0800dc08 	.word	0x0800dc08
 80025bc:	0800dc1c 	.word	0x0800dc1c
 80025c0:	0800dc28 	.word	0x0800dc28
 80025c4:	0800dc54 	.word	0x0800dc54
 80025c8:	0800dc68 	.word	0x0800dc68
 80025cc:	0800dc74 	.word	0x0800dc74
 80025d0:	0800dc80 	.word	0x0800dc80
 80025d4:	0800dca4 	.word	0x0800dca4
 80025d8:	0800dce0 	.word	0x0800dce0
 80025dc:	0800dcec 	.word	0x0800dcec
 80025e0:	0800dcf4 	.word	0x0800dcf4
 80025e4:	0800dd38 	.word	0x0800dd38

080025e8 <checkSMSrequest>:

bool checkSMSrequest (SMS_CMD_t smsCMD)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b085      	sub	sp, #20
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	4603      	mov	r3, r0
 80025f0:	71fb      	strb	r3, [r7, #7]
	bool res = false;
 80025f2:	2300      	movs	r3, #0
 80025f4:	73fb      	strb	r3, [r7, #15]
	switch (smsCMD)	{
 80025f6:	79fb      	ldrb	r3, [r7, #7]
 80025f8:	2b07      	cmp	r3, #7
 80025fa:	d87b      	bhi.n	80026f4 <checkSMSrequest+0x10c>
 80025fc:	a201      	add	r2, pc, #4	; (adr r2, 8002604 <checkSMSrequest+0x1c>)
 80025fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002602:	bf00      	nop
 8002604:	08002625 	.word	0x08002625
 8002608:	0800263f 	.word	0x0800263f
 800260c:	0800268d 	.word	0x0800268d
 8002610:	08002673 	.word	0x08002673
 8002614:	08002659 	.word	0x08002659
 8002618:	080026a7 	.word	0x080026a7
 800261c:	080026db 	.word	0x080026db
 8002620:	080026c1 	.word	0x080026c1
		case SMS_CMD_CTRL_ON:
			res = __SIM->sms.CtrlON.requestflag ;
 8002624:	4b37      	ldr	r3, [pc, #220]	; (8002704 <checkSMSrequest+0x11c>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800262c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002630:	b2db      	uxtb	r3, r3
 8002632:	2b00      	cmp	r3, #0
 8002634:	bf14      	ite	ne
 8002636:	2301      	movne	r3, #1
 8002638:	2300      	moveq	r3, #0
 800263a:	73fb      	strb	r3, [r7, #15]
			break;
 800263c:	e05b      	b.n	80026f6 <checkSMSrequest+0x10e>
		case SMS_CMD_CTRL_OFF:
			res = __SIM->sms.CtrlOFF.requestflag ;
 800263e:	4b31      	ldr	r3, [pc, #196]	; (8002704 <checkSMSrequest+0x11c>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f893 35cc 	ldrb.w	r3, [r3, #1484]	; 0x5cc
 8002646:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800264a:	b2db      	uxtb	r3, r3
 800264c:	2b00      	cmp	r3, #0
 800264e:	bf14      	ite	ne
 8002650:	2301      	movne	r3, #1
 8002652:	2300      	moveq	r3, #0
 8002654:	73fb      	strb	r3, [r7, #15]
			break;
 8002656:	e04e      	b.n	80026f6 <checkSMSrequest+0x10e>
		case SMS_CMD_CTRL_DEC:
			res = __SIM->sms.CtrlDEC.requestflag ;
 8002658:	4b2a      	ldr	r3, [pc, #168]	; (8002704 <checkSMSrequest+0x11c>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f893 38fc 	ldrb.w	r3, [r3, #2300]	; 0x8fc
 8002660:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002664:	b2db      	uxtb	r3, r3
 8002666:	2b00      	cmp	r3, #0
 8002668:	bf14      	ite	ne
 800266a:	2301      	movne	r3, #1
 800266c:	2300      	moveq	r3, #0
 800266e:	73fb      	strb	r3, [r7, #15]
			break;
 8002670:	e041      	b.n	80026f6 <checkSMSrequest+0x10e>
		case SMS_CMD_CTRL_INC:
			res = __SIM->sms.CtrlINC.requestflag ;
 8002672:	4b24      	ldr	r3, [pc, #144]	; (8002704 <checkSMSrequest+0x11c>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f893 37ec 	ldrb.w	r3, [r3, #2028]	; 0x7ec
 800267a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800267e:	b2db      	uxtb	r3, r3
 8002680:	2b00      	cmp	r3, #0
 8002682:	bf14      	ite	ne
 8002684:	2301      	movne	r3, #1
 8002686:	2300      	moveq	r3, #0
 8002688:	73fb      	strb	r3, [r7, #15]
			break;
 800268a:	e034      	b.n	80026f6 <checkSMSrequest+0x10e>
		case SMS_CMD_CTRL_CALIB:
			res = __SIM->sms.CtrlCALIB.requestflag ;
 800268c:	4b1d      	ldr	r3, [pc, #116]	; (8002704 <checkSMSrequest+0x11c>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f893 36dc 	ldrb.w	r3, [r3, #1756]	; 0x6dc
 8002694:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002698:	b2db      	uxtb	r3, r3
 800269a:	2b00      	cmp	r3, #0
 800269c:	bf14      	ite	ne
 800269e:	2301      	movne	r3, #1
 80026a0:	2300      	moveq	r3, #0
 80026a2:	73fb      	strb	r3, [r7, #15]
			break;
 80026a4:	e027      	b.n	80026f6 <checkSMSrequest+0x10e>
		case SMS_CMD_GET_STATUS:
			res = __SIM->sms.GetStatus.requestflag ;
 80026a6:	4b17      	ldr	r3, [pc, #92]	; (8002704 <checkSMSrequest+0x11c>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f893 3a0c 	ldrb.w	r3, [r3, #2572]	; 0xa0c
 80026ae:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80026b2:	b2db      	uxtb	r3, r3
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	bf14      	ite	ne
 80026b8:	2301      	movne	r3, #1
 80026ba:	2300      	moveq	r3, #0
 80026bc:	73fb      	strb	r3, [r7, #15]
			break;
 80026be:	e01a      	b.n	80026f6 <checkSMSrequest+0x10e>
		case SMS_CMD_GET_STATION:
			res = __SIM->sms.GetStation.requestflag ;
 80026c0:	4b10      	ldr	r3, [pc, #64]	; (8002704 <checkSMSrequest+0x11c>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f893 3c2c 	ldrb.w	r3, [r3, #3116]	; 0xc2c
 80026c8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	bf14      	ite	ne
 80026d2:	2301      	movne	r3, #1
 80026d4:	2300      	moveq	r3, #0
 80026d6:	73fb      	strb	r3, [r7, #15]
			break;
 80026d8:	e00d      	b.n	80026f6 <checkSMSrequest+0x10e>
		case SMS_CMD_GET_SENSOR:
			res = __SIM->sms.GetSensor.requestflag ;
 80026da:	4b0a      	ldr	r3, [pc, #40]	; (8002704 <checkSMSrequest+0x11c>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f893 3b1c 	ldrb.w	r3, [r3, #2844]	; 0xb1c
 80026e2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	bf14      	ite	ne
 80026ec:	2301      	movne	r3, #1
 80026ee:	2300      	moveq	r3, #0
 80026f0:	73fb      	strb	r3, [r7, #15]
			break;
 80026f2:	e000      	b.n	80026f6 <checkSMSrequest+0x10e>
		default:
			break;
 80026f4:	bf00      	nop
	}
	return res;
 80026f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	3714      	adds	r7, #20
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bc80      	pop	{r7}
 8002700:	4770      	bx	lr
 8002702:	bf00      	nop
 8002704:	20001130 	.word	0x20001130

08002708 <triggerSMSrequest>:

void triggerSMSrequest (SMS_CMD_t smsCMD, SMS_CMD_FLAG_t ENorDIS)
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	4603      	mov	r3, r0
 8002710:	460a      	mov	r2, r1
 8002712:	71fb      	strb	r3, [r7, #7]
 8002714:	4613      	mov	r3, r2
 8002716:	71bb      	strb	r3, [r7, #6]
	switch (smsCMD)	{
 8002718:	79fb      	ldrb	r3, [r7, #7]
 800271a:	2b07      	cmp	r3, #7
 800271c:	d87a      	bhi.n	8002814 <triggerSMSrequest+0x10c>
 800271e:	a201      	add	r2, pc, #4	; (adr r2, 8002724 <triggerSMSrequest+0x1c>)
 8002720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002724:	08002745 	.word	0x08002745
 8002728:	0800275f 	.word	0x0800275f
 800272c:	080027ad 	.word	0x080027ad
 8002730:	08002793 	.word	0x08002793
 8002734:	08002779 	.word	0x08002779
 8002738:	080027c7 	.word	0x080027c7
 800273c:	080027fb 	.word	0x080027fb
 8002740:	080027e1 	.word	0x080027e1
	case SMS_CMD_CTRL_ON:
		__SIM->sms.CtrlON.requestflag = ENorDIS;
 8002744:	4b36      	ldr	r3, [pc, #216]	; (8002820 <triggerSMSrequest+0x118>)
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	79bb      	ldrb	r3, [r7, #6]
 800274a:	f003 0301 	and.w	r3, r3, #1
 800274e:	b2d9      	uxtb	r1, r3
 8002750:	f892 34bc 	ldrb.w	r3, [r2, #1212]	; 0x4bc
 8002754:	f361 0300 	bfi	r3, r1, #0, #1
 8002758:	f882 34bc 	strb.w	r3, [r2, #1212]	; 0x4bc
		break;
 800275c:	e05b      	b.n	8002816 <triggerSMSrequest+0x10e>
	case SMS_CMD_CTRL_OFF:
		__SIM->sms.CtrlOFF.requestflag = ENorDIS;
 800275e:	4b30      	ldr	r3, [pc, #192]	; (8002820 <triggerSMSrequest+0x118>)
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	79bb      	ldrb	r3, [r7, #6]
 8002764:	f003 0301 	and.w	r3, r3, #1
 8002768:	b2d9      	uxtb	r1, r3
 800276a:	f892 35cc 	ldrb.w	r3, [r2, #1484]	; 0x5cc
 800276e:	f361 0300 	bfi	r3, r1, #0, #1
 8002772:	f882 35cc 	strb.w	r3, [r2, #1484]	; 0x5cc
		break;
 8002776:	e04e      	b.n	8002816 <triggerSMSrequest+0x10e>
	case SMS_CMD_CTRL_DEC:
		__SIM->sms.CtrlDEC.requestflag = ENorDIS;
 8002778:	4b29      	ldr	r3, [pc, #164]	; (8002820 <triggerSMSrequest+0x118>)
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	79bb      	ldrb	r3, [r7, #6]
 800277e:	f003 0301 	and.w	r3, r3, #1
 8002782:	b2d9      	uxtb	r1, r3
 8002784:	f892 38fc 	ldrb.w	r3, [r2, #2300]	; 0x8fc
 8002788:	f361 0300 	bfi	r3, r1, #0, #1
 800278c:	f882 38fc 	strb.w	r3, [r2, #2300]	; 0x8fc
		break;
 8002790:	e041      	b.n	8002816 <triggerSMSrequest+0x10e>
	case SMS_CMD_CTRL_INC:
		__SIM->sms.CtrlINC.requestflag = ENorDIS;
 8002792:	4b23      	ldr	r3, [pc, #140]	; (8002820 <triggerSMSrequest+0x118>)
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	79bb      	ldrb	r3, [r7, #6]
 8002798:	f003 0301 	and.w	r3, r3, #1
 800279c:	b2d9      	uxtb	r1, r3
 800279e:	f892 37ec 	ldrb.w	r3, [r2, #2028]	; 0x7ec
 80027a2:	f361 0300 	bfi	r3, r1, #0, #1
 80027a6:	f882 37ec 	strb.w	r3, [r2, #2028]	; 0x7ec
		break;
 80027aa:	e034      	b.n	8002816 <triggerSMSrequest+0x10e>
	case SMS_CMD_CTRL_CALIB:
		__SIM->sms.CtrlCALIB.requestflag = ENorDIS;
 80027ac:	4b1c      	ldr	r3, [pc, #112]	; (8002820 <triggerSMSrequest+0x118>)
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	79bb      	ldrb	r3, [r7, #6]
 80027b2:	f003 0301 	and.w	r3, r3, #1
 80027b6:	b2d9      	uxtb	r1, r3
 80027b8:	f892 36dc 	ldrb.w	r3, [r2, #1756]	; 0x6dc
 80027bc:	f361 0300 	bfi	r3, r1, #0, #1
 80027c0:	f882 36dc 	strb.w	r3, [r2, #1756]	; 0x6dc
		break;
 80027c4:	e027      	b.n	8002816 <triggerSMSrequest+0x10e>
	case SMS_CMD_GET_STATUS:
		__SIM->sms.GetStatus.requestflag = ENorDIS;
 80027c6:	4b16      	ldr	r3, [pc, #88]	; (8002820 <triggerSMSrequest+0x118>)
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	79bb      	ldrb	r3, [r7, #6]
 80027cc:	f003 0301 	and.w	r3, r3, #1
 80027d0:	b2d9      	uxtb	r1, r3
 80027d2:	f892 3a0c 	ldrb.w	r3, [r2, #2572]	; 0xa0c
 80027d6:	f361 0300 	bfi	r3, r1, #0, #1
 80027da:	f882 3a0c 	strb.w	r3, [r2, #2572]	; 0xa0c
		break;
 80027de:	e01a      	b.n	8002816 <triggerSMSrequest+0x10e>
	case SMS_CMD_GET_STATION:
		__SIM->sms.GetStation.requestflag = ENorDIS;
 80027e0:	4b0f      	ldr	r3, [pc, #60]	; (8002820 <triggerSMSrequest+0x118>)
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	79bb      	ldrb	r3, [r7, #6]
 80027e6:	f003 0301 	and.w	r3, r3, #1
 80027ea:	b2d9      	uxtb	r1, r3
 80027ec:	f892 3c2c 	ldrb.w	r3, [r2, #3116]	; 0xc2c
 80027f0:	f361 0300 	bfi	r3, r1, #0, #1
 80027f4:	f882 3c2c 	strb.w	r3, [r2, #3116]	; 0xc2c
		break;
 80027f8:	e00d      	b.n	8002816 <triggerSMSrequest+0x10e>
	case SMS_CMD_GET_SENSOR:
		__SIM->sms.GetSensor.requestflag = ENorDIS;
 80027fa:	4b09      	ldr	r3, [pc, #36]	; (8002820 <triggerSMSrequest+0x118>)
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	79bb      	ldrb	r3, [r7, #6]
 8002800:	f003 0301 	and.w	r3, r3, #1
 8002804:	b2d9      	uxtb	r1, r3
 8002806:	f892 3b1c 	ldrb.w	r3, [r2, #2844]	; 0xb1c
 800280a:	f361 0300 	bfi	r3, r1, #0, #1
 800280e:	f882 3b1c 	strb.w	r3, [r2, #2844]	; 0xb1c
		break;
 8002812:	e000      	b.n	8002816 <triggerSMSrequest+0x10e>
	default:
		break;
 8002814:	bf00      	nop
	}
}
 8002816:	bf00      	nop
 8002818:	370c      	adds	r7, #12
 800281a:	46bd      	mov	sp, r7
 800281c:	bc80      	pop	{r7}
 800281e:	4770      	bx	lr
 8002820:	20001130 	.word	0x20001130

08002824 <triggerSMSreturn>:
			break;
		}
	return res;
}
void triggerSMSreturn (SMS_CMD_t smsCMD, SMS_CMD_FLAG_t ENorDIS)
{
 8002824:	b480      	push	{r7}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
 800282a:	4603      	mov	r3, r0
 800282c:	460a      	mov	r2, r1
 800282e:	71fb      	strb	r3, [r7, #7]
 8002830:	4613      	mov	r3, r2
 8002832:	71bb      	strb	r3, [r7, #6]
	switch (smsCMD)	{
 8002834:	79fb      	ldrb	r3, [r7, #7]
 8002836:	2b07      	cmp	r3, #7
 8002838:	d87a      	bhi.n	8002930 <triggerSMSreturn+0x10c>
 800283a:	a201      	add	r2, pc, #4	; (adr r2, 8002840 <triggerSMSreturn+0x1c>)
 800283c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002840:	08002861 	.word	0x08002861
 8002844:	0800287b 	.word	0x0800287b
 8002848:	080028c9 	.word	0x080028c9
 800284c:	080028af 	.word	0x080028af
 8002850:	08002895 	.word	0x08002895
 8002854:	080028e3 	.word	0x080028e3
 8002858:	08002917 	.word	0x08002917
 800285c:	080028fd 	.word	0x080028fd
	case SMS_CMD_CTRL_ON:
		__SIM->sms.CtrlON.returnflag = ENorDIS;
 8002860:	4b36      	ldr	r3, [pc, #216]	; (800293c <triggerSMSreturn+0x118>)
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	79bb      	ldrb	r3, [r7, #6]
 8002866:	f003 0301 	and.w	r3, r3, #1
 800286a:	b2d9      	uxtb	r1, r3
 800286c:	f892 34bc 	ldrb.w	r3, [r2, #1212]	; 0x4bc
 8002870:	f361 0341 	bfi	r3, r1, #1, #1
 8002874:	f882 34bc 	strb.w	r3, [r2, #1212]	; 0x4bc
		break;
 8002878:	e05b      	b.n	8002932 <triggerSMSreturn+0x10e>
	case SMS_CMD_CTRL_OFF:
		__SIM->sms.CtrlOFF.returnflag = ENorDIS;
 800287a:	4b30      	ldr	r3, [pc, #192]	; (800293c <triggerSMSreturn+0x118>)
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	79bb      	ldrb	r3, [r7, #6]
 8002880:	f003 0301 	and.w	r3, r3, #1
 8002884:	b2d9      	uxtb	r1, r3
 8002886:	f892 35cc 	ldrb.w	r3, [r2, #1484]	; 0x5cc
 800288a:	f361 0341 	bfi	r3, r1, #1, #1
 800288e:	f882 35cc 	strb.w	r3, [r2, #1484]	; 0x5cc
		break;
 8002892:	e04e      	b.n	8002932 <triggerSMSreturn+0x10e>
	case SMS_CMD_CTRL_DEC:
		__SIM->sms.CtrlDEC.returnflag = ENorDIS;
 8002894:	4b29      	ldr	r3, [pc, #164]	; (800293c <triggerSMSreturn+0x118>)
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	79bb      	ldrb	r3, [r7, #6]
 800289a:	f003 0301 	and.w	r3, r3, #1
 800289e:	b2d9      	uxtb	r1, r3
 80028a0:	f892 38fc 	ldrb.w	r3, [r2, #2300]	; 0x8fc
 80028a4:	f361 0341 	bfi	r3, r1, #1, #1
 80028a8:	f882 38fc 	strb.w	r3, [r2, #2300]	; 0x8fc
		break;
 80028ac:	e041      	b.n	8002932 <triggerSMSreturn+0x10e>
	case SMS_CMD_CTRL_INC:
		__SIM->sms.CtrlINC.returnflag = ENorDIS;
 80028ae:	4b23      	ldr	r3, [pc, #140]	; (800293c <triggerSMSreturn+0x118>)
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	79bb      	ldrb	r3, [r7, #6]
 80028b4:	f003 0301 	and.w	r3, r3, #1
 80028b8:	b2d9      	uxtb	r1, r3
 80028ba:	f892 37ec 	ldrb.w	r3, [r2, #2028]	; 0x7ec
 80028be:	f361 0341 	bfi	r3, r1, #1, #1
 80028c2:	f882 37ec 	strb.w	r3, [r2, #2028]	; 0x7ec
		break;
 80028c6:	e034      	b.n	8002932 <triggerSMSreturn+0x10e>
	case SMS_CMD_CTRL_CALIB:
		__SIM->sms.CtrlCALIB.returnflag = ENorDIS;
 80028c8:	4b1c      	ldr	r3, [pc, #112]	; (800293c <triggerSMSreturn+0x118>)
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	79bb      	ldrb	r3, [r7, #6]
 80028ce:	f003 0301 	and.w	r3, r3, #1
 80028d2:	b2d9      	uxtb	r1, r3
 80028d4:	f892 36dc 	ldrb.w	r3, [r2, #1756]	; 0x6dc
 80028d8:	f361 0341 	bfi	r3, r1, #1, #1
 80028dc:	f882 36dc 	strb.w	r3, [r2, #1756]	; 0x6dc
		break;
 80028e0:	e027      	b.n	8002932 <triggerSMSreturn+0x10e>
	case SMS_CMD_GET_STATUS:
		__SIM->sms.GetStatus.returnflag = ENorDIS;
 80028e2:	4b16      	ldr	r3, [pc, #88]	; (800293c <triggerSMSreturn+0x118>)
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	79bb      	ldrb	r3, [r7, #6]
 80028e8:	f003 0301 	and.w	r3, r3, #1
 80028ec:	b2d9      	uxtb	r1, r3
 80028ee:	f892 3a0c 	ldrb.w	r3, [r2, #2572]	; 0xa0c
 80028f2:	f361 0341 	bfi	r3, r1, #1, #1
 80028f6:	f882 3a0c 	strb.w	r3, [r2, #2572]	; 0xa0c
		break;
 80028fa:	e01a      	b.n	8002932 <triggerSMSreturn+0x10e>
	case SMS_CMD_GET_STATION:
		__SIM->sms.GetStation.returnflag = ENorDIS;
 80028fc:	4b0f      	ldr	r3, [pc, #60]	; (800293c <triggerSMSreturn+0x118>)
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	79bb      	ldrb	r3, [r7, #6]
 8002902:	f003 0301 	and.w	r3, r3, #1
 8002906:	b2d9      	uxtb	r1, r3
 8002908:	f892 3c2c 	ldrb.w	r3, [r2, #3116]	; 0xc2c
 800290c:	f361 0341 	bfi	r3, r1, #1, #1
 8002910:	f882 3c2c 	strb.w	r3, [r2, #3116]	; 0xc2c
		break;
 8002914:	e00d      	b.n	8002932 <triggerSMSreturn+0x10e>
	case SMS_CMD_GET_SENSOR:
		__SIM->sms.GetSensor.returnflag = ENorDIS;
 8002916:	4b09      	ldr	r3, [pc, #36]	; (800293c <triggerSMSreturn+0x118>)
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	79bb      	ldrb	r3, [r7, #6]
 800291c:	f003 0301 	and.w	r3, r3, #1
 8002920:	b2d9      	uxtb	r1, r3
 8002922:	f892 3b1c 	ldrb.w	r3, [r2, #2844]	; 0xb1c
 8002926:	f361 0341 	bfi	r3, r1, #1, #1
 800292a:	f882 3b1c 	strb.w	r3, [r2, #2844]	; 0xb1c
		break;
 800292e:	e000      	b.n	8002932 <triggerSMSreturn+0x10e>
	default:
		break;
 8002930:	bf00      	nop
	}
}
 8002932:	bf00      	nop
 8002934:	370c      	adds	r7, #12
 8002936:	46bd      	mov	sp, r7
 8002938:	bc80      	pop	{r7}
 800293a:	4770      	bx	lr
 800293c:	20001130 	.word	0x20001130

08002940 <setLimit>:
static uint8_t steppercentChange = 0;
static Stepmotor_change_mode_t stepMode = STEPM_MODE_STEP;


void setLimit(LIMIT_t Limit)
{
 8002940:	b480      	push	{r7}
 8002942:	b083      	sub	sp, #12
 8002944:	af00      	add	r7, sp, #0
 8002946:	4603      	mov	r3, r0
 8002948:	71fb      	strb	r3, [r7, #7]
	limit = Limit;
 800294a:	4a04      	ldr	r2, [pc, #16]	; (800295c <setLimit+0x1c>)
 800294c:	79fb      	ldrb	r3, [r7, #7]
 800294e:	7013      	strb	r3, [r2, #0]
}
 8002950:	bf00      	nop
 8002952:	370c      	adds	r7, #12
 8002954:	46bd      	mov	sp, r7
 8002956:	bc80      	pop	{r7}
 8002958:	4770      	bx	lr
 800295a:	bf00      	nop
 800295c:	20000000 	.word	0x20000000

08002960 <getLimit>:

LIMIT_t getLimit ()
{
 8002960:	b480      	push	{r7}
 8002962:	af00      	add	r7, sp, #0
	return limit;
 8002964:	4b02      	ldr	r3, [pc, #8]	; (8002970 <getLimit+0x10>)
 8002966:	781b      	ldrb	r3, [r3, #0]
}
 8002968:	4618      	mov	r0, r3
 800296a:	46bd      	mov	sp, r7
 800296c:	bc80      	pop	{r7}
 800296e:	4770      	bx	lr
 8002970:	20000000 	.word	0x20000000

08002974 <Step_getDir>:

Stepmotor_dir_t Step_getDir()
{
 8002974:	b480      	push	{r7}
 8002976:	af00      	add	r7, sp, #0
	return step_dir;
 8002978:	4b02      	ldr	r3, [pc, #8]	; (8002984 <Step_getDir+0x10>)
 800297a:	781b      	ldrb	r3, [r3, #0]
}
 800297c:	4618      	mov	r0, r3
 800297e:	46bd      	mov	sp, r7
 8002980:	bc80      	pop	{r7}
 8002982:	4770      	bx	lr
 8002984:	20000001 	.word	0x20000001

08002988 <increaseStepchange>:
{
	step_dir = dir;
}

void increaseStepchange()
{
 8002988:	b480      	push	{r7}
 800298a:	af00      	add	r7, sp, #0
	if (stepChange >= MAX_STEP )	{
 800298c:	4b09      	ldr	r3, [pc, #36]	; (80029b4 <increaseStepchange+0x2c>)
 800298e:	881b      	ldrh	r3, [r3, #0]
 8002990:	b29b      	uxth	r3, r3
 8002992:	2b63      	cmp	r3, #99	; 0x63
 8002994:	d903      	bls.n	800299e <increaseStepchange+0x16>
		stepChange = 0;
 8002996:	4b07      	ldr	r3, [pc, #28]	; (80029b4 <increaseStepchange+0x2c>)
 8002998:	2200      	movs	r2, #0
 800299a:	801a      	strh	r2, [r3, #0]
	}
	else {
		stepChange ++;
	}
}
 800299c:	e006      	b.n	80029ac <increaseStepchange+0x24>
		stepChange ++;
 800299e:	4b05      	ldr	r3, [pc, #20]	; (80029b4 <increaseStepchange+0x2c>)
 80029a0:	881b      	ldrh	r3, [r3, #0]
 80029a2:	b29b      	uxth	r3, r3
 80029a4:	3301      	adds	r3, #1
 80029a6:	b29a      	uxth	r2, r3
 80029a8:	4b02      	ldr	r3, [pc, #8]	; (80029b4 <increaseStepchange+0x2c>)
 80029aa:	801a      	strh	r2, [r3, #0]
}
 80029ac:	bf00      	nop
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bc80      	pop	{r7}
 80029b2:	4770      	bx	lr
 80029b4:	20001940 	.word	0x20001940

080029b8 <decreaseStepchange>:

void decreaseStepchange()
{
 80029b8:	b480      	push	{r7}
 80029ba:	af00      	add	r7, sp, #0
	if (stepChange == 0  )	{
 80029bc:	4b09      	ldr	r3, [pc, #36]	; (80029e4 <decreaseStepchange+0x2c>)
 80029be:	881b      	ldrh	r3, [r3, #0]
 80029c0:	b29b      	uxth	r3, r3
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d103      	bne.n	80029ce <decreaseStepchange+0x16>
		stepChange = MAX_STEP;
 80029c6:	4b07      	ldr	r3, [pc, #28]	; (80029e4 <decreaseStepchange+0x2c>)
 80029c8:	2264      	movs	r2, #100	; 0x64
 80029ca:	801a      	strh	r2, [r3, #0]
	}
	else {
		stepChange--;
	}
}
 80029cc:	e006      	b.n	80029dc <decreaseStepchange+0x24>
		stepChange--;
 80029ce:	4b05      	ldr	r3, [pc, #20]	; (80029e4 <decreaseStepchange+0x2c>)
 80029d0:	881b      	ldrh	r3, [r3, #0]
 80029d2:	b29b      	uxth	r3, r3
 80029d4:	3b01      	subs	r3, #1
 80029d6:	b29a      	uxth	r2, r3
 80029d8:	4b02      	ldr	r3, [pc, #8]	; (80029e4 <decreaseStepchange+0x2c>)
 80029da:	801a      	strh	r2, [r3, #0]
}
 80029dc:	bf00      	nop
 80029de:	46bd      	mov	sp, r7
 80029e0:	bc80      	pop	{r7}
 80029e2:	4770      	bx	lr
 80029e4:	20001940 	.word	0x20001940

080029e8 <getStepchange>:

uint16_t getStepchange()
{
 80029e8:	b480      	push	{r7}
 80029ea:	af00      	add	r7, sp, #0
	return stepChange;
 80029ec:	4b03      	ldr	r3, [pc, #12]	; (80029fc <getStepchange+0x14>)
 80029ee:	881b      	ldrh	r3, [r3, #0]
 80029f0:	b29b      	uxth	r3, r3
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bc80      	pop	{r7}
 80029f8:	4770      	bx	lr
 80029fa:	bf00      	nop
 80029fc:	20001940 	.word	0x20001940

08002a00 <Step_getPercentChange>:

uint8_t Step_getPercentChange()
{
 8002a00:	b480      	push	{r7}
 8002a02:	af00      	add	r7, sp, #0
	return steppercentChange;
 8002a04:	4b02      	ldr	r3, [pc, #8]	; (8002a10 <Step_getPercentChange+0x10>)
 8002a06:	781b      	ldrb	r3, [r3, #0]
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bc80      	pop	{r7}
 8002a0e:	4770      	bx	lr
 8002a10:	20001942 	.word	0x20001942

08002a14 <Step_getChangemode>:
{
	stepMode = mode;
}

Stepmotor_change_mode_t Step_getChangemode()
{
 8002a14:	b480      	push	{r7}
 8002a16:	af00      	add	r7, sp, #0
	return stepMode;
 8002a18:	4b02      	ldr	r3, [pc, #8]	; (8002a24 <Step_getChangemode+0x10>)
 8002a1a:	781b      	ldrb	r3, [r3, #0]
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bc80      	pop	{r7}
 8002a22:	4770      	bx	lr
 8002a24:	20000002 	.word	0x20000002

08002a28 <Step_step>:

void Step_step()
{
 8002a28:	b598      	push	{r3, r4, r7, lr}
 8002a2a:	af00      	add	r7, sp, #0
	A4988_StepByStep(getStepchange(), (uint8_t)Step_getDir() );
 8002a2c:	f7ff ffdc 	bl	80029e8 <getStepchange>
 8002a30:	4603      	mov	r3, r0
 8002a32:	461c      	mov	r4, r3
 8002a34:	f7ff ff9e 	bl	8002974 <Step_getDir>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	4619      	mov	r1, r3
 8002a3c:	4620      	mov	r0, r4
 8002a3e:	f003 f84f 	bl	8005ae0 <A4988_StepByStep>
}
 8002a42:	bf00      	nop
 8002a44:	bd98      	pop	{r3, r4, r7, pc}

08002a46 <Step_percent>:

void Step_percent()
{
 8002a46:	b590      	push	{r4, r7, lr}
 8002a48:	b083      	sub	sp, #12
 8002a4a:	af00      	add	r7, sp, #0
	uint16_t stepChange = (uint16_t)(Step_getPercentChange() * MAX_STEP / 100);
 8002a4c:	f7ff ffd8 	bl	8002a00 <Step_getPercentChange>
 8002a50:	4603      	mov	r3, r0
 8002a52:	80fb      	strh	r3, [r7, #6]
	A4988_StepByStep(stepChange, Step_getDir());
 8002a54:	88fc      	ldrh	r4, [r7, #6]
 8002a56:	f7ff ff8d 	bl	8002974 <Step_getDir>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	4619      	mov	r1, r3
 8002a5e:	4620      	mov	r0, r4
 8002a60:	f003 f83e 	bl	8005ae0 <A4988_StepByStep>
}
 8002a64:	bf00      	nop
 8002a66:	370c      	adds	r7, #12
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd90      	pop	{r4, r7, pc}

08002a6c <getCurswitch>:
		return clearPosY;
	}
}

SWITCH_t getCurswitch()
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	af00      	add	r7, sp, #0
	return curSwitch;
 8002a70:	4b02      	ldr	r3, [pc, #8]	; (8002a7c <getCurswitch+0x10>)
 8002a72:	781b      	ldrb	r3, [r3, #0]
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bc80      	pop	{r7}
 8002a7a:	4770      	bx	lr
 8002a7c:	20000004 	.word	0x20000004

08002a80 <getClearflag>:
	curSwitch = ONorOFF;
}


uint8_t getClearflag()
{
 8002a80:	b480      	push	{r7}
 8002a82:	af00      	add	r7, sp, #0
	return clearflag;
 8002a84:	4b03      	ldr	r3, [pc, #12]	; (8002a94 <getClearflag+0x14>)
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	b2db      	uxtb	r3, r3
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bc80      	pop	{r7}
 8002a90:	4770      	bx	lr
 8002a92:	bf00      	nop
 8002a94:	20001951 	.word	0x20001951

08002a98 <setClearflag>:

void setClearflag(uint8_t ENorDIS)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b083      	sub	sp, #12
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	71fb      	strb	r3, [r7, #7]
	clearflag = ENorDIS;
 8002aa2:	4a04      	ldr	r2, [pc, #16]	; (8002ab4 <setClearflag+0x1c>)
 8002aa4:	79fb      	ldrb	r3, [r7, #7]
 8002aa6:	7013      	strb	r3, [r2, #0]
}
 8002aa8:	bf00      	nop
 8002aaa:	370c      	adds	r7, #12
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bc80      	pop	{r7}
 8002ab0:	4770      	bx	lr
 8002ab2:	bf00      	nop
 8002ab4:	20001951 	.word	0x20001951

08002ab8 <initButton>:
void initButton(DISPLAY_MODE_t *displaymode, s_list *mylist, uint16_t *myStepposition)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b085      	sub	sp, #20
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	60f8      	str	r0, [r7, #12]
 8002ac0:	60b9      	str	r1, [r7, #8]
 8002ac2:	607a      	str	r2, [r7, #4]
	__MY_DISPLAY_MODE = displaymode;
 8002ac4:	4a06      	ldr	r2, [pc, #24]	; (8002ae0 <initButton+0x28>)
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	6013      	str	r3, [r2, #0]
	__MY_SS_LIST = mylist;
 8002aca:	4a06      	ldr	r2, [pc, #24]	; (8002ae4 <initButton+0x2c>)
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	6013      	str	r3, [r2, #0]
	__MY_STEP_POSITION = myStepposition;
 8002ad0:	4a05      	ldr	r2, [pc, #20]	; (8002ae8 <initButton+0x30>)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6013      	str	r3, [r2, #0]
}
 8002ad6:	bf00      	nop
 8002ad8:	3714      	adds	r7, #20
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bc80      	pop	{r7}
 8002ade:	4770      	bx	lr
 8002ae0:	20001948 	.word	0x20001948
 8002ae4:	20001944 	.word	0x20001944
 8002ae8:	2000194c 	.word	0x2000194c

08002aec <switchcurControl>:

void switchcurControl()
{
 8002aec:	b480      	push	{r7}
 8002aee:	af00      	add	r7, sp, #0
	switch (curControl)	{
 8002af0:	4b09      	ldr	r3, [pc, #36]	; (8002b18 <switchcurControl+0x2c>)
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d005      	beq.n	8002b04 <switchcurControl+0x18>
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d107      	bne.n	8002b0c <switchcurControl+0x20>
	case CONTROL_TRANS:
		curControl = CONTROL_STEP;
 8002afc:	4b06      	ldr	r3, [pc, #24]	; (8002b18 <switchcurControl+0x2c>)
 8002afe:	2200      	movs	r2, #0
 8002b00:	701a      	strb	r2, [r3, #0]
		break;
 8002b02:	e004      	b.n	8002b0e <switchcurControl+0x22>
	case CONTROL_STEP:
		curControl = CONTROL_TRANS;
 8002b04:	4b04      	ldr	r3, [pc, #16]	; (8002b18 <switchcurControl+0x2c>)
 8002b06:	2201      	movs	r2, #1
 8002b08:	701a      	strb	r2, [r3, #0]
		break;
 8002b0a:	e000      	b.n	8002b0e <switchcurControl+0x22>
	default:
		break;
 8002b0c:	bf00      	nop
	}
}
 8002b0e:	bf00      	nop
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bc80      	pop	{r7}
 8002b14:	4770      	bx	lr
 8002b16:	bf00      	nop
 8002b18:	20000003 	.word	0x20000003

08002b1c <getcurControl>:

CONTROL_t getcurControl()
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	af00      	add	r7, sp, #0
	return curControl;
 8002b20:	4b02      	ldr	r3, [pc, #8]	; (8002b2c <getcurControl+0x10>)
 8002b22:	781b      	ldrb	r3, [r3, #0]
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bc80      	pop	{r7}
 8002b2a:	4770      	bx	lr
 8002b2c:	20000003 	.word	0x20000003

08002b30 <nextMonitor>:



void nextMonitor(uint8_t volatile  * curMonitor, uint8_t max)	{
 8002b30:	b480      	push	{r7}
 8002b32:	b083      	sub	sp, #12
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
 8002b38:	460b      	mov	r3, r1
 8002b3a:	70fb      	strb	r3, [r7, #3]
	if (*curMonitor >= max )		{
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	781b      	ldrb	r3, [r3, #0]
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	78fa      	ldrb	r2, [r7, #3]
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d803      	bhi.n	8002b50 <nextMonitor+0x20>
		*curMonitor = 0;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	701a      	strb	r2, [r3, #0]
	}
	else {
		(*curMonitor)++;
	}
}
 8002b4e:	e006      	b.n	8002b5e <nextMonitor+0x2e>
		(*curMonitor)++;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	781b      	ldrb	r3, [r3, #0]
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	3301      	adds	r3, #1
 8002b58:	b2da      	uxtb	r2, r3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	701a      	strb	r2, [r3, #0]
}
 8002b5e:	bf00      	nop
 8002b60:	370c      	adds	r7, #12
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bc80      	pop	{r7}
 8002b66:	4770      	bx	lr

08002b68 <previousMonitor>:

void previousMonitor(uint8_t volatile  * curMonitor, uint8_t max)	{
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	460b      	mov	r3, r1
 8002b72:	70fb      	strb	r3, [r7, #3]
	if (*curMonitor == 0 )		{
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	781b      	ldrb	r3, [r3, #0]
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d103      	bne.n	8002b86 <previousMonitor+0x1e>
		*curMonitor = max ;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	78fa      	ldrb	r2, [r7, #3]
 8002b82:	701a      	strb	r2, [r3, #0]
	}
	else {
		(*curMonitor)--;
	}
}
 8002b84:	e006      	b.n	8002b94 <previousMonitor+0x2c>
		(*curMonitor)--;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	781b      	ldrb	r3, [r3, #0]
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	3b01      	subs	r3, #1
 8002b8e:	b2da      	uxtb	r2, r3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	701a      	strb	r2, [r3, #0]
}
 8002b94:	bf00      	nop
 8002b96:	370c      	adds	r7, #12
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bc80      	pop	{r7}
 8002b9c:	4770      	bx	lr
	...

08002ba0 <get_curMonitor>:

uint8_t get_curMonitor(void)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	af00      	add	r7, sp, #0
	return curMonitor;
 8002ba4:	4b03      	ldr	r3, [pc, #12]	; (8002bb4 <get_curMonitor+0x14>)
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	b2db      	uxtb	r3, r3
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bc80      	pop	{r7}
 8002bb0:	4770      	bx	lr
 8002bb2:	bf00      	nop
 8002bb4:	20001950 	.word	0x20001950

08002bb8 <setcurMonitor>:
void setcurMonitor(uint8_t index)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	71fb      	strb	r3, [r7, #7]
	curMonitor = index;
 8002bc2:	4a04      	ldr	r2, [pc, #16]	; (8002bd4 <setcurMonitor+0x1c>)
 8002bc4:	79fb      	ldrb	r3, [r7, #7]
 8002bc6:	7013      	strb	r3, [r2, #0]
}
 8002bc8:	bf00      	nop
 8002bca:	370c      	adds	r7, #12
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bc80      	pop	{r7}
 8002bd0:	4770      	bx	lr
 8002bd2:	bf00      	nop
 8002bd4:	20001950 	.word	0x20001950

08002bd8 <buttonMENU_handler>:



void buttonMENU_handler()
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	af00      	add	r7, sp, #0
	switch(*__MY_DISPLAY_MODE)	{
 8002bdc:	4b2e      	ldr	r3, [pc, #184]	; (8002c98 <buttonMENU_handler+0xc0>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	781b      	ldrb	r3, [r3, #0]
 8002be2:	2b07      	cmp	r3, #7
 8002be4:	d855      	bhi.n	8002c92 <buttonMENU_handler+0xba>
 8002be6:	a201      	add	r2, pc, #4	; (adr r2, 8002bec <buttonMENU_handler+0x14>)
 8002be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bec:	08002c0d 	.word	0x08002c0d
 8002bf0:	08002c23 	.word	0x08002c23
 8002bf4:	08002c33 	.word	0x08002c33
 8002bf8:	08002c43 	.word	0x08002c43
 8002bfc:	08002c53 	.word	0x08002c53
 8002c00:	08002c63 	.word	0x08002c63
 8002c04:	08002c73 	.word	0x08002c73
 8002c08:	08002c83 	.word	0x08002c83
	case HOME:
		*__MY_DISPLAY_MODE = MONITOR;
 8002c0c:	4b22      	ldr	r3, [pc, #136]	; (8002c98 <buttonMENU_handler+0xc0>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	2203      	movs	r2, #3
 8002c12:	701a      	strb	r2, [r3, #0]
		setcurMonitor(0);
 8002c14:	2000      	movs	r0, #0
 8002c16:	f7ff ffcf 	bl	8002bb8 <setcurMonitor>
		setClearflag(ENABLE);
 8002c1a:	2001      	movs	r0, #1
 8002c1c:	f7ff ff3c 	bl	8002a98 <setClearflag>
		break;
 8002c20:	e038      	b.n	8002c94 <buttonMENU_handler+0xbc>
	case COUNTDOWN_SW_OFF:
		*__MY_DISPLAY_MODE = MONITOR;
 8002c22:	4b1d      	ldr	r3, [pc, #116]	; (8002c98 <buttonMENU_handler+0xc0>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	2203      	movs	r2, #3
 8002c28:	701a      	strb	r2, [r3, #0]
		setClearflag(ENABLE);
 8002c2a:	2001      	movs	r0, #1
 8002c2c:	f7ff ff34 	bl	8002a98 <setClearflag>
		break;
 8002c30:	e030      	b.n	8002c94 <buttonMENU_handler+0xbc>
	case AFTER_SW_OFF:
		*__MY_DISPLAY_MODE = MONITOR;
 8002c32:	4b19      	ldr	r3, [pc, #100]	; (8002c98 <buttonMENU_handler+0xc0>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	2203      	movs	r2, #3
 8002c38:	701a      	strb	r2, [r3, #0]
		setClearflag(ENABLE);
 8002c3a:	2001      	movs	r0, #1
 8002c3c:	f7ff ff2c 	bl	8002a98 <setClearflag>
		break;
 8002c40:	e028      	b.n	8002c94 <buttonMENU_handler+0xbc>
	case MONITOR:
		*__MY_DISPLAY_MODE = MENU_CONTROL;
 8002c42:	4b15      	ldr	r3, [pc, #84]	; (8002c98 <buttonMENU_handler+0xc0>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	2204      	movs	r2, #4
 8002c48:	701a      	strb	r2, [r3, #0]
		setClearflag(ENABLE);
 8002c4a:	2001      	movs	r0, #1
 8002c4c:	f7ff ff24 	bl	8002a98 <setClearflag>
		break;
 8002c50:	e020      	b.n	8002c94 <buttonMENU_handler+0xbc>
	case MENU_CONTROL:
		*__MY_DISPLAY_MODE = HOME;
 8002c52:	4b11      	ldr	r3, [pc, #68]	; (8002c98 <buttonMENU_handler+0xc0>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	2200      	movs	r2, #0
 8002c58:	701a      	strb	r2, [r3, #0]
		setClearflag(ENABLE);
 8002c5a:	2001      	movs	r0, #1
 8002c5c:	f7ff ff1c 	bl	8002a98 <setClearflag>
		break;
 8002c60:	e018      	b.n	8002c94 <buttonMENU_handler+0xbc>
	case VOLTAGE_CONTROL:
		*__MY_DISPLAY_MODE = HOME;
 8002c62:	4b0d      	ldr	r3, [pc, #52]	; (8002c98 <buttonMENU_handler+0xc0>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	2200      	movs	r2, #0
 8002c68:	701a      	strb	r2, [r3, #0]
		setClearflag(ENABLE);
 8002c6a:	2001      	movs	r0, #1
 8002c6c:	f7ff ff14 	bl	8002a98 <setClearflag>
		break;
 8002c70:	e010      	b.n	8002c94 <buttonMENU_handler+0xbc>
	case ON_OFF_CONTROL:
		*__MY_DISPLAY_MODE = HOME;
 8002c72:	4b09      	ldr	r3, [pc, #36]	; (8002c98 <buttonMENU_handler+0xc0>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	2200      	movs	r2, #0
 8002c78:	701a      	strb	r2, [r3, #0]
		setClearflag(ENABLE);
 8002c7a:	2001      	movs	r0, #1
 8002c7c:	f7ff ff0c 	bl	8002a98 <setClearflag>
		break;
 8002c80:	e008      	b.n	8002c94 <buttonMENU_handler+0xbc>
	case COMPLETE_CONTROL:
		*__MY_DISPLAY_MODE = HOME;
 8002c82:	4b05      	ldr	r3, [pc, #20]	; (8002c98 <buttonMENU_handler+0xc0>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	2200      	movs	r2, #0
 8002c88:	701a      	strb	r2, [r3, #0]
		setClearflag(ENABLE);
 8002c8a:	2001      	movs	r0, #1
 8002c8c:	f7ff ff04 	bl	8002a98 <setClearflag>
		break;
 8002c90:	e000      	b.n	8002c94 <buttonMENU_handler+0xbc>
	default:
		break;
 8002c92:	bf00      	nop
	}
}
 8002c94:	bf00      	nop
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	20001948 	.word	0x20001948

08002c9c <buttonOK_handler>:
void buttonOK_handler()
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	af00      	add	r7, sp, #0
	switch(*__MY_DISPLAY_MODE)	{
 8002ca0:	4b2c      	ldr	r3, [pc, #176]	; (8002d54 <buttonOK_handler+0xb8>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	781b      	ldrb	r3, [r3, #0]
 8002ca6:	2b07      	cmp	r3, #7
 8002ca8:	d84f      	bhi.n	8002d4a <buttonOK_handler+0xae>
 8002caa:	a201      	add	r2, pc, #4	; (adr r2, 8002cb0 <buttonOK_handler+0x14>)
 8002cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cb0:	08002d4b 	.word	0x08002d4b
 8002cb4:	08002d4b 	.word	0x08002d4b
 8002cb8:	08002d4b 	.word	0x08002d4b
 8002cbc:	08002d4b 	.word	0x08002d4b
 8002cc0:	08002cd1 	.word	0x08002cd1
 8002cc4:	08002d05 	.word	0x08002d05
 8002cc8:	08002d0f 	.word	0x08002d0f
 8002ccc:	08002d3b 	.word	0x08002d3b
	case AFTER_SW_OFF:
		break;
	case MONITOR:
		break;
	case MENU_CONTROL:
		if (getcurControl() == CONTROL_TRANS)	{
 8002cd0:	f7ff ff24 	bl	8002b1c <getcurControl>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d107      	bne.n	8002cea <buttonOK_handler+0x4e>
			*__MY_DISPLAY_MODE = ON_OFF_CONTROL;
 8002cda:	4b1e      	ldr	r3, [pc, #120]	; (8002d54 <buttonOK_handler+0xb8>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	2206      	movs	r2, #6
 8002ce0:	701a      	strb	r2, [r3, #0]
			setClearflag(ENABLE);
 8002ce2:	2001      	movs	r0, #1
 8002ce4:	f7ff fed8 	bl	8002a98 <setClearflag>
		}
		else if (getcurControl() == CONTROL_STEP)	{
			*__MY_DISPLAY_MODE = VOLTAGE_CONTROL;
			setClearflag(ENABLE);
		}
		break;
 8002ce8:	e031      	b.n	8002d4e <buttonOK_handler+0xb2>
		else if (getcurControl() == CONTROL_STEP)	{
 8002cea:	f7ff ff17 	bl	8002b1c <getcurControl>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d12c      	bne.n	8002d4e <buttonOK_handler+0xb2>
			*__MY_DISPLAY_MODE = VOLTAGE_CONTROL;
 8002cf4:	4b17      	ldr	r3, [pc, #92]	; (8002d54 <buttonOK_handler+0xb8>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	2205      	movs	r2, #5
 8002cfa:	701a      	strb	r2, [r3, #0]
			setClearflag(ENABLE);
 8002cfc:	2001      	movs	r0, #1
 8002cfe:	f7ff fecb 	bl	8002a98 <setClearflag>
		break;
 8002d02:	e024      	b.n	8002d4e <buttonOK_handler+0xb2>
	case VOLTAGE_CONTROL:
		triggerTaskflag(TASK_CTRL_STEPMOR, FLAG_EN);
 8002d04:	2101      	movs	r1, #1
 8002d06:	2005      	movs	r0, #5
 8002d08:	f001 fc2a 	bl	8004560 <triggerTaskflag>
		break;
 8002d0c:	e020      	b.n	8002d50 <buttonOK_handler+0xb4>
	case ON_OFF_CONTROL:
		// switch MBA
		if(getCurswitch() == SW_ON)	{
 8002d0e:	f7ff fead 	bl	8002a6c <getCurswitch>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d103      	bne.n	8002d20 <buttonOK_handler+0x84>
			switchContactor(MBA_ON);
 8002d18:	2001      	movs	r0, #1
 8002d1a:	f7ff f99d 	bl	8002058 <switchContactor>
 8002d1e:	e002      	b.n	8002d26 <buttonOK_handler+0x8a>
		}
		else {
			switchContactor(MBA_OFF);
 8002d20:	2002      	movs	r0, #2
 8002d22:	f7ff f999 	bl	8002058 <switchContactor>
		}
		setSwitchtime();
 8002d26:	f7fd fc5b 	bl	80005e0 <setSwitchtime>
		*__MY_DISPLAY_MODE = COMPLETE_CONTROL;
 8002d2a:	4b0a      	ldr	r3, [pc, #40]	; (8002d54 <buttonOK_handler+0xb8>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	2207      	movs	r2, #7
 8002d30:	701a      	strb	r2, [r3, #0]
		setClearflag(ENABLE);
 8002d32:	2001      	movs	r0, #1
 8002d34:	f7ff feb0 	bl	8002a98 <setClearflag>
		break;
 8002d38:	e00a      	b.n	8002d50 <buttonOK_handler+0xb4>
	case COMPLETE_CONTROL:
		*__MY_DISPLAY_MODE = ON_OFF_CONTROL;
 8002d3a:	4b06      	ldr	r3, [pc, #24]	; (8002d54 <buttonOK_handler+0xb8>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	2206      	movs	r2, #6
 8002d40:	701a      	strb	r2, [r3, #0]
		setClearflag(ENABLE);
 8002d42:	2001      	movs	r0, #1
 8002d44:	f7ff fea8 	bl	8002a98 <setClearflag>
		break;
 8002d48:	e002      	b.n	8002d50 <buttonOK_handler+0xb4>
	default:
		break;
 8002d4a:	bf00      	nop
 8002d4c:	e000      	b.n	8002d50 <buttonOK_handler+0xb4>
		break;
 8002d4e:	bf00      	nop
	}
}
 8002d50:	bf00      	nop
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	20001948 	.word	0x20001948

08002d58 <buttonDOWN_handler>:
void buttonDOWN_handler()
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	af00      	add	r7, sp, #0
	switch(*__MY_DISPLAY_MODE)	{
 8002d5c:	4b21      	ldr	r3, [pc, #132]	; (8002de4 <buttonDOWN_handler+0x8c>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	2b07      	cmp	r3, #7
 8002d64:	d83a      	bhi.n	8002ddc <buttonDOWN_handler+0x84>
 8002d66:	a201      	add	r2, pc, #4	; (adr r2, 8002d6c <buttonDOWN_handler+0x14>)
 8002d68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d6c:	08002ddd 	.word	0x08002ddd
 8002d70:	08002ddd 	.word	0x08002ddd
 8002d74:	08002ddd 	.word	0x08002ddd
 8002d78:	08002d8d 	.word	0x08002d8d
 8002d7c:	08002da5 	.word	0x08002da5
 8002d80:	08002db1 	.word	0x08002db1
 8002d84:	08002dbd 	.word	0x08002dbd
 8002d88:	08002ddd 	.word	0x08002ddd
		break;
	case AFTER_SW_OFF:
		break;
	case MONITOR:
		// move to next sensor ID
		nextMonitor(&curMonitor, __MY_SS_LIST->length);
 8002d8c:	4b16      	ldr	r3, [pc, #88]	; (8002de8 <buttonDOWN_handler+0x90>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	4619      	mov	r1, r3
 8002d96:	4815      	ldr	r0, [pc, #84]	; (8002dec <buttonDOWN_handler+0x94>)
 8002d98:	f7ff feca 	bl	8002b30 <nextMonitor>
		setClearflag(ENABLE);
 8002d9c:	2001      	movs	r0, #1
 8002d9e:	f7ff fe7b 	bl	8002a98 <setClearflag>
		break;
 8002da2:	e01c      	b.n	8002dde <buttonDOWN_handler+0x86>
	case MENU_CONTROL:
		switchcurControl();
 8002da4:	f7ff fea2 	bl	8002aec <switchcurControl>
		setClearflag(ENABLE);
 8002da8:	2001      	movs	r0, #1
 8002daa:	f7ff fe75 	bl	8002a98 <setClearflag>
		break;
 8002dae:	e016      	b.n	8002dde <buttonDOWN_handler+0x86>
	case VOLTAGE_CONTROL:
		// decrease step value
		decreaseStepchange();
 8002db0:	f7ff fe02 	bl	80029b8 <decreaseStepchange>
		setClearflag(ENABLE);
 8002db4:	2001      	movs	r0, #1
 8002db6:	f7ff fe6f 	bl	8002a98 <setClearflag>
		break;
 8002dba:	e010      	b.n	8002dde <buttonDOWN_handler+0x86>
	case ON_OFF_CONTROL:
		//  switch ON/OFF
		switch (curSwitch) {
 8002dbc:	4b0c      	ldr	r3, [pc, #48]	; (8002df0 <buttonDOWN_handler+0x98>)
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d005      	beq.n	8002dd0 <buttonDOWN_handler+0x78>
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d107      	bne.n	8002dd8 <buttonDOWN_handler+0x80>
		case SW_ON:
			curSwitch = SW_OFF;
 8002dc8:	4b09      	ldr	r3, [pc, #36]	; (8002df0 <buttonDOWN_handler+0x98>)
 8002dca:	2200      	movs	r2, #0
 8002dcc:	701a      	strb	r2, [r3, #0]
			break;
 8002dce:	e004      	b.n	8002dda <buttonDOWN_handler+0x82>
		case SW_OFF:
			curSwitch = SW_ON;
 8002dd0:	4b07      	ldr	r3, [pc, #28]	; (8002df0 <buttonDOWN_handler+0x98>)
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	701a      	strb	r2, [r3, #0]
			break;
 8002dd6:	e000      	b.n	8002dda <buttonDOWN_handler+0x82>
		default:
			break;
 8002dd8:	bf00      	nop
			setClearflag(ENABLE);
		}
		break;
 8002dda:	e000      	b.n	8002dde <buttonDOWN_handler+0x86>
	case COMPLETE_CONTROL:
		break;
	default:
		break;
 8002ddc:	bf00      	nop
	}
}
 8002dde:	bf00      	nop
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	20001948 	.word	0x20001948
 8002de8:	20001944 	.word	0x20001944
 8002dec:	20001950 	.word	0x20001950
 8002df0:	20000004 	.word	0x20000004

08002df4 <buttonUP_handler>:
void buttonUP_handler()
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	af00      	add	r7, sp, #0
	switch(*__MY_DISPLAY_MODE)	{
 8002df8:	4b22      	ldr	r3, [pc, #136]	; (8002e84 <buttonUP_handler+0x90>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	781b      	ldrb	r3, [r3, #0]
 8002dfe:	2b07      	cmp	r3, #7
 8002e00:	d83d      	bhi.n	8002e7e <buttonUP_handler+0x8a>
 8002e02:	a201      	add	r2, pc, #4	; (adr r2, 8002e08 <buttonUP_handler+0x14>)
 8002e04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e08:	08002e7f 	.word	0x08002e7f
 8002e0c:	08002e7f 	.word	0x08002e7f
 8002e10:	08002e7f 	.word	0x08002e7f
 8002e14:	08002e29 	.word	0x08002e29
 8002e18:	08002e41 	.word	0x08002e41
 8002e1c:	08002e4d 	.word	0x08002e4d
 8002e20:	08002e59 	.word	0x08002e59
 8002e24:	08002e7f 	.word	0x08002e7f
	case COUNTDOWN_SW_OFF:
		break;
	case AFTER_SW_OFF:
		break;
	case MONITOR:
		previousMonitor(&curMonitor, __MY_SS_LIST->length);
 8002e28:	4b17      	ldr	r3, [pc, #92]	; (8002e88 <buttonUP_handler+0x94>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	b2db      	uxtb	r3, r3
 8002e30:	4619      	mov	r1, r3
 8002e32:	4816      	ldr	r0, [pc, #88]	; (8002e8c <buttonUP_handler+0x98>)
 8002e34:	f7ff fe98 	bl	8002b68 <previousMonitor>
		setClearflag(ENABLE);
 8002e38:	2001      	movs	r0, #1
 8002e3a:	f7ff fe2d 	bl	8002a98 <setClearflag>
		break;
 8002e3e:	e01f      	b.n	8002e80 <buttonUP_handler+0x8c>
	case MENU_CONTROL:
		switchcurControl();
 8002e40:	f7ff fe54 	bl	8002aec <switchcurControl>
		setClearflag(ENABLE);
 8002e44:	2001      	movs	r0, #1
 8002e46:	f7ff fe27 	bl	8002a98 <setClearflag>
		break;
 8002e4a:	e019      	b.n	8002e80 <buttonUP_handler+0x8c>
	case VOLTAGE_CONTROL:
		// increase step value
		increaseStepchange();
 8002e4c:	f7ff fd9c 	bl	8002988 <increaseStepchange>
		setClearflag(ENABLE);
 8002e50:	2001      	movs	r0, #1
 8002e52:	f7ff fe21 	bl	8002a98 <setClearflag>
		break;
 8002e56:	e013      	b.n	8002e80 <buttonUP_handler+0x8c>
	case ON_OFF_CONTROL:
		switch (curSwitch) {
 8002e58:	4b0d      	ldr	r3, [pc, #52]	; (8002e90 <buttonUP_handler+0x9c>)
 8002e5a:	781b      	ldrb	r3, [r3, #0]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d005      	beq.n	8002e6c <buttonUP_handler+0x78>
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d107      	bne.n	8002e74 <buttonUP_handler+0x80>
		case SW_ON:
			curSwitch = SW_OFF;
 8002e64:	4b0a      	ldr	r3, [pc, #40]	; (8002e90 <buttonUP_handler+0x9c>)
 8002e66:	2200      	movs	r2, #0
 8002e68:	701a      	strb	r2, [r3, #0]
			break;
 8002e6a:	e004      	b.n	8002e76 <buttonUP_handler+0x82>
		case SW_OFF:
			curSwitch = SW_ON;
 8002e6c:	4b08      	ldr	r3, [pc, #32]	; (8002e90 <buttonUP_handler+0x9c>)
 8002e6e:	2201      	movs	r2, #1
 8002e70:	701a      	strb	r2, [r3, #0]
			break;
 8002e72:	e000      	b.n	8002e76 <buttonUP_handler+0x82>
		default:
			break;
 8002e74:	bf00      	nop
		}
		setClearflag(ENABLE);
 8002e76:	2001      	movs	r0, #1
 8002e78:	f7ff fe0e 	bl	8002a98 <setClearflag>
		break;
 8002e7c:	e000      	b.n	8002e80 <buttonUP_handler+0x8c>
	case COMPLETE_CONTROL:
		break;
	default:
		break;
 8002e7e:	bf00      	nop
	}
}
 8002e80:	bf00      	nop
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	20001948 	.word	0x20001948
 8002e88:	20001944 	.word	0x20001944
 8002e8c:	20001950 	.word	0x20001950
 8002e90:	20000004 	.word	0x20000004

08002e94 <SW_LIMIT_MAX_handler>:
void SW_LIMIT_MAX_handler()
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	af00      	add	r7, sp, #0
	setClearflag(ENABLE);
 8002e98:	2001      	movs	r0, #1
 8002e9a:	f7ff fdfd 	bl	8002a98 <setClearflag>
	A4988_DisableDriver();
 8002e9e:	f002 fe01 	bl	8005aa4 <A4988_DisableDriver>
	setLimit(LIMIT_MAX);
 8002ea2:	2001      	movs	r0, #1
 8002ea4:	f7ff fd4c 	bl	8002940 <setLimit>
}
 8002ea8:	bf00      	nop
 8002eaa:	bd80      	pop	{r7, pc}

08002eac <SW_LIMIT_MIN_handler>:
void SW_LIMIT_MIN_handler()
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	af00      	add	r7, sp, #0
	setClearflag(ENABLE);
 8002eb0:	2001      	movs	r0, #1
 8002eb2:	f7ff fdf1 	bl	8002a98 <setClearflag>
	A4988_DisableDriver();
 8002eb6:	f002 fdf5 	bl	8005aa4 <A4988_DisableDriver>
	setLimit(LIMIT_MIN);
 8002eba:	2000      	movs	r0, #0
 8002ebc:	f7ff fd40 	bl	8002940 <setLimit>
}
 8002ec0:	bf00      	nop
 8002ec2:	bd80      	pop	{r7, pc}

08002ec4 <DS3231_Init>:

static uint8_t B2D(uint8_t bcd);
static uint8_t D2B(uint8_t decimal);

void DS3231_Init(I2C_HandleTypeDef *handle)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b082      	sub	sp, #8
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  i2c = handle;
 8002ecc:	4a04      	ldr	r2, [pc, #16]	; (8002ee0 <DS3231_Init+0x1c>)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6013      	str	r3, [r2, #0]
  DS3231_ClearAlarm1();
 8002ed2:	f000 f9d5 	bl	8003280 <DS3231_ClearAlarm1>
}
 8002ed6:	bf00      	nop
 8002ed8:	3708      	adds	r7, #8
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	20001954 	.word	0x20001954

08002ee4 <epochtine2RTC>:
void epochtine2RTC(time_t epochtime,  _RTC *myRTC)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b086      	sub	sp, #24
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002eee:	607a      	str	r2, [r7, #4]
	struct tm *info;
	info = localtime(&epochtime);
 8002ef0:	f107 0308 	add.w	r3, r7, #8
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f007 fe79 	bl	800abec <localtime>
 8002efa:	6178      	str	r0, [r7, #20]
	myRTC->Year = info->tm_year -100;
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	695b      	ldr	r3, [r3, #20]
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	3b64      	subs	r3, #100	; 0x64
 8002f04:	b2da      	uxtb	r2, r3
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	701a      	strb	r2, [r3, #0]
	myRTC->Month =  info->tm_mon +1;
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	691b      	ldr	r3, [r3, #16]
 8002f0e:	b2db      	uxtb	r3, r3
 8002f10:	3301      	adds	r3, #1
 8002f12:	b2da      	uxtb	r2, r3
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	705a      	strb	r2, [r3, #1]
	myRTC->Date = info->tm_mday;
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	b2da      	uxtb	r2, r3
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	709a      	strb	r2, [r3, #2]
	myRTC->DaysOfWeek = info->tm_wday + 1;
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	699b      	ldr	r3, [r3, #24]
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	3301      	adds	r3, #1
 8002f2a:	b2da      	uxtb	r2, r3
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	70da      	strb	r2, [r3, #3]
	myRTC->Hour = info->tm_hour + 7;
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	3307      	adds	r3, #7
 8002f38:	b2da      	uxtb	r2, r3
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	711a      	strb	r2, [r3, #4]
	myRTC->Min = info->tm_min;
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	b2da      	uxtb	r2, r3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	715a      	strb	r2, [r3, #5]
	myRTC->Sec = info->tm_sec;
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	b2da      	uxtb	r2, r3
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	719a      	strb	r2, [r3, #6]
}
 8002f52:	bf00      	nop
 8002f54:	3718      	adds	r7, #24
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}

08002f5a <RTC2epochtime>:

time_t RTC2epochtime (_RTC *RTCtime)
{
 8002f5a:	b580      	push	{r7, lr}
 8002f5c:	b08e      	sub	sp, #56	; 0x38
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	6078      	str	r0, [r7, #4]
	struct tm t;
	time_t epochtime;
	t.tm_year = 2000 + RTCtime->Year -1900;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	781b      	ldrb	r3, [r3, #0]
 8002f66:	3364      	adds	r3, #100	; 0x64
 8002f68:	623b      	str	r3, [r7, #32]
	t.tm_mon = RTCtime->Month - 1;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	785b      	ldrb	r3, [r3, #1]
 8002f6e:	3b01      	subs	r3, #1
 8002f70:	61fb      	str	r3, [r7, #28]
	t.tm_mday = RTCtime->Date;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	789b      	ldrb	r3, [r3, #2]
 8002f76:	61bb      	str	r3, [r7, #24]
	t.tm_hour = RTCtime->Hour - 7;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	791b      	ldrb	r3, [r3, #4]
 8002f7c:	3b07      	subs	r3, #7
 8002f7e:	617b      	str	r3, [r7, #20]
	t.tm_min = RTCtime->Min;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	795b      	ldrb	r3, [r3, #5]
 8002f84:	613b      	str	r3, [r7, #16]
	t.tm_sec = RTCtime->Sec;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	799b      	ldrb	r3, [r3, #6]
 8002f8a:	60fb      	str	r3, [r7, #12]
	t.tm_isdst = -1;
 8002f8c:	f04f 33ff 	mov.w	r3, #4294967295
 8002f90:	62fb      	str	r3, [r7, #44]	; 0x2c
	epochtime = mktime(&t);
 8002f92:	f107 030c 	add.w	r3, r7, #12
 8002f96:	4618      	mov	r0, r3
 8002f98:	f008 f846 	bl	800b028 <mktime>
 8002f9c:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
	return epochtime;
 8002fa0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
}
 8002fa4:	4610      	mov	r0, r2
 8002fa6:	4619      	mov	r1, r3
 8002fa8:	3738      	adds	r7, #56	; 0x38
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
	...

08002fb0 <DS3231_GetTime>:
	if ( (rtc.Min < 0) || (rtc.Min >59 ) )	return false;
	if ( (rtc.Hour < 0) || (rtc.Sec >23 ) )	return false;
	return true;
}
bool DS3231_GetTime(_RTC *rtc)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b086      	sub	sp, #24
 8002fb4:	af02      	add	r7, sp, #8
 8002fb6:	6078      	str	r0, [r7, #4]
  uint8_t startAddr = DS3231_REG_TIME;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	73fb      	strb	r3, [r7, #15]
  uint8_t buffer[7] = {0,};
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	60bb      	str	r3, [r7, #8]
 8002fc0:	f107 030c 	add.w	r3, r7, #12
 8002fc4:	2100      	movs	r1, #0
 8002fc6:	460a      	mov	r2, r1
 8002fc8:	801a      	strh	r2, [r3, #0]
 8002fca:	460a      	mov	r2, r1
 8002fcc:	709a      	strb	r2, [r3, #2]

  if(HAL_I2C_Master_Transmit(i2c, DS3231_ADDR, &startAddr, 1, HAL_MAX_DELAY) != HAL_OK) return false;
 8002fce:	4b35      	ldr	r3, [pc, #212]	; (80030a4 <DS3231_GetTime+0xf4>)
 8002fd0:	6818      	ldr	r0, [r3, #0]
 8002fd2:	f107 020f 	add.w	r2, r7, #15
 8002fd6:	f04f 33ff 	mov.w	r3, #4294967295
 8002fda:	9300      	str	r3, [sp, #0]
 8002fdc:	2301      	movs	r3, #1
 8002fde:	21d0      	movs	r1, #208	; 0xd0
 8002fe0:	f004 ff78 	bl	8007ed4 <HAL_I2C_Master_Transmit>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d001      	beq.n	8002fee <DS3231_GetTime+0x3e>
 8002fea:	2300      	movs	r3, #0
 8002fec:	e055      	b.n	800309a <DS3231_GetTime+0xea>
  if(HAL_I2C_Master_Receive(i2c, DS3231_ADDR, buffer, sizeof(buffer), HAL_MAX_DELAY) != HAL_OK) return false;
 8002fee:	4b2d      	ldr	r3, [pc, #180]	; (80030a4 <DS3231_GetTime+0xf4>)
 8002ff0:	6818      	ldr	r0, [r3, #0]
 8002ff2:	f107 0208 	add.w	r2, r7, #8
 8002ff6:	f04f 33ff 	mov.w	r3, #4294967295
 8002ffa:	9300      	str	r3, [sp, #0]
 8002ffc:	2307      	movs	r3, #7
 8002ffe:	21d0      	movs	r1, #208	; 0xd0
 8003000:	f005 f866 	bl	80080d0 <HAL_I2C_Master_Receive>
 8003004:	4603      	mov	r3, r0
 8003006:	2b00      	cmp	r3, #0
 8003008:	d001      	beq.n	800300e <DS3231_GetTime+0x5e>
 800300a:	2300      	movs	r3, #0
 800300c:	e045      	b.n	800309a <DS3231_GetTime+0xea>

  rtc->Sec = B2D(buffer[0] & 0x7F);
 800300e:	7a3b      	ldrb	r3, [r7, #8]
 8003010:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003014:	b2db      	uxtb	r3, r3
 8003016:	4618      	mov	r0, r3
 8003018:	f000 f9a8 	bl	800336c <B2D>
 800301c:	4603      	mov	r3, r0
 800301e:	461a      	mov	r2, r3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	719a      	strb	r2, [r3, #6]
  rtc->Min = B2D(buffer[1] & 0x7F);
 8003024:	7a7b      	ldrb	r3, [r7, #9]
 8003026:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800302a:	b2db      	uxtb	r3, r3
 800302c:	4618      	mov	r0, r3
 800302e:	f000 f99d 	bl	800336c <B2D>
 8003032:	4603      	mov	r3, r0
 8003034:	461a      	mov	r2, r3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	715a      	strb	r2, [r3, #5]
  rtc->Hour = B2D(buffer[2] & 0x3F);
 800303a:	7abb      	ldrb	r3, [r7, #10]
 800303c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003040:	b2db      	uxtb	r3, r3
 8003042:	4618      	mov	r0, r3
 8003044:	f000 f992 	bl	800336c <B2D>
 8003048:	4603      	mov	r3, r0
 800304a:	461a      	mov	r2, r3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	711a      	strb	r2, [r3, #4]
  rtc->DaysOfWeek = buffer[3] & 0x07;
 8003050:	7afb      	ldrb	r3, [r7, #11]
 8003052:	f003 0307 	and.w	r3, r3, #7
 8003056:	b2da      	uxtb	r2, r3
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	70da      	strb	r2, [r3, #3]
  rtc->Date = B2D(buffer[4] & 0x3F);
 800305c:	7b3b      	ldrb	r3, [r7, #12]
 800305e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003062:	b2db      	uxtb	r3, r3
 8003064:	4618      	mov	r0, r3
 8003066:	f000 f981 	bl	800336c <B2D>
 800306a:	4603      	mov	r3, r0
 800306c:	461a      	mov	r2, r3
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	709a      	strb	r2, [r3, #2]
  rtc->Month = B2D(buffer[5] & 0x1F);
 8003072:	7b7b      	ldrb	r3, [r7, #13]
 8003074:	f003 031f 	and.w	r3, r3, #31
 8003078:	b2db      	uxtb	r3, r3
 800307a:	4618      	mov	r0, r3
 800307c:	f000 f976 	bl	800336c <B2D>
 8003080:	4603      	mov	r3, r0
 8003082:	461a      	mov	r2, r3
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	705a      	strb	r2, [r3, #1]
  rtc->Year = B2D(buffer[6]);
 8003088:	7bbb      	ldrb	r3, [r7, #14]
 800308a:	4618      	mov	r0, r3
 800308c:	f000 f96e 	bl	800336c <B2D>
 8003090:	4603      	mov	r3, r0
 8003092:	461a      	mov	r2, r3
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	701a      	strb	r2, [r3, #0]

  return true;
 8003098:	2301      	movs	r3, #1
}
 800309a:	4618      	mov	r0, r3
 800309c:	3710      	adds	r7, #16
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}
 80030a2:	bf00      	nop
 80030a4:	20001954 	.word	0x20001954

080030a8 <DS3231_SetTime>:

bool DS3231_SetTime(_RTC *rtc)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b088      	sub	sp, #32
 80030ac:	af02      	add	r7, sp, #8
 80030ae:	6078      	str	r0, [r7, #4]
  uint8_t startAddr = DS3231_REG_TIME;
 80030b0:	2300      	movs	r3, #0
 80030b2:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[8] = {startAddr, D2B(rtc->Sec), D2B(rtc->Min), D2B(rtc->Hour), rtc->DaysOfWeek, D2B(rtc->Date), D2B(rtc->Month), D2B(rtc->Year)};
 80030b4:	7dfb      	ldrb	r3, [r7, #23]
 80030b6:	733b      	strb	r3, [r7, #12]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	799b      	ldrb	r3, [r3, #6]
 80030bc:	4618      	mov	r0, r3
 80030be:	f000 f96d 	bl	800339c <D2B>
 80030c2:	4603      	mov	r3, r0
 80030c4:	737b      	strb	r3, [r7, #13]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	795b      	ldrb	r3, [r3, #5]
 80030ca:	4618      	mov	r0, r3
 80030cc:	f000 f966 	bl	800339c <D2B>
 80030d0:	4603      	mov	r3, r0
 80030d2:	73bb      	strb	r3, [r7, #14]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	791b      	ldrb	r3, [r3, #4]
 80030d8:	4618      	mov	r0, r3
 80030da:	f000 f95f 	bl	800339c <D2B>
 80030de:	4603      	mov	r3, r0
 80030e0:	73fb      	strb	r3, [r7, #15]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	78db      	ldrb	r3, [r3, #3]
 80030e6:	743b      	strb	r3, [r7, #16]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	789b      	ldrb	r3, [r3, #2]
 80030ec:	4618      	mov	r0, r3
 80030ee:	f000 f955 	bl	800339c <D2B>
 80030f2:	4603      	mov	r3, r0
 80030f4:	747b      	strb	r3, [r7, #17]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	785b      	ldrb	r3, [r3, #1]
 80030fa:	4618      	mov	r0, r3
 80030fc:	f000 f94e 	bl	800339c <D2B>
 8003100:	4603      	mov	r3, r0
 8003102:	74bb      	strb	r3, [r7, #18]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	781b      	ldrb	r3, [r3, #0]
 8003108:	4618      	mov	r0, r3
 800310a:	f000 f947 	bl	800339c <D2B>
 800310e:	4603      	mov	r3, r0
 8003110:	74fb      	strb	r3, [r7, #19]
  if(HAL_I2C_Master_Transmit(i2c, DS3231_ADDR, buffer, sizeof(buffer), HAL_MAX_DELAY) != HAL_OK) return false;
 8003112:	4b0a      	ldr	r3, [pc, #40]	; (800313c <DS3231_SetTime+0x94>)
 8003114:	6818      	ldr	r0, [r3, #0]
 8003116:	f107 020c 	add.w	r2, r7, #12
 800311a:	f04f 33ff 	mov.w	r3, #4294967295
 800311e:	9300      	str	r3, [sp, #0]
 8003120:	2308      	movs	r3, #8
 8003122:	21d0      	movs	r1, #208	; 0xd0
 8003124:	f004 fed6 	bl	8007ed4 <HAL_I2C_Master_Transmit>
 8003128:	4603      	mov	r3, r0
 800312a:	2b00      	cmp	r3, #0
 800312c:	d001      	beq.n	8003132 <DS3231_SetTime+0x8a>
 800312e:	2300      	movs	r3, #0
 8003130:	e000      	b.n	8003134 <DS3231_SetTime+0x8c>

  return true;
 8003132:	2301      	movs	r3, #1
}
 8003134:	4618      	mov	r0, r3
 8003136:	3718      	adds	r7, #24
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}
 800313c:	20001954 	.word	0x20001954

08003140 <DS3231_SetAlarm1>:
  *temp = value / 4.0f;
  return true;
}

bool DS3231_SetAlarm1(uint8_t mode, uint8_t date, uint8_t hour, uint8_t min, uint8_t sec)
{
 8003140:	b590      	push	{r4, r7, lr}
 8003142:	b089      	sub	sp, #36	; 0x24
 8003144:	af02      	add	r7, sp, #8
 8003146:	4604      	mov	r4, r0
 8003148:	4608      	mov	r0, r1
 800314a:	4611      	mov	r1, r2
 800314c:	461a      	mov	r2, r3
 800314e:	4623      	mov	r3, r4
 8003150:	71fb      	strb	r3, [r7, #7]
 8003152:	4603      	mov	r3, r0
 8003154:	71bb      	strb	r3, [r7, #6]
 8003156:	460b      	mov	r3, r1
 8003158:	717b      	strb	r3, [r7, #5]
 800315a:	4613      	mov	r3, r2
 800315c:	713b      	strb	r3, [r7, #4]
  uint8_t alarmSecond = D2B(sec);
 800315e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003162:	4618      	mov	r0, r3
 8003164:	f000 f91a 	bl	800339c <D2B>
 8003168:	4603      	mov	r3, r0
 800316a:	75fb      	strb	r3, [r7, #23]
  uint8_t alarmMinute = D2B(min);
 800316c:	793b      	ldrb	r3, [r7, #4]
 800316e:	4618      	mov	r0, r3
 8003170:	f000 f914 	bl	800339c <D2B>
 8003174:	4603      	mov	r3, r0
 8003176:	75bb      	strb	r3, [r7, #22]
  uint8_t alarmHour = D2B(hour);
 8003178:	797b      	ldrb	r3, [r7, #5]
 800317a:	4618      	mov	r0, r3
 800317c:	f000 f90e 	bl	800339c <D2B>
 8003180:	4603      	mov	r3, r0
 8003182:	757b      	strb	r3, [r7, #21]
  uint8_t alarmDate = D2B(date);
 8003184:	79bb      	ldrb	r3, [r7, #6]
 8003186:	4618      	mov	r0, r3
 8003188:	f000 f908 	bl	800339c <D2B>
 800318c:	4603      	mov	r3, r0
 800318e:	753b      	strb	r3, [r7, #20]

  switch(mode)
 8003190:	79fb      	ldrb	r3, [r7, #7]
 8003192:	2b04      	cmp	r3, #4
 8003194:	d838      	bhi.n	8003208 <DS3231_SetAlarm1+0xc8>
 8003196:	a201      	add	r2, pc, #4	; (adr r2, 800319c <DS3231_SetAlarm1+0x5c>)
 8003198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800319c:	08003209 	.word	0x08003209
 80031a0:	080031b1 	.word	0x080031b1
 80031a4:	080031bb 	.word	0x080031bb
 80031a8:	080031cd 	.word	0x080031cd
 80031ac:	080031e7 	.word	0x080031e7
  {
  case ALARM_MODE_ALL_MATCHED:
    break;
  case ALARM_MODE_HOUR_MIN_SEC_MATCHED:
    alarmDate |= 0x80;
 80031b0:	7d3b      	ldrb	r3, [r7, #20]
 80031b2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80031b6:	753b      	strb	r3, [r7, #20]
    break;
 80031b8:	e027      	b.n	800320a <DS3231_SetAlarm1+0xca>
  case ALARM_MODE_MIN_SEC_MATCHED:
    alarmDate |= 0x80;
 80031ba:	7d3b      	ldrb	r3, [r7, #20]
 80031bc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80031c0:	753b      	strb	r3, [r7, #20]
    alarmHour |= 0x80;
 80031c2:	7d7b      	ldrb	r3, [r7, #21]
 80031c4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80031c8:	757b      	strb	r3, [r7, #21]
    break;
 80031ca:	e01e      	b.n	800320a <DS3231_SetAlarm1+0xca>
  case ALARM_MODE_SEC_MATCHED:
    alarmDate |= 0x80;
 80031cc:	7d3b      	ldrb	r3, [r7, #20]
 80031ce:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80031d2:	753b      	strb	r3, [r7, #20]
    alarmHour |= 0x80;
 80031d4:	7d7b      	ldrb	r3, [r7, #21]
 80031d6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80031da:	757b      	strb	r3, [r7, #21]
    alarmMinute |= 0x80;
 80031dc:	7dbb      	ldrb	r3, [r7, #22]
 80031de:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80031e2:	75bb      	strb	r3, [r7, #22]
    break;
 80031e4:	e011      	b.n	800320a <DS3231_SetAlarm1+0xca>
  case ALARM_MODE_ONCE_PER_SECOND:
    alarmDate |= 0x80;
 80031e6:	7d3b      	ldrb	r3, [r7, #20]
 80031e8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80031ec:	753b      	strb	r3, [r7, #20]
    alarmHour |= 0x80;
 80031ee:	7d7b      	ldrb	r3, [r7, #21]
 80031f0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80031f4:	757b      	strb	r3, [r7, #21]
    alarmMinute |= 0x80;
 80031f6:	7dbb      	ldrb	r3, [r7, #22]
 80031f8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80031fc:	75bb      	strb	r3, [r7, #22]
    alarmSecond |= 0x80;
 80031fe:	7dfb      	ldrb	r3, [r7, #23]
 8003200:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003204:	75fb      	strb	r3, [r7, #23]
    break;
 8003206:	e000      	b.n	800320a <DS3231_SetAlarm1+0xca>
  default:
    break;
 8003208:	bf00      	nop
  }

  /* Write Alarm Registers */
  uint8_t startAddr = DS3231_REG_ALARM1;
 800320a:	2307      	movs	r3, #7
 800320c:	74fb      	strb	r3, [r7, #19]
  uint8_t buffer[5] = {startAddr, alarmSecond, alarmMinute, alarmHour, alarmDate};
 800320e:	7cfb      	ldrb	r3, [r7, #19]
 8003210:	733b      	strb	r3, [r7, #12]
 8003212:	7dfb      	ldrb	r3, [r7, #23]
 8003214:	737b      	strb	r3, [r7, #13]
 8003216:	7dbb      	ldrb	r3, [r7, #22]
 8003218:	73bb      	strb	r3, [r7, #14]
 800321a:	7d7b      	ldrb	r3, [r7, #21]
 800321c:	73fb      	strb	r3, [r7, #15]
 800321e:	7d3b      	ldrb	r3, [r7, #20]
 8003220:	743b      	strb	r3, [r7, #16]
  if(HAL_I2C_Master_Transmit(i2c, DS3231_ADDR, buffer, sizeof(buffer), HAL_MAX_DELAY) != HAL_OK) return false;
 8003222:	4b16      	ldr	r3, [pc, #88]	; (800327c <DS3231_SetAlarm1+0x13c>)
 8003224:	6818      	ldr	r0, [r3, #0]
 8003226:	f107 020c 	add.w	r2, r7, #12
 800322a:	f04f 33ff 	mov.w	r3, #4294967295
 800322e:	9300      	str	r3, [sp, #0]
 8003230:	2305      	movs	r3, #5
 8003232:	21d0      	movs	r1, #208	; 0xd0
 8003234:	f004 fe4e 	bl	8007ed4 <HAL_I2C_Master_Transmit>
 8003238:	4603      	mov	r3, r0
 800323a:	2b00      	cmp	r3, #0
 800323c:	d001      	beq.n	8003242 <DS3231_SetAlarm1+0x102>
 800323e:	2300      	movs	r3, #0
 8003240:	e017      	b.n	8003272 <DS3231_SetAlarm1+0x132>

  /* Enable Alarm1 at Control Register */
  uint8_t ctrlReg = 0x00;
 8003242:	2300      	movs	r3, #0
 8003244:	72fb      	strb	r3, [r7, #11]
  ReadRegister(DS3231_REG_CONTROL, &ctrlReg);
 8003246:	f107 030b 	add.w	r3, r7, #11
 800324a:	4619      	mov	r1, r3
 800324c:	200e      	movs	r0, #14
 800324e:	f000 f83d 	bl	80032cc <ReadRegister>
  ctrlReg |= DS3231_CON_A1IE;
 8003252:	7afb      	ldrb	r3, [r7, #11]
 8003254:	f043 0301 	orr.w	r3, r3, #1
 8003258:	b2db      	uxtb	r3, r3
 800325a:	72fb      	strb	r3, [r7, #11]
  ctrlReg |= DS3231_CON_INTCN;
 800325c:	7afb      	ldrb	r3, [r7, #11]
 800325e:	f043 0304 	orr.w	r3, r3, #4
 8003262:	b2db      	uxtb	r3, r3
 8003264:	72fb      	strb	r3, [r7, #11]
  WriteRegister(DS3231_REG_CONTROL, ctrlReg);
 8003266:	7afb      	ldrb	r3, [r7, #11]
 8003268:	4619      	mov	r1, r3
 800326a:	200e      	movs	r0, #14
 800326c:	f000 f85a 	bl	8003324 <WriteRegister>

  return true;
 8003270:	2301      	movs	r3, #1
}
 8003272:	4618      	mov	r0, r3
 8003274:	371c      	adds	r7, #28
 8003276:	46bd      	mov	sp, r7
 8003278:	bd90      	pop	{r4, r7, pc}
 800327a:	bf00      	nop
 800327c:	20001954 	.word	0x20001954

08003280 <DS3231_ClearAlarm1>:

bool DS3231_ClearAlarm1()
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b082      	sub	sp, #8
 8003284:	af00      	add	r7, sp, #0
  uint8_t ctrlReg;
  uint8_t statusReg;

  /* Clear Control Register */
  ReadRegister(DS3231_REG_CONTROL, &ctrlReg);
 8003286:	1dfb      	adds	r3, r7, #7
 8003288:	4619      	mov	r1, r3
 800328a:	200e      	movs	r0, #14
 800328c:	f000 f81e 	bl	80032cc <ReadRegister>
  ctrlReg &= ~DS3231_CON_A1IE;
 8003290:	79fb      	ldrb	r3, [r7, #7]
 8003292:	f023 0301 	bic.w	r3, r3, #1
 8003296:	b2db      	uxtb	r3, r3
 8003298:	71fb      	strb	r3, [r7, #7]
  WriteRegister(DS3231_REG_CONTROL, ctrlReg);
 800329a:	79fb      	ldrb	r3, [r7, #7]
 800329c:	4619      	mov	r1, r3
 800329e:	200e      	movs	r0, #14
 80032a0:	f000 f840 	bl	8003324 <WriteRegister>

  /* Clear Status Register */
  ReadRegister(DS3231_REG_STATUS, &statusReg);
 80032a4:	1dbb      	adds	r3, r7, #6
 80032a6:	4619      	mov	r1, r3
 80032a8:	200f      	movs	r0, #15
 80032aa:	f000 f80f 	bl	80032cc <ReadRegister>
  statusReg &= ~DS3231_STA_A1F;
 80032ae:	79bb      	ldrb	r3, [r7, #6]
 80032b0:	f023 0301 	bic.w	r3, r3, #1
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	71bb      	strb	r3, [r7, #6]
  WriteRegister(DS3231_REG_STATUS, statusReg);
 80032b8:	79bb      	ldrb	r3, [r7, #6]
 80032ba:	4619      	mov	r1, r3
 80032bc:	200f      	movs	r0, #15
 80032be:	f000 f831 	bl	8003324 <WriteRegister>

  return true;
 80032c2:	2301      	movs	r3, #1
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3708      	adds	r7, #8
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}

080032cc <ReadRegister>:

bool ReadRegister(uint8_t regAddr, uint8_t *value)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b084      	sub	sp, #16
 80032d0:	af02      	add	r7, sp, #8
 80032d2:	4603      	mov	r3, r0
 80032d4:	6039      	str	r1, [r7, #0]
 80032d6:	71fb      	strb	r3, [r7, #7]
  if(HAL_I2C_Master_Transmit(i2c, DS3231_ADDR, &regAddr, 1, HAL_MAX_DELAY) != HAL_OK) return false;
 80032d8:	4b11      	ldr	r3, [pc, #68]	; (8003320 <ReadRegister+0x54>)
 80032da:	6818      	ldr	r0, [r3, #0]
 80032dc:	1dfa      	adds	r2, r7, #7
 80032de:	f04f 33ff 	mov.w	r3, #4294967295
 80032e2:	9300      	str	r3, [sp, #0]
 80032e4:	2301      	movs	r3, #1
 80032e6:	21d0      	movs	r1, #208	; 0xd0
 80032e8:	f004 fdf4 	bl	8007ed4 <HAL_I2C_Master_Transmit>
 80032ec:	4603      	mov	r3, r0
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d001      	beq.n	80032f6 <ReadRegister+0x2a>
 80032f2:	2300      	movs	r3, #0
 80032f4:	e00f      	b.n	8003316 <ReadRegister+0x4a>
  if(HAL_I2C_Master_Receive(i2c, DS3231_ADDR, value, 1, HAL_MAX_DELAY) != HAL_OK) return false;
 80032f6:	4b0a      	ldr	r3, [pc, #40]	; (8003320 <ReadRegister+0x54>)
 80032f8:	6818      	ldr	r0, [r3, #0]
 80032fa:	f04f 33ff 	mov.w	r3, #4294967295
 80032fe:	9300      	str	r3, [sp, #0]
 8003300:	2301      	movs	r3, #1
 8003302:	683a      	ldr	r2, [r7, #0]
 8003304:	21d0      	movs	r1, #208	; 0xd0
 8003306:	f004 fee3 	bl	80080d0 <HAL_I2C_Master_Receive>
 800330a:	4603      	mov	r3, r0
 800330c:	2b00      	cmp	r3, #0
 800330e:	d001      	beq.n	8003314 <ReadRegister+0x48>
 8003310:	2300      	movs	r3, #0
 8003312:	e000      	b.n	8003316 <ReadRegister+0x4a>

  return true;
 8003314:	2301      	movs	r3, #1
}
 8003316:	4618      	mov	r0, r3
 8003318:	3708      	adds	r7, #8
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
 800331e:	bf00      	nop
 8003320:	20001954 	.word	0x20001954

08003324 <WriteRegister>:

bool WriteRegister(uint8_t regAddr, uint8_t value)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b086      	sub	sp, #24
 8003328:	af02      	add	r7, sp, #8
 800332a:	4603      	mov	r3, r0
 800332c:	460a      	mov	r2, r1
 800332e:	71fb      	strb	r3, [r7, #7]
 8003330:	4613      	mov	r3, r2
 8003332:	71bb      	strb	r3, [r7, #6]
  uint8_t buffer[2] = {regAddr, value};
 8003334:	79fb      	ldrb	r3, [r7, #7]
 8003336:	733b      	strb	r3, [r7, #12]
 8003338:	79bb      	ldrb	r3, [r7, #6]
 800333a:	737b      	strb	r3, [r7, #13]
  if(HAL_I2C_Master_Transmit(i2c, DS3231_ADDR, buffer, sizeof(buffer), HAL_MAX_DELAY) != HAL_OK) return false;
 800333c:	4b0a      	ldr	r3, [pc, #40]	; (8003368 <WriteRegister+0x44>)
 800333e:	6818      	ldr	r0, [r3, #0]
 8003340:	f107 020c 	add.w	r2, r7, #12
 8003344:	f04f 33ff 	mov.w	r3, #4294967295
 8003348:	9300      	str	r3, [sp, #0]
 800334a:	2302      	movs	r3, #2
 800334c:	21d0      	movs	r1, #208	; 0xd0
 800334e:	f004 fdc1 	bl	8007ed4 <HAL_I2C_Master_Transmit>
 8003352:	4603      	mov	r3, r0
 8003354:	2b00      	cmp	r3, #0
 8003356:	d001      	beq.n	800335c <WriteRegister+0x38>
 8003358:	2300      	movs	r3, #0
 800335a:	e000      	b.n	800335e <WriteRegister+0x3a>

  return true;
 800335c:	2301      	movs	r3, #1
}
 800335e:	4618      	mov	r0, r3
 8003360:	3710      	adds	r7, #16
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	20001954 	.word	0x20001954

0800336c <B2D>:

static uint8_t B2D(uint8_t bcd)
{
 800336c:	b480      	push	{r7}
 800336e:	b083      	sub	sp, #12
 8003370:	af00      	add	r7, sp, #0
 8003372:	4603      	mov	r3, r0
 8003374:	71fb      	strb	r3, [r7, #7]
  return (bcd >> 4) * 10 + (bcd & 0x0F);
 8003376:	79fb      	ldrb	r3, [r7, #7]
 8003378:	091b      	lsrs	r3, r3, #4
 800337a:	b2db      	uxtb	r3, r3
 800337c:	461a      	mov	r2, r3
 800337e:	0092      	lsls	r2, r2, #2
 8003380:	4413      	add	r3, r2
 8003382:	005b      	lsls	r3, r3, #1
 8003384:	b2da      	uxtb	r2, r3
 8003386:	79fb      	ldrb	r3, [r7, #7]
 8003388:	f003 030f 	and.w	r3, r3, #15
 800338c:	b2db      	uxtb	r3, r3
 800338e:	4413      	add	r3, r2
 8003390:	b2db      	uxtb	r3, r3
}
 8003392:	4618      	mov	r0, r3
 8003394:	370c      	adds	r7, #12
 8003396:	46bd      	mov	sp, r7
 8003398:	bc80      	pop	{r7}
 800339a:	4770      	bx	lr

0800339c <D2B>:

static uint8_t D2B(uint8_t decimal)
{
 800339c:	b480      	push	{r7}
 800339e:	b083      	sub	sp, #12
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	4603      	mov	r3, r0
 80033a4:	71fb      	strb	r3, [r7, #7]
  return (((decimal / 10) << 4) | (decimal % 10));
 80033a6:	79fb      	ldrb	r3, [r7, #7]
 80033a8:	4a0d      	ldr	r2, [pc, #52]	; (80033e0 <D2B+0x44>)
 80033aa:	fba2 2303 	umull	r2, r3, r2, r3
 80033ae:	08db      	lsrs	r3, r3, #3
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	011b      	lsls	r3, r3, #4
 80033b4:	b258      	sxtb	r0, r3
 80033b6:	79fa      	ldrb	r2, [r7, #7]
 80033b8:	4b09      	ldr	r3, [pc, #36]	; (80033e0 <D2B+0x44>)
 80033ba:	fba3 1302 	umull	r1, r3, r3, r2
 80033be:	08d9      	lsrs	r1, r3, #3
 80033c0:	460b      	mov	r3, r1
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	440b      	add	r3, r1
 80033c6:	005b      	lsls	r3, r3, #1
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	b2db      	uxtb	r3, r3
 80033cc:	b25b      	sxtb	r3, r3
 80033ce:	4303      	orrs	r3, r0
 80033d0:	b25b      	sxtb	r3, r3
 80033d2:	b2db      	uxtb	r3, r3
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	370c      	adds	r7, #12
 80033d8:	46bd      	mov	sp, r7
 80033da:	bc80      	pop	{r7}
 80033dc:	4770      	bx	lr
 80033de:	bf00      	nop
 80033e0:	cccccccd 	.word	0xcccccccd

080033e4 <getCountdowntime>:

uint16_t getCountdowntime(uint8_t hour, uint8_t min, uint8_t sec)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b084      	sub	sp, #16
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	4603      	mov	r3, r0
 80033ec:	71fb      	strb	r3, [r7, #7]
 80033ee:	460b      	mov	r3, r1
 80033f0:	71bb      	strb	r3, [r7, #6]
 80033f2:	4613      	mov	r3, r2
 80033f4:	717b      	strb	r3, [r7, #5]
	_RTC curRTC;
	if (!DS3231_GetTime(&curRTC))	return 0;
 80033f6:	f107 0308 	add.w	r3, r7, #8
 80033fa:	4618      	mov	r0, r3
 80033fc:	f7ff fdd8 	bl	8002fb0 <DS3231_GetTime>
 8003400:	4603      	mov	r3, r0
 8003402:	f083 0301 	eor.w	r3, r3, #1
 8003406:	b2db      	uxtb	r3, r3
 8003408:	2b00      	cmp	r3, #0
 800340a:	d001      	beq.n	8003410 <getCountdowntime+0x2c>
 800340c:	2300      	movs	r3, #0
 800340e:	e041      	b.n	8003494 <getCountdowntime+0xb0>
	if ( hour < curRTC.Hour || hour - curRTC.Hour > 18 )	return 0;
 8003410:	7b3b      	ldrb	r3, [r7, #12]
 8003412:	79fa      	ldrb	r2, [r7, #7]
 8003414:	429a      	cmp	r2, r3
 8003416:	d304      	bcc.n	8003422 <getCountdowntime+0x3e>
 8003418:	79fb      	ldrb	r3, [r7, #7]
 800341a:	7b3a      	ldrb	r2, [r7, #12]
 800341c:	1a9b      	subs	r3, r3, r2
 800341e:	2b12      	cmp	r3, #18
 8003420:	dd01      	ble.n	8003426 <getCountdowntime+0x42>
 8003422:	2300      	movs	r3, #0
 8003424:	e036      	b.n	8003494 <getCountdowntime+0xb0>
	if ( hour == curRTC.Hour && min < curRTC.Min ) return 0;
 8003426:	7b3b      	ldrb	r3, [r7, #12]
 8003428:	79fa      	ldrb	r2, [r7, #7]
 800342a:	429a      	cmp	r2, r3
 800342c:	d105      	bne.n	800343a <getCountdowntime+0x56>
 800342e:	7b7b      	ldrb	r3, [r7, #13]
 8003430:	79ba      	ldrb	r2, [r7, #6]
 8003432:	429a      	cmp	r2, r3
 8003434:	d201      	bcs.n	800343a <getCountdowntime+0x56>
 8003436:	2300      	movs	r3, #0
 8003438:	e02c      	b.n	8003494 <getCountdowntime+0xb0>
	if ( hour == curRTC.Hour && min == curRTC.Min && sec < curRTC.Sec )	return 0;
 800343a:	7b3b      	ldrb	r3, [r7, #12]
 800343c:	79fa      	ldrb	r2, [r7, #7]
 800343e:	429a      	cmp	r2, r3
 8003440:	d109      	bne.n	8003456 <getCountdowntime+0x72>
 8003442:	7b7b      	ldrb	r3, [r7, #13]
 8003444:	79ba      	ldrb	r2, [r7, #6]
 8003446:	429a      	cmp	r2, r3
 8003448:	d105      	bne.n	8003456 <getCountdowntime+0x72>
 800344a:	7bbb      	ldrb	r3, [r7, #14]
 800344c:	797a      	ldrb	r2, [r7, #5]
 800344e:	429a      	cmp	r2, r3
 8003450:	d201      	bcs.n	8003456 <getCountdowntime+0x72>
 8003452:	2300      	movs	r3, #0
 8003454:	e01e      	b.n	8003494 <getCountdowntime+0xb0>
	return (hour- curRTC.Hour)*3600 + (min - curRTC.Min)*60 + (sec - curRTC.Sec);
 8003456:	79fb      	ldrb	r3, [r7, #7]
 8003458:	7b3a      	ldrb	r2, [r7, #12]
 800345a:	1a9b      	subs	r3, r3, r2
 800345c:	b29b      	uxth	r3, r3
 800345e:	461a      	mov	r2, r3
 8003460:	0112      	lsls	r2, r2, #4
 8003462:	1ad3      	subs	r3, r2, r3
 8003464:	461a      	mov	r2, r3
 8003466:	0112      	lsls	r2, r2, #4
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	011b      	lsls	r3, r3, #4
 800346c:	b29a      	uxth	r2, r3
 800346e:	79bb      	ldrb	r3, [r7, #6]
 8003470:	7b79      	ldrb	r1, [r7, #13]
 8003472:	1a5b      	subs	r3, r3, r1
 8003474:	b29b      	uxth	r3, r3
 8003476:	4619      	mov	r1, r3
 8003478:	0109      	lsls	r1, r1, #4
 800347a:	1acb      	subs	r3, r1, r3
 800347c:	009b      	lsls	r3, r3, #2
 800347e:	b29b      	uxth	r3, r3
 8003480:	4413      	add	r3, r2
 8003482:	b29a      	uxth	r2, r3
 8003484:	797b      	ldrb	r3, [r7, #5]
 8003486:	b299      	uxth	r1, r3
 8003488:	7bbb      	ldrb	r3, [r7, #14]
 800348a:	b29b      	uxth	r3, r3
 800348c:	1acb      	subs	r3, r1, r3
 800348e:	b29b      	uxth	r3, r3
 8003490:	4413      	add	r3, r2
 8003492:	b29b      	uxth	r3, r3
}
 8003494:	4618      	mov	r0, r3
 8003496:	3710      	adds	r7, #16
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}

0800349c <enableReceiveDMAtoIdle_Lora>:
{
	initLora(huart, hdma);
	__MY_STATION = myStation;
}
void enableReceiveDMAtoIdle_Lora(void)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	af00      	add	r7, sp, #0
	  HAL_UARTEx_ReceiveToIdle_DMA(__LORA_UART, LoraRxbuff, LORARXBUFF_MAXLEN);
 80034a0:	4b09      	ldr	r3, [pc, #36]	; (80034c8 <enableReceiveDMAtoIdle_Lora+0x2c>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	2280      	movs	r2, #128	; 0x80
 80034a6:	4909      	ldr	r1, [pc, #36]	; (80034cc <enableReceiveDMAtoIdle_Lora+0x30>)
 80034a8:	4618      	mov	r0, r3
 80034aa:	f006 fc08 	bl	8009cbe <HAL_UARTEx_ReceiveToIdle_DMA>
	  __HAL_DMA_DISABLE_IT(__LORA_DMA_UART,DMA_IT_HT);
 80034ae:	4b08      	ldr	r3, [pc, #32]	; (80034d0 <enableReceiveDMAtoIdle_Lora+0x34>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	4b06      	ldr	r3, [pc, #24]	; (80034d0 <enableReceiveDMAtoIdle_Lora+0x34>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f022 0204 	bic.w	r2, r2, #4
 80034c0:	601a      	str	r2, [r3, #0]
}
 80034c2:	bf00      	nop
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	20001958 	.word	0x20001958
 80034cc:	20001964 	.word	0x20001964
 80034d0:	2000195c 	.word	0x2000195c

080034d4 <Lora_callback>:

void Lora_callback(uint16_t Size)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b082      	sub	sp, #8
 80034d8:	af00      	add	r7, sp, #0
 80034da:	4603      	mov	r3, r0
 80034dc:	80fb      	strh	r3, [r7, #6]
	/* if the current position + new data size is less than the main buffer
	 * we will Loraply copy the data into the buffer and update the position
	 */
//	else
//	{
		memcpy ((uint8_t *)Lorabuff, (uint8_t *)LoraRxbuff, Size);
 80034de:	88fb      	ldrh	r3, [r7, #6]
 80034e0:	461a      	mov	r2, r3
 80034e2:	490e      	ldr	r1, [pc, #56]	; (800351c <Lora_callback+0x48>)
 80034e4:	480e      	ldr	r0, [pc, #56]	; (8003520 <Lora_callback+0x4c>)
 80034e6:	f007 fcb1 	bl	800ae4c <memcpy>
//	if (head + Size < LORABUFF_MAXLEN ) head = head + Size;
//	else head = head + Size - LORABUFF_MAXLEN;

//	memset(LoraRxbuff, 0, LORARXBUFF_MAXLEN);
	/* start the DMA again */
	enableReceiveDMAtoIdle_Lora();
 80034ea:	f7ff ffd7 	bl	800349c <enableReceiveDMAtoIdle_Lora>


	//Processing data
	if (isWordinBuff(Lorabuff, Size, (uint8_t*)"OK")) {
 80034ee:	88fb      	ldrh	r3, [r7, #6]
 80034f0:	4a0c      	ldr	r2, [pc, #48]	; (8003524 <Lora_callback+0x50>)
 80034f2:	4619      	mov	r1, r3
 80034f4:	480a      	ldr	r0, [pc, #40]	; (8003520 <Lora_callback+0x4c>)
 80034f6:	f000 fe35 	bl	8004164 <isWordinBuff>
 80034fa:	4603      	mov	r3, r0
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d002      	beq.n	8003506 <Lora_callback+0x32>
		isOK = 1;
 8003500:	4b09      	ldr	r3, [pc, #36]	; (8003528 <Lora_callback+0x54>)
 8003502:	2201      	movs	r2, #1
 8003504:	701a      	strb	r2, [r3, #0]
	}
	Lora_receive(Lorabuff, Size);
 8003506:	88fb      	ldrh	r3, [r7, #6]
 8003508:	b2db      	uxtb	r3, r3
 800350a:	4619      	mov	r1, r3
 800350c:	4804      	ldr	r0, [pc, #16]	; (8003520 <Lora_callback+0x4c>)
 800350e:	f000 f833 	bl	8003578 <Lora_receive>

}
 8003512:	bf00      	nop
 8003514:	3708      	adds	r7, #8
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}
 800351a:	bf00      	nop
 800351c:	20001964 	.word	0x20001964
 8003520:	200019e4 	.word	0x200019e4
 8003524:	0800dd9c 	.word	0x0800dd9c
 8003528:	20001ae4 	.word	0x20001ae4

0800352c <isIDExist>:
{
	tail = head;
}

bool isIDExist (uint8_t ID)
{
 800352c:	b480      	push	{r7}
 800352e:	b085      	sub	sp, #20
 8003530:	af00      	add	r7, sp, #0
 8003532:	4603      	mov	r3, r0
 8003534:	71fb      	strb	r3, [r7, #7]
	Node * current = __MY_STATION->ssNode_list->head->next;
 8003536:	4b0f      	ldr	r3, [pc, #60]	; (8003574 <isIDExist+0x48>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003540:	60fb      	str	r3, [r7, #12]
	while (current != __MY_STATION->ssNode_list->tail)
 8003542:	e009      	b.n	8003558 <isIDExist+0x2c>
	{
		if ( ID == current->SSnode.SSnode_ID)	return true;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	781b      	ldrb	r3, [r3, #0]
 8003548:	79fa      	ldrb	r2, [r7, #7]
 800354a:	429a      	cmp	r2, r3
 800354c:	d101      	bne.n	8003552 <isIDExist+0x26>
 800354e:	2301      	movs	r3, #1
 8003550:	e00a      	b.n	8003568 <isIDExist+0x3c>
		current = current->next;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003556:	60fb      	str	r3, [r7, #12]
	while (current != __MY_STATION->ssNode_list->tail)
 8003558:	4b06      	ldr	r3, [pc, #24]	; (8003574 <isIDExist+0x48>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	68db      	ldr	r3, [r3, #12]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	68fa      	ldr	r2, [r7, #12]
 8003562:	429a      	cmp	r2, r3
 8003564:	d1ee      	bne.n	8003544 <isIDExist+0x18>
	}
	return false;
 8003566:	2300      	movs	r3, #0
}
 8003568:	4618      	mov	r0, r3
 800356a:	3714      	adds	r7, #20
 800356c:	46bd      	mov	sp, r7
 800356e:	bc80      	pop	{r7}
 8003570:	4770      	bx	lr
 8003572:	bf00      	nop
 8003574:	20001960 	.word	0x20001960

08003578 <Lora_receive>:
void Lora_receive(uint8_t *Msg, uint8_t msglen)
{
 8003578:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800357c:	b0db      	sub	sp, #364	; 0x16c
 800357e:	af1a      	add	r7, sp, #104	; 0x68
 8003580:	6078      	str	r0, [r7, #4]
 8003582:	460b      	mov	r3, r1
 8003584:	70fb      	strb	r3, [r7, #3]
 8003586:	466b      	mov	r3, sp
 8003588:	461e      	mov	r6, r3
	if (Msg[START_POS] != START_VALUE)	return ;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	781b      	ldrb	r3, [r3, #0]
 800358e:	2b01      	cmp	r3, #1
 8003590:	f040 8165 	bne.w	800385e <Lora_receive+0x2e6>
	uint8_t id_len = Msg[ID_LENGTH_POS] - 1;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	3301      	adds	r3, #1
 8003598:	781b      	ldrb	r3, [r3, #0]
 800359a:	3b01      	subs	r3, #1
 800359c:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
	// Get sensor ID
	uint8_t tmpidbuff[id_len+1] ;
 80035a0:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 80035a4:	1c59      	adds	r1, r3, #1
 80035a6:	1e4b      	subs	r3, r1, #1
 80035a8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80035ac:	460a      	mov	r2, r1
 80035ae:	2300      	movs	r3, #0
 80035b0:	4690      	mov	r8, r2
 80035b2:	4699      	mov	r9, r3
 80035b4:	f04f 0200 	mov.w	r2, #0
 80035b8:	f04f 0300 	mov.w	r3, #0
 80035bc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80035c0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80035c4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80035c8:	460a      	mov	r2, r1
 80035ca:	2300      	movs	r3, #0
 80035cc:	4614      	mov	r4, r2
 80035ce:	461d      	mov	r5, r3
 80035d0:	f04f 0200 	mov.w	r2, #0
 80035d4:	f04f 0300 	mov.w	r3, #0
 80035d8:	00eb      	lsls	r3, r5, #3
 80035da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80035de:	00e2      	lsls	r2, r4, #3
 80035e0:	460b      	mov	r3, r1
 80035e2:	3307      	adds	r3, #7
 80035e4:	08db      	lsrs	r3, r3, #3
 80035e6:	00db      	lsls	r3, r3, #3
 80035e8:	ebad 0d03 	sub.w	sp, sp, r3
 80035ec:	ab1a      	add	r3, sp, #104	; 0x68
 80035ee:	3300      	adds	r3, #0
 80035f0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
	memset(tmpidbuff, 0, id_len+1);
 80035f4:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 80035f8:	3301      	adds	r3, #1
 80035fa:	461a      	mov	r2, r3
 80035fc:	2100      	movs	r1, #0
 80035fe:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8003602:	f007 fc31 	bl	800ae68 <memset>
	memcpy(tmpidbuff, Msg +ID_STARTPOS, id_len);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	3303      	adds	r3, #3
 800360a:	f897 20f3 	ldrb.w	r2, [r7, #243]	; 0xf3
 800360e:	4619      	mov	r1, r3
 8003610:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8003614:	f007 fc1a 	bl	800ae4c <memcpy>
	uint8_t id = atoi((char*)tmpidbuff);
 8003618:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 800361c:	f007 fab8 	bl	800ab90 <atoi>
 8003620:	4603      	mov	r3, r0
 8003622:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
	if ( !sensorID_validation(id) )	return;
 8003626:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 800362a:	4618      	mov	r0, r3
 800362c:	f001 f88e 	bl	800474c <sensorID_validation>
 8003630:	4603      	mov	r3, r0
 8003632:	f083 0301 	eor.w	r3, r3, #1
 8003636:	b2db      	uxtb	r3, r3
 8003638:	2b00      	cmp	r3, #0
 800363a:	f040 8112 	bne.w	8003862 <Lora_receive+0x2ea>

	// Get voltage type or mode
	uint8_t flag = 0;
 800363e:	2300      	movs	r3, #0
 8003640:	f887 30f9 	strb.w	r3, [r7, #249]	; 0xf9
	voltage_t vtype = 0;
 8003644:	2300      	movs	r3, #0
 8003646:	f887 30fa 	strb.w	r3, [r7, #250]	; 0xfa
	uint8_t modevalue = 0;
 800364a:	2300      	movs	r3, #0
 800364c:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
	uint16_t Vperiod = 0;
 8003650:	2300      	movs	r3, #0
 8003652:	f8a7 30fc 	strh.w	r3, [r7, #252]	; 0xfc
	uint8_t Vcalib[101];
	uint8_t mode = 0;
 8003656:	2300      	movs	r3, #0
 8003658:	f887 30ff 	strb.w	r3, [r7, #255]	; 0xff
	uint8_t tmp = Msg[ID_STARTPOS+id_len];
 800365c:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 8003660:	3303      	adds	r3, #3
 8003662:	461a      	mov	r2, r3
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	4413      	add	r3, r2
 8003668:	781b      	ldrb	r3, [r3, #0]
 800366a:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
	switch (tmp)	{
 800366e:	f897 30e6 	ldrb.w	r3, [r7, #230]	; 0xe6
 8003672:	2b08      	cmp	r3, #8
 8003674:	d009      	beq.n	800368a <Lora_receive+0x112>
 8003676:	2b08      	cmp	r3, #8
 8003678:	dc0f      	bgt.n	800369a <Lora_receive+0x122>
 800367a:	2b04      	cmp	r3, #4
 800367c:	d009      	beq.n	8003692 <Lora_receive+0x11a>
 800367e:	2b07      	cmp	r3, #7
 8003680:	d10b      	bne.n	800369a <Lora_receive+0x122>
	case 7:
		vtype = V_na;
 8003682:	2302      	movs	r3, #2
 8003684:	f887 30fa 	strb.w	r3, [r7, #250]	; 0xfa
		break;
 8003688:	e008      	b.n	800369c <Lora_receive+0x124>
	case 8:
		vtype = V_p;
 800368a:	2301      	movs	r3, #1
 800368c:	f887 30fa 	strb.w	r3, [r7, #250]	; 0xfa
		break;
 8003690:	e004      	b.n	800369c <Lora_receive+0x124>
	case 4:
		mode = 1;
 8003692:	2301      	movs	r3, #1
 8003694:	f887 30ff 	strb.w	r3, [r7, #255]	; 0xff
		break;
 8003698:	e000      	b.n	800369c <Lora_receive+0x124>
	default:
		break;
 800369a:	bf00      	nop
	}
	if (!vtype && !mode)	return;
 800369c:	f897 30fa 	ldrb.w	r3, [r7, #250]	; 0xfa
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d104      	bne.n	80036ae <Lora_receive+0x136>
 80036a4:	f897 30ff 	ldrb.w	r3, [r7, #255]	; 0xff
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	f000 80dc 	beq.w	8003866 <Lora_receive+0x2ee>
	if (mode)	{
 80036ae:	f897 30ff 	ldrb.w	r3, [r7, #255]	; 0xff
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d00b      	beq.n	80036ce <Lora_receive+0x156>
		// Get mode
		modevalue = Msg[ID_STARTPOS+id_len +2];
 80036b6:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 80036ba:	3305      	adds	r3, #5
 80036bc:	687a      	ldr	r2, [r7, #4]
 80036be:	4413      	add	r3, r2
 80036c0:	781b      	ldrb	r3, [r3, #0]
 80036c2:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
		flag = 1;
 80036c6:	2301      	movs	r3, #1
 80036c8:	f887 30f9 	strb.w	r3, [r7, #249]	; 0xf9
 80036cc:	e028      	b.n	8003720 <Lora_receive+0x1a8>
	}
	else {

		// check whether Data Period or Data Calib
		switch	(Msg[ID_STARTPOS +id_len +1]) {
 80036ce:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 80036d2:	3304      	adds	r3, #4
 80036d4:	687a      	ldr	r2, [r7, #4]
 80036d6:	4413      	add	r3, r2
 80036d8:	781b      	ldrb	r3, [r3, #0]
 80036da:	2b02      	cmp	r3, #2
 80036dc:	d002      	beq.n	80036e4 <Lora_receive+0x16c>
 80036de:	2b64      	cmp	r3, #100	; 0x64
 80036e0:	d00f      	beq.n	8003702 <Lora_receive+0x18a>
			// Get data calib value
			memcpy(Vcalib , Msg + ID_STARTPOS +id_len +2, 100);
			flag = 3;
			break;
		default:
			break;
 80036e2:	e01d      	b.n	8003720 <Lora_receive+0x1a8>
			Vperiod = buff2twobyte(Msg + ID_STARTPOS +id_len +2);
 80036e4:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 80036e8:	3305      	adds	r3, #5
 80036ea:	687a      	ldr	r2, [r7, #4]
 80036ec:	4413      	add	r3, r2
 80036ee:	4618      	mov	r0, r3
 80036f0:	f000 fdca 	bl	8004288 <buff2twobyte>
 80036f4:	4603      	mov	r3, r0
 80036f6:	f8a7 30fc 	strh.w	r3, [r7, #252]	; 0xfc
			flag = 2;
 80036fa:	2302      	movs	r3, #2
 80036fc:	f887 30f9 	strb.w	r3, [r7, #249]	; 0xf9
			break;
 8003700:	e00e      	b.n	8003720 <Lora_receive+0x1a8>
			memcpy(Vcalib , Msg + ID_STARTPOS +id_len +2, 100);
 8003702:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 8003706:	3305      	adds	r3, #5
 8003708:	687a      	ldr	r2, [r7, #4]
 800370a:	18d1      	adds	r1, r2, r3
 800370c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003710:	2264      	movs	r2, #100	; 0x64
 8003712:	4618      	mov	r0, r3
 8003714:	f007 fb9a 	bl	800ae4c <memcpy>
			flag = 3;
 8003718:	2303      	movs	r3, #3
 800371a:	f887 30f9 	strb.w	r3, [r7, #249]	; 0xf9
			break;
 800371e:	bf00      	nop
		}

	}

	// If Sensor ID is  not already saved in the Sensor node list
	if ( !isIDExist(id) )		{
 8003720:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 8003724:	4618      	mov	r0, r3
 8003726:	f7ff ff01 	bl	800352c <isIDExist>
 800372a:	4603      	mov	r3, r0
 800372c:	f083 0301 	eor.w	r3, r3, #1
 8003730:	b2db      	uxtb	r3, r3
 8003732:	2b00      	cmp	r3, #0
 8003734:	d044      	beq.n	80037c0 <Lora_receive+0x248>
		SensorNode_t newSensor = SENSORNODE_T_INIT;
 8003736:	f107 030c 	add.w	r3, r7, #12
 800373a:	2272      	movs	r2, #114	; 0x72
 800373c:	2100      	movs	r1, #0
 800373e:	4618      	mov	r0, r3
 8003740:	f007 fb92 	bl	800ae68 <memset>
 8003744:	2301      	movs	r3, #1
 8003746:	743b      	strb	r3, [r7, #16]
 8003748:	2301      	movs	r3, #1
 800374a:	753b      	strb	r3, [r7, #20]
		newSensor.SSnode_ID = id;
 800374c:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 8003750:	733b      	strb	r3, [r7, #12]
		switch (flag)	{
 8003752:	f897 30f9 	ldrb.w	r3, [r7, #249]	; 0xf9
 8003756:	2b03      	cmp	r3, #3
 8003758:	d011      	beq.n	800377e <Lora_receive+0x206>
 800375a:	2b03      	cmp	r3, #3
 800375c:	dc1e      	bgt.n	800379c <Lora_receive+0x224>
 800375e:	2b01      	cmp	r3, #1
 8003760:	d002      	beq.n	8003768 <Lora_receive+0x1f0>
 8003762:	2b02      	cmp	r3, #2
 8003764:	d004      	beq.n	8003770 <Lora_receive+0x1f8>
			newSensor.V_type = vtype;
			memcpy(newSensor.dataCalibBuffer, Vcalib, 100);
			newSensor.dataCalibAvailable = 1;
			break;
		default:
			break;
 8003766:	e019      	b.n	800379c <Lora_receive+0x224>
			newSensor.sensorMode = modevalue;
 8003768:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 800376c:	75fb      	strb	r3, [r7, #23]
			break;
 800376e:	e016      	b.n	800379e <Lora_receive+0x226>
			newSensor.V_type = vtype;
 8003770:	f897 30fa 	ldrb.w	r3, [r7, #250]	; 0xfa
 8003774:	743b      	strb	r3, [r7, #16]
			newSensor.V_value = Vperiod;
 8003776:	f8b7 30fc 	ldrh.w	r3, [r7, #252]	; 0xfc
 800377a:	827b      	strh	r3, [r7, #18]
			break;
 800377c:	e00f      	b.n	800379e <Lora_receive+0x226>
			newSensor.V_type = vtype;
 800377e:	f897 30fa 	ldrb.w	r3, [r7, #250]	; 0xfa
 8003782:	743b      	strb	r3, [r7, #16]
			memcpy(newSensor.dataCalibBuffer, Vcalib, 100);
 8003784:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8003788:	f107 030c 	add.w	r3, r7, #12
 800378c:	330c      	adds	r3, #12
 800378e:	2264      	movs	r2, #100	; 0x64
 8003790:	4618      	mov	r0, r3
 8003792:	f007 fb5b 	bl	800ae4c <memcpy>
			newSensor.dataCalibAvailable = 1;
 8003796:	2301      	movs	r3, #1
 8003798:	757b      	strb	r3, [r7, #21]
			break;
 800379a:	e000      	b.n	800379e <Lora_receive+0x226>
			break;
 800379c:	bf00      	nop
		}
		list_append(__MY_STATION->ssNode_list, newSensor);
 800379e:	4b35      	ldr	r3, [pc, #212]	; (8003874 <Lora_receive+0x2fc>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	68dc      	ldr	r4, [r3, #12]
 80037a4:	4668      	mov	r0, sp
 80037a6:	f107 0318 	add.w	r3, r7, #24
 80037aa:	2266      	movs	r2, #102	; 0x66
 80037ac:	4619      	mov	r1, r3
 80037ae:	f007 fb4d 	bl	800ae4c <memcpy>
 80037b2:	f107 030c 	add.w	r3, r7, #12
 80037b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80037b8:	4620      	mov	r0, r4
 80037ba:	f001 faa5 	bl	8004d08 <list_append>
 80037be:	e04c      	b.n	800385a <Lora_receive+0x2e2>
	}
	// If Sensor ID is already saved in the Sensor node list
	else {
		Node * current = __MY_STATION->ssNode_list->head->next;
 80037c0:	4b2c      	ldr	r3, [pc, #176]	; (8003874 <Lora_receive+0x2fc>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037ca:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
		while (current != __MY_STATION->ssNode_list->tail)	{
 80037ce:	e03c      	b.n	800384a <Lora_receive+0x2d2>
			if (current->SSnode.SSnode_ID == id) {
 80037d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037d4:	781b      	ldrb	r3, [r3, #0]
 80037d6:	f897 20e7 	ldrb.w	r2, [r7, #231]	; 0xe7
 80037da:	429a      	cmp	r2, r3
 80037dc:	d130      	bne.n	8003840 <Lora_receive+0x2c8>
				switch (flag)	{
 80037de:	f897 30f9 	ldrb.w	r3, [r7, #249]	; 0xf9
 80037e2:	2b03      	cmp	r3, #3
 80037e4:	d017      	beq.n	8003816 <Lora_receive+0x29e>
 80037e6:	2b03      	cmp	r3, #3
 80037e8:	dc28      	bgt.n	800383c <Lora_receive+0x2c4>
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d002      	beq.n	80037f4 <Lora_receive+0x27c>
 80037ee:	2b02      	cmp	r3, #2
 80037f0:	d006      	beq.n	8003800 <Lora_receive+0x288>
					current->SSnode.V_type = vtype;
					memcpy(current->SSnode.dataCalibBuffer, Vcalib, 100);
					current->SSnode.dataCalibAvailable = 1;
					break;
				default:
					break;
 80037f2:	e023      	b.n	800383c <Lora_receive+0x2c4>
					current->SSnode.sensorMode = modevalue;
 80037f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037f8:	f897 20fb 	ldrb.w	r2, [r7, #251]	; 0xfb
 80037fc:	72da      	strb	r2, [r3, #11]
					break;
 80037fe:	e01e      	b.n	800383e <Lora_receive+0x2c6>
					current->SSnode.V_type = vtype;
 8003800:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003804:	f897 20fa 	ldrb.w	r2, [r7, #250]	; 0xfa
 8003808:	711a      	strb	r2, [r3, #4]
					current->SSnode.V_value = Vperiod;
 800380a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800380e:	f8b7 20fc 	ldrh.w	r2, [r7, #252]	; 0xfc
 8003812:	80da      	strh	r2, [r3, #6]
					break;
 8003814:	e013      	b.n	800383e <Lora_receive+0x2c6>
					current->SSnode.V_type = vtype;
 8003816:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800381a:	f897 20fa 	ldrb.w	r2, [r7, #250]	; 0xfa
 800381e:	711a      	strb	r2, [r3, #4]
					memcpy(current->SSnode.dataCalibBuffer, Vcalib, 100);
 8003820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003824:	330c      	adds	r3, #12
 8003826:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800382a:	2264      	movs	r2, #100	; 0x64
 800382c:	4618      	mov	r0, r3
 800382e:	f007 fb0d 	bl	800ae4c <memcpy>
					current->SSnode.dataCalibAvailable = 1;
 8003832:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003836:	2201      	movs	r2, #1
 8003838:	725a      	strb	r2, [r3, #9]
					break;
 800383a:	e000      	b.n	800383e <Lora_receive+0x2c6>
					break;
 800383c:	bf00      	nop
				}
				return;
 800383e:	e013      	b.n	8003868 <Lora_receive+0x2f0>
			}
			current = current->next;
 8003840:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003844:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003846:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
		while (current != __MY_STATION->ssNode_list->tail)	{
 800384a:	4b0a      	ldr	r3, [pc, #40]	; (8003874 <Lora_receive+0x2fc>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8003856:	429a      	cmp	r2, r3
 8003858:	d1ba      	bne.n	80037d0 <Lora_receive+0x258>
 800385a:	46b5      	mov	sp, r6
 800385c:	e005      	b.n	800386a <Lora_receive+0x2f2>
	if (Msg[START_POS] != START_VALUE)	return ;
 800385e:	bf00      	nop
 8003860:	e002      	b.n	8003868 <Lora_receive+0x2f0>
	if ( !sensorID_validation(id) )	return;
 8003862:	bf00      	nop
 8003864:	e000      	b.n	8003868 <Lora_receive+0x2f0>
	if (!vtype && !mode)	return;
 8003866:	bf00      	nop
 8003868:	46b5      	mov	sp, r6
		}
	}
}
 800386a:	f507 7782 	add.w	r7, r7, #260	; 0x104
 800386e:	46bd      	mov	sp, r7
 8003870:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003874:	20001960 	.word	0x20001960

08003878 <init_MQTT>:

uint8_t MQTT_Txbuff [MQTT_TXBUFF_SIZE];


void init_MQTT(SIM_t *SIM)
{
 8003878:	b480      	push	{r7}
 800387a:	b083      	sub	sp, #12
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
	__MY_SIM = SIM;
 8003880:	4a03      	ldr	r2, [pc, #12]	; (8003890 <init_MQTT+0x18>)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6013      	str	r3, [r2, #0]
}
 8003886:	bf00      	nop
 8003888:	370c      	adds	r7, #12
 800388a:	46bd      	mov	sp, r7
 800388c:	bc80      	pop	{r7}
 800388e:	4770      	bx	lr
 8003890:	20001ae8 	.word	0x20001ae8

08003894 <getContent>:

}


static uint8_t getContent(content_t contentType, uint8_t *databuffer, uint16_t datalen, uint8_t *getbuffer, uint16_t contentlen)
{
 8003894:	b5b0      	push	{r4, r5, r7, lr}
 8003896:	b092      	sub	sp, #72	; 0x48
 8003898:	af02      	add	r7, sp, #8
 800389a:	60b9      	str	r1, [r7, #8]
 800389c:	607b      	str	r3, [r7, #4]
 800389e:	4603      	mov	r3, r0
 80038a0:	73fb      	strb	r3, [r7, #15]
 80038a2:	4613      	mov	r3, r2
 80038a4:	81bb      	strh	r3, [r7, #12]
	uint16_t gotcontent_len = 0;
 80038a6:	2300      	movs	r3, #0
 80038a8:	87fb      	strh	r3, [r7, #62]	; 0x3e

	uint8_t *currentPOS ;
	uint16_t databuffer_Remainlen = datalen;
 80038aa:	89bb      	ldrh	r3, [r7, #12]
 80038ac:	86fb      	strh	r3, [r7, #54]	; 0x36

	uint16_t subcontent_len;
	uint8_t subContentlen_buff[10];
	uint8_t contentsignature[20];
	if (contentType == CONTENT_PAYLOAD) {
 80038ae:	7bfb      	ldrb	r3, [r7, #15]
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	d109      	bne.n	80038c8 <getContent+0x34>
		strcpy( (char*)contentsignature, "+CMQTTRXPAYLOAD:");
 80038b4:	f107 0314 	add.w	r3, r7, #20
 80038b8:	4a36      	ldr	r2, [pc, #216]	; (8003994 <getContent+0x100>)
 80038ba:	461c      	mov	r4, r3
 80038bc:	4615      	mov	r5, r2
 80038be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80038c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80038c2:	682b      	ldr	r3, [r5, #0]
 80038c4:	7023      	strb	r3, [r4, #0]
 80038c6:	e05b      	b.n	8003980 <getContent+0xec>
 	}
	else if (contentType == CONTENT_TOPIC) {
 80038c8:	7bfb      	ldrb	r3, [r7, #15]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d10b      	bne.n	80038e6 <getContent+0x52>
		strcpy( (char*)contentsignature, "+CMQTTRXTOPIC:");
 80038ce:	f107 0314 	add.w	r3, r7, #20
 80038d2:	4a31      	ldr	r2, [pc, #196]	; (8003998 <getContent+0x104>)
 80038d4:	461c      	mov	r4, r3
 80038d6:	4613      	mov	r3, r2
 80038d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80038da:	c407      	stmia	r4!, {r0, r1, r2}
 80038dc:	8023      	strh	r3, [r4, #0]
 80038de:	3402      	adds	r4, #2
 80038e0:	0c1b      	lsrs	r3, r3, #16
 80038e2:	7023      	strb	r3, [r4, #0]
 80038e4:	e04c      	b.n	8003980 <getContent+0xec>
	}
	else return 0;
 80038e6:	2300      	movs	r3, #0
 80038e8:	e050      	b.n	800398c <getContent+0xf8>

	while ( gotcontent_len < contentlen )
	{
		currentPOS = isWordinBuff(databuffer, databuffer_Remainlen, contentsignature);
 80038ea:	f107 0214 	add.w	r2, r7, #20
 80038ee:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80038f0:	4619      	mov	r1, r3
 80038f2:	68b8      	ldr	r0, [r7, #8]
 80038f4:	f000 fc36 	bl	8004164 <isWordinBuff>
 80038f8:	63b8      	str	r0, [r7, #56]	; 0x38
		if (currentPOS == NULL)		return  0;
 80038fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d101      	bne.n	8003904 <getContent+0x70>
 8003900:	2300      	movs	r3, #0
 8003902:	e043      	b.n	800398c <getContent+0xf8>
		databuffer_Remainlen = getRemainsize( currentPOS, databuffer, databuffer_Remainlen );
 8003904:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003906:	461a      	mov	r2, r3
 8003908:	68b9      	ldr	r1, [r7, #8]
 800390a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800390c:	f000 fca9 	bl	8004262 <getRemainsize>
 8003910:	4603      	mov	r3, r0
 8003912:	86fb      	strh	r3, [r7, #54]	; 0x36

		// Get subcontent length
		getBetween( (uint8_t*)",", (uint8_t*) "\r", currentPOS, databuffer_Remainlen, subContentlen_buff);
 8003914:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8003916:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800391a:	9300      	str	r3, [sp, #0]
 800391c:	4613      	mov	r3, r2
 800391e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003920:	491e      	ldr	r1, [pc, #120]	; (800399c <getContent+0x108>)
 8003922:	481f      	ldr	r0, [pc, #124]	; (80039a0 <getContent+0x10c>)
 8003924:	f000 fc4a 	bl	80041bc <getBetween>
		subcontent_len = atoi( (char*)subContentlen_buff );
 8003928:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800392c:	4618      	mov	r0, r3
 800392e:	f007 f92f 	bl	800ab90 <atoi>
 8003932:	4603      	mov	r3, r0
 8003934:	867b      	strh	r3, [r7, #50]	; 0x32

		// Get subcontent
		while ( *currentPOS != '\n'){
 8003936:	e002      	b.n	800393e <getContent+0xaa>
			currentPOS++;
 8003938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800393a:	3301      	adds	r3, #1
 800393c:	63bb      	str	r3, [r7, #56]	; 0x38
		while ( *currentPOS != '\n'){
 800393e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003940:	781b      	ldrb	r3, [r3, #0]
 8003942:	2b0a      	cmp	r3, #10
 8003944:	d1f8      	bne.n	8003938 <getContent+0xa4>
		}
		currentPOS++;
 8003946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003948:	3301      	adds	r3, #1
 800394a:	63bb      	str	r3, [r7, #56]	; 0x38
		for (uint16_t i = 0; i< subcontent_len; i++)
 800394c:	2300      	movs	r3, #0
 800394e:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003950:	e00d      	b.n	800396e <getContent+0xda>
		{
			getbuffer[gotcontent_len++] = currentPOS[i];
 8003952:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003954:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003956:	441a      	add	r2, r3
 8003958:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800395a:	1c59      	adds	r1, r3, #1
 800395c:	87f9      	strh	r1, [r7, #62]	; 0x3e
 800395e:	4619      	mov	r1, r3
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	440b      	add	r3, r1
 8003964:	7812      	ldrb	r2, [r2, #0]
 8003966:	701a      	strb	r2, [r3, #0]
		for (uint16_t i = 0; i< subcontent_len; i++)
 8003968:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800396a:	3301      	adds	r3, #1
 800396c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800396e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003970:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8003972:	429a      	cmp	r2, r3
 8003974:	d3ed      	bcc.n	8003952 <getContent+0xbe>
		}

		// Update databuffer
		databuffer = ++currentPOS;
 8003976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003978:	3301      	adds	r3, #1
 800397a:	63bb      	str	r3, [r7, #56]	; 0x38
 800397c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800397e:	60bb      	str	r3, [r7, #8]
	while ( gotcontent_len < contentlen )
 8003980:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8003982:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003986:	429a      	cmp	r2, r3
 8003988:	d3af      	bcc.n	80038ea <getContent+0x56>
	}
	return 1;
 800398a:	2301      	movs	r3, #1
}
 800398c:	4618      	mov	r0, r3
 800398e:	3740      	adds	r7, #64	; 0x40
 8003990:	46bd      	mov	sp, r7
 8003992:	bdb0      	pop	{r4, r5, r7, pc}
 8003994:	0800ddb8 	.word	0x0800ddb8
 8003998:	0800ddcc 	.word	0x0800ddcc
 800399c:	0800dddc 	.word	0x0800dddc
 80039a0:	0800dde0 	.word	0x0800dde0

080039a4 <MQTT_receiveGetTopicandPayloadLength>:

uint8_t MQTT_receiveGetTopicandPayloadLength( uint8_t *MQTTbuff, uint16_t buffsize)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b08c      	sub	sp, #48	; 0x30
 80039a8:	af02      	add	r7, sp, #8
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	460b      	mov	r3, r1
 80039ae:	807b      	strh	r3, [r7, #2]
	uint8_t topiclen_buff[10];
	uint8_t payloadlen_buff[10];
//	Serial_log_string("MQTTbuffer: ");
//	Serial_log_buffer(MQTTbuff, buffsize);
//	Serial_log_string(" ");
	uint8_t * currentPos = isWordinBuff(MQTTbuff, buffsize, (uint8_t*)"+CMQTTRXSTART:");
 80039b0:	887b      	ldrh	r3, [r7, #2]
 80039b2:	4a23      	ldr	r2, [pc, #140]	; (8003a40 <MQTT_receiveGetTopicandPayloadLength+0x9c>)
 80039b4:	4619      	mov	r1, r3
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f000 fbd4 	bl	8004164 <isWordinBuff>
 80039bc:	6278      	str	r0, [r7, #36]	; 0x24

	uint16_t remainlen = getRemainsize(currentPos, MQTTbuff, buffsize);
 80039be:	887b      	ldrh	r3, [r7, #2]
 80039c0:	461a      	mov	r2, r3
 80039c2:	6879      	ldr	r1, [r7, #4]
 80039c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80039c6:	f000 fc4c 	bl	8004262 <getRemainsize>
 80039ca:	4603      	mov	r3, r0
 80039cc:	847b      	strh	r3, [r7, #34]	; 0x22

	getBetween( (uint8_t*)",", (uint8_t*)",", currentPos, remainlen, topiclen_buff);
 80039ce:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80039d0:	f107 0318 	add.w	r3, r7, #24
 80039d4:	9300      	str	r3, [sp, #0]
 80039d6:	4613      	mov	r3, r2
 80039d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039da:	491a      	ldr	r1, [pc, #104]	; (8003a44 <MQTT_receiveGetTopicandPayloadLength+0xa0>)
 80039dc:	4819      	ldr	r0, [pc, #100]	; (8003a44 <MQTT_receiveGetTopicandPayloadLength+0xa0>)
 80039de:	f000 fbed 	bl	80041bc <getBetween>
	__MY_SIM->mqttReceive.topicLen = atoi( (char*)topiclen_buff );
 80039e2:	f107 0318 	add.w	r3, r7, #24
 80039e6:	4618      	mov	r0, r3
 80039e8:	f007 f8d2 	bl	800ab90 <atoi>
 80039ec:	4602      	mov	r2, r0
 80039ee:	4b16      	ldr	r3, [pc, #88]	; (8003a48 <MQTT_receiveGetTopicandPayloadLength+0xa4>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	b292      	uxth	r2, r2
 80039f4:	f8a3 24ba 	strh.w	r2, [r3, #1210]	; 0x4ba

	currentPos = isWordinBuff(currentPos, remainlen,(uint8_t*)",");
 80039f8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80039fa:	4a12      	ldr	r2, [pc, #72]	; (8003a44 <MQTT_receiveGetTopicandPayloadLength+0xa0>)
 80039fc:	4619      	mov	r1, r3
 80039fe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003a00:	f000 fbb0 	bl	8004164 <isWordinBuff>
 8003a04:	6278      	str	r0, [r7, #36]	; 0x24
	currentPos ++;
 8003a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a08:	3301      	adds	r3, #1
 8003a0a:	627b      	str	r3, [r7, #36]	; 0x24

	getBetween( (uint8_t*)",", (uint8_t*)"\r", currentPos, remainlen, payloadlen_buff);
 8003a0c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8003a0e:	f107 030c 	add.w	r3, r7, #12
 8003a12:	9300      	str	r3, [sp, #0]
 8003a14:	4613      	mov	r3, r2
 8003a16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a18:	490c      	ldr	r1, [pc, #48]	; (8003a4c <MQTT_receiveGetTopicandPayloadLength+0xa8>)
 8003a1a:	480a      	ldr	r0, [pc, #40]	; (8003a44 <MQTT_receiveGetTopicandPayloadLength+0xa0>)
 8003a1c:	f000 fbce 	bl	80041bc <getBetween>
	__MY_SIM->mqttReceive.payloadLen = atoi( (char*)payloadlen_buff );
 8003a20:	f107 030c 	add.w	r3, r7, #12
 8003a24:	4618      	mov	r0, r3
 8003a26:	f007 f8b3 	bl	800ab90 <atoi>
 8003a2a:	4602      	mov	r2, r0
 8003a2c:	4b06      	ldr	r3, [pc, #24]	; (8003a48 <MQTT_receiveGetTopicandPayloadLength+0xa4>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	b292      	uxth	r2, r2
 8003a32:	f8a3 2438 	strh.w	r2, [r3, #1080]	; 0x438

	return 1;
 8003a36:	2301      	movs	r3, #1
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	3728      	adds	r7, #40	; 0x28
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}
 8003a40:	0800dde4 	.word	0x0800dde4
 8003a44:	0800dde0 	.word	0x0800dde0
 8003a48:	20001ae8 	.word	0x20001ae8
 8003a4c:	0800dddc 	.word	0x0800dddc

08003a50 <MQTT_receiveGetTopic>:

uint8_t MQTT_receiveGetTopic (uint8_t *MQTTbuff,uint16_t buffsize)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b084      	sub	sp, #16
 8003a54:	af02      	add	r7, sp, #8
 8003a56:	6078      	str	r0, [r7, #4]
 8003a58:	460b      	mov	r3, r1
 8003a5a:	807b      	strh	r3, [r7, #2]
	return getContent(CONTENT_TOPIC, MQTTbuff, buffsize, __MY_SIM->mqttReceive.topic, __MY_SIM->mqttReceive.topicLen);
 8003a5c:	4b09      	ldr	r3, [pc, #36]	; (8003a84 <MQTT_receiveGetTopic+0x34>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f203 413a 	addw	r1, r3, #1082	; 0x43a
 8003a64:	4b07      	ldr	r3, [pc, #28]	; (8003a84 <MQTT_receiveGetTopic+0x34>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f8b3 34ba 	ldrh.w	r3, [r3, #1210]	; 0x4ba
 8003a6c:	887a      	ldrh	r2, [r7, #2]
 8003a6e:	9300      	str	r3, [sp, #0]
 8003a70:	460b      	mov	r3, r1
 8003a72:	6879      	ldr	r1, [r7, #4]
 8003a74:	2000      	movs	r0, #0
 8003a76:	f7ff ff0d 	bl	8003894 <getContent>
 8003a7a:	4603      	mov	r3, r0
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3708      	adds	r7, #8
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}
 8003a84:	20001ae8 	.word	0x20001ae8

08003a88 <MQTT_receiveGetPayload>:

uint8_t MQTT_receiveGetPayload (uint8_t *MQTTbuff,uint16_t buffsize)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b084      	sub	sp, #16
 8003a8c:	af02      	add	r7, sp, #8
 8003a8e:	6078      	str	r0, [r7, #4]
 8003a90:	460b      	mov	r3, r1
 8003a92:	807b      	strh	r3, [r7, #2]
	return getContent(CONTENT_PAYLOAD, MQTTbuff, buffsize, __MY_SIM->mqttReceive.payload, __MY_SIM->mqttReceive.payloadLen);
 8003a94:	4b09      	ldr	r3, [pc, #36]	; (8003abc <MQTT_receiveGetPayload+0x34>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003a9c:	4b07      	ldr	r3, [pc, #28]	; (8003abc <MQTT_receiveGetPayload+0x34>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f8b3 3438 	ldrh.w	r3, [r3, #1080]	; 0x438
 8003aa4:	887a      	ldrh	r2, [r7, #2]
 8003aa6:	9300      	str	r3, [sp, #0]
 8003aa8:	460b      	mov	r3, r1
 8003aaa:	6879      	ldr	r1, [r7, #4]
 8003aac:	2001      	movs	r0, #1
 8003aae:	f7ff fef1 	bl	8003894 <getContent>
 8003ab2:	4603      	mov	r3, r0
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3708      	adds	r7, #8
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}
 8003abc:	20001ae8 	.word	0x20001ae8

08003ac0 <MQTT_receive>:
uint8_t MQTT_receive(uint8_t *MQTTbuff,uint16_t buffsize)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b082      	sub	sp, #8
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
 8003ac8:	460b      	mov	r3, r1
 8003aca:	807b      	strh	r3, [r7, #2]
	if ( !MQTT_receiveGetTopicandPayloadLength(MQTTbuff, buffsize) ) return 0;
 8003acc:	887b      	ldrh	r3, [r7, #2]
 8003ace:	4619      	mov	r1, r3
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	f7ff ff67 	bl	80039a4 <MQTT_receiveGetTopicandPayloadLength>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d101      	bne.n	8003ae0 <MQTT_receive+0x20>
 8003adc:	2300      	movs	r3, #0
 8003ade:	e02b      	b.n	8003b38 <MQTT_receive+0x78>

	memset( __MY_SIM->mqttReceive.payload, 0, MAX_PAYLOAD_LEN );
 8003ae0:	4b17      	ldr	r3, [pc, #92]	; (8003b40 <MQTT_receive+0x80>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	3338      	adds	r3, #56	; 0x38
 8003ae6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003aea:	2100      	movs	r1, #0
 8003aec:	4618      	mov	r0, r3
 8003aee:	f007 f9bb 	bl	800ae68 <memset>
	memset( __MY_SIM->mqttReceive.topic, 0, MAX_TOPIC_LEN );
 8003af2:	4b13      	ldr	r3, [pc, #76]	; (8003b40 <MQTT_receive+0x80>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f203 433a 	addw	r3, r3, #1082	; 0x43a
 8003afa:	2280      	movs	r2, #128	; 0x80
 8003afc:	2100      	movs	r1, #0
 8003afe:	4618      	mov	r0, r3
 8003b00:	f007 f9b2 	bl	800ae68 <memset>

	if (! MQTT_receiveGetTopic(MQTTbuff, buffsize))		return 0;
 8003b04:	887b      	ldrh	r3, [r7, #2]
 8003b06:	4619      	mov	r1, r3
 8003b08:	6878      	ldr	r0, [r7, #4]
 8003b0a:	f7ff ffa1 	bl	8003a50 <MQTT_receiveGetTopic>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d101      	bne.n	8003b18 <MQTT_receive+0x58>
 8003b14:	2300      	movs	r3, #0
 8003b16:	e00f      	b.n	8003b38 <MQTT_receive+0x78>

	if (! MQTT_receiveGetPayload(MQTTbuff, buffsize))	return 0;
 8003b18:	887b      	ldrh	r3, [r7, #2]
 8003b1a:	4619      	mov	r1, r3
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	f7ff ffb3 	bl	8003a88 <MQTT_receiveGetPayload>
 8003b22:	4603      	mov	r3, r0
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d101      	bne.n	8003b2c <MQTT_receive+0x6c>
 8003b28:	2300      	movs	r3, #0
 8003b2a:	e005      	b.n	8003b38 <MQTT_receive+0x78>

	__MY_SIM->mqttReceive.newEvent = 1;
 8003b2c:	4b04      	ldr	r3, [pc, #16]	; (8003b40 <MQTT_receive+0x80>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	2201      	movs	r2, #1
 8003b32:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	return 1;
 8003b36:	2301      	movs	r3, #1
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	3708      	adds	r7, #8
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}
 8003b40:	20001ae8 	.word	0x20001ae8

08003b44 <MQTT_connected>:

uint8_t MQTT_connected(void)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b082      	sub	sp, #8
 8003b48:	af02      	add	r7, sp, #8
	if ( SIM_sendCMD((uint8_t*)"AT+CMQTTDISC?", (uint8_t*)"+CMQTTDISC: 0,0", ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, 2000) == SIM_RES_MSG )
 8003b4a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003b4e:	9300      	str	r3, [sp, #0]
 8003b50:	2301      	movs	r3, #1
 8003b52:	2201      	movs	r2, #1
 8003b54:	490d      	ldr	r1, [pc, #52]	; (8003b8c <MQTT_connected+0x48>)
 8003b56:	480e      	ldr	r0, [pc, #56]	; (8003b90 <MQTT_connected+0x4c>)
 8003b58:	f7fe fc5c 	bl	8002414 <SIM_sendCMD>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	d108      	bne.n	8003b74 <MQTT_connected+0x30>
	{
		__MY_SIM->mqttServer.connect = 1;
 8003b62:	4b0c      	ldr	r3, [pc, #48]	; (8003b94 <MQTT_connected+0x50>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	2201      	movs	r2, #1
 8003b68:	769a      	strb	r2, [r3, #26]
		Serial_log_string("MQTT is connected to broker\r\n");
 8003b6a:	480b      	ldr	r0, [pc, #44]	; (8003b98 <MQTT_connected+0x54>)
 8003b6c:	f7fd f9b0 	bl	8000ed0 <Serial_log_string>
		return 1;
 8003b70:	2301      	movs	r3, #1
 8003b72:	e007      	b.n	8003b84 <MQTT_connected+0x40>
	}
	Serial_log_string("MQTT is disconnected to broker\r\n");
 8003b74:	4809      	ldr	r0, [pc, #36]	; (8003b9c <MQTT_connected+0x58>)
 8003b76:	f7fd f9ab 	bl	8000ed0 <Serial_log_string>
	__MY_SIM->mqttServer.connect = 0;
 8003b7a:	4b06      	ldr	r3, [pc, #24]	; (8003b94 <MQTT_connected+0x50>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	769a      	strb	r2, [r3, #26]
	return 0;
 8003b82:	2300      	movs	r3, #0
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	0800ddf4 	.word	0x0800ddf4
 8003b90:	0800de04 	.word	0x0800de04
 8003b94:	20001ae8 	.word	0x20001ae8
 8003b98:	0800de14 	.word	0x0800de14
 8003b9c:	0800de34 	.word	0x0800de34

08003ba0 <startMQTT>:
//    // Check network availability
//    // Implement your network check logic here
//    return 1; // Replace with your logic
//}
//
uint8_t startMQTT(void) {
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b084      	sub	sp, #16
 8003ba4:	af02      	add	r7, sp, #8
    // Implement starting MQTT logic
	// Return 1 on success, 0 on failure

	uint8_t check = SIM_sendCMD((uint8_t*)"AT+CMQTTSTART", (uint8_t*)"+CMQTTSTART: 0", ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, 2000);
 8003ba6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003baa:	9300      	str	r3, [sp, #0]
 8003bac:	2301      	movs	r3, #1
 8003bae:	2201      	movs	r2, #1
 8003bb0:	4916      	ldr	r1, [pc, #88]	; (8003c0c <startMQTT+0x6c>)
 8003bb2:	4817      	ldr	r0, [pc, #92]	; (8003c10 <startMQTT+0x70>)
 8003bb4:	f7fe fc2e 	bl	8002414 <SIM_sendCMD>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	71fb      	strb	r3, [r7, #7]
	if ( check == SIM_RES_MSG )	{
 8003bbc:	79fb      	ldrb	r3, [r7, #7]
 8003bbe:	2b01      	cmp	r3, #1
 8003bc0:	d104      	bne.n	8003bcc <startMQTT+0x2c>
		Serial_log_string("start MQTT success\r\n");
 8003bc2:	4814      	ldr	r0, [pc, #80]	; (8003c14 <startMQTT+0x74>)
 8003bc4:	f7fd f984 	bl	8000ed0 <Serial_log_string>
		return 1;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e01b      	b.n	8003c04 <startMQTT+0x64>
	}

	check = SIM_sendCMD((uint8_t*)"AT+CMQTTSTART", (uint8_t*)"ERROR", ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, 2000);
 8003bcc:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003bd0:	9300      	str	r3, [sp, #0]
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	4910      	ldr	r1, [pc, #64]	; (8003c18 <startMQTT+0x78>)
 8003bd8:	480d      	ldr	r0, [pc, #52]	; (8003c10 <startMQTT+0x70>)
 8003bda:	f7fe fc1b 	bl	8002414 <SIM_sendCMD>
 8003bde:	4603      	mov	r3, r0
 8003be0:	71fb      	strb	r3, [r7, #7]
	if ( check == SIM_RES_MSG )	{
 8003be2:	79fb      	ldrb	r3, [r7, #7]
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d104      	bne.n	8003bf2 <startMQTT+0x52>
		Serial_log_string("start MQTT success\r\n");
 8003be8:	480a      	ldr	r0, [pc, #40]	; (8003c14 <startMQTT+0x74>)
 8003bea:	f7fd f971 	bl	8000ed0 <Serial_log_string>
		return 1;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e008      	b.n	8003c04 <startMQTT+0x64>
	}
	Serial_log_number(check);
 8003bf2:	79fb      	ldrb	r3, [r7, #7]
 8003bf4:	b29b      	uxth	r3, r3
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f7fd f982 	bl	8000f00 <Serial_log_number>
	Serial_log_string("\r\nstart MQTT fail\r\n");
 8003bfc:	4807      	ldr	r0, [pc, #28]	; (8003c1c <startMQTT+0x7c>)
 8003bfe:	f7fd f967 	bl	8000ed0 <Serial_log_string>
	return 0;
 8003c02:	2300      	movs	r3, #0
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	3708      	adds	r7, #8
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}
 8003c0c:	0800de58 	.word	0x0800de58
 8003c10:	0800de68 	.word	0x0800de68
 8003c14:	0800de78 	.word	0x0800de78
 8003c18:	0800de90 	.word	0x0800de90
 8003c1c:	0800de98 	.word	0x0800de98

08003c20 <acquireMQTTclient>:

uint8_t acquireMQTTclient (uint8_t *clientID){
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b084      	sub	sp, #16
 8003c24:	af02      	add	r7, sp, #8
 8003c26:	6078      	str	r0, [r7, #4]
	sprintf((char*)MQTT_Txbuff,"AT+CMQTTACCQ=0,\"%s\"", clientID);
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	490e      	ldr	r1, [pc, #56]	; (8003c64 <acquireMQTTclient+0x44>)
 8003c2c:	480e      	ldr	r0, [pc, #56]	; (8003c68 <acquireMQTTclient+0x48>)
 8003c2e:	f007 fcbf 	bl	800b5b0 <siprintf>
	if (SIM_sendCMD(MQTT_Txbuff, (uint8_t*)"OK", ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, 1000)== SIM_RES_MSG)	{
 8003c32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c36:	9300      	str	r3, [sp, #0]
 8003c38:	2301      	movs	r3, #1
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	490b      	ldr	r1, [pc, #44]	; (8003c6c <acquireMQTTclient+0x4c>)
 8003c3e:	480a      	ldr	r0, [pc, #40]	; (8003c68 <acquireMQTTclient+0x48>)
 8003c40:	f7fe fbe8 	bl	8002414 <SIM_sendCMD>
 8003c44:	4603      	mov	r3, r0
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d104      	bne.n	8003c54 <acquireMQTTclient+0x34>
		Serial_log_string("acquire MQTT client success\r\n");
 8003c4a:	4809      	ldr	r0, [pc, #36]	; (8003c70 <acquireMQTTclient+0x50>)
 8003c4c:	f7fd f940 	bl	8000ed0 <Serial_log_string>
		return 1;
 8003c50:	2301      	movs	r3, #1
 8003c52:	e003      	b.n	8003c5c <acquireMQTTclient+0x3c>
	}
	Serial_log_string("acquire MQTT client fail\r\n");
 8003c54:	4807      	ldr	r0, [pc, #28]	; (8003c74 <acquireMQTTclient+0x54>)
 8003c56:	f7fd f93b 	bl	8000ed0 <Serial_log_string>
    return 0;
 8003c5a:	2300      	movs	r3, #0
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	3708      	adds	r7, #8
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}
 8003c64:	0800deac 	.word	0x0800deac
 8003c68:	20001aec 	.word	0x20001aec
 8003c6c:	0800dec0 	.word	0x0800dec0
 8003c70:	0800dec4 	.word	0x0800dec4
 8003c74:	0800dee4 	.word	0x0800dee4

08003c78 <releaseMQTTclient>:
uint8_t releaseMQTTclient (void)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b082      	sub	sp, #8
 8003c7c:	af02      	add	r7, sp, #8
	if (SIM_sendCMD((uint8_t*)"AT+CMQTTREL=0", (uint8_t*)"OK", ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, 2000)) {
 8003c7e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003c82:	9300      	str	r3, [sp, #0]
 8003c84:	2301      	movs	r3, #1
 8003c86:	2201      	movs	r2, #1
 8003c88:	4909      	ldr	r1, [pc, #36]	; (8003cb0 <releaseMQTTclient+0x38>)
 8003c8a:	480a      	ldr	r0, [pc, #40]	; (8003cb4 <releaseMQTTclient+0x3c>)
 8003c8c:	f7fe fbc2 	bl	8002414 <SIM_sendCMD>
 8003c90:	4603      	mov	r3, r0
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d004      	beq.n	8003ca0 <releaseMQTTclient+0x28>
		Serial_log_string("release MQTT client success\r\n");
 8003c96:	4808      	ldr	r0, [pc, #32]	; (8003cb8 <releaseMQTTclient+0x40>)
 8003c98:	f7fd f91a 	bl	8000ed0 <Serial_log_string>
		return 1;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	e003      	b.n	8003ca8 <releaseMQTTclient+0x30>
	}
	Serial_log_string("release MQTT client fail\r\n");
 8003ca0:	4806      	ldr	r0, [pc, #24]	; (8003cbc <releaseMQTTclient+0x44>)
 8003ca2:	f7fd f915 	bl	8000ed0 <Serial_log_string>
	return 0;
 8003ca6:	2300      	movs	r3, #0
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}
 8003cae:	bf00      	nop
 8003cb0:	0800dec0 	.word	0x0800dec0
 8003cb4:	0800df00 	.word	0x0800df00
 8003cb8:	0800df10 	.word	0x0800df10
 8003cbc:	0800df30 	.word	0x0800df30

08003cc0 <configureMQTT>:
uint8_t configureMQTT() {
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b084      	sub	sp, #16
 8003cc4:	af02      	add	r7, sp, #8
    // Implement MQTT configuration logic
    // Return 1 on success, 0 on failure
	uint8_t wtplen = strlen(__MY_SIM->mqttServer.willtopic);
 8003cc6:	4b3f      	ldr	r3, [pc, #252]	; (8003dc4 <configureMQTT+0x104>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	691b      	ldr	r3, [r3, #16]
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f7fc fa3d 	bl	800014c <strlen>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	71fb      	strb	r3, [r7, #7]
	sprintf((char*)MQTT_Txbuff,"AT+CMQTTWILLTOPIC=0,%d",wtplen);
 8003cd6:	79fb      	ldrb	r3, [r7, #7]
 8003cd8:	461a      	mov	r2, r3
 8003cda:	493b      	ldr	r1, [pc, #236]	; (8003dc8 <configureMQTT+0x108>)
 8003cdc:	483b      	ldr	r0, [pc, #236]	; (8003dcc <configureMQTT+0x10c>)
 8003cde:	f007 fc67 	bl	800b5b0 <siprintf>
	if (SIM_sendCMD(MQTT_Txbuff, (uint8_t*)'>', ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, 2000) != SIM_RES_MSG)	return 0;
 8003ce2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003ce6:	9300      	str	r3, [sp, #0]
 8003ce8:	2301      	movs	r3, #1
 8003cea:	2201      	movs	r2, #1
 8003cec:	213e      	movs	r1, #62	; 0x3e
 8003cee:	4837      	ldr	r0, [pc, #220]	; (8003dcc <configureMQTT+0x10c>)
 8003cf0:	f7fe fb90 	bl	8002414 <SIM_sendCMD>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	2b01      	cmp	r3, #1
 8003cf8:	d001      	beq.n	8003cfe <configureMQTT+0x3e>
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	e05d      	b.n	8003dba <configureMQTT+0xfa>

	sprintf((char*)MQTT_Txbuff,"%s",__MY_SIM->mqttServer.willtopic);
 8003cfe:	4b31      	ldr	r3, [pc, #196]	; (8003dc4 <configureMQTT+0x104>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	691b      	ldr	r3, [r3, #16]
 8003d04:	461a      	mov	r2, r3
 8003d06:	4932      	ldr	r1, [pc, #200]	; (8003dd0 <configureMQTT+0x110>)
 8003d08:	4830      	ldr	r0, [pc, #192]	; (8003dcc <configureMQTT+0x10c>)
 8003d0a:	f007 fc51 	bl	800b5b0 <siprintf>
	if (SIM_sendCMD(MQTT_Txbuff, (uint8_t*)"OK", ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, 1000) != SIM_RES_MSG)	return 0;
 8003d0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003d12:	9300      	str	r3, [sp, #0]
 8003d14:	2301      	movs	r3, #1
 8003d16:	2201      	movs	r2, #1
 8003d18:	492e      	ldr	r1, [pc, #184]	; (8003dd4 <configureMQTT+0x114>)
 8003d1a:	482c      	ldr	r0, [pc, #176]	; (8003dcc <configureMQTT+0x10c>)
 8003d1c:	f7fe fb7a 	bl	8002414 <SIM_sendCMD>
 8003d20:	4603      	mov	r3, r0
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d001      	beq.n	8003d2a <configureMQTT+0x6a>
 8003d26:	2300      	movs	r3, #0
 8003d28:	e047      	b.n	8003dba <configureMQTT+0xfa>

	uint8_t wmsglen = strlen((char*)__MY_SIM->mqttServer.willmsg);
 8003d2a:	4b26      	ldr	r3, [pc, #152]	; (8003dc4 <configureMQTT+0x104>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	695b      	ldr	r3, [r3, #20]
 8003d30:	4618      	mov	r0, r3
 8003d32:	f7fc fa0b 	bl	800014c <strlen>
 8003d36:	4603      	mov	r3, r0
 8003d38:	71bb      	strb	r3, [r7, #6]
	sprintf((char*)MQTT_Txbuff,"AT+CMQTTWILLMSG=0,%d,1",wmsglen);
 8003d3a:	79bb      	ldrb	r3, [r7, #6]
 8003d3c:	461a      	mov	r2, r3
 8003d3e:	4926      	ldr	r1, [pc, #152]	; (8003dd8 <configureMQTT+0x118>)
 8003d40:	4822      	ldr	r0, [pc, #136]	; (8003dcc <configureMQTT+0x10c>)
 8003d42:	f007 fc35 	bl	800b5b0 <siprintf>
	if (SIM_sendCMD(MQTT_Txbuff, (uint8_t*)'>', ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, 2000)!= SIM_RES_MSG)	return 0;
 8003d46:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003d4a:	9300      	str	r3, [sp, #0]
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	2201      	movs	r2, #1
 8003d50:	213e      	movs	r1, #62	; 0x3e
 8003d52:	481e      	ldr	r0, [pc, #120]	; (8003dcc <configureMQTT+0x10c>)
 8003d54:	f7fe fb5e 	bl	8002414 <SIM_sendCMD>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	d001      	beq.n	8003d62 <configureMQTT+0xa2>
 8003d5e:	2300      	movs	r3, #0
 8003d60:	e02b      	b.n	8003dba <configureMQTT+0xfa>

	sprintf((char*)MQTT_Txbuff,"%s",__MY_SIM->mqttServer.willmsg);
 8003d62:	4b18      	ldr	r3, [pc, #96]	; (8003dc4 <configureMQTT+0x104>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	695b      	ldr	r3, [r3, #20]
 8003d68:	461a      	mov	r2, r3
 8003d6a:	4919      	ldr	r1, [pc, #100]	; (8003dd0 <configureMQTT+0x110>)
 8003d6c:	4817      	ldr	r0, [pc, #92]	; (8003dcc <configureMQTT+0x10c>)
 8003d6e:	f007 fc1f 	bl	800b5b0 <siprintf>
	if (SIM_sendCMD(MQTT_Txbuff, (uint8_t*)"OK", ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, 2000)!= SIM_RES_MSG)	return 0;
 8003d72:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003d76:	9300      	str	r3, [sp, #0]
 8003d78:	2301      	movs	r3, #1
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	4915      	ldr	r1, [pc, #84]	; (8003dd4 <configureMQTT+0x114>)
 8003d7e:	4813      	ldr	r0, [pc, #76]	; (8003dcc <configureMQTT+0x10c>)
 8003d80:	f7fe fb48 	bl	8002414 <SIM_sendCMD>
 8003d84:	4603      	mov	r3, r0
 8003d86:	2b01      	cmp	r3, #1
 8003d88:	d001      	beq.n	8003d8e <configureMQTT+0xce>
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	e015      	b.n	8003dba <configureMQTT+0xfa>

	sprintf((char*)MQTT_Txbuff,"AT+CMQTTCFG=\"checkUTF8\",0,0");
 8003d8e:	4913      	ldr	r1, [pc, #76]	; (8003ddc <configureMQTT+0x11c>)
 8003d90:	480e      	ldr	r0, [pc, #56]	; (8003dcc <configureMQTT+0x10c>)
 8003d92:	f007 fc0d 	bl	800b5b0 <siprintf>
	if (! SIM_sendCMD(MQTT_Txbuff, (uint8_t*)"OK", ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, 1000))	return 0;
 8003d96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003d9a:	9300      	str	r3, [sp, #0]
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	2201      	movs	r2, #1
 8003da0:	490c      	ldr	r1, [pc, #48]	; (8003dd4 <configureMQTT+0x114>)
 8003da2:	480a      	ldr	r0, [pc, #40]	; (8003dcc <configureMQTT+0x10c>)
 8003da4:	f7fe fb36 	bl	8002414 <SIM_sendCMD>
 8003da8:	4603      	mov	r3, r0
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d101      	bne.n	8003db2 <configureMQTT+0xf2>
 8003dae:	2300      	movs	r3, #0
 8003db0:	e003      	b.n	8003dba <configureMQTT+0xfa>

	Serial_log_string("config MQTT success\r\n");
 8003db2:	480b      	ldr	r0, [pc, #44]	; (8003de0 <configureMQTT+0x120>)
 8003db4:	f7fd f88c 	bl	8000ed0 <Serial_log_string>
    return 1;
 8003db8:	2301      	movs	r3, #1
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3708      	adds	r7, #8
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}
 8003dc2:	bf00      	nop
 8003dc4:	20001ae8 	.word	0x20001ae8
 8003dc8:	0800df4c 	.word	0x0800df4c
 8003dcc:	20001aec 	.word	0x20001aec
 8003dd0:	0800df64 	.word	0x0800df64
 8003dd4:	0800dec0 	.word	0x0800dec0
 8003dd8:	0800df68 	.word	0x0800df68
 8003ddc:	0800df80 	.word	0x0800df80
 8003de0:	0800df9c 	.word	0x0800df9c

08003de4 <sendConnectMessage>:

uint8_t sendConnectMessage() {
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b082      	sub	sp, #8
 8003de8:	af02      	add	r7, sp, #8
    // Implement sending the CONNECT message
    // Return 1 on success, 0 on failure
	sprintf((char*)MQTT_Txbuff,"AT+CMQTTCONNECT=0,\"%s:%d\",%d,1",__MY_SIM->mqttServer.host,__MY_SIM->mqttServer.port,__MY_SIM->mqttClient.keepAliveInterval);
 8003dea:	4b14      	ldr	r3, [pc, #80]	; (8003e3c <sendConnectMessage+0x58>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	68da      	ldr	r2, [r3, #12]
 8003df0:	4b12      	ldr	r3, [pc, #72]	; (8003e3c <sendConnectMessage+0x58>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	8b1b      	ldrh	r3, [r3, #24]
 8003df6:	4619      	mov	r1, r3
 8003df8:	4b10      	ldr	r3, [pc, #64]	; (8003e3c <sendConnectMessage+0x58>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dfe:	9300      	str	r3, [sp, #0]
 8003e00:	460b      	mov	r3, r1
 8003e02:	490f      	ldr	r1, [pc, #60]	; (8003e40 <sendConnectMessage+0x5c>)
 8003e04:	480f      	ldr	r0, [pc, #60]	; (8003e44 <sendConnectMessage+0x60>)
 8003e06:	f007 fbd3 	bl	800b5b0 <siprintf>
	if (SIM_sendCMD(MQTT_Txbuff, (uint8_t*)"+CMQTTCONNECT: 0,0", ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, 2000) == SIM_RES_MSG)
 8003e0a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003e0e:	9300      	str	r3, [sp, #0]
 8003e10:	2301      	movs	r3, #1
 8003e12:	2201      	movs	r2, #1
 8003e14:	490c      	ldr	r1, [pc, #48]	; (8003e48 <sendConnectMessage+0x64>)
 8003e16:	480b      	ldr	r0, [pc, #44]	; (8003e44 <sendConnectMessage+0x60>)
 8003e18:	f7fe fafc 	bl	8002414 <SIM_sendCMD>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d104      	bne.n	8003e2c <sendConnectMessage+0x48>
	{
		Serial_log_string("Connect to broker success\r\n");
 8003e22:	480a      	ldr	r0, [pc, #40]	; (8003e4c <sendConnectMessage+0x68>)
 8003e24:	f7fd f854 	bl	8000ed0 <Serial_log_string>
		return 1;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e003      	b.n	8003e34 <sendConnectMessage+0x50>
	}
	Serial_log_string("Connect to broker fail\r\n");
 8003e2c:	4808      	ldr	r0, [pc, #32]	; (8003e50 <sendConnectMessage+0x6c>)
 8003e2e:	f7fd f84f 	bl	8000ed0 <Serial_log_string>
    return 0;
 8003e32:	2300      	movs	r3, #0
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}
 8003e3a:	bf00      	nop
 8003e3c:	20001ae8 	.word	0x20001ae8
 8003e40:	0800dfb4 	.word	0x0800dfb4
 8003e44:	20001aec 	.word	0x20001aec
 8003e48:	0800dfd4 	.word	0x0800dfd4
 8003e4c:	0800dfe8 	.word	0x0800dfe8
 8003e50:	0800e004 	.word	0x0800e004

08003e54 <MQTT_checkNWavailable>:


uint8_t MQTT_checkNWavailable (void)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b082      	sub	sp, #8
 8003e58:	af02      	add	r7, sp, #8
	if ( !SIM_checkCMD(SIM_CMD_SIMCARD_PIN) ) {
 8003e5a:	2000      	movs	r0, #0
 8003e5c:	f7fe fb2e 	bl	80024bc <SIM_checkCMD>
 8003e60:	4603      	mov	r3, r0
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d120      	bne.n	8003ea8 <MQTT_checkNWavailable+0x54>
		static uint32_t tick = 0;
		if (HAL_GetTick() - tick > 20000) {
 8003e66:	f002 fd47 	bl	80068f8 <HAL_GetTick>
 8003e6a:	4602      	mov	r2, r0
 8003e6c:	4b1c      	ldr	r3, [pc, #112]	; (8003ee0 <MQTT_checkNWavailable+0x8c>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	1ad3      	subs	r3, r2, r3
 8003e72:	f644 6220 	movw	r2, #20000	; 0x4e20
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d914      	bls.n	8003ea4 <MQTT_checkNWavailable+0x50>
			tick = HAL_GetTick();
 8003e7a:	f002 fd3d 	bl	80068f8 <HAL_GetTick>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	4a17      	ldr	r2, [pc, #92]	; (8003ee0 <MQTT_checkNWavailable+0x8c>)
 8003e82:	6013      	str	r3, [r2, #0]
			SIM_sendCMD( (uint8_t*)"AT+CRESET", (uint8_t*)"OK", ENABLE_SIM_CHECKRES,
 8003e84:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003e88:	9300      	str	r3, [sp, #0]
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	4915      	ldr	r1, [pc, #84]	; (8003ee4 <MQTT_checkNWavailable+0x90>)
 8003e90:	4815      	ldr	r0, [pc, #84]	; (8003ee8 <MQTT_checkNWavailable+0x94>)
 8003e92:	f7fe fabf 	bl	8002414 <SIM_sendCMD>
						ENABLE_MARKASREAD, SIM_TIMEOUT_LONG);
			Serial_log_string("Reset Module\r\n");
 8003e96:	4815      	ldr	r0, [pc, #84]	; (8003eec <MQTT_checkNWavailable+0x98>)
 8003e98:	f7fd f81a 	bl	8000ed0 <Serial_log_string>
			HAL_Delay(5000);
 8003e9c:	f241 3088 	movw	r0, #5000	; 0x1388
 8003ea0:	f002 fd34 	bl	800690c <HAL_Delay>
		}
		return 1;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	e018      	b.n	8003eda <MQTT_checkNWavailable+0x86>
	}

	if ( !SIM_checkCMD(SIM_CMD_STA_CSQ) ) {
 8003ea8:	2001      	movs	r0, #1
 8003eaa:	f7fe fb07 	bl	80024bc <SIM_checkCMD>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d101      	bne.n	8003eb8 <MQTT_checkNWavailable+0x64>
		return 2;
 8003eb4:	2302      	movs	r3, #2
 8003eb6:	e010      	b.n	8003eda <MQTT_checkNWavailable+0x86>
	}

	if ( !SIM_checkCMD(SIM_CMD_NW_CREG) ) {
 8003eb8:	2002      	movs	r0, #2
 8003eba:	f7fe faff 	bl	80024bc <SIM_checkCMD>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d101      	bne.n	8003ec8 <MQTT_checkNWavailable+0x74>
		return 3;
 8003ec4:	2303      	movs	r3, #3
 8003ec6:	e008      	b.n	8003eda <MQTT_checkNWavailable+0x86>
	}

	if ( !SIM_checkCMD(SIM_CMD_NW_CPSI) ) {
 8003ec8:	2003      	movs	r0, #3
 8003eca:	f7fe faf7 	bl	80024bc <SIM_checkCMD>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d101      	bne.n	8003ed8 <MQTT_checkNWavailable+0x84>
		return 4;
 8003ed4:	2304      	movs	r3, #4
 8003ed6:	e000      	b.n	8003eda <MQTT_checkNWavailable+0x86>
	}
	return 0;
 8003ed8:	2300      	movs	r3, #0
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}
 8003ee0:	20001eec 	.word	0x20001eec
 8003ee4:	0800dec0 	.word	0x0800dec0
 8003ee8:	0800e020 	.word	0x0800e020
 8003eec:	0800e02c 	.word	0x0800e02c

08003ef0 <MQTT_connect>:
uint8_t MQTT_connect()
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	af00      	add	r7, sp, #0

	if ( MQTT_checkNWavailable() )  return 0;
 8003ef4:	f7ff ffae 	bl	8003e54 <MQTT_checkNWavailable>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d001      	beq.n	8003f02 <MQTT_connect+0x12>
 8003efe:	2300      	movs	r3, #0
 8003f00:	e032      	b.n	8003f68 <MQTT_connect+0x78>

	if ( !startMQTT() )		return 0;
 8003f02:	f7ff fe4d 	bl	8003ba0 <startMQTT>
 8003f06:	4603      	mov	r3, r0
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d101      	bne.n	8003f10 <MQTT_connect+0x20>
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	e02b      	b.n	8003f68 <MQTT_connect+0x78>

	if ( !acquireMQTTclient( (uint8_t*)__MY_SIM->mqttClient.clientID) )
 8003f10:	4b16      	ldr	r3, [pc, #88]	; (8003f6c <MQTT_connect+0x7c>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f16:	4618      	mov	r0, r3
 8003f18:	f7ff fe82 	bl	8003c20 <acquireMQTTclient>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d10b      	bne.n	8003f3a <MQTT_connect+0x4a>
	{
		if (MQTT_connected())
 8003f22:	f7ff fe0f 	bl	8003b44 <MQTT_connected>
 8003f26:	4603      	mov	r3, r0
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d002      	beq.n	8003f32 <MQTT_connect+0x42>
		{
			MQTT_disconnect();
 8003f2c:	f000 f820 	bl	8003f70 <MQTT_disconnect>
 8003f30:	e001      	b.n	8003f36 <MQTT_connect+0x46>
		}
		else
		{
			releaseMQTTclient();
 8003f32:	f7ff fea1 	bl	8003c78 <releaseMQTTclient>
		}
		return 0;
 8003f36:	2300      	movs	r3, #0
 8003f38:	e016      	b.n	8003f68 <MQTT_connect+0x78>
	}
	if ( !(configureMQTT()) )		return 0;
 8003f3a:	f7ff fec1 	bl	8003cc0 <configureMQTT>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d101      	bne.n	8003f48 <MQTT_connect+0x58>
 8003f44:	2300      	movs	r3, #0
 8003f46:	e00f      	b.n	8003f68 <MQTT_connect+0x78>

	if ( !sendConnectMessage() )	{
 8003f48:	f7ff ff4c 	bl	8003de4 <sendConnectMessage>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d105      	bne.n	8003f5e <MQTT_connect+0x6e>
		HAL_Delay(500);
 8003f52:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003f56:	f002 fcd9 	bl	800690c <HAL_Delay>
		return 0;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	e004      	b.n	8003f68 <MQTT_connect+0x78>
	}

	__MY_SIM->mqttServer.connect = 1;
 8003f5e:	4b03      	ldr	r3, [pc, #12]	; (8003f6c <MQTT_connect+0x7c>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	2201      	movs	r2, #1
 8003f64:	769a      	strb	r2, [r3, #26]
	return 1;
 8003f66:	2301      	movs	r3, #1

}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	bd80      	pop	{r7, pc}
 8003f6c:	20001ae8 	.word	0x20001ae8

08003f70 <MQTT_disconnect>:

uint8_t MQTT_disconnect ()
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b082      	sub	sp, #8
 8003f74:	af02      	add	r7, sp, #8
	if (SIM_sendCMD((uint8_t*)"AT+CMQTTDISC=0,120", (uint8_t*)"+CMQTTDISC: 0,0",
 8003f76:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003f7a:	9300      	str	r3, [sp, #0]
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	2201      	movs	r2, #1
 8003f80:	4912      	ldr	r1, [pc, #72]	; (8003fcc <MQTT_disconnect+0x5c>)
 8003f82:	4813      	ldr	r0, [pc, #76]	; (8003fd0 <MQTT_disconnect+0x60>)
 8003f84:	f7fe fa46 	bl	8002414 <SIM_sendCMD>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	2b01      	cmp	r3, #1
 8003f8c:	d001      	beq.n	8003f92 <MQTT_disconnect+0x22>
			ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, 2000) != SIM_RES_MSG )		return 0;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	e019      	b.n	8003fc6 <MQTT_disconnect+0x56>

	if ( !releaseMQTTclient() )		return 0;
 8003f92:	f7ff fe71 	bl	8003c78 <releaseMQTTclient>
 8003f96:	4603      	mov	r3, r0
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d101      	bne.n	8003fa0 <MQTT_disconnect+0x30>
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	e012      	b.n	8003fc6 <MQTT_disconnect+0x56>

	if (SIM_sendCMD((uint8_t*)"AT+CMQTTSTOP", (uint8_t*)"+CMQTTSTOP: 0",
 8003fa0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003fa4:	9300      	str	r3, [sp, #0]
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	2201      	movs	r2, #1
 8003faa:	490a      	ldr	r1, [pc, #40]	; (8003fd4 <MQTT_disconnect+0x64>)
 8003fac:	480a      	ldr	r0, [pc, #40]	; (8003fd8 <MQTT_disconnect+0x68>)
 8003fae:	f7fe fa31 	bl	8002414 <SIM_sendCMD>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d001      	beq.n	8003fbc <MQTT_disconnect+0x4c>
			ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, 2000) != SIM_RES_MSG )		return 0;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	e004      	b.n	8003fc6 <MQTT_disconnect+0x56>

	__MY_SIM->mqttServer.connect = 0;
 8003fbc:	4b07      	ldr	r3, [pc, #28]	; (8003fdc <MQTT_disconnect+0x6c>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	769a      	strb	r2, [r3, #26]
	return 1;
 8003fc4:	2301      	movs	r3, #1
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}
 8003fcc:	0800ddf4 	.word	0x0800ddf4
 8003fd0:	0800e03c 	.word	0x0800e03c
 8003fd4:	0800e050 	.word	0x0800e050
 8003fd8:	0800e060 	.word	0x0800e060
 8003fdc:	20001ae8 	.word	0x20001ae8

08003fe0 <MQTT_publish>:
uint8_t MQTT_publish(uint8_t *topic, uint8_t *msg, uint16_t msglen)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b088      	sub	sp, #32
 8003fe4:	af02      	add	r7, sp, #8
 8003fe6:	60f8      	str	r0, [r7, #12]
 8003fe8:	60b9      	str	r1, [r7, #8]
 8003fea:	4613      	mov	r3, r2
 8003fec:	80fb      	strh	r3, [r7, #6]
	uint8_t check =0;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	75fb      	strb	r3, [r7, #23]
	uint8_t topiclen= (uint8_t) strlen((char*)topic);
 8003ff2:	68f8      	ldr	r0, [r7, #12]
 8003ff4:	f7fc f8aa 	bl	800014c <strlen>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	75bb      	strb	r3, [r7, #22]
	sprintf((char*)MQTT_Txbuff,"AT+CMQTTTOPIC=0,%d", topiclen);
 8003ffc:	7dbb      	ldrb	r3, [r7, #22]
 8003ffe:	461a      	mov	r2, r3
 8004000:	492d      	ldr	r1, [pc, #180]	; (80040b8 <MQTT_publish+0xd8>)
 8004002:	482e      	ldr	r0, [pc, #184]	; (80040bc <MQTT_publish+0xdc>)
 8004004:	f007 fad4 	bl	800b5b0 <siprintf>

	if (SIM_sendCMD(MQTT_Txbuff, (uint8_t*)'>', ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, 2000)!= SIM_RES_MSG)	return 0;
 8004008:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800400c:	9300      	str	r3, [sp, #0]
 800400e:	2301      	movs	r3, #1
 8004010:	2201      	movs	r2, #1
 8004012:	213e      	movs	r1, #62	; 0x3e
 8004014:	4829      	ldr	r0, [pc, #164]	; (80040bc <MQTT_publish+0xdc>)
 8004016:	f7fe f9fd 	bl	8002414 <SIM_sendCMD>
 800401a:	4603      	mov	r3, r0
 800401c:	2b01      	cmp	r3, #1
 800401e:	d001      	beq.n	8004024 <MQTT_publish+0x44>
 8004020:	2300      	movs	r3, #0
 8004022:	e045      	b.n	80040b0 <MQTT_publish+0xd0>

	if (SIM_sendCMD(topic, (uint8_t*)"OK", ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, 2000)!= SIM_RES_MSG)		return 0;
 8004024:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8004028:	9300      	str	r3, [sp, #0]
 800402a:	2301      	movs	r3, #1
 800402c:	2201      	movs	r2, #1
 800402e:	4924      	ldr	r1, [pc, #144]	; (80040c0 <MQTT_publish+0xe0>)
 8004030:	68f8      	ldr	r0, [r7, #12]
 8004032:	f7fe f9ef 	bl	8002414 <SIM_sendCMD>
 8004036:	4603      	mov	r3, r0
 8004038:	2b01      	cmp	r3, #1
 800403a:	d001      	beq.n	8004040 <MQTT_publish+0x60>
 800403c:	2300      	movs	r3, #0
 800403e:	e037      	b.n	80040b0 <MQTT_publish+0xd0>

	sprintf((char*)MQTT_Txbuff,"AT+CMQTTPAYLOAD=0,%d",msglen);
 8004040:	88fb      	ldrh	r3, [r7, #6]
 8004042:	461a      	mov	r2, r3
 8004044:	491f      	ldr	r1, [pc, #124]	; (80040c4 <MQTT_publish+0xe4>)
 8004046:	481d      	ldr	r0, [pc, #116]	; (80040bc <MQTT_publish+0xdc>)
 8004048:	f007 fab2 	bl	800b5b0 <siprintf>

	if (SIM_sendCMD(MQTT_Txbuff, (uint8_t*)'>', ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, 2000)!= SIM_RES_MSG)	return 0;
 800404c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8004050:	9300      	str	r3, [sp, #0]
 8004052:	2301      	movs	r3, #1
 8004054:	2201      	movs	r2, #1
 8004056:	213e      	movs	r1, #62	; 0x3e
 8004058:	4818      	ldr	r0, [pc, #96]	; (80040bc <MQTT_publish+0xdc>)
 800405a:	f7fe f9db 	bl	8002414 <SIM_sendCMD>
 800405e:	4603      	mov	r3, r0
 8004060:	2b01      	cmp	r3, #1
 8004062:	d001      	beq.n	8004068 <MQTT_publish+0x88>
 8004064:	2300      	movs	r3, #0
 8004066:	e023      	b.n	80040b0 <MQTT_publish+0xd0>

	HAL_UART_Transmit(&huart1, msg, msglen, 0xFFFF);
 8004068:	88fa      	ldrh	r2, [r7, #6]
 800406a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800406e:	68b9      	ldr	r1, [r7, #8]
 8004070:	4815      	ldr	r0, [pc, #84]	; (80040c8 <MQTT_publish+0xe8>)
 8004072:	f005 fda1 	bl	8009bb8 <HAL_UART_Transmit>
	check = SIM_checkMsg((uint8_t*)"OK", 2000);
 8004076:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800407a:	4811      	ldr	r0, [pc, #68]	; (80040c0 <MQTT_publish+0xe0>)
 800407c:	f7fe f910 	bl	80022a0 <SIM_checkMsg>
 8004080:	4603      	mov	r3, r0
 8004082:	75fb      	strb	r3, [r7, #23]
	MarkAsReadData_SIM();
 8004084:	f7fe fa0c 	bl	80024a0 <MarkAsReadData_SIM>
	if (check != SIM_RES_MSG)	return 0;
 8004088:	7dfb      	ldrb	r3, [r7, #23]
 800408a:	2b01      	cmp	r3, #1
 800408c:	d001      	beq.n	8004092 <MQTT_publish+0xb2>
 800408e:	2300      	movs	r3, #0
 8004090:	e00e      	b.n	80040b0 <MQTT_publish+0xd0>

	if (SIM_sendCMD((uint8_t*)"AT+CMQTTPUB=0,1,60", (uint8_t*)"+CMQTTPUB: 0,0",
 8004092:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8004096:	9300      	str	r3, [sp, #0]
 8004098:	2301      	movs	r3, #1
 800409a:	2201      	movs	r2, #1
 800409c:	490b      	ldr	r1, [pc, #44]	; (80040cc <MQTT_publish+0xec>)
 800409e:	480c      	ldr	r0, [pc, #48]	; (80040d0 <MQTT_publish+0xf0>)
 80040a0:	f7fe f9b8 	bl	8002414 <SIM_sendCMD>
 80040a4:	4603      	mov	r3, r0
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d001      	beq.n	80040ae <MQTT_publish+0xce>
			ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, 2000)!= SIM_RES_MSG)	return 0;
 80040aa:	2300      	movs	r3, #0
 80040ac:	e000      	b.n	80040b0 <MQTT_publish+0xd0>

	return 1;
 80040ae:	2301      	movs	r3, #1
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	3718      	adds	r7, #24
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}
 80040b8:	0800e070 	.word	0x0800e070
 80040bc:	20001aec 	.word	0x20001aec
 80040c0:	0800dec0 	.word	0x0800dec0
 80040c4:	0800e084 	.word	0x0800e084
 80040c8:	200035a4 	.word	0x200035a4
 80040cc:	0800e09c 	.word	0x0800e09c
 80040d0:	0800e0ac 	.word	0x0800e0ac

080040d4 <MQTT_subcribe>:
uint8_t MQTT_subcribe (uint8_t *topic)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b086      	sub	sp, #24
 80040d8:	af02      	add	r7, sp, #8
 80040da:	6078      	str	r0, [r7, #4]
	uint8_t topiclen = strlen ((char*)topic);
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	f7fc f835 	bl	800014c <strlen>
 80040e2:	4603      	mov	r3, r0
 80040e4:	73fb      	strb	r3, [r7, #15]

	sprintf((char*)MQTT_Txbuff,"AT+CMQTTSUBTOPIC=0,%d,1",topiclen);
 80040e6:	7bfb      	ldrb	r3, [r7, #15]
 80040e8:	461a      	mov	r2, r3
 80040ea:	4919      	ldr	r1, [pc, #100]	; (8004150 <MQTT_subcribe+0x7c>)
 80040ec:	4819      	ldr	r0, [pc, #100]	; (8004154 <MQTT_subcribe+0x80>)
 80040ee:	f007 fa5f 	bl	800b5b0 <siprintf>
	if (SIM_sendCMD(MQTT_Txbuff, (uint8_t*)'>', ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, 2000)!= SIM_RES_MSG)	return 0;
 80040f2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80040f6:	9300      	str	r3, [sp, #0]
 80040f8:	2301      	movs	r3, #1
 80040fa:	2201      	movs	r2, #1
 80040fc:	213e      	movs	r1, #62	; 0x3e
 80040fe:	4815      	ldr	r0, [pc, #84]	; (8004154 <MQTT_subcribe+0x80>)
 8004100:	f7fe f988 	bl	8002414 <SIM_sendCMD>
 8004104:	4603      	mov	r3, r0
 8004106:	2b01      	cmp	r3, #1
 8004108:	d001      	beq.n	800410e <MQTT_subcribe+0x3a>
 800410a:	2300      	movs	r3, #0
 800410c:	e01c      	b.n	8004148 <MQTT_subcribe+0x74>

	if (SIM_sendCMD(topic, (uint8_t*)"OK", ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, 2000)!= SIM_RES_MSG)		return 0;
 800410e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8004112:	9300      	str	r3, [sp, #0]
 8004114:	2301      	movs	r3, #1
 8004116:	2201      	movs	r2, #1
 8004118:	490f      	ldr	r1, [pc, #60]	; (8004158 <MQTT_subcribe+0x84>)
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	f7fe f97a 	bl	8002414 <SIM_sendCMD>
 8004120:	4603      	mov	r3, r0
 8004122:	2b01      	cmp	r3, #1
 8004124:	d001      	beq.n	800412a <MQTT_subcribe+0x56>
 8004126:	2300      	movs	r3, #0
 8004128:	e00e      	b.n	8004148 <MQTT_subcribe+0x74>

	if (SIM_sendCMD((uint8_t*)"AT+CMQTTSUB=0", (uint8_t*)"+CMQTTSUB: 0,0", ENABLE_SIM_CHECKRES,ENABLE_MARKASREAD, 2000)!= SIM_RES_MSG) 	return 0;
 800412a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800412e:	9300      	str	r3, [sp, #0]
 8004130:	2301      	movs	r3, #1
 8004132:	2201      	movs	r2, #1
 8004134:	4909      	ldr	r1, [pc, #36]	; (800415c <MQTT_subcribe+0x88>)
 8004136:	480a      	ldr	r0, [pc, #40]	; (8004160 <MQTT_subcribe+0x8c>)
 8004138:	f7fe f96c 	bl	8002414 <SIM_sendCMD>
 800413c:	4603      	mov	r3, r0
 800413e:	2b01      	cmp	r3, #1
 8004140:	d001      	beq.n	8004146 <MQTT_subcribe+0x72>
 8004142:	2300      	movs	r3, #0
 8004144:	e000      	b.n	8004148 <MQTT_subcribe+0x74>

	return 1;
 8004146:	2301      	movs	r3, #1
}
 8004148:	4618      	mov	r0, r3
 800414a:	3710      	adds	r7, #16
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}
 8004150:	0800e0c0 	.word	0x0800e0c0
 8004154:	20001aec 	.word	0x20001aec
 8004158:	0800dec0 	.word	0x0800dec0
 800415c:	0800e0d8 	.word	0x0800e0d8
 8004160:	0800e0e8 	.word	0x0800e0e8

08004164 <isWordinBuff>:
#include "String_process.h"
#include <string.h>


uint8_t* isWordinBuff(uint8_t *databuff,uint16_t buff_size, uint8_t *word)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b086      	sub	sp, #24
 8004168:	af00      	add	r7, sp, #0
 800416a:	60f8      	str	r0, [r7, #12]
 800416c:	460b      	mov	r3, r1
 800416e:	607a      	str	r2, [r7, #4]
 8004170:	817b      	strh	r3, [r7, #10]
	uint8_t wordlen = strlen((char*)word);
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f7fb ffea 	bl	800014c <strlen>
 8004178:	4603      	mov	r3, r0
 800417a:	757b      	strb	r3, [r7, #21]
	for (uint16_t i = 0; i< buff_size - wordlen + 1; i++)
 800417c:	2300      	movs	r3, #0
 800417e:	82fb      	strh	r3, [r7, #22]
 8004180:	e011      	b.n	80041a6 <isWordinBuff+0x42>
	{
		if (!memcmp(databuff +i,word,wordlen))
 8004182:	8afb      	ldrh	r3, [r7, #22]
 8004184:	68fa      	ldr	r2, [r7, #12]
 8004186:	4413      	add	r3, r2
 8004188:	7d7a      	ldrb	r2, [r7, #21]
 800418a:	6879      	ldr	r1, [r7, #4]
 800418c:	4618      	mov	r0, r3
 800418e:	f006 fe4d 	bl	800ae2c <memcmp>
 8004192:	4603      	mov	r3, r0
 8004194:	2b00      	cmp	r3, #0
 8004196:	d103      	bne.n	80041a0 <isWordinBuff+0x3c>
		{
			return databuff+ i;
 8004198:	8afb      	ldrh	r3, [r7, #22]
 800419a:	68fa      	ldr	r2, [r7, #12]
 800419c:	4413      	add	r3, r2
 800419e:	e009      	b.n	80041b4 <isWordinBuff+0x50>
	for (uint16_t i = 0; i< buff_size - wordlen + 1; i++)
 80041a0:	8afb      	ldrh	r3, [r7, #22]
 80041a2:	3301      	adds	r3, #1
 80041a4:	82fb      	strh	r3, [r7, #22]
 80041a6:	897a      	ldrh	r2, [r7, #10]
 80041a8:	7d7b      	ldrb	r3, [r7, #21]
 80041aa:	1ad2      	subs	r2, r2, r3
 80041ac:	8afb      	ldrh	r3, [r7, #22]
 80041ae:	429a      	cmp	r2, r3
 80041b0:	dae7      	bge.n	8004182 <isWordinBuff+0x1e>
		}
	}
	return NULL;
 80041b2:	2300      	movs	r3, #0
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	3718      	adds	r7, #24
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}

080041bc <getBetween>:

uint16_t getBetween(uint8_t *firstWord,uint8_t *lastWord, uint8_t *buff, uint16_t size, uint8_t *getBuff)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b088      	sub	sp, #32
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	60f8      	str	r0, [r7, #12]
 80041c4:	60b9      	str	r1, [r7, #8]
 80041c6:	607a      	str	r2, [r7, #4]
 80041c8:	807b      	strh	r3, [r7, #2]
	uint8_t fWlen = strlen((char*)firstWord);
 80041ca:	68f8      	ldr	r0, [r7, #12]
 80041cc:	f7fb ffbe 	bl	800014c <strlen>
 80041d0:	4603      	mov	r3, r0
 80041d2:	76bb      	strb	r3, [r7, #26]

	uint8_t *Fp =isWordinBuff(buff, size, firstWord);
 80041d4:	887b      	ldrh	r3, [r7, #2]
 80041d6:	68fa      	ldr	r2, [r7, #12]
 80041d8:	4619      	mov	r1, r3
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f7ff ffc2 	bl	8004164 <isWordinBuff>
 80041e0:	61f8      	str	r0, [r7, #28]

	if (Fp == NULL ) return 0;
 80041e2:	69fb      	ldr	r3, [r7, #28]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d101      	bne.n	80041ec <getBetween+0x30>
 80041e8:	2300      	movs	r3, #0
 80041ea:	e036      	b.n	800425a <getBetween+0x9e>
	Fp += fWlen;
 80041ec:	7ebb      	ldrb	r3, [r7, #26]
 80041ee:	69fa      	ldr	r2, [r7, #28]
 80041f0:	4413      	add	r3, r2
 80041f2:	61fb      	str	r3, [r7, #28]
	uint8_t remainSize = getRemainsize(Fp, buff, size);
 80041f4:	887b      	ldrh	r3, [r7, #2]
 80041f6:	461a      	mov	r2, r3
 80041f8:	6879      	ldr	r1, [r7, #4]
 80041fa:	69f8      	ldr	r0, [r7, #28]
 80041fc:	f000 f831 	bl	8004262 <getRemainsize>
 8004200:	4603      	mov	r3, r0
 8004202:	767b      	strb	r3, [r7, #25]
	uint8_t *Lp = isWordinBuff(Fp, remainSize, lastWord);
 8004204:	7e7b      	ldrb	r3, [r7, #25]
 8004206:	b29b      	uxth	r3, r3
 8004208:	68ba      	ldr	r2, [r7, #8]
 800420a:	4619      	mov	r1, r3
 800420c:	69f8      	ldr	r0, [r7, #28]
 800420e:	f7ff ffa9 	bl	8004164 <isWordinBuff>
 8004212:	6178      	str	r0, [r7, #20]
	if (Lp == NULL || Fp >= Lp) return 0;
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d003      	beq.n	8004222 <getBetween+0x66>
 800421a:	69fa      	ldr	r2, [r7, #28]
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	429a      	cmp	r2, r3
 8004220:	d301      	bcc.n	8004226 <getBetween+0x6a>
 8004222:	2300      	movs	r3, #0
 8004224:	e019      	b.n	800425a <getBetween+0x9e>

	uint8_t getBuffindex =0;
 8004226:	2300      	movs	r3, #0
 8004228:	76fb      	strb	r3, [r7, #27]
	while (Fp != Lp)
 800422a:	e00b      	b.n	8004244 <getBetween+0x88>
	{
		getBuff[getBuffindex++] = *Fp;
 800422c:	7efb      	ldrb	r3, [r7, #27]
 800422e:	1c5a      	adds	r2, r3, #1
 8004230:	76fa      	strb	r2, [r7, #27]
 8004232:	461a      	mov	r2, r3
 8004234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004236:	4413      	add	r3, r2
 8004238:	69fa      	ldr	r2, [r7, #28]
 800423a:	7812      	ldrb	r2, [r2, #0]
 800423c:	701a      	strb	r2, [r3, #0]
		Fp ++;
 800423e:	69fb      	ldr	r3, [r7, #28]
 8004240:	3301      	adds	r3, #1
 8004242:	61fb      	str	r3, [r7, #28]
	while (Fp != Lp)
 8004244:	69fa      	ldr	r2, [r7, #28]
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	429a      	cmp	r2, r3
 800424a:	d1ef      	bne.n	800422c <getBetween+0x70>
	}
	getBuff[getBuffindex]= '\0';
 800424c:	7efb      	ldrb	r3, [r7, #27]
 800424e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004250:	4413      	add	r3, r2
 8004252:	2200      	movs	r2, #0
 8004254:	701a      	strb	r2, [r3, #0]
	return getBuffindex;           // length of getBuff
 8004256:	7efb      	ldrb	r3, [r7, #27]
 8004258:	b29b      	uxth	r3, r3
}
 800425a:	4618      	mov	r0, r3
 800425c:	3720      	adds	r7, #32
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}

08004262 <getRemainsize>:

uint16_t getRemainsize(uint8_t *Remainbuff, uint8_t *Originbuff, uint16_t originSize)
{
 8004262:	b480      	push	{r7}
 8004264:	b085      	sub	sp, #20
 8004266:	af00      	add	r7, sp, #0
 8004268:	60f8      	str	r0, [r7, #12]
 800426a:	60b9      	str	r1, [r7, #8]
 800426c:	4613      	mov	r3, r2
 800426e:	80fb      	strh	r3, [r7, #6]
	return originSize-(Remainbuff - Originbuff)/sizeof(uint8_t);
 8004270:	68fa      	ldr	r2, [r7, #12]
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	1ad3      	subs	r3, r2, r3
 8004276:	b29b      	uxth	r3, r3
 8004278:	88fa      	ldrh	r2, [r7, #6]
 800427a:	1ad3      	subs	r3, r2, r3
 800427c:	b29b      	uxth	r3, r3
}
 800427e:	4618      	mov	r0, r3
 8004280:	3714      	adds	r7, #20
 8004282:	46bd      	mov	sp, r7
 8004284:	bc80      	pop	{r7}
 8004286:	4770      	bx	lr

08004288 <buff2twobyte>:
{
	buffer[0] = ( number >> 8 ) & 0xFF;
	buffer[1] = number & 0xFF;
}
uint16_t buff2twobyte (uint8_t *buff)
{
 8004288:	b480      	push	{r7}
 800428a:	b085      	sub	sp, #20
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
	uint16_t value = 0;
 8004290:	2300      	movs	r3, #0
 8004292:	81fb      	strh	r3, [r7, #14]
	value = buff[0] << 8 | buff[1];
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	781b      	ldrb	r3, [r3, #0]
 8004298:	021b      	lsls	r3, r3, #8
 800429a:	b21a      	sxth	r2, r3
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	3301      	adds	r3, #1
 80042a0:	781b      	ldrb	r3, [r3, #0]
 80042a2:	b21b      	sxth	r3, r3
 80042a4:	4313      	orrs	r3, r2
 80042a6:	b21b      	sxth	r3, r3
 80042a8:	81fb      	strh	r3, [r7, #14]
	return value;
 80042aa:	89fb      	ldrh	r3, [r7, #14]
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3714      	adds	r7, #20
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bc80      	pop	{r7}
 80042b4:	4770      	bx	lr

080042b6 <FourbytenumbertoBuff>:

void FourbytenumbertoBuff(uint32_t inputNumber, uint8_t *Buff)
{
 80042b6:	b480      	push	{r7}
 80042b8:	b085      	sub	sp, #20
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	6078      	str	r0, [r7, #4]
 80042be:	6039      	str	r1, [r7, #0]
    uint32_t tmp =inputNumber;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	60fb      	str	r3, [r7, #12]
	for (uint8_t i=0 ;i< 4;i++)
 80042c4:	2300      	movs	r3, #0
 80042c6:	72fb      	strb	r3, [r7, #11]
 80042c8:	e00e      	b.n	80042e8 <FourbytenumbertoBuff+0x32>
	{
		Buff[3-i] = tmp & (0xFF);
 80042ca:	7afb      	ldrb	r3, [r7, #11]
 80042cc:	f1c3 0303 	rsb	r3, r3, #3
 80042d0:	461a      	mov	r2, r3
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	4413      	add	r3, r2
 80042d6:	68fa      	ldr	r2, [r7, #12]
 80042d8:	b2d2      	uxtb	r2, r2
 80042da:	701a      	strb	r2, [r3, #0]
 		tmp = tmp >>8;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	0a1b      	lsrs	r3, r3, #8
 80042e0:	60fb      	str	r3, [r7, #12]
	for (uint8_t i=0 ;i< 4;i++)
 80042e2:	7afb      	ldrb	r3, [r7, #11]
 80042e4:	3301      	adds	r3, #1
 80042e6:	72fb      	strb	r3, [r7, #11]
 80042e8:	7afb      	ldrb	r3, [r7, #11]
 80042ea:	2b03      	cmp	r3, #3
 80042ec:	d9ed      	bls.n	80042ca <FourbytenumbertoBuff+0x14>
	}
}
 80042ee:	bf00      	nop
 80042f0:	bf00      	nop
 80042f2:	3714      	adds	r7, #20
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bc80      	pop	{r7}
 80042f8:	4770      	bx	lr

080042fa <buff2Fourbyte>:

uint32_t buff2Fourbyte(uint8_t *buff)
{
 80042fa:	b480      	push	{r7}
 80042fc:	b085      	sub	sp, #20
 80042fe:	af00      	add	r7, sp, #0
 8004300:	6078      	str	r0, [r7, #4]
	uint32_t value = 0;
 8004302:	2300      	movs	r3, #0
 8004304:	60fb      	str	r3, [r7, #12]
	value = buff[0] << 24 | buff[1] << 16 | buff[2] << 8 | buff[3];
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	781b      	ldrb	r3, [r3, #0]
 800430a:	061a      	lsls	r2, r3, #24
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	3301      	adds	r3, #1
 8004310:	781b      	ldrb	r3, [r3, #0]
 8004312:	041b      	lsls	r3, r3, #16
 8004314:	431a      	orrs	r2, r3
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	3302      	adds	r3, #2
 800431a:	781b      	ldrb	r3, [r3, #0]
 800431c:	021b      	lsls	r3, r3, #8
 800431e:	4313      	orrs	r3, r2
 8004320:	687a      	ldr	r2, [r7, #4]
 8004322:	3203      	adds	r2, #3
 8004324:	7812      	ldrb	r2, [r2, #0]
 8004326:	4313      	orrs	r3, r2
 8004328:	60fb      	str	r3, [r7, #12]
	return value;
 800432a:	68fb      	ldr	r3, [r7, #12]
}
 800432c:	4618      	mov	r0, r3
 800432e:	3714      	adds	r7, #20
 8004330:	46bd      	mov	sp, r7
 8004332:	bc80      	pop	{r7}
 8004334:	4770      	bx	lr
	...

08004338 <initTask>:


static Station_t *__MY_STATION;

void initTask(Station_t *station)
{
 8004338:	b480      	push	{r7}
 800433a:	b083      	sub	sp, #12
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
	__MY_STATION = station;
 8004340:	4a03      	ldr	r2, [pc, #12]	; (8004350 <initTask+0x18>)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6013      	str	r3, [r2, #0]
}
 8004346:	bf00      	nop
 8004348:	370c      	adds	r7, #12
 800434a:	46bd      	mov	sp, r7
 800434c:	bc80      	pop	{r7}
 800434e:	4770      	bx	lr
 8004350:	20001ef0 	.word	0x20001ef0

08004354 <checkTaskflag>:

bool checkTaskflag (Task_t task)
{
 8004354:	b480      	push	{r7}
 8004356:	b085      	sub	sp, #20
 8004358:	af00      	add	r7, sp, #0
 800435a:	4603      	mov	r3, r0
 800435c:	71fb      	strb	r3, [r7, #7]
	bool res = false;
 800435e:	2300      	movs	r3, #0
 8004360:	73fb      	strb	r3, [r7, #15]
	switch (task) {
 8004362:	79fb      	ldrb	r3, [r7, #7]
 8004364:	2b10      	cmp	r3, #16
 8004366:	f200 80f1 	bhi.w	800454c <checkTaskflag+0x1f8>
 800436a:	a201      	add	r2, pc, #4	; (adr r2, 8004370 <checkTaskflag+0x1c>)
 800436c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004370:	080043b5 	.word	0x080043b5
 8004374:	080043cd 	.word	0x080043cd
 8004378:	08004415 	.word	0x08004415
 800437c:	0800442d 	.word	0x0800442d
 8004380:	080043e5 	.word	0x080043e5
 8004384:	080043fd 	.word	0x080043fd
 8004388:	08004445 	.word	0x08004445
 800438c:	0800445d 	.word	0x0800445d
 8004390:	0800448d 	.word	0x0800448d
 8004394:	08004475 	.word	0x08004475
 8004398:	080044a5 	.word	0x080044a5
 800439c:	080044bd 	.word	0x080044bd
 80043a0:	080044d5 	.word	0x080044d5
 80043a4:	080044ed 	.word	0x080044ed
 80043a8:	08004505 	.word	0x08004505
 80043ac:	0800451d 	.word	0x0800451d
 80043b0:	08004535 	.word	0x08004535
	case TASK_REGISTER:
		res = (bool)__MY_STATION->task.register2server ;
 80043b4:	4b69      	ldr	r3, [pc, #420]	; (800455c <checkTaskflag+0x208>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	7c1b      	ldrb	r3, [r3, #16]
 80043ba:	f003 0301 	and.w	r3, r3, #1
 80043be:	b2db      	uxtb	r3, r3
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	bf14      	ite	ne
 80043c4:	2301      	movne	r3, #1
 80043c6:	2300      	moveq	r3, #0
 80043c8:	73fb      	strb	r3, [r7, #15]
		break;
 80043ca:	e0c0      	b.n	800454e <checkTaskflag+0x1fa>
	case TASK_SUBSCRIBE:
		res = (bool)__MY_STATION->task.subscribe;
 80043cc:	4b63      	ldr	r3, [pc, #396]	; (800455c <checkTaskflag+0x208>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	7c1b      	ldrb	r3, [r3, #16]
 80043d2:	f003 0302 	and.w	r3, r3, #2
 80043d6:	b2db      	uxtb	r3, r3
 80043d8:	2b00      	cmp	r3, #0
 80043da:	bf14      	ite	ne
 80043dc:	2301      	movne	r3, #1
 80043de:	2300      	moveq	r3, #0
 80043e0:	73fb      	strb	r3, [r7, #15]
		break;
 80043e2:	e0b4      	b.n	800454e <checkTaskflag+0x1fa>
	case TASK_CTRL_MBA:
		res = (bool)__MY_STATION->task.CtrlMBA;
 80043e4:	4b5d      	ldr	r3, [pc, #372]	; (800455c <checkTaskflag+0x208>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	7c1b      	ldrb	r3, [r3, #16]
 80043ea:	f003 0310 	and.w	r3, r3, #16
 80043ee:	b2db      	uxtb	r3, r3
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	bf14      	ite	ne
 80043f4:	2301      	movne	r3, #1
 80043f6:	2300      	moveq	r3, #0
 80043f8:	73fb      	strb	r3, [r7, #15]
		break;
 80043fa:	e0a8      	b.n	800454e <checkTaskflag+0x1fa>
	case TASK_CTRL_STEPMOR:
		res = (bool)__MY_STATION->task.CtrlStepmotor;
 80043fc:	4b57      	ldr	r3, [pc, #348]	; (800455c <checkTaskflag+0x208>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	7c1b      	ldrb	r3, [r3, #16]
 8004402:	f003 0320 	and.w	r3, r3, #32
 8004406:	b2db      	uxtb	r3, r3
 8004408:	2b00      	cmp	r3, #0
 800440a:	bf14      	ite	ne
 800440c:	2301      	movne	r3, #1
 800440e:	2300      	moveq	r3, #0
 8004410:	73fb      	strb	r3, [r7, #15]
		break;
 8004412:	e09c      	b.n	800454e <checkTaskflag+0x1fa>
	case TASK_PREPARE_CALIB:
		res = (bool)__MY_STATION->task.PrepareCalib;
 8004414:	4b51      	ldr	r3, [pc, #324]	; (800455c <checkTaskflag+0x208>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	7c1b      	ldrb	r3, [r3, #16]
 800441a:	f003 0304 	and.w	r3, r3, #4
 800441e:	b2db      	uxtb	r3, r3
 8004420:	2b00      	cmp	r3, #0
 8004422:	bf14      	ite	ne
 8004424:	2301      	movne	r3, #1
 8004426:	2300      	moveq	r3, #0
 8004428:	73fb      	strb	r3, [r7, #15]
		break;
 800442a:	e090      	b.n	800454e <checkTaskflag+0x1fa>
	case TASK_START_CALIB:
		res = (bool)__MY_STATION->task.StartCalib;
 800442c:	4b4b      	ldr	r3, [pc, #300]	; (800455c <checkTaskflag+0x208>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	7c1b      	ldrb	r3, [r3, #16]
 8004432:	f003 0308 	and.w	r3, r3, #8
 8004436:	b2db      	uxtb	r3, r3
 8004438:	2b00      	cmp	r3, #0
 800443a:	bf14      	ite	ne
 800443c:	2301      	movne	r3, #1
 800443e:	2300      	moveq	r3, #0
 8004440:	73fb      	strb	r3, [r7, #15]
		break;
 8004442:	e084      	b.n	800454e <checkTaskflag+0x1fa>
	case TASK_GET_GPS_TIME:
		res = (bool)__MY_STATION->task.getGPStimeflag;
 8004444:	4b45      	ldr	r3, [pc, #276]	; (800455c <checkTaskflag+0x208>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	7c1b      	ldrb	r3, [r3, #16]
 800444a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800444e:	b2db      	uxtb	r3, r3
 8004450:	2b00      	cmp	r3, #0
 8004452:	bf14      	ite	ne
 8004454:	2301      	movne	r3, #1
 8004456:	2300      	moveq	r3, #0
 8004458:	73fb      	strb	r3, [r7, #15]
		break;
 800445a:	e078      	b.n	800454e <checkTaskflag+0x1fa>
	case TASK_SEND_NWREADY:
		res = (bool)__MY_STATION->task.sendNWready;
 800445c:	4b3f      	ldr	r3, [pc, #252]	; (800455c <checkTaskflag+0x208>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	7c5b      	ldrb	r3, [r3, #17]
 8004462:	f003 0301 	and.w	r3, r3, #1
 8004466:	b2db      	uxtb	r3, r3
 8004468:	2b00      	cmp	r3, #0
 800446a:	bf14      	ite	ne
 800446c:	2301      	movne	r3, #1
 800446e:	2300      	moveq	r3, #0
 8004470:	73fb      	strb	r3, [r7, #15]
		break;
 8004472:	e06c      	b.n	800454e <checkTaskflag+0x1fa>
	case TASK_SEND_DATACALIB:
		res = (bool)__MY_STATION->task.sendDATACALIB;
 8004474:	4b39      	ldr	r3, [pc, #228]	; (800455c <checkTaskflag+0x208>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	7c5b      	ldrb	r3, [r3, #17]
 800447a:	f003 0302 	and.w	r3, r3, #2
 800447e:	b2db      	uxtb	r3, r3
 8004480:	2b00      	cmp	r3, #0
 8004482:	bf14      	ite	ne
 8004484:	2301      	movne	r3, #1
 8004486:	2300      	moveq	r3, #0
 8004488:	73fb      	strb	r3, [r7, #15]
		break;
 800448a:	e060      	b.n	800454e <checkTaskflag+0x1fa>
	case TASK_SEND_DATAPERIOD:
		res = (bool)__MY_STATION->task.sendDataPeriod;
 800448c:	4b33      	ldr	r3, [pc, #204]	; (800455c <checkTaskflag+0x208>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	7c1b      	ldrb	r3, [r3, #16]
 8004492:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004496:	b2db      	uxtb	r3, r3
 8004498:	2b00      	cmp	r3, #0
 800449a:	bf14      	ite	ne
 800449c:	2301      	movne	r3, #1
 800449e:	2300      	moveq	r3, #0
 80044a0:	73fb      	strb	r3, [r7, #15]
		break;
 80044a2:	e054      	b.n	800454e <checkTaskflag+0x1fa>
	case TASK_SEND_DATAAFTERCALIB:
		res = (bool)__MY_STATION->task.sendDATAafterCALIB;
 80044a4:	4b2d      	ldr	r3, [pc, #180]	; (800455c <checkTaskflag+0x208>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	7c5b      	ldrb	r3, [r3, #17]
 80044aa:	f003 0304 	and.w	r3, r3, #4
 80044ae:	b2db      	uxtb	r3, r3
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	bf14      	ite	ne
 80044b4:	2301      	movne	r3, #1
 80044b6:	2300      	moveq	r3, #0
 80044b8:	73fb      	strb	r3, [r7, #15]
		break;
 80044ba:	e048      	b.n	800454e <checkTaskflag+0x1fa>
	case TASK_SEND_CTRLMBA:
		res = (bool)__MY_STATION->task.sendcmdCtrlMBA;
 80044bc:	4b27      	ldr	r3, [pc, #156]	; (800455c <checkTaskflag+0x208>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	7c5b      	ldrb	r3, [r3, #17]
 80044c2:	f003 0308 	and.w	r3, r3, #8
 80044c6:	b2db      	uxtb	r3, r3
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	bf14      	ite	ne
 80044cc:	2301      	movne	r3, #1
 80044ce:	2300      	moveq	r3, #0
 80044d0:	73fb      	strb	r3, [r7, #15]
		break;
 80044d2:	e03c      	b.n	800454e <checkTaskflag+0x1fa>
	case TASK_SEND_CTRLSTEPMOR:
		res = (bool)__MY_STATION->task.sendcmdCtrlStepmotor;
 80044d4:	4b21      	ldr	r3, [pc, #132]	; (800455c <checkTaskflag+0x208>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	7c5b      	ldrb	r3, [r3, #17]
 80044da:	f003 0310 	and.w	r3, r3, #16
 80044de:	b2db      	uxtb	r3, r3
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	bf14      	ite	ne
 80044e4:	2301      	movne	r3, #1
 80044e6:	2300      	moveq	r3, #0
 80044e8:	73fb      	strb	r3, [r7, #15]
		break;
 80044ea:	e030      	b.n	800454e <checkTaskflag+0x1fa>
	case TASK_SEND_CALIB:
		res = (bool)__MY_STATION->task.sendcmdCalib;
 80044ec:	4b1b      	ldr	r3, [pc, #108]	; (800455c <checkTaskflag+0x208>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	7c5b      	ldrb	r3, [r3, #17]
 80044f2:	f003 0320 	and.w	r3, r3, #32
 80044f6:	b2db      	uxtb	r3, r3
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	bf14      	ite	ne
 80044fc:	2301      	movne	r3, #1
 80044fe:	2300      	moveq	r3, #0
 8004500:	73fb      	strb	r3, [r7, #15]
		break;
 8004502:	e024      	b.n	800454e <checkTaskflag+0x1fa>
	case TASK_SEND_GETSTATUS:
		res = (bool)__MY_STATION->task.sendcmdGetstatus;
 8004504:	4b15      	ldr	r3, [pc, #84]	; (800455c <checkTaskflag+0x208>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	7c5b      	ldrb	r3, [r3, #17]
 800450a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800450e:	b2db      	uxtb	r3, r3
 8004510:	2b00      	cmp	r3, #0
 8004512:	bf14      	ite	ne
 8004514:	2301      	movne	r3, #1
 8004516:	2300      	moveq	r3, #0
 8004518:	73fb      	strb	r3, [r7, #15]
		break;
 800451a:	e018      	b.n	800454e <checkTaskflag+0x1fa>
	case TASK_SEND_GETSTATION:
		res = (bool)__MY_STATION->task.sendcmdGetstation;
 800451c:	4b0f      	ldr	r3, [pc, #60]	; (800455c <checkTaskflag+0x208>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	7c5b      	ldrb	r3, [r3, #17]
 8004522:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004526:	b2db      	uxtb	r3, r3
 8004528:	2b00      	cmp	r3, #0
 800452a:	bf14      	ite	ne
 800452c:	2301      	movne	r3, #1
 800452e:	2300      	moveq	r3, #0
 8004530:	73fb      	strb	r3, [r7, #15]
		break;
 8004532:	e00c      	b.n	800454e <checkTaskflag+0x1fa>
	case TASK_SEND_GETSENSOR:
		res = (bool)__MY_STATION->task.sendcmdGetsensor;
 8004534:	4b09      	ldr	r3, [pc, #36]	; (800455c <checkTaskflag+0x208>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	7c9b      	ldrb	r3, [r3, #18]
 800453a:	f003 0301 	and.w	r3, r3, #1
 800453e:	b2db      	uxtb	r3, r3
 8004540:	2b00      	cmp	r3, #0
 8004542:	bf14      	ite	ne
 8004544:	2301      	movne	r3, #1
 8004546:	2300      	moveq	r3, #0
 8004548:	73fb      	strb	r3, [r7, #15]
		break;
 800454a:	e000      	b.n	800454e <checkTaskflag+0x1fa>
	default:
		break;
 800454c:	bf00      	nop
	}
	return res;
 800454e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004550:	4618      	mov	r0, r3
 8004552:	3714      	adds	r7, #20
 8004554:	46bd      	mov	sp, r7
 8004556:	bc80      	pop	{r7}
 8004558:	4770      	bx	lr
 800455a:	bf00      	nop
 800455c:	20001ef0 	.word	0x20001ef0

08004560 <triggerTaskflag>:



void triggerTaskflag (Task_t task, Flag_t ENorDIS)
{
 8004560:	b480      	push	{r7}
 8004562:	b083      	sub	sp, #12
 8004564:	af00      	add	r7, sp, #0
 8004566:	4603      	mov	r3, r0
 8004568:	460a      	mov	r2, r1
 800456a:	71fb      	strb	r3, [r7, #7]
 800456c:	4613      	mov	r3, r2
 800456e:	71bb      	strb	r3, [r7, #6]
	switch (task) {
 8004570:	79fb      	ldrb	r3, [r7, #7]
 8004572:	2b10      	cmp	r3, #16
 8004574:	f200 80e1 	bhi.w	800473a <triggerTaskflag+0x1da>
 8004578:	a201      	add	r2, pc, #4	; (adr r2, 8004580 <triggerTaskflag+0x20>)
 800457a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800457e:	bf00      	nop
 8004580:	080045c5 	.word	0x080045c5
 8004584:	080045db 	.word	0x080045db
 8004588:	0800461d 	.word	0x0800461d
 800458c:	08004633 	.word	0x08004633
 8004590:	080045f1 	.word	0x080045f1
 8004594:	08004607 	.word	0x08004607
 8004598:	08004649 	.word	0x08004649
 800459c:	0800465f 	.word	0x0800465f
 80045a0:	0800468b 	.word	0x0800468b
 80045a4:	08004675 	.word	0x08004675
 80045a8:	080046a1 	.word	0x080046a1
 80045ac:	080046b7 	.word	0x080046b7
 80045b0:	080046cd 	.word	0x080046cd
 80045b4:	080046e3 	.word	0x080046e3
 80045b8:	080046f9 	.word	0x080046f9
 80045bc:	0800470f 	.word	0x0800470f
 80045c0:	08004725 	.word	0x08004725
	case TASK_REGISTER:
		__MY_STATION->task.register2server = ENorDIS;
 80045c4:	4b60      	ldr	r3, [pc, #384]	; (8004748 <triggerTaskflag+0x1e8>)
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	79bb      	ldrb	r3, [r7, #6]
 80045ca:	f003 0301 	and.w	r3, r3, #1
 80045ce:	b2d9      	uxtb	r1, r3
 80045d0:	7c13      	ldrb	r3, [r2, #16]
 80045d2:	f361 0300 	bfi	r3, r1, #0, #1
 80045d6:	7413      	strb	r3, [r2, #16]
		break;
 80045d8:	e0b0      	b.n	800473c <triggerTaskflag+0x1dc>
	case TASK_SUBSCRIBE:
		__MY_STATION->task.subscribe = ENorDIS;
 80045da:	4b5b      	ldr	r3, [pc, #364]	; (8004748 <triggerTaskflag+0x1e8>)
 80045dc:	681a      	ldr	r2, [r3, #0]
 80045de:	79bb      	ldrb	r3, [r7, #6]
 80045e0:	f003 0301 	and.w	r3, r3, #1
 80045e4:	b2d9      	uxtb	r1, r3
 80045e6:	7c13      	ldrb	r3, [r2, #16]
 80045e8:	f361 0341 	bfi	r3, r1, #1, #1
 80045ec:	7413      	strb	r3, [r2, #16]
		break;
 80045ee:	e0a5      	b.n	800473c <triggerTaskflag+0x1dc>
	case TASK_CTRL_MBA:
		__MY_STATION->task.CtrlMBA = ENorDIS;
 80045f0:	4b55      	ldr	r3, [pc, #340]	; (8004748 <triggerTaskflag+0x1e8>)
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	79bb      	ldrb	r3, [r7, #6]
 80045f6:	f003 0301 	and.w	r3, r3, #1
 80045fa:	b2d9      	uxtb	r1, r3
 80045fc:	7c13      	ldrb	r3, [r2, #16]
 80045fe:	f361 1304 	bfi	r3, r1, #4, #1
 8004602:	7413      	strb	r3, [r2, #16]
		break;
 8004604:	e09a      	b.n	800473c <triggerTaskflag+0x1dc>
	case TASK_CTRL_STEPMOR:
		__MY_STATION->task.CtrlStepmotor = ENorDIS;
 8004606:	4b50      	ldr	r3, [pc, #320]	; (8004748 <triggerTaskflag+0x1e8>)
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	79bb      	ldrb	r3, [r7, #6]
 800460c:	f003 0301 	and.w	r3, r3, #1
 8004610:	b2d9      	uxtb	r1, r3
 8004612:	7c13      	ldrb	r3, [r2, #16]
 8004614:	f361 1345 	bfi	r3, r1, #5, #1
 8004618:	7413      	strb	r3, [r2, #16]
		break;
 800461a:	e08f      	b.n	800473c <triggerTaskflag+0x1dc>
	case TASK_PREPARE_CALIB:
		__MY_STATION->task.PrepareCalib = ENorDIS;
 800461c:	4b4a      	ldr	r3, [pc, #296]	; (8004748 <triggerTaskflag+0x1e8>)
 800461e:	681a      	ldr	r2, [r3, #0]
 8004620:	79bb      	ldrb	r3, [r7, #6]
 8004622:	f003 0301 	and.w	r3, r3, #1
 8004626:	b2d9      	uxtb	r1, r3
 8004628:	7c13      	ldrb	r3, [r2, #16]
 800462a:	f361 0382 	bfi	r3, r1, #2, #1
 800462e:	7413      	strb	r3, [r2, #16]
		break;
 8004630:	e084      	b.n	800473c <triggerTaskflag+0x1dc>
	case TASK_START_CALIB:
		__MY_STATION->task.StartCalib = ENorDIS;
 8004632:	4b45      	ldr	r3, [pc, #276]	; (8004748 <triggerTaskflag+0x1e8>)
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	79bb      	ldrb	r3, [r7, #6]
 8004638:	f003 0301 	and.w	r3, r3, #1
 800463c:	b2d9      	uxtb	r1, r3
 800463e:	7c13      	ldrb	r3, [r2, #16]
 8004640:	f361 03c3 	bfi	r3, r1, #3, #1
 8004644:	7413      	strb	r3, [r2, #16]
		break;
 8004646:	e079      	b.n	800473c <triggerTaskflag+0x1dc>
	case TASK_GET_GPS_TIME:
		__MY_STATION->task.getGPStimeflag = ENorDIS;
 8004648:	4b3f      	ldr	r3, [pc, #252]	; (8004748 <triggerTaskflag+0x1e8>)
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	79bb      	ldrb	r3, [r7, #6]
 800464e:	f003 0301 	and.w	r3, r3, #1
 8004652:	b2d9      	uxtb	r1, r3
 8004654:	7c13      	ldrb	r3, [r2, #16]
 8004656:	f361 1386 	bfi	r3, r1, #6, #1
 800465a:	7413      	strb	r3, [r2, #16]
		break;
 800465c:	e06e      	b.n	800473c <triggerTaskflag+0x1dc>
	case TASK_SEND_NWREADY:
		__MY_STATION->task.sendNWready = ENorDIS;
 800465e:	4b3a      	ldr	r3, [pc, #232]	; (8004748 <triggerTaskflag+0x1e8>)
 8004660:	681a      	ldr	r2, [r3, #0]
 8004662:	79bb      	ldrb	r3, [r7, #6]
 8004664:	f003 0301 	and.w	r3, r3, #1
 8004668:	b2d9      	uxtb	r1, r3
 800466a:	7c53      	ldrb	r3, [r2, #17]
 800466c:	f361 0300 	bfi	r3, r1, #0, #1
 8004670:	7453      	strb	r3, [r2, #17]
		break;
 8004672:	e063      	b.n	800473c <triggerTaskflag+0x1dc>
	case TASK_SEND_DATACALIB:
		__MY_STATION->task.sendDATACALIB = ENorDIS;
 8004674:	4b34      	ldr	r3, [pc, #208]	; (8004748 <triggerTaskflag+0x1e8>)
 8004676:	681a      	ldr	r2, [r3, #0]
 8004678:	79bb      	ldrb	r3, [r7, #6]
 800467a:	f003 0301 	and.w	r3, r3, #1
 800467e:	b2d9      	uxtb	r1, r3
 8004680:	7c53      	ldrb	r3, [r2, #17]
 8004682:	f361 0341 	bfi	r3, r1, #1, #1
 8004686:	7453      	strb	r3, [r2, #17]
		break;
 8004688:	e058      	b.n	800473c <triggerTaskflag+0x1dc>
	case TASK_SEND_DATAPERIOD:
		__MY_STATION->task.sendDataPeriod = ENorDIS;
 800468a:	4b2f      	ldr	r3, [pc, #188]	; (8004748 <triggerTaskflag+0x1e8>)
 800468c:	681a      	ldr	r2, [r3, #0]
 800468e:	79bb      	ldrb	r3, [r7, #6]
 8004690:	f003 0301 	and.w	r3, r3, #1
 8004694:	b2d9      	uxtb	r1, r3
 8004696:	7c13      	ldrb	r3, [r2, #16]
 8004698:	f361 13c7 	bfi	r3, r1, #7, #1
 800469c:	7413      	strb	r3, [r2, #16]
		break;
 800469e:	e04d      	b.n	800473c <triggerTaskflag+0x1dc>
	case TASK_SEND_DATAAFTERCALIB:
		__MY_STATION->task.sendDATAafterCALIB = ENorDIS;
 80046a0:	4b29      	ldr	r3, [pc, #164]	; (8004748 <triggerTaskflag+0x1e8>)
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	79bb      	ldrb	r3, [r7, #6]
 80046a6:	f003 0301 	and.w	r3, r3, #1
 80046aa:	b2d9      	uxtb	r1, r3
 80046ac:	7c53      	ldrb	r3, [r2, #17]
 80046ae:	f361 0382 	bfi	r3, r1, #2, #1
 80046b2:	7453      	strb	r3, [r2, #17]
		break;
 80046b4:	e042      	b.n	800473c <triggerTaskflag+0x1dc>
	case TASK_SEND_CTRLMBA:
		__MY_STATION->task.sendcmdCtrlMBA = ENorDIS;
 80046b6:	4b24      	ldr	r3, [pc, #144]	; (8004748 <triggerTaskflag+0x1e8>)
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	79bb      	ldrb	r3, [r7, #6]
 80046bc:	f003 0301 	and.w	r3, r3, #1
 80046c0:	b2d9      	uxtb	r1, r3
 80046c2:	7c53      	ldrb	r3, [r2, #17]
 80046c4:	f361 03c3 	bfi	r3, r1, #3, #1
 80046c8:	7453      	strb	r3, [r2, #17]
		break;
 80046ca:	e037      	b.n	800473c <triggerTaskflag+0x1dc>
	case TASK_SEND_CTRLSTEPMOR:
		__MY_STATION->task.sendcmdCtrlStepmotor = ENorDIS;
 80046cc:	4b1e      	ldr	r3, [pc, #120]	; (8004748 <triggerTaskflag+0x1e8>)
 80046ce:	681a      	ldr	r2, [r3, #0]
 80046d0:	79bb      	ldrb	r3, [r7, #6]
 80046d2:	f003 0301 	and.w	r3, r3, #1
 80046d6:	b2d9      	uxtb	r1, r3
 80046d8:	7c53      	ldrb	r3, [r2, #17]
 80046da:	f361 1304 	bfi	r3, r1, #4, #1
 80046de:	7453      	strb	r3, [r2, #17]
		break;
 80046e0:	e02c      	b.n	800473c <triggerTaskflag+0x1dc>
	case TASK_SEND_CALIB:
		__MY_STATION->task.sendcmdCalib = ENorDIS;
 80046e2:	4b19      	ldr	r3, [pc, #100]	; (8004748 <triggerTaskflag+0x1e8>)
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	79bb      	ldrb	r3, [r7, #6]
 80046e8:	f003 0301 	and.w	r3, r3, #1
 80046ec:	b2d9      	uxtb	r1, r3
 80046ee:	7c53      	ldrb	r3, [r2, #17]
 80046f0:	f361 1345 	bfi	r3, r1, #5, #1
 80046f4:	7453      	strb	r3, [r2, #17]
		break;
 80046f6:	e021      	b.n	800473c <triggerTaskflag+0x1dc>
	case TASK_SEND_GETSTATUS:
		__MY_STATION->task.sendcmdGetstatus = ENorDIS;
 80046f8:	4b13      	ldr	r3, [pc, #76]	; (8004748 <triggerTaskflag+0x1e8>)
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	79bb      	ldrb	r3, [r7, #6]
 80046fe:	f003 0301 	and.w	r3, r3, #1
 8004702:	b2d9      	uxtb	r1, r3
 8004704:	7c53      	ldrb	r3, [r2, #17]
 8004706:	f361 1386 	bfi	r3, r1, #6, #1
 800470a:	7453      	strb	r3, [r2, #17]
		break;
 800470c:	e016      	b.n	800473c <triggerTaskflag+0x1dc>
	case TASK_SEND_GETSTATION:
		__MY_STATION->task.sendcmdGetstation = ENorDIS;
 800470e:	4b0e      	ldr	r3, [pc, #56]	; (8004748 <triggerTaskflag+0x1e8>)
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	79bb      	ldrb	r3, [r7, #6]
 8004714:	f003 0301 	and.w	r3, r3, #1
 8004718:	b2d9      	uxtb	r1, r3
 800471a:	7c53      	ldrb	r3, [r2, #17]
 800471c:	f361 13c7 	bfi	r3, r1, #7, #1
 8004720:	7453      	strb	r3, [r2, #17]
		break;
 8004722:	e00b      	b.n	800473c <triggerTaskflag+0x1dc>
	case TASK_SEND_GETSENSOR:
		__MY_STATION->task.sendcmdGetsensor = ENorDIS;
 8004724:	4b08      	ldr	r3, [pc, #32]	; (8004748 <triggerTaskflag+0x1e8>)
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	79bb      	ldrb	r3, [r7, #6]
 800472a:	f003 0301 	and.w	r3, r3, #1
 800472e:	b2d9      	uxtb	r1, r3
 8004730:	7c93      	ldrb	r3, [r2, #18]
 8004732:	f361 0300 	bfi	r3, r1, #0, #1
 8004736:	7493      	strb	r3, [r2, #18]
		break;
 8004738:	e000      	b.n	800473c <triggerTaskflag+0x1dc>
	default:
		break;
 800473a:	bf00      	nop
	}
	return ;
 800473c:	bf00      	nop
}
 800473e:	370c      	adds	r7, #12
 8004740:	46bd      	mov	sp, r7
 8004742:	bc80      	pop	{r7}
 8004744:	4770      	bx	lr
 8004746:	bf00      	nop
 8004748:	20001ef0 	.word	0x20001ef0

0800474c <sensorID_validation>:
	if (ID >= MIN_STATION_ID && ID <= MAX_STATION_ID)	return true;
	return false;
}

bool sensorID_validation(uint8_t ID)
{
 800474c:	b480      	push	{r7}
 800474e:	b083      	sub	sp, #12
 8004750:	af00      	add	r7, sp, #0
 8004752:	4603      	mov	r3, r0
 8004754:	71fb      	strb	r3, [r7, #7]
	if (ID >= MIN_SENSOR_ID && ID <= MAX_SENSOR_ID)	return true;
 8004756:	79fb      	ldrb	r3, [r7, #7]
 8004758:	2b50      	cmp	r3, #80	; 0x50
 800475a:	d904      	bls.n	8004766 <sensorID_validation+0x1a>
 800475c:	79fb      	ldrb	r3, [r7, #7]
 800475e:	2bff      	cmp	r3, #255	; 0xff
 8004760:	d001      	beq.n	8004766 <sensorID_validation+0x1a>
 8004762:	2301      	movs	r3, #1
 8004764:	e000      	b.n	8004768 <sensorID_validation+0x1c>
	return false;
 8004766:	2300      	movs	r3, #0
}
 8004768:	4618      	mov	r0, r3
 800476a:	370c      	adds	r7, #12
 800476c:	46bd      	mov	sp, r7
 800476e:	bc80      	pop	{r7}
 8004770:	4770      	bx	lr
	...

08004774 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b084      	sub	sp, #16
 8004778:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800477a:	1d3b      	adds	r3, r7, #4
 800477c:	2200      	movs	r2, #0
 800477e:	601a      	str	r2, [r3, #0]
 8004780:	605a      	str	r2, [r3, #4]
 8004782:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8004784:	4b18      	ldr	r3, [pc, #96]	; (80047e8 <MX_ADC1_Init+0x74>)
 8004786:	4a19      	ldr	r2, [pc, #100]	; (80047ec <MX_ADC1_Init+0x78>)
 8004788:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800478a:	4b17      	ldr	r3, [pc, #92]	; (80047e8 <MX_ADC1_Init+0x74>)
 800478c:	2200      	movs	r2, #0
 800478e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8004790:	4b15      	ldr	r3, [pc, #84]	; (80047e8 <MX_ADC1_Init+0x74>)
 8004792:	2201      	movs	r2, #1
 8004794:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004796:	4b14      	ldr	r3, [pc, #80]	; (80047e8 <MX_ADC1_Init+0x74>)
 8004798:	2200      	movs	r2, #0
 800479a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800479c:	4b12      	ldr	r3, [pc, #72]	; (80047e8 <MX_ADC1_Init+0x74>)
 800479e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80047a2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80047a4:	4b10      	ldr	r3, [pc, #64]	; (80047e8 <MX_ADC1_Init+0x74>)
 80047a6:	2200      	movs	r2, #0
 80047a8:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80047aa:	4b0f      	ldr	r3, [pc, #60]	; (80047e8 <MX_ADC1_Init+0x74>)
 80047ac:	2201      	movs	r2, #1
 80047ae:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80047b0:	480d      	ldr	r0, [pc, #52]	; (80047e8 <MX_ADC1_Init+0x74>)
 80047b2:	f002 f8cf 	bl	8006954 <HAL_ADC_Init>
 80047b6:	4603      	mov	r3, r0
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d001      	beq.n	80047c0 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80047bc:	f000 fd94 	bl	80052e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80047c0:	2306      	movs	r3, #6
 80047c2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80047c4:	2301      	movs	r3, #1
 80047c6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80047c8:	2307      	movs	r3, #7
 80047ca:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80047cc:	1d3b      	adds	r3, r7, #4
 80047ce:	4619      	mov	r1, r3
 80047d0:	4805      	ldr	r0, [pc, #20]	; (80047e8 <MX_ADC1_Init+0x74>)
 80047d2:	f002 fb21 	bl	8006e18 <HAL_ADC_ConfigChannel>
 80047d6:	4603      	mov	r3, r0
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d001      	beq.n	80047e0 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80047dc:	f000 fd84 	bl	80052e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80047e0:	bf00      	nop
 80047e2:	3710      	adds	r7, #16
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}
 80047e8:	20001ef4 	.word	0x20001ef4
 80047ec:	40012400 	.word	0x40012400

080047f0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b088      	sub	sp, #32
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047f8:	f107 0310 	add.w	r3, r7, #16
 80047fc:	2200      	movs	r2, #0
 80047fe:	601a      	str	r2, [r3, #0]
 8004800:	605a      	str	r2, [r3, #4]
 8004802:	609a      	str	r2, [r3, #8]
 8004804:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a18      	ldr	r2, [pc, #96]	; (800486c <HAL_ADC_MspInit+0x7c>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d129      	bne.n	8004864 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004810:	4b17      	ldr	r3, [pc, #92]	; (8004870 <HAL_ADC_MspInit+0x80>)
 8004812:	699b      	ldr	r3, [r3, #24]
 8004814:	4a16      	ldr	r2, [pc, #88]	; (8004870 <HAL_ADC_MspInit+0x80>)
 8004816:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800481a:	6193      	str	r3, [r2, #24]
 800481c:	4b14      	ldr	r3, [pc, #80]	; (8004870 <HAL_ADC_MspInit+0x80>)
 800481e:	699b      	ldr	r3, [r3, #24]
 8004820:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004824:	60fb      	str	r3, [r7, #12]
 8004826:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004828:	4b11      	ldr	r3, [pc, #68]	; (8004870 <HAL_ADC_MspInit+0x80>)
 800482a:	699b      	ldr	r3, [r3, #24]
 800482c:	4a10      	ldr	r2, [pc, #64]	; (8004870 <HAL_ADC_MspInit+0x80>)
 800482e:	f043 0304 	orr.w	r3, r3, #4
 8004832:	6193      	str	r3, [r2, #24]
 8004834:	4b0e      	ldr	r3, [pc, #56]	; (8004870 <HAL_ADC_MspInit+0x80>)
 8004836:	699b      	ldr	r3, [r3, #24]
 8004838:	f003 0304 	and.w	r3, r3, #4
 800483c:	60bb      	str	r3, [r7, #8]
 800483e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004840:	2340      	movs	r3, #64	; 0x40
 8004842:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004844:	2303      	movs	r3, #3
 8004846:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004848:	f107 0310 	add.w	r3, r7, #16
 800484c:	4619      	mov	r1, r3
 800484e:	4809      	ldr	r0, [pc, #36]	; (8004874 <HAL_ADC_MspInit+0x84>)
 8004850:	f003 f82e 	bl	80078b0 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8004854:	2200      	movs	r2, #0
 8004856:	2100      	movs	r1, #0
 8004858:	2012      	movs	r0, #18
 800485a:	f002 fd50 	bl	80072fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800485e:	2012      	movs	r0, #18
 8004860:	f002 fd69 	bl	8007336 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8004864:	bf00      	nop
 8004866:	3720      	adds	r7, #32
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}
 800486c:	40012400 	.word	0x40012400
 8004870:	40021000 	.word	0x40021000
 8004874:	40010800 	.word	0x40010800

08004878 <crc32>:
    0x2d02ef8dL
};

/* crc32 hash */
uint32_t crc32(const char* s, int len)
{
 8004878:	b480      	push	{r7}
 800487a:	b085      	sub	sp, #20
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
 8004880:	6039      	str	r1, [r7, #0]
    int i;
    uint32_t crc32val = 0;
 8004882:	2300      	movs	r3, #0
 8004884:	60bb      	str	r3, [r7, #8]
    crc32val ^= 0xFFFFFFFF;
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	43db      	mvns	r3, r3
 800488a:	60bb      	str	r3, [r7, #8]

    for (i = 0;  i < len;  i++) {
 800488c:	2300      	movs	r3, #0
 800488e:	60fb      	str	r3, [r7, #12]
 8004890:	e011      	b.n	80048b6 <crc32+0x3e>
        crc32val = crc32_tab[(crc32val ^ s[i]) & 0xFF] ^ ((crc32val >> 8) & 0x00FFFFFF);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	687a      	ldr	r2, [r7, #4]
 8004896:	4413      	add	r3, r2
 8004898:	781b      	ldrb	r3, [r3, #0]
 800489a:	461a      	mov	r2, r3
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	4053      	eors	r3, r2
 80048a0:	b2db      	uxtb	r3, r3
 80048a2:	4a0a      	ldr	r2, [pc, #40]	; (80048cc <crc32+0x54>)
 80048a4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	0a1b      	lsrs	r3, r3, #8
 80048ac:	4053      	eors	r3, r2
 80048ae:	60bb      	str	r3, [r7, #8]
    for (i = 0;  i < len;  i++) {
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	3301      	adds	r3, #1
 80048b4:	60fb      	str	r3, [r7, #12]
 80048b6:	68fa      	ldr	r2, [r7, #12]
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	429a      	cmp	r2, r3
 80048bc:	dbe9      	blt.n	8004892 <crc32+0x1a>
    }

    return crc32val ^ 0xFFFFFFFF;
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	43db      	mvns	r3, r3
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3714      	adds	r7, #20
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bc80      	pop	{r7}
 80048ca:	4770      	bx	lr
 80048cc:	20000008 	.word	0x20000008

080048d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b082      	sub	sp, #8
 80048d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80048d6:	4b14      	ldr	r3, [pc, #80]	; (8004928 <MX_DMA_Init+0x58>)
 80048d8:	695b      	ldr	r3, [r3, #20]
 80048da:	4a13      	ldr	r2, [pc, #76]	; (8004928 <MX_DMA_Init+0x58>)
 80048dc:	f043 0301 	orr.w	r3, r3, #1
 80048e0:	6153      	str	r3, [r2, #20]
 80048e2:	4b11      	ldr	r3, [pc, #68]	; (8004928 <MX_DMA_Init+0x58>)
 80048e4:	695b      	ldr	r3, [r3, #20]
 80048e6:	f003 0301 	and.w	r3, r3, #1
 80048ea:	607b      	str	r3, [r7, #4]
 80048ec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80048ee:	2200      	movs	r2, #0
 80048f0:	2100      	movs	r1, #0
 80048f2:	200d      	movs	r0, #13
 80048f4:	f002 fd03 	bl	80072fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80048f8:	200d      	movs	r0, #13
 80048fa:	f002 fd1c 	bl	8007336 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80048fe:	2200      	movs	r2, #0
 8004900:	2100      	movs	r1, #0
 8004902:	200f      	movs	r0, #15
 8004904:	f002 fcfb 	bl	80072fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8004908:	200f      	movs	r0, #15
 800490a:	f002 fd14 	bl	8007336 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800490e:	2200      	movs	r2, #0
 8004910:	2100      	movs	r1, #0
 8004912:	2010      	movs	r0, #16
 8004914:	f002 fcf3 	bl	80072fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8004918:	2010      	movs	r0, #16
 800491a:	f002 fd0c 	bl	8007336 <HAL_NVIC_EnableIRQ>

}
 800491e:	bf00      	nop
 8004920:	3708      	adds	r7, #8
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}
 8004926:	bf00      	nop
 8004928:	40021000 	.word	0x40021000

0800492c <Bytes2float>:
    }

}

float Bytes2float(uint8_t * ftoa_bytes_temp)
{
 800492c:	b480      	push	{r7}
 800492e:	b087      	sub	sp, #28
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
    union {
      float a;
      uint8_t bytes[4];
    } thing;

    for (uint8_t i = 0; i < 4; i++) {
 8004934:	2300      	movs	r3, #0
 8004936:	75fb      	strb	r3, [r7, #23]
 8004938:	e00b      	b.n	8004952 <Bytes2float+0x26>
    	thing.bytes[i] = ftoa_bytes_temp[i];
 800493a:	7dfb      	ldrb	r3, [r7, #23]
 800493c:	687a      	ldr	r2, [r7, #4]
 800493e:	441a      	add	r2, r3
 8004940:	7dfb      	ldrb	r3, [r7, #23]
 8004942:	7812      	ldrb	r2, [r2, #0]
 8004944:	3318      	adds	r3, #24
 8004946:	443b      	add	r3, r7
 8004948:	f803 2c0c 	strb.w	r2, [r3, #-12]
    for (uint8_t i = 0; i < 4; i++) {
 800494c:	7dfb      	ldrb	r3, [r7, #23]
 800494e:	3301      	adds	r3, #1
 8004950:	75fb      	strb	r3, [r7, #23]
 8004952:	7dfb      	ldrb	r3, [r7, #23]
 8004954:	2b03      	cmp	r3, #3
 8004956:	d9f0      	bls.n	800493a <Bytes2float+0xe>
    }

   float float_variable =  thing.a;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	613b      	str	r3, [r7, #16]
   return float_variable;
 800495c:	693b      	ldr	r3, [r7, #16]
}
 800495e:	4618      	mov	r0, r3
 8004960:	371c      	adds	r7, #28
 8004962:	46bd      	mov	sp, r7
 8004964:	bc80      	pop	{r7}
 8004966:	4770      	bx	lr

08004968 <Flash_Read_Data>:
	   return 0;
}


void Flash_Read_Data (uint32_t StartPageAddress, uint32_t *RxBuf, uint16_t numberofwords)
{
 8004968:	b480      	push	{r7}
 800496a:	b085      	sub	sp, #20
 800496c:	af00      	add	r7, sp, #0
 800496e:	60f8      	str	r0, [r7, #12]
 8004970:	60b9      	str	r1, [r7, #8]
 8004972:	4613      	mov	r3, r2
 8004974:	80fb      	strh	r3, [r7, #6]
	while (1)
	{

		*RxBuf = *(__IO uint32_t *)StartPageAddress;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681a      	ldr	r2, [r3, #0]
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	601a      	str	r2, [r3, #0]
		StartPageAddress += 4;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	3304      	adds	r3, #4
 8004982:	60fb      	str	r3, [r7, #12]
		RxBuf++;
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	3304      	adds	r3, #4
 8004988:	60bb      	str	r3, [r7, #8]
		if (!(numberofwords--)) break;
 800498a:	88fb      	ldrh	r3, [r7, #6]
 800498c:	1e5a      	subs	r2, r3, #1
 800498e:	80fa      	strh	r2, [r7, #6]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d000      	beq.n	8004996 <Flash_Read_Data+0x2e>
		*RxBuf = *(__IO uint32_t *)StartPageAddress;
 8004994:	e7ef      	b.n	8004976 <Flash_Read_Data+0xe>
		if (!(numberofwords--)) break;
 8004996:	bf00      	nop
	}
}
 8004998:	bf00      	nop
 800499a:	3714      	adds	r7, #20
 800499c:	46bd      	mov	sp, r7
 800499e:	bc80      	pop	{r7}
 80049a0:	4770      	bx	lr

080049a2 <Flash_Read_NUM>:
	Flash_Write_Data (StartSectorAddress, (uint32_t *)bytes_temp, 1);
}


float Flash_Read_NUM (uint32_t StartSectorAddress)
{
 80049a2:	b580      	push	{r7, lr}
 80049a4:	b084      	sub	sp, #16
 80049a6:	af00      	add	r7, sp, #0
 80049a8:	6078      	str	r0, [r7, #4]
	uint8_t buffer[4];
	float value;

	Flash_Read_Data(StartSectorAddress, (uint32_t *)buffer, 1);
 80049aa:	f107 0308 	add.w	r3, r7, #8
 80049ae:	2201      	movs	r2, #1
 80049b0:	4619      	mov	r1, r3
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f7ff ffd8 	bl	8004968 <Flash_Read_Data>
	value = Bytes2float(buffer);
 80049b8:	f107 0308 	add.w	r3, r7, #8
 80049bc:	4618      	mov	r0, r3
 80049be:	f7ff ffb5 	bl	800492c <Bytes2float>
 80049c2:	60f8      	str	r0, [r7, #12]
	return value;
 80049c4:	68fb      	ldr	r3, [r7, #12]
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	3710      	adds	r7, #16
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}
	...

080049d0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b088      	sub	sp, #32
 80049d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049d6:	f107 0310 	add.w	r3, r7, #16
 80049da:	2200      	movs	r2, #0
 80049dc:	601a      	str	r2, [r3, #0]
 80049de:	605a      	str	r2, [r3, #4]
 80049e0:	609a      	str	r2, [r3, #8]
 80049e2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80049e4:	4b58      	ldr	r3, [pc, #352]	; (8004b48 <MX_GPIO_Init+0x178>)
 80049e6:	699b      	ldr	r3, [r3, #24]
 80049e8:	4a57      	ldr	r2, [pc, #348]	; (8004b48 <MX_GPIO_Init+0x178>)
 80049ea:	f043 0310 	orr.w	r3, r3, #16
 80049ee:	6193      	str	r3, [r2, #24]
 80049f0:	4b55      	ldr	r3, [pc, #340]	; (8004b48 <MX_GPIO_Init+0x178>)
 80049f2:	699b      	ldr	r3, [r3, #24]
 80049f4:	f003 0310 	and.w	r3, r3, #16
 80049f8:	60fb      	str	r3, [r7, #12]
 80049fa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80049fc:	4b52      	ldr	r3, [pc, #328]	; (8004b48 <MX_GPIO_Init+0x178>)
 80049fe:	699b      	ldr	r3, [r3, #24]
 8004a00:	4a51      	ldr	r2, [pc, #324]	; (8004b48 <MX_GPIO_Init+0x178>)
 8004a02:	f043 0320 	orr.w	r3, r3, #32
 8004a06:	6193      	str	r3, [r2, #24]
 8004a08:	4b4f      	ldr	r3, [pc, #316]	; (8004b48 <MX_GPIO_Init+0x178>)
 8004a0a:	699b      	ldr	r3, [r3, #24]
 8004a0c:	f003 0320 	and.w	r3, r3, #32
 8004a10:	60bb      	str	r3, [r7, #8]
 8004a12:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a14:	4b4c      	ldr	r3, [pc, #304]	; (8004b48 <MX_GPIO_Init+0x178>)
 8004a16:	699b      	ldr	r3, [r3, #24]
 8004a18:	4a4b      	ldr	r2, [pc, #300]	; (8004b48 <MX_GPIO_Init+0x178>)
 8004a1a:	f043 0304 	orr.w	r3, r3, #4
 8004a1e:	6193      	str	r3, [r2, #24]
 8004a20:	4b49      	ldr	r3, [pc, #292]	; (8004b48 <MX_GPIO_Init+0x178>)
 8004a22:	699b      	ldr	r3, [r3, #24]
 8004a24:	f003 0304 	and.w	r3, r3, #4
 8004a28:	607b      	str	r3, [r7, #4]
 8004a2a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a2c:	4b46      	ldr	r3, [pc, #280]	; (8004b48 <MX_GPIO_Init+0x178>)
 8004a2e:	699b      	ldr	r3, [r3, #24]
 8004a30:	4a45      	ldr	r2, [pc, #276]	; (8004b48 <MX_GPIO_Init+0x178>)
 8004a32:	f043 0308 	orr.w	r3, r3, #8
 8004a36:	6193      	str	r3, [r2, #24]
 8004a38:	4b43      	ldr	r3, [pc, #268]	; (8004b48 <MX_GPIO_Init+0x178>)
 8004a3a:	699b      	ldr	r3, [r3, #24]
 8004a3c:	f003 0308 	and.w	r3, r3, #8
 8004a40:	603b      	str	r3, [r7, #0]
 8004a42:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_DB7_Pin|LCD_DB6_Pin|LCD_DB5_Pin, GPIO_PIN_RESET);
 8004a44:	2200      	movs	r2, #0
 8004a46:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8004a4a:	4840      	ldr	r0, [pc, #256]	; (8004b4c <MX_GPIO_Init+0x17c>)
 8004a4c:	f003 f8b4 	bl	8007bb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MBA_CONTACTOR_Pin|MOTOR_DIR_Pin|LED_Pin|LCD_RS_Pin
 8004a50:	2200      	movs	r2, #0
 8004a52:	f649 4190 	movw	r1, #40080	; 0x9c90
 8004a56:	483e      	ldr	r0, [pc, #248]	; (8004b50 <MX_GPIO_Init+0x180>)
 8004a58:	f003 f8ae 	bl	8007bb8 <HAL_GPIO_WritePin>
                          |LCD_EN_Pin|LCD_DB4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOTOR_STEP_Pin|MOTOR_SLEEP_Pin|MOTOR_RST_Pin|MOTOR_EN_Pin, GPIO_PIN_RESET);
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	f243 0103 	movw	r1, #12291	; 0x3003
 8004a62:	483c      	ldr	r0, [pc, #240]	; (8004b54 <MX_GPIO_Init+0x184>)
 8004a64:	f003 f8a8 	bl	8007bb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LCD_DB7_Pin|LCD_DB6_Pin|LCD_DB5_Pin;
 8004a68:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8004a6c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a72:	2300      	movs	r3, #0
 8004a74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a76:	2302      	movs	r3, #2
 8004a78:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004a7a:	f107 0310 	add.w	r3, r7, #16
 8004a7e:	4619      	mov	r1, r3
 8004a80:	4832      	ldr	r0, [pc, #200]	; (8004b4c <MX_GPIO_Init+0x17c>)
 8004a82:	f002 ff15 	bl	80078b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RTC_ALARM_TRIGGER_Pin;
 8004a86:	2301      	movs	r3, #1
 8004a88:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004a8a:	4b33      	ldr	r3, [pc, #204]	; (8004b58 <MX_GPIO_Init+0x188>)
 8004a8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RTC_ALARM_TRIGGER_GPIO_Port, &GPIO_InitStruct);
 8004a92:	f107 0310 	add.w	r3, r7, #16
 8004a96:	4619      	mov	r1, r3
 8004a98:	482d      	ldr	r0, [pc, #180]	; (8004b50 <MX_GPIO_Init+0x180>)
 8004a9a:	f002 ff09 	bl	80078b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin */
  GPIO_InitStruct.Pin = MBA_CONTACTOR_Pin|MOTOR_DIR_Pin|LED_Pin|LCD_RS_Pin
 8004a9e:	f649 4390 	movw	r3, #40080	; 0x9c90
 8004aa2:	613b      	str	r3, [r7, #16]
                          |LCD_EN_Pin|LCD_DB4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004aac:	2302      	movs	r3, #2
 8004aae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ab0:	f107 0310 	add.w	r3, r7, #16
 8004ab4:	4619      	mov	r1, r3
 8004ab6:	4826      	ldr	r0, [pc, #152]	; (8004b50 <MX_GPIO_Init+0x180>)
 8004ab8:	f002 fefa 	bl	80078b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LIMIT_SWITCH_MAX_Pin|BUTTON_DOWN_Pin|BUTTON_UP_Pin;
 8004abc:	f44f 7348 	mov.w	r3, #800	; 0x320
 8004ac0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004ac2:	4b26      	ldr	r3, [pc, #152]	; (8004b5c <MX_GPIO_Init+0x18c>)
 8004ac4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004aca:	f107 0310 	add.w	r3, r7, #16
 8004ace:	4619      	mov	r1, r3
 8004ad0:	481f      	ldr	r0, [pc, #124]	; (8004b50 <MX_GPIO_Init+0x180>)
 8004ad2:	f002 feed 	bl	80078b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MOTOR_STEP_Pin|MOTOR_SLEEP_Pin|MOTOR_RST_Pin|MOTOR_EN_Pin;
 8004ad6:	f243 0303 	movw	r3, #12291	; 0x3003
 8004ada:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004adc:	2301      	movs	r3, #1
 8004ade:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ae4:	2302      	movs	r3, #2
 8004ae6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ae8:	f107 0310 	add.w	r3, r7, #16
 8004aec:	4619      	mov	r1, r3
 8004aee:	4819      	ldr	r0, [pc, #100]	; (8004b54 <MX_GPIO_Init+0x184>)
 8004af0:	f002 fede 	bl	80078b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LIMIT_SWITCH_MIN_Pin|BUTTON_MENU_Pin|BUTTON_OK_Pin;
 8004af4:	f24c 0304 	movw	r3, #49156	; 0xc004
 8004af8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004afa:	4b18      	ldr	r3, [pc, #96]	; (8004b5c <MX_GPIO_Init+0x18c>)
 8004afc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004afe:	2300      	movs	r3, #0
 8004b00:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b02:	f107 0310 	add.w	r3, r7, #16
 8004b06:	4619      	mov	r1, r3
 8004b08:	4812      	ldr	r0, [pc, #72]	; (8004b54 <MX_GPIO_Init+0x184>)
 8004b0a:	f002 fed1 	bl	80078b0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8004b0e:	2200      	movs	r2, #0
 8004b10:	2100      	movs	r1, #0
 8004b12:	2006      	movs	r0, #6
 8004b14:	f002 fbf3 	bl	80072fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8004b18:	2006      	movs	r0, #6
 8004b1a:	f002 fc0c 	bl	8007336 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8004b1e:	2200      	movs	r2, #0
 8004b20:	2100      	movs	r1, #0
 8004b22:	2017      	movs	r0, #23
 8004b24:	f002 fbeb 	bl	80072fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004b28:	2017      	movs	r0, #23
 8004b2a:	f002 fc04 	bl	8007336 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8004b2e:	2200      	movs	r2, #0
 8004b30:	2100      	movs	r1, #0
 8004b32:	2028      	movs	r0, #40	; 0x28
 8004b34:	f002 fbe3 	bl	80072fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004b38:	2028      	movs	r0, #40	; 0x28
 8004b3a:	f002 fbfc 	bl	8007336 <HAL_NVIC_EnableIRQ>

}
 8004b3e:	bf00      	nop
 8004b40:	3720      	adds	r7, #32
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}
 8004b46:	bf00      	nop
 8004b48:	40021000 	.word	0x40021000
 8004b4c:	40011000 	.word	0x40011000
 8004b50:	40010800 	.word	0x40010800
 8004b54:	40010c00 	.word	0x40010c00
 8004b58:	10210000 	.word	0x10210000
 8004b5c:	10110000 	.word	0x10110000

08004b60 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004b64:	4b12      	ldr	r3, [pc, #72]	; (8004bb0 <MX_I2C1_Init+0x50>)
 8004b66:	4a13      	ldr	r2, [pc, #76]	; (8004bb4 <MX_I2C1_Init+0x54>)
 8004b68:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8004b6a:	4b11      	ldr	r3, [pc, #68]	; (8004bb0 <MX_I2C1_Init+0x50>)
 8004b6c:	4a12      	ldr	r2, [pc, #72]	; (8004bb8 <MX_I2C1_Init+0x58>)
 8004b6e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004b70:	4b0f      	ldr	r3, [pc, #60]	; (8004bb0 <MX_I2C1_Init+0x50>)
 8004b72:	2200      	movs	r2, #0
 8004b74:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8004b76:	4b0e      	ldr	r3, [pc, #56]	; (8004bb0 <MX_I2C1_Init+0x50>)
 8004b78:	2200      	movs	r2, #0
 8004b7a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004b7c:	4b0c      	ldr	r3, [pc, #48]	; (8004bb0 <MX_I2C1_Init+0x50>)
 8004b7e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004b82:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004b84:	4b0a      	ldr	r3, [pc, #40]	; (8004bb0 <MX_I2C1_Init+0x50>)
 8004b86:	2200      	movs	r2, #0
 8004b88:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8004b8a:	4b09      	ldr	r3, [pc, #36]	; (8004bb0 <MX_I2C1_Init+0x50>)
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004b90:	4b07      	ldr	r3, [pc, #28]	; (8004bb0 <MX_I2C1_Init+0x50>)
 8004b92:	2200      	movs	r2, #0
 8004b94:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004b96:	4b06      	ldr	r3, [pc, #24]	; (8004bb0 <MX_I2C1_Init+0x50>)
 8004b98:	2200      	movs	r2, #0
 8004b9a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004b9c:	4804      	ldr	r0, [pc, #16]	; (8004bb0 <MX_I2C1_Init+0x50>)
 8004b9e:	f003 f855 	bl	8007c4c <HAL_I2C_Init>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d001      	beq.n	8004bac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8004ba8:	f000 fb9e 	bl	80052e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004bac:	bf00      	nop
 8004bae:	bd80      	pop	{r7, pc}
 8004bb0:	20001f24 	.word	0x20001f24
 8004bb4:	40005400 	.word	0x40005400
 8004bb8:	00061a80 	.word	0x00061a80

08004bbc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b08a      	sub	sp, #40	; 0x28
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bc4:	f107 0314 	add.w	r3, r7, #20
 8004bc8:	2200      	movs	r2, #0
 8004bca:	601a      	str	r2, [r3, #0]
 8004bcc:	605a      	str	r2, [r3, #4]
 8004bce:	609a      	str	r2, [r3, #8]
 8004bd0:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a1d      	ldr	r2, [pc, #116]	; (8004c4c <HAL_I2C_MspInit+0x90>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d132      	bne.n	8004c42 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004bdc:	4b1c      	ldr	r3, [pc, #112]	; (8004c50 <HAL_I2C_MspInit+0x94>)
 8004bde:	699b      	ldr	r3, [r3, #24]
 8004be0:	4a1b      	ldr	r2, [pc, #108]	; (8004c50 <HAL_I2C_MspInit+0x94>)
 8004be2:	f043 0308 	orr.w	r3, r3, #8
 8004be6:	6193      	str	r3, [r2, #24]
 8004be8:	4b19      	ldr	r3, [pc, #100]	; (8004c50 <HAL_I2C_MspInit+0x94>)
 8004bea:	699b      	ldr	r3, [r3, #24]
 8004bec:	f003 0308 	and.w	r3, r3, #8
 8004bf0:	613b      	str	r3, [r7, #16]
 8004bf2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004bf4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004bf8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004bfa:	2312      	movs	r3, #18
 8004bfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004bfe:	2303      	movs	r3, #3
 8004c00:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c02:	f107 0314 	add.w	r3, r7, #20
 8004c06:	4619      	mov	r1, r3
 8004c08:	4812      	ldr	r0, [pc, #72]	; (8004c54 <HAL_I2C_MspInit+0x98>)
 8004c0a:	f002 fe51 	bl	80078b0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8004c0e:	4b12      	ldr	r3, [pc, #72]	; (8004c58 <HAL_I2C_MspInit+0x9c>)
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	627b      	str	r3, [r7, #36]	; 0x24
 8004c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c16:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8004c1a:	627b      	str	r3, [r7, #36]	; 0x24
 8004c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c1e:	f043 0302 	orr.w	r3, r3, #2
 8004c22:	627b      	str	r3, [r7, #36]	; 0x24
 8004c24:	4a0c      	ldr	r2, [pc, #48]	; (8004c58 <HAL_I2C_MspInit+0x9c>)
 8004c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c28:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004c2a:	4b09      	ldr	r3, [pc, #36]	; (8004c50 <HAL_I2C_MspInit+0x94>)
 8004c2c:	69db      	ldr	r3, [r3, #28]
 8004c2e:	4a08      	ldr	r2, [pc, #32]	; (8004c50 <HAL_I2C_MspInit+0x94>)
 8004c30:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004c34:	61d3      	str	r3, [r2, #28]
 8004c36:	4b06      	ldr	r3, [pc, #24]	; (8004c50 <HAL_I2C_MspInit+0x94>)
 8004c38:	69db      	ldr	r3, [r3, #28]
 8004c3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c3e:	60fb      	str	r3, [r7, #12]
 8004c40:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8004c42:	bf00      	nop
 8004c44:	3728      	adds	r7, #40	; 0x28
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}
 8004c4a:	bf00      	nop
 8004c4c:	40005400 	.word	0x40005400
 8004c50:	40021000 	.word	0x40021000
 8004c54:	40010c00 	.word	0x40010c00
 8004c58:	40010000 	.word	0x40010000

08004c5c <create_node>:
#include "linkedlist.h"

SensorNode_t SSnode_default = SENSORNODE_T_INIT;

Node* create_node(SensorNode_t  SSnode)
{
 8004c5c:	b084      	sub	sp, #16
 8004c5e:	b580      	push	{r7, lr}
 8004c60:	b082      	sub	sp, #8
 8004c62:	af00      	add	r7, sp, #0
 8004c64:	f107 0c10 	add.w	ip, r7, #16
 8004c68:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    Node* node = (Node*)malloc(sizeof(Node));
 8004c6c:	2078      	movs	r0, #120	; 0x78
 8004c6e:	f006 f8cd 	bl	800ae0c <malloc>
 8004c72:	4603      	mov	r3, r0
 8004c74:	607b      	str	r3, [r7, #4]
    node->SSnode= SSnode;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	4618      	mov	r0, r3
 8004c7a:	f107 0310 	add.w	r3, r7, #16
 8004c7e:	2272      	movs	r2, #114	; 0x72
 8004c80:	4619      	mov	r1, r3
 8004c82:	f006 f8e3 	bl	800ae4c <memcpy>
    node->next = NULL;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	675a      	str	r2, [r3, #116]	; 0x74
    return node;
 8004c8c:	687b      	ldr	r3, [r7, #4]
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	3708      	adds	r7, #8
 8004c92:	46bd      	mov	sp, r7
 8004c94:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004c98:	b004      	add	sp, #16
 8004c9a:	4770      	bx	lr

08004c9c <list_create>:

s_list * list_create(void)
{
 8004c9c:	b590      	push	{r4, r7, lr}
 8004c9e:	b09d      	sub	sp, #116	; 0x74
 8004ca0:	af1a      	add	r7, sp, #104	; 0x68
    s_list *list = (s_list*)malloc(sizeof(s_list));
 8004ca2:	200c      	movs	r0, #12
 8004ca4:	f006 f8b2 	bl	800ae0c <malloc>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	607b      	str	r3, [r7, #4]
//    assert(list != NULL);
    list->head = create_node(SSnode_default);
 8004cac:	4c15      	ldr	r4, [pc, #84]	; (8004d04 <list_create+0x68>)
 8004cae:	4668      	mov	r0, sp
 8004cb0:	f104 0310 	add.w	r3, r4, #16
 8004cb4:	2262      	movs	r2, #98	; 0x62
 8004cb6:	4619      	mov	r1, r3
 8004cb8:	f006 f8c8 	bl	800ae4c <memcpy>
 8004cbc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004cc0:	f7ff ffcc 	bl	8004c5c <create_node>
 8004cc4:	4602      	mov	r2, r0
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	601a      	str	r2, [r3, #0]
    list->tail = create_node(SSnode_default);
 8004cca:	4c0e      	ldr	r4, [pc, #56]	; (8004d04 <list_create+0x68>)
 8004ccc:	4668      	mov	r0, sp
 8004cce:	f104 0310 	add.w	r3, r4, #16
 8004cd2:	2262      	movs	r2, #98	; 0x62
 8004cd4:	4619      	mov	r1, r3
 8004cd6:	f006 f8b9 	bl	800ae4c <memcpy>
 8004cda:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004cde:	f7ff ffbd 	bl	8004c5c <create_node>
 8004ce2:	4602      	mov	r2, r0
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	605a      	str	r2, [r3, #4]
    list->head->next = list->tail;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	687a      	ldr	r2, [r7, #4]
 8004cee:	6852      	ldr	r2, [r2, #4]
 8004cf0:	675a      	str	r2, [r3, #116]	; 0x74
    list->length = 0;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	609a      	str	r2, [r3, #8]
    return list;
 8004cf8:	687b      	ldr	r3, [r7, #4]
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	370c      	adds	r7, #12
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd90      	pop	{r4, r7, pc}
 8004d02:	bf00      	nop
 8004d04:	20000408 	.word	0x20000408

08004d08 <list_append>:

void list_append (s_list* list, SensorNode_t SSnode_data)
{
 8004d08:	b084      	sub	sp, #16
 8004d0a:	b590      	push	{r4, r7, lr}
 8004d0c:	b09f      	sub	sp, #124	; 0x7c
 8004d0e:	af1a      	add	r7, sp, #104	; 0x68
 8004d10:	6078      	str	r0, [r7, #4]
 8004d12:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004d16:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	list->tail->SSnode = SSnode_data;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d24:	2272      	movs	r2, #114	; 0x72
 8004d26:	4619      	mov	r1, r3
 8004d28:	f006 f890 	bl	800ae4c <memcpy>
	Node *new_tail = create_node(SSnode_default);
 8004d2c:	4c0f      	ldr	r4, [pc, #60]	; (8004d6c <list_append+0x64>)
 8004d2e:	4668      	mov	r0, sp
 8004d30:	f104 0310 	add.w	r3, r4, #16
 8004d34:	2262      	movs	r2, #98	; 0x62
 8004d36:	4619      	mov	r1, r3
 8004d38:	f006 f888 	bl	800ae4c <memcpy>
 8004d3c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004d40:	f7ff ff8c 	bl	8004c5c <create_node>
 8004d44:	60f8      	str	r0, [r7, #12]
	list->tail->next = new_tail;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	68fa      	ldr	r2, [r7, #12]
 8004d4c:	675a      	str	r2, [r3, #116]	; 0x74
	list->tail = new_tail;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	68fa      	ldr	r2, [r7, #12]
 8004d52:	605a      	str	r2, [r3, #4]
	list->length += 1;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	1c5a      	adds	r2, r3, #1
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	609a      	str	r2, [r3, #8]
}
 8004d5e:	bf00      	nop
 8004d60:	3714      	adds	r7, #20
 8004d62:	46bd      	mov	sp, r7
 8004d64:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8004d68:	b004      	add	sp, #16
 8004d6a:	4770      	bx	lr
 8004d6c:	20000408 	.word	0x20000408

08004d70 <HAL_UARTEx_RxEventCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static void currentConvert(uint32_t volatile *adcval);
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b082      	sub	sp, #8
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
 8004d78:	460b      	mov	r3, r1
 8004d7a:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART1 )
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a10      	ldr	r2, [pc, #64]	; (8004dc4 <HAL_UARTEx_RxEventCallback+0x54>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d103      	bne.n	8004d8e <HAL_UARTEx_RxEventCallback+0x1e>
	{
		SIM_callback(Size);
 8004d86:	887b      	ldrh	r3, [r7, #2]
 8004d88:	4618      	mov	r0, r3
 8004d8a:	f7fd f9bb 	bl	8002104 <SIM_callback>
	}
	if (huart->Instance== __SCFG_UART->Instance)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	4b0d      	ldr	r3, [pc, #52]	; (8004dc8 <HAL_UARTEx_RxEventCallback+0x58>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	429a      	cmp	r2, r3
 8004d9a:	d103      	bne.n	8004da4 <HAL_UARTEx_RxEventCallback+0x34>
	{
		Serial_CFG_Callback(Size);
 8004d9c:	887b      	ldrh	r3, [r7, #2]
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f7fb ff70 	bl	8000c84 <Serial_CFG_Callback>
	}

	if (huart->Instance == __LORA_UART->Instance) {
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681a      	ldr	r2, [r3, #0]
 8004da8:	4b08      	ldr	r3, [pc, #32]	; (8004dcc <HAL_UARTEx_RxEventCallback+0x5c>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	429a      	cmp	r2, r3
 8004db0:	d103      	bne.n	8004dba <HAL_UARTEx_RxEventCallback+0x4a>
		Lora_callback(Size);
 8004db2:	887b      	ldrh	r3, [r7, #2]
 8004db4:	4618      	mov	r0, r3
 8004db6:	f7fe fb8d 	bl	80034d4 <Lora_callback>
	}
}
 8004dba:	bf00      	nop
 8004dbc:	3708      	adds	r7, #8
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}
 8004dc2:	bf00      	nop
 8004dc4:	40013800 	.word	0x40013800
 8004dc8:	20000600 	.word	0x20000600
 8004dcc:	20001958 	.word	0x20001958

08004dd0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b082      	sub	sp, #8
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == RTC_ALARM_TRIGGER_Pin)	{
 8004dda:	88fb      	ldrh	r3, [r7, #6]
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d10f      	bne.n	8004e00 <HAL_GPIO_EXTI_Callback+0x30>
//		alarmflag = 0;
		// turn OFF MBA
		myStation.MBAstate = switchContactor(MBA_OFF);
 8004de0:	2002      	movs	r0, #2
 8004de2:	f7fd f939 	bl	8002058 <switchContactor>
 8004de6:	4603      	mov	r3, r0
 8004de8:	461a      	mov	r2, r3
 8004dea:	4b18      	ldr	r3, [pc, #96]	; (8004e4c <HAL_GPIO_EXTI_Callback+0x7c>)
 8004dec:	719a      	strb	r2, [r3, #6]
//		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
		DS3231_ClearAlarm1();
 8004dee:	f7fe fa47 	bl	8003280 <DS3231_ClearAlarm1>
		// Change to Calib mode
		setStationMode(STATION_MODE_CALIB);
 8004df2:	2001      	movs	r0, #1
 8004df4:	f000 f854 	bl	8004ea0 <setStationMode>
		triggerTaskflag(TASK_START_CALIB, FLAG_EN);
 8004df8:	2101      	movs	r1, #1
 8004dfa:	2003      	movs	r0, #3
 8004dfc:	f7ff fbb0 	bl	8004560 <triggerTaskflag>
	}
	if (GPIO_Pin == BUTTON_MENU_Pin) {
 8004e00:	88fb      	ldrh	r3, [r7, #6]
 8004e02:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e06:	d101      	bne.n	8004e0c <HAL_GPIO_EXTI_Callback+0x3c>
		// Button Menu handler
		buttonMENU_handler();
 8004e08:	f7fd fee6 	bl	8002bd8 <buttonMENU_handler>
	}

	if (GPIO_Pin == BUTTON_OK_Pin) {
 8004e0c:	88fb      	ldrh	r3, [r7, #6]
 8004e0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e12:	d101      	bne.n	8004e18 <HAL_GPIO_EXTI_Callback+0x48>
		// Button OK handler
		buttonOK_handler();
 8004e14:	f7fd ff42 	bl	8002c9c <buttonOK_handler>
	}

	if (GPIO_Pin == BUTTON_UP_Pin) {
 8004e18:	88fb      	ldrh	r3, [r7, #6]
 8004e1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e1e:	d101      	bne.n	8004e24 <HAL_GPIO_EXTI_Callback+0x54>
		// Button UP handler
		buttonUP_handler();
 8004e20:	f7fd ffe8 	bl	8002df4 <buttonUP_handler>
	}

	if (GPIO_Pin == BUTTON_DOWN_Pin) {
 8004e24:	88fb      	ldrh	r3, [r7, #6]
 8004e26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e2a:	d101      	bne.n	8004e30 <HAL_GPIO_EXTI_Callback+0x60>
		// Button DOWN handler
		buttonDOWN_handler();
 8004e2c:	f7fd ff94 	bl	8002d58 <buttonDOWN_handler>
	}

	if (GPIO_Pin == LIMIT_SWITCH_MAX_Pin) {
 8004e30:	88fb      	ldrh	r3, [r7, #6]
 8004e32:	2b20      	cmp	r3, #32
 8004e34:	d101      	bne.n	8004e3a <HAL_GPIO_EXTI_Callback+0x6a>
		// Button Limit MAX handler
		SW_LIMIT_MAX_handler();
 8004e36:	f7fe f82d 	bl	8002e94 <SW_LIMIT_MAX_handler>
	}

	if (GPIO_Pin == LIMIT_SWITCH_MIN_Pin) {
 8004e3a:	88fb      	ldrh	r3, [r7, #6]
 8004e3c:	2b04      	cmp	r3, #4
 8004e3e:	d101      	bne.n	8004e44 <HAL_GPIO_EXTI_Callback+0x74>
		// Button Limit MIN handler
		SW_LIMIT_MIN_handler();
 8004e40:	f7fe f834 	bl	8002eac <SW_LIMIT_MIN_handler>
	}

}
 8004e44:	bf00      	nop
 8004e46:	3708      	adds	r7, #8
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}
 8004e4c:	2000047c 	.word	0x2000047c

08004e50 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b082      	sub	sp, #8
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == hadc1.Instance)	{
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	4b0d      	ldr	r3, [pc, #52]	; (8004e94 <HAL_ADC_ConvCpltCallback+0x44>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	429a      	cmp	r2, r3
 8004e62:	d112      	bne.n	8004e8a <HAL_ADC_ConvCpltCallback+0x3a>
		tmpadc += HAL_ADC_GetValue(hadc);
 8004e64:	6878      	ldr	r0, [r7, #4]
 8004e66:	f001 ff03 	bl	8006c70 <HAL_ADC_GetValue>
 8004e6a:	4602      	mov	r2, r0
 8004e6c:	4b0a      	ldr	r3, [pc, #40]	; (8004e98 <HAL_ADC_ConvCpltCallback+0x48>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4413      	add	r3, r2
 8004e72:	4a09      	ldr	r2, [pc, #36]	; (8004e98 <HAL_ADC_ConvCpltCallback+0x48>)
 8004e74:	6013      	str	r3, [r2, #0]
		adccount++;
 8004e76:	4b09      	ldr	r3, [pc, #36]	; (8004e9c <HAL_ADC_ConvCpltCallback+0x4c>)
 8004e78:	881b      	ldrh	r3, [r3, #0]
 8004e7a:	b29b      	uxth	r3, r3
 8004e7c:	3301      	adds	r3, #1
 8004e7e:	b29a      	uxth	r2, r3
 8004e80:	4b06      	ldr	r3, [pc, #24]	; (8004e9c <HAL_ADC_ConvCpltCallback+0x4c>)
 8004e82:	801a      	strh	r2, [r3, #0]
		currentConvert(&tmpadc);
 8004e84:	4804      	ldr	r0, [pc, #16]	; (8004e98 <HAL_ADC_ConvCpltCallback+0x48>)
 8004e86:	f000 fa03 	bl	8005290 <currentConvert>
	}
}
 8004e8a:	bf00      	nop
 8004e8c:	3708      	adds	r7, #8
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}
 8004e92:	bf00      	nop
 8004e94:	20001ef4 	.word	0x20001ef4
 8004e98:	2000354c 	.word	0x2000354c
 8004e9c:	20003550 	.word	0x20003550

08004ea0 <setStationMode>:
void setStationMode(Station_Mode_t mode)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b083      	sub	sp, #12
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	71fb      	strb	r3, [r7, #7]
	myStation.StMODE = mode;
 8004eaa:	4a04      	ldr	r2, [pc, #16]	; (8004ebc <setStationMode+0x1c>)
 8004eac:	79fb      	ldrb	r3, [r7, #7]
 8004eae:	7013      	strb	r3, [r2, #0]
}
 8004eb0:	bf00      	nop
 8004eb2:	370c      	adds	r7, #12
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bc80      	pop	{r7}
 8004eb8:	4770      	bx	lr
 8004eba:	bf00      	nop
 8004ebc:	2000047c 	.word	0x2000047c

08004ec0 <checkStationMode>:

Station_Mode_t checkStationMode()
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	af00      	add	r7, sp, #0
	return myStation.StMODE;
 8004ec4:	4b02      	ldr	r3, [pc, #8]	; (8004ed0 <checkStationMode+0x10>)
 8004ec6:	781b      	ldrb	r3, [r3, #0]
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bc80      	pop	{r7}
 8004ece:	4770      	bx	lr
 8004ed0:	2000047c 	.word	0x2000047c

08004ed4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004ed4:	b5b0      	push	{r4, r5, r7, lr}
 8004ed6:	f5ad 7d08 	sub.w	sp, sp, #544	; 0x220
 8004eda:	af1a      	add	r7, sp, #104	; 0x68
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004edc:	f001 fcb4 	bl	8006848 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004ee0:	f000 f97a 	bl	80051d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004ee4:	f7ff fd74 	bl	80049d0 <MX_GPIO_Init>
  MX_DMA_Init();
 8004ee8:	f7ff fcf2 	bl	80048d0 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8004eec:	f000 fbf8 	bl	80056e0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8004ef0:	f000 fc20 	bl	8005734 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8004ef4:	f7ff fe34 	bl	8004b60 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8004ef8:	f000 fc46 	bl	8005788 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8004efc:	f000 fb82 	bl	8005604 <MX_TIM1_Init>
  MX_ADC1_Init();
 8004f00:	f7ff fc38 	bl	8004774 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  SSnode_list =list_create();
 8004f04:	f7ff feca 	bl	8004c9c <list_create>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	4aa1      	ldr	r2, [pc, #644]	; (8005190 <main+0x2bc>)
 8004f0c:	6013      	str	r3, [r2, #0]
  /* For Emulator only */
  uint8_t Sensorcalibvalue1 [101];
  for (uint8_t i =0 ; i < 100 ; i++)	{
 8004f0e:	2300      	movs	r3, #0
 8004f10:	f887 31b7 	strb.w	r3, [r7, #439]	; 0x1b7
 8004f14:	e01a      	b.n	8004f4c <main+0x78>
	  Sensorcalibvalue1[i] = rand() % 255 ;
 8004f16:	f006 fafd 	bl	800b514 <rand>
 8004f1a:	4602      	mov	r2, r0
 8004f1c:	4b9d      	ldr	r3, [pc, #628]	; (8005194 <main+0x2c0>)
 8004f1e:	fb83 1302 	smull	r1, r3, r3, r2
 8004f22:	4413      	add	r3, r2
 8004f24:	11d9      	asrs	r1, r3, #7
 8004f26:	17d3      	asrs	r3, r2, #31
 8004f28:	1ac9      	subs	r1, r1, r3
 8004f2a:	460b      	mov	r3, r1
 8004f2c:	021b      	lsls	r3, r3, #8
 8004f2e:	1a5b      	subs	r3, r3, r1
 8004f30:	1ad1      	subs	r1, r2, r3
 8004f32:	f897 31b7 	ldrb.w	r3, [r7, #439]	; 0x1b7
 8004f36:	b2ca      	uxtb	r2, r1
 8004f38:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004f3c:	443b      	add	r3, r7
 8004f3e:	f803 2c68 	strb.w	r2, [r3, #-104]
  for (uint8_t i =0 ; i < 100 ; i++)	{
 8004f42:	f897 31b7 	ldrb.w	r3, [r7, #439]	; 0x1b7
 8004f46:	3301      	adds	r3, #1
 8004f48:	f887 31b7 	strb.w	r3, [r7, #439]	; 0x1b7
 8004f4c:	f897 31b7 	ldrb.w	r3, [r7, #439]	; 0x1b7
 8004f50:	2b63      	cmp	r3, #99	; 0x63
 8004f52:	d9e0      	bls.n	8004f16 <main+0x42>
  }
  SensorNode_t firstSensornode = {0x51, 0, V_p, 10, SENSOR_ACTIVE , 1 };
 8004f54:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004f58:	2272      	movs	r2, #114	; 0x72
 8004f5a:	2100      	movs	r1, #0
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	f005 ff83 	bl	800ae68 <memset>
 8004f62:	2351      	movs	r3, #81	; 0x51
 8004f64:	f887 30dc 	strb.w	r3, [r7, #220]	; 0xdc
 8004f68:	2301      	movs	r3, #1
 8004f6a:	f887 30e0 	strb.w	r3, [r7, #224]	; 0xe0
 8004f6e:	230a      	movs	r3, #10
 8004f70:	f8a7 30e2 	strh.w	r3, [r7, #226]	; 0xe2
 8004f74:	2301      	movs	r3, #1
 8004f76:	f887 30e4 	strb.w	r3, [r7, #228]	; 0xe4
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	f887 30e5 	strb.w	r3, [r7, #229]	; 0xe5
  memcpy(firstSensornode.dataCalibBuffer, Sensorcalibvalue1, 100);
 8004f80:	f507 71a8 	add.w	r1, r7, #336	; 0x150
 8004f84:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004f88:	330c      	adds	r3, #12
 8004f8a:	2264      	movs	r2, #100	; 0x64
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	f005 ff5d 	bl	800ae4c <memcpy>
  list_append(SSnode_list, firstSensornode);
 8004f92:	4b7f      	ldr	r3, [pc, #508]	; (8005190 <main+0x2bc>)
 8004f94:	681c      	ldr	r4, [r3, #0]
 8004f96:	4668      	mov	r0, sp
 8004f98:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8004f9c:	2266      	movs	r2, #102	; 0x66
 8004f9e:	4619      	mov	r1, r3
 8004fa0:	f005 ff54 	bl	800ae4c <memcpy>
 8004fa4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004fa8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004faa:	4620      	mov	r0, r4
 8004fac:	f7ff feac 	bl	8004d08 <list_append>

  uint8_t Sensorcalibvalue2 [101];
  for (uint8_t i =0 ; i < 100 ; i++)	{
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	f887 31b6 	strb.w	r3, [r7, #438]	; 0x1b6
 8004fb6:	e01a      	b.n	8004fee <main+0x11a>
	  Sensorcalibvalue2[i] = rand() % 255 ;
 8004fb8:	f006 faac 	bl	800b514 <rand>
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	4b75      	ldr	r3, [pc, #468]	; (8005194 <main+0x2c0>)
 8004fc0:	fb83 1302 	smull	r1, r3, r3, r2
 8004fc4:	4413      	add	r3, r2
 8004fc6:	11d9      	asrs	r1, r3, #7
 8004fc8:	17d3      	asrs	r3, r2, #31
 8004fca:	1ac9      	subs	r1, r1, r3
 8004fcc:	460b      	mov	r3, r1
 8004fce:	021b      	lsls	r3, r3, #8
 8004fd0:	1a5b      	subs	r3, r3, r1
 8004fd2:	1ad1      	subs	r1, r2, r3
 8004fd4:	f897 31b6 	ldrb.w	r3, [r7, #438]	; 0x1b6
 8004fd8:	b2c9      	uxtb	r1, r1
 8004fda:	f507 72dc 	add.w	r2, r7, #440	; 0x1b8
 8004fde:	f5a2 72a2 	sub.w	r2, r2, #324	; 0x144
 8004fe2:	54d1      	strb	r1, [r2, r3]
  for (uint8_t i =0 ; i < 100 ; i++)	{
 8004fe4:	f897 31b6 	ldrb.w	r3, [r7, #438]	; 0x1b6
 8004fe8:	3301      	adds	r3, #1
 8004fea:	f887 31b6 	strb.w	r3, [r7, #438]	; 0x1b6
 8004fee:	f897 31b6 	ldrb.w	r3, [r7, #438]	; 0x1b6
 8004ff2:	2b63      	cmp	r3, #99	; 0x63
 8004ff4:	d9e0      	bls.n	8004fb8 <main+0xe4>
  }
  SensorNode_t secondSensornode = {0x52, 0, V_p, 10, SENSOR_ACTIVE , 1};
 8004ff6:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8004ffa:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004ffe:	4618      	mov	r0, r3
 8005000:	2372      	movs	r3, #114	; 0x72
 8005002:	461a      	mov	r2, r3
 8005004:	2100      	movs	r1, #0
 8005006:	f005 ff2f 	bl	800ae68 <memset>
 800500a:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800500e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8005012:	2252      	movs	r2, #82	; 0x52
 8005014:	701a      	strb	r2, [r3, #0]
 8005016:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800501a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800501e:	2201      	movs	r2, #1
 8005020:	711a      	strb	r2, [r3, #4]
 8005022:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8005026:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800502a:	220a      	movs	r2, #10
 800502c:	80da      	strh	r2, [r3, #6]
 800502e:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8005032:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8005036:	2201      	movs	r2, #1
 8005038:	721a      	strb	r2, [r3, #8]
 800503a:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800503e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8005042:	2201      	movs	r2, #1
 8005044:	725a      	strb	r2, [r3, #9]
  memcpy(secondSensornode.dataCalibBuffer, Sensorcalibvalue2, 100);
 8005046:	f107 0174 	add.w	r1, r7, #116	; 0x74
 800504a:	463b      	mov	r3, r7
 800504c:	330c      	adds	r3, #12
 800504e:	2264      	movs	r2, #100	; 0x64
 8005050:	4618      	mov	r0, r3
 8005052:	f005 fefb 	bl	800ae4c <memcpy>
  list_append(SSnode_list, secondSensornode);
 8005056:	4b4e      	ldr	r3, [pc, #312]	; (8005190 <main+0x2bc>)
 8005058:	681d      	ldr	r5, [r3, #0]
 800505a:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800505e:	f5a3 74dc 	sub.w	r4, r3, #440	; 0x1b8
 8005062:	4668      	mov	r0, sp
 8005064:	f104 030c 	add.w	r3, r4, #12
 8005068:	2266      	movs	r2, #102	; 0x66
 800506a:	4619      	mov	r1, r3
 800506c:	f005 feee 	bl	800ae4c <memcpy>
 8005070:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8005074:	4628      	mov	r0, r5
 8005076:	f7ff fe47 	bl	8004d08 <list_append>
  /**********************************************************************/

  myStation.ssNode_list = SSnode_list;
 800507a:	4b45      	ldr	r3, [pc, #276]	; (8005190 <main+0x2bc>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a46      	ldr	r2, [pc, #280]	; (8005198 <main+0x2c4>)
 8005080:	60d3      	str	r3, [r2, #12]

  // Get station ID from flash
  myStation.stID = (uint8_t)Flash_Read_NUM(FLASH_PAGE_127);
 8005082:	4846      	ldr	r0, [pc, #280]	; (800519c <main+0x2c8>)
 8005084:	f7ff fc8d 	bl	80049a2 <Flash_Read_NUM>
 8005088:	4603      	mov	r3, r0
 800508a:	4618      	mov	r0, r3
 800508c:	f7fb f870 	bl	8000170 <__aeabi_f2uiz>
 8005090:	4603      	mov	r3, r0
 8005092:	b2da      	uxtb	r2, r3
 8005094:	4b40      	ldr	r3, [pc, #256]	; (8005198 <main+0x2c4>)
 8005096:	705a      	strb	r2, [r3, #1]

	mySIM.mqttServer.host = "tcp://broker.hivemq.com";
 8005098:	4b41      	ldr	r3, [pc, #260]	; (80051a0 <main+0x2cc>)
 800509a:	4a42      	ldr	r2, [pc, #264]	; (80051a4 <main+0x2d0>)
 800509c:	60da      	str	r2, [r3, #12]
	mySIM.mqttServer.port = 1883;
 800509e:	4b40      	ldr	r3, [pc, #256]	; (80051a0 <main+0x2cc>)
 80050a0:	f240 725b 	movw	r2, #1883	; 0x75b
 80050a4:	831a      	strh	r2, [r3, #24]
	mySIM.mqttServer.willtopic = "unnormal_disconnect";
 80050a6:	4b3e      	ldr	r3, [pc, #248]	; (80051a0 <main+0x2cc>)
 80050a8:	4a3f      	ldr	r2, [pc, #252]	; (80051a8 <main+0x2d4>)
 80050aa:	611a      	str	r2, [r3, #16]
	mySIM.mqttServer.willmsg = (uint8_t*)malloc(sizeof(myStation.stID));
 80050ac:	2001      	movs	r0, #1
 80050ae:	f005 fead 	bl	800ae0c <malloc>
 80050b2:	4603      	mov	r3, r0
 80050b4:	461a      	mov	r2, r3
 80050b6:	4b3a      	ldr	r3, [pc, #232]	; (80051a0 <main+0x2cc>)
 80050b8:	615a      	str	r2, [r3, #20]
	sprintf((char*)mySIM.mqttServer.willmsg,"%d",myStation.stID);
 80050ba:	4b39      	ldr	r3, [pc, #228]	; (80051a0 <main+0x2cc>)
 80050bc:	695b      	ldr	r3, [r3, #20]
 80050be:	4a36      	ldr	r2, [pc, #216]	; (8005198 <main+0x2c4>)
 80050c0:	7852      	ldrb	r2, [r2, #1]
 80050c2:	493a      	ldr	r1, [pc, #232]	; (80051ac <main+0x2d8>)
 80050c4:	4618      	mov	r0, r3
 80050c6:	f006 fa73 	bl	800b5b0 <siprintf>
	mySIM.mqttClient.keepAliveInterval = 10;
 80050ca:	4b35      	ldr	r3, [pc, #212]	; (80051a0 <main+0x2cc>)
 80050cc:	220a      	movs	r2, #10
 80050ce:	851a      	strh	r2, [r3, #40]	; 0x28
	mySIM.mqttClient.clientID = (char*)malloc(sizeof(myStation.stID));
 80050d0:	2001      	movs	r0, #1
 80050d2:	f005 fe9b 	bl	800ae0c <malloc>
 80050d6:	4603      	mov	r3, r0
 80050d8:	461a      	mov	r2, r3
 80050da:	4b31      	ldr	r3, [pc, #196]	; (80051a0 <main+0x2cc>)
 80050dc:	625a      	str	r2, [r3, #36]	; 0x24
	sprintf((char*)mySIM.mqttClient.clientID,"%d",myStation.stID);
 80050de:	4b30      	ldr	r3, [pc, #192]	; (80051a0 <main+0x2cc>)
 80050e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e2:	4a2d      	ldr	r2, [pc, #180]	; (8005198 <main+0x2c4>)
 80050e4:	7852      	ldrb	r2, [r2, #1]
 80050e6:	4931      	ldr	r1, [pc, #196]	; (80051ac <main+0x2d8>)
 80050e8:	4618      	mov	r0, r3
 80050ea:	f006 fa61 	bl	800b5b0 <siprintf>
	mySIM.mqttReceive.qos =1;
 80050ee:	4b2c      	ldr	r3, [pc, #176]	; (80051a0 <main+0x2cc>)
 80050f0:	2201      	movs	r2, #1
 80050f2:	631a      	str	r2, [r3, #48]	; 0x30
	mySIM.mqttServer.connect=0;
 80050f4:	4b2a      	ldr	r3, [pc, #168]	; (80051a0 <main+0x2cc>)
 80050f6:	2200      	movs	r2, #0
 80050f8:	769a      	strb	r2, [r3, #26]

	mySIM.sms = mySMS;
 80050fa:	4b29      	ldr	r3, [pc, #164]	; (80051a0 <main+0x2cc>)
 80050fc:	4a2c      	ldr	r2, [pc, #176]	; (80051b0 <main+0x2dc>)
 80050fe:	f203 43bc 	addw	r3, r3, #1212	; 0x4bc
 8005102:	4611      	mov	r1, r2
 8005104:	f44f 6208 	mov.w	r2, #2176	; 0x880
 8005108:	4618      	mov	r0, r3
 800510a:	f005 fe9f 	bl	800ae4c <memcpy>

	// ADC
	HAL_ADC_Start_IT(&hadc1);
 800510e:	4829      	ldr	r0, [pc, #164]	; (80051b4 <main+0x2e0>)
 8005110:	f001 fcf8 	bl	8006b04 <HAL_ADC_Start_IT>


	initTask(&myStation);
 8005114:	4820      	ldr	r0, [pc, #128]	; (8005198 <main+0x2c4>)
 8005116:	f7ff f90f 	bl	8004338 <initTask>

	// MBA and Step motor
	initApp_MBA_stepmor();
 800511a:	f7fb fb15 	bl	8000748 <initApp_MBA_stepmor>
	// Lora
//	initLora(&huart2, &hdma_usart2_rx);
//	initmyLora(&huart3, &hdma_usart3_rx, &myStation);
	// GPS
	myGPS.getFlag = 0;
 800511e:	4a26      	ldr	r2, [pc, #152]	; (80051b8 <main+0x2e4>)
 8005120:	79d3      	ldrb	r3, [r2, #7]
 8005122:	f36f 0300 	bfc	r3, #0, #1
 8005126:	71d3      	strb	r3, [r2, #7]
	initGPS(&myStation, &myRTC);
 8005128:	4924      	ldr	r1, [pc, #144]	; (80051bc <main+0x2e8>)
 800512a:	481b      	ldr	r0, [pc, #108]	; (8005198 <main+0x2c4>)
 800512c:	f7fb fd7a 	bl	8000c24 <initGPS>

	initSIM(&huart1, &hdma_usart1_rx, &mySIM);
 8005130:	4a1b      	ldr	r2, [pc, #108]	; (80051a0 <main+0x2cc>)
 8005132:	4923      	ldr	r1, [pc, #140]	; (80051c0 <main+0x2ec>)
 8005134:	4823      	ldr	r0, [pc, #140]	; (80051c4 <main+0x2f0>)
 8005136:	f7fc ffad 	bl	8002094 <initSIM>

	// Init Serial log
//	init_Serial_log(&huart2);

	// Init MQTT app
	initApp_MQTT(&myStation, &mySIM);
 800513a:	4919      	ldr	r1, [pc, #100]	; (80051a0 <main+0x2cc>)
 800513c:	4816      	ldr	r0, [pc, #88]	; (8005198 <main+0x2c4>)
 800513e:	f7fb fb95 	bl	800086c <initApp_MQTT>

	initApp_MCU(&myStation, &mySIM);
 8005142:	4917      	ldr	r1, [pc, #92]	; (80051a0 <main+0x2cc>)
 8005144:	4814      	ldr	r0, [pc, #80]	; (8005198 <main+0x2c4>)
 8005146:	f7fb fb29 	bl	800079c <initApp_MCU>

	initApp_SMS(&mySIM.sms);
 800514a:	481f      	ldr	r0, [pc, #124]	; (80051c8 <main+0x2f4>)
 800514c:	f7fb fd30 	bl	8000bb0 <initApp_SMS>

	init_App_Serial(&myStation);
 8005150:	4811      	ldr	r0, [pc, #68]	; (8005198 <main+0x2c4>)
 8005152:	f7fb fd3b 	bl	8000bcc <init_App_Serial>

	// Init RTC module (DS3231)
	DS3231_Init(&hi2c1);
 8005156:	481d      	ldr	r0, [pc, #116]	; (80051cc <main+0x2f8>)
 8005158:	f7fd feb4 	bl	8002ec4 <DS3231_Init>

	LCD_Init();
 800515c:	f000 fdee 	bl	8005d3c <LCD_Init>

	initButton(&myDisplayMode, myStation.ssNode_list, &myStation.stepPosition);
 8005160:	4b0d      	ldr	r3, [pc, #52]	; (8005198 <main+0x2c4>)
 8005162:	68db      	ldr	r3, [r3, #12]
 8005164:	4a1a      	ldr	r2, [pc, #104]	; (80051d0 <main+0x2fc>)
 8005166:	4619      	mov	r1, r3
 8005168:	481a      	ldr	r0, [pc, #104]	; (80051d4 <main+0x300>)
 800516a:	f7fd fca5 	bl	8002ab8 <initButton>


	initApp_Display(&myDisplayMode, &myRTC, &myStation);
 800516e:	4a0a      	ldr	r2, [pc, #40]	; (8005198 <main+0x2c4>)
 8005170:	4912      	ldr	r1, [pc, #72]	; (80051bc <main+0x2e8>)
 8005172:	4818      	ldr	r0, [pc, #96]	; (80051d4 <main+0x300>)
 8005174:	f7fb f9d8 	bl	8000528 <initApp_Display>
//	  Serial_log_testOperation();
//	  SIM_checkOperation();
//	  MQTT_testReceive();
//	  LCD_GotoXY(1, 1);
//	  LCD_Print("hello");
	  processApp_MCU();
 8005178:	f7fb fb24 	bl	80007c4 <processApp_MCU>
	  processApp_MQTT();
 800517c:	f7fb fbc8 	bl	8000910 <processApp_MQTT>
	  processingApp_display();
 8005180:	f7fb fa4c 	bl	800061c <processingApp_display>
	  processingApp_MBA_stepmor();
 8005184:	f7fb fae6 	bl	8000754 <processingApp_MBA_stepmor>
//	  DS3231_GetTime(&myRTC);

//	  testSMS();
//	  myStation.getGPStimeflag = 1;
//	  HAL_GPIO_TogglePin(MBA_CONTACTOR_GPIO_Port, MBA_CONTACTOR_Pin);
	  HAL_Delay(200);
 8005188:	20c8      	movs	r0, #200	; 0xc8
 800518a:	f001 fbbf 	bl	800690c <HAL_Delay>
	  processApp_MCU();
 800518e:	e7f3      	b.n	8005178 <main+0x2a4>
 8005190:	20003534 	.word	0x20003534
 8005194:	80808081 	.word	0x80808081
 8005198:	2000047c 	.word	0x2000047c
 800519c:	0801fc00 	.word	0x0801fc00
 80051a0:	20001f78 	.word	0x20001f78
 80051a4:	0800e0f8 	.word	0x0800e0f8
 80051a8:	0800e110 	.word	0x0800e110
 80051ac:	0800e124 	.word	0x0800e124
 80051b0:	20002cb4 	.word	0x20002cb4
 80051b4:	20001ef4 	.word	0x20001ef4
 80051b8:	20003540 	.word	0x20003540
 80051bc:	20003538 	.word	0x20003538
 80051c0:	2000367c 	.word	0x2000367c
 80051c4:	200035a4 	.word	0x200035a4
 80051c8:	20002434 	.word	0x20002434
 80051cc:	20001f24 	.word	0x20001f24
 80051d0:	20000484 	.word	0x20000484
 80051d4:	20003548 	.word	0x20003548

080051d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b094      	sub	sp, #80	; 0x50
 80051dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80051de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80051e2:	2228      	movs	r2, #40	; 0x28
 80051e4:	2100      	movs	r1, #0
 80051e6:	4618      	mov	r0, r3
 80051e8:	f005 fe3e 	bl	800ae68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80051ec:	f107 0314 	add.w	r3, r7, #20
 80051f0:	2200      	movs	r2, #0
 80051f2:	601a      	str	r2, [r3, #0]
 80051f4:	605a      	str	r2, [r3, #4]
 80051f6:	609a      	str	r2, [r3, #8]
 80051f8:	60da      	str	r2, [r3, #12]
 80051fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80051fc:	1d3b      	adds	r3, r7, #4
 80051fe:	2200      	movs	r2, #0
 8005200:	601a      	str	r2, [r3, #0]
 8005202:	605a      	str	r2, [r3, #4]
 8005204:	609a      	str	r2, [r3, #8]
 8005206:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005208:	2301      	movs	r3, #1
 800520a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800520c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005210:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8005212:	2300      	movs	r3, #0
 8005214:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005216:	2301      	movs	r3, #1
 8005218:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800521a:	2302      	movs	r3, #2
 800521c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800521e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005222:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8005224:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8005228:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800522a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800522e:	4618      	mov	r0, r3
 8005230:	f003 fd40 	bl	8008cb4 <HAL_RCC_OscConfig>
 8005234:	4603      	mov	r3, r0
 8005236:	2b00      	cmp	r3, #0
 8005238:	d001      	beq.n	800523e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800523a:	f000 f855 	bl	80052e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800523e:	230f      	movs	r3, #15
 8005240:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005242:	2302      	movs	r3, #2
 8005244:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005246:	2300      	movs	r3, #0
 8005248:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800524a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800524e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005250:	2300      	movs	r3, #0
 8005252:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8005254:	f107 0314 	add.w	r3, r7, #20
 8005258:	2102      	movs	r1, #2
 800525a:	4618      	mov	r0, r3
 800525c:	f003 ffac 	bl	80091b8 <HAL_RCC_ClockConfig>
 8005260:	4603      	mov	r3, r0
 8005262:	2b00      	cmp	r3, #0
 8005264:	d001      	beq.n	800526a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8005266:	f000 f83f 	bl	80052e8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800526a:	2302      	movs	r3, #2
 800526c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800526e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005272:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005274:	1d3b      	adds	r3, r7, #4
 8005276:	4618      	mov	r0, r3
 8005278:	f004 f92c 	bl	80094d4 <HAL_RCCEx_PeriphCLKConfig>
 800527c:	4603      	mov	r3, r0
 800527e:	2b00      	cmp	r3, #0
 8005280:	d001      	beq.n	8005286 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8005282:	f000 f831 	bl	80052e8 <Error_Handler>
  }
}
 8005286:	bf00      	nop
 8005288:	3750      	adds	r7, #80	; 0x50
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}
	...

08005290 <currentConvert>:

/* USER CODE BEGIN 4 */

static void currentConvert(uint32_t volatile *adcval)
{
 8005290:	b480      	push	{r7}
 8005292:	b083      	sub	sp, #12
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
	if (adccount == 1000)	{
 8005298:	4b10      	ldr	r3, [pc, #64]	; (80052dc <currentConvert+0x4c>)
 800529a:	881b      	ldrh	r3, [r3, #0]
 800529c:	b29b      	uxth	r3, r3
 800529e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80052a2:	d116      	bne.n	80052d2 <currentConvert+0x42>
		myStation.stCurrent = (uint16_t)((*adcval)*3/4095) + 50;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	4613      	mov	r3, r2
 80052aa:	005b      	lsls	r3, r3, #1
 80052ac:	441a      	add	r2, r3
 80052ae:	4b0c      	ldr	r3, [pc, #48]	; (80052e0 <currentConvert+0x50>)
 80052b0:	fba3 1302 	umull	r1, r3, r3, r2
 80052b4:	1ad2      	subs	r2, r2, r3
 80052b6:	0852      	lsrs	r2, r2, #1
 80052b8:	4413      	add	r3, r2
 80052ba:	0adb      	lsrs	r3, r3, #11
 80052bc:	b29b      	uxth	r3, r3
 80052be:	3332      	adds	r3, #50	; 0x32
 80052c0:	b29a      	uxth	r2, r3
 80052c2:	4b08      	ldr	r3, [pc, #32]	; (80052e4 <currentConvert+0x54>)
 80052c4:	805a      	strh	r2, [r3, #2]
		*adcval = 0;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2200      	movs	r2, #0
 80052ca:	601a      	str	r2, [r3, #0]
		adccount = 0;
 80052cc:	4b03      	ldr	r3, [pc, #12]	; (80052dc <currentConvert+0x4c>)
 80052ce:	2200      	movs	r2, #0
 80052d0:	801a      	strh	r2, [r3, #0]
	}
}
 80052d2:	bf00      	nop
 80052d4:	370c      	adds	r7, #12
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bc80      	pop	{r7}
 80052da:	4770      	bx	lr
 80052dc:	20003550 	.word	0x20003550
 80052e0:	00100101 	.word	0x00100101
 80052e4:	2000047c 	.word	0x2000047c

080052e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80052e8:	b480      	push	{r7}
 80052ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80052ec:	b672      	cpsid	i
}
 80052ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80052f0:	e7fe      	b.n	80052f0 <Error_Handler+0x8>
	...

080052f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b085      	sub	sp, #20
 80052f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80052fa:	4b15      	ldr	r3, [pc, #84]	; (8005350 <HAL_MspInit+0x5c>)
 80052fc:	699b      	ldr	r3, [r3, #24]
 80052fe:	4a14      	ldr	r2, [pc, #80]	; (8005350 <HAL_MspInit+0x5c>)
 8005300:	f043 0301 	orr.w	r3, r3, #1
 8005304:	6193      	str	r3, [r2, #24]
 8005306:	4b12      	ldr	r3, [pc, #72]	; (8005350 <HAL_MspInit+0x5c>)
 8005308:	699b      	ldr	r3, [r3, #24]
 800530a:	f003 0301 	and.w	r3, r3, #1
 800530e:	60bb      	str	r3, [r7, #8]
 8005310:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005312:	4b0f      	ldr	r3, [pc, #60]	; (8005350 <HAL_MspInit+0x5c>)
 8005314:	69db      	ldr	r3, [r3, #28]
 8005316:	4a0e      	ldr	r2, [pc, #56]	; (8005350 <HAL_MspInit+0x5c>)
 8005318:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800531c:	61d3      	str	r3, [r2, #28]
 800531e:	4b0c      	ldr	r3, [pc, #48]	; (8005350 <HAL_MspInit+0x5c>)
 8005320:	69db      	ldr	r3, [r3, #28]
 8005322:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005326:	607b      	str	r3, [r7, #4]
 8005328:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800532a:	4b0a      	ldr	r3, [pc, #40]	; (8005354 <HAL_MspInit+0x60>)
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	60fb      	str	r3, [r7, #12]
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8005336:	60fb      	str	r3, [r7, #12]
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800533e:	60fb      	str	r3, [r7, #12]
 8005340:	4a04      	ldr	r2, [pc, #16]	; (8005354 <HAL_MspInit+0x60>)
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005346:	bf00      	nop
 8005348:	3714      	adds	r7, #20
 800534a:	46bd      	mov	sp, r7
 800534c:	bc80      	pop	{r7}
 800534e:	4770      	bx	lr
 8005350:	40021000 	.word	0x40021000
 8005354:	40010000 	.word	0x40010000

08005358 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005358:	b480      	push	{r7}
 800535a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800535c:	e7fe      	b.n	800535c <NMI_Handler+0x4>

0800535e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800535e:	b480      	push	{r7}
 8005360:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005362:	e7fe      	b.n	8005362 <HardFault_Handler+0x4>

08005364 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005364:	b480      	push	{r7}
 8005366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005368:	e7fe      	b.n	8005368 <MemManage_Handler+0x4>

0800536a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800536a:	b480      	push	{r7}
 800536c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800536e:	e7fe      	b.n	800536e <BusFault_Handler+0x4>

08005370 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005370:	b480      	push	{r7}
 8005372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005374:	e7fe      	b.n	8005374 <UsageFault_Handler+0x4>

08005376 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005376:	b480      	push	{r7}
 8005378:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800537a:	bf00      	nop
 800537c:	46bd      	mov	sp, r7
 800537e:	bc80      	pop	{r7}
 8005380:	4770      	bx	lr

08005382 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005382:	b480      	push	{r7}
 8005384:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005386:	bf00      	nop
 8005388:	46bd      	mov	sp, r7
 800538a:	bc80      	pop	{r7}
 800538c:	4770      	bx	lr

0800538e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800538e:	b480      	push	{r7}
 8005390:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005392:	bf00      	nop
 8005394:	46bd      	mov	sp, r7
 8005396:	bc80      	pop	{r7}
 8005398:	4770      	bx	lr

0800539a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800539a:	b580      	push	{r7, lr}
 800539c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800539e:	f001 fa99 	bl	80068d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80053a2:	bf00      	nop
 80053a4:	bd80      	pop	{r7, pc}

080053a6 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80053a6:	b580      	push	{r7, lr}
 80053a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RTC_ALARM_TRIGGER_Pin);
 80053aa:	2001      	movs	r0, #1
 80053ac:	f002 fc36 	bl	8007c1c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80053b0:	bf00      	nop
 80053b2:	bd80      	pop	{r7, pc}

080053b4 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80053b8:	4802      	ldr	r0, [pc, #8]	; (80053c4 <DMA1_Channel3_IRQHandler+0x10>)
 80053ba:	f002 f945 	bl	8007648 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80053be:	bf00      	nop
 80053c0:	bd80      	pop	{r7, pc}
 80053c2:	bf00      	nop
 80053c4:	20003704 	.word	0x20003704

080053c8 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80053cc:	4802      	ldr	r0, [pc, #8]	; (80053d8 <DMA1_Channel5_IRQHandler+0x10>)
 80053ce:	f002 f93b 	bl	8007648 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80053d2:	bf00      	nop
 80053d4:	bd80      	pop	{r7, pc}
 80053d6:	bf00      	nop
 80053d8:	2000367c 	.word	0x2000367c

080053dc <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80053e0:	4802      	ldr	r0, [pc, #8]	; (80053ec <DMA1_Channel6_IRQHandler+0x10>)
 80053e2:	f002 f931 	bl	8007648 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80053e6:	bf00      	nop
 80053e8:	bd80      	pop	{r7, pc}
 80053ea:	bf00      	nop
 80053ec:	200036c0 	.word	0x200036c0

080053f0 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80053f4:	4802      	ldr	r0, [pc, #8]	; (8005400 <ADC1_2_IRQHandler+0x10>)
 80053f6:	f001 fc47 	bl	8006c88 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80053fa:	bf00      	nop
 80053fc:	bd80      	pop	{r7, pc}
 80053fe:	bf00      	nop
 8005400:	20001ef4 	.word	0x20001ef4

08005404 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LIMIT_SWITCH_MAX_Pin);
 8005408:	2020      	movs	r0, #32
 800540a:	f002 fc07 	bl	8007c1c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_DOWN_Pin);
 800540e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005412:	f002 fc03 	bl	8007c1c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_UP_Pin);
 8005416:	f44f 7000 	mov.w	r0, #512	; 0x200
 800541a:	f002 fbff 	bl	8007c1c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800541e:	bf00      	nop
 8005420:	bd80      	pop	{r7, pc}
	...

08005424 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005428:	4802      	ldr	r0, [pc, #8]	; (8005434 <USART1_IRQHandler+0x10>)
 800542a:	f004 fca5 	bl	8009d78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800542e:	bf00      	nop
 8005430:	bd80      	pop	{r7, pc}
 8005432:	bf00      	nop
 8005434:	200035a4 	.word	0x200035a4

08005438 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800543c:	4802      	ldr	r0, [pc, #8]	; (8005448 <USART2_IRQHandler+0x10>)
 800543e:	f004 fc9b 	bl	8009d78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005442:	bf00      	nop
 8005444:	bd80      	pop	{r7, pc}
 8005446:	bf00      	nop
 8005448:	200035ec 	.word	0x200035ec

0800544c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8005450:	4802      	ldr	r0, [pc, #8]	; (800545c <USART3_IRQHandler+0x10>)
 8005452:	f004 fc91 	bl	8009d78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8005456:	bf00      	nop
 8005458:	bd80      	pop	{r7, pc}
 800545a:	bf00      	nop
 800545c:	20003634 	.word	0x20003634

08005460 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_MENU_Pin);
 8005464:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8005468:	f002 fbd8 	bl	8007c1c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_OK_Pin);
 800546c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8005470:	f002 fbd4 	bl	8007c1c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8005474:	bf00      	nop
 8005476:	bd80      	pop	{r7, pc}

08005478 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005478:	b480      	push	{r7}
 800547a:	af00      	add	r7, sp, #0
	return 1;
 800547c:	2301      	movs	r3, #1
}
 800547e:	4618      	mov	r0, r3
 8005480:	46bd      	mov	sp, r7
 8005482:	bc80      	pop	{r7}
 8005484:	4770      	bx	lr

08005486 <_kill>:

int _kill(int pid, int sig)
{
 8005486:	b580      	push	{r7, lr}
 8005488:	b082      	sub	sp, #8
 800548a:	af00      	add	r7, sp, #0
 800548c:	6078      	str	r0, [r7, #4]
 800548e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8005490:	f005 fb82 	bl	800ab98 <__errno>
 8005494:	4603      	mov	r3, r0
 8005496:	2216      	movs	r2, #22
 8005498:	601a      	str	r2, [r3, #0]
	return -1;
 800549a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800549e:	4618      	mov	r0, r3
 80054a0:	3708      	adds	r7, #8
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}

080054a6 <_exit>:

void _exit (int status)
{
 80054a6:	b580      	push	{r7, lr}
 80054a8:	b082      	sub	sp, #8
 80054aa:	af00      	add	r7, sp, #0
 80054ac:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80054ae:	f04f 31ff 	mov.w	r1, #4294967295
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f7ff ffe7 	bl	8005486 <_kill>
	while (1) {}		/* Make sure we hang here */
 80054b8:	e7fe      	b.n	80054b8 <_exit+0x12>

080054ba <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80054ba:	b580      	push	{r7, lr}
 80054bc:	b086      	sub	sp, #24
 80054be:	af00      	add	r7, sp, #0
 80054c0:	60f8      	str	r0, [r7, #12]
 80054c2:	60b9      	str	r1, [r7, #8]
 80054c4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80054c6:	2300      	movs	r3, #0
 80054c8:	617b      	str	r3, [r7, #20]
 80054ca:	e00a      	b.n	80054e2 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80054cc:	f3af 8000 	nop.w
 80054d0:	4601      	mov	r1, r0
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	1c5a      	adds	r2, r3, #1
 80054d6:	60ba      	str	r2, [r7, #8]
 80054d8:	b2ca      	uxtb	r2, r1
 80054da:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	3301      	adds	r3, #1
 80054e0:	617b      	str	r3, [r7, #20]
 80054e2:	697a      	ldr	r2, [r7, #20]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	429a      	cmp	r2, r3
 80054e8:	dbf0      	blt.n	80054cc <_read+0x12>
	}

return len;
 80054ea:	687b      	ldr	r3, [r7, #4]
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	3718      	adds	r7, #24
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bd80      	pop	{r7, pc}

080054f4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b086      	sub	sp, #24
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	60f8      	str	r0, [r7, #12]
 80054fc:	60b9      	str	r1, [r7, #8]
 80054fe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005500:	2300      	movs	r3, #0
 8005502:	617b      	str	r3, [r7, #20]
 8005504:	e009      	b.n	800551a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	1c5a      	adds	r2, r3, #1
 800550a:	60ba      	str	r2, [r7, #8]
 800550c:	781b      	ldrb	r3, [r3, #0]
 800550e:	4618      	mov	r0, r3
 8005510:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	3301      	adds	r3, #1
 8005518:	617b      	str	r3, [r7, #20]
 800551a:	697a      	ldr	r2, [r7, #20]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	429a      	cmp	r2, r3
 8005520:	dbf1      	blt.n	8005506 <_write+0x12>
	}
	return len;
 8005522:	687b      	ldr	r3, [r7, #4]
}
 8005524:	4618      	mov	r0, r3
 8005526:	3718      	adds	r7, #24
 8005528:	46bd      	mov	sp, r7
 800552a:	bd80      	pop	{r7, pc}

0800552c <_close>:

int _close(int file)
{
 800552c:	b480      	push	{r7}
 800552e:	b083      	sub	sp, #12
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
	return -1;
 8005534:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005538:	4618      	mov	r0, r3
 800553a:	370c      	adds	r7, #12
 800553c:	46bd      	mov	sp, r7
 800553e:	bc80      	pop	{r7}
 8005540:	4770      	bx	lr

08005542 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005542:	b480      	push	{r7}
 8005544:	b083      	sub	sp, #12
 8005546:	af00      	add	r7, sp, #0
 8005548:	6078      	str	r0, [r7, #4]
 800554a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005552:	605a      	str	r2, [r3, #4]
	return 0;
 8005554:	2300      	movs	r3, #0
}
 8005556:	4618      	mov	r0, r3
 8005558:	370c      	adds	r7, #12
 800555a:	46bd      	mov	sp, r7
 800555c:	bc80      	pop	{r7}
 800555e:	4770      	bx	lr

08005560 <_isatty>:

int _isatty(int file)
{
 8005560:	b480      	push	{r7}
 8005562:	b083      	sub	sp, #12
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
	return 1;
 8005568:	2301      	movs	r3, #1
}
 800556a:	4618      	mov	r0, r3
 800556c:	370c      	adds	r7, #12
 800556e:	46bd      	mov	sp, r7
 8005570:	bc80      	pop	{r7}
 8005572:	4770      	bx	lr

08005574 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005574:	b480      	push	{r7}
 8005576:	b085      	sub	sp, #20
 8005578:	af00      	add	r7, sp, #0
 800557a:	60f8      	str	r0, [r7, #12]
 800557c:	60b9      	str	r1, [r7, #8]
 800557e:	607a      	str	r2, [r7, #4]
	return 0;
 8005580:	2300      	movs	r3, #0
}
 8005582:	4618      	mov	r0, r3
 8005584:	3714      	adds	r7, #20
 8005586:	46bd      	mov	sp, r7
 8005588:	bc80      	pop	{r7}
 800558a:	4770      	bx	lr

0800558c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b086      	sub	sp, #24
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005594:	4a14      	ldr	r2, [pc, #80]	; (80055e8 <_sbrk+0x5c>)
 8005596:	4b15      	ldr	r3, [pc, #84]	; (80055ec <_sbrk+0x60>)
 8005598:	1ad3      	subs	r3, r2, r3
 800559a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80055a0:	4b13      	ldr	r3, [pc, #76]	; (80055f0 <_sbrk+0x64>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d102      	bne.n	80055ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80055a8:	4b11      	ldr	r3, [pc, #68]	; (80055f0 <_sbrk+0x64>)
 80055aa:	4a12      	ldr	r2, [pc, #72]	; (80055f4 <_sbrk+0x68>)
 80055ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80055ae:	4b10      	ldr	r3, [pc, #64]	; (80055f0 <_sbrk+0x64>)
 80055b0:	681a      	ldr	r2, [r3, #0]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	4413      	add	r3, r2
 80055b6:	693a      	ldr	r2, [r7, #16]
 80055b8:	429a      	cmp	r2, r3
 80055ba:	d207      	bcs.n	80055cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80055bc:	f005 faec 	bl	800ab98 <__errno>
 80055c0:	4603      	mov	r3, r0
 80055c2:	220c      	movs	r2, #12
 80055c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80055c6:	f04f 33ff 	mov.w	r3, #4294967295
 80055ca:	e009      	b.n	80055e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80055cc:	4b08      	ldr	r3, [pc, #32]	; (80055f0 <_sbrk+0x64>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80055d2:	4b07      	ldr	r3, [pc, #28]	; (80055f0 <_sbrk+0x64>)
 80055d4:	681a      	ldr	r2, [r3, #0]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	4413      	add	r3, r2
 80055da:	4a05      	ldr	r2, [pc, #20]	; (80055f0 <_sbrk+0x64>)
 80055dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80055de:	68fb      	ldr	r3, [r7, #12]
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	3718      	adds	r7, #24
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd80      	pop	{r7, pc}
 80055e8:	20005000 	.word	0x20005000
 80055ec:	00000400 	.word	0x00000400
 80055f0:	20003558 	.word	0x20003558
 80055f4:	20003788 	.word	0x20003788

080055f8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80055f8:	b480      	push	{r7}
 80055fa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80055fc:	bf00      	nop
 80055fe:	46bd      	mov	sp, r7
 8005600:	bc80      	pop	{r7}
 8005602:	4770      	bx	lr

08005604 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b086      	sub	sp, #24
 8005608:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800560a:	f107 0308 	add.w	r3, r7, #8
 800560e:	2200      	movs	r2, #0
 8005610:	601a      	str	r2, [r3, #0]
 8005612:	605a      	str	r2, [r3, #4]
 8005614:	609a      	str	r2, [r3, #8]
 8005616:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005618:	463b      	mov	r3, r7
 800561a:	2200      	movs	r2, #0
 800561c:	601a      	str	r2, [r3, #0]
 800561e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8005620:	4b1e      	ldr	r3, [pc, #120]	; (800569c <MX_TIM1_Init+0x98>)
 8005622:	4a1f      	ldr	r2, [pc, #124]	; (80056a0 <MX_TIM1_Init+0x9c>)
 8005624:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8005626:	4b1d      	ldr	r3, [pc, #116]	; (800569c <MX_TIM1_Init+0x98>)
 8005628:	2247      	movs	r2, #71	; 0x47
 800562a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800562c:	4b1b      	ldr	r3, [pc, #108]	; (800569c <MX_TIM1_Init+0x98>)
 800562e:	2200      	movs	r2, #0
 8005630:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xFFFF-1;
 8005632:	4b1a      	ldr	r3, [pc, #104]	; (800569c <MX_TIM1_Init+0x98>)
 8005634:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005638:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800563a:	4b18      	ldr	r3, [pc, #96]	; (800569c <MX_TIM1_Init+0x98>)
 800563c:	2200      	movs	r2, #0
 800563e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8005640:	4b16      	ldr	r3, [pc, #88]	; (800569c <MX_TIM1_Init+0x98>)
 8005642:	2200      	movs	r2, #0
 8005644:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005646:	4b15      	ldr	r3, [pc, #84]	; (800569c <MX_TIM1_Init+0x98>)
 8005648:	2200      	movs	r2, #0
 800564a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800564c:	4813      	ldr	r0, [pc, #76]	; (800569c <MX_TIM1_Init+0x98>)
 800564e:	f003 fff7 	bl	8009640 <HAL_TIM_Base_Init>
 8005652:	4603      	mov	r3, r0
 8005654:	2b00      	cmp	r3, #0
 8005656:	d001      	beq.n	800565c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8005658:	f7ff fe46 	bl	80052e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800565c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005660:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8005662:	f107 0308 	add.w	r3, r7, #8
 8005666:	4619      	mov	r1, r3
 8005668:	480c      	ldr	r0, [pc, #48]	; (800569c <MX_TIM1_Init+0x98>)
 800566a:	f004 f838 	bl	80096de <HAL_TIM_ConfigClockSource>
 800566e:	4603      	mov	r3, r0
 8005670:	2b00      	cmp	r3, #0
 8005672:	d001      	beq.n	8005678 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8005674:	f7ff fe38 	bl	80052e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005678:	2300      	movs	r3, #0
 800567a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800567c:	2300      	movs	r3, #0
 800567e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8005680:	463b      	mov	r3, r7
 8005682:	4619      	mov	r1, r3
 8005684:	4805      	ldr	r0, [pc, #20]	; (800569c <MX_TIM1_Init+0x98>)
 8005686:	f004 f9e9 	bl	8009a5c <HAL_TIMEx_MasterConfigSynchronization>
 800568a:	4603      	mov	r3, r0
 800568c:	2b00      	cmp	r3, #0
 800568e:	d001      	beq.n	8005694 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8005690:	f7ff fe2a 	bl	80052e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8005694:	bf00      	nop
 8005696:	3718      	adds	r7, #24
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}
 800569c:	2000355c 	.word	0x2000355c
 80056a0:	40012c00 	.word	0x40012c00

080056a4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b085      	sub	sp, #20
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a09      	ldr	r2, [pc, #36]	; (80056d8 <HAL_TIM_Base_MspInit+0x34>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d10b      	bne.n	80056ce <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80056b6:	4b09      	ldr	r3, [pc, #36]	; (80056dc <HAL_TIM_Base_MspInit+0x38>)
 80056b8:	699b      	ldr	r3, [r3, #24]
 80056ba:	4a08      	ldr	r2, [pc, #32]	; (80056dc <HAL_TIM_Base_MspInit+0x38>)
 80056bc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80056c0:	6193      	str	r3, [r2, #24]
 80056c2:	4b06      	ldr	r3, [pc, #24]	; (80056dc <HAL_TIM_Base_MspInit+0x38>)
 80056c4:	699b      	ldr	r3, [r3, #24]
 80056c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056ca:	60fb      	str	r3, [r7, #12]
 80056cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80056ce:	bf00      	nop
 80056d0:	3714      	adds	r7, #20
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bc80      	pop	{r7}
 80056d6:	4770      	bx	lr
 80056d8:	40012c00 	.word	0x40012c00
 80056dc:	40021000 	.word	0x40021000

080056e0 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80056e4:	4b11      	ldr	r3, [pc, #68]	; (800572c <MX_USART1_UART_Init+0x4c>)
 80056e6:	4a12      	ldr	r2, [pc, #72]	; (8005730 <MX_USART1_UART_Init+0x50>)
 80056e8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80056ea:	4b10      	ldr	r3, [pc, #64]	; (800572c <MX_USART1_UART_Init+0x4c>)
 80056ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80056f0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80056f2:	4b0e      	ldr	r3, [pc, #56]	; (800572c <MX_USART1_UART_Init+0x4c>)
 80056f4:	2200      	movs	r2, #0
 80056f6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80056f8:	4b0c      	ldr	r3, [pc, #48]	; (800572c <MX_USART1_UART_Init+0x4c>)
 80056fa:	2200      	movs	r2, #0
 80056fc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80056fe:	4b0b      	ldr	r3, [pc, #44]	; (800572c <MX_USART1_UART_Init+0x4c>)
 8005700:	2200      	movs	r2, #0
 8005702:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005704:	4b09      	ldr	r3, [pc, #36]	; (800572c <MX_USART1_UART_Init+0x4c>)
 8005706:	220c      	movs	r2, #12
 8005708:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800570a:	4b08      	ldr	r3, [pc, #32]	; (800572c <MX_USART1_UART_Init+0x4c>)
 800570c:	2200      	movs	r2, #0
 800570e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005710:	4b06      	ldr	r3, [pc, #24]	; (800572c <MX_USART1_UART_Init+0x4c>)
 8005712:	2200      	movs	r2, #0
 8005714:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005716:	4805      	ldr	r0, [pc, #20]	; (800572c <MX_USART1_UART_Init+0x4c>)
 8005718:	f004 f9fe 	bl	8009b18 <HAL_UART_Init>
 800571c:	4603      	mov	r3, r0
 800571e:	2b00      	cmp	r3, #0
 8005720:	d001      	beq.n	8005726 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8005722:	f7ff fde1 	bl	80052e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005726:	bf00      	nop
 8005728:	bd80      	pop	{r7, pc}
 800572a:	bf00      	nop
 800572c:	200035a4 	.word	0x200035a4
 8005730:	40013800 	.word	0x40013800

08005734 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005738:	4b11      	ldr	r3, [pc, #68]	; (8005780 <MX_USART2_UART_Init+0x4c>)
 800573a:	4a12      	ldr	r2, [pc, #72]	; (8005784 <MX_USART2_UART_Init+0x50>)
 800573c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800573e:	4b10      	ldr	r3, [pc, #64]	; (8005780 <MX_USART2_UART_Init+0x4c>)
 8005740:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8005744:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005746:	4b0e      	ldr	r3, [pc, #56]	; (8005780 <MX_USART2_UART_Init+0x4c>)
 8005748:	2200      	movs	r2, #0
 800574a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800574c:	4b0c      	ldr	r3, [pc, #48]	; (8005780 <MX_USART2_UART_Init+0x4c>)
 800574e:	2200      	movs	r2, #0
 8005750:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005752:	4b0b      	ldr	r3, [pc, #44]	; (8005780 <MX_USART2_UART_Init+0x4c>)
 8005754:	2200      	movs	r2, #0
 8005756:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005758:	4b09      	ldr	r3, [pc, #36]	; (8005780 <MX_USART2_UART_Init+0x4c>)
 800575a:	220c      	movs	r2, #12
 800575c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800575e:	4b08      	ldr	r3, [pc, #32]	; (8005780 <MX_USART2_UART_Init+0x4c>)
 8005760:	2200      	movs	r2, #0
 8005762:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005764:	4b06      	ldr	r3, [pc, #24]	; (8005780 <MX_USART2_UART_Init+0x4c>)
 8005766:	2200      	movs	r2, #0
 8005768:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800576a:	4805      	ldr	r0, [pc, #20]	; (8005780 <MX_USART2_UART_Init+0x4c>)
 800576c:	f004 f9d4 	bl	8009b18 <HAL_UART_Init>
 8005770:	4603      	mov	r3, r0
 8005772:	2b00      	cmp	r3, #0
 8005774:	d001      	beq.n	800577a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8005776:	f7ff fdb7 	bl	80052e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800577a:	bf00      	nop
 800577c:	bd80      	pop	{r7, pc}
 800577e:	bf00      	nop
 8005780:	200035ec 	.word	0x200035ec
 8005784:	40004400 	.word	0x40004400

08005788 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800578c:	4b11      	ldr	r3, [pc, #68]	; (80057d4 <MX_USART3_UART_Init+0x4c>)
 800578e:	4a12      	ldr	r2, [pc, #72]	; (80057d8 <MX_USART3_UART_Init+0x50>)
 8005790:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8005792:	4b10      	ldr	r3, [pc, #64]	; (80057d4 <MX_USART3_UART_Init+0x4c>)
 8005794:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005798:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800579a:	4b0e      	ldr	r3, [pc, #56]	; (80057d4 <MX_USART3_UART_Init+0x4c>)
 800579c:	2200      	movs	r2, #0
 800579e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80057a0:	4b0c      	ldr	r3, [pc, #48]	; (80057d4 <MX_USART3_UART_Init+0x4c>)
 80057a2:	2200      	movs	r2, #0
 80057a4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80057a6:	4b0b      	ldr	r3, [pc, #44]	; (80057d4 <MX_USART3_UART_Init+0x4c>)
 80057a8:	2200      	movs	r2, #0
 80057aa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80057ac:	4b09      	ldr	r3, [pc, #36]	; (80057d4 <MX_USART3_UART_Init+0x4c>)
 80057ae:	220c      	movs	r2, #12
 80057b0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80057b2:	4b08      	ldr	r3, [pc, #32]	; (80057d4 <MX_USART3_UART_Init+0x4c>)
 80057b4:	2200      	movs	r2, #0
 80057b6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80057b8:	4b06      	ldr	r3, [pc, #24]	; (80057d4 <MX_USART3_UART_Init+0x4c>)
 80057ba:	2200      	movs	r2, #0
 80057bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80057be:	4805      	ldr	r0, [pc, #20]	; (80057d4 <MX_USART3_UART_Init+0x4c>)
 80057c0:	f004 f9aa 	bl	8009b18 <HAL_UART_Init>
 80057c4:	4603      	mov	r3, r0
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d001      	beq.n	80057ce <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80057ca:	f7ff fd8d 	bl	80052e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80057ce:	bf00      	nop
 80057d0:	bd80      	pop	{r7, pc}
 80057d2:	bf00      	nop
 80057d4:	20003634 	.word	0x20003634
 80057d8:	40004800 	.word	0x40004800

080057dc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b08e      	sub	sp, #56	; 0x38
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80057e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80057e8:	2200      	movs	r2, #0
 80057ea:	601a      	str	r2, [r3, #0]
 80057ec:	605a      	str	r2, [r3, #4]
 80057ee:	609a      	str	r2, [r3, #8]
 80057f0:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4a9e      	ldr	r2, [pc, #632]	; (8005a70 <HAL_UART_MspInit+0x294>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d16c      	bne.n	80058d6 <HAL_UART_MspInit+0xfa>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80057fc:	4b9d      	ldr	r3, [pc, #628]	; (8005a74 <HAL_UART_MspInit+0x298>)
 80057fe:	699b      	ldr	r3, [r3, #24]
 8005800:	4a9c      	ldr	r2, [pc, #624]	; (8005a74 <HAL_UART_MspInit+0x298>)
 8005802:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005806:	6193      	str	r3, [r2, #24]
 8005808:	4b9a      	ldr	r3, [pc, #616]	; (8005a74 <HAL_UART_MspInit+0x298>)
 800580a:	699b      	ldr	r3, [r3, #24]
 800580c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005810:	623b      	str	r3, [r7, #32]
 8005812:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005814:	4b97      	ldr	r3, [pc, #604]	; (8005a74 <HAL_UART_MspInit+0x298>)
 8005816:	699b      	ldr	r3, [r3, #24]
 8005818:	4a96      	ldr	r2, [pc, #600]	; (8005a74 <HAL_UART_MspInit+0x298>)
 800581a:	f043 0308 	orr.w	r3, r3, #8
 800581e:	6193      	str	r3, [r2, #24]
 8005820:	4b94      	ldr	r3, [pc, #592]	; (8005a74 <HAL_UART_MspInit+0x298>)
 8005822:	699b      	ldr	r3, [r3, #24]
 8005824:	f003 0308 	and.w	r3, r3, #8
 8005828:	61fb      	str	r3, [r7, #28]
 800582a:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = SIM_TX_Pin;
 800582c:	2340      	movs	r3, #64	; 0x40
 800582e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005830:	2302      	movs	r3, #2
 8005832:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005834:	2303      	movs	r3, #3
 8005836:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(SIM_TX_GPIO_Port, &GPIO_InitStruct);
 8005838:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800583c:	4619      	mov	r1, r3
 800583e:	488e      	ldr	r0, [pc, #568]	; (8005a78 <HAL_UART_MspInit+0x29c>)
 8005840:	f002 f836 	bl	80078b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SIM_RX_Pin;
 8005844:	2380      	movs	r3, #128	; 0x80
 8005846:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005848:	2300      	movs	r3, #0
 800584a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800584c:	2300      	movs	r3, #0
 800584e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SIM_RX_GPIO_Port, &GPIO_InitStruct);
 8005850:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005854:	4619      	mov	r1, r3
 8005856:	4888      	ldr	r0, [pc, #544]	; (8005a78 <HAL_UART_MspInit+0x29c>)
 8005858:	f002 f82a 	bl	80078b0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 800585c:	4b87      	ldr	r3, [pc, #540]	; (8005a7c <HAL_UART_MspInit+0x2a0>)
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	637b      	str	r3, [r7, #52]	; 0x34
 8005862:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005864:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8005868:	637b      	str	r3, [r7, #52]	; 0x34
 800586a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800586c:	f043 0304 	orr.w	r3, r3, #4
 8005870:	637b      	str	r3, [r7, #52]	; 0x34
 8005872:	4a82      	ldr	r2, [pc, #520]	; (8005a7c <HAL_UART_MspInit+0x2a0>)
 8005874:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005876:	6053      	str	r3, [r2, #4]

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8005878:	4b81      	ldr	r3, [pc, #516]	; (8005a80 <HAL_UART_MspInit+0x2a4>)
 800587a:	4a82      	ldr	r2, [pc, #520]	; (8005a84 <HAL_UART_MspInit+0x2a8>)
 800587c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800587e:	4b80      	ldr	r3, [pc, #512]	; (8005a80 <HAL_UART_MspInit+0x2a4>)
 8005880:	2200      	movs	r2, #0
 8005882:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005884:	4b7e      	ldr	r3, [pc, #504]	; (8005a80 <HAL_UART_MspInit+0x2a4>)
 8005886:	2200      	movs	r2, #0
 8005888:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800588a:	4b7d      	ldr	r3, [pc, #500]	; (8005a80 <HAL_UART_MspInit+0x2a4>)
 800588c:	2280      	movs	r2, #128	; 0x80
 800588e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005890:	4b7b      	ldr	r3, [pc, #492]	; (8005a80 <HAL_UART_MspInit+0x2a4>)
 8005892:	2200      	movs	r2, #0
 8005894:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005896:	4b7a      	ldr	r3, [pc, #488]	; (8005a80 <HAL_UART_MspInit+0x2a4>)
 8005898:	2200      	movs	r2, #0
 800589a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800589c:	4b78      	ldr	r3, [pc, #480]	; (8005a80 <HAL_UART_MspInit+0x2a4>)
 800589e:	2200      	movs	r2, #0
 80058a0:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80058a2:	4b77      	ldr	r3, [pc, #476]	; (8005a80 <HAL_UART_MspInit+0x2a4>)
 80058a4:	2200      	movs	r2, #0
 80058a6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80058a8:	4875      	ldr	r0, [pc, #468]	; (8005a80 <HAL_UART_MspInit+0x2a4>)
 80058aa:	f001 fd5f 	bl	800736c <HAL_DMA_Init>
 80058ae:	4603      	mov	r3, r0
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d001      	beq.n	80058b8 <HAL_UART_MspInit+0xdc>
    {
      Error_Handler();
 80058b4:	f7ff fd18 	bl	80052e8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	4a71      	ldr	r2, [pc, #452]	; (8005a80 <HAL_UART_MspInit+0x2a4>)
 80058bc:	63da      	str	r2, [r3, #60]	; 0x3c
 80058be:	4a70      	ldr	r2, [pc, #448]	; (8005a80 <HAL_UART_MspInit+0x2a4>)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 80058c4:	2200      	movs	r2, #0
 80058c6:	2101      	movs	r1, #1
 80058c8:	2025      	movs	r0, #37	; 0x25
 80058ca:	f001 fd18 	bl	80072fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80058ce:	2025      	movs	r0, #37	; 0x25
 80058d0:	f001 fd31 	bl	8007336 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80058d4:	e0c8      	b.n	8005a68 <HAL_UART_MspInit+0x28c>
  else if(uartHandle->Instance==USART2)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a6b      	ldr	r2, [pc, #428]	; (8005a88 <HAL_UART_MspInit+0x2ac>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d15e      	bne.n	800599e <HAL_UART_MspInit+0x1c2>
    __HAL_RCC_USART2_CLK_ENABLE();
 80058e0:	4b64      	ldr	r3, [pc, #400]	; (8005a74 <HAL_UART_MspInit+0x298>)
 80058e2:	69db      	ldr	r3, [r3, #28]
 80058e4:	4a63      	ldr	r2, [pc, #396]	; (8005a74 <HAL_UART_MspInit+0x298>)
 80058e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058ea:	61d3      	str	r3, [r2, #28]
 80058ec:	4b61      	ldr	r3, [pc, #388]	; (8005a74 <HAL_UART_MspInit+0x298>)
 80058ee:	69db      	ldr	r3, [r3, #28]
 80058f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058f4:	61bb      	str	r3, [r7, #24]
 80058f6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80058f8:	4b5e      	ldr	r3, [pc, #376]	; (8005a74 <HAL_UART_MspInit+0x298>)
 80058fa:	699b      	ldr	r3, [r3, #24]
 80058fc:	4a5d      	ldr	r2, [pc, #372]	; (8005a74 <HAL_UART_MspInit+0x298>)
 80058fe:	f043 0304 	orr.w	r3, r3, #4
 8005902:	6193      	str	r3, [r2, #24]
 8005904:	4b5b      	ldr	r3, [pc, #364]	; (8005a74 <HAL_UART_MspInit+0x298>)
 8005906:	699b      	ldr	r3, [r3, #24]
 8005908:	f003 0304 	and.w	r3, r3, #4
 800590c:	617b      	str	r3, [r7, #20]
 800590e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005910:	2304      	movs	r3, #4
 8005912:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005914:	2302      	movs	r3, #2
 8005916:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005918:	2303      	movs	r3, #3
 800591a:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800591c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005920:	4619      	mov	r1, r3
 8005922:	485a      	ldr	r0, [pc, #360]	; (8005a8c <HAL_UART_MspInit+0x2b0>)
 8005924:	f001 ffc4 	bl	80078b0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8005928:	2308      	movs	r3, #8
 800592a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800592c:	2300      	movs	r3, #0
 800592e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005930:	2300      	movs	r3, #0
 8005932:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005934:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005938:	4619      	mov	r1, r3
 800593a:	4854      	ldr	r0, [pc, #336]	; (8005a8c <HAL_UART_MspInit+0x2b0>)
 800593c:	f001 ffb8 	bl	80078b0 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8005940:	4b53      	ldr	r3, [pc, #332]	; (8005a90 <HAL_UART_MspInit+0x2b4>)
 8005942:	4a54      	ldr	r2, [pc, #336]	; (8005a94 <HAL_UART_MspInit+0x2b8>)
 8005944:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005946:	4b52      	ldr	r3, [pc, #328]	; (8005a90 <HAL_UART_MspInit+0x2b4>)
 8005948:	2200      	movs	r2, #0
 800594a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800594c:	4b50      	ldr	r3, [pc, #320]	; (8005a90 <HAL_UART_MspInit+0x2b4>)
 800594e:	2200      	movs	r2, #0
 8005950:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005952:	4b4f      	ldr	r3, [pc, #316]	; (8005a90 <HAL_UART_MspInit+0x2b4>)
 8005954:	2280      	movs	r2, #128	; 0x80
 8005956:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005958:	4b4d      	ldr	r3, [pc, #308]	; (8005a90 <HAL_UART_MspInit+0x2b4>)
 800595a:	2200      	movs	r2, #0
 800595c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800595e:	4b4c      	ldr	r3, [pc, #304]	; (8005a90 <HAL_UART_MspInit+0x2b4>)
 8005960:	2200      	movs	r2, #0
 8005962:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8005964:	4b4a      	ldr	r3, [pc, #296]	; (8005a90 <HAL_UART_MspInit+0x2b4>)
 8005966:	2200      	movs	r2, #0
 8005968:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800596a:	4b49      	ldr	r3, [pc, #292]	; (8005a90 <HAL_UART_MspInit+0x2b4>)
 800596c:	2200      	movs	r2, #0
 800596e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8005970:	4847      	ldr	r0, [pc, #284]	; (8005a90 <HAL_UART_MspInit+0x2b4>)
 8005972:	f001 fcfb 	bl	800736c <HAL_DMA_Init>
 8005976:	4603      	mov	r3, r0
 8005978:	2b00      	cmp	r3, #0
 800597a:	d001      	beq.n	8005980 <HAL_UART_MspInit+0x1a4>
      Error_Handler();
 800597c:	f7ff fcb4 	bl	80052e8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	4a43      	ldr	r2, [pc, #268]	; (8005a90 <HAL_UART_MspInit+0x2b4>)
 8005984:	63da      	str	r2, [r3, #60]	; 0x3c
 8005986:	4a42      	ldr	r2, [pc, #264]	; (8005a90 <HAL_UART_MspInit+0x2b4>)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 800598c:	2200      	movs	r2, #0
 800598e:	2101      	movs	r1, #1
 8005990:	2026      	movs	r0, #38	; 0x26
 8005992:	f001 fcb4 	bl	80072fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005996:	2026      	movs	r0, #38	; 0x26
 8005998:	f001 fccd 	bl	8007336 <HAL_NVIC_EnableIRQ>
}
 800599c:	e064      	b.n	8005a68 <HAL_UART_MspInit+0x28c>
  else if(uartHandle->Instance==USART3)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4a3d      	ldr	r2, [pc, #244]	; (8005a98 <HAL_UART_MspInit+0x2bc>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d15f      	bne.n	8005a68 <HAL_UART_MspInit+0x28c>
    __HAL_RCC_USART3_CLK_ENABLE();
 80059a8:	4b32      	ldr	r3, [pc, #200]	; (8005a74 <HAL_UART_MspInit+0x298>)
 80059aa:	69db      	ldr	r3, [r3, #28]
 80059ac:	4a31      	ldr	r2, [pc, #196]	; (8005a74 <HAL_UART_MspInit+0x298>)
 80059ae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80059b2:	61d3      	str	r3, [r2, #28]
 80059b4:	4b2f      	ldr	r3, [pc, #188]	; (8005a74 <HAL_UART_MspInit+0x298>)
 80059b6:	69db      	ldr	r3, [r3, #28]
 80059b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80059bc:	613b      	str	r3, [r7, #16]
 80059be:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80059c0:	4b2c      	ldr	r3, [pc, #176]	; (8005a74 <HAL_UART_MspInit+0x298>)
 80059c2:	699b      	ldr	r3, [r3, #24]
 80059c4:	4a2b      	ldr	r2, [pc, #172]	; (8005a74 <HAL_UART_MspInit+0x298>)
 80059c6:	f043 0308 	orr.w	r3, r3, #8
 80059ca:	6193      	str	r3, [r2, #24]
 80059cc:	4b29      	ldr	r3, [pc, #164]	; (8005a74 <HAL_UART_MspInit+0x298>)
 80059ce:	699b      	ldr	r3, [r3, #24]
 80059d0:	f003 0308 	and.w	r3, r3, #8
 80059d4:	60fb      	str	r3, [r7, #12]
 80059d6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80059d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80059dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059de:	2302      	movs	r3, #2
 80059e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80059e2:	2303      	movs	r3, #3
 80059e4:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80059e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80059ea:	4619      	mov	r1, r3
 80059ec:	4822      	ldr	r0, [pc, #136]	; (8005a78 <HAL_UART_MspInit+0x29c>)
 80059ee:	f001 ff5f 	bl	80078b0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80059f2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80059f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80059f8:	2300      	movs	r3, #0
 80059fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059fc:	2300      	movs	r3, #0
 80059fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005a00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005a04:	4619      	mov	r1, r3
 8005a06:	481c      	ldr	r0, [pc, #112]	; (8005a78 <HAL_UART_MspInit+0x29c>)
 8005a08:	f001 ff52 	bl	80078b0 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8005a0c:	4b23      	ldr	r3, [pc, #140]	; (8005a9c <HAL_UART_MspInit+0x2c0>)
 8005a0e:	4a24      	ldr	r2, [pc, #144]	; (8005aa0 <HAL_UART_MspInit+0x2c4>)
 8005a10:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005a12:	4b22      	ldr	r3, [pc, #136]	; (8005a9c <HAL_UART_MspInit+0x2c0>)
 8005a14:	2200      	movs	r2, #0
 8005a16:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005a18:	4b20      	ldr	r3, [pc, #128]	; (8005a9c <HAL_UART_MspInit+0x2c0>)
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005a1e:	4b1f      	ldr	r3, [pc, #124]	; (8005a9c <HAL_UART_MspInit+0x2c0>)
 8005a20:	2280      	movs	r2, #128	; 0x80
 8005a22:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005a24:	4b1d      	ldr	r3, [pc, #116]	; (8005a9c <HAL_UART_MspInit+0x2c0>)
 8005a26:	2200      	movs	r2, #0
 8005a28:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005a2a:	4b1c      	ldr	r3, [pc, #112]	; (8005a9c <HAL_UART_MspInit+0x2c0>)
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8005a30:	4b1a      	ldr	r3, [pc, #104]	; (8005a9c <HAL_UART_MspInit+0x2c0>)
 8005a32:	2200      	movs	r2, #0
 8005a34:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005a36:	4b19      	ldr	r3, [pc, #100]	; (8005a9c <HAL_UART_MspInit+0x2c0>)
 8005a38:	2200      	movs	r2, #0
 8005a3a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8005a3c:	4817      	ldr	r0, [pc, #92]	; (8005a9c <HAL_UART_MspInit+0x2c0>)
 8005a3e:	f001 fc95 	bl	800736c <HAL_DMA_Init>
 8005a42:	4603      	mov	r3, r0
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d001      	beq.n	8005a4c <HAL_UART_MspInit+0x270>
      Error_Handler();
 8005a48:	f7ff fc4e 	bl	80052e8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	4a13      	ldr	r2, [pc, #76]	; (8005a9c <HAL_UART_MspInit+0x2c0>)
 8005a50:	63da      	str	r2, [r3, #60]	; 0x3c
 8005a52:	4a12      	ldr	r2, [pc, #72]	; (8005a9c <HAL_UART_MspInit+0x2c0>)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 8005a58:	2200      	movs	r2, #0
 8005a5a:	2101      	movs	r1, #1
 8005a5c:	2027      	movs	r0, #39	; 0x27
 8005a5e:	f001 fc4e 	bl	80072fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8005a62:	2027      	movs	r0, #39	; 0x27
 8005a64:	f001 fc67 	bl	8007336 <HAL_NVIC_EnableIRQ>
}
 8005a68:	bf00      	nop
 8005a6a:	3738      	adds	r7, #56	; 0x38
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd80      	pop	{r7, pc}
 8005a70:	40013800 	.word	0x40013800
 8005a74:	40021000 	.word	0x40021000
 8005a78:	40010c00 	.word	0x40010c00
 8005a7c:	40010000 	.word	0x40010000
 8005a80:	2000367c 	.word	0x2000367c
 8005a84:	40020058 	.word	0x40020058
 8005a88:	40004400 	.word	0x40004400
 8005a8c:	40010800 	.word	0x40010800
 8005a90:	200036c0 	.word	0x200036c0
 8005a94:	4002006c 	.word	0x4002006c
 8005a98:	40004800 	.word	0x40004800
 8005a9c:	20003704 	.word	0x20003704
 8005aa0:	40020030 	.word	0x40020030

08005aa4 <A4988_DisableDriver>:
	HAL_GPIO_WritePin(myMotor.PSLEEP, myMotor.SLEEP, GPIO_PIN_SET);
	HAL_GPIO_WritePin(myMotor.PRESET, myMotor.RESET, GPIO_PIN_SET);
}

void A4988_DisableDriver()
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(myMotor.PENABLE, myMotor.ENABLE, GPIO_PIN_SET);
 8005aa8:	4b0c      	ldr	r3, [pc, #48]	; (8005adc <A4988_DisableDriver+0x38>)
 8005aaa:	695b      	ldr	r3, [r3, #20]
 8005aac:	4a0b      	ldr	r2, [pc, #44]	; (8005adc <A4988_DisableDriver+0x38>)
 8005aae:	8891      	ldrh	r1, [r2, #4]
 8005ab0:	2201      	movs	r2, #1
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	f002 f880 	bl	8007bb8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(myMotor.PSLEEP, myMotor.SLEEP, GPIO_PIN_RESET);
 8005ab8:	4b08      	ldr	r3, [pc, #32]	; (8005adc <A4988_DisableDriver+0x38>)
 8005aba:	699b      	ldr	r3, [r3, #24]
 8005abc:	4a07      	ldr	r2, [pc, #28]	; (8005adc <A4988_DisableDriver+0x38>)
 8005abe:	88d1      	ldrh	r1, [r2, #6]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	f002 f878 	bl	8007bb8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(myMotor.PRESET, myMotor.RESET, GPIO_PIN_RESET);
 8005ac8:	4b04      	ldr	r3, [pc, #16]	; (8005adc <A4988_DisableDriver+0x38>)
 8005aca:	69db      	ldr	r3, [r3, #28]
 8005acc:	4a03      	ldr	r2, [pc, #12]	; (8005adc <A4988_DisableDriver+0x38>)
 8005ace:	8911      	ldrh	r1, [r2, #8]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	f002 f870 	bl	8007bb8 <HAL_GPIO_WritePin>
}
 8005ad8:	bf00      	nop
 8005ada:	bd80      	pop	{r7, pc}
 8005adc:	2000049c 	.word	0x2000049c

08005ae0 <A4988_StepByStep>:
	HAL_GPIO_WritePin(myMotor.PSTEP, myMotor.STEP, GPIO_PIN_SET);
	HAL_GPIO_WritePin(myMotor.PSTEP, myMotor.STEP, GPIO_PIN_RESET);
}

void A4988_StepByStep(int steps, int direction)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b084      	sub	sp, #16
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
 8005ae8:	6039      	str	r1, [r7, #0]
	if (direction > 0) {
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	dd08      	ble.n	8005b02 <A4988_StepByStep+0x22>
		HAL_GPIO_WritePin(myMotor.PDIR, myMotor.DIR, GPIO_PIN_SET);
 8005af0:	4b1a      	ldr	r3, [pc, #104]	; (8005b5c <A4988_StepByStep+0x7c>)
 8005af2:	68db      	ldr	r3, [r3, #12]
 8005af4:	4a19      	ldr	r2, [pc, #100]	; (8005b5c <A4988_StepByStep+0x7c>)
 8005af6:	8811      	ldrh	r1, [r2, #0]
 8005af8:	2201      	movs	r2, #1
 8005afa:	4618      	mov	r0, r3
 8005afc:	f002 f85c 	bl	8007bb8 <HAL_GPIO_WritePin>
 8005b00:	e007      	b.n	8005b12 <A4988_StepByStep+0x32>
	} else {
		HAL_GPIO_WritePin(myMotor.PDIR, myMotor.DIR, GPIO_PIN_RESET);
 8005b02:	4b16      	ldr	r3, [pc, #88]	; (8005b5c <A4988_StepByStep+0x7c>)
 8005b04:	68db      	ldr	r3, [r3, #12]
 8005b06:	4a15      	ldr	r2, [pc, #84]	; (8005b5c <A4988_StepByStep+0x7c>)
 8005b08:	8811      	ldrh	r1, [r2, #0]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	f002 f853 	bl	8007bb8 <HAL_GPIO_WritePin>
	}

	// Step the motor
	for (int i = 0; i < steps; i++) {
 8005b12:	2300      	movs	r3, #0
 8005b14:	60fb      	str	r3, [r7, #12]
 8005b16:	e018      	b.n	8005b4a <A4988_StepByStep+0x6a>
		HAL_GPIO_WritePin(myMotor.PSTEP, myMotor.STEP, GPIO_PIN_SET);
 8005b18:	4b10      	ldr	r3, [pc, #64]	; (8005b5c <A4988_StepByStep+0x7c>)
 8005b1a:	691b      	ldr	r3, [r3, #16]
 8005b1c:	4a0f      	ldr	r2, [pc, #60]	; (8005b5c <A4988_StepByStep+0x7c>)
 8005b1e:	8851      	ldrh	r1, [r2, #2]
 8005b20:	2201      	movs	r2, #1
 8005b22:	4618      	mov	r0, r3
 8005b24:	f002 f848 	bl	8007bb8 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8005b28:	2001      	movs	r0, #1
 8005b2a:	f000 feef 	bl	800690c <HAL_Delay>
		HAL_GPIO_WritePin(myMotor.PSTEP, myMotor.STEP, GPIO_PIN_RESET);
 8005b2e:	4b0b      	ldr	r3, [pc, #44]	; (8005b5c <A4988_StepByStep+0x7c>)
 8005b30:	691b      	ldr	r3, [r3, #16]
 8005b32:	4a0a      	ldr	r2, [pc, #40]	; (8005b5c <A4988_StepByStep+0x7c>)
 8005b34:	8851      	ldrh	r1, [r2, #2]
 8005b36:	2200      	movs	r2, #0
 8005b38:	4618      	mov	r0, r3
 8005b3a:	f002 f83d 	bl	8007bb8 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8005b3e:	2001      	movs	r0, #1
 8005b40:	f000 fee4 	bl	800690c <HAL_Delay>
	for (int i = 0; i < steps; i++) {
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	3301      	adds	r3, #1
 8005b48:	60fb      	str	r3, [r7, #12]
 8005b4a:	68fa      	ldr	r2, [r7, #12]
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	429a      	cmp	r2, r3
 8005b50:	dbe2      	blt.n	8005b18 <A4988_StepByStep+0x38>
	}
}
 8005b52:	bf00      	nop
 8005b54:	bf00      	nop
 8005b56:	3710      	adds	r7, #16
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bd80      	pop	{r7, pc}
 8005b5c:	2000049c 	.word	0x2000049c

08005b60 <LCD_SpecialChar>:

/* GLOBAL VARIABLES ----------------------------------------------------------*/

/* STATIC FUNCTION PROTOTYPES --- --------------------------------------------*/
static void LCD_SpecialChar(void)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b098      	sub	sp, #96	; 0x60
 8005b64:	af00      	add	r7, sp, #0
	uint8_t Right[] = {0x00, 0x04, 0x06, 0x1F, 0x1F, 0x06, 0x04, 0x00}; // Go to right
 8005b66:	4a6d      	ldr	r2, [pc, #436]	; (8005d1c <LCD_SpecialChar+0x1bc>)
 8005b68:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005b6c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005b70:	e883 0003 	stmia.w	r3, {r0, r1}
	LCD_SendCommand(0x40);
 8005b74:	2040      	movs	r0, #64	; 0x40
 8005b76:	f000 f91b 	bl	8005db0 <LCD_SendCommand>
	for (int i=0; i<8; i++) LCD_SendData(Right[i]);
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b7e:	e00a      	b.n	8005b96 <LCD_SpecialChar+0x36>
 8005b80:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8005b84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b86:	4413      	add	r3, r2
 8005b88:	781b      	ldrb	r3, [r3, #0]
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	f000 f9ac 	bl	8005ee8 <LCD_SendData>
 8005b90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b92:	3301      	adds	r3, #1
 8005b94:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b98:	2b07      	cmp	r3, #7
 8005b9a:	ddf1      	ble.n	8005b80 <LCD_SpecialChar+0x20>
	uint8_t RightInvert[] = {0x1F, 0x1B, 0x19, 0x00, 0x00, 0x19, 0x1B, 0x1F};
 8005b9c:	4a60      	ldr	r2, [pc, #384]	; (8005d20 <LCD_SpecialChar+0x1c0>)
 8005b9e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005ba2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005ba6:	e883 0003 	stmia.w	r3, {r0, r1}
	LCD_SendCommand(0x40+8);
 8005baa:	2048      	movs	r0, #72	; 0x48
 8005bac:	f000 f900 	bl	8005db0 <LCD_SendCommand>
	for (int i=0; i<8; i++) LCD_SendData(RightInvert[i]);
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	65bb      	str	r3, [r7, #88]	; 0x58
 8005bb4:	e00a      	b.n	8005bcc <LCD_SpecialChar+0x6c>
 8005bb6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005bba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005bbc:	4413      	add	r3, r2
 8005bbe:	781b      	ldrb	r3, [r3, #0]
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	f000 f991 	bl	8005ee8 <LCD_SendData>
 8005bc6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005bc8:	3301      	adds	r3, #1
 8005bca:	65bb      	str	r3, [r7, #88]	; 0x58
 8005bcc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005bce:	2b07      	cmp	r3, #7
 8005bd0:	ddf1      	ble.n	8005bb6 <LCD_SpecialChar+0x56>
	uint8_t Left[] = {0x00, 0x04, 0x0C, 0x1F, 0x1F, 0x0C, 0x04, 0x00};
 8005bd2:	4a54      	ldr	r2, [pc, #336]	; (8005d24 <LCD_SpecialChar+0x1c4>)
 8005bd4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005bd8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005bdc:	e883 0003 	stmia.w	r3, {r0, r1}
	LCD_SendCommand(0x40+16);
 8005be0:	2050      	movs	r0, #80	; 0x50
 8005be2:	f000 f8e5 	bl	8005db0 <LCD_SendCommand>
	for (int i=0; i<8; i++) LCD_SendData(Left[i]);
 8005be6:	2300      	movs	r3, #0
 8005be8:	657b      	str	r3, [r7, #84]	; 0x54
 8005bea:	e00a      	b.n	8005c02 <LCD_SpecialChar+0xa2>
 8005bec:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005bf0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005bf2:	4413      	add	r3, r2
 8005bf4:	781b      	ldrb	r3, [r3, #0]
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	f000 f976 	bl	8005ee8 <LCD_SendData>
 8005bfc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005bfe:	3301      	adds	r3, #1
 8005c00:	657b      	str	r3, [r7, #84]	; 0x54
 8005c02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c04:	2b07      	cmp	r3, #7
 8005c06:	ddf1      	ble.n	8005bec <LCD_SpecialChar+0x8c>
	uint8_t LeftInvert[] = {0x1F, 0x1B, 0x13, 0x00, 0x00, 0x13, 0x1B, 0x1F};
 8005c08:	4a47      	ldr	r2, [pc, #284]	; (8005d28 <LCD_SpecialChar+0x1c8>)
 8005c0a:	f107 0320 	add.w	r3, r7, #32
 8005c0e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005c12:	e883 0003 	stmia.w	r3, {r0, r1}
	LCD_SendCommand(0x40+24);
 8005c16:	2058      	movs	r0, #88	; 0x58
 8005c18:	f000 f8ca 	bl	8005db0 <LCD_SendCommand>
	for (int i=0; i<8; i++) LCD_SendData(LeftInvert[i]);
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	653b      	str	r3, [r7, #80]	; 0x50
 8005c20:	e00a      	b.n	8005c38 <LCD_SpecialChar+0xd8>
 8005c22:	f107 0220 	add.w	r2, r7, #32
 8005c26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c28:	4413      	add	r3, r2
 8005c2a:	781b      	ldrb	r3, [r3, #0]
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	f000 f95b 	bl	8005ee8 <LCD_SendData>
 8005c32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c34:	3301      	adds	r3, #1
 8005c36:	653b      	str	r3, [r7, #80]	; 0x50
 8005c38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c3a:	2b07      	cmp	r3, #7
 8005c3c:	ddf1      	ble.n	8005c22 <LCD_SpecialChar+0xc2>
	uint8_t Empty[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8005c3e:	4a3b      	ldr	r2, [pc, #236]	; (8005d2c <LCD_SpecialChar+0x1cc>)
 8005c40:	f107 0318 	add.w	r3, r7, #24
 8005c44:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005c48:	e883 0003 	stmia.w	r3, {r0, r1}
	LCD_SendCommand(0x40+32);
 8005c4c:	2060      	movs	r0, #96	; 0x60
 8005c4e:	f000 f8af 	bl	8005db0 <LCD_SendCommand>
	for (int i=0; i<8; i++) LCD_SendData(Empty[i]);
 8005c52:	2300      	movs	r3, #0
 8005c54:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c56:	e00a      	b.n	8005c6e <LCD_SpecialChar+0x10e>
 8005c58:	f107 0218 	add.w	r2, r7, #24
 8005c5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c5e:	4413      	add	r3, r2
 8005c60:	781b      	ldrb	r3, [r3, #0]
 8005c62:	4618      	mov	r0, r3
 8005c64:	f000 f940 	bl	8005ee8 <LCD_SendData>
 8005c68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c6a:	3301      	adds	r3, #1
 8005c6c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c70:	2b07      	cmp	r3, #7
 8005c72:	ddf1      	ble.n	8005c58 <LCD_SpecialChar+0xf8>
	uint8_t Full[] = {0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F};
 8005c74:	4a2e      	ldr	r2, [pc, #184]	; (8005d30 <LCD_SpecialChar+0x1d0>)
 8005c76:	f107 0310 	add.w	r3, r7, #16
 8005c7a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005c7e:	e883 0003 	stmia.w	r3, {r0, r1}
	LCD_SendCommand(0x40+40);
 8005c82:	2068      	movs	r0, #104	; 0x68
 8005c84:	f000 f894 	bl	8005db0 <LCD_SendCommand>
	for (int i=0; i<8; i++) LCD_SendData(Full[i]);
 8005c88:	2300      	movs	r3, #0
 8005c8a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c8c:	e00a      	b.n	8005ca4 <LCD_SpecialChar+0x144>
 8005c8e:	f107 0210 	add.w	r2, r7, #16
 8005c92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c94:	4413      	add	r3, r2
 8005c96:	781b      	ldrb	r3, [r3, #0]
 8005c98:	4618      	mov	r0, r3
 8005c9a:	f000 f925 	bl	8005ee8 <LCD_SendData>
 8005c9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ca0:	3301      	adds	r3, #1
 8005ca2:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ca4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ca6:	2b07      	cmp	r3, #7
 8005ca8:	ddf1      	ble.n	8005c8e <LCD_SpecialChar+0x12e>
	uint8_t Up[] = {0x00, 0x00, 0x04, 0x0E, 0x1F, 0x00, 0x00, 0x00};
 8005caa:	4a22      	ldr	r2, [pc, #136]	; (8005d34 <LCD_SpecialChar+0x1d4>)
 8005cac:	f107 0308 	add.w	r3, r7, #8
 8005cb0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005cb4:	e883 0003 	stmia.w	r3, {r0, r1}
	LCD_SendCommand(0x40+48);
 8005cb8:	2070      	movs	r0, #112	; 0x70
 8005cba:	f000 f879 	bl	8005db0 <LCD_SendCommand>
	for (int i=0; i<8; i++) LCD_SendData(Up[i]);
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	647b      	str	r3, [r7, #68]	; 0x44
 8005cc2:	e00a      	b.n	8005cda <LCD_SpecialChar+0x17a>
 8005cc4:	f107 0208 	add.w	r2, r7, #8
 8005cc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005cca:	4413      	add	r3, r2
 8005ccc:	781b      	ldrb	r3, [r3, #0]
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f000 f90a 	bl	8005ee8 <LCD_SendData>
 8005cd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005cd6:	3301      	adds	r3, #1
 8005cd8:	647b      	str	r3, [r7, #68]	; 0x44
 8005cda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005cdc:	2b07      	cmp	r3, #7
 8005cde:	ddf1      	ble.n	8005cc4 <LCD_SpecialChar+0x164>
	uint8_t Down[] = {0x00, 0x00, 0x00, 0x1F, 0x0E, 0x04, 0x00, 0x00};
 8005ce0:	4a15      	ldr	r2, [pc, #84]	; (8005d38 <LCD_SpecialChar+0x1d8>)
 8005ce2:	463b      	mov	r3, r7
 8005ce4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005ce8:	e883 0003 	stmia.w	r3, {r0, r1}
	LCD_SendCommand(0x40+56);
 8005cec:	2078      	movs	r0, #120	; 0x78
 8005cee:	f000 f85f 	bl	8005db0 <LCD_SendCommand>
	for (int i=0; i<8; i++) LCD_SendData(Down[i]);
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	643b      	str	r3, [r7, #64]	; 0x40
 8005cf6:	e009      	b.n	8005d0c <LCD_SpecialChar+0x1ac>
 8005cf8:	463a      	mov	r2, r7
 8005cfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cfc:	4413      	add	r3, r2
 8005cfe:	781b      	ldrb	r3, [r3, #0]
 8005d00:	4618      	mov	r0, r3
 8005d02:	f000 f8f1 	bl	8005ee8 <LCD_SendData>
 8005d06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d08:	3301      	adds	r3, #1
 8005d0a:	643b      	str	r3, [r7, #64]	; 0x40
 8005d0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d0e:	2b07      	cmp	r3, #7
 8005d10:	ddf2      	ble.n	8005cf8 <LCD_SpecialChar+0x198>
}
 8005d12:	bf00      	nop
 8005d14:	bf00      	nop
 8005d16:	3760      	adds	r7, #96	; 0x60
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd80      	pop	{r7, pc}
 8005d1c:	0800e128 	.word	0x0800e128
 8005d20:	0800e130 	.word	0x0800e130
 8005d24:	0800e138 	.word	0x0800e138
 8005d28:	0800e140 	.word	0x0800e140
 8005d2c:	0800e148 	.word	0x0800e148
 8005d30:	0800e150 	.word	0x0800e150
 8005d34:	0800e158 	.word	0x0800e158
 8005d38:	0800e160 	.word	0x0800e160

08005d3c <LCD_Init>:
/* STATIC FUNCTIONS ----------------------------------------------------------*/

/* GLOBAL FUNCTIONS ----------------------------------------------------------*/
void LCD_Init(void){
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	af00      	add	r7, sp, #0
	  HAL_Delay(50);
 8005d40:	2032      	movs	r0, #50	; 0x32
 8005d42:	f000 fde3 	bl	800690c <HAL_Delay>
	  LCD_SendCommand(0x03);
 8005d46:	2003      	movs	r0, #3
 8005d48:	f000 f832 	bl	8005db0 <LCD_SendCommand>
	  HAL_Delay(5);
 8005d4c:	2005      	movs	r0, #5
 8005d4e:	f000 fddd 	bl	800690c <HAL_Delay>
	  LCD_SendCommand(0x03);
 8005d52:	2003      	movs	r0, #3
 8005d54:	f000 f82c 	bl	8005db0 <LCD_SendCommand>
	  HAL_Delay(1);
 8005d58:	2001      	movs	r0, #1
 8005d5a:	f000 fdd7 	bl	800690c <HAL_Delay>
	  LCD_SendCommand(0x03);
 8005d5e:	2003      	movs	r0, #3
 8005d60:	f000 f826 	bl	8005db0 <LCD_SendCommand>
	  HAL_Delay(1);
 8005d64:	2001      	movs	r0, #1
 8005d66:	f000 fdd1 	bl	800690c <HAL_Delay>
	  LCD_SendCommand(0x02);
 8005d6a:	2002      	movs	r0, #2
 8005d6c:	f000 f820 	bl	8005db0 <LCD_SendCommand>
	  HAL_Delay(1);
 8005d70:	2001      	movs	r0, #1
 8005d72:	f000 fdcb 	bl	800690c <HAL_Delay>

	  LCD_SendCommand(0x28);
 8005d76:	2028      	movs	r0, #40	; 0x28
 8005d78:	f000 f81a 	bl	8005db0 <LCD_SendCommand>
	  HAL_Delay(1);
 8005d7c:	2001      	movs	r0, #1
 8005d7e:	f000 fdc5 	bl	800690c <HAL_Delay>

	  LCD_SendCommand(0x0C);
 8005d82:	200c      	movs	r0, #12
 8005d84:	f000 f814 	bl	8005db0 <LCD_SendCommand>
	  HAL_Delay(1);
 8005d88:	2001      	movs	r0, #1
 8005d8a:	f000 fdbf 	bl	800690c <HAL_Delay>

	  LCD_SendCommand(0x01);
 8005d8e:	2001      	movs	r0, #1
 8005d90:	f000 f80e 	bl	8005db0 <LCD_SendCommand>
	  HAL_Delay(2);
 8005d94:	2002      	movs	r0, #2
 8005d96:	f000 fdb9 	bl	800690c <HAL_Delay>

	  LCD_SendCommand(0x06);
 8005d9a:	2006      	movs	r0, #6
 8005d9c:	f000 f808 	bl	8005db0 <LCD_SendCommand>
	  HAL_Delay(1);
 8005da0:	2001      	movs	r0, #1
 8005da2:	f000 fdb3 	bl	800690c <HAL_Delay>
	  LCD_SpecialChar();
 8005da6:	f7ff fedb 	bl	8005b60 <LCD_SpecialChar>
}
 8005daa:	bf00      	nop
 8005dac:	bd80      	pop	{r7, pc}
	...

08005db0 <LCD_SendCommand>:

void LCD_SendCommand(uint8_t cmd){
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b082      	sub	sp, #8
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	4603      	mov	r3, r0
 8005db8:	71fb      	strb	r3, [r7, #7]
	  // Send high nibble
	  HAL_GPIO_WritePin(myLCD.RSP, myLCD.RS, GPIO_PIN_RESET);
 8005dba:	4b4a      	ldr	r3, [pc, #296]	; (8005ee4 <LCD_SendCommand+0x134>)
 8005dbc:	6a1b      	ldr	r3, [r3, #32]
 8005dbe:	4a49      	ldr	r2, [pc, #292]	; (8005ee4 <LCD_SendCommand+0x134>)
 8005dc0:	8951      	ldrh	r1, [r2, #10]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	f001 fef7 	bl	8007bb8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(myLCD.D4P, myLCD.D4, (cmd & 0x10) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8005dca:	4b46      	ldr	r3, [pc, #280]	; (8005ee4 <LCD_SendCommand+0x134>)
 8005dcc:	68d8      	ldr	r0, [r3, #12]
 8005dce:	4b45      	ldr	r3, [pc, #276]	; (8005ee4 <LCD_SendCommand+0x134>)
 8005dd0:	8819      	ldrh	r1, [r3, #0]
 8005dd2:	79fb      	ldrb	r3, [r7, #7]
 8005dd4:	111b      	asrs	r3, r3, #4
 8005dd6:	b2db      	uxtb	r3, r3
 8005dd8:	f003 0301 	and.w	r3, r3, #1
 8005ddc:	b2db      	uxtb	r3, r3
 8005dde:	461a      	mov	r2, r3
 8005de0:	f001 feea 	bl	8007bb8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(myLCD.D5P, myLCD.D5, (cmd & 0x20) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8005de4:	4b3f      	ldr	r3, [pc, #252]	; (8005ee4 <LCD_SendCommand+0x134>)
 8005de6:	6918      	ldr	r0, [r3, #16]
 8005de8:	4b3e      	ldr	r3, [pc, #248]	; (8005ee4 <LCD_SendCommand+0x134>)
 8005dea:	8859      	ldrh	r1, [r3, #2]
 8005dec:	79fb      	ldrb	r3, [r7, #7]
 8005dee:	115b      	asrs	r3, r3, #5
 8005df0:	b2db      	uxtb	r3, r3
 8005df2:	f003 0301 	and.w	r3, r3, #1
 8005df6:	b2db      	uxtb	r3, r3
 8005df8:	461a      	mov	r2, r3
 8005dfa:	f001 fedd 	bl	8007bb8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(myLCD.D6P, myLCD.D6, (cmd & 0x40) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8005dfe:	4b39      	ldr	r3, [pc, #228]	; (8005ee4 <LCD_SendCommand+0x134>)
 8005e00:	6958      	ldr	r0, [r3, #20]
 8005e02:	4b38      	ldr	r3, [pc, #224]	; (8005ee4 <LCD_SendCommand+0x134>)
 8005e04:	8899      	ldrh	r1, [r3, #4]
 8005e06:	79fb      	ldrb	r3, [r7, #7]
 8005e08:	119b      	asrs	r3, r3, #6
 8005e0a:	b2db      	uxtb	r3, r3
 8005e0c:	f003 0301 	and.w	r3, r3, #1
 8005e10:	b2db      	uxtb	r3, r3
 8005e12:	461a      	mov	r2, r3
 8005e14:	f001 fed0 	bl	8007bb8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(myLCD.D7P, myLCD.D7, (cmd & 0x80) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8005e18:	4b32      	ldr	r3, [pc, #200]	; (8005ee4 <LCD_SendCommand+0x134>)
 8005e1a:	6998      	ldr	r0, [r3, #24]
 8005e1c:	4b31      	ldr	r3, [pc, #196]	; (8005ee4 <LCD_SendCommand+0x134>)
 8005e1e:	88d9      	ldrh	r1, [r3, #6]
 8005e20:	79fb      	ldrb	r3, [r7, #7]
 8005e22:	09db      	lsrs	r3, r3, #7
 8005e24:	b2db      	uxtb	r3, r3
 8005e26:	461a      	mov	r2, r3
 8005e28:	f001 fec6 	bl	8007bb8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(myLCD.ENP, myLCD.EN, GPIO_PIN_SET);
 8005e2c:	4b2d      	ldr	r3, [pc, #180]	; (8005ee4 <LCD_SendCommand+0x134>)
 8005e2e:	69db      	ldr	r3, [r3, #28]
 8005e30:	4a2c      	ldr	r2, [pc, #176]	; (8005ee4 <LCD_SendCommand+0x134>)
 8005e32:	8911      	ldrh	r1, [r2, #8]
 8005e34:	2201      	movs	r2, #1
 8005e36:	4618      	mov	r0, r3
 8005e38:	f001 febe 	bl	8007bb8 <HAL_GPIO_WritePin>
	  HAL_Delay(1);
 8005e3c:	2001      	movs	r0, #1
 8005e3e:	f000 fd65 	bl	800690c <HAL_Delay>
	  HAL_GPIO_WritePin(myLCD.ENP, myLCD.EN, GPIO_PIN_RESET);
 8005e42:	4b28      	ldr	r3, [pc, #160]	; (8005ee4 <LCD_SendCommand+0x134>)
 8005e44:	69db      	ldr	r3, [r3, #28]
 8005e46:	4a27      	ldr	r2, [pc, #156]	; (8005ee4 <LCD_SendCommand+0x134>)
 8005e48:	8911      	ldrh	r1, [r2, #8]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	f001 feb3 	bl	8007bb8 <HAL_GPIO_WritePin>

	  // Send low nibble
	  HAL_GPIO_WritePin(myLCD.D4P, myLCD.D4, (cmd & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8005e52:	4b24      	ldr	r3, [pc, #144]	; (8005ee4 <LCD_SendCommand+0x134>)
 8005e54:	68d8      	ldr	r0, [r3, #12]
 8005e56:	4b23      	ldr	r3, [pc, #140]	; (8005ee4 <LCD_SendCommand+0x134>)
 8005e58:	8819      	ldrh	r1, [r3, #0]
 8005e5a:	79fb      	ldrb	r3, [r7, #7]
 8005e5c:	f003 0301 	and.w	r3, r3, #1
 8005e60:	b2db      	uxtb	r3, r3
 8005e62:	461a      	mov	r2, r3
 8005e64:	f001 fea8 	bl	8007bb8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(myLCD.D5P, myLCD.D5, (cmd & 0x02) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8005e68:	4b1e      	ldr	r3, [pc, #120]	; (8005ee4 <LCD_SendCommand+0x134>)
 8005e6a:	6918      	ldr	r0, [r3, #16]
 8005e6c:	4b1d      	ldr	r3, [pc, #116]	; (8005ee4 <LCD_SendCommand+0x134>)
 8005e6e:	8859      	ldrh	r1, [r3, #2]
 8005e70:	79fb      	ldrb	r3, [r7, #7]
 8005e72:	105b      	asrs	r3, r3, #1
 8005e74:	b2db      	uxtb	r3, r3
 8005e76:	f003 0301 	and.w	r3, r3, #1
 8005e7a:	b2db      	uxtb	r3, r3
 8005e7c:	461a      	mov	r2, r3
 8005e7e:	f001 fe9b 	bl	8007bb8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(myLCD.D6P, myLCD.D6, (cmd & 0x04) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8005e82:	4b18      	ldr	r3, [pc, #96]	; (8005ee4 <LCD_SendCommand+0x134>)
 8005e84:	6958      	ldr	r0, [r3, #20]
 8005e86:	4b17      	ldr	r3, [pc, #92]	; (8005ee4 <LCD_SendCommand+0x134>)
 8005e88:	8899      	ldrh	r1, [r3, #4]
 8005e8a:	79fb      	ldrb	r3, [r7, #7]
 8005e8c:	109b      	asrs	r3, r3, #2
 8005e8e:	b2db      	uxtb	r3, r3
 8005e90:	f003 0301 	and.w	r3, r3, #1
 8005e94:	b2db      	uxtb	r3, r3
 8005e96:	461a      	mov	r2, r3
 8005e98:	f001 fe8e 	bl	8007bb8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(myLCD.D7P, myLCD.D7, (cmd & 0x08) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8005e9c:	4b11      	ldr	r3, [pc, #68]	; (8005ee4 <LCD_SendCommand+0x134>)
 8005e9e:	6998      	ldr	r0, [r3, #24]
 8005ea0:	4b10      	ldr	r3, [pc, #64]	; (8005ee4 <LCD_SendCommand+0x134>)
 8005ea2:	88d9      	ldrh	r1, [r3, #6]
 8005ea4:	79fb      	ldrb	r3, [r7, #7]
 8005ea6:	10db      	asrs	r3, r3, #3
 8005ea8:	b2db      	uxtb	r3, r3
 8005eaa:	f003 0301 	and.w	r3, r3, #1
 8005eae:	b2db      	uxtb	r3, r3
 8005eb0:	461a      	mov	r2, r3
 8005eb2:	f001 fe81 	bl	8007bb8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(myLCD.ENP, myLCD.EN, GPIO_PIN_SET);
 8005eb6:	4b0b      	ldr	r3, [pc, #44]	; (8005ee4 <LCD_SendCommand+0x134>)
 8005eb8:	69db      	ldr	r3, [r3, #28]
 8005eba:	4a0a      	ldr	r2, [pc, #40]	; (8005ee4 <LCD_SendCommand+0x134>)
 8005ebc:	8911      	ldrh	r1, [r2, #8]
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	f001 fe79 	bl	8007bb8 <HAL_GPIO_WritePin>
	  HAL_Delay(1);
 8005ec6:	2001      	movs	r0, #1
 8005ec8:	f000 fd20 	bl	800690c <HAL_Delay>
	  HAL_GPIO_WritePin(myLCD.ENP, myLCD.EN, GPIO_PIN_RESET);
 8005ecc:	4b05      	ldr	r3, [pc, #20]	; (8005ee4 <LCD_SendCommand+0x134>)
 8005ece:	69db      	ldr	r3, [r3, #28]
 8005ed0:	4a04      	ldr	r2, [pc, #16]	; (8005ee4 <LCD_SendCommand+0x134>)
 8005ed2:	8911      	ldrh	r1, [r2, #8]
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	f001 fe6e 	bl	8007bb8 <HAL_GPIO_WritePin>
}
 8005edc:	bf00      	nop
 8005ede:	3708      	adds	r7, #8
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bd80      	pop	{r7, pc}
 8005ee4:	200004bc 	.word	0x200004bc

08005ee8 <LCD_SendData>:

void LCD_SendData(uint8_t data){
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b082      	sub	sp, #8
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	4603      	mov	r3, r0
 8005ef0:	71fb      	strb	r3, [r7, #7]
	  // Send high nibble
	  HAL_GPIO_WritePin(myLCD.RSP, myLCD.RS, GPIO_PIN_SET);
 8005ef2:	4b4a      	ldr	r3, [pc, #296]	; (800601c <LCD_SendData+0x134>)
 8005ef4:	6a1b      	ldr	r3, [r3, #32]
 8005ef6:	4a49      	ldr	r2, [pc, #292]	; (800601c <LCD_SendData+0x134>)
 8005ef8:	8951      	ldrh	r1, [r2, #10]
 8005efa:	2201      	movs	r2, #1
 8005efc:	4618      	mov	r0, r3
 8005efe:	f001 fe5b 	bl	8007bb8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(myLCD.D4P, myLCD.D4, (data & 0x10) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8005f02:	4b46      	ldr	r3, [pc, #280]	; (800601c <LCD_SendData+0x134>)
 8005f04:	68d8      	ldr	r0, [r3, #12]
 8005f06:	4b45      	ldr	r3, [pc, #276]	; (800601c <LCD_SendData+0x134>)
 8005f08:	8819      	ldrh	r1, [r3, #0]
 8005f0a:	79fb      	ldrb	r3, [r7, #7]
 8005f0c:	111b      	asrs	r3, r3, #4
 8005f0e:	b2db      	uxtb	r3, r3
 8005f10:	f003 0301 	and.w	r3, r3, #1
 8005f14:	b2db      	uxtb	r3, r3
 8005f16:	461a      	mov	r2, r3
 8005f18:	f001 fe4e 	bl	8007bb8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(myLCD.D5P, myLCD.D5, (data & 0x20) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8005f1c:	4b3f      	ldr	r3, [pc, #252]	; (800601c <LCD_SendData+0x134>)
 8005f1e:	6918      	ldr	r0, [r3, #16]
 8005f20:	4b3e      	ldr	r3, [pc, #248]	; (800601c <LCD_SendData+0x134>)
 8005f22:	8859      	ldrh	r1, [r3, #2]
 8005f24:	79fb      	ldrb	r3, [r7, #7]
 8005f26:	115b      	asrs	r3, r3, #5
 8005f28:	b2db      	uxtb	r3, r3
 8005f2a:	f003 0301 	and.w	r3, r3, #1
 8005f2e:	b2db      	uxtb	r3, r3
 8005f30:	461a      	mov	r2, r3
 8005f32:	f001 fe41 	bl	8007bb8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(myLCD.D6P, myLCD.D6, (data & 0x40) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8005f36:	4b39      	ldr	r3, [pc, #228]	; (800601c <LCD_SendData+0x134>)
 8005f38:	6958      	ldr	r0, [r3, #20]
 8005f3a:	4b38      	ldr	r3, [pc, #224]	; (800601c <LCD_SendData+0x134>)
 8005f3c:	8899      	ldrh	r1, [r3, #4]
 8005f3e:	79fb      	ldrb	r3, [r7, #7]
 8005f40:	119b      	asrs	r3, r3, #6
 8005f42:	b2db      	uxtb	r3, r3
 8005f44:	f003 0301 	and.w	r3, r3, #1
 8005f48:	b2db      	uxtb	r3, r3
 8005f4a:	461a      	mov	r2, r3
 8005f4c:	f001 fe34 	bl	8007bb8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(myLCD.D7P, myLCD.D7, (data & 0x80) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8005f50:	4b32      	ldr	r3, [pc, #200]	; (800601c <LCD_SendData+0x134>)
 8005f52:	6998      	ldr	r0, [r3, #24]
 8005f54:	4b31      	ldr	r3, [pc, #196]	; (800601c <LCD_SendData+0x134>)
 8005f56:	88d9      	ldrh	r1, [r3, #6]
 8005f58:	79fb      	ldrb	r3, [r7, #7]
 8005f5a:	09db      	lsrs	r3, r3, #7
 8005f5c:	b2db      	uxtb	r3, r3
 8005f5e:	461a      	mov	r2, r3
 8005f60:	f001 fe2a 	bl	8007bb8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(myLCD.ENP, myLCD.EN, GPIO_PIN_SET);
 8005f64:	4b2d      	ldr	r3, [pc, #180]	; (800601c <LCD_SendData+0x134>)
 8005f66:	69db      	ldr	r3, [r3, #28]
 8005f68:	4a2c      	ldr	r2, [pc, #176]	; (800601c <LCD_SendData+0x134>)
 8005f6a:	8911      	ldrh	r1, [r2, #8]
 8005f6c:	2201      	movs	r2, #1
 8005f6e:	4618      	mov	r0, r3
 8005f70:	f001 fe22 	bl	8007bb8 <HAL_GPIO_WritePin>
	  HAL_Delay(1);
 8005f74:	2001      	movs	r0, #1
 8005f76:	f000 fcc9 	bl	800690c <HAL_Delay>
	  HAL_GPIO_WritePin(myLCD.ENP, myLCD.EN, GPIO_PIN_RESET);
 8005f7a:	4b28      	ldr	r3, [pc, #160]	; (800601c <LCD_SendData+0x134>)
 8005f7c:	69db      	ldr	r3, [r3, #28]
 8005f7e:	4a27      	ldr	r2, [pc, #156]	; (800601c <LCD_SendData+0x134>)
 8005f80:	8911      	ldrh	r1, [r2, #8]
 8005f82:	2200      	movs	r2, #0
 8005f84:	4618      	mov	r0, r3
 8005f86:	f001 fe17 	bl	8007bb8 <HAL_GPIO_WritePin>

	  // Send low nibble
	  HAL_GPIO_WritePin(myLCD.D4P, myLCD.D4, (data & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8005f8a:	4b24      	ldr	r3, [pc, #144]	; (800601c <LCD_SendData+0x134>)
 8005f8c:	68d8      	ldr	r0, [r3, #12]
 8005f8e:	4b23      	ldr	r3, [pc, #140]	; (800601c <LCD_SendData+0x134>)
 8005f90:	8819      	ldrh	r1, [r3, #0]
 8005f92:	79fb      	ldrb	r3, [r7, #7]
 8005f94:	f003 0301 	and.w	r3, r3, #1
 8005f98:	b2db      	uxtb	r3, r3
 8005f9a:	461a      	mov	r2, r3
 8005f9c:	f001 fe0c 	bl	8007bb8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(myLCD.D5P, myLCD.D5, (data & 0x02) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8005fa0:	4b1e      	ldr	r3, [pc, #120]	; (800601c <LCD_SendData+0x134>)
 8005fa2:	6918      	ldr	r0, [r3, #16]
 8005fa4:	4b1d      	ldr	r3, [pc, #116]	; (800601c <LCD_SendData+0x134>)
 8005fa6:	8859      	ldrh	r1, [r3, #2]
 8005fa8:	79fb      	ldrb	r3, [r7, #7]
 8005faa:	105b      	asrs	r3, r3, #1
 8005fac:	b2db      	uxtb	r3, r3
 8005fae:	f003 0301 	and.w	r3, r3, #1
 8005fb2:	b2db      	uxtb	r3, r3
 8005fb4:	461a      	mov	r2, r3
 8005fb6:	f001 fdff 	bl	8007bb8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(myLCD.D6P, myLCD.D6, (data & 0x04) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8005fba:	4b18      	ldr	r3, [pc, #96]	; (800601c <LCD_SendData+0x134>)
 8005fbc:	6958      	ldr	r0, [r3, #20]
 8005fbe:	4b17      	ldr	r3, [pc, #92]	; (800601c <LCD_SendData+0x134>)
 8005fc0:	8899      	ldrh	r1, [r3, #4]
 8005fc2:	79fb      	ldrb	r3, [r7, #7]
 8005fc4:	109b      	asrs	r3, r3, #2
 8005fc6:	b2db      	uxtb	r3, r3
 8005fc8:	f003 0301 	and.w	r3, r3, #1
 8005fcc:	b2db      	uxtb	r3, r3
 8005fce:	461a      	mov	r2, r3
 8005fd0:	f001 fdf2 	bl	8007bb8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(myLCD.D7P, myLCD.D7, (data & 0x08) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8005fd4:	4b11      	ldr	r3, [pc, #68]	; (800601c <LCD_SendData+0x134>)
 8005fd6:	6998      	ldr	r0, [r3, #24]
 8005fd8:	4b10      	ldr	r3, [pc, #64]	; (800601c <LCD_SendData+0x134>)
 8005fda:	88d9      	ldrh	r1, [r3, #6]
 8005fdc:	79fb      	ldrb	r3, [r7, #7]
 8005fde:	10db      	asrs	r3, r3, #3
 8005fe0:	b2db      	uxtb	r3, r3
 8005fe2:	f003 0301 	and.w	r3, r3, #1
 8005fe6:	b2db      	uxtb	r3, r3
 8005fe8:	461a      	mov	r2, r3
 8005fea:	f001 fde5 	bl	8007bb8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(myLCD.ENP, myLCD.EN, GPIO_PIN_SET);
 8005fee:	4b0b      	ldr	r3, [pc, #44]	; (800601c <LCD_SendData+0x134>)
 8005ff0:	69db      	ldr	r3, [r3, #28]
 8005ff2:	4a0a      	ldr	r2, [pc, #40]	; (800601c <LCD_SendData+0x134>)
 8005ff4:	8911      	ldrh	r1, [r2, #8]
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	f001 fddd 	bl	8007bb8 <HAL_GPIO_WritePin>
	  HAL_Delay(1);
 8005ffe:	2001      	movs	r0, #1
 8006000:	f000 fc84 	bl	800690c <HAL_Delay>
	  HAL_GPIO_WritePin(myLCD.ENP, myLCD.EN, GPIO_PIN_RESET);
 8006004:	4b05      	ldr	r3, [pc, #20]	; (800601c <LCD_SendData+0x134>)
 8006006:	69db      	ldr	r3, [r3, #28]
 8006008:	4a04      	ldr	r2, [pc, #16]	; (800601c <LCD_SendData+0x134>)
 800600a:	8911      	ldrh	r1, [r2, #8]
 800600c:	2200      	movs	r2, #0
 800600e:	4618      	mov	r0, r3
 8006010:	f001 fdd2 	bl	8007bb8 <HAL_GPIO_WritePin>
}
 8006014:	bf00      	nop
 8006016:	3708      	adds	r7, #8
 8006018:	46bd      	mov	sp, r7
 800601a:	bd80      	pop	{r7, pc}
 800601c:	200004bc 	.word	0x200004bc

08006020 <LCD_GotoXY>:

void LCD_GotoXY(uint8_t x, uint8_t y){
 8006020:	b580      	push	{r7, lr}
 8006022:	b084      	sub	sp, #16
 8006024:	af00      	add	r7, sp, #0
 8006026:	4603      	mov	r3, r0
 8006028:	460a      	mov	r2, r1
 800602a:	71fb      	strb	r3, [r7, #7]
 800602c:	4613      	mov	r3, r2
 800602e:	71bb      	strb	r3, [r7, #6]
    uint8_t address;
    if (y == 0) {
 8006030:	79bb      	ldrb	r3, [r7, #6]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d103      	bne.n	800603e <LCD_GotoXY+0x1e>
        address = 0x80 + x;
 8006036:	79fb      	ldrb	r3, [r7, #7]
 8006038:	3b80      	subs	r3, #128	; 0x80
 800603a:	73fb      	strb	r3, [r7, #15]
 800603c:	e013      	b.n	8006066 <LCD_GotoXY+0x46>
    } else if (y == 1) {
 800603e:	79bb      	ldrb	r3, [r7, #6]
 8006040:	2b01      	cmp	r3, #1
 8006042:	d103      	bne.n	800604c <LCD_GotoXY+0x2c>
        address = 0xC0 + x;
 8006044:	79fb      	ldrb	r3, [r7, #7]
 8006046:	3b40      	subs	r3, #64	; 0x40
 8006048:	73fb      	strb	r3, [r7, #15]
 800604a:	e00c      	b.n	8006066 <LCD_GotoXY+0x46>
    } else if (y == 2){
 800604c:	79bb      	ldrb	r3, [r7, #6]
 800604e:	2b02      	cmp	r3, #2
 8006050:	d103      	bne.n	800605a <LCD_GotoXY+0x3a>
        address = 0x80 + x + 16;
 8006052:	79fb      	ldrb	r3, [r7, #7]
 8006054:	3b70      	subs	r3, #112	; 0x70
 8006056:	73fb      	strb	r3, [r7, #15]
 8006058:	e005      	b.n	8006066 <LCD_GotoXY+0x46>
    } else if (y == 3){
 800605a:	79bb      	ldrb	r3, [r7, #6]
 800605c:	2b03      	cmp	r3, #3
 800605e:	d102      	bne.n	8006066 <LCD_GotoXY+0x46>
        address = 0xC0 + x + 16;
 8006060:	79fb      	ldrb	r3, [r7, #7]
 8006062:	3b30      	subs	r3, #48	; 0x30
 8006064:	73fb      	strb	r3, [r7, #15]
    }
    LCD_SendCommand(address);
 8006066:	7bfb      	ldrb	r3, [r7, #15]
 8006068:	4618      	mov	r0, r3
 800606a:	f7ff fea1 	bl	8005db0 <LCD_SendCommand>
}
 800606e:	bf00      	nop
 8006070:	3710      	adds	r7, #16
 8006072:	46bd      	mov	sp, r7
 8006074:	bd80      	pop	{r7, pc}

08006076 <LCD_Print>:

void LCD_Print(char *str){
 8006076:	b580      	push	{r7, lr}
 8006078:	b082      	sub	sp, #8
 800607a:	af00      	add	r7, sp, #0
 800607c:	6078      	str	r0, [r7, #4]
    while (*str) {
 800607e:	e006      	b.n	800608e <LCD_Print+0x18>
        LCD_SendData(*str++);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	1c5a      	adds	r2, r3, #1
 8006084:	607a      	str	r2, [r7, #4]
 8006086:	781b      	ldrb	r3, [r3, #0]
 8006088:	4618      	mov	r0, r3
 800608a:	f7ff ff2d 	bl	8005ee8 <LCD_SendData>
    while (*str) {
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	781b      	ldrb	r3, [r3, #0]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d1f4      	bne.n	8006080 <LCD_Print+0xa>
    }
}
 8006096:	bf00      	nop
 8006098:	bf00      	nop
 800609a:	3708      	adds	r7, #8
 800609c:	46bd      	mov	sp, r7
 800609e:	bd80      	pop	{r7, pc}

080060a0 <LCD_Clear>:
	memset(tmpbuffer, 0, 10);
	sprintf((char*)tmpbuffer, "%d", number);
	LCD_Print((char*)tmpbuffer);
}

void LCD_Clear(){
 80060a0:	b580      	push	{r7, lr}
 80060a2:	af00      	add	r7, sp, #0
	LCD_SendCommand(0x01);
 80060a4:	2001      	movs	r0, #1
 80060a6:	f7ff fe83 	bl	8005db0 <LCD_SendCommand>
}
 80060aa:	bf00      	nop
 80060ac:	bd80      	pop	{r7, pc}
	...

080060b0 <Screen_Init>:

/* STATIC FUNCTIONS ----------------------------------------------------------*/

/* GLOBAL FUNCTIONS ----------------------------------------------------------*/
void Screen_Init(_RTC *myRTC)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b082      	sub	sp, #8
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
	__MY_RTC = myRTC;
 80060b8:	4a05      	ldr	r2, [pc, #20]	; (80060d0 <Screen_Init+0x20>)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6013      	str	r3, [r2, #0]
//	__MY_RTC->Date = 1;
//	__MY_RTC->Hour = 15;
//	__MY_RTC->Min = 17;
//	__MY_RTC->Sec = 0;
//	DS3231_SetTime(__MY_RTC);
	LCD_Init();
 80060be:	f7ff fe3d 	bl	8005d3c <LCD_Init>
	LCD_Clear();
 80060c2:	f7ff ffed 	bl	80060a0 <LCD_Clear>
//	HAL_Delay(1000);
//	LCD_GotoXY(0, 0);
//	LCD_Print("Hello!");
}
 80060c6:	bf00      	nop
 80060c8:	3708      	adds	r7, #8
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bd80      	pop	{r7, pc}
 80060ce:	bf00      	nop
 80060d0:	20003748 	.word	0x20003748

080060d4 <Screen_Home_Origin>:

void Screen_Home_Origin(uint8_t ID)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b08a      	sub	sp, #40	; 0x28
 80060d8:	af02      	add	r7, sp, #8
 80060da:	4603      	mov	r3, r0
 80060dc:	71fb      	strb	r3, [r7, #7]
    char buffer[20];
    DS3231_GetTime(__MY_RTC);
 80060de:	4b32      	ldr	r3, [pc, #200]	; (80061a8 <Screen_Home_Origin+0xd4>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4618      	mov	r0, r3
 80060e4:	f7fc ff64 	bl	8002fb0 <DS3231_GetTime>
//	LCD_Clear();
	LCD_GotoXY(0, 0);
 80060e8:	2100      	movs	r1, #0
 80060ea:	2000      	movs	r0, #0
 80060ec:	f7ff ff98 	bl	8006020 <LCD_GotoXY>
//	LCD_Print("Station Node");
//    LCD_GotoXY(0, 1);
    sprintf(buffer,"Station ID: 0x%02X", ID);
 80060f0:	79fa      	ldrb	r2, [r7, #7]
 80060f2:	f107 030c 	add.w	r3, r7, #12
 80060f6:	492d      	ldr	r1, [pc, #180]	; (80061ac <Screen_Home_Origin+0xd8>)
 80060f8:	4618      	mov	r0, r3
 80060fa:	f005 fa59 	bl	800b5b0 <siprintf>
    LCD_Print(buffer);
 80060fe:	f107 030c 	add.w	r3, r7, #12
 8006102:	4618      	mov	r0, r3
 8006104:	f7ff ffb7 	bl	8006076 <LCD_Print>
    LCD_GotoXY(4, 1);
 8006108:	2101      	movs	r1, #1
 800610a:	2004      	movs	r0, #4
 800610c:	f7ff ff88 	bl	8006020 <LCD_GotoXY>
    sprintf(buffer,"%02d/%02d/%d", __MY_RTC->Date, __MY_RTC->Month, __MY_RTC->Year);
 8006110:	4b25      	ldr	r3, [pc, #148]	; (80061a8 <Screen_Home_Origin+0xd4>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	789b      	ldrb	r3, [r3, #2]
 8006116:	461a      	mov	r2, r3
 8006118:	4b23      	ldr	r3, [pc, #140]	; (80061a8 <Screen_Home_Origin+0xd4>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	785b      	ldrb	r3, [r3, #1]
 800611e:	4619      	mov	r1, r3
 8006120:	4b21      	ldr	r3, [pc, #132]	; (80061a8 <Screen_Home_Origin+0xd4>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	781b      	ldrb	r3, [r3, #0]
 8006126:	f107 000c 	add.w	r0, r7, #12
 800612a:	9300      	str	r3, [sp, #0]
 800612c:	460b      	mov	r3, r1
 800612e:	4920      	ldr	r1, [pc, #128]	; (80061b0 <Screen_Home_Origin+0xdc>)
 8006130:	f005 fa3e 	bl	800b5b0 <siprintf>
    LCD_Print(buffer);
 8006134:	f107 030c 	add.w	r3, r7, #12
 8006138:	4618      	mov	r0, r3
 800613a:	f7ff ff9c 	bl	8006076 <LCD_Print>
    LCD_GotoXY(4, 2);
 800613e:	2102      	movs	r1, #2
 8006140:	2004      	movs	r0, #4
 8006142:	f7ff ff6d 	bl	8006020 <LCD_GotoXY>
    sprintf(buffer,"%02d:%02d:%02d", __MY_RTC->Hour, __MY_RTC->Min, __MY_RTC->Sec);
 8006146:	4b18      	ldr	r3, [pc, #96]	; (80061a8 <Screen_Home_Origin+0xd4>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	791b      	ldrb	r3, [r3, #4]
 800614c:	461a      	mov	r2, r3
 800614e:	4b16      	ldr	r3, [pc, #88]	; (80061a8 <Screen_Home_Origin+0xd4>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	795b      	ldrb	r3, [r3, #5]
 8006154:	4619      	mov	r1, r3
 8006156:	4b14      	ldr	r3, [pc, #80]	; (80061a8 <Screen_Home_Origin+0xd4>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	799b      	ldrb	r3, [r3, #6]
 800615c:	f107 000c 	add.w	r0, r7, #12
 8006160:	9300      	str	r3, [sp, #0]
 8006162:	460b      	mov	r3, r1
 8006164:	4913      	ldr	r1, [pc, #76]	; (80061b4 <Screen_Home_Origin+0xe0>)
 8006166:	f005 fa23 	bl	800b5b0 <siprintf>
    LCD_Print(buffer);
 800616a:	f107 030c 	add.w	r3, r7, #12
 800616e:	4618      	mov	r0, r3
 8006170:	f7ff ff81 	bl	8006076 <LCD_Print>
    LCD_GotoXY(5, 3);
 8006174:	2103      	movs	r1, #3
 8006176:	2005      	movs	r0, #5
 8006178:	f7ff ff52 	bl	8006020 <LCD_GotoXY>
    LCD_SendData(_LCD_CHAR_LEFT);
 800617c:	2002      	movs	r0, #2
 800617e:	f7ff feb3 	bl	8005ee8 <LCD_SendData>
    LCD_GotoXY(6, 3);
 8006182:	2103      	movs	r1, #3
 8006184:	2006      	movs	r0, #6
 8006186:	f7ff ff4b 	bl	8006020 <LCD_GotoXY>
    LCD_Print("HOME");
 800618a:	480b      	ldr	r0, [pc, #44]	; (80061b8 <Screen_Home_Origin+0xe4>)
 800618c:	f7ff ff73 	bl	8006076 <LCD_Print>
    LCD_GotoXY(10,3);
 8006190:	2103      	movs	r1, #3
 8006192:	200a      	movs	r0, #10
 8006194:	f7ff ff44 	bl	8006020 <LCD_GotoXY>
    LCD_SendData(_LCD_CHAR_RIGHT);
 8006198:	2000      	movs	r0, #0
 800619a:	f7ff fea5 	bl	8005ee8 <LCD_SendData>
}
 800619e:	bf00      	nop
 80061a0:	3720      	adds	r7, #32
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}
 80061a6:	bf00      	nop
 80061a8:	20003748 	.word	0x20003748
 80061ac:	0800e16c 	.word	0x0800e16c
 80061b0:	0800e180 	.word	0x0800e180
 80061b4:	0800e190 	.word	0x0800e190
 80061b8:	0800e1a0 	.word	0x0800e1a0

080061bc <Screen_Home_Sync>:

void Screen_Home_Sync(uint8_t time)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b088      	sub	sp, #32
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	4603      	mov	r3, r0
 80061c4:	71fb      	strb	r3, [r7, #7]
    char buffer[20];
//	LCD_Clear();
	LCD_GotoXY(1, 0);
 80061c6:	2100      	movs	r1, #0
 80061c8:	2001      	movs	r0, #1
 80061ca:	f7ff ff29 	bl	8006020 <LCD_GotoXY>
	LCD_Print("Received Order");
 80061ce:	4819      	ldr	r0, [pc, #100]	; (8006234 <Screen_Home_Sync+0x78>)
 80061d0:	f7ff ff51 	bl	8006076 <LCD_Print>

    LCD_GotoXY(1, 1);
 80061d4:	2101      	movs	r1, #1
 80061d6:	2001      	movs	r0, #1
 80061d8:	f7ff ff22 	bl	8006020 <LCD_GotoXY>
    LCD_Print("OFF after:");
 80061dc:	4816      	ldr	r0, [pc, #88]	; (8006238 <Screen_Home_Sync+0x7c>)
 80061de:	f7ff ff4a 	bl	8006076 <LCD_Print>
    LCD_GotoXY(6, 2);
 80061e2:	2102      	movs	r1, #2
 80061e4:	2006      	movs	r0, #6
 80061e6:	f7ff ff1b 	bl	8006020 <LCD_GotoXY>
    sprintf(buffer, "%03ds", time);
 80061ea:	79fa      	ldrb	r2, [r7, #7]
 80061ec:	f107 030c 	add.w	r3, r7, #12
 80061f0:	4912      	ldr	r1, [pc, #72]	; (800623c <Screen_Home_Sync+0x80>)
 80061f2:	4618      	mov	r0, r3
 80061f4:	f005 f9dc 	bl	800b5b0 <siprintf>
    LCD_Print(buffer);
 80061f8:	f107 030c 	add.w	r3, r7, #12
 80061fc:	4618      	mov	r0, r3
 80061fe:	f7ff ff3a 	bl	8006076 <LCD_Print>
    LCD_GotoXY(5, 3);
 8006202:	2103      	movs	r1, #3
 8006204:	2005      	movs	r0, #5
 8006206:	f7ff ff0b 	bl	8006020 <LCD_GotoXY>
    LCD_SendData(_LCD_CHAR_LEFT);
 800620a:	2002      	movs	r0, #2
 800620c:	f7ff fe6c 	bl	8005ee8 <LCD_SendData>
    LCD_GotoXY(6, 3);
 8006210:	2103      	movs	r1, #3
 8006212:	2006      	movs	r0, #6
 8006214:	f7ff ff04 	bl	8006020 <LCD_GotoXY>
    LCD_Print("HOME");
 8006218:	4809      	ldr	r0, [pc, #36]	; (8006240 <Screen_Home_Sync+0x84>)
 800621a:	f7ff ff2c 	bl	8006076 <LCD_Print>
    LCD_GotoXY(10,3);
 800621e:	2103      	movs	r1, #3
 8006220:	200a      	movs	r0, #10
 8006222:	f7ff fefd 	bl	8006020 <LCD_GotoXY>
    LCD_SendData(_LCD_CHAR_RIGHT);
 8006226:	2000      	movs	r0, #0
 8006228:	f7ff fe5e 	bl	8005ee8 <LCD_SendData>
}
 800622c:	bf00      	nop
 800622e:	3720      	adds	r7, #32
 8006230:	46bd      	mov	sp, r7
 8006232:	bd80      	pop	{r7, pc}
 8006234:	0800e1a8 	.word	0x0800e1a8
 8006238:	0800e1b8 	.word	0x0800e1b8
 800623c:	0800e1c4 	.word	0x0800e1c4
 8006240:	0800e1a0 	.word	0x0800e1a0

08006244 <Screen_Home_Calib>:
		LCD_Print(buffer);
	}
}

void Screen_Home_Calib(void)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b088      	sub	sp, #32
 8006248:	af02      	add	r7, sp, #8
    char buffer[20];
//    DS3231_GetTime(&__MY_RTC);
//	LCD_Clear();
	LCD_GotoXY(1, 0);
 800624a:	2100      	movs	r1, #0
 800624c:	2001      	movs	r0, #1
 800624e:	f7ff fee7 	bl	8006020 <LCD_GotoXY>
	LCD_Print("Received Order");
 8006252:	4827      	ldr	r0, [pc, #156]	; (80062f0 <Screen_Home_Calib+0xac>)
 8006254:	f7ff ff0f 	bl	8006076 <LCD_Print>
    LCD_GotoXY(0, 1);
 8006258:	2101      	movs	r1, #1
 800625a:	2000      	movs	r0, #0
 800625c:	f7ff fee0 	bl	8006020 <LCD_GotoXY>
    sprintf(buffer,"SWoff: %02dh%02dm%02ds", __MY_RTC->Hour, __MY_RTC->Min, __MY_RTC->Sec);
 8006260:	4b24      	ldr	r3, [pc, #144]	; (80062f4 <Screen_Home_Calib+0xb0>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	791b      	ldrb	r3, [r3, #4]
 8006266:	461a      	mov	r2, r3
 8006268:	4b22      	ldr	r3, [pc, #136]	; (80062f4 <Screen_Home_Calib+0xb0>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	795b      	ldrb	r3, [r3, #5]
 800626e:	4619      	mov	r1, r3
 8006270:	4b20      	ldr	r3, [pc, #128]	; (80062f4 <Screen_Home_Calib+0xb0>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	799b      	ldrb	r3, [r3, #6]
 8006276:	1d38      	adds	r0, r7, #4
 8006278:	9300      	str	r3, [sp, #0]
 800627a:	460b      	mov	r3, r1
 800627c:	491e      	ldr	r1, [pc, #120]	; (80062f8 <Screen_Home_Calib+0xb4>)
 800627e:	f005 f997 	bl	800b5b0 <siprintf>
    LCD_Print(buffer);
 8006282:	1d3b      	adds	r3, r7, #4
 8006284:	4618      	mov	r0, r3
 8006286:	f7ff fef6 	bl	8006076 <LCD_Print>
    LCD_GotoXY(0, 2);
 800628a:	2102      	movs	r1, #2
 800628c:	2000      	movs	r0, #0
 800628e:	f7ff fec7 	bl	8006020 <LCD_GotoXY>
    sprintf(buffer,"Date:  %02d/%02d/%d", __MY_RTC->Date, __MY_RTC->Month, __MY_RTC->Year);
 8006292:	4b18      	ldr	r3, [pc, #96]	; (80062f4 <Screen_Home_Calib+0xb0>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	789b      	ldrb	r3, [r3, #2]
 8006298:	461a      	mov	r2, r3
 800629a:	4b16      	ldr	r3, [pc, #88]	; (80062f4 <Screen_Home_Calib+0xb0>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	785b      	ldrb	r3, [r3, #1]
 80062a0:	4619      	mov	r1, r3
 80062a2:	4b14      	ldr	r3, [pc, #80]	; (80062f4 <Screen_Home_Calib+0xb0>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	781b      	ldrb	r3, [r3, #0]
 80062a8:	1d38      	adds	r0, r7, #4
 80062aa:	9300      	str	r3, [sp, #0]
 80062ac:	460b      	mov	r3, r1
 80062ae:	4913      	ldr	r1, [pc, #76]	; (80062fc <Screen_Home_Calib+0xb8>)
 80062b0:	f005 f97e 	bl	800b5b0 <siprintf>
    LCD_Print(buffer);
 80062b4:	1d3b      	adds	r3, r7, #4
 80062b6:	4618      	mov	r0, r3
 80062b8:	f7ff fedd 	bl	8006076 <LCD_Print>
    LCD_GotoXY(5, 3);
 80062bc:	2103      	movs	r1, #3
 80062be:	2005      	movs	r0, #5
 80062c0:	f7ff feae 	bl	8006020 <LCD_GotoXY>
    LCD_SendData(_LCD_CHAR_LEFT);
 80062c4:	2002      	movs	r0, #2
 80062c6:	f7ff fe0f 	bl	8005ee8 <LCD_SendData>
    LCD_GotoXY(6, 3);
 80062ca:	2103      	movs	r1, #3
 80062cc:	2006      	movs	r0, #6
 80062ce:	f7ff fea7 	bl	8006020 <LCD_GotoXY>
    LCD_Print("HOME");
 80062d2:	480b      	ldr	r0, [pc, #44]	; (8006300 <Screen_Home_Calib+0xbc>)
 80062d4:	f7ff fecf 	bl	8006076 <LCD_Print>
    LCD_GotoXY(10,3);
 80062d8:	2103      	movs	r1, #3
 80062da:	200a      	movs	r0, #10
 80062dc:	f7ff fea0 	bl	8006020 <LCD_GotoXY>
    LCD_SendData(_LCD_CHAR_RIGHT);
 80062e0:	2000      	movs	r0, #0
 80062e2:	f7ff fe01 	bl	8005ee8 <LCD_SendData>
}
 80062e6:	bf00      	nop
 80062e8:	3718      	adds	r7, #24
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bd80      	pop	{r7, pc}
 80062ee:	bf00      	nop
 80062f0:	0800e1a8 	.word	0x0800e1a8
 80062f4:	20003748 	.word	0x20003748
 80062f8:	0800e1cc 	.word	0x0800e1cc
 80062fc:	0800e1e4 	.word	0x0800e1e4
 8006300:	0800e1a0 	.word	0x0800e1a0

08006304 <Screen_Monitor_Station>:

void Screen_Monitor_Station(uint8_t mode, uint16_t current)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b088      	sub	sp, #32
 8006308:	af00      	add	r7, sp, #0
 800630a:	4603      	mov	r3, r0
 800630c:	460a      	mov	r2, r1
 800630e:	71fb      	strb	r3, [r7, #7]
 8006310:	4613      	mov	r3, r2
 8006312:	80bb      	strh	r3, [r7, #4]
    char buffer[20];
	LCD_GotoXY(0, 0);
 8006314:	2100      	movs	r1, #0
 8006316:	2000      	movs	r0, #0
 8006318:	f7ff fe82 	bl	8006020 <LCD_GotoXY>
    LCD_SendData(_LCD_CHAR_UP);
 800631c:	2006      	movs	r0, #6
 800631e:	f7ff fde3 	bl	8005ee8 <LCD_SendData>
	LCD_GotoXY(1, 0);
 8006322:	2100      	movs	r1, #0
 8006324:	2001      	movs	r0, #1
 8006326:	f7ff fe7b 	bl	8006020 <LCD_GotoXY>
	LCD_Print("Station Status");
 800632a:	4822      	ldr	r0, [pc, #136]	; (80063b4 <Screen_Monitor_Station+0xb0>)
 800632c:	f7ff fea3 	bl	8006076 <LCD_Print>
    LCD_GotoXY(1, 1);
 8006330:	2101      	movs	r1, #1
 8006332:	2001      	movs	r0, #1
 8006334:	f7ff fe74 	bl	8006020 <LCD_GotoXY>
    if (mode == 2)
 8006338:	79fb      	ldrb	r3, [r7, #7]
 800633a:	2b02      	cmp	r3, #2
 800633c:	d103      	bne.n	8006346 <Screen_Monitor_Station+0x42>
    {
        LCD_Print("Contactor: OFF");
 800633e:	481e      	ldr	r0, [pc, #120]	; (80063b8 <Screen_Monitor_Station+0xb4>)
 8006340:	f7ff fe99 	bl	8006076 <LCD_Print>
 8006344:	e005      	b.n	8006352 <Screen_Monitor_Station+0x4e>
    } else if (mode == 1){
 8006346:	79fb      	ldrb	r3, [r7, #7]
 8006348:	2b01      	cmp	r3, #1
 800634a:	d102      	bne.n	8006352 <Screen_Monitor_Station+0x4e>
        LCD_Print("Contactor: ON");
 800634c:	481b      	ldr	r0, [pc, #108]	; (80063bc <Screen_Monitor_Station+0xb8>)
 800634e:	f7ff fe92 	bl	8006076 <LCD_Print>
    }
    LCD_GotoXY(1, 2);
 8006352:	2102      	movs	r1, #2
 8006354:	2001      	movs	r0, #1
 8006356:	f7ff fe63 	bl	8006020 <LCD_GotoXY>
    sprintf(buffer,"Current: %04dmA", current);
 800635a:	88ba      	ldrh	r2, [r7, #4]
 800635c:	f107 030c 	add.w	r3, r7, #12
 8006360:	4917      	ldr	r1, [pc, #92]	; (80063c0 <Screen_Monitor_Station+0xbc>)
 8006362:	4618      	mov	r0, r3
 8006364:	f005 f924 	bl	800b5b0 <siprintf>
    LCD_Print(buffer);
 8006368:	f107 030c 	add.w	r3, r7, #12
 800636c:	4618      	mov	r0, r3
 800636e:	f7ff fe82 	bl	8006076 <LCD_Print>
    LCD_GotoXY(0, 2);
 8006372:	2102      	movs	r1, #2
 8006374:	2000      	movs	r0, #0
 8006376:	f7ff fe53 	bl	8006020 <LCD_GotoXY>
	LCD_SendData(_LCD_CHAR_DOWN);
 800637a:	2007      	movs	r0, #7
 800637c:	f7ff fdb4 	bl	8005ee8 <LCD_SendData>
    LCD_GotoXY(4, 3);
 8006380:	2103      	movs	r1, #3
 8006382:	2004      	movs	r0, #4
 8006384:	f7ff fe4c 	bl	8006020 <LCD_GotoXY>
    LCD_SendData(_LCD_CHAR_LEFT);
 8006388:	2002      	movs	r0, #2
 800638a:	f7ff fdad 	bl	8005ee8 <LCD_SendData>
    LCD_GotoXY(5, 3);
 800638e:	2103      	movs	r1, #3
 8006390:	2005      	movs	r0, #5
 8006392:	f7ff fe45 	bl	8006020 <LCD_GotoXY>
    LCD_Print("MONITOR");
 8006396:	480b      	ldr	r0, [pc, #44]	; (80063c4 <Screen_Monitor_Station+0xc0>)
 8006398:	f7ff fe6d 	bl	8006076 <LCD_Print>
    LCD_GotoXY(12,3);
 800639c:	2103      	movs	r1, #3
 800639e:	200c      	movs	r0, #12
 80063a0:	f7ff fe3e 	bl	8006020 <LCD_GotoXY>
    LCD_SendData(_LCD_CHAR_RIGHT);
 80063a4:	2000      	movs	r0, #0
 80063a6:	f7ff fd9f 	bl	8005ee8 <LCD_SendData>
}
 80063aa:	bf00      	nop
 80063ac:	3720      	adds	r7, #32
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd80      	pop	{r7, pc}
 80063b2:	bf00      	nop
 80063b4:	0800e1f8 	.word	0x0800e1f8
 80063b8:	0800e208 	.word	0x0800e208
 80063bc:	0800e218 	.word	0x0800e218
 80063c0:	0800e228 	.word	0x0800e228
 80063c4:	0800e238 	.word	0x0800e238

080063c8 <Screen_Monitor_Node>:

void Screen_Monitor_Node(uint8_t ID, uint8_t mode, uint16_t battery, uint8_t type, uint16_t voltage)
{
 80063c8:	b590      	push	{r4, r7, lr}
 80063ca:	b089      	sub	sp, #36	; 0x24
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	4604      	mov	r4, r0
 80063d0:	4608      	mov	r0, r1
 80063d2:	4611      	mov	r1, r2
 80063d4:	461a      	mov	r2, r3
 80063d6:	4623      	mov	r3, r4
 80063d8:	71fb      	strb	r3, [r7, #7]
 80063da:	4603      	mov	r3, r0
 80063dc:	71bb      	strb	r3, [r7, #6]
 80063de:	460b      	mov	r3, r1
 80063e0:	80bb      	strh	r3, [r7, #4]
 80063e2:	4613      	mov	r3, r2
 80063e4:	70fb      	strb	r3, [r7, #3]
    char buffer[20];
//	LCD_Clear();
	LCD_GotoXY(0, 0);
 80063e6:	2100      	movs	r1, #0
 80063e8:	2000      	movs	r0, #0
 80063ea:	f7ff fe19 	bl	8006020 <LCD_GotoXY>
    LCD_SendData(_LCD_CHAR_UP);
 80063ee:	2006      	movs	r0, #6
 80063f0:	f7ff fd7a 	bl	8005ee8 <LCD_SendData>
    LCD_GotoXY(1, 0);
 80063f4:	2100      	movs	r1, #0
 80063f6:	2001      	movs	r0, #1
 80063f8:	f7ff fe12 	bl	8006020 <LCD_GotoXY>
    sprintf(buffer,"Sensor ID: 0x%02X", ID);
 80063fc:	79fa      	ldrb	r2, [r7, #7]
 80063fe:	f107 030c 	add.w	r3, r7, #12
 8006402:	4940      	ldr	r1, [pc, #256]	; (8006504 <Screen_Monitor_Node+0x13c>)
 8006404:	4618      	mov	r0, r3
 8006406:	f005 f8d3 	bl	800b5b0 <siprintf>
    LCD_Print(buffer);
 800640a:	f107 030c 	add.w	r3, r7, #12
 800640e:	4618      	mov	r0, r3
 8006410:	f7ff fe31 	bl	8006076 <LCD_Print>
    LCD_GotoXY(1, 1);
 8006414:	2101      	movs	r1, #1
 8006416:	2001      	movs	r0, #1
 8006418:	f7ff fe02 	bl	8006020 <LCD_GotoXY>
    if (mode == 2)
 800641c:	79bb      	ldrb	r3, [r7, #6]
 800641e:	2b02      	cmp	r3, #2
 8006420:	d103      	bne.n	800642a <Screen_Monitor_Node+0x62>
    {
        LCD_Print("Status: OFF");
 8006422:	4839      	ldr	r0, [pc, #228]	; (8006508 <Screen_Monitor_Node+0x140>)
 8006424:	f7ff fe27 	bl	8006076 <LCD_Print>
 8006428:	e005      	b.n	8006436 <Screen_Monitor_Node+0x6e>
    } else if (mode == 1){
 800642a:	79bb      	ldrb	r3, [r7, #6]
 800642c:	2b01      	cmp	r3, #1
 800642e:	d102      	bne.n	8006436 <Screen_Monitor_Node+0x6e>
        LCD_Print("Status: ON");
 8006430:	4836      	ldr	r0, [pc, #216]	; (800650c <Screen_Monitor_Node+0x144>)
 8006432:	f7ff fe20 	bl	8006076 <LCD_Print>
    }
    LCD_GotoXY(1, 2);
 8006436:	2102      	movs	r1, #2
 8006438:	2001      	movs	r0, #1
 800643a:	f7ff fdf1 	bl	8006020 <LCD_GotoXY>
    sprintf(buffer,"Battery: %01d.%02dV", battery/100, battery%100);
 800643e:	88bb      	ldrh	r3, [r7, #4]
 8006440:	4a33      	ldr	r2, [pc, #204]	; (8006510 <Screen_Monitor_Node+0x148>)
 8006442:	fba2 2303 	umull	r2, r3, r2, r3
 8006446:	095b      	lsrs	r3, r3, #5
 8006448:	b29b      	uxth	r3, r3
 800644a:	461c      	mov	r4, r3
 800644c:	88bb      	ldrh	r3, [r7, #4]
 800644e:	4a30      	ldr	r2, [pc, #192]	; (8006510 <Screen_Monitor_Node+0x148>)
 8006450:	fba2 1203 	umull	r1, r2, r2, r3
 8006454:	0952      	lsrs	r2, r2, #5
 8006456:	2164      	movs	r1, #100	; 0x64
 8006458:	fb01 f202 	mul.w	r2, r1, r2
 800645c:	1a9b      	subs	r3, r3, r2
 800645e:	b29b      	uxth	r3, r3
 8006460:	f107 000c 	add.w	r0, r7, #12
 8006464:	4622      	mov	r2, r4
 8006466:	492b      	ldr	r1, [pc, #172]	; (8006514 <Screen_Monitor_Node+0x14c>)
 8006468:	f005 f8a2 	bl	800b5b0 <siprintf>
    LCD_Print(buffer);
 800646c:	f107 030c 	add.w	r3, r7, #12
 8006470:	4618      	mov	r0, r3
 8006472:	f7ff fe00 	bl	8006076 <LCD_Print>
    LCD_GotoXY(0, 3);
 8006476:	2103      	movs	r1, #3
 8006478:	2000      	movs	r0, #0
 800647a:	f7ff fdd1 	bl	8006020 <LCD_GotoXY>
	LCD_SendData(_LCD_CHAR_DOWN);
 800647e:	2007      	movs	r0, #7
 8006480:	f7ff fd32 	bl	8005ee8 <LCD_SendData>
    LCD_GotoXY(1, 3);
 8006484:	2103      	movs	r1, #3
 8006486:	2001      	movs	r0, #1
 8006488:	f7ff fdca 	bl	8006020 <LCD_GotoXY>
    if (type == 1)
 800648c:	78fb      	ldrb	r3, [r7, #3]
 800648e:	2b01      	cmp	r3, #1
 8006490:	d117      	bne.n	80064c2 <Screen_Monitor_Node+0xfa>
    {
        sprintf(buffer,"VP: %01d.%02dV", voltage/100, voltage%100);
 8006492:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8006494:	4a1e      	ldr	r2, [pc, #120]	; (8006510 <Screen_Monitor_Node+0x148>)
 8006496:	fba2 2303 	umull	r2, r3, r2, r3
 800649a:	095b      	lsrs	r3, r3, #5
 800649c:	b29b      	uxth	r3, r3
 800649e:	461c      	mov	r4, r3
 80064a0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80064a2:	4a1b      	ldr	r2, [pc, #108]	; (8006510 <Screen_Monitor_Node+0x148>)
 80064a4:	fba2 1203 	umull	r1, r2, r2, r3
 80064a8:	0952      	lsrs	r2, r2, #5
 80064aa:	2164      	movs	r1, #100	; 0x64
 80064ac:	fb01 f202 	mul.w	r2, r1, r2
 80064b0:	1a9b      	subs	r3, r3, r2
 80064b2:	b29b      	uxth	r3, r3
 80064b4:	f107 000c 	add.w	r0, r7, #12
 80064b8:	4622      	mov	r2, r4
 80064ba:	4917      	ldr	r1, [pc, #92]	; (8006518 <Screen_Monitor_Node+0x150>)
 80064bc:	f005 f878 	bl	800b5b0 <siprintf>
 80064c0:	e016      	b.n	80064f0 <Screen_Monitor_Node+0x128>
    } else {
        sprintf(buffer,"VNA: %01d.%02dV", voltage/100, voltage%100);
 80064c2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80064c4:	4a12      	ldr	r2, [pc, #72]	; (8006510 <Screen_Monitor_Node+0x148>)
 80064c6:	fba2 2303 	umull	r2, r3, r2, r3
 80064ca:	095b      	lsrs	r3, r3, #5
 80064cc:	b29b      	uxth	r3, r3
 80064ce:	461c      	mov	r4, r3
 80064d0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80064d2:	4a0f      	ldr	r2, [pc, #60]	; (8006510 <Screen_Monitor_Node+0x148>)
 80064d4:	fba2 1203 	umull	r1, r2, r2, r3
 80064d8:	0952      	lsrs	r2, r2, #5
 80064da:	2164      	movs	r1, #100	; 0x64
 80064dc:	fb01 f202 	mul.w	r2, r1, r2
 80064e0:	1a9b      	subs	r3, r3, r2
 80064e2:	b29b      	uxth	r3, r3
 80064e4:	f107 000c 	add.w	r0, r7, #12
 80064e8:	4622      	mov	r2, r4
 80064ea:	490c      	ldr	r1, [pc, #48]	; (800651c <Screen_Monitor_Node+0x154>)
 80064ec:	f005 f860 	bl	800b5b0 <siprintf>
    }
    LCD_Print(buffer);
 80064f0:	f107 030c 	add.w	r3, r7, #12
 80064f4:	4618      	mov	r0, r3
 80064f6:	f7ff fdbe 	bl	8006076 <LCD_Print>
}
 80064fa:	bf00      	nop
 80064fc:	3724      	adds	r7, #36	; 0x24
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd90      	pop	{r4, r7, pc}
 8006502:	bf00      	nop
 8006504:	0800e240 	.word	0x0800e240
 8006508:	0800e254 	.word	0x0800e254
 800650c:	0800e260 	.word	0x0800e260
 8006510:	51eb851f 	.word	0x51eb851f
 8006514:	0800e26c 	.word	0x0800e26c
 8006518:	0800e280 	.word	0x0800e280
 800651c:	0800e290 	.word	0x0800e290

08006520 <Screen_Function>:

void Screen_Function(uint8_t position)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b082      	sub	sp, #8
 8006524:	af00      	add	r7, sp, #0
 8006526:	4603      	mov	r3, r0
 8006528:	71fb      	strb	r3, [r7, #7]
//	LCD_Clear();
	LCD_GotoXY(0, position);
 800652a:	79fb      	ldrb	r3, [r7, #7]
 800652c:	4619      	mov	r1, r3
 800652e:	2000      	movs	r0, #0
 8006530:	f7ff fd76 	bl	8006020 <LCD_GotoXY>
	LCD_SendData(_LCD_CHAR_RIGHT_INVERT);
 8006534:	2001      	movs	r0, #1
 8006536:	f7ff fcd7 	bl	8005ee8 <LCD_SendData>
    LCD_GotoXY(1, 0);
 800653a:	2100      	movs	r1, #0
 800653c:	2001      	movs	r0, #1
 800653e:	f7ff fd6f 	bl	8006020 <LCD_GotoXY>
    LCD_Print("Output Voltage");
 8006542:	4811      	ldr	r0, [pc, #68]	; (8006588 <Screen_Function+0x68>)
 8006544:	f7ff fd97 	bl	8006076 <LCD_Print>
    LCD_GotoXY(1, 1);
 8006548:	2101      	movs	r1, #1
 800654a:	2001      	movs	r0, #1
 800654c:	f7ff fd68 	bl	8006020 <LCD_GotoXY>
    LCD_Print("Output ON/OFF");
 8006550:	480e      	ldr	r0, [pc, #56]	; (800658c <Screen_Function+0x6c>)
 8006552:	f7ff fd90 	bl	8006076 <LCD_Print>
    LCD_GotoXY(3, 3);
 8006556:	2103      	movs	r1, #3
 8006558:	2003      	movs	r0, #3
 800655a:	f7ff fd61 	bl	8006020 <LCD_GotoXY>
    LCD_SendData(_LCD_CHAR_LEFT);
 800655e:	2002      	movs	r0, #2
 8006560:	f7ff fcc2 	bl	8005ee8 <LCD_SendData>
    LCD_GotoXY(4, 3);
 8006564:	2103      	movs	r1, #3
 8006566:	2004      	movs	r0, #4
 8006568:	f7ff fd5a 	bl	8006020 <LCD_GotoXY>
    LCD_Print("FUNCTION");
 800656c:	4808      	ldr	r0, [pc, #32]	; (8006590 <Screen_Function+0x70>)
 800656e:	f7ff fd82 	bl	8006076 <LCD_Print>
    LCD_GotoXY(12,3);
 8006572:	2103      	movs	r1, #3
 8006574:	200c      	movs	r0, #12
 8006576:	f7ff fd53 	bl	8006020 <LCD_GotoXY>
    LCD_SendData(_LCD_CHAR_RIGHT);
 800657a:	2000      	movs	r0, #0
 800657c:	f7ff fcb4 	bl	8005ee8 <LCD_SendData>
}
 8006580:	bf00      	nop
 8006582:	3708      	adds	r7, #8
 8006584:	46bd      	mov	sp, r7
 8006586:	bd80      	pop	{r7, pc}
 8006588:	0800e2a0 	.word	0x0800e2a0
 800658c:	0800e2b0 	.word	0x0800e2b0
 8006590:	0800e2c0 	.word	0x0800e2c0

08006594 <Screen_Voltage_Control>:

void Screen_Voltage_Control(uint8_t limit)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b082      	sub	sp, #8
 8006598:	af00      	add	r7, sp, #0
 800659a:	4603      	mov	r3, r0
 800659c:	71fb      	strb	r3, [r7, #7]
//	LCD_Clear();
	LCD_GotoXY(0, 0);
 800659e:	2100      	movs	r1, #0
 80065a0:	2000      	movs	r0, #0
 80065a2:	f7ff fd3d 	bl	8006020 <LCD_GotoXY>
	LCD_Print("Voltage Control");
 80065a6:	481c      	ldr	r0, [pc, #112]	; (8006618 <Screen_Voltage_Control+0x84>)
 80065a8:	f7ff fd65 	bl	8006076 <LCD_Print>
    LCD_GotoXY(0, 1);
 80065ac:	2101      	movs	r1, #1
 80065ae:	2000      	movs	r0, #0
 80065b0:	f7ff fd36 	bl	8006020 <LCD_GotoXY>
    LCD_Print("Step: ");
 80065b4:	4819      	ldr	r0, [pc, #100]	; (800661c <Screen_Voltage_Control+0x88>)
 80065b6:	f7ff fd5e 	bl	8006076 <LCD_Print>
    LCD_GotoXY(0, 2);
 80065ba:	2102      	movs	r1, #2
 80065bc:	2000      	movs	r0, #0
 80065be:	f7ff fd2f 	bl	8006020 <LCD_GotoXY>
    if (limit == 0){
 80065c2:	79fb      	ldrb	r3, [r7, #7]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d103      	bne.n	80065d0 <Screen_Voltage_Control+0x3c>
        LCD_Print("Limit: MIN");
 80065c8:	4815      	ldr	r0, [pc, #84]	; (8006620 <Screen_Voltage_Control+0x8c>)
 80065ca:	f7ff fd54 	bl	8006076 <LCD_Print>
 80065ce:	e009      	b.n	80065e4 <Screen_Voltage_Control+0x50>
    } else if (limit == 1) {
 80065d0:	79fb      	ldrb	r3, [r7, #7]
 80065d2:	2b01      	cmp	r3, #1
 80065d4:	d103      	bne.n	80065de <Screen_Voltage_Control+0x4a>
        LCD_Print("Limit: MAX");
 80065d6:	4813      	ldr	r0, [pc, #76]	; (8006624 <Screen_Voltage_Control+0x90>)
 80065d8:	f7ff fd4d 	bl	8006076 <LCD_Print>
 80065dc:	e002      	b.n	80065e4 <Screen_Voltage_Control+0x50>
    } else {
        LCD_Print("Limit: NONE");
 80065de:	4812      	ldr	r0, [pc, #72]	; (8006628 <Screen_Voltage_Control+0x94>)
 80065e0:	f7ff fd49 	bl	8006076 <LCD_Print>
    }
    LCD_GotoXY(3, 3);
 80065e4:	2103      	movs	r1, #3
 80065e6:	2003      	movs	r0, #3
 80065e8:	f7ff fd1a 	bl	8006020 <LCD_GotoXY>
    LCD_SendData(_LCD_CHAR_LEFT);
 80065ec:	2002      	movs	r0, #2
 80065ee:	f7ff fc7b 	bl	8005ee8 <LCD_SendData>
    LCD_GotoXY(4, 3);
 80065f2:	2103      	movs	r1, #3
 80065f4:	2004      	movs	r0, #4
 80065f6:	f7ff fd13 	bl	8006020 <LCD_GotoXY>
    LCD_Print("FUNCTION");
 80065fa:	480c      	ldr	r0, [pc, #48]	; (800662c <Screen_Voltage_Control+0x98>)
 80065fc:	f7ff fd3b 	bl	8006076 <LCD_Print>
    LCD_GotoXY(12,3);
 8006600:	2103      	movs	r1, #3
 8006602:	200c      	movs	r0, #12
 8006604:	f7ff fd0c 	bl	8006020 <LCD_GotoXY>
    LCD_SendData(_LCD_CHAR_RIGHT);
 8006608:	2000      	movs	r0, #0
 800660a:	f7ff fc6d 	bl	8005ee8 <LCD_SendData>
}
 800660e:	bf00      	nop
 8006610:	3708      	adds	r7, #8
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}
 8006616:	bf00      	nop
 8006618:	0800e2cc 	.word	0x0800e2cc
 800661c:	0800e2dc 	.word	0x0800e2dc
 8006620:	0800e2e4 	.word	0x0800e2e4
 8006624:	0800e2f0 	.word	0x0800e2f0
 8006628:	0800e2fc 	.word	0x0800e2fc
 800662c:	0800e2c0 	.word	0x0800e2c0

08006630 <Screen_Voltage_Control_Control_Motor>:

void Screen_Voltage_Control_Control_Motor(uint16_t step)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b088      	sub	sp, #32
 8006634:	af00      	add	r7, sp, #0
 8006636:	4603      	mov	r3, r0
 8006638:	80fb      	strh	r3, [r7, #6]
//        // Motor go to left
//    } else {
//        // Motor go to left
//    }
//    // Read ADC
	LCD_GotoXY(7, 1);
 800663a:	2101      	movs	r1, #1
 800663c:	2007      	movs	r0, #7
 800663e:	f7ff fcef 	bl	8006020 <LCD_GotoXY>
	sprintf(buffer,"%d", step);
 8006642:	88fa      	ldrh	r2, [r7, #6]
 8006644:	f107 030c 	add.w	r3, r7, #12
 8006648:	4906      	ldr	r1, [pc, #24]	; (8006664 <Screen_Voltage_Control_Control_Motor+0x34>)
 800664a:	4618      	mov	r0, r3
 800664c:	f004 ffb0 	bl	800b5b0 <siprintf>
//	sprintf(buffer,"%01d.%02dV", adc_value/100, adc_value%100);
	LCD_Print(buffer);
 8006650:	f107 030c 	add.w	r3, r7, #12
 8006654:	4618      	mov	r0, r3
 8006656:	f7ff fd0e 	bl	8006076 <LCD_Print>
}
 800665a:	bf00      	nop
 800665c:	3720      	adds	r7, #32
 800665e:	46bd      	mov	sp, r7
 8006660:	bd80      	pop	{r7, pc}
 8006662:	bf00      	nop
 8006664:	0800e308 	.word	0x0800e308

08006668 <Screen_Control_Relay>:

void Screen_Control_Relay(uint8_t position)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b082      	sub	sp, #8
 800666c:	af00      	add	r7, sp, #0
 800666e:	4603      	mov	r3, r0
 8006670:	71fb      	strb	r3, [r7, #7]
//	LCD_Clear();
	LCD_GotoXY(0, position+1);
 8006672:	79fb      	ldrb	r3, [r7, #7]
 8006674:	3301      	adds	r3, #1
 8006676:	b2db      	uxtb	r3, r3
 8006678:	4619      	mov	r1, r3
 800667a:	2000      	movs	r0, #0
 800667c:	f7ff fcd0 	bl	8006020 <LCD_GotoXY>
	LCD_SendData(_LCD_CHAR_RIGHT_INVERT);
 8006680:	2001      	movs	r0, #1
 8006682:	f7ff fc31 	bl	8005ee8 <LCD_SendData>
    LCD_GotoXY(1, 0);
 8006686:	2100      	movs	r1, #0
 8006688:	2001      	movs	r0, #1
 800668a:	f7ff fcc9 	bl	8006020 <LCD_GotoXY>
    LCD_Print("Output Control");
 800668e:	4815      	ldr	r0, [pc, #84]	; (80066e4 <Screen_Control_Relay+0x7c>)
 8006690:	f7ff fcf1 	bl	8006076 <LCD_Print>
    LCD_GotoXY(1, 1);
 8006694:	2101      	movs	r1, #1
 8006696:	2001      	movs	r0, #1
 8006698:	f7ff fcc2 	bl	8006020 <LCD_GotoXY>
    LCD_Print("Trans. is: ");
 800669c:	4812      	ldr	r0, [pc, #72]	; (80066e8 <Screen_Control_Relay+0x80>)
 800669e:	f7ff fcea 	bl	8006076 <LCD_Print>
    LCD_GotoXY(1, 2);
 80066a2:	2102      	movs	r1, #2
 80066a4:	2001      	movs	r0, #1
 80066a6:	f7ff fcbb 	bl	8006020 <LCD_GotoXY>
    LCD_Print("Confirm: ");
 80066aa:	4810      	ldr	r0, [pc, #64]	; (80066ec <Screen_Control_Relay+0x84>)
 80066ac:	f7ff fce3 	bl	8006076 <LCD_Print>
    LCD_GotoXY(3, 3);
 80066b0:	2103      	movs	r1, #3
 80066b2:	2003      	movs	r0, #3
 80066b4:	f7ff fcb4 	bl	8006020 <LCD_GotoXY>
    LCD_SendData(_LCD_CHAR_LEFT);
 80066b8:	2002      	movs	r0, #2
 80066ba:	f7ff fc15 	bl	8005ee8 <LCD_SendData>
    LCD_GotoXY(4, 3);
 80066be:	2103      	movs	r1, #3
 80066c0:	2004      	movs	r0, #4
 80066c2:	f7ff fcad 	bl	8006020 <LCD_GotoXY>
    LCD_Print("FUNCTION");
 80066c6:	480a      	ldr	r0, [pc, #40]	; (80066f0 <Screen_Control_Relay+0x88>)
 80066c8:	f7ff fcd5 	bl	8006076 <LCD_Print>
    LCD_GotoXY(12,3);
 80066cc:	2103      	movs	r1, #3
 80066ce:	200c      	movs	r0, #12
 80066d0:	f7ff fca6 	bl	8006020 <LCD_GotoXY>
    LCD_SendData(_LCD_CHAR_RIGHT);
 80066d4:	2000      	movs	r0, #0
 80066d6:	f7ff fc07 	bl	8005ee8 <LCD_SendData>
}
 80066da:	bf00      	nop
 80066dc:	3708      	adds	r7, #8
 80066de:	46bd      	mov	sp, r7
 80066e0:	bd80      	pop	{r7, pc}
 80066e2:	bf00      	nop
 80066e4:	0800e30c 	.word	0x0800e30c
 80066e8:	0800e31c 	.word	0x0800e31c
 80066ec:	0800e328 	.word	0x0800e328
 80066f0:	0800e2c0 	.word	0x0800e2c0

080066f4 <Screen_Control_Relay_Change_Mode>:

void Screen_Control_Relay_Change_Mode(uint8_t status)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b082      	sub	sp, #8
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	4603      	mov	r3, r0
 80066fc:	71fb      	strb	r3, [r7, #7]
//	if (status == 0){
//		LCD_Print("OFF");
//	} else {
//		LCD_Print("ON");
//	}
	LCD_GotoXY(10, 2);
 80066fe:	2102      	movs	r1, #2
 8006700:	200a      	movs	r0, #10
 8006702:	f7ff fc8d 	bl	8006020 <LCD_GotoXY>
	if (status == 0){
 8006706:	79fb      	ldrb	r3, [r7, #7]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d103      	bne.n	8006714 <Screen_Control_Relay_Change_Mode+0x20>
		LCD_Print("OFF");
 800670c:	4805      	ldr	r0, [pc, #20]	; (8006724 <Screen_Control_Relay_Change_Mode+0x30>)
 800670e:	f7ff fcb2 	bl	8006076 <LCD_Print>
	} else {
		LCD_Print("ON");
	}
}
 8006712:	e002      	b.n	800671a <Screen_Control_Relay_Change_Mode+0x26>
		LCD_Print("ON");
 8006714:	4804      	ldr	r0, [pc, #16]	; (8006728 <Screen_Control_Relay_Change_Mode+0x34>)
 8006716:	f7ff fcae 	bl	8006076 <LCD_Print>
}
 800671a:	bf00      	nop
 800671c:	3708      	adds	r7, #8
 800671e:	46bd      	mov	sp, r7
 8006720:	bd80      	pop	{r7, pc}
 8006722:	bf00      	nop
 8006724:	0800e334 	.word	0x0800e334
 8006728:	0800e338 	.word	0x0800e338

0800672c <Screen_Accept_Relay>:

void Screen_Accept_Relay(_RTC switchtime, uint8_t status)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b08c      	sub	sp, #48	; 0x30
 8006730:	af02      	add	r7, sp, #8
 8006732:	f107 0308 	add.w	r3, r7, #8
 8006736:	e883 0003 	stmia.w	r3, {r0, r1}
 800673a:	4613      	mov	r3, r2
 800673c:	71fb      	strb	r3, [r7, #7]
    char buffer[20];
//    DS3231_GetTime(__MY_RTC);
//	LCD_Clear();
	LCD_GotoXY(1, 0);
 800673e:	2100      	movs	r1, #0
 8006740:	2001      	movs	r0, #1
 8006742:	f7ff fc6d 	bl	8006020 <LCD_GotoXY>
	LCD_Print("Output Control");
 8006746:	4826      	ldr	r0, [pc, #152]	; (80067e0 <Screen_Accept_Relay+0xb4>)
 8006748:	f7ff fc95 	bl	8006076 <LCD_Print>
	LCD_GotoXY(0, 1);
 800674c:	2101      	movs	r1, #1
 800674e:	2000      	movs	r0, #0
 8006750:	f7ff fc66 	bl	8006020 <LCD_GotoXY>
	LCD_Print("SWITCH");
 8006754:	4823      	ldr	r0, [pc, #140]	; (80067e4 <Screen_Accept_Relay+0xb8>)
 8006756:	f7ff fc8e 	bl	8006076 <LCD_Print>
	LCD_GotoXY(7, 1);
 800675a:	2101      	movs	r1, #1
 800675c:	2007      	movs	r0, #7
 800675e:	f7ff fc5f 	bl	8006020 <LCD_GotoXY>
	if (status == 0){
 8006762:	79fb      	ldrb	r3, [r7, #7]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d103      	bne.n	8006770 <Screen_Accept_Relay+0x44>
		LCD_Print("OFF");
 8006768:	481f      	ldr	r0, [pc, #124]	; (80067e8 <Screen_Accept_Relay+0xbc>)
 800676a:	f7ff fc84 	bl	8006076 <LCD_Print>
 800676e:	e002      	b.n	8006776 <Screen_Accept_Relay+0x4a>
	} else {
		LCD_Print("ON");
 8006770:	481e      	ldr	r0, [pc, #120]	; (80067ec <Screen_Accept_Relay+0xc0>)
 8006772:	f7ff fc80 	bl	8006076 <LCD_Print>
	}
	LCD_GotoXY(11, 1);
 8006776:	2101      	movs	r1, #1
 8006778:	200b      	movs	r0, #11
 800677a:	f7ff fc51 	bl	8006020 <LCD_GotoXY>
	LCD_Print("AT:");
 800677e:	481c      	ldr	r0, [pc, #112]	; (80067f0 <Screen_Accept_Relay+0xc4>)
 8006780:	f7ff fc79 	bl	8006076 <LCD_Print>
    LCD_GotoXY(4, 2);
 8006784:	2102      	movs	r1, #2
 8006786:	2004      	movs	r0, #4
 8006788:	f7ff fc4a 	bl	8006020 <LCD_GotoXY>
    sprintf(buffer,"%02d:%02d:%02d", switchtime.Hour, switchtime.Min, switchtime.Sec);
 800678c:	7b3b      	ldrb	r3, [r7, #12]
 800678e:	461a      	mov	r2, r3
 8006790:	7b7b      	ldrb	r3, [r7, #13]
 8006792:	4619      	mov	r1, r3
 8006794:	7bbb      	ldrb	r3, [r7, #14]
 8006796:	f107 0014 	add.w	r0, r7, #20
 800679a:	9300      	str	r3, [sp, #0]
 800679c:	460b      	mov	r3, r1
 800679e:	4915      	ldr	r1, [pc, #84]	; (80067f4 <Screen_Accept_Relay+0xc8>)
 80067a0:	f004 ff06 	bl	800b5b0 <siprintf>
    LCD_Print(buffer);
 80067a4:	f107 0314 	add.w	r3, r7, #20
 80067a8:	4618      	mov	r0, r3
 80067aa:	f7ff fc64 	bl	8006076 <LCD_Print>
    LCD_GotoXY(4, 3);
 80067ae:	2103      	movs	r1, #3
 80067b0:	2004      	movs	r0, #4
 80067b2:	f7ff fc35 	bl	8006020 <LCD_GotoXY>
    sprintf(buffer,"%02d/%02d/%d", switchtime.Date, switchtime.Month, switchtime.Year);
 80067b6:	7abb      	ldrb	r3, [r7, #10]
 80067b8:	461a      	mov	r2, r3
 80067ba:	7a7b      	ldrb	r3, [r7, #9]
 80067bc:	4619      	mov	r1, r3
 80067be:	7a3b      	ldrb	r3, [r7, #8]
 80067c0:	f107 0014 	add.w	r0, r7, #20
 80067c4:	9300      	str	r3, [sp, #0]
 80067c6:	460b      	mov	r3, r1
 80067c8:	490b      	ldr	r1, [pc, #44]	; (80067f8 <Screen_Accept_Relay+0xcc>)
 80067ca:	f004 fef1 	bl	800b5b0 <siprintf>
    LCD_Print(buffer);
 80067ce:	f107 0314 	add.w	r3, r7, #20
 80067d2:	4618      	mov	r0, r3
 80067d4:	f7ff fc4f 	bl	8006076 <LCD_Print>
//    LCD_SendData(_LCD_CHAR_LEFT);
//    LCD_GotoXY(4, 3);
//    LCD_Print("FUNCTION");
//    LCD_GotoXY(12,3);
//    LCD_SendData(_LCD_CHAR_RIGHT);
}
 80067d8:	bf00      	nop
 80067da:	3728      	adds	r7, #40	; 0x28
 80067dc:	46bd      	mov	sp, r7
 80067de:	bd80      	pop	{r7, pc}
 80067e0:	0800e30c 	.word	0x0800e30c
 80067e4:	0800e33c 	.word	0x0800e33c
 80067e8:	0800e334 	.word	0x0800e334
 80067ec:	0800e338 	.word	0x0800e338
 80067f0:	0800e344 	.word	0x0800e344
 80067f4:	0800e190 	.word	0x0800e190
 80067f8:	0800e180 	.word	0x0800e180

080067fc <Reset_Handler>:
 80067fc:	f7fe fefc 	bl	80055f8 <SystemInit>
 8006800:	480b      	ldr	r0, [pc, #44]	; (8006830 <LoopFillZerobss+0xe>)
 8006802:	490c      	ldr	r1, [pc, #48]	; (8006834 <LoopFillZerobss+0x12>)
 8006804:	4a0c      	ldr	r2, [pc, #48]	; (8006838 <LoopFillZerobss+0x16>)
 8006806:	2300      	movs	r3, #0
 8006808:	e002      	b.n	8006810 <LoopCopyDataInit>

0800680a <CopyDataInit>:
 800680a:	58d4      	ldr	r4, [r2, r3]
 800680c:	50c4      	str	r4, [r0, r3]
 800680e:	3304      	adds	r3, #4

08006810 <LoopCopyDataInit>:
 8006810:	18c4      	adds	r4, r0, r3
 8006812:	428c      	cmp	r4, r1
 8006814:	d3f9      	bcc.n	800680a <CopyDataInit>
 8006816:	4a09      	ldr	r2, [pc, #36]	; (800683c <LoopFillZerobss+0x1a>)
 8006818:	4c09      	ldr	r4, [pc, #36]	; (8006840 <LoopFillZerobss+0x1e>)
 800681a:	2300      	movs	r3, #0
 800681c:	e001      	b.n	8006822 <LoopFillZerobss>

0800681e <FillZerobss>:
 800681e:	6013      	str	r3, [r2, #0]
 8006820:	3204      	adds	r2, #4

08006822 <LoopFillZerobss>:
 8006822:	42a2      	cmp	r2, r4
 8006824:	d3fb      	bcc.n	800681e <FillZerobss>
 8006826:	f004 f9bd 	bl	800aba4 <__libc_init_array>
 800682a:	f7fe fb53 	bl	8004ed4 <main>
 800682e:	4770      	bx	lr
 8006830:	20000000 	.word	0x20000000
 8006834:	200005b0 	.word	0x200005b0
 8006838:	0800e780 	.word	0x0800e780
 800683c:	200005b0 	.word	0x200005b0
 8006840:	20003788 	.word	0x20003788

08006844 <CAN1_RX1_IRQHandler>:
 8006844:	e7fe      	b.n	8006844 <CAN1_RX1_IRQHandler>
	...

08006848 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800684c:	4b08      	ldr	r3, [pc, #32]	; (8006870 <HAL_Init+0x28>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a07      	ldr	r2, [pc, #28]	; (8006870 <HAL_Init+0x28>)
 8006852:	f043 0310 	orr.w	r3, r3, #16
 8006856:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006858:	2003      	movs	r0, #3
 800685a:	f000 fd45 	bl	80072e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800685e:	200f      	movs	r0, #15
 8006860:	f000 f808 	bl	8006874 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006864:	f7fe fd46 	bl	80052f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006868:	2300      	movs	r3, #0
}
 800686a:	4618      	mov	r0, r3
 800686c:	bd80      	pop	{r7, pc}
 800686e:	bf00      	nop
 8006870:	40022000 	.word	0x40022000

08006874 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b082      	sub	sp, #8
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800687c:	4b12      	ldr	r3, [pc, #72]	; (80068c8 <HAL_InitTick+0x54>)
 800687e:	681a      	ldr	r2, [r3, #0]
 8006880:	4b12      	ldr	r3, [pc, #72]	; (80068cc <HAL_InitTick+0x58>)
 8006882:	781b      	ldrb	r3, [r3, #0]
 8006884:	4619      	mov	r1, r3
 8006886:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800688a:	fbb3 f3f1 	udiv	r3, r3, r1
 800688e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006892:	4618      	mov	r0, r3
 8006894:	f000 fd5d 	bl	8007352 <HAL_SYSTICK_Config>
 8006898:	4603      	mov	r3, r0
 800689a:	2b00      	cmp	r3, #0
 800689c:	d001      	beq.n	80068a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800689e:	2301      	movs	r3, #1
 80068a0:	e00e      	b.n	80068c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2b0f      	cmp	r3, #15
 80068a6:	d80a      	bhi.n	80068be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80068a8:	2200      	movs	r2, #0
 80068aa:	6879      	ldr	r1, [r7, #4]
 80068ac:	f04f 30ff 	mov.w	r0, #4294967295
 80068b0:	f000 fd25 	bl	80072fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80068b4:	4a06      	ldr	r2, [pc, #24]	; (80068d0 <HAL_InitTick+0x5c>)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80068ba:	2300      	movs	r3, #0
 80068bc:	e000      	b.n	80068c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80068be:	2301      	movs	r3, #1
}
 80068c0:	4618      	mov	r0, r3
 80068c2:	3708      	adds	r7, #8
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bd80      	pop	{r7, pc}
 80068c8:	20000498 	.word	0x20000498
 80068cc:	200004e4 	.word	0x200004e4
 80068d0:	200004e0 	.word	0x200004e0

080068d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80068d4:	b480      	push	{r7}
 80068d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80068d8:	4b05      	ldr	r3, [pc, #20]	; (80068f0 <HAL_IncTick+0x1c>)
 80068da:	781b      	ldrb	r3, [r3, #0]
 80068dc:	461a      	mov	r2, r3
 80068de:	4b05      	ldr	r3, [pc, #20]	; (80068f4 <HAL_IncTick+0x20>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	4413      	add	r3, r2
 80068e4:	4a03      	ldr	r2, [pc, #12]	; (80068f4 <HAL_IncTick+0x20>)
 80068e6:	6013      	str	r3, [r2, #0]
}
 80068e8:	bf00      	nop
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bc80      	pop	{r7}
 80068ee:	4770      	bx	lr
 80068f0:	200004e4 	.word	0x200004e4
 80068f4:	2000374c 	.word	0x2000374c

080068f8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80068f8:	b480      	push	{r7}
 80068fa:	af00      	add	r7, sp, #0
  return uwTick;
 80068fc:	4b02      	ldr	r3, [pc, #8]	; (8006908 <HAL_GetTick+0x10>)
 80068fe:	681b      	ldr	r3, [r3, #0]
}
 8006900:	4618      	mov	r0, r3
 8006902:	46bd      	mov	sp, r7
 8006904:	bc80      	pop	{r7}
 8006906:	4770      	bx	lr
 8006908:	2000374c 	.word	0x2000374c

0800690c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b084      	sub	sp, #16
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006914:	f7ff fff0 	bl	80068f8 <HAL_GetTick>
 8006918:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006924:	d005      	beq.n	8006932 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006926:	4b0a      	ldr	r3, [pc, #40]	; (8006950 <HAL_Delay+0x44>)
 8006928:	781b      	ldrb	r3, [r3, #0]
 800692a:	461a      	mov	r2, r3
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	4413      	add	r3, r2
 8006930:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006932:	bf00      	nop
 8006934:	f7ff ffe0 	bl	80068f8 <HAL_GetTick>
 8006938:	4602      	mov	r2, r0
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	1ad3      	subs	r3, r2, r3
 800693e:	68fa      	ldr	r2, [r7, #12]
 8006940:	429a      	cmp	r2, r3
 8006942:	d8f7      	bhi.n	8006934 <HAL_Delay+0x28>
  {
  }
}
 8006944:	bf00      	nop
 8006946:	bf00      	nop
 8006948:	3710      	adds	r7, #16
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}
 800694e:	bf00      	nop
 8006950:	200004e4 	.word	0x200004e4

08006954 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b086      	sub	sp, #24
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800695c:	2300      	movs	r3, #0
 800695e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8006960:	2300      	movs	r3, #0
 8006962:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8006964:	2300      	movs	r3, #0
 8006966:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8006968:	2300      	movs	r3, #0
 800696a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d101      	bne.n	8006976 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8006972:	2301      	movs	r3, #1
 8006974:	e0be      	b.n	8006af4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	689b      	ldr	r3, [r3, #8]
 800697a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006980:	2b00      	cmp	r3, #0
 8006982:	d109      	bne.n	8006998 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2200      	movs	r2, #0
 8006988:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2200      	movs	r2, #0
 800698e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	f7fd ff2c 	bl	80047f0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8006998:	6878      	ldr	r0, [r7, #4]
 800699a:	f000 fb8f 	bl	80070bc <ADC_ConversionStop_Disable>
 800699e:	4603      	mov	r3, r0
 80069a0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069a6:	f003 0310 	and.w	r3, r3, #16
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	f040 8099 	bne.w	8006ae2 <HAL_ADC_Init+0x18e>
 80069b0:	7dfb      	ldrb	r3, [r7, #23]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	f040 8095 	bne.w	8006ae2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069bc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80069c0:	f023 0302 	bic.w	r3, r3, #2
 80069c4:	f043 0202 	orr.w	r2, r3, #2
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80069d4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	7b1b      	ldrb	r3, [r3, #12]
 80069da:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80069dc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80069de:	68ba      	ldr	r2, [r7, #8]
 80069e0:	4313      	orrs	r3, r2
 80069e2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	689b      	ldr	r3, [r3, #8]
 80069e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069ec:	d003      	beq.n	80069f6 <HAL_ADC_Init+0xa2>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	689b      	ldr	r3, [r3, #8]
 80069f2:	2b01      	cmp	r3, #1
 80069f4:	d102      	bne.n	80069fc <HAL_ADC_Init+0xa8>
 80069f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80069fa:	e000      	b.n	80069fe <HAL_ADC_Init+0xaa>
 80069fc:	2300      	movs	r3, #0
 80069fe:	693a      	ldr	r2, [r7, #16]
 8006a00:	4313      	orrs	r3, r2
 8006a02:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	7d1b      	ldrb	r3, [r3, #20]
 8006a08:	2b01      	cmp	r3, #1
 8006a0a:	d119      	bne.n	8006a40 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	7b1b      	ldrb	r3, [r3, #12]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d109      	bne.n	8006a28 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	699b      	ldr	r3, [r3, #24]
 8006a18:	3b01      	subs	r3, #1
 8006a1a:	035a      	lsls	r2, r3, #13
 8006a1c:	693b      	ldr	r3, [r7, #16]
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006a24:	613b      	str	r3, [r7, #16]
 8006a26:	e00b      	b.n	8006a40 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a2c:	f043 0220 	orr.w	r2, r3, #32
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a38:	f043 0201 	orr.w	r2, r3, #1
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	685b      	ldr	r3, [r3, #4]
 8006a46:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	693a      	ldr	r2, [r7, #16]
 8006a50:	430a      	orrs	r2, r1
 8006a52:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	689a      	ldr	r2, [r3, #8]
 8006a5a:	4b28      	ldr	r3, [pc, #160]	; (8006afc <HAL_ADC_Init+0x1a8>)
 8006a5c:	4013      	ands	r3, r2
 8006a5e:	687a      	ldr	r2, [r7, #4]
 8006a60:	6812      	ldr	r2, [r2, #0]
 8006a62:	68b9      	ldr	r1, [r7, #8]
 8006a64:	430b      	orrs	r3, r1
 8006a66:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	689b      	ldr	r3, [r3, #8]
 8006a6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a70:	d003      	beq.n	8006a7a <HAL_ADC_Init+0x126>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	689b      	ldr	r3, [r3, #8]
 8006a76:	2b01      	cmp	r3, #1
 8006a78:	d104      	bne.n	8006a84 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	691b      	ldr	r3, [r3, #16]
 8006a7e:	3b01      	subs	r3, #1
 8006a80:	051b      	lsls	r3, r3, #20
 8006a82:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a8a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	68fa      	ldr	r2, [r7, #12]
 8006a94:	430a      	orrs	r2, r1
 8006a96:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	689a      	ldr	r2, [r3, #8]
 8006a9e:	4b18      	ldr	r3, [pc, #96]	; (8006b00 <HAL_ADC_Init+0x1ac>)
 8006aa0:	4013      	ands	r3, r2
 8006aa2:	68ba      	ldr	r2, [r7, #8]
 8006aa4:	429a      	cmp	r2, r3
 8006aa6:	d10b      	bne.n	8006ac0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2200      	movs	r2, #0
 8006aac:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ab2:	f023 0303 	bic.w	r3, r3, #3
 8006ab6:	f043 0201 	orr.w	r2, r3, #1
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8006abe:	e018      	b.n	8006af2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ac4:	f023 0312 	bic.w	r3, r3, #18
 8006ac8:	f043 0210 	orr.w	r2, r3, #16
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ad4:	f043 0201 	orr.w	r2, r3, #1
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8006adc:	2301      	movs	r3, #1
 8006ade:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8006ae0:	e007      	b.n	8006af2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ae6:	f043 0210 	orr.w	r2, r3, #16
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8006aee:	2301      	movs	r3, #1
 8006af0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8006af2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	3718      	adds	r7, #24
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bd80      	pop	{r7, pc}
 8006afc:	ffe1f7fd 	.word	0xffe1f7fd
 8006b00:	ff1f0efe 	.word	0xff1f0efe

08006b04 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b084      	sub	sp, #16
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006b16:	2b01      	cmp	r3, #1
 8006b18:	d101      	bne.n	8006b1e <HAL_ADC_Start_IT+0x1a>
 8006b1a:	2302      	movs	r3, #2
 8006b1c:	e0a0      	b.n	8006c60 <HAL_ADC_Start_IT+0x15c>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2201      	movs	r2, #1
 8006b22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f000 fa6e 	bl	8007008 <ADC_Enable>
 8006b2c:	4603      	mov	r3, r0
 8006b2e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8006b30:	7bfb      	ldrb	r3, [r7, #15]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	f040 808f 	bne.w	8006c56 <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b3c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006b40:	f023 0301 	bic.w	r3, r3, #1
 8006b44:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4a45      	ldr	r2, [pc, #276]	; (8006c68 <HAL_ADC_Start_IT+0x164>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d105      	bne.n	8006b62 <HAL_ADC_Start_IT+0x5e>
 8006b56:	4b45      	ldr	r3, [pc, #276]	; (8006c6c <HAL_ADC_Start_IT+0x168>)
 8006b58:	685b      	ldr	r3, [r3, #4]
 8006b5a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d115      	bne.n	8006b8e <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b66:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	685b      	ldr	r3, [r3, #4]
 8006b74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d026      	beq.n	8006bca <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b80:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006b84:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8006b8c:	e01d      	b.n	8006bca <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b92:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	4a33      	ldr	r2, [pc, #204]	; (8006c6c <HAL_ADC_Start_IT+0x168>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d004      	beq.n	8006bae <HAL_ADC_Start_IT+0xaa>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4a2f      	ldr	r2, [pc, #188]	; (8006c68 <HAL_ADC_Start_IT+0x164>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d10d      	bne.n	8006bca <HAL_ADC_Start_IT+0xc6>
 8006bae:	4b2f      	ldr	r3, [pc, #188]	; (8006c6c <HAL_ADC_Start_IT+0x168>)
 8006bb0:	685b      	ldr	r3, [r3, #4]
 8006bb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d007      	beq.n	8006bca <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bbe:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006bc2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d006      	beq.n	8006be4 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bda:	f023 0206 	bic.w	r2, r3, #6
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	62da      	str	r2, [r3, #44]	; 0x2c
 8006be2:	e002      	b.n	8006bea <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2200      	movs	r2, #0
 8006be8:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2200      	movs	r2, #0
 8006bee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f06f 0202 	mvn.w	r2, #2
 8006bfa:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	685a      	ldr	r2, [r3, #4]
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f042 0220 	orr.w	r2, r2, #32
 8006c0a:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	689b      	ldr	r3, [r3, #8]
 8006c12:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8006c16:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8006c1a:	d113      	bne.n	8006c44 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8006c20:	4a11      	ldr	r2, [pc, #68]	; (8006c68 <HAL_ADC_Start_IT+0x164>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d105      	bne.n	8006c32 <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8006c26:	4b11      	ldr	r3, [pc, #68]	; (8006c6c <HAL_ADC_Start_IT+0x168>)
 8006c28:	685b      	ldr	r3, [r3, #4]
 8006c2a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d108      	bne.n	8006c44 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	689a      	ldr	r2, [r3, #8]
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8006c40:	609a      	str	r2, [r3, #8]
 8006c42:	e00c      	b.n	8006c5e <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	689a      	ldr	r2, [r3, #8]
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006c52:	609a      	str	r2, [r3, #8]
 8006c54:	e003      	b.n	8006c5e <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8006c5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c60:	4618      	mov	r0, r3
 8006c62:	3710      	adds	r7, #16
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bd80      	pop	{r7, pc}
 8006c68:	40012800 	.word	0x40012800
 8006c6c:	40012400 	.word	0x40012400

08006c70 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8006c70:	b480      	push	{r7}
 8006c72:	b083      	sub	sp, #12
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8006c7e:	4618      	mov	r0, r3
 8006c80:	370c      	adds	r7, #12
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bc80      	pop	{r7}
 8006c86:	4770      	bx	lr

08006c88 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b084      	sub	sp, #16
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	685b      	ldr	r3, [r3, #4]
 8006c9e:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	f003 0320 	and.w	r3, r3, #32
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d03e      	beq.n	8006d28 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	f003 0302 	and.w	r3, r3, #2
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d039      	beq.n	8006d28 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cb8:	f003 0310 	and.w	r3, r3, #16
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d105      	bne.n	8006ccc <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cc4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	689b      	ldr	r3, [r3, #8]
 8006cd2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8006cd6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8006cda:	d11d      	bne.n	8006d18 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d119      	bne.n	8006d18 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	685a      	ldr	r2, [r3, #4]
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f022 0220 	bic.w	r2, r2, #32
 8006cf2:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cf8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d105      	bne.n	8006d18 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d10:	f043 0201 	orr.w	r2, r3, #1
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	f7fe f899 	bl	8004e50 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f06f 0212 	mvn.w	r2, #18
 8006d26:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d04d      	beq.n	8006dce <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	f003 0304 	and.w	r3, r3, #4
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d048      	beq.n	8006dce <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d40:	f003 0310 	and.w	r3, r3, #16
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d105      	bne.n	8006d54 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d4c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	689b      	ldr	r3, [r3, #8]
 8006d5a:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8006d5e:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8006d62:	d012      	beq.n	8006d8a <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	685b      	ldr	r3, [r3, #4]
 8006d6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d125      	bne.n	8006dbe <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	689b      	ldr	r3, [r3, #8]
 8006d78:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8006d7c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8006d80:	d11d      	bne.n	8006dbe <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d119      	bne.n	8006dbe <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	685a      	ldr	r2, [r3, #4]
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006d98:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d9e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006daa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d105      	bne.n	8006dbe <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006db6:	f043 0201 	orr.w	r2, r3, #1
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f000 f9bd 	bl	800713e <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f06f 020c 	mvn.w	r2, #12
 8006dcc:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8006dce:	68bb      	ldr	r3, [r7, #8]
 8006dd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d012      	beq.n	8006dfe <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	f003 0301 	and.w	r3, r3, #1
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d00d      	beq.n	8006dfe <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006de6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f000 f809 	bl	8006e06 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f06f 0201 	mvn.w	r2, #1
 8006dfc:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8006dfe:	bf00      	nop
 8006e00:	3710      	adds	r7, #16
 8006e02:	46bd      	mov	sp, r7
 8006e04:	bd80      	pop	{r7, pc}

08006e06 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8006e06:	b480      	push	{r7}
 8006e08:	b083      	sub	sp, #12
 8006e0a:	af00      	add	r7, sp, #0
 8006e0c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8006e0e:	bf00      	nop
 8006e10:	370c      	adds	r7, #12
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bc80      	pop	{r7}
 8006e16:	4770      	bx	lr

08006e18 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8006e18:	b480      	push	{r7}
 8006e1a:	b085      	sub	sp, #20
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
 8006e20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006e22:	2300      	movs	r3, #0
 8006e24:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8006e26:	2300      	movs	r3, #0
 8006e28:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006e30:	2b01      	cmp	r3, #1
 8006e32:	d101      	bne.n	8006e38 <HAL_ADC_ConfigChannel+0x20>
 8006e34:	2302      	movs	r3, #2
 8006e36:	e0dc      	b.n	8006ff2 <HAL_ADC_ConfigChannel+0x1da>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	685b      	ldr	r3, [r3, #4]
 8006e44:	2b06      	cmp	r3, #6
 8006e46:	d81c      	bhi.n	8006e82 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	685a      	ldr	r2, [r3, #4]
 8006e52:	4613      	mov	r3, r2
 8006e54:	009b      	lsls	r3, r3, #2
 8006e56:	4413      	add	r3, r2
 8006e58:	3b05      	subs	r3, #5
 8006e5a:	221f      	movs	r2, #31
 8006e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8006e60:	43db      	mvns	r3, r3
 8006e62:	4019      	ands	r1, r3
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	6818      	ldr	r0, [r3, #0]
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	685a      	ldr	r2, [r3, #4]
 8006e6c:	4613      	mov	r3, r2
 8006e6e:	009b      	lsls	r3, r3, #2
 8006e70:	4413      	add	r3, r2
 8006e72:	3b05      	subs	r3, #5
 8006e74:	fa00 f203 	lsl.w	r2, r0, r3
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	430a      	orrs	r2, r1
 8006e7e:	635a      	str	r2, [r3, #52]	; 0x34
 8006e80:	e03c      	b.n	8006efc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	685b      	ldr	r3, [r3, #4]
 8006e86:	2b0c      	cmp	r3, #12
 8006e88:	d81c      	bhi.n	8006ec4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	685a      	ldr	r2, [r3, #4]
 8006e94:	4613      	mov	r3, r2
 8006e96:	009b      	lsls	r3, r3, #2
 8006e98:	4413      	add	r3, r2
 8006e9a:	3b23      	subs	r3, #35	; 0x23
 8006e9c:	221f      	movs	r2, #31
 8006e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8006ea2:	43db      	mvns	r3, r3
 8006ea4:	4019      	ands	r1, r3
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	6818      	ldr	r0, [r3, #0]
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	685a      	ldr	r2, [r3, #4]
 8006eae:	4613      	mov	r3, r2
 8006eb0:	009b      	lsls	r3, r3, #2
 8006eb2:	4413      	add	r3, r2
 8006eb4:	3b23      	subs	r3, #35	; 0x23
 8006eb6:	fa00 f203 	lsl.w	r2, r0, r3
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	430a      	orrs	r2, r1
 8006ec0:	631a      	str	r2, [r3, #48]	; 0x30
 8006ec2:	e01b      	b.n	8006efc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	685a      	ldr	r2, [r3, #4]
 8006ece:	4613      	mov	r3, r2
 8006ed0:	009b      	lsls	r3, r3, #2
 8006ed2:	4413      	add	r3, r2
 8006ed4:	3b41      	subs	r3, #65	; 0x41
 8006ed6:	221f      	movs	r2, #31
 8006ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8006edc:	43db      	mvns	r3, r3
 8006ede:	4019      	ands	r1, r3
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	6818      	ldr	r0, [r3, #0]
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	685a      	ldr	r2, [r3, #4]
 8006ee8:	4613      	mov	r3, r2
 8006eea:	009b      	lsls	r3, r3, #2
 8006eec:	4413      	add	r3, r2
 8006eee:	3b41      	subs	r3, #65	; 0x41
 8006ef0:	fa00 f203 	lsl.w	r2, r0, r3
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	430a      	orrs	r2, r1
 8006efa:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	2b09      	cmp	r3, #9
 8006f02:	d91c      	bls.n	8006f3e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	68d9      	ldr	r1, [r3, #12]
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	681a      	ldr	r2, [r3, #0]
 8006f0e:	4613      	mov	r3, r2
 8006f10:	005b      	lsls	r3, r3, #1
 8006f12:	4413      	add	r3, r2
 8006f14:	3b1e      	subs	r3, #30
 8006f16:	2207      	movs	r2, #7
 8006f18:	fa02 f303 	lsl.w	r3, r2, r3
 8006f1c:	43db      	mvns	r3, r3
 8006f1e:	4019      	ands	r1, r3
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	6898      	ldr	r0, [r3, #8]
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	681a      	ldr	r2, [r3, #0]
 8006f28:	4613      	mov	r3, r2
 8006f2a:	005b      	lsls	r3, r3, #1
 8006f2c:	4413      	add	r3, r2
 8006f2e:	3b1e      	subs	r3, #30
 8006f30:	fa00 f203 	lsl.w	r2, r0, r3
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	430a      	orrs	r2, r1
 8006f3a:	60da      	str	r2, [r3, #12]
 8006f3c:	e019      	b.n	8006f72 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	6919      	ldr	r1, [r3, #16]
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	681a      	ldr	r2, [r3, #0]
 8006f48:	4613      	mov	r3, r2
 8006f4a:	005b      	lsls	r3, r3, #1
 8006f4c:	4413      	add	r3, r2
 8006f4e:	2207      	movs	r2, #7
 8006f50:	fa02 f303 	lsl.w	r3, r2, r3
 8006f54:	43db      	mvns	r3, r3
 8006f56:	4019      	ands	r1, r3
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	6898      	ldr	r0, [r3, #8]
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	681a      	ldr	r2, [r3, #0]
 8006f60:	4613      	mov	r3, r2
 8006f62:	005b      	lsls	r3, r3, #1
 8006f64:	4413      	add	r3, r2
 8006f66:	fa00 f203 	lsl.w	r2, r0, r3
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	430a      	orrs	r2, r1
 8006f70:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	2b10      	cmp	r3, #16
 8006f78:	d003      	beq.n	8006f82 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8006f7e:	2b11      	cmp	r3, #17
 8006f80:	d132      	bne.n	8006fe8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	4a1d      	ldr	r2, [pc, #116]	; (8006ffc <HAL_ADC_ConfigChannel+0x1e4>)
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d125      	bne.n	8006fd8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	689b      	ldr	r3, [r3, #8]
 8006f92:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d126      	bne.n	8006fe8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	689a      	ldr	r2, [r3, #8]
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8006fa8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	2b10      	cmp	r3, #16
 8006fb0:	d11a      	bne.n	8006fe8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006fb2:	4b13      	ldr	r3, [pc, #76]	; (8007000 <HAL_ADC_ConfigChannel+0x1e8>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4a13      	ldr	r2, [pc, #76]	; (8007004 <HAL_ADC_ConfigChannel+0x1ec>)
 8006fb8:	fba2 2303 	umull	r2, r3, r2, r3
 8006fbc:	0c9a      	lsrs	r2, r3, #18
 8006fbe:	4613      	mov	r3, r2
 8006fc0:	009b      	lsls	r3, r3, #2
 8006fc2:	4413      	add	r3, r2
 8006fc4:	005b      	lsls	r3, r3, #1
 8006fc6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8006fc8:	e002      	b.n	8006fd0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	3b01      	subs	r3, #1
 8006fce:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8006fd0:	68bb      	ldr	r3, [r7, #8]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d1f9      	bne.n	8006fca <HAL_ADC_ConfigChannel+0x1b2>
 8006fd6:	e007      	b.n	8006fe8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fdc:	f043 0220 	orr.w	r2, r3, #32
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8006fe4:	2301      	movs	r3, #1
 8006fe6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2200      	movs	r2, #0
 8006fec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8006ff0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	3714      	adds	r7, #20
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bc80      	pop	{r7}
 8006ffa:	4770      	bx	lr
 8006ffc:	40012400 	.word	0x40012400
 8007000:	20000498 	.word	0x20000498
 8007004:	431bde83 	.word	0x431bde83

08007008 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b084      	sub	sp, #16
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007010:	2300      	movs	r3, #0
 8007012:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8007014:	2300      	movs	r3, #0
 8007016:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	689b      	ldr	r3, [r3, #8]
 800701e:	f003 0301 	and.w	r3, r3, #1
 8007022:	2b01      	cmp	r3, #1
 8007024:	d040      	beq.n	80070a8 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	689a      	ldr	r2, [r3, #8]
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f042 0201 	orr.w	r2, r2, #1
 8007034:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8007036:	4b1f      	ldr	r3, [pc, #124]	; (80070b4 <ADC_Enable+0xac>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4a1f      	ldr	r2, [pc, #124]	; (80070b8 <ADC_Enable+0xb0>)
 800703c:	fba2 2303 	umull	r2, r3, r2, r3
 8007040:	0c9b      	lsrs	r3, r3, #18
 8007042:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8007044:	e002      	b.n	800704c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8007046:	68bb      	ldr	r3, [r7, #8]
 8007048:	3b01      	subs	r3, #1
 800704a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d1f9      	bne.n	8007046 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8007052:	f7ff fc51 	bl	80068f8 <HAL_GetTick>
 8007056:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8007058:	e01f      	b.n	800709a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800705a:	f7ff fc4d 	bl	80068f8 <HAL_GetTick>
 800705e:	4602      	mov	r2, r0
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	1ad3      	subs	r3, r2, r3
 8007064:	2b02      	cmp	r3, #2
 8007066:	d918      	bls.n	800709a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	689b      	ldr	r3, [r3, #8]
 800706e:	f003 0301 	and.w	r3, r3, #1
 8007072:	2b01      	cmp	r3, #1
 8007074:	d011      	beq.n	800709a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800707a:	f043 0210 	orr.w	r2, r3, #16
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007086:	f043 0201 	orr.w	r2, r3, #1
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2200      	movs	r2, #0
 8007092:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8007096:	2301      	movs	r3, #1
 8007098:	e007      	b.n	80070aa <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	689b      	ldr	r3, [r3, #8]
 80070a0:	f003 0301 	and.w	r3, r3, #1
 80070a4:	2b01      	cmp	r3, #1
 80070a6:	d1d8      	bne.n	800705a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80070a8:	2300      	movs	r3, #0
}
 80070aa:	4618      	mov	r0, r3
 80070ac:	3710      	adds	r7, #16
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bd80      	pop	{r7, pc}
 80070b2:	bf00      	nop
 80070b4:	20000498 	.word	0x20000498
 80070b8:	431bde83 	.word	0x431bde83

080070bc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b084      	sub	sp, #16
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80070c4:	2300      	movs	r3, #0
 80070c6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	689b      	ldr	r3, [r3, #8]
 80070ce:	f003 0301 	and.w	r3, r3, #1
 80070d2:	2b01      	cmp	r3, #1
 80070d4:	d12e      	bne.n	8007134 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	689a      	ldr	r2, [r3, #8]
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f022 0201 	bic.w	r2, r2, #1
 80070e4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80070e6:	f7ff fc07 	bl	80068f8 <HAL_GetTick>
 80070ea:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80070ec:	e01b      	b.n	8007126 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80070ee:	f7ff fc03 	bl	80068f8 <HAL_GetTick>
 80070f2:	4602      	mov	r2, r0
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	1ad3      	subs	r3, r2, r3
 80070f8:	2b02      	cmp	r3, #2
 80070fa:	d914      	bls.n	8007126 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	689b      	ldr	r3, [r3, #8]
 8007102:	f003 0301 	and.w	r3, r3, #1
 8007106:	2b01      	cmp	r3, #1
 8007108:	d10d      	bne.n	8007126 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800710e:	f043 0210 	orr.w	r2, r3, #16
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800711a:	f043 0201 	orr.w	r2, r3, #1
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8007122:	2301      	movs	r3, #1
 8007124:	e007      	b.n	8007136 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	689b      	ldr	r3, [r3, #8]
 800712c:	f003 0301 	and.w	r3, r3, #1
 8007130:	2b01      	cmp	r3, #1
 8007132:	d0dc      	beq.n	80070ee <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8007134:	2300      	movs	r3, #0
}
 8007136:	4618      	mov	r0, r3
 8007138:	3710      	adds	r7, #16
 800713a:	46bd      	mov	sp, r7
 800713c:	bd80      	pop	{r7, pc}

0800713e <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800713e:	b480      	push	{r7}
 8007140:	b083      	sub	sp, #12
 8007142:	af00      	add	r7, sp, #0
 8007144:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8007146:	bf00      	nop
 8007148:	370c      	adds	r7, #12
 800714a:	46bd      	mov	sp, r7
 800714c:	bc80      	pop	{r7}
 800714e:	4770      	bx	lr

08007150 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007150:	b480      	push	{r7}
 8007152:	b085      	sub	sp, #20
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	f003 0307 	and.w	r3, r3, #7
 800715e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007160:	4b0c      	ldr	r3, [pc, #48]	; (8007194 <__NVIC_SetPriorityGrouping+0x44>)
 8007162:	68db      	ldr	r3, [r3, #12]
 8007164:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007166:	68ba      	ldr	r2, [r7, #8]
 8007168:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800716c:	4013      	ands	r3, r2
 800716e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007174:	68bb      	ldr	r3, [r7, #8]
 8007176:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007178:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800717c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007180:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007182:	4a04      	ldr	r2, [pc, #16]	; (8007194 <__NVIC_SetPriorityGrouping+0x44>)
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	60d3      	str	r3, [r2, #12]
}
 8007188:	bf00      	nop
 800718a:	3714      	adds	r7, #20
 800718c:	46bd      	mov	sp, r7
 800718e:	bc80      	pop	{r7}
 8007190:	4770      	bx	lr
 8007192:	bf00      	nop
 8007194:	e000ed00 	.word	0xe000ed00

08007198 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007198:	b480      	push	{r7}
 800719a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800719c:	4b04      	ldr	r3, [pc, #16]	; (80071b0 <__NVIC_GetPriorityGrouping+0x18>)
 800719e:	68db      	ldr	r3, [r3, #12]
 80071a0:	0a1b      	lsrs	r3, r3, #8
 80071a2:	f003 0307 	and.w	r3, r3, #7
}
 80071a6:	4618      	mov	r0, r3
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bc80      	pop	{r7}
 80071ac:	4770      	bx	lr
 80071ae:	bf00      	nop
 80071b0:	e000ed00 	.word	0xe000ed00

080071b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80071b4:	b480      	push	{r7}
 80071b6:	b083      	sub	sp, #12
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	4603      	mov	r3, r0
 80071bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80071be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	db0b      	blt.n	80071de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80071c6:	79fb      	ldrb	r3, [r7, #7]
 80071c8:	f003 021f 	and.w	r2, r3, #31
 80071cc:	4906      	ldr	r1, [pc, #24]	; (80071e8 <__NVIC_EnableIRQ+0x34>)
 80071ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80071d2:	095b      	lsrs	r3, r3, #5
 80071d4:	2001      	movs	r0, #1
 80071d6:	fa00 f202 	lsl.w	r2, r0, r2
 80071da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80071de:	bf00      	nop
 80071e0:	370c      	adds	r7, #12
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bc80      	pop	{r7}
 80071e6:	4770      	bx	lr
 80071e8:	e000e100 	.word	0xe000e100

080071ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80071ec:	b480      	push	{r7}
 80071ee:	b083      	sub	sp, #12
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	4603      	mov	r3, r0
 80071f4:	6039      	str	r1, [r7, #0]
 80071f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80071f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	db0a      	blt.n	8007216 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	b2da      	uxtb	r2, r3
 8007204:	490c      	ldr	r1, [pc, #48]	; (8007238 <__NVIC_SetPriority+0x4c>)
 8007206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800720a:	0112      	lsls	r2, r2, #4
 800720c:	b2d2      	uxtb	r2, r2
 800720e:	440b      	add	r3, r1
 8007210:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007214:	e00a      	b.n	800722c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	b2da      	uxtb	r2, r3
 800721a:	4908      	ldr	r1, [pc, #32]	; (800723c <__NVIC_SetPriority+0x50>)
 800721c:	79fb      	ldrb	r3, [r7, #7]
 800721e:	f003 030f 	and.w	r3, r3, #15
 8007222:	3b04      	subs	r3, #4
 8007224:	0112      	lsls	r2, r2, #4
 8007226:	b2d2      	uxtb	r2, r2
 8007228:	440b      	add	r3, r1
 800722a:	761a      	strb	r2, [r3, #24]
}
 800722c:	bf00      	nop
 800722e:	370c      	adds	r7, #12
 8007230:	46bd      	mov	sp, r7
 8007232:	bc80      	pop	{r7}
 8007234:	4770      	bx	lr
 8007236:	bf00      	nop
 8007238:	e000e100 	.word	0xe000e100
 800723c:	e000ed00 	.word	0xe000ed00

08007240 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007240:	b480      	push	{r7}
 8007242:	b089      	sub	sp, #36	; 0x24
 8007244:	af00      	add	r7, sp, #0
 8007246:	60f8      	str	r0, [r7, #12]
 8007248:	60b9      	str	r1, [r7, #8]
 800724a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	f003 0307 	and.w	r3, r3, #7
 8007252:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007254:	69fb      	ldr	r3, [r7, #28]
 8007256:	f1c3 0307 	rsb	r3, r3, #7
 800725a:	2b04      	cmp	r3, #4
 800725c:	bf28      	it	cs
 800725e:	2304      	movcs	r3, #4
 8007260:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007262:	69fb      	ldr	r3, [r7, #28]
 8007264:	3304      	adds	r3, #4
 8007266:	2b06      	cmp	r3, #6
 8007268:	d902      	bls.n	8007270 <NVIC_EncodePriority+0x30>
 800726a:	69fb      	ldr	r3, [r7, #28]
 800726c:	3b03      	subs	r3, #3
 800726e:	e000      	b.n	8007272 <NVIC_EncodePriority+0x32>
 8007270:	2300      	movs	r3, #0
 8007272:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007274:	f04f 32ff 	mov.w	r2, #4294967295
 8007278:	69bb      	ldr	r3, [r7, #24]
 800727a:	fa02 f303 	lsl.w	r3, r2, r3
 800727e:	43da      	mvns	r2, r3
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	401a      	ands	r2, r3
 8007284:	697b      	ldr	r3, [r7, #20]
 8007286:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007288:	f04f 31ff 	mov.w	r1, #4294967295
 800728c:	697b      	ldr	r3, [r7, #20]
 800728e:	fa01 f303 	lsl.w	r3, r1, r3
 8007292:	43d9      	mvns	r1, r3
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007298:	4313      	orrs	r3, r2
         );
}
 800729a:	4618      	mov	r0, r3
 800729c:	3724      	adds	r7, #36	; 0x24
 800729e:	46bd      	mov	sp, r7
 80072a0:	bc80      	pop	{r7}
 80072a2:	4770      	bx	lr

080072a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b082      	sub	sp, #8
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	3b01      	subs	r3, #1
 80072b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80072b4:	d301      	bcc.n	80072ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80072b6:	2301      	movs	r3, #1
 80072b8:	e00f      	b.n	80072da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80072ba:	4a0a      	ldr	r2, [pc, #40]	; (80072e4 <SysTick_Config+0x40>)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	3b01      	subs	r3, #1
 80072c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80072c2:	210f      	movs	r1, #15
 80072c4:	f04f 30ff 	mov.w	r0, #4294967295
 80072c8:	f7ff ff90 	bl	80071ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80072cc:	4b05      	ldr	r3, [pc, #20]	; (80072e4 <SysTick_Config+0x40>)
 80072ce:	2200      	movs	r2, #0
 80072d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80072d2:	4b04      	ldr	r3, [pc, #16]	; (80072e4 <SysTick_Config+0x40>)
 80072d4:	2207      	movs	r2, #7
 80072d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80072d8:	2300      	movs	r3, #0
}
 80072da:	4618      	mov	r0, r3
 80072dc:	3708      	adds	r7, #8
 80072de:	46bd      	mov	sp, r7
 80072e0:	bd80      	pop	{r7, pc}
 80072e2:	bf00      	nop
 80072e4:	e000e010 	.word	0xe000e010

080072e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b082      	sub	sp, #8
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f7ff ff2d 	bl	8007150 <__NVIC_SetPriorityGrouping>
}
 80072f6:	bf00      	nop
 80072f8:	3708      	adds	r7, #8
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bd80      	pop	{r7, pc}

080072fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80072fe:	b580      	push	{r7, lr}
 8007300:	b086      	sub	sp, #24
 8007302:	af00      	add	r7, sp, #0
 8007304:	4603      	mov	r3, r0
 8007306:	60b9      	str	r1, [r7, #8]
 8007308:	607a      	str	r2, [r7, #4]
 800730a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800730c:	2300      	movs	r3, #0
 800730e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007310:	f7ff ff42 	bl	8007198 <__NVIC_GetPriorityGrouping>
 8007314:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007316:	687a      	ldr	r2, [r7, #4]
 8007318:	68b9      	ldr	r1, [r7, #8]
 800731a:	6978      	ldr	r0, [r7, #20]
 800731c:	f7ff ff90 	bl	8007240 <NVIC_EncodePriority>
 8007320:	4602      	mov	r2, r0
 8007322:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007326:	4611      	mov	r1, r2
 8007328:	4618      	mov	r0, r3
 800732a:	f7ff ff5f 	bl	80071ec <__NVIC_SetPriority>
}
 800732e:	bf00      	nop
 8007330:	3718      	adds	r7, #24
 8007332:	46bd      	mov	sp, r7
 8007334:	bd80      	pop	{r7, pc}

08007336 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007336:	b580      	push	{r7, lr}
 8007338:	b082      	sub	sp, #8
 800733a:	af00      	add	r7, sp, #0
 800733c:	4603      	mov	r3, r0
 800733e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007340:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007344:	4618      	mov	r0, r3
 8007346:	f7ff ff35 	bl	80071b4 <__NVIC_EnableIRQ>
}
 800734a:	bf00      	nop
 800734c:	3708      	adds	r7, #8
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}

08007352 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007352:	b580      	push	{r7, lr}
 8007354:	b082      	sub	sp, #8
 8007356:	af00      	add	r7, sp, #0
 8007358:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f7ff ffa2 	bl	80072a4 <SysTick_Config>
 8007360:	4603      	mov	r3, r0
}
 8007362:	4618      	mov	r0, r3
 8007364:	3708      	adds	r7, #8
 8007366:	46bd      	mov	sp, r7
 8007368:	bd80      	pop	{r7, pc}
	...

0800736c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800736c:	b480      	push	{r7}
 800736e:	b085      	sub	sp, #20
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007374:	2300      	movs	r3, #0
 8007376:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d101      	bne.n	8007382 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800737e:	2301      	movs	r3, #1
 8007380:	e043      	b.n	800740a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	461a      	mov	r2, r3
 8007388:	4b22      	ldr	r3, [pc, #136]	; (8007414 <HAL_DMA_Init+0xa8>)
 800738a:	4413      	add	r3, r2
 800738c:	4a22      	ldr	r2, [pc, #136]	; (8007418 <HAL_DMA_Init+0xac>)
 800738e:	fba2 2303 	umull	r2, r3, r2, r3
 8007392:	091b      	lsrs	r3, r3, #4
 8007394:	009a      	lsls	r2, r3, #2
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	4a1f      	ldr	r2, [pc, #124]	; (800741c <HAL_DMA_Init+0xb0>)
 800739e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2202      	movs	r2, #2
 80073a4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80073b6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80073ba:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80073c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	68db      	ldr	r3, [r3, #12]
 80073ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80073d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	695b      	ldr	r3, [r3, #20]
 80073d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80073dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	69db      	ldr	r3, [r3, #28]
 80073e2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80073e4:	68fa      	ldr	r2, [r7, #12]
 80073e6:	4313      	orrs	r3, r2
 80073e8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	68fa      	ldr	r2, [r7, #12]
 80073f0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2200      	movs	r2, #0
 80073f6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2201      	movs	r2, #1
 80073fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2200      	movs	r2, #0
 8007404:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8007408:	2300      	movs	r3, #0
}
 800740a:	4618      	mov	r0, r3
 800740c:	3714      	adds	r7, #20
 800740e:	46bd      	mov	sp, r7
 8007410:	bc80      	pop	{r7}
 8007412:	4770      	bx	lr
 8007414:	bffdfff8 	.word	0xbffdfff8
 8007418:	cccccccd 	.word	0xcccccccd
 800741c:	40020000 	.word	0x40020000

08007420 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b086      	sub	sp, #24
 8007424:	af00      	add	r7, sp, #0
 8007426:	60f8      	str	r0, [r7, #12]
 8007428:	60b9      	str	r1, [r7, #8]
 800742a:	607a      	str	r2, [r7, #4]
 800742c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800742e:	2300      	movs	r3, #0
 8007430:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007438:	2b01      	cmp	r3, #1
 800743a:	d101      	bne.n	8007440 <HAL_DMA_Start_IT+0x20>
 800743c:	2302      	movs	r3, #2
 800743e:	e04b      	b.n	80074d8 <HAL_DMA_Start_IT+0xb8>
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	2201      	movs	r2, #1
 8007444:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800744e:	b2db      	uxtb	r3, r3
 8007450:	2b01      	cmp	r3, #1
 8007452:	d13a      	bne.n	80074ca <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	2202      	movs	r2, #2
 8007458:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	2200      	movs	r2, #0
 8007460:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	681a      	ldr	r2, [r3, #0]
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f022 0201 	bic.w	r2, r2, #1
 8007470:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	687a      	ldr	r2, [r7, #4]
 8007476:	68b9      	ldr	r1, [r7, #8]
 8007478:	68f8      	ldr	r0, [r7, #12]
 800747a:	f000 f9eb 	bl	8007854 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007482:	2b00      	cmp	r3, #0
 8007484:	d008      	beq.n	8007498 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	681a      	ldr	r2, [r3, #0]
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f042 020e 	orr.w	r2, r2, #14
 8007494:	601a      	str	r2, [r3, #0]
 8007496:	e00f      	b.n	80074b8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	681a      	ldr	r2, [r3, #0]
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f022 0204 	bic.w	r2, r2, #4
 80074a6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	681a      	ldr	r2, [r3, #0]
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f042 020a 	orr.w	r2, r2, #10
 80074b6:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	681a      	ldr	r2, [r3, #0]
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f042 0201 	orr.w	r2, r2, #1
 80074c6:	601a      	str	r2, [r3, #0]
 80074c8:	e005      	b.n	80074d6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	2200      	movs	r2, #0
 80074ce:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80074d2:	2302      	movs	r3, #2
 80074d4:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80074d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80074d8:	4618      	mov	r0, r3
 80074da:	3718      	adds	r7, #24
 80074dc:	46bd      	mov	sp, r7
 80074de:	bd80      	pop	{r7, pc}

080074e0 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80074e0:	b480      	push	{r7}
 80074e2:	b085      	sub	sp, #20
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80074e8:	2300      	movs	r3, #0
 80074ea:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80074f2:	b2db      	uxtb	r3, r3
 80074f4:	2b02      	cmp	r3, #2
 80074f6:	d008      	beq.n	800750a <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2204      	movs	r2, #4
 80074fc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2200      	movs	r2, #0
 8007502:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8007506:	2301      	movs	r3, #1
 8007508:	e020      	b.n	800754c <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	681a      	ldr	r2, [r3, #0]
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f022 020e 	bic.w	r2, r2, #14
 8007518:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	681a      	ldr	r2, [r3, #0]
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f022 0201 	bic.w	r2, r2, #1
 8007528:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007532:	2101      	movs	r1, #1
 8007534:	fa01 f202 	lsl.w	r2, r1, r2
 8007538:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2201      	movs	r2, #1
 800753e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2200      	movs	r2, #0
 8007546:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800754a:	7bfb      	ldrb	r3, [r7, #15]
}
 800754c:	4618      	mov	r0, r3
 800754e:	3714      	adds	r7, #20
 8007550:	46bd      	mov	sp, r7
 8007552:	bc80      	pop	{r7}
 8007554:	4770      	bx	lr
	...

08007558 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8007558:	b580      	push	{r7, lr}
 800755a:	b084      	sub	sp, #16
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007560:	2300      	movs	r3, #0
 8007562:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800756a:	b2db      	uxtb	r3, r3
 800756c:	2b02      	cmp	r3, #2
 800756e:	d005      	beq.n	800757c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2204      	movs	r2, #4
 8007574:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8007576:	2301      	movs	r3, #1
 8007578:	73fb      	strb	r3, [r7, #15]
 800757a:	e051      	b.n	8007620 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	681a      	ldr	r2, [r3, #0]
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f022 020e 	bic.w	r2, r2, #14
 800758a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	681a      	ldr	r2, [r3, #0]
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f022 0201 	bic.w	r2, r2, #1
 800759a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	4a22      	ldr	r2, [pc, #136]	; (800762c <HAL_DMA_Abort_IT+0xd4>)
 80075a2:	4293      	cmp	r3, r2
 80075a4:	d029      	beq.n	80075fa <HAL_DMA_Abort_IT+0xa2>
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	4a21      	ldr	r2, [pc, #132]	; (8007630 <HAL_DMA_Abort_IT+0xd8>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d022      	beq.n	80075f6 <HAL_DMA_Abort_IT+0x9e>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	4a1f      	ldr	r2, [pc, #124]	; (8007634 <HAL_DMA_Abort_IT+0xdc>)
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d01a      	beq.n	80075f0 <HAL_DMA_Abort_IT+0x98>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	4a1e      	ldr	r2, [pc, #120]	; (8007638 <HAL_DMA_Abort_IT+0xe0>)
 80075c0:	4293      	cmp	r3, r2
 80075c2:	d012      	beq.n	80075ea <HAL_DMA_Abort_IT+0x92>
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	4a1c      	ldr	r2, [pc, #112]	; (800763c <HAL_DMA_Abort_IT+0xe4>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d00a      	beq.n	80075e4 <HAL_DMA_Abort_IT+0x8c>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	4a1b      	ldr	r2, [pc, #108]	; (8007640 <HAL_DMA_Abort_IT+0xe8>)
 80075d4:	4293      	cmp	r3, r2
 80075d6:	d102      	bne.n	80075de <HAL_DMA_Abort_IT+0x86>
 80075d8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80075dc:	e00e      	b.n	80075fc <HAL_DMA_Abort_IT+0xa4>
 80075de:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80075e2:	e00b      	b.n	80075fc <HAL_DMA_Abort_IT+0xa4>
 80075e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80075e8:	e008      	b.n	80075fc <HAL_DMA_Abort_IT+0xa4>
 80075ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80075ee:	e005      	b.n	80075fc <HAL_DMA_Abort_IT+0xa4>
 80075f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80075f4:	e002      	b.n	80075fc <HAL_DMA_Abort_IT+0xa4>
 80075f6:	2310      	movs	r3, #16
 80075f8:	e000      	b.n	80075fc <HAL_DMA_Abort_IT+0xa4>
 80075fa:	2301      	movs	r3, #1
 80075fc:	4a11      	ldr	r2, [pc, #68]	; (8007644 <HAL_DMA_Abort_IT+0xec>)
 80075fe:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2201      	movs	r2, #1
 8007604:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2200      	movs	r2, #0
 800760c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007614:	2b00      	cmp	r3, #0
 8007616:	d003      	beq.n	8007620 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800761c:	6878      	ldr	r0, [r7, #4]
 800761e:	4798      	blx	r3
    } 
  }
  return status;
 8007620:	7bfb      	ldrb	r3, [r7, #15]
}
 8007622:	4618      	mov	r0, r3
 8007624:	3710      	adds	r7, #16
 8007626:	46bd      	mov	sp, r7
 8007628:	bd80      	pop	{r7, pc}
 800762a:	bf00      	nop
 800762c:	40020008 	.word	0x40020008
 8007630:	4002001c 	.word	0x4002001c
 8007634:	40020030 	.word	0x40020030
 8007638:	40020044 	.word	0x40020044
 800763c:	40020058 	.word	0x40020058
 8007640:	4002006c 	.word	0x4002006c
 8007644:	40020000 	.word	0x40020000

08007648 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b084      	sub	sp, #16
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007664:	2204      	movs	r2, #4
 8007666:	409a      	lsls	r2, r3
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	4013      	ands	r3, r2
 800766c:	2b00      	cmp	r3, #0
 800766e:	d04f      	beq.n	8007710 <HAL_DMA_IRQHandler+0xc8>
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	f003 0304 	and.w	r3, r3, #4
 8007676:	2b00      	cmp	r3, #0
 8007678:	d04a      	beq.n	8007710 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f003 0320 	and.w	r3, r3, #32
 8007684:	2b00      	cmp	r3, #0
 8007686:	d107      	bne.n	8007698 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	681a      	ldr	r2, [r3, #0]
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f022 0204 	bic.w	r2, r2, #4
 8007696:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	4a66      	ldr	r2, [pc, #408]	; (8007838 <HAL_DMA_IRQHandler+0x1f0>)
 800769e:	4293      	cmp	r3, r2
 80076a0:	d029      	beq.n	80076f6 <HAL_DMA_IRQHandler+0xae>
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	4a65      	ldr	r2, [pc, #404]	; (800783c <HAL_DMA_IRQHandler+0x1f4>)
 80076a8:	4293      	cmp	r3, r2
 80076aa:	d022      	beq.n	80076f2 <HAL_DMA_IRQHandler+0xaa>
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	4a63      	ldr	r2, [pc, #396]	; (8007840 <HAL_DMA_IRQHandler+0x1f8>)
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d01a      	beq.n	80076ec <HAL_DMA_IRQHandler+0xa4>
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	4a62      	ldr	r2, [pc, #392]	; (8007844 <HAL_DMA_IRQHandler+0x1fc>)
 80076bc:	4293      	cmp	r3, r2
 80076be:	d012      	beq.n	80076e6 <HAL_DMA_IRQHandler+0x9e>
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	4a60      	ldr	r2, [pc, #384]	; (8007848 <HAL_DMA_IRQHandler+0x200>)
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d00a      	beq.n	80076e0 <HAL_DMA_IRQHandler+0x98>
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	4a5f      	ldr	r2, [pc, #380]	; (800784c <HAL_DMA_IRQHandler+0x204>)
 80076d0:	4293      	cmp	r3, r2
 80076d2:	d102      	bne.n	80076da <HAL_DMA_IRQHandler+0x92>
 80076d4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80076d8:	e00e      	b.n	80076f8 <HAL_DMA_IRQHandler+0xb0>
 80076da:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80076de:	e00b      	b.n	80076f8 <HAL_DMA_IRQHandler+0xb0>
 80076e0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80076e4:	e008      	b.n	80076f8 <HAL_DMA_IRQHandler+0xb0>
 80076e6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80076ea:	e005      	b.n	80076f8 <HAL_DMA_IRQHandler+0xb0>
 80076ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80076f0:	e002      	b.n	80076f8 <HAL_DMA_IRQHandler+0xb0>
 80076f2:	2340      	movs	r3, #64	; 0x40
 80076f4:	e000      	b.n	80076f8 <HAL_DMA_IRQHandler+0xb0>
 80076f6:	2304      	movs	r3, #4
 80076f8:	4a55      	ldr	r2, [pc, #340]	; (8007850 <HAL_DMA_IRQHandler+0x208>)
 80076fa:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007700:	2b00      	cmp	r3, #0
 8007702:	f000 8094 	beq.w	800782e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800770a:	6878      	ldr	r0, [r7, #4]
 800770c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800770e:	e08e      	b.n	800782e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007714:	2202      	movs	r2, #2
 8007716:	409a      	lsls	r2, r3
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	4013      	ands	r3, r2
 800771c:	2b00      	cmp	r3, #0
 800771e:	d056      	beq.n	80077ce <HAL_DMA_IRQHandler+0x186>
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	f003 0302 	and.w	r3, r3, #2
 8007726:	2b00      	cmp	r3, #0
 8007728:	d051      	beq.n	80077ce <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f003 0320 	and.w	r3, r3, #32
 8007734:	2b00      	cmp	r3, #0
 8007736:	d10b      	bne.n	8007750 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	681a      	ldr	r2, [r3, #0]
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f022 020a 	bic.w	r2, r2, #10
 8007746:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2201      	movs	r2, #1
 800774c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	4a38      	ldr	r2, [pc, #224]	; (8007838 <HAL_DMA_IRQHandler+0x1f0>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d029      	beq.n	80077ae <HAL_DMA_IRQHandler+0x166>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	4a37      	ldr	r2, [pc, #220]	; (800783c <HAL_DMA_IRQHandler+0x1f4>)
 8007760:	4293      	cmp	r3, r2
 8007762:	d022      	beq.n	80077aa <HAL_DMA_IRQHandler+0x162>
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	4a35      	ldr	r2, [pc, #212]	; (8007840 <HAL_DMA_IRQHandler+0x1f8>)
 800776a:	4293      	cmp	r3, r2
 800776c:	d01a      	beq.n	80077a4 <HAL_DMA_IRQHandler+0x15c>
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	4a34      	ldr	r2, [pc, #208]	; (8007844 <HAL_DMA_IRQHandler+0x1fc>)
 8007774:	4293      	cmp	r3, r2
 8007776:	d012      	beq.n	800779e <HAL_DMA_IRQHandler+0x156>
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	4a32      	ldr	r2, [pc, #200]	; (8007848 <HAL_DMA_IRQHandler+0x200>)
 800777e:	4293      	cmp	r3, r2
 8007780:	d00a      	beq.n	8007798 <HAL_DMA_IRQHandler+0x150>
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	4a31      	ldr	r2, [pc, #196]	; (800784c <HAL_DMA_IRQHandler+0x204>)
 8007788:	4293      	cmp	r3, r2
 800778a:	d102      	bne.n	8007792 <HAL_DMA_IRQHandler+0x14a>
 800778c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007790:	e00e      	b.n	80077b0 <HAL_DMA_IRQHandler+0x168>
 8007792:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007796:	e00b      	b.n	80077b0 <HAL_DMA_IRQHandler+0x168>
 8007798:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800779c:	e008      	b.n	80077b0 <HAL_DMA_IRQHandler+0x168>
 800779e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80077a2:	e005      	b.n	80077b0 <HAL_DMA_IRQHandler+0x168>
 80077a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80077a8:	e002      	b.n	80077b0 <HAL_DMA_IRQHandler+0x168>
 80077aa:	2320      	movs	r3, #32
 80077ac:	e000      	b.n	80077b0 <HAL_DMA_IRQHandler+0x168>
 80077ae:	2302      	movs	r3, #2
 80077b0:	4a27      	ldr	r2, [pc, #156]	; (8007850 <HAL_DMA_IRQHandler+0x208>)
 80077b2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2200      	movs	r2, #0
 80077b8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d034      	beq.n	800782e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077c8:	6878      	ldr	r0, [r7, #4]
 80077ca:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80077cc:	e02f      	b.n	800782e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077d2:	2208      	movs	r2, #8
 80077d4:	409a      	lsls	r2, r3
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	4013      	ands	r3, r2
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d028      	beq.n	8007830 <HAL_DMA_IRQHandler+0x1e8>
 80077de:	68bb      	ldr	r3, [r7, #8]
 80077e0:	f003 0308 	and.w	r3, r3, #8
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d023      	beq.n	8007830 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	681a      	ldr	r2, [r3, #0]
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f022 020e 	bic.w	r2, r2, #14
 80077f6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007800:	2101      	movs	r1, #1
 8007802:	fa01 f202 	lsl.w	r2, r1, r2
 8007806:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2201      	movs	r2, #1
 800780c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2201      	movs	r2, #1
 8007812:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2200      	movs	r2, #0
 800781a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007822:	2b00      	cmp	r3, #0
 8007824:	d004      	beq.n	8007830 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	4798      	blx	r3
    }
  }
  return;
 800782e:	bf00      	nop
 8007830:	bf00      	nop
}
 8007832:	3710      	adds	r7, #16
 8007834:	46bd      	mov	sp, r7
 8007836:	bd80      	pop	{r7, pc}
 8007838:	40020008 	.word	0x40020008
 800783c:	4002001c 	.word	0x4002001c
 8007840:	40020030 	.word	0x40020030
 8007844:	40020044 	.word	0x40020044
 8007848:	40020058 	.word	0x40020058
 800784c:	4002006c 	.word	0x4002006c
 8007850:	40020000 	.word	0x40020000

08007854 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007854:	b480      	push	{r7}
 8007856:	b085      	sub	sp, #20
 8007858:	af00      	add	r7, sp, #0
 800785a:	60f8      	str	r0, [r7, #12]
 800785c:	60b9      	str	r1, [r7, #8]
 800785e:	607a      	str	r2, [r7, #4]
 8007860:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800786a:	2101      	movs	r1, #1
 800786c:	fa01 f202 	lsl.w	r2, r1, r2
 8007870:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	683a      	ldr	r2, [r7, #0]
 8007878:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	685b      	ldr	r3, [r3, #4]
 800787e:	2b10      	cmp	r3, #16
 8007880:	d108      	bne.n	8007894 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	687a      	ldr	r2, [r7, #4]
 8007888:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	68ba      	ldr	r2, [r7, #8]
 8007890:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8007892:	e007      	b.n	80078a4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	68ba      	ldr	r2, [r7, #8]
 800789a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	687a      	ldr	r2, [r7, #4]
 80078a2:	60da      	str	r2, [r3, #12]
}
 80078a4:	bf00      	nop
 80078a6:	3714      	adds	r7, #20
 80078a8:	46bd      	mov	sp, r7
 80078aa:	bc80      	pop	{r7}
 80078ac:	4770      	bx	lr
	...

080078b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80078b0:	b480      	push	{r7}
 80078b2:	b08b      	sub	sp, #44	; 0x2c
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
 80078b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80078ba:	2300      	movs	r3, #0
 80078bc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80078be:	2300      	movs	r3, #0
 80078c0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80078c2:	e169      	b.n	8007b98 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80078c4:	2201      	movs	r2, #1
 80078c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078c8:	fa02 f303 	lsl.w	r3, r2, r3
 80078cc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	69fa      	ldr	r2, [r7, #28]
 80078d4:	4013      	ands	r3, r2
 80078d6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80078d8:	69ba      	ldr	r2, [r7, #24]
 80078da:	69fb      	ldr	r3, [r7, #28]
 80078dc:	429a      	cmp	r2, r3
 80078de:	f040 8158 	bne.w	8007b92 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	685b      	ldr	r3, [r3, #4]
 80078e6:	4a9a      	ldr	r2, [pc, #616]	; (8007b50 <HAL_GPIO_Init+0x2a0>)
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d05e      	beq.n	80079aa <HAL_GPIO_Init+0xfa>
 80078ec:	4a98      	ldr	r2, [pc, #608]	; (8007b50 <HAL_GPIO_Init+0x2a0>)
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d875      	bhi.n	80079de <HAL_GPIO_Init+0x12e>
 80078f2:	4a98      	ldr	r2, [pc, #608]	; (8007b54 <HAL_GPIO_Init+0x2a4>)
 80078f4:	4293      	cmp	r3, r2
 80078f6:	d058      	beq.n	80079aa <HAL_GPIO_Init+0xfa>
 80078f8:	4a96      	ldr	r2, [pc, #600]	; (8007b54 <HAL_GPIO_Init+0x2a4>)
 80078fa:	4293      	cmp	r3, r2
 80078fc:	d86f      	bhi.n	80079de <HAL_GPIO_Init+0x12e>
 80078fe:	4a96      	ldr	r2, [pc, #600]	; (8007b58 <HAL_GPIO_Init+0x2a8>)
 8007900:	4293      	cmp	r3, r2
 8007902:	d052      	beq.n	80079aa <HAL_GPIO_Init+0xfa>
 8007904:	4a94      	ldr	r2, [pc, #592]	; (8007b58 <HAL_GPIO_Init+0x2a8>)
 8007906:	4293      	cmp	r3, r2
 8007908:	d869      	bhi.n	80079de <HAL_GPIO_Init+0x12e>
 800790a:	4a94      	ldr	r2, [pc, #592]	; (8007b5c <HAL_GPIO_Init+0x2ac>)
 800790c:	4293      	cmp	r3, r2
 800790e:	d04c      	beq.n	80079aa <HAL_GPIO_Init+0xfa>
 8007910:	4a92      	ldr	r2, [pc, #584]	; (8007b5c <HAL_GPIO_Init+0x2ac>)
 8007912:	4293      	cmp	r3, r2
 8007914:	d863      	bhi.n	80079de <HAL_GPIO_Init+0x12e>
 8007916:	4a92      	ldr	r2, [pc, #584]	; (8007b60 <HAL_GPIO_Init+0x2b0>)
 8007918:	4293      	cmp	r3, r2
 800791a:	d046      	beq.n	80079aa <HAL_GPIO_Init+0xfa>
 800791c:	4a90      	ldr	r2, [pc, #576]	; (8007b60 <HAL_GPIO_Init+0x2b0>)
 800791e:	4293      	cmp	r3, r2
 8007920:	d85d      	bhi.n	80079de <HAL_GPIO_Init+0x12e>
 8007922:	2b12      	cmp	r3, #18
 8007924:	d82a      	bhi.n	800797c <HAL_GPIO_Init+0xcc>
 8007926:	2b12      	cmp	r3, #18
 8007928:	d859      	bhi.n	80079de <HAL_GPIO_Init+0x12e>
 800792a:	a201      	add	r2, pc, #4	; (adr r2, 8007930 <HAL_GPIO_Init+0x80>)
 800792c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007930:	080079ab 	.word	0x080079ab
 8007934:	08007985 	.word	0x08007985
 8007938:	08007997 	.word	0x08007997
 800793c:	080079d9 	.word	0x080079d9
 8007940:	080079df 	.word	0x080079df
 8007944:	080079df 	.word	0x080079df
 8007948:	080079df 	.word	0x080079df
 800794c:	080079df 	.word	0x080079df
 8007950:	080079df 	.word	0x080079df
 8007954:	080079df 	.word	0x080079df
 8007958:	080079df 	.word	0x080079df
 800795c:	080079df 	.word	0x080079df
 8007960:	080079df 	.word	0x080079df
 8007964:	080079df 	.word	0x080079df
 8007968:	080079df 	.word	0x080079df
 800796c:	080079df 	.word	0x080079df
 8007970:	080079df 	.word	0x080079df
 8007974:	0800798d 	.word	0x0800798d
 8007978:	080079a1 	.word	0x080079a1
 800797c:	4a79      	ldr	r2, [pc, #484]	; (8007b64 <HAL_GPIO_Init+0x2b4>)
 800797e:	4293      	cmp	r3, r2
 8007980:	d013      	beq.n	80079aa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8007982:	e02c      	b.n	80079de <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	68db      	ldr	r3, [r3, #12]
 8007988:	623b      	str	r3, [r7, #32]
          break;
 800798a:	e029      	b.n	80079e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	68db      	ldr	r3, [r3, #12]
 8007990:	3304      	adds	r3, #4
 8007992:	623b      	str	r3, [r7, #32]
          break;
 8007994:	e024      	b.n	80079e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	68db      	ldr	r3, [r3, #12]
 800799a:	3308      	adds	r3, #8
 800799c:	623b      	str	r3, [r7, #32]
          break;
 800799e:	e01f      	b.n	80079e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	68db      	ldr	r3, [r3, #12]
 80079a4:	330c      	adds	r3, #12
 80079a6:	623b      	str	r3, [r7, #32]
          break;
 80079a8:	e01a      	b.n	80079e0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	689b      	ldr	r3, [r3, #8]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d102      	bne.n	80079b8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80079b2:	2304      	movs	r3, #4
 80079b4:	623b      	str	r3, [r7, #32]
          break;
 80079b6:	e013      	b.n	80079e0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	689b      	ldr	r3, [r3, #8]
 80079bc:	2b01      	cmp	r3, #1
 80079be:	d105      	bne.n	80079cc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80079c0:	2308      	movs	r3, #8
 80079c2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	69fa      	ldr	r2, [r7, #28]
 80079c8:	611a      	str	r2, [r3, #16]
          break;
 80079ca:	e009      	b.n	80079e0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80079cc:	2308      	movs	r3, #8
 80079ce:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	69fa      	ldr	r2, [r7, #28]
 80079d4:	615a      	str	r2, [r3, #20]
          break;
 80079d6:	e003      	b.n	80079e0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80079d8:	2300      	movs	r3, #0
 80079da:	623b      	str	r3, [r7, #32]
          break;
 80079dc:	e000      	b.n	80079e0 <HAL_GPIO_Init+0x130>
          break;
 80079de:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80079e0:	69bb      	ldr	r3, [r7, #24]
 80079e2:	2bff      	cmp	r3, #255	; 0xff
 80079e4:	d801      	bhi.n	80079ea <HAL_GPIO_Init+0x13a>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	e001      	b.n	80079ee <HAL_GPIO_Init+0x13e>
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	3304      	adds	r3, #4
 80079ee:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80079f0:	69bb      	ldr	r3, [r7, #24]
 80079f2:	2bff      	cmp	r3, #255	; 0xff
 80079f4:	d802      	bhi.n	80079fc <HAL_GPIO_Init+0x14c>
 80079f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079f8:	009b      	lsls	r3, r3, #2
 80079fa:	e002      	b.n	8007a02 <HAL_GPIO_Init+0x152>
 80079fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079fe:	3b08      	subs	r3, #8
 8007a00:	009b      	lsls	r3, r3, #2
 8007a02:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8007a04:	697b      	ldr	r3, [r7, #20]
 8007a06:	681a      	ldr	r2, [r3, #0]
 8007a08:	210f      	movs	r1, #15
 8007a0a:	693b      	ldr	r3, [r7, #16]
 8007a0c:	fa01 f303 	lsl.w	r3, r1, r3
 8007a10:	43db      	mvns	r3, r3
 8007a12:	401a      	ands	r2, r3
 8007a14:	6a39      	ldr	r1, [r7, #32]
 8007a16:	693b      	ldr	r3, [r7, #16]
 8007a18:	fa01 f303 	lsl.w	r3, r1, r3
 8007a1c:	431a      	orrs	r2, r3
 8007a1e:	697b      	ldr	r3, [r7, #20]
 8007a20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	685b      	ldr	r3, [r3, #4]
 8007a26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	f000 80b1 	beq.w	8007b92 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8007a30:	4b4d      	ldr	r3, [pc, #308]	; (8007b68 <HAL_GPIO_Init+0x2b8>)
 8007a32:	699b      	ldr	r3, [r3, #24]
 8007a34:	4a4c      	ldr	r2, [pc, #304]	; (8007b68 <HAL_GPIO_Init+0x2b8>)
 8007a36:	f043 0301 	orr.w	r3, r3, #1
 8007a3a:	6193      	str	r3, [r2, #24]
 8007a3c:	4b4a      	ldr	r3, [pc, #296]	; (8007b68 <HAL_GPIO_Init+0x2b8>)
 8007a3e:	699b      	ldr	r3, [r3, #24]
 8007a40:	f003 0301 	and.w	r3, r3, #1
 8007a44:	60bb      	str	r3, [r7, #8]
 8007a46:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8007a48:	4a48      	ldr	r2, [pc, #288]	; (8007b6c <HAL_GPIO_Init+0x2bc>)
 8007a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a4c:	089b      	lsrs	r3, r3, #2
 8007a4e:	3302      	adds	r3, #2
 8007a50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a54:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8007a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a58:	f003 0303 	and.w	r3, r3, #3
 8007a5c:	009b      	lsls	r3, r3, #2
 8007a5e:	220f      	movs	r2, #15
 8007a60:	fa02 f303 	lsl.w	r3, r2, r3
 8007a64:	43db      	mvns	r3, r3
 8007a66:	68fa      	ldr	r2, [r7, #12]
 8007a68:	4013      	ands	r3, r2
 8007a6a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	4a40      	ldr	r2, [pc, #256]	; (8007b70 <HAL_GPIO_Init+0x2c0>)
 8007a70:	4293      	cmp	r3, r2
 8007a72:	d013      	beq.n	8007a9c <HAL_GPIO_Init+0x1ec>
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	4a3f      	ldr	r2, [pc, #252]	; (8007b74 <HAL_GPIO_Init+0x2c4>)
 8007a78:	4293      	cmp	r3, r2
 8007a7a:	d00d      	beq.n	8007a98 <HAL_GPIO_Init+0x1e8>
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	4a3e      	ldr	r2, [pc, #248]	; (8007b78 <HAL_GPIO_Init+0x2c8>)
 8007a80:	4293      	cmp	r3, r2
 8007a82:	d007      	beq.n	8007a94 <HAL_GPIO_Init+0x1e4>
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	4a3d      	ldr	r2, [pc, #244]	; (8007b7c <HAL_GPIO_Init+0x2cc>)
 8007a88:	4293      	cmp	r3, r2
 8007a8a:	d101      	bne.n	8007a90 <HAL_GPIO_Init+0x1e0>
 8007a8c:	2303      	movs	r3, #3
 8007a8e:	e006      	b.n	8007a9e <HAL_GPIO_Init+0x1ee>
 8007a90:	2304      	movs	r3, #4
 8007a92:	e004      	b.n	8007a9e <HAL_GPIO_Init+0x1ee>
 8007a94:	2302      	movs	r3, #2
 8007a96:	e002      	b.n	8007a9e <HAL_GPIO_Init+0x1ee>
 8007a98:	2301      	movs	r3, #1
 8007a9a:	e000      	b.n	8007a9e <HAL_GPIO_Init+0x1ee>
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007aa0:	f002 0203 	and.w	r2, r2, #3
 8007aa4:	0092      	lsls	r2, r2, #2
 8007aa6:	4093      	lsls	r3, r2
 8007aa8:	68fa      	ldr	r2, [r7, #12]
 8007aaa:	4313      	orrs	r3, r2
 8007aac:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8007aae:	492f      	ldr	r1, [pc, #188]	; (8007b6c <HAL_GPIO_Init+0x2bc>)
 8007ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ab2:	089b      	lsrs	r3, r3, #2
 8007ab4:	3302      	adds	r3, #2
 8007ab6:	68fa      	ldr	r2, [r7, #12]
 8007ab8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	685b      	ldr	r3, [r3, #4]
 8007ac0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d006      	beq.n	8007ad6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8007ac8:	4b2d      	ldr	r3, [pc, #180]	; (8007b80 <HAL_GPIO_Init+0x2d0>)
 8007aca:	689a      	ldr	r2, [r3, #8]
 8007acc:	492c      	ldr	r1, [pc, #176]	; (8007b80 <HAL_GPIO_Init+0x2d0>)
 8007ace:	69bb      	ldr	r3, [r7, #24]
 8007ad0:	4313      	orrs	r3, r2
 8007ad2:	608b      	str	r3, [r1, #8]
 8007ad4:	e006      	b.n	8007ae4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8007ad6:	4b2a      	ldr	r3, [pc, #168]	; (8007b80 <HAL_GPIO_Init+0x2d0>)
 8007ad8:	689a      	ldr	r2, [r3, #8]
 8007ada:	69bb      	ldr	r3, [r7, #24]
 8007adc:	43db      	mvns	r3, r3
 8007ade:	4928      	ldr	r1, [pc, #160]	; (8007b80 <HAL_GPIO_Init+0x2d0>)
 8007ae0:	4013      	ands	r3, r2
 8007ae2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	685b      	ldr	r3, [r3, #4]
 8007ae8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d006      	beq.n	8007afe <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8007af0:	4b23      	ldr	r3, [pc, #140]	; (8007b80 <HAL_GPIO_Init+0x2d0>)
 8007af2:	68da      	ldr	r2, [r3, #12]
 8007af4:	4922      	ldr	r1, [pc, #136]	; (8007b80 <HAL_GPIO_Init+0x2d0>)
 8007af6:	69bb      	ldr	r3, [r7, #24]
 8007af8:	4313      	orrs	r3, r2
 8007afa:	60cb      	str	r3, [r1, #12]
 8007afc:	e006      	b.n	8007b0c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8007afe:	4b20      	ldr	r3, [pc, #128]	; (8007b80 <HAL_GPIO_Init+0x2d0>)
 8007b00:	68da      	ldr	r2, [r3, #12]
 8007b02:	69bb      	ldr	r3, [r7, #24]
 8007b04:	43db      	mvns	r3, r3
 8007b06:	491e      	ldr	r1, [pc, #120]	; (8007b80 <HAL_GPIO_Init+0x2d0>)
 8007b08:	4013      	ands	r3, r2
 8007b0a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	685b      	ldr	r3, [r3, #4]
 8007b10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d006      	beq.n	8007b26 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8007b18:	4b19      	ldr	r3, [pc, #100]	; (8007b80 <HAL_GPIO_Init+0x2d0>)
 8007b1a:	685a      	ldr	r2, [r3, #4]
 8007b1c:	4918      	ldr	r1, [pc, #96]	; (8007b80 <HAL_GPIO_Init+0x2d0>)
 8007b1e:	69bb      	ldr	r3, [r7, #24]
 8007b20:	4313      	orrs	r3, r2
 8007b22:	604b      	str	r3, [r1, #4]
 8007b24:	e006      	b.n	8007b34 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8007b26:	4b16      	ldr	r3, [pc, #88]	; (8007b80 <HAL_GPIO_Init+0x2d0>)
 8007b28:	685a      	ldr	r2, [r3, #4]
 8007b2a:	69bb      	ldr	r3, [r7, #24]
 8007b2c:	43db      	mvns	r3, r3
 8007b2e:	4914      	ldr	r1, [pc, #80]	; (8007b80 <HAL_GPIO_Init+0x2d0>)
 8007b30:	4013      	ands	r3, r2
 8007b32:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	685b      	ldr	r3, [r3, #4]
 8007b38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d021      	beq.n	8007b84 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8007b40:	4b0f      	ldr	r3, [pc, #60]	; (8007b80 <HAL_GPIO_Init+0x2d0>)
 8007b42:	681a      	ldr	r2, [r3, #0]
 8007b44:	490e      	ldr	r1, [pc, #56]	; (8007b80 <HAL_GPIO_Init+0x2d0>)
 8007b46:	69bb      	ldr	r3, [r7, #24]
 8007b48:	4313      	orrs	r3, r2
 8007b4a:	600b      	str	r3, [r1, #0]
 8007b4c:	e021      	b.n	8007b92 <HAL_GPIO_Init+0x2e2>
 8007b4e:	bf00      	nop
 8007b50:	10320000 	.word	0x10320000
 8007b54:	10310000 	.word	0x10310000
 8007b58:	10220000 	.word	0x10220000
 8007b5c:	10210000 	.word	0x10210000
 8007b60:	10120000 	.word	0x10120000
 8007b64:	10110000 	.word	0x10110000
 8007b68:	40021000 	.word	0x40021000
 8007b6c:	40010000 	.word	0x40010000
 8007b70:	40010800 	.word	0x40010800
 8007b74:	40010c00 	.word	0x40010c00
 8007b78:	40011000 	.word	0x40011000
 8007b7c:	40011400 	.word	0x40011400
 8007b80:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8007b84:	4b0b      	ldr	r3, [pc, #44]	; (8007bb4 <HAL_GPIO_Init+0x304>)
 8007b86:	681a      	ldr	r2, [r3, #0]
 8007b88:	69bb      	ldr	r3, [r7, #24]
 8007b8a:	43db      	mvns	r3, r3
 8007b8c:	4909      	ldr	r1, [pc, #36]	; (8007bb4 <HAL_GPIO_Init+0x304>)
 8007b8e:	4013      	ands	r3, r2
 8007b90:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8007b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b94:	3301      	adds	r3, #1
 8007b96:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	681a      	ldr	r2, [r3, #0]
 8007b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b9e:	fa22 f303 	lsr.w	r3, r2, r3
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	f47f ae8e 	bne.w	80078c4 <HAL_GPIO_Init+0x14>
  }
}
 8007ba8:	bf00      	nop
 8007baa:	bf00      	nop
 8007bac:	372c      	adds	r7, #44	; 0x2c
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bc80      	pop	{r7}
 8007bb2:	4770      	bx	lr
 8007bb4:	40010400 	.word	0x40010400

08007bb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007bb8:	b480      	push	{r7}
 8007bba:	b083      	sub	sp, #12
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
 8007bc0:	460b      	mov	r3, r1
 8007bc2:	807b      	strh	r3, [r7, #2]
 8007bc4:	4613      	mov	r3, r2
 8007bc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007bc8:	787b      	ldrb	r3, [r7, #1]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d003      	beq.n	8007bd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007bce:	887a      	ldrh	r2, [r7, #2]
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8007bd4:	e003      	b.n	8007bde <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8007bd6:	887b      	ldrh	r3, [r7, #2]
 8007bd8:	041a      	lsls	r2, r3, #16
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	611a      	str	r2, [r3, #16]
}
 8007bde:	bf00      	nop
 8007be0:	370c      	adds	r7, #12
 8007be2:	46bd      	mov	sp, r7
 8007be4:	bc80      	pop	{r7}
 8007be6:	4770      	bx	lr

08007be8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007be8:	b480      	push	{r7}
 8007bea:	b085      	sub	sp, #20
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
 8007bf0:	460b      	mov	r3, r1
 8007bf2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	68db      	ldr	r3, [r3, #12]
 8007bf8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007bfa:	887a      	ldrh	r2, [r7, #2]
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	4013      	ands	r3, r2
 8007c00:	041a      	lsls	r2, r3, #16
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	43d9      	mvns	r1, r3
 8007c06:	887b      	ldrh	r3, [r7, #2]
 8007c08:	400b      	ands	r3, r1
 8007c0a:	431a      	orrs	r2, r3
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	611a      	str	r2, [r3, #16]
}
 8007c10:	bf00      	nop
 8007c12:	3714      	adds	r7, #20
 8007c14:	46bd      	mov	sp, r7
 8007c16:	bc80      	pop	{r7}
 8007c18:	4770      	bx	lr
	...

08007c1c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b082      	sub	sp, #8
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	4603      	mov	r3, r0
 8007c24:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8007c26:	4b08      	ldr	r3, [pc, #32]	; (8007c48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007c28:	695a      	ldr	r2, [r3, #20]
 8007c2a:	88fb      	ldrh	r3, [r7, #6]
 8007c2c:	4013      	ands	r3, r2
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d006      	beq.n	8007c40 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007c32:	4a05      	ldr	r2, [pc, #20]	; (8007c48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007c34:	88fb      	ldrh	r3, [r7, #6]
 8007c36:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007c38:	88fb      	ldrh	r3, [r7, #6]
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	f7fd f8c8 	bl	8004dd0 <HAL_GPIO_EXTI_Callback>
  }
}
 8007c40:	bf00      	nop
 8007c42:	3708      	adds	r7, #8
 8007c44:	46bd      	mov	sp, r7
 8007c46:	bd80      	pop	{r7, pc}
 8007c48:	40010400 	.word	0x40010400

08007c4c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b084      	sub	sp, #16
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d101      	bne.n	8007c5e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007c5a:	2301      	movs	r3, #1
 8007c5c:	e12b      	b.n	8007eb6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c64:	b2db      	uxtb	r3, r3
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d106      	bne.n	8007c78 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007c72:	6878      	ldr	r0, [r7, #4]
 8007c74:	f7fc ffa2 	bl	8004bbc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2224      	movs	r2, #36	; 0x24
 8007c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	681a      	ldr	r2, [r3, #0]
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f022 0201 	bic.w	r2, r2, #1
 8007c8e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	681a      	ldr	r2, [r3, #0]
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007c9e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	681a      	ldr	r2, [r3, #0]
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007cae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007cb0:	f001 fbca 	bl	8009448 <HAL_RCC_GetPCLK1Freq>
 8007cb4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	685b      	ldr	r3, [r3, #4]
 8007cba:	4a81      	ldr	r2, [pc, #516]	; (8007ec0 <HAL_I2C_Init+0x274>)
 8007cbc:	4293      	cmp	r3, r2
 8007cbe:	d807      	bhi.n	8007cd0 <HAL_I2C_Init+0x84>
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	4a80      	ldr	r2, [pc, #512]	; (8007ec4 <HAL_I2C_Init+0x278>)
 8007cc4:	4293      	cmp	r3, r2
 8007cc6:	bf94      	ite	ls
 8007cc8:	2301      	movls	r3, #1
 8007cca:	2300      	movhi	r3, #0
 8007ccc:	b2db      	uxtb	r3, r3
 8007cce:	e006      	b.n	8007cde <HAL_I2C_Init+0x92>
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	4a7d      	ldr	r2, [pc, #500]	; (8007ec8 <HAL_I2C_Init+0x27c>)
 8007cd4:	4293      	cmp	r3, r2
 8007cd6:	bf94      	ite	ls
 8007cd8:	2301      	movls	r3, #1
 8007cda:	2300      	movhi	r3, #0
 8007cdc:	b2db      	uxtb	r3, r3
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d001      	beq.n	8007ce6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007ce2:	2301      	movs	r3, #1
 8007ce4:	e0e7      	b.n	8007eb6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	4a78      	ldr	r2, [pc, #480]	; (8007ecc <HAL_I2C_Init+0x280>)
 8007cea:	fba2 2303 	umull	r2, r3, r2, r3
 8007cee:	0c9b      	lsrs	r3, r3, #18
 8007cf0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	685b      	ldr	r3, [r3, #4]
 8007cf8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	68ba      	ldr	r2, [r7, #8]
 8007d02:	430a      	orrs	r2, r1
 8007d04:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	6a1b      	ldr	r3, [r3, #32]
 8007d0c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	685b      	ldr	r3, [r3, #4]
 8007d14:	4a6a      	ldr	r2, [pc, #424]	; (8007ec0 <HAL_I2C_Init+0x274>)
 8007d16:	4293      	cmp	r3, r2
 8007d18:	d802      	bhi.n	8007d20 <HAL_I2C_Init+0xd4>
 8007d1a:	68bb      	ldr	r3, [r7, #8]
 8007d1c:	3301      	adds	r3, #1
 8007d1e:	e009      	b.n	8007d34 <HAL_I2C_Init+0xe8>
 8007d20:	68bb      	ldr	r3, [r7, #8]
 8007d22:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007d26:	fb02 f303 	mul.w	r3, r2, r3
 8007d2a:	4a69      	ldr	r2, [pc, #420]	; (8007ed0 <HAL_I2C_Init+0x284>)
 8007d2c:	fba2 2303 	umull	r2, r3, r2, r3
 8007d30:	099b      	lsrs	r3, r3, #6
 8007d32:	3301      	adds	r3, #1
 8007d34:	687a      	ldr	r2, [r7, #4]
 8007d36:	6812      	ldr	r2, [r2, #0]
 8007d38:	430b      	orrs	r3, r1
 8007d3a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	69db      	ldr	r3, [r3, #28]
 8007d42:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8007d46:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	685b      	ldr	r3, [r3, #4]
 8007d4e:	495c      	ldr	r1, [pc, #368]	; (8007ec0 <HAL_I2C_Init+0x274>)
 8007d50:	428b      	cmp	r3, r1
 8007d52:	d819      	bhi.n	8007d88 <HAL_I2C_Init+0x13c>
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	1e59      	subs	r1, r3, #1
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	685b      	ldr	r3, [r3, #4]
 8007d5c:	005b      	lsls	r3, r3, #1
 8007d5e:	fbb1 f3f3 	udiv	r3, r1, r3
 8007d62:	1c59      	adds	r1, r3, #1
 8007d64:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007d68:	400b      	ands	r3, r1
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d00a      	beq.n	8007d84 <HAL_I2C_Init+0x138>
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	1e59      	subs	r1, r3, #1
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	685b      	ldr	r3, [r3, #4]
 8007d76:	005b      	lsls	r3, r3, #1
 8007d78:	fbb1 f3f3 	udiv	r3, r1, r3
 8007d7c:	3301      	adds	r3, #1
 8007d7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007d82:	e051      	b.n	8007e28 <HAL_I2C_Init+0x1dc>
 8007d84:	2304      	movs	r3, #4
 8007d86:	e04f      	b.n	8007e28 <HAL_I2C_Init+0x1dc>
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	689b      	ldr	r3, [r3, #8]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d111      	bne.n	8007db4 <HAL_I2C_Init+0x168>
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	1e58      	subs	r0, r3, #1
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	6859      	ldr	r1, [r3, #4]
 8007d98:	460b      	mov	r3, r1
 8007d9a:	005b      	lsls	r3, r3, #1
 8007d9c:	440b      	add	r3, r1
 8007d9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007da2:	3301      	adds	r3, #1
 8007da4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	bf0c      	ite	eq
 8007dac:	2301      	moveq	r3, #1
 8007dae:	2300      	movne	r3, #0
 8007db0:	b2db      	uxtb	r3, r3
 8007db2:	e012      	b.n	8007dda <HAL_I2C_Init+0x18e>
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	1e58      	subs	r0, r3, #1
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6859      	ldr	r1, [r3, #4]
 8007dbc:	460b      	mov	r3, r1
 8007dbe:	009b      	lsls	r3, r3, #2
 8007dc0:	440b      	add	r3, r1
 8007dc2:	0099      	lsls	r1, r3, #2
 8007dc4:	440b      	add	r3, r1
 8007dc6:	fbb0 f3f3 	udiv	r3, r0, r3
 8007dca:	3301      	adds	r3, #1
 8007dcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	bf0c      	ite	eq
 8007dd4:	2301      	moveq	r3, #1
 8007dd6:	2300      	movne	r3, #0
 8007dd8:	b2db      	uxtb	r3, r3
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d001      	beq.n	8007de2 <HAL_I2C_Init+0x196>
 8007dde:	2301      	movs	r3, #1
 8007de0:	e022      	b.n	8007e28 <HAL_I2C_Init+0x1dc>
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	689b      	ldr	r3, [r3, #8]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d10e      	bne.n	8007e08 <HAL_I2C_Init+0x1bc>
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	1e58      	subs	r0, r3, #1
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6859      	ldr	r1, [r3, #4]
 8007df2:	460b      	mov	r3, r1
 8007df4:	005b      	lsls	r3, r3, #1
 8007df6:	440b      	add	r3, r1
 8007df8:	fbb0 f3f3 	udiv	r3, r0, r3
 8007dfc:	3301      	adds	r3, #1
 8007dfe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007e02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e06:	e00f      	b.n	8007e28 <HAL_I2C_Init+0x1dc>
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	1e58      	subs	r0, r3, #1
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	6859      	ldr	r1, [r3, #4]
 8007e10:	460b      	mov	r3, r1
 8007e12:	009b      	lsls	r3, r3, #2
 8007e14:	440b      	add	r3, r1
 8007e16:	0099      	lsls	r1, r3, #2
 8007e18:	440b      	add	r3, r1
 8007e1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8007e1e:	3301      	adds	r3, #1
 8007e20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007e24:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007e28:	6879      	ldr	r1, [r7, #4]
 8007e2a:	6809      	ldr	r1, [r1, #0]
 8007e2c:	4313      	orrs	r3, r2
 8007e2e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	69da      	ldr	r2, [r3, #28]
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6a1b      	ldr	r3, [r3, #32]
 8007e42:	431a      	orrs	r2, r3
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	430a      	orrs	r2, r1
 8007e4a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	689b      	ldr	r3, [r3, #8]
 8007e52:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007e56:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007e5a:	687a      	ldr	r2, [r7, #4]
 8007e5c:	6911      	ldr	r1, [r2, #16]
 8007e5e:	687a      	ldr	r2, [r7, #4]
 8007e60:	68d2      	ldr	r2, [r2, #12]
 8007e62:	4311      	orrs	r1, r2
 8007e64:	687a      	ldr	r2, [r7, #4]
 8007e66:	6812      	ldr	r2, [r2, #0]
 8007e68:	430b      	orrs	r3, r1
 8007e6a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	68db      	ldr	r3, [r3, #12]
 8007e72:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	695a      	ldr	r2, [r3, #20]
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	699b      	ldr	r3, [r3, #24]
 8007e7e:	431a      	orrs	r2, r3
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	430a      	orrs	r2, r1
 8007e86:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	681a      	ldr	r2, [r3, #0]
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f042 0201 	orr.w	r2, r2, #1
 8007e96:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	2220      	movs	r2, #32
 8007ea2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2200      	movs	r2, #0
 8007eb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007eb4:	2300      	movs	r3, #0
}
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	3710      	adds	r7, #16
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	bd80      	pop	{r7, pc}
 8007ebe:	bf00      	nop
 8007ec0:	000186a0 	.word	0x000186a0
 8007ec4:	001e847f 	.word	0x001e847f
 8007ec8:	003d08ff 	.word	0x003d08ff
 8007ecc:	431bde83 	.word	0x431bde83
 8007ed0:	10624dd3 	.word	0x10624dd3

08007ed4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b088      	sub	sp, #32
 8007ed8:	af02      	add	r7, sp, #8
 8007eda:	60f8      	str	r0, [r7, #12]
 8007edc:	607a      	str	r2, [r7, #4]
 8007ede:	461a      	mov	r2, r3
 8007ee0:	460b      	mov	r3, r1
 8007ee2:	817b      	strh	r3, [r7, #10]
 8007ee4:	4613      	mov	r3, r2
 8007ee6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007ee8:	f7fe fd06 	bl	80068f8 <HAL_GetTick>
 8007eec:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ef4:	b2db      	uxtb	r3, r3
 8007ef6:	2b20      	cmp	r3, #32
 8007ef8:	f040 80e0 	bne.w	80080bc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007efc:	697b      	ldr	r3, [r7, #20]
 8007efe:	9300      	str	r3, [sp, #0]
 8007f00:	2319      	movs	r3, #25
 8007f02:	2201      	movs	r2, #1
 8007f04:	4970      	ldr	r1, [pc, #448]	; (80080c8 <HAL_I2C_Master_Transmit+0x1f4>)
 8007f06:	68f8      	ldr	r0, [r7, #12]
 8007f08:	f000 fc9e 	bl	8008848 <I2C_WaitOnFlagUntilTimeout>
 8007f0c:	4603      	mov	r3, r0
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d001      	beq.n	8007f16 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8007f12:	2302      	movs	r3, #2
 8007f14:	e0d3      	b.n	80080be <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f1c:	2b01      	cmp	r3, #1
 8007f1e:	d101      	bne.n	8007f24 <HAL_I2C_Master_Transmit+0x50>
 8007f20:	2302      	movs	r3, #2
 8007f22:	e0cc      	b.n	80080be <HAL_I2C_Master_Transmit+0x1ea>
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	2201      	movs	r2, #1
 8007f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f003 0301 	and.w	r3, r3, #1
 8007f36:	2b01      	cmp	r3, #1
 8007f38:	d007      	beq.n	8007f4a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	681a      	ldr	r2, [r3, #0]
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f042 0201 	orr.w	r2, r2, #1
 8007f48:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	681a      	ldr	r2, [r3, #0]
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007f58:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	2221      	movs	r2, #33	; 0x21
 8007f5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	2210      	movs	r2, #16
 8007f66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	687a      	ldr	r2, [r7, #4]
 8007f74:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	893a      	ldrh	r2, [r7, #8]
 8007f7a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f80:	b29a      	uxth	r2, r3
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	4a50      	ldr	r2, [pc, #320]	; (80080cc <HAL_I2C_Master_Transmit+0x1f8>)
 8007f8a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8007f8c:	8979      	ldrh	r1, [r7, #10]
 8007f8e:	697b      	ldr	r3, [r7, #20]
 8007f90:	6a3a      	ldr	r2, [r7, #32]
 8007f92:	68f8      	ldr	r0, [r7, #12]
 8007f94:	f000 fb08 	bl	80085a8 <I2C_MasterRequestWrite>
 8007f98:	4603      	mov	r3, r0
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d001      	beq.n	8007fa2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8007f9e:	2301      	movs	r3, #1
 8007fa0:	e08d      	b.n	80080be <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	613b      	str	r3, [r7, #16]
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	695b      	ldr	r3, [r3, #20]
 8007fac:	613b      	str	r3, [r7, #16]
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	699b      	ldr	r3, [r3, #24]
 8007fb4:	613b      	str	r3, [r7, #16]
 8007fb6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8007fb8:	e066      	b.n	8008088 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007fba:	697a      	ldr	r2, [r7, #20]
 8007fbc:	6a39      	ldr	r1, [r7, #32]
 8007fbe:	68f8      	ldr	r0, [r7, #12]
 8007fc0:	f000 fd5c 	bl	8008a7c <I2C_WaitOnTXEFlagUntilTimeout>
 8007fc4:	4603      	mov	r3, r0
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d00d      	beq.n	8007fe6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fce:	2b04      	cmp	r3, #4
 8007fd0:	d107      	bne.n	8007fe2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	681a      	ldr	r2, [r3, #0]
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007fe0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007fe2:	2301      	movs	r3, #1
 8007fe4:	e06b      	b.n	80080be <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fea:	781a      	ldrb	r2, [r3, #0]
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ff6:	1c5a      	adds	r2, r3, #1
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008000:	b29b      	uxth	r3, r3
 8008002:	3b01      	subs	r3, #1
 8008004:	b29a      	uxth	r2, r3
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800800e:	3b01      	subs	r3, #1
 8008010:	b29a      	uxth	r2, r3
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	695b      	ldr	r3, [r3, #20]
 800801c:	f003 0304 	and.w	r3, r3, #4
 8008020:	2b04      	cmp	r3, #4
 8008022:	d11b      	bne.n	800805c <HAL_I2C_Master_Transmit+0x188>
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008028:	2b00      	cmp	r3, #0
 800802a:	d017      	beq.n	800805c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008030:	781a      	ldrb	r2, [r3, #0]
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800803c:	1c5a      	adds	r2, r3, #1
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008046:	b29b      	uxth	r3, r3
 8008048:	3b01      	subs	r3, #1
 800804a:	b29a      	uxth	r2, r3
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008054:	3b01      	subs	r3, #1
 8008056:	b29a      	uxth	r2, r3
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800805c:	697a      	ldr	r2, [r7, #20]
 800805e:	6a39      	ldr	r1, [r7, #32]
 8008060:	68f8      	ldr	r0, [r7, #12]
 8008062:	f000 fd53 	bl	8008b0c <I2C_WaitOnBTFFlagUntilTimeout>
 8008066:	4603      	mov	r3, r0
 8008068:	2b00      	cmp	r3, #0
 800806a:	d00d      	beq.n	8008088 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008070:	2b04      	cmp	r3, #4
 8008072:	d107      	bne.n	8008084 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	681a      	ldr	r2, [r3, #0]
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008082:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008084:	2301      	movs	r3, #1
 8008086:	e01a      	b.n	80080be <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800808c:	2b00      	cmp	r3, #0
 800808e:	d194      	bne.n	8007fba <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	681a      	ldr	r2, [r3, #0]
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800809e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	2220      	movs	r2, #32
 80080a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	2200      	movs	r2, #0
 80080ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	2200      	movs	r2, #0
 80080b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80080b8:	2300      	movs	r3, #0
 80080ba:	e000      	b.n	80080be <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80080bc:	2302      	movs	r3, #2
  }
}
 80080be:	4618      	mov	r0, r3
 80080c0:	3718      	adds	r7, #24
 80080c2:	46bd      	mov	sp, r7
 80080c4:	bd80      	pop	{r7, pc}
 80080c6:	bf00      	nop
 80080c8:	00100002 	.word	0x00100002
 80080cc:	ffff0000 	.word	0xffff0000

080080d0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b08c      	sub	sp, #48	; 0x30
 80080d4:	af02      	add	r7, sp, #8
 80080d6:	60f8      	str	r0, [r7, #12]
 80080d8:	607a      	str	r2, [r7, #4]
 80080da:	461a      	mov	r2, r3
 80080dc:	460b      	mov	r3, r1
 80080de:	817b      	strh	r3, [r7, #10]
 80080e0:	4613      	mov	r3, r2
 80080e2:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80080e4:	2300      	movs	r3, #0
 80080e6:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80080e8:	f7fe fc06 	bl	80068f8 <HAL_GetTick>
 80080ec:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080f4:	b2db      	uxtb	r3, r3
 80080f6:	2b20      	cmp	r3, #32
 80080f8:	f040 824b 	bne.w	8008592 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80080fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080fe:	9300      	str	r3, [sp, #0]
 8008100:	2319      	movs	r3, #25
 8008102:	2201      	movs	r2, #1
 8008104:	497f      	ldr	r1, [pc, #508]	; (8008304 <HAL_I2C_Master_Receive+0x234>)
 8008106:	68f8      	ldr	r0, [r7, #12]
 8008108:	f000 fb9e 	bl	8008848 <I2C_WaitOnFlagUntilTimeout>
 800810c:	4603      	mov	r3, r0
 800810e:	2b00      	cmp	r3, #0
 8008110:	d001      	beq.n	8008116 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8008112:	2302      	movs	r3, #2
 8008114:	e23e      	b.n	8008594 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800811c:	2b01      	cmp	r3, #1
 800811e:	d101      	bne.n	8008124 <HAL_I2C_Master_Receive+0x54>
 8008120:	2302      	movs	r3, #2
 8008122:	e237      	b.n	8008594 <HAL_I2C_Master_Receive+0x4c4>
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	2201      	movs	r2, #1
 8008128:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f003 0301 	and.w	r3, r3, #1
 8008136:	2b01      	cmp	r3, #1
 8008138:	d007      	beq.n	800814a <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	681a      	ldr	r2, [r3, #0]
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	f042 0201 	orr.w	r2, r2, #1
 8008148:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	681a      	ldr	r2, [r3, #0]
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008158:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	2222      	movs	r2, #34	; 0x22
 800815e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	2210      	movs	r2, #16
 8008166:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	2200      	movs	r2, #0
 800816e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	687a      	ldr	r2, [r7, #4]
 8008174:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	893a      	ldrh	r2, [r7, #8]
 800817a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008180:	b29a      	uxth	r2, r3
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	4a5f      	ldr	r2, [pc, #380]	; (8008308 <HAL_I2C_Master_Receive+0x238>)
 800818a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800818c:	8979      	ldrh	r1, [r7, #10]
 800818e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008190:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008192:	68f8      	ldr	r0, [r7, #12]
 8008194:	f000 fa8a 	bl	80086ac <I2C_MasterRequestRead>
 8008198:	4603      	mov	r3, r0
 800819a:	2b00      	cmp	r3, #0
 800819c:	d001      	beq.n	80081a2 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 800819e:	2301      	movs	r3, #1
 80081a0:	e1f8      	b.n	8008594 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d113      	bne.n	80081d2 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80081aa:	2300      	movs	r3, #0
 80081ac:	61fb      	str	r3, [r7, #28]
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	695b      	ldr	r3, [r3, #20]
 80081b4:	61fb      	str	r3, [r7, #28]
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	699b      	ldr	r3, [r3, #24]
 80081bc:	61fb      	str	r3, [r7, #28]
 80081be:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	681a      	ldr	r2, [r3, #0]
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80081ce:	601a      	str	r2, [r3, #0]
 80081d0:	e1cc      	b.n	800856c <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081d6:	2b01      	cmp	r3, #1
 80081d8:	d11e      	bne.n	8008218 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	681a      	ldr	r2, [r3, #0]
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80081e8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80081ea:	b672      	cpsid	i
}
 80081ec:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80081ee:	2300      	movs	r3, #0
 80081f0:	61bb      	str	r3, [r7, #24]
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	695b      	ldr	r3, [r3, #20]
 80081f8:	61bb      	str	r3, [r7, #24]
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	699b      	ldr	r3, [r3, #24]
 8008200:	61bb      	str	r3, [r7, #24]
 8008202:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	681a      	ldr	r2, [r3, #0]
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008212:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8008214:	b662      	cpsie	i
}
 8008216:	e035      	b.n	8008284 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800821c:	2b02      	cmp	r3, #2
 800821e:	d11e      	bne.n	800825e <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	681a      	ldr	r2, [r3, #0]
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800822e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8008230:	b672      	cpsid	i
}
 8008232:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008234:	2300      	movs	r3, #0
 8008236:	617b      	str	r3, [r7, #20]
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	695b      	ldr	r3, [r3, #20]
 800823e:	617b      	str	r3, [r7, #20]
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	699b      	ldr	r3, [r3, #24]
 8008246:	617b      	str	r3, [r7, #20]
 8008248:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	681a      	ldr	r2, [r3, #0]
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008258:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800825a:	b662      	cpsie	i
}
 800825c:	e012      	b.n	8008284 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	681a      	ldr	r2, [r3, #0]
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800826c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800826e:	2300      	movs	r3, #0
 8008270:	613b      	str	r3, [r7, #16]
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	695b      	ldr	r3, [r3, #20]
 8008278:	613b      	str	r3, [r7, #16]
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	699b      	ldr	r3, [r3, #24]
 8008280:	613b      	str	r3, [r7, #16]
 8008282:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8008284:	e172      	b.n	800856c <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800828a:	2b03      	cmp	r3, #3
 800828c:	f200 811f 	bhi.w	80084ce <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008294:	2b01      	cmp	r3, #1
 8008296:	d123      	bne.n	80082e0 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008298:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800829a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800829c:	68f8      	ldr	r0, [r7, #12]
 800829e:	f000 fc7d 	bl	8008b9c <I2C_WaitOnRXNEFlagUntilTimeout>
 80082a2:	4603      	mov	r3, r0
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d001      	beq.n	80082ac <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 80082a8:	2301      	movs	r3, #1
 80082aa:	e173      	b.n	8008594 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	691a      	ldr	r2, [r3, #16]
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082b6:	b2d2      	uxtb	r2, r2
 80082b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082be:	1c5a      	adds	r2, r3, #1
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80082c8:	3b01      	subs	r3, #1
 80082ca:	b29a      	uxth	r2, r3
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80082d4:	b29b      	uxth	r3, r3
 80082d6:	3b01      	subs	r3, #1
 80082d8:	b29a      	uxth	r2, r3
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80082de:	e145      	b.n	800856c <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80082e4:	2b02      	cmp	r3, #2
 80082e6:	d152      	bne.n	800838e <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80082e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ea:	9300      	str	r3, [sp, #0]
 80082ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082ee:	2200      	movs	r2, #0
 80082f0:	4906      	ldr	r1, [pc, #24]	; (800830c <HAL_I2C_Master_Receive+0x23c>)
 80082f2:	68f8      	ldr	r0, [r7, #12]
 80082f4:	f000 faa8 	bl	8008848 <I2C_WaitOnFlagUntilTimeout>
 80082f8:	4603      	mov	r3, r0
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d008      	beq.n	8008310 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 80082fe:	2301      	movs	r3, #1
 8008300:	e148      	b.n	8008594 <HAL_I2C_Master_Receive+0x4c4>
 8008302:	bf00      	nop
 8008304:	00100002 	.word	0x00100002
 8008308:	ffff0000 	.word	0xffff0000
 800830c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8008310:	b672      	cpsid	i
}
 8008312:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	681a      	ldr	r2, [r3, #0]
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008322:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	691a      	ldr	r2, [r3, #16]
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800832e:	b2d2      	uxtb	r2, r2
 8008330:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008336:	1c5a      	adds	r2, r3, #1
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008340:	3b01      	subs	r3, #1
 8008342:	b29a      	uxth	r2, r3
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800834c:	b29b      	uxth	r3, r3
 800834e:	3b01      	subs	r3, #1
 8008350:	b29a      	uxth	r2, r3
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8008356:	b662      	cpsie	i
}
 8008358:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	691a      	ldr	r2, [r3, #16]
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008364:	b2d2      	uxtb	r2, r2
 8008366:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800836c:	1c5a      	adds	r2, r3, #1
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008376:	3b01      	subs	r3, #1
 8008378:	b29a      	uxth	r2, r3
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008382:	b29b      	uxth	r3, r3
 8008384:	3b01      	subs	r3, #1
 8008386:	b29a      	uxth	r2, r3
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800838c:	e0ee      	b.n	800856c <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800838e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008390:	9300      	str	r3, [sp, #0]
 8008392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008394:	2200      	movs	r2, #0
 8008396:	4981      	ldr	r1, [pc, #516]	; (800859c <HAL_I2C_Master_Receive+0x4cc>)
 8008398:	68f8      	ldr	r0, [r7, #12]
 800839a:	f000 fa55 	bl	8008848 <I2C_WaitOnFlagUntilTimeout>
 800839e:	4603      	mov	r3, r0
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d001      	beq.n	80083a8 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 80083a4:	2301      	movs	r3, #1
 80083a6:	e0f5      	b.n	8008594 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	681a      	ldr	r2, [r3, #0]
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80083b6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80083b8:	b672      	cpsid	i
}
 80083ba:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	691a      	ldr	r2, [r3, #16]
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083c6:	b2d2      	uxtb	r2, r2
 80083c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ce:	1c5a      	adds	r2, r3, #1
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80083d8:	3b01      	subs	r3, #1
 80083da:	b29a      	uxth	r2, r3
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083e4:	b29b      	uxth	r3, r3
 80083e6:	3b01      	subs	r3, #1
 80083e8:	b29a      	uxth	r2, r3
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80083ee:	4b6c      	ldr	r3, [pc, #432]	; (80085a0 <HAL_I2C_Master_Receive+0x4d0>)
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	08db      	lsrs	r3, r3, #3
 80083f4:	4a6b      	ldr	r2, [pc, #428]	; (80085a4 <HAL_I2C_Master_Receive+0x4d4>)
 80083f6:	fba2 2303 	umull	r2, r3, r2, r3
 80083fa:	0a1a      	lsrs	r2, r3, #8
 80083fc:	4613      	mov	r3, r2
 80083fe:	009b      	lsls	r3, r3, #2
 8008400:	4413      	add	r3, r2
 8008402:	00da      	lsls	r2, r3, #3
 8008404:	1ad3      	subs	r3, r2, r3
 8008406:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8008408:	6a3b      	ldr	r3, [r7, #32]
 800840a:	3b01      	subs	r3, #1
 800840c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800840e:	6a3b      	ldr	r3, [r7, #32]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d118      	bne.n	8008446 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	2200      	movs	r2, #0
 8008418:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	2220      	movs	r2, #32
 800841e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	2200      	movs	r2, #0
 8008426:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800842e:	f043 0220 	orr.w	r2, r3, #32
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8008436:	b662      	cpsie	i
}
 8008438:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	2200      	movs	r2, #0
 800843e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8008442:	2301      	movs	r3, #1
 8008444:	e0a6      	b.n	8008594 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	695b      	ldr	r3, [r3, #20]
 800844c:	f003 0304 	and.w	r3, r3, #4
 8008450:	2b04      	cmp	r3, #4
 8008452:	d1d9      	bne.n	8008408 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	681a      	ldr	r2, [r3, #0]
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008462:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	691a      	ldr	r2, [r3, #16]
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800846e:	b2d2      	uxtb	r2, r2
 8008470:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008476:	1c5a      	adds	r2, r3, #1
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008480:	3b01      	subs	r3, #1
 8008482:	b29a      	uxth	r2, r3
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800848c:	b29b      	uxth	r3, r3
 800848e:	3b01      	subs	r3, #1
 8008490:	b29a      	uxth	r2, r3
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8008496:	b662      	cpsie	i
}
 8008498:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	691a      	ldr	r2, [r3, #16]
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084a4:	b2d2      	uxtb	r2, r2
 80084a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084ac:	1c5a      	adds	r2, r3, #1
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80084b6:	3b01      	subs	r3, #1
 80084b8:	b29a      	uxth	r2, r3
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084c2:	b29b      	uxth	r3, r3
 80084c4:	3b01      	subs	r3, #1
 80084c6:	b29a      	uxth	r2, r3
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	855a      	strh	r2, [r3, #42]	; 0x2a
 80084cc:	e04e      	b.n	800856c <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80084ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80084d2:	68f8      	ldr	r0, [r7, #12]
 80084d4:	f000 fb62 	bl	8008b9c <I2C_WaitOnRXNEFlagUntilTimeout>
 80084d8:	4603      	mov	r3, r0
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d001      	beq.n	80084e2 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 80084de:	2301      	movs	r3, #1
 80084e0:	e058      	b.n	8008594 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	691a      	ldr	r2, [r3, #16]
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084ec:	b2d2      	uxtb	r2, r2
 80084ee:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084f4:	1c5a      	adds	r2, r3, #1
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80084fe:	3b01      	subs	r3, #1
 8008500:	b29a      	uxth	r2, r3
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800850a:	b29b      	uxth	r3, r3
 800850c:	3b01      	subs	r3, #1
 800850e:	b29a      	uxth	r2, r3
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	695b      	ldr	r3, [r3, #20]
 800851a:	f003 0304 	and.w	r3, r3, #4
 800851e:	2b04      	cmp	r3, #4
 8008520:	d124      	bne.n	800856c <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008526:	2b03      	cmp	r3, #3
 8008528:	d107      	bne.n	800853a <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	681a      	ldr	r2, [r3, #0]
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008538:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	691a      	ldr	r2, [r3, #16]
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008544:	b2d2      	uxtb	r2, r2
 8008546:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800854c:	1c5a      	adds	r2, r3, #1
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008556:	3b01      	subs	r3, #1
 8008558:	b29a      	uxth	r2, r3
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008562:	b29b      	uxth	r3, r3
 8008564:	3b01      	subs	r3, #1
 8008566:	b29a      	uxth	r2, r3
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008570:	2b00      	cmp	r3, #0
 8008572:	f47f ae88 	bne.w	8008286 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	2220      	movs	r2, #32
 800857a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	2200      	movs	r2, #0
 8008582:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	2200      	movs	r2, #0
 800858a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800858e:	2300      	movs	r3, #0
 8008590:	e000      	b.n	8008594 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8008592:	2302      	movs	r3, #2
  }
}
 8008594:	4618      	mov	r0, r3
 8008596:	3728      	adds	r7, #40	; 0x28
 8008598:	46bd      	mov	sp, r7
 800859a:	bd80      	pop	{r7, pc}
 800859c:	00010004 	.word	0x00010004
 80085a0:	20000498 	.word	0x20000498
 80085a4:	14f8b589 	.word	0x14f8b589

080085a8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b088      	sub	sp, #32
 80085ac:	af02      	add	r7, sp, #8
 80085ae:	60f8      	str	r0, [r7, #12]
 80085b0:	607a      	str	r2, [r7, #4]
 80085b2:	603b      	str	r3, [r7, #0]
 80085b4:	460b      	mov	r3, r1
 80085b6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085bc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80085be:	697b      	ldr	r3, [r7, #20]
 80085c0:	2b08      	cmp	r3, #8
 80085c2:	d006      	beq.n	80085d2 <I2C_MasterRequestWrite+0x2a>
 80085c4:	697b      	ldr	r3, [r7, #20]
 80085c6:	2b01      	cmp	r3, #1
 80085c8:	d003      	beq.n	80085d2 <I2C_MasterRequestWrite+0x2a>
 80085ca:	697b      	ldr	r3, [r7, #20]
 80085cc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80085d0:	d108      	bne.n	80085e4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	681a      	ldr	r2, [r3, #0]
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80085e0:	601a      	str	r2, [r3, #0]
 80085e2:	e00b      	b.n	80085fc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085e8:	2b12      	cmp	r3, #18
 80085ea:	d107      	bne.n	80085fc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	681a      	ldr	r2, [r3, #0]
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80085fa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	9300      	str	r3, [sp, #0]
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2200      	movs	r2, #0
 8008604:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008608:	68f8      	ldr	r0, [r7, #12]
 800860a:	f000 f91d 	bl	8008848 <I2C_WaitOnFlagUntilTimeout>
 800860e:	4603      	mov	r3, r0
 8008610:	2b00      	cmp	r3, #0
 8008612:	d00d      	beq.n	8008630 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800861e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008622:	d103      	bne.n	800862c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	f44f 7200 	mov.w	r2, #512	; 0x200
 800862a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800862c:	2303      	movs	r3, #3
 800862e:	e035      	b.n	800869c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	691b      	ldr	r3, [r3, #16]
 8008634:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008638:	d108      	bne.n	800864c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800863a:	897b      	ldrh	r3, [r7, #10]
 800863c:	b2db      	uxtb	r3, r3
 800863e:	461a      	mov	r2, r3
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008648:	611a      	str	r2, [r3, #16]
 800864a:	e01b      	b.n	8008684 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800864c:	897b      	ldrh	r3, [r7, #10]
 800864e:	11db      	asrs	r3, r3, #7
 8008650:	b2db      	uxtb	r3, r3
 8008652:	f003 0306 	and.w	r3, r3, #6
 8008656:	b2db      	uxtb	r3, r3
 8008658:	f063 030f 	orn	r3, r3, #15
 800865c:	b2da      	uxtb	r2, r3
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8008664:	683b      	ldr	r3, [r7, #0]
 8008666:	687a      	ldr	r2, [r7, #4]
 8008668:	490e      	ldr	r1, [pc, #56]	; (80086a4 <I2C_MasterRequestWrite+0xfc>)
 800866a:	68f8      	ldr	r0, [r7, #12]
 800866c:	f000 f966 	bl	800893c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008670:	4603      	mov	r3, r0
 8008672:	2b00      	cmp	r3, #0
 8008674:	d001      	beq.n	800867a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8008676:	2301      	movs	r3, #1
 8008678:	e010      	b.n	800869c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800867a:	897b      	ldrh	r3, [r7, #10]
 800867c:	b2da      	uxtb	r2, r3
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	687a      	ldr	r2, [r7, #4]
 8008688:	4907      	ldr	r1, [pc, #28]	; (80086a8 <I2C_MasterRequestWrite+0x100>)
 800868a:	68f8      	ldr	r0, [r7, #12]
 800868c:	f000 f956 	bl	800893c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008690:	4603      	mov	r3, r0
 8008692:	2b00      	cmp	r3, #0
 8008694:	d001      	beq.n	800869a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8008696:	2301      	movs	r3, #1
 8008698:	e000      	b.n	800869c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800869a:	2300      	movs	r3, #0
}
 800869c:	4618      	mov	r0, r3
 800869e:	3718      	adds	r7, #24
 80086a0:	46bd      	mov	sp, r7
 80086a2:	bd80      	pop	{r7, pc}
 80086a4:	00010008 	.word	0x00010008
 80086a8:	00010002 	.word	0x00010002

080086ac <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b088      	sub	sp, #32
 80086b0:	af02      	add	r7, sp, #8
 80086b2:	60f8      	str	r0, [r7, #12]
 80086b4:	607a      	str	r2, [r7, #4]
 80086b6:	603b      	str	r3, [r7, #0]
 80086b8:	460b      	mov	r3, r1
 80086ba:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086c0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	681a      	ldr	r2, [r3, #0]
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80086d0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80086d2:	697b      	ldr	r3, [r7, #20]
 80086d4:	2b08      	cmp	r3, #8
 80086d6:	d006      	beq.n	80086e6 <I2C_MasterRequestRead+0x3a>
 80086d8:	697b      	ldr	r3, [r7, #20]
 80086da:	2b01      	cmp	r3, #1
 80086dc:	d003      	beq.n	80086e6 <I2C_MasterRequestRead+0x3a>
 80086de:	697b      	ldr	r3, [r7, #20]
 80086e0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80086e4:	d108      	bne.n	80086f8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	681a      	ldr	r2, [r3, #0]
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80086f4:	601a      	str	r2, [r3, #0]
 80086f6:	e00b      	b.n	8008710 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086fc:	2b11      	cmp	r3, #17
 80086fe:	d107      	bne.n	8008710 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	681a      	ldr	r2, [r3, #0]
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800870e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	9300      	str	r3, [sp, #0]
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2200      	movs	r2, #0
 8008718:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800871c:	68f8      	ldr	r0, [r7, #12]
 800871e:	f000 f893 	bl	8008848 <I2C_WaitOnFlagUntilTimeout>
 8008722:	4603      	mov	r3, r0
 8008724:	2b00      	cmp	r3, #0
 8008726:	d00d      	beq.n	8008744 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008732:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008736:	d103      	bne.n	8008740 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800873e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008740:	2303      	movs	r3, #3
 8008742:	e079      	b.n	8008838 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	691b      	ldr	r3, [r3, #16]
 8008748:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800874c:	d108      	bne.n	8008760 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800874e:	897b      	ldrh	r3, [r7, #10]
 8008750:	b2db      	uxtb	r3, r3
 8008752:	f043 0301 	orr.w	r3, r3, #1
 8008756:	b2da      	uxtb	r2, r3
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	611a      	str	r2, [r3, #16]
 800875e:	e05f      	b.n	8008820 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008760:	897b      	ldrh	r3, [r7, #10]
 8008762:	11db      	asrs	r3, r3, #7
 8008764:	b2db      	uxtb	r3, r3
 8008766:	f003 0306 	and.w	r3, r3, #6
 800876a:	b2db      	uxtb	r3, r3
 800876c:	f063 030f 	orn	r3, r3, #15
 8008770:	b2da      	uxtb	r2, r3
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	687a      	ldr	r2, [r7, #4]
 800877c:	4930      	ldr	r1, [pc, #192]	; (8008840 <I2C_MasterRequestRead+0x194>)
 800877e:	68f8      	ldr	r0, [r7, #12]
 8008780:	f000 f8dc 	bl	800893c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008784:	4603      	mov	r3, r0
 8008786:	2b00      	cmp	r3, #0
 8008788:	d001      	beq.n	800878e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800878a:	2301      	movs	r3, #1
 800878c:	e054      	b.n	8008838 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800878e:	897b      	ldrh	r3, [r7, #10]
 8008790:	b2da      	uxtb	r2, r3
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008798:	683b      	ldr	r3, [r7, #0]
 800879a:	687a      	ldr	r2, [r7, #4]
 800879c:	4929      	ldr	r1, [pc, #164]	; (8008844 <I2C_MasterRequestRead+0x198>)
 800879e:	68f8      	ldr	r0, [r7, #12]
 80087a0:	f000 f8cc 	bl	800893c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80087a4:	4603      	mov	r3, r0
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d001      	beq.n	80087ae <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80087aa:	2301      	movs	r3, #1
 80087ac:	e044      	b.n	8008838 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80087ae:	2300      	movs	r3, #0
 80087b0:	613b      	str	r3, [r7, #16]
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	695b      	ldr	r3, [r3, #20]
 80087b8:	613b      	str	r3, [r7, #16]
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	699b      	ldr	r3, [r3, #24]
 80087c0:	613b      	str	r3, [r7, #16]
 80087c2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	681a      	ldr	r2, [r3, #0]
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80087d2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	9300      	str	r3, [sp, #0]
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2200      	movs	r2, #0
 80087dc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80087e0:	68f8      	ldr	r0, [r7, #12]
 80087e2:	f000 f831 	bl	8008848 <I2C_WaitOnFlagUntilTimeout>
 80087e6:	4603      	mov	r3, r0
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d00d      	beq.n	8008808 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80087fa:	d103      	bne.n	8008804 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008802:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8008804:	2303      	movs	r3, #3
 8008806:	e017      	b.n	8008838 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8008808:	897b      	ldrh	r3, [r7, #10]
 800880a:	11db      	asrs	r3, r3, #7
 800880c:	b2db      	uxtb	r3, r3
 800880e:	f003 0306 	and.w	r3, r3, #6
 8008812:	b2db      	uxtb	r3, r3
 8008814:	f063 030e 	orn	r3, r3, #14
 8008818:	b2da      	uxtb	r2, r3
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	687a      	ldr	r2, [r7, #4]
 8008824:	4907      	ldr	r1, [pc, #28]	; (8008844 <I2C_MasterRequestRead+0x198>)
 8008826:	68f8      	ldr	r0, [r7, #12]
 8008828:	f000 f888 	bl	800893c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800882c:	4603      	mov	r3, r0
 800882e:	2b00      	cmp	r3, #0
 8008830:	d001      	beq.n	8008836 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8008832:	2301      	movs	r3, #1
 8008834:	e000      	b.n	8008838 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8008836:	2300      	movs	r3, #0
}
 8008838:	4618      	mov	r0, r3
 800883a:	3718      	adds	r7, #24
 800883c:	46bd      	mov	sp, r7
 800883e:	bd80      	pop	{r7, pc}
 8008840:	00010008 	.word	0x00010008
 8008844:	00010002 	.word	0x00010002

08008848 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b084      	sub	sp, #16
 800884c:	af00      	add	r7, sp, #0
 800884e:	60f8      	str	r0, [r7, #12]
 8008850:	60b9      	str	r1, [r7, #8]
 8008852:	603b      	str	r3, [r7, #0]
 8008854:	4613      	mov	r3, r2
 8008856:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008858:	e048      	b.n	80088ec <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008860:	d044      	beq.n	80088ec <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008862:	f7fe f849 	bl	80068f8 <HAL_GetTick>
 8008866:	4602      	mov	r2, r0
 8008868:	69bb      	ldr	r3, [r7, #24]
 800886a:	1ad3      	subs	r3, r2, r3
 800886c:	683a      	ldr	r2, [r7, #0]
 800886e:	429a      	cmp	r2, r3
 8008870:	d302      	bcc.n	8008878 <I2C_WaitOnFlagUntilTimeout+0x30>
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d139      	bne.n	80088ec <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8008878:	68bb      	ldr	r3, [r7, #8]
 800887a:	0c1b      	lsrs	r3, r3, #16
 800887c:	b2db      	uxtb	r3, r3
 800887e:	2b01      	cmp	r3, #1
 8008880:	d10d      	bne.n	800889e <I2C_WaitOnFlagUntilTimeout+0x56>
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	695b      	ldr	r3, [r3, #20]
 8008888:	43da      	mvns	r2, r3
 800888a:	68bb      	ldr	r3, [r7, #8]
 800888c:	4013      	ands	r3, r2
 800888e:	b29b      	uxth	r3, r3
 8008890:	2b00      	cmp	r3, #0
 8008892:	bf0c      	ite	eq
 8008894:	2301      	moveq	r3, #1
 8008896:	2300      	movne	r3, #0
 8008898:	b2db      	uxtb	r3, r3
 800889a:	461a      	mov	r2, r3
 800889c:	e00c      	b.n	80088b8 <I2C_WaitOnFlagUntilTimeout+0x70>
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	699b      	ldr	r3, [r3, #24]
 80088a4:	43da      	mvns	r2, r3
 80088a6:	68bb      	ldr	r3, [r7, #8]
 80088a8:	4013      	ands	r3, r2
 80088aa:	b29b      	uxth	r3, r3
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	bf0c      	ite	eq
 80088b0:	2301      	moveq	r3, #1
 80088b2:	2300      	movne	r3, #0
 80088b4:	b2db      	uxtb	r3, r3
 80088b6:	461a      	mov	r2, r3
 80088b8:	79fb      	ldrb	r3, [r7, #7]
 80088ba:	429a      	cmp	r2, r3
 80088bc:	d116      	bne.n	80088ec <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	2200      	movs	r2, #0
 80088c2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	2220      	movs	r2, #32
 80088c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	2200      	movs	r2, #0
 80088d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088d8:	f043 0220 	orr.w	r2, r3, #32
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	2200      	movs	r2, #0
 80088e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80088e8:	2301      	movs	r3, #1
 80088ea:	e023      	b.n	8008934 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80088ec:	68bb      	ldr	r3, [r7, #8]
 80088ee:	0c1b      	lsrs	r3, r3, #16
 80088f0:	b2db      	uxtb	r3, r3
 80088f2:	2b01      	cmp	r3, #1
 80088f4:	d10d      	bne.n	8008912 <I2C_WaitOnFlagUntilTimeout+0xca>
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	695b      	ldr	r3, [r3, #20]
 80088fc:	43da      	mvns	r2, r3
 80088fe:	68bb      	ldr	r3, [r7, #8]
 8008900:	4013      	ands	r3, r2
 8008902:	b29b      	uxth	r3, r3
 8008904:	2b00      	cmp	r3, #0
 8008906:	bf0c      	ite	eq
 8008908:	2301      	moveq	r3, #1
 800890a:	2300      	movne	r3, #0
 800890c:	b2db      	uxtb	r3, r3
 800890e:	461a      	mov	r2, r3
 8008910:	e00c      	b.n	800892c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	699b      	ldr	r3, [r3, #24]
 8008918:	43da      	mvns	r2, r3
 800891a:	68bb      	ldr	r3, [r7, #8]
 800891c:	4013      	ands	r3, r2
 800891e:	b29b      	uxth	r3, r3
 8008920:	2b00      	cmp	r3, #0
 8008922:	bf0c      	ite	eq
 8008924:	2301      	moveq	r3, #1
 8008926:	2300      	movne	r3, #0
 8008928:	b2db      	uxtb	r3, r3
 800892a:	461a      	mov	r2, r3
 800892c:	79fb      	ldrb	r3, [r7, #7]
 800892e:	429a      	cmp	r2, r3
 8008930:	d093      	beq.n	800885a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008932:	2300      	movs	r3, #0
}
 8008934:	4618      	mov	r0, r3
 8008936:	3710      	adds	r7, #16
 8008938:	46bd      	mov	sp, r7
 800893a:	bd80      	pop	{r7, pc}

0800893c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b084      	sub	sp, #16
 8008940:	af00      	add	r7, sp, #0
 8008942:	60f8      	str	r0, [r7, #12]
 8008944:	60b9      	str	r1, [r7, #8]
 8008946:	607a      	str	r2, [r7, #4]
 8008948:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800894a:	e071      	b.n	8008a30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	695b      	ldr	r3, [r3, #20]
 8008952:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008956:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800895a:	d123      	bne.n	80089a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	681a      	ldr	r2, [r3, #0]
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800896a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008974:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	2200      	movs	r2, #0
 800897a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	2220      	movs	r2, #32
 8008980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	2200      	movs	r2, #0
 8008988:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008990:	f043 0204 	orr.w	r2, r3, #4
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	2200      	movs	r2, #0
 800899c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80089a0:	2301      	movs	r3, #1
 80089a2:	e067      	b.n	8008a74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089aa:	d041      	beq.n	8008a30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80089ac:	f7fd ffa4 	bl	80068f8 <HAL_GetTick>
 80089b0:	4602      	mov	r2, r0
 80089b2:	683b      	ldr	r3, [r7, #0]
 80089b4:	1ad3      	subs	r3, r2, r3
 80089b6:	687a      	ldr	r2, [r7, #4]
 80089b8:	429a      	cmp	r2, r3
 80089ba:	d302      	bcc.n	80089c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d136      	bne.n	8008a30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80089c2:	68bb      	ldr	r3, [r7, #8]
 80089c4:	0c1b      	lsrs	r3, r3, #16
 80089c6:	b2db      	uxtb	r3, r3
 80089c8:	2b01      	cmp	r3, #1
 80089ca:	d10c      	bne.n	80089e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	695b      	ldr	r3, [r3, #20]
 80089d2:	43da      	mvns	r2, r3
 80089d4:	68bb      	ldr	r3, [r7, #8]
 80089d6:	4013      	ands	r3, r2
 80089d8:	b29b      	uxth	r3, r3
 80089da:	2b00      	cmp	r3, #0
 80089dc:	bf14      	ite	ne
 80089de:	2301      	movne	r3, #1
 80089e0:	2300      	moveq	r3, #0
 80089e2:	b2db      	uxtb	r3, r3
 80089e4:	e00b      	b.n	80089fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	699b      	ldr	r3, [r3, #24]
 80089ec:	43da      	mvns	r2, r3
 80089ee:	68bb      	ldr	r3, [r7, #8]
 80089f0:	4013      	ands	r3, r2
 80089f2:	b29b      	uxth	r3, r3
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	bf14      	ite	ne
 80089f8:	2301      	movne	r3, #1
 80089fa:	2300      	moveq	r3, #0
 80089fc:	b2db      	uxtb	r3, r3
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d016      	beq.n	8008a30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	2200      	movs	r2, #0
 8008a06:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	2220      	movs	r2, #32
 8008a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	2200      	movs	r2, #0
 8008a14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a1c:	f043 0220 	orr.w	r2, r3, #32
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	2200      	movs	r2, #0
 8008a28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8008a2c:	2301      	movs	r3, #1
 8008a2e:	e021      	b.n	8008a74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008a30:	68bb      	ldr	r3, [r7, #8]
 8008a32:	0c1b      	lsrs	r3, r3, #16
 8008a34:	b2db      	uxtb	r3, r3
 8008a36:	2b01      	cmp	r3, #1
 8008a38:	d10c      	bne.n	8008a54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	695b      	ldr	r3, [r3, #20]
 8008a40:	43da      	mvns	r2, r3
 8008a42:	68bb      	ldr	r3, [r7, #8]
 8008a44:	4013      	ands	r3, r2
 8008a46:	b29b      	uxth	r3, r3
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	bf14      	ite	ne
 8008a4c:	2301      	movne	r3, #1
 8008a4e:	2300      	moveq	r3, #0
 8008a50:	b2db      	uxtb	r3, r3
 8008a52:	e00b      	b.n	8008a6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	699b      	ldr	r3, [r3, #24]
 8008a5a:	43da      	mvns	r2, r3
 8008a5c:	68bb      	ldr	r3, [r7, #8]
 8008a5e:	4013      	ands	r3, r2
 8008a60:	b29b      	uxth	r3, r3
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	bf14      	ite	ne
 8008a66:	2301      	movne	r3, #1
 8008a68:	2300      	moveq	r3, #0
 8008a6a:	b2db      	uxtb	r3, r3
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	f47f af6d 	bne.w	800894c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8008a72:	2300      	movs	r3, #0
}
 8008a74:	4618      	mov	r0, r3
 8008a76:	3710      	adds	r7, #16
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	bd80      	pop	{r7, pc}

08008a7c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b084      	sub	sp, #16
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	60f8      	str	r0, [r7, #12]
 8008a84:	60b9      	str	r1, [r7, #8]
 8008a86:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008a88:	e034      	b.n	8008af4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008a8a:	68f8      	ldr	r0, [r7, #12]
 8008a8c:	f000 f8e3 	bl	8008c56 <I2C_IsAcknowledgeFailed>
 8008a90:	4603      	mov	r3, r0
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d001      	beq.n	8008a9a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008a96:	2301      	movs	r3, #1
 8008a98:	e034      	b.n	8008b04 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a9a:	68bb      	ldr	r3, [r7, #8]
 8008a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008aa0:	d028      	beq.n	8008af4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008aa2:	f7fd ff29 	bl	80068f8 <HAL_GetTick>
 8008aa6:	4602      	mov	r2, r0
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	1ad3      	subs	r3, r2, r3
 8008aac:	68ba      	ldr	r2, [r7, #8]
 8008aae:	429a      	cmp	r2, r3
 8008ab0:	d302      	bcc.n	8008ab8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008ab2:	68bb      	ldr	r3, [r7, #8]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d11d      	bne.n	8008af4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	695b      	ldr	r3, [r3, #20]
 8008abe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ac2:	2b80      	cmp	r3, #128	; 0x80
 8008ac4:	d016      	beq.n	8008af4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	2200      	movs	r2, #0
 8008aca:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	2220      	movs	r2, #32
 8008ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ae0:	f043 0220 	orr.w	r2, r3, #32
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	2200      	movs	r2, #0
 8008aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8008af0:	2301      	movs	r3, #1
 8008af2:	e007      	b.n	8008b04 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	695b      	ldr	r3, [r3, #20]
 8008afa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008afe:	2b80      	cmp	r3, #128	; 0x80
 8008b00:	d1c3      	bne.n	8008a8a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008b02:	2300      	movs	r3, #0
}
 8008b04:	4618      	mov	r0, r3
 8008b06:	3710      	adds	r7, #16
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	bd80      	pop	{r7, pc}

08008b0c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b084      	sub	sp, #16
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	60f8      	str	r0, [r7, #12]
 8008b14:	60b9      	str	r1, [r7, #8]
 8008b16:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008b18:	e034      	b.n	8008b84 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008b1a:	68f8      	ldr	r0, [r7, #12]
 8008b1c:	f000 f89b 	bl	8008c56 <I2C_IsAcknowledgeFailed>
 8008b20:	4603      	mov	r3, r0
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d001      	beq.n	8008b2a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008b26:	2301      	movs	r3, #1
 8008b28:	e034      	b.n	8008b94 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008b2a:	68bb      	ldr	r3, [r7, #8]
 8008b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b30:	d028      	beq.n	8008b84 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b32:	f7fd fee1 	bl	80068f8 <HAL_GetTick>
 8008b36:	4602      	mov	r2, r0
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	1ad3      	subs	r3, r2, r3
 8008b3c:	68ba      	ldr	r2, [r7, #8]
 8008b3e:	429a      	cmp	r2, r3
 8008b40:	d302      	bcc.n	8008b48 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008b42:	68bb      	ldr	r3, [r7, #8]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d11d      	bne.n	8008b84 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	695b      	ldr	r3, [r3, #20]
 8008b4e:	f003 0304 	and.w	r3, r3, #4
 8008b52:	2b04      	cmp	r3, #4
 8008b54:	d016      	beq.n	8008b84 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	2200      	movs	r2, #0
 8008b5a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	2220      	movs	r2, #32
 8008b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	2200      	movs	r2, #0
 8008b68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b70:	f043 0220 	orr.w	r2, r3, #32
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8008b80:	2301      	movs	r3, #1
 8008b82:	e007      	b.n	8008b94 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	695b      	ldr	r3, [r3, #20]
 8008b8a:	f003 0304 	and.w	r3, r3, #4
 8008b8e:	2b04      	cmp	r3, #4
 8008b90:	d1c3      	bne.n	8008b1a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008b92:	2300      	movs	r3, #0
}
 8008b94:	4618      	mov	r0, r3
 8008b96:	3710      	adds	r7, #16
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	bd80      	pop	{r7, pc}

08008b9c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b084      	sub	sp, #16
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	60f8      	str	r0, [r7, #12]
 8008ba4:	60b9      	str	r1, [r7, #8]
 8008ba6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008ba8:	e049      	b.n	8008c3e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	695b      	ldr	r3, [r3, #20]
 8008bb0:	f003 0310 	and.w	r3, r3, #16
 8008bb4:	2b10      	cmp	r3, #16
 8008bb6:	d119      	bne.n	8008bec <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	f06f 0210 	mvn.w	r2, #16
 8008bc0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	2220      	movs	r2, #32
 8008bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	2200      	movs	r2, #0
 8008be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008be8:	2301      	movs	r3, #1
 8008bea:	e030      	b.n	8008c4e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008bec:	f7fd fe84 	bl	80068f8 <HAL_GetTick>
 8008bf0:	4602      	mov	r2, r0
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	1ad3      	subs	r3, r2, r3
 8008bf6:	68ba      	ldr	r2, [r7, #8]
 8008bf8:	429a      	cmp	r2, r3
 8008bfa:	d302      	bcc.n	8008c02 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008bfc:	68bb      	ldr	r3, [r7, #8]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d11d      	bne.n	8008c3e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	695b      	ldr	r3, [r3, #20]
 8008c08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c0c:	2b40      	cmp	r3, #64	; 0x40
 8008c0e:	d016      	beq.n	8008c3e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	2200      	movs	r2, #0
 8008c14:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	2220      	movs	r2, #32
 8008c1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	2200      	movs	r2, #0
 8008c22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c2a:	f043 0220 	orr.w	r2, r3, #32
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	2200      	movs	r2, #0
 8008c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008c3a:	2301      	movs	r3, #1
 8008c3c:	e007      	b.n	8008c4e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	695b      	ldr	r3, [r3, #20]
 8008c44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c48:	2b40      	cmp	r3, #64	; 0x40
 8008c4a:	d1ae      	bne.n	8008baa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008c4c:	2300      	movs	r3, #0
}
 8008c4e:	4618      	mov	r0, r3
 8008c50:	3710      	adds	r7, #16
 8008c52:	46bd      	mov	sp, r7
 8008c54:	bd80      	pop	{r7, pc}

08008c56 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008c56:	b480      	push	{r7}
 8008c58:	b083      	sub	sp, #12
 8008c5a:	af00      	add	r7, sp, #0
 8008c5c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	695b      	ldr	r3, [r3, #20]
 8008c64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008c68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c6c:	d11b      	bne.n	8008ca6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008c76:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	2220      	movs	r2, #32
 8008c82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	2200      	movs	r2, #0
 8008c8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c92:	f043 0204 	orr.w	r2, r3, #4
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008ca2:	2301      	movs	r3, #1
 8008ca4:	e000      	b.n	8008ca8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008ca6:	2300      	movs	r3, #0
}
 8008ca8:	4618      	mov	r0, r3
 8008caa:	370c      	adds	r7, #12
 8008cac:	46bd      	mov	sp, r7
 8008cae:	bc80      	pop	{r7}
 8008cb0:	4770      	bx	lr
	...

08008cb4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b086      	sub	sp, #24
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d101      	bne.n	8008cc6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008cc2:	2301      	movs	r3, #1
 8008cc4:	e272      	b.n	80091ac <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	f003 0301 	and.w	r3, r3, #1
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	f000 8087 	beq.w	8008de2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008cd4:	4b92      	ldr	r3, [pc, #584]	; (8008f20 <HAL_RCC_OscConfig+0x26c>)
 8008cd6:	685b      	ldr	r3, [r3, #4]
 8008cd8:	f003 030c 	and.w	r3, r3, #12
 8008cdc:	2b04      	cmp	r3, #4
 8008cde:	d00c      	beq.n	8008cfa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8008ce0:	4b8f      	ldr	r3, [pc, #572]	; (8008f20 <HAL_RCC_OscConfig+0x26c>)
 8008ce2:	685b      	ldr	r3, [r3, #4]
 8008ce4:	f003 030c 	and.w	r3, r3, #12
 8008ce8:	2b08      	cmp	r3, #8
 8008cea:	d112      	bne.n	8008d12 <HAL_RCC_OscConfig+0x5e>
 8008cec:	4b8c      	ldr	r3, [pc, #560]	; (8008f20 <HAL_RCC_OscConfig+0x26c>)
 8008cee:	685b      	ldr	r3, [r3, #4]
 8008cf0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008cf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008cf8:	d10b      	bne.n	8008d12 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008cfa:	4b89      	ldr	r3, [pc, #548]	; (8008f20 <HAL_RCC_OscConfig+0x26c>)
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d06c      	beq.n	8008de0 <HAL_RCC_OscConfig+0x12c>
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	685b      	ldr	r3, [r3, #4]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d168      	bne.n	8008de0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8008d0e:	2301      	movs	r3, #1
 8008d10:	e24c      	b.n	80091ac <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	685b      	ldr	r3, [r3, #4]
 8008d16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d1a:	d106      	bne.n	8008d2a <HAL_RCC_OscConfig+0x76>
 8008d1c:	4b80      	ldr	r3, [pc, #512]	; (8008f20 <HAL_RCC_OscConfig+0x26c>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	4a7f      	ldr	r2, [pc, #508]	; (8008f20 <HAL_RCC_OscConfig+0x26c>)
 8008d22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008d26:	6013      	str	r3, [r2, #0]
 8008d28:	e02e      	b.n	8008d88 <HAL_RCC_OscConfig+0xd4>
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	685b      	ldr	r3, [r3, #4]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d10c      	bne.n	8008d4c <HAL_RCC_OscConfig+0x98>
 8008d32:	4b7b      	ldr	r3, [pc, #492]	; (8008f20 <HAL_RCC_OscConfig+0x26c>)
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	4a7a      	ldr	r2, [pc, #488]	; (8008f20 <HAL_RCC_OscConfig+0x26c>)
 8008d38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008d3c:	6013      	str	r3, [r2, #0]
 8008d3e:	4b78      	ldr	r3, [pc, #480]	; (8008f20 <HAL_RCC_OscConfig+0x26c>)
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	4a77      	ldr	r2, [pc, #476]	; (8008f20 <HAL_RCC_OscConfig+0x26c>)
 8008d44:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008d48:	6013      	str	r3, [r2, #0]
 8008d4a:	e01d      	b.n	8008d88 <HAL_RCC_OscConfig+0xd4>
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	685b      	ldr	r3, [r3, #4]
 8008d50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008d54:	d10c      	bne.n	8008d70 <HAL_RCC_OscConfig+0xbc>
 8008d56:	4b72      	ldr	r3, [pc, #456]	; (8008f20 <HAL_RCC_OscConfig+0x26c>)
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	4a71      	ldr	r2, [pc, #452]	; (8008f20 <HAL_RCC_OscConfig+0x26c>)
 8008d5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008d60:	6013      	str	r3, [r2, #0]
 8008d62:	4b6f      	ldr	r3, [pc, #444]	; (8008f20 <HAL_RCC_OscConfig+0x26c>)
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	4a6e      	ldr	r2, [pc, #440]	; (8008f20 <HAL_RCC_OscConfig+0x26c>)
 8008d68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008d6c:	6013      	str	r3, [r2, #0]
 8008d6e:	e00b      	b.n	8008d88 <HAL_RCC_OscConfig+0xd4>
 8008d70:	4b6b      	ldr	r3, [pc, #428]	; (8008f20 <HAL_RCC_OscConfig+0x26c>)
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	4a6a      	ldr	r2, [pc, #424]	; (8008f20 <HAL_RCC_OscConfig+0x26c>)
 8008d76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008d7a:	6013      	str	r3, [r2, #0]
 8008d7c:	4b68      	ldr	r3, [pc, #416]	; (8008f20 <HAL_RCC_OscConfig+0x26c>)
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	4a67      	ldr	r2, [pc, #412]	; (8008f20 <HAL_RCC_OscConfig+0x26c>)
 8008d82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008d86:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	685b      	ldr	r3, [r3, #4]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d013      	beq.n	8008db8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008d90:	f7fd fdb2 	bl	80068f8 <HAL_GetTick>
 8008d94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008d96:	e008      	b.n	8008daa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008d98:	f7fd fdae 	bl	80068f8 <HAL_GetTick>
 8008d9c:	4602      	mov	r2, r0
 8008d9e:	693b      	ldr	r3, [r7, #16]
 8008da0:	1ad3      	subs	r3, r2, r3
 8008da2:	2b64      	cmp	r3, #100	; 0x64
 8008da4:	d901      	bls.n	8008daa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8008da6:	2303      	movs	r3, #3
 8008da8:	e200      	b.n	80091ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008daa:	4b5d      	ldr	r3, [pc, #372]	; (8008f20 <HAL_RCC_OscConfig+0x26c>)
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d0f0      	beq.n	8008d98 <HAL_RCC_OscConfig+0xe4>
 8008db6:	e014      	b.n	8008de2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008db8:	f7fd fd9e 	bl	80068f8 <HAL_GetTick>
 8008dbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008dbe:	e008      	b.n	8008dd2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008dc0:	f7fd fd9a 	bl	80068f8 <HAL_GetTick>
 8008dc4:	4602      	mov	r2, r0
 8008dc6:	693b      	ldr	r3, [r7, #16]
 8008dc8:	1ad3      	subs	r3, r2, r3
 8008dca:	2b64      	cmp	r3, #100	; 0x64
 8008dcc:	d901      	bls.n	8008dd2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8008dce:	2303      	movs	r3, #3
 8008dd0:	e1ec      	b.n	80091ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008dd2:	4b53      	ldr	r3, [pc, #332]	; (8008f20 <HAL_RCC_OscConfig+0x26c>)
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d1f0      	bne.n	8008dc0 <HAL_RCC_OscConfig+0x10c>
 8008dde:	e000      	b.n	8008de2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008de0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	f003 0302 	and.w	r3, r3, #2
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d063      	beq.n	8008eb6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008dee:	4b4c      	ldr	r3, [pc, #304]	; (8008f20 <HAL_RCC_OscConfig+0x26c>)
 8008df0:	685b      	ldr	r3, [r3, #4]
 8008df2:	f003 030c 	and.w	r3, r3, #12
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d00b      	beq.n	8008e12 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8008dfa:	4b49      	ldr	r3, [pc, #292]	; (8008f20 <HAL_RCC_OscConfig+0x26c>)
 8008dfc:	685b      	ldr	r3, [r3, #4]
 8008dfe:	f003 030c 	and.w	r3, r3, #12
 8008e02:	2b08      	cmp	r3, #8
 8008e04:	d11c      	bne.n	8008e40 <HAL_RCC_OscConfig+0x18c>
 8008e06:	4b46      	ldr	r3, [pc, #280]	; (8008f20 <HAL_RCC_OscConfig+0x26c>)
 8008e08:	685b      	ldr	r3, [r3, #4]
 8008e0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d116      	bne.n	8008e40 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008e12:	4b43      	ldr	r3, [pc, #268]	; (8008f20 <HAL_RCC_OscConfig+0x26c>)
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	f003 0302 	and.w	r3, r3, #2
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d005      	beq.n	8008e2a <HAL_RCC_OscConfig+0x176>
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	691b      	ldr	r3, [r3, #16]
 8008e22:	2b01      	cmp	r3, #1
 8008e24:	d001      	beq.n	8008e2a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8008e26:	2301      	movs	r3, #1
 8008e28:	e1c0      	b.n	80091ac <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008e2a:	4b3d      	ldr	r3, [pc, #244]	; (8008f20 <HAL_RCC_OscConfig+0x26c>)
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	695b      	ldr	r3, [r3, #20]
 8008e36:	00db      	lsls	r3, r3, #3
 8008e38:	4939      	ldr	r1, [pc, #228]	; (8008f20 <HAL_RCC_OscConfig+0x26c>)
 8008e3a:	4313      	orrs	r3, r2
 8008e3c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008e3e:	e03a      	b.n	8008eb6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	691b      	ldr	r3, [r3, #16]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d020      	beq.n	8008e8a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008e48:	4b36      	ldr	r3, [pc, #216]	; (8008f24 <HAL_RCC_OscConfig+0x270>)
 8008e4a:	2201      	movs	r2, #1
 8008e4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008e4e:	f7fd fd53 	bl	80068f8 <HAL_GetTick>
 8008e52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008e54:	e008      	b.n	8008e68 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008e56:	f7fd fd4f 	bl	80068f8 <HAL_GetTick>
 8008e5a:	4602      	mov	r2, r0
 8008e5c:	693b      	ldr	r3, [r7, #16]
 8008e5e:	1ad3      	subs	r3, r2, r3
 8008e60:	2b02      	cmp	r3, #2
 8008e62:	d901      	bls.n	8008e68 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8008e64:	2303      	movs	r3, #3
 8008e66:	e1a1      	b.n	80091ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008e68:	4b2d      	ldr	r3, [pc, #180]	; (8008f20 <HAL_RCC_OscConfig+0x26c>)
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	f003 0302 	and.w	r3, r3, #2
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d0f0      	beq.n	8008e56 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008e74:	4b2a      	ldr	r3, [pc, #168]	; (8008f20 <HAL_RCC_OscConfig+0x26c>)
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	695b      	ldr	r3, [r3, #20]
 8008e80:	00db      	lsls	r3, r3, #3
 8008e82:	4927      	ldr	r1, [pc, #156]	; (8008f20 <HAL_RCC_OscConfig+0x26c>)
 8008e84:	4313      	orrs	r3, r2
 8008e86:	600b      	str	r3, [r1, #0]
 8008e88:	e015      	b.n	8008eb6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008e8a:	4b26      	ldr	r3, [pc, #152]	; (8008f24 <HAL_RCC_OscConfig+0x270>)
 8008e8c:	2200      	movs	r2, #0
 8008e8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008e90:	f7fd fd32 	bl	80068f8 <HAL_GetTick>
 8008e94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008e96:	e008      	b.n	8008eaa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008e98:	f7fd fd2e 	bl	80068f8 <HAL_GetTick>
 8008e9c:	4602      	mov	r2, r0
 8008e9e:	693b      	ldr	r3, [r7, #16]
 8008ea0:	1ad3      	subs	r3, r2, r3
 8008ea2:	2b02      	cmp	r3, #2
 8008ea4:	d901      	bls.n	8008eaa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8008ea6:	2303      	movs	r3, #3
 8008ea8:	e180      	b.n	80091ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008eaa:	4b1d      	ldr	r3, [pc, #116]	; (8008f20 <HAL_RCC_OscConfig+0x26c>)
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	f003 0302 	and.w	r3, r3, #2
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d1f0      	bne.n	8008e98 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	f003 0308 	and.w	r3, r3, #8
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d03a      	beq.n	8008f38 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	699b      	ldr	r3, [r3, #24]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d019      	beq.n	8008efe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008eca:	4b17      	ldr	r3, [pc, #92]	; (8008f28 <HAL_RCC_OscConfig+0x274>)
 8008ecc:	2201      	movs	r2, #1
 8008ece:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008ed0:	f7fd fd12 	bl	80068f8 <HAL_GetTick>
 8008ed4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008ed6:	e008      	b.n	8008eea <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008ed8:	f7fd fd0e 	bl	80068f8 <HAL_GetTick>
 8008edc:	4602      	mov	r2, r0
 8008ede:	693b      	ldr	r3, [r7, #16]
 8008ee0:	1ad3      	subs	r3, r2, r3
 8008ee2:	2b02      	cmp	r3, #2
 8008ee4:	d901      	bls.n	8008eea <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8008ee6:	2303      	movs	r3, #3
 8008ee8:	e160      	b.n	80091ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008eea:	4b0d      	ldr	r3, [pc, #52]	; (8008f20 <HAL_RCC_OscConfig+0x26c>)
 8008eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eee:	f003 0302 	and.w	r3, r3, #2
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d0f0      	beq.n	8008ed8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8008ef6:	2001      	movs	r0, #1
 8008ef8:	f000 face 	bl	8009498 <RCC_Delay>
 8008efc:	e01c      	b.n	8008f38 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008efe:	4b0a      	ldr	r3, [pc, #40]	; (8008f28 <HAL_RCC_OscConfig+0x274>)
 8008f00:	2200      	movs	r2, #0
 8008f02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008f04:	f7fd fcf8 	bl	80068f8 <HAL_GetTick>
 8008f08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008f0a:	e00f      	b.n	8008f2c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008f0c:	f7fd fcf4 	bl	80068f8 <HAL_GetTick>
 8008f10:	4602      	mov	r2, r0
 8008f12:	693b      	ldr	r3, [r7, #16]
 8008f14:	1ad3      	subs	r3, r2, r3
 8008f16:	2b02      	cmp	r3, #2
 8008f18:	d908      	bls.n	8008f2c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8008f1a:	2303      	movs	r3, #3
 8008f1c:	e146      	b.n	80091ac <HAL_RCC_OscConfig+0x4f8>
 8008f1e:	bf00      	nop
 8008f20:	40021000 	.word	0x40021000
 8008f24:	42420000 	.word	0x42420000
 8008f28:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008f2c:	4b92      	ldr	r3, [pc, #584]	; (8009178 <HAL_RCC_OscConfig+0x4c4>)
 8008f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f30:	f003 0302 	and.w	r3, r3, #2
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d1e9      	bne.n	8008f0c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	f003 0304 	and.w	r3, r3, #4
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	f000 80a6 	beq.w	8009092 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008f46:	2300      	movs	r3, #0
 8008f48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008f4a:	4b8b      	ldr	r3, [pc, #556]	; (8009178 <HAL_RCC_OscConfig+0x4c4>)
 8008f4c:	69db      	ldr	r3, [r3, #28]
 8008f4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d10d      	bne.n	8008f72 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008f56:	4b88      	ldr	r3, [pc, #544]	; (8009178 <HAL_RCC_OscConfig+0x4c4>)
 8008f58:	69db      	ldr	r3, [r3, #28]
 8008f5a:	4a87      	ldr	r2, [pc, #540]	; (8009178 <HAL_RCC_OscConfig+0x4c4>)
 8008f5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008f60:	61d3      	str	r3, [r2, #28]
 8008f62:	4b85      	ldr	r3, [pc, #532]	; (8009178 <HAL_RCC_OscConfig+0x4c4>)
 8008f64:	69db      	ldr	r3, [r3, #28]
 8008f66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008f6a:	60bb      	str	r3, [r7, #8]
 8008f6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008f6e:	2301      	movs	r3, #1
 8008f70:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008f72:	4b82      	ldr	r3, [pc, #520]	; (800917c <HAL_RCC_OscConfig+0x4c8>)
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d118      	bne.n	8008fb0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008f7e:	4b7f      	ldr	r3, [pc, #508]	; (800917c <HAL_RCC_OscConfig+0x4c8>)
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	4a7e      	ldr	r2, [pc, #504]	; (800917c <HAL_RCC_OscConfig+0x4c8>)
 8008f84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008f88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008f8a:	f7fd fcb5 	bl	80068f8 <HAL_GetTick>
 8008f8e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008f90:	e008      	b.n	8008fa4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008f92:	f7fd fcb1 	bl	80068f8 <HAL_GetTick>
 8008f96:	4602      	mov	r2, r0
 8008f98:	693b      	ldr	r3, [r7, #16]
 8008f9a:	1ad3      	subs	r3, r2, r3
 8008f9c:	2b64      	cmp	r3, #100	; 0x64
 8008f9e:	d901      	bls.n	8008fa4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8008fa0:	2303      	movs	r3, #3
 8008fa2:	e103      	b.n	80091ac <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008fa4:	4b75      	ldr	r3, [pc, #468]	; (800917c <HAL_RCC_OscConfig+0x4c8>)
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d0f0      	beq.n	8008f92 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	68db      	ldr	r3, [r3, #12]
 8008fb4:	2b01      	cmp	r3, #1
 8008fb6:	d106      	bne.n	8008fc6 <HAL_RCC_OscConfig+0x312>
 8008fb8:	4b6f      	ldr	r3, [pc, #444]	; (8009178 <HAL_RCC_OscConfig+0x4c4>)
 8008fba:	6a1b      	ldr	r3, [r3, #32]
 8008fbc:	4a6e      	ldr	r2, [pc, #440]	; (8009178 <HAL_RCC_OscConfig+0x4c4>)
 8008fbe:	f043 0301 	orr.w	r3, r3, #1
 8008fc2:	6213      	str	r3, [r2, #32]
 8008fc4:	e02d      	b.n	8009022 <HAL_RCC_OscConfig+0x36e>
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	68db      	ldr	r3, [r3, #12]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d10c      	bne.n	8008fe8 <HAL_RCC_OscConfig+0x334>
 8008fce:	4b6a      	ldr	r3, [pc, #424]	; (8009178 <HAL_RCC_OscConfig+0x4c4>)
 8008fd0:	6a1b      	ldr	r3, [r3, #32]
 8008fd2:	4a69      	ldr	r2, [pc, #420]	; (8009178 <HAL_RCC_OscConfig+0x4c4>)
 8008fd4:	f023 0301 	bic.w	r3, r3, #1
 8008fd8:	6213      	str	r3, [r2, #32]
 8008fda:	4b67      	ldr	r3, [pc, #412]	; (8009178 <HAL_RCC_OscConfig+0x4c4>)
 8008fdc:	6a1b      	ldr	r3, [r3, #32]
 8008fde:	4a66      	ldr	r2, [pc, #408]	; (8009178 <HAL_RCC_OscConfig+0x4c4>)
 8008fe0:	f023 0304 	bic.w	r3, r3, #4
 8008fe4:	6213      	str	r3, [r2, #32]
 8008fe6:	e01c      	b.n	8009022 <HAL_RCC_OscConfig+0x36e>
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	68db      	ldr	r3, [r3, #12]
 8008fec:	2b05      	cmp	r3, #5
 8008fee:	d10c      	bne.n	800900a <HAL_RCC_OscConfig+0x356>
 8008ff0:	4b61      	ldr	r3, [pc, #388]	; (8009178 <HAL_RCC_OscConfig+0x4c4>)
 8008ff2:	6a1b      	ldr	r3, [r3, #32]
 8008ff4:	4a60      	ldr	r2, [pc, #384]	; (8009178 <HAL_RCC_OscConfig+0x4c4>)
 8008ff6:	f043 0304 	orr.w	r3, r3, #4
 8008ffa:	6213      	str	r3, [r2, #32]
 8008ffc:	4b5e      	ldr	r3, [pc, #376]	; (8009178 <HAL_RCC_OscConfig+0x4c4>)
 8008ffe:	6a1b      	ldr	r3, [r3, #32]
 8009000:	4a5d      	ldr	r2, [pc, #372]	; (8009178 <HAL_RCC_OscConfig+0x4c4>)
 8009002:	f043 0301 	orr.w	r3, r3, #1
 8009006:	6213      	str	r3, [r2, #32]
 8009008:	e00b      	b.n	8009022 <HAL_RCC_OscConfig+0x36e>
 800900a:	4b5b      	ldr	r3, [pc, #364]	; (8009178 <HAL_RCC_OscConfig+0x4c4>)
 800900c:	6a1b      	ldr	r3, [r3, #32]
 800900e:	4a5a      	ldr	r2, [pc, #360]	; (8009178 <HAL_RCC_OscConfig+0x4c4>)
 8009010:	f023 0301 	bic.w	r3, r3, #1
 8009014:	6213      	str	r3, [r2, #32]
 8009016:	4b58      	ldr	r3, [pc, #352]	; (8009178 <HAL_RCC_OscConfig+0x4c4>)
 8009018:	6a1b      	ldr	r3, [r3, #32]
 800901a:	4a57      	ldr	r2, [pc, #348]	; (8009178 <HAL_RCC_OscConfig+0x4c4>)
 800901c:	f023 0304 	bic.w	r3, r3, #4
 8009020:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	68db      	ldr	r3, [r3, #12]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d015      	beq.n	8009056 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800902a:	f7fd fc65 	bl	80068f8 <HAL_GetTick>
 800902e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009030:	e00a      	b.n	8009048 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009032:	f7fd fc61 	bl	80068f8 <HAL_GetTick>
 8009036:	4602      	mov	r2, r0
 8009038:	693b      	ldr	r3, [r7, #16]
 800903a:	1ad3      	subs	r3, r2, r3
 800903c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009040:	4293      	cmp	r3, r2
 8009042:	d901      	bls.n	8009048 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8009044:	2303      	movs	r3, #3
 8009046:	e0b1      	b.n	80091ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009048:	4b4b      	ldr	r3, [pc, #300]	; (8009178 <HAL_RCC_OscConfig+0x4c4>)
 800904a:	6a1b      	ldr	r3, [r3, #32]
 800904c:	f003 0302 	and.w	r3, r3, #2
 8009050:	2b00      	cmp	r3, #0
 8009052:	d0ee      	beq.n	8009032 <HAL_RCC_OscConfig+0x37e>
 8009054:	e014      	b.n	8009080 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009056:	f7fd fc4f 	bl	80068f8 <HAL_GetTick>
 800905a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800905c:	e00a      	b.n	8009074 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800905e:	f7fd fc4b 	bl	80068f8 <HAL_GetTick>
 8009062:	4602      	mov	r2, r0
 8009064:	693b      	ldr	r3, [r7, #16]
 8009066:	1ad3      	subs	r3, r2, r3
 8009068:	f241 3288 	movw	r2, #5000	; 0x1388
 800906c:	4293      	cmp	r3, r2
 800906e:	d901      	bls.n	8009074 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8009070:	2303      	movs	r3, #3
 8009072:	e09b      	b.n	80091ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009074:	4b40      	ldr	r3, [pc, #256]	; (8009178 <HAL_RCC_OscConfig+0x4c4>)
 8009076:	6a1b      	ldr	r3, [r3, #32]
 8009078:	f003 0302 	and.w	r3, r3, #2
 800907c:	2b00      	cmp	r3, #0
 800907e:	d1ee      	bne.n	800905e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8009080:	7dfb      	ldrb	r3, [r7, #23]
 8009082:	2b01      	cmp	r3, #1
 8009084:	d105      	bne.n	8009092 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009086:	4b3c      	ldr	r3, [pc, #240]	; (8009178 <HAL_RCC_OscConfig+0x4c4>)
 8009088:	69db      	ldr	r3, [r3, #28]
 800908a:	4a3b      	ldr	r2, [pc, #236]	; (8009178 <HAL_RCC_OscConfig+0x4c4>)
 800908c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009090:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	69db      	ldr	r3, [r3, #28]
 8009096:	2b00      	cmp	r3, #0
 8009098:	f000 8087 	beq.w	80091aa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800909c:	4b36      	ldr	r3, [pc, #216]	; (8009178 <HAL_RCC_OscConfig+0x4c4>)
 800909e:	685b      	ldr	r3, [r3, #4]
 80090a0:	f003 030c 	and.w	r3, r3, #12
 80090a4:	2b08      	cmp	r3, #8
 80090a6:	d061      	beq.n	800916c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	69db      	ldr	r3, [r3, #28]
 80090ac:	2b02      	cmp	r3, #2
 80090ae:	d146      	bne.n	800913e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80090b0:	4b33      	ldr	r3, [pc, #204]	; (8009180 <HAL_RCC_OscConfig+0x4cc>)
 80090b2:	2200      	movs	r2, #0
 80090b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80090b6:	f7fd fc1f 	bl	80068f8 <HAL_GetTick>
 80090ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80090bc:	e008      	b.n	80090d0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80090be:	f7fd fc1b 	bl	80068f8 <HAL_GetTick>
 80090c2:	4602      	mov	r2, r0
 80090c4:	693b      	ldr	r3, [r7, #16]
 80090c6:	1ad3      	subs	r3, r2, r3
 80090c8:	2b02      	cmp	r3, #2
 80090ca:	d901      	bls.n	80090d0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80090cc:	2303      	movs	r3, #3
 80090ce:	e06d      	b.n	80091ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80090d0:	4b29      	ldr	r3, [pc, #164]	; (8009178 <HAL_RCC_OscConfig+0x4c4>)
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d1f0      	bne.n	80090be <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	6a1b      	ldr	r3, [r3, #32]
 80090e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80090e4:	d108      	bne.n	80090f8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80090e6:	4b24      	ldr	r3, [pc, #144]	; (8009178 <HAL_RCC_OscConfig+0x4c4>)
 80090e8:	685b      	ldr	r3, [r3, #4]
 80090ea:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	689b      	ldr	r3, [r3, #8]
 80090f2:	4921      	ldr	r1, [pc, #132]	; (8009178 <HAL_RCC_OscConfig+0x4c4>)
 80090f4:	4313      	orrs	r3, r2
 80090f6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80090f8:	4b1f      	ldr	r3, [pc, #124]	; (8009178 <HAL_RCC_OscConfig+0x4c4>)
 80090fa:	685b      	ldr	r3, [r3, #4]
 80090fc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	6a19      	ldr	r1, [r3, #32]
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009108:	430b      	orrs	r3, r1
 800910a:	491b      	ldr	r1, [pc, #108]	; (8009178 <HAL_RCC_OscConfig+0x4c4>)
 800910c:	4313      	orrs	r3, r2
 800910e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009110:	4b1b      	ldr	r3, [pc, #108]	; (8009180 <HAL_RCC_OscConfig+0x4cc>)
 8009112:	2201      	movs	r2, #1
 8009114:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009116:	f7fd fbef 	bl	80068f8 <HAL_GetTick>
 800911a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800911c:	e008      	b.n	8009130 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800911e:	f7fd fbeb 	bl	80068f8 <HAL_GetTick>
 8009122:	4602      	mov	r2, r0
 8009124:	693b      	ldr	r3, [r7, #16]
 8009126:	1ad3      	subs	r3, r2, r3
 8009128:	2b02      	cmp	r3, #2
 800912a:	d901      	bls.n	8009130 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800912c:	2303      	movs	r3, #3
 800912e:	e03d      	b.n	80091ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8009130:	4b11      	ldr	r3, [pc, #68]	; (8009178 <HAL_RCC_OscConfig+0x4c4>)
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009138:	2b00      	cmp	r3, #0
 800913a:	d0f0      	beq.n	800911e <HAL_RCC_OscConfig+0x46a>
 800913c:	e035      	b.n	80091aa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800913e:	4b10      	ldr	r3, [pc, #64]	; (8009180 <HAL_RCC_OscConfig+0x4cc>)
 8009140:	2200      	movs	r2, #0
 8009142:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009144:	f7fd fbd8 	bl	80068f8 <HAL_GetTick>
 8009148:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800914a:	e008      	b.n	800915e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800914c:	f7fd fbd4 	bl	80068f8 <HAL_GetTick>
 8009150:	4602      	mov	r2, r0
 8009152:	693b      	ldr	r3, [r7, #16]
 8009154:	1ad3      	subs	r3, r2, r3
 8009156:	2b02      	cmp	r3, #2
 8009158:	d901      	bls.n	800915e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800915a:	2303      	movs	r3, #3
 800915c:	e026      	b.n	80091ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800915e:	4b06      	ldr	r3, [pc, #24]	; (8009178 <HAL_RCC_OscConfig+0x4c4>)
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009166:	2b00      	cmp	r3, #0
 8009168:	d1f0      	bne.n	800914c <HAL_RCC_OscConfig+0x498>
 800916a:	e01e      	b.n	80091aa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	69db      	ldr	r3, [r3, #28]
 8009170:	2b01      	cmp	r3, #1
 8009172:	d107      	bne.n	8009184 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8009174:	2301      	movs	r3, #1
 8009176:	e019      	b.n	80091ac <HAL_RCC_OscConfig+0x4f8>
 8009178:	40021000 	.word	0x40021000
 800917c:	40007000 	.word	0x40007000
 8009180:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8009184:	4b0b      	ldr	r3, [pc, #44]	; (80091b4 <HAL_RCC_OscConfig+0x500>)
 8009186:	685b      	ldr	r3, [r3, #4]
 8009188:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	6a1b      	ldr	r3, [r3, #32]
 8009194:	429a      	cmp	r2, r3
 8009196:	d106      	bne.n	80091a6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80091a2:	429a      	cmp	r2, r3
 80091a4:	d001      	beq.n	80091aa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80091a6:	2301      	movs	r3, #1
 80091a8:	e000      	b.n	80091ac <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80091aa:	2300      	movs	r3, #0
}
 80091ac:	4618      	mov	r0, r3
 80091ae:	3718      	adds	r7, #24
 80091b0:	46bd      	mov	sp, r7
 80091b2:	bd80      	pop	{r7, pc}
 80091b4:	40021000 	.word	0x40021000

080091b8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b084      	sub	sp, #16
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
 80091c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d101      	bne.n	80091cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80091c8:	2301      	movs	r3, #1
 80091ca:	e0d0      	b.n	800936e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80091cc:	4b6a      	ldr	r3, [pc, #424]	; (8009378 <HAL_RCC_ClockConfig+0x1c0>)
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	f003 0307 	and.w	r3, r3, #7
 80091d4:	683a      	ldr	r2, [r7, #0]
 80091d6:	429a      	cmp	r2, r3
 80091d8:	d910      	bls.n	80091fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80091da:	4b67      	ldr	r3, [pc, #412]	; (8009378 <HAL_RCC_ClockConfig+0x1c0>)
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	f023 0207 	bic.w	r2, r3, #7
 80091e2:	4965      	ldr	r1, [pc, #404]	; (8009378 <HAL_RCC_ClockConfig+0x1c0>)
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	4313      	orrs	r3, r2
 80091e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80091ea:	4b63      	ldr	r3, [pc, #396]	; (8009378 <HAL_RCC_ClockConfig+0x1c0>)
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	f003 0307 	and.w	r3, r3, #7
 80091f2:	683a      	ldr	r2, [r7, #0]
 80091f4:	429a      	cmp	r2, r3
 80091f6:	d001      	beq.n	80091fc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80091f8:	2301      	movs	r3, #1
 80091fa:	e0b8      	b.n	800936e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	f003 0302 	and.w	r3, r3, #2
 8009204:	2b00      	cmp	r3, #0
 8009206:	d020      	beq.n	800924a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	f003 0304 	and.w	r3, r3, #4
 8009210:	2b00      	cmp	r3, #0
 8009212:	d005      	beq.n	8009220 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009214:	4b59      	ldr	r3, [pc, #356]	; (800937c <HAL_RCC_ClockConfig+0x1c4>)
 8009216:	685b      	ldr	r3, [r3, #4]
 8009218:	4a58      	ldr	r2, [pc, #352]	; (800937c <HAL_RCC_ClockConfig+0x1c4>)
 800921a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800921e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	f003 0308 	and.w	r3, r3, #8
 8009228:	2b00      	cmp	r3, #0
 800922a:	d005      	beq.n	8009238 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800922c:	4b53      	ldr	r3, [pc, #332]	; (800937c <HAL_RCC_ClockConfig+0x1c4>)
 800922e:	685b      	ldr	r3, [r3, #4]
 8009230:	4a52      	ldr	r2, [pc, #328]	; (800937c <HAL_RCC_ClockConfig+0x1c4>)
 8009232:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8009236:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009238:	4b50      	ldr	r3, [pc, #320]	; (800937c <HAL_RCC_ClockConfig+0x1c4>)
 800923a:	685b      	ldr	r3, [r3, #4]
 800923c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	689b      	ldr	r3, [r3, #8]
 8009244:	494d      	ldr	r1, [pc, #308]	; (800937c <HAL_RCC_ClockConfig+0x1c4>)
 8009246:	4313      	orrs	r3, r2
 8009248:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	f003 0301 	and.w	r3, r3, #1
 8009252:	2b00      	cmp	r3, #0
 8009254:	d040      	beq.n	80092d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	685b      	ldr	r3, [r3, #4]
 800925a:	2b01      	cmp	r3, #1
 800925c:	d107      	bne.n	800926e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800925e:	4b47      	ldr	r3, [pc, #284]	; (800937c <HAL_RCC_ClockConfig+0x1c4>)
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009266:	2b00      	cmp	r3, #0
 8009268:	d115      	bne.n	8009296 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800926a:	2301      	movs	r3, #1
 800926c:	e07f      	b.n	800936e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	685b      	ldr	r3, [r3, #4]
 8009272:	2b02      	cmp	r3, #2
 8009274:	d107      	bne.n	8009286 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009276:	4b41      	ldr	r3, [pc, #260]	; (800937c <HAL_RCC_ClockConfig+0x1c4>)
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800927e:	2b00      	cmp	r3, #0
 8009280:	d109      	bne.n	8009296 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009282:	2301      	movs	r3, #1
 8009284:	e073      	b.n	800936e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009286:	4b3d      	ldr	r3, [pc, #244]	; (800937c <HAL_RCC_ClockConfig+0x1c4>)
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	f003 0302 	and.w	r3, r3, #2
 800928e:	2b00      	cmp	r3, #0
 8009290:	d101      	bne.n	8009296 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009292:	2301      	movs	r3, #1
 8009294:	e06b      	b.n	800936e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009296:	4b39      	ldr	r3, [pc, #228]	; (800937c <HAL_RCC_ClockConfig+0x1c4>)
 8009298:	685b      	ldr	r3, [r3, #4]
 800929a:	f023 0203 	bic.w	r2, r3, #3
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	685b      	ldr	r3, [r3, #4]
 80092a2:	4936      	ldr	r1, [pc, #216]	; (800937c <HAL_RCC_ClockConfig+0x1c4>)
 80092a4:	4313      	orrs	r3, r2
 80092a6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80092a8:	f7fd fb26 	bl	80068f8 <HAL_GetTick>
 80092ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80092ae:	e00a      	b.n	80092c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80092b0:	f7fd fb22 	bl	80068f8 <HAL_GetTick>
 80092b4:	4602      	mov	r2, r0
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	1ad3      	subs	r3, r2, r3
 80092ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80092be:	4293      	cmp	r3, r2
 80092c0:	d901      	bls.n	80092c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80092c2:	2303      	movs	r3, #3
 80092c4:	e053      	b.n	800936e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80092c6:	4b2d      	ldr	r3, [pc, #180]	; (800937c <HAL_RCC_ClockConfig+0x1c4>)
 80092c8:	685b      	ldr	r3, [r3, #4]
 80092ca:	f003 020c 	and.w	r2, r3, #12
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	685b      	ldr	r3, [r3, #4]
 80092d2:	009b      	lsls	r3, r3, #2
 80092d4:	429a      	cmp	r2, r3
 80092d6:	d1eb      	bne.n	80092b0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80092d8:	4b27      	ldr	r3, [pc, #156]	; (8009378 <HAL_RCC_ClockConfig+0x1c0>)
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	f003 0307 	and.w	r3, r3, #7
 80092e0:	683a      	ldr	r2, [r7, #0]
 80092e2:	429a      	cmp	r2, r3
 80092e4:	d210      	bcs.n	8009308 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80092e6:	4b24      	ldr	r3, [pc, #144]	; (8009378 <HAL_RCC_ClockConfig+0x1c0>)
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	f023 0207 	bic.w	r2, r3, #7
 80092ee:	4922      	ldr	r1, [pc, #136]	; (8009378 <HAL_RCC_ClockConfig+0x1c0>)
 80092f0:	683b      	ldr	r3, [r7, #0]
 80092f2:	4313      	orrs	r3, r2
 80092f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80092f6:	4b20      	ldr	r3, [pc, #128]	; (8009378 <HAL_RCC_ClockConfig+0x1c0>)
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	f003 0307 	and.w	r3, r3, #7
 80092fe:	683a      	ldr	r2, [r7, #0]
 8009300:	429a      	cmp	r2, r3
 8009302:	d001      	beq.n	8009308 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8009304:	2301      	movs	r3, #1
 8009306:	e032      	b.n	800936e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	f003 0304 	and.w	r3, r3, #4
 8009310:	2b00      	cmp	r3, #0
 8009312:	d008      	beq.n	8009326 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009314:	4b19      	ldr	r3, [pc, #100]	; (800937c <HAL_RCC_ClockConfig+0x1c4>)
 8009316:	685b      	ldr	r3, [r3, #4]
 8009318:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	68db      	ldr	r3, [r3, #12]
 8009320:	4916      	ldr	r1, [pc, #88]	; (800937c <HAL_RCC_ClockConfig+0x1c4>)
 8009322:	4313      	orrs	r3, r2
 8009324:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	f003 0308 	and.w	r3, r3, #8
 800932e:	2b00      	cmp	r3, #0
 8009330:	d009      	beq.n	8009346 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8009332:	4b12      	ldr	r3, [pc, #72]	; (800937c <HAL_RCC_ClockConfig+0x1c4>)
 8009334:	685b      	ldr	r3, [r3, #4]
 8009336:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	691b      	ldr	r3, [r3, #16]
 800933e:	00db      	lsls	r3, r3, #3
 8009340:	490e      	ldr	r1, [pc, #56]	; (800937c <HAL_RCC_ClockConfig+0x1c4>)
 8009342:	4313      	orrs	r3, r2
 8009344:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8009346:	f000 f821 	bl	800938c <HAL_RCC_GetSysClockFreq>
 800934a:	4602      	mov	r2, r0
 800934c:	4b0b      	ldr	r3, [pc, #44]	; (800937c <HAL_RCC_ClockConfig+0x1c4>)
 800934e:	685b      	ldr	r3, [r3, #4]
 8009350:	091b      	lsrs	r3, r3, #4
 8009352:	f003 030f 	and.w	r3, r3, #15
 8009356:	490a      	ldr	r1, [pc, #40]	; (8009380 <HAL_RCC_ClockConfig+0x1c8>)
 8009358:	5ccb      	ldrb	r3, [r1, r3]
 800935a:	fa22 f303 	lsr.w	r3, r2, r3
 800935e:	4a09      	ldr	r2, [pc, #36]	; (8009384 <HAL_RCC_ClockConfig+0x1cc>)
 8009360:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8009362:	4b09      	ldr	r3, [pc, #36]	; (8009388 <HAL_RCC_ClockConfig+0x1d0>)
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	4618      	mov	r0, r3
 8009368:	f7fd fa84 	bl	8006874 <HAL_InitTick>

  return HAL_OK;
 800936c:	2300      	movs	r3, #0
}
 800936e:	4618      	mov	r0, r3
 8009370:	3710      	adds	r7, #16
 8009372:	46bd      	mov	sp, r7
 8009374:	bd80      	pop	{r7, pc}
 8009376:	bf00      	nop
 8009378:	40022000 	.word	0x40022000
 800937c:	40021000 	.word	0x40021000
 8009380:	0800e388 	.word	0x0800e388
 8009384:	20000498 	.word	0x20000498
 8009388:	200004e0 	.word	0x200004e0

0800938c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800938c:	b480      	push	{r7}
 800938e:	b087      	sub	sp, #28
 8009390:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8009392:	2300      	movs	r3, #0
 8009394:	60fb      	str	r3, [r7, #12]
 8009396:	2300      	movs	r3, #0
 8009398:	60bb      	str	r3, [r7, #8]
 800939a:	2300      	movs	r3, #0
 800939c:	617b      	str	r3, [r7, #20]
 800939e:	2300      	movs	r3, #0
 80093a0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80093a2:	2300      	movs	r3, #0
 80093a4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80093a6:	4b1e      	ldr	r3, [pc, #120]	; (8009420 <HAL_RCC_GetSysClockFreq+0x94>)
 80093a8:	685b      	ldr	r3, [r3, #4]
 80093aa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	f003 030c 	and.w	r3, r3, #12
 80093b2:	2b04      	cmp	r3, #4
 80093b4:	d002      	beq.n	80093bc <HAL_RCC_GetSysClockFreq+0x30>
 80093b6:	2b08      	cmp	r3, #8
 80093b8:	d003      	beq.n	80093c2 <HAL_RCC_GetSysClockFreq+0x36>
 80093ba:	e027      	b.n	800940c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80093bc:	4b19      	ldr	r3, [pc, #100]	; (8009424 <HAL_RCC_GetSysClockFreq+0x98>)
 80093be:	613b      	str	r3, [r7, #16]
      break;
 80093c0:	e027      	b.n	8009412 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	0c9b      	lsrs	r3, r3, #18
 80093c6:	f003 030f 	and.w	r3, r3, #15
 80093ca:	4a17      	ldr	r2, [pc, #92]	; (8009428 <HAL_RCC_GetSysClockFreq+0x9c>)
 80093cc:	5cd3      	ldrb	r3, [r2, r3]
 80093ce:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d010      	beq.n	80093fc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80093da:	4b11      	ldr	r3, [pc, #68]	; (8009420 <HAL_RCC_GetSysClockFreq+0x94>)
 80093dc:	685b      	ldr	r3, [r3, #4]
 80093de:	0c5b      	lsrs	r3, r3, #17
 80093e0:	f003 0301 	and.w	r3, r3, #1
 80093e4:	4a11      	ldr	r2, [pc, #68]	; (800942c <HAL_RCC_GetSysClockFreq+0xa0>)
 80093e6:	5cd3      	ldrb	r3, [r2, r3]
 80093e8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	4a0d      	ldr	r2, [pc, #52]	; (8009424 <HAL_RCC_GetSysClockFreq+0x98>)
 80093ee:	fb03 f202 	mul.w	r2, r3, r2
 80093f2:	68bb      	ldr	r3, [r7, #8]
 80093f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80093f8:	617b      	str	r3, [r7, #20]
 80093fa:	e004      	b.n	8009406 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	4a0c      	ldr	r2, [pc, #48]	; (8009430 <HAL_RCC_GetSysClockFreq+0xa4>)
 8009400:	fb02 f303 	mul.w	r3, r2, r3
 8009404:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8009406:	697b      	ldr	r3, [r7, #20]
 8009408:	613b      	str	r3, [r7, #16]
      break;
 800940a:	e002      	b.n	8009412 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800940c:	4b05      	ldr	r3, [pc, #20]	; (8009424 <HAL_RCC_GetSysClockFreq+0x98>)
 800940e:	613b      	str	r3, [r7, #16]
      break;
 8009410:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009412:	693b      	ldr	r3, [r7, #16]
}
 8009414:	4618      	mov	r0, r3
 8009416:	371c      	adds	r7, #28
 8009418:	46bd      	mov	sp, r7
 800941a:	bc80      	pop	{r7}
 800941c:	4770      	bx	lr
 800941e:	bf00      	nop
 8009420:	40021000 	.word	0x40021000
 8009424:	007a1200 	.word	0x007a1200
 8009428:	0800e3a0 	.word	0x0800e3a0
 800942c:	0800e3b0 	.word	0x0800e3b0
 8009430:	003d0900 	.word	0x003d0900

08009434 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009434:	b480      	push	{r7}
 8009436:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009438:	4b02      	ldr	r3, [pc, #8]	; (8009444 <HAL_RCC_GetHCLKFreq+0x10>)
 800943a:	681b      	ldr	r3, [r3, #0]
}
 800943c:	4618      	mov	r0, r3
 800943e:	46bd      	mov	sp, r7
 8009440:	bc80      	pop	{r7}
 8009442:	4770      	bx	lr
 8009444:	20000498 	.word	0x20000498

08009448 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009448:	b580      	push	{r7, lr}
 800944a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800944c:	f7ff fff2 	bl	8009434 <HAL_RCC_GetHCLKFreq>
 8009450:	4602      	mov	r2, r0
 8009452:	4b05      	ldr	r3, [pc, #20]	; (8009468 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009454:	685b      	ldr	r3, [r3, #4]
 8009456:	0a1b      	lsrs	r3, r3, #8
 8009458:	f003 0307 	and.w	r3, r3, #7
 800945c:	4903      	ldr	r1, [pc, #12]	; (800946c <HAL_RCC_GetPCLK1Freq+0x24>)
 800945e:	5ccb      	ldrb	r3, [r1, r3]
 8009460:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009464:	4618      	mov	r0, r3
 8009466:	bd80      	pop	{r7, pc}
 8009468:	40021000 	.word	0x40021000
 800946c:	0800e398 	.word	0x0800e398

08009470 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009470:	b580      	push	{r7, lr}
 8009472:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8009474:	f7ff ffde 	bl	8009434 <HAL_RCC_GetHCLKFreq>
 8009478:	4602      	mov	r2, r0
 800947a:	4b05      	ldr	r3, [pc, #20]	; (8009490 <HAL_RCC_GetPCLK2Freq+0x20>)
 800947c:	685b      	ldr	r3, [r3, #4]
 800947e:	0adb      	lsrs	r3, r3, #11
 8009480:	f003 0307 	and.w	r3, r3, #7
 8009484:	4903      	ldr	r1, [pc, #12]	; (8009494 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009486:	5ccb      	ldrb	r3, [r1, r3]
 8009488:	fa22 f303 	lsr.w	r3, r2, r3
}
 800948c:	4618      	mov	r0, r3
 800948e:	bd80      	pop	{r7, pc}
 8009490:	40021000 	.word	0x40021000
 8009494:	0800e398 	.word	0x0800e398

08009498 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8009498:	b480      	push	{r7}
 800949a:	b085      	sub	sp, #20
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80094a0:	4b0a      	ldr	r3, [pc, #40]	; (80094cc <RCC_Delay+0x34>)
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	4a0a      	ldr	r2, [pc, #40]	; (80094d0 <RCC_Delay+0x38>)
 80094a6:	fba2 2303 	umull	r2, r3, r2, r3
 80094aa:	0a5b      	lsrs	r3, r3, #9
 80094ac:	687a      	ldr	r2, [r7, #4]
 80094ae:	fb02 f303 	mul.w	r3, r2, r3
 80094b2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80094b4:	bf00      	nop
  }
  while (Delay --);
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	1e5a      	subs	r2, r3, #1
 80094ba:	60fa      	str	r2, [r7, #12]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d1f9      	bne.n	80094b4 <RCC_Delay+0x1c>
}
 80094c0:	bf00      	nop
 80094c2:	bf00      	nop
 80094c4:	3714      	adds	r7, #20
 80094c6:	46bd      	mov	sp, r7
 80094c8:	bc80      	pop	{r7}
 80094ca:	4770      	bx	lr
 80094cc:	20000498 	.word	0x20000498
 80094d0:	10624dd3 	.word	0x10624dd3

080094d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b086      	sub	sp, #24
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80094dc:	2300      	movs	r3, #0
 80094de:	613b      	str	r3, [r7, #16]
 80094e0:	2300      	movs	r3, #0
 80094e2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	f003 0301 	and.w	r3, r3, #1
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d07d      	beq.n	80095ec <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80094f0:	2300      	movs	r3, #0
 80094f2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80094f4:	4b4f      	ldr	r3, [pc, #316]	; (8009634 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80094f6:	69db      	ldr	r3, [r3, #28]
 80094f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d10d      	bne.n	800951c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009500:	4b4c      	ldr	r3, [pc, #304]	; (8009634 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009502:	69db      	ldr	r3, [r3, #28]
 8009504:	4a4b      	ldr	r2, [pc, #300]	; (8009634 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009506:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800950a:	61d3      	str	r3, [r2, #28]
 800950c:	4b49      	ldr	r3, [pc, #292]	; (8009634 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800950e:	69db      	ldr	r3, [r3, #28]
 8009510:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009514:	60bb      	str	r3, [r7, #8]
 8009516:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009518:	2301      	movs	r3, #1
 800951a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800951c:	4b46      	ldr	r3, [pc, #280]	; (8009638 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009524:	2b00      	cmp	r3, #0
 8009526:	d118      	bne.n	800955a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009528:	4b43      	ldr	r3, [pc, #268]	; (8009638 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	4a42      	ldr	r2, [pc, #264]	; (8009638 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800952e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009532:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009534:	f7fd f9e0 	bl	80068f8 <HAL_GetTick>
 8009538:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800953a:	e008      	b.n	800954e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800953c:	f7fd f9dc 	bl	80068f8 <HAL_GetTick>
 8009540:	4602      	mov	r2, r0
 8009542:	693b      	ldr	r3, [r7, #16]
 8009544:	1ad3      	subs	r3, r2, r3
 8009546:	2b64      	cmp	r3, #100	; 0x64
 8009548:	d901      	bls.n	800954e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800954a:	2303      	movs	r3, #3
 800954c:	e06d      	b.n	800962a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800954e:	4b3a      	ldr	r3, [pc, #232]	; (8009638 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009556:	2b00      	cmp	r3, #0
 8009558:	d0f0      	beq.n	800953c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800955a:	4b36      	ldr	r3, [pc, #216]	; (8009634 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800955c:	6a1b      	ldr	r3, [r3, #32]
 800955e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009562:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d02e      	beq.n	80095c8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	685b      	ldr	r3, [r3, #4]
 800956e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009572:	68fa      	ldr	r2, [r7, #12]
 8009574:	429a      	cmp	r2, r3
 8009576:	d027      	beq.n	80095c8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009578:	4b2e      	ldr	r3, [pc, #184]	; (8009634 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800957a:	6a1b      	ldr	r3, [r3, #32]
 800957c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009580:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8009582:	4b2e      	ldr	r3, [pc, #184]	; (800963c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8009584:	2201      	movs	r2, #1
 8009586:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8009588:	4b2c      	ldr	r3, [pc, #176]	; (800963c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800958a:	2200      	movs	r2, #0
 800958c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800958e:	4a29      	ldr	r2, [pc, #164]	; (8009634 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	f003 0301 	and.w	r3, r3, #1
 800959a:	2b00      	cmp	r3, #0
 800959c:	d014      	beq.n	80095c8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800959e:	f7fd f9ab 	bl	80068f8 <HAL_GetTick>
 80095a2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80095a4:	e00a      	b.n	80095bc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80095a6:	f7fd f9a7 	bl	80068f8 <HAL_GetTick>
 80095aa:	4602      	mov	r2, r0
 80095ac:	693b      	ldr	r3, [r7, #16]
 80095ae:	1ad3      	subs	r3, r2, r3
 80095b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80095b4:	4293      	cmp	r3, r2
 80095b6:	d901      	bls.n	80095bc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80095b8:	2303      	movs	r3, #3
 80095ba:	e036      	b.n	800962a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80095bc:	4b1d      	ldr	r3, [pc, #116]	; (8009634 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80095be:	6a1b      	ldr	r3, [r3, #32]
 80095c0:	f003 0302 	and.w	r3, r3, #2
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d0ee      	beq.n	80095a6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80095c8:	4b1a      	ldr	r3, [pc, #104]	; (8009634 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80095ca:	6a1b      	ldr	r3, [r3, #32]
 80095cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	685b      	ldr	r3, [r3, #4]
 80095d4:	4917      	ldr	r1, [pc, #92]	; (8009634 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80095d6:	4313      	orrs	r3, r2
 80095d8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80095da:	7dfb      	ldrb	r3, [r7, #23]
 80095dc:	2b01      	cmp	r3, #1
 80095de:	d105      	bne.n	80095ec <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80095e0:	4b14      	ldr	r3, [pc, #80]	; (8009634 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80095e2:	69db      	ldr	r3, [r3, #28]
 80095e4:	4a13      	ldr	r2, [pc, #76]	; (8009634 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80095e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80095ea:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	f003 0302 	and.w	r3, r3, #2
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d008      	beq.n	800960a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80095f8:	4b0e      	ldr	r3, [pc, #56]	; (8009634 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80095fa:	685b      	ldr	r3, [r3, #4]
 80095fc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	689b      	ldr	r3, [r3, #8]
 8009604:	490b      	ldr	r1, [pc, #44]	; (8009634 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009606:	4313      	orrs	r3, r2
 8009608:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	f003 0310 	and.w	r3, r3, #16
 8009612:	2b00      	cmp	r3, #0
 8009614:	d008      	beq.n	8009628 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009616:	4b07      	ldr	r3, [pc, #28]	; (8009634 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009618:	685b      	ldr	r3, [r3, #4]
 800961a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	68db      	ldr	r3, [r3, #12]
 8009622:	4904      	ldr	r1, [pc, #16]	; (8009634 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009624:	4313      	orrs	r3, r2
 8009626:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8009628:	2300      	movs	r3, #0
}
 800962a:	4618      	mov	r0, r3
 800962c:	3718      	adds	r7, #24
 800962e:	46bd      	mov	sp, r7
 8009630:	bd80      	pop	{r7, pc}
 8009632:	bf00      	nop
 8009634:	40021000 	.word	0x40021000
 8009638:	40007000 	.word	0x40007000
 800963c:	42420440 	.word	0x42420440

08009640 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009640:	b580      	push	{r7, lr}
 8009642:	b082      	sub	sp, #8
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	2b00      	cmp	r3, #0
 800964c:	d101      	bne.n	8009652 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800964e:	2301      	movs	r3, #1
 8009650:	e041      	b.n	80096d6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009658:	b2db      	uxtb	r3, r3
 800965a:	2b00      	cmp	r3, #0
 800965c:	d106      	bne.n	800966c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	2200      	movs	r2, #0
 8009662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009666:	6878      	ldr	r0, [r7, #4]
 8009668:	f7fc f81c 	bl	80056a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	2202      	movs	r2, #2
 8009670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681a      	ldr	r2, [r3, #0]
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	3304      	adds	r3, #4
 800967c:	4619      	mov	r1, r3
 800967e:	4610      	mov	r0, r2
 8009680:	f000 f8f4 	bl	800986c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	2201      	movs	r2, #1
 8009688:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	2201      	movs	r2, #1
 8009690:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	2201      	movs	r2, #1
 8009698:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	2201      	movs	r2, #1
 80096a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	2201      	movs	r2, #1
 80096a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	2201      	movs	r2, #1
 80096b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	2201      	movs	r2, #1
 80096b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	2201      	movs	r2, #1
 80096c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	2201      	movs	r2, #1
 80096c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2201      	movs	r2, #1
 80096d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80096d4:	2300      	movs	r3, #0
}
 80096d6:	4618      	mov	r0, r3
 80096d8:	3708      	adds	r7, #8
 80096da:	46bd      	mov	sp, r7
 80096dc:	bd80      	pop	{r7, pc}

080096de <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80096de:	b580      	push	{r7, lr}
 80096e0:	b084      	sub	sp, #16
 80096e2:	af00      	add	r7, sp, #0
 80096e4:	6078      	str	r0, [r7, #4]
 80096e6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80096e8:	2300      	movs	r3, #0
 80096ea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80096f2:	2b01      	cmp	r3, #1
 80096f4:	d101      	bne.n	80096fa <HAL_TIM_ConfigClockSource+0x1c>
 80096f6:	2302      	movs	r3, #2
 80096f8:	e0b4      	b.n	8009864 <HAL_TIM_ConfigClockSource+0x186>
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	2201      	movs	r2, #1
 80096fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	2202      	movs	r2, #2
 8009706:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	689b      	ldr	r3, [r3, #8]
 8009710:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009712:	68bb      	ldr	r3, [r7, #8]
 8009714:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009718:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800971a:	68bb      	ldr	r3, [r7, #8]
 800971c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009720:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	68ba      	ldr	r2, [r7, #8]
 8009728:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800972a:	683b      	ldr	r3, [r7, #0]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009732:	d03e      	beq.n	80097b2 <HAL_TIM_ConfigClockSource+0xd4>
 8009734:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009738:	f200 8087 	bhi.w	800984a <HAL_TIM_ConfigClockSource+0x16c>
 800973c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009740:	f000 8086 	beq.w	8009850 <HAL_TIM_ConfigClockSource+0x172>
 8009744:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009748:	d87f      	bhi.n	800984a <HAL_TIM_ConfigClockSource+0x16c>
 800974a:	2b70      	cmp	r3, #112	; 0x70
 800974c:	d01a      	beq.n	8009784 <HAL_TIM_ConfigClockSource+0xa6>
 800974e:	2b70      	cmp	r3, #112	; 0x70
 8009750:	d87b      	bhi.n	800984a <HAL_TIM_ConfigClockSource+0x16c>
 8009752:	2b60      	cmp	r3, #96	; 0x60
 8009754:	d050      	beq.n	80097f8 <HAL_TIM_ConfigClockSource+0x11a>
 8009756:	2b60      	cmp	r3, #96	; 0x60
 8009758:	d877      	bhi.n	800984a <HAL_TIM_ConfigClockSource+0x16c>
 800975a:	2b50      	cmp	r3, #80	; 0x50
 800975c:	d03c      	beq.n	80097d8 <HAL_TIM_ConfigClockSource+0xfa>
 800975e:	2b50      	cmp	r3, #80	; 0x50
 8009760:	d873      	bhi.n	800984a <HAL_TIM_ConfigClockSource+0x16c>
 8009762:	2b40      	cmp	r3, #64	; 0x40
 8009764:	d058      	beq.n	8009818 <HAL_TIM_ConfigClockSource+0x13a>
 8009766:	2b40      	cmp	r3, #64	; 0x40
 8009768:	d86f      	bhi.n	800984a <HAL_TIM_ConfigClockSource+0x16c>
 800976a:	2b30      	cmp	r3, #48	; 0x30
 800976c:	d064      	beq.n	8009838 <HAL_TIM_ConfigClockSource+0x15a>
 800976e:	2b30      	cmp	r3, #48	; 0x30
 8009770:	d86b      	bhi.n	800984a <HAL_TIM_ConfigClockSource+0x16c>
 8009772:	2b20      	cmp	r3, #32
 8009774:	d060      	beq.n	8009838 <HAL_TIM_ConfigClockSource+0x15a>
 8009776:	2b20      	cmp	r3, #32
 8009778:	d867      	bhi.n	800984a <HAL_TIM_ConfigClockSource+0x16c>
 800977a:	2b00      	cmp	r3, #0
 800977c:	d05c      	beq.n	8009838 <HAL_TIM_ConfigClockSource+0x15a>
 800977e:	2b10      	cmp	r3, #16
 8009780:	d05a      	beq.n	8009838 <HAL_TIM_ConfigClockSource+0x15a>
 8009782:	e062      	b.n	800984a <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	6818      	ldr	r0, [r3, #0]
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	6899      	ldr	r1, [r3, #8]
 800978c:	683b      	ldr	r3, [r7, #0]
 800978e:	685a      	ldr	r2, [r3, #4]
 8009790:	683b      	ldr	r3, [r7, #0]
 8009792:	68db      	ldr	r3, [r3, #12]
 8009794:	f000 f943 	bl	8009a1e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	689b      	ldr	r3, [r3, #8]
 800979e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80097a0:	68bb      	ldr	r3, [r7, #8]
 80097a2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80097a6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	68ba      	ldr	r2, [r7, #8]
 80097ae:	609a      	str	r2, [r3, #8]
      break;
 80097b0:	e04f      	b.n	8009852 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	6818      	ldr	r0, [r3, #0]
 80097b6:	683b      	ldr	r3, [r7, #0]
 80097b8:	6899      	ldr	r1, [r3, #8]
 80097ba:	683b      	ldr	r3, [r7, #0]
 80097bc:	685a      	ldr	r2, [r3, #4]
 80097be:	683b      	ldr	r3, [r7, #0]
 80097c0:	68db      	ldr	r3, [r3, #12]
 80097c2:	f000 f92c 	bl	8009a1e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	689a      	ldr	r2, [r3, #8]
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80097d4:	609a      	str	r2, [r3, #8]
      break;
 80097d6:	e03c      	b.n	8009852 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	6818      	ldr	r0, [r3, #0]
 80097dc:	683b      	ldr	r3, [r7, #0]
 80097de:	6859      	ldr	r1, [r3, #4]
 80097e0:	683b      	ldr	r3, [r7, #0]
 80097e2:	68db      	ldr	r3, [r3, #12]
 80097e4:	461a      	mov	r2, r3
 80097e6:	f000 f8a3 	bl	8009930 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	2150      	movs	r1, #80	; 0x50
 80097f0:	4618      	mov	r0, r3
 80097f2:	f000 f8fa 	bl	80099ea <TIM_ITRx_SetConfig>
      break;
 80097f6:	e02c      	b.n	8009852 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	6818      	ldr	r0, [r3, #0]
 80097fc:	683b      	ldr	r3, [r7, #0]
 80097fe:	6859      	ldr	r1, [r3, #4]
 8009800:	683b      	ldr	r3, [r7, #0]
 8009802:	68db      	ldr	r3, [r3, #12]
 8009804:	461a      	mov	r2, r3
 8009806:	f000 f8c1 	bl	800998c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	2160      	movs	r1, #96	; 0x60
 8009810:	4618      	mov	r0, r3
 8009812:	f000 f8ea 	bl	80099ea <TIM_ITRx_SetConfig>
      break;
 8009816:	e01c      	b.n	8009852 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	6818      	ldr	r0, [r3, #0]
 800981c:	683b      	ldr	r3, [r7, #0]
 800981e:	6859      	ldr	r1, [r3, #4]
 8009820:	683b      	ldr	r3, [r7, #0]
 8009822:	68db      	ldr	r3, [r3, #12]
 8009824:	461a      	mov	r2, r3
 8009826:	f000 f883 	bl	8009930 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	2140      	movs	r1, #64	; 0x40
 8009830:	4618      	mov	r0, r3
 8009832:	f000 f8da 	bl	80099ea <TIM_ITRx_SetConfig>
      break;
 8009836:	e00c      	b.n	8009852 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681a      	ldr	r2, [r3, #0]
 800983c:	683b      	ldr	r3, [r7, #0]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	4619      	mov	r1, r3
 8009842:	4610      	mov	r0, r2
 8009844:	f000 f8d1 	bl	80099ea <TIM_ITRx_SetConfig>
      break;
 8009848:	e003      	b.n	8009852 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800984a:	2301      	movs	r3, #1
 800984c:	73fb      	strb	r3, [r7, #15]
      break;
 800984e:	e000      	b.n	8009852 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009850:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	2201      	movs	r2, #1
 8009856:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	2200      	movs	r2, #0
 800985e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009862:	7bfb      	ldrb	r3, [r7, #15]
}
 8009864:	4618      	mov	r0, r3
 8009866:	3710      	adds	r7, #16
 8009868:	46bd      	mov	sp, r7
 800986a:	bd80      	pop	{r7, pc}

0800986c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800986c:	b480      	push	{r7}
 800986e:	b085      	sub	sp, #20
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
 8009874:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	4a29      	ldr	r2, [pc, #164]	; (8009924 <TIM_Base_SetConfig+0xb8>)
 8009880:	4293      	cmp	r3, r2
 8009882:	d00b      	beq.n	800989c <TIM_Base_SetConfig+0x30>
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800988a:	d007      	beq.n	800989c <TIM_Base_SetConfig+0x30>
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	4a26      	ldr	r2, [pc, #152]	; (8009928 <TIM_Base_SetConfig+0xbc>)
 8009890:	4293      	cmp	r3, r2
 8009892:	d003      	beq.n	800989c <TIM_Base_SetConfig+0x30>
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	4a25      	ldr	r2, [pc, #148]	; (800992c <TIM_Base_SetConfig+0xc0>)
 8009898:	4293      	cmp	r3, r2
 800989a:	d108      	bne.n	80098ae <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80098a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80098a4:	683b      	ldr	r3, [r7, #0]
 80098a6:	685b      	ldr	r3, [r3, #4]
 80098a8:	68fa      	ldr	r2, [r7, #12]
 80098aa:	4313      	orrs	r3, r2
 80098ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	4a1c      	ldr	r2, [pc, #112]	; (8009924 <TIM_Base_SetConfig+0xb8>)
 80098b2:	4293      	cmp	r3, r2
 80098b4:	d00b      	beq.n	80098ce <TIM_Base_SetConfig+0x62>
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80098bc:	d007      	beq.n	80098ce <TIM_Base_SetConfig+0x62>
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	4a19      	ldr	r2, [pc, #100]	; (8009928 <TIM_Base_SetConfig+0xbc>)
 80098c2:	4293      	cmp	r3, r2
 80098c4:	d003      	beq.n	80098ce <TIM_Base_SetConfig+0x62>
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	4a18      	ldr	r2, [pc, #96]	; (800992c <TIM_Base_SetConfig+0xc0>)
 80098ca:	4293      	cmp	r3, r2
 80098cc:	d108      	bne.n	80098e0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80098d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80098d6:	683b      	ldr	r3, [r7, #0]
 80098d8:	68db      	ldr	r3, [r3, #12]
 80098da:	68fa      	ldr	r2, [r7, #12]
 80098dc:	4313      	orrs	r3, r2
 80098de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80098e6:	683b      	ldr	r3, [r7, #0]
 80098e8:	695b      	ldr	r3, [r3, #20]
 80098ea:	4313      	orrs	r3, r2
 80098ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	68fa      	ldr	r2, [r7, #12]
 80098f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80098f4:	683b      	ldr	r3, [r7, #0]
 80098f6:	689a      	ldr	r2, [r3, #8]
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80098fc:	683b      	ldr	r3, [r7, #0]
 80098fe:	681a      	ldr	r2, [r3, #0]
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	4a07      	ldr	r2, [pc, #28]	; (8009924 <TIM_Base_SetConfig+0xb8>)
 8009908:	4293      	cmp	r3, r2
 800990a:	d103      	bne.n	8009914 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800990c:	683b      	ldr	r3, [r7, #0]
 800990e:	691a      	ldr	r2, [r3, #16]
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	2201      	movs	r2, #1
 8009918:	615a      	str	r2, [r3, #20]
}
 800991a:	bf00      	nop
 800991c:	3714      	adds	r7, #20
 800991e:	46bd      	mov	sp, r7
 8009920:	bc80      	pop	{r7}
 8009922:	4770      	bx	lr
 8009924:	40012c00 	.word	0x40012c00
 8009928:	40000400 	.word	0x40000400
 800992c:	40000800 	.word	0x40000800

08009930 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009930:	b480      	push	{r7}
 8009932:	b087      	sub	sp, #28
 8009934:	af00      	add	r7, sp, #0
 8009936:	60f8      	str	r0, [r7, #12]
 8009938:	60b9      	str	r1, [r7, #8]
 800993a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	6a1b      	ldr	r3, [r3, #32]
 8009940:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	6a1b      	ldr	r3, [r3, #32]
 8009946:	f023 0201 	bic.w	r2, r3, #1
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	699b      	ldr	r3, [r3, #24]
 8009952:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009954:	693b      	ldr	r3, [r7, #16]
 8009956:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800995a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	011b      	lsls	r3, r3, #4
 8009960:	693a      	ldr	r2, [r7, #16]
 8009962:	4313      	orrs	r3, r2
 8009964:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009966:	697b      	ldr	r3, [r7, #20]
 8009968:	f023 030a 	bic.w	r3, r3, #10
 800996c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800996e:	697a      	ldr	r2, [r7, #20]
 8009970:	68bb      	ldr	r3, [r7, #8]
 8009972:	4313      	orrs	r3, r2
 8009974:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	693a      	ldr	r2, [r7, #16]
 800997a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	697a      	ldr	r2, [r7, #20]
 8009980:	621a      	str	r2, [r3, #32]
}
 8009982:	bf00      	nop
 8009984:	371c      	adds	r7, #28
 8009986:	46bd      	mov	sp, r7
 8009988:	bc80      	pop	{r7}
 800998a:	4770      	bx	lr

0800998c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800998c:	b480      	push	{r7}
 800998e:	b087      	sub	sp, #28
 8009990:	af00      	add	r7, sp, #0
 8009992:	60f8      	str	r0, [r7, #12]
 8009994:	60b9      	str	r1, [r7, #8]
 8009996:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	6a1b      	ldr	r3, [r3, #32]
 800999c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	6a1b      	ldr	r3, [r3, #32]
 80099a2:	f023 0210 	bic.w	r2, r3, #16
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	699b      	ldr	r3, [r3, #24]
 80099ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80099b0:	693b      	ldr	r3, [r7, #16]
 80099b2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80099b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	031b      	lsls	r3, r3, #12
 80099bc:	693a      	ldr	r2, [r7, #16]
 80099be:	4313      	orrs	r3, r2
 80099c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80099c2:	697b      	ldr	r3, [r7, #20]
 80099c4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80099c8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80099ca:	68bb      	ldr	r3, [r7, #8]
 80099cc:	011b      	lsls	r3, r3, #4
 80099ce:	697a      	ldr	r2, [r7, #20]
 80099d0:	4313      	orrs	r3, r2
 80099d2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	693a      	ldr	r2, [r7, #16]
 80099d8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	697a      	ldr	r2, [r7, #20]
 80099de:	621a      	str	r2, [r3, #32]
}
 80099e0:	bf00      	nop
 80099e2:	371c      	adds	r7, #28
 80099e4:	46bd      	mov	sp, r7
 80099e6:	bc80      	pop	{r7}
 80099e8:	4770      	bx	lr

080099ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80099ea:	b480      	push	{r7}
 80099ec:	b085      	sub	sp, #20
 80099ee:	af00      	add	r7, sp, #0
 80099f0:	6078      	str	r0, [r7, #4]
 80099f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	689b      	ldr	r3, [r3, #8]
 80099f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a00:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009a02:	683a      	ldr	r2, [r7, #0]
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	4313      	orrs	r3, r2
 8009a08:	f043 0307 	orr.w	r3, r3, #7
 8009a0c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	68fa      	ldr	r2, [r7, #12]
 8009a12:	609a      	str	r2, [r3, #8]
}
 8009a14:	bf00      	nop
 8009a16:	3714      	adds	r7, #20
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	bc80      	pop	{r7}
 8009a1c:	4770      	bx	lr

08009a1e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009a1e:	b480      	push	{r7}
 8009a20:	b087      	sub	sp, #28
 8009a22:	af00      	add	r7, sp, #0
 8009a24:	60f8      	str	r0, [r7, #12]
 8009a26:	60b9      	str	r1, [r7, #8]
 8009a28:	607a      	str	r2, [r7, #4]
 8009a2a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	689b      	ldr	r3, [r3, #8]
 8009a30:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009a32:	697b      	ldr	r3, [r7, #20]
 8009a34:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009a38:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009a3a:	683b      	ldr	r3, [r7, #0]
 8009a3c:	021a      	lsls	r2, r3, #8
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	431a      	orrs	r2, r3
 8009a42:	68bb      	ldr	r3, [r7, #8]
 8009a44:	4313      	orrs	r3, r2
 8009a46:	697a      	ldr	r2, [r7, #20]
 8009a48:	4313      	orrs	r3, r2
 8009a4a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	697a      	ldr	r2, [r7, #20]
 8009a50:	609a      	str	r2, [r3, #8]
}
 8009a52:	bf00      	nop
 8009a54:	371c      	adds	r7, #28
 8009a56:	46bd      	mov	sp, r7
 8009a58:	bc80      	pop	{r7}
 8009a5a:	4770      	bx	lr

08009a5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009a5c:	b480      	push	{r7}
 8009a5e:	b085      	sub	sp, #20
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]
 8009a64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009a6c:	2b01      	cmp	r3, #1
 8009a6e:	d101      	bne.n	8009a74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009a70:	2302      	movs	r3, #2
 8009a72:	e046      	b.n	8009b02 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	2201      	movs	r2, #1
 8009a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	2202      	movs	r2, #2
 8009a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	685b      	ldr	r3, [r3, #4]
 8009a8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	689b      	ldr	r3, [r3, #8]
 8009a92:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a9a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009a9c:	683b      	ldr	r3, [r7, #0]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	68fa      	ldr	r2, [r7, #12]
 8009aa2:	4313      	orrs	r3, r2
 8009aa4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	68fa      	ldr	r2, [r7, #12]
 8009aac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	4a16      	ldr	r2, [pc, #88]	; (8009b0c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8009ab4:	4293      	cmp	r3, r2
 8009ab6:	d00e      	beq.n	8009ad6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ac0:	d009      	beq.n	8009ad6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	4a12      	ldr	r2, [pc, #72]	; (8009b10 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8009ac8:	4293      	cmp	r3, r2
 8009aca:	d004      	beq.n	8009ad6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	4a10      	ldr	r2, [pc, #64]	; (8009b14 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8009ad2:	4293      	cmp	r3, r2
 8009ad4:	d10c      	bne.n	8009af0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009ad6:	68bb      	ldr	r3, [r7, #8]
 8009ad8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009adc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009ade:	683b      	ldr	r3, [r7, #0]
 8009ae0:	685b      	ldr	r3, [r3, #4]
 8009ae2:	68ba      	ldr	r2, [r7, #8]
 8009ae4:	4313      	orrs	r3, r2
 8009ae6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	68ba      	ldr	r2, [r7, #8]
 8009aee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	2201      	movs	r2, #1
 8009af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	2200      	movs	r2, #0
 8009afc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009b00:	2300      	movs	r3, #0
}
 8009b02:	4618      	mov	r0, r3
 8009b04:	3714      	adds	r7, #20
 8009b06:	46bd      	mov	sp, r7
 8009b08:	bc80      	pop	{r7}
 8009b0a:	4770      	bx	lr
 8009b0c:	40012c00 	.word	0x40012c00
 8009b10:	40000400 	.word	0x40000400
 8009b14:	40000800 	.word	0x40000800

08009b18 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b082      	sub	sp, #8
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d101      	bne.n	8009b2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009b26:	2301      	movs	r3, #1
 8009b28:	e042      	b.n	8009bb0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009b30:	b2db      	uxtb	r3, r3
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d106      	bne.n	8009b44 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	2200      	movs	r2, #0
 8009b3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009b3e:	6878      	ldr	r0, [r7, #4]
 8009b40:	f7fb fe4c 	bl	80057dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	2224      	movs	r2, #36	; 0x24
 8009b48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	68da      	ldr	r2, [r3, #12]
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009b5a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009b5c:	6878      	ldr	r0, [r7, #4]
 8009b5e:	f000 ff89 	bl	800aa74 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	691a      	ldr	r2, [r3, #16]
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009b70:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	695a      	ldr	r2, [r3, #20]
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009b80:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	68da      	ldr	r2, [r3, #12]
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009b90:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	2200      	movs	r2, #0
 8009b96:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	2220      	movs	r2, #32
 8009b9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	2220      	movs	r2, #32
 8009ba4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	2200      	movs	r2, #0
 8009bac:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8009bae:	2300      	movs	r3, #0
}
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	3708      	adds	r7, #8
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	bd80      	pop	{r7, pc}

08009bb8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	b08a      	sub	sp, #40	; 0x28
 8009bbc:	af02      	add	r7, sp, #8
 8009bbe:	60f8      	str	r0, [r7, #12]
 8009bc0:	60b9      	str	r1, [r7, #8]
 8009bc2:	603b      	str	r3, [r7, #0]
 8009bc4:	4613      	mov	r3, r2
 8009bc6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009bc8:	2300      	movs	r3, #0
 8009bca:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009bd2:	b2db      	uxtb	r3, r3
 8009bd4:	2b20      	cmp	r3, #32
 8009bd6:	d16d      	bne.n	8009cb4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8009bd8:	68bb      	ldr	r3, [r7, #8]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d002      	beq.n	8009be4 <HAL_UART_Transmit+0x2c>
 8009bde:	88fb      	ldrh	r3, [r7, #6]
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d101      	bne.n	8009be8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009be4:	2301      	movs	r3, #1
 8009be6:	e066      	b.n	8009cb6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	2200      	movs	r2, #0
 8009bec:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	2221      	movs	r2, #33	; 0x21
 8009bf2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009bf6:	f7fc fe7f 	bl	80068f8 <HAL_GetTick>
 8009bfa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	88fa      	ldrh	r2, [r7, #6]
 8009c00:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	88fa      	ldrh	r2, [r7, #6]
 8009c06:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	689b      	ldr	r3, [r3, #8]
 8009c0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c10:	d108      	bne.n	8009c24 <HAL_UART_Transmit+0x6c>
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	691b      	ldr	r3, [r3, #16]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d104      	bne.n	8009c24 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009c1e:	68bb      	ldr	r3, [r7, #8]
 8009c20:	61bb      	str	r3, [r7, #24]
 8009c22:	e003      	b.n	8009c2c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009c24:	68bb      	ldr	r3, [r7, #8]
 8009c26:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009c28:	2300      	movs	r3, #0
 8009c2a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009c2c:	e02a      	b.n	8009c84 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009c2e:	683b      	ldr	r3, [r7, #0]
 8009c30:	9300      	str	r3, [sp, #0]
 8009c32:	697b      	ldr	r3, [r7, #20]
 8009c34:	2200      	movs	r2, #0
 8009c36:	2180      	movs	r1, #128	; 0x80
 8009c38:	68f8      	ldr	r0, [r7, #12]
 8009c3a:	f000 fc51 	bl	800a4e0 <UART_WaitOnFlagUntilTimeout>
 8009c3e:	4603      	mov	r3, r0
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d001      	beq.n	8009c48 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8009c44:	2303      	movs	r3, #3
 8009c46:	e036      	b.n	8009cb6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8009c48:	69fb      	ldr	r3, [r7, #28]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d10b      	bne.n	8009c66 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009c4e:	69bb      	ldr	r3, [r7, #24]
 8009c50:	881b      	ldrh	r3, [r3, #0]
 8009c52:	461a      	mov	r2, r3
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009c5c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009c5e:	69bb      	ldr	r3, [r7, #24]
 8009c60:	3302      	adds	r3, #2
 8009c62:	61bb      	str	r3, [r7, #24]
 8009c64:	e007      	b.n	8009c76 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009c66:	69fb      	ldr	r3, [r7, #28]
 8009c68:	781a      	ldrb	r2, [r3, #0]
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009c70:	69fb      	ldr	r3, [r7, #28]
 8009c72:	3301      	adds	r3, #1
 8009c74:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009c7a:	b29b      	uxth	r3, r3
 8009c7c:	3b01      	subs	r3, #1
 8009c7e:	b29a      	uxth	r2, r3
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009c88:	b29b      	uxth	r3, r3
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d1cf      	bne.n	8009c2e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009c8e:	683b      	ldr	r3, [r7, #0]
 8009c90:	9300      	str	r3, [sp, #0]
 8009c92:	697b      	ldr	r3, [r7, #20]
 8009c94:	2200      	movs	r2, #0
 8009c96:	2140      	movs	r1, #64	; 0x40
 8009c98:	68f8      	ldr	r0, [r7, #12]
 8009c9a:	f000 fc21 	bl	800a4e0 <UART_WaitOnFlagUntilTimeout>
 8009c9e:	4603      	mov	r3, r0
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d001      	beq.n	8009ca8 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8009ca4:	2303      	movs	r3, #3
 8009ca6:	e006      	b.n	8009cb6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	2220      	movs	r2, #32
 8009cac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	e000      	b.n	8009cb6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8009cb4:	2302      	movs	r3, #2
  }
}
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	3720      	adds	r7, #32
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	bd80      	pop	{r7, pc}

08009cbe <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009cbe:	b580      	push	{r7, lr}
 8009cc0:	b08c      	sub	sp, #48	; 0x30
 8009cc2:	af00      	add	r7, sp, #0
 8009cc4:	60f8      	str	r0, [r7, #12]
 8009cc6:	60b9      	str	r1, [r7, #8]
 8009cc8:	4613      	mov	r3, r2
 8009cca:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009cd2:	b2db      	uxtb	r3, r3
 8009cd4:	2b20      	cmp	r3, #32
 8009cd6:	d14a      	bne.n	8009d6e <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8009cd8:	68bb      	ldr	r3, [r7, #8]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d002      	beq.n	8009ce4 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8009cde:	88fb      	ldrh	r3, [r7, #6]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d101      	bne.n	8009ce8 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8009ce4:	2301      	movs	r3, #1
 8009ce6:	e043      	b.n	8009d70 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	2201      	movs	r2, #1
 8009cec:	631a      	str	r2, [r3, #48]	; 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	2200      	movs	r2, #0
 8009cf2:	635a      	str	r2, [r3, #52]	; 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8009cf4:	88fb      	ldrh	r3, [r7, #6]
 8009cf6:	461a      	mov	r2, r3
 8009cf8:	68b9      	ldr	r1, [r7, #8]
 8009cfa:	68f8      	ldr	r0, [r7, #12]
 8009cfc:	f000 fc5e 	bl	800a5bc <UART_Start_Receive_DMA>
 8009d00:	4603      	mov	r3, r0
 8009d02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8009d06:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d12c      	bne.n	8009d68 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d12:	2b01      	cmp	r3, #1
 8009d14:	d125      	bne.n	8009d62 <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009d16:	2300      	movs	r3, #0
 8009d18:	613b      	str	r3, [r7, #16]
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	613b      	str	r3, [r7, #16]
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	685b      	ldr	r3, [r3, #4]
 8009d28:	613b      	str	r3, [r7, #16]
 8009d2a:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	330c      	adds	r3, #12
 8009d32:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d34:	69bb      	ldr	r3, [r7, #24]
 8009d36:	e853 3f00 	ldrex	r3, [r3]
 8009d3a:	617b      	str	r3, [r7, #20]
   return(result);
 8009d3c:	697b      	ldr	r3, [r7, #20]
 8009d3e:	f043 0310 	orr.w	r3, r3, #16
 8009d42:	62bb      	str	r3, [r7, #40]	; 0x28
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	330c      	adds	r3, #12
 8009d4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009d4c:	627a      	str	r2, [r7, #36]	; 0x24
 8009d4e:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d50:	6a39      	ldr	r1, [r7, #32]
 8009d52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d54:	e841 2300 	strex	r3, r2, [r1]
 8009d58:	61fb      	str	r3, [r7, #28]
   return(result);
 8009d5a:	69fb      	ldr	r3, [r7, #28]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d1e5      	bne.n	8009d2c <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 8009d60:	e002      	b.n	8009d68 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8009d62:	2301      	movs	r3, #1
 8009d64:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8009d68:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009d6c:	e000      	b.n	8009d70 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8009d6e:	2302      	movs	r3, #2
  }
}
 8009d70:	4618      	mov	r0, r3
 8009d72:	3730      	adds	r7, #48	; 0x30
 8009d74:	46bd      	mov	sp, r7
 8009d76:	bd80      	pop	{r7, pc}

08009d78 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009d78:	b580      	push	{r7, lr}
 8009d7a:	b0ba      	sub	sp, #232	; 0xe8
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	68db      	ldr	r3, [r3, #12]
 8009d90:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	695b      	ldr	r3, [r3, #20]
 8009d9a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8009d9e:	2300      	movs	r3, #0
 8009da0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8009da4:	2300      	movs	r3, #0
 8009da6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009daa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009dae:	f003 030f 	and.w	r3, r3, #15
 8009db2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8009db6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d10f      	bne.n	8009dde <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009dbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009dc2:	f003 0320 	and.w	r3, r3, #32
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d009      	beq.n	8009dde <HAL_UART_IRQHandler+0x66>
 8009dca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009dce:	f003 0320 	and.w	r3, r3, #32
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d003      	beq.n	8009dde <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009dd6:	6878      	ldr	r0, [r7, #4]
 8009dd8:	f000 fd8e 	bl	800a8f8 <UART_Receive_IT>
      return;
 8009ddc:	e25b      	b.n	800a296 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009dde:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	f000 80de 	beq.w	8009fa4 <HAL_UART_IRQHandler+0x22c>
 8009de8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009dec:	f003 0301 	and.w	r3, r3, #1
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d106      	bne.n	8009e02 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009df4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009df8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	f000 80d1 	beq.w	8009fa4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009e02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e06:	f003 0301 	and.w	r3, r3, #1
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d00b      	beq.n	8009e26 <HAL_UART_IRQHandler+0xae>
 8009e0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d005      	beq.n	8009e26 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e1e:	f043 0201 	orr.w	r2, r3, #1
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009e26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e2a:	f003 0304 	and.w	r3, r3, #4
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d00b      	beq.n	8009e4a <HAL_UART_IRQHandler+0xd2>
 8009e32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009e36:	f003 0301 	and.w	r3, r3, #1
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d005      	beq.n	8009e4a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e42:	f043 0202 	orr.w	r2, r3, #2
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009e4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e4e:	f003 0302 	and.w	r3, r3, #2
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d00b      	beq.n	8009e6e <HAL_UART_IRQHandler+0xf6>
 8009e56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009e5a:	f003 0301 	and.w	r3, r3, #1
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d005      	beq.n	8009e6e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e66:	f043 0204 	orr.w	r2, r3, #4
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009e6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e72:	f003 0308 	and.w	r3, r3, #8
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d011      	beq.n	8009e9e <HAL_UART_IRQHandler+0x126>
 8009e7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e7e:	f003 0320 	and.w	r3, r3, #32
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d105      	bne.n	8009e92 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009e86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009e8a:	f003 0301 	and.w	r3, r3, #1
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d005      	beq.n	8009e9e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e96:	f043 0208 	orr.w	r2, r3, #8
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	f000 81f2 	beq.w	800a28c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009ea8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009eac:	f003 0320 	and.w	r3, r3, #32
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d008      	beq.n	8009ec6 <HAL_UART_IRQHandler+0x14e>
 8009eb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009eb8:	f003 0320 	and.w	r3, r3, #32
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d002      	beq.n	8009ec6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009ec0:	6878      	ldr	r0, [r7, #4]
 8009ec2:	f000 fd19 	bl	800a8f8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	695b      	ldr	r3, [r3, #20]
 8009ecc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	bf14      	ite	ne
 8009ed4:	2301      	movne	r3, #1
 8009ed6:	2300      	moveq	r3, #0
 8009ed8:	b2db      	uxtb	r3, r3
 8009eda:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ee2:	f003 0308 	and.w	r3, r3, #8
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d103      	bne.n	8009ef2 <HAL_UART_IRQHandler+0x17a>
 8009eea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d04f      	beq.n	8009f92 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009ef2:	6878      	ldr	r0, [r7, #4]
 8009ef4:	f000 fc23 	bl	800a73e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	695b      	ldr	r3, [r3, #20]
 8009efe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d041      	beq.n	8009f8a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	3314      	adds	r3, #20
 8009f0c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f10:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009f14:	e853 3f00 	ldrex	r3, [r3]
 8009f18:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009f1c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009f20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009f24:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	3314      	adds	r3, #20
 8009f2e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009f32:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009f36:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f3a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009f3e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009f42:	e841 2300 	strex	r3, r2, [r1]
 8009f46:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009f4a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d1d9      	bne.n	8009f06 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d013      	beq.n	8009f82 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f5e:	4a7e      	ldr	r2, [pc, #504]	; (800a158 <HAL_UART_IRQHandler+0x3e0>)
 8009f60:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f66:	4618      	mov	r0, r3
 8009f68:	f7fd faf6 	bl	8007558 <HAL_DMA_Abort_IT>
 8009f6c:	4603      	mov	r3, r0
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d016      	beq.n	8009fa0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f78:	687a      	ldr	r2, [r7, #4]
 8009f7a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8009f7c:	4610      	mov	r0, r2
 8009f7e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f80:	e00e      	b.n	8009fa0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009f82:	6878      	ldr	r0, [r7, #4]
 8009f84:	f000 f9a5 	bl	800a2d2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f88:	e00a      	b.n	8009fa0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009f8a:	6878      	ldr	r0, [r7, #4]
 8009f8c:	f000 f9a1 	bl	800a2d2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f90:	e006      	b.n	8009fa0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009f92:	6878      	ldr	r0, [r7, #4]
 8009f94:	f000 f99d 	bl	800a2d2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8009f9e:	e175      	b.n	800a28c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009fa0:	bf00      	nop
    return;
 8009fa2:	e173      	b.n	800a28c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fa8:	2b01      	cmp	r3, #1
 8009faa:	f040 814f 	bne.w	800a24c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009fae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009fb2:	f003 0310 	and.w	r3, r3, #16
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	f000 8148 	beq.w	800a24c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009fbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009fc0:	f003 0310 	and.w	r3, r3, #16
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	f000 8141 	beq.w	800a24c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009fca:	2300      	movs	r3, #0
 8009fcc:	60bb      	str	r3, [r7, #8]
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	60bb      	str	r3, [r7, #8]
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	685b      	ldr	r3, [r3, #4]
 8009fdc:	60bb      	str	r3, [r7, #8]
 8009fde:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	695b      	ldr	r3, [r3, #20]
 8009fe6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	f000 80b6 	beq.w	800a15c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	685b      	ldr	r3, [r3, #4]
 8009ff8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009ffc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a000:	2b00      	cmp	r3, #0
 800a002:	f000 8145 	beq.w	800a290 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a00a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a00e:	429a      	cmp	r2, r3
 800a010:	f080 813e 	bcs.w	800a290 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a01a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a020:	699b      	ldr	r3, [r3, #24]
 800a022:	2b20      	cmp	r3, #32
 800a024:	f000 8088 	beq.w	800a138 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	330c      	adds	r3, #12
 800a02e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a032:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a036:	e853 3f00 	ldrex	r3, [r3]
 800a03a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a03e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a042:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a046:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	330c      	adds	r3, #12
 800a050:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800a054:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a058:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a05c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a060:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a064:	e841 2300 	strex	r3, r2, [r1]
 800a068:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a06c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a070:	2b00      	cmp	r3, #0
 800a072:	d1d9      	bne.n	800a028 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	3314      	adds	r3, #20
 800a07a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a07c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a07e:	e853 3f00 	ldrex	r3, [r3]
 800a082:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a084:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a086:	f023 0301 	bic.w	r3, r3, #1
 800a08a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	3314      	adds	r3, #20
 800a094:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a098:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a09c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a09e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a0a0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a0a4:	e841 2300 	strex	r3, r2, [r1]
 800a0a8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a0aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d1e1      	bne.n	800a074 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	3314      	adds	r3, #20
 800a0b6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a0ba:	e853 3f00 	ldrex	r3, [r3]
 800a0be:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a0c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a0c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a0c6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	3314      	adds	r3, #20
 800a0d0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a0d4:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a0d6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0d8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a0da:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a0dc:	e841 2300 	strex	r3, r2, [r1]
 800a0e0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a0e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d1e3      	bne.n	800a0b0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	2220      	movs	r2, #32
 800a0ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	330c      	adds	r3, #12
 800a0fc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a100:	e853 3f00 	ldrex	r3, [r3]
 800a104:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a106:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a108:	f023 0310 	bic.w	r3, r3, #16
 800a10c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	330c      	adds	r3, #12
 800a116:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a11a:	65ba      	str	r2, [r7, #88]	; 0x58
 800a11c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a11e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a120:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a122:	e841 2300 	strex	r3, r2, [r1]
 800a126:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a128:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d1e3      	bne.n	800a0f6 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a132:	4618      	mov	r0, r3
 800a134:	f7fd f9d4 	bl	80074e0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	2202      	movs	r2, #2
 800a13c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a146:	b29b      	uxth	r3, r3
 800a148:	1ad3      	subs	r3, r2, r3
 800a14a:	b29b      	uxth	r3, r3
 800a14c:	4619      	mov	r1, r3
 800a14e:	6878      	ldr	r0, [r7, #4]
 800a150:	f7fa fe0e 	bl	8004d70 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a154:	e09c      	b.n	800a290 <HAL_UART_IRQHandler+0x518>
 800a156:	bf00      	nop
 800a158:	0800a803 	.word	0x0800a803
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a164:	b29b      	uxth	r3, r3
 800a166:	1ad3      	subs	r3, r2, r3
 800a168:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a170:	b29b      	uxth	r3, r3
 800a172:	2b00      	cmp	r3, #0
 800a174:	f000 808e 	beq.w	800a294 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800a178:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	f000 8089 	beq.w	800a294 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	330c      	adds	r3, #12
 800a188:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a18a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a18c:	e853 3f00 	ldrex	r3, [r3]
 800a190:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a192:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a194:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a198:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	330c      	adds	r3, #12
 800a1a2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800a1a6:	647a      	str	r2, [r7, #68]	; 0x44
 800a1a8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1aa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a1ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a1ae:	e841 2300 	strex	r3, r2, [r1]
 800a1b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a1b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d1e3      	bne.n	800a182 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	3314      	adds	r3, #20
 800a1c0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1c4:	e853 3f00 	ldrex	r3, [r3]
 800a1c8:	623b      	str	r3, [r7, #32]
   return(result);
 800a1ca:	6a3b      	ldr	r3, [r7, #32]
 800a1cc:	f023 0301 	bic.w	r3, r3, #1
 800a1d0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	3314      	adds	r3, #20
 800a1da:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a1de:	633a      	str	r2, [r7, #48]	; 0x30
 800a1e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a1e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a1e6:	e841 2300 	strex	r3, r2, [r1]
 800a1ea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a1ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d1e3      	bne.n	800a1ba <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	2220      	movs	r2, #32
 800a1f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	2200      	movs	r2, #0
 800a1fe:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	330c      	adds	r3, #12
 800a206:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a208:	693b      	ldr	r3, [r7, #16]
 800a20a:	e853 3f00 	ldrex	r3, [r3]
 800a20e:	60fb      	str	r3, [r7, #12]
   return(result);
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	f023 0310 	bic.w	r3, r3, #16
 800a216:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	330c      	adds	r3, #12
 800a220:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800a224:	61fa      	str	r2, [r7, #28]
 800a226:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a228:	69b9      	ldr	r1, [r7, #24]
 800a22a:	69fa      	ldr	r2, [r7, #28]
 800a22c:	e841 2300 	strex	r3, r2, [r1]
 800a230:	617b      	str	r3, [r7, #20]
   return(result);
 800a232:	697b      	ldr	r3, [r7, #20]
 800a234:	2b00      	cmp	r3, #0
 800a236:	d1e3      	bne.n	800a200 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	2202      	movs	r2, #2
 800a23c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a23e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a242:	4619      	mov	r1, r3
 800a244:	6878      	ldr	r0, [r7, #4]
 800a246:	f7fa fd93 	bl	8004d70 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a24a:	e023      	b.n	800a294 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a24c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a250:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a254:	2b00      	cmp	r3, #0
 800a256:	d009      	beq.n	800a26c <HAL_UART_IRQHandler+0x4f4>
 800a258:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a25c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a260:	2b00      	cmp	r3, #0
 800a262:	d003      	beq.n	800a26c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800a264:	6878      	ldr	r0, [r7, #4]
 800a266:	f000 fae0 	bl	800a82a <UART_Transmit_IT>
    return;
 800a26a:	e014      	b.n	800a296 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a26c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a270:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a274:	2b00      	cmp	r3, #0
 800a276:	d00e      	beq.n	800a296 <HAL_UART_IRQHandler+0x51e>
 800a278:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a27c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a280:	2b00      	cmp	r3, #0
 800a282:	d008      	beq.n	800a296 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800a284:	6878      	ldr	r0, [r7, #4]
 800a286:	f000 fb1f 	bl	800a8c8 <UART_EndTransmit_IT>
    return;
 800a28a:	e004      	b.n	800a296 <HAL_UART_IRQHandler+0x51e>
    return;
 800a28c:	bf00      	nop
 800a28e:	e002      	b.n	800a296 <HAL_UART_IRQHandler+0x51e>
      return;
 800a290:	bf00      	nop
 800a292:	e000      	b.n	800a296 <HAL_UART_IRQHandler+0x51e>
      return;
 800a294:	bf00      	nop
  }
}
 800a296:	37e8      	adds	r7, #232	; 0xe8
 800a298:	46bd      	mov	sp, r7
 800a29a:	bd80      	pop	{r7, pc}

0800a29c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a29c:	b480      	push	{r7}
 800a29e:	b083      	sub	sp, #12
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a2a4:	bf00      	nop
 800a2a6:	370c      	adds	r7, #12
 800a2a8:	46bd      	mov	sp, r7
 800a2aa:	bc80      	pop	{r7}
 800a2ac:	4770      	bx	lr

0800a2ae <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a2ae:	b480      	push	{r7}
 800a2b0:	b083      	sub	sp, #12
 800a2b2:	af00      	add	r7, sp, #0
 800a2b4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800a2b6:	bf00      	nop
 800a2b8:	370c      	adds	r7, #12
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	bc80      	pop	{r7}
 800a2be:	4770      	bx	lr

0800a2c0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a2c0:	b480      	push	{r7}
 800a2c2:	b083      	sub	sp, #12
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800a2c8:	bf00      	nop
 800a2ca:	370c      	adds	r7, #12
 800a2cc:	46bd      	mov	sp, r7
 800a2ce:	bc80      	pop	{r7}
 800a2d0:	4770      	bx	lr

0800a2d2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a2d2:	b480      	push	{r7}
 800a2d4:	b083      	sub	sp, #12
 800a2d6:	af00      	add	r7, sp, #0
 800a2d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a2da:	bf00      	nop
 800a2dc:	370c      	adds	r7, #12
 800a2de:	46bd      	mov	sp, r7
 800a2e0:	bc80      	pop	{r7}
 800a2e2:	4770      	bx	lr

0800a2e4 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a2e4:	b580      	push	{r7, lr}
 800a2e6:	b09c      	sub	sp, #112	; 0x70
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2f0:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	f003 0320 	and.w	r3, r3, #32
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d172      	bne.n	800a3e6 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800a300:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a302:	2200      	movs	r2, #0
 800a304:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a306:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	330c      	adds	r3, #12
 800a30c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a30e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a310:	e853 3f00 	ldrex	r3, [r3]
 800a314:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a316:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a318:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a31c:	66bb      	str	r3, [r7, #104]	; 0x68
 800a31e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	330c      	adds	r3, #12
 800a324:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a326:	65ba      	str	r2, [r7, #88]	; 0x58
 800a328:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a32a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a32c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a32e:	e841 2300 	strex	r3, r2, [r1]
 800a332:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a334:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a336:	2b00      	cmp	r3, #0
 800a338:	d1e5      	bne.n	800a306 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a33a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	3314      	adds	r3, #20
 800a340:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a344:	e853 3f00 	ldrex	r3, [r3]
 800a348:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a34a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a34c:	f023 0301 	bic.w	r3, r3, #1
 800a350:	667b      	str	r3, [r7, #100]	; 0x64
 800a352:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	3314      	adds	r3, #20
 800a358:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a35a:	647a      	str	r2, [r7, #68]	; 0x44
 800a35c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a35e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a360:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a362:	e841 2300 	strex	r3, r2, [r1]
 800a366:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a368:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d1e5      	bne.n	800a33a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a36e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	3314      	adds	r3, #20
 800a374:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a378:	e853 3f00 	ldrex	r3, [r3]
 800a37c:	623b      	str	r3, [r7, #32]
   return(result);
 800a37e:	6a3b      	ldr	r3, [r7, #32]
 800a380:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a384:	663b      	str	r3, [r7, #96]	; 0x60
 800a386:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	3314      	adds	r3, #20
 800a38c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a38e:	633a      	str	r2, [r7, #48]	; 0x30
 800a390:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a392:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a394:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a396:	e841 2300 	strex	r3, r2, [r1]
 800a39a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a39c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d1e5      	bne.n	800a36e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a3a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a3a4:	2220      	movs	r2, #32
 800a3a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a3aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a3ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3ae:	2b01      	cmp	r3, #1
 800a3b0:	d119      	bne.n	800a3e6 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a3b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	330c      	adds	r3, #12
 800a3b8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3ba:	693b      	ldr	r3, [r7, #16]
 800a3bc:	e853 3f00 	ldrex	r3, [r3]
 800a3c0:	60fb      	str	r3, [r7, #12]
   return(result);
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	f023 0310 	bic.w	r3, r3, #16
 800a3c8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a3ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	330c      	adds	r3, #12
 800a3d0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a3d2:	61fa      	str	r2, [r7, #28]
 800a3d4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3d6:	69b9      	ldr	r1, [r7, #24]
 800a3d8:	69fa      	ldr	r2, [r7, #28]
 800a3da:	e841 2300 	strex	r3, r2, [r1]
 800a3de:	617b      	str	r3, [r7, #20]
   return(result);
 800a3e0:	697b      	ldr	r3, [r7, #20]
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d1e5      	bne.n	800a3b2 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a3e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a3e8:	2200      	movs	r2, #0
 800a3ea:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a3ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a3ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3f0:	2b01      	cmp	r3, #1
 800a3f2:	d106      	bne.n	800a402 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a3f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a3f6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a3f8:	4619      	mov	r1, r3
 800a3fa:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a3fc:	f7fa fcb8 	bl	8004d70 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a400:	e002      	b.n	800a408 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800a402:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a404:	f7ff ff53 	bl	800a2ae <HAL_UART_RxCpltCallback>
}
 800a408:	bf00      	nop
 800a40a:	3770      	adds	r7, #112	; 0x70
 800a40c:	46bd      	mov	sp, r7
 800a40e:	bd80      	pop	{r7, pc}

0800a410 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a410:	b580      	push	{r7, lr}
 800a412:	b084      	sub	sp, #16
 800a414:	af00      	add	r7, sp, #0
 800a416:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a41c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	2201      	movs	r2, #1
 800a422:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a428:	2b01      	cmp	r3, #1
 800a42a:	d108      	bne.n	800a43e <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a430:	085b      	lsrs	r3, r3, #1
 800a432:	b29b      	uxth	r3, r3
 800a434:	4619      	mov	r1, r3
 800a436:	68f8      	ldr	r0, [r7, #12]
 800a438:	f7fa fc9a 	bl	8004d70 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a43c:	e002      	b.n	800a444 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800a43e:	68f8      	ldr	r0, [r7, #12]
 800a440:	f7ff ff3e 	bl	800a2c0 <HAL_UART_RxHalfCpltCallback>
}
 800a444:	bf00      	nop
 800a446:	3710      	adds	r7, #16
 800a448:	46bd      	mov	sp, r7
 800a44a:	bd80      	pop	{r7, pc}

0800a44c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a44c:	b580      	push	{r7, lr}
 800a44e:	b084      	sub	sp, #16
 800a450:	af00      	add	r7, sp, #0
 800a452:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800a454:	2300      	movs	r3, #0
 800a456:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a45c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800a45e:	68bb      	ldr	r3, [r7, #8]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	695b      	ldr	r3, [r3, #20]
 800a464:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a468:	2b00      	cmp	r3, #0
 800a46a:	bf14      	ite	ne
 800a46c:	2301      	movne	r3, #1
 800a46e:	2300      	moveq	r3, #0
 800a470:	b2db      	uxtb	r3, r3
 800a472:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800a474:	68bb      	ldr	r3, [r7, #8]
 800a476:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a47a:	b2db      	uxtb	r3, r3
 800a47c:	2b21      	cmp	r3, #33	; 0x21
 800a47e:	d108      	bne.n	800a492 <UART_DMAError+0x46>
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	2b00      	cmp	r3, #0
 800a484:	d005      	beq.n	800a492 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800a486:	68bb      	ldr	r3, [r7, #8]
 800a488:	2200      	movs	r2, #0
 800a48a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800a48c:	68b8      	ldr	r0, [r7, #8]
 800a48e:	f000 f92f 	bl	800a6f0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a492:	68bb      	ldr	r3, [r7, #8]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	695b      	ldr	r3, [r3, #20]
 800a498:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	bf14      	ite	ne
 800a4a0:	2301      	movne	r3, #1
 800a4a2:	2300      	moveq	r3, #0
 800a4a4:	b2db      	uxtb	r3, r3
 800a4a6:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800a4a8:	68bb      	ldr	r3, [r7, #8]
 800a4aa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a4ae:	b2db      	uxtb	r3, r3
 800a4b0:	2b22      	cmp	r3, #34	; 0x22
 800a4b2:	d108      	bne.n	800a4c6 <UART_DMAError+0x7a>
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d005      	beq.n	800a4c6 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800a4ba:	68bb      	ldr	r3, [r7, #8]
 800a4bc:	2200      	movs	r2, #0
 800a4be:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800a4c0:	68b8      	ldr	r0, [r7, #8]
 800a4c2:	f000 f93c 	bl	800a73e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a4c6:	68bb      	ldr	r3, [r7, #8]
 800a4c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4ca:	f043 0210 	orr.w	r2, r3, #16
 800a4ce:	68bb      	ldr	r3, [r7, #8]
 800a4d0:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a4d2:	68b8      	ldr	r0, [r7, #8]
 800a4d4:	f7ff fefd 	bl	800a2d2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a4d8:	bf00      	nop
 800a4da:	3710      	adds	r7, #16
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	bd80      	pop	{r7, pc}

0800a4e0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	b090      	sub	sp, #64	; 0x40
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	60f8      	str	r0, [r7, #12]
 800a4e8:	60b9      	str	r1, [r7, #8]
 800a4ea:	603b      	str	r3, [r7, #0]
 800a4ec:	4613      	mov	r3, r2
 800a4ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a4f0:	e050      	b.n	800a594 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a4f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a4f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4f8:	d04c      	beq.n	800a594 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a4fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d007      	beq.n	800a510 <UART_WaitOnFlagUntilTimeout+0x30>
 800a500:	f7fc f9fa 	bl	80068f8 <HAL_GetTick>
 800a504:	4602      	mov	r2, r0
 800a506:	683b      	ldr	r3, [r7, #0]
 800a508:	1ad3      	subs	r3, r2, r3
 800a50a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a50c:	429a      	cmp	r2, r3
 800a50e:	d241      	bcs.n	800a594 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	330c      	adds	r3, #12
 800a516:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a51a:	e853 3f00 	ldrex	r3, [r3]
 800a51e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a522:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a526:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	330c      	adds	r3, #12
 800a52e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a530:	637a      	str	r2, [r7, #52]	; 0x34
 800a532:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a534:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a536:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a538:	e841 2300 	strex	r3, r2, [r1]
 800a53c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a53e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a540:	2b00      	cmp	r3, #0
 800a542:	d1e5      	bne.n	800a510 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	3314      	adds	r3, #20
 800a54a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a54c:	697b      	ldr	r3, [r7, #20]
 800a54e:	e853 3f00 	ldrex	r3, [r3]
 800a552:	613b      	str	r3, [r7, #16]
   return(result);
 800a554:	693b      	ldr	r3, [r7, #16]
 800a556:	f023 0301 	bic.w	r3, r3, #1
 800a55a:	63bb      	str	r3, [r7, #56]	; 0x38
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	3314      	adds	r3, #20
 800a562:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a564:	623a      	str	r2, [r7, #32]
 800a566:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a568:	69f9      	ldr	r1, [r7, #28]
 800a56a:	6a3a      	ldr	r2, [r7, #32]
 800a56c:	e841 2300 	strex	r3, r2, [r1]
 800a570:	61bb      	str	r3, [r7, #24]
   return(result);
 800a572:	69bb      	ldr	r3, [r7, #24]
 800a574:	2b00      	cmp	r3, #0
 800a576:	d1e5      	bne.n	800a544 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	2220      	movs	r2, #32
 800a57c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	2220      	movs	r2, #32
 800a584:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	2200      	movs	r2, #0
 800a58c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800a590:	2303      	movs	r3, #3
 800a592:	e00f      	b.n	800a5b4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	681a      	ldr	r2, [r3, #0]
 800a59a:	68bb      	ldr	r3, [r7, #8]
 800a59c:	4013      	ands	r3, r2
 800a59e:	68ba      	ldr	r2, [r7, #8]
 800a5a0:	429a      	cmp	r2, r3
 800a5a2:	bf0c      	ite	eq
 800a5a4:	2301      	moveq	r3, #1
 800a5a6:	2300      	movne	r3, #0
 800a5a8:	b2db      	uxtb	r3, r3
 800a5aa:	461a      	mov	r2, r3
 800a5ac:	79fb      	ldrb	r3, [r7, #7]
 800a5ae:	429a      	cmp	r2, r3
 800a5b0:	d09f      	beq.n	800a4f2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a5b2:	2300      	movs	r3, #0
}
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	3740      	adds	r7, #64	; 0x40
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	bd80      	pop	{r7, pc}

0800a5bc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a5bc:	b580      	push	{r7, lr}
 800a5be:	b098      	sub	sp, #96	; 0x60
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	60f8      	str	r0, [r7, #12]
 800a5c4:	60b9      	str	r1, [r7, #8]
 800a5c6:	4613      	mov	r3, r2
 800a5c8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800a5ca:	68ba      	ldr	r2, [r7, #8]
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	88fa      	ldrh	r2, [r7, #6]
 800a5d4:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	2200      	movs	r2, #0
 800a5da:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	2222      	movs	r2, #34	; 0x22
 800a5e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5e8:	4a3e      	ldr	r2, [pc, #248]	; (800a6e4 <UART_Start_Receive_DMA+0x128>)
 800a5ea:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5f0:	4a3d      	ldr	r2, [pc, #244]	; (800a6e8 <UART_Start_Receive_DMA+0x12c>)
 800a5f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5f8:	4a3c      	ldr	r2, [pc, #240]	; (800a6ec <UART_Start_Receive_DMA+0x130>)
 800a5fa:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a600:	2200      	movs	r2, #0
 800a602:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800a604:	f107 0308 	add.w	r3, r7, #8
 800a608:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	3304      	adds	r3, #4
 800a614:	4619      	mov	r1, r3
 800a616:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a618:	681a      	ldr	r2, [r3, #0]
 800a61a:	88fb      	ldrh	r3, [r7, #6]
 800a61c:	f7fc ff00 	bl	8007420 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800a620:	2300      	movs	r3, #0
 800a622:	613b      	str	r3, [r7, #16]
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	613b      	str	r3, [r7, #16]
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	685b      	ldr	r3, [r3, #4]
 800a632:	613b      	str	r3, [r7, #16]
 800a634:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	691b      	ldr	r3, [r3, #16]
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d019      	beq.n	800a672 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	330c      	adds	r3, #12
 800a644:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a646:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a648:	e853 3f00 	ldrex	r3, [r3]
 800a64c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a64e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a650:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a654:	65bb      	str	r3, [r7, #88]	; 0x58
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	330c      	adds	r3, #12
 800a65c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a65e:	64fa      	str	r2, [r7, #76]	; 0x4c
 800a660:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a662:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800a664:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a666:	e841 2300 	strex	r3, r2, [r1]
 800a66a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800a66c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d1e5      	bne.n	800a63e <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	3314      	adds	r3, #20
 800a678:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a67a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a67c:	e853 3f00 	ldrex	r3, [r3]
 800a680:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a684:	f043 0301 	orr.w	r3, r3, #1
 800a688:	657b      	str	r3, [r7, #84]	; 0x54
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	3314      	adds	r3, #20
 800a690:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a692:	63ba      	str	r2, [r7, #56]	; 0x38
 800a694:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a696:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a698:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a69a:	e841 2300 	strex	r3, r2, [r1]
 800a69e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a6a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d1e5      	bne.n	800a672 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	3314      	adds	r3, #20
 800a6ac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6ae:	69bb      	ldr	r3, [r7, #24]
 800a6b0:	e853 3f00 	ldrex	r3, [r3]
 800a6b4:	617b      	str	r3, [r7, #20]
   return(result);
 800a6b6:	697b      	ldr	r3, [r7, #20]
 800a6b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a6bc:	653b      	str	r3, [r7, #80]	; 0x50
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	3314      	adds	r3, #20
 800a6c4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a6c6:	627a      	str	r2, [r7, #36]	; 0x24
 800a6c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6ca:	6a39      	ldr	r1, [r7, #32]
 800a6cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a6ce:	e841 2300 	strex	r3, r2, [r1]
 800a6d2:	61fb      	str	r3, [r7, #28]
   return(result);
 800a6d4:	69fb      	ldr	r3, [r7, #28]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d1e5      	bne.n	800a6a6 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800a6da:	2300      	movs	r3, #0
}
 800a6dc:	4618      	mov	r0, r3
 800a6de:	3760      	adds	r7, #96	; 0x60
 800a6e0:	46bd      	mov	sp, r7
 800a6e2:	bd80      	pop	{r7, pc}
 800a6e4:	0800a2e5 	.word	0x0800a2e5
 800a6e8:	0800a411 	.word	0x0800a411
 800a6ec:	0800a44d 	.word	0x0800a44d

0800a6f0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a6f0:	b480      	push	{r7}
 800a6f2:	b089      	sub	sp, #36	; 0x24
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	330c      	adds	r3, #12
 800a6fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	e853 3f00 	ldrex	r3, [r3]
 800a706:	60bb      	str	r3, [r7, #8]
   return(result);
 800a708:	68bb      	ldr	r3, [r7, #8]
 800a70a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a70e:	61fb      	str	r3, [r7, #28]
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	330c      	adds	r3, #12
 800a716:	69fa      	ldr	r2, [r7, #28]
 800a718:	61ba      	str	r2, [r7, #24]
 800a71a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a71c:	6979      	ldr	r1, [r7, #20]
 800a71e:	69ba      	ldr	r2, [r7, #24]
 800a720:	e841 2300 	strex	r3, r2, [r1]
 800a724:	613b      	str	r3, [r7, #16]
   return(result);
 800a726:	693b      	ldr	r3, [r7, #16]
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d1e5      	bne.n	800a6f8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	2220      	movs	r2, #32
 800a730:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 800a734:	bf00      	nop
 800a736:	3724      	adds	r7, #36	; 0x24
 800a738:	46bd      	mov	sp, r7
 800a73a:	bc80      	pop	{r7}
 800a73c:	4770      	bx	lr

0800a73e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a73e:	b480      	push	{r7}
 800a740:	b095      	sub	sp, #84	; 0x54
 800a742:	af00      	add	r7, sp, #0
 800a744:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	330c      	adds	r3, #12
 800a74c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a74e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a750:	e853 3f00 	ldrex	r3, [r3]
 800a754:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a758:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a75c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	330c      	adds	r3, #12
 800a764:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a766:	643a      	str	r2, [r7, #64]	; 0x40
 800a768:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a76a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a76c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a76e:	e841 2300 	strex	r3, r2, [r1]
 800a772:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a776:	2b00      	cmp	r3, #0
 800a778:	d1e5      	bne.n	800a746 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	3314      	adds	r3, #20
 800a780:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a782:	6a3b      	ldr	r3, [r7, #32]
 800a784:	e853 3f00 	ldrex	r3, [r3]
 800a788:	61fb      	str	r3, [r7, #28]
   return(result);
 800a78a:	69fb      	ldr	r3, [r7, #28]
 800a78c:	f023 0301 	bic.w	r3, r3, #1
 800a790:	64bb      	str	r3, [r7, #72]	; 0x48
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	3314      	adds	r3, #20
 800a798:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a79a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a79c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a79e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a7a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a7a2:	e841 2300 	strex	r3, r2, [r1]
 800a7a6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a7a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d1e5      	bne.n	800a77a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7b2:	2b01      	cmp	r3, #1
 800a7b4:	d119      	bne.n	800a7ea <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	330c      	adds	r3, #12
 800a7bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	e853 3f00 	ldrex	r3, [r3]
 800a7c4:	60bb      	str	r3, [r7, #8]
   return(result);
 800a7c6:	68bb      	ldr	r3, [r7, #8]
 800a7c8:	f023 0310 	bic.w	r3, r3, #16
 800a7cc:	647b      	str	r3, [r7, #68]	; 0x44
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	330c      	adds	r3, #12
 800a7d4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a7d6:	61ba      	str	r2, [r7, #24]
 800a7d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7da:	6979      	ldr	r1, [r7, #20]
 800a7dc:	69ba      	ldr	r2, [r7, #24]
 800a7de:	e841 2300 	strex	r3, r2, [r1]
 800a7e2:	613b      	str	r3, [r7, #16]
   return(result);
 800a7e4:	693b      	ldr	r3, [r7, #16]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d1e5      	bne.n	800a7b6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	2220      	movs	r2, #32
 800a7ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	2200      	movs	r2, #0
 800a7f6:	631a      	str	r2, [r3, #48]	; 0x30
}
 800a7f8:	bf00      	nop
 800a7fa:	3754      	adds	r7, #84	; 0x54
 800a7fc:	46bd      	mov	sp, r7
 800a7fe:	bc80      	pop	{r7}
 800a800:	4770      	bx	lr

0800a802 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a802:	b580      	push	{r7, lr}
 800a804:	b084      	sub	sp, #16
 800a806:	af00      	add	r7, sp, #0
 800a808:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a80e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	2200      	movs	r2, #0
 800a814:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	2200      	movs	r2, #0
 800a81a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a81c:	68f8      	ldr	r0, [r7, #12]
 800a81e:	f7ff fd58 	bl	800a2d2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a822:	bf00      	nop
 800a824:	3710      	adds	r7, #16
 800a826:	46bd      	mov	sp, r7
 800a828:	bd80      	pop	{r7, pc}

0800a82a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a82a:	b480      	push	{r7}
 800a82c:	b085      	sub	sp, #20
 800a82e:	af00      	add	r7, sp, #0
 800a830:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a838:	b2db      	uxtb	r3, r3
 800a83a:	2b21      	cmp	r3, #33	; 0x21
 800a83c:	d13e      	bne.n	800a8bc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	689b      	ldr	r3, [r3, #8]
 800a842:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a846:	d114      	bne.n	800a872 <UART_Transmit_IT+0x48>
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	691b      	ldr	r3, [r3, #16]
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d110      	bne.n	800a872 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	6a1b      	ldr	r3, [r3, #32]
 800a854:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	881b      	ldrh	r3, [r3, #0]
 800a85a:	461a      	mov	r2, r3
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a864:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	6a1b      	ldr	r3, [r3, #32]
 800a86a:	1c9a      	adds	r2, r3, #2
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	621a      	str	r2, [r3, #32]
 800a870:	e008      	b.n	800a884 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	6a1b      	ldr	r3, [r3, #32]
 800a876:	1c59      	adds	r1, r3, #1
 800a878:	687a      	ldr	r2, [r7, #4]
 800a87a:	6211      	str	r1, [r2, #32]
 800a87c:	781a      	ldrb	r2, [r3, #0]
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a888:	b29b      	uxth	r3, r3
 800a88a:	3b01      	subs	r3, #1
 800a88c:	b29b      	uxth	r3, r3
 800a88e:	687a      	ldr	r2, [r7, #4]
 800a890:	4619      	mov	r1, r3
 800a892:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a894:	2b00      	cmp	r3, #0
 800a896:	d10f      	bne.n	800a8b8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	68da      	ldr	r2, [r3, #12]
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a8a6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	68da      	ldr	r2, [r3, #12]
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a8b6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a8b8:	2300      	movs	r3, #0
 800a8ba:	e000      	b.n	800a8be <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a8bc:	2302      	movs	r3, #2
  }
}
 800a8be:	4618      	mov	r0, r3
 800a8c0:	3714      	adds	r7, #20
 800a8c2:	46bd      	mov	sp, r7
 800a8c4:	bc80      	pop	{r7}
 800a8c6:	4770      	bx	lr

0800a8c8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a8c8:	b580      	push	{r7, lr}
 800a8ca:	b082      	sub	sp, #8
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	68da      	ldr	r2, [r3, #12]
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a8de:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	2220      	movs	r2, #32
 800a8e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a8e8:	6878      	ldr	r0, [r7, #4]
 800a8ea:	f7ff fcd7 	bl	800a29c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a8ee:	2300      	movs	r3, #0
}
 800a8f0:	4618      	mov	r0, r3
 800a8f2:	3708      	adds	r7, #8
 800a8f4:	46bd      	mov	sp, r7
 800a8f6:	bd80      	pop	{r7, pc}

0800a8f8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a8f8:	b580      	push	{r7, lr}
 800a8fa:	b08c      	sub	sp, #48	; 0x30
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a906:	b2db      	uxtb	r3, r3
 800a908:	2b22      	cmp	r3, #34	; 0x22
 800a90a:	f040 80ae 	bne.w	800aa6a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	689b      	ldr	r3, [r3, #8]
 800a912:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a916:	d117      	bne.n	800a948 <UART_Receive_IT+0x50>
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	691b      	ldr	r3, [r3, #16]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d113      	bne.n	800a948 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a920:	2300      	movs	r3, #0
 800a922:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a928:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	685b      	ldr	r3, [r3, #4]
 800a930:	b29b      	uxth	r3, r3
 800a932:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a936:	b29a      	uxth	r2, r3
 800a938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a93a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a940:	1c9a      	adds	r2, r3, #2
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	629a      	str	r2, [r3, #40]	; 0x28
 800a946:	e026      	b.n	800a996 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a94c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800a94e:	2300      	movs	r3, #0
 800a950:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	689b      	ldr	r3, [r3, #8]
 800a956:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a95a:	d007      	beq.n	800a96c <UART_Receive_IT+0x74>
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	689b      	ldr	r3, [r3, #8]
 800a960:	2b00      	cmp	r3, #0
 800a962:	d10a      	bne.n	800a97a <UART_Receive_IT+0x82>
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	691b      	ldr	r3, [r3, #16]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d106      	bne.n	800a97a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	685b      	ldr	r3, [r3, #4]
 800a972:	b2da      	uxtb	r2, r3
 800a974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a976:	701a      	strb	r2, [r3, #0]
 800a978:	e008      	b.n	800a98c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	685b      	ldr	r3, [r3, #4]
 800a980:	b2db      	uxtb	r3, r3
 800a982:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a986:	b2da      	uxtb	r2, r3
 800a988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a98a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a990:	1c5a      	adds	r2, r3, #1
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a99a:	b29b      	uxth	r3, r3
 800a99c:	3b01      	subs	r3, #1
 800a99e:	b29b      	uxth	r3, r3
 800a9a0:	687a      	ldr	r2, [r7, #4]
 800a9a2:	4619      	mov	r1, r3
 800a9a4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d15d      	bne.n	800aa66 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	68da      	ldr	r2, [r3, #12]
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	f022 0220 	bic.w	r2, r2, #32
 800a9b8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	68da      	ldr	r2, [r3, #12]
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a9c8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	695a      	ldr	r2, [r3, #20]
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	f022 0201 	bic.w	r2, r2, #1
 800a9d8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	2220      	movs	r2, #32
 800a9de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	2200      	movs	r2, #0
 800a9e6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9ec:	2b01      	cmp	r3, #1
 800a9ee:	d135      	bne.n	800aa5c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	2200      	movs	r2, #0
 800a9f4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	330c      	adds	r3, #12
 800a9fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9fe:	697b      	ldr	r3, [r7, #20]
 800aa00:	e853 3f00 	ldrex	r3, [r3]
 800aa04:	613b      	str	r3, [r7, #16]
   return(result);
 800aa06:	693b      	ldr	r3, [r7, #16]
 800aa08:	f023 0310 	bic.w	r3, r3, #16
 800aa0c:	627b      	str	r3, [r7, #36]	; 0x24
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	330c      	adds	r3, #12
 800aa14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa16:	623a      	str	r2, [r7, #32]
 800aa18:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa1a:	69f9      	ldr	r1, [r7, #28]
 800aa1c:	6a3a      	ldr	r2, [r7, #32]
 800aa1e:	e841 2300 	strex	r3, r2, [r1]
 800aa22:	61bb      	str	r3, [r7, #24]
   return(result);
 800aa24:	69bb      	ldr	r3, [r7, #24]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d1e5      	bne.n	800a9f6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	f003 0310 	and.w	r3, r3, #16
 800aa34:	2b10      	cmp	r3, #16
 800aa36:	d10a      	bne.n	800aa4e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800aa38:	2300      	movs	r3, #0
 800aa3a:	60fb      	str	r3, [r7, #12]
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	60fb      	str	r3, [r7, #12]
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	685b      	ldr	r3, [r3, #4]
 800aa4a:	60fb      	str	r3, [r7, #12]
 800aa4c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800aa52:	4619      	mov	r1, r3
 800aa54:	6878      	ldr	r0, [r7, #4]
 800aa56:	f7fa f98b 	bl	8004d70 <HAL_UARTEx_RxEventCallback>
 800aa5a:	e002      	b.n	800aa62 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800aa5c:	6878      	ldr	r0, [r7, #4]
 800aa5e:	f7ff fc26 	bl	800a2ae <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800aa62:	2300      	movs	r3, #0
 800aa64:	e002      	b.n	800aa6c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800aa66:	2300      	movs	r3, #0
 800aa68:	e000      	b.n	800aa6c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800aa6a:	2302      	movs	r3, #2
  }
}
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	3730      	adds	r7, #48	; 0x30
 800aa70:	46bd      	mov	sp, r7
 800aa72:	bd80      	pop	{r7, pc}

0800aa74 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800aa74:	b580      	push	{r7, lr}
 800aa76:	b084      	sub	sp, #16
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	691b      	ldr	r3, [r3, #16]
 800aa82:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	68da      	ldr	r2, [r3, #12]
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	430a      	orrs	r2, r1
 800aa90:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	689a      	ldr	r2, [r3, #8]
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	691b      	ldr	r3, [r3, #16]
 800aa9a:	431a      	orrs	r2, r3
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	695b      	ldr	r3, [r3, #20]
 800aaa0:	4313      	orrs	r3, r2
 800aaa2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	68db      	ldr	r3, [r3, #12]
 800aaaa:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800aaae:	f023 030c 	bic.w	r3, r3, #12
 800aab2:	687a      	ldr	r2, [r7, #4]
 800aab4:	6812      	ldr	r2, [r2, #0]
 800aab6:	68b9      	ldr	r1, [r7, #8]
 800aab8:	430b      	orrs	r3, r1
 800aaba:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	695b      	ldr	r3, [r3, #20]
 800aac2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	699a      	ldr	r2, [r3, #24]
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	430a      	orrs	r2, r1
 800aad0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	4a2c      	ldr	r2, [pc, #176]	; (800ab88 <UART_SetConfig+0x114>)
 800aad8:	4293      	cmp	r3, r2
 800aada:	d103      	bne.n	800aae4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800aadc:	f7fe fcc8 	bl	8009470 <HAL_RCC_GetPCLK2Freq>
 800aae0:	60f8      	str	r0, [r7, #12]
 800aae2:	e002      	b.n	800aaea <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800aae4:	f7fe fcb0 	bl	8009448 <HAL_RCC_GetPCLK1Freq>
 800aae8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800aaea:	68fa      	ldr	r2, [r7, #12]
 800aaec:	4613      	mov	r3, r2
 800aaee:	009b      	lsls	r3, r3, #2
 800aaf0:	4413      	add	r3, r2
 800aaf2:	009a      	lsls	r2, r3, #2
 800aaf4:	441a      	add	r2, r3
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	685b      	ldr	r3, [r3, #4]
 800aafa:	009b      	lsls	r3, r3, #2
 800aafc:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab00:	4a22      	ldr	r2, [pc, #136]	; (800ab8c <UART_SetConfig+0x118>)
 800ab02:	fba2 2303 	umull	r2, r3, r2, r3
 800ab06:	095b      	lsrs	r3, r3, #5
 800ab08:	0119      	lsls	r1, r3, #4
 800ab0a:	68fa      	ldr	r2, [r7, #12]
 800ab0c:	4613      	mov	r3, r2
 800ab0e:	009b      	lsls	r3, r3, #2
 800ab10:	4413      	add	r3, r2
 800ab12:	009a      	lsls	r2, r3, #2
 800ab14:	441a      	add	r2, r3
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	685b      	ldr	r3, [r3, #4]
 800ab1a:	009b      	lsls	r3, r3, #2
 800ab1c:	fbb2 f2f3 	udiv	r2, r2, r3
 800ab20:	4b1a      	ldr	r3, [pc, #104]	; (800ab8c <UART_SetConfig+0x118>)
 800ab22:	fba3 0302 	umull	r0, r3, r3, r2
 800ab26:	095b      	lsrs	r3, r3, #5
 800ab28:	2064      	movs	r0, #100	; 0x64
 800ab2a:	fb00 f303 	mul.w	r3, r0, r3
 800ab2e:	1ad3      	subs	r3, r2, r3
 800ab30:	011b      	lsls	r3, r3, #4
 800ab32:	3332      	adds	r3, #50	; 0x32
 800ab34:	4a15      	ldr	r2, [pc, #84]	; (800ab8c <UART_SetConfig+0x118>)
 800ab36:	fba2 2303 	umull	r2, r3, r2, r3
 800ab3a:	095b      	lsrs	r3, r3, #5
 800ab3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ab40:	4419      	add	r1, r3
 800ab42:	68fa      	ldr	r2, [r7, #12]
 800ab44:	4613      	mov	r3, r2
 800ab46:	009b      	lsls	r3, r3, #2
 800ab48:	4413      	add	r3, r2
 800ab4a:	009a      	lsls	r2, r3, #2
 800ab4c:	441a      	add	r2, r3
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	685b      	ldr	r3, [r3, #4]
 800ab52:	009b      	lsls	r3, r3, #2
 800ab54:	fbb2 f2f3 	udiv	r2, r2, r3
 800ab58:	4b0c      	ldr	r3, [pc, #48]	; (800ab8c <UART_SetConfig+0x118>)
 800ab5a:	fba3 0302 	umull	r0, r3, r3, r2
 800ab5e:	095b      	lsrs	r3, r3, #5
 800ab60:	2064      	movs	r0, #100	; 0x64
 800ab62:	fb00 f303 	mul.w	r3, r0, r3
 800ab66:	1ad3      	subs	r3, r2, r3
 800ab68:	011b      	lsls	r3, r3, #4
 800ab6a:	3332      	adds	r3, #50	; 0x32
 800ab6c:	4a07      	ldr	r2, [pc, #28]	; (800ab8c <UART_SetConfig+0x118>)
 800ab6e:	fba2 2303 	umull	r2, r3, r2, r3
 800ab72:	095b      	lsrs	r3, r3, #5
 800ab74:	f003 020f 	and.w	r2, r3, #15
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	440a      	add	r2, r1
 800ab7e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800ab80:	bf00      	nop
 800ab82:	3710      	adds	r7, #16
 800ab84:	46bd      	mov	sp, r7
 800ab86:	bd80      	pop	{r7, pc}
 800ab88:	40013800 	.word	0x40013800
 800ab8c:	51eb851f 	.word	0x51eb851f

0800ab90 <atoi>:
 800ab90:	220a      	movs	r2, #10
 800ab92:	2100      	movs	r1, #0
 800ab94:	f000 bdaa 	b.w	800b6ec <strtol>

0800ab98 <__errno>:
 800ab98:	4b01      	ldr	r3, [pc, #4]	; (800aba0 <__errno+0x8>)
 800ab9a:	6818      	ldr	r0, [r3, #0]
 800ab9c:	4770      	bx	lr
 800ab9e:	bf00      	nop
 800aba0:	200004e8 	.word	0x200004e8

0800aba4 <__libc_init_array>:
 800aba4:	b570      	push	{r4, r5, r6, lr}
 800aba6:	2600      	movs	r6, #0
 800aba8:	4d0c      	ldr	r5, [pc, #48]	; (800abdc <__libc_init_array+0x38>)
 800abaa:	4c0d      	ldr	r4, [pc, #52]	; (800abe0 <__libc_init_array+0x3c>)
 800abac:	1b64      	subs	r4, r4, r5
 800abae:	10a4      	asrs	r4, r4, #2
 800abb0:	42a6      	cmp	r6, r4
 800abb2:	d109      	bne.n	800abc8 <__libc_init_array+0x24>
 800abb4:	f002 fe12 	bl	800d7dc <_init>
 800abb8:	2600      	movs	r6, #0
 800abba:	4d0a      	ldr	r5, [pc, #40]	; (800abe4 <__libc_init_array+0x40>)
 800abbc:	4c0a      	ldr	r4, [pc, #40]	; (800abe8 <__libc_init_array+0x44>)
 800abbe:	1b64      	subs	r4, r4, r5
 800abc0:	10a4      	asrs	r4, r4, #2
 800abc2:	42a6      	cmp	r6, r4
 800abc4:	d105      	bne.n	800abd2 <__libc_init_array+0x2e>
 800abc6:	bd70      	pop	{r4, r5, r6, pc}
 800abc8:	f855 3b04 	ldr.w	r3, [r5], #4
 800abcc:	4798      	blx	r3
 800abce:	3601      	adds	r6, #1
 800abd0:	e7ee      	b.n	800abb0 <__libc_init_array+0xc>
 800abd2:	f855 3b04 	ldr.w	r3, [r5], #4
 800abd6:	4798      	blx	r3
 800abd8:	3601      	adds	r6, #1
 800abda:	e7f2      	b.n	800abc2 <__libc_init_array+0x1e>
 800abdc:	0800e778 	.word	0x0800e778
 800abe0:	0800e778 	.word	0x0800e778
 800abe4:	0800e778 	.word	0x0800e778
 800abe8:	0800e77c 	.word	0x0800e77c

0800abec <localtime>:
 800abec:	b538      	push	{r3, r4, r5, lr}
 800abee:	4b0b      	ldr	r3, [pc, #44]	; (800ac1c <localtime+0x30>)
 800abf0:	4604      	mov	r4, r0
 800abf2:	681d      	ldr	r5, [r3, #0]
 800abf4:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800abf6:	b953      	cbnz	r3, 800ac0e <localtime+0x22>
 800abf8:	2024      	movs	r0, #36	; 0x24
 800abfa:	f000 f907 	bl	800ae0c <malloc>
 800abfe:	4602      	mov	r2, r0
 800ac00:	63e8      	str	r0, [r5, #60]	; 0x3c
 800ac02:	b920      	cbnz	r0, 800ac0e <localtime+0x22>
 800ac04:	2132      	movs	r1, #50	; 0x32
 800ac06:	4b06      	ldr	r3, [pc, #24]	; (800ac20 <localtime+0x34>)
 800ac08:	4806      	ldr	r0, [pc, #24]	; (800ac24 <localtime+0x38>)
 800ac0a:	f000 ffb7 	bl	800bb7c <__assert_func>
 800ac0e:	4620      	mov	r0, r4
 800ac10:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 800ac12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ac16:	f000 b807 	b.w	800ac28 <localtime_r>
 800ac1a:	bf00      	nop
 800ac1c:	200004e8 	.word	0x200004e8
 800ac20:	0800e3b8 	.word	0x0800e3b8
 800ac24:	0800e3cf 	.word	0x0800e3cf

0800ac28 <localtime_r>:
 800ac28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac2c:	460c      	mov	r4, r1
 800ac2e:	4680      	mov	r8, r0
 800ac30:	f001 f82c 	bl	800bc8c <__gettzinfo>
 800ac34:	4621      	mov	r1, r4
 800ac36:	4605      	mov	r5, r0
 800ac38:	4640      	mov	r0, r8
 800ac3a:	f001 f82b 	bl	800bc94 <gmtime_r>
 800ac3e:	6943      	ldr	r3, [r0, #20]
 800ac40:	4604      	mov	r4, r0
 800ac42:	0799      	lsls	r1, r3, #30
 800ac44:	f203 776c 	addw	r7, r3, #1900	; 0x76c
 800ac48:	d105      	bne.n	800ac56 <localtime_r+0x2e>
 800ac4a:	2264      	movs	r2, #100	; 0x64
 800ac4c:	fb97 f3f2 	sdiv	r3, r7, r2
 800ac50:	fb02 7313 	mls	r3, r2, r3, r7
 800ac54:	bb73      	cbnz	r3, 800acb4 <localtime_r+0x8c>
 800ac56:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800ac5a:	fb97 f6f3 	sdiv	r6, r7, r3
 800ac5e:	fb03 7616 	mls	r6, r3, r6, r7
 800ac62:	fab6 f386 	clz	r3, r6
 800ac66:	095b      	lsrs	r3, r3, #5
 800ac68:	2230      	movs	r2, #48	; 0x30
 800ac6a:	4e66      	ldr	r6, [pc, #408]	; (800ae04 <localtime_r+0x1dc>)
 800ac6c:	fb02 6603 	mla	r6, r2, r3, r6
 800ac70:	f000 fdf0 	bl	800b854 <__tz_lock>
 800ac74:	f000 fdfa 	bl	800b86c <_tzset_unlocked>
 800ac78:	4b63      	ldr	r3, [pc, #396]	; (800ae08 <localtime_r+0x1e0>)
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	b34b      	cbz	r3, 800acd2 <localtime_r+0xaa>
 800ac7e:	686b      	ldr	r3, [r5, #4]
 800ac80:	42bb      	cmp	r3, r7
 800ac82:	d119      	bne.n	800acb8 <localtime_r+0x90>
 800ac84:	e9d8 2300 	ldrd	r2, r3, [r8]
 800ac88:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 800ac8c:	682f      	ldr	r7, [r5, #0]
 800ac8e:	b9df      	cbnz	r7, 800acc8 <localtime_r+0xa0>
 800ac90:	4282      	cmp	r2, r0
 800ac92:	eb73 0101 	sbcs.w	r1, r3, r1
 800ac96:	da23      	bge.n	800ace0 <localtime_r+0xb8>
 800ac98:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
 800ac9c:	4282      	cmp	r2, r0
 800ac9e:	eb73 0701 	sbcs.w	r7, r3, r1
 800aca2:	bfb4      	ite	lt
 800aca4:	2701      	movlt	r7, #1
 800aca6:	2700      	movge	r7, #0
 800aca8:	4282      	cmp	r2, r0
 800acaa:	418b      	sbcs	r3, r1
 800acac:	6227      	str	r7, [r4, #32]
 800acae:	db19      	blt.n	800ace4 <localtime_r+0xbc>
 800acb0:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800acb2:	e018      	b.n	800ace6 <localtime_r+0xbe>
 800acb4:	2301      	movs	r3, #1
 800acb6:	e7d7      	b.n	800ac68 <localtime_r+0x40>
 800acb8:	4638      	mov	r0, r7
 800acba:	f000 fd21 	bl	800b700 <__tzcalc_limits>
 800acbe:	2800      	cmp	r0, #0
 800acc0:	d1e0      	bne.n	800ac84 <localtime_r+0x5c>
 800acc2:	f04f 33ff 	mov.w	r3, #4294967295
 800acc6:	e004      	b.n	800acd2 <localtime_r+0xaa>
 800acc8:	4282      	cmp	r2, r0
 800acca:	eb73 0101 	sbcs.w	r1, r3, r1
 800acce:	da02      	bge.n	800acd6 <localtime_r+0xae>
 800acd0:	2300      	movs	r3, #0
 800acd2:	6223      	str	r3, [r4, #32]
 800acd4:	e7ec      	b.n	800acb0 <localtime_r+0x88>
 800acd6:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
 800acda:	4282      	cmp	r2, r0
 800acdc:	418b      	sbcs	r3, r1
 800acde:	daf7      	bge.n	800acd0 <localtime_r+0xa8>
 800ace0:	2301      	movs	r3, #1
 800ace2:	6223      	str	r3, [r4, #32]
 800ace4:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800ace6:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 800acea:	fb93 f5f2 	sdiv	r5, r3, r2
 800acee:	203c      	movs	r0, #60	; 0x3c
 800acf0:	fb02 3315 	mls	r3, r2, r5, r3
 800acf4:	fb93 f2f0 	sdiv	r2, r3, r0
 800acf8:	fb00 3012 	mls	r0, r0, r2, r3
 800acfc:	6861      	ldr	r1, [r4, #4]
 800acfe:	6823      	ldr	r3, [r4, #0]
 800ad00:	1a89      	subs	r1, r1, r2
 800ad02:	68a2      	ldr	r2, [r4, #8]
 800ad04:	1a1b      	subs	r3, r3, r0
 800ad06:	1b52      	subs	r2, r2, r5
 800ad08:	2b3b      	cmp	r3, #59	; 0x3b
 800ad0a:	6023      	str	r3, [r4, #0]
 800ad0c:	6061      	str	r1, [r4, #4]
 800ad0e:	60a2      	str	r2, [r4, #8]
 800ad10:	dd34      	ble.n	800ad7c <localtime_r+0x154>
 800ad12:	3101      	adds	r1, #1
 800ad14:	6061      	str	r1, [r4, #4]
 800ad16:	3b3c      	subs	r3, #60	; 0x3c
 800ad18:	6023      	str	r3, [r4, #0]
 800ad1a:	6863      	ldr	r3, [r4, #4]
 800ad1c:	2b3b      	cmp	r3, #59	; 0x3b
 800ad1e:	dd33      	ble.n	800ad88 <localtime_r+0x160>
 800ad20:	3201      	adds	r2, #1
 800ad22:	60a2      	str	r2, [r4, #8]
 800ad24:	3b3c      	subs	r3, #60	; 0x3c
 800ad26:	6063      	str	r3, [r4, #4]
 800ad28:	68a3      	ldr	r3, [r4, #8]
 800ad2a:	2b17      	cmp	r3, #23
 800ad2c:	dd32      	ble.n	800ad94 <localtime_r+0x16c>
 800ad2e:	69e2      	ldr	r2, [r4, #28]
 800ad30:	3b18      	subs	r3, #24
 800ad32:	3201      	adds	r2, #1
 800ad34:	61e2      	str	r2, [r4, #28]
 800ad36:	69a2      	ldr	r2, [r4, #24]
 800ad38:	60a3      	str	r3, [r4, #8]
 800ad3a:	3201      	adds	r2, #1
 800ad3c:	2a06      	cmp	r2, #6
 800ad3e:	bfc8      	it	gt
 800ad40:	2200      	movgt	r2, #0
 800ad42:	61a2      	str	r2, [r4, #24]
 800ad44:	68e2      	ldr	r2, [r4, #12]
 800ad46:	6923      	ldr	r3, [r4, #16]
 800ad48:	3201      	adds	r2, #1
 800ad4a:	60e2      	str	r2, [r4, #12]
 800ad4c:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 800ad50:	428a      	cmp	r2, r1
 800ad52:	dd0e      	ble.n	800ad72 <localtime_r+0x14a>
 800ad54:	2b0b      	cmp	r3, #11
 800ad56:	eba2 0201 	sub.w	r2, r2, r1
 800ad5a:	60e2      	str	r2, [r4, #12]
 800ad5c:	f103 0201 	add.w	r2, r3, #1
 800ad60:	bf05      	ittet	eq
 800ad62:	2200      	moveq	r2, #0
 800ad64:	6963      	ldreq	r3, [r4, #20]
 800ad66:	6122      	strne	r2, [r4, #16]
 800ad68:	3301      	addeq	r3, #1
 800ad6a:	bf02      	ittt	eq
 800ad6c:	6122      	streq	r2, [r4, #16]
 800ad6e:	6163      	streq	r3, [r4, #20]
 800ad70:	61e2      	streq	r2, [r4, #28]
 800ad72:	f000 fd75 	bl	800b860 <__tz_unlock>
 800ad76:	4620      	mov	r0, r4
 800ad78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	dacc      	bge.n	800ad1a <localtime_r+0xf2>
 800ad80:	3901      	subs	r1, #1
 800ad82:	6061      	str	r1, [r4, #4]
 800ad84:	333c      	adds	r3, #60	; 0x3c
 800ad86:	e7c7      	b.n	800ad18 <localtime_r+0xf0>
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	dacd      	bge.n	800ad28 <localtime_r+0x100>
 800ad8c:	3a01      	subs	r2, #1
 800ad8e:	60a2      	str	r2, [r4, #8]
 800ad90:	333c      	adds	r3, #60	; 0x3c
 800ad92:	e7c8      	b.n	800ad26 <localtime_r+0xfe>
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	daec      	bge.n	800ad72 <localtime_r+0x14a>
 800ad98:	69e2      	ldr	r2, [r4, #28]
 800ad9a:	3318      	adds	r3, #24
 800ad9c:	3a01      	subs	r2, #1
 800ad9e:	61e2      	str	r2, [r4, #28]
 800ada0:	69a2      	ldr	r2, [r4, #24]
 800ada2:	60a3      	str	r3, [r4, #8]
 800ada4:	3a01      	subs	r2, #1
 800ada6:	bf48      	it	mi
 800ada8:	2206      	movmi	r2, #6
 800adaa:	61a2      	str	r2, [r4, #24]
 800adac:	68e2      	ldr	r2, [r4, #12]
 800adae:	3a01      	subs	r2, #1
 800adb0:	60e2      	str	r2, [r4, #12]
 800adb2:	2a00      	cmp	r2, #0
 800adb4:	d1dd      	bne.n	800ad72 <localtime_r+0x14a>
 800adb6:	6923      	ldr	r3, [r4, #16]
 800adb8:	3b01      	subs	r3, #1
 800adba:	d405      	bmi.n	800adc8 <localtime_r+0x1a0>
 800adbc:	6123      	str	r3, [r4, #16]
 800adbe:	6923      	ldr	r3, [r4, #16]
 800adc0:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 800adc4:	60e3      	str	r3, [r4, #12]
 800adc6:	e7d4      	b.n	800ad72 <localtime_r+0x14a>
 800adc8:	230b      	movs	r3, #11
 800adca:	6123      	str	r3, [r4, #16]
 800adcc:	6963      	ldr	r3, [r4, #20]
 800adce:	1e5a      	subs	r2, r3, #1
 800add0:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 800add4:	6162      	str	r2, [r4, #20]
 800add6:	079a      	lsls	r2, r3, #30
 800add8:	d105      	bne.n	800ade6 <localtime_r+0x1be>
 800adda:	2164      	movs	r1, #100	; 0x64
 800addc:	fb93 f2f1 	sdiv	r2, r3, r1
 800ade0:	fb01 3212 	mls	r2, r1, r2, r3
 800ade4:	b962      	cbnz	r2, 800ae00 <localtime_r+0x1d8>
 800ade6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800adea:	fb93 f1f2 	sdiv	r1, r3, r2
 800adee:	fb02 3311 	mls	r3, r2, r1, r3
 800adf2:	fab3 f383 	clz	r3, r3
 800adf6:	095b      	lsrs	r3, r3, #5
 800adf8:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 800adfc:	61e3      	str	r3, [r4, #28]
 800adfe:	e7de      	b.n	800adbe <localtime_r+0x196>
 800ae00:	2301      	movs	r3, #1
 800ae02:	e7f9      	b.n	800adf8 <localtime_r+0x1d0>
 800ae04:	0800e48c 	.word	0x0800e48c
 800ae08:	20003774 	.word	0x20003774

0800ae0c <malloc>:
 800ae0c:	4b02      	ldr	r3, [pc, #8]	; (800ae18 <malloc+0xc>)
 800ae0e:	4601      	mov	r1, r0
 800ae10:	6818      	ldr	r0, [r3, #0]
 800ae12:	f000 bb0b 	b.w	800b42c <_malloc_r>
 800ae16:	bf00      	nop
 800ae18:	200004e8 	.word	0x200004e8

0800ae1c <free>:
 800ae1c:	4b02      	ldr	r3, [pc, #8]	; (800ae28 <free+0xc>)
 800ae1e:	4601      	mov	r1, r0
 800ae20:	6818      	ldr	r0, [r3, #0]
 800ae22:	f000 ba9b 	b.w	800b35c <_free_r>
 800ae26:	bf00      	nop
 800ae28:	200004e8 	.word	0x200004e8

0800ae2c <memcmp>:
 800ae2c:	b510      	push	{r4, lr}
 800ae2e:	3901      	subs	r1, #1
 800ae30:	4402      	add	r2, r0
 800ae32:	4290      	cmp	r0, r2
 800ae34:	d101      	bne.n	800ae3a <memcmp+0xe>
 800ae36:	2000      	movs	r0, #0
 800ae38:	e005      	b.n	800ae46 <memcmp+0x1a>
 800ae3a:	7803      	ldrb	r3, [r0, #0]
 800ae3c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800ae40:	42a3      	cmp	r3, r4
 800ae42:	d001      	beq.n	800ae48 <memcmp+0x1c>
 800ae44:	1b18      	subs	r0, r3, r4
 800ae46:	bd10      	pop	{r4, pc}
 800ae48:	3001      	adds	r0, #1
 800ae4a:	e7f2      	b.n	800ae32 <memcmp+0x6>

0800ae4c <memcpy>:
 800ae4c:	440a      	add	r2, r1
 800ae4e:	4291      	cmp	r1, r2
 800ae50:	f100 33ff 	add.w	r3, r0, #4294967295
 800ae54:	d100      	bne.n	800ae58 <memcpy+0xc>
 800ae56:	4770      	bx	lr
 800ae58:	b510      	push	{r4, lr}
 800ae5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ae5e:	4291      	cmp	r1, r2
 800ae60:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ae64:	d1f9      	bne.n	800ae5a <memcpy+0xe>
 800ae66:	bd10      	pop	{r4, pc}

0800ae68 <memset>:
 800ae68:	4603      	mov	r3, r0
 800ae6a:	4402      	add	r2, r0
 800ae6c:	4293      	cmp	r3, r2
 800ae6e:	d100      	bne.n	800ae72 <memset+0xa>
 800ae70:	4770      	bx	lr
 800ae72:	f803 1b01 	strb.w	r1, [r3], #1
 800ae76:	e7f9      	b.n	800ae6c <memset+0x4>

0800ae78 <validate_structure>:
 800ae78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ae7a:	6801      	ldr	r1, [r0, #0]
 800ae7c:	4604      	mov	r4, r0
 800ae7e:	293b      	cmp	r1, #59	; 0x3b
 800ae80:	d911      	bls.n	800aea6 <validate_structure+0x2e>
 800ae82:	223c      	movs	r2, #60	; 0x3c
 800ae84:	4668      	mov	r0, sp
 800ae86:	f000 fe97 	bl	800bbb8 <div>
 800ae8a:	9a01      	ldr	r2, [sp, #4]
 800ae8c:	6863      	ldr	r3, [r4, #4]
 800ae8e:	9900      	ldr	r1, [sp, #0]
 800ae90:	2a00      	cmp	r2, #0
 800ae92:	440b      	add	r3, r1
 800ae94:	6063      	str	r3, [r4, #4]
 800ae96:	bfbb      	ittet	lt
 800ae98:	323c      	addlt	r2, #60	; 0x3c
 800ae9a:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800ae9e:	6022      	strge	r2, [r4, #0]
 800aea0:	6022      	strlt	r2, [r4, #0]
 800aea2:	bfb8      	it	lt
 800aea4:	6063      	strlt	r3, [r4, #4]
 800aea6:	6861      	ldr	r1, [r4, #4]
 800aea8:	293b      	cmp	r1, #59	; 0x3b
 800aeaa:	d911      	bls.n	800aed0 <validate_structure+0x58>
 800aeac:	223c      	movs	r2, #60	; 0x3c
 800aeae:	4668      	mov	r0, sp
 800aeb0:	f000 fe82 	bl	800bbb8 <div>
 800aeb4:	9a01      	ldr	r2, [sp, #4]
 800aeb6:	68a3      	ldr	r3, [r4, #8]
 800aeb8:	9900      	ldr	r1, [sp, #0]
 800aeba:	2a00      	cmp	r2, #0
 800aebc:	440b      	add	r3, r1
 800aebe:	60a3      	str	r3, [r4, #8]
 800aec0:	bfbb      	ittet	lt
 800aec2:	323c      	addlt	r2, #60	; 0x3c
 800aec4:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800aec8:	6062      	strge	r2, [r4, #4]
 800aeca:	6062      	strlt	r2, [r4, #4]
 800aecc:	bfb8      	it	lt
 800aece:	60a3      	strlt	r3, [r4, #8]
 800aed0:	68a1      	ldr	r1, [r4, #8]
 800aed2:	2917      	cmp	r1, #23
 800aed4:	d911      	bls.n	800aefa <validate_structure+0x82>
 800aed6:	2218      	movs	r2, #24
 800aed8:	4668      	mov	r0, sp
 800aeda:	f000 fe6d 	bl	800bbb8 <div>
 800aede:	9a01      	ldr	r2, [sp, #4]
 800aee0:	68e3      	ldr	r3, [r4, #12]
 800aee2:	9900      	ldr	r1, [sp, #0]
 800aee4:	2a00      	cmp	r2, #0
 800aee6:	440b      	add	r3, r1
 800aee8:	60e3      	str	r3, [r4, #12]
 800aeea:	bfbb      	ittet	lt
 800aeec:	3218      	addlt	r2, #24
 800aeee:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800aef2:	60a2      	strge	r2, [r4, #8]
 800aef4:	60a2      	strlt	r2, [r4, #8]
 800aef6:	bfb8      	it	lt
 800aef8:	60e3      	strlt	r3, [r4, #12]
 800aefa:	6921      	ldr	r1, [r4, #16]
 800aefc:	290b      	cmp	r1, #11
 800aefe:	d911      	bls.n	800af24 <validate_structure+0xac>
 800af00:	220c      	movs	r2, #12
 800af02:	4668      	mov	r0, sp
 800af04:	f000 fe58 	bl	800bbb8 <div>
 800af08:	9a01      	ldr	r2, [sp, #4]
 800af0a:	6963      	ldr	r3, [r4, #20]
 800af0c:	9900      	ldr	r1, [sp, #0]
 800af0e:	2a00      	cmp	r2, #0
 800af10:	440b      	add	r3, r1
 800af12:	6163      	str	r3, [r4, #20]
 800af14:	bfbb      	ittet	lt
 800af16:	320c      	addlt	r2, #12
 800af18:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800af1c:	6122      	strge	r2, [r4, #16]
 800af1e:	6122      	strlt	r2, [r4, #16]
 800af20:	bfb8      	it	lt
 800af22:	6163      	strlt	r3, [r4, #20]
 800af24:	6963      	ldr	r3, [r4, #20]
 800af26:	0798      	lsls	r0, r3, #30
 800af28:	d120      	bne.n	800af6c <validate_structure+0xf4>
 800af2a:	2164      	movs	r1, #100	; 0x64
 800af2c:	fb93 f2f1 	sdiv	r2, r3, r1
 800af30:	fb01 3212 	mls	r2, r1, r2, r3
 800af34:	b9e2      	cbnz	r2, 800af70 <validate_structure+0xf8>
 800af36:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800af3a:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 800af3e:	fb93 f1f2 	sdiv	r1, r3, r2
 800af42:	fb02 3311 	mls	r3, r2, r1, r3
 800af46:	2b00      	cmp	r3, #0
 800af48:	bf14      	ite	ne
 800af4a:	231c      	movne	r3, #28
 800af4c:	231d      	moveq	r3, #29
 800af4e:	68e2      	ldr	r2, [r4, #12]
 800af50:	2a00      	cmp	r2, #0
 800af52:	dc0f      	bgt.n	800af74 <validate_structure+0xfc>
 800af54:	260b      	movs	r6, #11
 800af56:	2064      	movs	r0, #100	; 0x64
 800af58:	f44f 75c8 	mov.w	r5, #400	; 0x190
 800af5c:	4f31      	ldr	r7, [pc, #196]	; (800b024 <validate_structure+0x1ac>)
 800af5e:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 800af62:	f1bc 0f00 	cmp.w	ip, #0
 800af66:	dd31      	ble.n	800afcc <validate_structure+0x154>
 800af68:	b003      	add	sp, #12
 800af6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af6c:	231c      	movs	r3, #28
 800af6e:	e7ee      	b.n	800af4e <validate_structure+0xd6>
 800af70:	231d      	movs	r3, #29
 800af72:	e7ec      	b.n	800af4e <validate_structure+0xd6>
 800af74:	2700      	movs	r7, #0
 800af76:	2064      	movs	r0, #100	; 0x64
 800af78:	f44f 75c8 	mov.w	r5, #400	; 0x190
 800af7c:	4e29      	ldr	r6, [pc, #164]	; (800b024 <validate_structure+0x1ac>)
 800af7e:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 800af82:	2a01      	cmp	r2, #1
 800af84:	bf0c      	ite	eq
 800af86:	469c      	moveq	ip, r3
 800af88:	f856 c022 	ldrne.w	ip, [r6, r2, lsl #2]
 800af8c:	4561      	cmp	r1, ip
 800af8e:	ddeb      	ble.n	800af68 <validate_structure+0xf0>
 800af90:	3201      	adds	r2, #1
 800af92:	eba1 010c 	sub.w	r1, r1, ip
 800af96:	2a0c      	cmp	r2, #12
 800af98:	60e1      	str	r1, [r4, #12]
 800af9a:	6122      	str	r2, [r4, #16]
 800af9c:	d1ef      	bne.n	800af7e <validate_structure+0x106>
 800af9e:	6963      	ldr	r3, [r4, #20]
 800afa0:	1c5a      	adds	r2, r3, #1
 800afa2:	0791      	lsls	r1, r2, #30
 800afa4:	e9c4 7204 	strd	r7, r2, [r4, #16]
 800afa8:	d137      	bne.n	800b01a <validate_structure+0x1a2>
 800afaa:	fb92 f1f0 	sdiv	r1, r2, r0
 800afae:	fb00 2211 	mls	r2, r0, r1, r2
 800afb2:	2a00      	cmp	r2, #0
 800afb4:	d133      	bne.n	800b01e <validate_structure+0x1a6>
 800afb6:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 800afba:	fb93 f2f5 	sdiv	r2, r3, r5
 800afbe:	fb05 3312 	mls	r3, r5, r2, r3
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	bf14      	ite	ne
 800afc6:	231c      	movne	r3, #28
 800afc8:	231d      	moveq	r3, #29
 800afca:	e7d8      	b.n	800af7e <validate_structure+0x106>
 800afcc:	6921      	ldr	r1, [r4, #16]
 800afce:	3901      	subs	r1, #1
 800afd0:	6121      	str	r1, [r4, #16]
 800afd2:	3101      	adds	r1, #1
 800afd4:	d114      	bne.n	800b000 <validate_structure+0x188>
 800afd6:	6963      	ldr	r3, [r4, #20]
 800afd8:	1e5a      	subs	r2, r3, #1
 800afda:	0791      	lsls	r1, r2, #30
 800afdc:	e9c4 6204 	strd	r6, r2, [r4, #16]
 800afe0:	d117      	bne.n	800b012 <validate_structure+0x19a>
 800afe2:	fb92 f1f0 	sdiv	r1, r2, r0
 800afe6:	fb00 2211 	mls	r2, r0, r1, r2
 800afea:	b9a2      	cbnz	r2, 800b016 <validate_structure+0x19e>
 800afec:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 800aff0:	fb93 f2f5 	sdiv	r2, r3, r5
 800aff4:	fb05 3312 	mls	r3, r5, r2, r3
 800aff8:	2b00      	cmp	r3, #0
 800affa:	bf14      	ite	ne
 800affc:	231c      	movne	r3, #28
 800affe:	231d      	moveq	r3, #29
 800b000:	6922      	ldr	r2, [r4, #16]
 800b002:	2a01      	cmp	r2, #1
 800b004:	bf0c      	ite	eq
 800b006:	461a      	moveq	r2, r3
 800b008:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 800b00c:	4462      	add	r2, ip
 800b00e:	60e2      	str	r2, [r4, #12]
 800b010:	e7a5      	b.n	800af5e <validate_structure+0xe6>
 800b012:	231c      	movs	r3, #28
 800b014:	e7f4      	b.n	800b000 <validate_structure+0x188>
 800b016:	231d      	movs	r3, #29
 800b018:	e7f2      	b.n	800b000 <validate_structure+0x188>
 800b01a:	231c      	movs	r3, #28
 800b01c:	e7af      	b.n	800af7e <validate_structure+0x106>
 800b01e:	231d      	movs	r3, #29
 800b020:	e7ad      	b.n	800af7e <validate_structure+0x106>
 800b022:	bf00      	nop
 800b024:	0800e42c 	.word	0x0800e42c

0800b028 <mktime>:
 800b028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b02c:	b085      	sub	sp, #20
 800b02e:	4607      	mov	r7, r0
 800b030:	f000 fe2c 	bl	800bc8c <__gettzinfo>
 800b034:	4681      	mov	r9, r0
 800b036:	4638      	mov	r0, r7
 800b038:	f7ff ff1e 	bl	800ae78 <validate_structure>
 800b03c:	e9d7 4000 	ldrd	r4, r0, [r7]
 800b040:	233c      	movs	r3, #60	; 0x3c
 800b042:	fb03 4400 	mla	r4, r3, r0, r4
 800b046:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800b04a:	68b8      	ldr	r0, [r7, #8]
 800b04c:	4abc      	ldr	r2, [pc, #752]	; (800b340 <mktime+0x318>)
 800b04e:	fb03 4400 	mla	r4, r3, r0, r4
 800b052:	e9d7 5303 	ldrd	r5, r3, [r7, #12]
 800b056:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800b05a:	3d01      	subs	r5, #1
 800b05c:	2b01      	cmp	r3, #1
 800b05e:	697e      	ldr	r6, [r7, #20]
 800b060:	4415      	add	r5, r2
 800b062:	dd11      	ble.n	800b088 <mktime+0x60>
 800b064:	07b1      	lsls	r1, r6, #30
 800b066:	d10f      	bne.n	800b088 <mktime+0x60>
 800b068:	2264      	movs	r2, #100	; 0x64
 800b06a:	fb96 f3f2 	sdiv	r3, r6, r2
 800b06e:	fb02 6313 	mls	r3, r2, r3, r6
 800b072:	b943      	cbnz	r3, 800b086 <mktime+0x5e>
 800b074:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800b078:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 800b07c:	fb93 f1f2 	sdiv	r1, r3, r2
 800b080:	fb02 3311 	mls	r3, r2, r1, r3
 800b084:	b903      	cbnz	r3, 800b088 <mktime+0x60>
 800b086:	3501      	adds	r5, #1
 800b088:	f644 6220 	movw	r2, #20000	; 0x4e20
 800b08c:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
 800b090:	3310      	adds	r3, #16
 800b092:	4293      	cmp	r3, r2
 800b094:	61fd      	str	r5, [r7, #28]
 800b096:	f200 815c 	bhi.w	800b352 <mktime+0x32a>
 800b09a:	2e46      	cmp	r6, #70	; 0x46
 800b09c:	dd71      	ble.n	800b182 <mktime+0x15a>
 800b09e:	2346      	movs	r3, #70	; 0x46
 800b0a0:	f240 1c6d 	movw	ip, #365	; 0x16d
 800b0a4:	2164      	movs	r1, #100	; 0x64
 800b0a6:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800b0aa:	079a      	lsls	r2, r3, #30
 800b0ac:	d163      	bne.n	800b176 <mktime+0x14e>
 800b0ae:	fb93 f2f1 	sdiv	r2, r3, r1
 800b0b2:	fb01 3212 	mls	r2, r1, r2, r3
 800b0b6:	2a00      	cmp	r2, #0
 800b0b8:	d160      	bne.n	800b17c <mktime+0x154>
 800b0ba:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 800b0be:	fb92 fef0 	sdiv	lr, r2, r0
 800b0c2:	fb00 221e 	mls	r2, r0, lr, r2
 800b0c6:	2a00      	cmp	r2, #0
 800b0c8:	bf14      	ite	ne
 800b0ca:	4662      	movne	r2, ip
 800b0cc:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 800b0d0:	3301      	adds	r3, #1
 800b0d2:	429e      	cmp	r6, r3
 800b0d4:	4415      	add	r5, r2
 800b0d6:	d1e8      	bne.n	800b0aa <mktime+0x82>
 800b0d8:	4b9a      	ldr	r3, [pc, #616]	; (800b344 <mktime+0x31c>)
 800b0da:	ea4f 78e4 	mov.w	r8, r4, asr #31
 800b0de:	fbc5 4803 	smlal	r4, r8, r5, r3
 800b0e2:	f000 fbb7 	bl	800b854 <__tz_lock>
 800b0e6:	f000 fbc1 	bl	800b86c <_tzset_unlocked>
 800b0ea:	4b97      	ldr	r3, [pc, #604]	; (800b348 <mktime+0x320>)
 800b0ec:	f8d3 b000 	ldr.w	fp, [r3]
 800b0f0:	f1bb 0f00 	cmp.w	fp, #0
 800b0f4:	d039      	beq.n	800b16a <mktime+0x142>
 800b0f6:	f8d7 b020 	ldr.w	fp, [r7, #32]
 800b0fa:	6978      	ldr	r0, [r7, #20]
 800b0fc:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800b100:	f1bb 0f01 	cmp.w	fp, #1
 800b104:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 800b108:	46da      	mov	sl, fp
 800b10a:	bfa8      	it	ge
 800b10c:	f04f 0a01 	movge.w	sl, #1
 800b110:	4283      	cmp	r3, r0
 800b112:	d178      	bne.n	800b206 <mktime+0x1de>
 800b114:	e9d9 3208 	ldrd	r3, r2, [r9, #32]
 800b118:	f8d9 1050 	ldr.w	r1, [r9, #80]	; 0x50
 800b11c:	f8d9 e04c 	ldr.w	lr, [r9, #76]	; 0x4c
 800b120:	1a5b      	subs	r3, r3, r1
 800b122:	9302      	str	r3, [sp, #8]
 800b124:	eb62 73e1 	sbc.w	r3, r2, r1, asr #31
 800b128:	9303      	str	r3, [sp, #12]
 800b12a:	f8d9 2028 	ldr.w	r2, [r9, #40]	; 0x28
 800b12e:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 800b132:	ebb3 0c02 	subs.w	ip, r3, r2
 800b136:	eb6e 70e2 	sbc.w	r0, lr, r2, asr #31
 800b13a:	4564      	cmp	r4, ip
 800b13c:	9301      	str	r3, [sp, #4]
 800b13e:	eb78 0300 	sbcs.w	r3, r8, r0
 800b142:	da66      	bge.n	800b212 <mktime+0x1ea>
 800b144:	f8d9 3000 	ldr.w	r3, [r9]
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d06f      	beq.n	800b22c <mktime+0x204>
 800b14c:	9b02      	ldr	r3, [sp, #8]
 800b14e:	429c      	cmp	r4, r3
 800b150:	9b03      	ldr	r3, [sp, #12]
 800b152:	eb78 0303 	sbcs.w	r3, r8, r3
 800b156:	db03      	blt.n	800b160 <mktime+0x138>
 800b158:	4564      	cmp	r4, ip
 800b15a:	eb78 0300 	sbcs.w	r3, r8, r0
 800b15e:	db6b      	blt.n	800b238 <mktime+0x210>
 800b160:	f1bb 0f00 	cmp.w	fp, #0
 800b164:	f04f 0b00 	mov.w	fp, #0
 800b168:	da6b      	bge.n	800b242 <mktime+0x21a>
 800b16a:	f8d9 1028 	ldr.w	r1, [r9, #40]	; 0x28
 800b16e:	190c      	adds	r4, r1, r4
 800b170:	eb48 78e1 	adc.w	r8, r8, r1, asr #31
 800b174:	e0a9      	b.n	800b2ca <mktime+0x2a2>
 800b176:	f240 126d 	movw	r2, #365	; 0x16d
 800b17a:	e7a9      	b.n	800b0d0 <mktime+0xa8>
 800b17c:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 800b180:	e7a6      	b.n	800b0d0 <mktime+0xa8>
 800b182:	d0a9      	beq.n	800b0d8 <mktime+0xb0>
 800b184:	2345      	movs	r3, #69	; 0x45
 800b186:	f240 1c6d 	movw	ip, #365	; 0x16d
 800b18a:	2164      	movs	r1, #100	; 0x64
 800b18c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800b190:	e012      	b.n	800b1b8 <mktime+0x190>
 800b192:	bb62      	cbnz	r2, 800b1ee <mktime+0x1c6>
 800b194:	fb93 f2f1 	sdiv	r2, r3, r1
 800b198:	fb01 3212 	mls	r2, r1, r2, r3
 800b19c:	bb52      	cbnz	r2, 800b1f4 <mktime+0x1cc>
 800b19e:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 800b1a2:	fb92 fef0 	sdiv	lr, r2, r0
 800b1a6:	fb00 221e 	mls	r2, r0, lr, r2
 800b1aa:	2a00      	cmp	r2, #0
 800b1ac:	bf14      	ite	ne
 800b1ae:	4662      	movne	r2, ip
 800b1b0:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 800b1b4:	1aad      	subs	r5, r5, r2
 800b1b6:	3b01      	subs	r3, #1
 800b1b8:	429e      	cmp	r6, r3
 800b1ba:	f003 0203 	and.w	r2, r3, #3
 800b1be:	dbe8      	blt.n	800b192 <mktime+0x16a>
 800b1c0:	b9da      	cbnz	r2, 800b1fa <mktime+0x1d2>
 800b1c2:	2264      	movs	r2, #100	; 0x64
 800b1c4:	fb96 f3f2 	sdiv	r3, r6, r2
 800b1c8:	fb02 6313 	mls	r3, r2, r3, r6
 800b1cc:	b9c3      	cbnz	r3, 800b200 <mktime+0x1d8>
 800b1ce:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800b1d2:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 800b1d6:	fb93 f1f2 	sdiv	r1, r3, r2
 800b1da:	fb02 3311 	mls	r3, r2, r1, r3
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	f240 136d 	movw	r3, #365	; 0x16d
 800b1e4:	bf08      	it	eq
 800b1e6:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 800b1ea:	1aed      	subs	r5, r5, r3
 800b1ec:	e774      	b.n	800b0d8 <mktime+0xb0>
 800b1ee:	f240 126d 	movw	r2, #365	; 0x16d
 800b1f2:	e7df      	b.n	800b1b4 <mktime+0x18c>
 800b1f4:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 800b1f8:	e7dc      	b.n	800b1b4 <mktime+0x18c>
 800b1fa:	f240 136d 	movw	r3, #365	; 0x16d
 800b1fe:	e7f4      	b.n	800b1ea <mktime+0x1c2>
 800b200:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 800b204:	e7f1      	b.n	800b1ea <mktime+0x1c2>
 800b206:	f000 fa7b 	bl	800b700 <__tzcalc_limits>
 800b20a:	2800      	cmp	r0, #0
 800b20c:	d182      	bne.n	800b114 <mktime+0xec>
 800b20e:	46d3      	mov	fp, sl
 800b210:	e050      	b.n	800b2b4 <mktime+0x28c>
 800b212:	9b01      	ldr	r3, [sp, #4]
 800b214:	1a5b      	subs	r3, r3, r1
 800b216:	9301      	str	r3, [sp, #4]
 800b218:	ea4f 73e1 	mov.w	r3, r1, asr #31
 800b21c:	eb6e 0e03 	sbc.w	lr, lr, r3
 800b220:	9b01      	ldr	r3, [sp, #4]
 800b222:	429c      	cmp	r4, r3
 800b224:	eb78 030e 	sbcs.w	r3, r8, lr
 800b228:	dbf1      	blt.n	800b20e <mktime+0x1e6>
 800b22a:	e78b      	b.n	800b144 <mktime+0x11c>
 800b22c:	9b02      	ldr	r3, [sp, #8]
 800b22e:	429c      	cmp	r4, r3
 800b230:	9b03      	ldr	r3, [sp, #12]
 800b232:	eb78 0303 	sbcs.w	r3, r8, r3
 800b236:	db8f      	blt.n	800b158 <mktime+0x130>
 800b238:	f1bb 0f00 	cmp.w	fp, #0
 800b23c:	db3e      	blt.n	800b2bc <mktime+0x294>
 800b23e:	f04f 0b01 	mov.w	fp, #1
 800b242:	ea8a 0a0b 	eor.w	sl, sl, fp
 800b246:	f1ba 0f01 	cmp.w	sl, #1
 800b24a:	d133      	bne.n	800b2b4 <mktime+0x28c>
 800b24c:	f1bb 0f00 	cmp.w	fp, #0
 800b250:	d04e      	beq.n	800b2f0 <mktime+0x2c8>
 800b252:	1a52      	subs	r2, r2, r1
 800b254:	683b      	ldr	r3, [r7, #0]
 800b256:	1914      	adds	r4, r2, r4
 800b258:	4413      	add	r3, r2
 800b25a:	4638      	mov	r0, r7
 800b25c:	603b      	str	r3, [r7, #0]
 800b25e:	eb48 78e2 	adc.w	r8, r8, r2, asr #31
 800b262:	f8d7 a00c 	ldr.w	sl, [r7, #12]
 800b266:	f7ff fe07 	bl	800ae78 <validate_structure>
 800b26a:	68fa      	ldr	r2, [r7, #12]
 800b26c:	ebb2 020a 	subs.w	r2, r2, sl
 800b270:	d020      	beq.n	800b2b4 <mktime+0x28c>
 800b272:	2a01      	cmp	r2, #1
 800b274:	dc3e      	bgt.n	800b2f4 <mktime+0x2cc>
 800b276:	1c90      	adds	r0, r2, #2
 800b278:	bfd8      	it	le
 800b27a:	2201      	movle	r2, #1
 800b27c:	69fb      	ldr	r3, [r7, #28]
 800b27e:	4415      	add	r5, r2
 800b280:	18d3      	adds	r3, r2, r3
 800b282:	d540      	bpl.n	800b306 <mktime+0x2de>
 800b284:	1e73      	subs	r3, r6, #1
 800b286:	0799      	lsls	r1, r3, #30
 800b288:	d137      	bne.n	800b2fa <mktime+0x2d2>
 800b28a:	2264      	movs	r2, #100	; 0x64
 800b28c:	fb93 f1f2 	sdiv	r1, r3, r2
 800b290:	fb02 3311 	mls	r3, r2, r1, r3
 800b294:	bba3      	cbnz	r3, 800b300 <mktime+0x2d8>
 800b296:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800b29a:	f206 766b 	addw	r6, r6, #1899	; 0x76b
 800b29e:	fb96 f2f3 	sdiv	r2, r6, r3
 800b2a2:	fb03 6612 	mls	r6, r3, r2, r6
 800b2a6:	2e00      	cmp	r6, #0
 800b2a8:	f240 136d 	movw	r3, #365	; 0x16d
 800b2ac:	bf18      	it	ne
 800b2ae:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 800b2b2:	61fb      	str	r3, [r7, #28]
 800b2b4:	f1bb 0f01 	cmp.w	fp, #1
 800b2b8:	f47f af57 	bne.w	800b16a <mktime+0x142>
 800b2bc:	f04f 0b01 	mov.w	fp, #1
 800b2c0:	f8d9 1050 	ldr.w	r1, [r9, #80]	; 0x50
 800b2c4:	190c      	adds	r4, r1, r4
 800b2c6:	eb48 78e1 	adc.w	r8, r8, r1, asr #31
 800b2ca:	f000 fac9 	bl	800b860 <__tz_unlock>
 800b2ce:	2307      	movs	r3, #7
 800b2d0:	3504      	adds	r5, #4
 800b2d2:	fb95 f3f3 	sdiv	r3, r5, r3
 800b2d6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800b2da:	1aed      	subs	r5, r5, r3
 800b2dc:	bf48      	it	mi
 800b2de:	3507      	addmi	r5, #7
 800b2e0:	f8c7 b020 	str.w	fp, [r7, #32]
 800b2e4:	61bd      	str	r5, [r7, #24]
 800b2e6:	4620      	mov	r0, r4
 800b2e8:	4641      	mov	r1, r8
 800b2ea:	b005      	add	sp, #20
 800b2ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2f0:	1a8a      	subs	r2, r1, r2
 800b2f2:	e7af      	b.n	800b254 <mktime+0x22c>
 800b2f4:	f04f 32ff 	mov.w	r2, #4294967295
 800b2f8:	e7c0      	b.n	800b27c <mktime+0x254>
 800b2fa:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 800b2fe:	e7d8      	b.n	800b2b2 <mktime+0x28a>
 800b300:	f240 136d 	movw	r3, #365	; 0x16d
 800b304:	e7d5      	b.n	800b2b2 <mktime+0x28a>
 800b306:	07b2      	lsls	r2, r6, #30
 800b308:	d117      	bne.n	800b33a <mktime+0x312>
 800b30a:	2164      	movs	r1, #100	; 0x64
 800b30c:	fb96 f2f1 	sdiv	r2, r6, r1
 800b310:	fb01 6212 	mls	r2, r1, r2, r6
 800b314:	b9d2      	cbnz	r2, 800b34c <mktime+0x324>
 800b316:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800b31a:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 800b31e:	fb96 f1f2 	sdiv	r1, r6, r2
 800b322:	fb02 6611 	mls	r6, r2, r1, r6
 800b326:	2e00      	cmp	r6, #0
 800b328:	f240 126d 	movw	r2, #365	; 0x16d
 800b32c:	bf08      	it	eq
 800b32e:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 800b332:	4293      	cmp	r3, r2
 800b334:	bfa8      	it	ge
 800b336:	1a9b      	subge	r3, r3, r2
 800b338:	e7bb      	b.n	800b2b2 <mktime+0x28a>
 800b33a:	f240 126d 	movw	r2, #365	; 0x16d
 800b33e:	e7f8      	b.n	800b332 <mktime+0x30a>
 800b340:	0800e45c 	.word	0x0800e45c
 800b344:	00015180 	.word	0x00015180
 800b348:	20003774 	.word	0x20003774
 800b34c:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 800b350:	e7ef      	b.n	800b332 <mktime+0x30a>
 800b352:	f04f 34ff 	mov.w	r4, #4294967295
 800b356:	46a0      	mov	r8, r4
 800b358:	e7c5      	b.n	800b2e6 <mktime+0x2be>
 800b35a:	bf00      	nop

0800b35c <_free_r>:
 800b35c:	b538      	push	{r3, r4, r5, lr}
 800b35e:	4605      	mov	r5, r0
 800b360:	2900      	cmp	r1, #0
 800b362:	d040      	beq.n	800b3e6 <_free_r+0x8a>
 800b364:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b368:	1f0c      	subs	r4, r1, #4
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	bfb8      	it	lt
 800b36e:	18e4      	addlt	r4, r4, r3
 800b370:	f000 fd44 	bl	800bdfc <__malloc_lock>
 800b374:	4a1c      	ldr	r2, [pc, #112]	; (800b3e8 <_free_r+0x8c>)
 800b376:	6813      	ldr	r3, [r2, #0]
 800b378:	b933      	cbnz	r3, 800b388 <_free_r+0x2c>
 800b37a:	6063      	str	r3, [r4, #4]
 800b37c:	6014      	str	r4, [r2, #0]
 800b37e:	4628      	mov	r0, r5
 800b380:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b384:	f000 bd40 	b.w	800be08 <__malloc_unlock>
 800b388:	42a3      	cmp	r3, r4
 800b38a:	d908      	bls.n	800b39e <_free_r+0x42>
 800b38c:	6820      	ldr	r0, [r4, #0]
 800b38e:	1821      	adds	r1, r4, r0
 800b390:	428b      	cmp	r3, r1
 800b392:	bf01      	itttt	eq
 800b394:	6819      	ldreq	r1, [r3, #0]
 800b396:	685b      	ldreq	r3, [r3, #4]
 800b398:	1809      	addeq	r1, r1, r0
 800b39a:	6021      	streq	r1, [r4, #0]
 800b39c:	e7ed      	b.n	800b37a <_free_r+0x1e>
 800b39e:	461a      	mov	r2, r3
 800b3a0:	685b      	ldr	r3, [r3, #4]
 800b3a2:	b10b      	cbz	r3, 800b3a8 <_free_r+0x4c>
 800b3a4:	42a3      	cmp	r3, r4
 800b3a6:	d9fa      	bls.n	800b39e <_free_r+0x42>
 800b3a8:	6811      	ldr	r1, [r2, #0]
 800b3aa:	1850      	adds	r0, r2, r1
 800b3ac:	42a0      	cmp	r0, r4
 800b3ae:	d10b      	bne.n	800b3c8 <_free_r+0x6c>
 800b3b0:	6820      	ldr	r0, [r4, #0]
 800b3b2:	4401      	add	r1, r0
 800b3b4:	1850      	adds	r0, r2, r1
 800b3b6:	4283      	cmp	r3, r0
 800b3b8:	6011      	str	r1, [r2, #0]
 800b3ba:	d1e0      	bne.n	800b37e <_free_r+0x22>
 800b3bc:	6818      	ldr	r0, [r3, #0]
 800b3be:	685b      	ldr	r3, [r3, #4]
 800b3c0:	4401      	add	r1, r0
 800b3c2:	6011      	str	r1, [r2, #0]
 800b3c4:	6053      	str	r3, [r2, #4]
 800b3c6:	e7da      	b.n	800b37e <_free_r+0x22>
 800b3c8:	d902      	bls.n	800b3d0 <_free_r+0x74>
 800b3ca:	230c      	movs	r3, #12
 800b3cc:	602b      	str	r3, [r5, #0]
 800b3ce:	e7d6      	b.n	800b37e <_free_r+0x22>
 800b3d0:	6820      	ldr	r0, [r4, #0]
 800b3d2:	1821      	adds	r1, r4, r0
 800b3d4:	428b      	cmp	r3, r1
 800b3d6:	bf01      	itttt	eq
 800b3d8:	6819      	ldreq	r1, [r3, #0]
 800b3da:	685b      	ldreq	r3, [r3, #4]
 800b3dc:	1809      	addeq	r1, r1, r0
 800b3de:	6021      	streq	r1, [r4, #0]
 800b3e0:	6063      	str	r3, [r4, #4]
 800b3e2:	6054      	str	r4, [r2, #4]
 800b3e4:	e7cb      	b.n	800b37e <_free_r+0x22>
 800b3e6:	bd38      	pop	{r3, r4, r5, pc}
 800b3e8:	20003750 	.word	0x20003750

0800b3ec <sbrk_aligned>:
 800b3ec:	b570      	push	{r4, r5, r6, lr}
 800b3ee:	4e0e      	ldr	r6, [pc, #56]	; (800b428 <sbrk_aligned+0x3c>)
 800b3f0:	460c      	mov	r4, r1
 800b3f2:	6831      	ldr	r1, [r6, #0]
 800b3f4:	4605      	mov	r5, r0
 800b3f6:	b911      	cbnz	r1, 800b3fe <sbrk_aligned+0x12>
 800b3f8:	f000 f8ca 	bl	800b590 <_sbrk_r>
 800b3fc:	6030      	str	r0, [r6, #0]
 800b3fe:	4621      	mov	r1, r4
 800b400:	4628      	mov	r0, r5
 800b402:	f000 f8c5 	bl	800b590 <_sbrk_r>
 800b406:	1c43      	adds	r3, r0, #1
 800b408:	d00a      	beq.n	800b420 <sbrk_aligned+0x34>
 800b40a:	1cc4      	adds	r4, r0, #3
 800b40c:	f024 0403 	bic.w	r4, r4, #3
 800b410:	42a0      	cmp	r0, r4
 800b412:	d007      	beq.n	800b424 <sbrk_aligned+0x38>
 800b414:	1a21      	subs	r1, r4, r0
 800b416:	4628      	mov	r0, r5
 800b418:	f000 f8ba 	bl	800b590 <_sbrk_r>
 800b41c:	3001      	adds	r0, #1
 800b41e:	d101      	bne.n	800b424 <sbrk_aligned+0x38>
 800b420:	f04f 34ff 	mov.w	r4, #4294967295
 800b424:	4620      	mov	r0, r4
 800b426:	bd70      	pop	{r4, r5, r6, pc}
 800b428:	20003754 	.word	0x20003754

0800b42c <_malloc_r>:
 800b42c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b430:	1ccd      	adds	r5, r1, #3
 800b432:	f025 0503 	bic.w	r5, r5, #3
 800b436:	3508      	adds	r5, #8
 800b438:	2d0c      	cmp	r5, #12
 800b43a:	bf38      	it	cc
 800b43c:	250c      	movcc	r5, #12
 800b43e:	2d00      	cmp	r5, #0
 800b440:	4607      	mov	r7, r0
 800b442:	db01      	blt.n	800b448 <_malloc_r+0x1c>
 800b444:	42a9      	cmp	r1, r5
 800b446:	d905      	bls.n	800b454 <_malloc_r+0x28>
 800b448:	230c      	movs	r3, #12
 800b44a:	2600      	movs	r6, #0
 800b44c:	603b      	str	r3, [r7, #0]
 800b44e:	4630      	mov	r0, r6
 800b450:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b454:	4e2e      	ldr	r6, [pc, #184]	; (800b510 <_malloc_r+0xe4>)
 800b456:	f000 fcd1 	bl	800bdfc <__malloc_lock>
 800b45a:	6833      	ldr	r3, [r6, #0]
 800b45c:	461c      	mov	r4, r3
 800b45e:	bb34      	cbnz	r4, 800b4ae <_malloc_r+0x82>
 800b460:	4629      	mov	r1, r5
 800b462:	4638      	mov	r0, r7
 800b464:	f7ff ffc2 	bl	800b3ec <sbrk_aligned>
 800b468:	1c43      	adds	r3, r0, #1
 800b46a:	4604      	mov	r4, r0
 800b46c:	d14d      	bne.n	800b50a <_malloc_r+0xde>
 800b46e:	6834      	ldr	r4, [r6, #0]
 800b470:	4626      	mov	r6, r4
 800b472:	2e00      	cmp	r6, #0
 800b474:	d140      	bne.n	800b4f8 <_malloc_r+0xcc>
 800b476:	6823      	ldr	r3, [r4, #0]
 800b478:	4631      	mov	r1, r6
 800b47a:	4638      	mov	r0, r7
 800b47c:	eb04 0803 	add.w	r8, r4, r3
 800b480:	f000 f886 	bl	800b590 <_sbrk_r>
 800b484:	4580      	cmp	r8, r0
 800b486:	d13a      	bne.n	800b4fe <_malloc_r+0xd2>
 800b488:	6821      	ldr	r1, [r4, #0]
 800b48a:	3503      	adds	r5, #3
 800b48c:	1a6d      	subs	r5, r5, r1
 800b48e:	f025 0503 	bic.w	r5, r5, #3
 800b492:	3508      	adds	r5, #8
 800b494:	2d0c      	cmp	r5, #12
 800b496:	bf38      	it	cc
 800b498:	250c      	movcc	r5, #12
 800b49a:	4638      	mov	r0, r7
 800b49c:	4629      	mov	r1, r5
 800b49e:	f7ff ffa5 	bl	800b3ec <sbrk_aligned>
 800b4a2:	3001      	adds	r0, #1
 800b4a4:	d02b      	beq.n	800b4fe <_malloc_r+0xd2>
 800b4a6:	6823      	ldr	r3, [r4, #0]
 800b4a8:	442b      	add	r3, r5
 800b4aa:	6023      	str	r3, [r4, #0]
 800b4ac:	e00e      	b.n	800b4cc <_malloc_r+0xa0>
 800b4ae:	6822      	ldr	r2, [r4, #0]
 800b4b0:	1b52      	subs	r2, r2, r5
 800b4b2:	d41e      	bmi.n	800b4f2 <_malloc_r+0xc6>
 800b4b4:	2a0b      	cmp	r2, #11
 800b4b6:	d916      	bls.n	800b4e6 <_malloc_r+0xba>
 800b4b8:	1961      	adds	r1, r4, r5
 800b4ba:	42a3      	cmp	r3, r4
 800b4bc:	6025      	str	r5, [r4, #0]
 800b4be:	bf18      	it	ne
 800b4c0:	6059      	strne	r1, [r3, #4]
 800b4c2:	6863      	ldr	r3, [r4, #4]
 800b4c4:	bf08      	it	eq
 800b4c6:	6031      	streq	r1, [r6, #0]
 800b4c8:	5162      	str	r2, [r4, r5]
 800b4ca:	604b      	str	r3, [r1, #4]
 800b4cc:	4638      	mov	r0, r7
 800b4ce:	f104 060b 	add.w	r6, r4, #11
 800b4d2:	f000 fc99 	bl	800be08 <__malloc_unlock>
 800b4d6:	f026 0607 	bic.w	r6, r6, #7
 800b4da:	1d23      	adds	r3, r4, #4
 800b4dc:	1af2      	subs	r2, r6, r3
 800b4de:	d0b6      	beq.n	800b44e <_malloc_r+0x22>
 800b4e0:	1b9b      	subs	r3, r3, r6
 800b4e2:	50a3      	str	r3, [r4, r2]
 800b4e4:	e7b3      	b.n	800b44e <_malloc_r+0x22>
 800b4e6:	6862      	ldr	r2, [r4, #4]
 800b4e8:	42a3      	cmp	r3, r4
 800b4ea:	bf0c      	ite	eq
 800b4ec:	6032      	streq	r2, [r6, #0]
 800b4ee:	605a      	strne	r2, [r3, #4]
 800b4f0:	e7ec      	b.n	800b4cc <_malloc_r+0xa0>
 800b4f2:	4623      	mov	r3, r4
 800b4f4:	6864      	ldr	r4, [r4, #4]
 800b4f6:	e7b2      	b.n	800b45e <_malloc_r+0x32>
 800b4f8:	4634      	mov	r4, r6
 800b4fa:	6876      	ldr	r6, [r6, #4]
 800b4fc:	e7b9      	b.n	800b472 <_malloc_r+0x46>
 800b4fe:	230c      	movs	r3, #12
 800b500:	4638      	mov	r0, r7
 800b502:	603b      	str	r3, [r7, #0]
 800b504:	f000 fc80 	bl	800be08 <__malloc_unlock>
 800b508:	e7a1      	b.n	800b44e <_malloc_r+0x22>
 800b50a:	6025      	str	r5, [r4, #0]
 800b50c:	e7de      	b.n	800b4cc <_malloc_r+0xa0>
 800b50e:	bf00      	nop
 800b510:	20003750 	.word	0x20003750

0800b514 <rand>:
 800b514:	4b16      	ldr	r3, [pc, #88]	; (800b570 <rand+0x5c>)
 800b516:	b510      	push	{r4, lr}
 800b518:	681c      	ldr	r4, [r3, #0]
 800b51a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b51c:	b9b3      	cbnz	r3, 800b54c <rand+0x38>
 800b51e:	2018      	movs	r0, #24
 800b520:	f7ff fc74 	bl	800ae0c <malloc>
 800b524:	4602      	mov	r2, r0
 800b526:	63a0      	str	r0, [r4, #56]	; 0x38
 800b528:	b920      	cbnz	r0, 800b534 <rand+0x20>
 800b52a:	214e      	movs	r1, #78	; 0x4e
 800b52c:	4b11      	ldr	r3, [pc, #68]	; (800b574 <rand+0x60>)
 800b52e:	4812      	ldr	r0, [pc, #72]	; (800b578 <rand+0x64>)
 800b530:	f000 fb24 	bl	800bb7c <__assert_func>
 800b534:	4911      	ldr	r1, [pc, #68]	; (800b57c <rand+0x68>)
 800b536:	4b12      	ldr	r3, [pc, #72]	; (800b580 <rand+0x6c>)
 800b538:	e9c0 1300 	strd	r1, r3, [r0]
 800b53c:	4b11      	ldr	r3, [pc, #68]	; (800b584 <rand+0x70>)
 800b53e:	2100      	movs	r1, #0
 800b540:	6083      	str	r3, [r0, #8]
 800b542:	230b      	movs	r3, #11
 800b544:	8183      	strh	r3, [r0, #12]
 800b546:	2001      	movs	r0, #1
 800b548:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800b54c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800b54e:	4a0e      	ldr	r2, [pc, #56]	; (800b588 <rand+0x74>)
 800b550:	6920      	ldr	r0, [r4, #16]
 800b552:	6963      	ldr	r3, [r4, #20]
 800b554:	4342      	muls	r2, r0
 800b556:	490d      	ldr	r1, [pc, #52]	; (800b58c <rand+0x78>)
 800b558:	fb01 2203 	mla	r2, r1, r3, r2
 800b55c:	fba0 0101 	umull	r0, r1, r0, r1
 800b560:	1c43      	adds	r3, r0, #1
 800b562:	eb42 0001 	adc.w	r0, r2, r1
 800b566:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800b56a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800b56e:	bd10      	pop	{r4, pc}
 800b570:	200004e8 	.word	0x200004e8
 800b574:	0800e3b8 	.word	0x0800e3b8
 800b578:	0800e4ec 	.word	0x0800e4ec
 800b57c:	abcd330e 	.word	0xabcd330e
 800b580:	e66d1234 	.word	0xe66d1234
 800b584:	0005deec 	.word	0x0005deec
 800b588:	5851f42d 	.word	0x5851f42d
 800b58c:	4c957f2d 	.word	0x4c957f2d

0800b590 <_sbrk_r>:
 800b590:	b538      	push	{r3, r4, r5, lr}
 800b592:	2300      	movs	r3, #0
 800b594:	4d05      	ldr	r5, [pc, #20]	; (800b5ac <_sbrk_r+0x1c>)
 800b596:	4604      	mov	r4, r0
 800b598:	4608      	mov	r0, r1
 800b59a:	602b      	str	r3, [r5, #0]
 800b59c:	f7f9 fff6 	bl	800558c <_sbrk>
 800b5a0:	1c43      	adds	r3, r0, #1
 800b5a2:	d102      	bne.n	800b5aa <_sbrk_r+0x1a>
 800b5a4:	682b      	ldr	r3, [r5, #0]
 800b5a6:	b103      	cbz	r3, 800b5aa <_sbrk_r+0x1a>
 800b5a8:	6023      	str	r3, [r4, #0]
 800b5aa:	bd38      	pop	{r3, r4, r5, pc}
 800b5ac:	20003784 	.word	0x20003784

0800b5b0 <siprintf>:
 800b5b0:	b40e      	push	{r1, r2, r3}
 800b5b2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b5b6:	b500      	push	{lr}
 800b5b8:	b09c      	sub	sp, #112	; 0x70
 800b5ba:	ab1d      	add	r3, sp, #116	; 0x74
 800b5bc:	9002      	str	r0, [sp, #8]
 800b5be:	9006      	str	r0, [sp, #24]
 800b5c0:	9107      	str	r1, [sp, #28]
 800b5c2:	9104      	str	r1, [sp, #16]
 800b5c4:	4808      	ldr	r0, [pc, #32]	; (800b5e8 <siprintf+0x38>)
 800b5c6:	4909      	ldr	r1, [pc, #36]	; (800b5ec <siprintf+0x3c>)
 800b5c8:	f853 2b04 	ldr.w	r2, [r3], #4
 800b5cc:	9105      	str	r1, [sp, #20]
 800b5ce:	6800      	ldr	r0, [r0, #0]
 800b5d0:	a902      	add	r1, sp, #8
 800b5d2:	9301      	str	r3, [sp, #4]
 800b5d4:	f000 fc7a 	bl	800becc <_svfiprintf_r>
 800b5d8:	2200      	movs	r2, #0
 800b5da:	9b02      	ldr	r3, [sp, #8]
 800b5dc:	701a      	strb	r2, [r3, #0]
 800b5de:	b01c      	add	sp, #112	; 0x70
 800b5e0:	f85d eb04 	ldr.w	lr, [sp], #4
 800b5e4:	b003      	add	sp, #12
 800b5e6:	4770      	bx	lr
 800b5e8:	200004e8 	.word	0x200004e8
 800b5ec:	ffff0208 	.word	0xffff0208

0800b5f0 <_strtol_l.constprop.0>:
 800b5f0:	2b01      	cmp	r3, #1
 800b5f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b5f6:	4680      	mov	r8, r0
 800b5f8:	d001      	beq.n	800b5fe <_strtol_l.constprop.0+0xe>
 800b5fa:	2b24      	cmp	r3, #36	; 0x24
 800b5fc:	d906      	bls.n	800b60c <_strtol_l.constprop.0+0x1c>
 800b5fe:	f7ff facb 	bl	800ab98 <__errno>
 800b602:	2316      	movs	r3, #22
 800b604:	6003      	str	r3, [r0, #0]
 800b606:	2000      	movs	r0, #0
 800b608:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b60c:	460d      	mov	r5, r1
 800b60e:	4f35      	ldr	r7, [pc, #212]	; (800b6e4 <_strtol_l.constprop.0+0xf4>)
 800b610:	4628      	mov	r0, r5
 800b612:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b616:	5de6      	ldrb	r6, [r4, r7]
 800b618:	f016 0608 	ands.w	r6, r6, #8
 800b61c:	d1f8      	bne.n	800b610 <_strtol_l.constprop.0+0x20>
 800b61e:	2c2d      	cmp	r4, #45	; 0x2d
 800b620:	d12f      	bne.n	800b682 <_strtol_l.constprop.0+0x92>
 800b622:	2601      	movs	r6, #1
 800b624:	782c      	ldrb	r4, [r5, #0]
 800b626:	1c85      	adds	r5, r0, #2
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d057      	beq.n	800b6dc <_strtol_l.constprop.0+0xec>
 800b62c:	2b10      	cmp	r3, #16
 800b62e:	d109      	bne.n	800b644 <_strtol_l.constprop.0+0x54>
 800b630:	2c30      	cmp	r4, #48	; 0x30
 800b632:	d107      	bne.n	800b644 <_strtol_l.constprop.0+0x54>
 800b634:	7828      	ldrb	r0, [r5, #0]
 800b636:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800b63a:	2858      	cmp	r0, #88	; 0x58
 800b63c:	d149      	bne.n	800b6d2 <_strtol_l.constprop.0+0xe2>
 800b63e:	2310      	movs	r3, #16
 800b640:	786c      	ldrb	r4, [r5, #1]
 800b642:	3502      	adds	r5, #2
 800b644:	2700      	movs	r7, #0
 800b646:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800b64a:	f10e 3eff 	add.w	lr, lr, #4294967295
 800b64e:	fbbe f9f3 	udiv	r9, lr, r3
 800b652:	4638      	mov	r0, r7
 800b654:	fb03 ea19 	mls	sl, r3, r9, lr
 800b658:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800b65c:	f1bc 0f09 	cmp.w	ip, #9
 800b660:	d814      	bhi.n	800b68c <_strtol_l.constprop.0+0x9c>
 800b662:	4664      	mov	r4, ip
 800b664:	42a3      	cmp	r3, r4
 800b666:	dd22      	ble.n	800b6ae <_strtol_l.constprop.0+0xbe>
 800b668:	2f00      	cmp	r7, #0
 800b66a:	db1d      	blt.n	800b6a8 <_strtol_l.constprop.0+0xb8>
 800b66c:	4581      	cmp	r9, r0
 800b66e:	d31b      	bcc.n	800b6a8 <_strtol_l.constprop.0+0xb8>
 800b670:	d101      	bne.n	800b676 <_strtol_l.constprop.0+0x86>
 800b672:	45a2      	cmp	sl, r4
 800b674:	db18      	blt.n	800b6a8 <_strtol_l.constprop.0+0xb8>
 800b676:	2701      	movs	r7, #1
 800b678:	fb00 4003 	mla	r0, r0, r3, r4
 800b67c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b680:	e7ea      	b.n	800b658 <_strtol_l.constprop.0+0x68>
 800b682:	2c2b      	cmp	r4, #43	; 0x2b
 800b684:	bf04      	itt	eq
 800b686:	782c      	ldrbeq	r4, [r5, #0]
 800b688:	1c85      	addeq	r5, r0, #2
 800b68a:	e7cd      	b.n	800b628 <_strtol_l.constprop.0+0x38>
 800b68c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800b690:	f1bc 0f19 	cmp.w	ip, #25
 800b694:	d801      	bhi.n	800b69a <_strtol_l.constprop.0+0xaa>
 800b696:	3c37      	subs	r4, #55	; 0x37
 800b698:	e7e4      	b.n	800b664 <_strtol_l.constprop.0+0x74>
 800b69a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800b69e:	f1bc 0f19 	cmp.w	ip, #25
 800b6a2:	d804      	bhi.n	800b6ae <_strtol_l.constprop.0+0xbe>
 800b6a4:	3c57      	subs	r4, #87	; 0x57
 800b6a6:	e7dd      	b.n	800b664 <_strtol_l.constprop.0+0x74>
 800b6a8:	f04f 37ff 	mov.w	r7, #4294967295
 800b6ac:	e7e6      	b.n	800b67c <_strtol_l.constprop.0+0x8c>
 800b6ae:	2f00      	cmp	r7, #0
 800b6b0:	da07      	bge.n	800b6c2 <_strtol_l.constprop.0+0xd2>
 800b6b2:	2322      	movs	r3, #34	; 0x22
 800b6b4:	4670      	mov	r0, lr
 800b6b6:	f8c8 3000 	str.w	r3, [r8]
 800b6ba:	2a00      	cmp	r2, #0
 800b6bc:	d0a4      	beq.n	800b608 <_strtol_l.constprop.0+0x18>
 800b6be:	1e69      	subs	r1, r5, #1
 800b6c0:	e005      	b.n	800b6ce <_strtol_l.constprop.0+0xde>
 800b6c2:	b106      	cbz	r6, 800b6c6 <_strtol_l.constprop.0+0xd6>
 800b6c4:	4240      	negs	r0, r0
 800b6c6:	2a00      	cmp	r2, #0
 800b6c8:	d09e      	beq.n	800b608 <_strtol_l.constprop.0+0x18>
 800b6ca:	2f00      	cmp	r7, #0
 800b6cc:	d1f7      	bne.n	800b6be <_strtol_l.constprop.0+0xce>
 800b6ce:	6011      	str	r1, [r2, #0]
 800b6d0:	e79a      	b.n	800b608 <_strtol_l.constprop.0+0x18>
 800b6d2:	2430      	movs	r4, #48	; 0x30
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d1b5      	bne.n	800b644 <_strtol_l.constprop.0+0x54>
 800b6d8:	2308      	movs	r3, #8
 800b6da:	e7b3      	b.n	800b644 <_strtol_l.constprop.0+0x54>
 800b6dc:	2c30      	cmp	r4, #48	; 0x30
 800b6de:	d0a9      	beq.n	800b634 <_strtol_l.constprop.0+0x44>
 800b6e0:	230a      	movs	r3, #10
 800b6e2:	e7af      	b.n	800b644 <_strtol_l.constprop.0+0x54>
 800b6e4:	0800e5c0 	.word	0x0800e5c0

0800b6e8 <_strtol_r>:
 800b6e8:	f7ff bf82 	b.w	800b5f0 <_strtol_l.constprop.0>

0800b6ec <strtol>:
 800b6ec:	4613      	mov	r3, r2
 800b6ee:	460a      	mov	r2, r1
 800b6f0:	4601      	mov	r1, r0
 800b6f2:	4802      	ldr	r0, [pc, #8]	; (800b6fc <strtol+0x10>)
 800b6f4:	6800      	ldr	r0, [r0, #0]
 800b6f6:	f7ff bf7b 	b.w	800b5f0 <_strtol_l.constprop.0>
 800b6fa:	bf00      	nop
 800b6fc:	200004e8 	.word	0x200004e8

0800b700 <__tzcalc_limits>:
 800b700:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b704:	4605      	mov	r5, r0
 800b706:	f000 fac1 	bl	800bc8c <__gettzinfo>
 800b70a:	f240 73b1 	movw	r3, #1969	; 0x7b1
 800b70e:	429d      	cmp	r5, r3
 800b710:	f340 809a 	ble.w	800b848 <__tzcalc_limits+0x148>
 800b714:	f46f 62f6 	mvn.w	r2, #1968	; 0x7b0
 800b718:	18ac      	adds	r4, r5, r2
 800b71a:	f240 126d 	movw	r2, #365	; 0x16d
 800b71e:	f2a5 73b2 	subw	r3, r5, #1970	; 0x7b2
 800b722:	10a4      	asrs	r4, r4, #2
 800b724:	fb02 4403 	mla	r4, r2, r3, r4
 800b728:	f06f 0263 	mvn.w	r2, #99	; 0x63
 800b72c:	f2a5 736d 	subw	r3, r5, #1901	; 0x76d
 800b730:	fb93 f3f2 	sdiv	r3, r3, r2
 800b734:	f46f 61c8 	mvn.w	r1, #1600	; 0x640
 800b738:	441c      	add	r4, r3
 800b73a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800b73e:	186a      	adds	r2, r5, r1
 800b740:	fbb2 f2f3 	udiv	r2, r2, r3
 800b744:	fb95 fcf3 	sdiv	ip, r5, r3
 800b748:	4414      	add	r4, r2
 800b74a:	2264      	movs	r2, #100	; 0x64
 800b74c:	fb03 5c1c 	mls	ip, r3, ip, r5
 800b750:	fb95 f7f2 	sdiv	r7, r5, r2
 800b754:	fabc f68c 	clz	r6, ip
 800b758:	4601      	mov	r1, r0
 800b75a:	fb02 5717 	mls	r7, r2, r7, r5
 800b75e:	6045      	str	r5, [r0, #4]
 800b760:	0976      	lsrs	r6, r6, #5
 800b762:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 800b766:	f005 0203 	and.w	r2, r5, #3
 800b76a:	7a0d      	ldrb	r5, [r1, #8]
 800b76c:	694b      	ldr	r3, [r1, #20]
 800b76e:	2d4a      	cmp	r5, #74	; 0x4a
 800b770:	d12d      	bne.n	800b7ce <__tzcalc_limits+0xce>
 800b772:	eb04 0e03 	add.w	lr, r4, r3
 800b776:	b902      	cbnz	r2, 800b77a <__tzcalc_limits+0x7a>
 800b778:	b917      	cbnz	r7, 800b780 <__tzcalc_limits+0x80>
 800b77a:	f1bc 0f00 	cmp.w	ip, #0
 800b77e:	d124      	bne.n	800b7ca <__tzcalc_limits+0xca>
 800b780:	2b3b      	cmp	r3, #59	; 0x3b
 800b782:	bfd4      	ite	le
 800b784:	2300      	movle	r3, #0
 800b786:	2301      	movgt	r3, #1
 800b788:	4473      	add	r3, lr
 800b78a:	3b01      	subs	r3, #1
 800b78c:	698d      	ldr	r5, [r1, #24]
 800b78e:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 800b84c <__tzcalc_limits+0x14c>
 800b792:	ea4f 7ee5 	mov.w	lr, r5, asr #31
 800b796:	fbc3 5e08 	smlal	r5, lr, r3, r8
 800b79a:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800b79c:	18ed      	adds	r5, r5, r3
 800b79e:	eb4e 73e3 	adc.w	r3, lr, r3, asr #31
 800b7a2:	e9c1 5308 	strd	r5, r3, [r1, #32]
 800b7a6:	3128      	adds	r1, #40	; 0x28
 800b7a8:	458b      	cmp	fp, r1
 800b7aa:	d1de      	bne.n	800b76a <__tzcalc_limits+0x6a>
 800b7ac:	e9d0 1312 	ldrd	r1, r3, [r0, #72]	; 0x48
 800b7b0:	e9d0 4208 	ldrd	r4, r2, [r0, #32]
 800b7b4:	428c      	cmp	r4, r1
 800b7b6:	eb72 0303 	sbcs.w	r3, r2, r3
 800b7ba:	bfb4      	ite	lt
 800b7bc:	2301      	movlt	r3, #1
 800b7be:	2300      	movge	r3, #0
 800b7c0:	6003      	str	r3, [r0, #0]
 800b7c2:	2001      	movs	r0, #1
 800b7c4:	b003      	add	sp, #12
 800b7c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7ca:	2300      	movs	r3, #0
 800b7cc:	e7dc      	b.n	800b788 <__tzcalc_limits+0x88>
 800b7ce:	2d44      	cmp	r5, #68	; 0x44
 800b7d0:	d101      	bne.n	800b7d6 <__tzcalc_limits+0xd6>
 800b7d2:	4423      	add	r3, r4
 800b7d4:	e7da      	b.n	800b78c <__tzcalc_limits+0x8c>
 800b7d6:	bb8a      	cbnz	r2, 800b83c <__tzcalc_limits+0x13c>
 800b7d8:	2f00      	cmp	r7, #0
 800b7da:	bf0c      	ite	eq
 800b7dc:	4635      	moveq	r5, r6
 800b7de:	2501      	movne	r5, #1
 800b7e0:	f04f 0a30 	mov.w	sl, #48	; 0x30
 800b7e4:	f8d1 e00c 	ldr.w	lr, [r1, #12]
 800b7e8:	f04f 0800 	mov.w	r8, #0
 800b7ec:	f8cd e004 	str.w	lr, [sp, #4]
 800b7f0:	46a6      	mov	lr, r4
 800b7f2:	f8df 905c 	ldr.w	r9, [pc, #92]	; 800b850 <__tzcalc_limits+0x150>
 800b7f6:	fb0a 9505 	mla	r5, sl, r5, r9
 800b7fa:	3d04      	subs	r5, #4
 800b7fc:	f8dd a004 	ldr.w	sl, [sp, #4]
 800b800:	f108 0801 	add.w	r8, r8, #1
 800b804:	45c2      	cmp	sl, r8
 800b806:	f855 9028 	ldr.w	r9, [r5, r8, lsl #2]
 800b80a:	dc19      	bgt.n	800b840 <__tzcalc_limits+0x140>
 800b80c:	f04f 0807 	mov.w	r8, #7
 800b810:	f10e 0504 	add.w	r5, lr, #4
 800b814:	fb95 f8f8 	sdiv	r8, r5, r8
 800b818:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
 800b81c:	eba5 0808 	sub.w	r8, r5, r8
 800b820:	ebb3 0808 	subs.w	r8, r3, r8
 800b824:	690b      	ldr	r3, [r1, #16]
 800b826:	bf48      	it	mi
 800b828:	f108 0807 	addmi.w	r8, r8, #7
 800b82c:	3b01      	subs	r3, #1
 800b82e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800b832:	4443      	add	r3, r8
 800b834:	454b      	cmp	r3, r9
 800b836:	da05      	bge.n	800b844 <__tzcalc_limits+0x144>
 800b838:	4473      	add	r3, lr
 800b83a:	e7a7      	b.n	800b78c <__tzcalc_limits+0x8c>
 800b83c:	4635      	mov	r5, r6
 800b83e:	e7cf      	b.n	800b7e0 <__tzcalc_limits+0xe0>
 800b840:	44ce      	add	lr, r9
 800b842:	e7db      	b.n	800b7fc <__tzcalc_limits+0xfc>
 800b844:	3b07      	subs	r3, #7
 800b846:	e7f5      	b.n	800b834 <__tzcalc_limits+0x134>
 800b848:	2000      	movs	r0, #0
 800b84a:	e7bb      	b.n	800b7c4 <__tzcalc_limits+0xc4>
 800b84c:	00015180 	.word	0x00015180
 800b850:	0800e48c 	.word	0x0800e48c

0800b854 <__tz_lock>:
 800b854:	4801      	ldr	r0, [pc, #4]	; (800b85c <__tz_lock+0x8>)
 800b856:	f000 bacc 	b.w	800bdf2 <__retarget_lock_acquire>
 800b85a:	bf00      	nop
 800b85c:	20003780 	.word	0x20003780

0800b860 <__tz_unlock>:
 800b860:	4801      	ldr	r0, [pc, #4]	; (800b868 <__tz_unlock+0x8>)
 800b862:	f000 bac8 	b.w	800bdf6 <__retarget_lock_release>
 800b866:	bf00      	nop
 800b868:	20003780 	.word	0x20003780

0800b86c <_tzset_unlocked>:
 800b86c:	4b01      	ldr	r3, [pc, #4]	; (800b874 <_tzset_unlocked+0x8>)
 800b86e:	6818      	ldr	r0, [r3, #0]
 800b870:	f000 b802 	b.w	800b878 <_tzset_unlocked_r>
 800b874:	200004e8 	.word	0x200004e8

0800b878 <_tzset_unlocked_r>:
 800b878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b87c:	b08d      	sub	sp, #52	; 0x34
 800b87e:	4607      	mov	r7, r0
 800b880:	f000 fa04 	bl	800bc8c <__gettzinfo>
 800b884:	49b1      	ldr	r1, [pc, #708]	; (800bb4c <_tzset_unlocked_r+0x2d4>)
 800b886:	4605      	mov	r5, r0
 800b888:	4638      	mov	r0, r7
 800b88a:	f000 f9f7 	bl	800bc7c <_getenv_r>
 800b88e:	4eb0      	ldr	r6, [pc, #704]	; (800bb50 <_tzset_unlocked_r+0x2d8>)
 800b890:	4604      	mov	r4, r0
 800b892:	b970      	cbnz	r0, 800b8b2 <_tzset_unlocked_r+0x3a>
 800b894:	4baf      	ldr	r3, [pc, #700]	; (800bb54 <_tzset_unlocked_r+0x2dc>)
 800b896:	4ab0      	ldr	r2, [pc, #704]	; (800bb58 <_tzset_unlocked_r+0x2e0>)
 800b898:	6018      	str	r0, [r3, #0]
 800b89a:	4bb0      	ldr	r3, [pc, #704]	; (800bb5c <_tzset_unlocked_r+0x2e4>)
 800b89c:	6018      	str	r0, [r3, #0]
 800b89e:	4bb0      	ldr	r3, [pc, #704]	; (800bb60 <_tzset_unlocked_r+0x2e8>)
 800b8a0:	6830      	ldr	r0, [r6, #0]
 800b8a2:	e9c3 2200 	strd	r2, r2, [r3]
 800b8a6:	f7ff fab9 	bl	800ae1c <free>
 800b8aa:	6034      	str	r4, [r6, #0]
 800b8ac:	b00d      	add	sp, #52	; 0x34
 800b8ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8b2:	6831      	ldr	r1, [r6, #0]
 800b8b4:	2900      	cmp	r1, #0
 800b8b6:	d162      	bne.n	800b97e <_tzset_unlocked_r+0x106>
 800b8b8:	6830      	ldr	r0, [r6, #0]
 800b8ba:	f7ff faaf 	bl	800ae1c <free>
 800b8be:	4620      	mov	r0, r4
 800b8c0:	f7f4 fc44 	bl	800014c <strlen>
 800b8c4:	1c41      	adds	r1, r0, #1
 800b8c6:	4638      	mov	r0, r7
 800b8c8:	f7ff fdb0 	bl	800b42c <_malloc_r>
 800b8cc:	6030      	str	r0, [r6, #0]
 800b8ce:	2800      	cmp	r0, #0
 800b8d0:	d15a      	bne.n	800b988 <_tzset_unlocked_r+0x110>
 800b8d2:	7823      	ldrb	r3, [r4, #0]
 800b8d4:	ae0a      	add	r6, sp, #40	; 0x28
 800b8d6:	2b3a      	cmp	r3, #58	; 0x3a
 800b8d8:	bf08      	it	eq
 800b8da:	3401      	addeq	r4, #1
 800b8dc:	4633      	mov	r3, r6
 800b8de:	4620      	mov	r0, r4
 800b8e0:	4aa0      	ldr	r2, [pc, #640]	; (800bb64 <_tzset_unlocked_r+0x2ec>)
 800b8e2:	49a1      	ldr	r1, [pc, #644]	; (800bb68 <_tzset_unlocked_r+0x2f0>)
 800b8e4:	f000 fee0 	bl	800c6a8 <siscanf>
 800b8e8:	2800      	cmp	r0, #0
 800b8ea:	dddf      	ble.n	800b8ac <_tzset_unlocked_r+0x34>
 800b8ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b8ee:	18e7      	adds	r7, r4, r3
 800b8f0:	5ce3      	ldrb	r3, [r4, r3]
 800b8f2:	2b2d      	cmp	r3, #45	; 0x2d
 800b8f4:	d14c      	bne.n	800b990 <_tzset_unlocked_r+0x118>
 800b8f6:	f04f 38ff 	mov.w	r8, #4294967295
 800b8fa:	3701      	adds	r7, #1
 800b8fc:	2400      	movs	r4, #0
 800b8fe:	f10d 0a20 	add.w	sl, sp, #32
 800b902:	f10d 0b1e 	add.w	fp, sp, #30
 800b906:	4633      	mov	r3, r6
 800b908:	4638      	mov	r0, r7
 800b90a:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 800b90e:	4997      	ldr	r1, [pc, #604]	; (800bb6c <_tzset_unlocked_r+0x2f4>)
 800b910:	9603      	str	r6, [sp, #12]
 800b912:	f8cd b000 	str.w	fp, [sp]
 800b916:	aa07      	add	r2, sp, #28
 800b918:	f8ad 401e 	strh.w	r4, [sp, #30]
 800b91c:	f8ad 4020 	strh.w	r4, [sp, #32]
 800b920:	f000 fec2 	bl	800c6a8 <siscanf>
 800b924:	42a0      	cmp	r0, r4
 800b926:	ddc1      	ble.n	800b8ac <_tzset_unlocked_r+0x34>
 800b928:	213c      	movs	r1, #60	; 0x3c
 800b92a:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800b92e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800b932:	f8df 923c 	ldr.w	r9, [pc, #572]	; 800bb70 <_tzset_unlocked_r+0x2f8>
 800b936:	fb01 3302 	mla	r3, r1, r2, r3
 800b93a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800b93e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800b942:	fb01 3302 	mla	r3, r1, r2, r3
 800b946:	fb08 f303 	mul.w	r3, r8, r3
 800b94a:	f8df 8214 	ldr.w	r8, [pc, #532]	; 800bb60 <_tzset_unlocked_r+0x2e8>
 800b94e:	62ab      	str	r3, [r5, #40]	; 0x28
 800b950:	4b84      	ldr	r3, [pc, #528]	; (800bb64 <_tzset_unlocked_r+0x2ec>)
 800b952:	464a      	mov	r2, r9
 800b954:	f8c8 3000 	str.w	r3, [r8]
 800b958:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b95a:	4983      	ldr	r1, [pc, #524]	; (800bb68 <_tzset_unlocked_r+0x2f0>)
 800b95c:	441f      	add	r7, r3
 800b95e:	4638      	mov	r0, r7
 800b960:	4633      	mov	r3, r6
 800b962:	f000 fea1 	bl	800c6a8 <siscanf>
 800b966:	42a0      	cmp	r0, r4
 800b968:	dc18      	bgt.n	800b99c <_tzset_unlocked_r+0x124>
 800b96a:	f8d8 3000 	ldr.w	r3, [r8]
 800b96e:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800b970:	f8c8 3004 	str.w	r3, [r8, #4]
 800b974:	4b77      	ldr	r3, [pc, #476]	; (800bb54 <_tzset_unlocked_r+0x2dc>)
 800b976:	601a      	str	r2, [r3, #0]
 800b978:	4b78      	ldr	r3, [pc, #480]	; (800bb5c <_tzset_unlocked_r+0x2e4>)
 800b97a:	601c      	str	r4, [r3, #0]
 800b97c:	e796      	b.n	800b8ac <_tzset_unlocked_r+0x34>
 800b97e:	f7f4 fbed 	bl	800015c <strcmp>
 800b982:	2800      	cmp	r0, #0
 800b984:	d198      	bne.n	800b8b8 <_tzset_unlocked_r+0x40>
 800b986:	e791      	b.n	800b8ac <_tzset_unlocked_r+0x34>
 800b988:	4621      	mov	r1, r4
 800b98a:	f000 fefc 	bl	800c786 <strcpy>
 800b98e:	e7a0      	b.n	800b8d2 <_tzset_unlocked_r+0x5a>
 800b990:	2b2b      	cmp	r3, #43	; 0x2b
 800b992:	f04f 0801 	mov.w	r8, #1
 800b996:	bf08      	it	eq
 800b998:	3701      	addeq	r7, #1
 800b99a:	e7af      	b.n	800b8fc <_tzset_unlocked_r+0x84>
 800b99c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b99e:	f8c8 9004 	str.w	r9, [r8, #4]
 800b9a2:	18fc      	adds	r4, r7, r3
 800b9a4:	5cfb      	ldrb	r3, [r7, r3]
 800b9a6:	2b2d      	cmp	r3, #45	; 0x2d
 800b9a8:	f040 808c 	bne.w	800bac4 <_tzset_unlocked_r+0x24c>
 800b9ac:	f04f 37ff 	mov.w	r7, #4294967295
 800b9b0:	3401      	adds	r4, #1
 800b9b2:	2300      	movs	r3, #0
 800b9b4:	4620      	mov	r0, r4
 800b9b6:	f8ad 301c 	strh.w	r3, [sp, #28]
 800b9ba:	f8ad 301e 	strh.w	r3, [sp, #30]
 800b9be:	f8ad 3020 	strh.w	r3, [sp, #32]
 800b9c2:	930a      	str	r3, [sp, #40]	; 0x28
 800b9c4:	e9cd a602 	strd	sl, r6, [sp, #8]
 800b9c8:	4633      	mov	r3, r6
 800b9ca:	e9cd b600 	strd	fp, r6, [sp]
 800b9ce:	4967      	ldr	r1, [pc, #412]	; (800bb6c <_tzset_unlocked_r+0x2f4>)
 800b9d0:	aa07      	add	r2, sp, #28
 800b9d2:	f000 fe69 	bl	800c6a8 <siscanf>
 800b9d6:	2800      	cmp	r0, #0
 800b9d8:	dc7a      	bgt.n	800bad0 <_tzset_unlocked_r+0x258>
 800b9da:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800b9dc:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 800b9e0:	462f      	mov	r7, r5
 800b9e2:	f04f 0900 	mov.w	r9, #0
 800b9e6:	652b      	str	r3, [r5, #80]	; 0x50
 800b9e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b9ea:	441c      	add	r4, r3
 800b9ec:	7823      	ldrb	r3, [r4, #0]
 800b9ee:	2b2c      	cmp	r3, #44	; 0x2c
 800b9f0:	bf08      	it	eq
 800b9f2:	3401      	addeq	r4, #1
 800b9f4:	f894 8000 	ldrb.w	r8, [r4]
 800b9f8:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 800b9fc:	d17a      	bne.n	800baf4 <_tzset_unlocked_r+0x27c>
 800b9fe:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 800ba02:	e9cd 6301 	strd	r6, r3, [sp, #4]
 800ba06:	ab09      	add	r3, sp, #36	; 0x24
 800ba08:	9300      	str	r3, [sp, #0]
 800ba0a:	4620      	mov	r0, r4
 800ba0c:	4633      	mov	r3, r6
 800ba0e:	4959      	ldr	r1, [pc, #356]	; (800bb74 <_tzset_unlocked_r+0x2fc>)
 800ba10:	9603      	str	r6, [sp, #12]
 800ba12:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 800ba16:	f000 fe47 	bl	800c6a8 <siscanf>
 800ba1a:	2803      	cmp	r0, #3
 800ba1c:	f47f af46 	bne.w	800b8ac <_tzset_unlocked_r+0x34>
 800ba20:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 800ba24:	1e4b      	subs	r3, r1, #1
 800ba26:	2b0b      	cmp	r3, #11
 800ba28:	f63f af40 	bhi.w	800b8ac <_tzset_unlocked_r+0x34>
 800ba2c:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 800ba30:	1e53      	subs	r3, r2, #1
 800ba32:	2b04      	cmp	r3, #4
 800ba34:	f63f af3a 	bhi.w	800b8ac <_tzset_unlocked_r+0x34>
 800ba38:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 800ba3c:	2b06      	cmp	r3, #6
 800ba3e:	f63f af35 	bhi.w	800b8ac <_tzset_unlocked_r+0x34>
 800ba42:	e9c7 1203 	strd	r1, r2, [r7, #12]
 800ba46:	f887 8008 	strb.w	r8, [r7, #8]
 800ba4a:	617b      	str	r3, [r7, #20]
 800ba4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba4e:	eb04 0803 	add.w	r8, r4, r3
 800ba52:	2302      	movs	r3, #2
 800ba54:	f8ad 301c 	strh.w	r3, [sp, #28]
 800ba58:	2300      	movs	r3, #0
 800ba5a:	f8ad 301e 	strh.w	r3, [sp, #30]
 800ba5e:	f8ad 3020 	strh.w	r3, [sp, #32]
 800ba62:	930a      	str	r3, [sp, #40]	; 0x28
 800ba64:	f898 3000 	ldrb.w	r3, [r8]
 800ba68:	2b2f      	cmp	r3, #47	; 0x2f
 800ba6a:	d109      	bne.n	800ba80 <_tzset_unlocked_r+0x208>
 800ba6c:	4633      	mov	r3, r6
 800ba6e:	4640      	mov	r0, r8
 800ba70:	e9cd a602 	strd	sl, r6, [sp, #8]
 800ba74:	e9cd b600 	strd	fp, r6, [sp]
 800ba78:	493f      	ldr	r1, [pc, #252]	; (800bb78 <_tzset_unlocked_r+0x300>)
 800ba7a:	aa07      	add	r2, sp, #28
 800ba7c:	f000 fe14 	bl	800c6a8 <siscanf>
 800ba80:	213c      	movs	r1, #60	; 0x3c
 800ba82:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800ba86:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800ba8a:	3728      	adds	r7, #40	; 0x28
 800ba8c:	fb01 3302 	mla	r3, r1, r2, r3
 800ba90:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800ba94:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800ba98:	fb01 3302 	mla	r3, r1, r2, r3
 800ba9c:	f847 3c10 	str.w	r3, [r7, #-16]
 800baa0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800baa2:	4444      	add	r4, r8
 800baa4:	f1b9 0f00 	cmp.w	r9, #0
 800baa8:	d021      	beq.n	800baee <_tzset_unlocked_r+0x276>
 800baaa:	6868      	ldr	r0, [r5, #4]
 800baac:	f7ff fe28 	bl	800b700 <__tzcalc_limits>
 800bab0:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800bab2:	4b28      	ldr	r3, [pc, #160]	; (800bb54 <_tzset_unlocked_r+0x2dc>)
 800bab4:	601a      	str	r2, [r3, #0]
 800bab6:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800bab8:	1a9b      	subs	r3, r3, r2
 800baba:	bf18      	it	ne
 800babc:	2301      	movne	r3, #1
 800babe:	4a27      	ldr	r2, [pc, #156]	; (800bb5c <_tzset_unlocked_r+0x2e4>)
 800bac0:	6013      	str	r3, [r2, #0]
 800bac2:	e6f3      	b.n	800b8ac <_tzset_unlocked_r+0x34>
 800bac4:	2b2b      	cmp	r3, #43	; 0x2b
 800bac6:	f04f 0701 	mov.w	r7, #1
 800baca:	bf08      	it	eq
 800bacc:	3401      	addeq	r4, #1
 800bace:	e770      	b.n	800b9b2 <_tzset_unlocked_r+0x13a>
 800bad0:	213c      	movs	r1, #60	; 0x3c
 800bad2:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800bad6:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800bada:	fb01 3302 	mla	r3, r1, r2, r3
 800bade:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800bae2:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800bae6:	fb01 3302 	mla	r3, r1, r2, r3
 800baea:	437b      	muls	r3, r7
 800baec:	e778      	b.n	800b9e0 <_tzset_unlocked_r+0x168>
 800baee:	f04f 0901 	mov.w	r9, #1
 800baf2:	e77b      	b.n	800b9ec <_tzset_unlocked_r+0x174>
 800baf4:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 800baf8:	bf0a      	itet	eq
 800bafa:	4643      	moveq	r3, r8
 800bafc:	2344      	movne	r3, #68	; 0x44
 800bafe:	3401      	addeq	r4, #1
 800bb00:	220a      	movs	r2, #10
 800bb02:	4620      	mov	r0, r4
 800bb04:	a90b      	add	r1, sp, #44	; 0x2c
 800bb06:	9305      	str	r3, [sp, #20]
 800bb08:	f000 fece 	bl	800c8a8 <strtoul>
 800bb0c:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800bb10:	9b05      	ldr	r3, [sp, #20]
 800bb12:	45a0      	cmp	r8, r4
 800bb14:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 800bb18:	d114      	bne.n	800bb44 <_tzset_unlocked_r+0x2cc>
 800bb1a:	234d      	movs	r3, #77	; 0x4d
 800bb1c:	f1b9 0f00 	cmp.w	r9, #0
 800bb20:	d107      	bne.n	800bb32 <_tzset_unlocked_r+0x2ba>
 800bb22:	2103      	movs	r1, #3
 800bb24:	722b      	strb	r3, [r5, #8]
 800bb26:	2302      	movs	r3, #2
 800bb28:	f8c5 9014 	str.w	r9, [r5, #20]
 800bb2c:	e9c5 1303 	strd	r1, r3, [r5, #12]
 800bb30:	e78f      	b.n	800ba52 <_tzset_unlocked_r+0x1da>
 800bb32:	220b      	movs	r2, #11
 800bb34:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 800bb38:	2301      	movs	r3, #1
 800bb3a:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 800bb3e:	2300      	movs	r3, #0
 800bb40:	63eb      	str	r3, [r5, #60]	; 0x3c
 800bb42:	e786      	b.n	800ba52 <_tzset_unlocked_r+0x1da>
 800bb44:	b280      	uxth	r0, r0
 800bb46:	723b      	strb	r3, [r7, #8]
 800bb48:	6178      	str	r0, [r7, #20]
 800bb4a:	e782      	b.n	800ba52 <_tzset_unlocked_r+0x1da>
 800bb4c:	0800e547 	.word	0x0800e547
 800bb50:	20003770 	.word	0x20003770
 800bb54:	20003778 	.word	0x20003778
 800bb58:	0800e54a 	.word	0x0800e54a
 800bb5c:	20003774 	.word	0x20003774
 800bb60:	2000054c 	.word	0x2000054c
 800bb64:	20003763 	.word	0x20003763
 800bb68:	0800e54e 	.word	0x0800e54e
 800bb6c:	0800e571 	.word	0x0800e571
 800bb70:	20003758 	.word	0x20003758
 800bb74:	0800e55d 	.word	0x0800e55d
 800bb78:	0800e570 	.word	0x0800e570

0800bb7c <__assert_func>:
 800bb7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bb7e:	4614      	mov	r4, r2
 800bb80:	461a      	mov	r2, r3
 800bb82:	4b09      	ldr	r3, [pc, #36]	; (800bba8 <__assert_func+0x2c>)
 800bb84:	4605      	mov	r5, r0
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	68d8      	ldr	r0, [r3, #12]
 800bb8a:	b14c      	cbz	r4, 800bba0 <__assert_func+0x24>
 800bb8c:	4b07      	ldr	r3, [pc, #28]	; (800bbac <__assert_func+0x30>)
 800bb8e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bb92:	9100      	str	r1, [sp, #0]
 800bb94:	462b      	mov	r3, r5
 800bb96:	4906      	ldr	r1, [pc, #24]	; (800bbb0 <__assert_func+0x34>)
 800bb98:	f000 f822 	bl	800bbe0 <fiprintf>
 800bb9c:	f000 ff60 	bl	800ca60 <abort>
 800bba0:	4b04      	ldr	r3, [pc, #16]	; (800bbb4 <__assert_func+0x38>)
 800bba2:	461c      	mov	r4, r3
 800bba4:	e7f3      	b.n	800bb8e <__assert_func+0x12>
 800bba6:	bf00      	nop
 800bba8:	200004e8 	.word	0x200004e8
 800bbac:	0800e583 	.word	0x0800e583
 800bbb0:	0800e590 	.word	0x0800e590
 800bbb4:	0800e5be 	.word	0x0800e5be

0800bbb8 <div>:
 800bbb8:	b510      	push	{r4, lr}
 800bbba:	fb91 f4f2 	sdiv	r4, r1, r2
 800bbbe:	2900      	cmp	r1, #0
 800bbc0:	fb02 1314 	mls	r3, r2, r4, r1
 800bbc4:	db06      	blt.n	800bbd4 <div+0x1c>
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	da01      	bge.n	800bbce <div+0x16>
 800bbca:	3401      	adds	r4, #1
 800bbcc:	1a9b      	subs	r3, r3, r2
 800bbce:	e9c0 4300 	strd	r4, r3, [r0]
 800bbd2:	bd10      	pop	{r4, pc}
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	bfc4      	itt	gt
 800bbd8:	f104 34ff 	addgt.w	r4, r4, #4294967295
 800bbdc:	189b      	addgt	r3, r3, r2
 800bbde:	e7f6      	b.n	800bbce <div+0x16>

0800bbe0 <fiprintf>:
 800bbe0:	b40e      	push	{r1, r2, r3}
 800bbe2:	b503      	push	{r0, r1, lr}
 800bbe4:	4601      	mov	r1, r0
 800bbe6:	ab03      	add	r3, sp, #12
 800bbe8:	4805      	ldr	r0, [pc, #20]	; (800bc00 <fiprintf+0x20>)
 800bbea:	f853 2b04 	ldr.w	r2, [r3], #4
 800bbee:	6800      	ldr	r0, [r0, #0]
 800bbf0:	9301      	str	r3, [sp, #4]
 800bbf2:	f000 fa93 	bl	800c11c <_vfiprintf_r>
 800bbf6:	b002      	add	sp, #8
 800bbf8:	f85d eb04 	ldr.w	lr, [sp], #4
 800bbfc:	b003      	add	sp, #12
 800bbfe:	4770      	bx	lr
 800bc00:	200004e8 	.word	0x200004e8

0800bc04 <_findenv_r>:
 800bc04:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc08:	f8df a06c 	ldr.w	sl, [pc, #108]	; 800bc78 <_findenv_r+0x74>
 800bc0c:	4607      	mov	r7, r0
 800bc0e:	4689      	mov	r9, r1
 800bc10:	4616      	mov	r6, r2
 800bc12:	f000 ff3d 	bl	800ca90 <__env_lock>
 800bc16:	f8da 4000 	ldr.w	r4, [sl]
 800bc1a:	b134      	cbz	r4, 800bc2a <_findenv_r+0x26>
 800bc1c:	464b      	mov	r3, r9
 800bc1e:	4698      	mov	r8, r3
 800bc20:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bc24:	b13a      	cbz	r2, 800bc36 <_findenv_r+0x32>
 800bc26:	2a3d      	cmp	r2, #61	; 0x3d
 800bc28:	d1f9      	bne.n	800bc1e <_findenv_r+0x1a>
 800bc2a:	4638      	mov	r0, r7
 800bc2c:	f000 ff36 	bl	800ca9c <__env_unlock>
 800bc30:	2000      	movs	r0, #0
 800bc32:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc36:	eba8 0809 	sub.w	r8, r8, r9
 800bc3a:	46a3      	mov	fp, r4
 800bc3c:	f854 0b04 	ldr.w	r0, [r4], #4
 800bc40:	2800      	cmp	r0, #0
 800bc42:	d0f2      	beq.n	800bc2a <_findenv_r+0x26>
 800bc44:	4642      	mov	r2, r8
 800bc46:	4649      	mov	r1, r9
 800bc48:	f000 fda5 	bl	800c796 <strncmp>
 800bc4c:	2800      	cmp	r0, #0
 800bc4e:	d1f4      	bne.n	800bc3a <_findenv_r+0x36>
 800bc50:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800bc54:	eb03 0508 	add.w	r5, r3, r8
 800bc58:	f813 3008 	ldrb.w	r3, [r3, r8]
 800bc5c:	2b3d      	cmp	r3, #61	; 0x3d
 800bc5e:	d1ec      	bne.n	800bc3a <_findenv_r+0x36>
 800bc60:	f8da 3000 	ldr.w	r3, [sl]
 800bc64:	4638      	mov	r0, r7
 800bc66:	ebab 0303 	sub.w	r3, fp, r3
 800bc6a:	109b      	asrs	r3, r3, #2
 800bc6c:	6033      	str	r3, [r6, #0]
 800bc6e:	f000 ff15 	bl	800ca9c <__env_unlock>
 800bc72:	1c68      	adds	r0, r5, #1
 800bc74:	e7dd      	b.n	800bc32 <_findenv_r+0x2e>
 800bc76:	bf00      	nop
 800bc78:	20000494 	.word	0x20000494

0800bc7c <_getenv_r>:
 800bc7c:	b507      	push	{r0, r1, r2, lr}
 800bc7e:	aa01      	add	r2, sp, #4
 800bc80:	f7ff ffc0 	bl	800bc04 <_findenv_r>
 800bc84:	b003      	add	sp, #12
 800bc86:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800bc8c <__gettzinfo>:
 800bc8c:	4800      	ldr	r0, [pc, #0]	; (800bc90 <__gettzinfo+0x4>)
 800bc8e:	4770      	bx	lr
 800bc90:	20000558 	.word	0x20000558

0800bc94 <gmtime_r>:
 800bc94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc98:	e9d0 6700 	ldrd	r6, r7, [r0]
 800bc9c:	460c      	mov	r4, r1
 800bc9e:	2300      	movs	r3, #0
 800bca0:	4630      	mov	r0, r6
 800bca2:	4639      	mov	r1, r7
 800bca4:	4a4e      	ldr	r2, [pc, #312]	; (800bde0 <gmtime_r+0x14c>)
 800bca6:	f7f4 fa83 	bl	80001b0 <__aeabi_ldivmod>
 800bcaa:	4639      	mov	r1, r7
 800bcac:	4605      	mov	r5, r0
 800bcae:	2300      	movs	r3, #0
 800bcb0:	4630      	mov	r0, r6
 800bcb2:	4a4b      	ldr	r2, [pc, #300]	; (800bde0 <gmtime_r+0x14c>)
 800bcb4:	f7f4 fa7c 	bl	80001b0 <__aeabi_ldivmod>
 800bcb8:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 800bcbc:	2a00      	cmp	r2, #0
 800bcbe:	bfbc      	itt	lt
 800bcc0:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 800bcc4:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 800bcc8:	fbb2 f1f0 	udiv	r1, r2, r0
 800bccc:	fb00 2211 	mls	r2, r0, r1, r2
 800bcd0:	f04f 003c 	mov.w	r0, #60	; 0x3c
 800bcd4:	60a1      	str	r1, [r4, #8]
 800bcd6:	fbb2 f1f0 	udiv	r1, r2, r0
 800bcda:	fb00 2211 	mls	r2, r0, r1, r2
 800bcde:	6061      	str	r1, [r4, #4]
 800bce0:	f04f 0107 	mov.w	r1, #7
 800bce4:	f505 232f 	add.w	r3, r5, #716800	; 0xaf000
 800bce8:	bfac      	ite	ge
 800bcea:	f603 236c 	addwge	r3, r3, #2668	; 0xa6c
 800bcee:	f603 236b 	addwlt	r3, r3, #2667	; 0xa6b
 800bcf2:	6022      	str	r2, [r4, #0]
 800bcf4:	1cda      	adds	r2, r3, #3
 800bcf6:	fb92 f1f1 	sdiv	r1, r2, r1
 800bcfa:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800bcfe:	1a52      	subs	r2, r2, r1
 800bd00:	bf48      	it	mi
 800bd02:	3207      	addmi	r2, #7
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	4d37      	ldr	r5, [pc, #220]	; (800bde4 <gmtime_r+0x150>)
 800bd08:	61a2      	str	r2, [r4, #24]
 800bd0a:	bfbd      	ittte	lt
 800bd0c:	f5a3 320e 	sublt.w	r2, r3, #145408	; 0x23800
 800bd10:	f5a2 722c 	sublt.w	r2, r2, #688	; 0x2b0
 800bd14:	fb92 f5f5 	sdivlt	r5, r2, r5
 800bd18:	fb93 f5f5 	sdivge	r5, r3, r5
 800bd1c:	4832      	ldr	r0, [pc, #200]	; (800bde8 <gmtime_r+0x154>)
 800bd1e:	f648 62ac 	movw	r2, #36524	; 0x8eac
 800bd22:	fb00 3005 	mla	r0, r0, r5, r3
 800bd26:	f240 53b4 	movw	r3, #1460	; 0x5b4
 800bd2a:	fbb0 f2f2 	udiv	r2, r0, r2
 800bd2e:	fbb0 f1f3 	udiv	r1, r0, r3
 800bd32:	4402      	add	r2, r0
 800bd34:	1a52      	subs	r2, r2, r1
 800bd36:	492d      	ldr	r1, [pc, #180]	; (800bdec <gmtime_r+0x158>)
 800bd38:	f240 1c6d 	movw	ip, #365	; 0x16d
 800bd3c:	fbb0 f1f1 	udiv	r1, r0, r1
 800bd40:	1a52      	subs	r2, r2, r1
 800bd42:	fbb2 f1fc 	udiv	r1, r2, ip
 800bd46:	2764      	movs	r7, #100	; 0x64
 800bd48:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd4c:	fbb1 f6f7 	udiv	r6, r1, r7
 800bd50:	2299      	movs	r2, #153	; 0x99
 800bd52:	1af3      	subs	r3, r6, r3
 800bd54:	4403      	add	r3, r0
 800bd56:	fb0c 3311 	mls	r3, ip, r1, r3
 800bd5a:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
 800bd5e:	f10e 0e02 	add.w	lr, lr, #2
 800bd62:	fbbe f0f2 	udiv	r0, lr, r2
 800bd66:	f04f 0805 	mov.w	r8, #5
 800bd6a:	4342      	muls	r2, r0
 800bd6c:	3202      	adds	r2, #2
 800bd6e:	fbb2 f2f8 	udiv	r2, r2, r8
 800bd72:	f103 0c01 	add.w	ip, r3, #1
 800bd76:	ebac 0c02 	sub.w	ip, ip, r2
 800bd7a:	f240 52f9 	movw	r2, #1529	; 0x5f9
 800bd7e:	4596      	cmp	lr, r2
 800bd80:	bf94      	ite	ls
 800bd82:	2202      	movls	r2, #2
 800bd84:	f06f 0209 	mvnhi.w	r2, #9
 800bd88:	4410      	add	r0, r2
 800bd8a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800bd8e:	fb02 1505 	mla	r5, r2, r5, r1
 800bd92:	2801      	cmp	r0, #1
 800bd94:	bf98      	it	ls
 800bd96:	3501      	addls	r5, #1
 800bd98:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 800bd9c:	d30d      	bcc.n	800bdba <gmtime_r+0x126>
 800bd9e:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800bda2:	61e3      	str	r3, [r4, #28]
 800bda4:	2300      	movs	r3, #0
 800bda6:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 800bdaa:	e9c4 0504 	strd	r0, r5, [r4, #16]
 800bdae:	f8c4 c00c 	str.w	ip, [r4, #12]
 800bdb2:	4620      	mov	r0, r4
 800bdb4:	6223      	str	r3, [r4, #32]
 800bdb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bdba:	078a      	lsls	r2, r1, #30
 800bdbc:	d102      	bne.n	800bdc4 <gmtime_r+0x130>
 800bdbe:	fb07 1616 	mls	r6, r7, r6, r1
 800bdc2:	b95e      	cbnz	r6, 800bddc <gmtime_r+0x148>
 800bdc4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800bdc8:	fbb1 f6f2 	udiv	r6, r1, r2
 800bdcc:	fb02 1216 	mls	r2, r2, r6, r1
 800bdd0:	fab2 f282 	clz	r2, r2
 800bdd4:	0952      	lsrs	r2, r2, #5
 800bdd6:	333b      	adds	r3, #59	; 0x3b
 800bdd8:	4413      	add	r3, r2
 800bdda:	e7e2      	b.n	800bda2 <gmtime_r+0x10e>
 800bddc:	2201      	movs	r2, #1
 800bdde:	e7fa      	b.n	800bdd6 <gmtime_r+0x142>
 800bde0:	00015180 	.word	0x00015180
 800bde4:	00023ab1 	.word	0x00023ab1
 800bde8:	fffdc54f 	.word	0xfffdc54f
 800bdec:	00023ab0 	.word	0x00023ab0

0800bdf0 <__retarget_lock_init_recursive>:
 800bdf0:	4770      	bx	lr

0800bdf2 <__retarget_lock_acquire>:
 800bdf2:	4770      	bx	lr

0800bdf4 <__retarget_lock_acquire_recursive>:
 800bdf4:	4770      	bx	lr

0800bdf6 <__retarget_lock_release>:
 800bdf6:	4770      	bx	lr

0800bdf8 <__retarget_lock_release_recursive>:
 800bdf8:	4770      	bx	lr
	...

0800bdfc <__malloc_lock>:
 800bdfc:	4801      	ldr	r0, [pc, #4]	; (800be04 <__malloc_lock+0x8>)
 800bdfe:	f7ff bff9 	b.w	800bdf4 <__retarget_lock_acquire_recursive>
 800be02:	bf00      	nop
 800be04:	2000377d 	.word	0x2000377d

0800be08 <__malloc_unlock>:
 800be08:	4801      	ldr	r0, [pc, #4]	; (800be10 <__malloc_unlock+0x8>)
 800be0a:	f7ff bff5 	b.w	800bdf8 <__retarget_lock_release_recursive>
 800be0e:	bf00      	nop
 800be10:	2000377d 	.word	0x2000377d

0800be14 <__ssputs_r>:
 800be14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be18:	688e      	ldr	r6, [r1, #8]
 800be1a:	4682      	mov	sl, r0
 800be1c:	429e      	cmp	r6, r3
 800be1e:	460c      	mov	r4, r1
 800be20:	4690      	mov	r8, r2
 800be22:	461f      	mov	r7, r3
 800be24:	d838      	bhi.n	800be98 <__ssputs_r+0x84>
 800be26:	898a      	ldrh	r2, [r1, #12]
 800be28:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800be2c:	d032      	beq.n	800be94 <__ssputs_r+0x80>
 800be2e:	6825      	ldr	r5, [r4, #0]
 800be30:	6909      	ldr	r1, [r1, #16]
 800be32:	3301      	adds	r3, #1
 800be34:	eba5 0901 	sub.w	r9, r5, r1
 800be38:	6965      	ldr	r5, [r4, #20]
 800be3a:	444b      	add	r3, r9
 800be3c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800be40:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800be44:	106d      	asrs	r5, r5, #1
 800be46:	429d      	cmp	r5, r3
 800be48:	bf38      	it	cc
 800be4a:	461d      	movcc	r5, r3
 800be4c:	0553      	lsls	r3, r2, #21
 800be4e:	d531      	bpl.n	800beb4 <__ssputs_r+0xa0>
 800be50:	4629      	mov	r1, r5
 800be52:	f7ff faeb 	bl	800b42c <_malloc_r>
 800be56:	4606      	mov	r6, r0
 800be58:	b950      	cbnz	r0, 800be70 <__ssputs_r+0x5c>
 800be5a:	230c      	movs	r3, #12
 800be5c:	f04f 30ff 	mov.w	r0, #4294967295
 800be60:	f8ca 3000 	str.w	r3, [sl]
 800be64:	89a3      	ldrh	r3, [r4, #12]
 800be66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800be6a:	81a3      	strh	r3, [r4, #12]
 800be6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be70:	464a      	mov	r2, r9
 800be72:	6921      	ldr	r1, [r4, #16]
 800be74:	f7fe ffea 	bl	800ae4c <memcpy>
 800be78:	89a3      	ldrh	r3, [r4, #12]
 800be7a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800be7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800be82:	81a3      	strh	r3, [r4, #12]
 800be84:	6126      	str	r6, [r4, #16]
 800be86:	444e      	add	r6, r9
 800be88:	6026      	str	r6, [r4, #0]
 800be8a:	463e      	mov	r6, r7
 800be8c:	6165      	str	r5, [r4, #20]
 800be8e:	eba5 0509 	sub.w	r5, r5, r9
 800be92:	60a5      	str	r5, [r4, #8]
 800be94:	42be      	cmp	r6, r7
 800be96:	d900      	bls.n	800be9a <__ssputs_r+0x86>
 800be98:	463e      	mov	r6, r7
 800be9a:	4632      	mov	r2, r6
 800be9c:	4641      	mov	r1, r8
 800be9e:	6820      	ldr	r0, [r4, #0]
 800bea0:	f001 f83c 	bl	800cf1c <memmove>
 800bea4:	68a3      	ldr	r3, [r4, #8]
 800bea6:	2000      	movs	r0, #0
 800bea8:	1b9b      	subs	r3, r3, r6
 800beaa:	60a3      	str	r3, [r4, #8]
 800beac:	6823      	ldr	r3, [r4, #0]
 800beae:	4433      	add	r3, r6
 800beb0:	6023      	str	r3, [r4, #0]
 800beb2:	e7db      	b.n	800be6c <__ssputs_r+0x58>
 800beb4:	462a      	mov	r2, r5
 800beb6:	f001 f84b 	bl	800cf50 <_realloc_r>
 800beba:	4606      	mov	r6, r0
 800bebc:	2800      	cmp	r0, #0
 800bebe:	d1e1      	bne.n	800be84 <__ssputs_r+0x70>
 800bec0:	4650      	mov	r0, sl
 800bec2:	6921      	ldr	r1, [r4, #16]
 800bec4:	f7ff fa4a 	bl	800b35c <_free_r>
 800bec8:	e7c7      	b.n	800be5a <__ssputs_r+0x46>
	...

0800becc <_svfiprintf_r>:
 800becc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bed0:	4698      	mov	r8, r3
 800bed2:	898b      	ldrh	r3, [r1, #12]
 800bed4:	4607      	mov	r7, r0
 800bed6:	061b      	lsls	r3, r3, #24
 800bed8:	460d      	mov	r5, r1
 800beda:	4614      	mov	r4, r2
 800bedc:	b09d      	sub	sp, #116	; 0x74
 800bede:	d50e      	bpl.n	800befe <_svfiprintf_r+0x32>
 800bee0:	690b      	ldr	r3, [r1, #16]
 800bee2:	b963      	cbnz	r3, 800befe <_svfiprintf_r+0x32>
 800bee4:	2140      	movs	r1, #64	; 0x40
 800bee6:	f7ff faa1 	bl	800b42c <_malloc_r>
 800beea:	6028      	str	r0, [r5, #0]
 800beec:	6128      	str	r0, [r5, #16]
 800beee:	b920      	cbnz	r0, 800befa <_svfiprintf_r+0x2e>
 800bef0:	230c      	movs	r3, #12
 800bef2:	603b      	str	r3, [r7, #0]
 800bef4:	f04f 30ff 	mov.w	r0, #4294967295
 800bef8:	e0d1      	b.n	800c09e <_svfiprintf_r+0x1d2>
 800befa:	2340      	movs	r3, #64	; 0x40
 800befc:	616b      	str	r3, [r5, #20]
 800befe:	2300      	movs	r3, #0
 800bf00:	9309      	str	r3, [sp, #36]	; 0x24
 800bf02:	2320      	movs	r3, #32
 800bf04:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bf08:	2330      	movs	r3, #48	; 0x30
 800bf0a:	f04f 0901 	mov.w	r9, #1
 800bf0e:	f8cd 800c 	str.w	r8, [sp, #12]
 800bf12:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c0b8 <_svfiprintf_r+0x1ec>
 800bf16:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bf1a:	4623      	mov	r3, r4
 800bf1c:	469a      	mov	sl, r3
 800bf1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bf22:	b10a      	cbz	r2, 800bf28 <_svfiprintf_r+0x5c>
 800bf24:	2a25      	cmp	r2, #37	; 0x25
 800bf26:	d1f9      	bne.n	800bf1c <_svfiprintf_r+0x50>
 800bf28:	ebba 0b04 	subs.w	fp, sl, r4
 800bf2c:	d00b      	beq.n	800bf46 <_svfiprintf_r+0x7a>
 800bf2e:	465b      	mov	r3, fp
 800bf30:	4622      	mov	r2, r4
 800bf32:	4629      	mov	r1, r5
 800bf34:	4638      	mov	r0, r7
 800bf36:	f7ff ff6d 	bl	800be14 <__ssputs_r>
 800bf3a:	3001      	adds	r0, #1
 800bf3c:	f000 80aa 	beq.w	800c094 <_svfiprintf_r+0x1c8>
 800bf40:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bf42:	445a      	add	r2, fp
 800bf44:	9209      	str	r2, [sp, #36]	; 0x24
 800bf46:	f89a 3000 	ldrb.w	r3, [sl]
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	f000 80a2 	beq.w	800c094 <_svfiprintf_r+0x1c8>
 800bf50:	2300      	movs	r3, #0
 800bf52:	f04f 32ff 	mov.w	r2, #4294967295
 800bf56:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bf5a:	f10a 0a01 	add.w	sl, sl, #1
 800bf5e:	9304      	str	r3, [sp, #16]
 800bf60:	9307      	str	r3, [sp, #28]
 800bf62:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bf66:	931a      	str	r3, [sp, #104]	; 0x68
 800bf68:	4654      	mov	r4, sl
 800bf6a:	2205      	movs	r2, #5
 800bf6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf70:	4851      	ldr	r0, [pc, #324]	; (800c0b8 <_svfiprintf_r+0x1ec>)
 800bf72:	f000 ffc5 	bl	800cf00 <memchr>
 800bf76:	9a04      	ldr	r2, [sp, #16]
 800bf78:	b9d8      	cbnz	r0, 800bfb2 <_svfiprintf_r+0xe6>
 800bf7a:	06d0      	lsls	r0, r2, #27
 800bf7c:	bf44      	itt	mi
 800bf7e:	2320      	movmi	r3, #32
 800bf80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bf84:	0711      	lsls	r1, r2, #28
 800bf86:	bf44      	itt	mi
 800bf88:	232b      	movmi	r3, #43	; 0x2b
 800bf8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bf8e:	f89a 3000 	ldrb.w	r3, [sl]
 800bf92:	2b2a      	cmp	r3, #42	; 0x2a
 800bf94:	d015      	beq.n	800bfc2 <_svfiprintf_r+0xf6>
 800bf96:	4654      	mov	r4, sl
 800bf98:	2000      	movs	r0, #0
 800bf9a:	f04f 0c0a 	mov.w	ip, #10
 800bf9e:	9a07      	ldr	r2, [sp, #28]
 800bfa0:	4621      	mov	r1, r4
 800bfa2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bfa6:	3b30      	subs	r3, #48	; 0x30
 800bfa8:	2b09      	cmp	r3, #9
 800bfaa:	d94e      	bls.n	800c04a <_svfiprintf_r+0x17e>
 800bfac:	b1b0      	cbz	r0, 800bfdc <_svfiprintf_r+0x110>
 800bfae:	9207      	str	r2, [sp, #28]
 800bfb0:	e014      	b.n	800bfdc <_svfiprintf_r+0x110>
 800bfb2:	eba0 0308 	sub.w	r3, r0, r8
 800bfb6:	fa09 f303 	lsl.w	r3, r9, r3
 800bfba:	4313      	orrs	r3, r2
 800bfbc:	46a2      	mov	sl, r4
 800bfbe:	9304      	str	r3, [sp, #16]
 800bfc0:	e7d2      	b.n	800bf68 <_svfiprintf_r+0x9c>
 800bfc2:	9b03      	ldr	r3, [sp, #12]
 800bfc4:	1d19      	adds	r1, r3, #4
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	9103      	str	r1, [sp, #12]
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	bfbb      	ittet	lt
 800bfce:	425b      	neglt	r3, r3
 800bfd0:	f042 0202 	orrlt.w	r2, r2, #2
 800bfd4:	9307      	strge	r3, [sp, #28]
 800bfd6:	9307      	strlt	r3, [sp, #28]
 800bfd8:	bfb8      	it	lt
 800bfda:	9204      	strlt	r2, [sp, #16]
 800bfdc:	7823      	ldrb	r3, [r4, #0]
 800bfde:	2b2e      	cmp	r3, #46	; 0x2e
 800bfe0:	d10c      	bne.n	800bffc <_svfiprintf_r+0x130>
 800bfe2:	7863      	ldrb	r3, [r4, #1]
 800bfe4:	2b2a      	cmp	r3, #42	; 0x2a
 800bfe6:	d135      	bne.n	800c054 <_svfiprintf_r+0x188>
 800bfe8:	9b03      	ldr	r3, [sp, #12]
 800bfea:	3402      	adds	r4, #2
 800bfec:	1d1a      	adds	r2, r3, #4
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	9203      	str	r2, [sp, #12]
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	bfb8      	it	lt
 800bff6:	f04f 33ff 	movlt.w	r3, #4294967295
 800bffa:	9305      	str	r3, [sp, #20]
 800bffc:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800c0bc <_svfiprintf_r+0x1f0>
 800c000:	2203      	movs	r2, #3
 800c002:	4650      	mov	r0, sl
 800c004:	7821      	ldrb	r1, [r4, #0]
 800c006:	f000 ff7b 	bl	800cf00 <memchr>
 800c00a:	b140      	cbz	r0, 800c01e <_svfiprintf_r+0x152>
 800c00c:	2340      	movs	r3, #64	; 0x40
 800c00e:	eba0 000a 	sub.w	r0, r0, sl
 800c012:	fa03 f000 	lsl.w	r0, r3, r0
 800c016:	9b04      	ldr	r3, [sp, #16]
 800c018:	3401      	adds	r4, #1
 800c01a:	4303      	orrs	r3, r0
 800c01c:	9304      	str	r3, [sp, #16]
 800c01e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c022:	2206      	movs	r2, #6
 800c024:	4826      	ldr	r0, [pc, #152]	; (800c0c0 <_svfiprintf_r+0x1f4>)
 800c026:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c02a:	f000 ff69 	bl	800cf00 <memchr>
 800c02e:	2800      	cmp	r0, #0
 800c030:	d038      	beq.n	800c0a4 <_svfiprintf_r+0x1d8>
 800c032:	4b24      	ldr	r3, [pc, #144]	; (800c0c4 <_svfiprintf_r+0x1f8>)
 800c034:	bb1b      	cbnz	r3, 800c07e <_svfiprintf_r+0x1b2>
 800c036:	9b03      	ldr	r3, [sp, #12]
 800c038:	3307      	adds	r3, #7
 800c03a:	f023 0307 	bic.w	r3, r3, #7
 800c03e:	3308      	adds	r3, #8
 800c040:	9303      	str	r3, [sp, #12]
 800c042:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c044:	4433      	add	r3, r6
 800c046:	9309      	str	r3, [sp, #36]	; 0x24
 800c048:	e767      	b.n	800bf1a <_svfiprintf_r+0x4e>
 800c04a:	460c      	mov	r4, r1
 800c04c:	2001      	movs	r0, #1
 800c04e:	fb0c 3202 	mla	r2, ip, r2, r3
 800c052:	e7a5      	b.n	800bfa0 <_svfiprintf_r+0xd4>
 800c054:	2300      	movs	r3, #0
 800c056:	f04f 0c0a 	mov.w	ip, #10
 800c05a:	4619      	mov	r1, r3
 800c05c:	3401      	adds	r4, #1
 800c05e:	9305      	str	r3, [sp, #20]
 800c060:	4620      	mov	r0, r4
 800c062:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c066:	3a30      	subs	r2, #48	; 0x30
 800c068:	2a09      	cmp	r2, #9
 800c06a:	d903      	bls.n	800c074 <_svfiprintf_r+0x1a8>
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d0c5      	beq.n	800bffc <_svfiprintf_r+0x130>
 800c070:	9105      	str	r1, [sp, #20]
 800c072:	e7c3      	b.n	800bffc <_svfiprintf_r+0x130>
 800c074:	4604      	mov	r4, r0
 800c076:	2301      	movs	r3, #1
 800c078:	fb0c 2101 	mla	r1, ip, r1, r2
 800c07c:	e7f0      	b.n	800c060 <_svfiprintf_r+0x194>
 800c07e:	ab03      	add	r3, sp, #12
 800c080:	9300      	str	r3, [sp, #0]
 800c082:	462a      	mov	r2, r5
 800c084:	4638      	mov	r0, r7
 800c086:	4b10      	ldr	r3, [pc, #64]	; (800c0c8 <_svfiprintf_r+0x1fc>)
 800c088:	a904      	add	r1, sp, #16
 800c08a:	f3af 8000 	nop.w
 800c08e:	1c42      	adds	r2, r0, #1
 800c090:	4606      	mov	r6, r0
 800c092:	d1d6      	bne.n	800c042 <_svfiprintf_r+0x176>
 800c094:	89ab      	ldrh	r3, [r5, #12]
 800c096:	065b      	lsls	r3, r3, #25
 800c098:	f53f af2c 	bmi.w	800bef4 <_svfiprintf_r+0x28>
 800c09c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c09e:	b01d      	add	sp, #116	; 0x74
 800c0a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0a4:	ab03      	add	r3, sp, #12
 800c0a6:	9300      	str	r3, [sp, #0]
 800c0a8:	462a      	mov	r2, r5
 800c0aa:	4638      	mov	r0, r7
 800c0ac:	4b06      	ldr	r3, [pc, #24]	; (800c0c8 <_svfiprintf_r+0x1fc>)
 800c0ae:	a904      	add	r1, sp, #16
 800c0b0:	f000 f9d4 	bl	800c45c <_printf_i>
 800c0b4:	e7eb      	b.n	800c08e <_svfiprintf_r+0x1c2>
 800c0b6:	bf00      	nop
 800c0b8:	0800e6c0 	.word	0x0800e6c0
 800c0bc:	0800e6c6 	.word	0x0800e6c6
 800c0c0:	0800e6ca 	.word	0x0800e6ca
 800c0c4:	00000000 	.word	0x00000000
 800c0c8:	0800be15 	.word	0x0800be15

0800c0cc <__sfputc_r>:
 800c0cc:	6893      	ldr	r3, [r2, #8]
 800c0ce:	b410      	push	{r4}
 800c0d0:	3b01      	subs	r3, #1
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	6093      	str	r3, [r2, #8]
 800c0d6:	da07      	bge.n	800c0e8 <__sfputc_r+0x1c>
 800c0d8:	6994      	ldr	r4, [r2, #24]
 800c0da:	42a3      	cmp	r3, r4
 800c0dc:	db01      	blt.n	800c0e2 <__sfputc_r+0x16>
 800c0de:	290a      	cmp	r1, #10
 800c0e0:	d102      	bne.n	800c0e8 <__sfputc_r+0x1c>
 800c0e2:	bc10      	pop	{r4}
 800c0e4:	f000 bbea 	b.w	800c8bc <__swbuf_r>
 800c0e8:	6813      	ldr	r3, [r2, #0]
 800c0ea:	1c58      	adds	r0, r3, #1
 800c0ec:	6010      	str	r0, [r2, #0]
 800c0ee:	7019      	strb	r1, [r3, #0]
 800c0f0:	4608      	mov	r0, r1
 800c0f2:	bc10      	pop	{r4}
 800c0f4:	4770      	bx	lr

0800c0f6 <__sfputs_r>:
 800c0f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0f8:	4606      	mov	r6, r0
 800c0fa:	460f      	mov	r7, r1
 800c0fc:	4614      	mov	r4, r2
 800c0fe:	18d5      	adds	r5, r2, r3
 800c100:	42ac      	cmp	r4, r5
 800c102:	d101      	bne.n	800c108 <__sfputs_r+0x12>
 800c104:	2000      	movs	r0, #0
 800c106:	e007      	b.n	800c118 <__sfputs_r+0x22>
 800c108:	463a      	mov	r2, r7
 800c10a:	4630      	mov	r0, r6
 800c10c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c110:	f7ff ffdc 	bl	800c0cc <__sfputc_r>
 800c114:	1c43      	adds	r3, r0, #1
 800c116:	d1f3      	bne.n	800c100 <__sfputs_r+0xa>
 800c118:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c11c <_vfiprintf_r>:
 800c11c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c120:	460d      	mov	r5, r1
 800c122:	4614      	mov	r4, r2
 800c124:	4698      	mov	r8, r3
 800c126:	4606      	mov	r6, r0
 800c128:	b09d      	sub	sp, #116	; 0x74
 800c12a:	b118      	cbz	r0, 800c134 <_vfiprintf_r+0x18>
 800c12c:	6983      	ldr	r3, [r0, #24]
 800c12e:	b90b      	cbnz	r3, 800c134 <_vfiprintf_r+0x18>
 800c130:	f000 fdd0 	bl	800ccd4 <__sinit>
 800c134:	4b89      	ldr	r3, [pc, #548]	; (800c35c <_vfiprintf_r+0x240>)
 800c136:	429d      	cmp	r5, r3
 800c138:	d11b      	bne.n	800c172 <_vfiprintf_r+0x56>
 800c13a:	6875      	ldr	r5, [r6, #4]
 800c13c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c13e:	07d9      	lsls	r1, r3, #31
 800c140:	d405      	bmi.n	800c14e <_vfiprintf_r+0x32>
 800c142:	89ab      	ldrh	r3, [r5, #12]
 800c144:	059a      	lsls	r2, r3, #22
 800c146:	d402      	bmi.n	800c14e <_vfiprintf_r+0x32>
 800c148:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c14a:	f7ff fe53 	bl	800bdf4 <__retarget_lock_acquire_recursive>
 800c14e:	89ab      	ldrh	r3, [r5, #12]
 800c150:	071b      	lsls	r3, r3, #28
 800c152:	d501      	bpl.n	800c158 <_vfiprintf_r+0x3c>
 800c154:	692b      	ldr	r3, [r5, #16]
 800c156:	b9eb      	cbnz	r3, 800c194 <_vfiprintf_r+0x78>
 800c158:	4629      	mov	r1, r5
 800c15a:	4630      	mov	r0, r6
 800c15c:	f000 fc12 	bl	800c984 <__swsetup_r>
 800c160:	b1c0      	cbz	r0, 800c194 <_vfiprintf_r+0x78>
 800c162:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c164:	07dc      	lsls	r4, r3, #31
 800c166:	d50e      	bpl.n	800c186 <_vfiprintf_r+0x6a>
 800c168:	f04f 30ff 	mov.w	r0, #4294967295
 800c16c:	b01d      	add	sp, #116	; 0x74
 800c16e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c172:	4b7b      	ldr	r3, [pc, #492]	; (800c360 <_vfiprintf_r+0x244>)
 800c174:	429d      	cmp	r5, r3
 800c176:	d101      	bne.n	800c17c <_vfiprintf_r+0x60>
 800c178:	68b5      	ldr	r5, [r6, #8]
 800c17a:	e7df      	b.n	800c13c <_vfiprintf_r+0x20>
 800c17c:	4b79      	ldr	r3, [pc, #484]	; (800c364 <_vfiprintf_r+0x248>)
 800c17e:	429d      	cmp	r5, r3
 800c180:	bf08      	it	eq
 800c182:	68f5      	ldreq	r5, [r6, #12]
 800c184:	e7da      	b.n	800c13c <_vfiprintf_r+0x20>
 800c186:	89ab      	ldrh	r3, [r5, #12]
 800c188:	0598      	lsls	r0, r3, #22
 800c18a:	d4ed      	bmi.n	800c168 <_vfiprintf_r+0x4c>
 800c18c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c18e:	f7ff fe33 	bl	800bdf8 <__retarget_lock_release_recursive>
 800c192:	e7e9      	b.n	800c168 <_vfiprintf_r+0x4c>
 800c194:	2300      	movs	r3, #0
 800c196:	9309      	str	r3, [sp, #36]	; 0x24
 800c198:	2320      	movs	r3, #32
 800c19a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c19e:	2330      	movs	r3, #48	; 0x30
 800c1a0:	f04f 0901 	mov.w	r9, #1
 800c1a4:	f8cd 800c 	str.w	r8, [sp, #12]
 800c1a8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800c368 <_vfiprintf_r+0x24c>
 800c1ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c1b0:	4623      	mov	r3, r4
 800c1b2:	469a      	mov	sl, r3
 800c1b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c1b8:	b10a      	cbz	r2, 800c1be <_vfiprintf_r+0xa2>
 800c1ba:	2a25      	cmp	r2, #37	; 0x25
 800c1bc:	d1f9      	bne.n	800c1b2 <_vfiprintf_r+0x96>
 800c1be:	ebba 0b04 	subs.w	fp, sl, r4
 800c1c2:	d00b      	beq.n	800c1dc <_vfiprintf_r+0xc0>
 800c1c4:	465b      	mov	r3, fp
 800c1c6:	4622      	mov	r2, r4
 800c1c8:	4629      	mov	r1, r5
 800c1ca:	4630      	mov	r0, r6
 800c1cc:	f7ff ff93 	bl	800c0f6 <__sfputs_r>
 800c1d0:	3001      	adds	r0, #1
 800c1d2:	f000 80aa 	beq.w	800c32a <_vfiprintf_r+0x20e>
 800c1d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c1d8:	445a      	add	r2, fp
 800c1da:	9209      	str	r2, [sp, #36]	; 0x24
 800c1dc:	f89a 3000 	ldrb.w	r3, [sl]
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	f000 80a2 	beq.w	800c32a <_vfiprintf_r+0x20e>
 800c1e6:	2300      	movs	r3, #0
 800c1e8:	f04f 32ff 	mov.w	r2, #4294967295
 800c1ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c1f0:	f10a 0a01 	add.w	sl, sl, #1
 800c1f4:	9304      	str	r3, [sp, #16]
 800c1f6:	9307      	str	r3, [sp, #28]
 800c1f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c1fc:	931a      	str	r3, [sp, #104]	; 0x68
 800c1fe:	4654      	mov	r4, sl
 800c200:	2205      	movs	r2, #5
 800c202:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c206:	4858      	ldr	r0, [pc, #352]	; (800c368 <_vfiprintf_r+0x24c>)
 800c208:	f000 fe7a 	bl	800cf00 <memchr>
 800c20c:	9a04      	ldr	r2, [sp, #16]
 800c20e:	b9d8      	cbnz	r0, 800c248 <_vfiprintf_r+0x12c>
 800c210:	06d1      	lsls	r1, r2, #27
 800c212:	bf44      	itt	mi
 800c214:	2320      	movmi	r3, #32
 800c216:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c21a:	0713      	lsls	r3, r2, #28
 800c21c:	bf44      	itt	mi
 800c21e:	232b      	movmi	r3, #43	; 0x2b
 800c220:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c224:	f89a 3000 	ldrb.w	r3, [sl]
 800c228:	2b2a      	cmp	r3, #42	; 0x2a
 800c22a:	d015      	beq.n	800c258 <_vfiprintf_r+0x13c>
 800c22c:	4654      	mov	r4, sl
 800c22e:	2000      	movs	r0, #0
 800c230:	f04f 0c0a 	mov.w	ip, #10
 800c234:	9a07      	ldr	r2, [sp, #28]
 800c236:	4621      	mov	r1, r4
 800c238:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c23c:	3b30      	subs	r3, #48	; 0x30
 800c23e:	2b09      	cmp	r3, #9
 800c240:	d94e      	bls.n	800c2e0 <_vfiprintf_r+0x1c4>
 800c242:	b1b0      	cbz	r0, 800c272 <_vfiprintf_r+0x156>
 800c244:	9207      	str	r2, [sp, #28]
 800c246:	e014      	b.n	800c272 <_vfiprintf_r+0x156>
 800c248:	eba0 0308 	sub.w	r3, r0, r8
 800c24c:	fa09 f303 	lsl.w	r3, r9, r3
 800c250:	4313      	orrs	r3, r2
 800c252:	46a2      	mov	sl, r4
 800c254:	9304      	str	r3, [sp, #16]
 800c256:	e7d2      	b.n	800c1fe <_vfiprintf_r+0xe2>
 800c258:	9b03      	ldr	r3, [sp, #12]
 800c25a:	1d19      	adds	r1, r3, #4
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	9103      	str	r1, [sp, #12]
 800c260:	2b00      	cmp	r3, #0
 800c262:	bfbb      	ittet	lt
 800c264:	425b      	neglt	r3, r3
 800c266:	f042 0202 	orrlt.w	r2, r2, #2
 800c26a:	9307      	strge	r3, [sp, #28]
 800c26c:	9307      	strlt	r3, [sp, #28]
 800c26e:	bfb8      	it	lt
 800c270:	9204      	strlt	r2, [sp, #16]
 800c272:	7823      	ldrb	r3, [r4, #0]
 800c274:	2b2e      	cmp	r3, #46	; 0x2e
 800c276:	d10c      	bne.n	800c292 <_vfiprintf_r+0x176>
 800c278:	7863      	ldrb	r3, [r4, #1]
 800c27a:	2b2a      	cmp	r3, #42	; 0x2a
 800c27c:	d135      	bne.n	800c2ea <_vfiprintf_r+0x1ce>
 800c27e:	9b03      	ldr	r3, [sp, #12]
 800c280:	3402      	adds	r4, #2
 800c282:	1d1a      	adds	r2, r3, #4
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	9203      	str	r2, [sp, #12]
 800c288:	2b00      	cmp	r3, #0
 800c28a:	bfb8      	it	lt
 800c28c:	f04f 33ff 	movlt.w	r3, #4294967295
 800c290:	9305      	str	r3, [sp, #20]
 800c292:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800c36c <_vfiprintf_r+0x250>
 800c296:	2203      	movs	r2, #3
 800c298:	4650      	mov	r0, sl
 800c29a:	7821      	ldrb	r1, [r4, #0]
 800c29c:	f000 fe30 	bl	800cf00 <memchr>
 800c2a0:	b140      	cbz	r0, 800c2b4 <_vfiprintf_r+0x198>
 800c2a2:	2340      	movs	r3, #64	; 0x40
 800c2a4:	eba0 000a 	sub.w	r0, r0, sl
 800c2a8:	fa03 f000 	lsl.w	r0, r3, r0
 800c2ac:	9b04      	ldr	r3, [sp, #16]
 800c2ae:	3401      	adds	r4, #1
 800c2b0:	4303      	orrs	r3, r0
 800c2b2:	9304      	str	r3, [sp, #16]
 800c2b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c2b8:	2206      	movs	r2, #6
 800c2ba:	482d      	ldr	r0, [pc, #180]	; (800c370 <_vfiprintf_r+0x254>)
 800c2bc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c2c0:	f000 fe1e 	bl	800cf00 <memchr>
 800c2c4:	2800      	cmp	r0, #0
 800c2c6:	d03f      	beq.n	800c348 <_vfiprintf_r+0x22c>
 800c2c8:	4b2a      	ldr	r3, [pc, #168]	; (800c374 <_vfiprintf_r+0x258>)
 800c2ca:	bb1b      	cbnz	r3, 800c314 <_vfiprintf_r+0x1f8>
 800c2cc:	9b03      	ldr	r3, [sp, #12]
 800c2ce:	3307      	adds	r3, #7
 800c2d0:	f023 0307 	bic.w	r3, r3, #7
 800c2d4:	3308      	adds	r3, #8
 800c2d6:	9303      	str	r3, [sp, #12]
 800c2d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c2da:	443b      	add	r3, r7
 800c2dc:	9309      	str	r3, [sp, #36]	; 0x24
 800c2de:	e767      	b.n	800c1b0 <_vfiprintf_r+0x94>
 800c2e0:	460c      	mov	r4, r1
 800c2e2:	2001      	movs	r0, #1
 800c2e4:	fb0c 3202 	mla	r2, ip, r2, r3
 800c2e8:	e7a5      	b.n	800c236 <_vfiprintf_r+0x11a>
 800c2ea:	2300      	movs	r3, #0
 800c2ec:	f04f 0c0a 	mov.w	ip, #10
 800c2f0:	4619      	mov	r1, r3
 800c2f2:	3401      	adds	r4, #1
 800c2f4:	9305      	str	r3, [sp, #20]
 800c2f6:	4620      	mov	r0, r4
 800c2f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c2fc:	3a30      	subs	r2, #48	; 0x30
 800c2fe:	2a09      	cmp	r2, #9
 800c300:	d903      	bls.n	800c30a <_vfiprintf_r+0x1ee>
 800c302:	2b00      	cmp	r3, #0
 800c304:	d0c5      	beq.n	800c292 <_vfiprintf_r+0x176>
 800c306:	9105      	str	r1, [sp, #20]
 800c308:	e7c3      	b.n	800c292 <_vfiprintf_r+0x176>
 800c30a:	4604      	mov	r4, r0
 800c30c:	2301      	movs	r3, #1
 800c30e:	fb0c 2101 	mla	r1, ip, r1, r2
 800c312:	e7f0      	b.n	800c2f6 <_vfiprintf_r+0x1da>
 800c314:	ab03      	add	r3, sp, #12
 800c316:	9300      	str	r3, [sp, #0]
 800c318:	462a      	mov	r2, r5
 800c31a:	4630      	mov	r0, r6
 800c31c:	4b16      	ldr	r3, [pc, #88]	; (800c378 <_vfiprintf_r+0x25c>)
 800c31e:	a904      	add	r1, sp, #16
 800c320:	f3af 8000 	nop.w
 800c324:	4607      	mov	r7, r0
 800c326:	1c78      	adds	r0, r7, #1
 800c328:	d1d6      	bne.n	800c2d8 <_vfiprintf_r+0x1bc>
 800c32a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c32c:	07d9      	lsls	r1, r3, #31
 800c32e:	d405      	bmi.n	800c33c <_vfiprintf_r+0x220>
 800c330:	89ab      	ldrh	r3, [r5, #12]
 800c332:	059a      	lsls	r2, r3, #22
 800c334:	d402      	bmi.n	800c33c <_vfiprintf_r+0x220>
 800c336:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c338:	f7ff fd5e 	bl	800bdf8 <__retarget_lock_release_recursive>
 800c33c:	89ab      	ldrh	r3, [r5, #12]
 800c33e:	065b      	lsls	r3, r3, #25
 800c340:	f53f af12 	bmi.w	800c168 <_vfiprintf_r+0x4c>
 800c344:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c346:	e711      	b.n	800c16c <_vfiprintf_r+0x50>
 800c348:	ab03      	add	r3, sp, #12
 800c34a:	9300      	str	r3, [sp, #0]
 800c34c:	462a      	mov	r2, r5
 800c34e:	4630      	mov	r0, r6
 800c350:	4b09      	ldr	r3, [pc, #36]	; (800c378 <_vfiprintf_r+0x25c>)
 800c352:	a904      	add	r1, sp, #16
 800c354:	f000 f882 	bl	800c45c <_printf_i>
 800c358:	e7e4      	b.n	800c324 <_vfiprintf_r+0x208>
 800c35a:	bf00      	nop
 800c35c:	0800e714 	.word	0x0800e714
 800c360:	0800e734 	.word	0x0800e734
 800c364:	0800e6f4 	.word	0x0800e6f4
 800c368:	0800e6c0 	.word	0x0800e6c0
 800c36c:	0800e6c6 	.word	0x0800e6c6
 800c370:	0800e6ca 	.word	0x0800e6ca
 800c374:	00000000 	.word	0x00000000
 800c378:	0800c0f7 	.word	0x0800c0f7

0800c37c <_printf_common>:
 800c37c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c380:	4616      	mov	r6, r2
 800c382:	4699      	mov	r9, r3
 800c384:	688a      	ldr	r2, [r1, #8]
 800c386:	690b      	ldr	r3, [r1, #16]
 800c388:	4607      	mov	r7, r0
 800c38a:	4293      	cmp	r3, r2
 800c38c:	bfb8      	it	lt
 800c38e:	4613      	movlt	r3, r2
 800c390:	6033      	str	r3, [r6, #0]
 800c392:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c396:	460c      	mov	r4, r1
 800c398:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c39c:	b10a      	cbz	r2, 800c3a2 <_printf_common+0x26>
 800c39e:	3301      	adds	r3, #1
 800c3a0:	6033      	str	r3, [r6, #0]
 800c3a2:	6823      	ldr	r3, [r4, #0]
 800c3a4:	0699      	lsls	r1, r3, #26
 800c3a6:	bf42      	ittt	mi
 800c3a8:	6833      	ldrmi	r3, [r6, #0]
 800c3aa:	3302      	addmi	r3, #2
 800c3ac:	6033      	strmi	r3, [r6, #0]
 800c3ae:	6825      	ldr	r5, [r4, #0]
 800c3b0:	f015 0506 	ands.w	r5, r5, #6
 800c3b4:	d106      	bne.n	800c3c4 <_printf_common+0x48>
 800c3b6:	f104 0a19 	add.w	sl, r4, #25
 800c3ba:	68e3      	ldr	r3, [r4, #12]
 800c3bc:	6832      	ldr	r2, [r6, #0]
 800c3be:	1a9b      	subs	r3, r3, r2
 800c3c0:	42ab      	cmp	r3, r5
 800c3c2:	dc28      	bgt.n	800c416 <_printf_common+0x9a>
 800c3c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c3c8:	1e13      	subs	r3, r2, #0
 800c3ca:	6822      	ldr	r2, [r4, #0]
 800c3cc:	bf18      	it	ne
 800c3ce:	2301      	movne	r3, #1
 800c3d0:	0692      	lsls	r2, r2, #26
 800c3d2:	d42d      	bmi.n	800c430 <_printf_common+0xb4>
 800c3d4:	4649      	mov	r1, r9
 800c3d6:	4638      	mov	r0, r7
 800c3d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c3dc:	47c0      	blx	r8
 800c3de:	3001      	adds	r0, #1
 800c3e0:	d020      	beq.n	800c424 <_printf_common+0xa8>
 800c3e2:	6823      	ldr	r3, [r4, #0]
 800c3e4:	68e5      	ldr	r5, [r4, #12]
 800c3e6:	f003 0306 	and.w	r3, r3, #6
 800c3ea:	2b04      	cmp	r3, #4
 800c3ec:	bf18      	it	ne
 800c3ee:	2500      	movne	r5, #0
 800c3f0:	6832      	ldr	r2, [r6, #0]
 800c3f2:	f04f 0600 	mov.w	r6, #0
 800c3f6:	68a3      	ldr	r3, [r4, #8]
 800c3f8:	bf08      	it	eq
 800c3fa:	1aad      	subeq	r5, r5, r2
 800c3fc:	6922      	ldr	r2, [r4, #16]
 800c3fe:	bf08      	it	eq
 800c400:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c404:	4293      	cmp	r3, r2
 800c406:	bfc4      	itt	gt
 800c408:	1a9b      	subgt	r3, r3, r2
 800c40a:	18ed      	addgt	r5, r5, r3
 800c40c:	341a      	adds	r4, #26
 800c40e:	42b5      	cmp	r5, r6
 800c410:	d11a      	bne.n	800c448 <_printf_common+0xcc>
 800c412:	2000      	movs	r0, #0
 800c414:	e008      	b.n	800c428 <_printf_common+0xac>
 800c416:	2301      	movs	r3, #1
 800c418:	4652      	mov	r2, sl
 800c41a:	4649      	mov	r1, r9
 800c41c:	4638      	mov	r0, r7
 800c41e:	47c0      	blx	r8
 800c420:	3001      	adds	r0, #1
 800c422:	d103      	bne.n	800c42c <_printf_common+0xb0>
 800c424:	f04f 30ff 	mov.w	r0, #4294967295
 800c428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c42c:	3501      	adds	r5, #1
 800c42e:	e7c4      	b.n	800c3ba <_printf_common+0x3e>
 800c430:	2030      	movs	r0, #48	; 0x30
 800c432:	18e1      	adds	r1, r4, r3
 800c434:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c438:	1c5a      	adds	r2, r3, #1
 800c43a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c43e:	4422      	add	r2, r4
 800c440:	3302      	adds	r3, #2
 800c442:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c446:	e7c5      	b.n	800c3d4 <_printf_common+0x58>
 800c448:	2301      	movs	r3, #1
 800c44a:	4622      	mov	r2, r4
 800c44c:	4649      	mov	r1, r9
 800c44e:	4638      	mov	r0, r7
 800c450:	47c0      	blx	r8
 800c452:	3001      	adds	r0, #1
 800c454:	d0e6      	beq.n	800c424 <_printf_common+0xa8>
 800c456:	3601      	adds	r6, #1
 800c458:	e7d9      	b.n	800c40e <_printf_common+0x92>
	...

0800c45c <_printf_i>:
 800c45c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c460:	7e0f      	ldrb	r7, [r1, #24]
 800c462:	4691      	mov	r9, r2
 800c464:	2f78      	cmp	r7, #120	; 0x78
 800c466:	4680      	mov	r8, r0
 800c468:	460c      	mov	r4, r1
 800c46a:	469a      	mov	sl, r3
 800c46c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c46e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c472:	d807      	bhi.n	800c484 <_printf_i+0x28>
 800c474:	2f62      	cmp	r7, #98	; 0x62
 800c476:	d80a      	bhi.n	800c48e <_printf_i+0x32>
 800c478:	2f00      	cmp	r7, #0
 800c47a:	f000 80d9 	beq.w	800c630 <_printf_i+0x1d4>
 800c47e:	2f58      	cmp	r7, #88	; 0x58
 800c480:	f000 80a4 	beq.w	800c5cc <_printf_i+0x170>
 800c484:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c488:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c48c:	e03a      	b.n	800c504 <_printf_i+0xa8>
 800c48e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c492:	2b15      	cmp	r3, #21
 800c494:	d8f6      	bhi.n	800c484 <_printf_i+0x28>
 800c496:	a101      	add	r1, pc, #4	; (adr r1, 800c49c <_printf_i+0x40>)
 800c498:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c49c:	0800c4f5 	.word	0x0800c4f5
 800c4a0:	0800c509 	.word	0x0800c509
 800c4a4:	0800c485 	.word	0x0800c485
 800c4a8:	0800c485 	.word	0x0800c485
 800c4ac:	0800c485 	.word	0x0800c485
 800c4b0:	0800c485 	.word	0x0800c485
 800c4b4:	0800c509 	.word	0x0800c509
 800c4b8:	0800c485 	.word	0x0800c485
 800c4bc:	0800c485 	.word	0x0800c485
 800c4c0:	0800c485 	.word	0x0800c485
 800c4c4:	0800c485 	.word	0x0800c485
 800c4c8:	0800c617 	.word	0x0800c617
 800c4cc:	0800c539 	.word	0x0800c539
 800c4d0:	0800c5f9 	.word	0x0800c5f9
 800c4d4:	0800c485 	.word	0x0800c485
 800c4d8:	0800c485 	.word	0x0800c485
 800c4dc:	0800c639 	.word	0x0800c639
 800c4e0:	0800c485 	.word	0x0800c485
 800c4e4:	0800c539 	.word	0x0800c539
 800c4e8:	0800c485 	.word	0x0800c485
 800c4ec:	0800c485 	.word	0x0800c485
 800c4f0:	0800c601 	.word	0x0800c601
 800c4f4:	682b      	ldr	r3, [r5, #0]
 800c4f6:	1d1a      	adds	r2, r3, #4
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	602a      	str	r2, [r5, #0]
 800c4fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c500:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c504:	2301      	movs	r3, #1
 800c506:	e0a4      	b.n	800c652 <_printf_i+0x1f6>
 800c508:	6820      	ldr	r0, [r4, #0]
 800c50a:	6829      	ldr	r1, [r5, #0]
 800c50c:	0606      	lsls	r6, r0, #24
 800c50e:	f101 0304 	add.w	r3, r1, #4
 800c512:	d50a      	bpl.n	800c52a <_printf_i+0xce>
 800c514:	680e      	ldr	r6, [r1, #0]
 800c516:	602b      	str	r3, [r5, #0]
 800c518:	2e00      	cmp	r6, #0
 800c51a:	da03      	bge.n	800c524 <_printf_i+0xc8>
 800c51c:	232d      	movs	r3, #45	; 0x2d
 800c51e:	4276      	negs	r6, r6
 800c520:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c524:	230a      	movs	r3, #10
 800c526:	485e      	ldr	r0, [pc, #376]	; (800c6a0 <_printf_i+0x244>)
 800c528:	e019      	b.n	800c55e <_printf_i+0x102>
 800c52a:	680e      	ldr	r6, [r1, #0]
 800c52c:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c530:	602b      	str	r3, [r5, #0]
 800c532:	bf18      	it	ne
 800c534:	b236      	sxthne	r6, r6
 800c536:	e7ef      	b.n	800c518 <_printf_i+0xbc>
 800c538:	682b      	ldr	r3, [r5, #0]
 800c53a:	6820      	ldr	r0, [r4, #0]
 800c53c:	1d19      	adds	r1, r3, #4
 800c53e:	6029      	str	r1, [r5, #0]
 800c540:	0601      	lsls	r1, r0, #24
 800c542:	d501      	bpl.n	800c548 <_printf_i+0xec>
 800c544:	681e      	ldr	r6, [r3, #0]
 800c546:	e002      	b.n	800c54e <_printf_i+0xf2>
 800c548:	0646      	lsls	r6, r0, #25
 800c54a:	d5fb      	bpl.n	800c544 <_printf_i+0xe8>
 800c54c:	881e      	ldrh	r6, [r3, #0]
 800c54e:	2f6f      	cmp	r7, #111	; 0x6f
 800c550:	bf0c      	ite	eq
 800c552:	2308      	moveq	r3, #8
 800c554:	230a      	movne	r3, #10
 800c556:	4852      	ldr	r0, [pc, #328]	; (800c6a0 <_printf_i+0x244>)
 800c558:	2100      	movs	r1, #0
 800c55a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c55e:	6865      	ldr	r5, [r4, #4]
 800c560:	2d00      	cmp	r5, #0
 800c562:	bfa8      	it	ge
 800c564:	6821      	ldrge	r1, [r4, #0]
 800c566:	60a5      	str	r5, [r4, #8]
 800c568:	bfa4      	itt	ge
 800c56a:	f021 0104 	bicge.w	r1, r1, #4
 800c56e:	6021      	strge	r1, [r4, #0]
 800c570:	b90e      	cbnz	r6, 800c576 <_printf_i+0x11a>
 800c572:	2d00      	cmp	r5, #0
 800c574:	d04d      	beq.n	800c612 <_printf_i+0x1b6>
 800c576:	4615      	mov	r5, r2
 800c578:	fbb6 f1f3 	udiv	r1, r6, r3
 800c57c:	fb03 6711 	mls	r7, r3, r1, r6
 800c580:	5dc7      	ldrb	r7, [r0, r7]
 800c582:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c586:	4637      	mov	r7, r6
 800c588:	42bb      	cmp	r3, r7
 800c58a:	460e      	mov	r6, r1
 800c58c:	d9f4      	bls.n	800c578 <_printf_i+0x11c>
 800c58e:	2b08      	cmp	r3, #8
 800c590:	d10b      	bne.n	800c5aa <_printf_i+0x14e>
 800c592:	6823      	ldr	r3, [r4, #0]
 800c594:	07de      	lsls	r6, r3, #31
 800c596:	d508      	bpl.n	800c5aa <_printf_i+0x14e>
 800c598:	6923      	ldr	r3, [r4, #16]
 800c59a:	6861      	ldr	r1, [r4, #4]
 800c59c:	4299      	cmp	r1, r3
 800c59e:	bfde      	ittt	le
 800c5a0:	2330      	movle	r3, #48	; 0x30
 800c5a2:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c5a6:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c5aa:	1b52      	subs	r2, r2, r5
 800c5ac:	6122      	str	r2, [r4, #16]
 800c5ae:	464b      	mov	r3, r9
 800c5b0:	4621      	mov	r1, r4
 800c5b2:	4640      	mov	r0, r8
 800c5b4:	f8cd a000 	str.w	sl, [sp]
 800c5b8:	aa03      	add	r2, sp, #12
 800c5ba:	f7ff fedf 	bl	800c37c <_printf_common>
 800c5be:	3001      	adds	r0, #1
 800c5c0:	d14c      	bne.n	800c65c <_printf_i+0x200>
 800c5c2:	f04f 30ff 	mov.w	r0, #4294967295
 800c5c6:	b004      	add	sp, #16
 800c5c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c5cc:	4834      	ldr	r0, [pc, #208]	; (800c6a0 <_printf_i+0x244>)
 800c5ce:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c5d2:	6829      	ldr	r1, [r5, #0]
 800c5d4:	6823      	ldr	r3, [r4, #0]
 800c5d6:	f851 6b04 	ldr.w	r6, [r1], #4
 800c5da:	6029      	str	r1, [r5, #0]
 800c5dc:	061d      	lsls	r5, r3, #24
 800c5de:	d514      	bpl.n	800c60a <_printf_i+0x1ae>
 800c5e0:	07df      	lsls	r7, r3, #31
 800c5e2:	bf44      	itt	mi
 800c5e4:	f043 0320 	orrmi.w	r3, r3, #32
 800c5e8:	6023      	strmi	r3, [r4, #0]
 800c5ea:	b91e      	cbnz	r6, 800c5f4 <_printf_i+0x198>
 800c5ec:	6823      	ldr	r3, [r4, #0]
 800c5ee:	f023 0320 	bic.w	r3, r3, #32
 800c5f2:	6023      	str	r3, [r4, #0]
 800c5f4:	2310      	movs	r3, #16
 800c5f6:	e7af      	b.n	800c558 <_printf_i+0xfc>
 800c5f8:	6823      	ldr	r3, [r4, #0]
 800c5fa:	f043 0320 	orr.w	r3, r3, #32
 800c5fe:	6023      	str	r3, [r4, #0]
 800c600:	2378      	movs	r3, #120	; 0x78
 800c602:	4828      	ldr	r0, [pc, #160]	; (800c6a4 <_printf_i+0x248>)
 800c604:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c608:	e7e3      	b.n	800c5d2 <_printf_i+0x176>
 800c60a:	0659      	lsls	r1, r3, #25
 800c60c:	bf48      	it	mi
 800c60e:	b2b6      	uxthmi	r6, r6
 800c610:	e7e6      	b.n	800c5e0 <_printf_i+0x184>
 800c612:	4615      	mov	r5, r2
 800c614:	e7bb      	b.n	800c58e <_printf_i+0x132>
 800c616:	682b      	ldr	r3, [r5, #0]
 800c618:	6826      	ldr	r6, [r4, #0]
 800c61a:	1d18      	adds	r0, r3, #4
 800c61c:	6961      	ldr	r1, [r4, #20]
 800c61e:	6028      	str	r0, [r5, #0]
 800c620:	0635      	lsls	r5, r6, #24
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	d501      	bpl.n	800c62a <_printf_i+0x1ce>
 800c626:	6019      	str	r1, [r3, #0]
 800c628:	e002      	b.n	800c630 <_printf_i+0x1d4>
 800c62a:	0670      	lsls	r0, r6, #25
 800c62c:	d5fb      	bpl.n	800c626 <_printf_i+0x1ca>
 800c62e:	8019      	strh	r1, [r3, #0]
 800c630:	2300      	movs	r3, #0
 800c632:	4615      	mov	r5, r2
 800c634:	6123      	str	r3, [r4, #16]
 800c636:	e7ba      	b.n	800c5ae <_printf_i+0x152>
 800c638:	682b      	ldr	r3, [r5, #0]
 800c63a:	2100      	movs	r1, #0
 800c63c:	1d1a      	adds	r2, r3, #4
 800c63e:	602a      	str	r2, [r5, #0]
 800c640:	681d      	ldr	r5, [r3, #0]
 800c642:	6862      	ldr	r2, [r4, #4]
 800c644:	4628      	mov	r0, r5
 800c646:	f000 fc5b 	bl	800cf00 <memchr>
 800c64a:	b108      	cbz	r0, 800c650 <_printf_i+0x1f4>
 800c64c:	1b40      	subs	r0, r0, r5
 800c64e:	6060      	str	r0, [r4, #4]
 800c650:	6863      	ldr	r3, [r4, #4]
 800c652:	6123      	str	r3, [r4, #16]
 800c654:	2300      	movs	r3, #0
 800c656:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c65a:	e7a8      	b.n	800c5ae <_printf_i+0x152>
 800c65c:	462a      	mov	r2, r5
 800c65e:	4649      	mov	r1, r9
 800c660:	4640      	mov	r0, r8
 800c662:	6923      	ldr	r3, [r4, #16]
 800c664:	47d0      	blx	sl
 800c666:	3001      	adds	r0, #1
 800c668:	d0ab      	beq.n	800c5c2 <_printf_i+0x166>
 800c66a:	6823      	ldr	r3, [r4, #0]
 800c66c:	079b      	lsls	r3, r3, #30
 800c66e:	d413      	bmi.n	800c698 <_printf_i+0x23c>
 800c670:	68e0      	ldr	r0, [r4, #12]
 800c672:	9b03      	ldr	r3, [sp, #12]
 800c674:	4298      	cmp	r0, r3
 800c676:	bfb8      	it	lt
 800c678:	4618      	movlt	r0, r3
 800c67a:	e7a4      	b.n	800c5c6 <_printf_i+0x16a>
 800c67c:	2301      	movs	r3, #1
 800c67e:	4632      	mov	r2, r6
 800c680:	4649      	mov	r1, r9
 800c682:	4640      	mov	r0, r8
 800c684:	47d0      	blx	sl
 800c686:	3001      	adds	r0, #1
 800c688:	d09b      	beq.n	800c5c2 <_printf_i+0x166>
 800c68a:	3501      	adds	r5, #1
 800c68c:	68e3      	ldr	r3, [r4, #12]
 800c68e:	9903      	ldr	r1, [sp, #12]
 800c690:	1a5b      	subs	r3, r3, r1
 800c692:	42ab      	cmp	r3, r5
 800c694:	dcf2      	bgt.n	800c67c <_printf_i+0x220>
 800c696:	e7eb      	b.n	800c670 <_printf_i+0x214>
 800c698:	2500      	movs	r5, #0
 800c69a:	f104 0619 	add.w	r6, r4, #25
 800c69e:	e7f5      	b.n	800c68c <_printf_i+0x230>
 800c6a0:	0800e6d1 	.word	0x0800e6d1
 800c6a4:	0800e6e2 	.word	0x0800e6e2

0800c6a8 <siscanf>:
 800c6a8:	b40e      	push	{r1, r2, r3}
 800c6aa:	f44f 7201 	mov.w	r2, #516	; 0x204
 800c6ae:	b530      	push	{r4, r5, lr}
 800c6b0:	b09c      	sub	sp, #112	; 0x70
 800c6b2:	ac1f      	add	r4, sp, #124	; 0x7c
 800c6b4:	f854 5b04 	ldr.w	r5, [r4], #4
 800c6b8:	f8ad 2014 	strh.w	r2, [sp, #20]
 800c6bc:	9002      	str	r0, [sp, #8]
 800c6be:	9006      	str	r0, [sp, #24]
 800c6c0:	f7f3 fd44 	bl	800014c <strlen>
 800c6c4:	4b0b      	ldr	r3, [pc, #44]	; (800c6f4 <siscanf+0x4c>)
 800c6c6:	9003      	str	r0, [sp, #12]
 800c6c8:	930b      	str	r3, [sp, #44]	; 0x2c
 800c6ca:	2300      	movs	r3, #0
 800c6cc:	930f      	str	r3, [sp, #60]	; 0x3c
 800c6ce:	9314      	str	r3, [sp, #80]	; 0x50
 800c6d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c6d4:	9007      	str	r0, [sp, #28]
 800c6d6:	4808      	ldr	r0, [pc, #32]	; (800c6f8 <siscanf+0x50>)
 800c6d8:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c6dc:	462a      	mov	r2, r5
 800c6de:	4623      	mov	r3, r4
 800c6e0:	a902      	add	r1, sp, #8
 800c6e2:	6800      	ldr	r0, [r0, #0]
 800c6e4:	9401      	str	r4, [sp, #4]
 800c6e6:	f000 fcbd 	bl	800d064 <__ssvfiscanf_r>
 800c6ea:	b01c      	add	sp, #112	; 0x70
 800c6ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c6f0:	b003      	add	sp, #12
 800c6f2:	4770      	bx	lr
 800c6f4:	0800c71f 	.word	0x0800c71f
 800c6f8:	200004e8 	.word	0x200004e8

0800c6fc <__sread>:
 800c6fc:	b510      	push	{r4, lr}
 800c6fe:	460c      	mov	r4, r1
 800c700:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c704:	f000 ff7a 	bl	800d5fc <_read_r>
 800c708:	2800      	cmp	r0, #0
 800c70a:	bfab      	itete	ge
 800c70c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c70e:	89a3      	ldrhlt	r3, [r4, #12]
 800c710:	181b      	addge	r3, r3, r0
 800c712:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c716:	bfac      	ite	ge
 800c718:	6563      	strge	r3, [r4, #84]	; 0x54
 800c71a:	81a3      	strhlt	r3, [r4, #12]
 800c71c:	bd10      	pop	{r4, pc}

0800c71e <__seofread>:
 800c71e:	2000      	movs	r0, #0
 800c720:	4770      	bx	lr

0800c722 <__swrite>:
 800c722:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c726:	461f      	mov	r7, r3
 800c728:	898b      	ldrh	r3, [r1, #12]
 800c72a:	4605      	mov	r5, r0
 800c72c:	05db      	lsls	r3, r3, #23
 800c72e:	460c      	mov	r4, r1
 800c730:	4616      	mov	r6, r2
 800c732:	d505      	bpl.n	800c740 <__swrite+0x1e>
 800c734:	2302      	movs	r3, #2
 800c736:	2200      	movs	r2, #0
 800c738:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c73c:	f000 fb68 	bl	800ce10 <_lseek_r>
 800c740:	89a3      	ldrh	r3, [r4, #12]
 800c742:	4632      	mov	r2, r6
 800c744:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c748:	81a3      	strh	r3, [r4, #12]
 800c74a:	4628      	mov	r0, r5
 800c74c:	463b      	mov	r3, r7
 800c74e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c752:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c756:	f000 b903 	b.w	800c960 <_write_r>

0800c75a <__sseek>:
 800c75a:	b510      	push	{r4, lr}
 800c75c:	460c      	mov	r4, r1
 800c75e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c762:	f000 fb55 	bl	800ce10 <_lseek_r>
 800c766:	1c43      	adds	r3, r0, #1
 800c768:	89a3      	ldrh	r3, [r4, #12]
 800c76a:	bf15      	itete	ne
 800c76c:	6560      	strne	r0, [r4, #84]	; 0x54
 800c76e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c772:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c776:	81a3      	strheq	r3, [r4, #12]
 800c778:	bf18      	it	ne
 800c77a:	81a3      	strhne	r3, [r4, #12]
 800c77c:	bd10      	pop	{r4, pc}

0800c77e <__sclose>:
 800c77e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c782:	f000 b975 	b.w	800ca70 <_close_r>

0800c786 <strcpy>:
 800c786:	4603      	mov	r3, r0
 800c788:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c78c:	f803 2b01 	strb.w	r2, [r3], #1
 800c790:	2a00      	cmp	r2, #0
 800c792:	d1f9      	bne.n	800c788 <strcpy+0x2>
 800c794:	4770      	bx	lr

0800c796 <strncmp>:
 800c796:	4603      	mov	r3, r0
 800c798:	b510      	push	{r4, lr}
 800c79a:	b172      	cbz	r2, 800c7ba <strncmp+0x24>
 800c79c:	3901      	subs	r1, #1
 800c79e:	1884      	adds	r4, r0, r2
 800c7a0:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c7a4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c7a8:	4290      	cmp	r0, r2
 800c7aa:	d101      	bne.n	800c7b0 <strncmp+0x1a>
 800c7ac:	42a3      	cmp	r3, r4
 800c7ae:	d101      	bne.n	800c7b4 <strncmp+0x1e>
 800c7b0:	1a80      	subs	r0, r0, r2
 800c7b2:	bd10      	pop	{r4, pc}
 800c7b4:	2800      	cmp	r0, #0
 800c7b6:	d1f3      	bne.n	800c7a0 <strncmp+0xa>
 800c7b8:	e7fa      	b.n	800c7b0 <strncmp+0x1a>
 800c7ba:	4610      	mov	r0, r2
 800c7bc:	e7f9      	b.n	800c7b2 <strncmp+0x1c>
	...

0800c7c0 <_strtoul_l.constprop.0>:
 800c7c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c7c4:	4686      	mov	lr, r0
 800c7c6:	460d      	mov	r5, r1
 800c7c8:	4f35      	ldr	r7, [pc, #212]	; (800c8a0 <_strtoul_l.constprop.0+0xe0>)
 800c7ca:	4628      	mov	r0, r5
 800c7cc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c7d0:	5de6      	ldrb	r6, [r4, r7]
 800c7d2:	f016 0608 	ands.w	r6, r6, #8
 800c7d6:	d1f8      	bne.n	800c7ca <_strtoul_l.constprop.0+0xa>
 800c7d8:	2c2d      	cmp	r4, #45	; 0x2d
 800c7da:	d12f      	bne.n	800c83c <_strtoul_l.constprop.0+0x7c>
 800c7dc:	2601      	movs	r6, #1
 800c7de:	782c      	ldrb	r4, [r5, #0]
 800c7e0:	1c85      	adds	r5, r0, #2
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d057      	beq.n	800c896 <_strtoul_l.constprop.0+0xd6>
 800c7e6:	2b10      	cmp	r3, #16
 800c7e8:	d109      	bne.n	800c7fe <_strtoul_l.constprop.0+0x3e>
 800c7ea:	2c30      	cmp	r4, #48	; 0x30
 800c7ec:	d107      	bne.n	800c7fe <_strtoul_l.constprop.0+0x3e>
 800c7ee:	7828      	ldrb	r0, [r5, #0]
 800c7f0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800c7f4:	2858      	cmp	r0, #88	; 0x58
 800c7f6:	d149      	bne.n	800c88c <_strtoul_l.constprop.0+0xcc>
 800c7f8:	2310      	movs	r3, #16
 800c7fa:	786c      	ldrb	r4, [r5, #1]
 800c7fc:	3502      	adds	r5, #2
 800c7fe:	f04f 38ff 	mov.w	r8, #4294967295
 800c802:	fbb8 f8f3 	udiv	r8, r8, r3
 800c806:	2700      	movs	r7, #0
 800c808:	fb03 f908 	mul.w	r9, r3, r8
 800c80c:	4638      	mov	r0, r7
 800c80e:	ea6f 0909 	mvn.w	r9, r9
 800c812:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800c816:	f1bc 0f09 	cmp.w	ip, #9
 800c81a:	d814      	bhi.n	800c846 <_strtoul_l.constprop.0+0x86>
 800c81c:	4664      	mov	r4, ip
 800c81e:	42a3      	cmp	r3, r4
 800c820:	dd22      	ble.n	800c868 <_strtoul_l.constprop.0+0xa8>
 800c822:	2f00      	cmp	r7, #0
 800c824:	db1d      	blt.n	800c862 <_strtoul_l.constprop.0+0xa2>
 800c826:	4580      	cmp	r8, r0
 800c828:	d31b      	bcc.n	800c862 <_strtoul_l.constprop.0+0xa2>
 800c82a:	d101      	bne.n	800c830 <_strtoul_l.constprop.0+0x70>
 800c82c:	45a1      	cmp	r9, r4
 800c82e:	db18      	blt.n	800c862 <_strtoul_l.constprop.0+0xa2>
 800c830:	2701      	movs	r7, #1
 800c832:	fb00 4003 	mla	r0, r0, r3, r4
 800c836:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c83a:	e7ea      	b.n	800c812 <_strtoul_l.constprop.0+0x52>
 800c83c:	2c2b      	cmp	r4, #43	; 0x2b
 800c83e:	bf04      	itt	eq
 800c840:	782c      	ldrbeq	r4, [r5, #0]
 800c842:	1c85      	addeq	r5, r0, #2
 800c844:	e7cd      	b.n	800c7e2 <_strtoul_l.constprop.0+0x22>
 800c846:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800c84a:	f1bc 0f19 	cmp.w	ip, #25
 800c84e:	d801      	bhi.n	800c854 <_strtoul_l.constprop.0+0x94>
 800c850:	3c37      	subs	r4, #55	; 0x37
 800c852:	e7e4      	b.n	800c81e <_strtoul_l.constprop.0+0x5e>
 800c854:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800c858:	f1bc 0f19 	cmp.w	ip, #25
 800c85c:	d804      	bhi.n	800c868 <_strtoul_l.constprop.0+0xa8>
 800c85e:	3c57      	subs	r4, #87	; 0x57
 800c860:	e7dd      	b.n	800c81e <_strtoul_l.constprop.0+0x5e>
 800c862:	f04f 37ff 	mov.w	r7, #4294967295
 800c866:	e7e6      	b.n	800c836 <_strtoul_l.constprop.0+0x76>
 800c868:	2f00      	cmp	r7, #0
 800c86a:	da07      	bge.n	800c87c <_strtoul_l.constprop.0+0xbc>
 800c86c:	2322      	movs	r3, #34	; 0x22
 800c86e:	f04f 30ff 	mov.w	r0, #4294967295
 800c872:	f8ce 3000 	str.w	r3, [lr]
 800c876:	b932      	cbnz	r2, 800c886 <_strtoul_l.constprop.0+0xc6>
 800c878:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c87c:	b106      	cbz	r6, 800c880 <_strtoul_l.constprop.0+0xc0>
 800c87e:	4240      	negs	r0, r0
 800c880:	2a00      	cmp	r2, #0
 800c882:	d0f9      	beq.n	800c878 <_strtoul_l.constprop.0+0xb8>
 800c884:	b107      	cbz	r7, 800c888 <_strtoul_l.constprop.0+0xc8>
 800c886:	1e69      	subs	r1, r5, #1
 800c888:	6011      	str	r1, [r2, #0]
 800c88a:	e7f5      	b.n	800c878 <_strtoul_l.constprop.0+0xb8>
 800c88c:	2430      	movs	r4, #48	; 0x30
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d1b5      	bne.n	800c7fe <_strtoul_l.constprop.0+0x3e>
 800c892:	2308      	movs	r3, #8
 800c894:	e7b3      	b.n	800c7fe <_strtoul_l.constprop.0+0x3e>
 800c896:	2c30      	cmp	r4, #48	; 0x30
 800c898:	d0a9      	beq.n	800c7ee <_strtoul_l.constprop.0+0x2e>
 800c89a:	230a      	movs	r3, #10
 800c89c:	e7af      	b.n	800c7fe <_strtoul_l.constprop.0+0x3e>
 800c89e:	bf00      	nop
 800c8a0:	0800e5c0 	.word	0x0800e5c0

0800c8a4 <_strtoul_r>:
 800c8a4:	f7ff bf8c 	b.w	800c7c0 <_strtoul_l.constprop.0>

0800c8a8 <strtoul>:
 800c8a8:	4613      	mov	r3, r2
 800c8aa:	460a      	mov	r2, r1
 800c8ac:	4601      	mov	r1, r0
 800c8ae:	4802      	ldr	r0, [pc, #8]	; (800c8b8 <strtoul+0x10>)
 800c8b0:	6800      	ldr	r0, [r0, #0]
 800c8b2:	f7ff bf85 	b.w	800c7c0 <_strtoul_l.constprop.0>
 800c8b6:	bf00      	nop
 800c8b8:	200004e8 	.word	0x200004e8

0800c8bc <__swbuf_r>:
 800c8bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8be:	460e      	mov	r6, r1
 800c8c0:	4614      	mov	r4, r2
 800c8c2:	4605      	mov	r5, r0
 800c8c4:	b118      	cbz	r0, 800c8ce <__swbuf_r+0x12>
 800c8c6:	6983      	ldr	r3, [r0, #24]
 800c8c8:	b90b      	cbnz	r3, 800c8ce <__swbuf_r+0x12>
 800c8ca:	f000 fa03 	bl	800ccd4 <__sinit>
 800c8ce:	4b21      	ldr	r3, [pc, #132]	; (800c954 <__swbuf_r+0x98>)
 800c8d0:	429c      	cmp	r4, r3
 800c8d2:	d12b      	bne.n	800c92c <__swbuf_r+0x70>
 800c8d4:	686c      	ldr	r4, [r5, #4]
 800c8d6:	69a3      	ldr	r3, [r4, #24]
 800c8d8:	60a3      	str	r3, [r4, #8]
 800c8da:	89a3      	ldrh	r3, [r4, #12]
 800c8dc:	071a      	lsls	r2, r3, #28
 800c8de:	d52f      	bpl.n	800c940 <__swbuf_r+0x84>
 800c8e0:	6923      	ldr	r3, [r4, #16]
 800c8e2:	b36b      	cbz	r3, 800c940 <__swbuf_r+0x84>
 800c8e4:	6923      	ldr	r3, [r4, #16]
 800c8e6:	6820      	ldr	r0, [r4, #0]
 800c8e8:	b2f6      	uxtb	r6, r6
 800c8ea:	1ac0      	subs	r0, r0, r3
 800c8ec:	6963      	ldr	r3, [r4, #20]
 800c8ee:	4637      	mov	r7, r6
 800c8f0:	4283      	cmp	r3, r0
 800c8f2:	dc04      	bgt.n	800c8fe <__swbuf_r+0x42>
 800c8f4:	4621      	mov	r1, r4
 800c8f6:	4628      	mov	r0, r5
 800c8f8:	f000 f958 	bl	800cbac <_fflush_r>
 800c8fc:	bb30      	cbnz	r0, 800c94c <__swbuf_r+0x90>
 800c8fe:	68a3      	ldr	r3, [r4, #8]
 800c900:	3001      	adds	r0, #1
 800c902:	3b01      	subs	r3, #1
 800c904:	60a3      	str	r3, [r4, #8]
 800c906:	6823      	ldr	r3, [r4, #0]
 800c908:	1c5a      	adds	r2, r3, #1
 800c90a:	6022      	str	r2, [r4, #0]
 800c90c:	701e      	strb	r6, [r3, #0]
 800c90e:	6963      	ldr	r3, [r4, #20]
 800c910:	4283      	cmp	r3, r0
 800c912:	d004      	beq.n	800c91e <__swbuf_r+0x62>
 800c914:	89a3      	ldrh	r3, [r4, #12]
 800c916:	07db      	lsls	r3, r3, #31
 800c918:	d506      	bpl.n	800c928 <__swbuf_r+0x6c>
 800c91a:	2e0a      	cmp	r6, #10
 800c91c:	d104      	bne.n	800c928 <__swbuf_r+0x6c>
 800c91e:	4621      	mov	r1, r4
 800c920:	4628      	mov	r0, r5
 800c922:	f000 f943 	bl	800cbac <_fflush_r>
 800c926:	b988      	cbnz	r0, 800c94c <__swbuf_r+0x90>
 800c928:	4638      	mov	r0, r7
 800c92a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c92c:	4b0a      	ldr	r3, [pc, #40]	; (800c958 <__swbuf_r+0x9c>)
 800c92e:	429c      	cmp	r4, r3
 800c930:	d101      	bne.n	800c936 <__swbuf_r+0x7a>
 800c932:	68ac      	ldr	r4, [r5, #8]
 800c934:	e7cf      	b.n	800c8d6 <__swbuf_r+0x1a>
 800c936:	4b09      	ldr	r3, [pc, #36]	; (800c95c <__swbuf_r+0xa0>)
 800c938:	429c      	cmp	r4, r3
 800c93a:	bf08      	it	eq
 800c93c:	68ec      	ldreq	r4, [r5, #12]
 800c93e:	e7ca      	b.n	800c8d6 <__swbuf_r+0x1a>
 800c940:	4621      	mov	r1, r4
 800c942:	4628      	mov	r0, r5
 800c944:	f000 f81e 	bl	800c984 <__swsetup_r>
 800c948:	2800      	cmp	r0, #0
 800c94a:	d0cb      	beq.n	800c8e4 <__swbuf_r+0x28>
 800c94c:	f04f 37ff 	mov.w	r7, #4294967295
 800c950:	e7ea      	b.n	800c928 <__swbuf_r+0x6c>
 800c952:	bf00      	nop
 800c954:	0800e714 	.word	0x0800e714
 800c958:	0800e734 	.word	0x0800e734
 800c95c:	0800e6f4 	.word	0x0800e6f4

0800c960 <_write_r>:
 800c960:	b538      	push	{r3, r4, r5, lr}
 800c962:	4604      	mov	r4, r0
 800c964:	4608      	mov	r0, r1
 800c966:	4611      	mov	r1, r2
 800c968:	2200      	movs	r2, #0
 800c96a:	4d05      	ldr	r5, [pc, #20]	; (800c980 <_write_r+0x20>)
 800c96c:	602a      	str	r2, [r5, #0]
 800c96e:	461a      	mov	r2, r3
 800c970:	f7f8 fdc0 	bl	80054f4 <_write>
 800c974:	1c43      	adds	r3, r0, #1
 800c976:	d102      	bne.n	800c97e <_write_r+0x1e>
 800c978:	682b      	ldr	r3, [r5, #0]
 800c97a:	b103      	cbz	r3, 800c97e <_write_r+0x1e>
 800c97c:	6023      	str	r3, [r4, #0]
 800c97e:	bd38      	pop	{r3, r4, r5, pc}
 800c980:	20003784 	.word	0x20003784

0800c984 <__swsetup_r>:
 800c984:	4b32      	ldr	r3, [pc, #200]	; (800ca50 <__swsetup_r+0xcc>)
 800c986:	b570      	push	{r4, r5, r6, lr}
 800c988:	681d      	ldr	r5, [r3, #0]
 800c98a:	4606      	mov	r6, r0
 800c98c:	460c      	mov	r4, r1
 800c98e:	b125      	cbz	r5, 800c99a <__swsetup_r+0x16>
 800c990:	69ab      	ldr	r3, [r5, #24]
 800c992:	b913      	cbnz	r3, 800c99a <__swsetup_r+0x16>
 800c994:	4628      	mov	r0, r5
 800c996:	f000 f99d 	bl	800ccd4 <__sinit>
 800c99a:	4b2e      	ldr	r3, [pc, #184]	; (800ca54 <__swsetup_r+0xd0>)
 800c99c:	429c      	cmp	r4, r3
 800c99e:	d10f      	bne.n	800c9c0 <__swsetup_r+0x3c>
 800c9a0:	686c      	ldr	r4, [r5, #4]
 800c9a2:	89a3      	ldrh	r3, [r4, #12]
 800c9a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c9a8:	0719      	lsls	r1, r3, #28
 800c9aa:	d42c      	bmi.n	800ca06 <__swsetup_r+0x82>
 800c9ac:	06dd      	lsls	r5, r3, #27
 800c9ae:	d411      	bmi.n	800c9d4 <__swsetup_r+0x50>
 800c9b0:	2309      	movs	r3, #9
 800c9b2:	6033      	str	r3, [r6, #0]
 800c9b4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c9b8:	f04f 30ff 	mov.w	r0, #4294967295
 800c9bc:	81a3      	strh	r3, [r4, #12]
 800c9be:	e03e      	b.n	800ca3e <__swsetup_r+0xba>
 800c9c0:	4b25      	ldr	r3, [pc, #148]	; (800ca58 <__swsetup_r+0xd4>)
 800c9c2:	429c      	cmp	r4, r3
 800c9c4:	d101      	bne.n	800c9ca <__swsetup_r+0x46>
 800c9c6:	68ac      	ldr	r4, [r5, #8]
 800c9c8:	e7eb      	b.n	800c9a2 <__swsetup_r+0x1e>
 800c9ca:	4b24      	ldr	r3, [pc, #144]	; (800ca5c <__swsetup_r+0xd8>)
 800c9cc:	429c      	cmp	r4, r3
 800c9ce:	bf08      	it	eq
 800c9d0:	68ec      	ldreq	r4, [r5, #12]
 800c9d2:	e7e6      	b.n	800c9a2 <__swsetup_r+0x1e>
 800c9d4:	0758      	lsls	r0, r3, #29
 800c9d6:	d512      	bpl.n	800c9fe <__swsetup_r+0x7a>
 800c9d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c9da:	b141      	cbz	r1, 800c9ee <__swsetup_r+0x6a>
 800c9dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c9e0:	4299      	cmp	r1, r3
 800c9e2:	d002      	beq.n	800c9ea <__swsetup_r+0x66>
 800c9e4:	4630      	mov	r0, r6
 800c9e6:	f7fe fcb9 	bl	800b35c <_free_r>
 800c9ea:	2300      	movs	r3, #0
 800c9ec:	6363      	str	r3, [r4, #52]	; 0x34
 800c9ee:	89a3      	ldrh	r3, [r4, #12]
 800c9f0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c9f4:	81a3      	strh	r3, [r4, #12]
 800c9f6:	2300      	movs	r3, #0
 800c9f8:	6063      	str	r3, [r4, #4]
 800c9fa:	6923      	ldr	r3, [r4, #16]
 800c9fc:	6023      	str	r3, [r4, #0]
 800c9fe:	89a3      	ldrh	r3, [r4, #12]
 800ca00:	f043 0308 	orr.w	r3, r3, #8
 800ca04:	81a3      	strh	r3, [r4, #12]
 800ca06:	6923      	ldr	r3, [r4, #16]
 800ca08:	b94b      	cbnz	r3, 800ca1e <__swsetup_r+0x9a>
 800ca0a:	89a3      	ldrh	r3, [r4, #12]
 800ca0c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ca10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ca14:	d003      	beq.n	800ca1e <__swsetup_r+0x9a>
 800ca16:	4621      	mov	r1, r4
 800ca18:	4630      	mov	r0, r6
 800ca1a:	f000 fa31 	bl	800ce80 <__smakebuf_r>
 800ca1e:	89a0      	ldrh	r0, [r4, #12]
 800ca20:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ca24:	f010 0301 	ands.w	r3, r0, #1
 800ca28:	d00a      	beq.n	800ca40 <__swsetup_r+0xbc>
 800ca2a:	2300      	movs	r3, #0
 800ca2c:	60a3      	str	r3, [r4, #8]
 800ca2e:	6963      	ldr	r3, [r4, #20]
 800ca30:	425b      	negs	r3, r3
 800ca32:	61a3      	str	r3, [r4, #24]
 800ca34:	6923      	ldr	r3, [r4, #16]
 800ca36:	b943      	cbnz	r3, 800ca4a <__swsetup_r+0xc6>
 800ca38:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ca3c:	d1ba      	bne.n	800c9b4 <__swsetup_r+0x30>
 800ca3e:	bd70      	pop	{r4, r5, r6, pc}
 800ca40:	0781      	lsls	r1, r0, #30
 800ca42:	bf58      	it	pl
 800ca44:	6963      	ldrpl	r3, [r4, #20]
 800ca46:	60a3      	str	r3, [r4, #8]
 800ca48:	e7f4      	b.n	800ca34 <__swsetup_r+0xb0>
 800ca4a:	2000      	movs	r0, #0
 800ca4c:	e7f7      	b.n	800ca3e <__swsetup_r+0xba>
 800ca4e:	bf00      	nop
 800ca50:	200004e8 	.word	0x200004e8
 800ca54:	0800e714 	.word	0x0800e714
 800ca58:	0800e734 	.word	0x0800e734
 800ca5c:	0800e6f4 	.word	0x0800e6f4

0800ca60 <abort>:
 800ca60:	2006      	movs	r0, #6
 800ca62:	b508      	push	{r3, lr}
 800ca64:	f000 fe3c 	bl	800d6e0 <raise>
 800ca68:	2001      	movs	r0, #1
 800ca6a:	f7f8 fd1c 	bl	80054a6 <_exit>
	...

0800ca70 <_close_r>:
 800ca70:	b538      	push	{r3, r4, r5, lr}
 800ca72:	2300      	movs	r3, #0
 800ca74:	4d05      	ldr	r5, [pc, #20]	; (800ca8c <_close_r+0x1c>)
 800ca76:	4604      	mov	r4, r0
 800ca78:	4608      	mov	r0, r1
 800ca7a:	602b      	str	r3, [r5, #0]
 800ca7c:	f7f8 fd56 	bl	800552c <_close>
 800ca80:	1c43      	adds	r3, r0, #1
 800ca82:	d102      	bne.n	800ca8a <_close_r+0x1a>
 800ca84:	682b      	ldr	r3, [r5, #0]
 800ca86:	b103      	cbz	r3, 800ca8a <_close_r+0x1a>
 800ca88:	6023      	str	r3, [r4, #0]
 800ca8a:	bd38      	pop	{r3, r4, r5, pc}
 800ca8c:	20003784 	.word	0x20003784

0800ca90 <__env_lock>:
 800ca90:	4801      	ldr	r0, [pc, #4]	; (800ca98 <__env_lock+0x8>)
 800ca92:	f7ff b9af 	b.w	800bdf4 <__retarget_lock_acquire_recursive>
 800ca96:	bf00      	nop
 800ca98:	2000377c 	.word	0x2000377c

0800ca9c <__env_unlock>:
 800ca9c:	4801      	ldr	r0, [pc, #4]	; (800caa4 <__env_unlock+0x8>)
 800ca9e:	f7ff b9ab 	b.w	800bdf8 <__retarget_lock_release_recursive>
 800caa2:	bf00      	nop
 800caa4:	2000377c 	.word	0x2000377c

0800caa8 <__sflush_r>:
 800caa8:	898a      	ldrh	r2, [r1, #12]
 800caaa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800caac:	4605      	mov	r5, r0
 800caae:	0710      	lsls	r0, r2, #28
 800cab0:	460c      	mov	r4, r1
 800cab2:	d457      	bmi.n	800cb64 <__sflush_r+0xbc>
 800cab4:	684b      	ldr	r3, [r1, #4]
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	dc04      	bgt.n	800cac4 <__sflush_r+0x1c>
 800caba:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	dc01      	bgt.n	800cac4 <__sflush_r+0x1c>
 800cac0:	2000      	movs	r0, #0
 800cac2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cac4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cac6:	2e00      	cmp	r6, #0
 800cac8:	d0fa      	beq.n	800cac0 <__sflush_r+0x18>
 800caca:	2300      	movs	r3, #0
 800cacc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cad0:	682f      	ldr	r7, [r5, #0]
 800cad2:	602b      	str	r3, [r5, #0]
 800cad4:	d032      	beq.n	800cb3c <__sflush_r+0x94>
 800cad6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cad8:	89a3      	ldrh	r3, [r4, #12]
 800cada:	075a      	lsls	r2, r3, #29
 800cadc:	d505      	bpl.n	800caea <__sflush_r+0x42>
 800cade:	6863      	ldr	r3, [r4, #4]
 800cae0:	1ac0      	subs	r0, r0, r3
 800cae2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cae4:	b10b      	cbz	r3, 800caea <__sflush_r+0x42>
 800cae6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cae8:	1ac0      	subs	r0, r0, r3
 800caea:	2300      	movs	r3, #0
 800caec:	4602      	mov	r2, r0
 800caee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800caf0:	4628      	mov	r0, r5
 800caf2:	6a21      	ldr	r1, [r4, #32]
 800caf4:	47b0      	blx	r6
 800caf6:	1c43      	adds	r3, r0, #1
 800caf8:	89a3      	ldrh	r3, [r4, #12]
 800cafa:	d106      	bne.n	800cb0a <__sflush_r+0x62>
 800cafc:	6829      	ldr	r1, [r5, #0]
 800cafe:	291d      	cmp	r1, #29
 800cb00:	d82c      	bhi.n	800cb5c <__sflush_r+0xb4>
 800cb02:	4a29      	ldr	r2, [pc, #164]	; (800cba8 <__sflush_r+0x100>)
 800cb04:	40ca      	lsrs	r2, r1
 800cb06:	07d6      	lsls	r6, r2, #31
 800cb08:	d528      	bpl.n	800cb5c <__sflush_r+0xb4>
 800cb0a:	2200      	movs	r2, #0
 800cb0c:	6062      	str	r2, [r4, #4]
 800cb0e:	6922      	ldr	r2, [r4, #16]
 800cb10:	04d9      	lsls	r1, r3, #19
 800cb12:	6022      	str	r2, [r4, #0]
 800cb14:	d504      	bpl.n	800cb20 <__sflush_r+0x78>
 800cb16:	1c42      	adds	r2, r0, #1
 800cb18:	d101      	bne.n	800cb1e <__sflush_r+0x76>
 800cb1a:	682b      	ldr	r3, [r5, #0]
 800cb1c:	b903      	cbnz	r3, 800cb20 <__sflush_r+0x78>
 800cb1e:	6560      	str	r0, [r4, #84]	; 0x54
 800cb20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cb22:	602f      	str	r7, [r5, #0]
 800cb24:	2900      	cmp	r1, #0
 800cb26:	d0cb      	beq.n	800cac0 <__sflush_r+0x18>
 800cb28:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cb2c:	4299      	cmp	r1, r3
 800cb2e:	d002      	beq.n	800cb36 <__sflush_r+0x8e>
 800cb30:	4628      	mov	r0, r5
 800cb32:	f7fe fc13 	bl	800b35c <_free_r>
 800cb36:	2000      	movs	r0, #0
 800cb38:	6360      	str	r0, [r4, #52]	; 0x34
 800cb3a:	e7c2      	b.n	800cac2 <__sflush_r+0x1a>
 800cb3c:	6a21      	ldr	r1, [r4, #32]
 800cb3e:	2301      	movs	r3, #1
 800cb40:	4628      	mov	r0, r5
 800cb42:	47b0      	blx	r6
 800cb44:	1c41      	adds	r1, r0, #1
 800cb46:	d1c7      	bne.n	800cad8 <__sflush_r+0x30>
 800cb48:	682b      	ldr	r3, [r5, #0]
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d0c4      	beq.n	800cad8 <__sflush_r+0x30>
 800cb4e:	2b1d      	cmp	r3, #29
 800cb50:	d001      	beq.n	800cb56 <__sflush_r+0xae>
 800cb52:	2b16      	cmp	r3, #22
 800cb54:	d101      	bne.n	800cb5a <__sflush_r+0xb2>
 800cb56:	602f      	str	r7, [r5, #0]
 800cb58:	e7b2      	b.n	800cac0 <__sflush_r+0x18>
 800cb5a:	89a3      	ldrh	r3, [r4, #12]
 800cb5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cb60:	81a3      	strh	r3, [r4, #12]
 800cb62:	e7ae      	b.n	800cac2 <__sflush_r+0x1a>
 800cb64:	690f      	ldr	r7, [r1, #16]
 800cb66:	2f00      	cmp	r7, #0
 800cb68:	d0aa      	beq.n	800cac0 <__sflush_r+0x18>
 800cb6a:	0793      	lsls	r3, r2, #30
 800cb6c:	bf18      	it	ne
 800cb6e:	2300      	movne	r3, #0
 800cb70:	680e      	ldr	r6, [r1, #0]
 800cb72:	bf08      	it	eq
 800cb74:	694b      	ldreq	r3, [r1, #20]
 800cb76:	1bf6      	subs	r6, r6, r7
 800cb78:	600f      	str	r7, [r1, #0]
 800cb7a:	608b      	str	r3, [r1, #8]
 800cb7c:	2e00      	cmp	r6, #0
 800cb7e:	dd9f      	ble.n	800cac0 <__sflush_r+0x18>
 800cb80:	4633      	mov	r3, r6
 800cb82:	463a      	mov	r2, r7
 800cb84:	4628      	mov	r0, r5
 800cb86:	6a21      	ldr	r1, [r4, #32]
 800cb88:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800cb8c:	47e0      	blx	ip
 800cb8e:	2800      	cmp	r0, #0
 800cb90:	dc06      	bgt.n	800cba0 <__sflush_r+0xf8>
 800cb92:	89a3      	ldrh	r3, [r4, #12]
 800cb94:	f04f 30ff 	mov.w	r0, #4294967295
 800cb98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cb9c:	81a3      	strh	r3, [r4, #12]
 800cb9e:	e790      	b.n	800cac2 <__sflush_r+0x1a>
 800cba0:	4407      	add	r7, r0
 800cba2:	1a36      	subs	r6, r6, r0
 800cba4:	e7ea      	b.n	800cb7c <__sflush_r+0xd4>
 800cba6:	bf00      	nop
 800cba8:	20400001 	.word	0x20400001

0800cbac <_fflush_r>:
 800cbac:	b538      	push	{r3, r4, r5, lr}
 800cbae:	690b      	ldr	r3, [r1, #16]
 800cbb0:	4605      	mov	r5, r0
 800cbb2:	460c      	mov	r4, r1
 800cbb4:	b913      	cbnz	r3, 800cbbc <_fflush_r+0x10>
 800cbb6:	2500      	movs	r5, #0
 800cbb8:	4628      	mov	r0, r5
 800cbba:	bd38      	pop	{r3, r4, r5, pc}
 800cbbc:	b118      	cbz	r0, 800cbc6 <_fflush_r+0x1a>
 800cbbe:	6983      	ldr	r3, [r0, #24]
 800cbc0:	b90b      	cbnz	r3, 800cbc6 <_fflush_r+0x1a>
 800cbc2:	f000 f887 	bl	800ccd4 <__sinit>
 800cbc6:	4b14      	ldr	r3, [pc, #80]	; (800cc18 <_fflush_r+0x6c>)
 800cbc8:	429c      	cmp	r4, r3
 800cbca:	d11b      	bne.n	800cc04 <_fflush_r+0x58>
 800cbcc:	686c      	ldr	r4, [r5, #4]
 800cbce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d0ef      	beq.n	800cbb6 <_fflush_r+0xa>
 800cbd6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cbd8:	07d0      	lsls	r0, r2, #31
 800cbda:	d404      	bmi.n	800cbe6 <_fflush_r+0x3a>
 800cbdc:	0599      	lsls	r1, r3, #22
 800cbde:	d402      	bmi.n	800cbe6 <_fflush_r+0x3a>
 800cbe0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cbe2:	f7ff f907 	bl	800bdf4 <__retarget_lock_acquire_recursive>
 800cbe6:	4628      	mov	r0, r5
 800cbe8:	4621      	mov	r1, r4
 800cbea:	f7ff ff5d 	bl	800caa8 <__sflush_r>
 800cbee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cbf0:	4605      	mov	r5, r0
 800cbf2:	07da      	lsls	r2, r3, #31
 800cbf4:	d4e0      	bmi.n	800cbb8 <_fflush_r+0xc>
 800cbf6:	89a3      	ldrh	r3, [r4, #12]
 800cbf8:	059b      	lsls	r3, r3, #22
 800cbfa:	d4dd      	bmi.n	800cbb8 <_fflush_r+0xc>
 800cbfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cbfe:	f7ff f8fb 	bl	800bdf8 <__retarget_lock_release_recursive>
 800cc02:	e7d9      	b.n	800cbb8 <_fflush_r+0xc>
 800cc04:	4b05      	ldr	r3, [pc, #20]	; (800cc1c <_fflush_r+0x70>)
 800cc06:	429c      	cmp	r4, r3
 800cc08:	d101      	bne.n	800cc0e <_fflush_r+0x62>
 800cc0a:	68ac      	ldr	r4, [r5, #8]
 800cc0c:	e7df      	b.n	800cbce <_fflush_r+0x22>
 800cc0e:	4b04      	ldr	r3, [pc, #16]	; (800cc20 <_fflush_r+0x74>)
 800cc10:	429c      	cmp	r4, r3
 800cc12:	bf08      	it	eq
 800cc14:	68ec      	ldreq	r4, [r5, #12]
 800cc16:	e7da      	b.n	800cbce <_fflush_r+0x22>
 800cc18:	0800e714 	.word	0x0800e714
 800cc1c:	0800e734 	.word	0x0800e734
 800cc20:	0800e6f4 	.word	0x0800e6f4

0800cc24 <std>:
 800cc24:	2300      	movs	r3, #0
 800cc26:	b510      	push	{r4, lr}
 800cc28:	4604      	mov	r4, r0
 800cc2a:	e9c0 3300 	strd	r3, r3, [r0]
 800cc2e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cc32:	6083      	str	r3, [r0, #8]
 800cc34:	8181      	strh	r1, [r0, #12]
 800cc36:	6643      	str	r3, [r0, #100]	; 0x64
 800cc38:	81c2      	strh	r2, [r0, #14]
 800cc3a:	6183      	str	r3, [r0, #24]
 800cc3c:	4619      	mov	r1, r3
 800cc3e:	2208      	movs	r2, #8
 800cc40:	305c      	adds	r0, #92	; 0x5c
 800cc42:	f7fe f911 	bl	800ae68 <memset>
 800cc46:	4b05      	ldr	r3, [pc, #20]	; (800cc5c <std+0x38>)
 800cc48:	6224      	str	r4, [r4, #32]
 800cc4a:	6263      	str	r3, [r4, #36]	; 0x24
 800cc4c:	4b04      	ldr	r3, [pc, #16]	; (800cc60 <std+0x3c>)
 800cc4e:	62a3      	str	r3, [r4, #40]	; 0x28
 800cc50:	4b04      	ldr	r3, [pc, #16]	; (800cc64 <std+0x40>)
 800cc52:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cc54:	4b04      	ldr	r3, [pc, #16]	; (800cc68 <std+0x44>)
 800cc56:	6323      	str	r3, [r4, #48]	; 0x30
 800cc58:	bd10      	pop	{r4, pc}
 800cc5a:	bf00      	nop
 800cc5c:	0800c6fd 	.word	0x0800c6fd
 800cc60:	0800c723 	.word	0x0800c723
 800cc64:	0800c75b 	.word	0x0800c75b
 800cc68:	0800c77f 	.word	0x0800c77f

0800cc6c <_cleanup_r>:
 800cc6c:	4901      	ldr	r1, [pc, #4]	; (800cc74 <_cleanup_r+0x8>)
 800cc6e:	f000 b8af 	b.w	800cdd0 <_fwalk_reent>
 800cc72:	bf00      	nop
 800cc74:	0800cbad 	.word	0x0800cbad

0800cc78 <__sfmoreglue>:
 800cc78:	2268      	movs	r2, #104	; 0x68
 800cc7a:	b570      	push	{r4, r5, r6, lr}
 800cc7c:	1e4d      	subs	r5, r1, #1
 800cc7e:	4355      	muls	r5, r2
 800cc80:	460e      	mov	r6, r1
 800cc82:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800cc86:	f7fe fbd1 	bl	800b42c <_malloc_r>
 800cc8a:	4604      	mov	r4, r0
 800cc8c:	b140      	cbz	r0, 800cca0 <__sfmoreglue+0x28>
 800cc8e:	2100      	movs	r1, #0
 800cc90:	e9c0 1600 	strd	r1, r6, [r0]
 800cc94:	300c      	adds	r0, #12
 800cc96:	60a0      	str	r0, [r4, #8]
 800cc98:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800cc9c:	f7fe f8e4 	bl	800ae68 <memset>
 800cca0:	4620      	mov	r0, r4
 800cca2:	bd70      	pop	{r4, r5, r6, pc}

0800cca4 <__sfp_lock_acquire>:
 800cca4:	4801      	ldr	r0, [pc, #4]	; (800ccac <__sfp_lock_acquire+0x8>)
 800cca6:	f7ff b8a5 	b.w	800bdf4 <__retarget_lock_acquire_recursive>
 800ccaa:	bf00      	nop
 800ccac:	2000377e 	.word	0x2000377e

0800ccb0 <__sfp_lock_release>:
 800ccb0:	4801      	ldr	r0, [pc, #4]	; (800ccb8 <__sfp_lock_release+0x8>)
 800ccb2:	f7ff b8a1 	b.w	800bdf8 <__retarget_lock_release_recursive>
 800ccb6:	bf00      	nop
 800ccb8:	2000377e 	.word	0x2000377e

0800ccbc <__sinit_lock_acquire>:
 800ccbc:	4801      	ldr	r0, [pc, #4]	; (800ccc4 <__sinit_lock_acquire+0x8>)
 800ccbe:	f7ff b899 	b.w	800bdf4 <__retarget_lock_acquire_recursive>
 800ccc2:	bf00      	nop
 800ccc4:	2000377f 	.word	0x2000377f

0800ccc8 <__sinit_lock_release>:
 800ccc8:	4801      	ldr	r0, [pc, #4]	; (800ccd0 <__sinit_lock_release+0x8>)
 800ccca:	f7ff b895 	b.w	800bdf8 <__retarget_lock_release_recursive>
 800ccce:	bf00      	nop
 800ccd0:	2000377f 	.word	0x2000377f

0800ccd4 <__sinit>:
 800ccd4:	b510      	push	{r4, lr}
 800ccd6:	4604      	mov	r4, r0
 800ccd8:	f7ff fff0 	bl	800ccbc <__sinit_lock_acquire>
 800ccdc:	69a3      	ldr	r3, [r4, #24]
 800ccde:	b11b      	cbz	r3, 800cce8 <__sinit+0x14>
 800cce0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cce4:	f7ff bff0 	b.w	800ccc8 <__sinit_lock_release>
 800cce8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ccec:	6523      	str	r3, [r4, #80]	; 0x50
 800ccee:	4b13      	ldr	r3, [pc, #76]	; (800cd3c <__sinit+0x68>)
 800ccf0:	4a13      	ldr	r2, [pc, #76]	; (800cd40 <__sinit+0x6c>)
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	62a2      	str	r2, [r4, #40]	; 0x28
 800ccf6:	42a3      	cmp	r3, r4
 800ccf8:	bf08      	it	eq
 800ccfa:	2301      	moveq	r3, #1
 800ccfc:	4620      	mov	r0, r4
 800ccfe:	bf08      	it	eq
 800cd00:	61a3      	streq	r3, [r4, #24]
 800cd02:	f000 f81f 	bl	800cd44 <__sfp>
 800cd06:	6060      	str	r0, [r4, #4]
 800cd08:	4620      	mov	r0, r4
 800cd0a:	f000 f81b 	bl	800cd44 <__sfp>
 800cd0e:	60a0      	str	r0, [r4, #8]
 800cd10:	4620      	mov	r0, r4
 800cd12:	f000 f817 	bl	800cd44 <__sfp>
 800cd16:	2200      	movs	r2, #0
 800cd18:	2104      	movs	r1, #4
 800cd1a:	60e0      	str	r0, [r4, #12]
 800cd1c:	6860      	ldr	r0, [r4, #4]
 800cd1e:	f7ff ff81 	bl	800cc24 <std>
 800cd22:	2201      	movs	r2, #1
 800cd24:	2109      	movs	r1, #9
 800cd26:	68a0      	ldr	r0, [r4, #8]
 800cd28:	f7ff ff7c 	bl	800cc24 <std>
 800cd2c:	2202      	movs	r2, #2
 800cd2e:	2112      	movs	r1, #18
 800cd30:	68e0      	ldr	r0, [r4, #12]
 800cd32:	f7ff ff77 	bl	800cc24 <std>
 800cd36:	2301      	movs	r3, #1
 800cd38:	61a3      	str	r3, [r4, #24]
 800cd3a:	e7d1      	b.n	800cce0 <__sinit+0xc>
 800cd3c:	0800e3b4 	.word	0x0800e3b4
 800cd40:	0800cc6d 	.word	0x0800cc6d

0800cd44 <__sfp>:
 800cd44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd46:	4607      	mov	r7, r0
 800cd48:	f7ff ffac 	bl	800cca4 <__sfp_lock_acquire>
 800cd4c:	4b1e      	ldr	r3, [pc, #120]	; (800cdc8 <__sfp+0x84>)
 800cd4e:	681e      	ldr	r6, [r3, #0]
 800cd50:	69b3      	ldr	r3, [r6, #24]
 800cd52:	b913      	cbnz	r3, 800cd5a <__sfp+0x16>
 800cd54:	4630      	mov	r0, r6
 800cd56:	f7ff ffbd 	bl	800ccd4 <__sinit>
 800cd5a:	3648      	adds	r6, #72	; 0x48
 800cd5c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800cd60:	3b01      	subs	r3, #1
 800cd62:	d503      	bpl.n	800cd6c <__sfp+0x28>
 800cd64:	6833      	ldr	r3, [r6, #0]
 800cd66:	b30b      	cbz	r3, 800cdac <__sfp+0x68>
 800cd68:	6836      	ldr	r6, [r6, #0]
 800cd6a:	e7f7      	b.n	800cd5c <__sfp+0x18>
 800cd6c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800cd70:	b9d5      	cbnz	r5, 800cda8 <__sfp+0x64>
 800cd72:	4b16      	ldr	r3, [pc, #88]	; (800cdcc <__sfp+0x88>)
 800cd74:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cd78:	60e3      	str	r3, [r4, #12]
 800cd7a:	6665      	str	r5, [r4, #100]	; 0x64
 800cd7c:	f7ff f838 	bl	800bdf0 <__retarget_lock_init_recursive>
 800cd80:	f7ff ff96 	bl	800ccb0 <__sfp_lock_release>
 800cd84:	2208      	movs	r2, #8
 800cd86:	4629      	mov	r1, r5
 800cd88:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800cd8c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800cd90:	6025      	str	r5, [r4, #0]
 800cd92:	61a5      	str	r5, [r4, #24]
 800cd94:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800cd98:	f7fe f866 	bl	800ae68 <memset>
 800cd9c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800cda0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800cda4:	4620      	mov	r0, r4
 800cda6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cda8:	3468      	adds	r4, #104	; 0x68
 800cdaa:	e7d9      	b.n	800cd60 <__sfp+0x1c>
 800cdac:	2104      	movs	r1, #4
 800cdae:	4638      	mov	r0, r7
 800cdb0:	f7ff ff62 	bl	800cc78 <__sfmoreglue>
 800cdb4:	4604      	mov	r4, r0
 800cdb6:	6030      	str	r0, [r6, #0]
 800cdb8:	2800      	cmp	r0, #0
 800cdba:	d1d5      	bne.n	800cd68 <__sfp+0x24>
 800cdbc:	f7ff ff78 	bl	800ccb0 <__sfp_lock_release>
 800cdc0:	230c      	movs	r3, #12
 800cdc2:	603b      	str	r3, [r7, #0]
 800cdc4:	e7ee      	b.n	800cda4 <__sfp+0x60>
 800cdc6:	bf00      	nop
 800cdc8:	0800e3b4 	.word	0x0800e3b4
 800cdcc:	ffff0001 	.word	0xffff0001

0800cdd0 <_fwalk_reent>:
 800cdd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cdd4:	4606      	mov	r6, r0
 800cdd6:	4688      	mov	r8, r1
 800cdd8:	2700      	movs	r7, #0
 800cdda:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800cdde:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cde2:	f1b9 0901 	subs.w	r9, r9, #1
 800cde6:	d505      	bpl.n	800cdf4 <_fwalk_reent+0x24>
 800cde8:	6824      	ldr	r4, [r4, #0]
 800cdea:	2c00      	cmp	r4, #0
 800cdec:	d1f7      	bne.n	800cdde <_fwalk_reent+0xe>
 800cdee:	4638      	mov	r0, r7
 800cdf0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cdf4:	89ab      	ldrh	r3, [r5, #12]
 800cdf6:	2b01      	cmp	r3, #1
 800cdf8:	d907      	bls.n	800ce0a <_fwalk_reent+0x3a>
 800cdfa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cdfe:	3301      	adds	r3, #1
 800ce00:	d003      	beq.n	800ce0a <_fwalk_reent+0x3a>
 800ce02:	4629      	mov	r1, r5
 800ce04:	4630      	mov	r0, r6
 800ce06:	47c0      	blx	r8
 800ce08:	4307      	orrs	r7, r0
 800ce0a:	3568      	adds	r5, #104	; 0x68
 800ce0c:	e7e9      	b.n	800cde2 <_fwalk_reent+0x12>
	...

0800ce10 <_lseek_r>:
 800ce10:	b538      	push	{r3, r4, r5, lr}
 800ce12:	4604      	mov	r4, r0
 800ce14:	4608      	mov	r0, r1
 800ce16:	4611      	mov	r1, r2
 800ce18:	2200      	movs	r2, #0
 800ce1a:	4d05      	ldr	r5, [pc, #20]	; (800ce30 <_lseek_r+0x20>)
 800ce1c:	602a      	str	r2, [r5, #0]
 800ce1e:	461a      	mov	r2, r3
 800ce20:	f7f8 fba8 	bl	8005574 <_lseek>
 800ce24:	1c43      	adds	r3, r0, #1
 800ce26:	d102      	bne.n	800ce2e <_lseek_r+0x1e>
 800ce28:	682b      	ldr	r3, [r5, #0]
 800ce2a:	b103      	cbz	r3, 800ce2e <_lseek_r+0x1e>
 800ce2c:	6023      	str	r3, [r4, #0]
 800ce2e:	bd38      	pop	{r3, r4, r5, pc}
 800ce30:	20003784 	.word	0x20003784

0800ce34 <__swhatbuf_r>:
 800ce34:	b570      	push	{r4, r5, r6, lr}
 800ce36:	460e      	mov	r6, r1
 800ce38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce3c:	4614      	mov	r4, r2
 800ce3e:	2900      	cmp	r1, #0
 800ce40:	461d      	mov	r5, r3
 800ce42:	b096      	sub	sp, #88	; 0x58
 800ce44:	da08      	bge.n	800ce58 <__swhatbuf_r+0x24>
 800ce46:	2200      	movs	r2, #0
 800ce48:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ce4c:	602a      	str	r2, [r5, #0]
 800ce4e:	061a      	lsls	r2, r3, #24
 800ce50:	d410      	bmi.n	800ce74 <__swhatbuf_r+0x40>
 800ce52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ce56:	e00e      	b.n	800ce76 <__swhatbuf_r+0x42>
 800ce58:	466a      	mov	r2, sp
 800ce5a:	f000 fc95 	bl	800d788 <_fstat_r>
 800ce5e:	2800      	cmp	r0, #0
 800ce60:	dbf1      	blt.n	800ce46 <__swhatbuf_r+0x12>
 800ce62:	9a01      	ldr	r2, [sp, #4]
 800ce64:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ce68:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ce6c:	425a      	negs	r2, r3
 800ce6e:	415a      	adcs	r2, r3
 800ce70:	602a      	str	r2, [r5, #0]
 800ce72:	e7ee      	b.n	800ce52 <__swhatbuf_r+0x1e>
 800ce74:	2340      	movs	r3, #64	; 0x40
 800ce76:	2000      	movs	r0, #0
 800ce78:	6023      	str	r3, [r4, #0]
 800ce7a:	b016      	add	sp, #88	; 0x58
 800ce7c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ce80 <__smakebuf_r>:
 800ce80:	898b      	ldrh	r3, [r1, #12]
 800ce82:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ce84:	079d      	lsls	r5, r3, #30
 800ce86:	4606      	mov	r6, r0
 800ce88:	460c      	mov	r4, r1
 800ce8a:	d507      	bpl.n	800ce9c <__smakebuf_r+0x1c>
 800ce8c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ce90:	6023      	str	r3, [r4, #0]
 800ce92:	6123      	str	r3, [r4, #16]
 800ce94:	2301      	movs	r3, #1
 800ce96:	6163      	str	r3, [r4, #20]
 800ce98:	b002      	add	sp, #8
 800ce9a:	bd70      	pop	{r4, r5, r6, pc}
 800ce9c:	466a      	mov	r2, sp
 800ce9e:	ab01      	add	r3, sp, #4
 800cea0:	f7ff ffc8 	bl	800ce34 <__swhatbuf_r>
 800cea4:	9900      	ldr	r1, [sp, #0]
 800cea6:	4605      	mov	r5, r0
 800cea8:	4630      	mov	r0, r6
 800ceaa:	f7fe fabf 	bl	800b42c <_malloc_r>
 800ceae:	b948      	cbnz	r0, 800cec4 <__smakebuf_r+0x44>
 800ceb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ceb4:	059a      	lsls	r2, r3, #22
 800ceb6:	d4ef      	bmi.n	800ce98 <__smakebuf_r+0x18>
 800ceb8:	f023 0303 	bic.w	r3, r3, #3
 800cebc:	f043 0302 	orr.w	r3, r3, #2
 800cec0:	81a3      	strh	r3, [r4, #12]
 800cec2:	e7e3      	b.n	800ce8c <__smakebuf_r+0xc>
 800cec4:	4b0d      	ldr	r3, [pc, #52]	; (800cefc <__smakebuf_r+0x7c>)
 800cec6:	62b3      	str	r3, [r6, #40]	; 0x28
 800cec8:	89a3      	ldrh	r3, [r4, #12]
 800ceca:	6020      	str	r0, [r4, #0]
 800cecc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ced0:	81a3      	strh	r3, [r4, #12]
 800ced2:	9b00      	ldr	r3, [sp, #0]
 800ced4:	6120      	str	r0, [r4, #16]
 800ced6:	6163      	str	r3, [r4, #20]
 800ced8:	9b01      	ldr	r3, [sp, #4]
 800ceda:	b15b      	cbz	r3, 800cef4 <__smakebuf_r+0x74>
 800cedc:	4630      	mov	r0, r6
 800cede:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cee2:	f000 fc63 	bl	800d7ac <_isatty_r>
 800cee6:	b128      	cbz	r0, 800cef4 <__smakebuf_r+0x74>
 800cee8:	89a3      	ldrh	r3, [r4, #12]
 800ceea:	f023 0303 	bic.w	r3, r3, #3
 800ceee:	f043 0301 	orr.w	r3, r3, #1
 800cef2:	81a3      	strh	r3, [r4, #12]
 800cef4:	89a0      	ldrh	r0, [r4, #12]
 800cef6:	4305      	orrs	r5, r0
 800cef8:	81a5      	strh	r5, [r4, #12]
 800cefa:	e7cd      	b.n	800ce98 <__smakebuf_r+0x18>
 800cefc:	0800cc6d 	.word	0x0800cc6d

0800cf00 <memchr>:
 800cf00:	4603      	mov	r3, r0
 800cf02:	b510      	push	{r4, lr}
 800cf04:	b2c9      	uxtb	r1, r1
 800cf06:	4402      	add	r2, r0
 800cf08:	4293      	cmp	r3, r2
 800cf0a:	4618      	mov	r0, r3
 800cf0c:	d101      	bne.n	800cf12 <memchr+0x12>
 800cf0e:	2000      	movs	r0, #0
 800cf10:	e003      	b.n	800cf1a <memchr+0x1a>
 800cf12:	7804      	ldrb	r4, [r0, #0]
 800cf14:	3301      	adds	r3, #1
 800cf16:	428c      	cmp	r4, r1
 800cf18:	d1f6      	bne.n	800cf08 <memchr+0x8>
 800cf1a:	bd10      	pop	{r4, pc}

0800cf1c <memmove>:
 800cf1c:	4288      	cmp	r0, r1
 800cf1e:	b510      	push	{r4, lr}
 800cf20:	eb01 0402 	add.w	r4, r1, r2
 800cf24:	d902      	bls.n	800cf2c <memmove+0x10>
 800cf26:	4284      	cmp	r4, r0
 800cf28:	4623      	mov	r3, r4
 800cf2a:	d807      	bhi.n	800cf3c <memmove+0x20>
 800cf2c:	1e43      	subs	r3, r0, #1
 800cf2e:	42a1      	cmp	r1, r4
 800cf30:	d008      	beq.n	800cf44 <memmove+0x28>
 800cf32:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cf36:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cf3a:	e7f8      	b.n	800cf2e <memmove+0x12>
 800cf3c:	4601      	mov	r1, r0
 800cf3e:	4402      	add	r2, r0
 800cf40:	428a      	cmp	r2, r1
 800cf42:	d100      	bne.n	800cf46 <memmove+0x2a>
 800cf44:	bd10      	pop	{r4, pc}
 800cf46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cf4a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cf4e:	e7f7      	b.n	800cf40 <memmove+0x24>

0800cf50 <_realloc_r>:
 800cf50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf54:	4680      	mov	r8, r0
 800cf56:	4614      	mov	r4, r2
 800cf58:	460e      	mov	r6, r1
 800cf5a:	b921      	cbnz	r1, 800cf66 <_realloc_r+0x16>
 800cf5c:	4611      	mov	r1, r2
 800cf5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cf62:	f7fe ba63 	b.w	800b42c <_malloc_r>
 800cf66:	b92a      	cbnz	r2, 800cf74 <_realloc_r+0x24>
 800cf68:	f7fe f9f8 	bl	800b35c <_free_r>
 800cf6c:	4625      	mov	r5, r4
 800cf6e:	4628      	mov	r0, r5
 800cf70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf74:	f000 fc2a 	bl	800d7cc <_malloc_usable_size_r>
 800cf78:	4284      	cmp	r4, r0
 800cf7a:	4607      	mov	r7, r0
 800cf7c:	d802      	bhi.n	800cf84 <_realloc_r+0x34>
 800cf7e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cf82:	d812      	bhi.n	800cfaa <_realloc_r+0x5a>
 800cf84:	4621      	mov	r1, r4
 800cf86:	4640      	mov	r0, r8
 800cf88:	f7fe fa50 	bl	800b42c <_malloc_r>
 800cf8c:	4605      	mov	r5, r0
 800cf8e:	2800      	cmp	r0, #0
 800cf90:	d0ed      	beq.n	800cf6e <_realloc_r+0x1e>
 800cf92:	42bc      	cmp	r4, r7
 800cf94:	4622      	mov	r2, r4
 800cf96:	4631      	mov	r1, r6
 800cf98:	bf28      	it	cs
 800cf9a:	463a      	movcs	r2, r7
 800cf9c:	f7fd ff56 	bl	800ae4c <memcpy>
 800cfa0:	4631      	mov	r1, r6
 800cfa2:	4640      	mov	r0, r8
 800cfa4:	f7fe f9da 	bl	800b35c <_free_r>
 800cfa8:	e7e1      	b.n	800cf6e <_realloc_r+0x1e>
 800cfaa:	4635      	mov	r5, r6
 800cfac:	e7df      	b.n	800cf6e <_realloc_r+0x1e>

0800cfae <_sungetc_r>:
 800cfae:	b538      	push	{r3, r4, r5, lr}
 800cfb0:	1c4b      	adds	r3, r1, #1
 800cfb2:	4614      	mov	r4, r2
 800cfb4:	d103      	bne.n	800cfbe <_sungetc_r+0x10>
 800cfb6:	f04f 35ff 	mov.w	r5, #4294967295
 800cfba:	4628      	mov	r0, r5
 800cfbc:	bd38      	pop	{r3, r4, r5, pc}
 800cfbe:	8993      	ldrh	r3, [r2, #12]
 800cfc0:	b2cd      	uxtb	r5, r1
 800cfc2:	f023 0320 	bic.w	r3, r3, #32
 800cfc6:	8193      	strh	r3, [r2, #12]
 800cfc8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cfca:	6852      	ldr	r2, [r2, #4]
 800cfcc:	b18b      	cbz	r3, 800cff2 <_sungetc_r+0x44>
 800cfce:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800cfd0:	4293      	cmp	r3, r2
 800cfd2:	dd08      	ble.n	800cfe6 <_sungetc_r+0x38>
 800cfd4:	6823      	ldr	r3, [r4, #0]
 800cfd6:	1e5a      	subs	r2, r3, #1
 800cfd8:	6022      	str	r2, [r4, #0]
 800cfda:	f803 5c01 	strb.w	r5, [r3, #-1]
 800cfde:	6863      	ldr	r3, [r4, #4]
 800cfe0:	3301      	adds	r3, #1
 800cfe2:	6063      	str	r3, [r4, #4]
 800cfe4:	e7e9      	b.n	800cfba <_sungetc_r+0xc>
 800cfe6:	4621      	mov	r1, r4
 800cfe8:	f000 fb96 	bl	800d718 <__submore>
 800cfec:	2800      	cmp	r0, #0
 800cfee:	d0f1      	beq.n	800cfd4 <_sungetc_r+0x26>
 800cff0:	e7e1      	b.n	800cfb6 <_sungetc_r+0x8>
 800cff2:	6921      	ldr	r1, [r4, #16]
 800cff4:	6823      	ldr	r3, [r4, #0]
 800cff6:	b151      	cbz	r1, 800d00e <_sungetc_r+0x60>
 800cff8:	4299      	cmp	r1, r3
 800cffa:	d208      	bcs.n	800d00e <_sungetc_r+0x60>
 800cffc:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800d000:	42a9      	cmp	r1, r5
 800d002:	d104      	bne.n	800d00e <_sungetc_r+0x60>
 800d004:	3b01      	subs	r3, #1
 800d006:	3201      	adds	r2, #1
 800d008:	6023      	str	r3, [r4, #0]
 800d00a:	6062      	str	r2, [r4, #4]
 800d00c:	e7d5      	b.n	800cfba <_sungetc_r+0xc>
 800d00e:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800d012:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d016:	6363      	str	r3, [r4, #52]	; 0x34
 800d018:	2303      	movs	r3, #3
 800d01a:	63a3      	str	r3, [r4, #56]	; 0x38
 800d01c:	4623      	mov	r3, r4
 800d01e:	f803 5f46 	strb.w	r5, [r3, #70]!
 800d022:	6023      	str	r3, [r4, #0]
 800d024:	2301      	movs	r3, #1
 800d026:	e7dc      	b.n	800cfe2 <_sungetc_r+0x34>

0800d028 <__ssrefill_r>:
 800d028:	b510      	push	{r4, lr}
 800d02a:	460c      	mov	r4, r1
 800d02c:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800d02e:	b169      	cbz	r1, 800d04c <__ssrefill_r+0x24>
 800d030:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d034:	4299      	cmp	r1, r3
 800d036:	d001      	beq.n	800d03c <__ssrefill_r+0x14>
 800d038:	f7fe f990 	bl	800b35c <_free_r>
 800d03c:	2000      	movs	r0, #0
 800d03e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d040:	6360      	str	r0, [r4, #52]	; 0x34
 800d042:	6063      	str	r3, [r4, #4]
 800d044:	b113      	cbz	r3, 800d04c <__ssrefill_r+0x24>
 800d046:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800d048:	6023      	str	r3, [r4, #0]
 800d04a:	bd10      	pop	{r4, pc}
 800d04c:	6923      	ldr	r3, [r4, #16]
 800d04e:	f04f 30ff 	mov.w	r0, #4294967295
 800d052:	6023      	str	r3, [r4, #0]
 800d054:	2300      	movs	r3, #0
 800d056:	6063      	str	r3, [r4, #4]
 800d058:	89a3      	ldrh	r3, [r4, #12]
 800d05a:	f043 0320 	orr.w	r3, r3, #32
 800d05e:	81a3      	strh	r3, [r4, #12]
 800d060:	e7f3      	b.n	800d04a <__ssrefill_r+0x22>
	...

0800d064 <__ssvfiscanf_r>:
 800d064:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d068:	460c      	mov	r4, r1
 800d06a:	2100      	movs	r1, #0
 800d06c:	4606      	mov	r6, r0
 800d06e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800d072:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800d076:	49a7      	ldr	r1, [pc, #668]	; (800d314 <__ssvfiscanf_r+0x2b0>)
 800d078:	f10d 0804 	add.w	r8, sp, #4
 800d07c:	91a0      	str	r1, [sp, #640]	; 0x280
 800d07e:	49a6      	ldr	r1, [pc, #664]	; (800d318 <__ssvfiscanf_r+0x2b4>)
 800d080:	4fa6      	ldr	r7, [pc, #664]	; (800d31c <__ssvfiscanf_r+0x2b8>)
 800d082:	f8df 929c 	ldr.w	r9, [pc, #668]	; 800d320 <__ssvfiscanf_r+0x2bc>
 800d086:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800d08a:	91a1      	str	r1, [sp, #644]	; 0x284
 800d08c:	9300      	str	r3, [sp, #0]
 800d08e:	7813      	ldrb	r3, [r2, #0]
 800d090:	2b00      	cmp	r3, #0
 800d092:	f000 815c 	beq.w	800d34e <__ssvfiscanf_r+0x2ea>
 800d096:	5dd9      	ldrb	r1, [r3, r7]
 800d098:	1c55      	adds	r5, r2, #1
 800d09a:	f011 0108 	ands.w	r1, r1, #8
 800d09e:	d019      	beq.n	800d0d4 <__ssvfiscanf_r+0x70>
 800d0a0:	6863      	ldr	r3, [r4, #4]
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	dd0f      	ble.n	800d0c6 <__ssvfiscanf_r+0x62>
 800d0a6:	6823      	ldr	r3, [r4, #0]
 800d0a8:	781a      	ldrb	r2, [r3, #0]
 800d0aa:	5cba      	ldrb	r2, [r7, r2]
 800d0ac:	0712      	lsls	r2, r2, #28
 800d0ae:	d401      	bmi.n	800d0b4 <__ssvfiscanf_r+0x50>
 800d0b0:	462a      	mov	r2, r5
 800d0b2:	e7ec      	b.n	800d08e <__ssvfiscanf_r+0x2a>
 800d0b4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800d0b6:	3301      	adds	r3, #1
 800d0b8:	3201      	adds	r2, #1
 800d0ba:	9245      	str	r2, [sp, #276]	; 0x114
 800d0bc:	6862      	ldr	r2, [r4, #4]
 800d0be:	6023      	str	r3, [r4, #0]
 800d0c0:	3a01      	subs	r2, #1
 800d0c2:	6062      	str	r2, [r4, #4]
 800d0c4:	e7ec      	b.n	800d0a0 <__ssvfiscanf_r+0x3c>
 800d0c6:	4621      	mov	r1, r4
 800d0c8:	4630      	mov	r0, r6
 800d0ca:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800d0cc:	4798      	blx	r3
 800d0ce:	2800      	cmp	r0, #0
 800d0d0:	d0e9      	beq.n	800d0a6 <__ssvfiscanf_r+0x42>
 800d0d2:	e7ed      	b.n	800d0b0 <__ssvfiscanf_r+0x4c>
 800d0d4:	2b25      	cmp	r3, #37	; 0x25
 800d0d6:	d012      	beq.n	800d0fe <__ssvfiscanf_r+0x9a>
 800d0d8:	469a      	mov	sl, r3
 800d0da:	6863      	ldr	r3, [r4, #4]
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	f340 8094 	ble.w	800d20a <__ssvfiscanf_r+0x1a6>
 800d0e2:	6822      	ldr	r2, [r4, #0]
 800d0e4:	7813      	ldrb	r3, [r2, #0]
 800d0e6:	4553      	cmp	r3, sl
 800d0e8:	f040 8131 	bne.w	800d34e <__ssvfiscanf_r+0x2ea>
 800d0ec:	6863      	ldr	r3, [r4, #4]
 800d0ee:	3201      	adds	r2, #1
 800d0f0:	3b01      	subs	r3, #1
 800d0f2:	6063      	str	r3, [r4, #4]
 800d0f4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800d0f6:	6022      	str	r2, [r4, #0]
 800d0f8:	3301      	adds	r3, #1
 800d0fa:	9345      	str	r3, [sp, #276]	; 0x114
 800d0fc:	e7d8      	b.n	800d0b0 <__ssvfiscanf_r+0x4c>
 800d0fe:	9141      	str	r1, [sp, #260]	; 0x104
 800d100:	9143      	str	r1, [sp, #268]	; 0x10c
 800d102:	7853      	ldrb	r3, [r2, #1]
 800d104:	2b2a      	cmp	r3, #42	; 0x2a
 800d106:	bf04      	itt	eq
 800d108:	2310      	moveq	r3, #16
 800d10a:	1c95      	addeq	r5, r2, #2
 800d10c:	f04f 020a 	mov.w	r2, #10
 800d110:	bf08      	it	eq
 800d112:	9341      	streq	r3, [sp, #260]	; 0x104
 800d114:	46aa      	mov	sl, r5
 800d116:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800d11a:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800d11e:	2b09      	cmp	r3, #9
 800d120:	d91d      	bls.n	800d15e <__ssvfiscanf_r+0xfa>
 800d122:	2203      	movs	r2, #3
 800d124:	487e      	ldr	r0, [pc, #504]	; (800d320 <__ssvfiscanf_r+0x2bc>)
 800d126:	f7ff feeb 	bl	800cf00 <memchr>
 800d12a:	b140      	cbz	r0, 800d13e <__ssvfiscanf_r+0xda>
 800d12c:	2301      	movs	r3, #1
 800d12e:	4655      	mov	r5, sl
 800d130:	eba0 0009 	sub.w	r0, r0, r9
 800d134:	fa03 f000 	lsl.w	r0, r3, r0
 800d138:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800d13a:	4318      	orrs	r0, r3
 800d13c:	9041      	str	r0, [sp, #260]	; 0x104
 800d13e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d142:	2b78      	cmp	r3, #120	; 0x78
 800d144:	d806      	bhi.n	800d154 <__ssvfiscanf_r+0xf0>
 800d146:	2b57      	cmp	r3, #87	; 0x57
 800d148:	d810      	bhi.n	800d16c <__ssvfiscanf_r+0x108>
 800d14a:	2b25      	cmp	r3, #37	; 0x25
 800d14c:	d0c4      	beq.n	800d0d8 <__ssvfiscanf_r+0x74>
 800d14e:	d857      	bhi.n	800d200 <__ssvfiscanf_r+0x19c>
 800d150:	2b00      	cmp	r3, #0
 800d152:	d065      	beq.n	800d220 <__ssvfiscanf_r+0x1bc>
 800d154:	2303      	movs	r3, #3
 800d156:	9347      	str	r3, [sp, #284]	; 0x11c
 800d158:	230a      	movs	r3, #10
 800d15a:	9342      	str	r3, [sp, #264]	; 0x108
 800d15c:	e072      	b.n	800d244 <__ssvfiscanf_r+0x1e0>
 800d15e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800d160:	4655      	mov	r5, sl
 800d162:	fb02 1103 	mla	r1, r2, r3, r1
 800d166:	3930      	subs	r1, #48	; 0x30
 800d168:	9143      	str	r1, [sp, #268]	; 0x10c
 800d16a:	e7d3      	b.n	800d114 <__ssvfiscanf_r+0xb0>
 800d16c:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800d170:	2a20      	cmp	r2, #32
 800d172:	d8ef      	bhi.n	800d154 <__ssvfiscanf_r+0xf0>
 800d174:	a101      	add	r1, pc, #4	; (adr r1, 800d17c <__ssvfiscanf_r+0x118>)
 800d176:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800d17a:	bf00      	nop
 800d17c:	0800d22f 	.word	0x0800d22f
 800d180:	0800d155 	.word	0x0800d155
 800d184:	0800d155 	.word	0x0800d155
 800d188:	0800d28d 	.word	0x0800d28d
 800d18c:	0800d155 	.word	0x0800d155
 800d190:	0800d155 	.word	0x0800d155
 800d194:	0800d155 	.word	0x0800d155
 800d198:	0800d155 	.word	0x0800d155
 800d19c:	0800d155 	.word	0x0800d155
 800d1a0:	0800d155 	.word	0x0800d155
 800d1a4:	0800d155 	.word	0x0800d155
 800d1a8:	0800d2a3 	.word	0x0800d2a3
 800d1ac:	0800d279 	.word	0x0800d279
 800d1b0:	0800d207 	.word	0x0800d207
 800d1b4:	0800d207 	.word	0x0800d207
 800d1b8:	0800d207 	.word	0x0800d207
 800d1bc:	0800d155 	.word	0x0800d155
 800d1c0:	0800d27d 	.word	0x0800d27d
 800d1c4:	0800d155 	.word	0x0800d155
 800d1c8:	0800d155 	.word	0x0800d155
 800d1cc:	0800d155 	.word	0x0800d155
 800d1d0:	0800d155 	.word	0x0800d155
 800d1d4:	0800d2b3 	.word	0x0800d2b3
 800d1d8:	0800d285 	.word	0x0800d285
 800d1dc:	0800d227 	.word	0x0800d227
 800d1e0:	0800d155 	.word	0x0800d155
 800d1e4:	0800d155 	.word	0x0800d155
 800d1e8:	0800d2af 	.word	0x0800d2af
 800d1ec:	0800d155 	.word	0x0800d155
 800d1f0:	0800d279 	.word	0x0800d279
 800d1f4:	0800d155 	.word	0x0800d155
 800d1f8:	0800d155 	.word	0x0800d155
 800d1fc:	0800d22f 	.word	0x0800d22f
 800d200:	3b45      	subs	r3, #69	; 0x45
 800d202:	2b02      	cmp	r3, #2
 800d204:	d8a6      	bhi.n	800d154 <__ssvfiscanf_r+0xf0>
 800d206:	2305      	movs	r3, #5
 800d208:	e01b      	b.n	800d242 <__ssvfiscanf_r+0x1de>
 800d20a:	4621      	mov	r1, r4
 800d20c:	4630      	mov	r0, r6
 800d20e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800d210:	4798      	blx	r3
 800d212:	2800      	cmp	r0, #0
 800d214:	f43f af65 	beq.w	800d0e2 <__ssvfiscanf_r+0x7e>
 800d218:	9844      	ldr	r0, [sp, #272]	; 0x110
 800d21a:	2800      	cmp	r0, #0
 800d21c:	f040 808d 	bne.w	800d33a <__ssvfiscanf_r+0x2d6>
 800d220:	f04f 30ff 	mov.w	r0, #4294967295
 800d224:	e08f      	b.n	800d346 <__ssvfiscanf_r+0x2e2>
 800d226:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800d228:	f042 0220 	orr.w	r2, r2, #32
 800d22c:	9241      	str	r2, [sp, #260]	; 0x104
 800d22e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800d230:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d234:	9241      	str	r2, [sp, #260]	; 0x104
 800d236:	2210      	movs	r2, #16
 800d238:	2b6f      	cmp	r3, #111	; 0x6f
 800d23a:	bf34      	ite	cc
 800d23c:	2303      	movcc	r3, #3
 800d23e:	2304      	movcs	r3, #4
 800d240:	9242      	str	r2, [sp, #264]	; 0x108
 800d242:	9347      	str	r3, [sp, #284]	; 0x11c
 800d244:	6863      	ldr	r3, [r4, #4]
 800d246:	2b00      	cmp	r3, #0
 800d248:	dd42      	ble.n	800d2d0 <__ssvfiscanf_r+0x26c>
 800d24a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800d24c:	0659      	lsls	r1, r3, #25
 800d24e:	d404      	bmi.n	800d25a <__ssvfiscanf_r+0x1f6>
 800d250:	6823      	ldr	r3, [r4, #0]
 800d252:	781a      	ldrb	r2, [r3, #0]
 800d254:	5cba      	ldrb	r2, [r7, r2]
 800d256:	0712      	lsls	r2, r2, #28
 800d258:	d441      	bmi.n	800d2de <__ssvfiscanf_r+0x27a>
 800d25a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800d25c:	2b02      	cmp	r3, #2
 800d25e:	dc50      	bgt.n	800d302 <__ssvfiscanf_r+0x29e>
 800d260:	466b      	mov	r3, sp
 800d262:	4622      	mov	r2, r4
 800d264:	4630      	mov	r0, r6
 800d266:	a941      	add	r1, sp, #260	; 0x104
 800d268:	f000 f876 	bl	800d358 <_scanf_chars>
 800d26c:	2801      	cmp	r0, #1
 800d26e:	d06e      	beq.n	800d34e <__ssvfiscanf_r+0x2ea>
 800d270:	2802      	cmp	r0, #2
 800d272:	f47f af1d 	bne.w	800d0b0 <__ssvfiscanf_r+0x4c>
 800d276:	e7cf      	b.n	800d218 <__ssvfiscanf_r+0x1b4>
 800d278:	220a      	movs	r2, #10
 800d27a:	e7dd      	b.n	800d238 <__ssvfiscanf_r+0x1d4>
 800d27c:	2300      	movs	r3, #0
 800d27e:	9342      	str	r3, [sp, #264]	; 0x108
 800d280:	2303      	movs	r3, #3
 800d282:	e7de      	b.n	800d242 <__ssvfiscanf_r+0x1de>
 800d284:	2308      	movs	r3, #8
 800d286:	9342      	str	r3, [sp, #264]	; 0x108
 800d288:	2304      	movs	r3, #4
 800d28a:	e7da      	b.n	800d242 <__ssvfiscanf_r+0x1de>
 800d28c:	4629      	mov	r1, r5
 800d28e:	4640      	mov	r0, r8
 800d290:	f000 f9c6 	bl	800d620 <__sccl>
 800d294:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800d296:	4605      	mov	r5, r0
 800d298:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d29c:	9341      	str	r3, [sp, #260]	; 0x104
 800d29e:	2301      	movs	r3, #1
 800d2a0:	e7cf      	b.n	800d242 <__ssvfiscanf_r+0x1de>
 800d2a2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800d2a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d2a8:	9341      	str	r3, [sp, #260]	; 0x104
 800d2aa:	2300      	movs	r3, #0
 800d2ac:	e7c9      	b.n	800d242 <__ssvfiscanf_r+0x1de>
 800d2ae:	2302      	movs	r3, #2
 800d2b0:	e7c7      	b.n	800d242 <__ssvfiscanf_r+0x1de>
 800d2b2:	9841      	ldr	r0, [sp, #260]	; 0x104
 800d2b4:	06c3      	lsls	r3, r0, #27
 800d2b6:	f53f aefb 	bmi.w	800d0b0 <__ssvfiscanf_r+0x4c>
 800d2ba:	9b00      	ldr	r3, [sp, #0]
 800d2bc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800d2be:	1d19      	adds	r1, r3, #4
 800d2c0:	9100      	str	r1, [sp, #0]
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	f010 0f01 	tst.w	r0, #1
 800d2c8:	bf14      	ite	ne
 800d2ca:	801a      	strhne	r2, [r3, #0]
 800d2cc:	601a      	streq	r2, [r3, #0]
 800d2ce:	e6ef      	b.n	800d0b0 <__ssvfiscanf_r+0x4c>
 800d2d0:	4621      	mov	r1, r4
 800d2d2:	4630      	mov	r0, r6
 800d2d4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800d2d6:	4798      	blx	r3
 800d2d8:	2800      	cmp	r0, #0
 800d2da:	d0b6      	beq.n	800d24a <__ssvfiscanf_r+0x1e6>
 800d2dc:	e79c      	b.n	800d218 <__ssvfiscanf_r+0x1b4>
 800d2de:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800d2e0:	3201      	adds	r2, #1
 800d2e2:	9245      	str	r2, [sp, #276]	; 0x114
 800d2e4:	6862      	ldr	r2, [r4, #4]
 800d2e6:	3a01      	subs	r2, #1
 800d2e8:	2a00      	cmp	r2, #0
 800d2ea:	6062      	str	r2, [r4, #4]
 800d2ec:	dd02      	ble.n	800d2f4 <__ssvfiscanf_r+0x290>
 800d2ee:	3301      	adds	r3, #1
 800d2f0:	6023      	str	r3, [r4, #0]
 800d2f2:	e7ad      	b.n	800d250 <__ssvfiscanf_r+0x1ec>
 800d2f4:	4621      	mov	r1, r4
 800d2f6:	4630      	mov	r0, r6
 800d2f8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800d2fa:	4798      	blx	r3
 800d2fc:	2800      	cmp	r0, #0
 800d2fe:	d0a7      	beq.n	800d250 <__ssvfiscanf_r+0x1ec>
 800d300:	e78a      	b.n	800d218 <__ssvfiscanf_r+0x1b4>
 800d302:	2b04      	cmp	r3, #4
 800d304:	dc0e      	bgt.n	800d324 <__ssvfiscanf_r+0x2c0>
 800d306:	466b      	mov	r3, sp
 800d308:	4622      	mov	r2, r4
 800d30a:	4630      	mov	r0, r6
 800d30c:	a941      	add	r1, sp, #260	; 0x104
 800d30e:	f000 f87d 	bl	800d40c <_scanf_i>
 800d312:	e7ab      	b.n	800d26c <__ssvfiscanf_r+0x208>
 800d314:	0800cfaf 	.word	0x0800cfaf
 800d318:	0800d029 	.word	0x0800d029
 800d31c:	0800e5c0 	.word	0x0800e5c0
 800d320:	0800e6c6 	.word	0x0800e6c6
 800d324:	4b0b      	ldr	r3, [pc, #44]	; (800d354 <__ssvfiscanf_r+0x2f0>)
 800d326:	2b00      	cmp	r3, #0
 800d328:	f43f aec2 	beq.w	800d0b0 <__ssvfiscanf_r+0x4c>
 800d32c:	466b      	mov	r3, sp
 800d32e:	4622      	mov	r2, r4
 800d330:	4630      	mov	r0, r6
 800d332:	a941      	add	r1, sp, #260	; 0x104
 800d334:	f3af 8000 	nop.w
 800d338:	e798      	b.n	800d26c <__ssvfiscanf_r+0x208>
 800d33a:	89a3      	ldrh	r3, [r4, #12]
 800d33c:	f013 0f40 	tst.w	r3, #64	; 0x40
 800d340:	bf18      	it	ne
 800d342:	f04f 30ff 	movne.w	r0, #4294967295
 800d346:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800d34a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d34e:	9844      	ldr	r0, [sp, #272]	; 0x110
 800d350:	e7f9      	b.n	800d346 <__ssvfiscanf_r+0x2e2>
 800d352:	bf00      	nop
 800d354:	00000000 	.word	0x00000000

0800d358 <_scanf_chars>:
 800d358:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d35c:	4615      	mov	r5, r2
 800d35e:	688a      	ldr	r2, [r1, #8]
 800d360:	4680      	mov	r8, r0
 800d362:	460c      	mov	r4, r1
 800d364:	b932      	cbnz	r2, 800d374 <_scanf_chars+0x1c>
 800d366:	698a      	ldr	r2, [r1, #24]
 800d368:	2a00      	cmp	r2, #0
 800d36a:	bf0c      	ite	eq
 800d36c:	2201      	moveq	r2, #1
 800d36e:	f04f 32ff 	movne.w	r2, #4294967295
 800d372:	608a      	str	r2, [r1, #8]
 800d374:	2700      	movs	r7, #0
 800d376:	6822      	ldr	r2, [r4, #0]
 800d378:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800d408 <_scanf_chars+0xb0>
 800d37c:	06d1      	lsls	r1, r2, #27
 800d37e:	bf5f      	itttt	pl
 800d380:	681a      	ldrpl	r2, [r3, #0]
 800d382:	1d11      	addpl	r1, r2, #4
 800d384:	6019      	strpl	r1, [r3, #0]
 800d386:	6816      	ldrpl	r6, [r2, #0]
 800d388:	69a0      	ldr	r0, [r4, #24]
 800d38a:	b188      	cbz	r0, 800d3b0 <_scanf_chars+0x58>
 800d38c:	2801      	cmp	r0, #1
 800d38e:	d107      	bne.n	800d3a0 <_scanf_chars+0x48>
 800d390:	682b      	ldr	r3, [r5, #0]
 800d392:	781a      	ldrb	r2, [r3, #0]
 800d394:	6963      	ldr	r3, [r4, #20]
 800d396:	5c9b      	ldrb	r3, [r3, r2]
 800d398:	b953      	cbnz	r3, 800d3b0 <_scanf_chars+0x58>
 800d39a:	2f00      	cmp	r7, #0
 800d39c:	d031      	beq.n	800d402 <_scanf_chars+0xaa>
 800d39e:	e022      	b.n	800d3e6 <_scanf_chars+0x8e>
 800d3a0:	2802      	cmp	r0, #2
 800d3a2:	d120      	bne.n	800d3e6 <_scanf_chars+0x8e>
 800d3a4:	682b      	ldr	r3, [r5, #0]
 800d3a6:	781b      	ldrb	r3, [r3, #0]
 800d3a8:	f813 3009 	ldrb.w	r3, [r3, r9]
 800d3ac:	071b      	lsls	r3, r3, #28
 800d3ae:	d41a      	bmi.n	800d3e6 <_scanf_chars+0x8e>
 800d3b0:	6823      	ldr	r3, [r4, #0]
 800d3b2:	3701      	adds	r7, #1
 800d3b4:	06da      	lsls	r2, r3, #27
 800d3b6:	bf5e      	ittt	pl
 800d3b8:	682b      	ldrpl	r3, [r5, #0]
 800d3ba:	781b      	ldrbpl	r3, [r3, #0]
 800d3bc:	f806 3b01 	strbpl.w	r3, [r6], #1
 800d3c0:	682a      	ldr	r2, [r5, #0]
 800d3c2:	686b      	ldr	r3, [r5, #4]
 800d3c4:	3201      	adds	r2, #1
 800d3c6:	602a      	str	r2, [r5, #0]
 800d3c8:	68a2      	ldr	r2, [r4, #8]
 800d3ca:	3b01      	subs	r3, #1
 800d3cc:	3a01      	subs	r2, #1
 800d3ce:	606b      	str	r3, [r5, #4]
 800d3d0:	60a2      	str	r2, [r4, #8]
 800d3d2:	b142      	cbz	r2, 800d3e6 <_scanf_chars+0x8e>
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	dcd7      	bgt.n	800d388 <_scanf_chars+0x30>
 800d3d8:	4629      	mov	r1, r5
 800d3da:	4640      	mov	r0, r8
 800d3dc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800d3e0:	4798      	blx	r3
 800d3e2:	2800      	cmp	r0, #0
 800d3e4:	d0d0      	beq.n	800d388 <_scanf_chars+0x30>
 800d3e6:	6823      	ldr	r3, [r4, #0]
 800d3e8:	f013 0310 	ands.w	r3, r3, #16
 800d3ec:	d105      	bne.n	800d3fa <_scanf_chars+0xa2>
 800d3ee:	68e2      	ldr	r2, [r4, #12]
 800d3f0:	3201      	adds	r2, #1
 800d3f2:	60e2      	str	r2, [r4, #12]
 800d3f4:	69a2      	ldr	r2, [r4, #24]
 800d3f6:	b102      	cbz	r2, 800d3fa <_scanf_chars+0xa2>
 800d3f8:	7033      	strb	r3, [r6, #0]
 800d3fa:	2000      	movs	r0, #0
 800d3fc:	6923      	ldr	r3, [r4, #16]
 800d3fe:	443b      	add	r3, r7
 800d400:	6123      	str	r3, [r4, #16]
 800d402:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d406:	bf00      	nop
 800d408:	0800e5c0 	.word	0x0800e5c0

0800d40c <_scanf_i>:
 800d40c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d410:	460c      	mov	r4, r1
 800d412:	4698      	mov	r8, r3
 800d414:	4b75      	ldr	r3, [pc, #468]	; (800d5ec <_scanf_i+0x1e0>)
 800d416:	b087      	sub	sp, #28
 800d418:	4682      	mov	sl, r0
 800d41a:	4616      	mov	r6, r2
 800d41c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d420:	ab03      	add	r3, sp, #12
 800d422:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800d426:	4b72      	ldr	r3, [pc, #456]	; (800d5f0 <_scanf_i+0x1e4>)
 800d428:	69a1      	ldr	r1, [r4, #24]
 800d42a:	4a72      	ldr	r2, [pc, #456]	; (800d5f4 <_scanf_i+0x1e8>)
 800d42c:	4627      	mov	r7, r4
 800d42e:	2903      	cmp	r1, #3
 800d430:	bf18      	it	ne
 800d432:	461a      	movne	r2, r3
 800d434:	68a3      	ldr	r3, [r4, #8]
 800d436:	9201      	str	r2, [sp, #4]
 800d438:	1e5a      	subs	r2, r3, #1
 800d43a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800d43e:	bf81      	itttt	hi
 800d440:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800d444:	eb03 0905 	addhi.w	r9, r3, r5
 800d448:	f240 135d 	movwhi	r3, #349	; 0x15d
 800d44c:	60a3      	strhi	r3, [r4, #8]
 800d44e:	f857 3b1c 	ldr.w	r3, [r7], #28
 800d452:	bf98      	it	ls
 800d454:	f04f 0900 	movls.w	r9, #0
 800d458:	463d      	mov	r5, r7
 800d45a:	f04f 0b00 	mov.w	fp, #0
 800d45e:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800d462:	6023      	str	r3, [r4, #0]
 800d464:	6831      	ldr	r1, [r6, #0]
 800d466:	ab03      	add	r3, sp, #12
 800d468:	2202      	movs	r2, #2
 800d46a:	7809      	ldrb	r1, [r1, #0]
 800d46c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800d470:	f7ff fd46 	bl	800cf00 <memchr>
 800d474:	b328      	cbz	r0, 800d4c2 <_scanf_i+0xb6>
 800d476:	f1bb 0f01 	cmp.w	fp, #1
 800d47a:	d159      	bne.n	800d530 <_scanf_i+0x124>
 800d47c:	6862      	ldr	r2, [r4, #4]
 800d47e:	b92a      	cbnz	r2, 800d48c <_scanf_i+0x80>
 800d480:	2308      	movs	r3, #8
 800d482:	6822      	ldr	r2, [r4, #0]
 800d484:	6063      	str	r3, [r4, #4]
 800d486:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d48a:	6022      	str	r2, [r4, #0]
 800d48c:	6822      	ldr	r2, [r4, #0]
 800d48e:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800d492:	6022      	str	r2, [r4, #0]
 800d494:	68a2      	ldr	r2, [r4, #8]
 800d496:	1e51      	subs	r1, r2, #1
 800d498:	60a1      	str	r1, [r4, #8]
 800d49a:	b192      	cbz	r2, 800d4c2 <_scanf_i+0xb6>
 800d49c:	6832      	ldr	r2, [r6, #0]
 800d49e:	1c51      	adds	r1, r2, #1
 800d4a0:	6031      	str	r1, [r6, #0]
 800d4a2:	7812      	ldrb	r2, [r2, #0]
 800d4a4:	f805 2b01 	strb.w	r2, [r5], #1
 800d4a8:	6872      	ldr	r2, [r6, #4]
 800d4aa:	3a01      	subs	r2, #1
 800d4ac:	2a00      	cmp	r2, #0
 800d4ae:	6072      	str	r2, [r6, #4]
 800d4b0:	dc07      	bgt.n	800d4c2 <_scanf_i+0xb6>
 800d4b2:	4631      	mov	r1, r6
 800d4b4:	4650      	mov	r0, sl
 800d4b6:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800d4ba:	4790      	blx	r2
 800d4bc:	2800      	cmp	r0, #0
 800d4be:	f040 8085 	bne.w	800d5cc <_scanf_i+0x1c0>
 800d4c2:	f10b 0b01 	add.w	fp, fp, #1
 800d4c6:	f1bb 0f03 	cmp.w	fp, #3
 800d4ca:	d1cb      	bne.n	800d464 <_scanf_i+0x58>
 800d4cc:	6863      	ldr	r3, [r4, #4]
 800d4ce:	b90b      	cbnz	r3, 800d4d4 <_scanf_i+0xc8>
 800d4d0:	230a      	movs	r3, #10
 800d4d2:	6063      	str	r3, [r4, #4]
 800d4d4:	6863      	ldr	r3, [r4, #4]
 800d4d6:	4948      	ldr	r1, [pc, #288]	; (800d5f8 <_scanf_i+0x1ec>)
 800d4d8:	6960      	ldr	r0, [r4, #20]
 800d4da:	1ac9      	subs	r1, r1, r3
 800d4dc:	f000 f8a0 	bl	800d620 <__sccl>
 800d4e0:	f04f 0b00 	mov.w	fp, #0
 800d4e4:	68a3      	ldr	r3, [r4, #8]
 800d4e6:	6822      	ldr	r2, [r4, #0]
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d03d      	beq.n	800d568 <_scanf_i+0x15c>
 800d4ec:	6831      	ldr	r1, [r6, #0]
 800d4ee:	6960      	ldr	r0, [r4, #20]
 800d4f0:	f891 c000 	ldrb.w	ip, [r1]
 800d4f4:	f810 000c 	ldrb.w	r0, [r0, ip]
 800d4f8:	2800      	cmp	r0, #0
 800d4fa:	d035      	beq.n	800d568 <_scanf_i+0x15c>
 800d4fc:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800d500:	d124      	bne.n	800d54c <_scanf_i+0x140>
 800d502:	0510      	lsls	r0, r2, #20
 800d504:	d522      	bpl.n	800d54c <_scanf_i+0x140>
 800d506:	f10b 0b01 	add.w	fp, fp, #1
 800d50a:	f1b9 0f00 	cmp.w	r9, #0
 800d50e:	d003      	beq.n	800d518 <_scanf_i+0x10c>
 800d510:	3301      	adds	r3, #1
 800d512:	f109 39ff 	add.w	r9, r9, #4294967295
 800d516:	60a3      	str	r3, [r4, #8]
 800d518:	6873      	ldr	r3, [r6, #4]
 800d51a:	3b01      	subs	r3, #1
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	6073      	str	r3, [r6, #4]
 800d520:	dd1b      	ble.n	800d55a <_scanf_i+0x14e>
 800d522:	6833      	ldr	r3, [r6, #0]
 800d524:	3301      	adds	r3, #1
 800d526:	6033      	str	r3, [r6, #0]
 800d528:	68a3      	ldr	r3, [r4, #8]
 800d52a:	3b01      	subs	r3, #1
 800d52c:	60a3      	str	r3, [r4, #8]
 800d52e:	e7d9      	b.n	800d4e4 <_scanf_i+0xd8>
 800d530:	f1bb 0f02 	cmp.w	fp, #2
 800d534:	d1ae      	bne.n	800d494 <_scanf_i+0x88>
 800d536:	6822      	ldr	r2, [r4, #0]
 800d538:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800d53c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800d540:	d1bf      	bne.n	800d4c2 <_scanf_i+0xb6>
 800d542:	2310      	movs	r3, #16
 800d544:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d548:	6063      	str	r3, [r4, #4]
 800d54a:	e7a2      	b.n	800d492 <_scanf_i+0x86>
 800d54c:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800d550:	6022      	str	r2, [r4, #0]
 800d552:	780b      	ldrb	r3, [r1, #0]
 800d554:	f805 3b01 	strb.w	r3, [r5], #1
 800d558:	e7de      	b.n	800d518 <_scanf_i+0x10c>
 800d55a:	4631      	mov	r1, r6
 800d55c:	4650      	mov	r0, sl
 800d55e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800d562:	4798      	blx	r3
 800d564:	2800      	cmp	r0, #0
 800d566:	d0df      	beq.n	800d528 <_scanf_i+0x11c>
 800d568:	6823      	ldr	r3, [r4, #0]
 800d56a:	05db      	lsls	r3, r3, #23
 800d56c:	d50d      	bpl.n	800d58a <_scanf_i+0x17e>
 800d56e:	42bd      	cmp	r5, r7
 800d570:	d909      	bls.n	800d586 <_scanf_i+0x17a>
 800d572:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800d576:	4632      	mov	r2, r6
 800d578:	4650      	mov	r0, sl
 800d57a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d57e:	f105 39ff 	add.w	r9, r5, #4294967295
 800d582:	4798      	blx	r3
 800d584:	464d      	mov	r5, r9
 800d586:	42bd      	cmp	r5, r7
 800d588:	d02d      	beq.n	800d5e6 <_scanf_i+0x1da>
 800d58a:	6822      	ldr	r2, [r4, #0]
 800d58c:	f012 0210 	ands.w	r2, r2, #16
 800d590:	d113      	bne.n	800d5ba <_scanf_i+0x1ae>
 800d592:	702a      	strb	r2, [r5, #0]
 800d594:	4639      	mov	r1, r7
 800d596:	6863      	ldr	r3, [r4, #4]
 800d598:	4650      	mov	r0, sl
 800d59a:	9e01      	ldr	r6, [sp, #4]
 800d59c:	47b0      	blx	r6
 800d59e:	6821      	ldr	r1, [r4, #0]
 800d5a0:	f8d8 3000 	ldr.w	r3, [r8]
 800d5a4:	f011 0f20 	tst.w	r1, #32
 800d5a8:	d013      	beq.n	800d5d2 <_scanf_i+0x1c6>
 800d5aa:	1d1a      	adds	r2, r3, #4
 800d5ac:	f8c8 2000 	str.w	r2, [r8]
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	6018      	str	r0, [r3, #0]
 800d5b4:	68e3      	ldr	r3, [r4, #12]
 800d5b6:	3301      	adds	r3, #1
 800d5b8:	60e3      	str	r3, [r4, #12]
 800d5ba:	2000      	movs	r0, #0
 800d5bc:	1bed      	subs	r5, r5, r7
 800d5be:	44ab      	add	fp, r5
 800d5c0:	6925      	ldr	r5, [r4, #16]
 800d5c2:	445d      	add	r5, fp
 800d5c4:	6125      	str	r5, [r4, #16]
 800d5c6:	b007      	add	sp, #28
 800d5c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5cc:	f04f 0b00 	mov.w	fp, #0
 800d5d0:	e7ca      	b.n	800d568 <_scanf_i+0x15c>
 800d5d2:	1d1a      	adds	r2, r3, #4
 800d5d4:	f8c8 2000 	str.w	r2, [r8]
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	f011 0f01 	tst.w	r1, #1
 800d5de:	bf14      	ite	ne
 800d5e0:	8018      	strhne	r0, [r3, #0]
 800d5e2:	6018      	streq	r0, [r3, #0]
 800d5e4:	e7e6      	b.n	800d5b4 <_scanf_i+0x1a8>
 800d5e6:	2001      	movs	r0, #1
 800d5e8:	e7ed      	b.n	800d5c6 <_scanf_i+0x1ba>
 800d5ea:	bf00      	nop
 800d5ec:	0800e37c 	.word	0x0800e37c
 800d5f0:	0800c8a5 	.word	0x0800c8a5
 800d5f4:	0800b6e9 	.word	0x0800b6e9
 800d5f8:	0800e76d 	.word	0x0800e76d

0800d5fc <_read_r>:
 800d5fc:	b538      	push	{r3, r4, r5, lr}
 800d5fe:	4604      	mov	r4, r0
 800d600:	4608      	mov	r0, r1
 800d602:	4611      	mov	r1, r2
 800d604:	2200      	movs	r2, #0
 800d606:	4d05      	ldr	r5, [pc, #20]	; (800d61c <_read_r+0x20>)
 800d608:	602a      	str	r2, [r5, #0]
 800d60a:	461a      	mov	r2, r3
 800d60c:	f7f7 ff55 	bl	80054ba <_read>
 800d610:	1c43      	adds	r3, r0, #1
 800d612:	d102      	bne.n	800d61a <_read_r+0x1e>
 800d614:	682b      	ldr	r3, [r5, #0]
 800d616:	b103      	cbz	r3, 800d61a <_read_r+0x1e>
 800d618:	6023      	str	r3, [r4, #0]
 800d61a:	bd38      	pop	{r3, r4, r5, pc}
 800d61c:	20003784 	.word	0x20003784

0800d620 <__sccl>:
 800d620:	b570      	push	{r4, r5, r6, lr}
 800d622:	780b      	ldrb	r3, [r1, #0]
 800d624:	4604      	mov	r4, r0
 800d626:	2b5e      	cmp	r3, #94	; 0x5e
 800d628:	bf13      	iteet	ne
 800d62a:	2200      	movne	r2, #0
 800d62c:	2201      	moveq	r2, #1
 800d62e:	784b      	ldrbeq	r3, [r1, #1]
 800d630:	1c48      	addne	r0, r1, #1
 800d632:	bf08      	it	eq
 800d634:	1c88      	addeq	r0, r1, #2
 800d636:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800d63a:	1e61      	subs	r1, r4, #1
 800d63c:	f801 2f01 	strb.w	r2, [r1, #1]!
 800d640:	42a9      	cmp	r1, r5
 800d642:	d1fb      	bne.n	800d63c <__sccl+0x1c>
 800d644:	b90b      	cbnz	r3, 800d64a <__sccl+0x2a>
 800d646:	3801      	subs	r0, #1
 800d648:	bd70      	pop	{r4, r5, r6, pc}
 800d64a:	f082 0201 	eor.w	r2, r2, #1
 800d64e:	4605      	mov	r5, r0
 800d650:	54e2      	strb	r2, [r4, r3]
 800d652:	4628      	mov	r0, r5
 800d654:	f810 1b01 	ldrb.w	r1, [r0], #1
 800d658:	292d      	cmp	r1, #45	; 0x2d
 800d65a:	d006      	beq.n	800d66a <__sccl+0x4a>
 800d65c:	295d      	cmp	r1, #93	; 0x5d
 800d65e:	d0f3      	beq.n	800d648 <__sccl+0x28>
 800d660:	b909      	cbnz	r1, 800d666 <__sccl+0x46>
 800d662:	4628      	mov	r0, r5
 800d664:	e7f0      	b.n	800d648 <__sccl+0x28>
 800d666:	460b      	mov	r3, r1
 800d668:	e7f1      	b.n	800d64e <__sccl+0x2e>
 800d66a:	786e      	ldrb	r6, [r5, #1]
 800d66c:	2e5d      	cmp	r6, #93	; 0x5d
 800d66e:	d0fa      	beq.n	800d666 <__sccl+0x46>
 800d670:	42b3      	cmp	r3, r6
 800d672:	dcf8      	bgt.n	800d666 <__sccl+0x46>
 800d674:	4619      	mov	r1, r3
 800d676:	3502      	adds	r5, #2
 800d678:	3101      	adds	r1, #1
 800d67a:	428e      	cmp	r6, r1
 800d67c:	5462      	strb	r2, [r4, r1]
 800d67e:	dcfb      	bgt.n	800d678 <__sccl+0x58>
 800d680:	1af1      	subs	r1, r6, r3
 800d682:	3901      	subs	r1, #1
 800d684:	42b3      	cmp	r3, r6
 800d686:	bfa8      	it	ge
 800d688:	2100      	movge	r1, #0
 800d68a:	1c58      	adds	r0, r3, #1
 800d68c:	1843      	adds	r3, r0, r1
 800d68e:	e7e0      	b.n	800d652 <__sccl+0x32>

0800d690 <_raise_r>:
 800d690:	291f      	cmp	r1, #31
 800d692:	b538      	push	{r3, r4, r5, lr}
 800d694:	4604      	mov	r4, r0
 800d696:	460d      	mov	r5, r1
 800d698:	d904      	bls.n	800d6a4 <_raise_r+0x14>
 800d69a:	2316      	movs	r3, #22
 800d69c:	6003      	str	r3, [r0, #0]
 800d69e:	f04f 30ff 	mov.w	r0, #4294967295
 800d6a2:	bd38      	pop	{r3, r4, r5, pc}
 800d6a4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d6a6:	b112      	cbz	r2, 800d6ae <_raise_r+0x1e>
 800d6a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d6ac:	b94b      	cbnz	r3, 800d6c2 <_raise_r+0x32>
 800d6ae:	4620      	mov	r0, r4
 800d6b0:	f000 f830 	bl	800d714 <_getpid_r>
 800d6b4:	462a      	mov	r2, r5
 800d6b6:	4601      	mov	r1, r0
 800d6b8:	4620      	mov	r0, r4
 800d6ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d6be:	f000 b817 	b.w	800d6f0 <_kill_r>
 800d6c2:	2b01      	cmp	r3, #1
 800d6c4:	d00a      	beq.n	800d6dc <_raise_r+0x4c>
 800d6c6:	1c59      	adds	r1, r3, #1
 800d6c8:	d103      	bne.n	800d6d2 <_raise_r+0x42>
 800d6ca:	2316      	movs	r3, #22
 800d6cc:	6003      	str	r3, [r0, #0]
 800d6ce:	2001      	movs	r0, #1
 800d6d0:	e7e7      	b.n	800d6a2 <_raise_r+0x12>
 800d6d2:	2400      	movs	r4, #0
 800d6d4:	4628      	mov	r0, r5
 800d6d6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d6da:	4798      	blx	r3
 800d6dc:	2000      	movs	r0, #0
 800d6de:	e7e0      	b.n	800d6a2 <_raise_r+0x12>

0800d6e0 <raise>:
 800d6e0:	4b02      	ldr	r3, [pc, #8]	; (800d6ec <raise+0xc>)
 800d6e2:	4601      	mov	r1, r0
 800d6e4:	6818      	ldr	r0, [r3, #0]
 800d6e6:	f7ff bfd3 	b.w	800d690 <_raise_r>
 800d6ea:	bf00      	nop
 800d6ec:	200004e8 	.word	0x200004e8

0800d6f0 <_kill_r>:
 800d6f0:	b538      	push	{r3, r4, r5, lr}
 800d6f2:	2300      	movs	r3, #0
 800d6f4:	4d06      	ldr	r5, [pc, #24]	; (800d710 <_kill_r+0x20>)
 800d6f6:	4604      	mov	r4, r0
 800d6f8:	4608      	mov	r0, r1
 800d6fa:	4611      	mov	r1, r2
 800d6fc:	602b      	str	r3, [r5, #0]
 800d6fe:	f7f7 fec2 	bl	8005486 <_kill>
 800d702:	1c43      	adds	r3, r0, #1
 800d704:	d102      	bne.n	800d70c <_kill_r+0x1c>
 800d706:	682b      	ldr	r3, [r5, #0]
 800d708:	b103      	cbz	r3, 800d70c <_kill_r+0x1c>
 800d70a:	6023      	str	r3, [r4, #0]
 800d70c:	bd38      	pop	{r3, r4, r5, pc}
 800d70e:	bf00      	nop
 800d710:	20003784 	.word	0x20003784

0800d714 <_getpid_r>:
 800d714:	f7f7 beb0 	b.w	8005478 <_getpid>

0800d718 <__submore>:
 800d718:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d71c:	460c      	mov	r4, r1
 800d71e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800d720:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d724:	4299      	cmp	r1, r3
 800d726:	d11b      	bne.n	800d760 <__submore+0x48>
 800d728:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800d72c:	f7fd fe7e 	bl	800b42c <_malloc_r>
 800d730:	b918      	cbnz	r0, 800d73a <__submore+0x22>
 800d732:	f04f 30ff 	mov.w	r0, #4294967295
 800d736:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d73a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d73e:	63a3      	str	r3, [r4, #56]	; 0x38
 800d740:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800d744:	6360      	str	r0, [r4, #52]	; 0x34
 800d746:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800d74a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800d74e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800d752:	7043      	strb	r3, [r0, #1]
 800d754:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800d758:	7003      	strb	r3, [r0, #0]
 800d75a:	6020      	str	r0, [r4, #0]
 800d75c:	2000      	movs	r0, #0
 800d75e:	e7ea      	b.n	800d736 <__submore+0x1e>
 800d760:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800d762:	0077      	lsls	r7, r6, #1
 800d764:	463a      	mov	r2, r7
 800d766:	f7ff fbf3 	bl	800cf50 <_realloc_r>
 800d76a:	4605      	mov	r5, r0
 800d76c:	2800      	cmp	r0, #0
 800d76e:	d0e0      	beq.n	800d732 <__submore+0x1a>
 800d770:	eb00 0806 	add.w	r8, r0, r6
 800d774:	4601      	mov	r1, r0
 800d776:	4632      	mov	r2, r6
 800d778:	4640      	mov	r0, r8
 800d77a:	f7fd fb67 	bl	800ae4c <memcpy>
 800d77e:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800d782:	f8c4 8000 	str.w	r8, [r4]
 800d786:	e7e9      	b.n	800d75c <__submore+0x44>

0800d788 <_fstat_r>:
 800d788:	b538      	push	{r3, r4, r5, lr}
 800d78a:	2300      	movs	r3, #0
 800d78c:	4d06      	ldr	r5, [pc, #24]	; (800d7a8 <_fstat_r+0x20>)
 800d78e:	4604      	mov	r4, r0
 800d790:	4608      	mov	r0, r1
 800d792:	4611      	mov	r1, r2
 800d794:	602b      	str	r3, [r5, #0]
 800d796:	f7f7 fed4 	bl	8005542 <_fstat>
 800d79a:	1c43      	adds	r3, r0, #1
 800d79c:	d102      	bne.n	800d7a4 <_fstat_r+0x1c>
 800d79e:	682b      	ldr	r3, [r5, #0]
 800d7a0:	b103      	cbz	r3, 800d7a4 <_fstat_r+0x1c>
 800d7a2:	6023      	str	r3, [r4, #0]
 800d7a4:	bd38      	pop	{r3, r4, r5, pc}
 800d7a6:	bf00      	nop
 800d7a8:	20003784 	.word	0x20003784

0800d7ac <_isatty_r>:
 800d7ac:	b538      	push	{r3, r4, r5, lr}
 800d7ae:	2300      	movs	r3, #0
 800d7b0:	4d05      	ldr	r5, [pc, #20]	; (800d7c8 <_isatty_r+0x1c>)
 800d7b2:	4604      	mov	r4, r0
 800d7b4:	4608      	mov	r0, r1
 800d7b6:	602b      	str	r3, [r5, #0]
 800d7b8:	f7f7 fed2 	bl	8005560 <_isatty>
 800d7bc:	1c43      	adds	r3, r0, #1
 800d7be:	d102      	bne.n	800d7c6 <_isatty_r+0x1a>
 800d7c0:	682b      	ldr	r3, [r5, #0]
 800d7c2:	b103      	cbz	r3, 800d7c6 <_isatty_r+0x1a>
 800d7c4:	6023      	str	r3, [r4, #0]
 800d7c6:	bd38      	pop	{r3, r4, r5, pc}
 800d7c8:	20003784 	.word	0x20003784

0800d7cc <_malloc_usable_size_r>:
 800d7cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d7d0:	1f18      	subs	r0, r3, #4
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	bfbc      	itt	lt
 800d7d6:	580b      	ldrlt	r3, [r1, r0]
 800d7d8:	18c0      	addlt	r0, r0, r3
 800d7da:	4770      	bx	lr

0800d7dc <_init>:
 800d7dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7de:	bf00      	nop
 800d7e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d7e2:	bc08      	pop	{r3}
 800d7e4:	469e      	mov	lr, r3
 800d7e6:	4770      	bx	lr

0800d7e8 <_fini>:
 800d7e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7ea:	bf00      	nop
 800d7ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d7ee:	bc08      	pop	{r3}
 800d7f0:	469e      	mov	lr, r3
 800d7f2:	4770      	bx	lr

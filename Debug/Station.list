
Station.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f50  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000998  0800805c  0800805c  0001805c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080089f4  080089f4  0002011c  2**0
                  CONTENTS
  4 .ARM          00000000  080089f4  080089f4  0002011c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080089f4  080089f4  0002011c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080089f4  080089f4  000189f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080089f8  080089f8  000189f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000011c  20000000  080089fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000029d8  2000011c  08008b18  0002011c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002af4  08008b18  00022af4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002011c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d162  00000000  00000000  00020145  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005015  00000000  00000000  0003d2a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001798  00000000  00000000  000422c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001568  00000000  00000000  00043a58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e408  00000000  00000000  00044fc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000274f3  00000000  00000000  000633c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096281  00000000  00000000  0008a8bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00120b3c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006b2c  00000000  00000000  00120b8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000011c 	.word	0x2000011c
 8000128:	00000000 	.word	0x00000000
 800012c:	08008044 	.word	0x08008044

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000120 	.word	0x20000120
 8000148:	08008044 	.word	0x08008044

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_f2uiz>:
 800015c:	0042      	lsls	r2, r0, #1
 800015e:	d20e      	bcs.n	800017e <__aeabi_f2uiz+0x22>
 8000160:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000164:	d30b      	bcc.n	800017e <__aeabi_f2uiz+0x22>
 8000166:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800016a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800016e:	d409      	bmi.n	8000184 <__aeabi_f2uiz+0x28>
 8000170:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000174:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000178:	fa23 f002 	lsr.w	r0, r3, r2
 800017c:	4770      	bx	lr
 800017e:	f04f 0000 	mov.w	r0, #0
 8000182:	4770      	bx	lr
 8000184:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000188:	d101      	bne.n	800018e <__aeabi_f2uiz+0x32>
 800018a:	0242      	lsls	r2, r0, #9
 800018c:	d102      	bne.n	8000194 <__aeabi_f2uiz+0x38>
 800018e:	f04f 30ff 	mov.w	r0, #4294967295
 8000192:	4770      	bx	lr
 8000194:	f04f 0000 	mov.w	r0, #0
 8000198:	4770      	bx	lr
 800019a:	bf00      	nop

0800019c <initApp_MCU>:


uint32_t tick = 0;

void initApp_MCU(Station_t *station, SIM_t *mySIM)
{
 800019c:	b480      	push	{r7}
 800019e:	b083      	sub	sp, #12
 80001a0:	af00      	add	r7, sp, #0
 80001a2:	6078      	str	r0, [r7, #4]
 80001a4:	6039      	str	r1, [r7, #0]
	__MY_STATION_MCU = station;
 80001a6:	4a05      	ldr	r2, [pc, #20]	; (80001bc <initApp_MCU+0x20>)
 80001a8:	687b      	ldr	r3, [r7, #4]
 80001aa:	6013      	str	r3, [r2, #0]
	__MY_SIM_MCU = mySIM;
 80001ac:	4a04      	ldr	r2, [pc, #16]	; (80001c0 <initApp_MCU+0x24>)
 80001ae:	683b      	ldr	r3, [r7, #0]
 80001b0:	6013      	str	r3, [r2, #0]
}
 80001b2:	bf00      	nop
 80001b4:	370c      	adds	r7, #12
 80001b6:	46bd      	mov	sp, r7
 80001b8:	bc80      	pop	{r7}
 80001ba:	4770      	bx	lr
 80001bc:	20000138 	.word	0x20000138
 80001c0:	2000013c 	.word	0x2000013c

080001c4 <initApp_MQTT>:
static Station_t *__MY_STATION_MQTT;
static SIM_t *__MY_SIM_MQTT;
uint8_t buffer [10];
uint8_t stIDbuffer[] = {1,2,3,4,5};
void initApp_MQTT(Station_t *station, SIM_t *sim)
{
 80001c4:	b580      	push	{r7, lr}
 80001c6:	b084      	sub	sp, #16
 80001c8:	af02      	add	r7, sp, #8
 80001ca:	6078      	str	r0, [r7, #4]
 80001cc:	6039      	str	r1, [r7, #0]
	__MY_STATION_MQTT = station;
 80001ce:	4a11      	ldr	r2, [pc, #68]	; (8000214 <initApp_MQTT+0x50>)
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	6013      	str	r3, [r2, #0]
	__MY_SIM_MQTT = sim;
 80001d4:	4a10      	ldr	r2, [pc, #64]	; (8000218 <initApp_MQTT+0x54>)
 80001d6:	683b      	ldr	r3, [r7, #0]
 80001d8:	6013      	str	r3, [r2, #0]
	init_MQTT(__MY_SIM_MQTT);
 80001da:	4b0f      	ldr	r3, [pc, #60]	; (8000218 <initApp_MQTT+0x54>)
 80001dc:	681b      	ldr	r3, [r3, #0]
 80001de:	4618      	mov	r0, r3
 80001e0:	f000 fefe 	bl	8000fe0 <init_MQTT>
	initServerMsg(__MY_STATION_MQTT, &__MY_SIM_MQTT->sms);
 80001e4:	4b0b      	ldr	r3, [pc, #44]	; (8000214 <initApp_MQTT+0x50>)
 80001e6:	681a      	ldr	r2, [r3, #0]
 80001e8:	4b0b      	ldr	r3, [pc, #44]	; (8000218 <initApp_MQTT+0x54>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	f203 43bc 	addw	r3, r3, #1212	; 0x4bc
 80001f0:	4619      	mov	r1, r3
 80001f2:	4610      	mov	r0, r2
 80001f4:	f000 fa02 	bl	80005fc <initServerMsg>
	SIM_sendCMD((uint8_t*)"ATE0",(uint8_t*)"OK", ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, 1000);
 80001f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001fc:	9300      	str	r3, [sp, #0]
 80001fe:	2301      	movs	r3, #1
 8000200:	2201      	movs	r2, #1
 8000202:	4906      	ldr	r1, [pc, #24]	; (800021c <initApp_MQTT+0x58>)
 8000204:	4806      	ldr	r0, [pc, #24]	; (8000220 <initApp_MQTT+0x5c>)
 8000206:	f000 fbb5 	bl	8000974 <SIM_sendCMD>
}
 800020a:	bf00      	nop
 800020c:	3708      	adds	r7, #8
 800020e:	46bd      	mov	sp, r7
 8000210:	bd80      	pop	{r7, pc}
 8000212:	bf00      	nop
 8000214:	20000140 	.word	0x20000140
 8000218:	20000144 	.word	0x20000144
 800021c:	0800805c 	.word	0x0800805c
 8000220:	08008060 	.word	0x08008060

08000224 <initApp_SMS>:
#include "Task.h"

static SMS_t *__MY_SMS;

void initApp_SMS(SMS_t *mySMS)
{
 8000224:	b480      	push	{r7}
 8000226:	b083      	sub	sp, #12
 8000228:	af00      	add	r7, sp, #0
 800022a:	6078      	str	r0, [r7, #4]
	__MY_SMS = mySMS;
 800022c:	4a03      	ldr	r2, [pc, #12]	; (800023c <initApp_SMS+0x18>)
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	6013      	str	r3, [r2, #0]
}
 8000232:	bf00      	nop
 8000234:	370c      	adds	r7, #12
 8000236:	46bd      	mov	sp, r7
 8000238:	bc80      	pop	{r7}
 800023a:	4770      	bx	lr
 800023c:	20000148 	.word	0x20000148

08000240 <init_App_Serial>:
#include "usart.h"

Station_t *__MY_STATION_SERIAL;

void init_App_Serial (Station_t *station)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b082      	sub	sp, #8
 8000244:	af00      	add	r7, sp, #0
 8000246:	6078      	str	r0, [r7, #4]
	__MY_STATION_SERIAL = station;
 8000248:	4a05      	ldr	r2, [pc, #20]	; (8000260 <init_App_Serial+0x20>)
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	6013      	str	r3, [r2, #0]
	initSerial_CFG(&huart2,&hdma_usart2_rx);
 800024e:	4905      	ldr	r1, [pc, #20]	; (8000264 <init_App_Serial+0x24>)
 8000250:	4805      	ldr	r0, [pc, #20]	; (8000268 <init_App_Serial+0x28>)
 8000252:	f000 f80b 	bl	800026c <initSerial_CFG>
}
 8000256:	bf00      	nop
 8000258:	3708      	adds	r7, #8
 800025a:	46bd      	mov	sp, r7
 800025c:	bd80      	pop	{r7, pc}
 800025e:	bf00      	nop
 8000260:	2000014c 	.word	0x2000014c
 8000264:	20002a58 	.word	0x20002a58
 8000268:	20002984 	.word	0x20002984

0800026c <initSerial_CFG>:
_RTC *__MY_RTC;

uint8_t alarmflag = 0;

void initSerial_CFG(UART_HandleTypeDef *huart,DMA_HandleTypeDef  *hdma)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b082      	sub	sp, #8
 8000270:	af00      	add	r7, sp, #0
 8000272:	6078      	str	r0, [r7, #4]
 8000274:	6039      	str	r1, [r7, #0]
	__SCFG_UART = huart;
 8000276:	4a06      	ldr	r2, [pc, #24]	; (8000290 <initSerial_CFG+0x24>)
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	6013      	str	r3, [r2, #0]
	__SCFG_DMA_UART = hdma;
 800027c:	4a05      	ldr	r2, [pc, #20]	; (8000294 <initSerial_CFG+0x28>)
 800027e:	683b      	ldr	r3, [r7, #0]
 8000280:	6013      	str	r3, [r2, #0]
	enableReceiveDMAtoIdle_CFG();
 8000282:	f000 f81d 	bl	80002c0 <enableReceiveDMAtoIdle_CFG>
}
 8000286:	bf00      	nop
 8000288:	3708      	adds	r7, #8
 800028a:	46bd      	mov	sp, r7
 800028c:	bd80      	pop	{r7, pc}
 800028e:	bf00      	nop
 8000290:	20000150 	.word	0x20000150
 8000294:	20000154 	.word	0x20000154

08000298 <initGPS>:

void initGPS(Station_t *station, _RTC *rtc)
{
 8000298:	b480      	push	{r7}
 800029a:	b083      	sub	sp, #12
 800029c:	af00      	add	r7, sp, #0
 800029e:	6078      	str	r0, [r7, #4]
 80002a0:	6039      	str	r1, [r7, #0]
	__MY_STATION_GPS = station;
 80002a2:	4a05      	ldr	r2, [pc, #20]	; (80002b8 <initGPS+0x20>)
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	6013      	str	r3, [r2, #0]
	__MY_RTC = rtc;
 80002a8:	4a04      	ldr	r2, [pc, #16]	; (80002bc <initGPS+0x24>)
 80002aa:	683b      	ldr	r3, [r7, #0]
 80002ac:	6013      	str	r3, [r2, #0]
}
 80002ae:	bf00      	nop
 80002b0:	370c      	adds	r7, #12
 80002b2:	46bd      	mov	sp, r7
 80002b4:	bc80      	pop	{r7}
 80002b6:	4770      	bx	lr
 80002b8:	20000868 	.word	0x20000868
 80002bc:	2000086c 	.word	0x2000086c

080002c0 <enableReceiveDMAtoIdle_CFG>:

void enableReceiveDMAtoIdle_CFG(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
	  HAL_UARTEx_ReceiveToIdle_DMA(__SCFG_UART, Rxbuff_CFG, Rx_SIZE_CFG);
 80002c4:	4b09      	ldr	r3, [pc, #36]	; (80002ec <enableReceiveDMAtoIdle_CFG+0x2c>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80002cc:	4908      	ldr	r1, [pc, #32]	; (80002f0 <enableReceiveDMAtoIdle_CFG+0x30>)
 80002ce:	4618      	mov	r0, r3
 80002d0:	f005 fc5f 	bl	8005b92 <HAL_UARTEx_ReceiveToIdle_DMA>
	  __HAL_DMA_DISABLE_IT(__SCFG_DMA_UART,DMA_IT_HT);
 80002d4:	4b07      	ldr	r3, [pc, #28]	; (80002f4 <enableReceiveDMAtoIdle_CFG+0x34>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	681a      	ldr	r2, [r3, #0]
 80002dc:	4b05      	ldr	r3, [pc, #20]	; (80002f4 <enableReceiveDMAtoIdle_CFG+0x34>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	f022 0204 	bic.w	r2, r2, #4
 80002e6:	601a      	str	r2, [r3, #0]
}
 80002e8:	bf00      	nop
 80002ea:	bd80      	pop	{r7, pc}
 80002ec:	20000150 	.word	0x20000150
 80002f0:	20000158 	.word	0x20000158
 80002f4:	20000154 	.word	0x20000154

080002f8 <Serial_CFG_Callback>:
void Serial_CFG_Callback(uint16_t Size)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b084      	sub	sp, #16
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	4603      	mov	r3, r0
 8000300:	80fb      	strh	r3, [r7, #6]

	oldPos_CFG = newPos_CFG;  // Update the last position before copying new data
 8000302:	4b43      	ldr	r3, [pc, #268]	; (8000410 <Serial_CFG_Callback+0x118>)
 8000304:	881a      	ldrh	r2, [r3, #0]
 8000306:	4b43      	ldr	r3, [pc, #268]	; (8000414 <Serial_CFG_Callback+0x11c>)
 8000308:	801a      	strh	r2, [r3, #0]

	/* If the data in large and it is about to exceed the buffer size, we have to route it to the start of the buffer
	 * This is to maintain the circular buffer
	 * The old data in the main buffer will be overlapped
	 */
	if (oldPos_CFG+Size > Main_SIZE_CFG)  // If the current position + new data size is greater than the main buffer
 800030a:	4b42      	ldr	r3, [pc, #264]	; (8000414 <Serial_CFG_Callback+0x11c>)
 800030c:	881b      	ldrh	r3, [r3, #0]
 800030e:	461a      	mov	r2, r3
 8000310:	88fb      	ldrh	r3, [r7, #6]
 8000312:	4413      	add	r3, r2
 8000314:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000318:	dd23      	ble.n	8000362 <Serial_CFG_Callback+0x6a>
	{
		uint8_t datatocopy = Main_SIZE_CFG-oldPos_CFG;  // find out how much space is left in the main buffer
 800031a:	4b3e      	ldr	r3, [pc, #248]	; (8000414 <Serial_CFG_Callback+0x11c>)
 800031c:	881b      	ldrh	r3, [r3, #0]
 800031e:	b2db      	uxtb	r3, r3
 8000320:	425b      	negs	r3, r3
 8000322:	73fb      	strb	r3, [r7, #15]
		memcpy ((uint8_t *)Mainbuff_CFG+oldPos_CFG, (uint8_t *)Rxbuff_CFG, datatocopy);  // copy data in that remaining space
 8000324:	4b3b      	ldr	r3, [pc, #236]	; (8000414 <Serial_CFG_Callback+0x11c>)
 8000326:	881b      	ldrh	r3, [r3, #0]
 8000328:	461a      	mov	r2, r3
 800032a:	4b3b      	ldr	r3, [pc, #236]	; (8000418 <Serial_CFG_Callback+0x120>)
 800032c:	4413      	add	r3, r2
 800032e:	7bfa      	ldrb	r2, [r7, #15]
 8000330:	493a      	ldr	r1, [pc, #232]	; (800041c <Serial_CFG_Callback+0x124>)
 8000332:	4618      	mov	r0, r3
 8000334:	f006 fbe4 	bl	8006b00 <memcpy>

		oldPos_CFG = 0;  // point to the start of the buffer
 8000338:	4b36      	ldr	r3, [pc, #216]	; (8000414 <Serial_CFG_Callback+0x11c>)
 800033a:	2200      	movs	r2, #0
 800033c:	801a      	strh	r2, [r3, #0]
		memcpy ((uint8_t *)Mainbuff_CFG, (uint8_t *)Rxbuff_CFG+datatocopy, (Size-datatocopy));  // copy the remaining data
 800033e:	7bfb      	ldrb	r3, [r7, #15]
 8000340:	4a36      	ldr	r2, [pc, #216]	; (800041c <Serial_CFG_Callback+0x124>)
 8000342:	1899      	adds	r1, r3, r2
 8000344:	88fa      	ldrh	r2, [r7, #6]
 8000346:	7bfb      	ldrb	r3, [r7, #15]
 8000348:	1ad3      	subs	r3, r2, r3
 800034a:	461a      	mov	r2, r3
 800034c:	4832      	ldr	r0, [pc, #200]	; (8000418 <Serial_CFG_Callback+0x120>)
 800034e:	f006 fbd7 	bl	8006b00 <memcpy>
		newPos_CFG = (Size-datatocopy);  // update the position
 8000352:	7bfb      	ldrb	r3, [r7, #15]
 8000354:	b29b      	uxth	r3, r3
 8000356:	88fa      	ldrh	r2, [r7, #6]
 8000358:	1ad3      	subs	r3, r2, r3
 800035a:	b29a      	uxth	r2, r3
 800035c:	4b2c      	ldr	r3, [pc, #176]	; (8000410 <Serial_CFG_Callback+0x118>)
 800035e:	801a      	strh	r2, [r3, #0]
 8000360:	e010      	b.n	8000384 <Serial_CFG_Callback+0x8c>
	/* if the current position + new data size is less than the main buffer
	 * we will simply copy the data into the buffer and update the position
	 */
	else
	{
		memcpy ((uint8_t *)Mainbuff_CFG+oldPos_CFG, (uint8_t *)Rxbuff_CFG, Size);
 8000362:	4b2c      	ldr	r3, [pc, #176]	; (8000414 <Serial_CFG_Callback+0x11c>)
 8000364:	881b      	ldrh	r3, [r3, #0]
 8000366:	461a      	mov	r2, r3
 8000368:	4b2b      	ldr	r3, [pc, #172]	; (8000418 <Serial_CFG_Callback+0x120>)
 800036a:	4413      	add	r3, r2
 800036c:	88fa      	ldrh	r2, [r7, #6]
 800036e:	492b      	ldr	r1, [pc, #172]	; (800041c <Serial_CFG_Callback+0x124>)
 8000370:	4618      	mov	r0, r3
 8000372:	f006 fbc5 	bl	8006b00 <memcpy>
		newPos_CFG = Size+oldPos_CFG;
 8000376:	4b27      	ldr	r3, [pc, #156]	; (8000414 <Serial_CFG_Callback+0x11c>)
 8000378:	881a      	ldrh	r2, [r3, #0]
 800037a:	88fb      	ldrh	r3, [r7, #6]
 800037c:	4413      	add	r3, r2
 800037e:	b29a      	uxth	r2, r3
 8000380:	4b23      	ldr	r3, [pc, #140]	; (8000410 <Serial_CFG_Callback+0x118>)
 8000382:	801a      	strh	r2, [r3, #0]

	/* Update the position of the Head
	 * If the current position + new size is less then the buffer size, Head will update normally
	 * Or else the head will be at the new position from the beginning
	 */
	if (head_CFG+Size < Main_SIZE_CFG) head_CFG = head_CFG+Size;
 8000384:	4b26      	ldr	r3, [pc, #152]	; (8000420 <Serial_CFG_Callback+0x128>)
 8000386:	881b      	ldrh	r3, [r3, #0]
 8000388:	461a      	mov	r2, r3
 800038a:	88fb      	ldrh	r3, [r7, #6]
 800038c:	4413      	add	r3, r2
 800038e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000392:	da07      	bge.n	80003a4 <Serial_CFG_Callback+0xac>
 8000394:	4b22      	ldr	r3, [pc, #136]	; (8000420 <Serial_CFG_Callback+0x128>)
 8000396:	881a      	ldrh	r2, [r3, #0]
 8000398:	88fb      	ldrh	r3, [r7, #6]
 800039a:	4413      	add	r3, r2
 800039c:	b29a      	uxth	r2, r3
 800039e:	4b20      	ldr	r3, [pc, #128]	; (8000420 <Serial_CFG_Callback+0x128>)
 80003a0:	801a      	strh	r2, [r3, #0]
 80003a2:	e009      	b.n	80003b8 <Serial_CFG_Callback+0xc0>
	else head_CFG = head_CFG + Size - Main_SIZE_CFG;
 80003a4:	4b1e      	ldr	r3, [pc, #120]	; (8000420 <Serial_CFG_Callback+0x128>)
 80003a6:	881a      	ldrh	r2, [r3, #0]
 80003a8:	88fb      	ldrh	r3, [r7, #6]
 80003aa:	4413      	add	r3, r2
 80003ac:	b29b      	uxth	r3, r3
 80003ae:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80003b2:	b29a      	uxth	r2, r3
 80003b4:	4b1a      	ldr	r3, [pc, #104]	; (8000420 <Serial_CFG_Callback+0x128>)
 80003b6:	801a      	strh	r2, [r3, #0]

	if ( checkTaskflag(TASK_GET_GPS_TIME) )	{
 80003b8:	2006      	movs	r0, #6
 80003ba:	f001 f817 	bl	80013ec <checkTaskflag>
 80003be:	4603      	mov	r3, r0
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d013      	beq.n	80003ec <Serial_CFG_Callback+0xf4>
		memset(GPS_rxbuffer, 0, GPS_RXBUFF_MAXLEN);
 80003c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80003c8:	2100      	movs	r1, #0
 80003ca:	4816      	ldr	r0, [pc, #88]	; (8000424 <Serial_CFG_Callback+0x12c>)
 80003cc:	f006 fba6 	bl	8006b1c <memset>
		memcpy(GPS_rxbuffer, Rxbuff_CFG, Size);
 80003d0:	88fb      	ldrh	r3, [r7, #6]
 80003d2:	461a      	mov	r2, r3
 80003d4:	4911      	ldr	r1, [pc, #68]	; (800041c <Serial_CFG_Callback+0x124>)
 80003d6:	4813      	ldr	r0, [pc, #76]	; (8000424 <Serial_CFG_Callback+0x12c>)
 80003d8:	f006 fb92 	bl	8006b00 <memcpy>
		GPS_size = Size;
 80003dc:	4a12      	ldr	r2, [pc, #72]	; (8000428 <Serial_CFG_Callback+0x130>)
 80003de:	88fb      	ldrh	r3, [r7, #6]
 80003e0:	8013      	strh	r3, [r2, #0]
		getGPS_time(__MY_RTC);
 80003e2:	4b12      	ldr	r3, [pc, #72]	; (800042c <Serial_CFG_Callback+0x134>)
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	4618      	mov	r0, r3
 80003e8:	f000 f826 	bl	8000438 <getGPS_time>
	}

	enableReceiveDMAtoIdle_CFG();
 80003ec:	f7ff ff68 	bl	80002c0 <enableReceiveDMAtoIdle_CFG>
	/*
	 * Processing data
	 */

	if (isWordinBuff(Rxbuff_CFG, Size, (uint8_t*)"MCFG+")) {
 80003f0:	88fb      	ldrh	r3, [r7, #6]
 80003f2:	4a0f      	ldr	r2, [pc, #60]	; (8000430 <Serial_CFG_Callback+0x138>)
 80003f4:	4619      	mov	r1, r3
 80003f6:	4809      	ldr	r0, [pc, #36]	; (800041c <Serial_CFG_Callback+0x124>)
 80003f8:	f000 ff58 	bl	80012ac <isWordinBuff>
 80003fc:	4603      	mov	r3, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d002      	beq.n	8000408 <Serial_CFG_Callback+0x110>
		isSerialConfig = 1;
 8000402:	4b0c      	ldr	r3, [pc, #48]	; (8000434 <Serial_CFG_Callback+0x13c>)
 8000404:	2201      	movs	r2, #1
 8000406:	701a      	strb	r2, [r3, #0]
	}
}
 8000408:	bf00      	nop
 800040a:	3710      	adds	r7, #16
 800040c:	46bd      	mov	sp, r7
 800040e:	bd80      	pop	{r7, pc}
 8000410:	2000085a 	.word	0x2000085a
 8000414:	20000858 	.word	0x20000858
 8000418:	20000258 	.word	0x20000258
 800041c:	20000158 	.word	0x20000158
 8000420:	2000085c 	.word	0x2000085c
 8000424:	20000658 	.word	0x20000658
 8000428:	2000085e 	.word	0x2000085e
 800042c:	2000086c 	.word	0x2000086c
 8000430:	0800807c 	.word	0x0800807c
 8000434:	20000860 	.word	0x20000860

08000438 <getGPS_time>:
{
	tail_CFG = head_CFG;
}

uint8_t getGPS_time(_RTC *myRTC)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	b08c      	sub	sp, #48	; 0x30
 800043c:	af02      	add	r7, sp, #8
 800043e:	6078      	str	r0, [r7, #4]
//	if (__MY_GPS->getFlag) return 0;
	uint16_t gpslen = GPS_size;
 8000440:	4b34      	ldr	r3, [pc, #208]	; (8000514 <getGPS_time+0xdc>)
 8000442:	881b      	ldrh	r3, [r3, #0]
 8000444:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint8_t *currPos = isWordinBuff(GPS_rxbuffer, gpslen, (uint8_t*)"$GPRMC");
 8000446:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000448:	4a33      	ldr	r2, [pc, #204]	; (8000518 <getGPS_time+0xe0>)
 800044a:	4619      	mov	r1, r3
 800044c:	4833      	ldr	r0, [pc, #204]	; (800051c <getGPS_time+0xe4>)
 800044e:	f000 ff2d 	bl	80012ac <isWordinBuff>
 8000452:	6238      	str	r0, [r7, #32]
	if ( currPos == NULL )	{
 8000454:	6a3b      	ldr	r3, [r7, #32]
 8000456:	2b00      	cmp	r3, #0
 8000458:	d101      	bne.n	800045e <getGPS_time+0x26>
		return 0;
 800045a:	2300      	movs	r3, #0
 800045c:	e056      	b.n	800050c <getGPS_time+0xd4>
	}
	uint16_t remainlen = getRemainsize(currPos, GPS_rxbuffer, gpslen);
 800045e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000460:	461a      	mov	r2, r3
 8000462:	492e      	ldr	r1, [pc, #184]	; (800051c <getGPS_time+0xe4>)
 8000464:	6a38      	ldr	r0, [r7, #32]
 8000466:	f000 ffa0 	bl	80013aa <getRemainsize>
 800046a:	4603      	mov	r3, r0
 800046c:	83fb      	strh	r3, [r7, #30]
	// Get time to buffer
	uint8_t timebuffer [10];
	if ( getBetween((uint8_t*)",", (uint8_t*)".", currPos, remainlen, timebuffer) != 6 )	{
 800046e:	8bfa      	ldrh	r2, [r7, #30]
 8000470:	f107 0314 	add.w	r3, r7, #20
 8000474:	9300      	str	r3, [sp, #0]
 8000476:	4613      	mov	r3, r2
 8000478:	6a3a      	ldr	r2, [r7, #32]
 800047a:	4929      	ldr	r1, [pc, #164]	; (8000520 <getGPS_time+0xe8>)
 800047c:	4829      	ldr	r0, [pc, #164]	; (8000524 <getGPS_time+0xec>)
 800047e:	f000 ff41 	bl	8001304 <getBetween>
 8000482:	4603      	mov	r3, r0
 8000484:	2b06      	cmp	r3, #6
 8000486:	d001      	beq.n	800048c <getGPS_time+0x54>
		return 0;
 8000488:	2300      	movs	r3, #0
 800048a:	e03f      	b.n	800050c <getGPS_time+0xd4>
 800048c:	8abb      	ldrh	r3, [r7, #20]
	}
	// Convert time from buffer and save to myRTC
	uint8_t tmphour[3];
	uint8_t tmpmin[3];
	uint8_t tmpsec[3];
	memcpy(tmphour, timebuffer, 2);
 800048e:	823b      	strh	r3, [r7, #16]
	memcpy(tmpmin, timebuffer + 2, 2);
 8000490:	f107 0314 	add.w	r3, r7, #20
 8000494:	3302      	adds	r3, #2
 8000496:	881b      	ldrh	r3, [r3, #0]
 8000498:	b29b      	uxth	r3, r3
 800049a:	81bb      	strh	r3, [r7, #12]
	memcpy(tmpsec, timebuffer + 4, 2);
 800049c:	f107 0314 	add.w	r3, r7, #20
 80004a0:	3304      	adds	r3, #4
 80004a2:	881b      	ldrh	r3, [r3, #0]
 80004a4:	b29b      	uxth	r3, r3
 80004a6:	813b      	strh	r3, [r7, #8]
	myRTC->Hour = atoi((char*)tmphour) + (uint8_t)MY_TIME_ZONE;
 80004a8:	f107 0310 	add.w	r3, r7, #16
 80004ac:	4618      	mov	r0, r3
 80004ae:	f006 fad9 	bl	8006a64 <atoi>
 80004b2:	4603      	mov	r3, r0
 80004b4:	b2db      	uxtb	r3, r3
 80004b6:	3307      	adds	r3, #7
 80004b8:	b2da      	uxtb	r2, r3
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	711a      	strb	r2, [r3, #4]
	myRTC->Min = atoi((char*)tmpmin);
 80004be:	f107 030c 	add.w	r3, r7, #12
 80004c2:	4618      	mov	r0, r3
 80004c4:	f006 face 	bl	8006a64 <atoi>
 80004c8:	4603      	mov	r3, r0
 80004ca:	b2da      	uxtb	r2, r3
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	715a      	strb	r2, [r3, #5]
	myRTC->Sec = atoi((char*)tmpsec);
 80004d0:	f107 0308 	add.w	r3, r7, #8
 80004d4:	4618      	mov	r0, r3
 80004d6:	f006 fac5 	bl	8006a64 <atoi>
 80004da:	4603      	mov	r3, r0
 80004dc:	b2da      	uxtb	r2, r3
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	719a      	strb	r2, [r3, #6]
	if ( !DS3231_SetTime(myRTC) )	return 0;
 80004e2:	6878      	ldr	r0, [r7, #4]
 80004e4:	f000 fb20 	bl	8000b28 <DS3231_SetTime>
 80004e8:	4603      	mov	r3, r0
 80004ea:	f083 0301 	eor.w	r3, r3, #1
 80004ee:	b2db      	uxtb	r3, r3
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d001      	beq.n	80004f8 <getGPS_time+0xc0>
 80004f4:	2300      	movs	r3, #0
 80004f6:	e009      	b.n	800050c <getGPS_time+0xd4>
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80004f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004fc:	480a      	ldr	r0, [pc, #40]	; (8000528 <getGPS_time+0xf0>)
 80004fe:	f003 fadd 	bl	8003abc <HAL_GPIO_TogglePin>
	triggerTaskflag(TASK_GET_GPS_TIME, FLAG_DIS);
 8000502:	2100      	movs	r1, #0
 8000504:	2006      	movs	r0, #6
 8000506:	f001 f877 	bl	80015f8 <triggerTaskflag>
	return 1;
 800050a:	2301      	movs	r3, #1
}
 800050c:	4618      	mov	r0, r3
 800050e:	3728      	adds	r7, #40	; 0x28
 8000510:	46bd      	mov	sp, r7
 8000512:	bd80      	pop	{r7, pc}
 8000514:	2000085e 	.word	0x2000085e
 8000518:	080080e0 	.word	0x080080e0
 800051c:	20000658 	.word	0x20000658
 8000520:	080080e8 	.word	0x080080e8
 8000524:	080080ec 	.word	0x080080ec
 8000528:	40010800 	.word	0x40010800

0800052c <testSynchronize>:

void testSynchronize()
{
 800052c:	b590      	push	{r4, r7, lr}
 800052e:	b083      	sub	sp, #12
 8000530:	af02      	add	r7, sp, #8
	DS3231_GetTime(__MY_RTC);
 8000532:	4b1b      	ldr	r3, [pc, #108]	; (80005a0 <testSynchronize+0x74>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	4618      	mov	r0, r3
 8000538:	f000 fa7a 	bl	8000a30 <DS3231_GetTime>
	if (HAL_GetTick() - tick > 5000)	{
 800053c:	f002 fb32 	bl	8002ba4 <HAL_GetTick>
 8000540:	4602      	mov	r2, r0
 8000542:	4b18      	ldr	r3, [pc, #96]	; (80005a4 <testSynchronize+0x78>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	1ad3      	subs	r3, r2, r3
 8000548:	f241 3288 	movw	r2, #5000	; 0x1388
 800054c:	4293      	cmp	r3, r2
 800054e:	d908      	bls.n	8000562 <testSynchronize+0x36>
		tick = HAL_GetTick();
 8000550:	f002 fb28 	bl	8002ba4 <HAL_GetTick>
 8000554:	4603      	mov	r3, r0
 8000556:	4a13      	ldr	r2, [pc, #76]	; (80005a4 <testSynchronize+0x78>)
 8000558:	6013      	str	r3, [r2, #0]
		triggerTaskflag(TASK_GET_GPS_TIME, FLAG_EN);
 800055a:	2101      	movs	r1, #1
 800055c:	2006      	movs	r0, #6
 800055e:	f001 f84b 	bl	80015f8 <triggerTaskflag>
	}
	static uint8_t i = 35;
	if (!alarmflag)	{
 8000562:	4b11      	ldr	r3, [pc, #68]	; (80005a8 <testSynchronize+0x7c>)
 8000564:	781b      	ldrb	r3, [r3, #0]
 8000566:	2b00      	cmp	r3, #0
 8000568:	d115      	bne.n	8000596 <testSynchronize+0x6a>
		alarmflag = 1;
 800056a:	4b0f      	ldr	r3, [pc, #60]	; (80005a8 <testSynchronize+0x7c>)
 800056c:	2201      	movs	r2, #1
 800056e:	701a      	strb	r2, [r3, #0]
		DS3231_ClearAlarm1();
 8000570:	f000 fbc6 	bl	8000d00 <DS3231_ClearAlarm1>
		DS3231_SetAlarm1(ALARM_MODE_ALL_MATCHED, __MY_RTC->Date, __MY_RTC->Hour , i++ , 0);
 8000574:	4b0a      	ldr	r3, [pc, #40]	; (80005a0 <testSynchronize+0x74>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	7899      	ldrb	r1, [r3, #2]
 800057a:	4b09      	ldr	r3, [pc, #36]	; (80005a0 <testSynchronize+0x74>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	791a      	ldrb	r2, [r3, #4]
 8000580:	4b0a      	ldr	r3, [pc, #40]	; (80005ac <testSynchronize+0x80>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	1c58      	adds	r0, r3, #1
 8000586:	b2c4      	uxtb	r4, r0
 8000588:	4808      	ldr	r0, [pc, #32]	; (80005ac <testSynchronize+0x80>)
 800058a:	7004      	strb	r4, [r0, #0]
 800058c:	2000      	movs	r0, #0
 800058e:	9000      	str	r0, [sp, #0]
 8000590:	2000      	movs	r0, #0
 8000592:	f000 fb15 	bl	8000bc0 <DS3231_SetAlarm1>
	}
}
 8000596:	bf00      	nop
 8000598:	3704      	adds	r7, #4
 800059a:	46bd      	mov	sp, r7
 800059c:	bd90      	pop	{r4, r7, pc}
 800059e:	bf00      	nop
 80005a0:	2000086c 	.word	0x2000086c
 80005a4:	20000864 	.word	0x20000864
 80005a8:	20000870 	.word	0x20000870
 80005ac:	20000000 	.word	0x20000000

080005b0 <init_Serial_log>:
#define LOG_TIMEOUT		1000

UART_HandleTypeDef *__SERIAL_LOG_UART;

void init_Serial_log (UART_HandleTypeDef *huart)
{
 80005b0:	b480      	push	{r7}
 80005b2:	b083      	sub	sp, #12
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
	__SERIAL_LOG_UART = huart;
 80005b8:	4a03      	ldr	r2, [pc, #12]	; (80005c8 <init_Serial_log+0x18>)
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	6013      	str	r3, [r2, #0]
}
 80005be:	bf00      	nop
 80005c0:	370c      	adds	r7, #12
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bc80      	pop	{r7}
 80005c6:	4770      	bx	lr
 80005c8:	20000874 	.word	0x20000874

080005cc <Serial_log_string>:

void Serial_log_string(char *string)
{
 80005cc:	b590      	push	{r4, r7, lr}
 80005ce:	b083      	sub	sp, #12
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(__SERIAL_LOG_UART, (uint8_t*)string, strlen(string), LOG_TIMEOUT);
 80005d4:	4b08      	ldr	r3, [pc, #32]	; (80005f8 <Serial_log_string+0x2c>)
 80005d6:	681c      	ldr	r4, [r3, #0]
 80005d8:	6878      	ldr	r0, [r7, #4]
 80005da:	f7ff fdb7 	bl	800014c <strlen>
 80005de:	4603      	mov	r3, r0
 80005e0:	b29a      	uxth	r2, r3
 80005e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005e6:	6879      	ldr	r1, [r7, #4]
 80005e8:	4620      	mov	r0, r4
 80005ea:	f005 fa4f 	bl	8005a8c <HAL_UART_Transmit>
}
 80005ee:	bf00      	nop
 80005f0:	370c      	adds	r7, #12
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd90      	pop	{r4, r7, pc}
 80005f6:	bf00      	nop
 80005f8:	20000874 	.word	0x20000874

080005fc <initServerMsg>:

static Station_t *__MY_STATION;
static SMS_t *__MY_SMS;

void initServerMsg (Station_t *Station, SMS_t *mySMS)
{
 80005fc:	b480      	push	{r7}
 80005fe:	b083      	sub	sp, #12
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
 8000604:	6039      	str	r1, [r7, #0]
	__MY_STATION = Station;
 8000606:	4a05      	ldr	r2, [pc, #20]	; (800061c <initServerMsg+0x20>)
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	6013      	str	r3, [r2, #0]
	__MY_SMS = mySMS;
 800060c:	4a04      	ldr	r2, [pc, #16]	; (8000620 <initServerMsg+0x24>)
 800060e:	683b      	ldr	r3, [r7, #0]
 8000610:	6013      	str	r3, [r2, #0]
}
 8000612:	bf00      	nop
 8000614:	370c      	adds	r7, #12
 8000616:	46bd      	mov	sp, r7
 8000618:	bc80      	pop	{r7}
 800061a:	4770      	bx	lr
 800061c:	20000878 	.word	0x20000878
 8000620:	2000087c 	.word	0x2000087c

08000624 <initSIM>:
uint16_t SMS_len = 0;



void initSIM(UART_HandleTypeDef *huart, DMA_HandleTypeDef  *hdma , SIM_t *mySIM)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b084      	sub	sp, #16
 8000628:	af00      	add	r7, sp, #0
 800062a:	60f8      	str	r0, [r7, #12]
 800062c:	60b9      	str	r1, [r7, #8]
 800062e:	607a      	str	r2, [r7, #4]
	__SIM = mySIM;
 8000630:	4a07      	ldr	r2, [pc, #28]	; (8000650 <initSIM+0x2c>)
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	6013      	str	r3, [r2, #0]
	__SIM_UART = huart;
 8000636:	4a07      	ldr	r2, [pc, #28]	; (8000654 <initSIM+0x30>)
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	6013      	str	r3, [r2, #0]
	__SIM_DMA_UART = hdma;
 800063c:	4a06      	ldr	r2, [pc, #24]	; (8000658 <initSIM+0x34>)
 800063e:	68bb      	ldr	r3, [r7, #8]
 8000640:	6013      	str	r3, [r2, #0]
	enableReceiveDMAtoIdle_SIM();
 8000642:	f000 f80b 	bl	800065c <enableReceiveDMAtoIdle_SIM>
//	SIM_sendCMD((uint8_t*)"ATE0",(uint8_t*)"OK", ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, 1000);
}
 8000646:	bf00      	nop
 8000648:	3710      	adds	r7, #16
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	20000888 	.word	0x20000888
 8000654:	20000880 	.word	0x20000880
 8000658:	20000884 	.word	0x20000884

0800065c <enableReceiveDMAtoIdle_SIM>:
void enableReceiveDMAtoIdle_SIM(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
	  HAL_UARTEx_ReceiveToIdle_DMA(__SIM_UART, SIMRxbuff, SIM_RXBUFF_SIZE);
 8000660:	4b09      	ldr	r3, [pc, #36]	; (8000688 <enableReceiveDMAtoIdle_SIM+0x2c>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000668:	4908      	ldr	r1, [pc, #32]	; (800068c <enableReceiveDMAtoIdle_SIM+0x30>)
 800066a:	4618      	mov	r0, r3
 800066c:	f005 fa91 	bl	8005b92 <HAL_UARTEx_ReceiveToIdle_DMA>
	  __HAL_DMA_DISABLE_IT(__SIM_DMA_UART,DMA_IT_HT);
 8000670:	4b07      	ldr	r3, [pc, #28]	; (8000690 <enableReceiveDMAtoIdle_SIM+0x34>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	681a      	ldr	r2, [r3, #0]
 8000678:	4b05      	ldr	r3, [pc, #20]	; (8000690 <enableReceiveDMAtoIdle_SIM+0x34>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	f022 0204 	bic.w	r2, r2, #4
 8000682:	601a      	str	r2, [r3, #0]
}
 8000684:	bf00      	nop
 8000686:	bd80      	pop	{r7, pc}
 8000688:	20000880 	.word	0x20000880
 800068c:	20000a90 	.word	0x20000a90
 8000690:	20000884 	.word	0x20000884

08000694 <SIM_callback>:

void SIM_callback(uint16_t Size)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b084      	sub	sp, #16
 8000698:	af00      	add	r7, sp, #0
 800069a:	4603      	mov	r3, r0
 800069c:	80fb      	strh	r3, [r7, #6]


		oldPos = newPos;  // Update the last position before copying new data
 800069e:	4b56      	ldr	r3, [pc, #344]	; (80007f8 <SIM_callback+0x164>)
 80006a0:	881a      	ldrh	r2, [r3, #0]
 80006a2:	4b56      	ldr	r3, [pc, #344]	; (80007fc <SIM_callback+0x168>)
 80006a4:	801a      	strh	r2, [r3, #0]

		/* If the data in large and it is about to exceed the buffer size, we have to route it to the start of the buffer
		 * This is to maintain the circular buffer
		 * The old data in the main buffer will be overlapped
		 */
		if (oldPos+Size > SIM_BUFF_SIZE)  // If the current position + new data size is greater than the main buffer
 80006a6:	4b55      	ldr	r3, [pc, #340]	; (80007fc <SIM_callback+0x168>)
 80006a8:	881b      	ldrh	r3, [r3, #0]
 80006aa:	461a      	mov	r2, r3
 80006ac:	88fb      	ldrh	r3, [r7, #6]
 80006ae:	4413      	add	r3, r2
 80006b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80006b4:	dd22      	ble.n	80006fc <SIM_callback+0x68>
		{
			uint16_t datatocopy = SIM_BUFF_SIZE-oldPos;  // find out how much space is left in the main buffer
 80006b6:	4b51      	ldr	r3, [pc, #324]	; (80007fc <SIM_callback+0x168>)
 80006b8:	881b      	ldrh	r3, [r3, #0]
 80006ba:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80006be:	81fb      	strh	r3, [r7, #14]
			memcpy ((uint8_t *)SIMbuff+oldPos, (uint8_t *)SIMRxbuff, datatocopy);  // copy data in that remaining space
 80006c0:	4b4e      	ldr	r3, [pc, #312]	; (80007fc <SIM_callback+0x168>)
 80006c2:	881b      	ldrh	r3, [r3, #0]
 80006c4:	461a      	mov	r2, r3
 80006c6:	4b4e      	ldr	r3, [pc, #312]	; (8000800 <SIM_callback+0x16c>)
 80006c8:	4413      	add	r3, r2
 80006ca:	89fa      	ldrh	r2, [r7, #14]
 80006cc:	494d      	ldr	r1, [pc, #308]	; (8000804 <SIM_callback+0x170>)
 80006ce:	4618      	mov	r0, r3
 80006d0:	f006 fa16 	bl	8006b00 <memcpy>

			oldPos = 0;  // point to the start of the buffer
 80006d4:	4b49      	ldr	r3, [pc, #292]	; (80007fc <SIM_callback+0x168>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	801a      	strh	r2, [r3, #0]
			memcpy ((uint8_t *)SIMbuff, (uint8_t *)SIMRxbuff+datatocopy, (Size-datatocopy));  // copy the remaining data
 80006da:	89fb      	ldrh	r3, [r7, #14]
 80006dc:	4a49      	ldr	r2, [pc, #292]	; (8000804 <SIM_callback+0x170>)
 80006de:	1899      	adds	r1, r3, r2
 80006e0:	88fa      	ldrh	r2, [r7, #6]
 80006e2:	89fb      	ldrh	r3, [r7, #14]
 80006e4:	1ad3      	subs	r3, r2, r3
 80006e6:	461a      	mov	r2, r3
 80006e8:	4845      	ldr	r0, [pc, #276]	; (8000800 <SIM_callback+0x16c>)
 80006ea:	f006 fa09 	bl	8006b00 <memcpy>
			newPos = (Size-datatocopy);  // update the position
 80006ee:	88fa      	ldrh	r2, [r7, #6]
 80006f0:	89fb      	ldrh	r3, [r7, #14]
 80006f2:	1ad3      	subs	r3, r2, r3
 80006f4:	b29a      	uxth	r2, r3
 80006f6:	4b40      	ldr	r3, [pc, #256]	; (80007f8 <SIM_callback+0x164>)
 80006f8:	801a      	strh	r2, [r3, #0]
 80006fa:	e010      	b.n	800071e <SIM_callback+0x8a>
		/* if the current position + new data size is less than the main buffer
		 * we will simply copy the data into the buffer and update the position
		 */
		else
		{
			memcpy ((uint8_t *)SIMbuff+oldPos, (uint8_t *)SIMRxbuff, Size);
 80006fc:	4b3f      	ldr	r3, [pc, #252]	; (80007fc <SIM_callback+0x168>)
 80006fe:	881b      	ldrh	r3, [r3, #0]
 8000700:	461a      	mov	r2, r3
 8000702:	4b3f      	ldr	r3, [pc, #252]	; (8000800 <SIM_callback+0x16c>)
 8000704:	4413      	add	r3, r2
 8000706:	88fa      	ldrh	r2, [r7, #6]
 8000708:	493e      	ldr	r1, [pc, #248]	; (8000804 <SIM_callback+0x170>)
 800070a:	4618      	mov	r0, r3
 800070c:	f006 f9f8 	bl	8006b00 <memcpy>
			newPos = Size+oldPos;
 8000710:	4b3a      	ldr	r3, [pc, #232]	; (80007fc <SIM_callback+0x168>)
 8000712:	881a      	ldrh	r2, [r3, #0]
 8000714:	88fb      	ldrh	r3, [r7, #6]
 8000716:	4413      	add	r3, r2
 8000718:	b29a      	uxth	r2, r3
 800071a:	4b37      	ldr	r3, [pc, #220]	; (80007f8 <SIM_callback+0x164>)
 800071c:	801a      	strh	r2, [r3, #0]

		/* Update the position of the Head
		 * If the current position + new size is less then the buffer size, Head will update normally
		 * Or else the head will be at the new position from the beginning
		 */
		if (head + Size < SIM_BUFF_SIZE ) head = head + Size;
 800071e:	4b3a      	ldr	r3, [pc, #232]	; (8000808 <SIM_callback+0x174>)
 8000720:	881b      	ldrh	r3, [r3, #0]
 8000722:	461a      	mov	r2, r3
 8000724:	88fb      	ldrh	r3, [r7, #6]
 8000726:	4413      	add	r3, r2
 8000728:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800072c:	da07      	bge.n	800073e <SIM_callback+0xaa>
 800072e:	4b36      	ldr	r3, [pc, #216]	; (8000808 <SIM_callback+0x174>)
 8000730:	881a      	ldrh	r2, [r3, #0]
 8000732:	88fb      	ldrh	r3, [r7, #6]
 8000734:	4413      	add	r3, r2
 8000736:	b29a      	uxth	r2, r3
 8000738:	4b33      	ldr	r3, [pc, #204]	; (8000808 <SIM_callback+0x174>)
 800073a:	801a      	strh	r2, [r3, #0]
 800073c:	e009      	b.n	8000752 <SIM_callback+0xbe>
		else head = head + Size - SIM_BUFF_SIZE;
 800073e:	4b32      	ldr	r3, [pc, #200]	; (8000808 <SIM_callback+0x174>)
 8000740:	881a      	ldrh	r2, [r3, #0]
 8000742:	88fb      	ldrh	r3, [r7, #6]
 8000744:	4413      	add	r3, r2
 8000746:	b29b      	uxth	r3, r3
 8000748:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 800074c:	b29a      	uxth	r2, r3
 800074e:	4b2e      	ldr	r3, [pc, #184]	; (8000808 <SIM_callback+0x174>)
 8000750:	801a      	strh	r2, [r3, #0]

		/* start the DMA again */
		enableReceiveDMAtoIdle_SIM();
 8000752:	f7ff ff83 	bl	800065c <enableReceiveDMAtoIdle_SIM>

		// New SMS coming
		if (isWordinBuff(SIMRxbuff, Size, (uint8_t*)"+CMTI: \"SM\"") != NULL)
 8000756:	88fb      	ldrh	r3, [r7, #6]
 8000758:	4a2c      	ldr	r2, [pc, #176]	; (800080c <SIM_callback+0x178>)
 800075a:	4619      	mov	r1, r3
 800075c:	4829      	ldr	r0, [pc, #164]	; (8000804 <SIM_callback+0x170>)
 800075e:	f000 fda5 	bl	80012ac <isWordinBuff>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d002      	beq.n	800076e <SIM_callback+0xda>
		{
			newSMS = 1;
 8000768:	4b29      	ldr	r3, [pc, #164]	; (8000810 <SIM_callback+0x17c>)
 800076a:	2201      	movs	r2, #1
 800076c:	701a      	strb	r2, [r3, #0]
		}

		// Read SMS
		if (isWordinBuff(SIMRxbuff, Size, (uint8_t*)"+CMGR:") != NULL)	{
 800076e:	88fb      	ldrh	r3, [r7, #6]
 8000770:	4a28      	ldr	r2, [pc, #160]	; (8000814 <SIM_callback+0x180>)
 8000772:	4619      	mov	r1, r3
 8000774:	4823      	ldr	r0, [pc, #140]	; (8000804 <SIM_callback+0x170>)
 8000776:	f000 fd99 	bl	80012ac <isWordinBuff>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d008      	beq.n	8000792 <SIM_callback+0xfe>
			memcpy(SMS_Rxbuff, SIMRxbuff, Size);
 8000780:	88fb      	ldrh	r3, [r7, #6]
 8000782:	461a      	mov	r2, r3
 8000784:	491f      	ldr	r1, [pc, #124]	; (8000804 <SIM_callback+0x170>)
 8000786:	4824      	ldr	r0, [pc, #144]	; (8000818 <SIM_callback+0x184>)
 8000788:	f006 f9ba 	bl	8006b00 <memcpy>
			SMS_len = Size;
 800078c:	4a23      	ldr	r2, [pc, #140]	; (800081c <SIM_callback+0x188>)
 800078e:	88fb      	ldrh	r3, [r7, #6]
 8000790:	8013      	strh	r3, [r2, #0]
		}
		if (isWordinBuff(SIMRxbuff, Size, (uint8_t*)"+CMGL: ") != NULL)	{
 8000792:	88fb      	ldrh	r3, [r7, #6]
 8000794:	4a22      	ldr	r2, [pc, #136]	; (8000820 <SIM_callback+0x18c>)
 8000796:	4619      	mov	r1, r3
 8000798:	481a      	ldr	r0, [pc, #104]	; (8000804 <SIM_callback+0x170>)
 800079a:	f000 fd87 	bl	80012ac <isWordinBuff>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d008      	beq.n	80007b6 <SIM_callback+0x122>
			memcpy(SMS_Rxbuff, SIMRxbuff, Size);
 80007a4:	88fb      	ldrh	r3, [r7, #6]
 80007a6:	461a      	mov	r2, r3
 80007a8:	4916      	ldr	r1, [pc, #88]	; (8000804 <SIM_callback+0x170>)
 80007aa:	481b      	ldr	r0, [pc, #108]	; (8000818 <SIM_callback+0x184>)
 80007ac:	f006 f9a8 	bl	8006b00 <memcpy>
			SMS_len = Size;
 80007b0:	4a1a      	ldr	r2, [pc, #104]	; (800081c <SIM_callback+0x188>)
 80007b2:	88fb      	ldrh	r3, [r7, #6]
 80007b4:	8013      	strh	r3, [r2, #0]
		}
		// New MQTT message
		if ( (isWordinBuff(SIMRxbuff, Size, (uint8_t*) "+CMQTTRXSTART:") != NULL)
 80007b6:	88fb      	ldrh	r3, [r7, #6]
 80007b8:	4a1a      	ldr	r2, [pc, #104]	; (8000824 <SIM_callback+0x190>)
 80007ba:	4619      	mov	r1, r3
 80007bc:	4811      	ldr	r0, [pc, #68]	; (8000804 <SIM_callback+0x170>)
 80007be:	f000 fd75 	bl	80012ac <isWordinBuff>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d013      	beq.n	80007f0 <SIM_callback+0x15c>
				&& ( isWordinBuff(SIMRxbuff, Size,(uint8_t*) "+CMQTTRXEND:") != NULL ) )  	{
 80007c8:	88fb      	ldrh	r3, [r7, #6]
 80007ca:	4a17      	ldr	r2, [pc, #92]	; (8000828 <SIM_callback+0x194>)
 80007cc:	4619      	mov	r1, r3
 80007ce:	480d      	ldr	r0, [pc, #52]	; (8000804 <SIM_callback+0x170>)
 80007d0:	f000 fd6c 	bl	80012ac <isWordinBuff>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d00a      	beq.n	80007f0 <SIM_callback+0x15c>
			memcpy(MQTT_Rxbuff, SIMRxbuff, Size);
 80007da:	88fb      	ldrh	r3, [r7, #6]
 80007dc:	461a      	mov	r2, r3
 80007de:	4909      	ldr	r1, [pc, #36]	; (8000804 <SIM_callback+0x170>)
 80007e0:	4812      	ldr	r0, [pc, #72]	; (800082c <SIM_callback+0x198>)
 80007e2:	f006 f98d 	bl	8006b00 <memcpy>
			MQTT_receive(MQTT_Rxbuff, Size);
 80007e6:	88fb      	ldrh	r3, [r7, #6]
 80007e8:	4619      	mov	r1, r3
 80007ea:	4810      	ldr	r0, [pc, #64]	; (800082c <SIM_callback+0x198>)
 80007ec:	f000 fd1c 	bl	8001228 <MQTT_receive>

//		Serial_log_string("Rx: ");
//		Serial_log_buffer(SIMRxbuff, Size);
//		Serial_log_string(" ");

}
 80007f0:	bf00      	nop
 80007f2:	3710      	adds	r7, #16
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	2000088e 	.word	0x2000088e
 80007fc:	2000088c 	.word	0x2000088c
 8000800:	20000890 	.word	0x20000890
 8000804:	20000a90 	.word	0x20000a90
 8000808:	200010f4 	.word	0x200010f4
 800080c:	080080f0 	.word	0x080080f0
 8000810:	200010f8 	.word	0x200010f8
 8000814:	080080fc 	.word	0x080080fc
 8000818:	20000bf4 	.word	0x20000bf4
 800081c:	200010fa 	.word	0x200010fa
 8000820:	08008104 	.word	0x08008104
 8000824:	0800810c 	.word	0x0800810c
 8000828:	0800811c 	.word	0x0800811c
 800082c:	20000cf4 	.word	0x20000cf4

08000830 <SIM_checkMsg>:

SIM_res_t SIM_checkMsg(uint8_t *Msg, uint16_t timeout)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b086      	sub	sp, #24
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
 8000838:	460b      	mov	r3, r1
 800083a:	807b      	strh	r3, [r7, #2]
	SIM_res_t res= SIM_NO_RES;
 800083c:	2302      	movs	r3, #2
 800083e:	74fb      	strb	r3, [r7, #19]
	timeout /= 500;
 8000840:	887b      	ldrh	r3, [r7, #2]
 8000842:	4a47      	ldr	r2, [pc, #284]	; (8000960 <SIM_checkMsg+0x130>)
 8000844:	fba2 2303 	umull	r2, r3, r2, r3
 8000848:	095b      	lsrs	r3, r3, #5
 800084a:	807b      	strh	r3, [r7, #2]
	uint8_t dataSize = 0;
 800084c:	2300      	movs	r3, #0
 800084e:	75fb      	strb	r3, [r7, #23]
	uint8_t *tmpdbuff = (uint8_t*)malloc(512);
 8000850:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000854:	f006 f934 	bl	8006ac0 <malloc>
 8000858:	4603      	mov	r3, r0
 800085a:	60fb      	str	r3, [r7, #12]

	for (uint16_t i = 0; i < 500 ; i++)
 800085c:	2300      	movs	r3, #0
 800085e:	82bb      	strh	r3, [r7, #20]
 8000860:	e071      	b.n	8000946 <SIM_checkMsg+0x116>
	{
		HAL_Delay(timeout);
 8000862:	887b      	ldrh	r3, [r7, #2]
 8000864:	4618      	mov	r0, r3
 8000866:	f002 f9a7 	bl	8002bb8 <HAL_Delay>

		if (head > tail)
 800086a:	4b3e      	ldr	r3, [pc, #248]	; (8000964 <SIM_checkMsg+0x134>)
 800086c:	881a      	ldrh	r2, [r3, #0]
 800086e:	4b3e      	ldr	r3, [pc, #248]	; (8000968 <SIM_checkMsg+0x138>)
 8000870:	881b      	ldrh	r3, [r3, #0]
 8000872:	429a      	cmp	r2, r3
 8000874:	d918      	bls.n	80008a8 <SIM_checkMsg+0x78>
		{
			dataSize = head - tail ;
 8000876:	4b3b      	ldr	r3, [pc, #236]	; (8000964 <SIM_checkMsg+0x134>)
 8000878:	881b      	ldrh	r3, [r3, #0]
 800087a:	b2da      	uxtb	r2, r3
 800087c:	4b3a      	ldr	r3, [pc, #232]	; (8000968 <SIM_checkMsg+0x138>)
 800087e:	881b      	ldrh	r3, [r3, #0]
 8000880:	b2db      	uxtb	r3, r3
 8000882:	1ad3      	subs	r3, r2, r3
 8000884:	75fb      	strb	r3, [r7, #23]
//			tmpdbuff = (uint8_t*)malloc(dataSize*sizeof(uint8_t));
			memset( (char*)tmpdbuff, 0, 512 );
 8000886:	f44f 7200 	mov.w	r2, #512	; 0x200
 800088a:	2100      	movs	r1, #0
 800088c:	68f8      	ldr	r0, [r7, #12]
 800088e:	f006 f945 	bl	8006b1c <memset>
			memcpy(tmpdbuff, SIMbuff + tail, dataSize);
 8000892:	4b35      	ldr	r3, [pc, #212]	; (8000968 <SIM_checkMsg+0x138>)
 8000894:	881b      	ldrh	r3, [r3, #0]
 8000896:	461a      	mov	r2, r3
 8000898:	4b34      	ldr	r3, [pc, #208]	; (800096c <SIM_checkMsg+0x13c>)
 800089a:	4413      	add	r3, r2
 800089c:	7dfa      	ldrb	r2, [r7, #23]
 800089e:	4619      	mov	r1, r3
 80008a0:	68f8      	ldr	r0, [r7, #12]
 80008a2:	f006 f92d 	bl	8006b00 <memcpy>
 80008a6:	e02c      	b.n	8000902 <SIM_checkMsg+0xd2>
		}
		else if ( head < tail )
 80008a8:	4b2e      	ldr	r3, [pc, #184]	; (8000964 <SIM_checkMsg+0x134>)
 80008aa:	881a      	ldrh	r2, [r3, #0]
 80008ac:	4b2e      	ldr	r3, [pc, #184]	; (8000968 <SIM_checkMsg+0x138>)
 80008ae:	881b      	ldrh	r3, [r3, #0]
 80008b0:	429a      	cmp	r2, r3
 80008b2:	d244      	bcs.n	800093e <SIM_checkMsg+0x10e>
		{
			dataSize = SIM_BUFF_SIZE - tail + head ;
 80008b4:	4b2b      	ldr	r3, [pc, #172]	; (8000964 <SIM_checkMsg+0x134>)
 80008b6:	881b      	ldrh	r3, [r3, #0]
 80008b8:	b2da      	uxtb	r2, r3
 80008ba:	4b2b      	ldr	r3, [pc, #172]	; (8000968 <SIM_checkMsg+0x138>)
 80008bc:	881b      	ldrh	r3, [r3, #0]
 80008be:	b2db      	uxtb	r3, r3
 80008c0:	1ad3      	subs	r3, r2, r3
 80008c2:	75fb      	strb	r3, [r7, #23]
//		 	tmpdbuff = (uint8_t*)malloc(dataSize*sizeof(uint8_t));
			memset( (char*)tmpdbuff, 0, 512 );
 80008c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008c8:	2100      	movs	r1, #0
 80008ca:	68f8      	ldr	r0, [r7, #12]
 80008cc:	f006 f926 	bl	8006b1c <memset>
			memcpy(tmpdbuff, SIMbuff + tail, SIM_BUFF_SIZE - tail);
 80008d0:	4b25      	ldr	r3, [pc, #148]	; (8000968 <SIM_checkMsg+0x138>)
 80008d2:	881b      	ldrh	r3, [r3, #0]
 80008d4:	461a      	mov	r2, r3
 80008d6:	4b25      	ldr	r3, [pc, #148]	; (800096c <SIM_checkMsg+0x13c>)
 80008d8:	4413      	add	r3, r2
 80008da:	4a23      	ldr	r2, [pc, #140]	; (8000968 <SIM_checkMsg+0x138>)
 80008dc:	8812      	ldrh	r2, [r2, #0]
 80008de:	f5c2 7200 	rsb	r2, r2, #512	; 0x200
 80008e2:	4619      	mov	r1, r3
 80008e4:	68f8      	ldr	r0, [r7, #12]
 80008e6:	f006 f90b 	bl	8006b00 <memcpy>
			memcpy(tmpdbuff + SIM_BUFF_SIZE - tail, SIMbuff, head);
 80008ea:	4b1f      	ldr	r3, [pc, #124]	; (8000968 <SIM_checkMsg+0x138>)
 80008ec:	881b      	ldrh	r3, [r3, #0]
 80008ee:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80008f2:	68fa      	ldr	r2, [r7, #12]
 80008f4:	4413      	add	r3, r2
 80008f6:	4a1b      	ldr	r2, [pc, #108]	; (8000964 <SIM_checkMsg+0x134>)
 80008f8:	8812      	ldrh	r2, [r2, #0]
 80008fa:	491c      	ldr	r1, [pc, #112]	; (800096c <SIM_checkMsg+0x13c>)
 80008fc:	4618      	mov	r0, r3
 80008fe:	f006 f8ff 	bl	8006b00 <memcpy>
		}
		else {
			continue;
		}

		if ( isWordinBuff(tmpdbuff, dataSize, Msg) != NULL )	{
 8000902:	7dfb      	ldrb	r3, [r7, #23]
 8000904:	b29b      	uxth	r3, r3
 8000906:	687a      	ldr	r2, [r7, #4]
 8000908:	4619      	mov	r1, r3
 800090a:	68f8      	ldr	r0, [r7, #12]
 800090c:	f000 fcce 	bl	80012ac <isWordinBuff>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d004      	beq.n	8000920 <SIM_checkMsg+0xf0>
//			Serial_log_number(tail);
//			Serial_log_string(" ");
//			Serial_log_string("\nhead: ");
//			Serial_log_number(head);
//			Serial_log_string(" ");
			free(tmpdbuff);
 8000916:	68f8      	ldr	r0, [r7, #12]
 8000918:	f006 f8da 	bl	8006ad0 <free>
			return SIM_RES_MSG ;
 800091c:	2301      	movs	r3, #1
 800091e:	e01a      	b.n	8000956 <SIM_checkMsg+0x126>
		}

		if ( isWordinBuff(tmpdbuff, dataSize, (uint8_t*)"ERROR") != NULL )	{
 8000920:	7dfb      	ldrb	r3, [r7, #23]
 8000922:	b29b      	uxth	r3, r3
 8000924:	4a12      	ldr	r2, [pc, #72]	; (8000970 <SIM_checkMsg+0x140>)
 8000926:	4619      	mov	r1, r3
 8000928:	68f8      	ldr	r0, [r7, #12]
 800092a:	f000 fcbf 	bl	80012ac <isWordinBuff>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d005      	beq.n	8000940 <SIM_checkMsg+0x110>
//			Serial_log_string("err: ");
//			Serial_log_buffer(tmpdbuff, dataSize);
//			Serial_log_string(";");
			free(tmpdbuff);
 8000934:	68f8      	ldr	r0, [r7, #12]
 8000936:	f006 f8cb 	bl	8006ad0 <free>
			return SIM_ERROR ;
 800093a:	2300      	movs	r3, #0
 800093c:	e00b      	b.n	8000956 <SIM_checkMsg+0x126>
			continue;
 800093e:	bf00      	nop
	for (uint16_t i = 0; i < 500 ; i++)
 8000940:	8abb      	ldrh	r3, [r7, #20]
 8000942:	3301      	adds	r3, #1
 8000944:	82bb      	strh	r3, [r7, #20]
 8000946:	8abb      	ldrh	r3, [r7, #20]
 8000948:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800094c:	d389      	bcc.n	8000862 <SIM_checkMsg+0x32>
//	Serial_log_number(tail);
//	Serial_log_string(" ");
//	Serial_log_string("\nhead: ");
//	Serial_log_number(head);
//	Serial_log_string(" ");
	free(tmpdbuff);
 800094e:	68f8      	ldr	r0, [r7, #12]
 8000950:	f006 f8be 	bl	8006ad0 <free>
 	return res;
 8000954:	7cfb      	ldrb	r3, [r7, #19]

}
 8000956:	4618      	mov	r0, r3
 8000958:	3718      	adds	r7, #24
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	10624dd3 	.word	0x10624dd3
 8000964:	200010f4 	.word	0x200010f4
 8000968:	200010f6 	.word	0x200010f6
 800096c:	20000890 	.word	0x20000890
 8000970:	0800812c 	.word	0x0800812c

08000974 <SIM_sendCMD>:

SIM_res_t SIM_sendCMD(uint8_t *cmd, uint8_t *checkResMsg, uint8_t CheckResENorDIS, uint8_t ENorDISmarkasread, uint32_t timeout)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b086      	sub	sp, #24
 8000978:	af00      	add	r7, sp, #0
 800097a:	60f8      	str	r0, [r7, #12]
 800097c:	60b9      	str	r1, [r7, #8]
 800097e:	4611      	mov	r1, r2
 8000980:	461a      	mov	r2, r3
 8000982:	460b      	mov	r3, r1
 8000984:	71fb      	strb	r3, [r7, #7]
 8000986:	4613      	mov	r3, r2
 8000988:	71bb      	strb	r3, [r7, #6]
	uint8_t len = sprintf( (char*)SIM_Txbuff, "%s\r\n", cmd);
 800098a:	68fa      	ldr	r2, [r7, #12]
 800098c:	4915      	ldr	r1, [pc, #84]	; (80009e4 <SIM_sendCMD+0x70>)
 800098e:	4816      	ldr	r0, [pc, #88]	; (80009e8 <SIM_sendCMD+0x74>)
 8000990:	f006 f9f6 	bl	8006d80 <siprintf>
 8000994:	4603      	mov	r3, r0
 8000996:	75fb      	strb	r3, [r7, #23]
	if ( HAL_UART_Transmit(__SIM_UART, SIM_Txbuff, len, 0xFFFF) != HAL_OK )	{
 8000998:	4b14      	ldr	r3, [pc, #80]	; (80009ec <SIM_sendCMD+0x78>)
 800099a:	6818      	ldr	r0, [r3, #0]
 800099c:	7dfb      	ldrb	r3, [r7, #23]
 800099e:	b29a      	uxth	r2, r3
 80009a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80009a4:	4910      	ldr	r1, [pc, #64]	; (80009e8 <SIM_sendCMD+0x74>)
 80009a6:	f005 f871 	bl	8005a8c <HAL_UART_Transmit>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d002      	beq.n	80009b6 <SIM_sendCMD+0x42>
		Serial_log_string("UART transmit ERROR\r\n");
 80009b0:	480f      	ldr	r0, [pc, #60]	; (80009f0 <SIM_sendCMD+0x7c>)
 80009b2:	f7ff fe0b 	bl	80005cc <Serial_log_string>
	}

	if (CheckResENorDIS == ENABLE_SIM_CHECKRES)
 80009b6:	79fb      	ldrb	r3, [r7, #7]
 80009b8:	2b01      	cmp	r3, #1
 80009ba:	d10e      	bne.n	80009da <SIM_sendCMD+0x66>
	{
		SIM_res_t res = SIM_checkMsg(checkResMsg, timeout);
 80009bc:	6a3b      	ldr	r3, [r7, #32]
 80009be:	b29b      	uxth	r3, r3
 80009c0:	4619      	mov	r1, r3
 80009c2:	68b8      	ldr	r0, [r7, #8]
 80009c4:	f7ff ff34 	bl	8000830 <SIM_checkMsg>
 80009c8:	4603      	mov	r3, r0
 80009ca:	75bb      	strb	r3, [r7, #22]
		if (ENorDISmarkasread == ENABLE_MARKASREAD)
 80009cc:	79bb      	ldrb	r3, [r7, #6]
 80009ce:	2b01      	cmp	r3, #1
 80009d0:	d101      	bne.n	80009d6 <SIM_sendCMD+0x62>
		{
			MarkAsReadData_SIM();
 80009d2:	f000 f80f 	bl	80009f4 <MarkAsReadData_SIM>
		}
//		Serial_log_string("Res of CMD: ");
//		Serial_log_buffer(cmd, len);
//		Serial_log_number(res);
		return res;
 80009d6:	7dbb      	ldrb	r3, [r7, #22]
 80009d8:	e000      	b.n	80009dc <SIM_sendCMD+0x68>
	}
	return SIM_NO_RES;
 80009da:	2302      	movs	r3, #2
}
 80009dc:	4618      	mov	r0, r3
 80009de:	3718      	adds	r7, #24
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	08008134 	.word	0x08008134
 80009e8:	20000b90 	.word	0x20000b90
 80009ec:	20000880 	.word	0x20000880
 80009f0:	0800813c 	.word	0x0800813c

080009f4 <MarkAsReadData_SIM>:



void MarkAsReadData_SIM(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
	tail = head;
 80009f8:	4b03      	ldr	r3, [pc, #12]	; (8000a08 <MarkAsReadData_SIM+0x14>)
 80009fa:	881a      	ldrh	r2, [r3, #0]
 80009fc:	4b03      	ldr	r3, [pc, #12]	; (8000a0c <MarkAsReadData_SIM+0x18>)
 80009fe:	801a      	strh	r2, [r3, #0]
}
 8000a00:	bf00      	nop
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bc80      	pop	{r7}
 8000a06:	4770      	bx	lr
 8000a08:	200010f4 	.word	0x200010f4
 8000a0c:	200010f6 	.word	0x200010f6

08000a10 <DS3231_Init>:

static uint8_t B2D(uint8_t bcd);
static uint8_t D2B(uint8_t decimal);

void DS3231_Init(I2C_HandleTypeDef *handle)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  i2c = handle;
 8000a18:	4a04      	ldr	r2, [pc, #16]	; (8000a2c <DS3231_Init+0x1c>)
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	6013      	str	r3, [r2, #0]
  DS3231_ClearAlarm1();
 8000a1e:	f000 f96f 	bl	8000d00 <DS3231_ClearAlarm1>
}
 8000a22:	bf00      	nop
 8000a24:	3708      	adds	r7, #8
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	200010fc 	.word	0x200010fc

08000a30 <DS3231_GetTime>:
	if ( (rtc.Min < 0) || (rtc.Min >59 ) )	return false;
	if ( (rtc.Hour < 0) || (rtc.Sec >23 ) )	return false;
	return true;
}
bool DS3231_GetTime(_RTC *rtc)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b086      	sub	sp, #24
 8000a34:	af02      	add	r7, sp, #8
 8000a36:	6078      	str	r0, [r7, #4]
  uint8_t startAddr = DS3231_REG_TIME;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	73fb      	strb	r3, [r7, #15]
  uint8_t buffer[7] = {0,};
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	60bb      	str	r3, [r7, #8]
 8000a40:	f107 030c 	add.w	r3, r7, #12
 8000a44:	2100      	movs	r1, #0
 8000a46:	460a      	mov	r2, r1
 8000a48:	801a      	strh	r2, [r3, #0]
 8000a4a:	460a      	mov	r2, r1
 8000a4c:	709a      	strb	r2, [r3, #2]

  if(HAL_I2C_Master_Transmit(i2c, DS3231_ADDR, &startAddr, 1, HAL_MAX_DELAY) != HAL_OK) return false;
 8000a4e:	4b35      	ldr	r3, [pc, #212]	; (8000b24 <DS3231_GetTime+0xf4>)
 8000a50:	6818      	ldr	r0, [r3, #0]
 8000a52:	f107 020f 	add.w	r2, r7, #15
 8000a56:	f04f 33ff 	mov.w	r3, #4294967295
 8000a5a:	9300      	str	r3, [sp, #0]
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	21d0      	movs	r1, #208	; 0xd0
 8000a60:	f003 f9a2 	bl	8003da8 <HAL_I2C_Master_Transmit>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <DS3231_GetTime+0x3e>
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	e055      	b.n	8000b1a <DS3231_GetTime+0xea>
  if(HAL_I2C_Master_Receive(i2c, DS3231_ADDR, buffer, sizeof(buffer), HAL_MAX_DELAY) != HAL_OK) return false;
 8000a6e:	4b2d      	ldr	r3, [pc, #180]	; (8000b24 <DS3231_GetTime+0xf4>)
 8000a70:	6818      	ldr	r0, [r3, #0]
 8000a72:	f107 0208 	add.w	r2, r7, #8
 8000a76:	f04f 33ff 	mov.w	r3, #4294967295
 8000a7a:	9300      	str	r3, [sp, #0]
 8000a7c:	2307      	movs	r3, #7
 8000a7e:	21d0      	movs	r1, #208	; 0xd0
 8000a80:	f003 fa90 	bl	8003fa4 <HAL_I2C_Master_Receive>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <DS3231_GetTime+0x5e>
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	e045      	b.n	8000b1a <DS3231_GetTime+0xea>

  rtc->Sec = B2D(buffer[0] & 0x7F);
 8000a8e:	7a3b      	ldrb	r3, [r7, #8]
 8000a90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000a94:	b2db      	uxtb	r3, r3
 8000a96:	4618      	mov	r0, r3
 8000a98:	f000 f9a8 	bl	8000dec <B2D>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	461a      	mov	r2, r3
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	719a      	strb	r2, [r3, #6]
  rtc->Min = B2D(buffer[1] & 0x7F);
 8000aa4:	7a7b      	ldrb	r3, [r7, #9]
 8000aa6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000aaa:	b2db      	uxtb	r3, r3
 8000aac:	4618      	mov	r0, r3
 8000aae:	f000 f99d 	bl	8000dec <B2D>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	461a      	mov	r2, r3
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	715a      	strb	r2, [r3, #5]
  rtc->Hour = B2D(buffer[2] & 0x3F);
 8000aba:	7abb      	ldrb	r3, [r7, #10]
 8000abc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000ac0:	b2db      	uxtb	r3, r3
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f000 f992 	bl	8000dec <B2D>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	461a      	mov	r2, r3
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	711a      	strb	r2, [r3, #4]
  rtc->DaysOfWeek = buffer[3] & 0x07;
 8000ad0:	7afb      	ldrb	r3, [r7, #11]
 8000ad2:	f003 0307 	and.w	r3, r3, #7
 8000ad6:	b2da      	uxtb	r2, r3
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	70da      	strb	r2, [r3, #3]
  rtc->Date = B2D(buffer[4] & 0x3F);
 8000adc:	7b3b      	ldrb	r3, [r7, #12]
 8000ade:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000ae2:	b2db      	uxtb	r3, r3
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f000 f981 	bl	8000dec <B2D>
 8000aea:	4603      	mov	r3, r0
 8000aec:	461a      	mov	r2, r3
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	709a      	strb	r2, [r3, #2]
  rtc->Month = B2D(buffer[5] & 0x1F);
 8000af2:	7b7b      	ldrb	r3, [r7, #13]
 8000af4:	f003 031f 	and.w	r3, r3, #31
 8000af8:	b2db      	uxtb	r3, r3
 8000afa:	4618      	mov	r0, r3
 8000afc:	f000 f976 	bl	8000dec <B2D>
 8000b00:	4603      	mov	r3, r0
 8000b02:	461a      	mov	r2, r3
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	705a      	strb	r2, [r3, #1]
  rtc->Year = B2D(buffer[6]);
 8000b08:	7bbb      	ldrb	r3, [r7, #14]
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f000 f96e 	bl	8000dec <B2D>
 8000b10:	4603      	mov	r3, r0
 8000b12:	461a      	mov	r2, r3
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	701a      	strb	r2, [r3, #0]

  return true;
 8000b18:	2301      	movs	r3, #1
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	3710      	adds	r7, #16
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	200010fc 	.word	0x200010fc

08000b28 <DS3231_SetTime>:

bool DS3231_SetTime(_RTC *rtc)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b088      	sub	sp, #32
 8000b2c:	af02      	add	r7, sp, #8
 8000b2e:	6078      	str	r0, [r7, #4]
  uint8_t startAddr = DS3231_REG_TIME;
 8000b30:	2300      	movs	r3, #0
 8000b32:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[8] = {startAddr, D2B(rtc->Sec), D2B(rtc->Min), D2B(rtc->Hour), rtc->DaysOfWeek, D2B(rtc->Date), D2B(rtc->Month), D2B(rtc->Year)};
 8000b34:	7dfb      	ldrb	r3, [r7, #23]
 8000b36:	733b      	strb	r3, [r7, #12]
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	799b      	ldrb	r3, [r3, #6]
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f000 f96d 	bl	8000e1c <D2B>
 8000b42:	4603      	mov	r3, r0
 8000b44:	737b      	strb	r3, [r7, #13]
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	795b      	ldrb	r3, [r3, #5]
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f000 f966 	bl	8000e1c <D2B>
 8000b50:	4603      	mov	r3, r0
 8000b52:	73bb      	strb	r3, [r7, #14]
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	791b      	ldrb	r3, [r3, #4]
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f000 f95f 	bl	8000e1c <D2B>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	73fb      	strb	r3, [r7, #15]
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	78db      	ldrb	r3, [r3, #3]
 8000b66:	743b      	strb	r3, [r7, #16]
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	789b      	ldrb	r3, [r3, #2]
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f000 f955 	bl	8000e1c <D2B>
 8000b72:	4603      	mov	r3, r0
 8000b74:	747b      	strb	r3, [r7, #17]
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	785b      	ldrb	r3, [r3, #1]
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f000 f94e 	bl	8000e1c <D2B>
 8000b80:	4603      	mov	r3, r0
 8000b82:	74bb      	strb	r3, [r7, #18]
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f000 f947 	bl	8000e1c <D2B>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	74fb      	strb	r3, [r7, #19]
  if(HAL_I2C_Master_Transmit(i2c, DS3231_ADDR, buffer, sizeof(buffer), HAL_MAX_DELAY) != HAL_OK) return false;
 8000b92:	4b0a      	ldr	r3, [pc, #40]	; (8000bbc <DS3231_SetTime+0x94>)
 8000b94:	6818      	ldr	r0, [r3, #0]
 8000b96:	f107 020c 	add.w	r2, r7, #12
 8000b9a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b9e:	9300      	str	r3, [sp, #0]
 8000ba0:	2308      	movs	r3, #8
 8000ba2:	21d0      	movs	r1, #208	; 0xd0
 8000ba4:	f003 f900 	bl	8003da8 <HAL_I2C_Master_Transmit>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <DS3231_SetTime+0x8a>
 8000bae:	2300      	movs	r3, #0
 8000bb0:	e000      	b.n	8000bb4 <DS3231_SetTime+0x8c>

  return true;
 8000bb2:	2301      	movs	r3, #1
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	3718      	adds	r7, #24
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	200010fc 	.word	0x200010fc

08000bc0 <DS3231_SetAlarm1>:
  *temp = value / 4.0f;
  return true;
}

bool DS3231_SetAlarm1(uint8_t mode, uint8_t date, uint8_t hour, uint8_t min, uint8_t sec)
{
 8000bc0:	b590      	push	{r4, r7, lr}
 8000bc2:	b089      	sub	sp, #36	; 0x24
 8000bc4:	af02      	add	r7, sp, #8
 8000bc6:	4604      	mov	r4, r0
 8000bc8:	4608      	mov	r0, r1
 8000bca:	4611      	mov	r1, r2
 8000bcc:	461a      	mov	r2, r3
 8000bce:	4623      	mov	r3, r4
 8000bd0:	71fb      	strb	r3, [r7, #7]
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	71bb      	strb	r3, [r7, #6]
 8000bd6:	460b      	mov	r3, r1
 8000bd8:	717b      	strb	r3, [r7, #5]
 8000bda:	4613      	mov	r3, r2
 8000bdc:	713b      	strb	r3, [r7, #4]
  uint8_t alarmSecond = D2B(sec);
 8000bde:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000be2:	4618      	mov	r0, r3
 8000be4:	f000 f91a 	bl	8000e1c <D2B>
 8000be8:	4603      	mov	r3, r0
 8000bea:	75fb      	strb	r3, [r7, #23]
  uint8_t alarmMinute = D2B(min);
 8000bec:	793b      	ldrb	r3, [r7, #4]
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f000 f914 	bl	8000e1c <D2B>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	75bb      	strb	r3, [r7, #22]
  uint8_t alarmHour = D2B(hour);
 8000bf8:	797b      	ldrb	r3, [r7, #5]
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f000 f90e 	bl	8000e1c <D2B>
 8000c00:	4603      	mov	r3, r0
 8000c02:	757b      	strb	r3, [r7, #21]
  uint8_t alarmDate = D2B(date);
 8000c04:	79bb      	ldrb	r3, [r7, #6]
 8000c06:	4618      	mov	r0, r3
 8000c08:	f000 f908 	bl	8000e1c <D2B>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	753b      	strb	r3, [r7, #20]

  switch(mode)
 8000c10:	79fb      	ldrb	r3, [r7, #7]
 8000c12:	2b04      	cmp	r3, #4
 8000c14:	d838      	bhi.n	8000c88 <DS3231_SetAlarm1+0xc8>
 8000c16:	a201      	add	r2, pc, #4	; (adr r2, 8000c1c <DS3231_SetAlarm1+0x5c>)
 8000c18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c1c:	08000c89 	.word	0x08000c89
 8000c20:	08000c31 	.word	0x08000c31
 8000c24:	08000c3b 	.word	0x08000c3b
 8000c28:	08000c4d 	.word	0x08000c4d
 8000c2c:	08000c67 	.word	0x08000c67
  {
  case ALARM_MODE_ALL_MATCHED:
    break;
  case ALARM_MODE_HOUR_MIN_SEC_MATCHED:
    alarmDate |= 0x80;
 8000c30:	7d3b      	ldrb	r3, [r7, #20]
 8000c32:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000c36:	753b      	strb	r3, [r7, #20]
    break;
 8000c38:	e027      	b.n	8000c8a <DS3231_SetAlarm1+0xca>
  case ALARM_MODE_MIN_SEC_MATCHED:
    alarmDate |= 0x80;
 8000c3a:	7d3b      	ldrb	r3, [r7, #20]
 8000c3c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000c40:	753b      	strb	r3, [r7, #20]
    alarmHour |= 0x80;
 8000c42:	7d7b      	ldrb	r3, [r7, #21]
 8000c44:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000c48:	757b      	strb	r3, [r7, #21]
    break;
 8000c4a:	e01e      	b.n	8000c8a <DS3231_SetAlarm1+0xca>
  case ALARM_MODE_SEC_MATCHED:
    alarmDate |= 0x80;
 8000c4c:	7d3b      	ldrb	r3, [r7, #20]
 8000c4e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000c52:	753b      	strb	r3, [r7, #20]
    alarmHour |= 0x80;
 8000c54:	7d7b      	ldrb	r3, [r7, #21]
 8000c56:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000c5a:	757b      	strb	r3, [r7, #21]
    alarmMinute |= 0x80;
 8000c5c:	7dbb      	ldrb	r3, [r7, #22]
 8000c5e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000c62:	75bb      	strb	r3, [r7, #22]
    break;
 8000c64:	e011      	b.n	8000c8a <DS3231_SetAlarm1+0xca>
  case ALARM_MODE_ONCE_PER_SECOND:
    alarmDate |= 0x80;
 8000c66:	7d3b      	ldrb	r3, [r7, #20]
 8000c68:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000c6c:	753b      	strb	r3, [r7, #20]
    alarmHour |= 0x80;
 8000c6e:	7d7b      	ldrb	r3, [r7, #21]
 8000c70:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000c74:	757b      	strb	r3, [r7, #21]
    alarmMinute |= 0x80;
 8000c76:	7dbb      	ldrb	r3, [r7, #22]
 8000c78:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000c7c:	75bb      	strb	r3, [r7, #22]
    alarmSecond |= 0x80;
 8000c7e:	7dfb      	ldrb	r3, [r7, #23]
 8000c80:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000c84:	75fb      	strb	r3, [r7, #23]
    break;
 8000c86:	e000      	b.n	8000c8a <DS3231_SetAlarm1+0xca>
  default:
    break;
 8000c88:	bf00      	nop
  }

  /* Write Alarm Registers */
  uint8_t startAddr = DS3231_REG_ALARM1;
 8000c8a:	2307      	movs	r3, #7
 8000c8c:	74fb      	strb	r3, [r7, #19]
  uint8_t buffer[5] = {startAddr, alarmSecond, alarmMinute, alarmHour, alarmDate};
 8000c8e:	7cfb      	ldrb	r3, [r7, #19]
 8000c90:	733b      	strb	r3, [r7, #12]
 8000c92:	7dfb      	ldrb	r3, [r7, #23]
 8000c94:	737b      	strb	r3, [r7, #13]
 8000c96:	7dbb      	ldrb	r3, [r7, #22]
 8000c98:	73bb      	strb	r3, [r7, #14]
 8000c9a:	7d7b      	ldrb	r3, [r7, #21]
 8000c9c:	73fb      	strb	r3, [r7, #15]
 8000c9e:	7d3b      	ldrb	r3, [r7, #20]
 8000ca0:	743b      	strb	r3, [r7, #16]
  if(HAL_I2C_Master_Transmit(i2c, DS3231_ADDR, buffer, sizeof(buffer), HAL_MAX_DELAY) != HAL_OK) return false;
 8000ca2:	4b16      	ldr	r3, [pc, #88]	; (8000cfc <DS3231_SetAlarm1+0x13c>)
 8000ca4:	6818      	ldr	r0, [r3, #0]
 8000ca6:	f107 020c 	add.w	r2, r7, #12
 8000caa:	f04f 33ff 	mov.w	r3, #4294967295
 8000cae:	9300      	str	r3, [sp, #0]
 8000cb0:	2305      	movs	r3, #5
 8000cb2:	21d0      	movs	r1, #208	; 0xd0
 8000cb4:	f003 f878 	bl	8003da8 <HAL_I2C_Master_Transmit>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <DS3231_SetAlarm1+0x102>
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	e017      	b.n	8000cf2 <DS3231_SetAlarm1+0x132>

  /* Enable Alarm1 at Control Register */
  uint8_t ctrlReg = 0x00;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	72fb      	strb	r3, [r7, #11]
  ReadRegister(DS3231_REG_CONTROL, &ctrlReg);
 8000cc6:	f107 030b 	add.w	r3, r7, #11
 8000cca:	4619      	mov	r1, r3
 8000ccc:	200e      	movs	r0, #14
 8000cce:	f000 f83d 	bl	8000d4c <ReadRegister>
  ctrlReg |= DS3231_CON_A1IE;
 8000cd2:	7afb      	ldrb	r3, [r7, #11]
 8000cd4:	f043 0301 	orr.w	r3, r3, #1
 8000cd8:	b2db      	uxtb	r3, r3
 8000cda:	72fb      	strb	r3, [r7, #11]
  ctrlReg |= DS3231_CON_INTCN;
 8000cdc:	7afb      	ldrb	r3, [r7, #11]
 8000cde:	f043 0304 	orr.w	r3, r3, #4
 8000ce2:	b2db      	uxtb	r3, r3
 8000ce4:	72fb      	strb	r3, [r7, #11]
  WriteRegister(DS3231_REG_CONTROL, ctrlReg);
 8000ce6:	7afb      	ldrb	r3, [r7, #11]
 8000ce8:	4619      	mov	r1, r3
 8000cea:	200e      	movs	r0, #14
 8000cec:	f000 f85a 	bl	8000da4 <WriteRegister>

  return true;
 8000cf0:	2301      	movs	r3, #1
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	371c      	adds	r7, #28
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd90      	pop	{r4, r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	200010fc 	.word	0x200010fc

08000d00 <DS3231_ClearAlarm1>:

bool DS3231_ClearAlarm1()
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
  uint8_t ctrlReg;
  uint8_t statusReg;

  /* Clear Control Register */
  ReadRegister(DS3231_REG_CONTROL, &ctrlReg);
 8000d06:	1dfb      	adds	r3, r7, #7
 8000d08:	4619      	mov	r1, r3
 8000d0a:	200e      	movs	r0, #14
 8000d0c:	f000 f81e 	bl	8000d4c <ReadRegister>
  ctrlReg &= ~DS3231_CON_A1IE;
 8000d10:	79fb      	ldrb	r3, [r7, #7]
 8000d12:	f023 0301 	bic.w	r3, r3, #1
 8000d16:	b2db      	uxtb	r3, r3
 8000d18:	71fb      	strb	r3, [r7, #7]
  WriteRegister(DS3231_REG_CONTROL, ctrlReg);
 8000d1a:	79fb      	ldrb	r3, [r7, #7]
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	200e      	movs	r0, #14
 8000d20:	f000 f840 	bl	8000da4 <WriteRegister>

  /* Clear Status Register */
  ReadRegister(DS3231_REG_STATUS, &statusReg);
 8000d24:	1dbb      	adds	r3, r7, #6
 8000d26:	4619      	mov	r1, r3
 8000d28:	200f      	movs	r0, #15
 8000d2a:	f000 f80f 	bl	8000d4c <ReadRegister>
  statusReg &= ~DS3231_STA_A1F;
 8000d2e:	79bb      	ldrb	r3, [r7, #6]
 8000d30:	f023 0301 	bic.w	r3, r3, #1
 8000d34:	b2db      	uxtb	r3, r3
 8000d36:	71bb      	strb	r3, [r7, #6]
  WriteRegister(DS3231_REG_STATUS, statusReg);
 8000d38:	79bb      	ldrb	r3, [r7, #6]
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	200f      	movs	r0, #15
 8000d3e:	f000 f831 	bl	8000da4 <WriteRegister>

  return true;
 8000d42:	2301      	movs	r3, #1
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	3708      	adds	r7, #8
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}

08000d4c <ReadRegister>:

bool ReadRegister(uint8_t regAddr, uint8_t *value)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b084      	sub	sp, #16
 8000d50:	af02      	add	r7, sp, #8
 8000d52:	4603      	mov	r3, r0
 8000d54:	6039      	str	r1, [r7, #0]
 8000d56:	71fb      	strb	r3, [r7, #7]
  if(HAL_I2C_Master_Transmit(i2c, DS3231_ADDR, &regAddr, 1, HAL_MAX_DELAY) != HAL_OK) return false;
 8000d58:	4b11      	ldr	r3, [pc, #68]	; (8000da0 <ReadRegister+0x54>)
 8000d5a:	6818      	ldr	r0, [r3, #0]
 8000d5c:	1dfa      	adds	r2, r7, #7
 8000d5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d62:	9300      	str	r3, [sp, #0]
 8000d64:	2301      	movs	r3, #1
 8000d66:	21d0      	movs	r1, #208	; 0xd0
 8000d68:	f003 f81e 	bl	8003da8 <HAL_I2C_Master_Transmit>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <ReadRegister+0x2a>
 8000d72:	2300      	movs	r3, #0
 8000d74:	e00f      	b.n	8000d96 <ReadRegister+0x4a>
  if(HAL_I2C_Master_Receive(i2c, DS3231_ADDR, value, 1, HAL_MAX_DELAY) != HAL_OK) return false;
 8000d76:	4b0a      	ldr	r3, [pc, #40]	; (8000da0 <ReadRegister+0x54>)
 8000d78:	6818      	ldr	r0, [r3, #0]
 8000d7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d7e:	9300      	str	r3, [sp, #0]
 8000d80:	2301      	movs	r3, #1
 8000d82:	683a      	ldr	r2, [r7, #0]
 8000d84:	21d0      	movs	r1, #208	; 0xd0
 8000d86:	f003 f90d 	bl	8003fa4 <HAL_I2C_Master_Receive>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <ReadRegister+0x48>
 8000d90:	2300      	movs	r3, #0
 8000d92:	e000      	b.n	8000d96 <ReadRegister+0x4a>

  return true;
 8000d94:	2301      	movs	r3, #1
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	3708      	adds	r7, #8
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	200010fc 	.word	0x200010fc

08000da4 <WriteRegister>:

bool WriteRegister(uint8_t regAddr, uint8_t value)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b086      	sub	sp, #24
 8000da8:	af02      	add	r7, sp, #8
 8000daa:	4603      	mov	r3, r0
 8000dac:	460a      	mov	r2, r1
 8000dae:	71fb      	strb	r3, [r7, #7]
 8000db0:	4613      	mov	r3, r2
 8000db2:	71bb      	strb	r3, [r7, #6]
  uint8_t buffer[2] = {regAddr, value};
 8000db4:	79fb      	ldrb	r3, [r7, #7]
 8000db6:	733b      	strb	r3, [r7, #12]
 8000db8:	79bb      	ldrb	r3, [r7, #6]
 8000dba:	737b      	strb	r3, [r7, #13]
  if(HAL_I2C_Master_Transmit(i2c, DS3231_ADDR, buffer, sizeof(buffer), HAL_MAX_DELAY) != HAL_OK) return false;
 8000dbc:	4b0a      	ldr	r3, [pc, #40]	; (8000de8 <WriteRegister+0x44>)
 8000dbe:	6818      	ldr	r0, [r3, #0]
 8000dc0:	f107 020c 	add.w	r2, r7, #12
 8000dc4:	f04f 33ff 	mov.w	r3, #4294967295
 8000dc8:	9300      	str	r3, [sp, #0]
 8000dca:	2302      	movs	r3, #2
 8000dcc:	21d0      	movs	r1, #208	; 0xd0
 8000dce:	f002 ffeb 	bl	8003da8 <HAL_I2C_Master_Transmit>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <WriteRegister+0x38>
 8000dd8:	2300      	movs	r3, #0
 8000dda:	e000      	b.n	8000dde <WriteRegister+0x3a>

  return true;
 8000ddc:	2301      	movs	r3, #1
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	3710      	adds	r7, #16
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	200010fc 	.word	0x200010fc

08000dec <B2D>:

static uint8_t B2D(uint8_t bcd)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b083      	sub	sp, #12
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	4603      	mov	r3, r0
 8000df4:	71fb      	strb	r3, [r7, #7]
  return (bcd >> 4) * 10 + (bcd & 0x0F);
 8000df6:	79fb      	ldrb	r3, [r7, #7]
 8000df8:	091b      	lsrs	r3, r3, #4
 8000dfa:	b2db      	uxtb	r3, r3
 8000dfc:	461a      	mov	r2, r3
 8000dfe:	0092      	lsls	r2, r2, #2
 8000e00:	4413      	add	r3, r2
 8000e02:	005b      	lsls	r3, r3, #1
 8000e04:	b2da      	uxtb	r2, r3
 8000e06:	79fb      	ldrb	r3, [r7, #7]
 8000e08:	f003 030f 	and.w	r3, r3, #15
 8000e0c:	b2db      	uxtb	r3, r3
 8000e0e:	4413      	add	r3, r2
 8000e10:	b2db      	uxtb	r3, r3
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	370c      	adds	r7, #12
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bc80      	pop	{r7}
 8000e1a:	4770      	bx	lr

08000e1c <D2B>:

static uint8_t D2B(uint8_t decimal)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	4603      	mov	r3, r0
 8000e24:	71fb      	strb	r3, [r7, #7]
  return (((decimal / 10) << 4) | (decimal % 10));
 8000e26:	79fb      	ldrb	r3, [r7, #7]
 8000e28:	4a0d      	ldr	r2, [pc, #52]	; (8000e60 <D2B+0x44>)
 8000e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8000e2e:	08db      	lsrs	r3, r3, #3
 8000e30:	b2db      	uxtb	r3, r3
 8000e32:	011b      	lsls	r3, r3, #4
 8000e34:	b258      	sxtb	r0, r3
 8000e36:	79fa      	ldrb	r2, [r7, #7]
 8000e38:	4b09      	ldr	r3, [pc, #36]	; (8000e60 <D2B+0x44>)
 8000e3a:	fba3 1302 	umull	r1, r3, r3, r2
 8000e3e:	08d9      	lsrs	r1, r3, #3
 8000e40:	460b      	mov	r3, r1
 8000e42:	009b      	lsls	r3, r3, #2
 8000e44:	440b      	add	r3, r1
 8000e46:	005b      	lsls	r3, r3, #1
 8000e48:	1ad3      	subs	r3, r2, r3
 8000e4a:	b2db      	uxtb	r3, r3
 8000e4c:	b25b      	sxtb	r3, r3
 8000e4e:	4303      	orrs	r3, r0
 8000e50:	b25b      	sxtb	r3, r3
 8000e52:	b2db      	uxtb	r3, r3
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	370c      	adds	r7, #12
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bc80      	pop	{r7}
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	cccccccd 	.word	0xcccccccd

08000e64 <initLora>:
static uint16_t oldPos = 0, newPos = 0;
static uint16_t head = 0, tail = 0;
uint8_t isOK = 0;

void initLora(UART_HandleTypeDef *huart, DMA_HandleTypeDef *hdma)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
 8000e6c:	6039      	str	r1, [r7, #0]
	__LORA_UART = huart;
 8000e6e:	4a06      	ldr	r2, [pc, #24]	; (8000e88 <initLora+0x24>)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	6013      	str	r3, [r2, #0]
	__LORA_DMA_UART = hdma;
 8000e74:	4a05      	ldr	r2, [pc, #20]	; (8000e8c <initLora+0x28>)
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	6013      	str	r3, [r2, #0]
	enableReceiveDMAtoIdle_LORA();
 8000e7a:	f000 f817 	bl	8000eac <enableReceiveDMAtoIdle_LORA>
}
 8000e7e:	bf00      	nop
 8000e80:	3708      	adds	r7, #8
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	20001100 	.word	0x20001100
 8000e8c:	20001104 	.word	0x20001104

08000e90 <initmyLora>:

void initmyLora(Station_t *myStation)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
	__MY_STATION = myStation;
 8000e98:	4a03      	ldr	r2, [pc, #12]	; (8000ea8 <initmyLora+0x18>)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	6013      	str	r3, [r2, #0]
}
 8000e9e:	bf00      	nop
 8000ea0:	370c      	adds	r7, #12
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bc80      	pop	{r7}
 8000ea6:	4770      	bx	lr
 8000ea8:	20001108 	.word	0x20001108

08000eac <enableReceiveDMAtoIdle_LORA>:
void enableReceiveDMAtoIdle_LORA(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
	  HAL_UARTEx_ReceiveToIdle_DMA(__LORA_UART, LoraRxbuff, LORARXBUFF_MAXLEN);
 8000eb0:	4b09      	ldr	r3, [pc, #36]	; (8000ed8 <enableReceiveDMAtoIdle_LORA+0x2c>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	2280      	movs	r2, #128	; 0x80
 8000eb6:	4909      	ldr	r1, [pc, #36]	; (8000edc <enableReceiveDMAtoIdle_LORA+0x30>)
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f004 fe6a 	bl	8005b92 <HAL_UARTEx_ReceiveToIdle_DMA>
	  __HAL_DMA_DISABLE_IT(__LORA_DMA_UART,DMA_IT_HT);
 8000ebe:	4b08      	ldr	r3, [pc, #32]	; (8000ee0 <enableReceiveDMAtoIdle_LORA+0x34>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	4b06      	ldr	r3, [pc, #24]	; (8000ee0 <enableReceiveDMAtoIdle_LORA+0x34>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f022 0204 	bic.w	r2, r2, #4
 8000ed0:	601a      	str	r2, [r3, #0]
}
 8000ed2:	bf00      	nop
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	20001100 	.word	0x20001100
 8000edc:	2000110c 	.word	0x2000110c
 8000ee0:	20001104 	.word	0x20001104

08000ee4 <Lora_callback>:

void Lora_callback(uint16_t Size)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	4603      	mov	r3, r0
 8000eec:	80fb      	strh	r3, [r7, #6]
	oldPos = newPos;  // Update the last position before copying new data
 8000eee:	4b35      	ldr	r3, [pc, #212]	; (8000fc4 <Lora_callback+0xe0>)
 8000ef0:	881a      	ldrh	r2, [r3, #0]
 8000ef2:	4b35      	ldr	r3, [pc, #212]	; (8000fc8 <Lora_callback+0xe4>)
 8000ef4:	801a      	strh	r2, [r3, #0]

	/* If the data in large and it is about to exceed the buffer size, we have to route it to the start of the buffer
	 * This is to maintain the circular buffer
	 * The old data in the main buffer will be overlapped
	 */
	if (oldPos+Size > LORABUFF_MAXLEN)  // If the current position + new data size is greater than the main buffer
 8000ef6:	4b34      	ldr	r3, [pc, #208]	; (8000fc8 <Lora_callback+0xe4>)
 8000ef8:	881b      	ldrh	r3, [r3, #0]
 8000efa:	461a      	mov	r2, r3
 8000efc:	88fb      	ldrh	r3, [r7, #6]
 8000efe:	4413      	add	r3, r2
 8000f00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000f04:	dd22      	ble.n	8000f4c <Lora_callback+0x68>
	{
		uint16_t datatocopy = LORABUFF_MAXLEN-oldPos;  // find out how much space is left in the main buffer
 8000f06:	4b30      	ldr	r3, [pc, #192]	; (8000fc8 <Lora_callback+0xe4>)
 8000f08:	881b      	ldrh	r3, [r3, #0]
 8000f0a:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8000f0e:	81fb      	strh	r3, [r7, #14]
		memcpy ((uint8_t *)Lorabuff+oldPos, (uint8_t *)LoraRxbuff, datatocopy);  // copy data in that remaining space
 8000f10:	4b2d      	ldr	r3, [pc, #180]	; (8000fc8 <Lora_callback+0xe4>)
 8000f12:	881b      	ldrh	r3, [r3, #0]
 8000f14:	461a      	mov	r2, r3
 8000f16:	4b2d      	ldr	r3, [pc, #180]	; (8000fcc <Lora_callback+0xe8>)
 8000f18:	4413      	add	r3, r2
 8000f1a:	89fa      	ldrh	r2, [r7, #14]
 8000f1c:	492c      	ldr	r1, [pc, #176]	; (8000fd0 <Lora_callback+0xec>)
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f005 fdee 	bl	8006b00 <memcpy>

		oldPos = 0;  // point to the start of the buffer
 8000f24:	4b28      	ldr	r3, [pc, #160]	; (8000fc8 <Lora_callback+0xe4>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	801a      	strh	r2, [r3, #0]
		memcpy ((uint8_t *)Lorabuff, (uint8_t *)LoraRxbuff+datatocopy, (Size-datatocopy));  // copy the remaining data
 8000f2a:	89fb      	ldrh	r3, [r7, #14]
 8000f2c:	4a28      	ldr	r2, [pc, #160]	; (8000fd0 <Lora_callback+0xec>)
 8000f2e:	1899      	adds	r1, r3, r2
 8000f30:	88fa      	ldrh	r2, [r7, #6]
 8000f32:	89fb      	ldrh	r3, [r7, #14]
 8000f34:	1ad3      	subs	r3, r2, r3
 8000f36:	461a      	mov	r2, r3
 8000f38:	4824      	ldr	r0, [pc, #144]	; (8000fcc <Lora_callback+0xe8>)
 8000f3a:	f005 fde1 	bl	8006b00 <memcpy>
		newPos = (Size-datatocopy);  // update the position
 8000f3e:	88fa      	ldrh	r2, [r7, #6]
 8000f40:	89fb      	ldrh	r3, [r7, #14]
 8000f42:	1ad3      	subs	r3, r2, r3
 8000f44:	b29a      	uxth	r2, r3
 8000f46:	4b1f      	ldr	r3, [pc, #124]	; (8000fc4 <Lora_callback+0xe0>)
 8000f48:	801a      	strh	r2, [r3, #0]
 8000f4a:	e010      	b.n	8000f6e <Lora_callback+0x8a>
	/* if the current position + new data size is less than the main buffer
	 * we will simply copy the data into the buffer and update the position
	 */
	else
	{
		memcpy ((uint8_t *)Lorabuff+oldPos, (uint8_t *)LoraRxbuff, Size);
 8000f4c:	4b1e      	ldr	r3, [pc, #120]	; (8000fc8 <Lora_callback+0xe4>)
 8000f4e:	881b      	ldrh	r3, [r3, #0]
 8000f50:	461a      	mov	r2, r3
 8000f52:	4b1e      	ldr	r3, [pc, #120]	; (8000fcc <Lora_callback+0xe8>)
 8000f54:	4413      	add	r3, r2
 8000f56:	88fa      	ldrh	r2, [r7, #6]
 8000f58:	491d      	ldr	r1, [pc, #116]	; (8000fd0 <Lora_callback+0xec>)
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f005 fdd0 	bl	8006b00 <memcpy>
		newPos = Size+oldPos;
 8000f60:	4b19      	ldr	r3, [pc, #100]	; (8000fc8 <Lora_callback+0xe4>)
 8000f62:	881a      	ldrh	r2, [r3, #0]
 8000f64:	88fb      	ldrh	r3, [r7, #6]
 8000f66:	4413      	add	r3, r2
 8000f68:	b29a      	uxth	r2, r3
 8000f6a:	4b16      	ldr	r3, [pc, #88]	; (8000fc4 <Lora_callback+0xe0>)
 8000f6c:	801a      	strh	r2, [r3, #0]

	/* Update the position of the Head
	 * If the current position + new size is less then the buffer size, Head will update normally
	 * Or else the head will be at the new position from the beginning
	 */
	if (head + Size < LORABUFF_MAXLEN ) head = head + Size;
 8000f6e:	4b19      	ldr	r3, [pc, #100]	; (8000fd4 <Lora_callback+0xf0>)
 8000f70:	881b      	ldrh	r3, [r3, #0]
 8000f72:	461a      	mov	r2, r3
 8000f74:	88fb      	ldrh	r3, [r7, #6]
 8000f76:	4413      	add	r3, r2
 8000f78:	2bff      	cmp	r3, #255	; 0xff
 8000f7a:	dc07      	bgt.n	8000f8c <Lora_callback+0xa8>
 8000f7c:	4b15      	ldr	r3, [pc, #84]	; (8000fd4 <Lora_callback+0xf0>)
 8000f7e:	881a      	ldrh	r2, [r3, #0]
 8000f80:	88fb      	ldrh	r3, [r7, #6]
 8000f82:	4413      	add	r3, r2
 8000f84:	b29a      	uxth	r2, r3
 8000f86:	4b13      	ldr	r3, [pc, #76]	; (8000fd4 <Lora_callback+0xf0>)
 8000f88:	801a      	strh	r2, [r3, #0]
 8000f8a:	e009      	b.n	8000fa0 <Lora_callback+0xbc>
	else head = head + Size - LORABUFF_MAXLEN;
 8000f8c:	4b11      	ldr	r3, [pc, #68]	; (8000fd4 <Lora_callback+0xf0>)
 8000f8e:	881a      	ldrh	r2, [r3, #0]
 8000f90:	88fb      	ldrh	r3, [r7, #6]
 8000f92:	4413      	add	r3, r2
 8000f94:	b29b      	uxth	r3, r3
 8000f96:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000f9a:	b29a      	uxth	r2, r3
 8000f9c:	4b0d      	ldr	r3, [pc, #52]	; (8000fd4 <Lora_callback+0xf0>)
 8000f9e:	801a      	strh	r2, [r3, #0]

	/* start the DMA again */
	enableReceiveDMAtoIdle_LORA();
 8000fa0:	f7ff ff84 	bl	8000eac <enableReceiveDMAtoIdle_LORA>

	//Processing data
	if (isWordinBuff(LoraRxbuff, Size, (uint8_t*)"OK")) {
 8000fa4:	88fb      	ldrh	r3, [r7, #6]
 8000fa6:	4a0c      	ldr	r2, [pc, #48]	; (8000fd8 <Lora_callback+0xf4>)
 8000fa8:	4619      	mov	r1, r3
 8000faa:	4809      	ldr	r0, [pc, #36]	; (8000fd0 <Lora_callback+0xec>)
 8000fac:	f000 f97e 	bl	80012ac <isWordinBuff>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d002      	beq.n	8000fbc <Lora_callback+0xd8>
		isOK = 1;
 8000fb6:	4b09      	ldr	r3, [pc, #36]	; (8000fdc <Lora_callback+0xf8>)
 8000fb8:	2201      	movs	r2, #1
 8000fba:	701a      	strb	r2, [r3, #0]
	}

}
 8000fbc:	bf00      	nop
 8000fbe:	3710      	adds	r7, #16
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	2000128e 	.word	0x2000128e
 8000fc8:	2000128c 	.word	0x2000128c
 8000fcc:	2000118c 	.word	0x2000118c
 8000fd0:	2000110c 	.word	0x2000110c
 8000fd4:	20001290 	.word	0x20001290
 8000fd8:	080083f4 	.word	0x080083f4
 8000fdc:	20001292 	.word	0x20001292

08000fe0 <init_MQTT>:

uint8_t MQTT_Txbuff [MQTT_TXBUFF_SIZE];


void init_MQTT(SIM_t *SIM)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
	__MY_SIM = SIM;
 8000fe8:	4a03      	ldr	r2, [pc, #12]	; (8000ff8 <init_MQTT+0x18>)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6013      	str	r3, [r2, #0]
}
 8000fee:	bf00      	nop
 8000ff0:	370c      	adds	r7, #12
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bc80      	pop	{r7}
 8000ff6:	4770      	bx	lr
 8000ff8:	20001294 	.word	0x20001294

08000ffc <getContent>:

}


static uint8_t getContent(content_t contentType, uint8_t *databuffer, uint16_t datalen, uint8_t *getbuffer, uint16_t contentlen)
{
 8000ffc:	b5b0      	push	{r4, r5, r7, lr}
 8000ffe:	b092      	sub	sp, #72	; 0x48
 8001000:	af02      	add	r7, sp, #8
 8001002:	60b9      	str	r1, [r7, #8]
 8001004:	607b      	str	r3, [r7, #4]
 8001006:	4603      	mov	r3, r0
 8001008:	73fb      	strb	r3, [r7, #15]
 800100a:	4613      	mov	r3, r2
 800100c:	81bb      	strh	r3, [r7, #12]
	uint16_t gotcontent_len = 0;
 800100e:	2300      	movs	r3, #0
 8001010:	87fb      	strh	r3, [r7, #62]	; 0x3e

	uint8_t *currentPOS ;
	uint16_t databuffer_Remainlen = datalen;
 8001012:	89bb      	ldrh	r3, [r7, #12]
 8001014:	86fb      	strh	r3, [r7, #54]	; 0x36

	uint16_t subcontent_len;
	uint8_t subContentlen_buff[10];
	uint8_t contentsignature[20];
	if (contentType == CONTENT_PAYLOAD) {
 8001016:	7bfb      	ldrb	r3, [r7, #15]
 8001018:	2b01      	cmp	r3, #1
 800101a:	d109      	bne.n	8001030 <getContent+0x34>
		strcpy( (char*)contentsignature, "+CMQTTRXPAYLOAD:");
 800101c:	f107 0314 	add.w	r3, r7, #20
 8001020:	4a36      	ldr	r2, [pc, #216]	; (80010fc <getContent+0x100>)
 8001022:	461c      	mov	r4, r3
 8001024:	4615      	mov	r5, r2
 8001026:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001028:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800102a:	682b      	ldr	r3, [r5, #0]
 800102c:	7023      	strb	r3, [r4, #0]
 800102e:	e05b      	b.n	80010e8 <getContent+0xec>
 	}
	else if (contentType == CONTENT_TOPIC) {
 8001030:	7bfb      	ldrb	r3, [r7, #15]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d10b      	bne.n	800104e <getContent+0x52>
		strcpy( (char*)contentsignature, "+CMQTTRXTOPIC:");
 8001036:	f107 0314 	add.w	r3, r7, #20
 800103a:	4a31      	ldr	r2, [pc, #196]	; (8001100 <getContent+0x104>)
 800103c:	461c      	mov	r4, r3
 800103e:	4613      	mov	r3, r2
 8001040:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001042:	c407      	stmia	r4!, {r0, r1, r2}
 8001044:	8023      	strh	r3, [r4, #0]
 8001046:	3402      	adds	r4, #2
 8001048:	0c1b      	lsrs	r3, r3, #16
 800104a:	7023      	strb	r3, [r4, #0]
 800104c:	e04c      	b.n	80010e8 <getContent+0xec>
	}
	else return 0;
 800104e:	2300      	movs	r3, #0
 8001050:	e050      	b.n	80010f4 <getContent+0xf8>

	while ( gotcontent_len < contentlen )
	{
		currentPOS = isWordinBuff(databuffer, databuffer_Remainlen, contentsignature);
 8001052:	f107 0214 	add.w	r2, r7, #20
 8001056:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001058:	4619      	mov	r1, r3
 800105a:	68b8      	ldr	r0, [r7, #8]
 800105c:	f000 f926 	bl	80012ac <isWordinBuff>
 8001060:	63b8      	str	r0, [r7, #56]	; 0x38
		if (currentPOS == NULL)		return  0;
 8001062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001064:	2b00      	cmp	r3, #0
 8001066:	d101      	bne.n	800106c <getContent+0x70>
 8001068:	2300      	movs	r3, #0
 800106a:	e043      	b.n	80010f4 <getContent+0xf8>
		databuffer_Remainlen = getRemainsize( currentPOS, databuffer, databuffer_Remainlen );
 800106c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800106e:	461a      	mov	r2, r3
 8001070:	68b9      	ldr	r1, [r7, #8]
 8001072:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001074:	f000 f999 	bl	80013aa <getRemainsize>
 8001078:	4603      	mov	r3, r0
 800107a:	86fb      	strh	r3, [r7, #54]	; 0x36

		// Get subcontent length
		getBetween( (uint8_t*)",", (uint8_t*) "\r", currentPOS, databuffer_Remainlen, subContentlen_buff);
 800107c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800107e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001082:	9300      	str	r3, [sp, #0]
 8001084:	4613      	mov	r3, r2
 8001086:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001088:	491e      	ldr	r1, [pc, #120]	; (8001104 <getContent+0x108>)
 800108a:	481f      	ldr	r0, [pc, #124]	; (8001108 <getContent+0x10c>)
 800108c:	f000 f93a 	bl	8001304 <getBetween>
		subcontent_len = atoi( (char*)subContentlen_buff );
 8001090:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001094:	4618      	mov	r0, r3
 8001096:	f005 fce5 	bl	8006a64 <atoi>
 800109a:	4603      	mov	r3, r0
 800109c:	867b      	strh	r3, [r7, #50]	; 0x32

		// Get subcontent
		while ( *currentPOS != '\n'){
 800109e:	e002      	b.n	80010a6 <getContent+0xaa>
			currentPOS++;
 80010a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80010a2:	3301      	adds	r3, #1
 80010a4:	63bb      	str	r3, [r7, #56]	; 0x38
		while ( *currentPOS != '\n'){
 80010a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	2b0a      	cmp	r3, #10
 80010ac:	d1f8      	bne.n	80010a0 <getContent+0xa4>
		}
		currentPOS++;
 80010ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80010b0:	3301      	adds	r3, #1
 80010b2:	63bb      	str	r3, [r7, #56]	; 0x38
		for (uint16_t i = 0; i< subcontent_len; i++)
 80010b4:	2300      	movs	r3, #0
 80010b6:	86bb      	strh	r3, [r7, #52]	; 0x34
 80010b8:	e00d      	b.n	80010d6 <getContent+0xda>
		{
			getbuffer[gotcontent_len++] = currentPOS[i];
 80010ba:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80010bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80010be:	441a      	add	r2, r3
 80010c0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80010c2:	1c59      	adds	r1, r3, #1
 80010c4:	87f9      	strh	r1, [r7, #62]	; 0x3e
 80010c6:	4619      	mov	r1, r3
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	440b      	add	r3, r1
 80010cc:	7812      	ldrb	r2, [r2, #0]
 80010ce:	701a      	strb	r2, [r3, #0]
		for (uint16_t i = 0; i< subcontent_len; i++)
 80010d0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80010d2:	3301      	adds	r3, #1
 80010d4:	86bb      	strh	r3, [r7, #52]	; 0x34
 80010d6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80010d8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80010da:	429a      	cmp	r2, r3
 80010dc:	d3ed      	bcc.n	80010ba <getContent+0xbe>
		}

		// Update databuffer
		databuffer = ++currentPOS;
 80010de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80010e0:	3301      	adds	r3, #1
 80010e2:	63bb      	str	r3, [r7, #56]	; 0x38
 80010e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80010e6:	60bb      	str	r3, [r7, #8]
	while ( gotcontent_len < contentlen )
 80010e8:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80010ea:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80010ee:	429a      	cmp	r2, r3
 80010f0:	d3af      	bcc.n	8001052 <getContent+0x56>
	}
	return 1;
 80010f2:	2301      	movs	r3, #1
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	3740      	adds	r7, #64	; 0x40
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bdb0      	pop	{r4, r5, r7, pc}
 80010fc:	08008410 	.word	0x08008410
 8001100:	08008424 	.word	0x08008424
 8001104:	08008434 	.word	0x08008434
 8001108:	08008438 	.word	0x08008438

0800110c <MQTT_receiveGetTopicandPayloadLength>:

uint8_t MQTT_receiveGetTopicandPayloadLength( uint8_t *MQTTbuff, uint16_t buffsize)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b08c      	sub	sp, #48	; 0x30
 8001110:	af02      	add	r7, sp, #8
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	460b      	mov	r3, r1
 8001116:	807b      	strh	r3, [r7, #2]
	uint8_t topiclen_buff[10];
	uint8_t payloadlen_buff[10];
//	Serial_log_string("MQTTbuffer: ");
//	Serial_log_buffer(MQTTbuff, buffsize);
//	Serial_log_string(" ");
	uint8_t * currentPos = isWordinBuff(MQTTbuff, buffsize, (uint8_t*)"+CMQTTRXSTART:");
 8001118:	887b      	ldrh	r3, [r7, #2]
 800111a:	4a23      	ldr	r2, [pc, #140]	; (80011a8 <MQTT_receiveGetTopicandPayloadLength+0x9c>)
 800111c:	4619      	mov	r1, r3
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	f000 f8c4 	bl	80012ac <isWordinBuff>
 8001124:	6278      	str	r0, [r7, #36]	; 0x24

	uint16_t remainlen = getRemainsize(currentPos, MQTTbuff, buffsize);
 8001126:	887b      	ldrh	r3, [r7, #2]
 8001128:	461a      	mov	r2, r3
 800112a:	6879      	ldr	r1, [r7, #4]
 800112c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800112e:	f000 f93c 	bl	80013aa <getRemainsize>
 8001132:	4603      	mov	r3, r0
 8001134:	847b      	strh	r3, [r7, #34]	; 0x22

	getBetween( (uint8_t*)",", (uint8_t*)",", currentPos, remainlen, topiclen_buff);
 8001136:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001138:	f107 0318 	add.w	r3, r7, #24
 800113c:	9300      	str	r3, [sp, #0]
 800113e:	4613      	mov	r3, r2
 8001140:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001142:	491a      	ldr	r1, [pc, #104]	; (80011ac <MQTT_receiveGetTopicandPayloadLength+0xa0>)
 8001144:	4819      	ldr	r0, [pc, #100]	; (80011ac <MQTT_receiveGetTopicandPayloadLength+0xa0>)
 8001146:	f000 f8dd 	bl	8001304 <getBetween>
	__MY_SIM->mqttReceive.topicLen = atoi( (char*)topiclen_buff );
 800114a:	f107 0318 	add.w	r3, r7, #24
 800114e:	4618      	mov	r0, r3
 8001150:	f005 fc88 	bl	8006a64 <atoi>
 8001154:	4602      	mov	r2, r0
 8001156:	4b16      	ldr	r3, [pc, #88]	; (80011b0 <MQTT_receiveGetTopicandPayloadLength+0xa4>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	b292      	uxth	r2, r2
 800115c:	f8a3 24ba 	strh.w	r2, [r3, #1210]	; 0x4ba

	currentPos = isWordinBuff(currentPos, remainlen,(uint8_t*)",");
 8001160:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001162:	4a12      	ldr	r2, [pc, #72]	; (80011ac <MQTT_receiveGetTopicandPayloadLength+0xa0>)
 8001164:	4619      	mov	r1, r3
 8001166:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001168:	f000 f8a0 	bl	80012ac <isWordinBuff>
 800116c:	6278      	str	r0, [r7, #36]	; 0x24
	currentPos ++;
 800116e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001170:	3301      	adds	r3, #1
 8001172:	627b      	str	r3, [r7, #36]	; 0x24

	getBetween( (uint8_t*)",", (uint8_t*)"\r", currentPos, remainlen, payloadlen_buff);
 8001174:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001176:	f107 030c 	add.w	r3, r7, #12
 800117a:	9300      	str	r3, [sp, #0]
 800117c:	4613      	mov	r3, r2
 800117e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001180:	490c      	ldr	r1, [pc, #48]	; (80011b4 <MQTT_receiveGetTopicandPayloadLength+0xa8>)
 8001182:	480a      	ldr	r0, [pc, #40]	; (80011ac <MQTT_receiveGetTopicandPayloadLength+0xa0>)
 8001184:	f000 f8be 	bl	8001304 <getBetween>
	__MY_SIM->mqttReceive.payloadLen = atoi( (char*)payloadlen_buff );
 8001188:	f107 030c 	add.w	r3, r7, #12
 800118c:	4618      	mov	r0, r3
 800118e:	f005 fc69 	bl	8006a64 <atoi>
 8001192:	4602      	mov	r2, r0
 8001194:	4b06      	ldr	r3, [pc, #24]	; (80011b0 <MQTT_receiveGetTopicandPayloadLength+0xa4>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	b292      	uxth	r2, r2
 800119a:	f8a3 2438 	strh.w	r2, [r3, #1080]	; 0x438

	return 1;
 800119e:	2301      	movs	r3, #1
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	3728      	adds	r7, #40	; 0x28
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	0800843c 	.word	0x0800843c
 80011ac:	08008438 	.word	0x08008438
 80011b0:	20001294 	.word	0x20001294
 80011b4:	08008434 	.word	0x08008434

080011b8 <MQTT_receiveGetTopic>:

uint8_t MQTT_receiveGetTopic (uint8_t *MQTTbuff,uint16_t buffsize)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af02      	add	r7, sp, #8
 80011be:	6078      	str	r0, [r7, #4]
 80011c0:	460b      	mov	r3, r1
 80011c2:	807b      	strh	r3, [r7, #2]
	return getContent(CONTENT_TOPIC, MQTTbuff, buffsize, __MY_SIM->mqttReceive.topic, __MY_SIM->mqttReceive.topicLen);
 80011c4:	4b09      	ldr	r3, [pc, #36]	; (80011ec <MQTT_receiveGetTopic+0x34>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f203 413a 	addw	r1, r3, #1082	; 0x43a
 80011cc:	4b07      	ldr	r3, [pc, #28]	; (80011ec <MQTT_receiveGetTopic+0x34>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f8b3 34ba 	ldrh.w	r3, [r3, #1210]	; 0x4ba
 80011d4:	887a      	ldrh	r2, [r7, #2]
 80011d6:	9300      	str	r3, [sp, #0]
 80011d8:	460b      	mov	r3, r1
 80011da:	6879      	ldr	r1, [r7, #4]
 80011dc:	2000      	movs	r0, #0
 80011de:	f7ff ff0d 	bl	8000ffc <getContent>
 80011e2:	4603      	mov	r3, r0
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	3708      	adds	r7, #8
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	20001294 	.word	0x20001294

080011f0 <MQTT_receiveGetPayload>:

uint8_t MQTT_receiveGetPayload (uint8_t *MQTTbuff,uint16_t buffsize)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af02      	add	r7, sp, #8
 80011f6:	6078      	str	r0, [r7, #4]
 80011f8:	460b      	mov	r3, r1
 80011fa:	807b      	strh	r3, [r7, #2]
	return getContent(CONTENT_PAYLOAD, MQTTbuff, buffsize, __MY_SIM->mqttReceive.payload, __MY_SIM->mqttReceive.payloadLen);
 80011fc:	4b09      	ldr	r3, [pc, #36]	; (8001224 <MQTT_receiveGetPayload+0x34>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8001204:	4b07      	ldr	r3, [pc, #28]	; (8001224 <MQTT_receiveGetPayload+0x34>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f8b3 3438 	ldrh.w	r3, [r3, #1080]	; 0x438
 800120c:	887a      	ldrh	r2, [r7, #2]
 800120e:	9300      	str	r3, [sp, #0]
 8001210:	460b      	mov	r3, r1
 8001212:	6879      	ldr	r1, [r7, #4]
 8001214:	2001      	movs	r0, #1
 8001216:	f7ff fef1 	bl	8000ffc <getContent>
 800121a:	4603      	mov	r3, r0
}
 800121c:	4618      	mov	r0, r3
 800121e:	3708      	adds	r7, #8
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	20001294 	.word	0x20001294

08001228 <MQTT_receive>:
uint8_t MQTT_receive(uint8_t *MQTTbuff,uint16_t buffsize)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
 8001230:	460b      	mov	r3, r1
 8001232:	807b      	strh	r3, [r7, #2]
	if ( !MQTT_receiveGetTopicandPayloadLength(MQTTbuff, buffsize) ) return 0;
 8001234:	887b      	ldrh	r3, [r7, #2]
 8001236:	4619      	mov	r1, r3
 8001238:	6878      	ldr	r0, [r7, #4]
 800123a:	f7ff ff67 	bl	800110c <MQTT_receiveGetTopicandPayloadLength>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d101      	bne.n	8001248 <MQTT_receive+0x20>
 8001244:	2300      	movs	r3, #0
 8001246:	e02b      	b.n	80012a0 <MQTT_receive+0x78>

	memset( __MY_SIM->mqttReceive.payload, 0, MAX_PAYLOAD_LEN );
 8001248:	4b17      	ldr	r3, [pc, #92]	; (80012a8 <MQTT_receive+0x80>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	3338      	adds	r3, #56	; 0x38
 800124e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001252:	2100      	movs	r1, #0
 8001254:	4618      	mov	r0, r3
 8001256:	f005 fc61 	bl	8006b1c <memset>
	memset( __MY_SIM->mqttReceive.topic, 0, MAX_TOPIC_LEN );
 800125a:	4b13      	ldr	r3, [pc, #76]	; (80012a8 <MQTT_receive+0x80>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f203 433a 	addw	r3, r3, #1082	; 0x43a
 8001262:	2280      	movs	r2, #128	; 0x80
 8001264:	2100      	movs	r1, #0
 8001266:	4618      	mov	r0, r3
 8001268:	f005 fc58 	bl	8006b1c <memset>

	if (! MQTT_receiveGetTopic(MQTTbuff, buffsize))		return 0;
 800126c:	887b      	ldrh	r3, [r7, #2]
 800126e:	4619      	mov	r1, r3
 8001270:	6878      	ldr	r0, [r7, #4]
 8001272:	f7ff ffa1 	bl	80011b8 <MQTT_receiveGetTopic>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d101      	bne.n	8001280 <MQTT_receive+0x58>
 800127c:	2300      	movs	r3, #0
 800127e:	e00f      	b.n	80012a0 <MQTT_receive+0x78>

	if (! MQTT_receiveGetPayload(MQTTbuff, buffsize))	return 0;
 8001280:	887b      	ldrh	r3, [r7, #2]
 8001282:	4619      	mov	r1, r3
 8001284:	6878      	ldr	r0, [r7, #4]
 8001286:	f7ff ffb3 	bl	80011f0 <MQTT_receiveGetPayload>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d101      	bne.n	8001294 <MQTT_receive+0x6c>
 8001290:	2300      	movs	r3, #0
 8001292:	e005      	b.n	80012a0 <MQTT_receive+0x78>

	__MY_SIM->mqttReceive.newEvent = 1;
 8001294:	4b04      	ldr	r3, [pc, #16]	; (80012a8 <MQTT_receive+0x80>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	2201      	movs	r2, #1
 800129a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	return 1;
 800129e:	2301      	movs	r3, #1
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	3708      	adds	r7, #8
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	20001294 	.word	0x20001294

080012ac <isWordinBuff>:
#include "String_process.h"
#include <string.h>


uint8_t* isWordinBuff(uint8_t *databuff,uint16_t buff_size, uint8_t *word)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b086      	sub	sp, #24
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	60f8      	str	r0, [r7, #12]
 80012b4:	460b      	mov	r3, r1
 80012b6:	607a      	str	r2, [r7, #4]
 80012b8:	817b      	strh	r3, [r7, #10]
	uint8_t wordlen = strlen((char*)word);
 80012ba:	6878      	ldr	r0, [r7, #4]
 80012bc:	f7fe ff46 	bl	800014c <strlen>
 80012c0:	4603      	mov	r3, r0
 80012c2:	757b      	strb	r3, [r7, #21]
	for (uint16_t i = 0; i< buff_size - wordlen + 1; i++)
 80012c4:	2300      	movs	r3, #0
 80012c6:	82fb      	strh	r3, [r7, #22]
 80012c8:	e011      	b.n	80012ee <isWordinBuff+0x42>
	{
		if (!memcmp(databuff +i,word,wordlen))
 80012ca:	8afb      	ldrh	r3, [r7, #22]
 80012cc:	68fa      	ldr	r2, [r7, #12]
 80012ce:	4413      	add	r3, r2
 80012d0:	7d7a      	ldrb	r2, [r7, #21]
 80012d2:	6879      	ldr	r1, [r7, #4]
 80012d4:	4618      	mov	r0, r3
 80012d6:	f005 fc03 	bl	8006ae0 <memcmp>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d103      	bne.n	80012e8 <isWordinBuff+0x3c>
		{
			return databuff+ i;
 80012e0:	8afb      	ldrh	r3, [r7, #22]
 80012e2:	68fa      	ldr	r2, [r7, #12]
 80012e4:	4413      	add	r3, r2
 80012e6:	e009      	b.n	80012fc <isWordinBuff+0x50>
	for (uint16_t i = 0; i< buff_size - wordlen + 1; i++)
 80012e8:	8afb      	ldrh	r3, [r7, #22]
 80012ea:	3301      	adds	r3, #1
 80012ec:	82fb      	strh	r3, [r7, #22]
 80012ee:	897a      	ldrh	r2, [r7, #10]
 80012f0:	7d7b      	ldrb	r3, [r7, #21]
 80012f2:	1ad2      	subs	r2, r2, r3
 80012f4:	8afb      	ldrh	r3, [r7, #22]
 80012f6:	429a      	cmp	r2, r3
 80012f8:	dae7      	bge.n	80012ca <isWordinBuff+0x1e>
		}
	}
	return NULL;
 80012fa:	2300      	movs	r3, #0
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	3718      	adds	r7, #24
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}

08001304 <getBetween>:

uint16_t getBetween(uint8_t *firstWord,uint8_t *lastWord, uint8_t *buff, uint16_t size, uint8_t *getBuff)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b088      	sub	sp, #32
 8001308:	af00      	add	r7, sp, #0
 800130a:	60f8      	str	r0, [r7, #12]
 800130c:	60b9      	str	r1, [r7, #8]
 800130e:	607a      	str	r2, [r7, #4]
 8001310:	807b      	strh	r3, [r7, #2]
	uint8_t fWlen = strlen((char*)firstWord);
 8001312:	68f8      	ldr	r0, [r7, #12]
 8001314:	f7fe ff1a 	bl	800014c <strlen>
 8001318:	4603      	mov	r3, r0
 800131a:	76bb      	strb	r3, [r7, #26]

	uint8_t *Fp =isWordinBuff(buff, size, firstWord);
 800131c:	887b      	ldrh	r3, [r7, #2]
 800131e:	68fa      	ldr	r2, [r7, #12]
 8001320:	4619      	mov	r1, r3
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f7ff ffc2 	bl	80012ac <isWordinBuff>
 8001328:	61f8      	str	r0, [r7, #28]

	if (Fp == NULL ) return 0;
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d101      	bne.n	8001334 <getBetween+0x30>
 8001330:	2300      	movs	r3, #0
 8001332:	e036      	b.n	80013a2 <getBetween+0x9e>
	Fp += fWlen;
 8001334:	7ebb      	ldrb	r3, [r7, #26]
 8001336:	69fa      	ldr	r2, [r7, #28]
 8001338:	4413      	add	r3, r2
 800133a:	61fb      	str	r3, [r7, #28]
	uint8_t remainSize = getRemainsize(Fp, buff, size);
 800133c:	887b      	ldrh	r3, [r7, #2]
 800133e:	461a      	mov	r2, r3
 8001340:	6879      	ldr	r1, [r7, #4]
 8001342:	69f8      	ldr	r0, [r7, #28]
 8001344:	f000 f831 	bl	80013aa <getRemainsize>
 8001348:	4603      	mov	r3, r0
 800134a:	767b      	strb	r3, [r7, #25]
	uint8_t *Lp = isWordinBuff(Fp, remainSize, lastWord);
 800134c:	7e7b      	ldrb	r3, [r7, #25]
 800134e:	b29b      	uxth	r3, r3
 8001350:	68ba      	ldr	r2, [r7, #8]
 8001352:	4619      	mov	r1, r3
 8001354:	69f8      	ldr	r0, [r7, #28]
 8001356:	f7ff ffa9 	bl	80012ac <isWordinBuff>
 800135a:	6178      	str	r0, [r7, #20]
	if (Lp == NULL || Fp >= Lp) return 0;
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d003      	beq.n	800136a <getBetween+0x66>
 8001362:	69fa      	ldr	r2, [r7, #28]
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	429a      	cmp	r2, r3
 8001368:	d301      	bcc.n	800136e <getBetween+0x6a>
 800136a:	2300      	movs	r3, #0
 800136c:	e019      	b.n	80013a2 <getBetween+0x9e>

	uint8_t getBuffindex =0;
 800136e:	2300      	movs	r3, #0
 8001370:	76fb      	strb	r3, [r7, #27]
	while (Fp != Lp)
 8001372:	e00b      	b.n	800138c <getBetween+0x88>
	{
		getBuff[getBuffindex++] = *Fp;
 8001374:	7efb      	ldrb	r3, [r7, #27]
 8001376:	1c5a      	adds	r2, r3, #1
 8001378:	76fa      	strb	r2, [r7, #27]
 800137a:	461a      	mov	r2, r3
 800137c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800137e:	4413      	add	r3, r2
 8001380:	69fa      	ldr	r2, [r7, #28]
 8001382:	7812      	ldrb	r2, [r2, #0]
 8001384:	701a      	strb	r2, [r3, #0]
		Fp ++;
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	3301      	adds	r3, #1
 800138a:	61fb      	str	r3, [r7, #28]
	while (Fp != Lp)
 800138c:	69fa      	ldr	r2, [r7, #28]
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	429a      	cmp	r2, r3
 8001392:	d1ef      	bne.n	8001374 <getBetween+0x70>
	}
	getBuff[getBuffindex]= '\0';
 8001394:	7efb      	ldrb	r3, [r7, #27]
 8001396:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001398:	4413      	add	r3, r2
 800139a:	2200      	movs	r2, #0
 800139c:	701a      	strb	r2, [r3, #0]
	return getBuffindex;           // length of getBuff
 800139e:	7efb      	ldrb	r3, [r7, #27]
 80013a0:	b29b      	uxth	r3, r3
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3720      	adds	r7, #32
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}

080013aa <getRemainsize>:

uint16_t getRemainsize(uint8_t *Remainbuff, uint8_t *Originbuff, uint16_t originSize)
{
 80013aa:	b480      	push	{r7}
 80013ac:	b085      	sub	sp, #20
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	60f8      	str	r0, [r7, #12]
 80013b2:	60b9      	str	r1, [r7, #8]
 80013b4:	4613      	mov	r3, r2
 80013b6:	80fb      	strh	r3, [r7, #6]
	return originSize-(Remainbuff - Originbuff)/sizeof(uint8_t);
 80013b8:	68fa      	ldr	r2, [r7, #12]
 80013ba:	68bb      	ldr	r3, [r7, #8]
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	b29b      	uxth	r3, r3
 80013c0:	88fa      	ldrh	r2, [r7, #6]
 80013c2:	1ad3      	subs	r3, r2, r3
 80013c4:	b29b      	uxth	r3, r3
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3714      	adds	r7, #20
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bc80      	pop	{r7}
 80013ce:	4770      	bx	lr

080013d0 <initTask>:


static Station_t *__MY_STATION;

void initTask(Station_t *station)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
	__MY_STATION = station;
 80013d8:	4a03      	ldr	r2, [pc, #12]	; (80013e8 <initTask+0x18>)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6013      	str	r3, [r2, #0]
}
 80013de:	bf00      	nop
 80013e0:	370c      	adds	r7, #12
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bc80      	pop	{r7}
 80013e6:	4770      	bx	lr
 80013e8:	20001298 	.word	0x20001298

080013ec <checkTaskflag>:

bool checkTaskflag (Task_t task)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b085      	sub	sp, #20
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	4603      	mov	r3, r0
 80013f4:	71fb      	strb	r3, [r7, #7]
	bool res = false;
 80013f6:	2300      	movs	r3, #0
 80013f8:	73fb      	strb	r3, [r7, #15]
	switch (task) {
 80013fa:	79fb      	ldrb	r3, [r7, #7]
 80013fc:	2b10      	cmp	r3, #16
 80013fe:	f200 80f1 	bhi.w	80015e4 <checkTaskflag+0x1f8>
 8001402:	a201      	add	r2, pc, #4	; (adr r2, 8001408 <checkTaskflag+0x1c>)
 8001404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001408:	0800144d 	.word	0x0800144d
 800140c:	08001465 	.word	0x08001465
 8001410:	080014ad 	.word	0x080014ad
 8001414:	080014c5 	.word	0x080014c5
 8001418:	0800147d 	.word	0x0800147d
 800141c:	08001495 	.word	0x08001495
 8001420:	080014dd 	.word	0x080014dd
 8001424:	080014f5 	.word	0x080014f5
 8001428:	08001525 	.word	0x08001525
 800142c:	0800150d 	.word	0x0800150d
 8001430:	0800153d 	.word	0x0800153d
 8001434:	08001555 	.word	0x08001555
 8001438:	0800156d 	.word	0x0800156d
 800143c:	08001585 	.word	0x08001585
 8001440:	0800159d 	.word	0x0800159d
 8001444:	080015b5 	.word	0x080015b5
 8001448:	080015cd 	.word	0x080015cd
	case TASK_REGISTER:
		res = (bool)__MY_STATION->task.register2server ;
 800144c:	4b69      	ldr	r3, [pc, #420]	; (80015f4 <checkTaskflag+0x208>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	7b1b      	ldrb	r3, [r3, #12]
 8001452:	f003 0301 	and.w	r3, r3, #1
 8001456:	b2db      	uxtb	r3, r3
 8001458:	2b00      	cmp	r3, #0
 800145a:	bf14      	ite	ne
 800145c:	2301      	movne	r3, #1
 800145e:	2300      	moveq	r3, #0
 8001460:	73fb      	strb	r3, [r7, #15]
		break;
 8001462:	e0c0      	b.n	80015e6 <checkTaskflag+0x1fa>
	case TASK_SUBSCRIBE:
		res = (bool)__MY_STATION->task.subscribe;
 8001464:	4b63      	ldr	r3, [pc, #396]	; (80015f4 <checkTaskflag+0x208>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	7b1b      	ldrb	r3, [r3, #12]
 800146a:	f003 0302 	and.w	r3, r3, #2
 800146e:	b2db      	uxtb	r3, r3
 8001470:	2b00      	cmp	r3, #0
 8001472:	bf14      	ite	ne
 8001474:	2301      	movne	r3, #1
 8001476:	2300      	moveq	r3, #0
 8001478:	73fb      	strb	r3, [r7, #15]
		break;
 800147a:	e0b4      	b.n	80015e6 <checkTaskflag+0x1fa>
	case TASK_CTRL_MBA:
		res = (bool)__MY_STATION->task.CtrlMBA;
 800147c:	4b5d      	ldr	r3, [pc, #372]	; (80015f4 <checkTaskflag+0x208>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	7b1b      	ldrb	r3, [r3, #12]
 8001482:	f003 0310 	and.w	r3, r3, #16
 8001486:	b2db      	uxtb	r3, r3
 8001488:	2b00      	cmp	r3, #0
 800148a:	bf14      	ite	ne
 800148c:	2301      	movne	r3, #1
 800148e:	2300      	moveq	r3, #0
 8001490:	73fb      	strb	r3, [r7, #15]
		break;
 8001492:	e0a8      	b.n	80015e6 <checkTaskflag+0x1fa>
	case TASK_CTRL_STEPMOR:
		res = (bool)__MY_STATION->task.CtrlStepmotor;
 8001494:	4b57      	ldr	r3, [pc, #348]	; (80015f4 <checkTaskflag+0x208>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	7b1b      	ldrb	r3, [r3, #12]
 800149a:	f003 0320 	and.w	r3, r3, #32
 800149e:	b2db      	uxtb	r3, r3
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	bf14      	ite	ne
 80014a4:	2301      	movne	r3, #1
 80014a6:	2300      	moveq	r3, #0
 80014a8:	73fb      	strb	r3, [r7, #15]
		break;
 80014aa:	e09c      	b.n	80015e6 <checkTaskflag+0x1fa>
	case TASK_PREPARE_CALIB:
		res = (bool)__MY_STATION->task.PrepareCalib;
 80014ac:	4b51      	ldr	r3, [pc, #324]	; (80015f4 <checkTaskflag+0x208>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	7b1b      	ldrb	r3, [r3, #12]
 80014b2:	f003 0304 	and.w	r3, r3, #4
 80014b6:	b2db      	uxtb	r3, r3
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	bf14      	ite	ne
 80014bc:	2301      	movne	r3, #1
 80014be:	2300      	moveq	r3, #0
 80014c0:	73fb      	strb	r3, [r7, #15]
		break;
 80014c2:	e090      	b.n	80015e6 <checkTaskflag+0x1fa>
	case TASK_START_CALIB:
		res = (bool)__MY_STATION->task.StartCalib;
 80014c4:	4b4b      	ldr	r3, [pc, #300]	; (80015f4 <checkTaskflag+0x208>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	7b1b      	ldrb	r3, [r3, #12]
 80014ca:	f003 0308 	and.w	r3, r3, #8
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	bf14      	ite	ne
 80014d4:	2301      	movne	r3, #1
 80014d6:	2300      	moveq	r3, #0
 80014d8:	73fb      	strb	r3, [r7, #15]
		break;
 80014da:	e084      	b.n	80015e6 <checkTaskflag+0x1fa>
	case TASK_GET_GPS_TIME:
		res = (bool)__MY_STATION->task.getGPStimeflag;
 80014dc:	4b45      	ldr	r3, [pc, #276]	; (80015f4 <checkTaskflag+0x208>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	7b1b      	ldrb	r3, [r3, #12]
 80014e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	bf14      	ite	ne
 80014ec:	2301      	movne	r3, #1
 80014ee:	2300      	moveq	r3, #0
 80014f0:	73fb      	strb	r3, [r7, #15]
		break;
 80014f2:	e078      	b.n	80015e6 <checkTaskflag+0x1fa>
	case TASK_SEND_NWREADY:
		res = (bool)__MY_STATION->task.sendNWready;
 80014f4:	4b3f      	ldr	r3, [pc, #252]	; (80015f4 <checkTaskflag+0x208>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	7b5b      	ldrb	r3, [r3, #13]
 80014fa:	f003 0301 	and.w	r3, r3, #1
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	2b00      	cmp	r3, #0
 8001502:	bf14      	ite	ne
 8001504:	2301      	movne	r3, #1
 8001506:	2300      	moveq	r3, #0
 8001508:	73fb      	strb	r3, [r7, #15]
		break;
 800150a:	e06c      	b.n	80015e6 <checkTaskflag+0x1fa>
	case TASK_SEND_DATACALIB:
		res = (bool)__MY_STATION->task.sendDATACALIB;
 800150c:	4b39      	ldr	r3, [pc, #228]	; (80015f4 <checkTaskflag+0x208>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	7b5b      	ldrb	r3, [r3, #13]
 8001512:	f003 0302 	and.w	r3, r3, #2
 8001516:	b2db      	uxtb	r3, r3
 8001518:	2b00      	cmp	r3, #0
 800151a:	bf14      	ite	ne
 800151c:	2301      	movne	r3, #1
 800151e:	2300      	moveq	r3, #0
 8001520:	73fb      	strb	r3, [r7, #15]
		break;
 8001522:	e060      	b.n	80015e6 <checkTaskflag+0x1fa>
	case TASK_SEND_DATAPERIOD:
		res = (bool)__MY_STATION->task.sendDataPeriod;
 8001524:	4b33      	ldr	r3, [pc, #204]	; (80015f4 <checkTaskflag+0x208>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	7b1b      	ldrb	r3, [r3, #12]
 800152a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800152e:	b2db      	uxtb	r3, r3
 8001530:	2b00      	cmp	r3, #0
 8001532:	bf14      	ite	ne
 8001534:	2301      	movne	r3, #1
 8001536:	2300      	moveq	r3, #0
 8001538:	73fb      	strb	r3, [r7, #15]
		break;
 800153a:	e054      	b.n	80015e6 <checkTaskflag+0x1fa>
	case TASK_SEND_DATAAFTERCALIB:
		res = (bool)__MY_STATION->task.sendDATAafterCALIB;
 800153c:	4b2d      	ldr	r3, [pc, #180]	; (80015f4 <checkTaskflag+0x208>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	7b5b      	ldrb	r3, [r3, #13]
 8001542:	f003 0304 	and.w	r3, r3, #4
 8001546:	b2db      	uxtb	r3, r3
 8001548:	2b00      	cmp	r3, #0
 800154a:	bf14      	ite	ne
 800154c:	2301      	movne	r3, #1
 800154e:	2300      	moveq	r3, #0
 8001550:	73fb      	strb	r3, [r7, #15]
		break;
 8001552:	e048      	b.n	80015e6 <checkTaskflag+0x1fa>
	case TASK_SEND_CTRLMBA:
		res = (bool)__MY_STATION->task.sendcmdCtrlMBA;
 8001554:	4b27      	ldr	r3, [pc, #156]	; (80015f4 <checkTaskflag+0x208>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	7b5b      	ldrb	r3, [r3, #13]
 800155a:	f003 0308 	and.w	r3, r3, #8
 800155e:	b2db      	uxtb	r3, r3
 8001560:	2b00      	cmp	r3, #0
 8001562:	bf14      	ite	ne
 8001564:	2301      	movne	r3, #1
 8001566:	2300      	moveq	r3, #0
 8001568:	73fb      	strb	r3, [r7, #15]
		break;
 800156a:	e03c      	b.n	80015e6 <checkTaskflag+0x1fa>
	case TASK_SEND_CTRLSTEPMOR:
		res = (bool)__MY_STATION->task.sendcmdCtrlStepmotor;
 800156c:	4b21      	ldr	r3, [pc, #132]	; (80015f4 <checkTaskflag+0x208>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	7b5b      	ldrb	r3, [r3, #13]
 8001572:	f003 0310 	and.w	r3, r3, #16
 8001576:	b2db      	uxtb	r3, r3
 8001578:	2b00      	cmp	r3, #0
 800157a:	bf14      	ite	ne
 800157c:	2301      	movne	r3, #1
 800157e:	2300      	moveq	r3, #0
 8001580:	73fb      	strb	r3, [r7, #15]
		break;
 8001582:	e030      	b.n	80015e6 <checkTaskflag+0x1fa>
	case TASK_SEND_CALIB:
		res = (bool)__MY_STATION->task.sendcmdCalib;
 8001584:	4b1b      	ldr	r3, [pc, #108]	; (80015f4 <checkTaskflag+0x208>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	7b5b      	ldrb	r3, [r3, #13]
 800158a:	f003 0320 	and.w	r3, r3, #32
 800158e:	b2db      	uxtb	r3, r3
 8001590:	2b00      	cmp	r3, #0
 8001592:	bf14      	ite	ne
 8001594:	2301      	movne	r3, #1
 8001596:	2300      	moveq	r3, #0
 8001598:	73fb      	strb	r3, [r7, #15]
		break;
 800159a:	e024      	b.n	80015e6 <checkTaskflag+0x1fa>
	case TASK_SEND_GETSTATUS:
		res = (bool)__MY_STATION->task.sendcmdGetstatus;
 800159c:	4b15      	ldr	r3, [pc, #84]	; (80015f4 <checkTaskflag+0x208>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	7b5b      	ldrb	r3, [r3, #13]
 80015a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015a6:	b2db      	uxtb	r3, r3
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	bf14      	ite	ne
 80015ac:	2301      	movne	r3, #1
 80015ae:	2300      	moveq	r3, #0
 80015b0:	73fb      	strb	r3, [r7, #15]
		break;
 80015b2:	e018      	b.n	80015e6 <checkTaskflag+0x1fa>
	case TASK_SEND_GETSTATION:
		res = (bool)__MY_STATION->task.sendcmdGetstation;
 80015b4:	4b0f      	ldr	r3, [pc, #60]	; (80015f4 <checkTaskflag+0x208>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	7b5b      	ldrb	r3, [r3, #13]
 80015ba:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	bf14      	ite	ne
 80015c4:	2301      	movne	r3, #1
 80015c6:	2300      	moveq	r3, #0
 80015c8:	73fb      	strb	r3, [r7, #15]
		break;
 80015ca:	e00c      	b.n	80015e6 <checkTaskflag+0x1fa>
	case TASK_SEND_GETSENSOR:
		res = (bool)__MY_STATION->task.sendcmdGetsensor;
 80015cc:	4b09      	ldr	r3, [pc, #36]	; (80015f4 <checkTaskflag+0x208>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	7b9b      	ldrb	r3, [r3, #14]
 80015d2:	f003 0301 	and.w	r3, r3, #1
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	2b00      	cmp	r3, #0
 80015da:	bf14      	ite	ne
 80015dc:	2301      	movne	r3, #1
 80015de:	2300      	moveq	r3, #0
 80015e0:	73fb      	strb	r3, [r7, #15]
		break;
 80015e2:	e000      	b.n	80015e6 <checkTaskflag+0x1fa>
	default:
		break;
 80015e4:	bf00      	nop
	}
	return res;
 80015e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	3714      	adds	r7, #20
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bc80      	pop	{r7}
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	20001298 	.word	0x20001298

080015f8 <triggerTaskflag>:



void triggerTaskflag (Task_t task, Flag_t ENorDIS)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	4603      	mov	r3, r0
 8001600:	460a      	mov	r2, r1
 8001602:	71fb      	strb	r3, [r7, #7]
 8001604:	4613      	mov	r3, r2
 8001606:	71bb      	strb	r3, [r7, #6]
	switch (task) {
 8001608:	79fb      	ldrb	r3, [r7, #7]
 800160a:	2b10      	cmp	r3, #16
 800160c:	f200 80e1 	bhi.w	80017d2 <triggerTaskflag+0x1da>
 8001610:	a201      	add	r2, pc, #4	; (adr r2, 8001618 <triggerTaskflag+0x20>)
 8001612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001616:	bf00      	nop
 8001618:	0800165d 	.word	0x0800165d
 800161c:	08001673 	.word	0x08001673
 8001620:	080016b5 	.word	0x080016b5
 8001624:	080016cb 	.word	0x080016cb
 8001628:	08001689 	.word	0x08001689
 800162c:	0800169f 	.word	0x0800169f
 8001630:	080016e1 	.word	0x080016e1
 8001634:	080016f7 	.word	0x080016f7
 8001638:	08001723 	.word	0x08001723
 800163c:	0800170d 	.word	0x0800170d
 8001640:	08001739 	.word	0x08001739
 8001644:	0800174f 	.word	0x0800174f
 8001648:	08001765 	.word	0x08001765
 800164c:	0800177b 	.word	0x0800177b
 8001650:	08001791 	.word	0x08001791
 8001654:	080017a7 	.word	0x080017a7
 8001658:	080017bd 	.word	0x080017bd
	case TASK_REGISTER:
		__MY_STATION->task.register2server = ENorDIS;
 800165c:	4b60      	ldr	r3, [pc, #384]	; (80017e0 <triggerTaskflag+0x1e8>)
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	79bb      	ldrb	r3, [r7, #6]
 8001662:	f003 0301 	and.w	r3, r3, #1
 8001666:	b2d9      	uxtb	r1, r3
 8001668:	7b13      	ldrb	r3, [r2, #12]
 800166a:	f361 0300 	bfi	r3, r1, #0, #1
 800166e:	7313      	strb	r3, [r2, #12]
		break;
 8001670:	e0b0      	b.n	80017d4 <triggerTaskflag+0x1dc>
	case TASK_SUBSCRIBE:
		__MY_STATION->task.subscribe = ENorDIS;
 8001672:	4b5b      	ldr	r3, [pc, #364]	; (80017e0 <triggerTaskflag+0x1e8>)
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	79bb      	ldrb	r3, [r7, #6]
 8001678:	f003 0301 	and.w	r3, r3, #1
 800167c:	b2d9      	uxtb	r1, r3
 800167e:	7b13      	ldrb	r3, [r2, #12]
 8001680:	f361 0341 	bfi	r3, r1, #1, #1
 8001684:	7313      	strb	r3, [r2, #12]
		break;
 8001686:	e0a5      	b.n	80017d4 <triggerTaskflag+0x1dc>
	case TASK_CTRL_MBA:
		__MY_STATION->task.CtrlMBA = ENorDIS;
 8001688:	4b55      	ldr	r3, [pc, #340]	; (80017e0 <triggerTaskflag+0x1e8>)
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	79bb      	ldrb	r3, [r7, #6]
 800168e:	f003 0301 	and.w	r3, r3, #1
 8001692:	b2d9      	uxtb	r1, r3
 8001694:	7b13      	ldrb	r3, [r2, #12]
 8001696:	f361 1304 	bfi	r3, r1, #4, #1
 800169a:	7313      	strb	r3, [r2, #12]
		break;
 800169c:	e09a      	b.n	80017d4 <triggerTaskflag+0x1dc>
	case TASK_CTRL_STEPMOR:
		__MY_STATION->task.CtrlStepmotor = ENorDIS;
 800169e:	4b50      	ldr	r3, [pc, #320]	; (80017e0 <triggerTaskflag+0x1e8>)
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	79bb      	ldrb	r3, [r7, #6]
 80016a4:	f003 0301 	and.w	r3, r3, #1
 80016a8:	b2d9      	uxtb	r1, r3
 80016aa:	7b13      	ldrb	r3, [r2, #12]
 80016ac:	f361 1345 	bfi	r3, r1, #5, #1
 80016b0:	7313      	strb	r3, [r2, #12]
		break;
 80016b2:	e08f      	b.n	80017d4 <triggerTaskflag+0x1dc>
	case TASK_PREPARE_CALIB:
		__MY_STATION->task.PrepareCalib = ENorDIS;
 80016b4:	4b4a      	ldr	r3, [pc, #296]	; (80017e0 <triggerTaskflag+0x1e8>)
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	79bb      	ldrb	r3, [r7, #6]
 80016ba:	f003 0301 	and.w	r3, r3, #1
 80016be:	b2d9      	uxtb	r1, r3
 80016c0:	7b13      	ldrb	r3, [r2, #12]
 80016c2:	f361 0382 	bfi	r3, r1, #2, #1
 80016c6:	7313      	strb	r3, [r2, #12]
		break;
 80016c8:	e084      	b.n	80017d4 <triggerTaskflag+0x1dc>
	case TASK_START_CALIB:
		__MY_STATION->task.StartCalib = ENorDIS;
 80016ca:	4b45      	ldr	r3, [pc, #276]	; (80017e0 <triggerTaskflag+0x1e8>)
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	79bb      	ldrb	r3, [r7, #6]
 80016d0:	f003 0301 	and.w	r3, r3, #1
 80016d4:	b2d9      	uxtb	r1, r3
 80016d6:	7b13      	ldrb	r3, [r2, #12]
 80016d8:	f361 03c3 	bfi	r3, r1, #3, #1
 80016dc:	7313      	strb	r3, [r2, #12]
		break;
 80016de:	e079      	b.n	80017d4 <triggerTaskflag+0x1dc>
	case TASK_GET_GPS_TIME:
		__MY_STATION->task.getGPStimeflag = ENorDIS;
 80016e0:	4b3f      	ldr	r3, [pc, #252]	; (80017e0 <triggerTaskflag+0x1e8>)
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	79bb      	ldrb	r3, [r7, #6]
 80016e6:	f003 0301 	and.w	r3, r3, #1
 80016ea:	b2d9      	uxtb	r1, r3
 80016ec:	7b13      	ldrb	r3, [r2, #12]
 80016ee:	f361 1386 	bfi	r3, r1, #6, #1
 80016f2:	7313      	strb	r3, [r2, #12]
		break;
 80016f4:	e06e      	b.n	80017d4 <triggerTaskflag+0x1dc>
	case TASK_SEND_NWREADY:
		__MY_STATION->task.sendNWready = ENorDIS;
 80016f6:	4b3a      	ldr	r3, [pc, #232]	; (80017e0 <triggerTaskflag+0x1e8>)
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	79bb      	ldrb	r3, [r7, #6]
 80016fc:	f003 0301 	and.w	r3, r3, #1
 8001700:	b2d9      	uxtb	r1, r3
 8001702:	7b53      	ldrb	r3, [r2, #13]
 8001704:	f361 0300 	bfi	r3, r1, #0, #1
 8001708:	7353      	strb	r3, [r2, #13]
		break;
 800170a:	e063      	b.n	80017d4 <triggerTaskflag+0x1dc>
	case TASK_SEND_DATACALIB:
		__MY_STATION->task.sendDATACALIB = ENorDIS;
 800170c:	4b34      	ldr	r3, [pc, #208]	; (80017e0 <triggerTaskflag+0x1e8>)
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	79bb      	ldrb	r3, [r7, #6]
 8001712:	f003 0301 	and.w	r3, r3, #1
 8001716:	b2d9      	uxtb	r1, r3
 8001718:	7b53      	ldrb	r3, [r2, #13]
 800171a:	f361 0341 	bfi	r3, r1, #1, #1
 800171e:	7353      	strb	r3, [r2, #13]
		break;
 8001720:	e058      	b.n	80017d4 <triggerTaskflag+0x1dc>
	case TASK_SEND_DATAPERIOD:
		__MY_STATION->task.sendDataPeriod = ENorDIS;
 8001722:	4b2f      	ldr	r3, [pc, #188]	; (80017e0 <triggerTaskflag+0x1e8>)
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	79bb      	ldrb	r3, [r7, #6]
 8001728:	f003 0301 	and.w	r3, r3, #1
 800172c:	b2d9      	uxtb	r1, r3
 800172e:	7b13      	ldrb	r3, [r2, #12]
 8001730:	f361 13c7 	bfi	r3, r1, #7, #1
 8001734:	7313      	strb	r3, [r2, #12]
		break;
 8001736:	e04d      	b.n	80017d4 <triggerTaskflag+0x1dc>
	case TASK_SEND_DATAAFTERCALIB:
		__MY_STATION->task.sendDATAafterCALIB = ENorDIS;
 8001738:	4b29      	ldr	r3, [pc, #164]	; (80017e0 <triggerTaskflag+0x1e8>)
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	79bb      	ldrb	r3, [r7, #6]
 800173e:	f003 0301 	and.w	r3, r3, #1
 8001742:	b2d9      	uxtb	r1, r3
 8001744:	7b53      	ldrb	r3, [r2, #13]
 8001746:	f361 0382 	bfi	r3, r1, #2, #1
 800174a:	7353      	strb	r3, [r2, #13]
		break;
 800174c:	e042      	b.n	80017d4 <triggerTaskflag+0x1dc>
	case TASK_SEND_CTRLMBA:
		__MY_STATION->task.sendcmdCtrlMBA = ENorDIS;
 800174e:	4b24      	ldr	r3, [pc, #144]	; (80017e0 <triggerTaskflag+0x1e8>)
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	79bb      	ldrb	r3, [r7, #6]
 8001754:	f003 0301 	and.w	r3, r3, #1
 8001758:	b2d9      	uxtb	r1, r3
 800175a:	7b53      	ldrb	r3, [r2, #13]
 800175c:	f361 03c3 	bfi	r3, r1, #3, #1
 8001760:	7353      	strb	r3, [r2, #13]
		break;
 8001762:	e037      	b.n	80017d4 <triggerTaskflag+0x1dc>
	case TASK_SEND_CTRLSTEPMOR:
		__MY_STATION->task.sendcmdCtrlStepmotor = ENorDIS;
 8001764:	4b1e      	ldr	r3, [pc, #120]	; (80017e0 <triggerTaskflag+0x1e8>)
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	79bb      	ldrb	r3, [r7, #6]
 800176a:	f003 0301 	and.w	r3, r3, #1
 800176e:	b2d9      	uxtb	r1, r3
 8001770:	7b53      	ldrb	r3, [r2, #13]
 8001772:	f361 1304 	bfi	r3, r1, #4, #1
 8001776:	7353      	strb	r3, [r2, #13]
		break;
 8001778:	e02c      	b.n	80017d4 <triggerTaskflag+0x1dc>
	case TASK_SEND_CALIB:
		__MY_STATION->task.sendcmdCalib = ENorDIS;
 800177a:	4b19      	ldr	r3, [pc, #100]	; (80017e0 <triggerTaskflag+0x1e8>)
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	79bb      	ldrb	r3, [r7, #6]
 8001780:	f003 0301 	and.w	r3, r3, #1
 8001784:	b2d9      	uxtb	r1, r3
 8001786:	7b53      	ldrb	r3, [r2, #13]
 8001788:	f361 1345 	bfi	r3, r1, #5, #1
 800178c:	7353      	strb	r3, [r2, #13]
		break;
 800178e:	e021      	b.n	80017d4 <triggerTaskflag+0x1dc>
	case TASK_SEND_GETSTATUS:
		__MY_STATION->task.sendcmdGetstatus = ENorDIS;
 8001790:	4b13      	ldr	r3, [pc, #76]	; (80017e0 <triggerTaskflag+0x1e8>)
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	79bb      	ldrb	r3, [r7, #6]
 8001796:	f003 0301 	and.w	r3, r3, #1
 800179a:	b2d9      	uxtb	r1, r3
 800179c:	7b53      	ldrb	r3, [r2, #13]
 800179e:	f361 1386 	bfi	r3, r1, #6, #1
 80017a2:	7353      	strb	r3, [r2, #13]
		break;
 80017a4:	e016      	b.n	80017d4 <triggerTaskflag+0x1dc>
	case TASK_SEND_GETSTATION:
		__MY_STATION->task.sendcmdGetstation = ENorDIS;
 80017a6:	4b0e      	ldr	r3, [pc, #56]	; (80017e0 <triggerTaskflag+0x1e8>)
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	79bb      	ldrb	r3, [r7, #6]
 80017ac:	f003 0301 	and.w	r3, r3, #1
 80017b0:	b2d9      	uxtb	r1, r3
 80017b2:	7b53      	ldrb	r3, [r2, #13]
 80017b4:	f361 13c7 	bfi	r3, r1, #7, #1
 80017b8:	7353      	strb	r3, [r2, #13]
		break;
 80017ba:	e00b      	b.n	80017d4 <triggerTaskflag+0x1dc>
	case TASK_SEND_GETSENSOR:
		__MY_STATION->task.sendcmdGetsensor = ENorDIS;
 80017bc:	4b08      	ldr	r3, [pc, #32]	; (80017e0 <triggerTaskflag+0x1e8>)
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	79bb      	ldrb	r3, [r7, #6]
 80017c2:	f003 0301 	and.w	r3, r3, #1
 80017c6:	b2d9      	uxtb	r1, r3
 80017c8:	7b93      	ldrb	r3, [r2, #14]
 80017ca:	f361 0300 	bfi	r3, r1, #0, #1
 80017ce:	7393      	strb	r3, [r2, #14]
		break;
 80017d0:	e000      	b.n	80017d4 <triggerTaskflag+0x1dc>
	default:
		break;
 80017d2:	bf00      	nop
	}
	return ;
 80017d4:	bf00      	nop
}
 80017d6:	370c      	adds	r7, #12
 80017d8:	46bd      	mov	sp, r7
 80017da:	bc80      	pop	{r7}
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	20001298 	.word	0x20001298

080017e4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b084      	sub	sp, #16
 80017e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80017ea:	1d3b      	adds	r3, r7, #4
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]
 80017f0:	605a      	str	r2, [r3, #4]
 80017f2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80017f4:	4b18      	ldr	r3, [pc, #96]	; (8001858 <MX_ADC1_Init+0x74>)
 80017f6:	4a19      	ldr	r2, [pc, #100]	; (800185c <MX_ADC1_Init+0x78>)
 80017f8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80017fa:	4b17      	ldr	r3, [pc, #92]	; (8001858 <MX_ADC1_Init+0x74>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001800:	4b15      	ldr	r3, [pc, #84]	; (8001858 <MX_ADC1_Init+0x74>)
 8001802:	2200      	movs	r2, #0
 8001804:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001806:	4b14      	ldr	r3, [pc, #80]	; (8001858 <MX_ADC1_Init+0x74>)
 8001808:	2200      	movs	r2, #0
 800180a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800180c:	4b12      	ldr	r3, [pc, #72]	; (8001858 <MX_ADC1_Init+0x74>)
 800180e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001812:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001814:	4b10      	ldr	r3, [pc, #64]	; (8001858 <MX_ADC1_Init+0x74>)
 8001816:	2200      	movs	r2, #0
 8001818:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800181a:	4b0f      	ldr	r3, [pc, #60]	; (8001858 <MX_ADC1_Init+0x74>)
 800181c:	2201      	movs	r2, #1
 800181e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001820:	480d      	ldr	r0, [pc, #52]	; (8001858 <MX_ADC1_Init+0x74>)
 8001822:	f001 f9ed 	bl	8002c00 <HAL_ADC_Init>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800182c:	f000 fcb1 	bl	8002192 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001830:	2301      	movs	r3, #1
 8001832:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001834:	2301      	movs	r3, #1
 8001836:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001838:	2300      	movs	r3, #0
 800183a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800183c:	1d3b      	adds	r3, r7, #4
 800183e:	4619      	mov	r1, r3
 8001840:	4805      	ldr	r0, [pc, #20]	; (8001858 <MX_ADC1_Init+0x74>)
 8001842:	f001 fab5 	bl	8002db0 <HAL_ADC_ConfigChannel>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d001      	beq.n	8001850 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800184c:	f000 fca1 	bl	8002192 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001850:	bf00      	nop
 8001852:	3710      	adds	r7, #16
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	2000129c 	.word	0x2000129c
 800185c:	40012400 	.word	0x40012400

08001860 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b088      	sub	sp, #32
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001868:	f107 0310 	add.w	r3, r7, #16
 800186c:	2200      	movs	r2, #0
 800186e:	601a      	str	r2, [r3, #0]
 8001870:	605a      	str	r2, [r3, #4]
 8001872:	609a      	str	r2, [r3, #8]
 8001874:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a14      	ldr	r2, [pc, #80]	; (80018cc <HAL_ADC_MspInit+0x6c>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d121      	bne.n	80018c4 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001880:	4b13      	ldr	r3, [pc, #76]	; (80018d0 <HAL_ADC_MspInit+0x70>)
 8001882:	699b      	ldr	r3, [r3, #24]
 8001884:	4a12      	ldr	r2, [pc, #72]	; (80018d0 <HAL_ADC_MspInit+0x70>)
 8001886:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800188a:	6193      	str	r3, [r2, #24]
 800188c:	4b10      	ldr	r3, [pc, #64]	; (80018d0 <HAL_ADC_MspInit+0x70>)
 800188e:	699b      	ldr	r3, [r3, #24]
 8001890:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001894:	60fb      	str	r3, [r7, #12]
 8001896:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001898:	4b0d      	ldr	r3, [pc, #52]	; (80018d0 <HAL_ADC_MspInit+0x70>)
 800189a:	699b      	ldr	r3, [r3, #24]
 800189c:	4a0c      	ldr	r2, [pc, #48]	; (80018d0 <HAL_ADC_MspInit+0x70>)
 800189e:	f043 0304 	orr.w	r3, r3, #4
 80018a2:	6193      	str	r3, [r2, #24]
 80018a4:	4b0a      	ldr	r3, [pc, #40]	; (80018d0 <HAL_ADC_MspInit+0x70>)
 80018a6:	699b      	ldr	r3, [r3, #24]
 80018a8:	f003 0304 	and.w	r3, r3, #4
 80018ac:	60bb      	str	r3, [r7, #8]
 80018ae:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = MOTOR_SENSE2_Pin;
 80018b0:	2302      	movs	r3, #2
 80018b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018b4:	2303      	movs	r3, #3
 80018b6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(MOTOR_SENSE2_GPIO_Port, &GPIO_InitStruct);
 80018b8:	f107 0310 	add.w	r3, r7, #16
 80018bc:	4619      	mov	r1, r3
 80018be:	4805      	ldr	r0, [pc, #20]	; (80018d4 <HAL_ADC_MspInit+0x74>)
 80018c0:	f001 ff60 	bl	8003784 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80018c4:	bf00      	nop
 80018c6:	3720      	adds	r7, #32
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	40012400 	.word	0x40012400
 80018d0:	40021000 	.word	0x40021000
 80018d4:	40010800 	.word	0x40010800

080018d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80018de:	4b14      	ldr	r3, [pc, #80]	; (8001930 <MX_DMA_Init+0x58>)
 80018e0:	695b      	ldr	r3, [r3, #20]
 80018e2:	4a13      	ldr	r2, [pc, #76]	; (8001930 <MX_DMA_Init+0x58>)
 80018e4:	f043 0301 	orr.w	r3, r3, #1
 80018e8:	6153      	str	r3, [r2, #20]
 80018ea:	4b11      	ldr	r3, [pc, #68]	; (8001930 <MX_DMA_Init+0x58>)
 80018ec:	695b      	ldr	r3, [r3, #20]
 80018ee:	f003 0301 	and.w	r3, r3, #1
 80018f2:	607b      	str	r3, [r7, #4]
 80018f4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80018f6:	2200      	movs	r2, #0
 80018f8:	2100      	movs	r1, #0
 80018fa:	200d      	movs	r0, #13
 80018fc:	f001 fc69 	bl	80031d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001900:	200d      	movs	r0, #13
 8001902:	f001 fc82 	bl	800320a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001906:	2200      	movs	r2, #0
 8001908:	2100      	movs	r1, #0
 800190a:	200f      	movs	r0, #15
 800190c:	f001 fc61 	bl	80031d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001910:	200f      	movs	r0, #15
 8001912:	f001 fc7a 	bl	800320a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001916:	2200      	movs	r2, #0
 8001918:	2100      	movs	r1, #0
 800191a:	2010      	movs	r0, #16
 800191c:	f001 fc59 	bl	80031d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001920:	2010      	movs	r0, #16
 8001922:	f001 fc72 	bl	800320a <HAL_NVIC_EnableIRQ>

}
 8001926:	bf00      	nop
 8001928:	3708      	adds	r7, #8
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	40021000 	.word	0x40021000

08001934 <Bytes2float>:
    }

}

float Bytes2float(uint8_t * ftoa_bytes_temp)
{
 8001934:	b480      	push	{r7}
 8001936:	b087      	sub	sp, #28
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
    union {
      float a;
      uint8_t bytes[4];
    } thing;

    for (uint8_t i = 0; i < 4; i++) {
 800193c:	2300      	movs	r3, #0
 800193e:	75fb      	strb	r3, [r7, #23]
 8001940:	e00b      	b.n	800195a <Bytes2float+0x26>
    	thing.bytes[i] = ftoa_bytes_temp[i];
 8001942:	7dfb      	ldrb	r3, [r7, #23]
 8001944:	687a      	ldr	r2, [r7, #4]
 8001946:	441a      	add	r2, r3
 8001948:	7dfb      	ldrb	r3, [r7, #23]
 800194a:	7812      	ldrb	r2, [r2, #0]
 800194c:	3318      	adds	r3, #24
 800194e:	443b      	add	r3, r7
 8001950:	f803 2c0c 	strb.w	r2, [r3, #-12]
    for (uint8_t i = 0; i < 4; i++) {
 8001954:	7dfb      	ldrb	r3, [r7, #23]
 8001956:	3301      	adds	r3, #1
 8001958:	75fb      	strb	r3, [r7, #23]
 800195a:	7dfb      	ldrb	r3, [r7, #23]
 800195c:	2b03      	cmp	r3, #3
 800195e:	d9f0      	bls.n	8001942 <Bytes2float+0xe>
    }

   float float_variable =  thing.a;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	613b      	str	r3, [r7, #16]
   return float_variable;
 8001964:	693b      	ldr	r3, [r7, #16]
}
 8001966:	4618      	mov	r0, r3
 8001968:	371c      	adds	r7, #28
 800196a:	46bd      	mov	sp, r7
 800196c:	bc80      	pop	{r7}
 800196e:	4770      	bx	lr

08001970 <Flash_Read_Data>:
	   return 0;
}


void Flash_Read_Data (uint32_t StartPageAddress, uint32_t *RxBuf, uint16_t numberofwords)
{
 8001970:	b480      	push	{r7}
 8001972:	b085      	sub	sp, #20
 8001974:	af00      	add	r7, sp, #0
 8001976:	60f8      	str	r0, [r7, #12]
 8001978:	60b9      	str	r1, [r7, #8]
 800197a:	4613      	mov	r3, r2
 800197c:	80fb      	strh	r3, [r7, #6]
	while (1)
	{

		*RxBuf = *(__IO uint32_t *)StartPageAddress;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	68bb      	ldr	r3, [r7, #8]
 8001984:	601a      	str	r2, [r3, #0]
		StartPageAddress += 4;
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	3304      	adds	r3, #4
 800198a:	60fb      	str	r3, [r7, #12]
		RxBuf++;
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	3304      	adds	r3, #4
 8001990:	60bb      	str	r3, [r7, #8]
		if (!(numberofwords--)) break;
 8001992:	88fb      	ldrh	r3, [r7, #6]
 8001994:	1e5a      	subs	r2, r3, #1
 8001996:	80fa      	strh	r2, [r7, #6]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d000      	beq.n	800199e <Flash_Read_Data+0x2e>
		*RxBuf = *(__IO uint32_t *)StartPageAddress;
 800199c:	e7ef      	b.n	800197e <Flash_Read_Data+0xe>
		if (!(numberofwords--)) break;
 800199e:	bf00      	nop
	}
}
 80019a0:	bf00      	nop
 80019a2:	3714      	adds	r7, #20
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bc80      	pop	{r7}
 80019a8:	4770      	bx	lr

080019aa <Flash_Read_NUM>:
	Flash_Write_Data (StartSectorAddress, (uint32_t *)bytes_temp, 1);
}


float Flash_Read_NUM (uint32_t StartSectorAddress)
{
 80019aa:	b580      	push	{r7, lr}
 80019ac:	b084      	sub	sp, #16
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	6078      	str	r0, [r7, #4]
	uint8_t buffer[4];
	float value;

	Flash_Read_Data(StartSectorAddress, (uint32_t *)buffer, 1);
 80019b2:	f107 0308 	add.w	r3, r7, #8
 80019b6:	2201      	movs	r2, #1
 80019b8:	4619      	mov	r1, r3
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	f7ff ffd8 	bl	8001970 <Flash_Read_Data>
	value = Bytes2float(buffer);
 80019c0:	f107 0308 	add.w	r3, r7, #8
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7ff ffb5 	bl	8001934 <Bytes2float>
 80019ca:	60f8      	str	r0, [r7, #12]
	return value;
 80019cc:	68fb      	ldr	r3, [r7, #12]
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3710      	adds	r7, #16
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
	...

080019d8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b088      	sub	sp, #32
 80019dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019de:	f107 0310 	add.w	r3, r7, #16
 80019e2:	2200      	movs	r2, #0
 80019e4:	601a      	str	r2, [r3, #0]
 80019e6:	605a      	str	r2, [r3, #4]
 80019e8:	609a      	str	r2, [r3, #8]
 80019ea:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019ec:	4b43      	ldr	r3, [pc, #268]	; (8001afc <MX_GPIO_Init+0x124>)
 80019ee:	699b      	ldr	r3, [r3, #24]
 80019f0:	4a42      	ldr	r2, [pc, #264]	; (8001afc <MX_GPIO_Init+0x124>)
 80019f2:	f043 0310 	orr.w	r3, r3, #16
 80019f6:	6193      	str	r3, [r2, #24]
 80019f8:	4b40      	ldr	r3, [pc, #256]	; (8001afc <MX_GPIO_Init+0x124>)
 80019fa:	699b      	ldr	r3, [r3, #24]
 80019fc:	f003 0310 	and.w	r3, r3, #16
 8001a00:	60fb      	str	r3, [r7, #12]
 8001a02:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a04:	4b3d      	ldr	r3, [pc, #244]	; (8001afc <MX_GPIO_Init+0x124>)
 8001a06:	699b      	ldr	r3, [r3, #24]
 8001a08:	4a3c      	ldr	r2, [pc, #240]	; (8001afc <MX_GPIO_Init+0x124>)
 8001a0a:	f043 0320 	orr.w	r3, r3, #32
 8001a0e:	6193      	str	r3, [r2, #24]
 8001a10:	4b3a      	ldr	r3, [pc, #232]	; (8001afc <MX_GPIO_Init+0x124>)
 8001a12:	699b      	ldr	r3, [r3, #24]
 8001a14:	f003 0320 	and.w	r3, r3, #32
 8001a18:	60bb      	str	r3, [r7, #8]
 8001a1a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a1c:	4b37      	ldr	r3, [pc, #220]	; (8001afc <MX_GPIO_Init+0x124>)
 8001a1e:	699b      	ldr	r3, [r3, #24]
 8001a20:	4a36      	ldr	r2, [pc, #216]	; (8001afc <MX_GPIO_Init+0x124>)
 8001a22:	f043 0304 	orr.w	r3, r3, #4
 8001a26:	6193      	str	r3, [r2, #24]
 8001a28:	4b34      	ldr	r3, [pc, #208]	; (8001afc <MX_GPIO_Init+0x124>)
 8001a2a:	699b      	ldr	r3, [r3, #24]
 8001a2c:	f003 0304 	and.w	r3, r3, #4
 8001a30:	607b      	str	r3, [r7, #4]
 8001a32:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a34:	4b31      	ldr	r3, [pc, #196]	; (8001afc <MX_GPIO_Init+0x124>)
 8001a36:	699b      	ldr	r3, [r3, #24]
 8001a38:	4a30      	ldr	r2, [pc, #192]	; (8001afc <MX_GPIO_Init+0x124>)
 8001a3a:	f043 0308 	orr.w	r3, r3, #8
 8001a3e:	6193      	str	r3, [r2, #24]
 8001a40:	4b2e      	ldr	r3, [pc, #184]	; (8001afc <MX_GPIO_Init+0x124>)
 8001a42:	699b      	ldr	r3, [r3, #24]
 8001a44:	f003 0308 	and.w	r3, r3, #8
 8001a48:	603b      	str	r3, [r7, #0]
 8001a4a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_DB7_Pin|LCD_DB6_Pin|LCD_DB5_Pin, GPIO_PIN_RESET);
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8001a52:	482b      	ldr	r0, [pc, #172]	; (8001b00 <MX_GPIO_Init+0x128>)
 8001a54:	f002 f81a 	bl	8003a8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MBA_CONTACTOR_Pin|MOTOR_DIR_Pin|LED_Pin|LCD_RS_Pin
 8001a58:	2200      	movs	r2, #0
 8001a5a:	f649 4190 	movw	r1, #40080	; 0x9c90
 8001a5e:	4829      	ldr	r0, [pc, #164]	; (8001b04 <MX_GPIO_Init+0x12c>)
 8001a60:	f002 f814 	bl	8003a8c <HAL_GPIO_WritePin>
                          |LCD_EN_Pin|LCD_DB4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOTOR_STEP_Pin|MOTOR_SLEEP_Pin|MOTOR_RST_Pin|MOTOR_EN_Pin, GPIO_PIN_RESET);
 8001a64:	2200      	movs	r2, #0
 8001a66:	f243 0103 	movw	r1, #12291	; 0x3003
 8001a6a:	4827      	ldr	r0, [pc, #156]	; (8001b08 <MX_GPIO_Init+0x130>)
 8001a6c:	f002 f80e 	bl	8003a8c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LCD_DB7_Pin|LCD_DB6_Pin|LCD_DB5_Pin;
 8001a70:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001a74:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a76:	2301      	movs	r3, #1
 8001a78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a7e:	2302      	movs	r3, #2
 8001a80:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a82:	f107 0310 	add.w	r3, r7, #16
 8001a86:	4619      	mov	r1, r3
 8001a88:	481d      	ldr	r0, [pc, #116]	; (8001b00 <MX_GPIO_Init+0x128>)
 8001a8a:	f001 fe7b 	bl	8003784 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RTC_ALARM_TRIGGER_Pin;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001a92:	4b1e      	ldr	r3, [pc, #120]	; (8001b0c <MX_GPIO_Init+0x134>)
 8001a94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a96:	2300      	movs	r3, #0
 8001a98:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RTC_ALARM_TRIGGER_GPIO_Port, &GPIO_InitStruct);
 8001a9a:	f107 0310 	add.w	r3, r7, #16
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	4818      	ldr	r0, [pc, #96]	; (8001b04 <MX_GPIO_Init+0x12c>)
 8001aa2:	f001 fe6f 	bl	8003784 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin */
  GPIO_InitStruct.Pin = MBA_CONTACTOR_Pin|MOTOR_DIR_Pin|LED_Pin|LCD_RS_Pin
 8001aa6:	f649 4390 	movw	r3, #40080	; 0x9c90
 8001aaa:	613b      	str	r3, [r7, #16]
                          |LCD_EN_Pin|LCD_DB4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aac:	2301      	movs	r3, #1
 8001aae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab4:	2302      	movs	r3, #2
 8001ab6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ab8:	f107 0310 	add.w	r3, r7, #16
 8001abc:	4619      	mov	r1, r3
 8001abe:	4811      	ldr	r0, [pc, #68]	; (8001b04 <MX_GPIO_Init+0x12c>)
 8001ac0:	f001 fe60 	bl	8003784 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MOTOR_STEP_Pin|MOTOR_SLEEP_Pin|MOTOR_RST_Pin|MOTOR_EN_Pin;
 8001ac4:	f243 0303 	movw	r3, #12291	; 0x3003
 8001ac8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aca:	2301      	movs	r3, #1
 8001acc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad2:	2302      	movs	r3, #2
 8001ad4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ad6:	f107 0310 	add.w	r3, r7, #16
 8001ada:	4619      	mov	r1, r3
 8001adc:	480a      	ldr	r0, [pc, #40]	; (8001b08 <MX_GPIO_Init+0x130>)
 8001ade:	f001 fe51 	bl	8003784 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	2100      	movs	r1, #0
 8001ae6:	2006      	movs	r0, #6
 8001ae8:	f001 fb73 	bl	80031d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001aec:	2006      	movs	r0, #6
 8001aee:	f001 fb8c 	bl	800320a <HAL_NVIC_EnableIRQ>

}
 8001af2:	bf00      	nop
 8001af4:	3720      	adds	r7, #32
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	40021000 	.word	0x40021000
 8001b00:	40011000 	.word	0x40011000
 8001b04:	40010800 	.word	0x40010800
 8001b08:	40010c00 	.word	0x40010c00
 8001b0c:	10210000 	.word	0x10210000

08001b10 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b14:	4b12      	ldr	r3, [pc, #72]	; (8001b60 <MX_I2C1_Init+0x50>)
 8001b16:	4a13      	ldr	r2, [pc, #76]	; (8001b64 <MX_I2C1_Init+0x54>)
 8001b18:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001b1a:	4b11      	ldr	r3, [pc, #68]	; (8001b60 <MX_I2C1_Init+0x50>)
 8001b1c:	4a12      	ldr	r2, [pc, #72]	; (8001b68 <MX_I2C1_Init+0x58>)
 8001b1e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b20:	4b0f      	ldr	r3, [pc, #60]	; (8001b60 <MX_I2C1_Init+0x50>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001b26:	4b0e      	ldr	r3, [pc, #56]	; (8001b60 <MX_I2C1_Init+0x50>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b2c:	4b0c      	ldr	r3, [pc, #48]	; (8001b60 <MX_I2C1_Init+0x50>)
 8001b2e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b32:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b34:	4b0a      	ldr	r3, [pc, #40]	; (8001b60 <MX_I2C1_Init+0x50>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001b3a:	4b09      	ldr	r3, [pc, #36]	; (8001b60 <MX_I2C1_Init+0x50>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b40:	4b07      	ldr	r3, [pc, #28]	; (8001b60 <MX_I2C1_Init+0x50>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b46:	4b06      	ldr	r3, [pc, #24]	; (8001b60 <MX_I2C1_Init+0x50>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b4c:	4804      	ldr	r0, [pc, #16]	; (8001b60 <MX_I2C1_Init+0x50>)
 8001b4e:	f001 ffe7 	bl	8003b20 <HAL_I2C_Init>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001b58:	f000 fb1b 	bl	8002192 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b5c:	bf00      	nop
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	200012cc 	.word	0x200012cc
 8001b64:	40005400 	.word	0x40005400
 8001b68:	00061a80 	.word	0x00061a80

08001b6c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b08a      	sub	sp, #40	; 0x28
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b74:	f107 0314 	add.w	r3, r7, #20
 8001b78:	2200      	movs	r2, #0
 8001b7a:	601a      	str	r2, [r3, #0]
 8001b7c:	605a      	str	r2, [r3, #4]
 8001b7e:	609a      	str	r2, [r3, #8]
 8001b80:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a1d      	ldr	r2, [pc, #116]	; (8001bfc <HAL_I2C_MspInit+0x90>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d132      	bne.n	8001bf2 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b8c:	4b1c      	ldr	r3, [pc, #112]	; (8001c00 <HAL_I2C_MspInit+0x94>)
 8001b8e:	699b      	ldr	r3, [r3, #24]
 8001b90:	4a1b      	ldr	r2, [pc, #108]	; (8001c00 <HAL_I2C_MspInit+0x94>)
 8001b92:	f043 0308 	orr.w	r3, r3, #8
 8001b96:	6193      	str	r3, [r2, #24]
 8001b98:	4b19      	ldr	r3, [pc, #100]	; (8001c00 <HAL_I2C_MspInit+0x94>)
 8001b9a:	699b      	ldr	r3, [r3, #24]
 8001b9c:	f003 0308 	and.w	r3, r3, #8
 8001ba0:	613b      	str	r3, [r7, #16]
 8001ba2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001ba4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ba8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001baa:	2312      	movs	r3, #18
 8001bac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bb2:	f107 0314 	add.w	r3, r7, #20
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	4812      	ldr	r0, [pc, #72]	; (8001c04 <HAL_I2C_MspInit+0x98>)
 8001bba:	f001 fde3 	bl	8003784 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001bbe:	4b12      	ldr	r3, [pc, #72]	; (8001c08 <HAL_I2C_MspInit+0x9c>)
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	627b      	str	r3, [r7, #36]	; 0x24
 8001bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc6:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001bca:	627b      	str	r3, [r7, #36]	; 0x24
 8001bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bce:	f043 0302 	orr.w	r3, r3, #2
 8001bd2:	627b      	str	r3, [r7, #36]	; 0x24
 8001bd4:	4a0c      	ldr	r2, [pc, #48]	; (8001c08 <HAL_I2C_MspInit+0x9c>)
 8001bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd8:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001bda:	4b09      	ldr	r3, [pc, #36]	; (8001c00 <HAL_I2C_MspInit+0x94>)
 8001bdc:	69db      	ldr	r3, [r3, #28]
 8001bde:	4a08      	ldr	r2, [pc, #32]	; (8001c00 <HAL_I2C_MspInit+0x94>)
 8001be0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001be4:	61d3      	str	r3, [r2, #28]
 8001be6:	4b06      	ldr	r3, [pc, #24]	; (8001c00 <HAL_I2C_MspInit+0x94>)
 8001be8:	69db      	ldr	r3, [r3, #28]
 8001bea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bee:	60fb      	str	r3, [r7, #12]
 8001bf0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001bf2:	bf00      	nop
 8001bf4:	3728      	adds	r7, #40	; 0x28
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	40005400 	.word	0x40005400
 8001c00:	40021000 	.word	0x40021000
 8001c04:	40010c00 	.word	0x40010c00
 8001c08:	40010000 	.word	0x40010000

08001c0c <create_node>:
#include "linkedlist.h"

SensorNode_t SSnode_default = SENSORNODE_T_INIT;

Node* create_node(SensorNode_t  SSnode)
{
 8001c0c:	b084      	sub	sp, #16
 8001c0e:	b580      	push	{r7, lr}
 8001c10:	b082      	sub	sp, #8
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	f107 0c10 	add.w	ip, r7, #16
 8001c18:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    Node* node = (Node*)malloc(sizeof(Node));
 8001c1c:	2078      	movs	r0, #120	; 0x78
 8001c1e:	f004 ff4f 	bl	8006ac0 <malloc>
 8001c22:	4603      	mov	r3, r0
 8001c24:	607b      	str	r3, [r7, #4]
    node->SSnode= SSnode;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f107 0310 	add.w	r3, r7, #16
 8001c2e:	2272      	movs	r2, #114	; 0x72
 8001c30:	4619      	mov	r1, r3
 8001c32:	f004 ff65 	bl	8006b00 <memcpy>
    node->next = NULL;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	675a      	str	r2, [r3, #116]	; 0x74
    return node;
 8001c3c:	687b      	ldr	r3, [r7, #4]
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3708      	adds	r7, #8
 8001c42:	46bd      	mov	sp, r7
 8001c44:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001c48:	b004      	add	sp, #16
 8001c4a:	4770      	bx	lr

08001c4c <list_create>:

s_list * list_create(void)
{
 8001c4c:	b590      	push	{r4, r7, lr}
 8001c4e:	b09d      	sub	sp, #116	; 0x74
 8001c50:	af1a      	add	r7, sp, #104	; 0x68
    s_list *list = (s_list*)malloc(sizeof(s_list));
 8001c52:	200c      	movs	r0, #12
 8001c54:	f004 ff34 	bl	8006ac0 <malloc>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	607b      	str	r3, [r7, #4]
//    assert(list != NULL);
    list->head = create_node(SSnode_default);
 8001c5c:	4c15      	ldr	r4, [pc, #84]	; (8001cb4 <list_create+0x68>)
 8001c5e:	4668      	mov	r0, sp
 8001c60:	f104 0310 	add.w	r3, r4, #16
 8001c64:	2262      	movs	r2, #98	; 0x62
 8001c66:	4619      	mov	r1, r3
 8001c68:	f004 ff4a 	bl	8006b00 <memcpy>
 8001c6c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001c70:	f7ff ffcc 	bl	8001c0c <create_node>
 8001c74:	4602      	mov	r2, r0
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	601a      	str	r2, [r3, #0]
    list->tail = create_node(SSnode_default);
 8001c7a:	4c0e      	ldr	r4, [pc, #56]	; (8001cb4 <list_create+0x68>)
 8001c7c:	4668      	mov	r0, sp
 8001c7e:	f104 0310 	add.w	r3, r4, #16
 8001c82:	2262      	movs	r2, #98	; 0x62
 8001c84:	4619      	mov	r1, r3
 8001c86:	f004 ff3b 	bl	8006b00 <memcpy>
 8001c8a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001c8e:	f7ff ffbd 	bl	8001c0c <create_node>
 8001c92:	4602      	mov	r2, r0
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	605a      	str	r2, [r3, #4]
    list->head->next = list->tail;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	687a      	ldr	r2, [r7, #4]
 8001c9e:	6852      	ldr	r2, [r2, #4]
 8001ca0:	675a      	str	r2, [r3, #116]	; 0x74
    list->length = 0;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	609a      	str	r2, [r3, #8]
    return list;
 8001ca8:	687b      	ldr	r3, [r7, #4]
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	370c      	adds	r7, #12
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd90      	pop	{r4, r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	20000004 	.word	0x20000004

08001cb8 <list_append>:

void list_append (s_list* list, SensorNode_t SSnode_data)
{
 8001cb8:	b084      	sub	sp, #16
 8001cba:	b590      	push	{r4, r7, lr}
 8001cbc:	b09f      	sub	sp, #124	; 0x7c
 8001cbe:	af1a      	add	r7, sp, #104	; 0x68
 8001cc0:	6078      	str	r0, [r7, #4]
 8001cc2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001cc6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	list->tail->SSnode = SSnode_data;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cd4:	2272      	movs	r2, #114	; 0x72
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	f004 ff12 	bl	8006b00 <memcpy>
	Node *new_tail = create_node(SSnode_default);
 8001cdc:	4c0f      	ldr	r4, [pc, #60]	; (8001d1c <list_append+0x64>)
 8001cde:	4668      	mov	r0, sp
 8001ce0:	f104 0310 	add.w	r3, r4, #16
 8001ce4:	2262      	movs	r2, #98	; 0x62
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	f004 ff0a 	bl	8006b00 <memcpy>
 8001cec:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001cf0:	f7ff ff8c 	bl	8001c0c <create_node>
 8001cf4:	60f8      	str	r0, [r7, #12]
	list->tail->next = new_tail;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	68fa      	ldr	r2, [r7, #12]
 8001cfc:	675a      	str	r2, [r3, #116]	; 0x74
	list->tail = new_tail;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	68fa      	ldr	r2, [r7, #12]
 8001d02:	605a      	str	r2, [r3, #4]
	list->length += 1;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	1c5a      	adds	r2, r3, #1
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	609a      	str	r2, [r3, #8]
}
 8001d0e:	bf00      	nop
 8001d10:	3714      	adds	r7, #20
 8001d12:	46bd      	mov	sp, r7
 8001d14:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001d18:	b004      	add	sp, #16
 8001d1a:	4770      	bx	lr
 8001d1c:	20000004 	.word	0x20000004

08001d20 <HAL_UARTEx_RxEventCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	460b      	mov	r3, r1
 8001d2a:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == __SIM_UART->Instance )
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	4b11      	ldr	r3, [pc, #68]	; (8001d78 <HAL_UARTEx_RxEventCallback+0x58>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	429a      	cmp	r2, r3
 8001d38:	d103      	bne.n	8001d42 <HAL_UARTEx_RxEventCallback+0x22>
	{
		SIM_callback(Size);
 8001d3a:	887b      	ldrh	r3, [r7, #2]
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f7fe fca9 	bl	8000694 <SIM_callback>
	}
	if (huart->Instance== __SCFG_UART->Instance)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	4b0d      	ldr	r3, [pc, #52]	; (8001d7c <HAL_UARTEx_RxEventCallback+0x5c>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d103      	bne.n	8001d58 <HAL_UARTEx_RxEventCallback+0x38>
	{
		Serial_CFG_Callback(Size);
 8001d50:	887b      	ldrh	r3, [r7, #2]
 8001d52:	4618      	mov	r0, r3
 8001d54:	f7fe fad0 	bl	80002f8 <Serial_CFG_Callback>
	}

	if (huart->Instance == __LORA_UART->Instance) {
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	4b08      	ldr	r3, [pc, #32]	; (8001d80 <HAL_UARTEx_RxEventCallback+0x60>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	429a      	cmp	r2, r3
 8001d64:	d103      	bne.n	8001d6e <HAL_UARTEx_RxEventCallback+0x4e>
		Lora_callback(Size);
 8001d66:	887b      	ldrh	r3, [r7, #2]
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7ff f8bb 	bl	8000ee4 <Lora_callback>
	}
}
 8001d6e:	bf00      	nop
 8001d70:	3708      	adds	r7, #8
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	20000880 	.word	0x20000880
 8001d7c:	20000150 	.word	0x20000150
 8001d80:	20001100 	.word	0x20001100

08001d84 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b082      	sub	sp, #8
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == RTC_ALARM_TRIGGER_Pin)	{
 8001d8e:	88fb      	ldrh	r3, [r7, #6]
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d114      	bne.n	8001dbe <HAL_GPIO_EXTI_Callback+0x3a>
		alarmflag = 0;
 8001d94:	4b0c      	ldr	r3, [pc, #48]	; (8001dc8 <HAL_GPIO_EXTI_Callback+0x44>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	701a      	strb	r2, [r3, #0]
		// turn OFF MBA
		HAL_GPIO_TogglePin(MBA_CONTACTOR_GPIO_Port, MBA_CONTACTOR_Pin);
 8001d9a:	2110      	movs	r1, #16
 8001d9c:	480b      	ldr	r0, [pc, #44]	; (8001dcc <HAL_GPIO_EXTI_Callback+0x48>)
 8001d9e:	f001 fe8d 	bl	8003abc <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001da2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001da6:	4809      	ldr	r0, [pc, #36]	; (8001dcc <HAL_GPIO_EXTI_Callback+0x48>)
 8001da8:	f001 fe88 	bl	8003abc <HAL_GPIO_TogglePin>
		DS3231_ClearAlarm1();
 8001dac:	f7fe ffa8 	bl	8000d00 <DS3231_ClearAlarm1>
		// Change to Calib mode
		setStationMode(STATION_MODE_CALIB);
 8001db0:	2001      	movs	r0, #1
 8001db2:	f000 f80d 	bl	8001dd0 <setStationMode>
		triggerTaskflag(TASK_START_CALIB, FLAG_EN);
 8001db6:	2101      	movs	r1, #1
 8001db8:	2003      	movs	r0, #3
 8001dba:	f7ff fc1d 	bl	80015f8 <triggerTaskflag>
	}
}
 8001dbe:	bf00      	nop
 8001dc0:	3708      	adds	r7, #8
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	20000870 	.word	0x20000870
 8001dcc:	40010800 	.word	0x40010800

08001dd0 <setStationMode>:
void setStationMode(Station_Mode_t mode)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	71fb      	strb	r3, [r7, #7]
	myStation.StMODE = mode;
 8001dda:	4a04      	ldr	r2, [pc, #16]	; (8001dec <setStationMode+0x1c>)
 8001ddc:	79fb      	ldrb	r3, [r7, #7]
 8001dde:	7013      	strb	r3, [r2, #0]
}
 8001de0:	bf00      	nop
 8001de2:	370c      	adds	r7, #12
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bc80      	pop	{r7}
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	20000078 	.word	0x20000078

08001df0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001df0:	b5b0      	push	{r4, r5, r7, lr}
 8001df2:	f5ad 7d08 	sub.w	sp, sp, #544	; 0x220
 8001df6:	af1a      	add	r7, sp, #104	; 0x68
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001df8:	f000 fe7c 	bl	8002af4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001dfc:	f000 f96e 	bl	80020dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e00:	f7ff fdea 	bl	80019d8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001e04:	f7ff fd68 	bl	80018d8 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001e08:	f000 fb98 	bl	800253c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001e0c:	f000 fbc0 	bl	8002590 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001e10:	f7ff fe7e 	bl	8001b10 <MX_I2C1_Init>
  MX_ADC1_Init();
 8001e14:	f7ff fce6 	bl	80017e4 <MX_ADC1_Init>
  MX_USART3_UART_Init();
 8001e18:	f000 fbe4 	bl	80025e4 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8001e1c:	f000 fb20 	bl	8002460 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  SSnode_list =list_create();
 8001e20:	f7ff ff14 	bl	8001c4c <list_create>
 8001e24:	4603      	mov	r3, r0
 8001e26:	4a9b      	ldr	r2, [pc, #620]	; (8002094 <main+0x2a4>)
 8001e28:	6013      	str	r3, [r2, #0]
  /* For Emulator only */
  uint8_t Sensorcalibvalue1 [101];
  for (uint8_t i =0 ; i < 100 ; i++)	{
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	f887 31b7 	strb.w	r3, [r7, #439]	; 0x1b7
 8001e30:	e01a      	b.n	8001e68 <main+0x78>
	  Sensorcalibvalue1[i] = rand() % 255 ;
 8001e32:	f004 ff57 	bl	8006ce4 <rand>
 8001e36:	4602      	mov	r2, r0
 8001e38:	4b97      	ldr	r3, [pc, #604]	; (8002098 <main+0x2a8>)
 8001e3a:	fb83 1302 	smull	r1, r3, r3, r2
 8001e3e:	4413      	add	r3, r2
 8001e40:	11d9      	asrs	r1, r3, #7
 8001e42:	17d3      	asrs	r3, r2, #31
 8001e44:	1ac9      	subs	r1, r1, r3
 8001e46:	460b      	mov	r3, r1
 8001e48:	021b      	lsls	r3, r3, #8
 8001e4a:	1a5b      	subs	r3, r3, r1
 8001e4c:	1ad1      	subs	r1, r2, r3
 8001e4e:	f897 31b7 	ldrb.w	r3, [r7, #439]	; 0x1b7
 8001e52:	b2ca      	uxtb	r2, r1
 8001e54:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001e58:	443b      	add	r3, r7
 8001e5a:	f803 2c68 	strb.w	r2, [r3, #-104]
  for (uint8_t i =0 ; i < 100 ; i++)	{
 8001e5e:	f897 31b7 	ldrb.w	r3, [r7, #439]	; 0x1b7
 8001e62:	3301      	adds	r3, #1
 8001e64:	f887 31b7 	strb.w	r3, [r7, #439]	; 0x1b7
 8001e68:	f897 31b7 	ldrb.w	r3, [r7, #439]	; 0x1b7
 8001e6c:	2b63      	cmp	r3, #99	; 0x63
 8001e6e:	d9e0      	bls.n	8001e32 <main+0x42>
  }
  SensorNode_t firstSensornode = {0x51, 0, V_p, 10, SENSOR_ACTIVE , 1 };
 8001e70:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001e74:	2272      	movs	r2, #114	; 0x72
 8001e76:	2100      	movs	r1, #0
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f004 fe4f 	bl	8006b1c <memset>
 8001e7e:	2351      	movs	r3, #81	; 0x51
 8001e80:	f887 30dc 	strb.w	r3, [r7, #220]	; 0xdc
 8001e84:	2301      	movs	r3, #1
 8001e86:	f887 30e0 	strb.w	r3, [r7, #224]	; 0xe0
 8001e8a:	230a      	movs	r3, #10
 8001e8c:	f8a7 30e2 	strh.w	r3, [r7, #226]	; 0xe2
 8001e90:	2301      	movs	r3, #1
 8001e92:	f887 30e4 	strb.w	r3, [r7, #228]	; 0xe4
 8001e96:	2301      	movs	r3, #1
 8001e98:	f887 30e5 	strb.w	r3, [r7, #229]	; 0xe5
  memcpy(firstSensornode.dataCalibBuffer, Sensorcalibvalue1, 100);
 8001e9c:	f507 71a8 	add.w	r1, r7, #336	; 0x150
 8001ea0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001ea4:	330c      	adds	r3, #12
 8001ea6:	2264      	movs	r2, #100	; 0x64
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f004 fe29 	bl	8006b00 <memcpy>
  list_append(SSnode_list, firstSensornode);
 8001eae:	4b79      	ldr	r3, [pc, #484]	; (8002094 <main+0x2a4>)
 8001eb0:	681c      	ldr	r4, [r3, #0]
 8001eb2:	4668      	mov	r0, sp
 8001eb4:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001eb8:	2266      	movs	r2, #102	; 0x66
 8001eba:	4619      	mov	r1, r3
 8001ebc:	f004 fe20 	bl	8006b00 <memcpy>
 8001ec0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001ec4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ec6:	4620      	mov	r0, r4
 8001ec8:	f7ff fef6 	bl	8001cb8 <list_append>

  uint8_t Sensorcalibvalue2 [101];
  for (uint8_t i =0 ; i < 100 ; i++)	{
 8001ecc:	2300      	movs	r3, #0
 8001ece:	f887 31b6 	strb.w	r3, [r7, #438]	; 0x1b6
 8001ed2:	e01a      	b.n	8001f0a <main+0x11a>
	  Sensorcalibvalue2[i] = rand() % 255 ;
 8001ed4:	f004 ff06 	bl	8006ce4 <rand>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	4b6f      	ldr	r3, [pc, #444]	; (8002098 <main+0x2a8>)
 8001edc:	fb83 1302 	smull	r1, r3, r3, r2
 8001ee0:	4413      	add	r3, r2
 8001ee2:	11d9      	asrs	r1, r3, #7
 8001ee4:	17d3      	asrs	r3, r2, #31
 8001ee6:	1ac9      	subs	r1, r1, r3
 8001ee8:	460b      	mov	r3, r1
 8001eea:	021b      	lsls	r3, r3, #8
 8001eec:	1a5b      	subs	r3, r3, r1
 8001eee:	1ad1      	subs	r1, r2, r3
 8001ef0:	f897 31b6 	ldrb.w	r3, [r7, #438]	; 0x1b6
 8001ef4:	b2c9      	uxtb	r1, r1
 8001ef6:	f507 72dc 	add.w	r2, r7, #440	; 0x1b8
 8001efa:	f5a2 72a2 	sub.w	r2, r2, #324	; 0x144
 8001efe:	54d1      	strb	r1, [r2, r3]
  for (uint8_t i =0 ; i < 100 ; i++)	{
 8001f00:	f897 31b6 	ldrb.w	r3, [r7, #438]	; 0x1b6
 8001f04:	3301      	adds	r3, #1
 8001f06:	f887 31b6 	strb.w	r3, [r7, #438]	; 0x1b6
 8001f0a:	f897 31b6 	ldrb.w	r3, [r7, #438]	; 0x1b6
 8001f0e:	2b63      	cmp	r3, #99	; 0x63
 8001f10:	d9e0      	bls.n	8001ed4 <main+0xe4>
  }
  SensorNode_t secondSensornode = {0x52, 0, V_p, 10, SENSOR_ACTIVE , 1};
 8001f12:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8001f16:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	2372      	movs	r3, #114	; 0x72
 8001f1e:	461a      	mov	r2, r3
 8001f20:	2100      	movs	r1, #0
 8001f22:	f004 fdfb 	bl	8006b1c <memset>
 8001f26:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8001f2a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001f2e:	2252      	movs	r2, #82	; 0x52
 8001f30:	701a      	strb	r2, [r3, #0]
 8001f32:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8001f36:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	711a      	strb	r2, [r3, #4]
 8001f3e:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8001f42:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001f46:	220a      	movs	r2, #10
 8001f48:	80da      	strh	r2, [r3, #6]
 8001f4a:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8001f4e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001f52:	2201      	movs	r2, #1
 8001f54:	721a      	strb	r2, [r3, #8]
 8001f56:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8001f5a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001f5e:	2201      	movs	r2, #1
 8001f60:	725a      	strb	r2, [r3, #9]
  memcpy(secondSensornode.dataCalibBuffer, Sensorcalibvalue2, 100);
 8001f62:	f107 0174 	add.w	r1, r7, #116	; 0x74
 8001f66:	463b      	mov	r3, r7
 8001f68:	330c      	adds	r3, #12
 8001f6a:	2264      	movs	r2, #100	; 0x64
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f004 fdc7 	bl	8006b00 <memcpy>
  list_append(SSnode_list, secondSensornode);
 8001f72:	4b48      	ldr	r3, [pc, #288]	; (8002094 <main+0x2a4>)
 8001f74:	681d      	ldr	r5, [r3, #0]
 8001f76:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8001f7a:	f5a3 74dc 	sub.w	r4, r3, #440	; 0x1b8
 8001f7e:	4668      	mov	r0, sp
 8001f80:	f104 030c 	add.w	r3, r4, #12
 8001f84:	2266      	movs	r2, #102	; 0x66
 8001f86:	4619      	mov	r1, r3
 8001f88:	f004 fdba 	bl	8006b00 <memcpy>
 8001f8c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8001f90:	4628      	mov	r0, r5
 8001f92:	f7ff fe91 	bl	8001cb8 <list_append>
  /**********************************************************************/

  myStation.ssNode_list = SSnode_list;
 8001f96:	4b3f      	ldr	r3, [pc, #252]	; (8002094 <main+0x2a4>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a40      	ldr	r2, [pc, #256]	; (800209c <main+0x2ac>)
 8001f9c:	6093      	str	r3, [r2, #8]

  // Get station ID from flash
  myStation.stID = (uint8_t)Flash_Read_NUM(FLASH_PAGE_127);
 8001f9e:	4840      	ldr	r0, [pc, #256]	; (80020a0 <main+0x2b0>)
 8001fa0:	f7ff fd03 	bl	80019aa <Flash_Read_NUM>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f7fe f8d8 	bl	800015c <__aeabi_f2uiz>
 8001fac:	4603      	mov	r3, r0
 8001fae:	b2da      	uxtb	r2, r3
 8001fb0:	4b3a      	ldr	r3, [pc, #232]	; (800209c <main+0x2ac>)
 8001fb2:	705a      	strb	r2, [r3, #1]

	mySIM.mqttServer.host = "tcp://broker.hivemq.com";
 8001fb4:	4b3b      	ldr	r3, [pc, #236]	; (80020a4 <main+0x2b4>)
 8001fb6:	4a3c      	ldr	r2, [pc, #240]	; (80020a8 <main+0x2b8>)
 8001fb8:	60da      	str	r2, [r3, #12]
	mySIM.mqttServer.port = 1883;
 8001fba:	4b3a      	ldr	r3, [pc, #232]	; (80020a4 <main+0x2b4>)
 8001fbc:	f240 725b 	movw	r2, #1883	; 0x75b
 8001fc0:	831a      	strh	r2, [r3, #24]
	mySIM.mqttServer.willtopic = "unnormal_disconnect";
 8001fc2:	4b38      	ldr	r3, [pc, #224]	; (80020a4 <main+0x2b4>)
 8001fc4:	4a39      	ldr	r2, [pc, #228]	; (80020ac <main+0x2bc>)
 8001fc6:	611a      	str	r2, [r3, #16]
	mySIM.mqttServer.willmsg = (uint8_t*)malloc(sizeof(myStation.stID));
 8001fc8:	2001      	movs	r0, #1
 8001fca:	f004 fd79 	bl	8006ac0 <malloc>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	461a      	mov	r2, r3
 8001fd2:	4b34      	ldr	r3, [pc, #208]	; (80020a4 <main+0x2b4>)
 8001fd4:	615a      	str	r2, [r3, #20]
	sprintf((char*)mySIM.mqttServer.willmsg,"%d",myStation.stID);
 8001fd6:	4b33      	ldr	r3, [pc, #204]	; (80020a4 <main+0x2b4>)
 8001fd8:	695b      	ldr	r3, [r3, #20]
 8001fda:	4a30      	ldr	r2, [pc, #192]	; (800209c <main+0x2ac>)
 8001fdc:	7852      	ldrb	r2, [r2, #1]
 8001fde:	4934      	ldr	r1, [pc, #208]	; (80020b0 <main+0x2c0>)
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f004 fecd 	bl	8006d80 <siprintf>
	mySIM.mqttClient.keepAliveInterval = 10;
 8001fe6:	4b2f      	ldr	r3, [pc, #188]	; (80020a4 <main+0x2b4>)
 8001fe8:	220a      	movs	r2, #10
 8001fea:	851a      	strh	r2, [r3, #40]	; 0x28
	mySIM.mqttClient.clientID = (char*)malloc(sizeof(myStation.stID));
 8001fec:	2001      	movs	r0, #1
 8001fee:	f004 fd67 	bl	8006ac0 <malloc>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	461a      	mov	r2, r3
 8001ff6:	4b2b      	ldr	r3, [pc, #172]	; (80020a4 <main+0x2b4>)
 8001ff8:	625a      	str	r2, [r3, #36]	; 0x24
	sprintf((char*)mySIM.mqttClient.clientID,"%d",myStation.stID);
 8001ffa:	4b2a      	ldr	r3, [pc, #168]	; (80020a4 <main+0x2b4>)
 8001ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ffe:	4a27      	ldr	r2, [pc, #156]	; (800209c <main+0x2ac>)
 8002000:	7852      	ldrb	r2, [r2, #1]
 8002002:	492b      	ldr	r1, [pc, #172]	; (80020b0 <main+0x2c0>)
 8002004:	4618      	mov	r0, r3
 8002006:	f004 febb 	bl	8006d80 <siprintf>
	mySIM.mqttReceive.qos =1;
 800200a:	4b26      	ldr	r3, [pc, #152]	; (80020a4 <main+0x2b4>)
 800200c:	2201      	movs	r2, #1
 800200e:	631a      	str	r2, [r3, #48]	; 0x30
	mySIM.mqttServer.connect=0;
 8002010:	4b24      	ldr	r3, [pc, #144]	; (80020a4 <main+0x2b4>)
 8002012:	2200      	movs	r2, #0
 8002014:	769a      	strb	r2, [r3, #26]

	mySIM.sms = mySMS;
 8002016:	4b23      	ldr	r3, [pc, #140]	; (80020a4 <main+0x2b4>)
 8002018:	4a26      	ldr	r2, [pc, #152]	; (80020b4 <main+0x2c4>)
 800201a:	f203 43bc 	addw	r3, r3, #1212	; 0x4bc
 800201e:	4611      	mov	r1, r2
 8002020:	f44f 6208 	mov.w	r2, #2176	; 0x880
 8002024:	4618      	mov	r0, r3
 8002026:	f004 fd6b 	bl	8006b00 <memcpy>

	initTask(&myStation);
 800202a:	481c      	ldr	r0, [pc, #112]	; (800209c <main+0x2ac>)
 800202c:	f7ff f9d0 	bl	80013d0 <initTask>
	// Lora
	initLora(&huart3, &hdma_usart3_rx);
 8002030:	4921      	ldr	r1, [pc, #132]	; (80020b8 <main+0x2c8>)
 8002032:	4822      	ldr	r0, [pc, #136]	; (80020bc <main+0x2cc>)
 8002034:	f7fe ff16 	bl	8000e64 <initLora>

	initmyLora(&myStation);
 8002038:	4818      	ldr	r0, [pc, #96]	; (800209c <main+0x2ac>)
 800203a:	f7fe ff29 	bl	8000e90 <initmyLora>
	// GPS
	myGPS.getFlag = 0;
 800203e:	4a20      	ldr	r2, [pc, #128]	; (80020c0 <main+0x2d0>)
 8002040:	79d3      	ldrb	r3, [r2, #7]
 8002042:	f36f 0300 	bfc	r3, #0, #1
 8002046:	71d3      	strb	r3, [r2, #7]
	initGPS(&myStation, &myRTC);
 8002048:	491e      	ldr	r1, [pc, #120]	; (80020c4 <main+0x2d4>)
 800204a:	4814      	ldr	r0, [pc, #80]	; (800209c <main+0x2ac>)
 800204c:	f7fe f924 	bl	8000298 <initGPS>

	initSIM(&huart1, &hdma_usart1_rx, &mySIM);
 8002050:	4a14      	ldr	r2, [pc, #80]	; (80020a4 <main+0x2b4>)
 8002052:	491d      	ldr	r1, [pc, #116]	; (80020c8 <main+0x2d8>)
 8002054:	481d      	ldr	r0, [pc, #116]	; (80020cc <main+0x2dc>)
 8002056:	f7fe fae5 	bl	8000624 <initSIM>

	// Init Serial log
	init_Serial_log(&huart2);
 800205a:	481d      	ldr	r0, [pc, #116]	; (80020d0 <main+0x2e0>)
 800205c:	f7fe faa8 	bl	80005b0 <init_Serial_log>

	// Init MQTT app
	initApp_MQTT(&myStation, &mySIM);
 8002060:	4910      	ldr	r1, [pc, #64]	; (80020a4 <main+0x2b4>)
 8002062:	480e      	ldr	r0, [pc, #56]	; (800209c <main+0x2ac>)
 8002064:	f7fe f8ae 	bl	80001c4 <initApp_MQTT>

	initApp_MCU(&myStation, &mySIM);
 8002068:	490e      	ldr	r1, [pc, #56]	; (80020a4 <main+0x2b4>)
 800206a:	480c      	ldr	r0, [pc, #48]	; (800209c <main+0x2ac>)
 800206c:	f7fe f896 	bl	800019c <initApp_MCU>

	initApp_SMS(&mySIM.sms);
 8002070:	4818      	ldr	r0, [pc, #96]	; (80020d4 <main+0x2e4>)
 8002072:	f7fe f8d7 	bl	8000224 <initApp_SMS>

	init_App_Serial(&myStation);
 8002076:	4809      	ldr	r0, [pc, #36]	; (800209c <main+0x2ac>)
 8002078:	f7fe f8e2 	bl	8000240 <init_App_Serial>

	// Init RTC module (DS3231)
	DS3231_Init(&hi2c1);
 800207c:	4816      	ldr	r0, [pc, #88]	; (80020d8 <main+0x2e8>)
 800207e:	f7fe fcc7 	bl	8000a10 <DS3231_Init>

	LCD_Init();
 8002082:	f000 fc3d 	bl	8002900 <LCD_Init>
//	  processApp_MCU();
//	  processApp_MQTT();
//	  processApp_SMS();
//	  LCD_PrintNumber(5);
//	  processing_CMD(&myStation.stID);
	  testSynchronize();
 8002086:	f7fe fa51 	bl	800052c <testSynchronize>
//	  LCD_GotoXY(3, 2);
//	  LCD_Print((char*)RTC_buffer);
//	  testSMS();
//	  myStation.getGPStimeflag = 1;
//	  HAL_GPIO_TogglePin(MBA_CONTACTOR_GPIO_Port, MBA_CONTACTOR_Pin);
	  HAL_Delay(200);
 800208a:	20c8      	movs	r0, #200	; 0xc8
 800208c:	f000 fd94 	bl	8002bb8 <HAL_Delay>
	  testSynchronize();
 8002090:	e7f9      	b.n	8002086 <main+0x296>
 8002092:	bf00      	nop
 8002094:	200028dc 	.word	0x200028dc
 8002098:	80808081 	.word	0x80808081
 800209c:	20000078 	.word	0x20000078
 80020a0:	0801fc00 	.word	0x0801fc00
 80020a4:	20001320 	.word	0x20001320
 80020a8:	08008750 	.word	0x08008750
 80020ac:	08008768 	.word	0x08008768
 80020b0:	0800877c 	.word	0x0800877c
 80020b4:	2000205c 	.word	0x2000205c
 80020b8:	20002a9c 	.word	0x20002a9c
 80020bc:	200029cc 	.word	0x200029cc
 80020c0:	200028e8 	.word	0x200028e8
 80020c4:	200028e0 	.word	0x200028e0
 80020c8:	20002a14 	.word	0x20002a14
 80020cc:	2000293c 	.word	0x2000293c
 80020d0:	20002984 	.word	0x20002984
 80020d4:	200017dc 	.word	0x200017dc
 80020d8:	200012cc 	.word	0x200012cc

080020dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b094      	sub	sp, #80	; 0x50
 80020e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80020e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020e6:	2228      	movs	r2, #40	; 0x28
 80020e8:	2100      	movs	r1, #0
 80020ea:	4618      	mov	r0, r3
 80020ec:	f004 fd16 	bl	8006b1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020f0:	f107 0314 	add.w	r3, r7, #20
 80020f4:	2200      	movs	r2, #0
 80020f6:	601a      	str	r2, [r3, #0]
 80020f8:	605a      	str	r2, [r3, #4]
 80020fa:	609a      	str	r2, [r3, #8]
 80020fc:	60da      	str	r2, [r3, #12]
 80020fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002100:	1d3b      	adds	r3, r7, #4
 8002102:	2200      	movs	r2, #0
 8002104:	601a      	str	r2, [r3, #0]
 8002106:	605a      	str	r2, [r3, #4]
 8002108:	609a      	str	r2, [r3, #8]
 800210a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800210c:	2301      	movs	r3, #1
 800210e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002110:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002114:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002116:	2300      	movs	r3, #0
 8002118:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800211a:	2301      	movs	r3, #1
 800211c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800211e:	2302      	movs	r3, #2
 8002120:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002122:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002126:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002128:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800212c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800212e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002132:	4618      	mov	r0, r3
 8002134:	f002 fd28 	bl	8004b88 <HAL_RCC_OscConfig>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d001      	beq.n	8002142 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800213e:	f000 f828 	bl	8002192 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002142:	230f      	movs	r3, #15
 8002144:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002146:	2302      	movs	r3, #2
 8002148:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800214a:	2300      	movs	r3, #0
 800214c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800214e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002152:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002154:	2300      	movs	r3, #0
 8002156:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002158:	f107 0314 	add.w	r3, r7, #20
 800215c:	2102      	movs	r1, #2
 800215e:	4618      	mov	r0, r3
 8002160:	f002 ff94 	bl	800508c <HAL_RCC_ClockConfig>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d001      	beq.n	800216e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800216a:	f000 f812 	bl	8002192 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800216e:	2302      	movs	r3, #2
 8002170:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002172:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002176:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002178:	1d3b      	adds	r3, r7, #4
 800217a:	4618      	mov	r0, r3
 800217c:	f003 f914 	bl	80053a8 <HAL_RCCEx_PeriphCLKConfig>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d001      	beq.n	800218a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8002186:	f000 f804 	bl	8002192 <Error_Handler>
  }
}
 800218a:	bf00      	nop
 800218c:	3750      	adds	r7, #80	; 0x50
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}

08002192 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002192:	b480      	push	{r7}
 8002194:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002196:	b672      	cpsid	i
}
 8002198:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800219a:	e7fe      	b.n	800219a <Error_Handler+0x8>

0800219c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800219c:	b480      	push	{r7}
 800219e:	b085      	sub	sp, #20
 80021a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80021a2:	4b15      	ldr	r3, [pc, #84]	; (80021f8 <HAL_MspInit+0x5c>)
 80021a4:	699b      	ldr	r3, [r3, #24]
 80021a6:	4a14      	ldr	r2, [pc, #80]	; (80021f8 <HAL_MspInit+0x5c>)
 80021a8:	f043 0301 	orr.w	r3, r3, #1
 80021ac:	6193      	str	r3, [r2, #24]
 80021ae:	4b12      	ldr	r3, [pc, #72]	; (80021f8 <HAL_MspInit+0x5c>)
 80021b0:	699b      	ldr	r3, [r3, #24]
 80021b2:	f003 0301 	and.w	r3, r3, #1
 80021b6:	60bb      	str	r3, [r7, #8]
 80021b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021ba:	4b0f      	ldr	r3, [pc, #60]	; (80021f8 <HAL_MspInit+0x5c>)
 80021bc:	69db      	ldr	r3, [r3, #28]
 80021be:	4a0e      	ldr	r2, [pc, #56]	; (80021f8 <HAL_MspInit+0x5c>)
 80021c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021c4:	61d3      	str	r3, [r2, #28]
 80021c6:	4b0c      	ldr	r3, [pc, #48]	; (80021f8 <HAL_MspInit+0x5c>)
 80021c8:	69db      	ldr	r3, [r3, #28]
 80021ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ce:	607b      	str	r3, [r7, #4]
 80021d0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80021d2:	4b0a      	ldr	r3, [pc, #40]	; (80021fc <HAL_MspInit+0x60>)
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	60fb      	str	r3, [r7, #12]
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80021de:	60fb      	str	r3, [r7, #12]
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80021e6:	60fb      	str	r3, [r7, #12]
 80021e8:	4a04      	ldr	r2, [pc, #16]	; (80021fc <HAL_MspInit+0x60>)
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021ee:	bf00      	nop
 80021f0:	3714      	adds	r7, #20
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bc80      	pop	{r7}
 80021f6:	4770      	bx	lr
 80021f8:	40021000 	.word	0x40021000
 80021fc:	40010000 	.word	0x40010000

08002200 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002204:	e7fe      	b.n	8002204 <NMI_Handler+0x4>

08002206 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002206:	b480      	push	{r7}
 8002208:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800220a:	e7fe      	b.n	800220a <HardFault_Handler+0x4>

0800220c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002210:	e7fe      	b.n	8002210 <MemManage_Handler+0x4>

08002212 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002212:	b480      	push	{r7}
 8002214:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002216:	e7fe      	b.n	8002216 <BusFault_Handler+0x4>

08002218 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800221c:	e7fe      	b.n	800221c <UsageFault_Handler+0x4>

0800221e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800221e:	b480      	push	{r7}
 8002220:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002222:	bf00      	nop
 8002224:	46bd      	mov	sp, r7
 8002226:	bc80      	pop	{r7}
 8002228:	4770      	bx	lr

0800222a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800222a:	b480      	push	{r7}
 800222c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800222e:	bf00      	nop
 8002230:	46bd      	mov	sp, r7
 8002232:	bc80      	pop	{r7}
 8002234:	4770      	bx	lr

08002236 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002236:	b480      	push	{r7}
 8002238:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800223a:	bf00      	nop
 800223c:	46bd      	mov	sp, r7
 800223e:	bc80      	pop	{r7}
 8002240:	4770      	bx	lr

08002242 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002242:	b580      	push	{r7, lr}
 8002244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002246:	f000 fc9b 	bl	8002b80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800224a:	bf00      	nop
 800224c:	bd80      	pop	{r7, pc}

0800224e <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800224e:	b580      	push	{r7, lr}
 8002250:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RTC_ALARM_TRIGGER_Pin);
 8002252:	2001      	movs	r0, #1
 8002254:	f001 fc4c 	bl	8003af0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002258:	bf00      	nop
 800225a:	bd80      	pop	{r7, pc}

0800225c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002260:	4802      	ldr	r0, [pc, #8]	; (800226c <DMA1_Channel3_IRQHandler+0x10>)
 8002262:	f001 f95b 	bl	800351c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002266:	bf00      	nop
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	20002a9c 	.word	0x20002a9c

08002270 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002274:	4802      	ldr	r0, [pc, #8]	; (8002280 <DMA1_Channel5_IRQHandler+0x10>)
 8002276:	f001 f951 	bl	800351c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800227a:	bf00      	nop
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	20002a14 	.word	0x20002a14

08002284 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002288:	4802      	ldr	r0, [pc, #8]	; (8002294 <DMA1_Channel6_IRQHandler+0x10>)
 800228a:	f001 f947 	bl	800351c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800228e:	bf00      	nop
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	20002a58 	.word	0x20002a58

08002298 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800229c:	4802      	ldr	r0, [pc, #8]	; (80022a8 <USART1_IRQHandler+0x10>)
 800229e:	f003 fcd5 	bl	8005c4c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80022a2:	bf00      	nop
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	2000293c 	.word	0x2000293c

080022ac <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80022b0:	4802      	ldr	r0, [pc, #8]	; (80022bc <USART2_IRQHandler+0x10>)
 80022b2:	f003 fccb 	bl	8005c4c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80022b6:	bf00      	nop
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	20002984 	.word	0x20002984

080022c0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80022c4:	4802      	ldr	r0, [pc, #8]	; (80022d0 <USART3_IRQHandler+0x10>)
 80022c6:	f003 fcc1 	bl	8005c4c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80022ca:	bf00      	nop
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	200029cc 	.word	0x200029cc

080022d4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80022d4:	b480      	push	{r7}
 80022d6:	af00      	add	r7, sp, #0
	return 1;
 80022d8:	2301      	movs	r3, #1
}
 80022da:	4618      	mov	r0, r3
 80022dc:	46bd      	mov	sp, r7
 80022de:	bc80      	pop	{r7}
 80022e0:	4770      	bx	lr

080022e2 <_kill>:

int _kill(int pid, int sig)
{
 80022e2:	b580      	push	{r7, lr}
 80022e4:	b082      	sub	sp, #8
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	6078      	str	r0, [r7, #4]
 80022ea:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80022ec:	f004 fbbe 	bl	8006a6c <__errno>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2216      	movs	r2, #22
 80022f4:	601a      	str	r2, [r3, #0]
	return -1;
 80022f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3708      	adds	r7, #8
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}

08002302 <_exit>:

void _exit (int status)
{
 8002302:	b580      	push	{r7, lr}
 8002304:	b082      	sub	sp, #8
 8002306:	af00      	add	r7, sp, #0
 8002308:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800230a:	f04f 31ff 	mov.w	r1, #4294967295
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f7ff ffe7 	bl	80022e2 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002314:	e7fe      	b.n	8002314 <_exit+0x12>

08002316 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002316:	b580      	push	{r7, lr}
 8002318:	b086      	sub	sp, #24
 800231a:	af00      	add	r7, sp, #0
 800231c:	60f8      	str	r0, [r7, #12]
 800231e:	60b9      	str	r1, [r7, #8]
 8002320:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002322:	2300      	movs	r3, #0
 8002324:	617b      	str	r3, [r7, #20]
 8002326:	e00a      	b.n	800233e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002328:	f3af 8000 	nop.w
 800232c:	4601      	mov	r1, r0
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	1c5a      	adds	r2, r3, #1
 8002332:	60ba      	str	r2, [r7, #8]
 8002334:	b2ca      	uxtb	r2, r1
 8002336:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	3301      	adds	r3, #1
 800233c:	617b      	str	r3, [r7, #20]
 800233e:	697a      	ldr	r2, [r7, #20]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	429a      	cmp	r2, r3
 8002344:	dbf0      	blt.n	8002328 <_read+0x12>
	}

return len;
 8002346:	687b      	ldr	r3, [r7, #4]
}
 8002348:	4618      	mov	r0, r3
 800234a:	3718      	adds	r7, #24
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}

08002350 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b086      	sub	sp, #24
 8002354:	af00      	add	r7, sp, #0
 8002356:	60f8      	str	r0, [r7, #12]
 8002358:	60b9      	str	r1, [r7, #8]
 800235a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800235c:	2300      	movs	r3, #0
 800235e:	617b      	str	r3, [r7, #20]
 8002360:	e009      	b.n	8002376 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	1c5a      	adds	r2, r3, #1
 8002366:	60ba      	str	r2, [r7, #8]
 8002368:	781b      	ldrb	r3, [r3, #0]
 800236a:	4618      	mov	r0, r3
 800236c:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	3301      	adds	r3, #1
 8002374:	617b      	str	r3, [r7, #20]
 8002376:	697a      	ldr	r2, [r7, #20]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	429a      	cmp	r2, r3
 800237c:	dbf1      	blt.n	8002362 <_write+0x12>
	}
	return len;
 800237e:	687b      	ldr	r3, [r7, #4]
}
 8002380:	4618      	mov	r0, r3
 8002382:	3718      	adds	r7, #24
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}

08002388 <_close>:

int _close(int file)
{
 8002388:	b480      	push	{r7}
 800238a:	b083      	sub	sp, #12
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
	return -1;
 8002390:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002394:	4618      	mov	r0, r3
 8002396:	370c      	adds	r7, #12
 8002398:	46bd      	mov	sp, r7
 800239a:	bc80      	pop	{r7}
 800239c:	4770      	bx	lr

0800239e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800239e:	b480      	push	{r7}
 80023a0:	b083      	sub	sp, #12
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	6078      	str	r0, [r7, #4]
 80023a6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80023ae:	605a      	str	r2, [r3, #4]
	return 0;
 80023b0:	2300      	movs	r3, #0
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	370c      	adds	r7, #12
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bc80      	pop	{r7}
 80023ba:	4770      	bx	lr

080023bc <_isatty>:

int _isatty(int file)
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
	return 1;
 80023c4:	2301      	movs	r3, #1
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	370c      	adds	r7, #12
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bc80      	pop	{r7}
 80023ce:	4770      	bx	lr

080023d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b085      	sub	sp, #20
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	60f8      	str	r0, [r7, #12]
 80023d8:	60b9      	str	r1, [r7, #8]
 80023da:	607a      	str	r2, [r7, #4]
	return 0;
 80023dc:	2300      	movs	r3, #0
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3714      	adds	r7, #20
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bc80      	pop	{r7}
 80023e6:	4770      	bx	lr

080023e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b086      	sub	sp, #24
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023f0:	4a14      	ldr	r2, [pc, #80]	; (8002444 <_sbrk+0x5c>)
 80023f2:	4b15      	ldr	r3, [pc, #84]	; (8002448 <_sbrk+0x60>)
 80023f4:	1ad3      	subs	r3, r2, r3
 80023f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023fc:	4b13      	ldr	r3, [pc, #76]	; (800244c <_sbrk+0x64>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d102      	bne.n	800240a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002404:	4b11      	ldr	r3, [pc, #68]	; (800244c <_sbrk+0x64>)
 8002406:	4a12      	ldr	r2, [pc, #72]	; (8002450 <_sbrk+0x68>)
 8002408:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800240a:	4b10      	ldr	r3, [pc, #64]	; (800244c <_sbrk+0x64>)
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4413      	add	r3, r2
 8002412:	693a      	ldr	r2, [r7, #16]
 8002414:	429a      	cmp	r2, r3
 8002416:	d207      	bcs.n	8002428 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002418:	f004 fb28 	bl	8006a6c <__errno>
 800241c:	4603      	mov	r3, r0
 800241e:	220c      	movs	r2, #12
 8002420:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002422:	f04f 33ff 	mov.w	r3, #4294967295
 8002426:	e009      	b.n	800243c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002428:	4b08      	ldr	r3, [pc, #32]	; (800244c <_sbrk+0x64>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800242e:	4b07      	ldr	r3, [pc, #28]	; (800244c <_sbrk+0x64>)
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4413      	add	r3, r2
 8002436:	4a05      	ldr	r2, [pc, #20]	; (800244c <_sbrk+0x64>)
 8002438:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800243a:	68fb      	ldr	r3, [r7, #12]
}
 800243c:	4618      	mov	r0, r3
 800243e:	3718      	adds	r7, #24
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}
 8002444:	20005000 	.word	0x20005000
 8002448:	00000400 	.word	0x00000400
 800244c:	200028f0 	.word	0x200028f0
 8002450:	20002af8 	.word	0x20002af8

08002454 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002454:	b480      	push	{r7}
 8002456:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002458:	bf00      	nop
 800245a:	46bd      	mov	sp, r7
 800245c:	bc80      	pop	{r7}
 800245e:	4770      	bx	lr

08002460 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b086      	sub	sp, #24
 8002464:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002466:	f107 0308 	add.w	r3, r7, #8
 800246a:	2200      	movs	r2, #0
 800246c:	601a      	str	r2, [r3, #0]
 800246e:	605a      	str	r2, [r3, #4]
 8002470:	609a      	str	r2, [r3, #8]
 8002472:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002474:	463b      	mov	r3, r7
 8002476:	2200      	movs	r2, #0
 8002478:	601a      	str	r2, [r3, #0]
 800247a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800247c:	4b1e      	ldr	r3, [pc, #120]	; (80024f8 <MX_TIM1_Init+0x98>)
 800247e:	4a1f      	ldr	r2, [pc, #124]	; (80024fc <MX_TIM1_Init+0x9c>)
 8002480:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8002482:	4b1d      	ldr	r3, [pc, #116]	; (80024f8 <MX_TIM1_Init+0x98>)
 8002484:	2247      	movs	r2, #71	; 0x47
 8002486:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002488:	4b1b      	ldr	r3, [pc, #108]	; (80024f8 <MX_TIM1_Init+0x98>)
 800248a:	2200      	movs	r2, #0
 800248c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xFFFF-1;
 800248e:	4b1a      	ldr	r3, [pc, #104]	; (80024f8 <MX_TIM1_Init+0x98>)
 8002490:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002494:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002496:	4b18      	ldr	r3, [pc, #96]	; (80024f8 <MX_TIM1_Init+0x98>)
 8002498:	2200      	movs	r2, #0
 800249a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800249c:	4b16      	ldr	r3, [pc, #88]	; (80024f8 <MX_TIM1_Init+0x98>)
 800249e:	2200      	movs	r2, #0
 80024a0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024a2:	4b15      	ldr	r3, [pc, #84]	; (80024f8 <MX_TIM1_Init+0x98>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80024a8:	4813      	ldr	r0, [pc, #76]	; (80024f8 <MX_TIM1_Init+0x98>)
 80024aa:	f003 f833 	bl	8005514 <HAL_TIM_Base_Init>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d001      	beq.n	80024b8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80024b4:	f7ff fe6d 	bl	8002192 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024bc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80024be:	f107 0308 	add.w	r3, r7, #8
 80024c2:	4619      	mov	r1, r3
 80024c4:	480c      	ldr	r0, [pc, #48]	; (80024f8 <MX_TIM1_Init+0x98>)
 80024c6:	f003 f874 	bl	80055b2 <HAL_TIM_ConfigClockSource>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d001      	beq.n	80024d4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80024d0:	f7ff fe5f 	bl	8002192 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024d4:	2300      	movs	r3, #0
 80024d6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024d8:	2300      	movs	r3, #0
 80024da:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80024dc:	463b      	mov	r3, r7
 80024de:	4619      	mov	r1, r3
 80024e0:	4805      	ldr	r0, [pc, #20]	; (80024f8 <MX_TIM1_Init+0x98>)
 80024e2:	f003 fa25 	bl	8005930 <HAL_TIMEx_MasterConfigSynchronization>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d001      	beq.n	80024f0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80024ec:	f7ff fe51 	bl	8002192 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80024f0:	bf00      	nop
 80024f2:	3718      	adds	r7, #24
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	200028f4 	.word	0x200028f4
 80024fc:	40012c00 	.word	0x40012c00

08002500 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002500:	b480      	push	{r7}
 8002502:	b085      	sub	sp, #20
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a09      	ldr	r2, [pc, #36]	; (8002534 <HAL_TIM_Base_MspInit+0x34>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d10b      	bne.n	800252a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002512:	4b09      	ldr	r3, [pc, #36]	; (8002538 <HAL_TIM_Base_MspInit+0x38>)
 8002514:	699b      	ldr	r3, [r3, #24]
 8002516:	4a08      	ldr	r2, [pc, #32]	; (8002538 <HAL_TIM_Base_MspInit+0x38>)
 8002518:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800251c:	6193      	str	r3, [r2, #24]
 800251e:	4b06      	ldr	r3, [pc, #24]	; (8002538 <HAL_TIM_Base_MspInit+0x38>)
 8002520:	699b      	ldr	r3, [r3, #24]
 8002522:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002526:	60fb      	str	r3, [r7, #12]
 8002528:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800252a:	bf00      	nop
 800252c:	3714      	adds	r7, #20
 800252e:	46bd      	mov	sp, r7
 8002530:	bc80      	pop	{r7}
 8002532:	4770      	bx	lr
 8002534:	40012c00 	.word	0x40012c00
 8002538:	40021000 	.word	0x40021000

0800253c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002540:	4b11      	ldr	r3, [pc, #68]	; (8002588 <MX_USART1_UART_Init+0x4c>)
 8002542:	4a12      	ldr	r2, [pc, #72]	; (800258c <MX_USART1_UART_Init+0x50>)
 8002544:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002546:	4b10      	ldr	r3, [pc, #64]	; (8002588 <MX_USART1_UART_Init+0x4c>)
 8002548:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800254c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800254e:	4b0e      	ldr	r3, [pc, #56]	; (8002588 <MX_USART1_UART_Init+0x4c>)
 8002550:	2200      	movs	r2, #0
 8002552:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002554:	4b0c      	ldr	r3, [pc, #48]	; (8002588 <MX_USART1_UART_Init+0x4c>)
 8002556:	2200      	movs	r2, #0
 8002558:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800255a:	4b0b      	ldr	r3, [pc, #44]	; (8002588 <MX_USART1_UART_Init+0x4c>)
 800255c:	2200      	movs	r2, #0
 800255e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002560:	4b09      	ldr	r3, [pc, #36]	; (8002588 <MX_USART1_UART_Init+0x4c>)
 8002562:	220c      	movs	r2, #12
 8002564:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002566:	4b08      	ldr	r3, [pc, #32]	; (8002588 <MX_USART1_UART_Init+0x4c>)
 8002568:	2200      	movs	r2, #0
 800256a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800256c:	4b06      	ldr	r3, [pc, #24]	; (8002588 <MX_USART1_UART_Init+0x4c>)
 800256e:	2200      	movs	r2, #0
 8002570:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002572:	4805      	ldr	r0, [pc, #20]	; (8002588 <MX_USART1_UART_Init+0x4c>)
 8002574:	f003 fa3a 	bl	80059ec <HAL_UART_Init>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d001      	beq.n	8002582 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800257e:	f7ff fe08 	bl	8002192 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002582:	bf00      	nop
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	2000293c 	.word	0x2000293c
 800258c:	40013800 	.word	0x40013800

08002590 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002594:	4b11      	ldr	r3, [pc, #68]	; (80025dc <MX_USART2_UART_Init+0x4c>)
 8002596:	4a12      	ldr	r2, [pc, #72]	; (80025e0 <MX_USART2_UART_Init+0x50>)
 8002598:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800259a:	4b10      	ldr	r3, [pc, #64]	; (80025dc <MX_USART2_UART_Init+0x4c>)
 800259c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80025a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80025a2:	4b0e      	ldr	r3, [pc, #56]	; (80025dc <MX_USART2_UART_Init+0x4c>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80025a8:	4b0c      	ldr	r3, [pc, #48]	; (80025dc <MX_USART2_UART_Init+0x4c>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80025ae:	4b0b      	ldr	r3, [pc, #44]	; (80025dc <MX_USART2_UART_Init+0x4c>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80025b4:	4b09      	ldr	r3, [pc, #36]	; (80025dc <MX_USART2_UART_Init+0x4c>)
 80025b6:	220c      	movs	r2, #12
 80025b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025ba:	4b08      	ldr	r3, [pc, #32]	; (80025dc <MX_USART2_UART_Init+0x4c>)
 80025bc:	2200      	movs	r2, #0
 80025be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80025c0:	4b06      	ldr	r3, [pc, #24]	; (80025dc <MX_USART2_UART_Init+0x4c>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80025c6:	4805      	ldr	r0, [pc, #20]	; (80025dc <MX_USART2_UART_Init+0x4c>)
 80025c8:	f003 fa10 	bl	80059ec <HAL_UART_Init>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d001      	beq.n	80025d6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80025d2:	f7ff fdde 	bl	8002192 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80025d6:	bf00      	nop
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	20002984 	.word	0x20002984
 80025e0:	40004400 	.word	0x40004400

080025e4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80025e8:	4b11      	ldr	r3, [pc, #68]	; (8002630 <MX_USART3_UART_Init+0x4c>)
 80025ea:	4a12      	ldr	r2, [pc, #72]	; (8002634 <MX_USART3_UART_Init+0x50>)
 80025ec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80025ee:	4b10      	ldr	r3, [pc, #64]	; (8002630 <MX_USART3_UART_Init+0x4c>)
 80025f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80025f4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80025f6:	4b0e      	ldr	r3, [pc, #56]	; (8002630 <MX_USART3_UART_Init+0x4c>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80025fc:	4b0c      	ldr	r3, [pc, #48]	; (8002630 <MX_USART3_UART_Init+0x4c>)
 80025fe:	2200      	movs	r2, #0
 8002600:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002602:	4b0b      	ldr	r3, [pc, #44]	; (8002630 <MX_USART3_UART_Init+0x4c>)
 8002604:	2200      	movs	r2, #0
 8002606:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002608:	4b09      	ldr	r3, [pc, #36]	; (8002630 <MX_USART3_UART_Init+0x4c>)
 800260a:	220c      	movs	r2, #12
 800260c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800260e:	4b08      	ldr	r3, [pc, #32]	; (8002630 <MX_USART3_UART_Init+0x4c>)
 8002610:	2200      	movs	r2, #0
 8002612:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002614:	4b06      	ldr	r3, [pc, #24]	; (8002630 <MX_USART3_UART_Init+0x4c>)
 8002616:	2200      	movs	r2, #0
 8002618:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800261a:	4805      	ldr	r0, [pc, #20]	; (8002630 <MX_USART3_UART_Init+0x4c>)
 800261c:	f003 f9e6 	bl	80059ec <HAL_UART_Init>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d001      	beq.n	800262a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002626:	f7ff fdb4 	bl	8002192 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800262a:	bf00      	nop
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	200029cc 	.word	0x200029cc
 8002634:	40004800 	.word	0x40004800

08002638 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b08e      	sub	sp, #56	; 0x38
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002640:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002644:	2200      	movs	r2, #0
 8002646:	601a      	str	r2, [r3, #0]
 8002648:	605a      	str	r2, [r3, #4]
 800264a:	609a      	str	r2, [r3, #8]
 800264c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a9e      	ldr	r2, [pc, #632]	; (80028cc <HAL_UART_MspInit+0x294>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d16c      	bne.n	8002732 <HAL_UART_MspInit+0xfa>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002658:	4b9d      	ldr	r3, [pc, #628]	; (80028d0 <HAL_UART_MspInit+0x298>)
 800265a:	699b      	ldr	r3, [r3, #24]
 800265c:	4a9c      	ldr	r2, [pc, #624]	; (80028d0 <HAL_UART_MspInit+0x298>)
 800265e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002662:	6193      	str	r3, [r2, #24]
 8002664:	4b9a      	ldr	r3, [pc, #616]	; (80028d0 <HAL_UART_MspInit+0x298>)
 8002666:	699b      	ldr	r3, [r3, #24]
 8002668:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800266c:	623b      	str	r3, [r7, #32]
 800266e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002670:	4b97      	ldr	r3, [pc, #604]	; (80028d0 <HAL_UART_MspInit+0x298>)
 8002672:	699b      	ldr	r3, [r3, #24]
 8002674:	4a96      	ldr	r2, [pc, #600]	; (80028d0 <HAL_UART_MspInit+0x298>)
 8002676:	f043 0308 	orr.w	r3, r3, #8
 800267a:	6193      	str	r3, [r2, #24]
 800267c:	4b94      	ldr	r3, [pc, #592]	; (80028d0 <HAL_UART_MspInit+0x298>)
 800267e:	699b      	ldr	r3, [r3, #24]
 8002680:	f003 0308 	and.w	r3, r3, #8
 8002684:	61fb      	str	r3, [r7, #28]
 8002686:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = SIM_TX_Pin;
 8002688:	2340      	movs	r3, #64	; 0x40
 800268a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800268c:	2302      	movs	r3, #2
 800268e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002690:	2303      	movs	r3, #3
 8002692:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(SIM_TX_GPIO_Port, &GPIO_InitStruct);
 8002694:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002698:	4619      	mov	r1, r3
 800269a:	488e      	ldr	r0, [pc, #568]	; (80028d4 <HAL_UART_MspInit+0x29c>)
 800269c:	f001 f872 	bl	8003784 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SIM_RX_Pin;
 80026a0:	2380      	movs	r3, #128	; 0x80
 80026a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026a4:	2300      	movs	r3, #0
 80026a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a8:	2300      	movs	r3, #0
 80026aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SIM_RX_GPIO_Port, &GPIO_InitStruct);
 80026ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026b0:	4619      	mov	r1, r3
 80026b2:	4888      	ldr	r0, [pc, #544]	; (80028d4 <HAL_UART_MspInit+0x29c>)
 80026b4:	f001 f866 	bl	8003784 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 80026b8:	4b87      	ldr	r3, [pc, #540]	; (80028d8 <HAL_UART_MspInit+0x2a0>)
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	637b      	str	r3, [r7, #52]	; 0x34
 80026be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026c0:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80026c4:	637b      	str	r3, [r7, #52]	; 0x34
 80026c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026c8:	f043 0304 	orr.w	r3, r3, #4
 80026cc:	637b      	str	r3, [r7, #52]	; 0x34
 80026ce:	4a82      	ldr	r2, [pc, #520]	; (80028d8 <HAL_UART_MspInit+0x2a0>)
 80026d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026d2:	6053      	str	r3, [r2, #4]

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80026d4:	4b81      	ldr	r3, [pc, #516]	; (80028dc <HAL_UART_MspInit+0x2a4>)
 80026d6:	4a82      	ldr	r2, [pc, #520]	; (80028e0 <HAL_UART_MspInit+0x2a8>)
 80026d8:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80026da:	4b80      	ldr	r3, [pc, #512]	; (80028dc <HAL_UART_MspInit+0x2a4>)
 80026dc:	2200      	movs	r2, #0
 80026de:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80026e0:	4b7e      	ldr	r3, [pc, #504]	; (80028dc <HAL_UART_MspInit+0x2a4>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80026e6:	4b7d      	ldr	r3, [pc, #500]	; (80028dc <HAL_UART_MspInit+0x2a4>)
 80026e8:	2280      	movs	r2, #128	; 0x80
 80026ea:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80026ec:	4b7b      	ldr	r3, [pc, #492]	; (80028dc <HAL_UART_MspInit+0x2a4>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80026f2:	4b7a      	ldr	r3, [pc, #488]	; (80028dc <HAL_UART_MspInit+0x2a4>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80026f8:	4b78      	ldr	r3, [pc, #480]	; (80028dc <HAL_UART_MspInit+0x2a4>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80026fe:	4b77      	ldr	r3, [pc, #476]	; (80028dc <HAL_UART_MspInit+0x2a4>)
 8002700:	2200      	movs	r2, #0
 8002702:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002704:	4875      	ldr	r0, [pc, #468]	; (80028dc <HAL_UART_MspInit+0x2a4>)
 8002706:	f000 fd9b 	bl	8003240 <HAL_DMA_Init>
 800270a:	4603      	mov	r3, r0
 800270c:	2b00      	cmp	r3, #0
 800270e:	d001      	beq.n	8002714 <HAL_UART_MspInit+0xdc>
    {
      Error_Handler();
 8002710:	f7ff fd3f 	bl	8002192 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	4a71      	ldr	r2, [pc, #452]	; (80028dc <HAL_UART_MspInit+0x2a4>)
 8002718:	63da      	str	r2, [r3, #60]	; 0x3c
 800271a:	4a70      	ldr	r2, [pc, #448]	; (80028dc <HAL_UART_MspInit+0x2a4>)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8002720:	2200      	movs	r2, #0
 8002722:	2101      	movs	r1, #1
 8002724:	2025      	movs	r0, #37	; 0x25
 8002726:	f000 fd54 	bl	80031d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800272a:	2025      	movs	r0, #37	; 0x25
 800272c:	f000 fd6d 	bl	800320a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002730:	e0c8      	b.n	80028c4 <HAL_UART_MspInit+0x28c>
  else if(uartHandle->Instance==USART2)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a6b      	ldr	r2, [pc, #428]	; (80028e4 <HAL_UART_MspInit+0x2ac>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d15e      	bne.n	80027fa <HAL_UART_MspInit+0x1c2>
    __HAL_RCC_USART2_CLK_ENABLE();
 800273c:	4b64      	ldr	r3, [pc, #400]	; (80028d0 <HAL_UART_MspInit+0x298>)
 800273e:	69db      	ldr	r3, [r3, #28]
 8002740:	4a63      	ldr	r2, [pc, #396]	; (80028d0 <HAL_UART_MspInit+0x298>)
 8002742:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002746:	61d3      	str	r3, [r2, #28]
 8002748:	4b61      	ldr	r3, [pc, #388]	; (80028d0 <HAL_UART_MspInit+0x298>)
 800274a:	69db      	ldr	r3, [r3, #28]
 800274c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002750:	61bb      	str	r3, [r7, #24]
 8002752:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002754:	4b5e      	ldr	r3, [pc, #376]	; (80028d0 <HAL_UART_MspInit+0x298>)
 8002756:	699b      	ldr	r3, [r3, #24]
 8002758:	4a5d      	ldr	r2, [pc, #372]	; (80028d0 <HAL_UART_MspInit+0x298>)
 800275a:	f043 0304 	orr.w	r3, r3, #4
 800275e:	6193      	str	r3, [r2, #24]
 8002760:	4b5b      	ldr	r3, [pc, #364]	; (80028d0 <HAL_UART_MspInit+0x298>)
 8002762:	699b      	ldr	r3, [r3, #24]
 8002764:	f003 0304 	and.w	r3, r3, #4
 8002768:	617b      	str	r3, [r7, #20]
 800276a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800276c:	2304      	movs	r3, #4
 800276e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002770:	2302      	movs	r3, #2
 8002772:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002774:	2303      	movs	r3, #3
 8002776:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002778:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800277c:	4619      	mov	r1, r3
 800277e:	485a      	ldr	r0, [pc, #360]	; (80028e8 <HAL_UART_MspInit+0x2b0>)
 8002780:	f001 f800 	bl	8003784 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002784:	2308      	movs	r3, #8
 8002786:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002788:	2300      	movs	r3, #0
 800278a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800278c:	2300      	movs	r3, #0
 800278e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002790:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002794:	4619      	mov	r1, r3
 8002796:	4854      	ldr	r0, [pc, #336]	; (80028e8 <HAL_UART_MspInit+0x2b0>)
 8002798:	f000 fff4 	bl	8003784 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 800279c:	4b53      	ldr	r3, [pc, #332]	; (80028ec <HAL_UART_MspInit+0x2b4>)
 800279e:	4a54      	ldr	r2, [pc, #336]	; (80028f0 <HAL_UART_MspInit+0x2b8>)
 80027a0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80027a2:	4b52      	ldr	r3, [pc, #328]	; (80028ec <HAL_UART_MspInit+0x2b4>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80027a8:	4b50      	ldr	r3, [pc, #320]	; (80028ec <HAL_UART_MspInit+0x2b4>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80027ae:	4b4f      	ldr	r3, [pc, #316]	; (80028ec <HAL_UART_MspInit+0x2b4>)
 80027b0:	2280      	movs	r2, #128	; 0x80
 80027b2:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80027b4:	4b4d      	ldr	r3, [pc, #308]	; (80028ec <HAL_UART_MspInit+0x2b4>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80027ba:	4b4c      	ldr	r3, [pc, #304]	; (80028ec <HAL_UART_MspInit+0x2b4>)
 80027bc:	2200      	movs	r2, #0
 80027be:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80027c0:	4b4a      	ldr	r3, [pc, #296]	; (80028ec <HAL_UART_MspInit+0x2b4>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80027c6:	4b49      	ldr	r3, [pc, #292]	; (80028ec <HAL_UART_MspInit+0x2b4>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80027cc:	4847      	ldr	r0, [pc, #284]	; (80028ec <HAL_UART_MspInit+0x2b4>)
 80027ce:	f000 fd37 	bl	8003240 <HAL_DMA_Init>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d001      	beq.n	80027dc <HAL_UART_MspInit+0x1a4>
      Error_Handler();
 80027d8:	f7ff fcdb 	bl	8002192 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	4a43      	ldr	r2, [pc, #268]	; (80028ec <HAL_UART_MspInit+0x2b4>)
 80027e0:	63da      	str	r2, [r3, #60]	; 0x3c
 80027e2:	4a42      	ldr	r2, [pc, #264]	; (80028ec <HAL_UART_MspInit+0x2b4>)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 80027e8:	2200      	movs	r2, #0
 80027ea:	2101      	movs	r1, #1
 80027ec:	2026      	movs	r0, #38	; 0x26
 80027ee:	f000 fcf0 	bl	80031d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80027f2:	2026      	movs	r0, #38	; 0x26
 80027f4:	f000 fd09 	bl	800320a <HAL_NVIC_EnableIRQ>
}
 80027f8:	e064      	b.n	80028c4 <HAL_UART_MspInit+0x28c>
  else if(uartHandle->Instance==USART3)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a3d      	ldr	r2, [pc, #244]	; (80028f4 <HAL_UART_MspInit+0x2bc>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d15f      	bne.n	80028c4 <HAL_UART_MspInit+0x28c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002804:	4b32      	ldr	r3, [pc, #200]	; (80028d0 <HAL_UART_MspInit+0x298>)
 8002806:	69db      	ldr	r3, [r3, #28]
 8002808:	4a31      	ldr	r2, [pc, #196]	; (80028d0 <HAL_UART_MspInit+0x298>)
 800280a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800280e:	61d3      	str	r3, [r2, #28]
 8002810:	4b2f      	ldr	r3, [pc, #188]	; (80028d0 <HAL_UART_MspInit+0x298>)
 8002812:	69db      	ldr	r3, [r3, #28]
 8002814:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002818:	613b      	str	r3, [r7, #16]
 800281a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800281c:	4b2c      	ldr	r3, [pc, #176]	; (80028d0 <HAL_UART_MspInit+0x298>)
 800281e:	699b      	ldr	r3, [r3, #24]
 8002820:	4a2b      	ldr	r2, [pc, #172]	; (80028d0 <HAL_UART_MspInit+0x298>)
 8002822:	f043 0308 	orr.w	r3, r3, #8
 8002826:	6193      	str	r3, [r2, #24]
 8002828:	4b29      	ldr	r3, [pc, #164]	; (80028d0 <HAL_UART_MspInit+0x298>)
 800282a:	699b      	ldr	r3, [r3, #24]
 800282c:	f003 0308 	and.w	r3, r3, #8
 8002830:	60fb      	str	r3, [r7, #12]
 8002832:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002834:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002838:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800283a:	2302      	movs	r3, #2
 800283c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800283e:	2303      	movs	r3, #3
 8002840:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002842:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002846:	4619      	mov	r1, r3
 8002848:	4822      	ldr	r0, [pc, #136]	; (80028d4 <HAL_UART_MspInit+0x29c>)
 800284a:	f000 ff9b 	bl	8003784 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800284e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002852:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002854:	2300      	movs	r3, #0
 8002856:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002858:	2300      	movs	r3, #0
 800285a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800285c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002860:	4619      	mov	r1, r3
 8002862:	481c      	ldr	r0, [pc, #112]	; (80028d4 <HAL_UART_MspInit+0x29c>)
 8002864:	f000 ff8e 	bl	8003784 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8002868:	4b23      	ldr	r3, [pc, #140]	; (80028f8 <HAL_UART_MspInit+0x2c0>)
 800286a:	4a24      	ldr	r2, [pc, #144]	; (80028fc <HAL_UART_MspInit+0x2c4>)
 800286c:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800286e:	4b22      	ldr	r3, [pc, #136]	; (80028f8 <HAL_UART_MspInit+0x2c0>)
 8002870:	2200      	movs	r2, #0
 8002872:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002874:	4b20      	ldr	r3, [pc, #128]	; (80028f8 <HAL_UART_MspInit+0x2c0>)
 8002876:	2200      	movs	r2, #0
 8002878:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800287a:	4b1f      	ldr	r3, [pc, #124]	; (80028f8 <HAL_UART_MspInit+0x2c0>)
 800287c:	2280      	movs	r2, #128	; 0x80
 800287e:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002880:	4b1d      	ldr	r3, [pc, #116]	; (80028f8 <HAL_UART_MspInit+0x2c0>)
 8002882:	2200      	movs	r2, #0
 8002884:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002886:	4b1c      	ldr	r3, [pc, #112]	; (80028f8 <HAL_UART_MspInit+0x2c0>)
 8002888:	2200      	movs	r2, #0
 800288a:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 800288c:	4b1a      	ldr	r3, [pc, #104]	; (80028f8 <HAL_UART_MspInit+0x2c0>)
 800288e:	2200      	movs	r2, #0
 8002890:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002892:	4b19      	ldr	r3, [pc, #100]	; (80028f8 <HAL_UART_MspInit+0x2c0>)
 8002894:	2200      	movs	r2, #0
 8002896:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002898:	4817      	ldr	r0, [pc, #92]	; (80028f8 <HAL_UART_MspInit+0x2c0>)
 800289a:	f000 fcd1 	bl	8003240 <HAL_DMA_Init>
 800289e:	4603      	mov	r3, r0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d001      	beq.n	80028a8 <HAL_UART_MspInit+0x270>
      Error_Handler();
 80028a4:	f7ff fc75 	bl	8002192 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	4a13      	ldr	r2, [pc, #76]	; (80028f8 <HAL_UART_MspInit+0x2c0>)
 80028ac:	63da      	str	r2, [r3, #60]	; 0x3c
 80028ae:	4a12      	ldr	r2, [pc, #72]	; (80028f8 <HAL_UART_MspInit+0x2c0>)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 80028b4:	2200      	movs	r2, #0
 80028b6:	2101      	movs	r1, #1
 80028b8:	2027      	movs	r0, #39	; 0x27
 80028ba:	f000 fc8a 	bl	80031d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80028be:	2027      	movs	r0, #39	; 0x27
 80028c0:	f000 fca3 	bl	800320a <HAL_NVIC_EnableIRQ>
}
 80028c4:	bf00      	nop
 80028c6:	3738      	adds	r7, #56	; 0x38
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	40013800 	.word	0x40013800
 80028d0:	40021000 	.word	0x40021000
 80028d4:	40010c00 	.word	0x40010c00
 80028d8:	40010000 	.word	0x40010000
 80028dc:	20002a14 	.word	0x20002a14
 80028e0:	40020058 	.word	0x40020058
 80028e4:	40004400 	.word	0x40004400
 80028e8:	40010800 	.word	0x40010800
 80028ec:	20002a58 	.word	0x20002a58
 80028f0:	4002006c 	.word	0x4002006c
 80028f4:	40004800 	.word	0x40004800
 80028f8:	20002a9c 	.word	0x20002a9c
 80028fc:	40020030 	.word	0x40020030

08002900 <LCD_Init>:
/* STATIC FUNCTION PROTOTYPES --- --------------------------------------------*/

/* STATIC FUNCTIONS ----------------------------------------------------------*/

/* GLOBAL FUNCTIONS ----------------------------------------------------------*/
void LCD_Init(void){
 8002900:	b580      	push	{r7, lr}
 8002902:	af00      	add	r7, sp, #0
	  HAL_Delay(50);
 8002904:	2032      	movs	r0, #50	; 0x32
 8002906:	f000 f957 	bl	8002bb8 <HAL_Delay>
	  LCD_SendCommand(0x03);
 800290a:	2003      	movs	r0, #3
 800290c:	f000 f830 	bl	8002970 <LCD_SendCommand>
	  HAL_Delay(5);
 8002910:	2005      	movs	r0, #5
 8002912:	f000 f951 	bl	8002bb8 <HAL_Delay>
	  LCD_SendCommand(0x03);
 8002916:	2003      	movs	r0, #3
 8002918:	f000 f82a 	bl	8002970 <LCD_SendCommand>
	  HAL_Delay(1);
 800291c:	2001      	movs	r0, #1
 800291e:	f000 f94b 	bl	8002bb8 <HAL_Delay>
	  LCD_SendCommand(0x03);
 8002922:	2003      	movs	r0, #3
 8002924:	f000 f824 	bl	8002970 <LCD_SendCommand>
	  HAL_Delay(1);
 8002928:	2001      	movs	r0, #1
 800292a:	f000 f945 	bl	8002bb8 <HAL_Delay>
	  LCD_SendCommand(0x02);
 800292e:	2002      	movs	r0, #2
 8002930:	f000 f81e 	bl	8002970 <LCD_SendCommand>
	  HAL_Delay(1);
 8002934:	2001      	movs	r0, #1
 8002936:	f000 f93f 	bl	8002bb8 <HAL_Delay>

	  LCD_SendCommand(0x28);
 800293a:	2028      	movs	r0, #40	; 0x28
 800293c:	f000 f818 	bl	8002970 <LCD_SendCommand>
	  HAL_Delay(1);
 8002940:	2001      	movs	r0, #1
 8002942:	f000 f939 	bl	8002bb8 <HAL_Delay>

	  LCD_SendCommand(0x0C);
 8002946:	200c      	movs	r0, #12
 8002948:	f000 f812 	bl	8002970 <LCD_SendCommand>
	  HAL_Delay(1);
 800294c:	2001      	movs	r0, #1
 800294e:	f000 f933 	bl	8002bb8 <HAL_Delay>

	  LCD_SendCommand(0x01);
 8002952:	2001      	movs	r0, #1
 8002954:	f000 f80c 	bl	8002970 <LCD_SendCommand>
	  HAL_Delay(2);
 8002958:	2002      	movs	r0, #2
 800295a:	f000 f92d 	bl	8002bb8 <HAL_Delay>

	  LCD_SendCommand(0x06);
 800295e:	2006      	movs	r0, #6
 8002960:	f000 f806 	bl	8002970 <LCD_SendCommand>
	  HAL_Delay(1);
 8002964:	2001      	movs	r0, #1
 8002966:	f000 f927 	bl	8002bb8 <HAL_Delay>
}
 800296a:	bf00      	nop
 800296c:	bd80      	pop	{r7, pc}
	...

08002970 <LCD_SendCommand>:

void LCD_SendCommand(uint8_t cmd){
 8002970:	b580      	push	{r7, lr}
 8002972:	b082      	sub	sp, #8
 8002974:	af00      	add	r7, sp, #0
 8002976:	4603      	mov	r3, r0
 8002978:	71fb      	strb	r3, [r7, #7]
	  // Send high nibble
	  HAL_GPIO_WritePin(myLCD.RSP, myLCD.RS, GPIO_PIN_RESET);
 800297a:	4b4a      	ldr	r3, [pc, #296]	; (8002aa4 <LCD_SendCommand+0x134>)
 800297c:	6a1b      	ldr	r3, [r3, #32]
 800297e:	4a49      	ldr	r2, [pc, #292]	; (8002aa4 <LCD_SendCommand+0x134>)
 8002980:	8951      	ldrh	r1, [r2, #10]
 8002982:	2200      	movs	r2, #0
 8002984:	4618      	mov	r0, r3
 8002986:	f001 f881 	bl	8003a8c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(myLCD.D4P, myLCD.D4, (cmd & 0x10) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800298a:	4b46      	ldr	r3, [pc, #280]	; (8002aa4 <LCD_SendCommand+0x134>)
 800298c:	68d8      	ldr	r0, [r3, #12]
 800298e:	4b45      	ldr	r3, [pc, #276]	; (8002aa4 <LCD_SendCommand+0x134>)
 8002990:	8819      	ldrh	r1, [r3, #0]
 8002992:	79fb      	ldrb	r3, [r7, #7]
 8002994:	111b      	asrs	r3, r3, #4
 8002996:	b2db      	uxtb	r3, r3
 8002998:	f003 0301 	and.w	r3, r3, #1
 800299c:	b2db      	uxtb	r3, r3
 800299e:	461a      	mov	r2, r3
 80029a0:	f001 f874 	bl	8003a8c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(myLCD.D5P, myLCD.D5, (cmd & 0x20) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80029a4:	4b3f      	ldr	r3, [pc, #252]	; (8002aa4 <LCD_SendCommand+0x134>)
 80029a6:	6918      	ldr	r0, [r3, #16]
 80029a8:	4b3e      	ldr	r3, [pc, #248]	; (8002aa4 <LCD_SendCommand+0x134>)
 80029aa:	8859      	ldrh	r1, [r3, #2]
 80029ac:	79fb      	ldrb	r3, [r7, #7]
 80029ae:	115b      	asrs	r3, r3, #5
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	f003 0301 	and.w	r3, r3, #1
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	461a      	mov	r2, r3
 80029ba:	f001 f867 	bl	8003a8c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(myLCD.D6P, myLCD.D6, (cmd & 0x40) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80029be:	4b39      	ldr	r3, [pc, #228]	; (8002aa4 <LCD_SendCommand+0x134>)
 80029c0:	6958      	ldr	r0, [r3, #20]
 80029c2:	4b38      	ldr	r3, [pc, #224]	; (8002aa4 <LCD_SendCommand+0x134>)
 80029c4:	8899      	ldrh	r1, [r3, #4]
 80029c6:	79fb      	ldrb	r3, [r7, #7]
 80029c8:	119b      	asrs	r3, r3, #6
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	f003 0301 	and.w	r3, r3, #1
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	461a      	mov	r2, r3
 80029d4:	f001 f85a 	bl	8003a8c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(myLCD.D7P, myLCD.D7, (cmd & 0x80) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80029d8:	4b32      	ldr	r3, [pc, #200]	; (8002aa4 <LCD_SendCommand+0x134>)
 80029da:	6998      	ldr	r0, [r3, #24]
 80029dc:	4b31      	ldr	r3, [pc, #196]	; (8002aa4 <LCD_SendCommand+0x134>)
 80029de:	88d9      	ldrh	r1, [r3, #6]
 80029e0:	79fb      	ldrb	r3, [r7, #7]
 80029e2:	09db      	lsrs	r3, r3, #7
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	461a      	mov	r2, r3
 80029e8:	f001 f850 	bl	8003a8c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(myLCD.ENP, myLCD.EN, GPIO_PIN_SET);
 80029ec:	4b2d      	ldr	r3, [pc, #180]	; (8002aa4 <LCD_SendCommand+0x134>)
 80029ee:	69db      	ldr	r3, [r3, #28]
 80029f0:	4a2c      	ldr	r2, [pc, #176]	; (8002aa4 <LCD_SendCommand+0x134>)
 80029f2:	8911      	ldrh	r1, [r2, #8]
 80029f4:	2201      	movs	r2, #1
 80029f6:	4618      	mov	r0, r3
 80029f8:	f001 f848 	bl	8003a8c <HAL_GPIO_WritePin>
	  HAL_Delay(1);
 80029fc:	2001      	movs	r0, #1
 80029fe:	f000 f8db 	bl	8002bb8 <HAL_Delay>
	  HAL_GPIO_WritePin(myLCD.ENP, myLCD.EN, GPIO_PIN_RESET);
 8002a02:	4b28      	ldr	r3, [pc, #160]	; (8002aa4 <LCD_SendCommand+0x134>)
 8002a04:	69db      	ldr	r3, [r3, #28]
 8002a06:	4a27      	ldr	r2, [pc, #156]	; (8002aa4 <LCD_SendCommand+0x134>)
 8002a08:	8911      	ldrh	r1, [r2, #8]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f001 f83d 	bl	8003a8c <HAL_GPIO_WritePin>

	  // Send low nibble
	  HAL_GPIO_WritePin(myLCD.D4P, myLCD.D4, (cmd & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8002a12:	4b24      	ldr	r3, [pc, #144]	; (8002aa4 <LCD_SendCommand+0x134>)
 8002a14:	68d8      	ldr	r0, [r3, #12]
 8002a16:	4b23      	ldr	r3, [pc, #140]	; (8002aa4 <LCD_SendCommand+0x134>)
 8002a18:	8819      	ldrh	r1, [r3, #0]
 8002a1a:	79fb      	ldrb	r3, [r7, #7]
 8002a1c:	f003 0301 	and.w	r3, r3, #1
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	461a      	mov	r2, r3
 8002a24:	f001 f832 	bl	8003a8c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(myLCD.D5P, myLCD.D5, (cmd & 0x02) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8002a28:	4b1e      	ldr	r3, [pc, #120]	; (8002aa4 <LCD_SendCommand+0x134>)
 8002a2a:	6918      	ldr	r0, [r3, #16]
 8002a2c:	4b1d      	ldr	r3, [pc, #116]	; (8002aa4 <LCD_SendCommand+0x134>)
 8002a2e:	8859      	ldrh	r1, [r3, #2]
 8002a30:	79fb      	ldrb	r3, [r7, #7]
 8002a32:	105b      	asrs	r3, r3, #1
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	f003 0301 	and.w	r3, r3, #1
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	f001 f825 	bl	8003a8c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(myLCD.D6P, myLCD.D6, (cmd & 0x04) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8002a42:	4b18      	ldr	r3, [pc, #96]	; (8002aa4 <LCD_SendCommand+0x134>)
 8002a44:	6958      	ldr	r0, [r3, #20]
 8002a46:	4b17      	ldr	r3, [pc, #92]	; (8002aa4 <LCD_SendCommand+0x134>)
 8002a48:	8899      	ldrh	r1, [r3, #4]
 8002a4a:	79fb      	ldrb	r3, [r7, #7]
 8002a4c:	109b      	asrs	r3, r3, #2
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	f003 0301 	and.w	r3, r3, #1
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	461a      	mov	r2, r3
 8002a58:	f001 f818 	bl	8003a8c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(myLCD.D7P, myLCD.D7, (cmd & 0x08) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8002a5c:	4b11      	ldr	r3, [pc, #68]	; (8002aa4 <LCD_SendCommand+0x134>)
 8002a5e:	6998      	ldr	r0, [r3, #24]
 8002a60:	4b10      	ldr	r3, [pc, #64]	; (8002aa4 <LCD_SendCommand+0x134>)
 8002a62:	88d9      	ldrh	r1, [r3, #6]
 8002a64:	79fb      	ldrb	r3, [r7, #7]
 8002a66:	10db      	asrs	r3, r3, #3
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	f003 0301 	and.w	r3, r3, #1
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	461a      	mov	r2, r3
 8002a72:	f001 f80b 	bl	8003a8c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(myLCD.ENP, myLCD.EN, GPIO_PIN_SET);
 8002a76:	4b0b      	ldr	r3, [pc, #44]	; (8002aa4 <LCD_SendCommand+0x134>)
 8002a78:	69db      	ldr	r3, [r3, #28]
 8002a7a:	4a0a      	ldr	r2, [pc, #40]	; (8002aa4 <LCD_SendCommand+0x134>)
 8002a7c:	8911      	ldrh	r1, [r2, #8]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	4618      	mov	r0, r3
 8002a82:	f001 f803 	bl	8003a8c <HAL_GPIO_WritePin>
	  HAL_Delay(1);
 8002a86:	2001      	movs	r0, #1
 8002a88:	f000 f896 	bl	8002bb8 <HAL_Delay>
	  HAL_GPIO_WritePin(myLCD.ENP, myLCD.EN, GPIO_PIN_RESET);
 8002a8c:	4b05      	ldr	r3, [pc, #20]	; (8002aa4 <LCD_SendCommand+0x134>)
 8002a8e:	69db      	ldr	r3, [r3, #28]
 8002a90:	4a04      	ldr	r2, [pc, #16]	; (8002aa4 <LCD_SendCommand+0x134>)
 8002a92:	8911      	ldrh	r1, [r2, #8]
 8002a94:	2200      	movs	r2, #0
 8002a96:	4618      	mov	r0, r3
 8002a98:	f000 fff8 	bl	8003a8c <HAL_GPIO_WritePin>
}
 8002a9c:	bf00      	nop
 8002a9e:	3708      	adds	r7, #8
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	2000008c 	.word	0x2000008c

08002aa8 <Reset_Handler>:
 8002aa8:	f7ff fcd4 	bl	8002454 <SystemInit>
 8002aac:	480b      	ldr	r0, [pc, #44]	; (8002adc <LoopFillZerobss+0xe>)
 8002aae:	490c      	ldr	r1, [pc, #48]	; (8002ae0 <LoopFillZerobss+0x12>)
 8002ab0:	4a0c      	ldr	r2, [pc, #48]	; (8002ae4 <LoopFillZerobss+0x16>)
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	e002      	b.n	8002abc <LoopCopyDataInit>

08002ab6 <CopyDataInit>:
 8002ab6:	58d4      	ldr	r4, [r2, r3]
 8002ab8:	50c4      	str	r4, [r0, r3]
 8002aba:	3304      	adds	r3, #4

08002abc <LoopCopyDataInit>:
 8002abc:	18c4      	adds	r4, r0, r3
 8002abe:	428c      	cmp	r4, r1
 8002ac0:	d3f9      	bcc.n	8002ab6 <CopyDataInit>
 8002ac2:	4a09      	ldr	r2, [pc, #36]	; (8002ae8 <LoopFillZerobss+0x1a>)
 8002ac4:	4c09      	ldr	r4, [pc, #36]	; (8002aec <LoopFillZerobss+0x1e>)
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	e001      	b.n	8002ace <LoopFillZerobss>

08002aca <FillZerobss>:
 8002aca:	6013      	str	r3, [r2, #0]
 8002acc:	3204      	adds	r2, #4

08002ace <LoopFillZerobss>:
 8002ace:	42a2      	cmp	r2, r4
 8002ad0:	d3fb      	bcc.n	8002aca <FillZerobss>
 8002ad2:	f003 ffd1 	bl	8006a78 <__libc_init_array>
 8002ad6:	f7ff f98b 	bl	8001df0 <main>
 8002ada:	4770      	bx	lr
 8002adc:	20000000 	.word	0x20000000
 8002ae0:	2000011c 	.word	0x2000011c
 8002ae4:	080089fc 	.word	0x080089fc
 8002ae8:	2000011c 	.word	0x2000011c
 8002aec:	20002af4 	.word	0x20002af4

08002af0 <ADC1_2_IRQHandler>:
 8002af0:	e7fe      	b.n	8002af0 <ADC1_2_IRQHandler>
	...

08002af4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002af8:	4b08      	ldr	r3, [pc, #32]	; (8002b1c <HAL_Init+0x28>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a07      	ldr	r2, [pc, #28]	; (8002b1c <HAL_Init+0x28>)
 8002afe:	f043 0310 	orr.w	r3, r3, #16
 8002b02:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b04:	2003      	movs	r0, #3
 8002b06:	f000 fb59 	bl	80031bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b0a:	200f      	movs	r0, #15
 8002b0c:	f000 f808 	bl	8002b20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b10:	f7ff fb44 	bl	800219c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b14:	2300      	movs	r3, #0
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	40022000 	.word	0x40022000

08002b20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b082      	sub	sp, #8
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b28:	4b12      	ldr	r3, [pc, #72]	; (8002b74 <HAL_InitTick+0x54>)
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	4b12      	ldr	r3, [pc, #72]	; (8002b78 <HAL_InitTick+0x58>)
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	4619      	mov	r1, r3
 8002b32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b36:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f000 fb71 	bl	8003226 <HAL_SYSTICK_Config>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d001      	beq.n	8002b4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e00e      	b.n	8002b6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2b0f      	cmp	r3, #15
 8002b52:	d80a      	bhi.n	8002b6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b54:	2200      	movs	r2, #0
 8002b56:	6879      	ldr	r1, [r7, #4]
 8002b58:	f04f 30ff 	mov.w	r0, #4294967295
 8002b5c:	f000 fb39 	bl	80031d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b60:	4a06      	ldr	r2, [pc, #24]	; (8002b7c <HAL_InitTick+0x5c>)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b66:	2300      	movs	r3, #0
 8002b68:	e000      	b.n	8002b6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3708      	adds	r7, #8
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	20000088 	.word	0x20000088
 8002b78:	200000b4 	.word	0x200000b4
 8002b7c:	200000b0 	.word	0x200000b0

08002b80 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b80:	b480      	push	{r7}
 8002b82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b84:	4b05      	ldr	r3, [pc, #20]	; (8002b9c <HAL_IncTick+0x1c>)
 8002b86:	781b      	ldrb	r3, [r3, #0]
 8002b88:	461a      	mov	r2, r3
 8002b8a:	4b05      	ldr	r3, [pc, #20]	; (8002ba0 <HAL_IncTick+0x20>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4413      	add	r3, r2
 8002b90:	4a03      	ldr	r2, [pc, #12]	; (8002ba0 <HAL_IncTick+0x20>)
 8002b92:	6013      	str	r3, [r2, #0]
}
 8002b94:	bf00      	nop
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bc80      	pop	{r7}
 8002b9a:	4770      	bx	lr
 8002b9c:	200000b4 	.word	0x200000b4
 8002ba0:	20002ae0 	.word	0x20002ae0

08002ba4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	af00      	add	r7, sp, #0
  return uwTick;
 8002ba8:	4b02      	ldr	r3, [pc, #8]	; (8002bb4 <HAL_GetTick+0x10>)
 8002baa:	681b      	ldr	r3, [r3, #0]
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bc80      	pop	{r7}
 8002bb2:	4770      	bx	lr
 8002bb4:	20002ae0 	.word	0x20002ae0

08002bb8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b084      	sub	sp, #16
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002bc0:	f7ff fff0 	bl	8002ba4 <HAL_GetTick>
 8002bc4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bd0:	d005      	beq.n	8002bde <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002bd2:	4b0a      	ldr	r3, [pc, #40]	; (8002bfc <HAL_Delay+0x44>)
 8002bd4:	781b      	ldrb	r3, [r3, #0]
 8002bd6:	461a      	mov	r2, r3
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	4413      	add	r3, r2
 8002bdc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002bde:	bf00      	nop
 8002be0:	f7ff ffe0 	bl	8002ba4 <HAL_GetTick>
 8002be4:	4602      	mov	r2, r0
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	68fa      	ldr	r2, [r7, #12]
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d8f7      	bhi.n	8002be0 <HAL_Delay+0x28>
  {
  }
}
 8002bf0:	bf00      	nop
 8002bf2:	bf00      	nop
 8002bf4:	3710      	adds	r7, #16
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	200000b4 	.word	0x200000b4

08002c00 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b086      	sub	sp, #24
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002c10:	2300      	movs	r3, #0
 8002c12:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002c14:	2300      	movs	r3, #0
 8002c16:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d101      	bne.n	8002c22 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e0be      	b.n	8002da0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d109      	bne.n	8002c44 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2200      	movs	r2, #0
 8002c34:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f7fe fe0e 	bl	8001860 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	f000 f9ab 	bl	8002fa0 <ADC_ConversionStop_Disable>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c52:	f003 0310 	and.w	r3, r3, #16
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	f040 8099 	bne.w	8002d8e <HAL_ADC_Init+0x18e>
 8002c5c:	7dfb      	ldrb	r3, [r7, #23]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	f040 8095 	bne.w	8002d8e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c68:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002c6c:	f023 0302 	bic.w	r3, r3, #2
 8002c70:	f043 0202 	orr.w	r2, r3, #2
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002c80:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	7b1b      	ldrb	r3, [r3, #12]
 8002c86:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002c88:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002c8a:	68ba      	ldr	r2, [r7, #8]
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c98:	d003      	beq.n	8002ca2 <HAL_ADC_Init+0xa2>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d102      	bne.n	8002ca8 <HAL_ADC_Init+0xa8>
 8002ca2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ca6:	e000      	b.n	8002caa <HAL_ADC_Init+0xaa>
 8002ca8:	2300      	movs	r3, #0
 8002caa:	693a      	ldr	r2, [r7, #16]
 8002cac:	4313      	orrs	r3, r2
 8002cae:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	7d1b      	ldrb	r3, [r3, #20]
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d119      	bne.n	8002cec <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	7b1b      	ldrb	r3, [r3, #12]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d109      	bne.n	8002cd4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	699b      	ldr	r3, [r3, #24]
 8002cc4:	3b01      	subs	r3, #1
 8002cc6:	035a      	lsls	r2, r3, #13
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002cd0:	613b      	str	r3, [r7, #16]
 8002cd2:	e00b      	b.n	8002cec <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cd8:	f043 0220 	orr.w	r2, r3, #32
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce4:	f043 0201 	orr.w	r2, r3, #1
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	693a      	ldr	r2, [r7, #16]
 8002cfc:	430a      	orrs	r2, r1
 8002cfe:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	689a      	ldr	r2, [r3, #8]
 8002d06:	4b28      	ldr	r3, [pc, #160]	; (8002da8 <HAL_ADC_Init+0x1a8>)
 8002d08:	4013      	ands	r3, r2
 8002d0a:	687a      	ldr	r2, [r7, #4]
 8002d0c:	6812      	ldr	r2, [r2, #0]
 8002d0e:	68b9      	ldr	r1, [r7, #8]
 8002d10:	430b      	orrs	r3, r1
 8002d12:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d1c:	d003      	beq.n	8002d26 <HAL_ADC_Init+0x126>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d104      	bne.n	8002d30 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	691b      	ldr	r3, [r3, #16]
 8002d2a:	3b01      	subs	r3, #1
 8002d2c:	051b      	lsls	r3, r3, #20
 8002d2e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d36:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	68fa      	ldr	r2, [r7, #12]
 8002d40:	430a      	orrs	r2, r1
 8002d42:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	689a      	ldr	r2, [r3, #8]
 8002d4a:	4b18      	ldr	r3, [pc, #96]	; (8002dac <HAL_ADC_Init+0x1ac>)
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	68ba      	ldr	r2, [r7, #8]
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d10b      	bne.n	8002d6c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2200      	movs	r2, #0
 8002d58:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d5e:	f023 0303 	bic.w	r3, r3, #3
 8002d62:	f043 0201 	orr.w	r2, r3, #1
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002d6a:	e018      	b.n	8002d9e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d70:	f023 0312 	bic.w	r3, r3, #18
 8002d74:	f043 0210 	orr.w	r2, r3, #16
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d80:	f043 0201 	orr.w	r2, r3, #1
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002d8c:	e007      	b.n	8002d9e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d92:	f043 0210 	orr.w	r2, r3, #16
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002d9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3718      	adds	r7, #24
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	ffe1f7fd 	.word	0xffe1f7fd
 8002dac:	ff1f0efe 	.word	0xff1f0efe

08002db0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002db0:	b480      	push	{r7}
 8002db2:	b085      	sub	sp, #20
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
 8002db8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d101      	bne.n	8002dd0 <HAL_ADC_ConfigChannel+0x20>
 8002dcc:	2302      	movs	r3, #2
 8002dce:	e0dc      	b.n	8002f8a <HAL_ADC_ConfigChannel+0x1da>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	2b06      	cmp	r3, #6
 8002dde:	d81c      	bhi.n	8002e1a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	685a      	ldr	r2, [r3, #4]
 8002dea:	4613      	mov	r3, r2
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	4413      	add	r3, r2
 8002df0:	3b05      	subs	r3, #5
 8002df2:	221f      	movs	r2, #31
 8002df4:	fa02 f303 	lsl.w	r3, r2, r3
 8002df8:	43db      	mvns	r3, r3
 8002dfa:	4019      	ands	r1, r3
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	6818      	ldr	r0, [r3, #0]
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	685a      	ldr	r2, [r3, #4]
 8002e04:	4613      	mov	r3, r2
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	4413      	add	r3, r2
 8002e0a:	3b05      	subs	r3, #5
 8002e0c:	fa00 f203 	lsl.w	r2, r0, r3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	430a      	orrs	r2, r1
 8002e16:	635a      	str	r2, [r3, #52]	; 0x34
 8002e18:	e03c      	b.n	8002e94 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	2b0c      	cmp	r3, #12
 8002e20:	d81c      	bhi.n	8002e5c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	685a      	ldr	r2, [r3, #4]
 8002e2c:	4613      	mov	r3, r2
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	4413      	add	r3, r2
 8002e32:	3b23      	subs	r3, #35	; 0x23
 8002e34:	221f      	movs	r2, #31
 8002e36:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3a:	43db      	mvns	r3, r3
 8002e3c:	4019      	ands	r1, r3
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	6818      	ldr	r0, [r3, #0]
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	685a      	ldr	r2, [r3, #4]
 8002e46:	4613      	mov	r3, r2
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	4413      	add	r3, r2
 8002e4c:	3b23      	subs	r3, #35	; 0x23
 8002e4e:	fa00 f203 	lsl.w	r2, r0, r3
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	430a      	orrs	r2, r1
 8002e58:	631a      	str	r2, [r3, #48]	; 0x30
 8002e5a:	e01b      	b.n	8002e94 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	685a      	ldr	r2, [r3, #4]
 8002e66:	4613      	mov	r3, r2
 8002e68:	009b      	lsls	r3, r3, #2
 8002e6a:	4413      	add	r3, r2
 8002e6c:	3b41      	subs	r3, #65	; 0x41
 8002e6e:	221f      	movs	r2, #31
 8002e70:	fa02 f303 	lsl.w	r3, r2, r3
 8002e74:	43db      	mvns	r3, r3
 8002e76:	4019      	ands	r1, r3
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	6818      	ldr	r0, [r3, #0]
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	685a      	ldr	r2, [r3, #4]
 8002e80:	4613      	mov	r3, r2
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	4413      	add	r3, r2
 8002e86:	3b41      	subs	r3, #65	; 0x41
 8002e88:	fa00 f203 	lsl.w	r2, r0, r3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	430a      	orrs	r2, r1
 8002e92:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	2b09      	cmp	r3, #9
 8002e9a:	d91c      	bls.n	8002ed6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	68d9      	ldr	r1, [r3, #12]
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	4613      	mov	r3, r2
 8002ea8:	005b      	lsls	r3, r3, #1
 8002eaa:	4413      	add	r3, r2
 8002eac:	3b1e      	subs	r3, #30
 8002eae:	2207      	movs	r2, #7
 8002eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb4:	43db      	mvns	r3, r3
 8002eb6:	4019      	ands	r1, r3
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	6898      	ldr	r0, [r3, #8]
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	4613      	mov	r3, r2
 8002ec2:	005b      	lsls	r3, r3, #1
 8002ec4:	4413      	add	r3, r2
 8002ec6:	3b1e      	subs	r3, #30
 8002ec8:	fa00 f203 	lsl.w	r2, r0, r3
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	430a      	orrs	r2, r1
 8002ed2:	60da      	str	r2, [r3, #12]
 8002ed4:	e019      	b.n	8002f0a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	6919      	ldr	r1, [r3, #16]
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	4613      	mov	r3, r2
 8002ee2:	005b      	lsls	r3, r3, #1
 8002ee4:	4413      	add	r3, r2
 8002ee6:	2207      	movs	r2, #7
 8002ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8002eec:	43db      	mvns	r3, r3
 8002eee:	4019      	ands	r1, r3
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	6898      	ldr	r0, [r3, #8]
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	4613      	mov	r3, r2
 8002efa:	005b      	lsls	r3, r3, #1
 8002efc:	4413      	add	r3, r2
 8002efe:	fa00 f203 	lsl.w	r2, r0, r3
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	430a      	orrs	r2, r1
 8002f08:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	2b10      	cmp	r3, #16
 8002f10:	d003      	beq.n	8002f1a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002f16:	2b11      	cmp	r3, #17
 8002f18:	d132      	bne.n	8002f80 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a1d      	ldr	r2, [pc, #116]	; (8002f94 <HAL_ADC_ConfigChannel+0x1e4>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d125      	bne.n	8002f70 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d126      	bne.n	8002f80 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	689a      	ldr	r2, [r3, #8]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002f40:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	2b10      	cmp	r3, #16
 8002f48:	d11a      	bne.n	8002f80 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002f4a:	4b13      	ldr	r3, [pc, #76]	; (8002f98 <HAL_ADC_ConfigChannel+0x1e8>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a13      	ldr	r2, [pc, #76]	; (8002f9c <HAL_ADC_ConfigChannel+0x1ec>)
 8002f50:	fba2 2303 	umull	r2, r3, r2, r3
 8002f54:	0c9a      	lsrs	r2, r3, #18
 8002f56:	4613      	mov	r3, r2
 8002f58:	009b      	lsls	r3, r3, #2
 8002f5a:	4413      	add	r3, r2
 8002f5c:	005b      	lsls	r3, r3, #1
 8002f5e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002f60:	e002      	b.n	8002f68 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	3b01      	subs	r3, #1
 8002f66:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d1f9      	bne.n	8002f62 <HAL_ADC_ConfigChannel+0x1b2>
 8002f6e:	e007      	b.n	8002f80 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f74:	f043 0220 	orr.w	r2, r3, #32
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2200      	movs	r2, #0
 8002f84:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002f88:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3714      	adds	r7, #20
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bc80      	pop	{r7}
 8002f92:	4770      	bx	lr
 8002f94:	40012400 	.word	0x40012400
 8002f98:	20000088 	.word	0x20000088
 8002f9c:	431bde83 	.word	0x431bde83

08002fa0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b084      	sub	sp, #16
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	f003 0301 	and.w	r3, r3, #1
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d12e      	bne.n	8003018 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	689a      	ldr	r2, [r3, #8]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f022 0201 	bic.w	r2, r2, #1
 8002fc8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002fca:	f7ff fdeb 	bl	8002ba4 <HAL_GetTick>
 8002fce:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002fd0:	e01b      	b.n	800300a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002fd2:	f7ff fde7 	bl	8002ba4 <HAL_GetTick>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	d914      	bls.n	800300a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	f003 0301 	and.w	r3, r3, #1
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d10d      	bne.n	800300a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ff2:	f043 0210 	orr.w	r2, r3, #16
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ffe:	f043 0201 	orr.w	r2, r3, #1
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e007      	b.n	800301a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	f003 0301 	and.w	r3, r3, #1
 8003014:	2b01      	cmp	r3, #1
 8003016:	d0dc      	beq.n	8002fd2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003018:	2300      	movs	r3, #0
}
 800301a:	4618      	mov	r0, r3
 800301c:	3710      	adds	r7, #16
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
	...

08003024 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003024:	b480      	push	{r7}
 8003026:	b085      	sub	sp, #20
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	f003 0307 	and.w	r3, r3, #7
 8003032:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003034:	4b0c      	ldr	r3, [pc, #48]	; (8003068 <__NVIC_SetPriorityGrouping+0x44>)
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800303a:	68ba      	ldr	r2, [r7, #8]
 800303c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003040:	4013      	ands	r3, r2
 8003042:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800304c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003050:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003054:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003056:	4a04      	ldr	r2, [pc, #16]	; (8003068 <__NVIC_SetPriorityGrouping+0x44>)
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	60d3      	str	r3, [r2, #12]
}
 800305c:	bf00      	nop
 800305e:	3714      	adds	r7, #20
 8003060:	46bd      	mov	sp, r7
 8003062:	bc80      	pop	{r7}
 8003064:	4770      	bx	lr
 8003066:	bf00      	nop
 8003068:	e000ed00 	.word	0xe000ed00

0800306c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800306c:	b480      	push	{r7}
 800306e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003070:	4b04      	ldr	r3, [pc, #16]	; (8003084 <__NVIC_GetPriorityGrouping+0x18>)
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	0a1b      	lsrs	r3, r3, #8
 8003076:	f003 0307 	and.w	r3, r3, #7
}
 800307a:	4618      	mov	r0, r3
 800307c:	46bd      	mov	sp, r7
 800307e:	bc80      	pop	{r7}
 8003080:	4770      	bx	lr
 8003082:	bf00      	nop
 8003084:	e000ed00 	.word	0xe000ed00

08003088 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003088:	b480      	push	{r7}
 800308a:	b083      	sub	sp, #12
 800308c:	af00      	add	r7, sp, #0
 800308e:	4603      	mov	r3, r0
 8003090:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003096:	2b00      	cmp	r3, #0
 8003098:	db0b      	blt.n	80030b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800309a:	79fb      	ldrb	r3, [r7, #7]
 800309c:	f003 021f 	and.w	r2, r3, #31
 80030a0:	4906      	ldr	r1, [pc, #24]	; (80030bc <__NVIC_EnableIRQ+0x34>)
 80030a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030a6:	095b      	lsrs	r3, r3, #5
 80030a8:	2001      	movs	r0, #1
 80030aa:	fa00 f202 	lsl.w	r2, r0, r2
 80030ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80030b2:	bf00      	nop
 80030b4:	370c      	adds	r7, #12
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bc80      	pop	{r7}
 80030ba:	4770      	bx	lr
 80030bc:	e000e100 	.word	0xe000e100

080030c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b083      	sub	sp, #12
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	4603      	mov	r3, r0
 80030c8:	6039      	str	r1, [r7, #0]
 80030ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	db0a      	blt.n	80030ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	b2da      	uxtb	r2, r3
 80030d8:	490c      	ldr	r1, [pc, #48]	; (800310c <__NVIC_SetPriority+0x4c>)
 80030da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030de:	0112      	lsls	r2, r2, #4
 80030e0:	b2d2      	uxtb	r2, r2
 80030e2:	440b      	add	r3, r1
 80030e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030e8:	e00a      	b.n	8003100 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	b2da      	uxtb	r2, r3
 80030ee:	4908      	ldr	r1, [pc, #32]	; (8003110 <__NVIC_SetPriority+0x50>)
 80030f0:	79fb      	ldrb	r3, [r7, #7]
 80030f2:	f003 030f 	and.w	r3, r3, #15
 80030f6:	3b04      	subs	r3, #4
 80030f8:	0112      	lsls	r2, r2, #4
 80030fa:	b2d2      	uxtb	r2, r2
 80030fc:	440b      	add	r3, r1
 80030fe:	761a      	strb	r2, [r3, #24]
}
 8003100:	bf00      	nop
 8003102:	370c      	adds	r7, #12
 8003104:	46bd      	mov	sp, r7
 8003106:	bc80      	pop	{r7}
 8003108:	4770      	bx	lr
 800310a:	bf00      	nop
 800310c:	e000e100 	.word	0xe000e100
 8003110:	e000ed00 	.word	0xe000ed00

08003114 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003114:	b480      	push	{r7}
 8003116:	b089      	sub	sp, #36	; 0x24
 8003118:	af00      	add	r7, sp, #0
 800311a:	60f8      	str	r0, [r7, #12]
 800311c:	60b9      	str	r1, [r7, #8]
 800311e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	f003 0307 	and.w	r3, r3, #7
 8003126:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	f1c3 0307 	rsb	r3, r3, #7
 800312e:	2b04      	cmp	r3, #4
 8003130:	bf28      	it	cs
 8003132:	2304      	movcs	r3, #4
 8003134:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	3304      	adds	r3, #4
 800313a:	2b06      	cmp	r3, #6
 800313c:	d902      	bls.n	8003144 <NVIC_EncodePriority+0x30>
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	3b03      	subs	r3, #3
 8003142:	e000      	b.n	8003146 <NVIC_EncodePriority+0x32>
 8003144:	2300      	movs	r3, #0
 8003146:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003148:	f04f 32ff 	mov.w	r2, #4294967295
 800314c:	69bb      	ldr	r3, [r7, #24]
 800314e:	fa02 f303 	lsl.w	r3, r2, r3
 8003152:	43da      	mvns	r2, r3
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	401a      	ands	r2, r3
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800315c:	f04f 31ff 	mov.w	r1, #4294967295
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	fa01 f303 	lsl.w	r3, r1, r3
 8003166:	43d9      	mvns	r1, r3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800316c:	4313      	orrs	r3, r2
         );
}
 800316e:	4618      	mov	r0, r3
 8003170:	3724      	adds	r7, #36	; 0x24
 8003172:	46bd      	mov	sp, r7
 8003174:	bc80      	pop	{r7}
 8003176:	4770      	bx	lr

08003178 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b082      	sub	sp, #8
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	3b01      	subs	r3, #1
 8003184:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003188:	d301      	bcc.n	800318e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800318a:	2301      	movs	r3, #1
 800318c:	e00f      	b.n	80031ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800318e:	4a0a      	ldr	r2, [pc, #40]	; (80031b8 <SysTick_Config+0x40>)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	3b01      	subs	r3, #1
 8003194:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003196:	210f      	movs	r1, #15
 8003198:	f04f 30ff 	mov.w	r0, #4294967295
 800319c:	f7ff ff90 	bl	80030c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031a0:	4b05      	ldr	r3, [pc, #20]	; (80031b8 <SysTick_Config+0x40>)
 80031a2:	2200      	movs	r2, #0
 80031a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031a6:	4b04      	ldr	r3, [pc, #16]	; (80031b8 <SysTick_Config+0x40>)
 80031a8:	2207      	movs	r2, #7
 80031aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031ac:	2300      	movs	r3, #0
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3708      	adds	r7, #8
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	e000e010 	.word	0xe000e010

080031bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b082      	sub	sp, #8
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031c4:	6878      	ldr	r0, [r7, #4]
 80031c6:	f7ff ff2d 	bl	8003024 <__NVIC_SetPriorityGrouping>
}
 80031ca:	bf00      	nop
 80031cc:	3708      	adds	r7, #8
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}

080031d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80031d2:	b580      	push	{r7, lr}
 80031d4:	b086      	sub	sp, #24
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	4603      	mov	r3, r0
 80031da:	60b9      	str	r1, [r7, #8]
 80031dc:	607a      	str	r2, [r7, #4]
 80031de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80031e0:	2300      	movs	r3, #0
 80031e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80031e4:	f7ff ff42 	bl	800306c <__NVIC_GetPriorityGrouping>
 80031e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031ea:	687a      	ldr	r2, [r7, #4]
 80031ec:	68b9      	ldr	r1, [r7, #8]
 80031ee:	6978      	ldr	r0, [r7, #20]
 80031f0:	f7ff ff90 	bl	8003114 <NVIC_EncodePriority>
 80031f4:	4602      	mov	r2, r0
 80031f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031fa:	4611      	mov	r1, r2
 80031fc:	4618      	mov	r0, r3
 80031fe:	f7ff ff5f 	bl	80030c0 <__NVIC_SetPriority>
}
 8003202:	bf00      	nop
 8003204:	3718      	adds	r7, #24
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}

0800320a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800320a:	b580      	push	{r7, lr}
 800320c:	b082      	sub	sp, #8
 800320e:	af00      	add	r7, sp, #0
 8003210:	4603      	mov	r3, r0
 8003212:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003214:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003218:	4618      	mov	r0, r3
 800321a:	f7ff ff35 	bl	8003088 <__NVIC_EnableIRQ>
}
 800321e:	bf00      	nop
 8003220:	3708      	adds	r7, #8
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}

08003226 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003226:	b580      	push	{r7, lr}
 8003228:	b082      	sub	sp, #8
 800322a:	af00      	add	r7, sp, #0
 800322c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f7ff ffa2 	bl	8003178 <SysTick_Config>
 8003234:	4603      	mov	r3, r0
}
 8003236:	4618      	mov	r0, r3
 8003238:	3708      	adds	r7, #8
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
	...

08003240 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003240:	b480      	push	{r7}
 8003242:	b085      	sub	sp, #20
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003248:	2300      	movs	r3, #0
 800324a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d101      	bne.n	8003256 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e043      	b.n	80032de <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	461a      	mov	r2, r3
 800325c:	4b22      	ldr	r3, [pc, #136]	; (80032e8 <HAL_DMA_Init+0xa8>)
 800325e:	4413      	add	r3, r2
 8003260:	4a22      	ldr	r2, [pc, #136]	; (80032ec <HAL_DMA_Init+0xac>)
 8003262:	fba2 2303 	umull	r2, r3, r2, r3
 8003266:	091b      	lsrs	r3, r3, #4
 8003268:	009a      	lsls	r2, r3, #2
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	4a1f      	ldr	r2, [pc, #124]	; (80032f0 <HAL_DMA_Init+0xb0>)
 8003272:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2202      	movs	r2, #2
 8003278:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800328a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800328e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003298:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	68db      	ldr	r3, [r3, #12]
 800329e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	695b      	ldr	r3, [r3, #20]
 80032aa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	69db      	ldr	r3, [r3, #28]
 80032b6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80032b8:	68fa      	ldr	r2, [r7, #12]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	68fa      	ldr	r2, [r7, #12]
 80032c4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2200      	movs	r2, #0
 80032ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2201      	movs	r2, #1
 80032d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2200      	movs	r2, #0
 80032d8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80032dc:	2300      	movs	r3, #0
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3714      	adds	r7, #20
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bc80      	pop	{r7}
 80032e6:	4770      	bx	lr
 80032e8:	bffdfff8 	.word	0xbffdfff8
 80032ec:	cccccccd 	.word	0xcccccccd
 80032f0:	40020000 	.word	0x40020000

080032f4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b086      	sub	sp, #24
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	60f8      	str	r0, [r7, #12]
 80032fc:	60b9      	str	r1, [r7, #8]
 80032fe:	607a      	str	r2, [r7, #4]
 8003300:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003302:	2300      	movs	r3, #0
 8003304:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	f893 3020 	ldrb.w	r3, [r3, #32]
 800330c:	2b01      	cmp	r3, #1
 800330e:	d101      	bne.n	8003314 <HAL_DMA_Start_IT+0x20>
 8003310:	2302      	movs	r3, #2
 8003312:	e04b      	b.n	80033ac <HAL_DMA_Start_IT+0xb8>
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2201      	movs	r2, #1
 8003318:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003322:	b2db      	uxtb	r3, r3
 8003324:	2b01      	cmp	r3, #1
 8003326:	d13a      	bne.n	800339e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2202      	movs	r2, #2
 800332c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2200      	movs	r2, #0
 8003334:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f022 0201 	bic.w	r2, r2, #1
 8003344:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	687a      	ldr	r2, [r7, #4]
 800334a:	68b9      	ldr	r1, [r7, #8]
 800334c:	68f8      	ldr	r0, [r7, #12]
 800334e:	f000 f9eb 	bl	8003728 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003356:	2b00      	cmp	r3, #0
 8003358:	d008      	beq.n	800336c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f042 020e 	orr.w	r2, r2, #14
 8003368:	601a      	str	r2, [r3, #0]
 800336a:	e00f      	b.n	800338c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f022 0204 	bic.w	r2, r2, #4
 800337a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f042 020a 	orr.w	r2, r2, #10
 800338a:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f042 0201 	orr.w	r2, r2, #1
 800339a:	601a      	str	r2, [r3, #0]
 800339c:	e005      	b.n	80033aa <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2200      	movs	r2, #0
 80033a2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80033a6:	2302      	movs	r3, #2
 80033a8:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80033aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	3718      	adds	r7, #24
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}

080033b4 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b085      	sub	sp, #20
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033bc:	2300      	movs	r3, #0
 80033be:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	2b02      	cmp	r3, #2
 80033ca:	d008      	beq.n	80033de <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2204      	movs	r2, #4
 80033d0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2200      	movs	r2, #0
 80033d6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e020      	b.n	8003420 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f022 020e 	bic.w	r2, r2, #14
 80033ec:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f022 0201 	bic.w	r2, r2, #1
 80033fc:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003406:	2101      	movs	r1, #1
 8003408:	fa01 f202 	lsl.w	r2, r1, r2
 800340c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2201      	movs	r2, #1
 8003412:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2200      	movs	r2, #0
 800341a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800341e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003420:	4618      	mov	r0, r3
 8003422:	3714      	adds	r7, #20
 8003424:	46bd      	mov	sp, r7
 8003426:	bc80      	pop	{r7}
 8003428:	4770      	bx	lr
	...

0800342c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800342c:	b580      	push	{r7, lr}
 800342e:	b084      	sub	sp, #16
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003434:	2300      	movs	r3, #0
 8003436:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800343e:	b2db      	uxtb	r3, r3
 8003440:	2b02      	cmp	r3, #2
 8003442:	d005      	beq.n	8003450 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2204      	movs	r2, #4
 8003448:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	73fb      	strb	r3, [r7, #15]
 800344e:	e051      	b.n	80034f4 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f022 020e 	bic.w	r2, r2, #14
 800345e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f022 0201 	bic.w	r2, r2, #1
 800346e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a22      	ldr	r2, [pc, #136]	; (8003500 <HAL_DMA_Abort_IT+0xd4>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d029      	beq.n	80034ce <HAL_DMA_Abort_IT+0xa2>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a21      	ldr	r2, [pc, #132]	; (8003504 <HAL_DMA_Abort_IT+0xd8>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d022      	beq.n	80034ca <HAL_DMA_Abort_IT+0x9e>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a1f      	ldr	r2, [pc, #124]	; (8003508 <HAL_DMA_Abort_IT+0xdc>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d01a      	beq.n	80034c4 <HAL_DMA_Abort_IT+0x98>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a1e      	ldr	r2, [pc, #120]	; (800350c <HAL_DMA_Abort_IT+0xe0>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d012      	beq.n	80034be <HAL_DMA_Abort_IT+0x92>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a1c      	ldr	r2, [pc, #112]	; (8003510 <HAL_DMA_Abort_IT+0xe4>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d00a      	beq.n	80034b8 <HAL_DMA_Abort_IT+0x8c>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a1b      	ldr	r2, [pc, #108]	; (8003514 <HAL_DMA_Abort_IT+0xe8>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d102      	bne.n	80034b2 <HAL_DMA_Abort_IT+0x86>
 80034ac:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80034b0:	e00e      	b.n	80034d0 <HAL_DMA_Abort_IT+0xa4>
 80034b2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80034b6:	e00b      	b.n	80034d0 <HAL_DMA_Abort_IT+0xa4>
 80034b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80034bc:	e008      	b.n	80034d0 <HAL_DMA_Abort_IT+0xa4>
 80034be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80034c2:	e005      	b.n	80034d0 <HAL_DMA_Abort_IT+0xa4>
 80034c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80034c8:	e002      	b.n	80034d0 <HAL_DMA_Abort_IT+0xa4>
 80034ca:	2310      	movs	r3, #16
 80034cc:	e000      	b.n	80034d0 <HAL_DMA_Abort_IT+0xa4>
 80034ce:	2301      	movs	r3, #1
 80034d0:	4a11      	ldr	r2, [pc, #68]	; (8003518 <HAL_DMA_Abort_IT+0xec>)
 80034d2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2201      	movs	r2, #1
 80034d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2200      	movs	r2, #0
 80034e0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d003      	beq.n	80034f4 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034f0:	6878      	ldr	r0, [r7, #4]
 80034f2:	4798      	blx	r3
    } 
  }
  return status;
 80034f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3710      	adds	r7, #16
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop
 8003500:	40020008 	.word	0x40020008
 8003504:	4002001c 	.word	0x4002001c
 8003508:	40020030 	.word	0x40020030
 800350c:	40020044 	.word	0x40020044
 8003510:	40020058 	.word	0x40020058
 8003514:	4002006c 	.word	0x4002006c
 8003518:	40020000 	.word	0x40020000

0800351c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b084      	sub	sp, #16
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003538:	2204      	movs	r2, #4
 800353a:	409a      	lsls	r2, r3
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	4013      	ands	r3, r2
 8003540:	2b00      	cmp	r3, #0
 8003542:	d04f      	beq.n	80035e4 <HAL_DMA_IRQHandler+0xc8>
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	f003 0304 	and.w	r3, r3, #4
 800354a:	2b00      	cmp	r3, #0
 800354c:	d04a      	beq.n	80035e4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 0320 	and.w	r3, r3, #32
 8003558:	2b00      	cmp	r3, #0
 800355a:	d107      	bne.n	800356c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f022 0204 	bic.w	r2, r2, #4
 800356a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a66      	ldr	r2, [pc, #408]	; (800370c <HAL_DMA_IRQHandler+0x1f0>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d029      	beq.n	80035ca <HAL_DMA_IRQHandler+0xae>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a65      	ldr	r2, [pc, #404]	; (8003710 <HAL_DMA_IRQHandler+0x1f4>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d022      	beq.n	80035c6 <HAL_DMA_IRQHandler+0xaa>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a63      	ldr	r2, [pc, #396]	; (8003714 <HAL_DMA_IRQHandler+0x1f8>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d01a      	beq.n	80035c0 <HAL_DMA_IRQHandler+0xa4>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a62      	ldr	r2, [pc, #392]	; (8003718 <HAL_DMA_IRQHandler+0x1fc>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d012      	beq.n	80035ba <HAL_DMA_IRQHandler+0x9e>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a60      	ldr	r2, [pc, #384]	; (800371c <HAL_DMA_IRQHandler+0x200>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d00a      	beq.n	80035b4 <HAL_DMA_IRQHandler+0x98>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a5f      	ldr	r2, [pc, #380]	; (8003720 <HAL_DMA_IRQHandler+0x204>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d102      	bne.n	80035ae <HAL_DMA_IRQHandler+0x92>
 80035a8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80035ac:	e00e      	b.n	80035cc <HAL_DMA_IRQHandler+0xb0>
 80035ae:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80035b2:	e00b      	b.n	80035cc <HAL_DMA_IRQHandler+0xb0>
 80035b4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80035b8:	e008      	b.n	80035cc <HAL_DMA_IRQHandler+0xb0>
 80035ba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80035be:	e005      	b.n	80035cc <HAL_DMA_IRQHandler+0xb0>
 80035c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035c4:	e002      	b.n	80035cc <HAL_DMA_IRQHandler+0xb0>
 80035c6:	2340      	movs	r3, #64	; 0x40
 80035c8:	e000      	b.n	80035cc <HAL_DMA_IRQHandler+0xb0>
 80035ca:	2304      	movs	r3, #4
 80035cc:	4a55      	ldr	r2, [pc, #340]	; (8003724 <HAL_DMA_IRQHandler+0x208>)
 80035ce:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	f000 8094 	beq.w	8003702 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80035e2:	e08e      	b.n	8003702 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e8:	2202      	movs	r2, #2
 80035ea:	409a      	lsls	r2, r3
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	4013      	ands	r3, r2
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d056      	beq.n	80036a2 <HAL_DMA_IRQHandler+0x186>
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	f003 0302 	and.w	r3, r3, #2
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d051      	beq.n	80036a2 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 0320 	and.w	r3, r3, #32
 8003608:	2b00      	cmp	r3, #0
 800360a:	d10b      	bne.n	8003624 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f022 020a 	bic.w	r2, r2, #10
 800361a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2201      	movs	r2, #1
 8003620:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a38      	ldr	r2, [pc, #224]	; (800370c <HAL_DMA_IRQHandler+0x1f0>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d029      	beq.n	8003682 <HAL_DMA_IRQHandler+0x166>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a37      	ldr	r2, [pc, #220]	; (8003710 <HAL_DMA_IRQHandler+0x1f4>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d022      	beq.n	800367e <HAL_DMA_IRQHandler+0x162>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a35      	ldr	r2, [pc, #212]	; (8003714 <HAL_DMA_IRQHandler+0x1f8>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d01a      	beq.n	8003678 <HAL_DMA_IRQHandler+0x15c>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a34      	ldr	r2, [pc, #208]	; (8003718 <HAL_DMA_IRQHandler+0x1fc>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d012      	beq.n	8003672 <HAL_DMA_IRQHandler+0x156>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a32      	ldr	r2, [pc, #200]	; (800371c <HAL_DMA_IRQHandler+0x200>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d00a      	beq.n	800366c <HAL_DMA_IRQHandler+0x150>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a31      	ldr	r2, [pc, #196]	; (8003720 <HAL_DMA_IRQHandler+0x204>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d102      	bne.n	8003666 <HAL_DMA_IRQHandler+0x14a>
 8003660:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003664:	e00e      	b.n	8003684 <HAL_DMA_IRQHandler+0x168>
 8003666:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800366a:	e00b      	b.n	8003684 <HAL_DMA_IRQHandler+0x168>
 800366c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003670:	e008      	b.n	8003684 <HAL_DMA_IRQHandler+0x168>
 8003672:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003676:	e005      	b.n	8003684 <HAL_DMA_IRQHandler+0x168>
 8003678:	f44f 7300 	mov.w	r3, #512	; 0x200
 800367c:	e002      	b.n	8003684 <HAL_DMA_IRQHandler+0x168>
 800367e:	2320      	movs	r3, #32
 8003680:	e000      	b.n	8003684 <HAL_DMA_IRQHandler+0x168>
 8003682:	2302      	movs	r3, #2
 8003684:	4a27      	ldr	r2, [pc, #156]	; (8003724 <HAL_DMA_IRQHandler+0x208>)
 8003686:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2200      	movs	r2, #0
 800368c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003694:	2b00      	cmp	r3, #0
 8003696:	d034      	beq.n	8003702 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80036a0:	e02f      	b.n	8003702 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a6:	2208      	movs	r2, #8
 80036a8:	409a      	lsls	r2, r3
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	4013      	ands	r3, r2
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d028      	beq.n	8003704 <HAL_DMA_IRQHandler+0x1e8>
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	f003 0308 	and.w	r3, r3, #8
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d023      	beq.n	8003704 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f022 020e 	bic.w	r2, r2, #14
 80036ca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036d4:	2101      	movs	r1, #1
 80036d6:	fa01 f202 	lsl.w	r2, r1, r2
 80036da:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2201      	movs	r2, #1
 80036e0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2201      	movs	r2, #1
 80036e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2200      	movs	r2, #0
 80036ee:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d004      	beq.n	8003704 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	4798      	blx	r3
    }
  }
  return;
 8003702:	bf00      	nop
 8003704:	bf00      	nop
}
 8003706:	3710      	adds	r7, #16
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}
 800370c:	40020008 	.word	0x40020008
 8003710:	4002001c 	.word	0x4002001c
 8003714:	40020030 	.word	0x40020030
 8003718:	40020044 	.word	0x40020044
 800371c:	40020058 	.word	0x40020058
 8003720:	4002006c 	.word	0x4002006c
 8003724:	40020000 	.word	0x40020000

08003728 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003728:	b480      	push	{r7}
 800372a:	b085      	sub	sp, #20
 800372c:	af00      	add	r7, sp, #0
 800372e:	60f8      	str	r0, [r7, #12]
 8003730:	60b9      	str	r1, [r7, #8]
 8003732:	607a      	str	r2, [r7, #4]
 8003734:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800373e:	2101      	movs	r1, #1
 8003740:	fa01 f202 	lsl.w	r2, r1, r2
 8003744:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	683a      	ldr	r2, [r7, #0]
 800374c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	2b10      	cmp	r3, #16
 8003754:	d108      	bne.n	8003768 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	687a      	ldr	r2, [r7, #4]
 800375c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	68ba      	ldr	r2, [r7, #8]
 8003764:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003766:	e007      	b.n	8003778 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	68ba      	ldr	r2, [r7, #8]
 800376e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	687a      	ldr	r2, [r7, #4]
 8003776:	60da      	str	r2, [r3, #12]
}
 8003778:	bf00      	nop
 800377a:	3714      	adds	r7, #20
 800377c:	46bd      	mov	sp, r7
 800377e:	bc80      	pop	{r7}
 8003780:	4770      	bx	lr
	...

08003784 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003784:	b480      	push	{r7}
 8003786:	b08b      	sub	sp, #44	; 0x2c
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
 800378c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800378e:	2300      	movs	r3, #0
 8003790:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003792:	2300      	movs	r3, #0
 8003794:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003796:	e169      	b.n	8003a6c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003798:	2201      	movs	r2, #1
 800379a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379c:	fa02 f303 	lsl.w	r3, r2, r3
 80037a0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	69fa      	ldr	r2, [r7, #28]
 80037a8:	4013      	ands	r3, r2
 80037aa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80037ac:	69ba      	ldr	r2, [r7, #24]
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	429a      	cmp	r2, r3
 80037b2:	f040 8158 	bne.w	8003a66 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	4a9a      	ldr	r2, [pc, #616]	; (8003a24 <HAL_GPIO_Init+0x2a0>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d05e      	beq.n	800387e <HAL_GPIO_Init+0xfa>
 80037c0:	4a98      	ldr	r2, [pc, #608]	; (8003a24 <HAL_GPIO_Init+0x2a0>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d875      	bhi.n	80038b2 <HAL_GPIO_Init+0x12e>
 80037c6:	4a98      	ldr	r2, [pc, #608]	; (8003a28 <HAL_GPIO_Init+0x2a4>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d058      	beq.n	800387e <HAL_GPIO_Init+0xfa>
 80037cc:	4a96      	ldr	r2, [pc, #600]	; (8003a28 <HAL_GPIO_Init+0x2a4>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d86f      	bhi.n	80038b2 <HAL_GPIO_Init+0x12e>
 80037d2:	4a96      	ldr	r2, [pc, #600]	; (8003a2c <HAL_GPIO_Init+0x2a8>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d052      	beq.n	800387e <HAL_GPIO_Init+0xfa>
 80037d8:	4a94      	ldr	r2, [pc, #592]	; (8003a2c <HAL_GPIO_Init+0x2a8>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d869      	bhi.n	80038b2 <HAL_GPIO_Init+0x12e>
 80037de:	4a94      	ldr	r2, [pc, #592]	; (8003a30 <HAL_GPIO_Init+0x2ac>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d04c      	beq.n	800387e <HAL_GPIO_Init+0xfa>
 80037e4:	4a92      	ldr	r2, [pc, #584]	; (8003a30 <HAL_GPIO_Init+0x2ac>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d863      	bhi.n	80038b2 <HAL_GPIO_Init+0x12e>
 80037ea:	4a92      	ldr	r2, [pc, #584]	; (8003a34 <HAL_GPIO_Init+0x2b0>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d046      	beq.n	800387e <HAL_GPIO_Init+0xfa>
 80037f0:	4a90      	ldr	r2, [pc, #576]	; (8003a34 <HAL_GPIO_Init+0x2b0>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d85d      	bhi.n	80038b2 <HAL_GPIO_Init+0x12e>
 80037f6:	2b12      	cmp	r3, #18
 80037f8:	d82a      	bhi.n	8003850 <HAL_GPIO_Init+0xcc>
 80037fa:	2b12      	cmp	r3, #18
 80037fc:	d859      	bhi.n	80038b2 <HAL_GPIO_Init+0x12e>
 80037fe:	a201      	add	r2, pc, #4	; (adr r2, 8003804 <HAL_GPIO_Init+0x80>)
 8003800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003804:	0800387f 	.word	0x0800387f
 8003808:	08003859 	.word	0x08003859
 800380c:	0800386b 	.word	0x0800386b
 8003810:	080038ad 	.word	0x080038ad
 8003814:	080038b3 	.word	0x080038b3
 8003818:	080038b3 	.word	0x080038b3
 800381c:	080038b3 	.word	0x080038b3
 8003820:	080038b3 	.word	0x080038b3
 8003824:	080038b3 	.word	0x080038b3
 8003828:	080038b3 	.word	0x080038b3
 800382c:	080038b3 	.word	0x080038b3
 8003830:	080038b3 	.word	0x080038b3
 8003834:	080038b3 	.word	0x080038b3
 8003838:	080038b3 	.word	0x080038b3
 800383c:	080038b3 	.word	0x080038b3
 8003840:	080038b3 	.word	0x080038b3
 8003844:	080038b3 	.word	0x080038b3
 8003848:	08003861 	.word	0x08003861
 800384c:	08003875 	.word	0x08003875
 8003850:	4a79      	ldr	r2, [pc, #484]	; (8003a38 <HAL_GPIO_Init+0x2b4>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d013      	beq.n	800387e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003856:	e02c      	b.n	80038b2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	68db      	ldr	r3, [r3, #12]
 800385c:	623b      	str	r3, [r7, #32]
          break;
 800385e:	e029      	b.n	80038b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	3304      	adds	r3, #4
 8003866:	623b      	str	r3, [r7, #32]
          break;
 8003868:	e024      	b.n	80038b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	68db      	ldr	r3, [r3, #12]
 800386e:	3308      	adds	r3, #8
 8003870:	623b      	str	r3, [r7, #32]
          break;
 8003872:	e01f      	b.n	80038b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	330c      	adds	r3, #12
 800387a:	623b      	str	r3, [r7, #32]
          break;
 800387c:	e01a      	b.n	80038b4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d102      	bne.n	800388c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003886:	2304      	movs	r3, #4
 8003888:	623b      	str	r3, [r7, #32]
          break;
 800388a:	e013      	b.n	80038b4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	2b01      	cmp	r3, #1
 8003892:	d105      	bne.n	80038a0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003894:	2308      	movs	r3, #8
 8003896:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	69fa      	ldr	r2, [r7, #28]
 800389c:	611a      	str	r2, [r3, #16]
          break;
 800389e:	e009      	b.n	80038b4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80038a0:	2308      	movs	r3, #8
 80038a2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	69fa      	ldr	r2, [r7, #28]
 80038a8:	615a      	str	r2, [r3, #20]
          break;
 80038aa:	e003      	b.n	80038b4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80038ac:	2300      	movs	r3, #0
 80038ae:	623b      	str	r3, [r7, #32]
          break;
 80038b0:	e000      	b.n	80038b4 <HAL_GPIO_Init+0x130>
          break;
 80038b2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80038b4:	69bb      	ldr	r3, [r7, #24]
 80038b6:	2bff      	cmp	r3, #255	; 0xff
 80038b8:	d801      	bhi.n	80038be <HAL_GPIO_Init+0x13a>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	e001      	b.n	80038c2 <HAL_GPIO_Init+0x13e>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	3304      	adds	r3, #4
 80038c2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80038c4:	69bb      	ldr	r3, [r7, #24]
 80038c6:	2bff      	cmp	r3, #255	; 0xff
 80038c8:	d802      	bhi.n	80038d0 <HAL_GPIO_Init+0x14c>
 80038ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038cc:	009b      	lsls	r3, r3, #2
 80038ce:	e002      	b.n	80038d6 <HAL_GPIO_Init+0x152>
 80038d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d2:	3b08      	subs	r3, #8
 80038d4:	009b      	lsls	r3, r3, #2
 80038d6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	210f      	movs	r1, #15
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	fa01 f303 	lsl.w	r3, r1, r3
 80038e4:	43db      	mvns	r3, r3
 80038e6:	401a      	ands	r2, r3
 80038e8:	6a39      	ldr	r1, [r7, #32]
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	fa01 f303 	lsl.w	r3, r1, r3
 80038f0:	431a      	orrs	r2, r3
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038fe:	2b00      	cmp	r3, #0
 8003900:	f000 80b1 	beq.w	8003a66 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003904:	4b4d      	ldr	r3, [pc, #308]	; (8003a3c <HAL_GPIO_Init+0x2b8>)
 8003906:	699b      	ldr	r3, [r3, #24]
 8003908:	4a4c      	ldr	r2, [pc, #304]	; (8003a3c <HAL_GPIO_Init+0x2b8>)
 800390a:	f043 0301 	orr.w	r3, r3, #1
 800390e:	6193      	str	r3, [r2, #24]
 8003910:	4b4a      	ldr	r3, [pc, #296]	; (8003a3c <HAL_GPIO_Init+0x2b8>)
 8003912:	699b      	ldr	r3, [r3, #24]
 8003914:	f003 0301 	and.w	r3, r3, #1
 8003918:	60bb      	str	r3, [r7, #8]
 800391a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800391c:	4a48      	ldr	r2, [pc, #288]	; (8003a40 <HAL_GPIO_Init+0x2bc>)
 800391e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003920:	089b      	lsrs	r3, r3, #2
 8003922:	3302      	adds	r3, #2
 8003924:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003928:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800392a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800392c:	f003 0303 	and.w	r3, r3, #3
 8003930:	009b      	lsls	r3, r3, #2
 8003932:	220f      	movs	r2, #15
 8003934:	fa02 f303 	lsl.w	r3, r2, r3
 8003938:	43db      	mvns	r3, r3
 800393a:	68fa      	ldr	r2, [r7, #12]
 800393c:	4013      	ands	r3, r2
 800393e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	4a40      	ldr	r2, [pc, #256]	; (8003a44 <HAL_GPIO_Init+0x2c0>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d013      	beq.n	8003970 <HAL_GPIO_Init+0x1ec>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	4a3f      	ldr	r2, [pc, #252]	; (8003a48 <HAL_GPIO_Init+0x2c4>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d00d      	beq.n	800396c <HAL_GPIO_Init+0x1e8>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	4a3e      	ldr	r2, [pc, #248]	; (8003a4c <HAL_GPIO_Init+0x2c8>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d007      	beq.n	8003968 <HAL_GPIO_Init+0x1e4>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	4a3d      	ldr	r2, [pc, #244]	; (8003a50 <HAL_GPIO_Init+0x2cc>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d101      	bne.n	8003964 <HAL_GPIO_Init+0x1e0>
 8003960:	2303      	movs	r3, #3
 8003962:	e006      	b.n	8003972 <HAL_GPIO_Init+0x1ee>
 8003964:	2304      	movs	r3, #4
 8003966:	e004      	b.n	8003972 <HAL_GPIO_Init+0x1ee>
 8003968:	2302      	movs	r3, #2
 800396a:	e002      	b.n	8003972 <HAL_GPIO_Init+0x1ee>
 800396c:	2301      	movs	r3, #1
 800396e:	e000      	b.n	8003972 <HAL_GPIO_Init+0x1ee>
 8003970:	2300      	movs	r3, #0
 8003972:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003974:	f002 0203 	and.w	r2, r2, #3
 8003978:	0092      	lsls	r2, r2, #2
 800397a:	4093      	lsls	r3, r2
 800397c:	68fa      	ldr	r2, [r7, #12]
 800397e:	4313      	orrs	r3, r2
 8003980:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003982:	492f      	ldr	r1, [pc, #188]	; (8003a40 <HAL_GPIO_Init+0x2bc>)
 8003984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003986:	089b      	lsrs	r3, r3, #2
 8003988:	3302      	adds	r3, #2
 800398a:	68fa      	ldr	r2, [r7, #12]
 800398c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003998:	2b00      	cmp	r3, #0
 800399a:	d006      	beq.n	80039aa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800399c:	4b2d      	ldr	r3, [pc, #180]	; (8003a54 <HAL_GPIO_Init+0x2d0>)
 800399e:	689a      	ldr	r2, [r3, #8]
 80039a0:	492c      	ldr	r1, [pc, #176]	; (8003a54 <HAL_GPIO_Init+0x2d0>)
 80039a2:	69bb      	ldr	r3, [r7, #24]
 80039a4:	4313      	orrs	r3, r2
 80039a6:	608b      	str	r3, [r1, #8]
 80039a8:	e006      	b.n	80039b8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80039aa:	4b2a      	ldr	r3, [pc, #168]	; (8003a54 <HAL_GPIO_Init+0x2d0>)
 80039ac:	689a      	ldr	r2, [r3, #8]
 80039ae:	69bb      	ldr	r3, [r7, #24]
 80039b0:	43db      	mvns	r3, r3
 80039b2:	4928      	ldr	r1, [pc, #160]	; (8003a54 <HAL_GPIO_Init+0x2d0>)
 80039b4:	4013      	ands	r3, r2
 80039b6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d006      	beq.n	80039d2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80039c4:	4b23      	ldr	r3, [pc, #140]	; (8003a54 <HAL_GPIO_Init+0x2d0>)
 80039c6:	68da      	ldr	r2, [r3, #12]
 80039c8:	4922      	ldr	r1, [pc, #136]	; (8003a54 <HAL_GPIO_Init+0x2d0>)
 80039ca:	69bb      	ldr	r3, [r7, #24]
 80039cc:	4313      	orrs	r3, r2
 80039ce:	60cb      	str	r3, [r1, #12]
 80039d0:	e006      	b.n	80039e0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80039d2:	4b20      	ldr	r3, [pc, #128]	; (8003a54 <HAL_GPIO_Init+0x2d0>)
 80039d4:	68da      	ldr	r2, [r3, #12]
 80039d6:	69bb      	ldr	r3, [r7, #24]
 80039d8:	43db      	mvns	r3, r3
 80039da:	491e      	ldr	r1, [pc, #120]	; (8003a54 <HAL_GPIO_Init+0x2d0>)
 80039dc:	4013      	ands	r3, r2
 80039de:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d006      	beq.n	80039fa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80039ec:	4b19      	ldr	r3, [pc, #100]	; (8003a54 <HAL_GPIO_Init+0x2d0>)
 80039ee:	685a      	ldr	r2, [r3, #4]
 80039f0:	4918      	ldr	r1, [pc, #96]	; (8003a54 <HAL_GPIO_Init+0x2d0>)
 80039f2:	69bb      	ldr	r3, [r7, #24]
 80039f4:	4313      	orrs	r3, r2
 80039f6:	604b      	str	r3, [r1, #4]
 80039f8:	e006      	b.n	8003a08 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80039fa:	4b16      	ldr	r3, [pc, #88]	; (8003a54 <HAL_GPIO_Init+0x2d0>)
 80039fc:	685a      	ldr	r2, [r3, #4]
 80039fe:	69bb      	ldr	r3, [r7, #24]
 8003a00:	43db      	mvns	r3, r3
 8003a02:	4914      	ldr	r1, [pc, #80]	; (8003a54 <HAL_GPIO_Init+0x2d0>)
 8003a04:	4013      	ands	r3, r2
 8003a06:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d021      	beq.n	8003a58 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003a14:	4b0f      	ldr	r3, [pc, #60]	; (8003a54 <HAL_GPIO_Init+0x2d0>)
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	490e      	ldr	r1, [pc, #56]	; (8003a54 <HAL_GPIO_Init+0x2d0>)
 8003a1a:	69bb      	ldr	r3, [r7, #24]
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	600b      	str	r3, [r1, #0]
 8003a20:	e021      	b.n	8003a66 <HAL_GPIO_Init+0x2e2>
 8003a22:	bf00      	nop
 8003a24:	10320000 	.word	0x10320000
 8003a28:	10310000 	.word	0x10310000
 8003a2c:	10220000 	.word	0x10220000
 8003a30:	10210000 	.word	0x10210000
 8003a34:	10120000 	.word	0x10120000
 8003a38:	10110000 	.word	0x10110000
 8003a3c:	40021000 	.word	0x40021000
 8003a40:	40010000 	.word	0x40010000
 8003a44:	40010800 	.word	0x40010800
 8003a48:	40010c00 	.word	0x40010c00
 8003a4c:	40011000 	.word	0x40011000
 8003a50:	40011400 	.word	0x40011400
 8003a54:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003a58:	4b0b      	ldr	r3, [pc, #44]	; (8003a88 <HAL_GPIO_Init+0x304>)
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	69bb      	ldr	r3, [r7, #24]
 8003a5e:	43db      	mvns	r3, r3
 8003a60:	4909      	ldr	r1, [pc, #36]	; (8003a88 <HAL_GPIO_Init+0x304>)
 8003a62:	4013      	ands	r3, r2
 8003a64:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a68:	3301      	adds	r3, #1
 8003a6a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a72:	fa22 f303 	lsr.w	r3, r2, r3
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	f47f ae8e 	bne.w	8003798 <HAL_GPIO_Init+0x14>
  }
}
 8003a7c:	bf00      	nop
 8003a7e:	bf00      	nop
 8003a80:	372c      	adds	r7, #44	; 0x2c
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bc80      	pop	{r7}
 8003a86:	4770      	bx	lr
 8003a88:	40010400 	.word	0x40010400

08003a8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b083      	sub	sp, #12
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
 8003a94:	460b      	mov	r3, r1
 8003a96:	807b      	strh	r3, [r7, #2]
 8003a98:	4613      	mov	r3, r2
 8003a9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003a9c:	787b      	ldrb	r3, [r7, #1]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d003      	beq.n	8003aaa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003aa2:	887a      	ldrh	r2, [r7, #2]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003aa8:	e003      	b.n	8003ab2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003aaa:	887b      	ldrh	r3, [r7, #2]
 8003aac:	041a      	lsls	r2, r3, #16
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	611a      	str	r2, [r3, #16]
}
 8003ab2:	bf00      	nop
 8003ab4:	370c      	adds	r7, #12
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bc80      	pop	{r7}
 8003aba:	4770      	bx	lr

08003abc <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b085      	sub	sp, #20
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
 8003ac4:	460b      	mov	r3, r1
 8003ac6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003ace:	887a      	ldrh	r2, [r7, #2]
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	041a      	lsls	r2, r3, #16
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	43d9      	mvns	r1, r3
 8003ada:	887b      	ldrh	r3, [r7, #2]
 8003adc:	400b      	ands	r3, r1
 8003ade:	431a      	orrs	r2, r3
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	611a      	str	r2, [r3, #16]
}
 8003ae4:	bf00      	nop
 8003ae6:	3714      	adds	r7, #20
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bc80      	pop	{r7}
 8003aec:	4770      	bx	lr
	...

08003af0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b082      	sub	sp, #8
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	4603      	mov	r3, r0
 8003af8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003afa:	4b08      	ldr	r3, [pc, #32]	; (8003b1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003afc:	695a      	ldr	r2, [r3, #20]
 8003afe:	88fb      	ldrh	r3, [r7, #6]
 8003b00:	4013      	ands	r3, r2
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d006      	beq.n	8003b14 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003b06:	4a05      	ldr	r2, [pc, #20]	; (8003b1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b08:	88fb      	ldrh	r3, [r7, #6]
 8003b0a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003b0c:	88fb      	ldrh	r3, [r7, #6]
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f7fe f938 	bl	8001d84 <HAL_GPIO_EXTI_Callback>
  }
}
 8003b14:	bf00      	nop
 8003b16:	3708      	adds	r7, #8
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}
 8003b1c:	40010400 	.word	0x40010400

08003b20 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b084      	sub	sp, #16
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d101      	bne.n	8003b32 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e12b      	b.n	8003d8a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d106      	bne.n	8003b4c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2200      	movs	r2, #0
 8003b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f7fe f810 	bl	8001b6c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2224      	movs	r2, #36	; 0x24
 8003b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f022 0201 	bic.w	r2, r2, #1
 8003b62:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b72:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b82:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003b84:	f001 fbca 	bl	800531c <HAL_RCC_GetPCLK1Freq>
 8003b88:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	4a81      	ldr	r2, [pc, #516]	; (8003d94 <HAL_I2C_Init+0x274>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d807      	bhi.n	8003ba4 <HAL_I2C_Init+0x84>
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	4a80      	ldr	r2, [pc, #512]	; (8003d98 <HAL_I2C_Init+0x278>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	bf94      	ite	ls
 8003b9c:	2301      	movls	r3, #1
 8003b9e:	2300      	movhi	r3, #0
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	e006      	b.n	8003bb2 <HAL_I2C_Init+0x92>
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	4a7d      	ldr	r2, [pc, #500]	; (8003d9c <HAL_I2C_Init+0x27c>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	bf94      	ite	ls
 8003bac:	2301      	movls	r3, #1
 8003bae:	2300      	movhi	r3, #0
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d001      	beq.n	8003bba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e0e7      	b.n	8003d8a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	4a78      	ldr	r2, [pc, #480]	; (8003da0 <HAL_I2C_Init+0x280>)
 8003bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8003bc2:	0c9b      	lsrs	r3, r3, #18
 8003bc4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	68ba      	ldr	r2, [r7, #8]
 8003bd6:	430a      	orrs	r2, r1
 8003bd8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	6a1b      	ldr	r3, [r3, #32]
 8003be0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	4a6a      	ldr	r2, [pc, #424]	; (8003d94 <HAL_I2C_Init+0x274>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d802      	bhi.n	8003bf4 <HAL_I2C_Init+0xd4>
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	3301      	adds	r3, #1
 8003bf2:	e009      	b.n	8003c08 <HAL_I2C_Init+0xe8>
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003bfa:	fb02 f303 	mul.w	r3, r2, r3
 8003bfe:	4a69      	ldr	r2, [pc, #420]	; (8003da4 <HAL_I2C_Init+0x284>)
 8003c00:	fba2 2303 	umull	r2, r3, r2, r3
 8003c04:	099b      	lsrs	r3, r3, #6
 8003c06:	3301      	adds	r3, #1
 8003c08:	687a      	ldr	r2, [r7, #4]
 8003c0a:	6812      	ldr	r2, [r2, #0]
 8003c0c:	430b      	orrs	r3, r1
 8003c0e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	69db      	ldr	r3, [r3, #28]
 8003c16:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003c1a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	495c      	ldr	r1, [pc, #368]	; (8003d94 <HAL_I2C_Init+0x274>)
 8003c24:	428b      	cmp	r3, r1
 8003c26:	d819      	bhi.n	8003c5c <HAL_I2C_Init+0x13c>
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	1e59      	subs	r1, r3, #1
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	005b      	lsls	r3, r3, #1
 8003c32:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c36:	1c59      	adds	r1, r3, #1
 8003c38:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003c3c:	400b      	ands	r3, r1
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d00a      	beq.n	8003c58 <HAL_I2C_Init+0x138>
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	1e59      	subs	r1, r3, #1
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	005b      	lsls	r3, r3, #1
 8003c4c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c50:	3301      	adds	r3, #1
 8003c52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c56:	e051      	b.n	8003cfc <HAL_I2C_Init+0x1dc>
 8003c58:	2304      	movs	r3, #4
 8003c5a:	e04f      	b.n	8003cfc <HAL_I2C_Init+0x1dc>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d111      	bne.n	8003c88 <HAL_I2C_Init+0x168>
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	1e58      	subs	r0, r3, #1
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6859      	ldr	r1, [r3, #4]
 8003c6c:	460b      	mov	r3, r1
 8003c6e:	005b      	lsls	r3, r3, #1
 8003c70:	440b      	add	r3, r1
 8003c72:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c76:	3301      	adds	r3, #1
 8003c78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	bf0c      	ite	eq
 8003c80:	2301      	moveq	r3, #1
 8003c82:	2300      	movne	r3, #0
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	e012      	b.n	8003cae <HAL_I2C_Init+0x18e>
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	1e58      	subs	r0, r3, #1
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6859      	ldr	r1, [r3, #4]
 8003c90:	460b      	mov	r3, r1
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	440b      	add	r3, r1
 8003c96:	0099      	lsls	r1, r3, #2
 8003c98:	440b      	add	r3, r1
 8003c9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c9e:	3301      	adds	r3, #1
 8003ca0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	bf0c      	ite	eq
 8003ca8:	2301      	moveq	r3, #1
 8003caa:	2300      	movne	r3, #0
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d001      	beq.n	8003cb6 <HAL_I2C_Init+0x196>
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e022      	b.n	8003cfc <HAL_I2C_Init+0x1dc>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d10e      	bne.n	8003cdc <HAL_I2C_Init+0x1bc>
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	1e58      	subs	r0, r3, #1
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6859      	ldr	r1, [r3, #4]
 8003cc6:	460b      	mov	r3, r1
 8003cc8:	005b      	lsls	r3, r3, #1
 8003cca:	440b      	add	r3, r1
 8003ccc:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cd0:	3301      	adds	r3, #1
 8003cd2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cda:	e00f      	b.n	8003cfc <HAL_I2C_Init+0x1dc>
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	1e58      	subs	r0, r3, #1
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6859      	ldr	r1, [r3, #4]
 8003ce4:	460b      	mov	r3, r1
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	440b      	add	r3, r1
 8003cea:	0099      	lsls	r1, r3, #2
 8003cec:	440b      	add	r3, r1
 8003cee:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cf2:	3301      	adds	r3, #1
 8003cf4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cf8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003cfc:	6879      	ldr	r1, [r7, #4]
 8003cfe:	6809      	ldr	r1, [r1, #0]
 8003d00:	4313      	orrs	r3, r2
 8003d02:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	69da      	ldr	r2, [r3, #28]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6a1b      	ldr	r3, [r3, #32]
 8003d16:	431a      	orrs	r2, r3
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	430a      	orrs	r2, r1
 8003d1e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003d2a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003d2e:	687a      	ldr	r2, [r7, #4]
 8003d30:	6911      	ldr	r1, [r2, #16]
 8003d32:	687a      	ldr	r2, [r7, #4]
 8003d34:	68d2      	ldr	r2, [r2, #12]
 8003d36:	4311      	orrs	r1, r2
 8003d38:	687a      	ldr	r2, [r7, #4]
 8003d3a:	6812      	ldr	r2, [r2, #0]
 8003d3c:	430b      	orrs	r3, r1
 8003d3e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	68db      	ldr	r3, [r3, #12]
 8003d46:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	695a      	ldr	r2, [r3, #20]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	699b      	ldr	r3, [r3, #24]
 8003d52:	431a      	orrs	r2, r3
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	430a      	orrs	r2, r1
 8003d5a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f042 0201 	orr.w	r2, r2, #1
 8003d6a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2220      	movs	r2, #32
 8003d76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2200      	movs	r2, #0
 8003d84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003d88:	2300      	movs	r3, #0
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3710      	adds	r7, #16
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}
 8003d92:	bf00      	nop
 8003d94:	000186a0 	.word	0x000186a0
 8003d98:	001e847f 	.word	0x001e847f
 8003d9c:	003d08ff 	.word	0x003d08ff
 8003da0:	431bde83 	.word	0x431bde83
 8003da4:	10624dd3 	.word	0x10624dd3

08003da8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b088      	sub	sp, #32
 8003dac:	af02      	add	r7, sp, #8
 8003dae:	60f8      	str	r0, [r7, #12]
 8003db0:	607a      	str	r2, [r7, #4]
 8003db2:	461a      	mov	r2, r3
 8003db4:	460b      	mov	r3, r1
 8003db6:	817b      	strh	r3, [r7, #10]
 8003db8:	4613      	mov	r3, r2
 8003dba:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003dbc:	f7fe fef2 	bl	8002ba4 <HAL_GetTick>
 8003dc0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	2b20      	cmp	r3, #32
 8003dcc:	f040 80e0 	bne.w	8003f90 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	9300      	str	r3, [sp, #0]
 8003dd4:	2319      	movs	r3, #25
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	4970      	ldr	r1, [pc, #448]	; (8003f9c <HAL_I2C_Master_Transmit+0x1f4>)
 8003dda:	68f8      	ldr	r0, [r7, #12]
 8003ddc:	f000 fc9e 	bl	800471c <I2C_WaitOnFlagUntilTimeout>
 8003de0:	4603      	mov	r3, r0
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d001      	beq.n	8003dea <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003de6:	2302      	movs	r3, #2
 8003de8:	e0d3      	b.n	8003f92 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d101      	bne.n	8003df8 <HAL_I2C_Master_Transmit+0x50>
 8003df4:	2302      	movs	r3, #2
 8003df6:	e0cc      	b.n	8003f92 <HAL_I2C_Master_Transmit+0x1ea>
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 0301 	and.w	r3, r3, #1
 8003e0a:	2b01      	cmp	r3, #1
 8003e0c:	d007      	beq.n	8003e1e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f042 0201 	orr.w	r2, r2, #1
 8003e1c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e2c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2221      	movs	r2, #33	; 0x21
 8003e32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2210      	movs	r2, #16
 8003e3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2200      	movs	r2, #0
 8003e42:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	687a      	ldr	r2, [r7, #4]
 8003e48:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	893a      	ldrh	r2, [r7, #8]
 8003e4e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e54:	b29a      	uxth	r2, r3
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	4a50      	ldr	r2, [pc, #320]	; (8003fa0 <HAL_I2C_Master_Transmit+0x1f8>)
 8003e5e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003e60:	8979      	ldrh	r1, [r7, #10]
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	6a3a      	ldr	r2, [r7, #32]
 8003e66:	68f8      	ldr	r0, [r7, #12]
 8003e68:	f000 fb08 	bl	800447c <I2C_MasterRequestWrite>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d001      	beq.n	8003e76 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e08d      	b.n	8003f92 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e76:	2300      	movs	r3, #0
 8003e78:	613b      	str	r3, [r7, #16]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	695b      	ldr	r3, [r3, #20]
 8003e80:	613b      	str	r3, [r7, #16]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	699b      	ldr	r3, [r3, #24]
 8003e88:	613b      	str	r3, [r7, #16]
 8003e8a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003e8c:	e066      	b.n	8003f5c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e8e:	697a      	ldr	r2, [r7, #20]
 8003e90:	6a39      	ldr	r1, [r7, #32]
 8003e92:	68f8      	ldr	r0, [r7, #12]
 8003e94:	f000 fd5c 	bl	8004950 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d00d      	beq.n	8003eba <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea2:	2b04      	cmp	r3, #4
 8003ea4:	d107      	bne.n	8003eb6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003eb4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e06b      	b.n	8003f92 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ebe:	781a      	ldrb	r2, [r3, #0]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eca:	1c5a      	adds	r2, r3, #1
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ed4:	b29b      	uxth	r3, r3
 8003ed6:	3b01      	subs	r3, #1
 8003ed8:	b29a      	uxth	r2, r3
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ee2:	3b01      	subs	r3, #1
 8003ee4:	b29a      	uxth	r2, r3
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	695b      	ldr	r3, [r3, #20]
 8003ef0:	f003 0304 	and.w	r3, r3, #4
 8003ef4:	2b04      	cmp	r3, #4
 8003ef6:	d11b      	bne.n	8003f30 <HAL_I2C_Master_Transmit+0x188>
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d017      	beq.n	8003f30 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f04:	781a      	ldrb	r2, [r3, #0]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f10:	1c5a      	adds	r2, r3, #1
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f1a:	b29b      	uxth	r3, r3
 8003f1c:	3b01      	subs	r3, #1
 8003f1e:	b29a      	uxth	r2, r3
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f28:	3b01      	subs	r3, #1
 8003f2a:	b29a      	uxth	r2, r3
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f30:	697a      	ldr	r2, [r7, #20]
 8003f32:	6a39      	ldr	r1, [r7, #32]
 8003f34:	68f8      	ldr	r0, [r7, #12]
 8003f36:	f000 fd53 	bl	80049e0 <I2C_WaitOnBTFFlagUntilTimeout>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d00d      	beq.n	8003f5c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f44:	2b04      	cmp	r3, #4
 8003f46:	d107      	bne.n	8003f58 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f56:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	e01a      	b.n	8003f92 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d194      	bne.n	8003e8e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f72:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2220      	movs	r2, #32
 8003f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2200      	movs	r2, #0
 8003f88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	e000      	b.n	8003f92 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003f90:	2302      	movs	r3, #2
  }
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3718      	adds	r7, #24
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}
 8003f9a:	bf00      	nop
 8003f9c:	00100002 	.word	0x00100002
 8003fa0:	ffff0000 	.word	0xffff0000

08003fa4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b08c      	sub	sp, #48	; 0x30
 8003fa8:	af02      	add	r7, sp, #8
 8003faa:	60f8      	str	r0, [r7, #12]
 8003fac:	607a      	str	r2, [r7, #4]
 8003fae:	461a      	mov	r2, r3
 8003fb0:	460b      	mov	r3, r1
 8003fb2:	817b      	strh	r3, [r7, #10]
 8003fb4:	4613      	mov	r3, r2
 8003fb6:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003fbc:	f7fe fdf2 	bl	8002ba4 <HAL_GetTick>
 8003fc0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fc8:	b2db      	uxtb	r3, r3
 8003fca:	2b20      	cmp	r3, #32
 8003fcc:	f040 824b 	bne.w	8004466 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd2:	9300      	str	r3, [sp, #0]
 8003fd4:	2319      	movs	r3, #25
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	497f      	ldr	r1, [pc, #508]	; (80041d8 <HAL_I2C_Master_Receive+0x234>)
 8003fda:	68f8      	ldr	r0, [r7, #12]
 8003fdc:	f000 fb9e 	bl	800471c <I2C_WaitOnFlagUntilTimeout>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d001      	beq.n	8003fea <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8003fe6:	2302      	movs	r3, #2
 8003fe8:	e23e      	b.n	8004468 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	d101      	bne.n	8003ff8 <HAL_I2C_Master_Receive+0x54>
 8003ff4:	2302      	movs	r3, #2
 8003ff6:	e237      	b.n	8004468 <HAL_I2C_Master_Receive+0x4c4>
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 0301 	and.w	r3, r3, #1
 800400a:	2b01      	cmp	r3, #1
 800400c:	d007      	beq.n	800401e <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f042 0201 	orr.w	r2, r2, #1
 800401c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800402c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2222      	movs	r2, #34	; 0x22
 8004032:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2210      	movs	r2, #16
 800403a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2200      	movs	r2, #0
 8004042:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	687a      	ldr	r2, [r7, #4]
 8004048:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	893a      	ldrh	r2, [r7, #8]
 800404e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004054:	b29a      	uxth	r2, r3
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	4a5f      	ldr	r2, [pc, #380]	; (80041dc <HAL_I2C_Master_Receive+0x238>)
 800405e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004060:	8979      	ldrh	r1, [r7, #10]
 8004062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004064:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004066:	68f8      	ldr	r0, [r7, #12]
 8004068:	f000 fa8a 	bl	8004580 <I2C_MasterRequestRead>
 800406c:	4603      	mov	r3, r0
 800406e:	2b00      	cmp	r3, #0
 8004070:	d001      	beq.n	8004076 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	e1f8      	b.n	8004468 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800407a:	2b00      	cmp	r3, #0
 800407c:	d113      	bne.n	80040a6 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800407e:	2300      	movs	r3, #0
 8004080:	61fb      	str	r3, [r7, #28]
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	695b      	ldr	r3, [r3, #20]
 8004088:	61fb      	str	r3, [r7, #28]
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	699b      	ldr	r3, [r3, #24]
 8004090:	61fb      	str	r3, [r7, #28]
 8004092:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040a2:	601a      	str	r2, [r3, #0]
 80040a4:	e1cc      	b.n	8004440 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d11e      	bne.n	80040ec <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040bc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80040be:	b672      	cpsid	i
}
 80040c0:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040c2:	2300      	movs	r3, #0
 80040c4:	61bb      	str	r3, [r7, #24]
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	695b      	ldr	r3, [r3, #20]
 80040cc:	61bb      	str	r3, [r7, #24]
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	699b      	ldr	r3, [r3, #24]
 80040d4:	61bb      	str	r3, [r7, #24]
 80040d6:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040e6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80040e8:	b662      	cpsie	i
}
 80040ea:	e035      	b.n	8004158 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040f0:	2b02      	cmp	r3, #2
 80040f2:	d11e      	bne.n	8004132 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004102:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004104:	b672      	cpsid	i
}
 8004106:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004108:	2300      	movs	r3, #0
 800410a:	617b      	str	r3, [r7, #20]
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	695b      	ldr	r3, [r3, #20]
 8004112:	617b      	str	r3, [r7, #20]
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	699b      	ldr	r3, [r3, #24]
 800411a:	617b      	str	r3, [r7, #20]
 800411c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800412c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800412e:	b662      	cpsie	i
}
 8004130:	e012      	b.n	8004158 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004140:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004142:	2300      	movs	r3, #0
 8004144:	613b      	str	r3, [r7, #16]
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	695b      	ldr	r3, [r3, #20]
 800414c:	613b      	str	r3, [r7, #16]
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	699b      	ldr	r3, [r3, #24]
 8004154:	613b      	str	r3, [r7, #16]
 8004156:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8004158:	e172      	b.n	8004440 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800415e:	2b03      	cmp	r3, #3
 8004160:	f200 811f 	bhi.w	80043a2 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004168:	2b01      	cmp	r3, #1
 800416a:	d123      	bne.n	80041b4 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800416c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800416e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004170:	68f8      	ldr	r0, [r7, #12]
 8004172:	f000 fc7d 	bl	8004a70 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004176:	4603      	mov	r3, r0
 8004178:	2b00      	cmp	r3, #0
 800417a:	d001      	beq.n	8004180 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	e173      	b.n	8004468 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	691a      	ldr	r2, [r3, #16]
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418a:	b2d2      	uxtb	r2, r2
 800418c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004192:	1c5a      	adds	r2, r3, #1
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800419c:	3b01      	subs	r3, #1
 800419e:	b29a      	uxth	r2, r3
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041a8:	b29b      	uxth	r3, r3
 80041aa:	3b01      	subs	r3, #1
 80041ac:	b29a      	uxth	r2, r3
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80041b2:	e145      	b.n	8004440 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041b8:	2b02      	cmp	r3, #2
 80041ba:	d152      	bne.n	8004262 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80041bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041be:	9300      	str	r3, [sp, #0]
 80041c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041c2:	2200      	movs	r2, #0
 80041c4:	4906      	ldr	r1, [pc, #24]	; (80041e0 <HAL_I2C_Master_Receive+0x23c>)
 80041c6:	68f8      	ldr	r0, [r7, #12]
 80041c8:	f000 faa8 	bl	800471c <I2C_WaitOnFlagUntilTimeout>
 80041cc:	4603      	mov	r3, r0
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d008      	beq.n	80041e4 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e148      	b.n	8004468 <HAL_I2C_Master_Receive+0x4c4>
 80041d6:	bf00      	nop
 80041d8:	00100002 	.word	0x00100002
 80041dc:	ffff0000 	.word	0xffff0000
 80041e0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80041e4:	b672      	cpsid	i
}
 80041e6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	691a      	ldr	r2, [r3, #16]
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004202:	b2d2      	uxtb	r2, r2
 8004204:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800420a:	1c5a      	adds	r2, r3, #1
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004214:	3b01      	subs	r3, #1
 8004216:	b29a      	uxth	r2, r3
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004220:	b29b      	uxth	r3, r3
 8004222:	3b01      	subs	r3, #1
 8004224:	b29a      	uxth	r2, r3
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800422a:	b662      	cpsie	i
}
 800422c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	691a      	ldr	r2, [r3, #16]
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004238:	b2d2      	uxtb	r2, r2
 800423a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004240:	1c5a      	adds	r2, r3, #1
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800424a:	3b01      	subs	r3, #1
 800424c:	b29a      	uxth	r2, r3
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004256:	b29b      	uxth	r3, r3
 8004258:	3b01      	subs	r3, #1
 800425a:	b29a      	uxth	r2, r3
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004260:	e0ee      	b.n	8004440 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004264:	9300      	str	r3, [sp, #0]
 8004266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004268:	2200      	movs	r2, #0
 800426a:	4981      	ldr	r1, [pc, #516]	; (8004470 <HAL_I2C_Master_Receive+0x4cc>)
 800426c:	68f8      	ldr	r0, [r7, #12]
 800426e:	f000 fa55 	bl	800471c <I2C_WaitOnFlagUntilTimeout>
 8004272:	4603      	mov	r3, r0
 8004274:	2b00      	cmp	r3, #0
 8004276:	d001      	beq.n	800427c <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8004278:	2301      	movs	r3, #1
 800427a:	e0f5      	b.n	8004468 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800428a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800428c:	b672      	cpsid	i
}
 800428e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	691a      	ldr	r2, [r3, #16]
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800429a:	b2d2      	uxtb	r2, r2
 800429c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a2:	1c5a      	adds	r2, r3, #1
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042ac:	3b01      	subs	r3, #1
 80042ae:	b29a      	uxth	r2, r3
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042b8:	b29b      	uxth	r3, r3
 80042ba:	3b01      	subs	r3, #1
 80042bc:	b29a      	uxth	r2, r3
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80042c2:	4b6c      	ldr	r3, [pc, #432]	; (8004474 <HAL_I2C_Master_Receive+0x4d0>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	08db      	lsrs	r3, r3, #3
 80042c8:	4a6b      	ldr	r2, [pc, #428]	; (8004478 <HAL_I2C_Master_Receive+0x4d4>)
 80042ca:	fba2 2303 	umull	r2, r3, r2, r3
 80042ce:	0a1a      	lsrs	r2, r3, #8
 80042d0:	4613      	mov	r3, r2
 80042d2:	009b      	lsls	r3, r3, #2
 80042d4:	4413      	add	r3, r2
 80042d6:	00da      	lsls	r2, r3, #3
 80042d8:	1ad3      	subs	r3, r2, r3
 80042da:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80042dc:	6a3b      	ldr	r3, [r7, #32]
 80042de:	3b01      	subs	r3, #1
 80042e0:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80042e2:	6a3b      	ldr	r3, [r7, #32]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d118      	bne.n	800431a <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2200      	movs	r2, #0
 80042ec:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2220      	movs	r2, #32
 80042f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2200      	movs	r2, #0
 80042fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004302:	f043 0220 	orr.w	r2, r3, #32
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800430a:	b662      	cpsie	i
}
 800430c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2200      	movs	r2, #0
 8004312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	e0a6      	b.n	8004468 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	695b      	ldr	r3, [r3, #20]
 8004320:	f003 0304 	and.w	r3, r3, #4
 8004324:	2b04      	cmp	r3, #4
 8004326:	d1d9      	bne.n	80042dc <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	681a      	ldr	r2, [r3, #0]
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004336:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	691a      	ldr	r2, [r3, #16]
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004342:	b2d2      	uxtb	r2, r2
 8004344:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800434a:	1c5a      	adds	r2, r3, #1
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004354:	3b01      	subs	r3, #1
 8004356:	b29a      	uxth	r2, r3
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004360:	b29b      	uxth	r3, r3
 8004362:	3b01      	subs	r3, #1
 8004364:	b29a      	uxth	r2, r3
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800436a:	b662      	cpsie	i
}
 800436c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	691a      	ldr	r2, [r3, #16]
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004378:	b2d2      	uxtb	r2, r2
 800437a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004380:	1c5a      	adds	r2, r3, #1
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800438a:	3b01      	subs	r3, #1
 800438c:	b29a      	uxth	r2, r3
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004396:	b29b      	uxth	r3, r3
 8004398:	3b01      	subs	r3, #1
 800439a:	b29a      	uxth	r2, r3
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	855a      	strh	r2, [r3, #42]	; 0x2a
 80043a0:	e04e      	b.n	8004440 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043a4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80043a6:	68f8      	ldr	r0, [r7, #12]
 80043a8:	f000 fb62 	bl	8004a70 <I2C_WaitOnRXNEFlagUntilTimeout>
 80043ac:	4603      	mov	r3, r0
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d001      	beq.n	80043b6 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	e058      	b.n	8004468 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	691a      	ldr	r2, [r3, #16]
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c0:	b2d2      	uxtb	r2, r2
 80043c2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c8:	1c5a      	adds	r2, r3, #1
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043d2:	3b01      	subs	r3, #1
 80043d4:	b29a      	uxth	r2, r3
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043de:	b29b      	uxth	r3, r3
 80043e0:	3b01      	subs	r3, #1
 80043e2:	b29a      	uxth	r2, r3
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	695b      	ldr	r3, [r3, #20]
 80043ee:	f003 0304 	and.w	r3, r3, #4
 80043f2:	2b04      	cmp	r3, #4
 80043f4:	d124      	bne.n	8004440 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043fa:	2b03      	cmp	r3, #3
 80043fc:	d107      	bne.n	800440e <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800440c:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	691a      	ldr	r2, [r3, #16]
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004418:	b2d2      	uxtb	r2, r2
 800441a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004420:	1c5a      	adds	r2, r3, #1
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800442a:	3b01      	subs	r3, #1
 800442c:	b29a      	uxth	r2, r3
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004436:	b29b      	uxth	r3, r3
 8004438:	3b01      	subs	r3, #1
 800443a:	b29a      	uxth	r2, r3
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004444:	2b00      	cmp	r3, #0
 8004446:	f47f ae88 	bne.w	800415a <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2220      	movs	r2, #32
 800444e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2200      	movs	r2, #0
 8004456:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2200      	movs	r2, #0
 800445e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004462:	2300      	movs	r3, #0
 8004464:	e000      	b.n	8004468 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8004466:	2302      	movs	r3, #2
  }
}
 8004468:	4618      	mov	r0, r3
 800446a:	3728      	adds	r7, #40	; 0x28
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}
 8004470:	00010004 	.word	0x00010004
 8004474:	20000088 	.word	0x20000088
 8004478:	14f8b589 	.word	0x14f8b589

0800447c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b088      	sub	sp, #32
 8004480:	af02      	add	r7, sp, #8
 8004482:	60f8      	str	r0, [r7, #12]
 8004484:	607a      	str	r2, [r7, #4]
 8004486:	603b      	str	r3, [r7, #0]
 8004488:	460b      	mov	r3, r1
 800448a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004490:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	2b08      	cmp	r3, #8
 8004496:	d006      	beq.n	80044a6 <I2C_MasterRequestWrite+0x2a>
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	2b01      	cmp	r3, #1
 800449c:	d003      	beq.n	80044a6 <I2C_MasterRequestWrite+0x2a>
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80044a4:	d108      	bne.n	80044b8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044b4:	601a      	str	r2, [r3, #0]
 80044b6:	e00b      	b.n	80044d0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044bc:	2b12      	cmp	r3, #18
 80044be:	d107      	bne.n	80044d0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	681a      	ldr	r2, [r3, #0]
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044ce:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	9300      	str	r3, [sp, #0]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2200      	movs	r2, #0
 80044d8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80044dc:	68f8      	ldr	r0, [r7, #12]
 80044de:	f000 f91d 	bl	800471c <I2C_WaitOnFlagUntilTimeout>
 80044e2:	4603      	mov	r3, r0
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d00d      	beq.n	8004504 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044f6:	d103      	bne.n	8004500 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80044fe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004500:	2303      	movs	r3, #3
 8004502:	e035      	b.n	8004570 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	691b      	ldr	r3, [r3, #16]
 8004508:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800450c:	d108      	bne.n	8004520 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800450e:	897b      	ldrh	r3, [r7, #10]
 8004510:	b2db      	uxtb	r3, r3
 8004512:	461a      	mov	r2, r3
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800451c:	611a      	str	r2, [r3, #16]
 800451e:	e01b      	b.n	8004558 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004520:	897b      	ldrh	r3, [r7, #10]
 8004522:	11db      	asrs	r3, r3, #7
 8004524:	b2db      	uxtb	r3, r3
 8004526:	f003 0306 	and.w	r3, r3, #6
 800452a:	b2db      	uxtb	r3, r3
 800452c:	f063 030f 	orn	r3, r3, #15
 8004530:	b2da      	uxtb	r2, r3
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	687a      	ldr	r2, [r7, #4]
 800453c:	490e      	ldr	r1, [pc, #56]	; (8004578 <I2C_MasterRequestWrite+0xfc>)
 800453e:	68f8      	ldr	r0, [r7, #12]
 8004540:	f000 f966 	bl	8004810 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004544:	4603      	mov	r3, r0
 8004546:	2b00      	cmp	r3, #0
 8004548:	d001      	beq.n	800454e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	e010      	b.n	8004570 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800454e:	897b      	ldrh	r3, [r7, #10]
 8004550:	b2da      	uxtb	r2, r3
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	687a      	ldr	r2, [r7, #4]
 800455c:	4907      	ldr	r1, [pc, #28]	; (800457c <I2C_MasterRequestWrite+0x100>)
 800455e:	68f8      	ldr	r0, [r7, #12]
 8004560:	f000 f956 	bl	8004810 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004564:	4603      	mov	r3, r0
 8004566:	2b00      	cmp	r3, #0
 8004568:	d001      	beq.n	800456e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	e000      	b.n	8004570 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800456e:	2300      	movs	r3, #0
}
 8004570:	4618      	mov	r0, r3
 8004572:	3718      	adds	r7, #24
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}
 8004578:	00010008 	.word	0x00010008
 800457c:	00010002 	.word	0x00010002

08004580 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b088      	sub	sp, #32
 8004584:	af02      	add	r7, sp, #8
 8004586:	60f8      	str	r0, [r7, #12]
 8004588:	607a      	str	r2, [r7, #4]
 800458a:	603b      	str	r3, [r7, #0]
 800458c:	460b      	mov	r3, r1
 800458e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004594:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80045a4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	2b08      	cmp	r3, #8
 80045aa:	d006      	beq.n	80045ba <I2C_MasterRequestRead+0x3a>
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	2b01      	cmp	r3, #1
 80045b0:	d003      	beq.n	80045ba <I2C_MasterRequestRead+0x3a>
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80045b8:	d108      	bne.n	80045cc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045c8:	601a      	str	r2, [r3, #0]
 80045ca:	e00b      	b.n	80045e4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d0:	2b11      	cmp	r3, #17
 80045d2:	d107      	bne.n	80045e4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045e2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	9300      	str	r3, [sp, #0]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2200      	movs	r2, #0
 80045ec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80045f0:	68f8      	ldr	r0, [r7, #12]
 80045f2:	f000 f893 	bl	800471c <I2C_WaitOnFlagUntilTimeout>
 80045f6:	4603      	mov	r3, r0
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d00d      	beq.n	8004618 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004606:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800460a:	d103      	bne.n	8004614 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004612:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004614:	2303      	movs	r3, #3
 8004616:	e079      	b.n	800470c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	691b      	ldr	r3, [r3, #16]
 800461c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004620:	d108      	bne.n	8004634 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004622:	897b      	ldrh	r3, [r7, #10]
 8004624:	b2db      	uxtb	r3, r3
 8004626:	f043 0301 	orr.w	r3, r3, #1
 800462a:	b2da      	uxtb	r2, r3
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	611a      	str	r2, [r3, #16]
 8004632:	e05f      	b.n	80046f4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004634:	897b      	ldrh	r3, [r7, #10]
 8004636:	11db      	asrs	r3, r3, #7
 8004638:	b2db      	uxtb	r3, r3
 800463a:	f003 0306 	and.w	r3, r3, #6
 800463e:	b2db      	uxtb	r3, r3
 8004640:	f063 030f 	orn	r3, r3, #15
 8004644:	b2da      	uxtb	r2, r3
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	687a      	ldr	r2, [r7, #4]
 8004650:	4930      	ldr	r1, [pc, #192]	; (8004714 <I2C_MasterRequestRead+0x194>)
 8004652:	68f8      	ldr	r0, [r7, #12]
 8004654:	f000 f8dc 	bl	8004810 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004658:	4603      	mov	r3, r0
 800465a:	2b00      	cmp	r3, #0
 800465c:	d001      	beq.n	8004662 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	e054      	b.n	800470c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004662:	897b      	ldrh	r3, [r7, #10]
 8004664:	b2da      	uxtb	r2, r3
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	4929      	ldr	r1, [pc, #164]	; (8004718 <I2C_MasterRequestRead+0x198>)
 8004672:	68f8      	ldr	r0, [r7, #12]
 8004674:	f000 f8cc 	bl	8004810 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004678:	4603      	mov	r3, r0
 800467a:	2b00      	cmp	r3, #0
 800467c:	d001      	beq.n	8004682 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	e044      	b.n	800470c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004682:	2300      	movs	r3, #0
 8004684:	613b      	str	r3, [r7, #16]
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	695b      	ldr	r3, [r3, #20]
 800468c:	613b      	str	r3, [r7, #16]
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	699b      	ldr	r3, [r3, #24]
 8004694:	613b      	str	r3, [r7, #16]
 8004696:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	681a      	ldr	r2, [r3, #0]
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046a6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	9300      	str	r3, [sp, #0]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2200      	movs	r2, #0
 80046b0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80046b4:	68f8      	ldr	r0, [r7, #12]
 80046b6:	f000 f831 	bl	800471c <I2C_WaitOnFlagUntilTimeout>
 80046ba:	4603      	mov	r3, r0
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d00d      	beq.n	80046dc <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046ce:	d103      	bne.n	80046d8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80046d6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80046d8:	2303      	movs	r3, #3
 80046da:	e017      	b.n	800470c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80046dc:	897b      	ldrh	r3, [r7, #10]
 80046de:	11db      	asrs	r3, r3, #7
 80046e0:	b2db      	uxtb	r3, r3
 80046e2:	f003 0306 	and.w	r3, r3, #6
 80046e6:	b2db      	uxtb	r3, r3
 80046e8:	f063 030e 	orn	r3, r3, #14
 80046ec:	b2da      	uxtb	r2, r3
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	687a      	ldr	r2, [r7, #4]
 80046f8:	4907      	ldr	r1, [pc, #28]	; (8004718 <I2C_MasterRequestRead+0x198>)
 80046fa:	68f8      	ldr	r0, [r7, #12]
 80046fc:	f000 f888 	bl	8004810 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004700:	4603      	mov	r3, r0
 8004702:	2b00      	cmp	r3, #0
 8004704:	d001      	beq.n	800470a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	e000      	b.n	800470c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800470a:	2300      	movs	r3, #0
}
 800470c:	4618      	mov	r0, r3
 800470e:	3718      	adds	r7, #24
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}
 8004714:	00010008 	.word	0x00010008
 8004718:	00010002 	.word	0x00010002

0800471c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b084      	sub	sp, #16
 8004720:	af00      	add	r7, sp, #0
 8004722:	60f8      	str	r0, [r7, #12]
 8004724:	60b9      	str	r1, [r7, #8]
 8004726:	603b      	str	r3, [r7, #0]
 8004728:	4613      	mov	r3, r2
 800472a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800472c:	e048      	b.n	80047c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004734:	d044      	beq.n	80047c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004736:	f7fe fa35 	bl	8002ba4 <HAL_GetTick>
 800473a:	4602      	mov	r2, r0
 800473c:	69bb      	ldr	r3, [r7, #24]
 800473e:	1ad3      	subs	r3, r2, r3
 8004740:	683a      	ldr	r2, [r7, #0]
 8004742:	429a      	cmp	r2, r3
 8004744:	d302      	bcc.n	800474c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d139      	bne.n	80047c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	0c1b      	lsrs	r3, r3, #16
 8004750:	b2db      	uxtb	r3, r3
 8004752:	2b01      	cmp	r3, #1
 8004754:	d10d      	bne.n	8004772 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	695b      	ldr	r3, [r3, #20]
 800475c:	43da      	mvns	r2, r3
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	4013      	ands	r3, r2
 8004762:	b29b      	uxth	r3, r3
 8004764:	2b00      	cmp	r3, #0
 8004766:	bf0c      	ite	eq
 8004768:	2301      	moveq	r3, #1
 800476a:	2300      	movne	r3, #0
 800476c:	b2db      	uxtb	r3, r3
 800476e:	461a      	mov	r2, r3
 8004770:	e00c      	b.n	800478c <I2C_WaitOnFlagUntilTimeout+0x70>
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	699b      	ldr	r3, [r3, #24]
 8004778:	43da      	mvns	r2, r3
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	4013      	ands	r3, r2
 800477e:	b29b      	uxth	r3, r3
 8004780:	2b00      	cmp	r3, #0
 8004782:	bf0c      	ite	eq
 8004784:	2301      	moveq	r3, #1
 8004786:	2300      	movne	r3, #0
 8004788:	b2db      	uxtb	r3, r3
 800478a:	461a      	mov	r2, r3
 800478c:	79fb      	ldrb	r3, [r7, #7]
 800478e:	429a      	cmp	r2, r3
 8004790:	d116      	bne.n	80047c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2200      	movs	r2, #0
 8004796:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2220      	movs	r2, #32
 800479c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	2200      	movs	r2, #0
 80047a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ac:	f043 0220 	orr.w	r2, r3, #32
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2200      	movs	r2, #0
 80047b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	e023      	b.n	8004808 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	0c1b      	lsrs	r3, r3, #16
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	d10d      	bne.n	80047e6 <I2C_WaitOnFlagUntilTimeout+0xca>
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	695b      	ldr	r3, [r3, #20]
 80047d0:	43da      	mvns	r2, r3
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	4013      	ands	r3, r2
 80047d6:	b29b      	uxth	r3, r3
 80047d8:	2b00      	cmp	r3, #0
 80047da:	bf0c      	ite	eq
 80047dc:	2301      	moveq	r3, #1
 80047de:	2300      	movne	r3, #0
 80047e0:	b2db      	uxtb	r3, r3
 80047e2:	461a      	mov	r2, r3
 80047e4:	e00c      	b.n	8004800 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	699b      	ldr	r3, [r3, #24]
 80047ec:	43da      	mvns	r2, r3
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	4013      	ands	r3, r2
 80047f2:	b29b      	uxth	r3, r3
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	bf0c      	ite	eq
 80047f8:	2301      	moveq	r3, #1
 80047fa:	2300      	movne	r3, #0
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	461a      	mov	r2, r3
 8004800:	79fb      	ldrb	r3, [r7, #7]
 8004802:	429a      	cmp	r2, r3
 8004804:	d093      	beq.n	800472e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004806:	2300      	movs	r3, #0
}
 8004808:	4618      	mov	r0, r3
 800480a:	3710      	adds	r7, #16
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}

08004810 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b084      	sub	sp, #16
 8004814:	af00      	add	r7, sp, #0
 8004816:	60f8      	str	r0, [r7, #12]
 8004818:	60b9      	str	r1, [r7, #8]
 800481a:	607a      	str	r2, [r7, #4]
 800481c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800481e:	e071      	b.n	8004904 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	695b      	ldr	r3, [r3, #20]
 8004826:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800482a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800482e:	d123      	bne.n	8004878 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800483e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004848:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2200      	movs	r2, #0
 800484e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2220      	movs	r2, #32
 8004854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2200      	movs	r2, #0
 800485c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004864:	f043 0204 	orr.w	r2, r3, #4
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2200      	movs	r2, #0
 8004870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	e067      	b.n	8004948 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800487e:	d041      	beq.n	8004904 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004880:	f7fe f990 	bl	8002ba4 <HAL_GetTick>
 8004884:	4602      	mov	r2, r0
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	1ad3      	subs	r3, r2, r3
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	429a      	cmp	r2, r3
 800488e:	d302      	bcc.n	8004896 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d136      	bne.n	8004904 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	0c1b      	lsrs	r3, r3, #16
 800489a:	b2db      	uxtb	r3, r3
 800489c:	2b01      	cmp	r3, #1
 800489e:	d10c      	bne.n	80048ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	695b      	ldr	r3, [r3, #20]
 80048a6:	43da      	mvns	r2, r3
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	4013      	ands	r3, r2
 80048ac:	b29b      	uxth	r3, r3
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	bf14      	ite	ne
 80048b2:	2301      	movne	r3, #1
 80048b4:	2300      	moveq	r3, #0
 80048b6:	b2db      	uxtb	r3, r3
 80048b8:	e00b      	b.n	80048d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	699b      	ldr	r3, [r3, #24]
 80048c0:	43da      	mvns	r2, r3
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	4013      	ands	r3, r2
 80048c6:	b29b      	uxth	r3, r3
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	bf14      	ite	ne
 80048cc:	2301      	movne	r3, #1
 80048ce:	2300      	moveq	r3, #0
 80048d0:	b2db      	uxtb	r3, r3
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d016      	beq.n	8004904 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2200      	movs	r2, #0
 80048da:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2220      	movs	r2, #32
 80048e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2200      	movs	r2, #0
 80048e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f0:	f043 0220 	orr.w	r2, r3, #32
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2200      	movs	r2, #0
 80048fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004900:	2301      	movs	r3, #1
 8004902:	e021      	b.n	8004948 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	0c1b      	lsrs	r3, r3, #16
 8004908:	b2db      	uxtb	r3, r3
 800490a:	2b01      	cmp	r3, #1
 800490c:	d10c      	bne.n	8004928 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	695b      	ldr	r3, [r3, #20]
 8004914:	43da      	mvns	r2, r3
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	4013      	ands	r3, r2
 800491a:	b29b      	uxth	r3, r3
 800491c:	2b00      	cmp	r3, #0
 800491e:	bf14      	ite	ne
 8004920:	2301      	movne	r3, #1
 8004922:	2300      	moveq	r3, #0
 8004924:	b2db      	uxtb	r3, r3
 8004926:	e00b      	b.n	8004940 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	699b      	ldr	r3, [r3, #24]
 800492e:	43da      	mvns	r2, r3
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	4013      	ands	r3, r2
 8004934:	b29b      	uxth	r3, r3
 8004936:	2b00      	cmp	r3, #0
 8004938:	bf14      	ite	ne
 800493a:	2301      	movne	r3, #1
 800493c:	2300      	moveq	r3, #0
 800493e:	b2db      	uxtb	r3, r3
 8004940:	2b00      	cmp	r3, #0
 8004942:	f47f af6d 	bne.w	8004820 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004946:	2300      	movs	r3, #0
}
 8004948:	4618      	mov	r0, r3
 800494a:	3710      	adds	r7, #16
 800494c:	46bd      	mov	sp, r7
 800494e:	bd80      	pop	{r7, pc}

08004950 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b084      	sub	sp, #16
 8004954:	af00      	add	r7, sp, #0
 8004956:	60f8      	str	r0, [r7, #12]
 8004958:	60b9      	str	r1, [r7, #8]
 800495a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800495c:	e034      	b.n	80049c8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800495e:	68f8      	ldr	r0, [r7, #12]
 8004960:	f000 f8e3 	bl	8004b2a <I2C_IsAcknowledgeFailed>
 8004964:	4603      	mov	r3, r0
 8004966:	2b00      	cmp	r3, #0
 8004968:	d001      	beq.n	800496e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	e034      	b.n	80049d8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004974:	d028      	beq.n	80049c8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004976:	f7fe f915 	bl	8002ba4 <HAL_GetTick>
 800497a:	4602      	mov	r2, r0
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	1ad3      	subs	r3, r2, r3
 8004980:	68ba      	ldr	r2, [r7, #8]
 8004982:	429a      	cmp	r2, r3
 8004984:	d302      	bcc.n	800498c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d11d      	bne.n	80049c8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	695b      	ldr	r3, [r3, #20]
 8004992:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004996:	2b80      	cmp	r3, #128	; 0x80
 8004998:	d016      	beq.n	80049c8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	2200      	movs	r2, #0
 800499e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	2220      	movs	r2, #32
 80049a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	2200      	movs	r2, #0
 80049ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b4:	f043 0220 	orr.w	r2, r3, #32
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2200      	movs	r2, #0
 80049c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	e007      	b.n	80049d8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	695b      	ldr	r3, [r3, #20]
 80049ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049d2:	2b80      	cmp	r3, #128	; 0x80
 80049d4:	d1c3      	bne.n	800495e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80049d6:	2300      	movs	r3, #0
}
 80049d8:	4618      	mov	r0, r3
 80049da:	3710      	adds	r7, #16
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}

080049e0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b084      	sub	sp, #16
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	60f8      	str	r0, [r7, #12]
 80049e8:	60b9      	str	r1, [r7, #8]
 80049ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80049ec:	e034      	b.n	8004a58 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80049ee:	68f8      	ldr	r0, [r7, #12]
 80049f0:	f000 f89b 	bl	8004b2a <I2C_IsAcknowledgeFailed>
 80049f4:	4603      	mov	r3, r0
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d001      	beq.n	80049fe <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	e034      	b.n	8004a68 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a04:	d028      	beq.n	8004a58 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a06:	f7fe f8cd 	bl	8002ba4 <HAL_GetTick>
 8004a0a:	4602      	mov	r2, r0
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	1ad3      	subs	r3, r2, r3
 8004a10:	68ba      	ldr	r2, [r7, #8]
 8004a12:	429a      	cmp	r2, r3
 8004a14:	d302      	bcc.n	8004a1c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d11d      	bne.n	8004a58 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	695b      	ldr	r3, [r3, #20]
 8004a22:	f003 0304 	and.w	r3, r3, #4
 8004a26:	2b04      	cmp	r3, #4
 8004a28:	d016      	beq.n	8004a58 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2220      	movs	r2, #32
 8004a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a44:	f043 0220 	orr.w	r2, r3, #32
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004a54:	2301      	movs	r3, #1
 8004a56:	e007      	b.n	8004a68 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	695b      	ldr	r3, [r3, #20]
 8004a5e:	f003 0304 	and.w	r3, r3, #4
 8004a62:	2b04      	cmp	r3, #4
 8004a64:	d1c3      	bne.n	80049ee <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004a66:	2300      	movs	r3, #0
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	3710      	adds	r7, #16
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd80      	pop	{r7, pc}

08004a70 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b084      	sub	sp, #16
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	60f8      	str	r0, [r7, #12]
 8004a78:	60b9      	str	r1, [r7, #8]
 8004a7a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004a7c:	e049      	b.n	8004b12 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	695b      	ldr	r3, [r3, #20]
 8004a84:	f003 0310 	and.w	r3, r3, #16
 8004a88:	2b10      	cmp	r3, #16
 8004a8a:	d119      	bne.n	8004ac0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f06f 0210 	mvn.w	r2, #16
 8004a94:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2220      	movs	r2, #32
 8004aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004abc:	2301      	movs	r3, #1
 8004abe:	e030      	b.n	8004b22 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ac0:	f7fe f870 	bl	8002ba4 <HAL_GetTick>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	1ad3      	subs	r3, r2, r3
 8004aca:	68ba      	ldr	r2, [r7, #8]
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d302      	bcc.n	8004ad6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d11d      	bne.n	8004b12 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	695b      	ldr	r3, [r3, #20]
 8004adc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ae0:	2b40      	cmp	r3, #64	; 0x40
 8004ae2:	d016      	beq.n	8004b12 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	2220      	movs	r2, #32
 8004aee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2200      	movs	r2, #0
 8004af6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004afe:	f043 0220 	orr.w	r2, r3, #32
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e007      	b.n	8004b22 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	695b      	ldr	r3, [r3, #20]
 8004b18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b1c:	2b40      	cmp	r3, #64	; 0x40
 8004b1e:	d1ae      	bne.n	8004a7e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004b20:	2300      	movs	r3, #0
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3710      	adds	r7, #16
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}

08004b2a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004b2a:	b480      	push	{r7}
 8004b2c:	b083      	sub	sp, #12
 8004b2e:	af00      	add	r7, sp, #0
 8004b30:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	695b      	ldr	r3, [r3, #20]
 8004b38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b40:	d11b      	bne.n	8004b7a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004b4a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2220      	movs	r2, #32
 8004b56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b66:	f043 0204 	orr.w	r2, r3, #4
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2200      	movs	r2, #0
 8004b72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004b76:	2301      	movs	r3, #1
 8004b78:	e000      	b.n	8004b7c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004b7a:	2300      	movs	r3, #0
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	370c      	adds	r7, #12
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bc80      	pop	{r7}
 8004b84:	4770      	bx	lr
	...

08004b88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b086      	sub	sp, #24
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d101      	bne.n	8004b9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	e272      	b.n	8005080 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f003 0301 	and.w	r3, r3, #1
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	f000 8087 	beq.w	8004cb6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004ba8:	4b92      	ldr	r3, [pc, #584]	; (8004df4 <HAL_RCC_OscConfig+0x26c>)
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	f003 030c 	and.w	r3, r3, #12
 8004bb0:	2b04      	cmp	r3, #4
 8004bb2:	d00c      	beq.n	8004bce <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004bb4:	4b8f      	ldr	r3, [pc, #572]	; (8004df4 <HAL_RCC_OscConfig+0x26c>)
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	f003 030c 	and.w	r3, r3, #12
 8004bbc:	2b08      	cmp	r3, #8
 8004bbe:	d112      	bne.n	8004be6 <HAL_RCC_OscConfig+0x5e>
 8004bc0:	4b8c      	ldr	r3, [pc, #560]	; (8004df4 <HAL_RCC_OscConfig+0x26c>)
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bcc:	d10b      	bne.n	8004be6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bce:	4b89      	ldr	r3, [pc, #548]	; (8004df4 <HAL_RCC_OscConfig+0x26c>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d06c      	beq.n	8004cb4 <HAL_RCC_OscConfig+0x12c>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d168      	bne.n	8004cb4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	e24c      	b.n	8005080 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bee:	d106      	bne.n	8004bfe <HAL_RCC_OscConfig+0x76>
 8004bf0:	4b80      	ldr	r3, [pc, #512]	; (8004df4 <HAL_RCC_OscConfig+0x26c>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a7f      	ldr	r2, [pc, #508]	; (8004df4 <HAL_RCC_OscConfig+0x26c>)
 8004bf6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bfa:	6013      	str	r3, [r2, #0]
 8004bfc:	e02e      	b.n	8004c5c <HAL_RCC_OscConfig+0xd4>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d10c      	bne.n	8004c20 <HAL_RCC_OscConfig+0x98>
 8004c06:	4b7b      	ldr	r3, [pc, #492]	; (8004df4 <HAL_RCC_OscConfig+0x26c>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a7a      	ldr	r2, [pc, #488]	; (8004df4 <HAL_RCC_OscConfig+0x26c>)
 8004c0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c10:	6013      	str	r3, [r2, #0]
 8004c12:	4b78      	ldr	r3, [pc, #480]	; (8004df4 <HAL_RCC_OscConfig+0x26c>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a77      	ldr	r2, [pc, #476]	; (8004df4 <HAL_RCC_OscConfig+0x26c>)
 8004c18:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c1c:	6013      	str	r3, [r2, #0]
 8004c1e:	e01d      	b.n	8004c5c <HAL_RCC_OscConfig+0xd4>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c28:	d10c      	bne.n	8004c44 <HAL_RCC_OscConfig+0xbc>
 8004c2a:	4b72      	ldr	r3, [pc, #456]	; (8004df4 <HAL_RCC_OscConfig+0x26c>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a71      	ldr	r2, [pc, #452]	; (8004df4 <HAL_RCC_OscConfig+0x26c>)
 8004c30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c34:	6013      	str	r3, [r2, #0]
 8004c36:	4b6f      	ldr	r3, [pc, #444]	; (8004df4 <HAL_RCC_OscConfig+0x26c>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a6e      	ldr	r2, [pc, #440]	; (8004df4 <HAL_RCC_OscConfig+0x26c>)
 8004c3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c40:	6013      	str	r3, [r2, #0]
 8004c42:	e00b      	b.n	8004c5c <HAL_RCC_OscConfig+0xd4>
 8004c44:	4b6b      	ldr	r3, [pc, #428]	; (8004df4 <HAL_RCC_OscConfig+0x26c>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a6a      	ldr	r2, [pc, #424]	; (8004df4 <HAL_RCC_OscConfig+0x26c>)
 8004c4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c4e:	6013      	str	r3, [r2, #0]
 8004c50:	4b68      	ldr	r3, [pc, #416]	; (8004df4 <HAL_RCC_OscConfig+0x26c>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a67      	ldr	r2, [pc, #412]	; (8004df4 <HAL_RCC_OscConfig+0x26c>)
 8004c56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c5a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d013      	beq.n	8004c8c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c64:	f7fd ff9e 	bl	8002ba4 <HAL_GetTick>
 8004c68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c6a:	e008      	b.n	8004c7e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c6c:	f7fd ff9a 	bl	8002ba4 <HAL_GetTick>
 8004c70:	4602      	mov	r2, r0
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	1ad3      	subs	r3, r2, r3
 8004c76:	2b64      	cmp	r3, #100	; 0x64
 8004c78:	d901      	bls.n	8004c7e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004c7a:	2303      	movs	r3, #3
 8004c7c:	e200      	b.n	8005080 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c7e:	4b5d      	ldr	r3, [pc, #372]	; (8004df4 <HAL_RCC_OscConfig+0x26c>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d0f0      	beq.n	8004c6c <HAL_RCC_OscConfig+0xe4>
 8004c8a:	e014      	b.n	8004cb6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c8c:	f7fd ff8a 	bl	8002ba4 <HAL_GetTick>
 8004c90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c92:	e008      	b.n	8004ca6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c94:	f7fd ff86 	bl	8002ba4 <HAL_GetTick>
 8004c98:	4602      	mov	r2, r0
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	1ad3      	subs	r3, r2, r3
 8004c9e:	2b64      	cmp	r3, #100	; 0x64
 8004ca0:	d901      	bls.n	8004ca6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004ca2:	2303      	movs	r3, #3
 8004ca4:	e1ec      	b.n	8005080 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ca6:	4b53      	ldr	r3, [pc, #332]	; (8004df4 <HAL_RCC_OscConfig+0x26c>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d1f0      	bne.n	8004c94 <HAL_RCC_OscConfig+0x10c>
 8004cb2:	e000      	b.n	8004cb6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f003 0302 	and.w	r3, r3, #2
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d063      	beq.n	8004d8a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004cc2:	4b4c      	ldr	r3, [pc, #304]	; (8004df4 <HAL_RCC_OscConfig+0x26c>)
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	f003 030c 	and.w	r3, r3, #12
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d00b      	beq.n	8004ce6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004cce:	4b49      	ldr	r3, [pc, #292]	; (8004df4 <HAL_RCC_OscConfig+0x26c>)
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	f003 030c 	and.w	r3, r3, #12
 8004cd6:	2b08      	cmp	r3, #8
 8004cd8:	d11c      	bne.n	8004d14 <HAL_RCC_OscConfig+0x18c>
 8004cda:	4b46      	ldr	r3, [pc, #280]	; (8004df4 <HAL_RCC_OscConfig+0x26c>)
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d116      	bne.n	8004d14 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ce6:	4b43      	ldr	r3, [pc, #268]	; (8004df4 <HAL_RCC_OscConfig+0x26c>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f003 0302 	and.w	r3, r3, #2
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d005      	beq.n	8004cfe <HAL_RCC_OscConfig+0x176>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	691b      	ldr	r3, [r3, #16]
 8004cf6:	2b01      	cmp	r3, #1
 8004cf8:	d001      	beq.n	8004cfe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e1c0      	b.n	8005080 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cfe:	4b3d      	ldr	r3, [pc, #244]	; (8004df4 <HAL_RCC_OscConfig+0x26c>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	695b      	ldr	r3, [r3, #20]
 8004d0a:	00db      	lsls	r3, r3, #3
 8004d0c:	4939      	ldr	r1, [pc, #228]	; (8004df4 <HAL_RCC_OscConfig+0x26c>)
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d12:	e03a      	b.n	8004d8a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	691b      	ldr	r3, [r3, #16]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d020      	beq.n	8004d5e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d1c:	4b36      	ldr	r3, [pc, #216]	; (8004df8 <HAL_RCC_OscConfig+0x270>)
 8004d1e:	2201      	movs	r2, #1
 8004d20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d22:	f7fd ff3f 	bl	8002ba4 <HAL_GetTick>
 8004d26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d28:	e008      	b.n	8004d3c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d2a:	f7fd ff3b 	bl	8002ba4 <HAL_GetTick>
 8004d2e:	4602      	mov	r2, r0
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	1ad3      	subs	r3, r2, r3
 8004d34:	2b02      	cmp	r3, #2
 8004d36:	d901      	bls.n	8004d3c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004d38:	2303      	movs	r3, #3
 8004d3a:	e1a1      	b.n	8005080 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d3c:	4b2d      	ldr	r3, [pc, #180]	; (8004df4 <HAL_RCC_OscConfig+0x26c>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f003 0302 	and.w	r3, r3, #2
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d0f0      	beq.n	8004d2a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d48:	4b2a      	ldr	r3, [pc, #168]	; (8004df4 <HAL_RCC_OscConfig+0x26c>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	695b      	ldr	r3, [r3, #20]
 8004d54:	00db      	lsls	r3, r3, #3
 8004d56:	4927      	ldr	r1, [pc, #156]	; (8004df4 <HAL_RCC_OscConfig+0x26c>)
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	600b      	str	r3, [r1, #0]
 8004d5c:	e015      	b.n	8004d8a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d5e:	4b26      	ldr	r3, [pc, #152]	; (8004df8 <HAL_RCC_OscConfig+0x270>)
 8004d60:	2200      	movs	r2, #0
 8004d62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d64:	f7fd ff1e 	bl	8002ba4 <HAL_GetTick>
 8004d68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d6a:	e008      	b.n	8004d7e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d6c:	f7fd ff1a 	bl	8002ba4 <HAL_GetTick>
 8004d70:	4602      	mov	r2, r0
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	1ad3      	subs	r3, r2, r3
 8004d76:	2b02      	cmp	r3, #2
 8004d78:	d901      	bls.n	8004d7e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004d7a:	2303      	movs	r3, #3
 8004d7c:	e180      	b.n	8005080 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d7e:	4b1d      	ldr	r3, [pc, #116]	; (8004df4 <HAL_RCC_OscConfig+0x26c>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f003 0302 	and.w	r3, r3, #2
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d1f0      	bne.n	8004d6c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f003 0308 	and.w	r3, r3, #8
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d03a      	beq.n	8004e0c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	699b      	ldr	r3, [r3, #24]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d019      	beq.n	8004dd2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d9e:	4b17      	ldr	r3, [pc, #92]	; (8004dfc <HAL_RCC_OscConfig+0x274>)
 8004da0:	2201      	movs	r2, #1
 8004da2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004da4:	f7fd fefe 	bl	8002ba4 <HAL_GetTick>
 8004da8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004daa:	e008      	b.n	8004dbe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004dac:	f7fd fefa 	bl	8002ba4 <HAL_GetTick>
 8004db0:	4602      	mov	r2, r0
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	1ad3      	subs	r3, r2, r3
 8004db6:	2b02      	cmp	r3, #2
 8004db8:	d901      	bls.n	8004dbe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004dba:	2303      	movs	r3, #3
 8004dbc:	e160      	b.n	8005080 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004dbe:	4b0d      	ldr	r3, [pc, #52]	; (8004df4 <HAL_RCC_OscConfig+0x26c>)
 8004dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc2:	f003 0302 	and.w	r3, r3, #2
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d0f0      	beq.n	8004dac <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004dca:	2001      	movs	r0, #1
 8004dcc:	f000 face 	bl	800536c <RCC_Delay>
 8004dd0:	e01c      	b.n	8004e0c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004dd2:	4b0a      	ldr	r3, [pc, #40]	; (8004dfc <HAL_RCC_OscConfig+0x274>)
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004dd8:	f7fd fee4 	bl	8002ba4 <HAL_GetTick>
 8004ddc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004dde:	e00f      	b.n	8004e00 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004de0:	f7fd fee0 	bl	8002ba4 <HAL_GetTick>
 8004de4:	4602      	mov	r2, r0
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	1ad3      	subs	r3, r2, r3
 8004dea:	2b02      	cmp	r3, #2
 8004dec:	d908      	bls.n	8004e00 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004dee:	2303      	movs	r3, #3
 8004df0:	e146      	b.n	8005080 <HAL_RCC_OscConfig+0x4f8>
 8004df2:	bf00      	nop
 8004df4:	40021000 	.word	0x40021000
 8004df8:	42420000 	.word	0x42420000
 8004dfc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e00:	4b92      	ldr	r3, [pc, #584]	; (800504c <HAL_RCC_OscConfig+0x4c4>)
 8004e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e04:	f003 0302 	and.w	r3, r3, #2
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d1e9      	bne.n	8004de0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f003 0304 	and.w	r3, r3, #4
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	f000 80a6 	beq.w	8004f66 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e1e:	4b8b      	ldr	r3, [pc, #556]	; (800504c <HAL_RCC_OscConfig+0x4c4>)
 8004e20:	69db      	ldr	r3, [r3, #28]
 8004e22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d10d      	bne.n	8004e46 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e2a:	4b88      	ldr	r3, [pc, #544]	; (800504c <HAL_RCC_OscConfig+0x4c4>)
 8004e2c:	69db      	ldr	r3, [r3, #28]
 8004e2e:	4a87      	ldr	r2, [pc, #540]	; (800504c <HAL_RCC_OscConfig+0x4c4>)
 8004e30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e34:	61d3      	str	r3, [r2, #28]
 8004e36:	4b85      	ldr	r3, [pc, #532]	; (800504c <HAL_RCC_OscConfig+0x4c4>)
 8004e38:	69db      	ldr	r3, [r3, #28]
 8004e3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e3e:	60bb      	str	r3, [r7, #8]
 8004e40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e42:	2301      	movs	r3, #1
 8004e44:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e46:	4b82      	ldr	r3, [pc, #520]	; (8005050 <HAL_RCC_OscConfig+0x4c8>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d118      	bne.n	8004e84 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e52:	4b7f      	ldr	r3, [pc, #508]	; (8005050 <HAL_RCC_OscConfig+0x4c8>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a7e      	ldr	r2, [pc, #504]	; (8005050 <HAL_RCC_OscConfig+0x4c8>)
 8004e58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e5e:	f7fd fea1 	bl	8002ba4 <HAL_GetTick>
 8004e62:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e64:	e008      	b.n	8004e78 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e66:	f7fd fe9d 	bl	8002ba4 <HAL_GetTick>
 8004e6a:	4602      	mov	r2, r0
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	1ad3      	subs	r3, r2, r3
 8004e70:	2b64      	cmp	r3, #100	; 0x64
 8004e72:	d901      	bls.n	8004e78 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004e74:	2303      	movs	r3, #3
 8004e76:	e103      	b.n	8005080 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e78:	4b75      	ldr	r3, [pc, #468]	; (8005050 <HAL_RCC_OscConfig+0x4c8>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d0f0      	beq.n	8004e66 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	68db      	ldr	r3, [r3, #12]
 8004e88:	2b01      	cmp	r3, #1
 8004e8a:	d106      	bne.n	8004e9a <HAL_RCC_OscConfig+0x312>
 8004e8c:	4b6f      	ldr	r3, [pc, #444]	; (800504c <HAL_RCC_OscConfig+0x4c4>)
 8004e8e:	6a1b      	ldr	r3, [r3, #32]
 8004e90:	4a6e      	ldr	r2, [pc, #440]	; (800504c <HAL_RCC_OscConfig+0x4c4>)
 8004e92:	f043 0301 	orr.w	r3, r3, #1
 8004e96:	6213      	str	r3, [r2, #32]
 8004e98:	e02d      	b.n	8004ef6 <HAL_RCC_OscConfig+0x36e>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	68db      	ldr	r3, [r3, #12]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d10c      	bne.n	8004ebc <HAL_RCC_OscConfig+0x334>
 8004ea2:	4b6a      	ldr	r3, [pc, #424]	; (800504c <HAL_RCC_OscConfig+0x4c4>)
 8004ea4:	6a1b      	ldr	r3, [r3, #32]
 8004ea6:	4a69      	ldr	r2, [pc, #420]	; (800504c <HAL_RCC_OscConfig+0x4c4>)
 8004ea8:	f023 0301 	bic.w	r3, r3, #1
 8004eac:	6213      	str	r3, [r2, #32]
 8004eae:	4b67      	ldr	r3, [pc, #412]	; (800504c <HAL_RCC_OscConfig+0x4c4>)
 8004eb0:	6a1b      	ldr	r3, [r3, #32]
 8004eb2:	4a66      	ldr	r2, [pc, #408]	; (800504c <HAL_RCC_OscConfig+0x4c4>)
 8004eb4:	f023 0304 	bic.w	r3, r3, #4
 8004eb8:	6213      	str	r3, [r2, #32]
 8004eba:	e01c      	b.n	8004ef6 <HAL_RCC_OscConfig+0x36e>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	68db      	ldr	r3, [r3, #12]
 8004ec0:	2b05      	cmp	r3, #5
 8004ec2:	d10c      	bne.n	8004ede <HAL_RCC_OscConfig+0x356>
 8004ec4:	4b61      	ldr	r3, [pc, #388]	; (800504c <HAL_RCC_OscConfig+0x4c4>)
 8004ec6:	6a1b      	ldr	r3, [r3, #32]
 8004ec8:	4a60      	ldr	r2, [pc, #384]	; (800504c <HAL_RCC_OscConfig+0x4c4>)
 8004eca:	f043 0304 	orr.w	r3, r3, #4
 8004ece:	6213      	str	r3, [r2, #32]
 8004ed0:	4b5e      	ldr	r3, [pc, #376]	; (800504c <HAL_RCC_OscConfig+0x4c4>)
 8004ed2:	6a1b      	ldr	r3, [r3, #32]
 8004ed4:	4a5d      	ldr	r2, [pc, #372]	; (800504c <HAL_RCC_OscConfig+0x4c4>)
 8004ed6:	f043 0301 	orr.w	r3, r3, #1
 8004eda:	6213      	str	r3, [r2, #32]
 8004edc:	e00b      	b.n	8004ef6 <HAL_RCC_OscConfig+0x36e>
 8004ede:	4b5b      	ldr	r3, [pc, #364]	; (800504c <HAL_RCC_OscConfig+0x4c4>)
 8004ee0:	6a1b      	ldr	r3, [r3, #32]
 8004ee2:	4a5a      	ldr	r2, [pc, #360]	; (800504c <HAL_RCC_OscConfig+0x4c4>)
 8004ee4:	f023 0301 	bic.w	r3, r3, #1
 8004ee8:	6213      	str	r3, [r2, #32]
 8004eea:	4b58      	ldr	r3, [pc, #352]	; (800504c <HAL_RCC_OscConfig+0x4c4>)
 8004eec:	6a1b      	ldr	r3, [r3, #32]
 8004eee:	4a57      	ldr	r2, [pc, #348]	; (800504c <HAL_RCC_OscConfig+0x4c4>)
 8004ef0:	f023 0304 	bic.w	r3, r3, #4
 8004ef4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	68db      	ldr	r3, [r3, #12]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d015      	beq.n	8004f2a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004efe:	f7fd fe51 	bl	8002ba4 <HAL_GetTick>
 8004f02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f04:	e00a      	b.n	8004f1c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f06:	f7fd fe4d 	bl	8002ba4 <HAL_GetTick>
 8004f0a:	4602      	mov	r2, r0
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	1ad3      	subs	r3, r2, r3
 8004f10:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d901      	bls.n	8004f1c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004f18:	2303      	movs	r3, #3
 8004f1a:	e0b1      	b.n	8005080 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f1c:	4b4b      	ldr	r3, [pc, #300]	; (800504c <HAL_RCC_OscConfig+0x4c4>)
 8004f1e:	6a1b      	ldr	r3, [r3, #32]
 8004f20:	f003 0302 	and.w	r3, r3, #2
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d0ee      	beq.n	8004f06 <HAL_RCC_OscConfig+0x37e>
 8004f28:	e014      	b.n	8004f54 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f2a:	f7fd fe3b 	bl	8002ba4 <HAL_GetTick>
 8004f2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f30:	e00a      	b.n	8004f48 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f32:	f7fd fe37 	bl	8002ba4 <HAL_GetTick>
 8004f36:	4602      	mov	r2, r0
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	1ad3      	subs	r3, r2, r3
 8004f3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d901      	bls.n	8004f48 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004f44:	2303      	movs	r3, #3
 8004f46:	e09b      	b.n	8005080 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f48:	4b40      	ldr	r3, [pc, #256]	; (800504c <HAL_RCC_OscConfig+0x4c4>)
 8004f4a:	6a1b      	ldr	r3, [r3, #32]
 8004f4c:	f003 0302 	and.w	r3, r3, #2
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d1ee      	bne.n	8004f32 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004f54:	7dfb      	ldrb	r3, [r7, #23]
 8004f56:	2b01      	cmp	r3, #1
 8004f58:	d105      	bne.n	8004f66 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f5a:	4b3c      	ldr	r3, [pc, #240]	; (800504c <HAL_RCC_OscConfig+0x4c4>)
 8004f5c:	69db      	ldr	r3, [r3, #28]
 8004f5e:	4a3b      	ldr	r2, [pc, #236]	; (800504c <HAL_RCC_OscConfig+0x4c4>)
 8004f60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f64:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	69db      	ldr	r3, [r3, #28]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	f000 8087 	beq.w	800507e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004f70:	4b36      	ldr	r3, [pc, #216]	; (800504c <HAL_RCC_OscConfig+0x4c4>)
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	f003 030c 	and.w	r3, r3, #12
 8004f78:	2b08      	cmp	r3, #8
 8004f7a:	d061      	beq.n	8005040 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	69db      	ldr	r3, [r3, #28]
 8004f80:	2b02      	cmp	r3, #2
 8004f82:	d146      	bne.n	8005012 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f84:	4b33      	ldr	r3, [pc, #204]	; (8005054 <HAL_RCC_OscConfig+0x4cc>)
 8004f86:	2200      	movs	r2, #0
 8004f88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f8a:	f7fd fe0b 	bl	8002ba4 <HAL_GetTick>
 8004f8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f90:	e008      	b.n	8004fa4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f92:	f7fd fe07 	bl	8002ba4 <HAL_GetTick>
 8004f96:	4602      	mov	r2, r0
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	1ad3      	subs	r3, r2, r3
 8004f9c:	2b02      	cmp	r3, #2
 8004f9e:	d901      	bls.n	8004fa4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004fa0:	2303      	movs	r3, #3
 8004fa2:	e06d      	b.n	8005080 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004fa4:	4b29      	ldr	r3, [pc, #164]	; (800504c <HAL_RCC_OscConfig+0x4c4>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d1f0      	bne.n	8004f92 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6a1b      	ldr	r3, [r3, #32]
 8004fb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fb8:	d108      	bne.n	8004fcc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004fba:	4b24      	ldr	r3, [pc, #144]	; (800504c <HAL_RCC_OscConfig+0x4c4>)
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	4921      	ldr	r1, [pc, #132]	; (800504c <HAL_RCC_OscConfig+0x4c4>)
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004fcc:	4b1f      	ldr	r3, [pc, #124]	; (800504c <HAL_RCC_OscConfig+0x4c4>)
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6a19      	ldr	r1, [r3, #32]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fdc:	430b      	orrs	r3, r1
 8004fde:	491b      	ldr	r1, [pc, #108]	; (800504c <HAL_RCC_OscConfig+0x4c4>)
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004fe4:	4b1b      	ldr	r3, [pc, #108]	; (8005054 <HAL_RCC_OscConfig+0x4cc>)
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fea:	f7fd fddb 	bl	8002ba4 <HAL_GetTick>
 8004fee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004ff0:	e008      	b.n	8005004 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ff2:	f7fd fdd7 	bl	8002ba4 <HAL_GetTick>
 8004ff6:	4602      	mov	r2, r0
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	1ad3      	subs	r3, r2, r3
 8004ffc:	2b02      	cmp	r3, #2
 8004ffe:	d901      	bls.n	8005004 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005000:	2303      	movs	r3, #3
 8005002:	e03d      	b.n	8005080 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005004:	4b11      	ldr	r3, [pc, #68]	; (800504c <HAL_RCC_OscConfig+0x4c4>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800500c:	2b00      	cmp	r3, #0
 800500e:	d0f0      	beq.n	8004ff2 <HAL_RCC_OscConfig+0x46a>
 8005010:	e035      	b.n	800507e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005012:	4b10      	ldr	r3, [pc, #64]	; (8005054 <HAL_RCC_OscConfig+0x4cc>)
 8005014:	2200      	movs	r2, #0
 8005016:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005018:	f7fd fdc4 	bl	8002ba4 <HAL_GetTick>
 800501c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800501e:	e008      	b.n	8005032 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005020:	f7fd fdc0 	bl	8002ba4 <HAL_GetTick>
 8005024:	4602      	mov	r2, r0
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	1ad3      	subs	r3, r2, r3
 800502a:	2b02      	cmp	r3, #2
 800502c:	d901      	bls.n	8005032 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800502e:	2303      	movs	r3, #3
 8005030:	e026      	b.n	8005080 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005032:	4b06      	ldr	r3, [pc, #24]	; (800504c <HAL_RCC_OscConfig+0x4c4>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800503a:	2b00      	cmp	r3, #0
 800503c:	d1f0      	bne.n	8005020 <HAL_RCC_OscConfig+0x498>
 800503e:	e01e      	b.n	800507e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	69db      	ldr	r3, [r3, #28]
 8005044:	2b01      	cmp	r3, #1
 8005046:	d107      	bne.n	8005058 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005048:	2301      	movs	r3, #1
 800504a:	e019      	b.n	8005080 <HAL_RCC_OscConfig+0x4f8>
 800504c:	40021000 	.word	0x40021000
 8005050:	40007000 	.word	0x40007000
 8005054:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005058:	4b0b      	ldr	r3, [pc, #44]	; (8005088 <HAL_RCC_OscConfig+0x500>)
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6a1b      	ldr	r3, [r3, #32]
 8005068:	429a      	cmp	r2, r3
 800506a:	d106      	bne.n	800507a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005076:	429a      	cmp	r2, r3
 8005078:	d001      	beq.n	800507e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	e000      	b.n	8005080 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800507e:	2300      	movs	r3, #0
}
 8005080:	4618      	mov	r0, r3
 8005082:	3718      	adds	r7, #24
 8005084:	46bd      	mov	sp, r7
 8005086:	bd80      	pop	{r7, pc}
 8005088:	40021000 	.word	0x40021000

0800508c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b084      	sub	sp, #16
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
 8005094:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d101      	bne.n	80050a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800509c:	2301      	movs	r3, #1
 800509e:	e0d0      	b.n	8005242 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80050a0:	4b6a      	ldr	r3, [pc, #424]	; (800524c <HAL_RCC_ClockConfig+0x1c0>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f003 0307 	and.w	r3, r3, #7
 80050a8:	683a      	ldr	r2, [r7, #0]
 80050aa:	429a      	cmp	r2, r3
 80050ac:	d910      	bls.n	80050d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050ae:	4b67      	ldr	r3, [pc, #412]	; (800524c <HAL_RCC_ClockConfig+0x1c0>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f023 0207 	bic.w	r2, r3, #7
 80050b6:	4965      	ldr	r1, [pc, #404]	; (800524c <HAL_RCC_ClockConfig+0x1c0>)
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	4313      	orrs	r3, r2
 80050bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050be:	4b63      	ldr	r3, [pc, #396]	; (800524c <HAL_RCC_ClockConfig+0x1c0>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f003 0307 	and.w	r3, r3, #7
 80050c6:	683a      	ldr	r2, [r7, #0]
 80050c8:	429a      	cmp	r2, r3
 80050ca:	d001      	beq.n	80050d0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80050cc:	2301      	movs	r3, #1
 80050ce:	e0b8      	b.n	8005242 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f003 0302 	and.w	r3, r3, #2
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d020      	beq.n	800511e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f003 0304 	and.w	r3, r3, #4
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d005      	beq.n	80050f4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80050e8:	4b59      	ldr	r3, [pc, #356]	; (8005250 <HAL_RCC_ClockConfig+0x1c4>)
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	4a58      	ldr	r2, [pc, #352]	; (8005250 <HAL_RCC_ClockConfig+0x1c4>)
 80050ee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80050f2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f003 0308 	and.w	r3, r3, #8
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d005      	beq.n	800510c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005100:	4b53      	ldr	r3, [pc, #332]	; (8005250 <HAL_RCC_ClockConfig+0x1c4>)
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	4a52      	ldr	r2, [pc, #328]	; (8005250 <HAL_RCC_ClockConfig+0x1c4>)
 8005106:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800510a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800510c:	4b50      	ldr	r3, [pc, #320]	; (8005250 <HAL_RCC_ClockConfig+0x1c4>)
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	689b      	ldr	r3, [r3, #8]
 8005118:	494d      	ldr	r1, [pc, #308]	; (8005250 <HAL_RCC_ClockConfig+0x1c4>)
 800511a:	4313      	orrs	r3, r2
 800511c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f003 0301 	and.w	r3, r3, #1
 8005126:	2b00      	cmp	r3, #0
 8005128:	d040      	beq.n	80051ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	2b01      	cmp	r3, #1
 8005130:	d107      	bne.n	8005142 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005132:	4b47      	ldr	r3, [pc, #284]	; (8005250 <HAL_RCC_ClockConfig+0x1c4>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800513a:	2b00      	cmp	r3, #0
 800513c:	d115      	bne.n	800516a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800513e:	2301      	movs	r3, #1
 8005140:	e07f      	b.n	8005242 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	2b02      	cmp	r3, #2
 8005148:	d107      	bne.n	800515a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800514a:	4b41      	ldr	r3, [pc, #260]	; (8005250 <HAL_RCC_ClockConfig+0x1c4>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005152:	2b00      	cmp	r3, #0
 8005154:	d109      	bne.n	800516a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005156:	2301      	movs	r3, #1
 8005158:	e073      	b.n	8005242 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800515a:	4b3d      	ldr	r3, [pc, #244]	; (8005250 <HAL_RCC_ClockConfig+0x1c4>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f003 0302 	and.w	r3, r3, #2
 8005162:	2b00      	cmp	r3, #0
 8005164:	d101      	bne.n	800516a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005166:	2301      	movs	r3, #1
 8005168:	e06b      	b.n	8005242 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800516a:	4b39      	ldr	r3, [pc, #228]	; (8005250 <HAL_RCC_ClockConfig+0x1c4>)
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	f023 0203 	bic.w	r2, r3, #3
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	4936      	ldr	r1, [pc, #216]	; (8005250 <HAL_RCC_ClockConfig+0x1c4>)
 8005178:	4313      	orrs	r3, r2
 800517a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800517c:	f7fd fd12 	bl	8002ba4 <HAL_GetTick>
 8005180:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005182:	e00a      	b.n	800519a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005184:	f7fd fd0e 	bl	8002ba4 <HAL_GetTick>
 8005188:	4602      	mov	r2, r0
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	1ad3      	subs	r3, r2, r3
 800518e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005192:	4293      	cmp	r3, r2
 8005194:	d901      	bls.n	800519a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005196:	2303      	movs	r3, #3
 8005198:	e053      	b.n	8005242 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800519a:	4b2d      	ldr	r3, [pc, #180]	; (8005250 <HAL_RCC_ClockConfig+0x1c4>)
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	f003 020c 	and.w	r2, r3, #12
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	009b      	lsls	r3, r3, #2
 80051a8:	429a      	cmp	r2, r3
 80051aa:	d1eb      	bne.n	8005184 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80051ac:	4b27      	ldr	r3, [pc, #156]	; (800524c <HAL_RCC_ClockConfig+0x1c0>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f003 0307 	and.w	r3, r3, #7
 80051b4:	683a      	ldr	r2, [r7, #0]
 80051b6:	429a      	cmp	r2, r3
 80051b8:	d210      	bcs.n	80051dc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051ba:	4b24      	ldr	r3, [pc, #144]	; (800524c <HAL_RCC_ClockConfig+0x1c0>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f023 0207 	bic.w	r2, r3, #7
 80051c2:	4922      	ldr	r1, [pc, #136]	; (800524c <HAL_RCC_ClockConfig+0x1c0>)
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	4313      	orrs	r3, r2
 80051c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051ca:	4b20      	ldr	r3, [pc, #128]	; (800524c <HAL_RCC_ClockConfig+0x1c0>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f003 0307 	and.w	r3, r3, #7
 80051d2:	683a      	ldr	r2, [r7, #0]
 80051d4:	429a      	cmp	r2, r3
 80051d6:	d001      	beq.n	80051dc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80051d8:	2301      	movs	r3, #1
 80051da:	e032      	b.n	8005242 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f003 0304 	and.w	r3, r3, #4
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d008      	beq.n	80051fa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80051e8:	4b19      	ldr	r3, [pc, #100]	; (8005250 <HAL_RCC_ClockConfig+0x1c4>)
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	68db      	ldr	r3, [r3, #12]
 80051f4:	4916      	ldr	r1, [pc, #88]	; (8005250 <HAL_RCC_ClockConfig+0x1c4>)
 80051f6:	4313      	orrs	r3, r2
 80051f8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f003 0308 	and.w	r3, r3, #8
 8005202:	2b00      	cmp	r3, #0
 8005204:	d009      	beq.n	800521a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005206:	4b12      	ldr	r3, [pc, #72]	; (8005250 <HAL_RCC_ClockConfig+0x1c4>)
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	691b      	ldr	r3, [r3, #16]
 8005212:	00db      	lsls	r3, r3, #3
 8005214:	490e      	ldr	r1, [pc, #56]	; (8005250 <HAL_RCC_ClockConfig+0x1c4>)
 8005216:	4313      	orrs	r3, r2
 8005218:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800521a:	f000 f821 	bl	8005260 <HAL_RCC_GetSysClockFreq>
 800521e:	4602      	mov	r2, r0
 8005220:	4b0b      	ldr	r3, [pc, #44]	; (8005250 <HAL_RCC_ClockConfig+0x1c4>)
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	091b      	lsrs	r3, r3, #4
 8005226:	f003 030f 	and.w	r3, r3, #15
 800522a:	490a      	ldr	r1, [pc, #40]	; (8005254 <HAL_RCC_ClockConfig+0x1c8>)
 800522c:	5ccb      	ldrb	r3, [r1, r3]
 800522e:	fa22 f303 	lsr.w	r3, r2, r3
 8005232:	4a09      	ldr	r2, [pc, #36]	; (8005258 <HAL_RCC_ClockConfig+0x1cc>)
 8005234:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005236:	4b09      	ldr	r3, [pc, #36]	; (800525c <HAL_RCC_ClockConfig+0x1d0>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4618      	mov	r0, r3
 800523c:	f7fd fc70 	bl	8002b20 <HAL_InitTick>

  return HAL_OK;
 8005240:	2300      	movs	r3, #0
}
 8005242:	4618      	mov	r0, r3
 8005244:	3710      	adds	r7, #16
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}
 800524a:	bf00      	nop
 800524c:	40022000 	.word	0x40022000
 8005250:	40021000 	.word	0x40021000
 8005254:	08008780 	.word	0x08008780
 8005258:	20000088 	.word	0x20000088
 800525c:	200000b0 	.word	0x200000b0

08005260 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005260:	b480      	push	{r7}
 8005262:	b087      	sub	sp, #28
 8005264:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005266:	2300      	movs	r3, #0
 8005268:	60fb      	str	r3, [r7, #12]
 800526a:	2300      	movs	r3, #0
 800526c:	60bb      	str	r3, [r7, #8]
 800526e:	2300      	movs	r3, #0
 8005270:	617b      	str	r3, [r7, #20]
 8005272:	2300      	movs	r3, #0
 8005274:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005276:	2300      	movs	r3, #0
 8005278:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800527a:	4b1e      	ldr	r3, [pc, #120]	; (80052f4 <HAL_RCC_GetSysClockFreq+0x94>)
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f003 030c 	and.w	r3, r3, #12
 8005286:	2b04      	cmp	r3, #4
 8005288:	d002      	beq.n	8005290 <HAL_RCC_GetSysClockFreq+0x30>
 800528a:	2b08      	cmp	r3, #8
 800528c:	d003      	beq.n	8005296 <HAL_RCC_GetSysClockFreq+0x36>
 800528e:	e027      	b.n	80052e0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005290:	4b19      	ldr	r3, [pc, #100]	; (80052f8 <HAL_RCC_GetSysClockFreq+0x98>)
 8005292:	613b      	str	r3, [r7, #16]
      break;
 8005294:	e027      	b.n	80052e6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	0c9b      	lsrs	r3, r3, #18
 800529a:	f003 030f 	and.w	r3, r3, #15
 800529e:	4a17      	ldr	r2, [pc, #92]	; (80052fc <HAL_RCC_GetSysClockFreq+0x9c>)
 80052a0:	5cd3      	ldrb	r3, [r2, r3]
 80052a2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d010      	beq.n	80052d0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80052ae:	4b11      	ldr	r3, [pc, #68]	; (80052f4 <HAL_RCC_GetSysClockFreq+0x94>)
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	0c5b      	lsrs	r3, r3, #17
 80052b4:	f003 0301 	and.w	r3, r3, #1
 80052b8:	4a11      	ldr	r2, [pc, #68]	; (8005300 <HAL_RCC_GetSysClockFreq+0xa0>)
 80052ba:	5cd3      	ldrb	r3, [r2, r3]
 80052bc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	4a0d      	ldr	r2, [pc, #52]	; (80052f8 <HAL_RCC_GetSysClockFreq+0x98>)
 80052c2:	fb03 f202 	mul.w	r2, r3, r2
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80052cc:	617b      	str	r3, [r7, #20]
 80052ce:	e004      	b.n	80052da <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	4a0c      	ldr	r2, [pc, #48]	; (8005304 <HAL_RCC_GetSysClockFreq+0xa4>)
 80052d4:	fb02 f303 	mul.w	r3, r2, r3
 80052d8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	613b      	str	r3, [r7, #16]
      break;
 80052de:	e002      	b.n	80052e6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80052e0:	4b05      	ldr	r3, [pc, #20]	; (80052f8 <HAL_RCC_GetSysClockFreq+0x98>)
 80052e2:	613b      	str	r3, [r7, #16]
      break;
 80052e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80052e6:	693b      	ldr	r3, [r7, #16]
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	371c      	adds	r7, #28
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bc80      	pop	{r7}
 80052f0:	4770      	bx	lr
 80052f2:	bf00      	nop
 80052f4:	40021000 	.word	0x40021000
 80052f8:	007a1200 	.word	0x007a1200
 80052fc:	08008798 	.word	0x08008798
 8005300:	080087a8 	.word	0x080087a8
 8005304:	003d0900 	.word	0x003d0900

08005308 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005308:	b480      	push	{r7}
 800530a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800530c:	4b02      	ldr	r3, [pc, #8]	; (8005318 <HAL_RCC_GetHCLKFreq+0x10>)
 800530e:	681b      	ldr	r3, [r3, #0]
}
 8005310:	4618      	mov	r0, r3
 8005312:	46bd      	mov	sp, r7
 8005314:	bc80      	pop	{r7}
 8005316:	4770      	bx	lr
 8005318:	20000088 	.word	0x20000088

0800531c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005320:	f7ff fff2 	bl	8005308 <HAL_RCC_GetHCLKFreq>
 8005324:	4602      	mov	r2, r0
 8005326:	4b05      	ldr	r3, [pc, #20]	; (800533c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	0a1b      	lsrs	r3, r3, #8
 800532c:	f003 0307 	and.w	r3, r3, #7
 8005330:	4903      	ldr	r1, [pc, #12]	; (8005340 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005332:	5ccb      	ldrb	r3, [r1, r3]
 8005334:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005338:	4618      	mov	r0, r3
 800533a:	bd80      	pop	{r7, pc}
 800533c:	40021000 	.word	0x40021000
 8005340:	08008790 	.word	0x08008790

08005344 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005348:	f7ff ffde 	bl	8005308 <HAL_RCC_GetHCLKFreq>
 800534c:	4602      	mov	r2, r0
 800534e:	4b05      	ldr	r3, [pc, #20]	; (8005364 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	0adb      	lsrs	r3, r3, #11
 8005354:	f003 0307 	and.w	r3, r3, #7
 8005358:	4903      	ldr	r1, [pc, #12]	; (8005368 <HAL_RCC_GetPCLK2Freq+0x24>)
 800535a:	5ccb      	ldrb	r3, [r1, r3]
 800535c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005360:	4618      	mov	r0, r3
 8005362:	bd80      	pop	{r7, pc}
 8005364:	40021000 	.word	0x40021000
 8005368:	08008790 	.word	0x08008790

0800536c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800536c:	b480      	push	{r7}
 800536e:	b085      	sub	sp, #20
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005374:	4b0a      	ldr	r3, [pc, #40]	; (80053a0 <RCC_Delay+0x34>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a0a      	ldr	r2, [pc, #40]	; (80053a4 <RCC_Delay+0x38>)
 800537a:	fba2 2303 	umull	r2, r3, r2, r3
 800537e:	0a5b      	lsrs	r3, r3, #9
 8005380:	687a      	ldr	r2, [r7, #4]
 8005382:	fb02 f303 	mul.w	r3, r2, r3
 8005386:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005388:	bf00      	nop
  }
  while (Delay --);
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	1e5a      	subs	r2, r3, #1
 800538e:	60fa      	str	r2, [r7, #12]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d1f9      	bne.n	8005388 <RCC_Delay+0x1c>
}
 8005394:	bf00      	nop
 8005396:	bf00      	nop
 8005398:	3714      	adds	r7, #20
 800539a:	46bd      	mov	sp, r7
 800539c:	bc80      	pop	{r7}
 800539e:	4770      	bx	lr
 80053a0:	20000088 	.word	0x20000088
 80053a4:	10624dd3 	.word	0x10624dd3

080053a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b086      	sub	sp, #24
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80053b0:	2300      	movs	r3, #0
 80053b2:	613b      	str	r3, [r7, #16]
 80053b4:	2300      	movs	r3, #0
 80053b6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f003 0301 	and.w	r3, r3, #1
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d07d      	beq.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80053c4:	2300      	movs	r3, #0
 80053c6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80053c8:	4b4f      	ldr	r3, [pc, #316]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053ca:	69db      	ldr	r3, [r3, #28]
 80053cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d10d      	bne.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80053d4:	4b4c      	ldr	r3, [pc, #304]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053d6:	69db      	ldr	r3, [r3, #28]
 80053d8:	4a4b      	ldr	r2, [pc, #300]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053de:	61d3      	str	r3, [r2, #28]
 80053e0:	4b49      	ldr	r3, [pc, #292]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053e2:	69db      	ldr	r3, [r3, #28]
 80053e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053e8:	60bb      	str	r3, [r7, #8]
 80053ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80053ec:	2301      	movs	r3, #1
 80053ee:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053f0:	4b46      	ldr	r3, [pc, #280]	; (800550c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d118      	bne.n	800542e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80053fc:	4b43      	ldr	r3, [pc, #268]	; (800550c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a42      	ldr	r2, [pc, #264]	; (800550c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005402:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005406:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005408:	f7fd fbcc 	bl	8002ba4 <HAL_GetTick>
 800540c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800540e:	e008      	b.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005410:	f7fd fbc8 	bl	8002ba4 <HAL_GetTick>
 8005414:	4602      	mov	r2, r0
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	1ad3      	subs	r3, r2, r3
 800541a:	2b64      	cmp	r3, #100	; 0x64
 800541c:	d901      	bls.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800541e:	2303      	movs	r3, #3
 8005420:	e06d      	b.n	80054fe <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005422:	4b3a      	ldr	r3, [pc, #232]	; (800550c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800542a:	2b00      	cmp	r3, #0
 800542c:	d0f0      	beq.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800542e:	4b36      	ldr	r3, [pc, #216]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005430:	6a1b      	ldr	r3, [r3, #32]
 8005432:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005436:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d02e      	beq.n	800549c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005446:	68fa      	ldr	r2, [r7, #12]
 8005448:	429a      	cmp	r2, r3
 800544a:	d027      	beq.n	800549c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800544c:	4b2e      	ldr	r3, [pc, #184]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800544e:	6a1b      	ldr	r3, [r3, #32]
 8005450:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005454:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005456:	4b2e      	ldr	r3, [pc, #184]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005458:	2201      	movs	r2, #1
 800545a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800545c:	4b2c      	ldr	r3, [pc, #176]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800545e:	2200      	movs	r2, #0
 8005460:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005462:	4a29      	ldr	r2, [pc, #164]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	f003 0301 	and.w	r3, r3, #1
 800546e:	2b00      	cmp	r3, #0
 8005470:	d014      	beq.n	800549c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005472:	f7fd fb97 	bl	8002ba4 <HAL_GetTick>
 8005476:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005478:	e00a      	b.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800547a:	f7fd fb93 	bl	8002ba4 <HAL_GetTick>
 800547e:	4602      	mov	r2, r0
 8005480:	693b      	ldr	r3, [r7, #16]
 8005482:	1ad3      	subs	r3, r2, r3
 8005484:	f241 3288 	movw	r2, #5000	; 0x1388
 8005488:	4293      	cmp	r3, r2
 800548a:	d901      	bls.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800548c:	2303      	movs	r3, #3
 800548e:	e036      	b.n	80054fe <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005490:	4b1d      	ldr	r3, [pc, #116]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005492:	6a1b      	ldr	r3, [r3, #32]
 8005494:	f003 0302 	and.w	r3, r3, #2
 8005498:	2b00      	cmp	r3, #0
 800549a:	d0ee      	beq.n	800547a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800549c:	4b1a      	ldr	r3, [pc, #104]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800549e:	6a1b      	ldr	r3, [r3, #32]
 80054a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	4917      	ldr	r1, [pc, #92]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054aa:	4313      	orrs	r3, r2
 80054ac:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80054ae:	7dfb      	ldrb	r3, [r7, #23]
 80054b0:	2b01      	cmp	r3, #1
 80054b2:	d105      	bne.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80054b4:	4b14      	ldr	r3, [pc, #80]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054b6:	69db      	ldr	r3, [r3, #28]
 80054b8:	4a13      	ldr	r2, [pc, #76]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054be:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f003 0302 	and.w	r3, r3, #2
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d008      	beq.n	80054de <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80054cc:	4b0e      	ldr	r3, [pc, #56]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	490b      	ldr	r1, [pc, #44]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054da:	4313      	orrs	r3, r2
 80054dc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f003 0310 	and.w	r3, r3, #16
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d008      	beq.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80054ea:	4b07      	ldr	r3, [pc, #28]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	68db      	ldr	r3, [r3, #12]
 80054f6:	4904      	ldr	r1, [pc, #16]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054f8:	4313      	orrs	r3, r2
 80054fa:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80054fc:	2300      	movs	r3, #0
}
 80054fe:	4618      	mov	r0, r3
 8005500:	3718      	adds	r7, #24
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}
 8005506:	bf00      	nop
 8005508:	40021000 	.word	0x40021000
 800550c:	40007000 	.word	0x40007000
 8005510:	42420440 	.word	0x42420440

08005514 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b082      	sub	sp, #8
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d101      	bne.n	8005526 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005522:	2301      	movs	r3, #1
 8005524:	e041      	b.n	80055aa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800552c:	b2db      	uxtb	r3, r3
 800552e:	2b00      	cmp	r3, #0
 8005530:	d106      	bne.n	8005540 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2200      	movs	r2, #0
 8005536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	f7fc ffe0 	bl	8002500 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2202      	movs	r2, #2
 8005544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	3304      	adds	r3, #4
 8005550:	4619      	mov	r1, r3
 8005552:	4610      	mov	r0, r2
 8005554:	f000 f8f4 	bl	8005740 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2201      	movs	r2, #1
 800555c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2201      	movs	r2, #1
 8005564:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2201      	movs	r2, #1
 800556c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2201      	movs	r2, #1
 8005574:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2201      	movs	r2, #1
 800557c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2201      	movs	r2, #1
 8005584:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2201      	movs	r2, #1
 800558c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2201      	movs	r2, #1
 8005594:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2201      	movs	r2, #1
 800559c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2201      	movs	r2, #1
 80055a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80055a8:	2300      	movs	r3, #0
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	3708      	adds	r7, #8
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}

080055b2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80055b2:	b580      	push	{r7, lr}
 80055b4:	b084      	sub	sp, #16
 80055b6:	af00      	add	r7, sp, #0
 80055b8:	6078      	str	r0, [r7, #4]
 80055ba:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80055bc:	2300      	movs	r3, #0
 80055be:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055c6:	2b01      	cmp	r3, #1
 80055c8:	d101      	bne.n	80055ce <HAL_TIM_ConfigClockSource+0x1c>
 80055ca:	2302      	movs	r3, #2
 80055cc:	e0b4      	b.n	8005738 <HAL_TIM_ConfigClockSource+0x186>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2201      	movs	r2, #1
 80055d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2202      	movs	r2, #2
 80055da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80055ec:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80055f4:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	68ba      	ldr	r2, [r7, #8]
 80055fc:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005606:	d03e      	beq.n	8005686 <HAL_TIM_ConfigClockSource+0xd4>
 8005608:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800560c:	f200 8087 	bhi.w	800571e <HAL_TIM_ConfigClockSource+0x16c>
 8005610:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005614:	f000 8086 	beq.w	8005724 <HAL_TIM_ConfigClockSource+0x172>
 8005618:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800561c:	d87f      	bhi.n	800571e <HAL_TIM_ConfigClockSource+0x16c>
 800561e:	2b70      	cmp	r3, #112	; 0x70
 8005620:	d01a      	beq.n	8005658 <HAL_TIM_ConfigClockSource+0xa6>
 8005622:	2b70      	cmp	r3, #112	; 0x70
 8005624:	d87b      	bhi.n	800571e <HAL_TIM_ConfigClockSource+0x16c>
 8005626:	2b60      	cmp	r3, #96	; 0x60
 8005628:	d050      	beq.n	80056cc <HAL_TIM_ConfigClockSource+0x11a>
 800562a:	2b60      	cmp	r3, #96	; 0x60
 800562c:	d877      	bhi.n	800571e <HAL_TIM_ConfigClockSource+0x16c>
 800562e:	2b50      	cmp	r3, #80	; 0x50
 8005630:	d03c      	beq.n	80056ac <HAL_TIM_ConfigClockSource+0xfa>
 8005632:	2b50      	cmp	r3, #80	; 0x50
 8005634:	d873      	bhi.n	800571e <HAL_TIM_ConfigClockSource+0x16c>
 8005636:	2b40      	cmp	r3, #64	; 0x40
 8005638:	d058      	beq.n	80056ec <HAL_TIM_ConfigClockSource+0x13a>
 800563a:	2b40      	cmp	r3, #64	; 0x40
 800563c:	d86f      	bhi.n	800571e <HAL_TIM_ConfigClockSource+0x16c>
 800563e:	2b30      	cmp	r3, #48	; 0x30
 8005640:	d064      	beq.n	800570c <HAL_TIM_ConfigClockSource+0x15a>
 8005642:	2b30      	cmp	r3, #48	; 0x30
 8005644:	d86b      	bhi.n	800571e <HAL_TIM_ConfigClockSource+0x16c>
 8005646:	2b20      	cmp	r3, #32
 8005648:	d060      	beq.n	800570c <HAL_TIM_ConfigClockSource+0x15a>
 800564a:	2b20      	cmp	r3, #32
 800564c:	d867      	bhi.n	800571e <HAL_TIM_ConfigClockSource+0x16c>
 800564e:	2b00      	cmp	r3, #0
 8005650:	d05c      	beq.n	800570c <HAL_TIM_ConfigClockSource+0x15a>
 8005652:	2b10      	cmp	r3, #16
 8005654:	d05a      	beq.n	800570c <HAL_TIM_ConfigClockSource+0x15a>
 8005656:	e062      	b.n	800571e <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6818      	ldr	r0, [r3, #0]
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	6899      	ldr	r1, [r3, #8]
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	685a      	ldr	r2, [r3, #4]
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	68db      	ldr	r3, [r3, #12]
 8005668:	f000 f943 	bl	80058f2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	689b      	ldr	r3, [r3, #8]
 8005672:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800567a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	68ba      	ldr	r2, [r7, #8]
 8005682:	609a      	str	r2, [r3, #8]
      break;
 8005684:	e04f      	b.n	8005726 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6818      	ldr	r0, [r3, #0]
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	6899      	ldr	r1, [r3, #8]
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	685a      	ldr	r2, [r3, #4]
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	68db      	ldr	r3, [r3, #12]
 8005696:	f000 f92c 	bl	80058f2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	689a      	ldr	r2, [r3, #8]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80056a8:	609a      	str	r2, [r3, #8]
      break;
 80056aa:	e03c      	b.n	8005726 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6818      	ldr	r0, [r3, #0]
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	6859      	ldr	r1, [r3, #4]
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	68db      	ldr	r3, [r3, #12]
 80056b8:	461a      	mov	r2, r3
 80056ba:	f000 f8a3 	bl	8005804 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	2150      	movs	r1, #80	; 0x50
 80056c4:	4618      	mov	r0, r3
 80056c6:	f000 f8fa 	bl	80058be <TIM_ITRx_SetConfig>
      break;
 80056ca:	e02c      	b.n	8005726 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6818      	ldr	r0, [r3, #0]
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	6859      	ldr	r1, [r3, #4]
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	68db      	ldr	r3, [r3, #12]
 80056d8:	461a      	mov	r2, r3
 80056da:	f000 f8c1 	bl	8005860 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	2160      	movs	r1, #96	; 0x60
 80056e4:	4618      	mov	r0, r3
 80056e6:	f000 f8ea 	bl	80058be <TIM_ITRx_SetConfig>
      break;
 80056ea:	e01c      	b.n	8005726 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6818      	ldr	r0, [r3, #0]
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	6859      	ldr	r1, [r3, #4]
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	68db      	ldr	r3, [r3, #12]
 80056f8:	461a      	mov	r2, r3
 80056fa:	f000 f883 	bl	8005804 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	2140      	movs	r1, #64	; 0x40
 8005704:	4618      	mov	r0, r3
 8005706:	f000 f8da 	bl	80058be <TIM_ITRx_SetConfig>
      break;
 800570a:	e00c      	b.n	8005726 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681a      	ldr	r2, [r3, #0]
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4619      	mov	r1, r3
 8005716:	4610      	mov	r0, r2
 8005718:	f000 f8d1 	bl	80058be <TIM_ITRx_SetConfig>
      break;
 800571c:	e003      	b.n	8005726 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800571e:	2301      	movs	r3, #1
 8005720:	73fb      	strb	r3, [r7, #15]
      break;
 8005722:	e000      	b.n	8005726 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005724:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2201      	movs	r2, #1
 800572a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2200      	movs	r2, #0
 8005732:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005736:	7bfb      	ldrb	r3, [r7, #15]
}
 8005738:	4618      	mov	r0, r3
 800573a:	3710      	adds	r7, #16
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}

08005740 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005740:	b480      	push	{r7}
 8005742:	b085      	sub	sp, #20
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
 8005748:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	4a29      	ldr	r2, [pc, #164]	; (80057f8 <TIM_Base_SetConfig+0xb8>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d00b      	beq.n	8005770 <TIM_Base_SetConfig+0x30>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800575e:	d007      	beq.n	8005770 <TIM_Base_SetConfig+0x30>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	4a26      	ldr	r2, [pc, #152]	; (80057fc <TIM_Base_SetConfig+0xbc>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d003      	beq.n	8005770 <TIM_Base_SetConfig+0x30>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	4a25      	ldr	r2, [pc, #148]	; (8005800 <TIM_Base_SetConfig+0xc0>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d108      	bne.n	8005782 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005776:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	685b      	ldr	r3, [r3, #4]
 800577c:	68fa      	ldr	r2, [r7, #12]
 800577e:	4313      	orrs	r3, r2
 8005780:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	4a1c      	ldr	r2, [pc, #112]	; (80057f8 <TIM_Base_SetConfig+0xb8>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d00b      	beq.n	80057a2 <TIM_Base_SetConfig+0x62>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005790:	d007      	beq.n	80057a2 <TIM_Base_SetConfig+0x62>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	4a19      	ldr	r2, [pc, #100]	; (80057fc <TIM_Base_SetConfig+0xbc>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d003      	beq.n	80057a2 <TIM_Base_SetConfig+0x62>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	4a18      	ldr	r2, [pc, #96]	; (8005800 <TIM_Base_SetConfig+0xc0>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d108      	bne.n	80057b4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	68db      	ldr	r3, [r3, #12]
 80057ae:	68fa      	ldr	r2, [r7, #12]
 80057b0:	4313      	orrs	r3, r2
 80057b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	695b      	ldr	r3, [r3, #20]
 80057be:	4313      	orrs	r3, r2
 80057c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	68fa      	ldr	r2, [r7, #12]
 80057c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	689a      	ldr	r2, [r3, #8]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	681a      	ldr	r2, [r3, #0]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	4a07      	ldr	r2, [pc, #28]	; (80057f8 <TIM_Base_SetConfig+0xb8>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d103      	bne.n	80057e8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	691a      	ldr	r2, [r3, #16]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2201      	movs	r2, #1
 80057ec:	615a      	str	r2, [r3, #20]
}
 80057ee:	bf00      	nop
 80057f0:	3714      	adds	r7, #20
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bc80      	pop	{r7}
 80057f6:	4770      	bx	lr
 80057f8:	40012c00 	.word	0x40012c00
 80057fc:	40000400 	.word	0x40000400
 8005800:	40000800 	.word	0x40000800

08005804 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005804:	b480      	push	{r7}
 8005806:	b087      	sub	sp, #28
 8005808:	af00      	add	r7, sp, #0
 800580a:	60f8      	str	r0, [r7, #12]
 800580c:	60b9      	str	r1, [r7, #8]
 800580e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	6a1b      	ldr	r3, [r3, #32]
 8005814:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	6a1b      	ldr	r3, [r3, #32]
 800581a:	f023 0201 	bic.w	r2, r3, #1
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	699b      	ldr	r3, [r3, #24]
 8005826:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800582e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	011b      	lsls	r3, r3, #4
 8005834:	693a      	ldr	r2, [r7, #16]
 8005836:	4313      	orrs	r3, r2
 8005838:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	f023 030a 	bic.w	r3, r3, #10
 8005840:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005842:	697a      	ldr	r2, [r7, #20]
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	4313      	orrs	r3, r2
 8005848:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	693a      	ldr	r2, [r7, #16]
 800584e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	697a      	ldr	r2, [r7, #20]
 8005854:	621a      	str	r2, [r3, #32]
}
 8005856:	bf00      	nop
 8005858:	371c      	adds	r7, #28
 800585a:	46bd      	mov	sp, r7
 800585c:	bc80      	pop	{r7}
 800585e:	4770      	bx	lr

08005860 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005860:	b480      	push	{r7}
 8005862:	b087      	sub	sp, #28
 8005864:	af00      	add	r7, sp, #0
 8005866:	60f8      	str	r0, [r7, #12]
 8005868:	60b9      	str	r1, [r7, #8]
 800586a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	6a1b      	ldr	r3, [r3, #32]
 8005870:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	6a1b      	ldr	r3, [r3, #32]
 8005876:	f023 0210 	bic.w	r2, r3, #16
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	699b      	ldr	r3, [r3, #24]
 8005882:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005884:	693b      	ldr	r3, [r7, #16]
 8005886:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800588a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	031b      	lsls	r3, r3, #12
 8005890:	693a      	ldr	r2, [r7, #16]
 8005892:	4313      	orrs	r3, r2
 8005894:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800589c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	011b      	lsls	r3, r3, #4
 80058a2:	697a      	ldr	r2, [r7, #20]
 80058a4:	4313      	orrs	r3, r2
 80058a6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	693a      	ldr	r2, [r7, #16]
 80058ac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	697a      	ldr	r2, [r7, #20]
 80058b2:	621a      	str	r2, [r3, #32]
}
 80058b4:	bf00      	nop
 80058b6:	371c      	adds	r7, #28
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bc80      	pop	{r7}
 80058bc:	4770      	bx	lr

080058be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80058be:	b480      	push	{r7}
 80058c0:	b085      	sub	sp, #20
 80058c2:	af00      	add	r7, sp, #0
 80058c4:	6078      	str	r0, [r7, #4]
 80058c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	689b      	ldr	r3, [r3, #8]
 80058cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80058d6:	683a      	ldr	r2, [r7, #0]
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	4313      	orrs	r3, r2
 80058dc:	f043 0307 	orr.w	r3, r3, #7
 80058e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	68fa      	ldr	r2, [r7, #12]
 80058e6:	609a      	str	r2, [r3, #8]
}
 80058e8:	bf00      	nop
 80058ea:	3714      	adds	r7, #20
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bc80      	pop	{r7}
 80058f0:	4770      	bx	lr

080058f2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80058f2:	b480      	push	{r7}
 80058f4:	b087      	sub	sp, #28
 80058f6:	af00      	add	r7, sp, #0
 80058f8:	60f8      	str	r0, [r7, #12]
 80058fa:	60b9      	str	r1, [r7, #8]
 80058fc:	607a      	str	r2, [r7, #4]
 80058fe:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	689b      	ldr	r3, [r3, #8]
 8005904:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800590c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	021a      	lsls	r2, r3, #8
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	431a      	orrs	r2, r3
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	4313      	orrs	r3, r2
 800591a:	697a      	ldr	r2, [r7, #20]
 800591c:	4313      	orrs	r3, r2
 800591e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	697a      	ldr	r2, [r7, #20]
 8005924:	609a      	str	r2, [r3, #8]
}
 8005926:	bf00      	nop
 8005928:	371c      	adds	r7, #28
 800592a:	46bd      	mov	sp, r7
 800592c:	bc80      	pop	{r7}
 800592e:	4770      	bx	lr

08005930 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005930:	b480      	push	{r7}
 8005932:	b085      	sub	sp, #20
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
 8005938:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005940:	2b01      	cmp	r3, #1
 8005942:	d101      	bne.n	8005948 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005944:	2302      	movs	r3, #2
 8005946:	e046      	b.n	80059d6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2201      	movs	r2, #1
 800594c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2202      	movs	r2, #2
 8005954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800596e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	68fa      	ldr	r2, [r7, #12]
 8005976:	4313      	orrs	r3, r2
 8005978:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	68fa      	ldr	r2, [r7, #12]
 8005980:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a16      	ldr	r2, [pc, #88]	; (80059e0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d00e      	beq.n	80059aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005994:	d009      	beq.n	80059aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a12      	ldr	r2, [pc, #72]	; (80059e4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d004      	beq.n	80059aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a10      	ldr	r2, [pc, #64]	; (80059e8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d10c      	bne.n	80059c4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	68ba      	ldr	r2, [r7, #8]
 80059b8:	4313      	orrs	r3, r2
 80059ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	68ba      	ldr	r2, [r7, #8]
 80059c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2201      	movs	r2, #1
 80059c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2200      	movs	r2, #0
 80059d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80059d4:	2300      	movs	r3, #0
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3714      	adds	r7, #20
 80059da:	46bd      	mov	sp, r7
 80059dc:	bc80      	pop	{r7}
 80059de:	4770      	bx	lr
 80059e0:	40012c00 	.word	0x40012c00
 80059e4:	40000400 	.word	0x40000400
 80059e8:	40000800 	.word	0x40000800

080059ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b082      	sub	sp, #8
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d101      	bne.n	80059fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80059fa:	2301      	movs	r3, #1
 80059fc:	e042      	b.n	8005a84 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a04:	b2db      	uxtb	r3, r3
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d106      	bne.n	8005a18 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f7fc fe10 	bl	8002638 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2224      	movs	r2, #36	; 0x24
 8005a1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	68da      	ldr	r2, [r3, #12]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a2e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005a30:	6878      	ldr	r0, [r7, #4]
 8005a32:	f000 ff89 	bl	8006948 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	691a      	ldr	r2, [r3, #16]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a44:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	695a      	ldr	r2, [r3, #20]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a54:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	68da      	ldr	r2, [r3, #12]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a64:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2220      	movs	r2, #32
 8005a70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2220      	movs	r2, #32
 8005a78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005a82:	2300      	movs	r3, #0
}
 8005a84:	4618      	mov	r0, r3
 8005a86:	3708      	adds	r7, #8
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bd80      	pop	{r7, pc}

08005a8c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b08a      	sub	sp, #40	; 0x28
 8005a90:	af02      	add	r7, sp, #8
 8005a92:	60f8      	str	r0, [r7, #12]
 8005a94:	60b9      	str	r1, [r7, #8]
 8005a96:	603b      	str	r3, [r7, #0]
 8005a98:	4613      	mov	r3, r2
 8005a9a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005aa6:	b2db      	uxtb	r3, r3
 8005aa8:	2b20      	cmp	r3, #32
 8005aaa:	d16d      	bne.n	8005b88 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d002      	beq.n	8005ab8 <HAL_UART_Transmit+0x2c>
 8005ab2:	88fb      	ldrh	r3, [r7, #6]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d101      	bne.n	8005abc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005ab8:	2301      	movs	r3, #1
 8005aba:	e066      	b.n	8005b8a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2221      	movs	r2, #33	; 0x21
 8005ac6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005aca:	f7fd f86b 	bl	8002ba4 <HAL_GetTick>
 8005ace:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	88fa      	ldrh	r2, [r7, #6]
 8005ad4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	88fa      	ldrh	r2, [r7, #6]
 8005ada:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	689b      	ldr	r3, [r3, #8]
 8005ae0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ae4:	d108      	bne.n	8005af8 <HAL_UART_Transmit+0x6c>
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	691b      	ldr	r3, [r3, #16]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d104      	bne.n	8005af8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005aee:	2300      	movs	r3, #0
 8005af0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	61bb      	str	r3, [r7, #24]
 8005af6:	e003      	b.n	8005b00 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005afc:	2300      	movs	r3, #0
 8005afe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005b00:	e02a      	b.n	8005b58 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	9300      	str	r3, [sp, #0]
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	2180      	movs	r1, #128	; 0x80
 8005b0c:	68f8      	ldr	r0, [r7, #12]
 8005b0e:	f000 fc51 	bl	80063b4 <UART_WaitOnFlagUntilTimeout>
 8005b12:	4603      	mov	r3, r0
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d001      	beq.n	8005b1c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8005b18:	2303      	movs	r3, #3
 8005b1a:	e036      	b.n	8005b8a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005b1c:	69fb      	ldr	r3, [r7, #28]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d10b      	bne.n	8005b3a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005b22:	69bb      	ldr	r3, [r7, #24]
 8005b24:	881b      	ldrh	r3, [r3, #0]
 8005b26:	461a      	mov	r2, r3
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b30:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005b32:	69bb      	ldr	r3, [r7, #24]
 8005b34:	3302      	adds	r3, #2
 8005b36:	61bb      	str	r3, [r7, #24]
 8005b38:	e007      	b.n	8005b4a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005b3a:	69fb      	ldr	r3, [r7, #28]
 8005b3c:	781a      	ldrb	r2, [r3, #0]
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005b44:	69fb      	ldr	r3, [r7, #28]
 8005b46:	3301      	adds	r3, #1
 8005b48:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005b4e:	b29b      	uxth	r3, r3
 8005b50:	3b01      	subs	r3, #1
 8005b52:	b29a      	uxth	r2, r3
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005b5c:	b29b      	uxth	r3, r3
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d1cf      	bne.n	8005b02 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	9300      	str	r3, [sp, #0]
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	2140      	movs	r1, #64	; 0x40
 8005b6c:	68f8      	ldr	r0, [r7, #12]
 8005b6e:	f000 fc21 	bl	80063b4 <UART_WaitOnFlagUntilTimeout>
 8005b72:	4603      	mov	r3, r0
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d001      	beq.n	8005b7c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8005b78:	2303      	movs	r3, #3
 8005b7a:	e006      	b.n	8005b8a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	2220      	movs	r2, #32
 8005b80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8005b84:	2300      	movs	r3, #0
 8005b86:	e000      	b.n	8005b8a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005b88:	2302      	movs	r3, #2
  }
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	3720      	adds	r7, #32
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}

08005b92 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005b92:	b580      	push	{r7, lr}
 8005b94:	b08c      	sub	sp, #48	; 0x30
 8005b96:	af00      	add	r7, sp, #0
 8005b98:	60f8      	str	r0, [r7, #12]
 8005b9a:	60b9      	str	r1, [r7, #8]
 8005b9c:	4613      	mov	r3, r2
 8005b9e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005ba6:	b2db      	uxtb	r3, r3
 8005ba8:	2b20      	cmp	r3, #32
 8005baa:	d14a      	bne.n	8005c42 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d002      	beq.n	8005bb8 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8005bb2:	88fb      	ldrh	r3, [r7, #6]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d101      	bne.n	8005bbc <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8005bb8:	2301      	movs	r3, #1
 8005bba:	e043      	b.n	8005c44 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	631a      	str	r2, [r3, #48]	; 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	635a      	str	r2, [r3, #52]	; 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8005bc8:	88fb      	ldrh	r3, [r7, #6]
 8005bca:	461a      	mov	r2, r3
 8005bcc:	68b9      	ldr	r1, [r7, #8]
 8005bce:	68f8      	ldr	r0, [r7, #12]
 8005bd0:	f000 fc5e 	bl	8006490 <UART_Start_Receive_DMA>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8005bda:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d12c      	bne.n	8005c3c <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005be6:	2b01      	cmp	r3, #1
 8005be8:	d125      	bne.n	8005c36 <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005bea:	2300      	movs	r3, #0
 8005bec:	613b      	str	r3, [r7, #16]
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	613b      	str	r3, [r7, #16]
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	613b      	str	r3, [r7, #16]
 8005bfe:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	330c      	adds	r3, #12
 8005c06:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c08:	69bb      	ldr	r3, [r7, #24]
 8005c0a:	e853 3f00 	ldrex	r3, [r3]
 8005c0e:	617b      	str	r3, [r7, #20]
   return(result);
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	f043 0310 	orr.w	r3, r3, #16
 8005c16:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	330c      	adds	r3, #12
 8005c1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c20:	627a      	str	r2, [r7, #36]	; 0x24
 8005c22:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c24:	6a39      	ldr	r1, [r7, #32]
 8005c26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c28:	e841 2300 	strex	r3, r2, [r1]
 8005c2c:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c2e:	69fb      	ldr	r3, [r7, #28]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d1e5      	bne.n	8005c00 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 8005c34:	e002      	b.n	8005c3c <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8005c36:	2301      	movs	r3, #1
 8005c38:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8005c3c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005c40:	e000      	b.n	8005c44 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8005c42:	2302      	movs	r3, #2
  }
}
 8005c44:	4618      	mov	r0, r3
 8005c46:	3730      	adds	r7, #48	; 0x30
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bd80      	pop	{r7, pc}

08005c4c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b0ba      	sub	sp, #232	; 0xe8
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	68db      	ldr	r3, [r3, #12]
 8005c64:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	695b      	ldr	r3, [r3, #20]
 8005c6e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005c72:	2300      	movs	r3, #0
 8005c74:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005c78:	2300      	movs	r3, #0
 8005c7a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005c7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c82:	f003 030f 	and.w	r3, r3, #15
 8005c86:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005c8a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d10f      	bne.n	8005cb2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005c92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c96:	f003 0320 	and.w	r3, r3, #32
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d009      	beq.n	8005cb2 <HAL_UART_IRQHandler+0x66>
 8005c9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ca2:	f003 0320 	and.w	r3, r3, #32
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d003      	beq.n	8005cb2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f000 fd8e 	bl	80067cc <UART_Receive_IT>
      return;
 8005cb0:	e25b      	b.n	800616a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005cb2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	f000 80de 	beq.w	8005e78 <HAL_UART_IRQHandler+0x22c>
 8005cbc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005cc0:	f003 0301 	and.w	r3, r3, #1
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d106      	bne.n	8005cd6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005cc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ccc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	f000 80d1 	beq.w	8005e78 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005cd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cda:	f003 0301 	and.w	r3, r3, #1
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d00b      	beq.n	8005cfa <HAL_UART_IRQHandler+0xae>
 8005ce2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ce6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d005      	beq.n	8005cfa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cf2:	f043 0201 	orr.w	r2, r3, #1
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005cfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cfe:	f003 0304 	and.w	r3, r3, #4
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d00b      	beq.n	8005d1e <HAL_UART_IRQHandler+0xd2>
 8005d06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d0a:	f003 0301 	and.w	r3, r3, #1
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d005      	beq.n	8005d1e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d16:	f043 0202 	orr.w	r2, r3, #2
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005d1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d22:	f003 0302 	and.w	r3, r3, #2
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d00b      	beq.n	8005d42 <HAL_UART_IRQHandler+0xf6>
 8005d2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d2e:	f003 0301 	and.w	r3, r3, #1
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d005      	beq.n	8005d42 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d3a:	f043 0204 	orr.w	r2, r3, #4
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005d42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d46:	f003 0308 	and.w	r3, r3, #8
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d011      	beq.n	8005d72 <HAL_UART_IRQHandler+0x126>
 8005d4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d52:	f003 0320 	and.w	r3, r3, #32
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d105      	bne.n	8005d66 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005d5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d5e:	f003 0301 	and.w	r3, r3, #1
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d005      	beq.n	8005d72 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d6a:	f043 0208 	orr.w	r2, r3, #8
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	f000 81f2 	beq.w	8006160 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005d7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d80:	f003 0320 	and.w	r3, r3, #32
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d008      	beq.n	8005d9a <HAL_UART_IRQHandler+0x14e>
 8005d88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d8c:	f003 0320 	and.w	r3, r3, #32
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d002      	beq.n	8005d9a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005d94:	6878      	ldr	r0, [r7, #4]
 8005d96:	f000 fd19 	bl	80067cc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	695b      	ldr	r3, [r3, #20]
 8005da0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	bf14      	ite	ne
 8005da8:	2301      	movne	r3, #1
 8005daa:	2300      	moveq	r3, #0
 8005dac:	b2db      	uxtb	r3, r3
 8005dae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005db6:	f003 0308 	and.w	r3, r3, #8
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d103      	bne.n	8005dc6 <HAL_UART_IRQHandler+0x17a>
 8005dbe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d04f      	beq.n	8005e66 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005dc6:	6878      	ldr	r0, [r7, #4]
 8005dc8:	f000 fc23 	bl	8006612 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	695b      	ldr	r3, [r3, #20]
 8005dd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d041      	beq.n	8005e5e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	3314      	adds	r3, #20
 8005de0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005de4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005de8:	e853 3f00 	ldrex	r3, [r3]
 8005dec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005df0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005df4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005df8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	3314      	adds	r3, #20
 8005e02:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005e06:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005e0a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e0e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005e12:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005e16:	e841 2300 	strex	r3, r2, [r1]
 8005e1a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005e1e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d1d9      	bne.n	8005dda <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d013      	beq.n	8005e56 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e32:	4a7e      	ldr	r2, [pc, #504]	; (800602c <HAL_UART_IRQHandler+0x3e0>)
 8005e34:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	f7fd faf6 	bl	800342c <HAL_DMA_Abort_IT>
 8005e40:	4603      	mov	r3, r0
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d016      	beq.n	8005e74 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e4c:	687a      	ldr	r2, [r7, #4]
 8005e4e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005e50:	4610      	mov	r0, r2
 8005e52:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e54:	e00e      	b.n	8005e74 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f000 f9a5 	bl	80061a6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e5c:	e00a      	b.n	8005e74 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f000 f9a1 	bl	80061a6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e64:	e006      	b.n	8005e74 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f000 f99d 	bl	80061a6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8005e72:	e175      	b.n	8006160 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e74:	bf00      	nop
    return;
 8005e76:	e173      	b.n	8006160 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e7c:	2b01      	cmp	r3, #1
 8005e7e:	f040 814f 	bne.w	8006120 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005e82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e86:	f003 0310 	and.w	r3, r3, #16
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	f000 8148 	beq.w	8006120 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005e90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e94:	f003 0310 	and.w	r3, r3, #16
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	f000 8141 	beq.w	8006120 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	60bb      	str	r3, [r7, #8]
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	60bb      	str	r3, [r7, #8]
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	60bb      	str	r3, [r7, #8]
 8005eb2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	695b      	ldr	r3, [r3, #20]
 8005eba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	f000 80b6 	beq.w	8006030 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	685b      	ldr	r3, [r3, #4]
 8005ecc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005ed0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	f000 8145 	beq.w	8006164 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005ede:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005ee2:	429a      	cmp	r2, r3
 8005ee4:	f080 813e 	bcs.w	8006164 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005eee:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ef4:	699b      	ldr	r3, [r3, #24]
 8005ef6:	2b20      	cmp	r3, #32
 8005ef8:	f000 8088 	beq.w	800600c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	330c      	adds	r3, #12
 8005f02:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f06:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005f0a:	e853 3f00 	ldrex	r3, [r3]
 8005f0e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005f12:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005f16:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f1a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	330c      	adds	r3, #12
 8005f24:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005f28:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005f2c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f30:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005f34:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005f38:	e841 2300 	strex	r3, r2, [r1]
 8005f3c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005f40:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d1d9      	bne.n	8005efc <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	3314      	adds	r3, #20
 8005f4e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f50:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f52:	e853 3f00 	ldrex	r3, [r3]
 8005f56:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005f58:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005f5a:	f023 0301 	bic.w	r3, r3, #1
 8005f5e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	3314      	adds	r3, #20
 8005f68:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005f6c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005f70:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f72:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005f74:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005f78:	e841 2300 	strex	r3, r2, [r1]
 8005f7c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005f7e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d1e1      	bne.n	8005f48 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	3314      	adds	r3, #20
 8005f8a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f8c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f8e:	e853 3f00 	ldrex	r3, [r3]
 8005f92:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005f94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f9a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	3314      	adds	r3, #20
 8005fa4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005fa8:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005faa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fac:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005fae:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005fb0:	e841 2300 	strex	r3, r2, [r1]
 8005fb4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005fb6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d1e3      	bne.n	8005f84 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2220      	movs	r2, #32
 8005fc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	330c      	adds	r3, #12
 8005fd0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fd4:	e853 3f00 	ldrex	r3, [r3]
 8005fd8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005fda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005fdc:	f023 0310 	bic.w	r3, r3, #16
 8005fe0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	330c      	adds	r3, #12
 8005fea:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005fee:	65ba      	str	r2, [r7, #88]	; 0x58
 8005ff0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ff2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005ff4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005ff6:	e841 2300 	strex	r3, r2, [r1]
 8005ffa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005ffc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d1e3      	bne.n	8005fca <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006006:	4618      	mov	r0, r3
 8006008:	f7fd f9d4 	bl	80033b4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2202      	movs	r2, #2
 8006010:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800601a:	b29b      	uxth	r3, r3
 800601c:	1ad3      	subs	r3, r2, r3
 800601e:	b29b      	uxth	r3, r3
 8006020:	4619      	mov	r1, r3
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f7fb fe7c 	bl	8001d20 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006028:	e09c      	b.n	8006164 <HAL_UART_IRQHandler+0x518>
 800602a:	bf00      	nop
 800602c:	080066d7 	.word	0x080066d7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006038:	b29b      	uxth	r3, r3
 800603a:	1ad3      	subs	r3, r2, r3
 800603c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006044:	b29b      	uxth	r3, r3
 8006046:	2b00      	cmp	r3, #0
 8006048:	f000 808e 	beq.w	8006168 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800604c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006050:	2b00      	cmp	r3, #0
 8006052:	f000 8089 	beq.w	8006168 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	330c      	adds	r3, #12
 800605c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800605e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006060:	e853 3f00 	ldrex	r3, [r3]
 8006064:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006066:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006068:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800606c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	330c      	adds	r3, #12
 8006076:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800607a:	647a      	str	r2, [r7, #68]	; 0x44
 800607c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800607e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006080:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006082:	e841 2300 	strex	r3, r2, [r1]
 8006086:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006088:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800608a:	2b00      	cmp	r3, #0
 800608c:	d1e3      	bne.n	8006056 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	3314      	adds	r3, #20
 8006094:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006098:	e853 3f00 	ldrex	r3, [r3]
 800609c:	623b      	str	r3, [r7, #32]
   return(result);
 800609e:	6a3b      	ldr	r3, [r7, #32]
 80060a0:	f023 0301 	bic.w	r3, r3, #1
 80060a4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	3314      	adds	r3, #20
 80060ae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80060b2:	633a      	str	r2, [r7, #48]	; 0x30
 80060b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80060b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060ba:	e841 2300 	strex	r3, r2, [r1]
 80060be:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80060c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d1e3      	bne.n	800608e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2220      	movs	r2, #32
 80060ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2200      	movs	r2, #0
 80060d2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	330c      	adds	r3, #12
 80060da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	e853 3f00 	ldrex	r3, [r3]
 80060e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	f023 0310 	bic.w	r3, r3, #16
 80060ea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	330c      	adds	r3, #12
 80060f4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80060f8:	61fa      	str	r2, [r7, #28]
 80060fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060fc:	69b9      	ldr	r1, [r7, #24]
 80060fe:	69fa      	ldr	r2, [r7, #28]
 8006100:	e841 2300 	strex	r3, r2, [r1]
 8006104:	617b      	str	r3, [r7, #20]
   return(result);
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d1e3      	bne.n	80060d4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2202      	movs	r2, #2
 8006110:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006112:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006116:	4619      	mov	r1, r3
 8006118:	6878      	ldr	r0, [r7, #4]
 800611a:	f7fb fe01 	bl	8001d20 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800611e:	e023      	b.n	8006168 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006120:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006124:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006128:	2b00      	cmp	r3, #0
 800612a:	d009      	beq.n	8006140 <HAL_UART_IRQHandler+0x4f4>
 800612c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006130:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006134:	2b00      	cmp	r3, #0
 8006136:	d003      	beq.n	8006140 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006138:	6878      	ldr	r0, [r7, #4]
 800613a:	f000 fae0 	bl	80066fe <UART_Transmit_IT>
    return;
 800613e:	e014      	b.n	800616a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006140:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006144:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006148:	2b00      	cmp	r3, #0
 800614a:	d00e      	beq.n	800616a <HAL_UART_IRQHandler+0x51e>
 800614c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006150:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006154:	2b00      	cmp	r3, #0
 8006156:	d008      	beq.n	800616a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	f000 fb1f 	bl	800679c <UART_EndTransmit_IT>
    return;
 800615e:	e004      	b.n	800616a <HAL_UART_IRQHandler+0x51e>
    return;
 8006160:	bf00      	nop
 8006162:	e002      	b.n	800616a <HAL_UART_IRQHandler+0x51e>
      return;
 8006164:	bf00      	nop
 8006166:	e000      	b.n	800616a <HAL_UART_IRQHandler+0x51e>
      return;
 8006168:	bf00      	nop
  }
}
 800616a:	37e8      	adds	r7, #232	; 0xe8
 800616c:	46bd      	mov	sp, r7
 800616e:	bd80      	pop	{r7, pc}

08006170 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006170:	b480      	push	{r7}
 8006172:	b083      	sub	sp, #12
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006178:	bf00      	nop
 800617a:	370c      	adds	r7, #12
 800617c:	46bd      	mov	sp, r7
 800617e:	bc80      	pop	{r7}
 8006180:	4770      	bx	lr

08006182 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006182:	b480      	push	{r7}
 8006184:	b083      	sub	sp, #12
 8006186:	af00      	add	r7, sp, #0
 8006188:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800618a:	bf00      	nop
 800618c:	370c      	adds	r7, #12
 800618e:	46bd      	mov	sp, r7
 8006190:	bc80      	pop	{r7}
 8006192:	4770      	bx	lr

08006194 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006194:	b480      	push	{r7}
 8006196:	b083      	sub	sp, #12
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800619c:	bf00      	nop
 800619e:	370c      	adds	r7, #12
 80061a0:	46bd      	mov	sp, r7
 80061a2:	bc80      	pop	{r7}
 80061a4:	4770      	bx	lr

080061a6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80061a6:	b480      	push	{r7}
 80061a8:	b083      	sub	sp, #12
 80061aa:	af00      	add	r7, sp, #0
 80061ac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80061ae:	bf00      	nop
 80061b0:	370c      	adds	r7, #12
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bc80      	pop	{r7}
 80061b6:	4770      	bx	lr

080061b8 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b09c      	sub	sp, #112	; 0x70
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c4:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f003 0320 	and.w	r3, r3, #32
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d172      	bne.n	80062ba <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80061d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061d6:	2200      	movs	r2, #0
 80061d8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80061da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	330c      	adds	r3, #12
 80061e0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061e4:	e853 3f00 	ldrex	r3, [r3]
 80061e8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80061ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80061f0:	66bb      	str	r3, [r7, #104]	; 0x68
 80061f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	330c      	adds	r3, #12
 80061f8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80061fa:	65ba      	str	r2, [r7, #88]	; 0x58
 80061fc:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061fe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006200:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006202:	e841 2300 	strex	r3, r2, [r1]
 8006206:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006208:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800620a:	2b00      	cmp	r3, #0
 800620c:	d1e5      	bne.n	80061da <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800620e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	3314      	adds	r3, #20
 8006214:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006218:	e853 3f00 	ldrex	r3, [r3]
 800621c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800621e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006220:	f023 0301 	bic.w	r3, r3, #1
 8006224:	667b      	str	r3, [r7, #100]	; 0x64
 8006226:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	3314      	adds	r3, #20
 800622c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800622e:	647a      	str	r2, [r7, #68]	; 0x44
 8006230:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006232:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006234:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006236:	e841 2300 	strex	r3, r2, [r1]
 800623a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800623c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800623e:	2b00      	cmp	r3, #0
 8006240:	d1e5      	bne.n	800620e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006242:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	3314      	adds	r3, #20
 8006248:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800624a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800624c:	e853 3f00 	ldrex	r3, [r3]
 8006250:	623b      	str	r3, [r7, #32]
   return(result);
 8006252:	6a3b      	ldr	r3, [r7, #32]
 8006254:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006258:	663b      	str	r3, [r7, #96]	; 0x60
 800625a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	3314      	adds	r3, #20
 8006260:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006262:	633a      	str	r2, [r7, #48]	; 0x30
 8006264:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006266:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006268:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800626a:	e841 2300 	strex	r3, r2, [r1]
 800626e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006272:	2b00      	cmp	r3, #0
 8006274:	d1e5      	bne.n	8006242 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006276:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006278:	2220      	movs	r2, #32
 800627a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800627e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006282:	2b01      	cmp	r3, #1
 8006284:	d119      	bne.n	80062ba <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006286:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	330c      	adds	r3, #12
 800628c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800628e:	693b      	ldr	r3, [r7, #16]
 8006290:	e853 3f00 	ldrex	r3, [r3]
 8006294:	60fb      	str	r3, [r7, #12]
   return(result);
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	f023 0310 	bic.w	r3, r3, #16
 800629c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800629e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	330c      	adds	r3, #12
 80062a4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80062a6:	61fa      	str	r2, [r7, #28]
 80062a8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062aa:	69b9      	ldr	r1, [r7, #24]
 80062ac:	69fa      	ldr	r2, [r7, #28]
 80062ae:	e841 2300 	strex	r3, r2, [r1]
 80062b2:	617b      	str	r3, [r7, #20]
   return(result);
 80062b4:	697b      	ldr	r3, [r7, #20]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d1e5      	bne.n	8006286 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80062ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062bc:	2200      	movs	r2, #0
 80062be:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062c4:	2b01      	cmp	r3, #1
 80062c6:	d106      	bne.n	80062d6 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80062c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062ca:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80062cc:	4619      	mov	r1, r3
 80062ce:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80062d0:	f7fb fd26 	bl	8001d20 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80062d4:	e002      	b.n	80062dc <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80062d6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80062d8:	f7ff ff53 	bl	8006182 <HAL_UART_RxCpltCallback>
}
 80062dc:	bf00      	nop
 80062de:	3770      	adds	r7, #112	; 0x70
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bd80      	pop	{r7, pc}

080062e4 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b084      	sub	sp, #16
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062f0:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	2201      	movs	r2, #1
 80062f6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062fc:	2b01      	cmp	r3, #1
 80062fe:	d108      	bne.n	8006312 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006304:	085b      	lsrs	r3, r3, #1
 8006306:	b29b      	uxth	r3, r3
 8006308:	4619      	mov	r1, r3
 800630a:	68f8      	ldr	r0, [r7, #12]
 800630c:	f7fb fd08 	bl	8001d20 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006310:	e002      	b.n	8006318 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8006312:	68f8      	ldr	r0, [r7, #12]
 8006314:	f7ff ff3e 	bl	8006194 <HAL_UART_RxHalfCpltCallback>
}
 8006318:	bf00      	nop
 800631a:	3710      	adds	r7, #16
 800631c:	46bd      	mov	sp, r7
 800631e:	bd80      	pop	{r7, pc}

08006320 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b084      	sub	sp, #16
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006328:	2300      	movs	r3, #0
 800632a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006330:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	695b      	ldr	r3, [r3, #20]
 8006338:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800633c:	2b00      	cmp	r3, #0
 800633e:	bf14      	ite	ne
 8006340:	2301      	movne	r3, #1
 8006342:	2300      	moveq	r3, #0
 8006344:	b2db      	uxtb	r3, r3
 8006346:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800634e:	b2db      	uxtb	r3, r3
 8006350:	2b21      	cmp	r3, #33	; 0x21
 8006352:	d108      	bne.n	8006366 <UART_DMAError+0x46>
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d005      	beq.n	8006366 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	2200      	movs	r2, #0
 800635e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006360:	68b8      	ldr	r0, [r7, #8]
 8006362:	f000 f92f 	bl	80065c4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	695b      	ldr	r3, [r3, #20]
 800636c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006370:	2b00      	cmp	r3, #0
 8006372:	bf14      	ite	ne
 8006374:	2301      	movne	r3, #1
 8006376:	2300      	moveq	r3, #0
 8006378:	b2db      	uxtb	r3, r3
 800637a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006382:	b2db      	uxtb	r3, r3
 8006384:	2b22      	cmp	r3, #34	; 0x22
 8006386:	d108      	bne.n	800639a <UART_DMAError+0x7a>
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d005      	beq.n	800639a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	2200      	movs	r2, #0
 8006392:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006394:	68b8      	ldr	r0, [r7, #8]
 8006396:	f000 f93c 	bl	8006612 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800639e:	f043 0210 	orr.w	r2, r3, #16
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80063a6:	68b8      	ldr	r0, [r7, #8]
 80063a8:	f7ff fefd 	bl	80061a6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80063ac:	bf00      	nop
 80063ae:	3710      	adds	r7, #16
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bd80      	pop	{r7, pc}

080063b4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b090      	sub	sp, #64	; 0x40
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	60f8      	str	r0, [r7, #12]
 80063bc:	60b9      	str	r1, [r7, #8]
 80063be:	603b      	str	r3, [r7, #0]
 80063c0:	4613      	mov	r3, r2
 80063c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063c4:	e050      	b.n	8006468 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063cc:	d04c      	beq.n	8006468 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80063ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d007      	beq.n	80063e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80063d4:	f7fc fbe6 	bl	8002ba4 <HAL_GetTick>
 80063d8:	4602      	mov	r2, r0
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	1ad3      	subs	r3, r2, r3
 80063de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80063e0:	429a      	cmp	r2, r3
 80063e2:	d241      	bcs.n	8006468 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	330c      	adds	r3, #12
 80063ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ee:	e853 3f00 	ldrex	r3, [r3]
 80063f2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80063f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80063fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	330c      	adds	r3, #12
 8006402:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006404:	637a      	str	r2, [r7, #52]	; 0x34
 8006406:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006408:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800640a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800640c:	e841 2300 	strex	r3, r2, [r1]
 8006410:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006414:	2b00      	cmp	r3, #0
 8006416:	d1e5      	bne.n	80063e4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	3314      	adds	r3, #20
 800641e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006420:	697b      	ldr	r3, [r7, #20]
 8006422:	e853 3f00 	ldrex	r3, [r3]
 8006426:	613b      	str	r3, [r7, #16]
   return(result);
 8006428:	693b      	ldr	r3, [r7, #16]
 800642a:	f023 0301 	bic.w	r3, r3, #1
 800642e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	3314      	adds	r3, #20
 8006436:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006438:	623a      	str	r2, [r7, #32]
 800643a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800643c:	69f9      	ldr	r1, [r7, #28]
 800643e:	6a3a      	ldr	r2, [r7, #32]
 8006440:	e841 2300 	strex	r3, r2, [r1]
 8006444:	61bb      	str	r3, [r7, #24]
   return(result);
 8006446:	69bb      	ldr	r3, [r7, #24]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d1e5      	bne.n	8006418 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2220      	movs	r2, #32
 8006450:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	2220      	movs	r2, #32
 8006458:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	2200      	movs	r2, #0
 8006460:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8006464:	2303      	movs	r3, #3
 8006466:	e00f      	b.n	8006488 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	681a      	ldr	r2, [r3, #0]
 800646e:	68bb      	ldr	r3, [r7, #8]
 8006470:	4013      	ands	r3, r2
 8006472:	68ba      	ldr	r2, [r7, #8]
 8006474:	429a      	cmp	r2, r3
 8006476:	bf0c      	ite	eq
 8006478:	2301      	moveq	r3, #1
 800647a:	2300      	movne	r3, #0
 800647c:	b2db      	uxtb	r3, r3
 800647e:	461a      	mov	r2, r3
 8006480:	79fb      	ldrb	r3, [r7, #7]
 8006482:	429a      	cmp	r2, r3
 8006484:	d09f      	beq.n	80063c6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006486:	2300      	movs	r3, #0
}
 8006488:	4618      	mov	r0, r3
 800648a:	3740      	adds	r7, #64	; 0x40
 800648c:	46bd      	mov	sp, r7
 800648e:	bd80      	pop	{r7, pc}

08006490 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b098      	sub	sp, #96	; 0x60
 8006494:	af00      	add	r7, sp, #0
 8006496:	60f8      	str	r0, [r7, #12]
 8006498:	60b9      	str	r1, [r7, #8]
 800649a:	4613      	mov	r3, r2
 800649c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800649e:	68ba      	ldr	r2, [r7, #8]
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	88fa      	ldrh	r2, [r7, #6]
 80064a8:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	2200      	movs	r2, #0
 80064ae:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	2222      	movs	r2, #34	; 0x22
 80064b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064bc:	4a3e      	ldr	r2, [pc, #248]	; (80065b8 <UART_Start_Receive_DMA+0x128>)
 80064be:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064c4:	4a3d      	ldr	r2, [pc, #244]	; (80065bc <UART_Start_Receive_DMA+0x12c>)
 80064c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064cc:	4a3c      	ldr	r2, [pc, #240]	; (80065c0 <UART_Start_Receive_DMA+0x130>)
 80064ce:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064d4:	2200      	movs	r2, #0
 80064d6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80064d8:	f107 0308 	add.w	r3, r7, #8
 80064dc:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	3304      	adds	r3, #4
 80064e8:	4619      	mov	r1, r3
 80064ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80064ec:	681a      	ldr	r2, [r3, #0]
 80064ee:	88fb      	ldrh	r3, [r7, #6]
 80064f0:	f7fc ff00 	bl	80032f4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80064f4:	2300      	movs	r3, #0
 80064f6:	613b      	str	r3, [r7, #16]
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	613b      	str	r3, [r7, #16]
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	685b      	ldr	r3, [r3, #4]
 8006506:	613b      	str	r3, [r7, #16]
 8006508:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	691b      	ldr	r3, [r3, #16]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d019      	beq.n	8006546 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	330c      	adds	r3, #12
 8006518:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800651a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800651c:	e853 3f00 	ldrex	r3, [r3]
 8006520:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006522:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006524:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006528:	65bb      	str	r3, [r7, #88]	; 0x58
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	330c      	adds	r3, #12
 8006530:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006532:	64fa      	str	r2, [r7, #76]	; 0x4c
 8006534:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006536:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006538:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800653a:	e841 2300 	strex	r3, r2, [r1]
 800653e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006540:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006542:	2b00      	cmp	r3, #0
 8006544:	d1e5      	bne.n	8006512 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	3314      	adds	r3, #20
 800654c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800654e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006550:	e853 3f00 	ldrex	r3, [r3]
 8006554:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006558:	f043 0301 	orr.w	r3, r3, #1
 800655c:	657b      	str	r3, [r7, #84]	; 0x54
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	3314      	adds	r3, #20
 8006564:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006566:	63ba      	str	r2, [r7, #56]	; 0x38
 8006568:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800656a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800656c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800656e:	e841 2300 	strex	r3, r2, [r1]
 8006572:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006576:	2b00      	cmp	r3, #0
 8006578:	d1e5      	bne.n	8006546 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	3314      	adds	r3, #20
 8006580:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006582:	69bb      	ldr	r3, [r7, #24]
 8006584:	e853 3f00 	ldrex	r3, [r3]
 8006588:	617b      	str	r3, [r7, #20]
   return(result);
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006590:	653b      	str	r3, [r7, #80]	; 0x50
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	3314      	adds	r3, #20
 8006598:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800659a:	627a      	str	r2, [r7, #36]	; 0x24
 800659c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800659e:	6a39      	ldr	r1, [r7, #32]
 80065a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065a2:	e841 2300 	strex	r3, r2, [r1]
 80065a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80065a8:	69fb      	ldr	r3, [r7, #28]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d1e5      	bne.n	800657a <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80065ae:	2300      	movs	r3, #0
}
 80065b0:	4618      	mov	r0, r3
 80065b2:	3760      	adds	r7, #96	; 0x60
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bd80      	pop	{r7, pc}
 80065b8:	080061b9 	.word	0x080061b9
 80065bc:	080062e5 	.word	0x080062e5
 80065c0:	08006321 	.word	0x08006321

080065c4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80065c4:	b480      	push	{r7}
 80065c6:	b089      	sub	sp, #36	; 0x24
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	330c      	adds	r3, #12
 80065d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	e853 3f00 	ldrex	r3, [r3]
 80065da:	60bb      	str	r3, [r7, #8]
   return(result);
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80065e2:	61fb      	str	r3, [r7, #28]
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	330c      	adds	r3, #12
 80065ea:	69fa      	ldr	r2, [r7, #28]
 80065ec:	61ba      	str	r2, [r7, #24]
 80065ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065f0:	6979      	ldr	r1, [r7, #20]
 80065f2:	69ba      	ldr	r2, [r7, #24]
 80065f4:	e841 2300 	strex	r3, r2, [r1]
 80065f8:	613b      	str	r3, [r7, #16]
   return(result);
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d1e5      	bne.n	80065cc <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2220      	movs	r2, #32
 8006604:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8006608:	bf00      	nop
 800660a:	3724      	adds	r7, #36	; 0x24
 800660c:	46bd      	mov	sp, r7
 800660e:	bc80      	pop	{r7}
 8006610:	4770      	bx	lr

08006612 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006612:	b480      	push	{r7}
 8006614:	b095      	sub	sp, #84	; 0x54
 8006616:	af00      	add	r7, sp, #0
 8006618:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	330c      	adds	r3, #12
 8006620:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006622:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006624:	e853 3f00 	ldrex	r3, [r3]
 8006628:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800662a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800662c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006630:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	330c      	adds	r3, #12
 8006638:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800663a:	643a      	str	r2, [r7, #64]	; 0x40
 800663c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800663e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006640:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006642:	e841 2300 	strex	r3, r2, [r1]
 8006646:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800664a:	2b00      	cmp	r3, #0
 800664c:	d1e5      	bne.n	800661a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	3314      	adds	r3, #20
 8006654:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006656:	6a3b      	ldr	r3, [r7, #32]
 8006658:	e853 3f00 	ldrex	r3, [r3]
 800665c:	61fb      	str	r3, [r7, #28]
   return(result);
 800665e:	69fb      	ldr	r3, [r7, #28]
 8006660:	f023 0301 	bic.w	r3, r3, #1
 8006664:	64bb      	str	r3, [r7, #72]	; 0x48
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	3314      	adds	r3, #20
 800666c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800666e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006670:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006672:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006674:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006676:	e841 2300 	strex	r3, r2, [r1]
 800667a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800667c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800667e:	2b00      	cmp	r3, #0
 8006680:	d1e5      	bne.n	800664e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006686:	2b01      	cmp	r3, #1
 8006688:	d119      	bne.n	80066be <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	330c      	adds	r3, #12
 8006690:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	e853 3f00 	ldrex	r3, [r3]
 8006698:	60bb      	str	r3, [r7, #8]
   return(result);
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	f023 0310 	bic.w	r3, r3, #16
 80066a0:	647b      	str	r3, [r7, #68]	; 0x44
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	330c      	adds	r3, #12
 80066a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80066aa:	61ba      	str	r2, [r7, #24]
 80066ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ae:	6979      	ldr	r1, [r7, #20]
 80066b0:	69ba      	ldr	r2, [r7, #24]
 80066b2:	e841 2300 	strex	r3, r2, [r1]
 80066b6:	613b      	str	r3, [r7, #16]
   return(result);
 80066b8:	693b      	ldr	r3, [r7, #16]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d1e5      	bne.n	800668a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2220      	movs	r2, #32
 80066c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2200      	movs	r2, #0
 80066ca:	631a      	str	r2, [r3, #48]	; 0x30
}
 80066cc:	bf00      	nop
 80066ce:	3754      	adds	r7, #84	; 0x54
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bc80      	pop	{r7}
 80066d4:	4770      	bx	lr

080066d6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80066d6:	b580      	push	{r7, lr}
 80066d8:	b084      	sub	sp, #16
 80066da:	af00      	add	r7, sp, #0
 80066dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066e2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	2200      	movs	r2, #0
 80066e8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	2200      	movs	r2, #0
 80066ee:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80066f0:	68f8      	ldr	r0, [r7, #12]
 80066f2:	f7ff fd58 	bl	80061a6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80066f6:	bf00      	nop
 80066f8:	3710      	adds	r7, #16
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bd80      	pop	{r7, pc}

080066fe <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80066fe:	b480      	push	{r7}
 8006700:	b085      	sub	sp, #20
 8006702:	af00      	add	r7, sp, #0
 8006704:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800670c:	b2db      	uxtb	r3, r3
 800670e:	2b21      	cmp	r3, #33	; 0x21
 8006710:	d13e      	bne.n	8006790 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	689b      	ldr	r3, [r3, #8]
 8006716:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800671a:	d114      	bne.n	8006746 <UART_Transmit_IT+0x48>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	691b      	ldr	r3, [r3, #16]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d110      	bne.n	8006746 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6a1b      	ldr	r3, [r3, #32]
 8006728:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	881b      	ldrh	r3, [r3, #0]
 800672e:	461a      	mov	r2, r3
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006738:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6a1b      	ldr	r3, [r3, #32]
 800673e:	1c9a      	adds	r2, r3, #2
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	621a      	str	r2, [r3, #32]
 8006744:	e008      	b.n	8006758 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6a1b      	ldr	r3, [r3, #32]
 800674a:	1c59      	adds	r1, r3, #1
 800674c:	687a      	ldr	r2, [r7, #4]
 800674e:	6211      	str	r1, [r2, #32]
 8006750:	781a      	ldrb	r2, [r3, #0]
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800675c:	b29b      	uxth	r3, r3
 800675e:	3b01      	subs	r3, #1
 8006760:	b29b      	uxth	r3, r3
 8006762:	687a      	ldr	r2, [r7, #4]
 8006764:	4619      	mov	r1, r3
 8006766:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006768:	2b00      	cmp	r3, #0
 800676a:	d10f      	bne.n	800678c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	68da      	ldr	r2, [r3, #12]
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800677a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	68da      	ldr	r2, [r3, #12]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800678a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800678c:	2300      	movs	r3, #0
 800678e:	e000      	b.n	8006792 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006790:	2302      	movs	r3, #2
  }
}
 8006792:	4618      	mov	r0, r3
 8006794:	3714      	adds	r7, #20
 8006796:	46bd      	mov	sp, r7
 8006798:	bc80      	pop	{r7}
 800679a:	4770      	bx	lr

0800679c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b082      	sub	sp, #8
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	68da      	ldr	r2, [r3, #12]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067b2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2220      	movs	r2, #32
 80067b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80067bc:	6878      	ldr	r0, [r7, #4]
 80067be:	f7ff fcd7 	bl	8006170 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80067c2:	2300      	movs	r3, #0
}
 80067c4:	4618      	mov	r0, r3
 80067c6:	3708      	adds	r7, #8
 80067c8:	46bd      	mov	sp, r7
 80067ca:	bd80      	pop	{r7, pc}

080067cc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b08c      	sub	sp, #48	; 0x30
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80067da:	b2db      	uxtb	r3, r3
 80067dc:	2b22      	cmp	r3, #34	; 0x22
 80067de:	f040 80ae 	bne.w	800693e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	689b      	ldr	r3, [r3, #8]
 80067e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067ea:	d117      	bne.n	800681c <UART_Receive_IT+0x50>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	691b      	ldr	r3, [r3, #16]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d113      	bne.n	800681c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80067f4:	2300      	movs	r3, #0
 80067f6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067fc:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	685b      	ldr	r3, [r3, #4]
 8006804:	b29b      	uxth	r3, r3
 8006806:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800680a:	b29a      	uxth	r2, r3
 800680c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800680e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006814:	1c9a      	adds	r2, r3, #2
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	629a      	str	r2, [r3, #40]	; 0x28
 800681a:	e026      	b.n	800686a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006820:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006822:	2300      	movs	r3, #0
 8006824:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	689b      	ldr	r3, [r3, #8]
 800682a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800682e:	d007      	beq.n	8006840 <UART_Receive_IT+0x74>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	689b      	ldr	r3, [r3, #8]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d10a      	bne.n	800684e <UART_Receive_IT+0x82>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	691b      	ldr	r3, [r3, #16]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d106      	bne.n	800684e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	685b      	ldr	r3, [r3, #4]
 8006846:	b2da      	uxtb	r2, r3
 8006848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800684a:	701a      	strb	r2, [r3, #0]
 800684c:	e008      	b.n	8006860 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	685b      	ldr	r3, [r3, #4]
 8006854:	b2db      	uxtb	r3, r3
 8006856:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800685a:	b2da      	uxtb	r2, r3
 800685c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800685e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006864:	1c5a      	adds	r2, r3, #1
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800686e:	b29b      	uxth	r3, r3
 8006870:	3b01      	subs	r3, #1
 8006872:	b29b      	uxth	r3, r3
 8006874:	687a      	ldr	r2, [r7, #4]
 8006876:	4619      	mov	r1, r3
 8006878:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800687a:	2b00      	cmp	r3, #0
 800687c:	d15d      	bne.n	800693a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	68da      	ldr	r2, [r3, #12]
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f022 0220 	bic.w	r2, r2, #32
 800688c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	68da      	ldr	r2, [r3, #12]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800689c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	695a      	ldr	r2, [r3, #20]
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f022 0201 	bic.w	r2, r2, #1
 80068ac:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2220      	movs	r2, #32
 80068b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2200      	movs	r2, #0
 80068ba:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068c0:	2b01      	cmp	r3, #1
 80068c2:	d135      	bne.n	8006930 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2200      	movs	r2, #0
 80068c8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	330c      	adds	r3, #12
 80068d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068d2:	697b      	ldr	r3, [r7, #20]
 80068d4:	e853 3f00 	ldrex	r3, [r3]
 80068d8:	613b      	str	r3, [r7, #16]
   return(result);
 80068da:	693b      	ldr	r3, [r7, #16]
 80068dc:	f023 0310 	bic.w	r3, r3, #16
 80068e0:	627b      	str	r3, [r7, #36]	; 0x24
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	330c      	adds	r3, #12
 80068e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068ea:	623a      	str	r2, [r7, #32]
 80068ec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ee:	69f9      	ldr	r1, [r7, #28]
 80068f0:	6a3a      	ldr	r2, [r7, #32]
 80068f2:	e841 2300 	strex	r3, r2, [r1]
 80068f6:	61bb      	str	r3, [r7, #24]
   return(result);
 80068f8:	69bb      	ldr	r3, [r7, #24]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d1e5      	bne.n	80068ca <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f003 0310 	and.w	r3, r3, #16
 8006908:	2b10      	cmp	r3, #16
 800690a:	d10a      	bne.n	8006922 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800690c:	2300      	movs	r3, #0
 800690e:	60fb      	str	r3, [r7, #12]
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	60fb      	str	r3, [r7, #12]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	685b      	ldr	r3, [r3, #4]
 800691e:	60fb      	str	r3, [r7, #12]
 8006920:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006926:	4619      	mov	r1, r3
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	f7fb f9f9 	bl	8001d20 <HAL_UARTEx_RxEventCallback>
 800692e:	e002      	b.n	8006936 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006930:	6878      	ldr	r0, [r7, #4]
 8006932:	f7ff fc26 	bl	8006182 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006936:	2300      	movs	r3, #0
 8006938:	e002      	b.n	8006940 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800693a:	2300      	movs	r3, #0
 800693c:	e000      	b.n	8006940 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800693e:	2302      	movs	r3, #2
  }
}
 8006940:	4618      	mov	r0, r3
 8006942:	3730      	adds	r7, #48	; 0x30
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}

08006948 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b084      	sub	sp, #16
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	691b      	ldr	r3, [r3, #16]
 8006956:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	68da      	ldr	r2, [r3, #12]
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	430a      	orrs	r2, r1
 8006964:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	689a      	ldr	r2, [r3, #8]
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	691b      	ldr	r3, [r3, #16]
 800696e:	431a      	orrs	r2, r3
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	695b      	ldr	r3, [r3, #20]
 8006974:	4313      	orrs	r3, r2
 8006976:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	68db      	ldr	r3, [r3, #12]
 800697e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006982:	f023 030c 	bic.w	r3, r3, #12
 8006986:	687a      	ldr	r2, [r7, #4]
 8006988:	6812      	ldr	r2, [r2, #0]
 800698a:	68b9      	ldr	r1, [r7, #8]
 800698c:	430b      	orrs	r3, r1
 800698e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	695b      	ldr	r3, [r3, #20]
 8006996:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	699a      	ldr	r2, [r3, #24]
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	430a      	orrs	r2, r1
 80069a4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4a2c      	ldr	r2, [pc, #176]	; (8006a5c <UART_SetConfig+0x114>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d103      	bne.n	80069b8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80069b0:	f7fe fcc8 	bl	8005344 <HAL_RCC_GetPCLK2Freq>
 80069b4:	60f8      	str	r0, [r7, #12]
 80069b6:	e002      	b.n	80069be <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80069b8:	f7fe fcb0 	bl	800531c <HAL_RCC_GetPCLK1Freq>
 80069bc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80069be:	68fa      	ldr	r2, [r7, #12]
 80069c0:	4613      	mov	r3, r2
 80069c2:	009b      	lsls	r3, r3, #2
 80069c4:	4413      	add	r3, r2
 80069c6:	009a      	lsls	r2, r3, #2
 80069c8:	441a      	add	r2, r3
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	009b      	lsls	r3, r3, #2
 80069d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80069d4:	4a22      	ldr	r2, [pc, #136]	; (8006a60 <UART_SetConfig+0x118>)
 80069d6:	fba2 2303 	umull	r2, r3, r2, r3
 80069da:	095b      	lsrs	r3, r3, #5
 80069dc:	0119      	lsls	r1, r3, #4
 80069de:	68fa      	ldr	r2, [r7, #12]
 80069e0:	4613      	mov	r3, r2
 80069e2:	009b      	lsls	r3, r3, #2
 80069e4:	4413      	add	r3, r2
 80069e6:	009a      	lsls	r2, r3, #2
 80069e8:	441a      	add	r2, r3
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	685b      	ldr	r3, [r3, #4]
 80069ee:	009b      	lsls	r3, r3, #2
 80069f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80069f4:	4b1a      	ldr	r3, [pc, #104]	; (8006a60 <UART_SetConfig+0x118>)
 80069f6:	fba3 0302 	umull	r0, r3, r3, r2
 80069fa:	095b      	lsrs	r3, r3, #5
 80069fc:	2064      	movs	r0, #100	; 0x64
 80069fe:	fb00 f303 	mul.w	r3, r0, r3
 8006a02:	1ad3      	subs	r3, r2, r3
 8006a04:	011b      	lsls	r3, r3, #4
 8006a06:	3332      	adds	r3, #50	; 0x32
 8006a08:	4a15      	ldr	r2, [pc, #84]	; (8006a60 <UART_SetConfig+0x118>)
 8006a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8006a0e:	095b      	lsrs	r3, r3, #5
 8006a10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006a14:	4419      	add	r1, r3
 8006a16:	68fa      	ldr	r2, [r7, #12]
 8006a18:	4613      	mov	r3, r2
 8006a1a:	009b      	lsls	r3, r3, #2
 8006a1c:	4413      	add	r3, r2
 8006a1e:	009a      	lsls	r2, r3, #2
 8006a20:	441a      	add	r2, r3
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	685b      	ldr	r3, [r3, #4]
 8006a26:	009b      	lsls	r3, r3, #2
 8006a28:	fbb2 f2f3 	udiv	r2, r2, r3
 8006a2c:	4b0c      	ldr	r3, [pc, #48]	; (8006a60 <UART_SetConfig+0x118>)
 8006a2e:	fba3 0302 	umull	r0, r3, r3, r2
 8006a32:	095b      	lsrs	r3, r3, #5
 8006a34:	2064      	movs	r0, #100	; 0x64
 8006a36:	fb00 f303 	mul.w	r3, r0, r3
 8006a3a:	1ad3      	subs	r3, r2, r3
 8006a3c:	011b      	lsls	r3, r3, #4
 8006a3e:	3332      	adds	r3, #50	; 0x32
 8006a40:	4a07      	ldr	r2, [pc, #28]	; (8006a60 <UART_SetConfig+0x118>)
 8006a42:	fba2 2303 	umull	r2, r3, r2, r3
 8006a46:	095b      	lsrs	r3, r3, #5
 8006a48:	f003 020f 	and.w	r2, r3, #15
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	440a      	add	r2, r1
 8006a52:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006a54:	bf00      	nop
 8006a56:	3710      	adds	r7, #16
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	bd80      	pop	{r7, pc}
 8006a5c:	40013800 	.word	0x40013800
 8006a60:	51eb851f 	.word	0x51eb851f

08006a64 <atoi>:
 8006a64:	220a      	movs	r2, #10
 8006a66:	2100      	movs	r1, #0
 8006a68:	f000 ba26 	b.w	8006eb8 <strtol>

08006a6c <__errno>:
 8006a6c:	4b01      	ldr	r3, [pc, #4]	; (8006a74 <__errno+0x8>)
 8006a6e:	6818      	ldr	r0, [r3, #0]
 8006a70:	4770      	bx	lr
 8006a72:	bf00      	nop
 8006a74:	200000b8 	.word	0x200000b8

08006a78 <__libc_init_array>:
 8006a78:	b570      	push	{r4, r5, r6, lr}
 8006a7a:	2600      	movs	r6, #0
 8006a7c:	4d0c      	ldr	r5, [pc, #48]	; (8006ab0 <__libc_init_array+0x38>)
 8006a7e:	4c0d      	ldr	r4, [pc, #52]	; (8006ab4 <__libc_init_array+0x3c>)
 8006a80:	1b64      	subs	r4, r4, r5
 8006a82:	10a4      	asrs	r4, r4, #2
 8006a84:	42a6      	cmp	r6, r4
 8006a86:	d109      	bne.n	8006a9c <__libc_init_array+0x24>
 8006a88:	f001 fadc 	bl	8008044 <_init>
 8006a8c:	2600      	movs	r6, #0
 8006a8e:	4d0a      	ldr	r5, [pc, #40]	; (8006ab8 <__libc_init_array+0x40>)
 8006a90:	4c0a      	ldr	r4, [pc, #40]	; (8006abc <__libc_init_array+0x44>)
 8006a92:	1b64      	subs	r4, r4, r5
 8006a94:	10a4      	asrs	r4, r4, #2
 8006a96:	42a6      	cmp	r6, r4
 8006a98:	d105      	bne.n	8006aa6 <__libc_init_array+0x2e>
 8006a9a:	bd70      	pop	{r4, r5, r6, pc}
 8006a9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006aa0:	4798      	blx	r3
 8006aa2:	3601      	adds	r6, #1
 8006aa4:	e7ee      	b.n	8006a84 <__libc_init_array+0xc>
 8006aa6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006aaa:	4798      	blx	r3
 8006aac:	3601      	adds	r6, #1
 8006aae:	e7f2      	b.n	8006a96 <__libc_init_array+0x1e>
 8006ab0:	080089f4 	.word	0x080089f4
 8006ab4:	080089f4 	.word	0x080089f4
 8006ab8:	080089f4 	.word	0x080089f4
 8006abc:	080089f8 	.word	0x080089f8

08006ac0 <malloc>:
 8006ac0:	4b02      	ldr	r3, [pc, #8]	; (8006acc <malloc+0xc>)
 8006ac2:	4601      	mov	r1, r0
 8006ac4:	6818      	ldr	r0, [r3, #0]
 8006ac6:	f000 b899 	b.w	8006bfc <_malloc_r>
 8006aca:	bf00      	nop
 8006acc:	200000b8 	.word	0x200000b8

08006ad0 <free>:
 8006ad0:	4b02      	ldr	r3, [pc, #8]	; (8006adc <free+0xc>)
 8006ad2:	4601      	mov	r1, r0
 8006ad4:	6818      	ldr	r0, [r3, #0]
 8006ad6:	f000 b829 	b.w	8006b2c <_free_r>
 8006ada:	bf00      	nop
 8006adc:	200000b8 	.word	0x200000b8

08006ae0 <memcmp>:
 8006ae0:	b510      	push	{r4, lr}
 8006ae2:	3901      	subs	r1, #1
 8006ae4:	4402      	add	r2, r0
 8006ae6:	4290      	cmp	r0, r2
 8006ae8:	d101      	bne.n	8006aee <memcmp+0xe>
 8006aea:	2000      	movs	r0, #0
 8006aec:	e005      	b.n	8006afa <memcmp+0x1a>
 8006aee:	7803      	ldrb	r3, [r0, #0]
 8006af0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006af4:	42a3      	cmp	r3, r4
 8006af6:	d001      	beq.n	8006afc <memcmp+0x1c>
 8006af8:	1b18      	subs	r0, r3, r4
 8006afa:	bd10      	pop	{r4, pc}
 8006afc:	3001      	adds	r0, #1
 8006afe:	e7f2      	b.n	8006ae6 <memcmp+0x6>

08006b00 <memcpy>:
 8006b00:	440a      	add	r2, r1
 8006b02:	4291      	cmp	r1, r2
 8006b04:	f100 33ff 	add.w	r3, r0, #4294967295
 8006b08:	d100      	bne.n	8006b0c <memcpy+0xc>
 8006b0a:	4770      	bx	lr
 8006b0c:	b510      	push	{r4, lr}
 8006b0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b12:	4291      	cmp	r1, r2
 8006b14:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006b18:	d1f9      	bne.n	8006b0e <memcpy+0xe>
 8006b1a:	bd10      	pop	{r4, pc}

08006b1c <memset>:
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	4402      	add	r2, r0
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d100      	bne.n	8006b26 <memset+0xa>
 8006b24:	4770      	bx	lr
 8006b26:	f803 1b01 	strb.w	r1, [r3], #1
 8006b2a:	e7f9      	b.n	8006b20 <memset+0x4>

08006b2c <_free_r>:
 8006b2c:	b538      	push	{r3, r4, r5, lr}
 8006b2e:	4605      	mov	r5, r0
 8006b30:	2900      	cmp	r1, #0
 8006b32:	d040      	beq.n	8006bb6 <_free_r+0x8a>
 8006b34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b38:	1f0c      	subs	r4, r1, #4
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	bfb8      	it	lt
 8006b3e:	18e4      	addlt	r4, r4, r3
 8006b40:	f000 f9f8 	bl	8006f34 <__malloc_lock>
 8006b44:	4a1c      	ldr	r2, [pc, #112]	; (8006bb8 <_free_r+0x8c>)
 8006b46:	6813      	ldr	r3, [r2, #0]
 8006b48:	b933      	cbnz	r3, 8006b58 <_free_r+0x2c>
 8006b4a:	6063      	str	r3, [r4, #4]
 8006b4c:	6014      	str	r4, [r2, #0]
 8006b4e:	4628      	mov	r0, r5
 8006b50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006b54:	f000 b9f4 	b.w	8006f40 <__malloc_unlock>
 8006b58:	42a3      	cmp	r3, r4
 8006b5a:	d908      	bls.n	8006b6e <_free_r+0x42>
 8006b5c:	6820      	ldr	r0, [r4, #0]
 8006b5e:	1821      	adds	r1, r4, r0
 8006b60:	428b      	cmp	r3, r1
 8006b62:	bf01      	itttt	eq
 8006b64:	6819      	ldreq	r1, [r3, #0]
 8006b66:	685b      	ldreq	r3, [r3, #4]
 8006b68:	1809      	addeq	r1, r1, r0
 8006b6a:	6021      	streq	r1, [r4, #0]
 8006b6c:	e7ed      	b.n	8006b4a <_free_r+0x1e>
 8006b6e:	461a      	mov	r2, r3
 8006b70:	685b      	ldr	r3, [r3, #4]
 8006b72:	b10b      	cbz	r3, 8006b78 <_free_r+0x4c>
 8006b74:	42a3      	cmp	r3, r4
 8006b76:	d9fa      	bls.n	8006b6e <_free_r+0x42>
 8006b78:	6811      	ldr	r1, [r2, #0]
 8006b7a:	1850      	adds	r0, r2, r1
 8006b7c:	42a0      	cmp	r0, r4
 8006b7e:	d10b      	bne.n	8006b98 <_free_r+0x6c>
 8006b80:	6820      	ldr	r0, [r4, #0]
 8006b82:	4401      	add	r1, r0
 8006b84:	1850      	adds	r0, r2, r1
 8006b86:	4283      	cmp	r3, r0
 8006b88:	6011      	str	r1, [r2, #0]
 8006b8a:	d1e0      	bne.n	8006b4e <_free_r+0x22>
 8006b8c:	6818      	ldr	r0, [r3, #0]
 8006b8e:	685b      	ldr	r3, [r3, #4]
 8006b90:	4401      	add	r1, r0
 8006b92:	6011      	str	r1, [r2, #0]
 8006b94:	6053      	str	r3, [r2, #4]
 8006b96:	e7da      	b.n	8006b4e <_free_r+0x22>
 8006b98:	d902      	bls.n	8006ba0 <_free_r+0x74>
 8006b9a:	230c      	movs	r3, #12
 8006b9c:	602b      	str	r3, [r5, #0]
 8006b9e:	e7d6      	b.n	8006b4e <_free_r+0x22>
 8006ba0:	6820      	ldr	r0, [r4, #0]
 8006ba2:	1821      	adds	r1, r4, r0
 8006ba4:	428b      	cmp	r3, r1
 8006ba6:	bf01      	itttt	eq
 8006ba8:	6819      	ldreq	r1, [r3, #0]
 8006baa:	685b      	ldreq	r3, [r3, #4]
 8006bac:	1809      	addeq	r1, r1, r0
 8006bae:	6021      	streq	r1, [r4, #0]
 8006bb0:	6063      	str	r3, [r4, #4]
 8006bb2:	6054      	str	r4, [r2, #4]
 8006bb4:	e7cb      	b.n	8006b4e <_free_r+0x22>
 8006bb6:	bd38      	pop	{r3, r4, r5, pc}
 8006bb8:	20002ae4 	.word	0x20002ae4

08006bbc <sbrk_aligned>:
 8006bbc:	b570      	push	{r4, r5, r6, lr}
 8006bbe:	4e0e      	ldr	r6, [pc, #56]	; (8006bf8 <sbrk_aligned+0x3c>)
 8006bc0:	460c      	mov	r4, r1
 8006bc2:	6831      	ldr	r1, [r6, #0]
 8006bc4:	4605      	mov	r5, r0
 8006bc6:	b911      	cbnz	r1, 8006bce <sbrk_aligned+0x12>
 8006bc8:	f000 f8ca 	bl	8006d60 <_sbrk_r>
 8006bcc:	6030      	str	r0, [r6, #0]
 8006bce:	4621      	mov	r1, r4
 8006bd0:	4628      	mov	r0, r5
 8006bd2:	f000 f8c5 	bl	8006d60 <_sbrk_r>
 8006bd6:	1c43      	adds	r3, r0, #1
 8006bd8:	d00a      	beq.n	8006bf0 <sbrk_aligned+0x34>
 8006bda:	1cc4      	adds	r4, r0, #3
 8006bdc:	f024 0403 	bic.w	r4, r4, #3
 8006be0:	42a0      	cmp	r0, r4
 8006be2:	d007      	beq.n	8006bf4 <sbrk_aligned+0x38>
 8006be4:	1a21      	subs	r1, r4, r0
 8006be6:	4628      	mov	r0, r5
 8006be8:	f000 f8ba 	bl	8006d60 <_sbrk_r>
 8006bec:	3001      	adds	r0, #1
 8006bee:	d101      	bne.n	8006bf4 <sbrk_aligned+0x38>
 8006bf0:	f04f 34ff 	mov.w	r4, #4294967295
 8006bf4:	4620      	mov	r0, r4
 8006bf6:	bd70      	pop	{r4, r5, r6, pc}
 8006bf8:	20002ae8 	.word	0x20002ae8

08006bfc <_malloc_r>:
 8006bfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c00:	1ccd      	adds	r5, r1, #3
 8006c02:	f025 0503 	bic.w	r5, r5, #3
 8006c06:	3508      	adds	r5, #8
 8006c08:	2d0c      	cmp	r5, #12
 8006c0a:	bf38      	it	cc
 8006c0c:	250c      	movcc	r5, #12
 8006c0e:	2d00      	cmp	r5, #0
 8006c10:	4607      	mov	r7, r0
 8006c12:	db01      	blt.n	8006c18 <_malloc_r+0x1c>
 8006c14:	42a9      	cmp	r1, r5
 8006c16:	d905      	bls.n	8006c24 <_malloc_r+0x28>
 8006c18:	230c      	movs	r3, #12
 8006c1a:	2600      	movs	r6, #0
 8006c1c:	603b      	str	r3, [r7, #0]
 8006c1e:	4630      	mov	r0, r6
 8006c20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c24:	4e2e      	ldr	r6, [pc, #184]	; (8006ce0 <_malloc_r+0xe4>)
 8006c26:	f000 f985 	bl	8006f34 <__malloc_lock>
 8006c2a:	6833      	ldr	r3, [r6, #0]
 8006c2c:	461c      	mov	r4, r3
 8006c2e:	bb34      	cbnz	r4, 8006c7e <_malloc_r+0x82>
 8006c30:	4629      	mov	r1, r5
 8006c32:	4638      	mov	r0, r7
 8006c34:	f7ff ffc2 	bl	8006bbc <sbrk_aligned>
 8006c38:	1c43      	adds	r3, r0, #1
 8006c3a:	4604      	mov	r4, r0
 8006c3c:	d14d      	bne.n	8006cda <_malloc_r+0xde>
 8006c3e:	6834      	ldr	r4, [r6, #0]
 8006c40:	4626      	mov	r6, r4
 8006c42:	2e00      	cmp	r6, #0
 8006c44:	d140      	bne.n	8006cc8 <_malloc_r+0xcc>
 8006c46:	6823      	ldr	r3, [r4, #0]
 8006c48:	4631      	mov	r1, r6
 8006c4a:	4638      	mov	r0, r7
 8006c4c:	eb04 0803 	add.w	r8, r4, r3
 8006c50:	f000 f886 	bl	8006d60 <_sbrk_r>
 8006c54:	4580      	cmp	r8, r0
 8006c56:	d13a      	bne.n	8006cce <_malloc_r+0xd2>
 8006c58:	6821      	ldr	r1, [r4, #0]
 8006c5a:	3503      	adds	r5, #3
 8006c5c:	1a6d      	subs	r5, r5, r1
 8006c5e:	f025 0503 	bic.w	r5, r5, #3
 8006c62:	3508      	adds	r5, #8
 8006c64:	2d0c      	cmp	r5, #12
 8006c66:	bf38      	it	cc
 8006c68:	250c      	movcc	r5, #12
 8006c6a:	4638      	mov	r0, r7
 8006c6c:	4629      	mov	r1, r5
 8006c6e:	f7ff ffa5 	bl	8006bbc <sbrk_aligned>
 8006c72:	3001      	adds	r0, #1
 8006c74:	d02b      	beq.n	8006cce <_malloc_r+0xd2>
 8006c76:	6823      	ldr	r3, [r4, #0]
 8006c78:	442b      	add	r3, r5
 8006c7a:	6023      	str	r3, [r4, #0]
 8006c7c:	e00e      	b.n	8006c9c <_malloc_r+0xa0>
 8006c7e:	6822      	ldr	r2, [r4, #0]
 8006c80:	1b52      	subs	r2, r2, r5
 8006c82:	d41e      	bmi.n	8006cc2 <_malloc_r+0xc6>
 8006c84:	2a0b      	cmp	r2, #11
 8006c86:	d916      	bls.n	8006cb6 <_malloc_r+0xba>
 8006c88:	1961      	adds	r1, r4, r5
 8006c8a:	42a3      	cmp	r3, r4
 8006c8c:	6025      	str	r5, [r4, #0]
 8006c8e:	bf18      	it	ne
 8006c90:	6059      	strne	r1, [r3, #4]
 8006c92:	6863      	ldr	r3, [r4, #4]
 8006c94:	bf08      	it	eq
 8006c96:	6031      	streq	r1, [r6, #0]
 8006c98:	5162      	str	r2, [r4, r5]
 8006c9a:	604b      	str	r3, [r1, #4]
 8006c9c:	4638      	mov	r0, r7
 8006c9e:	f104 060b 	add.w	r6, r4, #11
 8006ca2:	f000 f94d 	bl	8006f40 <__malloc_unlock>
 8006ca6:	f026 0607 	bic.w	r6, r6, #7
 8006caa:	1d23      	adds	r3, r4, #4
 8006cac:	1af2      	subs	r2, r6, r3
 8006cae:	d0b6      	beq.n	8006c1e <_malloc_r+0x22>
 8006cb0:	1b9b      	subs	r3, r3, r6
 8006cb2:	50a3      	str	r3, [r4, r2]
 8006cb4:	e7b3      	b.n	8006c1e <_malloc_r+0x22>
 8006cb6:	6862      	ldr	r2, [r4, #4]
 8006cb8:	42a3      	cmp	r3, r4
 8006cba:	bf0c      	ite	eq
 8006cbc:	6032      	streq	r2, [r6, #0]
 8006cbe:	605a      	strne	r2, [r3, #4]
 8006cc0:	e7ec      	b.n	8006c9c <_malloc_r+0xa0>
 8006cc2:	4623      	mov	r3, r4
 8006cc4:	6864      	ldr	r4, [r4, #4]
 8006cc6:	e7b2      	b.n	8006c2e <_malloc_r+0x32>
 8006cc8:	4634      	mov	r4, r6
 8006cca:	6876      	ldr	r6, [r6, #4]
 8006ccc:	e7b9      	b.n	8006c42 <_malloc_r+0x46>
 8006cce:	230c      	movs	r3, #12
 8006cd0:	4638      	mov	r0, r7
 8006cd2:	603b      	str	r3, [r7, #0]
 8006cd4:	f000 f934 	bl	8006f40 <__malloc_unlock>
 8006cd8:	e7a1      	b.n	8006c1e <_malloc_r+0x22>
 8006cda:	6025      	str	r5, [r4, #0]
 8006cdc:	e7de      	b.n	8006c9c <_malloc_r+0xa0>
 8006cde:	bf00      	nop
 8006ce0:	20002ae4 	.word	0x20002ae4

08006ce4 <rand>:
 8006ce4:	4b16      	ldr	r3, [pc, #88]	; (8006d40 <rand+0x5c>)
 8006ce6:	b510      	push	{r4, lr}
 8006ce8:	681c      	ldr	r4, [r3, #0]
 8006cea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006cec:	b9b3      	cbnz	r3, 8006d1c <rand+0x38>
 8006cee:	2018      	movs	r0, #24
 8006cf0:	f7ff fee6 	bl	8006ac0 <malloc>
 8006cf4:	4602      	mov	r2, r0
 8006cf6:	63a0      	str	r0, [r4, #56]	; 0x38
 8006cf8:	b920      	cbnz	r0, 8006d04 <rand+0x20>
 8006cfa:	214e      	movs	r1, #78	; 0x4e
 8006cfc:	4b11      	ldr	r3, [pc, #68]	; (8006d44 <rand+0x60>)
 8006cfe:	4812      	ldr	r0, [pc, #72]	; (8006d48 <rand+0x64>)
 8006d00:	f000 f8e4 	bl	8006ecc <__assert_func>
 8006d04:	4911      	ldr	r1, [pc, #68]	; (8006d4c <rand+0x68>)
 8006d06:	4b12      	ldr	r3, [pc, #72]	; (8006d50 <rand+0x6c>)
 8006d08:	e9c0 1300 	strd	r1, r3, [r0]
 8006d0c:	4b11      	ldr	r3, [pc, #68]	; (8006d54 <rand+0x70>)
 8006d0e:	2100      	movs	r1, #0
 8006d10:	6083      	str	r3, [r0, #8]
 8006d12:	230b      	movs	r3, #11
 8006d14:	8183      	strh	r3, [r0, #12]
 8006d16:	2001      	movs	r0, #1
 8006d18:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8006d1c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8006d1e:	4a0e      	ldr	r2, [pc, #56]	; (8006d58 <rand+0x74>)
 8006d20:	6920      	ldr	r0, [r4, #16]
 8006d22:	6963      	ldr	r3, [r4, #20]
 8006d24:	4342      	muls	r2, r0
 8006d26:	490d      	ldr	r1, [pc, #52]	; (8006d5c <rand+0x78>)
 8006d28:	fb01 2203 	mla	r2, r1, r3, r2
 8006d2c:	fba0 0101 	umull	r0, r1, r0, r1
 8006d30:	1c43      	adds	r3, r0, #1
 8006d32:	eb42 0001 	adc.w	r0, r2, r1
 8006d36:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8006d3a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8006d3e:	bd10      	pop	{r4, pc}
 8006d40:	200000b8 	.word	0x200000b8
 8006d44:	080087b0 	.word	0x080087b0
 8006d48:	080087c7 	.word	0x080087c7
 8006d4c:	abcd330e 	.word	0xabcd330e
 8006d50:	e66d1234 	.word	0xe66d1234
 8006d54:	0005deec 	.word	0x0005deec
 8006d58:	5851f42d 	.word	0x5851f42d
 8006d5c:	4c957f2d 	.word	0x4c957f2d

08006d60 <_sbrk_r>:
 8006d60:	b538      	push	{r3, r4, r5, lr}
 8006d62:	2300      	movs	r3, #0
 8006d64:	4d05      	ldr	r5, [pc, #20]	; (8006d7c <_sbrk_r+0x1c>)
 8006d66:	4604      	mov	r4, r0
 8006d68:	4608      	mov	r0, r1
 8006d6a:	602b      	str	r3, [r5, #0]
 8006d6c:	f7fb fb3c 	bl	80023e8 <_sbrk>
 8006d70:	1c43      	adds	r3, r0, #1
 8006d72:	d102      	bne.n	8006d7a <_sbrk_r+0x1a>
 8006d74:	682b      	ldr	r3, [r5, #0]
 8006d76:	b103      	cbz	r3, 8006d7a <_sbrk_r+0x1a>
 8006d78:	6023      	str	r3, [r4, #0]
 8006d7a:	bd38      	pop	{r3, r4, r5, pc}
 8006d7c:	20002af0 	.word	0x20002af0

08006d80 <siprintf>:
 8006d80:	b40e      	push	{r1, r2, r3}
 8006d82:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006d86:	b500      	push	{lr}
 8006d88:	b09c      	sub	sp, #112	; 0x70
 8006d8a:	ab1d      	add	r3, sp, #116	; 0x74
 8006d8c:	9002      	str	r0, [sp, #8]
 8006d8e:	9006      	str	r0, [sp, #24]
 8006d90:	9107      	str	r1, [sp, #28]
 8006d92:	9104      	str	r1, [sp, #16]
 8006d94:	4808      	ldr	r0, [pc, #32]	; (8006db8 <siprintf+0x38>)
 8006d96:	4909      	ldr	r1, [pc, #36]	; (8006dbc <siprintf+0x3c>)
 8006d98:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d9c:	9105      	str	r1, [sp, #20]
 8006d9e:	6800      	ldr	r0, [r0, #0]
 8006da0:	a902      	add	r1, sp, #8
 8006da2:	9301      	str	r3, [sp, #4]
 8006da4:	f000 f92e 	bl	8007004 <_svfiprintf_r>
 8006da8:	2200      	movs	r2, #0
 8006daa:	9b02      	ldr	r3, [sp, #8]
 8006dac:	701a      	strb	r2, [r3, #0]
 8006dae:	b01c      	add	sp, #112	; 0x70
 8006db0:	f85d eb04 	ldr.w	lr, [sp], #4
 8006db4:	b003      	add	sp, #12
 8006db6:	4770      	bx	lr
 8006db8:	200000b8 	.word	0x200000b8
 8006dbc:	ffff0208 	.word	0xffff0208

08006dc0 <_strtol_l.constprop.0>:
 8006dc0:	2b01      	cmp	r3, #1
 8006dc2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006dc6:	4680      	mov	r8, r0
 8006dc8:	d001      	beq.n	8006dce <_strtol_l.constprop.0+0xe>
 8006dca:	2b24      	cmp	r3, #36	; 0x24
 8006dcc:	d906      	bls.n	8006ddc <_strtol_l.constprop.0+0x1c>
 8006dce:	f7ff fe4d 	bl	8006a6c <__errno>
 8006dd2:	2316      	movs	r3, #22
 8006dd4:	6003      	str	r3, [r0, #0]
 8006dd6:	2000      	movs	r0, #0
 8006dd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ddc:	460d      	mov	r5, r1
 8006dde:	4f35      	ldr	r7, [pc, #212]	; (8006eb4 <_strtol_l.constprop.0+0xf4>)
 8006de0:	4628      	mov	r0, r5
 8006de2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006de6:	5de6      	ldrb	r6, [r4, r7]
 8006de8:	f016 0608 	ands.w	r6, r6, #8
 8006dec:	d1f8      	bne.n	8006de0 <_strtol_l.constprop.0+0x20>
 8006dee:	2c2d      	cmp	r4, #45	; 0x2d
 8006df0:	d12f      	bne.n	8006e52 <_strtol_l.constprop.0+0x92>
 8006df2:	2601      	movs	r6, #1
 8006df4:	782c      	ldrb	r4, [r5, #0]
 8006df6:	1c85      	adds	r5, r0, #2
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d057      	beq.n	8006eac <_strtol_l.constprop.0+0xec>
 8006dfc:	2b10      	cmp	r3, #16
 8006dfe:	d109      	bne.n	8006e14 <_strtol_l.constprop.0+0x54>
 8006e00:	2c30      	cmp	r4, #48	; 0x30
 8006e02:	d107      	bne.n	8006e14 <_strtol_l.constprop.0+0x54>
 8006e04:	7828      	ldrb	r0, [r5, #0]
 8006e06:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8006e0a:	2858      	cmp	r0, #88	; 0x58
 8006e0c:	d149      	bne.n	8006ea2 <_strtol_l.constprop.0+0xe2>
 8006e0e:	2310      	movs	r3, #16
 8006e10:	786c      	ldrb	r4, [r5, #1]
 8006e12:	3502      	adds	r5, #2
 8006e14:	2700      	movs	r7, #0
 8006e16:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8006e1a:	f10e 3eff 	add.w	lr, lr, #4294967295
 8006e1e:	fbbe f9f3 	udiv	r9, lr, r3
 8006e22:	4638      	mov	r0, r7
 8006e24:	fb03 ea19 	mls	sl, r3, r9, lr
 8006e28:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8006e2c:	f1bc 0f09 	cmp.w	ip, #9
 8006e30:	d814      	bhi.n	8006e5c <_strtol_l.constprop.0+0x9c>
 8006e32:	4664      	mov	r4, ip
 8006e34:	42a3      	cmp	r3, r4
 8006e36:	dd22      	ble.n	8006e7e <_strtol_l.constprop.0+0xbe>
 8006e38:	2f00      	cmp	r7, #0
 8006e3a:	db1d      	blt.n	8006e78 <_strtol_l.constprop.0+0xb8>
 8006e3c:	4581      	cmp	r9, r0
 8006e3e:	d31b      	bcc.n	8006e78 <_strtol_l.constprop.0+0xb8>
 8006e40:	d101      	bne.n	8006e46 <_strtol_l.constprop.0+0x86>
 8006e42:	45a2      	cmp	sl, r4
 8006e44:	db18      	blt.n	8006e78 <_strtol_l.constprop.0+0xb8>
 8006e46:	2701      	movs	r7, #1
 8006e48:	fb00 4003 	mla	r0, r0, r3, r4
 8006e4c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006e50:	e7ea      	b.n	8006e28 <_strtol_l.constprop.0+0x68>
 8006e52:	2c2b      	cmp	r4, #43	; 0x2b
 8006e54:	bf04      	itt	eq
 8006e56:	782c      	ldrbeq	r4, [r5, #0]
 8006e58:	1c85      	addeq	r5, r0, #2
 8006e5a:	e7cd      	b.n	8006df8 <_strtol_l.constprop.0+0x38>
 8006e5c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8006e60:	f1bc 0f19 	cmp.w	ip, #25
 8006e64:	d801      	bhi.n	8006e6a <_strtol_l.constprop.0+0xaa>
 8006e66:	3c37      	subs	r4, #55	; 0x37
 8006e68:	e7e4      	b.n	8006e34 <_strtol_l.constprop.0+0x74>
 8006e6a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8006e6e:	f1bc 0f19 	cmp.w	ip, #25
 8006e72:	d804      	bhi.n	8006e7e <_strtol_l.constprop.0+0xbe>
 8006e74:	3c57      	subs	r4, #87	; 0x57
 8006e76:	e7dd      	b.n	8006e34 <_strtol_l.constprop.0+0x74>
 8006e78:	f04f 37ff 	mov.w	r7, #4294967295
 8006e7c:	e7e6      	b.n	8006e4c <_strtol_l.constprop.0+0x8c>
 8006e7e:	2f00      	cmp	r7, #0
 8006e80:	da07      	bge.n	8006e92 <_strtol_l.constprop.0+0xd2>
 8006e82:	2322      	movs	r3, #34	; 0x22
 8006e84:	4670      	mov	r0, lr
 8006e86:	f8c8 3000 	str.w	r3, [r8]
 8006e8a:	2a00      	cmp	r2, #0
 8006e8c:	d0a4      	beq.n	8006dd8 <_strtol_l.constprop.0+0x18>
 8006e8e:	1e69      	subs	r1, r5, #1
 8006e90:	e005      	b.n	8006e9e <_strtol_l.constprop.0+0xde>
 8006e92:	b106      	cbz	r6, 8006e96 <_strtol_l.constprop.0+0xd6>
 8006e94:	4240      	negs	r0, r0
 8006e96:	2a00      	cmp	r2, #0
 8006e98:	d09e      	beq.n	8006dd8 <_strtol_l.constprop.0+0x18>
 8006e9a:	2f00      	cmp	r7, #0
 8006e9c:	d1f7      	bne.n	8006e8e <_strtol_l.constprop.0+0xce>
 8006e9e:	6011      	str	r1, [r2, #0]
 8006ea0:	e79a      	b.n	8006dd8 <_strtol_l.constprop.0+0x18>
 8006ea2:	2430      	movs	r4, #48	; 0x30
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d1b5      	bne.n	8006e14 <_strtol_l.constprop.0+0x54>
 8006ea8:	2308      	movs	r3, #8
 8006eaa:	e7b3      	b.n	8006e14 <_strtol_l.constprop.0+0x54>
 8006eac:	2c30      	cmp	r4, #48	; 0x30
 8006eae:	d0a9      	beq.n	8006e04 <_strtol_l.constprop.0+0x44>
 8006eb0:	230a      	movs	r3, #10
 8006eb2:	e7af      	b.n	8006e14 <_strtol_l.constprop.0+0x54>
 8006eb4:	0800885f 	.word	0x0800885f

08006eb8 <strtol>:
 8006eb8:	4613      	mov	r3, r2
 8006eba:	460a      	mov	r2, r1
 8006ebc:	4601      	mov	r1, r0
 8006ebe:	4802      	ldr	r0, [pc, #8]	; (8006ec8 <strtol+0x10>)
 8006ec0:	6800      	ldr	r0, [r0, #0]
 8006ec2:	f7ff bf7d 	b.w	8006dc0 <_strtol_l.constprop.0>
 8006ec6:	bf00      	nop
 8006ec8:	200000b8 	.word	0x200000b8

08006ecc <__assert_func>:
 8006ecc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006ece:	4614      	mov	r4, r2
 8006ed0:	461a      	mov	r2, r3
 8006ed2:	4b09      	ldr	r3, [pc, #36]	; (8006ef8 <__assert_func+0x2c>)
 8006ed4:	4605      	mov	r5, r0
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	68d8      	ldr	r0, [r3, #12]
 8006eda:	b14c      	cbz	r4, 8006ef0 <__assert_func+0x24>
 8006edc:	4b07      	ldr	r3, [pc, #28]	; (8006efc <__assert_func+0x30>)
 8006ede:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006ee2:	9100      	str	r1, [sp, #0]
 8006ee4:	462b      	mov	r3, r5
 8006ee6:	4906      	ldr	r1, [pc, #24]	; (8006f00 <__assert_func+0x34>)
 8006ee8:	f000 f80e 	bl	8006f08 <fiprintf>
 8006eec:	f000 fd8e 	bl	8007a0c <abort>
 8006ef0:	4b04      	ldr	r3, [pc, #16]	; (8006f04 <__assert_func+0x38>)
 8006ef2:	461c      	mov	r4, r3
 8006ef4:	e7f3      	b.n	8006ede <__assert_func+0x12>
 8006ef6:	bf00      	nop
 8006ef8:	200000b8 	.word	0x200000b8
 8006efc:	08008822 	.word	0x08008822
 8006f00:	0800882f 	.word	0x0800882f
 8006f04:	0800885d 	.word	0x0800885d

08006f08 <fiprintf>:
 8006f08:	b40e      	push	{r1, r2, r3}
 8006f0a:	b503      	push	{r0, r1, lr}
 8006f0c:	4601      	mov	r1, r0
 8006f0e:	ab03      	add	r3, sp, #12
 8006f10:	4805      	ldr	r0, [pc, #20]	; (8006f28 <fiprintf+0x20>)
 8006f12:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f16:	6800      	ldr	r0, [r0, #0]
 8006f18:	9301      	str	r3, [sp, #4]
 8006f1a:	f000 f99b 	bl	8007254 <_vfiprintf_r>
 8006f1e:	b002      	add	sp, #8
 8006f20:	f85d eb04 	ldr.w	lr, [sp], #4
 8006f24:	b003      	add	sp, #12
 8006f26:	4770      	bx	lr
 8006f28:	200000b8 	.word	0x200000b8

08006f2c <__retarget_lock_init_recursive>:
 8006f2c:	4770      	bx	lr

08006f2e <__retarget_lock_acquire_recursive>:
 8006f2e:	4770      	bx	lr

08006f30 <__retarget_lock_release_recursive>:
 8006f30:	4770      	bx	lr
	...

08006f34 <__malloc_lock>:
 8006f34:	4801      	ldr	r0, [pc, #4]	; (8006f3c <__malloc_lock+0x8>)
 8006f36:	f7ff bffa 	b.w	8006f2e <__retarget_lock_acquire_recursive>
 8006f3a:	bf00      	nop
 8006f3c:	20002aec 	.word	0x20002aec

08006f40 <__malloc_unlock>:
 8006f40:	4801      	ldr	r0, [pc, #4]	; (8006f48 <__malloc_unlock+0x8>)
 8006f42:	f7ff bff5 	b.w	8006f30 <__retarget_lock_release_recursive>
 8006f46:	bf00      	nop
 8006f48:	20002aec 	.word	0x20002aec

08006f4c <__ssputs_r>:
 8006f4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f50:	688e      	ldr	r6, [r1, #8]
 8006f52:	4682      	mov	sl, r0
 8006f54:	429e      	cmp	r6, r3
 8006f56:	460c      	mov	r4, r1
 8006f58:	4690      	mov	r8, r2
 8006f5a:	461f      	mov	r7, r3
 8006f5c:	d838      	bhi.n	8006fd0 <__ssputs_r+0x84>
 8006f5e:	898a      	ldrh	r2, [r1, #12]
 8006f60:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006f64:	d032      	beq.n	8006fcc <__ssputs_r+0x80>
 8006f66:	6825      	ldr	r5, [r4, #0]
 8006f68:	6909      	ldr	r1, [r1, #16]
 8006f6a:	3301      	adds	r3, #1
 8006f6c:	eba5 0901 	sub.w	r9, r5, r1
 8006f70:	6965      	ldr	r5, [r4, #20]
 8006f72:	444b      	add	r3, r9
 8006f74:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006f78:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006f7c:	106d      	asrs	r5, r5, #1
 8006f7e:	429d      	cmp	r5, r3
 8006f80:	bf38      	it	cc
 8006f82:	461d      	movcc	r5, r3
 8006f84:	0553      	lsls	r3, r2, #21
 8006f86:	d531      	bpl.n	8006fec <__ssputs_r+0xa0>
 8006f88:	4629      	mov	r1, r5
 8006f8a:	f7ff fe37 	bl	8006bfc <_malloc_r>
 8006f8e:	4606      	mov	r6, r0
 8006f90:	b950      	cbnz	r0, 8006fa8 <__ssputs_r+0x5c>
 8006f92:	230c      	movs	r3, #12
 8006f94:	f04f 30ff 	mov.w	r0, #4294967295
 8006f98:	f8ca 3000 	str.w	r3, [sl]
 8006f9c:	89a3      	ldrh	r3, [r4, #12]
 8006f9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006fa2:	81a3      	strh	r3, [r4, #12]
 8006fa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fa8:	464a      	mov	r2, r9
 8006faa:	6921      	ldr	r1, [r4, #16]
 8006fac:	f7ff fda8 	bl	8006b00 <memcpy>
 8006fb0:	89a3      	ldrh	r3, [r4, #12]
 8006fb2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006fb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fba:	81a3      	strh	r3, [r4, #12]
 8006fbc:	6126      	str	r6, [r4, #16]
 8006fbe:	444e      	add	r6, r9
 8006fc0:	6026      	str	r6, [r4, #0]
 8006fc2:	463e      	mov	r6, r7
 8006fc4:	6165      	str	r5, [r4, #20]
 8006fc6:	eba5 0509 	sub.w	r5, r5, r9
 8006fca:	60a5      	str	r5, [r4, #8]
 8006fcc:	42be      	cmp	r6, r7
 8006fce:	d900      	bls.n	8006fd2 <__ssputs_r+0x86>
 8006fd0:	463e      	mov	r6, r7
 8006fd2:	4632      	mov	r2, r6
 8006fd4:	4641      	mov	r1, r8
 8006fd6:	6820      	ldr	r0, [r4, #0]
 8006fd8:	f000 ff6a 	bl	8007eb0 <memmove>
 8006fdc:	68a3      	ldr	r3, [r4, #8]
 8006fde:	2000      	movs	r0, #0
 8006fe0:	1b9b      	subs	r3, r3, r6
 8006fe2:	60a3      	str	r3, [r4, #8]
 8006fe4:	6823      	ldr	r3, [r4, #0]
 8006fe6:	4433      	add	r3, r6
 8006fe8:	6023      	str	r3, [r4, #0]
 8006fea:	e7db      	b.n	8006fa4 <__ssputs_r+0x58>
 8006fec:	462a      	mov	r2, r5
 8006fee:	f000 ff79 	bl	8007ee4 <_realloc_r>
 8006ff2:	4606      	mov	r6, r0
 8006ff4:	2800      	cmp	r0, #0
 8006ff6:	d1e1      	bne.n	8006fbc <__ssputs_r+0x70>
 8006ff8:	4650      	mov	r0, sl
 8006ffa:	6921      	ldr	r1, [r4, #16]
 8006ffc:	f7ff fd96 	bl	8006b2c <_free_r>
 8007000:	e7c7      	b.n	8006f92 <__ssputs_r+0x46>
	...

08007004 <_svfiprintf_r>:
 8007004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007008:	4698      	mov	r8, r3
 800700a:	898b      	ldrh	r3, [r1, #12]
 800700c:	4607      	mov	r7, r0
 800700e:	061b      	lsls	r3, r3, #24
 8007010:	460d      	mov	r5, r1
 8007012:	4614      	mov	r4, r2
 8007014:	b09d      	sub	sp, #116	; 0x74
 8007016:	d50e      	bpl.n	8007036 <_svfiprintf_r+0x32>
 8007018:	690b      	ldr	r3, [r1, #16]
 800701a:	b963      	cbnz	r3, 8007036 <_svfiprintf_r+0x32>
 800701c:	2140      	movs	r1, #64	; 0x40
 800701e:	f7ff fded 	bl	8006bfc <_malloc_r>
 8007022:	6028      	str	r0, [r5, #0]
 8007024:	6128      	str	r0, [r5, #16]
 8007026:	b920      	cbnz	r0, 8007032 <_svfiprintf_r+0x2e>
 8007028:	230c      	movs	r3, #12
 800702a:	603b      	str	r3, [r7, #0]
 800702c:	f04f 30ff 	mov.w	r0, #4294967295
 8007030:	e0d1      	b.n	80071d6 <_svfiprintf_r+0x1d2>
 8007032:	2340      	movs	r3, #64	; 0x40
 8007034:	616b      	str	r3, [r5, #20]
 8007036:	2300      	movs	r3, #0
 8007038:	9309      	str	r3, [sp, #36]	; 0x24
 800703a:	2320      	movs	r3, #32
 800703c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007040:	2330      	movs	r3, #48	; 0x30
 8007042:	f04f 0901 	mov.w	r9, #1
 8007046:	f8cd 800c 	str.w	r8, [sp, #12]
 800704a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80071f0 <_svfiprintf_r+0x1ec>
 800704e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007052:	4623      	mov	r3, r4
 8007054:	469a      	mov	sl, r3
 8007056:	f813 2b01 	ldrb.w	r2, [r3], #1
 800705a:	b10a      	cbz	r2, 8007060 <_svfiprintf_r+0x5c>
 800705c:	2a25      	cmp	r2, #37	; 0x25
 800705e:	d1f9      	bne.n	8007054 <_svfiprintf_r+0x50>
 8007060:	ebba 0b04 	subs.w	fp, sl, r4
 8007064:	d00b      	beq.n	800707e <_svfiprintf_r+0x7a>
 8007066:	465b      	mov	r3, fp
 8007068:	4622      	mov	r2, r4
 800706a:	4629      	mov	r1, r5
 800706c:	4638      	mov	r0, r7
 800706e:	f7ff ff6d 	bl	8006f4c <__ssputs_r>
 8007072:	3001      	adds	r0, #1
 8007074:	f000 80aa 	beq.w	80071cc <_svfiprintf_r+0x1c8>
 8007078:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800707a:	445a      	add	r2, fp
 800707c:	9209      	str	r2, [sp, #36]	; 0x24
 800707e:	f89a 3000 	ldrb.w	r3, [sl]
 8007082:	2b00      	cmp	r3, #0
 8007084:	f000 80a2 	beq.w	80071cc <_svfiprintf_r+0x1c8>
 8007088:	2300      	movs	r3, #0
 800708a:	f04f 32ff 	mov.w	r2, #4294967295
 800708e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007092:	f10a 0a01 	add.w	sl, sl, #1
 8007096:	9304      	str	r3, [sp, #16]
 8007098:	9307      	str	r3, [sp, #28]
 800709a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800709e:	931a      	str	r3, [sp, #104]	; 0x68
 80070a0:	4654      	mov	r4, sl
 80070a2:	2205      	movs	r2, #5
 80070a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070a8:	4851      	ldr	r0, [pc, #324]	; (80071f0 <_svfiprintf_r+0x1ec>)
 80070aa:	f000 fef3 	bl	8007e94 <memchr>
 80070ae:	9a04      	ldr	r2, [sp, #16]
 80070b0:	b9d8      	cbnz	r0, 80070ea <_svfiprintf_r+0xe6>
 80070b2:	06d0      	lsls	r0, r2, #27
 80070b4:	bf44      	itt	mi
 80070b6:	2320      	movmi	r3, #32
 80070b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80070bc:	0711      	lsls	r1, r2, #28
 80070be:	bf44      	itt	mi
 80070c0:	232b      	movmi	r3, #43	; 0x2b
 80070c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80070c6:	f89a 3000 	ldrb.w	r3, [sl]
 80070ca:	2b2a      	cmp	r3, #42	; 0x2a
 80070cc:	d015      	beq.n	80070fa <_svfiprintf_r+0xf6>
 80070ce:	4654      	mov	r4, sl
 80070d0:	2000      	movs	r0, #0
 80070d2:	f04f 0c0a 	mov.w	ip, #10
 80070d6:	9a07      	ldr	r2, [sp, #28]
 80070d8:	4621      	mov	r1, r4
 80070da:	f811 3b01 	ldrb.w	r3, [r1], #1
 80070de:	3b30      	subs	r3, #48	; 0x30
 80070e0:	2b09      	cmp	r3, #9
 80070e2:	d94e      	bls.n	8007182 <_svfiprintf_r+0x17e>
 80070e4:	b1b0      	cbz	r0, 8007114 <_svfiprintf_r+0x110>
 80070e6:	9207      	str	r2, [sp, #28]
 80070e8:	e014      	b.n	8007114 <_svfiprintf_r+0x110>
 80070ea:	eba0 0308 	sub.w	r3, r0, r8
 80070ee:	fa09 f303 	lsl.w	r3, r9, r3
 80070f2:	4313      	orrs	r3, r2
 80070f4:	46a2      	mov	sl, r4
 80070f6:	9304      	str	r3, [sp, #16]
 80070f8:	e7d2      	b.n	80070a0 <_svfiprintf_r+0x9c>
 80070fa:	9b03      	ldr	r3, [sp, #12]
 80070fc:	1d19      	adds	r1, r3, #4
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	9103      	str	r1, [sp, #12]
 8007102:	2b00      	cmp	r3, #0
 8007104:	bfbb      	ittet	lt
 8007106:	425b      	neglt	r3, r3
 8007108:	f042 0202 	orrlt.w	r2, r2, #2
 800710c:	9307      	strge	r3, [sp, #28]
 800710e:	9307      	strlt	r3, [sp, #28]
 8007110:	bfb8      	it	lt
 8007112:	9204      	strlt	r2, [sp, #16]
 8007114:	7823      	ldrb	r3, [r4, #0]
 8007116:	2b2e      	cmp	r3, #46	; 0x2e
 8007118:	d10c      	bne.n	8007134 <_svfiprintf_r+0x130>
 800711a:	7863      	ldrb	r3, [r4, #1]
 800711c:	2b2a      	cmp	r3, #42	; 0x2a
 800711e:	d135      	bne.n	800718c <_svfiprintf_r+0x188>
 8007120:	9b03      	ldr	r3, [sp, #12]
 8007122:	3402      	adds	r4, #2
 8007124:	1d1a      	adds	r2, r3, #4
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	9203      	str	r2, [sp, #12]
 800712a:	2b00      	cmp	r3, #0
 800712c:	bfb8      	it	lt
 800712e:	f04f 33ff 	movlt.w	r3, #4294967295
 8007132:	9305      	str	r3, [sp, #20]
 8007134:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80071f4 <_svfiprintf_r+0x1f0>
 8007138:	2203      	movs	r2, #3
 800713a:	4650      	mov	r0, sl
 800713c:	7821      	ldrb	r1, [r4, #0]
 800713e:	f000 fea9 	bl	8007e94 <memchr>
 8007142:	b140      	cbz	r0, 8007156 <_svfiprintf_r+0x152>
 8007144:	2340      	movs	r3, #64	; 0x40
 8007146:	eba0 000a 	sub.w	r0, r0, sl
 800714a:	fa03 f000 	lsl.w	r0, r3, r0
 800714e:	9b04      	ldr	r3, [sp, #16]
 8007150:	3401      	adds	r4, #1
 8007152:	4303      	orrs	r3, r0
 8007154:	9304      	str	r3, [sp, #16]
 8007156:	f814 1b01 	ldrb.w	r1, [r4], #1
 800715a:	2206      	movs	r2, #6
 800715c:	4826      	ldr	r0, [pc, #152]	; (80071f8 <_svfiprintf_r+0x1f4>)
 800715e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007162:	f000 fe97 	bl	8007e94 <memchr>
 8007166:	2800      	cmp	r0, #0
 8007168:	d038      	beq.n	80071dc <_svfiprintf_r+0x1d8>
 800716a:	4b24      	ldr	r3, [pc, #144]	; (80071fc <_svfiprintf_r+0x1f8>)
 800716c:	bb1b      	cbnz	r3, 80071b6 <_svfiprintf_r+0x1b2>
 800716e:	9b03      	ldr	r3, [sp, #12]
 8007170:	3307      	adds	r3, #7
 8007172:	f023 0307 	bic.w	r3, r3, #7
 8007176:	3308      	adds	r3, #8
 8007178:	9303      	str	r3, [sp, #12]
 800717a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800717c:	4433      	add	r3, r6
 800717e:	9309      	str	r3, [sp, #36]	; 0x24
 8007180:	e767      	b.n	8007052 <_svfiprintf_r+0x4e>
 8007182:	460c      	mov	r4, r1
 8007184:	2001      	movs	r0, #1
 8007186:	fb0c 3202 	mla	r2, ip, r2, r3
 800718a:	e7a5      	b.n	80070d8 <_svfiprintf_r+0xd4>
 800718c:	2300      	movs	r3, #0
 800718e:	f04f 0c0a 	mov.w	ip, #10
 8007192:	4619      	mov	r1, r3
 8007194:	3401      	adds	r4, #1
 8007196:	9305      	str	r3, [sp, #20]
 8007198:	4620      	mov	r0, r4
 800719a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800719e:	3a30      	subs	r2, #48	; 0x30
 80071a0:	2a09      	cmp	r2, #9
 80071a2:	d903      	bls.n	80071ac <_svfiprintf_r+0x1a8>
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d0c5      	beq.n	8007134 <_svfiprintf_r+0x130>
 80071a8:	9105      	str	r1, [sp, #20]
 80071aa:	e7c3      	b.n	8007134 <_svfiprintf_r+0x130>
 80071ac:	4604      	mov	r4, r0
 80071ae:	2301      	movs	r3, #1
 80071b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80071b4:	e7f0      	b.n	8007198 <_svfiprintf_r+0x194>
 80071b6:	ab03      	add	r3, sp, #12
 80071b8:	9300      	str	r3, [sp, #0]
 80071ba:	462a      	mov	r2, r5
 80071bc:	4638      	mov	r0, r7
 80071be:	4b10      	ldr	r3, [pc, #64]	; (8007200 <_svfiprintf_r+0x1fc>)
 80071c0:	a904      	add	r1, sp, #16
 80071c2:	f3af 8000 	nop.w
 80071c6:	1c42      	adds	r2, r0, #1
 80071c8:	4606      	mov	r6, r0
 80071ca:	d1d6      	bne.n	800717a <_svfiprintf_r+0x176>
 80071cc:	89ab      	ldrh	r3, [r5, #12]
 80071ce:	065b      	lsls	r3, r3, #25
 80071d0:	f53f af2c 	bmi.w	800702c <_svfiprintf_r+0x28>
 80071d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80071d6:	b01d      	add	sp, #116	; 0x74
 80071d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071dc:	ab03      	add	r3, sp, #12
 80071de:	9300      	str	r3, [sp, #0]
 80071e0:	462a      	mov	r2, r5
 80071e2:	4638      	mov	r0, r7
 80071e4:	4b06      	ldr	r3, [pc, #24]	; (8007200 <_svfiprintf_r+0x1fc>)
 80071e6:	a904      	add	r1, sp, #16
 80071e8:	f000 f9d4 	bl	8007594 <_printf_i>
 80071ec:	e7eb      	b.n	80071c6 <_svfiprintf_r+0x1c2>
 80071ee:	bf00      	nop
 80071f0:	0800895f 	.word	0x0800895f
 80071f4:	08008965 	.word	0x08008965
 80071f8:	08008969 	.word	0x08008969
 80071fc:	00000000 	.word	0x00000000
 8007200:	08006f4d 	.word	0x08006f4d

08007204 <__sfputc_r>:
 8007204:	6893      	ldr	r3, [r2, #8]
 8007206:	b410      	push	{r4}
 8007208:	3b01      	subs	r3, #1
 800720a:	2b00      	cmp	r3, #0
 800720c:	6093      	str	r3, [r2, #8]
 800720e:	da07      	bge.n	8007220 <__sfputc_r+0x1c>
 8007210:	6994      	ldr	r4, [r2, #24]
 8007212:	42a3      	cmp	r3, r4
 8007214:	db01      	blt.n	800721a <__sfputc_r+0x16>
 8007216:	290a      	cmp	r1, #10
 8007218:	d102      	bne.n	8007220 <__sfputc_r+0x1c>
 800721a:	bc10      	pop	{r4}
 800721c:	f000 bb24 	b.w	8007868 <__swbuf_r>
 8007220:	6813      	ldr	r3, [r2, #0]
 8007222:	1c58      	adds	r0, r3, #1
 8007224:	6010      	str	r0, [r2, #0]
 8007226:	7019      	strb	r1, [r3, #0]
 8007228:	4608      	mov	r0, r1
 800722a:	bc10      	pop	{r4}
 800722c:	4770      	bx	lr

0800722e <__sfputs_r>:
 800722e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007230:	4606      	mov	r6, r0
 8007232:	460f      	mov	r7, r1
 8007234:	4614      	mov	r4, r2
 8007236:	18d5      	adds	r5, r2, r3
 8007238:	42ac      	cmp	r4, r5
 800723a:	d101      	bne.n	8007240 <__sfputs_r+0x12>
 800723c:	2000      	movs	r0, #0
 800723e:	e007      	b.n	8007250 <__sfputs_r+0x22>
 8007240:	463a      	mov	r2, r7
 8007242:	4630      	mov	r0, r6
 8007244:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007248:	f7ff ffdc 	bl	8007204 <__sfputc_r>
 800724c:	1c43      	adds	r3, r0, #1
 800724e:	d1f3      	bne.n	8007238 <__sfputs_r+0xa>
 8007250:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007254 <_vfiprintf_r>:
 8007254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007258:	460d      	mov	r5, r1
 800725a:	4614      	mov	r4, r2
 800725c:	4698      	mov	r8, r3
 800725e:	4606      	mov	r6, r0
 8007260:	b09d      	sub	sp, #116	; 0x74
 8007262:	b118      	cbz	r0, 800726c <_vfiprintf_r+0x18>
 8007264:	6983      	ldr	r3, [r0, #24]
 8007266:	b90b      	cbnz	r3, 800726c <_vfiprintf_r+0x18>
 8007268:	f000 fcfe 	bl	8007c68 <__sinit>
 800726c:	4b89      	ldr	r3, [pc, #548]	; (8007494 <_vfiprintf_r+0x240>)
 800726e:	429d      	cmp	r5, r3
 8007270:	d11b      	bne.n	80072aa <_vfiprintf_r+0x56>
 8007272:	6875      	ldr	r5, [r6, #4]
 8007274:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007276:	07d9      	lsls	r1, r3, #31
 8007278:	d405      	bmi.n	8007286 <_vfiprintf_r+0x32>
 800727a:	89ab      	ldrh	r3, [r5, #12]
 800727c:	059a      	lsls	r2, r3, #22
 800727e:	d402      	bmi.n	8007286 <_vfiprintf_r+0x32>
 8007280:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007282:	f7ff fe54 	bl	8006f2e <__retarget_lock_acquire_recursive>
 8007286:	89ab      	ldrh	r3, [r5, #12]
 8007288:	071b      	lsls	r3, r3, #28
 800728a:	d501      	bpl.n	8007290 <_vfiprintf_r+0x3c>
 800728c:	692b      	ldr	r3, [r5, #16]
 800728e:	b9eb      	cbnz	r3, 80072cc <_vfiprintf_r+0x78>
 8007290:	4629      	mov	r1, r5
 8007292:	4630      	mov	r0, r6
 8007294:	f000 fb4c 	bl	8007930 <__swsetup_r>
 8007298:	b1c0      	cbz	r0, 80072cc <_vfiprintf_r+0x78>
 800729a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800729c:	07dc      	lsls	r4, r3, #31
 800729e:	d50e      	bpl.n	80072be <_vfiprintf_r+0x6a>
 80072a0:	f04f 30ff 	mov.w	r0, #4294967295
 80072a4:	b01d      	add	sp, #116	; 0x74
 80072a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072aa:	4b7b      	ldr	r3, [pc, #492]	; (8007498 <_vfiprintf_r+0x244>)
 80072ac:	429d      	cmp	r5, r3
 80072ae:	d101      	bne.n	80072b4 <_vfiprintf_r+0x60>
 80072b0:	68b5      	ldr	r5, [r6, #8]
 80072b2:	e7df      	b.n	8007274 <_vfiprintf_r+0x20>
 80072b4:	4b79      	ldr	r3, [pc, #484]	; (800749c <_vfiprintf_r+0x248>)
 80072b6:	429d      	cmp	r5, r3
 80072b8:	bf08      	it	eq
 80072ba:	68f5      	ldreq	r5, [r6, #12]
 80072bc:	e7da      	b.n	8007274 <_vfiprintf_r+0x20>
 80072be:	89ab      	ldrh	r3, [r5, #12]
 80072c0:	0598      	lsls	r0, r3, #22
 80072c2:	d4ed      	bmi.n	80072a0 <_vfiprintf_r+0x4c>
 80072c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80072c6:	f7ff fe33 	bl	8006f30 <__retarget_lock_release_recursive>
 80072ca:	e7e9      	b.n	80072a0 <_vfiprintf_r+0x4c>
 80072cc:	2300      	movs	r3, #0
 80072ce:	9309      	str	r3, [sp, #36]	; 0x24
 80072d0:	2320      	movs	r3, #32
 80072d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80072d6:	2330      	movs	r3, #48	; 0x30
 80072d8:	f04f 0901 	mov.w	r9, #1
 80072dc:	f8cd 800c 	str.w	r8, [sp, #12]
 80072e0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80074a0 <_vfiprintf_r+0x24c>
 80072e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80072e8:	4623      	mov	r3, r4
 80072ea:	469a      	mov	sl, r3
 80072ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 80072f0:	b10a      	cbz	r2, 80072f6 <_vfiprintf_r+0xa2>
 80072f2:	2a25      	cmp	r2, #37	; 0x25
 80072f4:	d1f9      	bne.n	80072ea <_vfiprintf_r+0x96>
 80072f6:	ebba 0b04 	subs.w	fp, sl, r4
 80072fa:	d00b      	beq.n	8007314 <_vfiprintf_r+0xc0>
 80072fc:	465b      	mov	r3, fp
 80072fe:	4622      	mov	r2, r4
 8007300:	4629      	mov	r1, r5
 8007302:	4630      	mov	r0, r6
 8007304:	f7ff ff93 	bl	800722e <__sfputs_r>
 8007308:	3001      	adds	r0, #1
 800730a:	f000 80aa 	beq.w	8007462 <_vfiprintf_r+0x20e>
 800730e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007310:	445a      	add	r2, fp
 8007312:	9209      	str	r2, [sp, #36]	; 0x24
 8007314:	f89a 3000 	ldrb.w	r3, [sl]
 8007318:	2b00      	cmp	r3, #0
 800731a:	f000 80a2 	beq.w	8007462 <_vfiprintf_r+0x20e>
 800731e:	2300      	movs	r3, #0
 8007320:	f04f 32ff 	mov.w	r2, #4294967295
 8007324:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007328:	f10a 0a01 	add.w	sl, sl, #1
 800732c:	9304      	str	r3, [sp, #16]
 800732e:	9307      	str	r3, [sp, #28]
 8007330:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007334:	931a      	str	r3, [sp, #104]	; 0x68
 8007336:	4654      	mov	r4, sl
 8007338:	2205      	movs	r2, #5
 800733a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800733e:	4858      	ldr	r0, [pc, #352]	; (80074a0 <_vfiprintf_r+0x24c>)
 8007340:	f000 fda8 	bl	8007e94 <memchr>
 8007344:	9a04      	ldr	r2, [sp, #16]
 8007346:	b9d8      	cbnz	r0, 8007380 <_vfiprintf_r+0x12c>
 8007348:	06d1      	lsls	r1, r2, #27
 800734a:	bf44      	itt	mi
 800734c:	2320      	movmi	r3, #32
 800734e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007352:	0713      	lsls	r3, r2, #28
 8007354:	bf44      	itt	mi
 8007356:	232b      	movmi	r3, #43	; 0x2b
 8007358:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800735c:	f89a 3000 	ldrb.w	r3, [sl]
 8007360:	2b2a      	cmp	r3, #42	; 0x2a
 8007362:	d015      	beq.n	8007390 <_vfiprintf_r+0x13c>
 8007364:	4654      	mov	r4, sl
 8007366:	2000      	movs	r0, #0
 8007368:	f04f 0c0a 	mov.w	ip, #10
 800736c:	9a07      	ldr	r2, [sp, #28]
 800736e:	4621      	mov	r1, r4
 8007370:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007374:	3b30      	subs	r3, #48	; 0x30
 8007376:	2b09      	cmp	r3, #9
 8007378:	d94e      	bls.n	8007418 <_vfiprintf_r+0x1c4>
 800737a:	b1b0      	cbz	r0, 80073aa <_vfiprintf_r+0x156>
 800737c:	9207      	str	r2, [sp, #28]
 800737e:	e014      	b.n	80073aa <_vfiprintf_r+0x156>
 8007380:	eba0 0308 	sub.w	r3, r0, r8
 8007384:	fa09 f303 	lsl.w	r3, r9, r3
 8007388:	4313      	orrs	r3, r2
 800738a:	46a2      	mov	sl, r4
 800738c:	9304      	str	r3, [sp, #16]
 800738e:	e7d2      	b.n	8007336 <_vfiprintf_r+0xe2>
 8007390:	9b03      	ldr	r3, [sp, #12]
 8007392:	1d19      	adds	r1, r3, #4
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	9103      	str	r1, [sp, #12]
 8007398:	2b00      	cmp	r3, #0
 800739a:	bfbb      	ittet	lt
 800739c:	425b      	neglt	r3, r3
 800739e:	f042 0202 	orrlt.w	r2, r2, #2
 80073a2:	9307      	strge	r3, [sp, #28]
 80073a4:	9307      	strlt	r3, [sp, #28]
 80073a6:	bfb8      	it	lt
 80073a8:	9204      	strlt	r2, [sp, #16]
 80073aa:	7823      	ldrb	r3, [r4, #0]
 80073ac:	2b2e      	cmp	r3, #46	; 0x2e
 80073ae:	d10c      	bne.n	80073ca <_vfiprintf_r+0x176>
 80073b0:	7863      	ldrb	r3, [r4, #1]
 80073b2:	2b2a      	cmp	r3, #42	; 0x2a
 80073b4:	d135      	bne.n	8007422 <_vfiprintf_r+0x1ce>
 80073b6:	9b03      	ldr	r3, [sp, #12]
 80073b8:	3402      	adds	r4, #2
 80073ba:	1d1a      	adds	r2, r3, #4
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	9203      	str	r2, [sp, #12]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	bfb8      	it	lt
 80073c4:	f04f 33ff 	movlt.w	r3, #4294967295
 80073c8:	9305      	str	r3, [sp, #20]
 80073ca:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80074a4 <_vfiprintf_r+0x250>
 80073ce:	2203      	movs	r2, #3
 80073d0:	4650      	mov	r0, sl
 80073d2:	7821      	ldrb	r1, [r4, #0]
 80073d4:	f000 fd5e 	bl	8007e94 <memchr>
 80073d8:	b140      	cbz	r0, 80073ec <_vfiprintf_r+0x198>
 80073da:	2340      	movs	r3, #64	; 0x40
 80073dc:	eba0 000a 	sub.w	r0, r0, sl
 80073e0:	fa03 f000 	lsl.w	r0, r3, r0
 80073e4:	9b04      	ldr	r3, [sp, #16]
 80073e6:	3401      	adds	r4, #1
 80073e8:	4303      	orrs	r3, r0
 80073ea:	9304      	str	r3, [sp, #16]
 80073ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073f0:	2206      	movs	r2, #6
 80073f2:	482d      	ldr	r0, [pc, #180]	; (80074a8 <_vfiprintf_r+0x254>)
 80073f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80073f8:	f000 fd4c 	bl	8007e94 <memchr>
 80073fc:	2800      	cmp	r0, #0
 80073fe:	d03f      	beq.n	8007480 <_vfiprintf_r+0x22c>
 8007400:	4b2a      	ldr	r3, [pc, #168]	; (80074ac <_vfiprintf_r+0x258>)
 8007402:	bb1b      	cbnz	r3, 800744c <_vfiprintf_r+0x1f8>
 8007404:	9b03      	ldr	r3, [sp, #12]
 8007406:	3307      	adds	r3, #7
 8007408:	f023 0307 	bic.w	r3, r3, #7
 800740c:	3308      	adds	r3, #8
 800740e:	9303      	str	r3, [sp, #12]
 8007410:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007412:	443b      	add	r3, r7
 8007414:	9309      	str	r3, [sp, #36]	; 0x24
 8007416:	e767      	b.n	80072e8 <_vfiprintf_r+0x94>
 8007418:	460c      	mov	r4, r1
 800741a:	2001      	movs	r0, #1
 800741c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007420:	e7a5      	b.n	800736e <_vfiprintf_r+0x11a>
 8007422:	2300      	movs	r3, #0
 8007424:	f04f 0c0a 	mov.w	ip, #10
 8007428:	4619      	mov	r1, r3
 800742a:	3401      	adds	r4, #1
 800742c:	9305      	str	r3, [sp, #20]
 800742e:	4620      	mov	r0, r4
 8007430:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007434:	3a30      	subs	r2, #48	; 0x30
 8007436:	2a09      	cmp	r2, #9
 8007438:	d903      	bls.n	8007442 <_vfiprintf_r+0x1ee>
 800743a:	2b00      	cmp	r3, #0
 800743c:	d0c5      	beq.n	80073ca <_vfiprintf_r+0x176>
 800743e:	9105      	str	r1, [sp, #20]
 8007440:	e7c3      	b.n	80073ca <_vfiprintf_r+0x176>
 8007442:	4604      	mov	r4, r0
 8007444:	2301      	movs	r3, #1
 8007446:	fb0c 2101 	mla	r1, ip, r1, r2
 800744a:	e7f0      	b.n	800742e <_vfiprintf_r+0x1da>
 800744c:	ab03      	add	r3, sp, #12
 800744e:	9300      	str	r3, [sp, #0]
 8007450:	462a      	mov	r2, r5
 8007452:	4630      	mov	r0, r6
 8007454:	4b16      	ldr	r3, [pc, #88]	; (80074b0 <_vfiprintf_r+0x25c>)
 8007456:	a904      	add	r1, sp, #16
 8007458:	f3af 8000 	nop.w
 800745c:	4607      	mov	r7, r0
 800745e:	1c78      	adds	r0, r7, #1
 8007460:	d1d6      	bne.n	8007410 <_vfiprintf_r+0x1bc>
 8007462:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007464:	07d9      	lsls	r1, r3, #31
 8007466:	d405      	bmi.n	8007474 <_vfiprintf_r+0x220>
 8007468:	89ab      	ldrh	r3, [r5, #12]
 800746a:	059a      	lsls	r2, r3, #22
 800746c:	d402      	bmi.n	8007474 <_vfiprintf_r+0x220>
 800746e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007470:	f7ff fd5e 	bl	8006f30 <__retarget_lock_release_recursive>
 8007474:	89ab      	ldrh	r3, [r5, #12]
 8007476:	065b      	lsls	r3, r3, #25
 8007478:	f53f af12 	bmi.w	80072a0 <_vfiprintf_r+0x4c>
 800747c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800747e:	e711      	b.n	80072a4 <_vfiprintf_r+0x50>
 8007480:	ab03      	add	r3, sp, #12
 8007482:	9300      	str	r3, [sp, #0]
 8007484:	462a      	mov	r2, r5
 8007486:	4630      	mov	r0, r6
 8007488:	4b09      	ldr	r3, [pc, #36]	; (80074b0 <_vfiprintf_r+0x25c>)
 800748a:	a904      	add	r1, sp, #16
 800748c:	f000 f882 	bl	8007594 <_printf_i>
 8007490:	e7e4      	b.n	800745c <_vfiprintf_r+0x208>
 8007492:	bf00      	nop
 8007494:	080089b4 	.word	0x080089b4
 8007498:	080089d4 	.word	0x080089d4
 800749c:	08008994 	.word	0x08008994
 80074a0:	0800895f 	.word	0x0800895f
 80074a4:	08008965 	.word	0x08008965
 80074a8:	08008969 	.word	0x08008969
 80074ac:	00000000 	.word	0x00000000
 80074b0:	0800722f 	.word	0x0800722f

080074b4 <_printf_common>:
 80074b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074b8:	4616      	mov	r6, r2
 80074ba:	4699      	mov	r9, r3
 80074bc:	688a      	ldr	r2, [r1, #8]
 80074be:	690b      	ldr	r3, [r1, #16]
 80074c0:	4607      	mov	r7, r0
 80074c2:	4293      	cmp	r3, r2
 80074c4:	bfb8      	it	lt
 80074c6:	4613      	movlt	r3, r2
 80074c8:	6033      	str	r3, [r6, #0]
 80074ca:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80074ce:	460c      	mov	r4, r1
 80074d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80074d4:	b10a      	cbz	r2, 80074da <_printf_common+0x26>
 80074d6:	3301      	adds	r3, #1
 80074d8:	6033      	str	r3, [r6, #0]
 80074da:	6823      	ldr	r3, [r4, #0]
 80074dc:	0699      	lsls	r1, r3, #26
 80074de:	bf42      	ittt	mi
 80074e0:	6833      	ldrmi	r3, [r6, #0]
 80074e2:	3302      	addmi	r3, #2
 80074e4:	6033      	strmi	r3, [r6, #0]
 80074e6:	6825      	ldr	r5, [r4, #0]
 80074e8:	f015 0506 	ands.w	r5, r5, #6
 80074ec:	d106      	bne.n	80074fc <_printf_common+0x48>
 80074ee:	f104 0a19 	add.w	sl, r4, #25
 80074f2:	68e3      	ldr	r3, [r4, #12]
 80074f4:	6832      	ldr	r2, [r6, #0]
 80074f6:	1a9b      	subs	r3, r3, r2
 80074f8:	42ab      	cmp	r3, r5
 80074fa:	dc28      	bgt.n	800754e <_printf_common+0x9a>
 80074fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007500:	1e13      	subs	r3, r2, #0
 8007502:	6822      	ldr	r2, [r4, #0]
 8007504:	bf18      	it	ne
 8007506:	2301      	movne	r3, #1
 8007508:	0692      	lsls	r2, r2, #26
 800750a:	d42d      	bmi.n	8007568 <_printf_common+0xb4>
 800750c:	4649      	mov	r1, r9
 800750e:	4638      	mov	r0, r7
 8007510:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007514:	47c0      	blx	r8
 8007516:	3001      	adds	r0, #1
 8007518:	d020      	beq.n	800755c <_printf_common+0xa8>
 800751a:	6823      	ldr	r3, [r4, #0]
 800751c:	68e5      	ldr	r5, [r4, #12]
 800751e:	f003 0306 	and.w	r3, r3, #6
 8007522:	2b04      	cmp	r3, #4
 8007524:	bf18      	it	ne
 8007526:	2500      	movne	r5, #0
 8007528:	6832      	ldr	r2, [r6, #0]
 800752a:	f04f 0600 	mov.w	r6, #0
 800752e:	68a3      	ldr	r3, [r4, #8]
 8007530:	bf08      	it	eq
 8007532:	1aad      	subeq	r5, r5, r2
 8007534:	6922      	ldr	r2, [r4, #16]
 8007536:	bf08      	it	eq
 8007538:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800753c:	4293      	cmp	r3, r2
 800753e:	bfc4      	itt	gt
 8007540:	1a9b      	subgt	r3, r3, r2
 8007542:	18ed      	addgt	r5, r5, r3
 8007544:	341a      	adds	r4, #26
 8007546:	42b5      	cmp	r5, r6
 8007548:	d11a      	bne.n	8007580 <_printf_common+0xcc>
 800754a:	2000      	movs	r0, #0
 800754c:	e008      	b.n	8007560 <_printf_common+0xac>
 800754e:	2301      	movs	r3, #1
 8007550:	4652      	mov	r2, sl
 8007552:	4649      	mov	r1, r9
 8007554:	4638      	mov	r0, r7
 8007556:	47c0      	blx	r8
 8007558:	3001      	adds	r0, #1
 800755a:	d103      	bne.n	8007564 <_printf_common+0xb0>
 800755c:	f04f 30ff 	mov.w	r0, #4294967295
 8007560:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007564:	3501      	adds	r5, #1
 8007566:	e7c4      	b.n	80074f2 <_printf_common+0x3e>
 8007568:	2030      	movs	r0, #48	; 0x30
 800756a:	18e1      	adds	r1, r4, r3
 800756c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007570:	1c5a      	adds	r2, r3, #1
 8007572:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007576:	4422      	add	r2, r4
 8007578:	3302      	adds	r3, #2
 800757a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800757e:	e7c5      	b.n	800750c <_printf_common+0x58>
 8007580:	2301      	movs	r3, #1
 8007582:	4622      	mov	r2, r4
 8007584:	4649      	mov	r1, r9
 8007586:	4638      	mov	r0, r7
 8007588:	47c0      	blx	r8
 800758a:	3001      	adds	r0, #1
 800758c:	d0e6      	beq.n	800755c <_printf_common+0xa8>
 800758e:	3601      	adds	r6, #1
 8007590:	e7d9      	b.n	8007546 <_printf_common+0x92>
	...

08007594 <_printf_i>:
 8007594:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007598:	7e0f      	ldrb	r7, [r1, #24]
 800759a:	4691      	mov	r9, r2
 800759c:	2f78      	cmp	r7, #120	; 0x78
 800759e:	4680      	mov	r8, r0
 80075a0:	460c      	mov	r4, r1
 80075a2:	469a      	mov	sl, r3
 80075a4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80075a6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80075aa:	d807      	bhi.n	80075bc <_printf_i+0x28>
 80075ac:	2f62      	cmp	r7, #98	; 0x62
 80075ae:	d80a      	bhi.n	80075c6 <_printf_i+0x32>
 80075b0:	2f00      	cmp	r7, #0
 80075b2:	f000 80d9 	beq.w	8007768 <_printf_i+0x1d4>
 80075b6:	2f58      	cmp	r7, #88	; 0x58
 80075b8:	f000 80a4 	beq.w	8007704 <_printf_i+0x170>
 80075bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80075c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80075c4:	e03a      	b.n	800763c <_printf_i+0xa8>
 80075c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80075ca:	2b15      	cmp	r3, #21
 80075cc:	d8f6      	bhi.n	80075bc <_printf_i+0x28>
 80075ce:	a101      	add	r1, pc, #4	; (adr r1, 80075d4 <_printf_i+0x40>)
 80075d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80075d4:	0800762d 	.word	0x0800762d
 80075d8:	08007641 	.word	0x08007641
 80075dc:	080075bd 	.word	0x080075bd
 80075e0:	080075bd 	.word	0x080075bd
 80075e4:	080075bd 	.word	0x080075bd
 80075e8:	080075bd 	.word	0x080075bd
 80075ec:	08007641 	.word	0x08007641
 80075f0:	080075bd 	.word	0x080075bd
 80075f4:	080075bd 	.word	0x080075bd
 80075f8:	080075bd 	.word	0x080075bd
 80075fc:	080075bd 	.word	0x080075bd
 8007600:	0800774f 	.word	0x0800774f
 8007604:	08007671 	.word	0x08007671
 8007608:	08007731 	.word	0x08007731
 800760c:	080075bd 	.word	0x080075bd
 8007610:	080075bd 	.word	0x080075bd
 8007614:	08007771 	.word	0x08007771
 8007618:	080075bd 	.word	0x080075bd
 800761c:	08007671 	.word	0x08007671
 8007620:	080075bd 	.word	0x080075bd
 8007624:	080075bd 	.word	0x080075bd
 8007628:	08007739 	.word	0x08007739
 800762c:	682b      	ldr	r3, [r5, #0]
 800762e:	1d1a      	adds	r2, r3, #4
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	602a      	str	r2, [r5, #0]
 8007634:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007638:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800763c:	2301      	movs	r3, #1
 800763e:	e0a4      	b.n	800778a <_printf_i+0x1f6>
 8007640:	6820      	ldr	r0, [r4, #0]
 8007642:	6829      	ldr	r1, [r5, #0]
 8007644:	0606      	lsls	r6, r0, #24
 8007646:	f101 0304 	add.w	r3, r1, #4
 800764a:	d50a      	bpl.n	8007662 <_printf_i+0xce>
 800764c:	680e      	ldr	r6, [r1, #0]
 800764e:	602b      	str	r3, [r5, #0]
 8007650:	2e00      	cmp	r6, #0
 8007652:	da03      	bge.n	800765c <_printf_i+0xc8>
 8007654:	232d      	movs	r3, #45	; 0x2d
 8007656:	4276      	negs	r6, r6
 8007658:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800765c:	230a      	movs	r3, #10
 800765e:	485e      	ldr	r0, [pc, #376]	; (80077d8 <_printf_i+0x244>)
 8007660:	e019      	b.n	8007696 <_printf_i+0x102>
 8007662:	680e      	ldr	r6, [r1, #0]
 8007664:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007668:	602b      	str	r3, [r5, #0]
 800766a:	bf18      	it	ne
 800766c:	b236      	sxthne	r6, r6
 800766e:	e7ef      	b.n	8007650 <_printf_i+0xbc>
 8007670:	682b      	ldr	r3, [r5, #0]
 8007672:	6820      	ldr	r0, [r4, #0]
 8007674:	1d19      	adds	r1, r3, #4
 8007676:	6029      	str	r1, [r5, #0]
 8007678:	0601      	lsls	r1, r0, #24
 800767a:	d501      	bpl.n	8007680 <_printf_i+0xec>
 800767c:	681e      	ldr	r6, [r3, #0]
 800767e:	e002      	b.n	8007686 <_printf_i+0xf2>
 8007680:	0646      	lsls	r6, r0, #25
 8007682:	d5fb      	bpl.n	800767c <_printf_i+0xe8>
 8007684:	881e      	ldrh	r6, [r3, #0]
 8007686:	2f6f      	cmp	r7, #111	; 0x6f
 8007688:	bf0c      	ite	eq
 800768a:	2308      	moveq	r3, #8
 800768c:	230a      	movne	r3, #10
 800768e:	4852      	ldr	r0, [pc, #328]	; (80077d8 <_printf_i+0x244>)
 8007690:	2100      	movs	r1, #0
 8007692:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007696:	6865      	ldr	r5, [r4, #4]
 8007698:	2d00      	cmp	r5, #0
 800769a:	bfa8      	it	ge
 800769c:	6821      	ldrge	r1, [r4, #0]
 800769e:	60a5      	str	r5, [r4, #8]
 80076a0:	bfa4      	itt	ge
 80076a2:	f021 0104 	bicge.w	r1, r1, #4
 80076a6:	6021      	strge	r1, [r4, #0]
 80076a8:	b90e      	cbnz	r6, 80076ae <_printf_i+0x11a>
 80076aa:	2d00      	cmp	r5, #0
 80076ac:	d04d      	beq.n	800774a <_printf_i+0x1b6>
 80076ae:	4615      	mov	r5, r2
 80076b0:	fbb6 f1f3 	udiv	r1, r6, r3
 80076b4:	fb03 6711 	mls	r7, r3, r1, r6
 80076b8:	5dc7      	ldrb	r7, [r0, r7]
 80076ba:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80076be:	4637      	mov	r7, r6
 80076c0:	42bb      	cmp	r3, r7
 80076c2:	460e      	mov	r6, r1
 80076c4:	d9f4      	bls.n	80076b0 <_printf_i+0x11c>
 80076c6:	2b08      	cmp	r3, #8
 80076c8:	d10b      	bne.n	80076e2 <_printf_i+0x14e>
 80076ca:	6823      	ldr	r3, [r4, #0]
 80076cc:	07de      	lsls	r6, r3, #31
 80076ce:	d508      	bpl.n	80076e2 <_printf_i+0x14e>
 80076d0:	6923      	ldr	r3, [r4, #16]
 80076d2:	6861      	ldr	r1, [r4, #4]
 80076d4:	4299      	cmp	r1, r3
 80076d6:	bfde      	ittt	le
 80076d8:	2330      	movle	r3, #48	; 0x30
 80076da:	f805 3c01 	strble.w	r3, [r5, #-1]
 80076de:	f105 35ff 	addle.w	r5, r5, #4294967295
 80076e2:	1b52      	subs	r2, r2, r5
 80076e4:	6122      	str	r2, [r4, #16]
 80076e6:	464b      	mov	r3, r9
 80076e8:	4621      	mov	r1, r4
 80076ea:	4640      	mov	r0, r8
 80076ec:	f8cd a000 	str.w	sl, [sp]
 80076f0:	aa03      	add	r2, sp, #12
 80076f2:	f7ff fedf 	bl	80074b4 <_printf_common>
 80076f6:	3001      	adds	r0, #1
 80076f8:	d14c      	bne.n	8007794 <_printf_i+0x200>
 80076fa:	f04f 30ff 	mov.w	r0, #4294967295
 80076fe:	b004      	add	sp, #16
 8007700:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007704:	4834      	ldr	r0, [pc, #208]	; (80077d8 <_printf_i+0x244>)
 8007706:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800770a:	6829      	ldr	r1, [r5, #0]
 800770c:	6823      	ldr	r3, [r4, #0]
 800770e:	f851 6b04 	ldr.w	r6, [r1], #4
 8007712:	6029      	str	r1, [r5, #0]
 8007714:	061d      	lsls	r5, r3, #24
 8007716:	d514      	bpl.n	8007742 <_printf_i+0x1ae>
 8007718:	07df      	lsls	r7, r3, #31
 800771a:	bf44      	itt	mi
 800771c:	f043 0320 	orrmi.w	r3, r3, #32
 8007720:	6023      	strmi	r3, [r4, #0]
 8007722:	b91e      	cbnz	r6, 800772c <_printf_i+0x198>
 8007724:	6823      	ldr	r3, [r4, #0]
 8007726:	f023 0320 	bic.w	r3, r3, #32
 800772a:	6023      	str	r3, [r4, #0]
 800772c:	2310      	movs	r3, #16
 800772e:	e7af      	b.n	8007690 <_printf_i+0xfc>
 8007730:	6823      	ldr	r3, [r4, #0]
 8007732:	f043 0320 	orr.w	r3, r3, #32
 8007736:	6023      	str	r3, [r4, #0]
 8007738:	2378      	movs	r3, #120	; 0x78
 800773a:	4828      	ldr	r0, [pc, #160]	; (80077dc <_printf_i+0x248>)
 800773c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007740:	e7e3      	b.n	800770a <_printf_i+0x176>
 8007742:	0659      	lsls	r1, r3, #25
 8007744:	bf48      	it	mi
 8007746:	b2b6      	uxthmi	r6, r6
 8007748:	e7e6      	b.n	8007718 <_printf_i+0x184>
 800774a:	4615      	mov	r5, r2
 800774c:	e7bb      	b.n	80076c6 <_printf_i+0x132>
 800774e:	682b      	ldr	r3, [r5, #0]
 8007750:	6826      	ldr	r6, [r4, #0]
 8007752:	1d18      	adds	r0, r3, #4
 8007754:	6961      	ldr	r1, [r4, #20]
 8007756:	6028      	str	r0, [r5, #0]
 8007758:	0635      	lsls	r5, r6, #24
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	d501      	bpl.n	8007762 <_printf_i+0x1ce>
 800775e:	6019      	str	r1, [r3, #0]
 8007760:	e002      	b.n	8007768 <_printf_i+0x1d4>
 8007762:	0670      	lsls	r0, r6, #25
 8007764:	d5fb      	bpl.n	800775e <_printf_i+0x1ca>
 8007766:	8019      	strh	r1, [r3, #0]
 8007768:	2300      	movs	r3, #0
 800776a:	4615      	mov	r5, r2
 800776c:	6123      	str	r3, [r4, #16]
 800776e:	e7ba      	b.n	80076e6 <_printf_i+0x152>
 8007770:	682b      	ldr	r3, [r5, #0]
 8007772:	2100      	movs	r1, #0
 8007774:	1d1a      	adds	r2, r3, #4
 8007776:	602a      	str	r2, [r5, #0]
 8007778:	681d      	ldr	r5, [r3, #0]
 800777a:	6862      	ldr	r2, [r4, #4]
 800777c:	4628      	mov	r0, r5
 800777e:	f000 fb89 	bl	8007e94 <memchr>
 8007782:	b108      	cbz	r0, 8007788 <_printf_i+0x1f4>
 8007784:	1b40      	subs	r0, r0, r5
 8007786:	6060      	str	r0, [r4, #4]
 8007788:	6863      	ldr	r3, [r4, #4]
 800778a:	6123      	str	r3, [r4, #16]
 800778c:	2300      	movs	r3, #0
 800778e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007792:	e7a8      	b.n	80076e6 <_printf_i+0x152>
 8007794:	462a      	mov	r2, r5
 8007796:	4649      	mov	r1, r9
 8007798:	4640      	mov	r0, r8
 800779a:	6923      	ldr	r3, [r4, #16]
 800779c:	47d0      	blx	sl
 800779e:	3001      	adds	r0, #1
 80077a0:	d0ab      	beq.n	80076fa <_printf_i+0x166>
 80077a2:	6823      	ldr	r3, [r4, #0]
 80077a4:	079b      	lsls	r3, r3, #30
 80077a6:	d413      	bmi.n	80077d0 <_printf_i+0x23c>
 80077a8:	68e0      	ldr	r0, [r4, #12]
 80077aa:	9b03      	ldr	r3, [sp, #12]
 80077ac:	4298      	cmp	r0, r3
 80077ae:	bfb8      	it	lt
 80077b0:	4618      	movlt	r0, r3
 80077b2:	e7a4      	b.n	80076fe <_printf_i+0x16a>
 80077b4:	2301      	movs	r3, #1
 80077b6:	4632      	mov	r2, r6
 80077b8:	4649      	mov	r1, r9
 80077ba:	4640      	mov	r0, r8
 80077bc:	47d0      	blx	sl
 80077be:	3001      	adds	r0, #1
 80077c0:	d09b      	beq.n	80076fa <_printf_i+0x166>
 80077c2:	3501      	adds	r5, #1
 80077c4:	68e3      	ldr	r3, [r4, #12]
 80077c6:	9903      	ldr	r1, [sp, #12]
 80077c8:	1a5b      	subs	r3, r3, r1
 80077ca:	42ab      	cmp	r3, r5
 80077cc:	dcf2      	bgt.n	80077b4 <_printf_i+0x220>
 80077ce:	e7eb      	b.n	80077a8 <_printf_i+0x214>
 80077d0:	2500      	movs	r5, #0
 80077d2:	f104 0619 	add.w	r6, r4, #25
 80077d6:	e7f5      	b.n	80077c4 <_printf_i+0x230>
 80077d8:	08008970 	.word	0x08008970
 80077dc:	08008981 	.word	0x08008981

080077e0 <__sread>:
 80077e0:	b510      	push	{r4, lr}
 80077e2:	460c      	mov	r4, r1
 80077e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077e8:	f000 fbac 	bl	8007f44 <_read_r>
 80077ec:	2800      	cmp	r0, #0
 80077ee:	bfab      	itete	ge
 80077f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80077f2:	89a3      	ldrhlt	r3, [r4, #12]
 80077f4:	181b      	addge	r3, r3, r0
 80077f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80077fa:	bfac      	ite	ge
 80077fc:	6563      	strge	r3, [r4, #84]	; 0x54
 80077fe:	81a3      	strhlt	r3, [r4, #12]
 8007800:	bd10      	pop	{r4, pc}

08007802 <__swrite>:
 8007802:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007806:	461f      	mov	r7, r3
 8007808:	898b      	ldrh	r3, [r1, #12]
 800780a:	4605      	mov	r5, r0
 800780c:	05db      	lsls	r3, r3, #23
 800780e:	460c      	mov	r4, r1
 8007810:	4616      	mov	r6, r2
 8007812:	d505      	bpl.n	8007820 <__swrite+0x1e>
 8007814:	2302      	movs	r3, #2
 8007816:	2200      	movs	r2, #0
 8007818:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800781c:	f000 fac2 	bl	8007da4 <_lseek_r>
 8007820:	89a3      	ldrh	r3, [r4, #12]
 8007822:	4632      	mov	r2, r6
 8007824:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007828:	81a3      	strh	r3, [r4, #12]
 800782a:	4628      	mov	r0, r5
 800782c:	463b      	mov	r3, r7
 800782e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007832:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007836:	f000 b869 	b.w	800790c <_write_r>

0800783a <__sseek>:
 800783a:	b510      	push	{r4, lr}
 800783c:	460c      	mov	r4, r1
 800783e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007842:	f000 faaf 	bl	8007da4 <_lseek_r>
 8007846:	1c43      	adds	r3, r0, #1
 8007848:	89a3      	ldrh	r3, [r4, #12]
 800784a:	bf15      	itete	ne
 800784c:	6560      	strne	r0, [r4, #84]	; 0x54
 800784e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007852:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007856:	81a3      	strheq	r3, [r4, #12]
 8007858:	bf18      	it	ne
 800785a:	81a3      	strhne	r3, [r4, #12]
 800785c:	bd10      	pop	{r4, pc}

0800785e <__sclose>:
 800785e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007862:	f000 b8db 	b.w	8007a1c <_close_r>
	...

08007868 <__swbuf_r>:
 8007868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800786a:	460e      	mov	r6, r1
 800786c:	4614      	mov	r4, r2
 800786e:	4605      	mov	r5, r0
 8007870:	b118      	cbz	r0, 800787a <__swbuf_r+0x12>
 8007872:	6983      	ldr	r3, [r0, #24]
 8007874:	b90b      	cbnz	r3, 800787a <__swbuf_r+0x12>
 8007876:	f000 f9f7 	bl	8007c68 <__sinit>
 800787a:	4b21      	ldr	r3, [pc, #132]	; (8007900 <__swbuf_r+0x98>)
 800787c:	429c      	cmp	r4, r3
 800787e:	d12b      	bne.n	80078d8 <__swbuf_r+0x70>
 8007880:	686c      	ldr	r4, [r5, #4]
 8007882:	69a3      	ldr	r3, [r4, #24]
 8007884:	60a3      	str	r3, [r4, #8]
 8007886:	89a3      	ldrh	r3, [r4, #12]
 8007888:	071a      	lsls	r2, r3, #28
 800788a:	d52f      	bpl.n	80078ec <__swbuf_r+0x84>
 800788c:	6923      	ldr	r3, [r4, #16]
 800788e:	b36b      	cbz	r3, 80078ec <__swbuf_r+0x84>
 8007890:	6923      	ldr	r3, [r4, #16]
 8007892:	6820      	ldr	r0, [r4, #0]
 8007894:	b2f6      	uxtb	r6, r6
 8007896:	1ac0      	subs	r0, r0, r3
 8007898:	6963      	ldr	r3, [r4, #20]
 800789a:	4637      	mov	r7, r6
 800789c:	4283      	cmp	r3, r0
 800789e:	dc04      	bgt.n	80078aa <__swbuf_r+0x42>
 80078a0:	4621      	mov	r1, r4
 80078a2:	4628      	mov	r0, r5
 80078a4:	f000 f94c 	bl	8007b40 <_fflush_r>
 80078a8:	bb30      	cbnz	r0, 80078f8 <__swbuf_r+0x90>
 80078aa:	68a3      	ldr	r3, [r4, #8]
 80078ac:	3001      	adds	r0, #1
 80078ae:	3b01      	subs	r3, #1
 80078b0:	60a3      	str	r3, [r4, #8]
 80078b2:	6823      	ldr	r3, [r4, #0]
 80078b4:	1c5a      	adds	r2, r3, #1
 80078b6:	6022      	str	r2, [r4, #0]
 80078b8:	701e      	strb	r6, [r3, #0]
 80078ba:	6963      	ldr	r3, [r4, #20]
 80078bc:	4283      	cmp	r3, r0
 80078be:	d004      	beq.n	80078ca <__swbuf_r+0x62>
 80078c0:	89a3      	ldrh	r3, [r4, #12]
 80078c2:	07db      	lsls	r3, r3, #31
 80078c4:	d506      	bpl.n	80078d4 <__swbuf_r+0x6c>
 80078c6:	2e0a      	cmp	r6, #10
 80078c8:	d104      	bne.n	80078d4 <__swbuf_r+0x6c>
 80078ca:	4621      	mov	r1, r4
 80078cc:	4628      	mov	r0, r5
 80078ce:	f000 f937 	bl	8007b40 <_fflush_r>
 80078d2:	b988      	cbnz	r0, 80078f8 <__swbuf_r+0x90>
 80078d4:	4638      	mov	r0, r7
 80078d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80078d8:	4b0a      	ldr	r3, [pc, #40]	; (8007904 <__swbuf_r+0x9c>)
 80078da:	429c      	cmp	r4, r3
 80078dc:	d101      	bne.n	80078e2 <__swbuf_r+0x7a>
 80078de:	68ac      	ldr	r4, [r5, #8]
 80078e0:	e7cf      	b.n	8007882 <__swbuf_r+0x1a>
 80078e2:	4b09      	ldr	r3, [pc, #36]	; (8007908 <__swbuf_r+0xa0>)
 80078e4:	429c      	cmp	r4, r3
 80078e6:	bf08      	it	eq
 80078e8:	68ec      	ldreq	r4, [r5, #12]
 80078ea:	e7ca      	b.n	8007882 <__swbuf_r+0x1a>
 80078ec:	4621      	mov	r1, r4
 80078ee:	4628      	mov	r0, r5
 80078f0:	f000 f81e 	bl	8007930 <__swsetup_r>
 80078f4:	2800      	cmp	r0, #0
 80078f6:	d0cb      	beq.n	8007890 <__swbuf_r+0x28>
 80078f8:	f04f 37ff 	mov.w	r7, #4294967295
 80078fc:	e7ea      	b.n	80078d4 <__swbuf_r+0x6c>
 80078fe:	bf00      	nop
 8007900:	080089b4 	.word	0x080089b4
 8007904:	080089d4 	.word	0x080089d4
 8007908:	08008994 	.word	0x08008994

0800790c <_write_r>:
 800790c:	b538      	push	{r3, r4, r5, lr}
 800790e:	4604      	mov	r4, r0
 8007910:	4608      	mov	r0, r1
 8007912:	4611      	mov	r1, r2
 8007914:	2200      	movs	r2, #0
 8007916:	4d05      	ldr	r5, [pc, #20]	; (800792c <_write_r+0x20>)
 8007918:	602a      	str	r2, [r5, #0]
 800791a:	461a      	mov	r2, r3
 800791c:	f7fa fd18 	bl	8002350 <_write>
 8007920:	1c43      	adds	r3, r0, #1
 8007922:	d102      	bne.n	800792a <_write_r+0x1e>
 8007924:	682b      	ldr	r3, [r5, #0]
 8007926:	b103      	cbz	r3, 800792a <_write_r+0x1e>
 8007928:	6023      	str	r3, [r4, #0]
 800792a:	bd38      	pop	{r3, r4, r5, pc}
 800792c:	20002af0 	.word	0x20002af0

08007930 <__swsetup_r>:
 8007930:	4b32      	ldr	r3, [pc, #200]	; (80079fc <__swsetup_r+0xcc>)
 8007932:	b570      	push	{r4, r5, r6, lr}
 8007934:	681d      	ldr	r5, [r3, #0]
 8007936:	4606      	mov	r6, r0
 8007938:	460c      	mov	r4, r1
 800793a:	b125      	cbz	r5, 8007946 <__swsetup_r+0x16>
 800793c:	69ab      	ldr	r3, [r5, #24]
 800793e:	b913      	cbnz	r3, 8007946 <__swsetup_r+0x16>
 8007940:	4628      	mov	r0, r5
 8007942:	f000 f991 	bl	8007c68 <__sinit>
 8007946:	4b2e      	ldr	r3, [pc, #184]	; (8007a00 <__swsetup_r+0xd0>)
 8007948:	429c      	cmp	r4, r3
 800794a:	d10f      	bne.n	800796c <__swsetup_r+0x3c>
 800794c:	686c      	ldr	r4, [r5, #4]
 800794e:	89a3      	ldrh	r3, [r4, #12]
 8007950:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007954:	0719      	lsls	r1, r3, #28
 8007956:	d42c      	bmi.n	80079b2 <__swsetup_r+0x82>
 8007958:	06dd      	lsls	r5, r3, #27
 800795a:	d411      	bmi.n	8007980 <__swsetup_r+0x50>
 800795c:	2309      	movs	r3, #9
 800795e:	6033      	str	r3, [r6, #0]
 8007960:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007964:	f04f 30ff 	mov.w	r0, #4294967295
 8007968:	81a3      	strh	r3, [r4, #12]
 800796a:	e03e      	b.n	80079ea <__swsetup_r+0xba>
 800796c:	4b25      	ldr	r3, [pc, #148]	; (8007a04 <__swsetup_r+0xd4>)
 800796e:	429c      	cmp	r4, r3
 8007970:	d101      	bne.n	8007976 <__swsetup_r+0x46>
 8007972:	68ac      	ldr	r4, [r5, #8]
 8007974:	e7eb      	b.n	800794e <__swsetup_r+0x1e>
 8007976:	4b24      	ldr	r3, [pc, #144]	; (8007a08 <__swsetup_r+0xd8>)
 8007978:	429c      	cmp	r4, r3
 800797a:	bf08      	it	eq
 800797c:	68ec      	ldreq	r4, [r5, #12]
 800797e:	e7e6      	b.n	800794e <__swsetup_r+0x1e>
 8007980:	0758      	lsls	r0, r3, #29
 8007982:	d512      	bpl.n	80079aa <__swsetup_r+0x7a>
 8007984:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007986:	b141      	cbz	r1, 800799a <__swsetup_r+0x6a>
 8007988:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800798c:	4299      	cmp	r1, r3
 800798e:	d002      	beq.n	8007996 <__swsetup_r+0x66>
 8007990:	4630      	mov	r0, r6
 8007992:	f7ff f8cb 	bl	8006b2c <_free_r>
 8007996:	2300      	movs	r3, #0
 8007998:	6363      	str	r3, [r4, #52]	; 0x34
 800799a:	89a3      	ldrh	r3, [r4, #12]
 800799c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80079a0:	81a3      	strh	r3, [r4, #12]
 80079a2:	2300      	movs	r3, #0
 80079a4:	6063      	str	r3, [r4, #4]
 80079a6:	6923      	ldr	r3, [r4, #16]
 80079a8:	6023      	str	r3, [r4, #0]
 80079aa:	89a3      	ldrh	r3, [r4, #12]
 80079ac:	f043 0308 	orr.w	r3, r3, #8
 80079b0:	81a3      	strh	r3, [r4, #12]
 80079b2:	6923      	ldr	r3, [r4, #16]
 80079b4:	b94b      	cbnz	r3, 80079ca <__swsetup_r+0x9a>
 80079b6:	89a3      	ldrh	r3, [r4, #12]
 80079b8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80079bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80079c0:	d003      	beq.n	80079ca <__swsetup_r+0x9a>
 80079c2:	4621      	mov	r1, r4
 80079c4:	4630      	mov	r0, r6
 80079c6:	f000 fa25 	bl	8007e14 <__smakebuf_r>
 80079ca:	89a0      	ldrh	r0, [r4, #12]
 80079cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80079d0:	f010 0301 	ands.w	r3, r0, #1
 80079d4:	d00a      	beq.n	80079ec <__swsetup_r+0xbc>
 80079d6:	2300      	movs	r3, #0
 80079d8:	60a3      	str	r3, [r4, #8]
 80079da:	6963      	ldr	r3, [r4, #20]
 80079dc:	425b      	negs	r3, r3
 80079de:	61a3      	str	r3, [r4, #24]
 80079e0:	6923      	ldr	r3, [r4, #16]
 80079e2:	b943      	cbnz	r3, 80079f6 <__swsetup_r+0xc6>
 80079e4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80079e8:	d1ba      	bne.n	8007960 <__swsetup_r+0x30>
 80079ea:	bd70      	pop	{r4, r5, r6, pc}
 80079ec:	0781      	lsls	r1, r0, #30
 80079ee:	bf58      	it	pl
 80079f0:	6963      	ldrpl	r3, [r4, #20]
 80079f2:	60a3      	str	r3, [r4, #8]
 80079f4:	e7f4      	b.n	80079e0 <__swsetup_r+0xb0>
 80079f6:	2000      	movs	r0, #0
 80079f8:	e7f7      	b.n	80079ea <__swsetup_r+0xba>
 80079fa:	bf00      	nop
 80079fc:	200000b8 	.word	0x200000b8
 8007a00:	080089b4 	.word	0x080089b4
 8007a04:	080089d4 	.word	0x080089d4
 8007a08:	08008994 	.word	0x08008994

08007a0c <abort>:
 8007a0c:	2006      	movs	r0, #6
 8007a0e:	b508      	push	{r3, lr}
 8007a10:	f000 fad2 	bl	8007fb8 <raise>
 8007a14:	2001      	movs	r0, #1
 8007a16:	f7fa fc74 	bl	8002302 <_exit>
	...

08007a1c <_close_r>:
 8007a1c:	b538      	push	{r3, r4, r5, lr}
 8007a1e:	2300      	movs	r3, #0
 8007a20:	4d05      	ldr	r5, [pc, #20]	; (8007a38 <_close_r+0x1c>)
 8007a22:	4604      	mov	r4, r0
 8007a24:	4608      	mov	r0, r1
 8007a26:	602b      	str	r3, [r5, #0]
 8007a28:	f7fa fcae 	bl	8002388 <_close>
 8007a2c:	1c43      	adds	r3, r0, #1
 8007a2e:	d102      	bne.n	8007a36 <_close_r+0x1a>
 8007a30:	682b      	ldr	r3, [r5, #0]
 8007a32:	b103      	cbz	r3, 8007a36 <_close_r+0x1a>
 8007a34:	6023      	str	r3, [r4, #0]
 8007a36:	bd38      	pop	{r3, r4, r5, pc}
 8007a38:	20002af0 	.word	0x20002af0

08007a3c <__sflush_r>:
 8007a3c:	898a      	ldrh	r2, [r1, #12]
 8007a3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a40:	4605      	mov	r5, r0
 8007a42:	0710      	lsls	r0, r2, #28
 8007a44:	460c      	mov	r4, r1
 8007a46:	d457      	bmi.n	8007af8 <__sflush_r+0xbc>
 8007a48:	684b      	ldr	r3, [r1, #4]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	dc04      	bgt.n	8007a58 <__sflush_r+0x1c>
 8007a4e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	dc01      	bgt.n	8007a58 <__sflush_r+0x1c>
 8007a54:	2000      	movs	r0, #0
 8007a56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a58:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007a5a:	2e00      	cmp	r6, #0
 8007a5c:	d0fa      	beq.n	8007a54 <__sflush_r+0x18>
 8007a5e:	2300      	movs	r3, #0
 8007a60:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007a64:	682f      	ldr	r7, [r5, #0]
 8007a66:	602b      	str	r3, [r5, #0]
 8007a68:	d032      	beq.n	8007ad0 <__sflush_r+0x94>
 8007a6a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007a6c:	89a3      	ldrh	r3, [r4, #12]
 8007a6e:	075a      	lsls	r2, r3, #29
 8007a70:	d505      	bpl.n	8007a7e <__sflush_r+0x42>
 8007a72:	6863      	ldr	r3, [r4, #4]
 8007a74:	1ac0      	subs	r0, r0, r3
 8007a76:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007a78:	b10b      	cbz	r3, 8007a7e <__sflush_r+0x42>
 8007a7a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007a7c:	1ac0      	subs	r0, r0, r3
 8007a7e:	2300      	movs	r3, #0
 8007a80:	4602      	mov	r2, r0
 8007a82:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007a84:	4628      	mov	r0, r5
 8007a86:	6a21      	ldr	r1, [r4, #32]
 8007a88:	47b0      	blx	r6
 8007a8a:	1c43      	adds	r3, r0, #1
 8007a8c:	89a3      	ldrh	r3, [r4, #12]
 8007a8e:	d106      	bne.n	8007a9e <__sflush_r+0x62>
 8007a90:	6829      	ldr	r1, [r5, #0]
 8007a92:	291d      	cmp	r1, #29
 8007a94:	d82c      	bhi.n	8007af0 <__sflush_r+0xb4>
 8007a96:	4a29      	ldr	r2, [pc, #164]	; (8007b3c <__sflush_r+0x100>)
 8007a98:	40ca      	lsrs	r2, r1
 8007a9a:	07d6      	lsls	r6, r2, #31
 8007a9c:	d528      	bpl.n	8007af0 <__sflush_r+0xb4>
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	6062      	str	r2, [r4, #4]
 8007aa2:	6922      	ldr	r2, [r4, #16]
 8007aa4:	04d9      	lsls	r1, r3, #19
 8007aa6:	6022      	str	r2, [r4, #0]
 8007aa8:	d504      	bpl.n	8007ab4 <__sflush_r+0x78>
 8007aaa:	1c42      	adds	r2, r0, #1
 8007aac:	d101      	bne.n	8007ab2 <__sflush_r+0x76>
 8007aae:	682b      	ldr	r3, [r5, #0]
 8007ab0:	b903      	cbnz	r3, 8007ab4 <__sflush_r+0x78>
 8007ab2:	6560      	str	r0, [r4, #84]	; 0x54
 8007ab4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007ab6:	602f      	str	r7, [r5, #0]
 8007ab8:	2900      	cmp	r1, #0
 8007aba:	d0cb      	beq.n	8007a54 <__sflush_r+0x18>
 8007abc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007ac0:	4299      	cmp	r1, r3
 8007ac2:	d002      	beq.n	8007aca <__sflush_r+0x8e>
 8007ac4:	4628      	mov	r0, r5
 8007ac6:	f7ff f831 	bl	8006b2c <_free_r>
 8007aca:	2000      	movs	r0, #0
 8007acc:	6360      	str	r0, [r4, #52]	; 0x34
 8007ace:	e7c2      	b.n	8007a56 <__sflush_r+0x1a>
 8007ad0:	6a21      	ldr	r1, [r4, #32]
 8007ad2:	2301      	movs	r3, #1
 8007ad4:	4628      	mov	r0, r5
 8007ad6:	47b0      	blx	r6
 8007ad8:	1c41      	adds	r1, r0, #1
 8007ada:	d1c7      	bne.n	8007a6c <__sflush_r+0x30>
 8007adc:	682b      	ldr	r3, [r5, #0]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d0c4      	beq.n	8007a6c <__sflush_r+0x30>
 8007ae2:	2b1d      	cmp	r3, #29
 8007ae4:	d001      	beq.n	8007aea <__sflush_r+0xae>
 8007ae6:	2b16      	cmp	r3, #22
 8007ae8:	d101      	bne.n	8007aee <__sflush_r+0xb2>
 8007aea:	602f      	str	r7, [r5, #0]
 8007aec:	e7b2      	b.n	8007a54 <__sflush_r+0x18>
 8007aee:	89a3      	ldrh	r3, [r4, #12]
 8007af0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007af4:	81a3      	strh	r3, [r4, #12]
 8007af6:	e7ae      	b.n	8007a56 <__sflush_r+0x1a>
 8007af8:	690f      	ldr	r7, [r1, #16]
 8007afa:	2f00      	cmp	r7, #0
 8007afc:	d0aa      	beq.n	8007a54 <__sflush_r+0x18>
 8007afe:	0793      	lsls	r3, r2, #30
 8007b00:	bf18      	it	ne
 8007b02:	2300      	movne	r3, #0
 8007b04:	680e      	ldr	r6, [r1, #0]
 8007b06:	bf08      	it	eq
 8007b08:	694b      	ldreq	r3, [r1, #20]
 8007b0a:	1bf6      	subs	r6, r6, r7
 8007b0c:	600f      	str	r7, [r1, #0]
 8007b0e:	608b      	str	r3, [r1, #8]
 8007b10:	2e00      	cmp	r6, #0
 8007b12:	dd9f      	ble.n	8007a54 <__sflush_r+0x18>
 8007b14:	4633      	mov	r3, r6
 8007b16:	463a      	mov	r2, r7
 8007b18:	4628      	mov	r0, r5
 8007b1a:	6a21      	ldr	r1, [r4, #32]
 8007b1c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8007b20:	47e0      	blx	ip
 8007b22:	2800      	cmp	r0, #0
 8007b24:	dc06      	bgt.n	8007b34 <__sflush_r+0xf8>
 8007b26:	89a3      	ldrh	r3, [r4, #12]
 8007b28:	f04f 30ff 	mov.w	r0, #4294967295
 8007b2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b30:	81a3      	strh	r3, [r4, #12]
 8007b32:	e790      	b.n	8007a56 <__sflush_r+0x1a>
 8007b34:	4407      	add	r7, r0
 8007b36:	1a36      	subs	r6, r6, r0
 8007b38:	e7ea      	b.n	8007b10 <__sflush_r+0xd4>
 8007b3a:	bf00      	nop
 8007b3c:	20400001 	.word	0x20400001

08007b40 <_fflush_r>:
 8007b40:	b538      	push	{r3, r4, r5, lr}
 8007b42:	690b      	ldr	r3, [r1, #16]
 8007b44:	4605      	mov	r5, r0
 8007b46:	460c      	mov	r4, r1
 8007b48:	b913      	cbnz	r3, 8007b50 <_fflush_r+0x10>
 8007b4a:	2500      	movs	r5, #0
 8007b4c:	4628      	mov	r0, r5
 8007b4e:	bd38      	pop	{r3, r4, r5, pc}
 8007b50:	b118      	cbz	r0, 8007b5a <_fflush_r+0x1a>
 8007b52:	6983      	ldr	r3, [r0, #24]
 8007b54:	b90b      	cbnz	r3, 8007b5a <_fflush_r+0x1a>
 8007b56:	f000 f887 	bl	8007c68 <__sinit>
 8007b5a:	4b14      	ldr	r3, [pc, #80]	; (8007bac <_fflush_r+0x6c>)
 8007b5c:	429c      	cmp	r4, r3
 8007b5e:	d11b      	bne.n	8007b98 <_fflush_r+0x58>
 8007b60:	686c      	ldr	r4, [r5, #4]
 8007b62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d0ef      	beq.n	8007b4a <_fflush_r+0xa>
 8007b6a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007b6c:	07d0      	lsls	r0, r2, #31
 8007b6e:	d404      	bmi.n	8007b7a <_fflush_r+0x3a>
 8007b70:	0599      	lsls	r1, r3, #22
 8007b72:	d402      	bmi.n	8007b7a <_fflush_r+0x3a>
 8007b74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b76:	f7ff f9da 	bl	8006f2e <__retarget_lock_acquire_recursive>
 8007b7a:	4628      	mov	r0, r5
 8007b7c:	4621      	mov	r1, r4
 8007b7e:	f7ff ff5d 	bl	8007a3c <__sflush_r>
 8007b82:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007b84:	4605      	mov	r5, r0
 8007b86:	07da      	lsls	r2, r3, #31
 8007b88:	d4e0      	bmi.n	8007b4c <_fflush_r+0xc>
 8007b8a:	89a3      	ldrh	r3, [r4, #12]
 8007b8c:	059b      	lsls	r3, r3, #22
 8007b8e:	d4dd      	bmi.n	8007b4c <_fflush_r+0xc>
 8007b90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b92:	f7ff f9cd 	bl	8006f30 <__retarget_lock_release_recursive>
 8007b96:	e7d9      	b.n	8007b4c <_fflush_r+0xc>
 8007b98:	4b05      	ldr	r3, [pc, #20]	; (8007bb0 <_fflush_r+0x70>)
 8007b9a:	429c      	cmp	r4, r3
 8007b9c:	d101      	bne.n	8007ba2 <_fflush_r+0x62>
 8007b9e:	68ac      	ldr	r4, [r5, #8]
 8007ba0:	e7df      	b.n	8007b62 <_fflush_r+0x22>
 8007ba2:	4b04      	ldr	r3, [pc, #16]	; (8007bb4 <_fflush_r+0x74>)
 8007ba4:	429c      	cmp	r4, r3
 8007ba6:	bf08      	it	eq
 8007ba8:	68ec      	ldreq	r4, [r5, #12]
 8007baa:	e7da      	b.n	8007b62 <_fflush_r+0x22>
 8007bac:	080089b4 	.word	0x080089b4
 8007bb0:	080089d4 	.word	0x080089d4
 8007bb4:	08008994 	.word	0x08008994

08007bb8 <std>:
 8007bb8:	2300      	movs	r3, #0
 8007bba:	b510      	push	{r4, lr}
 8007bbc:	4604      	mov	r4, r0
 8007bbe:	e9c0 3300 	strd	r3, r3, [r0]
 8007bc2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007bc6:	6083      	str	r3, [r0, #8]
 8007bc8:	8181      	strh	r1, [r0, #12]
 8007bca:	6643      	str	r3, [r0, #100]	; 0x64
 8007bcc:	81c2      	strh	r2, [r0, #14]
 8007bce:	6183      	str	r3, [r0, #24]
 8007bd0:	4619      	mov	r1, r3
 8007bd2:	2208      	movs	r2, #8
 8007bd4:	305c      	adds	r0, #92	; 0x5c
 8007bd6:	f7fe ffa1 	bl	8006b1c <memset>
 8007bda:	4b05      	ldr	r3, [pc, #20]	; (8007bf0 <std+0x38>)
 8007bdc:	6224      	str	r4, [r4, #32]
 8007bde:	6263      	str	r3, [r4, #36]	; 0x24
 8007be0:	4b04      	ldr	r3, [pc, #16]	; (8007bf4 <std+0x3c>)
 8007be2:	62a3      	str	r3, [r4, #40]	; 0x28
 8007be4:	4b04      	ldr	r3, [pc, #16]	; (8007bf8 <std+0x40>)
 8007be6:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007be8:	4b04      	ldr	r3, [pc, #16]	; (8007bfc <std+0x44>)
 8007bea:	6323      	str	r3, [r4, #48]	; 0x30
 8007bec:	bd10      	pop	{r4, pc}
 8007bee:	bf00      	nop
 8007bf0:	080077e1 	.word	0x080077e1
 8007bf4:	08007803 	.word	0x08007803
 8007bf8:	0800783b 	.word	0x0800783b
 8007bfc:	0800785f 	.word	0x0800785f

08007c00 <_cleanup_r>:
 8007c00:	4901      	ldr	r1, [pc, #4]	; (8007c08 <_cleanup_r+0x8>)
 8007c02:	f000 b8af 	b.w	8007d64 <_fwalk_reent>
 8007c06:	bf00      	nop
 8007c08:	08007b41 	.word	0x08007b41

08007c0c <__sfmoreglue>:
 8007c0c:	2268      	movs	r2, #104	; 0x68
 8007c0e:	b570      	push	{r4, r5, r6, lr}
 8007c10:	1e4d      	subs	r5, r1, #1
 8007c12:	4355      	muls	r5, r2
 8007c14:	460e      	mov	r6, r1
 8007c16:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007c1a:	f7fe ffef 	bl	8006bfc <_malloc_r>
 8007c1e:	4604      	mov	r4, r0
 8007c20:	b140      	cbz	r0, 8007c34 <__sfmoreglue+0x28>
 8007c22:	2100      	movs	r1, #0
 8007c24:	e9c0 1600 	strd	r1, r6, [r0]
 8007c28:	300c      	adds	r0, #12
 8007c2a:	60a0      	str	r0, [r4, #8]
 8007c2c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007c30:	f7fe ff74 	bl	8006b1c <memset>
 8007c34:	4620      	mov	r0, r4
 8007c36:	bd70      	pop	{r4, r5, r6, pc}

08007c38 <__sfp_lock_acquire>:
 8007c38:	4801      	ldr	r0, [pc, #4]	; (8007c40 <__sfp_lock_acquire+0x8>)
 8007c3a:	f7ff b978 	b.w	8006f2e <__retarget_lock_acquire_recursive>
 8007c3e:	bf00      	nop
 8007c40:	20002aed 	.word	0x20002aed

08007c44 <__sfp_lock_release>:
 8007c44:	4801      	ldr	r0, [pc, #4]	; (8007c4c <__sfp_lock_release+0x8>)
 8007c46:	f7ff b973 	b.w	8006f30 <__retarget_lock_release_recursive>
 8007c4a:	bf00      	nop
 8007c4c:	20002aed 	.word	0x20002aed

08007c50 <__sinit_lock_acquire>:
 8007c50:	4801      	ldr	r0, [pc, #4]	; (8007c58 <__sinit_lock_acquire+0x8>)
 8007c52:	f7ff b96c 	b.w	8006f2e <__retarget_lock_acquire_recursive>
 8007c56:	bf00      	nop
 8007c58:	20002aee 	.word	0x20002aee

08007c5c <__sinit_lock_release>:
 8007c5c:	4801      	ldr	r0, [pc, #4]	; (8007c64 <__sinit_lock_release+0x8>)
 8007c5e:	f7ff b967 	b.w	8006f30 <__retarget_lock_release_recursive>
 8007c62:	bf00      	nop
 8007c64:	20002aee 	.word	0x20002aee

08007c68 <__sinit>:
 8007c68:	b510      	push	{r4, lr}
 8007c6a:	4604      	mov	r4, r0
 8007c6c:	f7ff fff0 	bl	8007c50 <__sinit_lock_acquire>
 8007c70:	69a3      	ldr	r3, [r4, #24]
 8007c72:	b11b      	cbz	r3, 8007c7c <__sinit+0x14>
 8007c74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c78:	f7ff bff0 	b.w	8007c5c <__sinit_lock_release>
 8007c7c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007c80:	6523      	str	r3, [r4, #80]	; 0x50
 8007c82:	4b13      	ldr	r3, [pc, #76]	; (8007cd0 <__sinit+0x68>)
 8007c84:	4a13      	ldr	r2, [pc, #76]	; (8007cd4 <__sinit+0x6c>)
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	62a2      	str	r2, [r4, #40]	; 0x28
 8007c8a:	42a3      	cmp	r3, r4
 8007c8c:	bf08      	it	eq
 8007c8e:	2301      	moveq	r3, #1
 8007c90:	4620      	mov	r0, r4
 8007c92:	bf08      	it	eq
 8007c94:	61a3      	streq	r3, [r4, #24]
 8007c96:	f000 f81f 	bl	8007cd8 <__sfp>
 8007c9a:	6060      	str	r0, [r4, #4]
 8007c9c:	4620      	mov	r0, r4
 8007c9e:	f000 f81b 	bl	8007cd8 <__sfp>
 8007ca2:	60a0      	str	r0, [r4, #8]
 8007ca4:	4620      	mov	r0, r4
 8007ca6:	f000 f817 	bl	8007cd8 <__sfp>
 8007caa:	2200      	movs	r2, #0
 8007cac:	2104      	movs	r1, #4
 8007cae:	60e0      	str	r0, [r4, #12]
 8007cb0:	6860      	ldr	r0, [r4, #4]
 8007cb2:	f7ff ff81 	bl	8007bb8 <std>
 8007cb6:	2201      	movs	r2, #1
 8007cb8:	2109      	movs	r1, #9
 8007cba:	68a0      	ldr	r0, [r4, #8]
 8007cbc:	f7ff ff7c 	bl	8007bb8 <std>
 8007cc0:	2202      	movs	r2, #2
 8007cc2:	2112      	movs	r1, #18
 8007cc4:	68e0      	ldr	r0, [r4, #12]
 8007cc6:	f7ff ff77 	bl	8007bb8 <std>
 8007cca:	2301      	movs	r3, #1
 8007ccc:	61a3      	str	r3, [r4, #24]
 8007cce:	e7d1      	b.n	8007c74 <__sinit+0xc>
 8007cd0:	080087ac 	.word	0x080087ac
 8007cd4:	08007c01 	.word	0x08007c01

08007cd8 <__sfp>:
 8007cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cda:	4607      	mov	r7, r0
 8007cdc:	f7ff ffac 	bl	8007c38 <__sfp_lock_acquire>
 8007ce0:	4b1e      	ldr	r3, [pc, #120]	; (8007d5c <__sfp+0x84>)
 8007ce2:	681e      	ldr	r6, [r3, #0]
 8007ce4:	69b3      	ldr	r3, [r6, #24]
 8007ce6:	b913      	cbnz	r3, 8007cee <__sfp+0x16>
 8007ce8:	4630      	mov	r0, r6
 8007cea:	f7ff ffbd 	bl	8007c68 <__sinit>
 8007cee:	3648      	adds	r6, #72	; 0x48
 8007cf0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007cf4:	3b01      	subs	r3, #1
 8007cf6:	d503      	bpl.n	8007d00 <__sfp+0x28>
 8007cf8:	6833      	ldr	r3, [r6, #0]
 8007cfa:	b30b      	cbz	r3, 8007d40 <__sfp+0x68>
 8007cfc:	6836      	ldr	r6, [r6, #0]
 8007cfe:	e7f7      	b.n	8007cf0 <__sfp+0x18>
 8007d00:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007d04:	b9d5      	cbnz	r5, 8007d3c <__sfp+0x64>
 8007d06:	4b16      	ldr	r3, [pc, #88]	; (8007d60 <__sfp+0x88>)
 8007d08:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007d0c:	60e3      	str	r3, [r4, #12]
 8007d0e:	6665      	str	r5, [r4, #100]	; 0x64
 8007d10:	f7ff f90c 	bl	8006f2c <__retarget_lock_init_recursive>
 8007d14:	f7ff ff96 	bl	8007c44 <__sfp_lock_release>
 8007d18:	2208      	movs	r2, #8
 8007d1a:	4629      	mov	r1, r5
 8007d1c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007d20:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007d24:	6025      	str	r5, [r4, #0]
 8007d26:	61a5      	str	r5, [r4, #24]
 8007d28:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007d2c:	f7fe fef6 	bl	8006b1c <memset>
 8007d30:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007d34:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007d38:	4620      	mov	r0, r4
 8007d3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d3c:	3468      	adds	r4, #104	; 0x68
 8007d3e:	e7d9      	b.n	8007cf4 <__sfp+0x1c>
 8007d40:	2104      	movs	r1, #4
 8007d42:	4638      	mov	r0, r7
 8007d44:	f7ff ff62 	bl	8007c0c <__sfmoreglue>
 8007d48:	4604      	mov	r4, r0
 8007d4a:	6030      	str	r0, [r6, #0]
 8007d4c:	2800      	cmp	r0, #0
 8007d4e:	d1d5      	bne.n	8007cfc <__sfp+0x24>
 8007d50:	f7ff ff78 	bl	8007c44 <__sfp_lock_release>
 8007d54:	230c      	movs	r3, #12
 8007d56:	603b      	str	r3, [r7, #0]
 8007d58:	e7ee      	b.n	8007d38 <__sfp+0x60>
 8007d5a:	bf00      	nop
 8007d5c:	080087ac 	.word	0x080087ac
 8007d60:	ffff0001 	.word	0xffff0001

08007d64 <_fwalk_reent>:
 8007d64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d68:	4606      	mov	r6, r0
 8007d6a:	4688      	mov	r8, r1
 8007d6c:	2700      	movs	r7, #0
 8007d6e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007d72:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007d76:	f1b9 0901 	subs.w	r9, r9, #1
 8007d7a:	d505      	bpl.n	8007d88 <_fwalk_reent+0x24>
 8007d7c:	6824      	ldr	r4, [r4, #0]
 8007d7e:	2c00      	cmp	r4, #0
 8007d80:	d1f7      	bne.n	8007d72 <_fwalk_reent+0xe>
 8007d82:	4638      	mov	r0, r7
 8007d84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d88:	89ab      	ldrh	r3, [r5, #12]
 8007d8a:	2b01      	cmp	r3, #1
 8007d8c:	d907      	bls.n	8007d9e <_fwalk_reent+0x3a>
 8007d8e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007d92:	3301      	adds	r3, #1
 8007d94:	d003      	beq.n	8007d9e <_fwalk_reent+0x3a>
 8007d96:	4629      	mov	r1, r5
 8007d98:	4630      	mov	r0, r6
 8007d9a:	47c0      	blx	r8
 8007d9c:	4307      	orrs	r7, r0
 8007d9e:	3568      	adds	r5, #104	; 0x68
 8007da0:	e7e9      	b.n	8007d76 <_fwalk_reent+0x12>
	...

08007da4 <_lseek_r>:
 8007da4:	b538      	push	{r3, r4, r5, lr}
 8007da6:	4604      	mov	r4, r0
 8007da8:	4608      	mov	r0, r1
 8007daa:	4611      	mov	r1, r2
 8007dac:	2200      	movs	r2, #0
 8007dae:	4d05      	ldr	r5, [pc, #20]	; (8007dc4 <_lseek_r+0x20>)
 8007db0:	602a      	str	r2, [r5, #0]
 8007db2:	461a      	mov	r2, r3
 8007db4:	f7fa fb0c 	bl	80023d0 <_lseek>
 8007db8:	1c43      	adds	r3, r0, #1
 8007dba:	d102      	bne.n	8007dc2 <_lseek_r+0x1e>
 8007dbc:	682b      	ldr	r3, [r5, #0]
 8007dbe:	b103      	cbz	r3, 8007dc2 <_lseek_r+0x1e>
 8007dc0:	6023      	str	r3, [r4, #0]
 8007dc2:	bd38      	pop	{r3, r4, r5, pc}
 8007dc4:	20002af0 	.word	0x20002af0

08007dc8 <__swhatbuf_r>:
 8007dc8:	b570      	push	{r4, r5, r6, lr}
 8007dca:	460e      	mov	r6, r1
 8007dcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007dd0:	4614      	mov	r4, r2
 8007dd2:	2900      	cmp	r1, #0
 8007dd4:	461d      	mov	r5, r3
 8007dd6:	b096      	sub	sp, #88	; 0x58
 8007dd8:	da08      	bge.n	8007dec <__swhatbuf_r+0x24>
 8007dda:	2200      	movs	r2, #0
 8007ddc:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007de0:	602a      	str	r2, [r5, #0]
 8007de2:	061a      	lsls	r2, r3, #24
 8007de4:	d410      	bmi.n	8007e08 <__swhatbuf_r+0x40>
 8007de6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007dea:	e00e      	b.n	8007e0a <__swhatbuf_r+0x42>
 8007dec:	466a      	mov	r2, sp
 8007dee:	f000 f8ff 	bl	8007ff0 <_fstat_r>
 8007df2:	2800      	cmp	r0, #0
 8007df4:	dbf1      	blt.n	8007dda <__swhatbuf_r+0x12>
 8007df6:	9a01      	ldr	r2, [sp, #4]
 8007df8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007dfc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007e00:	425a      	negs	r2, r3
 8007e02:	415a      	adcs	r2, r3
 8007e04:	602a      	str	r2, [r5, #0]
 8007e06:	e7ee      	b.n	8007de6 <__swhatbuf_r+0x1e>
 8007e08:	2340      	movs	r3, #64	; 0x40
 8007e0a:	2000      	movs	r0, #0
 8007e0c:	6023      	str	r3, [r4, #0]
 8007e0e:	b016      	add	sp, #88	; 0x58
 8007e10:	bd70      	pop	{r4, r5, r6, pc}
	...

08007e14 <__smakebuf_r>:
 8007e14:	898b      	ldrh	r3, [r1, #12]
 8007e16:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007e18:	079d      	lsls	r5, r3, #30
 8007e1a:	4606      	mov	r6, r0
 8007e1c:	460c      	mov	r4, r1
 8007e1e:	d507      	bpl.n	8007e30 <__smakebuf_r+0x1c>
 8007e20:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007e24:	6023      	str	r3, [r4, #0]
 8007e26:	6123      	str	r3, [r4, #16]
 8007e28:	2301      	movs	r3, #1
 8007e2a:	6163      	str	r3, [r4, #20]
 8007e2c:	b002      	add	sp, #8
 8007e2e:	bd70      	pop	{r4, r5, r6, pc}
 8007e30:	466a      	mov	r2, sp
 8007e32:	ab01      	add	r3, sp, #4
 8007e34:	f7ff ffc8 	bl	8007dc8 <__swhatbuf_r>
 8007e38:	9900      	ldr	r1, [sp, #0]
 8007e3a:	4605      	mov	r5, r0
 8007e3c:	4630      	mov	r0, r6
 8007e3e:	f7fe fedd 	bl	8006bfc <_malloc_r>
 8007e42:	b948      	cbnz	r0, 8007e58 <__smakebuf_r+0x44>
 8007e44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e48:	059a      	lsls	r2, r3, #22
 8007e4a:	d4ef      	bmi.n	8007e2c <__smakebuf_r+0x18>
 8007e4c:	f023 0303 	bic.w	r3, r3, #3
 8007e50:	f043 0302 	orr.w	r3, r3, #2
 8007e54:	81a3      	strh	r3, [r4, #12]
 8007e56:	e7e3      	b.n	8007e20 <__smakebuf_r+0xc>
 8007e58:	4b0d      	ldr	r3, [pc, #52]	; (8007e90 <__smakebuf_r+0x7c>)
 8007e5a:	62b3      	str	r3, [r6, #40]	; 0x28
 8007e5c:	89a3      	ldrh	r3, [r4, #12]
 8007e5e:	6020      	str	r0, [r4, #0]
 8007e60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e64:	81a3      	strh	r3, [r4, #12]
 8007e66:	9b00      	ldr	r3, [sp, #0]
 8007e68:	6120      	str	r0, [r4, #16]
 8007e6a:	6163      	str	r3, [r4, #20]
 8007e6c:	9b01      	ldr	r3, [sp, #4]
 8007e6e:	b15b      	cbz	r3, 8007e88 <__smakebuf_r+0x74>
 8007e70:	4630      	mov	r0, r6
 8007e72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007e76:	f000 f8cd 	bl	8008014 <_isatty_r>
 8007e7a:	b128      	cbz	r0, 8007e88 <__smakebuf_r+0x74>
 8007e7c:	89a3      	ldrh	r3, [r4, #12]
 8007e7e:	f023 0303 	bic.w	r3, r3, #3
 8007e82:	f043 0301 	orr.w	r3, r3, #1
 8007e86:	81a3      	strh	r3, [r4, #12]
 8007e88:	89a0      	ldrh	r0, [r4, #12]
 8007e8a:	4305      	orrs	r5, r0
 8007e8c:	81a5      	strh	r5, [r4, #12]
 8007e8e:	e7cd      	b.n	8007e2c <__smakebuf_r+0x18>
 8007e90:	08007c01 	.word	0x08007c01

08007e94 <memchr>:
 8007e94:	4603      	mov	r3, r0
 8007e96:	b510      	push	{r4, lr}
 8007e98:	b2c9      	uxtb	r1, r1
 8007e9a:	4402      	add	r2, r0
 8007e9c:	4293      	cmp	r3, r2
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	d101      	bne.n	8007ea6 <memchr+0x12>
 8007ea2:	2000      	movs	r0, #0
 8007ea4:	e003      	b.n	8007eae <memchr+0x1a>
 8007ea6:	7804      	ldrb	r4, [r0, #0]
 8007ea8:	3301      	adds	r3, #1
 8007eaa:	428c      	cmp	r4, r1
 8007eac:	d1f6      	bne.n	8007e9c <memchr+0x8>
 8007eae:	bd10      	pop	{r4, pc}

08007eb0 <memmove>:
 8007eb0:	4288      	cmp	r0, r1
 8007eb2:	b510      	push	{r4, lr}
 8007eb4:	eb01 0402 	add.w	r4, r1, r2
 8007eb8:	d902      	bls.n	8007ec0 <memmove+0x10>
 8007eba:	4284      	cmp	r4, r0
 8007ebc:	4623      	mov	r3, r4
 8007ebe:	d807      	bhi.n	8007ed0 <memmove+0x20>
 8007ec0:	1e43      	subs	r3, r0, #1
 8007ec2:	42a1      	cmp	r1, r4
 8007ec4:	d008      	beq.n	8007ed8 <memmove+0x28>
 8007ec6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007eca:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007ece:	e7f8      	b.n	8007ec2 <memmove+0x12>
 8007ed0:	4601      	mov	r1, r0
 8007ed2:	4402      	add	r2, r0
 8007ed4:	428a      	cmp	r2, r1
 8007ed6:	d100      	bne.n	8007eda <memmove+0x2a>
 8007ed8:	bd10      	pop	{r4, pc}
 8007eda:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007ede:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007ee2:	e7f7      	b.n	8007ed4 <memmove+0x24>

08007ee4 <_realloc_r>:
 8007ee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ee8:	4680      	mov	r8, r0
 8007eea:	4614      	mov	r4, r2
 8007eec:	460e      	mov	r6, r1
 8007eee:	b921      	cbnz	r1, 8007efa <_realloc_r+0x16>
 8007ef0:	4611      	mov	r1, r2
 8007ef2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007ef6:	f7fe be81 	b.w	8006bfc <_malloc_r>
 8007efa:	b92a      	cbnz	r2, 8007f08 <_realloc_r+0x24>
 8007efc:	f7fe fe16 	bl	8006b2c <_free_r>
 8007f00:	4625      	mov	r5, r4
 8007f02:	4628      	mov	r0, r5
 8007f04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f08:	f000 f894 	bl	8008034 <_malloc_usable_size_r>
 8007f0c:	4284      	cmp	r4, r0
 8007f0e:	4607      	mov	r7, r0
 8007f10:	d802      	bhi.n	8007f18 <_realloc_r+0x34>
 8007f12:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007f16:	d812      	bhi.n	8007f3e <_realloc_r+0x5a>
 8007f18:	4621      	mov	r1, r4
 8007f1a:	4640      	mov	r0, r8
 8007f1c:	f7fe fe6e 	bl	8006bfc <_malloc_r>
 8007f20:	4605      	mov	r5, r0
 8007f22:	2800      	cmp	r0, #0
 8007f24:	d0ed      	beq.n	8007f02 <_realloc_r+0x1e>
 8007f26:	42bc      	cmp	r4, r7
 8007f28:	4622      	mov	r2, r4
 8007f2a:	4631      	mov	r1, r6
 8007f2c:	bf28      	it	cs
 8007f2e:	463a      	movcs	r2, r7
 8007f30:	f7fe fde6 	bl	8006b00 <memcpy>
 8007f34:	4631      	mov	r1, r6
 8007f36:	4640      	mov	r0, r8
 8007f38:	f7fe fdf8 	bl	8006b2c <_free_r>
 8007f3c:	e7e1      	b.n	8007f02 <_realloc_r+0x1e>
 8007f3e:	4635      	mov	r5, r6
 8007f40:	e7df      	b.n	8007f02 <_realloc_r+0x1e>
	...

08007f44 <_read_r>:
 8007f44:	b538      	push	{r3, r4, r5, lr}
 8007f46:	4604      	mov	r4, r0
 8007f48:	4608      	mov	r0, r1
 8007f4a:	4611      	mov	r1, r2
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	4d05      	ldr	r5, [pc, #20]	; (8007f64 <_read_r+0x20>)
 8007f50:	602a      	str	r2, [r5, #0]
 8007f52:	461a      	mov	r2, r3
 8007f54:	f7fa f9df 	bl	8002316 <_read>
 8007f58:	1c43      	adds	r3, r0, #1
 8007f5a:	d102      	bne.n	8007f62 <_read_r+0x1e>
 8007f5c:	682b      	ldr	r3, [r5, #0]
 8007f5e:	b103      	cbz	r3, 8007f62 <_read_r+0x1e>
 8007f60:	6023      	str	r3, [r4, #0]
 8007f62:	bd38      	pop	{r3, r4, r5, pc}
 8007f64:	20002af0 	.word	0x20002af0

08007f68 <_raise_r>:
 8007f68:	291f      	cmp	r1, #31
 8007f6a:	b538      	push	{r3, r4, r5, lr}
 8007f6c:	4604      	mov	r4, r0
 8007f6e:	460d      	mov	r5, r1
 8007f70:	d904      	bls.n	8007f7c <_raise_r+0x14>
 8007f72:	2316      	movs	r3, #22
 8007f74:	6003      	str	r3, [r0, #0]
 8007f76:	f04f 30ff 	mov.w	r0, #4294967295
 8007f7a:	bd38      	pop	{r3, r4, r5, pc}
 8007f7c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007f7e:	b112      	cbz	r2, 8007f86 <_raise_r+0x1e>
 8007f80:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007f84:	b94b      	cbnz	r3, 8007f9a <_raise_r+0x32>
 8007f86:	4620      	mov	r0, r4
 8007f88:	f000 f830 	bl	8007fec <_getpid_r>
 8007f8c:	462a      	mov	r2, r5
 8007f8e:	4601      	mov	r1, r0
 8007f90:	4620      	mov	r0, r4
 8007f92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007f96:	f000 b817 	b.w	8007fc8 <_kill_r>
 8007f9a:	2b01      	cmp	r3, #1
 8007f9c:	d00a      	beq.n	8007fb4 <_raise_r+0x4c>
 8007f9e:	1c59      	adds	r1, r3, #1
 8007fa0:	d103      	bne.n	8007faa <_raise_r+0x42>
 8007fa2:	2316      	movs	r3, #22
 8007fa4:	6003      	str	r3, [r0, #0]
 8007fa6:	2001      	movs	r0, #1
 8007fa8:	e7e7      	b.n	8007f7a <_raise_r+0x12>
 8007faa:	2400      	movs	r4, #0
 8007fac:	4628      	mov	r0, r5
 8007fae:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007fb2:	4798      	blx	r3
 8007fb4:	2000      	movs	r0, #0
 8007fb6:	e7e0      	b.n	8007f7a <_raise_r+0x12>

08007fb8 <raise>:
 8007fb8:	4b02      	ldr	r3, [pc, #8]	; (8007fc4 <raise+0xc>)
 8007fba:	4601      	mov	r1, r0
 8007fbc:	6818      	ldr	r0, [r3, #0]
 8007fbe:	f7ff bfd3 	b.w	8007f68 <_raise_r>
 8007fc2:	bf00      	nop
 8007fc4:	200000b8 	.word	0x200000b8

08007fc8 <_kill_r>:
 8007fc8:	b538      	push	{r3, r4, r5, lr}
 8007fca:	2300      	movs	r3, #0
 8007fcc:	4d06      	ldr	r5, [pc, #24]	; (8007fe8 <_kill_r+0x20>)
 8007fce:	4604      	mov	r4, r0
 8007fd0:	4608      	mov	r0, r1
 8007fd2:	4611      	mov	r1, r2
 8007fd4:	602b      	str	r3, [r5, #0]
 8007fd6:	f7fa f984 	bl	80022e2 <_kill>
 8007fda:	1c43      	adds	r3, r0, #1
 8007fdc:	d102      	bne.n	8007fe4 <_kill_r+0x1c>
 8007fde:	682b      	ldr	r3, [r5, #0]
 8007fe0:	b103      	cbz	r3, 8007fe4 <_kill_r+0x1c>
 8007fe2:	6023      	str	r3, [r4, #0]
 8007fe4:	bd38      	pop	{r3, r4, r5, pc}
 8007fe6:	bf00      	nop
 8007fe8:	20002af0 	.word	0x20002af0

08007fec <_getpid_r>:
 8007fec:	f7fa b972 	b.w	80022d4 <_getpid>

08007ff0 <_fstat_r>:
 8007ff0:	b538      	push	{r3, r4, r5, lr}
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	4d06      	ldr	r5, [pc, #24]	; (8008010 <_fstat_r+0x20>)
 8007ff6:	4604      	mov	r4, r0
 8007ff8:	4608      	mov	r0, r1
 8007ffa:	4611      	mov	r1, r2
 8007ffc:	602b      	str	r3, [r5, #0]
 8007ffe:	f7fa f9ce 	bl	800239e <_fstat>
 8008002:	1c43      	adds	r3, r0, #1
 8008004:	d102      	bne.n	800800c <_fstat_r+0x1c>
 8008006:	682b      	ldr	r3, [r5, #0]
 8008008:	b103      	cbz	r3, 800800c <_fstat_r+0x1c>
 800800a:	6023      	str	r3, [r4, #0]
 800800c:	bd38      	pop	{r3, r4, r5, pc}
 800800e:	bf00      	nop
 8008010:	20002af0 	.word	0x20002af0

08008014 <_isatty_r>:
 8008014:	b538      	push	{r3, r4, r5, lr}
 8008016:	2300      	movs	r3, #0
 8008018:	4d05      	ldr	r5, [pc, #20]	; (8008030 <_isatty_r+0x1c>)
 800801a:	4604      	mov	r4, r0
 800801c:	4608      	mov	r0, r1
 800801e:	602b      	str	r3, [r5, #0]
 8008020:	f7fa f9cc 	bl	80023bc <_isatty>
 8008024:	1c43      	adds	r3, r0, #1
 8008026:	d102      	bne.n	800802e <_isatty_r+0x1a>
 8008028:	682b      	ldr	r3, [r5, #0]
 800802a:	b103      	cbz	r3, 800802e <_isatty_r+0x1a>
 800802c:	6023      	str	r3, [r4, #0]
 800802e:	bd38      	pop	{r3, r4, r5, pc}
 8008030:	20002af0 	.word	0x20002af0

08008034 <_malloc_usable_size_r>:
 8008034:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008038:	1f18      	subs	r0, r3, #4
 800803a:	2b00      	cmp	r3, #0
 800803c:	bfbc      	itt	lt
 800803e:	580b      	ldrlt	r3, [r1, r0]
 8008040:	18c0      	addlt	r0, r0, r3
 8008042:	4770      	bx	lr

08008044 <_init>:
 8008044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008046:	bf00      	nop
 8008048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800804a:	bc08      	pop	{r3}
 800804c:	469e      	mov	lr, r3
 800804e:	4770      	bx	lr

08008050 <_fini>:
 8008050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008052:	bf00      	nop
 8008054:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008056:	bc08      	pop	{r3}
 8008058:	469e      	mov	lr, r3
 800805a:	4770      	bx	lr

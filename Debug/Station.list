
Station.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000eb50  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d2c  0800ec5c  0800ec5c  0001ec5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f988  0800f988  000205a8  2**0
                  CONTENTS
  4 .ARM          00000008  0800f988  0800f988  0001f988  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f990  0800f990  000205a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f990  0800f990  0001f990  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f994  0800f994  0001f994  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000005a8  20000000  0800f998  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000268c  200005a8  0800ff40  000205a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002c34  0800ff40  00022c34  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000205a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002054b  00000000  00000000  000205d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005e58  00000000  00000000  00040b1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ba0  00000000  00000000  00046978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000018d0  00000000  00000000  00048518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000203cc  00000000  00000000  00049de8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002ee86  00000000  00000000  0006a1b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097149  00000000  00000000  0009903a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00130183  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007f58  00000000  00000000  001301d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200005a8 	.word	0x200005a8
 8000128:	00000000 	.word	0x00000000
 800012c:	0800ec44 	.word	0x0800ec44

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200005ac 	.word	0x200005ac
 8000148:	0800ec44 	.word	0x0800ec44

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <__aeabi_f2uiz>:
 8000170:	0042      	lsls	r2, r0, #1
 8000172:	d20e      	bcs.n	8000192 <__aeabi_f2uiz+0x22>
 8000174:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000178:	d30b      	bcc.n	8000192 <__aeabi_f2uiz+0x22>
 800017a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800017e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000182:	d409      	bmi.n	8000198 <__aeabi_f2uiz+0x28>
 8000184:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000188:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800018c:	fa23 f002 	lsr.w	r0, r3, r2
 8000190:	4770      	bx	lr
 8000192:	f04f 0000 	mov.w	r0, #0
 8000196:	4770      	bx	lr
 8000198:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800019c:	d101      	bne.n	80001a2 <__aeabi_f2uiz+0x32>
 800019e:	0242      	lsls	r2, r0, #9
 80001a0:	d102      	bne.n	80001a8 <__aeabi_f2uiz+0x38>
 80001a2:	f04f 30ff 	mov.w	r0, #4294967295
 80001a6:	4770      	bx	lr
 80001a8:	f04f 0000 	mov.w	r0, #0
 80001ac:	4770      	bx	lr
 80001ae:	bf00      	nop

080001b0 <__aeabi_ldivmod>:
 80001b0:	b97b      	cbnz	r3, 80001d2 <__aeabi_ldivmod+0x22>
 80001b2:	b972      	cbnz	r2, 80001d2 <__aeabi_ldivmod+0x22>
 80001b4:	2900      	cmp	r1, #0
 80001b6:	bfbe      	ittt	lt
 80001b8:	2000      	movlt	r0, #0
 80001ba:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80001be:	e006      	blt.n	80001ce <__aeabi_ldivmod+0x1e>
 80001c0:	bf08      	it	eq
 80001c2:	2800      	cmpeq	r0, #0
 80001c4:	bf1c      	itt	ne
 80001c6:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80001ca:	f04f 30ff 	movne.w	r0, #4294967295
 80001ce:	f000 b9a9 	b.w	8000524 <__aeabi_idiv0>
 80001d2:	f1ad 0c08 	sub.w	ip, sp, #8
 80001d6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001da:	2900      	cmp	r1, #0
 80001dc:	db09      	blt.n	80001f2 <__aeabi_ldivmod+0x42>
 80001de:	2b00      	cmp	r3, #0
 80001e0:	db1a      	blt.n	8000218 <__aeabi_ldivmod+0x68>
 80001e2:	f000 f835 	bl	8000250 <__udivmoddi4>
 80001e6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001ee:	b004      	add	sp, #16
 80001f0:	4770      	bx	lr
 80001f2:	4240      	negs	r0, r0
 80001f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f8:	2b00      	cmp	r3, #0
 80001fa:	db1b      	blt.n	8000234 <__aeabi_ldivmod+0x84>
 80001fc:	f000 f828 	bl	8000250 <__udivmoddi4>
 8000200:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000204:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000208:	b004      	add	sp, #16
 800020a:	4240      	negs	r0, r0
 800020c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000210:	4252      	negs	r2, r2
 8000212:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000216:	4770      	bx	lr
 8000218:	4252      	negs	r2, r2
 800021a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800021e:	f000 f817 	bl	8000250 <__udivmoddi4>
 8000222:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000226:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800022a:	b004      	add	sp, #16
 800022c:	4240      	negs	r0, r0
 800022e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000232:	4770      	bx	lr
 8000234:	4252      	negs	r2, r2
 8000236:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800023a:	f000 f809 	bl	8000250 <__udivmoddi4>
 800023e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000242:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000246:	b004      	add	sp, #16
 8000248:	4252      	negs	r2, r2
 800024a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9e08      	ldr	r6, [sp, #32]
 8000256:	460d      	mov	r5, r1
 8000258:	4604      	mov	r4, r0
 800025a:	4688      	mov	r8, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14d      	bne.n	80002fc <__udivmoddi4+0xac>
 8000260:	428a      	cmp	r2, r1
 8000262:	4694      	mov	ip, r2
 8000264:	d968      	bls.n	8000338 <__udivmoddi4+0xe8>
 8000266:	fab2 f282 	clz	r2, r2
 800026a:	b152      	cbz	r2, 8000282 <__udivmoddi4+0x32>
 800026c:	fa01 f302 	lsl.w	r3, r1, r2
 8000270:	f1c2 0120 	rsb	r1, r2, #32
 8000274:	fa20 f101 	lsr.w	r1, r0, r1
 8000278:	fa0c fc02 	lsl.w	ip, ip, r2
 800027c:	ea41 0803 	orr.w	r8, r1, r3
 8000280:	4094      	lsls	r4, r2
 8000282:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000286:	fbb8 f7f1 	udiv	r7, r8, r1
 800028a:	fa1f fe8c 	uxth.w	lr, ip
 800028e:	fb01 8817 	mls	r8, r1, r7, r8
 8000292:	fb07 f00e 	mul.w	r0, r7, lr
 8000296:	0c23      	lsrs	r3, r4, #16
 8000298:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800029c:	4298      	cmp	r0, r3
 800029e:	d90a      	bls.n	80002b6 <__udivmoddi4+0x66>
 80002a0:	eb1c 0303 	adds.w	r3, ip, r3
 80002a4:	f107 35ff 	add.w	r5, r7, #4294967295
 80002a8:	f080 811e 	bcs.w	80004e8 <__udivmoddi4+0x298>
 80002ac:	4298      	cmp	r0, r3
 80002ae:	f240 811b 	bls.w	80004e8 <__udivmoddi4+0x298>
 80002b2:	3f02      	subs	r7, #2
 80002b4:	4463      	add	r3, ip
 80002b6:	1a1b      	subs	r3, r3, r0
 80002b8:	fbb3 f0f1 	udiv	r0, r3, r1
 80002bc:	fb01 3310 	mls	r3, r1, r0, r3
 80002c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002c4:	b2a4      	uxth	r4, r4
 80002c6:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ca:	45a6      	cmp	lr, r4
 80002cc:	d90a      	bls.n	80002e4 <__udivmoddi4+0x94>
 80002ce:	eb1c 0404 	adds.w	r4, ip, r4
 80002d2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002d6:	f080 8109 	bcs.w	80004ec <__udivmoddi4+0x29c>
 80002da:	45a6      	cmp	lr, r4
 80002dc:	f240 8106 	bls.w	80004ec <__udivmoddi4+0x29c>
 80002e0:	4464      	add	r4, ip
 80002e2:	3802      	subs	r0, #2
 80002e4:	2100      	movs	r1, #0
 80002e6:	eba4 040e 	sub.w	r4, r4, lr
 80002ea:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002ee:	b11e      	cbz	r6, 80002f8 <__udivmoddi4+0xa8>
 80002f0:	2300      	movs	r3, #0
 80002f2:	40d4      	lsrs	r4, r2
 80002f4:	e9c6 4300 	strd	r4, r3, [r6]
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d908      	bls.n	8000312 <__udivmoddi4+0xc2>
 8000300:	2e00      	cmp	r6, #0
 8000302:	f000 80ee 	beq.w	80004e2 <__udivmoddi4+0x292>
 8000306:	2100      	movs	r1, #0
 8000308:	e9c6 0500 	strd	r0, r5, [r6]
 800030c:	4608      	mov	r0, r1
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	fab3 f183 	clz	r1, r3
 8000316:	2900      	cmp	r1, #0
 8000318:	d14a      	bne.n	80003b0 <__udivmoddi4+0x160>
 800031a:	42ab      	cmp	r3, r5
 800031c:	d302      	bcc.n	8000324 <__udivmoddi4+0xd4>
 800031e:	4282      	cmp	r2, r0
 8000320:	f200 80fc 	bhi.w	800051c <__udivmoddi4+0x2cc>
 8000324:	1a84      	subs	r4, r0, r2
 8000326:	eb65 0303 	sbc.w	r3, r5, r3
 800032a:	2001      	movs	r0, #1
 800032c:	4698      	mov	r8, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d0e2      	beq.n	80002f8 <__udivmoddi4+0xa8>
 8000332:	e9c6 4800 	strd	r4, r8, [r6]
 8000336:	e7df      	b.n	80002f8 <__udivmoddi4+0xa8>
 8000338:	b902      	cbnz	r2, 800033c <__udivmoddi4+0xec>
 800033a:	deff      	udf	#255	; 0xff
 800033c:	fab2 f282 	clz	r2, r2
 8000340:	2a00      	cmp	r2, #0
 8000342:	f040 8091 	bne.w	8000468 <__udivmoddi4+0x218>
 8000346:	eba1 000c 	sub.w	r0, r1, ip
 800034a:	2101      	movs	r1, #1
 800034c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000350:	fa1f fe8c 	uxth.w	lr, ip
 8000354:	fbb0 f3f7 	udiv	r3, r0, r7
 8000358:	fb07 0013 	mls	r0, r7, r3, r0
 800035c:	0c25      	lsrs	r5, r4, #16
 800035e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000362:	fb0e f003 	mul.w	r0, lr, r3
 8000366:	42a8      	cmp	r0, r5
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x12c>
 800036a:	eb1c 0505 	adds.w	r5, ip, r5
 800036e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x12a>
 8000374:	42a8      	cmp	r0, r5
 8000376:	f200 80ce 	bhi.w	8000516 <__udivmoddi4+0x2c6>
 800037a:	4643      	mov	r3, r8
 800037c:	1a2d      	subs	r5, r5, r0
 800037e:	fbb5 f0f7 	udiv	r0, r5, r7
 8000382:	fb07 5510 	mls	r5, r7, r0, r5
 8000386:	fb0e fe00 	mul.w	lr, lr, r0
 800038a:	b2a4      	uxth	r4, r4
 800038c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000390:	45a6      	cmp	lr, r4
 8000392:	d908      	bls.n	80003a6 <__udivmoddi4+0x156>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f100 35ff 	add.w	r5, r0, #4294967295
 800039c:	d202      	bcs.n	80003a4 <__udivmoddi4+0x154>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f200 80b6 	bhi.w	8000510 <__udivmoddi4+0x2c0>
 80003a4:	4628      	mov	r0, r5
 80003a6:	eba4 040e 	sub.w	r4, r4, lr
 80003aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ae:	e79e      	b.n	80002ee <__udivmoddi4+0x9e>
 80003b0:	f1c1 0720 	rsb	r7, r1, #32
 80003b4:	408b      	lsls	r3, r1
 80003b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80003be:	fa25 fa07 	lsr.w	sl, r5, r7
 80003c2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c6:	fbba f8f9 	udiv	r8, sl, r9
 80003ca:	fa20 f307 	lsr.w	r3, r0, r7
 80003ce:	fb09 aa18 	mls	sl, r9, r8, sl
 80003d2:	408d      	lsls	r5, r1
 80003d4:	fa1f fe8c 	uxth.w	lr, ip
 80003d8:	431d      	orrs	r5, r3
 80003da:	fa00 f301 	lsl.w	r3, r0, r1
 80003de:	fb08 f00e 	mul.w	r0, r8, lr
 80003e2:	0c2c      	lsrs	r4, r5, #16
 80003e4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80003e8:	42a0      	cmp	r0, r4
 80003ea:	fa02 f201 	lsl.w	r2, r2, r1
 80003ee:	d90b      	bls.n	8000408 <__udivmoddi4+0x1b8>
 80003f0:	eb1c 0404 	adds.w	r4, ip, r4
 80003f4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f8:	f080 8088 	bcs.w	800050c <__udivmoddi4+0x2bc>
 80003fc:	42a0      	cmp	r0, r4
 80003fe:	f240 8085 	bls.w	800050c <__udivmoddi4+0x2bc>
 8000402:	f1a8 0802 	sub.w	r8, r8, #2
 8000406:	4464      	add	r4, ip
 8000408:	1a24      	subs	r4, r4, r0
 800040a:	fbb4 f0f9 	udiv	r0, r4, r9
 800040e:	fb09 4410 	mls	r4, r9, r0, r4
 8000412:	fb00 fe0e 	mul.w	lr, r0, lr
 8000416:	b2ad      	uxth	r5, r5
 8000418:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800041c:	45a6      	cmp	lr, r4
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x1e2>
 8000420:	eb1c 0404 	adds.w	r4, ip, r4
 8000424:	f100 35ff 	add.w	r5, r0, #4294967295
 8000428:	d26c      	bcs.n	8000504 <__udivmoddi4+0x2b4>
 800042a:	45a6      	cmp	lr, r4
 800042c:	d96a      	bls.n	8000504 <__udivmoddi4+0x2b4>
 800042e:	3802      	subs	r0, #2
 8000430:	4464      	add	r4, ip
 8000432:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000436:	fba0 9502 	umull	r9, r5, r0, r2
 800043a:	eba4 040e 	sub.w	r4, r4, lr
 800043e:	42ac      	cmp	r4, r5
 8000440:	46c8      	mov	r8, r9
 8000442:	46ae      	mov	lr, r5
 8000444:	d356      	bcc.n	80004f4 <__udivmoddi4+0x2a4>
 8000446:	d053      	beq.n	80004f0 <__udivmoddi4+0x2a0>
 8000448:	2e00      	cmp	r6, #0
 800044a:	d069      	beq.n	8000520 <__udivmoddi4+0x2d0>
 800044c:	ebb3 0208 	subs.w	r2, r3, r8
 8000450:	eb64 040e 	sbc.w	r4, r4, lr
 8000454:	fa22 f301 	lsr.w	r3, r2, r1
 8000458:	fa04 f707 	lsl.w	r7, r4, r7
 800045c:	431f      	orrs	r7, r3
 800045e:	40cc      	lsrs	r4, r1
 8000460:	e9c6 7400 	strd	r7, r4, [r6]
 8000464:	2100      	movs	r1, #0
 8000466:	e747      	b.n	80002f8 <__udivmoddi4+0xa8>
 8000468:	fa0c fc02 	lsl.w	ip, ip, r2
 800046c:	f1c2 0120 	rsb	r1, r2, #32
 8000470:	fa25 f301 	lsr.w	r3, r5, r1
 8000474:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000478:	fa20 f101 	lsr.w	r1, r0, r1
 800047c:	4095      	lsls	r5, r2
 800047e:	430d      	orrs	r5, r1
 8000480:	fbb3 f1f7 	udiv	r1, r3, r7
 8000484:	fb07 3311 	mls	r3, r7, r1, r3
 8000488:	fa1f fe8c 	uxth.w	lr, ip
 800048c:	0c28      	lsrs	r0, r5, #16
 800048e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000492:	fb01 f30e 	mul.w	r3, r1, lr
 8000496:	4283      	cmp	r3, r0
 8000498:	fa04 f402 	lsl.w	r4, r4, r2
 800049c:	d908      	bls.n	80004b0 <__udivmoddi4+0x260>
 800049e:	eb1c 0000 	adds.w	r0, ip, r0
 80004a2:	f101 38ff 	add.w	r8, r1, #4294967295
 80004a6:	d22f      	bcs.n	8000508 <__udivmoddi4+0x2b8>
 80004a8:	4283      	cmp	r3, r0
 80004aa:	d92d      	bls.n	8000508 <__udivmoddi4+0x2b8>
 80004ac:	3902      	subs	r1, #2
 80004ae:	4460      	add	r0, ip
 80004b0:	1ac0      	subs	r0, r0, r3
 80004b2:	fbb0 f3f7 	udiv	r3, r0, r7
 80004b6:	fb07 0013 	mls	r0, r7, r3, r0
 80004ba:	b2ad      	uxth	r5, r5
 80004bc:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80004c0:	fb03 f00e 	mul.w	r0, r3, lr
 80004c4:	42a8      	cmp	r0, r5
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x28a>
 80004c8:	eb1c 0505 	adds.w	r5, ip, r5
 80004cc:	f103 38ff 	add.w	r8, r3, #4294967295
 80004d0:	d216      	bcs.n	8000500 <__udivmoddi4+0x2b0>
 80004d2:	42a8      	cmp	r0, r5
 80004d4:	d914      	bls.n	8000500 <__udivmoddi4+0x2b0>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	4465      	add	r5, ip
 80004da:	1a28      	subs	r0, r5, r0
 80004dc:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004e0:	e738      	b.n	8000354 <__udivmoddi4+0x104>
 80004e2:	4631      	mov	r1, r6
 80004e4:	4630      	mov	r0, r6
 80004e6:	e707      	b.n	80002f8 <__udivmoddi4+0xa8>
 80004e8:	462f      	mov	r7, r5
 80004ea:	e6e4      	b.n	80002b6 <__udivmoddi4+0x66>
 80004ec:	4618      	mov	r0, r3
 80004ee:	e6f9      	b.n	80002e4 <__udivmoddi4+0x94>
 80004f0:	454b      	cmp	r3, r9
 80004f2:	d2a9      	bcs.n	8000448 <__udivmoddi4+0x1f8>
 80004f4:	ebb9 0802 	subs.w	r8, r9, r2
 80004f8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004fc:	3801      	subs	r0, #1
 80004fe:	e7a3      	b.n	8000448 <__udivmoddi4+0x1f8>
 8000500:	4643      	mov	r3, r8
 8000502:	e7ea      	b.n	80004da <__udivmoddi4+0x28a>
 8000504:	4628      	mov	r0, r5
 8000506:	e794      	b.n	8000432 <__udivmoddi4+0x1e2>
 8000508:	4641      	mov	r1, r8
 800050a:	e7d1      	b.n	80004b0 <__udivmoddi4+0x260>
 800050c:	46d0      	mov	r8, sl
 800050e:	e77b      	b.n	8000408 <__udivmoddi4+0x1b8>
 8000510:	4464      	add	r4, ip
 8000512:	3802      	subs	r0, #2
 8000514:	e747      	b.n	80003a6 <__udivmoddi4+0x156>
 8000516:	3b02      	subs	r3, #2
 8000518:	4465      	add	r5, ip
 800051a:	e72f      	b.n	800037c <__udivmoddi4+0x12c>
 800051c:	4608      	mov	r0, r1
 800051e:	e706      	b.n	800032e <__udivmoddi4+0xde>
 8000520:	4631      	mov	r1, r6
 8000522:	e6e9      	b.n	80002f8 <__udivmoddi4+0xa8>

08000524 <__aeabi_idiv0>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <initApp_Display>:

static uint16_t countdowntime;
static _RTC switchtime;

void initApp_Display ()
{
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
	LCD_Init();
 800052c:	f006 fca4 	bl	8006e78 <LCD_Init>
	Screen_Init(&myRTC);
 8000530:	4802      	ldr	r0, [pc, #8]	; (800053c <initApp_Display+0x14>)
 8000532:	f006 fe5b 	bl	80071ec <Screen_Init>
}
 8000536:	bf00      	nop
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	20001370 	.word	0x20001370

08000540 <display_SensorX>:

void display_SensorX(uint8_t sensorIndex)
{
 8000540:	b590      	push	{r4, r7, lr}
 8000542:	b087      	sub	sp, #28
 8000544:	af02      	add	r7, sp, #8
 8000546:	4603      	mov	r3, r0
 8000548:	71fb      	strb	r3, [r7, #7]
	if (sensorIndex > myStation.ssNode_list->length)	{
 800054a:	79fa      	ldrb	r2, [r7, #7]
 800054c:	4b18      	ldr	r3, [pc, #96]	; (80005b0 <display_SensorX+0x70>)
 800054e:	68db      	ldr	r3, [r3, #12]
 8000550:	689b      	ldr	r3, [r3, #8]
 8000552:	429a      	cmp	r2, r3
 8000554:	d908      	bls.n	8000568 <display_SensorX+0x28>
		Screen_Monitor_Station(myStation.stID, myStation.stCurrent);
 8000556:	4b16      	ldr	r3, [pc, #88]	; (80005b0 <display_SensorX+0x70>)
 8000558:	785b      	ldrb	r3, [r3, #1]
 800055a:	4a15      	ldr	r2, [pc, #84]	; (80005b0 <display_SensorX+0x70>)
 800055c:	8852      	ldrh	r2, [r2, #2]
 800055e:	4611      	mov	r1, r2
 8000560:	4618      	mov	r0, r3
 8000562:	f006 ff95 	bl	8007490 <Screen_Monitor_Station>
		return ;
 8000566:	e020      	b.n	80005aa <display_SensorX+0x6a>

	}

	Node * current = myStation.ssNode_list->head;
 8000568:	4b11      	ldr	r3, [pc, #68]	; (80005b0 <display_SensorX+0x70>)
 800056a:	68db      	ldr	r3, [r3, #12]
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < sensorIndex; i++)
 8000570:	2300      	movs	r3, #0
 8000572:	72fb      	strb	r3, [r7, #11]
 8000574:	e005      	b.n	8000582 <display_SensorX+0x42>
	{
		current = current->next;
 8000576:	68fb      	ldr	r3, [r7, #12]
 8000578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800057a:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < sensorIndex; i++)
 800057c:	7afb      	ldrb	r3, [r7, #11]
 800057e:	3301      	adds	r3, #1
 8000580:	72fb      	strb	r3, [r7, #11]
 8000582:	7afa      	ldrb	r2, [r7, #11]
 8000584:	79fb      	ldrb	r3, [r7, #7]
 8000586:	429a      	cmp	r2, r3
 8000588:	d3f5      	bcc.n	8000576 <display_SensorX+0x36>
	}
	Screen_Monitor_Node(current->SSnode.SSnode_ID, current->SSnode.sensorMode,
 800058a:	68fb      	ldr	r3, [r7, #12]
 800058c:	7818      	ldrb	r0, [r3, #0]
 800058e:	68fb      	ldr	r3, [r7, #12]
 8000590:	7a59      	ldrb	r1, [r3, #9]
			current->SSnode.Battery, current->SSnode.V_type, current->SSnode.V_value);
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	785b      	ldrb	r3, [r3, #1]
	Screen_Monitor_Node(current->SSnode.SSnode_ID, current->SSnode.sensorMode,
 8000596:	b29a      	uxth	r2, r3
			current->SSnode.Battery, current->SSnode.V_type, current->SSnode.V_value);
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	789c      	ldrb	r4, [r3, #2]
	Screen_Monitor_Node(current->SSnode.SSnode_ID, current->SSnode.sensorMode,
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	889b      	ldrh	r3, [r3, #4]
 80005a0:	b29b      	uxth	r3, r3
 80005a2:	9300      	str	r3, [sp, #0]
 80005a4:	4623      	mov	r3, r4
 80005a6:	f006 ffd5 	bl	8007554 <Screen_Monitor_Node>

}
 80005aa:	3714      	adds	r7, #20
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd90      	pop	{r4, r7, pc}
 80005b0:	20000474 	.word	0x20000474

080005b4 <setSwitchtime>:

void setSwitchtime()
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
	DS3231_GetTime(&switchtime);
 80005b8:	4802      	ldr	r0, [pc, #8]	; (80005c4 <setSwitchtime+0x10>)
 80005ba:	f003 fd71 	bl	80040a0 <DS3231_GetTime>
}
 80005be:	bf00      	nop
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	200005cc 	.word	0x200005cc

080005c8 <getSwitchtime>:
_RTC getSwitchtime()
{
 80005c8:	b480      	push	{r7}
 80005ca:	b083      	sub	sp, #12
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
	return switchtime;
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	4a06      	ldr	r2, [pc, #24]	; (80005ec <getSwitchtime+0x24>)
 80005d4:	6810      	ldr	r0, [r2, #0]
 80005d6:	6018      	str	r0, [r3, #0]
 80005d8:	8891      	ldrh	r1, [r2, #4]
 80005da:	7992      	ldrb	r2, [r2, #6]
 80005dc:	8099      	strh	r1, [r3, #4]
 80005de:	719a      	strb	r2, [r3, #6]
}
 80005e0:	6878      	ldr	r0, [r7, #4]
 80005e2:	370c      	adds	r7, #12
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bc80      	pop	{r7}
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop
 80005ec:	200005cc 	.word	0x200005cc

080005f0 <processingApp_display>:
void processingApp_display()
{
 80005f0:	b590      	push	{r4, r7, lr}
 80005f2:	b083      	sub	sp, #12
 80005f4:	af00      	add	r7, sp, #0

	if (getClearflag()) 	{
 80005f6:	f003 fa49 	bl	8003a8c <getClearflag>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d004      	beq.n	800060a <processingApp_display+0x1a>
		LCD_Clear();
 8000600:	f006 fdec 	bl	80071dc <LCD_Clear>
		setClearflag(DISABLE);
 8000604:	2000      	movs	r0, #0
 8000606:	f003 fa4d 	bl	8003aa4 <setClearflag>
	}
	switch(myDisplayMode)	{
 800060a:	4b5d      	ldr	r3, [pc, #372]	; (8000780 <processingApp_display+0x190>)
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	2b09      	cmp	r3, #9
 8000610:	f200 80b0 	bhi.w	8000774 <processingApp_display+0x184>
 8000614:	a201      	add	r2, pc, #4	; (adr r2, 800061c <processingApp_display+0x2c>)
 8000616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800061a:	bf00      	nop
 800061c:	08000645 	.word	0x08000645
 8000620:	08000659 	.word	0x08000659
 8000624:	0800067f 	.word	0x0800067f
 8000628:	08000691 	.word	0x08000691
 800062c:	080006bb 	.word	0x080006bb
 8000630:	080006c9 	.word	0x080006c9
 8000634:	0800073f 	.word	0x0800073f
 8000638:	08000759 	.word	0x08000759
 800063c:	0800071b 	.word	0x0800071b
 8000640:	080006f7 	.word	0x080006f7
		case HOME:
			Screen_Home_Origin(myStation.stID, MQTT_getConnectflag());
 8000644:	4b4f      	ldr	r3, [pc, #316]	; (8000784 <processingApp_display+0x194>)
 8000646:	785c      	ldrb	r4, [r3, #1]
 8000648:	f004 fa18 	bl	8004a7c <MQTT_getConnectflag>
 800064c:	4603      	mov	r3, r0
 800064e:	4619      	mov	r1, r3
 8000650:	4620      	mov	r0, r4
 8000652:	f006 fddd 	bl	8007210 <Screen_Home_Origin>
			break;
 8000656:	e08e      	b.n	8000776 <processingApp_display+0x186>
		case COUNTDOWN_SW_OFF:
			countdowntime = getCountdowntime(myStation.calibTime.hour,
 8000658:	4b4a      	ldr	r3, [pc, #296]	; (8000784 <processingApp_display+0x194>)
 800065a:	7cdb      	ldrb	r3, [r3, #19]
 800065c:	4a49      	ldr	r2, [pc, #292]	; (8000784 <processingApp_display+0x194>)
 800065e:	7d11      	ldrb	r1, [r2, #20]
 8000660:	4a48      	ldr	r2, [pc, #288]	; (8000784 <processingApp_display+0x194>)
 8000662:	7d52      	ldrb	r2, [r2, #21]
 8000664:	4618      	mov	r0, r3
 8000666:	f003 ff35 	bl	80044d4 <getCountdowntime>
 800066a:	4603      	mov	r3, r0
 800066c:	461a      	mov	r2, r3
 800066e:	4b46      	ldr	r3, [pc, #280]	; (8000788 <processingApp_display+0x198>)
 8000670:	801a      	strh	r2, [r3, #0]
												myStation.calibTime.min, myStation.calibTime.sec);
			Screen_Home_Sync(countdowntime);
 8000672:	4b45      	ldr	r3, [pc, #276]	; (8000788 <processingApp_display+0x198>)
 8000674:	881b      	ldrh	r3, [r3, #0]
 8000676:	4618      	mov	r0, r3
 8000678:	f006 fe5c 	bl	8007334 <Screen_Home_Sync>
			break;
 800067c:	e07b      	b.n	8000776 <processingApp_display+0x186>
		case AFTER_SW_OFF:
			displayCalibFlag = 0;
 800067e:	4b43      	ldr	r3, [pc, #268]	; (800078c <processingApp_display+0x19c>)
 8000680:	2200      	movs	r2, #0
 8000682:	701a      	strb	r2, [r3, #0]
			displayAfterSwitchoff = 0;
 8000684:	4b42      	ldr	r3, [pc, #264]	; (8000790 <processingApp_display+0x1a0>)
 8000686:	2200      	movs	r2, #0
 8000688:	701a      	strb	r2, [r3, #0]
			Screen_Home_Calib();
 800068a:	f006 fea1 	bl	80073d0 <Screen_Home_Calib>
			break;
 800068e:	e072      	b.n	8000776 <processingApp_display+0x186>
		case MONITOR:

			if (get_curMonitor() == 0) 	{
 8000690:	f003 fa72 	bl	8003b78 <get_curMonitor>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d108      	bne.n	80006ac <processingApp_display+0xbc>
				Screen_Monitor_Station(myStation.MBAstate, myStation.stCurrent);
 800069a:	4b3a      	ldr	r3, [pc, #232]	; (8000784 <processingApp_display+0x194>)
 800069c:	799b      	ldrb	r3, [r3, #6]
 800069e:	4a39      	ldr	r2, [pc, #228]	; (8000784 <processingApp_display+0x194>)
 80006a0:	8852      	ldrh	r2, [r2, #2]
 80006a2:	4611      	mov	r1, r2
 80006a4:	4618      	mov	r0, r3
 80006a6:	f006 fef3 	bl	8007490 <Screen_Monitor_Station>
			}
			else {
				display_SensorX(get_curMonitor());
			}
			break;
 80006aa:	e064      	b.n	8000776 <processingApp_display+0x186>
				display_SensorX(get_curMonitor());
 80006ac:	f003 fa64 	bl	8003b78 <get_curMonitor>
 80006b0:	4603      	mov	r3, r0
 80006b2:	4618      	mov	r0, r3
 80006b4:	f7ff ff44 	bl	8000540 <display_SensorX>
			break;
 80006b8:	e05d      	b.n	8000776 <processingApp_display+0x186>
		case MENU_CONTROL:
			Screen_Function(getcurControl());
 80006ba:	f003 fa1b 	bl	8003af4 <getcurControl>
 80006be:	4603      	mov	r3, r0
 80006c0:	4618      	mov	r0, r3
 80006c2:	f007 f84d 	bl	8007760 <Screen_Function>
			break;
 80006c6:	e056      	b.n	8000776 <processingApp_display+0x186>
		case VOLTAGE_CONTROL:
			Screen_Voltage_Control(getLimit(), getStepValorDir());
 80006c8:	f003 f8b2 	bl	8003830 <getLimit>
 80006cc:	4603      	mov	r3, r0
 80006ce:	461c      	mov	r4, r3
 80006d0:	f003 f9c8 	bl	8003a64 <getStepValorDir>
 80006d4:	4603      	mov	r3, r0
 80006d6:	4619      	mov	r1, r3
 80006d8:	4620      	mov	r0, r4
 80006da:	f007 f87b 	bl	80077d4 <Screen_Voltage_Control>
			Screen_Voltage_Control_Control_Motor(getStepchange(), Step_getDir());
 80006de:	f003 f913 	bl	8003908 <getStepchange>
 80006e2:	4603      	mov	r3, r0
 80006e4:	461c      	mov	r4, r3
 80006e6:	f003 f8ad 	bl	8003844 <Step_getDir>
 80006ea:	4603      	mov	r3, r0
 80006ec:	4619      	mov	r1, r3
 80006ee:	4620      	mov	r0, r4
 80006f0:	f007 f972 	bl	80079d8 <Screen_Voltage_Control_Control_Motor>
			break;
 80006f4:	e03f      	b.n	8000776 <processingApp_display+0x186>
		case STEP_DIR_CONTROL:
			Screen_Dir_Control(getLimit());
 80006f6:	f003 f89b 	bl	8003830 <getLimit>
 80006fa:	4603      	mov	r3, r0
 80006fc:	4618      	mov	r0, r3
 80006fe:	f007 f8cb 	bl	8007898 <Screen_Dir_Control>
			Screen_Voltage_Control_Control_Motor(getStepchange(), Step_getDir());
 8000702:	f003 f901 	bl	8003908 <getStepchange>
 8000706:	4603      	mov	r3, r0
 8000708:	461c      	mov	r4, r3
 800070a:	f003 f89b 	bl	8003844 <Step_getDir>
 800070e:	4603      	mov	r3, r0
 8000710:	4619      	mov	r1, r3
 8000712:	4620      	mov	r0, r4
 8000714:	f007 f960 	bl	80079d8 <Screen_Voltage_Control_Control_Motor>
			break;
 8000718:	e02d      	b.n	8000776 <processingApp_display+0x186>
		case STEP_VAL_CONTROL:
			Screen_StepVal_Control(getLimit());
 800071a:	f003 f889 	bl	8003830 <getLimit>
 800071e:	4603      	mov	r3, r0
 8000720:	4618      	mov	r0, r3
 8000722:	f007 f909 	bl	8007938 <Screen_StepVal_Control>
			Screen_Voltage_Control_Control_Motor(getStepchange(), Step_getDir());
 8000726:	f003 f8ef 	bl	8003908 <getStepchange>
 800072a:	4603      	mov	r3, r0
 800072c:	461c      	mov	r4, r3
 800072e:	f003 f889 	bl	8003844 <Step_getDir>
 8000732:	4603      	mov	r3, r0
 8000734:	4619      	mov	r1, r3
 8000736:	4620      	mov	r0, r4
 8000738:	f007 f94e 	bl	80079d8 <Screen_Voltage_Control_Control_Motor>
			break;
 800073c:	e01b      	b.n	8000776 <processingApp_display+0x186>
		case ON_OFF_CONTROL:
			Screen_Control_Relay(1);
 800073e:	2001      	movs	r0, #1
 8000740:	f007 f97e 	bl	8007a40 <Screen_Control_Relay>
			Screen_Control_Relay_Change_Mode(myStation.MBAstate, getCurswitch());
 8000744:	4b0f      	ldr	r3, [pc, #60]	; (8000784 <processingApp_display+0x194>)
 8000746:	799c      	ldrb	r4, [r3, #6]
 8000748:	f003 f996 	bl	8003a78 <getCurswitch>
 800074c:	4603      	mov	r3, r0
 800074e:	4619      	mov	r1, r3
 8000750:	4620      	mov	r0, r4
 8000752:	f007 f9bb 	bl	8007acc <Screen_Control_Relay_Change_Mode>
			break;
 8000756:	e00e      	b.n	8000776 <processingApp_display+0x186>
		case COMPLETE_CONTROL:
			Screen_Accept_Relay(getSwitchtime(), getCurswitch());
 8000758:	463b      	mov	r3, r7
 800075a:	4618      	mov	r0, r3
 800075c:	f7ff ff34 	bl	80005c8 <getSwitchtime>
 8000760:	f003 f98a 	bl	8003a78 <getCurswitch>
 8000764:	4603      	mov	r3, r0
 8000766:	461a      	mov	r2, r3
 8000768:	463b      	mov	r3, r7
 800076a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800076e:	f007 f9dd 	bl	8007b2c <Screen_Accept_Relay>
			break;
 8000772:	e000      	b.n	8000776 <processingApp_display+0x186>
		default:
			break;
 8000774:	bf00      	nop
		}
//	Screen_Home_Origin(myStation.stID);

//	Screen_Home_Sync(countdowntime);
}
 8000776:	bf00      	nop
 8000778:	370c      	adds	r7, #12
 800077a:	46bd      	mov	sp, r7
 800077c:	bd90      	pop	{r4, r7, pc}
 800077e:	bf00      	nop
 8000780:	200005c4 	.word	0x200005c4
 8000784:	20000474 	.word	0x20000474
 8000788:	200005c8 	.word	0x200005c8
 800078c:	200005c5 	.word	0x200005c5
 8000790:	200005c6 	.word	0x200005c6

08000794 <initApp_MBA_stepmor>:
#include "Step_motor.h"
#include "user_a4988.h"

static Stepmotor_change_mode_t changeMode;
void initApp_MBA_stepmor()
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0

}
 8000798:	bf00      	nop
 800079a:	46bd      	mov	sp, r7
 800079c:	bc80      	pop	{r7}
 800079e:	4770      	bx	lr

080007a0 <processingApp_MBA_stepmor>:

void processingApp_MBA_stepmor()
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
	if(checkTaskflag(TASK_CTRL_STEPMOR))	{
 80007a4:	2006      	movs	r0, #6
 80007a6:	f004 fec3 	bl	8005530 <checkTaskflag>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d038      	beq.n	8000822 <processingApp_MBA_stepmor+0x82>
		switch ( getLimit() )	{
 80007b0:	f003 f83e 	bl	8003830 <getLimit>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d00a      	beq.n	80007d0 <processingApp_MBA_stepmor+0x30>
 80007ba:	2b01      	cmp	r3, #1
 80007bc:	d111      	bne.n	80007e2 <processingApp_MBA_stepmor+0x42>
		case LIMIT_MAX:
			if (Step_getDir() == STEPM_DIR_DEC)	{
 80007be:	f003 f841 	bl	8003844 <Step_getDir>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b02      	cmp	r3, #2
 80007c6:	d10e      	bne.n	80007e6 <processingApp_MBA_stepmor+0x46>
				setLimit(LIMIT_NONE);
 80007c8:	2002      	movs	r0, #2
 80007ca:	f003 f821 	bl	8003810 <setLimit>
			}
			break;
 80007ce:	e00a      	b.n	80007e6 <processingApp_MBA_stepmor+0x46>
		case LIMIT_MIN:
			if (Step_getDir() == STEPM_DIR_INC)	{
 80007d0:	f003 f838 	bl	8003844 <Step_getDir>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b01      	cmp	r3, #1
 80007d8:	d107      	bne.n	80007ea <processingApp_MBA_stepmor+0x4a>
				setLimit(LIMIT_NONE);
 80007da:	2002      	movs	r0, #2
 80007dc:	f003 f818 	bl	8003810 <setLimit>
			}
			break;
 80007e0:	e003      	b.n	80007ea <processingApp_MBA_stepmor+0x4a>
		default :
			break;
 80007e2:	bf00      	nop
 80007e4:	e002      	b.n	80007ec <processingApp_MBA_stepmor+0x4c>
			break;
 80007e6:	bf00      	nop
 80007e8:	e000      	b.n	80007ec <processingApp_MBA_stepmor+0x4c>
			break;
 80007ea:	bf00      	nop
		}
		changeMode = Step_getChangemode();
 80007ec:	f003 f8d2 	bl	8003994 <Step_getChangemode>
 80007f0:	4603      	mov	r3, r0
 80007f2:	461a      	mov	r2, r3
 80007f4:	4b0c      	ldr	r3, [pc, #48]	; (8000828 <processingApp_MBA_stepmor+0x88>)
 80007f6:	701a      	strb	r2, [r3, #0]
		switch (changeMode)	{
 80007f8:	4b0b      	ldr	r3, [pc, #44]	; (8000828 <processingApp_MBA_stepmor+0x88>)
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	2b01      	cmp	r3, #1
 80007fe:	d004      	beq.n	800080a <processingApp_MBA_stepmor+0x6a>
 8000800:	2b02      	cmp	r3, #2
 8000802:	d105      	bne.n	8000810 <processingApp_MBA_stepmor+0x70>
		case STEPM_MODE_STEP:
			Step_step();
 8000804:	f003 f8d0 	bl	80039a8 <Step_step>
			break;
 8000808:	e003      	b.n	8000812 <processingApp_MBA_stepmor+0x72>
		case STEPM_MODE_PERCENTAGE:
			Step_percent();
 800080a:	f003 f8f3 	bl	80039f4 <Step_percent>
			break;
 800080e:	e000      	b.n	8000812 <processingApp_MBA_stepmor+0x72>
		default:
			break;
 8000810:	bf00      	nop
		}
		// trigger task send output data to server
		triggerTaskflag(TASK_SEND_DATAPERIOD, FLAG_EN);
 8000812:	2101      	movs	r1, #1
 8000814:	2009      	movs	r0, #9
 8000816:	f004 ff8d 	bl	8005734 <triggerTaskflag>
		// disable task control step motor
		triggerTaskflag(TASK_CTRL_STEPMOR, FLAG_DIS);
 800081a:	2100      	movs	r1, #0
 800081c:	2006      	movs	r0, #6
 800081e:	f004 ff89 	bl	8005734 <triggerTaskflag>
	}
}
 8000822:	bf00      	nop
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	200005d3 	.word	0x200005d3

0800082c <processApp_MCU>:
//			current = current->next;
//		}
//	return count;
//}
void processApp_MCU(void)
{
 800082c:	b598      	push	{r3, r4, r7, lr}
 800082e:	af00      	add	r7, sp, #0
		/*Check for task*/
		if ( checkTaskflag(TASK_PREPARE_CALIB) )	{
 8000830:	2002      	movs	r0, #2
 8000832:	f004 fe7d 	bl	8005530 <checkTaskflag>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d013      	beq.n	8000864 <processApp_MCU+0x38>

			//Synchronize RTC time for Station and Sensor
			triggerTaskflag(TASK_GET_GPS_TIME, FLAG_EN);
 800083c:	2101      	movs	r1, #1
 800083e:	2007      	movs	r0, #7
 8000840:	f004 ff78 	bl	8005734 <triggerTaskflag>

			// Send WAKEUP command for Sensor
			wake_sensorflag = 1;
 8000844:	4b31      	ldr	r3, [pc, #196]	; (800090c <processApp_MCU+0xe0>)
 8000846:	2201      	movs	r2, #1
 8000848:	701a      	strb	r2, [r3, #0]
			// Start timer 100s
			NWRDtick = HAL_GetTick();
 800084a:	f007 fa55 	bl	8007cf8 <HAL_GetTick>
 800084e:	4603      	mov	r3, r0
 8000850:	4a2f      	ldr	r2, [pc, #188]	; (8000910 <processApp_MCU+0xe4>)
 8000852:	6013      	str	r3, [r2, #0]
			// Trigger send NETWORK READY message to Server
			triggerTaskflag(TASK_SEND_NWREADY, FLAG_EN);
 8000854:	2101      	movs	r1, #1
 8000856:	2008      	movs	r0, #8
 8000858:	f004 ff6c 	bl	8005734 <triggerTaskflag>

			triggerTaskflag(TASK_PREPARE_CALIB, FLAG_DIS);
 800085c:	2100      	movs	r1, #0
 800085e:	2002      	movs	r0, #2
 8000860:	f004 ff68 	bl	8005734 <triggerTaskflag>
		}
		// Wake up sensor nodes
		if (wake_sensorflag)	{
 8000864:	4b29      	ldr	r3, [pc, #164]	; (800090c <processApp_MCU+0xe0>)
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	2b00      	cmp	r3, #0
 800086a:	d019      	beq.n	80008a0 <processApp_MCU+0x74>
			if (checkSensorMode(SLEEP) + checkSensorState(SENSOR_DEACTIVE) >= myStation.ssNode_list->length )	{
 800086c:	2000      	movs	r0, #0
 800086e:	f000 f8b9 	bl	80009e4 <checkSensorMode>
 8000872:	4603      	mov	r3, r0
 8000874:	461c      	mov	r4, r3
 8000876:	2002      	movs	r0, #2
 8000878:	f000 f88e 	bl	8000998 <checkSensorState>
 800087c:	4603      	mov	r3, r0
 800087e:	4423      	add	r3, r4
 8000880:	461a      	mov	r2, r3
 8000882:	4b24      	ldr	r3, [pc, #144]	; (8000914 <processApp_MCU+0xe8>)
 8000884:	68db      	ldr	r3, [r3, #12]
 8000886:	689b      	ldr	r3, [r3, #8]
 8000888:	429a      	cmp	r2, r3
 800088a:	d309      	bcc.n	80008a0 <processApp_MCU+0x74>
				if (Lora_Setmode(WAKE , 1)){
 800088c:	2101      	movs	r1, #1
 800088e:	2001      	movs	r0, #1
 8000890:	f004 f8aa 	bl	80049e8 <Lora_Setmode>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d002      	beq.n	80008a0 <processApp_MCU+0x74>
					wake_sensorflag = 0;
 800089a:	4b1c      	ldr	r3, [pc, #112]	; (800090c <processApp_MCU+0xe0>)
 800089c:	2200      	movs	r2, #0
 800089e:	701a      	strb	r2, [r3, #0]
				}
			}
		}
		if ((HAL_GetTick() - NWRDtick > 100000) && checkTaskflag(TASK_SEND_NWREADY))	{
 80008a0:	f007 fa2a 	bl	8007cf8 <HAL_GetTick>
 80008a4:	4602      	mov	r2, r0
 80008a6:	4b1a      	ldr	r3, [pc, #104]	; (8000910 <processApp_MCU+0xe4>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	1ad3      	subs	r3, r2, r3
 80008ac:	4a1a      	ldr	r2, [pc, #104]	; (8000918 <processApp_MCU+0xec>)
 80008ae:	4293      	cmp	r3, r2
 80008b0:	d908      	bls.n	80008c4 <processApp_MCU+0x98>
 80008b2:	2008      	movs	r0, #8
 80008b4:	f004 fe3c 	bl	8005530 <checkTaskflag>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d002      	beq.n	80008c4 <processApp_MCU+0x98>
			sendData2Server(DATA_NETWREADY);
 80008be:	2002      	movs	r0, #2
 80008c0:	f001 f908 	bl	8001ad4 <sendData2Server>
		}
		// Calibration Mode
//		if (checkStationMode() == STATION_MODE_CALIB)	{
		// Start calib
		if( checkTaskflag(TASK_START_CALIB) ) {
 80008c4:	2003      	movs	r0, #3
 80008c6:	f004 fe33 	bl	8005530 <checkTaskflag>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d007      	beq.n	80008e0 <processApp_MCU+0xb4>
			// Receive Sensor DATA CALIBRATION

			// Send DATA CALIBRATION to Server
			triggerTaskflag(TASK_SEND_DATACALIB, FLAG_EN);
 80008d0:	2101      	movs	r1, #1
 80008d2:	200a      	movs	r0, #10
 80008d4:	f004 ff2e 	bl	8005734 <triggerTaskflag>
			triggerTaskflag(TASK_START_CALIB, FLAG_DIS);
 80008d8:	2100      	movs	r1, #0
 80008da:	2003      	movs	r0, #3
 80008dc:	f004 ff2a 	bl	8005734 <triggerTaskflag>

	// Normal Mode
//	if (checkStationMode() == STATION_MODE_NORMAL)	{

		// Send data period
		if (HAL_GetTick() - tick >= UPDATE_DATA_PERIOD *1000)	{
 80008e0:	f007 fa0a 	bl	8007cf8 <HAL_GetTick>
 80008e4:	4602      	mov	r2, r0
 80008e6:	4b0d      	ldr	r3, [pc, #52]	; (800091c <processApp_MCU+0xf0>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	1ad3      	subs	r3, r2, r3
 80008ec:	f242 720f 	movw	r2, #9999	; 0x270f
 80008f0:	4293      	cmp	r3, r2
 80008f2:	d908      	bls.n	8000906 <processApp_MCU+0xda>
			triggerTaskflag(TASK_SEND_DATAPERIOD, FLAG_EN);
 80008f4:	2101      	movs	r1, #1
 80008f6:	2009      	movs	r0, #9
 80008f8:	f004 ff1c 	bl	8005734 <triggerTaskflag>
			tick = HAL_GetTick();
 80008fc:	f007 f9fc 	bl	8007cf8 <HAL_GetTick>
 8000900:	4603      	mov	r3, r0
 8000902:	4a06      	ldr	r2, [pc, #24]	; (800091c <processApp_MCU+0xf0>)
 8000904:	6013      	str	r3, [r2, #0]
		}
//	}



}
 8000906:	bf00      	nop
 8000908:	bd98      	pop	{r3, r4, r7, pc}
 800090a:	bf00      	nop
 800090c:	200005dc 	.word	0x200005dc
 8000910:	200005d8 	.word	0x200005d8
 8000914:	20000474 	.word	0x20000474
 8000918:	000186a0 	.word	0x000186a0
 800091c:	200005d4 	.word	0x200005d4

08000920 <initApp_MQTT>:

uint32_t tickconnect =0;
uint32_t tickreg = 0;
uint32_t ticksend = 0;
void initApp_MQTT()
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af02      	add	r7, sp, #8
//	myStation = station;
//	mySim = sim;
	init_MQTT();
 8000926:	f004 f8a3 	bl	8004a70 <init_MQTT>
	initServerMsg();
 800092a:	f000 fc93 	bl	8001254 <initServerMsg>
	SIM_sendCMD((uint8_t*)"ATE0",(uint8_t*)"OK", ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, 1000);
 800092e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000932:	9300      	str	r3, [sp, #0]
 8000934:	2301      	movs	r3, #1
 8000936:	2201      	movs	r2, #1
 8000938:	4903      	ldr	r1, [pc, #12]	; (8000948 <initApp_MQTT+0x28>)
 800093a:	4804      	ldr	r0, [pc, #16]	; (800094c <initApp_MQTT+0x2c>)
 800093c:	f001 ff7e 	bl	800283c <SIM_sendCMD>
}
 8000940:	bf00      	nop
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	0800ec5c 	.word	0x0800ec5c
 800094c:	0800ec60 	.word	0x0800ec60

08000950 <dataCalibavailble>:

uint8_t dataCalibavailble()
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
	Node * current =myStation.ssNode_list->head->next;
 8000956:	4b0f      	ldr	r3, [pc, #60]	; (8000994 <dataCalibavailble+0x44>)
 8000958:	68db      	ldr	r3, [r3, #12]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800095e:	607b      	str	r3, [r7, #4]
		while (current != myStation.ssNode_list->tail)	{
 8000960:	e00c      	b.n	800097c <dataCalibavailble+0x2c>
			if (current->SSnode.dataCalibAvailable) 	{
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	79db      	ldrb	r3, [r3, #7]
 8000966:	2b00      	cmp	r3, #0
 8000968:	d005      	beq.n	8000976 <dataCalibavailble+0x26>
				triggerTaskflag(TASK_SEND_DATACALIB, FLAG_EN);
 800096a:	2101      	movs	r1, #1
 800096c:	200a      	movs	r0, #10
 800096e:	f004 fee1 	bl	8005734 <triggerTaskflag>
				return 1;
 8000972:	2301      	movs	r3, #1
 8000974:	e009      	b.n	800098a <dataCalibavailble+0x3a>
			}
			current = current->next;
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800097a:	607b      	str	r3, [r7, #4]
		while (current != myStation.ssNode_list->tail)	{
 800097c:	4b05      	ldr	r3, [pc, #20]	; (8000994 <dataCalibavailble+0x44>)
 800097e:	68db      	ldr	r3, [r3, #12]
 8000980:	685b      	ldr	r3, [r3, #4]
 8000982:	687a      	ldr	r2, [r7, #4]
 8000984:	429a      	cmp	r2, r3
 8000986:	d1ec      	bne.n	8000962 <dataCalibavailble+0x12>
		}
	return 0;
 8000988:	2300      	movs	r3, #0
}
 800098a:	4618      	mov	r0, r3
 800098c:	3708      	adds	r7, #8
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	20000474 	.word	0x20000474

08000998 <checkSensorState>:

uint8_t checkSensorState(sensor_state_t state)
{
 8000998:	b480      	push	{r7}
 800099a:	b085      	sub	sp, #20
 800099c:	af00      	add	r7, sp, #0
 800099e:	4603      	mov	r3, r0
 80009a0:	71fb      	strb	r3, [r7, #7]
	uint8_t count = 0;
 80009a2:	2300      	movs	r3, #0
 80009a4:	73fb      	strb	r3, [r7, #15]
	Node * current =myStation.ssNode_list->head->next;
 80009a6:	4b0e      	ldr	r3, [pc, #56]	; (80009e0 <checkSensorState+0x48>)
 80009a8:	68db      	ldr	r3, [r3, #12]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80009ae:	60bb      	str	r3, [r7, #8]
		while (current != myStation.ssNode_list->tail)	{
 80009b0:	e00a      	b.n	80009c8 <checkSensorState+0x30>
			if (current->SSnode.Sensor_state == state ) 	{
 80009b2:	68bb      	ldr	r3, [r7, #8]
 80009b4:	799b      	ldrb	r3, [r3, #6]
 80009b6:	79fa      	ldrb	r2, [r7, #7]
 80009b8:	429a      	cmp	r2, r3
 80009ba:	d102      	bne.n	80009c2 <checkSensorState+0x2a>
				count++;
 80009bc:	7bfb      	ldrb	r3, [r7, #15]
 80009be:	3301      	adds	r3, #1
 80009c0:	73fb      	strb	r3, [r7, #15]
			}
			current = current->next;
 80009c2:	68bb      	ldr	r3, [r7, #8]
 80009c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80009c6:	60bb      	str	r3, [r7, #8]
		while (current != myStation.ssNode_list->tail)	{
 80009c8:	4b05      	ldr	r3, [pc, #20]	; (80009e0 <checkSensorState+0x48>)
 80009ca:	68db      	ldr	r3, [r3, #12]
 80009cc:	685b      	ldr	r3, [r3, #4]
 80009ce:	68ba      	ldr	r2, [r7, #8]
 80009d0:	429a      	cmp	r2, r3
 80009d2:	d1ee      	bne.n	80009b2 <checkSensorState+0x1a>
		}
	return count;
 80009d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80009d6:	4618      	mov	r0, r3
 80009d8:	3714      	adds	r7, #20
 80009da:	46bd      	mov	sp, r7
 80009dc:	bc80      	pop	{r7}
 80009de:	4770      	bx	lr
 80009e0:	20000474 	.word	0x20000474

080009e4 <checkSensorMode>:

uint8_t checkSensorMode(sensor_mode_t mode)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b085      	sub	sp, #20
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	4603      	mov	r3, r0
 80009ec:	71fb      	strb	r3, [r7, #7]
	uint8_t count = 0;
 80009ee:	2300      	movs	r3, #0
 80009f0:	73fb      	strb	r3, [r7, #15]
	Node * current =myStation.ssNode_list->head->next;
 80009f2:	4b0e      	ldr	r3, [pc, #56]	; (8000a2c <checkSensorMode+0x48>)
 80009f4:	68db      	ldr	r3, [r3, #12]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80009fa:	60bb      	str	r3, [r7, #8]
		while (current != myStation.ssNode_list->tail)	{
 80009fc:	e00a      	b.n	8000a14 <checkSensorMode+0x30>
			if (current->SSnode.sensorMode == mode ) 	{
 80009fe:	68bb      	ldr	r3, [r7, #8]
 8000a00:	7a5b      	ldrb	r3, [r3, #9]
 8000a02:	79fa      	ldrb	r2, [r7, #7]
 8000a04:	429a      	cmp	r2, r3
 8000a06:	d102      	bne.n	8000a0e <checkSensorMode+0x2a>
				count++;
 8000a08:	7bfb      	ldrb	r3, [r7, #15]
 8000a0a:	3301      	adds	r3, #1
 8000a0c:	73fb      	strb	r3, [r7, #15]
			}
			current = current->next;
 8000a0e:	68bb      	ldr	r3, [r7, #8]
 8000a10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000a12:	60bb      	str	r3, [r7, #8]
		while (current != myStation.ssNode_list->tail)	{
 8000a14:	4b05      	ldr	r3, [pc, #20]	; (8000a2c <checkSensorMode+0x48>)
 8000a16:	68db      	ldr	r3, [r3, #12]
 8000a18:	685b      	ldr	r3, [r3, #4]
 8000a1a:	68ba      	ldr	r2, [r7, #8]
 8000a1c:	429a      	cmp	r2, r3
 8000a1e:	d1ee      	bne.n	80009fe <checkSensorMode+0x1a>
		}
	return count;
 8000a20:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	3714      	adds	r7, #20
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bc80      	pop	{r7}
 8000a2a:	4770      	bx	lr
 8000a2c:	20000474 	.word	0x20000474

08000a30 <sendNWready>:
void sendNWready()
{
 8000a30:	b598      	push	{r3, r4, r7, lr}
 8000a32:	af00      	add	r7, sp, #0
	if ( checkSensorMode(WAKE) + checkSensorState(SENSOR_DEACTIVE) >= myStation.ssNode_list->length  )	{
 8000a34:	2001      	movs	r0, #1
 8000a36:	f7ff ffd5 	bl	80009e4 <checkSensorMode>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	461c      	mov	r4, r3
 8000a3e:	2002      	movs	r0, #2
 8000a40:	f7ff ffaa 	bl	8000998 <checkSensorState>
 8000a44:	4603      	mov	r3, r0
 8000a46:	4423      	add	r3, r4
 8000a48:	461a      	mov	r2, r3
 8000a4a:	4b05      	ldr	r3, [pc, #20]	; (8000a60 <sendNWready+0x30>)
 8000a4c:	68db      	ldr	r3, [r3, #12]
 8000a4e:	689b      	ldr	r3, [r3, #8]
 8000a50:	429a      	cmp	r2, r3
 8000a52:	d302      	bcc.n	8000a5a <sendNWready+0x2a>
		sendData2Server(DATA_NETWREADY);
 8000a54:	2002      	movs	r0, #2
 8000a56:	f001 f83d 	bl	8001ad4 <sendData2Server>
	}
}
 8000a5a:	bf00      	nop
 8000a5c:	bd98      	pop	{r3, r4, r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	20000474 	.word	0x20000474

08000a64 <processApp_MQTT>:
void processApp_MQTT(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af02      	add	r7, sp, #8
//	 Check for connection to MQTT broker
	if (HAL_GetTick() - tickconnect > 30000)	{
 8000a6a:	f007 f945 	bl	8007cf8 <HAL_GetTick>
 8000a6e:	4602      	mov	r2, r0
 8000a70:	4bbb      	ldr	r3, [pc, #748]	; (8000d60 <processApp_MQTT+0x2fc>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	1ad3      	subs	r3, r2, r3
 8000a76:	f247 5230 	movw	r2, #30000	; 0x7530
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d910      	bls.n	8000aa0 <processApp_MQTT+0x3c>
		MQTT_connected();
 8000a7e:	f004 f957 	bl	8004d30 <MQTT_connected>
		if (!checkSubcribe((uint8_t*)TOPIC_SUB) )	{
 8000a82:	48b8      	ldr	r0, [pc, #736]	; (8000d64 <processApp_MQTT+0x300>)
 8000a84:	f004 fc34 	bl	80052f0 <checkSubcribe>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d103      	bne.n	8000a96 <processApp_MQTT+0x32>
			triggerTaskflag(TASK_SUBSCRIBE, FLAG_EN);
 8000a8e:	2101      	movs	r1, #1
 8000a90:	2001      	movs	r0, #1
 8000a92:	f004 fe4f 	bl	8005734 <triggerTaskflag>
		}
		tickconnect = HAL_GetTick();
 8000a96:	f007 f92f 	bl	8007cf8 <HAL_GetTick>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	4ab0      	ldr	r2, [pc, #704]	; (8000d60 <processApp_MQTT+0x2fc>)
 8000a9e:	6013      	str	r3, [r2, #0]
	}
	if ( !mySIM.mqttServer.connect  ) {
 8000aa0:	4bb1      	ldr	r3, [pc, #708]	; (8000d68 <processApp_MQTT+0x304>)
 8000aa2:	7b9b      	ldrb	r3, [r3, #14]
 8000aa4:	b2db      	uxtb	r3, r3
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d108      	bne.n	8000abc <processApp_MQTT+0x58>
			if (MQTT_connect())	{
 8000aaa:	f004 fa97 	bl	8004fdc <MQTT_connect>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d003      	beq.n	8000abc <processApp_MQTT+0x58>
				triggerTaskflag(TASK_SUBSCRIBE, FLAG_EN);
 8000ab4:	2101      	movs	r1, #1
 8000ab6:	2001      	movs	r0, #1
 8000ab8:	f004 fe3c 	bl	8005734 <triggerTaskflag>
			}
		}
	if (mySIM.mqttServer.connect)	{
 8000abc:	4baa      	ldr	r3, [pc, #680]	; (8000d68 <processApp_MQTT+0x304>)
 8000abe:	7b9b      	ldrb	r3, [r3, #14]
 8000ac0:	b2db      	uxtb	r3, r3
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	f000 8137 	beq.w	8000d36 <processApp_MQTT+0x2d2>

		// Check for subscribe to broker
		if (  checkTaskflag(TASK_SUBSCRIBE) ) {
 8000ac8:	2001      	movs	r0, #1
 8000aca:	f004 fd31 	bl	8005530 <checkTaskflag>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d00f      	beq.n	8000af4 <processApp_MQTT+0x90>

			if ( MQTT_subcribe( (uint8_t*)TOPIC_SUB ) && MQTT_subcribe((uint8_t*)TOPIC_SUB_BROADCAST)) {
 8000ad4:	48a3      	ldr	r0, [pc, #652]	; (8000d64 <processApp_MQTT+0x300>)
 8000ad6:	f004 fb9f 	bl	8005218 <MQTT_subcribe>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d009      	beq.n	8000af4 <processApp_MQTT+0x90>
 8000ae0:	48a2      	ldr	r0, [pc, #648]	; (8000d6c <processApp_MQTT+0x308>)
 8000ae2:	f004 fb99 	bl	8005218 <MQTT_subcribe>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d003      	beq.n	8000af4 <processApp_MQTT+0x90>
				triggerTaskflag(TASK_SUBSCRIBE, FLAG_DIS);
 8000aec:	2100      	movs	r1, #0
 8000aee:	2001      	movs	r0, #1
 8000af0:	f004 fe20 	bl	8005734 <triggerTaskflag>
			}
		}
		// Check for register to Server
		if ( checkTaskflag(TASK_REGISTER) )	{
 8000af4:	2000      	movs	r0, #0
 8000af6:	f004 fd1b 	bl	8005530 <checkTaskflag>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d010      	beq.n	8000b22 <processApp_MQTT+0xbe>
			if (HAL_GetTick() - tickreg > 10000)	{
 8000b00:	f007 f8fa 	bl	8007cf8 <HAL_GetTick>
 8000b04:	4602      	mov	r2, r0
 8000b06:	4b9a      	ldr	r3, [pc, #616]	; (8000d70 <processApp_MQTT+0x30c>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	1ad3      	subs	r3, r2, r3
 8000b0c:	f242 7210 	movw	r2, #10000	; 0x2710
 8000b10:	4293      	cmp	r3, r2
 8000b12:	d906      	bls.n	8000b22 <processApp_MQTT+0xbe>
				Register2Server();
 8000b14:	f000 fef8 	bl	8001908 <Register2Server>
				tickreg = HAL_GetTick();
 8000b18:	f007 f8ee 	bl	8007cf8 <HAL_GetTick>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	4a94      	ldr	r2, [pc, #592]	; (8000d70 <processApp_MQTT+0x30c>)
 8000b20:	6013      	str	r3, [r2, #0]
			}
		}
		// Send NETWORK READY message to Server
		if ( checkTaskflag(TASK_SEND_NWREADY))	{
 8000b22:	2008      	movs	r0, #8
 8000b24:	f004 fd04 	bl	8005530 <checkTaskflag>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <processApp_MQTT+0xce>
			sendNWready();
 8000b2e:	f7ff ff7f 	bl	8000a30 <sendNWready>
		}
		// Send DATA CALIB
		if(checkTaskflag(TASK_SEND_DATACALIB) && dataCalibavailble())	{
 8000b32:	200a      	movs	r0, #10
 8000b34:	f004 fcfc 	bl	8005530 <checkTaskflag>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d007      	beq.n	8000b4e <processApp_MQTT+0xea>
 8000b3e:	f7ff ff07 	bl	8000950 <dataCalibavailble>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d002      	beq.n	8000b4e <processApp_MQTT+0xea>
			sendData2Server(DATA_CALIB);
 8000b48:	2005      	movs	r0, #5
 8000b4a:	f000 ffc3 	bl	8001ad4 <sendData2Server>
		}
		// Send DATA AFTER CALIB
		if (checkTaskflag(TASK_SEND_DATAAFTERCALIB) )	{
 8000b4e:	200b      	movs	r0, #11
 8000b50:	f004 fcee 	bl	8005530 <checkTaskflag>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d006      	beq.n	8000b68 <processApp_MQTT+0x104>
			triggerTaskflag(TASK_SEND_DATACALIB, FLAG_DIS);
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	200a      	movs	r0, #10
 8000b5e:	f004 fde9 	bl	8005734 <triggerTaskflag>
			sendData2Server(DATA_AFTERCALIB);
 8000b62:	2007      	movs	r0, #7
 8000b64:	f000 ffb6 	bl	8001ad4 <sendData2Server>
		}

		// Send DATA PERIOD
		if (checkTaskflag(TASK_SEND_DATAPERIOD))	{
 8000b68:	2009      	movs	r0, #9
 8000b6a:	f004 fce1 	bl	8005530 <checkTaskflag>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d010      	beq.n	8000b96 <processApp_MQTT+0x132>
			if (HAL_GetTick() - ticksend > 2000)	{
 8000b74:	f007 f8c0 	bl	8007cf8 <HAL_GetTick>
 8000b78:	4602      	mov	r2, r0
 8000b7a:	4b7e      	ldr	r3, [pc, #504]	; (8000d74 <processApp_MQTT+0x310>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	1ad3      	subs	r3, r2, r3
 8000b80:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000b84:	d907      	bls.n	8000b96 <processApp_MQTT+0x132>
				sendData2Server(DATA_PERIOD);
 8000b86:	2001      	movs	r0, #1
 8000b88:	f000 ffa4 	bl	8001ad4 <sendData2Server>
				ticksend = HAL_GetTick();
 8000b8c:	f007 f8b4 	bl	8007cf8 <HAL_GetTick>
 8000b90:	4603      	mov	r3, r0
 8000b92:	4a78      	ldr	r2, [pc, #480]	; (8000d74 <processApp_MQTT+0x310>)
 8000b94:	6013      	str	r3, [r2, #0]
			}

		}
		// Send MBA status
		if (checkTaskflag(TASK_SEND_MBA_STATUS))	{
 8000b96:	2004      	movs	r0, #4
 8000b98:	f004 fcca 	bl	8005530 <checkTaskflag>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d006      	beq.n	8000bb0 <processApp_MQTT+0x14c>
			sendData2Server(DATA_MBA_STATE);
 8000ba2:	2008      	movs	r0, #8
 8000ba4:	f000 ff96 	bl	8001ad4 <sendData2Server>
			triggerTaskflag(TASK_SEND_MBA_STATUS, FLAG_DIS);
 8000ba8:	2100      	movs	r1, #0
 8000baa:	2004      	movs	r0, #4
 8000bac:	f004 fdc2 	bl	8005734 <triggerTaskflag>
		}
		// Send step Reach Limit
		if (checkTaskflag(TASK_SEND_STEP_LIMIT))	{
 8000bb0:	2005      	movs	r0, #5
 8000bb2:	f004 fcbd 	bl	8005530 <checkTaskflag>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d006      	beq.n	8000bca <processApp_MQTT+0x166>
			sendData2Server(DATA_STEP_REACH_LIMIT);
 8000bbc:	2009      	movs	r0, #9
 8000bbe:	f000 ff89 	bl	8001ad4 <sendData2Server>
			triggerTaskflag(TASK_SEND_STEP_LIMIT, FLAG_DIS);
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	2005      	movs	r0, #5
 8000bc6:	f004 fdb5 	bl	8005734 <triggerTaskflag>
		}
		// SMS control MBA
		if(checkTaskflag(TASK_SEND_CTRLMBA))	{
 8000bca:	200c      	movs	r0, #12
 8000bcc:	f004 fcb0 	bl	8005530 <checkTaskflag>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d028      	beq.n	8000c28 <processApp_MQTT+0x1c4>
			if (checkSMSrequest(SMS_CMD_CTRL_ON) )	{
 8000bd6:	2000      	movs	r0, #0
 8000bd8:	f002 fb86 	bl	80032e8 <checkSMSrequest>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d00c      	beq.n	8000bfc <processApp_MQTT+0x198>
				CMD_SMS_Ctrl_MBA(mySIM.sms.CtrlON.data, mySIM.sms.CtrlON.datalength, MBA_ON);
 8000be2:	4b61      	ldr	r3, [pc, #388]	; (8000d68 <processApp_MQTT+0x304>)
 8000be4:	f8b3 315a 	ldrh.w	r3, [r3, #346]	; 0x15a
 8000be8:	2201      	movs	r2, #1
 8000bea:	4619      	mov	r1, r3
 8000bec:	4862      	ldr	r0, [pc, #392]	; (8000d78 <processApp_MQTT+0x314>)
 8000bee:	f001 fbc3 	bl	8002378 <CMD_SMS_Ctrl_MBA>
				triggerSMSrequest(SMS_CMD_CTRL_ON, SMS_CMD_DISABLE);
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	2000      	movs	r0, #0
 8000bf6:	f002 fbff 	bl	80033f8 <triggerSMSrequest>
 8000bfa:	e011      	b.n	8000c20 <processApp_MQTT+0x1bc>
			}
			else if (checkSMSrequest(SMS_CMD_CTRL_OFF))	{
 8000bfc:	2001      	movs	r0, #1
 8000bfe:	f002 fb73 	bl	80032e8 <checkSMSrequest>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d00b      	beq.n	8000c20 <processApp_MQTT+0x1bc>
				CMD_SMS_Ctrl_MBA(mySIM.sms.CtrlOFF.data, mySIM.sms.CtrlOFF.datalength, MBA_OFF);
 8000c08:	4b57      	ldr	r3, [pc, #348]	; (8000d68 <processApp_MQTT+0x304>)
 8000c0a:	f8b3 326c 	ldrh.w	r3, [r3, #620]	; 0x26c
 8000c0e:	2202      	movs	r2, #2
 8000c10:	4619      	mov	r1, r3
 8000c12:	485a      	ldr	r0, [pc, #360]	; (8000d7c <processApp_MQTT+0x318>)
 8000c14:	f001 fbb0 	bl	8002378 <CMD_SMS_Ctrl_MBA>
				triggerSMSrequest(SMS_CMD_CTRL_OFF, SMS_CMD_DISABLE);
 8000c18:	2100      	movs	r1, #0
 8000c1a:	2001      	movs	r0, #1
 8000c1c:	f002 fbec 	bl	80033f8 <triggerSMSrequest>
			}
			triggerTaskflag(TASK_SEND_CTRLMBA, FLAG_DIS);
 8000c20:	2100      	movs	r1, #0
 8000c22:	200c      	movs	r0, #12
 8000c24:	f004 fd86 	bl	8005734 <triggerTaskflag>
		}
		// SMS control step motor
		if(checkTaskflag(TASK_SEND_CTRLSTEPMOR))	{
 8000c28:	200d      	movs	r0, #13
 8000c2a:	f004 fc81 	bl	8005530 <checkTaskflag>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d02c      	beq.n	8000c8e <processApp_MQTT+0x22a>
			if (checkSMSrequest(SMS_CMD_CTRL_INC) )	{
 8000c34:	2003      	movs	r0, #3
 8000c36:	f002 fb57 	bl	80032e8 <checkSMSrequest>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d00e      	beq.n	8000c5e <processApp_MQTT+0x1fa>
				CMD_SMS_Ctrl_StepM(mySIM.sms.CtrlINC.data, mySIM.sms.CtrlINC.datalength, STEPM_DIR_INC, STEPM_MODE_STEP, 2);
 8000c40:	4b49      	ldr	r3, [pc, #292]	; (8000d68 <processApp_MQTT+0x304>)
 8000c42:	f8b3 1490 	ldrh.w	r1, [r3, #1168]	; 0x490
 8000c46:	2302      	movs	r3, #2
 8000c48:	9300      	str	r3, [sp, #0]
 8000c4a:	2302      	movs	r3, #2
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	484c      	ldr	r0, [pc, #304]	; (8000d80 <processApp_MQTT+0x31c>)
 8000c50:	f001 fbb6 	bl	80023c0 <CMD_SMS_Ctrl_StepM>
				triggerSMSrequest(SMS_CMD_CTRL_INC, SMS_CMD_DISABLE);
 8000c54:	2100      	movs	r1, #0
 8000c56:	2003      	movs	r0, #3
 8000c58:	f002 fbce 	bl	80033f8 <triggerSMSrequest>
 8000c5c:	e013      	b.n	8000c86 <processApp_MQTT+0x222>
			}
			else if (checkSMSrequest(SMS_CMD_CTRL_DEC))	{
 8000c5e:	2004      	movs	r0, #4
 8000c60:	f002 fb42 	bl	80032e8 <checkSMSrequest>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d00d      	beq.n	8000c86 <processApp_MQTT+0x222>
				CMD_SMS_Ctrl_StepM(mySIM.sms.CtrlDEC.data, mySIM.sms.CtrlDEC.datalength, STEPM_DIR_DEC, STEPM_MODE_STEP, 2);
 8000c6a:	4b3f      	ldr	r3, [pc, #252]	; (8000d68 <processApp_MQTT+0x304>)
 8000c6c:	f8b3 15a2 	ldrh.w	r1, [r3, #1442]	; 0x5a2
 8000c70:	2302      	movs	r3, #2
 8000c72:	9300      	str	r3, [sp, #0]
 8000c74:	2302      	movs	r3, #2
 8000c76:	2202      	movs	r2, #2
 8000c78:	4842      	ldr	r0, [pc, #264]	; (8000d84 <processApp_MQTT+0x320>)
 8000c7a:	f001 fba1 	bl	80023c0 <CMD_SMS_Ctrl_StepM>
				triggerSMSrequest(SMS_CMD_CTRL_DEC, SMS_CMD_DISABLE);
 8000c7e:	2100      	movs	r1, #0
 8000c80:	2004      	movs	r0, #4
 8000c82:	f002 fbb9 	bl	80033f8 <triggerSMSrequest>
			}
			triggerTaskflag(TASK_SEND_CTRLSTEPMOR, FLAG_DIS);
 8000c86:	2100      	movs	r1, #0
 8000c88:	200d      	movs	r0, #13
 8000c8a:	f004 fd53 	bl	8005734 <triggerTaskflag>
		}
		// SMS calib
		if(checkTaskflag(TASK_SEND_CALIB))	{
 8000c8e:	200e      	movs	r0, #14
 8000c90:	f004 fc4e 	bl	8005530 <checkTaskflag>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d00e      	beq.n	8000cb8 <processApp_MQTT+0x254>
			CMD_SMS_calib(mySIM.sms.CtrlCALIB.data, mySIM.sms.CtrlCALIB.datalength);
 8000c9a:	4b33      	ldr	r3, [pc, #204]	; (8000d68 <processApp_MQTT+0x304>)
 8000c9c:	f8b3 337e 	ldrh.w	r3, [r3, #894]	; 0x37e
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	4839      	ldr	r0, [pc, #228]	; (8000d88 <processApp_MQTT+0x324>)
 8000ca4:	f001 fb24 	bl	80022f0 <CMD_SMS_calib>
			triggerSMSrequest(SMS_CMD_CTRL_CALIB, SMS_CMD_DISABLE);
 8000ca8:	2100      	movs	r1, #0
 8000caa:	2002      	movs	r0, #2
 8000cac:	f002 fba4 	bl	80033f8 <triggerSMSrequest>
			triggerTaskflag(TASK_SEND_CALIB, FLAG_DIS);
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	200e      	movs	r0, #14
 8000cb4:	f004 fd3e 	bl	8005734 <triggerTaskflag>
		}
		// SMS get status
		if(checkTaskflag(TASK_SEND_GETSTATUS))	{
 8000cb8:	200f      	movs	r0, #15
 8000cba:	f004 fc39 	bl	8005530 <checkTaskflag>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d00e      	beq.n	8000ce2 <processApp_MQTT+0x27e>
			CMD_SMS_getStatus(mySIM.sms.GetStatus.data, mySIM.sms.GetStatus.datalength);
 8000cc4:	4b28      	ldr	r3, [pc, #160]	; (8000d68 <processApp_MQTT+0x304>)
 8000cc6:	f8b3 36b4 	ldrh.w	r3, [r3, #1716]	; 0x6b4
 8000cca:	4619      	mov	r1, r3
 8000ccc:	482f      	ldr	r0, [pc, #188]	; (8000d8c <processApp_MQTT+0x328>)
 8000cce:	f001 fb31 	bl	8002334 <CMD_SMS_getStatus>
			triggerSMSrequest(SMS_CMD_GET_STATUS, SMS_CMD_DISABLE);
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	2005      	movs	r0, #5
 8000cd6:	f002 fb8f 	bl	80033f8 <triggerSMSrequest>
			triggerTaskflag(TASK_SEND_GETSTATUS, FLAG_DIS);
 8000cda:	2100      	movs	r1, #0
 8000cdc:	200f      	movs	r0, #15
 8000cde:	f004 fd29 	bl	8005734 <triggerTaskflag>
		}
		//SMS get station latest data
		if(checkTaskflag(TASK_SEND_GETSTATION))	{
 8000ce2:	2010      	movs	r0, #16
 8000ce4:	f004 fc24 	bl	8005530 <checkTaskflag>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d00e      	beq.n	8000d0c <processApp_MQTT+0x2a8>
			CMD_SMS_getStationLatestData(mySIM.sms.GetStation.data, mySIM.sms.GetStation.datalength);
 8000cee:	4b1e      	ldr	r3, [pc, #120]	; (8000d68 <processApp_MQTT+0x304>)
 8000cf0:	f8b3 38d8 	ldrh.w	r3, [r3, #2264]	; 0x8d8
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	4826      	ldr	r0, [pc, #152]	; (8000d90 <processApp_MQTT+0x32c>)
 8000cf8:	f001 fb8c 	bl	8002414 <CMD_SMS_getStationLatestData>
			triggerSMSrequest(SMS_CMD_GET_STATION, SMS_CMD_DISABLE);
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	2007      	movs	r0, #7
 8000d00:	f002 fb7a 	bl	80033f8 <triggerSMSrequest>
			triggerTaskflag(TASK_SEND_GETSTATION, FLAG_DIS);
 8000d04:	2100      	movs	r1, #0
 8000d06:	2010      	movs	r0, #16
 8000d08:	f004 fd14 	bl	8005734 <triggerTaskflag>
		}
		// SMS get sensor lastest data
		if(checkTaskflag(TASK_SEND_GETSENSOR))	{
 8000d0c:	2011      	movs	r0, #17
 8000d0e:	f004 fc0f 	bl	8005530 <checkTaskflag>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d00e      	beq.n	8000d36 <processApp_MQTT+0x2d2>
			CMD_SMS_getSensorLatestData(mySIM.sms.GetSensor.data, mySIM.sms.GetSensor.datalength);
 8000d18:	4b13      	ldr	r3, [pc, #76]	; (8000d68 <processApp_MQTT+0x304>)
 8000d1a:	f8b3 37c6 	ldrh.w	r3, [r3, #1990]	; 0x7c6
 8000d1e:	4619      	mov	r1, r3
 8000d20:	481c      	ldr	r0, [pc, #112]	; (8000d94 <processApp_MQTT+0x330>)
 8000d22:	f001 fb99 	bl	8002458 <CMD_SMS_getSensorLatestData>
			triggerSMSrequest(SMS_CMD_GET_SENSOR, SMS_CMD_DISABLE);
 8000d26:	2100      	movs	r1, #0
 8000d28:	2006      	movs	r0, #6
 8000d2a:	f002 fb65 	bl	80033f8 <triggerSMSrequest>
			triggerTaskflag(TASK_SEND_GETSENSOR, FLAG_DIS);
 8000d2e:	2100      	movs	r1, #0
 8000d30:	2011      	movs	r0, #17
 8000d32:	f004 fcff 	bl	8005734 <triggerTaskflag>
		}
	}
	// Processing new coming MQTT message
	if ( mySIM.mqttReceive.newEvent == 1)
 8000d36:	4b0c      	ldr	r3, [pc, #48]	; (8000d68 <processApp_MQTT+0x304>)
 8000d38:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d3c:	2b01      	cmp	r3, #1
 8000d3e:	d10c      	bne.n	8000d5a <processApp_MQTT+0x2f6>
	{
		mySIM.mqttReceive.newEvent = 0;
 8000d40:	4b09      	ldr	r3, [pc, #36]	; (8000d68 <processApp_MQTT+0x304>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f883 2020 	strb.w	r2, [r3, #32]
		// call process Server message function
		processingComingMsg(mySIM.mqttReceive.payload, mySIM.mqttReceive.payloadLen,
 8000d48:	4b07      	ldr	r3, [pc, #28]	; (8000d68 <processApp_MQTT+0x304>)
 8000d4a:	f8b3 312c 	ldrh.w	r3, [r3, #300]	; 0x12c
 8000d4e:	4a12      	ldr	r2, [pc, #72]	; (8000d98 <processApp_MQTT+0x334>)
 8000d50:	7852      	ldrb	r2, [r2, #1]
 8000d52:	4619      	mov	r1, r3
 8000d54:	4811      	ldr	r0, [pc, #68]	; (8000d9c <processApp_MQTT+0x338>)
 8000d56:	f001 f94b 	bl	8001ff0 <processingComingMsg>
				myStation.stID );
	}
}
 8000d5a:	bf00      	nop
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	200005e0 	.word	0x200005e0
 8000d64:	0800ec68 	.word	0x0800ec68
 8000d68:	20001768 	.word	0x20001768
 8000d6c:	0800ec7c 	.word	0x0800ec7c
 8000d70:	200005e4 	.word	0x200005e4
 8000d74:	200005e8 	.word	0x200005e8
 8000d78:	200018c4 	.word	0x200018c4
 8000d7c:	200019d6 	.word	0x200019d6
 8000d80:	20001bfa 	.word	0x20001bfa
 8000d84:	20001d0c 	.word	0x20001d0c
 8000d88:	20001ae8 	.word	0x20001ae8
 8000d8c:	20001e1e 	.word	0x20001e1e
 8000d90:	20002042 	.word	0x20002042
 8000d94:	20001f30 	.word	0x20001f30
 8000d98:	20000474 	.word	0x20000474
 8000d9c:	20001794 	.word	0x20001794

08000da0 <initApp_SMS>:
#include "Task.h"

static SMS_t *__MY_SMS;

void initApp_SMS(SMS_t *mySMS)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b083      	sub	sp, #12
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
	__MY_SMS = mySMS;
 8000da8:	4a03      	ldr	r2, [pc, #12]	; (8000db8 <initApp_SMS+0x18>)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	6013      	str	r3, [r2, #0]
}
 8000dae:	bf00      	nop
 8000db0:	370c      	adds	r7, #12
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bc80      	pop	{r7}
 8000db6:	4770      	bx	lr
 8000db8:	200005ec 	.word	0x200005ec

08000dbc <SMSreturn>:

uint8_t SMSreturn (SMS_CMD_t smsCMD)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b084      	sub	sp, #16
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	71fb      	strb	r3, [r7, #7]
	SMS_request_t *tmpSMScmd;
	switch (smsCMD) 	{
 8000dc6:	79fb      	ldrb	r3, [r7, #7]
 8000dc8:	2b07      	cmp	r3, #7
 8000dca:	d841      	bhi.n	8000e50 <SMSreturn+0x94>
 8000dcc:	a201      	add	r2, pc, #4	; (adr r2, 8000dd4 <SMSreturn+0x18>)
 8000dce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dd2:	bf00      	nop
 8000dd4:	08000df5 	.word	0x08000df5
 8000dd8:	08000dfd 	.word	0x08000dfd
 8000ddc:	08000e21 	.word	0x08000e21
 8000de0:	08000e09 	.word	0x08000e09
 8000de4:	08000e15 	.word	0x08000e15
 8000de8:	08000e2d 	.word	0x08000e2d
 8000dec:	08000e45 	.word	0x08000e45
 8000df0:	08000e39 	.word	0x08000e39
	case SMS_CMD_CTRL_ON:
		tmpSMScmd = &__MY_SMS->CtrlON;
 8000df4:	4b21      	ldr	r3, [pc, #132]	; (8000e7c <SMSreturn+0xc0>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	60fb      	str	r3, [r7, #12]
		break;
 8000dfa:	e02a      	b.n	8000e52 <SMSreturn+0x96>
	case SMS_CMD_CTRL_OFF:
		tmpSMScmd = &__MY_SMS->CtrlOFF;
 8000dfc:	4b1f      	ldr	r3, [pc, #124]	; (8000e7c <SMSreturn+0xc0>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	f503 7389 	add.w	r3, r3, #274	; 0x112
 8000e04:	60fb      	str	r3, [r7, #12]
		break;
 8000e06:	e024      	b.n	8000e52 <SMSreturn+0x96>
	case SMS_CMD_CTRL_INC:
		tmpSMScmd = &__MY_SMS->CtrlINC;
 8000e08:	4b1c      	ldr	r3, [pc, #112]	; (8000e7c <SMSreturn+0xc0>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f203 3336 	addw	r3, r3, #822	; 0x336
 8000e10:	60fb      	str	r3, [r7, #12]
		break;
 8000e12:	e01e      	b.n	8000e52 <SMSreturn+0x96>
	case SMS_CMD_CTRL_DEC:
		tmpSMScmd = &__MY_SMS->CtrlDEC;
 8000e14:	4b19      	ldr	r3, [pc, #100]	; (8000e7c <SMSreturn+0xc0>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f503 6389 	add.w	r3, r3, #1096	; 0x448
 8000e1c:	60fb      	str	r3, [r7, #12]
		break;
 8000e1e:	e018      	b.n	8000e52 <SMSreturn+0x96>
	case SMS_CMD_CTRL_CALIB:
		tmpSMScmd = &__MY_SMS->CtrlCALIB;
 8000e20:	4b16      	ldr	r3, [pc, #88]	; (8000e7c <SMSreturn+0xc0>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f503 7309 	add.w	r3, r3, #548	; 0x224
 8000e28:	60fb      	str	r3, [r7, #12]
		break;
 8000e2a:	e012      	b.n	8000e52 <SMSreturn+0x96>
	case SMS_CMD_GET_STATUS:
		tmpSMScmd = &__MY_SMS->GetStatus;
 8000e2c:	4b13      	ldr	r3, [pc, #76]	; (8000e7c <SMSreturn+0xc0>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	f203 535a 	addw	r3, r3, #1370	; 0x55a
 8000e34:	60fb      	str	r3, [r7, #12]
		break;
 8000e36:	e00c      	b.n	8000e52 <SMSreturn+0x96>
	case SMS_CMD_GET_STATION:
		tmpSMScmd = &__MY_SMS->GetStation;
 8000e38:	4b10      	ldr	r3, [pc, #64]	; (8000e7c <SMSreturn+0xc0>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f203 737e 	addw	r3, r3, #1918	; 0x77e
 8000e40:	60fb      	str	r3, [r7, #12]
		break;
 8000e42:	e006      	b.n	8000e52 <SMSreturn+0x96>
	case SMS_CMD_GET_SENSOR:
		tmpSMScmd = &__MY_SMS->GetSensor;
 8000e44:	4b0d      	ldr	r3, [pc, #52]	; (8000e7c <SMSreturn+0xc0>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f203 636c 	addw	r3, r3, #1644	; 0x66c
 8000e4c:	60fb      	str	r3, [r7, #12]
		break;
 8000e4e:	e000      	b.n	8000e52 <SMSreturn+0x96>
	default:
		break;
 8000e50:	bf00      	nop
	}
	if (tmpSMScmd == NULL) 	return 0;
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d101      	bne.n	8000e5c <SMSreturn+0xa0>
 8000e58:	2300      	movs	r3, #0
 8000e5a:	e00a      	b.n	8000e72 <SMSreturn+0xb6>
	SMS_sendMsg(tmpSMScmd->data, tmpSMScmd->datalength, tmpSMScmd->phonenumb);
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	1d18      	adds	r0, r3, #4
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	8859      	ldrh	r1, [r3, #2]
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8000e6a:	461a      	mov	r2, r3
 8000e6c:	f002 fc82 	bl	8003774 <SMS_sendMsg>
	return 1;
 8000e70:	2301      	movs	r3, #1
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	3710      	adds	r7, #16
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	200005ec 	.word	0x200005ec

08000e80 <processApp_SMS>:
void processApp_SMS(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
	processingSMS();
 8000e84:	f002 f988 	bl	8003198 <processingSMS>
	// check for new SMS request
	if (checkSMSrequest(SMS_CMD_CTRL_ON) || checkSMSrequest(SMS_CMD_CTRL_OFF) )	{
 8000e88:	2000      	movs	r0, #0
 8000e8a:	f002 fa2d 	bl	80032e8 <checkSMSrequest>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d105      	bne.n	8000ea0 <processApp_SMS+0x20>
 8000e94:	2001      	movs	r0, #1
 8000e96:	f002 fa27 	bl	80032e8 <checkSMSrequest>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d003      	beq.n	8000ea8 <processApp_SMS+0x28>
		triggerTaskflag(TASK_SEND_CTRLMBA, FLAG_EN);
 8000ea0:	2101      	movs	r1, #1
 8000ea2:	200c      	movs	r0, #12
 8000ea4:	f004 fc46 	bl	8005734 <triggerTaskflag>
	}
	if (checkSMSrequest(SMS_CMD_CTRL_INC) || checkSMSrequest(SMS_CMD_CTRL_DEC) ) {
 8000ea8:	2003      	movs	r0, #3
 8000eaa:	f002 fa1d 	bl	80032e8 <checkSMSrequest>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d105      	bne.n	8000ec0 <processApp_SMS+0x40>
 8000eb4:	2004      	movs	r0, #4
 8000eb6:	f002 fa17 	bl	80032e8 <checkSMSrequest>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d003      	beq.n	8000ec8 <processApp_SMS+0x48>
		triggerTaskflag(TASK_SEND_CTRLSTEPMOR, FLAG_EN);
 8000ec0:	2101      	movs	r1, #1
 8000ec2:	200d      	movs	r0, #13
 8000ec4:	f004 fc36 	bl	8005734 <triggerTaskflag>
	}
	if (checkSMSrequest(SMS_CMD_CTRL_CALIB))	{
 8000ec8:	2002      	movs	r0, #2
 8000eca:	f002 fa0d 	bl	80032e8 <checkSMSrequest>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d003      	beq.n	8000edc <processApp_SMS+0x5c>
		triggerTaskflag(TASK_SEND_CALIB, FLAG_EN);
 8000ed4:	2101      	movs	r1, #1
 8000ed6:	200e      	movs	r0, #14
 8000ed8:	f004 fc2c 	bl	8005734 <triggerTaskflag>
	}
	if (checkSMSrequest(SMS_CMD_GET_STATUS))	{
 8000edc:	2005      	movs	r0, #5
 8000ede:	f002 fa03 	bl	80032e8 <checkSMSrequest>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d003      	beq.n	8000ef0 <processApp_SMS+0x70>
		triggerTaskflag(TASK_SEND_GETSTATUS, FLAG_EN);
 8000ee8:	2101      	movs	r1, #1
 8000eea:	200f      	movs	r0, #15
 8000eec:	f004 fc22 	bl	8005734 <triggerTaskflag>
	}
	if (checkSMSrequest(SMS_CMD_GET_STATION))	{
 8000ef0:	2007      	movs	r0, #7
 8000ef2:	f002 f9f9 	bl	80032e8 <checkSMSrequest>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d003      	beq.n	8000f04 <processApp_SMS+0x84>
		triggerTaskflag(TASK_SEND_GETSTATION, FLAG_EN);
 8000efc:	2101      	movs	r1, #1
 8000efe:	2010      	movs	r0, #16
 8000f00:	f004 fc18 	bl	8005734 <triggerTaskflag>
	}
	if (checkSMSrequest(SMS_CMD_GET_SENSOR))	{
 8000f04:	2006      	movs	r0, #6
 8000f06:	f002 f9ef 	bl	80032e8 <checkSMSrequest>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d003      	beq.n	8000f18 <processApp_SMS+0x98>
		triggerTaskflag(TASK_SEND_GETSENSOR, FLAG_EN);
 8000f10:	2101      	movs	r1, #1
 8000f12:	2011      	movs	r0, #17
 8000f14:	f004 fc0e 	bl	8005734 <triggerTaskflag>
	}
// Check for return SMS
	if (checkSMSreturn(SMS_CMD_CTRL_ON))	{
 8000f18:	2000      	movs	r0, #0
 8000f1a:	f002 faf3 	bl	8003504 <checkSMSreturn>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d006      	beq.n	8000f32 <processApp_SMS+0xb2>
		SMSreturn(SMS_CMD_CTRL_ON);
 8000f24:	2000      	movs	r0, #0
 8000f26:	f7ff ff49 	bl	8000dbc <SMSreturn>
		triggerSMSreturn(SMS_CMD_CTRL_ON, SMS_CMD_DISABLE);
 8000f2a:	2100      	movs	r1, #0
 8000f2c:	2000      	movs	r0, #0
 8000f2e:	f002 fb71 	bl	8003614 <triggerSMSreturn>
//		SMSreturn(SMS_CMD_CTRL_OFF);
//	}
//	if (checkSMSreturn(SMS_CMD_CTRL_INC))	{
//		SMSreturn(SMS_CMD_CTRL_INC);
//	}
	if (checkSMSreturn(SMS_CMD_CTRL_DEC))	{
 8000f32:	2004      	movs	r0, #4
 8000f34:	f002 fae6 	bl	8003504 <checkSMSreturn>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d006      	beq.n	8000f4c <processApp_SMS+0xcc>
		SMSreturn(SMS_CMD_CTRL_DEC);
 8000f3e:	2004      	movs	r0, #4
 8000f40:	f7ff ff3c 	bl	8000dbc <SMSreturn>
		triggerSMSreturn(SMS_CMD_CTRL_DEC, SMS_CMD_DISABLE);
 8000f44:	2100      	movs	r1, #0
 8000f46:	2004      	movs	r0, #4
 8000f48:	f002 fb64 	bl	8003614 <triggerSMSreturn>
	}
//	if (checkSMSreturn(SMS_CMD_CTRL_CALIB))	{
//		SMSreturn(SMS_CMD_CTRL_CALIB);
//	}
	if (checkSMSreturn(SMS_CMD_GET_STATUS))	{
 8000f4c:	2005      	movs	r0, #5
 8000f4e:	f002 fad9 	bl	8003504 <checkSMSreturn>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d006      	beq.n	8000f66 <processApp_SMS+0xe6>
		SMSreturn(SMS_CMD_GET_STATUS);
 8000f58:	2005      	movs	r0, #5
 8000f5a:	f7ff ff2f 	bl	8000dbc <SMSreturn>
		triggerSMSreturn(SMS_CMD_GET_STATUS, SMS_CMD_DISABLE);
 8000f5e:	2100      	movs	r1, #0
 8000f60:	2005      	movs	r0, #5
 8000f62:	f002 fb57 	bl	8003614 <triggerSMSreturn>
	}
	if (checkSMSreturn(SMS_CMD_GET_STATION))	{
 8000f66:	2007      	movs	r0, #7
 8000f68:	f002 facc 	bl	8003504 <checkSMSreturn>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d006      	beq.n	8000f80 <processApp_SMS+0x100>
		SMSreturn(SMS_CMD_GET_STATION);
 8000f72:	2007      	movs	r0, #7
 8000f74:	f7ff ff22 	bl	8000dbc <SMSreturn>
		triggerSMSreturn(SMS_CMD_GET_STATION, SMS_CMD_DISABLE);
 8000f78:	2100      	movs	r1, #0
 8000f7a:	2007      	movs	r0, #7
 8000f7c:	f002 fb4a 	bl	8003614 <triggerSMSreturn>
	}
	if (checkSMSreturn(SMS_CMD_GET_SENSOR))	{
 8000f80:	2006      	movs	r0, #6
 8000f82:	f002 fabf 	bl	8003504 <checkSMSreturn>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d006      	beq.n	8000f9a <processApp_SMS+0x11a>
		SMSreturn(SMS_CMD_GET_SENSOR);
 8000f8c:	2006      	movs	r0, #6
 8000f8e:	f7ff ff15 	bl	8000dbc <SMSreturn>
		triggerSMSreturn(SMS_CMD_GET_SENSOR, SMS_CMD_DISABLE);
 8000f92:	2100      	movs	r1, #0
 8000f94:	2006      	movs	r0, #6
 8000f96:	f002 fb3d 	bl	8003614 <triggerSMSreturn>
	}
}
 8000f9a:	bf00      	nop
 8000f9c:	bd80      	pop	{r7, pc}

08000f9e <initSerial_CFG>:
_RTC *__MY_RTC;

uint8_t alarmflag = 0;

void initSerial_CFG()
{
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	af00      	add	r7, sp, #0
//	__SCFG_UART = huart;
//	__SCFG_DMA_UART = hdma;
	enableReceiveDMAtoIdle_CFG();
 8000fa2:	f000 f811 	bl	8000fc8 <enableReceiveDMAtoIdle_CFG>
}
 8000fa6:	bf00      	nop
 8000fa8:	bd80      	pop	{r7, pc}
	...

08000fac <initGPS>:

void initGPS(_RTC *rtc)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
//	myStation = station;
	__MY_RTC = rtc;
 8000fb4:	4a03      	ldr	r2, [pc, #12]	; (8000fc4 <initGPS+0x18>)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	6013      	str	r3, [r2, #0]
}
 8000fba:	bf00      	nop
 8000fbc:	370c      	adds	r7, #12
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bc80      	pop	{r7}
 8000fc2:	4770      	bx	lr
 8000fc4:	20000cf8 	.word	0x20000cf8

08000fc8 <enableReceiveDMAtoIdle_CFG>:

void enableReceiveDMAtoIdle_CFG(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
	  HAL_UARTEx_ReceiveToIdle_DMA(__SCFG_UART, Rxbuff_CFG, Rx_SIZE_CFG);
 8000fcc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fd0:	4906      	ldr	r1, [pc, #24]	; (8000fec <enableReceiveDMAtoIdle_CFG+0x24>)
 8000fd2:	4807      	ldr	r0, [pc, #28]	; (8000ff0 <enableReceiveDMAtoIdle_CFG+0x28>)
 8000fd4:	f00a f889 	bl	800b0ea <HAL_UARTEx_ReceiveToIdle_DMA>
	  __HAL_DMA_DISABLE_IT(__SCFG_DMA_UART,DMA_IT_HT);
 8000fd8:	4b06      	ldr	r3, [pc, #24]	; (8000ff4 <enableReceiveDMAtoIdle_CFG+0x2c>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	4b05      	ldr	r3, [pc, #20]	; (8000ff4 <enableReceiveDMAtoIdle_CFG+0x2c>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f022 0204 	bic.w	r2, r2, #4
 8000fe6:	601a      	str	r2, [r3, #0]
}
 8000fe8:	bf00      	nop
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	200005f0 	.word	0x200005f0
 8000ff0:	20002a98 	.word	0x20002a98
 8000ff4:	20002b6c 	.word	0x20002b6c

08000ff8 <Serial_CFG_Callback>:
void Serial_CFG_Callback(uint16_t Size)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	4603      	mov	r3, r0
 8001000:	80fb      	strh	r3, [r7, #6]

	oldPos_CFG = newPos_CFG;  // Update the last position before copying new data
 8001002:	4b3d      	ldr	r3, [pc, #244]	; (80010f8 <Serial_CFG_Callback+0x100>)
 8001004:	881a      	ldrh	r2, [r3, #0]
 8001006:	4b3d      	ldr	r3, [pc, #244]	; (80010fc <Serial_CFG_Callback+0x104>)
 8001008:	801a      	strh	r2, [r3, #0]

	/* If the data in large and it is about to exceed the buffer size, we have to route it to the start of the buffer
	 * This is to maintain the circular buffer
	 * The old data in the main buffer will be overlapped
	 */
	if (oldPos_CFG+Size > Main_SIZE_CFG)  // If the current position + new data size is greater than the main buffer
 800100a:	4b3c      	ldr	r3, [pc, #240]	; (80010fc <Serial_CFG_Callback+0x104>)
 800100c:	881b      	ldrh	r3, [r3, #0]
 800100e:	461a      	mov	r2, r3
 8001010:	88fb      	ldrh	r3, [r7, #6]
 8001012:	4413      	add	r3, r2
 8001014:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001018:	dd23      	ble.n	8001062 <Serial_CFG_Callback+0x6a>
	{
		uint8_t datatocopy = Main_SIZE_CFG-oldPos_CFG;  // find out how much space is left in the main buffer
 800101a:	4b38      	ldr	r3, [pc, #224]	; (80010fc <Serial_CFG_Callback+0x104>)
 800101c:	881b      	ldrh	r3, [r3, #0]
 800101e:	b2db      	uxtb	r3, r3
 8001020:	425b      	negs	r3, r3
 8001022:	73fb      	strb	r3, [r7, #15]
		memcpy ((uint8_t *)Mainbuff_CFG+oldPos_CFG, (uint8_t *)Rxbuff_CFG, datatocopy);  // copy data in that remaining space
 8001024:	4b35      	ldr	r3, [pc, #212]	; (80010fc <Serial_CFG_Callback+0x104>)
 8001026:	881b      	ldrh	r3, [r3, #0]
 8001028:	461a      	mov	r2, r3
 800102a:	4b35      	ldr	r3, [pc, #212]	; (8001100 <Serial_CFG_Callback+0x108>)
 800102c:	4413      	add	r3, r2
 800102e:	7bfa      	ldrb	r2, [r7, #15]
 8001030:	4934      	ldr	r1, [pc, #208]	; (8001104 <Serial_CFG_Callback+0x10c>)
 8001032:	4618      	mov	r0, r3
 8001034:	f00b f920 	bl	800c278 <memcpy>

		oldPos_CFG = 0;  // point to the start of the buffer
 8001038:	4b30      	ldr	r3, [pc, #192]	; (80010fc <Serial_CFG_Callback+0x104>)
 800103a:	2200      	movs	r2, #0
 800103c:	801a      	strh	r2, [r3, #0]
		memcpy ((uint8_t *)Mainbuff_CFG, (uint8_t *)Rxbuff_CFG+datatocopy, (Size-datatocopy));  // copy the remaining data
 800103e:	7bfb      	ldrb	r3, [r7, #15]
 8001040:	4a30      	ldr	r2, [pc, #192]	; (8001104 <Serial_CFG_Callback+0x10c>)
 8001042:	1899      	adds	r1, r3, r2
 8001044:	88fa      	ldrh	r2, [r7, #6]
 8001046:	7bfb      	ldrb	r3, [r7, #15]
 8001048:	1ad3      	subs	r3, r2, r3
 800104a:	461a      	mov	r2, r3
 800104c:	482c      	ldr	r0, [pc, #176]	; (8001100 <Serial_CFG_Callback+0x108>)
 800104e:	f00b f913 	bl	800c278 <memcpy>
		newPos_CFG = (Size-datatocopy);  // update the position
 8001052:	7bfb      	ldrb	r3, [r7, #15]
 8001054:	b29b      	uxth	r3, r3
 8001056:	88fa      	ldrh	r2, [r7, #6]
 8001058:	1ad3      	subs	r3, r2, r3
 800105a:	b29a      	uxth	r2, r3
 800105c:	4b26      	ldr	r3, [pc, #152]	; (80010f8 <Serial_CFG_Callback+0x100>)
 800105e:	801a      	strh	r2, [r3, #0]
 8001060:	e010      	b.n	8001084 <Serial_CFG_Callback+0x8c>
	/* if the current position + new data size is less than the main buffer
	 * we will simply copy the data into the buffer and update the position
	 */
	else
	{
		memcpy ((uint8_t *)Mainbuff_CFG+oldPos_CFG, (uint8_t *)Rxbuff_CFG, Size);
 8001062:	4b26      	ldr	r3, [pc, #152]	; (80010fc <Serial_CFG_Callback+0x104>)
 8001064:	881b      	ldrh	r3, [r3, #0]
 8001066:	461a      	mov	r2, r3
 8001068:	4b25      	ldr	r3, [pc, #148]	; (8001100 <Serial_CFG_Callback+0x108>)
 800106a:	4413      	add	r3, r2
 800106c:	88fa      	ldrh	r2, [r7, #6]
 800106e:	4925      	ldr	r1, [pc, #148]	; (8001104 <Serial_CFG_Callback+0x10c>)
 8001070:	4618      	mov	r0, r3
 8001072:	f00b f901 	bl	800c278 <memcpy>
		newPos_CFG = Size+oldPos_CFG;
 8001076:	4b21      	ldr	r3, [pc, #132]	; (80010fc <Serial_CFG_Callback+0x104>)
 8001078:	881a      	ldrh	r2, [r3, #0]
 800107a:	88fb      	ldrh	r3, [r7, #6]
 800107c:	4413      	add	r3, r2
 800107e:	b29a      	uxth	r2, r3
 8001080:	4b1d      	ldr	r3, [pc, #116]	; (80010f8 <Serial_CFG_Callback+0x100>)
 8001082:	801a      	strh	r2, [r3, #0]

	/* Update the position of the Head
	 * If the current position + new size is less then the buffer size, Head will update normally
	 * Or else the head will be at the new position from the beginning
	 */
	if (head_CFG+Size < Main_SIZE_CFG) head_CFG = head_CFG+Size;
 8001084:	4b20      	ldr	r3, [pc, #128]	; (8001108 <Serial_CFG_Callback+0x110>)
 8001086:	881b      	ldrh	r3, [r3, #0]
 8001088:	461a      	mov	r2, r3
 800108a:	88fb      	ldrh	r3, [r7, #6]
 800108c:	4413      	add	r3, r2
 800108e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001092:	da07      	bge.n	80010a4 <Serial_CFG_Callback+0xac>
 8001094:	4b1c      	ldr	r3, [pc, #112]	; (8001108 <Serial_CFG_Callback+0x110>)
 8001096:	881a      	ldrh	r2, [r3, #0]
 8001098:	88fb      	ldrh	r3, [r7, #6]
 800109a:	4413      	add	r3, r2
 800109c:	b29a      	uxth	r2, r3
 800109e:	4b1a      	ldr	r3, [pc, #104]	; (8001108 <Serial_CFG_Callback+0x110>)
 80010a0:	801a      	strh	r2, [r3, #0]
 80010a2:	e009      	b.n	80010b8 <Serial_CFG_Callback+0xc0>
	else head_CFG = head_CFG + Size - Main_SIZE_CFG;
 80010a4:	4b18      	ldr	r3, [pc, #96]	; (8001108 <Serial_CFG_Callback+0x110>)
 80010a6:	881a      	ldrh	r2, [r3, #0]
 80010a8:	88fb      	ldrh	r3, [r7, #6]
 80010aa:	4413      	add	r3, r2
 80010ac:	b29b      	uxth	r3, r3
 80010ae:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80010b2:	b29a      	uxth	r2, r3
 80010b4:	4b14      	ldr	r3, [pc, #80]	; (8001108 <Serial_CFG_Callback+0x110>)
 80010b6:	801a      	strh	r2, [r3, #0]

	if ( checkTaskflag(TASK_GET_GPS_TIME) )	{
 80010b8:	2007      	movs	r0, #7
 80010ba:	f004 fa39 	bl	8005530 <checkTaskflag>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d013      	beq.n	80010ec <Serial_CFG_Callback+0xf4>
		memset(GPS_rxbuffer, 0, GPS_RXBUFF_MAXLEN);
 80010c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010c8:	2100      	movs	r1, #0
 80010ca:	4810      	ldr	r0, [pc, #64]	; (800110c <Serial_CFG_Callback+0x114>)
 80010cc:	f00b f8e2 	bl	800c294 <memset>
		memcpy(GPS_rxbuffer, Rxbuff_CFG, Size);
 80010d0:	88fb      	ldrh	r3, [r7, #6]
 80010d2:	461a      	mov	r2, r3
 80010d4:	490b      	ldr	r1, [pc, #44]	; (8001104 <Serial_CFG_Callback+0x10c>)
 80010d6:	480d      	ldr	r0, [pc, #52]	; (800110c <Serial_CFG_Callback+0x114>)
 80010d8:	f00b f8ce 	bl	800c278 <memcpy>
		GPS_size = Size;
 80010dc:	4a0c      	ldr	r2, [pc, #48]	; (8001110 <Serial_CFG_Callback+0x118>)
 80010de:	88fb      	ldrh	r3, [r7, #6]
 80010e0:	8013      	strh	r3, [r2, #0]
		getGPS_time(__MY_RTC);
 80010e2:	4b0c      	ldr	r3, [pc, #48]	; (8001114 <Serial_CFG_Callback+0x11c>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4618      	mov	r0, r3
 80010e8:	f000 f816 	bl	8001118 <getGPS_time>
	}

	enableReceiveDMAtoIdle_CFG();
 80010ec:	f7ff ff6c 	bl	8000fc8 <enableReceiveDMAtoIdle_CFG>
	 */

//	if (isWordinBuff(Rxbuff_CFG, Size, (uint8_t*)"MCFG+")) {
//		isSerialConfig = 1;
//	}
}
 80010f0:	bf00      	nop
 80010f2:	3710      	adds	r7, #16
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	20000cf2 	.word	0x20000cf2
 80010fc:	20000cf0 	.word	0x20000cf0
 8001100:	200006f0 	.word	0x200006f0
 8001104:	200005f0 	.word	0x200005f0
 8001108:	20000cf4 	.word	0x20000cf4
 800110c:	20000af0 	.word	0x20000af0
 8001110:	20000cf6 	.word	0x20000cf6
 8001114:	20000cf8 	.word	0x20000cf8

08001118 <getGPS_time>:
{
	tail_CFG = head_CFG;
}

uint8_t getGPS_time(_RTC *myRTC)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b08c      	sub	sp, #48	; 0x30
 800111c:	af02      	add	r7, sp, #8
 800111e:	6078      	str	r0, [r7, #4]
//	if (__MY_GPS->getFlag) return 0;
	if ( !DS3231_GetTime(myRTC) )		return 0;
 8001120:	6878      	ldr	r0, [r7, #4]
 8001122:	f002 ffbd 	bl	80040a0 <DS3231_GetTime>
 8001126:	4603      	mov	r3, r0
 8001128:	f083 0301 	eor.w	r3, r3, #1
 800112c:	b2db      	uxtb	r3, r3
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <getGPS_time+0x1e>
 8001132:	2300      	movs	r3, #0
 8001134:	e065      	b.n	8001202 <getGPS_time+0xea>
	uint16_t gpslen = GPS_size;
 8001136:	4b35      	ldr	r3, [pc, #212]	; (800120c <getGPS_time+0xf4>)
 8001138:	881b      	ldrh	r3, [r3, #0]
 800113a:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint8_t *currPos = isWordinBuff(GPS_rxbuffer, gpslen, (uint8_t*)"$GPRMC");
 800113c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800113e:	4a34      	ldr	r2, [pc, #208]	; (8001210 <getGPS_time+0xf8>)
 8001140:	4619      	mov	r1, r3
 8001142:	4834      	ldr	r0, [pc, #208]	; (8001214 <getGPS_time+0xfc>)
 8001144:	f004 f8ee 	bl	8005324 <isWordinBuff>
 8001148:	6238      	str	r0, [r7, #32]
	if ( currPos == NULL )	{
 800114a:	6a3b      	ldr	r3, [r7, #32]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d101      	bne.n	8001154 <getGPS_time+0x3c>
		return 0;
 8001150:	2300      	movs	r3, #0
 8001152:	e056      	b.n	8001202 <getGPS_time+0xea>
	}
	uint16_t remainlen = getRemainsize(currPos, GPS_rxbuffer, gpslen);
 8001154:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001156:	461a      	mov	r2, r3
 8001158:	492e      	ldr	r1, [pc, #184]	; (8001214 <getGPS_time+0xfc>)
 800115a:	6a38      	ldr	r0, [r7, #32]
 800115c:	f004 f961 	bl	8005422 <getRemainsize>
 8001160:	4603      	mov	r3, r0
 8001162:	83fb      	strh	r3, [r7, #30]
	// Get time to buffer
	uint8_t timebuffer [10];
	if ( getBetween((uint8_t*)",", (uint8_t*)".", currPos, remainlen, timebuffer) != 6 )	{
 8001164:	8bfa      	ldrh	r2, [r7, #30]
 8001166:	f107 0314 	add.w	r3, r7, #20
 800116a:	9300      	str	r3, [sp, #0]
 800116c:	4613      	mov	r3, r2
 800116e:	6a3a      	ldr	r2, [r7, #32]
 8001170:	4929      	ldr	r1, [pc, #164]	; (8001218 <getGPS_time+0x100>)
 8001172:	482a      	ldr	r0, [pc, #168]	; (800121c <getGPS_time+0x104>)
 8001174:	f004 f902 	bl	800537c <getBetween>
 8001178:	4603      	mov	r3, r0
 800117a:	2b06      	cmp	r3, #6
 800117c:	d001      	beq.n	8001182 <getGPS_time+0x6a>
		return 0;
 800117e:	2300      	movs	r3, #0
 8001180:	e03f      	b.n	8001202 <getGPS_time+0xea>
 8001182:	8abb      	ldrh	r3, [r7, #20]
	}
	// Convert time from buffer and save to myRTC
	uint8_t tmphour[3];
	uint8_t tmpmin[3];
	uint8_t tmpsec[3];
	memcpy(tmphour, timebuffer, 2);
 8001184:	823b      	strh	r3, [r7, #16]
	memcpy(tmpmin, timebuffer + 2, 2);
 8001186:	f107 0314 	add.w	r3, r7, #20
 800118a:	3302      	adds	r3, #2
 800118c:	881b      	ldrh	r3, [r3, #0]
 800118e:	b29b      	uxth	r3, r3
 8001190:	81bb      	strh	r3, [r7, #12]
	memcpy(tmpsec, timebuffer + 4, 2);
 8001192:	f107 0314 	add.w	r3, r7, #20
 8001196:	3304      	adds	r3, #4
 8001198:	881b      	ldrh	r3, [r3, #0]
 800119a:	b29b      	uxth	r3, r3
 800119c:	813b      	strh	r3, [r7, #8]
	myRTC->Hour = atoi((char*)tmphour) + (uint8_t)MY_TIME_ZONE;
 800119e:	f107 0310 	add.w	r3, r7, #16
 80011a2:	4618      	mov	r0, r3
 80011a4:	f00a ff0a 	bl	800bfbc <atoi>
 80011a8:	4603      	mov	r3, r0
 80011aa:	b2db      	uxtb	r3, r3
 80011ac:	3307      	adds	r3, #7
 80011ae:	b2da      	uxtb	r2, r3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	711a      	strb	r2, [r3, #4]
	myRTC->Min = atoi((char*)tmpmin);
 80011b4:	f107 030c 	add.w	r3, r7, #12
 80011b8:	4618      	mov	r0, r3
 80011ba:	f00a feff 	bl	800bfbc <atoi>
 80011be:	4603      	mov	r3, r0
 80011c0:	b2da      	uxtb	r2, r3
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	715a      	strb	r2, [r3, #5]
	myRTC->Sec = atoi((char*)tmpsec);
 80011c6:	f107 0308 	add.w	r3, r7, #8
 80011ca:	4618      	mov	r0, r3
 80011cc:	f00a fef6 	bl	800bfbc <atoi>
 80011d0:	4603      	mov	r3, r0
 80011d2:	b2da      	uxtb	r2, r3
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	719a      	strb	r2, [r3, #6]
	if ( !DS3231_SetTime(myRTC) )	return 0;
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	f002 ffdd 	bl	8004198 <DS3231_SetTime>
 80011de:	4603      	mov	r3, r0
 80011e0:	f083 0301 	eor.w	r3, r3, #1
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <getGPS_time+0xd6>
 80011ea:	2300      	movs	r3, #0
 80011ec:	e009      	b.n	8001202 <getGPS_time+0xea>
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80011ee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011f2:	480b      	ldr	r0, [pc, #44]	; (8001220 <getGPS_time+0x108>)
 80011f4:	f007 ff0f 	bl	8009016 <HAL_GPIO_TogglePin>
	triggerTaskflag(TASK_GET_GPS_TIME, FLAG_DIS);
 80011f8:	2100      	movs	r1, #0
 80011fa:	2007      	movs	r0, #7
 80011fc:	f004 fa9a 	bl	8005734 <triggerTaskflag>
	return 1;
 8001200:	2301      	movs	r3, #1
}
 8001202:	4618      	mov	r0, r3
 8001204:	3728      	adds	r7, #40	; 0x28
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	20000cf6 	.word	0x20000cf6
 8001210:	0800ec90 	.word	0x0800ec90
 8001214:	20000af0 	.word	0x20000af0
 8001218:	0800ec98 	.word	0x0800ec98
 800121c:	0800ec9c 	.word	0x0800ec9c
 8001220:	40010800 	.word	0x40010800

08001224 <Serial_log_string>:
{
	__SERIAL_LOG_UART = huart;
}

void Serial_log_string(char *string)
{
 8001224:	b590      	push	{r4, r7, lr}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(__SERIAL_LOG_UART, (uint8_t*)string, strlen(string), LOG_TIMEOUT);
 800122c:	4b08      	ldr	r3, [pc, #32]	; (8001250 <Serial_log_string+0x2c>)
 800122e:	681c      	ldr	r4, [r3, #0]
 8001230:	6878      	ldr	r0, [r7, #4]
 8001232:	f7fe ff95 	bl	8000160 <strlen>
 8001236:	4603      	mov	r3, r0
 8001238:	b29a      	uxth	r2, r3
 800123a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800123e:	6879      	ldr	r1, [r7, #4]
 8001240:	4620      	mov	r0, r4
 8001242:	f009 fecf 	bl	800afe4 <HAL_UART_Transmit>
}
 8001246:	bf00      	nop
 8001248:	370c      	adds	r7, #12
 800124a:	46bd      	mov	sp, r7
 800124c:	bd90      	pop	{r4, r7, pc}
 800124e:	bf00      	nop
 8001250:	20000cfc 	.word	0x20000cfc

08001254 <initServerMsg>:
#define DATABUFF_MAXLEN		512
uint8_t Pack_buff [PACKBUFF_MAXLEN];


void initServerMsg ()
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
//	myStation = Station;
//	mySIM.sms = mySMS;
//	mySIM = mySIM;
}
 8001258:	bf00      	nop
 800125a:	46bd      	mov	sp, r7
 800125c:	bc80      	pop	{r7}
 800125e:	4770      	bx	lr

08001260 <buffer2num>:

uint32_t buffer2num(uint8_t *buffer)
{
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
	return (buffer[0] << 24) | (buffer[1] << 16) | (buffer[2] << 8) | buffer[3];
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	061a      	lsls	r2, r3, #24
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	3301      	adds	r3, #1
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	041b      	lsls	r3, r3, #16
 8001276:	431a      	orrs	r2, r3
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	3302      	adds	r3, #2
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	021b      	lsls	r3, r3, #8
 8001280:	4313      	orrs	r3, r2
 8001282:	687a      	ldr	r2, [r7, #4]
 8001284:	3203      	adds	r2, #3
 8001286:	7812      	ldrb	r2, [r2, #0]
 8001288:	4313      	orrs	r3, r2
}
 800128a:	4618      	mov	r0, r3
 800128c:	370c      	adds	r7, #12
 800128e:	46bd      	mov	sp, r7
 8001290:	bc80      	pop	{r7}
 8001292:	4770      	bx	lr

08001294 <addCRCtoPack>:

uint8_t addCRCtoPack(uint8_t *dataBuff, uint8_t bufflen)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b084      	sub	sp, #16
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
 800129c:	460b      	mov	r3, r1
 800129e:	70fb      	strb	r3, [r7, #3]
	uint32_t crc;
//	MQTT_publish( (uint8_t*)TOPIC_PUB, dataBuff, bufflen);
	crc= crc32( (char*)dataBuff, bufflen);
 80012a0:	78fb      	ldrb	r3, [r7, #3]
 80012a2:	4619      	mov	r1, r3
 80012a4:	6878      	ldr	r0, [r7, #4]
 80012a6:	f004 fc03 	bl	8005ab0 <crc32>
 80012aa:	60f8      	str	r0, [r7, #12]

	uint8_t crc_buff[4];
	FourbytenumbertoBuff( crc, crc_buff);
 80012ac:	f107 0308 	add.w	r3, r7, #8
 80012b0:	4619      	mov	r1, r3
 80012b2:	68f8      	ldr	r0, [r7, #12]
 80012b4:	f004 f8f5 	bl	80054a2 <FourbytenumbertoBuff>

//	MQTT_publish( (uint8_t*)TOPIC_PUB, crc_buff, 4);

	memcpy(dataBuff+bufflen,crc_buff,4);
 80012b8:	78fb      	ldrb	r3, [r7, #3]
 80012ba:	687a      	ldr	r2, [r7, #4]
 80012bc:	4413      	add	r3, r2
 80012be:	68ba      	ldr	r2, [r7, #8]
 80012c0:	601a      	str	r2, [r3, #0]

	return 4;    // crc length
 80012c2:	2304      	movs	r3, #4
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	3710      	adds	r7, #16
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}

080012cc <addTimetobuff>:
uint8_t addTimetobuff(uint8_t *buff, uint16_t position)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b088      	sub	sp, #32
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	460b      	mov	r3, r1
 80012d6:	807b      	strh	r3, [r7, #2]
//	RTCtime.Month=11;
//	RTCtime.Date = 15;
//	RTCtime.Hour = 7;
//	RTCtime.Min = 56;
//	RTCtime.Sec = 35;
	if (DS3231_GetTime(&RTCtime))
 80012d8:	f107 0310 	add.w	r3, r7, #16
 80012dc:	4618      	mov	r0, r3
 80012de:	f002 fedf 	bl	80040a0 <DS3231_GetTime>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d014      	beq.n	8001312 <addTimetobuff+0x46>
	{
		time_t epochtime = RTC2epochtime(&RTCtime);
 80012e8:	f107 0310 	add.w	r3, r7, #16
 80012ec:	4618      	mov	r0, r3
 80012ee:	f002 feac 	bl	800404a <RTC2epochtime>
 80012f2:	e9c7 0106 	strd	r0, r1, [r7, #24]
		uint8_t time_buff[4];
		FourbytenumbertoBuff((uint32_t)epochtime,time_buff);
 80012f6:	69bb      	ldr	r3, [r7, #24]
 80012f8:	f107 020c 	add.w	r2, r7, #12
 80012fc:	4611      	mov	r1, r2
 80012fe:	4618      	mov	r0, r3
 8001300:	f004 f8cf 	bl	80054a2 <FourbytenumbertoBuff>
		memcpy(buff+position,time_buff,4);
 8001304:	887b      	ldrh	r3, [r7, #2]
 8001306:	687a      	ldr	r2, [r7, #4]
 8001308:	4413      	add	r3, r2
 800130a:	68fa      	ldr	r2, [r7, #12]
 800130c:	601a      	str	r2, [r3, #0]
		return 1;
 800130e:	2301      	movs	r3, #1
 8001310:	e000      	b.n	8001314 <addTimetobuff+0x48>
	}
	return 0;
 8001312:	2300      	movs	r3, #0
}
 8001314:	4618      	mov	r0, r3
 8001316:	3720      	adds	r7, #32
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}

0800131c <createPack>:

uint8_t createPack(PACK_t PackType, DATA_t DataType, CMD_t CMDType )
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af00      	add	r7, sp, #0
 8001322:	4603      	mov	r3, r0
 8001324:	71fb      	strb	r3, [r7, #7]
 8001326:	460b      	mov	r3, r1
 8001328:	71bb      	strb	r3, [r7, #6]
 800132a:	4613      	mov	r3, r2
 800132c:	717b      	strb	r3, [r7, #5]
	memset(Pack_buff, 0, PACKBUFF_MAXLEN);
 800132e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001332:	2100      	movs	r1, #0
 8001334:	4816      	ldr	r0, [pc, #88]	; (8001390 <createPack+0x74>)
 8001336:	f00a ffad 	bl	800c294 <memset>
	uint8_t pack_len = 0;
 800133a:	2300      	movs	r3, #0
 800133c:	73fb      	strb	r3, [r7, #15]

	Pack_buff[pack_len++] = myStation.stID;
 800133e:	7bfb      	ldrb	r3, [r7, #15]
 8001340:	1c5a      	adds	r2, r3, #1
 8001342:	73fa      	strb	r2, [r7, #15]
 8001344:	461a      	mov	r2, r3
 8001346:	4b13      	ldr	r3, [pc, #76]	; (8001394 <createPack+0x78>)
 8001348:	7859      	ldrb	r1, [r3, #1]
 800134a:	4b11      	ldr	r3, [pc, #68]	; (8001390 <createPack+0x74>)
 800134c:	5499      	strb	r1, [r3, r2]
	Pack_buff[pack_len++] = PackType;
 800134e:	7bfb      	ldrb	r3, [r7, #15]
 8001350:	1c5a      	adds	r2, r3, #1
 8001352:	73fa      	strb	r2, [r7, #15]
 8001354:	4619      	mov	r1, r3
 8001356:	4a0e      	ldr	r2, [pc, #56]	; (8001390 <createPack+0x74>)
 8001358:	79fb      	ldrb	r3, [r7, #7]
 800135a:	5453      	strb	r3, [r2, r1]

	if ( DataType != DATA_NONE )
 800135c:	79bb      	ldrb	r3, [r7, #6]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d007      	beq.n	8001372 <createPack+0x56>
	{
		Pack_buff[pack_len++] = DataType;
 8001362:	7bfb      	ldrb	r3, [r7, #15]
 8001364:	1c5a      	adds	r2, r3, #1
 8001366:	73fa      	strb	r2, [r7, #15]
 8001368:	4619      	mov	r1, r3
 800136a:	4a09      	ldr	r2, [pc, #36]	; (8001390 <createPack+0x74>)
 800136c:	79bb      	ldrb	r3, [r7, #6]
 800136e:	5453      	strb	r3, [r2, r1]
 8001370:	e009      	b.n	8001386 <createPack+0x6a>
	}
	else if ( CMDType != CMD_NONE )
 8001372:	797b      	ldrb	r3, [r7, #5]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d006      	beq.n	8001386 <createPack+0x6a>
	{
		Pack_buff[pack_len++] = CMDType;
 8001378:	7bfb      	ldrb	r3, [r7, #15]
 800137a:	1c5a      	adds	r2, r3, #1
 800137c:	73fa      	strb	r2, [r7, #15]
 800137e:	4619      	mov	r1, r3
 8001380:	4a03      	ldr	r2, [pc, #12]	; (8001390 <createPack+0x74>)
 8001382:	797b      	ldrb	r3, [r7, #5]
 8001384:	5453      	strb	r3, [r2, r1]
	}
	return pack_len;
 8001386:	7bfb      	ldrb	r3, [r7, #15]
}
 8001388:	4618      	mov	r0, r3
 800138a:	3710      	adds	r7, #16
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	20000d00 	.word	0x20000d00
 8001394:	20000474 	.word	0x20000474

08001398 <Serialize_SSnodedata>:

uint16_t Serialize_SSnodedata(uint8_t* Serial_buff, DATA_t dataType)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b084      	sub	sp, #16
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	460b      	mov	r3, r1
 80013a2:	70fb      	strb	r3, [r7, #3]

	uint16_t buff_len = 0;
 80013a4:	2300      	movs	r3, #0
 80013a6:	81fb      	strh	r3, [r7, #14]
	Node * current =myStation.ssNode_list->head->next;
 80013a8:	4b58      	ldr	r3, [pc, #352]	; (800150c <Serialize_SSnodedata+0x174>)
 80013aa:	68db      	ldr	r3, [r3, #12]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013b0:	60bb      	str	r3, [r7, #8]
	while (current != myStation.ssNode_list->tail)
 80013b2:	e09e      	b.n	80014f2 <Serialize_SSnodedata+0x15a>
	{
		switch ( dataType ) {
 80013b4:	78fb      	ldrb	r3, [r7, #3]
 80013b6:	3b01      	subs	r3, #1
 80013b8:	2b04      	cmp	r3, #4
 80013ba:	f200 8094 	bhi.w	80014e6 <Serialize_SSnodedata+0x14e>
 80013be:	a201      	add	r2, pc, #4	; (adr r2, 80013c4 <Serialize_SSnodedata+0x2c>)
 80013c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013c4:	08001411 	.word	0x08001411
 80013c8:	08001479 	.word	0x08001479
 80013cc:	080014e7 	.word	0x080014e7
 80013d0:	080013d9 	.word	0x080013d9
 80013d4:	080014ad 	.word	0x080014ad
		case DATA_REGISTER:
			Serial_buff[buff_len++] = current->SSnode.SSnode_ID;
 80013d8:	89fb      	ldrh	r3, [r7, #14]
 80013da:	1c5a      	adds	r2, r3, #1
 80013dc:	81fa      	strh	r2, [r7, #14]
 80013de:	461a      	mov	r2, r3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	4413      	add	r3, r2
 80013e4:	68ba      	ldr	r2, [r7, #8]
 80013e6:	7812      	ldrb	r2, [r2, #0]
 80013e8:	701a      	strb	r2, [r3, #0]
			Serial_buff[buff_len++]= current->SSnode.Battery;
 80013ea:	89fb      	ldrh	r3, [r7, #14]
 80013ec:	1c5a      	adds	r2, r3, #1
 80013ee:	81fa      	strh	r2, [r7, #14]
 80013f0:	461a      	mov	r2, r3
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	4413      	add	r3, r2
 80013f6:	68ba      	ldr	r2, [r7, #8]
 80013f8:	7852      	ldrb	r2, [r2, #1]
 80013fa:	701a      	strb	r2, [r3, #0]
			Serial_buff[buff_len++]= current->SSnode.V_type;
 80013fc:	89fb      	ldrh	r3, [r7, #14]
 80013fe:	1c5a      	adds	r2, r3, #1
 8001400:	81fa      	strh	r2, [r7, #14]
 8001402:	461a      	mov	r2, r3
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	4413      	add	r3, r2
 8001408:	68ba      	ldr	r2, [r7, #8]
 800140a:	7892      	ldrb	r2, [r2, #2]
 800140c:	701a      	strb	r2, [r3, #0]
			break;
 800140e:	e06d      	b.n	80014ec <Serialize_SSnodedata+0x154>
		case DATA_PERIOD:
			Serial_buff[buff_len++] = current->SSnode.SSnode_ID;
 8001410:	89fb      	ldrh	r3, [r7, #14]
 8001412:	1c5a      	adds	r2, r3, #1
 8001414:	81fa      	strh	r2, [r7, #14]
 8001416:	461a      	mov	r2, r3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	4413      	add	r3, r2
 800141c:	68ba      	ldr	r2, [r7, #8]
 800141e:	7812      	ldrb	r2, [r2, #0]
 8001420:	701a      	strb	r2, [r3, #0]
			Serial_buff[buff_len++] = current->SSnode.Battery;
 8001422:	89fb      	ldrh	r3, [r7, #14]
 8001424:	1c5a      	adds	r2, r3, #1
 8001426:	81fa      	strh	r2, [r7, #14]
 8001428:	461a      	mov	r2, r3
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4413      	add	r3, r2
 800142e:	68ba      	ldr	r2, [r7, #8]
 8001430:	7852      	ldrb	r2, [r2, #1]
 8001432:	701a      	strb	r2, [r3, #0]
			Serial_buff[buff_len++] = ( current->SSnode.V_value >> 8 ) & 0xFF;
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	889b      	ldrh	r3, [r3, #4]
 8001438:	b29b      	uxth	r3, r3
 800143a:	0a1b      	lsrs	r3, r3, #8
 800143c:	b29a      	uxth	r2, r3
 800143e:	89fb      	ldrh	r3, [r7, #14]
 8001440:	1c59      	adds	r1, r3, #1
 8001442:	81f9      	strh	r1, [r7, #14]
 8001444:	4619      	mov	r1, r3
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	440b      	add	r3, r1
 800144a:	b2d2      	uxtb	r2, r2
 800144c:	701a      	strb	r2, [r3, #0]
			Serial_buff[buff_len++] = current->SSnode.V_value & 0xFF;
 800144e:	68bb      	ldr	r3, [r7, #8]
 8001450:	889b      	ldrh	r3, [r3, #4]
 8001452:	b29a      	uxth	r2, r3
 8001454:	89fb      	ldrh	r3, [r7, #14]
 8001456:	1c59      	adds	r1, r3, #1
 8001458:	81f9      	strh	r1, [r7, #14]
 800145a:	4619      	mov	r1, r3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	440b      	add	r3, r1
 8001460:	b2d2      	uxtb	r2, r2
 8001462:	701a      	strb	r2, [r3, #0]
			Serial_buff[buff_len++] = current->SSnode.sensorMode;
 8001464:	89fb      	ldrh	r3, [r7, #14]
 8001466:	1c5a      	adds	r2, r3, #1
 8001468:	81fa      	strh	r2, [r7, #14]
 800146a:	461a      	mov	r2, r3
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	4413      	add	r3, r2
 8001470:	68ba      	ldr	r2, [r7, #8]
 8001472:	7a52      	ldrb	r2, [r2, #9]
 8001474:	701a      	strb	r2, [r3, #0]
			break;
 8001476:	e039      	b.n	80014ec <Serialize_SSnodedata+0x154>
		case DATA_NETWREADY:
			if (current->SSnode.sensorMode == SLEEP) 	{
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	7a5b      	ldrb	r3, [r3, #9]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d102      	bne.n	8001486 <Serialize_SSnodedata+0xee>
				current->SSnode.Sensor_state = SENSOR_DEACTIVE;
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	2202      	movs	r2, #2
 8001484:	719a      	strb	r2, [r3, #6]
			}
			Serial_buff[buff_len++] = current->SSnode.SSnode_ID;
 8001486:	89fb      	ldrh	r3, [r7, #14]
 8001488:	1c5a      	adds	r2, r3, #1
 800148a:	81fa      	strh	r2, [r7, #14]
 800148c:	461a      	mov	r2, r3
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4413      	add	r3, r2
 8001492:	68ba      	ldr	r2, [r7, #8]
 8001494:	7812      	ldrb	r2, [r2, #0]
 8001496:	701a      	strb	r2, [r3, #0]
			Serial_buff[buff_len++]= current->SSnode.Sensor_state;
 8001498:	89fb      	ldrh	r3, [r7, #14]
 800149a:	1c5a      	adds	r2, r3, #1
 800149c:	81fa      	strh	r2, [r7, #14]
 800149e:	461a      	mov	r2, r3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	4413      	add	r3, r2
 80014a4:	68ba      	ldr	r2, [r7, #8]
 80014a6:	7992      	ldrb	r2, [r2, #6]
 80014a8:	701a      	strb	r2, [r3, #0]
			break;
 80014aa:	e01f      	b.n	80014ec <Serialize_SSnodedata+0x154>
		case DATA_CALIB:
			if (current->SSnode.dataCalibAvailable)	{
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	79db      	ldrb	r3, [r3, #7]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d01a      	beq.n	80014ea <Serialize_SSnodedata+0x152>
				Serial_buff[buff_len++] = current->SSnode.SSnode_ID;
 80014b4:	89fb      	ldrh	r3, [r7, #14]
 80014b6:	1c5a      	adds	r2, r3, #1
 80014b8:	81fa      	strh	r2, [r7, #14]
 80014ba:	461a      	mov	r2, r3
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	4413      	add	r3, r2
 80014c0:	68ba      	ldr	r2, [r7, #8]
 80014c2:	7812      	ldrb	r2, [r2, #0]
 80014c4:	701a      	strb	r2, [r3, #0]
				memcpy(Serial_buff + buff_len, current->SSnode.dataCalibBuffer, 100);
 80014c6:	89fb      	ldrh	r3, [r7, #14]
 80014c8:	687a      	ldr	r2, [r7, #4]
 80014ca:	18d0      	adds	r0, r2, r3
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	330a      	adds	r3, #10
 80014d0:	2264      	movs	r2, #100	; 0x64
 80014d2:	4619      	mov	r1, r3
 80014d4:	f00a fed0 	bl	800c278 <memcpy>
				buff_len += 100;
 80014d8:	89fb      	ldrh	r3, [r7, #14]
 80014da:	3364      	adds	r3, #100	; 0x64
 80014dc:	81fb      	strh	r3, [r7, #14]
				current->SSnode.dataCalibAvailable = 0;
 80014de:	68bb      	ldr	r3, [r7, #8]
 80014e0:	2200      	movs	r2, #0
 80014e2:	71da      	strb	r2, [r3, #7]
//				current->SSnode.sentDatacalib = 1;
			}
			break;
 80014e4:	e001      	b.n	80014ea <Serialize_SSnodedata+0x152>
//		case DATA_AFTERCALIB:
//			break;
		default:
			break;
 80014e6:	bf00      	nop
 80014e8:	e000      	b.n	80014ec <Serialize_SSnodedata+0x154>
			break;
 80014ea:	bf00      	nop
		}
		current = current->next;
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014f0:	60bb      	str	r3, [r7, #8]
	while (current != myStation.ssNode_list->tail)
 80014f2:	4b06      	ldr	r3, [pc, #24]	; (800150c <Serialize_SSnodedata+0x174>)
 80014f4:	68db      	ldr	r3, [r3, #12]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	68ba      	ldr	r2, [r7, #8]
 80014fa:	429a      	cmp	r2, r3
 80014fc:	f47f af5a 	bne.w	80013b4 <Serialize_SSnodedata+0x1c>
	}
//	Serial_buff[buff_len] = '\0';
	return buff_len;
 8001500:	89fb      	ldrh	r3, [r7, #14]
}
 8001502:	4618      	mov	r0, r3
 8001504:	3710      	adds	r7, #16
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	20000474 	.word	0x20000474

08001510 <Serialize_Stationdata>:

uint8_t Serialize_Stationdata( uint8_t *Buffer, DATA_t dataType)
{
 8001510:	b590      	push	{r4, r7, lr}
 8001512:	b085      	sub	sp, #20
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	460b      	mov	r3, r1
 800151a:	70fb      	strb	r3, [r7, #3]
	uint8_t buff_len = 0;
 800151c:	2300      	movs	r3, #0
 800151e:	73fb      	strb	r3, [r7, #15]
	switch (dataType) {
 8001520:	78fb      	ldrb	r3, [r7, #3]
 8001522:	3b01      	subs	r3, #1
 8001524:	2b08      	cmp	r3, #8
 8001526:	f200 80ef 	bhi.w	8001708 <Serialize_Stationdata+0x1f8>
 800152a:	a201      	add	r2, pc, #4	; (adr r2, 8001530 <Serialize_Stationdata+0x20>)
 800152c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001530:	080015f7 	.word	0x080015f7
 8001534:	080015d3 	.word	0x080015d3
 8001538:	08001709 	.word	0x08001709
 800153c:	08001555 	.word	0x08001555
 8001540:	08001675 	.word	0x08001675
 8001544:	08001709 	.word	0x08001709
 8001548:	08001709 	.word	0x08001709
 800154c:	080016e1 	.word	0x080016e1
 8001550:	080016f3 	.word	0x080016f3
		case DATA_REGISTER:
			Buffer[buff_len++] = myStation.stID;
 8001554:	7bfb      	ldrb	r3, [r7, #15]
 8001556:	1c5a      	adds	r2, r3, #1
 8001558:	73fa      	strb	r2, [r7, #15]
 800155a:	461a      	mov	r2, r3
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	4413      	add	r3, r2
 8001560:	4a6c      	ldr	r2, [pc, #432]	; (8001714 <Serialize_Stationdata+0x204>)
 8001562:	7852      	ldrb	r2, [r2, #1]
 8001564:	701a      	strb	r2, [r3, #0]
			Buffer[buff_len++] = (uint8_t)( ( myStation.stCurrent >> 8 ) & 0xFF);
 8001566:	4b6b      	ldr	r3, [pc, #428]	; (8001714 <Serialize_Stationdata+0x204>)
 8001568:	885b      	ldrh	r3, [r3, #2]
 800156a:	0a1b      	lsrs	r3, r3, #8
 800156c:	b29a      	uxth	r2, r3
 800156e:	7bfb      	ldrb	r3, [r7, #15]
 8001570:	1c59      	adds	r1, r3, #1
 8001572:	73f9      	strb	r1, [r7, #15]
 8001574:	4619      	mov	r1, r3
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	440b      	add	r3, r1
 800157a:	b2d2      	uxtb	r2, r2
 800157c:	701a      	strb	r2, [r3, #0]
			Buffer[buff_len++] = (uint8_t)( myStation.stCurrent & 0xFF );
 800157e:	4b65      	ldr	r3, [pc, #404]	; (8001714 <Serialize_Stationdata+0x204>)
 8001580:	885a      	ldrh	r2, [r3, #2]
 8001582:	7bfb      	ldrb	r3, [r7, #15]
 8001584:	1c59      	adds	r1, r3, #1
 8001586:	73f9      	strb	r1, [r7, #15]
 8001588:	4619      	mov	r1, r3
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	440b      	add	r3, r1
 800158e:	b2d2      	uxtb	r2, r2
 8001590:	701a      	strb	r2, [r3, #0]
			Buffer[buff_len++] = (uint8_t) (myStation.MBAstate);
 8001592:	7bfb      	ldrb	r3, [r7, #15]
 8001594:	1c5a      	adds	r2, r3, #1
 8001596:	73fa      	strb	r2, [r7, #15]
 8001598:	461a      	mov	r2, r3
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4413      	add	r3, r2
 800159e:	4a5d      	ldr	r2, [pc, #372]	; (8001714 <Serialize_Stationdata+0x204>)
 80015a0:	7992      	ldrb	r2, [r2, #6]
 80015a2:	701a      	strb	r2, [r3, #0]
			Buffer[buff_len++] = (uint8_t)( ( myStation.stVoltage >> 8 ) & 0xFF );
 80015a4:	4b5b      	ldr	r3, [pc, #364]	; (8001714 <Serialize_Stationdata+0x204>)
 80015a6:	889b      	ldrh	r3, [r3, #4]
 80015a8:	0a1b      	lsrs	r3, r3, #8
 80015aa:	b29a      	uxth	r2, r3
 80015ac:	7bfb      	ldrb	r3, [r7, #15]
 80015ae:	1c59      	adds	r1, r3, #1
 80015b0:	73f9      	strb	r1, [r7, #15]
 80015b2:	4619      	mov	r1, r3
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	440b      	add	r3, r1
 80015b8:	b2d2      	uxtb	r2, r2
 80015ba:	701a      	strb	r2, [r3, #0]
			Buffer[buff_len++] = (uint8_t)( myStation.stVoltage & 0xFF );
 80015bc:	4b55      	ldr	r3, [pc, #340]	; (8001714 <Serialize_Stationdata+0x204>)
 80015be:	889a      	ldrh	r2, [r3, #4]
 80015c0:	7bfb      	ldrb	r3, [r7, #15]
 80015c2:	1c59      	adds	r1, r3, #1
 80015c4:	73f9      	strb	r1, [r7, #15]
 80015c6:	4619      	mov	r1, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	440b      	add	r3, r1
 80015cc:	b2d2      	uxtb	r2, r2
 80015ce:	701a      	strb	r2, [r3, #0]
			break;
 80015d0:	e09b      	b.n	800170a <Serialize_Stationdata+0x1fa>
		case DATA_NETWREADY:
			Buffer[buff_len++] = myStation.stID;
 80015d2:	7bfb      	ldrb	r3, [r7, #15]
 80015d4:	1c5a      	adds	r2, r3, #1
 80015d6:	73fa      	strb	r2, [r7, #15]
 80015d8:	461a      	mov	r2, r3
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4413      	add	r3, r2
 80015de:	4a4d      	ldr	r2, [pc, #308]	; (8001714 <Serialize_Stationdata+0x204>)
 80015e0:	7852      	ldrb	r2, [r2, #1]
 80015e2:	701a      	strb	r2, [r3, #0]
			Buffer[buff_len++] = (uint8_t) ACTIVE;
 80015e4:	7bfb      	ldrb	r3, [r7, #15]
 80015e6:	1c5a      	adds	r2, r3, #1
 80015e8:	73fa      	strb	r2, [r7, #15]
 80015ea:	461a      	mov	r2, r3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	4413      	add	r3, r2
 80015f0:	2201      	movs	r2, #1
 80015f2:	701a      	strb	r2, [r3, #0]
			break;
 80015f4:	e089      	b.n	800170a <Serialize_Stationdata+0x1fa>
		case DATA_PERIOD:
			Buffer[buff_len++] = myStation.stID;
 80015f6:	7bfb      	ldrb	r3, [r7, #15]
 80015f8:	1c5a      	adds	r2, r3, #1
 80015fa:	73fa      	strb	r2, [r7, #15]
 80015fc:	461a      	mov	r2, r3
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4413      	add	r3, r2
 8001602:	4a44      	ldr	r2, [pc, #272]	; (8001714 <Serialize_Stationdata+0x204>)
 8001604:	7852      	ldrb	r2, [r2, #1]
 8001606:	701a      	strb	r2, [r3, #0]
			Buffer[buff_len++] = (uint8_t)( ( myStation.stCurrent >> 8 ) & 0xFF);
 8001608:	4b42      	ldr	r3, [pc, #264]	; (8001714 <Serialize_Stationdata+0x204>)
 800160a:	885b      	ldrh	r3, [r3, #2]
 800160c:	0a1b      	lsrs	r3, r3, #8
 800160e:	b29a      	uxth	r2, r3
 8001610:	7bfb      	ldrb	r3, [r7, #15]
 8001612:	1c59      	adds	r1, r3, #1
 8001614:	73f9      	strb	r1, [r7, #15]
 8001616:	4619      	mov	r1, r3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	440b      	add	r3, r1
 800161c:	b2d2      	uxtb	r2, r2
 800161e:	701a      	strb	r2, [r3, #0]
			Buffer[buff_len++] = (uint8_t)( myStation.stCurrent & 0xFF );
 8001620:	4b3c      	ldr	r3, [pc, #240]	; (8001714 <Serialize_Stationdata+0x204>)
 8001622:	885a      	ldrh	r2, [r3, #2]
 8001624:	7bfb      	ldrb	r3, [r7, #15]
 8001626:	1c59      	adds	r1, r3, #1
 8001628:	73f9      	strb	r1, [r7, #15]
 800162a:	4619      	mov	r1, r3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	440b      	add	r3, r1
 8001630:	b2d2      	uxtb	r2, r2
 8001632:	701a      	strb	r2, [r3, #0]
			Buffer[buff_len++] = (uint8_t)(myStation.MBAstate);
 8001634:	7bfb      	ldrb	r3, [r7, #15]
 8001636:	1c5a      	adds	r2, r3, #1
 8001638:	73fa      	strb	r2, [r7, #15]
 800163a:	461a      	mov	r2, r3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	4413      	add	r3, r2
 8001640:	4a34      	ldr	r2, [pc, #208]	; (8001714 <Serialize_Stationdata+0x204>)
 8001642:	7992      	ldrb	r2, [r2, #6]
 8001644:	701a      	strb	r2, [r3, #0]
			Buffer[buff_len++] = (uint8_t)( ( myStation.stVoltage >> 8 ) & 0xFF );
 8001646:	4b33      	ldr	r3, [pc, #204]	; (8001714 <Serialize_Stationdata+0x204>)
 8001648:	889b      	ldrh	r3, [r3, #4]
 800164a:	0a1b      	lsrs	r3, r3, #8
 800164c:	b29a      	uxth	r2, r3
 800164e:	7bfb      	ldrb	r3, [r7, #15]
 8001650:	1c59      	adds	r1, r3, #1
 8001652:	73f9      	strb	r1, [r7, #15]
 8001654:	4619      	mov	r1, r3
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	440b      	add	r3, r1
 800165a:	b2d2      	uxtb	r2, r2
 800165c:	701a      	strb	r2, [r3, #0]
			Buffer[buff_len++] = (uint8_t)( myStation.stVoltage & 0xFF );
 800165e:	4b2d      	ldr	r3, [pc, #180]	; (8001714 <Serialize_Stationdata+0x204>)
 8001660:	889a      	ldrh	r2, [r3, #4]
 8001662:	7bfb      	ldrb	r3, [r7, #15]
 8001664:	1c59      	adds	r1, r3, #1
 8001666:	73f9      	strb	r1, [r7, #15]
 8001668:	4619      	mov	r1, r3
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	440b      	add	r3, r1
 800166e:	b2d2      	uxtb	r2, r2
 8001670:	701a      	strb	r2, [r3, #0]
			break;
 8001672:	e04a      	b.n	800170a <Serialize_Stationdata+0x1fa>
		case DATA_CALIB:
			Buffer[buff_len++] = myStation.stID;
 8001674:	7bfb      	ldrb	r3, [r7, #15]
 8001676:	1c5a      	adds	r2, r3, #1
 8001678:	73fa      	strb	r2, [r7, #15]
 800167a:	461a      	mov	r2, r3
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	4413      	add	r3, r2
 8001680:	4a24      	ldr	r2, [pc, #144]	; (8001714 <Serialize_Stationdata+0x204>)
 8001682:	7852      	ldrb	r2, [r2, #1]
 8001684:	701a      	strb	r2, [r3, #0]
			Buffer[buff_len++] = (uint8_t)( ( myStation.stCurrent >> 8 ) & 0xFF);
 8001686:	4b23      	ldr	r3, [pc, #140]	; (8001714 <Serialize_Stationdata+0x204>)
 8001688:	885b      	ldrh	r3, [r3, #2]
 800168a:	0a1b      	lsrs	r3, r3, #8
 800168c:	b29a      	uxth	r2, r3
 800168e:	7bfb      	ldrb	r3, [r7, #15]
 8001690:	1c59      	adds	r1, r3, #1
 8001692:	73f9      	strb	r1, [r7, #15]
 8001694:	4619      	mov	r1, r3
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	440b      	add	r3, r1
 800169a:	b2d2      	uxtb	r2, r2
 800169c:	701a      	strb	r2, [r3, #0]
			Buffer[buff_len++] = (uint8_t)( myStation.stCurrent & 0xFF );
 800169e:	4b1d      	ldr	r3, [pc, #116]	; (8001714 <Serialize_Stationdata+0x204>)
 80016a0:	885a      	ldrh	r2, [r3, #2]
 80016a2:	7bfb      	ldrb	r3, [r7, #15]
 80016a4:	1c59      	adds	r1, r3, #1
 80016a6:	73f9      	strb	r1, [r7, #15]
 80016a8:	4619      	mov	r1, r3
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	440b      	add	r3, r1
 80016ae:	b2d2      	uxtb	r2, r2
 80016b0:	701a      	strb	r2, [r3, #0]
			Buffer[buff_len++] = (uint8_t)( ( myStation.stVoltage >> 8 ) & 0xFF );
 80016b2:	4b18      	ldr	r3, [pc, #96]	; (8001714 <Serialize_Stationdata+0x204>)
 80016b4:	889b      	ldrh	r3, [r3, #4]
 80016b6:	0a1b      	lsrs	r3, r3, #8
 80016b8:	b29a      	uxth	r2, r3
 80016ba:	7bfb      	ldrb	r3, [r7, #15]
 80016bc:	1c59      	adds	r1, r3, #1
 80016be:	73f9      	strb	r1, [r7, #15]
 80016c0:	4619      	mov	r1, r3
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	440b      	add	r3, r1
 80016c6:	b2d2      	uxtb	r2, r2
 80016c8:	701a      	strb	r2, [r3, #0]
			Buffer[buff_len++] = (uint8_t)( myStation.stVoltage & 0xFF );
 80016ca:	4b12      	ldr	r3, [pc, #72]	; (8001714 <Serialize_Stationdata+0x204>)
 80016cc:	889a      	ldrh	r2, [r3, #4]
 80016ce:	7bfb      	ldrb	r3, [r7, #15]
 80016d0:	1c59      	adds	r1, r3, #1
 80016d2:	73f9      	strb	r1, [r7, #15]
 80016d4:	4619      	mov	r1, r3
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	440b      	add	r3, r1
 80016da:	b2d2      	uxtb	r2, r2
 80016dc:	701a      	strb	r2, [r3, #0]
			break;
 80016de:	e014      	b.n	800170a <Serialize_Stationdata+0x1fa>
//		case DATA_AFTERCALIB:
//			Buffer[buff_len++] = (uint8_t)( ( myStation.stCurrent >> 8 ) & 0xFF);
//			Buffer[buff_len++] = (uint8_t)( myStation.stCurrent & 0xFF );
//			break;
		case DATA_MBA_STATE:
			Buffer[buff_len++] = (uint8_t) (myStation.MBAstate);
 80016e0:	7bfb      	ldrb	r3, [r7, #15]
 80016e2:	1c5a      	adds	r2, r3, #1
 80016e4:	73fa      	strb	r2, [r7, #15]
 80016e6:	461a      	mov	r2, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	4413      	add	r3, r2
 80016ec:	4a09      	ldr	r2, [pc, #36]	; (8001714 <Serialize_Stationdata+0x204>)
 80016ee:	7992      	ldrb	r2, [r2, #6]
 80016f0:	701a      	strb	r2, [r3, #0]
		case DATA_STEP_REACH_LIMIT:
			Buffer[buff_len++] = (uint8_t)getLimit();
 80016f2:	7bfb      	ldrb	r3, [r7, #15]
 80016f4:	1c5a      	adds	r2, r3, #1
 80016f6:	73fa      	strb	r2, [r7, #15]
 80016f8:	461a      	mov	r2, r3
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	189c      	adds	r4, r3, r2
 80016fe:	f002 f897 	bl	8003830 <getLimit>
 8001702:	4603      	mov	r3, r0
 8001704:	7023      	strb	r3, [r4, #0]
			break;
 8001706:	e000      	b.n	800170a <Serialize_Stationdata+0x1fa>
		default:
			break;
 8001708:	bf00      	nop
	}

	return buff_len;
 800170a:	7bfb      	ldrb	r3, [r7, #15]
}
 800170c:	4618      	mov	r0, r3
 800170e:	3714      	adds	r7, #20
 8001710:	46bd      	mov	sp, r7
 8001712:	bd90      	pop	{r4, r7, pc}
 8001714:	20000474 	.word	0x20000474

08001718 <Serialize_Data>:
uint8_t Serialize_Data(uint8_t *databuff, DATA_t dataType)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	460b      	mov	r3, r1
 8001722:	70fb      	strb	r3, [r7, #3]
	uint16_t data_len = 0 ;
 8001724:	2300      	movs	r3, #0
 8001726:	81fb      	strh	r3, [r7, #14]
	data_len = Serialize_Stationdata(databuff, dataType );
 8001728:	78fb      	ldrb	r3, [r7, #3]
 800172a:	4619      	mov	r1, r3
 800172c:	6878      	ldr	r0, [r7, #4]
 800172e:	f7ff feef 	bl	8001510 <Serialize_Stationdata>
 8001732:	4603      	mov	r3, r0
 8001734:	81fb      	strh	r3, [r7, #14]
	data_len += Serialize_SSnodedata(databuff + data_len, dataType);
 8001736:	89fb      	ldrh	r3, [r7, #14]
 8001738:	687a      	ldr	r2, [r7, #4]
 800173a:	4413      	add	r3, r2
 800173c:	78fa      	ldrb	r2, [r7, #3]
 800173e:	4611      	mov	r1, r2
 8001740:	4618      	mov	r0, r3
 8001742:	f7ff fe29 	bl	8001398 <Serialize_SSnodedata>
 8001746:	4603      	mov	r3, r0
 8001748:	461a      	mov	r2, r3
 800174a:	89fb      	ldrh	r3, [r7, #14]
 800174c:	4413      	add	r3, r2
 800174e:	81fb      	strh	r3, [r7, #14]
	if ( !addTimetobuff( databuff, data_len ) )		return 0;
 8001750:	89fb      	ldrh	r3, [r7, #14]
 8001752:	4619      	mov	r1, r3
 8001754:	6878      	ldr	r0, [r7, #4]
 8001756:	f7ff fdb9 	bl	80012cc <addTimetobuff>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d101      	bne.n	8001764 <Serialize_Data+0x4c>
 8001760:	2300      	movs	r3, #0
 8001762:	e004      	b.n	800176e <Serialize_Data+0x56>
	data_len += 4;      // 4 bytes of time + buffer length
 8001764:	89fb      	ldrh	r3, [r7, #14]
 8001766:	3304      	adds	r3, #4
 8001768:	81fb      	strh	r3, [r7, #14]
	return data_len;
 800176a:	89fb      	ldrh	r3, [r7, #14]
 800176c:	b2db      	uxtb	r3, r3
}
 800176e:	4618      	mov	r0, r3
 8001770:	3710      	adds	r7, #16
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}

08001776 <addDatatoPack>:

uint8_t addDatatoPack(uint8_t *Pack, uint16_t Pack_len, uint8_t *Databuff, uint16_t dataLen)
{
 8001776:	b580      	push	{r7, lr}
 8001778:	b084      	sub	sp, #16
 800177a:	af00      	add	r7, sp, #0
 800177c:	60f8      	str	r0, [r7, #12]
 800177e:	607a      	str	r2, [r7, #4]
 8001780:	461a      	mov	r2, r3
 8001782:	460b      	mov	r3, r1
 8001784:	817b      	strh	r3, [r7, #10]
 8001786:	4613      	mov	r3, r2
 8001788:	813b      	strh	r3, [r7, #8]
	memcpy(Pack+ Pack_len, Databuff, dataLen);
 800178a:	897b      	ldrh	r3, [r7, #10]
 800178c:	68fa      	ldr	r2, [r7, #12]
 800178e:	4413      	add	r3, r2
 8001790:	893a      	ldrh	r2, [r7, #8]
 8001792:	6879      	ldr	r1, [r7, #4]
 8001794:	4618      	mov	r0, r3
 8001796:	f00a fd6f 	bl	800c278 <memcpy>
	return dataLen ;
 800179a:	893b      	ldrh	r3, [r7, #8]
 800179c:	b2db      	uxtb	r3, r3
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3710      	adds	r7, #16
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
	...

080017a8 <Serialize_addtionaldata>:

uint8_t Serialize_addtionaldata( CMD_t CMDtype, uint8_t *Getbuffer, uint8_t *databuffer, uint16_t datalen, MBA_state_t MBAstate, Stepmotor_dir_t Stepm_DIR,
							Stepmotor_change_mode_t Stepm_changeMode, uint16_t Stepm_changeValue )
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b086      	sub	sp, #24
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	60b9      	str	r1, [r7, #8]
 80017b0:	607a      	str	r2, [r7, #4]
 80017b2:	461a      	mov	r2, r3
 80017b4:	4603      	mov	r3, r0
 80017b6:	73fb      	strb	r3, [r7, #15]
 80017b8:	4613      	mov	r3, r2
 80017ba:	81bb      	strh	r3, [r7, #12]
	uint8_t buff_len = 0;
 80017bc:	2300      	movs	r3, #0
 80017be:	75fb      	strb	r3, [r7, #23]
	switch ( CMDtype ) {
 80017c0:	7bfb      	ldrb	r3, [r7, #15]
 80017c2:	3b03      	subs	r3, #3
 80017c4:	2b08      	cmp	r3, #8
 80017c6:	f200 8098 	bhi.w	80018fa <Serialize_addtionaldata+0x152>
 80017ca:	a201      	add	r2, pc, #4	; (adr r2, 80017d0 <Serialize_addtionaldata+0x28>)
 80017cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017d0:	080017f5 	.word	0x080017f5
 80017d4:	08001811 	.word	0x08001811
 80017d8:	080018fb 	.word	0x080018fb
 80017dc:	080018fb 	.word	0x080018fb
 80017e0:	0800182d 	.word	0x0800182d
 80017e4:	0800185b 	.word	0x0800185b
 80017e8:	080018fb 	.word	0x080018fb
 80017ec:	080018c3 	.word	0x080018c3
 80017f0:	080018df 	.word	0x080018df
		case CMD_SMS_CALIB:
			// Time delay + Phone number
			memcpy(Getbuffer + buff_len, databuffer, datalen);
 80017f4:	7dfb      	ldrb	r3, [r7, #23]
 80017f6:	68ba      	ldr	r2, [r7, #8]
 80017f8:	4413      	add	r3, r2
 80017fa:	89ba      	ldrh	r2, [r7, #12]
 80017fc:	6879      	ldr	r1, [r7, #4]
 80017fe:	4618      	mov	r0, r3
 8001800:	f00a fd3a 	bl	800c278 <memcpy>
			buff_len += datalen;
 8001804:	89bb      	ldrh	r3, [r7, #12]
 8001806:	b2da      	uxtb	r2, r3
 8001808:	7dfb      	ldrb	r3, [r7, #23]
 800180a:	4413      	add	r3, r2
 800180c:	75fb      	strb	r3, [r7, #23]
			break;
 800180e:	e075      	b.n	80018fc <Serialize_addtionaldata+0x154>
		case CMD_SMS_GETSTATUS:
			// Phone number	(11 byte)
			memcpy(Getbuffer + buff_len, databuffer, datalen);
 8001810:	7dfb      	ldrb	r3, [r7, #23]
 8001812:	68ba      	ldr	r2, [r7, #8]
 8001814:	4413      	add	r3, r2
 8001816:	89ba      	ldrh	r2, [r7, #12]
 8001818:	6879      	ldr	r1, [r7, #4]
 800181a:	4618      	mov	r0, r3
 800181c:	f00a fd2c 	bl	800c278 <memcpy>
			buff_len += datalen;
 8001820:	89bb      	ldrh	r3, [r7, #12]
 8001822:	b2da      	uxtb	r2, r3
 8001824:	7dfb      	ldrb	r3, [r7, #23]
 8001826:	4413      	add	r3, r2
 8001828:	75fb      	strb	r3, [r7, #23]
			break;
 800182a:	e067      	b.n	80018fc <Serialize_addtionaldata+0x154>
		case CMD_CTRL_MBA:
			// First byte: ON/OFF
			Getbuffer[buff_len++] = MBAstate;
 800182c:	7dfb      	ldrb	r3, [r7, #23]
 800182e:	1c5a      	adds	r2, r3, #1
 8001830:	75fa      	strb	r2, [r7, #23]
 8001832:	461a      	mov	r2, r3
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	4413      	add	r3, r2
 8001838:	f897 2020 	ldrb.w	r2, [r7, #32]
 800183c:	701a      	strb	r2, [r3, #0]
			// Station ID list + time delay + phone number
			memcpy(Getbuffer + buff_len, databuffer, datalen);
 800183e:	7dfb      	ldrb	r3, [r7, #23]
 8001840:	68ba      	ldr	r2, [r7, #8]
 8001842:	4413      	add	r3, r2
 8001844:	89ba      	ldrh	r2, [r7, #12]
 8001846:	6879      	ldr	r1, [r7, #4]
 8001848:	4618      	mov	r0, r3
 800184a:	f00a fd15 	bl	800c278 <memcpy>
			buff_len += datalen;
 800184e:	89bb      	ldrh	r3, [r7, #12]
 8001850:	b2da      	uxtb	r2, r3
 8001852:	7dfb      	ldrb	r3, [r7, #23]
 8001854:	4413      	add	r3, r2
 8001856:	75fb      	strb	r3, [r7, #23]
			break;
 8001858:	e050      	b.n	80018fc <Serialize_addtionaldata+0x154>
		case CMD_CTRL_STEP_MOTOR:
			// First byte: Increase/Decrease (1 byte)
			Getbuffer[buff_len++] = Stepm_DIR ;
 800185a:	7dfb      	ldrb	r3, [r7, #23]
 800185c:	1c5a      	adds	r2, r3, #1
 800185e:	75fa      	strb	r2, [r7, #23]
 8001860:	461a      	mov	r2, r3
 8001862:	68bb      	ldr	r3, [r7, #8]
 8001864:	4413      	add	r3, r2
 8001866:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800186a:	701a      	strb	r2, [r3, #0]
			// Second byte: Change Percentage/Step (1 byte)
			Getbuffer[buff_len++] = Stepm_changeMode;
 800186c:	7dfb      	ldrb	r3, [r7, #23]
 800186e:	1c5a      	adds	r2, r3, #1
 8001870:	75fa      	strb	r2, [r7, #23]
 8001872:	461a      	mov	r2, r3
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	4413      	add	r3, r2
 8001878:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800187c:	701a      	strb	r2, [r3, #0]
			// Third + fourth byte : Value
//			Getbuffer[buff_len++] = Stepm_changeValue;
			Getbuffer[buff_len++] = (uint8_t)( ( Stepm_changeValue >> 8 ) & 0xFF);
 800187e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001880:	0a1b      	lsrs	r3, r3, #8
 8001882:	b29a      	uxth	r2, r3
 8001884:	7dfb      	ldrb	r3, [r7, #23]
 8001886:	1c59      	adds	r1, r3, #1
 8001888:	75f9      	strb	r1, [r7, #23]
 800188a:	4619      	mov	r1, r3
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	440b      	add	r3, r1
 8001890:	b2d2      	uxtb	r2, r2
 8001892:	701a      	strb	r2, [r3, #0]
			Getbuffer[buff_len++] = (uint8_t)( Stepm_changeValue & 0xFF );
 8001894:	7dfb      	ldrb	r3, [r7, #23]
 8001896:	1c5a      	adds	r2, r3, #1
 8001898:	75fa      	strb	r2, [r7, #23]
 800189a:	461a      	mov	r2, r3
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	4413      	add	r3, r2
 80018a0:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80018a2:	b2d2      	uxtb	r2, r2
 80018a4:	701a      	strb	r2, [r3, #0]
			// Station ID list + time delay + phone number
			memcpy(Getbuffer + buff_len, databuffer, datalen);
 80018a6:	7dfb      	ldrb	r3, [r7, #23]
 80018a8:	68ba      	ldr	r2, [r7, #8]
 80018aa:	4413      	add	r3, r2
 80018ac:	89ba      	ldrh	r2, [r7, #12]
 80018ae:	6879      	ldr	r1, [r7, #4]
 80018b0:	4618      	mov	r0, r3
 80018b2:	f00a fce1 	bl	800c278 <memcpy>
			buff_len += datalen;
 80018b6:	89bb      	ldrh	r3, [r7, #12]
 80018b8:	b2da      	uxtb	r2, r3
 80018ba:	7dfb      	ldrb	r3, [r7, #23]
 80018bc:	4413      	add	r3, r2
 80018be:	75fb      	strb	r3, [r7, #23]
			break;
 80018c0:	e01c      	b.n	80018fc <Serialize_addtionaldata+0x154>
		case CMD_GET_LATEST_DATA_SENSOR:
			// Sensor ID list + phone number
			memcpy(Getbuffer + buff_len, databuffer, datalen);
 80018c2:	7dfb      	ldrb	r3, [r7, #23]
 80018c4:	68ba      	ldr	r2, [r7, #8]
 80018c6:	4413      	add	r3, r2
 80018c8:	89ba      	ldrh	r2, [r7, #12]
 80018ca:	6879      	ldr	r1, [r7, #4]
 80018cc:	4618      	mov	r0, r3
 80018ce:	f00a fcd3 	bl	800c278 <memcpy>
			buff_len += datalen;
 80018d2:	89bb      	ldrh	r3, [r7, #12]
 80018d4:	b2da      	uxtb	r2, r3
 80018d6:	7dfb      	ldrb	r3, [r7, #23]
 80018d8:	4413      	add	r3, r2
 80018da:	75fb      	strb	r3, [r7, #23]
			break;
 80018dc:	e00e      	b.n	80018fc <Serialize_addtionaldata+0x154>
		case CMD_GET_LASTEST_DATA_STATION:
			// Station ID list + phone number
			memcpy(Getbuffer + buff_len, databuffer, datalen);
 80018de:	7dfb      	ldrb	r3, [r7, #23]
 80018e0:	68ba      	ldr	r2, [r7, #8]
 80018e2:	4413      	add	r3, r2
 80018e4:	89ba      	ldrh	r2, [r7, #12]
 80018e6:	6879      	ldr	r1, [r7, #4]
 80018e8:	4618      	mov	r0, r3
 80018ea:	f00a fcc5 	bl	800c278 <memcpy>
			buff_len += datalen;
 80018ee:	89bb      	ldrh	r3, [r7, #12]
 80018f0:	b2da      	uxtb	r2, r3
 80018f2:	7dfb      	ldrb	r3, [r7, #23]
 80018f4:	4413      	add	r3, r2
 80018f6:	75fb      	strb	r3, [r7, #23]
			break;
 80018f8:	e000      	b.n	80018fc <Serialize_addtionaldata+0x154>
		default:
			break;
 80018fa:	bf00      	nop
	}
	return buff_len;
 80018fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3718      	adds	r7, #24
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop

08001908 <Register2Server>:

uint8_t Register2Server()
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b0a2      	sub	sp, #136	; 0x88
 800190c:	af00      	add	r7, sp, #0
	uint8_t tmp_databuff[128] ;
	uint16_t pack_len = 0;
 800190e:	2300      	movs	r3, #0
 8001910:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
	// Create package
	pack_len = createPack(PACKT_REGISTER, DATA_REGISTER, CMD_NONE );
 8001914:	2200      	movs	r2, #0
 8001916:	2104      	movs	r1, #4
 8001918:	20f5      	movs	r0, #245	; 0xf5
 800191a:	f7ff fcff 	bl	800131c <createPack>
 800191e:	4603      	mov	r3, r0
 8001920:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
	if ( !pack_len ) {
 8001924:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001928:	2b00      	cmp	r3, #0
 800192a:	d101      	bne.n	8001930 <Register2Server+0x28>
//		free(tmp_databuff);
		return 0;
 800192c:	2300      	movs	r3, #0
 800192e:	e038      	b.n	80019a2 <Register2Server+0x9a>
		}
	 //Convert Register data to temp buffer
	uint8_t datalen= Serialize_Data(tmp_databuff, DATA_REGISTER );
 8001930:	1d3b      	adds	r3, r7, #4
 8001932:	2104      	movs	r1, #4
 8001934:	4618      	mov	r0, r3
 8001936:	f7ff feef 	bl	8001718 <Serialize_Data>
 800193a:	4603      	mov	r3, r0
 800193c:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
	if ( !datalen )	{
 8001940:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8001944:	2b00      	cmp	r3, #0
 8001946:	d101      	bne.n	800194c <Register2Server+0x44>
//		free(tmp_databuff);
		return 0;
 8001948:	2300      	movs	r3, #0
 800194a:	e02a      	b.n	80019a2 <Register2Server+0x9a>
	}
	// Add Register data  temp buffer to package
	pack_len += addDatatoPack( Pack_buff, pack_len, tmp_databuff, datalen );
 800194c:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8001950:	b29b      	uxth	r3, r3
 8001952:	1d3a      	adds	r2, r7, #4
 8001954:	f8b7 1086 	ldrh.w	r1, [r7, #134]	; 0x86
 8001958:	4814      	ldr	r0, [pc, #80]	; (80019ac <Register2Server+0xa4>)
 800195a:	f7ff ff0c 	bl	8001776 <addDatatoPack>
 800195e:	4603      	mov	r3, r0
 8001960:	b29a      	uxth	r2, r3
 8001962:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001966:	4413      	add	r3, r2
 8001968:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
	// Add CRC to package
	pack_len += addCRCtoPack( Pack_buff, pack_len );
 800196c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001970:	b2db      	uxtb	r3, r3
 8001972:	4619      	mov	r1, r3
 8001974:	480d      	ldr	r0, [pc, #52]	; (80019ac <Register2Server+0xa4>)
 8001976:	f7ff fc8d 	bl	8001294 <addCRCtoPack>
 800197a:	4603      	mov	r3, r0
 800197c:	b29a      	uxth	r2, r3
 800197e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001982:	4413      	add	r3, r2
 8001984:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
	// Publish
	if ( MQTT_publish((uint8_t*)TOPIC_PUB, Pack_buff, pack_len) )	{
 8001988:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800198c:	461a      	mov	r2, r3
 800198e:	4907      	ldr	r1, [pc, #28]	; (80019ac <Register2Server+0xa4>)
 8001990:	4807      	ldr	r0, [pc, #28]	; (80019b0 <Register2Server+0xa8>)
 8001992:	f003 fbbd 	bl	8005110 <MQTT_publish>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d001      	beq.n	80019a0 <Register2Server+0x98>
//		Serial_log_string(" Sent \"Register\" message to server\r\n");
//		free(tmp_databuff);
		return 1;
 800199c:	2301      	movs	r3, #1
 800199e:	e000      	b.n	80019a2 <Register2Server+0x9a>
	}
//	free(tmp_databuff);
	return 0;
 80019a0:	2300      	movs	r3, #0
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3788      	adds	r7, #136	; 0x88
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	20000d00 	.word	0x20000d00
 80019b0:	0800eca0 	.word	0x0800eca0

080019b4 <sendCMDtoServer>:

uint8_t sendCMDtoServer(CMD_t CMDtype, uint8_t *SMSdatabuffer, uint16_t datalen, MBA_state_t MBAstate,
		Stepmotor_dir_t Stepm_DIR, Stepmotor_change_mode_t Stepm_changeMode,
		uint16_t Stepm_changeValue)
{
 80019b4:	b590      	push	{r4, r7, lr}
 80019b6:	b0c9      	sub	sp, #292	; 0x124
 80019b8:	af04      	add	r7, sp, #16
 80019ba:	4604      	mov	r4, r0
 80019bc:	f507 7088 	add.w	r0, r7, #272	; 0x110
 80019c0:	f5a0 7088 	sub.w	r0, r0, #272	; 0x110
 80019c4:	6001      	str	r1, [r0, #0]
 80019c6:	4610      	mov	r0, r2
 80019c8:	4619      	mov	r1, r3
 80019ca:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80019ce:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80019d2:	4622      	mov	r2, r4
 80019d4:	701a      	strb	r2, [r3, #0]
 80019d6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80019da:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80019de:	4602      	mov	r2, r0
 80019e0:	801a      	strh	r2, [r3, #0]
 80019e2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80019e6:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 80019ea:	460a      	mov	r2, r1
 80019ec:	701a      	strb	r2, [r3, #0]
	uint8_t  pack_len = 0;
 80019ee:	2300      	movs	r3, #0
 80019f0:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
	pack_len = createPack(PACKT_CMD, DATA_NONE, CMDtype );
 80019f4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80019f8:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	461a      	mov	r2, r3
 8001a00:	2100      	movs	r1, #0
 8001a02:	20f2      	movs	r0, #242	; 0xf2
 8001a04:	f7ff fc8a 	bl	800131c <createPack>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
	if ( !pack_len )	return 0; // Create package
 8001a0e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d101      	bne.n	8001a1a <sendCMDtoServer+0x66>
 8001a16:	2300      	movs	r3, #0
 8001a18:	e052      	b.n	8001ac0 <sendCMDtoServer+0x10c>

	uint8_t tmpAbuff [256];
	uint8_t Abuff_len = Serialize_addtionaldata(CMDtype, tmpAbuff, SMSdatabuffer, datalen, MBAstate, Stepm_DIR, Stepm_changeMode, Stepm_changeValue);
 8001a1a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001a1e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001a22:	881c      	ldrh	r4, [r3, #0]
 8001a24:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001a28:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 8001a2c:	f107 010c 	add.w	r1, r7, #12
 8001a30:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001a34:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001a38:	7818      	ldrb	r0, [r3, #0]
 8001a3a:	f8b7 3128 	ldrh.w	r3, [r7, #296]	; 0x128
 8001a3e:	9303      	str	r3, [sp, #12]
 8001a40:	f897 3124 	ldrb.w	r3, [r7, #292]	; 0x124
 8001a44:	9302      	str	r3, [sp, #8]
 8001a46:	f897 3120 	ldrb.w	r3, [r7, #288]	; 0x120
 8001a4a:	9301      	str	r3, [sp, #4]
 8001a4c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001a50:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	9300      	str	r3, [sp, #0]
 8001a58:	4623      	mov	r3, r4
 8001a5a:	6812      	ldr	r2, [r2, #0]
 8001a5c:	f7ff fea4 	bl	80017a8 <Serialize_addtionaldata>
 8001a60:	4603      	mov	r3, r0
 8001a62:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
	pack_len += addDatatoPack(Pack_buff, pack_len, tmpAbuff, Abuff_len);    // Add additional data to package
 8001a66:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001a6a:	b299      	uxth	r1, r3
 8001a6c:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 8001a70:	b29b      	uxth	r3, r3
 8001a72:	f107 020c 	add.w	r2, r7, #12
 8001a76:	4815      	ldr	r0, [pc, #84]	; (8001acc <sendCMDtoServer+0x118>)
 8001a78:	f7ff fe7d 	bl	8001776 <addDatatoPack>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	461a      	mov	r2, r3
 8001a80:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001a84:	4413      	add	r3, r2
 8001a86:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f

	pack_len += addCRCtoPack( Pack_buff, pack_len );		// Add CRC to package
 8001a8a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001a8e:	4619      	mov	r1, r3
 8001a90:	480e      	ldr	r0, [pc, #56]	; (8001acc <sendCMDtoServer+0x118>)
 8001a92:	f7ff fbff 	bl	8001294 <addCRCtoPack>
 8001a96:	4603      	mov	r3, r0
 8001a98:	461a      	mov	r2, r3
 8001a9a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001a9e:	4413      	add	r3, r2
 8001aa0:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f

	if ( !MQTT_publish( (uint8_t*)TOPIC_PUB, Pack_buff , pack_len ) )	return 0;
 8001aa4:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001aa8:	b29b      	uxth	r3, r3
 8001aaa:	461a      	mov	r2, r3
 8001aac:	4907      	ldr	r1, [pc, #28]	; (8001acc <sendCMDtoServer+0x118>)
 8001aae:	4808      	ldr	r0, [pc, #32]	; (8001ad0 <sendCMDtoServer+0x11c>)
 8001ab0:	f003 fb2e 	bl	8005110 <MQTT_publish>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d101      	bne.n	8001abe <sendCMDtoServer+0x10a>
 8001aba:	2300      	movs	r3, #0
 8001abc:	e000      	b.n	8001ac0 <sendCMDtoServer+0x10c>
	return 1;
 8001abe:	2301      	movs	r3, #1
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd90      	pop	{r4, r7, pc}
 8001aca:	bf00      	nop
 8001acc:	20000d00 	.word	0x20000d00
 8001ad0:	0800eca0 	.word	0x0800eca0

08001ad4 <sendData2Server>:

uint8_t sendData2Server( DATA_t dataType)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	4602      	mov	r2, r0
 8001ade:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001ae2:	f2a3 2309 	subw	r3, r3, #521	; 0x209
 8001ae6:	701a      	strb	r2, [r3, #0]
	uint8_t databuff[DATABUFF_MAXLEN];
	uint16_t data_len = 0;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
	memset(databuff, 0, DATABUFF_MAXLEN);
 8001aee:	f107 030c 	add.w	r3, r7, #12
 8001af2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001af6:	2100      	movs	r1, #0
 8001af8:	4618      	mov	r0, r3
 8001afa:	f00a fbcb 	bl	800c294 <memset>
	memset(Pack_buff, 0, PACKBUFF_MAXLEN);
 8001afe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b02:	2100      	movs	r1, #0
 8001b04:	4826      	ldr	r0, [pc, #152]	; (8001ba0 <sendData2Server+0xcc>)
 8001b06:	f00a fbc5 	bl	800c294 <memset>
	// Creat package
	uint16_t pack_len = createPack(PACKT_DATA, dataType, CMD_NONE );
 8001b0a:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001b0e:	f2a3 2309 	subw	r3, r3, #521	; 0x209
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	2200      	movs	r2, #0
 8001b16:	4619      	mov	r1, r3
 8001b18:	20f1      	movs	r0, #241	; 0xf1
 8001b1a:	f7ff fbff 	bl	800131c <createPack>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	f8a7 320c 	strh.w	r3, [r7, #524]	; 0x20c
	// Add data to package
	data_len = Serialize_Data(databuff, dataType );
 8001b24:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001b28:	f2a3 2309 	subw	r3, r3, #521	; 0x209
 8001b2c:	781a      	ldrb	r2, [r3, #0]
 8001b2e:	f107 030c 	add.w	r3, r7, #12
 8001b32:	4611      	mov	r1, r2
 8001b34:	4618      	mov	r0, r3
 8001b36:	f7ff fdef 	bl	8001718 <Serialize_Data>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
	pack_len += addDatatoPack(Pack_buff, pack_len, databuff, data_len);
 8001b40:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8001b44:	f107 020c 	add.w	r2, r7, #12
 8001b48:	f8b7 120c 	ldrh.w	r1, [r7, #524]	; 0x20c
 8001b4c:	4814      	ldr	r0, [pc, #80]	; (8001ba0 <sendData2Server+0xcc>)
 8001b4e:	f7ff fe12 	bl	8001776 <addDatatoPack>
 8001b52:	4603      	mov	r3, r0
 8001b54:	b29a      	uxth	r2, r3
 8001b56:	f8b7 320c 	ldrh.w	r3, [r7, #524]	; 0x20c
 8001b5a:	4413      	add	r3, r2
 8001b5c:	f8a7 320c 	strh.w	r3, [r7, #524]	; 0x20c
	// Add CRC to package
	pack_len += addCRCtoPack(Pack_buff, pack_len);
 8001b60:	f8b7 320c 	ldrh.w	r3, [r7, #524]	; 0x20c
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	4619      	mov	r1, r3
 8001b68:	480d      	ldr	r0, [pc, #52]	; (8001ba0 <sendData2Server+0xcc>)
 8001b6a:	f7ff fb93 	bl	8001294 <addCRCtoPack>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	b29a      	uxth	r2, r3
 8001b72:	f8b7 320c 	ldrh.w	r3, [r7, #524]	; 0x20c
 8001b76:	4413      	add	r3, r2
 8001b78:	f8a7 320c 	strh.w	r3, [r7, #524]	; 0x20c
	// Publish
	if ( !MQTT_publish( (uint8_t*)TOPIC_PUB, Pack_buff, pack_len) ) return 0;
 8001b7c:	f8b7 320c 	ldrh.w	r3, [r7, #524]	; 0x20c
 8001b80:	461a      	mov	r2, r3
 8001b82:	4907      	ldr	r1, [pc, #28]	; (8001ba0 <sendData2Server+0xcc>)
 8001b84:	4807      	ldr	r0, [pc, #28]	; (8001ba4 <sendData2Server+0xd0>)
 8001b86:	f003 fac3 	bl	8005110 <MQTT_publish>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d101      	bne.n	8001b94 <sendData2Server+0xc0>
 8001b90:	2300      	movs	r3, #0
 8001b92:	e000      	b.n	8001b96 <sendData2Server+0xc2>
	return 1;
 8001b94:	2301      	movs	r3, #1
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	f507 7704 	add.w	r7, r7, #528	; 0x210
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	20000d00 	.word	0x20000d00
 8001ba4:	0800eca0 	.word	0x0800eca0

08001ba8 <checkCRC>:

	if ( !MQTT_publish( (uint8_t*)TOPIC_PUB, Pack_buff, packlen) ) return 0;
	return 1;
}
uint8_t checkCRC(uint8_t *buffer, uint16_t bufferlen)
{
 8001ba8:	b590      	push	{r4, r7, lr}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	460b      	mov	r3, r1
 8001bb2:	807b      	strh	r3, [r7, #2]
	if ( buffer2num(buffer + bufferlen - 4) != crc32( (char*)buffer, bufferlen - 4) ) return 0;
 8001bb4:	887b      	ldrh	r3, [r7, #2]
 8001bb6:	3b04      	subs	r3, #4
 8001bb8:	687a      	ldr	r2, [r7, #4]
 8001bba:	4413      	add	r3, r2
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f7ff fb4f 	bl	8001260 <buffer2num>
 8001bc2:	4604      	mov	r4, r0
 8001bc4:	887b      	ldrh	r3, [r7, #2]
 8001bc6:	3b04      	subs	r3, #4
 8001bc8:	4619      	mov	r1, r3
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f003 ff70 	bl	8005ab0 <crc32>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	429c      	cmp	r4, r3
 8001bd4:	d001      	beq.n	8001bda <checkCRC+0x32>
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	e000      	b.n	8001bdc <checkCRC+0x34>
	return 1;
 8001bda:	2301      	movs	r3, #1
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	370c      	adds	r7, #12
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd90      	pop	{r4, r7, pc}

08001be4 <checkNodeID>:

uint8_t checkNodeID(uint8_t *Msg, uint8_t nodeID)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b083      	sub	sp, #12
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	460b      	mov	r3, r1
 8001bee:	70fb      	strb	r3, [r7, #3]
	if ( Msg[NODEID_POS] != nodeID && Msg[NODEID_POS] != BROADCAST_ID )		return 0;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	78fa      	ldrb	r2, [r7, #3]
 8001bf6:	429a      	cmp	r2, r3
 8001bf8:	d005      	beq.n	8001c06 <checkNodeID+0x22>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	2bff      	cmp	r3, #255	; 0xff
 8001c00:	d001      	beq.n	8001c06 <checkNodeID+0x22>
 8001c02:	2300      	movs	r3, #0
 8001c04:	e000      	b.n	8001c08 <checkNodeID+0x24>
	return 1;
 8001c06:	2301      	movs	r3, #1
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	370c      	adds	r7, #12
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bc80      	pop	{r7}
 8001c10:	4770      	bx	lr

08001c12 <checkPacktype>:

PACK_t checkPacktype(uint8_t *Msg)
{
 8001c12:	b480      	push	{r7}
 8001c14:	b083      	sub	sp, #12
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	6078      	str	r0, [r7, #4]
	return Msg[PACKT_POS];
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	3301      	adds	r3, #1
 8001c1e:	781b      	ldrb	r3, [r3, #0]
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	370c      	adds	r7, #12
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bc80      	pop	{r7}
 8001c28:	4770      	bx	lr

08001c2a <checkDatatype>:

DATA_t checkDatatype(uint8_t *Msg)
{
 8001c2a:	b480      	push	{r7}
 8001c2c:	b083      	sub	sp, #12
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	6078      	str	r0, [r7, #4]
	return Msg[DATAT_POS];
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	3302      	adds	r3, #2
 8001c36:	781b      	ldrb	r3, [r3, #0]
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	370c      	adds	r7, #12
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bc80      	pop	{r7}
 8001c40:	4770      	bx	lr

08001c42 <checkDataREStype>:
DATA_t checkDataREStype(uint8_t *Msg)
{
 8001c42:	b480      	push	{r7}
 8001c44:	b083      	sub	sp, #12
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
	return Msg[DATAREST_POS];
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	3303      	adds	r3, #3
 8001c4e:	781b      	ldrb	r3, [r3, #0]
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	370c      	adds	r7, #12
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bc80      	pop	{r7}
 8001c58:	4770      	bx	lr

08001c5a <checkCMDtype>:
CMD_t checkCmdREStype( uint8_t *Msg)
{
	return Msg[CMDREST_POS];
}
CMD_t checkCMDtype (uint8_t *Msg)
{
 8001c5a:	b480      	push	{r7}
 8001c5c:	b083      	sub	sp, #12
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	6078      	str	r0, [r7, #4]
	return Msg[CMD_POS];
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	3302      	adds	r3, #2
 8001c66:	781b      	ldrb	r3, [r3, #0]
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	370c      	adds	r7, #12
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bc80      	pop	{r7}
 8001c70:	4770      	bx	lr
	...

08001c74 <getDataStatus>:


void getDataStatus(uint8_t *Msg, uint16_t Msglen)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b08a      	sub	sp, #40	; 0x28
 8001c78:	af06      	add	r7, sp, #24
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	460b      	mov	r3, r1
 8001c7e:	807b      	strh	r3, [r7, #2]
	uint8_t numbofActiveStation;
	uint8_t numbofActiveSensor;
	uint8_t numbofFailStation;
	uint8_t numbofFailSensor;
	uint8_t datapos = DATA_POS;
 8001c80:	2303      	movs	r3, #3
 8001c82:	73fb      	strb	r3, [r7, #15]
	numbofActiveStation = Msg[datapos++];
 8001c84:	7bfb      	ldrb	r3, [r7, #15]
 8001c86:	1c5a      	adds	r2, r3, #1
 8001c88:	73fa      	strb	r2, [r7, #15]
 8001c8a:	461a      	mov	r2, r3
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	4413      	add	r3, r2
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	73bb      	strb	r3, [r7, #14]
	numbofFailStation = Msg[datapos++];
 8001c94:	7bfb      	ldrb	r3, [r7, #15]
 8001c96:	1c5a      	adds	r2, r3, #1
 8001c98:	73fa      	strb	r2, [r7, #15]
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	4413      	add	r3, r2
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	737b      	strb	r3, [r7, #13]
	numbofActiveSensor = Msg[datapos++];
 8001ca4:	7bfb      	ldrb	r3, [r7, #15]
 8001ca6:	1c5a      	adds	r2, r3, #1
 8001ca8:	73fa      	strb	r2, [r7, #15]
 8001caa:	461a      	mov	r2, r3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	4413      	add	r3, r2
 8001cb0:	781b      	ldrb	r3, [r3, #0]
 8001cb2:	733b      	strb	r3, [r7, #12]
	numbofFailSensor = Msg[datapos++];
 8001cb4:	7bfb      	ldrb	r3, [r7, #15]
 8001cb6:	1c5a      	adds	r2, r3, #1
 8001cb8:	73fa      	strb	r2, [r7, #15]
 8001cba:	461a      	mov	r2, r3
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	4413      	add	r3, r2
 8001cc0:	781b      	ldrb	r3, [r3, #0]
 8001cc2:	72fb      	strb	r3, [r7, #11]
	memset(mySIM.sms.GetStatus.data, 0, SMS_DATA_MAXLEN);
 8001cc4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001cc8:	2100      	movs	r1, #0
 8001cca:	4810      	ldr	r0, [pc, #64]	; (8001d0c <getDataStatus+0x98>)
 8001ccc:	f00a fae2 	bl	800c294 <memset>
	uint16_t len = sprintf((char*)mySIM.sms.GetStatus.data,"%s: %d,%s: %d,%s: %d,%s: %d.",
 8001cd0:	7bb8      	ldrb	r0, [r7, #14]
 8001cd2:	7b7b      	ldrb	r3, [r7, #13]
 8001cd4:	7b3a      	ldrb	r2, [r7, #12]
 8001cd6:	7af9      	ldrb	r1, [r7, #11]
 8001cd8:	9105      	str	r1, [sp, #20]
 8001cda:	490d      	ldr	r1, [pc, #52]	; (8001d10 <getDataStatus+0x9c>)
 8001cdc:	9104      	str	r1, [sp, #16]
 8001cde:	9203      	str	r2, [sp, #12]
 8001ce0:	4a0c      	ldr	r2, [pc, #48]	; (8001d14 <getDataStatus+0xa0>)
 8001ce2:	9202      	str	r2, [sp, #8]
 8001ce4:	9301      	str	r3, [sp, #4]
 8001ce6:	4b0c      	ldr	r3, [pc, #48]	; (8001d18 <getDataStatus+0xa4>)
 8001ce8:	9300      	str	r3, [sp, #0]
 8001cea:	4603      	mov	r3, r0
 8001cec:	4a0b      	ldr	r2, [pc, #44]	; (8001d1c <getDataStatus+0xa8>)
 8001cee:	490c      	ldr	r1, [pc, #48]	; (8001d20 <getDataStatus+0xac>)
 8001cf0:	4806      	ldr	r0, [pc, #24]	; (8001d0c <getDataStatus+0x98>)
 8001cf2:	f00a fe35 	bl	800c960 <siprintf>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	813b      	strh	r3, [r7, #8]
			USER_MSG_HEADER_NUMBOF_ACT_STATION, numbofActiveStation,
			USER_MSG_HEADER_NUMBOF_FAIL_STATION, numbofFailStation,
			USER_MSG_HEADER_NUMBOF_ACT_SENSOR, numbofActiveSensor,
			USER_MSG_HEADER_NUMBOF_FAIL_SENSOR, numbofFailSensor);
	mySIM.sms.GetStatus.datalength = len;
 8001cfa:	4a0a      	ldr	r2, [pc, #40]	; (8001d24 <getDataStatus+0xb0>)
 8001cfc:	893b      	ldrh	r3, [r7, #8]
 8001cfe:	f8a2 36b4 	strh.w	r3, [r2, #1716]	; 0x6b4
}
 8001d02:	bf00      	nop
 8001d04:	3710      	adds	r7, #16
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	20001e1e 	.word	0x20001e1e
 8001d10:	0800ecfc 	.word	0x0800ecfc
 8001d14:	0800ed18 	.word	0x0800ed18
 8001d18:	0800ed3c 	.word	0x0800ed3c
 8001d1c:	0800ecb4 	.word	0x0800ecb4
 8001d20:	0800ecdc 	.word	0x0800ecdc
 8001d24:	20001768 	.word	0x20001768

08001d28 <getDatalatest>:

ID_t getDatalatest(uint8_t *Msg, uint16_t Msg_len)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	460b      	mov	r3, r1
 8001d32:	807b      	strh	r3, [r7, #2]
	uint8_t datapos = DATA_POS;
 8001d34:	2303      	movs	r3, #3
 8001d36:	73fb      	strb	r3, [r7, #15]
	uint16_t crcpos = Msg_len - 4;
 8001d38:	887b      	ldrh	r3, [r7, #2]
 8001d3a:	3b04      	subs	r3, #4
 8001d3c:	81bb      	strh	r3, [r7, #12]
	uint8_t len ;
	uint16_t tmpvalue;

	// get ID type ( Station or Sensor)
	ID_t IDtype = Msg[datapos++];
 8001d3e:	7bfb      	ldrb	r3, [r7, #15]
 8001d40:	1c5a      	adds	r2, r3, #1
 8001d42:	73fa      	strb	r2, [r7, #15]
 8001d44:	461a      	mov	r2, r3
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4413      	add	r3, r2
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	72fb      	strb	r3, [r7, #11]

	switch (IDtype){
 8001d4e:	7afb      	ldrb	r3, [r7, #11]
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d002      	beq.n	8001d5a <getDatalatest+0x32>
 8001d54:	2b02      	cmp	r3, #2
 8001d56:	d04a      	beq.n	8001dee <getDatalatest+0xc6>
		mySIM.sms.GetStation.datalength += len;
		datapos += 2;
		}
		break;
	default:
		break;
 8001d58:	e0cd      	b.n	8001ef6 <getDatalatest+0x1ce>
		mySIM.sms.GetStation.datalength = 0;
 8001d5a:	4b69      	ldr	r3, [pc, #420]	; (8001f00 <getDatalatest+0x1d8>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	f8a3 28d8 	strh.w	r2, [r3, #2264]	; 0x8d8
		while (datapos < crcpos)
 8001d62:	e03e      	b.n	8001de2 <getDatalatest+0xba>
			len = sprintf((char*)(mySIM.sms.GetStation.data + mySIM.sms.GetStation.datalength), "I%d:", Msg[datapos]);
 8001d64:	4b66      	ldr	r3, [pc, #408]	; (8001f00 <getDatalatest+0x1d8>)
 8001d66:	f8b3 38d8 	ldrh.w	r3, [r3, #2264]	; 0x8d8
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	4b65      	ldr	r3, [pc, #404]	; (8001f04 <getDatalatest+0x1dc>)
 8001d6e:	18d0      	adds	r0, r2, r3
 8001d70:	7bfb      	ldrb	r3, [r7, #15]
 8001d72:	687a      	ldr	r2, [r7, #4]
 8001d74:	4413      	add	r3, r2
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	461a      	mov	r2, r3
 8001d7a:	4963      	ldr	r1, [pc, #396]	; (8001f08 <getDatalatest+0x1e0>)
 8001d7c:	f00a fdf0 	bl	800c960 <siprintf>
 8001d80:	4603      	mov	r3, r0
 8001d82:	72bb      	strb	r3, [r7, #10]
			mySIM.sms.GetStation.datalength += len;
 8001d84:	4b5e      	ldr	r3, [pc, #376]	; (8001f00 <getDatalatest+0x1d8>)
 8001d86:	f8b3 28d8 	ldrh.w	r2, [r3, #2264]	; 0x8d8
 8001d8a:	7abb      	ldrb	r3, [r7, #10]
 8001d8c:	b29b      	uxth	r3, r3
 8001d8e:	4413      	add	r3, r2
 8001d90:	b29a      	uxth	r2, r3
 8001d92:	4b5b      	ldr	r3, [pc, #364]	; (8001f00 <getDatalatest+0x1d8>)
 8001d94:	f8a3 28d8 	strh.w	r2, [r3, #2264]	; 0x8d8
			datapos++;
 8001d98:	7bfb      	ldrb	r3, [r7, #15]
 8001d9a:	3301      	adds	r3, #1
 8001d9c:	73fb      	strb	r3, [r7, #15]
			tmpvalue = buff2twobyte(Msg+ datapos);
 8001d9e:	7bfb      	ldrb	r3, [r7, #15]
 8001da0:	687a      	ldr	r2, [r7, #4]
 8001da2:	4413      	add	r3, r2
 8001da4:	4618      	mov	r0, r3
 8001da6:	f003 fb65 	bl	8005474 <buff2twobyte>
 8001daa:	4603      	mov	r3, r0
 8001dac:	813b      	strh	r3, [r7, #8]
			len = sprintf((char*)(mySIM.sms.GetStation.data + mySIM.sms.GetStation.datalength), "%d;", tmpvalue);
 8001dae:	4b54      	ldr	r3, [pc, #336]	; (8001f00 <getDatalatest+0x1d8>)
 8001db0:	f8b3 38d8 	ldrh.w	r3, [r3, #2264]	; 0x8d8
 8001db4:	461a      	mov	r2, r3
 8001db6:	4b53      	ldr	r3, [pc, #332]	; (8001f04 <getDatalatest+0x1dc>)
 8001db8:	4413      	add	r3, r2
 8001dba:	893a      	ldrh	r2, [r7, #8]
 8001dbc:	4953      	ldr	r1, [pc, #332]	; (8001f0c <getDatalatest+0x1e4>)
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f00a fdce 	bl	800c960 <siprintf>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	72bb      	strb	r3, [r7, #10]
			mySIM.sms.GetStation.datalength += len;
 8001dc8:	4b4d      	ldr	r3, [pc, #308]	; (8001f00 <getDatalatest+0x1d8>)
 8001dca:	f8b3 28d8 	ldrh.w	r2, [r3, #2264]	; 0x8d8
 8001dce:	7abb      	ldrb	r3, [r7, #10]
 8001dd0:	b29b      	uxth	r3, r3
 8001dd2:	4413      	add	r3, r2
 8001dd4:	b29a      	uxth	r2, r3
 8001dd6:	4b4a      	ldr	r3, [pc, #296]	; (8001f00 <getDatalatest+0x1d8>)
 8001dd8:	f8a3 28d8 	strh.w	r2, [r3, #2264]	; 0x8d8
			datapos += 2;
 8001ddc:	7bfb      	ldrb	r3, [r7, #15]
 8001dde:	3302      	adds	r3, #2
 8001de0:	73fb      	strb	r3, [r7, #15]
		while (datapos < crcpos)
 8001de2:	7bfb      	ldrb	r3, [r7, #15]
 8001de4:	b29b      	uxth	r3, r3
 8001de6:	89ba      	ldrh	r2, [r7, #12]
 8001de8:	429a      	cmp	r2, r3
 8001dea:	d8bb      	bhi.n	8001d64 <getDatalatest+0x3c>
		break;
 8001dec:	e083      	b.n	8001ef6 <getDatalatest+0x1ce>
		mySIM.sms.GetSensor.datalength = 0;
 8001dee:	4b44      	ldr	r3, [pc, #272]	; (8001f00 <getDatalatest+0x1d8>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	f8a3 27c6 	strh.w	r2, [r3, #1990]	; 0x7c6
		while (datapos < crcpos){
 8001df6:	e078      	b.n	8001eea <getDatalatest+0x1c2>
		len = sprintf((char*)(mySIM.sms.GetSensor.data + mySIM.sms.GetSensor.datalength), "V%d", Msg[datapos]);
 8001df8:	4b41      	ldr	r3, [pc, #260]	; (8001f00 <getDatalatest+0x1d8>)
 8001dfa:	f8b3 37c6 	ldrh.w	r3, [r3, #1990]	; 0x7c6
 8001dfe:	461a      	mov	r2, r3
 8001e00:	4b43      	ldr	r3, [pc, #268]	; (8001f10 <getDatalatest+0x1e8>)
 8001e02:	18d0      	adds	r0, r2, r3
 8001e04:	7bfb      	ldrb	r3, [r7, #15]
 8001e06:	687a      	ldr	r2, [r7, #4]
 8001e08:	4413      	add	r3, r2
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	4941      	ldr	r1, [pc, #260]	; (8001f14 <getDatalatest+0x1ec>)
 8001e10:	f00a fda6 	bl	800c960 <siprintf>
 8001e14:	4603      	mov	r3, r0
 8001e16:	72bb      	strb	r3, [r7, #10]
		mySIM.sms.GetSensor.datalength += len;
 8001e18:	4b39      	ldr	r3, [pc, #228]	; (8001f00 <getDatalatest+0x1d8>)
 8001e1a:	f8b3 27c6 	ldrh.w	r2, [r3, #1990]	; 0x7c6
 8001e1e:	7abb      	ldrb	r3, [r7, #10]
 8001e20:	b29b      	uxth	r3, r3
 8001e22:	4413      	add	r3, r2
 8001e24:	b29a      	uxth	r2, r3
 8001e26:	4b36      	ldr	r3, [pc, #216]	; (8001f00 <getDatalatest+0x1d8>)
 8001e28:	f8a3 27c6 	strh.w	r2, [r3, #1990]	; 0x7c6
		datapos++;
 8001e2c:	7bfb      	ldrb	r3, [r7, #15]
 8001e2e:	3301      	adds	r3, #1
 8001e30:	73fb      	strb	r3, [r7, #15]
		switch (Msg[datapos++])	{
 8001e32:	7bfb      	ldrb	r3, [r7, #15]
 8001e34:	1c5a      	adds	r2, r3, #1
 8001e36:	73fa      	strb	r2, [r7, #15]
 8001e38:	461a      	mov	r2, r3
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4413      	add	r3, r2
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d002      	beq.n	8001e4a <getDatalatest+0x122>
 8001e44:	2b02      	cmp	r3, #2
 8001e46:	d017      	beq.n	8001e78 <getDatalatest+0x150>
			break;
 8001e48:	e02d      	b.n	8001ea6 <getDatalatest+0x17e>
			len = sprintf((char*)(mySIM.sms.GetSensor.data + mySIM.sms.GetSensor.datalength), "p:");
 8001e4a:	4b2d      	ldr	r3, [pc, #180]	; (8001f00 <getDatalatest+0x1d8>)
 8001e4c:	f8b3 37c6 	ldrh.w	r3, [r3, #1990]	; 0x7c6
 8001e50:	461a      	mov	r2, r3
 8001e52:	4b2f      	ldr	r3, [pc, #188]	; (8001f10 <getDatalatest+0x1e8>)
 8001e54:	4413      	add	r3, r2
 8001e56:	4930      	ldr	r1, [pc, #192]	; (8001f18 <getDatalatest+0x1f0>)
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f00a fd81 	bl	800c960 <siprintf>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	72bb      	strb	r3, [r7, #10]
			mySIM.sms.GetSensor.datalength += len;
 8001e62:	4b27      	ldr	r3, [pc, #156]	; (8001f00 <getDatalatest+0x1d8>)
 8001e64:	f8b3 27c6 	ldrh.w	r2, [r3, #1990]	; 0x7c6
 8001e68:	7abb      	ldrb	r3, [r7, #10]
 8001e6a:	b29b      	uxth	r3, r3
 8001e6c:	4413      	add	r3, r2
 8001e6e:	b29a      	uxth	r2, r3
 8001e70:	4b23      	ldr	r3, [pc, #140]	; (8001f00 <getDatalatest+0x1d8>)
 8001e72:	f8a3 27c6 	strh.w	r2, [r3, #1990]	; 0x7c6
			break;
 8001e76:	e016      	b.n	8001ea6 <getDatalatest+0x17e>
			len = sprintf((char*)(mySIM.sms.GetSensor.data + mySIM.sms.GetSensor.datalength), "na:");
 8001e78:	4b21      	ldr	r3, [pc, #132]	; (8001f00 <getDatalatest+0x1d8>)
 8001e7a:	f8b3 37c6 	ldrh.w	r3, [r3, #1990]	; 0x7c6
 8001e7e:	461a      	mov	r2, r3
 8001e80:	4b23      	ldr	r3, [pc, #140]	; (8001f10 <getDatalatest+0x1e8>)
 8001e82:	4413      	add	r3, r2
 8001e84:	4925      	ldr	r1, [pc, #148]	; (8001f1c <getDatalatest+0x1f4>)
 8001e86:	4618      	mov	r0, r3
 8001e88:	f00a fd6a 	bl	800c960 <siprintf>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	72bb      	strb	r3, [r7, #10]
			mySIM.sms.GetSensor.datalength += len;
 8001e90:	4b1b      	ldr	r3, [pc, #108]	; (8001f00 <getDatalatest+0x1d8>)
 8001e92:	f8b3 27c6 	ldrh.w	r2, [r3, #1990]	; 0x7c6
 8001e96:	7abb      	ldrb	r3, [r7, #10]
 8001e98:	b29b      	uxth	r3, r3
 8001e9a:	4413      	add	r3, r2
 8001e9c:	b29a      	uxth	r2, r3
 8001e9e:	4b18      	ldr	r3, [pc, #96]	; (8001f00 <getDatalatest+0x1d8>)
 8001ea0:	f8a3 27c6 	strh.w	r2, [r3, #1990]	; 0x7c6
			break;
 8001ea4:	bf00      	nop
		tmpvalue = buff2twobyte(Msg+ datapos);
 8001ea6:	7bfb      	ldrb	r3, [r7, #15]
 8001ea8:	687a      	ldr	r2, [r7, #4]
 8001eaa:	4413      	add	r3, r2
 8001eac:	4618      	mov	r0, r3
 8001eae:	f003 fae1 	bl	8005474 <buff2twobyte>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	813b      	strh	r3, [r7, #8]
		len = sprintf((char*)(mySIM.sms.GetSensor.data + mySIM.sms.GetSensor.datalength), "%d,", tmpvalue);
 8001eb6:	4b12      	ldr	r3, [pc, #72]	; (8001f00 <getDatalatest+0x1d8>)
 8001eb8:	f8b3 37c6 	ldrh.w	r3, [r3, #1990]	; 0x7c6
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	4b14      	ldr	r3, [pc, #80]	; (8001f10 <getDatalatest+0x1e8>)
 8001ec0:	4413      	add	r3, r2
 8001ec2:	893a      	ldrh	r2, [r7, #8]
 8001ec4:	4916      	ldr	r1, [pc, #88]	; (8001f20 <getDatalatest+0x1f8>)
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f00a fd4a 	bl	800c960 <siprintf>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	72bb      	strb	r3, [r7, #10]
		mySIM.sms.GetStation.datalength += len;
 8001ed0:	4b0b      	ldr	r3, [pc, #44]	; (8001f00 <getDatalatest+0x1d8>)
 8001ed2:	f8b3 28d8 	ldrh.w	r2, [r3, #2264]	; 0x8d8
 8001ed6:	7abb      	ldrb	r3, [r7, #10]
 8001ed8:	b29b      	uxth	r3, r3
 8001eda:	4413      	add	r3, r2
 8001edc:	b29a      	uxth	r2, r3
 8001ede:	4b08      	ldr	r3, [pc, #32]	; (8001f00 <getDatalatest+0x1d8>)
 8001ee0:	f8a3 28d8 	strh.w	r2, [r3, #2264]	; 0x8d8
		datapos += 2;
 8001ee4:	7bfb      	ldrb	r3, [r7, #15]
 8001ee6:	3302      	adds	r3, #2
 8001ee8:	73fb      	strb	r3, [r7, #15]
		while (datapos < crcpos){
 8001eea:	7bfb      	ldrb	r3, [r7, #15]
 8001eec:	b29b      	uxth	r3, r3
 8001eee:	89ba      	ldrh	r2, [r7, #12]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d881      	bhi.n	8001df8 <getDatalatest+0xd0>
		break;
 8001ef4:	bf00      	nop
	}
	return IDtype;
 8001ef6:	7afb      	ldrb	r3, [r7, #11]
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	3710      	adds	r7, #16
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	20001768 	.word	0x20001768
 8001f04:	20002042 	.word	0x20002042
 8001f08:	0800ed5c 	.word	0x0800ed5c
 8001f0c:	0800ed64 	.word	0x0800ed64
 8001f10:	20001f30 	.word	0x20001f30
 8001f14:	0800ed68 	.word	0x0800ed68
 8001f18:	0800ed6c 	.word	0x0800ed6c
 8001f1c:	0800ed70 	.word	0x0800ed70
 8001f20:	0800ed74 	.word	0x0800ed74

08001f24 <getMBAstate>:

static MBA_state_t getMBAstate(uint8_t *Msg)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b085      	sub	sp, #20
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
	MBA_state_t res = MBA_NULL;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	73fb      	strb	r3, [r7, #15]
	switch (Msg[MBA_STATE_POS])		{
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	3303      	adds	r3, #3
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d004      	beq.n	8001f44 <getMBAstate+0x20>
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d105      	bne.n	8001f4a <getMBAstate+0x26>
	case MBA_OFF:
		res = MBA_OFF;
 8001f3e:	2302      	movs	r3, #2
 8001f40:	73fb      	strb	r3, [r7, #15]
		break;
 8001f42:	e003      	b.n	8001f4c <getMBAstate+0x28>
	case MBA_ON:
		res = MBA_ON;
 8001f44:	2301      	movs	r3, #1
 8001f46:	73fb      	strb	r3, [r7, #15]
		break;
 8001f48:	e000      	b.n	8001f4c <getMBAstate+0x28>
	default:
		break;
 8001f4a:	bf00      	nop
	}
	myStation.MBAstate = res;
 8001f4c:	4a04      	ldr	r2, [pc, #16]	; (8001f60 <getMBAstate+0x3c>)
 8001f4e:	7bfb      	ldrb	r3, [r7, #15]
 8001f50:	7193      	strb	r3, [r2, #6]
	return res;
 8001f52:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3714      	adds	r7, #20
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bc80      	pop	{r7}
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	20000474 	.word	0x20000474

08001f64 <getCtrlStepinfor>:
static void  getCtrlStepinfor(uint8_t *Msg)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b084      	sub	sp, #16
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
	Stepmotor_dir_t dir = Msg[DIR_POS];
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	78db      	ldrb	r3, [r3, #3]
 8001f70:	73fb      	strb	r3, [r7, #15]
	if (dir < STEPM_DIR_INC && dir > STEPM_DIR_DEFAULT )	return;
 8001f72:	7bfb      	ldrb	r3, [r7, #15]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d102      	bne.n	8001f7e <getCtrlStepinfor+0x1a>
 8001f78:	7bfb      	ldrb	r3, [r7, #15]
 8001f7a:	2b03      	cmp	r3, #3
 8001f7c:	d831      	bhi.n	8001fe2 <getCtrlStepinfor+0x7e>
	Stepmotor_change_mode_t changemode = Msg[CHANGE_MODEPOS];
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	791b      	ldrb	r3, [r3, #4]
 8001f82:	73bb      	strb	r3, [r7, #14]
	if (changemode < STEPM_MODE_PERCENTAGE && changemode > STEPM_MODE_DEFAULT) return;
 8001f84:	7bbb      	ldrb	r3, [r7, #14]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d102      	bne.n	8001f90 <getCtrlStepinfor+0x2c>
 8001f8a:	7bbb      	ldrb	r3, [r7, #14]
 8001f8c:	2b03      	cmp	r3, #3
 8001f8e:	d82a      	bhi.n	8001fe6 <getCtrlStepinfor+0x82>
	uint8_t valuebuff[3] ;
	memset(valuebuff, 0, 3);
 8001f90:	f107 0308 	add.w	r3, r7, #8
 8001f94:	2203      	movs	r2, #3
 8001f96:	2100      	movs	r1, #0
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f00a f97b 	bl	800c294 <memset>
	memcpy(valuebuff, Msg + CHANGE_VALUE, 2);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	3305      	adds	r3, #5
 8001fa2:	881b      	ldrh	r3, [r3, #0]
 8001fa4:	b29b      	uxth	r3, r3
 8001fa6:	813b      	strh	r3, [r7, #8]
	uint16_t value = buff2twobyte(valuebuff);
 8001fa8:	f107 0308 	add.w	r3, r7, #8
 8001fac:	4618      	mov	r0, r3
 8001fae:	f003 fa61 	bl	8005474 <buff2twobyte>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	81bb      	strh	r3, [r7, #12]

	Step_setDir(dir);
 8001fb6:	7bfb      	ldrb	r3, [r7, #15]
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f001 fc4d 	bl	8003858 <Step_setDir>
	Step_setChangeMode(changemode);
 8001fbe:	7bbb      	ldrb	r3, [r7, #14]
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f001 fcd7 	bl	8003974 <Step_setChangeMode>
	if (changemode == STEPM_MODE_PERCENTAGE)	{
 8001fc6:	7bbb      	ldrb	r3, [r7, #14]
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d105      	bne.n	8001fd8 <getCtrlStepinfor+0x74>
		Step_setPercentChange(value);
 8001fcc:	89bb      	ldrh	r3, [r7, #12]
 8001fce:	b2db      	uxtb	r3, r3
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f001 fcbf 	bl	8003954 <Step_setPercentChange>
 8001fd6:	e007      	b.n	8001fe8 <getCtrlStepinfor+0x84>
	}
	else {
		Step_setStepChange(value);
 8001fd8:	89bb      	ldrh	r3, [r7, #12]
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f001 fca0 	bl	8003920 <Step_setStepChange>
 8001fe0:	e002      	b.n	8001fe8 <getCtrlStepinfor+0x84>
	if (dir < STEPM_DIR_INC && dir > STEPM_DIR_DEFAULT )	return;
 8001fe2:	bf00      	nop
 8001fe4:	e000      	b.n	8001fe8 <getCtrlStepinfor+0x84>
	if (changemode < STEPM_MODE_PERCENTAGE && changemode > STEPM_MODE_DEFAULT) return;
 8001fe6:	bf00      	nop
	}

}
 8001fe8:	3710      	adds	r7, #16
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
	...

08001ff0 <processingComingMsg>:
			}
			current = current->next;
		}
}
void processingComingMsg(uint8_t *Msg, uint16_t Msg_len, uint8_t stID)
{
 8001ff0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001ff4:	b08a      	sub	sp, #40	; 0x28
 8001ff6:	af02      	add	r7, sp, #8
 8001ff8:	6078      	str	r0, [r7, #4]
 8001ffa:	460b      	mov	r3, r1
 8001ffc:	807b      	strh	r3, [r7, #2]
 8001ffe:	4613      	mov	r3, r2
 8002000:	707b      	strb	r3, [r7, #1]
	if ( !checkCRC(Msg, Msg_len) )	return;
 8002002:	887b      	ldrh	r3, [r7, #2]
 8002004:	4619      	mov	r1, r3
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f7ff fdce 	bl	8001ba8 <checkCRC>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	f000 8152 	beq.w	80022b8 <processingComingMsg+0x2c8>

	if ( !checkNodeID(Msg, stID) )	return;
 8002014:	787b      	ldrb	r3, [r7, #1]
 8002016:	4619      	mov	r1, r3
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	f7ff fde3 	bl	8001be4 <checkNodeID>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	f000 814b 	beq.w	80022bc <processingComingMsg+0x2cc>

	PACK_t packageType = checkPacktype(Msg);
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f7ff fdf3 	bl	8001c12 <checkPacktype>
 800202c:	4603      	mov	r3, r0
 800202e:	77fb      	strb	r3, [r7, #31]
	DATA_t dataREStype;
	ID_t idType;
	uint32_t tmptime;
	_RTC tmpRTC;

	switch (packageType) {
 8002030:	7ffb      	ldrb	r3, [r7, #31]
 8002032:	3bf1      	subs	r3, #241	; 0xf1
 8002034:	2b05      	cmp	r3, #5
 8002036:	f200 8143 	bhi.w	80022c0 <processingComingMsg+0x2d0>
 800203a:	a201      	add	r2, pc, #4	; (adr r2, 8002040 <processingComingMsg+0x50>)
 800203c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002040:	08002059 	.word	0x08002059
 8002044:	080020b3 	.word	0x080020b3
 8002048:	080021bd 	.word	0x080021bd
 800204c:	08002227 	.word	0x08002227
 8002050:	080022c1 	.word	0x080022c1
 8002054:	080022a5 	.word	0x080022a5
		case PACKT_DATA:
			// Check data type
			dataType = checkDatatype(Msg);
 8002058:	6878      	ldr	r0, [r7, #4]
 800205a:	f7ff fde6 	bl	8001c2a <checkDatatype>
 800205e:	4603      	mov	r3, r0
 8002060:	74fb      	strb	r3, [r7, #19]
			switch (dataType) {
 8002062:	7cfb      	ldrb	r3, [r7, #19]
 8002064:	2b03      	cmp	r3, #3
 8002066:	d002      	beq.n	800206e <processingComingMsg+0x7e>
 8002068:	2b06      	cmp	r3, #6
 800206a:	d00a      	beq.n	8002082 <processingComingMsg+0x92>
						triggerSMSreturn(SMS_CMD_GET_STATION, SMS_CMD_DISABLE);
					}
					break;

				default:
					break;
 800206c:	e020      	b.n	80020b0 <processingComingMsg+0xc0>
					getDataStatus(Msg, Msg_len);
 800206e:	887b      	ldrh	r3, [r7, #2]
 8002070:	4619      	mov	r1, r3
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f7ff fdfe 	bl	8001c74 <getDataStatus>
					triggerSMSreturn(SMS_CMD_GET_STATUS, SMS_CMD_ENABLE);
 8002078:	2101      	movs	r1, #1
 800207a:	2005      	movs	r0, #5
 800207c:	f001 faca 	bl	8003614 <triggerSMSreturn>
					break;
 8002080:	e016      	b.n	80020b0 <processingComingMsg+0xc0>
					idType = getDatalatest(Msg, Msg_len);
 8002082:	887b      	ldrh	r3, [r7, #2]
 8002084:	4619      	mov	r1, r3
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f7ff fe4e 	bl	8001d28 <getDatalatest>
 800208c:	4603      	mov	r3, r0
 800208e:	74bb      	strb	r3, [r7, #18]
					if (idType == ID_SENSOR)	{
 8002090:	7cbb      	ldrb	r3, [r7, #18]
 8002092:	2b02      	cmp	r3, #2
 8002094:	d104      	bne.n	80020a0 <processingComingMsg+0xb0>
						triggerSMSreturn(SMS_CMD_GET_SENSOR, SMS_CMD_ENABLE);
 8002096:	2101      	movs	r1, #1
 8002098:	2006      	movs	r0, #6
 800209a:	f001 fabb 	bl	8003614 <triggerSMSreturn>
					break;
 800209e:	e006      	b.n	80020ae <processingComingMsg+0xbe>
					else if (idType == ID_STATION)	{
 80020a0:	7cbb      	ldrb	r3, [r7, #18]
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d103      	bne.n	80020ae <processingComingMsg+0xbe>
						triggerSMSreturn(SMS_CMD_GET_STATION, SMS_CMD_DISABLE);
 80020a6:	2100      	movs	r1, #0
 80020a8:	2007      	movs	r0, #7
 80020aa:	f001 fab3 	bl	8003614 <triggerSMSreturn>
					break;
 80020ae:	bf00      	nop
			}
			break;
 80020b0:	e109      	b.n	80022c6 <processingComingMsg+0x2d6>
		case PACKT_CMD:
			cmdType = checkCMDtype(Msg);
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f7ff fdd1 	bl	8001c5a <checkCMDtype>
 80020b8:	4603      	mov	r3, r0
 80020ba:	77bb      	strb	r3, [r7, #30]
			switch (cmdType) {
 80020bc:	7fbb      	ldrb	r3, [r7, #30]
 80020be:	3b01      	subs	r3, #1
 80020c0:	2b0b      	cmp	r3, #11
 80020c2:	d879      	bhi.n	80021b8 <processingComingMsg+0x1c8>
 80020c4:	a201      	add	r2, pc, #4	; (adr r2, 80020cc <processingComingMsg+0xdc>)
 80020c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020ca:	bf00      	nop
 80020cc:	080020fd 	.word	0x080020fd
 80020d0:	08002107 	.word	0x08002107
 80020d4:	080021b9 	.word	0x080021b9
 80020d8:	080021b9 	.word	0x080021b9
 80020dc:	080021b9 	.word	0x080021b9
 80020e0:	080021b9 	.word	0x080021b9
 80020e4:	08002159 	.word	0x08002159
 80020e8:	08002169 	.word	0x08002169
 80020ec:	080021b9 	.word	0x080021b9
 80020f0:	080021b9 	.word	0x080021b9
 80020f4:	080021b9 	.word	0x080021b9
 80020f8:	08002179 	.word	0x08002179
				case CMD_PREPARE_CALIB:
					triggerTaskflag(TASK_PREPARE_CALIB, FLAG_EN);
 80020fc:	2101      	movs	r1, #1
 80020fe:	2002      	movs	r0, #2
 8002100:	f003 fb18 	bl	8005734 <triggerTaskflag>
					break;
 8002104:	e059      	b.n	80021ba <processingComingMsg+0x1ca>
				case CMD_START_CALIB:
					// Get time in package
					 tmptime = buff2Fourbyte( Msg+ (uint8_t)ADDDATA_POS );
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	3303      	adds	r3, #3
 800210a:	4618      	mov	r0, r3
 800210c:	f003 f9eb 	bl	80054e6 <buff2Fourbyte>
 8002110:	6178      	str	r0, [r7, #20]
					epochtine2RTC(tmptime, &tmpRTC);
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	2200      	movs	r2, #0
 8002116:	4698      	mov	r8, r3
 8002118:	4691      	mov	r9, r2
 800211a:	f107 0308 	add.w	r3, r7, #8
 800211e:	461a      	mov	r2, r3
 8002120:	4640      	mov	r0, r8
 8002122:	4649      	mov	r1, r9
 8002124:	f001 ff56 	bl	8003fd4 <epochtine2RTC>

					// Save Calib time
					myStation.calibTime.hour = tmpRTC.Hour;
 8002128:	7b3a      	ldrb	r2, [r7, #12]
 800212a:	4b69      	ldr	r3, [pc, #420]	; (80022d0 <processingComingMsg+0x2e0>)
 800212c:	74da      	strb	r2, [r3, #19]
					myStation.calibTime.min = tmpRTC.Min;
 800212e:	7b7a      	ldrb	r2, [r7, #13]
 8002130:	4b67      	ldr	r3, [pc, #412]	; (80022d0 <processingComingMsg+0x2e0>)
 8002132:	751a      	strb	r2, [r3, #20]
					myStation.calibTime.sec = tmpRTC.Sec;
 8002134:	7bba      	ldrb	r2, [r7, #14]
 8002136:	4b66      	ldr	r3, [pc, #408]	; (80022d0 <processingComingMsg+0x2e0>)
 8002138:	755a      	strb	r2, [r3, #21]

					// Set alarm for Calib
					DS3231_ClearAlarm1();
 800213a:	f002 f919 	bl	8004370 <DS3231_ClearAlarm1>
					DS3231_SetAlarm1(ALARM_MODE_ALL_MATCHED, tmpRTC.Date, tmpRTC.Hour, tmpRTC.Min, tmpRTC.Sec);
 800213e:	7ab9      	ldrb	r1, [r7, #10]
 8002140:	7b3a      	ldrb	r2, [r7, #12]
 8002142:	7b78      	ldrb	r0, [r7, #13]
 8002144:	7bbb      	ldrb	r3, [r7, #14]
 8002146:	9300      	str	r3, [sp, #0]
 8002148:	4603      	mov	r3, r0
 800214a:	2000      	movs	r0, #0
 800214c:	f002 f870 	bl	8004230 <DS3231_SetAlarm1>

					// Set display mode
					displayCalibFlag = 1;
 8002150:	4b60      	ldr	r3, [pc, #384]	; (80022d4 <processingComingMsg+0x2e4>)
 8002152:	2201      	movs	r2, #1
 8002154:	701a      	strb	r2, [r3, #0]
					break;
 8002156:	e030      	b.n	80021ba <processingComingMsg+0x1ca>
				case CMD_CTRL_MBA:
					//Get MBA state from package and switch contactor
					switchContactor(getMBAstate(Msg));
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	f7ff fee3 	bl	8001f24 <getMBAstate>
 800215e:	4603      	mov	r3, r0
 8002160:	4618      	mov	r0, r3
 8002162:	f000 f995 	bl	8002490 <switchContactor>
					break;
 8002166:	e028      	b.n	80021ba <processingComingMsg+0x1ca>
				case CMD_CTRL_STEP_MOTOR:
					//Get data to control step motor
					getCtrlStepinfor(Msg);
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	f7ff fefb 	bl	8001f64 <getCtrlStepinfor>
					triggerTaskflag(TASK_CTRL_STEPMOR, FLAG_EN);
 800216e:	2101      	movs	r1, #1
 8002170:	2006      	movs	r0, #6
 8002172:	f003 fadf 	bl	8005734 <triggerTaskflag>
					break;
 8002176:	e020      	b.n	80021ba <processingComingMsg+0x1ca>
				case CMD_SYN_SENSOR:
					// get synchronize time and set alarm
					tmptime = buff2Fourbyte( Msg+ (uint8_t)ADDDATA_POS );
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	3303      	adds	r3, #3
 800217c:	4618      	mov	r0, r3
 800217e:	f003 f9b2 	bl	80054e6 <buff2Fourbyte>
 8002182:	6178      	str	r0, [r7, #20]
					epochtine2RTC(tmptime, &tmpRTC);
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	2200      	movs	r2, #0
 8002188:	461c      	mov	r4, r3
 800218a:	4615      	mov	r5, r2
 800218c:	f107 0308 	add.w	r3, r7, #8
 8002190:	461a      	mov	r2, r3
 8002192:	4620      	mov	r0, r4
 8002194:	4629      	mov	r1, r5
 8002196:	f001 ff1d 	bl	8003fd4 <epochtine2RTC>
					// set synchronize sensor flag
					sync_flag = 1;
 800219a:	4b4f      	ldr	r3, [pc, #316]	; (80022d8 <processingComingMsg+0x2e8>)
 800219c:	2201      	movs	r2, #1
 800219e:	701a      	strb	r2, [r3, #0]
					// Set alarm for synchronize
					DS3231_ClearAlarm1();
 80021a0:	f002 f8e6 	bl	8004370 <DS3231_ClearAlarm1>
					DS3231_SetAlarm1(ALARM_MODE_ALL_MATCHED, tmpRTC.Date, tmpRTC.Hour, tmpRTC.Min, tmpRTC.Sec);
 80021a4:	7ab9      	ldrb	r1, [r7, #10]
 80021a6:	7b3a      	ldrb	r2, [r7, #12]
 80021a8:	7b78      	ldrb	r0, [r7, #13]
 80021aa:	7bbb      	ldrb	r3, [r7, #14]
 80021ac:	9300      	str	r3, [sp, #0]
 80021ae:	4603      	mov	r3, r0
 80021b0:	2000      	movs	r0, #0
 80021b2:	f002 f83d 	bl	8004230 <DS3231_SetAlarm1>
					break;
 80021b6:	e000      	b.n	80021ba <processingComingMsg+0x1ca>
				default:
					break;
 80021b8:	bf00      	nop
			}
			break;
 80021ba:	e084      	b.n	80022c6 <processingComingMsg+0x2d6>
		case PACKT_RESDATA:
			dataREStype = checkDataREStype(Msg);
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	f7ff fd40 	bl	8001c42 <checkDataREStype>
 80021c2:	4603      	mov	r3, r0
 80021c4:	76fb      	strb	r3, [r7, #27]
			switch (dataREStype) {
 80021c6:	7efb      	ldrb	r3, [r7, #27]
 80021c8:	2b05      	cmp	r3, #5
 80021ca:	d01a      	beq.n	8002202 <processingComingMsg+0x212>
 80021cc:	2b05      	cmp	r3, #5
 80021ce:	dc22      	bgt.n	8002216 <processingComingMsg+0x226>
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d002      	beq.n	80021da <processingComingMsg+0x1ea>
 80021d4:	2b02      	cmp	r3, #2
 80021d6:	d00a      	beq.n	80021ee <processingComingMsg+0x1fe>
				if ( Msg[RESSTATUS_POS] == RES_OK)	{
					triggerTaskflag(TASK_SEND_DATACALIB, FLAG_DIS);
				}
				break;
			default:
				break;
 80021d8:	e01d      	b.n	8002216 <processingComingMsg+0x226>
				if ( Msg[RESSTATUS_POS] == RES_OK)	{
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	3302      	adds	r3, #2
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d11a      	bne.n	800221a <processingComingMsg+0x22a>
					triggerTaskflag(TASK_SEND_DATAPERIOD, FLAG_DIS);
 80021e4:	2100      	movs	r1, #0
 80021e6:	2009      	movs	r0, #9
 80021e8:	f003 faa4 	bl	8005734 <triggerTaskflag>
				break;
 80021ec:	e015      	b.n	800221a <processingComingMsg+0x22a>
				if ( Msg[RESSTATUS_POS] == RES_OK)	{
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	3302      	adds	r3, #2
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d112      	bne.n	800221e <processingComingMsg+0x22e>
					triggerTaskflag(TASK_SEND_NWREADY, FLAG_DIS);
 80021f8:	2100      	movs	r1, #0
 80021fa:	2008      	movs	r0, #8
 80021fc:	f003 fa9a 	bl	8005734 <triggerTaskflag>
				break;
 8002200:	e00d      	b.n	800221e <processingComingMsg+0x22e>
				if ( Msg[RESSTATUS_POS] == RES_OK)	{
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	3302      	adds	r3, #2
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	2b01      	cmp	r3, #1
 800220a:	d10a      	bne.n	8002222 <processingComingMsg+0x232>
					triggerTaskflag(TASK_SEND_DATACALIB, FLAG_DIS);
 800220c:	2100      	movs	r1, #0
 800220e:	200a      	movs	r0, #10
 8002210:	f003 fa90 	bl	8005734 <triggerTaskflag>
				break;
 8002214:	e005      	b.n	8002222 <processingComingMsg+0x232>
				break;
 8002216:	bf00      	nop
 8002218:	e055      	b.n	80022c6 <processingComingMsg+0x2d6>
				break;
 800221a:	bf00      	nop
 800221c:	e053      	b.n	80022c6 <processingComingMsg+0x2d6>
				break;
 800221e:	bf00      	nop
 8002220:	e051      	b.n	80022c6 <processingComingMsg+0x2d6>
				break;
 8002222:	bf00      	nop
			}
			break;
 8002224:	e04f      	b.n	80022c6 <processingComingMsg+0x2d6>
		case PACKT_RESCMD:
			cmdType = Msg[3];
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	3303      	adds	r3, #3
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	77bb      	strb	r3, [r7, #30]
			switch (cmdType)	{
 800222e:	7fbb      	ldrb	r3, [r7, #30]
 8002230:	2b08      	cmp	r3, #8
 8002232:	d01a      	beq.n	800226a <processingComingMsg+0x27a>
 8002234:	2b08      	cmp	r3, #8
 8002236:	dc2d      	bgt.n	8002294 <processingComingMsg+0x2a4>
 8002238:	2b03      	cmp	r3, #3
 800223a:	d02d      	beq.n	8002298 <processingComingMsg+0x2a8>
 800223c:	2b07      	cmp	r3, #7
 800223e:	d129      	bne.n	8002294 <processingComingMsg+0x2a4>
			case CMD_CTRL_MBA:
				if (Msg[RESSTATUS_POS] == RES_OK)	{
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	3302      	adds	r3, #2
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	2b01      	cmp	r3, #1
 8002248:	d128      	bne.n	800229c <processingComingMsg+0x2ac>
					uint8_t len= sprintf((char*)mySIM.sms.CtrlON.data,"Ctrl MBA success");
 800224a:	4924      	ldr	r1, [pc, #144]	; (80022dc <processingComingMsg+0x2ec>)
 800224c:	4824      	ldr	r0, [pc, #144]	; (80022e0 <processingComingMsg+0x2f0>)
 800224e:	f00a fb87 	bl	800c960 <siprintf>
 8002252:	4603      	mov	r3, r0
 8002254:	773b      	strb	r3, [r7, #28]
					mySIM.sms.CtrlON.datalength = len;
 8002256:	7f3b      	ldrb	r3, [r7, #28]
 8002258:	b29a      	uxth	r2, r3
 800225a:	4b22      	ldr	r3, [pc, #136]	; (80022e4 <processingComingMsg+0x2f4>)
 800225c:	f8a3 215a 	strh.w	r2, [r3, #346]	; 0x15a
					triggerSMSreturn(SMS_CMD_CTRL_ON, ENABLE);
 8002260:	2101      	movs	r1, #1
 8002262:	2000      	movs	r0, #0
 8002264:	f001 f9d6 	bl	8003614 <triggerSMSreturn>
				}
				break;
 8002268:	e018      	b.n	800229c <processingComingMsg+0x2ac>
			case CMD_CTRL_STEP_MOTOR:
				if (Msg[RESSTATUS_POS] == RES_OK)	{
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	3302      	adds	r3, #2
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	2b01      	cmp	r3, #1
 8002272:	d115      	bne.n	80022a0 <processingComingMsg+0x2b0>
					uint8_t len= sprintf((char*)mySIM.sms.CtrlDEC.data,"Ctrl StepMor success");
 8002274:	491c      	ldr	r1, [pc, #112]	; (80022e8 <processingComingMsg+0x2f8>)
 8002276:	481d      	ldr	r0, [pc, #116]	; (80022ec <processingComingMsg+0x2fc>)
 8002278:	f00a fb72 	bl	800c960 <siprintf>
 800227c:	4603      	mov	r3, r0
 800227e:	777b      	strb	r3, [r7, #29]
					mySIM.sms.CtrlDEC.datalength = len;
 8002280:	7f7b      	ldrb	r3, [r7, #29]
 8002282:	b29a      	uxth	r2, r3
 8002284:	4b17      	ldr	r3, [pc, #92]	; (80022e4 <processingComingMsg+0x2f4>)
 8002286:	f8a3 25a2 	strh.w	r2, [r3, #1442]	; 0x5a2
					triggerSMSreturn(SMS_CMD_CTRL_DEC, ENABLE);
 800228a:	2101      	movs	r1, #1
 800228c:	2004      	movs	r0, #4
 800228e:	f001 f9c1 	bl	8003614 <triggerSMSreturn>
				}
				break;
 8002292:	e005      	b.n	80022a0 <processingComingMsg+0x2b0>
			case CMD_SMS_CALIB:

				break;
			default:
				break;
 8002294:	bf00      	nop
 8002296:	e016      	b.n	80022c6 <processingComingMsg+0x2d6>
				break;
 8002298:	bf00      	nop
 800229a:	e014      	b.n	80022c6 <processingComingMsg+0x2d6>
				break;
 800229c:	bf00      	nop
 800229e:	e012      	b.n	80022c6 <processingComingMsg+0x2d6>
				break;
 80022a0:	bf00      	nop
			}
			break;
 80022a2:	e010      	b.n	80022c6 <processingComingMsg+0x2d6>
		case PACKT_RESREGISTER:
			// Get Register status
			if (Msg[RESSTATUS_POS] == RES_OK)	{
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	3302      	adds	r3, #2
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d10a      	bne.n	80022c4 <processingComingMsg+0x2d4>
				triggerTaskflag(TASK_REGISTER, FLAG_DIS);
 80022ae:	2100      	movs	r1, #0
 80022b0:	2000      	movs	r0, #0
 80022b2:	f003 fa3f 	bl	8005734 <triggerTaskflag>
			}
			break;
 80022b6:	e005      	b.n	80022c4 <processingComingMsg+0x2d4>
	if ( !checkCRC(Msg, Msg_len) )	return;
 80022b8:	bf00      	nop
 80022ba:	e004      	b.n	80022c6 <processingComingMsg+0x2d6>
	if ( !checkNodeID(Msg, stID) )	return;
 80022bc:	bf00      	nop
 80022be:	e002      	b.n	80022c6 <processingComingMsg+0x2d6>
		default:
			break;
 80022c0:	bf00      	nop
 80022c2:	e000      	b.n	80022c6 <processingComingMsg+0x2d6>
			break;
 80022c4:	bf00      	nop
	}
}
 80022c6:	3720      	adds	r7, #32
 80022c8:	46bd      	mov	sp, r7
 80022ca:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80022ce:	bf00      	nop
 80022d0:	20000474 	.word	0x20000474
 80022d4:	200005c5 	.word	0x200005c5
 80022d8:	200029e4 	.word	0x200029e4
 80022dc:	0800ed78 	.word	0x0800ed78
 80022e0:	200018c4 	.word	0x200018c4
 80022e4:	20001768 	.word	0x20001768
 80022e8:	0800ed8c 	.word	0x0800ed8c
 80022ec:	20001d0c 	.word	0x20001d0c

080022f0 <CMD_SMS_calib>:
#include "stationCMD.h"
#include "Serial_log.h"


uint8_t CMD_SMS_calib (uint8_t *cmddata, uint16_t datalen)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b086      	sub	sp, #24
 80022f4:	af04      	add	r7, sp, #16
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	460b      	mov	r3, r1
 80022fa:	807b      	strh	r3, [r7, #2]
	if (sendCMDtoServer( CMD_SMS_CALIB, cmddata, datalen, MBA_NULL,
 80022fc:	887a      	ldrh	r2, [r7, #2]
 80022fe:	2300      	movs	r3, #0
 8002300:	9302      	str	r3, [sp, #8]
 8002302:	2303      	movs	r3, #3
 8002304:	9301      	str	r3, [sp, #4]
 8002306:	2303      	movs	r3, #3
 8002308:	9300      	str	r3, [sp, #0]
 800230a:	2300      	movs	r3, #0
 800230c:	6879      	ldr	r1, [r7, #4]
 800230e:	2003      	movs	r0, #3
 8002310:	f7ff fb50 	bl	80019b4 <sendCMDtoServer>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d004      	beq.n	8002324 <CMD_SMS_calib+0x34>
			STEPM_DIR_DEFAULT , STEPM_MODE_DEFAULT, 0) )	{
		Serial_log_string("Sent \"Calibration\" message to server\r\n");
 800231a:	4805      	ldr	r0, [pc, #20]	; (8002330 <CMD_SMS_calib+0x40>)
 800231c:	f7fe ff82 	bl	8001224 <Serial_log_string>
		return 1;
 8002320:	2301      	movs	r3, #1
 8002322:	e000      	b.n	8002326 <CMD_SMS_calib+0x36>
	}
	return 0;
 8002324:	2300      	movs	r3, #0
}
 8002326:	4618      	mov	r0, r3
 8002328:	3708      	adds	r7, #8
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	0800edac 	.word	0x0800edac

08002334 <CMD_SMS_getStatus>:

uint8_t CMD_SMS_getStatus ( uint8_t *cmddata, uint16_t datalen)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b086      	sub	sp, #24
 8002338:	af04      	add	r7, sp, #16
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	460b      	mov	r3, r1
 800233e:	807b      	strh	r3, [r7, #2]
	if (sendCMDtoServer(CMD_SMS_GETSTATUS, cmddata, datalen, MBA_NULL,
 8002340:	887a      	ldrh	r2, [r7, #2]
 8002342:	2300      	movs	r3, #0
 8002344:	9302      	str	r3, [sp, #8]
 8002346:	2303      	movs	r3, #3
 8002348:	9301      	str	r3, [sp, #4]
 800234a:	2303      	movs	r3, #3
 800234c:	9300      	str	r3, [sp, #0]
 800234e:	2300      	movs	r3, #0
 8002350:	6879      	ldr	r1, [r7, #4]
 8002352:	2004      	movs	r0, #4
 8002354:	f7ff fb2e 	bl	80019b4 <sendCMDtoServer>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d004      	beq.n	8002368 <CMD_SMS_getStatus+0x34>
			STEPM_DIR_DEFAULT , STEPM_MODE_DEFAULT, 0) )	{
		Serial_log_string("Sent \"Get status\" message to server\r\n");
 800235e:	4805      	ldr	r0, [pc, #20]	; (8002374 <CMD_SMS_getStatus+0x40>)
 8002360:	f7fe ff60 	bl	8001224 <Serial_log_string>
		return 1;
 8002364:	2301      	movs	r3, #1
 8002366:	e000      	b.n	800236a <CMD_SMS_getStatus+0x36>
	}
	return 0;
 8002368:	2300      	movs	r3, #0
}
 800236a:	4618      	mov	r0, r3
 800236c:	3708      	adds	r7, #8
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	0800edd4 	.word	0x0800edd4

08002378 <CMD_SMS_Ctrl_MBA>:

uint8_t CMD_SMS_Ctrl_MBA ( uint8_t *cmddata, uint16_t datalen, MBA_state_t MBAstate)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b086      	sub	sp, #24
 800237c:	af04      	add	r7, sp, #16
 800237e:	6078      	str	r0, [r7, #4]
 8002380:	460b      	mov	r3, r1
 8002382:	807b      	strh	r3, [r7, #2]
 8002384:	4613      	mov	r3, r2
 8002386:	707b      	strb	r3, [r7, #1]
	if (sendCMDtoServer(CMD_CTRL_MBA, cmddata, datalen, MBAstate,
 8002388:	787b      	ldrb	r3, [r7, #1]
 800238a:	887a      	ldrh	r2, [r7, #2]
 800238c:	2100      	movs	r1, #0
 800238e:	9102      	str	r1, [sp, #8]
 8002390:	2103      	movs	r1, #3
 8002392:	9101      	str	r1, [sp, #4]
 8002394:	2103      	movs	r1, #3
 8002396:	9100      	str	r1, [sp, #0]
 8002398:	6879      	ldr	r1, [r7, #4]
 800239a:	2007      	movs	r0, #7
 800239c:	f7ff fb0a 	bl	80019b4 <sendCMDtoServer>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d004      	beq.n	80023b0 <CMD_SMS_Ctrl_MBA+0x38>
			STEPM_DIR_DEFAULT , STEPM_MODE_DEFAULT, 0) )	{
		Serial_log_string("Sent \"Control MBA\" message to server\r\n");
 80023a6:	4805      	ldr	r0, [pc, #20]	; (80023bc <CMD_SMS_Ctrl_MBA+0x44>)
 80023a8:	f7fe ff3c 	bl	8001224 <Serial_log_string>
		return 1;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e000      	b.n	80023b2 <CMD_SMS_Ctrl_MBA+0x3a>
	}
	return 0;
 80023b0:	2300      	movs	r3, #0


}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3708      	adds	r7, #8
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	0800edfc 	.word	0x0800edfc

080023c0 <CMD_SMS_Ctrl_StepM>:

uint8_t CMD_SMS_Ctrl_StepM ( uint8_t *cmddata, uint16_t datalen, Stepmotor_dir_t stepDIR, Stepmotor_change_mode_t stepMode, uint8_t changeValue)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b086      	sub	sp, #24
 80023c4:	af04      	add	r7, sp, #16
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	4608      	mov	r0, r1
 80023ca:	4611      	mov	r1, r2
 80023cc:	461a      	mov	r2, r3
 80023ce:	4603      	mov	r3, r0
 80023d0:	807b      	strh	r3, [r7, #2]
 80023d2:	460b      	mov	r3, r1
 80023d4:	707b      	strb	r3, [r7, #1]
 80023d6:	4613      	mov	r3, r2
 80023d8:	703b      	strb	r3, [r7, #0]
	if (sendCMDtoServer(CMD_CTRL_STEP_MOTOR, cmddata, datalen, MBA_NULL,stepDIR , stepMode, changeValue) )	{
 80023da:	7c3b      	ldrb	r3, [r7, #16]
 80023dc:	b29b      	uxth	r3, r3
 80023de:	887a      	ldrh	r2, [r7, #2]
 80023e0:	9302      	str	r3, [sp, #8]
 80023e2:	783b      	ldrb	r3, [r7, #0]
 80023e4:	9301      	str	r3, [sp, #4]
 80023e6:	787b      	ldrb	r3, [r7, #1]
 80023e8:	9300      	str	r3, [sp, #0]
 80023ea:	2300      	movs	r3, #0
 80023ec:	6879      	ldr	r1, [r7, #4]
 80023ee:	2008      	movs	r0, #8
 80023f0:	f7ff fae0 	bl	80019b4 <sendCMDtoServer>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d004      	beq.n	8002404 <CMD_SMS_Ctrl_StepM+0x44>
		Serial_log_string("Sent \"Control Step motor\" message to server\r\n");
 80023fa:	4805      	ldr	r0, [pc, #20]	; (8002410 <CMD_SMS_Ctrl_StepM+0x50>)
 80023fc:	f7fe ff12 	bl	8001224 <Serial_log_string>
		return 1;
 8002400:	2301      	movs	r3, #1
 8002402:	e000      	b.n	8002406 <CMD_SMS_Ctrl_StepM+0x46>
	}
	return 0;
 8002404:	2300      	movs	r3, #0
}
 8002406:	4618      	mov	r0, r3
 8002408:	3708      	adds	r7, #8
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	0800ee24 	.word	0x0800ee24

08002414 <CMD_SMS_getStationLatestData>:

uint8_t CMD_SMS_getStationLatestData ( uint8_t *cmddata, uint16_t datalen)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b086      	sub	sp, #24
 8002418:	af04      	add	r7, sp, #16
 800241a:	6078      	str	r0, [r7, #4]
 800241c:	460b      	mov	r3, r1
 800241e:	807b      	strh	r3, [r7, #2]
	if (sendCMDtoServer(CMD_SMS_GETSTATUS, cmddata, datalen, MBA_NULL,
 8002420:	887a      	ldrh	r2, [r7, #2]
 8002422:	2300      	movs	r3, #0
 8002424:	9302      	str	r3, [sp, #8]
 8002426:	2303      	movs	r3, #3
 8002428:	9301      	str	r3, [sp, #4]
 800242a:	2303      	movs	r3, #3
 800242c:	9300      	str	r3, [sp, #0]
 800242e:	2300      	movs	r3, #0
 8002430:	6879      	ldr	r1, [r7, #4]
 8002432:	2004      	movs	r0, #4
 8002434:	f7ff fabe 	bl	80019b4 <sendCMDtoServer>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d004      	beq.n	8002448 <CMD_SMS_getStationLatestData+0x34>
			STEPM_DIR_DEFAULT , STEPM_MODE_DEFAULT, 0) )	{
		Serial_log_string("Sent \"Get latest station data\" message to server\r\n");
 800243e:	4805      	ldr	r0, [pc, #20]	; (8002454 <CMD_SMS_getStationLatestData+0x40>)
 8002440:	f7fe fef0 	bl	8001224 <Serial_log_string>
		return 1;
 8002444:	2301      	movs	r3, #1
 8002446:	e000      	b.n	800244a <CMD_SMS_getStationLatestData+0x36>
	}
	return 0;
 8002448:	2300      	movs	r3, #0
}
 800244a:	4618      	mov	r0, r3
 800244c:	3708      	adds	r7, #8
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	0800ee54 	.word	0x0800ee54

08002458 <CMD_SMS_getSensorLatestData>:

uint8_t CMD_SMS_getSensorLatestData ( uint8_t *cmddata, uint16_t datalen)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b086      	sub	sp, #24
 800245c:	af04      	add	r7, sp, #16
 800245e:	6078      	str	r0, [r7, #4]
 8002460:	460b      	mov	r3, r1
 8002462:	807b      	strh	r3, [r7, #2]
	if (sendCMDtoServer( CMD_SMS_GETSTATUS, cmddata, datalen, MBA_NULL,STEPM_DIR_DEFAULT , STEPM_MODE_DEFAULT, 0) )
 8002464:	887a      	ldrh	r2, [r7, #2]
 8002466:	2300      	movs	r3, #0
 8002468:	9302      	str	r3, [sp, #8]
 800246a:	2303      	movs	r3, #3
 800246c:	9301      	str	r3, [sp, #4]
 800246e:	2303      	movs	r3, #3
 8002470:	9300      	str	r3, [sp, #0]
 8002472:	2300      	movs	r3, #0
 8002474:	6879      	ldr	r1, [r7, #4]
 8002476:	2004      	movs	r0, #4
 8002478:	f7ff fa9c 	bl	80019b4 <sendCMDtoServer>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d001      	beq.n	8002486 <CMD_SMS_getSensorLatestData+0x2e>
		return 1;
 8002482:	2301      	movs	r3, #1
 8002484:	e000      	b.n	8002488 <CMD_SMS_getSensorLatestData+0x30>
	return 0;
 8002486:	2300      	movs	r3, #0
}
 8002488:	4618      	mov	r0, r3
 800248a:	3708      	adds	r7, #8
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}

08002490 <switchContactor>:
#include  "gpio.h"
#include "Task.h"


MBA_state_t switchContactor (MBA_state_t ONofOFF)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0
 8002496:	4603      	mov	r3, r0
 8002498:	71fb      	strb	r3, [r7, #7]
	switch (ONofOFF)	{
 800249a:	79fb      	ldrb	r3, [r7, #7]
 800249c:	2b01      	cmp	r3, #1
 800249e:	d002      	beq.n	80024a6 <switchContactor+0x16>
 80024a0:	2b02      	cmp	r3, #2
 80024a2:	d006      	beq.n	80024b2 <switchContactor+0x22>
		break;
	case MBA_OFF:
		HAL_GPIO_WritePin(MBA_CONTACTOR_GPIO_Port, MBA_CONTACTOR_Pin, GPIO_PIN_RESET);
		break;
	default:
		break;
 80024a4:	e00b      	b.n	80024be <switchContactor+0x2e>
		HAL_GPIO_WritePin(MBA_CONTACTOR_GPIO_Port, MBA_CONTACTOR_Pin, GPIO_PIN_SET);
 80024a6:	2201      	movs	r2, #1
 80024a8:	2110      	movs	r1, #16
 80024aa:	4809      	ldr	r0, [pc, #36]	; (80024d0 <switchContactor+0x40>)
 80024ac:	f006 fd9b 	bl	8008fe6 <HAL_GPIO_WritePin>
		break;
 80024b0:	e005      	b.n	80024be <switchContactor+0x2e>
		HAL_GPIO_WritePin(MBA_CONTACTOR_GPIO_Port, MBA_CONTACTOR_Pin, GPIO_PIN_RESET);
 80024b2:	2200      	movs	r2, #0
 80024b4:	2110      	movs	r1, #16
 80024b6:	4806      	ldr	r0, [pc, #24]	; (80024d0 <switchContactor+0x40>)
 80024b8:	f006 fd95 	bl	8008fe6 <HAL_GPIO_WritePin>
		break;
 80024bc:	bf00      	nop
	}
	// send MBA status to Server
	triggerTaskflag(TASK_SEND_MBA_STATUS, FLAG_EN);
 80024be:	2101      	movs	r1, #1
 80024c0:	2004      	movs	r0, #4
 80024c2:	f003 f937 	bl	8005734 <triggerTaskflag>
	return ONofOFF;
 80024c6:	79fb      	ldrb	r3, [r7, #7]
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3708      	adds	r7, #8
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	40010800 	.word	0x40010800

080024d4 <initSIM>:
//uint8_t connlost = 0;



void initSIM()
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	af00      	add	r7, sp, #0
	enableReceiveDMAtoIdle_SIM();
 80024d8:	f000 f802 	bl	80024e0 <enableReceiveDMAtoIdle_SIM>
//	SIM_sendCMD((uint8_t*)"ATE0",(uint8_t*)"OK", ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, 1000);
}
 80024dc:	bf00      	nop
 80024de:	bd80      	pop	{r7, pc}

080024e0 <enableReceiveDMAtoIdle_SIM>:
void enableReceiveDMAtoIdle_SIM(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	af00      	add	r7, sp, #0
	 HAL_UARTEx_ReceiveToIdle_DMA(SIM_UART, SIMRxbuff, SIM_RXBUFF_SIZE);
 80024e4:	2296      	movs	r2, #150	; 0x96
 80024e6:	4907      	ldr	r1, [pc, #28]	; (8002504 <enableReceiveDMAtoIdle_SIM+0x24>)
 80024e8:	4807      	ldr	r0, [pc, #28]	; (8002508 <enableReceiveDMAtoIdle_SIM+0x28>)
 80024ea:	f008 fdfe 	bl	800b0ea <HAL_UARTEx_ReceiveToIdle_DMA>
	  __HAL_DMA_DISABLE_IT(SIM_DMA_UART,DMA_IT_HT);
 80024ee:	4b07      	ldr	r3, [pc, #28]	; (800250c <enableReceiveDMAtoIdle_SIM+0x2c>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	4b05      	ldr	r3, [pc, #20]	; (800250c <enableReceiveDMAtoIdle_SIM+0x2c>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f022 0204 	bic.w	r2, r2, #4
 80024fc:	601a      	str	r2, [r3, #0]
}
 80024fe:	bf00      	nop
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	20001104 	.word	0x20001104
 8002508:	20002a50 	.word	0x20002a50
 800250c:	20002b28 	.word	0x20002b28

08002510 <SIM_callback>:

void SIM_callback(uint16_t Size)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b084      	sub	sp, #16
 8002514:	af00      	add	r7, sp, #0
 8002516:	4603      	mov	r3, r0
 8002518:	80fb      	strh	r3, [r7, #6]


		oldPos = newPos;  // Update the last position before copying new data
 800251a:	4b5c      	ldr	r3, [pc, #368]	; (800268c <SIM_callback+0x17c>)
 800251c:	881a      	ldrh	r2, [r3, #0]
 800251e:	4b5c      	ldr	r3, [pc, #368]	; (8002690 <SIM_callback+0x180>)
 8002520:	801a      	strh	r2, [r3, #0]

		/* If the data in large and it is about to exceed the buffer size, we have to route it to the start of the buffer
		 * This is to maintain the circular buffer
		 * The old data in the main buffer will be overlapped
		 */
		if (oldPos+Size > SIM_BUFF_SIZE)  // If the current position + new data size is greater than the main buffer
 8002522:	4b5b      	ldr	r3, [pc, #364]	; (8002690 <SIM_callback+0x180>)
 8002524:	881b      	ldrh	r3, [r3, #0]
 8002526:	461a      	mov	r2, r3
 8002528:	88fb      	ldrh	r3, [r7, #6]
 800252a:	4413      	add	r3, r2
 800252c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002530:	dd22      	ble.n	8002578 <SIM_callback+0x68>
		{
			uint16_t datatocopy = SIM_BUFF_SIZE-oldPos;  // find out how much space is left in the main buffer
 8002532:	4b57      	ldr	r3, [pc, #348]	; (8002690 <SIM_callback+0x180>)
 8002534:	881b      	ldrh	r3, [r3, #0]
 8002536:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800253a:	81fb      	strh	r3, [r7, #14]
			memcpy ((uint8_t *)SIMbuff+oldPos, (uint8_t *)SIMRxbuff, datatocopy);  // copy data in that remaining space
 800253c:	4b54      	ldr	r3, [pc, #336]	; (8002690 <SIM_callback+0x180>)
 800253e:	881b      	ldrh	r3, [r3, #0]
 8002540:	461a      	mov	r2, r3
 8002542:	4b54      	ldr	r3, [pc, #336]	; (8002694 <SIM_callback+0x184>)
 8002544:	4413      	add	r3, r2
 8002546:	89fa      	ldrh	r2, [r7, #14]
 8002548:	4953      	ldr	r1, [pc, #332]	; (8002698 <SIM_callback+0x188>)
 800254a:	4618      	mov	r0, r3
 800254c:	f009 fe94 	bl	800c278 <memcpy>

			oldPos = 0;  // point to the start of the buffer
 8002550:	4b4f      	ldr	r3, [pc, #316]	; (8002690 <SIM_callback+0x180>)
 8002552:	2200      	movs	r2, #0
 8002554:	801a      	strh	r2, [r3, #0]
			memcpy ((uint8_t *)SIMbuff, (uint8_t *)SIMRxbuff+datatocopy, (Size-datatocopy));  // copy the remaining data
 8002556:	89fb      	ldrh	r3, [r7, #14]
 8002558:	4a4f      	ldr	r2, [pc, #316]	; (8002698 <SIM_callback+0x188>)
 800255a:	1899      	adds	r1, r3, r2
 800255c:	88fa      	ldrh	r2, [r7, #6]
 800255e:	89fb      	ldrh	r3, [r7, #14]
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	461a      	mov	r2, r3
 8002564:	484b      	ldr	r0, [pc, #300]	; (8002694 <SIM_callback+0x184>)
 8002566:	f009 fe87 	bl	800c278 <memcpy>
			newPos = (Size-datatocopy);  // update the position
 800256a:	88fa      	ldrh	r2, [r7, #6]
 800256c:	89fb      	ldrh	r3, [r7, #14]
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	b29a      	uxth	r2, r3
 8002572:	4b46      	ldr	r3, [pc, #280]	; (800268c <SIM_callback+0x17c>)
 8002574:	801a      	strh	r2, [r3, #0]
 8002576:	e010      	b.n	800259a <SIM_callback+0x8a>
		/* if the current position + new data size is less than the main buffer
		 * we will simply copy the data into the buffer and update the position
		 */
		else
		{
			memcpy ((uint8_t *)SIMbuff+oldPos, (uint8_t *)SIMRxbuff, Size);
 8002578:	4b45      	ldr	r3, [pc, #276]	; (8002690 <SIM_callback+0x180>)
 800257a:	881b      	ldrh	r3, [r3, #0]
 800257c:	461a      	mov	r2, r3
 800257e:	4b45      	ldr	r3, [pc, #276]	; (8002694 <SIM_callback+0x184>)
 8002580:	4413      	add	r3, r2
 8002582:	88fa      	ldrh	r2, [r7, #6]
 8002584:	4944      	ldr	r1, [pc, #272]	; (8002698 <SIM_callback+0x188>)
 8002586:	4618      	mov	r0, r3
 8002588:	f009 fe76 	bl	800c278 <memcpy>
			newPos = Size+oldPos;
 800258c:	4b40      	ldr	r3, [pc, #256]	; (8002690 <SIM_callback+0x180>)
 800258e:	881a      	ldrh	r2, [r3, #0]
 8002590:	88fb      	ldrh	r3, [r7, #6]
 8002592:	4413      	add	r3, r2
 8002594:	b29a      	uxth	r2, r3
 8002596:	4b3d      	ldr	r3, [pc, #244]	; (800268c <SIM_callback+0x17c>)
 8002598:	801a      	strh	r2, [r3, #0]

		/* Update the position of the Head
		 * If the current position + new size is less then the buffer size, Head will update normally
		 * Or else the head will be at the new position from the beginning
		 */
		if (head + Size < SIM_BUFF_SIZE ) head = head + Size;
 800259a:	4b40      	ldr	r3, [pc, #256]	; (800269c <SIM_callback+0x18c>)
 800259c:	881b      	ldrh	r3, [r3, #0]
 800259e:	461a      	mov	r2, r3
 80025a0:	88fb      	ldrh	r3, [r7, #6]
 80025a2:	4413      	add	r3, r2
 80025a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025a8:	da07      	bge.n	80025ba <SIM_callback+0xaa>
 80025aa:	4b3c      	ldr	r3, [pc, #240]	; (800269c <SIM_callback+0x18c>)
 80025ac:	881a      	ldrh	r2, [r3, #0]
 80025ae:	88fb      	ldrh	r3, [r7, #6]
 80025b0:	4413      	add	r3, r2
 80025b2:	b29a      	uxth	r2, r3
 80025b4:	4b39      	ldr	r3, [pc, #228]	; (800269c <SIM_callback+0x18c>)
 80025b6:	801a      	strh	r2, [r3, #0]
 80025b8:	e009      	b.n	80025ce <SIM_callback+0xbe>
		else head = head + Size - SIM_BUFF_SIZE;
 80025ba:	4b38      	ldr	r3, [pc, #224]	; (800269c <SIM_callback+0x18c>)
 80025bc:	881a      	ldrh	r2, [r3, #0]
 80025be:	88fb      	ldrh	r3, [r7, #6]
 80025c0:	4413      	add	r3, r2
 80025c2:	b29b      	uxth	r3, r3
 80025c4:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 80025c8:	b29a      	uxth	r2, r3
 80025ca:	4b34      	ldr	r3, [pc, #208]	; (800269c <SIM_callback+0x18c>)
 80025cc:	801a      	strh	r2, [r3, #0]

		/* start the DMA again */
		enableReceiveDMAtoIdle_SIM();
 80025ce:	f7ff ff87 	bl	80024e0 <enableReceiveDMAtoIdle_SIM>

		// New SMS coming
		if (isWordinBuff(SIMRxbuff, Size, (uint8_t*)"+CMTI: \"SM\"") != NULL)
 80025d2:	88fb      	ldrh	r3, [r7, #6]
 80025d4:	4a32      	ldr	r2, [pc, #200]	; (80026a0 <SIM_callback+0x190>)
 80025d6:	4619      	mov	r1, r3
 80025d8:	482f      	ldr	r0, [pc, #188]	; (8002698 <SIM_callback+0x188>)
 80025da:	f002 fea3 	bl	8005324 <isWordinBuff>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d002      	beq.n	80025ea <SIM_callback+0xda>
		{
			newSMS = 1;
 80025e4:	4b2f      	ldr	r3, [pc, #188]	; (80026a4 <SIM_callback+0x194>)
 80025e6:	2201      	movs	r2, #1
 80025e8:	701a      	strb	r2, [r3, #0]
		}

		// Read SMS
		if (isWordinBuff(SIMRxbuff, Size, (uint8_t*)"+CMGR:") != NULL)	{
 80025ea:	88fb      	ldrh	r3, [r7, #6]
 80025ec:	4a2e      	ldr	r2, [pc, #184]	; (80026a8 <SIM_callback+0x198>)
 80025ee:	4619      	mov	r1, r3
 80025f0:	4829      	ldr	r0, [pc, #164]	; (8002698 <SIM_callback+0x188>)
 80025f2:	f002 fe97 	bl	8005324 <isWordinBuff>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d008      	beq.n	800260e <SIM_callback+0xfe>
			memcpy(SMS_Rxbuff, SIMRxbuff, Size);
 80025fc:	88fb      	ldrh	r3, [r7, #6]
 80025fe:	461a      	mov	r2, r3
 8002600:	4925      	ldr	r1, [pc, #148]	; (8002698 <SIM_callback+0x188>)
 8002602:	482a      	ldr	r0, [pc, #168]	; (80026ac <SIM_callback+0x19c>)
 8002604:	f009 fe38 	bl	800c278 <memcpy>
			SMS_len = Size;
 8002608:	4a29      	ldr	r2, [pc, #164]	; (80026b0 <SIM_callback+0x1a0>)
 800260a:	88fb      	ldrh	r3, [r7, #6]
 800260c:	8013      	strh	r3, [r2, #0]
		}
		if (isWordinBuff(SIMRxbuff, Size, (uint8_t*)"+CMGL: ") != NULL)	{
 800260e:	88fb      	ldrh	r3, [r7, #6]
 8002610:	4a28      	ldr	r2, [pc, #160]	; (80026b4 <SIM_callback+0x1a4>)
 8002612:	4619      	mov	r1, r3
 8002614:	4820      	ldr	r0, [pc, #128]	; (8002698 <SIM_callback+0x188>)
 8002616:	f002 fe85 	bl	8005324 <isWordinBuff>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d008      	beq.n	8002632 <SIM_callback+0x122>
			memcpy(SMS_Rxbuff, SIMRxbuff, Size);
 8002620:	88fb      	ldrh	r3, [r7, #6]
 8002622:	461a      	mov	r2, r3
 8002624:	491c      	ldr	r1, [pc, #112]	; (8002698 <SIM_callback+0x188>)
 8002626:	4821      	ldr	r0, [pc, #132]	; (80026ac <SIM_callback+0x19c>)
 8002628:	f009 fe26 	bl	800c278 <memcpy>
			SMS_len = Size;
 800262c:	4a20      	ldr	r2, [pc, #128]	; (80026b0 <SIM_callback+0x1a0>)
 800262e:	88fb      	ldrh	r3, [r7, #6]
 8002630:	8013      	strh	r3, [r2, #0]
		}
		// New MQTT message
		if ( (isWordinBuff(SIMRxbuff, Size, (uint8_t*) "+CMQTTRXSTART:") != NULL)
 8002632:	88fb      	ldrh	r3, [r7, #6]
 8002634:	4a20      	ldr	r2, [pc, #128]	; (80026b8 <SIM_callback+0x1a8>)
 8002636:	4619      	mov	r1, r3
 8002638:	4817      	ldr	r0, [pc, #92]	; (8002698 <SIM_callback+0x188>)
 800263a:	f002 fe73 	bl	8005324 <isWordinBuff>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d013      	beq.n	800266c <SIM_callback+0x15c>
				&& ( isWordinBuff(SIMRxbuff, Size,(uint8_t*) "+CMQTTRXEND:") != NULL ) )  	{
 8002644:	88fb      	ldrh	r3, [r7, #6]
 8002646:	4a1d      	ldr	r2, [pc, #116]	; (80026bc <SIM_callback+0x1ac>)
 8002648:	4619      	mov	r1, r3
 800264a:	4813      	ldr	r0, [pc, #76]	; (8002698 <SIM_callback+0x188>)
 800264c:	f002 fe6a 	bl	8005324 <isWordinBuff>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d00a      	beq.n	800266c <SIM_callback+0x15c>
			memcpy(MQTT_Rxbuff, SIMRxbuff, Size);
 8002656:	88fb      	ldrh	r3, [r7, #6]
 8002658:	461a      	mov	r2, r3
 800265a:	490f      	ldr	r1, [pc, #60]	; (8002698 <SIM_callback+0x188>)
 800265c:	4818      	ldr	r0, [pc, #96]	; (80026c0 <SIM_callback+0x1b0>)
 800265e:	f009 fe0b 	bl	800c278 <memcpy>
			MQTT_receive(MQTT_Rxbuff, Size);
 8002662:	88fb      	ldrh	r3, [r7, #6]
 8002664:	4619      	mov	r1, r3
 8002666:	4816      	ldr	r0, [pc, #88]	; (80026c0 <SIM_callback+0x1b0>)
 8002668:	f002 fb24 	bl	8004cb4 <MQTT_receive>
		}

		if  (isWordinBuff(SIMRxbuff, Size, (uint8_t*)"+CMQTTCONNLOST:") != NULL) 	{
 800266c:	88fb      	ldrh	r3, [r7, #6]
 800266e:	4a15      	ldr	r2, [pc, #84]	; (80026c4 <SIM_callback+0x1b4>)
 8002670:	4619      	mov	r1, r3
 8002672:	4809      	ldr	r0, [pc, #36]	; (8002698 <SIM_callback+0x188>)
 8002674:	f002 fe56 	bl	8005324 <isWordinBuff>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d002      	beq.n	8002684 <SIM_callback+0x174>
			mySIM.mqttServer.connect = 0;
 800267e:	4b12      	ldr	r3, [pc, #72]	; (80026c8 <SIM_callback+0x1b8>)
 8002680:	2200      	movs	r2, #0
 8002682:	739a      	strb	r2, [r3, #14]
		}
//		Serial_log_string("Rx: ");
//		Serial_log_buffer(SIMRxbuff, Size);
//		Serial_log_string(" ");

}
 8002684:	bf00      	nop
 8002686:	3710      	adds	r7, #16
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}
 800268c:	20000f02 	.word	0x20000f02
 8002690:	20000f00 	.word	0x20000f00
 8002694:	20000f04 	.word	0x20000f04
 8002698:	20001104 	.word	0x20001104
 800269c:	20001360 	.word	0x20001360
 80026a0:	0800ee88 	.word	0x0800ee88
 80026a4:	20001364 	.word	0x20001364
 80026a8:	0800ee94 	.word	0x0800ee94
 80026ac:	2000119c 	.word	0x2000119c
 80026b0:	20001366 	.word	0x20001366
 80026b4:	0800ee9c 	.word	0x0800ee9c
 80026b8:	0800eea4 	.word	0x0800eea4
 80026bc:	0800eeb4 	.word	0x0800eeb4
 80026c0:	20001234 	.word	0x20001234
 80026c4:	0800eec4 	.word	0x0800eec4
 80026c8:	20001768 	.word	0x20001768

080026cc <SIM_checkMsg>:

SIM_res_t SIM_checkMsg(uint8_t *Msg, uint16_t timeout)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80026d8:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80026dc:	6018      	str	r0, [r3, #0]
 80026de:	460a      	mov	r2, r1
 80026e0:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80026e4:	f2a3 230e 	subw	r3, r3, #526	; 0x20e
 80026e8:	801a      	strh	r2, [r3, #0]
	SIM_res_t res= SIM_NO_RES;
 80026ea:	2302      	movs	r3, #2
 80026ec:	f887 320b 	strb.w	r3, [r7, #523]	; 0x20b
	uint8_t dataSize = 0;
 80026f0:	2300      	movs	r3, #0
 80026f2:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
	uint8_t tmpdbuff[SIM_BUFF_SIZE];
	memset( (char*)tmpdbuff, 0, SIM_BUFF_SIZE );
 80026f6:	f107 0308 	add.w	r3, r7, #8
 80026fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026fe:	2100      	movs	r1, #0
 8002700:	4618      	mov	r0, r3
 8002702:	f009 fdc7 	bl	800c294 <memset>
	timeout /= 10;
 8002706:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800270a:	f2a3 230e 	subw	r3, r3, #526	; 0x20e
 800270e:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8002712:	f2a2 220e 	subw	r2, r2, #526	; 0x20e
 8002716:	8812      	ldrh	r2, [r2, #0]
 8002718:	4943      	ldr	r1, [pc, #268]	; (8002828 <SIM_checkMsg+0x15c>)
 800271a:	fba1 1202 	umull	r1, r2, r1, r2
 800271e:	08d2      	lsrs	r2, r2, #3
 8002720:	801a      	strh	r2, [r3, #0]

	for (uint16_t i = 0; i < 10 ; i++)
 8002722:	2300      	movs	r3, #0
 8002724:	f8a7 320c 	strh.w	r3, [r7, #524]	; 0x20c
 8002728:	e073      	b.n	8002812 <SIM_checkMsg+0x146>
	{
		HAL_Delay(timeout);
 800272a:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800272e:	f2a3 230e 	subw	r3, r3, #526	; 0x20e
 8002732:	881b      	ldrh	r3, [r3, #0]
 8002734:	4618      	mov	r0, r3
 8002736:	f005 fae9 	bl	8007d0c <HAL_Delay>

		if (head > tail)
 800273a:	4b3c      	ldr	r3, [pc, #240]	; (800282c <SIM_checkMsg+0x160>)
 800273c:	881a      	ldrh	r2, [r3, #0]
 800273e:	4b3c      	ldr	r3, [pc, #240]	; (8002830 <SIM_checkMsg+0x164>)
 8002740:	881b      	ldrh	r3, [r3, #0]
 8002742:	429a      	cmp	r2, r3
 8002744:	d915      	bls.n	8002772 <SIM_checkMsg+0xa6>
		{
			dataSize = head - tail ;
 8002746:	4b39      	ldr	r3, [pc, #228]	; (800282c <SIM_checkMsg+0x160>)
 8002748:	881b      	ldrh	r3, [r3, #0]
 800274a:	b2da      	uxtb	r2, r3
 800274c:	4b38      	ldr	r3, [pc, #224]	; (8002830 <SIM_checkMsg+0x164>)
 800274e:	881b      	ldrh	r3, [r3, #0]
 8002750:	b2db      	uxtb	r3, r3
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f

			memcpy(tmpdbuff, SIMbuff + tail, dataSize);
 8002758:	4b35      	ldr	r3, [pc, #212]	; (8002830 <SIM_checkMsg+0x164>)
 800275a:	881b      	ldrh	r3, [r3, #0]
 800275c:	461a      	mov	r2, r3
 800275e:	4b35      	ldr	r3, [pc, #212]	; (8002834 <SIM_checkMsg+0x168>)
 8002760:	18d1      	adds	r1, r2, r3
 8002762:	f897 220f 	ldrb.w	r2, [r7, #527]	; 0x20f
 8002766:	f107 0308 	add.w	r3, r7, #8
 800276a:	4618      	mov	r0, r3
 800276c:	f009 fd84 	bl	800c278 <memcpy>
 8002770:	e02a      	b.n	80027c8 <SIM_checkMsg+0xfc>
		}
		else if ( head < tail )
 8002772:	4b2e      	ldr	r3, [pc, #184]	; (800282c <SIM_checkMsg+0x160>)
 8002774:	881a      	ldrh	r2, [r3, #0]
 8002776:	4b2e      	ldr	r3, [pc, #184]	; (8002830 <SIM_checkMsg+0x164>)
 8002778:	881b      	ldrh	r3, [r3, #0]
 800277a:	429a      	cmp	r2, r3
 800277c:	d243      	bcs.n	8002806 <SIM_checkMsg+0x13a>
		{
			dataSize = SIM_BUFF_SIZE - tail + head ;
 800277e:	4b2b      	ldr	r3, [pc, #172]	; (800282c <SIM_checkMsg+0x160>)
 8002780:	881b      	ldrh	r3, [r3, #0]
 8002782:	b2da      	uxtb	r2, r3
 8002784:	4b2a      	ldr	r3, [pc, #168]	; (8002830 <SIM_checkMsg+0x164>)
 8002786:	881b      	ldrh	r3, [r3, #0]
 8002788:	b2db      	uxtb	r3, r3
 800278a:	1ad3      	subs	r3, r2, r3
 800278c:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
			memcpy(tmpdbuff, SIMbuff + tail, SIM_BUFF_SIZE - tail);
 8002790:	4b27      	ldr	r3, [pc, #156]	; (8002830 <SIM_checkMsg+0x164>)
 8002792:	881b      	ldrh	r3, [r3, #0]
 8002794:	461a      	mov	r2, r3
 8002796:	4b27      	ldr	r3, [pc, #156]	; (8002834 <SIM_checkMsg+0x168>)
 8002798:	18d1      	adds	r1, r2, r3
 800279a:	4b25      	ldr	r3, [pc, #148]	; (8002830 <SIM_checkMsg+0x164>)
 800279c:	881b      	ldrh	r3, [r3, #0]
 800279e:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80027a2:	461a      	mov	r2, r3
 80027a4:	f107 0308 	add.w	r3, r7, #8
 80027a8:	4618      	mov	r0, r3
 80027aa:	f009 fd65 	bl	800c278 <memcpy>
			memcpy(tmpdbuff + SIM_BUFF_SIZE - tail, SIMbuff, head);
 80027ae:	4b20      	ldr	r3, [pc, #128]	; (8002830 <SIM_checkMsg+0x164>)
 80027b0:	881b      	ldrh	r3, [r3, #0]
 80027b2:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80027b6:	f107 0208 	add.w	r2, r7, #8
 80027ba:	4413      	add	r3, r2
 80027bc:	4a1b      	ldr	r2, [pc, #108]	; (800282c <SIM_checkMsg+0x160>)
 80027be:	8812      	ldrh	r2, [r2, #0]
 80027c0:	491c      	ldr	r1, [pc, #112]	; (8002834 <SIM_checkMsg+0x168>)
 80027c2:	4618      	mov	r0, r3
 80027c4:	f009 fd58 	bl	800c278 <memcpy>
		}
		else {
			continue;
		}

		if ( isWordinBuff(tmpdbuff, dataSize, Msg) != NULL )	{
 80027c8:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 80027cc:	b299      	uxth	r1, r3
 80027ce:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80027d2:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80027d6:	f107 0008 	add.w	r0, r7, #8
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	f002 fda2 	bl	8005324 <isWordinBuff>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d001      	beq.n	80027ea <SIM_checkMsg+0x11e>
			return SIM_RES_MSG ;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e019      	b.n	800281e <SIM_checkMsg+0x152>
		}

		if ( isWordinBuff(tmpdbuff, dataSize, (uint8_t*)"ERROR") != NULL )	{
 80027ea:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 80027ee:	b299      	uxth	r1, r3
 80027f0:	f107 0308 	add.w	r3, r7, #8
 80027f4:	4a10      	ldr	r2, [pc, #64]	; (8002838 <SIM_checkMsg+0x16c>)
 80027f6:	4618      	mov	r0, r3
 80027f8:	f002 fd94 	bl	8005324 <isWordinBuff>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d002      	beq.n	8002808 <SIM_checkMsg+0x13c>
			return SIM_ERROR ;
 8002802:	2300      	movs	r3, #0
 8002804:	e00b      	b.n	800281e <SIM_checkMsg+0x152>
			continue;
 8002806:	bf00      	nop
	for (uint16_t i = 0; i < 10 ; i++)
 8002808:	f8b7 320c 	ldrh.w	r3, [r7, #524]	; 0x20c
 800280c:	3301      	adds	r3, #1
 800280e:	f8a7 320c 	strh.w	r3, [r7, #524]	; 0x20c
 8002812:	f8b7 320c 	ldrh.w	r3, [r7, #524]	; 0x20c
 8002816:	2b09      	cmp	r3, #9
 8002818:	d987      	bls.n	800272a <SIM_checkMsg+0x5e>
		}
	}

 	return res;
 800281a:	f897 320b 	ldrb.w	r3, [r7, #523]	; 0x20b
}
 800281e:	4618      	mov	r0, r3
 8002820:	f507 7704 	add.w	r7, r7, #528	; 0x210
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}
 8002828:	cccccccd 	.word	0xcccccccd
 800282c:	20001360 	.word	0x20001360
 8002830:	20001362 	.word	0x20001362
 8002834:	20000f04 	.word	0x20000f04
 8002838:	0800eed4 	.word	0x0800eed4

0800283c <SIM_sendCMD>:

SIM_res_t SIM_sendCMD(uint8_t *cmd, uint8_t *checkResMsg, uint8_t CheckResENorDIS, uint8_t ENorDISmarkasread, uint32_t timeout)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b0a6      	sub	sp, #152	; 0x98
 8002840:	af00      	add	r7, sp, #0
 8002842:	60f8      	str	r0, [r7, #12]
 8002844:	60b9      	str	r1, [r7, #8]
 8002846:	4611      	mov	r1, r2
 8002848:	461a      	mov	r2, r3
 800284a:	460b      	mov	r3, r1
 800284c:	71fb      	strb	r3, [r7, #7]
 800284e:	4613      	mov	r3, r2
 8002850:	71bb      	strb	r3, [r7, #6]
	uint8_t SIM_Txbuff[128];
	uint8_t len = sprintf( (char*)SIM_Txbuff, "%s\r\n", cmd);
 8002852:	f107 0314 	add.w	r3, r7, #20
 8002856:	68fa      	ldr	r2, [r7, #12]
 8002858:	4915      	ldr	r1, [pc, #84]	; (80028b0 <SIM_sendCMD+0x74>)
 800285a:	4618      	mov	r0, r3
 800285c:	f00a f880 	bl	800c960 <siprintf>
 8002860:	4603      	mov	r3, r0
 8002862:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	HAL_UART_Transmit(SIM_UART, SIM_Txbuff, len, 0xFFFF) ;
 8002866:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800286a:	b29a      	uxth	r2, r3
 800286c:	f107 0114 	add.w	r1, r7, #20
 8002870:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002874:	480f      	ldr	r0, [pc, #60]	; (80028b4 <SIM_sendCMD+0x78>)
 8002876:	f008 fbb5 	bl	800afe4 <HAL_UART_Transmit>

	if (CheckResENorDIS == ENABLE_SIM_CHECKRES)
 800287a:	79fb      	ldrb	r3, [r7, #7]
 800287c:	2b01      	cmp	r3, #1
 800287e:	d111      	bne.n	80028a4 <SIM_sendCMD+0x68>
	{
		SIM_res_t res = SIM_checkMsg(checkResMsg, timeout);
 8002880:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002884:	b29b      	uxth	r3, r3
 8002886:	4619      	mov	r1, r3
 8002888:	68b8      	ldr	r0, [r7, #8]
 800288a:	f7ff ff1f 	bl	80026cc <SIM_checkMsg>
 800288e:	4603      	mov	r3, r0
 8002890:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
		if (ENorDISmarkasread == ENABLE_MARKASREAD)
 8002894:	79bb      	ldrb	r3, [r7, #6]
 8002896:	2b01      	cmp	r3, #1
 8002898:	d101      	bne.n	800289e <SIM_sendCMD+0x62>
		{
			MarkAsReadData_SIM();
 800289a:	f000 f87f 	bl	800299c <MarkAsReadData_SIM>
		}
//		Serial_log_string("Res of CMD: ");
//		Serial_log_buffer(cmd, len);
//		Serial_log_number(res);
		return res;
 800289e:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 80028a2:	e000      	b.n	80028a6 <SIM_sendCMD+0x6a>
	}
	return SIM_NO_RES;
 80028a4:	2302      	movs	r3, #2
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3798      	adds	r7, #152	; 0x98
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	0800eedc 	.word	0x0800eedc
 80028b4:	20002a50 	.word	0x20002a50

080028b8 <SIM_checkCMD>:
/*
 * Return : 1 success
 * 			0 fail
 */
uint8_t SIM_checkCMD (SIM_CMD_t cmd)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b086      	sub	sp, #24
 80028bc:	af02      	add	r7, sp, #8
 80028be:	4603      	mov	r3, r0
 80028c0:	71fb      	strb	r3, [r7, #7]
	uint8_t res = 0;
 80028c2:	2300      	movs	r3, #0
 80028c4:	73fb      	strb	r3, [r7, #15]
//	SIM_res_t check;
	switch (cmd) {
 80028c6:	79fb      	ldrb	r3, [r7, #7]
 80028c8:	2b04      	cmp	r3, #4
 80028ca:	d849      	bhi.n	8002960 <SIM_checkCMD+0xa8>
 80028cc:	a201      	add	r2, pc, #4	; (adr r2, 80028d4 <SIM_checkCMD+0x1c>)
 80028ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028d2:	bf00      	nop
 80028d4:	080028e9 	.word	0x080028e9
 80028d8:	08002943 	.word	0x08002943
 80028dc:	08002925 	.word	0x08002925
 80028e0:	08002907 	.word	0x08002907
 80028e4:	08002961 	.word	0x08002961
		case SIM_CMD_SIMCARD_PIN:

			if ( SIM_sendCMD( (uint8_t*)"AT+CPIN?", (uint8_t*)"+CPIN: READY", ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, SIM_TIMEOUT_SHORT) == SIM_RES_MSG ) {
 80028e8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80028ec:	9300      	str	r3, [sp, #0]
 80028ee:	2301      	movs	r3, #1
 80028f0:	2201      	movs	r2, #1
 80028f2:	4922      	ldr	r1, [pc, #136]	; (800297c <SIM_checkCMD+0xc4>)
 80028f4:	4822      	ldr	r0, [pc, #136]	; (8002980 <SIM_checkCMD+0xc8>)
 80028f6:	f7ff ffa1 	bl	800283c <SIM_sendCMD>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d131      	bne.n	8002964 <SIM_checkCMD+0xac>
				res = 1;
 8002900:	2301      	movs	r3, #1
 8002902:	73fb      	strb	r3, [r7, #15]
//				Serial_log_string("SIM card READY\r\n");
			}
			break;
 8002904:	e02e      	b.n	8002964 <SIM_checkCMD+0xac>
		case SIM_CMD_NW_CPSI:
			if ( SIM_sendCMD( (uint8_t*)"AT+CPSI?", (uint8_t*)"+CPSI: NO SERVICE", ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, SIM_TIMEOUT_SHORT) == SIM_RES_MSG ) {
 8002906:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800290a:	9300      	str	r3, [sp, #0]
 800290c:	2301      	movs	r3, #1
 800290e:	2201      	movs	r2, #1
 8002910:	491c      	ldr	r1, [pc, #112]	; (8002984 <SIM_checkCMD+0xcc>)
 8002912:	481d      	ldr	r0, [pc, #116]	; (8002988 <SIM_checkCMD+0xd0>)
 8002914:	f7ff ff92 	bl	800283c <SIM_sendCMD>
 8002918:	4603      	mov	r3, r0
 800291a:	2b01      	cmp	r3, #1
 800291c:	d024      	beq.n	8002968 <SIM_checkCMD+0xb0>
//				Serial_log_string("NO SERVICE, network status has some problem");
			}
			else {
				res = 1;
 800291e:	2301      	movs	r3, #1
 8002920:	73fb      	strb	r3, [r7, #15]
//				Serial_log_string("SERVICE available\r\n");
			}
			break;
 8002922:	e021      	b.n	8002968 <SIM_checkCMD+0xb0>
		case SIM_CMD_NW_CREG:
			if ( SIM_sendCMD( (uint8_t*)"AT+CREG?", (uint8_t*)"+CREG: 0,1", ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, SIM_TIMEOUT_SHORT) == SIM_RES_MSG ) {
 8002924:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002928:	9300      	str	r3, [sp, #0]
 800292a:	2301      	movs	r3, #1
 800292c:	2201      	movs	r2, #1
 800292e:	4917      	ldr	r1, [pc, #92]	; (800298c <SIM_checkCMD+0xd4>)
 8002930:	4817      	ldr	r0, [pc, #92]	; (8002990 <SIM_checkCMD+0xd8>)
 8002932:	f7ff ff83 	bl	800283c <SIM_sendCMD>
 8002936:	4603      	mov	r3, r0
 8002938:	2b01      	cmp	r3, #1
 800293a:	d117      	bne.n	800296c <SIM_checkCMD+0xb4>
				res = 1;
 800293c:	2301      	movs	r3, #1
 800293e:	73fb      	strb	r3, [r7, #15]
//				Serial_log_string("Module is registered to CS domain\r\n");
			}
			break;
 8002940:	e014      	b.n	800296c <SIM_checkCMD+0xb4>
		case SIM_CMD_PACKDOM_CGREG:

			break;
		case SIM_CMD_STA_CSQ:
			if ( SIM_sendCMD( (uint8_t*)"AT+CSQ", (uint8_t*)"+CSQ: 99", ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, SIM_TIMEOUT_SHORT) == SIM_RES_MSG ) {
 8002942:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002946:	9300      	str	r3, [sp, #0]
 8002948:	2301      	movs	r3, #1
 800294a:	2201      	movs	r2, #1
 800294c:	4911      	ldr	r1, [pc, #68]	; (8002994 <SIM_checkCMD+0xdc>)
 800294e:	4812      	ldr	r0, [pc, #72]	; (8002998 <SIM_checkCMD+0xe0>)
 8002950:	f7ff ff74 	bl	800283c <SIM_sendCMD>
 8002954:	4603      	mov	r3, r0
 8002956:	2b01      	cmp	r3, #1
 8002958:	d00a      	beq.n	8002970 <SIM_checkCMD+0xb8>
//				Serial_log_string("Signal quality is bad, please check SIM card or reboot the module\r\n");
			}
			else {
				res = 1;
 800295a:	2301      	movs	r3, #1
 800295c:	73fb      	strb	r3, [r7, #15]
//				Serial_log_string("Signal quality is good\r\n");
			}
			break;
 800295e:	e007      	b.n	8002970 <SIM_checkCMD+0xb8>
		default :
			break;
 8002960:	bf00      	nop
 8002962:	e006      	b.n	8002972 <SIM_checkCMD+0xba>
			break;
 8002964:	bf00      	nop
 8002966:	e004      	b.n	8002972 <SIM_checkCMD+0xba>
			break;
 8002968:	bf00      	nop
 800296a:	e002      	b.n	8002972 <SIM_checkCMD+0xba>
			break;
 800296c:	bf00      	nop
 800296e:	e000      	b.n	8002972 <SIM_checkCMD+0xba>
			break;
 8002970:	bf00      	nop
	}
	return res;
 8002972:	7bfb      	ldrb	r3, [r7, #15]
}
 8002974:	4618      	mov	r0, r3
 8002976:	3710      	adds	r7, #16
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}
 800297c:	0800eee4 	.word	0x0800eee4
 8002980:	0800eef4 	.word	0x0800eef4
 8002984:	0800ef00 	.word	0x0800ef00
 8002988:	0800ef14 	.word	0x0800ef14
 800298c:	0800ef20 	.word	0x0800ef20
 8002990:	0800ef2c 	.word	0x0800ef2c
 8002994:	0800ef38 	.word	0x0800ef38
 8002998:	0800ef44 	.word	0x0800ef44

0800299c <MarkAsReadData_SIM>:


}

void MarkAsReadData_SIM(void)
{
 800299c:	b480      	push	{r7}
 800299e:	af00      	add	r7, sp, #0
	tail = head;
 80029a0:	4b03      	ldr	r3, [pc, #12]	; (80029b0 <MarkAsReadData_SIM+0x14>)
 80029a2:	881a      	ldrh	r2, [r3, #0]
 80029a4:	4b03      	ldr	r3, [pc, #12]	; (80029b4 <MarkAsReadData_SIM+0x18>)
 80029a6:	801a      	strh	r2, [r3, #0]
}
 80029a8:	bf00      	nop
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bc80      	pop	{r7}
 80029ae:	4770      	bx	lr
 80029b0:	20001360 	.word	0x20001360
 80029b4:	20001362 	.word	0x20001362

080029b8 <getAfterword>:

uint16_t getAfterword(uint8_t *srcBuffer, uint16_t srcBufferlen, uint8_t *word, uint8_t *getBuffer)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b086      	sub	sp, #24
 80029bc:	af00      	add	r7, sp, #0
 80029be:	60f8      	str	r0, [r7, #12]
 80029c0:	607a      	str	r2, [r7, #4]
 80029c2:	603b      	str	r3, [r7, #0]
 80029c4:	460b      	mov	r3, r1
 80029c6:	817b      	strh	r3, [r7, #10]
	uint16_t remainlen = 0;
 80029c8:	2300      	movs	r3, #0
 80029ca:	82fb      	strh	r3, [r7, #22]
	uint8_t *currPOS = isWordinBuff(srcBuffer, srcBufferlen, word);
 80029cc:	897b      	ldrh	r3, [r7, #10]
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	4619      	mov	r1, r3
 80029d2:	68f8      	ldr	r0, [r7, #12]
 80029d4:	f002 fca6 	bl	8005324 <isWordinBuff>
 80029d8:	6138      	str	r0, [r7, #16]
	if ( currPOS == NULL ) return	0;
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d101      	bne.n	80029e4 <getAfterword+0x2c>
 80029e0:	2300      	movs	r3, #0
 80029e2:	e015      	b.n	8002a10 <getAfterword+0x58>
	currPOS += strlen((char*)word);
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	f7fd fbbb 	bl	8000160 <strlen>
 80029ea:	4602      	mov	r2, r0
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	4413      	add	r3, r2
 80029f0:	613b      	str	r3, [r7, #16]
	remainlen = getRemainsize(currPOS, srcBuffer, srcBufferlen);
 80029f2:	897b      	ldrh	r3, [r7, #10]
 80029f4:	461a      	mov	r2, r3
 80029f6:	68f9      	ldr	r1, [r7, #12]
 80029f8:	6938      	ldr	r0, [r7, #16]
 80029fa:	f002 fd12 	bl	8005422 <getRemainsize>
 80029fe:	4603      	mov	r3, r0
 8002a00:	82fb      	strh	r3, [r7, #22]
	memcpy(getBuffer, currPOS, remainlen);
 8002a02:	8afb      	ldrh	r3, [r7, #22]
 8002a04:	461a      	mov	r2, r3
 8002a06:	6939      	ldr	r1, [r7, #16]
 8002a08:	6838      	ldr	r0, [r7, #0]
 8002a0a:	f009 fc35 	bl	800c278 <memcpy>
	return remainlen;
 8002a0e:	8afb      	ldrh	r3, [r7, #22]
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3718      	adds	r7, #24
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}

08002a18 <stringIDtoHexID>:

uint16_t stringIDtoHexID (uint8_t *stringIDbuffer, uint8_t *hexIDbuffer, const char *separator, ID_t idtype)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b086      	sub	sp, #24
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	60f8      	str	r0, [r7, #12]
 8002a20:	60b9      	str	r1, [r7, #8]
 8002a22:	607a      	str	r2, [r7, #4]
 8002a24:	70fb      	strb	r3, [r7, #3]
	uint8_t *token = (uint8_t*)strtok((char*)stringIDbuffer, separator);
 8002a26:	6879      	ldr	r1, [r7, #4]
 8002a28:	68f8      	ldr	r0, [r7, #12]
 8002a2a:	f009 ffc1 	bl	800c9b0 <strtok>
 8002a2e:	6178      	str	r0, [r7, #20]
	uint16_t hexbufferlen = 0;
 8002a30:	2300      	movs	r3, #0
 8002a32:	827b      	strh	r3, [r7, #18]

	while (token != NULL)	{
 8002a34:	e01b      	b.n	8002a6e <stringIDtoHexID+0x56>
		uint16_t tmp = atoi((char*)token);
 8002a36:	6978      	ldr	r0, [r7, #20]
 8002a38:	f009 fac0 	bl	800bfbc <atoi>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	823b      	strh	r3, [r7, #16]
		if ( validationID(tmp, idtype) )	{
 8002a40:	78fa      	ldrb	r2, [r7, #3]
 8002a42:	8a3b      	ldrh	r3, [r7, #16]
 8002a44:	4611      	mov	r1, r2
 8002a46:	4618      	mov	r0, r3
 8002a48:	f002 ff64 	bl	8005914 <validationID>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d008      	beq.n	8002a64 <stringIDtoHexID+0x4c>
			hexIDbuffer[hexbufferlen++] = tmp;
 8002a52:	8a7b      	ldrh	r3, [r7, #18]
 8002a54:	1c5a      	adds	r2, r3, #1
 8002a56:	827a      	strh	r2, [r7, #18]
 8002a58:	461a      	mov	r2, r3
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	4413      	add	r3, r2
 8002a5e:	8a3a      	ldrh	r2, [r7, #16]
 8002a60:	b2d2      	uxtb	r2, r2
 8002a62:	701a      	strb	r2, [r3, #0]
		}
		token = (uint8_t*)strtok(NULL, separator);
 8002a64:	6879      	ldr	r1, [r7, #4]
 8002a66:	2000      	movs	r0, #0
 8002a68:	f009 ffa2 	bl	800c9b0 <strtok>
 8002a6c:	6178      	str	r0, [r7, #20]
	while (token != NULL)	{
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d1e0      	bne.n	8002a36 <stringIDtoHexID+0x1e>
	}
	return hexbufferlen;
 8002a74:	8a7b      	ldrh	r3, [r7, #18]
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3718      	adds	r7, #24
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
	...

08002a80 <SMS_getPhonenumb>:
	getBetween((uint8_t*)" ", (uint8_t*)",", contentbuffer, contentlen, indexbuffer);
	return atoi((char*)indexbuffer);
}

uint8_t SMS_getPhonenumb (uint8_t *SMSbuffer, uint16_t SMS_bufferlen, uint8_t *Phonenumb_buffer )
{
 8002a80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002a84:	b08b      	sub	sp, #44	; 0x2c
 8002a86:	af02      	add	r7, sp, #8
 8002a88:	60f8      	str	r0, [r7, #12]
 8002a8a:	460b      	mov	r3, r1
 8002a8c:	607a      	str	r2, [r7, #4]
 8002a8e:	817b      	strh	r3, [r7, #10]
 8002a90:	466b      	mov	r3, sp
 8002a92:	461e      	mov	r6, r3
	uint8_t contentbuffer[SMS_bufferlen];
 8002a94:	8979      	ldrh	r1, [r7, #10]
 8002a96:	460b      	mov	r3, r1
 8002a98:	3b01      	subs	r3, #1
 8002a9a:	61bb      	str	r3, [r7, #24]
 8002a9c:	b28b      	uxth	r3, r1
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	4698      	mov	r8, r3
 8002aa2:	4691      	mov	r9, r2
 8002aa4:	f04f 0200 	mov.w	r2, #0
 8002aa8:	f04f 0300 	mov.w	r3, #0
 8002aac:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ab0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ab4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002ab8:	b28b      	uxth	r3, r1
 8002aba:	2200      	movs	r2, #0
 8002abc:	461c      	mov	r4, r3
 8002abe:	4615      	mov	r5, r2
 8002ac0:	f04f 0200 	mov.w	r2, #0
 8002ac4:	f04f 0300 	mov.w	r3, #0
 8002ac8:	00eb      	lsls	r3, r5, #3
 8002aca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ace:	00e2      	lsls	r2, r4, #3
 8002ad0:	460b      	mov	r3, r1
 8002ad2:	3307      	adds	r3, #7
 8002ad4:	08db      	lsrs	r3, r3, #3
 8002ad6:	00db      	lsls	r3, r3, #3
 8002ad8:	ebad 0d03 	sub.w	sp, sp, r3
 8002adc:	ab02      	add	r3, sp, #8
 8002ade:	3300      	adds	r3, #0
 8002ae0:	617b      	str	r3, [r7, #20]
	uint16_t contentlen = getAfterword(SMSbuffer, SMS_bufferlen, (uint8_t*)"+CMGL: ", contentbuffer);
 8002ae2:	8979      	ldrh	r1, [r7, #10]
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	4a13      	ldr	r2, [pc, #76]	; (8002b34 <SMS_getPhonenumb+0xb4>)
 8002ae8:	68f8      	ldr	r0, [r7, #12]
 8002aea:	f7ff ff65 	bl	80029b8 <getAfterword>
 8002aee:	4603      	mov	r3, r0
 8002af0:	83fb      	strh	r3, [r7, #30]
	if (!contentlen) {
 8002af2:	8bfb      	ldrh	r3, [r7, #30]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d107      	bne.n	8002b08 <SMS_getPhonenumb+0x88>
		contentlen = getAfterword(SMSbuffer, SMS_bufferlen, (uint8_t*)"+CMGR: ", contentbuffer);
 8002af8:	8979      	ldrh	r1, [r7, #10]
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	4a0e      	ldr	r2, [pc, #56]	; (8002b38 <SMS_getPhonenumb+0xb8>)
 8002afe:	68f8      	ldr	r0, [r7, #12]
 8002b00:	f7ff ff5a 	bl	80029b8 <getAfterword>
 8002b04:	4603      	mov	r3, r0
 8002b06:	83fb      	strh	r3, [r7, #30]
	}
	if (!contentlen) return 0;
 8002b08:	8bfb      	ldrh	r3, [r7, #30]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d101      	bne.n	8002b12 <SMS_getPhonenumb+0x92>
 8002b0e:	2300      	movs	r3, #0
 8002b10:	e00a      	b.n	8002b28 <SMS_getPhonenumb+0xa8>
//		currPOS = isWordinBuff(contentbuffer, contentlen, (uint8_t*)",");
//		if ( currPOS == NULL ) return	0;
//		remainlen = getRemainsize(currPOS, contentbuffer, contentlen);
//		currPOS++;
//	}
	return getBetween((uint8_t*)"+", (uint8_t*)"\"", contentbuffer, contentlen, Phonenumb_buffer);
 8002b12:	8bfa      	ldrh	r2, [r7, #30]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	9300      	str	r3, [sp, #0]
 8002b18:	4613      	mov	r3, r2
 8002b1a:	697a      	ldr	r2, [r7, #20]
 8002b1c:	4907      	ldr	r1, [pc, #28]	; (8002b3c <SMS_getPhonenumb+0xbc>)
 8002b1e:	4808      	ldr	r0, [pc, #32]	; (8002b40 <SMS_getPhonenumb+0xc0>)
 8002b20:	f002 fc2c 	bl	800537c <getBetween>
 8002b24:	4603      	mov	r3, r0
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	46b5      	mov	sp, r6
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3724      	adds	r7, #36	; 0x24
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002b34:	0800ee9c 	.word	0x0800ee9c
 8002b38:	0800ef78 	.word	0x0800ef78
 8002b3c:	0800ef80 	.word	0x0800ef80
 8002b40:	0800ef84 	.word	0x0800ef84

08002b44 <SMS_getContent>:

uint16_t SMS_getContent (uint8_t *SMSbuffer, uint16_t SMS_bufferlen, uint8_t *Content_buffer )
{
 8002b44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002b48:	b08b      	sub	sp, #44	; 0x2c
 8002b4a:	af02      	add	r7, sp, #8
 8002b4c:	60f8      	str	r0, [r7, #12]
 8002b4e:	460b      	mov	r3, r1
 8002b50:	607a      	str	r2, [r7, #4]
 8002b52:	817b      	strh	r3, [r7, #10]
 8002b54:	466b      	mov	r3, sp
 8002b56:	461e      	mov	r6, r3
	uint8_t contentbuffer[SMS_bufferlen];
 8002b58:	8979      	ldrh	r1, [r7, #10]
 8002b5a:	460b      	mov	r3, r1
 8002b5c:	3b01      	subs	r3, #1
 8002b5e:	61bb      	str	r3, [r7, #24]
 8002b60:	b28b      	uxth	r3, r1
 8002b62:	2200      	movs	r2, #0
 8002b64:	4698      	mov	r8, r3
 8002b66:	4691      	mov	r9, r2
 8002b68:	f04f 0200 	mov.w	r2, #0
 8002b6c:	f04f 0300 	mov.w	r3, #0
 8002b70:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b74:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b78:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b7c:	b28b      	uxth	r3, r1
 8002b7e:	2200      	movs	r2, #0
 8002b80:	461c      	mov	r4, r3
 8002b82:	4615      	mov	r5, r2
 8002b84:	f04f 0200 	mov.w	r2, #0
 8002b88:	f04f 0300 	mov.w	r3, #0
 8002b8c:	00eb      	lsls	r3, r5, #3
 8002b8e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b92:	00e2      	lsls	r2, r4, #3
 8002b94:	460b      	mov	r3, r1
 8002b96:	3307      	adds	r3, #7
 8002b98:	08db      	lsrs	r3, r3, #3
 8002b9a:	00db      	lsls	r3, r3, #3
 8002b9c:	ebad 0d03 	sub.w	sp, sp, r3
 8002ba0:	ab02      	add	r3, sp, #8
 8002ba2:	3300      	adds	r3, #0
 8002ba4:	617b      	str	r3, [r7, #20]
	uint16_t contentlen = getAfterword(SMSbuffer, SMS_bufferlen, (uint8_t*)"+CMGL: ", contentbuffer);
 8002ba6:	8979      	ldrh	r1, [r7, #10]
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	4a13      	ldr	r2, [pc, #76]	; (8002bf8 <SMS_getContent+0xb4>)
 8002bac:	68f8      	ldr	r0, [r7, #12]
 8002bae:	f7ff ff03 	bl	80029b8 <getAfterword>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	83fb      	strh	r3, [r7, #30]
	if (!contentlen) {
 8002bb6:	8bfb      	ldrh	r3, [r7, #30]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d107      	bne.n	8002bcc <SMS_getContent+0x88>
		contentlen = getAfterword(SMSbuffer, SMS_bufferlen, (uint8_t*)"+CMGR: ", contentbuffer);
 8002bbc:	8979      	ldrh	r1, [r7, #10]
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	4a0e      	ldr	r2, [pc, #56]	; (8002bfc <SMS_getContent+0xb8>)
 8002bc2:	68f8      	ldr	r0, [r7, #12]
 8002bc4:	f7ff fef8 	bl	80029b8 <getAfterword>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	83fb      	strh	r3, [r7, #30]
	}
	if (!contentlen) return 0;
 8002bcc:	8bfb      	ldrh	r3, [r7, #30]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d101      	bne.n	8002bd6 <SMS_getContent+0x92>
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	e009      	b.n	8002bea <SMS_getContent+0xa6>

	return getBetween((uint8_t*)"\n", (uint8_t*)"\r", contentbuffer, contentlen, Content_buffer);
 8002bd6:	8bfa      	ldrh	r2, [r7, #30]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	9300      	str	r3, [sp, #0]
 8002bdc:	4613      	mov	r3, r2
 8002bde:	697a      	ldr	r2, [r7, #20]
 8002be0:	4907      	ldr	r1, [pc, #28]	; (8002c00 <SMS_getContent+0xbc>)
 8002be2:	4808      	ldr	r0, [pc, #32]	; (8002c04 <SMS_getContent+0xc0>)
 8002be4:	f002 fbca 	bl	800537c <getBetween>
 8002be8:	4603      	mov	r3, r0
 8002bea:	46b5      	mov	sp, r6
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	3724      	adds	r7, #36	; 0x24
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002bf6:	bf00      	nop
 8002bf8:	0800ee9c 	.word	0x0800ee9c
 8002bfc:	0800ef78 	.word	0x0800ef78
 8002c00:	0800ef88 	.word	0x0800ef88
 8002c04:	0800ef8c 	.word	0x0800ef8c

08002c08 <SMSaddData>:




uint8_t SMSaddData(SMS_CMD_t smsCMD, uint8_t *contentbuffer, uint16_t contentlen, uint8_t *phonenumb)
{
 8002c08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002c0c:	b093      	sub	sp, #76	; 0x4c
 8002c0e:	af02      	add	r7, sp, #8
 8002c10:	60b9      	str	r1, [r7, #8]
 8002c12:	607b      	str	r3, [r7, #4]
 8002c14:	4603      	mov	r3, r0
 8002c16:	73fb      	strb	r3, [r7, #15]
 8002c18:	4613      	mov	r3, r2
 8002c1a:	81bb      	strh	r3, [r7, #12]
 8002c1c:	466b      	mov	r3, sp
 8002c1e:	461e      	mov	r6, r3
	uint8_t *currPOS;
	uint16_t remainlen;
	uint8_t IDbuffer[contentlen];
 8002c20:	89b9      	ldrh	r1, [r7, #12]
 8002c22:	460b      	mov	r3, r1
 8002c24:	3b01      	subs	r3, #1
 8002c26:	627b      	str	r3, [r7, #36]	; 0x24
 8002c28:	b28b      	uxth	r3, r1
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	4698      	mov	r8, r3
 8002c2e:	4691      	mov	r9, r2
 8002c30:	f04f 0200 	mov.w	r2, #0
 8002c34:	f04f 0300 	mov.w	r3, #0
 8002c38:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c3c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c40:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c44:	b28b      	uxth	r3, r1
 8002c46:	2200      	movs	r2, #0
 8002c48:	461c      	mov	r4, r3
 8002c4a:	4615      	mov	r5, r2
 8002c4c:	f04f 0200 	mov.w	r2, #0
 8002c50:	f04f 0300 	mov.w	r3, #0
 8002c54:	00eb      	lsls	r3, r5, #3
 8002c56:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c5a:	00e2      	lsls	r2, r4, #3
 8002c5c:	460b      	mov	r3, r1
 8002c5e:	3307      	adds	r3, #7
 8002c60:	08db      	lsrs	r3, r3, #3
 8002c62:	00db      	lsls	r3, r3, #3
 8002c64:	ebad 0d03 	sub.w	sp, sp, r3
 8002c68:	ab02      	add	r3, sp, #8
 8002c6a:	3300      	adds	r3, #0
 8002c6c:	623b      	str	r3, [r7, #32]
	uint8_t Timebuffer[10];
	uint16_t time_delay;
	uint16_t datalen = 0;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	877b      	strh	r3, [r7, #58]	; 0x3a
	uint8_t phonenumblen = strlen((char*)phonenumb);
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f7fd fa74 	bl	8000160 <strlen>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	77fb      	strb	r3, [r7, #31]

	uint8_t *Detect_msgType;
	SMS_request_t *Detect_Request;
	uint8_t getIDflag = 0;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t getTimeflag = 0;
 8002c82:	2300      	movs	r3, #0
 8002c84:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint8_t getSflag = 0;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	ID_t idtype = ID_STATION;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	switch (smsCMD)	{
 8002c94:	7bfb      	ldrb	r3, [r7, #15]
 8002c96:	2b07      	cmp	r3, #7
 8002c98:	d864      	bhi.n	8002d64 <SMSaddData+0x15c>
 8002c9a:	a201      	add	r2, pc, #4	; (adr r2, 8002ca0 <SMSaddData+0x98>)
 8002c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ca0:	08002cc1 	.word	0x08002cc1
 8002ca4:	08002cd7 	.word	0x08002cd7
 8002ca8:	08002d19 	.word	0x08002d19
 8002cac:	08002d03 	.word	0x08002d03
 8002cb0:	08002ced 	.word	0x08002ced
 8002cb4:	08002d29 	.word	0x08002d29
 8002cb8:	08002d49 	.word	0x08002d49
 8002cbc:	08002d33 	.word	0x08002d33
		case SMS_CMD_CTRL_ON:
			Detect_msgType = (uint8_t*)SMS_MSG_CTRL_ON;
 8002cc0:	4b75      	ldr	r3, [pc, #468]	; (8002e98 <SMSaddData+0x290>)
 8002cc2:	63fb      	str	r3, [r7, #60]	; 0x3c
			Detect_Request = &mySIM.sms.CtrlON;
 8002cc4:	4b75      	ldr	r3, [pc, #468]	; (8002e9c <SMSaddData+0x294>)
 8002cc6:	633b      	str	r3, [r7, #48]	; 0x30
			getIDflag = 1;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			getTimeflag = 1;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			break;
 8002cd4:	e047      	b.n	8002d66 <SMSaddData+0x15e>
		case SMS_CMD_CTRL_OFF:
			Detect_msgType = (uint8_t*)SMS_MSG_CTRL_OFF;
 8002cd6:	4b72      	ldr	r3, [pc, #456]	; (8002ea0 <SMSaddData+0x298>)
 8002cd8:	63fb      	str	r3, [r7, #60]	; 0x3c
			Detect_Request = &mySIM.sms.CtrlOFF;
 8002cda:	4b72      	ldr	r3, [pc, #456]	; (8002ea4 <SMSaddData+0x29c>)
 8002cdc:	633b      	str	r3, [r7, #48]	; 0x30
			getIDflag = 1;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			getTimeflag = 1;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			break;
 8002cea:	e03c      	b.n	8002d66 <SMSaddData+0x15e>
		case SMS_CMD_CTRL_DEC:
			Detect_msgType = (uint8_t*)SMS_MSG_CTRL_DEC;
 8002cec:	4b6e      	ldr	r3, [pc, #440]	; (8002ea8 <SMSaddData+0x2a0>)
 8002cee:	63fb      	str	r3, [r7, #60]	; 0x3c
			Detect_Request = &mySIM.sms.CtrlDEC;
 8002cf0:	4b6e      	ldr	r3, [pc, #440]	; (8002eac <SMSaddData+0x2a4>)
 8002cf2:	633b      	str	r3, [r7, #48]	; 0x30
			getIDflag = 1;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			getTimeflag = 1;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			break;
 8002d00:	e031      	b.n	8002d66 <SMSaddData+0x15e>
		case SMS_CMD_CTRL_INC:
			Detect_msgType = (uint8_t*)SMS_MSG_CTRL_INC;
 8002d02:	4b6b      	ldr	r3, [pc, #428]	; (8002eb0 <SMSaddData+0x2a8>)
 8002d04:	63fb      	str	r3, [r7, #60]	; 0x3c
			Detect_Request = &mySIM.sms.CtrlINC;
 8002d06:	4b6b      	ldr	r3, [pc, #428]	; (8002eb4 <SMSaddData+0x2ac>)
 8002d08:	633b      	str	r3, [r7, #48]	; 0x30
			getIDflag = 1;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			getTimeflag = 1;
 8002d10:	2301      	movs	r3, #1
 8002d12:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			break;
 8002d16:	e026      	b.n	8002d66 <SMSaddData+0x15e>
		case SMS_CMD_CTRL_CALIB:
			Detect_msgType = (uint8_t*)SMS_MSG_CTRL_CALIB;
 8002d18:	4b67      	ldr	r3, [pc, #412]	; (8002eb8 <SMSaddData+0x2b0>)
 8002d1a:	63fb      	str	r3, [r7, #60]	; 0x3c
			Detect_Request = &mySIM.sms.CtrlCALIB;
 8002d1c:	4b67      	ldr	r3, [pc, #412]	; (8002ebc <SMSaddData+0x2b4>)
 8002d1e:	633b      	str	r3, [r7, #48]	; 0x30
			getTimeflag = 1;
 8002d20:	2301      	movs	r3, #1
 8002d22:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			break;
 8002d26:	e01e      	b.n	8002d66 <SMSaddData+0x15e>
		case SMS_CMD_GET_STATUS:
			Detect_msgType = (uint8_t*)SMS_MSG_GET_STATUS;
 8002d28:	4b65      	ldr	r3, [pc, #404]	; (8002ec0 <SMSaddData+0x2b8>)
 8002d2a:	63fb      	str	r3, [r7, #60]	; 0x3c
			Detect_Request = &mySIM.sms.GetStatus;
 8002d2c:	4b65      	ldr	r3, [pc, #404]	; (8002ec4 <SMSaddData+0x2bc>)
 8002d2e:	633b      	str	r3, [r7, #48]	; 0x30
			break;
 8002d30:	e019      	b.n	8002d66 <SMSaddData+0x15e>
		case SMS_CMD_GET_STATION:
			Detect_msgType = (uint8_t*)SMS_MSG_GET_STATION;
 8002d32:	4b65      	ldr	r3, [pc, #404]	; (8002ec8 <SMSaddData+0x2c0>)
 8002d34:	63fb      	str	r3, [r7, #60]	; 0x3c
			Detect_Request = &mySIM.sms.GetStation;
 8002d36:	4b65      	ldr	r3, [pc, #404]	; (8002ecc <SMSaddData+0x2c4>)
 8002d38:	633b      	str	r3, [r7, #48]	; 0x30
			getIDflag = 1;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			getSflag = 1;
 8002d40:	2301      	movs	r3, #1
 8002d42:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			break;
 8002d46:	e00e      	b.n	8002d66 <SMSaddData+0x15e>
		case SMS_CMD_GET_SENSOR:
			Detect_msgType = (uint8_t*)SMS_MSG_GET_SENSOR;
 8002d48:	4b61      	ldr	r3, [pc, #388]	; (8002ed0 <SMSaddData+0x2c8>)
 8002d4a:	63fb      	str	r3, [r7, #60]	; 0x3c
			Detect_Request = &mySIM.sms.GetSensor;
 8002d4c:	4b61      	ldr	r3, [pc, #388]	; (8002ed4 <SMSaddData+0x2cc>)
 8002d4e:	633b      	str	r3, [r7, #48]	; 0x30
			getIDflag = 1;
 8002d50:	2301      	movs	r3, #1
 8002d52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			getSflag = 1;
 8002d56:	2301      	movs	r3, #1
 8002d58:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			idtype = ID_SENSOR;
 8002d5c:	2302      	movs	r3, #2
 8002d5e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
			break;
 8002d62:	e000      	b.n	8002d66 <SMSaddData+0x15e>
		default:
			break;
 8002d64:	bf00      	nop
		}
	if (Detect_msgType == NULL)	return 0;
 8002d66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d101      	bne.n	8002d70 <SMSaddData+0x168>
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	e08c      	b.n	8002e8a <SMSaddData+0x282>

	currPOS = isWordinBuff(contentbuffer, contentlen, (uint8_t*)Detect_msgType);
 8002d70:	89bb      	ldrh	r3, [r7, #12]
 8002d72:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002d74:	4619      	mov	r1, r3
 8002d76:	68b8      	ldr	r0, [r7, #8]
 8002d78:	f002 fad4 	bl	8005324 <isWordinBuff>
 8002d7c:	6378      	str	r0, [r7, #52]	; 0x34
	if (currPOS == NULL) 	return 0;
 8002d7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d101      	bne.n	8002d88 <SMSaddData+0x180>
 8002d84:	2300      	movs	r3, #0
 8002d86:	e080      	b.n	8002e8a <SMSaddData+0x282>

	remainlen = getRemainsize(currPOS, contentbuffer, contentlen);
 8002d88:	89bb      	ldrh	r3, [r7, #12]
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	68b9      	ldr	r1, [r7, #8]
 8002d8e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002d90:	f002 fb47 	bl	8005422 <getRemainsize>
 8002d94:	4603      	mov	r3, r0
 8002d96:	873b      	strh	r3, [r7, #56]	; 0x38

	/* Get ID list */
	if (getIDflag)	{
 8002d98:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d039      	beq.n	8002e14 <SMSaddData+0x20c>
		uint8_t tmplen;
		if (getSflag)	{
 8002da0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d00c      	beq.n	8002dc2 <SMSaddData+0x1ba>
			tmplen = getBetween((uint8_t*)":", (uint8_t*)";", currPOS, remainlen, IDbuffer);
 8002da8:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8002daa:	6a3b      	ldr	r3, [r7, #32]
 8002dac:	9300      	str	r3, [sp, #0]
 8002dae:	4613      	mov	r3, r2
 8002db0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002db2:	4949      	ldr	r1, [pc, #292]	; (8002ed8 <SMSaddData+0x2d0>)
 8002db4:	4849      	ldr	r0, [pc, #292]	; (8002edc <SMSaddData+0x2d4>)
 8002db6:	f002 fae1 	bl	800537c <getBetween>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002dc0:	e00b      	b.n	8002dda <SMSaddData+0x1d2>
		}
		else {
			tmplen = getBetween((uint8_t*)":", (uint8_t*)":", currPOS, remainlen, IDbuffer);
 8002dc2:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8002dc4:	6a3b      	ldr	r3, [r7, #32]
 8002dc6:	9300      	str	r3, [sp, #0]
 8002dc8:	4613      	mov	r3, r2
 8002dca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002dcc:	4943      	ldr	r1, [pc, #268]	; (8002edc <SMSaddData+0x2d4>)
 8002dce:	4843      	ldr	r0, [pc, #268]	; (8002edc <SMSaddData+0x2d4>)
 8002dd0:	f002 fad4 	bl	800537c <getBetween>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		}
		currPOS += strlen((char*)Detect_msgType) + tmplen + 1;
 8002dda:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002ddc:	f7fd f9c0 	bl	8000160 <strlen>
 8002de0:	4602      	mov	r2, r0
 8002de2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002de6:	4413      	add	r3, r2
 8002de8:	3301      	adds	r3, #1
 8002dea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002dec:	4413      	add	r3, r2
 8002dee:	637b      	str	r3, [r7, #52]	; 0x34
		remainlen = getRemainsize(currPOS, contentbuffer, contentlen);
 8002df0:	89bb      	ldrh	r3, [r7, #12]
 8002df2:	461a      	mov	r2, r3
 8002df4:	68b9      	ldr	r1, [r7, #8]
 8002df6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002df8:	f002 fb13 	bl	8005422 <getRemainsize>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	873b      	strh	r3, [r7, #56]	; 0x38
		datalen = stringIDtoHexID(IDbuffer, Detect_Request->data, ",", idtype);
 8002e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e02:	1d19      	adds	r1, r3, #4
 8002e04:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002e08:	4a35      	ldr	r2, [pc, #212]	; (8002ee0 <SMSaddData+0x2d8>)
 8002e0a:	6a38      	ldr	r0, [r7, #32]
 8002e0c:	f7ff fe04 	bl	8002a18 <stringIDtoHexID>
 8002e10:	4603      	mov	r3, r0
 8002e12:	877b      	strh	r3, [r7, #58]	; 0x3a
	}

	/* Get time delay*/
	if (getTimeflag)	{
 8002e14:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d01c      	beq.n	8002e56 <SMSaddData+0x24e>
		getBetween((uint8_t*)":", (uint8_t*)";", currPOS, remainlen, Timebuffer);
 8002e1c:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8002e1e:	f107 0310 	add.w	r3, r7, #16
 8002e22:	9300      	str	r3, [sp, #0]
 8002e24:	4613      	mov	r3, r2
 8002e26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e28:	492b      	ldr	r1, [pc, #172]	; (8002ed8 <SMSaddData+0x2d0>)
 8002e2a:	482c      	ldr	r0, [pc, #176]	; (8002edc <SMSaddData+0x2d4>)
 8002e2c:	f002 faa6 	bl	800537c <getBetween>
		time_delay = atoi((char*)Timebuffer);
 8002e30:	f107 0310 	add.w	r3, r7, #16
 8002e34:	4618      	mov	r0, r3
 8002e36:	f009 f8c1 	bl	800bfbc <atoi>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	83bb      	strh	r3, [r7, #28]
		twobyte2buff(Detect_Request->data +datalen, time_delay);
 8002e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e40:	1d1a      	adds	r2, r3, #4
 8002e42:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8002e44:	4413      	add	r3, r2
 8002e46:	8bba      	ldrh	r2, [r7, #28]
 8002e48:	4611      	mov	r1, r2
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f002 fafc 	bl	8005448 <twobyte2buff>
		datalen += 2;
 8002e50:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8002e52:	3302      	adds	r3, #2
 8002e54:	877b      	strh	r3, [r7, #58]	; 0x3a
	}
	memcpy(Detect_Request->phonenumb, phonenumb, phonenumblen);
 8002e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e58:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8002e5c:	7ffa      	ldrb	r2, [r7, #31]
 8002e5e:	6879      	ldr	r1, [r7, #4]
 8002e60:	4618      	mov	r0, r3
 8002e62:	f009 fa09 	bl	800c278 <memcpy>
	memcpy(Detect_Request->data + datalen, phonenumb, phonenumblen);
 8002e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e68:	1d1a      	adds	r2, r3, #4
 8002e6a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8002e6c:	4413      	add	r3, r2
 8002e6e:	7ffa      	ldrb	r2, [r7, #31]
 8002e70:	6879      	ldr	r1, [r7, #4]
 8002e72:	4618      	mov	r0, r3
 8002e74:	f009 fa00 	bl	800c278 <memcpy>
	datalen += phonenumblen;
 8002e78:	7ffb      	ldrb	r3, [r7, #31]
 8002e7a:	b29a      	uxth	r2, r3
 8002e7c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8002e7e:	4413      	add	r3, r2
 8002e80:	877b      	strh	r3, [r7, #58]	; 0x3a
	Detect_Request->datalength = datalen;
 8002e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e84:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8002e86:	805a      	strh	r2, [r3, #2]
	return 1;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	46b5      	mov	sp, r6
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3744      	adds	r7, #68	; 0x44
 8002e90:	46bd      	mov	sp, r7
 8002e92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002e96:	bf00      	nop
 8002e98:	0800ef90 	.word	0x0800ef90
 8002e9c:	200018c0 	.word	0x200018c0
 8002ea0:	0800ef98 	.word	0x0800ef98
 8002ea4:	200019d2 	.word	0x200019d2
 8002ea8:	0800efa4 	.word	0x0800efa4
 8002eac:	20001d08 	.word	0x20001d08
 8002eb0:	0800efb0 	.word	0x0800efb0
 8002eb4:	20001bf6 	.word	0x20001bf6
 8002eb8:	0800efbc 	.word	0x0800efbc
 8002ebc:	20001ae4 	.word	0x20001ae4
 8002ec0:	0800efc8 	.word	0x0800efc8
 8002ec4:	20001e1a 	.word	0x20001e1a
 8002ec8:	0800efd8 	.word	0x0800efd8
 8002ecc:	2000203e 	.word	0x2000203e
 8002ed0:	0800efe4 	.word	0x0800efe4
 8002ed4:	20001f2c 	.word	0x20001f2c
 8002ed8:	0800eff0 	.word	0x0800eff0
 8002edc:	0800eff4 	.word	0x0800eff4
 8002ee0:	0800ef70 	.word	0x0800ef70

08002ee4 <SMS_checkCMD>:
static uint8_t SMS_checkCMD(uint8_t *contentbuffer, uint16_t contentlen, uint8_t *phonenumb)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b086      	sub	sp, #24
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	60f8      	str	r0, [r7, #12]
 8002eec:	460b      	mov	r3, r1
 8002eee:	607a      	str	r2, [r7, #4]
 8002ef0:	817b      	strh	r3, [r7, #10]
	uint8_t *currPOS;

	currPOS = isWordinBuff(contentbuffer, contentlen, (uint8_t*)SMS_MSG_CTRL_ON);
 8002ef2:	897b      	ldrh	r3, [r7, #10]
 8002ef4:	4a8b      	ldr	r2, [pc, #556]	; (8003124 <SMS_checkCMD+0x240>)
 8002ef6:	4619      	mov	r1, r3
 8002ef8:	68f8      	ldr	r0, [r7, #12]
 8002efa:	f002 fa13 	bl	8005324 <isWordinBuff>
 8002efe:	6178      	str	r0, [r7, #20]
	if (currPOS != NULL) 	{
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d018      	beq.n	8002f38 <SMS_checkCMD+0x54>
		if (checkSMSrequest(SMS_CMD_CTRL_ON)) return 2;
 8002f06:	2000      	movs	r0, #0
 8002f08:	f000 f9ee 	bl	80032e8 <checkSMSrequest>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d001      	beq.n	8002f16 <SMS_checkCMD+0x32>
 8002f12:	2302      	movs	r3, #2
 8002f14:	e101      	b.n	800311a <SMS_checkCMD+0x236>
		if ( !SMSaddData(SMS_CMD_CTRL_ON, contentbuffer, contentlen, phonenumb) ) return 0;
 8002f16:	897a      	ldrh	r2, [r7, #10]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	68f9      	ldr	r1, [r7, #12]
 8002f1c:	2000      	movs	r0, #0
 8002f1e:	f7ff fe73 	bl	8002c08 <SMSaddData>
 8002f22:	4603      	mov	r3, r0
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d101      	bne.n	8002f2c <SMS_checkCMD+0x48>
 8002f28:	2300      	movs	r3, #0
 8002f2a:	e0f6      	b.n	800311a <SMS_checkCMD+0x236>
		// Trigger cmd flag
		triggerSMSrequest(SMS_CMD_CTRL_ON, FLAG_EN);
 8002f2c:	2101      	movs	r1, #1
 8002f2e:	2000      	movs	r0, #0
 8002f30:	f000 fa62 	bl	80033f8 <triggerSMSrequest>
		return 1;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e0f0      	b.n	800311a <SMS_checkCMD+0x236>
	}

	currPOS = isWordinBuff(contentbuffer, contentlen, (uint8_t*)SMS_MSG_CTRL_OFF);
 8002f38:	897b      	ldrh	r3, [r7, #10]
 8002f3a:	4a7b      	ldr	r2, [pc, #492]	; (8003128 <SMS_checkCMD+0x244>)
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	68f8      	ldr	r0, [r7, #12]
 8002f40:	f002 f9f0 	bl	8005324 <isWordinBuff>
 8002f44:	6178      	str	r0, [r7, #20]
	if (currPOS != NULL) 	{
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d018      	beq.n	8002f7e <SMS_checkCMD+0x9a>
		if (checkSMSrequest(SMS_CMD_CTRL_OFF)) return 2;
 8002f4c:	2001      	movs	r0, #1
 8002f4e:	f000 f9cb 	bl	80032e8 <checkSMSrequest>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d001      	beq.n	8002f5c <SMS_checkCMD+0x78>
 8002f58:	2302      	movs	r3, #2
 8002f5a:	e0de      	b.n	800311a <SMS_checkCMD+0x236>
		if ( !SMSaddData(SMS_CMD_CTRL_OFF, contentbuffer, contentlen, phonenumb) )	return 0;
 8002f5c:	897a      	ldrh	r2, [r7, #10]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	68f9      	ldr	r1, [r7, #12]
 8002f62:	2001      	movs	r0, #1
 8002f64:	f7ff fe50 	bl	8002c08 <SMSaddData>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d101      	bne.n	8002f72 <SMS_checkCMD+0x8e>
 8002f6e:	2300      	movs	r3, #0
 8002f70:	e0d3      	b.n	800311a <SMS_checkCMD+0x236>
		// Trigger cmd flag
		triggerSMSrequest(SMS_CMD_CTRL_OFF, FLAG_EN);
 8002f72:	2101      	movs	r1, #1
 8002f74:	2001      	movs	r0, #1
 8002f76:	f000 fa3f 	bl	80033f8 <triggerSMSrequest>
		return 1;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e0cd      	b.n	800311a <SMS_checkCMD+0x236>
	}

	currPOS = isWordinBuff(contentbuffer, contentlen, (uint8_t*)SMS_MSG_CTRL_DEC);
 8002f7e:	897b      	ldrh	r3, [r7, #10]
 8002f80:	4a6a      	ldr	r2, [pc, #424]	; (800312c <SMS_checkCMD+0x248>)
 8002f82:	4619      	mov	r1, r3
 8002f84:	68f8      	ldr	r0, [r7, #12]
 8002f86:	f002 f9cd 	bl	8005324 <isWordinBuff>
 8002f8a:	6178      	str	r0, [r7, #20]
	if (currPOS != NULL) 	{
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d018      	beq.n	8002fc4 <SMS_checkCMD+0xe0>
		if (checkSMSrequest(SMS_CMD_CTRL_DEC)) return 2;
 8002f92:	2004      	movs	r0, #4
 8002f94:	f000 f9a8 	bl	80032e8 <checkSMSrequest>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d001      	beq.n	8002fa2 <SMS_checkCMD+0xbe>
 8002f9e:	2302      	movs	r3, #2
 8002fa0:	e0bb      	b.n	800311a <SMS_checkCMD+0x236>
		if ( !SMSaddData(SMS_CMD_CTRL_DEC, contentbuffer, contentlen, phonenumb) )	return 0;
 8002fa2:	897a      	ldrh	r2, [r7, #10]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	68f9      	ldr	r1, [r7, #12]
 8002fa8:	2004      	movs	r0, #4
 8002faa:	f7ff fe2d 	bl	8002c08 <SMSaddData>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d101      	bne.n	8002fb8 <SMS_checkCMD+0xd4>
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	e0b0      	b.n	800311a <SMS_checkCMD+0x236>
		// Trigger cmd flag
		triggerSMSrequest(SMS_CMD_CTRL_DEC, FLAG_EN);
 8002fb8:	2101      	movs	r1, #1
 8002fba:	2004      	movs	r0, #4
 8002fbc:	f000 fa1c 	bl	80033f8 <triggerSMSrequest>
		return 1;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e0aa      	b.n	800311a <SMS_checkCMD+0x236>
	}

	currPOS = isWordinBuff(contentbuffer, contentlen, (uint8_t*)SMS_MSG_CTRL_INC);
 8002fc4:	897b      	ldrh	r3, [r7, #10]
 8002fc6:	4a5a      	ldr	r2, [pc, #360]	; (8003130 <SMS_checkCMD+0x24c>)
 8002fc8:	4619      	mov	r1, r3
 8002fca:	68f8      	ldr	r0, [r7, #12]
 8002fcc:	f002 f9aa 	bl	8005324 <isWordinBuff>
 8002fd0:	6178      	str	r0, [r7, #20]
	if (currPOS != NULL) 	{
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d013      	beq.n	8003000 <SMS_checkCMD+0x11c>
		if (checkSMSrequest(SMS_CMD_CTRL_INC)) return 2;
 8002fd8:	2003      	movs	r0, #3
 8002fda:	f000 f985 	bl	80032e8 <checkSMSrequest>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d001      	beq.n	8002fe8 <SMS_checkCMD+0x104>
 8002fe4:	2302      	movs	r3, #2
 8002fe6:	e098      	b.n	800311a <SMS_checkCMD+0x236>
		SMSaddData(SMS_CMD_CTRL_INC, contentbuffer, contentlen, phonenumb);
 8002fe8:	897a      	ldrh	r2, [r7, #10]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	68f9      	ldr	r1, [r7, #12]
 8002fee:	2003      	movs	r0, #3
 8002ff0:	f7ff fe0a 	bl	8002c08 <SMSaddData>
		// Trigger cmd flag
		triggerSMSrequest(SMS_CMD_CTRL_INC, FLAG_EN);
 8002ff4:	2101      	movs	r1, #1
 8002ff6:	2003      	movs	r0, #3
 8002ff8:	f000 f9fe 	bl	80033f8 <triggerSMSrequest>
		return 1;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e08c      	b.n	800311a <SMS_checkCMD+0x236>
	}

	currPOS = isWordinBuff(contentbuffer, contentlen, (uint8_t*)SMS_MSG_CTRL_CALIB);
 8003000:	897b      	ldrh	r3, [r7, #10]
 8003002:	4a4c      	ldr	r2, [pc, #304]	; (8003134 <SMS_checkCMD+0x250>)
 8003004:	4619      	mov	r1, r3
 8003006:	68f8      	ldr	r0, [r7, #12]
 8003008:	f002 f98c 	bl	8005324 <isWordinBuff>
 800300c:	6178      	str	r0, [r7, #20]
	if (currPOS != NULL) 	{
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d018      	beq.n	8003046 <SMS_checkCMD+0x162>
		if (checkSMSrequest(SMS_CMD_CTRL_CALIB)) return 2;
 8003014:	2002      	movs	r0, #2
 8003016:	f000 f967 	bl	80032e8 <checkSMSrequest>
 800301a:	4603      	mov	r3, r0
 800301c:	2b00      	cmp	r3, #0
 800301e:	d001      	beq.n	8003024 <SMS_checkCMD+0x140>
 8003020:	2302      	movs	r3, #2
 8003022:	e07a      	b.n	800311a <SMS_checkCMD+0x236>
		if ( !SMSaddData(SMS_CMD_CTRL_CALIB, contentbuffer, contentlen, phonenumb) )	return 0;
 8003024:	897a      	ldrh	r2, [r7, #10]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	68f9      	ldr	r1, [r7, #12]
 800302a:	2002      	movs	r0, #2
 800302c:	f7ff fdec 	bl	8002c08 <SMSaddData>
 8003030:	4603      	mov	r3, r0
 8003032:	2b00      	cmp	r3, #0
 8003034:	d101      	bne.n	800303a <SMS_checkCMD+0x156>
 8003036:	2300      	movs	r3, #0
 8003038:	e06f      	b.n	800311a <SMS_checkCMD+0x236>
		// Trigger cmd flag
		triggerSMSrequest(SMS_CMD_CTRL_CALIB, FLAG_EN);
 800303a:	2101      	movs	r1, #1
 800303c:	2002      	movs	r0, #2
 800303e:	f000 f9db 	bl	80033f8 <triggerSMSrequest>
		return 1;
 8003042:	2301      	movs	r3, #1
 8003044:	e069      	b.n	800311a <SMS_checkCMD+0x236>
	}

	currPOS = isWordinBuff(contentbuffer, contentlen, (uint8_t*)SMS_MSG_GET_STATUS);
 8003046:	897b      	ldrh	r3, [r7, #10]
 8003048:	4a3b      	ldr	r2, [pc, #236]	; (8003138 <SMS_checkCMD+0x254>)
 800304a:	4619      	mov	r1, r3
 800304c:	68f8      	ldr	r0, [r7, #12]
 800304e:	f002 f969 	bl	8005324 <isWordinBuff>
 8003052:	6178      	str	r0, [r7, #20]
	if (currPOS != NULL) 	{
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d018      	beq.n	800308c <SMS_checkCMD+0x1a8>
		if (checkSMSrequest(SMS_CMD_GET_STATUS)) return 2;
 800305a:	2005      	movs	r0, #5
 800305c:	f000 f944 	bl	80032e8 <checkSMSrequest>
 8003060:	4603      	mov	r3, r0
 8003062:	2b00      	cmp	r3, #0
 8003064:	d001      	beq.n	800306a <SMS_checkCMD+0x186>
 8003066:	2302      	movs	r3, #2
 8003068:	e057      	b.n	800311a <SMS_checkCMD+0x236>
		if ( !SMSaddData(SMS_CMD_GET_STATUS, contentbuffer, contentlen, phonenumb) )	return 0;
 800306a:	897a      	ldrh	r2, [r7, #10]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	68f9      	ldr	r1, [r7, #12]
 8003070:	2005      	movs	r0, #5
 8003072:	f7ff fdc9 	bl	8002c08 <SMSaddData>
 8003076:	4603      	mov	r3, r0
 8003078:	2b00      	cmp	r3, #0
 800307a:	d101      	bne.n	8003080 <SMS_checkCMD+0x19c>
 800307c:	2300      	movs	r3, #0
 800307e:	e04c      	b.n	800311a <SMS_checkCMD+0x236>
		// Trigger cmd flag
		triggerSMSrequest(SMS_CMD_GET_STATUS, FLAG_EN);
 8003080:	2101      	movs	r1, #1
 8003082:	2005      	movs	r0, #5
 8003084:	f000 f9b8 	bl	80033f8 <triggerSMSrequest>
//		triggerSMSreturn(SMS_CMD_GET_STATUS, FLAG_EN);
		return 1;
 8003088:	2301      	movs	r3, #1
 800308a:	e046      	b.n	800311a <SMS_checkCMD+0x236>
	}

	currPOS = isWordinBuff(contentbuffer, contentlen, (uint8_t*)SMS_MSG_GET_STATION);
 800308c:	897b      	ldrh	r3, [r7, #10]
 800308e:	4a2b      	ldr	r2, [pc, #172]	; (800313c <SMS_checkCMD+0x258>)
 8003090:	4619      	mov	r1, r3
 8003092:	68f8      	ldr	r0, [r7, #12]
 8003094:	f002 f946 	bl	8005324 <isWordinBuff>
 8003098:	6178      	str	r0, [r7, #20]
	if (currPOS != NULL) 	{
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d018      	beq.n	80030d2 <SMS_checkCMD+0x1ee>
		if (checkSMSrequest(SMS_CMD_GET_STATION)) return 2;
 80030a0:	2007      	movs	r0, #7
 80030a2:	f000 f921 	bl	80032e8 <checkSMSrequest>
 80030a6:	4603      	mov	r3, r0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d001      	beq.n	80030b0 <SMS_checkCMD+0x1cc>
 80030ac:	2302      	movs	r3, #2
 80030ae:	e034      	b.n	800311a <SMS_checkCMD+0x236>
		if ( !SMSaddData(SMS_CMD_GET_STATION, contentbuffer, contentlen, phonenumb) ) return 0;
 80030b0:	897a      	ldrh	r2, [r7, #10]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	68f9      	ldr	r1, [r7, #12]
 80030b6:	2007      	movs	r0, #7
 80030b8:	f7ff fda6 	bl	8002c08 <SMSaddData>
 80030bc:	4603      	mov	r3, r0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d101      	bne.n	80030c6 <SMS_checkCMD+0x1e2>
 80030c2:	2300      	movs	r3, #0
 80030c4:	e029      	b.n	800311a <SMS_checkCMD+0x236>
		// Trigger cmd flag
		triggerSMSrequest(SMS_CMD_GET_STATION, FLAG_EN);
 80030c6:	2101      	movs	r1, #1
 80030c8:	2007      	movs	r0, #7
 80030ca:	f000 f995 	bl	80033f8 <triggerSMSrequest>
//		triggerSMSreturn(SMS_CMD_GET_STATION, FLAG_EN);
		return 1;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e023      	b.n	800311a <SMS_checkCMD+0x236>
	}

	currPOS = isWordinBuff(contentbuffer, contentlen, (uint8_t*)SMS_MSG_GET_SENSOR);
 80030d2:	897b      	ldrh	r3, [r7, #10]
 80030d4:	4a1a      	ldr	r2, [pc, #104]	; (8003140 <SMS_checkCMD+0x25c>)
 80030d6:	4619      	mov	r1, r3
 80030d8:	68f8      	ldr	r0, [r7, #12]
 80030da:	f002 f923 	bl	8005324 <isWordinBuff>
 80030de:	6178      	str	r0, [r7, #20]
	if (currPOS != NULL) 	{
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d018      	beq.n	8003118 <SMS_checkCMD+0x234>
		if (checkSMSrequest(SMS_CMD_GET_SENSOR)) return 2;
 80030e6:	2006      	movs	r0, #6
 80030e8:	f000 f8fe 	bl	80032e8 <checkSMSrequest>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d001      	beq.n	80030f6 <SMS_checkCMD+0x212>
 80030f2:	2302      	movs	r3, #2
 80030f4:	e011      	b.n	800311a <SMS_checkCMD+0x236>
		if ( !SMSaddData(SMS_CMD_GET_SENSOR, contentbuffer, contentlen, phonenumb) ) return 0;
 80030f6:	897a      	ldrh	r2, [r7, #10]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	68f9      	ldr	r1, [r7, #12]
 80030fc:	2006      	movs	r0, #6
 80030fe:	f7ff fd83 	bl	8002c08 <SMSaddData>
 8003102:	4603      	mov	r3, r0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d101      	bne.n	800310c <SMS_checkCMD+0x228>
 8003108:	2300      	movs	r3, #0
 800310a:	e006      	b.n	800311a <SMS_checkCMD+0x236>
		// Trigger cmd flag
		triggerSMSrequest(SMS_CMD_GET_SENSOR, FLAG_EN);
 800310c:	2101      	movs	r1, #1
 800310e:	2006      	movs	r0, #6
 8003110:	f000 f972 	bl	80033f8 <triggerSMSrequest>
//		triggerSMSreturn(SMS_CMD_GET_SENSOR, FLAG_EN);
		return 1;
 8003114:	2301      	movs	r3, #1
 8003116:	e000      	b.n	800311a <SMS_checkCMD+0x236>
	}
	return 0;
 8003118:	2300      	movs	r3, #0
}
 800311a:	4618      	mov	r0, r3
 800311c:	3718      	adds	r7, #24
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
 8003122:	bf00      	nop
 8003124:	0800ef90 	.word	0x0800ef90
 8003128:	0800ef98 	.word	0x0800ef98
 800312c:	0800efa4 	.word	0x0800efa4
 8003130:	0800efb0 	.word	0x0800efb0
 8003134:	0800efbc 	.word	0x0800efbc
 8003138:	0800efc8 	.word	0x0800efc8
 800313c:	0800efd8 	.word	0x0800efd8
 8003140:	0800efe4 	.word	0x0800efe4

08003144 <SMS_read>:

uint8_t SMS_read()
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b082      	sub	sp, #8
 8003148:	af02      	add	r7, sp, #8
	if ( SIM_sendCMD((uint8_t*)"AT+CMGL=\"REC UNREAD\"", (uint8_t*)"OK",ENABLE_SIM_CHECKRES,
 800314a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800314e:	9300      	str	r3, [sp, #0]
 8003150:	2301      	movs	r3, #1
 8003152:	2201      	movs	r2, #1
 8003154:	490d      	ldr	r1, [pc, #52]	; (800318c <SMS_read+0x48>)
 8003156:	480e      	ldr	r0, [pc, #56]	; (8003190 <SMS_read+0x4c>)
 8003158:	f7ff fb70 	bl	800283c <SIM_sendCMD>
 800315c:	4603      	mov	r3, r0
 800315e:	2b01      	cmp	r3, #1
 8003160:	d010      	beq.n	8003184 <SMS_read+0x40>
			ENABLE_MARKASREAD, 1000) != SIM_RES_MSG )	{
		if ( SIM_sendCMD((uint8_t*)"AT+CMGL=\"REC UNREAD\"", (uint8_t*)"OK",ENABLE_SIM_CHECKRES,
 8003162:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003166:	9300      	str	r3, [sp, #0]
 8003168:	2301      	movs	r3, #1
 800316a:	2201      	movs	r2, #1
 800316c:	4907      	ldr	r1, [pc, #28]	; (800318c <SMS_read+0x48>)
 800316e:	4808      	ldr	r0, [pc, #32]	; (8003190 <SMS_read+0x4c>)
 8003170:	f7ff fb64 	bl	800283c <SIM_sendCMD>
 8003174:	4603      	mov	r3, r0
 8003176:	2b01      	cmp	r3, #1
 8003178:	d002      	beq.n	8003180 <SMS_read+0x3c>
					ENABLE_MARKASREAD, 1000) != SIM_RES_MSG )
		newSMS = 0;
 800317a:	4b06      	ldr	r3, [pc, #24]	; (8003194 <SMS_read+0x50>)
 800317c:	2200      	movs	r2, #0
 800317e:	701a      	strb	r2, [r3, #0]
		return 0;
 8003180:	2300      	movs	r3, #0
 8003182:	e000      	b.n	8003186 <SMS_read+0x42>
	}
	return 1;
 8003184:	2301      	movs	r3, #1
}
 8003186:	4618      	mov	r0, r3
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}
 800318c:	0800ef4c 	.word	0x0800ef4c
 8003190:	0800ef50 	.word	0x0800ef50
 8003194:	20001364 	.word	0x20001364

08003198 <processingSMS>:
		return 0;
	}
	return 1;
}
uint8_t processingSMS(void)
{
 8003198:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800319c:	b089      	sub	sp, #36	; 0x24
 800319e:	af02      	add	r7, sp, #8
 80031a0:	466b      	mov	r3, sp
 80031a2:	461e      	mov	r6, r3

	if (!newSMS) return 0;
 80031a4:	4b4b      	ldr	r3, [pc, #300]	; (80032d4 <processingSMS+0x13c>)
 80031a6:	781b      	ldrb	r3, [r3, #0]
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d101      	bne.n	80031b2 <processingSMS+0x1a>
 80031ae:	2300      	movs	r3, #0
 80031b0:	e08a      	b.n	80032c8 <processingSMS+0x130>

//	static uint8_t readagain = 0;
//	static uint16_t SMSindex = 0;

	MarkAsReadData_SIM();
 80031b2:	f7ff fbf3 	bl	800299c <MarkAsReadData_SIM>
//	if ( readagain ) 	{
//		SMS_readAgain(SMSindex);
//	}
//	else 	{
		SMS_read();
 80031b6:	f7ff ffc5 	bl	8003144 <SMS_read>
//		newSMS = 0;
//		return 0;
//	}
	//Get phone number
	uint8_t phonenumb[PHONENUMB_LEN];
	if ( !SMS_getPhonenumb(SMS_Rxbuff, SMS_len, phonenumb) ) {
 80031ba:	4b47      	ldr	r3, [pc, #284]	; (80032d8 <processingSMS+0x140>)
 80031bc:	881b      	ldrh	r3, [r3, #0]
 80031be:	463a      	mov	r2, r7
 80031c0:	4619      	mov	r1, r3
 80031c2:	4846      	ldr	r0, [pc, #280]	; (80032dc <processingSMS+0x144>)
 80031c4:	f7ff fc5c 	bl	8002a80 <SMS_getPhonenumb>
 80031c8:	4603      	mov	r3, r0
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d10d      	bne.n	80031ea <processingSMS+0x52>
		SIM_sendCMD((uint8_t*)"AT+CMGD=1,1", (uint8_t*)"OK",
 80031ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80031d2:	9300      	str	r3, [sp, #0]
 80031d4:	2301      	movs	r3, #1
 80031d6:	2201      	movs	r2, #1
 80031d8:	4941      	ldr	r1, [pc, #260]	; (80032e0 <processingSMS+0x148>)
 80031da:	4842      	ldr	r0, [pc, #264]	; (80032e4 <processingSMS+0x14c>)
 80031dc:	f7ff fb2e 	bl	800283c <SIM_sendCMD>
					ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, 1000);
		newSMS = 0;
 80031e0:	4b3c      	ldr	r3, [pc, #240]	; (80032d4 <processingSMS+0x13c>)
 80031e2:	2200      	movs	r2, #0
 80031e4:	701a      	strb	r2, [r3, #0]
		return 0;
 80031e6:	2300      	movs	r3, #0
 80031e8:	e06e      	b.n	80032c8 <processingSMS+0x130>
	}
	//Get SMS content
	uint8_t tmpSMSdatabuffer[SMS_len];
 80031ea:	4b3b      	ldr	r3, [pc, #236]	; (80032d8 <processingSMS+0x140>)
 80031ec:	8819      	ldrh	r1, [r3, #0]
 80031ee:	460b      	mov	r3, r1
 80031f0:	3b01      	subs	r3, #1
 80031f2:	617b      	str	r3, [r7, #20]
 80031f4:	b28b      	uxth	r3, r1
 80031f6:	2200      	movs	r2, #0
 80031f8:	4698      	mov	r8, r3
 80031fa:	4691      	mov	r9, r2
 80031fc:	f04f 0200 	mov.w	r2, #0
 8003200:	f04f 0300 	mov.w	r3, #0
 8003204:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003208:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800320c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003210:	b28b      	uxth	r3, r1
 8003212:	2200      	movs	r2, #0
 8003214:	461c      	mov	r4, r3
 8003216:	4615      	mov	r5, r2
 8003218:	f04f 0200 	mov.w	r2, #0
 800321c:	f04f 0300 	mov.w	r3, #0
 8003220:	00eb      	lsls	r3, r5, #3
 8003222:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003226:	00e2      	lsls	r2, r4, #3
 8003228:	460b      	mov	r3, r1
 800322a:	3307      	adds	r3, #7
 800322c:	08db      	lsrs	r3, r3, #3
 800322e:	00db      	lsls	r3, r3, #3
 8003230:	ebad 0d03 	sub.w	sp, sp, r3
 8003234:	ab02      	add	r3, sp, #8
 8003236:	3300      	adds	r3, #0
 8003238:	613b      	str	r3, [r7, #16]
	memset(tmpSMSdatabuffer, 0, SMS_len);
 800323a:	4b27      	ldr	r3, [pc, #156]	; (80032d8 <processingSMS+0x140>)
 800323c:	881b      	ldrh	r3, [r3, #0]
 800323e:	461a      	mov	r2, r3
 8003240:	2100      	movs	r1, #0
 8003242:	6938      	ldr	r0, [r7, #16]
 8003244:	f009 f826 	bl	800c294 <memset>
	uint16_t contentlen = SMS_getContent(SMS_Rxbuff, SMS_len, tmpSMSdatabuffer);
 8003248:	4b23      	ldr	r3, [pc, #140]	; (80032d8 <processingSMS+0x140>)
 800324a:	881b      	ldrh	r3, [r3, #0]
 800324c:	693a      	ldr	r2, [r7, #16]
 800324e:	4619      	mov	r1, r3
 8003250:	4822      	ldr	r0, [pc, #136]	; (80032dc <processingSMS+0x144>)
 8003252:	f7ff fc77 	bl	8002b44 <SMS_getContent>
 8003256:	4603      	mov	r3, r0
 8003258:	81fb      	strh	r3, [r7, #14]
//	MQTT_publish((uint8_t*)TOPIC_PUB , tmpSMSdatabuffer, contentlen);
	if ( !contentlen)	{
 800325a:	89fb      	ldrh	r3, [r7, #14]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d10d      	bne.n	800327c <processingSMS+0xe4>
		SIM_sendCMD((uint8_t*)"AT+CMGD=1,1", (uint8_t*)"OK",
 8003260:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003264:	9300      	str	r3, [sp, #0]
 8003266:	2301      	movs	r3, #1
 8003268:	2201      	movs	r2, #1
 800326a:	491d      	ldr	r1, [pc, #116]	; (80032e0 <processingSMS+0x148>)
 800326c:	481d      	ldr	r0, [pc, #116]	; (80032e4 <processingSMS+0x14c>)
 800326e:	f7ff fae5 	bl	800283c <SIM_sendCMD>
					ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, 1000);
		newSMS = 0;
 8003272:	4b18      	ldr	r3, [pc, #96]	; (80032d4 <processingSMS+0x13c>)
 8003274:	2200      	movs	r2, #0
 8003276:	701a      	strb	r2, [r3, #0]
		return 0;
 8003278:	2300      	movs	r3, #0
 800327a:	e025      	b.n	80032c8 <processingSMS+0x130>
	}
	//Check SMS command
	uint8_t checkres = SMS_checkCMD(tmpSMSdatabuffer, contentlen, phonenumb);
 800327c:	463a      	mov	r2, r7
 800327e:	89fb      	ldrh	r3, [r7, #14]
 8003280:	4619      	mov	r1, r3
 8003282:	6938      	ldr	r0, [r7, #16]
 8003284:	f7ff fe2e 	bl	8002ee4 <SMS_checkCMD>
 8003288:	4603      	mov	r3, r0
 800328a:	737b      	strb	r3, [r7, #13]
	if ( !checkres ) 	{
 800328c:	7b7b      	ldrb	r3, [r7, #13]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d10d      	bne.n	80032ae <processingSMS+0x116>
		SIM_sendCMD((uint8_t*)"AT+CMGD=1,1", (uint8_t*)"OK",
 8003292:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003296:	9300      	str	r3, [sp, #0]
 8003298:	2301      	movs	r3, #1
 800329a:	2201      	movs	r2, #1
 800329c:	4910      	ldr	r1, [pc, #64]	; (80032e0 <processingSMS+0x148>)
 800329e:	4811      	ldr	r0, [pc, #68]	; (80032e4 <processingSMS+0x14c>)
 80032a0:	f7ff facc 	bl	800283c <SIM_sendCMD>
					ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, 1000);
		newSMS = 0;
 80032a4:	4b0b      	ldr	r3, [pc, #44]	; (80032d4 <processingSMS+0x13c>)
 80032a6:	2200      	movs	r2, #0
 80032a8:	701a      	strb	r2, [r3, #0]
		return 0;
 80032aa:	2300      	movs	r3, #0
 80032ac:	e00c      	b.n	80032c8 <processingSMS+0x130>
	}
//	if ( checkres == 2 )	{
//		readagain = 1;
//	}
	SIM_sendCMD((uint8_t*)"AT+CMGD=1,1", (uint8_t*)"OK",
 80032ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80032b2:	9300      	str	r3, [sp, #0]
 80032b4:	2301      	movs	r3, #1
 80032b6:	2201      	movs	r2, #1
 80032b8:	4909      	ldr	r1, [pc, #36]	; (80032e0 <processingSMS+0x148>)
 80032ba:	480a      	ldr	r0, [pc, #40]	; (80032e4 <processingSMS+0x14c>)
 80032bc:	f7ff fabe 	bl	800283c <SIM_sendCMD>
				ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, 1000);
	newSMS = 0;
 80032c0:	4b04      	ldr	r3, [pc, #16]	; (80032d4 <processingSMS+0x13c>)
 80032c2:	2200      	movs	r2, #0
 80032c4:	701a      	strb	r2, [r3, #0]

	return 1;
 80032c6:	2301      	movs	r3, #1
 80032c8:	46b5      	mov	sp, r6
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	371c      	adds	r7, #28
 80032ce:	46bd      	mov	sp, r7
 80032d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80032d4:	20001364 	.word	0x20001364
 80032d8:	20001366 	.word	0x20001366
 80032dc:	2000119c 	.word	0x2000119c
 80032e0:	0800ef4c 	.word	0x0800ef4c
 80032e4:	0800f004 	.word	0x0800f004

080032e8 <checkSMSrequest>:



bool checkSMSrequest (SMS_CMD_t smsCMD)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b085      	sub	sp, #20
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	4603      	mov	r3, r0
 80032f0:	71fb      	strb	r3, [r7, #7]
	bool res = false;
 80032f2:	2300      	movs	r3, #0
 80032f4:	73fb      	strb	r3, [r7, #15]
	switch (smsCMD)	{
 80032f6:	79fb      	ldrb	r3, [r7, #7]
 80032f8:	2b07      	cmp	r3, #7
 80032fa:	d873      	bhi.n	80033e4 <checkSMSrequest+0xfc>
 80032fc:	a201      	add	r2, pc, #4	; (adr r2, 8003304 <checkSMSrequest+0x1c>)
 80032fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003302:	bf00      	nop
 8003304:	08003325 	.word	0x08003325
 8003308:	0800333d 	.word	0x0800333d
 800330c:	08003385 	.word	0x08003385
 8003310:	0800336d 	.word	0x0800336d
 8003314:	08003355 	.word	0x08003355
 8003318:	0800339d 	.word	0x0800339d
 800331c:	080033cd 	.word	0x080033cd
 8003320:	080033b5 	.word	0x080033b5
		case SMS_CMD_CTRL_ON:
			res = mySIM.sms.CtrlON.requestflag ;
 8003324:	4b33      	ldr	r3, [pc, #204]	; (80033f4 <checkSMSrequest+0x10c>)
 8003326:	f893 3158 	ldrb.w	r3, [r3, #344]	; 0x158
 800332a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800332e:	b2db      	uxtb	r3, r3
 8003330:	2b00      	cmp	r3, #0
 8003332:	bf14      	ite	ne
 8003334:	2301      	movne	r3, #1
 8003336:	2300      	moveq	r3, #0
 8003338:	73fb      	strb	r3, [r7, #15]
			break;
 800333a:	e054      	b.n	80033e6 <checkSMSrequest+0xfe>
		case SMS_CMD_CTRL_OFF:
			res = mySIM.sms.CtrlOFF.requestflag ;
 800333c:	4b2d      	ldr	r3, [pc, #180]	; (80033f4 <checkSMSrequest+0x10c>)
 800333e:	f893 326a 	ldrb.w	r3, [r3, #618]	; 0x26a
 8003342:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003346:	b2db      	uxtb	r3, r3
 8003348:	2b00      	cmp	r3, #0
 800334a:	bf14      	ite	ne
 800334c:	2301      	movne	r3, #1
 800334e:	2300      	moveq	r3, #0
 8003350:	73fb      	strb	r3, [r7, #15]
			break;
 8003352:	e048      	b.n	80033e6 <checkSMSrequest+0xfe>
		case SMS_CMD_CTRL_DEC:
			res = mySIM.sms.CtrlDEC.requestflag ;
 8003354:	4b27      	ldr	r3, [pc, #156]	; (80033f4 <checkSMSrequest+0x10c>)
 8003356:	f893 35a0 	ldrb.w	r3, [r3, #1440]	; 0x5a0
 800335a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800335e:	b2db      	uxtb	r3, r3
 8003360:	2b00      	cmp	r3, #0
 8003362:	bf14      	ite	ne
 8003364:	2301      	movne	r3, #1
 8003366:	2300      	moveq	r3, #0
 8003368:	73fb      	strb	r3, [r7, #15]
			break;
 800336a:	e03c      	b.n	80033e6 <checkSMSrequest+0xfe>
		case SMS_CMD_CTRL_INC:
			res = mySIM.sms.CtrlINC.requestflag ;
 800336c:	4b21      	ldr	r3, [pc, #132]	; (80033f4 <checkSMSrequest+0x10c>)
 800336e:	f893 348e 	ldrb.w	r3, [r3, #1166]	; 0x48e
 8003372:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003376:	b2db      	uxtb	r3, r3
 8003378:	2b00      	cmp	r3, #0
 800337a:	bf14      	ite	ne
 800337c:	2301      	movne	r3, #1
 800337e:	2300      	moveq	r3, #0
 8003380:	73fb      	strb	r3, [r7, #15]
			break;
 8003382:	e030      	b.n	80033e6 <checkSMSrequest+0xfe>
		case SMS_CMD_CTRL_CALIB:
			res = mySIM.sms.CtrlCALIB.requestflag ;
 8003384:	4b1b      	ldr	r3, [pc, #108]	; (80033f4 <checkSMSrequest+0x10c>)
 8003386:	f893 337c 	ldrb.w	r3, [r3, #892]	; 0x37c
 800338a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800338e:	b2db      	uxtb	r3, r3
 8003390:	2b00      	cmp	r3, #0
 8003392:	bf14      	ite	ne
 8003394:	2301      	movne	r3, #1
 8003396:	2300      	moveq	r3, #0
 8003398:	73fb      	strb	r3, [r7, #15]
			break;
 800339a:	e024      	b.n	80033e6 <checkSMSrequest+0xfe>
		case SMS_CMD_GET_STATUS:
			res = mySIM.sms.GetStatus.requestflag ;
 800339c:	4b15      	ldr	r3, [pc, #84]	; (80033f4 <checkSMSrequest+0x10c>)
 800339e:	f893 36b2 	ldrb.w	r3, [r3, #1714]	; 0x6b2
 80033a2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	bf14      	ite	ne
 80033ac:	2301      	movne	r3, #1
 80033ae:	2300      	moveq	r3, #0
 80033b0:	73fb      	strb	r3, [r7, #15]
			break;
 80033b2:	e018      	b.n	80033e6 <checkSMSrequest+0xfe>
		case SMS_CMD_GET_STATION:
			res = mySIM.sms.GetStation.requestflag ;
 80033b4:	4b0f      	ldr	r3, [pc, #60]	; (80033f4 <checkSMSrequest+0x10c>)
 80033b6:	f893 38d6 	ldrb.w	r3, [r3, #2262]	; 0x8d6
 80033ba:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80033be:	b2db      	uxtb	r3, r3
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	bf14      	ite	ne
 80033c4:	2301      	movne	r3, #1
 80033c6:	2300      	moveq	r3, #0
 80033c8:	73fb      	strb	r3, [r7, #15]
			break;
 80033ca:	e00c      	b.n	80033e6 <checkSMSrequest+0xfe>
		case SMS_CMD_GET_SENSOR:
			res = mySIM.sms.GetSensor.requestflag ;
 80033cc:	4b09      	ldr	r3, [pc, #36]	; (80033f4 <checkSMSrequest+0x10c>)
 80033ce:	f893 37c4 	ldrb.w	r3, [r3, #1988]	; 0x7c4
 80033d2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80033d6:	b2db      	uxtb	r3, r3
 80033d8:	2b00      	cmp	r3, #0
 80033da:	bf14      	ite	ne
 80033dc:	2301      	movne	r3, #1
 80033de:	2300      	moveq	r3, #0
 80033e0:	73fb      	strb	r3, [r7, #15]
			break;
 80033e2:	e000      	b.n	80033e6 <checkSMSrequest+0xfe>
		default:
			break;
 80033e4:	bf00      	nop
	}
	return res;
 80033e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	3714      	adds	r7, #20
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bc80      	pop	{r7}
 80033f0:	4770      	bx	lr
 80033f2:	bf00      	nop
 80033f4:	20001768 	.word	0x20001768

080033f8 <triggerSMSrequest>:

void triggerSMSrequest (SMS_CMD_t smsCMD, SMS_CMD_FLAG_t ENorDIS)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b083      	sub	sp, #12
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	4603      	mov	r3, r0
 8003400:	460a      	mov	r2, r1
 8003402:	71fb      	strb	r3, [r7, #7]
 8003404:	4613      	mov	r3, r2
 8003406:	71bb      	strb	r3, [r7, #6]
	switch (smsCMD)	{
 8003408:	79fb      	ldrb	r3, [r7, #7]
 800340a:	2b07      	cmp	r3, #7
 800340c:	d872      	bhi.n	80034f4 <triggerSMSrequest+0xfc>
 800340e:	a201      	add	r2, pc, #4	; (adr r2, 8003414 <triggerSMSrequest+0x1c>)
 8003410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003414:	08003435 	.word	0x08003435
 8003418:	0800344d 	.word	0x0800344d
 800341c:	08003495 	.word	0x08003495
 8003420:	0800347d 	.word	0x0800347d
 8003424:	08003465 	.word	0x08003465
 8003428:	080034ad 	.word	0x080034ad
 800342c:	080034dd 	.word	0x080034dd
 8003430:	080034c5 	.word	0x080034c5
	case SMS_CMD_CTRL_ON:
		mySIM.sms.CtrlON.requestflag = ENorDIS;
 8003434:	79bb      	ldrb	r3, [r7, #6]
 8003436:	f003 0301 	and.w	r3, r3, #1
 800343a:	b2d9      	uxtb	r1, r3
 800343c:	4a30      	ldr	r2, [pc, #192]	; (8003500 <triggerSMSrequest+0x108>)
 800343e:	f892 3158 	ldrb.w	r3, [r2, #344]	; 0x158
 8003442:	f361 0300 	bfi	r3, r1, #0, #1
 8003446:	f882 3158 	strb.w	r3, [r2, #344]	; 0x158
		break;
 800344a:	e054      	b.n	80034f6 <triggerSMSrequest+0xfe>
	case SMS_CMD_CTRL_OFF:
		mySIM.sms.CtrlOFF.requestflag = ENorDIS;
 800344c:	79bb      	ldrb	r3, [r7, #6]
 800344e:	f003 0301 	and.w	r3, r3, #1
 8003452:	b2d9      	uxtb	r1, r3
 8003454:	4a2a      	ldr	r2, [pc, #168]	; (8003500 <triggerSMSrequest+0x108>)
 8003456:	f892 326a 	ldrb.w	r3, [r2, #618]	; 0x26a
 800345a:	f361 0300 	bfi	r3, r1, #0, #1
 800345e:	f882 326a 	strb.w	r3, [r2, #618]	; 0x26a
		break;
 8003462:	e048      	b.n	80034f6 <triggerSMSrequest+0xfe>
	case SMS_CMD_CTRL_DEC:
		mySIM.sms.CtrlDEC.requestflag = ENorDIS;
 8003464:	79bb      	ldrb	r3, [r7, #6]
 8003466:	f003 0301 	and.w	r3, r3, #1
 800346a:	b2d9      	uxtb	r1, r3
 800346c:	4a24      	ldr	r2, [pc, #144]	; (8003500 <triggerSMSrequest+0x108>)
 800346e:	f892 35a0 	ldrb.w	r3, [r2, #1440]	; 0x5a0
 8003472:	f361 0300 	bfi	r3, r1, #0, #1
 8003476:	f882 35a0 	strb.w	r3, [r2, #1440]	; 0x5a0
		break;
 800347a:	e03c      	b.n	80034f6 <triggerSMSrequest+0xfe>
	case SMS_CMD_CTRL_INC:
		mySIM.sms.CtrlINC.requestflag = ENorDIS;
 800347c:	79bb      	ldrb	r3, [r7, #6]
 800347e:	f003 0301 	and.w	r3, r3, #1
 8003482:	b2d9      	uxtb	r1, r3
 8003484:	4a1e      	ldr	r2, [pc, #120]	; (8003500 <triggerSMSrequest+0x108>)
 8003486:	f892 348e 	ldrb.w	r3, [r2, #1166]	; 0x48e
 800348a:	f361 0300 	bfi	r3, r1, #0, #1
 800348e:	f882 348e 	strb.w	r3, [r2, #1166]	; 0x48e
		break;
 8003492:	e030      	b.n	80034f6 <triggerSMSrequest+0xfe>
	case SMS_CMD_CTRL_CALIB:
		mySIM.sms.CtrlCALIB.requestflag = ENorDIS;
 8003494:	79bb      	ldrb	r3, [r7, #6]
 8003496:	f003 0301 	and.w	r3, r3, #1
 800349a:	b2d9      	uxtb	r1, r3
 800349c:	4a18      	ldr	r2, [pc, #96]	; (8003500 <triggerSMSrequest+0x108>)
 800349e:	f892 337c 	ldrb.w	r3, [r2, #892]	; 0x37c
 80034a2:	f361 0300 	bfi	r3, r1, #0, #1
 80034a6:	f882 337c 	strb.w	r3, [r2, #892]	; 0x37c
		break;
 80034aa:	e024      	b.n	80034f6 <triggerSMSrequest+0xfe>
	case SMS_CMD_GET_STATUS:
		mySIM.sms.GetStatus.requestflag = ENorDIS;
 80034ac:	79bb      	ldrb	r3, [r7, #6]
 80034ae:	f003 0301 	and.w	r3, r3, #1
 80034b2:	b2d9      	uxtb	r1, r3
 80034b4:	4a12      	ldr	r2, [pc, #72]	; (8003500 <triggerSMSrequest+0x108>)
 80034b6:	f892 36b2 	ldrb.w	r3, [r2, #1714]	; 0x6b2
 80034ba:	f361 0300 	bfi	r3, r1, #0, #1
 80034be:	f882 36b2 	strb.w	r3, [r2, #1714]	; 0x6b2
		break;
 80034c2:	e018      	b.n	80034f6 <triggerSMSrequest+0xfe>
	case SMS_CMD_GET_STATION:
		mySIM.sms.GetStation.requestflag = ENorDIS;
 80034c4:	79bb      	ldrb	r3, [r7, #6]
 80034c6:	f003 0301 	and.w	r3, r3, #1
 80034ca:	b2d9      	uxtb	r1, r3
 80034cc:	4a0c      	ldr	r2, [pc, #48]	; (8003500 <triggerSMSrequest+0x108>)
 80034ce:	f892 38d6 	ldrb.w	r3, [r2, #2262]	; 0x8d6
 80034d2:	f361 0300 	bfi	r3, r1, #0, #1
 80034d6:	f882 38d6 	strb.w	r3, [r2, #2262]	; 0x8d6
		break;
 80034da:	e00c      	b.n	80034f6 <triggerSMSrequest+0xfe>
	case SMS_CMD_GET_SENSOR:
		mySIM.sms.GetSensor.requestflag = ENorDIS;
 80034dc:	79bb      	ldrb	r3, [r7, #6]
 80034de:	f003 0301 	and.w	r3, r3, #1
 80034e2:	b2d9      	uxtb	r1, r3
 80034e4:	4a06      	ldr	r2, [pc, #24]	; (8003500 <triggerSMSrequest+0x108>)
 80034e6:	f892 37c4 	ldrb.w	r3, [r2, #1988]	; 0x7c4
 80034ea:	f361 0300 	bfi	r3, r1, #0, #1
 80034ee:	f882 37c4 	strb.w	r3, [r2, #1988]	; 0x7c4
		break;
 80034f2:	e000      	b.n	80034f6 <triggerSMSrequest+0xfe>
	default:
		break;
 80034f4:	bf00      	nop
	}
}
 80034f6:	bf00      	nop
 80034f8:	370c      	adds	r7, #12
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bc80      	pop	{r7}
 80034fe:	4770      	bx	lr
 8003500:	20001768 	.word	0x20001768

08003504 <checkSMSreturn>:

bool checkSMSreturn (SMS_CMD_t smsCMD)
{
 8003504:	b480      	push	{r7}
 8003506:	b085      	sub	sp, #20
 8003508:	af00      	add	r7, sp, #0
 800350a:	4603      	mov	r3, r0
 800350c:	71fb      	strb	r3, [r7, #7]
	bool res = false;
 800350e:	2300      	movs	r3, #0
 8003510:	73fb      	strb	r3, [r7, #15]
	switch (smsCMD)	{
 8003512:	79fb      	ldrb	r3, [r7, #7]
 8003514:	2b07      	cmp	r3, #7
 8003516:	d873      	bhi.n	8003600 <checkSMSreturn+0xfc>
 8003518:	a201      	add	r2, pc, #4	; (adr r2, 8003520 <checkSMSreturn+0x1c>)
 800351a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800351e:	bf00      	nop
 8003520:	08003541 	.word	0x08003541
 8003524:	08003559 	.word	0x08003559
 8003528:	080035a1 	.word	0x080035a1
 800352c:	08003589 	.word	0x08003589
 8003530:	08003571 	.word	0x08003571
 8003534:	080035b9 	.word	0x080035b9
 8003538:	080035e9 	.word	0x080035e9
 800353c:	080035d1 	.word	0x080035d1
		case SMS_CMD_CTRL_ON:
			res = mySIM.sms.CtrlON.returnflag ;
 8003540:	4b33      	ldr	r3, [pc, #204]	; (8003610 <checkSMSreturn+0x10c>)
 8003542:	f893 3158 	ldrb.w	r3, [r3, #344]	; 0x158
 8003546:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800354a:	b2db      	uxtb	r3, r3
 800354c:	2b00      	cmp	r3, #0
 800354e:	bf14      	ite	ne
 8003550:	2301      	movne	r3, #1
 8003552:	2300      	moveq	r3, #0
 8003554:	73fb      	strb	r3, [r7, #15]
			break;
 8003556:	e054      	b.n	8003602 <checkSMSreturn+0xfe>
		case SMS_CMD_CTRL_OFF:
			res = mySIM.sms.CtrlOFF.returnflag ;
 8003558:	4b2d      	ldr	r3, [pc, #180]	; (8003610 <checkSMSreturn+0x10c>)
 800355a:	f893 326a 	ldrb.w	r3, [r3, #618]	; 0x26a
 800355e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003562:	b2db      	uxtb	r3, r3
 8003564:	2b00      	cmp	r3, #0
 8003566:	bf14      	ite	ne
 8003568:	2301      	movne	r3, #1
 800356a:	2300      	moveq	r3, #0
 800356c:	73fb      	strb	r3, [r7, #15]
			break;
 800356e:	e048      	b.n	8003602 <checkSMSreturn+0xfe>
		case SMS_CMD_CTRL_DEC:
			res = mySIM.sms.CtrlDEC.returnflag ;
 8003570:	4b27      	ldr	r3, [pc, #156]	; (8003610 <checkSMSreturn+0x10c>)
 8003572:	f893 35a0 	ldrb.w	r3, [r3, #1440]	; 0x5a0
 8003576:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800357a:	b2db      	uxtb	r3, r3
 800357c:	2b00      	cmp	r3, #0
 800357e:	bf14      	ite	ne
 8003580:	2301      	movne	r3, #1
 8003582:	2300      	moveq	r3, #0
 8003584:	73fb      	strb	r3, [r7, #15]
			break;
 8003586:	e03c      	b.n	8003602 <checkSMSreturn+0xfe>
		case SMS_CMD_CTRL_INC:
			res = mySIM.sms.CtrlINC.returnflag ;
 8003588:	4b21      	ldr	r3, [pc, #132]	; (8003610 <checkSMSreturn+0x10c>)
 800358a:	f893 348e 	ldrb.w	r3, [r3, #1166]	; 0x48e
 800358e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003592:	b2db      	uxtb	r3, r3
 8003594:	2b00      	cmp	r3, #0
 8003596:	bf14      	ite	ne
 8003598:	2301      	movne	r3, #1
 800359a:	2300      	moveq	r3, #0
 800359c:	73fb      	strb	r3, [r7, #15]
			break;
 800359e:	e030      	b.n	8003602 <checkSMSreturn+0xfe>
		case SMS_CMD_CTRL_CALIB:
			res = mySIM.sms.CtrlCALIB.returnflag ;
 80035a0:	4b1b      	ldr	r3, [pc, #108]	; (8003610 <checkSMSreturn+0x10c>)
 80035a2:	f893 337c 	ldrb.w	r3, [r3, #892]	; 0x37c
 80035a6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80035aa:	b2db      	uxtb	r3, r3
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	bf14      	ite	ne
 80035b0:	2301      	movne	r3, #1
 80035b2:	2300      	moveq	r3, #0
 80035b4:	73fb      	strb	r3, [r7, #15]
			break;
 80035b6:	e024      	b.n	8003602 <checkSMSreturn+0xfe>
		case SMS_CMD_GET_STATUS:
			res = mySIM.sms.GetStatus.returnflag ;
 80035b8:	4b15      	ldr	r3, [pc, #84]	; (8003610 <checkSMSreturn+0x10c>)
 80035ba:	f893 36b2 	ldrb.w	r3, [r3, #1714]	; 0x6b2
 80035be:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	bf14      	ite	ne
 80035c8:	2301      	movne	r3, #1
 80035ca:	2300      	moveq	r3, #0
 80035cc:	73fb      	strb	r3, [r7, #15]
			break;
 80035ce:	e018      	b.n	8003602 <checkSMSreturn+0xfe>
		case SMS_CMD_GET_STATION:
			res = mySIM.sms.GetStation.returnflag ;
 80035d0:	4b0f      	ldr	r3, [pc, #60]	; (8003610 <checkSMSreturn+0x10c>)
 80035d2:	f893 38d6 	ldrb.w	r3, [r3, #2262]	; 0x8d6
 80035d6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	2b00      	cmp	r3, #0
 80035de:	bf14      	ite	ne
 80035e0:	2301      	movne	r3, #1
 80035e2:	2300      	moveq	r3, #0
 80035e4:	73fb      	strb	r3, [r7, #15]
			break;
 80035e6:	e00c      	b.n	8003602 <checkSMSreturn+0xfe>
		case SMS_CMD_GET_SENSOR:
			res = mySIM.sms.GetSensor.returnflag ;
 80035e8:	4b09      	ldr	r3, [pc, #36]	; (8003610 <checkSMSreturn+0x10c>)
 80035ea:	f893 37c4 	ldrb.w	r3, [r3, #1988]	; 0x7c4
 80035ee:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	bf14      	ite	ne
 80035f8:	2301      	movne	r3, #1
 80035fa:	2300      	moveq	r3, #0
 80035fc:	73fb      	strb	r3, [r7, #15]
			break;
 80035fe:	e000      	b.n	8003602 <checkSMSreturn+0xfe>
		default:
			break;
 8003600:	bf00      	nop
		}
	return res;
 8003602:	7bfb      	ldrb	r3, [r7, #15]
}
 8003604:	4618      	mov	r0, r3
 8003606:	3714      	adds	r7, #20
 8003608:	46bd      	mov	sp, r7
 800360a:	bc80      	pop	{r7}
 800360c:	4770      	bx	lr
 800360e:	bf00      	nop
 8003610:	20001768 	.word	0x20001768

08003614 <triggerSMSreturn>:
void triggerSMSreturn (SMS_CMD_t smsCMD, SMS_CMD_FLAG_t ENorDIS)
{
 8003614:	b480      	push	{r7}
 8003616:	b083      	sub	sp, #12
 8003618:	af00      	add	r7, sp, #0
 800361a:	4603      	mov	r3, r0
 800361c:	460a      	mov	r2, r1
 800361e:	71fb      	strb	r3, [r7, #7]
 8003620:	4613      	mov	r3, r2
 8003622:	71bb      	strb	r3, [r7, #6]
	switch (smsCMD)	{
 8003624:	79fb      	ldrb	r3, [r7, #7]
 8003626:	2b07      	cmp	r3, #7
 8003628:	d872      	bhi.n	8003710 <triggerSMSreturn+0xfc>
 800362a:	a201      	add	r2, pc, #4	; (adr r2, 8003630 <triggerSMSreturn+0x1c>)
 800362c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003630:	08003651 	.word	0x08003651
 8003634:	08003669 	.word	0x08003669
 8003638:	080036b1 	.word	0x080036b1
 800363c:	08003699 	.word	0x08003699
 8003640:	08003681 	.word	0x08003681
 8003644:	080036c9 	.word	0x080036c9
 8003648:	080036f9 	.word	0x080036f9
 800364c:	080036e1 	.word	0x080036e1
	case SMS_CMD_CTRL_ON:
		mySIM.sms.CtrlON.returnflag = ENorDIS;
 8003650:	79bb      	ldrb	r3, [r7, #6]
 8003652:	f003 0301 	and.w	r3, r3, #1
 8003656:	b2d9      	uxtb	r1, r3
 8003658:	4a30      	ldr	r2, [pc, #192]	; (800371c <triggerSMSreturn+0x108>)
 800365a:	f892 3158 	ldrb.w	r3, [r2, #344]	; 0x158
 800365e:	f361 0341 	bfi	r3, r1, #1, #1
 8003662:	f882 3158 	strb.w	r3, [r2, #344]	; 0x158
		break;
 8003666:	e054      	b.n	8003712 <triggerSMSreturn+0xfe>
	case SMS_CMD_CTRL_OFF:
		mySIM.sms.CtrlOFF.returnflag = ENorDIS;
 8003668:	79bb      	ldrb	r3, [r7, #6]
 800366a:	f003 0301 	and.w	r3, r3, #1
 800366e:	b2d9      	uxtb	r1, r3
 8003670:	4a2a      	ldr	r2, [pc, #168]	; (800371c <triggerSMSreturn+0x108>)
 8003672:	f892 326a 	ldrb.w	r3, [r2, #618]	; 0x26a
 8003676:	f361 0341 	bfi	r3, r1, #1, #1
 800367a:	f882 326a 	strb.w	r3, [r2, #618]	; 0x26a
		break;
 800367e:	e048      	b.n	8003712 <triggerSMSreturn+0xfe>
	case SMS_CMD_CTRL_DEC:
		mySIM.sms.CtrlDEC.returnflag = ENorDIS;
 8003680:	79bb      	ldrb	r3, [r7, #6]
 8003682:	f003 0301 	and.w	r3, r3, #1
 8003686:	b2d9      	uxtb	r1, r3
 8003688:	4a24      	ldr	r2, [pc, #144]	; (800371c <triggerSMSreturn+0x108>)
 800368a:	f892 35a0 	ldrb.w	r3, [r2, #1440]	; 0x5a0
 800368e:	f361 0341 	bfi	r3, r1, #1, #1
 8003692:	f882 35a0 	strb.w	r3, [r2, #1440]	; 0x5a0
		break;
 8003696:	e03c      	b.n	8003712 <triggerSMSreturn+0xfe>
	case SMS_CMD_CTRL_INC:
		mySIM.sms.CtrlINC.returnflag = ENorDIS;
 8003698:	79bb      	ldrb	r3, [r7, #6]
 800369a:	f003 0301 	and.w	r3, r3, #1
 800369e:	b2d9      	uxtb	r1, r3
 80036a0:	4a1e      	ldr	r2, [pc, #120]	; (800371c <triggerSMSreturn+0x108>)
 80036a2:	f892 348e 	ldrb.w	r3, [r2, #1166]	; 0x48e
 80036a6:	f361 0341 	bfi	r3, r1, #1, #1
 80036aa:	f882 348e 	strb.w	r3, [r2, #1166]	; 0x48e
		break;
 80036ae:	e030      	b.n	8003712 <triggerSMSreturn+0xfe>
	case SMS_CMD_CTRL_CALIB:
		mySIM.sms.CtrlCALIB.returnflag = ENorDIS;
 80036b0:	79bb      	ldrb	r3, [r7, #6]
 80036b2:	f003 0301 	and.w	r3, r3, #1
 80036b6:	b2d9      	uxtb	r1, r3
 80036b8:	4a18      	ldr	r2, [pc, #96]	; (800371c <triggerSMSreturn+0x108>)
 80036ba:	f892 337c 	ldrb.w	r3, [r2, #892]	; 0x37c
 80036be:	f361 0341 	bfi	r3, r1, #1, #1
 80036c2:	f882 337c 	strb.w	r3, [r2, #892]	; 0x37c
		break;
 80036c6:	e024      	b.n	8003712 <triggerSMSreturn+0xfe>
	case SMS_CMD_GET_STATUS:
		mySIM.sms.GetStatus.returnflag = ENorDIS;
 80036c8:	79bb      	ldrb	r3, [r7, #6]
 80036ca:	f003 0301 	and.w	r3, r3, #1
 80036ce:	b2d9      	uxtb	r1, r3
 80036d0:	4a12      	ldr	r2, [pc, #72]	; (800371c <triggerSMSreturn+0x108>)
 80036d2:	f892 36b2 	ldrb.w	r3, [r2, #1714]	; 0x6b2
 80036d6:	f361 0341 	bfi	r3, r1, #1, #1
 80036da:	f882 36b2 	strb.w	r3, [r2, #1714]	; 0x6b2
		break;
 80036de:	e018      	b.n	8003712 <triggerSMSreturn+0xfe>
	case SMS_CMD_GET_STATION:
		mySIM.sms.GetStation.returnflag = ENorDIS;
 80036e0:	79bb      	ldrb	r3, [r7, #6]
 80036e2:	f003 0301 	and.w	r3, r3, #1
 80036e6:	b2d9      	uxtb	r1, r3
 80036e8:	4a0c      	ldr	r2, [pc, #48]	; (800371c <triggerSMSreturn+0x108>)
 80036ea:	f892 38d6 	ldrb.w	r3, [r2, #2262]	; 0x8d6
 80036ee:	f361 0341 	bfi	r3, r1, #1, #1
 80036f2:	f882 38d6 	strb.w	r3, [r2, #2262]	; 0x8d6
		break;
 80036f6:	e00c      	b.n	8003712 <triggerSMSreturn+0xfe>
	case SMS_CMD_GET_SENSOR:
		mySIM.sms.GetSensor.returnflag = ENorDIS;
 80036f8:	79bb      	ldrb	r3, [r7, #6]
 80036fa:	f003 0301 	and.w	r3, r3, #1
 80036fe:	b2d9      	uxtb	r1, r3
 8003700:	4a06      	ldr	r2, [pc, #24]	; (800371c <triggerSMSreturn+0x108>)
 8003702:	f892 37c4 	ldrb.w	r3, [r2, #1988]	; 0x7c4
 8003706:	f361 0341 	bfi	r3, r1, #1, #1
 800370a:	f882 37c4 	strb.w	r3, [r2, #1988]	; 0x7c4
		break;
 800370e:	e000      	b.n	8003712 <triggerSMSreturn+0xfe>
	default:
		break;
 8003710:	bf00      	nop
	}
}
 8003712:	bf00      	nop
 8003714:	370c      	adds	r7, #12
 8003716:	46bd      	mov	sp, r7
 8003718:	bc80      	pop	{r7}
 800371a:	4770      	bx	lr
 800371c:	20001768 	.word	0x20001768

08003720 <SMS_config>:

uint8_t SMS_config()
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b082      	sub	sp, #8
 8003724:	af02      	add	r7, sp, #8
	if ( SIM_sendCMD((uint8_t*)"AT+CMGF=1", (uint8_t*)"OK", ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, SIM_TIMEOUT_SHORT) != SIM_RES_MSG ) return 0;
 8003726:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800372a:	9300      	str	r3, [sp, #0]
 800372c:	2301      	movs	r3, #1
 800372e:	2201      	movs	r2, #1
 8003730:	490d      	ldr	r1, [pc, #52]	; (8003768 <SMS_config+0x48>)
 8003732:	480e      	ldr	r0, [pc, #56]	; (800376c <SMS_config+0x4c>)
 8003734:	f7ff f882 	bl	800283c <SIM_sendCMD>
 8003738:	4603      	mov	r3, r0
 800373a:	2b01      	cmp	r3, #1
 800373c:	d001      	beq.n	8003742 <SMS_config+0x22>
 800373e:	2300      	movs	r3, #0
 8003740:	e00e      	b.n	8003760 <SMS_config+0x40>

	if ( SIM_sendCMD((uint8_t*)"AT+CSCS=\"GSM\"", (uint8_t*)"OK", ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, SIM_TIMEOUT_SHORT) != SIM_RES_MSG)		return 0;
 8003742:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003746:	9300      	str	r3, [sp, #0]
 8003748:	2301      	movs	r3, #1
 800374a:	2201      	movs	r2, #1
 800374c:	4906      	ldr	r1, [pc, #24]	; (8003768 <SMS_config+0x48>)
 800374e:	4808      	ldr	r0, [pc, #32]	; (8003770 <SMS_config+0x50>)
 8003750:	f7ff f874 	bl	800283c <SIM_sendCMD>
 8003754:	4603      	mov	r3, r0
 8003756:	2b01      	cmp	r3, #1
 8003758:	d001      	beq.n	800375e <SMS_config+0x3e>
 800375a:	2300      	movs	r3, #0
 800375c:	e000      	b.n	8003760 <SMS_config+0x40>

	return 1;
 800375e:	2301      	movs	r3, #1
}
 8003760:	4618      	mov	r0, r3
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}
 8003766:	bf00      	nop
 8003768:	0800ef4c 	.word	0x0800ef4c
 800376c:	0800f010 	.word	0x0800f010
 8003770:	0800f01c 	.word	0x0800f01c

08003774 <SMS_sendMsg>:

uint8_t SMS_sendMsg(uint8_t *Msg, uint16_t msglen, uint8_t *phonenumber )
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b0a6      	sub	sp, #152	; 0x98
 8003778:	af02      	add	r7, sp, #8
 800377a:	60f8      	str	r0, [r7, #12]
 800377c:	460b      	mov	r3, r1
 800377e:	607a      	str	r2, [r7, #4]
 8003780:	817b      	strh	r3, [r7, #10]
	if ( !SMS_config() )	return 0;
 8003782:	f7ff ffcd 	bl	8003720 <SMS_config>
 8003786:	4603      	mov	r3, r0
 8003788:	2b00      	cmp	r3, #0
 800378a:	d101      	bne.n	8003790 <SMS_sendMsg+0x1c>
 800378c:	2300      	movs	r3, #0
 800378e:	e033      	b.n	80037f8 <SMS_sendMsg+0x84>
	uint8_t SIM_Txbuff[128];
	sprintf((char*)SIM_Txbuff, "AT+CMGS=\"%s\"", phonenumber);
 8003790:	f107 0310 	add.w	r3, r7, #16
 8003794:	687a      	ldr	r2, [r7, #4]
 8003796:	491a      	ldr	r1, [pc, #104]	; (8003800 <SMS_sendMsg+0x8c>)
 8003798:	4618      	mov	r0, r3
 800379a:	f009 f8e1 	bl	800c960 <siprintf>
	if ( SIM_sendCMD(SIM_Txbuff, (uint8_t*)">", ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, SIM_TIMEOUT_MEDIUM) != SIM_RES_MSG)	return 0;
 800379e:	f107 0010 	add.w	r0, r7, #16
 80037a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80037a6:	9300      	str	r3, [sp, #0]
 80037a8:	2301      	movs	r3, #1
 80037aa:	2201      	movs	r2, #1
 80037ac:	4915      	ldr	r1, [pc, #84]	; (8003804 <SMS_sendMsg+0x90>)
 80037ae:	f7ff f845 	bl	800283c <SIM_sendCMD>
 80037b2:	4603      	mov	r3, r0
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d001      	beq.n	80037bc <SMS_sendMsg+0x48>
 80037b8:	2300      	movs	r3, #0
 80037ba:	e01d      	b.n	80037f8 <SMS_sendMsg+0x84>

	Msg[msglen++] = 0x1A;
 80037bc:	897b      	ldrh	r3, [r7, #10]
 80037be:	1c5a      	adds	r2, r3, #1
 80037c0:	817a      	strh	r2, [r7, #10]
 80037c2:	461a      	mov	r2, r3
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	4413      	add	r3, r2
 80037c8:	221a      	movs	r2, #26
 80037ca:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(SIM_UART, Msg, msglen, 0xFFFF);
 80037cc:	897a      	ldrh	r2, [r7, #10]
 80037ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80037d2:	68f9      	ldr	r1, [r7, #12]
 80037d4:	480c      	ldr	r0, [pc, #48]	; (8003808 <SMS_sendMsg+0x94>)
 80037d6:	f007 fc05 	bl	800afe4 <HAL_UART_Transmit>
	if ( SIM_checkMsg((uint8_t*)"OK", SIM_TIMEOUT_SHORT) != SIM_RES_MSG)	{
 80037da:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80037de:	480b      	ldr	r0, [pc, #44]	; (800380c <SMS_sendMsg+0x98>)
 80037e0:	f7fe ff74 	bl	80026cc <SIM_checkMsg>
 80037e4:	4603      	mov	r3, r0
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d003      	beq.n	80037f2 <SMS_sendMsg+0x7e>
		MarkAsReadData_SIM();
 80037ea:	f7ff f8d7 	bl	800299c <MarkAsReadData_SIM>
		return 0;
 80037ee:	2300      	movs	r3, #0
 80037f0:	e002      	b.n	80037f8 <SMS_sendMsg+0x84>
	}
//	HAL_UART_Transmit(SIM_UART, (uint8_t*), Size, Timeout)
	MarkAsReadData_SIM();
 80037f2:	f7ff f8d3 	bl	800299c <MarkAsReadData_SIM>
	return 1;
 80037f6:	2301      	movs	r3, #1
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3790      	adds	r7, #144	; 0x90
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}
 8003800:	0800f02c 	.word	0x0800f02c
 8003804:	0800f03c 	.word	0x0800f03c
 8003808:	20002a50 	.word	0x20002a50
 800380c:	0800ef4c 	.word	0x0800ef4c

08003810 <setLimit>:
static uint8_t steppercentChange = 0;
static Stepmotor_change_mode_t stepMode = STEPM_MODE_STEP;


void setLimit(LIMIT_t Limit)
{
 8003810:	b480      	push	{r7}
 8003812:	b083      	sub	sp, #12
 8003814:	af00      	add	r7, sp, #0
 8003816:	4603      	mov	r3, r0
 8003818:	71fb      	strb	r3, [r7, #7]
	limit = Limit;
 800381a:	4a04      	ldr	r2, [pc, #16]	; (800382c <setLimit+0x1c>)
 800381c:	79fb      	ldrb	r3, [r7, #7]
 800381e:	7013      	strb	r3, [r2, #0]
}
 8003820:	bf00      	nop
 8003822:	370c      	adds	r7, #12
 8003824:	46bd      	mov	sp, r7
 8003826:	bc80      	pop	{r7}
 8003828:	4770      	bx	lr
 800382a:	bf00      	nop
 800382c:	20000000 	.word	0x20000000

08003830 <getLimit>:

LIMIT_t getLimit ()
{
 8003830:	b480      	push	{r7}
 8003832:	af00      	add	r7, sp, #0
	return limit;
 8003834:	4b02      	ldr	r3, [pc, #8]	; (8003840 <getLimit+0x10>)
 8003836:	781b      	ldrb	r3, [r3, #0]
}
 8003838:	4618      	mov	r0, r3
 800383a:	46bd      	mov	sp, r7
 800383c:	bc80      	pop	{r7}
 800383e:	4770      	bx	lr
 8003840:	20000000 	.word	0x20000000

08003844 <Step_getDir>:

Stepmotor_dir_t Step_getDir()
{
 8003844:	b480      	push	{r7}
 8003846:	af00      	add	r7, sp, #0
	return step_dir;
 8003848:	4b02      	ldr	r3, [pc, #8]	; (8003854 <Step_getDir+0x10>)
 800384a:	781b      	ldrb	r3, [r3, #0]
}
 800384c:	4618      	mov	r0, r3
 800384e:	46bd      	mov	sp, r7
 8003850:	bc80      	pop	{r7}
 8003852:	4770      	bx	lr
 8003854:	20000001 	.word	0x20000001

08003858 <Step_setDir>:

void Step_setDir(Stepmotor_dir_t dir)
{
 8003858:	b480      	push	{r7}
 800385a:	b083      	sub	sp, #12
 800385c:	af00      	add	r7, sp, #0
 800385e:	4603      	mov	r3, r0
 8003860:	71fb      	strb	r3, [r7, #7]
	step_dir = dir;
 8003862:	4a04      	ldr	r2, [pc, #16]	; (8003874 <Step_setDir+0x1c>)
 8003864:	79fb      	ldrb	r3, [r7, #7]
 8003866:	7013      	strb	r3, [r2, #0]
}
 8003868:	bf00      	nop
 800386a:	370c      	adds	r7, #12
 800386c:	46bd      	mov	sp, r7
 800386e:	bc80      	pop	{r7}
 8003870:	4770      	bx	lr
 8003872:	bf00      	nop
 8003874:	20000001 	.word	0x20000001

08003878 <Step_toggleDir>:

void Step_toggleDir()
{
 8003878:	b580      	push	{r7, lr}
 800387a:	af00      	add	r7, sp, #0
	switch (Step_getDir())	{
 800387c:	f7ff ffe2 	bl	8003844 <Step_getDir>
 8003880:	4603      	mov	r3, r0
 8003882:	2b01      	cmp	r3, #1
 8003884:	d002      	beq.n	800388c <Step_toggleDir+0x14>
 8003886:	2b02      	cmp	r3, #2
 8003888:	d004      	beq.n	8003894 <Step_toggleDir+0x1c>
		break;
	case STEPM_DIR_DEC:
		Step_setDir(STEPM_DIR_INC);
		break;
	default:
		break;
 800388a:	e007      	b.n	800389c <Step_toggleDir+0x24>
		Step_setDir(STEPM_DIR_DEC);
 800388c:	2002      	movs	r0, #2
 800388e:	f7ff ffe3 	bl	8003858 <Step_setDir>
		break;
 8003892:	e003      	b.n	800389c <Step_toggleDir+0x24>
		Step_setDir(STEPM_DIR_INC);
 8003894:	2001      	movs	r0, #1
 8003896:	f7ff ffdf 	bl	8003858 <Step_setDir>
		break;
 800389a:	bf00      	nop
	}
}
 800389c:	bf00      	nop
 800389e:	bd80      	pop	{r7, pc}

080038a0 <increaseStepchange>:

void increaseStepchange()
{
 80038a0:	b480      	push	{r7}
 80038a2:	af00      	add	r7, sp, #0
	if (stepChange >= MAX_STEP )	{
 80038a4:	4b0a      	ldr	r3, [pc, #40]	; (80038d0 <increaseStepchange+0x30>)
 80038a6:	881b      	ldrh	r3, [r3, #0]
 80038a8:	b29b      	uxth	r3, r3
 80038aa:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80038ae:	d303      	bcc.n	80038b8 <increaseStepchange+0x18>
		stepChange = 0;
 80038b0:	4b07      	ldr	r3, [pc, #28]	; (80038d0 <increaseStepchange+0x30>)
 80038b2:	2200      	movs	r2, #0
 80038b4:	801a      	strh	r2, [r3, #0]
	}
	else {
		stepChange ++;
	}
}
 80038b6:	e006      	b.n	80038c6 <increaseStepchange+0x26>
		stepChange ++;
 80038b8:	4b05      	ldr	r3, [pc, #20]	; (80038d0 <increaseStepchange+0x30>)
 80038ba:	881b      	ldrh	r3, [r3, #0]
 80038bc:	b29b      	uxth	r3, r3
 80038be:	3301      	adds	r3, #1
 80038c0:	b29a      	uxth	r2, r3
 80038c2:	4b03      	ldr	r3, [pc, #12]	; (80038d0 <increaseStepchange+0x30>)
 80038c4:	801a      	strh	r2, [r3, #0]
}
 80038c6:	bf00      	nop
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bc80      	pop	{r7}
 80038cc:	4770      	bx	lr
 80038ce:	bf00      	nop
 80038d0:	20001368 	.word	0x20001368

080038d4 <decreaseStepchange>:

void decreaseStepchange()
{
 80038d4:	b480      	push	{r7}
 80038d6:	af00      	add	r7, sp, #0
	if (stepChange == 0  )	{
 80038d8:	4b0a      	ldr	r3, [pc, #40]	; (8003904 <decreaseStepchange+0x30>)
 80038da:	881b      	ldrh	r3, [r3, #0]
 80038dc:	b29b      	uxth	r3, r3
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d104      	bne.n	80038ec <decreaseStepchange+0x18>
		stepChange = MAX_STEP;
 80038e2:	4b08      	ldr	r3, [pc, #32]	; (8003904 <decreaseStepchange+0x30>)
 80038e4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80038e8:	801a      	strh	r2, [r3, #0]
	}
	else {
		stepChange--;
	}
}
 80038ea:	e006      	b.n	80038fa <decreaseStepchange+0x26>
		stepChange--;
 80038ec:	4b05      	ldr	r3, [pc, #20]	; (8003904 <decreaseStepchange+0x30>)
 80038ee:	881b      	ldrh	r3, [r3, #0]
 80038f0:	b29b      	uxth	r3, r3
 80038f2:	3b01      	subs	r3, #1
 80038f4:	b29a      	uxth	r2, r3
 80038f6:	4b03      	ldr	r3, [pc, #12]	; (8003904 <decreaseStepchange+0x30>)
 80038f8:	801a      	strh	r2, [r3, #0]
}
 80038fa:	bf00      	nop
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bc80      	pop	{r7}
 8003900:	4770      	bx	lr
 8003902:	bf00      	nop
 8003904:	20001368 	.word	0x20001368

08003908 <getStepchange>:

uint16_t getStepchange()
{
 8003908:	b480      	push	{r7}
 800390a:	af00      	add	r7, sp, #0
	return stepChange;
 800390c:	4b03      	ldr	r3, [pc, #12]	; (800391c <getStepchange+0x14>)
 800390e:	881b      	ldrh	r3, [r3, #0]
 8003910:	b29b      	uxth	r3, r3
}
 8003912:	4618      	mov	r0, r3
 8003914:	46bd      	mov	sp, r7
 8003916:	bc80      	pop	{r7}
 8003918:	4770      	bx	lr
 800391a:	bf00      	nop
 800391c:	20001368 	.word	0x20001368

08003920 <Step_setStepChange>:
void Step_setStepChange(uint16_t value)
{
 8003920:	b480      	push	{r7}
 8003922:	b083      	sub	sp, #12
 8003924:	af00      	add	r7, sp, #0
 8003926:	4603      	mov	r3, r0
 8003928:	80fb      	strh	r3, [r7, #6]
	stepChange = value;
 800392a:	4a04      	ldr	r2, [pc, #16]	; (800393c <Step_setStepChange+0x1c>)
 800392c:	88fb      	ldrh	r3, [r7, #6]
 800392e:	8013      	strh	r3, [r2, #0]
}
 8003930:	bf00      	nop
 8003932:	370c      	adds	r7, #12
 8003934:	46bd      	mov	sp, r7
 8003936:	bc80      	pop	{r7}
 8003938:	4770      	bx	lr
 800393a:	bf00      	nop
 800393c:	20001368 	.word	0x20001368

08003940 <Step_getPercentChange>:
uint8_t Step_getPercentChange()
{
 8003940:	b480      	push	{r7}
 8003942:	af00      	add	r7, sp, #0
	return steppercentChange;
 8003944:	4b02      	ldr	r3, [pc, #8]	; (8003950 <Step_getPercentChange+0x10>)
 8003946:	781b      	ldrb	r3, [r3, #0]
}
 8003948:	4618      	mov	r0, r3
 800394a:	46bd      	mov	sp, r7
 800394c:	bc80      	pop	{r7}
 800394e:	4770      	bx	lr
 8003950:	2000136a 	.word	0x2000136a

08003954 <Step_setPercentChange>:

void Step_setPercentChange(uint8_t percent)
{
 8003954:	b480      	push	{r7}
 8003956:	b083      	sub	sp, #12
 8003958:	af00      	add	r7, sp, #0
 800395a:	4603      	mov	r3, r0
 800395c:	71fb      	strb	r3, [r7, #7]
	steppercentChange = percent;
 800395e:	4a04      	ldr	r2, [pc, #16]	; (8003970 <Step_setPercentChange+0x1c>)
 8003960:	79fb      	ldrb	r3, [r7, #7]
 8003962:	7013      	strb	r3, [r2, #0]
}
 8003964:	bf00      	nop
 8003966:	370c      	adds	r7, #12
 8003968:	46bd      	mov	sp, r7
 800396a:	bc80      	pop	{r7}
 800396c:	4770      	bx	lr
 800396e:	bf00      	nop
 8003970:	2000136a 	.word	0x2000136a

08003974 <Step_setChangeMode>:

void Step_setChangeMode(Stepmotor_change_mode_t mode)
{
 8003974:	b480      	push	{r7}
 8003976:	b083      	sub	sp, #12
 8003978:	af00      	add	r7, sp, #0
 800397a:	4603      	mov	r3, r0
 800397c:	71fb      	strb	r3, [r7, #7]
	stepMode = mode;
 800397e:	4a04      	ldr	r2, [pc, #16]	; (8003990 <Step_setChangeMode+0x1c>)
 8003980:	79fb      	ldrb	r3, [r7, #7]
 8003982:	7013      	strb	r3, [r2, #0]
}
 8003984:	bf00      	nop
 8003986:	370c      	adds	r7, #12
 8003988:	46bd      	mov	sp, r7
 800398a:	bc80      	pop	{r7}
 800398c:	4770      	bx	lr
 800398e:	bf00      	nop
 8003990:	20000002 	.word	0x20000002

08003994 <Step_getChangemode>:

Stepmotor_change_mode_t Step_getChangemode()
{
 8003994:	b480      	push	{r7}
 8003996:	af00      	add	r7, sp, #0
	return stepMode;
 8003998:	4b02      	ldr	r3, [pc, #8]	; (80039a4 <Step_getChangemode+0x10>)
 800399a:	781b      	ldrb	r3, [r3, #0]
}
 800399c:	4618      	mov	r0, r3
 800399e:	46bd      	mov	sp, r7
 80039a0:	bc80      	pop	{r7}
 80039a2:	4770      	bx	lr
 80039a4:	20000002 	.word	0x20000002

080039a8 <Step_step>:

void Step_step()
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b082      	sub	sp, #8
 80039ac:	af00      	add	r7, sp, #0
	uint8_t dir = Step_getDir();
 80039ae:	f7ff ff49 	bl	8003844 <Step_getDir>
 80039b2:	4603      	mov	r3, r0
 80039b4:	71fb      	strb	r3, [r7, #7]
//	if (HAL_GPIO_ReadPin(LIMIT_SWITCH_MAX_GPIO_Port, LIMIT_SWITCH_MAX_Pin) == 0 && dir == STEPM_DIR_INC )	return ;
	if (HAL_GPIO_ReadPin(LIMIT_SWITCH_MIN_GPIO_Port, LIMIT_SWITCH_MIN_Pin) == 0 && dir == STEPM_DIR_DEC )  return;
 80039b6:	2104      	movs	r1, #4
 80039b8:	480d      	ldr	r0, [pc, #52]	; (80039f0 <Step_step+0x48>)
 80039ba:	f005 fafd 	bl	8008fb8 <HAL_GPIO_ReadPin>
 80039be:	4603      	mov	r3, r0
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d102      	bne.n	80039ca <Step_step+0x22>
 80039c4:	79fb      	ldrb	r3, [r7, #7]
 80039c6:	2b02      	cmp	r3, #2
 80039c8:	d00d      	beq.n	80039e6 <Step_step+0x3e>
	A4988_EnableDriver();
 80039ca:	f003 f8eb 	bl	8006ba4 <A4988_EnableDriver>
	A4988_StepByStep(getStepchange(), dir );
 80039ce:	f7ff ff9b 	bl	8003908 <getStepchange>
 80039d2:	4603      	mov	r3, r0
 80039d4:	461a      	mov	r2, r3
 80039d6:	79fb      	ldrb	r3, [r7, #7]
 80039d8:	4619      	mov	r1, r3
 80039da:	4610      	mov	r0, r2
 80039dc:	f003 f91e 	bl	8006c1c <A4988_StepByStep>
	A4988_DisableDriver();
 80039e0:	f003 f8fe 	bl	8006be0 <A4988_DisableDriver>
 80039e4:	e000      	b.n	80039e8 <Step_step+0x40>
	if (HAL_GPIO_ReadPin(LIMIT_SWITCH_MIN_GPIO_Port, LIMIT_SWITCH_MIN_Pin) == 0 && dir == STEPM_DIR_DEC )  return;
 80039e6:	bf00      	nop

}
 80039e8:	3708      	adds	r7, #8
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	bf00      	nop
 80039f0:	40010c00 	.word	0x40010c00

080039f4 <Step_percent>:

void Step_percent()
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b082      	sub	sp, #8
 80039f8:	af00      	add	r7, sp, #0
	uint8_t dir = Step_getDir();
 80039fa:	f7ff ff23 	bl	8003844 <Step_getDir>
 80039fe:	4603      	mov	r3, r0
 8003a00:	71fb      	strb	r3, [r7, #7]
//	if (HAL_GPIO_ReadPin(LIMIT_SWITCH_MAX_GPIO_Port, LIMIT_SWITCH_MAX_Pin) == 0 && dir == STEPM_DIR_INC )	return ;
	if (HAL_GPIO_ReadPin(LIMIT_SWITCH_MIN_GPIO_Port, LIMIT_SWITCH_MIN_Pin) == 0 && dir == STEPM_DIR_DEC )  return;
 8003a02:	2104      	movs	r1, #4
 8003a04:	480e      	ldr	r0, [pc, #56]	; (8003a40 <Step_percent+0x4c>)
 8003a06:	f005 fad7 	bl	8008fb8 <HAL_GPIO_ReadPin>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d102      	bne.n	8003a16 <Step_percent+0x22>
 8003a10:	79fb      	ldrb	r3, [r7, #7]
 8003a12:	2b02      	cmp	r3, #2
 8003a14:	d010      	beq.n	8003a38 <Step_percent+0x44>
	uint16_t stepChange = (uint16_t)(Step_getPercentChange() * MAX_STEP / 100);
 8003a16:	f7ff ff93 	bl	8003940 <Step_getPercentChange>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	b29b      	uxth	r3, r3
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	80bb      	strh	r3, [r7, #4]
	A4988_EnableDriver();
 8003a22:	f003 f8bf 	bl	8006ba4 <A4988_EnableDriver>
	A4988_StepByStep(stepChange, dir);
 8003a26:	88bb      	ldrh	r3, [r7, #4]
 8003a28:	79fa      	ldrb	r2, [r7, #7]
 8003a2a:	4611      	mov	r1, r2
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f003 f8f5 	bl	8006c1c <A4988_StepByStep>
	A4988_DisableDriver();
 8003a32:	f003 f8d5 	bl	8006be0 <A4988_DisableDriver>
 8003a36:	e000      	b.n	8003a3a <Step_percent+0x46>
	if (HAL_GPIO_ReadPin(LIMIT_SWITCH_MIN_GPIO_Port, LIMIT_SWITCH_MIN_Pin) == 0 && dir == STEPM_DIR_DEC )  return;
 8003a38:	bf00      	nop
}
 8003a3a:	3708      	adds	r7, #8
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}
 8003a40:	40010c00 	.word	0x40010c00

08003a44 <setStepValorDir>:
{

}

void setStepValorDir (STEP_t ValorDir)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b083      	sub	sp, #12
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	71fb      	strb	r3, [r7, #7]
	stepValorDir = ValorDir;
 8003a4e:	4a04      	ldr	r2, [pc, #16]	; (8003a60 <setStepValorDir+0x1c>)
 8003a50:	79fb      	ldrb	r3, [r7, #7]
 8003a52:	7013      	strb	r3, [r2, #0]
}
 8003a54:	bf00      	nop
 8003a56:	370c      	adds	r7, #12
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bc80      	pop	{r7}
 8003a5c:	4770      	bx	lr
 8003a5e:	bf00      	nop
 8003a60:	2000136e 	.word	0x2000136e

08003a64 <getStepValorDir>:

STEP_t getStepValorDir()
{
 8003a64:	b480      	push	{r7}
 8003a66:	af00      	add	r7, sp, #0
	return stepValorDir;
 8003a68:	4b02      	ldr	r3, [pc, #8]	; (8003a74 <getStepValorDir+0x10>)
 8003a6a:	781b      	ldrb	r3, [r3, #0]
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bc80      	pop	{r7}
 8003a72:	4770      	bx	lr
 8003a74:	2000136e 	.word	0x2000136e

08003a78 <getCurswitch>:

SWITCH_t getCurswitch()
{
 8003a78:	b480      	push	{r7}
 8003a7a:	af00      	add	r7, sp, #0
	return curSwitch;
 8003a7c:	4b02      	ldr	r3, [pc, #8]	; (8003a88 <getCurswitch+0x10>)
 8003a7e:	781b      	ldrb	r3, [r3, #0]
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bc80      	pop	{r7}
 8003a86:	4770      	bx	lr
 8003a88:	20000003 	.word	0x20000003

08003a8c <getClearflag>:
	curSwitch = ONorOFF;
}


uint8_t getClearflag()
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	af00      	add	r7, sp, #0
	return clearflag;
 8003a90:	4b03      	ldr	r3, [pc, #12]	; (8003aa0 <getClearflag+0x14>)
 8003a92:	781b      	ldrb	r3, [r3, #0]
 8003a94:	b2db      	uxtb	r3, r3
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bc80      	pop	{r7}
 8003a9c:	4770      	bx	lr
 8003a9e:	bf00      	nop
 8003aa0:	2000136d 	.word	0x2000136d

08003aa4 <setClearflag>:

void setClearflag(uint8_t ENorDIS)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b083      	sub	sp, #12
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	4603      	mov	r3, r0
 8003aac:	71fb      	strb	r3, [r7, #7]
	clearflag = ENorDIS;
 8003aae:	4a04      	ldr	r2, [pc, #16]	; (8003ac0 <setClearflag+0x1c>)
 8003ab0:	79fb      	ldrb	r3, [r7, #7]
 8003ab2:	7013      	strb	r3, [r2, #0]
}
 8003ab4:	bf00      	nop
 8003ab6:	370c      	adds	r7, #12
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bc80      	pop	{r7}
 8003abc:	4770      	bx	lr
 8003abe:	bf00      	nop
 8003ac0:	2000136d 	.word	0x2000136d

08003ac4 <switchcurControl>:


void switchcurControl()
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	af00      	add	r7, sp, #0
	switch (curControl)	{
 8003ac8:	4b09      	ldr	r3, [pc, #36]	; (8003af0 <switchcurControl+0x2c>)
 8003aca:	781b      	ldrb	r3, [r3, #0]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d005      	beq.n	8003adc <switchcurControl+0x18>
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d107      	bne.n	8003ae4 <switchcurControl+0x20>
	case CONTROL_TRANS:
		curControl = CONTROL_STEP;
 8003ad4:	4b06      	ldr	r3, [pc, #24]	; (8003af0 <switchcurControl+0x2c>)
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	701a      	strb	r2, [r3, #0]
		break;
 8003ada:	e004      	b.n	8003ae6 <switchcurControl+0x22>
	case CONTROL_STEP:
		curControl = CONTROL_TRANS;
 8003adc:	4b04      	ldr	r3, [pc, #16]	; (8003af0 <switchcurControl+0x2c>)
 8003ade:	2201      	movs	r2, #1
 8003ae0:	701a      	strb	r2, [r3, #0]
		break;
 8003ae2:	e000      	b.n	8003ae6 <switchcurControl+0x22>
	default:
		break;
 8003ae4:	bf00      	nop
	}
}
 8003ae6:	bf00      	nop
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bc80      	pop	{r7}
 8003aec:	4770      	bx	lr
 8003aee:	bf00      	nop
 8003af0:	2000136b 	.word	0x2000136b

08003af4 <getcurControl>:

CONTROL_t getcurControl()
{
 8003af4:	b480      	push	{r7}
 8003af6:	af00      	add	r7, sp, #0
	return curControl;
 8003af8:	4b02      	ldr	r3, [pc, #8]	; (8003b04 <getcurControl+0x10>)
 8003afa:	781b      	ldrb	r3, [r3, #0]
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bc80      	pop	{r7}
 8003b02:	4770      	bx	lr
 8003b04:	2000136b 	.word	0x2000136b

08003b08 <nextMonitor>:

void nextMonitor(uint8_t volatile  * curMonitor, uint8_t max)	{
 8003b08:	b480      	push	{r7}
 8003b0a:	b083      	sub	sp, #12
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
 8003b10:	460b      	mov	r3, r1
 8003b12:	70fb      	strb	r3, [r7, #3]
	if (*curMonitor >= max )		{
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	781b      	ldrb	r3, [r3, #0]
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	78fa      	ldrb	r2, [r7, #3]
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d803      	bhi.n	8003b28 <nextMonitor+0x20>
		*curMonitor = 0;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2200      	movs	r2, #0
 8003b24:	701a      	strb	r2, [r3, #0]
	}
	else {
		(*curMonitor)++;
	}
}
 8003b26:	e006      	b.n	8003b36 <nextMonitor+0x2e>
		(*curMonitor)++;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	781b      	ldrb	r3, [r3, #0]
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	3301      	adds	r3, #1
 8003b30:	b2da      	uxtb	r2, r3
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	701a      	strb	r2, [r3, #0]
}
 8003b36:	bf00      	nop
 8003b38:	370c      	adds	r7, #12
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bc80      	pop	{r7}
 8003b3e:	4770      	bx	lr

08003b40 <previousMonitor>:

void previousMonitor(uint8_t volatile  * curMonitor, uint8_t max)	{
 8003b40:	b480      	push	{r7}
 8003b42:	b083      	sub	sp, #12
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
 8003b48:	460b      	mov	r3, r1
 8003b4a:	70fb      	strb	r3, [r7, #3]
	if (*curMonitor == 0 )		{
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	781b      	ldrb	r3, [r3, #0]
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d103      	bne.n	8003b5e <previousMonitor+0x1e>
		*curMonitor = max ;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	78fa      	ldrb	r2, [r7, #3]
 8003b5a:	701a      	strb	r2, [r3, #0]
	}
	else {
		(*curMonitor)--;
	}
}
 8003b5c:	e006      	b.n	8003b6c <previousMonitor+0x2c>
		(*curMonitor)--;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	781b      	ldrb	r3, [r3, #0]
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	3b01      	subs	r3, #1
 8003b66:	b2da      	uxtb	r2, r3
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	701a      	strb	r2, [r3, #0]
}
 8003b6c:	bf00      	nop
 8003b6e:	370c      	adds	r7, #12
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bc80      	pop	{r7}
 8003b74:	4770      	bx	lr
	...

08003b78 <get_curMonitor>:

uint8_t get_curMonitor(void)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	af00      	add	r7, sp, #0
	return curMonitor;
 8003b7c:	4b03      	ldr	r3, [pc, #12]	; (8003b8c <get_curMonitor+0x14>)
 8003b7e:	781b      	ldrb	r3, [r3, #0]
 8003b80:	b2db      	uxtb	r3, r3
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bc80      	pop	{r7}
 8003b88:	4770      	bx	lr
 8003b8a:	bf00      	nop
 8003b8c:	2000136c 	.word	0x2000136c

08003b90 <setcurMonitor>:
void setcurMonitor(uint8_t index)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b083      	sub	sp, #12
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	4603      	mov	r3, r0
 8003b98:	71fb      	strb	r3, [r7, #7]
	curMonitor = index;
 8003b9a:	4a04      	ldr	r2, [pc, #16]	; (8003bac <setcurMonitor+0x1c>)
 8003b9c:	79fb      	ldrb	r3, [r7, #7]
 8003b9e:	7013      	strb	r3, [r2, #0]
}
 8003ba0:	bf00      	nop
 8003ba2:	370c      	adds	r7, #12
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bc80      	pop	{r7}
 8003ba8:	4770      	bx	lr
 8003baa:	bf00      	nop
 8003bac:	2000136c 	.word	0x2000136c

08003bb0 <buttonMENU_handler>:



void buttonMENU_handler()
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	af00      	add	r7, sp, #0
	switch(myDisplayMode)	{
 8003bb4:	4b37      	ldr	r3, [pc, #220]	; (8003c94 <buttonMENU_handler+0xe4>)
 8003bb6:	781b      	ldrb	r3, [r3, #0]
 8003bb8:	2b09      	cmp	r3, #9
 8003bba:	d868      	bhi.n	8003c8e <buttonMENU_handler+0xde>
 8003bbc:	a201      	add	r2, pc, #4	; (adr r2, 8003bc4 <buttonMENU_handler+0x14>)
 8003bbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bc2:	bf00      	nop
 8003bc4:	08003bed 	.word	0x08003bed
 8003bc8:	08003c11 	.word	0x08003c11
 8003bcc:	08003c1f 	.word	0x08003c1f
 8003bd0:	08003c2d 	.word	0x08003c2d
 8003bd4:	08003c3b 	.word	0x08003c3b
 8003bd8:	08003c49 	.word	0x08003c49
 8003bdc:	08003c73 	.word	0x08003c73
 8003be0:	08003c81 	.word	0x08003c81
 8003be4:	08003c57 	.word	0x08003c57
 8003be8:	08003c65 	.word	0x08003c65
	case HOME:
		if (displayCalibFlag)	{
 8003bec:	4b2a      	ldr	r3, [pc, #168]	; (8003c98 <buttonMENU_handler+0xe8>)
 8003bee:	781b      	ldrb	r3, [r3, #0]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d003      	beq.n	8003bfc <buttonMENU_handler+0x4c>
			myDisplayMode = COUNTDOWN_SW_OFF;
 8003bf4:	4b27      	ldr	r3, [pc, #156]	; (8003c94 <buttonMENU_handler+0xe4>)
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	701a      	strb	r2, [r3, #0]
 8003bfa:	e005      	b.n	8003c08 <buttonMENU_handler+0x58>
		}
		else {
			myDisplayMode = MONITOR;
 8003bfc:	4b25      	ldr	r3, [pc, #148]	; (8003c94 <buttonMENU_handler+0xe4>)
 8003bfe:	2203      	movs	r2, #3
 8003c00:	701a      	strb	r2, [r3, #0]
			setcurMonitor(0);
 8003c02:	2000      	movs	r0, #0
 8003c04:	f7ff ffc4 	bl	8003b90 <setcurMonitor>
		}
		setClearflag(ENABLE);
 8003c08:	2001      	movs	r0, #1
 8003c0a:	f7ff ff4b 	bl	8003aa4 <setClearflag>
		break;
 8003c0e:	e03f      	b.n	8003c90 <buttonMENU_handler+0xe0>
	case COUNTDOWN_SW_OFF:
		myDisplayMode = MONITOR;
 8003c10:	4b20      	ldr	r3, [pc, #128]	; (8003c94 <buttonMENU_handler+0xe4>)
 8003c12:	2203      	movs	r2, #3
 8003c14:	701a      	strb	r2, [r3, #0]
		setClearflag(ENABLE);
 8003c16:	2001      	movs	r0, #1
 8003c18:	f7ff ff44 	bl	8003aa4 <setClearflag>
		break;
 8003c1c:	e038      	b.n	8003c90 <buttonMENU_handler+0xe0>
	case AFTER_SW_OFF:
		myDisplayMode = MONITOR;
 8003c1e:	4b1d      	ldr	r3, [pc, #116]	; (8003c94 <buttonMENU_handler+0xe4>)
 8003c20:	2203      	movs	r2, #3
 8003c22:	701a      	strb	r2, [r3, #0]
		setClearflag(ENABLE);
 8003c24:	2001      	movs	r0, #1
 8003c26:	f7ff ff3d 	bl	8003aa4 <setClearflag>
		break;
 8003c2a:	e031      	b.n	8003c90 <buttonMENU_handler+0xe0>
	case MONITOR:
		myDisplayMode = MENU_CONTROL;
 8003c2c:	4b19      	ldr	r3, [pc, #100]	; (8003c94 <buttonMENU_handler+0xe4>)
 8003c2e:	2204      	movs	r2, #4
 8003c30:	701a      	strb	r2, [r3, #0]
		setClearflag(ENABLE);
 8003c32:	2001      	movs	r0, #1
 8003c34:	f7ff ff36 	bl	8003aa4 <setClearflag>
		break;
 8003c38:	e02a      	b.n	8003c90 <buttonMENU_handler+0xe0>
	case MENU_CONTROL:
		myDisplayMode = HOME;
 8003c3a:	4b16      	ldr	r3, [pc, #88]	; (8003c94 <buttonMENU_handler+0xe4>)
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	701a      	strb	r2, [r3, #0]
		setClearflag(ENABLE);
 8003c40:	2001      	movs	r0, #1
 8003c42:	f7ff ff2f 	bl	8003aa4 <setClearflag>
		break;
 8003c46:	e023      	b.n	8003c90 <buttonMENU_handler+0xe0>
	case VOLTAGE_CONTROL:
		myDisplayMode = HOME;
 8003c48:	4b12      	ldr	r3, [pc, #72]	; (8003c94 <buttonMENU_handler+0xe4>)
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	701a      	strb	r2, [r3, #0]
		setClearflag(ENABLE);
 8003c4e:	2001      	movs	r0, #1
 8003c50:	f7ff ff28 	bl	8003aa4 <setClearflag>
		break;
 8003c54:	e01c      	b.n	8003c90 <buttonMENU_handler+0xe0>
	case STEP_VAL_CONTROL:
		myDisplayMode = HOME;
 8003c56:	4b0f      	ldr	r3, [pc, #60]	; (8003c94 <buttonMENU_handler+0xe4>)
 8003c58:	2200      	movs	r2, #0
 8003c5a:	701a      	strb	r2, [r3, #0]
		setClearflag(ENABLE);
 8003c5c:	2001      	movs	r0, #1
 8003c5e:	f7ff ff21 	bl	8003aa4 <setClearflag>
		break;
 8003c62:	e015      	b.n	8003c90 <buttonMENU_handler+0xe0>
	case STEP_DIR_CONTROL:
		myDisplayMode = HOME;
 8003c64:	4b0b      	ldr	r3, [pc, #44]	; (8003c94 <buttonMENU_handler+0xe4>)
 8003c66:	2200      	movs	r2, #0
 8003c68:	701a      	strb	r2, [r3, #0]
		setClearflag(ENABLE);
 8003c6a:	2001      	movs	r0, #1
 8003c6c:	f7ff ff1a 	bl	8003aa4 <setClearflag>
			break;
 8003c70:	e00e      	b.n	8003c90 <buttonMENU_handler+0xe0>
	case ON_OFF_CONTROL:
		myDisplayMode = HOME;
 8003c72:	4b08      	ldr	r3, [pc, #32]	; (8003c94 <buttonMENU_handler+0xe4>)
 8003c74:	2200      	movs	r2, #0
 8003c76:	701a      	strb	r2, [r3, #0]
		setClearflag(ENABLE);
 8003c78:	2001      	movs	r0, #1
 8003c7a:	f7ff ff13 	bl	8003aa4 <setClearflag>
		break;
 8003c7e:	e007      	b.n	8003c90 <buttonMENU_handler+0xe0>
	case COMPLETE_CONTROL:
		myDisplayMode = HOME;
 8003c80:	4b04      	ldr	r3, [pc, #16]	; (8003c94 <buttonMENU_handler+0xe4>)
 8003c82:	2200      	movs	r2, #0
 8003c84:	701a      	strb	r2, [r3, #0]
		setClearflag(ENABLE);
 8003c86:	2001      	movs	r0, #1
 8003c88:	f7ff ff0c 	bl	8003aa4 <setClearflag>
		break;
 8003c8c:	e000      	b.n	8003c90 <buttonMENU_handler+0xe0>
	default:
		break;
 8003c8e:	bf00      	nop
	}
}
 8003c90:	bf00      	nop
 8003c92:	bd80      	pop	{r7, pc}
 8003c94:	200005c4 	.word	0x200005c4
 8003c98:	200005c5 	.word	0x200005c5

08003c9c <buttonOK_handler>:
void buttonOK_handler()
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	af00      	add	r7, sp, #0
	switch(myDisplayMode)	{
 8003ca0:	4b44      	ldr	r3, [pc, #272]	; (8003db4 <buttonOK_handler+0x118>)
 8003ca2:	781b      	ldrb	r3, [r3, #0]
 8003ca4:	2b09      	cmp	r3, #9
 8003ca6:	d87f      	bhi.n	8003da8 <buttonOK_handler+0x10c>
 8003ca8:	a201      	add	r2, pc, #4	; (adr r2, 8003cb0 <buttonOK_handler+0x14>)
 8003caa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cae:	bf00      	nop
 8003cb0:	08003da9 	.word	0x08003da9
 8003cb4:	08003da9 	.word	0x08003da9
 8003cb8:	08003da9 	.word	0x08003da9
 8003cbc:	08003da9 	.word	0x08003da9
 8003cc0:	08003cd9 	.word	0x08003cd9
 8003cc4:	08003d09 	.word	0x08003d09
 8003cc8:	08003d61 	.word	0x08003d61
 8003ccc:	08003d9b 	.word	0x08003d9b
 8003cd0:	08003d45 	.word	0x08003d45
 8003cd4:	08003d53 	.word	0x08003d53
	case AFTER_SW_OFF:
		break;
	case MONITOR:
		break;
	case MENU_CONTROL:
		if (getcurControl() == CONTROL_TRANS)	{
 8003cd8:	f7ff ff0c 	bl	8003af4 <getcurControl>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d106      	bne.n	8003cf0 <buttonOK_handler+0x54>
			myDisplayMode = ON_OFF_CONTROL;
 8003ce2:	4b34      	ldr	r3, [pc, #208]	; (8003db4 <buttonOK_handler+0x118>)
 8003ce4:	2206      	movs	r2, #6
 8003ce6:	701a      	strb	r2, [r3, #0]
			setClearflag(ENABLE);
 8003ce8:	2001      	movs	r0, #1
 8003cea:	f7ff fedb 	bl	8003aa4 <setClearflag>
		}
		else if (getcurControl() == CONTROL_STEP)	{
			myDisplayMode = VOLTAGE_CONTROL;
			setClearflag(ENABLE);
		}
		break;
 8003cee:	e05d      	b.n	8003dac <buttonOK_handler+0x110>
		else if (getcurControl() == CONTROL_STEP)	{
 8003cf0:	f7ff ff00 	bl	8003af4 <getcurControl>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d158      	bne.n	8003dac <buttonOK_handler+0x110>
			myDisplayMode = VOLTAGE_CONTROL;
 8003cfa:	4b2e      	ldr	r3, [pc, #184]	; (8003db4 <buttonOK_handler+0x118>)
 8003cfc:	2205      	movs	r2, #5
 8003cfe:	701a      	strb	r2, [r3, #0]
			setClearflag(ENABLE);
 8003d00:	2001      	movs	r0, #1
 8003d02:	f7ff fecf 	bl	8003aa4 <setClearflag>
		break;
 8003d06:	e051      	b.n	8003dac <buttonOK_handler+0x110>
	case VOLTAGE_CONTROL:
		switch (getStepValorDir())	{
 8003d08:	f7ff feac 	bl	8003a64 <getStepValorDir>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	2b02      	cmp	r3, #2
 8003d10:	d00e      	beq.n	8003d30 <buttonOK_handler+0x94>
 8003d12:	2b02      	cmp	r3, #2
 8003d14:	dc11      	bgt.n	8003d3a <buttonOK_handler+0x9e>
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d002      	beq.n	8003d20 <buttonOK_handler+0x84>
 8003d1a:	2b01      	cmp	r3, #1
 8003d1c:	d004      	beq.n	8003d28 <buttonOK_handler+0x8c>
			break;
		case STEP_CONFIRM:
			triggerTaskflag(TASK_CTRL_STEPMOR, FLAG_EN);
			break;
		default:
			break;
 8003d1e:	e00c      	b.n	8003d3a <buttonOK_handler+0x9e>
			myDisplayMode = STEP_VAL_CONTROL;
 8003d20:	4b24      	ldr	r3, [pc, #144]	; (8003db4 <buttonOK_handler+0x118>)
 8003d22:	2208      	movs	r2, #8
 8003d24:	701a      	strb	r2, [r3, #0]
			break;
 8003d26:	e009      	b.n	8003d3c <buttonOK_handler+0xa0>
			myDisplayMode = STEP_DIR_CONTROL;
 8003d28:	4b22      	ldr	r3, [pc, #136]	; (8003db4 <buttonOK_handler+0x118>)
 8003d2a:	2209      	movs	r2, #9
 8003d2c:	701a      	strb	r2, [r3, #0]
			break;
 8003d2e:	e005      	b.n	8003d3c <buttonOK_handler+0xa0>
			triggerTaskflag(TASK_CTRL_STEPMOR, FLAG_EN);
 8003d30:	2101      	movs	r1, #1
 8003d32:	2006      	movs	r0, #6
 8003d34:	f001 fcfe 	bl	8005734 <triggerTaskflag>
			break;
 8003d38:	e000      	b.n	8003d3c <buttonOK_handler+0xa0>
			break;
 8003d3a:	bf00      	nop
		}
		setClearflag(ENABLE);
 8003d3c:	2001      	movs	r0, #1
 8003d3e:	f7ff feb1 	bl	8003aa4 <setClearflag>
		break;
 8003d42:	e034      	b.n	8003dae <buttonOK_handler+0x112>
	case STEP_VAL_CONTROL:
		myDisplayMode = VOLTAGE_CONTROL;
 8003d44:	4b1b      	ldr	r3, [pc, #108]	; (8003db4 <buttonOK_handler+0x118>)
 8003d46:	2205      	movs	r2, #5
 8003d48:	701a      	strb	r2, [r3, #0]
		setClearflag(ENABLE);
 8003d4a:	2001      	movs	r0, #1
 8003d4c:	f7ff feaa 	bl	8003aa4 <setClearflag>
		break;
 8003d50:	e02d      	b.n	8003dae <buttonOK_handler+0x112>
	case STEP_DIR_CONTROL:
		myDisplayMode = VOLTAGE_CONTROL;
 8003d52:	4b18      	ldr	r3, [pc, #96]	; (8003db4 <buttonOK_handler+0x118>)
 8003d54:	2205      	movs	r2, #5
 8003d56:	701a      	strb	r2, [r3, #0]
		setClearflag(ENABLE);
 8003d58:	2001      	movs	r0, #1
 8003d5a:	f7ff fea3 	bl	8003aa4 <setClearflag>
		break;
 8003d5e:	e026      	b.n	8003dae <buttonOK_handler+0x112>
	case ON_OFF_CONTROL:
		// switch MBA
		if(getCurswitch() == SW_ON)	{
 8003d60:	f7ff fe8a 	bl	8003a78 <getCurswitch>
 8003d64:	4603      	mov	r3, r0
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d107      	bne.n	8003d7a <buttonOK_handler+0xde>
			myStation.MBAstate = switchContactor(MBA_ON);
 8003d6a:	2001      	movs	r0, #1
 8003d6c:	f7fe fb90 	bl	8002490 <switchContactor>
 8003d70:	4603      	mov	r3, r0
 8003d72:	461a      	mov	r2, r3
 8003d74:	4b10      	ldr	r3, [pc, #64]	; (8003db8 <buttonOK_handler+0x11c>)
 8003d76:	719a      	strb	r2, [r3, #6]
 8003d78:	e006      	b.n	8003d88 <buttonOK_handler+0xec>


		}
		else {
			myStation.MBAstate = switchContactor(MBA_OFF);
 8003d7a:	2002      	movs	r0, #2
 8003d7c:	f7fe fb88 	bl	8002490 <switchContactor>
 8003d80:	4603      	mov	r3, r0
 8003d82:	461a      	mov	r2, r3
 8003d84:	4b0c      	ldr	r3, [pc, #48]	; (8003db8 <buttonOK_handler+0x11c>)
 8003d86:	719a      	strb	r2, [r3, #6]
		}

		setSwitchtime();
 8003d88:	f7fc fc14 	bl	80005b4 <setSwitchtime>
		myDisplayMode = COMPLETE_CONTROL;
 8003d8c:	4b09      	ldr	r3, [pc, #36]	; (8003db4 <buttonOK_handler+0x118>)
 8003d8e:	2207      	movs	r2, #7
 8003d90:	701a      	strb	r2, [r3, #0]
		setClearflag(ENABLE);
 8003d92:	2001      	movs	r0, #1
 8003d94:	f7ff fe86 	bl	8003aa4 <setClearflag>
		break;
 8003d98:	e009      	b.n	8003dae <buttonOK_handler+0x112>
	case COMPLETE_CONTROL:
		myDisplayMode = ON_OFF_CONTROL;
 8003d9a:	4b06      	ldr	r3, [pc, #24]	; (8003db4 <buttonOK_handler+0x118>)
 8003d9c:	2206      	movs	r2, #6
 8003d9e:	701a      	strb	r2, [r3, #0]
		setClearflag(ENABLE);
 8003da0:	2001      	movs	r0, #1
 8003da2:	f7ff fe7f 	bl	8003aa4 <setClearflag>
		break;
 8003da6:	e002      	b.n	8003dae <buttonOK_handler+0x112>
	default:
		break;
 8003da8:	bf00      	nop
 8003daa:	e000      	b.n	8003dae <buttonOK_handler+0x112>
		break;
 8003dac:	bf00      	nop
	}
}
 8003dae:	bf00      	nop
 8003db0:	bd80      	pop	{r7, pc}
 8003db2:	bf00      	nop
 8003db4:	200005c4 	.word	0x200005c4
 8003db8:	20000474 	.word	0x20000474

08003dbc <buttonDOWN_handler>:
void buttonDOWN_handler()
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	af00      	add	r7, sp, #0
	switch(myDisplayMode)	{
 8003dc0:	4b36      	ldr	r3, [pc, #216]	; (8003e9c <buttonDOWN_handler+0xe0>)
 8003dc2:	781b      	ldrb	r3, [r3, #0]
 8003dc4:	2b09      	cmp	r3, #9
 8003dc6:	d865      	bhi.n	8003e94 <buttonDOWN_handler+0xd8>
 8003dc8:	a201      	add	r2, pc, #4	; (adr r2, 8003dd0 <buttonDOWN_handler+0x14>)
 8003dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dce:	bf00      	nop
 8003dd0:	08003e95 	.word	0x08003e95
 8003dd4:	08003e95 	.word	0x08003e95
 8003dd8:	08003e95 	.word	0x08003e95
 8003ddc:	08003df9 	.word	0x08003df9
 8003de0:	08003e11 	.word	0x08003e11
 8003de4:	08003e1d 	.word	0x08003e1d
 8003de8:	08003e6f 	.word	0x08003e6f
 8003dec:	08003e95 	.word	0x08003e95
 8003df0:	08003e57 	.word	0x08003e57
 8003df4:	08003e63 	.word	0x08003e63
		break;
	case AFTER_SW_OFF:
		break;
	case MONITOR:
		// move to next sensor ID
		nextMonitor(&curMonitor, myStation.ssNode_list->length);
 8003df8:	4b29      	ldr	r3, [pc, #164]	; (8003ea0 <buttonDOWN_handler+0xe4>)
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	b2db      	uxtb	r3, r3
 8003e00:	4619      	mov	r1, r3
 8003e02:	4828      	ldr	r0, [pc, #160]	; (8003ea4 <buttonDOWN_handler+0xe8>)
 8003e04:	f7ff fe80 	bl	8003b08 <nextMonitor>
		setClearflag(ENABLE);
 8003e08:	2001      	movs	r0, #1
 8003e0a:	f7ff fe4b 	bl	8003aa4 <setClearflag>
		break;
 8003e0e:	e042      	b.n	8003e96 <buttonDOWN_handler+0xda>
	case MENU_CONTROL:
		switchcurControl();
 8003e10:	f7ff fe58 	bl	8003ac4 <switchcurControl>
		setClearflag(ENABLE);
 8003e14:	2001      	movs	r0, #1
 8003e16:	f7ff fe45 	bl	8003aa4 <setClearflag>
		break;
 8003e1a:	e03c      	b.n	8003e96 <buttonDOWN_handler+0xda>
	case VOLTAGE_CONTROL:
		switch(getStepValorDir())	{
 8003e1c:	f7ff fe22 	bl	8003a64 <getStepValorDir>
 8003e20:	4603      	mov	r3, r0
 8003e22:	2b02      	cmp	r3, #2
 8003e24:	d00e      	beq.n	8003e44 <buttonDOWN_handler+0x88>
 8003e26:	2b02      	cmp	r3, #2
 8003e28:	dc10      	bgt.n	8003e4c <buttonDOWN_handler+0x90>
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d002      	beq.n	8003e34 <buttonDOWN_handler+0x78>
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d004      	beq.n	8003e3c <buttonDOWN_handler+0x80>
			break;
		case STEP_CONFIRM:
			setStepValorDir(STEP_VAL);
			break;
		default:
			break;
 8003e32:	e00b      	b.n	8003e4c <buttonDOWN_handler+0x90>
			setStepValorDir(STEP_DIR);
 8003e34:	2001      	movs	r0, #1
 8003e36:	f7ff fe05 	bl	8003a44 <setStepValorDir>
			break;
 8003e3a:	e008      	b.n	8003e4e <buttonDOWN_handler+0x92>
			setStepValorDir(STEP_CONFIRM);
 8003e3c:	2002      	movs	r0, #2
 8003e3e:	f7ff fe01 	bl	8003a44 <setStepValorDir>
			break;
 8003e42:	e004      	b.n	8003e4e <buttonDOWN_handler+0x92>
			setStepValorDir(STEP_VAL);
 8003e44:	2000      	movs	r0, #0
 8003e46:	f7ff fdfd 	bl	8003a44 <setStepValorDir>
			break;
 8003e4a:	e000      	b.n	8003e4e <buttonDOWN_handler+0x92>
			break;
 8003e4c:	bf00      	nop
		}
		setClearflag(ENABLE);
 8003e4e:	2001      	movs	r0, #1
 8003e50:	f7ff fe28 	bl	8003aa4 <setClearflag>
		break;
 8003e54:	e01f      	b.n	8003e96 <buttonDOWN_handler+0xda>
	case STEP_VAL_CONTROL:
		// decrease step value
		decreaseStepchange();
 8003e56:	f7ff fd3d 	bl	80038d4 <decreaseStepchange>
		setClearflag(ENABLE);
 8003e5a:	2001      	movs	r0, #1
 8003e5c:	f7ff fe22 	bl	8003aa4 <setClearflag>
		break;
 8003e60:	e019      	b.n	8003e96 <buttonDOWN_handler+0xda>
	case STEP_DIR_CONTROL:
		Step_toggleDir();
 8003e62:	f7ff fd09 	bl	8003878 <Step_toggleDir>
		setClearflag(ENABLE);
 8003e66:	2001      	movs	r0, #1
 8003e68:	f7ff fe1c 	bl	8003aa4 <setClearflag>
		break;
 8003e6c:	e013      	b.n	8003e96 <buttonDOWN_handler+0xda>
	case ON_OFF_CONTROL:
		//  switch ON/OFF
		switch (curSwitch) {
 8003e6e:	4b0e      	ldr	r3, [pc, #56]	; (8003ea8 <buttonDOWN_handler+0xec>)
 8003e70:	781b      	ldrb	r3, [r3, #0]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d005      	beq.n	8003e82 <buttonDOWN_handler+0xc6>
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d107      	bne.n	8003e8a <buttonDOWN_handler+0xce>
		case SW_ON:
			curSwitch = SW_OFF;
 8003e7a:	4b0b      	ldr	r3, [pc, #44]	; (8003ea8 <buttonDOWN_handler+0xec>)
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	701a      	strb	r2, [r3, #0]
			break;
 8003e80:	e004      	b.n	8003e8c <buttonDOWN_handler+0xd0>
		case SW_OFF:
			curSwitch = SW_ON;
 8003e82:	4b09      	ldr	r3, [pc, #36]	; (8003ea8 <buttonDOWN_handler+0xec>)
 8003e84:	2201      	movs	r2, #1
 8003e86:	701a      	strb	r2, [r3, #0]
			break;
 8003e88:	e000      	b.n	8003e8c <buttonDOWN_handler+0xd0>
		default:
			break;
 8003e8a:	bf00      	nop
		}
		setClearflag(ENABLE);
 8003e8c:	2001      	movs	r0, #1
 8003e8e:	f7ff fe09 	bl	8003aa4 <setClearflag>
		break;
 8003e92:	e000      	b.n	8003e96 <buttonDOWN_handler+0xda>
	case COMPLETE_CONTROL:
		break;
	default:
		break;
 8003e94:	bf00      	nop
	}
}
 8003e96:	bf00      	nop
 8003e98:	bd80      	pop	{r7, pc}
 8003e9a:	bf00      	nop
 8003e9c:	200005c4 	.word	0x200005c4
 8003ea0:	20000474 	.word	0x20000474
 8003ea4:	2000136c 	.word	0x2000136c
 8003ea8:	20000003 	.word	0x20000003

08003eac <buttonUP_handler>:
void buttonUP_handler()
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	af00      	add	r7, sp, #0
	switch(myDisplayMode)	{
 8003eb0:	4b34      	ldr	r3, [pc, #208]	; (8003f84 <buttonUP_handler+0xd8>)
 8003eb2:	781b      	ldrb	r3, [r3, #0]
 8003eb4:	2b09      	cmp	r3, #9
 8003eb6:	d861      	bhi.n	8003f7c <buttonUP_handler+0xd0>
 8003eb8:	a201      	add	r2, pc, #4	; (adr r2, 8003ec0 <buttonUP_handler+0x14>)
 8003eba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ebe:	bf00      	nop
 8003ec0:	08003f7d 	.word	0x08003f7d
 8003ec4:	08003f7d 	.word	0x08003f7d
 8003ec8:	08003f7d 	.word	0x08003f7d
 8003ecc:	08003ee9 	.word	0x08003ee9
 8003ed0:	08003f01 	.word	0x08003f01
 8003ed4:	08003f0d 	.word	0x08003f0d
 8003ed8:	08003f57 	.word	0x08003f57
 8003edc:	08003f7d 	.word	0x08003f7d
 8003ee0:	08003f45 	.word	0x08003f45
 8003ee4:	08003f51 	.word	0x08003f51
	case COUNTDOWN_SW_OFF:
		break;
	case AFTER_SW_OFF:
		break;
	case MONITOR:
		previousMonitor(&curMonitor, myStation.ssNode_list->length);
 8003ee8:	4b27      	ldr	r3, [pc, #156]	; (8003f88 <buttonUP_handler+0xdc>)
 8003eea:	68db      	ldr	r3, [r3, #12]
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	b2db      	uxtb	r3, r3
 8003ef0:	4619      	mov	r1, r3
 8003ef2:	4826      	ldr	r0, [pc, #152]	; (8003f8c <buttonUP_handler+0xe0>)
 8003ef4:	f7ff fe24 	bl	8003b40 <previousMonitor>
		setClearflag(ENABLE);
 8003ef8:	2001      	movs	r0, #1
 8003efa:	f7ff fdd3 	bl	8003aa4 <setClearflag>
		break;
 8003efe:	e03e      	b.n	8003f7e <buttonUP_handler+0xd2>
	case MENU_CONTROL:
		switchcurControl();
 8003f00:	f7ff fde0 	bl	8003ac4 <switchcurControl>
		setClearflag(ENABLE);
 8003f04:	2001      	movs	r0, #1
 8003f06:	f7ff fdcd 	bl	8003aa4 <setClearflag>
		break;
 8003f0a:	e038      	b.n	8003f7e <buttonUP_handler+0xd2>
	case VOLTAGE_CONTROL:
		switch (getStepValorDir())	{
 8003f0c:	f7ff fdaa 	bl	8003a64 <getStepValorDir>
 8003f10:	4603      	mov	r3, r0
 8003f12:	2b02      	cmp	r3, #2
 8003f14:	d00d      	beq.n	8003f32 <buttonUP_handler+0x86>
 8003f16:	2b02      	cmp	r3, #2
 8003f18:	dc0f      	bgt.n	8003f3a <buttonUP_handler+0x8e>
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d005      	beq.n	8003f2a <buttonUP_handler+0x7e>
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d10b      	bne.n	8003f3a <buttonUP_handler+0x8e>
		case STEP_DIR:
			setStepValorDir(STEP_VAL);
 8003f22:	2000      	movs	r0, #0
 8003f24:	f7ff fd8e 	bl	8003a44 <setStepValorDir>
			break;
 8003f28:	e008      	b.n	8003f3c <buttonUP_handler+0x90>
		case STEP_VAL:
			setStepValorDir(STEP_CONFIRM);
 8003f2a:	2002      	movs	r0, #2
 8003f2c:	f7ff fd8a 	bl	8003a44 <setStepValorDir>
			break;
 8003f30:	e004      	b.n	8003f3c <buttonUP_handler+0x90>
		case STEP_CONFIRM:
			setStepValorDir(STEP_DIR);
 8003f32:	2001      	movs	r0, #1
 8003f34:	f7ff fd86 	bl	8003a44 <setStepValorDir>
			break;
 8003f38:	e000      	b.n	8003f3c <buttonUP_handler+0x90>
		default:
			break;
 8003f3a:	bf00      	nop
		}
		setClearflag(ENABLE);
 8003f3c:	2001      	movs	r0, #1
 8003f3e:	f7ff fdb1 	bl	8003aa4 <setClearflag>
		break;
 8003f42:	e01c      	b.n	8003f7e <buttonUP_handler+0xd2>
	case STEP_VAL_CONTROL:
		// increase step value
		increaseStepchange();
 8003f44:	f7ff fcac 	bl	80038a0 <increaseStepchange>
		setClearflag(ENABLE);
 8003f48:	2001      	movs	r0, #1
 8003f4a:	f7ff fdab 	bl	8003aa4 <setClearflag>
		break;
 8003f4e:	e016      	b.n	8003f7e <buttonUP_handler+0xd2>
	case STEP_DIR_CONTROL:
		Step_toggleDir();
 8003f50:	f7ff fc92 	bl	8003878 <Step_toggleDir>
		break;
 8003f54:	e013      	b.n	8003f7e <buttonUP_handler+0xd2>
	case ON_OFF_CONTROL:
		switch (curSwitch) {
 8003f56:	4b0e      	ldr	r3, [pc, #56]	; (8003f90 <buttonUP_handler+0xe4>)
 8003f58:	781b      	ldrb	r3, [r3, #0]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d005      	beq.n	8003f6a <buttonUP_handler+0xbe>
 8003f5e:	2b01      	cmp	r3, #1
 8003f60:	d107      	bne.n	8003f72 <buttonUP_handler+0xc6>
		case SW_ON:
			curSwitch = SW_OFF;
 8003f62:	4b0b      	ldr	r3, [pc, #44]	; (8003f90 <buttonUP_handler+0xe4>)
 8003f64:	2200      	movs	r2, #0
 8003f66:	701a      	strb	r2, [r3, #0]
			break;
 8003f68:	e004      	b.n	8003f74 <buttonUP_handler+0xc8>
		case SW_OFF:
			curSwitch = SW_ON;
 8003f6a:	4b09      	ldr	r3, [pc, #36]	; (8003f90 <buttonUP_handler+0xe4>)
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	701a      	strb	r2, [r3, #0]
			break;
 8003f70:	e000      	b.n	8003f74 <buttonUP_handler+0xc8>
		default:
			break;
 8003f72:	bf00      	nop
		}
		setClearflag(ENABLE);
 8003f74:	2001      	movs	r0, #1
 8003f76:	f7ff fd95 	bl	8003aa4 <setClearflag>
		break;
 8003f7a:	e000      	b.n	8003f7e <buttonUP_handler+0xd2>
	case COMPLETE_CONTROL:
		break;
	default:
		break;
 8003f7c:	bf00      	nop
	}
}
 8003f7e:	bf00      	nop
 8003f80:	bd80      	pop	{r7, pc}
 8003f82:	bf00      	nop
 8003f84:	200005c4 	.word	0x200005c4
 8003f88:	20000474 	.word	0x20000474
 8003f8c:	2000136c 	.word	0x2000136c
 8003f90:	20000003 	.word	0x20000003

08003f94 <SW_LIMIT_MIN_handler>:
	A4988_DisableDriver();
	setLimit(LIMIT_MAX);
	triggerTaskflag(TASK_SEND_STEP_LIMIT, FLAG_EN);
}
void SW_LIMIT_MIN_handler()
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	af00      	add	r7, sp, #0
	setClearflag(ENABLE);
 8003f98:	2001      	movs	r0, #1
 8003f9a:	f7ff fd83 	bl	8003aa4 <setClearflag>
	A4988_DisableDriver();
 8003f9e:	f002 fe1f 	bl	8006be0 <A4988_DisableDriver>
	setLimit(LIMIT_MIN);
 8003fa2:	2000      	movs	r0, #0
 8003fa4:	f7ff fc34 	bl	8003810 <setLimit>
	triggerTaskflag(TASK_SEND_STEP_LIMIT, FLAG_EN);
 8003fa8:	2101      	movs	r1, #1
 8003faa:	2005      	movs	r0, #5
 8003fac:	f001 fbc2 	bl	8005734 <triggerTaskflag>
}
 8003fb0:	bf00      	nop
 8003fb2:	bd80      	pop	{r7, pc}

08003fb4 <DS3231_Init>:

static uint8_t B2D(uint8_t bcd);
static uint8_t D2B(uint8_t decimal);

void DS3231_Init(I2C_HandleTypeDef *handle)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b082      	sub	sp, #8
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  i2c = handle;
 8003fbc:	4a04      	ldr	r2, [pc, #16]	; (8003fd0 <DS3231_Init+0x1c>)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6013      	str	r3, [r2, #0]
  DS3231_ClearAlarm1();
 8003fc2:	f000 f9d5 	bl	8004370 <DS3231_ClearAlarm1>
}
 8003fc6:	bf00      	nop
 8003fc8:	3708      	adds	r7, #8
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}
 8003fce:	bf00      	nop
 8003fd0:	20001378 	.word	0x20001378

08003fd4 <epochtine2RTC>:
void epochtine2RTC(time_t epochtime,  _RTC *myRTC)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b086      	sub	sp, #24
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8003fde:	607a      	str	r2, [r7, #4]
	struct tm *info;
	info = localtime(&epochtime);
 8003fe0:	f107 0308 	add.w	r3, r7, #8
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f008 f817 	bl	800c018 <localtime>
 8003fea:	6178      	str	r0, [r7, #20]
	myRTC->Year = info->tm_year -100;
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	695b      	ldr	r3, [r3, #20]
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	3b64      	subs	r3, #100	; 0x64
 8003ff4:	b2da      	uxtb	r2, r3
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	701a      	strb	r2, [r3, #0]
	myRTC->Month =  info->tm_mon +1;
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	691b      	ldr	r3, [r3, #16]
 8003ffe:	b2db      	uxtb	r3, r3
 8004000:	3301      	adds	r3, #1
 8004002:	b2da      	uxtb	r2, r3
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	705a      	strb	r2, [r3, #1]
	myRTC->Date = info->tm_mday;
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	68db      	ldr	r3, [r3, #12]
 800400c:	b2da      	uxtb	r2, r3
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	709a      	strb	r2, [r3, #2]
	myRTC->DaysOfWeek = info->tm_wday + 1;
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	699b      	ldr	r3, [r3, #24]
 8004016:	b2db      	uxtb	r3, r3
 8004018:	3301      	adds	r3, #1
 800401a:	b2da      	uxtb	r2, r3
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	70da      	strb	r2, [r3, #3]
	myRTC->Hour = info->tm_hour + 7;
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	b2db      	uxtb	r3, r3
 8004026:	3307      	adds	r3, #7
 8004028:	b2da      	uxtb	r2, r3
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	711a      	strb	r2, [r3, #4]
	myRTC->Min = info->tm_min;
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	b2da      	uxtb	r2, r3
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	715a      	strb	r2, [r3, #5]
	myRTC->Sec = info->tm_sec;
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	b2da      	uxtb	r2, r3
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	719a      	strb	r2, [r3, #6]
}
 8004042:	bf00      	nop
 8004044:	3718      	adds	r7, #24
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}

0800404a <RTC2epochtime>:

time_t RTC2epochtime (_RTC *RTCtime)
{
 800404a:	b580      	push	{r7, lr}
 800404c:	b08e      	sub	sp, #56	; 0x38
 800404e:	af00      	add	r7, sp, #0
 8004050:	6078      	str	r0, [r7, #4]
	struct tm t;
	time_t epochtime;
	t.tm_year = 2000 + RTCtime->Year -1900;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	781b      	ldrb	r3, [r3, #0]
 8004056:	3364      	adds	r3, #100	; 0x64
 8004058:	623b      	str	r3, [r7, #32]
	t.tm_mon = RTCtime->Month - 1;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	785b      	ldrb	r3, [r3, #1]
 800405e:	3b01      	subs	r3, #1
 8004060:	61fb      	str	r3, [r7, #28]
	t.tm_mday = RTCtime->Date;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	789b      	ldrb	r3, [r3, #2]
 8004066:	61bb      	str	r3, [r7, #24]
	t.tm_hour = RTCtime->Hour - 7;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	791b      	ldrb	r3, [r3, #4]
 800406c:	3b07      	subs	r3, #7
 800406e:	617b      	str	r3, [r7, #20]
	t.tm_min = RTCtime->Min;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	795b      	ldrb	r3, [r3, #5]
 8004074:	613b      	str	r3, [r7, #16]
	t.tm_sec = RTCtime->Sec;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	799b      	ldrb	r3, [r3, #6]
 800407a:	60fb      	str	r3, [r7, #12]
	t.tm_isdst = -1;
 800407c:	f04f 33ff 	mov.w	r3, #4294967295
 8004080:	62fb      	str	r3, [r7, #44]	; 0x2c
	epochtime = mktime(&t);
 8004082:	f107 030c 	add.w	r3, r7, #12
 8004086:	4618      	mov	r0, r3
 8004088:	f008 f9e4 	bl	800c454 <mktime>
 800408c:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
	return epochtime;
 8004090:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
}
 8004094:	4610      	mov	r0, r2
 8004096:	4619      	mov	r1, r3
 8004098:	3738      	adds	r7, #56	; 0x38
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}
	...

080040a0 <DS3231_GetTime>:
	if ( (rtc.Min < 0) || (rtc.Min >59 ) )	return false;
	if ( (rtc.Hour < 0) || (rtc.Sec >23 ) )	return false;
	return true;
}
bool DS3231_GetTime(_RTC *rtc)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b086      	sub	sp, #24
 80040a4:	af02      	add	r7, sp, #8
 80040a6:	6078      	str	r0, [r7, #4]
  uint8_t startAddr = DS3231_REG_TIME;
 80040a8:	2300      	movs	r3, #0
 80040aa:	73fb      	strb	r3, [r7, #15]
  uint8_t buffer[7] = {0,};
 80040ac:	2300      	movs	r3, #0
 80040ae:	60bb      	str	r3, [r7, #8]
 80040b0:	f107 030c 	add.w	r3, r7, #12
 80040b4:	2100      	movs	r1, #0
 80040b6:	460a      	mov	r2, r1
 80040b8:	801a      	strh	r2, [r3, #0]
 80040ba:	460a      	mov	r2, r1
 80040bc:	709a      	strb	r2, [r3, #2]

  if(HAL_I2C_Master_Transmit(i2c, DS3231_ADDR, &startAddr, 1, HAL_MAX_DELAY) != HAL_OK) return false;
 80040be:	4b35      	ldr	r3, [pc, #212]	; (8004194 <DS3231_GetTime+0xf4>)
 80040c0:	6818      	ldr	r0, [r3, #0]
 80040c2:	f107 020f 	add.w	r2, r7, #15
 80040c6:	f04f 33ff 	mov.w	r3, #4294967295
 80040ca:	9300      	str	r3, [sp, #0]
 80040cc:	2301      	movs	r3, #1
 80040ce:	21d0      	movs	r1, #208	; 0xd0
 80040d0:	f005 f916 	bl	8009300 <HAL_I2C_Master_Transmit>
 80040d4:	4603      	mov	r3, r0
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d001      	beq.n	80040de <DS3231_GetTime+0x3e>
 80040da:	2300      	movs	r3, #0
 80040dc:	e055      	b.n	800418a <DS3231_GetTime+0xea>
  if(HAL_I2C_Master_Receive(i2c, DS3231_ADDR, buffer, sizeof(buffer), HAL_MAX_DELAY) != HAL_OK) return false;
 80040de:	4b2d      	ldr	r3, [pc, #180]	; (8004194 <DS3231_GetTime+0xf4>)
 80040e0:	6818      	ldr	r0, [r3, #0]
 80040e2:	f107 0208 	add.w	r2, r7, #8
 80040e6:	f04f 33ff 	mov.w	r3, #4294967295
 80040ea:	9300      	str	r3, [sp, #0]
 80040ec:	2307      	movs	r3, #7
 80040ee:	21d0      	movs	r1, #208	; 0xd0
 80040f0:	f005 fa04 	bl	80094fc <HAL_I2C_Master_Receive>
 80040f4:	4603      	mov	r3, r0
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d001      	beq.n	80040fe <DS3231_GetTime+0x5e>
 80040fa:	2300      	movs	r3, #0
 80040fc:	e045      	b.n	800418a <DS3231_GetTime+0xea>

  rtc->Sec = B2D(buffer[0] & 0x7F);
 80040fe:	7a3b      	ldrb	r3, [r7, #8]
 8004100:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004104:	b2db      	uxtb	r3, r3
 8004106:	4618      	mov	r0, r3
 8004108:	f000 f9a8 	bl	800445c <B2D>
 800410c:	4603      	mov	r3, r0
 800410e:	461a      	mov	r2, r3
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	719a      	strb	r2, [r3, #6]
  rtc->Min = B2D(buffer[1] & 0x7F);
 8004114:	7a7b      	ldrb	r3, [r7, #9]
 8004116:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800411a:	b2db      	uxtb	r3, r3
 800411c:	4618      	mov	r0, r3
 800411e:	f000 f99d 	bl	800445c <B2D>
 8004122:	4603      	mov	r3, r0
 8004124:	461a      	mov	r2, r3
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	715a      	strb	r2, [r3, #5]
  rtc->Hour = B2D(buffer[2] & 0x3F);
 800412a:	7abb      	ldrb	r3, [r7, #10]
 800412c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004130:	b2db      	uxtb	r3, r3
 8004132:	4618      	mov	r0, r3
 8004134:	f000 f992 	bl	800445c <B2D>
 8004138:	4603      	mov	r3, r0
 800413a:	461a      	mov	r2, r3
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	711a      	strb	r2, [r3, #4]
  rtc->DaysOfWeek = buffer[3] & 0x07;
 8004140:	7afb      	ldrb	r3, [r7, #11]
 8004142:	f003 0307 	and.w	r3, r3, #7
 8004146:	b2da      	uxtb	r2, r3
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	70da      	strb	r2, [r3, #3]
  rtc->Date = B2D(buffer[4] & 0x3F);
 800414c:	7b3b      	ldrb	r3, [r7, #12]
 800414e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004152:	b2db      	uxtb	r3, r3
 8004154:	4618      	mov	r0, r3
 8004156:	f000 f981 	bl	800445c <B2D>
 800415a:	4603      	mov	r3, r0
 800415c:	461a      	mov	r2, r3
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	709a      	strb	r2, [r3, #2]
  rtc->Month = B2D(buffer[5] & 0x1F);
 8004162:	7b7b      	ldrb	r3, [r7, #13]
 8004164:	f003 031f 	and.w	r3, r3, #31
 8004168:	b2db      	uxtb	r3, r3
 800416a:	4618      	mov	r0, r3
 800416c:	f000 f976 	bl	800445c <B2D>
 8004170:	4603      	mov	r3, r0
 8004172:	461a      	mov	r2, r3
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	705a      	strb	r2, [r3, #1]
  rtc->Year = B2D(buffer[6]);
 8004178:	7bbb      	ldrb	r3, [r7, #14]
 800417a:	4618      	mov	r0, r3
 800417c:	f000 f96e 	bl	800445c <B2D>
 8004180:	4603      	mov	r3, r0
 8004182:	461a      	mov	r2, r3
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	701a      	strb	r2, [r3, #0]

  return true;
 8004188:	2301      	movs	r3, #1
}
 800418a:	4618      	mov	r0, r3
 800418c:	3710      	adds	r7, #16
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}
 8004192:	bf00      	nop
 8004194:	20001378 	.word	0x20001378

08004198 <DS3231_SetTime>:

bool DS3231_SetTime(_RTC *rtc)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b088      	sub	sp, #32
 800419c:	af02      	add	r7, sp, #8
 800419e:	6078      	str	r0, [r7, #4]
  uint8_t startAddr = DS3231_REG_TIME;
 80041a0:	2300      	movs	r3, #0
 80041a2:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[8] = {startAddr, D2B(rtc->Sec), D2B(rtc->Min), D2B(rtc->Hour), rtc->DaysOfWeek, D2B(rtc->Date), D2B(rtc->Month), D2B(rtc->Year)};
 80041a4:	7dfb      	ldrb	r3, [r7, #23]
 80041a6:	733b      	strb	r3, [r7, #12]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	799b      	ldrb	r3, [r3, #6]
 80041ac:	4618      	mov	r0, r3
 80041ae:	f000 f96d 	bl	800448c <D2B>
 80041b2:	4603      	mov	r3, r0
 80041b4:	737b      	strb	r3, [r7, #13]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	795b      	ldrb	r3, [r3, #5]
 80041ba:	4618      	mov	r0, r3
 80041bc:	f000 f966 	bl	800448c <D2B>
 80041c0:	4603      	mov	r3, r0
 80041c2:	73bb      	strb	r3, [r7, #14]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	791b      	ldrb	r3, [r3, #4]
 80041c8:	4618      	mov	r0, r3
 80041ca:	f000 f95f 	bl	800448c <D2B>
 80041ce:	4603      	mov	r3, r0
 80041d0:	73fb      	strb	r3, [r7, #15]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	78db      	ldrb	r3, [r3, #3]
 80041d6:	743b      	strb	r3, [r7, #16]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	789b      	ldrb	r3, [r3, #2]
 80041dc:	4618      	mov	r0, r3
 80041de:	f000 f955 	bl	800448c <D2B>
 80041e2:	4603      	mov	r3, r0
 80041e4:	747b      	strb	r3, [r7, #17]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	785b      	ldrb	r3, [r3, #1]
 80041ea:	4618      	mov	r0, r3
 80041ec:	f000 f94e 	bl	800448c <D2B>
 80041f0:	4603      	mov	r3, r0
 80041f2:	74bb      	strb	r3, [r7, #18]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	781b      	ldrb	r3, [r3, #0]
 80041f8:	4618      	mov	r0, r3
 80041fa:	f000 f947 	bl	800448c <D2B>
 80041fe:	4603      	mov	r3, r0
 8004200:	74fb      	strb	r3, [r7, #19]
  if(HAL_I2C_Master_Transmit(i2c, DS3231_ADDR, buffer, sizeof(buffer), HAL_MAX_DELAY) != HAL_OK) return false;
 8004202:	4b0a      	ldr	r3, [pc, #40]	; (800422c <DS3231_SetTime+0x94>)
 8004204:	6818      	ldr	r0, [r3, #0]
 8004206:	f107 020c 	add.w	r2, r7, #12
 800420a:	f04f 33ff 	mov.w	r3, #4294967295
 800420e:	9300      	str	r3, [sp, #0]
 8004210:	2308      	movs	r3, #8
 8004212:	21d0      	movs	r1, #208	; 0xd0
 8004214:	f005 f874 	bl	8009300 <HAL_I2C_Master_Transmit>
 8004218:	4603      	mov	r3, r0
 800421a:	2b00      	cmp	r3, #0
 800421c:	d001      	beq.n	8004222 <DS3231_SetTime+0x8a>
 800421e:	2300      	movs	r3, #0
 8004220:	e000      	b.n	8004224 <DS3231_SetTime+0x8c>

  return true;
 8004222:	2301      	movs	r3, #1
}
 8004224:	4618      	mov	r0, r3
 8004226:	3718      	adds	r7, #24
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}
 800422c:	20001378 	.word	0x20001378

08004230 <DS3231_SetAlarm1>:
  *temp = value / 4.0f;
  return true;
}

bool DS3231_SetAlarm1(uint8_t mode, uint8_t date, uint8_t hour, uint8_t min, uint8_t sec)
{
 8004230:	b590      	push	{r4, r7, lr}
 8004232:	b089      	sub	sp, #36	; 0x24
 8004234:	af02      	add	r7, sp, #8
 8004236:	4604      	mov	r4, r0
 8004238:	4608      	mov	r0, r1
 800423a:	4611      	mov	r1, r2
 800423c:	461a      	mov	r2, r3
 800423e:	4623      	mov	r3, r4
 8004240:	71fb      	strb	r3, [r7, #7]
 8004242:	4603      	mov	r3, r0
 8004244:	71bb      	strb	r3, [r7, #6]
 8004246:	460b      	mov	r3, r1
 8004248:	717b      	strb	r3, [r7, #5]
 800424a:	4613      	mov	r3, r2
 800424c:	713b      	strb	r3, [r7, #4]
  uint8_t alarmSecond = D2B(sec);
 800424e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004252:	4618      	mov	r0, r3
 8004254:	f000 f91a 	bl	800448c <D2B>
 8004258:	4603      	mov	r3, r0
 800425a:	75fb      	strb	r3, [r7, #23]
  uint8_t alarmMinute = D2B(min);
 800425c:	793b      	ldrb	r3, [r7, #4]
 800425e:	4618      	mov	r0, r3
 8004260:	f000 f914 	bl	800448c <D2B>
 8004264:	4603      	mov	r3, r0
 8004266:	75bb      	strb	r3, [r7, #22]
  uint8_t alarmHour = D2B(hour);
 8004268:	797b      	ldrb	r3, [r7, #5]
 800426a:	4618      	mov	r0, r3
 800426c:	f000 f90e 	bl	800448c <D2B>
 8004270:	4603      	mov	r3, r0
 8004272:	757b      	strb	r3, [r7, #21]
  uint8_t alarmDate = D2B(date);
 8004274:	79bb      	ldrb	r3, [r7, #6]
 8004276:	4618      	mov	r0, r3
 8004278:	f000 f908 	bl	800448c <D2B>
 800427c:	4603      	mov	r3, r0
 800427e:	753b      	strb	r3, [r7, #20]

  switch(mode)
 8004280:	79fb      	ldrb	r3, [r7, #7]
 8004282:	2b04      	cmp	r3, #4
 8004284:	d838      	bhi.n	80042f8 <DS3231_SetAlarm1+0xc8>
 8004286:	a201      	add	r2, pc, #4	; (adr r2, 800428c <DS3231_SetAlarm1+0x5c>)
 8004288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800428c:	080042f9 	.word	0x080042f9
 8004290:	080042a1 	.word	0x080042a1
 8004294:	080042ab 	.word	0x080042ab
 8004298:	080042bd 	.word	0x080042bd
 800429c:	080042d7 	.word	0x080042d7
  {
  case ALARM_MODE_ALL_MATCHED:
    break;
  case ALARM_MODE_HOUR_MIN_SEC_MATCHED:
    alarmDate |= 0x80;
 80042a0:	7d3b      	ldrb	r3, [r7, #20]
 80042a2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80042a6:	753b      	strb	r3, [r7, #20]
    break;
 80042a8:	e027      	b.n	80042fa <DS3231_SetAlarm1+0xca>
  case ALARM_MODE_MIN_SEC_MATCHED:
    alarmDate |= 0x80;
 80042aa:	7d3b      	ldrb	r3, [r7, #20]
 80042ac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80042b0:	753b      	strb	r3, [r7, #20]
    alarmHour |= 0x80;
 80042b2:	7d7b      	ldrb	r3, [r7, #21]
 80042b4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80042b8:	757b      	strb	r3, [r7, #21]
    break;
 80042ba:	e01e      	b.n	80042fa <DS3231_SetAlarm1+0xca>
  case ALARM_MODE_SEC_MATCHED:
    alarmDate |= 0x80;
 80042bc:	7d3b      	ldrb	r3, [r7, #20]
 80042be:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80042c2:	753b      	strb	r3, [r7, #20]
    alarmHour |= 0x80;
 80042c4:	7d7b      	ldrb	r3, [r7, #21]
 80042c6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80042ca:	757b      	strb	r3, [r7, #21]
    alarmMinute |= 0x80;
 80042cc:	7dbb      	ldrb	r3, [r7, #22]
 80042ce:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80042d2:	75bb      	strb	r3, [r7, #22]
    break;
 80042d4:	e011      	b.n	80042fa <DS3231_SetAlarm1+0xca>
  case ALARM_MODE_ONCE_PER_SECOND:
    alarmDate |= 0x80;
 80042d6:	7d3b      	ldrb	r3, [r7, #20]
 80042d8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80042dc:	753b      	strb	r3, [r7, #20]
    alarmHour |= 0x80;
 80042de:	7d7b      	ldrb	r3, [r7, #21]
 80042e0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80042e4:	757b      	strb	r3, [r7, #21]
    alarmMinute |= 0x80;
 80042e6:	7dbb      	ldrb	r3, [r7, #22]
 80042e8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80042ec:	75bb      	strb	r3, [r7, #22]
    alarmSecond |= 0x80;
 80042ee:	7dfb      	ldrb	r3, [r7, #23]
 80042f0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80042f4:	75fb      	strb	r3, [r7, #23]
    break;
 80042f6:	e000      	b.n	80042fa <DS3231_SetAlarm1+0xca>
  default:
    break;
 80042f8:	bf00      	nop
  }

  /* Write Alarm Registers */
  uint8_t startAddr = DS3231_REG_ALARM1;
 80042fa:	2307      	movs	r3, #7
 80042fc:	74fb      	strb	r3, [r7, #19]
  uint8_t buffer[5] = {startAddr, alarmSecond, alarmMinute, alarmHour, alarmDate};
 80042fe:	7cfb      	ldrb	r3, [r7, #19]
 8004300:	733b      	strb	r3, [r7, #12]
 8004302:	7dfb      	ldrb	r3, [r7, #23]
 8004304:	737b      	strb	r3, [r7, #13]
 8004306:	7dbb      	ldrb	r3, [r7, #22]
 8004308:	73bb      	strb	r3, [r7, #14]
 800430a:	7d7b      	ldrb	r3, [r7, #21]
 800430c:	73fb      	strb	r3, [r7, #15]
 800430e:	7d3b      	ldrb	r3, [r7, #20]
 8004310:	743b      	strb	r3, [r7, #16]
  if(HAL_I2C_Master_Transmit(i2c, DS3231_ADDR, buffer, sizeof(buffer), HAL_MAX_DELAY) != HAL_OK) return false;
 8004312:	4b16      	ldr	r3, [pc, #88]	; (800436c <DS3231_SetAlarm1+0x13c>)
 8004314:	6818      	ldr	r0, [r3, #0]
 8004316:	f107 020c 	add.w	r2, r7, #12
 800431a:	f04f 33ff 	mov.w	r3, #4294967295
 800431e:	9300      	str	r3, [sp, #0]
 8004320:	2305      	movs	r3, #5
 8004322:	21d0      	movs	r1, #208	; 0xd0
 8004324:	f004 ffec 	bl	8009300 <HAL_I2C_Master_Transmit>
 8004328:	4603      	mov	r3, r0
 800432a:	2b00      	cmp	r3, #0
 800432c:	d001      	beq.n	8004332 <DS3231_SetAlarm1+0x102>
 800432e:	2300      	movs	r3, #0
 8004330:	e017      	b.n	8004362 <DS3231_SetAlarm1+0x132>

  /* Enable Alarm1 at Control Register */
  uint8_t ctrlReg = 0x00;
 8004332:	2300      	movs	r3, #0
 8004334:	72fb      	strb	r3, [r7, #11]
  ReadRegister(DS3231_REG_CONTROL, &ctrlReg);
 8004336:	f107 030b 	add.w	r3, r7, #11
 800433a:	4619      	mov	r1, r3
 800433c:	200e      	movs	r0, #14
 800433e:	f000 f83d 	bl	80043bc <ReadRegister>
  ctrlReg |= DS3231_CON_A1IE;
 8004342:	7afb      	ldrb	r3, [r7, #11]
 8004344:	f043 0301 	orr.w	r3, r3, #1
 8004348:	b2db      	uxtb	r3, r3
 800434a:	72fb      	strb	r3, [r7, #11]
  ctrlReg |= DS3231_CON_INTCN;
 800434c:	7afb      	ldrb	r3, [r7, #11]
 800434e:	f043 0304 	orr.w	r3, r3, #4
 8004352:	b2db      	uxtb	r3, r3
 8004354:	72fb      	strb	r3, [r7, #11]
  WriteRegister(DS3231_REG_CONTROL, ctrlReg);
 8004356:	7afb      	ldrb	r3, [r7, #11]
 8004358:	4619      	mov	r1, r3
 800435a:	200e      	movs	r0, #14
 800435c:	f000 f85a 	bl	8004414 <WriteRegister>

  return true;
 8004360:	2301      	movs	r3, #1
}
 8004362:	4618      	mov	r0, r3
 8004364:	371c      	adds	r7, #28
 8004366:	46bd      	mov	sp, r7
 8004368:	bd90      	pop	{r4, r7, pc}
 800436a:	bf00      	nop
 800436c:	20001378 	.word	0x20001378

08004370 <DS3231_ClearAlarm1>:

bool DS3231_ClearAlarm1()
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b082      	sub	sp, #8
 8004374:	af00      	add	r7, sp, #0
  uint8_t ctrlReg;
  uint8_t statusReg;

  /* Clear Control Register */
  ReadRegister(DS3231_REG_CONTROL, &ctrlReg);
 8004376:	1dfb      	adds	r3, r7, #7
 8004378:	4619      	mov	r1, r3
 800437a:	200e      	movs	r0, #14
 800437c:	f000 f81e 	bl	80043bc <ReadRegister>
  ctrlReg &= ~DS3231_CON_A1IE;
 8004380:	79fb      	ldrb	r3, [r7, #7]
 8004382:	f023 0301 	bic.w	r3, r3, #1
 8004386:	b2db      	uxtb	r3, r3
 8004388:	71fb      	strb	r3, [r7, #7]
  WriteRegister(DS3231_REG_CONTROL, ctrlReg);
 800438a:	79fb      	ldrb	r3, [r7, #7]
 800438c:	4619      	mov	r1, r3
 800438e:	200e      	movs	r0, #14
 8004390:	f000 f840 	bl	8004414 <WriteRegister>

  /* Clear Status Register */
  ReadRegister(DS3231_REG_STATUS, &statusReg);
 8004394:	1dbb      	adds	r3, r7, #6
 8004396:	4619      	mov	r1, r3
 8004398:	200f      	movs	r0, #15
 800439a:	f000 f80f 	bl	80043bc <ReadRegister>
  statusReg &= ~DS3231_STA_A1F;
 800439e:	79bb      	ldrb	r3, [r7, #6]
 80043a0:	f023 0301 	bic.w	r3, r3, #1
 80043a4:	b2db      	uxtb	r3, r3
 80043a6:	71bb      	strb	r3, [r7, #6]
  WriteRegister(DS3231_REG_STATUS, statusReg);
 80043a8:	79bb      	ldrb	r3, [r7, #6]
 80043aa:	4619      	mov	r1, r3
 80043ac:	200f      	movs	r0, #15
 80043ae:	f000 f831 	bl	8004414 <WriteRegister>

  return true;
 80043b2:	2301      	movs	r3, #1
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	3708      	adds	r7, #8
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}

080043bc <ReadRegister>:

bool ReadRegister(uint8_t regAddr, uint8_t *value)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b084      	sub	sp, #16
 80043c0:	af02      	add	r7, sp, #8
 80043c2:	4603      	mov	r3, r0
 80043c4:	6039      	str	r1, [r7, #0]
 80043c6:	71fb      	strb	r3, [r7, #7]
  if(HAL_I2C_Master_Transmit(i2c, DS3231_ADDR, &regAddr, 1, HAL_MAX_DELAY) != HAL_OK) return false;
 80043c8:	4b11      	ldr	r3, [pc, #68]	; (8004410 <ReadRegister+0x54>)
 80043ca:	6818      	ldr	r0, [r3, #0]
 80043cc:	1dfa      	adds	r2, r7, #7
 80043ce:	f04f 33ff 	mov.w	r3, #4294967295
 80043d2:	9300      	str	r3, [sp, #0]
 80043d4:	2301      	movs	r3, #1
 80043d6:	21d0      	movs	r1, #208	; 0xd0
 80043d8:	f004 ff92 	bl	8009300 <HAL_I2C_Master_Transmit>
 80043dc:	4603      	mov	r3, r0
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d001      	beq.n	80043e6 <ReadRegister+0x2a>
 80043e2:	2300      	movs	r3, #0
 80043e4:	e00f      	b.n	8004406 <ReadRegister+0x4a>
  if(HAL_I2C_Master_Receive(i2c, DS3231_ADDR, value, 1, HAL_MAX_DELAY) != HAL_OK) return false;
 80043e6:	4b0a      	ldr	r3, [pc, #40]	; (8004410 <ReadRegister+0x54>)
 80043e8:	6818      	ldr	r0, [r3, #0]
 80043ea:	f04f 33ff 	mov.w	r3, #4294967295
 80043ee:	9300      	str	r3, [sp, #0]
 80043f0:	2301      	movs	r3, #1
 80043f2:	683a      	ldr	r2, [r7, #0]
 80043f4:	21d0      	movs	r1, #208	; 0xd0
 80043f6:	f005 f881 	bl	80094fc <HAL_I2C_Master_Receive>
 80043fa:	4603      	mov	r3, r0
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d001      	beq.n	8004404 <ReadRegister+0x48>
 8004400:	2300      	movs	r3, #0
 8004402:	e000      	b.n	8004406 <ReadRegister+0x4a>

  return true;
 8004404:	2301      	movs	r3, #1
}
 8004406:	4618      	mov	r0, r3
 8004408:	3708      	adds	r7, #8
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}
 800440e:	bf00      	nop
 8004410:	20001378 	.word	0x20001378

08004414 <WriteRegister>:

bool WriteRegister(uint8_t regAddr, uint8_t value)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b086      	sub	sp, #24
 8004418:	af02      	add	r7, sp, #8
 800441a:	4603      	mov	r3, r0
 800441c:	460a      	mov	r2, r1
 800441e:	71fb      	strb	r3, [r7, #7]
 8004420:	4613      	mov	r3, r2
 8004422:	71bb      	strb	r3, [r7, #6]
  uint8_t buffer[2] = {regAddr, value};
 8004424:	79fb      	ldrb	r3, [r7, #7]
 8004426:	733b      	strb	r3, [r7, #12]
 8004428:	79bb      	ldrb	r3, [r7, #6]
 800442a:	737b      	strb	r3, [r7, #13]
  if(HAL_I2C_Master_Transmit(i2c, DS3231_ADDR, buffer, sizeof(buffer), HAL_MAX_DELAY) != HAL_OK) return false;
 800442c:	4b0a      	ldr	r3, [pc, #40]	; (8004458 <WriteRegister+0x44>)
 800442e:	6818      	ldr	r0, [r3, #0]
 8004430:	f107 020c 	add.w	r2, r7, #12
 8004434:	f04f 33ff 	mov.w	r3, #4294967295
 8004438:	9300      	str	r3, [sp, #0]
 800443a:	2302      	movs	r3, #2
 800443c:	21d0      	movs	r1, #208	; 0xd0
 800443e:	f004 ff5f 	bl	8009300 <HAL_I2C_Master_Transmit>
 8004442:	4603      	mov	r3, r0
 8004444:	2b00      	cmp	r3, #0
 8004446:	d001      	beq.n	800444c <WriteRegister+0x38>
 8004448:	2300      	movs	r3, #0
 800444a:	e000      	b.n	800444e <WriteRegister+0x3a>

  return true;
 800444c:	2301      	movs	r3, #1
}
 800444e:	4618      	mov	r0, r3
 8004450:	3710      	adds	r7, #16
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}
 8004456:	bf00      	nop
 8004458:	20001378 	.word	0x20001378

0800445c <B2D>:

static uint8_t B2D(uint8_t bcd)
{
 800445c:	b480      	push	{r7}
 800445e:	b083      	sub	sp, #12
 8004460:	af00      	add	r7, sp, #0
 8004462:	4603      	mov	r3, r0
 8004464:	71fb      	strb	r3, [r7, #7]
  return (bcd >> 4) * 10 + (bcd & 0x0F);
 8004466:	79fb      	ldrb	r3, [r7, #7]
 8004468:	091b      	lsrs	r3, r3, #4
 800446a:	b2db      	uxtb	r3, r3
 800446c:	461a      	mov	r2, r3
 800446e:	0092      	lsls	r2, r2, #2
 8004470:	4413      	add	r3, r2
 8004472:	005b      	lsls	r3, r3, #1
 8004474:	b2da      	uxtb	r2, r3
 8004476:	79fb      	ldrb	r3, [r7, #7]
 8004478:	f003 030f 	and.w	r3, r3, #15
 800447c:	b2db      	uxtb	r3, r3
 800447e:	4413      	add	r3, r2
 8004480:	b2db      	uxtb	r3, r3
}
 8004482:	4618      	mov	r0, r3
 8004484:	370c      	adds	r7, #12
 8004486:	46bd      	mov	sp, r7
 8004488:	bc80      	pop	{r7}
 800448a:	4770      	bx	lr

0800448c <D2B>:

static uint8_t D2B(uint8_t decimal)
{
 800448c:	b480      	push	{r7}
 800448e:	b083      	sub	sp, #12
 8004490:	af00      	add	r7, sp, #0
 8004492:	4603      	mov	r3, r0
 8004494:	71fb      	strb	r3, [r7, #7]
  return (((decimal / 10) << 4) | (decimal % 10));
 8004496:	79fb      	ldrb	r3, [r7, #7]
 8004498:	4a0d      	ldr	r2, [pc, #52]	; (80044d0 <D2B+0x44>)
 800449a:	fba2 2303 	umull	r2, r3, r2, r3
 800449e:	08db      	lsrs	r3, r3, #3
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	011b      	lsls	r3, r3, #4
 80044a4:	b258      	sxtb	r0, r3
 80044a6:	79fa      	ldrb	r2, [r7, #7]
 80044a8:	4b09      	ldr	r3, [pc, #36]	; (80044d0 <D2B+0x44>)
 80044aa:	fba3 1302 	umull	r1, r3, r3, r2
 80044ae:	08d9      	lsrs	r1, r3, #3
 80044b0:	460b      	mov	r3, r1
 80044b2:	009b      	lsls	r3, r3, #2
 80044b4:	440b      	add	r3, r1
 80044b6:	005b      	lsls	r3, r3, #1
 80044b8:	1ad3      	subs	r3, r2, r3
 80044ba:	b2db      	uxtb	r3, r3
 80044bc:	b25b      	sxtb	r3, r3
 80044be:	4303      	orrs	r3, r0
 80044c0:	b25b      	sxtb	r3, r3
 80044c2:	b2db      	uxtb	r3, r3
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	370c      	adds	r7, #12
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bc80      	pop	{r7}
 80044cc:	4770      	bx	lr
 80044ce:	bf00      	nop
 80044d0:	cccccccd 	.word	0xcccccccd

080044d4 <getCountdowntime>:

uint16_t getCountdowntime(uint8_t hour, uint8_t min, uint8_t sec)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b084      	sub	sp, #16
 80044d8:	af00      	add	r7, sp, #0
 80044da:	4603      	mov	r3, r0
 80044dc:	71fb      	strb	r3, [r7, #7]
 80044de:	460b      	mov	r3, r1
 80044e0:	71bb      	strb	r3, [r7, #6]
 80044e2:	4613      	mov	r3, r2
 80044e4:	717b      	strb	r3, [r7, #5]
	_RTC curRTC;
	if (!DS3231_GetTime(&curRTC))	return 0;
 80044e6:	f107 0308 	add.w	r3, r7, #8
 80044ea:	4618      	mov	r0, r3
 80044ec:	f7ff fdd8 	bl	80040a0 <DS3231_GetTime>
 80044f0:	4603      	mov	r3, r0
 80044f2:	f083 0301 	eor.w	r3, r3, #1
 80044f6:	b2db      	uxtb	r3, r3
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d001      	beq.n	8004500 <getCountdowntime+0x2c>
 80044fc:	2300      	movs	r3, #0
 80044fe:	e06d      	b.n	80045dc <getCountdowntime+0x108>
	if ( hour < curRTC.Hour || hour - curRTC.Hour > 18 )	return 0;
 8004500:	7b3b      	ldrb	r3, [r7, #12]
 8004502:	79fa      	ldrb	r2, [r7, #7]
 8004504:	429a      	cmp	r2, r3
 8004506:	d304      	bcc.n	8004512 <getCountdowntime+0x3e>
 8004508:	79fb      	ldrb	r3, [r7, #7]
 800450a:	7b3a      	ldrb	r2, [r7, #12]
 800450c:	1a9b      	subs	r3, r3, r2
 800450e:	2b12      	cmp	r3, #18
 8004510:	dd01      	ble.n	8004516 <getCountdowntime+0x42>
 8004512:	2300      	movs	r3, #0
 8004514:	e062      	b.n	80045dc <getCountdowntime+0x108>
	if ( hour == curRTC.Hour && min < curRTC.Min ) return 0;
 8004516:	7b3b      	ldrb	r3, [r7, #12]
 8004518:	79fa      	ldrb	r2, [r7, #7]
 800451a:	429a      	cmp	r2, r3
 800451c:	d105      	bne.n	800452a <getCountdowntime+0x56>
 800451e:	7b7b      	ldrb	r3, [r7, #13]
 8004520:	79ba      	ldrb	r2, [r7, #6]
 8004522:	429a      	cmp	r2, r3
 8004524:	d201      	bcs.n	800452a <getCountdowntime+0x56>
 8004526:	2300      	movs	r3, #0
 8004528:	e058      	b.n	80045dc <getCountdowntime+0x108>
	if ( hour == curRTC.Hour && min == curRTC.Min && sec < curRTC.Sec )	return 0;
 800452a:	7b3b      	ldrb	r3, [r7, #12]
 800452c:	79fa      	ldrb	r2, [r7, #7]
 800452e:	429a      	cmp	r2, r3
 8004530:	d109      	bne.n	8004546 <getCountdowntime+0x72>
 8004532:	7b7b      	ldrb	r3, [r7, #13]
 8004534:	79ba      	ldrb	r2, [r7, #6]
 8004536:	429a      	cmp	r2, r3
 8004538:	d105      	bne.n	8004546 <getCountdowntime+0x72>
 800453a:	7bbb      	ldrb	r3, [r7, #14]
 800453c:	797a      	ldrb	r2, [r7, #5]
 800453e:	429a      	cmp	r2, r3
 8004540:	d201      	bcs.n	8004546 <getCountdowntime+0x72>
 8004542:	2300      	movs	r3, #0
 8004544:	e04a      	b.n	80045dc <getCountdowntime+0x108>
	if( hour == curRTC.Hour && min == curRTC.Min)	{
 8004546:	7b3b      	ldrb	r3, [r7, #12]
 8004548:	79fa      	ldrb	r2, [r7, #7]
 800454a:	429a      	cmp	r2, r3
 800454c:	d10a      	bne.n	8004564 <getCountdowntime+0x90>
 800454e:	7b7b      	ldrb	r3, [r7, #13]
 8004550:	79ba      	ldrb	r2, [r7, #6]
 8004552:	429a      	cmp	r2, r3
 8004554:	d106      	bne.n	8004564 <getCountdowntime+0x90>
		return sec - curRTC.Sec;
 8004556:	797b      	ldrb	r3, [r7, #5]
 8004558:	b29a      	uxth	r2, r3
 800455a:	7bbb      	ldrb	r3, [r7, #14]
 800455c:	b29b      	uxth	r3, r3
 800455e:	1ad3      	subs	r3, r2, r3
 8004560:	b29b      	uxth	r3, r3
 8004562:	e03b      	b.n	80045dc <getCountdowntime+0x108>
	}
	if (hour == curRTC.Hour)	{
 8004564:	7b3b      	ldrb	r3, [r7, #12]
 8004566:	79fa      	ldrb	r2, [r7, #7]
 8004568:	429a      	cmp	r2, r3
 800456a:	d113      	bne.n	8004594 <getCountdowntime+0xc0>
		return (min - curRTC.Min)*60 + (60 - curRTC.Sec + sec);
 800456c:	79bb      	ldrb	r3, [r7, #6]
 800456e:	7b7a      	ldrb	r2, [r7, #13]
 8004570:	1a9b      	subs	r3, r3, r2
 8004572:	b29b      	uxth	r3, r3
 8004574:	461a      	mov	r2, r3
 8004576:	0112      	lsls	r2, r2, #4
 8004578:	1ad3      	subs	r3, r2, r3
 800457a:	009b      	lsls	r3, r3, #2
 800457c:	b29a      	uxth	r2, r3
 800457e:	797b      	ldrb	r3, [r7, #5]
 8004580:	b299      	uxth	r1, r3
 8004582:	7bbb      	ldrb	r3, [r7, #14]
 8004584:	b29b      	uxth	r3, r3
 8004586:	1acb      	subs	r3, r1, r3
 8004588:	b29b      	uxth	r3, r3
 800458a:	4413      	add	r3, r2
 800458c:	b29b      	uxth	r3, r3
 800458e:	333c      	adds	r3, #60	; 0x3c
 8004590:	b29b      	uxth	r3, r3
 8004592:	e023      	b.n	80045dc <getCountdowntime+0x108>
	}
	else
		return (hour -curRTC.Hour - 1)* 3600 + (60 - curRTC.Min + min)*60 + (60 - curRTC.Sec + sec);
 8004594:	79fb      	ldrb	r3, [r7, #7]
 8004596:	7b3a      	ldrb	r2, [r7, #12]
 8004598:	1a9b      	subs	r3, r3, r2
 800459a:	3b01      	subs	r3, #1
 800459c:	b29b      	uxth	r3, r3
 800459e:	461a      	mov	r2, r3
 80045a0:	0112      	lsls	r2, r2, #4
 80045a2:	1ad3      	subs	r3, r2, r3
 80045a4:	461a      	mov	r2, r3
 80045a6:	0112      	lsls	r2, r2, #4
 80045a8:	1ad3      	subs	r3, r2, r3
 80045aa:	011b      	lsls	r3, r3, #4
 80045ac:	b29a      	uxth	r2, r3
 80045ae:	7b7b      	ldrb	r3, [r7, #13]
 80045b0:	f1c3 013c 	rsb	r1, r3, #60	; 0x3c
 80045b4:	79bb      	ldrb	r3, [r7, #6]
 80045b6:	440b      	add	r3, r1
 80045b8:	b29b      	uxth	r3, r3
 80045ba:	4619      	mov	r1, r3
 80045bc:	0109      	lsls	r1, r1, #4
 80045be:	1acb      	subs	r3, r1, r3
 80045c0:	009b      	lsls	r3, r3, #2
 80045c2:	b29b      	uxth	r3, r3
 80045c4:	4413      	add	r3, r2
 80045c6:	b29a      	uxth	r2, r3
 80045c8:	797b      	ldrb	r3, [r7, #5]
 80045ca:	b299      	uxth	r1, r3
 80045cc:	7bbb      	ldrb	r3, [r7, #14]
 80045ce:	b29b      	uxth	r3, r3
 80045d0:	1acb      	subs	r3, r1, r3
 80045d2:	b29b      	uxth	r3, r3
 80045d4:	4413      	add	r3, r2
 80045d6:	b29b      	uxth	r3, r3
 80045d8:	333c      	adds	r3, #60	; 0x3c
 80045da:	b29b      	uxth	r3, r3

}
 80045dc:	4618      	mov	r0, r3
 80045de:	3710      	adds	r7, #16
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}

080045e4 <initLora>:
//static uint16_t oldPos = 0, newPos = 0;
static uint16_t head = 0, tail = 0;
uint8_t isOK = 0;

void initLora()
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	af00      	add	r7, sp, #0
//	__LORA_UART = huart;
//	__LORA_DMA_UART = hdma;
	enableReceiveDMAtoIdle_Lora();
 80045e8:	f000 f802 	bl	80045f0 <enableReceiveDMAtoIdle_Lora>

}
 80045ec:	bf00      	nop
 80045ee:	bd80      	pop	{r7, pc}

080045f0 <enableReceiveDMAtoIdle_Lora>:
{
//	initLora(huart, hdma);
//	myStation = myStation;
}
void enableReceiveDMAtoIdle_Lora(void)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	af00      	add	r7, sp, #0
	  HAL_UARTEx_ReceiveToIdle_DMA(__LORA_UART, LoraRxbuff, LORARXBUFF_MAXLEN);
 80045f4:	2280      	movs	r2, #128	; 0x80
 80045f6:	4907      	ldr	r1, [pc, #28]	; (8004614 <enableReceiveDMAtoIdle_Lora+0x24>)
 80045f8:	4807      	ldr	r0, [pc, #28]	; (8004618 <enableReceiveDMAtoIdle_Lora+0x28>)
 80045fa:	f006 fd76 	bl	800b0ea <HAL_UARTEx_ReceiveToIdle_DMA>
	  __HAL_DMA_DISABLE_IT(__LORA_DMA_UART,DMA_IT_HT);
 80045fe:	4b07      	ldr	r3, [pc, #28]	; (800461c <enableReceiveDMAtoIdle_Lora+0x2c>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	4b05      	ldr	r3, [pc, #20]	; (800461c <enableReceiveDMAtoIdle_Lora+0x2c>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f022 0204 	bic.w	r2, r2, #4
 800460c:	601a      	str	r2, [r3, #0]
}
 800460e:	bf00      	nop
 8004610:	bd80      	pop	{r7, pc}
 8004612:	bf00      	nop
 8004614:	2000137c 	.word	0x2000137c
 8004618:	20002ae0 	.word	0x20002ae0
 800461c:	20002bb0 	.word	0x20002bb0

08004620 <Lora_callback>:

void Lora_callback(uint16_t Size)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b082      	sub	sp, #8
 8004624:	af00      	add	r7, sp, #0
 8004626:	4603      	mov	r3, r0
 8004628:	80fb      	strh	r3, [r7, #6]
	/* if the current position + new data size is less than the main buffer
	 * we will Loraply copy the data into the buffer and update the position
	 */
//	else
//	{
		memcpy ((uint8_t *)Lorabuff, (uint8_t *)LoraRxbuff, Size);
 800462a:	88fb      	ldrh	r3, [r7, #6]
 800462c:	461a      	mov	r2, r3
 800462e:	490e      	ldr	r1, [pc, #56]	; (8004668 <Lora_callback+0x48>)
 8004630:	480e      	ldr	r0, [pc, #56]	; (800466c <Lora_callback+0x4c>)
 8004632:	f007 fe21 	bl	800c278 <memcpy>
//	if (head + Size < LORABUFF_MAXLEN ) head = head + Size;
//	else head = head + Size - LORABUFF_MAXLEN;

//	memset(LoraRxbuff, 0, LORARXBUFF_MAXLEN);
	/* start the DMA again */
	enableReceiveDMAtoIdle_Lora();
 8004636:	f7ff ffdb 	bl	80045f0 <enableReceiveDMAtoIdle_Lora>


	//Processing data
	if (isWordinBuff(Lorabuff, Size, (uint8_t*)"OK")) {
 800463a:	88fb      	ldrh	r3, [r7, #6]
 800463c:	4a0c      	ldr	r2, [pc, #48]	; (8004670 <Lora_callback+0x50>)
 800463e:	4619      	mov	r1, r3
 8004640:	480a      	ldr	r0, [pc, #40]	; (800466c <Lora_callback+0x4c>)
 8004642:	f000 fe6f 	bl	8005324 <isWordinBuff>
 8004646:	4603      	mov	r3, r0
 8004648:	2b00      	cmp	r3, #0
 800464a:	d002      	beq.n	8004652 <Lora_callback+0x32>
		isOK = 1;
 800464c:	4b09      	ldr	r3, [pc, #36]	; (8004674 <Lora_callback+0x54>)
 800464e:	2201      	movs	r2, #1
 8004650:	701a      	strb	r2, [r3, #0]
	}
	Lora_receive(Lorabuff, Size);
 8004652:	88fb      	ldrh	r3, [r7, #6]
 8004654:	b2db      	uxtb	r3, r3
 8004656:	4619      	mov	r1, r3
 8004658:	4804      	ldr	r0, [pc, #16]	; (800466c <Lora_callback+0x4c>)
 800465a:	f000 f831 	bl	80046c0 <Lora_receive>

}
 800465e:	bf00      	nop
 8004660:	3708      	adds	r7, #8
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}
 8004666:	bf00      	nop
 8004668:	2000137c 	.word	0x2000137c
 800466c:	200013fc 	.word	0x200013fc
 8004670:	0800f058 	.word	0x0800f058
 8004674:	200014e0 	.word	0x200014e0

08004678 <isIDExist>:
{
	tail = head;
}

bool isIDExist (uint8_t ID)
{
 8004678:	b480      	push	{r7}
 800467a:	b085      	sub	sp, #20
 800467c:	af00      	add	r7, sp, #0
 800467e:	4603      	mov	r3, r0
 8004680:	71fb      	strb	r3, [r7, #7]
	Node * current = myStation.ssNode_list->head->next;
 8004682:	4b0e      	ldr	r3, [pc, #56]	; (80046bc <isIDExist+0x44>)
 8004684:	68db      	ldr	r3, [r3, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800468a:	60fb      	str	r3, [r7, #12]
	while (current != myStation.ssNode_list->tail)
 800468c:	e009      	b.n	80046a2 <isIDExist+0x2a>
	{
		if ( ID == current->SSnode.SSnode_ID)	return true;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	781b      	ldrb	r3, [r3, #0]
 8004692:	79fa      	ldrb	r2, [r7, #7]
 8004694:	429a      	cmp	r2, r3
 8004696:	d101      	bne.n	800469c <isIDExist+0x24>
 8004698:	2301      	movs	r3, #1
 800469a:	e009      	b.n	80046b0 <isIDExist+0x38>
		current = current->next;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046a0:	60fb      	str	r3, [r7, #12]
	while (current != myStation.ssNode_list->tail)
 80046a2:	4b06      	ldr	r3, [pc, #24]	; (80046bc <isIDExist+0x44>)
 80046a4:	68db      	ldr	r3, [r3, #12]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	68fa      	ldr	r2, [r7, #12]
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d1ef      	bne.n	800468e <isIDExist+0x16>
	}
	return false;
 80046ae:	2300      	movs	r3, #0
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	3714      	adds	r7, #20
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bc80      	pop	{r7}
 80046b8:	4770      	bx	lr
 80046ba:	bf00      	nop
 80046bc:	20000474 	.word	0x20000474

080046c0 <Lora_receive>:
void Lora_receive(uint8_t *Msg, uint8_t msglen)
{
 80046c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80046c4:	b0d9      	sub	sp, #356	; 0x164
 80046c6:	af1a      	add	r7, sp, #104	; 0x68
 80046c8:	6078      	str	r0, [r7, #4]
 80046ca:	460b      	mov	r3, r1
 80046cc:	70fb      	strb	r3, [r7, #3]
 80046ce:	466b      	mov	r3, sp
 80046d0:	461e      	mov	r6, r3
	if (Msg[START_POS] != START_VALUE)	return ;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	781b      	ldrb	r3, [r3, #0]
 80046d6:	2b01      	cmp	r3, #1
 80046d8:	f040 8179 	bne.w	80049ce <Lora_receive+0x30e>
	uint8_t id_len = Msg[ID_LENGTH_POS] - 1;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	3301      	adds	r3, #1
 80046e0:	781b      	ldrb	r3, [r3, #0]
 80046e2:	3b01      	subs	r3, #1
 80046e4:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
	// Get sensor ID
	uint8_t tmpidbuff[id_len+1] ;
 80046e8:	f897 30eb 	ldrb.w	r3, [r7, #235]	; 0xeb
 80046ec:	1c59      	adds	r1, r3, #1
 80046ee:	1e4b      	subs	r3, r1, #1
 80046f0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80046f4:	460a      	mov	r2, r1
 80046f6:	2300      	movs	r3, #0
 80046f8:	4690      	mov	r8, r2
 80046fa:	4699      	mov	r9, r3
 80046fc:	f04f 0200 	mov.w	r2, #0
 8004700:	f04f 0300 	mov.w	r3, #0
 8004704:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004708:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800470c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004710:	460a      	mov	r2, r1
 8004712:	2300      	movs	r3, #0
 8004714:	4614      	mov	r4, r2
 8004716:	461d      	mov	r5, r3
 8004718:	f04f 0200 	mov.w	r2, #0
 800471c:	f04f 0300 	mov.w	r3, #0
 8004720:	00eb      	lsls	r3, r5, #3
 8004722:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004726:	00e2      	lsls	r2, r4, #3
 8004728:	460b      	mov	r3, r1
 800472a:	3307      	adds	r3, #7
 800472c:	08db      	lsrs	r3, r3, #3
 800472e:	00db      	lsls	r3, r3, #3
 8004730:	ebad 0d03 	sub.w	sp, sp, r3
 8004734:	ab1a      	add	r3, sp, #104	; 0x68
 8004736:	3300      	adds	r3, #0
 8004738:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
	memset(tmpidbuff, 0, id_len+1);
 800473c:	f897 30eb 	ldrb.w	r3, [r7, #235]	; 0xeb
 8004740:	3301      	adds	r3, #1
 8004742:	461a      	mov	r2, r3
 8004744:	2100      	movs	r1, #0
 8004746:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 800474a:	f007 fda3 	bl	800c294 <memset>
	memcpy(tmpidbuff, Msg +ID_STARTPOS, id_len);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	3303      	adds	r3, #3
 8004752:	f897 20eb 	ldrb.w	r2, [r7, #235]	; 0xeb
 8004756:	4619      	mov	r1, r3
 8004758:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 800475c:	f007 fd8c 	bl	800c278 <memcpy>
	uint8_t id = atoi((char*)tmpidbuff);
 8004760:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 8004764:	f007 fc2a 	bl	800bfbc <atoi>
 8004768:	4603      	mov	r3, r0
 800476a:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
	if ( !sensorID_validation(id) )	return;
 800476e:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8004772:	4618      	mov	r0, r3
 8004774:	f001 f906 	bl	8005984 <sensorID_validation>
 8004778:	4603      	mov	r3, r0
 800477a:	f083 0301 	eor.w	r3, r3, #1
 800477e:	b2db      	uxtb	r3, r3
 8004780:	2b00      	cmp	r3, #0
 8004782:	f040 8126 	bne.w	80049d2 <Lora_receive+0x312>

	// Get voltage type or mode
	uint8_t flag = 0;
 8004786:	2300      	movs	r3, #0
 8004788:	f887 30f1 	strb.w	r3, [r7, #241]	; 0xf1
	voltage_t vtype = 0;
 800478c:	2300      	movs	r3, #0
 800478e:	f887 30f2 	strb.w	r3, [r7, #242]	; 0xf2
	uint8_t modevalue = 0;
 8004792:	2300      	movs	r3, #0
 8004794:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
	uint16_t Vperiod = 0;
 8004798:	2300      	movs	r3, #0
 800479a:	f8a7 30f4 	strh.w	r3, [r7, #244]	; 0xf4
	uint8_t Vcalib[101];
	uint8_t vbat = 0;
 800479e:	2300      	movs	r3, #0
 80047a0:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
	uint8_t mode = 0;
 80047a4:	2300      	movs	r3, #0
 80047a6:	f887 30f0 	strb.w	r3, [r7, #240]	; 0xf0
	uint8_t tmp = Msg[ID_STARTPOS+id_len];
 80047aa:	f897 30eb 	ldrb.w	r3, [r7, #235]	; 0xeb
 80047ae:	3303      	adds	r3, #3
 80047b0:	461a      	mov	r2, r3
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	4413      	add	r3, r2
 80047b6:	781b      	ldrb	r3, [r3, #0]
 80047b8:	f887 30de 	strb.w	r3, [r7, #222]	; 0xde
	switch (tmp)	{
 80047bc:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 80047c0:	2b08      	cmp	r3, #8
 80047c2:	d009      	beq.n	80047d8 <Lora_receive+0x118>
 80047c4:	2b08      	cmp	r3, #8
 80047c6:	dc0f      	bgt.n	80047e8 <Lora_receive+0x128>
 80047c8:	2b04      	cmp	r3, #4
 80047ca:	d009      	beq.n	80047e0 <Lora_receive+0x120>
 80047cc:	2b07      	cmp	r3, #7
 80047ce:	d10b      	bne.n	80047e8 <Lora_receive+0x128>
	case 7:
		vtype = V_na;
 80047d0:	2302      	movs	r3, #2
 80047d2:	f887 30f2 	strb.w	r3, [r7, #242]	; 0xf2
		break;
 80047d6:	e008      	b.n	80047ea <Lora_receive+0x12a>
	case 8:
		vtype = V_p;
 80047d8:	2301      	movs	r3, #1
 80047da:	f887 30f2 	strb.w	r3, [r7, #242]	; 0xf2
		break;
 80047de:	e004      	b.n	80047ea <Lora_receive+0x12a>
	case 4:
		mode = 1;
 80047e0:	2301      	movs	r3, #1
 80047e2:	f887 30f0 	strb.w	r3, [r7, #240]	; 0xf0
		break;
 80047e6:	e000      	b.n	80047ea <Lora_receive+0x12a>
	default:
		break;
 80047e8:	bf00      	nop
	}
	if (!vtype && !mode)	return;
 80047ea:	f897 30f2 	ldrb.w	r3, [r7, #242]	; 0xf2
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d104      	bne.n	80047fc <Lora_receive+0x13c>
 80047f2:	f897 30f0 	ldrb.w	r3, [r7, #240]	; 0xf0
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	f000 80ed 	beq.w	80049d6 <Lora_receive+0x316>
	if (mode)	{
 80047fc:	f897 30f0 	ldrb.w	r3, [r7, #240]	; 0xf0
 8004800:	2b00      	cmp	r3, #0
 8004802:	d00b      	beq.n	800481c <Lora_receive+0x15c>
		// Get mode
		modevalue = Msg[ID_STARTPOS+id_len +2];
 8004804:	f897 30eb 	ldrb.w	r3, [r7, #235]	; 0xeb
 8004808:	3305      	adds	r3, #5
 800480a:	687a      	ldr	r2, [r7, #4]
 800480c:	4413      	add	r3, r2
 800480e:	781b      	ldrb	r3, [r3, #0]
 8004810:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
		flag = 1;
 8004814:	2301      	movs	r3, #1
 8004816:	f887 30f1 	strb.w	r3, [r7, #241]	; 0xf1
 800481a:	e030      	b.n	800487e <Lora_receive+0x1be>
	}
	else {
		// check whether Data Period or Data Calib
		switch	(Msg[ID_STARTPOS +id_len +1]) {
 800481c:	f897 30eb 	ldrb.w	r3, [r7, #235]	; 0xeb
 8004820:	3304      	adds	r3, #4
 8004822:	687a      	ldr	r2, [r7, #4]
 8004824:	4413      	add	r3, r2
 8004826:	781b      	ldrb	r3, [r3, #0]
 8004828:	2b02      	cmp	r3, #2
 800482a:	d002      	beq.n	8004832 <Lora_receive+0x172>
 800482c:	2b64      	cmp	r3, #100	; 0x64
 800482e:	d017      	beq.n	8004860 <Lora_receive+0x1a0>
			// Get data calib value
			memcpy(Vcalib , Msg + ID_STARTPOS +id_len +2, 100);
			flag = 3;
			break;
		default:
			break;
 8004830:	e025      	b.n	800487e <Lora_receive+0x1be>
			Vperiod = buff2twobyte(Msg + ID_STARTPOS +id_len +2);
 8004832:	f897 30eb 	ldrb.w	r3, [r7, #235]	; 0xeb
 8004836:	3305      	adds	r3, #5
 8004838:	687a      	ldr	r2, [r7, #4]
 800483a:	4413      	add	r3, r2
 800483c:	4618      	mov	r0, r3
 800483e:	f000 fe19 	bl	8005474 <buff2twobyte>
 8004842:	4603      	mov	r3, r0
 8004844:	f8a7 30f4 	strh.w	r3, [r7, #244]	; 0xf4
			vbat = Msg[ID_STARTPOS +id_len +6];
 8004848:	f897 30eb 	ldrb.w	r3, [r7, #235]	; 0xeb
 800484c:	3309      	adds	r3, #9
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	4413      	add	r3, r2
 8004852:	781b      	ldrb	r3, [r3, #0]
 8004854:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
			flag = 2;
 8004858:	2302      	movs	r3, #2
 800485a:	f887 30f1 	strb.w	r3, [r7, #241]	; 0xf1
			break;
 800485e:	e00e      	b.n	800487e <Lora_receive+0x1be>
			memcpy(Vcalib , Msg + ID_STARTPOS +id_len +2, 100);
 8004860:	f897 30eb 	ldrb.w	r3, [r7, #235]	; 0xeb
 8004864:	3305      	adds	r3, #5
 8004866:	687a      	ldr	r2, [r7, #4]
 8004868:	18d1      	adds	r1, r2, r3
 800486a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800486e:	2264      	movs	r2, #100	; 0x64
 8004870:	4618      	mov	r0, r3
 8004872:	f007 fd01 	bl	800c278 <memcpy>
			flag = 3;
 8004876:	2303      	movs	r3, #3
 8004878:	f887 30f1 	strb.w	r3, [r7, #241]	; 0xf1
			break;
 800487c:	bf00      	nop
		}

	}

	// If Sensor ID is  not already saved in the Sensor node list
	if ( !isIDExist(id) )		{
 800487e:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8004882:	4618      	mov	r0, r3
 8004884:	f7ff fef8 	bl	8004678 <isIDExist>
 8004888:	4603      	mov	r3, r0
 800488a:	f083 0301 	eor.w	r3, r3, #1
 800488e:	b2db      	uxtb	r3, r3
 8004890:	2b00      	cmp	r3, #0
 8004892:	d04a      	beq.n	800492a <Lora_receive+0x26a>
		triggerTaskflag(TASK_REGISTER, FLAG_EN);
 8004894:	2101      	movs	r1, #1
 8004896:	2000      	movs	r0, #0
 8004898:	f000 ff4c 	bl	8005734 <triggerTaskflag>
		SensorNode_t newSensor = SENSORNODE_T_INIT;
 800489c:	f107 0308 	add.w	r3, r7, #8
 80048a0:	2270      	movs	r2, #112	; 0x70
 80048a2:	2100      	movs	r1, #0
 80048a4:	4618      	mov	r0, r3
 80048a6:	f007 fcf5 	bl	800c294 <memset>
 80048aa:	2301      	movs	r3, #1
 80048ac:	72bb      	strb	r3, [r7, #10]
 80048ae:	2301      	movs	r3, #1
 80048b0:	73bb      	strb	r3, [r7, #14]
		newSensor.SSnode_ID = id;
 80048b2:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 80048b6:	723b      	strb	r3, [r7, #8]
		switch (flag)	{
 80048b8:	f897 30f1 	ldrb.w	r3, [r7, #241]	; 0xf1
 80048bc:	2b03      	cmp	r3, #3
 80048be:	d014      	beq.n	80048ea <Lora_receive+0x22a>
 80048c0:	2b03      	cmp	r3, #3
 80048c2:	dc21      	bgt.n	8004908 <Lora_receive+0x248>
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d002      	beq.n	80048ce <Lora_receive+0x20e>
 80048c8:	2b02      	cmp	r3, #2
 80048ca:	d004      	beq.n	80048d6 <Lora_receive+0x216>
			newSensor.V_type = vtype;
			memcpy(newSensor.dataCalibBuffer, Vcalib, 100);
			newSensor.dataCalibAvailable = 1;
			break;
		default:
			break;
 80048cc:	e01c      	b.n	8004908 <Lora_receive+0x248>
			newSensor.sensorMode = modevalue;
 80048ce:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 80048d2:	747b      	strb	r3, [r7, #17]
			break;
 80048d4:	e019      	b.n	800490a <Lora_receive+0x24a>
			newSensor.V_type = vtype;
 80048d6:	f897 30f2 	ldrb.w	r3, [r7, #242]	; 0xf2
 80048da:	72bb      	strb	r3, [r7, #10]
			newSensor.V_value = Vperiod;
 80048dc:	f8b7 30f4 	ldrh.w	r3, [r7, #244]	; 0xf4
 80048e0:	81bb      	strh	r3, [r7, #12]
			newSensor.Battery = vbat;
 80048e2:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
 80048e6:	727b      	strb	r3, [r7, #9]
			break;
 80048e8:	e00f      	b.n	800490a <Lora_receive+0x24a>
			newSensor.V_type = vtype;
 80048ea:	f897 30f2 	ldrb.w	r3, [r7, #242]	; 0xf2
 80048ee:	72bb      	strb	r3, [r7, #10]
			memcpy(newSensor.dataCalibBuffer, Vcalib, 100);
 80048f0:	f107 0178 	add.w	r1, r7, #120	; 0x78
 80048f4:	f107 0308 	add.w	r3, r7, #8
 80048f8:	330a      	adds	r3, #10
 80048fa:	2264      	movs	r2, #100	; 0x64
 80048fc:	4618      	mov	r0, r3
 80048fe:	f007 fcbb 	bl	800c278 <memcpy>
			newSensor.dataCalibAvailable = 1;
 8004902:	2301      	movs	r3, #1
 8004904:	73fb      	strb	r3, [r7, #15]
			break;
 8004906:	e000      	b.n	800490a <Lora_receive+0x24a>
			break;
 8004908:	bf00      	nop
		}
		list_append(myStation.ssNode_list, newSensor);
 800490a:	4b36      	ldr	r3, [pc, #216]	; (80049e4 <Lora_receive+0x324>)
 800490c:	68dc      	ldr	r4, [r3, #12]
 800490e:	4668      	mov	r0, sp
 8004910:	f107 0314 	add.w	r3, r7, #20
 8004914:	2264      	movs	r2, #100	; 0x64
 8004916:	4619      	mov	r1, r3
 8004918:	f007 fcae 	bl	800c278 <memcpy>
 800491c:	f107 0308 	add.w	r3, r7, #8
 8004920:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004922:	4620      	mov	r0, r4
 8004924:	f001 fb18 	bl	8005f58 <list_append>
 8004928:	e04f      	b.n	80049ca <Lora_receive+0x30a>
	}
	// If Sensor ID is already saved in the Sensor node list
	else {
		Node * current = myStation.ssNode_list->head->next;
 800492a:	4b2e      	ldr	r3, [pc, #184]	; (80049e4 <Lora_receive+0x324>)
 800492c:	68db      	ldr	r3, [r3, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004932:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
		while (current != myStation.ssNode_list->tail)	{
 8004936:	e041      	b.n	80049bc <Lora_receive+0x2fc>
			if (current->SSnode.SSnode_ID == id) {
 8004938:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800493c:	781b      	ldrb	r3, [r3, #0]
 800493e:	f897 20df 	ldrb.w	r2, [r7, #223]	; 0xdf
 8004942:	429a      	cmp	r2, r3
 8004944:	d135      	bne.n	80049b2 <Lora_receive+0x2f2>
				switch (flag)	{
 8004946:	f897 30f1 	ldrb.w	r3, [r7, #241]	; 0xf1
 800494a:	2b03      	cmp	r3, #3
 800494c:	d01c      	beq.n	8004988 <Lora_receive+0x2c8>
 800494e:	2b03      	cmp	r3, #3
 8004950:	dc2d      	bgt.n	80049ae <Lora_receive+0x2ee>
 8004952:	2b01      	cmp	r3, #1
 8004954:	d002      	beq.n	800495c <Lora_receive+0x29c>
 8004956:	2b02      	cmp	r3, #2
 8004958:	d006      	beq.n	8004968 <Lora_receive+0x2a8>
					current->SSnode.V_type = vtype;
					memcpy(current->SSnode.dataCalibBuffer, Vcalib, 100);
					current->SSnode.dataCalibAvailable = 1;
					break;
				default:
					break;
 800495a:	e028      	b.n	80049ae <Lora_receive+0x2ee>
					current->SSnode.sensorMode = modevalue;
 800495c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004960:	f897 20f3 	ldrb.w	r2, [r7, #243]	; 0xf3
 8004964:	725a      	strb	r2, [r3, #9]
					break;
 8004966:	e023      	b.n	80049b0 <Lora_receive+0x2f0>
					current->SSnode.V_type = vtype;
 8004968:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800496c:	f897 20f2 	ldrb.w	r2, [r7, #242]	; 0xf2
 8004970:	709a      	strb	r2, [r3, #2]
					current->SSnode.V_value = Vperiod;
 8004972:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004976:	f8b7 20f4 	ldrh.w	r2, [r7, #244]	; 0xf4
 800497a:	809a      	strh	r2, [r3, #4]
					current->SSnode.Battery = vbat;
 800497c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004980:	f897 20f7 	ldrb.w	r2, [r7, #247]	; 0xf7
 8004984:	705a      	strb	r2, [r3, #1]
					break;
 8004986:	e013      	b.n	80049b0 <Lora_receive+0x2f0>
					current->SSnode.V_type = vtype;
 8004988:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800498c:	f897 20f2 	ldrb.w	r2, [r7, #242]	; 0xf2
 8004990:	709a      	strb	r2, [r3, #2]
					memcpy(current->SSnode.dataCalibBuffer, Vcalib, 100);
 8004992:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004996:	330a      	adds	r3, #10
 8004998:	f107 0178 	add.w	r1, r7, #120	; 0x78
 800499c:	2264      	movs	r2, #100	; 0x64
 800499e:	4618      	mov	r0, r3
 80049a0:	f007 fc6a 	bl	800c278 <memcpy>
					current->SSnode.dataCalibAvailable = 1;
 80049a4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80049a8:	2201      	movs	r2, #1
 80049aa:	71da      	strb	r2, [r3, #7]
					break;
 80049ac:	e000      	b.n	80049b0 <Lora_receive+0x2f0>
					break;
 80049ae:	bf00      	nop
				}
				return;
 80049b0:	e012      	b.n	80049d8 <Lora_receive+0x318>
			}
			current = current->next;
 80049b2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80049b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049b8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
		while (current != myStation.ssNode_list->tail)	{
 80049bc:	4b09      	ldr	r3, [pc, #36]	; (80049e4 <Lora_receive+0x324>)
 80049be:	68db      	ldr	r3, [r3, #12]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80049c6:	429a      	cmp	r2, r3
 80049c8:	d1b6      	bne.n	8004938 <Lora_receive+0x278>
 80049ca:	46b5      	mov	sp, r6
 80049cc:	e005      	b.n	80049da <Lora_receive+0x31a>
	if (Msg[START_POS] != START_VALUE)	return ;
 80049ce:	bf00      	nop
 80049d0:	e002      	b.n	80049d8 <Lora_receive+0x318>
	if ( !sensorID_validation(id) )	return;
 80049d2:	bf00      	nop
 80049d4:	e000      	b.n	80049d8 <Lora_receive+0x318>
	if (!vtype && !mode)	return;
 80049d6:	bf00      	nop
 80049d8:	46b5      	mov	sp, r6
		}
	}
}
 80049da:	37fc      	adds	r7, #252	; 0xfc
 80049dc:	46bd      	mov	sp, r7
 80049de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80049e2:	bf00      	nop
 80049e4:	20000474 	.word	0x20000474

080049e8 <Lora_Setmode>:
/*
 *  @para: checkres : 0 no check
 *  				  1 check
 */
uint8_t Lora_Setmode(sensor_mode_t mode, uint8_t checkres)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b084      	sub	sp, #16
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	4603      	mov	r3, r0
 80049f0:	460a      	mov	r2, r1
 80049f2:	71fb      	strb	r3, [r7, #7]
 80049f4:	4613      	mov	r3, r2
 80049f6:	71bb      	strb	r3, [r7, #6]
	uint8_t len = sprintf((char*)LoraTxbuff, "AT+MODE=%d", mode);
 80049f8:	79fb      	ldrb	r3, [r7, #7]
 80049fa:	461a      	mov	r2, r3
 80049fc:	4918      	ldr	r1, [pc, #96]	; (8004a60 <Lora_Setmode+0x78>)
 80049fe:	4819      	ldr	r0, [pc, #100]	; (8004a64 <Lora_Setmode+0x7c>)
 8004a00:	f007 ffae 	bl	800c960 <siprintf>
 8004a04:	4603      	mov	r3, r0
 8004a06:	737b      	strb	r3, [r7, #13]
	isOK = 0;
 8004a08:	4b17      	ldr	r3, [pc, #92]	; (8004a68 <Lora_Setmode+0x80>)
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(__LORA_UART, LoraTxbuff, len, LORA_TIMEOUT);
 8004a0e:	7b7b      	ldrb	r3, [r7, #13]
 8004a10:	b29a      	uxth	r2, r3
 8004a12:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004a16:	4913      	ldr	r1, [pc, #76]	; (8004a64 <Lora_Setmode+0x7c>)
 8004a18:	4814      	ldr	r0, [pc, #80]	; (8004a6c <Lora_Setmode+0x84>)
 8004a1a:	f006 fae3 	bl	800afe4 <HAL_UART_Transmit>
	// Wait for responding
	switch (checkres)	{
 8004a1e:	79bb      	ldrb	r3, [r7, #6]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d016      	beq.n	8004a52 <Lora_Setmode+0x6a>
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	d000      	beq.n	8004a2a <Lora_Setmode+0x42>
				return 1;
			}
		}
		break;
	default :
		break;
 8004a28:	e014      	b.n	8004a54 <Lora_Setmode+0x6c>
		for (uint16_t i = 0; i < 500; i++)	{
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	81fb      	strh	r3, [r7, #14]
 8004a2e:	e00b      	b.n	8004a48 <Lora_Setmode+0x60>
			HAL_Delay(2);
 8004a30:	2002      	movs	r0, #2
 8004a32:	f003 f96b 	bl	8007d0c <HAL_Delay>
			if (isOK) {
 8004a36:	4b0c      	ldr	r3, [pc, #48]	; (8004a68 <Lora_Setmode+0x80>)
 8004a38:	781b      	ldrb	r3, [r3, #0]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d001      	beq.n	8004a42 <Lora_Setmode+0x5a>
				return 1;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e009      	b.n	8004a56 <Lora_Setmode+0x6e>
		for (uint16_t i = 0; i < 500; i++)	{
 8004a42:	89fb      	ldrh	r3, [r7, #14]
 8004a44:	3301      	adds	r3, #1
 8004a46:	81fb      	strh	r3, [r7, #14]
 8004a48:	89fb      	ldrh	r3, [r7, #14]
 8004a4a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004a4e:	d3ef      	bcc.n	8004a30 <Lora_Setmode+0x48>
		break;
 8004a50:	e000      	b.n	8004a54 <Lora_Setmode+0x6c>
		break;
 8004a52:	bf00      	nop
	}
	return 0;
 8004a54:	2300      	movs	r3, #0
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3710      	adds	r7, #16
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}
 8004a5e:	bf00      	nop
 8004a60:	0800f05c 	.word	0x0800f05c
 8004a64:	2000147c 	.word	0x2000147c
 8004a68:	200014e0 	.word	0x200014e0
 8004a6c:	20002ae0 	.word	0x20002ae0

08004a70 <init_MQTT>:

uint8_t MQTT_Txbuff [MQTT_TXBUFF_SIZE];


void init_MQTT()
{
 8004a70:	b480      	push	{r7}
 8004a72:	af00      	add	r7, sp, #0
//	mySIM = SIM;
}
 8004a74:	bf00      	nop
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bc80      	pop	{r7}
 8004a7a:	4770      	bx	lr

08004a7c <MQTT_getConnectflag>:

uint8_t MQTT_getConnectflag()
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	af00      	add	r7, sp, #0
	return mySIM.mqttServer.connect;
 8004a80:	4b03      	ldr	r3, [pc, #12]	; (8004a90 <MQTT_getConnectflag+0x14>)
 8004a82:	7b9b      	ldrb	r3, [r3, #14]
 8004a84:	b2db      	uxtb	r3, r3
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bc80      	pop	{r7}
 8004a8c:	4770      	bx	lr
 8004a8e:	bf00      	nop
 8004a90:	20001768 	.word	0x20001768

08004a94 <getContent>:

}


static uint8_t getContent(content_t contentType, uint8_t *databuffer, uint16_t datalen, uint8_t *getbuffer, uint16_t contentlen)
{
 8004a94:	b5b0      	push	{r4, r5, r7, lr}
 8004a96:	b092      	sub	sp, #72	; 0x48
 8004a98:	af02      	add	r7, sp, #8
 8004a9a:	60b9      	str	r1, [r7, #8]
 8004a9c:	607b      	str	r3, [r7, #4]
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	73fb      	strb	r3, [r7, #15]
 8004aa2:	4613      	mov	r3, r2
 8004aa4:	81bb      	strh	r3, [r7, #12]
	uint16_t gotcontent_len = 0;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	87fb      	strh	r3, [r7, #62]	; 0x3e

	uint8_t *currentPOS ;
	uint16_t databuffer_Remainlen = datalen;
 8004aaa:	89bb      	ldrh	r3, [r7, #12]
 8004aac:	86fb      	strh	r3, [r7, #54]	; 0x36

	uint16_t subcontent_len;
	uint8_t subContentlen_buff[10];
	uint8_t contentsignature[20];
	if (contentType == CONTENT_PAYLOAD) {
 8004aae:	7bfb      	ldrb	r3, [r7, #15]
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	d109      	bne.n	8004ac8 <getContent+0x34>
		strcpy( (char*)contentsignature, "+CMQTTRXPAYLOAD:");
 8004ab4:	f107 0314 	add.w	r3, r7, #20
 8004ab8:	4a36      	ldr	r2, [pc, #216]	; (8004b94 <getContent+0x100>)
 8004aba:	461c      	mov	r4, r3
 8004abc:	4615      	mov	r5, r2
 8004abe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004ac0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004ac2:	682b      	ldr	r3, [r5, #0]
 8004ac4:	7023      	strb	r3, [r4, #0]
 8004ac6:	e05b      	b.n	8004b80 <getContent+0xec>
 	}
	else if (contentType == CONTENT_TOPIC) {
 8004ac8:	7bfb      	ldrb	r3, [r7, #15]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d10b      	bne.n	8004ae6 <getContent+0x52>
		strcpy( (char*)contentsignature, "+CMQTTRXTOPIC:");
 8004ace:	f107 0314 	add.w	r3, r7, #20
 8004ad2:	4a31      	ldr	r2, [pc, #196]	; (8004b98 <getContent+0x104>)
 8004ad4:	461c      	mov	r4, r3
 8004ad6:	4613      	mov	r3, r2
 8004ad8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004ada:	c407      	stmia	r4!, {r0, r1, r2}
 8004adc:	8023      	strh	r3, [r4, #0]
 8004ade:	3402      	adds	r4, #2
 8004ae0:	0c1b      	lsrs	r3, r3, #16
 8004ae2:	7023      	strb	r3, [r4, #0]
 8004ae4:	e04c      	b.n	8004b80 <getContent+0xec>
	}
	else return 0;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	e050      	b.n	8004b8c <getContent+0xf8>

	while ( gotcontent_len < contentlen )
	{
		currentPOS = isWordinBuff(databuffer, databuffer_Remainlen, contentsignature);
 8004aea:	f107 0214 	add.w	r2, r7, #20
 8004aee:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004af0:	4619      	mov	r1, r3
 8004af2:	68b8      	ldr	r0, [r7, #8]
 8004af4:	f000 fc16 	bl	8005324 <isWordinBuff>
 8004af8:	63b8      	str	r0, [r7, #56]	; 0x38
		if (currentPOS == NULL)		return  0;
 8004afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d101      	bne.n	8004b04 <getContent+0x70>
 8004b00:	2300      	movs	r3, #0
 8004b02:	e043      	b.n	8004b8c <getContent+0xf8>
		databuffer_Remainlen = getRemainsize( currentPOS, databuffer, databuffer_Remainlen );
 8004b04:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004b06:	461a      	mov	r2, r3
 8004b08:	68b9      	ldr	r1, [r7, #8]
 8004b0a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004b0c:	f000 fc89 	bl	8005422 <getRemainsize>
 8004b10:	4603      	mov	r3, r0
 8004b12:	86fb      	strh	r3, [r7, #54]	; 0x36

		// Get subcontent length
		getBetween( (uint8_t*)",", (uint8_t*) "\r", currentPOS, databuffer_Remainlen, subContentlen_buff);
 8004b14:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8004b16:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004b1a:	9300      	str	r3, [sp, #0]
 8004b1c:	4613      	mov	r3, r2
 8004b1e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b20:	491e      	ldr	r1, [pc, #120]	; (8004b9c <getContent+0x108>)
 8004b22:	481f      	ldr	r0, [pc, #124]	; (8004ba0 <getContent+0x10c>)
 8004b24:	f000 fc2a 	bl	800537c <getBetween>
		subcontent_len = atoi( (char*)subContentlen_buff );
 8004b28:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	f007 fa45 	bl	800bfbc <atoi>
 8004b32:	4603      	mov	r3, r0
 8004b34:	867b      	strh	r3, [r7, #50]	; 0x32

		// Get subcontent
		while ( *currentPOS != '\n'){
 8004b36:	e002      	b.n	8004b3e <getContent+0xaa>
			currentPOS++;
 8004b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b3a:	3301      	adds	r3, #1
 8004b3c:	63bb      	str	r3, [r7, #56]	; 0x38
		while ( *currentPOS != '\n'){
 8004b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b40:	781b      	ldrb	r3, [r3, #0]
 8004b42:	2b0a      	cmp	r3, #10
 8004b44:	d1f8      	bne.n	8004b38 <getContent+0xa4>
		}
		currentPOS++;
 8004b46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b48:	3301      	adds	r3, #1
 8004b4a:	63bb      	str	r3, [r7, #56]	; 0x38
		for (uint16_t i = 0; i< subcontent_len; i++)
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004b50:	e00d      	b.n	8004b6e <getContent+0xda>
		{
			getbuffer[gotcontent_len++] = currentPOS[i];
 8004b52:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004b54:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b56:	441a      	add	r2, r3
 8004b58:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004b5a:	1c59      	adds	r1, r3, #1
 8004b5c:	87f9      	strh	r1, [r7, #62]	; 0x3e
 8004b5e:	4619      	mov	r1, r3
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	440b      	add	r3, r1
 8004b64:	7812      	ldrb	r2, [r2, #0]
 8004b66:	701a      	strb	r2, [r3, #0]
		for (uint16_t i = 0; i< subcontent_len; i++)
 8004b68:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004b6a:	3301      	adds	r3, #1
 8004b6c:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004b6e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004b70:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004b72:	429a      	cmp	r2, r3
 8004b74:	d3ed      	bcc.n	8004b52 <getContent+0xbe>
		}

		// Update databuffer
		databuffer = ++currentPOS;
 8004b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b78:	3301      	adds	r3, #1
 8004b7a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b7e:	60bb      	str	r3, [r7, #8]
	while ( gotcontent_len < contentlen )
 8004b80:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8004b82:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004b86:	429a      	cmp	r2, r3
 8004b88:	d3af      	bcc.n	8004aea <getContent+0x56>
	}
	return 1;
 8004b8a:	2301      	movs	r3, #1
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	3740      	adds	r7, #64	; 0x40
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bdb0      	pop	{r4, r5, r7, pc}
 8004b94:	0800f068 	.word	0x0800f068
 8004b98:	0800f07c 	.word	0x0800f07c
 8004b9c:	0800f08c 	.word	0x0800f08c
 8004ba0:	0800f090 	.word	0x0800f090

08004ba4 <MQTT_receiveGetTopicandPayloadLength>:

uint8_t MQTT_receiveGetTopicandPayloadLength( uint8_t *MQTTbuff, uint16_t buffsize)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b08c      	sub	sp, #48	; 0x30
 8004ba8:	af02      	add	r7, sp, #8
 8004baa:	6078      	str	r0, [r7, #4]
 8004bac:	460b      	mov	r3, r1
 8004bae:	807b      	strh	r3, [r7, #2]
	uint8_t topiclen_buff[10];
	uint8_t payloadlen_buff[10];
//	Serial_log_string("MQTTbuffer: ");
//	Serial_log_buffer(MQTTbuff, buffsize);
//	Serial_log_string(" ");
	uint8_t * currentPos = isWordinBuff(MQTTbuff, buffsize, (uint8_t*)"+CMQTTRXSTART:");
 8004bb0:	887b      	ldrh	r3, [r7, #2]
 8004bb2:	4a22      	ldr	r2, [pc, #136]	; (8004c3c <MQTT_receiveGetTopicandPayloadLength+0x98>)
 8004bb4:	4619      	mov	r1, r3
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f000 fbb4 	bl	8005324 <isWordinBuff>
 8004bbc:	6278      	str	r0, [r7, #36]	; 0x24

	uint16_t remainlen = getRemainsize(currentPos, MQTTbuff, buffsize);
 8004bbe:	887b      	ldrh	r3, [r7, #2]
 8004bc0:	461a      	mov	r2, r3
 8004bc2:	6879      	ldr	r1, [r7, #4]
 8004bc4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004bc6:	f000 fc2c 	bl	8005422 <getRemainsize>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	847b      	strh	r3, [r7, #34]	; 0x22

	getBetween( (uint8_t*)",", (uint8_t*)",", currentPos, remainlen, topiclen_buff);
 8004bce:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8004bd0:	f107 0318 	add.w	r3, r7, #24
 8004bd4:	9300      	str	r3, [sp, #0]
 8004bd6:	4613      	mov	r3, r2
 8004bd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bda:	4919      	ldr	r1, [pc, #100]	; (8004c40 <MQTT_receiveGetTopicandPayloadLength+0x9c>)
 8004bdc:	4818      	ldr	r0, [pc, #96]	; (8004c40 <MQTT_receiveGetTopicandPayloadLength+0x9c>)
 8004bde:	f000 fbcd 	bl	800537c <getBetween>
	mySIM.mqttReceive.topicLen = atoi( (char*)topiclen_buff );
 8004be2:	f107 0318 	add.w	r3, r7, #24
 8004be6:	4618      	mov	r0, r3
 8004be8:	f007 f9e8 	bl	800bfbc <atoi>
 8004bec:	4603      	mov	r3, r0
 8004bee:	b29a      	uxth	r2, r3
 8004bf0:	4b14      	ldr	r3, [pc, #80]	; (8004c44 <MQTT_receiveGetTopicandPayloadLength+0xa0>)
 8004bf2:	f8a3 2156 	strh.w	r2, [r3, #342]	; 0x156

	currentPos = isWordinBuff(currentPos, remainlen,(uint8_t*)",");
 8004bf6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004bf8:	4a11      	ldr	r2, [pc, #68]	; (8004c40 <MQTT_receiveGetTopicandPayloadLength+0x9c>)
 8004bfa:	4619      	mov	r1, r3
 8004bfc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004bfe:	f000 fb91 	bl	8005324 <isWordinBuff>
 8004c02:	6278      	str	r0, [r7, #36]	; 0x24
	currentPos ++;
 8004c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c06:	3301      	adds	r3, #1
 8004c08:	627b      	str	r3, [r7, #36]	; 0x24

	getBetween( (uint8_t*)",", (uint8_t*)"\r", currentPos, remainlen, payloadlen_buff);
 8004c0a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8004c0c:	f107 030c 	add.w	r3, r7, #12
 8004c10:	9300      	str	r3, [sp, #0]
 8004c12:	4613      	mov	r3, r2
 8004c14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c16:	490c      	ldr	r1, [pc, #48]	; (8004c48 <MQTT_receiveGetTopicandPayloadLength+0xa4>)
 8004c18:	4809      	ldr	r0, [pc, #36]	; (8004c40 <MQTT_receiveGetTopicandPayloadLength+0x9c>)
 8004c1a:	f000 fbaf 	bl	800537c <getBetween>
	mySIM.mqttReceive.payloadLen = atoi( (char*)payloadlen_buff );
 8004c1e:	f107 030c 	add.w	r3, r7, #12
 8004c22:	4618      	mov	r0, r3
 8004c24:	f007 f9ca 	bl	800bfbc <atoi>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	b29a      	uxth	r2, r3
 8004c2c:	4b05      	ldr	r3, [pc, #20]	; (8004c44 <MQTT_receiveGetTopicandPayloadLength+0xa0>)
 8004c2e:	f8a3 212c 	strh.w	r2, [r3, #300]	; 0x12c

	return 1;
 8004c32:	2301      	movs	r3, #1
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	3728      	adds	r7, #40	; 0x28
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}
 8004c3c:	0800f094 	.word	0x0800f094
 8004c40:	0800f090 	.word	0x0800f090
 8004c44:	20001768 	.word	0x20001768
 8004c48:	0800f08c 	.word	0x0800f08c

08004c4c <MQTT_receiveGetTopic>:

uint8_t MQTT_receiveGetTopic (uint8_t *MQTTbuff,uint16_t buffsize)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b084      	sub	sp, #16
 8004c50:	af02      	add	r7, sp, #8
 8004c52:	6078      	str	r0, [r7, #4]
 8004c54:	460b      	mov	r3, r1
 8004c56:	807b      	strh	r3, [r7, #2]
	return getContent(CONTENT_TOPIC, MQTTbuff, buffsize, mySIM.mqttReceive.topic, mySIM.mqttReceive.topicLen);
 8004c58:	4b07      	ldr	r3, [pc, #28]	; (8004c78 <MQTT_receiveGetTopic+0x2c>)
 8004c5a:	f8b3 3156 	ldrh.w	r3, [r3, #342]	; 0x156
 8004c5e:	887a      	ldrh	r2, [r7, #2]
 8004c60:	9300      	str	r3, [sp, #0]
 8004c62:	4b06      	ldr	r3, [pc, #24]	; (8004c7c <MQTT_receiveGetTopic+0x30>)
 8004c64:	6879      	ldr	r1, [r7, #4]
 8004c66:	2000      	movs	r0, #0
 8004c68:	f7ff ff14 	bl	8004a94 <getContent>
 8004c6c:	4603      	mov	r3, r0
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3708      	adds	r7, #8
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}
 8004c76:	bf00      	nop
 8004c78:	20001768 	.word	0x20001768
 8004c7c:	20001896 	.word	0x20001896

08004c80 <MQTT_receiveGetPayload>:

uint8_t MQTT_receiveGetPayload (uint8_t *MQTTbuff,uint16_t buffsize)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b084      	sub	sp, #16
 8004c84:	af02      	add	r7, sp, #8
 8004c86:	6078      	str	r0, [r7, #4]
 8004c88:	460b      	mov	r3, r1
 8004c8a:	807b      	strh	r3, [r7, #2]
	return getContent(CONTENT_PAYLOAD, MQTTbuff, buffsize, mySIM.mqttReceive.payload, mySIM.mqttReceive.payloadLen);
 8004c8c:	4b07      	ldr	r3, [pc, #28]	; (8004cac <MQTT_receiveGetPayload+0x2c>)
 8004c8e:	f8b3 312c 	ldrh.w	r3, [r3, #300]	; 0x12c
 8004c92:	887a      	ldrh	r2, [r7, #2]
 8004c94:	9300      	str	r3, [sp, #0]
 8004c96:	4b06      	ldr	r3, [pc, #24]	; (8004cb0 <MQTT_receiveGetPayload+0x30>)
 8004c98:	6879      	ldr	r1, [r7, #4]
 8004c9a:	2001      	movs	r0, #1
 8004c9c:	f7ff fefa 	bl	8004a94 <getContent>
 8004ca0:	4603      	mov	r3, r0
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	3708      	adds	r7, #8
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}
 8004caa:	bf00      	nop
 8004cac:	20001768 	.word	0x20001768
 8004cb0:	20001794 	.word	0x20001794

08004cb4 <MQTT_receive>:
uint8_t MQTT_receive(uint8_t *MQTTbuff,uint16_t buffsize)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b082      	sub	sp, #8
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
 8004cbc:	460b      	mov	r3, r1
 8004cbe:	807b      	strh	r3, [r7, #2]
	if ( !MQTT_receiveGetTopicandPayloadLength(MQTTbuff, buffsize) ) return 0;
 8004cc0:	887b      	ldrh	r3, [r7, #2]
 8004cc2:	4619      	mov	r1, r3
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	f7ff ff6d 	bl	8004ba4 <MQTT_receiveGetTopicandPayloadLength>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d101      	bne.n	8004cd4 <MQTT_receive+0x20>
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	e023      	b.n	8004d1c <MQTT_receive+0x68>

	memset( mySIM.mqttReceive.payload, 0, MAX_PAYLOAD_LEN );
 8004cd4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004cd8:	2100      	movs	r1, #0
 8004cda:	4812      	ldr	r0, [pc, #72]	; (8004d24 <MQTT_receive+0x70>)
 8004cdc:	f007 fada 	bl	800c294 <memset>
	memset( mySIM.mqttReceive.topic, 0, MAX_TOPIC_LEN );
 8004ce0:	2228      	movs	r2, #40	; 0x28
 8004ce2:	2100      	movs	r1, #0
 8004ce4:	4810      	ldr	r0, [pc, #64]	; (8004d28 <MQTT_receive+0x74>)
 8004ce6:	f007 fad5 	bl	800c294 <memset>

	if (! MQTT_receiveGetTopic(MQTTbuff, buffsize))		return 0;
 8004cea:	887b      	ldrh	r3, [r7, #2]
 8004cec:	4619      	mov	r1, r3
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f7ff ffac 	bl	8004c4c <MQTT_receiveGetTopic>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d101      	bne.n	8004cfe <MQTT_receive+0x4a>
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	e00e      	b.n	8004d1c <MQTT_receive+0x68>

	if (! MQTT_receiveGetPayload(MQTTbuff, buffsize))	return 0;
 8004cfe:	887b      	ldrh	r3, [r7, #2]
 8004d00:	4619      	mov	r1, r3
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f7ff ffbc 	bl	8004c80 <MQTT_receiveGetPayload>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d101      	bne.n	8004d12 <MQTT_receive+0x5e>
 8004d0e:	2300      	movs	r3, #0
 8004d10:	e004      	b.n	8004d1c <MQTT_receive+0x68>

	mySIM.mqttReceive.newEvent = 1;
 8004d12:	4b06      	ldr	r3, [pc, #24]	; (8004d2c <MQTT_receive+0x78>)
 8004d14:	2201      	movs	r2, #1
 8004d16:	f883 2020 	strb.w	r2, [r3, #32]
	return 1;
 8004d1a:	2301      	movs	r3, #1
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	3708      	adds	r7, #8
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bd80      	pop	{r7, pc}
 8004d24:	20001794 	.word	0x20001794
 8004d28:	20001896 	.word	0x20001896
 8004d2c:	20001768 	.word	0x20001768

08004d30 <MQTT_connected>:

uint8_t MQTT_connected(void)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b082      	sub	sp, #8
 8004d34:	af02      	add	r7, sp, #8
	if ( SIM_sendCMD((uint8_t*)"AT+CMQTTDISC?", (uint8_t*)"+CMQTTDISC: 0,0", ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, 1000) == SIM_RES_MSG )
 8004d36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004d3a:	9300      	str	r3, [sp, #0]
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	2201      	movs	r2, #1
 8004d40:	4907      	ldr	r1, [pc, #28]	; (8004d60 <MQTT_connected+0x30>)
 8004d42:	4808      	ldr	r0, [pc, #32]	; (8004d64 <MQTT_connected+0x34>)
 8004d44:	f7fd fd7a 	bl	800283c <SIM_sendCMD>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	2b01      	cmp	r3, #1
 8004d4c:	d101      	bne.n	8004d52 <MQTT_connected+0x22>
	{
//		mySIM.mqttServer.connect = 1;
//		Serial_log_string("MQTT is connected to broker\r\n");
		return 1;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	e003      	b.n	8004d5a <MQTT_connected+0x2a>
	}
//	Serial_log_string("MQTT is disconnected to broker\r\n");
	mySIM.mqttServer.connect = 0;
 8004d52:	4b05      	ldr	r3, [pc, #20]	; (8004d68 <MQTT_connected+0x38>)
 8004d54:	2200      	movs	r2, #0
 8004d56:	739a      	strb	r2, [r3, #14]
	return 0;
 8004d58:	2300      	movs	r3, #0
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}
 8004d60:	0800f0a4 	.word	0x0800f0a4
 8004d64:	0800f0b4 	.word	0x0800f0b4
 8004d68:	20001768 	.word	0x20001768

08004d6c <startMQTT>:
//    // Check network availability
//    // Implement your network check logic here
//    return 1; // Replace with your logic
//}
//
uint8_t startMQTT(void) {
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b084      	sub	sp, #16
 8004d70:	af02      	add	r7, sp, #8
    // Implement starting MQTT logic
	// Return 1 on success, 0 on failure

	uint8_t check = SIM_sendCMD((uint8_t*)"AT+CMQTTSTART", (uint8_t*)"+CMQTTSTART: 0", ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, MQTT_TIMEOUT_SHORT);
 8004d72:	f44f 7348 	mov.w	r3, #800	; 0x320
 8004d76:	9300      	str	r3, [sp, #0]
 8004d78:	2301      	movs	r3, #1
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	490a      	ldr	r1, [pc, #40]	; (8004da8 <startMQTT+0x3c>)
 8004d7e:	480b      	ldr	r0, [pc, #44]	; (8004dac <startMQTT+0x40>)
 8004d80:	f7fd fd5c 	bl	800283c <SIM_sendCMD>
 8004d84:	4603      	mov	r3, r0
 8004d86:	71fb      	strb	r3, [r7, #7]
	if ( check == SIM_RES_MSG )	{
 8004d88:	79fb      	ldrb	r3, [r7, #7]
 8004d8a:	2b01      	cmp	r3, #1
 8004d8c:	d101      	bne.n	8004d92 <startMQTT+0x26>
//		Serial_log_string("start MQTT success\r\n");
		return 1;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	e005      	b.n	8004d9e <startMQTT+0x32>
	}

//	check = SIM_sendCMD((uint8_t*)"AT+CMQTTSTART", (uint8_t*)"ERROR", ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, 2000);
	else if ( check == SIM_ERROR )	{
 8004d92:	79fb      	ldrb	r3, [r7, #7]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d101      	bne.n	8004d9c <startMQTT+0x30>
//		Serial_log_string("start MQTT success\r\n");
		return 1;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	e000      	b.n	8004d9e <startMQTT+0x32>
	}
//	Serial_log_number(check);
//	Serial_log_string("\r\nstart MQTT fail\r\n");
	return 0;
 8004d9c:	2300      	movs	r3, #0
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	3708      	adds	r7, #8
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}
 8004da6:	bf00      	nop
 8004da8:	0800f0c4 	.word	0x0800f0c4
 8004dac:	0800f0d4 	.word	0x0800f0d4

08004db0 <acquireMQTTclient>:

uint8_t acquireMQTTclient (uint8_t *clientID){
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b084      	sub	sp, #16
 8004db4:	af02      	add	r7, sp, #8
 8004db6:	6078      	str	r0, [r7, #4]
	sprintf((char*)MQTT_Txbuff,"AT+CMQTTACCQ=0,\"%s\"", clientID);
 8004db8:	687a      	ldr	r2, [r7, #4]
 8004dba:	490b      	ldr	r1, [pc, #44]	; (8004de8 <acquireMQTTclient+0x38>)
 8004dbc:	480b      	ldr	r0, [pc, #44]	; (8004dec <acquireMQTTclient+0x3c>)
 8004dbe:	f007 fdcf 	bl	800c960 <siprintf>
	if (SIM_sendCMD(MQTT_Txbuff, (uint8_t*)"OK", ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, MQTT_TIMEOUT_MEDIUM)== SIM_RES_MSG)	{
 8004dc2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8004dc6:	9300      	str	r3, [sp, #0]
 8004dc8:	2301      	movs	r3, #1
 8004dca:	2201      	movs	r2, #1
 8004dcc:	4908      	ldr	r1, [pc, #32]	; (8004df0 <acquireMQTTclient+0x40>)
 8004dce:	4807      	ldr	r0, [pc, #28]	; (8004dec <acquireMQTTclient+0x3c>)
 8004dd0:	f7fd fd34 	bl	800283c <SIM_sendCMD>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	2b01      	cmp	r3, #1
 8004dd8:	d101      	bne.n	8004dde <acquireMQTTclient+0x2e>
//		Serial_log_string("acquire MQTT client success\r\n");
		return 1;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	e000      	b.n	8004de0 <acquireMQTTclient+0x30>
	}
//	Serial_log_string("acquire MQTT client fail\r\n");
    return 0;
 8004dde:	2300      	movs	r3, #0
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	3708      	adds	r7, #8
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}
 8004de8:	0800f0e4 	.word	0x0800f0e4
 8004dec:	200014e4 	.word	0x200014e4
 8004df0:	0800f0f8 	.word	0x0800f0f8

08004df4 <releaseMQTTclient>:
//	}
////	Serial_log_string("acquire MQTT client fail\r\n");
//    return 0;
//}
uint8_t releaseMQTTclient (void)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b082      	sub	sp, #8
 8004df8:	af02      	add	r7, sp, #8
	if (SIM_sendCMD((uint8_t*)"AT+CMQTTREL=0", (uint8_t*)"OK", ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, MQTT_TIMEOUT_SHORT) == SIM_RES_MSG) {
 8004dfa:	f44f 7348 	mov.w	r3, #800	; 0x320
 8004dfe:	9300      	str	r3, [sp, #0]
 8004e00:	2301      	movs	r3, #1
 8004e02:	2201      	movs	r2, #1
 8004e04:	4906      	ldr	r1, [pc, #24]	; (8004e20 <releaseMQTTclient+0x2c>)
 8004e06:	4807      	ldr	r0, [pc, #28]	; (8004e24 <releaseMQTTclient+0x30>)
 8004e08:	f7fd fd18 	bl	800283c <SIM_sendCMD>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	2b01      	cmp	r3, #1
 8004e10:	d101      	bne.n	8004e16 <releaseMQTTclient+0x22>
//		Serial_log_string("release MQTT client success\r\n");
		return 1;
 8004e12:	2301      	movs	r3, #1
 8004e14:	e000      	b.n	8004e18 <releaseMQTTclient+0x24>
	}
//	Serial_log_string("release MQTT client fail\r\n");
	return 0;
 8004e16:	2300      	movs	r3, #0
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}
 8004e1e:	bf00      	nop
 8004e20:	0800f0f8 	.word	0x0800f0f8
 8004e24:	0800f0fc 	.word	0x0800f0fc

08004e28 <configureMQTT>:
uint8_t configureMQTT() {
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b084      	sub	sp, #16
 8004e2c:	af02      	add	r7, sp, #8
    // Implement MQTT configuration logic
    // Return 1 on success, 0 on failure
	uint8_t wtplen = strlen(mySIM.mqttServer.willtopic);
 8004e2e:	4b3b      	ldr	r3, [pc, #236]	; (8004f1c <configureMQTT+0xf4>)
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	4618      	mov	r0, r3
 8004e34:	f7fb f994 	bl	8000160 <strlen>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	71fb      	strb	r3, [r7, #7]
	sprintf((char*)MQTT_Txbuff,"AT+CMQTTWILLTOPIC=0,%d",wtplen);
 8004e3c:	79fb      	ldrb	r3, [r7, #7]
 8004e3e:	461a      	mov	r2, r3
 8004e40:	4937      	ldr	r1, [pc, #220]	; (8004f20 <configureMQTT+0xf8>)
 8004e42:	4838      	ldr	r0, [pc, #224]	; (8004f24 <configureMQTT+0xfc>)
 8004e44:	f007 fd8c 	bl	800c960 <siprintf>
	if (SIM_sendCMD(MQTT_Txbuff, (uint8_t*)">", ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, MQTT_TIMEOUT_SHORT) != SIM_RES_MSG)	return 0;
 8004e48:	f44f 7348 	mov.w	r3, #800	; 0x320
 8004e4c:	9300      	str	r3, [sp, #0]
 8004e4e:	2301      	movs	r3, #1
 8004e50:	2201      	movs	r2, #1
 8004e52:	4935      	ldr	r1, [pc, #212]	; (8004f28 <configureMQTT+0x100>)
 8004e54:	4833      	ldr	r0, [pc, #204]	; (8004f24 <configureMQTT+0xfc>)
 8004e56:	f7fd fcf1 	bl	800283c <SIM_sendCMD>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	d001      	beq.n	8004e64 <configureMQTT+0x3c>
 8004e60:	2300      	movs	r3, #0
 8004e62:	e057      	b.n	8004f14 <configureMQTT+0xec>

	sprintf((char*)MQTT_Txbuff,"%s",mySIM.mqttServer.willtopic);
 8004e64:	4b2d      	ldr	r3, [pc, #180]	; (8004f1c <configureMQTT+0xf4>)
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	461a      	mov	r2, r3
 8004e6a:	4930      	ldr	r1, [pc, #192]	; (8004f2c <configureMQTT+0x104>)
 8004e6c:	482d      	ldr	r0, [pc, #180]	; (8004f24 <configureMQTT+0xfc>)
 8004e6e:	f007 fd77 	bl	800c960 <siprintf>
	if (SIM_sendCMD(MQTT_Txbuff, (uint8_t*)"OK", ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, MQTT_TIMEOUT_SHORT) != SIM_RES_MSG)	return 0;
 8004e72:	f44f 7348 	mov.w	r3, #800	; 0x320
 8004e76:	9300      	str	r3, [sp, #0]
 8004e78:	2301      	movs	r3, #1
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	492c      	ldr	r1, [pc, #176]	; (8004f30 <configureMQTT+0x108>)
 8004e7e:	4829      	ldr	r0, [pc, #164]	; (8004f24 <configureMQTT+0xfc>)
 8004e80:	f7fd fcdc 	bl	800283c <SIM_sendCMD>
 8004e84:	4603      	mov	r3, r0
 8004e86:	2b01      	cmp	r3, #1
 8004e88:	d001      	beq.n	8004e8e <configureMQTT+0x66>
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	e042      	b.n	8004f14 <configureMQTT+0xec>

	uint8_t wmsglen = strlen((char*)mySIM.mqttServer.willmsg);
 8004e8e:	4b23      	ldr	r3, [pc, #140]	; (8004f1c <configureMQTT+0xf4>)
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	4618      	mov	r0, r3
 8004e94:	f7fb f964 	bl	8000160 <strlen>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	71bb      	strb	r3, [r7, #6]
	sprintf((char*)MQTT_Txbuff,"AT+CMQTTWILLMSG=0,%d,1",wmsglen);
 8004e9c:	79bb      	ldrb	r3, [r7, #6]
 8004e9e:	461a      	mov	r2, r3
 8004ea0:	4924      	ldr	r1, [pc, #144]	; (8004f34 <configureMQTT+0x10c>)
 8004ea2:	4820      	ldr	r0, [pc, #128]	; (8004f24 <configureMQTT+0xfc>)
 8004ea4:	f007 fd5c 	bl	800c960 <siprintf>
	if (SIM_sendCMD(MQTT_Txbuff, (uint8_t*)">", ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, MQTT_TIMEOUT_SHORT)!= SIM_RES_MSG)	return 0;
 8004ea8:	f44f 7348 	mov.w	r3, #800	; 0x320
 8004eac:	9300      	str	r3, [sp, #0]
 8004eae:	2301      	movs	r3, #1
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	491d      	ldr	r1, [pc, #116]	; (8004f28 <configureMQTT+0x100>)
 8004eb4:	481b      	ldr	r0, [pc, #108]	; (8004f24 <configureMQTT+0xfc>)
 8004eb6:	f7fd fcc1 	bl	800283c <SIM_sendCMD>
 8004eba:	4603      	mov	r3, r0
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d001      	beq.n	8004ec4 <configureMQTT+0x9c>
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	e027      	b.n	8004f14 <configureMQTT+0xec>

	sprintf((char*)MQTT_Txbuff,"%s",mySIM.mqttServer.willmsg);
 8004ec4:	4b15      	ldr	r3, [pc, #84]	; (8004f1c <configureMQTT+0xf4>)
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	461a      	mov	r2, r3
 8004eca:	4918      	ldr	r1, [pc, #96]	; (8004f2c <configureMQTT+0x104>)
 8004ecc:	4815      	ldr	r0, [pc, #84]	; (8004f24 <configureMQTT+0xfc>)
 8004ece:	f007 fd47 	bl	800c960 <siprintf>
	if (SIM_sendCMD(MQTT_Txbuff, (uint8_t*)"OK", ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, MQTT_TIMEOUT_SHORT)!= SIM_RES_MSG)	return 0;
 8004ed2:	f44f 7348 	mov.w	r3, #800	; 0x320
 8004ed6:	9300      	str	r3, [sp, #0]
 8004ed8:	2301      	movs	r3, #1
 8004eda:	2201      	movs	r2, #1
 8004edc:	4914      	ldr	r1, [pc, #80]	; (8004f30 <configureMQTT+0x108>)
 8004ede:	4811      	ldr	r0, [pc, #68]	; (8004f24 <configureMQTT+0xfc>)
 8004ee0:	f7fd fcac 	bl	800283c <SIM_sendCMD>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	2b01      	cmp	r3, #1
 8004ee8:	d001      	beq.n	8004eee <configureMQTT+0xc6>
 8004eea:	2300      	movs	r3, #0
 8004eec:	e012      	b.n	8004f14 <configureMQTT+0xec>

//	if (! SIM_sendCMD((uint8_t*)"AT+CMQTTCFG?", (uint8_t*)"+CMQTTCFG: 0,0", ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, MQTT_TIMEOUT_SHORT))	{

		sprintf((char*)MQTT_Txbuff,"AT+CMQTTCFG=\"checkUTF8\",0,0");
 8004eee:	4912      	ldr	r1, [pc, #72]	; (8004f38 <configureMQTT+0x110>)
 8004ef0:	480c      	ldr	r0, [pc, #48]	; (8004f24 <configureMQTT+0xfc>)
 8004ef2:	f007 fd35 	bl	800c960 <siprintf>
		if (! SIM_sendCMD(MQTT_Txbuff, (uint8_t*)"OK", ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, MQTT_TIMEOUT_SHORT))	return 0;
 8004ef6:	f44f 7348 	mov.w	r3, #800	; 0x320
 8004efa:	9300      	str	r3, [sp, #0]
 8004efc:	2301      	movs	r3, #1
 8004efe:	2201      	movs	r2, #1
 8004f00:	490b      	ldr	r1, [pc, #44]	; (8004f30 <configureMQTT+0x108>)
 8004f02:	4808      	ldr	r0, [pc, #32]	; (8004f24 <configureMQTT+0xfc>)
 8004f04:	f7fd fc9a 	bl	800283c <SIM_sendCMD>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d101      	bne.n	8004f12 <configureMQTT+0xea>
 8004f0e:	2300      	movs	r3, #0
 8004f10:	e000      	b.n	8004f14 <configureMQTT+0xec>
//	}



//	Serial_log_string("config MQTT success\r\n");
    return 1;
 8004f12:	2301      	movs	r3, #1
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	3708      	adds	r7, #8
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd80      	pop	{r7, pc}
 8004f1c:	20001768 	.word	0x20001768
 8004f20:	0800f10c 	.word	0x0800f10c
 8004f24:	200014e4 	.word	0x200014e4
 8004f28:	0800f124 	.word	0x0800f124
 8004f2c:	0800f128 	.word	0x0800f128
 8004f30:	0800f0f8 	.word	0x0800f0f8
 8004f34:	0800f12c 	.word	0x0800f12c
 8004f38:	0800f144 	.word	0x0800f144

08004f3c <sendConnectMessage>:

uint8_t sendConnectMessage() {
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b082      	sub	sp, #8
 8004f40:	af02      	add	r7, sp, #8
    // Implement sending the CONNECT message
    // Return 1 on success, 0 on failure
	sprintf((char*)MQTT_Txbuff,"AT+CMQTTCONNECT=0,\"%s:%d\",%d,1",mySIM.mqttServer.host,mySIM.mqttServer.port,mySIM.mqttClient.keepAliveInterval);
 8004f42:	4b0f      	ldr	r3, [pc, #60]	; (8004f80 <sendConnectMessage+0x44>)
 8004f44:	681a      	ldr	r2, [r3, #0]
 8004f46:	4b0e      	ldr	r3, [pc, #56]	; (8004f80 <sendConnectMessage+0x44>)
 8004f48:	899b      	ldrh	r3, [r3, #12]
 8004f4a:	4619      	mov	r1, r3
 8004f4c:	4b0c      	ldr	r3, [pc, #48]	; (8004f80 <sendConnectMessage+0x44>)
 8004f4e:	8b9b      	ldrh	r3, [r3, #28]
 8004f50:	9300      	str	r3, [sp, #0]
 8004f52:	460b      	mov	r3, r1
 8004f54:	490b      	ldr	r1, [pc, #44]	; (8004f84 <sendConnectMessage+0x48>)
 8004f56:	480c      	ldr	r0, [pc, #48]	; (8004f88 <sendConnectMessage+0x4c>)
 8004f58:	f007 fd02 	bl	800c960 <siprintf>
	if (SIM_sendCMD(MQTT_Txbuff, (uint8_t*)"+CMQTTCONNECT: 0,0", ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, MQTT_TIMEOUT_LONG) == SIM_RES_MSG)
 8004f5c:	f241 3388 	movw	r3, #5000	; 0x1388
 8004f60:	9300      	str	r3, [sp, #0]
 8004f62:	2301      	movs	r3, #1
 8004f64:	2201      	movs	r2, #1
 8004f66:	4909      	ldr	r1, [pc, #36]	; (8004f8c <sendConnectMessage+0x50>)
 8004f68:	4807      	ldr	r0, [pc, #28]	; (8004f88 <sendConnectMessage+0x4c>)
 8004f6a:	f7fd fc67 	bl	800283c <SIM_sendCMD>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	d101      	bne.n	8004f78 <sendConnectMessage+0x3c>
	{
//		Serial_log_string("Connect to broker success\r\n");
		return 1;
 8004f74:	2301      	movs	r3, #1
 8004f76:	e000      	b.n	8004f7a <sendConnectMessage+0x3e>
	}
//	Serial_log_string("Connect to broker fail\r\n");
    return 0;
 8004f78:	2300      	movs	r3, #0
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bd80      	pop	{r7, pc}
 8004f80:	20001768 	.word	0x20001768
 8004f84:	0800f160 	.word	0x0800f160
 8004f88:	200014e4 	.word	0x200014e4
 8004f8c:	0800f180 	.word	0x0800f180

08004f90 <MQTT_checkNWavailable>:


uint8_t MQTT_checkNWavailable (void)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	af00      	add	r7, sp, #0
//	static uint8_t count = 0;
	if ( !SIM_checkCMD(SIM_CMD_SIMCARD_PIN) ) {
 8004f94:	2000      	movs	r0, #0
 8004f96:	f7fd fc8f 	bl	80028b8 <SIM_checkCMD>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d101      	bne.n	8004fa4 <MQTT_checkNWavailable+0x14>
//			SIM_sendCMD( (uint8_t*)"AT+CRESET", (uint8_t*)"OK", ENABLE_SIM_CHECKRES,
//						ENABLE_MARKASREAD, SIM_TIMEOUT_LONG);
////			Serial_log_string("Reset Module\r\n");
//			HAL_Delay(10000);
//		}
		return 1;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	e018      	b.n	8004fd6 <MQTT_checkNWavailable+0x46>
	}
//	count = 0;

	if ( !SIM_checkCMD(SIM_CMD_STA_CSQ) ) {
 8004fa4:	2001      	movs	r0, #1
 8004fa6:	f7fd fc87 	bl	80028b8 <SIM_checkCMD>
 8004faa:	4603      	mov	r3, r0
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d101      	bne.n	8004fb4 <MQTT_checkNWavailable+0x24>
		return 2;
 8004fb0:	2302      	movs	r3, #2
 8004fb2:	e010      	b.n	8004fd6 <MQTT_checkNWavailable+0x46>
	}

	if ( !SIM_checkCMD(SIM_CMD_NW_CREG) ) {
 8004fb4:	2002      	movs	r0, #2
 8004fb6:	f7fd fc7f 	bl	80028b8 <SIM_checkCMD>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d101      	bne.n	8004fc4 <MQTT_checkNWavailable+0x34>
		return 3;
 8004fc0:	2303      	movs	r3, #3
 8004fc2:	e008      	b.n	8004fd6 <MQTT_checkNWavailable+0x46>
	}

	if ( !SIM_checkCMD(SIM_CMD_NW_CPSI) ) {
 8004fc4:	2003      	movs	r0, #3
 8004fc6:	f7fd fc77 	bl	80028b8 <SIM_checkCMD>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d101      	bne.n	8004fd4 <MQTT_checkNWavailable+0x44>
		return 4;
 8004fd0:	2304      	movs	r3, #4
 8004fd2:	e000      	b.n	8004fd6 <MQTT_checkNWavailable+0x46>
	}
	return 0;
 8004fd4:	2300      	movs	r3, #0
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	bd80      	pop	{r7, pc}
	...

08004fdc <MQTT_connect>:
uint8_t MQTT_connect()
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b082      	sub	sp, #8
 8004fe0:	af02      	add	r7, sp, #8
	if ( SIM_sendCMD((uint8_t*)"AT+CMQTTCONNECT?", (uint8_t*)mySIM.mqttServer.host, ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, MQTT_TIMEOUT_MEDIUM) == SIM_RES_MSG )	{
 8004fe2:	4b2a      	ldr	r3, [pc, #168]	; (800508c <MQTT_connect+0xb0>)
 8004fe4:	6819      	ldr	r1, [r3, #0]
 8004fe6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8004fea:	9300      	str	r3, [sp, #0]
 8004fec:	2301      	movs	r3, #1
 8004fee:	2201      	movs	r2, #1
 8004ff0:	4827      	ldr	r0, [pc, #156]	; (8005090 <MQTT_connect+0xb4>)
 8004ff2:	f7fd fc23 	bl	800283c <SIM_sendCMD>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	d104      	bne.n	8005006 <MQTT_connect+0x2a>
		mySIM.mqttServer.connect = 1;
 8004ffc:	4b23      	ldr	r3, [pc, #140]	; (800508c <MQTT_connect+0xb0>)
 8004ffe:	2201      	movs	r2, #1
 8005000:	739a      	strb	r2, [r3, #14]
		return 1;
 8005002:	2301      	movs	r3, #1
 8005004:	e03e      	b.n	8005084 <MQTT_connect+0xa8>
	}
	if ( MQTT_checkNWavailable() )  return 0;
 8005006:	f7ff ffc3 	bl	8004f90 <MQTT_checkNWavailable>
 800500a:	4603      	mov	r3, r0
 800500c:	2b00      	cmp	r3, #0
 800500e:	d001      	beq.n	8005014 <MQTT_connect+0x38>
 8005010:	2300      	movs	r3, #0
 8005012:	e037      	b.n	8005084 <MQTT_connect+0xa8>

	if ( !startMQTT() )		return 0;
 8005014:	f7ff feaa 	bl	8004d6c <startMQTT>
 8005018:	4603      	mov	r3, r0
 800501a:	2b00      	cmp	r3, #0
 800501c:	d101      	bne.n	8005022 <MQTT_connect+0x46>
 800501e:	2300      	movs	r3, #0
 8005020:	e030      	b.n	8005084 <MQTT_connect+0xa8>

	if ( !acquireMQTTclient( (uint8_t*)mySIM.mqttClient.clientID) )
 8005022:	481c      	ldr	r0, [pc, #112]	; (8005094 <MQTT_connect+0xb8>)
 8005024:	f7ff fec4 	bl	8004db0 <acquireMQTTclient>
 8005028:	4603      	mov	r3, r0
 800502a:	2b00      	cmp	r3, #0
 800502c:	d114      	bne.n	8005058 <MQTT_connect+0x7c>
	{
		if (MQTT_connected())
 800502e:	f7ff fe7f 	bl	8004d30 <MQTT_connected>
 8005032:	4603      	mov	r3, r0
 8005034:	2b00      	cmp	r3, #0
 8005036:	d002      	beq.n	800503e <MQTT_connect+0x62>
		{
			MQTT_disconnect();
 8005038:	f000 f832 	bl	80050a0 <MQTT_disconnect>
 800503c:	e00a      	b.n	8005054 <MQTT_connect+0x78>
		}
		else
		{
			releaseMQTTclient();
 800503e:	f7ff fed9 	bl	8004df4 <releaseMQTTclient>
			SIM_sendCMD((uint8_t*)"AT+CMQTTSTOP", (uint8_t*)"+CMQTTSTOP: 0",
 8005042:	f44f 7348 	mov.w	r3, #800	; 0x320
 8005046:	9300      	str	r3, [sp, #0]
 8005048:	2301      	movs	r3, #1
 800504a:	2201      	movs	r2, #1
 800504c:	4912      	ldr	r1, [pc, #72]	; (8005098 <MQTT_connect+0xbc>)
 800504e:	4813      	ldr	r0, [pc, #76]	; (800509c <MQTT_connect+0xc0>)
 8005050:	f7fd fbf4 	bl	800283c <SIM_sendCMD>
						ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, MQTT_TIMEOUT_SHORT);
		}
		return 0;
 8005054:	2300      	movs	r3, #0
 8005056:	e015      	b.n	8005084 <MQTT_connect+0xa8>

	}
	if ( !(configureMQTT()) )		return 0;
 8005058:	f7ff fee6 	bl	8004e28 <configureMQTT>
 800505c:	4603      	mov	r3, r0
 800505e:	2b00      	cmp	r3, #0
 8005060:	d101      	bne.n	8005066 <MQTT_connect+0x8a>
 8005062:	2300      	movs	r3, #0
 8005064:	e00e      	b.n	8005084 <MQTT_connect+0xa8>

	if ( !sendConnectMessage() )	{
 8005066:	f7ff ff69 	bl	8004f3c <sendConnectMessage>
 800506a:	4603      	mov	r3, r0
 800506c:	2b00      	cmp	r3, #0
 800506e:	d105      	bne.n	800507c <MQTT_connect+0xa0>
		HAL_Delay(500);
 8005070:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005074:	f002 fe4a 	bl	8007d0c <HAL_Delay>
		return 0;
 8005078:	2300      	movs	r3, #0
 800507a:	e003      	b.n	8005084 <MQTT_connect+0xa8>
	}

	mySIM.mqttServer.connect = 1;
 800507c:	4b03      	ldr	r3, [pc, #12]	; (800508c <MQTT_connect+0xb0>)
 800507e:	2201      	movs	r2, #1
 8005080:	739a      	strb	r2, [r3, #14]
	return 1;
 8005082:	2301      	movs	r3, #1

}
 8005084:	4618      	mov	r0, r3
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}
 800508a:	bf00      	nop
 800508c:	20001768 	.word	0x20001768
 8005090:	0800f194 	.word	0x0800f194
 8005094:	20001778 	.word	0x20001778
 8005098:	0800f1a8 	.word	0x0800f1a8
 800509c:	0800f1b8 	.word	0x0800f1b8

080050a0 <MQTT_disconnect>:

uint8_t MQTT_disconnect ()
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b082      	sub	sp, #8
 80050a4:	af02      	add	r7, sp, #8
	if (SIM_sendCMD((uint8_t*)"AT+CMQTTDISC=0,120", (uint8_t*)"+CMQTTDISC: 0,0",
 80050a6:	f44f 7348 	mov.w	r3, #800	; 0x320
 80050aa:	9300      	str	r3, [sp, #0]
 80050ac:	2301      	movs	r3, #1
 80050ae:	2201      	movs	r2, #1
 80050b0:	4912      	ldr	r1, [pc, #72]	; (80050fc <MQTT_disconnect+0x5c>)
 80050b2:	4813      	ldr	r0, [pc, #76]	; (8005100 <MQTT_disconnect+0x60>)
 80050b4:	f7fd fbc2 	bl	800283c <SIM_sendCMD>
 80050b8:	4603      	mov	r3, r0
 80050ba:	2b01      	cmp	r3, #1
 80050bc:	d001      	beq.n	80050c2 <MQTT_disconnect+0x22>
			ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, MQTT_TIMEOUT_SHORT) != SIM_RES_MSG )		return 0;
 80050be:	2300      	movs	r3, #0
 80050c0:	e018      	b.n	80050f4 <MQTT_disconnect+0x54>

	if ( !releaseMQTTclient() )		return 0;
 80050c2:	f7ff fe97 	bl	8004df4 <releaseMQTTclient>
 80050c6:	4603      	mov	r3, r0
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d101      	bne.n	80050d0 <MQTT_disconnect+0x30>
 80050cc:	2300      	movs	r3, #0
 80050ce:	e011      	b.n	80050f4 <MQTT_disconnect+0x54>

	if (SIM_sendCMD((uint8_t*)"AT+CMQTTSTOP", (uint8_t*)"+CMQTTSTOP: 0",
 80050d0:	f44f 7348 	mov.w	r3, #800	; 0x320
 80050d4:	9300      	str	r3, [sp, #0]
 80050d6:	2301      	movs	r3, #1
 80050d8:	2201      	movs	r2, #1
 80050da:	490a      	ldr	r1, [pc, #40]	; (8005104 <MQTT_disconnect+0x64>)
 80050dc:	480a      	ldr	r0, [pc, #40]	; (8005108 <MQTT_disconnect+0x68>)
 80050de:	f7fd fbad 	bl	800283c <SIM_sendCMD>
 80050e2:	4603      	mov	r3, r0
 80050e4:	2b01      	cmp	r3, #1
 80050e6:	d001      	beq.n	80050ec <MQTT_disconnect+0x4c>
			ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, MQTT_TIMEOUT_SHORT) != SIM_RES_MSG )		return 0;
 80050e8:	2300      	movs	r3, #0
 80050ea:	e003      	b.n	80050f4 <MQTT_disconnect+0x54>

	mySIM.mqttServer.connect = 0;
 80050ec:	4b07      	ldr	r3, [pc, #28]	; (800510c <MQTT_disconnect+0x6c>)
 80050ee:	2200      	movs	r2, #0
 80050f0:	739a      	strb	r2, [r3, #14]
	return 1;
 80050f2:	2301      	movs	r3, #1
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}
 80050fa:	bf00      	nop
 80050fc:	0800f0a4 	.word	0x0800f0a4
 8005100:	0800f1c8 	.word	0x0800f1c8
 8005104:	0800f1a8 	.word	0x0800f1a8
 8005108:	0800f1b8 	.word	0x0800f1b8
 800510c:	20001768 	.word	0x20001768

08005110 <MQTT_publish>:
uint8_t MQTT_publish(uint8_t *topic, uint8_t *msg, uint16_t msglen)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b088      	sub	sp, #32
 8005114:	af02      	add	r7, sp, #8
 8005116:	60f8      	str	r0, [r7, #12]
 8005118:	60b9      	str	r1, [r7, #8]
 800511a:	4613      	mov	r3, r2
 800511c:	80fb      	strh	r3, [r7, #6]
	uint8_t check =0;
 800511e:	2300      	movs	r3, #0
 8005120:	75fb      	strb	r3, [r7, #23]
	uint8_t topiclen= (uint8_t) strlen((char*)topic);
 8005122:	68f8      	ldr	r0, [r7, #12]
 8005124:	f7fb f81c 	bl	8000160 <strlen>
 8005128:	4603      	mov	r3, r0
 800512a:	75bb      	strb	r3, [r7, #22]
	sprintf((char*)MQTT_Txbuff,"AT+CMQTTTOPIC=0,%d", topiclen);
 800512c:	7dbb      	ldrb	r3, [r7, #22]
 800512e:	461a      	mov	r2, r3
 8005130:	4931      	ldr	r1, [pc, #196]	; (80051f8 <MQTT_publish+0xe8>)
 8005132:	4832      	ldr	r0, [pc, #200]	; (80051fc <MQTT_publish+0xec>)
 8005134:	f007 fc14 	bl	800c960 <siprintf>

	if (SIM_sendCMD(MQTT_Txbuff, (uint8_t*)">", ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, MQTT_TIMEOUT_SHORT)!= SIM_RES_MSG)	return 0;
 8005138:	f44f 7348 	mov.w	r3, #800	; 0x320
 800513c:	9300      	str	r3, [sp, #0]
 800513e:	2301      	movs	r3, #1
 8005140:	2201      	movs	r2, #1
 8005142:	492f      	ldr	r1, [pc, #188]	; (8005200 <MQTT_publish+0xf0>)
 8005144:	482d      	ldr	r0, [pc, #180]	; (80051fc <MQTT_publish+0xec>)
 8005146:	f7fd fb79 	bl	800283c <SIM_sendCMD>
 800514a:	4603      	mov	r3, r0
 800514c:	2b01      	cmp	r3, #1
 800514e:	d001      	beq.n	8005154 <MQTT_publish+0x44>
 8005150:	2300      	movs	r3, #0
 8005152:	e04d      	b.n	80051f0 <MQTT_publish+0xe0>

	HAL_UART_Transmit(&huart1, topic , topiclen, 0xFFFF);
 8005154:	7dbb      	ldrb	r3, [r7, #22]
 8005156:	b29a      	uxth	r2, r3
 8005158:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800515c:	68f9      	ldr	r1, [r7, #12]
 800515e:	4829      	ldr	r0, [pc, #164]	; (8005204 <MQTT_publish+0xf4>)
 8005160:	f005 ff40 	bl	800afe4 <HAL_UART_Transmit>
	check = SIM_checkMsg((uint8_t*)"OK", MQTT_TIMEOUT_VERYSHORT);
 8005164:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8005168:	4827      	ldr	r0, [pc, #156]	; (8005208 <MQTT_publish+0xf8>)
 800516a:	f7fd faaf 	bl	80026cc <SIM_checkMsg>
 800516e:	4603      	mov	r3, r0
 8005170:	75fb      	strb	r3, [r7, #23]
	MarkAsReadData_SIM();
 8005172:	f7fd fc13 	bl	800299c <MarkAsReadData_SIM>
	if (check != SIM_RES_MSG)	return 0;
 8005176:	7dfb      	ldrb	r3, [r7, #23]
 8005178:	2b01      	cmp	r3, #1
 800517a:	d001      	beq.n	8005180 <MQTT_publish+0x70>
 800517c:	2300      	movs	r3, #0
 800517e:	e037      	b.n	80051f0 <MQTT_publish+0xe0>
//	if (SIM_sendCMD(topic, (uint8_t*)"OK", ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, 2000) != SIM_RES_MSG)		return 0;

	sprintf((char*)MQTT_Txbuff,"AT+CMQTTPAYLOAD=0,%d",msglen);
 8005180:	88fb      	ldrh	r3, [r7, #6]
 8005182:	461a      	mov	r2, r3
 8005184:	4921      	ldr	r1, [pc, #132]	; (800520c <MQTT_publish+0xfc>)
 8005186:	481d      	ldr	r0, [pc, #116]	; (80051fc <MQTT_publish+0xec>)
 8005188:	f007 fbea 	bl	800c960 <siprintf>

	if (SIM_sendCMD(MQTT_Txbuff, (uint8_t*)">", ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, MQTT_TIMEOUT_SHORT)!= SIM_RES_MSG)	return 0;
 800518c:	f44f 7348 	mov.w	r3, #800	; 0x320
 8005190:	9300      	str	r3, [sp, #0]
 8005192:	2301      	movs	r3, #1
 8005194:	2201      	movs	r2, #1
 8005196:	491a      	ldr	r1, [pc, #104]	; (8005200 <MQTT_publish+0xf0>)
 8005198:	4818      	ldr	r0, [pc, #96]	; (80051fc <MQTT_publish+0xec>)
 800519a:	f7fd fb4f 	bl	800283c <SIM_sendCMD>
 800519e:	4603      	mov	r3, r0
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	d001      	beq.n	80051a8 <MQTT_publish+0x98>
 80051a4:	2300      	movs	r3, #0
 80051a6:	e023      	b.n	80051f0 <MQTT_publish+0xe0>

	HAL_UART_Transmit(&huart1, msg, msglen, 0xFFFF);
 80051a8:	88fa      	ldrh	r2, [r7, #6]
 80051aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80051ae:	68b9      	ldr	r1, [r7, #8]
 80051b0:	4814      	ldr	r0, [pc, #80]	; (8005204 <MQTT_publish+0xf4>)
 80051b2:	f005 ff17 	bl	800afe4 <HAL_UART_Transmit>
	check = SIM_checkMsg((uint8_t*)"OK", MQTT_TIMEOUT_VERYSHORT);
 80051b6:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80051ba:	4813      	ldr	r0, [pc, #76]	; (8005208 <MQTT_publish+0xf8>)
 80051bc:	f7fd fa86 	bl	80026cc <SIM_checkMsg>
 80051c0:	4603      	mov	r3, r0
 80051c2:	75fb      	strb	r3, [r7, #23]
	MarkAsReadData_SIM();
 80051c4:	f7fd fbea 	bl	800299c <MarkAsReadData_SIM>
	if (check != SIM_RES_MSG)	return 0;
 80051c8:	7dfb      	ldrb	r3, [r7, #23]
 80051ca:	2b01      	cmp	r3, #1
 80051cc:	d001      	beq.n	80051d2 <MQTT_publish+0xc2>
 80051ce:	2300      	movs	r3, #0
 80051d0:	e00e      	b.n	80051f0 <MQTT_publish+0xe0>

	if (SIM_sendCMD((uint8_t*)"AT+CMQTTPUB=0,1,60", (uint8_t*)"+CMQTTPUB: 0,0",
 80051d2:	f44f 7348 	mov.w	r3, #800	; 0x320
 80051d6:	9300      	str	r3, [sp, #0]
 80051d8:	2301      	movs	r3, #1
 80051da:	2201      	movs	r2, #1
 80051dc:	490c      	ldr	r1, [pc, #48]	; (8005210 <MQTT_publish+0x100>)
 80051de:	480d      	ldr	r0, [pc, #52]	; (8005214 <MQTT_publish+0x104>)
 80051e0:	f7fd fb2c 	bl	800283c <SIM_sendCMD>
 80051e4:	4603      	mov	r3, r0
 80051e6:	2b01      	cmp	r3, #1
 80051e8:	d001      	beq.n	80051ee <MQTT_publish+0xde>
			ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, MQTT_TIMEOUT_SHORT)!= SIM_RES_MSG)	return 0;
 80051ea:	2300      	movs	r3, #0
 80051ec:	e000      	b.n	80051f0 <MQTT_publish+0xe0>

	return 1;
 80051ee:	2301      	movs	r3, #1
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	3718      	adds	r7, #24
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}
 80051f8:	0800f1dc 	.word	0x0800f1dc
 80051fc:	200014e4 	.word	0x200014e4
 8005200:	0800f124 	.word	0x0800f124
 8005204:	20002a50 	.word	0x20002a50
 8005208:	0800f0f8 	.word	0x0800f0f8
 800520c:	0800f1f0 	.word	0x0800f1f0
 8005210:	0800f208 	.word	0x0800f208
 8005214:	0800f218 	.word	0x0800f218

08005218 <MQTT_subcribe>:
uint8_t MQTT_subcribe (uint8_t *topic)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b08c      	sub	sp, #48	; 0x30
 800521c:	af02      	add	r7, sp, #8
 800521e:	6078      	str	r0, [r7, #4]
	uint8_t topicbuff[30];
	uint8_t topiclen;
	if (strcmp((char*)topic, (char*)TOPIC_SUB) == 0)	{
 8005220:	492a      	ldr	r1, [pc, #168]	; (80052cc <MQTT_subcribe+0xb4>)
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f7fa ff92 	bl	800014c <strcmp>
 8005228:	4603      	mov	r3, r0
 800522a:	2b00      	cmp	r3, #0
 800522c:	d10b      	bne.n	8005246 <MQTT_subcribe+0x2e>
		topiclen = sprintf((char*)topicbuff, "%s%d",topic,myStation.stID);
 800522e:	4b28      	ldr	r3, [pc, #160]	; (80052d0 <MQTT_subcribe+0xb8>)
 8005230:	785b      	ldrb	r3, [r3, #1]
 8005232:	f107 0008 	add.w	r0, r7, #8
 8005236:	687a      	ldr	r2, [r7, #4]
 8005238:	4926      	ldr	r1, [pc, #152]	; (80052d4 <MQTT_subcribe+0xbc>)
 800523a:	f007 fb91 	bl	800c960 <siprintf>
 800523e:	4603      	mov	r3, r0
 8005240:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005244:	e00b      	b.n	800525e <MQTT_subcribe+0x46>
	}
	else {
		strcpy((char*)topicbuff,(char*)topic);
 8005246:	f107 0308 	add.w	r3, r7, #8
 800524a:	6879      	ldr	r1, [r7, #4]
 800524c:	4618      	mov	r0, r3
 800524e:	f007 fba7 	bl	800c9a0 <strcpy>
		topiclen = strlen((char*)topic);
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f7fa ff84 	bl	8000160 <strlen>
 8005258:	4603      	mov	r3, r0
 800525a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	sprintf((char*)MQTT_Txbuff,"AT+CMQTTSUBTOPIC=0,%d,1",topiclen);
 800525e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005262:	461a      	mov	r2, r3
 8005264:	491c      	ldr	r1, [pc, #112]	; (80052d8 <MQTT_subcribe+0xc0>)
 8005266:	481d      	ldr	r0, [pc, #116]	; (80052dc <MQTT_subcribe+0xc4>)
 8005268:	f007 fb7a 	bl	800c960 <siprintf>
	if (SIM_sendCMD(MQTT_Txbuff, (uint8_t*)">", ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, MQTT_TIMEOUT_SHORT)!= SIM_RES_MSG)	return 0;
 800526c:	f44f 7348 	mov.w	r3, #800	; 0x320
 8005270:	9300      	str	r3, [sp, #0]
 8005272:	2301      	movs	r3, #1
 8005274:	2201      	movs	r2, #1
 8005276:	491a      	ldr	r1, [pc, #104]	; (80052e0 <MQTT_subcribe+0xc8>)
 8005278:	4818      	ldr	r0, [pc, #96]	; (80052dc <MQTT_subcribe+0xc4>)
 800527a:	f7fd fadf 	bl	800283c <SIM_sendCMD>
 800527e:	4603      	mov	r3, r0
 8005280:	2b01      	cmp	r3, #1
 8005282:	d001      	beq.n	8005288 <MQTT_subcribe+0x70>
 8005284:	2300      	movs	r3, #0
 8005286:	e01d      	b.n	80052c4 <MQTT_subcribe+0xac>

	if (SIM_sendCMD(topicbuff, (uint8_t*)"OK", ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, MQTT_TIMEOUT_VERYSHORT) != SIM_RES_MSG)		return 0;
 8005288:	f107 0008 	add.w	r0, r7, #8
 800528c:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8005290:	9300      	str	r3, [sp, #0]
 8005292:	2301      	movs	r3, #1
 8005294:	2201      	movs	r2, #1
 8005296:	4913      	ldr	r1, [pc, #76]	; (80052e4 <MQTT_subcribe+0xcc>)
 8005298:	f7fd fad0 	bl	800283c <SIM_sendCMD>
 800529c:	4603      	mov	r3, r0
 800529e:	2b01      	cmp	r3, #1
 80052a0:	d001      	beq.n	80052a6 <MQTT_subcribe+0x8e>
 80052a2:	2300      	movs	r3, #0
 80052a4:	e00e      	b.n	80052c4 <MQTT_subcribe+0xac>

	if (SIM_sendCMD((uint8_t*)"AT+CMQTTSUB=0", (uint8_t*)"+CMQTTSUB: 0,0", ENABLE_SIM_CHECKRES,ENABLE_MARKASREAD, MQTT_TIMEOUT_SHORT)!= SIM_RES_MSG) 	return 0;
 80052a6:	f44f 7348 	mov.w	r3, #800	; 0x320
 80052aa:	9300      	str	r3, [sp, #0]
 80052ac:	2301      	movs	r3, #1
 80052ae:	2201      	movs	r2, #1
 80052b0:	490d      	ldr	r1, [pc, #52]	; (80052e8 <MQTT_subcribe+0xd0>)
 80052b2:	480e      	ldr	r0, [pc, #56]	; (80052ec <MQTT_subcribe+0xd4>)
 80052b4:	f7fd fac2 	bl	800283c <SIM_sendCMD>
 80052b8:	4603      	mov	r3, r0
 80052ba:	2b01      	cmp	r3, #1
 80052bc:	d001      	beq.n	80052c2 <MQTT_subcribe+0xaa>
 80052be:	2300      	movs	r3, #0
 80052c0:	e000      	b.n	80052c4 <MQTT_subcribe+0xac>

	return 1;
 80052c2:	2301      	movs	r3, #1
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	3728      	adds	r7, #40	; 0x28
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd80      	pop	{r7, pc}
 80052cc:	0800f22c 	.word	0x0800f22c
 80052d0:	20000474 	.word	0x20000474
 80052d4:	0800f240 	.word	0x0800f240
 80052d8:	0800f248 	.word	0x0800f248
 80052dc:	200014e4 	.word	0x200014e4
 80052e0:	0800f124 	.word	0x0800f124
 80052e4:	0800f0f8 	.word	0x0800f0f8
 80052e8:	0800f260 	.word	0x0800f260
 80052ec:	0800f270 	.word	0x0800f270

080052f0 <checkSubcribe>:

uint8_t checkSubcribe(uint8_t *topic)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b084      	sub	sp, #16
 80052f4:	af02      	add	r7, sp, #8
 80052f6:	6078      	str	r0, [r7, #4]
	if (SIM_sendCMD((uint8_t*)"AT+CMQTTSUB?", topic,
 80052f8:	f44f 7348 	mov.w	r3, #800	; 0x320
 80052fc:	9300      	str	r3, [sp, #0]
 80052fe:	2301      	movs	r3, #1
 8005300:	2201      	movs	r2, #1
 8005302:	6879      	ldr	r1, [r7, #4]
 8005304:	4806      	ldr	r0, [pc, #24]	; (8005320 <checkSubcribe+0x30>)
 8005306:	f7fd fa99 	bl	800283c <SIM_sendCMD>
 800530a:	4603      	mov	r3, r0
 800530c:	2b01      	cmp	r3, #1
 800530e:	d001      	beq.n	8005314 <checkSubcribe+0x24>
			ENABLE_SIM_CHECKRES,ENABLE_MARKASREAD, MQTT_TIMEOUT_SHORT) != SIM_RES_MSG) 	return 0;
 8005310:	2300      	movs	r3, #0
 8005312:	e000      	b.n	8005316 <checkSubcribe+0x26>
	return 1;
 8005314:	2301      	movs	r3, #1
}
 8005316:	4618      	mov	r0, r3
 8005318:	3708      	adds	r7, #8
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}
 800531e:	bf00      	nop
 8005320:	0800f280 	.word	0x0800f280

08005324 <isWordinBuff>:
#include "String_process.h"
#include <string.h>


uint8_t* isWordinBuff(uint8_t *databuff,uint16_t buff_size, uint8_t *word)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b086      	sub	sp, #24
 8005328:	af00      	add	r7, sp, #0
 800532a:	60f8      	str	r0, [r7, #12]
 800532c:	460b      	mov	r3, r1
 800532e:	607a      	str	r2, [r7, #4]
 8005330:	817b      	strh	r3, [r7, #10]
	uint8_t wordlen = strlen((char*)word);
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f7fa ff14 	bl	8000160 <strlen>
 8005338:	4603      	mov	r3, r0
 800533a:	757b      	strb	r3, [r7, #21]
	for (uint16_t i = 0; i< buff_size - wordlen + 1; i++)
 800533c:	2300      	movs	r3, #0
 800533e:	82fb      	strh	r3, [r7, #22]
 8005340:	e011      	b.n	8005366 <isWordinBuff+0x42>
	{
		if ( memcmp(databuff +i,word,wordlen) == 0)
 8005342:	8afb      	ldrh	r3, [r7, #22]
 8005344:	68fa      	ldr	r2, [r7, #12]
 8005346:	4413      	add	r3, r2
 8005348:	7d7a      	ldrb	r2, [r7, #21]
 800534a:	6879      	ldr	r1, [r7, #4]
 800534c:	4618      	mov	r0, r3
 800534e:	f006 ff83 	bl	800c258 <memcmp>
 8005352:	4603      	mov	r3, r0
 8005354:	2b00      	cmp	r3, #0
 8005356:	d103      	bne.n	8005360 <isWordinBuff+0x3c>
		{
			return databuff+ i;
 8005358:	8afb      	ldrh	r3, [r7, #22]
 800535a:	68fa      	ldr	r2, [r7, #12]
 800535c:	4413      	add	r3, r2
 800535e:	e009      	b.n	8005374 <isWordinBuff+0x50>
	for (uint16_t i = 0; i< buff_size - wordlen + 1; i++)
 8005360:	8afb      	ldrh	r3, [r7, #22]
 8005362:	3301      	adds	r3, #1
 8005364:	82fb      	strh	r3, [r7, #22]
 8005366:	897a      	ldrh	r2, [r7, #10]
 8005368:	7d7b      	ldrb	r3, [r7, #21]
 800536a:	1ad2      	subs	r2, r2, r3
 800536c:	8afb      	ldrh	r3, [r7, #22]
 800536e:	429a      	cmp	r2, r3
 8005370:	dae7      	bge.n	8005342 <isWordinBuff+0x1e>
		}
	}
	return NULL;
 8005372:	2300      	movs	r3, #0
}
 8005374:	4618      	mov	r0, r3
 8005376:	3718      	adds	r7, #24
 8005378:	46bd      	mov	sp, r7
 800537a:	bd80      	pop	{r7, pc}

0800537c <getBetween>:

uint16_t getBetween(uint8_t *firstWord,uint8_t *lastWord, uint8_t *buff, uint16_t size, uint8_t *getBuff)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b088      	sub	sp, #32
 8005380:	af00      	add	r7, sp, #0
 8005382:	60f8      	str	r0, [r7, #12]
 8005384:	60b9      	str	r1, [r7, #8]
 8005386:	607a      	str	r2, [r7, #4]
 8005388:	807b      	strh	r3, [r7, #2]
	uint8_t fWlen = strlen((char*)firstWord);
 800538a:	68f8      	ldr	r0, [r7, #12]
 800538c:	f7fa fee8 	bl	8000160 <strlen>
 8005390:	4603      	mov	r3, r0
 8005392:	76bb      	strb	r3, [r7, #26]

	uint8_t *Fp =isWordinBuff(buff, size, firstWord);
 8005394:	887b      	ldrh	r3, [r7, #2]
 8005396:	68fa      	ldr	r2, [r7, #12]
 8005398:	4619      	mov	r1, r3
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f7ff ffc2 	bl	8005324 <isWordinBuff>
 80053a0:	61f8      	str	r0, [r7, #28]

	if (Fp == NULL ) return 0;
 80053a2:	69fb      	ldr	r3, [r7, #28]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d101      	bne.n	80053ac <getBetween+0x30>
 80053a8:	2300      	movs	r3, #0
 80053aa:	e036      	b.n	800541a <getBetween+0x9e>
	Fp += fWlen;
 80053ac:	7ebb      	ldrb	r3, [r7, #26]
 80053ae:	69fa      	ldr	r2, [r7, #28]
 80053b0:	4413      	add	r3, r2
 80053b2:	61fb      	str	r3, [r7, #28]
	uint8_t remainSize = getRemainsize(Fp, buff, size);
 80053b4:	887b      	ldrh	r3, [r7, #2]
 80053b6:	461a      	mov	r2, r3
 80053b8:	6879      	ldr	r1, [r7, #4]
 80053ba:	69f8      	ldr	r0, [r7, #28]
 80053bc:	f000 f831 	bl	8005422 <getRemainsize>
 80053c0:	4603      	mov	r3, r0
 80053c2:	767b      	strb	r3, [r7, #25]
	uint8_t *Lp = isWordinBuff(Fp, remainSize, lastWord);
 80053c4:	7e7b      	ldrb	r3, [r7, #25]
 80053c6:	b29b      	uxth	r3, r3
 80053c8:	68ba      	ldr	r2, [r7, #8]
 80053ca:	4619      	mov	r1, r3
 80053cc:	69f8      	ldr	r0, [r7, #28]
 80053ce:	f7ff ffa9 	bl	8005324 <isWordinBuff>
 80053d2:	6178      	str	r0, [r7, #20]
	if (Lp == NULL || Fp >= Lp) return 0;
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d003      	beq.n	80053e2 <getBetween+0x66>
 80053da:	69fa      	ldr	r2, [r7, #28]
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	429a      	cmp	r2, r3
 80053e0:	d301      	bcc.n	80053e6 <getBetween+0x6a>
 80053e2:	2300      	movs	r3, #0
 80053e4:	e019      	b.n	800541a <getBetween+0x9e>

	uint8_t getBuffindex =0;
 80053e6:	2300      	movs	r3, #0
 80053e8:	76fb      	strb	r3, [r7, #27]
	while (Fp != Lp)
 80053ea:	e00b      	b.n	8005404 <getBetween+0x88>
	{
		getBuff[getBuffindex++] = *Fp;
 80053ec:	7efb      	ldrb	r3, [r7, #27]
 80053ee:	1c5a      	adds	r2, r3, #1
 80053f0:	76fa      	strb	r2, [r7, #27]
 80053f2:	461a      	mov	r2, r3
 80053f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053f6:	4413      	add	r3, r2
 80053f8:	69fa      	ldr	r2, [r7, #28]
 80053fa:	7812      	ldrb	r2, [r2, #0]
 80053fc:	701a      	strb	r2, [r3, #0]
		Fp ++;
 80053fe:	69fb      	ldr	r3, [r7, #28]
 8005400:	3301      	adds	r3, #1
 8005402:	61fb      	str	r3, [r7, #28]
	while (Fp != Lp)
 8005404:	69fa      	ldr	r2, [r7, #28]
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	429a      	cmp	r2, r3
 800540a:	d1ef      	bne.n	80053ec <getBetween+0x70>
	}
	getBuff[getBuffindex]= '\0';
 800540c:	7efb      	ldrb	r3, [r7, #27]
 800540e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005410:	4413      	add	r3, r2
 8005412:	2200      	movs	r2, #0
 8005414:	701a      	strb	r2, [r3, #0]
	return getBuffindex;           // length of getBuff
 8005416:	7efb      	ldrb	r3, [r7, #27]
 8005418:	b29b      	uxth	r3, r3
}
 800541a:	4618      	mov	r0, r3
 800541c:	3720      	adds	r7, #32
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}

08005422 <getRemainsize>:

uint16_t getRemainsize(uint8_t *Remainbuff, uint8_t *Originbuff, uint16_t originSize)
{
 8005422:	b480      	push	{r7}
 8005424:	b085      	sub	sp, #20
 8005426:	af00      	add	r7, sp, #0
 8005428:	60f8      	str	r0, [r7, #12]
 800542a:	60b9      	str	r1, [r7, #8]
 800542c:	4613      	mov	r3, r2
 800542e:	80fb      	strh	r3, [r7, #6]
	return originSize-(Remainbuff - Originbuff)/sizeof(uint8_t);
 8005430:	68fa      	ldr	r2, [r7, #12]
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	1ad3      	subs	r3, r2, r3
 8005436:	b29b      	uxth	r3, r3
 8005438:	88fa      	ldrh	r2, [r7, #6]
 800543a:	1ad3      	subs	r3, r2, r3
 800543c:	b29b      	uxth	r3, r3
}
 800543e:	4618      	mov	r0, r3
 8005440:	3714      	adds	r7, #20
 8005442:	46bd      	mov	sp, r7
 8005444:	bc80      	pop	{r7}
 8005446:	4770      	bx	lr

08005448 <twobyte2buff>:
	}
	return count;
}

void twobyte2buff(uint8_t *buffer, uint16_t number)
{
 8005448:	b480      	push	{r7}
 800544a:	b083      	sub	sp, #12
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
 8005450:	460b      	mov	r3, r1
 8005452:	807b      	strh	r3, [r7, #2]
	buffer[0] = ( number >> 8 ) & 0xFF;
 8005454:	887b      	ldrh	r3, [r7, #2]
 8005456:	0a1b      	lsrs	r3, r3, #8
 8005458:	b29b      	uxth	r3, r3
 800545a:	b2da      	uxtb	r2, r3
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	701a      	strb	r2, [r3, #0]
	buffer[1] = number & 0xFF;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	3301      	adds	r3, #1
 8005464:	887a      	ldrh	r2, [r7, #2]
 8005466:	b2d2      	uxtb	r2, r2
 8005468:	701a      	strb	r2, [r3, #0]
}
 800546a:	bf00      	nop
 800546c:	370c      	adds	r7, #12
 800546e:	46bd      	mov	sp, r7
 8005470:	bc80      	pop	{r7}
 8005472:	4770      	bx	lr

08005474 <buff2twobyte>:
uint16_t buff2twobyte (uint8_t *buff)
{
 8005474:	b480      	push	{r7}
 8005476:	b085      	sub	sp, #20
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
	uint16_t value = 0;
 800547c:	2300      	movs	r3, #0
 800547e:	81fb      	strh	r3, [r7, #14]
	value = buff[0] << 8 | buff[1];
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	781b      	ldrb	r3, [r3, #0]
 8005484:	021b      	lsls	r3, r3, #8
 8005486:	b21a      	sxth	r2, r3
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	3301      	adds	r3, #1
 800548c:	781b      	ldrb	r3, [r3, #0]
 800548e:	b21b      	sxth	r3, r3
 8005490:	4313      	orrs	r3, r2
 8005492:	b21b      	sxth	r3, r3
 8005494:	81fb      	strh	r3, [r7, #14]
	return value;
 8005496:	89fb      	ldrh	r3, [r7, #14]
}
 8005498:	4618      	mov	r0, r3
 800549a:	3714      	adds	r7, #20
 800549c:	46bd      	mov	sp, r7
 800549e:	bc80      	pop	{r7}
 80054a0:	4770      	bx	lr

080054a2 <FourbytenumbertoBuff>:

void FourbytenumbertoBuff(uint32_t inputNumber, uint8_t *Buff)
{
 80054a2:	b480      	push	{r7}
 80054a4:	b085      	sub	sp, #20
 80054a6:	af00      	add	r7, sp, #0
 80054a8:	6078      	str	r0, [r7, #4]
 80054aa:	6039      	str	r1, [r7, #0]
    uint32_t tmp =inputNumber;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	60fb      	str	r3, [r7, #12]
	for (uint8_t i=0 ;i< 4;i++)
 80054b0:	2300      	movs	r3, #0
 80054b2:	72fb      	strb	r3, [r7, #11]
 80054b4:	e00e      	b.n	80054d4 <FourbytenumbertoBuff+0x32>
	{
		Buff[3-i] = tmp & (0xFF);
 80054b6:	7afb      	ldrb	r3, [r7, #11]
 80054b8:	f1c3 0303 	rsb	r3, r3, #3
 80054bc:	461a      	mov	r2, r3
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	4413      	add	r3, r2
 80054c2:	68fa      	ldr	r2, [r7, #12]
 80054c4:	b2d2      	uxtb	r2, r2
 80054c6:	701a      	strb	r2, [r3, #0]
 		tmp = tmp >>8;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	0a1b      	lsrs	r3, r3, #8
 80054cc:	60fb      	str	r3, [r7, #12]
	for (uint8_t i=0 ;i< 4;i++)
 80054ce:	7afb      	ldrb	r3, [r7, #11]
 80054d0:	3301      	adds	r3, #1
 80054d2:	72fb      	strb	r3, [r7, #11]
 80054d4:	7afb      	ldrb	r3, [r7, #11]
 80054d6:	2b03      	cmp	r3, #3
 80054d8:	d9ed      	bls.n	80054b6 <FourbytenumbertoBuff+0x14>
	}
}
 80054da:	bf00      	nop
 80054dc:	bf00      	nop
 80054de:	3714      	adds	r7, #20
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bc80      	pop	{r7}
 80054e4:	4770      	bx	lr

080054e6 <buff2Fourbyte>:

uint32_t buff2Fourbyte(uint8_t *buff)
{
 80054e6:	b480      	push	{r7}
 80054e8:	b085      	sub	sp, #20
 80054ea:	af00      	add	r7, sp, #0
 80054ec:	6078      	str	r0, [r7, #4]
	uint32_t value = 0;
 80054ee:	2300      	movs	r3, #0
 80054f0:	60fb      	str	r3, [r7, #12]
	value = buff[0] << 24 | buff[1] << 16 | buff[2] << 8 | buff[3];
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	781b      	ldrb	r3, [r3, #0]
 80054f6:	061a      	lsls	r2, r3, #24
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	3301      	adds	r3, #1
 80054fc:	781b      	ldrb	r3, [r3, #0]
 80054fe:	041b      	lsls	r3, r3, #16
 8005500:	431a      	orrs	r2, r3
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	3302      	adds	r3, #2
 8005506:	781b      	ldrb	r3, [r3, #0]
 8005508:	021b      	lsls	r3, r3, #8
 800550a:	4313      	orrs	r3, r2
 800550c:	687a      	ldr	r2, [r7, #4]
 800550e:	3203      	adds	r2, #3
 8005510:	7812      	ldrb	r2, [r2, #0]
 8005512:	4313      	orrs	r3, r2
 8005514:	60fb      	str	r3, [r7, #12]
	return value;
 8005516:	68fb      	ldr	r3, [r7, #12]
}
 8005518:	4618      	mov	r0, r3
 800551a:	3714      	adds	r7, #20
 800551c:	46bd      	mov	sp, r7
 800551e:	bc80      	pop	{r7}
 8005520:	4770      	bx	lr

08005522 <initTask>:


//static Station_t *myStation;

void initTask()
{
 8005522:	b480      	push	{r7}
 8005524:	af00      	add	r7, sp, #0
//	myStation = station;
}
 8005526:	bf00      	nop
 8005528:	46bd      	mov	sp, r7
 800552a:	bc80      	pop	{r7}
 800552c:	4770      	bx	lr
	...

08005530 <checkTaskflag>:

bool checkTaskflag (Task_t task)
{
 8005530:	b480      	push	{r7}
 8005532:	b085      	sub	sp, #20
 8005534:	af00      	add	r7, sp, #0
 8005536:	4603      	mov	r3, r0
 8005538:	71fb      	strb	r3, [r7, #7]
	bool res = false;
 800553a:	2300      	movs	r3, #0
 800553c:	73fb      	strb	r3, [r7, #15]
	switch (task) {
 800553e:	79fb      	ldrb	r3, [r7, #7]
 8005540:	2b11      	cmp	r3, #17
 8005542:	f200 80ed 	bhi.w	8005720 <checkTaskflag+0x1f0>
 8005546:	a201      	add	r2, pc, #4	; (adr r2, 800554c <checkTaskflag+0x1c>)
 8005548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800554c:	08005595 	.word	0x08005595
 8005550:	080055ab 	.word	0x080055ab
 8005554:	080055ed 	.word	0x080055ed
 8005558:	08005603 	.word	0x08005603
 800555c:	080055c1 	.word	0x080055c1
 8005560:	0800570b 	.word	0x0800570b
 8005564:	080055d7 	.word	0x080055d7
 8005568:	08005619 	.word	0x08005619
 800556c:	0800562f 	.word	0x0800562f
 8005570:	0800565b 	.word	0x0800565b
 8005574:	08005645 	.word	0x08005645
 8005578:	08005671 	.word	0x08005671
 800557c:	08005687 	.word	0x08005687
 8005580:	0800569d 	.word	0x0800569d
 8005584:	080056b3 	.word	0x080056b3
 8005588:	080056c9 	.word	0x080056c9
 800558c:	080056df 	.word	0x080056df
 8005590:	080056f5 	.word	0x080056f5
	case TASK_REGISTER:
		res = (bool)myStation.task.register2server ;
 8005594:	4b66      	ldr	r3, [pc, #408]	; (8005730 <checkTaskflag+0x200>)
 8005596:	7c1b      	ldrb	r3, [r3, #16]
 8005598:	f003 0301 	and.w	r3, r3, #1
 800559c:	b2db      	uxtb	r3, r3
 800559e:	2b00      	cmp	r3, #0
 80055a0:	bf14      	ite	ne
 80055a2:	2301      	movne	r3, #1
 80055a4:	2300      	moveq	r3, #0
 80055a6:	73fb      	strb	r3, [r7, #15]
		break;
 80055a8:	e0bb      	b.n	8005722 <checkTaskflag+0x1f2>
	case TASK_SUBSCRIBE:
		res = (bool)myStation.task.subscribe;
 80055aa:	4b61      	ldr	r3, [pc, #388]	; (8005730 <checkTaskflag+0x200>)
 80055ac:	7c1b      	ldrb	r3, [r3, #16]
 80055ae:	f003 0302 	and.w	r3, r3, #2
 80055b2:	b2db      	uxtb	r3, r3
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	bf14      	ite	ne
 80055b8:	2301      	movne	r3, #1
 80055ba:	2300      	moveq	r3, #0
 80055bc:	73fb      	strb	r3, [r7, #15]
		break;
 80055be:	e0b0      	b.n	8005722 <checkTaskflag+0x1f2>
	case TASK_SEND_MBA_STATUS:
		res = (bool)myStation.task.sendMBAstatus;
 80055c0:	4b5b      	ldr	r3, [pc, #364]	; (8005730 <checkTaskflag+0x200>)
 80055c2:	7c1b      	ldrb	r3, [r3, #16]
 80055c4:	f003 0310 	and.w	r3, r3, #16
 80055c8:	b2db      	uxtb	r3, r3
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	bf14      	ite	ne
 80055ce:	2301      	movne	r3, #1
 80055d0:	2300      	moveq	r3, #0
 80055d2:	73fb      	strb	r3, [r7, #15]
		break;
 80055d4:	e0a5      	b.n	8005722 <checkTaskflag+0x1f2>
	case TASK_CTRL_STEPMOR:
		res = (bool)myStation.task.CtrlStepmotor;
 80055d6:	4b56      	ldr	r3, [pc, #344]	; (8005730 <checkTaskflag+0x200>)
 80055d8:	7c1b      	ldrb	r3, [r3, #16]
 80055da:	f003 0320 	and.w	r3, r3, #32
 80055de:	b2db      	uxtb	r3, r3
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	bf14      	ite	ne
 80055e4:	2301      	movne	r3, #1
 80055e6:	2300      	moveq	r3, #0
 80055e8:	73fb      	strb	r3, [r7, #15]
		break;
 80055ea:	e09a      	b.n	8005722 <checkTaskflag+0x1f2>
	case TASK_PREPARE_CALIB:
		res = (bool)myStation.task.PrepareCalib;
 80055ec:	4b50      	ldr	r3, [pc, #320]	; (8005730 <checkTaskflag+0x200>)
 80055ee:	7c1b      	ldrb	r3, [r3, #16]
 80055f0:	f003 0304 	and.w	r3, r3, #4
 80055f4:	b2db      	uxtb	r3, r3
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	bf14      	ite	ne
 80055fa:	2301      	movne	r3, #1
 80055fc:	2300      	moveq	r3, #0
 80055fe:	73fb      	strb	r3, [r7, #15]
		break;
 8005600:	e08f      	b.n	8005722 <checkTaskflag+0x1f2>
	case TASK_START_CALIB:
		res = (bool)myStation.task.StartCalib;
 8005602:	4b4b      	ldr	r3, [pc, #300]	; (8005730 <checkTaskflag+0x200>)
 8005604:	7c1b      	ldrb	r3, [r3, #16]
 8005606:	f003 0308 	and.w	r3, r3, #8
 800560a:	b2db      	uxtb	r3, r3
 800560c:	2b00      	cmp	r3, #0
 800560e:	bf14      	ite	ne
 8005610:	2301      	movne	r3, #1
 8005612:	2300      	moveq	r3, #0
 8005614:	73fb      	strb	r3, [r7, #15]
		break;
 8005616:	e084      	b.n	8005722 <checkTaskflag+0x1f2>
	case TASK_GET_GPS_TIME:
		res = (bool)myStation.task.getGPStimeflag;
 8005618:	4b45      	ldr	r3, [pc, #276]	; (8005730 <checkTaskflag+0x200>)
 800561a:	7c1b      	ldrb	r3, [r3, #16]
 800561c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005620:	b2db      	uxtb	r3, r3
 8005622:	2b00      	cmp	r3, #0
 8005624:	bf14      	ite	ne
 8005626:	2301      	movne	r3, #1
 8005628:	2300      	moveq	r3, #0
 800562a:	73fb      	strb	r3, [r7, #15]
		break;
 800562c:	e079      	b.n	8005722 <checkTaskflag+0x1f2>
	case TASK_SEND_NWREADY:
		res = (bool)myStation.task.sendNWready;
 800562e:	4b40      	ldr	r3, [pc, #256]	; (8005730 <checkTaskflag+0x200>)
 8005630:	7c5b      	ldrb	r3, [r3, #17]
 8005632:	f003 0301 	and.w	r3, r3, #1
 8005636:	b2db      	uxtb	r3, r3
 8005638:	2b00      	cmp	r3, #0
 800563a:	bf14      	ite	ne
 800563c:	2301      	movne	r3, #1
 800563e:	2300      	moveq	r3, #0
 8005640:	73fb      	strb	r3, [r7, #15]
		break;
 8005642:	e06e      	b.n	8005722 <checkTaskflag+0x1f2>
	case TASK_SEND_DATACALIB:
		res = (bool)myStation.task.sendDATACALIB;
 8005644:	4b3a      	ldr	r3, [pc, #232]	; (8005730 <checkTaskflag+0x200>)
 8005646:	7c5b      	ldrb	r3, [r3, #17]
 8005648:	f003 0302 	and.w	r3, r3, #2
 800564c:	b2db      	uxtb	r3, r3
 800564e:	2b00      	cmp	r3, #0
 8005650:	bf14      	ite	ne
 8005652:	2301      	movne	r3, #1
 8005654:	2300      	moveq	r3, #0
 8005656:	73fb      	strb	r3, [r7, #15]
		break;
 8005658:	e063      	b.n	8005722 <checkTaskflag+0x1f2>
	case TASK_SEND_DATAPERIOD:
		res = (bool)myStation.task.sendDataPeriod;
 800565a:	4b35      	ldr	r3, [pc, #212]	; (8005730 <checkTaskflag+0x200>)
 800565c:	7c1b      	ldrb	r3, [r3, #16]
 800565e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005662:	b2db      	uxtb	r3, r3
 8005664:	2b00      	cmp	r3, #0
 8005666:	bf14      	ite	ne
 8005668:	2301      	movne	r3, #1
 800566a:	2300      	moveq	r3, #0
 800566c:	73fb      	strb	r3, [r7, #15]
		break;
 800566e:	e058      	b.n	8005722 <checkTaskflag+0x1f2>
	case TASK_SEND_DATAAFTERCALIB:
		res = (bool)myStation.task.sendDATAafterCALIB;
 8005670:	4b2f      	ldr	r3, [pc, #188]	; (8005730 <checkTaskflag+0x200>)
 8005672:	7c5b      	ldrb	r3, [r3, #17]
 8005674:	f003 0304 	and.w	r3, r3, #4
 8005678:	b2db      	uxtb	r3, r3
 800567a:	2b00      	cmp	r3, #0
 800567c:	bf14      	ite	ne
 800567e:	2301      	movne	r3, #1
 8005680:	2300      	moveq	r3, #0
 8005682:	73fb      	strb	r3, [r7, #15]
		break;
 8005684:	e04d      	b.n	8005722 <checkTaskflag+0x1f2>
	case TASK_SEND_CTRLMBA:
		res = (bool)myStation.task.sendcmdCtrlMBA;
 8005686:	4b2a      	ldr	r3, [pc, #168]	; (8005730 <checkTaskflag+0x200>)
 8005688:	7c5b      	ldrb	r3, [r3, #17]
 800568a:	f003 0308 	and.w	r3, r3, #8
 800568e:	b2db      	uxtb	r3, r3
 8005690:	2b00      	cmp	r3, #0
 8005692:	bf14      	ite	ne
 8005694:	2301      	movne	r3, #1
 8005696:	2300      	moveq	r3, #0
 8005698:	73fb      	strb	r3, [r7, #15]
		break;
 800569a:	e042      	b.n	8005722 <checkTaskflag+0x1f2>
	case TASK_SEND_CTRLSTEPMOR:
		res = (bool)myStation.task.sendcmdCtrlStepmotor;
 800569c:	4b24      	ldr	r3, [pc, #144]	; (8005730 <checkTaskflag+0x200>)
 800569e:	7c5b      	ldrb	r3, [r3, #17]
 80056a0:	f003 0310 	and.w	r3, r3, #16
 80056a4:	b2db      	uxtb	r3, r3
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	bf14      	ite	ne
 80056aa:	2301      	movne	r3, #1
 80056ac:	2300      	moveq	r3, #0
 80056ae:	73fb      	strb	r3, [r7, #15]
		break;
 80056b0:	e037      	b.n	8005722 <checkTaskflag+0x1f2>
	case TASK_SEND_CALIB:
		res = (bool)myStation.task.sendcmdCalib;
 80056b2:	4b1f      	ldr	r3, [pc, #124]	; (8005730 <checkTaskflag+0x200>)
 80056b4:	7c5b      	ldrb	r3, [r3, #17]
 80056b6:	f003 0320 	and.w	r3, r3, #32
 80056ba:	b2db      	uxtb	r3, r3
 80056bc:	2b00      	cmp	r3, #0
 80056be:	bf14      	ite	ne
 80056c0:	2301      	movne	r3, #1
 80056c2:	2300      	moveq	r3, #0
 80056c4:	73fb      	strb	r3, [r7, #15]
		break;
 80056c6:	e02c      	b.n	8005722 <checkTaskflag+0x1f2>
	case TASK_SEND_GETSTATUS:
		res = (bool)myStation.task.sendcmdGetstatus;
 80056c8:	4b19      	ldr	r3, [pc, #100]	; (8005730 <checkTaskflag+0x200>)
 80056ca:	7c5b      	ldrb	r3, [r3, #17]
 80056cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056d0:	b2db      	uxtb	r3, r3
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	bf14      	ite	ne
 80056d6:	2301      	movne	r3, #1
 80056d8:	2300      	moveq	r3, #0
 80056da:	73fb      	strb	r3, [r7, #15]
		break;
 80056dc:	e021      	b.n	8005722 <checkTaskflag+0x1f2>
	case TASK_SEND_GETSTATION:
		res = (bool)myStation.task.sendcmdGetstation;
 80056de:	4b14      	ldr	r3, [pc, #80]	; (8005730 <checkTaskflag+0x200>)
 80056e0:	7c5b      	ldrb	r3, [r3, #17]
 80056e2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80056e6:	b2db      	uxtb	r3, r3
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	bf14      	ite	ne
 80056ec:	2301      	movne	r3, #1
 80056ee:	2300      	moveq	r3, #0
 80056f0:	73fb      	strb	r3, [r7, #15]
		break;
 80056f2:	e016      	b.n	8005722 <checkTaskflag+0x1f2>
	case TASK_SEND_GETSENSOR:
		res = (bool)myStation.task.sendcmdGetsensor;
 80056f4:	4b0e      	ldr	r3, [pc, #56]	; (8005730 <checkTaskflag+0x200>)
 80056f6:	7c9b      	ldrb	r3, [r3, #18]
 80056f8:	f003 0301 	and.w	r3, r3, #1
 80056fc:	b2db      	uxtb	r3, r3
 80056fe:	2b00      	cmp	r3, #0
 8005700:	bf14      	ite	ne
 8005702:	2301      	movne	r3, #1
 8005704:	2300      	moveq	r3, #0
 8005706:	73fb      	strb	r3, [r7, #15]
		break;
 8005708:	e00b      	b.n	8005722 <checkTaskflag+0x1f2>
	case TASK_SEND_STEP_LIMIT:
		res = (bool)myStation.task.sendSTEPLIMIT;
 800570a:	4b09      	ldr	r3, [pc, #36]	; (8005730 <checkTaskflag+0x200>)
 800570c:	7c9b      	ldrb	r3, [r3, #18]
 800570e:	f003 0302 	and.w	r3, r3, #2
 8005712:	b2db      	uxtb	r3, r3
 8005714:	2b00      	cmp	r3, #0
 8005716:	bf14      	ite	ne
 8005718:	2301      	movne	r3, #1
 800571a:	2300      	moveq	r3, #0
 800571c:	73fb      	strb	r3, [r7, #15]
		break;
 800571e:	e000      	b.n	8005722 <checkTaskflag+0x1f2>
	default:
		break;
 8005720:	bf00      	nop
	}
	return res;
 8005722:	7bfb      	ldrb	r3, [r7, #15]
}
 8005724:	4618      	mov	r0, r3
 8005726:	3714      	adds	r7, #20
 8005728:	46bd      	mov	sp, r7
 800572a:	bc80      	pop	{r7}
 800572c:	4770      	bx	lr
 800572e:	bf00      	nop
 8005730:	20000474 	.word	0x20000474

08005734 <triggerTaskflag>:



void triggerTaskflag (Task_t task, Flag_t ENorDIS)
{
 8005734:	b480      	push	{r7}
 8005736:	b083      	sub	sp, #12
 8005738:	af00      	add	r7, sp, #0
 800573a:	4603      	mov	r3, r0
 800573c:	460a      	mov	r2, r1
 800573e:	71fb      	strb	r3, [r7, #7]
 8005740:	4613      	mov	r3, r2
 8005742:	71bb      	strb	r3, [r7, #6]
	switch (task) {
 8005744:	79fb      	ldrb	r3, [r7, #7]
 8005746:	2b11      	cmp	r3, #17
 8005748:	f200 80db 	bhi.w	8005902 <triggerTaskflag+0x1ce>
 800574c:	a201      	add	r2, pc, #4	; (adr r2, 8005754 <triggerTaskflag+0x20>)
 800574e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005752:	bf00      	nop
 8005754:	0800579d 	.word	0x0800579d
 8005758:	080057b1 	.word	0x080057b1
 800575c:	080057ed 	.word	0x080057ed
 8005760:	08005801 	.word	0x08005801
 8005764:	080057c5 	.word	0x080057c5
 8005768:	080058f1 	.word	0x080058f1
 800576c:	080057d9 	.word	0x080057d9
 8005770:	08005815 	.word	0x08005815
 8005774:	08005829 	.word	0x08005829
 8005778:	08005851 	.word	0x08005851
 800577c:	0800583d 	.word	0x0800583d
 8005780:	08005865 	.word	0x08005865
 8005784:	08005879 	.word	0x08005879
 8005788:	0800588d 	.word	0x0800588d
 800578c:	080058a1 	.word	0x080058a1
 8005790:	080058b5 	.word	0x080058b5
 8005794:	080058c9 	.word	0x080058c9
 8005798:	080058dd 	.word	0x080058dd
	case TASK_REGISTER:
		myStation.task.register2server = ENorDIS;
 800579c:	79bb      	ldrb	r3, [r7, #6]
 800579e:	f003 0301 	and.w	r3, r3, #1
 80057a2:	b2d9      	uxtb	r1, r3
 80057a4:	4a5a      	ldr	r2, [pc, #360]	; (8005910 <triggerTaskflag+0x1dc>)
 80057a6:	7c13      	ldrb	r3, [r2, #16]
 80057a8:	f361 0300 	bfi	r3, r1, #0, #1
 80057ac:	7413      	strb	r3, [r2, #16]
		break;
 80057ae:	e0a9      	b.n	8005904 <triggerTaskflag+0x1d0>
	case TASK_SUBSCRIBE:
		myStation.task.subscribe = ENorDIS;
 80057b0:	79bb      	ldrb	r3, [r7, #6]
 80057b2:	f003 0301 	and.w	r3, r3, #1
 80057b6:	b2d9      	uxtb	r1, r3
 80057b8:	4a55      	ldr	r2, [pc, #340]	; (8005910 <triggerTaskflag+0x1dc>)
 80057ba:	7c13      	ldrb	r3, [r2, #16]
 80057bc:	f361 0341 	bfi	r3, r1, #1, #1
 80057c0:	7413      	strb	r3, [r2, #16]
		break;
 80057c2:	e09f      	b.n	8005904 <triggerTaskflag+0x1d0>
	case TASK_SEND_MBA_STATUS:
		myStation.task.sendMBAstatus = ENorDIS;
 80057c4:	79bb      	ldrb	r3, [r7, #6]
 80057c6:	f003 0301 	and.w	r3, r3, #1
 80057ca:	b2d9      	uxtb	r1, r3
 80057cc:	4a50      	ldr	r2, [pc, #320]	; (8005910 <triggerTaskflag+0x1dc>)
 80057ce:	7c13      	ldrb	r3, [r2, #16]
 80057d0:	f361 1304 	bfi	r3, r1, #4, #1
 80057d4:	7413      	strb	r3, [r2, #16]
		break;
 80057d6:	e095      	b.n	8005904 <triggerTaskflag+0x1d0>
	case TASK_CTRL_STEPMOR:
		myStation.task.CtrlStepmotor = ENorDIS;
 80057d8:	79bb      	ldrb	r3, [r7, #6]
 80057da:	f003 0301 	and.w	r3, r3, #1
 80057de:	b2d9      	uxtb	r1, r3
 80057e0:	4a4b      	ldr	r2, [pc, #300]	; (8005910 <triggerTaskflag+0x1dc>)
 80057e2:	7c13      	ldrb	r3, [r2, #16]
 80057e4:	f361 1345 	bfi	r3, r1, #5, #1
 80057e8:	7413      	strb	r3, [r2, #16]
		break;
 80057ea:	e08b      	b.n	8005904 <triggerTaskflag+0x1d0>
	case TASK_PREPARE_CALIB:
		myStation.task.PrepareCalib = ENorDIS;
 80057ec:	79bb      	ldrb	r3, [r7, #6]
 80057ee:	f003 0301 	and.w	r3, r3, #1
 80057f2:	b2d9      	uxtb	r1, r3
 80057f4:	4a46      	ldr	r2, [pc, #280]	; (8005910 <triggerTaskflag+0x1dc>)
 80057f6:	7c13      	ldrb	r3, [r2, #16]
 80057f8:	f361 0382 	bfi	r3, r1, #2, #1
 80057fc:	7413      	strb	r3, [r2, #16]
		break;
 80057fe:	e081      	b.n	8005904 <triggerTaskflag+0x1d0>
	case TASK_START_CALIB:
		myStation.task.StartCalib = ENorDIS;
 8005800:	79bb      	ldrb	r3, [r7, #6]
 8005802:	f003 0301 	and.w	r3, r3, #1
 8005806:	b2d9      	uxtb	r1, r3
 8005808:	4a41      	ldr	r2, [pc, #260]	; (8005910 <triggerTaskflag+0x1dc>)
 800580a:	7c13      	ldrb	r3, [r2, #16]
 800580c:	f361 03c3 	bfi	r3, r1, #3, #1
 8005810:	7413      	strb	r3, [r2, #16]
		break;
 8005812:	e077      	b.n	8005904 <triggerTaskflag+0x1d0>
	case TASK_GET_GPS_TIME:
		myStation.task.getGPStimeflag = ENorDIS;
 8005814:	79bb      	ldrb	r3, [r7, #6]
 8005816:	f003 0301 	and.w	r3, r3, #1
 800581a:	b2d9      	uxtb	r1, r3
 800581c:	4a3c      	ldr	r2, [pc, #240]	; (8005910 <triggerTaskflag+0x1dc>)
 800581e:	7c13      	ldrb	r3, [r2, #16]
 8005820:	f361 1386 	bfi	r3, r1, #6, #1
 8005824:	7413      	strb	r3, [r2, #16]
		break;
 8005826:	e06d      	b.n	8005904 <triggerTaskflag+0x1d0>
	case TASK_SEND_NWREADY:
		myStation.task.sendNWready = ENorDIS;
 8005828:	79bb      	ldrb	r3, [r7, #6]
 800582a:	f003 0301 	and.w	r3, r3, #1
 800582e:	b2d9      	uxtb	r1, r3
 8005830:	4a37      	ldr	r2, [pc, #220]	; (8005910 <triggerTaskflag+0x1dc>)
 8005832:	7c53      	ldrb	r3, [r2, #17]
 8005834:	f361 0300 	bfi	r3, r1, #0, #1
 8005838:	7453      	strb	r3, [r2, #17]
		break;
 800583a:	e063      	b.n	8005904 <triggerTaskflag+0x1d0>
	case TASK_SEND_DATACALIB:
		myStation.task.sendDATACALIB = ENorDIS;
 800583c:	79bb      	ldrb	r3, [r7, #6]
 800583e:	f003 0301 	and.w	r3, r3, #1
 8005842:	b2d9      	uxtb	r1, r3
 8005844:	4a32      	ldr	r2, [pc, #200]	; (8005910 <triggerTaskflag+0x1dc>)
 8005846:	7c53      	ldrb	r3, [r2, #17]
 8005848:	f361 0341 	bfi	r3, r1, #1, #1
 800584c:	7453      	strb	r3, [r2, #17]
		break;
 800584e:	e059      	b.n	8005904 <triggerTaskflag+0x1d0>
	case TASK_SEND_DATAPERIOD:
		myStation.task.sendDataPeriod = ENorDIS;
 8005850:	79bb      	ldrb	r3, [r7, #6]
 8005852:	f003 0301 	and.w	r3, r3, #1
 8005856:	b2d9      	uxtb	r1, r3
 8005858:	4a2d      	ldr	r2, [pc, #180]	; (8005910 <triggerTaskflag+0x1dc>)
 800585a:	7c13      	ldrb	r3, [r2, #16]
 800585c:	f361 13c7 	bfi	r3, r1, #7, #1
 8005860:	7413      	strb	r3, [r2, #16]
		break;
 8005862:	e04f      	b.n	8005904 <triggerTaskflag+0x1d0>
	case TASK_SEND_DATAAFTERCALIB:
		myStation.task.sendDATAafterCALIB = ENorDIS;
 8005864:	79bb      	ldrb	r3, [r7, #6]
 8005866:	f003 0301 	and.w	r3, r3, #1
 800586a:	b2d9      	uxtb	r1, r3
 800586c:	4a28      	ldr	r2, [pc, #160]	; (8005910 <triggerTaskflag+0x1dc>)
 800586e:	7c53      	ldrb	r3, [r2, #17]
 8005870:	f361 0382 	bfi	r3, r1, #2, #1
 8005874:	7453      	strb	r3, [r2, #17]
		break;
 8005876:	e045      	b.n	8005904 <triggerTaskflag+0x1d0>
	case TASK_SEND_CTRLMBA:
		myStation.task.sendcmdCtrlMBA = ENorDIS;
 8005878:	79bb      	ldrb	r3, [r7, #6]
 800587a:	f003 0301 	and.w	r3, r3, #1
 800587e:	b2d9      	uxtb	r1, r3
 8005880:	4a23      	ldr	r2, [pc, #140]	; (8005910 <triggerTaskflag+0x1dc>)
 8005882:	7c53      	ldrb	r3, [r2, #17]
 8005884:	f361 03c3 	bfi	r3, r1, #3, #1
 8005888:	7453      	strb	r3, [r2, #17]
		break;
 800588a:	e03b      	b.n	8005904 <triggerTaskflag+0x1d0>
	case TASK_SEND_CTRLSTEPMOR:
		myStation.task.sendcmdCtrlStepmotor = ENorDIS;
 800588c:	79bb      	ldrb	r3, [r7, #6]
 800588e:	f003 0301 	and.w	r3, r3, #1
 8005892:	b2d9      	uxtb	r1, r3
 8005894:	4a1e      	ldr	r2, [pc, #120]	; (8005910 <triggerTaskflag+0x1dc>)
 8005896:	7c53      	ldrb	r3, [r2, #17]
 8005898:	f361 1304 	bfi	r3, r1, #4, #1
 800589c:	7453      	strb	r3, [r2, #17]
		break;
 800589e:	e031      	b.n	8005904 <triggerTaskflag+0x1d0>
	case TASK_SEND_CALIB:
		myStation.task.sendcmdCalib = ENorDIS;
 80058a0:	79bb      	ldrb	r3, [r7, #6]
 80058a2:	f003 0301 	and.w	r3, r3, #1
 80058a6:	b2d9      	uxtb	r1, r3
 80058a8:	4a19      	ldr	r2, [pc, #100]	; (8005910 <triggerTaskflag+0x1dc>)
 80058aa:	7c53      	ldrb	r3, [r2, #17]
 80058ac:	f361 1345 	bfi	r3, r1, #5, #1
 80058b0:	7453      	strb	r3, [r2, #17]
		break;
 80058b2:	e027      	b.n	8005904 <triggerTaskflag+0x1d0>
	case TASK_SEND_GETSTATUS:
		myStation.task.sendcmdGetstatus = ENorDIS;
 80058b4:	79bb      	ldrb	r3, [r7, #6]
 80058b6:	f003 0301 	and.w	r3, r3, #1
 80058ba:	b2d9      	uxtb	r1, r3
 80058bc:	4a14      	ldr	r2, [pc, #80]	; (8005910 <triggerTaskflag+0x1dc>)
 80058be:	7c53      	ldrb	r3, [r2, #17]
 80058c0:	f361 1386 	bfi	r3, r1, #6, #1
 80058c4:	7453      	strb	r3, [r2, #17]
		break;
 80058c6:	e01d      	b.n	8005904 <triggerTaskflag+0x1d0>
	case TASK_SEND_GETSTATION:
		myStation.task.sendcmdGetstation = ENorDIS;
 80058c8:	79bb      	ldrb	r3, [r7, #6]
 80058ca:	f003 0301 	and.w	r3, r3, #1
 80058ce:	b2d9      	uxtb	r1, r3
 80058d0:	4a0f      	ldr	r2, [pc, #60]	; (8005910 <triggerTaskflag+0x1dc>)
 80058d2:	7c53      	ldrb	r3, [r2, #17]
 80058d4:	f361 13c7 	bfi	r3, r1, #7, #1
 80058d8:	7453      	strb	r3, [r2, #17]
		break;
 80058da:	e013      	b.n	8005904 <triggerTaskflag+0x1d0>
	case TASK_SEND_GETSENSOR:
		myStation.task.sendcmdGetsensor = ENorDIS;
 80058dc:	79bb      	ldrb	r3, [r7, #6]
 80058de:	f003 0301 	and.w	r3, r3, #1
 80058e2:	b2d9      	uxtb	r1, r3
 80058e4:	4a0a      	ldr	r2, [pc, #40]	; (8005910 <triggerTaskflag+0x1dc>)
 80058e6:	7c93      	ldrb	r3, [r2, #18]
 80058e8:	f361 0300 	bfi	r3, r1, #0, #1
 80058ec:	7493      	strb	r3, [r2, #18]
		break;
 80058ee:	e009      	b.n	8005904 <triggerTaskflag+0x1d0>
	case TASK_SEND_STEP_LIMIT:
		myStation.task.sendSTEPLIMIT = ENorDIS;
 80058f0:	79bb      	ldrb	r3, [r7, #6]
 80058f2:	f003 0301 	and.w	r3, r3, #1
 80058f6:	b2d9      	uxtb	r1, r3
 80058f8:	4a05      	ldr	r2, [pc, #20]	; (8005910 <triggerTaskflag+0x1dc>)
 80058fa:	7c93      	ldrb	r3, [r2, #18]
 80058fc:	f361 0341 	bfi	r3, r1, #1, #1
 8005900:	7493      	strb	r3, [r2, #18]
	default:
		break;
 8005902:	bf00      	nop
	}
	return ;
 8005904:	bf00      	nop
}
 8005906:	370c      	adds	r7, #12
 8005908:	46bd      	mov	sp, r7
 800590a:	bc80      	pop	{r7}
 800590c:	4770      	bx	lr
 800590e:	bf00      	nop
 8005910:	20000474 	.word	0x20000474

08005914 <validationID>:

#define MAX_SENSOR_ID		0xFE
#define MIN_SENSOR_ID		0x51

bool validationID(uint16_t ID, ID_t idtype)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b084      	sub	sp, #16
 8005918:	af00      	add	r7, sp, #0
 800591a:	4603      	mov	r3, r0
 800591c:	460a      	mov	r2, r1
 800591e:	80fb      	strh	r3, [r7, #6]
 8005920:	4613      	mov	r3, r2
 8005922:	717b      	strb	r3, [r7, #5]
	bool res = false;
 8005924:	2300      	movs	r3, #0
 8005926:	73fb      	strb	r3, [r7, #15]
	switch (idtype)	{
 8005928:	797b      	ldrb	r3, [r7, #5]
 800592a:	2b01      	cmp	r3, #1
 800592c:	d009      	beq.n	8005942 <validationID+0x2e>
 800592e:	2b02      	cmp	r3, #2
 8005930:	d10f      	bne.n	8005952 <validationID+0x3e>
	case ID_SENSOR:
		res = sensorID_validation(ID);
 8005932:	88fb      	ldrh	r3, [r7, #6]
 8005934:	b2db      	uxtb	r3, r3
 8005936:	4618      	mov	r0, r3
 8005938:	f000 f824 	bl	8005984 <sensorID_validation>
 800593c:	4603      	mov	r3, r0
 800593e:	73fb      	strb	r3, [r7, #15]
		break;
 8005940:	e008      	b.n	8005954 <validationID+0x40>
	case ID_STATION:
		res = stationID_validation(ID);
 8005942:	88fb      	ldrh	r3, [r7, #6]
 8005944:	b2db      	uxtb	r3, r3
 8005946:	4618      	mov	r0, r3
 8005948:	f000 f809 	bl	800595e <stationID_validation>
 800594c:	4603      	mov	r3, r0
 800594e:	73fb      	strb	r3, [r7, #15]
		break;
 8005950:	e000      	b.n	8005954 <validationID+0x40>
	default:
		break;
 8005952:	bf00      	nop
	}
	return res;
 8005954:	7bfb      	ldrb	r3, [r7, #15]
}
 8005956:	4618      	mov	r0, r3
 8005958:	3710      	adds	r7, #16
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}

0800595e <stationID_validation>:

bool stationID_validation(uint8_t ID)
{
 800595e:	b480      	push	{r7}
 8005960:	b083      	sub	sp, #12
 8005962:	af00      	add	r7, sp, #0
 8005964:	4603      	mov	r3, r0
 8005966:	71fb      	strb	r3, [r7, #7]
	if (ID >= MIN_STATION_ID && ID <= MAX_STATION_ID)	return true;
 8005968:	79fb      	ldrb	r3, [r7, #7]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d004      	beq.n	8005978 <stationID_validation+0x1a>
 800596e:	79fb      	ldrb	r3, [r7, #7]
 8005970:	2b50      	cmp	r3, #80	; 0x50
 8005972:	d801      	bhi.n	8005978 <stationID_validation+0x1a>
 8005974:	2301      	movs	r3, #1
 8005976:	e000      	b.n	800597a <stationID_validation+0x1c>
	return false;
 8005978:	2300      	movs	r3, #0
}
 800597a:	4618      	mov	r0, r3
 800597c:	370c      	adds	r7, #12
 800597e:	46bd      	mov	sp, r7
 8005980:	bc80      	pop	{r7}
 8005982:	4770      	bx	lr

08005984 <sensorID_validation>:

bool sensorID_validation(uint8_t ID)
{
 8005984:	b480      	push	{r7}
 8005986:	b083      	sub	sp, #12
 8005988:	af00      	add	r7, sp, #0
 800598a:	4603      	mov	r3, r0
 800598c:	71fb      	strb	r3, [r7, #7]
	if (ID >= MIN_SENSOR_ID && ID <= MAX_SENSOR_ID)	return true;
 800598e:	79fb      	ldrb	r3, [r7, #7]
 8005990:	2b50      	cmp	r3, #80	; 0x50
 8005992:	d904      	bls.n	800599e <sensorID_validation+0x1a>
 8005994:	79fb      	ldrb	r3, [r7, #7]
 8005996:	2bff      	cmp	r3, #255	; 0xff
 8005998:	d001      	beq.n	800599e <sensorID_validation+0x1a>
 800599a:	2301      	movs	r3, #1
 800599c:	e000      	b.n	80059a0 <sensorID_validation+0x1c>
	return false;
 800599e:	2300      	movs	r3, #0
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	370c      	adds	r7, #12
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bc80      	pop	{r7}
 80059a8:	4770      	bx	lr
	...

080059ac <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b084      	sub	sp, #16
 80059b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80059b2:	1d3b      	adds	r3, r7, #4
 80059b4:	2200      	movs	r2, #0
 80059b6:	601a      	str	r2, [r3, #0]
 80059b8:	605a      	str	r2, [r3, #4]
 80059ba:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80059bc:	4b18      	ldr	r3, [pc, #96]	; (8005a20 <MX_ADC1_Init+0x74>)
 80059be:	4a19      	ldr	r2, [pc, #100]	; (8005a24 <MX_ADC1_Init+0x78>)
 80059c0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80059c2:	4b17      	ldr	r3, [pc, #92]	; (8005a20 <MX_ADC1_Init+0x74>)
 80059c4:	2200      	movs	r2, #0
 80059c6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80059c8:	4b15      	ldr	r3, [pc, #84]	; (8005a20 <MX_ADC1_Init+0x74>)
 80059ca:	2201      	movs	r2, #1
 80059cc:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80059ce:	4b14      	ldr	r3, [pc, #80]	; (8005a20 <MX_ADC1_Init+0x74>)
 80059d0:	2200      	movs	r2, #0
 80059d2:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80059d4:	4b12      	ldr	r3, [pc, #72]	; (8005a20 <MX_ADC1_Init+0x74>)
 80059d6:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80059da:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80059dc:	4b10      	ldr	r3, [pc, #64]	; (8005a20 <MX_ADC1_Init+0x74>)
 80059de:	2200      	movs	r2, #0
 80059e0:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80059e2:	4b0f      	ldr	r3, [pc, #60]	; (8005a20 <MX_ADC1_Init+0x74>)
 80059e4:	2201      	movs	r2, #1
 80059e6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80059e8:	480d      	ldr	r0, [pc, #52]	; (8005a20 <MX_ADC1_Init+0x74>)
 80059ea:	f002 f9b3 	bl	8007d54 <HAL_ADC_Init>
 80059ee:	4603      	mov	r3, r0
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d001      	beq.n	80059f8 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80059f4:	f000 fcf4 	bl	80063e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80059f8:	2306      	movs	r3, #6
 80059fa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80059fc:	2301      	movs	r3, #1
 80059fe:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8005a00:	2307      	movs	r3, #7
 8005a02:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005a04:	1d3b      	adds	r3, r7, #4
 8005a06:	4619      	mov	r1, r3
 8005a08:	4805      	ldr	r0, [pc, #20]	; (8005a20 <MX_ADC1_Init+0x74>)
 8005a0a:	f002 fc05 	bl	8008218 <HAL_ADC_ConfigChannel>
 8005a0e:	4603      	mov	r3, r0
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d001      	beq.n	8005a18 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8005a14:	f000 fce4 	bl	80063e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8005a18:	bf00      	nop
 8005a1a:	3710      	adds	r7, #16
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd80      	pop	{r7, pc}
 8005a20:	200016e4 	.word	0x200016e4
 8005a24:	40012400 	.word	0x40012400

08005a28 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b088      	sub	sp, #32
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a30:	f107 0310 	add.w	r3, r7, #16
 8005a34:	2200      	movs	r2, #0
 8005a36:	601a      	str	r2, [r3, #0]
 8005a38:	605a      	str	r2, [r3, #4]
 8005a3a:	609a      	str	r2, [r3, #8]
 8005a3c:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4a18      	ldr	r2, [pc, #96]	; (8005aa4 <HAL_ADC_MspInit+0x7c>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d129      	bne.n	8005a9c <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005a48:	4b17      	ldr	r3, [pc, #92]	; (8005aa8 <HAL_ADC_MspInit+0x80>)
 8005a4a:	699b      	ldr	r3, [r3, #24]
 8005a4c:	4a16      	ldr	r2, [pc, #88]	; (8005aa8 <HAL_ADC_MspInit+0x80>)
 8005a4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005a52:	6193      	str	r3, [r2, #24]
 8005a54:	4b14      	ldr	r3, [pc, #80]	; (8005aa8 <HAL_ADC_MspInit+0x80>)
 8005a56:	699b      	ldr	r3, [r3, #24]
 8005a58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a5c:	60fb      	str	r3, [r7, #12]
 8005a5e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005a60:	4b11      	ldr	r3, [pc, #68]	; (8005aa8 <HAL_ADC_MspInit+0x80>)
 8005a62:	699b      	ldr	r3, [r3, #24]
 8005a64:	4a10      	ldr	r2, [pc, #64]	; (8005aa8 <HAL_ADC_MspInit+0x80>)
 8005a66:	f043 0304 	orr.w	r3, r3, #4
 8005a6a:	6193      	str	r3, [r2, #24]
 8005a6c:	4b0e      	ldr	r3, [pc, #56]	; (8005aa8 <HAL_ADC_MspInit+0x80>)
 8005a6e:	699b      	ldr	r3, [r3, #24]
 8005a70:	f003 0304 	and.w	r3, r3, #4
 8005a74:	60bb      	str	r3, [r7, #8]
 8005a76:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8005a78:	2340      	movs	r3, #64	; 0x40
 8005a7a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005a7c:	2303      	movs	r3, #3
 8005a7e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005a80:	f107 0310 	add.w	r3, r7, #16
 8005a84:	4619      	mov	r1, r3
 8005a86:	4809      	ldr	r0, [pc, #36]	; (8005aac <HAL_ADC_MspInit+0x84>)
 8005a88:	f003 f912 	bl	8008cb0 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	2100      	movs	r1, #0
 8005a90:	2012      	movs	r0, #18
 8005a92:	f002 fe34 	bl	80086fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8005a96:	2012      	movs	r0, #18
 8005a98:	f002 fe4d 	bl	8008736 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8005a9c:	bf00      	nop
 8005a9e:	3720      	adds	r7, #32
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}
 8005aa4:	40012400 	.word	0x40012400
 8005aa8:	40021000 	.word	0x40021000
 8005aac:	40010800 	.word	0x40010800

08005ab0 <crc32>:
    0x2d02ef8dL
};

/* crc32 hash */
uint32_t crc32(const char* s, int len)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b085      	sub	sp, #20
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
 8005ab8:	6039      	str	r1, [r7, #0]
    int i;
    uint32_t crc32val = 0;
 8005aba:	2300      	movs	r3, #0
 8005abc:	60bb      	str	r3, [r7, #8]
    crc32val ^= 0xFFFFFFFF;
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	43db      	mvns	r3, r3
 8005ac2:	60bb      	str	r3, [r7, #8]

    for (i = 0;  i < len;  i++) {
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	60fb      	str	r3, [r7, #12]
 8005ac8:	e011      	b.n	8005aee <crc32+0x3e>
        crc32val = crc32_tab[(crc32val ^ s[i]) & 0xFF] ^ ((crc32val >> 8) & 0x00FFFFFF);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	687a      	ldr	r2, [r7, #4]
 8005ace:	4413      	add	r3, r2
 8005ad0:	781b      	ldrb	r3, [r3, #0]
 8005ad2:	461a      	mov	r2, r3
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	4053      	eors	r3, r2
 8005ad8:	b2db      	uxtb	r3, r3
 8005ada:	4a0a      	ldr	r2, [pc, #40]	; (8005b04 <crc32+0x54>)
 8005adc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	0a1b      	lsrs	r3, r3, #8
 8005ae4:	4053      	eors	r3, r2
 8005ae6:	60bb      	str	r3, [r7, #8]
    for (i = 0;  i < len;  i++) {
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	3301      	adds	r3, #1
 8005aec:	60fb      	str	r3, [r7, #12]
 8005aee:	68fa      	ldr	r2, [r7, #12]
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	429a      	cmp	r2, r3
 8005af4:	dbe9      	blt.n	8005aca <crc32+0x1a>
    }

    return crc32val ^ 0xFFFFFFFF;
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	43db      	mvns	r3, r3
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	3714      	adds	r7, #20
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bc80      	pop	{r7}
 8005b02:	4770      	bx	lr
 8005b04:	20000004 	.word	0x20000004

08005b08 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b082      	sub	sp, #8
 8005b0c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005b0e:	4b14      	ldr	r3, [pc, #80]	; (8005b60 <MX_DMA_Init+0x58>)
 8005b10:	695b      	ldr	r3, [r3, #20]
 8005b12:	4a13      	ldr	r2, [pc, #76]	; (8005b60 <MX_DMA_Init+0x58>)
 8005b14:	f043 0301 	orr.w	r3, r3, #1
 8005b18:	6153      	str	r3, [r2, #20]
 8005b1a:	4b11      	ldr	r3, [pc, #68]	; (8005b60 <MX_DMA_Init+0x58>)
 8005b1c:	695b      	ldr	r3, [r3, #20]
 8005b1e:	f003 0301 	and.w	r3, r3, #1
 8005b22:	607b      	str	r3, [r7, #4]
 8005b24:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8005b26:	2200      	movs	r2, #0
 8005b28:	2100      	movs	r1, #0
 8005b2a:	200d      	movs	r0, #13
 8005b2c:	f002 fde7 	bl	80086fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8005b30:	200d      	movs	r0, #13
 8005b32:	f002 fe00 	bl	8008736 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8005b36:	2200      	movs	r2, #0
 8005b38:	2100      	movs	r1, #0
 8005b3a:	200f      	movs	r0, #15
 8005b3c:	f002 fddf 	bl	80086fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8005b40:	200f      	movs	r0, #15
 8005b42:	f002 fdf8 	bl	8008736 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8005b46:	2200      	movs	r2, #0
 8005b48:	2100      	movs	r1, #0
 8005b4a:	2010      	movs	r0, #16
 8005b4c:	f002 fdd7 	bl	80086fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8005b50:	2010      	movs	r0, #16
 8005b52:	f002 fdf0 	bl	8008736 <HAL_NVIC_EnableIRQ>

}
 8005b56:	bf00      	nop
 8005b58:	3708      	adds	r7, #8
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bd80      	pop	{r7, pc}
 8005b5e:	bf00      	nop
 8005b60:	40021000 	.word	0x40021000

08005b64 <Bytes2float>:
    }

}

float Bytes2float(uint8_t * ftoa_bytes_temp)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b087      	sub	sp, #28
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
    union {
      float a;
      uint8_t bytes[4];
    } thing;

    for (uint8_t i = 0; i < 4; i++) {
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	75fb      	strb	r3, [r7, #23]
 8005b70:	e00b      	b.n	8005b8a <Bytes2float+0x26>
    	thing.bytes[i] = ftoa_bytes_temp[i];
 8005b72:	7dfb      	ldrb	r3, [r7, #23]
 8005b74:	687a      	ldr	r2, [r7, #4]
 8005b76:	441a      	add	r2, r3
 8005b78:	7dfb      	ldrb	r3, [r7, #23]
 8005b7a:	7812      	ldrb	r2, [r2, #0]
 8005b7c:	3318      	adds	r3, #24
 8005b7e:	443b      	add	r3, r7
 8005b80:	f803 2c0c 	strb.w	r2, [r3, #-12]
    for (uint8_t i = 0; i < 4; i++) {
 8005b84:	7dfb      	ldrb	r3, [r7, #23]
 8005b86:	3301      	adds	r3, #1
 8005b88:	75fb      	strb	r3, [r7, #23]
 8005b8a:	7dfb      	ldrb	r3, [r7, #23]
 8005b8c:	2b03      	cmp	r3, #3
 8005b8e:	d9f0      	bls.n	8005b72 <Bytes2float+0xe>
    }

   float float_variable =  thing.a;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	613b      	str	r3, [r7, #16]
   return float_variable;
 8005b94:	693b      	ldr	r3, [r7, #16]
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	371c      	adds	r7, #28
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bc80      	pop	{r7}
 8005b9e:	4770      	bx	lr

08005ba0 <Flash_Read_Data>:
	   return 0;
}


void Flash_Read_Data (uint32_t StartPageAddress, uint32_t *RxBuf, uint16_t numberofwords)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b085      	sub	sp, #20
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	60f8      	str	r0, [r7, #12]
 8005ba8:	60b9      	str	r1, [r7, #8]
 8005baa:	4613      	mov	r3, r2
 8005bac:	80fb      	strh	r3, [r7, #6]
	while (1)
	{

		*RxBuf = *(__IO uint32_t *)StartPageAddress;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681a      	ldr	r2, [r3, #0]
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	601a      	str	r2, [r3, #0]
		StartPageAddress += 4;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	3304      	adds	r3, #4
 8005bba:	60fb      	str	r3, [r7, #12]
		RxBuf++;
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	3304      	adds	r3, #4
 8005bc0:	60bb      	str	r3, [r7, #8]
		if (!(numberofwords--)) break;
 8005bc2:	88fb      	ldrh	r3, [r7, #6]
 8005bc4:	1e5a      	subs	r2, r3, #1
 8005bc6:	80fa      	strh	r2, [r7, #6]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d000      	beq.n	8005bce <Flash_Read_Data+0x2e>
		*RxBuf = *(__IO uint32_t *)StartPageAddress;
 8005bcc:	e7ef      	b.n	8005bae <Flash_Read_Data+0xe>
		if (!(numberofwords--)) break;
 8005bce:	bf00      	nop
	}
}
 8005bd0:	bf00      	nop
 8005bd2:	3714      	adds	r7, #20
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bc80      	pop	{r7}
 8005bd8:	4770      	bx	lr

08005bda <Flash_Read_NUM>:
	Flash_Write_Data (StartSectorAddress, (uint32_t *)bytes_temp, 1);
}


float Flash_Read_NUM (uint32_t StartSectorAddress)
{
 8005bda:	b580      	push	{r7, lr}
 8005bdc:	b084      	sub	sp, #16
 8005bde:	af00      	add	r7, sp, #0
 8005be0:	6078      	str	r0, [r7, #4]
	uint8_t buffer[4];
	float value;

	Flash_Read_Data(StartSectorAddress, (uint32_t *)buffer, 1);
 8005be2:	f107 0308 	add.w	r3, r7, #8
 8005be6:	2201      	movs	r2, #1
 8005be8:	4619      	mov	r1, r3
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f7ff ffd8 	bl	8005ba0 <Flash_Read_Data>
	value = Bytes2float(buffer);
 8005bf0:	f107 0308 	add.w	r3, r7, #8
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	f7ff ffb5 	bl	8005b64 <Bytes2float>
 8005bfa:	60f8      	str	r0, [r7, #12]
	return value;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	3710      	adds	r7, #16
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}
	...

08005c08 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b088      	sub	sp, #32
 8005c0c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c0e:	f107 0310 	add.w	r3, r7, #16
 8005c12:	2200      	movs	r2, #0
 8005c14:	601a      	str	r2, [r3, #0]
 8005c16:	605a      	str	r2, [r3, #4]
 8005c18:	609a      	str	r2, [r3, #8]
 8005c1a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005c1c:	4b5e      	ldr	r3, [pc, #376]	; (8005d98 <MX_GPIO_Init+0x190>)
 8005c1e:	699b      	ldr	r3, [r3, #24]
 8005c20:	4a5d      	ldr	r2, [pc, #372]	; (8005d98 <MX_GPIO_Init+0x190>)
 8005c22:	f043 0310 	orr.w	r3, r3, #16
 8005c26:	6193      	str	r3, [r2, #24]
 8005c28:	4b5b      	ldr	r3, [pc, #364]	; (8005d98 <MX_GPIO_Init+0x190>)
 8005c2a:	699b      	ldr	r3, [r3, #24]
 8005c2c:	f003 0310 	and.w	r3, r3, #16
 8005c30:	60fb      	str	r3, [r7, #12]
 8005c32:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005c34:	4b58      	ldr	r3, [pc, #352]	; (8005d98 <MX_GPIO_Init+0x190>)
 8005c36:	699b      	ldr	r3, [r3, #24]
 8005c38:	4a57      	ldr	r2, [pc, #348]	; (8005d98 <MX_GPIO_Init+0x190>)
 8005c3a:	f043 0320 	orr.w	r3, r3, #32
 8005c3e:	6193      	str	r3, [r2, #24]
 8005c40:	4b55      	ldr	r3, [pc, #340]	; (8005d98 <MX_GPIO_Init+0x190>)
 8005c42:	699b      	ldr	r3, [r3, #24]
 8005c44:	f003 0320 	and.w	r3, r3, #32
 8005c48:	60bb      	str	r3, [r7, #8]
 8005c4a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005c4c:	4b52      	ldr	r3, [pc, #328]	; (8005d98 <MX_GPIO_Init+0x190>)
 8005c4e:	699b      	ldr	r3, [r3, #24]
 8005c50:	4a51      	ldr	r2, [pc, #324]	; (8005d98 <MX_GPIO_Init+0x190>)
 8005c52:	f043 0304 	orr.w	r3, r3, #4
 8005c56:	6193      	str	r3, [r2, #24]
 8005c58:	4b4f      	ldr	r3, [pc, #316]	; (8005d98 <MX_GPIO_Init+0x190>)
 8005c5a:	699b      	ldr	r3, [r3, #24]
 8005c5c:	f003 0304 	and.w	r3, r3, #4
 8005c60:	607b      	str	r3, [r7, #4]
 8005c62:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005c64:	4b4c      	ldr	r3, [pc, #304]	; (8005d98 <MX_GPIO_Init+0x190>)
 8005c66:	699b      	ldr	r3, [r3, #24]
 8005c68:	4a4b      	ldr	r2, [pc, #300]	; (8005d98 <MX_GPIO_Init+0x190>)
 8005c6a:	f043 0308 	orr.w	r3, r3, #8
 8005c6e:	6193      	str	r3, [r2, #24]
 8005c70:	4b49      	ldr	r3, [pc, #292]	; (8005d98 <MX_GPIO_Init+0x190>)
 8005c72:	699b      	ldr	r3, [r3, #24]
 8005c74:	f003 0308 	and.w	r3, r3, #8
 8005c78:	603b      	str	r3, [r7, #0]
 8005c7a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_DB7_Pin|LCD_DB6_Pin|LCD_DB5_Pin, GPIO_PIN_RESET);
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8005c82:	4846      	ldr	r0, [pc, #280]	; (8005d9c <MX_GPIO_Init+0x194>)
 8005c84:	f003 f9af 	bl	8008fe6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MBA_CONTACTOR_GPIO_Port, MBA_CONTACTOR_Pin, GPIO_PIN_SET);
 8005c88:	2201      	movs	r2, #1
 8005c8a:	2110      	movs	r1, #16
 8005c8c:	4844      	ldr	r0, [pc, #272]	; (8005da0 <MX_GPIO_Init+0x198>)
 8005c8e:	f003 f9aa 	bl	8008fe6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MOTOR_DIR_Pin|LED_Pin|LCD_RS_Pin|LCD_EN_Pin
 8005c92:	2200      	movs	r2, #0
 8005c94:	f649 4180 	movw	r1, #40064	; 0x9c80
 8005c98:	4841      	ldr	r0, [pc, #260]	; (8005da0 <MX_GPIO_Init+0x198>)
 8005c9a:	f003 f9a4 	bl	8008fe6 <HAL_GPIO_WritePin>
                          |LCD_DB4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOTOR_STEP_Pin|MOTOR_SLEEP_Pin|MOTOR_RST_Pin|MOTOR_EN_Pin, GPIO_PIN_RESET);
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	f243 0103 	movw	r1, #12291	; 0x3003
 8005ca4:	483f      	ldr	r0, [pc, #252]	; (8005da4 <MX_GPIO_Init+0x19c>)
 8005ca6:	f003 f99e 	bl	8008fe6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LCD_DB7_Pin|LCD_DB6_Pin|LCD_DB5_Pin;
 8005caa:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8005cae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005cb8:	2302      	movs	r3, #2
 8005cba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005cbc:	f107 0310 	add.w	r3, r7, #16
 8005cc0:	4619      	mov	r1, r3
 8005cc2:	4836      	ldr	r0, [pc, #216]	; (8005d9c <MX_GPIO_Init+0x194>)
 8005cc4:	f002 fff4 	bl	8008cb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RTC_ALARM_TRIGGER_Pin|BUTTON_DOWN_Pin|BUTTON_UP_Pin;
 8005cc8:	f240 3301 	movw	r3, #769	; 0x301
 8005ccc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8005cce:	4b36      	ldr	r3, [pc, #216]	; (8005da8 <MX_GPIO_Init+0x1a0>)
 8005cd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005cd6:	f107 0310 	add.w	r3, r7, #16
 8005cda:	4619      	mov	r1, r3
 8005cdc:	4830      	ldr	r0, [pc, #192]	; (8005da0 <MX_GPIO_Init+0x198>)
 8005cde:	f002 ffe7 	bl	8008cb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin */
  GPIO_InitStruct.Pin = MBA_CONTACTOR_Pin|MOTOR_DIR_Pin|LED_Pin|LCD_RS_Pin
 8005ce2:	f649 4390 	movw	r3, #40080	; 0x9c90
 8005ce6:	613b      	str	r3, [r7, #16]
                          |LCD_EN_Pin|LCD_DB4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005ce8:	2301      	movs	r3, #1
 8005cea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cec:	2300      	movs	r3, #0
 8005cee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005cf0:	2302      	movs	r3, #2
 8005cf2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005cf4:	f107 0310 	add.w	r3, r7, #16
 8005cf8:	4619      	mov	r1, r3
 8005cfa:	4829      	ldr	r0, [pc, #164]	; (8005da0 <MX_GPIO_Init+0x198>)
 8005cfc:	f002 ffd8 	bl	8008cb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MOTOR_STEP_Pin|MOTOR_SLEEP_Pin|MOTOR_RST_Pin|MOTOR_EN_Pin;
 8005d00:	f243 0303 	movw	r3, #12291	; 0x3003
 8005d04:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005d06:	2301      	movs	r3, #1
 8005d08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005d0e:	2302      	movs	r3, #2
 8005d10:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005d12:	f107 0310 	add.w	r3, r7, #16
 8005d16:	4619      	mov	r1, r3
 8005d18:	4822      	ldr	r0, [pc, #136]	; (8005da4 <MX_GPIO_Init+0x19c>)
 8005d1a:	f002 ffc9 	bl	8008cb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LIMIT_SWITCH_MIN_Pin;
 8005d1e:	2304      	movs	r3, #4
 8005d20:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005d22:	4b22      	ldr	r3, [pc, #136]	; (8005dac <MX_GPIO_Init+0x1a4>)
 8005d24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d26:	2300      	movs	r3, #0
 8005d28:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LIMIT_SWITCH_MIN_GPIO_Port, &GPIO_InitStruct);
 8005d2a:	f107 0310 	add.w	r3, r7, #16
 8005d2e:	4619      	mov	r1, r3
 8005d30:	481c      	ldr	r0, [pc, #112]	; (8005da4 <MX_GPIO_Init+0x19c>)
 8005d32:	f002 ffbd 	bl	8008cb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = BUTTON_MENU_Pin|BUTTON_OK_Pin;
 8005d36:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8005d3a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8005d3c:	4b1a      	ldr	r3, [pc, #104]	; (8005da8 <MX_GPIO_Init+0x1a0>)
 8005d3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d40:	2300      	movs	r3, #0
 8005d42:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005d44:	f107 0310 	add.w	r3, r7, #16
 8005d48:	4619      	mov	r1, r3
 8005d4a:	4816      	ldr	r0, [pc, #88]	; (8005da4 <MX_GPIO_Init+0x19c>)
 8005d4c:	f002 ffb0 	bl	8008cb0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8005d50:	2200      	movs	r2, #0
 8005d52:	2100      	movs	r1, #0
 8005d54:	2006      	movs	r0, #6
 8005d56:	f002 fcd2 	bl	80086fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8005d5a:	2006      	movs	r0, #6
 8005d5c:	f002 fceb 	bl	8008736 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8005d60:	2200      	movs	r2, #0
 8005d62:	2100      	movs	r1, #0
 8005d64:	2008      	movs	r0, #8
 8005d66:	f002 fcca 	bl	80086fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8005d6a:	2008      	movs	r0, #8
 8005d6c:	f002 fce3 	bl	8008736 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8005d70:	2200      	movs	r2, #0
 8005d72:	2100      	movs	r1, #0
 8005d74:	2017      	movs	r0, #23
 8005d76:	f002 fcc2 	bl	80086fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8005d7a:	2017      	movs	r0, #23
 8005d7c:	f002 fcdb 	bl	8008736 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8005d80:	2200      	movs	r2, #0
 8005d82:	2100      	movs	r1, #0
 8005d84:	2028      	movs	r0, #40	; 0x28
 8005d86:	f002 fcba 	bl	80086fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8005d8a:	2028      	movs	r0, #40	; 0x28
 8005d8c:	f002 fcd3 	bl	8008736 <HAL_NVIC_EnableIRQ>

}
 8005d90:	bf00      	nop
 8005d92:	3720      	adds	r7, #32
 8005d94:	46bd      	mov	sp, r7
 8005d96:	bd80      	pop	{r7, pc}
 8005d98:	40021000 	.word	0x40021000
 8005d9c:	40011000 	.word	0x40011000
 8005da0:	40010800 	.word	0x40010800
 8005da4:	40010c00 	.word	0x40010c00
 8005da8:	10210000 	.word	0x10210000
 8005dac:	10110000 	.word	0x10110000

08005db0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8005db4:	4b12      	ldr	r3, [pc, #72]	; (8005e00 <MX_I2C1_Init+0x50>)
 8005db6:	4a13      	ldr	r2, [pc, #76]	; (8005e04 <MX_I2C1_Init+0x54>)
 8005db8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8005dba:	4b11      	ldr	r3, [pc, #68]	; (8005e00 <MX_I2C1_Init+0x50>)
 8005dbc:	4a12      	ldr	r2, [pc, #72]	; (8005e08 <MX_I2C1_Init+0x58>)
 8005dbe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005dc0:	4b0f      	ldr	r3, [pc, #60]	; (8005e00 <MX_I2C1_Init+0x50>)
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8005dc6:	4b0e      	ldr	r3, [pc, #56]	; (8005e00 <MX_I2C1_Init+0x50>)
 8005dc8:	2200      	movs	r2, #0
 8005dca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005dcc:	4b0c      	ldr	r3, [pc, #48]	; (8005e00 <MX_I2C1_Init+0x50>)
 8005dce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005dd2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005dd4:	4b0a      	ldr	r3, [pc, #40]	; (8005e00 <MX_I2C1_Init+0x50>)
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8005dda:	4b09      	ldr	r3, [pc, #36]	; (8005e00 <MX_I2C1_Init+0x50>)
 8005ddc:	2200      	movs	r2, #0
 8005dde:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005de0:	4b07      	ldr	r3, [pc, #28]	; (8005e00 <MX_I2C1_Init+0x50>)
 8005de2:	2200      	movs	r2, #0
 8005de4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005de6:	4b06      	ldr	r3, [pc, #24]	; (8005e00 <MX_I2C1_Init+0x50>)
 8005de8:	2200      	movs	r2, #0
 8005dea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005dec:	4804      	ldr	r0, [pc, #16]	; (8005e00 <MX_I2C1_Init+0x50>)
 8005dee:	f003 f943 	bl	8009078 <HAL_I2C_Init>
 8005df2:	4603      	mov	r3, r0
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d001      	beq.n	8005dfc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8005df8:	f000 faf2 	bl	80063e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8005dfc:	bf00      	nop
 8005dfe:	bd80      	pop	{r7, pc}
 8005e00:	20001714 	.word	0x20001714
 8005e04:	40005400 	.word	0x40005400
 8005e08:	00061a80 	.word	0x00061a80

08005e0c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b08a      	sub	sp, #40	; 0x28
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e14:	f107 0314 	add.w	r3, r7, #20
 8005e18:	2200      	movs	r2, #0
 8005e1a:	601a      	str	r2, [r3, #0]
 8005e1c:	605a      	str	r2, [r3, #4]
 8005e1e:	609a      	str	r2, [r3, #8]
 8005e20:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a1d      	ldr	r2, [pc, #116]	; (8005e9c <HAL_I2C_MspInit+0x90>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d132      	bne.n	8005e92 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005e2c:	4b1c      	ldr	r3, [pc, #112]	; (8005ea0 <HAL_I2C_MspInit+0x94>)
 8005e2e:	699b      	ldr	r3, [r3, #24]
 8005e30:	4a1b      	ldr	r2, [pc, #108]	; (8005ea0 <HAL_I2C_MspInit+0x94>)
 8005e32:	f043 0308 	orr.w	r3, r3, #8
 8005e36:	6193      	str	r3, [r2, #24]
 8005e38:	4b19      	ldr	r3, [pc, #100]	; (8005ea0 <HAL_I2C_MspInit+0x94>)
 8005e3a:	699b      	ldr	r3, [r3, #24]
 8005e3c:	f003 0308 	and.w	r3, r3, #8
 8005e40:	613b      	str	r3, [r7, #16]
 8005e42:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8005e44:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005e48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005e4a:	2312      	movs	r3, #18
 8005e4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005e4e:	2303      	movs	r3, #3
 8005e50:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005e52:	f107 0314 	add.w	r3, r7, #20
 8005e56:	4619      	mov	r1, r3
 8005e58:	4812      	ldr	r0, [pc, #72]	; (8005ea4 <HAL_I2C_MspInit+0x98>)
 8005e5a:	f002 ff29 	bl	8008cb0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8005e5e:	4b12      	ldr	r3, [pc, #72]	; (8005ea8 <HAL_I2C_MspInit+0x9c>)
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	627b      	str	r3, [r7, #36]	; 0x24
 8005e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e66:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8005e6a:	627b      	str	r3, [r7, #36]	; 0x24
 8005e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e6e:	f043 0302 	orr.w	r3, r3, #2
 8005e72:	627b      	str	r3, [r7, #36]	; 0x24
 8005e74:	4a0c      	ldr	r2, [pc, #48]	; (8005ea8 <HAL_I2C_MspInit+0x9c>)
 8005e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e78:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005e7a:	4b09      	ldr	r3, [pc, #36]	; (8005ea0 <HAL_I2C_MspInit+0x94>)
 8005e7c:	69db      	ldr	r3, [r3, #28]
 8005e7e:	4a08      	ldr	r2, [pc, #32]	; (8005ea0 <HAL_I2C_MspInit+0x94>)
 8005e80:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005e84:	61d3      	str	r3, [r2, #28]
 8005e86:	4b06      	ldr	r3, [pc, #24]	; (8005ea0 <HAL_I2C_MspInit+0x94>)
 8005e88:	69db      	ldr	r3, [r3, #28]
 8005e8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005e8e:	60fb      	str	r3, [r7, #12]
 8005e90:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8005e92:	bf00      	nop
 8005e94:	3728      	adds	r7, #40	; 0x28
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}
 8005e9a:	bf00      	nop
 8005e9c:	40005400 	.word	0x40005400
 8005ea0:	40021000 	.word	0x40021000
 8005ea4:	40010c00 	.word	0x40010c00
 8005ea8:	40010000 	.word	0x40010000

08005eac <create_node>:
#include "linkedlist.h"

SensorNode_t SSnode_default = SENSORNODE_T_INIT;

Node* create_node(SensorNode_t  SSnode)
{
 8005eac:	b084      	sub	sp, #16
 8005eae:	b580      	push	{r7, lr}
 8005eb0:	b082      	sub	sp, #8
 8005eb2:	af00      	add	r7, sp, #0
 8005eb4:	f107 0c10 	add.w	ip, r7, #16
 8005eb8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    Node* node = (Node*)malloc(sizeof(Node));
 8005ebc:	2074      	movs	r0, #116	; 0x74
 8005ebe:	f006 f9bb 	bl	800c238 <malloc>
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	607b      	str	r3, [r7, #4]
    node->SSnode= SSnode;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	4618      	mov	r0, r3
 8005eca:	f107 0310 	add.w	r3, r7, #16
 8005ece:	2270      	movs	r2, #112	; 0x70
 8005ed0:	4619      	mov	r1, r3
 8005ed2:	f006 f9d1 	bl	800c278 <memcpy>
    node->next = NULL;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	671a      	str	r2, [r3, #112]	; 0x70
    return node;
 8005edc:	687b      	ldr	r3, [r7, #4]
}
 8005ede:	4618      	mov	r0, r3
 8005ee0:	3708      	adds	r7, #8
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005ee8:	b004      	add	sp, #16
 8005eea:	4770      	bx	lr

08005eec <list_create>:

s_list * list_create(void)
{
 8005eec:	b590      	push	{r4, r7, lr}
 8005eee:	b09b      	sub	sp, #108	; 0x6c
 8005ef0:	af18      	add	r7, sp, #96	; 0x60
    s_list *list = (s_list*)malloc(sizeof(s_list));
 8005ef2:	200c      	movs	r0, #12
 8005ef4:	f006 f9a0 	bl	800c238 <malloc>
 8005ef8:	4603      	mov	r3, r0
 8005efa:	607b      	str	r3, [r7, #4]
//    assert(list != NULL);
    list->head = create_node(SSnode_default);
 8005efc:	4c15      	ldr	r4, [pc, #84]	; (8005f54 <list_create+0x68>)
 8005efe:	4668      	mov	r0, sp
 8005f00:	f104 0310 	add.w	r3, r4, #16
 8005f04:	2260      	movs	r2, #96	; 0x60
 8005f06:	4619      	mov	r1, r3
 8005f08:	f006 f9b6 	bl	800c278 <memcpy>
 8005f0c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8005f10:	f7ff ffcc 	bl	8005eac <create_node>
 8005f14:	4602      	mov	r2, r0
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	601a      	str	r2, [r3, #0]
    list->tail = create_node(SSnode_default);
 8005f1a:	4c0e      	ldr	r4, [pc, #56]	; (8005f54 <list_create+0x68>)
 8005f1c:	4668      	mov	r0, sp
 8005f1e:	f104 0310 	add.w	r3, r4, #16
 8005f22:	2260      	movs	r2, #96	; 0x60
 8005f24:	4619      	mov	r1, r3
 8005f26:	f006 f9a7 	bl	800c278 <memcpy>
 8005f2a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8005f2e:	f7ff ffbd 	bl	8005eac <create_node>
 8005f32:	4602      	mov	r2, r0
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	605a      	str	r2, [r3, #4]
    list->head->next = list->tail;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	687a      	ldr	r2, [r7, #4]
 8005f3e:	6852      	ldr	r2, [r2, #4]
 8005f40:	671a      	str	r2, [r3, #112]	; 0x70
    list->length = 0;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2200      	movs	r2, #0
 8005f46:	609a      	str	r2, [r3, #8]
    return list;
 8005f48:	687b      	ldr	r3, [r7, #4]
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	370c      	adds	r7, #12
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd90      	pop	{r4, r7, pc}
 8005f52:	bf00      	nop
 8005f54:	20000404 	.word	0x20000404

08005f58 <list_append>:

void list_append (s_list* list, SensorNode_t SSnode_data)
{
 8005f58:	b084      	sub	sp, #16
 8005f5a:	b590      	push	{r4, r7, lr}
 8005f5c:	b09d      	sub	sp, #116	; 0x74
 8005f5e:	af18      	add	r7, sp, #96	; 0x60
 8005f60:	6078      	str	r0, [r7, #4]
 8005f62:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005f66:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	list->tail->SSnode = SSnode_data;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	4618      	mov	r0, r3
 8005f70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005f74:	2270      	movs	r2, #112	; 0x70
 8005f76:	4619      	mov	r1, r3
 8005f78:	f006 f97e 	bl	800c278 <memcpy>
	Node *new_tail = create_node(SSnode_default);
 8005f7c:	4c0f      	ldr	r4, [pc, #60]	; (8005fbc <list_append+0x64>)
 8005f7e:	4668      	mov	r0, sp
 8005f80:	f104 0310 	add.w	r3, r4, #16
 8005f84:	2260      	movs	r2, #96	; 0x60
 8005f86:	4619      	mov	r1, r3
 8005f88:	f006 f976 	bl	800c278 <memcpy>
 8005f8c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8005f90:	f7ff ff8c 	bl	8005eac <create_node>
 8005f94:	60f8      	str	r0, [r7, #12]
	list->tail->next = new_tail;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	685b      	ldr	r3, [r3, #4]
 8005f9a:	68fa      	ldr	r2, [r7, #12]
 8005f9c:	671a      	str	r2, [r3, #112]	; 0x70
	list->tail = new_tail;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	68fa      	ldr	r2, [r7, #12]
 8005fa2:	605a      	str	r2, [r3, #4]
	list->length += 1;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	689b      	ldr	r3, [r3, #8]
 8005fa8:	1c5a      	adds	r2, r3, #1
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	609a      	str	r2, [r3, #8]
}
 8005fae:	bf00      	nop
 8005fb0:	3714      	adds	r7, #20
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8005fb8:	b004      	add	sp, #16
 8005fba:	4770      	bx	lr
 8005fbc:	20000404 	.word	0x20000404

08005fc0 <HAL_UARTEx_RxEventCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static void currentConvert(uint32_t volatile *adcval);
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b082      	sub	sp, #8
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
 8005fc8:	460b      	mov	r3, r1
 8005fca:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART1 )
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a0e      	ldr	r2, [pc, #56]	; (800600c <HAL_UARTEx_RxEventCallback+0x4c>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d103      	bne.n	8005fde <HAL_UARTEx_RxEventCallback+0x1e>
	{
		SIM_callback(Size);
 8005fd6:	887b      	ldrh	r3, [r7, #2]
 8005fd8:	4618      	mov	r0, r3
 8005fda:	f7fc fa99 	bl	8002510 <SIM_callback>
	}
	if (huart->Instance== USART2)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a0b      	ldr	r2, [pc, #44]	; (8006010 <HAL_UARTEx_RxEventCallback+0x50>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d103      	bne.n	8005ff0 <HAL_UARTEx_RxEventCallback+0x30>
	{
		Serial_CFG_Callback(Size);
 8005fe8:	887b      	ldrh	r3, [r7, #2]
 8005fea:	4618      	mov	r0, r3
 8005fec:	f7fb f804 	bl	8000ff8 <Serial_CFG_Callback>
	}

	if (huart->Instance == USART3) {
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4a07      	ldr	r2, [pc, #28]	; (8006014 <HAL_UARTEx_RxEventCallback+0x54>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d103      	bne.n	8006002 <HAL_UARTEx_RxEventCallback+0x42>
		Lora_callback(Size);
 8005ffa:	887b      	ldrh	r3, [r7, #2]
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	f7fe fb0f 	bl	8004620 <Lora_callback>
	}
}
 8006002:	bf00      	nop
 8006004:	3708      	adds	r7, #8
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}
 800600a:	bf00      	nop
 800600c:	40013800 	.word	0x40013800
 8006010:	40004400 	.word	0x40004400
 8006014:	40004800 	.word	0x40004800

08006018 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b082      	sub	sp, #8
 800601c:	af00      	add	r7, sp, #0
 800601e:	4603      	mov	r3, r0
 8006020:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == RTC_ALARM_TRIGGER_Pin)	{
 8006022:	88fb      	ldrh	r3, [r7, #6]
 8006024:	2b01      	cmp	r3, #1
 8006026:	d127      	bne.n	8006078 <HAL_GPIO_EXTI_Callback+0x60>
//		alarmflag = 0;

		if(!sync_flag)	{
 8006028:	4b2c      	ldr	r3, [pc, #176]	; (80060dc <HAL_GPIO_EXTI_Callback+0xc4>)
 800602a:	781b      	ldrb	r3, [r3, #0]
 800602c:	b2db      	uxtb	r3, r3
 800602e:	2b00      	cmp	r3, #0
 8006030:	d11c      	bne.n	800606c <HAL_GPIO_EXTI_Callback+0x54>

			// turn OFF MBA
			myStation.MBAstate = switchContactor(MBA_OFF);
 8006032:	2002      	movs	r0, #2
 8006034:	f7fc fa2c 	bl	8002490 <switchContactor>
 8006038:	4603      	mov	r3, r0
 800603a:	461a      	mov	r2, r3
 800603c:	4b28      	ldr	r3, [pc, #160]	; (80060e0 <HAL_GPIO_EXTI_Callback+0xc8>)
 800603e:	719a      	strb	r2, [r3, #6]

			DS3231_ClearAlarm1();
 8006040:	f7fe f996 	bl	8004370 <DS3231_ClearAlarm1>

			// Set Mode Measure for Sensor node
			Lora_Setmode(MEASURE, 0);
 8006044:	2100      	movs	r1, #0
 8006046:	2002      	movs	r0, #2
 8006048:	f7fe fcce 	bl	80049e8 <Lora_Setmode>

			// get time of turn OFF MBA, after 15s turn ON MBA
			turnonMBAtick = HAL_GetTick();
 800604c:	f001 fe54 	bl	8007cf8 <HAL_GetTick>
 8006050:	4603      	mov	r3, r0
 8006052:	4a24      	ldr	r2, [pc, #144]	; (80060e4 <HAL_GPIO_EXTI_Callback+0xcc>)
 8006054:	6013      	str	r3, [r2, #0]
			turnonMBAflag = 1;
 8006056:	4b24      	ldr	r3, [pc, #144]	; (80060e8 <HAL_GPIO_EXTI_Callback+0xd0>)
 8006058:	2201      	movs	r2, #1
 800605a:	701a      	strb	r2, [r3, #0]

			// Trigger task Start calib
			triggerTaskflag(TASK_START_CALIB, FLAG_EN);
 800605c:	2101      	movs	r1, #1
 800605e:	2003      	movs	r0, #3
 8006060:	f7ff fb68 	bl	8005734 <triggerTaskflag>

			displayAfterSwitchoff = 1;
 8006064:	4b21      	ldr	r3, [pc, #132]	; (80060ec <HAL_GPIO_EXTI_Callback+0xd4>)
 8006066:	2201      	movs	r2, #1
 8006068:	701a      	strb	r2, [r3, #0]
 800606a:	e005      	b.n	8006078 <HAL_GPIO_EXTI_Callback+0x60>
		}
		else {
			Lora_Setmode(SLEEP, 0);
 800606c:	2100      	movs	r1, #0
 800606e:	2000      	movs	r0, #0
 8006070:	f7fe fcba 	bl	80049e8 <Lora_Setmode>
			DS3231_ClearAlarm1();
 8006074:	f7fe f97c 	bl	8004370 <DS3231_ClearAlarm1>
		}

	}
	curtick = HAL_GetTick();
 8006078:	f001 fe3e 	bl	8007cf8 <HAL_GetTick>
 800607c:	4603      	mov	r3, r0
 800607e:	4a1c      	ldr	r2, [pc, #112]	; (80060f0 <HAL_GPIO_EXTI_Callback+0xd8>)
 8006080:	6013      	str	r3, [r2, #0]

	if (curtick - pretick > 20)	{
 8006082:	4b1b      	ldr	r3, [pc, #108]	; (80060f0 <HAL_GPIO_EXTI_Callback+0xd8>)
 8006084:	681a      	ldr	r2, [r3, #0]
 8006086:	4b1b      	ldr	r3, [pc, #108]	; (80060f4 <HAL_GPIO_EXTI_Callback+0xdc>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	1ad3      	subs	r3, r2, r3
 800608c:	2b14      	cmp	r3, #20
 800608e:	d920      	bls.n	80060d2 <HAL_GPIO_EXTI_Callback+0xba>
		pretick = curtick;
 8006090:	4b17      	ldr	r3, [pc, #92]	; (80060f0 <HAL_GPIO_EXTI_Callback+0xd8>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4a17      	ldr	r2, [pc, #92]	; (80060f4 <HAL_GPIO_EXTI_Callback+0xdc>)
 8006096:	6013      	str	r3, [r2, #0]

		if (GPIO_Pin == BUTTON_MENU_Pin) {
 8006098:	88fb      	ldrh	r3, [r7, #6]
 800609a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800609e:	d101      	bne.n	80060a4 <HAL_GPIO_EXTI_Callback+0x8c>
			// Button Menu handler
			buttonMENU_handler();
 80060a0:	f7fd fd86 	bl	8003bb0 <buttonMENU_handler>
		}

		if (GPIO_Pin == BUTTON_OK_Pin) {
 80060a4:	88fb      	ldrh	r3, [r7, #6]
 80060a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060aa:	d101      	bne.n	80060b0 <HAL_GPIO_EXTI_Callback+0x98>
			// Button OK handler
			buttonOK_handler();
 80060ac:	f7fd fdf6 	bl	8003c9c <buttonOK_handler>
		}

		if (GPIO_Pin == BUTTON_UP_Pin) {
 80060b0:	88fb      	ldrh	r3, [r7, #6]
 80060b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060b6:	d101      	bne.n	80060bc <HAL_GPIO_EXTI_Callback+0xa4>
			// Button UP handler
			buttonUP_handler();
 80060b8:	f7fd fef8 	bl	8003eac <buttonUP_handler>
		}

		if (GPIO_Pin == BUTTON_DOWN_Pin) {
 80060bc:	88fb      	ldrh	r3, [r7, #6]
 80060be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060c2:	d101      	bne.n	80060c8 <HAL_GPIO_EXTI_Callback+0xb0>
			// Button DOWN handler
			buttonDOWN_handler();
 80060c4:	f7fd fe7a 	bl	8003dbc <buttonDOWN_handler>
//		if (GPIO_Pin == LIMIT_SWITCH_MAX_Pin) {
//			// Button Limit MAX handler
//			SW_LIMIT_MAX_handler();
//		}

		if (GPIO_Pin == LIMIT_SWITCH_MIN_Pin) {
 80060c8:	88fb      	ldrh	r3, [r7, #6]
 80060ca:	2b04      	cmp	r3, #4
 80060cc:	d101      	bne.n	80060d2 <HAL_GPIO_EXTI_Callback+0xba>
			// Button Limit MIN handler
			SW_LIMIT_MIN_handler();
 80060ce:	f7fd ff61 	bl	8003f94 <SW_LIMIT_MIN_handler>
		}
	}
}
 80060d2:	bf00      	nop
 80060d4:	3708      	adds	r7, #8
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}
 80060da:	bf00      	nop
 80060dc:	200029e4 	.word	0x200029e4
 80060e0:	20000474 	.word	0x20000474
 80060e4:	200029f8 	.word	0x200029f8
 80060e8:	200029fc 	.word	0x200029fc
 80060ec:	200005c6 	.word	0x200005c6
 80060f0:	200029f0 	.word	0x200029f0
 80060f4:	200029f4 	.word	0x200029f4

080060f8 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b082      	sub	sp, #8
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == hadc1.Instance)	{
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681a      	ldr	r2, [r3, #0]
 8006104:	4b0d      	ldr	r3, [pc, #52]	; (800613c <HAL_ADC_ConvCpltCallback+0x44>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	429a      	cmp	r2, r3
 800610a:	d112      	bne.n	8006132 <HAL_ADC_ConvCpltCallback+0x3a>
		tmpadc += HAL_ADC_GetValue(hadc);
 800610c:	6878      	ldr	r0, [r7, #4]
 800610e:	f001 ffaf 	bl	8008070 <HAL_ADC_GetValue>
 8006112:	4602      	mov	r2, r0
 8006114:	4b0a      	ldr	r3, [pc, #40]	; (8006140 <HAL_ADC_ConvCpltCallback+0x48>)
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4413      	add	r3, r2
 800611a:	4a09      	ldr	r2, [pc, #36]	; (8006140 <HAL_ADC_ConvCpltCallback+0x48>)
 800611c:	6013      	str	r3, [r2, #0]
		adccount++;
 800611e:	4b09      	ldr	r3, [pc, #36]	; (8006144 <HAL_ADC_ConvCpltCallback+0x4c>)
 8006120:	881b      	ldrh	r3, [r3, #0]
 8006122:	b29b      	uxth	r3, r3
 8006124:	3301      	adds	r3, #1
 8006126:	b29a      	uxth	r2, r3
 8006128:	4b06      	ldr	r3, [pc, #24]	; (8006144 <HAL_ADC_ConvCpltCallback+0x4c>)
 800612a:	801a      	strh	r2, [r3, #0]
		currentConvert(&tmpadc);
 800612c:	4804      	ldr	r0, [pc, #16]	; (8006140 <HAL_ADC_ConvCpltCallback+0x48>)
 800612e:	f000 f925 	bl	800637c <currentConvert>
	}
}
 8006132:	bf00      	nop
 8006134:	3708      	adds	r7, #8
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}
 800613a:	bf00      	nop
 800613c:	200016e4 	.word	0x200016e4
 8006140:	200029e8 	.word	0x200029e8
 8006144:	200029ec 	.word	0x200029ec

08006148 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800614c:	f001 fd7c 	bl	8007c48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006150:	f000 f8b8 	bl	80062c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006154:	f7ff fd58 	bl	8005c08 <MX_GPIO_Init>
  MX_DMA_Init();
 8006158:	f7ff fcd6 	bl	8005b08 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800615c:	f000 fb40 	bl	80067e0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8006160:	f000 fb68 	bl	8006834 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8006164:	f7ff fe24 	bl	8005db0 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8006168:	f000 fb8e 	bl	8006888 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 800616c:	f000 faca 	bl	8006704 <MX_TIM1_Init>
  MX_ADC1_Init();
 8006170:	f7ff fc1c 	bl	80059ac <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  SSnode_list =list_create();
 8006174:	f7ff feba 	bl	8005eec <list_create>
 8006178:	4603      	mov	r3, r0
 800617a:	4a42      	ldr	r2, [pc, #264]	; (8006284 <main+0x13c>)
 800617c:	6013      	str	r3, [r2, #0]

  myStation.ssNode_list = SSnode_list;
 800617e:	4b41      	ldr	r3, [pc, #260]	; (8006284 <main+0x13c>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4a41      	ldr	r2, [pc, #260]	; (8006288 <main+0x140>)
 8006184:	60d3      	str	r3, [r2, #12]

  // Get station ID from flash
//  Flash_Write_NUM(FLASH_PAGE_127, 0x04);
  myStation.stID = (uint8_t)Flash_Read_NUM(FLASH_PAGE_127);
 8006186:	4841      	ldr	r0, [pc, #260]	; (800628c <main+0x144>)
 8006188:	f7ff fd27 	bl	8005bda <Flash_Read_NUM>
 800618c:	4603      	mov	r3, r0
 800618e:	4618      	mov	r0, r3
 8006190:	f7f9 ffee 	bl	8000170 <__aeabi_f2uiz>
 8006194:	4603      	mov	r3, r0
 8006196:	b2da      	uxtb	r2, r3
 8006198:	4b3b      	ldr	r3, [pc, #236]	; (8006288 <main+0x140>)
 800619a:	705a      	strb	r2, [r3, #1]

  /********************Configure MQTT********************************/
	mySIM.mqttServer.host = "tcp://broker.hivemq.com";
 800619c:	4b3c      	ldr	r3, [pc, #240]	; (8006290 <main+0x148>)
 800619e:	4a3d      	ldr	r2, [pc, #244]	; (8006294 <main+0x14c>)
 80061a0:	601a      	str	r2, [r3, #0]
	mySIM.mqttServer.port = 1883;
 80061a2:	4b3b      	ldr	r3, [pc, #236]	; (8006290 <main+0x148>)
 80061a4:	f240 725b 	movw	r2, #1883	; 0x75b
 80061a8:	819a      	strh	r2, [r3, #12]
	mySIM.mqttServer.willtopic = "unnormal_disconnect";
 80061aa:	4b39      	ldr	r3, [pc, #228]	; (8006290 <main+0x148>)
 80061ac:	4a3a      	ldr	r2, [pc, #232]	; (8006298 <main+0x150>)
 80061ae:	605a      	str	r2, [r3, #4]
	mySIM.mqttServer.willmsg = (uint8_t*)malloc(sizeof(myStation.stID));
 80061b0:	2001      	movs	r0, #1
 80061b2:	f006 f841 	bl	800c238 <malloc>
 80061b6:	4603      	mov	r3, r0
 80061b8:	461a      	mov	r2, r3
 80061ba:	4b35      	ldr	r3, [pc, #212]	; (8006290 <main+0x148>)
 80061bc:	609a      	str	r2, [r3, #8]
	sprintf((char*)mySIM.mqttServer.willmsg,"%d",myStation.stID);
 80061be:	4b34      	ldr	r3, [pc, #208]	; (8006290 <main+0x148>)
 80061c0:	689b      	ldr	r3, [r3, #8]
 80061c2:	4a31      	ldr	r2, [pc, #196]	; (8006288 <main+0x140>)
 80061c4:	7852      	ldrb	r2, [r2, #1]
 80061c6:	4935      	ldr	r1, [pc, #212]	; (800629c <main+0x154>)
 80061c8:	4618      	mov	r0, r3
 80061ca:	f006 fbc9 	bl	800c960 <siprintf>
	mySIM.mqttClient.keepAliveInterval = 180;
 80061ce:	4b30      	ldr	r3, [pc, #192]	; (8006290 <main+0x148>)
 80061d0:	22b4      	movs	r2, #180	; 0xb4
 80061d2:	839a      	strh	r2, [r3, #28]
	sprintf(mySIM.mqttClient.clientID,"bsrclient%d",myStation.stID);
 80061d4:	4b2c      	ldr	r3, [pc, #176]	; (8006288 <main+0x140>)
 80061d6:	785b      	ldrb	r3, [r3, #1]
 80061d8:	461a      	mov	r2, r3
 80061da:	4931      	ldr	r1, [pc, #196]	; (80062a0 <main+0x158>)
 80061dc:	4831      	ldr	r0, [pc, #196]	; (80062a4 <main+0x15c>)
 80061de:	f006 fbbf 	bl	800c960 <siprintf>
	mySIM.mqttReceive.qos =1;
 80061e2:	4b2b      	ldr	r3, [pc, #172]	; (8006290 <main+0x148>)
 80061e4:	2201      	movs	r2, #1
 80061e6:	625a      	str	r2, [r3, #36]	; 0x24
	mySIM.mqttServer.connect=0;
 80061e8:	4b29      	ldr	r3, [pc, #164]	; (8006290 <main+0x148>)
 80061ea:	2200      	movs	r2, #0
 80061ec:	739a      	strb	r2, [r3, #14]

	mySIM.sms = mySMS;
 80061ee:	4b28      	ldr	r3, [pc, #160]	; (8006290 <main+0x148>)
 80061f0:	4a2d      	ldr	r2, [pc, #180]	; (80062a8 <main+0x160>)
 80061f2:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80061f6:	4611      	mov	r1, r2
 80061f8:	f44f 6209 	mov.w	r2, #2192	; 0x890
 80061fc:	4618      	mov	r0, r3
 80061fe:	f006 f83b 	bl	800c278 <memcpy>

	// ADC
	HAL_ADC_Start_IT(&hadc1);
 8006202:	482a      	ldr	r0, [pc, #168]	; (80062ac <main+0x164>)
 8006204:	f001 fe7e 	bl	8007f04 <HAL_ADC_Start_IT>

	initTask();
 8006208:	f7ff f98b 	bl	8005522 <initTask>

	// MBA and Step motor
	initApp_MBA_stepmor();
 800620c:	f7fa fac2 	bl	8000794 <initApp_MBA_stepmor>
	// Lora
	initLora();
 8006210:	f7fe f9e8 	bl	80045e4 <initLora>

	// GPS
	initSerial_CFG();
 8006214:	f7fa fec3 	bl	8000f9e <initSerial_CFG>
	initGPS(&myRTC);
 8006218:	4825      	ldr	r0, [pc, #148]	; (80062b0 <main+0x168>)
 800621a:	f7fa fec7 	bl	8000fac <initGPS>

	initSIM();
 800621e:	f7fc f959 	bl	80024d4 <initSIM>

	// Init MQTT app
	initApp_MQTT();
 8006222:	f7fa fb7d 	bl	8000920 <initApp_MQTT>


	initApp_SMS(&mySIM.sms);
 8006226:	4823      	ldr	r0, [pc, #140]	; (80062b4 <main+0x16c>)
 8006228:	f7fa fdba 	bl	8000da0 <initApp_SMS>

//	init_App_Serial();

	// Init RTC module (DS3231)
	DS3231_Init(&hi2c1);
 800622c:	4822      	ldr	r0, [pc, #136]	; (80062b8 <main+0x170>)
 800622e:	f7fd fec1 	bl	8003fb4 <DS3231_Init>

	initApp_Display();
 8006232:	f7fa f979 	bl	8000528 <initApp_Display>
//			Lora_Setmode(MEASURE,1);
//		}

//	  testLora_receive();
	  // Turn on MBA after calib 15s
	  if (turnonMBAflag)	{
 8006236:	4b21      	ldr	r3, [pc, #132]	; (80062bc <main+0x174>)
 8006238:	781b      	ldrb	r3, [r3, #0]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d013      	beq.n	8006266 <main+0x11e>
		  if (HAL_GetTick() - turnonMBAtick >= 15000)	{
 800623e:	f001 fd5b 	bl	8007cf8 <HAL_GetTick>
 8006242:	4602      	mov	r2, r0
 8006244:	4b1e      	ldr	r3, [pc, #120]	; (80062c0 <main+0x178>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	1ad3      	subs	r3, r2, r3
 800624a:	f643 2297 	movw	r2, #14999	; 0x3a97
 800624e:	4293      	cmp	r3, r2
 8006250:	d909      	bls.n	8006266 <main+0x11e>
			  myStation.MBAstate = switchContactor(MBA_ON);
 8006252:	2001      	movs	r0, #1
 8006254:	f7fc f91c 	bl	8002490 <switchContactor>
 8006258:	4603      	mov	r3, r0
 800625a:	461a      	mov	r2, r3
 800625c:	4b0a      	ldr	r3, [pc, #40]	; (8006288 <main+0x140>)
 800625e:	719a      	strb	r2, [r3, #6]
			  turnonMBAflag = 0;
 8006260:	4b16      	ldr	r3, [pc, #88]	; (80062bc <main+0x174>)
 8006262:	2200      	movs	r2, #0
 8006264:	701a      	strb	r2, [r3, #0]
		  }
	  }
	  processApp_MCU();
 8006266:	f7fa fae1 	bl	800082c <processApp_MCU>
	  processingApp_display();
 800626a:	f7fa f9c1 	bl	80005f0 <processingApp_display>
	  processApp_MQTT();
 800626e:	f7fa fbf9 	bl	8000a64 <processApp_MQTT>
	  processingApp_MBA_stepmor();
 8006272:	f7fa fa95 	bl	80007a0 <processingApp_MBA_stepmor>
	  processApp_SMS();
 8006276:	f7fa fe03 	bl	8000e80 <processApp_SMS>

//	  testSynchronize();

	  HAL_Delay(50);
 800627a:	2032      	movs	r0, #50	; 0x32
 800627c:	f001 fd46 	bl	8007d0c <HAL_Delay>
	  if (turnonMBAflag)	{
 8006280:	e7d9      	b.n	8006236 <main+0xee>
 8006282:	bf00      	nop
 8006284:	200029e0 	.word	0x200029e0
 8006288:	20000474 	.word	0x20000474
 800628c:	0801fc00 	.word	0x0801fc00
 8006290:	20001768 	.word	0x20001768
 8006294:	0800f290 	.word	0x0800f290
 8006298:	0800f2a8 	.word	0x0800f2a8
 800629c:	0800f2bc 	.word	0x0800f2bc
 80062a0:	0800f2c0 	.word	0x0800f2c0
 80062a4:	20001778 	.word	0x20001778
 80062a8:	20002150 	.word	0x20002150
 80062ac:	200016e4 	.word	0x200016e4
 80062b0:	20001370 	.word	0x20001370
 80062b4:	200018c0 	.word	0x200018c0
 80062b8:	20001714 	.word	0x20001714
 80062bc:	200029fc 	.word	0x200029fc
 80062c0:	200029f8 	.word	0x200029f8

080062c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b094      	sub	sp, #80	; 0x50
 80062c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80062ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80062ce:	2228      	movs	r2, #40	; 0x28
 80062d0:	2100      	movs	r1, #0
 80062d2:	4618      	mov	r0, r3
 80062d4:	f005 ffde 	bl	800c294 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80062d8:	f107 0314 	add.w	r3, r7, #20
 80062dc:	2200      	movs	r2, #0
 80062de:	601a      	str	r2, [r3, #0]
 80062e0:	605a      	str	r2, [r3, #4]
 80062e2:	609a      	str	r2, [r3, #8]
 80062e4:	60da      	str	r2, [r3, #12]
 80062e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80062e8:	1d3b      	adds	r3, r7, #4
 80062ea:	2200      	movs	r2, #0
 80062ec:	601a      	str	r2, [r3, #0]
 80062ee:	605a      	str	r2, [r3, #4]
 80062f0:	609a      	str	r2, [r3, #8]
 80062f2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80062f4:	2301      	movs	r3, #1
 80062f6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80062f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80062fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80062fe:	2300      	movs	r3, #0
 8006300:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006302:	2301      	movs	r3, #1
 8006304:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006306:	2302      	movs	r3, #2
 8006308:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800630a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800630e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8006310:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8006314:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006316:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800631a:	4618      	mov	r0, r3
 800631c:	f003 fee0 	bl	800a0e0 <HAL_RCC_OscConfig>
 8006320:	4603      	mov	r3, r0
 8006322:	2b00      	cmp	r3, #0
 8006324:	d001      	beq.n	800632a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8006326:	f000 f85b 	bl	80063e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800632a:	230f      	movs	r3, #15
 800632c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800632e:	2302      	movs	r3, #2
 8006330:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006332:	2300      	movs	r3, #0
 8006334:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8006336:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800633a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800633c:	2300      	movs	r3, #0
 800633e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8006340:	f107 0314 	add.w	r3, r7, #20
 8006344:	2102      	movs	r1, #2
 8006346:	4618      	mov	r0, r3
 8006348:	f004 f94c 	bl	800a5e4 <HAL_RCC_ClockConfig>
 800634c:	4603      	mov	r3, r0
 800634e:	2b00      	cmp	r3, #0
 8006350:	d001      	beq.n	8006356 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8006352:	f000 f845 	bl	80063e0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8006356:	2302      	movs	r3, #2
 8006358:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800635a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800635e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006360:	1d3b      	adds	r3, r7, #4
 8006362:	4618      	mov	r0, r3
 8006364:	f004 facc 	bl	800a900 <HAL_RCCEx_PeriphCLKConfig>
 8006368:	4603      	mov	r3, r0
 800636a:	2b00      	cmp	r3, #0
 800636c:	d001      	beq.n	8006372 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800636e:	f000 f837 	bl	80063e0 <Error_Handler>
  }
}
 8006372:	bf00      	nop
 8006374:	3750      	adds	r7, #80	; 0x50
 8006376:	46bd      	mov	sp, r7
 8006378:	bd80      	pop	{r7, pc}
	...

0800637c <currentConvert>:

/* USER CODE BEGIN 4 */

static void currentConvert(uint32_t volatile *adcval)
{
 800637c:	b480      	push	{r7}
 800637e:	b083      	sub	sp, #12
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
	if (adccount == 1000)	{
 8006384:	4b12      	ldr	r3, [pc, #72]	; (80063d0 <currentConvert+0x54>)
 8006386:	881b      	ldrh	r3, [r3, #0]
 8006388:	b29b      	uxth	r3, r3
 800638a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800638e:	d119      	bne.n	80063c4 <currentConvert+0x48>
		myStation.stCurrent = (uint16_t)( ( ( (*adcval)*3/4095) + 50)/6);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681a      	ldr	r2, [r3, #0]
 8006394:	4613      	mov	r3, r2
 8006396:	005b      	lsls	r3, r3, #1
 8006398:	441a      	add	r2, r3
 800639a:	4b0e      	ldr	r3, [pc, #56]	; (80063d4 <currentConvert+0x58>)
 800639c:	fba3 1302 	umull	r1, r3, r3, r2
 80063a0:	1ad2      	subs	r2, r2, r3
 80063a2:	0852      	lsrs	r2, r2, #1
 80063a4:	4413      	add	r3, r2
 80063a6:	0adb      	lsrs	r3, r3, #11
 80063a8:	3332      	adds	r3, #50	; 0x32
 80063aa:	4a0b      	ldr	r2, [pc, #44]	; (80063d8 <currentConvert+0x5c>)
 80063ac:	fba2 2303 	umull	r2, r3, r2, r3
 80063b0:	089b      	lsrs	r3, r3, #2
 80063b2:	b29a      	uxth	r2, r3
 80063b4:	4b09      	ldr	r3, [pc, #36]	; (80063dc <currentConvert+0x60>)
 80063b6:	805a      	strh	r2, [r3, #2]
		*adcval = 0;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2200      	movs	r2, #0
 80063bc:	601a      	str	r2, [r3, #0]
		adccount = 0;
 80063be:	4b04      	ldr	r3, [pc, #16]	; (80063d0 <currentConvert+0x54>)
 80063c0:	2200      	movs	r2, #0
 80063c2:	801a      	strh	r2, [r3, #0]
	}
}
 80063c4:	bf00      	nop
 80063c6:	370c      	adds	r7, #12
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bc80      	pop	{r7}
 80063cc:	4770      	bx	lr
 80063ce:	bf00      	nop
 80063d0:	200029ec 	.word	0x200029ec
 80063d4:	00100101 	.word	0x00100101
 80063d8:	aaaaaaab 	.word	0xaaaaaaab
 80063dc:	20000474 	.word	0x20000474

080063e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80063e0:	b480      	push	{r7}
 80063e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80063e4:	b672      	cpsid	i
}
 80063e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80063e8:	e7fe      	b.n	80063e8 <Error_Handler+0x8>
	...

080063ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80063ec:	b480      	push	{r7}
 80063ee:	b085      	sub	sp, #20
 80063f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80063f2:	4b15      	ldr	r3, [pc, #84]	; (8006448 <HAL_MspInit+0x5c>)
 80063f4:	699b      	ldr	r3, [r3, #24]
 80063f6:	4a14      	ldr	r2, [pc, #80]	; (8006448 <HAL_MspInit+0x5c>)
 80063f8:	f043 0301 	orr.w	r3, r3, #1
 80063fc:	6193      	str	r3, [r2, #24]
 80063fe:	4b12      	ldr	r3, [pc, #72]	; (8006448 <HAL_MspInit+0x5c>)
 8006400:	699b      	ldr	r3, [r3, #24]
 8006402:	f003 0301 	and.w	r3, r3, #1
 8006406:	60bb      	str	r3, [r7, #8]
 8006408:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800640a:	4b0f      	ldr	r3, [pc, #60]	; (8006448 <HAL_MspInit+0x5c>)
 800640c:	69db      	ldr	r3, [r3, #28]
 800640e:	4a0e      	ldr	r2, [pc, #56]	; (8006448 <HAL_MspInit+0x5c>)
 8006410:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006414:	61d3      	str	r3, [r2, #28]
 8006416:	4b0c      	ldr	r3, [pc, #48]	; (8006448 <HAL_MspInit+0x5c>)
 8006418:	69db      	ldr	r3, [r3, #28]
 800641a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800641e:	607b      	str	r3, [r7, #4]
 8006420:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8006422:	4b0a      	ldr	r3, [pc, #40]	; (800644c <HAL_MspInit+0x60>)
 8006424:	685b      	ldr	r3, [r3, #4]
 8006426:	60fb      	str	r3, [r7, #12]
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800642e:	60fb      	str	r3, [r7, #12]
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006436:	60fb      	str	r3, [r7, #12]
 8006438:	4a04      	ldr	r2, [pc, #16]	; (800644c <HAL_MspInit+0x60>)
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800643e:	bf00      	nop
 8006440:	3714      	adds	r7, #20
 8006442:	46bd      	mov	sp, r7
 8006444:	bc80      	pop	{r7}
 8006446:	4770      	bx	lr
 8006448:	40021000 	.word	0x40021000
 800644c:	40010000 	.word	0x40010000

08006450 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006450:	b480      	push	{r7}
 8006452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006454:	e7fe      	b.n	8006454 <NMI_Handler+0x4>

08006456 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006456:	b480      	push	{r7}
 8006458:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800645a:	e7fe      	b.n	800645a <HardFault_Handler+0x4>

0800645c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800645c:	b480      	push	{r7}
 800645e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006460:	e7fe      	b.n	8006460 <MemManage_Handler+0x4>

08006462 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006462:	b480      	push	{r7}
 8006464:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006466:	e7fe      	b.n	8006466 <BusFault_Handler+0x4>

08006468 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006468:	b480      	push	{r7}
 800646a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800646c:	e7fe      	b.n	800646c <UsageFault_Handler+0x4>

0800646e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800646e:	b480      	push	{r7}
 8006470:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006472:	bf00      	nop
 8006474:	46bd      	mov	sp, r7
 8006476:	bc80      	pop	{r7}
 8006478:	4770      	bx	lr

0800647a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800647a:	b480      	push	{r7}
 800647c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800647e:	bf00      	nop
 8006480:	46bd      	mov	sp, r7
 8006482:	bc80      	pop	{r7}
 8006484:	4770      	bx	lr

08006486 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006486:	b480      	push	{r7}
 8006488:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800648a:	bf00      	nop
 800648c:	46bd      	mov	sp, r7
 800648e:	bc80      	pop	{r7}
 8006490:	4770      	bx	lr

08006492 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006492:	b580      	push	{r7, lr}
 8006494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006496:	f001 fc1d 	bl	8007cd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800649a:	bf00      	nop
 800649c:	bd80      	pop	{r7, pc}

0800649e <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800649e:	b580      	push	{r7, lr}
 80064a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RTC_ALARM_TRIGGER_Pin);
 80064a2:	2001      	movs	r0, #1
 80064a4:	f002 fdd0 	bl	8009048 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80064a8:	bf00      	nop
 80064aa:	bd80      	pop	{r7, pc}

080064ac <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LIMIT_SWITCH_MIN_Pin);
 80064b0:	2004      	movs	r0, #4
 80064b2:	f002 fdc9 	bl	8009048 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80064b6:	bf00      	nop
 80064b8:	bd80      	pop	{r7, pc}
	...

080064bc <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80064c0:	4802      	ldr	r0, [pc, #8]	; (80064cc <DMA1_Channel3_IRQHandler+0x10>)
 80064c2:	f002 fac1 	bl	8008a48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80064c6:	bf00      	nop
 80064c8:	bd80      	pop	{r7, pc}
 80064ca:	bf00      	nop
 80064cc:	20002bb0 	.word	0x20002bb0

080064d0 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80064d4:	4802      	ldr	r0, [pc, #8]	; (80064e0 <DMA1_Channel5_IRQHandler+0x10>)
 80064d6:	f002 fab7 	bl	8008a48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80064da:	bf00      	nop
 80064dc:	bd80      	pop	{r7, pc}
 80064de:	bf00      	nop
 80064e0:	20002b28 	.word	0x20002b28

080064e4 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80064e8:	4802      	ldr	r0, [pc, #8]	; (80064f4 <DMA1_Channel6_IRQHandler+0x10>)
 80064ea:	f002 faad 	bl	8008a48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80064ee:	bf00      	nop
 80064f0:	bd80      	pop	{r7, pc}
 80064f2:	bf00      	nop
 80064f4:	20002b6c 	.word	0x20002b6c

080064f8 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80064fc:	4802      	ldr	r0, [pc, #8]	; (8006508 <ADC1_2_IRQHandler+0x10>)
 80064fe:	f001 fdc3 	bl	8008088 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8006502:	bf00      	nop
 8006504:	bd80      	pop	{r7, pc}
 8006506:	bf00      	nop
 8006508:	200016e4 	.word	0x200016e4

0800650c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_DOWN_Pin);
 8006510:	f44f 7080 	mov.w	r0, #256	; 0x100
 8006514:	f002 fd98 	bl	8009048 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_UP_Pin);
 8006518:	f44f 7000 	mov.w	r0, #512	; 0x200
 800651c:	f002 fd94 	bl	8009048 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8006520:	bf00      	nop
 8006522:	bd80      	pop	{r7, pc}

08006524 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8006528:	4802      	ldr	r0, [pc, #8]	; (8006534 <USART1_IRQHandler+0x10>)
 800652a:	f004 fe3b 	bl	800b1a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800652e:	bf00      	nop
 8006530:	bd80      	pop	{r7, pc}
 8006532:	bf00      	nop
 8006534:	20002a50 	.word	0x20002a50

08006538 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800653c:	4802      	ldr	r0, [pc, #8]	; (8006548 <USART2_IRQHandler+0x10>)
 800653e:	f004 fe31 	bl	800b1a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8006542:	bf00      	nop
 8006544:	bd80      	pop	{r7, pc}
 8006546:	bf00      	nop
 8006548:	20002a98 	.word	0x20002a98

0800654c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8006550:	4802      	ldr	r0, [pc, #8]	; (800655c <USART3_IRQHandler+0x10>)
 8006552:	f004 fe27 	bl	800b1a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8006556:	bf00      	nop
 8006558:	bd80      	pop	{r7, pc}
 800655a:	bf00      	nop
 800655c:	20002ae0 	.word	0x20002ae0

08006560 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_MENU_Pin);
 8006564:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8006568:	f002 fd6e 	bl	8009048 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_OK_Pin);
 800656c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8006570:	f002 fd6a 	bl	8009048 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8006574:	bf00      	nop
 8006576:	bd80      	pop	{r7, pc}

08006578 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006578:	b480      	push	{r7}
 800657a:	af00      	add	r7, sp, #0
	return 1;
 800657c:	2301      	movs	r3, #1
}
 800657e:	4618      	mov	r0, r3
 8006580:	46bd      	mov	sp, r7
 8006582:	bc80      	pop	{r7}
 8006584:	4770      	bx	lr

08006586 <_kill>:

int _kill(int pid, int sig)
{
 8006586:	b580      	push	{r7, lr}
 8006588:	b082      	sub	sp, #8
 800658a:	af00      	add	r7, sp, #0
 800658c:	6078      	str	r0, [r7, #4]
 800658e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8006590:	f005 fd18 	bl	800bfc4 <__errno>
 8006594:	4603      	mov	r3, r0
 8006596:	2216      	movs	r2, #22
 8006598:	601a      	str	r2, [r3, #0]
	return -1;
 800659a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800659e:	4618      	mov	r0, r3
 80065a0:	3708      	adds	r7, #8
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd80      	pop	{r7, pc}

080065a6 <_exit>:

void _exit (int status)
{
 80065a6:	b580      	push	{r7, lr}
 80065a8:	b082      	sub	sp, #8
 80065aa:	af00      	add	r7, sp, #0
 80065ac:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80065ae:	f04f 31ff 	mov.w	r1, #4294967295
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f7ff ffe7 	bl	8006586 <_kill>
	while (1) {}		/* Make sure we hang here */
 80065b8:	e7fe      	b.n	80065b8 <_exit+0x12>

080065ba <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80065ba:	b580      	push	{r7, lr}
 80065bc:	b086      	sub	sp, #24
 80065be:	af00      	add	r7, sp, #0
 80065c0:	60f8      	str	r0, [r7, #12]
 80065c2:	60b9      	str	r1, [r7, #8]
 80065c4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80065c6:	2300      	movs	r3, #0
 80065c8:	617b      	str	r3, [r7, #20]
 80065ca:	e00a      	b.n	80065e2 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80065cc:	f3af 8000 	nop.w
 80065d0:	4601      	mov	r1, r0
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	1c5a      	adds	r2, r3, #1
 80065d6:	60ba      	str	r2, [r7, #8]
 80065d8:	b2ca      	uxtb	r2, r1
 80065da:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80065dc:	697b      	ldr	r3, [r7, #20]
 80065de:	3301      	adds	r3, #1
 80065e0:	617b      	str	r3, [r7, #20]
 80065e2:	697a      	ldr	r2, [r7, #20]
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	429a      	cmp	r2, r3
 80065e8:	dbf0      	blt.n	80065cc <_read+0x12>
	}

return len;
 80065ea:	687b      	ldr	r3, [r7, #4]
}
 80065ec:	4618      	mov	r0, r3
 80065ee:	3718      	adds	r7, #24
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bd80      	pop	{r7, pc}

080065f4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b086      	sub	sp, #24
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	60f8      	str	r0, [r7, #12]
 80065fc:	60b9      	str	r1, [r7, #8]
 80065fe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006600:	2300      	movs	r3, #0
 8006602:	617b      	str	r3, [r7, #20]
 8006604:	e009      	b.n	800661a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	1c5a      	adds	r2, r3, #1
 800660a:	60ba      	str	r2, [r7, #8]
 800660c:	781b      	ldrb	r3, [r3, #0]
 800660e:	4618      	mov	r0, r3
 8006610:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006614:	697b      	ldr	r3, [r7, #20]
 8006616:	3301      	adds	r3, #1
 8006618:	617b      	str	r3, [r7, #20]
 800661a:	697a      	ldr	r2, [r7, #20]
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	429a      	cmp	r2, r3
 8006620:	dbf1      	blt.n	8006606 <_write+0x12>
	}
	return len;
 8006622:	687b      	ldr	r3, [r7, #4]
}
 8006624:	4618      	mov	r0, r3
 8006626:	3718      	adds	r7, #24
 8006628:	46bd      	mov	sp, r7
 800662a:	bd80      	pop	{r7, pc}

0800662c <_close>:

int _close(int file)
{
 800662c:	b480      	push	{r7}
 800662e:	b083      	sub	sp, #12
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
	return -1;
 8006634:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006638:	4618      	mov	r0, r3
 800663a:	370c      	adds	r7, #12
 800663c:	46bd      	mov	sp, r7
 800663e:	bc80      	pop	{r7}
 8006640:	4770      	bx	lr

08006642 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006642:	b480      	push	{r7}
 8006644:	b083      	sub	sp, #12
 8006646:	af00      	add	r7, sp, #0
 8006648:	6078      	str	r0, [r7, #4]
 800664a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006652:	605a      	str	r2, [r3, #4]
	return 0;
 8006654:	2300      	movs	r3, #0
}
 8006656:	4618      	mov	r0, r3
 8006658:	370c      	adds	r7, #12
 800665a:	46bd      	mov	sp, r7
 800665c:	bc80      	pop	{r7}
 800665e:	4770      	bx	lr

08006660 <_isatty>:

int _isatty(int file)
{
 8006660:	b480      	push	{r7}
 8006662:	b083      	sub	sp, #12
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
	return 1;
 8006668:	2301      	movs	r3, #1
}
 800666a:	4618      	mov	r0, r3
 800666c:	370c      	adds	r7, #12
 800666e:	46bd      	mov	sp, r7
 8006670:	bc80      	pop	{r7}
 8006672:	4770      	bx	lr

08006674 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006674:	b480      	push	{r7}
 8006676:	b085      	sub	sp, #20
 8006678:	af00      	add	r7, sp, #0
 800667a:	60f8      	str	r0, [r7, #12]
 800667c:	60b9      	str	r1, [r7, #8]
 800667e:	607a      	str	r2, [r7, #4]
	return 0;
 8006680:	2300      	movs	r3, #0
}
 8006682:	4618      	mov	r0, r3
 8006684:	3714      	adds	r7, #20
 8006686:	46bd      	mov	sp, r7
 8006688:	bc80      	pop	{r7}
 800668a:	4770      	bx	lr

0800668c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b086      	sub	sp, #24
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006694:	4a14      	ldr	r2, [pc, #80]	; (80066e8 <_sbrk+0x5c>)
 8006696:	4b15      	ldr	r3, [pc, #84]	; (80066ec <_sbrk+0x60>)
 8006698:	1ad3      	subs	r3, r2, r3
 800669a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800669c:	697b      	ldr	r3, [r7, #20]
 800669e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80066a0:	4b13      	ldr	r3, [pc, #76]	; (80066f0 <_sbrk+0x64>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d102      	bne.n	80066ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80066a8:	4b11      	ldr	r3, [pc, #68]	; (80066f0 <_sbrk+0x64>)
 80066aa:	4a12      	ldr	r2, [pc, #72]	; (80066f4 <_sbrk+0x68>)
 80066ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80066ae:	4b10      	ldr	r3, [pc, #64]	; (80066f0 <_sbrk+0x64>)
 80066b0:	681a      	ldr	r2, [r3, #0]
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	4413      	add	r3, r2
 80066b6:	693a      	ldr	r2, [r7, #16]
 80066b8:	429a      	cmp	r2, r3
 80066ba:	d207      	bcs.n	80066cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80066bc:	f005 fc82 	bl	800bfc4 <__errno>
 80066c0:	4603      	mov	r3, r0
 80066c2:	220c      	movs	r2, #12
 80066c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80066c6:	f04f 33ff 	mov.w	r3, #4294967295
 80066ca:	e009      	b.n	80066e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80066cc:	4b08      	ldr	r3, [pc, #32]	; (80066f0 <_sbrk+0x64>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80066d2:	4b07      	ldr	r3, [pc, #28]	; (80066f0 <_sbrk+0x64>)
 80066d4:	681a      	ldr	r2, [r3, #0]
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	4413      	add	r3, r2
 80066da:	4a05      	ldr	r2, [pc, #20]	; (80066f0 <_sbrk+0x64>)
 80066dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80066de:	68fb      	ldr	r3, [r7, #12]
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	3718      	adds	r7, #24
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}
 80066e8:	20005000 	.word	0x20005000
 80066ec:	00000400 	.word	0x00000400
 80066f0:	20002a04 	.word	0x20002a04
 80066f4:	20002c38 	.word	0x20002c38

080066f8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80066f8:	b480      	push	{r7}
 80066fa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80066fc:	bf00      	nop
 80066fe:	46bd      	mov	sp, r7
 8006700:	bc80      	pop	{r7}
 8006702:	4770      	bx	lr

08006704 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b086      	sub	sp, #24
 8006708:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800670a:	f107 0308 	add.w	r3, r7, #8
 800670e:	2200      	movs	r2, #0
 8006710:	601a      	str	r2, [r3, #0]
 8006712:	605a      	str	r2, [r3, #4]
 8006714:	609a      	str	r2, [r3, #8]
 8006716:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006718:	463b      	mov	r3, r7
 800671a:	2200      	movs	r2, #0
 800671c:	601a      	str	r2, [r3, #0]
 800671e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8006720:	4b1e      	ldr	r3, [pc, #120]	; (800679c <MX_TIM1_Init+0x98>)
 8006722:	4a1f      	ldr	r2, [pc, #124]	; (80067a0 <MX_TIM1_Init+0x9c>)
 8006724:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8006726:	4b1d      	ldr	r3, [pc, #116]	; (800679c <MX_TIM1_Init+0x98>)
 8006728:	2247      	movs	r2, #71	; 0x47
 800672a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800672c:	4b1b      	ldr	r3, [pc, #108]	; (800679c <MX_TIM1_Init+0x98>)
 800672e:	2200      	movs	r2, #0
 8006730:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xFFFF-1;
 8006732:	4b1a      	ldr	r3, [pc, #104]	; (800679c <MX_TIM1_Init+0x98>)
 8006734:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006738:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800673a:	4b18      	ldr	r3, [pc, #96]	; (800679c <MX_TIM1_Init+0x98>)
 800673c:	2200      	movs	r2, #0
 800673e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8006740:	4b16      	ldr	r3, [pc, #88]	; (800679c <MX_TIM1_Init+0x98>)
 8006742:	2200      	movs	r2, #0
 8006744:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006746:	4b15      	ldr	r3, [pc, #84]	; (800679c <MX_TIM1_Init+0x98>)
 8006748:	2200      	movs	r2, #0
 800674a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800674c:	4813      	ldr	r0, [pc, #76]	; (800679c <MX_TIM1_Init+0x98>)
 800674e:	f004 f98d 	bl	800aa6c <HAL_TIM_Base_Init>
 8006752:	4603      	mov	r3, r0
 8006754:	2b00      	cmp	r3, #0
 8006756:	d001      	beq.n	800675c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8006758:	f7ff fe42 	bl	80063e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800675c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006760:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8006762:	f107 0308 	add.w	r3, r7, #8
 8006766:	4619      	mov	r1, r3
 8006768:	480c      	ldr	r0, [pc, #48]	; (800679c <MX_TIM1_Init+0x98>)
 800676a:	f004 f9ce 	bl	800ab0a <HAL_TIM_ConfigClockSource>
 800676e:	4603      	mov	r3, r0
 8006770:	2b00      	cmp	r3, #0
 8006772:	d001      	beq.n	8006778 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8006774:	f7ff fe34 	bl	80063e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006778:	2300      	movs	r3, #0
 800677a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800677c:	2300      	movs	r3, #0
 800677e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8006780:	463b      	mov	r3, r7
 8006782:	4619      	mov	r1, r3
 8006784:	4805      	ldr	r0, [pc, #20]	; (800679c <MX_TIM1_Init+0x98>)
 8006786:	f004 fb7f 	bl	800ae88 <HAL_TIMEx_MasterConfigSynchronization>
 800678a:	4603      	mov	r3, r0
 800678c:	2b00      	cmp	r3, #0
 800678e:	d001      	beq.n	8006794 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8006790:	f7ff fe26 	bl	80063e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8006794:	bf00      	nop
 8006796:	3718      	adds	r7, #24
 8006798:	46bd      	mov	sp, r7
 800679a:	bd80      	pop	{r7, pc}
 800679c:	20002a08 	.word	0x20002a08
 80067a0:	40012c00 	.word	0x40012c00

080067a4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80067a4:	b480      	push	{r7}
 80067a6:	b085      	sub	sp, #20
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4a09      	ldr	r2, [pc, #36]	; (80067d8 <HAL_TIM_Base_MspInit+0x34>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d10b      	bne.n	80067ce <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80067b6:	4b09      	ldr	r3, [pc, #36]	; (80067dc <HAL_TIM_Base_MspInit+0x38>)
 80067b8:	699b      	ldr	r3, [r3, #24]
 80067ba:	4a08      	ldr	r2, [pc, #32]	; (80067dc <HAL_TIM_Base_MspInit+0x38>)
 80067bc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80067c0:	6193      	str	r3, [r2, #24]
 80067c2:	4b06      	ldr	r3, [pc, #24]	; (80067dc <HAL_TIM_Base_MspInit+0x38>)
 80067c4:	699b      	ldr	r3, [r3, #24]
 80067c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80067ca:	60fb      	str	r3, [r7, #12]
 80067cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80067ce:	bf00      	nop
 80067d0:	3714      	adds	r7, #20
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bc80      	pop	{r7}
 80067d6:	4770      	bx	lr
 80067d8:	40012c00 	.word	0x40012c00
 80067dc:	40021000 	.word	0x40021000

080067e0 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80067e4:	4b11      	ldr	r3, [pc, #68]	; (800682c <MX_USART1_UART_Init+0x4c>)
 80067e6:	4a12      	ldr	r2, [pc, #72]	; (8006830 <MX_USART1_UART_Init+0x50>)
 80067e8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80067ea:	4b10      	ldr	r3, [pc, #64]	; (800682c <MX_USART1_UART_Init+0x4c>)
 80067ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80067f0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80067f2:	4b0e      	ldr	r3, [pc, #56]	; (800682c <MX_USART1_UART_Init+0x4c>)
 80067f4:	2200      	movs	r2, #0
 80067f6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80067f8:	4b0c      	ldr	r3, [pc, #48]	; (800682c <MX_USART1_UART_Init+0x4c>)
 80067fa:	2200      	movs	r2, #0
 80067fc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80067fe:	4b0b      	ldr	r3, [pc, #44]	; (800682c <MX_USART1_UART_Init+0x4c>)
 8006800:	2200      	movs	r2, #0
 8006802:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006804:	4b09      	ldr	r3, [pc, #36]	; (800682c <MX_USART1_UART_Init+0x4c>)
 8006806:	220c      	movs	r2, #12
 8006808:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800680a:	4b08      	ldr	r3, [pc, #32]	; (800682c <MX_USART1_UART_Init+0x4c>)
 800680c:	2200      	movs	r2, #0
 800680e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006810:	4b06      	ldr	r3, [pc, #24]	; (800682c <MX_USART1_UART_Init+0x4c>)
 8006812:	2200      	movs	r2, #0
 8006814:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8006816:	4805      	ldr	r0, [pc, #20]	; (800682c <MX_USART1_UART_Init+0x4c>)
 8006818:	f004 fb94 	bl	800af44 <HAL_UART_Init>
 800681c:	4603      	mov	r3, r0
 800681e:	2b00      	cmp	r3, #0
 8006820:	d001      	beq.n	8006826 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8006822:	f7ff fddd 	bl	80063e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8006826:	bf00      	nop
 8006828:	bd80      	pop	{r7, pc}
 800682a:	bf00      	nop
 800682c:	20002a50 	.word	0x20002a50
 8006830:	40013800 	.word	0x40013800

08006834 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8006838:	4b11      	ldr	r3, [pc, #68]	; (8006880 <MX_USART2_UART_Init+0x4c>)
 800683a:	4a12      	ldr	r2, [pc, #72]	; (8006884 <MX_USART2_UART_Init+0x50>)
 800683c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800683e:	4b10      	ldr	r3, [pc, #64]	; (8006880 <MX_USART2_UART_Init+0x4c>)
 8006840:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8006844:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006846:	4b0e      	ldr	r3, [pc, #56]	; (8006880 <MX_USART2_UART_Init+0x4c>)
 8006848:	2200      	movs	r2, #0
 800684a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800684c:	4b0c      	ldr	r3, [pc, #48]	; (8006880 <MX_USART2_UART_Init+0x4c>)
 800684e:	2200      	movs	r2, #0
 8006850:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8006852:	4b0b      	ldr	r3, [pc, #44]	; (8006880 <MX_USART2_UART_Init+0x4c>)
 8006854:	2200      	movs	r2, #0
 8006856:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006858:	4b09      	ldr	r3, [pc, #36]	; (8006880 <MX_USART2_UART_Init+0x4c>)
 800685a:	220c      	movs	r2, #12
 800685c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800685e:	4b08      	ldr	r3, [pc, #32]	; (8006880 <MX_USART2_UART_Init+0x4c>)
 8006860:	2200      	movs	r2, #0
 8006862:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006864:	4b06      	ldr	r3, [pc, #24]	; (8006880 <MX_USART2_UART_Init+0x4c>)
 8006866:	2200      	movs	r2, #0
 8006868:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800686a:	4805      	ldr	r0, [pc, #20]	; (8006880 <MX_USART2_UART_Init+0x4c>)
 800686c:	f004 fb6a 	bl	800af44 <HAL_UART_Init>
 8006870:	4603      	mov	r3, r0
 8006872:	2b00      	cmp	r3, #0
 8006874:	d001      	beq.n	800687a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8006876:	f7ff fdb3 	bl	80063e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800687a:	bf00      	nop
 800687c:	bd80      	pop	{r7, pc}
 800687e:	bf00      	nop
 8006880:	20002a98 	.word	0x20002a98
 8006884:	40004400 	.word	0x40004400

08006888 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800688c:	4b11      	ldr	r3, [pc, #68]	; (80068d4 <MX_USART3_UART_Init+0x4c>)
 800688e:	4a12      	ldr	r2, [pc, #72]	; (80068d8 <MX_USART3_UART_Init+0x50>)
 8006890:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8006892:	4b10      	ldr	r3, [pc, #64]	; (80068d4 <MX_USART3_UART_Init+0x4c>)
 8006894:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006898:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800689a:	4b0e      	ldr	r3, [pc, #56]	; (80068d4 <MX_USART3_UART_Init+0x4c>)
 800689c:	2200      	movs	r2, #0
 800689e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80068a0:	4b0c      	ldr	r3, [pc, #48]	; (80068d4 <MX_USART3_UART_Init+0x4c>)
 80068a2:	2200      	movs	r2, #0
 80068a4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80068a6:	4b0b      	ldr	r3, [pc, #44]	; (80068d4 <MX_USART3_UART_Init+0x4c>)
 80068a8:	2200      	movs	r2, #0
 80068aa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80068ac:	4b09      	ldr	r3, [pc, #36]	; (80068d4 <MX_USART3_UART_Init+0x4c>)
 80068ae:	220c      	movs	r2, #12
 80068b0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80068b2:	4b08      	ldr	r3, [pc, #32]	; (80068d4 <MX_USART3_UART_Init+0x4c>)
 80068b4:	2200      	movs	r2, #0
 80068b6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80068b8:	4b06      	ldr	r3, [pc, #24]	; (80068d4 <MX_USART3_UART_Init+0x4c>)
 80068ba:	2200      	movs	r2, #0
 80068bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80068be:	4805      	ldr	r0, [pc, #20]	; (80068d4 <MX_USART3_UART_Init+0x4c>)
 80068c0:	f004 fb40 	bl	800af44 <HAL_UART_Init>
 80068c4:	4603      	mov	r3, r0
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d001      	beq.n	80068ce <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80068ca:	f7ff fd89 	bl	80063e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80068ce:	bf00      	nop
 80068d0:	bd80      	pop	{r7, pc}
 80068d2:	bf00      	nop
 80068d4:	20002ae0 	.word	0x20002ae0
 80068d8:	40004800 	.word	0x40004800

080068dc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b08e      	sub	sp, #56	; 0x38
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80068e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80068e8:	2200      	movs	r2, #0
 80068ea:	601a      	str	r2, [r3, #0]
 80068ec:	605a      	str	r2, [r3, #4]
 80068ee:	609a      	str	r2, [r3, #8]
 80068f0:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4a9e      	ldr	r2, [pc, #632]	; (8006b70 <HAL_UART_MspInit+0x294>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d16c      	bne.n	80069d6 <HAL_UART_MspInit+0xfa>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80068fc:	4b9d      	ldr	r3, [pc, #628]	; (8006b74 <HAL_UART_MspInit+0x298>)
 80068fe:	699b      	ldr	r3, [r3, #24]
 8006900:	4a9c      	ldr	r2, [pc, #624]	; (8006b74 <HAL_UART_MspInit+0x298>)
 8006902:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006906:	6193      	str	r3, [r2, #24]
 8006908:	4b9a      	ldr	r3, [pc, #616]	; (8006b74 <HAL_UART_MspInit+0x298>)
 800690a:	699b      	ldr	r3, [r3, #24]
 800690c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006910:	623b      	str	r3, [r7, #32]
 8006912:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006914:	4b97      	ldr	r3, [pc, #604]	; (8006b74 <HAL_UART_MspInit+0x298>)
 8006916:	699b      	ldr	r3, [r3, #24]
 8006918:	4a96      	ldr	r2, [pc, #600]	; (8006b74 <HAL_UART_MspInit+0x298>)
 800691a:	f043 0308 	orr.w	r3, r3, #8
 800691e:	6193      	str	r3, [r2, #24]
 8006920:	4b94      	ldr	r3, [pc, #592]	; (8006b74 <HAL_UART_MspInit+0x298>)
 8006922:	699b      	ldr	r3, [r3, #24]
 8006924:	f003 0308 	and.w	r3, r3, #8
 8006928:	61fb      	str	r3, [r7, #28]
 800692a:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = SIM_TX_Pin;
 800692c:	2340      	movs	r3, #64	; 0x40
 800692e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006930:	2302      	movs	r3, #2
 8006932:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006934:	2303      	movs	r3, #3
 8006936:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(SIM_TX_GPIO_Port, &GPIO_InitStruct);
 8006938:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800693c:	4619      	mov	r1, r3
 800693e:	488e      	ldr	r0, [pc, #568]	; (8006b78 <HAL_UART_MspInit+0x29c>)
 8006940:	f002 f9b6 	bl	8008cb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SIM_RX_Pin;
 8006944:	2380      	movs	r3, #128	; 0x80
 8006946:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006948:	2300      	movs	r3, #0
 800694a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800694c:	2300      	movs	r3, #0
 800694e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SIM_RX_GPIO_Port, &GPIO_InitStruct);
 8006950:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006954:	4619      	mov	r1, r3
 8006956:	4888      	ldr	r0, [pc, #544]	; (8006b78 <HAL_UART_MspInit+0x29c>)
 8006958:	f002 f9aa 	bl	8008cb0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 800695c:	4b87      	ldr	r3, [pc, #540]	; (8006b7c <HAL_UART_MspInit+0x2a0>)
 800695e:	685b      	ldr	r3, [r3, #4]
 8006960:	637b      	str	r3, [r7, #52]	; 0x34
 8006962:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006964:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8006968:	637b      	str	r3, [r7, #52]	; 0x34
 800696a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800696c:	f043 0304 	orr.w	r3, r3, #4
 8006970:	637b      	str	r3, [r7, #52]	; 0x34
 8006972:	4a82      	ldr	r2, [pc, #520]	; (8006b7c <HAL_UART_MspInit+0x2a0>)
 8006974:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006976:	6053      	str	r3, [r2, #4]

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8006978:	4b81      	ldr	r3, [pc, #516]	; (8006b80 <HAL_UART_MspInit+0x2a4>)
 800697a:	4a82      	ldr	r2, [pc, #520]	; (8006b84 <HAL_UART_MspInit+0x2a8>)
 800697c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800697e:	4b80      	ldr	r3, [pc, #512]	; (8006b80 <HAL_UART_MspInit+0x2a4>)
 8006980:	2200      	movs	r2, #0
 8006982:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006984:	4b7e      	ldr	r3, [pc, #504]	; (8006b80 <HAL_UART_MspInit+0x2a4>)
 8006986:	2200      	movs	r2, #0
 8006988:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800698a:	4b7d      	ldr	r3, [pc, #500]	; (8006b80 <HAL_UART_MspInit+0x2a4>)
 800698c:	2280      	movs	r2, #128	; 0x80
 800698e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006990:	4b7b      	ldr	r3, [pc, #492]	; (8006b80 <HAL_UART_MspInit+0x2a4>)
 8006992:	2200      	movs	r2, #0
 8006994:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006996:	4b7a      	ldr	r3, [pc, #488]	; (8006b80 <HAL_UART_MspInit+0x2a4>)
 8006998:	2200      	movs	r2, #0
 800699a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800699c:	4b78      	ldr	r3, [pc, #480]	; (8006b80 <HAL_UART_MspInit+0x2a4>)
 800699e:	2200      	movs	r2, #0
 80069a0:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80069a2:	4b77      	ldr	r3, [pc, #476]	; (8006b80 <HAL_UART_MspInit+0x2a4>)
 80069a4:	2200      	movs	r2, #0
 80069a6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80069a8:	4875      	ldr	r0, [pc, #468]	; (8006b80 <HAL_UART_MspInit+0x2a4>)
 80069aa:	f001 fedf 	bl	800876c <HAL_DMA_Init>
 80069ae:	4603      	mov	r3, r0
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d001      	beq.n	80069b8 <HAL_UART_MspInit+0xdc>
    {
      Error_Handler();
 80069b4:	f7ff fd14 	bl	80063e0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	4a71      	ldr	r2, [pc, #452]	; (8006b80 <HAL_UART_MspInit+0x2a4>)
 80069bc:	63da      	str	r2, [r3, #60]	; 0x3c
 80069be:	4a70      	ldr	r2, [pc, #448]	; (8006b80 <HAL_UART_MspInit+0x2a4>)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 80069c4:	2200      	movs	r2, #0
 80069c6:	2101      	movs	r1, #1
 80069c8:	2025      	movs	r0, #37	; 0x25
 80069ca:	f001 fe98 	bl	80086fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80069ce:	2025      	movs	r0, #37	; 0x25
 80069d0:	f001 feb1 	bl	8008736 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80069d4:	e0c8      	b.n	8006b68 <HAL_UART_MspInit+0x28c>
  else if(uartHandle->Instance==USART2)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4a6b      	ldr	r2, [pc, #428]	; (8006b88 <HAL_UART_MspInit+0x2ac>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d15e      	bne.n	8006a9e <HAL_UART_MspInit+0x1c2>
    __HAL_RCC_USART2_CLK_ENABLE();
 80069e0:	4b64      	ldr	r3, [pc, #400]	; (8006b74 <HAL_UART_MspInit+0x298>)
 80069e2:	69db      	ldr	r3, [r3, #28]
 80069e4:	4a63      	ldr	r2, [pc, #396]	; (8006b74 <HAL_UART_MspInit+0x298>)
 80069e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80069ea:	61d3      	str	r3, [r2, #28]
 80069ec:	4b61      	ldr	r3, [pc, #388]	; (8006b74 <HAL_UART_MspInit+0x298>)
 80069ee:	69db      	ldr	r3, [r3, #28]
 80069f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069f4:	61bb      	str	r3, [r7, #24]
 80069f6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80069f8:	4b5e      	ldr	r3, [pc, #376]	; (8006b74 <HAL_UART_MspInit+0x298>)
 80069fa:	699b      	ldr	r3, [r3, #24]
 80069fc:	4a5d      	ldr	r2, [pc, #372]	; (8006b74 <HAL_UART_MspInit+0x298>)
 80069fe:	f043 0304 	orr.w	r3, r3, #4
 8006a02:	6193      	str	r3, [r2, #24]
 8006a04:	4b5b      	ldr	r3, [pc, #364]	; (8006b74 <HAL_UART_MspInit+0x298>)
 8006a06:	699b      	ldr	r3, [r3, #24]
 8006a08:	f003 0304 	and.w	r3, r3, #4
 8006a0c:	617b      	str	r3, [r7, #20]
 8006a0e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006a10:	2304      	movs	r3, #4
 8006a12:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a14:	2302      	movs	r3, #2
 8006a16:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006a18:	2303      	movs	r3, #3
 8006a1a:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006a1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006a20:	4619      	mov	r1, r3
 8006a22:	485a      	ldr	r0, [pc, #360]	; (8006b8c <HAL_UART_MspInit+0x2b0>)
 8006a24:	f002 f944 	bl	8008cb0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8006a28:	2308      	movs	r3, #8
 8006a2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a30:	2300      	movs	r3, #0
 8006a32:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006a34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006a38:	4619      	mov	r1, r3
 8006a3a:	4854      	ldr	r0, [pc, #336]	; (8006b8c <HAL_UART_MspInit+0x2b0>)
 8006a3c:	f002 f938 	bl	8008cb0 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8006a40:	4b53      	ldr	r3, [pc, #332]	; (8006b90 <HAL_UART_MspInit+0x2b4>)
 8006a42:	4a54      	ldr	r2, [pc, #336]	; (8006b94 <HAL_UART_MspInit+0x2b8>)
 8006a44:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006a46:	4b52      	ldr	r3, [pc, #328]	; (8006b90 <HAL_UART_MspInit+0x2b4>)
 8006a48:	2200      	movs	r2, #0
 8006a4a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006a4c:	4b50      	ldr	r3, [pc, #320]	; (8006b90 <HAL_UART_MspInit+0x2b4>)
 8006a4e:	2200      	movs	r2, #0
 8006a50:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006a52:	4b4f      	ldr	r3, [pc, #316]	; (8006b90 <HAL_UART_MspInit+0x2b4>)
 8006a54:	2280      	movs	r2, #128	; 0x80
 8006a56:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006a58:	4b4d      	ldr	r3, [pc, #308]	; (8006b90 <HAL_UART_MspInit+0x2b4>)
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006a5e:	4b4c      	ldr	r3, [pc, #304]	; (8006b90 <HAL_UART_MspInit+0x2b4>)
 8006a60:	2200      	movs	r2, #0
 8006a62:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8006a64:	4b4a      	ldr	r3, [pc, #296]	; (8006b90 <HAL_UART_MspInit+0x2b4>)
 8006a66:	2200      	movs	r2, #0
 8006a68:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006a6a:	4b49      	ldr	r3, [pc, #292]	; (8006b90 <HAL_UART_MspInit+0x2b4>)
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8006a70:	4847      	ldr	r0, [pc, #284]	; (8006b90 <HAL_UART_MspInit+0x2b4>)
 8006a72:	f001 fe7b 	bl	800876c <HAL_DMA_Init>
 8006a76:	4603      	mov	r3, r0
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d001      	beq.n	8006a80 <HAL_UART_MspInit+0x1a4>
      Error_Handler();
 8006a7c:	f7ff fcb0 	bl	80063e0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	4a43      	ldr	r2, [pc, #268]	; (8006b90 <HAL_UART_MspInit+0x2b4>)
 8006a84:	63da      	str	r2, [r3, #60]	; 0x3c
 8006a86:	4a42      	ldr	r2, [pc, #264]	; (8006b90 <HAL_UART_MspInit+0x2b4>)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	2101      	movs	r1, #1
 8006a90:	2026      	movs	r0, #38	; 0x26
 8006a92:	f001 fe34 	bl	80086fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8006a96:	2026      	movs	r0, #38	; 0x26
 8006a98:	f001 fe4d 	bl	8008736 <HAL_NVIC_EnableIRQ>
}
 8006a9c:	e064      	b.n	8006b68 <HAL_UART_MspInit+0x28c>
  else if(uartHandle->Instance==USART3)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	4a3d      	ldr	r2, [pc, #244]	; (8006b98 <HAL_UART_MspInit+0x2bc>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d15f      	bne.n	8006b68 <HAL_UART_MspInit+0x28c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8006aa8:	4b32      	ldr	r3, [pc, #200]	; (8006b74 <HAL_UART_MspInit+0x298>)
 8006aaa:	69db      	ldr	r3, [r3, #28]
 8006aac:	4a31      	ldr	r2, [pc, #196]	; (8006b74 <HAL_UART_MspInit+0x298>)
 8006aae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006ab2:	61d3      	str	r3, [r2, #28]
 8006ab4:	4b2f      	ldr	r3, [pc, #188]	; (8006b74 <HAL_UART_MspInit+0x298>)
 8006ab6:	69db      	ldr	r3, [r3, #28]
 8006ab8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006abc:	613b      	str	r3, [r7, #16]
 8006abe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006ac0:	4b2c      	ldr	r3, [pc, #176]	; (8006b74 <HAL_UART_MspInit+0x298>)
 8006ac2:	699b      	ldr	r3, [r3, #24]
 8006ac4:	4a2b      	ldr	r2, [pc, #172]	; (8006b74 <HAL_UART_MspInit+0x298>)
 8006ac6:	f043 0308 	orr.w	r3, r3, #8
 8006aca:	6193      	str	r3, [r2, #24]
 8006acc:	4b29      	ldr	r3, [pc, #164]	; (8006b74 <HAL_UART_MspInit+0x298>)
 8006ace:	699b      	ldr	r3, [r3, #24]
 8006ad0:	f003 0308 	and.w	r3, r3, #8
 8006ad4:	60fb      	str	r3, [r7, #12]
 8006ad6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006ad8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006adc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ade:	2302      	movs	r3, #2
 8006ae0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006ae2:	2303      	movs	r3, #3
 8006ae4:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006ae6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006aea:	4619      	mov	r1, r3
 8006aec:	4822      	ldr	r0, [pc, #136]	; (8006b78 <HAL_UART_MspInit+0x29c>)
 8006aee:	f002 f8df 	bl	8008cb0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8006af2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006af6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006af8:	2300      	movs	r3, #0
 8006afa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006afc:	2300      	movs	r3, #0
 8006afe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006b00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006b04:	4619      	mov	r1, r3
 8006b06:	481c      	ldr	r0, [pc, #112]	; (8006b78 <HAL_UART_MspInit+0x29c>)
 8006b08:	f002 f8d2 	bl	8008cb0 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8006b0c:	4b23      	ldr	r3, [pc, #140]	; (8006b9c <HAL_UART_MspInit+0x2c0>)
 8006b0e:	4a24      	ldr	r2, [pc, #144]	; (8006ba0 <HAL_UART_MspInit+0x2c4>)
 8006b10:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006b12:	4b22      	ldr	r3, [pc, #136]	; (8006b9c <HAL_UART_MspInit+0x2c0>)
 8006b14:	2200      	movs	r2, #0
 8006b16:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006b18:	4b20      	ldr	r3, [pc, #128]	; (8006b9c <HAL_UART_MspInit+0x2c0>)
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006b1e:	4b1f      	ldr	r3, [pc, #124]	; (8006b9c <HAL_UART_MspInit+0x2c0>)
 8006b20:	2280      	movs	r2, #128	; 0x80
 8006b22:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006b24:	4b1d      	ldr	r3, [pc, #116]	; (8006b9c <HAL_UART_MspInit+0x2c0>)
 8006b26:	2200      	movs	r2, #0
 8006b28:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006b2a:	4b1c      	ldr	r3, [pc, #112]	; (8006b9c <HAL_UART_MspInit+0x2c0>)
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8006b30:	4b1a      	ldr	r3, [pc, #104]	; (8006b9c <HAL_UART_MspInit+0x2c0>)
 8006b32:	2200      	movs	r2, #0
 8006b34:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006b36:	4b19      	ldr	r3, [pc, #100]	; (8006b9c <HAL_UART_MspInit+0x2c0>)
 8006b38:	2200      	movs	r2, #0
 8006b3a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8006b3c:	4817      	ldr	r0, [pc, #92]	; (8006b9c <HAL_UART_MspInit+0x2c0>)
 8006b3e:	f001 fe15 	bl	800876c <HAL_DMA_Init>
 8006b42:	4603      	mov	r3, r0
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d001      	beq.n	8006b4c <HAL_UART_MspInit+0x270>
      Error_Handler();
 8006b48:	f7ff fc4a 	bl	80063e0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	4a13      	ldr	r2, [pc, #76]	; (8006b9c <HAL_UART_MspInit+0x2c0>)
 8006b50:	63da      	str	r2, [r3, #60]	; 0x3c
 8006b52:	4a12      	ldr	r2, [pc, #72]	; (8006b9c <HAL_UART_MspInit+0x2c0>)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 8006b58:	2200      	movs	r2, #0
 8006b5a:	2101      	movs	r1, #1
 8006b5c:	2027      	movs	r0, #39	; 0x27
 8006b5e:	f001 fdce 	bl	80086fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8006b62:	2027      	movs	r0, #39	; 0x27
 8006b64:	f001 fde7 	bl	8008736 <HAL_NVIC_EnableIRQ>
}
 8006b68:	bf00      	nop
 8006b6a:	3738      	adds	r7, #56	; 0x38
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	bd80      	pop	{r7, pc}
 8006b70:	40013800 	.word	0x40013800
 8006b74:	40021000 	.word	0x40021000
 8006b78:	40010c00 	.word	0x40010c00
 8006b7c:	40010000 	.word	0x40010000
 8006b80:	20002b28 	.word	0x20002b28
 8006b84:	40020058 	.word	0x40020058
 8006b88:	40004400 	.word	0x40004400
 8006b8c:	40010800 	.word	0x40010800
 8006b90:	20002b6c 	.word	0x20002b6c
 8006b94:	4002006c 	.word	0x4002006c
 8006b98:	40004800 	.word	0x40004800
 8006b9c:	20002bb0 	.word	0x20002bb0
 8006ba0:	40020030 	.word	0x40020030

08006ba4 <A4988_EnableDriver>:
{

}

void A4988_EnableDriver()
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(myMotor.PENABLE, myMotor.ENABLE, GPIO_PIN_RESET);
 8006ba8:	4b0c      	ldr	r3, [pc, #48]	; (8006bdc <A4988_EnableDriver+0x38>)
 8006baa:	695b      	ldr	r3, [r3, #20]
 8006bac:	4a0b      	ldr	r2, [pc, #44]	; (8006bdc <A4988_EnableDriver+0x38>)
 8006bae:	8891      	ldrh	r1, [r2, #4]
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	f002 fa17 	bl	8008fe6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(myMotor.PSLEEP, myMotor.SLEEP, GPIO_PIN_SET);
 8006bb8:	4b08      	ldr	r3, [pc, #32]	; (8006bdc <A4988_EnableDriver+0x38>)
 8006bba:	699b      	ldr	r3, [r3, #24]
 8006bbc:	4a07      	ldr	r2, [pc, #28]	; (8006bdc <A4988_EnableDriver+0x38>)
 8006bbe:	88d1      	ldrh	r1, [r2, #6]
 8006bc0:	2201      	movs	r2, #1
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	f002 fa0f 	bl	8008fe6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(myMotor.PRESET, myMotor.RESET, GPIO_PIN_SET);
 8006bc8:	4b04      	ldr	r3, [pc, #16]	; (8006bdc <A4988_EnableDriver+0x38>)
 8006bca:	69db      	ldr	r3, [r3, #28]
 8006bcc:	4a03      	ldr	r2, [pc, #12]	; (8006bdc <A4988_EnableDriver+0x38>)
 8006bce:	8911      	ldrh	r1, [r2, #8]
 8006bd0:	2201      	movs	r2, #1
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f002 fa07 	bl	8008fe6 <HAL_GPIO_WritePin>
}
 8006bd8:	bf00      	nop
 8006bda:	bd80      	pop	{r7, pc}
 8006bdc:	20000494 	.word	0x20000494

08006be0 <A4988_DisableDriver>:

void A4988_DisableDriver()
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(myMotor.PENABLE, myMotor.ENABLE, GPIO_PIN_SET);
 8006be4:	4b0c      	ldr	r3, [pc, #48]	; (8006c18 <A4988_DisableDriver+0x38>)
 8006be6:	695b      	ldr	r3, [r3, #20]
 8006be8:	4a0b      	ldr	r2, [pc, #44]	; (8006c18 <A4988_DisableDriver+0x38>)
 8006bea:	8891      	ldrh	r1, [r2, #4]
 8006bec:	2201      	movs	r2, #1
 8006bee:	4618      	mov	r0, r3
 8006bf0:	f002 f9f9 	bl	8008fe6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(myMotor.PSLEEP, myMotor.SLEEP, GPIO_PIN_RESET);
 8006bf4:	4b08      	ldr	r3, [pc, #32]	; (8006c18 <A4988_DisableDriver+0x38>)
 8006bf6:	699b      	ldr	r3, [r3, #24]
 8006bf8:	4a07      	ldr	r2, [pc, #28]	; (8006c18 <A4988_DisableDriver+0x38>)
 8006bfa:	88d1      	ldrh	r1, [r2, #6]
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	4618      	mov	r0, r3
 8006c00:	f002 f9f1 	bl	8008fe6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(myMotor.PRESET, myMotor.RESET, GPIO_PIN_RESET);
 8006c04:	4b04      	ldr	r3, [pc, #16]	; (8006c18 <A4988_DisableDriver+0x38>)
 8006c06:	69db      	ldr	r3, [r3, #28]
 8006c08:	4a03      	ldr	r2, [pc, #12]	; (8006c18 <A4988_DisableDriver+0x38>)
 8006c0a:	8911      	ldrh	r1, [r2, #8]
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	4618      	mov	r0, r3
 8006c10:	f002 f9e9 	bl	8008fe6 <HAL_GPIO_WritePin>
}
 8006c14:	bf00      	nop
 8006c16:	bd80      	pop	{r7, pc}
 8006c18:	20000494 	.word	0x20000494

08006c1c <A4988_StepByStep>:
	HAL_GPIO_WritePin(myMotor.PSTEP, myMotor.STEP, GPIO_PIN_SET);
	HAL_GPIO_WritePin(myMotor.PSTEP, myMotor.STEP, GPIO_PIN_RESET);
}

void A4988_StepByStep(int steps, int direction)
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b084      	sub	sp, #16
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
 8006c24:	6039      	str	r1, [r7, #0]
	if (direction == 1) {
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	2b01      	cmp	r3, #1
 8006c2a:	d108      	bne.n	8006c3e <A4988_StepByStep+0x22>
		HAL_GPIO_WritePin(myMotor.PDIR, myMotor.DIR, GPIO_PIN_SET);
 8006c2c:	4b1a      	ldr	r3, [pc, #104]	; (8006c98 <A4988_StepByStep+0x7c>)
 8006c2e:	68db      	ldr	r3, [r3, #12]
 8006c30:	4a19      	ldr	r2, [pc, #100]	; (8006c98 <A4988_StepByStep+0x7c>)
 8006c32:	8811      	ldrh	r1, [r2, #0]
 8006c34:	2201      	movs	r2, #1
 8006c36:	4618      	mov	r0, r3
 8006c38:	f002 f9d5 	bl	8008fe6 <HAL_GPIO_WritePin>
 8006c3c:	e007      	b.n	8006c4e <A4988_StepByStep+0x32>
	} else {
		HAL_GPIO_WritePin(myMotor.PDIR, myMotor.DIR, GPIO_PIN_RESET);
 8006c3e:	4b16      	ldr	r3, [pc, #88]	; (8006c98 <A4988_StepByStep+0x7c>)
 8006c40:	68db      	ldr	r3, [r3, #12]
 8006c42:	4a15      	ldr	r2, [pc, #84]	; (8006c98 <A4988_StepByStep+0x7c>)
 8006c44:	8811      	ldrh	r1, [r2, #0]
 8006c46:	2200      	movs	r2, #0
 8006c48:	4618      	mov	r0, r3
 8006c4a:	f002 f9cc 	bl	8008fe6 <HAL_GPIO_WritePin>
	}

	// Step the motor
	for (int i = 0; i < steps; i++) {
 8006c4e:	2300      	movs	r3, #0
 8006c50:	60fb      	str	r3, [r7, #12]
 8006c52:	e018      	b.n	8006c86 <A4988_StepByStep+0x6a>
		HAL_GPIO_WritePin(myMotor.PSTEP, myMotor.STEP, GPIO_PIN_SET);
 8006c54:	4b10      	ldr	r3, [pc, #64]	; (8006c98 <A4988_StepByStep+0x7c>)
 8006c56:	691b      	ldr	r3, [r3, #16]
 8006c58:	4a0f      	ldr	r2, [pc, #60]	; (8006c98 <A4988_StepByStep+0x7c>)
 8006c5a:	8851      	ldrh	r1, [r2, #2]
 8006c5c:	2201      	movs	r2, #1
 8006c5e:	4618      	mov	r0, r3
 8006c60:	f002 f9c1 	bl	8008fe6 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8006c64:	2001      	movs	r0, #1
 8006c66:	f001 f851 	bl	8007d0c <HAL_Delay>
		HAL_GPIO_WritePin(myMotor.PSTEP, myMotor.STEP, GPIO_PIN_RESET);
 8006c6a:	4b0b      	ldr	r3, [pc, #44]	; (8006c98 <A4988_StepByStep+0x7c>)
 8006c6c:	691b      	ldr	r3, [r3, #16]
 8006c6e:	4a0a      	ldr	r2, [pc, #40]	; (8006c98 <A4988_StepByStep+0x7c>)
 8006c70:	8851      	ldrh	r1, [r2, #2]
 8006c72:	2200      	movs	r2, #0
 8006c74:	4618      	mov	r0, r3
 8006c76:	f002 f9b6 	bl	8008fe6 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8006c7a:	2001      	movs	r0, #1
 8006c7c:	f001 f846 	bl	8007d0c <HAL_Delay>
	for (int i = 0; i < steps; i++) {
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	3301      	adds	r3, #1
 8006c84:	60fb      	str	r3, [r7, #12]
 8006c86:	68fa      	ldr	r2, [r7, #12]
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	429a      	cmp	r2, r3
 8006c8c:	dbe2      	blt.n	8006c54 <A4988_StepByStep+0x38>
	}
}
 8006c8e:	bf00      	nop
 8006c90:	bf00      	nop
 8006c92:	3710      	adds	r7, #16
 8006c94:	46bd      	mov	sp, r7
 8006c96:	bd80      	pop	{r7, pc}
 8006c98:	20000494 	.word	0x20000494

08006c9c <LCD_SpecialChar>:

/* GLOBAL VARIABLES ----------------------------------------------------------*/

/* STATIC FUNCTION PROTOTYPES --- --------------------------------------------*/
static void LCD_SpecialChar(void)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b098      	sub	sp, #96	; 0x60
 8006ca0:	af00      	add	r7, sp, #0
	uint8_t Right[] = {0x00, 0x04, 0x06, 0x1F, 0x1F, 0x06, 0x04, 0x00}; // Go to right
 8006ca2:	4a6d      	ldr	r2, [pc, #436]	; (8006e58 <LCD_SpecialChar+0x1bc>)
 8006ca4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006ca8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006cac:	e883 0003 	stmia.w	r3, {r0, r1}
	LCD_SendCommand(0x40);
 8006cb0:	2040      	movs	r0, #64	; 0x40
 8006cb2:	f000 f91b 	bl	8006eec <LCD_SendCommand>
	for (int i=0; i<8; i++) LCD_SendData(Right[i]);
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006cba:	e00a      	b.n	8006cd2 <LCD_SpecialChar+0x36>
 8006cbc:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8006cc0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006cc2:	4413      	add	r3, r2
 8006cc4:	781b      	ldrb	r3, [r3, #0]
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	f000 f9ac 	bl	8007024 <LCD_SendData>
 8006ccc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006cce:	3301      	adds	r3, #1
 8006cd0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006cd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006cd4:	2b07      	cmp	r3, #7
 8006cd6:	ddf1      	ble.n	8006cbc <LCD_SpecialChar+0x20>
	uint8_t RightInvert[] = {0x1F, 0x1B, 0x19, 0x00, 0x00, 0x19, 0x1B, 0x1F};
 8006cd8:	4a60      	ldr	r2, [pc, #384]	; (8006e5c <LCD_SpecialChar+0x1c0>)
 8006cda:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006cde:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006ce2:	e883 0003 	stmia.w	r3, {r0, r1}
	LCD_SendCommand(0x40+8);
 8006ce6:	2048      	movs	r0, #72	; 0x48
 8006ce8:	f000 f900 	bl	8006eec <LCD_SendCommand>
	for (int i=0; i<8; i++) LCD_SendData(RightInvert[i]);
 8006cec:	2300      	movs	r3, #0
 8006cee:	65bb      	str	r3, [r7, #88]	; 0x58
 8006cf0:	e00a      	b.n	8006d08 <LCD_SpecialChar+0x6c>
 8006cf2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006cf6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006cf8:	4413      	add	r3, r2
 8006cfa:	781b      	ldrb	r3, [r3, #0]
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	f000 f991 	bl	8007024 <LCD_SendData>
 8006d02:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006d04:	3301      	adds	r3, #1
 8006d06:	65bb      	str	r3, [r7, #88]	; 0x58
 8006d08:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006d0a:	2b07      	cmp	r3, #7
 8006d0c:	ddf1      	ble.n	8006cf2 <LCD_SpecialChar+0x56>
	uint8_t Left[] = {0x00, 0x04, 0x0C, 0x1F, 0x1F, 0x0C, 0x04, 0x00};
 8006d0e:	4a54      	ldr	r2, [pc, #336]	; (8006e60 <LCD_SpecialChar+0x1c4>)
 8006d10:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006d14:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006d18:	e883 0003 	stmia.w	r3, {r0, r1}
	LCD_SendCommand(0x40+16);
 8006d1c:	2050      	movs	r0, #80	; 0x50
 8006d1e:	f000 f8e5 	bl	8006eec <LCD_SendCommand>
	for (int i=0; i<8; i++) LCD_SendData(Left[i]);
 8006d22:	2300      	movs	r3, #0
 8006d24:	657b      	str	r3, [r7, #84]	; 0x54
 8006d26:	e00a      	b.n	8006d3e <LCD_SpecialChar+0xa2>
 8006d28:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006d2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d2e:	4413      	add	r3, r2
 8006d30:	781b      	ldrb	r3, [r3, #0]
 8006d32:	4618      	mov	r0, r3
 8006d34:	f000 f976 	bl	8007024 <LCD_SendData>
 8006d38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d3a:	3301      	adds	r3, #1
 8006d3c:	657b      	str	r3, [r7, #84]	; 0x54
 8006d3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d40:	2b07      	cmp	r3, #7
 8006d42:	ddf1      	ble.n	8006d28 <LCD_SpecialChar+0x8c>
	uint8_t LeftInvert[] = {0x1F, 0x1B, 0x13, 0x00, 0x00, 0x13, 0x1B, 0x1F};
 8006d44:	4a47      	ldr	r2, [pc, #284]	; (8006e64 <LCD_SpecialChar+0x1c8>)
 8006d46:	f107 0320 	add.w	r3, r7, #32
 8006d4a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006d4e:	e883 0003 	stmia.w	r3, {r0, r1}
	LCD_SendCommand(0x40+24);
 8006d52:	2058      	movs	r0, #88	; 0x58
 8006d54:	f000 f8ca 	bl	8006eec <LCD_SendCommand>
	for (int i=0; i<8; i++) LCD_SendData(LeftInvert[i]);
 8006d58:	2300      	movs	r3, #0
 8006d5a:	653b      	str	r3, [r7, #80]	; 0x50
 8006d5c:	e00a      	b.n	8006d74 <LCD_SpecialChar+0xd8>
 8006d5e:	f107 0220 	add.w	r2, r7, #32
 8006d62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d64:	4413      	add	r3, r2
 8006d66:	781b      	ldrb	r3, [r3, #0]
 8006d68:	4618      	mov	r0, r3
 8006d6a:	f000 f95b 	bl	8007024 <LCD_SendData>
 8006d6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d70:	3301      	adds	r3, #1
 8006d72:	653b      	str	r3, [r7, #80]	; 0x50
 8006d74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d76:	2b07      	cmp	r3, #7
 8006d78:	ddf1      	ble.n	8006d5e <LCD_SpecialChar+0xc2>
	uint8_t Empty[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8006d7a:	4a3b      	ldr	r2, [pc, #236]	; (8006e68 <LCD_SpecialChar+0x1cc>)
 8006d7c:	f107 0318 	add.w	r3, r7, #24
 8006d80:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006d84:	e883 0003 	stmia.w	r3, {r0, r1}
	LCD_SendCommand(0x40+32);
 8006d88:	2060      	movs	r0, #96	; 0x60
 8006d8a:	f000 f8af 	bl	8006eec <LCD_SendCommand>
	for (int i=0; i<8; i++) LCD_SendData(Empty[i]);
 8006d8e:	2300      	movs	r3, #0
 8006d90:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d92:	e00a      	b.n	8006daa <LCD_SpecialChar+0x10e>
 8006d94:	f107 0218 	add.w	r2, r7, #24
 8006d98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d9a:	4413      	add	r3, r2
 8006d9c:	781b      	ldrb	r3, [r3, #0]
 8006d9e:	4618      	mov	r0, r3
 8006da0:	f000 f940 	bl	8007024 <LCD_SendData>
 8006da4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006da6:	3301      	adds	r3, #1
 8006da8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006daa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006dac:	2b07      	cmp	r3, #7
 8006dae:	ddf1      	ble.n	8006d94 <LCD_SpecialChar+0xf8>
	uint8_t Full[] = {0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F};
 8006db0:	4a2e      	ldr	r2, [pc, #184]	; (8006e6c <LCD_SpecialChar+0x1d0>)
 8006db2:	f107 0310 	add.w	r3, r7, #16
 8006db6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006dba:	e883 0003 	stmia.w	r3, {r0, r1}
	LCD_SendCommand(0x40+40);
 8006dbe:	2068      	movs	r0, #104	; 0x68
 8006dc0:	f000 f894 	bl	8006eec <LCD_SendCommand>
	for (int i=0; i<8; i++) LCD_SendData(Full[i]);
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	64bb      	str	r3, [r7, #72]	; 0x48
 8006dc8:	e00a      	b.n	8006de0 <LCD_SpecialChar+0x144>
 8006dca:	f107 0210 	add.w	r2, r7, #16
 8006dce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006dd0:	4413      	add	r3, r2
 8006dd2:	781b      	ldrb	r3, [r3, #0]
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	f000 f925 	bl	8007024 <LCD_SendData>
 8006dda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ddc:	3301      	adds	r3, #1
 8006dde:	64bb      	str	r3, [r7, #72]	; 0x48
 8006de0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006de2:	2b07      	cmp	r3, #7
 8006de4:	ddf1      	ble.n	8006dca <LCD_SpecialChar+0x12e>
	uint8_t Up[] = {0x00, 0x00, 0x04, 0x0E, 0x1F, 0x00, 0x00, 0x00};
 8006de6:	4a22      	ldr	r2, [pc, #136]	; (8006e70 <LCD_SpecialChar+0x1d4>)
 8006de8:	f107 0308 	add.w	r3, r7, #8
 8006dec:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006df0:	e883 0003 	stmia.w	r3, {r0, r1}
	LCD_SendCommand(0x40+48);
 8006df4:	2070      	movs	r0, #112	; 0x70
 8006df6:	f000 f879 	bl	8006eec <LCD_SendCommand>
	for (int i=0; i<8; i++) LCD_SendData(Up[i]);
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	647b      	str	r3, [r7, #68]	; 0x44
 8006dfe:	e00a      	b.n	8006e16 <LCD_SpecialChar+0x17a>
 8006e00:	f107 0208 	add.w	r2, r7, #8
 8006e04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e06:	4413      	add	r3, r2
 8006e08:	781b      	ldrb	r3, [r3, #0]
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	f000 f90a 	bl	8007024 <LCD_SendData>
 8006e10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e12:	3301      	adds	r3, #1
 8006e14:	647b      	str	r3, [r7, #68]	; 0x44
 8006e16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e18:	2b07      	cmp	r3, #7
 8006e1a:	ddf1      	ble.n	8006e00 <LCD_SpecialChar+0x164>
	uint8_t Down[] = {0x00, 0x00, 0x00, 0x1F, 0x0E, 0x04, 0x00, 0x00};
 8006e1c:	4a15      	ldr	r2, [pc, #84]	; (8006e74 <LCD_SpecialChar+0x1d8>)
 8006e1e:	463b      	mov	r3, r7
 8006e20:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006e24:	e883 0003 	stmia.w	r3, {r0, r1}
	LCD_SendCommand(0x40+56);
 8006e28:	2078      	movs	r0, #120	; 0x78
 8006e2a:	f000 f85f 	bl	8006eec <LCD_SendCommand>
	for (int i=0; i<8; i++) LCD_SendData(Down[i]);
 8006e2e:	2300      	movs	r3, #0
 8006e30:	643b      	str	r3, [r7, #64]	; 0x40
 8006e32:	e009      	b.n	8006e48 <LCD_SpecialChar+0x1ac>
 8006e34:	463a      	mov	r2, r7
 8006e36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e38:	4413      	add	r3, r2
 8006e3a:	781b      	ldrb	r3, [r3, #0]
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	f000 f8f1 	bl	8007024 <LCD_SendData>
 8006e42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e44:	3301      	adds	r3, #1
 8006e46:	643b      	str	r3, [r7, #64]	; 0x40
 8006e48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e4a:	2b07      	cmp	r3, #7
 8006e4c:	ddf2      	ble.n	8006e34 <LCD_SpecialChar+0x198>
}
 8006e4e:	bf00      	nop
 8006e50:	bf00      	nop
 8006e52:	3760      	adds	r7, #96	; 0x60
 8006e54:	46bd      	mov	sp, r7
 8006e56:	bd80      	pop	{r7, pc}
 8006e58:	0800f2cc 	.word	0x0800f2cc
 8006e5c:	0800f2d4 	.word	0x0800f2d4
 8006e60:	0800f2dc 	.word	0x0800f2dc
 8006e64:	0800f2e4 	.word	0x0800f2e4
 8006e68:	0800f2ec 	.word	0x0800f2ec
 8006e6c:	0800f2f4 	.word	0x0800f2f4
 8006e70:	0800f2fc 	.word	0x0800f2fc
 8006e74:	0800f304 	.word	0x0800f304

08006e78 <LCD_Init>:
/* STATIC FUNCTIONS ----------------------------------------------------------*/

/* GLOBAL FUNCTIONS ----------------------------------------------------------*/
void LCD_Init(void){
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	af00      	add	r7, sp, #0
	  HAL_Delay(50);
 8006e7c:	2032      	movs	r0, #50	; 0x32
 8006e7e:	f000 ff45 	bl	8007d0c <HAL_Delay>
	  LCD_SendCommand(0x03);
 8006e82:	2003      	movs	r0, #3
 8006e84:	f000 f832 	bl	8006eec <LCD_SendCommand>
	  HAL_Delay(5);
 8006e88:	2005      	movs	r0, #5
 8006e8a:	f000 ff3f 	bl	8007d0c <HAL_Delay>
	  LCD_SendCommand(0x03);
 8006e8e:	2003      	movs	r0, #3
 8006e90:	f000 f82c 	bl	8006eec <LCD_SendCommand>
	  HAL_Delay(1);
 8006e94:	2001      	movs	r0, #1
 8006e96:	f000 ff39 	bl	8007d0c <HAL_Delay>
	  LCD_SendCommand(0x03);
 8006e9a:	2003      	movs	r0, #3
 8006e9c:	f000 f826 	bl	8006eec <LCD_SendCommand>
	  HAL_Delay(1);
 8006ea0:	2001      	movs	r0, #1
 8006ea2:	f000 ff33 	bl	8007d0c <HAL_Delay>
	  LCD_SendCommand(0x02);
 8006ea6:	2002      	movs	r0, #2
 8006ea8:	f000 f820 	bl	8006eec <LCD_SendCommand>
	  HAL_Delay(1);
 8006eac:	2001      	movs	r0, #1
 8006eae:	f000 ff2d 	bl	8007d0c <HAL_Delay>

	  LCD_SendCommand(0x28);
 8006eb2:	2028      	movs	r0, #40	; 0x28
 8006eb4:	f000 f81a 	bl	8006eec <LCD_SendCommand>
	  HAL_Delay(1);
 8006eb8:	2001      	movs	r0, #1
 8006eba:	f000 ff27 	bl	8007d0c <HAL_Delay>

	  LCD_SendCommand(0x0C);
 8006ebe:	200c      	movs	r0, #12
 8006ec0:	f000 f814 	bl	8006eec <LCD_SendCommand>
	  HAL_Delay(1);
 8006ec4:	2001      	movs	r0, #1
 8006ec6:	f000 ff21 	bl	8007d0c <HAL_Delay>

	  LCD_SendCommand(0x01);
 8006eca:	2001      	movs	r0, #1
 8006ecc:	f000 f80e 	bl	8006eec <LCD_SendCommand>
	  HAL_Delay(2);
 8006ed0:	2002      	movs	r0, #2
 8006ed2:	f000 ff1b 	bl	8007d0c <HAL_Delay>

	  LCD_SendCommand(0x06);
 8006ed6:	2006      	movs	r0, #6
 8006ed8:	f000 f808 	bl	8006eec <LCD_SendCommand>
	  HAL_Delay(1);
 8006edc:	2001      	movs	r0, #1
 8006ede:	f000 ff15 	bl	8007d0c <HAL_Delay>
	  LCD_SpecialChar();
 8006ee2:	f7ff fedb 	bl	8006c9c <LCD_SpecialChar>
}
 8006ee6:	bf00      	nop
 8006ee8:	bd80      	pop	{r7, pc}
	...

08006eec <LCD_SendCommand>:

void LCD_SendCommand(uint8_t cmd){
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b082      	sub	sp, #8
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	71fb      	strb	r3, [r7, #7]
	  // Send high nibble
	  HAL_GPIO_WritePin(myLCD.RSP, myLCD.RS, GPIO_PIN_RESET);
 8006ef6:	4b4a      	ldr	r3, [pc, #296]	; (8007020 <LCD_SendCommand+0x134>)
 8006ef8:	6a1b      	ldr	r3, [r3, #32]
 8006efa:	4a49      	ldr	r2, [pc, #292]	; (8007020 <LCD_SendCommand+0x134>)
 8006efc:	8951      	ldrh	r1, [r2, #10]
 8006efe:	2200      	movs	r2, #0
 8006f00:	4618      	mov	r0, r3
 8006f02:	f002 f870 	bl	8008fe6 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(myLCD.D4P, myLCD.D4, (cmd & 0x10) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8006f06:	4b46      	ldr	r3, [pc, #280]	; (8007020 <LCD_SendCommand+0x134>)
 8006f08:	68d8      	ldr	r0, [r3, #12]
 8006f0a:	4b45      	ldr	r3, [pc, #276]	; (8007020 <LCD_SendCommand+0x134>)
 8006f0c:	8819      	ldrh	r1, [r3, #0]
 8006f0e:	79fb      	ldrb	r3, [r7, #7]
 8006f10:	111b      	asrs	r3, r3, #4
 8006f12:	b2db      	uxtb	r3, r3
 8006f14:	f003 0301 	and.w	r3, r3, #1
 8006f18:	b2db      	uxtb	r3, r3
 8006f1a:	461a      	mov	r2, r3
 8006f1c:	f002 f863 	bl	8008fe6 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(myLCD.D5P, myLCD.D5, (cmd & 0x20) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8006f20:	4b3f      	ldr	r3, [pc, #252]	; (8007020 <LCD_SendCommand+0x134>)
 8006f22:	6918      	ldr	r0, [r3, #16]
 8006f24:	4b3e      	ldr	r3, [pc, #248]	; (8007020 <LCD_SendCommand+0x134>)
 8006f26:	8859      	ldrh	r1, [r3, #2]
 8006f28:	79fb      	ldrb	r3, [r7, #7]
 8006f2a:	115b      	asrs	r3, r3, #5
 8006f2c:	b2db      	uxtb	r3, r3
 8006f2e:	f003 0301 	and.w	r3, r3, #1
 8006f32:	b2db      	uxtb	r3, r3
 8006f34:	461a      	mov	r2, r3
 8006f36:	f002 f856 	bl	8008fe6 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(myLCD.D6P, myLCD.D6, (cmd & 0x40) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8006f3a:	4b39      	ldr	r3, [pc, #228]	; (8007020 <LCD_SendCommand+0x134>)
 8006f3c:	6958      	ldr	r0, [r3, #20]
 8006f3e:	4b38      	ldr	r3, [pc, #224]	; (8007020 <LCD_SendCommand+0x134>)
 8006f40:	8899      	ldrh	r1, [r3, #4]
 8006f42:	79fb      	ldrb	r3, [r7, #7]
 8006f44:	119b      	asrs	r3, r3, #6
 8006f46:	b2db      	uxtb	r3, r3
 8006f48:	f003 0301 	and.w	r3, r3, #1
 8006f4c:	b2db      	uxtb	r3, r3
 8006f4e:	461a      	mov	r2, r3
 8006f50:	f002 f849 	bl	8008fe6 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(myLCD.D7P, myLCD.D7, (cmd & 0x80) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8006f54:	4b32      	ldr	r3, [pc, #200]	; (8007020 <LCD_SendCommand+0x134>)
 8006f56:	6998      	ldr	r0, [r3, #24]
 8006f58:	4b31      	ldr	r3, [pc, #196]	; (8007020 <LCD_SendCommand+0x134>)
 8006f5a:	88d9      	ldrh	r1, [r3, #6]
 8006f5c:	79fb      	ldrb	r3, [r7, #7]
 8006f5e:	09db      	lsrs	r3, r3, #7
 8006f60:	b2db      	uxtb	r3, r3
 8006f62:	461a      	mov	r2, r3
 8006f64:	f002 f83f 	bl	8008fe6 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(myLCD.ENP, myLCD.EN, GPIO_PIN_SET);
 8006f68:	4b2d      	ldr	r3, [pc, #180]	; (8007020 <LCD_SendCommand+0x134>)
 8006f6a:	69db      	ldr	r3, [r3, #28]
 8006f6c:	4a2c      	ldr	r2, [pc, #176]	; (8007020 <LCD_SendCommand+0x134>)
 8006f6e:	8911      	ldrh	r1, [r2, #8]
 8006f70:	2201      	movs	r2, #1
 8006f72:	4618      	mov	r0, r3
 8006f74:	f002 f837 	bl	8008fe6 <HAL_GPIO_WritePin>
	  HAL_Delay(1);
 8006f78:	2001      	movs	r0, #1
 8006f7a:	f000 fec7 	bl	8007d0c <HAL_Delay>
	  HAL_GPIO_WritePin(myLCD.ENP, myLCD.EN, GPIO_PIN_RESET);
 8006f7e:	4b28      	ldr	r3, [pc, #160]	; (8007020 <LCD_SendCommand+0x134>)
 8006f80:	69db      	ldr	r3, [r3, #28]
 8006f82:	4a27      	ldr	r2, [pc, #156]	; (8007020 <LCD_SendCommand+0x134>)
 8006f84:	8911      	ldrh	r1, [r2, #8]
 8006f86:	2200      	movs	r2, #0
 8006f88:	4618      	mov	r0, r3
 8006f8a:	f002 f82c 	bl	8008fe6 <HAL_GPIO_WritePin>

	  // Send low nibble
	  HAL_GPIO_WritePin(myLCD.D4P, myLCD.D4, (cmd & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8006f8e:	4b24      	ldr	r3, [pc, #144]	; (8007020 <LCD_SendCommand+0x134>)
 8006f90:	68d8      	ldr	r0, [r3, #12]
 8006f92:	4b23      	ldr	r3, [pc, #140]	; (8007020 <LCD_SendCommand+0x134>)
 8006f94:	8819      	ldrh	r1, [r3, #0]
 8006f96:	79fb      	ldrb	r3, [r7, #7]
 8006f98:	f003 0301 	and.w	r3, r3, #1
 8006f9c:	b2db      	uxtb	r3, r3
 8006f9e:	461a      	mov	r2, r3
 8006fa0:	f002 f821 	bl	8008fe6 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(myLCD.D5P, myLCD.D5, (cmd & 0x02) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8006fa4:	4b1e      	ldr	r3, [pc, #120]	; (8007020 <LCD_SendCommand+0x134>)
 8006fa6:	6918      	ldr	r0, [r3, #16]
 8006fa8:	4b1d      	ldr	r3, [pc, #116]	; (8007020 <LCD_SendCommand+0x134>)
 8006faa:	8859      	ldrh	r1, [r3, #2]
 8006fac:	79fb      	ldrb	r3, [r7, #7]
 8006fae:	105b      	asrs	r3, r3, #1
 8006fb0:	b2db      	uxtb	r3, r3
 8006fb2:	f003 0301 	and.w	r3, r3, #1
 8006fb6:	b2db      	uxtb	r3, r3
 8006fb8:	461a      	mov	r2, r3
 8006fba:	f002 f814 	bl	8008fe6 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(myLCD.D6P, myLCD.D6, (cmd & 0x04) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8006fbe:	4b18      	ldr	r3, [pc, #96]	; (8007020 <LCD_SendCommand+0x134>)
 8006fc0:	6958      	ldr	r0, [r3, #20]
 8006fc2:	4b17      	ldr	r3, [pc, #92]	; (8007020 <LCD_SendCommand+0x134>)
 8006fc4:	8899      	ldrh	r1, [r3, #4]
 8006fc6:	79fb      	ldrb	r3, [r7, #7]
 8006fc8:	109b      	asrs	r3, r3, #2
 8006fca:	b2db      	uxtb	r3, r3
 8006fcc:	f003 0301 	and.w	r3, r3, #1
 8006fd0:	b2db      	uxtb	r3, r3
 8006fd2:	461a      	mov	r2, r3
 8006fd4:	f002 f807 	bl	8008fe6 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(myLCD.D7P, myLCD.D7, (cmd & 0x08) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8006fd8:	4b11      	ldr	r3, [pc, #68]	; (8007020 <LCD_SendCommand+0x134>)
 8006fda:	6998      	ldr	r0, [r3, #24]
 8006fdc:	4b10      	ldr	r3, [pc, #64]	; (8007020 <LCD_SendCommand+0x134>)
 8006fde:	88d9      	ldrh	r1, [r3, #6]
 8006fe0:	79fb      	ldrb	r3, [r7, #7]
 8006fe2:	10db      	asrs	r3, r3, #3
 8006fe4:	b2db      	uxtb	r3, r3
 8006fe6:	f003 0301 	and.w	r3, r3, #1
 8006fea:	b2db      	uxtb	r3, r3
 8006fec:	461a      	mov	r2, r3
 8006fee:	f001 fffa 	bl	8008fe6 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(myLCD.ENP, myLCD.EN, GPIO_PIN_SET);
 8006ff2:	4b0b      	ldr	r3, [pc, #44]	; (8007020 <LCD_SendCommand+0x134>)
 8006ff4:	69db      	ldr	r3, [r3, #28]
 8006ff6:	4a0a      	ldr	r2, [pc, #40]	; (8007020 <LCD_SendCommand+0x134>)
 8006ff8:	8911      	ldrh	r1, [r2, #8]
 8006ffa:	2201      	movs	r2, #1
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	f001 fff2 	bl	8008fe6 <HAL_GPIO_WritePin>
	  HAL_Delay(1);
 8007002:	2001      	movs	r0, #1
 8007004:	f000 fe82 	bl	8007d0c <HAL_Delay>
	  HAL_GPIO_WritePin(myLCD.ENP, myLCD.EN, GPIO_PIN_RESET);
 8007008:	4b05      	ldr	r3, [pc, #20]	; (8007020 <LCD_SendCommand+0x134>)
 800700a:	69db      	ldr	r3, [r3, #28]
 800700c:	4a04      	ldr	r2, [pc, #16]	; (8007020 <LCD_SendCommand+0x134>)
 800700e:	8911      	ldrh	r1, [r2, #8]
 8007010:	2200      	movs	r2, #0
 8007012:	4618      	mov	r0, r3
 8007014:	f001 ffe7 	bl	8008fe6 <HAL_GPIO_WritePin>
}
 8007018:	bf00      	nop
 800701a:	3708      	adds	r7, #8
 800701c:	46bd      	mov	sp, r7
 800701e:	bd80      	pop	{r7, pc}
 8007020:	200004b4 	.word	0x200004b4

08007024 <LCD_SendData>:

void LCD_SendData(uint8_t data){
 8007024:	b580      	push	{r7, lr}
 8007026:	b082      	sub	sp, #8
 8007028:	af00      	add	r7, sp, #0
 800702a:	4603      	mov	r3, r0
 800702c:	71fb      	strb	r3, [r7, #7]
	  // Send high nibble
	  HAL_GPIO_WritePin(myLCD.RSP, myLCD.RS, GPIO_PIN_SET);
 800702e:	4b4a      	ldr	r3, [pc, #296]	; (8007158 <LCD_SendData+0x134>)
 8007030:	6a1b      	ldr	r3, [r3, #32]
 8007032:	4a49      	ldr	r2, [pc, #292]	; (8007158 <LCD_SendData+0x134>)
 8007034:	8951      	ldrh	r1, [r2, #10]
 8007036:	2201      	movs	r2, #1
 8007038:	4618      	mov	r0, r3
 800703a:	f001 ffd4 	bl	8008fe6 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(myLCD.D4P, myLCD.D4, (data & 0x10) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800703e:	4b46      	ldr	r3, [pc, #280]	; (8007158 <LCD_SendData+0x134>)
 8007040:	68d8      	ldr	r0, [r3, #12]
 8007042:	4b45      	ldr	r3, [pc, #276]	; (8007158 <LCD_SendData+0x134>)
 8007044:	8819      	ldrh	r1, [r3, #0]
 8007046:	79fb      	ldrb	r3, [r7, #7]
 8007048:	111b      	asrs	r3, r3, #4
 800704a:	b2db      	uxtb	r3, r3
 800704c:	f003 0301 	and.w	r3, r3, #1
 8007050:	b2db      	uxtb	r3, r3
 8007052:	461a      	mov	r2, r3
 8007054:	f001 ffc7 	bl	8008fe6 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(myLCD.D5P, myLCD.D5, (data & 0x20) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8007058:	4b3f      	ldr	r3, [pc, #252]	; (8007158 <LCD_SendData+0x134>)
 800705a:	6918      	ldr	r0, [r3, #16]
 800705c:	4b3e      	ldr	r3, [pc, #248]	; (8007158 <LCD_SendData+0x134>)
 800705e:	8859      	ldrh	r1, [r3, #2]
 8007060:	79fb      	ldrb	r3, [r7, #7]
 8007062:	115b      	asrs	r3, r3, #5
 8007064:	b2db      	uxtb	r3, r3
 8007066:	f003 0301 	and.w	r3, r3, #1
 800706a:	b2db      	uxtb	r3, r3
 800706c:	461a      	mov	r2, r3
 800706e:	f001 ffba 	bl	8008fe6 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(myLCD.D6P, myLCD.D6, (data & 0x40) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8007072:	4b39      	ldr	r3, [pc, #228]	; (8007158 <LCD_SendData+0x134>)
 8007074:	6958      	ldr	r0, [r3, #20]
 8007076:	4b38      	ldr	r3, [pc, #224]	; (8007158 <LCD_SendData+0x134>)
 8007078:	8899      	ldrh	r1, [r3, #4]
 800707a:	79fb      	ldrb	r3, [r7, #7]
 800707c:	119b      	asrs	r3, r3, #6
 800707e:	b2db      	uxtb	r3, r3
 8007080:	f003 0301 	and.w	r3, r3, #1
 8007084:	b2db      	uxtb	r3, r3
 8007086:	461a      	mov	r2, r3
 8007088:	f001 ffad 	bl	8008fe6 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(myLCD.D7P, myLCD.D7, (data & 0x80) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800708c:	4b32      	ldr	r3, [pc, #200]	; (8007158 <LCD_SendData+0x134>)
 800708e:	6998      	ldr	r0, [r3, #24]
 8007090:	4b31      	ldr	r3, [pc, #196]	; (8007158 <LCD_SendData+0x134>)
 8007092:	88d9      	ldrh	r1, [r3, #6]
 8007094:	79fb      	ldrb	r3, [r7, #7]
 8007096:	09db      	lsrs	r3, r3, #7
 8007098:	b2db      	uxtb	r3, r3
 800709a:	461a      	mov	r2, r3
 800709c:	f001 ffa3 	bl	8008fe6 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(myLCD.ENP, myLCD.EN, GPIO_PIN_SET);
 80070a0:	4b2d      	ldr	r3, [pc, #180]	; (8007158 <LCD_SendData+0x134>)
 80070a2:	69db      	ldr	r3, [r3, #28]
 80070a4:	4a2c      	ldr	r2, [pc, #176]	; (8007158 <LCD_SendData+0x134>)
 80070a6:	8911      	ldrh	r1, [r2, #8]
 80070a8:	2201      	movs	r2, #1
 80070aa:	4618      	mov	r0, r3
 80070ac:	f001 ff9b 	bl	8008fe6 <HAL_GPIO_WritePin>
	  HAL_Delay(1);
 80070b0:	2001      	movs	r0, #1
 80070b2:	f000 fe2b 	bl	8007d0c <HAL_Delay>
	  HAL_GPIO_WritePin(myLCD.ENP, myLCD.EN, GPIO_PIN_RESET);
 80070b6:	4b28      	ldr	r3, [pc, #160]	; (8007158 <LCD_SendData+0x134>)
 80070b8:	69db      	ldr	r3, [r3, #28]
 80070ba:	4a27      	ldr	r2, [pc, #156]	; (8007158 <LCD_SendData+0x134>)
 80070bc:	8911      	ldrh	r1, [r2, #8]
 80070be:	2200      	movs	r2, #0
 80070c0:	4618      	mov	r0, r3
 80070c2:	f001 ff90 	bl	8008fe6 <HAL_GPIO_WritePin>

	  // Send low nibble
	  HAL_GPIO_WritePin(myLCD.D4P, myLCD.D4, (data & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80070c6:	4b24      	ldr	r3, [pc, #144]	; (8007158 <LCD_SendData+0x134>)
 80070c8:	68d8      	ldr	r0, [r3, #12]
 80070ca:	4b23      	ldr	r3, [pc, #140]	; (8007158 <LCD_SendData+0x134>)
 80070cc:	8819      	ldrh	r1, [r3, #0]
 80070ce:	79fb      	ldrb	r3, [r7, #7]
 80070d0:	f003 0301 	and.w	r3, r3, #1
 80070d4:	b2db      	uxtb	r3, r3
 80070d6:	461a      	mov	r2, r3
 80070d8:	f001 ff85 	bl	8008fe6 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(myLCD.D5P, myLCD.D5, (data & 0x02) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80070dc:	4b1e      	ldr	r3, [pc, #120]	; (8007158 <LCD_SendData+0x134>)
 80070de:	6918      	ldr	r0, [r3, #16]
 80070e0:	4b1d      	ldr	r3, [pc, #116]	; (8007158 <LCD_SendData+0x134>)
 80070e2:	8859      	ldrh	r1, [r3, #2]
 80070e4:	79fb      	ldrb	r3, [r7, #7]
 80070e6:	105b      	asrs	r3, r3, #1
 80070e8:	b2db      	uxtb	r3, r3
 80070ea:	f003 0301 	and.w	r3, r3, #1
 80070ee:	b2db      	uxtb	r3, r3
 80070f0:	461a      	mov	r2, r3
 80070f2:	f001 ff78 	bl	8008fe6 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(myLCD.D6P, myLCD.D6, (data & 0x04) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80070f6:	4b18      	ldr	r3, [pc, #96]	; (8007158 <LCD_SendData+0x134>)
 80070f8:	6958      	ldr	r0, [r3, #20]
 80070fa:	4b17      	ldr	r3, [pc, #92]	; (8007158 <LCD_SendData+0x134>)
 80070fc:	8899      	ldrh	r1, [r3, #4]
 80070fe:	79fb      	ldrb	r3, [r7, #7]
 8007100:	109b      	asrs	r3, r3, #2
 8007102:	b2db      	uxtb	r3, r3
 8007104:	f003 0301 	and.w	r3, r3, #1
 8007108:	b2db      	uxtb	r3, r3
 800710a:	461a      	mov	r2, r3
 800710c:	f001 ff6b 	bl	8008fe6 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(myLCD.D7P, myLCD.D7, (data & 0x08) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8007110:	4b11      	ldr	r3, [pc, #68]	; (8007158 <LCD_SendData+0x134>)
 8007112:	6998      	ldr	r0, [r3, #24]
 8007114:	4b10      	ldr	r3, [pc, #64]	; (8007158 <LCD_SendData+0x134>)
 8007116:	88d9      	ldrh	r1, [r3, #6]
 8007118:	79fb      	ldrb	r3, [r7, #7]
 800711a:	10db      	asrs	r3, r3, #3
 800711c:	b2db      	uxtb	r3, r3
 800711e:	f003 0301 	and.w	r3, r3, #1
 8007122:	b2db      	uxtb	r3, r3
 8007124:	461a      	mov	r2, r3
 8007126:	f001 ff5e 	bl	8008fe6 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(myLCD.ENP, myLCD.EN, GPIO_PIN_SET);
 800712a:	4b0b      	ldr	r3, [pc, #44]	; (8007158 <LCD_SendData+0x134>)
 800712c:	69db      	ldr	r3, [r3, #28]
 800712e:	4a0a      	ldr	r2, [pc, #40]	; (8007158 <LCD_SendData+0x134>)
 8007130:	8911      	ldrh	r1, [r2, #8]
 8007132:	2201      	movs	r2, #1
 8007134:	4618      	mov	r0, r3
 8007136:	f001 ff56 	bl	8008fe6 <HAL_GPIO_WritePin>
	  HAL_Delay(1);
 800713a:	2001      	movs	r0, #1
 800713c:	f000 fde6 	bl	8007d0c <HAL_Delay>
	  HAL_GPIO_WritePin(myLCD.ENP, myLCD.EN, GPIO_PIN_RESET);
 8007140:	4b05      	ldr	r3, [pc, #20]	; (8007158 <LCD_SendData+0x134>)
 8007142:	69db      	ldr	r3, [r3, #28]
 8007144:	4a04      	ldr	r2, [pc, #16]	; (8007158 <LCD_SendData+0x134>)
 8007146:	8911      	ldrh	r1, [r2, #8]
 8007148:	2200      	movs	r2, #0
 800714a:	4618      	mov	r0, r3
 800714c:	f001 ff4b 	bl	8008fe6 <HAL_GPIO_WritePin>
}
 8007150:	bf00      	nop
 8007152:	3708      	adds	r7, #8
 8007154:	46bd      	mov	sp, r7
 8007156:	bd80      	pop	{r7, pc}
 8007158:	200004b4 	.word	0x200004b4

0800715c <LCD_GotoXY>:

void LCD_GotoXY(uint8_t x, uint8_t y){
 800715c:	b580      	push	{r7, lr}
 800715e:	b084      	sub	sp, #16
 8007160:	af00      	add	r7, sp, #0
 8007162:	4603      	mov	r3, r0
 8007164:	460a      	mov	r2, r1
 8007166:	71fb      	strb	r3, [r7, #7]
 8007168:	4613      	mov	r3, r2
 800716a:	71bb      	strb	r3, [r7, #6]
    uint8_t address;
    if (y == 0) {
 800716c:	79bb      	ldrb	r3, [r7, #6]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d103      	bne.n	800717a <LCD_GotoXY+0x1e>
        address = 0x80 + x;
 8007172:	79fb      	ldrb	r3, [r7, #7]
 8007174:	3b80      	subs	r3, #128	; 0x80
 8007176:	73fb      	strb	r3, [r7, #15]
 8007178:	e013      	b.n	80071a2 <LCD_GotoXY+0x46>
    } else if (y == 1) {
 800717a:	79bb      	ldrb	r3, [r7, #6]
 800717c:	2b01      	cmp	r3, #1
 800717e:	d103      	bne.n	8007188 <LCD_GotoXY+0x2c>
        address = 0xC0 + x;
 8007180:	79fb      	ldrb	r3, [r7, #7]
 8007182:	3b40      	subs	r3, #64	; 0x40
 8007184:	73fb      	strb	r3, [r7, #15]
 8007186:	e00c      	b.n	80071a2 <LCD_GotoXY+0x46>
    } else if (y == 2){
 8007188:	79bb      	ldrb	r3, [r7, #6]
 800718a:	2b02      	cmp	r3, #2
 800718c:	d103      	bne.n	8007196 <LCD_GotoXY+0x3a>
        address = 0x80 + x + 16;
 800718e:	79fb      	ldrb	r3, [r7, #7]
 8007190:	3b70      	subs	r3, #112	; 0x70
 8007192:	73fb      	strb	r3, [r7, #15]
 8007194:	e005      	b.n	80071a2 <LCD_GotoXY+0x46>
    } else if (y == 3){
 8007196:	79bb      	ldrb	r3, [r7, #6]
 8007198:	2b03      	cmp	r3, #3
 800719a:	d102      	bne.n	80071a2 <LCD_GotoXY+0x46>
        address = 0xC0 + x + 16;
 800719c:	79fb      	ldrb	r3, [r7, #7]
 800719e:	3b30      	subs	r3, #48	; 0x30
 80071a0:	73fb      	strb	r3, [r7, #15]
    }
    LCD_SendCommand(address);
 80071a2:	7bfb      	ldrb	r3, [r7, #15]
 80071a4:	4618      	mov	r0, r3
 80071a6:	f7ff fea1 	bl	8006eec <LCD_SendCommand>
}
 80071aa:	bf00      	nop
 80071ac:	3710      	adds	r7, #16
 80071ae:	46bd      	mov	sp, r7
 80071b0:	bd80      	pop	{r7, pc}

080071b2 <LCD_Print>:

void LCD_Print(char *str){
 80071b2:	b580      	push	{r7, lr}
 80071b4:	b082      	sub	sp, #8
 80071b6:	af00      	add	r7, sp, #0
 80071b8:	6078      	str	r0, [r7, #4]
    while (*str) {
 80071ba:	e006      	b.n	80071ca <LCD_Print+0x18>
        LCD_SendData(*str++);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	1c5a      	adds	r2, r3, #1
 80071c0:	607a      	str	r2, [r7, #4]
 80071c2:	781b      	ldrb	r3, [r3, #0]
 80071c4:	4618      	mov	r0, r3
 80071c6:	f7ff ff2d 	bl	8007024 <LCD_SendData>
    while (*str) {
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	781b      	ldrb	r3, [r3, #0]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d1f4      	bne.n	80071bc <LCD_Print+0xa>
    }
}
 80071d2:	bf00      	nop
 80071d4:	bf00      	nop
 80071d6:	3708      	adds	r7, #8
 80071d8:	46bd      	mov	sp, r7
 80071da:	bd80      	pop	{r7, pc}

080071dc <LCD_Clear>:
	memset(tmpbuffer, 0, 10);
	sprintf((char*)tmpbuffer, "%d", number);
	LCD_Print((char*)tmpbuffer);
}

void LCD_Clear(){
 80071dc:	b580      	push	{r7, lr}
 80071de:	af00      	add	r7, sp, #0
	LCD_SendCommand(0x01);
 80071e0:	2001      	movs	r0, #1
 80071e2:	f7ff fe83 	bl	8006eec <LCD_SendCommand>
}
 80071e6:	bf00      	nop
 80071e8:	bd80      	pop	{r7, pc}
	...

080071ec <Screen_Init>:

/* STATIC FUNCTIONS ----------------------------------------------------------*/

/* GLOBAL FUNCTIONS ----------------------------------------------------------*/
void Screen_Init(_RTC *myRTC)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b082      	sub	sp, #8
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
	__MY_RTC = myRTC;
 80071f4:	4a05      	ldr	r2, [pc, #20]	; (800720c <Screen_Init+0x20>)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6013      	str	r3, [r2, #0]
//	__MY_RTC->Date = 1;
//	__MY_RTC->Hour = 15;
//	__MY_RTC->Min = 17;
//	__MY_RTC->Sec = 0;
//	DS3231_SetTime(__MY_RTC);
	LCD_Init();
 80071fa:	f7ff fe3d 	bl	8006e78 <LCD_Init>
	LCD_Clear();
 80071fe:	f7ff ffed 	bl	80071dc <LCD_Clear>
//	HAL_Delay(1000);
//	LCD_GotoXY(0, 0);
//	LCD_Print("Hello!");
}
 8007202:	bf00      	nop
 8007204:	3708      	adds	r7, #8
 8007206:	46bd      	mov	sp, r7
 8007208:	bd80      	pop	{r7, pc}
 800720a:	bf00      	nop
 800720c:	20002bf4 	.word	0x20002bf4

08007210 <Screen_Home_Origin>:

void Screen_Home_Origin(uint8_t ID, uint8_t connectflag)
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b08a      	sub	sp, #40	; 0x28
 8007214:	af02      	add	r7, sp, #8
 8007216:	4603      	mov	r3, r0
 8007218:	460a      	mov	r2, r1
 800721a:	71fb      	strb	r3, [r7, #7]
 800721c:	4613      	mov	r3, r2
 800721e:	71bb      	strb	r3, [r7, #6]
    char buffer[20];
    DS3231_GetTime(__MY_RTC);
 8007220:	4b3c      	ldr	r3, [pc, #240]	; (8007314 <Screen_Home_Origin+0x104>)
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	4618      	mov	r0, r3
 8007226:	f7fc ff3b 	bl	80040a0 <DS3231_GetTime>
//	LCD_Clear();
    LCD_GotoXY(11, 1);
 800722a:	2101      	movs	r1, #1
 800722c:	200b      	movs	r0, #11
 800722e:	f7ff ff95 	bl	800715c <LCD_GotoXY>
    LCD_Print("NETW");
 8007232:	4839      	ldr	r0, [pc, #228]	; (8007318 <Screen_Home_Origin+0x108>)
 8007234:	f7ff ffbd 	bl	80071b2 <LCD_Print>
    LCD_GotoXY(12, 2);
 8007238:	2102      	movs	r1, #2
 800723a:	200c      	movs	r0, #12
 800723c:	f7ff ff8e 	bl	800715c <LCD_GotoXY>
    if (connectflag)	{
 8007240:	79bb      	ldrb	r3, [r7, #6]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d003      	beq.n	800724e <Screen_Home_Origin+0x3e>
    	LCD_Print("ONL");
 8007246:	4835      	ldr	r0, [pc, #212]	; (800731c <Screen_Home_Origin+0x10c>)
 8007248:	f7ff ffb3 	bl	80071b2 <LCD_Print>
 800724c:	e002      	b.n	8007254 <Screen_Home_Origin+0x44>
    }
    else {
    	LCD_Print("OFF");
 800724e:	4834      	ldr	r0, [pc, #208]	; (8007320 <Screen_Home_Origin+0x110>)
 8007250:	f7ff ffaf 	bl	80071b2 <LCD_Print>
    }

	LCD_GotoXY(0, 0);
 8007254:	2100      	movs	r1, #0
 8007256:	2000      	movs	r0, #0
 8007258:	f7ff ff80 	bl	800715c <LCD_GotoXY>
//	LCD_Print("Station Node");
//    LCD_GotoXY(0, 1);
    sprintf(buffer,"Station ID: 0x%02X", ID);
 800725c:	79fa      	ldrb	r2, [r7, #7]
 800725e:	f107 030c 	add.w	r3, r7, #12
 8007262:	4930      	ldr	r1, [pc, #192]	; (8007324 <Screen_Home_Origin+0x114>)
 8007264:	4618      	mov	r0, r3
 8007266:	f005 fb7b 	bl	800c960 <siprintf>
    LCD_Print(buffer);
 800726a:	f107 030c 	add.w	r3, r7, #12
 800726e:	4618      	mov	r0, r3
 8007270:	f7ff ff9f 	bl	80071b2 <LCD_Print>
    LCD_GotoXY(0, 1);
 8007274:	2101      	movs	r1, #1
 8007276:	2000      	movs	r0, #0
 8007278:	f7ff ff70 	bl	800715c <LCD_GotoXY>
    sprintf(buffer,"%02d/%02d/%d", __MY_RTC->Date, __MY_RTC->Month, __MY_RTC->Year);
 800727c:	4b25      	ldr	r3, [pc, #148]	; (8007314 <Screen_Home_Origin+0x104>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	789b      	ldrb	r3, [r3, #2]
 8007282:	461a      	mov	r2, r3
 8007284:	4b23      	ldr	r3, [pc, #140]	; (8007314 <Screen_Home_Origin+0x104>)
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	785b      	ldrb	r3, [r3, #1]
 800728a:	4619      	mov	r1, r3
 800728c:	4b21      	ldr	r3, [pc, #132]	; (8007314 <Screen_Home_Origin+0x104>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	781b      	ldrb	r3, [r3, #0]
 8007292:	f107 000c 	add.w	r0, r7, #12
 8007296:	9300      	str	r3, [sp, #0]
 8007298:	460b      	mov	r3, r1
 800729a:	4923      	ldr	r1, [pc, #140]	; (8007328 <Screen_Home_Origin+0x118>)
 800729c:	f005 fb60 	bl	800c960 <siprintf>
    LCD_Print(buffer);
 80072a0:	f107 030c 	add.w	r3, r7, #12
 80072a4:	4618      	mov	r0, r3
 80072a6:	f7ff ff84 	bl	80071b2 <LCD_Print>
    LCD_GotoXY(0, 2);
 80072aa:	2102      	movs	r1, #2
 80072ac:	2000      	movs	r0, #0
 80072ae:	f7ff ff55 	bl	800715c <LCD_GotoXY>
    sprintf(buffer,"%02d:%02d:%02d", __MY_RTC->Hour, __MY_RTC->Min, __MY_RTC->Sec);
 80072b2:	4b18      	ldr	r3, [pc, #96]	; (8007314 <Screen_Home_Origin+0x104>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	791b      	ldrb	r3, [r3, #4]
 80072b8:	461a      	mov	r2, r3
 80072ba:	4b16      	ldr	r3, [pc, #88]	; (8007314 <Screen_Home_Origin+0x104>)
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	795b      	ldrb	r3, [r3, #5]
 80072c0:	4619      	mov	r1, r3
 80072c2:	4b14      	ldr	r3, [pc, #80]	; (8007314 <Screen_Home_Origin+0x104>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	799b      	ldrb	r3, [r3, #6]
 80072c8:	f107 000c 	add.w	r0, r7, #12
 80072cc:	9300      	str	r3, [sp, #0]
 80072ce:	460b      	mov	r3, r1
 80072d0:	4916      	ldr	r1, [pc, #88]	; (800732c <Screen_Home_Origin+0x11c>)
 80072d2:	f005 fb45 	bl	800c960 <siprintf>
    LCD_Print(buffer);
 80072d6:	f107 030c 	add.w	r3, r7, #12
 80072da:	4618      	mov	r0, r3
 80072dc:	f7ff ff69 	bl	80071b2 <LCD_Print>
    LCD_GotoXY(5, 3);
 80072e0:	2103      	movs	r1, #3
 80072e2:	2005      	movs	r0, #5
 80072e4:	f7ff ff3a 	bl	800715c <LCD_GotoXY>
    LCD_SendData(_LCD_CHAR_LEFT);
 80072e8:	2002      	movs	r0, #2
 80072ea:	f7ff fe9b 	bl	8007024 <LCD_SendData>
    LCD_GotoXY(6, 3);
 80072ee:	2103      	movs	r1, #3
 80072f0:	2006      	movs	r0, #6
 80072f2:	f7ff ff33 	bl	800715c <LCD_GotoXY>
    LCD_Print("HOME");
 80072f6:	480e      	ldr	r0, [pc, #56]	; (8007330 <Screen_Home_Origin+0x120>)
 80072f8:	f7ff ff5b 	bl	80071b2 <LCD_Print>
    LCD_GotoXY(10,3);
 80072fc:	2103      	movs	r1, #3
 80072fe:	200a      	movs	r0, #10
 8007300:	f7ff ff2c 	bl	800715c <LCD_GotoXY>
    LCD_SendData(_LCD_CHAR_RIGHT);
 8007304:	2000      	movs	r0, #0
 8007306:	f7ff fe8d 	bl	8007024 <LCD_SendData>
}
 800730a:	bf00      	nop
 800730c:	3720      	adds	r7, #32
 800730e:	46bd      	mov	sp, r7
 8007310:	bd80      	pop	{r7, pc}
 8007312:	bf00      	nop
 8007314:	20002bf4 	.word	0x20002bf4
 8007318:	0800f310 	.word	0x0800f310
 800731c:	0800f318 	.word	0x0800f318
 8007320:	0800f31c 	.word	0x0800f31c
 8007324:	0800f320 	.word	0x0800f320
 8007328:	0800f334 	.word	0x0800f334
 800732c:	0800f344 	.word	0x0800f344
 8007330:	0800f354 	.word	0x0800f354

08007334 <Screen_Home_Sync>:

void Screen_Home_Sync(uint16_t time)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b088      	sub	sp, #32
 8007338:	af00      	add	r7, sp, #0
 800733a:	4603      	mov	r3, r0
 800733c:	80fb      	strh	r3, [r7, #6]
    char buffer[20];
//	LCD_Clear();
	LCD_GotoXY(1, 0);
 800733e:	2100      	movs	r1, #0
 8007340:	2001      	movs	r0, #1
 8007342:	f7ff ff0b 	bl	800715c <LCD_GotoXY>
	LCD_Print("Received Order");
 8007346:	481d      	ldr	r0, [pc, #116]	; (80073bc <Screen_Home_Sync+0x88>)
 8007348:	f7ff ff33 	bl	80071b2 <LCD_Print>

    LCD_GotoXY(1, 1);
 800734c:	2101      	movs	r1, #1
 800734e:	2001      	movs	r0, #1
 8007350:	f7ff ff04 	bl	800715c <LCD_GotoXY>
    LCD_Print("OFF after:");
 8007354:	481a      	ldr	r0, [pc, #104]	; (80073c0 <Screen_Home_Sync+0x8c>)
 8007356:	f7ff ff2c 	bl	80071b2 <LCD_Print>
    LCD_GotoXY(6, 2);
 800735a:	2102      	movs	r1, #2
 800735c:	2006      	movs	r0, #6
 800735e:	f7ff fefd 	bl	800715c <LCD_GotoXY>
    LCD_Print("     ");
 8007362:	4818      	ldr	r0, [pc, #96]	; (80073c4 <Screen_Home_Sync+0x90>)
 8007364:	f7ff ff25 	bl	80071b2 <LCD_Print>
    LCD_GotoXY(6, 2);
 8007368:	2102      	movs	r1, #2
 800736a:	2006      	movs	r0, #6
 800736c:	f7ff fef6 	bl	800715c <LCD_GotoXY>
    sprintf(buffer, "%ds", time);
 8007370:	88fa      	ldrh	r2, [r7, #6]
 8007372:	f107 030c 	add.w	r3, r7, #12
 8007376:	4914      	ldr	r1, [pc, #80]	; (80073c8 <Screen_Home_Sync+0x94>)
 8007378:	4618      	mov	r0, r3
 800737a:	f005 faf1 	bl	800c960 <siprintf>
    LCD_Print(buffer);
 800737e:	f107 030c 	add.w	r3, r7, #12
 8007382:	4618      	mov	r0, r3
 8007384:	f7ff ff15 	bl	80071b2 <LCD_Print>
    LCD_GotoXY(5, 3);
 8007388:	2103      	movs	r1, #3
 800738a:	2005      	movs	r0, #5
 800738c:	f7ff fee6 	bl	800715c <LCD_GotoXY>
    LCD_SendData(_LCD_CHAR_LEFT);
 8007390:	2002      	movs	r0, #2
 8007392:	f7ff fe47 	bl	8007024 <LCD_SendData>
    LCD_GotoXY(6, 3);
 8007396:	2103      	movs	r1, #3
 8007398:	2006      	movs	r0, #6
 800739a:	f7ff fedf 	bl	800715c <LCD_GotoXY>
    LCD_Print("HOME");
 800739e:	480b      	ldr	r0, [pc, #44]	; (80073cc <Screen_Home_Sync+0x98>)
 80073a0:	f7ff ff07 	bl	80071b2 <LCD_Print>
    LCD_GotoXY(10,3);
 80073a4:	2103      	movs	r1, #3
 80073a6:	200a      	movs	r0, #10
 80073a8:	f7ff fed8 	bl	800715c <LCD_GotoXY>
    LCD_SendData(_LCD_CHAR_RIGHT);
 80073ac:	2000      	movs	r0, #0
 80073ae:	f7ff fe39 	bl	8007024 <LCD_SendData>
}
 80073b2:	bf00      	nop
 80073b4:	3720      	adds	r7, #32
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bd80      	pop	{r7, pc}
 80073ba:	bf00      	nop
 80073bc:	0800f35c 	.word	0x0800f35c
 80073c0:	0800f36c 	.word	0x0800f36c
 80073c4:	0800f378 	.word	0x0800f378
 80073c8:	0800f380 	.word	0x0800f380
 80073cc:	0800f354 	.word	0x0800f354

080073d0 <Screen_Home_Calib>:
		LCD_Print(buffer);
	}
}

void Screen_Home_Calib(void)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b088      	sub	sp, #32
 80073d4:	af02      	add	r7, sp, #8
    char buffer[20];
//    DS3231_GetTime(&__MY_RTC);
//	LCD_Clear();
	LCD_GotoXY(1, 0);
 80073d6:	2100      	movs	r1, #0
 80073d8:	2001      	movs	r0, #1
 80073da:	f7ff febf 	bl	800715c <LCD_GotoXY>
	LCD_Print("Received Order");
 80073de:	4827      	ldr	r0, [pc, #156]	; (800747c <Screen_Home_Calib+0xac>)
 80073e0:	f7ff fee7 	bl	80071b2 <LCD_Print>
    LCD_GotoXY(0, 1);
 80073e4:	2101      	movs	r1, #1
 80073e6:	2000      	movs	r0, #0
 80073e8:	f7ff feb8 	bl	800715c <LCD_GotoXY>
    sprintf(buffer,"SWoff: %02dh%02dm%02ds", __MY_RTC->Hour, __MY_RTC->Min, __MY_RTC->Sec);
 80073ec:	4b24      	ldr	r3, [pc, #144]	; (8007480 <Screen_Home_Calib+0xb0>)
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	791b      	ldrb	r3, [r3, #4]
 80073f2:	461a      	mov	r2, r3
 80073f4:	4b22      	ldr	r3, [pc, #136]	; (8007480 <Screen_Home_Calib+0xb0>)
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	795b      	ldrb	r3, [r3, #5]
 80073fa:	4619      	mov	r1, r3
 80073fc:	4b20      	ldr	r3, [pc, #128]	; (8007480 <Screen_Home_Calib+0xb0>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	799b      	ldrb	r3, [r3, #6]
 8007402:	1d38      	adds	r0, r7, #4
 8007404:	9300      	str	r3, [sp, #0]
 8007406:	460b      	mov	r3, r1
 8007408:	491e      	ldr	r1, [pc, #120]	; (8007484 <Screen_Home_Calib+0xb4>)
 800740a:	f005 faa9 	bl	800c960 <siprintf>
    LCD_Print(buffer);
 800740e:	1d3b      	adds	r3, r7, #4
 8007410:	4618      	mov	r0, r3
 8007412:	f7ff fece 	bl	80071b2 <LCD_Print>
    LCD_GotoXY(0, 2);
 8007416:	2102      	movs	r1, #2
 8007418:	2000      	movs	r0, #0
 800741a:	f7ff fe9f 	bl	800715c <LCD_GotoXY>
    sprintf(buffer,"Date:  %02d/%02d/%d", __MY_RTC->Date, __MY_RTC->Month, __MY_RTC->Year);
 800741e:	4b18      	ldr	r3, [pc, #96]	; (8007480 <Screen_Home_Calib+0xb0>)
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	789b      	ldrb	r3, [r3, #2]
 8007424:	461a      	mov	r2, r3
 8007426:	4b16      	ldr	r3, [pc, #88]	; (8007480 <Screen_Home_Calib+0xb0>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	785b      	ldrb	r3, [r3, #1]
 800742c:	4619      	mov	r1, r3
 800742e:	4b14      	ldr	r3, [pc, #80]	; (8007480 <Screen_Home_Calib+0xb0>)
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	781b      	ldrb	r3, [r3, #0]
 8007434:	1d38      	adds	r0, r7, #4
 8007436:	9300      	str	r3, [sp, #0]
 8007438:	460b      	mov	r3, r1
 800743a:	4913      	ldr	r1, [pc, #76]	; (8007488 <Screen_Home_Calib+0xb8>)
 800743c:	f005 fa90 	bl	800c960 <siprintf>
    LCD_Print(buffer);
 8007440:	1d3b      	adds	r3, r7, #4
 8007442:	4618      	mov	r0, r3
 8007444:	f7ff feb5 	bl	80071b2 <LCD_Print>
    LCD_GotoXY(5, 3);
 8007448:	2103      	movs	r1, #3
 800744a:	2005      	movs	r0, #5
 800744c:	f7ff fe86 	bl	800715c <LCD_GotoXY>
    LCD_SendData(_LCD_CHAR_LEFT);
 8007450:	2002      	movs	r0, #2
 8007452:	f7ff fde7 	bl	8007024 <LCD_SendData>
    LCD_GotoXY(6, 3);
 8007456:	2103      	movs	r1, #3
 8007458:	2006      	movs	r0, #6
 800745a:	f7ff fe7f 	bl	800715c <LCD_GotoXY>
    LCD_Print("HOME");
 800745e:	480b      	ldr	r0, [pc, #44]	; (800748c <Screen_Home_Calib+0xbc>)
 8007460:	f7ff fea7 	bl	80071b2 <LCD_Print>
    LCD_GotoXY(10,3);
 8007464:	2103      	movs	r1, #3
 8007466:	200a      	movs	r0, #10
 8007468:	f7ff fe78 	bl	800715c <LCD_GotoXY>
    LCD_SendData(_LCD_CHAR_RIGHT);
 800746c:	2000      	movs	r0, #0
 800746e:	f7ff fdd9 	bl	8007024 <LCD_SendData>
}
 8007472:	bf00      	nop
 8007474:	3718      	adds	r7, #24
 8007476:	46bd      	mov	sp, r7
 8007478:	bd80      	pop	{r7, pc}
 800747a:	bf00      	nop
 800747c:	0800f35c 	.word	0x0800f35c
 8007480:	20002bf4 	.word	0x20002bf4
 8007484:	0800f38c 	.word	0x0800f38c
 8007488:	0800f3a4 	.word	0x0800f3a4
 800748c:	0800f354 	.word	0x0800f354

08007490 <Screen_Monitor_Station>:

void Screen_Monitor_Station(uint8_t mode, uint16_t current)
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b088      	sub	sp, #32
 8007494:	af00      	add	r7, sp, #0
 8007496:	4603      	mov	r3, r0
 8007498:	460a      	mov	r2, r1
 800749a:	71fb      	strb	r3, [r7, #7]
 800749c:	4613      	mov	r3, r2
 800749e:	80bb      	strh	r3, [r7, #4]
    char buffer[20];
	LCD_GotoXY(0, 0);
 80074a0:	2100      	movs	r1, #0
 80074a2:	2000      	movs	r0, #0
 80074a4:	f7ff fe5a 	bl	800715c <LCD_GotoXY>
    LCD_SendData(_LCD_CHAR_UP);
 80074a8:	2006      	movs	r0, #6
 80074aa:	f7ff fdbb 	bl	8007024 <LCD_SendData>
	LCD_GotoXY(1, 0);
 80074ae:	2100      	movs	r1, #0
 80074b0:	2001      	movs	r0, #1
 80074b2:	f7ff fe53 	bl	800715c <LCD_GotoXY>
	LCD_Print("Station Status");
 80074b6:	4822      	ldr	r0, [pc, #136]	; (8007540 <Screen_Monitor_Station+0xb0>)
 80074b8:	f7ff fe7b 	bl	80071b2 <LCD_Print>
    LCD_GotoXY(1, 1);
 80074bc:	2101      	movs	r1, #1
 80074be:	2001      	movs	r0, #1
 80074c0:	f7ff fe4c 	bl	800715c <LCD_GotoXY>
    if (mode == 2)
 80074c4:	79fb      	ldrb	r3, [r7, #7]
 80074c6:	2b02      	cmp	r3, #2
 80074c8:	d103      	bne.n	80074d2 <Screen_Monitor_Station+0x42>
    {
        LCD_Print("Contactor: OFF");
 80074ca:	481e      	ldr	r0, [pc, #120]	; (8007544 <Screen_Monitor_Station+0xb4>)
 80074cc:	f7ff fe71 	bl	80071b2 <LCD_Print>
 80074d0:	e005      	b.n	80074de <Screen_Monitor_Station+0x4e>
    } else if (mode == 1){
 80074d2:	79fb      	ldrb	r3, [r7, #7]
 80074d4:	2b01      	cmp	r3, #1
 80074d6:	d102      	bne.n	80074de <Screen_Monitor_Station+0x4e>
        LCD_Print("Contactor: ON");
 80074d8:	481b      	ldr	r0, [pc, #108]	; (8007548 <Screen_Monitor_Station+0xb8>)
 80074da:	f7ff fe6a 	bl	80071b2 <LCD_Print>
    }
    LCD_GotoXY(1, 2);
 80074de:	2102      	movs	r1, #2
 80074e0:	2001      	movs	r0, #1
 80074e2:	f7ff fe3b 	bl	800715c <LCD_GotoXY>
    sprintf(buffer,"Current: %04dmA", current);
 80074e6:	88ba      	ldrh	r2, [r7, #4]
 80074e8:	f107 030c 	add.w	r3, r7, #12
 80074ec:	4917      	ldr	r1, [pc, #92]	; (800754c <Screen_Monitor_Station+0xbc>)
 80074ee:	4618      	mov	r0, r3
 80074f0:	f005 fa36 	bl	800c960 <siprintf>
    LCD_Print(buffer);
 80074f4:	f107 030c 	add.w	r3, r7, #12
 80074f8:	4618      	mov	r0, r3
 80074fa:	f7ff fe5a 	bl	80071b2 <LCD_Print>
    LCD_GotoXY(0, 2);
 80074fe:	2102      	movs	r1, #2
 8007500:	2000      	movs	r0, #0
 8007502:	f7ff fe2b 	bl	800715c <LCD_GotoXY>
	LCD_SendData(_LCD_CHAR_DOWN);
 8007506:	2007      	movs	r0, #7
 8007508:	f7ff fd8c 	bl	8007024 <LCD_SendData>
    LCD_GotoXY(4, 3);
 800750c:	2103      	movs	r1, #3
 800750e:	2004      	movs	r0, #4
 8007510:	f7ff fe24 	bl	800715c <LCD_GotoXY>
    LCD_SendData(_LCD_CHAR_LEFT);
 8007514:	2002      	movs	r0, #2
 8007516:	f7ff fd85 	bl	8007024 <LCD_SendData>
    LCD_GotoXY(5, 3);
 800751a:	2103      	movs	r1, #3
 800751c:	2005      	movs	r0, #5
 800751e:	f7ff fe1d 	bl	800715c <LCD_GotoXY>
    LCD_Print("MONITOR");
 8007522:	480b      	ldr	r0, [pc, #44]	; (8007550 <Screen_Monitor_Station+0xc0>)
 8007524:	f7ff fe45 	bl	80071b2 <LCD_Print>
    LCD_GotoXY(12,3);
 8007528:	2103      	movs	r1, #3
 800752a:	200c      	movs	r0, #12
 800752c:	f7ff fe16 	bl	800715c <LCD_GotoXY>
    LCD_SendData(_LCD_CHAR_RIGHT);
 8007530:	2000      	movs	r0, #0
 8007532:	f7ff fd77 	bl	8007024 <LCD_SendData>
}
 8007536:	bf00      	nop
 8007538:	3720      	adds	r7, #32
 800753a:	46bd      	mov	sp, r7
 800753c:	bd80      	pop	{r7, pc}
 800753e:	bf00      	nop
 8007540:	0800f3b8 	.word	0x0800f3b8
 8007544:	0800f3c8 	.word	0x0800f3c8
 8007548:	0800f3d8 	.word	0x0800f3d8
 800754c:	0800f3e8 	.word	0x0800f3e8
 8007550:	0800f3f8 	.word	0x0800f3f8

08007554 <Screen_Monitor_Node>:

void Screen_Monitor_Node(uint8_t ID, uint8_t mode, uint16_t battery, uint8_t type, uint16_t voltage)
{
 8007554:	b590      	push	{r4, r7, lr}
 8007556:	b089      	sub	sp, #36	; 0x24
 8007558:	af00      	add	r7, sp, #0
 800755a:	4604      	mov	r4, r0
 800755c:	4608      	mov	r0, r1
 800755e:	4611      	mov	r1, r2
 8007560:	461a      	mov	r2, r3
 8007562:	4623      	mov	r3, r4
 8007564:	71fb      	strb	r3, [r7, #7]
 8007566:	4603      	mov	r3, r0
 8007568:	71bb      	strb	r3, [r7, #6]
 800756a:	460b      	mov	r3, r1
 800756c:	80bb      	strh	r3, [r7, #4]
 800756e:	4613      	mov	r3, r2
 8007570:	70fb      	strb	r3, [r7, #3]
    char buffer[20];
//	LCD_Clear();
	LCD_GotoXY(0, 0);
 8007572:	2100      	movs	r1, #0
 8007574:	2000      	movs	r0, #0
 8007576:	f7ff fdf1 	bl	800715c <LCD_GotoXY>
    LCD_SendData(_LCD_CHAR_UP);
 800757a:	2006      	movs	r0, #6
 800757c:	f7ff fd52 	bl	8007024 <LCD_SendData>
    LCD_GotoXY(1, 0);
 8007580:	2100      	movs	r1, #0
 8007582:	2001      	movs	r0, #1
 8007584:	f7ff fdea 	bl	800715c <LCD_GotoXY>
    sprintf(buffer,"Sensor ID: 0x%02X", ID);
 8007588:	79fa      	ldrb	r2, [r7, #7]
 800758a:	f107 030c 	add.w	r3, r7, #12
 800758e:	4968      	ldr	r1, [pc, #416]	; (8007730 <Screen_Monitor_Node+0x1dc>)
 8007590:	4618      	mov	r0, r3
 8007592:	f005 f9e5 	bl	800c960 <siprintf>
    LCD_Print(buffer);
 8007596:	f107 030c 	add.w	r3, r7, #12
 800759a:	4618      	mov	r0, r3
 800759c:	f7ff fe09 	bl	80071b2 <LCD_Print>
    LCD_GotoXY(1, 1);
 80075a0:	2101      	movs	r1, #1
 80075a2:	2001      	movs	r0, #1
 80075a4:	f7ff fdda 	bl	800715c <LCD_GotoXY>
    if (mode == 2)
 80075a8:	79bb      	ldrb	r3, [r7, #6]
 80075aa:	2b02      	cmp	r3, #2
 80075ac:	d103      	bne.n	80075b6 <Screen_Monitor_Node+0x62>
    {
        LCD_Print("Status: Measure");
 80075ae:	4861      	ldr	r0, [pc, #388]	; (8007734 <Screen_Monitor_Node+0x1e0>)
 80075b0:	f7ff fdff 	bl	80071b2 <LCD_Print>
 80075b4:	e009      	b.n	80075ca <Screen_Monitor_Node+0x76>
    } else if (mode == 1){
 80075b6:	79bb      	ldrb	r3, [r7, #6]
 80075b8:	2b01      	cmp	r3, #1
 80075ba:	d103      	bne.n	80075c4 <Screen_Monitor_Node+0x70>
        LCD_Print("Status: Wake   ");
 80075bc:	485e      	ldr	r0, [pc, #376]	; (8007738 <Screen_Monitor_Node+0x1e4>)
 80075be:	f7ff fdf8 	bl	80071b2 <LCD_Print>
 80075c2:	e002      	b.n	80075ca <Screen_Monitor_Node+0x76>
    }
    else {
    	LCD_Print("Status: Sleep  ");
 80075c4:	485d      	ldr	r0, [pc, #372]	; (800773c <Screen_Monitor_Node+0x1e8>)
 80075c6:	f7ff fdf4 	bl	80071b2 <LCD_Print>
    }
    LCD_GotoXY(1, 2);
 80075ca:	2102      	movs	r1, #2
 80075cc:	2001      	movs	r0, #1
 80075ce:	f7ff fdc5 	bl	800715c <LCD_GotoXY>
    sprintf(buffer,"Battery: %03d%%", battery);
 80075d2:	88ba      	ldrh	r2, [r7, #4]
 80075d4:	f107 030c 	add.w	r3, r7, #12
 80075d8:	4959      	ldr	r1, [pc, #356]	; (8007740 <Screen_Monitor_Node+0x1ec>)
 80075da:	4618      	mov	r0, r3
 80075dc:	f005 f9c0 	bl	800c960 <siprintf>
    LCD_Print(buffer);
 80075e0:	f107 030c 	add.w	r3, r7, #12
 80075e4:	4618      	mov	r0, r3
 80075e6:	f7ff fde4 	bl	80071b2 <LCD_Print>
    LCD_GotoXY(0, 3);
 80075ea:	2103      	movs	r1, #3
 80075ec:	2000      	movs	r0, #0
 80075ee:	f7ff fdb5 	bl	800715c <LCD_GotoXY>
	LCD_SendData(_LCD_CHAR_DOWN);
 80075f2:	2007      	movs	r0, #7
 80075f4:	f7ff fd16 	bl	8007024 <LCD_SendData>
    LCD_GotoXY(1, 3);
 80075f8:	2103      	movs	r1, #3
 80075fa:	2001      	movs	r0, #1
 80075fc:	f7ff fdae 	bl	800715c <LCD_GotoXY>
    voltage = voltage*2;
 8007600:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8007602:	005b      	lsls	r3, r3, #1
 8007604:	863b      	strh	r3, [r7, #48]	; 0x30
    if (voltage == 0){
 8007606:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8007608:	2b00      	cmp	r3, #0
 800760a:	d110      	bne.n	800762e <Screen_Monitor_Node+0xda>
    	 if (type == 1)
 800760c:	78fb      	ldrb	r3, [r7, #3]
 800760e:	2b01      	cmp	r3, #1
 8007610:	d106      	bne.n	8007620 <Screen_Monitor_Node+0xcc>
			{
				sprintf(buffer,"VP:      ");
 8007612:	f107 030c 	add.w	r3, r7, #12
 8007616:	494b      	ldr	r1, [pc, #300]	; (8007744 <Screen_Monitor_Node+0x1f0>)
 8007618:	4618      	mov	r0, r3
 800761a:	f005 f9a1 	bl	800c960 <siprintf>
 800761e:	e07d      	b.n	800771c <Screen_Monitor_Node+0x1c8>
			} else {
				sprintf(buffer,"VNA:      ");
 8007620:	f107 030c 	add.w	r3, r7, #12
 8007624:	4948      	ldr	r1, [pc, #288]	; (8007748 <Screen_Monitor_Node+0x1f4>)
 8007626:	4618      	mov	r0, r3
 8007628:	f005 f99a 	bl	800c960 <siprintf>
 800762c:	e076      	b.n	800771c <Screen_Monitor_Node+0x1c8>
			}
    }
    else if (voltage < 3000){
 800762e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8007630:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8007634:	4293      	cmp	r3, r2
 8007636:	d839      	bhi.n	80076ac <Screen_Monitor_Node+0x158>
    	voltage = 3000 - voltage;
 8007638:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800763a:	f5c3 633b 	rsb	r3, r3, #2992	; 0xbb0
 800763e:	3308      	adds	r3, #8
 8007640:	863b      	strh	r3, [r7, #48]	; 0x30
    	 if (type == 1)
 8007642:	78fb      	ldrb	r3, [r7, #3]
 8007644:	2b01      	cmp	r3, #1
 8007646:	d118      	bne.n	800767a <Screen_Monitor_Node+0x126>
    	    {
    	        sprintf(buffer,"VP: -%01d.%02dV", voltage/1000, voltage%1000);
 8007648:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800764a:	4a40      	ldr	r2, [pc, #256]	; (800774c <Screen_Monitor_Node+0x1f8>)
 800764c:	fba2 2303 	umull	r2, r3, r2, r3
 8007650:	099b      	lsrs	r3, r3, #6
 8007652:	b29b      	uxth	r3, r3
 8007654:	461c      	mov	r4, r3
 8007656:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8007658:	4a3c      	ldr	r2, [pc, #240]	; (800774c <Screen_Monitor_Node+0x1f8>)
 800765a:	fba2 1203 	umull	r1, r2, r2, r3
 800765e:	0992      	lsrs	r2, r2, #6
 8007660:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007664:	fb01 f202 	mul.w	r2, r1, r2
 8007668:	1a9b      	subs	r3, r3, r2
 800766a:	b29b      	uxth	r3, r3
 800766c:	f107 000c 	add.w	r0, r7, #12
 8007670:	4622      	mov	r2, r4
 8007672:	4937      	ldr	r1, [pc, #220]	; (8007750 <Screen_Monitor_Node+0x1fc>)
 8007674:	f005 f974 	bl	800c960 <siprintf>
 8007678:	e050      	b.n	800771c <Screen_Monitor_Node+0x1c8>
    	    } else {
    	        sprintf(buffer,"VNA: -%01d.%02dV", voltage/1000, voltage%1000);
 800767a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800767c:	4a33      	ldr	r2, [pc, #204]	; (800774c <Screen_Monitor_Node+0x1f8>)
 800767e:	fba2 2303 	umull	r2, r3, r2, r3
 8007682:	099b      	lsrs	r3, r3, #6
 8007684:	b29b      	uxth	r3, r3
 8007686:	461c      	mov	r4, r3
 8007688:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800768a:	4a30      	ldr	r2, [pc, #192]	; (800774c <Screen_Monitor_Node+0x1f8>)
 800768c:	fba2 1203 	umull	r1, r2, r2, r3
 8007690:	0992      	lsrs	r2, r2, #6
 8007692:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007696:	fb01 f202 	mul.w	r2, r1, r2
 800769a:	1a9b      	subs	r3, r3, r2
 800769c:	b29b      	uxth	r3, r3
 800769e:	f107 000c 	add.w	r0, r7, #12
 80076a2:	4622      	mov	r2, r4
 80076a4:	492b      	ldr	r1, [pc, #172]	; (8007754 <Screen_Monitor_Node+0x200>)
 80076a6:	f005 f95b 	bl	800c960 <siprintf>
 80076aa:	e037      	b.n	800771c <Screen_Monitor_Node+0x1c8>
    	    }
    }
    else {
    	voltage = voltage - 3000;
 80076ac:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80076ae:	f6a3 33b8 	subw	r3, r3, #3000	; 0xbb8
 80076b2:	863b      	strh	r3, [r7, #48]	; 0x30
		 if (type == 1)
 80076b4:	78fb      	ldrb	r3, [r7, #3]
 80076b6:	2b01      	cmp	r3, #1
 80076b8:	d118      	bne.n	80076ec <Screen_Monitor_Node+0x198>
			{
				sprintf(buffer,"VP: %01d.%02dV", voltage/1000, voltage%1000);
 80076ba:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80076bc:	4a23      	ldr	r2, [pc, #140]	; (800774c <Screen_Monitor_Node+0x1f8>)
 80076be:	fba2 2303 	umull	r2, r3, r2, r3
 80076c2:	099b      	lsrs	r3, r3, #6
 80076c4:	b29b      	uxth	r3, r3
 80076c6:	461c      	mov	r4, r3
 80076c8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80076ca:	4a20      	ldr	r2, [pc, #128]	; (800774c <Screen_Monitor_Node+0x1f8>)
 80076cc:	fba2 1203 	umull	r1, r2, r2, r3
 80076d0:	0992      	lsrs	r2, r2, #6
 80076d2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80076d6:	fb01 f202 	mul.w	r2, r1, r2
 80076da:	1a9b      	subs	r3, r3, r2
 80076dc:	b29b      	uxth	r3, r3
 80076de:	f107 000c 	add.w	r0, r7, #12
 80076e2:	4622      	mov	r2, r4
 80076e4:	491c      	ldr	r1, [pc, #112]	; (8007758 <Screen_Monitor_Node+0x204>)
 80076e6:	f005 f93b 	bl	800c960 <siprintf>
 80076ea:	e017      	b.n	800771c <Screen_Monitor_Node+0x1c8>
			} else {
				sprintf(buffer,"VNA: %01d.%02dV", voltage/1000, voltage%1000);
 80076ec:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80076ee:	4a17      	ldr	r2, [pc, #92]	; (800774c <Screen_Monitor_Node+0x1f8>)
 80076f0:	fba2 2303 	umull	r2, r3, r2, r3
 80076f4:	099b      	lsrs	r3, r3, #6
 80076f6:	b29b      	uxth	r3, r3
 80076f8:	461c      	mov	r4, r3
 80076fa:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80076fc:	4a13      	ldr	r2, [pc, #76]	; (800774c <Screen_Monitor_Node+0x1f8>)
 80076fe:	fba2 1203 	umull	r1, r2, r2, r3
 8007702:	0992      	lsrs	r2, r2, #6
 8007704:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007708:	fb01 f202 	mul.w	r2, r1, r2
 800770c:	1a9b      	subs	r3, r3, r2
 800770e:	b29b      	uxth	r3, r3
 8007710:	f107 000c 	add.w	r0, r7, #12
 8007714:	4622      	mov	r2, r4
 8007716:	4911      	ldr	r1, [pc, #68]	; (800775c <Screen_Monitor_Node+0x208>)
 8007718:	f005 f922 	bl	800c960 <siprintf>
			}
    }

    LCD_Print(buffer);
 800771c:	f107 030c 	add.w	r3, r7, #12
 8007720:	4618      	mov	r0, r3
 8007722:	f7ff fd46 	bl	80071b2 <LCD_Print>
}
 8007726:	bf00      	nop
 8007728:	3724      	adds	r7, #36	; 0x24
 800772a:	46bd      	mov	sp, r7
 800772c:	bd90      	pop	{r4, r7, pc}
 800772e:	bf00      	nop
 8007730:	0800f400 	.word	0x0800f400
 8007734:	0800f414 	.word	0x0800f414
 8007738:	0800f424 	.word	0x0800f424
 800773c:	0800f434 	.word	0x0800f434
 8007740:	0800f444 	.word	0x0800f444
 8007744:	0800f454 	.word	0x0800f454
 8007748:	0800f460 	.word	0x0800f460
 800774c:	10624dd3 	.word	0x10624dd3
 8007750:	0800f46c 	.word	0x0800f46c
 8007754:	0800f47c 	.word	0x0800f47c
 8007758:	0800f490 	.word	0x0800f490
 800775c:	0800f4a0 	.word	0x0800f4a0

08007760 <Screen_Function>:

void Screen_Function(uint8_t position)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b082      	sub	sp, #8
 8007764:	af00      	add	r7, sp, #0
 8007766:	4603      	mov	r3, r0
 8007768:	71fb      	strb	r3, [r7, #7]
//	LCD_Clear();
	LCD_GotoXY(0, position);
 800776a:	79fb      	ldrb	r3, [r7, #7]
 800776c:	4619      	mov	r1, r3
 800776e:	2000      	movs	r0, #0
 8007770:	f7ff fcf4 	bl	800715c <LCD_GotoXY>
	LCD_SendData(_LCD_CHAR_RIGHT_INVERT);
 8007774:	2001      	movs	r0, #1
 8007776:	f7ff fc55 	bl	8007024 <LCD_SendData>
    LCD_GotoXY(1, 0);
 800777a:	2100      	movs	r1, #0
 800777c:	2001      	movs	r0, #1
 800777e:	f7ff fced 	bl	800715c <LCD_GotoXY>
    LCD_Print("Control Voltage");
 8007782:	4811      	ldr	r0, [pc, #68]	; (80077c8 <Screen_Function+0x68>)
 8007784:	f7ff fd15 	bl	80071b2 <LCD_Print>
    LCD_GotoXY(1, 1);
 8007788:	2101      	movs	r1, #1
 800778a:	2001      	movs	r0, #1
 800778c:	f7ff fce6 	bl	800715c <LCD_GotoXY>
    LCD_Print("Control ON/OFF");
 8007790:	480e      	ldr	r0, [pc, #56]	; (80077cc <Screen_Function+0x6c>)
 8007792:	f7ff fd0e 	bl	80071b2 <LCD_Print>
    LCD_GotoXY(3, 3);
 8007796:	2103      	movs	r1, #3
 8007798:	2003      	movs	r0, #3
 800779a:	f7ff fcdf 	bl	800715c <LCD_GotoXY>
    LCD_SendData(_LCD_CHAR_LEFT);
 800779e:	2002      	movs	r0, #2
 80077a0:	f7ff fc40 	bl	8007024 <LCD_SendData>
    LCD_GotoXY(4, 3);
 80077a4:	2103      	movs	r1, #3
 80077a6:	2004      	movs	r0, #4
 80077a8:	f7ff fcd8 	bl	800715c <LCD_GotoXY>
    LCD_Print("FUNCTION");
 80077ac:	4808      	ldr	r0, [pc, #32]	; (80077d0 <Screen_Function+0x70>)
 80077ae:	f7ff fd00 	bl	80071b2 <LCD_Print>
    LCD_GotoXY(12,3);
 80077b2:	2103      	movs	r1, #3
 80077b4:	200c      	movs	r0, #12
 80077b6:	f7ff fcd1 	bl	800715c <LCD_GotoXY>
    LCD_SendData(_LCD_CHAR_RIGHT);
 80077ba:	2000      	movs	r0, #0
 80077bc:	f7ff fc32 	bl	8007024 <LCD_SendData>
}
 80077c0:	bf00      	nop
 80077c2:	3708      	adds	r7, #8
 80077c4:	46bd      	mov	sp, r7
 80077c6:	bd80      	pop	{r7, pc}
 80077c8:	0800f4b0 	.word	0x0800f4b0
 80077cc:	0800f4c0 	.word	0x0800f4c0
 80077d0:	0800f4d0 	.word	0x0800f4d0

080077d4 <Screen_Voltage_Control>:
 * @argument :
 * 	- limit : 0 MIN, 1 MAX, other NONE
 * 	- ValorDir: 0 Value, 1 Direction
 */
void Screen_Voltage_Control(uint8_t limit , uint8_t ValorDir)
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b082      	sub	sp, #8
 80077d8:	af00      	add	r7, sp, #0
 80077da:	4603      	mov	r3, r0
 80077dc:	460a      	mov	r2, r1
 80077de:	71fb      	strb	r3, [r7, #7]
 80077e0:	4613      	mov	r3, r2
 80077e2:	71bb      	strb	r3, [r7, #6]
//	LCD_Clear();
	LCD_GotoXY(0, 0);
 80077e4:	2100      	movs	r1, #0
 80077e6:	2000      	movs	r0, #0
 80077e8:	f7ff fcb8 	bl	800715c <LCD_GotoXY>
	LCD_Print("Voltage Control");
 80077ec:	4823      	ldr	r0, [pc, #140]	; (800787c <Screen_Voltage_Control+0xa8>)
 80077ee:	f7ff fce0 	bl	80071b2 <LCD_Print>
	if (ValorDir == 0)	{
 80077f2:	79bb      	ldrb	r3, [r7, #6]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d104      	bne.n	8007802 <Screen_Voltage_Control+0x2e>
		LCD_GotoXY(0, 1);
 80077f8:	2101      	movs	r1, #1
 80077fa:	2000      	movs	r0, #0
 80077fc:	f7ff fcae 	bl	800715c <LCD_GotoXY>
 8007800:	e00b      	b.n	800781a <Screen_Voltage_Control+0x46>
	}
	else if (ValorDir == 1)  {
 8007802:	79bb      	ldrb	r3, [r7, #6]
 8007804:	2b01      	cmp	r3, #1
 8007806:	d104      	bne.n	8007812 <Screen_Voltage_Control+0x3e>
		LCD_GotoXY(0, 2);
 8007808:	2102      	movs	r1, #2
 800780a:	2000      	movs	r0, #0
 800780c:	f7ff fca6 	bl	800715c <LCD_GotoXY>
 8007810:	e003      	b.n	800781a <Screen_Voltage_Control+0x46>
	}
	else {
		LCD_GotoXY(0, 3);
 8007812:	2103      	movs	r1, #3
 8007814:	2000      	movs	r0, #0
 8007816:	f7ff fca1 	bl	800715c <LCD_GotoXY>
	}
	LCD_SendData(_LCD_CHAR_RIGHT);
 800781a:	2000      	movs	r0, #0
 800781c:	f7ff fc02 	bl	8007024 <LCD_SendData>

    LCD_GotoXY(1, 1);
 8007820:	2101      	movs	r1, #1
 8007822:	2001      	movs	r0, #1
 8007824:	f7ff fc9a 	bl	800715c <LCD_GotoXY>
    LCD_Print("Step: ");
 8007828:	4815      	ldr	r0, [pc, #84]	; (8007880 <Screen_Voltage_Control+0xac>)
 800782a:	f7ff fcc2 	bl	80071b2 <LCD_Print>

    LCD_GotoXY(1, 2);
 800782e:	2102      	movs	r1, #2
 8007830:	2001      	movs	r0, #1
 8007832:	f7ff fc93 	bl	800715c <LCD_GotoXY>
    LCD_Print("Direction: ");
 8007836:	4813      	ldr	r0, [pc, #76]	; (8007884 <Screen_Voltage_Control+0xb0>)
 8007838:	f7ff fcbb 	bl	80071b2 <LCD_Print>

    LCD_GotoXY(1, 3);
 800783c:	2103      	movs	r1, #3
 800783e:	2001      	movs	r0, #1
 8007840:	f7ff fc8c 	bl	800715c <LCD_GotoXY>
    LCD_Print("Confirm");
 8007844:	4810      	ldr	r0, [pc, #64]	; (8007888 <Screen_Voltage_Control+0xb4>)
 8007846:	f7ff fcb4 	bl	80071b2 <LCD_Print>

    LCD_GotoXY(12, 3);
 800784a:	2103      	movs	r1, #3
 800784c:	200c      	movs	r0, #12
 800784e:	f7ff fc85 	bl	800715c <LCD_GotoXY>
    if (limit == 0){
 8007852:	79fb      	ldrb	r3, [r7, #7]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d103      	bne.n	8007860 <Screen_Voltage_Control+0x8c>
        LCD_Print("MIN");
 8007858:	480c      	ldr	r0, [pc, #48]	; (800788c <Screen_Voltage_Control+0xb8>)
 800785a:	f7ff fcaa 	bl	80071b2 <LCD_Print>
//    LCD_SendData(_LCD_CHAR_LEFT);
//    LCD_GotoXY(4, 3);
//    LCD_Print("FUNCTION");
//    LCD_GotoXY(12,3);
//    LCD_SendData(_LCD_CHAR_RIGHT);
}
 800785e:	e009      	b.n	8007874 <Screen_Voltage_Control+0xa0>
    } else if (limit == 1) {
 8007860:	79fb      	ldrb	r3, [r7, #7]
 8007862:	2b01      	cmp	r3, #1
 8007864:	d103      	bne.n	800786e <Screen_Voltage_Control+0x9a>
        LCD_Print("MAX");
 8007866:	480a      	ldr	r0, [pc, #40]	; (8007890 <Screen_Voltage_Control+0xbc>)
 8007868:	f7ff fca3 	bl	80071b2 <LCD_Print>
}
 800786c:	e002      	b.n	8007874 <Screen_Voltage_Control+0xa0>
        LCD_Print("NONE");
 800786e:	4809      	ldr	r0, [pc, #36]	; (8007894 <Screen_Voltage_Control+0xc0>)
 8007870:	f7ff fc9f 	bl	80071b2 <LCD_Print>
}
 8007874:	bf00      	nop
 8007876:	3708      	adds	r7, #8
 8007878:	46bd      	mov	sp, r7
 800787a:	bd80      	pop	{r7, pc}
 800787c:	0800f4dc 	.word	0x0800f4dc
 8007880:	0800f4ec 	.word	0x0800f4ec
 8007884:	0800f4f4 	.word	0x0800f4f4
 8007888:	0800f500 	.word	0x0800f500
 800788c:	0800f508 	.word	0x0800f508
 8007890:	0800f50c 	.word	0x0800f50c
 8007894:	0800f510 	.word	0x0800f510

08007898 <Screen_Dir_Control>:

void Screen_Dir_Control(uint8_t limit)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b082      	sub	sp, #8
 800789c:	af00      	add	r7, sp, #0
 800789e:	4603      	mov	r3, r0
 80078a0:	71fb      	strb	r3, [r7, #7]
//	LCD_Clear();
	LCD_GotoXY(0, 0);
 80078a2:	2100      	movs	r1, #0
 80078a4:	2000      	movs	r0, #0
 80078a6:	f7ff fc59 	bl	800715c <LCD_GotoXY>
	LCD_Print("Voltage Control");
 80078aa:	481c      	ldr	r0, [pc, #112]	; (800791c <Screen_Dir_Control+0x84>)
 80078ac:	f7ff fc81 	bl	80071b2 <LCD_Print>
//		LCD_GotoXY(0, 2);
//	}
//	else {
//		LCD_GotoXY(0, 2);
//	}
	LCD_GotoXY(15, 2);
 80078b0:	2102      	movs	r1, #2
 80078b2:	200f      	movs	r0, #15
 80078b4:	f7ff fc52 	bl	800715c <LCD_GotoXY>
	LCD_SendData(_LCD_CHAR_LEFT);
 80078b8:	2002      	movs	r0, #2
 80078ba:	f7ff fbb3 	bl	8007024 <LCD_SendData>

    LCD_GotoXY(1, 1);
 80078be:	2101      	movs	r1, #1
 80078c0:	2001      	movs	r0, #1
 80078c2:	f7ff fc4b 	bl	800715c <LCD_GotoXY>
    LCD_Print("Step: ");
 80078c6:	4816      	ldr	r0, [pc, #88]	; (8007920 <Screen_Dir_Control+0x88>)
 80078c8:	f7ff fc73 	bl	80071b2 <LCD_Print>

    LCD_GotoXY(1, 2);
 80078cc:	2102      	movs	r1, #2
 80078ce:	2001      	movs	r0, #1
 80078d0:	f7ff fc44 	bl	800715c <LCD_GotoXY>
    LCD_Print("Direction: ");
 80078d4:	4813      	ldr	r0, [pc, #76]	; (8007924 <Screen_Dir_Control+0x8c>)
 80078d6:	f7ff fc6c 	bl	80071b2 <LCD_Print>

    LCD_GotoXY(1, 3);
 80078da:	2103      	movs	r1, #3
 80078dc:	2001      	movs	r0, #1
 80078de:	f7ff fc3d 	bl	800715c <LCD_GotoXY>
    LCD_Print("Confirm");
 80078e2:	4811      	ldr	r0, [pc, #68]	; (8007928 <Screen_Dir_Control+0x90>)
 80078e4:	f7ff fc65 	bl	80071b2 <LCD_Print>

    LCD_GotoXY(12, 3);
 80078e8:	2103      	movs	r1, #3
 80078ea:	200c      	movs	r0, #12
 80078ec:	f7ff fc36 	bl	800715c <LCD_GotoXY>
    if (limit == 0){
 80078f0:	79fb      	ldrb	r3, [r7, #7]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d103      	bne.n	80078fe <Screen_Dir_Control+0x66>
        LCD_Print("MIN");
 80078f6:	480d      	ldr	r0, [pc, #52]	; (800792c <Screen_Dir_Control+0x94>)
 80078f8:	f7ff fc5b 	bl	80071b2 <LCD_Print>
//    LCD_SendData(_LCD_CHAR_LEFT);
//    LCD_GotoXY(4, 3);
//    LCD_Print("FUNCTION");
//    LCD_GotoXY(12,3);
//    LCD_SendData(_LCD_CHAR_RIGHT);
}
 80078fc:	e009      	b.n	8007912 <Screen_Dir_Control+0x7a>
    } else if (limit == 1) {
 80078fe:	79fb      	ldrb	r3, [r7, #7]
 8007900:	2b01      	cmp	r3, #1
 8007902:	d103      	bne.n	800790c <Screen_Dir_Control+0x74>
        LCD_Print("MAX");
 8007904:	480a      	ldr	r0, [pc, #40]	; (8007930 <Screen_Dir_Control+0x98>)
 8007906:	f7ff fc54 	bl	80071b2 <LCD_Print>
}
 800790a:	e002      	b.n	8007912 <Screen_Dir_Control+0x7a>
        LCD_Print("NONE");
 800790c:	4809      	ldr	r0, [pc, #36]	; (8007934 <Screen_Dir_Control+0x9c>)
 800790e:	f7ff fc50 	bl	80071b2 <LCD_Print>
}
 8007912:	bf00      	nop
 8007914:	3708      	adds	r7, #8
 8007916:	46bd      	mov	sp, r7
 8007918:	bd80      	pop	{r7, pc}
 800791a:	bf00      	nop
 800791c:	0800f4dc 	.word	0x0800f4dc
 8007920:	0800f4ec 	.word	0x0800f4ec
 8007924:	0800f4f4 	.word	0x0800f4f4
 8007928:	0800f500 	.word	0x0800f500
 800792c:	0800f508 	.word	0x0800f508
 8007930:	0800f50c 	.word	0x0800f50c
 8007934:	0800f510 	.word	0x0800f510

08007938 <Screen_StepVal_Control>:

void Screen_StepVal_Control(uint8_t limit)
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b082      	sub	sp, #8
 800793c:	af00      	add	r7, sp, #0
 800793e:	4603      	mov	r3, r0
 8007940:	71fb      	strb	r3, [r7, #7]
//	LCD_Clear();
	LCD_GotoXY(0, 0);
 8007942:	2100      	movs	r1, #0
 8007944:	2000      	movs	r0, #0
 8007946:	f7ff fc09 	bl	800715c <LCD_GotoXY>
	LCD_Print("Voltage Control");
 800794a:	481c      	ldr	r0, [pc, #112]	; (80079bc <Screen_StepVal_Control+0x84>)
 800794c:	f7ff fc31 	bl	80071b2 <LCD_Print>

	LCD_GotoXY(12, 1);
 8007950:	2101      	movs	r1, #1
 8007952:	200c      	movs	r0, #12
 8007954:	f7ff fc02 	bl	800715c <LCD_GotoXY>
	LCD_SendData(_LCD_CHAR_LEFT);
 8007958:	2002      	movs	r0, #2
 800795a:	f7ff fb63 	bl	8007024 <LCD_SendData>
//	else {
//		LCD_GotoXY(0, 2);
//	}
//	LCD_SendData(_LCD_CHAR_RIGHT);

    LCD_GotoXY(1, 1);
 800795e:	2101      	movs	r1, #1
 8007960:	2001      	movs	r0, #1
 8007962:	f7ff fbfb 	bl	800715c <LCD_GotoXY>
    LCD_Print("Step: ");
 8007966:	4816      	ldr	r0, [pc, #88]	; (80079c0 <Screen_StepVal_Control+0x88>)
 8007968:	f7ff fc23 	bl	80071b2 <LCD_Print>

    LCD_GotoXY(1, 2);
 800796c:	2102      	movs	r1, #2
 800796e:	2001      	movs	r0, #1
 8007970:	f7ff fbf4 	bl	800715c <LCD_GotoXY>
    LCD_Print("Direction: ");
 8007974:	4813      	ldr	r0, [pc, #76]	; (80079c4 <Screen_StepVal_Control+0x8c>)
 8007976:	f7ff fc1c 	bl	80071b2 <LCD_Print>

    LCD_GotoXY(1, 3);
 800797a:	2103      	movs	r1, #3
 800797c:	2001      	movs	r0, #1
 800797e:	f7ff fbed 	bl	800715c <LCD_GotoXY>
    LCD_Print("Confirm");
 8007982:	4811      	ldr	r0, [pc, #68]	; (80079c8 <Screen_StepVal_Control+0x90>)
 8007984:	f7ff fc15 	bl	80071b2 <LCD_Print>

    LCD_GotoXY(12, 3);
 8007988:	2103      	movs	r1, #3
 800798a:	200c      	movs	r0, #12
 800798c:	f7ff fbe6 	bl	800715c <LCD_GotoXY>
    if (limit == 0){
 8007990:	79fb      	ldrb	r3, [r7, #7]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d103      	bne.n	800799e <Screen_StepVal_Control+0x66>
        LCD_Print("MIN");
 8007996:	480d      	ldr	r0, [pc, #52]	; (80079cc <Screen_StepVal_Control+0x94>)
 8007998:	f7ff fc0b 	bl	80071b2 <LCD_Print>
//    LCD_SendData(_LCD_CHAR_LEFT);
//    LCD_GotoXY(4, 3);
//    LCD_Print("FUNCTION");
//    LCD_GotoXY(12,3);
//    LCD_SendData(_LCD_CHAR_RIGHT);
}
 800799c:	e009      	b.n	80079b2 <Screen_StepVal_Control+0x7a>
    } else if (limit == 1) {
 800799e:	79fb      	ldrb	r3, [r7, #7]
 80079a0:	2b01      	cmp	r3, #1
 80079a2:	d103      	bne.n	80079ac <Screen_StepVal_Control+0x74>
        LCD_Print("MAX");
 80079a4:	480a      	ldr	r0, [pc, #40]	; (80079d0 <Screen_StepVal_Control+0x98>)
 80079a6:	f7ff fc04 	bl	80071b2 <LCD_Print>
}
 80079aa:	e002      	b.n	80079b2 <Screen_StepVal_Control+0x7a>
        LCD_Print("NONE");
 80079ac:	4809      	ldr	r0, [pc, #36]	; (80079d4 <Screen_StepVal_Control+0x9c>)
 80079ae:	f7ff fc00 	bl	80071b2 <LCD_Print>
}
 80079b2:	bf00      	nop
 80079b4:	3708      	adds	r7, #8
 80079b6:	46bd      	mov	sp, r7
 80079b8:	bd80      	pop	{r7, pc}
 80079ba:	bf00      	nop
 80079bc:	0800f4dc 	.word	0x0800f4dc
 80079c0:	0800f4ec 	.word	0x0800f4ec
 80079c4:	0800f4f4 	.word	0x0800f4f4
 80079c8:	0800f500 	.word	0x0800f500
 80079cc:	0800f508 	.word	0x0800f508
 80079d0:	0800f50c 	.word	0x0800f50c
 80079d4:	0800f510 	.word	0x0800f510

080079d8 <Screen_Voltage_Control_Control_Motor>:
void Screen_Voltage_Control_Control_Motor(uint16_t step, uint8_t dir)
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b088      	sub	sp, #32
 80079dc:	af00      	add	r7, sp, #0
 80079de:	4603      	mov	r3, r0
 80079e0:	460a      	mov	r2, r1
 80079e2:	80fb      	strh	r3, [r7, #6]
 80079e4:	4613      	mov	r3, r2
 80079e6:	717b      	strb	r3, [r7, #5]
//        // Motor go to left
//    } else {
//        // Motor go to left
//    }
//    // Read ADC
	LCD_GotoXY(7, 1);
 80079e8:	2101      	movs	r1, #1
 80079ea:	2007      	movs	r0, #7
 80079ec:	f7ff fbb6 	bl	800715c <LCD_GotoXY>
	sprintf(buffer,"%d", step);
 80079f0:	88fa      	ldrh	r2, [r7, #6]
 80079f2:	f107 030c 	add.w	r3, r7, #12
 80079f6:	490f      	ldr	r1, [pc, #60]	; (8007a34 <Screen_Voltage_Control_Control_Motor+0x5c>)
 80079f8:	4618      	mov	r0, r3
 80079fa:	f004 ffb1 	bl	800c960 <siprintf>
//	sprintf(buffer,"%01d.%02dV", adc_value/100, adc_value%100);
	LCD_Print(buffer);
 80079fe:	f107 030c 	add.w	r3, r7, #12
 8007a02:	4618      	mov	r0, r3
 8007a04:	f7ff fbd5 	bl	80071b2 <LCD_Print>
	LCD_GotoXY(12, 2);
 8007a08:	2102      	movs	r1, #2
 8007a0a:	200c      	movs	r0, #12
 8007a0c:	f7ff fba6 	bl	800715c <LCD_GotoXY>
	if (dir == 0x01) {
 8007a10:	797b      	ldrb	r3, [r7, #5]
 8007a12:	2b01      	cmp	r3, #1
 8007a14:	d103      	bne.n	8007a1e <Screen_Voltage_Control_Control_Motor+0x46>
		LCD_Print("INC");
 8007a16:	4808      	ldr	r0, [pc, #32]	; (8007a38 <Screen_Voltage_Control_Control_Motor+0x60>)
 8007a18:	f7ff fbcb 	bl	80071b2 <LCD_Print>
		LCD_Print("DEC");
	}



}
 8007a1c:	e005      	b.n	8007a2a <Screen_Voltage_Control_Control_Motor+0x52>
	else if (dir == 0x02) {
 8007a1e:	797b      	ldrb	r3, [r7, #5]
 8007a20:	2b02      	cmp	r3, #2
 8007a22:	d102      	bne.n	8007a2a <Screen_Voltage_Control_Control_Motor+0x52>
		LCD_Print("DEC");
 8007a24:	4805      	ldr	r0, [pc, #20]	; (8007a3c <Screen_Voltage_Control_Control_Motor+0x64>)
 8007a26:	f7ff fbc4 	bl	80071b2 <LCD_Print>
}
 8007a2a:	bf00      	nop
 8007a2c:	3720      	adds	r7, #32
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	bd80      	pop	{r7, pc}
 8007a32:	bf00      	nop
 8007a34:	0800f518 	.word	0x0800f518
 8007a38:	0800f51c 	.word	0x0800f51c
 8007a3c:	0800f520 	.word	0x0800f520

08007a40 <Screen_Control_Relay>:

void Screen_Control_Relay(uint8_t position)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b082      	sub	sp, #8
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	4603      	mov	r3, r0
 8007a48:	71fb      	strb	r3, [r7, #7]
//	LCD_Clear();
	LCD_GotoXY(0, position+1);
 8007a4a:	79fb      	ldrb	r3, [r7, #7]
 8007a4c:	3301      	adds	r3, #1
 8007a4e:	b2db      	uxtb	r3, r3
 8007a50:	4619      	mov	r1, r3
 8007a52:	2000      	movs	r0, #0
 8007a54:	f7ff fb82 	bl	800715c <LCD_GotoXY>
	LCD_SendData(_LCD_CHAR_RIGHT_INVERT);
 8007a58:	2001      	movs	r0, #1
 8007a5a:	f7ff fae3 	bl	8007024 <LCD_SendData>
    LCD_GotoXY(1, 0);
 8007a5e:	2100      	movs	r1, #0
 8007a60:	2001      	movs	r0, #1
 8007a62:	f7ff fb7b 	bl	800715c <LCD_GotoXY>
    LCD_Print("Output Control");
 8007a66:	4815      	ldr	r0, [pc, #84]	; (8007abc <Screen_Control_Relay+0x7c>)
 8007a68:	f7ff fba3 	bl	80071b2 <LCD_Print>
    LCD_GotoXY(1, 1);
 8007a6c:	2101      	movs	r1, #1
 8007a6e:	2001      	movs	r0, #1
 8007a70:	f7ff fb74 	bl	800715c <LCD_GotoXY>
    LCD_Print("Trans. is: ");
 8007a74:	4812      	ldr	r0, [pc, #72]	; (8007ac0 <Screen_Control_Relay+0x80>)
 8007a76:	f7ff fb9c 	bl	80071b2 <LCD_Print>
    LCD_GotoXY(1, 2);
 8007a7a:	2102      	movs	r1, #2
 8007a7c:	2001      	movs	r0, #1
 8007a7e:	f7ff fb6d 	bl	800715c <LCD_GotoXY>
    LCD_Print("Confirm: ");
 8007a82:	4810      	ldr	r0, [pc, #64]	; (8007ac4 <Screen_Control_Relay+0x84>)
 8007a84:	f7ff fb95 	bl	80071b2 <LCD_Print>
    LCD_GotoXY(3, 3);
 8007a88:	2103      	movs	r1, #3
 8007a8a:	2003      	movs	r0, #3
 8007a8c:	f7ff fb66 	bl	800715c <LCD_GotoXY>
    LCD_SendData(_LCD_CHAR_LEFT);
 8007a90:	2002      	movs	r0, #2
 8007a92:	f7ff fac7 	bl	8007024 <LCD_SendData>
    LCD_GotoXY(4, 3);
 8007a96:	2103      	movs	r1, #3
 8007a98:	2004      	movs	r0, #4
 8007a9a:	f7ff fb5f 	bl	800715c <LCD_GotoXY>
    LCD_Print("FUNCTION");
 8007a9e:	480a      	ldr	r0, [pc, #40]	; (8007ac8 <Screen_Control_Relay+0x88>)
 8007aa0:	f7ff fb87 	bl	80071b2 <LCD_Print>
    LCD_GotoXY(12,3);
 8007aa4:	2103      	movs	r1, #3
 8007aa6:	200c      	movs	r0, #12
 8007aa8:	f7ff fb58 	bl	800715c <LCD_GotoXY>
    LCD_SendData(_LCD_CHAR_RIGHT);
 8007aac:	2000      	movs	r0, #0
 8007aae:	f7ff fab9 	bl	8007024 <LCD_SendData>
}
 8007ab2:	bf00      	nop
 8007ab4:	3708      	adds	r7, #8
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	bd80      	pop	{r7, pc}
 8007aba:	bf00      	nop
 8007abc:	0800f524 	.word	0x0800f524
 8007ac0:	0800f534 	.word	0x0800f534
 8007ac4:	0800f540 	.word	0x0800f540
 8007ac8:	0800f4d0 	.word	0x0800f4d0

08007acc <Screen_Control_Relay_Change_Mode>:

void Screen_Control_Relay_Change_Mode(uint8_t curStatus,uint8_t status)
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b082      	sub	sp, #8
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	460a      	mov	r2, r1
 8007ad6:	71fb      	strb	r3, [r7, #7]
 8007ad8:	4613      	mov	r3, r2
 8007ada:	71bb      	strb	r3, [r7, #6]
	LCD_GotoXY(12, 1);
 8007adc:	2101      	movs	r1, #1
 8007ade:	200c      	movs	r0, #12
 8007ae0:	f7ff fb3c 	bl	800715c <LCD_GotoXY>
	if (curStatus == 2){
 8007ae4:	79fb      	ldrb	r3, [r7, #7]
 8007ae6:	2b02      	cmp	r3, #2
 8007ae8:	d103      	bne.n	8007af2 <Screen_Control_Relay_Change_Mode+0x26>
		LCD_Print("OFF");
 8007aea:	480e      	ldr	r0, [pc, #56]	; (8007b24 <Screen_Control_Relay_Change_Mode+0x58>)
 8007aec:	f7ff fb61 	bl	80071b2 <LCD_Print>
 8007af0:	e005      	b.n	8007afe <Screen_Control_Relay_Change_Mode+0x32>
	} else if (curStatus == 1){
 8007af2:	79fb      	ldrb	r3, [r7, #7]
 8007af4:	2b01      	cmp	r3, #1
 8007af6:	d102      	bne.n	8007afe <Screen_Control_Relay_Change_Mode+0x32>
		LCD_Print("ON");
 8007af8:	480b      	ldr	r0, [pc, #44]	; (8007b28 <Screen_Control_Relay_Change_Mode+0x5c>)
 8007afa:	f7ff fb5a 	bl	80071b2 <LCD_Print>
	}
	LCD_GotoXY(10, 2);
 8007afe:	2102      	movs	r1, #2
 8007b00:	200a      	movs	r0, #10
 8007b02:	f7ff fb2b 	bl	800715c <LCD_GotoXY>
	if (status == 0){
 8007b06:	79bb      	ldrb	r3, [r7, #6]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d103      	bne.n	8007b14 <Screen_Control_Relay_Change_Mode+0x48>
		LCD_Print("OFF");
 8007b0c:	4805      	ldr	r0, [pc, #20]	; (8007b24 <Screen_Control_Relay_Change_Mode+0x58>)
 8007b0e:	f7ff fb50 	bl	80071b2 <LCD_Print>
	} else {
		LCD_Print("ON");
	}
}
 8007b12:	e002      	b.n	8007b1a <Screen_Control_Relay_Change_Mode+0x4e>
		LCD_Print("ON");
 8007b14:	4804      	ldr	r0, [pc, #16]	; (8007b28 <Screen_Control_Relay_Change_Mode+0x5c>)
 8007b16:	f7ff fb4c 	bl	80071b2 <LCD_Print>
}
 8007b1a:	bf00      	nop
 8007b1c:	3708      	adds	r7, #8
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bd80      	pop	{r7, pc}
 8007b22:	bf00      	nop
 8007b24:	0800f31c 	.word	0x0800f31c
 8007b28:	0800f54c 	.word	0x0800f54c

08007b2c <Screen_Accept_Relay>:

void Screen_Accept_Relay(_RTC switchtime, uint8_t status)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b08c      	sub	sp, #48	; 0x30
 8007b30:	af02      	add	r7, sp, #8
 8007b32:	f107 0308 	add.w	r3, r7, #8
 8007b36:	e883 0003 	stmia.w	r3, {r0, r1}
 8007b3a:	4613      	mov	r3, r2
 8007b3c:	71fb      	strb	r3, [r7, #7]
    char buffer[20];
//    DS3231_GetTime(__MY_RTC);
//	LCD_Clear();
	LCD_GotoXY(1, 0);
 8007b3e:	2100      	movs	r1, #0
 8007b40:	2001      	movs	r0, #1
 8007b42:	f7ff fb0b 	bl	800715c <LCD_GotoXY>
	LCD_Print("Output Control");
 8007b46:	4826      	ldr	r0, [pc, #152]	; (8007be0 <Screen_Accept_Relay+0xb4>)
 8007b48:	f7ff fb33 	bl	80071b2 <LCD_Print>
	LCD_GotoXY(0, 1);
 8007b4c:	2101      	movs	r1, #1
 8007b4e:	2000      	movs	r0, #0
 8007b50:	f7ff fb04 	bl	800715c <LCD_GotoXY>
	LCD_Print("SWITCH");
 8007b54:	4823      	ldr	r0, [pc, #140]	; (8007be4 <Screen_Accept_Relay+0xb8>)
 8007b56:	f7ff fb2c 	bl	80071b2 <LCD_Print>
	LCD_GotoXY(7, 1);
 8007b5a:	2101      	movs	r1, #1
 8007b5c:	2007      	movs	r0, #7
 8007b5e:	f7ff fafd 	bl	800715c <LCD_GotoXY>
	if (status == 0){
 8007b62:	79fb      	ldrb	r3, [r7, #7]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d103      	bne.n	8007b70 <Screen_Accept_Relay+0x44>
		LCD_Print("OFF");
 8007b68:	481f      	ldr	r0, [pc, #124]	; (8007be8 <Screen_Accept_Relay+0xbc>)
 8007b6a:	f7ff fb22 	bl	80071b2 <LCD_Print>
 8007b6e:	e002      	b.n	8007b76 <Screen_Accept_Relay+0x4a>
	} else {
		LCD_Print("ON");
 8007b70:	481e      	ldr	r0, [pc, #120]	; (8007bec <Screen_Accept_Relay+0xc0>)
 8007b72:	f7ff fb1e 	bl	80071b2 <LCD_Print>
	}
	LCD_GotoXY(11, 1);
 8007b76:	2101      	movs	r1, #1
 8007b78:	200b      	movs	r0, #11
 8007b7a:	f7ff faef 	bl	800715c <LCD_GotoXY>
	LCD_Print("AT:");
 8007b7e:	481c      	ldr	r0, [pc, #112]	; (8007bf0 <Screen_Accept_Relay+0xc4>)
 8007b80:	f7ff fb17 	bl	80071b2 <LCD_Print>
    LCD_GotoXY(4, 2);
 8007b84:	2102      	movs	r1, #2
 8007b86:	2004      	movs	r0, #4
 8007b88:	f7ff fae8 	bl	800715c <LCD_GotoXY>
    sprintf(buffer,"%02d:%02d:%02d", switchtime.Hour, switchtime.Min, switchtime.Sec);
 8007b8c:	7b3b      	ldrb	r3, [r7, #12]
 8007b8e:	461a      	mov	r2, r3
 8007b90:	7b7b      	ldrb	r3, [r7, #13]
 8007b92:	4619      	mov	r1, r3
 8007b94:	7bbb      	ldrb	r3, [r7, #14]
 8007b96:	f107 0014 	add.w	r0, r7, #20
 8007b9a:	9300      	str	r3, [sp, #0]
 8007b9c:	460b      	mov	r3, r1
 8007b9e:	4915      	ldr	r1, [pc, #84]	; (8007bf4 <Screen_Accept_Relay+0xc8>)
 8007ba0:	f004 fede 	bl	800c960 <siprintf>
    LCD_Print(buffer);
 8007ba4:	f107 0314 	add.w	r3, r7, #20
 8007ba8:	4618      	mov	r0, r3
 8007baa:	f7ff fb02 	bl	80071b2 <LCD_Print>
    LCD_GotoXY(4, 3);
 8007bae:	2103      	movs	r1, #3
 8007bb0:	2004      	movs	r0, #4
 8007bb2:	f7ff fad3 	bl	800715c <LCD_GotoXY>
    sprintf(buffer,"%02d/%02d/%d", switchtime.Date, switchtime.Month, switchtime.Year);
 8007bb6:	7abb      	ldrb	r3, [r7, #10]
 8007bb8:	461a      	mov	r2, r3
 8007bba:	7a7b      	ldrb	r3, [r7, #9]
 8007bbc:	4619      	mov	r1, r3
 8007bbe:	7a3b      	ldrb	r3, [r7, #8]
 8007bc0:	f107 0014 	add.w	r0, r7, #20
 8007bc4:	9300      	str	r3, [sp, #0]
 8007bc6:	460b      	mov	r3, r1
 8007bc8:	490b      	ldr	r1, [pc, #44]	; (8007bf8 <Screen_Accept_Relay+0xcc>)
 8007bca:	f004 fec9 	bl	800c960 <siprintf>
    LCD_Print(buffer);
 8007bce:	f107 0314 	add.w	r3, r7, #20
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	f7ff faed 	bl	80071b2 <LCD_Print>
//    LCD_SendData(_LCD_CHAR_LEFT);
//    LCD_GotoXY(4, 3);
//    LCD_Print("FUNCTION");
//    LCD_GotoXY(12,3);
//    LCD_SendData(_LCD_CHAR_RIGHT);
}
 8007bd8:	bf00      	nop
 8007bda:	3728      	adds	r7, #40	; 0x28
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	bd80      	pop	{r7, pc}
 8007be0:	0800f524 	.word	0x0800f524
 8007be4:	0800f550 	.word	0x0800f550
 8007be8:	0800f31c 	.word	0x0800f31c
 8007bec:	0800f54c 	.word	0x0800f54c
 8007bf0:	0800f558 	.word	0x0800f558
 8007bf4:	0800f344 	.word	0x0800f344
 8007bf8:	0800f334 	.word	0x0800f334

08007bfc <Reset_Handler>:
 8007bfc:	f7fe fd7c 	bl	80066f8 <SystemInit>
 8007c00:	480b      	ldr	r0, [pc, #44]	; (8007c30 <LoopFillZerobss+0xe>)
 8007c02:	490c      	ldr	r1, [pc, #48]	; (8007c34 <LoopFillZerobss+0x12>)
 8007c04:	4a0c      	ldr	r2, [pc, #48]	; (8007c38 <LoopFillZerobss+0x16>)
 8007c06:	2300      	movs	r3, #0
 8007c08:	e002      	b.n	8007c10 <LoopCopyDataInit>

08007c0a <CopyDataInit>:
 8007c0a:	58d4      	ldr	r4, [r2, r3]
 8007c0c:	50c4      	str	r4, [r0, r3]
 8007c0e:	3304      	adds	r3, #4

08007c10 <LoopCopyDataInit>:
 8007c10:	18c4      	adds	r4, r0, r3
 8007c12:	428c      	cmp	r4, r1
 8007c14:	d3f9      	bcc.n	8007c0a <CopyDataInit>
 8007c16:	4a09      	ldr	r2, [pc, #36]	; (8007c3c <LoopFillZerobss+0x1a>)
 8007c18:	4c09      	ldr	r4, [pc, #36]	; (8007c40 <LoopFillZerobss+0x1e>)
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	e001      	b.n	8007c22 <LoopFillZerobss>

08007c1e <FillZerobss>:
 8007c1e:	6013      	str	r3, [r2, #0]
 8007c20:	3204      	adds	r2, #4

08007c22 <LoopFillZerobss>:
 8007c22:	42a2      	cmp	r2, r4
 8007c24:	d3fb      	bcc.n	8007c1e <FillZerobss>
 8007c26:	f004 f9d3 	bl	800bfd0 <__libc_init_array>
 8007c2a:	f7fe fa8d 	bl	8006148 <main>
 8007c2e:	4770      	bx	lr
 8007c30:	20000000 	.word	0x20000000
 8007c34:	200005a8 	.word	0x200005a8
 8007c38:	0800f998 	.word	0x0800f998
 8007c3c:	200005a8 	.word	0x200005a8
 8007c40:	20002c34 	.word	0x20002c34

08007c44 <CAN1_RX1_IRQHandler>:
 8007c44:	e7fe      	b.n	8007c44 <CAN1_RX1_IRQHandler>
	...

08007c48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007c4c:	4b08      	ldr	r3, [pc, #32]	; (8007c70 <HAL_Init+0x28>)
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	4a07      	ldr	r2, [pc, #28]	; (8007c70 <HAL_Init+0x28>)
 8007c52:	f043 0310 	orr.w	r3, r3, #16
 8007c56:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007c58:	2003      	movs	r0, #3
 8007c5a:	f000 fd45 	bl	80086e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007c5e:	200f      	movs	r0, #15
 8007c60:	f000 f808 	bl	8007c74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007c64:	f7fe fbc2 	bl	80063ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007c68:	2300      	movs	r3, #0
}
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	bd80      	pop	{r7, pc}
 8007c6e:	bf00      	nop
 8007c70:	40022000 	.word	0x40022000

08007c74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b082      	sub	sp, #8
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007c7c:	4b12      	ldr	r3, [pc, #72]	; (8007cc8 <HAL_InitTick+0x54>)
 8007c7e:	681a      	ldr	r2, [r3, #0]
 8007c80:	4b12      	ldr	r3, [pc, #72]	; (8007ccc <HAL_InitTick+0x58>)
 8007c82:	781b      	ldrb	r3, [r3, #0]
 8007c84:	4619      	mov	r1, r3
 8007c86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007c8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8007c8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c92:	4618      	mov	r0, r3
 8007c94:	f000 fd5d 	bl	8008752 <HAL_SYSTICK_Config>
 8007c98:	4603      	mov	r3, r0
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d001      	beq.n	8007ca2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8007c9e:	2301      	movs	r3, #1
 8007ca0:	e00e      	b.n	8007cc0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2b0f      	cmp	r3, #15
 8007ca6:	d80a      	bhi.n	8007cbe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007ca8:	2200      	movs	r2, #0
 8007caa:	6879      	ldr	r1, [r7, #4]
 8007cac:	f04f 30ff 	mov.w	r0, #4294967295
 8007cb0:	f000 fd25 	bl	80086fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007cb4:	4a06      	ldr	r2, [pc, #24]	; (8007cd0 <HAL_InitTick+0x5c>)
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007cba:	2300      	movs	r3, #0
 8007cbc:	e000      	b.n	8007cc0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8007cbe:	2301      	movs	r3, #1
}
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	3708      	adds	r7, #8
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	bd80      	pop	{r7, pc}
 8007cc8:	20000490 	.word	0x20000490
 8007ccc:	200004dc 	.word	0x200004dc
 8007cd0:	200004d8 	.word	0x200004d8

08007cd4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007cd4:	b480      	push	{r7}
 8007cd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007cd8:	4b05      	ldr	r3, [pc, #20]	; (8007cf0 <HAL_IncTick+0x1c>)
 8007cda:	781b      	ldrb	r3, [r3, #0]
 8007cdc:	461a      	mov	r2, r3
 8007cde:	4b05      	ldr	r3, [pc, #20]	; (8007cf4 <HAL_IncTick+0x20>)
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	4413      	add	r3, r2
 8007ce4:	4a03      	ldr	r2, [pc, #12]	; (8007cf4 <HAL_IncTick+0x20>)
 8007ce6:	6013      	str	r3, [r2, #0]
}
 8007ce8:	bf00      	nop
 8007cea:	46bd      	mov	sp, r7
 8007cec:	bc80      	pop	{r7}
 8007cee:	4770      	bx	lr
 8007cf0:	200004dc 	.word	0x200004dc
 8007cf4:	20002bf8 	.word	0x20002bf8

08007cf8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007cf8:	b480      	push	{r7}
 8007cfa:	af00      	add	r7, sp, #0
  return uwTick;
 8007cfc:	4b02      	ldr	r3, [pc, #8]	; (8007d08 <HAL_GetTick+0x10>)
 8007cfe:	681b      	ldr	r3, [r3, #0]
}
 8007d00:	4618      	mov	r0, r3
 8007d02:	46bd      	mov	sp, r7
 8007d04:	bc80      	pop	{r7}
 8007d06:	4770      	bx	lr
 8007d08:	20002bf8 	.word	0x20002bf8

08007d0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b084      	sub	sp, #16
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007d14:	f7ff fff0 	bl	8007cf8 <HAL_GetTick>
 8007d18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d24:	d005      	beq.n	8007d32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007d26:	4b0a      	ldr	r3, [pc, #40]	; (8007d50 <HAL_Delay+0x44>)
 8007d28:	781b      	ldrb	r3, [r3, #0]
 8007d2a:	461a      	mov	r2, r3
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	4413      	add	r3, r2
 8007d30:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007d32:	bf00      	nop
 8007d34:	f7ff ffe0 	bl	8007cf8 <HAL_GetTick>
 8007d38:	4602      	mov	r2, r0
 8007d3a:	68bb      	ldr	r3, [r7, #8]
 8007d3c:	1ad3      	subs	r3, r2, r3
 8007d3e:	68fa      	ldr	r2, [r7, #12]
 8007d40:	429a      	cmp	r2, r3
 8007d42:	d8f7      	bhi.n	8007d34 <HAL_Delay+0x28>
  {
  }
}
 8007d44:	bf00      	nop
 8007d46:	bf00      	nop
 8007d48:	3710      	adds	r7, #16
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	bd80      	pop	{r7, pc}
 8007d4e:	bf00      	nop
 8007d50:	200004dc 	.word	0x200004dc

08007d54 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b086      	sub	sp, #24
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8007d60:	2300      	movs	r3, #0
 8007d62:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8007d64:	2300      	movs	r3, #0
 8007d66:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8007d68:	2300      	movs	r3, #0
 8007d6a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d101      	bne.n	8007d76 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8007d72:	2301      	movs	r3, #1
 8007d74:	e0be      	b.n	8007ef4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	689b      	ldr	r3, [r3, #8]
 8007d7a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d109      	bne.n	8007d98 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2200      	movs	r2, #0
 8007d88:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8007d92:	6878      	ldr	r0, [r7, #4]
 8007d94:	f7fd fe48 	bl	8005a28 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8007d98:	6878      	ldr	r0, [r7, #4]
 8007d9a:	f000 fb8f 	bl	80084bc <ADC_ConversionStop_Disable>
 8007d9e:	4603      	mov	r3, r0
 8007da0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007da6:	f003 0310 	and.w	r3, r3, #16
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	f040 8099 	bne.w	8007ee2 <HAL_ADC_Init+0x18e>
 8007db0:	7dfb      	ldrb	r3, [r7, #23]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	f040 8095 	bne.w	8007ee2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dbc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8007dc0:	f023 0302 	bic.w	r3, r3, #2
 8007dc4:	f043 0202 	orr.w	r2, r3, #2
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8007dd4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	7b1b      	ldrb	r3, [r3, #12]
 8007dda:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8007ddc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8007dde:	68ba      	ldr	r2, [r7, #8]
 8007de0:	4313      	orrs	r3, r2
 8007de2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	689b      	ldr	r3, [r3, #8]
 8007de8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007dec:	d003      	beq.n	8007df6 <HAL_ADC_Init+0xa2>
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	689b      	ldr	r3, [r3, #8]
 8007df2:	2b01      	cmp	r3, #1
 8007df4:	d102      	bne.n	8007dfc <HAL_ADC_Init+0xa8>
 8007df6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007dfa:	e000      	b.n	8007dfe <HAL_ADC_Init+0xaa>
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	693a      	ldr	r2, [r7, #16]
 8007e00:	4313      	orrs	r3, r2
 8007e02:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	7d1b      	ldrb	r3, [r3, #20]
 8007e08:	2b01      	cmp	r3, #1
 8007e0a:	d119      	bne.n	8007e40 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	7b1b      	ldrb	r3, [r3, #12]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d109      	bne.n	8007e28 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	699b      	ldr	r3, [r3, #24]
 8007e18:	3b01      	subs	r3, #1
 8007e1a:	035a      	lsls	r2, r3, #13
 8007e1c:	693b      	ldr	r3, [r7, #16]
 8007e1e:	4313      	orrs	r3, r2
 8007e20:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007e24:	613b      	str	r3, [r7, #16]
 8007e26:	e00b      	b.n	8007e40 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e2c:	f043 0220 	orr.w	r2, r3, #32
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e38:	f043 0201 	orr.w	r2, r3, #1
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	685b      	ldr	r3, [r3, #4]
 8007e46:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	693a      	ldr	r2, [r7, #16]
 8007e50:	430a      	orrs	r2, r1
 8007e52:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	689a      	ldr	r2, [r3, #8]
 8007e5a:	4b28      	ldr	r3, [pc, #160]	; (8007efc <HAL_ADC_Init+0x1a8>)
 8007e5c:	4013      	ands	r3, r2
 8007e5e:	687a      	ldr	r2, [r7, #4]
 8007e60:	6812      	ldr	r2, [r2, #0]
 8007e62:	68b9      	ldr	r1, [r7, #8]
 8007e64:	430b      	orrs	r3, r1
 8007e66:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	689b      	ldr	r3, [r3, #8]
 8007e6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e70:	d003      	beq.n	8007e7a <HAL_ADC_Init+0x126>
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	689b      	ldr	r3, [r3, #8]
 8007e76:	2b01      	cmp	r3, #1
 8007e78:	d104      	bne.n	8007e84 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	691b      	ldr	r3, [r3, #16]
 8007e7e:	3b01      	subs	r3, #1
 8007e80:	051b      	lsls	r3, r3, #20
 8007e82:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e8a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	68fa      	ldr	r2, [r7, #12]
 8007e94:	430a      	orrs	r2, r1
 8007e96:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	689a      	ldr	r2, [r3, #8]
 8007e9e:	4b18      	ldr	r3, [pc, #96]	; (8007f00 <HAL_ADC_Init+0x1ac>)
 8007ea0:	4013      	ands	r3, r2
 8007ea2:	68ba      	ldr	r2, [r7, #8]
 8007ea4:	429a      	cmp	r2, r3
 8007ea6:	d10b      	bne.n	8007ec0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2200      	movs	r2, #0
 8007eac:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eb2:	f023 0303 	bic.w	r3, r3, #3
 8007eb6:	f043 0201 	orr.w	r2, r3, #1
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8007ebe:	e018      	b.n	8007ef2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ec4:	f023 0312 	bic.w	r3, r3, #18
 8007ec8:	f043 0210 	orr.w	r2, r3, #16
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ed4:	f043 0201 	orr.w	r2, r3, #1
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8007edc:	2301      	movs	r3, #1
 8007ede:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8007ee0:	e007      	b.n	8007ef2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ee6:	f043 0210 	orr.w	r2, r3, #16
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8007eee:	2301      	movs	r3, #1
 8007ef0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8007ef2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	3718      	adds	r7, #24
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	bd80      	pop	{r7, pc}
 8007efc:	ffe1f7fd 	.word	0xffe1f7fd
 8007f00:	ff1f0efe 	.word	0xff1f0efe

08007f04 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b084      	sub	sp, #16
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007f16:	2b01      	cmp	r3, #1
 8007f18:	d101      	bne.n	8007f1e <HAL_ADC_Start_IT+0x1a>
 8007f1a:	2302      	movs	r3, #2
 8007f1c:	e0a0      	b.n	8008060 <HAL_ADC_Start_IT+0x15c>
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2201      	movs	r2, #1
 8007f22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8007f26:	6878      	ldr	r0, [r7, #4]
 8007f28:	f000 fa6e 	bl	8008408 <ADC_Enable>
 8007f2c:	4603      	mov	r3, r0
 8007f2e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8007f30:	7bfb      	ldrb	r3, [r7, #15]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	f040 808f 	bne.w	8008056 <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f3c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007f40:	f023 0301 	bic.w	r3, r3, #1
 8007f44:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	4a45      	ldr	r2, [pc, #276]	; (8008068 <HAL_ADC_Start_IT+0x164>)
 8007f52:	4293      	cmp	r3, r2
 8007f54:	d105      	bne.n	8007f62 <HAL_ADC_Start_IT+0x5e>
 8007f56:	4b45      	ldr	r3, [pc, #276]	; (800806c <HAL_ADC_Start_IT+0x168>)
 8007f58:	685b      	ldr	r3, [r3, #4]
 8007f5a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d115      	bne.n	8007f8e <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f66:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	685b      	ldr	r3, [r3, #4]
 8007f74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d026      	beq.n	8007fca <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f80:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007f84:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8007f8c:	e01d      	b.n	8007fca <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f92:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	4a33      	ldr	r2, [pc, #204]	; (800806c <HAL_ADC_Start_IT+0x168>)
 8007fa0:	4293      	cmp	r3, r2
 8007fa2:	d004      	beq.n	8007fae <HAL_ADC_Start_IT+0xaa>
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	4a2f      	ldr	r2, [pc, #188]	; (8008068 <HAL_ADC_Start_IT+0x164>)
 8007faa:	4293      	cmp	r3, r2
 8007fac:	d10d      	bne.n	8007fca <HAL_ADC_Start_IT+0xc6>
 8007fae:	4b2f      	ldr	r3, [pc, #188]	; (800806c <HAL_ADC_Start_IT+0x168>)
 8007fb0:	685b      	ldr	r3, [r3, #4]
 8007fb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d007      	beq.n	8007fca <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fbe:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007fc2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d006      	beq.n	8007fe4 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fda:	f023 0206 	bic.w	r2, r3, #6
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	62da      	str	r2, [r3, #44]	; 0x2c
 8007fe2:	e002      	b.n	8007fea <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2200      	movs	r2, #0
 8007fee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	f06f 0202 	mvn.w	r2, #2
 8007ffa:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	685a      	ldr	r2, [r3, #4]
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f042 0220 	orr.w	r2, r2, #32
 800800a:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	689b      	ldr	r3, [r3, #8]
 8008012:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8008016:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800801a:	d113      	bne.n	8008044 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8008020:	4a11      	ldr	r2, [pc, #68]	; (8008068 <HAL_ADC_Start_IT+0x164>)
 8008022:	4293      	cmp	r3, r2
 8008024:	d105      	bne.n	8008032 <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8008026:	4b11      	ldr	r3, [pc, #68]	; (800806c <HAL_ADC_Start_IT+0x168>)
 8008028:	685b      	ldr	r3, [r3, #4]
 800802a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800802e:	2b00      	cmp	r3, #0
 8008030:	d108      	bne.n	8008044 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	689a      	ldr	r2, [r3, #8]
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8008040:	609a      	str	r2, [r3, #8]
 8008042:	e00c      	b.n	800805e <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	689a      	ldr	r2, [r3, #8]
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8008052:	609a      	str	r2, [r3, #8]
 8008054:	e003      	b.n	800805e <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2200      	movs	r2, #0
 800805a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 800805e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008060:	4618      	mov	r0, r3
 8008062:	3710      	adds	r7, #16
 8008064:	46bd      	mov	sp, r7
 8008066:	bd80      	pop	{r7, pc}
 8008068:	40012800 	.word	0x40012800
 800806c:	40012400 	.word	0x40012400

08008070 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8008070:	b480      	push	{r7}
 8008072:	b083      	sub	sp, #12
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800807e:	4618      	mov	r0, r3
 8008080:	370c      	adds	r7, #12
 8008082:	46bd      	mov	sp, r7
 8008084:	bc80      	pop	{r7}
 8008086:	4770      	bx	lr

08008088 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b084      	sub	sp, #16
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	685b      	ldr	r3, [r3, #4]
 800809e:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 80080a0:	68bb      	ldr	r3, [r7, #8]
 80080a2:	f003 0320 	and.w	r3, r3, #32
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d03e      	beq.n	8008128 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	f003 0302 	and.w	r3, r3, #2
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d039      	beq.n	8008128 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080b8:	f003 0310 	and.w	r3, r3, #16
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d105      	bne.n	80080cc <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080c4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	689b      	ldr	r3, [r3, #8]
 80080d2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80080d6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80080da:	d11d      	bne.n	8008118 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d119      	bne.n	8008118 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	685a      	ldr	r2, [r3, #4]
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	f022 0220 	bic.w	r2, r2, #32
 80080f2:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080f8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008104:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008108:	2b00      	cmp	r3, #0
 800810a:	d105      	bne.n	8008118 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008110:	f043 0201 	orr.w	r2, r3, #1
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8008118:	6878      	ldr	r0, [r7, #4]
 800811a:	f7fd ffed 	bl	80060f8 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f06f 0212 	mvn.w	r2, #18
 8008126:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8008128:	68bb      	ldr	r3, [r7, #8]
 800812a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800812e:	2b00      	cmp	r3, #0
 8008130:	d04d      	beq.n	80081ce <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	f003 0304 	and.w	r3, r3, #4
 8008138:	2b00      	cmp	r3, #0
 800813a:	d048      	beq.n	80081ce <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008140:	f003 0310 	and.w	r3, r3, #16
 8008144:	2b00      	cmp	r3, #0
 8008146:	d105      	bne.n	8008154 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800814c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	689b      	ldr	r3, [r3, #8]
 800815a:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800815e:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8008162:	d012      	beq.n	800818a <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	685b      	ldr	r3, [r3, #4]
 800816a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800816e:	2b00      	cmp	r3, #0
 8008170:	d125      	bne.n	80081be <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	689b      	ldr	r3, [r3, #8]
 8008178:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 800817c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8008180:	d11d      	bne.n	80081be <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8008186:	2b00      	cmp	r3, #0
 8008188:	d119      	bne.n	80081be <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	685a      	ldr	r2, [r3, #4]
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008198:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800819e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d105      	bne.n	80081be <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081b6:	f043 0201 	orr.w	r2, r3, #1
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80081be:	6878      	ldr	r0, [r7, #4]
 80081c0:	f000 f9bd 	bl	800853e <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f06f 020c 	mvn.w	r2, #12
 80081cc:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 80081ce:	68bb      	ldr	r3, [r7, #8]
 80081d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d012      	beq.n	80081fe <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	f003 0301 	and.w	r3, r3, #1
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d00d      	beq.n	80081fe <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081e6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80081ee:	6878      	ldr	r0, [r7, #4]
 80081f0:	f000 f809 	bl	8008206 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	f06f 0201 	mvn.w	r2, #1
 80081fc:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 80081fe:	bf00      	nop
 8008200:	3710      	adds	r7, #16
 8008202:	46bd      	mov	sp, r7
 8008204:	bd80      	pop	{r7, pc}

08008206 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8008206:	b480      	push	{r7}
 8008208:	b083      	sub	sp, #12
 800820a:	af00      	add	r7, sp, #0
 800820c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800820e:	bf00      	nop
 8008210:	370c      	adds	r7, #12
 8008212:	46bd      	mov	sp, r7
 8008214:	bc80      	pop	{r7}
 8008216:	4770      	bx	lr

08008218 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8008218:	b480      	push	{r7}
 800821a:	b085      	sub	sp, #20
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
 8008220:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008222:	2300      	movs	r3, #0
 8008224:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8008226:	2300      	movs	r3, #0
 8008228:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008230:	2b01      	cmp	r3, #1
 8008232:	d101      	bne.n	8008238 <HAL_ADC_ConfigChannel+0x20>
 8008234:	2302      	movs	r3, #2
 8008236:	e0dc      	b.n	80083f2 <HAL_ADC_ConfigChannel+0x1da>
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2201      	movs	r2, #1
 800823c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8008240:	683b      	ldr	r3, [r7, #0]
 8008242:	685b      	ldr	r3, [r3, #4]
 8008244:	2b06      	cmp	r3, #6
 8008246:	d81c      	bhi.n	8008282 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	685a      	ldr	r2, [r3, #4]
 8008252:	4613      	mov	r3, r2
 8008254:	009b      	lsls	r3, r3, #2
 8008256:	4413      	add	r3, r2
 8008258:	3b05      	subs	r3, #5
 800825a:	221f      	movs	r2, #31
 800825c:	fa02 f303 	lsl.w	r3, r2, r3
 8008260:	43db      	mvns	r3, r3
 8008262:	4019      	ands	r1, r3
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	6818      	ldr	r0, [r3, #0]
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	685a      	ldr	r2, [r3, #4]
 800826c:	4613      	mov	r3, r2
 800826e:	009b      	lsls	r3, r3, #2
 8008270:	4413      	add	r3, r2
 8008272:	3b05      	subs	r3, #5
 8008274:	fa00 f203 	lsl.w	r2, r0, r3
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	430a      	orrs	r2, r1
 800827e:	635a      	str	r2, [r3, #52]	; 0x34
 8008280:	e03c      	b.n	80082fc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	685b      	ldr	r3, [r3, #4]
 8008286:	2b0c      	cmp	r3, #12
 8008288:	d81c      	bhi.n	80082c4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	685a      	ldr	r2, [r3, #4]
 8008294:	4613      	mov	r3, r2
 8008296:	009b      	lsls	r3, r3, #2
 8008298:	4413      	add	r3, r2
 800829a:	3b23      	subs	r3, #35	; 0x23
 800829c:	221f      	movs	r2, #31
 800829e:	fa02 f303 	lsl.w	r3, r2, r3
 80082a2:	43db      	mvns	r3, r3
 80082a4:	4019      	ands	r1, r3
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	6818      	ldr	r0, [r3, #0]
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	685a      	ldr	r2, [r3, #4]
 80082ae:	4613      	mov	r3, r2
 80082b0:	009b      	lsls	r3, r3, #2
 80082b2:	4413      	add	r3, r2
 80082b4:	3b23      	subs	r3, #35	; 0x23
 80082b6:	fa00 f203 	lsl.w	r2, r0, r3
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	430a      	orrs	r2, r1
 80082c0:	631a      	str	r2, [r3, #48]	; 0x30
 80082c2:	e01b      	b.n	80082fc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	685a      	ldr	r2, [r3, #4]
 80082ce:	4613      	mov	r3, r2
 80082d0:	009b      	lsls	r3, r3, #2
 80082d2:	4413      	add	r3, r2
 80082d4:	3b41      	subs	r3, #65	; 0x41
 80082d6:	221f      	movs	r2, #31
 80082d8:	fa02 f303 	lsl.w	r3, r2, r3
 80082dc:	43db      	mvns	r3, r3
 80082de:	4019      	ands	r1, r3
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	6818      	ldr	r0, [r3, #0]
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	685a      	ldr	r2, [r3, #4]
 80082e8:	4613      	mov	r3, r2
 80082ea:	009b      	lsls	r3, r3, #2
 80082ec:	4413      	add	r3, r2
 80082ee:	3b41      	subs	r3, #65	; 0x41
 80082f0:	fa00 f203 	lsl.w	r2, r0, r3
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	430a      	orrs	r2, r1
 80082fa:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	2b09      	cmp	r3, #9
 8008302:	d91c      	bls.n	800833e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	68d9      	ldr	r1, [r3, #12]
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	681a      	ldr	r2, [r3, #0]
 800830e:	4613      	mov	r3, r2
 8008310:	005b      	lsls	r3, r3, #1
 8008312:	4413      	add	r3, r2
 8008314:	3b1e      	subs	r3, #30
 8008316:	2207      	movs	r2, #7
 8008318:	fa02 f303 	lsl.w	r3, r2, r3
 800831c:	43db      	mvns	r3, r3
 800831e:	4019      	ands	r1, r3
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	6898      	ldr	r0, [r3, #8]
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	681a      	ldr	r2, [r3, #0]
 8008328:	4613      	mov	r3, r2
 800832a:	005b      	lsls	r3, r3, #1
 800832c:	4413      	add	r3, r2
 800832e:	3b1e      	subs	r3, #30
 8008330:	fa00 f203 	lsl.w	r2, r0, r3
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	430a      	orrs	r2, r1
 800833a:	60da      	str	r2, [r3, #12]
 800833c:	e019      	b.n	8008372 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	6919      	ldr	r1, [r3, #16]
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	681a      	ldr	r2, [r3, #0]
 8008348:	4613      	mov	r3, r2
 800834a:	005b      	lsls	r3, r3, #1
 800834c:	4413      	add	r3, r2
 800834e:	2207      	movs	r2, #7
 8008350:	fa02 f303 	lsl.w	r3, r2, r3
 8008354:	43db      	mvns	r3, r3
 8008356:	4019      	ands	r1, r3
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	6898      	ldr	r0, [r3, #8]
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	681a      	ldr	r2, [r3, #0]
 8008360:	4613      	mov	r3, r2
 8008362:	005b      	lsls	r3, r3, #1
 8008364:	4413      	add	r3, r2
 8008366:	fa00 f203 	lsl.w	r2, r0, r3
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	430a      	orrs	r2, r1
 8008370:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	2b10      	cmp	r3, #16
 8008378:	d003      	beq.n	8008382 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800837e:	2b11      	cmp	r3, #17
 8008380:	d132      	bne.n	80083e8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	4a1d      	ldr	r2, [pc, #116]	; (80083fc <HAL_ADC_ConfigChannel+0x1e4>)
 8008388:	4293      	cmp	r3, r2
 800838a:	d125      	bne.n	80083d8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	689b      	ldr	r3, [r3, #8]
 8008392:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008396:	2b00      	cmp	r3, #0
 8008398:	d126      	bne.n	80083e8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	689a      	ldr	r2, [r3, #8]
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80083a8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	2b10      	cmp	r3, #16
 80083b0:	d11a      	bne.n	80083e8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80083b2:	4b13      	ldr	r3, [pc, #76]	; (8008400 <HAL_ADC_ConfigChannel+0x1e8>)
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	4a13      	ldr	r2, [pc, #76]	; (8008404 <HAL_ADC_ConfigChannel+0x1ec>)
 80083b8:	fba2 2303 	umull	r2, r3, r2, r3
 80083bc:	0c9a      	lsrs	r2, r3, #18
 80083be:	4613      	mov	r3, r2
 80083c0:	009b      	lsls	r3, r3, #2
 80083c2:	4413      	add	r3, r2
 80083c4:	005b      	lsls	r3, r3, #1
 80083c6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80083c8:	e002      	b.n	80083d0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80083ca:	68bb      	ldr	r3, [r7, #8]
 80083cc:	3b01      	subs	r3, #1
 80083ce:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80083d0:	68bb      	ldr	r3, [r7, #8]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d1f9      	bne.n	80083ca <HAL_ADC_ConfigChannel+0x1b2>
 80083d6:	e007      	b.n	80083e8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083dc:	f043 0220 	orr.w	r2, r3, #32
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80083e4:	2301      	movs	r3, #1
 80083e6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2200      	movs	r2, #0
 80083ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80083f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80083f2:	4618      	mov	r0, r3
 80083f4:	3714      	adds	r7, #20
 80083f6:	46bd      	mov	sp, r7
 80083f8:	bc80      	pop	{r7}
 80083fa:	4770      	bx	lr
 80083fc:	40012400 	.word	0x40012400
 8008400:	20000490 	.word	0x20000490
 8008404:	431bde83 	.word	0x431bde83

08008408 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8008408:	b580      	push	{r7, lr}
 800840a:	b084      	sub	sp, #16
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008410:	2300      	movs	r3, #0
 8008412:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8008414:	2300      	movs	r3, #0
 8008416:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	689b      	ldr	r3, [r3, #8]
 800841e:	f003 0301 	and.w	r3, r3, #1
 8008422:	2b01      	cmp	r3, #1
 8008424:	d040      	beq.n	80084a8 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	689a      	ldr	r2, [r3, #8]
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	f042 0201 	orr.w	r2, r2, #1
 8008434:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8008436:	4b1f      	ldr	r3, [pc, #124]	; (80084b4 <ADC_Enable+0xac>)
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	4a1f      	ldr	r2, [pc, #124]	; (80084b8 <ADC_Enable+0xb0>)
 800843c:	fba2 2303 	umull	r2, r3, r2, r3
 8008440:	0c9b      	lsrs	r3, r3, #18
 8008442:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8008444:	e002      	b.n	800844c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8008446:	68bb      	ldr	r3, [r7, #8]
 8008448:	3b01      	subs	r3, #1
 800844a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800844c:	68bb      	ldr	r3, [r7, #8]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d1f9      	bne.n	8008446 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8008452:	f7ff fc51 	bl	8007cf8 <HAL_GetTick>
 8008456:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8008458:	e01f      	b.n	800849a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800845a:	f7ff fc4d 	bl	8007cf8 <HAL_GetTick>
 800845e:	4602      	mov	r2, r0
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	1ad3      	subs	r3, r2, r3
 8008464:	2b02      	cmp	r3, #2
 8008466:	d918      	bls.n	800849a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	689b      	ldr	r3, [r3, #8]
 800846e:	f003 0301 	and.w	r3, r3, #1
 8008472:	2b01      	cmp	r3, #1
 8008474:	d011      	beq.n	800849a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800847a:	f043 0210 	orr.w	r2, r3, #16
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008486:	f043 0201 	orr.w	r2, r3, #1
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	2200      	movs	r2, #0
 8008492:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8008496:	2301      	movs	r3, #1
 8008498:	e007      	b.n	80084aa <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	689b      	ldr	r3, [r3, #8]
 80084a0:	f003 0301 	and.w	r3, r3, #1
 80084a4:	2b01      	cmp	r3, #1
 80084a6:	d1d8      	bne.n	800845a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80084a8:	2300      	movs	r3, #0
}
 80084aa:	4618      	mov	r0, r3
 80084ac:	3710      	adds	r7, #16
 80084ae:	46bd      	mov	sp, r7
 80084b0:	bd80      	pop	{r7, pc}
 80084b2:	bf00      	nop
 80084b4:	20000490 	.word	0x20000490
 80084b8:	431bde83 	.word	0x431bde83

080084bc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b084      	sub	sp, #16
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80084c4:	2300      	movs	r3, #0
 80084c6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	689b      	ldr	r3, [r3, #8]
 80084ce:	f003 0301 	and.w	r3, r3, #1
 80084d2:	2b01      	cmp	r3, #1
 80084d4:	d12e      	bne.n	8008534 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	689a      	ldr	r2, [r3, #8]
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f022 0201 	bic.w	r2, r2, #1
 80084e4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80084e6:	f7ff fc07 	bl	8007cf8 <HAL_GetTick>
 80084ea:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80084ec:	e01b      	b.n	8008526 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80084ee:	f7ff fc03 	bl	8007cf8 <HAL_GetTick>
 80084f2:	4602      	mov	r2, r0
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	1ad3      	subs	r3, r2, r3
 80084f8:	2b02      	cmp	r3, #2
 80084fa:	d914      	bls.n	8008526 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	689b      	ldr	r3, [r3, #8]
 8008502:	f003 0301 	and.w	r3, r3, #1
 8008506:	2b01      	cmp	r3, #1
 8008508:	d10d      	bne.n	8008526 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800850e:	f043 0210 	orr.w	r2, r3, #16
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800851a:	f043 0201 	orr.w	r2, r3, #1
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8008522:	2301      	movs	r3, #1
 8008524:	e007      	b.n	8008536 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	689b      	ldr	r3, [r3, #8]
 800852c:	f003 0301 	and.w	r3, r3, #1
 8008530:	2b01      	cmp	r3, #1
 8008532:	d0dc      	beq.n	80084ee <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8008534:	2300      	movs	r3, #0
}
 8008536:	4618      	mov	r0, r3
 8008538:	3710      	adds	r7, #16
 800853a:	46bd      	mov	sp, r7
 800853c:	bd80      	pop	{r7, pc}

0800853e <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800853e:	b480      	push	{r7}
 8008540:	b083      	sub	sp, #12
 8008542:	af00      	add	r7, sp, #0
 8008544:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8008546:	bf00      	nop
 8008548:	370c      	adds	r7, #12
 800854a:	46bd      	mov	sp, r7
 800854c:	bc80      	pop	{r7}
 800854e:	4770      	bx	lr

08008550 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008550:	b480      	push	{r7}
 8008552:	b085      	sub	sp, #20
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	f003 0307 	and.w	r3, r3, #7
 800855e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008560:	4b0c      	ldr	r3, [pc, #48]	; (8008594 <__NVIC_SetPriorityGrouping+0x44>)
 8008562:	68db      	ldr	r3, [r3, #12]
 8008564:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008566:	68ba      	ldr	r2, [r7, #8]
 8008568:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800856c:	4013      	ands	r3, r2
 800856e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008574:	68bb      	ldr	r3, [r7, #8]
 8008576:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008578:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800857c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008580:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008582:	4a04      	ldr	r2, [pc, #16]	; (8008594 <__NVIC_SetPriorityGrouping+0x44>)
 8008584:	68bb      	ldr	r3, [r7, #8]
 8008586:	60d3      	str	r3, [r2, #12]
}
 8008588:	bf00      	nop
 800858a:	3714      	adds	r7, #20
 800858c:	46bd      	mov	sp, r7
 800858e:	bc80      	pop	{r7}
 8008590:	4770      	bx	lr
 8008592:	bf00      	nop
 8008594:	e000ed00 	.word	0xe000ed00

08008598 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008598:	b480      	push	{r7}
 800859a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800859c:	4b04      	ldr	r3, [pc, #16]	; (80085b0 <__NVIC_GetPriorityGrouping+0x18>)
 800859e:	68db      	ldr	r3, [r3, #12]
 80085a0:	0a1b      	lsrs	r3, r3, #8
 80085a2:	f003 0307 	and.w	r3, r3, #7
}
 80085a6:	4618      	mov	r0, r3
 80085a8:	46bd      	mov	sp, r7
 80085aa:	bc80      	pop	{r7}
 80085ac:	4770      	bx	lr
 80085ae:	bf00      	nop
 80085b0:	e000ed00 	.word	0xe000ed00

080085b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80085b4:	b480      	push	{r7}
 80085b6:	b083      	sub	sp, #12
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	4603      	mov	r3, r0
 80085bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80085be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	db0b      	blt.n	80085de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80085c6:	79fb      	ldrb	r3, [r7, #7]
 80085c8:	f003 021f 	and.w	r2, r3, #31
 80085cc:	4906      	ldr	r1, [pc, #24]	; (80085e8 <__NVIC_EnableIRQ+0x34>)
 80085ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80085d2:	095b      	lsrs	r3, r3, #5
 80085d4:	2001      	movs	r0, #1
 80085d6:	fa00 f202 	lsl.w	r2, r0, r2
 80085da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80085de:	bf00      	nop
 80085e0:	370c      	adds	r7, #12
 80085e2:	46bd      	mov	sp, r7
 80085e4:	bc80      	pop	{r7}
 80085e6:	4770      	bx	lr
 80085e8:	e000e100 	.word	0xe000e100

080085ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80085ec:	b480      	push	{r7}
 80085ee:	b083      	sub	sp, #12
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	4603      	mov	r3, r0
 80085f4:	6039      	str	r1, [r7, #0]
 80085f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80085f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	db0a      	blt.n	8008616 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	b2da      	uxtb	r2, r3
 8008604:	490c      	ldr	r1, [pc, #48]	; (8008638 <__NVIC_SetPriority+0x4c>)
 8008606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800860a:	0112      	lsls	r2, r2, #4
 800860c:	b2d2      	uxtb	r2, r2
 800860e:	440b      	add	r3, r1
 8008610:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008614:	e00a      	b.n	800862c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008616:	683b      	ldr	r3, [r7, #0]
 8008618:	b2da      	uxtb	r2, r3
 800861a:	4908      	ldr	r1, [pc, #32]	; (800863c <__NVIC_SetPriority+0x50>)
 800861c:	79fb      	ldrb	r3, [r7, #7]
 800861e:	f003 030f 	and.w	r3, r3, #15
 8008622:	3b04      	subs	r3, #4
 8008624:	0112      	lsls	r2, r2, #4
 8008626:	b2d2      	uxtb	r2, r2
 8008628:	440b      	add	r3, r1
 800862a:	761a      	strb	r2, [r3, #24]
}
 800862c:	bf00      	nop
 800862e:	370c      	adds	r7, #12
 8008630:	46bd      	mov	sp, r7
 8008632:	bc80      	pop	{r7}
 8008634:	4770      	bx	lr
 8008636:	bf00      	nop
 8008638:	e000e100 	.word	0xe000e100
 800863c:	e000ed00 	.word	0xe000ed00

08008640 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008640:	b480      	push	{r7}
 8008642:	b089      	sub	sp, #36	; 0x24
 8008644:	af00      	add	r7, sp, #0
 8008646:	60f8      	str	r0, [r7, #12]
 8008648:	60b9      	str	r1, [r7, #8]
 800864a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	f003 0307 	and.w	r3, r3, #7
 8008652:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008654:	69fb      	ldr	r3, [r7, #28]
 8008656:	f1c3 0307 	rsb	r3, r3, #7
 800865a:	2b04      	cmp	r3, #4
 800865c:	bf28      	it	cs
 800865e:	2304      	movcs	r3, #4
 8008660:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008662:	69fb      	ldr	r3, [r7, #28]
 8008664:	3304      	adds	r3, #4
 8008666:	2b06      	cmp	r3, #6
 8008668:	d902      	bls.n	8008670 <NVIC_EncodePriority+0x30>
 800866a:	69fb      	ldr	r3, [r7, #28]
 800866c:	3b03      	subs	r3, #3
 800866e:	e000      	b.n	8008672 <NVIC_EncodePriority+0x32>
 8008670:	2300      	movs	r3, #0
 8008672:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008674:	f04f 32ff 	mov.w	r2, #4294967295
 8008678:	69bb      	ldr	r3, [r7, #24]
 800867a:	fa02 f303 	lsl.w	r3, r2, r3
 800867e:	43da      	mvns	r2, r3
 8008680:	68bb      	ldr	r3, [r7, #8]
 8008682:	401a      	ands	r2, r3
 8008684:	697b      	ldr	r3, [r7, #20]
 8008686:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008688:	f04f 31ff 	mov.w	r1, #4294967295
 800868c:	697b      	ldr	r3, [r7, #20]
 800868e:	fa01 f303 	lsl.w	r3, r1, r3
 8008692:	43d9      	mvns	r1, r3
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008698:	4313      	orrs	r3, r2
         );
}
 800869a:	4618      	mov	r0, r3
 800869c:	3724      	adds	r7, #36	; 0x24
 800869e:	46bd      	mov	sp, r7
 80086a0:	bc80      	pop	{r7}
 80086a2:	4770      	bx	lr

080086a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b082      	sub	sp, #8
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	3b01      	subs	r3, #1
 80086b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80086b4:	d301      	bcc.n	80086ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80086b6:	2301      	movs	r3, #1
 80086b8:	e00f      	b.n	80086da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80086ba:	4a0a      	ldr	r2, [pc, #40]	; (80086e4 <SysTick_Config+0x40>)
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	3b01      	subs	r3, #1
 80086c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80086c2:	210f      	movs	r1, #15
 80086c4:	f04f 30ff 	mov.w	r0, #4294967295
 80086c8:	f7ff ff90 	bl	80085ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80086cc:	4b05      	ldr	r3, [pc, #20]	; (80086e4 <SysTick_Config+0x40>)
 80086ce:	2200      	movs	r2, #0
 80086d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80086d2:	4b04      	ldr	r3, [pc, #16]	; (80086e4 <SysTick_Config+0x40>)
 80086d4:	2207      	movs	r2, #7
 80086d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80086d8:	2300      	movs	r3, #0
}
 80086da:	4618      	mov	r0, r3
 80086dc:	3708      	adds	r7, #8
 80086de:	46bd      	mov	sp, r7
 80086e0:	bd80      	pop	{r7, pc}
 80086e2:	bf00      	nop
 80086e4:	e000e010 	.word	0xe000e010

080086e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b082      	sub	sp, #8
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80086f0:	6878      	ldr	r0, [r7, #4]
 80086f2:	f7ff ff2d 	bl	8008550 <__NVIC_SetPriorityGrouping>
}
 80086f6:	bf00      	nop
 80086f8:	3708      	adds	r7, #8
 80086fa:	46bd      	mov	sp, r7
 80086fc:	bd80      	pop	{r7, pc}

080086fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80086fe:	b580      	push	{r7, lr}
 8008700:	b086      	sub	sp, #24
 8008702:	af00      	add	r7, sp, #0
 8008704:	4603      	mov	r3, r0
 8008706:	60b9      	str	r1, [r7, #8]
 8008708:	607a      	str	r2, [r7, #4]
 800870a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800870c:	2300      	movs	r3, #0
 800870e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008710:	f7ff ff42 	bl	8008598 <__NVIC_GetPriorityGrouping>
 8008714:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008716:	687a      	ldr	r2, [r7, #4]
 8008718:	68b9      	ldr	r1, [r7, #8]
 800871a:	6978      	ldr	r0, [r7, #20]
 800871c:	f7ff ff90 	bl	8008640 <NVIC_EncodePriority>
 8008720:	4602      	mov	r2, r0
 8008722:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008726:	4611      	mov	r1, r2
 8008728:	4618      	mov	r0, r3
 800872a:	f7ff ff5f 	bl	80085ec <__NVIC_SetPriority>
}
 800872e:	bf00      	nop
 8008730:	3718      	adds	r7, #24
 8008732:	46bd      	mov	sp, r7
 8008734:	bd80      	pop	{r7, pc}

08008736 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008736:	b580      	push	{r7, lr}
 8008738:	b082      	sub	sp, #8
 800873a:	af00      	add	r7, sp, #0
 800873c:	4603      	mov	r3, r0
 800873e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008740:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008744:	4618      	mov	r0, r3
 8008746:	f7ff ff35 	bl	80085b4 <__NVIC_EnableIRQ>
}
 800874a:	bf00      	nop
 800874c:	3708      	adds	r7, #8
 800874e:	46bd      	mov	sp, r7
 8008750:	bd80      	pop	{r7, pc}

08008752 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008752:	b580      	push	{r7, lr}
 8008754:	b082      	sub	sp, #8
 8008756:	af00      	add	r7, sp, #0
 8008758:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800875a:	6878      	ldr	r0, [r7, #4]
 800875c:	f7ff ffa2 	bl	80086a4 <SysTick_Config>
 8008760:	4603      	mov	r3, r0
}
 8008762:	4618      	mov	r0, r3
 8008764:	3708      	adds	r7, #8
 8008766:	46bd      	mov	sp, r7
 8008768:	bd80      	pop	{r7, pc}
	...

0800876c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800876c:	b480      	push	{r7}
 800876e:	b085      	sub	sp, #20
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8008774:	2300      	movs	r3, #0
 8008776:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d101      	bne.n	8008782 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800877e:	2301      	movs	r3, #1
 8008780:	e043      	b.n	800880a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	461a      	mov	r2, r3
 8008788:	4b22      	ldr	r3, [pc, #136]	; (8008814 <HAL_DMA_Init+0xa8>)
 800878a:	4413      	add	r3, r2
 800878c:	4a22      	ldr	r2, [pc, #136]	; (8008818 <HAL_DMA_Init+0xac>)
 800878e:	fba2 2303 	umull	r2, r3, r2, r3
 8008792:	091b      	lsrs	r3, r3, #4
 8008794:	009a      	lsls	r2, r3, #2
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	4a1f      	ldr	r2, [pc, #124]	; (800881c <HAL_DMA_Init+0xb0>)
 800879e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2202      	movs	r2, #2
 80087a4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80087b6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80087ba:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80087c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	68db      	ldr	r3, [r3, #12]
 80087ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80087d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	695b      	ldr	r3, [r3, #20]
 80087d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80087dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	69db      	ldr	r3, [r3, #28]
 80087e2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80087e4:	68fa      	ldr	r2, [r7, #12]
 80087e6:	4313      	orrs	r3, r2
 80087e8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	68fa      	ldr	r2, [r7, #12]
 80087f0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	2200      	movs	r2, #0
 80087f6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2201      	movs	r2, #1
 80087fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2200      	movs	r2, #0
 8008804:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8008808:	2300      	movs	r3, #0
}
 800880a:	4618      	mov	r0, r3
 800880c:	3714      	adds	r7, #20
 800880e:	46bd      	mov	sp, r7
 8008810:	bc80      	pop	{r7}
 8008812:	4770      	bx	lr
 8008814:	bffdfff8 	.word	0xbffdfff8
 8008818:	cccccccd 	.word	0xcccccccd
 800881c:	40020000 	.word	0x40020000

08008820 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b086      	sub	sp, #24
 8008824:	af00      	add	r7, sp, #0
 8008826:	60f8      	str	r0, [r7, #12]
 8008828:	60b9      	str	r1, [r7, #8]
 800882a:	607a      	str	r2, [r7, #4]
 800882c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800882e:	2300      	movs	r3, #0
 8008830:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008838:	2b01      	cmp	r3, #1
 800883a:	d101      	bne.n	8008840 <HAL_DMA_Start_IT+0x20>
 800883c:	2302      	movs	r3, #2
 800883e:	e04b      	b.n	80088d8 <HAL_DMA_Start_IT+0xb8>
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	2201      	movs	r2, #1
 8008844:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800884e:	b2db      	uxtb	r3, r3
 8008850:	2b01      	cmp	r3, #1
 8008852:	d13a      	bne.n	80088ca <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	2202      	movs	r2, #2
 8008858:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	2200      	movs	r2, #0
 8008860:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	681a      	ldr	r2, [r3, #0]
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	f022 0201 	bic.w	r2, r2, #1
 8008870:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	687a      	ldr	r2, [r7, #4]
 8008876:	68b9      	ldr	r1, [r7, #8]
 8008878:	68f8      	ldr	r0, [r7, #12]
 800887a:	f000 f9eb 	bl	8008c54 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008882:	2b00      	cmp	r3, #0
 8008884:	d008      	beq.n	8008898 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	681a      	ldr	r2, [r3, #0]
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	f042 020e 	orr.w	r2, r2, #14
 8008894:	601a      	str	r2, [r3, #0]
 8008896:	e00f      	b.n	80088b8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	681a      	ldr	r2, [r3, #0]
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	f022 0204 	bic.w	r2, r2, #4
 80088a6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	681a      	ldr	r2, [r3, #0]
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	f042 020a 	orr.w	r2, r2, #10
 80088b6:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	681a      	ldr	r2, [r3, #0]
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	f042 0201 	orr.w	r2, r2, #1
 80088c6:	601a      	str	r2, [r3, #0]
 80088c8:	e005      	b.n	80088d6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	2200      	movs	r2, #0
 80088ce:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80088d2:	2302      	movs	r3, #2
 80088d4:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80088d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80088d8:	4618      	mov	r0, r3
 80088da:	3718      	adds	r7, #24
 80088dc:	46bd      	mov	sp, r7
 80088de:	bd80      	pop	{r7, pc}

080088e0 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80088e0:	b480      	push	{r7}
 80088e2:	b085      	sub	sp, #20
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80088e8:	2300      	movs	r3, #0
 80088ea:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80088f2:	b2db      	uxtb	r3, r3
 80088f4:	2b02      	cmp	r3, #2
 80088f6:	d008      	beq.n	800890a <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2204      	movs	r2, #4
 80088fc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	2200      	movs	r2, #0
 8008902:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8008906:	2301      	movs	r3, #1
 8008908:	e020      	b.n	800894c <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	681a      	ldr	r2, [r3, #0]
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	f022 020e 	bic.w	r2, r2, #14
 8008918:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	681a      	ldr	r2, [r3, #0]
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	f022 0201 	bic.w	r2, r2, #1
 8008928:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008932:	2101      	movs	r1, #1
 8008934:	fa01 f202 	lsl.w	r2, r1, r2
 8008938:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	2201      	movs	r2, #1
 800893e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	2200      	movs	r2, #0
 8008946:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800894a:	7bfb      	ldrb	r3, [r7, #15]
}
 800894c:	4618      	mov	r0, r3
 800894e:	3714      	adds	r7, #20
 8008950:	46bd      	mov	sp, r7
 8008952:	bc80      	pop	{r7}
 8008954:	4770      	bx	lr
	...

08008958 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8008958:	b580      	push	{r7, lr}
 800895a:	b084      	sub	sp, #16
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008960:	2300      	movs	r3, #0
 8008962:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800896a:	b2db      	uxtb	r3, r3
 800896c:	2b02      	cmp	r3, #2
 800896e:	d005      	beq.n	800897c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2204      	movs	r2, #4
 8008974:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8008976:	2301      	movs	r3, #1
 8008978:	73fb      	strb	r3, [r7, #15]
 800897a:	e051      	b.n	8008a20 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	681a      	ldr	r2, [r3, #0]
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	f022 020e 	bic.w	r2, r2, #14
 800898a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	681a      	ldr	r2, [r3, #0]
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	f022 0201 	bic.w	r2, r2, #1
 800899a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	4a22      	ldr	r2, [pc, #136]	; (8008a2c <HAL_DMA_Abort_IT+0xd4>)
 80089a2:	4293      	cmp	r3, r2
 80089a4:	d029      	beq.n	80089fa <HAL_DMA_Abort_IT+0xa2>
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	4a21      	ldr	r2, [pc, #132]	; (8008a30 <HAL_DMA_Abort_IT+0xd8>)
 80089ac:	4293      	cmp	r3, r2
 80089ae:	d022      	beq.n	80089f6 <HAL_DMA_Abort_IT+0x9e>
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	4a1f      	ldr	r2, [pc, #124]	; (8008a34 <HAL_DMA_Abort_IT+0xdc>)
 80089b6:	4293      	cmp	r3, r2
 80089b8:	d01a      	beq.n	80089f0 <HAL_DMA_Abort_IT+0x98>
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	4a1e      	ldr	r2, [pc, #120]	; (8008a38 <HAL_DMA_Abort_IT+0xe0>)
 80089c0:	4293      	cmp	r3, r2
 80089c2:	d012      	beq.n	80089ea <HAL_DMA_Abort_IT+0x92>
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	4a1c      	ldr	r2, [pc, #112]	; (8008a3c <HAL_DMA_Abort_IT+0xe4>)
 80089ca:	4293      	cmp	r3, r2
 80089cc:	d00a      	beq.n	80089e4 <HAL_DMA_Abort_IT+0x8c>
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	4a1b      	ldr	r2, [pc, #108]	; (8008a40 <HAL_DMA_Abort_IT+0xe8>)
 80089d4:	4293      	cmp	r3, r2
 80089d6:	d102      	bne.n	80089de <HAL_DMA_Abort_IT+0x86>
 80089d8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80089dc:	e00e      	b.n	80089fc <HAL_DMA_Abort_IT+0xa4>
 80089de:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80089e2:	e00b      	b.n	80089fc <HAL_DMA_Abort_IT+0xa4>
 80089e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80089e8:	e008      	b.n	80089fc <HAL_DMA_Abort_IT+0xa4>
 80089ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80089ee:	e005      	b.n	80089fc <HAL_DMA_Abort_IT+0xa4>
 80089f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80089f4:	e002      	b.n	80089fc <HAL_DMA_Abort_IT+0xa4>
 80089f6:	2310      	movs	r3, #16
 80089f8:	e000      	b.n	80089fc <HAL_DMA_Abort_IT+0xa4>
 80089fa:	2301      	movs	r3, #1
 80089fc:	4a11      	ldr	r2, [pc, #68]	; (8008a44 <HAL_DMA_Abort_IT+0xec>)
 80089fe:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2201      	movs	r2, #1
 8008a04:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d003      	beq.n	8008a20 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a1c:	6878      	ldr	r0, [r7, #4]
 8008a1e:	4798      	blx	r3
    } 
  }
  return status;
 8008a20:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a22:	4618      	mov	r0, r3
 8008a24:	3710      	adds	r7, #16
 8008a26:	46bd      	mov	sp, r7
 8008a28:	bd80      	pop	{r7, pc}
 8008a2a:	bf00      	nop
 8008a2c:	40020008 	.word	0x40020008
 8008a30:	4002001c 	.word	0x4002001c
 8008a34:	40020030 	.word	0x40020030
 8008a38:	40020044 	.word	0x40020044
 8008a3c:	40020058 	.word	0x40020058
 8008a40:	4002006c 	.word	0x4002006c
 8008a44:	40020000 	.word	0x40020000

08008a48 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b084      	sub	sp, #16
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a64:	2204      	movs	r2, #4
 8008a66:	409a      	lsls	r2, r3
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	4013      	ands	r3, r2
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d04f      	beq.n	8008b10 <HAL_DMA_IRQHandler+0xc8>
 8008a70:	68bb      	ldr	r3, [r7, #8]
 8008a72:	f003 0304 	and.w	r3, r3, #4
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d04a      	beq.n	8008b10 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	f003 0320 	and.w	r3, r3, #32
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d107      	bne.n	8008a98 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	681a      	ldr	r2, [r3, #0]
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	f022 0204 	bic.w	r2, r2, #4
 8008a96:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	4a66      	ldr	r2, [pc, #408]	; (8008c38 <HAL_DMA_IRQHandler+0x1f0>)
 8008a9e:	4293      	cmp	r3, r2
 8008aa0:	d029      	beq.n	8008af6 <HAL_DMA_IRQHandler+0xae>
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	4a65      	ldr	r2, [pc, #404]	; (8008c3c <HAL_DMA_IRQHandler+0x1f4>)
 8008aa8:	4293      	cmp	r3, r2
 8008aaa:	d022      	beq.n	8008af2 <HAL_DMA_IRQHandler+0xaa>
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	4a63      	ldr	r2, [pc, #396]	; (8008c40 <HAL_DMA_IRQHandler+0x1f8>)
 8008ab2:	4293      	cmp	r3, r2
 8008ab4:	d01a      	beq.n	8008aec <HAL_DMA_IRQHandler+0xa4>
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	4a62      	ldr	r2, [pc, #392]	; (8008c44 <HAL_DMA_IRQHandler+0x1fc>)
 8008abc:	4293      	cmp	r3, r2
 8008abe:	d012      	beq.n	8008ae6 <HAL_DMA_IRQHandler+0x9e>
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	4a60      	ldr	r2, [pc, #384]	; (8008c48 <HAL_DMA_IRQHandler+0x200>)
 8008ac6:	4293      	cmp	r3, r2
 8008ac8:	d00a      	beq.n	8008ae0 <HAL_DMA_IRQHandler+0x98>
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	4a5f      	ldr	r2, [pc, #380]	; (8008c4c <HAL_DMA_IRQHandler+0x204>)
 8008ad0:	4293      	cmp	r3, r2
 8008ad2:	d102      	bne.n	8008ada <HAL_DMA_IRQHandler+0x92>
 8008ad4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008ad8:	e00e      	b.n	8008af8 <HAL_DMA_IRQHandler+0xb0>
 8008ada:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008ade:	e00b      	b.n	8008af8 <HAL_DMA_IRQHandler+0xb0>
 8008ae0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008ae4:	e008      	b.n	8008af8 <HAL_DMA_IRQHandler+0xb0>
 8008ae6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008aea:	e005      	b.n	8008af8 <HAL_DMA_IRQHandler+0xb0>
 8008aec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008af0:	e002      	b.n	8008af8 <HAL_DMA_IRQHandler+0xb0>
 8008af2:	2340      	movs	r3, #64	; 0x40
 8008af4:	e000      	b.n	8008af8 <HAL_DMA_IRQHandler+0xb0>
 8008af6:	2304      	movs	r3, #4
 8008af8:	4a55      	ldr	r2, [pc, #340]	; (8008c50 <HAL_DMA_IRQHandler+0x208>)
 8008afa:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	f000 8094 	beq.w	8008c2e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b0a:	6878      	ldr	r0, [r7, #4]
 8008b0c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8008b0e:	e08e      	b.n	8008c2e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b14:	2202      	movs	r2, #2
 8008b16:	409a      	lsls	r2, r3
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	4013      	ands	r3, r2
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d056      	beq.n	8008bce <HAL_DMA_IRQHandler+0x186>
 8008b20:	68bb      	ldr	r3, [r7, #8]
 8008b22:	f003 0302 	and.w	r3, r3, #2
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d051      	beq.n	8008bce <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	f003 0320 	and.w	r3, r3, #32
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d10b      	bne.n	8008b50 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	681a      	ldr	r2, [r3, #0]
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	f022 020a 	bic.w	r2, r2, #10
 8008b46:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2201      	movs	r2, #1
 8008b4c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	4a38      	ldr	r2, [pc, #224]	; (8008c38 <HAL_DMA_IRQHandler+0x1f0>)
 8008b56:	4293      	cmp	r3, r2
 8008b58:	d029      	beq.n	8008bae <HAL_DMA_IRQHandler+0x166>
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	4a37      	ldr	r2, [pc, #220]	; (8008c3c <HAL_DMA_IRQHandler+0x1f4>)
 8008b60:	4293      	cmp	r3, r2
 8008b62:	d022      	beq.n	8008baa <HAL_DMA_IRQHandler+0x162>
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	4a35      	ldr	r2, [pc, #212]	; (8008c40 <HAL_DMA_IRQHandler+0x1f8>)
 8008b6a:	4293      	cmp	r3, r2
 8008b6c:	d01a      	beq.n	8008ba4 <HAL_DMA_IRQHandler+0x15c>
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	4a34      	ldr	r2, [pc, #208]	; (8008c44 <HAL_DMA_IRQHandler+0x1fc>)
 8008b74:	4293      	cmp	r3, r2
 8008b76:	d012      	beq.n	8008b9e <HAL_DMA_IRQHandler+0x156>
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	4a32      	ldr	r2, [pc, #200]	; (8008c48 <HAL_DMA_IRQHandler+0x200>)
 8008b7e:	4293      	cmp	r3, r2
 8008b80:	d00a      	beq.n	8008b98 <HAL_DMA_IRQHandler+0x150>
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	4a31      	ldr	r2, [pc, #196]	; (8008c4c <HAL_DMA_IRQHandler+0x204>)
 8008b88:	4293      	cmp	r3, r2
 8008b8a:	d102      	bne.n	8008b92 <HAL_DMA_IRQHandler+0x14a>
 8008b8c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008b90:	e00e      	b.n	8008bb0 <HAL_DMA_IRQHandler+0x168>
 8008b92:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008b96:	e00b      	b.n	8008bb0 <HAL_DMA_IRQHandler+0x168>
 8008b98:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008b9c:	e008      	b.n	8008bb0 <HAL_DMA_IRQHandler+0x168>
 8008b9e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008ba2:	e005      	b.n	8008bb0 <HAL_DMA_IRQHandler+0x168>
 8008ba4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008ba8:	e002      	b.n	8008bb0 <HAL_DMA_IRQHandler+0x168>
 8008baa:	2320      	movs	r3, #32
 8008bac:	e000      	b.n	8008bb0 <HAL_DMA_IRQHandler+0x168>
 8008bae:	2302      	movs	r3, #2
 8008bb0:	4a27      	ldr	r2, [pc, #156]	; (8008c50 <HAL_DMA_IRQHandler+0x208>)
 8008bb2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d034      	beq.n	8008c2e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bc8:	6878      	ldr	r0, [r7, #4]
 8008bca:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8008bcc:	e02f      	b.n	8008c2e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bd2:	2208      	movs	r2, #8
 8008bd4:	409a      	lsls	r2, r3
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	4013      	ands	r3, r2
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d028      	beq.n	8008c30 <HAL_DMA_IRQHandler+0x1e8>
 8008bde:	68bb      	ldr	r3, [r7, #8]
 8008be0:	f003 0308 	and.w	r3, r3, #8
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d023      	beq.n	8008c30 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	681a      	ldr	r2, [r3, #0]
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	f022 020e 	bic.w	r2, r2, #14
 8008bf6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c00:	2101      	movs	r1, #1
 8008c02:	fa01 f202 	lsl.w	r2, r1, r2
 8008c06:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2201      	movs	r2, #1
 8008c0c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	2201      	movs	r2, #1
 8008c12:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	2200      	movs	r2, #0
 8008c1a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d004      	beq.n	8008c30 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c2a:	6878      	ldr	r0, [r7, #4]
 8008c2c:	4798      	blx	r3
    }
  }
  return;
 8008c2e:	bf00      	nop
 8008c30:	bf00      	nop
}
 8008c32:	3710      	adds	r7, #16
 8008c34:	46bd      	mov	sp, r7
 8008c36:	bd80      	pop	{r7, pc}
 8008c38:	40020008 	.word	0x40020008
 8008c3c:	4002001c 	.word	0x4002001c
 8008c40:	40020030 	.word	0x40020030
 8008c44:	40020044 	.word	0x40020044
 8008c48:	40020058 	.word	0x40020058
 8008c4c:	4002006c 	.word	0x4002006c
 8008c50:	40020000 	.word	0x40020000

08008c54 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008c54:	b480      	push	{r7}
 8008c56:	b085      	sub	sp, #20
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	60f8      	str	r0, [r7, #12]
 8008c5c:	60b9      	str	r1, [r7, #8]
 8008c5e:	607a      	str	r2, [r7, #4]
 8008c60:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c6a:	2101      	movs	r1, #1
 8008c6c:	fa01 f202 	lsl.w	r2, r1, r2
 8008c70:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	683a      	ldr	r2, [r7, #0]
 8008c78:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	685b      	ldr	r3, [r3, #4]
 8008c7e:	2b10      	cmp	r3, #16
 8008c80:	d108      	bne.n	8008c94 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	687a      	ldr	r2, [r7, #4]
 8008c88:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	68ba      	ldr	r2, [r7, #8]
 8008c90:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8008c92:	e007      	b.n	8008ca4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	68ba      	ldr	r2, [r7, #8]
 8008c9a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	687a      	ldr	r2, [r7, #4]
 8008ca2:	60da      	str	r2, [r3, #12]
}
 8008ca4:	bf00      	nop
 8008ca6:	3714      	adds	r7, #20
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	bc80      	pop	{r7}
 8008cac:	4770      	bx	lr
	...

08008cb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008cb0:	b480      	push	{r7}
 8008cb2:	b08b      	sub	sp, #44	; 0x2c
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
 8008cb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008cba:	2300      	movs	r3, #0
 8008cbc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008cc2:	e169      	b.n	8008f98 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8008cc4:	2201      	movs	r2, #1
 8008cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8008ccc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	69fa      	ldr	r2, [r7, #28]
 8008cd4:	4013      	ands	r3, r2
 8008cd6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8008cd8:	69ba      	ldr	r2, [r7, #24]
 8008cda:	69fb      	ldr	r3, [r7, #28]
 8008cdc:	429a      	cmp	r2, r3
 8008cde:	f040 8158 	bne.w	8008f92 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8008ce2:	683b      	ldr	r3, [r7, #0]
 8008ce4:	685b      	ldr	r3, [r3, #4]
 8008ce6:	4a9a      	ldr	r2, [pc, #616]	; (8008f50 <HAL_GPIO_Init+0x2a0>)
 8008ce8:	4293      	cmp	r3, r2
 8008cea:	d05e      	beq.n	8008daa <HAL_GPIO_Init+0xfa>
 8008cec:	4a98      	ldr	r2, [pc, #608]	; (8008f50 <HAL_GPIO_Init+0x2a0>)
 8008cee:	4293      	cmp	r3, r2
 8008cf0:	d875      	bhi.n	8008dde <HAL_GPIO_Init+0x12e>
 8008cf2:	4a98      	ldr	r2, [pc, #608]	; (8008f54 <HAL_GPIO_Init+0x2a4>)
 8008cf4:	4293      	cmp	r3, r2
 8008cf6:	d058      	beq.n	8008daa <HAL_GPIO_Init+0xfa>
 8008cf8:	4a96      	ldr	r2, [pc, #600]	; (8008f54 <HAL_GPIO_Init+0x2a4>)
 8008cfa:	4293      	cmp	r3, r2
 8008cfc:	d86f      	bhi.n	8008dde <HAL_GPIO_Init+0x12e>
 8008cfe:	4a96      	ldr	r2, [pc, #600]	; (8008f58 <HAL_GPIO_Init+0x2a8>)
 8008d00:	4293      	cmp	r3, r2
 8008d02:	d052      	beq.n	8008daa <HAL_GPIO_Init+0xfa>
 8008d04:	4a94      	ldr	r2, [pc, #592]	; (8008f58 <HAL_GPIO_Init+0x2a8>)
 8008d06:	4293      	cmp	r3, r2
 8008d08:	d869      	bhi.n	8008dde <HAL_GPIO_Init+0x12e>
 8008d0a:	4a94      	ldr	r2, [pc, #592]	; (8008f5c <HAL_GPIO_Init+0x2ac>)
 8008d0c:	4293      	cmp	r3, r2
 8008d0e:	d04c      	beq.n	8008daa <HAL_GPIO_Init+0xfa>
 8008d10:	4a92      	ldr	r2, [pc, #584]	; (8008f5c <HAL_GPIO_Init+0x2ac>)
 8008d12:	4293      	cmp	r3, r2
 8008d14:	d863      	bhi.n	8008dde <HAL_GPIO_Init+0x12e>
 8008d16:	4a92      	ldr	r2, [pc, #584]	; (8008f60 <HAL_GPIO_Init+0x2b0>)
 8008d18:	4293      	cmp	r3, r2
 8008d1a:	d046      	beq.n	8008daa <HAL_GPIO_Init+0xfa>
 8008d1c:	4a90      	ldr	r2, [pc, #576]	; (8008f60 <HAL_GPIO_Init+0x2b0>)
 8008d1e:	4293      	cmp	r3, r2
 8008d20:	d85d      	bhi.n	8008dde <HAL_GPIO_Init+0x12e>
 8008d22:	2b12      	cmp	r3, #18
 8008d24:	d82a      	bhi.n	8008d7c <HAL_GPIO_Init+0xcc>
 8008d26:	2b12      	cmp	r3, #18
 8008d28:	d859      	bhi.n	8008dde <HAL_GPIO_Init+0x12e>
 8008d2a:	a201      	add	r2, pc, #4	; (adr r2, 8008d30 <HAL_GPIO_Init+0x80>)
 8008d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d30:	08008dab 	.word	0x08008dab
 8008d34:	08008d85 	.word	0x08008d85
 8008d38:	08008d97 	.word	0x08008d97
 8008d3c:	08008dd9 	.word	0x08008dd9
 8008d40:	08008ddf 	.word	0x08008ddf
 8008d44:	08008ddf 	.word	0x08008ddf
 8008d48:	08008ddf 	.word	0x08008ddf
 8008d4c:	08008ddf 	.word	0x08008ddf
 8008d50:	08008ddf 	.word	0x08008ddf
 8008d54:	08008ddf 	.word	0x08008ddf
 8008d58:	08008ddf 	.word	0x08008ddf
 8008d5c:	08008ddf 	.word	0x08008ddf
 8008d60:	08008ddf 	.word	0x08008ddf
 8008d64:	08008ddf 	.word	0x08008ddf
 8008d68:	08008ddf 	.word	0x08008ddf
 8008d6c:	08008ddf 	.word	0x08008ddf
 8008d70:	08008ddf 	.word	0x08008ddf
 8008d74:	08008d8d 	.word	0x08008d8d
 8008d78:	08008da1 	.word	0x08008da1
 8008d7c:	4a79      	ldr	r2, [pc, #484]	; (8008f64 <HAL_GPIO_Init+0x2b4>)
 8008d7e:	4293      	cmp	r3, r2
 8008d80:	d013      	beq.n	8008daa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8008d82:	e02c      	b.n	8008dde <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	68db      	ldr	r3, [r3, #12]
 8008d88:	623b      	str	r3, [r7, #32]
          break;
 8008d8a:	e029      	b.n	8008de0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	68db      	ldr	r3, [r3, #12]
 8008d90:	3304      	adds	r3, #4
 8008d92:	623b      	str	r3, [r7, #32]
          break;
 8008d94:	e024      	b.n	8008de0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8008d96:	683b      	ldr	r3, [r7, #0]
 8008d98:	68db      	ldr	r3, [r3, #12]
 8008d9a:	3308      	adds	r3, #8
 8008d9c:	623b      	str	r3, [r7, #32]
          break;
 8008d9e:	e01f      	b.n	8008de0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8008da0:	683b      	ldr	r3, [r7, #0]
 8008da2:	68db      	ldr	r3, [r3, #12]
 8008da4:	330c      	adds	r3, #12
 8008da6:	623b      	str	r3, [r7, #32]
          break;
 8008da8:	e01a      	b.n	8008de0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	689b      	ldr	r3, [r3, #8]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d102      	bne.n	8008db8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8008db2:	2304      	movs	r3, #4
 8008db4:	623b      	str	r3, [r7, #32]
          break;
 8008db6:	e013      	b.n	8008de0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	689b      	ldr	r3, [r3, #8]
 8008dbc:	2b01      	cmp	r3, #1
 8008dbe:	d105      	bne.n	8008dcc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008dc0:	2308      	movs	r3, #8
 8008dc2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	69fa      	ldr	r2, [r7, #28]
 8008dc8:	611a      	str	r2, [r3, #16]
          break;
 8008dca:	e009      	b.n	8008de0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008dcc:	2308      	movs	r3, #8
 8008dce:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	69fa      	ldr	r2, [r7, #28]
 8008dd4:	615a      	str	r2, [r3, #20]
          break;
 8008dd6:	e003      	b.n	8008de0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8008dd8:	2300      	movs	r3, #0
 8008dda:	623b      	str	r3, [r7, #32]
          break;
 8008ddc:	e000      	b.n	8008de0 <HAL_GPIO_Init+0x130>
          break;
 8008dde:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8008de0:	69bb      	ldr	r3, [r7, #24]
 8008de2:	2bff      	cmp	r3, #255	; 0xff
 8008de4:	d801      	bhi.n	8008dea <HAL_GPIO_Init+0x13a>
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	e001      	b.n	8008dee <HAL_GPIO_Init+0x13e>
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	3304      	adds	r3, #4
 8008dee:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8008df0:	69bb      	ldr	r3, [r7, #24]
 8008df2:	2bff      	cmp	r3, #255	; 0xff
 8008df4:	d802      	bhi.n	8008dfc <HAL_GPIO_Init+0x14c>
 8008df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008df8:	009b      	lsls	r3, r3, #2
 8008dfa:	e002      	b.n	8008e02 <HAL_GPIO_Init+0x152>
 8008dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dfe:	3b08      	subs	r3, #8
 8008e00:	009b      	lsls	r3, r3, #2
 8008e02:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8008e04:	697b      	ldr	r3, [r7, #20]
 8008e06:	681a      	ldr	r2, [r3, #0]
 8008e08:	210f      	movs	r1, #15
 8008e0a:	693b      	ldr	r3, [r7, #16]
 8008e0c:	fa01 f303 	lsl.w	r3, r1, r3
 8008e10:	43db      	mvns	r3, r3
 8008e12:	401a      	ands	r2, r3
 8008e14:	6a39      	ldr	r1, [r7, #32]
 8008e16:	693b      	ldr	r3, [r7, #16]
 8008e18:	fa01 f303 	lsl.w	r3, r1, r3
 8008e1c:	431a      	orrs	r2, r3
 8008e1e:	697b      	ldr	r3, [r7, #20]
 8008e20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008e22:	683b      	ldr	r3, [r7, #0]
 8008e24:	685b      	ldr	r3, [r3, #4]
 8008e26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	f000 80b1 	beq.w	8008f92 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8008e30:	4b4d      	ldr	r3, [pc, #308]	; (8008f68 <HAL_GPIO_Init+0x2b8>)
 8008e32:	699b      	ldr	r3, [r3, #24]
 8008e34:	4a4c      	ldr	r2, [pc, #304]	; (8008f68 <HAL_GPIO_Init+0x2b8>)
 8008e36:	f043 0301 	orr.w	r3, r3, #1
 8008e3a:	6193      	str	r3, [r2, #24]
 8008e3c:	4b4a      	ldr	r3, [pc, #296]	; (8008f68 <HAL_GPIO_Init+0x2b8>)
 8008e3e:	699b      	ldr	r3, [r3, #24]
 8008e40:	f003 0301 	and.w	r3, r3, #1
 8008e44:	60bb      	str	r3, [r7, #8]
 8008e46:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8008e48:	4a48      	ldr	r2, [pc, #288]	; (8008f6c <HAL_GPIO_Init+0x2bc>)
 8008e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e4c:	089b      	lsrs	r3, r3, #2
 8008e4e:	3302      	adds	r3, #2
 8008e50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e54:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8008e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e58:	f003 0303 	and.w	r3, r3, #3
 8008e5c:	009b      	lsls	r3, r3, #2
 8008e5e:	220f      	movs	r2, #15
 8008e60:	fa02 f303 	lsl.w	r3, r2, r3
 8008e64:	43db      	mvns	r3, r3
 8008e66:	68fa      	ldr	r2, [r7, #12]
 8008e68:	4013      	ands	r3, r2
 8008e6a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	4a40      	ldr	r2, [pc, #256]	; (8008f70 <HAL_GPIO_Init+0x2c0>)
 8008e70:	4293      	cmp	r3, r2
 8008e72:	d013      	beq.n	8008e9c <HAL_GPIO_Init+0x1ec>
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	4a3f      	ldr	r2, [pc, #252]	; (8008f74 <HAL_GPIO_Init+0x2c4>)
 8008e78:	4293      	cmp	r3, r2
 8008e7a:	d00d      	beq.n	8008e98 <HAL_GPIO_Init+0x1e8>
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	4a3e      	ldr	r2, [pc, #248]	; (8008f78 <HAL_GPIO_Init+0x2c8>)
 8008e80:	4293      	cmp	r3, r2
 8008e82:	d007      	beq.n	8008e94 <HAL_GPIO_Init+0x1e4>
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	4a3d      	ldr	r2, [pc, #244]	; (8008f7c <HAL_GPIO_Init+0x2cc>)
 8008e88:	4293      	cmp	r3, r2
 8008e8a:	d101      	bne.n	8008e90 <HAL_GPIO_Init+0x1e0>
 8008e8c:	2303      	movs	r3, #3
 8008e8e:	e006      	b.n	8008e9e <HAL_GPIO_Init+0x1ee>
 8008e90:	2304      	movs	r3, #4
 8008e92:	e004      	b.n	8008e9e <HAL_GPIO_Init+0x1ee>
 8008e94:	2302      	movs	r3, #2
 8008e96:	e002      	b.n	8008e9e <HAL_GPIO_Init+0x1ee>
 8008e98:	2301      	movs	r3, #1
 8008e9a:	e000      	b.n	8008e9e <HAL_GPIO_Init+0x1ee>
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ea0:	f002 0203 	and.w	r2, r2, #3
 8008ea4:	0092      	lsls	r2, r2, #2
 8008ea6:	4093      	lsls	r3, r2
 8008ea8:	68fa      	ldr	r2, [r7, #12]
 8008eaa:	4313      	orrs	r3, r2
 8008eac:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8008eae:	492f      	ldr	r1, [pc, #188]	; (8008f6c <HAL_GPIO_Init+0x2bc>)
 8008eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eb2:	089b      	lsrs	r3, r3, #2
 8008eb4:	3302      	adds	r3, #2
 8008eb6:	68fa      	ldr	r2, [r7, #12]
 8008eb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008ebc:	683b      	ldr	r3, [r7, #0]
 8008ebe:	685b      	ldr	r3, [r3, #4]
 8008ec0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d006      	beq.n	8008ed6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8008ec8:	4b2d      	ldr	r3, [pc, #180]	; (8008f80 <HAL_GPIO_Init+0x2d0>)
 8008eca:	689a      	ldr	r2, [r3, #8]
 8008ecc:	492c      	ldr	r1, [pc, #176]	; (8008f80 <HAL_GPIO_Init+0x2d0>)
 8008ece:	69bb      	ldr	r3, [r7, #24]
 8008ed0:	4313      	orrs	r3, r2
 8008ed2:	608b      	str	r3, [r1, #8]
 8008ed4:	e006      	b.n	8008ee4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8008ed6:	4b2a      	ldr	r3, [pc, #168]	; (8008f80 <HAL_GPIO_Init+0x2d0>)
 8008ed8:	689a      	ldr	r2, [r3, #8]
 8008eda:	69bb      	ldr	r3, [r7, #24]
 8008edc:	43db      	mvns	r3, r3
 8008ede:	4928      	ldr	r1, [pc, #160]	; (8008f80 <HAL_GPIO_Init+0x2d0>)
 8008ee0:	4013      	ands	r3, r2
 8008ee2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008ee4:	683b      	ldr	r3, [r7, #0]
 8008ee6:	685b      	ldr	r3, [r3, #4]
 8008ee8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d006      	beq.n	8008efe <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8008ef0:	4b23      	ldr	r3, [pc, #140]	; (8008f80 <HAL_GPIO_Init+0x2d0>)
 8008ef2:	68da      	ldr	r2, [r3, #12]
 8008ef4:	4922      	ldr	r1, [pc, #136]	; (8008f80 <HAL_GPIO_Init+0x2d0>)
 8008ef6:	69bb      	ldr	r3, [r7, #24]
 8008ef8:	4313      	orrs	r3, r2
 8008efa:	60cb      	str	r3, [r1, #12]
 8008efc:	e006      	b.n	8008f0c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8008efe:	4b20      	ldr	r3, [pc, #128]	; (8008f80 <HAL_GPIO_Init+0x2d0>)
 8008f00:	68da      	ldr	r2, [r3, #12]
 8008f02:	69bb      	ldr	r3, [r7, #24]
 8008f04:	43db      	mvns	r3, r3
 8008f06:	491e      	ldr	r1, [pc, #120]	; (8008f80 <HAL_GPIO_Init+0x2d0>)
 8008f08:	4013      	ands	r3, r2
 8008f0a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008f0c:	683b      	ldr	r3, [r7, #0]
 8008f0e:	685b      	ldr	r3, [r3, #4]
 8008f10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d006      	beq.n	8008f26 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8008f18:	4b19      	ldr	r3, [pc, #100]	; (8008f80 <HAL_GPIO_Init+0x2d0>)
 8008f1a:	685a      	ldr	r2, [r3, #4]
 8008f1c:	4918      	ldr	r1, [pc, #96]	; (8008f80 <HAL_GPIO_Init+0x2d0>)
 8008f1e:	69bb      	ldr	r3, [r7, #24]
 8008f20:	4313      	orrs	r3, r2
 8008f22:	604b      	str	r3, [r1, #4]
 8008f24:	e006      	b.n	8008f34 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8008f26:	4b16      	ldr	r3, [pc, #88]	; (8008f80 <HAL_GPIO_Init+0x2d0>)
 8008f28:	685a      	ldr	r2, [r3, #4]
 8008f2a:	69bb      	ldr	r3, [r7, #24]
 8008f2c:	43db      	mvns	r3, r3
 8008f2e:	4914      	ldr	r1, [pc, #80]	; (8008f80 <HAL_GPIO_Init+0x2d0>)
 8008f30:	4013      	ands	r3, r2
 8008f32:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008f34:	683b      	ldr	r3, [r7, #0]
 8008f36:	685b      	ldr	r3, [r3, #4]
 8008f38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d021      	beq.n	8008f84 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8008f40:	4b0f      	ldr	r3, [pc, #60]	; (8008f80 <HAL_GPIO_Init+0x2d0>)
 8008f42:	681a      	ldr	r2, [r3, #0]
 8008f44:	490e      	ldr	r1, [pc, #56]	; (8008f80 <HAL_GPIO_Init+0x2d0>)
 8008f46:	69bb      	ldr	r3, [r7, #24]
 8008f48:	4313      	orrs	r3, r2
 8008f4a:	600b      	str	r3, [r1, #0]
 8008f4c:	e021      	b.n	8008f92 <HAL_GPIO_Init+0x2e2>
 8008f4e:	bf00      	nop
 8008f50:	10320000 	.word	0x10320000
 8008f54:	10310000 	.word	0x10310000
 8008f58:	10220000 	.word	0x10220000
 8008f5c:	10210000 	.word	0x10210000
 8008f60:	10120000 	.word	0x10120000
 8008f64:	10110000 	.word	0x10110000
 8008f68:	40021000 	.word	0x40021000
 8008f6c:	40010000 	.word	0x40010000
 8008f70:	40010800 	.word	0x40010800
 8008f74:	40010c00 	.word	0x40010c00
 8008f78:	40011000 	.word	0x40011000
 8008f7c:	40011400 	.word	0x40011400
 8008f80:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8008f84:	4b0b      	ldr	r3, [pc, #44]	; (8008fb4 <HAL_GPIO_Init+0x304>)
 8008f86:	681a      	ldr	r2, [r3, #0]
 8008f88:	69bb      	ldr	r3, [r7, #24]
 8008f8a:	43db      	mvns	r3, r3
 8008f8c:	4909      	ldr	r1, [pc, #36]	; (8008fb4 <HAL_GPIO_Init+0x304>)
 8008f8e:	4013      	ands	r3, r2
 8008f90:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8008f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f94:	3301      	adds	r3, #1
 8008f96:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	681a      	ldr	r2, [r3, #0]
 8008f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f9e:	fa22 f303 	lsr.w	r3, r2, r3
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	f47f ae8e 	bne.w	8008cc4 <HAL_GPIO_Init+0x14>
  }
}
 8008fa8:	bf00      	nop
 8008faa:	bf00      	nop
 8008fac:	372c      	adds	r7, #44	; 0x2c
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	bc80      	pop	{r7}
 8008fb2:	4770      	bx	lr
 8008fb4:	40010400 	.word	0x40010400

08008fb8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008fb8:	b480      	push	{r7}
 8008fba:	b085      	sub	sp, #20
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
 8008fc0:	460b      	mov	r3, r1
 8008fc2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	689a      	ldr	r2, [r3, #8]
 8008fc8:	887b      	ldrh	r3, [r7, #2]
 8008fca:	4013      	ands	r3, r2
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d002      	beq.n	8008fd6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008fd0:	2301      	movs	r3, #1
 8008fd2:	73fb      	strb	r3, [r7, #15]
 8008fd4:	e001      	b.n	8008fda <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008fda:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fdc:	4618      	mov	r0, r3
 8008fde:	3714      	adds	r7, #20
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	bc80      	pop	{r7}
 8008fe4:	4770      	bx	lr

08008fe6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008fe6:	b480      	push	{r7}
 8008fe8:	b083      	sub	sp, #12
 8008fea:	af00      	add	r7, sp, #0
 8008fec:	6078      	str	r0, [r7, #4]
 8008fee:	460b      	mov	r3, r1
 8008ff0:	807b      	strh	r3, [r7, #2]
 8008ff2:	4613      	mov	r3, r2
 8008ff4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008ff6:	787b      	ldrb	r3, [r7, #1]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d003      	beq.n	8009004 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008ffc:	887a      	ldrh	r2, [r7, #2]
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8009002:	e003      	b.n	800900c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8009004:	887b      	ldrh	r3, [r7, #2]
 8009006:	041a      	lsls	r2, r3, #16
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	611a      	str	r2, [r3, #16]
}
 800900c:	bf00      	nop
 800900e:	370c      	adds	r7, #12
 8009010:	46bd      	mov	sp, r7
 8009012:	bc80      	pop	{r7}
 8009014:	4770      	bx	lr

08009016 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009016:	b480      	push	{r7}
 8009018:	b085      	sub	sp, #20
 800901a:	af00      	add	r7, sp, #0
 800901c:	6078      	str	r0, [r7, #4]
 800901e:	460b      	mov	r3, r1
 8009020:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	68db      	ldr	r3, [r3, #12]
 8009026:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8009028:	887a      	ldrh	r2, [r7, #2]
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	4013      	ands	r3, r2
 800902e:	041a      	lsls	r2, r3, #16
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	43d9      	mvns	r1, r3
 8009034:	887b      	ldrh	r3, [r7, #2]
 8009036:	400b      	ands	r3, r1
 8009038:	431a      	orrs	r2, r3
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	611a      	str	r2, [r3, #16]
}
 800903e:	bf00      	nop
 8009040:	3714      	adds	r7, #20
 8009042:	46bd      	mov	sp, r7
 8009044:	bc80      	pop	{r7}
 8009046:	4770      	bx	lr

08009048 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b082      	sub	sp, #8
 800904c:	af00      	add	r7, sp, #0
 800904e:	4603      	mov	r3, r0
 8009050:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8009052:	4b08      	ldr	r3, [pc, #32]	; (8009074 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009054:	695a      	ldr	r2, [r3, #20]
 8009056:	88fb      	ldrh	r3, [r7, #6]
 8009058:	4013      	ands	r3, r2
 800905a:	2b00      	cmp	r3, #0
 800905c:	d006      	beq.n	800906c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800905e:	4a05      	ldr	r2, [pc, #20]	; (8009074 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009060:	88fb      	ldrh	r3, [r7, #6]
 8009062:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8009064:	88fb      	ldrh	r3, [r7, #6]
 8009066:	4618      	mov	r0, r3
 8009068:	f7fc ffd6 	bl	8006018 <HAL_GPIO_EXTI_Callback>
  }
}
 800906c:	bf00      	nop
 800906e:	3708      	adds	r7, #8
 8009070:	46bd      	mov	sp, r7
 8009072:	bd80      	pop	{r7, pc}
 8009074:	40010400 	.word	0x40010400

08009078 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b084      	sub	sp, #16
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d101      	bne.n	800908a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009086:	2301      	movs	r3, #1
 8009088:	e12b      	b.n	80092e2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009090:	b2db      	uxtb	r3, r3
 8009092:	2b00      	cmp	r3, #0
 8009094:	d106      	bne.n	80090a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	2200      	movs	r2, #0
 800909a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800909e:	6878      	ldr	r0, [r7, #4]
 80090a0:	f7fc feb4 	bl	8005e0c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2224      	movs	r2, #36	; 0x24
 80090a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	681a      	ldr	r2, [r3, #0]
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	f022 0201 	bic.w	r2, r2, #1
 80090ba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	681a      	ldr	r2, [r3, #0]
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80090ca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	681a      	ldr	r2, [r3, #0]
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80090da:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80090dc:	f001 fbca 	bl	800a874 <HAL_RCC_GetPCLK1Freq>
 80090e0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	685b      	ldr	r3, [r3, #4]
 80090e6:	4a81      	ldr	r2, [pc, #516]	; (80092ec <HAL_I2C_Init+0x274>)
 80090e8:	4293      	cmp	r3, r2
 80090ea:	d807      	bhi.n	80090fc <HAL_I2C_Init+0x84>
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	4a80      	ldr	r2, [pc, #512]	; (80092f0 <HAL_I2C_Init+0x278>)
 80090f0:	4293      	cmp	r3, r2
 80090f2:	bf94      	ite	ls
 80090f4:	2301      	movls	r3, #1
 80090f6:	2300      	movhi	r3, #0
 80090f8:	b2db      	uxtb	r3, r3
 80090fa:	e006      	b.n	800910a <HAL_I2C_Init+0x92>
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	4a7d      	ldr	r2, [pc, #500]	; (80092f4 <HAL_I2C_Init+0x27c>)
 8009100:	4293      	cmp	r3, r2
 8009102:	bf94      	ite	ls
 8009104:	2301      	movls	r3, #1
 8009106:	2300      	movhi	r3, #0
 8009108:	b2db      	uxtb	r3, r3
 800910a:	2b00      	cmp	r3, #0
 800910c:	d001      	beq.n	8009112 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800910e:	2301      	movs	r3, #1
 8009110:	e0e7      	b.n	80092e2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	4a78      	ldr	r2, [pc, #480]	; (80092f8 <HAL_I2C_Init+0x280>)
 8009116:	fba2 2303 	umull	r2, r3, r2, r3
 800911a:	0c9b      	lsrs	r3, r3, #18
 800911c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	685b      	ldr	r3, [r3, #4]
 8009124:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	68ba      	ldr	r2, [r7, #8]
 800912e:	430a      	orrs	r2, r1
 8009130:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	6a1b      	ldr	r3, [r3, #32]
 8009138:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	685b      	ldr	r3, [r3, #4]
 8009140:	4a6a      	ldr	r2, [pc, #424]	; (80092ec <HAL_I2C_Init+0x274>)
 8009142:	4293      	cmp	r3, r2
 8009144:	d802      	bhi.n	800914c <HAL_I2C_Init+0xd4>
 8009146:	68bb      	ldr	r3, [r7, #8]
 8009148:	3301      	adds	r3, #1
 800914a:	e009      	b.n	8009160 <HAL_I2C_Init+0xe8>
 800914c:	68bb      	ldr	r3, [r7, #8]
 800914e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8009152:	fb02 f303 	mul.w	r3, r2, r3
 8009156:	4a69      	ldr	r2, [pc, #420]	; (80092fc <HAL_I2C_Init+0x284>)
 8009158:	fba2 2303 	umull	r2, r3, r2, r3
 800915c:	099b      	lsrs	r3, r3, #6
 800915e:	3301      	adds	r3, #1
 8009160:	687a      	ldr	r2, [r7, #4]
 8009162:	6812      	ldr	r2, [r2, #0]
 8009164:	430b      	orrs	r3, r1
 8009166:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	69db      	ldr	r3, [r3, #28]
 800916e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8009172:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	685b      	ldr	r3, [r3, #4]
 800917a:	495c      	ldr	r1, [pc, #368]	; (80092ec <HAL_I2C_Init+0x274>)
 800917c:	428b      	cmp	r3, r1
 800917e:	d819      	bhi.n	80091b4 <HAL_I2C_Init+0x13c>
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	1e59      	subs	r1, r3, #1
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	685b      	ldr	r3, [r3, #4]
 8009188:	005b      	lsls	r3, r3, #1
 800918a:	fbb1 f3f3 	udiv	r3, r1, r3
 800918e:	1c59      	adds	r1, r3, #1
 8009190:	f640 73fc 	movw	r3, #4092	; 0xffc
 8009194:	400b      	ands	r3, r1
 8009196:	2b00      	cmp	r3, #0
 8009198:	d00a      	beq.n	80091b0 <HAL_I2C_Init+0x138>
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	1e59      	subs	r1, r3, #1
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	685b      	ldr	r3, [r3, #4]
 80091a2:	005b      	lsls	r3, r3, #1
 80091a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80091a8:	3301      	adds	r3, #1
 80091aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80091ae:	e051      	b.n	8009254 <HAL_I2C_Init+0x1dc>
 80091b0:	2304      	movs	r3, #4
 80091b2:	e04f      	b.n	8009254 <HAL_I2C_Init+0x1dc>
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	689b      	ldr	r3, [r3, #8]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d111      	bne.n	80091e0 <HAL_I2C_Init+0x168>
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	1e58      	subs	r0, r3, #1
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	6859      	ldr	r1, [r3, #4]
 80091c4:	460b      	mov	r3, r1
 80091c6:	005b      	lsls	r3, r3, #1
 80091c8:	440b      	add	r3, r1
 80091ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80091ce:	3301      	adds	r3, #1
 80091d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	bf0c      	ite	eq
 80091d8:	2301      	moveq	r3, #1
 80091da:	2300      	movne	r3, #0
 80091dc:	b2db      	uxtb	r3, r3
 80091de:	e012      	b.n	8009206 <HAL_I2C_Init+0x18e>
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	1e58      	subs	r0, r3, #1
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	6859      	ldr	r1, [r3, #4]
 80091e8:	460b      	mov	r3, r1
 80091ea:	009b      	lsls	r3, r3, #2
 80091ec:	440b      	add	r3, r1
 80091ee:	0099      	lsls	r1, r3, #2
 80091f0:	440b      	add	r3, r1
 80091f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80091f6:	3301      	adds	r3, #1
 80091f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	bf0c      	ite	eq
 8009200:	2301      	moveq	r3, #1
 8009202:	2300      	movne	r3, #0
 8009204:	b2db      	uxtb	r3, r3
 8009206:	2b00      	cmp	r3, #0
 8009208:	d001      	beq.n	800920e <HAL_I2C_Init+0x196>
 800920a:	2301      	movs	r3, #1
 800920c:	e022      	b.n	8009254 <HAL_I2C_Init+0x1dc>
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	689b      	ldr	r3, [r3, #8]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d10e      	bne.n	8009234 <HAL_I2C_Init+0x1bc>
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	1e58      	subs	r0, r3, #1
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	6859      	ldr	r1, [r3, #4]
 800921e:	460b      	mov	r3, r1
 8009220:	005b      	lsls	r3, r3, #1
 8009222:	440b      	add	r3, r1
 8009224:	fbb0 f3f3 	udiv	r3, r0, r3
 8009228:	3301      	adds	r3, #1
 800922a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800922e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009232:	e00f      	b.n	8009254 <HAL_I2C_Init+0x1dc>
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	1e58      	subs	r0, r3, #1
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	6859      	ldr	r1, [r3, #4]
 800923c:	460b      	mov	r3, r1
 800923e:	009b      	lsls	r3, r3, #2
 8009240:	440b      	add	r3, r1
 8009242:	0099      	lsls	r1, r3, #2
 8009244:	440b      	add	r3, r1
 8009246:	fbb0 f3f3 	udiv	r3, r0, r3
 800924a:	3301      	adds	r3, #1
 800924c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009250:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009254:	6879      	ldr	r1, [r7, #4]
 8009256:	6809      	ldr	r1, [r1, #0]
 8009258:	4313      	orrs	r3, r2
 800925a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	69da      	ldr	r2, [r3, #28]
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	6a1b      	ldr	r3, [r3, #32]
 800926e:	431a      	orrs	r2, r3
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	430a      	orrs	r2, r1
 8009276:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	689b      	ldr	r3, [r3, #8]
 800927e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8009282:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009286:	687a      	ldr	r2, [r7, #4]
 8009288:	6911      	ldr	r1, [r2, #16]
 800928a:	687a      	ldr	r2, [r7, #4]
 800928c:	68d2      	ldr	r2, [r2, #12]
 800928e:	4311      	orrs	r1, r2
 8009290:	687a      	ldr	r2, [r7, #4]
 8009292:	6812      	ldr	r2, [r2, #0]
 8009294:	430b      	orrs	r3, r1
 8009296:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	68db      	ldr	r3, [r3, #12]
 800929e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	695a      	ldr	r2, [r3, #20]
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	699b      	ldr	r3, [r3, #24]
 80092aa:	431a      	orrs	r2, r3
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	430a      	orrs	r2, r1
 80092b2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	681a      	ldr	r2, [r3, #0]
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	f042 0201 	orr.w	r2, r2, #1
 80092c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2200      	movs	r2, #0
 80092c8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	2220      	movs	r2, #32
 80092ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	2200      	movs	r2, #0
 80092d6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	2200      	movs	r2, #0
 80092dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80092e0:	2300      	movs	r3, #0
}
 80092e2:	4618      	mov	r0, r3
 80092e4:	3710      	adds	r7, #16
 80092e6:	46bd      	mov	sp, r7
 80092e8:	bd80      	pop	{r7, pc}
 80092ea:	bf00      	nop
 80092ec:	000186a0 	.word	0x000186a0
 80092f0:	001e847f 	.word	0x001e847f
 80092f4:	003d08ff 	.word	0x003d08ff
 80092f8:	431bde83 	.word	0x431bde83
 80092fc:	10624dd3 	.word	0x10624dd3

08009300 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009300:	b580      	push	{r7, lr}
 8009302:	b088      	sub	sp, #32
 8009304:	af02      	add	r7, sp, #8
 8009306:	60f8      	str	r0, [r7, #12]
 8009308:	607a      	str	r2, [r7, #4]
 800930a:	461a      	mov	r2, r3
 800930c:	460b      	mov	r3, r1
 800930e:	817b      	strh	r3, [r7, #10]
 8009310:	4613      	mov	r3, r2
 8009312:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009314:	f7fe fcf0 	bl	8007cf8 <HAL_GetTick>
 8009318:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009320:	b2db      	uxtb	r3, r3
 8009322:	2b20      	cmp	r3, #32
 8009324:	f040 80e0 	bne.w	80094e8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009328:	697b      	ldr	r3, [r7, #20]
 800932a:	9300      	str	r3, [sp, #0]
 800932c:	2319      	movs	r3, #25
 800932e:	2201      	movs	r2, #1
 8009330:	4970      	ldr	r1, [pc, #448]	; (80094f4 <HAL_I2C_Master_Transmit+0x1f4>)
 8009332:	68f8      	ldr	r0, [r7, #12]
 8009334:	f000 fc9e 	bl	8009c74 <I2C_WaitOnFlagUntilTimeout>
 8009338:	4603      	mov	r3, r0
 800933a:	2b00      	cmp	r3, #0
 800933c:	d001      	beq.n	8009342 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800933e:	2302      	movs	r3, #2
 8009340:	e0d3      	b.n	80094ea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009348:	2b01      	cmp	r3, #1
 800934a:	d101      	bne.n	8009350 <HAL_I2C_Master_Transmit+0x50>
 800934c:	2302      	movs	r3, #2
 800934e:	e0cc      	b.n	80094ea <HAL_I2C_Master_Transmit+0x1ea>
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	2201      	movs	r2, #1
 8009354:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	f003 0301 	and.w	r3, r3, #1
 8009362:	2b01      	cmp	r3, #1
 8009364:	d007      	beq.n	8009376 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	681a      	ldr	r2, [r3, #0]
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	f042 0201 	orr.w	r2, r2, #1
 8009374:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	681a      	ldr	r2, [r3, #0]
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009384:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	2221      	movs	r2, #33	; 0x21
 800938a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	2210      	movs	r2, #16
 8009392:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	2200      	movs	r2, #0
 800939a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	687a      	ldr	r2, [r7, #4]
 80093a0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	893a      	ldrh	r2, [r7, #8]
 80093a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093ac:	b29a      	uxth	r2, r3
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	4a50      	ldr	r2, [pc, #320]	; (80094f8 <HAL_I2C_Master_Transmit+0x1f8>)
 80093b6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80093b8:	8979      	ldrh	r1, [r7, #10]
 80093ba:	697b      	ldr	r3, [r7, #20]
 80093bc:	6a3a      	ldr	r2, [r7, #32]
 80093be:	68f8      	ldr	r0, [r7, #12]
 80093c0:	f000 fb08 	bl	80099d4 <I2C_MasterRequestWrite>
 80093c4:	4603      	mov	r3, r0
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d001      	beq.n	80093ce <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80093ca:	2301      	movs	r3, #1
 80093cc:	e08d      	b.n	80094ea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80093ce:	2300      	movs	r3, #0
 80093d0:	613b      	str	r3, [r7, #16]
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	695b      	ldr	r3, [r3, #20]
 80093d8:	613b      	str	r3, [r7, #16]
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	699b      	ldr	r3, [r3, #24]
 80093e0:	613b      	str	r3, [r7, #16]
 80093e2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80093e4:	e066      	b.n	80094b4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80093e6:	697a      	ldr	r2, [r7, #20]
 80093e8:	6a39      	ldr	r1, [r7, #32]
 80093ea:	68f8      	ldr	r0, [r7, #12]
 80093ec:	f000 fd5c 	bl	8009ea8 <I2C_WaitOnTXEFlagUntilTimeout>
 80093f0:	4603      	mov	r3, r0
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d00d      	beq.n	8009412 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093fa:	2b04      	cmp	r3, #4
 80093fc:	d107      	bne.n	800940e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	681a      	ldr	r2, [r3, #0]
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800940c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800940e:	2301      	movs	r3, #1
 8009410:	e06b      	b.n	80094ea <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009416:	781a      	ldrb	r2, [r3, #0]
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009422:	1c5a      	adds	r2, r3, #1
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800942c:	b29b      	uxth	r3, r3
 800942e:	3b01      	subs	r3, #1
 8009430:	b29a      	uxth	r2, r3
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800943a:	3b01      	subs	r3, #1
 800943c:	b29a      	uxth	r2, r3
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	695b      	ldr	r3, [r3, #20]
 8009448:	f003 0304 	and.w	r3, r3, #4
 800944c:	2b04      	cmp	r3, #4
 800944e:	d11b      	bne.n	8009488 <HAL_I2C_Master_Transmit+0x188>
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009454:	2b00      	cmp	r3, #0
 8009456:	d017      	beq.n	8009488 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800945c:	781a      	ldrb	r2, [r3, #0]
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009468:	1c5a      	adds	r2, r3, #1
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009472:	b29b      	uxth	r3, r3
 8009474:	3b01      	subs	r3, #1
 8009476:	b29a      	uxth	r2, r3
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009480:	3b01      	subs	r3, #1
 8009482:	b29a      	uxth	r2, r3
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009488:	697a      	ldr	r2, [r7, #20]
 800948a:	6a39      	ldr	r1, [r7, #32]
 800948c:	68f8      	ldr	r0, [r7, #12]
 800948e:	f000 fd53 	bl	8009f38 <I2C_WaitOnBTFFlagUntilTimeout>
 8009492:	4603      	mov	r3, r0
 8009494:	2b00      	cmp	r3, #0
 8009496:	d00d      	beq.n	80094b4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800949c:	2b04      	cmp	r3, #4
 800949e:	d107      	bne.n	80094b0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	681a      	ldr	r2, [r3, #0]
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80094ae:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80094b0:	2301      	movs	r3, #1
 80094b2:	e01a      	b.n	80094ea <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d194      	bne.n	80093e6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	681a      	ldr	r2, [r3, #0]
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80094ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	2220      	movs	r2, #32
 80094d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	2200      	movs	r2, #0
 80094d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	2200      	movs	r2, #0
 80094e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80094e4:	2300      	movs	r3, #0
 80094e6:	e000      	b.n	80094ea <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80094e8:	2302      	movs	r3, #2
  }
}
 80094ea:	4618      	mov	r0, r3
 80094ec:	3718      	adds	r7, #24
 80094ee:	46bd      	mov	sp, r7
 80094f0:	bd80      	pop	{r7, pc}
 80094f2:	bf00      	nop
 80094f4:	00100002 	.word	0x00100002
 80094f8:	ffff0000 	.word	0xffff0000

080094fc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b08c      	sub	sp, #48	; 0x30
 8009500:	af02      	add	r7, sp, #8
 8009502:	60f8      	str	r0, [r7, #12]
 8009504:	607a      	str	r2, [r7, #4]
 8009506:	461a      	mov	r2, r3
 8009508:	460b      	mov	r3, r1
 800950a:	817b      	strh	r3, [r7, #10]
 800950c:	4613      	mov	r3, r2
 800950e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8009510:	2300      	movs	r3, #0
 8009512:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009514:	f7fe fbf0 	bl	8007cf8 <HAL_GetTick>
 8009518:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009520:	b2db      	uxtb	r3, r3
 8009522:	2b20      	cmp	r3, #32
 8009524:	f040 824b 	bne.w	80099be <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800952a:	9300      	str	r3, [sp, #0]
 800952c:	2319      	movs	r3, #25
 800952e:	2201      	movs	r2, #1
 8009530:	497f      	ldr	r1, [pc, #508]	; (8009730 <HAL_I2C_Master_Receive+0x234>)
 8009532:	68f8      	ldr	r0, [r7, #12]
 8009534:	f000 fb9e 	bl	8009c74 <I2C_WaitOnFlagUntilTimeout>
 8009538:	4603      	mov	r3, r0
 800953a:	2b00      	cmp	r3, #0
 800953c:	d001      	beq.n	8009542 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 800953e:	2302      	movs	r3, #2
 8009540:	e23e      	b.n	80099c0 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009548:	2b01      	cmp	r3, #1
 800954a:	d101      	bne.n	8009550 <HAL_I2C_Master_Receive+0x54>
 800954c:	2302      	movs	r3, #2
 800954e:	e237      	b.n	80099c0 <HAL_I2C_Master_Receive+0x4c4>
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	2201      	movs	r2, #1
 8009554:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	f003 0301 	and.w	r3, r3, #1
 8009562:	2b01      	cmp	r3, #1
 8009564:	d007      	beq.n	8009576 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	681a      	ldr	r2, [r3, #0]
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	f042 0201 	orr.w	r2, r2, #1
 8009574:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	681a      	ldr	r2, [r3, #0]
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009584:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	2222      	movs	r2, #34	; 0x22
 800958a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	2210      	movs	r2, #16
 8009592:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	2200      	movs	r2, #0
 800959a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	687a      	ldr	r2, [r7, #4]
 80095a0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	893a      	ldrh	r2, [r7, #8]
 80095a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095ac:	b29a      	uxth	r2, r3
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	4a5f      	ldr	r2, [pc, #380]	; (8009734 <HAL_I2C_Master_Receive+0x238>)
 80095b6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80095b8:	8979      	ldrh	r1, [r7, #10]
 80095ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80095be:	68f8      	ldr	r0, [r7, #12]
 80095c0:	f000 fa8a 	bl	8009ad8 <I2C_MasterRequestRead>
 80095c4:	4603      	mov	r3, r0
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d001      	beq.n	80095ce <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 80095ca:	2301      	movs	r3, #1
 80095cc:	e1f8      	b.n	80099c0 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d113      	bne.n	80095fe <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80095d6:	2300      	movs	r3, #0
 80095d8:	61fb      	str	r3, [r7, #28]
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	695b      	ldr	r3, [r3, #20]
 80095e0:	61fb      	str	r3, [r7, #28]
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	699b      	ldr	r3, [r3, #24]
 80095e8:	61fb      	str	r3, [r7, #28]
 80095ea:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	681a      	ldr	r2, [r3, #0]
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80095fa:	601a      	str	r2, [r3, #0]
 80095fc:	e1cc      	b.n	8009998 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009602:	2b01      	cmp	r3, #1
 8009604:	d11e      	bne.n	8009644 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	681a      	ldr	r2, [r3, #0]
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009614:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009616:	b672      	cpsid	i
}
 8009618:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800961a:	2300      	movs	r3, #0
 800961c:	61bb      	str	r3, [r7, #24]
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	695b      	ldr	r3, [r3, #20]
 8009624:	61bb      	str	r3, [r7, #24]
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	699b      	ldr	r3, [r3, #24]
 800962c:	61bb      	str	r3, [r7, #24]
 800962e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	681a      	ldr	r2, [r3, #0]
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800963e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8009640:	b662      	cpsie	i
}
 8009642:	e035      	b.n	80096b0 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009648:	2b02      	cmp	r3, #2
 800964a:	d11e      	bne.n	800968a <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	681a      	ldr	r2, [r3, #0]
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800965a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800965c:	b672      	cpsid	i
}
 800965e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009660:	2300      	movs	r3, #0
 8009662:	617b      	str	r3, [r7, #20]
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	695b      	ldr	r3, [r3, #20]
 800966a:	617b      	str	r3, [r7, #20]
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	699b      	ldr	r3, [r3, #24]
 8009672:	617b      	str	r3, [r7, #20]
 8009674:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	681a      	ldr	r2, [r3, #0]
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009684:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8009686:	b662      	cpsie	i
}
 8009688:	e012      	b.n	80096b0 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	681a      	ldr	r2, [r3, #0]
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009698:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800969a:	2300      	movs	r3, #0
 800969c:	613b      	str	r3, [r7, #16]
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	695b      	ldr	r3, [r3, #20]
 80096a4:	613b      	str	r3, [r7, #16]
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	699b      	ldr	r3, [r3, #24]
 80096ac:	613b      	str	r3, [r7, #16]
 80096ae:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80096b0:	e172      	b.n	8009998 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096b6:	2b03      	cmp	r3, #3
 80096b8:	f200 811f 	bhi.w	80098fa <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096c0:	2b01      	cmp	r3, #1
 80096c2:	d123      	bne.n	800970c <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80096c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096c6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80096c8:	68f8      	ldr	r0, [r7, #12]
 80096ca:	f000 fc7d 	bl	8009fc8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80096ce:	4603      	mov	r3, r0
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d001      	beq.n	80096d8 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 80096d4:	2301      	movs	r3, #1
 80096d6:	e173      	b.n	80099c0 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	691a      	ldr	r2, [r3, #16]
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096e2:	b2d2      	uxtb	r2, r2
 80096e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096ea:	1c5a      	adds	r2, r3, #1
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096f4:	3b01      	subs	r3, #1
 80096f6:	b29a      	uxth	r2, r3
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009700:	b29b      	uxth	r3, r3
 8009702:	3b01      	subs	r3, #1
 8009704:	b29a      	uxth	r2, r3
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	855a      	strh	r2, [r3, #42]	; 0x2a
 800970a:	e145      	b.n	8009998 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009710:	2b02      	cmp	r3, #2
 8009712:	d152      	bne.n	80097ba <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009716:	9300      	str	r3, [sp, #0]
 8009718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800971a:	2200      	movs	r2, #0
 800971c:	4906      	ldr	r1, [pc, #24]	; (8009738 <HAL_I2C_Master_Receive+0x23c>)
 800971e:	68f8      	ldr	r0, [r7, #12]
 8009720:	f000 faa8 	bl	8009c74 <I2C_WaitOnFlagUntilTimeout>
 8009724:	4603      	mov	r3, r0
 8009726:	2b00      	cmp	r3, #0
 8009728:	d008      	beq.n	800973c <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 800972a:	2301      	movs	r3, #1
 800972c:	e148      	b.n	80099c0 <HAL_I2C_Master_Receive+0x4c4>
 800972e:	bf00      	nop
 8009730:	00100002 	.word	0x00100002
 8009734:	ffff0000 	.word	0xffff0000
 8009738:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800973c:	b672      	cpsid	i
}
 800973e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	681a      	ldr	r2, [r3, #0]
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800974e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	691a      	ldr	r2, [r3, #16]
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800975a:	b2d2      	uxtb	r2, r2
 800975c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009762:	1c5a      	adds	r2, r3, #1
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800976c:	3b01      	subs	r3, #1
 800976e:	b29a      	uxth	r2, r3
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009778:	b29b      	uxth	r3, r3
 800977a:	3b01      	subs	r3, #1
 800977c:	b29a      	uxth	r2, r3
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8009782:	b662      	cpsie	i
}
 8009784:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	691a      	ldr	r2, [r3, #16]
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009790:	b2d2      	uxtb	r2, r2
 8009792:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009798:	1c5a      	adds	r2, r3, #1
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80097a2:	3b01      	subs	r3, #1
 80097a4:	b29a      	uxth	r2, r3
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097ae:	b29b      	uxth	r3, r3
 80097b0:	3b01      	subs	r3, #1
 80097b2:	b29a      	uxth	r2, r3
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80097b8:	e0ee      	b.n	8009998 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80097ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097bc:	9300      	str	r3, [sp, #0]
 80097be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097c0:	2200      	movs	r2, #0
 80097c2:	4981      	ldr	r1, [pc, #516]	; (80099c8 <HAL_I2C_Master_Receive+0x4cc>)
 80097c4:	68f8      	ldr	r0, [r7, #12]
 80097c6:	f000 fa55 	bl	8009c74 <I2C_WaitOnFlagUntilTimeout>
 80097ca:	4603      	mov	r3, r0
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d001      	beq.n	80097d4 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 80097d0:	2301      	movs	r3, #1
 80097d2:	e0f5      	b.n	80099c0 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	681a      	ldr	r2, [r3, #0]
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80097e2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80097e4:	b672      	cpsid	i
}
 80097e6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	691a      	ldr	r2, [r3, #16]
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097f2:	b2d2      	uxtb	r2, r2
 80097f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097fa:	1c5a      	adds	r2, r3, #1
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009804:	3b01      	subs	r3, #1
 8009806:	b29a      	uxth	r2, r3
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009810:	b29b      	uxth	r3, r3
 8009812:	3b01      	subs	r3, #1
 8009814:	b29a      	uxth	r2, r3
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800981a:	4b6c      	ldr	r3, [pc, #432]	; (80099cc <HAL_I2C_Master_Receive+0x4d0>)
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	08db      	lsrs	r3, r3, #3
 8009820:	4a6b      	ldr	r2, [pc, #428]	; (80099d0 <HAL_I2C_Master_Receive+0x4d4>)
 8009822:	fba2 2303 	umull	r2, r3, r2, r3
 8009826:	0a1a      	lsrs	r2, r3, #8
 8009828:	4613      	mov	r3, r2
 800982a:	009b      	lsls	r3, r3, #2
 800982c:	4413      	add	r3, r2
 800982e:	00da      	lsls	r2, r3, #3
 8009830:	1ad3      	subs	r3, r2, r3
 8009832:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8009834:	6a3b      	ldr	r3, [r7, #32]
 8009836:	3b01      	subs	r3, #1
 8009838:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800983a:	6a3b      	ldr	r3, [r7, #32]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d118      	bne.n	8009872 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	2200      	movs	r2, #0
 8009844:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	2220      	movs	r2, #32
 800984a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	2200      	movs	r2, #0
 8009852:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800985a:	f043 0220 	orr.w	r2, r3, #32
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8009862:	b662      	cpsie	i
}
 8009864:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	2200      	movs	r2, #0
 800986a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800986e:	2301      	movs	r3, #1
 8009870:	e0a6      	b.n	80099c0 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	695b      	ldr	r3, [r3, #20]
 8009878:	f003 0304 	and.w	r3, r3, #4
 800987c:	2b04      	cmp	r3, #4
 800987e:	d1d9      	bne.n	8009834 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	681a      	ldr	r2, [r3, #0]
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800988e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	691a      	ldr	r2, [r3, #16]
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800989a:	b2d2      	uxtb	r2, r2
 800989c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098a2:	1c5a      	adds	r2, r3, #1
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80098ac:	3b01      	subs	r3, #1
 80098ae:	b29a      	uxth	r2, r3
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80098b8:	b29b      	uxth	r3, r3
 80098ba:	3b01      	subs	r3, #1
 80098bc:	b29a      	uxth	r2, r3
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80098c2:	b662      	cpsie	i
}
 80098c4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	691a      	ldr	r2, [r3, #16]
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098d0:	b2d2      	uxtb	r2, r2
 80098d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098d8:	1c5a      	adds	r2, r3, #1
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80098e2:	3b01      	subs	r3, #1
 80098e4:	b29a      	uxth	r2, r3
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80098ee:	b29b      	uxth	r3, r3
 80098f0:	3b01      	subs	r3, #1
 80098f2:	b29a      	uxth	r2, r3
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80098f8:	e04e      	b.n	8009998 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80098fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098fc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80098fe:	68f8      	ldr	r0, [r7, #12]
 8009900:	f000 fb62 	bl	8009fc8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009904:	4603      	mov	r3, r0
 8009906:	2b00      	cmp	r3, #0
 8009908:	d001      	beq.n	800990e <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 800990a:	2301      	movs	r3, #1
 800990c:	e058      	b.n	80099c0 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	691a      	ldr	r2, [r3, #16]
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009918:	b2d2      	uxtb	r2, r2
 800991a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009920:	1c5a      	adds	r2, r3, #1
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800992a:	3b01      	subs	r3, #1
 800992c:	b29a      	uxth	r2, r3
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009936:	b29b      	uxth	r3, r3
 8009938:	3b01      	subs	r3, #1
 800993a:	b29a      	uxth	r2, r3
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	695b      	ldr	r3, [r3, #20]
 8009946:	f003 0304 	and.w	r3, r3, #4
 800994a:	2b04      	cmp	r3, #4
 800994c:	d124      	bne.n	8009998 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009952:	2b03      	cmp	r3, #3
 8009954:	d107      	bne.n	8009966 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	681a      	ldr	r2, [r3, #0]
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009964:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	691a      	ldr	r2, [r3, #16]
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009970:	b2d2      	uxtb	r2, r2
 8009972:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009978:	1c5a      	adds	r2, r3, #1
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009982:	3b01      	subs	r3, #1
 8009984:	b29a      	uxth	r2, r3
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800998e:	b29b      	uxth	r3, r3
 8009990:	3b01      	subs	r3, #1
 8009992:	b29a      	uxth	r2, r3
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800999c:	2b00      	cmp	r3, #0
 800999e:	f47f ae88 	bne.w	80096b2 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	2220      	movs	r2, #32
 80099a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	2200      	movs	r2, #0
 80099ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	2200      	movs	r2, #0
 80099b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80099ba:	2300      	movs	r3, #0
 80099bc:	e000      	b.n	80099c0 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 80099be:	2302      	movs	r3, #2
  }
}
 80099c0:	4618      	mov	r0, r3
 80099c2:	3728      	adds	r7, #40	; 0x28
 80099c4:	46bd      	mov	sp, r7
 80099c6:	bd80      	pop	{r7, pc}
 80099c8:	00010004 	.word	0x00010004
 80099cc:	20000490 	.word	0x20000490
 80099d0:	14f8b589 	.word	0x14f8b589

080099d4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80099d4:	b580      	push	{r7, lr}
 80099d6:	b088      	sub	sp, #32
 80099d8:	af02      	add	r7, sp, #8
 80099da:	60f8      	str	r0, [r7, #12]
 80099dc:	607a      	str	r2, [r7, #4]
 80099de:	603b      	str	r3, [r7, #0]
 80099e0:	460b      	mov	r3, r1
 80099e2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099e8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80099ea:	697b      	ldr	r3, [r7, #20]
 80099ec:	2b08      	cmp	r3, #8
 80099ee:	d006      	beq.n	80099fe <I2C_MasterRequestWrite+0x2a>
 80099f0:	697b      	ldr	r3, [r7, #20]
 80099f2:	2b01      	cmp	r3, #1
 80099f4:	d003      	beq.n	80099fe <I2C_MasterRequestWrite+0x2a>
 80099f6:	697b      	ldr	r3, [r7, #20]
 80099f8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80099fc:	d108      	bne.n	8009a10 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	681a      	ldr	r2, [r3, #0]
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009a0c:	601a      	str	r2, [r3, #0]
 8009a0e:	e00b      	b.n	8009a28 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a14:	2b12      	cmp	r3, #18
 8009a16:	d107      	bne.n	8009a28 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	681a      	ldr	r2, [r3, #0]
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009a26:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009a28:	683b      	ldr	r3, [r7, #0]
 8009a2a:	9300      	str	r3, [sp, #0]
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	2200      	movs	r2, #0
 8009a30:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009a34:	68f8      	ldr	r0, [r7, #12]
 8009a36:	f000 f91d 	bl	8009c74 <I2C_WaitOnFlagUntilTimeout>
 8009a3a:	4603      	mov	r3, r0
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d00d      	beq.n	8009a5c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a4e:	d103      	bne.n	8009a58 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009a56:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009a58:	2303      	movs	r3, #3
 8009a5a:	e035      	b.n	8009ac8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	691b      	ldr	r3, [r3, #16]
 8009a60:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009a64:	d108      	bne.n	8009a78 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009a66:	897b      	ldrh	r3, [r7, #10]
 8009a68:	b2db      	uxtb	r3, r3
 8009a6a:	461a      	mov	r2, r3
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009a74:	611a      	str	r2, [r3, #16]
 8009a76:	e01b      	b.n	8009ab0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009a78:	897b      	ldrh	r3, [r7, #10]
 8009a7a:	11db      	asrs	r3, r3, #7
 8009a7c:	b2db      	uxtb	r3, r3
 8009a7e:	f003 0306 	and.w	r3, r3, #6
 8009a82:	b2db      	uxtb	r3, r3
 8009a84:	f063 030f 	orn	r3, r3, #15
 8009a88:	b2da      	uxtb	r2, r3
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8009a90:	683b      	ldr	r3, [r7, #0]
 8009a92:	687a      	ldr	r2, [r7, #4]
 8009a94:	490e      	ldr	r1, [pc, #56]	; (8009ad0 <I2C_MasterRequestWrite+0xfc>)
 8009a96:	68f8      	ldr	r0, [r7, #12]
 8009a98:	f000 f966 	bl	8009d68 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009a9c:	4603      	mov	r3, r0
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d001      	beq.n	8009aa6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8009aa2:	2301      	movs	r3, #1
 8009aa4:	e010      	b.n	8009ac8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8009aa6:	897b      	ldrh	r3, [r7, #10]
 8009aa8:	b2da      	uxtb	r2, r3
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009ab0:	683b      	ldr	r3, [r7, #0]
 8009ab2:	687a      	ldr	r2, [r7, #4]
 8009ab4:	4907      	ldr	r1, [pc, #28]	; (8009ad4 <I2C_MasterRequestWrite+0x100>)
 8009ab6:	68f8      	ldr	r0, [r7, #12]
 8009ab8:	f000 f956 	bl	8009d68 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009abc:	4603      	mov	r3, r0
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d001      	beq.n	8009ac6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8009ac2:	2301      	movs	r3, #1
 8009ac4:	e000      	b.n	8009ac8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8009ac6:	2300      	movs	r3, #0
}
 8009ac8:	4618      	mov	r0, r3
 8009aca:	3718      	adds	r7, #24
 8009acc:	46bd      	mov	sp, r7
 8009ace:	bd80      	pop	{r7, pc}
 8009ad0:	00010008 	.word	0x00010008
 8009ad4:	00010002 	.word	0x00010002

08009ad8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	b088      	sub	sp, #32
 8009adc:	af02      	add	r7, sp, #8
 8009ade:	60f8      	str	r0, [r7, #12]
 8009ae0:	607a      	str	r2, [r7, #4]
 8009ae2:	603b      	str	r3, [r7, #0]
 8009ae4:	460b      	mov	r3, r1
 8009ae6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aec:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	681a      	ldr	r2, [r3, #0]
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009afc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8009afe:	697b      	ldr	r3, [r7, #20]
 8009b00:	2b08      	cmp	r3, #8
 8009b02:	d006      	beq.n	8009b12 <I2C_MasterRequestRead+0x3a>
 8009b04:	697b      	ldr	r3, [r7, #20]
 8009b06:	2b01      	cmp	r3, #1
 8009b08:	d003      	beq.n	8009b12 <I2C_MasterRequestRead+0x3a>
 8009b0a:	697b      	ldr	r3, [r7, #20]
 8009b0c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009b10:	d108      	bne.n	8009b24 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	681a      	ldr	r2, [r3, #0]
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009b20:	601a      	str	r2, [r3, #0]
 8009b22:	e00b      	b.n	8009b3c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b28:	2b11      	cmp	r3, #17
 8009b2a:	d107      	bne.n	8009b3c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	681a      	ldr	r2, [r3, #0]
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009b3a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009b3c:	683b      	ldr	r3, [r7, #0]
 8009b3e:	9300      	str	r3, [sp, #0]
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	2200      	movs	r2, #0
 8009b44:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009b48:	68f8      	ldr	r0, [r7, #12]
 8009b4a:	f000 f893 	bl	8009c74 <I2C_WaitOnFlagUntilTimeout>
 8009b4e:	4603      	mov	r3, r0
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d00d      	beq.n	8009b70 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009b62:	d103      	bne.n	8009b6c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009b6a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009b6c:	2303      	movs	r3, #3
 8009b6e:	e079      	b.n	8009c64 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	691b      	ldr	r3, [r3, #16]
 8009b74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009b78:	d108      	bne.n	8009b8c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8009b7a:	897b      	ldrh	r3, [r7, #10]
 8009b7c:	b2db      	uxtb	r3, r3
 8009b7e:	f043 0301 	orr.w	r3, r3, #1
 8009b82:	b2da      	uxtb	r2, r3
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	611a      	str	r2, [r3, #16]
 8009b8a:	e05f      	b.n	8009c4c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009b8c:	897b      	ldrh	r3, [r7, #10]
 8009b8e:	11db      	asrs	r3, r3, #7
 8009b90:	b2db      	uxtb	r3, r3
 8009b92:	f003 0306 	and.w	r3, r3, #6
 8009b96:	b2db      	uxtb	r3, r3
 8009b98:	f063 030f 	orn	r3, r3, #15
 8009b9c:	b2da      	uxtb	r2, r3
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8009ba4:	683b      	ldr	r3, [r7, #0]
 8009ba6:	687a      	ldr	r2, [r7, #4]
 8009ba8:	4930      	ldr	r1, [pc, #192]	; (8009c6c <I2C_MasterRequestRead+0x194>)
 8009baa:	68f8      	ldr	r0, [r7, #12]
 8009bac:	f000 f8dc 	bl	8009d68 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009bb0:	4603      	mov	r3, r0
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d001      	beq.n	8009bba <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8009bb6:	2301      	movs	r3, #1
 8009bb8:	e054      	b.n	8009c64 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8009bba:	897b      	ldrh	r3, [r7, #10]
 8009bbc:	b2da      	uxtb	r2, r3
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009bc4:	683b      	ldr	r3, [r7, #0]
 8009bc6:	687a      	ldr	r2, [r7, #4]
 8009bc8:	4929      	ldr	r1, [pc, #164]	; (8009c70 <I2C_MasterRequestRead+0x198>)
 8009bca:	68f8      	ldr	r0, [r7, #12]
 8009bcc:	f000 f8cc 	bl	8009d68 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009bd0:	4603      	mov	r3, r0
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d001      	beq.n	8009bda <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8009bd6:	2301      	movs	r3, #1
 8009bd8:	e044      	b.n	8009c64 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009bda:	2300      	movs	r3, #0
 8009bdc:	613b      	str	r3, [r7, #16]
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	695b      	ldr	r3, [r3, #20]
 8009be4:	613b      	str	r3, [r7, #16]
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	699b      	ldr	r3, [r3, #24]
 8009bec:	613b      	str	r3, [r7, #16]
 8009bee:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	681a      	ldr	r2, [r3, #0]
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009bfe:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009c00:	683b      	ldr	r3, [r7, #0]
 8009c02:	9300      	str	r3, [sp, #0]
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	2200      	movs	r2, #0
 8009c08:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009c0c:	68f8      	ldr	r0, [r7, #12]
 8009c0e:	f000 f831 	bl	8009c74 <I2C_WaitOnFlagUntilTimeout>
 8009c12:	4603      	mov	r3, r0
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d00d      	beq.n	8009c34 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c26:	d103      	bne.n	8009c30 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009c2e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8009c30:	2303      	movs	r3, #3
 8009c32:	e017      	b.n	8009c64 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8009c34:	897b      	ldrh	r3, [r7, #10]
 8009c36:	11db      	asrs	r3, r3, #7
 8009c38:	b2db      	uxtb	r3, r3
 8009c3a:	f003 0306 	and.w	r3, r3, #6
 8009c3e:	b2db      	uxtb	r3, r3
 8009c40:	f063 030e 	orn	r3, r3, #14
 8009c44:	b2da      	uxtb	r2, r3
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009c4c:	683b      	ldr	r3, [r7, #0]
 8009c4e:	687a      	ldr	r2, [r7, #4]
 8009c50:	4907      	ldr	r1, [pc, #28]	; (8009c70 <I2C_MasterRequestRead+0x198>)
 8009c52:	68f8      	ldr	r0, [r7, #12]
 8009c54:	f000 f888 	bl	8009d68 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009c58:	4603      	mov	r3, r0
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d001      	beq.n	8009c62 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8009c5e:	2301      	movs	r3, #1
 8009c60:	e000      	b.n	8009c64 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8009c62:	2300      	movs	r3, #0
}
 8009c64:	4618      	mov	r0, r3
 8009c66:	3718      	adds	r7, #24
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	bd80      	pop	{r7, pc}
 8009c6c:	00010008 	.word	0x00010008
 8009c70:	00010002 	.word	0x00010002

08009c74 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b084      	sub	sp, #16
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	60f8      	str	r0, [r7, #12]
 8009c7c:	60b9      	str	r1, [r7, #8]
 8009c7e:	603b      	str	r3, [r7, #0]
 8009c80:	4613      	mov	r3, r2
 8009c82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009c84:	e048      	b.n	8009d18 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009c86:	683b      	ldr	r3, [r7, #0]
 8009c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c8c:	d044      	beq.n	8009d18 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009c8e:	f7fe f833 	bl	8007cf8 <HAL_GetTick>
 8009c92:	4602      	mov	r2, r0
 8009c94:	69bb      	ldr	r3, [r7, #24]
 8009c96:	1ad3      	subs	r3, r2, r3
 8009c98:	683a      	ldr	r2, [r7, #0]
 8009c9a:	429a      	cmp	r2, r3
 8009c9c:	d302      	bcc.n	8009ca4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8009c9e:	683b      	ldr	r3, [r7, #0]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d139      	bne.n	8009d18 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8009ca4:	68bb      	ldr	r3, [r7, #8]
 8009ca6:	0c1b      	lsrs	r3, r3, #16
 8009ca8:	b2db      	uxtb	r3, r3
 8009caa:	2b01      	cmp	r3, #1
 8009cac:	d10d      	bne.n	8009cca <I2C_WaitOnFlagUntilTimeout+0x56>
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	695b      	ldr	r3, [r3, #20]
 8009cb4:	43da      	mvns	r2, r3
 8009cb6:	68bb      	ldr	r3, [r7, #8]
 8009cb8:	4013      	ands	r3, r2
 8009cba:	b29b      	uxth	r3, r3
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	bf0c      	ite	eq
 8009cc0:	2301      	moveq	r3, #1
 8009cc2:	2300      	movne	r3, #0
 8009cc4:	b2db      	uxtb	r3, r3
 8009cc6:	461a      	mov	r2, r3
 8009cc8:	e00c      	b.n	8009ce4 <I2C_WaitOnFlagUntilTimeout+0x70>
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	699b      	ldr	r3, [r3, #24]
 8009cd0:	43da      	mvns	r2, r3
 8009cd2:	68bb      	ldr	r3, [r7, #8]
 8009cd4:	4013      	ands	r3, r2
 8009cd6:	b29b      	uxth	r3, r3
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	bf0c      	ite	eq
 8009cdc:	2301      	moveq	r3, #1
 8009cde:	2300      	movne	r3, #0
 8009ce0:	b2db      	uxtb	r3, r3
 8009ce2:	461a      	mov	r2, r3
 8009ce4:	79fb      	ldrb	r3, [r7, #7]
 8009ce6:	429a      	cmp	r2, r3
 8009ce8:	d116      	bne.n	8009d18 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	2200      	movs	r2, #0
 8009cee:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	2220      	movs	r2, #32
 8009cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d04:	f043 0220 	orr.w	r2, r3, #32
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	2200      	movs	r2, #0
 8009d10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8009d14:	2301      	movs	r3, #1
 8009d16:	e023      	b.n	8009d60 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009d18:	68bb      	ldr	r3, [r7, #8]
 8009d1a:	0c1b      	lsrs	r3, r3, #16
 8009d1c:	b2db      	uxtb	r3, r3
 8009d1e:	2b01      	cmp	r3, #1
 8009d20:	d10d      	bne.n	8009d3e <I2C_WaitOnFlagUntilTimeout+0xca>
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	695b      	ldr	r3, [r3, #20]
 8009d28:	43da      	mvns	r2, r3
 8009d2a:	68bb      	ldr	r3, [r7, #8]
 8009d2c:	4013      	ands	r3, r2
 8009d2e:	b29b      	uxth	r3, r3
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	bf0c      	ite	eq
 8009d34:	2301      	moveq	r3, #1
 8009d36:	2300      	movne	r3, #0
 8009d38:	b2db      	uxtb	r3, r3
 8009d3a:	461a      	mov	r2, r3
 8009d3c:	e00c      	b.n	8009d58 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	699b      	ldr	r3, [r3, #24]
 8009d44:	43da      	mvns	r2, r3
 8009d46:	68bb      	ldr	r3, [r7, #8]
 8009d48:	4013      	ands	r3, r2
 8009d4a:	b29b      	uxth	r3, r3
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	bf0c      	ite	eq
 8009d50:	2301      	moveq	r3, #1
 8009d52:	2300      	movne	r3, #0
 8009d54:	b2db      	uxtb	r3, r3
 8009d56:	461a      	mov	r2, r3
 8009d58:	79fb      	ldrb	r3, [r7, #7]
 8009d5a:	429a      	cmp	r2, r3
 8009d5c:	d093      	beq.n	8009c86 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009d5e:	2300      	movs	r3, #0
}
 8009d60:	4618      	mov	r0, r3
 8009d62:	3710      	adds	r7, #16
 8009d64:	46bd      	mov	sp, r7
 8009d66:	bd80      	pop	{r7, pc}

08009d68 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	b084      	sub	sp, #16
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	60f8      	str	r0, [r7, #12]
 8009d70:	60b9      	str	r1, [r7, #8]
 8009d72:	607a      	str	r2, [r7, #4]
 8009d74:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009d76:	e071      	b.n	8009e5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	695b      	ldr	r3, [r3, #20]
 8009d7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009d82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009d86:	d123      	bne.n	8009dd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	681a      	ldr	r2, [r3, #0]
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009d96:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009da0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	2200      	movs	r2, #0
 8009da6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	2220      	movs	r2, #32
 8009dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	2200      	movs	r2, #0
 8009db4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dbc:	f043 0204 	orr.w	r2, r3, #4
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	2200      	movs	r2, #0
 8009dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009dcc:	2301      	movs	r3, #1
 8009dce:	e067      	b.n	8009ea0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dd6:	d041      	beq.n	8009e5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009dd8:	f7fd ff8e 	bl	8007cf8 <HAL_GetTick>
 8009ddc:	4602      	mov	r2, r0
 8009dde:	683b      	ldr	r3, [r7, #0]
 8009de0:	1ad3      	subs	r3, r2, r3
 8009de2:	687a      	ldr	r2, [r7, #4]
 8009de4:	429a      	cmp	r2, r3
 8009de6:	d302      	bcc.n	8009dee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d136      	bne.n	8009e5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8009dee:	68bb      	ldr	r3, [r7, #8]
 8009df0:	0c1b      	lsrs	r3, r3, #16
 8009df2:	b2db      	uxtb	r3, r3
 8009df4:	2b01      	cmp	r3, #1
 8009df6:	d10c      	bne.n	8009e12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	695b      	ldr	r3, [r3, #20]
 8009dfe:	43da      	mvns	r2, r3
 8009e00:	68bb      	ldr	r3, [r7, #8]
 8009e02:	4013      	ands	r3, r2
 8009e04:	b29b      	uxth	r3, r3
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	bf14      	ite	ne
 8009e0a:	2301      	movne	r3, #1
 8009e0c:	2300      	moveq	r3, #0
 8009e0e:	b2db      	uxtb	r3, r3
 8009e10:	e00b      	b.n	8009e2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	699b      	ldr	r3, [r3, #24]
 8009e18:	43da      	mvns	r2, r3
 8009e1a:	68bb      	ldr	r3, [r7, #8]
 8009e1c:	4013      	ands	r3, r2
 8009e1e:	b29b      	uxth	r3, r3
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	bf14      	ite	ne
 8009e24:	2301      	movne	r3, #1
 8009e26:	2300      	moveq	r3, #0
 8009e28:	b2db      	uxtb	r3, r3
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d016      	beq.n	8009e5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	2200      	movs	r2, #0
 8009e32:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	2220      	movs	r2, #32
 8009e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	2200      	movs	r2, #0
 8009e40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e48:	f043 0220 	orr.w	r2, r3, #32
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	2200      	movs	r2, #0
 8009e54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8009e58:	2301      	movs	r3, #1
 8009e5a:	e021      	b.n	8009ea0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009e5c:	68bb      	ldr	r3, [r7, #8]
 8009e5e:	0c1b      	lsrs	r3, r3, #16
 8009e60:	b2db      	uxtb	r3, r3
 8009e62:	2b01      	cmp	r3, #1
 8009e64:	d10c      	bne.n	8009e80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	695b      	ldr	r3, [r3, #20]
 8009e6c:	43da      	mvns	r2, r3
 8009e6e:	68bb      	ldr	r3, [r7, #8]
 8009e70:	4013      	ands	r3, r2
 8009e72:	b29b      	uxth	r3, r3
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	bf14      	ite	ne
 8009e78:	2301      	movne	r3, #1
 8009e7a:	2300      	moveq	r3, #0
 8009e7c:	b2db      	uxtb	r3, r3
 8009e7e:	e00b      	b.n	8009e98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	699b      	ldr	r3, [r3, #24]
 8009e86:	43da      	mvns	r2, r3
 8009e88:	68bb      	ldr	r3, [r7, #8]
 8009e8a:	4013      	ands	r3, r2
 8009e8c:	b29b      	uxth	r3, r3
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	bf14      	ite	ne
 8009e92:	2301      	movne	r3, #1
 8009e94:	2300      	moveq	r3, #0
 8009e96:	b2db      	uxtb	r3, r3
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	f47f af6d 	bne.w	8009d78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8009e9e:	2300      	movs	r3, #0
}
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	3710      	adds	r7, #16
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	bd80      	pop	{r7, pc}

08009ea8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b084      	sub	sp, #16
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	60f8      	str	r0, [r7, #12]
 8009eb0:	60b9      	str	r1, [r7, #8]
 8009eb2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009eb4:	e034      	b.n	8009f20 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009eb6:	68f8      	ldr	r0, [r7, #12]
 8009eb8:	f000 f8e3 	bl	800a082 <I2C_IsAcknowledgeFailed>
 8009ebc:	4603      	mov	r3, r0
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d001      	beq.n	8009ec6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009ec2:	2301      	movs	r3, #1
 8009ec4:	e034      	b.n	8009f30 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009ec6:	68bb      	ldr	r3, [r7, #8]
 8009ec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ecc:	d028      	beq.n	8009f20 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009ece:	f7fd ff13 	bl	8007cf8 <HAL_GetTick>
 8009ed2:	4602      	mov	r2, r0
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	1ad3      	subs	r3, r2, r3
 8009ed8:	68ba      	ldr	r2, [r7, #8]
 8009eda:	429a      	cmp	r2, r3
 8009edc:	d302      	bcc.n	8009ee4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8009ede:	68bb      	ldr	r3, [r7, #8]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d11d      	bne.n	8009f20 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	695b      	ldr	r3, [r3, #20]
 8009eea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009eee:	2b80      	cmp	r3, #128	; 0x80
 8009ef0:	d016      	beq.n	8009f20 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	2200      	movs	r2, #0
 8009ef6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	2220      	movs	r2, #32
 8009efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	2200      	movs	r2, #0
 8009f04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f0c:	f043 0220 	orr.w	r2, r3, #32
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	2200      	movs	r2, #0
 8009f18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8009f1c:	2301      	movs	r3, #1
 8009f1e:	e007      	b.n	8009f30 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	695b      	ldr	r3, [r3, #20]
 8009f26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f2a:	2b80      	cmp	r3, #128	; 0x80
 8009f2c:	d1c3      	bne.n	8009eb6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009f2e:	2300      	movs	r3, #0
}
 8009f30:	4618      	mov	r0, r3
 8009f32:	3710      	adds	r7, #16
 8009f34:	46bd      	mov	sp, r7
 8009f36:	bd80      	pop	{r7, pc}

08009f38 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009f38:	b580      	push	{r7, lr}
 8009f3a:	b084      	sub	sp, #16
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	60f8      	str	r0, [r7, #12]
 8009f40:	60b9      	str	r1, [r7, #8]
 8009f42:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009f44:	e034      	b.n	8009fb0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009f46:	68f8      	ldr	r0, [r7, #12]
 8009f48:	f000 f89b 	bl	800a082 <I2C_IsAcknowledgeFailed>
 8009f4c:	4603      	mov	r3, r0
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d001      	beq.n	8009f56 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009f52:	2301      	movs	r3, #1
 8009f54:	e034      	b.n	8009fc0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009f56:	68bb      	ldr	r3, [r7, #8]
 8009f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f5c:	d028      	beq.n	8009fb0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009f5e:	f7fd fecb 	bl	8007cf8 <HAL_GetTick>
 8009f62:	4602      	mov	r2, r0
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	1ad3      	subs	r3, r2, r3
 8009f68:	68ba      	ldr	r2, [r7, #8]
 8009f6a:	429a      	cmp	r2, r3
 8009f6c:	d302      	bcc.n	8009f74 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8009f6e:	68bb      	ldr	r3, [r7, #8]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d11d      	bne.n	8009fb0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	695b      	ldr	r3, [r3, #20]
 8009f7a:	f003 0304 	and.w	r3, r3, #4
 8009f7e:	2b04      	cmp	r3, #4
 8009f80:	d016      	beq.n	8009fb0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	2200      	movs	r2, #0
 8009f86:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	2220      	movs	r2, #32
 8009f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	2200      	movs	r2, #0
 8009f94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f9c:	f043 0220 	orr.w	r2, r3, #32
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8009fac:	2301      	movs	r3, #1
 8009fae:	e007      	b.n	8009fc0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	695b      	ldr	r3, [r3, #20]
 8009fb6:	f003 0304 	and.w	r3, r3, #4
 8009fba:	2b04      	cmp	r3, #4
 8009fbc:	d1c3      	bne.n	8009f46 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009fbe:	2300      	movs	r3, #0
}
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	3710      	adds	r7, #16
 8009fc4:	46bd      	mov	sp, r7
 8009fc6:	bd80      	pop	{r7, pc}

08009fc8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009fc8:	b580      	push	{r7, lr}
 8009fca:	b084      	sub	sp, #16
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	60f8      	str	r0, [r7, #12]
 8009fd0:	60b9      	str	r1, [r7, #8]
 8009fd2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009fd4:	e049      	b.n	800a06a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	695b      	ldr	r3, [r3, #20]
 8009fdc:	f003 0310 	and.w	r3, r3, #16
 8009fe0:	2b10      	cmp	r3, #16
 8009fe2:	d119      	bne.n	800a018 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	f06f 0210 	mvn.w	r2, #16
 8009fec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	2200      	movs	r2, #0
 8009ff2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	2220      	movs	r2, #32
 8009ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	2200      	movs	r2, #0
 800a000:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	2200      	movs	r2, #0
 800a010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a014:	2301      	movs	r3, #1
 800a016:	e030      	b.n	800a07a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a018:	f7fd fe6e 	bl	8007cf8 <HAL_GetTick>
 800a01c:	4602      	mov	r2, r0
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	1ad3      	subs	r3, r2, r3
 800a022:	68ba      	ldr	r2, [r7, #8]
 800a024:	429a      	cmp	r2, r3
 800a026:	d302      	bcc.n	800a02e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800a028:	68bb      	ldr	r3, [r7, #8]
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d11d      	bne.n	800a06a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	695b      	ldr	r3, [r3, #20]
 800a034:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a038:	2b40      	cmp	r3, #64	; 0x40
 800a03a:	d016      	beq.n	800a06a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	2200      	movs	r2, #0
 800a040:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	2220      	movs	r2, #32
 800a046:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	2200      	movs	r2, #0
 800a04e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a056:	f043 0220 	orr.w	r2, r3, #32
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	2200      	movs	r2, #0
 800a062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a066:	2301      	movs	r3, #1
 800a068:	e007      	b.n	800a07a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	695b      	ldr	r3, [r3, #20]
 800a070:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a074:	2b40      	cmp	r3, #64	; 0x40
 800a076:	d1ae      	bne.n	8009fd6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a078:	2300      	movs	r3, #0
}
 800a07a:	4618      	mov	r0, r3
 800a07c:	3710      	adds	r7, #16
 800a07e:	46bd      	mov	sp, r7
 800a080:	bd80      	pop	{r7, pc}

0800a082 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800a082:	b480      	push	{r7}
 800a084:	b083      	sub	sp, #12
 800a086:	af00      	add	r7, sp, #0
 800a088:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	695b      	ldr	r3, [r3, #20]
 800a090:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a094:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a098:	d11b      	bne.n	800a0d2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a0a2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	2220      	movs	r2, #32
 800a0ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	2200      	movs	r2, #0
 800a0b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0be:	f043 0204 	orr.w	r2, r3, #4
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	2200      	movs	r2, #0
 800a0ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800a0ce:	2301      	movs	r3, #1
 800a0d0:	e000      	b.n	800a0d4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800a0d2:	2300      	movs	r3, #0
}
 800a0d4:	4618      	mov	r0, r3
 800a0d6:	370c      	adds	r7, #12
 800a0d8:	46bd      	mov	sp, r7
 800a0da:	bc80      	pop	{r7}
 800a0dc:	4770      	bx	lr
	...

0800a0e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a0e0:	b580      	push	{r7, lr}
 800a0e2:	b086      	sub	sp, #24
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d101      	bne.n	800a0f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a0ee:	2301      	movs	r3, #1
 800a0f0:	e272      	b.n	800a5d8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	f003 0301 	and.w	r3, r3, #1
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	f000 8087 	beq.w	800a20e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a100:	4b92      	ldr	r3, [pc, #584]	; (800a34c <HAL_RCC_OscConfig+0x26c>)
 800a102:	685b      	ldr	r3, [r3, #4]
 800a104:	f003 030c 	and.w	r3, r3, #12
 800a108:	2b04      	cmp	r3, #4
 800a10a:	d00c      	beq.n	800a126 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800a10c:	4b8f      	ldr	r3, [pc, #572]	; (800a34c <HAL_RCC_OscConfig+0x26c>)
 800a10e:	685b      	ldr	r3, [r3, #4]
 800a110:	f003 030c 	and.w	r3, r3, #12
 800a114:	2b08      	cmp	r3, #8
 800a116:	d112      	bne.n	800a13e <HAL_RCC_OscConfig+0x5e>
 800a118:	4b8c      	ldr	r3, [pc, #560]	; (800a34c <HAL_RCC_OscConfig+0x26c>)
 800a11a:	685b      	ldr	r3, [r3, #4]
 800a11c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a120:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a124:	d10b      	bne.n	800a13e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a126:	4b89      	ldr	r3, [pc, #548]	; (800a34c <HAL_RCC_OscConfig+0x26c>)
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d06c      	beq.n	800a20c <HAL_RCC_OscConfig+0x12c>
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	685b      	ldr	r3, [r3, #4]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d168      	bne.n	800a20c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800a13a:	2301      	movs	r3, #1
 800a13c:	e24c      	b.n	800a5d8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	685b      	ldr	r3, [r3, #4]
 800a142:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a146:	d106      	bne.n	800a156 <HAL_RCC_OscConfig+0x76>
 800a148:	4b80      	ldr	r3, [pc, #512]	; (800a34c <HAL_RCC_OscConfig+0x26c>)
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	4a7f      	ldr	r2, [pc, #508]	; (800a34c <HAL_RCC_OscConfig+0x26c>)
 800a14e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a152:	6013      	str	r3, [r2, #0]
 800a154:	e02e      	b.n	800a1b4 <HAL_RCC_OscConfig+0xd4>
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	685b      	ldr	r3, [r3, #4]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d10c      	bne.n	800a178 <HAL_RCC_OscConfig+0x98>
 800a15e:	4b7b      	ldr	r3, [pc, #492]	; (800a34c <HAL_RCC_OscConfig+0x26c>)
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	4a7a      	ldr	r2, [pc, #488]	; (800a34c <HAL_RCC_OscConfig+0x26c>)
 800a164:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a168:	6013      	str	r3, [r2, #0]
 800a16a:	4b78      	ldr	r3, [pc, #480]	; (800a34c <HAL_RCC_OscConfig+0x26c>)
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	4a77      	ldr	r2, [pc, #476]	; (800a34c <HAL_RCC_OscConfig+0x26c>)
 800a170:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a174:	6013      	str	r3, [r2, #0]
 800a176:	e01d      	b.n	800a1b4 <HAL_RCC_OscConfig+0xd4>
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	685b      	ldr	r3, [r3, #4]
 800a17c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a180:	d10c      	bne.n	800a19c <HAL_RCC_OscConfig+0xbc>
 800a182:	4b72      	ldr	r3, [pc, #456]	; (800a34c <HAL_RCC_OscConfig+0x26c>)
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	4a71      	ldr	r2, [pc, #452]	; (800a34c <HAL_RCC_OscConfig+0x26c>)
 800a188:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a18c:	6013      	str	r3, [r2, #0]
 800a18e:	4b6f      	ldr	r3, [pc, #444]	; (800a34c <HAL_RCC_OscConfig+0x26c>)
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	4a6e      	ldr	r2, [pc, #440]	; (800a34c <HAL_RCC_OscConfig+0x26c>)
 800a194:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a198:	6013      	str	r3, [r2, #0]
 800a19a:	e00b      	b.n	800a1b4 <HAL_RCC_OscConfig+0xd4>
 800a19c:	4b6b      	ldr	r3, [pc, #428]	; (800a34c <HAL_RCC_OscConfig+0x26c>)
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	4a6a      	ldr	r2, [pc, #424]	; (800a34c <HAL_RCC_OscConfig+0x26c>)
 800a1a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a1a6:	6013      	str	r3, [r2, #0]
 800a1a8:	4b68      	ldr	r3, [pc, #416]	; (800a34c <HAL_RCC_OscConfig+0x26c>)
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	4a67      	ldr	r2, [pc, #412]	; (800a34c <HAL_RCC_OscConfig+0x26c>)
 800a1ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a1b2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	685b      	ldr	r3, [r3, #4]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d013      	beq.n	800a1e4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a1bc:	f7fd fd9c 	bl	8007cf8 <HAL_GetTick>
 800a1c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a1c2:	e008      	b.n	800a1d6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a1c4:	f7fd fd98 	bl	8007cf8 <HAL_GetTick>
 800a1c8:	4602      	mov	r2, r0
 800a1ca:	693b      	ldr	r3, [r7, #16]
 800a1cc:	1ad3      	subs	r3, r2, r3
 800a1ce:	2b64      	cmp	r3, #100	; 0x64
 800a1d0:	d901      	bls.n	800a1d6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800a1d2:	2303      	movs	r3, #3
 800a1d4:	e200      	b.n	800a5d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a1d6:	4b5d      	ldr	r3, [pc, #372]	; (800a34c <HAL_RCC_OscConfig+0x26c>)
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d0f0      	beq.n	800a1c4 <HAL_RCC_OscConfig+0xe4>
 800a1e2:	e014      	b.n	800a20e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a1e4:	f7fd fd88 	bl	8007cf8 <HAL_GetTick>
 800a1e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a1ea:	e008      	b.n	800a1fe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a1ec:	f7fd fd84 	bl	8007cf8 <HAL_GetTick>
 800a1f0:	4602      	mov	r2, r0
 800a1f2:	693b      	ldr	r3, [r7, #16]
 800a1f4:	1ad3      	subs	r3, r2, r3
 800a1f6:	2b64      	cmp	r3, #100	; 0x64
 800a1f8:	d901      	bls.n	800a1fe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800a1fa:	2303      	movs	r3, #3
 800a1fc:	e1ec      	b.n	800a5d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a1fe:	4b53      	ldr	r3, [pc, #332]	; (800a34c <HAL_RCC_OscConfig+0x26c>)
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a206:	2b00      	cmp	r3, #0
 800a208:	d1f0      	bne.n	800a1ec <HAL_RCC_OscConfig+0x10c>
 800a20a:	e000      	b.n	800a20e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a20c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	f003 0302 	and.w	r3, r3, #2
 800a216:	2b00      	cmp	r3, #0
 800a218:	d063      	beq.n	800a2e2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a21a:	4b4c      	ldr	r3, [pc, #304]	; (800a34c <HAL_RCC_OscConfig+0x26c>)
 800a21c:	685b      	ldr	r3, [r3, #4]
 800a21e:	f003 030c 	and.w	r3, r3, #12
 800a222:	2b00      	cmp	r3, #0
 800a224:	d00b      	beq.n	800a23e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800a226:	4b49      	ldr	r3, [pc, #292]	; (800a34c <HAL_RCC_OscConfig+0x26c>)
 800a228:	685b      	ldr	r3, [r3, #4]
 800a22a:	f003 030c 	and.w	r3, r3, #12
 800a22e:	2b08      	cmp	r3, #8
 800a230:	d11c      	bne.n	800a26c <HAL_RCC_OscConfig+0x18c>
 800a232:	4b46      	ldr	r3, [pc, #280]	; (800a34c <HAL_RCC_OscConfig+0x26c>)
 800a234:	685b      	ldr	r3, [r3, #4]
 800a236:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d116      	bne.n	800a26c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a23e:	4b43      	ldr	r3, [pc, #268]	; (800a34c <HAL_RCC_OscConfig+0x26c>)
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	f003 0302 	and.w	r3, r3, #2
 800a246:	2b00      	cmp	r3, #0
 800a248:	d005      	beq.n	800a256 <HAL_RCC_OscConfig+0x176>
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	691b      	ldr	r3, [r3, #16]
 800a24e:	2b01      	cmp	r3, #1
 800a250:	d001      	beq.n	800a256 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800a252:	2301      	movs	r3, #1
 800a254:	e1c0      	b.n	800a5d8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a256:	4b3d      	ldr	r3, [pc, #244]	; (800a34c <HAL_RCC_OscConfig+0x26c>)
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	695b      	ldr	r3, [r3, #20]
 800a262:	00db      	lsls	r3, r3, #3
 800a264:	4939      	ldr	r1, [pc, #228]	; (800a34c <HAL_RCC_OscConfig+0x26c>)
 800a266:	4313      	orrs	r3, r2
 800a268:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a26a:	e03a      	b.n	800a2e2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	691b      	ldr	r3, [r3, #16]
 800a270:	2b00      	cmp	r3, #0
 800a272:	d020      	beq.n	800a2b6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a274:	4b36      	ldr	r3, [pc, #216]	; (800a350 <HAL_RCC_OscConfig+0x270>)
 800a276:	2201      	movs	r2, #1
 800a278:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a27a:	f7fd fd3d 	bl	8007cf8 <HAL_GetTick>
 800a27e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a280:	e008      	b.n	800a294 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a282:	f7fd fd39 	bl	8007cf8 <HAL_GetTick>
 800a286:	4602      	mov	r2, r0
 800a288:	693b      	ldr	r3, [r7, #16]
 800a28a:	1ad3      	subs	r3, r2, r3
 800a28c:	2b02      	cmp	r3, #2
 800a28e:	d901      	bls.n	800a294 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800a290:	2303      	movs	r3, #3
 800a292:	e1a1      	b.n	800a5d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a294:	4b2d      	ldr	r3, [pc, #180]	; (800a34c <HAL_RCC_OscConfig+0x26c>)
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	f003 0302 	and.w	r3, r3, #2
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d0f0      	beq.n	800a282 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a2a0:	4b2a      	ldr	r3, [pc, #168]	; (800a34c <HAL_RCC_OscConfig+0x26c>)
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	695b      	ldr	r3, [r3, #20]
 800a2ac:	00db      	lsls	r3, r3, #3
 800a2ae:	4927      	ldr	r1, [pc, #156]	; (800a34c <HAL_RCC_OscConfig+0x26c>)
 800a2b0:	4313      	orrs	r3, r2
 800a2b2:	600b      	str	r3, [r1, #0]
 800a2b4:	e015      	b.n	800a2e2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a2b6:	4b26      	ldr	r3, [pc, #152]	; (800a350 <HAL_RCC_OscConfig+0x270>)
 800a2b8:	2200      	movs	r2, #0
 800a2ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a2bc:	f7fd fd1c 	bl	8007cf8 <HAL_GetTick>
 800a2c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a2c2:	e008      	b.n	800a2d6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a2c4:	f7fd fd18 	bl	8007cf8 <HAL_GetTick>
 800a2c8:	4602      	mov	r2, r0
 800a2ca:	693b      	ldr	r3, [r7, #16]
 800a2cc:	1ad3      	subs	r3, r2, r3
 800a2ce:	2b02      	cmp	r3, #2
 800a2d0:	d901      	bls.n	800a2d6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800a2d2:	2303      	movs	r3, #3
 800a2d4:	e180      	b.n	800a5d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a2d6:	4b1d      	ldr	r3, [pc, #116]	; (800a34c <HAL_RCC_OscConfig+0x26c>)
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	f003 0302 	and.w	r3, r3, #2
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d1f0      	bne.n	800a2c4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	f003 0308 	and.w	r3, r3, #8
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d03a      	beq.n	800a364 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	699b      	ldr	r3, [r3, #24]
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d019      	beq.n	800a32a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a2f6:	4b17      	ldr	r3, [pc, #92]	; (800a354 <HAL_RCC_OscConfig+0x274>)
 800a2f8:	2201      	movs	r2, #1
 800a2fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a2fc:	f7fd fcfc 	bl	8007cf8 <HAL_GetTick>
 800a300:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a302:	e008      	b.n	800a316 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a304:	f7fd fcf8 	bl	8007cf8 <HAL_GetTick>
 800a308:	4602      	mov	r2, r0
 800a30a:	693b      	ldr	r3, [r7, #16]
 800a30c:	1ad3      	subs	r3, r2, r3
 800a30e:	2b02      	cmp	r3, #2
 800a310:	d901      	bls.n	800a316 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800a312:	2303      	movs	r3, #3
 800a314:	e160      	b.n	800a5d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a316:	4b0d      	ldr	r3, [pc, #52]	; (800a34c <HAL_RCC_OscConfig+0x26c>)
 800a318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a31a:	f003 0302 	and.w	r3, r3, #2
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d0f0      	beq.n	800a304 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800a322:	2001      	movs	r0, #1
 800a324:	f000 face 	bl	800a8c4 <RCC_Delay>
 800a328:	e01c      	b.n	800a364 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a32a:	4b0a      	ldr	r3, [pc, #40]	; (800a354 <HAL_RCC_OscConfig+0x274>)
 800a32c:	2200      	movs	r2, #0
 800a32e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a330:	f7fd fce2 	bl	8007cf8 <HAL_GetTick>
 800a334:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a336:	e00f      	b.n	800a358 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a338:	f7fd fcde 	bl	8007cf8 <HAL_GetTick>
 800a33c:	4602      	mov	r2, r0
 800a33e:	693b      	ldr	r3, [r7, #16]
 800a340:	1ad3      	subs	r3, r2, r3
 800a342:	2b02      	cmp	r3, #2
 800a344:	d908      	bls.n	800a358 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800a346:	2303      	movs	r3, #3
 800a348:	e146      	b.n	800a5d8 <HAL_RCC_OscConfig+0x4f8>
 800a34a:	bf00      	nop
 800a34c:	40021000 	.word	0x40021000
 800a350:	42420000 	.word	0x42420000
 800a354:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a358:	4b92      	ldr	r3, [pc, #584]	; (800a5a4 <HAL_RCC_OscConfig+0x4c4>)
 800a35a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a35c:	f003 0302 	and.w	r3, r3, #2
 800a360:	2b00      	cmp	r3, #0
 800a362:	d1e9      	bne.n	800a338 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	f003 0304 	and.w	r3, r3, #4
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	f000 80a6 	beq.w	800a4be <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a372:	2300      	movs	r3, #0
 800a374:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a376:	4b8b      	ldr	r3, [pc, #556]	; (800a5a4 <HAL_RCC_OscConfig+0x4c4>)
 800a378:	69db      	ldr	r3, [r3, #28]
 800a37a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d10d      	bne.n	800a39e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a382:	4b88      	ldr	r3, [pc, #544]	; (800a5a4 <HAL_RCC_OscConfig+0x4c4>)
 800a384:	69db      	ldr	r3, [r3, #28]
 800a386:	4a87      	ldr	r2, [pc, #540]	; (800a5a4 <HAL_RCC_OscConfig+0x4c4>)
 800a388:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a38c:	61d3      	str	r3, [r2, #28]
 800a38e:	4b85      	ldr	r3, [pc, #532]	; (800a5a4 <HAL_RCC_OscConfig+0x4c4>)
 800a390:	69db      	ldr	r3, [r3, #28]
 800a392:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a396:	60bb      	str	r3, [r7, #8]
 800a398:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a39a:	2301      	movs	r3, #1
 800a39c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a39e:	4b82      	ldr	r3, [pc, #520]	; (800a5a8 <HAL_RCC_OscConfig+0x4c8>)
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d118      	bne.n	800a3dc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a3aa:	4b7f      	ldr	r3, [pc, #508]	; (800a5a8 <HAL_RCC_OscConfig+0x4c8>)
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	4a7e      	ldr	r2, [pc, #504]	; (800a5a8 <HAL_RCC_OscConfig+0x4c8>)
 800a3b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a3b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a3b6:	f7fd fc9f 	bl	8007cf8 <HAL_GetTick>
 800a3ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a3bc:	e008      	b.n	800a3d0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a3be:	f7fd fc9b 	bl	8007cf8 <HAL_GetTick>
 800a3c2:	4602      	mov	r2, r0
 800a3c4:	693b      	ldr	r3, [r7, #16]
 800a3c6:	1ad3      	subs	r3, r2, r3
 800a3c8:	2b64      	cmp	r3, #100	; 0x64
 800a3ca:	d901      	bls.n	800a3d0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800a3cc:	2303      	movs	r3, #3
 800a3ce:	e103      	b.n	800a5d8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a3d0:	4b75      	ldr	r3, [pc, #468]	; (800a5a8 <HAL_RCC_OscConfig+0x4c8>)
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d0f0      	beq.n	800a3be <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	68db      	ldr	r3, [r3, #12]
 800a3e0:	2b01      	cmp	r3, #1
 800a3e2:	d106      	bne.n	800a3f2 <HAL_RCC_OscConfig+0x312>
 800a3e4:	4b6f      	ldr	r3, [pc, #444]	; (800a5a4 <HAL_RCC_OscConfig+0x4c4>)
 800a3e6:	6a1b      	ldr	r3, [r3, #32]
 800a3e8:	4a6e      	ldr	r2, [pc, #440]	; (800a5a4 <HAL_RCC_OscConfig+0x4c4>)
 800a3ea:	f043 0301 	orr.w	r3, r3, #1
 800a3ee:	6213      	str	r3, [r2, #32]
 800a3f0:	e02d      	b.n	800a44e <HAL_RCC_OscConfig+0x36e>
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	68db      	ldr	r3, [r3, #12]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d10c      	bne.n	800a414 <HAL_RCC_OscConfig+0x334>
 800a3fa:	4b6a      	ldr	r3, [pc, #424]	; (800a5a4 <HAL_RCC_OscConfig+0x4c4>)
 800a3fc:	6a1b      	ldr	r3, [r3, #32]
 800a3fe:	4a69      	ldr	r2, [pc, #420]	; (800a5a4 <HAL_RCC_OscConfig+0x4c4>)
 800a400:	f023 0301 	bic.w	r3, r3, #1
 800a404:	6213      	str	r3, [r2, #32]
 800a406:	4b67      	ldr	r3, [pc, #412]	; (800a5a4 <HAL_RCC_OscConfig+0x4c4>)
 800a408:	6a1b      	ldr	r3, [r3, #32]
 800a40a:	4a66      	ldr	r2, [pc, #408]	; (800a5a4 <HAL_RCC_OscConfig+0x4c4>)
 800a40c:	f023 0304 	bic.w	r3, r3, #4
 800a410:	6213      	str	r3, [r2, #32]
 800a412:	e01c      	b.n	800a44e <HAL_RCC_OscConfig+0x36e>
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	68db      	ldr	r3, [r3, #12]
 800a418:	2b05      	cmp	r3, #5
 800a41a:	d10c      	bne.n	800a436 <HAL_RCC_OscConfig+0x356>
 800a41c:	4b61      	ldr	r3, [pc, #388]	; (800a5a4 <HAL_RCC_OscConfig+0x4c4>)
 800a41e:	6a1b      	ldr	r3, [r3, #32]
 800a420:	4a60      	ldr	r2, [pc, #384]	; (800a5a4 <HAL_RCC_OscConfig+0x4c4>)
 800a422:	f043 0304 	orr.w	r3, r3, #4
 800a426:	6213      	str	r3, [r2, #32]
 800a428:	4b5e      	ldr	r3, [pc, #376]	; (800a5a4 <HAL_RCC_OscConfig+0x4c4>)
 800a42a:	6a1b      	ldr	r3, [r3, #32]
 800a42c:	4a5d      	ldr	r2, [pc, #372]	; (800a5a4 <HAL_RCC_OscConfig+0x4c4>)
 800a42e:	f043 0301 	orr.w	r3, r3, #1
 800a432:	6213      	str	r3, [r2, #32]
 800a434:	e00b      	b.n	800a44e <HAL_RCC_OscConfig+0x36e>
 800a436:	4b5b      	ldr	r3, [pc, #364]	; (800a5a4 <HAL_RCC_OscConfig+0x4c4>)
 800a438:	6a1b      	ldr	r3, [r3, #32]
 800a43a:	4a5a      	ldr	r2, [pc, #360]	; (800a5a4 <HAL_RCC_OscConfig+0x4c4>)
 800a43c:	f023 0301 	bic.w	r3, r3, #1
 800a440:	6213      	str	r3, [r2, #32]
 800a442:	4b58      	ldr	r3, [pc, #352]	; (800a5a4 <HAL_RCC_OscConfig+0x4c4>)
 800a444:	6a1b      	ldr	r3, [r3, #32]
 800a446:	4a57      	ldr	r2, [pc, #348]	; (800a5a4 <HAL_RCC_OscConfig+0x4c4>)
 800a448:	f023 0304 	bic.w	r3, r3, #4
 800a44c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	68db      	ldr	r3, [r3, #12]
 800a452:	2b00      	cmp	r3, #0
 800a454:	d015      	beq.n	800a482 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a456:	f7fd fc4f 	bl	8007cf8 <HAL_GetTick>
 800a45a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a45c:	e00a      	b.n	800a474 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a45e:	f7fd fc4b 	bl	8007cf8 <HAL_GetTick>
 800a462:	4602      	mov	r2, r0
 800a464:	693b      	ldr	r3, [r7, #16]
 800a466:	1ad3      	subs	r3, r2, r3
 800a468:	f241 3288 	movw	r2, #5000	; 0x1388
 800a46c:	4293      	cmp	r3, r2
 800a46e:	d901      	bls.n	800a474 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800a470:	2303      	movs	r3, #3
 800a472:	e0b1      	b.n	800a5d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a474:	4b4b      	ldr	r3, [pc, #300]	; (800a5a4 <HAL_RCC_OscConfig+0x4c4>)
 800a476:	6a1b      	ldr	r3, [r3, #32]
 800a478:	f003 0302 	and.w	r3, r3, #2
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d0ee      	beq.n	800a45e <HAL_RCC_OscConfig+0x37e>
 800a480:	e014      	b.n	800a4ac <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a482:	f7fd fc39 	bl	8007cf8 <HAL_GetTick>
 800a486:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a488:	e00a      	b.n	800a4a0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a48a:	f7fd fc35 	bl	8007cf8 <HAL_GetTick>
 800a48e:	4602      	mov	r2, r0
 800a490:	693b      	ldr	r3, [r7, #16]
 800a492:	1ad3      	subs	r3, r2, r3
 800a494:	f241 3288 	movw	r2, #5000	; 0x1388
 800a498:	4293      	cmp	r3, r2
 800a49a:	d901      	bls.n	800a4a0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800a49c:	2303      	movs	r3, #3
 800a49e:	e09b      	b.n	800a5d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a4a0:	4b40      	ldr	r3, [pc, #256]	; (800a5a4 <HAL_RCC_OscConfig+0x4c4>)
 800a4a2:	6a1b      	ldr	r3, [r3, #32]
 800a4a4:	f003 0302 	and.w	r3, r3, #2
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d1ee      	bne.n	800a48a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800a4ac:	7dfb      	ldrb	r3, [r7, #23]
 800a4ae:	2b01      	cmp	r3, #1
 800a4b0:	d105      	bne.n	800a4be <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a4b2:	4b3c      	ldr	r3, [pc, #240]	; (800a5a4 <HAL_RCC_OscConfig+0x4c4>)
 800a4b4:	69db      	ldr	r3, [r3, #28]
 800a4b6:	4a3b      	ldr	r2, [pc, #236]	; (800a5a4 <HAL_RCC_OscConfig+0x4c4>)
 800a4b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a4bc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	69db      	ldr	r3, [r3, #28]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	f000 8087 	beq.w	800a5d6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a4c8:	4b36      	ldr	r3, [pc, #216]	; (800a5a4 <HAL_RCC_OscConfig+0x4c4>)
 800a4ca:	685b      	ldr	r3, [r3, #4]
 800a4cc:	f003 030c 	and.w	r3, r3, #12
 800a4d0:	2b08      	cmp	r3, #8
 800a4d2:	d061      	beq.n	800a598 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	69db      	ldr	r3, [r3, #28]
 800a4d8:	2b02      	cmp	r3, #2
 800a4da:	d146      	bne.n	800a56a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a4dc:	4b33      	ldr	r3, [pc, #204]	; (800a5ac <HAL_RCC_OscConfig+0x4cc>)
 800a4de:	2200      	movs	r2, #0
 800a4e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a4e2:	f7fd fc09 	bl	8007cf8 <HAL_GetTick>
 800a4e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a4e8:	e008      	b.n	800a4fc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a4ea:	f7fd fc05 	bl	8007cf8 <HAL_GetTick>
 800a4ee:	4602      	mov	r2, r0
 800a4f0:	693b      	ldr	r3, [r7, #16]
 800a4f2:	1ad3      	subs	r3, r2, r3
 800a4f4:	2b02      	cmp	r3, #2
 800a4f6:	d901      	bls.n	800a4fc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800a4f8:	2303      	movs	r3, #3
 800a4fa:	e06d      	b.n	800a5d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a4fc:	4b29      	ldr	r3, [pc, #164]	; (800a5a4 <HAL_RCC_OscConfig+0x4c4>)
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a504:	2b00      	cmp	r3, #0
 800a506:	d1f0      	bne.n	800a4ea <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	6a1b      	ldr	r3, [r3, #32]
 800a50c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a510:	d108      	bne.n	800a524 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800a512:	4b24      	ldr	r3, [pc, #144]	; (800a5a4 <HAL_RCC_OscConfig+0x4c4>)
 800a514:	685b      	ldr	r3, [r3, #4]
 800a516:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	689b      	ldr	r3, [r3, #8]
 800a51e:	4921      	ldr	r1, [pc, #132]	; (800a5a4 <HAL_RCC_OscConfig+0x4c4>)
 800a520:	4313      	orrs	r3, r2
 800a522:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a524:	4b1f      	ldr	r3, [pc, #124]	; (800a5a4 <HAL_RCC_OscConfig+0x4c4>)
 800a526:	685b      	ldr	r3, [r3, #4]
 800a528:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	6a19      	ldr	r1, [r3, #32]
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a534:	430b      	orrs	r3, r1
 800a536:	491b      	ldr	r1, [pc, #108]	; (800a5a4 <HAL_RCC_OscConfig+0x4c4>)
 800a538:	4313      	orrs	r3, r2
 800a53a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a53c:	4b1b      	ldr	r3, [pc, #108]	; (800a5ac <HAL_RCC_OscConfig+0x4cc>)
 800a53e:	2201      	movs	r2, #1
 800a540:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a542:	f7fd fbd9 	bl	8007cf8 <HAL_GetTick>
 800a546:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800a548:	e008      	b.n	800a55c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a54a:	f7fd fbd5 	bl	8007cf8 <HAL_GetTick>
 800a54e:	4602      	mov	r2, r0
 800a550:	693b      	ldr	r3, [r7, #16]
 800a552:	1ad3      	subs	r3, r2, r3
 800a554:	2b02      	cmp	r3, #2
 800a556:	d901      	bls.n	800a55c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800a558:	2303      	movs	r3, #3
 800a55a:	e03d      	b.n	800a5d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800a55c:	4b11      	ldr	r3, [pc, #68]	; (800a5a4 <HAL_RCC_OscConfig+0x4c4>)
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a564:	2b00      	cmp	r3, #0
 800a566:	d0f0      	beq.n	800a54a <HAL_RCC_OscConfig+0x46a>
 800a568:	e035      	b.n	800a5d6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a56a:	4b10      	ldr	r3, [pc, #64]	; (800a5ac <HAL_RCC_OscConfig+0x4cc>)
 800a56c:	2200      	movs	r2, #0
 800a56e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a570:	f7fd fbc2 	bl	8007cf8 <HAL_GetTick>
 800a574:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a576:	e008      	b.n	800a58a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a578:	f7fd fbbe 	bl	8007cf8 <HAL_GetTick>
 800a57c:	4602      	mov	r2, r0
 800a57e:	693b      	ldr	r3, [r7, #16]
 800a580:	1ad3      	subs	r3, r2, r3
 800a582:	2b02      	cmp	r3, #2
 800a584:	d901      	bls.n	800a58a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800a586:	2303      	movs	r3, #3
 800a588:	e026      	b.n	800a5d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a58a:	4b06      	ldr	r3, [pc, #24]	; (800a5a4 <HAL_RCC_OscConfig+0x4c4>)
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a592:	2b00      	cmp	r3, #0
 800a594:	d1f0      	bne.n	800a578 <HAL_RCC_OscConfig+0x498>
 800a596:	e01e      	b.n	800a5d6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	69db      	ldr	r3, [r3, #28]
 800a59c:	2b01      	cmp	r3, #1
 800a59e:	d107      	bne.n	800a5b0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800a5a0:	2301      	movs	r3, #1
 800a5a2:	e019      	b.n	800a5d8 <HAL_RCC_OscConfig+0x4f8>
 800a5a4:	40021000 	.word	0x40021000
 800a5a8:	40007000 	.word	0x40007000
 800a5ac:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800a5b0:	4b0b      	ldr	r3, [pc, #44]	; (800a5e0 <HAL_RCC_OscConfig+0x500>)
 800a5b2:	685b      	ldr	r3, [r3, #4]
 800a5b4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	6a1b      	ldr	r3, [r3, #32]
 800a5c0:	429a      	cmp	r2, r3
 800a5c2:	d106      	bne.n	800a5d2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a5ce:	429a      	cmp	r2, r3
 800a5d0:	d001      	beq.n	800a5d6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800a5d2:	2301      	movs	r3, #1
 800a5d4:	e000      	b.n	800a5d8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800a5d6:	2300      	movs	r3, #0
}
 800a5d8:	4618      	mov	r0, r3
 800a5da:	3718      	adds	r7, #24
 800a5dc:	46bd      	mov	sp, r7
 800a5de:	bd80      	pop	{r7, pc}
 800a5e0:	40021000 	.word	0x40021000

0800a5e4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a5e4:	b580      	push	{r7, lr}
 800a5e6:	b084      	sub	sp, #16
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	6078      	str	r0, [r7, #4]
 800a5ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d101      	bne.n	800a5f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a5f4:	2301      	movs	r3, #1
 800a5f6:	e0d0      	b.n	800a79a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a5f8:	4b6a      	ldr	r3, [pc, #424]	; (800a7a4 <HAL_RCC_ClockConfig+0x1c0>)
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	f003 0307 	and.w	r3, r3, #7
 800a600:	683a      	ldr	r2, [r7, #0]
 800a602:	429a      	cmp	r2, r3
 800a604:	d910      	bls.n	800a628 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a606:	4b67      	ldr	r3, [pc, #412]	; (800a7a4 <HAL_RCC_ClockConfig+0x1c0>)
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	f023 0207 	bic.w	r2, r3, #7
 800a60e:	4965      	ldr	r1, [pc, #404]	; (800a7a4 <HAL_RCC_ClockConfig+0x1c0>)
 800a610:	683b      	ldr	r3, [r7, #0]
 800a612:	4313      	orrs	r3, r2
 800a614:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a616:	4b63      	ldr	r3, [pc, #396]	; (800a7a4 <HAL_RCC_ClockConfig+0x1c0>)
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	f003 0307 	and.w	r3, r3, #7
 800a61e:	683a      	ldr	r2, [r7, #0]
 800a620:	429a      	cmp	r2, r3
 800a622:	d001      	beq.n	800a628 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800a624:	2301      	movs	r3, #1
 800a626:	e0b8      	b.n	800a79a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	f003 0302 	and.w	r3, r3, #2
 800a630:	2b00      	cmp	r3, #0
 800a632:	d020      	beq.n	800a676 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	f003 0304 	and.w	r3, r3, #4
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d005      	beq.n	800a64c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a640:	4b59      	ldr	r3, [pc, #356]	; (800a7a8 <HAL_RCC_ClockConfig+0x1c4>)
 800a642:	685b      	ldr	r3, [r3, #4]
 800a644:	4a58      	ldr	r2, [pc, #352]	; (800a7a8 <HAL_RCC_ClockConfig+0x1c4>)
 800a646:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800a64a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	f003 0308 	and.w	r3, r3, #8
 800a654:	2b00      	cmp	r3, #0
 800a656:	d005      	beq.n	800a664 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a658:	4b53      	ldr	r3, [pc, #332]	; (800a7a8 <HAL_RCC_ClockConfig+0x1c4>)
 800a65a:	685b      	ldr	r3, [r3, #4]
 800a65c:	4a52      	ldr	r2, [pc, #328]	; (800a7a8 <HAL_RCC_ClockConfig+0x1c4>)
 800a65e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800a662:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a664:	4b50      	ldr	r3, [pc, #320]	; (800a7a8 <HAL_RCC_ClockConfig+0x1c4>)
 800a666:	685b      	ldr	r3, [r3, #4]
 800a668:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	689b      	ldr	r3, [r3, #8]
 800a670:	494d      	ldr	r1, [pc, #308]	; (800a7a8 <HAL_RCC_ClockConfig+0x1c4>)
 800a672:	4313      	orrs	r3, r2
 800a674:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	f003 0301 	and.w	r3, r3, #1
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d040      	beq.n	800a704 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	685b      	ldr	r3, [r3, #4]
 800a686:	2b01      	cmp	r3, #1
 800a688:	d107      	bne.n	800a69a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a68a:	4b47      	ldr	r3, [pc, #284]	; (800a7a8 <HAL_RCC_ClockConfig+0x1c4>)
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a692:	2b00      	cmp	r3, #0
 800a694:	d115      	bne.n	800a6c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a696:	2301      	movs	r3, #1
 800a698:	e07f      	b.n	800a79a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	685b      	ldr	r3, [r3, #4]
 800a69e:	2b02      	cmp	r3, #2
 800a6a0:	d107      	bne.n	800a6b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a6a2:	4b41      	ldr	r3, [pc, #260]	; (800a7a8 <HAL_RCC_ClockConfig+0x1c4>)
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d109      	bne.n	800a6c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a6ae:	2301      	movs	r3, #1
 800a6b0:	e073      	b.n	800a79a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a6b2:	4b3d      	ldr	r3, [pc, #244]	; (800a7a8 <HAL_RCC_ClockConfig+0x1c4>)
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	f003 0302 	and.w	r3, r3, #2
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d101      	bne.n	800a6c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a6be:	2301      	movs	r3, #1
 800a6c0:	e06b      	b.n	800a79a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a6c2:	4b39      	ldr	r3, [pc, #228]	; (800a7a8 <HAL_RCC_ClockConfig+0x1c4>)
 800a6c4:	685b      	ldr	r3, [r3, #4]
 800a6c6:	f023 0203 	bic.w	r2, r3, #3
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	685b      	ldr	r3, [r3, #4]
 800a6ce:	4936      	ldr	r1, [pc, #216]	; (800a7a8 <HAL_RCC_ClockConfig+0x1c4>)
 800a6d0:	4313      	orrs	r3, r2
 800a6d2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a6d4:	f7fd fb10 	bl	8007cf8 <HAL_GetTick>
 800a6d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a6da:	e00a      	b.n	800a6f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a6dc:	f7fd fb0c 	bl	8007cf8 <HAL_GetTick>
 800a6e0:	4602      	mov	r2, r0
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	1ad3      	subs	r3, r2, r3
 800a6e6:	f241 3288 	movw	r2, #5000	; 0x1388
 800a6ea:	4293      	cmp	r3, r2
 800a6ec:	d901      	bls.n	800a6f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a6ee:	2303      	movs	r3, #3
 800a6f0:	e053      	b.n	800a79a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a6f2:	4b2d      	ldr	r3, [pc, #180]	; (800a7a8 <HAL_RCC_ClockConfig+0x1c4>)
 800a6f4:	685b      	ldr	r3, [r3, #4]
 800a6f6:	f003 020c 	and.w	r2, r3, #12
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	685b      	ldr	r3, [r3, #4]
 800a6fe:	009b      	lsls	r3, r3, #2
 800a700:	429a      	cmp	r2, r3
 800a702:	d1eb      	bne.n	800a6dc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a704:	4b27      	ldr	r3, [pc, #156]	; (800a7a4 <HAL_RCC_ClockConfig+0x1c0>)
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	f003 0307 	and.w	r3, r3, #7
 800a70c:	683a      	ldr	r2, [r7, #0]
 800a70e:	429a      	cmp	r2, r3
 800a710:	d210      	bcs.n	800a734 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a712:	4b24      	ldr	r3, [pc, #144]	; (800a7a4 <HAL_RCC_ClockConfig+0x1c0>)
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	f023 0207 	bic.w	r2, r3, #7
 800a71a:	4922      	ldr	r1, [pc, #136]	; (800a7a4 <HAL_RCC_ClockConfig+0x1c0>)
 800a71c:	683b      	ldr	r3, [r7, #0]
 800a71e:	4313      	orrs	r3, r2
 800a720:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a722:	4b20      	ldr	r3, [pc, #128]	; (800a7a4 <HAL_RCC_ClockConfig+0x1c0>)
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	f003 0307 	and.w	r3, r3, #7
 800a72a:	683a      	ldr	r2, [r7, #0]
 800a72c:	429a      	cmp	r2, r3
 800a72e:	d001      	beq.n	800a734 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800a730:	2301      	movs	r3, #1
 800a732:	e032      	b.n	800a79a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	f003 0304 	and.w	r3, r3, #4
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d008      	beq.n	800a752 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a740:	4b19      	ldr	r3, [pc, #100]	; (800a7a8 <HAL_RCC_ClockConfig+0x1c4>)
 800a742:	685b      	ldr	r3, [r3, #4]
 800a744:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	68db      	ldr	r3, [r3, #12]
 800a74c:	4916      	ldr	r1, [pc, #88]	; (800a7a8 <HAL_RCC_ClockConfig+0x1c4>)
 800a74e:	4313      	orrs	r3, r2
 800a750:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	f003 0308 	and.w	r3, r3, #8
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d009      	beq.n	800a772 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800a75e:	4b12      	ldr	r3, [pc, #72]	; (800a7a8 <HAL_RCC_ClockConfig+0x1c4>)
 800a760:	685b      	ldr	r3, [r3, #4]
 800a762:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	691b      	ldr	r3, [r3, #16]
 800a76a:	00db      	lsls	r3, r3, #3
 800a76c:	490e      	ldr	r1, [pc, #56]	; (800a7a8 <HAL_RCC_ClockConfig+0x1c4>)
 800a76e:	4313      	orrs	r3, r2
 800a770:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800a772:	f000 f821 	bl	800a7b8 <HAL_RCC_GetSysClockFreq>
 800a776:	4602      	mov	r2, r0
 800a778:	4b0b      	ldr	r3, [pc, #44]	; (800a7a8 <HAL_RCC_ClockConfig+0x1c4>)
 800a77a:	685b      	ldr	r3, [r3, #4]
 800a77c:	091b      	lsrs	r3, r3, #4
 800a77e:	f003 030f 	and.w	r3, r3, #15
 800a782:	490a      	ldr	r1, [pc, #40]	; (800a7ac <HAL_RCC_ClockConfig+0x1c8>)
 800a784:	5ccb      	ldrb	r3, [r1, r3]
 800a786:	fa22 f303 	lsr.w	r3, r2, r3
 800a78a:	4a09      	ldr	r2, [pc, #36]	; (800a7b0 <HAL_RCC_ClockConfig+0x1cc>)
 800a78c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800a78e:	4b09      	ldr	r3, [pc, #36]	; (800a7b4 <HAL_RCC_ClockConfig+0x1d0>)
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	4618      	mov	r0, r3
 800a794:	f7fd fa6e 	bl	8007c74 <HAL_InitTick>

  return HAL_OK;
 800a798:	2300      	movs	r3, #0
}
 800a79a:	4618      	mov	r0, r3
 800a79c:	3710      	adds	r7, #16
 800a79e:	46bd      	mov	sp, r7
 800a7a0:	bd80      	pop	{r7, pc}
 800a7a2:	bf00      	nop
 800a7a4:	40022000 	.word	0x40022000
 800a7a8:	40021000 	.word	0x40021000
 800a7ac:	0800f59c 	.word	0x0800f59c
 800a7b0:	20000490 	.word	0x20000490
 800a7b4:	200004d8 	.word	0x200004d8

0800a7b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a7b8:	b480      	push	{r7}
 800a7ba:	b087      	sub	sp, #28
 800a7bc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800a7be:	2300      	movs	r3, #0
 800a7c0:	60fb      	str	r3, [r7, #12]
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	60bb      	str	r3, [r7, #8]
 800a7c6:	2300      	movs	r3, #0
 800a7c8:	617b      	str	r3, [r7, #20]
 800a7ca:	2300      	movs	r3, #0
 800a7cc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800a7ce:	2300      	movs	r3, #0
 800a7d0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800a7d2:	4b1e      	ldr	r3, [pc, #120]	; (800a84c <HAL_RCC_GetSysClockFreq+0x94>)
 800a7d4:	685b      	ldr	r3, [r3, #4]
 800a7d6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	f003 030c 	and.w	r3, r3, #12
 800a7de:	2b04      	cmp	r3, #4
 800a7e0:	d002      	beq.n	800a7e8 <HAL_RCC_GetSysClockFreq+0x30>
 800a7e2:	2b08      	cmp	r3, #8
 800a7e4:	d003      	beq.n	800a7ee <HAL_RCC_GetSysClockFreq+0x36>
 800a7e6:	e027      	b.n	800a838 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800a7e8:	4b19      	ldr	r3, [pc, #100]	; (800a850 <HAL_RCC_GetSysClockFreq+0x98>)
 800a7ea:	613b      	str	r3, [r7, #16]
      break;
 800a7ec:	e027      	b.n	800a83e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	0c9b      	lsrs	r3, r3, #18
 800a7f2:	f003 030f 	and.w	r3, r3, #15
 800a7f6:	4a17      	ldr	r2, [pc, #92]	; (800a854 <HAL_RCC_GetSysClockFreq+0x9c>)
 800a7f8:	5cd3      	ldrb	r3, [r2, r3]
 800a7fa:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a802:	2b00      	cmp	r3, #0
 800a804:	d010      	beq.n	800a828 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800a806:	4b11      	ldr	r3, [pc, #68]	; (800a84c <HAL_RCC_GetSysClockFreq+0x94>)
 800a808:	685b      	ldr	r3, [r3, #4]
 800a80a:	0c5b      	lsrs	r3, r3, #17
 800a80c:	f003 0301 	and.w	r3, r3, #1
 800a810:	4a11      	ldr	r2, [pc, #68]	; (800a858 <HAL_RCC_GetSysClockFreq+0xa0>)
 800a812:	5cd3      	ldrb	r3, [r2, r3]
 800a814:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	4a0d      	ldr	r2, [pc, #52]	; (800a850 <HAL_RCC_GetSysClockFreq+0x98>)
 800a81a:	fb03 f202 	mul.w	r2, r3, r2
 800a81e:	68bb      	ldr	r3, [r7, #8]
 800a820:	fbb2 f3f3 	udiv	r3, r2, r3
 800a824:	617b      	str	r3, [r7, #20]
 800a826:	e004      	b.n	800a832 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	4a0c      	ldr	r2, [pc, #48]	; (800a85c <HAL_RCC_GetSysClockFreq+0xa4>)
 800a82c:	fb02 f303 	mul.w	r3, r2, r3
 800a830:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800a832:	697b      	ldr	r3, [r7, #20]
 800a834:	613b      	str	r3, [r7, #16]
      break;
 800a836:	e002      	b.n	800a83e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800a838:	4b05      	ldr	r3, [pc, #20]	; (800a850 <HAL_RCC_GetSysClockFreq+0x98>)
 800a83a:	613b      	str	r3, [r7, #16]
      break;
 800a83c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a83e:	693b      	ldr	r3, [r7, #16]
}
 800a840:	4618      	mov	r0, r3
 800a842:	371c      	adds	r7, #28
 800a844:	46bd      	mov	sp, r7
 800a846:	bc80      	pop	{r7}
 800a848:	4770      	bx	lr
 800a84a:	bf00      	nop
 800a84c:	40021000 	.word	0x40021000
 800a850:	007a1200 	.word	0x007a1200
 800a854:	0800f5b4 	.word	0x0800f5b4
 800a858:	0800f5c4 	.word	0x0800f5c4
 800a85c:	003d0900 	.word	0x003d0900

0800a860 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a860:	b480      	push	{r7}
 800a862:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a864:	4b02      	ldr	r3, [pc, #8]	; (800a870 <HAL_RCC_GetHCLKFreq+0x10>)
 800a866:	681b      	ldr	r3, [r3, #0]
}
 800a868:	4618      	mov	r0, r3
 800a86a:	46bd      	mov	sp, r7
 800a86c:	bc80      	pop	{r7}
 800a86e:	4770      	bx	lr
 800a870:	20000490 	.word	0x20000490

0800a874 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a874:	b580      	push	{r7, lr}
 800a876:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800a878:	f7ff fff2 	bl	800a860 <HAL_RCC_GetHCLKFreq>
 800a87c:	4602      	mov	r2, r0
 800a87e:	4b05      	ldr	r3, [pc, #20]	; (800a894 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a880:	685b      	ldr	r3, [r3, #4]
 800a882:	0a1b      	lsrs	r3, r3, #8
 800a884:	f003 0307 	and.w	r3, r3, #7
 800a888:	4903      	ldr	r1, [pc, #12]	; (800a898 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a88a:	5ccb      	ldrb	r3, [r1, r3]
 800a88c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a890:	4618      	mov	r0, r3
 800a892:	bd80      	pop	{r7, pc}
 800a894:	40021000 	.word	0x40021000
 800a898:	0800f5ac 	.word	0x0800f5ac

0800a89c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a89c:	b580      	push	{r7, lr}
 800a89e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800a8a0:	f7ff ffde 	bl	800a860 <HAL_RCC_GetHCLKFreq>
 800a8a4:	4602      	mov	r2, r0
 800a8a6:	4b05      	ldr	r3, [pc, #20]	; (800a8bc <HAL_RCC_GetPCLK2Freq+0x20>)
 800a8a8:	685b      	ldr	r3, [r3, #4]
 800a8aa:	0adb      	lsrs	r3, r3, #11
 800a8ac:	f003 0307 	and.w	r3, r3, #7
 800a8b0:	4903      	ldr	r1, [pc, #12]	; (800a8c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a8b2:	5ccb      	ldrb	r3, [r1, r3]
 800a8b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	bd80      	pop	{r7, pc}
 800a8bc:	40021000 	.word	0x40021000
 800a8c0:	0800f5ac 	.word	0x0800f5ac

0800a8c4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800a8c4:	b480      	push	{r7}
 800a8c6:	b085      	sub	sp, #20
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800a8cc:	4b0a      	ldr	r3, [pc, #40]	; (800a8f8 <RCC_Delay+0x34>)
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	4a0a      	ldr	r2, [pc, #40]	; (800a8fc <RCC_Delay+0x38>)
 800a8d2:	fba2 2303 	umull	r2, r3, r2, r3
 800a8d6:	0a5b      	lsrs	r3, r3, #9
 800a8d8:	687a      	ldr	r2, [r7, #4]
 800a8da:	fb02 f303 	mul.w	r3, r2, r3
 800a8de:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800a8e0:	bf00      	nop
  }
  while (Delay --);
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	1e5a      	subs	r2, r3, #1
 800a8e6:	60fa      	str	r2, [r7, #12]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d1f9      	bne.n	800a8e0 <RCC_Delay+0x1c>
}
 800a8ec:	bf00      	nop
 800a8ee:	bf00      	nop
 800a8f0:	3714      	adds	r7, #20
 800a8f2:	46bd      	mov	sp, r7
 800a8f4:	bc80      	pop	{r7}
 800a8f6:	4770      	bx	lr
 800a8f8:	20000490 	.word	0x20000490
 800a8fc:	10624dd3 	.word	0x10624dd3

0800a900 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a900:	b580      	push	{r7, lr}
 800a902:	b086      	sub	sp, #24
 800a904:	af00      	add	r7, sp, #0
 800a906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800a908:	2300      	movs	r3, #0
 800a90a:	613b      	str	r3, [r7, #16]
 800a90c:	2300      	movs	r3, #0
 800a90e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	f003 0301 	and.w	r3, r3, #1
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d07d      	beq.n	800aa18 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800a91c:	2300      	movs	r3, #0
 800a91e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a920:	4b4f      	ldr	r3, [pc, #316]	; (800aa60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a922:	69db      	ldr	r3, [r3, #28]
 800a924:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d10d      	bne.n	800a948 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a92c:	4b4c      	ldr	r3, [pc, #304]	; (800aa60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a92e:	69db      	ldr	r3, [r3, #28]
 800a930:	4a4b      	ldr	r2, [pc, #300]	; (800aa60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a932:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a936:	61d3      	str	r3, [r2, #28]
 800a938:	4b49      	ldr	r3, [pc, #292]	; (800aa60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a93a:	69db      	ldr	r3, [r3, #28]
 800a93c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a940:	60bb      	str	r3, [r7, #8]
 800a942:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a944:	2301      	movs	r3, #1
 800a946:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a948:	4b46      	ldr	r3, [pc, #280]	; (800aa64 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a950:	2b00      	cmp	r3, #0
 800a952:	d118      	bne.n	800a986 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a954:	4b43      	ldr	r3, [pc, #268]	; (800aa64 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	4a42      	ldr	r2, [pc, #264]	; (800aa64 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800a95a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a95e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a960:	f7fd f9ca 	bl	8007cf8 <HAL_GetTick>
 800a964:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a966:	e008      	b.n	800a97a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a968:	f7fd f9c6 	bl	8007cf8 <HAL_GetTick>
 800a96c:	4602      	mov	r2, r0
 800a96e:	693b      	ldr	r3, [r7, #16]
 800a970:	1ad3      	subs	r3, r2, r3
 800a972:	2b64      	cmp	r3, #100	; 0x64
 800a974:	d901      	bls.n	800a97a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800a976:	2303      	movs	r3, #3
 800a978:	e06d      	b.n	800aa56 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a97a:	4b3a      	ldr	r3, [pc, #232]	; (800aa64 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a982:	2b00      	cmp	r3, #0
 800a984:	d0f0      	beq.n	800a968 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800a986:	4b36      	ldr	r3, [pc, #216]	; (800aa60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a988:	6a1b      	ldr	r3, [r3, #32]
 800a98a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a98e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	2b00      	cmp	r3, #0
 800a994:	d02e      	beq.n	800a9f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	685b      	ldr	r3, [r3, #4]
 800a99a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a99e:	68fa      	ldr	r2, [r7, #12]
 800a9a0:	429a      	cmp	r2, r3
 800a9a2:	d027      	beq.n	800a9f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a9a4:	4b2e      	ldr	r3, [pc, #184]	; (800aa60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a9a6:	6a1b      	ldr	r3, [r3, #32]
 800a9a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a9ac:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800a9ae:	4b2e      	ldr	r3, [pc, #184]	; (800aa68 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800a9b0:	2201      	movs	r2, #1
 800a9b2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800a9b4:	4b2c      	ldr	r3, [pc, #176]	; (800aa68 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800a9b6:	2200      	movs	r2, #0
 800a9b8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800a9ba:	4a29      	ldr	r2, [pc, #164]	; (800aa60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	f003 0301 	and.w	r3, r3, #1
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d014      	beq.n	800a9f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a9ca:	f7fd f995 	bl	8007cf8 <HAL_GetTick>
 800a9ce:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a9d0:	e00a      	b.n	800a9e8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a9d2:	f7fd f991 	bl	8007cf8 <HAL_GetTick>
 800a9d6:	4602      	mov	r2, r0
 800a9d8:	693b      	ldr	r3, [r7, #16]
 800a9da:	1ad3      	subs	r3, r2, r3
 800a9dc:	f241 3288 	movw	r2, #5000	; 0x1388
 800a9e0:	4293      	cmp	r3, r2
 800a9e2:	d901      	bls.n	800a9e8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800a9e4:	2303      	movs	r3, #3
 800a9e6:	e036      	b.n	800aa56 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a9e8:	4b1d      	ldr	r3, [pc, #116]	; (800aa60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a9ea:	6a1b      	ldr	r3, [r3, #32]
 800a9ec:	f003 0302 	and.w	r3, r3, #2
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d0ee      	beq.n	800a9d2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a9f4:	4b1a      	ldr	r3, [pc, #104]	; (800aa60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a9f6:	6a1b      	ldr	r3, [r3, #32]
 800a9f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	685b      	ldr	r3, [r3, #4]
 800aa00:	4917      	ldr	r1, [pc, #92]	; (800aa60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800aa02:	4313      	orrs	r3, r2
 800aa04:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800aa06:	7dfb      	ldrb	r3, [r7, #23]
 800aa08:	2b01      	cmp	r3, #1
 800aa0a:	d105      	bne.n	800aa18 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800aa0c:	4b14      	ldr	r3, [pc, #80]	; (800aa60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800aa0e:	69db      	ldr	r3, [r3, #28]
 800aa10:	4a13      	ldr	r2, [pc, #76]	; (800aa60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800aa12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800aa16:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	f003 0302 	and.w	r3, r3, #2
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d008      	beq.n	800aa36 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800aa24:	4b0e      	ldr	r3, [pc, #56]	; (800aa60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800aa26:	685b      	ldr	r3, [r3, #4]
 800aa28:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	689b      	ldr	r3, [r3, #8]
 800aa30:	490b      	ldr	r1, [pc, #44]	; (800aa60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800aa32:	4313      	orrs	r3, r2
 800aa34:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	f003 0310 	and.w	r3, r3, #16
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d008      	beq.n	800aa54 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800aa42:	4b07      	ldr	r3, [pc, #28]	; (800aa60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800aa44:	685b      	ldr	r3, [r3, #4]
 800aa46:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	68db      	ldr	r3, [r3, #12]
 800aa4e:	4904      	ldr	r1, [pc, #16]	; (800aa60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800aa50:	4313      	orrs	r3, r2
 800aa52:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800aa54:	2300      	movs	r3, #0
}
 800aa56:	4618      	mov	r0, r3
 800aa58:	3718      	adds	r7, #24
 800aa5a:	46bd      	mov	sp, r7
 800aa5c:	bd80      	pop	{r7, pc}
 800aa5e:	bf00      	nop
 800aa60:	40021000 	.word	0x40021000
 800aa64:	40007000 	.word	0x40007000
 800aa68:	42420440 	.word	0x42420440

0800aa6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800aa6c:	b580      	push	{r7, lr}
 800aa6e:	b082      	sub	sp, #8
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d101      	bne.n	800aa7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800aa7a:	2301      	movs	r3, #1
 800aa7c:	e041      	b.n	800ab02 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aa84:	b2db      	uxtb	r3, r3
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d106      	bne.n	800aa98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	2200      	movs	r2, #0
 800aa8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800aa92:	6878      	ldr	r0, [r7, #4]
 800aa94:	f7fb fe86 	bl	80067a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	2202      	movs	r2, #2
 800aa9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	681a      	ldr	r2, [r3, #0]
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	3304      	adds	r3, #4
 800aaa8:	4619      	mov	r1, r3
 800aaaa:	4610      	mov	r0, r2
 800aaac:	f000 f8f4 	bl	800ac98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	2201      	movs	r2, #1
 800aab4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	2201      	movs	r2, #1
 800aabc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	2201      	movs	r2, #1
 800aac4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	2201      	movs	r2, #1
 800aacc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	2201      	movs	r2, #1
 800aad4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	2201      	movs	r2, #1
 800aadc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	2201      	movs	r2, #1
 800aae4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	2201      	movs	r2, #1
 800aaec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	2201      	movs	r2, #1
 800aaf4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	2201      	movs	r2, #1
 800aafc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ab00:	2300      	movs	r3, #0
}
 800ab02:	4618      	mov	r0, r3
 800ab04:	3708      	adds	r7, #8
 800ab06:	46bd      	mov	sp, r7
 800ab08:	bd80      	pop	{r7, pc}

0800ab0a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ab0a:	b580      	push	{r7, lr}
 800ab0c:	b084      	sub	sp, #16
 800ab0e:	af00      	add	r7, sp, #0
 800ab10:	6078      	str	r0, [r7, #4]
 800ab12:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ab14:	2300      	movs	r3, #0
 800ab16:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ab1e:	2b01      	cmp	r3, #1
 800ab20:	d101      	bne.n	800ab26 <HAL_TIM_ConfigClockSource+0x1c>
 800ab22:	2302      	movs	r3, #2
 800ab24:	e0b4      	b.n	800ac90 <HAL_TIM_ConfigClockSource+0x186>
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	2201      	movs	r2, #1
 800ab2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	2202      	movs	r2, #2
 800ab32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	689b      	ldr	r3, [r3, #8]
 800ab3c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ab3e:	68bb      	ldr	r3, [r7, #8]
 800ab40:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800ab44:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ab46:	68bb      	ldr	r3, [r7, #8]
 800ab48:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ab4c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	68ba      	ldr	r2, [r7, #8]
 800ab54:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ab56:	683b      	ldr	r3, [r7, #0]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ab5e:	d03e      	beq.n	800abde <HAL_TIM_ConfigClockSource+0xd4>
 800ab60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ab64:	f200 8087 	bhi.w	800ac76 <HAL_TIM_ConfigClockSource+0x16c>
 800ab68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab6c:	f000 8086 	beq.w	800ac7c <HAL_TIM_ConfigClockSource+0x172>
 800ab70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab74:	d87f      	bhi.n	800ac76 <HAL_TIM_ConfigClockSource+0x16c>
 800ab76:	2b70      	cmp	r3, #112	; 0x70
 800ab78:	d01a      	beq.n	800abb0 <HAL_TIM_ConfigClockSource+0xa6>
 800ab7a:	2b70      	cmp	r3, #112	; 0x70
 800ab7c:	d87b      	bhi.n	800ac76 <HAL_TIM_ConfigClockSource+0x16c>
 800ab7e:	2b60      	cmp	r3, #96	; 0x60
 800ab80:	d050      	beq.n	800ac24 <HAL_TIM_ConfigClockSource+0x11a>
 800ab82:	2b60      	cmp	r3, #96	; 0x60
 800ab84:	d877      	bhi.n	800ac76 <HAL_TIM_ConfigClockSource+0x16c>
 800ab86:	2b50      	cmp	r3, #80	; 0x50
 800ab88:	d03c      	beq.n	800ac04 <HAL_TIM_ConfigClockSource+0xfa>
 800ab8a:	2b50      	cmp	r3, #80	; 0x50
 800ab8c:	d873      	bhi.n	800ac76 <HAL_TIM_ConfigClockSource+0x16c>
 800ab8e:	2b40      	cmp	r3, #64	; 0x40
 800ab90:	d058      	beq.n	800ac44 <HAL_TIM_ConfigClockSource+0x13a>
 800ab92:	2b40      	cmp	r3, #64	; 0x40
 800ab94:	d86f      	bhi.n	800ac76 <HAL_TIM_ConfigClockSource+0x16c>
 800ab96:	2b30      	cmp	r3, #48	; 0x30
 800ab98:	d064      	beq.n	800ac64 <HAL_TIM_ConfigClockSource+0x15a>
 800ab9a:	2b30      	cmp	r3, #48	; 0x30
 800ab9c:	d86b      	bhi.n	800ac76 <HAL_TIM_ConfigClockSource+0x16c>
 800ab9e:	2b20      	cmp	r3, #32
 800aba0:	d060      	beq.n	800ac64 <HAL_TIM_ConfigClockSource+0x15a>
 800aba2:	2b20      	cmp	r3, #32
 800aba4:	d867      	bhi.n	800ac76 <HAL_TIM_ConfigClockSource+0x16c>
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d05c      	beq.n	800ac64 <HAL_TIM_ConfigClockSource+0x15a>
 800abaa:	2b10      	cmp	r3, #16
 800abac:	d05a      	beq.n	800ac64 <HAL_TIM_ConfigClockSource+0x15a>
 800abae:	e062      	b.n	800ac76 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	6818      	ldr	r0, [r3, #0]
 800abb4:	683b      	ldr	r3, [r7, #0]
 800abb6:	6899      	ldr	r1, [r3, #8]
 800abb8:	683b      	ldr	r3, [r7, #0]
 800abba:	685a      	ldr	r2, [r3, #4]
 800abbc:	683b      	ldr	r3, [r7, #0]
 800abbe:	68db      	ldr	r3, [r3, #12]
 800abc0:	f000 f943 	bl	800ae4a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	689b      	ldr	r3, [r3, #8]
 800abca:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800abcc:	68bb      	ldr	r3, [r7, #8]
 800abce:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800abd2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	68ba      	ldr	r2, [r7, #8]
 800abda:	609a      	str	r2, [r3, #8]
      break;
 800abdc:	e04f      	b.n	800ac7e <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	6818      	ldr	r0, [r3, #0]
 800abe2:	683b      	ldr	r3, [r7, #0]
 800abe4:	6899      	ldr	r1, [r3, #8]
 800abe6:	683b      	ldr	r3, [r7, #0]
 800abe8:	685a      	ldr	r2, [r3, #4]
 800abea:	683b      	ldr	r3, [r7, #0]
 800abec:	68db      	ldr	r3, [r3, #12]
 800abee:	f000 f92c 	bl	800ae4a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	689a      	ldr	r2, [r3, #8]
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ac00:	609a      	str	r2, [r3, #8]
      break;
 800ac02:	e03c      	b.n	800ac7e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	6818      	ldr	r0, [r3, #0]
 800ac08:	683b      	ldr	r3, [r7, #0]
 800ac0a:	6859      	ldr	r1, [r3, #4]
 800ac0c:	683b      	ldr	r3, [r7, #0]
 800ac0e:	68db      	ldr	r3, [r3, #12]
 800ac10:	461a      	mov	r2, r3
 800ac12:	f000 f8a3 	bl	800ad5c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	2150      	movs	r1, #80	; 0x50
 800ac1c:	4618      	mov	r0, r3
 800ac1e:	f000 f8fa 	bl	800ae16 <TIM_ITRx_SetConfig>
      break;
 800ac22:	e02c      	b.n	800ac7e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	6818      	ldr	r0, [r3, #0]
 800ac28:	683b      	ldr	r3, [r7, #0]
 800ac2a:	6859      	ldr	r1, [r3, #4]
 800ac2c:	683b      	ldr	r3, [r7, #0]
 800ac2e:	68db      	ldr	r3, [r3, #12]
 800ac30:	461a      	mov	r2, r3
 800ac32:	f000 f8c1 	bl	800adb8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	2160      	movs	r1, #96	; 0x60
 800ac3c:	4618      	mov	r0, r3
 800ac3e:	f000 f8ea 	bl	800ae16 <TIM_ITRx_SetConfig>
      break;
 800ac42:	e01c      	b.n	800ac7e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	6818      	ldr	r0, [r3, #0]
 800ac48:	683b      	ldr	r3, [r7, #0]
 800ac4a:	6859      	ldr	r1, [r3, #4]
 800ac4c:	683b      	ldr	r3, [r7, #0]
 800ac4e:	68db      	ldr	r3, [r3, #12]
 800ac50:	461a      	mov	r2, r3
 800ac52:	f000 f883 	bl	800ad5c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	2140      	movs	r1, #64	; 0x40
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	f000 f8da 	bl	800ae16 <TIM_ITRx_SetConfig>
      break;
 800ac62:	e00c      	b.n	800ac7e <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681a      	ldr	r2, [r3, #0]
 800ac68:	683b      	ldr	r3, [r7, #0]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	4619      	mov	r1, r3
 800ac6e:	4610      	mov	r0, r2
 800ac70:	f000 f8d1 	bl	800ae16 <TIM_ITRx_SetConfig>
      break;
 800ac74:	e003      	b.n	800ac7e <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800ac76:	2301      	movs	r3, #1
 800ac78:	73fb      	strb	r3, [r7, #15]
      break;
 800ac7a:	e000      	b.n	800ac7e <HAL_TIM_ConfigClockSource+0x174>
      break;
 800ac7c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	2201      	movs	r2, #1
 800ac82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	2200      	movs	r2, #0
 800ac8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ac8e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac90:	4618      	mov	r0, r3
 800ac92:	3710      	adds	r7, #16
 800ac94:	46bd      	mov	sp, r7
 800ac96:	bd80      	pop	{r7, pc}

0800ac98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ac98:	b480      	push	{r7}
 800ac9a:	b085      	sub	sp, #20
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	6078      	str	r0, [r7, #4]
 800aca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	4a29      	ldr	r2, [pc, #164]	; (800ad50 <TIM_Base_SetConfig+0xb8>)
 800acac:	4293      	cmp	r3, r2
 800acae:	d00b      	beq.n	800acc8 <TIM_Base_SetConfig+0x30>
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800acb6:	d007      	beq.n	800acc8 <TIM_Base_SetConfig+0x30>
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	4a26      	ldr	r2, [pc, #152]	; (800ad54 <TIM_Base_SetConfig+0xbc>)
 800acbc:	4293      	cmp	r3, r2
 800acbe:	d003      	beq.n	800acc8 <TIM_Base_SetConfig+0x30>
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	4a25      	ldr	r2, [pc, #148]	; (800ad58 <TIM_Base_SetConfig+0xc0>)
 800acc4:	4293      	cmp	r3, r2
 800acc6:	d108      	bne.n	800acda <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800acce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800acd0:	683b      	ldr	r3, [r7, #0]
 800acd2:	685b      	ldr	r3, [r3, #4]
 800acd4:	68fa      	ldr	r2, [r7, #12]
 800acd6:	4313      	orrs	r3, r2
 800acd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	4a1c      	ldr	r2, [pc, #112]	; (800ad50 <TIM_Base_SetConfig+0xb8>)
 800acde:	4293      	cmp	r3, r2
 800ace0:	d00b      	beq.n	800acfa <TIM_Base_SetConfig+0x62>
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ace8:	d007      	beq.n	800acfa <TIM_Base_SetConfig+0x62>
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	4a19      	ldr	r2, [pc, #100]	; (800ad54 <TIM_Base_SetConfig+0xbc>)
 800acee:	4293      	cmp	r3, r2
 800acf0:	d003      	beq.n	800acfa <TIM_Base_SetConfig+0x62>
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	4a18      	ldr	r2, [pc, #96]	; (800ad58 <TIM_Base_SetConfig+0xc0>)
 800acf6:	4293      	cmp	r3, r2
 800acf8:	d108      	bne.n	800ad0c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ad00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ad02:	683b      	ldr	r3, [r7, #0]
 800ad04:	68db      	ldr	r3, [r3, #12]
 800ad06:	68fa      	ldr	r2, [r7, #12]
 800ad08:	4313      	orrs	r3, r2
 800ad0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ad12:	683b      	ldr	r3, [r7, #0]
 800ad14:	695b      	ldr	r3, [r3, #20]
 800ad16:	4313      	orrs	r3, r2
 800ad18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	68fa      	ldr	r2, [r7, #12]
 800ad1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ad20:	683b      	ldr	r3, [r7, #0]
 800ad22:	689a      	ldr	r2, [r3, #8]
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ad28:	683b      	ldr	r3, [r7, #0]
 800ad2a:	681a      	ldr	r2, [r3, #0]
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	4a07      	ldr	r2, [pc, #28]	; (800ad50 <TIM_Base_SetConfig+0xb8>)
 800ad34:	4293      	cmp	r3, r2
 800ad36:	d103      	bne.n	800ad40 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ad38:	683b      	ldr	r3, [r7, #0]
 800ad3a:	691a      	ldr	r2, [r3, #16]
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	2201      	movs	r2, #1
 800ad44:	615a      	str	r2, [r3, #20]
}
 800ad46:	bf00      	nop
 800ad48:	3714      	adds	r7, #20
 800ad4a:	46bd      	mov	sp, r7
 800ad4c:	bc80      	pop	{r7}
 800ad4e:	4770      	bx	lr
 800ad50:	40012c00 	.word	0x40012c00
 800ad54:	40000400 	.word	0x40000400
 800ad58:	40000800 	.word	0x40000800

0800ad5c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ad5c:	b480      	push	{r7}
 800ad5e:	b087      	sub	sp, #28
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	60f8      	str	r0, [r7, #12]
 800ad64:	60b9      	str	r1, [r7, #8]
 800ad66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	6a1b      	ldr	r3, [r3, #32]
 800ad6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	6a1b      	ldr	r3, [r3, #32]
 800ad72:	f023 0201 	bic.w	r2, r3, #1
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	699b      	ldr	r3, [r3, #24]
 800ad7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ad80:	693b      	ldr	r3, [r7, #16]
 800ad82:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ad86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	011b      	lsls	r3, r3, #4
 800ad8c:	693a      	ldr	r2, [r7, #16]
 800ad8e:	4313      	orrs	r3, r2
 800ad90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ad92:	697b      	ldr	r3, [r7, #20]
 800ad94:	f023 030a 	bic.w	r3, r3, #10
 800ad98:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ad9a:	697a      	ldr	r2, [r7, #20]
 800ad9c:	68bb      	ldr	r3, [r7, #8]
 800ad9e:	4313      	orrs	r3, r2
 800ada0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	693a      	ldr	r2, [r7, #16]
 800ada6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	697a      	ldr	r2, [r7, #20]
 800adac:	621a      	str	r2, [r3, #32]
}
 800adae:	bf00      	nop
 800adb0:	371c      	adds	r7, #28
 800adb2:	46bd      	mov	sp, r7
 800adb4:	bc80      	pop	{r7}
 800adb6:	4770      	bx	lr

0800adb8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800adb8:	b480      	push	{r7}
 800adba:	b087      	sub	sp, #28
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	60f8      	str	r0, [r7, #12]
 800adc0:	60b9      	str	r1, [r7, #8]
 800adc2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	6a1b      	ldr	r3, [r3, #32]
 800adc8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	6a1b      	ldr	r3, [r3, #32]
 800adce:	f023 0210 	bic.w	r2, r3, #16
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	699b      	ldr	r3, [r3, #24]
 800adda:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800addc:	693b      	ldr	r3, [r7, #16]
 800adde:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ade2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	031b      	lsls	r3, r3, #12
 800ade8:	693a      	ldr	r2, [r7, #16]
 800adea:	4313      	orrs	r3, r2
 800adec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800adee:	697b      	ldr	r3, [r7, #20]
 800adf0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800adf4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800adf6:	68bb      	ldr	r3, [r7, #8]
 800adf8:	011b      	lsls	r3, r3, #4
 800adfa:	697a      	ldr	r2, [r7, #20]
 800adfc:	4313      	orrs	r3, r2
 800adfe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	693a      	ldr	r2, [r7, #16]
 800ae04:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	697a      	ldr	r2, [r7, #20]
 800ae0a:	621a      	str	r2, [r3, #32]
}
 800ae0c:	bf00      	nop
 800ae0e:	371c      	adds	r7, #28
 800ae10:	46bd      	mov	sp, r7
 800ae12:	bc80      	pop	{r7}
 800ae14:	4770      	bx	lr

0800ae16 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ae16:	b480      	push	{r7}
 800ae18:	b085      	sub	sp, #20
 800ae1a:	af00      	add	r7, sp, #0
 800ae1c:	6078      	str	r0, [r7, #4]
 800ae1e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	689b      	ldr	r3, [r3, #8]
 800ae24:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae2c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ae2e:	683a      	ldr	r2, [r7, #0]
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	4313      	orrs	r3, r2
 800ae34:	f043 0307 	orr.w	r3, r3, #7
 800ae38:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	68fa      	ldr	r2, [r7, #12]
 800ae3e:	609a      	str	r2, [r3, #8]
}
 800ae40:	bf00      	nop
 800ae42:	3714      	adds	r7, #20
 800ae44:	46bd      	mov	sp, r7
 800ae46:	bc80      	pop	{r7}
 800ae48:	4770      	bx	lr

0800ae4a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ae4a:	b480      	push	{r7}
 800ae4c:	b087      	sub	sp, #28
 800ae4e:	af00      	add	r7, sp, #0
 800ae50:	60f8      	str	r0, [r7, #12]
 800ae52:	60b9      	str	r1, [r7, #8]
 800ae54:	607a      	str	r2, [r7, #4]
 800ae56:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	689b      	ldr	r3, [r3, #8]
 800ae5c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ae5e:	697b      	ldr	r3, [r7, #20]
 800ae60:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ae64:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ae66:	683b      	ldr	r3, [r7, #0]
 800ae68:	021a      	lsls	r2, r3, #8
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	431a      	orrs	r2, r3
 800ae6e:	68bb      	ldr	r3, [r7, #8]
 800ae70:	4313      	orrs	r3, r2
 800ae72:	697a      	ldr	r2, [r7, #20]
 800ae74:	4313      	orrs	r3, r2
 800ae76:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	697a      	ldr	r2, [r7, #20]
 800ae7c:	609a      	str	r2, [r3, #8]
}
 800ae7e:	bf00      	nop
 800ae80:	371c      	adds	r7, #28
 800ae82:	46bd      	mov	sp, r7
 800ae84:	bc80      	pop	{r7}
 800ae86:	4770      	bx	lr

0800ae88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ae88:	b480      	push	{r7}
 800ae8a:	b085      	sub	sp, #20
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	6078      	str	r0, [r7, #4]
 800ae90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ae98:	2b01      	cmp	r3, #1
 800ae9a:	d101      	bne.n	800aea0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ae9c:	2302      	movs	r3, #2
 800ae9e:	e046      	b.n	800af2e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	2201      	movs	r2, #1
 800aea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	2202      	movs	r2, #2
 800aeac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	685b      	ldr	r3, [r3, #4]
 800aeb6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	689b      	ldr	r3, [r3, #8]
 800aebe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aec6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800aec8:	683b      	ldr	r3, [r7, #0]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	68fa      	ldr	r2, [r7, #12]
 800aece:	4313      	orrs	r3, r2
 800aed0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	68fa      	ldr	r2, [r7, #12]
 800aed8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	4a16      	ldr	r2, [pc, #88]	; (800af38 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800aee0:	4293      	cmp	r3, r2
 800aee2:	d00e      	beq.n	800af02 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aeec:	d009      	beq.n	800af02 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	4a12      	ldr	r2, [pc, #72]	; (800af3c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800aef4:	4293      	cmp	r3, r2
 800aef6:	d004      	beq.n	800af02 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	4a10      	ldr	r2, [pc, #64]	; (800af40 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800aefe:	4293      	cmp	r3, r2
 800af00:	d10c      	bne.n	800af1c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800af02:	68bb      	ldr	r3, [r7, #8]
 800af04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800af08:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800af0a:	683b      	ldr	r3, [r7, #0]
 800af0c:	685b      	ldr	r3, [r3, #4]
 800af0e:	68ba      	ldr	r2, [r7, #8]
 800af10:	4313      	orrs	r3, r2
 800af12:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	68ba      	ldr	r2, [r7, #8]
 800af1a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	2201      	movs	r2, #1
 800af20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	2200      	movs	r2, #0
 800af28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800af2c:	2300      	movs	r3, #0
}
 800af2e:	4618      	mov	r0, r3
 800af30:	3714      	adds	r7, #20
 800af32:	46bd      	mov	sp, r7
 800af34:	bc80      	pop	{r7}
 800af36:	4770      	bx	lr
 800af38:	40012c00 	.word	0x40012c00
 800af3c:	40000400 	.word	0x40000400
 800af40:	40000800 	.word	0x40000800

0800af44 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800af44:	b580      	push	{r7, lr}
 800af46:	b082      	sub	sp, #8
 800af48:	af00      	add	r7, sp, #0
 800af4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d101      	bne.n	800af56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800af52:	2301      	movs	r3, #1
 800af54:	e042      	b.n	800afdc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800af5c:	b2db      	uxtb	r3, r3
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d106      	bne.n	800af70 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	2200      	movs	r2, #0
 800af66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800af6a:	6878      	ldr	r0, [r7, #4]
 800af6c:	f7fb fcb6 	bl	80068dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	2224      	movs	r2, #36	; 0x24
 800af74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	68da      	ldr	r2, [r3, #12]
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800af86:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800af88:	6878      	ldr	r0, [r7, #4]
 800af8a:	f000 ff89 	bl	800bea0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	691a      	ldr	r2, [r3, #16]
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800af9c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	695a      	ldr	r2, [r3, #20]
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800afac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	68da      	ldr	r2, [r3, #12]
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800afbc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	2200      	movs	r2, #0
 800afc2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	2220      	movs	r2, #32
 800afc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	2220      	movs	r2, #32
 800afd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	2200      	movs	r2, #0
 800afd8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800afda:	2300      	movs	r3, #0
}
 800afdc:	4618      	mov	r0, r3
 800afde:	3708      	adds	r7, #8
 800afe0:	46bd      	mov	sp, r7
 800afe2:	bd80      	pop	{r7, pc}

0800afe4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800afe4:	b580      	push	{r7, lr}
 800afe6:	b08a      	sub	sp, #40	; 0x28
 800afe8:	af02      	add	r7, sp, #8
 800afea:	60f8      	str	r0, [r7, #12]
 800afec:	60b9      	str	r1, [r7, #8]
 800afee:	603b      	str	r3, [r7, #0]
 800aff0:	4613      	mov	r3, r2
 800aff2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800aff4:	2300      	movs	r3, #0
 800aff6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800affe:	b2db      	uxtb	r3, r3
 800b000:	2b20      	cmp	r3, #32
 800b002:	d16d      	bne.n	800b0e0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800b004:	68bb      	ldr	r3, [r7, #8]
 800b006:	2b00      	cmp	r3, #0
 800b008:	d002      	beq.n	800b010 <HAL_UART_Transmit+0x2c>
 800b00a:	88fb      	ldrh	r3, [r7, #6]
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d101      	bne.n	800b014 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800b010:	2301      	movs	r3, #1
 800b012:	e066      	b.n	800b0e2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	2200      	movs	r2, #0
 800b018:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	2221      	movs	r2, #33	; 0x21
 800b01e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b022:	f7fc fe69 	bl	8007cf8 <HAL_GetTick>
 800b026:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	88fa      	ldrh	r2, [r7, #6]
 800b02c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	88fa      	ldrh	r2, [r7, #6]
 800b032:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	689b      	ldr	r3, [r3, #8]
 800b038:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b03c:	d108      	bne.n	800b050 <HAL_UART_Transmit+0x6c>
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	691b      	ldr	r3, [r3, #16]
 800b042:	2b00      	cmp	r3, #0
 800b044:	d104      	bne.n	800b050 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800b046:	2300      	movs	r3, #0
 800b048:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b04a:	68bb      	ldr	r3, [r7, #8]
 800b04c:	61bb      	str	r3, [r7, #24]
 800b04e:	e003      	b.n	800b058 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800b050:	68bb      	ldr	r3, [r7, #8]
 800b052:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b054:	2300      	movs	r3, #0
 800b056:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800b058:	e02a      	b.n	800b0b0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b05a:	683b      	ldr	r3, [r7, #0]
 800b05c:	9300      	str	r3, [sp, #0]
 800b05e:	697b      	ldr	r3, [r7, #20]
 800b060:	2200      	movs	r2, #0
 800b062:	2180      	movs	r1, #128	; 0x80
 800b064:	68f8      	ldr	r0, [r7, #12]
 800b066:	f000 fc51 	bl	800b90c <UART_WaitOnFlagUntilTimeout>
 800b06a:	4603      	mov	r3, r0
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d001      	beq.n	800b074 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800b070:	2303      	movs	r3, #3
 800b072:	e036      	b.n	800b0e2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800b074:	69fb      	ldr	r3, [r7, #28]
 800b076:	2b00      	cmp	r3, #0
 800b078:	d10b      	bne.n	800b092 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b07a:	69bb      	ldr	r3, [r7, #24]
 800b07c:	881b      	ldrh	r3, [r3, #0]
 800b07e:	461a      	mov	r2, r3
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b088:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800b08a:	69bb      	ldr	r3, [r7, #24]
 800b08c:	3302      	adds	r3, #2
 800b08e:	61bb      	str	r3, [r7, #24]
 800b090:	e007      	b.n	800b0a2 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800b092:	69fb      	ldr	r3, [r7, #28]
 800b094:	781a      	ldrb	r2, [r3, #0]
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800b09c:	69fb      	ldr	r3, [r7, #28]
 800b09e:	3301      	adds	r3, #1
 800b0a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b0a6:	b29b      	uxth	r3, r3
 800b0a8:	3b01      	subs	r3, #1
 800b0aa:	b29a      	uxth	r2, r3
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b0b4:	b29b      	uxth	r3, r3
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d1cf      	bne.n	800b05a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b0ba:	683b      	ldr	r3, [r7, #0]
 800b0bc:	9300      	str	r3, [sp, #0]
 800b0be:	697b      	ldr	r3, [r7, #20]
 800b0c0:	2200      	movs	r2, #0
 800b0c2:	2140      	movs	r1, #64	; 0x40
 800b0c4:	68f8      	ldr	r0, [r7, #12]
 800b0c6:	f000 fc21 	bl	800b90c <UART_WaitOnFlagUntilTimeout>
 800b0ca:	4603      	mov	r3, r0
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d001      	beq.n	800b0d4 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800b0d0:	2303      	movs	r3, #3
 800b0d2:	e006      	b.n	800b0e2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	2220      	movs	r2, #32
 800b0d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800b0dc:	2300      	movs	r3, #0
 800b0de:	e000      	b.n	800b0e2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800b0e0:	2302      	movs	r3, #2
  }
}
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	3720      	adds	r7, #32
 800b0e6:	46bd      	mov	sp, r7
 800b0e8:	bd80      	pop	{r7, pc}

0800b0ea <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b0ea:	b580      	push	{r7, lr}
 800b0ec:	b08c      	sub	sp, #48	; 0x30
 800b0ee:	af00      	add	r7, sp, #0
 800b0f0:	60f8      	str	r0, [r7, #12]
 800b0f2:	60b9      	str	r1, [r7, #8]
 800b0f4:	4613      	mov	r3, r2
 800b0f6:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b0fe:	b2db      	uxtb	r3, r3
 800b100:	2b20      	cmp	r3, #32
 800b102:	d14a      	bne.n	800b19a <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 800b104:	68bb      	ldr	r3, [r7, #8]
 800b106:	2b00      	cmp	r3, #0
 800b108:	d002      	beq.n	800b110 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800b10a:	88fb      	ldrh	r3, [r7, #6]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d101      	bne.n	800b114 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800b110:	2301      	movs	r3, #1
 800b112:	e043      	b.n	800b19c <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	2201      	movs	r2, #1
 800b118:	631a      	str	r2, [r3, #48]	; 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	2200      	movs	r2, #0
 800b11e:	635a      	str	r2, [r3, #52]	; 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800b120:	88fb      	ldrh	r3, [r7, #6]
 800b122:	461a      	mov	r2, r3
 800b124:	68b9      	ldr	r1, [r7, #8]
 800b126:	68f8      	ldr	r0, [r7, #12]
 800b128:	f000 fc5e 	bl	800b9e8 <UART_Start_Receive_DMA>
 800b12c:	4603      	mov	r3, r0
 800b12e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800b132:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b136:	2b00      	cmp	r3, #0
 800b138:	d12c      	bne.n	800b194 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b13e:	2b01      	cmp	r3, #1
 800b140:	d125      	bne.n	800b18e <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b142:	2300      	movs	r3, #0
 800b144:	613b      	str	r3, [r7, #16]
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	613b      	str	r3, [r7, #16]
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	685b      	ldr	r3, [r3, #4]
 800b154:	613b      	str	r3, [r7, #16]
 800b156:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	330c      	adds	r3, #12
 800b15e:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b160:	69bb      	ldr	r3, [r7, #24]
 800b162:	e853 3f00 	ldrex	r3, [r3]
 800b166:	617b      	str	r3, [r7, #20]
   return(result);
 800b168:	697b      	ldr	r3, [r7, #20]
 800b16a:	f043 0310 	orr.w	r3, r3, #16
 800b16e:	62bb      	str	r3, [r7, #40]	; 0x28
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	330c      	adds	r3, #12
 800b176:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b178:	627a      	str	r2, [r7, #36]	; 0x24
 800b17a:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b17c:	6a39      	ldr	r1, [r7, #32]
 800b17e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b180:	e841 2300 	strex	r3, r2, [r1]
 800b184:	61fb      	str	r3, [r7, #28]
   return(result);
 800b186:	69fb      	ldr	r3, [r7, #28]
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d1e5      	bne.n	800b158 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 800b18c:	e002      	b.n	800b194 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800b18e:	2301      	movs	r3, #1
 800b190:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800b194:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b198:	e000      	b.n	800b19c <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 800b19a:	2302      	movs	r3, #2
  }
}
 800b19c:	4618      	mov	r0, r3
 800b19e:	3730      	adds	r7, #48	; 0x30
 800b1a0:	46bd      	mov	sp, r7
 800b1a2:	bd80      	pop	{r7, pc}

0800b1a4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b1a4:	b580      	push	{r7, lr}
 800b1a6:	b0ba      	sub	sp, #232	; 0xe8
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	68db      	ldr	r3, [r3, #12]
 800b1bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	695b      	ldr	r3, [r3, #20]
 800b1c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800b1d0:	2300      	movs	r3, #0
 800b1d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b1d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b1da:	f003 030f 	and.w	r3, r3, #15
 800b1de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800b1e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d10f      	bne.n	800b20a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b1ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b1ee:	f003 0320 	and.w	r3, r3, #32
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d009      	beq.n	800b20a <HAL_UART_IRQHandler+0x66>
 800b1f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b1fa:	f003 0320 	and.w	r3, r3, #32
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d003      	beq.n	800b20a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800b202:	6878      	ldr	r0, [r7, #4]
 800b204:	f000 fd8e 	bl	800bd24 <UART_Receive_IT>
      return;
 800b208:	e25b      	b.n	800b6c2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800b20a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b20e:	2b00      	cmp	r3, #0
 800b210:	f000 80de 	beq.w	800b3d0 <HAL_UART_IRQHandler+0x22c>
 800b214:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b218:	f003 0301 	and.w	r3, r3, #1
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d106      	bne.n	800b22e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b220:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b224:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800b228:	2b00      	cmp	r3, #0
 800b22a:	f000 80d1 	beq.w	800b3d0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b22e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b232:	f003 0301 	and.w	r3, r3, #1
 800b236:	2b00      	cmp	r3, #0
 800b238:	d00b      	beq.n	800b252 <HAL_UART_IRQHandler+0xae>
 800b23a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b23e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b242:	2b00      	cmp	r3, #0
 800b244:	d005      	beq.n	800b252 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b24a:	f043 0201 	orr.w	r2, r3, #1
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b252:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b256:	f003 0304 	and.w	r3, r3, #4
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d00b      	beq.n	800b276 <HAL_UART_IRQHandler+0xd2>
 800b25e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b262:	f003 0301 	and.w	r3, r3, #1
 800b266:	2b00      	cmp	r3, #0
 800b268:	d005      	beq.n	800b276 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b26e:	f043 0202 	orr.w	r2, r3, #2
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b276:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b27a:	f003 0302 	and.w	r3, r3, #2
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d00b      	beq.n	800b29a <HAL_UART_IRQHandler+0xf6>
 800b282:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b286:	f003 0301 	and.w	r3, r3, #1
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d005      	beq.n	800b29a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b292:	f043 0204 	orr.w	r2, r3, #4
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800b29a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b29e:	f003 0308 	and.w	r3, r3, #8
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d011      	beq.n	800b2ca <HAL_UART_IRQHandler+0x126>
 800b2a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b2aa:	f003 0320 	and.w	r3, r3, #32
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d105      	bne.n	800b2be <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800b2b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b2b6:	f003 0301 	and.w	r3, r3, #1
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d005      	beq.n	800b2ca <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b2c2:	f043 0208 	orr.w	r2, r3, #8
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	f000 81f2 	beq.w	800b6b8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b2d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b2d8:	f003 0320 	and.w	r3, r3, #32
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d008      	beq.n	800b2f2 <HAL_UART_IRQHandler+0x14e>
 800b2e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b2e4:	f003 0320 	and.w	r3, r3, #32
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d002      	beq.n	800b2f2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800b2ec:	6878      	ldr	r0, [r7, #4]
 800b2ee:	f000 fd19 	bl	800bd24 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	695b      	ldr	r3, [r3, #20]
 800b2f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	bf14      	ite	ne
 800b300:	2301      	movne	r3, #1
 800b302:	2300      	moveq	r3, #0
 800b304:	b2db      	uxtb	r3, r3
 800b306:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b30e:	f003 0308 	and.w	r3, r3, #8
 800b312:	2b00      	cmp	r3, #0
 800b314:	d103      	bne.n	800b31e <HAL_UART_IRQHandler+0x17a>
 800b316:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d04f      	beq.n	800b3be <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b31e:	6878      	ldr	r0, [r7, #4]
 800b320:	f000 fc23 	bl	800bb6a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	695b      	ldr	r3, [r3, #20]
 800b32a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d041      	beq.n	800b3b6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	3314      	adds	r3, #20
 800b338:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b33c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b340:	e853 3f00 	ldrex	r3, [r3]
 800b344:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b348:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b34c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b350:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	3314      	adds	r3, #20
 800b35a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b35e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b362:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b366:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b36a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b36e:	e841 2300 	strex	r3, r2, [r1]
 800b372:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b376:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d1d9      	bne.n	800b332 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b382:	2b00      	cmp	r3, #0
 800b384:	d013      	beq.n	800b3ae <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b38a:	4a7e      	ldr	r2, [pc, #504]	; (800b584 <HAL_UART_IRQHandler+0x3e0>)
 800b38c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b392:	4618      	mov	r0, r3
 800b394:	f7fd fae0 	bl	8008958 <HAL_DMA_Abort_IT>
 800b398:	4603      	mov	r3, r0
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d016      	beq.n	800b3cc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b3a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3a4:	687a      	ldr	r2, [r7, #4]
 800b3a6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800b3a8:	4610      	mov	r0, r2
 800b3aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b3ac:	e00e      	b.n	800b3cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b3ae:	6878      	ldr	r0, [r7, #4]
 800b3b0:	f000 f9a5 	bl	800b6fe <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b3b4:	e00a      	b.n	800b3cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b3b6:	6878      	ldr	r0, [r7, #4]
 800b3b8:	f000 f9a1 	bl	800b6fe <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b3bc:	e006      	b.n	800b3cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b3be:	6878      	ldr	r0, [r7, #4]
 800b3c0:	f000 f99d 	bl	800b6fe <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	2200      	movs	r2, #0
 800b3c8:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800b3ca:	e175      	b.n	800b6b8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b3cc:	bf00      	nop
    return;
 800b3ce:	e173      	b.n	800b6b8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3d4:	2b01      	cmp	r3, #1
 800b3d6:	f040 814f 	bne.w	800b678 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800b3da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b3de:	f003 0310 	and.w	r3, r3, #16
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	f000 8148 	beq.w	800b678 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800b3e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b3ec:	f003 0310 	and.w	r3, r3, #16
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	f000 8141 	beq.w	800b678 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b3f6:	2300      	movs	r3, #0
 800b3f8:	60bb      	str	r3, [r7, #8]
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	60bb      	str	r3, [r7, #8]
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	685b      	ldr	r3, [r3, #4]
 800b408:	60bb      	str	r3, [r7, #8]
 800b40a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	695b      	ldr	r3, [r3, #20]
 800b412:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b416:	2b00      	cmp	r3, #0
 800b418:	f000 80b6 	beq.w	800b588 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	685b      	ldr	r3, [r3, #4]
 800b424:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b428:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	f000 8145 	beq.w	800b6bc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b436:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b43a:	429a      	cmp	r2, r3
 800b43c:	f080 813e 	bcs.w	800b6bc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b446:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b44c:	699b      	ldr	r3, [r3, #24]
 800b44e:	2b20      	cmp	r3, #32
 800b450:	f000 8088 	beq.w	800b564 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	330c      	adds	r3, #12
 800b45a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b45e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b462:	e853 3f00 	ldrex	r3, [r3]
 800b466:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b46a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b46e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b472:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	330c      	adds	r3, #12
 800b47c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800b480:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b484:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b488:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b48c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b490:	e841 2300 	strex	r3, r2, [r1]
 800b494:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b498:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d1d9      	bne.n	800b454 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	3314      	adds	r3, #20
 800b4a6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b4aa:	e853 3f00 	ldrex	r3, [r3]
 800b4ae:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b4b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b4b2:	f023 0301 	bic.w	r3, r3, #1
 800b4b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	3314      	adds	r3, #20
 800b4c0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b4c4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b4c8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4ca:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b4cc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b4d0:	e841 2300 	strex	r3, r2, [r1]
 800b4d4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b4d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d1e1      	bne.n	800b4a0 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	3314      	adds	r3, #20
 800b4e2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b4e6:	e853 3f00 	ldrex	r3, [r3]
 800b4ea:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b4ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b4ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b4f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	3314      	adds	r3, #20
 800b4fc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b500:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b502:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b504:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b506:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b508:	e841 2300 	strex	r3, r2, [r1]
 800b50c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b50e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b510:	2b00      	cmp	r3, #0
 800b512:	d1e3      	bne.n	800b4dc <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	2220      	movs	r2, #32
 800b518:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	2200      	movs	r2, #0
 800b520:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	330c      	adds	r3, #12
 800b528:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b52a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b52c:	e853 3f00 	ldrex	r3, [r3]
 800b530:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b532:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b534:	f023 0310 	bic.w	r3, r3, #16
 800b538:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	330c      	adds	r3, #12
 800b542:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b546:	65ba      	str	r2, [r7, #88]	; 0x58
 800b548:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b54a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b54c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b54e:	e841 2300 	strex	r3, r2, [r1]
 800b552:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b554:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b556:	2b00      	cmp	r3, #0
 800b558:	d1e3      	bne.n	800b522 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b55e:	4618      	mov	r0, r3
 800b560:	f7fd f9be 	bl	80088e0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	2202      	movs	r2, #2
 800b568:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b572:	b29b      	uxth	r3, r3
 800b574:	1ad3      	subs	r3, r2, r3
 800b576:	b29b      	uxth	r3, r3
 800b578:	4619      	mov	r1, r3
 800b57a:	6878      	ldr	r0, [r7, #4]
 800b57c:	f7fa fd20 	bl	8005fc0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b580:	e09c      	b.n	800b6bc <HAL_UART_IRQHandler+0x518>
 800b582:	bf00      	nop
 800b584:	0800bc2f 	.word	0x0800bc2f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b590:	b29b      	uxth	r3, r3
 800b592:	1ad3      	subs	r3, r2, r3
 800b594:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b59c:	b29b      	uxth	r3, r3
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	f000 808e 	beq.w	800b6c0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800b5a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	f000 8089 	beq.w	800b6c0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	330c      	adds	r3, #12
 800b5b4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5b8:	e853 3f00 	ldrex	r3, [r3]
 800b5bc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b5be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b5c4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	330c      	adds	r3, #12
 800b5ce:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800b5d2:	647a      	str	r2, [r7, #68]	; 0x44
 800b5d4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5d6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b5d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b5da:	e841 2300 	strex	r3, r2, [r1]
 800b5de:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b5e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d1e3      	bne.n	800b5ae <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	3314      	adds	r3, #20
 800b5ec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5f0:	e853 3f00 	ldrex	r3, [r3]
 800b5f4:	623b      	str	r3, [r7, #32]
   return(result);
 800b5f6:	6a3b      	ldr	r3, [r7, #32]
 800b5f8:	f023 0301 	bic.w	r3, r3, #1
 800b5fc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	3314      	adds	r3, #20
 800b606:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b60a:	633a      	str	r2, [r7, #48]	; 0x30
 800b60c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b60e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b610:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b612:	e841 2300 	strex	r3, r2, [r1]
 800b616:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d1e3      	bne.n	800b5e6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	2220      	movs	r2, #32
 800b622:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	2200      	movs	r2, #0
 800b62a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	330c      	adds	r3, #12
 800b632:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b634:	693b      	ldr	r3, [r7, #16]
 800b636:	e853 3f00 	ldrex	r3, [r3]
 800b63a:	60fb      	str	r3, [r7, #12]
   return(result);
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	f023 0310 	bic.w	r3, r3, #16
 800b642:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	330c      	adds	r3, #12
 800b64c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800b650:	61fa      	str	r2, [r7, #28]
 800b652:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b654:	69b9      	ldr	r1, [r7, #24]
 800b656:	69fa      	ldr	r2, [r7, #28]
 800b658:	e841 2300 	strex	r3, r2, [r1]
 800b65c:	617b      	str	r3, [r7, #20]
   return(result);
 800b65e:	697b      	ldr	r3, [r7, #20]
 800b660:	2b00      	cmp	r3, #0
 800b662:	d1e3      	bne.n	800b62c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	2202      	movs	r2, #2
 800b668:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b66a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b66e:	4619      	mov	r1, r3
 800b670:	6878      	ldr	r0, [r7, #4]
 800b672:	f7fa fca5 	bl	8005fc0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b676:	e023      	b.n	800b6c0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b678:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b67c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b680:	2b00      	cmp	r3, #0
 800b682:	d009      	beq.n	800b698 <HAL_UART_IRQHandler+0x4f4>
 800b684:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b688:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d003      	beq.n	800b698 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800b690:	6878      	ldr	r0, [r7, #4]
 800b692:	f000 fae0 	bl	800bc56 <UART_Transmit_IT>
    return;
 800b696:	e014      	b.n	800b6c2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b698:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b69c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d00e      	beq.n	800b6c2 <HAL_UART_IRQHandler+0x51e>
 800b6a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b6a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d008      	beq.n	800b6c2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800b6b0:	6878      	ldr	r0, [r7, #4]
 800b6b2:	f000 fb1f 	bl	800bcf4 <UART_EndTransmit_IT>
    return;
 800b6b6:	e004      	b.n	800b6c2 <HAL_UART_IRQHandler+0x51e>
    return;
 800b6b8:	bf00      	nop
 800b6ba:	e002      	b.n	800b6c2 <HAL_UART_IRQHandler+0x51e>
      return;
 800b6bc:	bf00      	nop
 800b6be:	e000      	b.n	800b6c2 <HAL_UART_IRQHandler+0x51e>
      return;
 800b6c0:	bf00      	nop
  }
}
 800b6c2:	37e8      	adds	r7, #232	; 0xe8
 800b6c4:	46bd      	mov	sp, r7
 800b6c6:	bd80      	pop	{r7, pc}

0800b6c8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b6c8:	b480      	push	{r7}
 800b6ca:	b083      	sub	sp, #12
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800b6d0:	bf00      	nop
 800b6d2:	370c      	adds	r7, #12
 800b6d4:	46bd      	mov	sp, r7
 800b6d6:	bc80      	pop	{r7}
 800b6d8:	4770      	bx	lr

0800b6da <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800b6da:	b480      	push	{r7}
 800b6dc:	b083      	sub	sp, #12
 800b6de:	af00      	add	r7, sp, #0
 800b6e0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800b6e2:	bf00      	nop
 800b6e4:	370c      	adds	r7, #12
 800b6e6:	46bd      	mov	sp, r7
 800b6e8:	bc80      	pop	{r7}
 800b6ea:	4770      	bx	lr

0800b6ec <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b6ec:	b480      	push	{r7}
 800b6ee:	b083      	sub	sp, #12
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800b6f4:	bf00      	nop
 800b6f6:	370c      	adds	r7, #12
 800b6f8:	46bd      	mov	sp, r7
 800b6fa:	bc80      	pop	{r7}
 800b6fc:	4770      	bx	lr

0800b6fe <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b6fe:	b480      	push	{r7}
 800b700:	b083      	sub	sp, #12
 800b702:	af00      	add	r7, sp, #0
 800b704:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b706:	bf00      	nop
 800b708:	370c      	adds	r7, #12
 800b70a:	46bd      	mov	sp, r7
 800b70c:	bc80      	pop	{r7}
 800b70e:	4770      	bx	lr

0800b710 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b710:	b580      	push	{r7, lr}
 800b712:	b09c      	sub	sp, #112	; 0x70
 800b714:	af00      	add	r7, sp, #0
 800b716:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b71c:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	f003 0320 	and.w	r3, r3, #32
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d172      	bne.n	800b812 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800b72c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b72e:	2200      	movs	r2, #0
 800b730:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b732:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	330c      	adds	r3, #12
 800b738:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b73a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b73c:	e853 3f00 	ldrex	r3, [r3]
 800b740:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b742:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b744:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b748:	66bb      	str	r3, [r7, #104]	; 0x68
 800b74a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	330c      	adds	r3, #12
 800b750:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b752:	65ba      	str	r2, [r7, #88]	; 0x58
 800b754:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b756:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b758:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b75a:	e841 2300 	strex	r3, r2, [r1]
 800b75e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b760:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b762:	2b00      	cmp	r3, #0
 800b764:	d1e5      	bne.n	800b732 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b766:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	3314      	adds	r3, #20
 800b76c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b76e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b770:	e853 3f00 	ldrex	r3, [r3]
 800b774:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b776:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b778:	f023 0301 	bic.w	r3, r3, #1
 800b77c:	667b      	str	r3, [r7, #100]	; 0x64
 800b77e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	3314      	adds	r3, #20
 800b784:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b786:	647a      	str	r2, [r7, #68]	; 0x44
 800b788:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b78a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b78c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b78e:	e841 2300 	strex	r3, r2, [r1]
 800b792:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b794:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b796:	2b00      	cmp	r3, #0
 800b798:	d1e5      	bne.n	800b766 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b79a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	3314      	adds	r3, #20
 800b7a0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7a4:	e853 3f00 	ldrex	r3, [r3]
 800b7a8:	623b      	str	r3, [r7, #32]
   return(result);
 800b7aa:	6a3b      	ldr	r3, [r7, #32]
 800b7ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b7b0:	663b      	str	r3, [r7, #96]	; 0x60
 800b7b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	3314      	adds	r3, #20
 800b7b8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b7ba:	633a      	str	r2, [r7, #48]	; 0x30
 800b7bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b7c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b7c2:	e841 2300 	strex	r3, r2, [r1]
 800b7c6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b7c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d1e5      	bne.n	800b79a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b7ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b7d0:	2220      	movs	r2, #32
 800b7d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b7d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b7d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7da:	2b01      	cmp	r3, #1
 800b7dc:	d119      	bne.n	800b812 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b7de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	330c      	adds	r3, #12
 800b7e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7e6:	693b      	ldr	r3, [r7, #16]
 800b7e8:	e853 3f00 	ldrex	r3, [r3]
 800b7ec:	60fb      	str	r3, [r7, #12]
   return(result);
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	f023 0310 	bic.w	r3, r3, #16
 800b7f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b7f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	330c      	adds	r3, #12
 800b7fc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b7fe:	61fa      	str	r2, [r7, #28]
 800b800:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b802:	69b9      	ldr	r1, [r7, #24]
 800b804:	69fa      	ldr	r2, [r7, #28]
 800b806:	e841 2300 	strex	r3, r2, [r1]
 800b80a:	617b      	str	r3, [r7, #20]
   return(result);
 800b80c:	697b      	ldr	r3, [r7, #20]
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d1e5      	bne.n	800b7de <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b812:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b814:	2200      	movs	r2, #0
 800b816:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b818:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b81a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b81c:	2b01      	cmp	r3, #1
 800b81e:	d106      	bne.n	800b82e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b820:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b822:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b824:	4619      	mov	r1, r3
 800b826:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b828:	f7fa fbca 	bl	8005fc0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b82c:	e002      	b.n	800b834 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800b82e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b830:	f7ff ff53 	bl	800b6da <HAL_UART_RxCpltCallback>
}
 800b834:	bf00      	nop
 800b836:	3770      	adds	r7, #112	; 0x70
 800b838:	46bd      	mov	sp, r7
 800b83a:	bd80      	pop	{r7, pc}

0800b83c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b83c:	b580      	push	{r7, lr}
 800b83e:	b084      	sub	sp, #16
 800b840:	af00      	add	r7, sp, #0
 800b842:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b848:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	2201      	movs	r2, #1
 800b84e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b854:	2b01      	cmp	r3, #1
 800b856:	d108      	bne.n	800b86a <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b85c:	085b      	lsrs	r3, r3, #1
 800b85e:	b29b      	uxth	r3, r3
 800b860:	4619      	mov	r1, r3
 800b862:	68f8      	ldr	r0, [r7, #12]
 800b864:	f7fa fbac 	bl	8005fc0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b868:	e002      	b.n	800b870 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800b86a:	68f8      	ldr	r0, [r7, #12]
 800b86c:	f7ff ff3e 	bl	800b6ec <HAL_UART_RxHalfCpltCallback>
}
 800b870:	bf00      	nop
 800b872:	3710      	adds	r7, #16
 800b874:	46bd      	mov	sp, r7
 800b876:	bd80      	pop	{r7, pc}

0800b878 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b878:	b580      	push	{r7, lr}
 800b87a:	b084      	sub	sp, #16
 800b87c:	af00      	add	r7, sp, #0
 800b87e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800b880:	2300      	movs	r3, #0
 800b882:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b888:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800b88a:	68bb      	ldr	r3, [r7, #8]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	695b      	ldr	r3, [r3, #20]
 800b890:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b894:	2b00      	cmp	r3, #0
 800b896:	bf14      	ite	ne
 800b898:	2301      	movne	r3, #1
 800b89a:	2300      	moveq	r3, #0
 800b89c:	b2db      	uxtb	r3, r3
 800b89e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800b8a0:	68bb      	ldr	r3, [r7, #8]
 800b8a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b8a6:	b2db      	uxtb	r3, r3
 800b8a8:	2b21      	cmp	r3, #33	; 0x21
 800b8aa:	d108      	bne.n	800b8be <UART_DMAError+0x46>
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d005      	beq.n	800b8be <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800b8b2:	68bb      	ldr	r3, [r7, #8]
 800b8b4:	2200      	movs	r2, #0
 800b8b6:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800b8b8:	68b8      	ldr	r0, [r7, #8]
 800b8ba:	f000 f92f 	bl	800bb1c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b8be:	68bb      	ldr	r3, [r7, #8]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	695b      	ldr	r3, [r3, #20]
 800b8c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	bf14      	ite	ne
 800b8cc:	2301      	movne	r3, #1
 800b8ce:	2300      	moveq	r3, #0
 800b8d0:	b2db      	uxtb	r3, r3
 800b8d2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800b8d4:	68bb      	ldr	r3, [r7, #8]
 800b8d6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b8da:	b2db      	uxtb	r3, r3
 800b8dc:	2b22      	cmp	r3, #34	; 0x22
 800b8de:	d108      	bne.n	800b8f2 <UART_DMAError+0x7a>
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d005      	beq.n	800b8f2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800b8e6:	68bb      	ldr	r3, [r7, #8]
 800b8e8:	2200      	movs	r2, #0
 800b8ea:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800b8ec:	68b8      	ldr	r0, [r7, #8]
 800b8ee:	f000 f93c 	bl	800bb6a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b8f2:	68bb      	ldr	r3, [r7, #8]
 800b8f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b8f6:	f043 0210 	orr.w	r2, r3, #16
 800b8fa:	68bb      	ldr	r3, [r7, #8]
 800b8fc:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b8fe:	68b8      	ldr	r0, [r7, #8]
 800b900:	f7ff fefd 	bl	800b6fe <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b904:	bf00      	nop
 800b906:	3710      	adds	r7, #16
 800b908:	46bd      	mov	sp, r7
 800b90a:	bd80      	pop	{r7, pc}

0800b90c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800b90c:	b580      	push	{r7, lr}
 800b90e:	b090      	sub	sp, #64	; 0x40
 800b910:	af00      	add	r7, sp, #0
 800b912:	60f8      	str	r0, [r7, #12]
 800b914:	60b9      	str	r1, [r7, #8]
 800b916:	603b      	str	r3, [r7, #0]
 800b918:	4613      	mov	r3, r2
 800b91a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b91c:	e050      	b.n	800b9c0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b91e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b920:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b924:	d04c      	beq.n	800b9c0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800b926:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d007      	beq.n	800b93c <UART_WaitOnFlagUntilTimeout+0x30>
 800b92c:	f7fc f9e4 	bl	8007cf8 <HAL_GetTick>
 800b930:	4602      	mov	r2, r0
 800b932:	683b      	ldr	r3, [r7, #0]
 800b934:	1ad3      	subs	r3, r2, r3
 800b936:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b938:	429a      	cmp	r2, r3
 800b93a:	d241      	bcs.n	800b9c0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	330c      	adds	r3, #12
 800b942:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b946:	e853 3f00 	ldrex	r3, [r3]
 800b94a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b94c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b94e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b952:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	330c      	adds	r3, #12
 800b95a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b95c:	637a      	str	r2, [r7, #52]	; 0x34
 800b95e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b960:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b962:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b964:	e841 2300 	strex	r3, r2, [r1]
 800b968:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b96a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d1e5      	bne.n	800b93c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	3314      	adds	r3, #20
 800b976:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b978:	697b      	ldr	r3, [r7, #20]
 800b97a:	e853 3f00 	ldrex	r3, [r3]
 800b97e:	613b      	str	r3, [r7, #16]
   return(result);
 800b980:	693b      	ldr	r3, [r7, #16]
 800b982:	f023 0301 	bic.w	r3, r3, #1
 800b986:	63bb      	str	r3, [r7, #56]	; 0x38
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	3314      	adds	r3, #20
 800b98e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b990:	623a      	str	r2, [r7, #32]
 800b992:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b994:	69f9      	ldr	r1, [r7, #28]
 800b996:	6a3a      	ldr	r2, [r7, #32]
 800b998:	e841 2300 	strex	r3, r2, [r1]
 800b99c:	61bb      	str	r3, [r7, #24]
   return(result);
 800b99e:	69bb      	ldr	r3, [r7, #24]
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d1e5      	bne.n	800b970 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	2220      	movs	r2, #32
 800b9a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	2220      	movs	r2, #32
 800b9b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	2200      	movs	r2, #0
 800b9b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800b9bc:	2303      	movs	r3, #3
 800b9be:	e00f      	b.n	800b9e0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	681a      	ldr	r2, [r3, #0]
 800b9c6:	68bb      	ldr	r3, [r7, #8]
 800b9c8:	4013      	ands	r3, r2
 800b9ca:	68ba      	ldr	r2, [r7, #8]
 800b9cc:	429a      	cmp	r2, r3
 800b9ce:	bf0c      	ite	eq
 800b9d0:	2301      	moveq	r3, #1
 800b9d2:	2300      	movne	r3, #0
 800b9d4:	b2db      	uxtb	r3, r3
 800b9d6:	461a      	mov	r2, r3
 800b9d8:	79fb      	ldrb	r3, [r7, #7]
 800b9da:	429a      	cmp	r2, r3
 800b9dc:	d09f      	beq.n	800b91e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b9de:	2300      	movs	r3, #0
}
 800b9e0:	4618      	mov	r0, r3
 800b9e2:	3740      	adds	r7, #64	; 0x40
 800b9e4:	46bd      	mov	sp, r7
 800b9e6:	bd80      	pop	{r7, pc}

0800b9e8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b9e8:	b580      	push	{r7, lr}
 800b9ea:	b098      	sub	sp, #96	; 0x60
 800b9ec:	af00      	add	r7, sp, #0
 800b9ee:	60f8      	str	r0, [r7, #12]
 800b9f0:	60b9      	str	r1, [r7, #8]
 800b9f2:	4613      	mov	r3, r2
 800b9f4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800b9f6:	68ba      	ldr	r2, [r7, #8]
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	88fa      	ldrh	r2, [r7, #6]
 800ba00:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	2200      	movs	r2, #0
 800ba06:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	2222      	movs	r2, #34	; 0x22
 800ba0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba14:	4a3e      	ldr	r2, [pc, #248]	; (800bb10 <UART_Start_Receive_DMA+0x128>)
 800ba16:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba1c:	4a3d      	ldr	r2, [pc, #244]	; (800bb14 <UART_Start_Receive_DMA+0x12c>)
 800ba1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba24:	4a3c      	ldr	r2, [pc, #240]	; (800bb18 <UART_Start_Receive_DMA+0x130>)
 800ba26:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba2c:	2200      	movs	r2, #0
 800ba2e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800ba30:	f107 0308 	add.w	r3, r7, #8
 800ba34:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	3304      	adds	r3, #4
 800ba40:	4619      	mov	r1, r3
 800ba42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ba44:	681a      	ldr	r2, [r3, #0]
 800ba46:	88fb      	ldrh	r3, [r7, #6]
 800ba48:	f7fc feea 	bl	8008820 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800ba4c:	2300      	movs	r3, #0
 800ba4e:	613b      	str	r3, [r7, #16]
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	613b      	str	r3, [r7, #16]
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	685b      	ldr	r3, [r3, #4]
 800ba5e:	613b      	str	r3, [r7, #16]
 800ba60:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	691b      	ldr	r3, [r3, #16]
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d019      	beq.n	800ba9e <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	330c      	adds	r3, #12
 800ba70:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ba74:	e853 3f00 	ldrex	r3, [r3]
 800ba78:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ba7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ba80:	65bb      	str	r3, [r7, #88]	; 0x58
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	330c      	adds	r3, #12
 800ba88:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ba8a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800ba8c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba8e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800ba90:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ba92:	e841 2300 	strex	r3, r2, [r1]
 800ba96:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800ba98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d1e5      	bne.n	800ba6a <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	3314      	adds	r3, #20
 800baa4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800baa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baa8:	e853 3f00 	ldrex	r3, [r3]
 800baac:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800baae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bab0:	f043 0301 	orr.w	r3, r3, #1
 800bab4:	657b      	str	r3, [r7, #84]	; 0x54
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	3314      	adds	r3, #20
 800babc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800babe:	63ba      	str	r2, [r7, #56]	; 0x38
 800bac0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bac2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800bac4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bac6:	e841 2300 	strex	r3, r2, [r1]
 800baca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bacc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d1e5      	bne.n	800ba9e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	3314      	adds	r3, #20
 800bad8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bada:	69bb      	ldr	r3, [r7, #24]
 800badc:	e853 3f00 	ldrex	r3, [r3]
 800bae0:	617b      	str	r3, [r7, #20]
   return(result);
 800bae2:	697b      	ldr	r3, [r7, #20]
 800bae4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bae8:	653b      	str	r3, [r7, #80]	; 0x50
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	3314      	adds	r3, #20
 800baf0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800baf2:	627a      	str	r2, [r7, #36]	; 0x24
 800baf4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800baf6:	6a39      	ldr	r1, [r7, #32]
 800baf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bafa:	e841 2300 	strex	r3, r2, [r1]
 800bafe:	61fb      	str	r3, [r7, #28]
   return(result);
 800bb00:	69fb      	ldr	r3, [r7, #28]
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d1e5      	bne.n	800bad2 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800bb06:	2300      	movs	r3, #0
}
 800bb08:	4618      	mov	r0, r3
 800bb0a:	3760      	adds	r7, #96	; 0x60
 800bb0c:	46bd      	mov	sp, r7
 800bb0e:	bd80      	pop	{r7, pc}
 800bb10:	0800b711 	.word	0x0800b711
 800bb14:	0800b83d 	.word	0x0800b83d
 800bb18:	0800b879 	.word	0x0800b879

0800bb1c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800bb1c:	b480      	push	{r7}
 800bb1e:	b089      	sub	sp, #36	; 0x24
 800bb20:	af00      	add	r7, sp, #0
 800bb22:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	330c      	adds	r3, #12
 800bb2a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	e853 3f00 	ldrex	r3, [r3]
 800bb32:	60bb      	str	r3, [r7, #8]
   return(result);
 800bb34:	68bb      	ldr	r3, [r7, #8]
 800bb36:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800bb3a:	61fb      	str	r3, [r7, #28]
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	330c      	adds	r3, #12
 800bb42:	69fa      	ldr	r2, [r7, #28]
 800bb44:	61ba      	str	r2, [r7, #24]
 800bb46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb48:	6979      	ldr	r1, [r7, #20]
 800bb4a:	69ba      	ldr	r2, [r7, #24]
 800bb4c:	e841 2300 	strex	r3, r2, [r1]
 800bb50:	613b      	str	r3, [r7, #16]
   return(result);
 800bb52:	693b      	ldr	r3, [r7, #16]
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d1e5      	bne.n	800bb24 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	2220      	movs	r2, #32
 800bb5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 800bb60:	bf00      	nop
 800bb62:	3724      	adds	r7, #36	; 0x24
 800bb64:	46bd      	mov	sp, r7
 800bb66:	bc80      	pop	{r7}
 800bb68:	4770      	bx	lr

0800bb6a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bb6a:	b480      	push	{r7}
 800bb6c:	b095      	sub	sp, #84	; 0x54
 800bb6e:	af00      	add	r7, sp, #0
 800bb70:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	330c      	adds	r3, #12
 800bb78:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb7c:	e853 3f00 	ldrex	r3, [r3]
 800bb80:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bb82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb84:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bb88:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	330c      	adds	r3, #12
 800bb90:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bb92:	643a      	str	r2, [r7, #64]	; 0x40
 800bb94:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb96:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bb98:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bb9a:	e841 2300 	strex	r3, r2, [r1]
 800bb9e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d1e5      	bne.n	800bb72 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	3314      	adds	r3, #20
 800bbac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbae:	6a3b      	ldr	r3, [r7, #32]
 800bbb0:	e853 3f00 	ldrex	r3, [r3]
 800bbb4:	61fb      	str	r3, [r7, #28]
   return(result);
 800bbb6:	69fb      	ldr	r3, [r7, #28]
 800bbb8:	f023 0301 	bic.w	r3, r3, #1
 800bbbc:	64bb      	str	r3, [r7, #72]	; 0x48
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	3314      	adds	r3, #20
 800bbc4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bbc6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bbc8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bbcc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bbce:	e841 2300 	strex	r3, r2, [r1]
 800bbd2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bbd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d1e5      	bne.n	800bba6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbde:	2b01      	cmp	r3, #1
 800bbe0:	d119      	bne.n	800bc16 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	330c      	adds	r3, #12
 800bbe8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	e853 3f00 	ldrex	r3, [r3]
 800bbf0:	60bb      	str	r3, [r7, #8]
   return(result);
 800bbf2:	68bb      	ldr	r3, [r7, #8]
 800bbf4:	f023 0310 	bic.w	r3, r3, #16
 800bbf8:	647b      	str	r3, [r7, #68]	; 0x44
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	330c      	adds	r3, #12
 800bc00:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bc02:	61ba      	str	r2, [r7, #24]
 800bc04:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc06:	6979      	ldr	r1, [r7, #20]
 800bc08:	69ba      	ldr	r2, [r7, #24]
 800bc0a:	e841 2300 	strex	r3, r2, [r1]
 800bc0e:	613b      	str	r3, [r7, #16]
   return(result);
 800bc10:	693b      	ldr	r3, [r7, #16]
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d1e5      	bne.n	800bbe2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	2220      	movs	r2, #32
 800bc1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	2200      	movs	r2, #0
 800bc22:	631a      	str	r2, [r3, #48]	; 0x30
}
 800bc24:	bf00      	nop
 800bc26:	3754      	adds	r7, #84	; 0x54
 800bc28:	46bd      	mov	sp, r7
 800bc2a:	bc80      	pop	{r7}
 800bc2c:	4770      	bx	lr

0800bc2e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bc2e:	b580      	push	{r7, lr}
 800bc30:	b084      	sub	sp, #16
 800bc32:	af00      	add	r7, sp, #0
 800bc34:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc3a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	2200      	movs	r2, #0
 800bc40:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	2200      	movs	r2, #0
 800bc46:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bc48:	68f8      	ldr	r0, [r7, #12]
 800bc4a:	f7ff fd58 	bl	800b6fe <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bc4e:	bf00      	nop
 800bc50:	3710      	adds	r7, #16
 800bc52:	46bd      	mov	sp, r7
 800bc54:	bd80      	pop	{r7, pc}

0800bc56 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800bc56:	b480      	push	{r7}
 800bc58:	b085      	sub	sp, #20
 800bc5a:	af00      	add	r7, sp, #0
 800bc5c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bc64:	b2db      	uxtb	r3, r3
 800bc66:	2b21      	cmp	r3, #33	; 0x21
 800bc68:	d13e      	bne.n	800bce8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	689b      	ldr	r3, [r3, #8]
 800bc6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bc72:	d114      	bne.n	800bc9e <UART_Transmit_IT+0x48>
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	691b      	ldr	r3, [r3, #16]
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d110      	bne.n	800bc9e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	6a1b      	ldr	r3, [r3, #32]
 800bc80:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	881b      	ldrh	r3, [r3, #0]
 800bc86:	461a      	mov	r2, r3
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bc90:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	6a1b      	ldr	r3, [r3, #32]
 800bc96:	1c9a      	adds	r2, r3, #2
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	621a      	str	r2, [r3, #32]
 800bc9c:	e008      	b.n	800bcb0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	6a1b      	ldr	r3, [r3, #32]
 800bca2:	1c59      	adds	r1, r3, #1
 800bca4:	687a      	ldr	r2, [r7, #4]
 800bca6:	6211      	str	r1, [r2, #32]
 800bca8:	781a      	ldrb	r2, [r3, #0]
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800bcb4:	b29b      	uxth	r3, r3
 800bcb6:	3b01      	subs	r3, #1
 800bcb8:	b29b      	uxth	r3, r3
 800bcba:	687a      	ldr	r2, [r7, #4]
 800bcbc:	4619      	mov	r1, r3
 800bcbe:	84d1      	strh	r1, [r2, #38]	; 0x26
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d10f      	bne.n	800bce4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	68da      	ldr	r2, [r3, #12]
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bcd2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	68da      	ldr	r2, [r3, #12]
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bce2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800bce4:	2300      	movs	r3, #0
 800bce6:	e000      	b.n	800bcea <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800bce8:	2302      	movs	r3, #2
  }
}
 800bcea:	4618      	mov	r0, r3
 800bcec:	3714      	adds	r7, #20
 800bcee:	46bd      	mov	sp, r7
 800bcf0:	bc80      	pop	{r7}
 800bcf2:	4770      	bx	lr

0800bcf4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bcf4:	b580      	push	{r7, lr}
 800bcf6:	b082      	sub	sp, #8
 800bcf8:	af00      	add	r7, sp, #0
 800bcfa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	68da      	ldr	r2, [r3, #12]
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bd0a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	2220      	movs	r2, #32
 800bd10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bd14:	6878      	ldr	r0, [r7, #4]
 800bd16:	f7ff fcd7 	bl	800b6c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800bd1a:	2300      	movs	r3, #0
}
 800bd1c:	4618      	mov	r0, r3
 800bd1e:	3708      	adds	r7, #8
 800bd20:	46bd      	mov	sp, r7
 800bd22:	bd80      	pop	{r7, pc}

0800bd24 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800bd24:	b580      	push	{r7, lr}
 800bd26:	b08c      	sub	sp, #48	; 0x30
 800bd28:	af00      	add	r7, sp, #0
 800bd2a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bd32:	b2db      	uxtb	r3, r3
 800bd34:	2b22      	cmp	r3, #34	; 0x22
 800bd36:	f040 80ae 	bne.w	800be96 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	689b      	ldr	r3, [r3, #8]
 800bd3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bd42:	d117      	bne.n	800bd74 <UART_Receive_IT+0x50>
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	691b      	ldr	r3, [r3, #16]
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d113      	bne.n	800bd74 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800bd4c:	2300      	movs	r3, #0
 800bd4e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd54:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	685b      	ldr	r3, [r3, #4]
 800bd5c:	b29b      	uxth	r3, r3
 800bd5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd62:	b29a      	uxth	r2, r3
 800bd64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd66:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd6c:	1c9a      	adds	r2, r3, #2
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	629a      	str	r2, [r3, #40]	; 0x28
 800bd72:	e026      	b.n	800bdc2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd78:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800bd7a:	2300      	movs	r3, #0
 800bd7c:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	689b      	ldr	r3, [r3, #8]
 800bd82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bd86:	d007      	beq.n	800bd98 <UART_Receive_IT+0x74>
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	689b      	ldr	r3, [r3, #8]
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d10a      	bne.n	800bda6 <UART_Receive_IT+0x82>
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	691b      	ldr	r3, [r3, #16]
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d106      	bne.n	800bda6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	685b      	ldr	r3, [r3, #4]
 800bd9e:	b2da      	uxtb	r2, r3
 800bda0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bda2:	701a      	strb	r2, [r3, #0]
 800bda4:	e008      	b.n	800bdb8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	685b      	ldr	r3, [r3, #4]
 800bdac:	b2db      	uxtb	r3, r3
 800bdae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bdb2:	b2da      	uxtb	r2, r3
 800bdb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdb6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bdbc:	1c5a      	adds	r2, r3, #1
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bdc6:	b29b      	uxth	r3, r3
 800bdc8:	3b01      	subs	r3, #1
 800bdca:	b29b      	uxth	r3, r3
 800bdcc:	687a      	ldr	r2, [r7, #4]
 800bdce:	4619      	mov	r1, r3
 800bdd0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d15d      	bne.n	800be92 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	68da      	ldr	r2, [r3, #12]
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	f022 0220 	bic.w	r2, r2, #32
 800bde4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	68da      	ldr	r2, [r3, #12]
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bdf4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	695a      	ldr	r2, [r3, #20]
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	f022 0201 	bic.w	r2, r2, #1
 800be04:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	2220      	movs	r2, #32
 800be0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	2200      	movs	r2, #0
 800be12:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be18:	2b01      	cmp	r3, #1
 800be1a:	d135      	bne.n	800be88 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	2200      	movs	r2, #0
 800be20:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	330c      	adds	r3, #12
 800be28:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be2a:	697b      	ldr	r3, [r7, #20]
 800be2c:	e853 3f00 	ldrex	r3, [r3]
 800be30:	613b      	str	r3, [r7, #16]
   return(result);
 800be32:	693b      	ldr	r3, [r7, #16]
 800be34:	f023 0310 	bic.w	r3, r3, #16
 800be38:	627b      	str	r3, [r7, #36]	; 0x24
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	330c      	adds	r3, #12
 800be40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be42:	623a      	str	r2, [r7, #32]
 800be44:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be46:	69f9      	ldr	r1, [r7, #28]
 800be48:	6a3a      	ldr	r2, [r7, #32]
 800be4a:	e841 2300 	strex	r3, r2, [r1]
 800be4e:	61bb      	str	r3, [r7, #24]
   return(result);
 800be50:	69bb      	ldr	r3, [r7, #24]
 800be52:	2b00      	cmp	r3, #0
 800be54:	d1e5      	bne.n	800be22 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	f003 0310 	and.w	r3, r3, #16
 800be60:	2b10      	cmp	r3, #16
 800be62:	d10a      	bne.n	800be7a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800be64:	2300      	movs	r3, #0
 800be66:	60fb      	str	r3, [r7, #12]
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	60fb      	str	r3, [r7, #12]
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	685b      	ldr	r3, [r3, #4]
 800be76:	60fb      	str	r3, [r7, #12]
 800be78:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800be7e:	4619      	mov	r1, r3
 800be80:	6878      	ldr	r0, [r7, #4]
 800be82:	f7fa f89d 	bl	8005fc0 <HAL_UARTEx_RxEventCallback>
 800be86:	e002      	b.n	800be8e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800be88:	6878      	ldr	r0, [r7, #4]
 800be8a:	f7ff fc26 	bl	800b6da <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800be8e:	2300      	movs	r3, #0
 800be90:	e002      	b.n	800be98 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800be92:	2300      	movs	r3, #0
 800be94:	e000      	b.n	800be98 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800be96:	2302      	movs	r3, #2
  }
}
 800be98:	4618      	mov	r0, r3
 800be9a:	3730      	adds	r7, #48	; 0x30
 800be9c:	46bd      	mov	sp, r7
 800be9e:	bd80      	pop	{r7, pc}

0800bea0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bea0:	b580      	push	{r7, lr}
 800bea2:	b084      	sub	sp, #16
 800bea4:	af00      	add	r7, sp, #0
 800bea6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	691b      	ldr	r3, [r3, #16]
 800beae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	68da      	ldr	r2, [r3, #12]
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	430a      	orrs	r2, r1
 800bebc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	689a      	ldr	r2, [r3, #8]
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	691b      	ldr	r3, [r3, #16]
 800bec6:	431a      	orrs	r2, r3
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	695b      	ldr	r3, [r3, #20]
 800becc:	4313      	orrs	r3, r2
 800bece:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	68db      	ldr	r3, [r3, #12]
 800bed6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800beda:	f023 030c 	bic.w	r3, r3, #12
 800bede:	687a      	ldr	r2, [r7, #4]
 800bee0:	6812      	ldr	r2, [r2, #0]
 800bee2:	68b9      	ldr	r1, [r7, #8]
 800bee4:	430b      	orrs	r3, r1
 800bee6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	695b      	ldr	r3, [r3, #20]
 800beee:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	699a      	ldr	r2, [r3, #24]
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	430a      	orrs	r2, r1
 800befc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	4a2c      	ldr	r2, [pc, #176]	; (800bfb4 <UART_SetConfig+0x114>)
 800bf04:	4293      	cmp	r3, r2
 800bf06:	d103      	bne.n	800bf10 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800bf08:	f7fe fcc8 	bl	800a89c <HAL_RCC_GetPCLK2Freq>
 800bf0c:	60f8      	str	r0, [r7, #12]
 800bf0e:	e002      	b.n	800bf16 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800bf10:	f7fe fcb0 	bl	800a874 <HAL_RCC_GetPCLK1Freq>
 800bf14:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800bf16:	68fa      	ldr	r2, [r7, #12]
 800bf18:	4613      	mov	r3, r2
 800bf1a:	009b      	lsls	r3, r3, #2
 800bf1c:	4413      	add	r3, r2
 800bf1e:	009a      	lsls	r2, r3, #2
 800bf20:	441a      	add	r2, r3
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	685b      	ldr	r3, [r3, #4]
 800bf26:	009b      	lsls	r3, r3, #2
 800bf28:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf2c:	4a22      	ldr	r2, [pc, #136]	; (800bfb8 <UART_SetConfig+0x118>)
 800bf2e:	fba2 2303 	umull	r2, r3, r2, r3
 800bf32:	095b      	lsrs	r3, r3, #5
 800bf34:	0119      	lsls	r1, r3, #4
 800bf36:	68fa      	ldr	r2, [r7, #12]
 800bf38:	4613      	mov	r3, r2
 800bf3a:	009b      	lsls	r3, r3, #2
 800bf3c:	4413      	add	r3, r2
 800bf3e:	009a      	lsls	r2, r3, #2
 800bf40:	441a      	add	r2, r3
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	685b      	ldr	r3, [r3, #4]
 800bf46:	009b      	lsls	r3, r3, #2
 800bf48:	fbb2 f2f3 	udiv	r2, r2, r3
 800bf4c:	4b1a      	ldr	r3, [pc, #104]	; (800bfb8 <UART_SetConfig+0x118>)
 800bf4e:	fba3 0302 	umull	r0, r3, r3, r2
 800bf52:	095b      	lsrs	r3, r3, #5
 800bf54:	2064      	movs	r0, #100	; 0x64
 800bf56:	fb00 f303 	mul.w	r3, r0, r3
 800bf5a:	1ad3      	subs	r3, r2, r3
 800bf5c:	011b      	lsls	r3, r3, #4
 800bf5e:	3332      	adds	r3, #50	; 0x32
 800bf60:	4a15      	ldr	r2, [pc, #84]	; (800bfb8 <UART_SetConfig+0x118>)
 800bf62:	fba2 2303 	umull	r2, r3, r2, r3
 800bf66:	095b      	lsrs	r3, r3, #5
 800bf68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bf6c:	4419      	add	r1, r3
 800bf6e:	68fa      	ldr	r2, [r7, #12]
 800bf70:	4613      	mov	r3, r2
 800bf72:	009b      	lsls	r3, r3, #2
 800bf74:	4413      	add	r3, r2
 800bf76:	009a      	lsls	r2, r3, #2
 800bf78:	441a      	add	r2, r3
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	685b      	ldr	r3, [r3, #4]
 800bf7e:	009b      	lsls	r3, r3, #2
 800bf80:	fbb2 f2f3 	udiv	r2, r2, r3
 800bf84:	4b0c      	ldr	r3, [pc, #48]	; (800bfb8 <UART_SetConfig+0x118>)
 800bf86:	fba3 0302 	umull	r0, r3, r3, r2
 800bf8a:	095b      	lsrs	r3, r3, #5
 800bf8c:	2064      	movs	r0, #100	; 0x64
 800bf8e:	fb00 f303 	mul.w	r3, r0, r3
 800bf92:	1ad3      	subs	r3, r2, r3
 800bf94:	011b      	lsls	r3, r3, #4
 800bf96:	3332      	adds	r3, #50	; 0x32
 800bf98:	4a07      	ldr	r2, [pc, #28]	; (800bfb8 <UART_SetConfig+0x118>)
 800bf9a:	fba2 2303 	umull	r2, r3, r2, r3
 800bf9e:	095b      	lsrs	r3, r3, #5
 800bfa0:	f003 020f 	and.w	r2, r3, #15
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	440a      	add	r2, r1
 800bfaa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800bfac:	bf00      	nop
 800bfae:	3710      	adds	r7, #16
 800bfb0:	46bd      	mov	sp, r7
 800bfb2:	bd80      	pop	{r7, pc}
 800bfb4:	40013800 	.word	0x40013800
 800bfb8:	51eb851f 	.word	0x51eb851f

0800bfbc <atoi>:
 800bfbc:	220a      	movs	r2, #10
 800bfbe:	2100      	movs	r1, #0
 800bfc0:	f000 bdd0 	b.w	800cb64 <strtol>

0800bfc4 <__errno>:
 800bfc4:	4b01      	ldr	r3, [pc, #4]	; (800bfcc <__errno+0x8>)
 800bfc6:	6818      	ldr	r0, [r3, #0]
 800bfc8:	4770      	bx	lr
 800bfca:	bf00      	nop
 800bfcc:	200004e0 	.word	0x200004e0

0800bfd0 <__libc_init_array>:
 800bfd0:	b570      	push	{r4, r5, r6, lr}
 800bfd2:	2600      	movs	r6, #0
 800bfd4:	4d0c      	ldr	r5, [pc, #48]	; (800c008 <__libc_init_array+0x38>)
 800bfd6:	4c0d      	ldr	r4, [pc, #52]	; (800c00c <__libc_init_array+0x3c>)
 800bfd8:	1b64      	subs	r4, r4, r5
 800bfda:	10a4      	asrs	r4, r4, #2
 800bfdc:	42a6      	cmp	r6, r4
 800bfde:	d109      	bne.n	800bff4 <__libc_init_array+0x24>
 800bfe0:	f002 fe30 	bl	800ec44 <_init>
 800bfe4:	2600      	movs	r6, #0
 800bfe6:	4d0a      	ldr	r5, [pc, #40]	; (800c010 <__libc_init_array+0x40>)
 800bfe8:	4c0a      	ldr	r4, [pc, #40]	; (800c014 <__libc_init_array+0x44>)
 800bfea:	1b64      	subs	r4, r4, r5
 800bfec:	10a4      	asrs	r4, r4, #2
 800bfee:	42a6      	cmp	r6, r4
 800bff0:	d105      	bne.n	800bffe <__libc_init_array+0x2e>
 800bff2:	bd70      	pop	{r4, r5, r6, pc}
 800bff4:	f855 3b04 	ldr.w	r3, [r5], #4
 800bff8:	4798      	blx	r3
 800bffa:	3601      	adds	r6, #1
 800bffc:	e7ee      	b.n	800bfdc <__libc_init_array+0xc>
 800bffe:	f855 3b04 	ldr.w	r3, [r5], #4
 800c002:	4798      	blx	r3
 800c004:	3601      	adds	r6, #1
 800c006:	e7f2      	b.n	800bfee <__libc_init_array+0x1e>
 800c008:	0800f990 	.word	0x0800f990
 800c00c:	0800f990 	.word	0x0800f990
 800c010:	0800f990 	.word	0x0800f990
 800c014:	0800f994 	.word	0x0800f994

0800c018 <localtime>:
 800c018:	b538      	push	{r3, r4, r5, lr}
 800c01a:	4b0b      	ldr	r3, [pc, #44]	; (800c048 <localtime+0x30>)
 800c01c:	4604      	mov	r4, r0
 800c01e:	681d      	ldr	r5, [r3, #0]
 800c020:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800c022:	b953      	cbnz	r3, 800c03a <localtime+0x22>
 800c024:	2024      	movs	r0, #36	; 0x24
 800c026:	f000 f907 	bl	800c238 <malloc>
 800c02a:	4602      	mov	r2, r0
 800c02c:	63e8      	str	r0, [r5, #60]	; 0x3c
 800c02e:	b920      	cbnz	r0, 800c03a <localtime+0x22>
 800c030:	2132      	movs	r1, #50	; 0x32
 800c032:	4b06      	ldr	r3, [pc, #24]	; (800c04c <localtime+0x34>)
 800c034:	4806      	ldr	r0, [pc, #24]	; (800c050 <localtime+0x38>)
 800c036:	f000 ffdd 	bl	800cff4 <__assert_func>
 800c03a:	4620      	mov	r0, r4
 800c03c:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 800c03e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c042:	f000 b807 	b.w	800c054 <localtime_r>
 800c046:	bf00      	nop
 800c048:	200004e0 	.word	0x200004e0
 800c04c:	0800f5cc 	.word	0x0800f5cc
 800c050:	0800f5e3 	.word	0x0800f5e3

0800c054 <localtime_r>:
 800c054:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c058:	460c      	mov	r4, r1
 800c05a:	4680      	mov	r8, r0
 800c05c:	f001 f852 	bl	800d104 <__gettzinfo>
 800c060:	4621      	mov	r1, r4
 800c062:	4605      	mov	r5, r0
 800c064:	4640      	mov	r0, r8
 800c066:	f001 f851 	bl	800d10c <gmtime_r>
 800c06a:	6943      	ldr	r3, [r0, #20]
 800c06c:	4604      	mov	r4, r0
 800c06e:	0799      	lsls	r1, r3, #30
 800c070:	f203 776c 	addw	r7, r3, #1900	; 0x76c
 800c074:	d105      	bne.n	800c082 <localtime_r+0x2e>
 800c076:	2264      	movs	r2, #100	; 0x64
 800c078:	fb97 f3f2 	sdiv	r3, r7, r2
 800c07c:	fb02 7313 	mls	r3, r2, r3, r7
 800c080:	bb73      	cbnz	r3, 800c0e0 <localtime_r+0x8c>
 800c082:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800c086:	fb97 f6f3 	sdiv	r6, r7, r3
 800c08a:	fb03 7616 	mls	r6, r3, r6, r7
 800c08e:	fab6 f386 	clz	r3, r6
 800c092:	095b      	lsrs	r3, r3, #5
 800c094:	2230      	movs	r2, #48	; 0x30
 800c096:	4e66      	ldr	r6, [pc, #408]	; (800c230 <localtime_r+0x1dc>)
 800c098:	fb02 6603 	mla	r6, r2, r3, r6
 800c09c:	f000 fe16 	bl	800cccc <__tz_lock>
 800c0a0:	f000 fe20 	bl	800cce4 <_tzset_unlocked>
 800c0a4:	4b63      	ldr	r3, [pc, #396]	; (800c234 <localtime_r+0x1e0>)
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	b34b      	cbz	r3, 800c0fe <localtime_r+0xaa>
 800c0aa:	686b      	ldr	r3, [r5, #4]
 800c0ac:	42bb      	cmp	r3, r7
 800c0ae:	d119      	bne.n	800c0e4 <localtime_r+0x90>
 800c0b0:	e9d8 2300 	ldrd	r2, r3, [r8]
 800c0b4:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 800c0b8:	682f      	ldr	r7, [r5, #0]
 800c0ba:	b9df      	cbnz	r7, 800c0f4 <localtime_r+0xa0>
 800c0bc:	4282      	cmp	r2, r0
 800c0be:	eb73 0101 	sbcs.w	r1, r3, r1
 800c0c2:	da23      	bge.n	800c10c <localtime_r+0xb8>
 800c0c4:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
 800c0c8:	4282      	cmp	r2, r0
 800c0ca:	eb73 0701 	sbcs.w	r7, r3, r1
 800c0ce:	bfb4      	ite	lt
 800c0d0:	2701      	movlt	r7, #1
 800c0d2:	2700      	movge	r7, #0
 800c0d4:	4282      	cmp	r2, r0
 800c0d6:	418b      	sbcs	r3, r1
 800c0d8:	6227      	str	r7, [r4, #32]
 800c0da:	db19      	blt.n	800c110 <localtime_r+0xbc>
 800c0dc:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800c0de:	e018      	b.n	800c112 <localtime_r+0xbe>
 800c0e0:	2301      	movs	r3, #1
 800c0e2:	e7d7      	b.n	800c094 <localtime_r+0x40>
 800c0e4:	4638      	mov	r0, r7
 800c0e6:	f000 fd47 	bl	800cb78 <__tzcalc_limits>
 800c0ea:	2800      	cmp	r0, #0
 800c0ec:	d1e0      	bne.n	800c0b0 <localtime_r+0x5c>
 800c0ee:	f04f 33ff 	mov.w	r3, #4294967295
 800c0f2:	e004      	b.n	800c0fe <localtime_r+0xaa>
 800c0f4:	4282      	cmp	r2, r0
 800c0f6:	eb73 0101 	sbcs.w	r1, r3, r1
 800c0fa:	da02      	bge.n	800c102 <localtime_r+0xae>
 800c0fc:	2300      	movs	r3, #0
 800c0fe:	6223      	str	r3, [r4, #32]
 800c100:	e7ec      	b.n	800c0dc <localtime_r+0x88>
 800c102:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
 800c106:	4282      	cmp	r2, r0
 800c108:	418b      	sbcs	r3, r1
 800c10a:	daf7      	bge.n	800c0fc <localtime_r+0xa8>
 800c10c:	2301      	movs	r3, #1
 800c10e:	6223      	str	r3, [r4, #32]
 800c110:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800c112:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 800c116:	fb93 f5f2 	sdiv	r5, r3, r2
 800c11a:	203c      	movs	r0, #60	; 0x3c
 800c11c:	fb02 3315 	mls	r3, r2, r5, r3
 800c120:	fb93 f2f0 	sdiv	r2, r3, r0
 800c124:	fb00 3012 	mls	r0, r0, r2, r3
 800c128:	6861      	ldr	r1, [r4, #4]
 800c12a:	6823      	ldr	r3, [r4, #0]
 800c12c:	1a89      	subs	r1, r1, r2
 800c12e:	68a2      	ldr	r2, [r4, #8]
 800c130:	1a1b      	subs	r3, r3, r0
 800c132:	1b52      	subs	r2, r2, r5
 800c134:	2b3b      	cmp	r3, #59	; 0x3b
 800c136:	6023      	str	r3, [r4, #0]
 800c138:	6061      	str	r1, [r4, #4]
 800c13a:	60a2      	str	r2, [r4, #8]
 800c13c:	dd34      	ble.n	800c1a8 <localtime_r+0x154>
 800c13e:	3101      	adds	r1, #1
 800c140:	6061      	str	r1, [r4, #4]
 800c142:	3b3c      	subs	r3, #60	; 0x3c
 800c144:	6023      	str	r3, [r4, #0]
 800c146:	6863      	ldr	r3, [r4, #4]
 800c148:	2b3b      	cmp	r3, #59	; 0x3b
 800c14a:	dd33      	ble.n	800c1b4 <localtime_r+0x160>
 800c14c:	3201      	adds	r2, #1
 800c14e:	60a2      	str	r2, [r4, #8]
 800c150:	3b3c      	subs	r3, #60	; 0x3c
 800c152:	6063      	str	r3, [r4, #4]
 800c154:	68a3      	ldr	r3, [r4, #8]
 800c156:	2b17      	cmp	r3, #23
 800c158:	dd32      	ble.n	800c1c0 <localtime_r+0x16c>
 800c15a:	69e2      	ldr	r2, [r4, #28]
 800c15c:	3b18      	subs	r3, #24
 800c15e:	3201      	adds	r2, #1
 800c160:	61e2      	str	r2, [r4, #28]
 800c162:	69a2      	ldr	r2, [r4, #24]
 800c164:	60a3      	str	r3, [r4, #8]
 800c166:	3201      	adds	r2, #1
 800c168:	2a06      	cmp	r2, #6
 800c16a:	bfc8      	it	gt
 800c16c:	2200      	movgt	r2, #0
 800c16e:	61a2      	str	r2, [r4, #24]
 800c170:	68e2      	ldr	r2, [r4, #12]
 800c172:	6923      	ldr	r3, [r4, #16]
 800c174:	3201      	adds	r2, #1
 800c176:	60e2      	str	r2, [r4, #12]
 800c178:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 800c17c:	428a      	cmp	r2, r1
 800c17e:	dd0e      	ble.n	800c19e <localtime_r+0x14a>
 800c180:	2b0b      	cmp	r3, #11
 800c182:	eba2 0201 	sub.w	r2, r2, r1
 800c186:	60e2      	str	r2, [r4, #12]
 800c188:	f103 0201 	add.w	r2, r3, #1
 800c18c:	bf05      	ittet	eq
 800c18e:	2200      	moveq	r2, #0
 800c190:	6963      	ldreq	r3, [r4, #20]
 800c192:	6122      	strne	r2, [r4, #16]
 800c194:	3301      	addeq	r3, #1
 800c196:	bf02      	ittt	eq
 800c198:	6122      	streq	r2, [r4, #16]
 800c19a:	6163      	streq	r3, [r4, #20]
 800c19c:	61e2      	streq	r2, [r4, #28]
 800c19e:	f000 fd9b 	bl	800ccd8 <__tz_unlock>
 800c1a2:	4620      	mov	r0, r4
 800c1a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	dacc      	bge.n	800c146 <localtime_r+0xf2>
 800c1ac:	3901      	subs	r1, #1
 800c1ae:	6061      	str	r1, [r4, #4]
 800c1b0:	333c      	adds	r3, #60	; 0x3c
 800c1b2:	e7c7      	b.n	800c144 <localtime_r+0xf0>
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	dacd      	bge.n	800c154 <localtime_r+0x100>
 800c1b8:	3a01      	subs	r2, #1
 800c1ba:	60a2      	str	r2, [r4, #8]
 800c1bc:	333c      	adds	r3, #60	; 0x3c
 800c1be:	e7c8      	b.n	800c152 <localtime_r+0xfe>
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	daec      	bge.n	800c19e <localtime_r+0x14a>
 800c1c4:	69e2      	ldr	r2, [r4, #28]
 800c1c6:	3318      	adds	r3, #24
 800c1c8:	3a01      	subs	r2, #1
 800c1ca:	61e2      	str	r2, [r4, #28]
 800c1cc:	69a2      	ldr	r2, [r4, #24]
 800c1ce:	60a3      	str	r3, [r4, #8]
 800c1d0:	3a01      	subs	r2, #1
 800c1d2:	bf48      	it	mi
 800c1d4:	2206      	movmi	r2, #6
 800c1d6:	61a2      	str	r2, [r4, #24]
 800c1d8:	68e2      	ldr	r2, [r4, #12]
 800c1da:	3a01      	subs	r2, #1
 800c1dc:	60e2      	str	r2, [r4, #12]
 800c1de:	2a00      	cmp	r2, #0
 800c1e0:	d1dd      	bne.n	800c19e <localtime_r+0x14a>
 800c1e2:	6923      	ldr	r3, [r4, #16]
 800c1e4:	3b01      	subs	r3, #1
 800c1e6:	d405      	bmi.n	800c1f4 <localtime_r+0x1a0>
 800c1e8:	6123      	str	r3, [r4, #16]
 800c1ea:	6923      	ldr	r3, [r4, #16]
 800c1ec:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 800c1f0:	60e3      	str	r3, [r4, #12]
 800c1f2:	e7d4      	b.n	800c19e <localtime_r+0x14a>
 800c1f4:	230b      	movs	r3, #11
 800c1f6:	6123      	str	r3, [r4, #16]
 800c1f8:	6963      	ldr	r3, [r4, #20]
 800c1fa:	1e5a      	subs	r2, r3, #1
 800c1fc:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 800c200:	6162      	str	r2, [r4, #20]
 800c202:	079a      	lsls	r2, r3, #30
 800c204:	d105      	bne.n	800c212 <localtime_r+0x1be>
 800c206:	2164      	movs	r1, #100	; 0x64
 800c208:	fb93 f2f1 	sdiv	r2, r3, r1
 800c20c:	fb01 3212 	mls	r2, r1, r2, r3
 800c210:	b962      	cbnz	r2, 800c22c <localtime_r+0x1d8>
 800c212:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800c216:	fb93 f1f2 	sdiv	r1, r3, r2
 800c21a:	fb02 3311 	mls	r3, r2, r1, r3
 800c21e:	fab3 f383 	clz	r3, r3
 800c222:	095b      	lsrs	r3, r3, #5
 800c224:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 800c228:	61e3      	str	r3, [r4, #28]
 800c22a:	e7de      	b.n	800c1ea <localtime_r+0x196>
 800c22c:	2301      	movs	r3, #1
 800c22e:	e7f9      	b.n	800c224 <localtime_r+0x1d0>
 800c230:	0800f6a0 	.word	0x0800f6a0
 800c234:	20002c20 	.word	0x20002c20

0800c238 <malloc>:
 800c238:	4b02      	ldr	r3, [pc, #8]	; (800c244 <malloc+0xc>)
 800c23a:	4601      	mov	r1, r0
 800c23c:	6818      	ldr	r0, [r3, #0]
 800c23e:	f000 bb0b 	b.w	800c858 <_malloc_r>
 800c242:	bf00      	nop
 800c244:	200004e0 	.word	0x200004e0

0800c248 <free>:
 800c248:	4b02      	ldr	r3, [pc, #8]	; (800c254 <free+0xc>)
 800c24a:	4601      	mov	r1, r0
 800c24c:	6818      	ldr	r0, [r3, #0]
 800c24e:	f000 ba9b 	b.w	800c788 <_free_r>
 800c252:	bf00      	nop
 800c254:	200004e0 	.word	0x200004e0

0800c258 <memcmp>:
 800c258:	b510      	push	{r4, lr}
 800c25a:	3901      	subs	r1, #1
 800c25c:	4402      	add	r2, r0
 800c25e:	4290      	cmp	r0, r2
 800c260:	d101      	bne.n	800c266 <memcmp+0xe>
 800c262:	2000      	movs	r0, #0
 800c264:	e005      	b.n	800c272 <memcmp+0x1a>
 800c266:	7803      	ldrb	r3, [r0, #0]
 800c268:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c26c:	42a3      	cmp	r3, r4
 800c26e:	d001      	beq.n	800c274 <memcmp+0x1c>
 800c270:	1b18      	subs	r0, r3, r4
 800c272:	bd10      	pop	{r4, pc}
 800c274:	3001      	adds	r0, #1
 800c276:	e7f2      	b.n	800c25e <memcmp+0x6>

0800c278 <memcpy>:
 800c278:	440a      	add	r2, r1
 800c27a:	4291      	cmp	r1, r2
 800c27c:	f100 33ff 	add.w	r3, r0, #4294967295
 800c280:	d100      	bne.n	800c284 <memcpy+0xc>
 800c282:	4770      	bx	lr
 800c284:	b510      	push	{r4, lr}
 800c286:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c28a:	4291      	cmp	r1, r2
 800c28c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c290:	d1f9      	bne.n	800c286 <memcpy+0xe>
 800c292:	bd10      	pop	{r4, pc}

0800c294 <memset>:
 800c294:	4603      	mov	r3, r0
 800c296:	4402      	add	r2, r0
 800c298:	4293      	cmp	r3, r2
 800c29a:	d100      	bne.n	800c29e <memset+0xa>
 800c29c:	4770      	bx	lr
 800c29e:	f803 1b01 	strb.w	r1, [r3], #1
 800c2a2:	e7f9      	b.n	800c298 <memset+0x4>

0800c2a4 <validate_structure>:
 800c2a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c2a6:	6801      	ldr	r1, [r0, #0]
 800c2a8:	4604      	mov	r4, r0
 800c2aa:	293b      	cmp	r1, #59	; 0x3b
 800c2ac:	d911      	bls.n	800c2d2 <validate_structure+0x2e>
 800c2ae:	223c      	movs	r2, #60	; 0x3c
 800c2b0:	4668      	mov	r0, sp
 800c2b2:	f000 febd 	bl	800d030 <div>
 800c2b6:	9a01      	ldr	r2, [sp, #4]
 800c2b8:	6863      	ldr	r3, [r4, #4]
 800c2ba:	9900      	ldr	r1, [sp, #0]
 800c2bc:	2a00      	cmp	r2, #0
 800c2be:	440b      	add	r3, r1
 800c2c0:	6063      	str	r3, [r4, #4]
 800c2c2:	bfbb      	ittet	lt
 800c2c4:	323c      	addlt	r2, #60	; 0x3c
 800c2c6:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800c2ca:	6022      	strge	r2, [r4, #0]
 800c2cc:	6022      	strlt	r2, [r4, #0]
 800c2ce:	bfb8      	it	lt
 800c2d0:	6063      	strlt	r3, [r4, #4]
 800c2d2:	6861      	ldr	r1, [r4, #4]
 800c2d4:	293b      	cmp	r1, #59	; 0x3b
 800c2d6:	d911      	bls.n	800c2fc <validate_structure+0x58>
 800c2d8:	223c      	movs	r2, #60	; 0x3c
 800c2da:	4668      	mov	r0, sp
 800c2dc:	f000 fea8 	bl	800d030 <div>
 800c2e0:	9a01      	ldr	r2, [sp, #4]
 800c2e2:	68a3      	ldr	r3, [r4, #8]
 800c2e4:	9900      	ldr	r1, [sp, #0]
 800c2e6:	2a00      	cmp	r2, #0
 800c2e8:	440b      	add	r3, r1
 800c2ea:	60a3      	str	r3, [r4, #8]
 800c2ec:	bfbb      	ittet	lt
 800c2ee:	323c      	addlt	r2, #60	; 0x3c
 800c2f0:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800c2f4:	6062      	strge	r2, [r4, #4]
 800c2f6:	6062      	strlt	r2, [r4, #4]
 800c2f8:	bfb8      	it	lt
 800c2fa:	60a3      	strlt	r3, [r4, #8]
 800c2fc:	68a1      	ldr	r1, [r4, #8]
 800c2fe:	2917      	cmp	r1, #23
 800c300:	d911      	bls.n	800c326 <validate_structure+0x82>
 800c302:	2218      	movs	r2, #24
 800c304:	4668      	mov	r0, sp
 800c306:	f000 fe93 	bl	800d030 <div>
 800c30a:	9a01      	ldr	r2, [sp, #4]
 800c30c:	68e3      	ldr	r3, [r4, #12]
 800c30e:	9900      	ldr	r1, [sp, #0]
 800c310:	2a00      	cmp	r2, #0
 800c312:	440b      	add	r3, r1
 800c314:	60e3      	str	r3, [r4, #12]
 800c316:	bfbb      	ittet	lt
 800c318:	3218      	addlt	r2, #24
 800c31a:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800c31e:	60a2      	strge	r2, [r4, #8]
 800c320:	60a2      	strlt	r2, [r4, #8]
 800c322:	bfb8      	it	lt
 800c324:	60e3      	strlt	r3, [r4, #12]
 800c326:	6921      	ldr	r1, [r4, #16]
 800c328:	290b      	cmp	r1, #11
 800c32a:	d911      	bls.n	800c350 <validate_structure+0xac>
 800c32c:	220c      	movs	r2, #12
 800c32e:	4668      	mov	r0, sp
 800c330:	f000 fe7e 	bl	800d030 <div>
 800c334:	9a01      	ldr	r2, [sp, #4]
 800c336:	6963      	ldr	r3, [r4, #20]
 800c338:	9900      	ldr	r1, [sp, #0]
 800c33a:	2a00      	cmp	r2, #0
 800c33c:	440b      	add	r3, r1
 800c33e:	6163      	str	r3, [r4, #20]
 800c340:	bfbb      	ittet	lt
 800c342:	320c      	addlt	r2, #12
 800c344:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800c348:	6122      	strge	r2, [r4, #16]
 800c34a:	6122      	strlt	r2, [r4, #16]
 800c34c:	bfb8      	it	lt
 800c34e:	6163      	strlt	r3, [r4, #20]
 800c350:	6963      	ldr	r3, [r4, #20]
 800c352:	0798      	lsls	r0, r3, #30
 800c354:	d120      	bne.n	800c398 <validate_structure+0xf4>
 800c356:	2164      	movs	r1, #100	; 0x64
 800c358:	fb93 f2f1 	sdiv	r2, r3, r1
 800c35c:	fb01 3212 	mls	r2, r1, r2, r3
 800c360:	b9e2      	cbnz	r2, 800c39c <validate_structure+0xf8>
 800c362:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800c366:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 800c36a:	fb93 f1f2 	sdiv	r1, r3, r2
 800c36e:	fb02 3311 	mls	r3, r2, r1, r3
 800c372:	2b00      	cmp	r3, #0
 800c374:	bf14      	ite	ne
 800c376:	231c      	movne	r3, #28
 800c378:	231d      	moveq	r3, #29
 800c37a:	68e2      	ldr	r2, [r4, #12]
 800c37c:	2a00      	cmp	r2, #0
 800c37e:	dc0f      	bgt.n	800c3a0 <validate_structure+0xfc>
 800c380:	260b      	movs	r6, #11
 800c382:	2064      	movs	r0, #100	; 0x64
 800c384:	f44f 75c8 	mov.w	r5, #400	; 0x190
 800c388:	4f31      	ldr	r7, [pc, #196]	; (800c450 <validate_structure+0x1ac>)
 800c38a:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 800c38e:	f1bc 0f00 	cmp.w	ip, #0
 800c392:	dd31      	ble.n	800c3f8 <validate_structure+0x154>
 800c394:	b003      	add	sp, #12
 800c396:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c398:	231c      	movs	r3, #28
 800c39a:	e7ee      	b.n	800c37a <validate_structure+0xd6>
 800c39c:	231d      	movs	r3, #29
 800c39e:	e7ec      	b.n	800c37a <validate_structure+0xd6>
 800c3a0:	2700      	movs	r7, #0
 800c3a2:	2064      	movs	r0, #100	; 0x64
 800c3a4:	f44f 75c8 	mov.w	r5, #400	; 0x190
 800c3a8:	4e29      	ldr	r6, [pc, #164]	; (800c450 <validate_structure+0x1ac>)
 800c3aa:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 800c3ae:	2a01      	cmp	r2, #1
 800c3b0:	bf0c      	ite	eq
 800c3b2:	469c      	moveq	ip, r3
 800c3b4:	f856 c022 	ldrne.w	ip, [r6, r2, lsl #2]
 800c3b8:	4561      	cmp	r1, ip
 800c3ba:	ddeb      	ble.n	800c394 <validate_structure+0xf0>
 800c3bc:	3201      	adds	r2, #1
 800c3be:	eba1 010c 	sub.w	r1, r1, ip
 800c3c2:	2a0c      	cmp	r2, #12
 800c3c4:	60e1      	str	r1, [r4, #12]
 800c3c6:	6122      	str	r2, [r4, #16]
 800c3c8:	d1ef      	bne.n	800c3aa <validate_structure+0x106>
 800c3ca:	6963      	ldr	r3, [r4, #20]
 800c3cc:	1c5a      	adds	r2, r3, #1
 800c3ce:	0791      	lsls	r1, r2, #30
 800c3d0:	e9c4 7204 	strd	r7, r2, [r4, #16]
 800c3d4:	d137      	bne.n	800c446 <validate_structure+0x1a2>
 800c3d6:	fb92 f1f0 	sdiv	r1, r2, r0
 800c3da:	fb00 2211 	mls	r2, r0, r1, r2
 800c3de:	2a00      	cmp	r2, #0
 800c3e0:	d133      	bne.n	800c44a <validate_structure+0x1a6>
 800c3e2:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 800c3e6:	fb93 f2f5 	sdiv	r2, r3, r5
 800c3ea:	fb05 3312 	mls	r3, r5, r2, r3
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	bf14      	ite	ne
 800c3f2:	231c      	movne	r3, #28
 800c3f4:	231d      	moveq	r3, #29
 800c3f6:	e7d8      	b.n	800c3aa <validate_structure+0x106>
 800c3f8:	6921      	ldr	r1, [r4, #16]
 800c3fa:	3901      	subs	r1, #1
 800c3fc:	6121      	str	r1, [r4, #16]
 800c3fe:	3101      	adds	r1, #1
 800c400:	d114      	bne.n	800c42c <validate_structure+0x188>
 800c402:	6963      	ldr	r3, [r4, #20]
 800c404:	1e5a      	subs	r2, r3, #1
 800c406:	0791      	lsls	r1, r2, #30
 800c408:	e9c4 6204 	strd	r6, r2, [r4, #16]
 800c40c:	d117      	bne.n	800c43e <validate_structure+0x19a>
 800c40e:	fb92 f1f0 	sdiv	r1, r2, r0
 800c412:	fb00 2211 	mls	r2, r0, r1, r2
 800c416:	b9a2      	cbnz	r2, 800c442 <validate_structure+0x19e>
 800c418:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 800c41c:	fb93 f2f5 	sdiv	r2, r3, r5
 800c420:	fb05 3312 	mls	r3, r5, r2, r3
 800c424:	2b00      	cmp	r3, #0
 800c426:	bf14      	ite	ne
 800c428:	231c      	movne	r3, #28
 800c42a:	231d      	moveq	r3, #29
 800c42c:	6922      	ldr	r2, [r4, #16]
 800c42e:	2a01      	cmp	r2, #1
 800c430:	bf0c      	ite	eq
 800c432:	461a      	moveq	r2, r3
 800c434:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 800c438:	4462      	add	r2, ip
 800c43a:	60e2      	str	r2, [r4, #12]
 800c43c:	e7a5      	b.n	800c38a <validate_structure+0xe6>
 800c43e:	231c      	movs	r3, #28
 800c440:	e7f4      	b.n	800c42c <validate_structure+0x188>
 800c442:	231d      	movs	r3, #29
 800c444:	e7f2      	b.n	800c42c <validate_structure+0x188>
 800c446:	231c      	movs	r3, #28
 800c448:	e7af      	b.n	800c3aa <validate_structure+0x106>
 800c44a:	231d      	movs	r3, #29
 800c44c:	e7ad      	b.n	800c3aa <validate_structure+0x106>
 800c44e:	bf00      	nop
 800c450:	0800f640 	.word	0x0800f640

0800c454 <mktime>:
 800c454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c458:	b085      	sub	sp, #20
 800c45a:	4607      	mov	r7, r0
 800c45c:	f000 fe52 	bl	800d104 <__gettzinfo>
 800c460:	4681      	mov	r9, r0
 800c462:	4638      	mov	r0, r7
 800c464:	f7ff ff1e 	bl	800c2a4 <validate_structure>
 800c468:	e9d7 4000 	ldrd	r4, r0, [r7]
 800c46c:	233c      	movs	r3, #60	; 0x3c
 800c46e:	fb03 4400 	mla	r4, r3, r0, r4
 800c472:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800c476:	68b8      	ldr	r0, [r7, #8]
 800c478:	4abc      	ldr	r2, [pc, #752]	; (800c76c <mktime+0x318>)
 800c47a:	fb03 4400 	mla	r4, r3, r0, r4
 800c47e:	e9d7 5303 	ldrd	r5, r3, [r7, #12]
 800c482:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800c486:	3d01      	subs	r5, #1
 800c488:	2b01      	cmp	r3, #1
 800c48a:	697e      	ldr	r6, [r7, #20]
 800c48c:	4415      	add	r5, r2
 800c48e:	dd11      	ble.n	800c4b4 <mktime+0x60>
 800c490:	07b1      	lsls	r1, r6, #30
 800c492:	d10f      	bne.n	800c4b4 <mktime+0x60>
 800c494:	2264      	movs	r2, #100	; 0x64
 800c496:	fb96 f3f2 	sdiv	r3, r6, r2
 800c49a:	fb02 6313 	mls	r3, r2, r3, r6
 800c49e:	b943      	cbnz	r3, 800c4b2 <mktime+0x5e>
 800c4a0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800c4a4:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 800c4a8:	fb93 f1f2 	sdiv	r1, r3, r2
 800c4ac:	fb02 3311 	mls	r3, r2, r1, r3
 800c4b0:	b903      	cbnz	r3, 800c4b4 <mktime+0x60>
 800c4b2:	3501      	adds	r5, #1
 800c4b4:	f644 6220 	movw	r2, #20000	; 0x4e20
 800c4b8:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
 800c4bc:	3310      	adds	r3, #16
 800c4be:	4293      	cmp	r3, r2
 800c4c0:	61fd      	str	r5, [r7, #28]
 800c4c2:	f200 815c 	bhi.w	800c77e <mktime+0x32a>
 800c4c6:	2e46      	cmp	r6, #70	; 0x46
 800c4c8:	dd71      	ble.n	800c5ae <mktime+0x15a>
 800c4ca:	2346      	movs	r3, #70	; 0x46
 800c4cc:	f240 1c6d 	movw	ip, #365	; 0x16d
 800c4d0:	2164      	movs	r1, #100	; 0x64
 800c4d2:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800c4d6:	079a      	lsls	r2, r3, #30
 800c4d8:	d163      	bne.n	800c5a2 <mktime+0x14e>
 800c4da:	fb93 f2f1 	sdiv	r2, r3, r1
 800c4de:	fb01 3212 	mls	r2, r1, r2, r3
 800c4e2:	2a00      	cmp	r2, #0
 800c4e4:	d160      	bne.n	800c5a8 <mktime+0x154>
 800c4e6:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 800c4ea:	fb92 fef0 	sdiv	lr, r2, r0
 800c4ee:	fb00 221e 	mls	r2, r0, lr, r2
 800c4f2:	2a00      	cmp	r2, #0
 800c4f4:	bf14      	ite	ne
 800c4f6:	4662      	movne	r2, ip
 800c4f8:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 800c4fc:	3301      	adds	r3, #1
 800c4fe:	429e      	cmp	r6, r3
 800c500:	4415      	add	r5, r2
 800c502:	d1e8      	bne.n	800c4d6 <mktime+0x82>
 800c504:	4b9a      	ldr	r3, [pc, #616]	; (800c770 <mktime+0x31c>)
 800c506:	ea4f 78e4 	mov.w	r8, r4, asr #31
 800c50a:	fbc5 4803 	smlal	r4, r8, r5, r3
 800c50e:	f000 fbdd 	bl	800cccc <__tz_lock>
 800c512:	f000 fbe7 	bl	800cce4 <_tzset_unlocked>
 800c516:	4b97      	ldr	r3, [pc, #604]	; (800c774 <mktime+0x320>)
 800c518:	f8d3 b000 	ldr.w	fp, [r3]
 800c51c:	f1bb 0f00 	cmp.w	fp, #0
 800c520:	d039      	beq.n	800c596 <mktime+0x142>
 800c522:	f8d7 b020 	ldr.w	fp, [r7, #32]
 800c526:	6978      	ldr	r0, [r7, #20]
 800c528:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800c52c:	f1bb 0f01 	cmp.w	fp, #1
 800c530:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 800c534:	46da      	mov	sl, fp
 800c536:	bfa8      	it	ge
 800c538:	f04f 0a01 	movge.w	sl, #1
 800c53c:	4283      	cmp	r3, r0
 800c53e:	d178      	bne.n	800c632 <mktime+0x1de>
 800c540:	e9d9 3208 	ldrd	r3, r2, [r9, #32]
 800c544:	f8d9 1050 	ldr.w	r1, [r9, #80]	; 0x50
 800c548:	f8d9 e04c 	ldr.w	lr, [r9, #76]	; 0x4c
 800c54c:	1a5b      	subs	r3, r3, r1
 800c54e:	9302      	str	r3, [sp, #8]
 800c550:	eb62 73e1 	sbc.w	r3, r2, r1, asr #31
 800c554:	9303      	str	r3, [sp, #12]
 800c556:	f8d9 2028 	ldr.w	r2, [r9, #40]	; 0x28
 800c55a:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 800c55e:	ebb3 0c02 	subs.w	ip, r3, r2
 800c562:	eb6e 70e2 	sbc.w	r0, lr, r2, asr #31
 800c566:	4564      	cmp	r4, ip
 800c568:	9301      	str	r3, [sp, #4]
 800c56a:	eb78 0300 	sbcs.w	r3, r8, r0
 800c56e:	da66      	bge.n	800c63e <mktime+0x1ea>
 800c570:	f8d9 3000 	ldr.w	r3, [r9]
 800c574:	2b00      	cmp	r3, #0
 800c576:	d06f      	beq.n	800c658 <mktime+0x204>
 800c578:	9b02      	ldr	r3, [sp, #8]
 800c57a:	429c      	cmp	r4, r3
 800c57c:	9b03      	ldr	r3, [sp, #12]
 800c57e:	eb78 0303 	sbcs.w	r3, r8, r3
 800c582:	db03      	blt.n	800c58c <mktime+0x138>
 800c584:	4564      	cmp	r4, ip
 800c586:	eb78 0300 	sbcs.w	r3, r8, r0
 800c58a:	db6b      	blt.n	800c664 <mktime+0x210>
 800c58c:	f1bb 0f00 	cmp.w	fp, #0
 800c590:	f04f 0b00 	mov.w	fp, #0
 800c594:	da6b      	bge.n	800c66e <mktime+0x21a>
 800c596:	f8d9 1028 	ldr.w	r1, [r9, #40]	; 0x28
 800c59a:	190c      	adds	r4, r1, r4
 800c59c:	eb48 78e1 	adc.w	r8, r8, r1, asr #31
 800c5a0:	e0a9      	b.n	800c6f6 <mktime+0x2a2>
 800c5a2:	f240 126d 	movw	r2, #365	; 0x16d
 800c5a6:	e7a9      	b.n	800c4fc <mktime+0xa8>
 800c5a8:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 800c5ac:	e7a6      	b.n	800c4fc <mktime+0xa8>
 800c5ae:	d0a9      	beq.n	800c504 <mktime+0xb0>
 800c5b0:	2345      	movs	r3, #69	; 0x45
 800c5b2:	f240 1c6d 	movw	ip, #365	; 0x16d
 800c5b6:	2164      	movs	r1, #100	; 0x64
 800c5b8:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800c5bc:	e012      	b.n	800c5e4 <mktime+0x190>
 800c5be:	bb62      	cbnz	r2, 800c61a <mktime+0x1c6>
 800c5c0:	fb93 f2f1 	sdiv	r2, r3, r1
 800c5c4:	fb01 3212 	mls	r2, r1, r2, r3
 800c5c8:	bb52      	cbnz	r2, 800c620 <mktime+0x1cc>
 800c5ca:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 800c5ce:	fb92 fef0 	sdiv	lr, r2, r0
 800c5d2:	fb00 221e 	mls	r2, r0, lr, r2
 800c5d6:	2a00      	cmp	r2, #0
 800c5d8:	bf14      	ite	ne
 800c5da:	4662      	movne	r2, ip
 800c5dc:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 800c5e0:	1aad      	subs	r5, r5, r2
 800c5e2:	3b01      	subs	r3, #1
 800c5e4:	429e      	cmp	r6, r3
 800c5e6:	f003 0203 	and.w	r2, r3, #3
 800c5ea:	dbe8      	blt.n	800c5be <mktime+0x16a>
 800c5ec:	b9da      	cbnz	r2, 800c626 <mktime+0x1d2>
 800c5ee:	2264      	movs	r2, #100	; 0x64
 800c5f0:	fb96 f3f2 	sdiv	r3, r6, r2
 800c5f4:	fb02 6313 	mls	r3, r2, r3, r6
 800c5f8:	b9c3      	cbnz	r3, 800c62c <mktime+0x1d8>
 800c5fa:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800c5fe:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 800c602:	fb93 f1f2 	sdiv	r1, r3, r2
 800c606:	fb02 3311 	mls	r3, r2, r1, r3
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	f240 136d 	movw	r3, #365	; 0x16d
 800c610:	bf08      	it	eq
 800c612:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 800c616:	1aed      	subs	r5, r5, r3
 800c618:	e774      	b.n	800c504 <mktime+0xb0>
 800c61a:	f240 126d 	movw	r2, #365	; 0x16d
 800c61e:	e7df      	b.n	800c5e0 <mktime+0x18c>
 800c620:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 800c624:	e7dc      	b.n	800c5e0 <mktime+0x18c>
 800c626:	f240 136d 	movw	r3, #365	; 0x16d
 800c62a:	e7f4      	b.n	800c616 <mktime+0x1c2>
 800c62c:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 800c630:	e7f1      	b.n	800c616 <mktime+0x1c2>
 800c632:	f000 faa1 	bl	800cb78 <__tzcalc_limits>
 800c636:	2800      	cmp	r0, #0
 800c638:	d182      	bne.n	800c540 <mktime+0xec>
 800c63a:	46d3      	mov	fp, sl
 800c63c:	e050      	b.n	800c6e0 <mktime+0x28c>
 800c63e:	9b01      	ldr	r3, [sp, #4]
 800c640:	1a5b      	subs	r3, r3, r1
 800c642:	9301      	str	r3, [sp, #4]
 800c644:	ea4f 73e1 	mov.w	r3, r1, asr #31
 800c648:	eb6e 0e03 	sbc.w	lr, lr, r3
 800c64c:	9b01      	ldr	r3, [sp, #4]
 800c64e:	429c      	cmp	r4, r3
 800c650:	eb78 030e 	sbcs.w	r3, r8, lr
 800c654:	dbf1      	blt.n	800c63a <mktime+0x1e6>
 800c656:	e78b      	b.n	800c570 <mktime+0x11c>
 800c658:	9b02      	ldr	r3, [sp, #8]
 800c65a:	429c      	cmp	r4, r3
 800c65c:	9b03      	ldr	r3, [sp, #12]
 800c65e:	eb78 0303 	sbcs.w	r3, r8, r3
 800c662:	db8f      	blt.n	800c584 <mktime+0x130>
 800c664:	f1bb 0f00 	cmp.w	fp, #0
 800c668:	db3e      	blt.n	800c6e8 <mktime+0x294>
 800c66a:	f04f 0b01 	mov.w	fp, #1
 800c66e:	ea8a 0a0b 	eor.w	sl, sl, fp
 800c672:	f1ba 0f01 	cmp.w	sl, #1
 800c676:	d133      	bne.n	800c6e0 <mktime+0x28c>
 800c678:	f1bb 0f00 	cmp.w	fp, #0
 800c67c:	d04e      	beq.n	800c71c <mktime+0x2c8>
 800c67e:	1a52      	subs	r2, r2, r1
 800c680:	683b      	ldr	r3, [r7, #0]
 800c682:	1914      	adds	r4, r2, r4
 800c684:	4413      	add	r3, r2
 800c686:	4638      	mov	r0, r7
 800c688:	603b      	str	r3, [r7, #0]
 800c68a:	eb48 78e2 	adc.w	r8, r8, r2, asr #31
 800c68e:	f8d7 a00c 	ldr.w	sl, [r7, #12]
 800c692:	f7ff fe07 	bl	800c2a4 <validate_structure>
 800c696:	68fa      	ldr	r2, [r7, #12]
 800c698:	ebb2 020a 	subs.w	r2, r2, sl
 800c69c:	d020      	beq.n	800c6e0 <mktime+0x28c>
 800c69e:	2a01      	cmp	r2, #1
 800c6a0:	dc3e      	bgt.n	800c720 <mktime+0x2cc>
 800c6a2:	1c90      	adds	r0, r2, #2
 800c6a4:	bfd8      	it	le
 800c6a6:	2201      	movle	r2, #1
 800c6a8:	69fb      	ldr	r3, [r7, #28]
 800c6aa:	4415      	add	r5, r2
 800c6ac:	18d3      	adds	r3, r2, r3
 800c6ae:	d540      	bpl.n	800c732 <mktime+0x2de>
 800c6b0:	1e73      	subs	r3, r6, #1
 800c6b2:	0799      	lsls	r1, r3, #30
 800c6b4:	d137      	bne.n	800c726 <mktime+0x2d2>
 800c6b6:	2264      	movs	r2, #100	; 0x64
 800c6b8:	fb93 f1f2 	sdiv	r1, r3, r2
 800c6bc:	fb02 3311 	mls	r3, r2, r1, r3
 800c6c0:	bba3      	cbnz	r3, 800c72c <mktime+0x2d8>
 800c6c2:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800c6c6:	f206 766b 	addw	r6, r6, #1899	; 0x76b
 800c6ca:	fb96 f2f3 	sdiv	r2, r6, r3
 800c6ce:	fb03 6612 	mls	r6, r3, r2, r6
 800c6d2:	2e00      	cmp	r6, #0
 800c6d4:	f240 136d 	movw	r3, #365	; 0x16d
 800c6d8:	bf18      	it	ne
 800c6da:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 800c6de:	61fb      	str	r3, [r7, #28]
 800c6e0:	f1bb 0f01 	cmp.w	fp, #1
 800c6e4:	f47f af57 	bne.w	800c596 <mktime+0x142>
 800c6e8:	f04f 0b01 	mov.w	fp, #1
 800c6ec:	f8d9 1050 	ldr.w	r1, [r9, #80]	; 0x50
 800c6f0:	190c      	adds	r4, r1, r4
 800c6f2:	eb48 78e1 	adc.w	r8, r8, r1, asr #31
 800c6f6:	f000 faef 	bl	800ccd8 <__tz_unlock>
 800c6fa:	2307      	movs	r3, #7
 800c6fc:	3504      	adds	r5, #4
 800c6fe:	fb95 f3f3 	sdiv	r3, r5, r3
 800c702:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800c706:	1aed      	subs	r5, r5, r3
 800c708:	bf48      	it	mi
 800c70a:	3507      	addmi	r5, #7
 800c70c:	f8c7 b020 	str.w	fp, [r7, #32]
 800c710:	61bd      	str	r5, [r7, #24]
 800c712:	4620      	mov	r0, r4
 800c714:	4641      	mov	r1, r8
 800c716:	b005      	add	sp, #20
 800c718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c71c:	1a8a      	subs	r2, r1, r2
 800c71e:	e7af      	b.n	800c680 <mktime+0x22c>
 800c720:	f04f 32ff 	mov.w	r2, #4294967295
 800c724:	e7c0      	b.n	800c6a8 <mktime+0x254>
 800c726:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 800c72a:	e7d8      	b.n	800c6de <mktime+0x28a>
 800c72c:	f240 136d 	movw	r3, #365	; 0x16d
 800c730:	e7d5      	b.n	800c6de <mktime+0x28a>
 800c732:	07b2      	lsls	r2, r6, #30
 800c734:	d117      	bne.n	800c766 <mktime+0x312>
 800c736:	2164      	movs	r1, #100	; 0x64
 800c738:	fb96 f2f1 	sdiv	r2, r6, r1
 800c73c:	fb01 6212 	mls	r2, r1, r2, r6
 800c740:	b9d2      	cbnz	r2, 800c778 <mktime+0x324>
 800c742:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800c746:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 800c74a:	fb96 f1f2 	sdiv	r1, r6, r2
 800c74e:	fb02 6611 	mls	r6, r2, r1, r6
 800c752:	2e00      	cmp	r6, #0
 800c754:	f240 126d 	movw	r2, #365	; 0x16d
 800c758:	bf08      	it	eq
 800c75a:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 800c75e:	4293      	cmp	r3, r2
 800c760:	bfa8      	it	ge
 800c762:	1a9b      	subge	r3, r3, r2
 800c764:	e7bb      	b.n	800c6de <mktime+0x28a>
 800c766:	f240 126d 	movw	r2, #365	; 0x16d
 800c76a:	e7f8      	b.n	800c75e <mktime+0x30a>
 800c76c:	0800f670 	.word	0x0800f670
 800c770:	00015180 	.word	0x00015180
 800c774:	20002c20 	.word	0x20002c20
 800c778:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 800c77c:	e7ef      	b.n	800c75e <mktime+0x30a>
 800c77e:	f04f 34ff 	mov.w	r4, #4294967295
 800c782:	46a0      	mov	r8, r4
 800c784:	e7c5      	b.n	800c712 <mktime+0x2be>
 800c786:	bf00      	nop

0800c788 <_free_r>:
 800c788:	b538      	push	{r3, r4, r5, lr}
 800c78a:	4605      	mov	r5, r0
 800c78c:	2900      	cmp	r1, #0
 800c78e:	d040      	beq.n	800c812 <_free_r+0x8a>
 800c790:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c794:	1f0c      	subs	r4, r1, #4
 800c796:	2b00      	cmp	r3, #0
 800c798:	bfb8      	it	lt
 800c79a:	18e4      	addlt	r4, r4, r3
 800c79c:	f000 fd6a 	bl	800d274 <__malloc_lock>
 800c7a0:	4a1c      	ldr	r2, [pc, #112]	; (800c814 <_free_r+0x8c>)
 800c7a2:	6813      	ldr	r3, [r2, #0]
 800c7a4:	b933      	cbnz	r3, 800c7b4 <_free_r+0x2c>
 800c7a6:	6063      	str	r3, [r4, #4]
 800c7a8:	6014      	str	r4, [r2, #0]
 800c7aa:	4628      	mov	r0, r5
 800c7ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c7b0:	f000 bd66 	b.w	800d280 <__malloc_unlock>
 800c7b4:	42a3      	cmp	r3, r4
 800c7b6:	d908      	bls.n	800c7ca <_free_r+0x42>
 800c7b8:	6820      	ldr	r0, [r4, #0]
 800c7ba:	1821      	adds	r1, r4, r0
 800c7bc:	428b      	cmp	r3, r1
 800c7be:	bf01      	itttt	eq
 800c7c0:	6819      	ldreq	r1, [r3, #0]
 800c7c2:	685b      	ldreq	r3, [r3, #4]
 800c7c4:	1809      	addeq	r1, r1, r0
 800c7c6:	6021      	streq	r1, [r4, #0]
 800c7c8:	e7ed      	b.n	800c7a6 <_free_r+0x1e>
 800c7ca:	461a      	mov	r2, r3
 800c7cc:	685b      	ldr	r3, [r3, #4]
 800c7ce:	b10b      	cbz	r3, 800c7d4 <_free_r+0x4c>
 800c7d0:	42a3      	cmp	r3, r4
 800c7d2:	d9fa      	bls.n	800c7ca <_free_r+0x42>
 800c7d4:	6811      	ldr	r1, [r2, #0]
 800c7d6:	1850      	adds	r0, r2, r1
 800c7d8:	42a0      	cmp	r0, r4
 800c7da:	d10b      	bne.n	800c7f4 <_free_r+0x6c>
 800c7dc:	6820      	ldr	r0, [r4, #0]
 800c7de:	4401      	add	r1, r0
 800c7e0:	1850      	adds	r0, r2, r1
 800c7e2:	4283      	cmp	r3, r0
 800c7e4:	6011      	str	r1, [r2, #0]
 800c7e6:	d1e0      	bne.n	800c7aa <_free_r+0x22>
 800c7e8:	6818      	ldr	r0, [r3, #0]
 800c7ea:	685b      	ldr	r3, [r3, #4]
 800c7ec:	4401      	add	r1, r0
 800c7ee:	6011      	str	r1, [r2, #0]
 800c7f0:	6053      	str	r3, [r2, #4]
 800c7f2:	e7da      	b.n	800c7aa <_free_r+0x22>
 800c7f4:	d902      	bls.n	800c7fc <_free_r+0x74>
 800c7f6:	230c      	movs	r3, #12
 800c7f8:	602b      	str	r3, [r5, #0]
 800c7fa:	e7d6      	b.n	800c7aa <_free_r+0x22>
 800c7fc:	6820      	ldr	r0, [r4, #0]
 800c7fe:	1821      	adds	r1, r4, r0
 800c800:	428b      	cmp	r3, r1
 800c802:	bf01      	itttt	eq
 800c804:	6819      	ldreq	r1, [r3, #0]
 800c806:	685b      	ldreq	r3, [r3, #4]
 800c808:	1809      	addeq	r1, r1, r0
 800c80a:	6021      	streq	r1, [r4, #0]
 800c80c:	6063      	str	r3, [r4, #4]
 800c80e:	6054      	str	r4, [r2, #4]
 800c810:	e7cb      	b.n	800c7aa <_free_r+0x22>
 800c812:	bd38      	pop	{r3, r4, r5, pc}
 800c814:	20002bfc 	.word	0x20002bfc

0800c818 <sbrk_aligned>:
 800c818:	b570      	push	{r4, r5, r6, lr}
 800c81a:	4e0e      	ldr	r6, [pc, #56]	; (800c854 <sbrk_aligned+0x3c>)
 800c81c:	460c      	mov	r4, r1
 800c81e:	6831      	ldr	r1, [r6, #0]
 800c820:	4605      	mov	r5, r0
 800c822:	b911      	cbnz	r1, 800c82a <sbrk_aligned+0x12>
 800c824:	f000 f88c 	bl	800c940 <_sbrk_r>
 800c828:	6030      	str	r0, [r6, #0]
 800c82a:	4621      	mov	r1, r4
 800c82c:	4628      	mov	r0, r5
 800c82e:	f000 f887 	bl	800c940 <_sbrk_r>
 800c832:	1c43      	adds	r3, r0, #1
 800c834:	d00a      	beq.n	800c84c <sbrk_aligned+0x34>
 800c836:	1cc4      	adds	r4, r0, #3
 800c838:	f024 0403 	bic.w	r4, r4, #3
 800c83c:	42a0      	cmp	r0, r4
 800c83e:	d007      	beq.n	800c850 <sbrk_aligned+0x38>
 800c840:	1a21      	subs	r1, r4, r0
 800c842:	4628      	mov	r0, r5
 800c844:	f000 f87c 	bl	800c940 <_sbrk_r>
 800c848:	3001      	adds	r0, #1
 800c84a:	d101      	bne.n	800c850 <sbrk_aligned+0x38>
 800c84c:	f04f 34ff 	mov.w	r4, #4294967295
 800c850:	4620      	mov	r0, r4
 800c852:	bd70      	pop	{r4, r5, r6, pc}
 800c854:	20002c00 	.word	0x20002c00

0800c858 <_malloc_r>:
 800c858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c85c:	1ccd      	adds	r5, r1, #3
 800c85e:	f025 0503 	bic.w	r5, r5, #3
 800c862:	3508      	adds	r5, #8
 800c864:	2d0c      	cmp	r5, #12
 800c866:	bf38      	it	cc
 800c868:	250c      	movcc	r5, #12
 800c86a:	2d00      	cmp	r5, #0
 800c86c:	4607      	mov	r7, r0
 800c86e:	db01      	blt.n	800c874 <_malloc_r+0x1c>
 800c870:	42a9      	cmp	r1, r5
 800c872:	d905      	bls.n	800c880 <_malloc_r+0x28>
 800c874:	230c      	movs	r3, #12
 800c876:	2600      	movs	r6, #0
 800c878:	603b      	str	r3, [r7, #0]
 800c87a:	4630      	mov	r0, r6
 800c87c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c880:	4e2e      	ldr	r6, [pc, #184]	; (800c93c <_malloc_r+0xe4>)
 800c882:	f000 fcf7 	bl	800d274 <__malloc_lock>
 800c886:	6833      	ldr	r3, [r6, #0]
 800c888:	461c      	mov	r4, r3
 800c88a:	bb34      	cbnz	r4, 800c8da <_malloc_r+0x82>
 800c88c:	4629      	mov	r1, r5
 800c88e:	4638      	mov	r0, r7
 800c890:	f7ff ffc2 	bl	800c818 <sbrk_aligned>
 800c894:	1c43      	adds	r3, r0, #1
 800c896:	4604      	mov	r4, r0
 800c898:	d14d      	bne.n	800c936 <_malloc_r+0xde>
 800c89a:	6834      	ldr	r4, [r6, #0]
 800c89c:	4626      	mov	r6, r4
 800c89e:	2e00      	cmp	r6, #0
 800c8a0:	d140      	bne.n	800c924 <_malloc_r+0xcc>
 800c8a2:	6823      	ldr	r3, [r4, #0]
 800c8a4:	4631      	mov	r1, r6
 800c8a6:	4638      	mov	r0, r7
 800c8a8:	eb04 0803 	add.w	r8, r4, r3
 800c8ac:	f000 f848 	bl	800c940 <_sbrk_r>
 800c8b0:	4580      	cmp	r8, r0
 800c8b2:	d13a      	bne.n	800c92a <_malloc_r+0xd2>
 800c8b4:	6821      	ldr	r1, [r4, #0]
 800c8b6:	3503      	adds	r5, #3
 800c8b8:	1a6d      	subs	r5, r5, r1
 800c8ba:	f025 0503 	bic.w	r5, r5, #3
 800c8be:	3508      	adds	r5, #8
 800c8c0:	2d0c      	cmp	r5, #12
 800c8c2:	bf38      	it	cc
 800c8c4:	250c      	movcc	r5, #12
 800c8c6:	4638      	mov	r0, r7
 800c8c8:	4629      	mov	r1, r5
 800c8ca:	f7ff ffa5 	bl	800c818 <sbrk_aligned>
 800c8ce:	3001      	adds	r0, #1
 800c8d0:	d02b      	beq.n	800c92a <_malloc_r+0xd2>
 800c8d2:	6823      	ldr	r3, [r4, #0]
 800c8d4:	442b      	add	r3, r5
 800c8d6:	6023      	str	r3, [r4, #0]
 800c8d8:	e00e      	b.n	800c8f8 <_malloc_r+0xa0>
 800c8da:	6822      	ldr	r2, [r4, #0]
 800c8dc:	1b52      	subs	r2, r2, r5
 800c8de:	d41e      	bmi.n	800c91e <_malloc_r+0xc6>
 800c8e0:	2a0b      	cmp	r2, #11
 800c8e2:	d916      	bls.n	800c912 <_malloc_r+0xba>
 800c8e4:	1961      	adds	r1, r4, r5
 800c8e6:	42a3      	cmp	r3, r4
 800c8e8:	6025      	str	r5, [r4, #0]
 800c8ea:	bf18      	it	ne
 800c8ec:	6059      	strne	r1, [r3, #4]
 800c8ee:	6863      	ldr	r3, [r4, #4]
 800c8f0:	bf08      	it	eq
 800c8f2:	6031      	streq	r1, [r6, #0]
 800c8f4:	5162      	str	r2, [r4, r5]
 800c8f6:	604b      	str	r3, [r1, #4]
 800c8f8:	4638      	mov	r0, r7
 800c8fa:	f104 060b 	add.w	r6, r4, #11
 800c8fe:	f000 fcbf 	bl	800d280 <__malloc_unlock>
 800c902:	f026 0607 	bic.w	r6, r6, #7
 800c906:	1d23      	adds	r3, r4, #4
 800c908:	1af2      	subs	r2, r6, r3
 800c90a:	d0b6      	beq.n	800c87a <_malloc_r+0x22>
 800c90c:	1b9b      	subs	r3, r3, r6
 800c90e:	50a3      	str	r3, [r4, r2]
 800c910:	e7b3      	b.n	800c87a <_malloc_r+0x22>
 800c912:	6862      	ldr	r2, [r4, #4]
 800c914:	42a3      	cmp	r3, r4
 800c916:	bf0c      	ite	eq
 800c918:	6032      	streq	r2, [r6, #0]
 800c91a:	605a      	strne	r2, [r3, #4]
 800c91c:	e7ec      	b.n	800c8f8 <_malloc_r+0xa0>
 800c91e:	4623      	mov	r3, r4
 800c920:	6864      	ldr	r4, [r4, #4]
 800c922:	e7b2      	b.n	800c88a <_malloc_r+0x32>
 800c924:	4634      	mov	r4, r6
 800c926:	6876      	ldr	r6, [r6, #4]
 800c928:	e7b9      	b.n	800c89e <_malloc_r+0x46>
 800c92a:	230c      	movs	r3, #12
 800c92c:	4638      	mov	r0, r7
 800c92e:	603b      	str	r3, [r7, #0]
 800c930:	f000 fca6 	bl	800d280 <__malloc_unlock>
 800c934:	e7a1      	b.n	800c87a <_malloc_r+0x22>
 800c936:	6025      	str	r5, [r4, #0]
 800c938:	e7de      	b.n	800c8f8 <_malloc_r+0xa0>
 800c93a:	bf00      	nop
 800c93c:	20002bfc 	.word	0x20002bfc

0800c940 <_sbrk_r>:
 800c940:	b538      	push	{r3, r4, r5, lr}
 800c942:	2300      	movs	r3, #0
 800c944:	4d05      	ldr	r5, [pc, #20]	; (800c95c <_sbrk_r+0x1c>)
 800c946:	4604      	mov	r4, r0
 800c948:	4608      	mov	r0, r1
 800c94a:	602b      	str	r3, [r5, #0]
 800c94c:	f7f9 fe9e 	bl	800668c <_sbrk>
 800c950:	1c43      	adds	r3, r0, #1
 800c952:	d102      	bne.n	800c95a <_sbrk_r+0x1a>
 800c954:	682b      	ldr	r3, [r5, #0]
 800c956:	b103      	cbz	r3, 800c95a <_sbrk_r+0x1a>
 800c958:	6023      	str	r3, [r4, #0]
 800c95a:	bd38      	pop	{r3, r4, r5, pc}
 800c95c:	20002c30 	.word	0x20002c30

0800c960 <siprintf>:
 800c960:	b40e      	push	{r1, r2, r3}
 800c962:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c966:	b500      	push	{lr}
 800c968:	b09c      	sub	sp, #112	; 0x70
 800c96a:	ab1d      	add	r3, sp, #116	; 0x74
 800c96c:	9002      	str	r0, [sp, #8]
 800c96e:	9006      	str	r0, [sp, #24]
 800c970:	9107      	str	r1, [sp, #28]
 800c972:	9104      	str	r1, [sp, #16]
 800c974:	4808      	ldr	r0, [pc, #32]	; (800c998 <siprintf+0x38>)
 800c976:	4909      	ldr	r1, [pc, #36]	; (800c99c <siprintf+0x3c>)
 800c978:	f853 2b04 	ldr.w	r2, [r3], #4
 800c97c:	9105      	str	r1, [sp, #20]
 800c97e:	6800      	ldr	r0, [r0, #0]
 800c980:	a902      	add	r1, sp, #8
 800c982:	9301      	str	r3, [sp, #4]
 800c984:	f000 fcde 	bl	800d344 <_svfiprintf_r>
 800c988:	2200      	movs	r2, #0
 800c98a:	9b02      	ldr	r3, [sp, #8]
 800c98c:	701a      	strb	r2, [r3, #0]
 800c98e:	b01c      	add	sp, #112	; 0x70
 800c990:	f85d eb04 	ldr.w	lr, [sp], #4
 800c994:	b003      	add	sp, #12
 800c996:	4770      	bx	lr
 800c998:	200004e0 	.word	0x200004e0
 800c99c:	ffff0208 	.word	0xffff0208

0800c9a0 <strcpy>:
 800c9a0:	4603      	mov	r3, r0
 800c9a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c9a6:	f803 2b01 	strb.w	r2, [r3], #1
 800c9aa:	2a00      	cmp	r2, #0
 800c9ac:	d1f9      	bne.n	800c9a2 <strcpy+0x2>
 800c9ae:	4770      	bx	lr

0800c9b0 <strtok>:
 800c9b0:	4b16      	ldr	r3, [pc, #88]	; (800ca0c <strtok+0x5c>)
 800c9b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9b6:	681f      	ldr	r7, [r3, #0]
 800c9b8:	4605      	mov	r5, r0
 800c9ba:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 800c9bc:	460e      	mov	r6, r1
 800c9be:	b9ec      	cbnz	r4, 800c9fc <strtok+0x4c>
 800c9c0:	2050      	movs	r0, #80	; 0x50
 800c9c2:	f7ff fc39 	bl	800c238 <malloc>
 800c9c6:	4602      	mov	r2, r0
 800c9c8:	65b8      	str	r0, [r7, #88]	; 0x58
 800c9ca:	b920      	cbnz	r0, 800c9d6 <strtok+0x26>
 800c9cc:	2157      	movs	r1, #87	; 0x57
 800c9ce:	4b10      	ldr	r3, [pc, #64]	; (800ca10 <strtok+0x60>)
 800c9d0:	4810      	ldr	r0, [pc, #64]	; (800ca14 <strtok+0x64>)
 800c9d2:	f000 fb0f 	bl	800cff4 <__assert_func>
 800c9d6:	e9c0 4400 	strd	r4, r4, [r0]
 800c9da:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800c9de:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800c9e2:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800c9e6:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800c9ea:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800c9ee:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800c9f2:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800c9f6:	6184      	str	r4, [r0, #24]
 800c9f8:	7704      	strb	r4, [r0, #28]
 800c9fa:	6244      	str	r4, [r0, #36]	; 0x24
 800c9fc:	4631      	mov	r1, r6
 800c9fe:	4628      	mov	r0, r5
 800ca00:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ca02:	2301      	movs	r3, #1
 800ca04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ca08:	f000 b806 	b.w	800ca18 <__strtok_r>
 800ca0c:	200004e0 	.word	0x200004e0
 800ca10:	0800f5cc 	.word	0x0800f5cc
 800ca14:	0800f700 	.word	0x0800f700

0800ca18 <__strtok_r>:
 800ca18:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ca1a:	b908      	cbnz	r0, 800ca20 <__strtok_r+0x8>
 800ca1c:	6810      	ldr	r0, [r2, #0]
 800ca1e:	b188      	cbz	r0, 800ca44 <__strtok_r+0x2c>
 800ca20:	4604      	mov	r4, r0
 800ca22:	460f      	mov	r7, r1
 800ca24:	4620      	mov	r0, r4
 800ca26:	f814 5b01 	ldrb.w	r5, [r4], #1
 800ca2a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800ca2e:	b91e      	cbnz	r6, 800ca38 <__strtok_r+0x20>
 800ca30:	b965      	cbnz	r5, 800ca4c <__strtok_r+0x34>
 800ca32:	4628      	mov	r0, r5
 800ca34:	6015      	str	r5, [r2, #0]
 800ca36:	e005      	b.n	800ca44 <__strtok_r+0x2c>
 800ca38:	42b5      	cmp	r5, r6
 800ca3a:	d1f6      	bne.n	800ca2a <__strtok_r+0x12>
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d1f0      	bne.n	800ca22 <__strtok_r+0xa>
 800ca40:	6014      	str	r4, [r2, #0]
 800ca42:	7003      	strb	r3, [r0, #0]
 800ca44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ca46:	461c      	mov	r4, r3
 800ca48:	e00c      	b.n	800ca64 <__strtok_r+0x4c>
 800ca4a:	b915      	cbnz	r5, 800ca52 <__strtok_r+0x3a>
 800ca4c:	460e      	mov	r6, r1
 800ca4e:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ca52:	f816 5b01 	ldrb.w	r5, [r6], #1
 800ca56:	42ab      	cmp	r3, r5
 800ca58:	d1f7      	bne.n	800ca4a <__strtok_r+0x32>
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d0f3      	beq.n	800ca46 <__strtok_r+0x2e>
 800ca5e:	2300      	movs	r3, #0
 800ca60:	f804 3c01 	strb.w	r3, [r4, #-1]
 800ca64:	6014      	str	r4, [r2, #0]
 800ca66:	e7ed      	b.n	800ca44 <__strtok_r+0x2c>

0800ca68 <_strtol_l.constprop.0>:
 800ca68:	2b01      	cmp	r3, #1
 800ca6a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca6e:	4680      	mov	r8, r0
 800ca70:	d001      	beq.n	800ca76 <_strtol_l.constprop.0+0xe>
 800ca72:	2b24      	cmp	r3, #36	; 0x24
 800ca74:	d906      	bls.n	800ca84 <_strtol_l.constprop.0+0x1c>
 800ca76:	f7ff faa5 	bl	800bfc4 <__errno>
 800ca7a:	2316      	movs	r3, #22
 800ca7c:	6003      	str	r3, [r0, #0]
 800ca7e:	2000      	movs	r0, #0
 800ca80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca84:	460d      	mov	r5, r1
 800ca86:	4f35      	ldr	r7, [pc, #212]	; (800cb5c <_strtol_l.constprop.0+0xf4>)
 800ca88:	4628      	mov	r0, r5
 800ca8a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ca8e:	5de6      	ldrb	r6, [r4, r7]
 800ca90:	f016 0608 	ands.w	r6, r6, #8
 800ca94:	d1f8      	bne.n	800ca88 <_strtol_l.constprop.0+0x20>
 800ca96:	2c2d      	cmp	r4, #45	; 0x2d
 800ca98:	d12f      	bne.n	800cafa <_strtol_l.constprop.0+0x92>
 800ca9a:	2601      	movs	r6, #1
 800ca9c:	782c      	ldrb	r4, [r5, #0]
 800ca9e:	1c85      	adds	r5, r0, #2
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d057      	beq.n	800cb54 <_strtol_l.constprop.0+0xec>
 800caa4:	2b10      	cmp	r3, #16
 800caa6:	d109      	bne.n	800cabc <_strtol_l.constprop.0+0x54>
 800caa8:	2c30      	cmp	r4, #48	; 0x30
 800caaa:	d107      	bne.n	800cabc <_strtol_l.constprop.0+0x54>
 800caac:	7828      	ldrb	r0, [r5, #0]
 800caae:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800cab2:	2858      	cmp	r0, #88	; 0x58
 800cab4:	d149      	bne.n	800cb4a <_strtol_l.constprop.0+0xe2>
 800cab6:	2310      	movs	r3, #16
 800cab8:	786c      	ldrb	r4, [r5, #1]
 800caba:	3502      	adds	r5, #2
 800cabc:	2700      	movs	r7, #0
 800cabe:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800cac2:	f10e 3eff 	add.w	lr, lr, #4294967295
 800cac6:	fbbe f9f3 	udiv	r9, lr, r3
 800caca:	4638      	mov	r0, r7
 800cacc:	fb03 ea19 	mls	sl, r3, r9, lr
 800cad0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800cad4:	f1bc 0f09 	cmp.w	ip, #9
 800cad8:	d814      	bhi.n	800cb04 <_strtol_l.constprop.0+0x9c>
 800cada:	4664      	mov	r4, ip
 800cadc:	42a3      	cmp	r3, r4
 800cade:	dd22      	ble.n	800cb26 <_strtol_l.constprop.0+0xbe>
 800cae0:	2f00      	cmp	r7, #0
 800cae2:	db1d      	blt.n	800cb20 <_strtol_l.constprop.0+0xb8>
 800cae4:	4581      	cmp	r9, r0
 800cae6:	d31b      	bcc.n	800cb20 <_strtol_l.constprop.0+0xb8>
 800cae8:	d101      	bne.n	800caee <_strtol_l.constprop.0+0x86>
 800caea:	45a2      	cmp	sl, r4
 800caec:	db18      	blt.n	800cb20 <_strtol_l.constprop.0+0xb8>
 800caee:	2701      	movs	r7, #1
 800caf0:	fb00 4003 	mla	r0, r0, r3, r4
 800caf4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800caf8:	e7ea      	b.n	800cad0 <_strtol_l.constprop.0+0x68>
 800cafa:	2c2b      	cmp	r4, #43	; 0x2b
 800cafc:	bf04      	itt	eq
 800cafe:	782c      	ldrbeq	r4, [r5, #0]
 800cb00:	1c85      	addeq	r5, r0, #2
 800cb02:	e7cd      	b.n	800caa0 <_strtol_l.constprop.0+0x38>
 800cb04:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800cb08:	f1bc 0f19 	cmp.w	ip, #25
 800cb0c:	d801      	bhi.n	800cb12 <_strtol_l.constprop.0+0xaa>
 800cb0e:	3c37      	subs	r4, #55	; 0x37
 800cb10:	e7e4      	b.n	800cadc <_strtol_l.constprop.0+0x74>
 800cb12:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800cb16:	f1bc 0f19 	cmp.w	ip, #25
 800cb1a:	d804      	bhi.n	800cb26 <_strtol_l.constprop.0+0xbe>
 800cb1c:	3c57      	subs	r4, #87	; 0x57
 800cb1e:	e7dd      	b.n	800cadc <_strtol_l.constprop.0+0x74>
 800cb20:	f04f 37ff 	mov.w	r7, #4294967295
 800cb24:	e7e6      	b.n	800caf4 <_strtol_l.constprop.0+0x8c>
 800cb26:	2f00      	cmp	r7, #0
 800cb28:	da07      	bge.n	800cb3a <_strtol_l.constprop.0+0xd2>
 800cb2a:	2322      	movs	r3, #34	; 0x22
 800cb2c:	4670      	mov	r0, lr
 800cb2e:	f8c8 3000 	str.w	r3, [r8]
 800cb32:	2a00      	cmp	r2, #0
 800cb34:	d0a4      	beq.n	800ca80 <_strtol_l.constprop.0+0x18>
 800cb36:	1e69      	subs	r1, r5, #1
 800cb38:	e005      	b.n	800cb46 <_strtol_l.constprop.0+0xde>
 800cb3a:	b106      	cbz	r6, 800cb3e <_strtol_l.constprop.0+0xd6>
 800cb3c:	4240      	negs	r0, r0
 800cb3e:	2a00      	cmp	r2, #0
 800cb40:	d09e      	beq.n	800ca80 <_strtol_l.constprop.0+0x18>
 800cb42:	2f00      	cmp	r7, #0
 800cb44:	d1f7      	bne.n	800cb36 <_strtol_l.constprop.0+0xce>
 800cb46:	6011      	str	r1, [r2, #0]
 800cb48:	e79a      	b.n	800ca80 <_strtol_l.constprop.0+0x18>
 800cb4a:	2430      	movs	r4, #48	; 0x30
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d1b5      	bne.n	800cabc <_strtol_l.constprop.0+0x54>
 800cb50:	2308      	movs	r3, #8
 800cb52:	e7b3      	b.n	800cabc <_strtol_l.constprop.0+0x54>
 800cb54:	2c30      	cmp	r4, #48	; 0x30
 800cb56:	d0a9      	beq.n	800caac <_strtol_l.constprop.0+0x44>
 800cb58:	230a      	movs	r3, #10
 800cb5a:	e7af      	b.n	800cabc <_strtol_l.constprop.0+0x54>
 800cb5c:	0800f7d6 	.word	0x0800f7d6

0800cb60 <_strtol_r>:
 800cb60:	f7ff bf82 	b.w	800ca68 <_strtol_l.constprop.0>

0800cb64 <strtol>:
 800cb64:	4613      	mov	r3, r2
 800cb66:	460a      	mov	r2, r1
 800cb68:	4601      	mov	r1, r0
 800cb6a:	4802      	ldr	r0, [pc, #8]	; (800cb74 <strtol+0x10>)
 800cb6c:	6800      	ldr	r0, [r0, #0]
 800cb6e:	f7ff bf7b 	b.w	800ca68 <_strtol_l.constprop.0>
 800cb72:	bf00      	nop
 800cb74:	200004e0 	.word	0x200004e0

0800cb78 <__tzcalc_limits>:
 800cb78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb7c:	4605      	mov	r5, r0
 800cb7e:	f000 fac1 	bl	800d104 <__gettzinfo>
 800cb82:	f240 73b1 	movw	r3, #1969	; 0x7b1
 800cb86:	429d      	cmp	r5, r3
 800cb88:	f340 809a 	ble.w	800ccc0 <__tzcalc_limits+0x148>
 800cb8c:	f46f 62f6 	mvn.w	r2, #1968	; 0x7b0
 800cb90:	18ac      	adds	r4, r5, r2
 800cb92:	f240 126d 	movw	r2, #365	; 0x16d
 800cb96:	f2a5 73b2 	subw	r3, r5, #1970	; 0x7b2
 800cb9a:	10a4      	asrs	r4, r4, #2
 800cb9c:	fb02 4403 	mla	r4, r2, r3, r4
 800cba0:	f06f 0263 	mvn.w	r2, #99	; 0x63
 800cba4:	f2a5 736d 	subw	r3, r5, #1901	; 0x76d
 800cba8:	fb93 f3f2 	sdiv	r3, r3, r2
 800cbac:	f46f 61c8 	mvn.w	r1, #1600	; 0x640
 800cbb0:	441c      	add	r4, r3
 800cbb2:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800cbb6:	186a      	adds	r2, r5, r1
 800cbb8:	fbb2 f2f3 	udiv	r2, r2, r3
 800cbbc:	fb95 fcf3 	sdiv	ip, r5, r3
 800cbc0:	4414      	add	r4, r2
 800cbc2:	2264      	movs	r2, #100	; 0x64
 800cbc4:	fb03 5c1c 	mls	ip, r3, ip, r5
 800cbc8:	fb95 f7f2 	sdiv	r7, r5, r2
 800cbcc:	fabc f68c 	clz	r6, ip
 800cbd0:	4601      	mov	r1, r0
 800cbd2:	fb02 5717 	mls	r7, r2, r7, r5
 800cbd6:	6045      	str	r5, [r0, #4]
 800cbd8:	0976      	lsrs	r6, r6, #5
 800cbda:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 800cbde:	f005 0203 	and.w	r2, r5, #3
 800cbe2:	7a0d      	ldrb	r5, [r1, #8]
 800cbe4:	694b      	ldr	r3, [r1, #20]
 800cbe6:	2d4a      	cmp	r5, #74	; 0x4a
 800cbe8:	d12d      	bne.n	800cc46 <__tzcalc_limits+0xce>
 800cbea:	eb04 0e03 	add.w	lr, r4, r3
 800cbee:	b902      	cbnz	r2, 800cbf2 <__tzcalc_limits+0x7a>
 800cbf0:	b917      	cbnz	r7, 800cbf8 <__tzcalc_limits+0x80>
 800cbf2:	f1bc 0f00 	cmp.w	ip, #0
 800cbf6:	d124      	bne.n	800cc42 <__tzcalc_limits+0xca>
 800cbf8:	2b3b      	cmp	r3, #59	; 0x3b
 800cbfa:	bfd4      	ite	le
 800cbfc:	2300      	movle	r3, #0
 800cbfe:	2301      	movgt	r3, #1
 800cc00:	4473      	add	r3, lr
 800cc02:	3b01      	subs	r3, #1
 800cc04:	698d      	ldr	r5, [r1, #24]
 800cc06:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 800ccc4 <__tzcalc_limits+0x14c>
 800cc0a:	ea4f 7ee5 	mov.w	lr, r5, asr #31
 800cc0e:	fbc3 5e08 	smlal	r5, lr, r3, r8
 800cc12:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800cc14:	18ed      	adds	r5, r5, r3
 800cc16:	eb4e 73e3 	adc.w	r3, lr, r3, asr #31
 800cc1a:	e9c1 5308 	strd	r5, r3, [r1, #32]
 800cc1e:	3128      	adds	r1, #40	; 0x28
 800cc20:	458b      	cmp	fp, r1
 800cc22:	d1de      	bne.n	800cbe2 <__tzcalc_limits+0x6a>
 800cc24:	e9d0 1312 	ldrd	r1, r3, [r0, #72]	; 0x48
 800cc28:	e9d0 4208 	ldrd	r4, r2, [r0, #32]
 800cc2c:	428c      	cmp	r4, r1
 800cc2e:	eb72 0303 	sbcs.w	r3, r2, r3
 800cc32:	bfb4      	ite	lt
 800cc34:	2301      	movlt	r3, #1
 800cc36:	2300      	movge	r3, #0
 800cc38:	6003      	str	r3, [r0, #0]
 800cc3a:	2001      	movs	r0, #1
 800cc3c:	b003      	add	sp, #12
 800cc3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc42:	2300      	movs	r3, #0
 800cc44:	e7dc      	b.n	800cc00 <__tzcalc_limits+0x88>
 800cc46:	2d44      	cmp	r5, #68	; 0x44
 800cc48:	d101      	bne.n	800cc4e <__tzcalc_limits+0xd6>
 800cc4a:	4423      	add	r3, r4
 800cc4c:	e7da      	b.n	800cc04 <__tzcalc_limits+0x8c>
 800cc4e:	bb8a      	cbnz	r2, 800ccb4 <__tzcalc_limits+0x13c>
 800cc50:	2f00      	cmp	r7, #0
 800cc52:	bf0c      	ite	eq
 800cc54:	4635      	moveq	r5, r6
 800cc56:	2501      	movne	r5, #1
 800cc58:	f04f 0a30 	mov.w	sl, #48	; 0x30
 800cc5c:	f8d1 e00c 	ldr.w	lr, [r1, #12]
 800cc60:	f04f 0800 	mov.w	r8, #0
 800cc64:	f8cd e004 	str.w	lr, [sp, #4]
 800cc68:	46a6      	mov	lr, r4
 800cc6a:	f8df 905c 	ldr.w	r9, [pc, #92]	; 800ccc8 <__tzcalc_limits+0x150>
 800cc6e:	fb0a 9505 	mla	r5, sl, r5, r9
 800cc72:	3d04      	subs	r5, #4
 800cc74:	f8dd a004 	ldr.w	sl, [sp, #4]
 800cc78:	f108 0801 	add.w	r8, r8, #1
 800cc7c:	45c2      	cmp	sl, r8
 800cc7e:	f855 9028 	ldr.w	r9, [r5, r8, lsl #2]
 800cc82:	dc19      	bgt.n	800ccb8 <__tzcalc_limits+0x140>
 800cc84:	f04f 0807 	mov.w	r8, #7
 800cc88:	f10e 0504 	add.w	r5, lr, #4
 800cc8c:	fb95 f8f8 	sdiv	r8, r5, r8
 800cc90:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
 800cc94:	eba5 0808 	sub.w	r8, r5, r8
 800cc98:	ebb3 0808 	subs.w	r8, r3, r8
 800cc9c:	690b      	ldr	r3, [r1, #16]
 800cc9e:	bf48      	it	mi
 800cca0:	f108 0807 	addmi.w	r8, r8, #7
 800cca4:	3b01      	subs	r3, #1
 800cca6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800ccaa:	4443      	add	r3, r8
 800ccac:	454b      	cmp	r3, r9
 800ccae:	da05      	bge.n	800ccbc <__tzcalc_limits+0x144>
 800ccb0:	4473      	add	r3, lr
 800ccb2:	e7a7      	b.n	800cc04 <__tzcalc_limits+0x8c>
 800ccb4:	4635      	mov	r5, r6
 800ccb6:	e7cf      	b.n	800cc58 <__tzcalc_limits+0xe0>
 800ccb8:	44ce      	add	lr, r9
 800ccba:	e7db      	b.n	800cc74 <__tzcalc_limits+0xfc>
 800ccbc:	3b07      	subs	r3, #7
 800ccbe:	e7f5      	b.n	800ccac <__tzcalc_limits+0x134>
 800ccc0:	2000      	movs	r0, #0
 800ccc2:	e7bb      	b.n	800cc3c <__tzcalc_limits+0xc4>
 800ccc4:	00015180 	.word	0x00015180
 800ccc8:	0800f6a0 	.word	0x0800f6a0

0800cccc <__tz_lock>:
 800cccc:	4801      	ldr	r0, [pc, #4]	; (800ccd4 <__tz_lock+0x8>)
 800ccce:	f000 bacc 	b.w	800d26a <__retarget_lock_acquire>
 800ccd2:	bf00      	nop
 800ccd4:	20002c2c 	.word	0x20002c2c

0800ccd8 <__tz_unlock>:
 800ccd8:	4801      	ldr	r0, [pc, #4]	; (800cce0 <__tz_unlock+0x8>)
 800ccda:	f000 bac8 	b.w	800d26e <__retarget_lock_release>
 800ccde:	bf00      	nop
 800cce0:	20002c2c 	.word	0x20002c2c

0800cce4 <_tzset_unlocked>:
 800cce4:	4b01      	ldr	r3, [pc, #4]	; (800ccec <_tzset_unlocked+0x8>)
 800cce6:	6818      	ldr	r0, [r3, #0]
 800cce8:	f000 b802 	b.w	800ccf0 <_tzset_unlocked_r>
 800ccec:	200004e0 	.word	0x200004e0

0800ccf0 <_tzset_unlocked_r>:
 800ccf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccf4:	b08d      	sub	sp, #52	; 0x34
 800ccf6:	4607      	mov	r7, r0
 800ccf8:	f000 fa04 	bl	800d104 <__gettzinfo>
 800ccfc:	49b1      	ldr	r1, [pc, #708]	; (800cfc4 <_tzset_unlocked_r+0x2d4>)
 800ccfe:	4605      	mov	r5, r0
 800cd00:	4638      	mov	r0, r7
 800cd02:	f000 f9f7 	bl	800d0f4 <_getenv_r>
 800cd06:	4eb0      	ldr	r6, [pc, #704]	; (800cfc8 <_tzset_unlocked_r+0x2d8>)
 800cd08:	4604      	mov	r4, r0
 800cd0a:	b970      	cbnz	r0, 800cd2a <_tzset_unlocked_r+0x3a>
 800cd0c:	4baf      	ldr	r3, [pc, #700]	; (800cfcc <_tzset_unlocked_r+0x2dc>)
 800cd0e:	4ab0      	ldr	r2, [pc, #704]	; (800cfd0 <_tzset_unlocked_r+0x2e0>)
 800cd10:	6018      	str	r0, [r3, #0]
 800cd12:	4bb0      	ldr	r3, [pc, #704]	; (800cfd4 <_tzset_unlocked_r+0x2e4>)
 800cd14:	6018      	str	r0, [r3, #0]
 800cd16:	4bb0      	ldr	r3, [pc, #704]	; (800cfd8 <_tzset_unlocked_r+0x2e8>)
 800cd18:	6830      	ldr	r0, [r6, #0]
 800cd1a:	e9c3 2200 	strd	r2, r2, [r3]
 800cd1e:	f7ff fa93 	bl	800c248 <free>
 800cd22:	6034      	str	r4, [r6, #0]
 800cd24:	b00d      	add	sp, #52	; 0x34
 800cd26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd2a:	6831      	ldr	r1, [r6, #0]
 800cd2c:	2900      	cmp	r1, #0
 800cd2e:	d162      	bne.n	800cdf6 <_tzset_unlocked_r+0x106>
 800cd30:	6830      	ldr	r0, [r6, #0]
 800cd32:	f7ff fa89 	bl	800c248 <free>
 800cd36:	4620      	mov	r0, r4
 800cd38:	f7f3 fa12 	bl	8000160 <strlen>
 800cd3c:	1c41      	adds	r1, r0, #1
 800cd3e:	4638      	mov	r0, r7
 800cd40:	f7ff fd8a 	bl	800c858 <_malloc_r>
 800cd44:	6030      	str	r0, [r6, #0]
 800cd46:	2800      	cmp	r0, #0
 800cd48:	d15a      	bne.n	800ce00 <_tzset_unlocked_r+0x110>
 800cd4a:	7823      	ldrb	r3, [r4, #0]
 800cd4c:	ae0a      	add	r6, sp, #40	; 0x28
 800cd4e:	2b3a      	cmp	r3, #58	; 0x3a
 800cd50:	bf08      	it	eq
 800cd52:	3401      	addeq	r4, #1
 800cd54:	4633      	mov	r3, r6
 800cd56:	4620      	mov	r0, r4
 800cd58:	4aa0      	ldr	r2, [pc, #640]	; (800cfdc <_tzset_unlocked_r+0x2ec>)
 800cd5a:	49a1      	ldr	r1, [pc, #644]	; (800cfe0 <_tzset_unlocked_r+0x2f0>)
 800cd5c:	f000 fee0 	bl	800db20 <siscanf>
 800cd60:	2800      	cmp	r0, #0
 800cd62:	dddf      	ble.n	800cd24 <_tzset_unlocked_r+0x34>
 800cd64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cd66:	18e7      	adds	r7, r4, r3
 800cd68:	5ce3      	ldrb	r3, [r4, r3]
 800cd6a:	2b2d      	cmp	r3, #45	; 0x2d
 800cd6c:	d14c      	bne.n	800ce08 <_tzset_unlocked_r+0x118>
 800cd6e:	f04f 38ff 	mov.w	r8, #4294967295
 800cd72:	3701      	adds	r7, #1
 800cd74:	2400      	movs	r4, #0
 800cd76:	f10d 0a20 	add.w	sl, sp, #32
 800cd7a:	f10d 0b1e 	add.w	fp, sp, #30
 800cd7e:	4633      	mov	r3, r6
 800cd80:	4638      	mov	r0, r7
 800cd82:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 800cd86:	4997      	ldr	r1, [pc, #604]	; (800cfe4 <_tzset_unlocked_r+0x2f4>)
 800cd88:	9603      	str	r6, [sp, #12]
 800cd8a:	f8cd b000 	str.w	fp, [sp]
 800cd8e:	aa07      	add	r2, sp, #28
 800cd90:	f8ad 401e 	strh.w	r4, [sp, #30]
 800cd94:	f8ad 4020 	strh.w	r4, [sp, #32]
 800cd98:	f000 fec2 	bl	800db20 <siscanf>
 800cd9c:	42a0      	cmp	r0, r4
 800cd9e:	ddc1      	ble.n	800cd24 <_tzset_unlocked_r+0x34>
 800cda0:	213c      	movs	r1, #60	; 0x3c
 800cda2:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800cda6:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800cdaa:	f8df 923c 	ldr.w	r9, [pc, #572]	; 800cfe8 <_tzset_unlocked_r+0x2f8>
 800cdae:	fb01 3302 	mla	r3, r1, r2, r3
 800cdb2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800cdb6:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800cdba:	fb01 3302 	mla	r3, r1, r2, r3
 800cdbe:	fb08 f303 	mul.w	r3, r8, r3
 800cdc2:	f8df 8214 	ldr.w	r8, [pc, #532]	; 800cfd8 <_tzset_unlocked_r+0x2e8>
 800cdc6:	62ab      	str	r3, [r5, #40]	; 0x28
 800cdc8:	4b84      	ldr	r3, [pc, #528]	; (800cfdc <_tzset_unlocked_r+0x2ec>)
 800cdca:	464a      	mov	r2, r9
 800cdcc:	f8c8 3000 	str.w	r3, [r8]
 800cdd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cdd2:	4983      	ldr	r1, [pc, #524]	; (800cfe0 <_tzset_unlocked_r+0x2f0>)
 800cdd4:	441f      	add	r7, r3
 800cdd6:	4638      	mov	r0, r7
 800cdd8:	4633      	mov	r3, r6
 800cdda:	f000 fea1 	bl	800db20 <siscanf>
 800cdde:	42a0      	cmp	r0, r4
 800cde0:	dc18      	bgt.n	800ce14 <_tzset_unlocked_r+0x124>
 800cde2:	f8d8 3000 	ldr.w	r3, [r8]
 800cde6:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800cde8:	f8c8 3004 	str.w	r3, [r8, #4]
 800cdec:	4b77      	ldr	r3, [pc, #476]	; (800cfcc <_tzset_unlocked_r+0x2dc>)
 800cdee:	601a      	str	r2, [r3, #0]
 800cdf0:	4b78      	ldr	r3, [pc, #480]	; (800cfd4 <_tzset_unlocked_r+0x2e4>)
 800cdf2:	601c      	str	r4, [r3, #0]
 800cdf4:	e796      	b.n	800cd24 <_tzset_unlocked_r+0x34>
 800cdf6:	f7f3 f9a9 	bl	800014c <strcmp>
 800cdfa:	2800      	cmp	r0, #0
 800cdfc:	d198      	bne.n	800cd30 <_tzset_unlocked_r+0x40>
 800cdfe:	e791      	b.n	800cd24 <_tzset_unlocked_r+0x34>
 800ce00:	4621      	mov	r1, r4
 800ce02:	f7ff fdcd 	bl	800c9a0 <strcpy>
 800ce06:	e7a0      	b.n	800cd4a <_tzset_unlocked_r+0x5a>
 800ce08:	2b2b      	cmp	r3, #43	; 0x2b
 800ce0a:	f04f 0801 	mov.w	r8, #1
 800ce0e:	bf08      	it	eq
 800ce10:	3701      	addeq	r7, #1
 800ce12:	e7af      	b.n	800cd74 <_tzset_unlocked_r+0x84>
 800ce14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce16:	f8c8 9004 	str.w	r9, [r8, #4]
 800ce1a:	18fc      	adds	r4, r7, r3
 800ce1c:	5cfb      	ldrb	r3, [r7, r3]
 800ce1e:	2b2d      	cmp	r3, #45	; 0x2d
 800ce20:	f040 808c 	bne.w	800cf3c <_tzset_unlocked_r+0x24c>
 800ce24:	f04f 37ff 	mov.w	r7, #4294967295
 800ce28:	3401      	adds	r4, #1
 800ce2a:	2300      	movs	r3, #0
 800ce2c:	4620      	mov	r0, r4
 800ce2e:	f8ad 301c 	strh.w	r3, [sp, #28]
 800ce32:	f8ad 301e 	strh.w	r3, [sp, #30]
 800ce36:	f8ad 3020 	strh.w	r3, [sp, #32]
 800ce3a:	930a      	str	r3, [sp, #40]	; 0x28
 800ce3c:	e9cd a602 	strd	sl, r6, [sp, #8]
 800ce40:	4633      	mov	r3, r6
 800ce42:	e9cd b600 	strd	fp, r6, [sp]
 800ce46:	4967      	ldr	r1, [pc, #412]	; (800cfe4 <_tzset_unlocked_r+0x2f4>)
 800ce48:	aa07      	add	r2, sp, #28
 800ce4a:	f000 fe69 	bl	800db20 <siscanf>
 800ce4e:	2800      	cmp	r0, #0
 800ce50:	dc7a      	bgt.n	800cf48 <_tzset_unlocked_r+0x258>
 800ce52:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800ce54:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 800ce58:	462f      	mov	r7, r5
 800ce5a:	f04f 0900 	mov.w	r9, #0
 800ce5e:	652b      	str	r3, [r5, #80]	; 0x50
 800ce60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce62:	441c      	add	r4, r3
 800ce64:	7823      	ldrb	r3, [r4, #0]
 800ce66:	2b2c      	cmp	r3, #44	; 0x2c
 800ce68:	bf08      	it	eq
 800ce6a:	3401      	addeq	r4, #1
 800ce6c:	f894 8000 	ldrb.w	r8, [r4]
 800ce70:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 800ce74:	d17a      	bne.n	800cf6c <_tzset_unlocked_r+0x27c>
 800ce76:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 800ce7a:	e9cd 6301 	strd	r6, r3, [sp, #4]
 800ce7e:	ab09      	add	r3, sp, #36	; 0x24
 800ce80:	9300      	str	r3, [sp, #0]
 800ce82:	4620      	mov	r0, r4
 800ce84:	4633      	mov	r3, r6
 800ce86:	4959      	ldr	r1, [pc, #356]	; (800cfec <_tzset_unlocked_r+0x2fc>)
 800ce88:	9603      	str	r6, [sp, #12]
 800ce8a:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 800ce8e:	f000 fe47 	bl	800db20 <siscanf>
 800ce92:	2803      	cmp	r0, #3
 800ce94:	f47f af46 	bne.w	800cd24 <_tzset_unlocked_r+0x34>
 800ce98:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 800ce9c:	1e4b      	subs	r3, r1, #1
 800ce9e:	2b0b      	cmp	r3, #11
 800cea0:	f63f af40 	bhi.w	800cd24 <_tzset_unlocked_r+0x34>
 800cea4:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 800cea8:	1e53      	subs	r3, r2, #1
 800ceaa:	2b04      	cmp	r3, #4
 800ceac:	f63f af3a 	bhi.w	800cd24 <_tzset_unlocked_r+0x34>
 800ceb0:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 800ceb4:	2b06      	cmp	r3, #6
 800ceb6:	f63f af35 	bhi.w	800cd24 <_tzset_unlocked_r+0x34>
 800ceba:	e9c7 1203 	strd	r1, r2, [r7, #12]
 800cebe:	f887 8008 	strb.w	r8, [r7, #8]
 800cec2:	617b      	str	r3, [r7, #20]
 800cec4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cec6:	eb04 0803 	add.w	r8, r4, r3
 800ceca:	2302      	movs	r3, #2
 800cecc:	f8ad 301c 	strh.w	r3, [sp, #28]
 800ced0:	2300      	movs	r3, #0
 800ced2:	f8ad 301e 	strh.w	r3, [sp, #30]
 800ced6:	f8ad 3020 	strh.w	r3, [sp, #32]
 800ceda:	930a      	str	r3, [sp, #40]	; 0x28
 800cedc:	f898 3000 	ldrb.w	r3, [r8]
 800cee0:	2b2f      	cmp	r3, #47	; 0x2f
 800cee2:	d109      	bne.n	800cef8 <_tzset_unlocked_r+0x208>
 800cee4:	4633      	mov	r3, r6
 800cee6:	4640      	mov	r0, r8
 800cee8:	e9cd a602 	strd	sl, r6, [sp, #8]
 800ceec:	e9cd b600 	strd	fp, r6, [sp]
 800cef0:	493f      	ldr	r1, [pc, #252]	; (800cff0 <_tzset_unlocked_r+0x300>)
 800cef2:	aa07      	add	r2, sp, #28
 800cef4:	f000 fe14 	bl	800db20 <siscanf>
 800cef8:	213c      	movs	r1, #60	; 0x3c
 800cefa:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800cefe:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800cf02:	3728      	adds	r7, #40	; 0x28
 800cf04:	fb01 3302 	mla	r3, r1, r2, r3
 800cf08:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800cf0c:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800cf10:	fb01 3302 	mla	r3, r1, r2, r3
 800cf14:	f847 3c10 	str.w	r3, [r7, #-16]
 800cf18:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800cf1a:	4444      	add	r4, r8
 800cf1c:	f1b9 0f00 	cmp.w	r9, #0
 800cf20:	d021      	beq.n	800cf66 <_tzset_unlocked_r+0x276>
 800cf22:	6868      	ldr	r0, [r5, #4]
 800cf24:	f7ff fe28 	bl	800cb78 <__tzcalc_limits>
 800cf28:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800cf2a:	4b28      	ldr	r3, [pc, #160]	; (800cfcc <_tzset_unlocked_r+0x2dc>)
 800cf2c:	601a      	str	r2, [r3, #0]
 800cf2e:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800cf30:	1a9b      	subs	r3, r3, r2
 800cf32:	bf18      	it	ne
 800cf34:	2301      	movne	r3, #1
 800cf36:	4a27      	ldr	r2, [pc, #156]	; (800cfd4 <_tzset_unlocked_r+0x2e4>)
 800cf38:	6013      	str	r3, [r2, #0]
 800cf3a:	e6f3      	b.n	800cd24 <_tzset_unlocked_r+0x34>
 800cf3c:	2b2b      	cmp	r3, #43	; 0x2b
 800cf3e:	f04f 0701 	mov.w	r7, #1
 800cf42:	bf08      	it	eq
 800cf44:	3401      	addeq	r4, #1
 800cf46:	e770      	b.n	800ce2a <_tzset_unlocked_r+0x13a>
 800cf48:	213c      	movs	r1, #60	; 0x3c
 800cf4a:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800cf4e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800cf52:	fb01 3302 	mla	r3, r1, r2, r3
 800cf56:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800cf5a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800cf5e:	fb01 3302 	mla	r3, r1, r2, r3
 800cf62:	437b      	muls	r3, r7
 800cf64:	e778      	b.n	800ce58 <_tzset_unlocked_r+0x168>
 800cf66:	f04f 0901 	mov.w	r9, #1
 800cf6a:	e77b      	b.n	800ce64 <_tzset_unlocked_r+0x174>
 800cf6c:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 800cf70:	bf0a      	itet	eq
 800cf72:	4643      	moveq	r3, r8
 800cf74:	2344      	movne	r3, #68	; 0x44
 800cf76:	3401      	addeq	r4, #1
 800cf78:	220a      	movs	r2, #10
 800cf7a:	4620      	mov	r0, r4
 800cf7c:	a90b      	add	r1, sp, #44	; 0x2c
 800cf7e:	9305      	str	r3, [sp, #20]
 800cf80:	f000 fec6 	bl	800dd10 <strtoul>
 800cf84:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800cf88:	9b05      	ldr	r3, [sp, #20]
 800cf8a:	45a0      	cmp	r8, r4
 800cf8c:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 800cf90:	d114      	bne.n	800cfbc <_tzset_unlocked_r+0x2cc>
 800cf92:	234d      	movs	r3, #77	; 0x4d
 800cf94:	f1b9 0f00 	cmp.w	r9, #0
 800cf98:	d107      	bne.n	800cfaa <_tzset_unlocked_r+0x2ba>
 800cf9a:	2103      	movs	r1, #3
 800cf9c:	722b      	strb	r3, [r5, #8]
 800cf9e:	2302      	movs	r3, #2
 800cfa0:	f8c5 9014 	str.w	r9, [r5, #20]
 800cfa4:	e9c5 1303 	strd	r1, r3, [r5, #12]
 800cfa8:	e78f      	b.n	800ceca <_tzset_unlocked_r+0x1da>
 800cfaa:	220b      	movs	r2, #11
 800cfac:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 800cfb0:	2301      	movs	r3, #1
 800cfb2:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 800cfb6:	2300      	movs	r3, #0
 800cfb8:	63eb      	str	r3, [r5, #60]	; 0x3c
 800cfba:	e786      	b.n	800ceca <_tzset_unlocked_r+0x1da>
 800cfbc:	b280      	uxth	r0, r0
 800cfbe:	723b      	strb	r3, [r7, #8]
 800cfc0:	6178      	str	r0, [r7, #20]
 800cfc2:	e782      	b.n	800ceca <_tzset_unlocked_r+0x1da>
 800cfc4:	0800f75d 	.word	0x0800f75d
 800cfc8:	20002c1c 	.word	0x20002c1c
 800cfcc:	20002c24 	.word	0x20002c24
 800cfd0:	0800f760 	.word	0x0800f760
 800cfd4:	20002c20 	.word	0x20002c20
 800cfd8:	20000544 	.word	0x20000544
 800cfdc:	20002c0f 	.word	0x20002c0f
 800cfe0:	0800f764 	.word	0x0800f764
 800cfe4:	0800f787 	.word	0x0800f787
 800cfe8:	20002c04 	.word	0x20002c04
 800cfec:	0800f773 	.word	0x0800f773
 800cff0:	0800f786 	.word	0x0800f786

0800cff4 <__assert_func>:
 800cff4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cff6:	4614      	mov	r4, r2
 800cff8:	461a      	mov	r2, r3
 800cffa:	4b09      	ldr	r3, [pc, #36]	; (800d020 <__assert_func+0x2c>)
 800cffc:	4605      	mov	r5, r0
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	68d8      	ldr	r0, [r3, #12]
 800d002:	b14c      	cbz	r4, 800d018 <__assert_func+0x24>
 800d004:	4b07      	ldr	r3, [pc, #28]	; (800d024 <__assert_func+0x30>)
 800d006:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d00a:	9100      	str	r1, [sp, #0]
 800d00c:	462b      	mov	r3, r5
 800d00e:	4906      	ldr	r1, [pc, #24]	; (800d028 <__assert_func+0x34>)
 800d010:	f000 f822 	bl	800d058 <fiprintf>
 800d014:	f000 ff58 	bl	800dec8 <abort>
 800d018:	4b04      	ldr	r3, [pc, #16]	; (800d02c <__assert_func+0x38>)
 800d01a:	461c      	mov	r4, r3
 800d01c:	e7f3      	b.n	800d006 <__assert_func+0x12>
 800d01e:	bf00      	nop
 800d020:	200004e0 	.word	0x200004e0
 800d024:	0800f799 	.word	0x0800f799
 800d028:	0800f7a6 	.word	0x0800f7a6
 800d02c:	0800f7d4 	.word	0x0800f7d4

0800d030 <div>:
 800d030:	b510      	push	{r4, lr}
 800d032:	fb91 f4f2 	sdiv	r4, r1, r2
 800d036:	2900      	cmp	r1, #0
 800d038:	fb02 1314 	mls	r3, r2, r4, r1
 800d03c:	db06      	blt.n	800d04c <div+0x1c>
 800d03e:	2b00      	cmp	r3, #0
 800d040:	da01      	bge.n	800d046 <div+0x16>
 800d042:	3401      	adds	r4, #1
 800d044:	1a9b      	subs	r3, r3, r2
 800d046:	e9c0 4300 	strd	r4, r3, [r0]
 800d04a:	bd10      	pop	{r4, pc}
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	bfc4      	itt	gt
 800d050:	f104 34ff 	addgt.w	r4, r4, #4294967295
 800d054:	189b      	addgt	r3, r3, r2
 800d056:	e7f6      	b.n	800d046 <div+0x16>

0800d058 <fiprintf>:
 800d058:	b40e      	push	{r1, r2, r3}
 800d05a:	b503      	push	{r0, r1, lr}
 800d05c:	4601      	mov	r1, r0
 800d05e:	ab03      	add	r3, sp, #12
 800d060:	4805      	ldr	r0, [pc, #20]	; (800d078 <fiprintf+0x20>)
 800d062:	f853 2b04 	ldr.w	r2, [r3], #4
 800d066:	6800      	ldr	r0, [r0, #0]
 800d068:	9301      	str	r3, [sp, #4]
 800d06a:	f000 fa93 	bl	800d594 <_vfiprintf_r>
 800d06e:	b002      	add	sp, #8
 800d070:	f85d eb04 	ldr.w	lr, [sp], #4
 800d074:	b003      	add	sp, #12
 800d076:	4770      	bx	lr
 800d078:	200004e0 	.word	0x200004e0

0800d07c <_findenv_r>:
 800d07c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d080:	f8df a06c 	ldr.w	sl, [pc, #108]	; 800d0f0 <_findenv_r+0x74>
 800d084:	4607      	mov	r7, r0
 800d086:	4689      	mov	r9, r1
 800d088:	4616      	mov	r6, r2
 800d08a:	f000 ff35 	bl	800def8 <__env_lock>
 800d08e:	f8da 4000 	ldr.w	r4, [sl]
 800d092:	b134      	cbz	r4, 800d0a2 <_findenv_r+0x26>
 800d094:	464b      	mov	r3, r9
 800d096:	4698      	mov	r8, r3
 800d098:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d09c:	b13a      	cbz	r2, 800d0ae <_findenv_r+0x32>
 800d09e:	2a3d      	cmp	r2, #61	; 0x3d
 800d0a0:	d1f9      	bne.n	800d096 <_findenv_r+0x1a>
 800d0a2:	4638      	mov	r0, r7
 800d0a4:	f000 ff2e 	bl	800df04 <__env_unlock>
 800d0a8:	2000      	movs	r0, #0
 800d0aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0ae:	eba8 0809 	sub.w	r8, r8, r9
 800d0b2:	46a3      	mov	fp, r4
 800d0b4:	f854 0b04 	ldr.w	r0, [r4], #4
 800d0b8:	2800      	cmp	r0, #0
 800d0ba:	d0f2      	beq.n	800d0a2 <_findenv_r+0x26>
 800d0bc:	4642      	mov	r2, r8
 800d0be:	4649      	mov	r1, r9
 800d0c0:	f000 fd9d 	bl	800dbfe <strncmp>
 800d0c4:	2800      	cmp	r0, #0
 800d0c6:	d1f4      	bne.n	800d0b2 <_findenv_r+0x36>
 800d0c8:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800d0cc:	eb03 0508 	add.w	r5, r3, r8
 800d0d0:	f813 3008 	ldrb.w	r3, [r3, r8]
 800d0d4:	2b3d      	cmp	r3, #61	; 0x3d
 800d0d6:	d1ec      	bne.n	800d0b2 <_findenv_r+0x36>
 800d0d8:	f8da 3000 	ldr.w	r3, [sl]
 800d0dc:	4638      	mov	r0, r7
 800d0de:	ebab 0303 	sub.w	r3, fp, r3
 800d0e2:	109b      	asrs	r3, r3, #2
 800d0e4:	6033      	str	r3, [r6, #0]
 800d0e6:	f000 ff0d 	bl	800df04 <__env_unlock>
 800d0ea:	1c68      	adds	r0, r5, #1
 800d0ec:	e7dd      	b.n	800d0aa <_findenv_r+0x2e>
 800d0ee:	bf00      	nop
 800d0f0:	2000048c 	.word	0x2000048c

0800d0f4 <_getenv_r>:
 800d0f4:	b507      	push	{r0, r1, r2, lr}
 800d0f6:	aa01      	add	r2, sp, #4
 800d0f8:	f7ff ffc0 	bl	800d07c <_findenv_r>
 800d0fc:	b003      	add	sp, #12
 800d0fe:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800d104 <__gettzinfo>:
 800d104:	4800      	ldr	r0, [pc, #0]	; (800d108 <__gettzinfo+0x4>)
 800d106:	4770      	bx	lr
 800d108:	20000550 	.word	0x20000550

0800d10c <gmtime_r>:
 800d10c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d110:	e9d0 6700 	ldrd	r6, r7, [r0]
 800d114:	460c      	mov	r4, r1
 800d116:	2300      	movs	r3, #0
 800d118:	4630      	mov	r0, r6
 800d11a:	4639      	mov	r1, r7
 800d11c:	4a4e      	ldr	r2, [pc, #312]	; (800d258 <gmtime_r+0x14c>)
 800d11e:	f7f3 f847 	bl	80001b0 <__aeabi_ldivmod>
 800d122:	4639      	mov	r1, r7
 800d124:	4605      	mov	r5, r0
 800d126:	2300      	movs	r3, #0
 800d128:	4630      	mov	r0, r6
 800d12a:	4a4b      	ldr	r2, [pc, #300]	; (800d258 <gmtime_r+0x14c>)
 800d12c:	f7f3 f840 	bl	80001b0 <__aeabi_ldivmod>
 800d130:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 800d134:	2a00      	cmp	r2, #0
 800d136:	bfbc      	itt	lt
 800d138:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 800d13c:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 800d140:	fbb2 f1f0 	udiv	r1, r2, r0
 800d144:	fb00 2211 	mls	r2, r0, r1, r2
 800d148:	f04f 003c 	mov.w	r0, #60	; 0x3c
 800d14c:	60a1      	str	r1, [r4, #8]
 800d14e:	fbb2 f1f0 	udiv	r1, r2, r0
 800d152:	fb00 2211 	mls	r2, r0, r1, r2
 800d156:	6061      	str	r1, [r4, #4]
 800d158:	f04f 0107 	mov.w	r1, #7
 800d15c:	f505 232f 	add.w	r3, r5, #716800	; 0xaf000
 800d160:	bfac      	ite	ge
 800d162:	f603 236c 	addwge	r3, r3, #2668	; 0xa6c
 800d166:	f603 236b 	addwlt	r3, r3, #2667	; 0xa6b
 800d16a:	6022      	str	r2, [r4, #0]
 800d16c:	1cda      	adds	r2, r3, #3
 800d16e:	fb92 f1f1 	sdiv	r1, r2, r1
 800d172:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800d176:	1a52      	subs	r2, r2, r1
 800d178:	bf48      	it	mi
 800d17a:	3207      	addmi	r2, #7
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	4d37      	ldr	r5, [pc, #220]	; (800d25c <gmtime_r+0x150>)
 800d180:	61a2      	str	r2, [r4, #24]
 800d182:	bfbd      	ittte	lt
 800d184:	f5a3 320e 	sublt.w	r2, r3, #145408	; 0x23800
 800d188:	f5a2 722c 	sublt.w	r2, r2, #688	; 0x2b0
 800d18c:	fb92 f5f5 	sdivlt	r5, r2, r5
 800d190:	fb93 f5f5 	sdivge	r5, r3, r5
 800d194:	4832      	ldr	r0, [pc, #200]	; (800d260 <gmtime_r+0x154>)
 800d196:	f648 62ac 	movw	r2, #36524	; 0x8eac
 800d19a:	fb00 3005 	mla	r0, r0, r5, r3
 800d19e:	f240 53b4 	movw	r3, #1460	; 0x5b4
 800d1a2:	fbb0 f2f2 	udiv	r2, r0, r2
 800d1a6:	fbb0 f1f3 	udiv	r1, r0, r3
 800d1aa:	4402      	add	r2, r0
 800d1ac:	1a52      	subs	r2, r2, r1
 800d1ae:	492d      	ldr	r1, [pc, #180]	; (800d264 <gmtime_r+0x158>)
 800d1b0:	f240 1c6d 	movw	ip, #365	; 0x16d
 800d1b4:	fbb0 f1f1 	udiv	r1, r0, r1
 800d1b8:	1a52      	subs	r2, r2, r1
 800d1ba:	fbb2 f1fc 	udiv	r1, r2, ip
 800d1be:	2764      	movs	r7, #100	; 0x64
 800d1c0:	fbb2 f3f3 	udiv	r3, r2, r3
 800d1c4:	fbb1 f6f7 	udiv	r6, r1, r7
 800d1c8:	2299      	movs	r2, #153	; 0x99
 800d1ca:	1af3      	subs	r3, r6, r3
 800d1cc:	4403      	add	r3, r0
 800d1ce:	fb0c 3311 	mls	r3, ip, r1, r3
 800d1d2:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
 800d1d6:	f10e 0e02 	add.w	lr, lr, #2
 800d1da:	fbbe f0f2 	udiv	r0, lr, r2
 800d1de:	f04f 0805 	mov.w	r8, #5
 800d1e2:	4342      	muls	r2, r0
 800d1e4:	3202      	adds	r2, #2
 800d1e6:	fbb2 f2f8 	udiv	r2, r2, r8
 800d1ea:	f103 0c01 	add.w	ip, r3, #1
 800d1ee:	ebac 0c02 	sub.w	ip, ip, r2
 800d1f2:	f240 52f9 	movw	r2, #1529	; 0x5f9
 800d1f6:	4596      	cmp	lr, r2
 800d1f8:	bf94      	ite	ls
 800d1fa:	2202      	movls	r2, #2
 800d1fc:	f06f 0209 	mvnhi.w	r2, #9
 800d200:	4410      	add	r0, r2
 800d202:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800d206:	fb02 1505 	mla	r5, r2, r5, r1
 800d20a:	2801      	cmp	r0, #1
 800d20c:	bf98      	it	ls
 800d20e:	3501      	addls	r5, #1
 800d210:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 800d214:	d30d      	bcc.n	800d232 <gmtime_r+0x126>
 800d216:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800d21a:	61e3      	str	r3, [r4, #28]
 800d21c:	2300      	movs	r3, #0
 800d21e:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 800d222:	e9c4 0504 	strd	r0, r5, [r4, #16]
 800d226:	f8c4 c00c 	str.w	ip, [r4, #12]
 800d22a:	4620      	mov	r0, r4
 800d22c:	6223      	str	r3, [r4, #32]
 800d22e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d232:	078a      	lsls	r2, r1, #30
 800d234:	d102      	bne.n	800d23c <gmtime_r+0x130>
 800d236:	fb07 1616 	mls	r6, r7, r6, r1
 800d23a:	b95e      	cbnz	r6, 800d254 <gmtime_r+0x148>
 800d23c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800d240:	fbb1 f6f2 	udiv	r6, r1, r2
 800d244:	fb02 1216 	mls	r2, r2, r6, r1
 800d248:	fab2 f282 	clz	r2, r2
 800d24c:	0952      	lsrs	r2, r2, #5
 800d24e:	333b      	adds	r3, #59	; 0x3b
 800d250:	4413      	add	r3, r2
 800d252:	e7e2      	b.n	800d21a <gmtime_r+0x10e>
 800d254:	2201      	movs	r2, #1
 800d256:	e7fa      	b.n	800d24e <gmtime_r+0x142>
 800d258:	00015180 	.word	0x00015180
 800d25c:	00023ab1 	.word	0x00023ab1
 800d260:	fffdc54f 	.word	0xfffdc54f
 800d264:	00023ab0 	.word	0x00023ab0

0800d268 <__retarget_lock_init_recursive>:
 800d268:	4770      	bx	lr

0800d26a <__retarget_lock_acquire>:
 800d26a:	4770      	bx	lr

0800d26c <__retarget_lock_acquire_recursive>:
 800d26c:	4770      	bx	lr

0800d26e <__retarget_lock_release>:
 800d26e:	4770      	bx	lr

0800d270 <__retarget_lock_release_recursive>:
 800d270:	4770      	bx	lr
	...

0800d274 <__malloc_lock>:
 800d274:	4801      	ldr	r0, [pc, #4]	; (800d27c <__malloc_lock+0x8>)
 800d276:	f7ff bff9 	b.w	800d26c <__retarget_lock_acquire_recursive>
 800d27a:	bf00      	nop
 800d27c:	20002c29 	.word	0x20002c29

0800d280 <__malloc_unlock>:
 800d280:	4801      	ldr	r0, [pc, #4]	; (800d288 <__malloc_unlock+0x8>)
 800d282:	f7ff bff5 	b.w	800d270 <__retarget_lock_release_recursive>
 800d286:	bf00      	nop
 800d288:	20002c29 	.word	0x20002c29

0800d28c <__ssputs_r>:
 800d28c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d290:	688e      	ldr	r6, [r1, #8]
 800d292:	4682      	mov	sl, r0
 800d294:	429e      	cmp	r6, r3
 800d296:	460c      	mov	r4, r1
 800d298:	4690      	mov	r8, r2
 800d29a:	461f      	mov	r7, r3
 800d29c:	d838      	bhi.n	800d310 <__ssputs_r+0x84>
 800d29e:	898a      	ldrh	r2, [r1, #12]
 800d2a0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d2a4:	d032      	beq.n	800d30c <__ssputs_r+0x80>
 800d2a6:	6825      	ldr	r5, [r4, #0]
 800d2a8:	6909      	ldr	r1, [r1, #16]
 800d2aa:	3301      	adds	r3, #1
 800d2ac:	eba5 0901 	sub.w	r9, r5, r1
 800d2b0:	6965      	ldr	r5, [r4, #20]
 800d2b2:	444b      	add	r3, r9
 800d2b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d2b8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d2bc:	106d      	asrs	r5, r5, #1
 800d2be:	429d      	cmp	r5, r3
 800d2c0:	bf38      	it	cc
 800d2c2:	461d      	movcc	r5, r3
 800d2c4:	0553      	lsls	r3, r2, #21
 800d2c6:	d531      	bpl.n	800d32c <__ssputs_r+0xa0>
 800d2c8:	4629      	mov	r1, r5
 800d2ca:	f7ff fac5 	bl	800c858 <_malloc_r>
 800d2ce:	4606      	mov	r6, r0
 800d2d0:	b950      	cbnz	r0, 800d2e8 <__ssputs_r+0x5c>
 800d2d2:	230c      	movs	r3, #12
 800d2d4:	f04f 30ff 	mov.w	r0, #4294967295
 800d2d8:	f8ca 3000 	str.w	r3, [sl]
 800d2dc:	89a3      	ldrh	r3, [r4, #12]
 800d2de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d2e2:	81a3      	strh	r3, [r4, #12]
 800d2e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d2e8:	464a      	mov	r2, r9
 800d2ea:	6921      	ldr	r1, [r4, #16]
 800d2ec:	f7fe ffc4 	bl	800c278 <memcpy>
 800d2f0:	89a3      	ldrh	r3, [r4, #12]
 800d2f2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d2f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d2fa:	81a3      	strh	r3, [r4, #12]
 800d2fc:	6126      	str	r6, [r4, #16]
 800d2fe:	444e      	add	r6, r9
 800d300:	6026      	str	r6, [r4, #0]
 800d302:	463e      	mov	r6, r7
 800d304:	6165      	str	r5, [r4, #20]
 800d306:	eba5 0509 	sub.w	r5, r5, r9
 800d30a:	60a5      	str	r5, [r4, #8]
 800d30c:	42be      	cmp	r6, r7
 800d30e:	d900      	bls.n	800d312 <__ssputs_r+0x86>
 800d310:	463e      	mov	r6, r7
 800d312:	4632      	mov	r2, r6
 800d314:	4641      	mov	r1, r8
 800d316:	6820      	ldr	r0, [r4, #0]
 800d318:	f001 f834 	bl	800e384 <memmove>
 800d31c:	68a3      	ldr	r3, [r4, #8]
 800d31e:	2000      	movs	r0, #0
 800d320:	1b9b      	subs	r3, r3, r6
 800d322:	60a3      	str	r3, [r4, #8]
 800d324:	6823      	ldr	r3, [r4, #0]
 800d326:	4433      	add	r3, r6
 800d328:	6023      	str	r3, [r4, #0]
 800d32a:	e7db      	b.n	800d2e4 <__ssputs_r+0x58>
 800d32c:	462a      	mov	r2, r5
 800d32e:	f001 f843 	bl	800e3b8 <_realloc_r>
 800d332:	4606      	mov	r6, r0
 800d334:	2800      	cmp	r0, #0
 800d336:	d1e1      	bne.n	800d2fc <__ssputs_r+0x70>
 800d338:	4650      	mov	r0, sl
 800d33a:	6921      	ldr	r1, [r4, #16]
 800d33c:	f7ff fa24 	bl	800c788 <_free_r>
 800d340:	e7c7      	b.n	800d2d2 <__ssputs_r+0x46>
	...

0800d344 <_svfiprintf_r>:
 800d344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d348:	4698      	mov	r8, r3
 800d34a:	898b      	ldrh	r3, [r1, #12]
 800d34c:	4607      	mov	r7, r0
 800d34e:	061b      	lsls	r3, r3, #24
 800d350:	460d      	mov	r5, r1
 800d352:	4614      	mov	r4, r2
 800d354:	b09d      	sub	sp, #116	; 0x74
 800d356:	d50e      	bpl.n	800d376 <_svfiprintf_r+0x32>
 800d358:	690b      	ldr	r3, [r1, #16]
 800d35a:	b963      	cbnz	r3, 800d376 <_svfiprintf_r+0x32>
 800d35c:	2140      	movs	r1, #64	; 0x40
 800d35e:	f7ff fa7b 	bl	800c858 <_malloc_r>
 800d362:	6028      	str	r0, [r5, #0]
 800d364:	6128      	str	r0, [r5, #16]
 800d366:	b920      	cbnz	r0, 800d372 <_svfiprintf_r+0x2e>
 800d368:	230c      	movs	r3, #12
 800d36a:	603b      	str	r3, [r7, #0]
 800d36c:	f04f 30ff 	mov.w	r0, #4294967295
 800d370:	e0d1      	b.n	800d516 <_svfiprintf_r+0x1d2>
 800d372:	2340      	movs	r3, #64	; 0x40
 800d374:	616b      	str	r3, [r5, #20]
 800d376:	2300      	movs	r3, #0
 800d378:	9309      	str	r3, [sp, #36]	; 0x24
 800d37a:	2320      	movs	r3, #32
 800d37c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d380:	2330      	movs	r3, #48	; 0x30
 800d382:	f04f 0901 	mov.w	r9, #1
 800d386:	f8cd 800c 	str.w	r8, [sp, #12]
 800d38a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800d530 <_svfiprintf_r+0x1ec>
 800d38e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d392:	4623      	mov	r3, r4
 800d394:	469a      	mov	sl, r3
 800d396:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d39a:	b10a      	cbz	r2, 800d3a0 <_svfiprintf_r+0x5c>
 800d39c:	2a25      	cmp	r2, #37	; 0x25
 800d39e:	d1f9      	bne.n	800d394 <_svfiprintf_r+0x50>
 800d3a0:	ebba 0b04 	subs.w	fp, sl, r4
 800d3a4:	d00b      	beq.n	800d3be <_svfiprintf_r+0x7a>
 800d3a6:	465b      	mov	r3, fp
 800d3a8:	4622      	mov	r2, r4
 800d3aa:	4629      	mov	r1, r5
 800d3ac:	4638      	mov	r0, r7
 800d3ae:	f7ff ff6d 	bl	800d28c <__ssputs_r>
 800d3b2:	3001      	adds	r0, #1
 800d3b4:	f000 80aa 	beq.w	800d50c <_svfiprintf_r+0x1c8>
 800d3b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d3ba:	445a      	add	r2, fp
 800d3bc:	9209      	str	r2, [sp, #36]	; 0x24
 800d3be:	f89a 3000 	ldrb.w	r3, [sl]
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	f000 80a2 	beq.w	800d50c <_svfiprintf_r+0x1c8>
 800d3c8:	2300      	movs	r3, #0
 800d3ca:	f04f 32ff 	mov.w	r2, #4294967295
 800d3ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d3d2:	f10a 0a01 	add.w	sl, sl, #1
 800d3d6:	9304      	str	r3, [sp, #16]
 800d3d8:	9307      	str	r3, [sp, #28]
 800d3da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d3de:	931a      	str	r3, [sp, #104]	; 0x68
 800d3e0:	4654      	mov	r4, sl
 800d3e2:	2205      	movs	r2, #5
 800d3e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d3e8:	4851      	ldr	r0, [pc, #324]	; (800d530 <_svfiprintf_r+0x1ec>)
 800d3ea:	f000 ffbd 	bl	800e368 <memchr>
 800d3ee:	9a04      	ldr	r2, [sp, #16]
 800d3f0:	b9d8      	cbnz	r0, 800d42a <_svfiprintf_r+0xe6>
 800d3f2:	06d0      	lsls	r0, r2, #27
 800d3f4:	bf44      	itt	mi
 800d3f6:	2320      	movmi	r3, #32
 800d3f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d3fc:	0711      	lsls	r1, r2, #28
 800d3fe:	bf44      	itt	mi
 800d400:	232b      	movmi	r3, #43	; 0x2b
 800d402:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d406:	f89a 3000 	ldrb.w	r3, [sl]
 800d40a:	2b2a      	cmp	r3, #42	; 0x2a
 800d40c:	d015      	beq.n	800d43a <_svfiprintf_r+0xf6>
 800d40e:	4654      	mov	r4, sl
 800d410:	2000      	movs	r0, #0
 800d412:	f04f 0c0a 	mov.w	ip, #10
 800d416:	9a07      	ldr	r2, [sp, #28]
 800d418:	4621      	mov	r1, r4
 800d41a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d41e:	3b30      	subs	r3, #48	; 0x30
 800d420:	2b09      	cmp	r3, #9
 800d422:	d94e      	bls.n	800d4c2 <_svfiprintf_r+0x17e>
 800d424:	b1b0      	cbz	r0, 800d454 <_svfiprintf_r+0x110>
 800d426:	9207      	str	r2, [sp, #28]
 800d428:	e014      	b.n	800d454 <_svfiprintf_r+0x110>
 800d42a:	eba0 0308 	sub.w	r3, r0, r8
 800d42e:	fa09 f303 	lsl.w	r3, r9, r3
 800d432:	4313      	orrs	r3, r2
 800d434:	46a2      	mov	sl, r4
 800d436:	9304      	str	r3, [sp, #16]
 800d438:	e7d2      	b.n	800d3e0 <_svfiprintf_r+0x9c>
 800d43a:	9b03      	ldr	r3, [sp, #12]
 800d43c:	1d19      	adds	r1, r3, #4
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	9103      	str	r1, [sp, #12]
 800d442:	2b00      	cmp	r3, #0
 800d444:	bfbb      	ittet	lt
 800d446:	425b      	neglt	r3, r3
 800d448:	f042 0202 	orrlt.w	r2, r2, #2
 800d44c:	9307      	strge	r3, [sp, #28]
 800d44e:	9307      	strlt	r3, [sp, #28]
 800d450:	bfb8      	it	lt
 800d452:	9204      	strlt	r2, [sp, #16]
 800d454:	7823      	ldrb	r3, [r4, #0]
 800d456:	2b2e      	cmp	r3, #46	; 0x2e
 800d458:	d10c      	bne.n	800d474 <_svfiprintf_r+0x130>
 800d45a:	7863      	ldrb	r3, [r4, #1]
 800d45c:	2b2a      	cmp	r3, #42	; 0x2a
 800d45e:	d135      	bne.n	800d4cc <_svfiprintf_r+0x188>
 800d460:	9b03      	ldr	r3, [sp, #12]
 800d462:	3402      	adds	r4, #2
 800d464:	1d1a      	adds	r2, r3, #4
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	9203      	str	r2, [sp, #12]
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	bfb8      	it	lt
 800d46e:	f04f 33ff 	movlt.w	r3, #4294967295
 800d472:	9305      	str	r3, [sp, #20]
 800d474:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800d534 <_svfiprintf_r+0x1f0>
 800d478:	2203      	movs	r2, #3
 800d47a:	4650      	mov	r0, sl
 800d47c:	7821      	ldrb	r1, [r4, #0]
 800d47e:	f000 ff73 	bl	800e368 <memchr>
 800d482:	b140      	cbz	r0, 800d496 <_svfiprintf_r+0x152>
 800d484:	2340      	movs	r3, #64	; 0x40
 800d486:	eba0 000a 	sub.w	r0, r0, sl
 800d48a:	fa03 f000 	lsl.w	r0, r3, r0
 800d48e:	9b04      	ldr	r3, [sp, #16]
 800d490:	3401      	adds	r4, #1
 800d492:	4303      	orrs	r3, r0
 800d494:	9304      	str	r3, [sp, #16]
 800d496:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d49a:	2206      	movs	r2, #6
 800d49c:	4826      	ldr	r0, [pc, #152]	; (800d538 <_svfiprintf_r+0x1f4>)
 800d49e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d4a2:	f000 ff61 	bl	800e368 <memchr>
 800d4a6:	2800      	cmp	r0, #0
 800d4a8:	d038      	beq.n	800d51c <_svfiprintf_r+0x1d8>
 800d4aa:	4b24      	ldr	r3, [pc, #144]	; (800d53c <_svfiprintf_r+0x1f8>)
 800d4ac:	bb1b      	cbnz	r3, 800d4f6 <_svfiprintf_r+0x1b2>
 800d4ae:	9b03      	ldr	r3, [sp, #12]
 800d4b0:	3307      	adds	r3, #7
 800d4b2:	f023 0307 	bic.w	r3, r3, #7
 800d4b6:	3308      	adds	r3, #8
 800d4b8:	9303      	str	r3, [sp, #12]
 800d4ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d4bc:	4433      	add	r3, r6
 800d4be:	9309      	str	r3, [sp, #36]	; 0x24
 800d4c0:	e767      	b.n	800d392 <_svfiprintf_r+0x4e>
 800d4c2:	460c      	mov	r4, r1
 800d4c4:	2001      	movs	r0, #1
 800d4c6:	fb0c 3202 	mla	r2, ip, r2, r3
 800d4ca:	e7a5      	b.n	800d418 <_svfiprintf_r+0xd4>
 800d4cc:	2300      	movs	r3, #0
 800d4ce:	f04f 0c0a 	mov.w	ip, #10
 800d4d2:	4619      	mov	r1, r3
 800d4d4:	3401      	adds	r4, #1
 800d4d6:	9305      	str	r3, [sp, #20]
 800d4d8:	4620      	mov	r0, r4
 800d4da:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d4de:	3a30      	subs	r2, #48	; 0x30
 800d4e0:	2a09      	cmp	r2, #9
 800d4e2:	d903      	bls.n	800d4ec <_svfiprintf_r+0x1a8>
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d0c5      	beq.n	800d474 <_svfiprintf_r+0x130>
 800d4e8:	9105      	str	r1, [sp, #20]
 800d4ea:	e7c3      	b.n	800d474 <_svfiprintf_r+0x130>
 800d4ec:	4604      	mov	r4, r0
 800d4ee:	2301      	movs	r3, #1
 800d4f0:	fb0c 2101 	mla	r1, ip, r1, r2
 800d4f4:	e7f0      	b.n	800d4d8 <_svfiprintf_r+0x194>
 800d4f6:	ab03      	add	r3, sp, #12
 800d4f8:	9300      	str	r3, [sp, #0]
 800d4fa:	462a      	mov	r2, r5
 800d4fc:	4638      	mov	r0, r7
 800d4fe:	4b10      	ldr	r3, [pc, #64]	; (800d540 <_svfiprintf_r+0x1fc>)
 800d500:	a904      	add	r1, sp, #16
 800d502:	f3af 8000 	nop.w
 800d506:	1c42      	adds	r2, r0, #1
 800d508:	4606      	mov	r6, r0
 800d50a:	d1d6      	bne.n	800d4ba <_svfiprintf_r+0x176>
 800d50c:	89ab      	ldrh	r3, [r5, #12]
 800d50e:	065b      	lsls	r3, r3, #25
 800d510:	f53f af2c 	bmi.w	800d36c <_svfiprintf_r+0x28>
 800d514:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d516:	b01d      	add	sp, #116	; 0x74
 800d518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d51c:	ab03      	add	r3, sp, #12
 800d51e:	9300      	str	r3, [sp, #0]
 800d520:	462a      	mov	r2, r5
 800d522:	4638      	mov	r0, r7
 800d524:	4b06      	ldr	r3, [pc, #24]	; (800d540 <_svfiprintf_r+0x1fc>)
 800d526:	a904      	add	r1, sp, #16
 800d528:	f000 f9d4 	bl	800d8d4 <_printf_i>
 800d52c:	e7eb      	b.n	800d506 <_svfiprintf_r+0x1c2>
 800d52e:	bf00      	nop
 800d530:	0800f8d6 	.word	0x0800f8d6
 800d534:	0800f8dc 	.word	0x0800f8dc
 800d538:	0800f8e0 	.word	0x0800f8e0
 800d53c:	00000000 	.word	0x00000000
 800d540:	0800d28d 	.word	0x0800d28d

0800d544 <__sfputc_r>:
 800d544:	6893      	ldr	r3, [r2, #8]
 800d546:	b410      	push	{r4}
 800d548:	3b01      	subs	r3, #1
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	6093      	str	r3, [r2, #8]
 800d54e:	da07      	bge.n	800d560 <__sfputc_r+0x1c>
 800d550:	6994      	ldr	r4, [r2, #24]
 800d552:	42a3      	cmp	r3, r4
 800d554:	db01      	blt.n	800d55a <__sfputc_r+0x16>
 800d556:	290a      	cmp	r1, #10
 800d558:	d102      	bne.n	800d560 <__sfputc_r+0x1c>
 800d55a:	bc10      	pop	{r4}
 800d55c:	f000 bbe2 	b.w	800dd24 <__swbuf_r>
 800d560:	6813      	ldr	r3, [r2, #0]
 800d562:	1c58      	adds	r0, r3, #1
 800d564:	6010      	str	r0, [r2, #0]
 800d566:	7019      	strb	r1, [r3, #0]
 800d568:	4608      	mov	r0, r1
 800d56a:	bc10      	pop	{r4}
 800d56c:	4770      	bx	lr

0800d56e <__sfputs_r>:
 800d56e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d570:	4606      	mov	r6, r0
 800d572:	460f      	mov	r7, r1
 800d574:	4614      	mov	r4, r2
 800d576:	18d5      	adds	r5, r2, r3
 800d578:	42ac      	cmp	r4, r5
 800d57a:	d101      	bne.n	800d580 <__sfputs_r+0x12>
 800d57c:	2000      	movs	r0, #0
 800d57e:	e007      	b.n	800d590 <__sfputs_r+0x22>
 800d580:	463a      	mov	r2, r7
 800d582:	4630      	mov	r0, r6
 800d584:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d588:	f7ff ffdc 	bl	800d544 <__sfputc_r>
 800d58c:	1c43      	adds	r3, r0, #1
 800d58e:	d1f3      	bne.n	800d578 <__sfputs_r+0xa>
 800d590:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d594 <_vfiprintf_r>:
 800d594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d598:	460d      	mov	r5, r1
 800d59a:	4614      	mov	r4, r2
 800d59c:	4698      	mov	r8, r3
 800d59e:	4606      	mov	r6, r0
 800d5a0:	b09d      	sub	sp, #116	; 0x74
 800d5a2:	b118      	cbz	r0, 800d5ac <_vfiprintf_r+0x18>
 800d5a4:	6983      	ldr	r3, [r0, #24]
 800d5a6:	b90b      	cbnz	r3, 800d5ac <_vfiprintf_r+0x18>
 800d5a8:	f000 fdc8 	bl	800e13c <__sinit>
 800d5ac:	4b89      	ldr	r3, [pc, #548]	; (800d7d4 <_vfiprintf_r+0x240>)
 800d5ae:	429d      	cmp	r5, r3
 800d5b0:	d11b      	bne.n	800d5ea <_vfiprintf_r+0x56>
 800d5b2:	6875      	ldr	r5, [r6, #4]
 800d5b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d5b6:	07d9      	lsls	r1, r3, #31
 800d5b8:	d405      	bmi.n	800d5c6 <_vfiprintf_r+0x32>
 800d5ba:	89ab      	ldrh	r3, [r5, #12]
 800d5bc:	059a      	lsls	r2, r3, #22
 800d5be:	d402      	bmi.n	800d5c6 <_vfiprintf_r+0x32>
 800d5c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d5c2:	f7ff fe53 	bl	800d26c <__retarget_lock_acquire_recursive>
 800d5c6:	89ab      	ldrh	r3, [r5, #12]
 800d5c8:	071b      	lsls	r3, r3, #28
 800d5ca:	d501      	bpl.n	800d5d0 <_vfiprintf_r+0x3c>
 800d5cc:	692b      	ldr	r3, [r5, #16]
 800d5ce:	b9eb      	cbnz	r3, 800d60c <_vfiprintf_r+0x78>
 800d5d0:	4629      	mov	r1, r5
 800d5d2:	4630      	mov	r0, r6
 800d5d4:	f000 fc0a 	bl	800ddec <__swsetup_r>
 800d5d8:	b1c0      	cbz	r0, 800d60c <_vfiprintf_r+0x78>
 800d5da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d5dc:	07dc      	lsls	r4, r3, #31
 800d5de:	d50e      	bpl.n	800d5fe <_vfiprintf_r+0x6a>
 800d5e0:	f04f 30ff 	mov.w	r0, #4294967295
 800d5e4:	b01d      	add	sp, #116	; 0x74
 800d5e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5ea:	4b7b      	ldr	r3, [pc, #492]	; (800d7d8 <_vfiprintf_r+0x244>)
 800d5ec:	429d      	cmp	r5, r3
 800d5ee:	d101      	bne.n	800d5f4 <_vfiprintf_r+0x60>
 800d5f0:	68b5      	ldr	r5, [r6, #8]
 800d5f2:	e7df      	b.n	800d5b4 <_vfiprintf_r+0x20>
 800d5f4:	4b79      	ldr	r3, [pc, #484]	; (800d7dc <_vfiprintf_r+0x248>)
 800d5f6:	429d      	cmp	r5, r3
 800d5f8:	bf08      	it	eq
 800d5fa:	68f5      	ldreq	r5, [r6, #12]
 800d5fc:	e7da      	b.n	800d5b4 <_vfiprintf_r+0x20>
 800d5fe:	89ab      	ldrh	r3, [r5, #12]
 800d600:	0598      	lsls	r0, r3, #22
 800d602:	d4ed      	bmi.n	800d5e0 <_vfiprintf_r+0x4c>
 800d604:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d606:	f7ff fe33 	bl	800d270 <__retarget_lock_release_recursive>
 800d60a:	e7e9      	b.n	800d5e0 <_vfiprintf_r+0x4c>
 800d60c:	2300      	movs	r3, #0
 800d60e:	9309      	str	r3, [sp, #36]	; 0x24
 800d610:	2320      	movs	r3, #32
 800d612:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d616:	2330      	movs	r3, #48	; 0x30
 800d618:	f04f 0901 	mov.w	r9, #1
 800d61c:	f8cd 800c 	str.w	r8, [sp, #12]
 800d620:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800d7e0 <_vfiprintf_r+0x24c>
 800d624:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d628:	4623      	mov	r3, r4
 800d62a:	469a      	mov	sl, r3
 800d62c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d630:	b10a      	cbz	r2, 800d636 <_vfiprintf_r+0xa2>
 800d632:	2a25      	cmp	r2, #37	; 0x25
 800d634:	d1f9      	bne.n	800d62a <_vfiprintf_r+0x96>
 800d636:	ebba 0b04 	subs.w	fp, sl, r4
 800d63a:	d00b      	beq.n	800d654 <_vfiprintf_r+0xc0>
 800d63c:	465b      	mov	r3, fp
 800d63e:	4622      	mov	r2, r4
 800d640:	4629      	mov	r1, r5
 800d642:	4630      	mov	r0, r6
 800d644:	f7ff ff93 	bl	800d56e <__sfputs_r>
 800d648:	3001      	adds	r0, #1
 800d64a:	f000 80aa 	beq.w	800d7a2 <_vfiprintf_r+0x20e>
 800d64e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d650:	445a      	add	r2, fp
 800d652:	9209      	str	r2, [sp, #36]	; 0x24
 800d654:	f89a 3000 	ldrb.w	r3, [sl]
 800d658:	2b00      	cmp	r3, #0
 800d65a:	f000 80a2 	beq.w	800d7a2 <_vfiprintf_r+0x20e>
 800d65e:	2300      	movs	r3, #0
 800d660:	f04f 32ff 	mov.w	r2, #4294967295
 800d664:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d668:	f10a 0a01 	add.w	sl, sl, #1
 800d66c:	9304      	str	r3, [sp, #16]
 800d66e:	9307      	str	r3, [sp, #28]
 800d670:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d674:	931a      	str	r3, [sp, #104]	; 0x68
 800d676:	4654      	mov	r4, sl
 800d678:	2205      	movs	r2, #5
 800d67a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d67e:	4858      	ldr	r0, [pc, #352]	; (800d7e0 <_vfiprintf_r+0x24c>)
 800d680:	f000 fe72 	bl	800e368 <memchr>
 800d684:	9a04      	ldr	r2, [sp, #16]
 800d686:	b9d8      	cbnz	r0, 800d6c0 <_vfiprintf_r+0x12c>
 800d688:	06d1      	lsls	r1, r2, #27
 800d68a:	bf44      	itt	mi
 800d68c:	2320      	movmi	r3, #32
 800d68e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d692:	0713      	lsls	r3, r2, #28
 800d694:	bf44      	itt	mi
 800d696:	232b      	movmi	r3, #43	; 0x2b
 800d698:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d69c:	f89a 3000 	ldrb.w	r3, [sl]
 800d6a0:	2b2a      	cmp	r3, #42	; 0x2a
 800d6a2:	d015      	beq.n	800d6d0 <_vfiprintf_r+0x13c>
 800d6a4:	4654      	mov	r4, sl
 800d6a6:	2000      	movs	r0, #0
 800d6a8:	f04f 0c0a 	mov.w	ip, #10
 800d6ac:	9a07      	ldr	r2, [sp, #28]
 800d6ae:	4621      	mov	r1, r4
 800d6b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d6b4:	3b30      	subs	r3, #48	; 0x30
 800d6b6:	2b09      	cmp	r3, #9
 800d6b8:	d94e      	bls.n	800d758 <_vfiprintf_r+0x1c4>
 800d6ba:	b1b0      	cbz	r0, 800d6ea <_vfiprintf_r+0x156>
 800d6bc:	9207      	str	r2, [sp, #28]
 800d6be:	e014      	b.n	800d6ea <_vfiprintf_r+0x156>
 800d6c0:	eba0 0308 	sub.w	r3, r0, r8
 800d6c4:	fa09 f303 	lsl.w	r3, r9, r3
 800d6c8:	4313      	orrs	r3, r2
 800d6ca:	46a2      	mov	sl, r4
 800d6cc:	9304      	str	r3, [sp, #16]
 800d6ce:	e7d2      	b.n	800d676 <_vfiprintf_r+0xe2>
 800d6d0:	9b03      	ldr	r3, [sp, #12]
 800d6d2:	1d19      	adds	r1, r3, #4
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	9103      	str	r1, [sp, #12]
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	bfbb      	ittet	lt
 800d6dc:	425b      	neglt	r3, r3
 800d6de:	f042 0202 	orrlt.w	r2, r2, #2
 800d6e2:	9307      	strge	r3, [sp, #28]
 800d6e4:	9307      	strlt	r3, [sp, #28]
 800d6e6:	bfb8      	it	lt
 800d6e8:	9204      	strlt	r2, [sp, #16]
 800d6ea:	7823      	ldrb	r3, [r4, #0]
 800d6ec:	2b2e      	cmp	r3, #46	; 0x2e
 800d6ee:	d10c      	bne.n	800d70a <_vfiprintf_r+0x176>
 800d6f0:	7863      	ldrb	r3, [r4, #1]
 800d6f2:	2b2a      	cmp	r3, #42	; 0x2a
 800d6f4:	d135      	bne.n	800d762 <_vfiprintf_r+0x1ce>
 800d6f6:	9b03      	ldr	r3, [sp, #12]
 800d6f8:	3402      	adds	r4, #2
 800d6fa:	1d1a      	adds	r2, r3, #4
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	9203      	str	r2, [sp, #12]
 800d700:	2b00      	cmp	r3, #0
 800d702:	bfb8      	it	lt
 800d704:	f04f 33ff 	movlt.w	r3, #4294967295
 800d708:	9305      	str	r3, [sp, #20]
 800d70a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800d7e4 <_vfiprintf_r+0x250>
 800d70e:	2203      	movs	r2, #3
 800d710:	4650      	mov	r0, sl
 800d712:	7821      	ldrb	r1, [r4, #0]
 800d714:	f000 fe28 	bl	800e368 <memchr>
 800d718:	b140      	cbz	r0, 800d72c <_vfiprintf_r+0x198>
 800d71a:	2340      	movs	r3, #64	; 0x40
 800d71c:	eba0 000a 	sub.w	r0, r0, sl
 800d720:	fa03 f000 	lsl.w	r0, r3, r0
 800d724:	9b04      	ldr	r3, [sp, #16]
 800d726:	3401      	adds	r4, #1
 800d728:	4303      	orrs	r3, r0
 800d72a:	9304      	str	r3, [sp, #16]
 800d72c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d730:	2206      	movs	r2, #6
 800d732:	482d      	ldr	r0, [pc, #180]	; (800d7e8 <_vfiprintf_r+0x254>)
 800d734:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d738:	f000 fe16 	bl	800e368 <memchr>
 800d73c:	2800      	cmp	r0, #0
 800d73e:	d03f      	beq.n	800d7c0 <_vfiprintf_r+0x22c>
 800d740:	4b2a      	ldr	r3, [pc, #168]	; (800d7ec <_vfiprintf_r+0x258>)
 800d742:	bb1b      	cbnz	r3, 800d78c <_vfiprintf_r+0x1f8>
 800d744:	9b03      	ldr	r3, [sp, #12]
 800d746:	3307      	adds	r3, #7
 800d748:	f023 0307 	bic.w	r3, r3, #7
 800d74c:	3308      	adds	r3, #8
 800d74e:	9303      	str	r3, [sp, #12]
 800d750:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d752:	443b      	add	r3, r7
 800d754:	9309      	str	r3, [sp, #36]	; 0x24
 800d756:	e767      	b.n	800d628 <_vfiprintf_r+0x94>
 800d758:	460c      	mov	r4, r1
 800d75a:	2001      	movs	r0, #1
 800d75c:	fb0c 3202 	mla	r2, ip, r2, r3
 800d760:	e7a5      	b.n	800d6ae <_vfiprintf_r+0x11a>
 800d762:	2300      	movs	r3, #0
 800d764:	f04f 0c0a 	mov.w	ip, #10
 800d768:	4619      	mov	r1, r3
 800d76a:	3401      	adds	r4, #1
 800d76c:	9305      	str	r3, [sp, #20]
 800d76e:	4620      	mov	r0, r4
 800d770:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d774:	3a30      	subs	r2, #48	; 0x30
 800d776:	2a09      	cmp	r2, #9
 800d778:	d903      	bls.n	800d782 <_vfiprintf_r+0x1ee>
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d0c5      	beq.n	800d70a <_vfiprintf_r+0x176>
 800d77e:	9105      	str	r1, [sp, #20]
 800d780:	e7c3      	b.n	800d70a <_vfiprintf_r+0x176>
 800d782:	4604      	mov	r4, r0
 800d784:	2301      	movs	r3, #1
 800d786:	fb0c 2101 	mla	r1, ip, r1, r2
 800d78a:	e7f0      	b.n	800d76e <_vfiprintf_r+0x1da>
 800d78c:	ab03      	add	r3, sp, #12
 800d78e:	9300      	str	r3, [sp, #0]
 800d790:	462a      	mov	r2, r5
 800d792:	4630      	mov	r0, r6
 800d794:	4b16      	ldr	r3, [pc, #88]	; (800d7f0 <_vfiprintf_r+0x25c>)
 800d796:	a904      	add	r1, sp, #16
 800d798:	f3af 8000 	nop.w
 800d79c:	4607      	mov	r7, r0
 800d79e:	1c78      	adds	r0, r7, #1
 800d7a0:	d1d6      	bne.n	800d750 <_vfiprintf_r+0x1bc>
 800d7a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d7a4:	07d9      	lsls	r1, r3, #31
 800d7a6:	d405      	bmi.n	800d7b4 <_vfiprintf_r+0x220>
 800d7a8:	89ab      	ldrh	r3, [r5, #12]
 800d7aa:	059a      	lsls	r2, r3, #22
 800d7ac:	d402      	bmi.n	800d7b4 <_vfiprintf_r+0x220>
 800d7ae:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d7b0:	f7ff fd5e 	bl	800d270 <__retarget_lock_release_recursive>
 800d7b4:	89ab      	ldrh	r3, [r5, #12]
 800d7b6:	065b      	lsls	r3, r3, #25
 800d7b8:	f53f af12 	bmi.w	800d5e0 <_vfiprintf_r+0x4c>
 800d7bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d7be:	e711      	b.n	800d5e4 <_vfiprintf_r+0x50>
 800d7c0:	ab03      	add	r3, sp, #12
 800d7c2:	9300      	str	r3, [sp, #0]
 800d7c4:	462a      	mov	r2, r5
 800d7c6:	4630      	mov	r0, r6
 800d7c8:	4b09      	ldr	r3, [pc, #36]	; (800d7f0 <_vfiprintf_r+0x25c>)
 800d7ca:	a904      	add	r1, sp, #16
 800d7cc:	f000 f882 	bl	800d8d4 <_printf_i>
 800d7d0:	e7e4      	b.n	800d79c <_vfiprintf_r+0x208>
 800d7d2:	bf00      	nop
 800d7d4:	0800f92c 	.word	0x0800f92c
 800d7d8:	0800f94c 	.word	0x0800f94c
 800d7dc:	0800f90c 	.word	0x0800f90c
 800d7e0:	0800f8d6 	.word	0x0800f8d6
 800d7e4:	0800f8dc 	.word	0x0800f8dc
 800d7e8:	0800f8e0 	.word	0x0800f8e0
 800d7ec:	00000000 	.word	0x00000000
 800d7f0:	0800d56f 	.word	0x0800d56f

0800d7f4 <_printf_common>:
 800d7f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d7f8:	4616      	mov	r6, r2
 800d7fa:	4699      	mov	r9, r3
 800d7fc:	688a      	ldr	r2, [r1, #8]
 800d7fe:	690b      	ldr	r3, [r1, #16]
 800d800:	4607      	mov	r7, r0
 800d802:	4293      	cmp	r3, r2
 800d804:	bfb8      	it	lt
 800d806:	4613      	movlt	r3, r2
 800d808:	6033      	str	r3, [r6, #0]
 800d80a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d80e:	460c      	mov	r4, r1
 800d810:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d814:	b10a      	cbz	r2, 800d81a <_printf_common+0x26>
 800d816:	3301      	adds	r3, #1
 800d818:	6033      	str	r3, [r6, #0]
 800d81a:	6823      	ldr	r3, [r4, #0]
 800d81c:	0699      	lsls	r1, r3, #26
 800d81e:	bf42      	ittt	mi
 800d820:	6833      	ldrmi	r3, [r6, #0]
 800d822:	3302      	addmi	r3, #2
 800d824:	6033      	strmi	r3, [r6, #0]
 800d826:	6825      	ldr	r5, [r4, #0]
 800d828:	f015 0506 	ands.w	r5, r5, #6
 800d82c:	d106      	bne.n	800d83c <_printf_common+0x48>
 800d82e:	f104 0a19 	add.w	sl, r4, #25
 800d832:	68e3      	ldr	r3, [r4, #12]
 800d834:	6832      	ldr	r2, [r6, #0]
 800d836:	1a9b      	subs	r3, r3, r2
 800d838:	42ab      	cmp	r3, r5
 800d83a:	dc28      	bgt.n	800d88e <_printf_common+0x9a>
 800d83c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d840:	1e13      	subs	r3, r2, #0
 800d842:	6822      	ldr	r2, [r4, #0]
 800d844:	bf18      	it	ne
 800d846:	2301      	movne	r3, #1
 800d848:	0692      	lsls	r2, r2, #26
 800d84a:	d42d      	bmi.n	800d8a8 <_printf_common+0xb4>
 800d84c:	4649      	mov	r1, r9
 800d84e:	4638      	mov	r0, r7
 800d850:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d854:	47c0      	blx	r8
 800d856:	3001      	adds	r0, #1
 800d858:	d020      	beq.n	800d89c <_printf_common+0xa8>
 800d85a:	6823      	ldr	r3, [r4, #0]
 800d85c:	68e5      	ldr	r5, [r4, #12]
 800d85e:	f003 0306 	and.w	r3, r3, #6
 800d862:	2b04      	cmp	r3, #4
 800d864:	bf18      	it	ne
 800d866:	2500      	movne	r5, #0
 800d868:	6832      	ldr	r2, [r6, #0]
 800d86a:	f04f 0600 	mov.w	r6, #0
 800d86e:	68a3      	ldr	r3, [r4, #8]
 800d870:	bf08      	it	eq
 800d872:	1aad      	subeq	r5, r5, r2
 800d874:	6922      	ldr	r2, [r4, #16]
 800d876:	bf08      	it	eq
 800d878:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d87c:	4293      	cmp	r3, r2
 800d87e:	bfc4      	itt	gt
 800d880:	1a9b      	subgt	r3, r3, r2
 800d882:	18ed      	addgt	r5, r5, r3
 800d884:	341a      	adds	r4, #26
 800d886:	42b5      	cmp	r5, r6
 800d888:	d11a      	bne.n	800d8c0 <_printf_common+0xcc>
 800d88a:	2000      	movs	r0, #0
 800d88c:	e008      	b.n	800d8a0 <_printf_common+0xac>
 800d88e:	2301      	movs	r3, #1
 800d890:	4652      	mov	r2, sl
 800d892:	4649      	mov	r1, r9
 800d894:	4638      	mov	r0, r7
 800d896:	47c0      	blx	r8
 800d898:	3001      	adds	r0, #1
 800d89a:	d103      	bne.n	800d8a4 <_printf_common+0xb0>
 800d89c:	f04f 30ff 	mov.w	r0, #4294967295
 800d8a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d8a4:	3501      	adds	r5, #1
 800d8a6:	e7c4      	b.n	800d832 <_printf_common+0x3e>
 800d8a8:	2030      	movs	r0, #48	; 0x30
 800d8aa:	18e1      	adds	r1, r4, r3
 800d8ac:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d8b0:	1c5a      	adds	r2, r3, #1
 800d8b2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d8b6:	4422      	add	r2, r4
 800d8b8:	3302      	adds	r3, #2
 800d8ba:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d8be:	e7c5      	b.n	800d84c <_printf_common+0x58>
 800d8c0:	2301      	movs	r3, #1
 800d8c2:	4622      	mov	r2, r4
 800d8c4:	4649      	mov	r1, r9
 800d8c6:	4638      	mov	r0, r7
 800d8c8:	47c0      	blx	r8
 800d8ca:	3001      	adds	r0, #1
 800d8cc:	d0e6      	beq.n	800d89c <_printf_common+0xa8>
 800d8ce:	3601      	adds	r6, #1
 800d8d0:	e7d9      	b.n	800d886 <_printf_common+0x92>
	...

0800d8d4 <_printf_i>:
 800d8d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d8d8:	7e0f      	ldrb	r7, [r1, #24]
 800d8da:	4691      	mov	r9, r2
 800d8dc:	2f78      	cmp	r7, #120	; 0x78
 800d8de:	4680      	mov	r8, r0
 800d8e0:	460c      	mov	r4, r1
 800d8e2:	469a      	mov	sl, r3
 800d8e4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d8e6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d8ea:	d807      	bhi.n	800d8fc <_printf_i+0x28>
 800d8ec:	2f62      	cmp	r7, #98	; 0x62
 800d8ee:	d80a      	bhi.n	800d906 <_printf_i+0x32>
 800d8f0:	2f00      	cmp	r7, #0
 800d8f2:	f000 80d9 	beq.w	800daa8 <_printf_i+0x1d4>
 800d8f6:	2f58      	cmp	r7, #88	; 0x58
 800d8f8:	f000 80a4 	beq.w	800da44 <_printf_i+0x170>
 800d8fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d900:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d904:	e03a      	b.n	800d97c <_printf_i+0xa8>
 800d906:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d90a:	2b15      	cmp	r3, #21
 800d90c:	d8f6      	bhi.n	800d8fc <_printf_i+0x28>
 800d90e:	a101      	add	r1, pc, #4	; (adr r1, 800d914 <_printf_i+0x40>)
 800d910:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d914:	0800d96d 	.word	0x0800d96d
 800d918:	0800d981 	.word	0x0800d981
 800d91c:	0800d8fd 	.word	0x0800d8fd
 800d920:	0800d8fd 	.word	0x0800d8fd
 800d924:	0800d8fd 	.word	0x0800d8fd
 800d928:	0800d8fd 	.word	0x0800d8fd
 800d92c:	0800d981 	.word	0x0800d981
 800d930:	0800d8fd 	.word	0x0800d8fd
 800d934:	0800d8fd 	.word	0x0800d8fd
 800d938:	0800d8fd 	.word	0x0800d8fd
 800d93c:	0800d8fd 	.word	0x0800d8fd
 800d940:	0800da8f 	.word	0x0800da8f
 800d944:	0800d9b1 	.word	0x0800d9b1
 800d948:	0800da71 	.word	0x0800da71
 800d94c:	0800d8fd 	.word	0x0800d8fd
 800d950:	0800d8fd 	.word	0x0800d8fd
 800d954:	0800dab1 	.word	0x0800dab1
 800d958:	0800d8fd 	.word	0x0800d8fd
 800d95c:	0800d9b1 	.word	0x0800d9b1
 800d960:	0800d8fd 	.word	0x0800d8fd
 800d964:	0800d8fd 	.word	0x0800d8fd
 800d968:	0800da79 	.word	0x0800da79
 800d96c:	682b      	ldr	r3, [r5, #0]
 800d96e:	1d1a      	adds	r2, r3, #4
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	602a      	str	r2, [r5, #0]
 800d974:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d978:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d97c:	2301      	movs	r3, #1
 800d97e:	e0a4      	b.n	800daca <_printf_i+0x1f6>
 800d980:	6820      	ldr	r0, [r4, #0]
 800d982:	6829      	ldr	r1, [r5, #0]
 800d984:	0606      	lsls	r6, r0, #24
 800d986:	f101 0304 	add.w	r3, r1, #4
 800d98a:	d50a      	bpl.n	800d9a2 <_printf_i+0xce>
 800d98c:	680e      	ldr	r6, [r1, #0]
 800d98e:	602b      	str	r3, [r5, #0]
 800d990:	2e00      	cmp	r6, #0
 800d992:	da03      	bge.n	800d99c <_printf_i+0xc8>
 800d994:	232d      	movs	r3, #45	; 0x2d
 800d996:	4276      	negs	r6, r6
 800d998:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d99c:	230a      	movs	r3, #10
 800d99e:	485e      	ldr	r0, [pc, #376]	; (800db18 <_printf_i+0x244>)
 800d9a0:	e019      	b.n	800d9d6 <_printf_i+0x102>
 800d9a2:	680e      	ldr	r6, [r1, #0]
 800d9a4:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d9a8:	602b      	str	r3, [r5, #0]
 800d9aa:	bf18      	it	ne
 800d9ac:	b236      	sxthne	r6, r6
 800d9ae:	e7ef      	b.n	800d990 <_printf_i+0xbc>
 800d9b0:	682b      	ldr	r3, [r5, #0]
 800d9b2:	6820      	ldr	r0, [r4, #0]
 800d9b4:	1d19      	adds	r1, r3, #4
 800d9b6:	6029      	str	r1, [r5, #0]
 800d9b8:	0601      	lsls	r1, r0, #24
 800d9ba:	d501      	bpl.n	800d9c0 <_printf_i+0xec>
 800d9bc:	681e      	ldr	r6, [r3, #0]
 800d9be:	e002      	b.n	800d9c6 <_printf_i+0xf2>
 800d9c0:	0646      	lsls	r6, r0, #25
 800d9c2:	d5fb      	bpl.n	800d9bc <_printf_i+0xe8>
 800d9c4:	881e      	ldrh	r6, [r3, #0]
 800d9c6:	2f6f      	cmp	r7, #111	; 0x6f
 800d9c8:	bf0c      	ite	eq
 800d9ca:	2308      	moveq	r3, #8
 800d9cc:	230a      	movne	r3, #10
 800d9ce:	4852      	ldr	r0, [pc, #328]	; (800db18 <_printf_i+0x244>)
 800d9d0:	2100      	movs	r1, #0
 800d9d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d9d6:	6865      	ldr	r5, [r4, #4]
 800d9d8:	2d00      	cmp	r5, #0
 800d9da:	bfa8      	it	ge
 800d9dc:	6821      	ldrge	r1, [r4, #0]
 800d9de:	60a5      	str	r5, [r4, #8]
 800d9e0:	bfa4      	itt	ge
 800d9e2:	f021 0104 	bicge.w	r1, r1, #4
 800d9e6:	6021      	strge	r1, [r4, #0]
 800d9e8:	b90e      	cbnz	r6, 800d9ee <_printf_i+0x11a>
 800d9ea:	2d00      	cmp	r5, #0
 800d9ec:	d04d      	beq.n	800da8a <_printf_i+0x1b6>
 800d9ee:	4615      	mov	r5, r2
 800d9f0:	fbb6 f1f3 	udiv	r1, r6, r3
 800d9f4:	fb03 6711 	mls	r7, r3, r1, r6
 800d9f8:	5dc7      	ldrb	r7, [r0, r7]
 800d9fa:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d9fe:	4637      	mov	r7, r6
 800da00:	42bb      	cmp	r3, r7
 800da02:	460e      	mov	r6, r1
 800da04:	d9f4      	bls.n	800d9f0 <_printf_i+0x11c>
 800da06:	2b08      	cmp	r3, #8
 800da08:	d10b      	bne.n	800da22 <_printf_i+0x14e>
 800da0a:	6823      	ldr	r3, [r4, #0]
 800da0c:	07de      	lsls	r6, r3, #31
 800da0e:	d508      	bpl.n	800da22 <_printf_i+0x14e>
 800da10:	6923      	ldr	r3, [r4, #16]
 800da12:	6861      	ldr	r1, [r4, #4]
 800da14:	4299      	cmp	r1, r3
 800da16:	bfde      	ittt	le
 800da18:	2330      	movle	r3, #48	; 0x30
 800da1a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800da1e:	f105 35ff 	addle.w	r5, r5, #4294967295
 800da22:	1b52      	subs	r2, r2, r5
 800da24:	6122      	str	r2, [r4, #16]
 800da26:	464b      	mov	r3, r9
 800da28:	4621      	mov	r1, r4
 800da2a:	4640      	mov	r0, r8
 800da2c:	f8cd a000 	str.w	sl, [sp]
 800da30:	aa03      	add	r2, sp, #12
 800da32:	f7ff fedf 	bl	800d7f4 <_printf_common>
 800da36:	3001      	adds	r0, #1
 800da38:	d14c      	bne.n	800dad4 <_printf_i+0x200>
 800da3a:	f04f 30ff 	mov.w	r0, #4294967295
 800da3e:	b004      	add	sp, #16
 800da40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da44:	4834      	ldr	r0, [pc, #208]	; (800db18 <_printf_i+0x244>)
 800da46:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800da4a:	6829      	ldr	r1, [r5, #0]
 800da4c:	6823      	ldr	r3, [r4, #0]
 800da4e:	f851 6b04 	ldr.w	r6, [r1], #4
 800da52:	6029      	str	r1, [r5, #0]
 800da54:	061d      	lsls	r5, r3, #24
 800da56:	d514      	bpl.n	800da82 <_printf_i+0x1ae>
 800da58:	07df      	lsls	r7, r3, #31
 800da5a:	bf44      	itt	mi
 800da5c:	f043 0320 	orrmi.w	r3, r3, #32
 800da60:	6023      	strmi	r3, [r4, #0]
 800da62:	b91e      	cbnz	r6, 800da6c <_printf_i+0x198>
 800da64:	6823      	ldr	r3, [r4, #0]
 800da66:	f023 0320 	bic.w	r3, r3, #32
 800da6a:	6023      	str	r3, [r4, #0]
 800da6c:	2310      	movs	r3, #16
 800da6e:	e7af      	b.n	800d9d0 <_printf_i+0xfc>
 800da70:	6823      	ldr	r3, [r4, #0]
 800da72:	f043 0320 	orr.w	r3, r3, #32
 800da76:	6023      	str	r3, [r4, #0]
 800da78:	2378      	movs	r3, #120	; 0x78
 800da7a:	4828      	ldr	r0, [pc, #160]	; (800db1c <_printf_i+0x248>)
 800da7c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800da80:	e7e3      	b.n	800da4a <_printf_i+0x176>
 800da82:	0659      	lsls	r1, r3, #25
 800da84:	bf48      	it	mi
 800da86:	b2b6      	uxthmi	r6, r6
 800da88:	e7e6      	b.n	800da58 <_printf_i+0x184>
 800da8a:	4615      	mov	r5, r2
 800da8c:	e7bb      	b.n	800da06 <_printf_i+0x132>
 800da8e:	682b      	ldr	r3, [r5, #0]
 800da90:	6826      	ldr	r6, [r4, #0]
 800da92:	1d18      	adds	r0, r3, #4
 800da94:	6961      	ldr	r1, [r4, #20]
 800da96:	6028      	str	r0, [r5, #0]
 800da98:	0635      	lsls	r5, r6, #24
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	d501      	bpl.n	800daa2 <_printf_i+0x1ce>
 800da9e:	6019      	str	r1, [r3, #0]
 800daa0:	e002      	b.n	800daa8 <_printf_i+0x1d4>
 800daa2:	0670      	lsls	r0, r6, #25
 800daa4:	d5fb      	bpl.n	800da9e <_printf_i+0x1ca>
 800daa6:	8019      	strh	r1, [r3, #0]
 800daa8:	2300      	movs	r3, #0
 800daaa:	4615      	mov	r5, r2
 800daac:	6123      	str	r3, [r4, #16]
 800daae:	e7ba      	b.n	800da26 <_printf_i+0x152>
 800dab0:	682b      	ldr	r3, [r5, #0]
 800dab2:	2100      	movs	r1, #0
 800dab4:	1d1a      	adds	r2, r3, #4
 800dab6:	602a      	str	r2, [r5, #0]
 800dab8:	681d      	ldr	r5, [r3, #0]
 800daba:	6862      	ldr	r2, [r4, #4]
 800dabc:	4628      	mov	r0, r5
 800dabe:	f000 fc53 	bl	800e368 <memchr>
 800dac2:	b108      	cbz	r0, 800dac8 <_printf_i+0x1f4>
 800dac4:	1b40      	subs	r0, r0, r5
 800dac6:	6060      	str	r0, [r4, #4]
 800dac8:	6863      	ldr	r3, [r4, #4]
 800daca:	6123      	str	r3, [r4, #16]
 800dacc:	2300      	movs	r3, #0
 800dace:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dad2:	e7a8      	b.n	800da26 <_printf_i+0x152>
 800dad4:	462a      	mov	r2, r5
 800dad6:	4649      	mov	r1, r9
 800dad8:	4640      	mov	r0, r8
 800dada:	6923      	ldr	r3, [r4, #16]
 800dadc:	47d0      	blx	sl
 800dade:	3001      	adds	r0, #1
 800dae0:	d0ab      	beq.n	800da3a <_printf_i+0x166>
 800dae2:	6823      	ldr	r3, [r4, #0]
 800dae4:	079b      	lsls	r3, r3, #30
 800dae6:	d413      	bmi.n	800db10 <_printf_i+0x23c>
 800dae8:	68e0      	ldr	r0, [r4, #12]
 800daea:	9b03      	ldr	r3, [sp, #12]
 800daec:	4298      	cmp	r0, r3
 800daee:	bfb8      	it	lt
 800daf0:	4618      	movlt	r0, r3
 800daf2:	e7a4      	b.n	800da3e <_printf_i+0x16a>
 800daf4:	2301      	movs	r3, #1
 800daf6:	4632      	mov	r2, r6
 800daf8:	4649      	mov	r1, r9
 800dafa:	4640      	mov	r0, r8
 800dafc:	47d0      	blx	sl
 800dafe:	3001      	adds	r0, #1
 800db00:	d09b      	beq.n	800da3a <_printf_i+0x166>
 800db02:	3501      	adds	r5, #1
 800db04:	68e3      	ldr	r3, [r4, #12]
 800db06:	9903      	ldr	r1, [sp, #12]
 800db08:	1a5b      	subs	r3, r3, r1
 800db0a:	42ab      	cmp	r3, r5
 800db0c:	dcf2      	bgt.n	800daf4 <_printf_i+0x220>
 800db0e:	e7eb      	b.n	800dae8 <_printf_i+0x214>
 800db10:	2500      	movs	r5, #0
 800db12:	f104 0619 	add.w	r6, r4, #25
 800db16:	e7f5      	b.n	800db04 <_printf_i+0x230>
 800db18:	0800f8e7 	.word	0x0800f8e7
 800db1c:	0800f8f8 	.word	0x0800f8f8

0800db20 <siscanf>:
 800db20:	b40e      	push	{r1, r2, r3}
 800db22:	f44f 7201 	mov.w	r2, #516	; 0x204
 800db26:	b530      	push	{r4, r5, lr}
 800db28:	b09c      	sub	sp, #112	; 0x70
 800db2a:	ac1f      	add	r4, sp, #124	; 0x7c
 800db2c:	f854 5b04 	ldr.w	r5, [r4], #4
 800db30:	f8ad 2014 	strh.w	r2, [sp, #20]
 800db34:	9002      	str	r0, [sp, #8]
 800db36:	9006      	str	r0, [sp, #24]
 800db38:	f7f2 fb12 	bl	8000160 <strlen>
 800db3c:	4b0b      	ldr	r3, [pc, #44]	; (800db6c <siscanf+0x4c>)
 800db3e:	9003      	str	r0, [sp, #12]
 800db40:	930b      	str	r3, [sp, #44]	; 0x2c
 800db42:	2300      	movs	r3, #0
 800db44:	930f      	str	r3, [sp, #60]	; 0x3c
 800db46:	9314      	str	r3, [sp, #80]	; 0x50
 800db48:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800db4c:	9007      	str	r0, [sp, #28]
 800db4e:	4808      	ldr	r0, [pc, #32]	; (800db70 <siscanf+0x50>)
 800db50:	f8ad 3016 	strh.w	r3, [sp, #22]
 800db54:	462a      	mov	r2, r5
 800db56:	4623      	mov	r3, r4
 800db58:	a902      	add	r1, sp, #8
 800db5a:	6800      	ldr	r0, [r0, #0]
 800db5c:	9401      	str	r4, [sp, #4]
 800db5e:	f000 fcb5 	bl	800e4cc <__ssvfiscanf_r>
 800db62:	b01c      	add	sp, #112	; 0x70
 800db64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800db68:	b003      	add	sp, #12
 800db6a:	4770      	bx	lr
 800db6c:	0800db97 	.word	0x0800db97
 800db70:	200004e0 	.word	0x200004e0

0800db74 <__sread>:
 800db74:	b510      	push	{r4, lr}
 800db76:	460c      	mov	r4, r1
 800db78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db7c:	f000 ff72 	bl	800ea64 <_read_r>
 800db80:	2800      	cmp	r0, #0
 800db82:	bfab      	itete	ge
 800db84:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800db86:	89a3      	ldrhlt	r3, [r4, #12]
 800db88:	181b      	addge	r3, r3, r0
 800db8a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800db8e:	bfac      	ite	ge
 800db90:	6563      	strge	r3, [r4, #84]	; 0x54
 800db92:	81a3      	strhlt	r3, [r4, #12]
 800db94:	bd10      	pop	{r4, pc}

0800db96 <__seofread>:
 800db96:	2000      	movs	r0, #0
 800db98:	4770      	bx	lr

0800db9a <__swrite>:
 800db9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db9e:	461f      	mov	r7, r3
 800dba0:	898b      	ldrh	r3, [r1, #12]
 800dba2:	4605      	mov	r5, r0
 800dba4:	05db      	lsls	r3, r3, #23
 800dba6:	460c      	mov	r4, r1
 800dba8:	4616      	mov	r6, r2
 800dbaa:	d505      	bpl.n	800dbb8 <__swrite+0x1e>
 800dbac:	2302      	movs	r3, #2
 800dbae:	2200      	movs	r2, #0
 800dbb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dbb4:	f000 fb60 	bl	800e278 <_lseek_r>
 800dbb8:	89a3      	ldrh	r3, [r4, #12]
 800dbba:	4632      	mov	r2, r6
 800dbbc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800dbc0:	81a3      	strh	r3, [r4, #12]
 800dbc2:	4628      	mov	r0, r5
 800dbc4:	463b      	mov	r3, r7
 800dbc6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dbca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dbce:	f000 b8fb 	b.w	800ddc8 <_write_r>

0800dbd2 <__sseek>:
 800dbd2:	b510      	push	{r4, lr}
 800dbd4:	460c      	mov	r4, r1
 800dbd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dbda:	f000 fb4d 	bl	800e278 <_lseek_r>
 800dbde:	1c43      	adds	r3, r0, #1
 800dbe0:	89a3      	ldrh	r3, [r4, #12]
 800dbe2:	bf15      	itete	ne
 800dbe4:	6560      	strne	r0, [r4, #84]	; 0x54
 800dbe6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800dbea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800dbee:	81a3      	strheq	r3, [r4, #12]
 800dbf0:	bf18      	it	ne
 800dbf2:	81a3      	strhne	r3, [r4, #12]
 800dbf4:	bd10      	pop	{r4, pc}

0800dbf6 <__sclose>:
 800dbf6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dbfa:	f000 b96d 	b.w	800ded8 <_close_r>

0800dbfe <strncmp>:
 800dbfe:	4603      	mov	r3, r0
 800dc00:	b510      	push	{r4, lr}
 800dc02:	b172      	cbz	r2, 800dc22 <strncmp+0x24>
 800dc04:	3901      	subs	r1, #1
 800dc06:	1884      	adds	r4, r0, r2
 800dc08:	f813 0b01 	ldrb.w	r0, [r3], #1
 800dc0c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800dc10:	4290      	cmp	r0, r2
 800dc12:	d101      	bne.n	800dc18 <strncmp+0x1a>
 800dc14:	42a3      	cmp	r3, r4
 800dc16:	d101      	bne.n	800dc1c <strncmp+0x1e>
 800dc18:	1a80      	subs	r0, r0, r2
 800dc1a:	bd10      	pop	{r4, pc}
 800dc1c:	2800      	cmp	r0, #0
 800dc1e:	d1f3      	bne.n	800dc08 <strncmp+0xa>
 800dc20:	e7fa      	b.n	800dc18 <strncmp+0x1a>
 800dc22:	4610      	mov	r0, r2
 800dc24:	e7f9      	b.n	800dc1a <strncmp+0x1c>
	...

0800dc28 <_strtoul_l.constprop.0>:
 800dc28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dc2c:	4686      	mov	lr, r0
 800dc2e:	460d      	mov	r5, r1
 800dc30:	4f35      	ldr	r7, [pc, #212]	; (800dd08 <_strtoul_l.constprop.0+0xe0>)
 800dc32:	4628      	mov	r0, r5
 800dc34:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dc38:	5de6      	ldrb	r6, [r4, r7]
 800dc3a:	f016 0608 	ands.w	r6, r6, #8
 800dc3e:	d1f8      	bne.n	800dc32 <_strtoul_l.constprop.0+0xa>
 800dc40:	2c2d      	cmp	r4, #45	; 0x2d
 800dc42:	d12f      	bne.n	800dca4 <_strtoul_l.constprop.0+0x7c>
 800dc44:	2601      	movs	r6, #1
 800dc46:	782c      	ldrb	r4, [r5, #0]
 800dc48:	1c85      	adds	r5, r0, #2
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d057      	beq.n	800dcfe <_strtoul_l.constprop.0+0xd6>
 800dc4e:	2b10      	cmp	r3, #16
 800dc50:	d109      	bne.n	800dc66 <_strtoul_l.constprop.0+0x3e>
 800dc52:	2c30      	cmp	r4, #48	; 0x30
 800dc54:	d107      	bne.n	800dc66 <_strtoul_l.constprop.0+0x3e>
 800dc56:	7828      	ldrb	r0, [r5, #0]
 800dc58:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800dc5c:	2858      	cmp	r0, #88	; 0x58
 800dc5e:	d149      	bne.n	800dcf4 <_strtoul_l.constprop.0+0xcc>
 800dc60:	2310      	movs	r3, #16
 800dc62:	786c      	ldrb	r4, [r5, #1]
 800dc64:	3502      	adds	r5, #2
 800dc66:	f04f 38ff 	mov.w	r8, #4294967295
 800dc6a:	fbb8 f8f3 	udiv	r8, r8, r3
 800dc6e:	2700      	movs	r7, #0
 800dc70:	fb03 f908 	mul.w	r9, r3, r8
 800dc74:	4638      	mov	r0, r7
 800dc76:	ea6f 0909 	mvn.w	r9, r9
 800dc7a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800dc7e:	f1bc 0f09 	cmp.w	ip, #9
 800dc82:	d814      	bhi.n	800dcae <_strtoul_l.constprop.0+0x86>
 800dc84:	4664      	mov	r4, ip
 800dc86:	42a3      	cmp	r3, r4
 800dc88:	dd22      	ble.n	800dcd0 <_strtoul_l.constprop.0+0xa8>
 800dc8a:	2f00      	cmp	r7, #0
 800dc8c:	db1d      	blt.n	800dcca <_strtoul_l.constprop.0+0xa2>
 800dc8e:	4580      	cmp	r8, r0
 800dc90:	d31b      	bcc.n	800dcca <_strtoul_l.constprop.0+0xa2>
 800dc92:	d101      	bne.n	800dc98 <_strtoul_l.constprop.0+0x70>
 800dc94:	45a1      	cmp	r9, r4
 800dc96:	db18      	blt.n	800dcca <_strtoul_l.constprop.0+0xa2>
 800dc98:	2701      	movs	r7, #1
 800dc9a:	fb00 4003 	mla	r0, r0, r3, r4
 800dc9e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dca2:	e7ea      	b.n	800dc7a <_strtoul_l.constprop.0+0x52>
 800dca4:	2c2b      	cmp	r4, #43	; 0x2b
 800dca6:	bf04      	itt	eq
 800dca8:	782c      	ldrbeq	r4, [r5, #0]
 800dcaa:	1c85      	addeq	r5, r0, #2
 800dcac:	e7cd      	b.n	800dc4a <_strtoul_l.constprop.0+0x22>
 800dcae:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800dcb2:	f1bc 0f19 	cmp.w	ip, #25
 800dcb6:	d801      	bhi.n	800dcbc <_strtoul_l.constprop.0+0x94>
 800dcb8:	3c37      	subs	r4, #55	; 0x37
 800dcba:	e7e4      	b.n	800dc86 <_strtoul_l.constprop.0+0x5e>
 800dcbc:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800dcc0:	f1bc 0f19 	cmp.w	ip, #25
 800dcc4:	d804      	bhi.n	800dcd0 <_strtoul_l.constprop.0+0xa8>
 800dcc6:	3c57      	subs	r4, #87	; 0x57
 800dcc8:	e7dd      	b.n	800dc86 <_strtoul_l.constprop.0+0x5e>
 800dcca:	f04f 37ff 	mov.w	r7, #4294967295
 800dcce:	e7e6      	b.n	800dc9e <_strtoul_l.constprop.0+0x76>
 800dcd0:	2f00      	cmp	r7, #0
 800dcd2:	da07      	bge.n	800dce4 <_strtoul_l.constprop.0+0xbc>
 800dcd4:	2322      	movs	r3, #34	; 0x22
 800dcd6:	f04f 30ff 	mov.w	r0, #4294967295
 800dcda:	f8ce 3000 	str.w	r3, [lr]
 800dcde:	b932      	cbnz	r2, 800dcee <_strtoul_l.constprop.0+0xc6>
 800dce0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dce4:	b106      	cbz	r6, 800dce8 <_strtoul_l.constprop.0+0xc0>
 800dce6:	4240      	negs	r0, r0
 800dce8:	2a00      	cmp	r2, #0
 800dcea:	d0f9      	beq.n	800dce0 <_strtoul_l.constprop.0+0xb8>
 800dcec:	b107      	cbz	r7, 800dcf0 <_strtoul_l.constprop.0+0xc8>
 800dcee:	1e69      	subs	r1, r5, #1
 800dcf0:	6011      	str	r1, [r2, #0]
 800dcf2:	e7f5      	b.n	800dce0 <_strtoul_l.constprop.0+0xb8>
 800dcf4:	2430      	movs	r4, #48	; 0x30
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d1b5      	bne.n	800dc66 <_strtoul_l.constprop.0+0x3e>
 800dcfa:	2308      	movs	r3, #8
 800dcfc:	e7b3      	b.n	800dc66 <_strtoul_l.constprop.0+0x3e>
 800dcfe:	2c30      	cmp	r4, #48	; 0x30
 800dd00:	d0a9      	beq.n	800dc56 <_strtoul_l.constprop.0+0x2e>
 800dd02:	230a      	movs	r3, #10
 800dd04:	e7af      	b.n	800dc66 <_strtoul_l.constprop.0+0x3e>
 800dd06:	bf00      	nop
 800dd08:	0800f7d6 	.word	0x0800f7d6

0800dd0c <_strtoul_r>:
 800dd0c:	f7ff bf8c 	b.w	800dc28 <_strtoul_l.constprop.0>

0800dd10 <strtoul>:
 800dd10:	4613      	mov	r3, r2
 800dd12:	460a      	mov	r2, r1
 800dd14:	4601      	mov	r1, r0
 800dd16:	4802      	ldr	r0, [pc, #8]	; (800dd20 <strtoul+0x10>)
 800dd18:	6800      	ldr	r0, [r0, #0]
 800dd1a:	f7ff bf85 	b.w	800dc28 <_strtoul_l.constprop.0>
 800dd1e:	bf00      	nop
 800dd20:	200004e0 	.word	0x200004e0

0800dd24 <__swbuf_r>:
 800dd24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd26:	460e      	mov	r6, r1
 800dd28:	4614      	mov	r4, r2
 800dd2a:	4605      	mov	r5, r0
 800dd2c:	b118      	cbz	r0, 800dd36 <__swbuf_r+0x12>
 800dd2e:	6983      	ldr	r3, [r0, #24]
 800dd30:	b90b      	cbnz	r3, 800dd36 <__swbuf_r+0x12>
 800dd32:	f000 fa03 	bl	800e13c <__sinit>
 800dd36:	4b21      	ldr	r3, [pc, #132]	; (800ddbc <__swbuf_r+0x98>)
 800dd38:	429c      	cmp	r4, r3
 800dd3a:	d12b      	bne.n	800dd94 <__swbuf_r+0x70>
 800dd3c:	686c      	ldr	r4, [r5, #4]
 800dd3e:	69a3      	ldr	r3, [r4, #24]
 800dd40:	60a3      	str	r3, [r4, #8]
 800dd42:	89a3      	ldrh	r3, [r4, #12]
 800dd44:	071a      	lsls	r2, r3, #28
 800dd46:	d52f      	bpl.n	800dda8 <__swbuf_r+0x84>
 800dd48:	6923      	ldr	r3, [r4, #16]
 800dd4a:	b36b      	cbz	r3, 800dda8 <__swbuf_r+0x84>
 800dd4c:	6923      	ldr	r3, [r4, #16]
 800dd4e:	6820      	ldr	r0, [r4, #0]
 800dd50:	b2f6      	uxtb	r6, r6
 800dd52:	1ac0      	subs	r0, r0, r3
 800dd54:	6963      	ldr	r3, [r4, #20]
 800dd56:	4637      	mov	r7, r6
 800dd58:	4283      	cmp	r3, r0
 800dd5a:	dc04      	bgt.n	800dd66 <__swbuf_r+0x42>
 800dd5c:	4621      	mov	r1, r4
 800dd5e:	4628      	mov	r0, r5
 800dd60:	f000 f958 	bl	800e014 <_fflush_r>
 800dd64:	bb30      	cbnz	r0, 800ddb4 <__swbuf_r+0x90>
 800dd66:	68a3      	ldr	r3, [r4, #8]
 800dd68:	3001      	adds	r0, #1
 800dd6a:	3b01      	subs	r3, #1
 800dd6c:	60a3      	str	r3, [r4, #8]
 800dd6e:	6823      	ldr	r3, [r4, #0]
 800dd70:	1c5a      	adds	r2, r3, #1
 800dd72:	6022      	str	r2, [r4, #0]
 800dd74:	701e      	strb	r6, [r3, #0]
 800dd76:	6963      	ldr	r3, [r4, #20]
 800dd78:	4283      	cmp	r3, r0
 800dd7a:	d004      	beq.n	800dd86 <__swbuf_r+0x62>
 800dd7c:	89a3      	ldrh	r3, [r4, #12]
 800dd7e:	07db      	lsls	r3, r3, #31
 800dd80:	d506      	bpl.n	800dd90 <__swbuf_r+0x6c>
 800dd82:	2e0a      	cmp	r6, #10
 800dd84:	d104      	bne.n	800dd90 <__swbuf_r+0x6c>
 800dd86:	4621      	mov	r1, r4
 800dd88:	4628      	mov	r0, r5
 800dd8a:	f000 f943 	bl	800e014 <_fflush_r>
 800dd8e:	b988      	cbnz	r0, 800ddb4 <__swbuf_r+0x90>
 800dd90:	4638      	mov	r0, r7
 800dd92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dd94:	4b0a      	ldr	r3, [pc, #40]	; (800ddc0 <__swbuf_r+0x9c>)
 800dd96:	429c      	cmp	r4, r3
 800dd98:	d101      	bne.n	800dd9e <__swbuf_r+0x7a>
 800dd9a:	68ac      	ldr	r4, [r5, #8]
 800dd9c:	e7cf      	b.n	800dd3e <__swbuf_r+0x1a>
 800dd9e:	4b09      	ldr	r3, [pc, #36]	; (800ddc4 <__swbuf_r+0xa0>)
 800dda0:	429c      	cmp	r4, r3
 800dda2:	bf08      	it	eq
 800dda4:	68ec      	ldreq	r4, [r5, #12]
 800dda6:	e7ca      	b.n	800dd3e <__swbuf_r+0x1a>
 800dda8:	4621      	mov	r1, r4
 800ddaa:	4628      	mov	r0, r5
 800ddac:	f000 f81e 	bl	800ddec <__swsetup_r>
 800ddb0:	2800      	cmp	r0, #0
 800ddb2:	d0cb      	beq.n	800dd4c <__swbuf_r+0x28>
 800ddb4:	f04f 37ff 	mov.w	r7, #4294967295
 800ddb8:	e7ea      	b.n	800dd90 <__swbuf_r+0x6c>
 800ddba:	bf00      	nop
 800ddbc:	0800f92c 	.word	0x0800f92c
 800ddc0:	0800f94c 	.word	0x0800f94c
 800ddc4:	0800f90c 	.word	0x0800f90c

0800ddc8 <_write_r>:
 800ddc8:	b538      	push	{r3, r4, r5, lr}
 800ddca:	4604      	mov	r4, r0
 800ddcc:	4608      	mov	r0, r1
 800ddce:	4611      	mov	r1, r2
 800ddd0:	2200      	movs	r2, #0
 800ddd2:	4d05      	ldr	r5, [pc, #20]	; (800dde8 <_write_r+0x20>)
 800ddd4:	602a      	str	r2, [r5, #0]
 800ddd6:	461a      	mov	r2, r3
 800ddd8:	f7f8 fc0c 	bl	80065f4 <_write>
 800dddc:	1c43      	adds	r3, r0, #1
 800ddde:	d102      	bne.n	800dde6 <_write_r+0x1e>
 800dde0:	682b      	ldr	r3, [r5, #0]
 800dde2:	b103      	cbz	r3, 800dde6 <_write_r+0x1e>
 800dde4:	6023      	str	r3, [r4, #0]
 800dde6:	bd38      	pop	{r3, r4, r5, pc}
 800dde8:	20002c30 	.word	0x20002c30

0800ddec <__swsetup_r>:
 800ddec:	4b32      	ldr	r3, [pc, #200]	; (800deb8 <__swsetup_r+0xcc>)
 800ddee:	b570      	push	{r4, r5, r6, lr}
 800ddf0:	681d      	ldr	r5, [r3, #0]
 800ddf2:	4606      	mov	r6, r0
 800ddf4:	460c      	mov	r4, r1
 800ddf6:	b125      	cbz	r5, 800de02 <__swsetup_r+0x16>
 800ddf8:	69ab      	ldr	r3, [r5, #24]
 800ddfa:	b913      	cbnz	r3, 800de02 <__swsetup_r+0x16>
 800ddfc:	4628      	mov	r0, r5
 800ddfe:	f000 f99d 	bl	800e13c <__sinit>
 800de02:	4b2e      	ldr	r3, [pc, #184]	; (800debc <__swsetup_r+0xd0>)
 800de04:	429c      	cmp	r4, r3
 800de06:	d10f      	bne.n	800de28 <__swsetup_r+0x3c>
 800de08:	686c      	ldr	r4, [r5, #4]
 800de0a:	89a3      	ldrh	r3, [r4, #12]
 800de0c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800de10:	0719      	lsls	r1, r3, #28
 800de12:	d42c      	bmi.n	800de6e <__swsetup_r+0x82>
 800de14:	06dd      	lsls	r5, r3, #27
 800de16:	d411      	bmi.n	800de3c <__swsetup_r+0x50>
 800de18:	2309      	movs	r3, #9
 800de1a:	6033      	str	r3, [r6, #0]
 800de1c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800de20:	f04f 30ff 	mov.w	r0, #4294967295
 800de24:	81a3      	strh	r3, [r4, #12]
 800de26:	e03e      	b.n	800dea6 <__swsetup_r+0xba>
 800de28:	4b25      	ldr	r3, [pc, #148]	; (800dec0 <__swsetup_r+0xd4>)
 800de2a:	429c      	cmp	r4, r3
 800de2c:	d101      	bne.n	800de32 <__swsetup_r+0x46>
 800de2e:	68ac      	ldr	r4, [r5, #8]
 800de30:	e7eb      	b.n	800de0a <__swsetup_r+0x1e>
 800de32:	4b24      	ldr	r3, [pc, #144]	; (800dec4 <__swsetup_r+0xd8>)
 800de34:	429c      	cmp	r4, r3
 800de36:	bf08      	it	eq
 800de38:	68ec      	ldreq	r4, [r5, #12]
 800de3a:	e7e6      	b.n	800de0a <__swsetup_r+0x1e>
 800de3c:	0758      	lsls	r0, r3, #29
 800de3e:	d512      	bpl.n	800de66 <__swsetup_r+0x7a>
 800de40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800de42:	b141      	cbz	r1, 800de56 <__swsetup_r+0x6a>
 800de44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800de48:	4299      	cmp	r1, r3
 800de4a:	d002      	beq.n	800de52 <__swsetup_r+0x66>
 800de4c:	4630      	mov	r0, r6
 800de4e:	f7fe fc9b 	bl	800c788 <_free_r>
 800de52:	2300      	movs	r3, #0
 800de54:	6363      	str	r3, [r4, #52]	; 0x34
 800de56:	89a3      	ldrh	r3, [r4, #12]
 800de58:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800de5c:	81a3      	strh	r3, [r4, #12]
 800de5e:	2300      	movs	r3, #0
 800de60:	6063      	str	r3, [r4, #4]
 800de62:	6923      	ldr	r3, [r4, #16]
 800de64:	6023      	str	r3, [r4, #0]
 800de66:	89a3      	ldrh	r3, [r4, #12]
 800de68:	f043 0308 	orr.w	r3, r3, #8
 800de6c:	81a3      	strh	r3, [r4, #12]
 800de6e:	6923      	ldr	r3, [r4, #16]
 800de70:	b94b      	cbnz	r3, 800de86 <__swsetup_r+0x9a>
 800de72:	89a3      	ldrh	r3, [r4, #12]
 800de74:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800de78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800de7c:	d003      	beq.n	800de86 <__swsetup_r+0x9a>
 800de7e:	4621      	mov	r1, r4
 800de80:	4630      	mov	r0, r6
 800de82:	f000 fa31 	bl	800e2e8 <__smakebuf_r>
 800de86:	89a0      	ldrh	r0, [r4, #12]
 800de88:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800de8c:	f010 0301 	ands.w	r3, r0, #1
 800de90:	d00a      	beq.n	800dea8 <__swsetup_r+0xbc>
 800de92:	2300      	movs	r3, #0
 800de94:	60a3      	str	r3, [r4, #8]
 800de96:	6963      	ldr	r3, [r4, #20]
 800de98:	425b      	negs	r3, r3
 800de9a:	61a3      	str	r3, [r4, #24]
 800de9c:	6923      	ldr	r3, [r4, #16]
 800de9e:	b943      	cbnz	r3, 800deb2 <__swsetup_r+0xc6>
 800dea0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800dea4:	d1ba      	bne.n	800de1c <__swsetup_r+0x30>
 800dea6:	bd70      	pop	{r4, r5, r6, pc}
 800dea8:	0781      	lsls	r1, r0, #30
 800deaa:	bf58      	it	pl
 800deac:	6963      	ldrpl	r3, [r4, #20]
 800deae:	60a3      	str	r3, [r4, #8]
 800deb0:	e7f4      	b.n	800de9c <__swsetup_r+0xb0>
 800deb2:	2000      	movs	r0, #0
 800deb4:	e7f7      	b.n	800dea6 <__swsetup_r+0xba>
 800deb6:	bf00      	nop
 800deb8:	200004e0 	.word	0x200004e0
 800debc:	0800f92c 	.word	0x0800f92c
 800dec0:	0800f94c 	.word	0x0800f94c
 800dec4:	0800f90c 	.word	0x0800f90c

0800dec8 <abort>:
 800dec8:	2006      	movs	r0, #6
 800deca:	b508      	push	{r3, lr}
 800decc:	f000 fe3c 	bl	800eb48 <raise>
 800ded0:	2001      	movs	r0, #1
 800ded2:	f7f8 fb68 	bl	80065a6 <_exit>
	...

0800ded8 <_close_r>:
 800ded8:	b538      	push	{r3, r4, r5, lr}
 800deda:	2300      	movs	r3, #0
 800dedc:	4d05      	ldr	r5, [pc, #20]	; (800def4 <_close_r+0x1c>)
 800dede:	4604      	mov	r4, r0
 800dee0:	4608      	mov	r0, r1
 800dee2:	602b      	str	r3, [r5, #0]
 800dee4:	f7f8 fba2 	bl	800662c <_close>
 800dee8:	1c43      	adds	r3, r0, #1
 800deea:	d102      	bne.n	800def2 <_close_r+0x1a>
 800deec:	682b      	ldr	r3, [r5, #0]
 800deee:	b103      	cbz	r3, 800def2 <_close_r+0x1a>
 800def0:	6023      	str	r3, [r4, #0]
 800def2:	bd38      	pop	{r3, r4, r5, pc}
 800def4:	20002c30 	.word	0x20002c30

0800def8 <__env_lock>:
 800def8:	4801      	ldr	r0, [pc, #4]	; (800df00 <__env_lock+0x8>)
 800defa:	f7ff b9b7 	b.w	800d26c <__retarget_lock_acquire_recursive>
 800defe:	bf00      	nop
 800df00:	20002c28 	.word	0x20002c28

0800df04 <__env_unlock>:
 800df04:	4801      	ldr	r0, [pc, #4]	; (800df0c <__env_unlock+0x8>)
 800df06:	f7ff b9b3 	b.w	800d270 <__retarget_lock_release_recursive>
 800df0a:	bf00      	nop
 800df0c:	20002c28 	.word	0x20002c28

0800df10 <__sflush_r>:
 800df10:	898a      	ldrh	r2, [r1, #12]
 800df12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df14:	4605      	mov	r5, r0
 800df16:	0710      	lsls	r0, r2, #28
 800df18:	460c      	mov	r4, r1
 800df1a:	d457      	bmi.n	800dfcc <__sflush_r+0xbc>
 800df1c:	684b      	ldr	r3, [r1, #4]
 800df1e:	2b00      	cmp	r3, #0
 800df20:	dc04      	bgt.n	800df2c <__sflush_r+0x1c>
 800df22:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800df24:	2b00      	cmp	r3, #0
 800df26:	dc01      	bgt.n	800df2c <__sflush_r+0x1c>
 800df28:	2000      	movs	r0, #0
 800df2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800df2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800df2e:	2e00      	cmp	r6, #0
 800df30:	d0fa      	beq.n	800df28 <__sflush_r+0x18>
 800df32:	2300      	movs	r3, #0
 800df34:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800df38:	682f      	ldr	r7, [r5, #0]
 800df3a:	602b      	str	r3, [r5, #0]
 800df3c:	d032      	beq.n	800dfa4 <__sflush_r+0x94>
 800df3e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800df40:	89a3      	ldrh	r3, [r4, #12]
 800df42:	075a      	lsls	r2, r3, #29
 800df44:	d505      	bpl.n	800df52 <__sflush_r+0x42>
 800df46:	6863      	ldr	r3, [r4, #4]
 800df48:	1ac0      	subs	r0, r0, r3
 800df4a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800df4c:	b10b      	cbz	r3, 800df52 <__sflush_r+0x42>
 800df4e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800df50:	1ac0      	subs	r0, r0, r3
 800df52:	2300      	movs	r3, #0
 800df54:	4602      	mov	r2, r0
 800df56:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800df58:	4628      	mov	r0, r5
 800df5a:	6a21      	ldr	r1, [r4, #32]
 800df5c:	47b0      	blx	r6
 800df5e:	1c43      	adds	r3, r0, #1
 800df60:	89a3      	ldrh	r3, [r4, #12]
 800df62:	d106      	bne.n	800df72 <__sflush_r+0x62>
 800df64:	6829      	ldr	r1, [r5, #0]
 800df66:	291d      	cmp	r1, #29
 800df68:	d82c      	bhi.n	800dfc4 <__sflush_r+0xb4>
 800df6a:	4a29      	ldr	r2, [pc, #164]	; (800e010 <__sflush_r+0x100>)
 800df6c:	40ca      	lsrs	r2, r1
 800df6e:	07d6      	lsls	r6, r2, #31
 800df70:	d528      	bpl.n	800dfc4 <__sflush_r+0xb4>
 800df72:	2200      	movs	r2, #0
 800df74:	6062      	str	r2, [r4, #4]
 800df76:	6922      	ldr	r2, [r4, #16]
 800df78:	04d9      	lsls	r1, r3, #19
 800df7a:	6022      	str	r2, [r4, #0]
 800df7c:	d504      	bpl.n	800df88 <__sflush_r+0x78>
 800df7e:	1c42      	adds	r2, r0, #1
 800df80:	d101      	bne.n	800df86 <__sflush_r+0x76>
 800df82:	682b      	ldr	r3, [r5, #0]
 800df84:	b903      	cbnz	r3, 800df88 <__sflush_r+0x78>
 800df86:	6560      	str	r0, [r4, #84]	; 0x54
 800df88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800df8a:	602f      	str	r7, [r5, #0]
 800df8c:	2900      	cmp	r1, #0
 800df8e:	d0cb      	beq.n	800df28 <__sflush_r+0x18>
 800df90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800df94:	4299      	cmp	r1, r3
 800df96:	d002      	beq.n	800df9e <__sflush_r+0x8e>
 800df98:	4628      	mov	r0, r5
 800df9a:	f7fe fbf5 	bl	800c788 <_free_r>
 800df9e:	2000      	movs	r0, #0
 800dfa0:	6360      	str	r0, [r4, #52]	; 0x34
 800dfa2:	e7c2      	b.n	800df2a <__sflush_r+0x1a>
 800dfa4:	6a21      	ldr	r1, [r4, #32]
 800dfa6:	2301      	movs	r3, #1
 800dfa8:	4628      	mov	r0, r5
 800dfaa:	47b0      	blx	r6
 800dfac:	1c41      	adds	r1, r0, #1
 800dfae:	d1c7      	bne.n	800df40 <__sflush_r+0x30>
 800dfb0:	682b      	ldr	r3, [r5, #0]
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d0c4      	beq.n	800df40 <__sflush_r+0x30>
 800dfb6:	2b1d      	cmp	r3, #29
 800dfb8:	d001      	beq.n	800dfbe <__sflush_r+0xae>
 800dfba:	2b16      	cmp	r3, #22
 800dfbc:	d101      	bne.n	800dfc2 <__sflush_r+0xb2>
 800dfbe:	602f      	str	r7, [r5, #0]
 800dfc0:	e7b2      	b.n	800df28 <__sflush_r+0x18>
 800dfc2:	89a3      	ldrh	r3, [r4, #12]
 800dfc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dfc8:	81a3      	strh	r3, [r4, #12]
 800dfca:	e7ae      	b.n	800df2a <__sflush_r+0x1a>
 800dfcc:	690f      	ldr	r7, [r1, #16]
 800dfce:	2f00      	cmp	r7, #0
 800dfd0:	d0aa      	beq.n	800df28 <__sflush_r+0x18>
 800dfd2:	0793      	lsls	r3, r2, #30
 800dfd4:	bf18      	it	ne
 800dfd6:	2300      	movne	r3, #0
 800dfd8:	680e      	ldr	r6, [r1, #0]
 800dfda:	bf08      	it	eq
 800dfdc:	694b      	ldreq	r3, [r1, #20]
 800dfde:	1bf6      	subs	r6, r6, r7
 800dfe0:	600f      	str	r7, [r1, #0]
 800dfe2:	608b      	str	r3, [r1, #8]
 800dfe4:	2e00      	cmp	r6, #0
 800dfe6:	dd9f      	ble.n	800df28 <__sflush_r+0x18>
 800dfe8:	4633      	mov	r3, r6
 800dfea:	463a      	mov	r2, r7
 800dfec:	4628      	mov	r0, r5
 800dfee:	6a21      	ldr	r1, [r4, #32]
 800dff0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800dff4:	47e0      	blx	ip
 800dff6:	2800      	cmp	r0, #0
 800dff8:	dc06      	bgt.n	800e008 <__sflush_r+0xf8>
 800dffa:	89a3      	ldrh	r3, [r4, #12]
 800dffc:	f04f 30ff 	mov.w	r0, #4294967295
 800e000:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e004:	81a3      	strh	r3, [r4, #12]
 800e006:	e790      	b.n	800df2a <__sflush_r+0x1a>
 800e008:	4407      	add	r7, r0
 800e00a:	1a36      	subs	r6, r6, r0
 800e00c:	e7ea      	b.n	800dfe4 <__sflush_r+0xd4>
 800e00e:	bf00      	nop
 800e010:	20400001 	.word	0x20400001

0800e014 <_fflush_r>:
 800e014:	b538      	push	{r3, r4, r5, lr}
 800e016:	690b      	ldr	r3, [r1, #16]
 800e018:	4605      	mov	r5, r0
 800e01a:	460c      	mov	r4, r1
 800e01c:	b913      	cbnz	r3, 800e024 <_fflush_r+0x10>
 800e01e:	2500      	movs	r5, #0
 800e020:	4628      	mov	r0, r5
 800e022:	bd38      	pop	{r3, r4, r5, pc}
 800e024:	b118      	cbz	r0, 800e02e <_fflush_r+0x1a>
 800e026:	6983      	ldr	r3, [r0, #24]
 800e028:	b90b      	cbnz	r3, 800e02e <_fflush_r+0x1a>
 800e02a:	f000 f887 	bl	800e13c <__sinit>
 800e02e:	4b14      	ldr	r3, [pc, #80]	; (800e080 <_fflush_r+0x6c>)
 800e030:	429c      	cmp	r4, r3
 800e032:	d11b      	bne.n	800e06c <_fflush_r+0x58>
 800e034:	686c      	ldr	r4, [r5, #4]
 800e036:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d0ef      	beq.n	800e01e <_fflush_r+0xa>
 800e03e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e040:	07d0      	lsls	r0, r2, #31
 800e042:	d404      	bmi.n	800e04e <_fflush_r+0x3a>
 800e044:	0599      	lsls	r1, r3, #22
 800e046:	d402      	bmi.n	800e04e <_fflush_r+0x3a>
 800e048:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e04a:	f7ff f90f 	bl	800d26c <__retarget_lock_acquire_recursive>
 800e04e:	4628      	mov	r0, r5
 800e050:	4621      	mov	r1, r4
 800e052:	f7ff ff5d 	bl	800df10 <__sflush_r>
 800e056:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e058:	4605      	mov	r5, r0
 800e05a:	07da      	lsls	r2, r3, #31
 800e05c:	d4e0      	bmi.n	800e020 <_fflush_r+0xc>
 800e05e:	89a3      	ldrh	r3, [r4, #12]
 800e060:	059b      	lsls	r3, r3, #22
 800e062:	d4dd      	bmi.n	800e020 <_fflush_r+0xc>
 800e064:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e066:	f7ff f903 	bl	800d270 <__retarget_lock_release_recursive>
 800e06a:	e7d9      	b.n	800e020 <_fflush_r+0xc>
 800e06c:	4b05      	ldr	r3, [pc, #20]	; (800e084 <_fflush_r+0x70>)
 800e06e:	429c      	cmp	r4, r3
 800e070:	d101      	bne.n	800e076 <_fflush_r+0x62>
 800e072:	68ac      	ldr	r4, [r5, #8]
 800e074:	e7df      	b.n	800e036 <_fflush_r+0x22>
 800e076:	4b04      	ldr	r3, [pc, #16]	; (800e088 <_fflush_r+0x74>)
 800e078:	429c      	cmp	r4, r3
 800e07a:	bf08      	it	eq
 800e07c:	68ec      	ldreq	r4, [r5, #12]
 800e07e:	e7da      	b.n	800e036 <_fflush_r+0x22>
 800e080:	0800f92c 	.word	0x0800f92c
 800e084:	0800f94c 	.word	0x0800f94c
 800e088:	0800f90c 	.word	0x0800f90c

0800e08c <std>:
 800e08c:	2300      	movs	r3, #0
 800e08e:	b510      	push	{r4, lr}
 800e090:	4604      	mov	r4, r0
 800e092:	e9c0 3300 	strd	r3, r3, [r0]
 800e096:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e09a:	6083      	str	r3, [r0, #8]
 800e09c:	8181      	strh	r1, [r0, #12]
 800e09e:	6643      	str	r3, [r0, #100]	; 0x64
 800e0a0:	81c2      	strh	r2, [r0, #14]
 800e0a2:	6183      	str	r3, [r0, #24]
 800e0a4:	4619      	mov	r1, r3
 800e0a6:	2208      	movs	r2, #8
 800e0a8:	305c      	adds	r0, #92	; 0x5c
 800e0aa:	f7fe f8f3 	bl	800c294 <memset>
 800e0ae:	4b05      	ldr	r3, [pc, #20]	; (800e0c4 <std+0x38>)
 800e0b0:	6224      	str	r4, [r4, #32]
 800e0b2:	6263      	str	r3, [r4, #36]	; 0x24
 800e0b4:	4b04      	ldr	r3, [pc, #16]	; (800e0c8 <std+0x3c>)
 800e0b6:	62a3      	str	r3, [r4, #40]	; 0x28
 800e0b8:	4b04      	ldr	r3, [pc, #16]	; (800e0cc <std+0x40>)
 800e0ba:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e0bc:	4b04      	ldr	r3, [pc, #16]	; (800e0d0 <std+0x44>)
 800e0be:	6323      	str	r3, [r4, #48]	; 0x30
 800e0c0:	bd10      	pop	{r4, pc}
 800e0c2:	bf00      	nop
 800e0c4:	0800db75 	.word	0x0800db75
 800e0c8:	0800db9b 	.word	0x0800db9b
 800e0cc:	0800dbd3 	.word	0x0800dbd3
 800e0d0:	0800dbf7 	.word	0x0800dbf7

0800e0d4 <_cleanup_r>:
 800e0d4:	4901      	ldr	r1, [pc, #4]	; (800e0dc <_cleanup_r+0x8>)
 800e0d6:	f000 b8af 	b.w	800e238 <_fwalk_reent>
 800e0da:	bf00      	nop
 800e0dc:	0800e015 	.word	0x0800e015

0800e0e0 <__sfmoreglue>:
 800e0e0:	2268      	movs	r2, #104	; 0x68
 800e0e2:	b570      	push	{r4, r5, r6, lr}
 800e0e4:	1e4d      	subs	r5, r1, #1
 800e0e6:	4355      	muls	r5, r2
 800e0e8:	460e      	mov	r6, r1
 800e0ea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e0ee:	f7fe fbb3 	bl	800c858 <_malloc_r>
 800e0f2:	4604      	mov	r4, r0
 800e0f4:	b140      	cbz	r0, 800e108 <__sfmoreglue+0x28>
 800e0f6:	2100      	movs	r1, #0
 800e0f8:	e9c0 1600 	strd	r1, r6, [r0]
 800e0fc:	300c      	adds	r0, #12
 800e0fe:	60a0      	str	r0, [r4, #8]
 800e100:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e104:	f7fe f8c6 	bl	800c294 <memset>
 800e108:	4620      	mov	r0, r4
 800e10a:	bd70      	pop	{r4, r5, r6, pc}

0800e10c <__sfp_lock_acquire>:
 800e10c:	4801      	ldr	r0, [pc, #4]	; (800e114 <__sfp_lock_acquire+0x8>)
 800e10e:	f7ff b8ad 	b.w	800d26c <__retarget_lock_acquire_recursive>
 800e112:	bf00      	nop
 800e114:	20002c2a 	.word	0x20002c2a

0800e118 <__sfp_lock_release>:
 800e118:	4801      	ldr	r0, [pc, #4]	; (800e120 <__sfp_lock_release+0x8>)
 800e11a:	f7ff b8a9 	b.w	800d270 <__retarget_lock_release_recursive>
 800e11e:	bf00      	nop
 800e120:	20002c2a 	.word	0x20002c2a

0800e124 <__sinit_lock_acquire>:
 800e124:	4801      	ldr	r0, [pc, #4]	; (800e12c <__sinit_lock_acquire+0x8>)
 800e126:	f7ff b8a1 	b.w	800d26c <__retarget_lock_acquire_recursive>
 800e12a:	bf00      	nop
 800e12c:	20002c2b 	.word	0x20002c2b

0800e130 <__sinit_lock_release>:
 800e130:	4801      	ldr	r0, [pc, #4]	; (800e138 <__sinit_lock_release+0x8>)
 800e132:	f7ff b89d 	b.w	800d270 <__retarget_lock_release_recursive>
 800e136:	bf00      	nop
 800e138:	20002c2b 	.word	0x20002c2b

0800e13c <__sinit>:
 800e13c:	b510      	push	{r4, lr}
 800e13e:	4604      	mov	r4, r0
 800e140:	f7ff fff0 	bl	800e124 <__sinit_lock_acquire>
 800e144:	69a3      	ldr	r3, [r4, #24]
 800e146:	b11b      	cbz	r3, 800e150 <__sinit+0x14>
 800e148:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e14c:	f7ff bff0 	b.w	800e130 <__sinit_lock_release>
 800e150:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e154:	6523      	str	r3, [r4, #80]	; 0x50
 800e156:	4b13      	ldr	r3, [pc, #76]	; (800e1a4 <__sinit+0x68>)
 800e158:	4a13      	ldr	r2, [pc, #76]	; (800e1a8 <__sinit+0x6c>)
 800e15a:	681b      	ldr	r3, [r3, #0]
 800e15c:	62a2      	str	r2, [r4, #40]	; 0x28
 800e15e:	42a3      	cmp	r3, r4
 800e160:	bf08      	it	eq
 800e162:	2301      	moveq	r3, #1
 800e164:	4620      	mov	r0, r4
 800e166:	bf08      	it	eq
 800e168:	61a3      	streq	r3, [r4, #24]
 800e16a:	f000 f81f 	bl	800e1ac <__sfp>
 800e16e:	6060      	str	r0, [r4, #4]
 800e170:	4620      	mov	r0, r4
 800e172:	f000 f81b 	bl	800e1ac <__sfp>
 800e176:	60a0      	str	r0, [r4, #8]
 800e178:	4620      	mov	r0, r4
 800e17a:	f000 f817 	bl	800e1ac <__sfp>
 800e17e:	2200      	movs	r2, #0
 800e180:	2104      	movs	r1, #4
 800e182:	60e0      	str	r0, [r4, #12]
 800e184:	6860      	ldr	r0, [r4, #4]
 800e186:	f7ff ff81 	bl	800e08c <std>
 800e18a:	2201      	movs	r2, #1
 800e18c:	2109      	movs	r1, #9
 800e18e:	68a0      	ldr	r0, [r4, #8]
 800e190:	f7ff ff7c 	bl	800e08c <std>
 800e194:	2202      	movs	r2, #2
 800e196:	2112      	movs	r1, #18
 800e198:	68e0      	ldr	r0, [r4, #12]
 800e19a:	f7ff ff77 	bl	800e08c <std>
 800e19e:	2301      	movs	r3, #1
 800e1a0:	61a3      	str	r3, [r4, #24]
 800e1a2:	e7d1      	b.n	800e148 <__sinit+0xc>
 800e1a4:	0800f5c8 	.word	0x0800f5c8
 800e1a8:	0800e0d5 	.word	0x0800e0d5

0800e1ac <__sfp>:
 800e1ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1ae:	4607      	mov	r7, r0
 800e1b0:	f7ff ffac 	bl	800e10c <__sfp_lock_acquire>
 800e1b4:	4b1e      	ldr	r3, [pc, #120]	; (800e230 <__sfp+0x84>)
 800e1b6:	681e      	ldr	r6, [r3, #0]
 800e1b8:	69b3      	ldr	r3, [r6, #24]
 800e1ba:	b913      	cbnz	r3, 800e1c2 <__sfp+0x16>
 800e1bc:	4630      	mov	r0, r6
 800e1be:	f7ff ffbd 	bl	800e13c <__sinit>
 800e1c2:	3648      	adds	r6, #72	; 0x48
 800e1c4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e1c8:	3b01      	subs	r3, #1
 800e1ca:	d503      	bpl.n	800e1d4 <__sfp+0x28>
 800e1cc:	6833      	ldr	r3, [r6, #0]
 800e1ce:	b30b      	cbz	r3, 800e214 <__sfp+0x68>
 800e1d0:	6836      	ldr	r6, [r6, #0]
 800e1d2:	e7f7      	b.n	800e1c4 <__sfp+0x18>
 800e1d4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e1d8:	b9d5      	cbnz	r5, 800e210 <__sfp+0x64>
 800e1da:	4b16      	ldr	r3, [pc, #88]	; (800e234 <__sfp+0x88>)
 800e1dc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e1e0:	60e3      	str	r3, [r4, #12]
 800e1e2:	6665      	str	r5, [r4, #100]	; 0x64
 800e1e4:	f7ff f840 	bl	800d268 <__retarget_lock_init_recursive>
 800e1e8:	f7ff ff96 	bl	800e118 <__sfp_lock_release>
 800e1ec:	2208      	movs	r2, #8
 800e1ee:	4629      	mov	r1, r5
 800e1f0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e1f4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e1f8:	6025      	str	r5, [r4, #0]
 800e1fa:	61a5      	str	r5, [r4, #24]
 800e1fc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e200:	f7fe f848 	bl	800c294 <memset>
 800e204:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e208:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e20c:	4620      	mov	r0, r4
 800e20e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e210:	3468      	adds	r4, #104	; 0x68
 800e212:	e7d9      	b.n	800e1c8 <__sfp+0x1c>
 800e214:	2104      	movs	r1, #4
 800e216:	4638      	mov	r0, r7
 800e218:	f7ff ff62 	bl	800e0e0 <__sfmoreglue>
 800e21c:	4604      	mov	r4, r0
 800e21e:	6030      	str	r0, [r6, #0]
 800e220:	2800      	cmp	r0, #0
 800e222:	d1d5      	bne.n	800e1d0 <__sfp+0x24>
 800e224:	f7ff ff78 	bl	800e118 <__sfp_lock_release>
 800e228:	230c      	movs	r3, #12
 800e22a:	603b      	str	r3, [r7, #0]
 800e22c:	e7ee      	b.n	800e20c <__sfp+0x60>
 800e22e:	bf00      	nop
 800e230:	0800f5c8 	.word	0x0800f5c8
 800e234:	ffff0001 	.word	0xffff0001

0800e238 <_fwalk_reent>:
 800e238:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e23c:	4606      	mov	r6, r0
 800e23e:	4688      	mov	r8, r1
 800e240:	2700      	movs	r7, #0
 800e242:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e246:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e24a:	f1b9 0901 	subs.w	r9, r9, #1
 800e24e:	d505      	bpl.n	800e25c <_fwalk_reent+0x24>
 800e250:	6824      	ldr	r4, [r4, #0]
 800e252:	2c00      	cmp	r4, #0
 800e254:	d1f7      	bne.n	800e246 <_fwalk_reent+0xe>
 800e256:	4638      	mov	r0, r7
 800e258:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e25c:	89ab      	ldrh	r3, [r5, #12]
 800e25e:	2b01      	cmp	r3, #1
 800e260:	d907      	bls.n	800e272 <_fwalk_reent+0x3a>
 800e262:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e266:	3301      	adds	r3, #1
 800e268:	d003      	beq.n	800e272 <_fwalk_reent+0x3a>
 800e26a:	4629      	mov	r1, r5
 800e26c:	4630      	mov	r0, r6
 800e26e:	47c0      	blx	r8
 800e270:	4307      	orrs	r7, r0
 800e272:	3568      	adds	r5, #104	; 0x68
 800e274:	e7e9      	b.n	800e24a <_fwalk_reent+0x12>
	...

0800e278 <_lseek_r>:
 800e278:	b538      	push	{r3, r4, r5, lr}
 800e27a:	4604      	mov	r4, r0
 800e27c:	4608      	mov	r0, r1
 800e27e:	4611      	mov	r1, r2
 800e280:	2200      	movs	r2, #0
 800e282:	4d05      	ldr	r5, [pc, #20]	; (800e298 <_lseek_r+0x20>)
 800e284:	602a      	str	r2, [r5, #0]
 800e286:	461a      	mov	r2, r3
 800e288:	f7f8 f9f4 	bl	8006674 <_lseek>
 800e28c:	1c43      	adds	r3, r0, #1
 800e28e:	d102      	bne.n	800e296 <_lseek_r+0x1e>
 800e290:	682b      	ldr	r3, [r5, #0]
 800e292:	b103      	cbz	r3, 800e296 <_lseek_r+0x1e>
 800e294:	6023      	str	r3, [r4, #0]
 800e296:	bd38      	pop	{r3, r4, r5, pc}
 800e298:	20002c30 	.word	0x20002c30

0800e29c <__swhatbuf_r>:
 800e29c:	b570      	push	{r4, r5, r6, lr}
 800e29e:	460e      	mov	r6, r1
 800e2a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e2a4:	4614      	mov	r4, r2
 800e2a6:	2900      	cmp	r1, #0
 800e2a8:	461d      	mov	r5, r3
 800e2aa:	b096      	sub	sp, #88	; 0x58
 800e2ac:	da08      	bge.n	800e2c0 <__swhatbuf_r+0x24>
 800e2ae:	2200      	movs	r2, #0
 800e2b0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800e2b4:	602a      	str	r2, [r5, #0]
 800e2b6:	061a      	lsls	r2, r3, #24
 800e2b8:	d410      	bmi.n	800e2dc <__swhatbuf_r+0x40>
 800e2ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e2be:	e00e      	b.n	800e2de <__swhatbuf_r+0x42>
 800e2c0:	466a      	mov	r2, sp
 800e2c2:	f000 fc95 	bl	800ebf0 <_fstat_r>
 800e2c6:	2800      	cmp	r0, #0
 800e2c8:	dbf1      	blt.n	800e2ae <__swhatbuf_r+0x12>
 800e2ca:	9a01      	ldr	r2, [sp, #4]
 800e2cc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e2d0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e2d4:	425a      	negs	r2, r3
 800e2d6:	415a      	adcs	r2, r3
 800e2d8:	602a      	str	r2, [r5, #0]
 800e2da:	e7ee      	b.n	800e2ba <__swhatbuf_r+0x1e>
 800e2dc:	2340      	movs	r3, #64	; 0x40
 800e2de:	2000      	movs	r0, #0
 800e2e0:	6023      	str	r3, [r4, #0]
 800e2e2:	b016      	add	sp, #88	; 0x58
 800e2e4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e2e8 <__smakebuf_r>:
 800e2e8:	898b      	ldrh	r3, [r1, #12]
 800e2ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e2ec:	079d      	lsls	r5, r3, #30
 800e2ee:	4606      	mov	r6, r0
 800e2f0:	460c      	mov	r4, r1
 800e2f2:	d507      	bpl.n	800e304 <__smakebuf_r+0x1c>
 800e2f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e2f8:	6023      	str	r3, [r4, #0]
 800e2fa:	6123      	str	r3, [r4, #16]
 800e2fc:	2301      	movs	r3, #1
 800e2fe:	6163      	str	r3, [r4, #20]
 800e300:	b002      	add	sp, #8
 800e302:	bd70      	pop	{r4, r5, r6, pc}
 800e304:	466a      	mov	r2, sp
 800e306:	ab01      	add	r3, sp, #4
 800e308:	f7ff ffc8 	bl	800e29c <__swhatbuf_r>
 800e30c:	9900      	ldr	r1, [sp, #0]
 800e30e:	4605      	mov	r5, r0
 800e310:	4630      	mov	r0, r6
 800e312:	f7fe faa1 	bl	800c858 <_malloc_r>
 800e316:	b948      	cbnz	r0, 800e32c <__smakebuf_r+0x44>
 800e318:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e31c:	059a      	lsls	r2, r3, #22
 800e31e:	d4ef      	bmi.n	800e300 <__smakebuf_r+0x18>
 800e320:	f023 0303 	bic.w	r3, r3, #3
 800e324:	f043 0302 	orr.w	r3, r3, #2
 800e328:	81a3      	strh	r3, [r4, #12]
 800e32a:	e7e3      	b.n	800e2f4 <__smakebuf_r+0xc>
 800e32c:	4b0d      	ldr	r3, [pc, #52]	; (800e364 <__smakebuf_r+0x7c>)
 800e32e:	62b3      	str	r3, [r6, #40]	; 0x28
 800e330:	89a3      	ldrh	r3, [r4, #12]
 800e332:	6020      	str	r0, [r4, #0]
 800e334:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e338:	81a3      	strh	r3, [r4, #12]
 800e33a:	9b00      	ldr	r3, [sp, #0]
 800e33c:	6120      	str	r0, [r4, #16]
 800e33e:	6163      	str	r3, [r4, #20]
 800e340:	9b01      	ldr	r3, [sp, #4]
 800e342:	b15b      	cbz	r3, 800e35c <__smakebuf_r+0x74>
 800e344:	4630      	mov	r0, r6
 800e346:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e34a:	f000 fc63 	bl	800ec14 <_isatty_r>
 800e34e:	b128      	cbz	r0, 800e35c <__smakebuf_r+0x74>
 800e350:	89a3      	ldrh	r3, [r4, #12]
 800e352:	f023 0303 	bic.w	r3, r3, #3
 800e356:	f043 0301 	orr.w	r3, r3, #1
 800e35a:	81a3      	strh	r3, [r4, #12]
 800e35c:	89a0      	ldrh	r0, [r4, #12]
 800e35e:	4305      	orrs	r5, r0
 800e360:	81a5      	strh	r5, [r4, #12]
 800e362:	e7cd      	b.n	800e300 <__smakebuf_r+0x18>
 800e364:	0800e0d5 	.word	0x0800e0d5

0800e368 <memchr>:
 800e368:	4603      	mov	r3, r0
 800e36a:	b510      	push	{r4, lr}
 800e36c:	b2c9      	uxtb	r1, r1
 800e36e:	4402      	add	r2, r0
 800e370:	4293      	cmp	r3, r2
 800e372:	4618      	mov	r0, r3
 800e374:	d101      	bne.n	800e37a <memchr+0x12>
 800e376:	2000      	movs	r0, #0
 800e378:	e003      	b.n	800e382 <memchr+0x1a>
 800e37a:	7804      	ldrb	r4, [r0, #0]
 800e37c:	3301      	adds	r3, #1
 800e37e:	428c      	cmp	r4, r1
 800e380:	d1f6      	bne.n	800e370 <memchr+0x8>
 800e382:	bd10      	pop	{r4, pc}

0800e384 <memmove>:
 800e384:	4288      	cmp	r0, r1
 800e386:	b510      	push	{r4, lr}
 800e388:	eb01 0402 	add.w	r4, r1, r2
 800e38c:	d902      	bls.n	800e394 <memmove+0x10>
 800e38e:	4284      	cmp	r4, r0
 800e390:	4623      	mov	r3, r4
 800e392:	d807      	bhi.n	800e3a4 <memmove+0x20>
 800e394:	1e43      	subs	r3, r0, #1
 800e396:	42a1      	cmp	r1, r4
 800e398:	d008      	beq.n	800e3ac <memmove+0x28>
 800e39a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e39e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e3a2:	e7f8      	b.n	800e396 <memmove+0x12>
 800e3a4:	4601      	mov	r1, r0
 800e3a6:	4402      	add	r2, r0
 800e3a8:	428a      	cmp	r2, r1
 800e3aa:	d100      	bne.n	800e3ae <memmove+0x2a>
 800e3ac:	bd10      	pop	{r4, pc}
 800e3ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e3b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e3b6:	e7f7      	b.n	800e3a8 <memmove+0x24>

0800e3b8 <_realloc_r>:
 800e3b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e3bc:	4680      	mov	r8, r0
 800e3be:	4614      	mov	r4, r2
 800e3c0:	460e      	mov	r6, r1
 800e3c2:	b921      	cbnz	r1, 800e3ce <_realloc_r+0x16>
 800e3c4:	4611      	mov	r1, r2
 800e3c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e3ca:	f7fe ba45 	b.w	800c858 <_malloc_r>
 800e3ce:	b92a      	cbnz	r2, 800e3dc <_realloc_r+0x24>
 800e3d0:	f7fe f9da 	bl	800c788 <_free_r>
 800e3d4:	4625      	mov	r5, r4
 800e3d6:	4628      	mov	r0, r5
 800e3d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e3dc:	f000 fc2a 	bl	800ec34 <_malloc_usable_size_r>
 800e3e0:	4284      	cmp	r4, r0
 800e3e2:	4607      	mov	r7, r0
 800e3e4:	d802      	bhi.n	800e3ec <_realloc_r+0x34>
 800e3e6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e3ea:	d812      	bhi.n	800e412 <_realloc_r+0x5a>
 800e3ec:	4621      	mov	r1, r4
 800e3ee:	4640      	mov	r0, r8
 800e3f0:	f7fe fa32 	bl	800c858 <_malloc_r>
 800e3f4:	4605      	mov	r5, r0
 800e3f6:	2800      	cmp	r0, #0
 800e3f8:	d0ed      	beq.n	800e3d6 <_realloc_r+0x1e>
 800e3fa:	42bc      	cmp	r4, r7
 800e3fc:	4622      	mov	r2, r4
 800e3fe:	4631      	mov	r1, r6
 800e400:	bf28      	it	cs
 800e402:	463a      	movcs	r2, r7
 800e404:	f7fd ff38 	bl	800c278 <memcpy>
 800e408:	4631      	mov	r1, r6
 800e40a:	4640      	mov	r0, r8
 800e40c:	f7fe f9bc 	bl	800c788 <_free_r>
 800e410:	e7e1      	b.n	800e3d6 <_realloc_r+0x1e>
 800e412:	4635      	mov	r5, r6
 800e414:	e7df      	b.n	800e3d6 <_realloc_r+0x1e>

0800e416 <_sungetc_r>:
 800e416:	b538      	push	{r3, r4, r5, lr}
 800e418:	1c4b      	adds	r3, r1, #1
 800e41a:	4614      	mov	r4, r2
 800e41c:	d103      	bne.n	800e426 <_sungetc_r+0x10>
 800e41e:	f04f 35ff 	mov.w	r5, #4294967295
 800e422:	4628      	mov	r0, r5
 800e424:	bd38      	pop	{r3, r4, r5, pc}
 800e426:	8993      	ldrh	r3, [r2, #12]
 800e428:	b2cd      	uxtb	r5, r1
 800e42a:	f023 0320 	bic.w	r3, r3, #32
 800e42e:	8193      	strh	r3, [r2, #12]
 800e430:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e432:	6852      	ldr	r2, [r2, #4]
 800e434:	b18b      	cbz	r3, 800e45a <_sungetc_r+0x44>
 800e436:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e438:	4293      	cmp	r3, r2
 800e43a:	dd08      	ble.n	800e44e <_sungetc_r+0x38>
 800e43c:	6823      	ldr	r3, [r4, #0]
 800e43e:	1e5a      	subs	r2, r3, #1
 800e440:	6022      	str	r2, [r4, #0]
 800e442:	f803 5c01 	strb.w	r5, [r3, #-1]
 800e446:	6863      	ldr	r3, [r4, #4]
 800e448:	3301      	adds	r3, #1
 800e44a:	6063      	str	r3, [r4, #4]
 800e44c:	e7e9      	b.n	800e422 <_sungetc_r+0xc>
 800e44e:	4621      	mov	r1, r4
 800e450:	f000 fb96 	bl	800eb80 <__submore>
 800e454:	2800      	cmp	r0, #0
 800e456:	d0f1      	beq.n	800e43c <_sungetc_r+0x26>
 800e458:	e7e1      	b.n	800e41e <_sungetc_r+0x8>
 800e45a:	6921      	ldr	r1, [r4, #16]
 800e45c:	6823      	ldr	r3, [r4, #0]
 800e45e:	b151      	cbz	r1, 800e476 <_sungetc_r+0x60>
 800e460:	4299      	cmp	r1, r3
 800e462:	d208      	bcs.n	800e476 <_sungetc_r+0x60>
 800e464:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800e468:	42a9      	cmp	r1, r5
 800e46a:	d104      	bne.n	800e476 <_sungetc_r+0x60>
 800e46c:	3b01      	subs	r3, #1
 800e46e:	3201      	adds	r2, #1
 800e470:	6023      	str	r3, [r4, #0]
 800e472:	6062      	str	r2, [r4, #4]
 800e474:	e7d5      	b.n	800e422 <_sungetc_r+0xc>
 800e476:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800e47a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e47e:	6363      	str	r3, [r4, #52]	; 0x34
 800e480:	2303      	movs	r3, #3
 800e482:	63a3      	str	r3, [r4, #56]	; 0x38
 800e484:	4623      	mov	r3, r4
 800e486:	f803 5f46 	strb.w	r5, [r3, #70]!
 800e48a:	6023      	str	r3, [r4, #0]
 800e48c:	2301      	movs	r3, #1
 800e48e:	e7dc      	b.n	800e44a <_sungetc_r+0x34>

0800e490 <__ssrefill_r>:
 800e490:	b510      	push	{r4, lr}
 800e492:	460c      	mov	r4, r1
 800e494:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800e496:	b169      	cbz	r1, 800e4b4 <__ssrefill_r+0x24>
 800e498:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e49c:	4299      	cmp	r1, r3
 800e49e:	d001      	beq.n	800e4a4 <__ssrefill_r+0x14>
 800e4a0:	f7fe f972 	bl	800c788 <_free_r>
 800e4a4:	2000      	movs	r0, #0
 800e4a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e4a8:	6360      	str	r0, [r4, #52]	; 0x34
 800e4aa:	6063      	str	r3, [r4, #4]
 800e4ac:	b113      	cbz	r3, 800e4b4 <__ssrefill_r+0x24>
 800e4ae:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e4b0:	6023      	str	r3, [r4, #0]
 800e4b2:	bd10      	pop	{r4, pc}
 800e4b4:	6923      	ldr	r3, [r4, #16]
 800e4b6:	f04f 30ff 	mov.w	r0, #4294967295
 800e4ba:	6023      	str	r3, [r4, #0]
 800e4bc:	2300      	movs	r3, #0
 800e4be:	6063      	str	r3, [r4, #4]
 800e4c0:	89a3      	ldrh	r3, [r4, #12]
 800e4c2:	f043 0320 	orr.w	r3, r3, #32
 800e4c6:	81a3      	strh	r3, [r4, #12]
 800e4c8:	e7f3      	b.n	800e4b2 <__ssrefill_r+0x22>
	...

0800e4cc <__ssvfiscanf_r>:
 800e4cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e4d0:	460c      	mov	r4, r1
 800e4d2:	2100      	movs	r1, #0
 800e4d4:	4606      	mov	r6, r0
 800e4d6:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800e4da:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800e4de:	49a7      	ldr	r1, [pc, #668]	; (800e77c <__ssvfiscanf_r+0x2b0>)
 800e4e0:	f10d 0804 	add.w	r8, sp, #4
 800e4e4:	91a0      	str	r1, [sp, #640]	; 0x280
 800e4e6:	49a6      	ldr	r1, [pc, #664]	; (800e780 <__ssvfiscanf_r+0x2b4>)
 800e4e8:	4fa6      	ldr	r7, [pc, #664]	; (800e784 <__ssvfiscanf_r+0x2b8>)
 800e4ea:	f8df 929c 	ldr.w	r9, [pc, #668]	; 800e788 <__ssvfiscanf_r+0x2bc>
 800e4ee:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800e4f2:	91a1      	str	r1, [sp, #644]	; 0x284
 800e4f4:	9300      	str	r3, [sp, #0]
 800e4f6:	7813      	ldrb	r3, [r2, #0]
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	f000 815c 	beq.w	800e7b6 <__ssvfiscanf_r+0x2ea>
 800e4fe:	5dd9      	ldrb	r1, [r3, r7]
 800e500:	1c55      	adds	r5, r2, #1
 800e502:	f011 0108 	ands.w	r1, r1, #8
 800e506:	d019      	beq.n	800e53c <__ssvfiscanf_r+0x70>
 800e508:	6863      	ldr	r3, [r4, #4]
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	dd0f      	ble.n	800e52e <__ssvfiscanf_r+0x62>
 800e50e:	6823      	ldr	r3, [r4, #0]
 800e510:	781a      	ldrb	r2, [r3, #0]
 800e512:	5cba      	ldrb	r2, [r7, r2]
 800e514:	0712      	lsls	r2, r2, #28
 800e516:	d401      	bmi.n	800e51c <__ssvfiscanf_r+0x50>
 800e518:	462a      	mov	r2, r5
 800e51a:	e7ec      	b.n	800e4f6 <__ssvfiscanf_r+0x2a>
 800e51c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800e51e:	3301      	adds	r3, #1
 800e520:	3201      	adds	r2, #1
 800e522:	9245      	str	r2, [sp, #276]	; 0x114
 800e524:	6862      	ldr	r2, [r4, #4]
 800e526:	6023      	str	r3, [r4, #0]
 800e528:	3a01      	subs	r2, #1
 800e52a:	6062      	str	r2, [r4, #4]
 800e52c:	e7ec      	b.n	800e508 <__ssvfiscanf_r+0x3c>
 800e52e:	4621      	mov	r1, r4
 800e530:	4630      	mov	r0, r6
 800e532:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e534:	4798      	blx	r3
 800e536:	2800      	cmp	r0, #0
 800e538:	d0e9      	beq.n	800e50e <__ssvfiscanf_r+0x42>
 800e53a:	e7ed      	b.n	800e518 <__ssvfiscanf_r+0x4c>
 800e53c:	2b25      	cmp	r3, #37	; 0x25
 800e53e:	d012      	beq.n	800e566 <__ssvfiscanf_r+0x9a>
 800e540:	469a      	mov	sl, r3
 800e542:	6863      	ldr	r3, [r4, #4]
 800e544:	2b00      	cmp	r3, #0
 800e546:	f340 8094 	ble.w	800e672 <__ssvfiscanf_r+0x1a6>
 800e54a:	6822      	ldr	r2, [r4, #0]
 800e54c:	7813      	ldrb	r3, [r2, #0]
 800e54e:	4553      	cmp	r3, sl
 800e550:	f040 8131 	bne.w	800e7b6 <__ssvfiscanf_r+0x2ea>
 800e554:	6863      	ldr	r3, [r4, #4]
 800e556:	3201      	adds	r2, #1
 800e558:	3b01      	subs	r3, #1
 800e55a:	6063      	str	r3, [r4, #4]
 800e55c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800e55e:	6022      	str	r2, [r4, #0]
 800e560:	3301      	adds	r3, #1
 800e562:	9345      	str	r3, [sp, #276]	; 0x114
 800e564:	e7d8      	b.n	800e518 <__ssvfiscanf_r+0x4c>
 800e566:	9141      	str	r1, [sp, #260]	; 0x104
 800e568:	9143      	str	r1, [sp, #268]	; 0x10c
 800e56a:	7853      	ldrb	r3, [r2, #1]
 800e56c:	2b2a      	cmp	r3, #42	; 0x2a
 800e56e:	bf04      	itt	eq
 800e570:	2310      	moveq	r3, #16
 800e572:	1c95      	addeq	r5, r2, #2
 800e574:	f04f 020a 	mov.w	r2, #10
 800e578:	bf08      	it	eq
 800e57a:	9341      	streq	r3, [sp, #260]	; 0x104
 800e57c:	46aa      	mov	sl, r5
 800e57e:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800e582:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800e586:	2b09      	cmp	r3, #9
 800e588:	d91d      	bls.n	800e5c6 <__ssvfiscanf_r+0xfa>
 800e58a:	2203      	movs	r2, #3
 800e58c:	487e      	ldr	r0, [pc, #504]	; (800e788 <__ssvfiscanf_r+0x2bc>)
 800e58e:	f7ff feeb 	bl	800e368 <memchr>
 800e592:	b140      	cbz	r0, 800e5a6 <__ssvfiscanf_r+0xda>
 800e594:	2301      	movs	r3, #1
 800e596:	4655      	mov	r5, sl
 800e598:	eba0 0009 	sub.w	r0, r0, r9
 800e59c:	fa03 f000 	lsl.w	r0, r3, r0
 800e5a0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e5a2:	4318      	orrs	r0, r3
 800e5a4:	9041      	str	r0, [sp, #260]	; 0x104
 800e5a6:	f815 3b01 	ldrb.w	r3, [r5], #1
 800e5aa:	2b78      	cmp	r3, #120	; 0x78
 800e5ac:	d806      	bhi.n	800e5bc <__ssvfiscanf_r+0xf0>
 800e5ae:	2b57      	cmp	r3, #87	; 0x57
 800e5b0:	d810      	bhi.n	800e5d4 <__ssvfiscanf_r+0x108>
 800e5b2:	2b25      	cmp	r3, #37	; 0x25
 800e5b4:	d0c4      	beq.n	800e540 <__ssvfiscanf_r+0x74>
 800e5b6:	d857      	bhi.n	800e668 <__ssvfiscanf_r+0x19c>
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d065      	beq.n	800e688 <__ssvfiscanf_r+0x1bc>
 800e5bc:	2303      	movs	r3, #3
 800e5be:	9347      	str	r3, [sp, #284]	; 0x11c
 800e5c0:	230a      	movs	r3, #10
 800e5c2:	9342      	str	r3, [sp, #264]	; 0x108
 800e5c4:	e072      	b.n	800e6ac <__ssvfiscanf_r+0x1e0>
 800e5c6:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800e5c8:	4655      	mov	r5, sl
 800e5ca:	fb02 1103 	mla	r1, r2, r3, r1
 800e5ce:	3930      	subs	r1, #48	; 0x30
 800e5d0:	9143      	str	r1, [sp, #268]	; 0x10c
 800e5d2:	e7d3      	b.n	800e57c <__ssvfiscanf_r+0xb0>
 800e5d4:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800e5d8:	2a20      	cmp	r2, #32
 800e5da:	d8ef      	bhi.n	800e5bc <__ssvfiscanf_r+0xf0>
 800e5dc:	a101      	add	r1, pc, #4	; (adr r1, 800e5e4 <__ssvfiscanf_r+0x118>)
 800e5de:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800e5e2:	bf00      	nop
 800e5e4:	0800e697 	.word	0x0800e697
 800e5e8:	0800e5bd 	.word	0x0800e5bd
 800e5ec:	0800e5bd 	.word	0x0800e5bd
 800e5f0:	0800e6f5 	.word	0x0800e6f5
 800e5f4:	0800e5bd 	.word	0x0800e5bd
 800e5f8:	0800e5bd 	.word	0x0800e5bd
 800e5fc:	0800e5bd 	.word	0x0800e5bd
 800e600:	0800e5bd 	.word	0x0800e5bd
 800e604:	0800e5bd 	.word	0x0800e5bd
 800e608:	0800e5bd 	.word	0x0800e5bd
 800e60c:	0800e5bd 	.word	0x0800e5bd
 800e610:	0800e70b 	.word	0x0800e70b
 800e614:	0800e6e1 	.word	0x0800e6e1
 800e618:	0800e66f 	.word	0x0800e66f
 800e61c:	0800e66f 	.word	0x0800e66f
 800e620:	0800e66f 	.word	0x0800e66f
 800e624:	0800e5bd 	.word	0x0800e5bd
 800e628:	0800e6e5 	.word	0x0800e6e5
 800e62c:	0800e5bd 	.word	0x0800e5bd
 800e630:	0800e5bd 	.word	0x0800e5bd
 800e634:	0800e5bd 	.word	0x0800e5bd
 800e638:	0800e5bd 	.word	0x0800e5bd
 800e63c:	0800e71b 	.word	0x0800e71b
 800e640:	0800e6ed 	.word	0x0800e6ed
 800e644:	0800e68f 	.word	0x0800e68f
 800e648:	0800e5bd 	.word	0x0800e5bd
 800e64c:	0800e5bd 	.word	0x0800e5bd
 800e650:	0800e717 	.word	0x0800e717
 800e654:	0800e5bd 	.word	0x0800e5bd
 800e658:	0800e6e1 	.word	0x0800e6e1
 800e65c:	0800e5bd 	.word	0x0800e5bd
 800e660:	0800e5bd 	.word	0x0800e5bd
 800e664:	0800e697 	.word	0x0800e697
 800e668:	3b45      	subs	r3, #69	; 0x45
 800e66a:	2b02      	cmp	r3, #2
 800e66c:	d8a6      	bhi.n	800e5bc <__ssvfiscanf_r+0xf0>
 800e66e:	2305      	movs	r3, #5
 800e670:	e01b      	b.n	800e6aa <__ssvfiscanf_r+0x1de>
 800e672:	4621      	mov	r1, r4
 800e674:	4630      	mov	r0, r6
 800e676:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e678:	4798      	blx	r3
 800e67a:	2800      	cmp	r0, #0
 800e67c:	f43f af65 	beq.w	800e54a <__ssvfiscanf_r+0x7e>
 800e680:	9844      	ldr	r0, [sp, #272]	; 0x110
 800e682:	2800      	cmp	r0, #0
 800e684:	f040 808d 	bne.w	800e7a2 <__ssvfiscanf_r+0x2d6>
 800e688:	f04f 30ff 	mov.w	r0, #4294967295
 800e68c:	e08f      	b.n	800e7ae <__ssvfiscanf_r+0x2e2>
 800e68e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800e690:	f042 0220 	orr.w	r2, r2, #32
 800e694:	9241      	str	r2, [sp, #260]	; 0x104
 800e696:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800e698:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e69c:	9241      	str	r2, [sp, #260]	; 0x104
 800e69e:	2210      	movs	r2, #16
 800e6a0:	2b6f      	cmp	r3, #111	; 0x6f
 800e6a2:	bf34      	ite	cc
 800e6a4:	2303      	movcc	r3, #3
 800e6a6:	2304      	movcs	r3, #4
 800e6a8:	9242      	str	r2, [sp, #264]	; 0x108
 800e6aa:	9347      	str	r3, [sp, #284]	; 0x11c
 800e6ac:	6863      	ldr	r3, [r4, #4]
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	dd42      	ble.n	800e738 <__ssvfiscanf_r+0x26c>
 800e6b2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e6b4:	0659      	lsls	r1, r3, #25
 800e6b6:	d404      	bmi.n	800e6c2 <__ssvfiscanf_r+0x1f6>
 800e6b8:	6823      	ldr	r3, [r4, #0]
 800e6ba:	781a      	ldrb	r2, [r3, #0]
 800e6bc:	5cba      	ldrb	r2, [r7, r2]
 800e6be:	0712      	lsls	r2, r2, #28
 800e6c0:	d441      	bmi.n	800e746 <__ssvfiscanf_r+0x27a>
 800e6c2:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800e6c4:	2b02      	cmp	r3, #2
 800e6c6:	dc50      	bgt.n	800e76a <__ssvfiscanf_r+0x29e>
 800e6c8:	466b      	mov	r3, sp
 800e6ca:	4622      	mov	r2, r4
 800e6cc:	4630      	mov	r0, r6
 800e6ce:	a941      	add	r1, sp, #260	; 0x104
 800e6d0:	f000 f876 	bl	800e7c0 <_scanf_chars>
 800e6d4:	2801      	cmp	r0, #1
 800e6d6:	d06e      	beq.n	800e7b6 <__ssvfiscanf_r+0x2ea>
 800e6d8:	2802      	cmp	r0, #2
 800e6da:	f47f af1d 	bne.w	800e518 <__ssvfiscanf_r+0x4c>
 800e6de:	e7cf      	b.n	800e680 <__ssvfiscanf_r+0x1b4>
 800e6e0:	220a      	movs	r2, #10
 800e6e2:	e7dd      	b.n	800e6a0 <__ssvfiscanf_r+0x1d4>
 800e6e4:	2300      	movs	r3, #0
 800e6e6:	9342      	str	r3, [sp, #264]	; 0x108
 800e6e8:	2303      	movs	r3, #3
 800e6ea:	e7de      	b.n	800e6aa <__ssvfiscanf_r+0x1de>
 800e6ec:	2308      	movs	r3, #8
 800e6ee:	9342      	str	r3, [sp, #264]	; 0x108
 800e6f0:	2304      	movs	r3, #4
 800e6f2:	e7da      	b.n	800e6aa <__ssvfiscanf_r+0x1de>
 800e6f4:	4629      	mov	r1, r5
 800e6f6:	4640      	mov	r0, r8
 800e6f8:	f000 f9c6 	bl	800ea88 <__sccl>
 800e6fc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e6fe:	4605      	mov	r5, r0
 800e700:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e704:	9341      	str	r3, [sp, #260]	; 0x104
 800e706:	2301      	movs	r3, #1
 800e708:	e7cf      	b.n	800e6aa <__ssvfiscanf_r+0x1de>
 800e70a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e70c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e710:	9341      	str	r3, [sp, #260]	; 0x104
 800e712:	2300      	movs	r3, #0
 800e714:	e7c9      	b.n	800e6aa <__ssvfiscanf_r+0x1de>
 800e716:	2302      	movs	r3, #2
 800e718:	e7c7      	b.n	800e6aa <__ssvfiscanf_r+0x1de>
 800e71a:	9841      	ldr	r0, [sp, #260]	; 0x104
 800e71c:	06c3      	lsls	r3, r0, #27
 800e71e:	f53f aefb 	bmi.w	800e518 <__ssvfiscanf_r+0x4c>
 800e722:	9b00      	ldr	r3, [sp, #0]
 800e724:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800e726:	1d19      	adds	r1, r3, #4
 800e728:	9100      	str	r1, [sp, #0]
 800e72a:	681b      	ldr	r3, [r3, #0]
 800e72c:	f010 0f01 	tst.w	r0, #1
 800e730:	bf14      	ite	ne
 800e732:	801a      	strhne	r2, [r3, #0]
 800e734:	601a      	streq	r2, [r3, #0]
 800e736:	e6ef      	b.n	800e518 <__ssvfiscanf_r+0x4c>
 800e738:	4621      	mov	r1, r4
 800e73a:	4630      	mov	r0, r6
 800e73c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e73e:	4798      	blx	r3
 800e740:	2800      	cmp	r0, #0
 800e742:	d0b6      	beq.n	800e6b2 <__ssvfiscanf_r+0x1e6>
 800e744:	e79c      	b.n	800e680 <__ssvfiscanf_r+0x1b4>
 800e746:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800e748:	3201      	adds	r2, #1
 800e74a:	9245      	str	r2, [sp, #276]	; 0x114
 800e74c:	6862      	ldr	r2, [r4, #4]
 800e74e:	3a01      	subs	r2, #1
 800e750:	2a00      	cmp	r2, #0
 800e752:	6062      	str	r2, [r4, #4]
 800e754:	dd02      	ble.n	800e75c <__ssvfiscanf_r+0x290>
 800e756:	3301      	adds	r3, #1
 800e758:	6023      	str	r3, [r4, #0]
 800e75a:	e7ad      	b.n	800e6b8 <__ssvfiscanf_r+0x1ec>
 800e75c:	4621      	mov	r1, r4
 800e75e:	4630      	mov	r0, r6
 800e760:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e762:	4798      	blx	r3
 800e764:	2800      	cmp	r0, #0
 800e766:	d0a7      	beq.n	800e6b8 <__ssvfiscanf_r+0x1ec>
 800e768:	e78a      	b.n	800e680 <__ssvfiscanf_r+0x1b4>
 800e76a:	2b04      	cmp	r3, #4
 800e76c:	dc0e      	bgt.n	800e78c <__ssvfiscanf_r+0x2c0>
 800e76e:	466b      	mov	r3, sp
 800e770:	4622      	mov	r2, r4
 800e772:	4630      	mov	r0, r6
 800e774:	a941      	add	r1, sp, #260	; 0x104
 800e776:	f000 f87d 	bl	800e874 <_scanf_i>
 800e77a:	e7ab      	b.n	800e6d4 <__ssvfiscanf_r+0x208>
 800e77c:	0800e417 	.word	0x0800e417
 800e780:	0800e491 	.word	0x0800e491
 800e784:	0800f7d6 	.word	0x0800f7d6
 800e788:	0800f8dc 	.word	0x0800f8dc
 800e78c:	4b0b      	ldr	r3, [pc, #44]	; (800e7bc <__ssvfiscanf_r+0x2f0>)
 800e78e:	2b00      	cmp	r3, #0
 800e790:	f43f aec2 	beq.w	800e518 <__ssvfiscanf_r+0x4c>
 800e794:	466b      	mov	r3, sp
 800e796:	4622      	mov	r2, r4
 800e798:	4630      	mov	r0, r6
 800e79a:	a941      	add	r1, sp, #260	; 0x104
 800e79c:	f3af 8000 	nop.w
 800e7a0:	e798      	b.n	800e6d4 <__ssvfiscanf_r+0x208>
 800e7a2:	89a3      	ldrh	r3, [r4, #12]
 800e7a4:	f013 0f40 	tst.w	r3, #64	; 0x40
 800e7a8:	bf18      	it	ne
 800e7aa:	f04f 30ff 	movne.w	r0, #4294967295
 800e7ae:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800e7b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e7b6:	9844      	ldr	r0, [sp, #272]	; 0x110
 800e7b8:	e7f9      	b.n	800e7ae <__ssvfiscanf_r+0x2e2>
 800e7ba:	bf00      	nop
 800e7bc:	00000000 	.word	0x00000000

0800e7c0 <_scanf_chars>:
 800e7c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e7c4:	4615      	mov	r5, r2
 800e7c6:	688a      	ldr	r2, [r1, #8]
 800e7c8:	4680      	mov	r8, r0
 800e7ca:	460c      	mov	r4, r1
 800e7cc:	b932      	cbnz	r2, 800e7dc <_scanf_chars+0x1c>
 800e7ce:	698a      	ldr	r2, [r1, #24]
 800e7d0:	2a00      	cmp	r2, #0
 800e7d2:	bf0c      	ite	eq
 800e7d4:	2201      	moveq	r2, #1
 800e7d6:	f04f 32ff 	movne.w	r2, #4294967295
 800e7da:	608a      	str	r2, [r1, #8]
 800e7dc:	2700      	movs	r7, #0
 800e7de:	6822      	ldr	r2, [r4, #0]
 800e7e0:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800e870 <_scanf_chars+0xb0>
 800e7e4:	06d1      	lsls	r1, r2, #27
 800e7e6:	bf5f      	itttt	pl
 800e7e8:	681a      	ldrpl	r2, [r3, #0]
 800e7ea:	1d11      	addpl	r1, r2, #4
 800e7ec:	6019      	strpl	r1, [r3, #0]
 800e7ee:	6816      	ldrpl	r6, [r2, #0]
 800e7f0:	69a0      	ldr	r0, [r4, #24]
 800e7f2:	b188      	cbz	r0, 800e818 <_scanf_chars+0x58>
 800e7f4:	2801      	cmp	r0, #1
 800e7f6:	d107      	bne.n	800e808 <_scanf_chars+0x48>
 800e7f8:	682b      	ldr	r3, [r5, #0]
 800e7fa:	781a      	ldrb	r2, [r3, #0]
 800e7fc:	6963      	ldr	r3, [r4, #20]
 800e7fe:	5c9b      	ldrb	r3, [r3, r2]
 800e800:	b953      	cbnz	r3, 800e818 <_scanf_chars+0x58>
 800e802:	2f00      	cmp	r7, #0
 800e804:	d031      	beq.n	800e86a <_scanf_chars+0xaa>
 800e806:	e022      	b.n	800e84e <_scanf_chars+0x8e>
 800e808:	2802      	cmp	r0, #2
 800e80a:	d120      	bne.n	800e84e <_scanf_chars+0x8e>
 800e80c:	682b      	ldr	r3, [r5, #0]
 800e80e:	781b      	ldrb	r3, [r3, #0]
 800e810:	f813 3009 	ldrb.w	r3, [r3, r9]
 800e814:	071b      	lsls	r3, r3, #28
 800e816:	d41a      	bmi.n	800e84e <_scanf_chars+0x8e>
 800e818:	6823      	ldr	r3, [r4, #0]
 800e81a:	3701      	adds	r7, #1
 800e81c:	06da      	lsls	r2, r3, #27
 800e81e:	bf5e      	ittt	pl
 800e820:	682b      	ldrpl	r3, [r5, #0]
 800e822:	781b      	ldrbpl	r3, [r3, #0]
 800e824:	f806 3b01 	strbpl.w	r3, [r6], #1
 800e828:	682a      	ldr	r2, [r5, #0]
 800e82a:	686b      	ldr	r3, [r5, #4]
 800e82c:	3201      	adds	r2, #1
 800e82e:	602a      	str	r2, [r5, #0]
 800e830:	68a2      	ldr	r2, [r4, #8]
 800e832:	3b01      	subs	r3, #1
 800e834:	3a01      	subs	r2, #1
 800e836:	606b      	str	r3, [r5, #4]
 800e838:	60a2      	str	r2, [r4, #8]
 800e83a:	b142      	cbz	r2, 800e84e <_scanf_chars+0x8e>
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	dcd7      	bgt.n	800e7f0 <_scanf_chars+0x30>
 800e840:	4629      	mov	r1, r5
 800e842:	4640      	mov	r0, r8
 800e844:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800e848:	4798      	blx	r3
 800e84a:	2800      	cmp	r0, #0
 800e84c:	d0d0      	beq.n	800e7f0 <_scanf_chars+0x30>
 800e84e:	6823      	ldr	r3, [r4, #0]
 800e850:	f013 0310 	ands.w	r3, r3, #16
 800e854:	d105      	bne.n	800e862 <_scanf_chars+0xa2>
 800e856:	68e2      	ldr	r2, [r4, #12]
 800e858:	3201      	adds	r2, #1
 800e85a:	60e2      	str	r2, [r4, #12]
 800e85c:	69a2      	ldr	r2, [r4, #24]
 800e85e:	b102      	cbz	r2, 800e862 <_scanf_chars+0xa2>
 800e860:	7033      	strb	r3, [r6, #0]
 800e862:	2000      	movs	r0, #0
 800e864:	6923      	ldr	r3, [r4, #16]
 800e866:	443b      	add	r3, r7
 800e868:	6123      	str	r3, [r4, #16]
 800e86a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e86e:	bf00      	nop
 800e870:	0800f7d6 	.word	0x0800f7d6

0800e874 <_scanf_i>:
 800e874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e878:	460c      	mov	r4, r1
 800e87a:	4698      	mov	r8, r3
 800e87c:	4b75      	ldr	r3, [pc, #468]	; (800ea54 <_scanf_i+0x1e0>)
 800e87e:	b087      	sub	sp, #28
 800e880:	4682      	mov	sl, r0
 800e882:	4616      	mov	r6, r2
 800e884:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e888:	ab03      	add	r3, sp, #12
 800e88a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800e88e:	4b72      	ldr	r3, [pc, #456]	; (800ea58 <_scanf_i+0x1e4>)
 800e890:	69a1      	ldr	r1, [r4, #24]
 800e892:	4a72      	ldr	r2, [pc, #456]	; (800ea5c <_scanf_i+0x1e8>)
 800e894:	4627      	mov	r7, r4
 800e896:	2903      	cmp	r1, #3
 800e898:	bf18      	it	ne
 800e89a:	461a      	movne	r2, r3
 800e89c:	68a3      	ldr	r3, [r4, #8]
 800e89e:	9201      	str	r2, [sp, #4]
 800e8a0:	1e5a      	subs	r2, r3, #1
 800e8a2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800e8a6:	bf81      	itttt	hi
 800e8a8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800e8ac:	eb03 0905 	addhi.w	r9, r3, r5
 800e8b0:	f240 135d 	movwhi	r3, #349	; 0x15d
 800e8b4:	60a3      	strhi	r3, [r4, #8]
 800e8b6:	f857 3b1c 	ldr.w	r3, [r7], #28
 800e8ba:	bf98      	it	ls
 800e8bc:	f04f 0900 	movls.w	r9, #0
 800e8c0:	463d      	mov	r5, r7
 800e8c2:	f04f 0b00 	mov.w	fp, #0
 800e8c6:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800e8ca:	6023      	str	r3, [r4, #0]
 800e8cc:	6831      	ldr	r1, [r6, #0]
 800e8ce:	ab03      	add	r3, sp, #12
 800e8d0:	2202      	movs	r2, #2
 800e8d2:	7809      	ldrb	r1, [r1, #0]
 800e8d4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800e8d8:	f7ff fd46 	bl	800e368 <memchr>
 800e8dc:	b328      	cbz	r0, 800e92a <_scanf_i+0xb6>
 800e8de:	f1bb 0f01 	cmp.w	fp, #1
 800e8e2:	d159      	bne.n	800e998 <_scanf_i+0x124>
 800e8e4:	6862      	ldr	r2, [r4, #4]
 800e8e6:	b92a      	cbnz	r2, 800e8f4 <_scanf_i+0x80>
 800e8e8:	2308      	movs	r3, #8
 800e8ea:	6822      	ldr	r2, [r4, #0]
 800e8ec:	6063      	str	r3, [r4, #4]
 800e8ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e8f2:	6022      	str	r2, [r4, #0]
 800e8f4:	6822      	ldr	r2, [r4, #0]
 800e8f6:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800e8fa:	6022      	str	r2, [r4, #0]
 800e8fc:	68a2      	ldr	r2, [r4, #8]
 800e8fe:	1e51      	subs	r1, r2, #1
 800e900:	60a1      	str	r1, [r4, #8]
 800e902:	b192      	cbz	r2, 800e92a <_scanf_i+0xb6>
 800e904:	6832      	ldr	r2, [r6, #0]
 800e906:	1c51      	adds	r1, r2, #1
 800e908:	6031      	str	r1, [r6, #0]
 800e90a:	7812      	ldrb	r2, [r2, #0]
 800e90c:	f805 2b01 	strb.w	r2, [r5], #1
 800e910:	6872      	ldr	r2, [r6, #4]
 800e912:	3a01      	subs	r2, #1
 800e914:	2a00      	cmp	r2, #0
 800e916:	6072      	str	r2, [r6, #4]
 800e918:	dc07      	bgt.n	800e92a <_scanf_i+0xb6>
 800e91a:	4631      	mov	r1, r6
 800e91c:	4650      	mov	r0, sl
 800e91e:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800e922:	4790      	blx	r2
 800e924:	2800      	cmp	r0, #0
 800e926:	f040 8085 	bne.w	800ea34 <_scanf_i+0x1c0>
 800e92a:	f10b 0b01 	add.w	fp, fp, #1
 800e92e:	f1bb 0f03 	cmp.w	fp, #3
 800e932:	d1cb      	bne.n	800e8cc <_scanf_i+0x58>
 800e934:	6863      	ldr	r3, [r4, #4]
 800e936:	b90b      	cbnz	r3, 800e93c <_scanf_i+0xc8>
 800e938:	230a      	movs	r3, #10
 800e93a:	6063      	str	r3, [r4, #4]
 800e93c:	6863      	ldr	r3, [r4, #4]
 800e93e:	4948      	ldr	r1, [pc, #288]	; (800ea60 <_scanf_i+0x1ec>)
 800e940:	6960      	ldr	r0, [r4, #20]
 800e942:	1ac9      	subs	r1, r1, r3
 800e944:	f000 f8a0 	bl	800ea88 <__sccl>
 800e948:	f04f 0b00 	mov.w	fp, #0
 800e94c:	68a3      	ldr	r3, [r4, #8]
 800e94e:	6822      	ldr	r2, [r4, #0]
 800e950:	2b00      	cmp	r3, #0
 800e952:	d03d      	beq.n	800e9d0 <_scanf_i+0x15c>
 800e954:	6831      	ldr	r1, [r6, #0]
 800e956:	6960      	ldr	r0, [r4, #20]
 800e958:	f891 c000 	ldrb.w	ip, [r1]
 800e95c:	f810 000c 	ldrb.w	r0, [r0, ip]
 800e960:	2800      	cmp	r0, #0
 800e962:	d035      	beq.n	800e9d0 <_scanf_i+0x15c>
 800e964:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800e968:	d124      	bne.n	800e9b4 <_scanf_i+0x140>
 800e96a:	0510      	lsls	r0, r2, #20
 800e96c:	d522      	bpl.n	800e9b4 <_scanf_i+0x140>
 800e96e:	f10b 0b01 	add.w	fp, fp, #1
 800e972:	f1b9 0f00 	cmp.w	r9, #0
 800e976:	d003      	beq.n	800e980 <_scanf_i+0x10c>
 800e978:	3301      	adds	r3, #1
 800e97a:	f109 39ff 	add.w	r9, r9, #4294967295
 800e97e:	60a3      	str	r3, [r4, #8]
 800e980:	6873      	ldr	r3, [r6, #4]
 800e982:	3b01      	subs	r3, #1
 800e984:	2b00      	cmp	r3, #0
 800e986:	6073      	str	r3, [r6, #4]
 800e988:	dd1b      	ble.n	800e9c2 <_scanf_i+0x14e>
 800e98a:	6833      	ldr	r3, [r6, #0]
 800e98c:	3301      	adds	r3, #1
 800e98e:	6033      	str	r3, [r6, #0]
 800e990:	68a3      	ldr	r3, [r4, #8]
 800e992:	3b01      	subs	r3, #1
 800e994:	60a3      	str	r3, [r4, #8]
 800e996:	e7d9      	b.n	800e94c <_scanf_i+0xd8>
 800e998:	f1bb 0f02 	cmp.w	fp, #2
 800e99c:	d1ae      	bne.n	800e8fc <_scanf_i+0x88>
 800e99e:	6822      	ldr	r2, [r4, #0]
 800e9a0:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800e9a4:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800e9a8:	d1bf      	bne.n	800e92a <_scanf_i+0xb6>
 800e9aa:	2310      	movs	r3, #16
 800e9ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e9b0:	6063      	str	r3, [r4, #4]
 800e9b2:	e7a2      	b.n	800e8fa <_scanf_i+0x86>
 800e9b4:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800e9b8:	6022      	str	r2, [r4, #0]
 800e9ba:	780b      	ldrb	r3, [r1, #0]
 800e9bc:	f805 3b01 	strb.w	r3, [r5], #1
 800e9c0:	e7de      	b.n	800e980 <_scanf_i+0x10c>
 800e9c2:	4631      	mov	r1, r6
 800e9c4:	4650      	mov	r0, sl
 800e9c6:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800e9ca:	4798      	blx	r3
 800e9cc:	2800      	cmp	r0, #0
 800e9ce:	d0df      	beq.n	800e990 <_scanf_i+0x11c>
 800e9d0:	6823      	ldr	r3, [r4, #0]
 800e9d2:	05db      	lsls	r3, r3, #23
 800e9d4:	d50d      	bpl.n	800e9f2 <_scanf_i+0x17e>
 800e9d6:	42bd      	cmp	r5, r7
 800e9d8:	d909      	bls.n	800e9ee <_scanf_i+0x17a>
 800e9da:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800e9de:	4632      	mov	r2, r6
 800e9e0:	4650      	mov	r0, sl
 800e9e2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e9e6:	f105 39ff 	add.w	r9, r5, #4294967295
 800e9ea:	4798      	blx	r3
 800e9ec:	464d      	mov	r5, r9
 800e9ee:	42bd      	cmp	r5, r7
 800e9f0:	d02d      	beq.n	800ea4e <_scanf_i+0x1da>
 800e9f2:	6822      	ldr	r2, [r4, #0]
 800e9f4:	f012 0210 	ands.w	r2, r2, #16
 800e9f8:	d113      	bne.n	800ea22 <_scanf_i+0x1ae>
 800e9fa:	702a      	strb	r2, [r5, #0]
 800e9fc:	4639      	mov	r1, r7
 800e9fe:	6863      	ldr	r3, [r4, #4]
 800ea00:	4650      	mov	r0, sl
 800ea02:	9e01      	ldr	r6, [sp, #4]
 800ea04:	47b0      	blx	r6
 800ea06:	6821      	ldr	r1, [r4, #0]
 800ea08:	f8d8 3000 	ldr.w	r3, [r8]
 800ea0c:	f011 0f20 	tst.w	r1, #32
 800ea10:	d013      	beq.n	800ea3a <_scanf_i+0x1c6>
 800ea12:	1d1a      	adds	r2, r3, #4
 800ea14:	f8c8 2000 	str.w	r2, [r8]
 800ea18:	681b      	ldr	r3, [r3, #0]
 800ea1a:	6018      	str	r0, [r3, #0]
 800ea1c:	68e3      	ldr	r3, [r4, #12]
 800ea1e:	3301      	adds	r3, #1
 800ea20:	60e3      	str	r3, [r4, #12]
 800ea22:	2000      	movs	r0, #0
 800ea24:	1bed      	subs	r5, r5, r7
 800ea26:	44ab      	add	fp, r5
 800ea28:	6925      	ldr	r5, [r4, #16]
 800ea2a:	445d      	add	r5, fp
 800ea2c:	6125      	str	r5, [r4, #16]
 800ea2e:	b007      	add	sp, #28
 800ea30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea34:	f04f 0b00 	mov.w	fp, #0
 800ea38:	e7ca      	b.n	800e9d0 <_scanf_i+0x15c>
 800ea3a:	1d1a      	adds	r2, r3, #4
 800ea3c:	f8c8 2000 	str.w	r2, [r8]
 800ea40:	681b      	ldr	r3, [r3, #0]
 800ea42:	f011 0f01 	tst.w	r1, #1
 800ea46:	bf14      	ite	ne
 800ea48:	8018      	strhne	r0, [r3, #0]
 800ea4a:	6018      	streq	r0, [r3, #0]
 800ea4c:	e7e6      	b.n	800ea1c <_scanf_i+0x1a8>
 800ea4e:	2001      	movs	r0, #1
 800ea50:	e7ed      	b.n	800ea2e <_scanf_i+0x1ba>
 800ea52:	bf00      	nop
 800ea54:	0800f590 	.word	0x0800f590
 800ea58:	0800dd0d 	.word	0x0800dd0d
 800ea5c:	0800cb61 	.word	0x0800cb61
 800ea60:	0800f985 	.word	0x0800f985

0800ea64 <_read_r>:
 800ea64:	b538      	push	{r3, r4, r5, lr}
 800ea66:	4604      	mov	r4, r0
 800ea68:	4608      	mov	r0, r1
 800ea6a:	4611      	mov	r1, r2
 800ea6c:	2200      	movs	r2, #0
 800ea6e:	4d05      	ldr	r5, [pc, #20]	; (800ea84 <_read_r+0x20>)
 800ea70:	602a      	str	r2, [r5, #0]
 800ea72:	461a      	mov	r2, r3
 800ea74:	f7f7 fda1 	bl	80065ba <_read>
 800ea78:	1c43      	adds	r3, r0, #1
 800ea7a:	d102      	bne.n	800ea82 <_read_r+0x1e>
 800ea7c:	682b      	ldr	r3, [r5, #0]
 800ea7e:	b103      	cbz	r3, 800ea82 <_read_r+0x1e>
 800ea80:	6023      	str	r3, [r4, #0]
 800ea82:	bd38      	pop	{r3, r4, r5, pc}
 800ea84:	20002c30 	.word	0x20002c30

0800ea88 <__sccl>:
 800ea88:	b570      	push	{r4, r5, r6, lr}
 800ea8a:	780b      	ldrb	r3, [r1, #0]
 800ea8c:	4604      	mov	r4, r0
 800ea8e:	2b5e      	cmp	r3, #94	; 0x5e
 800ea90:	bf13      	iteet	ne
 800ea92:	2200      	movne	r2, #0
 800ea94:	2201      	moveq	r2, #1
 800ea96:	784b      	ldrbeq	r3, [r1, #1]
 800ea98:	1c48      	addne	r0, r1, #1
 800ea9a:	bf08      	it	eq
 800ea9c:	1c88      	addeq	r0, r1, #2
 800ea9e:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800eaa2:	1e61      	subs	r1, r4, #1
 800eaa4:	f801 2f01 	strb.w	r2, [r1, #1]!
 800eaa8:	42a9      	cmp	r1, r5
 800eaaa:	d1fb      	bne.n	800eaa4 <__sccl+0x1c>
 800eaac:	b90b      	cbnz	r3, 800eab2 <__sccl+0x2a>
 800eaae:	3801      	subs	r0, #1
 800eab0:	bd70      	pop	{r4, r5, r6, pc}
 800eab2:	f082 0201 	eor.w	r2, r2, #1
 800eab6:	4605      	mov	r5, r0
 800eab8:	54e2      	strb	r2, [r4, r3]
 800eaba:	4628      	mov	r0, r5
 800eabc:	f810 1b01 	ldrb.w	r1, [r0], #1
 800eac0:	292d      	cmp	r1, #45	; 0x2d
 800eac2:	d006      	beq.n	800ead2 <__sccl+0x4a>
 800eac4:	295d      	cmp	r1, #93	; 0x5d
 800eac6:	d0f3      	beq.n	800eab0 <__sccl+0x28>
 800eac8:	b909      	cbnz	r1, 800eace <__sccl+0x46>
 800eaca:	4628      	mov	r0, r5
 800eacc:	e7f0      	b.n	800eab0 <__sccl+0x28>
 800eace:	460b      	mov	r3, r1
 800ead0:	e7f1      	b.n	800eab6 <__sccl+0x2e>
 800ead2:	786e      	ldrb	r6, [r5, #1]
 800ead4:	2e5d      	cmp	r6, #93	; 0x5d
 800ead6:	d0fa      	beq.n	800eace <__sccl+0x46>
 800ead8:	42b3      	cmp	r3, r6
 800eada:	dcf8      	bgt.n	800eace <__sccl+0x46>
 800eadc:	4619      	mov	r1, r3
 800eade:	3502      	adds	r5, #2
 800eae0:	3101      	adds	r1, #1
 800eae2:	428e      	cmp	r6, r1
 800eae4:	5462      	strb	r2, [r4, r1]
 800eae6:	dcfb      	bgt.n	800eae0 <__sccl+0x58>
 800eae8:	1af1      	subs	r1, r6, r3
 800eaea:	3901      	subs	r1, #1
 800eaec:	42b3      	cmp	r3, r6
 800eaee:	bfa8      	it	ge
 800eaf0:	2100      	movge	r1, #0
 800eaf2:	1c58      	adds	r0, r3, #1
 800eaf4:	1843      	adds	r3, r0, r1
 800eaf6:	e7e0      	b.n	800eaba <__sccl+0x32>

0800eaf8 <_raise_r>:
 800eaf8:	291f      	cmp	r1, #31
 800eafa:	b538      	push	{r3, r4, r5, lr}
 800eafc:	4604      	mov	r4, r0
 800eafe:	460d      	mov	r5, r1
 800eb00:	d904      	bls.n	800eb0c <_raise_r+0x14>
 800eb02:	2316      	movs	r3, #22
 800eb04:	6003      	str	r3, [r0, #0]
 800eb06:	f04f 30ff 	mov.w	r0, #4294967295
 800eb0a:	bd38      	pop	{r3, r4, r5, pc}
 800eb0c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800eb0e:	b112      	cbz	r2, 800eb16 <_raise_r+0x1e>
 800eb10:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800eb14:	b94b      	cbnz	r3, 800eb2a <_raise_r+0x32>
 800eb16:	4620      	mov	r0, r4
 800eb18:	f000 f830 	bl	800eb7c <_getpid_r>
 800eb1c:	462a      	mov	r2, r5
 800eb1e:	4601      	mov	r1, r0
 800eb20:	4620      	mov	r0, r4
 800eb22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eb26:	f000 b817 	b.w	800eb58 <_kill_r>
 800eb2a:	2b01      	cmp	r3, #1
 800eb2c:	d00a      	beq.n	800eb44 <_raise_r+0x4c>
 800eb2e:	1c59      	adds	r1, r3, #1
 800eb30:	d103      	bne.n	800eb3a <_raise_r+0x42>
 800eb32:	2316      	movs	r3, #22
 800eb34:	6003      	str	r3, [r0, #0]
 800eb36:	2001      	movs	r0, #1
 800eb38:	e7e7      	b.n	800eb0a <_raise_r+0x12>
 800eb3a:	2400      	movs	r4, #0
 800eb3c:	4628      	mov	r0, r5
 800eb3e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800eb42:	4798      	blx	r3
 800eb44:	2000      	movs	r0, #0
 800eb46:	e7e0      	b.n	800eb0a <_raise_r+0x12>

0800eb48 <raise>:
 800eb48:	4b02      	ldr	r3, [pc, #8]	; (800eb54 <raise+0xc>)
 800eb4a:	4601      	mov	r1, r0
 800eb4c:	6818      	ldr	r0, [r3, #0]
 800eb4e:	f7ff bfd3 	b.w	800eaf8 <_raise_r>
 800eb52:	bf00      	nop
 800eb54:	200004e0 	.word	0x200004e0

0800eb58 <_kill_r>:
 800eb58:	b538      	push	{r3, r4, r5, lr}
 800eb5a:	2300      	movs	r3, #0
 800eb5c:	4d06      	ldr	r5, [pc, #24]	; (800eb78 <_kill_r+0x20>)
 800eb5e:	4604      	mov	r4, r0
 800eb60:	4608      	mov	r0, r1
 800eb62:	4611      	mov	r1, r2
 800eb64:	602b      	str	r3, [r5, #0]
 800eb66:	f7f7 fd0e 	bl	8006586 <_kill>
 800eb6a:	1c43      	adds	r3, r0, #1
 800eb6c:	d102      	bne.n	800eb74 <_kill_r+0x1c>
 800eb6e:	682b      	ldr	r3, [r5, #0]
 800eb70:	b103      	cbz	r3, 800eb74 <_kill_r+0x1c>
 800eb72:	6023      	str	r3, [r4, #0]
 800eb74:	bd38      	pop	{r3, r4, r5, pc}
 800eb76:	bf00      	nop
 800eb78:	20002c30 	.word	0x20002c30

0800eb7c <_getpid_r>:
 800eb7c:	f7f7 bcfc 	b.w	8006578 <_getpid>

0800eb80 <__submore>:
 800eb80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb84:	460c      	mov	r4, r1
 800eb86:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800eb88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800eb8c:	4299      	cmp	r1, r3
 800eb8e:	d11b      	bne.n	800ebc8 <__submore+0x48>
 800eb90:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800eb94:	f7fd fe60 	bl	800c858 <_malloc_r>
 800eb98:	b918      	cbnz	r0, 800eba2 <__submore+0x22>
 800eb9a:	f04f 30ff 	mov.w	r0, #4294967295
 800eb9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eba2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800eba6:	63a3      	str	r3, [r4, #56]	; 0x38
 800eba8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800ebac:	6360      	str	r0, [r4, #52]	; 0x34
 800ebae:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800ebb2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800ebb6:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800ebba:	7043      	strb	r3, [r0, #1]
 800ebbc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800ebc0:	7003      	strb	r3, [r0, #0]
 800ebc2:	6020      	str	r0, [r4, #0]
 800ebc4:	2000      	movs	r0, #0
 800ebc6:	e7ea      	b.n	800eb9e <__submore+0x1e>
 800ebc8:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800ebca:	0077      	lsls	r7, r6, #1
 800ebcc:	463a      	mov	r2, r7
 800ebce:	f7ff fbf3 	bl	800e3b8 <_realloc_r>
 800ebd2:	4605      	mov	r5, r0
 800ebd4:	2800      	cmp	r0, #0
 800ebd6:	d0e0      	beq.n	800eb9a <__submore+0x1a>
 800ebd8:	eb00 0806 	add.w	r8, r0, r6
 800ebdc:	4601      	mov	r1, r0
 800ebde:	4632      	mov	r2, r6
 800ebe0:	4640      	mov	r0, r8
 800ebe2:	f7fd fb49 	bl	800c278 <memcpy>
 800ebe6:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800ebea:	f8c4 8000 	str.w	r8, [r4]
 800ebee:	e7e9      	b.n	800ebc4 <__submore+0x44>

0800ebf0 <_fstat_r>:
 800ebf0:	b538      	push	{r3, r4, r5, lr}
 800ebf2:	2300      	movs	r3, #0
 800ebf4:	4d06      	ldr	r5, [pc, #24]	; (800ec10 <_fstat_r+0x20>)
 800ebf6:	4604      	mov	r4, r0
 800ebf8:	4608      	mov	r0, r1
 800ebfa:	4611      	mov	r1, r2
 800ebfc:	602b      	str	r3, [r5, #0]
 800ebfe:	f7f7 fd20 	bl	8006642 <_fstat>
 800ec02:	1c43      	adds	r3, r0, #1
 800ec04:	d102      	bne.n	800ec0c <_fstat_r+0x1c>
 800ec06:	682b      	ldr	r3, [r5, #0]
 800ec08:	b103      	cbz	r3, 800ec0c <_fstat_r+0x1c>
 800ec0a:	6023      	str	r3, [r4, #0]
 800ec0c:	bd38      	pop	{r3, r4, r5, pc}
 800ec0e:	bf00      	nop
 800ec10:	20002c30 	.word	0x20002c30

0800ec14 <_isatty_r>:
 800ec14:	b538      	push	{r3, r4, r5, lr}
 800ec16:	2300      	movs	r3, #0
 800ec18:	4d05      	ldr	r5, [pc, #20]	; (800ec30 <_isatty_r+0x1c>)
 800ec1a:	4604      	mov	r4, r0
 800ec1c:	4608      	mov	r0, r1
 800ec1e:	602b      	str	r3, [r5, #0]
 800ec20:	f7f7 fd1e 	bl	8006660 <_isatty>
 800ec24:	1c43      	adds	r3, r0, #1
 800ec26:	d102      	bne.n	800ec2e <_isatty_r+0x1a>
 800ec28:	682b      	ldr	r3, [r5, #0]
 800ec2a:	b103      	cbz	r3, 800ec2e <_isatty_r+0x1a>
 800ec2c:	6023      	str	r3, [r4, #0]
 800ec2e:	bd38      	pop	{r3, r4, r5, pc}
 800ec30:	20002c30 	.word	0x20002c30

0800ec34 <_malloc_usable_size_r>:
 800ec34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ec38:	1f18      	subs	r0, r3, #4
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	bfbc      	itt	lt
 800ec3e:	580b      	ldrlt	r3, [r1, r0]
 800ec40:	18c0      	addlt	r0, r0, r3
 800ec42:	4770      	bx	lr

0800ec44 <_init>:
 800ec44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec46:	bf00      	nop
 800ec48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ec4a:	bc08      	pop	{r3}
 800ec4c:	469e      	mov	lr, r3
 800ec4e:	4770      	bx	lr

0800ec50 <_fini>:
 800ec50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec52:	bf00      	nop
 800ec54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ec56:	bc08      	pop	{r3}
 800ec58:	469e      	mov	lr, r3
 800ec5a:	4770      	bx	lr

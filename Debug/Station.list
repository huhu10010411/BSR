
Station.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ea10  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000cbc  0800eb1c  0800eb1c  0001eb1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f7d8  0800f7d8  000205a8  2**0
                  CONTENTS
  4 .ARM          00000008  0800f7d8  0800f7d8  0001f7d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f7e0  0800f7e0  000205a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f7e0  0800f7e0  0001f7e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f7e4  0800f7e4  0001f7e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000005a8  20000000  0800f7e8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002694  200005a8  0800fd90  000205a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002c3c  0800fd90  00022c3c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000205a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020102  00000000  00000000  000205d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005e78  00000000  00000000  000406d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ba0  00000000  00000000  00046550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000018d0  00000000  00000000  000480f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000203d5  00000000  00000000  000499c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002ede9  00000000  00000000  00069d95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009719e  00000000  00000000  00098b7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012fd1c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007f70  00000000  00000000  0012fd6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200005a8 	.word	0x200005a8
 8000128:	00000000 	.word	0x00000000
 800012c:	0800eb04 	.word	0x0800eb04

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200005ac 	.word	0x200005ac
 8000148:	0800eb04 	.word	0x0800eb04

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <strcmp>:
 800015c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000160:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000164:	2a01      	cmp	r2, #1
 8000166:	bf28      	it	cs
 8000168:	429a      	cmpcs	r2, r3
 800016a:	d0f7      	beq.n	800015c <strcmp>
 800016c:	1ad0      	subs	r0, r2, r3
 800016e:	4770      	bx	lr

08000170 <__aeabi_f2uiz>:
 8000170:	0042      	lsls	r2, r0, #1
 8000172:	d20e      	bcs.n	8000192 <__aeabi_f2uiz+0x22>
 8000174:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000178:	d30b      	bcc.n	8000192 <__aeabi_f2uiz+0x22>
 800017a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800017e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000182:	d409      	bmi.n	8000198 <__aeabi_f2uiz+0x28>
 8000184:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000188:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800018c:	fa23 f002 	lsr.w	r0, r3, r2
 8000190:	4770      	bx	lr
 8000192:	f04f 0000 	mov.w	r0, #0
 8000196:	4770      	bx	lr
 8000198:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800019c:	d101      	bne.n	80001a2 <__aeabi_f2uiz+0x32>
 800019e:	0242      	lsls	r2, r0, #9
 80001a0:	d102      	bne.n	80001a8 <__aeabi_f2uiz+0x38>
 80001a2:	f04f 30ff 	mov.w	r0, #4294967295
 80001a6:	4770      	bx	lr
 80001a8:	f04f 0000 	mov.w	r0, #0
 80001ac:	4770      	bx	lr
 80001ae:	bf00      	nop

080001b0 <__aeabi_ldivmod>:
 80001b0:	b97b      	cbnz	r3, 80001d2 <__aeabi_ldivmod+0x22>
 80001b2:	b972      	cbnz	r2, 80001d2 <__aeabi_ldivmod+0x22>
 80001b4:	2900      	cmp	r1, #0
 80001b6:	bfbe      	ittt	lt
 80001b8:	2000      	movlt	r0, #0
 80001ba:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80001be:	e006      	blt.n	80001ce <__aeabi_ldivmod+0x1e>
 80001c0:	bf08      	it	eq
 80001c2:	2800      	cmpeq	r0, #0
 80001c4:	bf1c      	itt	ne
 80001c6:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80001ca:	f04f 30ff 	movne.w	r0, #4294967295
 80001ce:	f000 b9a9 	b.w	8000524 <__aeabi_idiv0>
 80001d2:	f1ad 0c08 	sub.w	ip, sp, #8
 80001d6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001da:	2900      	cmp	r1, #0
 80001dc:	db09      	blt.n	80001f2 <__aeabi_ldivmod+0x42>
 80001de:	2b00      	cmp	r3, #0
 80001e0:	db1a      	blt.n	8000218 <__aeabi_ldivmod+0x68>
 80001e2:	f000 f835 	bl	8000250 <__udivmoddi4>
 80001e6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001ee:	b004      	add	sp, #16
 80001f0:	4770      	bx	lr
 80001f2:	4240      	negs	r0, r0
 80001f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f8:	2b00      	cmp	r3, #0
 80001fa:	db1b      	blt.n	8000234 <__aeabi_ldivmod+0x84>
 80001fc:	f000 f828 	bl	8000250 <__udivmoddi4>
 8000200:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000204:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000208:	b004      	add	sp, #16
 800020a:	4240      	negs	r0, r0
 800020c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000210:	4252      	negs	r2, r2
 8000212:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000216:	4770      	bx	lr
 8000218:	4252      	negs	r2, r2
 800021a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800021e:	f000 f817 	bl	8000250 <__udivmoddi4>
 8000222:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000226:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800022a:	b004      	add	sp, #16
 800022c:	4240      	negs	r0, r0
 800022e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000232:	4770      	bx	lr
 8000234:	4252      	negs	r2, r2
 8000236:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800023a:	f000 f809 	bl	8000250 <__udivmoddi4>
 800023e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000242:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000246:	b004      	add	sp, #16
 8000248:	4252      	negs	r2, r2
 800024a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9e08      	ldr	r6, [sp, #32]
 8000256:	460d      	mov	r5, r1
 8000258:	4604      	mov	r4, r0
 800025a:	4688      	mov	r8, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14d      	bne.n	80002fc <__udivmoddi4+0xac>
 8000260:	428a      	cmp	r2, r1
 8000262:	4694      	mov	ip, r2
 8000264:	d968      	bls.n	8000338 <__udivmoddi4+0xe8>
 8000266:	fab2 f282 	clz	r2, r2
 800026a:	b152      	cbz	r2, 8000282 <__udivmoddi4+0x32>
 800026c:	fa01 f302 	lsl.w	r3, r1, r2
 8000270:	f1c2 0120 	rsb	r1, r2, #32
 8000274:	fa20 f101 	lsr.w	r1, r0, r1
 8000278:	fa0c fc02 	lsl.w	ip, ip, r2
 800027c:	ea41 0803 	orr.w	r8, r1, r3
 8000280:	4094      	lsls	r4, r2
 8000282:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000286:	fbb8 f7f1 	udiv	r7, r8, r1
 800028a:	fa1f fe8c 	uxth.w	lr, ip
 800028e:	fb01 8817 	mls	r8, r1, r7, r8
 8000292:	fb07 f00e 	mul.w	r0, r7, lr
 8000296:	0c23      	lsrs	r3, r4, #16
 8000298:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800029c:	4298      	cmp	r0, r3
 800029e:	d90a      	bls.n	80002b6 <__udivmoddi4+0x66>
 80002a0:	eb1c 0303 	adds.w	r3, ip, r3
 80002a4:	f107 35ff 	add.w	r5, r7, #4294967295
 80002a8:	f080 811e 	bcs.w	80004e8 <__udivmoddi4+0x298>
 80002ac:	4298      	cmp	r0, r3
 80002ae:	f240 811b 	bls.w	80004e8 <__udivmoddi4+0x298>
 80002b2:	3f02      	subs	r7, #2
 80002b4:	4463      	add	r3, ip
 80002b6:	1a1b      	subs	r3, r3, r0
 80002b8:	fbb3 f0f1 	udiv	r0, r3, r1
 80002bc:	fb01 3310 	mls	r3, r1, r0, r3
 80002c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002c4:	b2a4      	uxth	r4, r4
 80002c6:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ca:	45a6      	cmp	lr, r4
 80002cc:	d90a      	bls.n	80002e4 <__udivmoddi4+0x94>
 80002ce:	eb1c 0404 	adds.w	r4, ip, r4
 80002d2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002d6:	f080 8109 	bcs.w	80004ec <__udivmoddi4+0x29c>
 80002da:	45a6      	cmp	lr, r4
 80002dc:	f240 8106 	bls.w	80004ec <__udivmoddi4+0x29c>
 80002e0:	4464      	add	r4, ip
 80002e2:	3802      	subs	r0, #2
 80002e4:	2100      	movs	r1, #0
 80002e6:	eba4 040e 	sub.w	r4, r4, lr
 80002ea:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002ee:	b11e      	cbz	r6, 80002f8 <__udivmoddi4+0xa8>
 80002f0:	2300      	movs	r3, #0
 80002f2:	40d4      	lsrs	r4, r2
 80002f4:	e9c6 4300 	strd	r4, r3, [r6]
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d908      	bls.n	8000312 <__udivmoddi4+0xc2>
 8000300:	2e00      	cmp	r6, #0
 8000302:	f000 80ee 	beq.w	80004e2 <__udivmoddi4+0x292>
 8000306:	2100      	movs	r1, #0
 8000308:	e9c6 0500 	strd	r0, r5, [r6]
 800030c:	4608      	mov	r0, r1
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	fab3 f183 	clz	r1, r3
 8000316:	2900      	cmp	r1, #0
 8000318:	d14a      	bne.n	80003b0 <__udivmoddi4+0x160>
 800031a:	42ab      	cmp	r3, r5
 800031c:	d302      	bcc.n	8000324 <__udivmoddi4+0xd4>
 800031e:	4282      	cmp	r2, r0
 8000320:	f200 80fc 	bhi.w	800051c <__udivmoddi4+0x2cc>
 8000324:	1a84      	subs	r4, r0, r2
 8000326:	eb65 0303 	sbc.w	r3, r5, r3
 800032a:	2001      	movs	r0, #1
 800032c:	4698      	mov	r8, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d0e2      	beq.n	80002f8 <__udivmoddi4+0xa8>
 8000332:	e9c6 4800 	strd	r4, r8, [r6]
 8000336:	e7df      	b.n	80002f8 <__udivmoddi4+0xa8>
 8000338:	b902      	cbnz	r2, 800033c <__udivmoddi4+0xec>
 800033a:	deff      	udf	#255	; 0xff
 800033c:	fab2 f282 	clz	r2, r2
 8000340:	2a00      	cmp	r2, #0
 8000342:	f040 8091 	bne.w	8000468 <__udivmoddi4+0x218>
 8000346:	eba1 000c 	sub.w	r0, r1, ip
 800034a:	2101      	movs	r1, #1
 800034c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000350:	fa1f fe8c 	uxth.w	lr, ip
 8000354:	fbb0 f3f7 	udiv	r3, r0, r7
 8000358:	fb07 0013 	mls	r0, r7, r3, r0
 800035c:	0c25      	lsrs	r5, r4, #16
 800035e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000362:	fb0e f003 	mul.w	r0, lr, r3
 8000366:	42a8      	cmp	r0, r5
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x12c>
 800036a:	eb1c 0505 	adds.w	r5, ip, r5
 800036e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x12a>
 8000374:	42a8      	cmp	r0, r5
 8000376:	f200 80ce 	bhi.w	8000516 <__udivmoddi4+0x2c6>
 800037a:	4643      	mov	r3, r8
 800037c:	1a2d      	subs	r5, r5, r0
 800037e:	fbb5 f0f7 	udiv	r0, r5, r7
 8000382:	fb07 5510 	mls	r5, r7, r0, r5
 8000386:	fb0e fe00 	mul.w	lr, lr, r0
 800038a:	b2a4      	uxth	r4, r4
 800038c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000390:	45a6      	cmp	lr, r4
 8000392:	d908      	bls.n	80003a6 <__udivmoddi4+0x156>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f100 35ff 	add.w	r5, r0, #4294967295
 800039c:	d202      	bcs.n	80003a4 <__udivmoddi4+0x154>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f200 80b6 	bhi.w	8000510 <__udivmoddi4+0x2c0>
 80003a4:	4628      	mov	r0, r5
 80003a6:	eba4 040e 	sub.w	r4, r4, lr
 80003aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ae:	e79e      	b.n	80002ee <__udivmoddi4+0x9e>
 80003b0:	f1c1 0720 	rsb	r7, r1, #32
 80003b4:	408b      	lsls	r3, r1
 80003b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80003be:	fa25 fa07 	lsr.w	sl, r5, r7
 80003c2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c6:	fbba f8f9 	udiv	r8, sl, r9
 80003ca:	fa20 f307 	lsr.w	r3, r0, r7
 80003ce:	fb09 aa18 	mls	sl, r9, r8, sl
 80003d2:	408d      	lsls	r5, r1
 80003d4:	fa1f fe8c 	uxth.w	lr, ip
 80003d8:	431d      	orrs	r5, r3
 80003da:	fa00 f301 	lsl.w	r3, r0, r1
 80003de:	fb08 f00e 	mul.w	r0, r8, lr
 80003e2:	0c2c      	lsrs	r4, r5, #16
 80003e4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80003e8:	42a0      	cmp	r0, r4
 80003ea:	fa02 f201 	lsl.w	r2, r2, r1
 80003ee:	d90b      	bls.n	8000408 <__udivmoddi4+0x1b8>
 80003f0:	eb1c 0404 	adds.w	r4, ip, r4
 80003f4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f8:	f080 8088 	bcs.w	800050c <__udivmoddi4+0x2bc>
 80003fc:	42a0      	cmp	r0, r4
 80003fe:	f240 8085 	bls.w	800050c <__udivmoddi4+0x2bc>
 8000402:	f1a8 0802 	sub.w	r8, r8, #2
 8000406:	4464      	add	r4, ip
 8000408:	1a24      	subs	r4, r4, r0
 800040a:	fbb4 f0f9 	udiv	r0, r4, r9
 800040e:	fb09 4410 	mls	r4, r9, r0, r4
 8000412:	fb00 fe0e 	mul.w	lr, r0, lr
 8000416:	b2ad      	uxth	r5, r5
 8000418:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800041c:	45a6      	cmp	lr, r4
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x1e2>
 8000420:	eb1c 0404 	adds.w	r4, ip, r4
 8000424:	f100 35ff 	add.w	r5, r0, #4294967295
 8000428:	d26c      	bcs.n	8000504 <__udivmoddi4+0x2b4>
 800042a:	45a6      	cmp	lr, r4
 800042c:	d96a      	bls.n	8000504 <__udivmoddi4+0x2b4>
 800042e:	3802      	subs	r0, #2
 8000430:	4464      	add	r4, ip
 8000432:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000436:	fba0 9502 	umull	r9, r5, r0, r2
 800043a:	eba4 040e 	sub.w	r4, r4, lr
 800043e:	42ac      	cmp	r4, r5
 8000440:	46c8      	mov	r8, r9
 8000442:	46ae      	mov	lr, r5
 8000444:	d356      	bcc.n	80004f4 <__udivmoddi4+0x2a4>
 8000446:	d053      	beq.n	80004f0 <__udivmoddi4+0x2a0>
 8000448:	2e00      	cmp	r6, #0
 800044a:	d069      	beq.n	8000520 <__udivmoddi4+0x2d0>
 800044c:	ebb3 0208 	subs.w	r2, r3, r8
 8000450:	eb64 040e 	sbc.w	r4, r4, lr
 8000454:	fa22 f301 	lsr.w	r3, r2, r1
 8000458:	fa04 f707 	lsl.w	r7, r4, r7
 800045c:	431f      	orrs	r7, r3
 800045e:	40cc      	lsrs	r4, r1
 8000460:	e9c6 7400 	strd	r7, r4, [r6]
 8000464:	2100      	movs	r1, #0
 8000466:	e747      	b.n	80002f8 <__udivmoddi4+0xa8>
 8000468:	fa0c fc02 	lsl.w	ip, ip, r2
 800046c:	f1c2 0120 	rsb	r1, r2, #32
 8000470:	fa25 f301 	lsr.w	r3, r5, r1
 8000474:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000478:	fa20 f101 	lsr.w	r1, r0, r1
 800047c:	4095      	lsls	r5, r2
 800047e:	430d      	orrs	r5, r1
 8000480:	fbb3 f1f7 	udiv	r1, r3, r7
 8000484:	fb07 3311 	mls	r3, r7, r1, r3
 8000488:	fa1f fe8c 	uxth.w	lr, ip
 800048c:	0c28      	lsrs	r0, r5, #16
 800048e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000492:	fb01 f30e 	mul.w	r3, r1, lr
 8000496:	4283      	cmp	r3, r0
 8000498:	fa04 f402 	lsl.w	r4, r4, r2
 800049c:	d908      	bls.n	80004b0 <__udivmoddi4+0x260>
 800049e:	eb1c 0000 	adds.w	r0, ip, r0
 80004a2:	f101 38ff 	add.w	r8, r1, #4294967295
 80004a6:	d22f      	bcs.n	8000508 <__udivmoddi4+0x2b8>
 80004a8:	4283      	cmp	r3, r0
 80004aa:	d92d      	bls.n	8000508 <__udivmoddi4+0x2b8>
 80004ac:	3902      	subs	r1, #2
 80004ae:	4460      	add	r0, ip
 80004b0:	1ac0      	subs	r0, r0, r3
 80004b2:	fbb0 f3f7 	udiv	r3, r0, r7
 80004b6:	fb07 0013 	mls	r0, r7, r3, r0
 80004ba:	b2ad      	uxth	r5, r5
 80004bc:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80004c0:	fb03 f00e 	mul.w	r0, r3, lr
 80004c4:	42a8      	cmp	r0, r5
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x28a>
 80004c8:	eb1c 0505 	adds.w	r5, ip, r5
 80004cc:	f103 38ff 	add.w	r8, r3, #4294967295
 80004d0:	d216      	bcs.n	8000500 <__udivmoddi4+0x2b0>
 80004d2:	42a8      	cmp	r0, r5
 80004d4:	d914      	bls.n	8000500 <__udivmoddi4+0x2b0>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	4465      	add	r5, ip
 80004da:	1a28      	subs	r0, r5, r0
 80004dc:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004e0:	e738      	b.n	8000354 <__udivmoddi4+0x104>
 80004e2:	4631      	mov	r1, r6
 80004e4:	4630      	mov	r0, r6
 80004e6:	e707      	b.n	80002f8 <__udivmoddi4+0xa8>
 80004e8:	462f      	mov	r7, r5
 80004ea:	e6e4      	b.n	80002b6 <__udivmoddi4+0x66>
 80004ec:	4618      	mov	r0, r3
 80004ee:	e6f9      	b.n	80002e4 <__udivmoddi4+0x94>
 80004f0:	454b      	cmp	r3, r9
 80004f2:	d2a9      	bcs.n	8000448 <__udivmoddi4+0x1f8>
 80004f4:	ebb9 0802 	subs.w	r8, r9, r2
 80004f8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004fc:	3801      	subs	r0, #1
 80004fe:	e7a3      	b.n	8000448 <__udivmoddi4+0x1f8>
 8000500:	4643      	mov	r3, r8
 8000502:	e7ea      	b.n	80004da <__udivmoddi4+0x28a>
 8000504:	4628      	mov	r0, r5
 8000506:	e794      	b.n	8000432 <__udivmoddi4+0x1e2>
 8000508:	4641      	mov	r1, r8
 800050a:	e7d1      	b.n	80004b0 <__udivmoddi4+0x260>
 800050c:	46d0      	mov	r8, sl
 800050e:	e77b      	b.n	8000408 <__udivmoddi4+0x1b8>
 8000510:	4464      	add	r4, ip
 8000512:	3802      	subs	r0, #2
 8000514:	e747      	b.n	80003a6 <__udivmoddi4+0x156>
 8000516:	3b02      	subs	r3, #2
 8000518:	4465      	add	r5, ip
 800051a:	e72f      	b.n	800037c <__udivmoddi4+0x12c>
 800051c:	4608      	mov	r0, r1
 800051e:	e706      	b.n	800032e <__udivmoddi4+0xde>
 8000520:	4631      	mov	r1, r6
 8000522:	e6e9      	b.n	80002f8 <__udivmoddi4+0xa8>

08000524 <__aeabi_idiv0>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <initApp_Display>:

static uint16_t countdowntime;
static _RTC switchtime;

void initApp_Display (DISPLAY_MODE_t *myDisplayMode, _RTC *myRTC)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
 8000530:	6039      	str	r1, [r7, #0]
	LCD_Init();
 8000532:	f006 fc65 	bl	8006e00 <LCD_Init>
	__MY_DISPLAY_MODE = myDisplayMode;
 8000536:	4a07      	ldr	r2, [pc, #28]	; (8000554 <initApp_Display+0x2c>)
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	6013      	str	r3, [r2, #0]
	__MY_RTC = myRTC;
 800053c:	4a06      	ldr	r2, [pc, #24]	; (8000558 <initApp_Display+0x30>)
 800053e:	683b      	ldr	r3, [r7, #0]
 8000540:	6013      	str	r3, [r2, #0]
//	myStation = myStation;
	Screen_Init(__MY_RTC);
 8000542:	4b05      	ldr	r3, [pc, #20]	; (8000558 <initApp_Display+0x30>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	4618      	mov	r0, r3
 8000548:	f006 fe14 	bl	8007174 <Screen_Init>

}
 800054c:	bf00      	nop
 800054e:	3708      	adds	r7, #8
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}
 8000554:	200005c4 	.word	0x200005c4
 8000558:	200005c8 	.word	0x200005c8

0800055c <display_SensorX>:

void display_SensorX(uint8_t sensorIndex)
{
 800055c:	b590      	push	{r4, r7, lr}
 800055e:	b087      	sub	sp, #28
 8000560:	af02      	add	r7, sp, #8
 8000562:	4603      	mov	r3, r0
 8000564:	71fb      	strb	r3, [r7, #7]
	if (sensorIndex > myStation.ssNode_list->length)	{
 8000566:	79fa      	ldrb	r2, [r7, #7]
 8000568:	4b18      	ldr	r3, [pc, #96]	; (80005cc <display_SensorX+0x70>)
 800056a:	68db      	ldr	r3, [r3, #12]
 800056c:	689b      	ldr	r3, [r3, #8]
 800056e:	429a      	cmp	r2, r3
 8000570:	d908      	bls.n	8000584 <display_SensorX+0x28>
		Screen_Monitor_Station(myStation.stID, myStation.stCurrent);
 8000572:	4b16      	ldr	r3, [pc, #88]	; (80005cc <display_SensorX+0x70>)
 8000574:	785b      	ldrb	r3, [r3, #1]
 8000576:	4a15      	ldr	r2, [pc, #84]	; (80005cc <display_SensorX+0x70>)
 8000578:	8852      	ldrh	r2, [r2, #2]
 800057a:	4611      	mov	r1, r2
 800057c:	4618      	mov	r0, r3
 800057e:	f006 ff41 	bl	8007404 <Screen_Monitor_Station>
		return ;
 8000582:	e020      	b.n	80005c6 <display_SensorX+0x6a>

	}

	Node * current = myStation.ssNode_list->head;
 8000584:	4b11      	ldr	r3, [pc, #68]	; (80005cc <display_SensorX+0x70>)
 8000586:	68db      	ldr	r3, [r3, #12]
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < sensorIndex; i++)
 800058c:	2300      	movs	r3, #0
 800058e:	72fb      	strb	r3, [r7, #11]
 8000590:	e005      	b.n	800059e <display_SensorX+0x42>
	{
		current = current->next;
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000596:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < sensorIndex; i++)
 8000598:	7afb      	ldrb	r3, [r7, #11]
 800059a:	3301      	adds	r3, #1
 800059c:	72fb      	strb	r3, [r7, #11]
 800059e:	7afa      	ldrb	r2, [r7, #11]
 80005a0:	79fb      	ldrb	r3, [r7, #7]
 80005a2:	429a      	cmp	r2, r3
 80005a4:	d3f5      	bcc.n	8000592 <display_SensorX+0x36>
	}
	Screen_Monitor_Node(current->SSnode.SSnode_ID, current->SSnode.Sensor_state,
 80005a6:	68fb      	ldr	r3, [r7, #12]
 80005a8:	7818      	ldrb	r0, [r3, #0]
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	7999      	ldrb	r1, [r3, #6]
			current->SSnode.Battery, current->SSnode.V_type, current->SSnode.V_value);
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	785b      	ldrb	r3, [r3, #1]
	Screen_Monitor_Node(current->SSnode.SSnode_ID, current->SSnode.Sensor_state,
 80005b2:	b29a      	uxth	r2, r3
			current->SSnode.Battery, current->SSnode.V_type, current->SSnode.V_value);
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	789c      	ldrb	r4, [r3, #2]
	Screen_Monitor_Node(current->SSnode.SSnode_ID, current->SSnode.Sensor_state,
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	889b      	ldrh	r3, [r3, #4]
 80005bc:	b29b      	uxth	r3, r3
 80005be:	9300      	str	r3, [sp, #0]
 80005c0:	4623      	mov	r3, r4
 80005c2:	f006 ff81 	bl	80074c8 <Screen_Monitor_Node>

}
 80005c6:	3714      	adds	r7, #20
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd90      	pop	{r4, r7, pc}
 80005cc:	20000474 	.word	0x20000474

080005d0 <setSwitchtime>:

void setSwitchtime()
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
	DS3231_GetTime(&switchtime);
 80005d4:	4802      	ldr	r0, [pc, #8]	; (80005e0 <setSwitchtime+0x10>)
 80005d6:	f003 fd65 	bl	80040a4 <DS3231_GetTime>
}
 80005da:	bf00      	nop
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	200005d0 	.word	0x200005d0

080005e4 <getSwitchtime>:
_RTC getSwitchtime()
{
 80005e4:	b480      	push	{r7}
 80005e6:	b083      	sub	sp, #12
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
	return switchtime;
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	4a06      	ldr	r2, [pc, #24]	; (8000608 <getSwitchtime+0x24>)
 80005f0:	6810      	ldr	r0, [r2, #0]
 80005f2:	6018      	str	r0, [r3, #0]
 80005f4:	8891      	ldrh	r1, [r2, #4]
 80005f6:	7992      	ldrb	r2, [r2, #6]
 80005f8:	8099      	strh	r1, [r3, #4]
 80005fa:	719a      	strb	r2, [r3, #6]
}
 80005fc:	6878      	ldr	r0, [r7, #4]
 80005fe:	370c      	adds	r7, #12
 8000600:	46bd      	mov	sp, r7
 8000602:	bc80      	pop	{r7}
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop
 8000608:	200005d0 	.word	0x200005d0

0800060c <processingApp_display>:
void processingApp_display()
{
 800060c:	b590      	push	{r4, r7, lr}
 800060e:	b083      	sub	sp, #12
 8000610:	af00      	add	r7, sp, #0

	if (getClearflag()) 	{
 8000612:	f003 fa23 	bl	8003a5c <getClearflag>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d004      	beq.n	8000626 <processingApp_display+0x1a>
		LCD_Clear();
 800061c:	f006 fda2 	bl	8007164 <LCD_Clear>
		setClearflag(DISABLE);
 8000620:	2000      	movs	r0, #0
 8000622:	f003 fa27 	bl	8003a74 <setClearflag>
	}
	switch(*__MY_DISPLAY_MODE)	{
 8000626:	4b5a      	ldr	r3, [pc, #360]	; (8000790 <processingApp_display+0x184>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	2b09      	cmp	r3, #9
 800062e:	f200 80aa 	bhi.w	8000786 <processingApp_display+0x17a>
 8000632:	a201      	add	r2, pc, #4	; (adr r2, 8000638 <processingApp_display+0x2c>)
 8000634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000638:	08000661 	.word	0x08000661
 800063c:	08000675 	.word	0x08000675
 8000640:	0800069d 	.word	0x0800069d
 8000644:	080006a3 	.word	0x080006a3
 8000648:	080006cd 	.word	0x080006cd
 800064c:	080006db 	.word	0x080006db
 8000650:	08000751 	.word	0x08000751
 8000654:	0800076b 	.word	0x0800076b
 8000658:	0800072d 	.word	0x0800072d
 800065c:	08000709 	.word	0x08000709
		case HOME:
			Screen_Home_Origin(myStation.stID, MQTT_getConnectflag());
 8000660:	4b4c      	ldr	r3, [pc, #304]	; (8000794 <processingApp_display+0x188>)
 8000662:	785c      	ldrb	r4, [r3, #1]
 8000664:	f004 f9dc 	bl	8004a20 <MQTT_getConnectflag>
 8000668:	4603      	mov	r3, r0
 800066a:	4619      	mov	r1, r3
 800066c:	4620      	mov	r0, r4
 800066e:	f006 fd93 	bl	8007198 <Screen_Home_Origin>
			break;
 8000672:	e089      	b.n	8000788 <processingApp_display+0x17c>
		case COUNTDOWN_SW_OFF:
			countdowntime = getCountdowntime(myStation.calibTime.hour,
 8000674:	4b47      	ldr	r3, [pc, #284]	; (8000794 <processingApp_display+0x188>)
 8000676:	7cdb      	ldrb	r3, [r3, #19]
 8000678:	4a46      	ldr	r2, [pc, #280]	; (8000794 <processingApp_display+0x188>)
 800067a:	7d11      	ldrb	r1, [r2, #20]
 800067c:	4a45      	ldr	r2, [pc, #276]	; (8000794 <processingApp_display+0x188>)
 800067e:	7d52      	ldrb	r2, [r2, #21]
 8000680:	4618      	mov	r0, r3
 8000682:	f003 ff29 	bl	80044d8 <getCountdowntime>
 8000686:	4603      	mov	r3, r0
 8000688:	461a      	mov	r2, r3
 800068a:	4b43      	ldr	r3, [pc, #268]	; (8000798 <processingApp_display+0x18c>)
 800068c:	801a      	strh	r2, [r3, #0]
												myStation.calibTime.min, myStation.calibTime.sec);
			Screen_Home_Sync(countdowntime);
 800068e:	4b42      	ldr	r3, [pc, #264]	; (8000798 <processingApp_display+0x18c>)
 8000690:	881b      	ldrh	r3, [r3, #0]
 8000692:	b2db      	uxtb	r3, r3
 8000694:	4618      	mov	r0, r3
 8000696:	f006 fe11 	bl	80072bc <Screen_Home_Sync>
			break;
 800069a:	e075      	b.n	8000788 <processingApp_display+0x17c>
		case AFTER_SW_OFF:
			Screen_Home_Calib();
 800069c:	f006 fe52 	bl	8007344 <Screen_Home_Calib>
			break;
 80006a0:	e072      	b.n	8000788 <processingApp_display+0x17c>
		case MONITOR:

			if (get_curMonitor() == 0) 	{
 80006a2:	f003 fa51 	bl	8003b48 <get_curMonitor>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d108      	bne.n	80006be <processingApp_display+0xb2>
				Screen_Monitor_Station(myStation.MBAstate, myStation.stCurrent);
 80006ac:	4b39      	ldr	r3, [pc, #228]	; (8000794 <processingApp_display+0x188>)
 80006ae:	799b      	ldrb	r3, [r3, #6]
 80006b0:	4a38      	ldr	r2, [pc, #224]	; (8000794 <processingApp_display+0x188>)
 80006b2:	8852      	ldrh	r2, [r2, #2]
 80006b4:	4611      	mov	r1, r2
 80006b6:	4618      	mov	r0, r3
 80006b8:	f006 fea4 	bl	8007404 <Screen_Monitor_Station>
			}
			else {
				display_SensorX(get_curMonitor());
			}
			break;
 80006bc:	e064      	b.n	8000788 <processingApp_display+0x17c>
				display_SensorX(get_curMonitor());
 80006be:	f003 fa43 	bl	8003b48 <get_curMonitor>
 80006c2:	4603      	mov	r3, r0
 80006c4:	4618      	mov	r0, r3
 80006c6:	f7ff ff49 	bl	800055c <display_SensorX>
			break;
 80006ca:	e05d      	b.n	8000788 <processingApp_display+0x17c>
		case MENU_CONTROL:
			Screen_Function(getcurControl());
 80006cc:	f003 f9fa 	bl	8003ac4 <getcurControl>
 80006d0:	4603      	mov	r3, r0
 80006d2:	4618      	mov	r0, r3
 80006d4:	f006 ffa4 	bl	8007620 <Screen_Function>
			break;
 80006d8:	e056      	b.n	8000788 <processingApp_display+0x17c>
		case VOLTAGE_CONTROL:
			Screen_Voltage_Control(getLimit(), getStepValorDir());
 80006da:	f003 f867 	bl	80037ac <getLimit>
 80006de:	4603      	mov	r3, r0
 80006e0:	461c      	mov	r4, r3
 80006e2:	f003 f9a7 	bl	8003a34 <getStepValorDir>
 80006e6:	4603      	mov	r3, r0
 80006e8:	4619      	mov	r1, r3
 80006ea:	4620      	mov	r0, r4
 80006ec:	f006 ffd2 	bl	8007694 <Screen_Voltage_Control>
			Screen_Voltage_Control_Control_Motor(getStepchange(), Step_getDir());
 80006f0:	f003 f8c8 	bl	8003884 <getStepchange>
 80006f4:	4603      	mov	r3, r0
 80006f6:	461c      	mov	r4, r3
 80006f8:	f003 f862 	bl	80037c0 <Step_getDir>
 80006fc:	4603      	mov	r3, r0
 80006fe:	4619      	mov	r1, r3
 8000700:	4620      	mov	r0, r4
 8000702:	f007 f8c9 	bl	8007898 <Screen_Voltage_Control_Control_Motor>
			break;
 8000706:	e03f      	b.n	8000788 <processingApp_display+0x17c>
		case STEP_DIR_CONTROL:
			Screen_Dir_Control(getLimit());
 8000708:	f003 f850 	bl	80037ac <getLimit>
 800070c:	4603      	mov	r3, r0
 800070e:	4618      	mov	r0, r3
 8000710:	f007 f822 	bl	8007758 <Screen_Dir_Control>
			Screen_Voltage_Control_Control_Motor(getStepchange(), Step_getDir());
 8000714:	f003 f8b6 	bl	8003884 <getStepchange>
 8000718:	4603      	mov	r3, r0
 800071a:	461c      	mov	r4, r3
 800071c:	f003 f850 	bl	80037c0 <Step_getDir>
 8000720:	4603      	mov	r3, r0
 8000722:	4619      	mov	r1, r3
 8000724:	4620      	mov	r0, r4
 8000726:	f007 f8b7 	bl	8007898 <Screen_Voltage_Control_Control_Motor>
			break;
 800072a:	e02d      	b.n	8000788 <processingApp_display+0x17c>
		case STEP_VAL_CONTROL:
			Screen_StepVal_Control(getLimit());
 800072c:	f003 f83e 	bl	80037ac <getLimit>
 8000730:	4603      	mov	r3, r0
 8000732:	4618      	mov	r0, r3
 8000734:	f007 f860 	bl	80077f8 <Screen_StepVal_Control>
			Screen_Voltage_Control_Control_Motor(getStepchange(), Step_getDir());
 8000738:	f003 f8a4 	bl	8003884 <getStepchange>
 800073c:	4603      	mov	r3, r0
 800073e:	461c      	mov	r4, r3
 8000740:	f003 f83e 	bl	80037c0 <Step_getDir>
 8000744:	4603      	mov	r3, r0
 8000746:	4619      	mov	r1, r3
 8000748:	4620      	mov	r0, r4
 800074a:	f007 f8a5 	bl	8007898 <Screen_Voltage_Control_Control_Motor>
			break;
 800074e:	e01b      	b.n	8000788 <processingApp_display+0x17c>
		case ON_OFF_CONTROL:
			Screen_Control_Relay(1);
 8000750:	2001      	movs	r0, #1
 8000752:	f007 f8d5 	bl	8007900 <Screen_Control_Relay>
			Screen_Control_Relay_Change_Mode(myStation.MBAstate, getCurswitch());
 8000756:	4b0f      	ldr	r3, [pc, #60]	; (8000794 <processingApp_display+0x188>)
 8000758:	799c      	ldrb	r4, [r3, #6]
 800075a:	f003 f975 	bl	8003a48 <getCurswitch>
 800075e:	4603      	mov	r3, r0
 8000760:	4619      	mov	r1, r3
 8000762:	4620      	mov	r0, r4
 8000764:	f007 f912 	bl	800798c <Screen_Control_Relay_Change_Mode>
			break;
 8000768:	e00e      	b.n	8000788 <processingApp_display+0x17c>
		case COMPLETE_CONTROL:
			Screen_Accept_Relay(getSwitchtime(), getCurswitch());
 800076a:	463b      	mov	r3, r7
 800076c:	4618      	mov	r0, r3
 800076e:	f7ff ff39 	bl	80005e4 <getSwitchtime>
 8000772:	f003 f969 	bl	8003a48 <getCurswitch>
 8000776:	4603      	mov	r3, r0
 8000778:	461a      	mov	r2, r3
 800077a:	463b      	mov	r3, r7
 800077c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000780:	f007 f934 	bl	80079ec <Screen_Accept_Relay>
			break;
 8000784:	e000      	b.n	8000788 <processingApp_display+0x17c>
		default:
			break;
 8000786:	bf00      	nop
		}
//	Screen_Home_Origin(myStation.stID);

//	Screen_Home_Sync(countdowntime);
}
 8000788:	bf00      	nop
 800078a:	370c      	adds	r7, #12
 800078c:	46bd      	mov	sp, r7
 800078e:	bd90      	pop	{r4, r7, pc}
 8000790:	200005c4 	.word	0x200005c4
 8000794:	20000474 	.word	0x20000474
 8000798:	200005cc 	.word	0x200005cc

0800079c <initApp_MBA_stepmor>:
#include "Step_motor.h"
#include "user_a4988.h"

static Stepmotor_change_mode_t changeMode;
void initApp_MBA_stepmor()
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0

}
 80007a0:	bf00      	nop
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bc80      	pop	{r7}
 80007a6:	4770      	bx	lr

080007a8 <processingApp_MBA_stepmor>:

void processingApp_MBA_stepmor()
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
	if(checkTaskflag(TASK_CTRL_STEPMOR))	{
 80007ac:	2006      	movs	r0, #6
 80007ae:	f004 fe9f 	bl	80054f0 <checkTaskflag>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d038      	beq.n	800082a <processingApp_MBA_stepmor+0x82>
		switch ( getLimit() )	{
 80007b8:	f002 fff8 	bl	80037ac <getLimit>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d00a      	beq.n	80007d8 <processingApp_MBA_stepmor+0x30>
 80007c2:	2b01      	cmp	r3, #1
 80007c4:	d111      	bne.n	80007ea <processingApp_MBA_stepmor+0x42>
		case LIMIT_MAX:
			if (Step_getDir() == STEPM_DIR_DEC)	{
 80007c6:	f002 fffb 	bl	80037c0 <Step_getDir>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b02      	cmp	r3, #2
 80007ce:	d10e      	bne.n	80007ee <processingApp_MBA_stepmor+0x46>
				setLimit(LIMIT_NONE);
 80007d0:	2002      	movs	r0, #2
 80007d2:	f002 ffdb 	bl	800378c <setLimit>
			}
			break;
 80007d6:	e00a      	b.n	80007ee <processingApp_MBA_stepmor+0x46>
		case LIMIT_MIN:
			if (Step_getDir() == STEPM_DIR_INC)	{
 80007d8:	f002 fff2 	bl	80037c0 <Step_getDir>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b01      	cmp	r3, #1
 80007e0:	d107      	bne.n	80007f2 <processingApp_MBA_stepmor+0x4a>
				setLimit(LIMIT_NONE);
 80007e2:	2002      	movs	r0, #2
 80007e4:	f002 ffd2 	bl	800378c <setLimit>
			}
			break;
 80007e8:	e003      	b.n	80007f2 <processingApp_MBA_stepmor+0x4a>
		default :
			break;
 80007ea:	bf00      	nop
 80007ec:	e002      	b.n	80007f4 <processingApp_MBA_stepmor+0x4c>
			break;
 80007ee:	bf00      	nop
 80007f0:	e000      	b.n	80007f4 <processingApp_MBA_stepmor+0x4c>
			break;
 80007f2:	bf00      	nop
		}
		changeMode = Step_getChangemode();
 80007f4:	f003 f88c 	bl	8003910 <Step_getChangemode>
 80007f8:	4603      	mov	r3, r0
 80007fa:	461a      	mov	r2, r3
 80007fc:	4b0c      	ldr	r3, [pc, #48]	; (8000830 <processingApp_MBA_stepmor+0x88>)
 80007fe:	701a      	strb	r2, [r3, #0]
		switch (changeMode)	{
 8000800:	4b0b      	ldr	r3, [pc, #44]	; (8000830 <processingApp_MBA_stepmor+0x88>)
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	2b01      	cmp	r3, #1
 8000806:	d004      	beq.n	8000812 <processingApp_MBA_stepmor+0x6a>
 8000808:	2b02      	cmp	r3, #2
 800080a:	d105      	bne.n	8000818 <processingApp_MBA_stepmor+0x70>
		case STEPM_MODE_STEP:
			Step_step();
 800080c:	f003 f88a 	bl	8003924 <Step_step>
			break;
 8000810:	e003      	b.n	800081a <processingApp_MBA_stepmor+0x72>
		case STEPM_MODE_PERCENTAGE:
			Step_percent();
 8000812:	f003 f8bb 	bl	800398c <Step_percent>
			break;
 8000816:	e000      	b.n	800081a <processingApp_MBA_stepmor+0x72>
		default:
			break;
 8000818:	bf00      	nop
		}
		// trigger task send output data to server
		triggerTaskflag(TASK_SEND_DATAPERIOD, FLAG_EN);
 800081a:	2101      	movs	r1, #1
 800081c:	2009      	movs	r0, #9
 800081e:	f004 ff69 	bl	80056f4 <triggerTaskflag>
		// disable task control step motor
		triggerTaskflag(TASK_CTRL_STEPMOR, FLAG_DIS);
 8000822:	2100      	movs	r1, #0
 8000824:	2006      	movs	r0, #6
 8000826:	f004 ff65 	bl	80056f4 <triggerTaskflag>
	}
}
 800082a:	bf00      	nop
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	200005d7 	.word	0x200005d7

08000834 <processApp_MCU>:
//			current = current->next;
//		}
//	return count;
//}
void processApp_MCU(void)
{
 8000834:	b598      	push	{r3, r4, r7, lr}
 8000836:	af00      	add	r7, sp, #0
		/*Check for task*/
		if ( checkTaskflag(TASK_PREPARE_CALIB) )	{
 8000838:	2002      	movs	r0, #2
 800083a:	f004 fe59 	bl	80054f0 <checkTaskflag>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d013      	beq.n	800086c <processApp_MCU+0x38>

			//Synchronize RTC time for Station and Sensor
			triggerTaskflag(TASK_GET_GPS_TIME, FLAG_EN);
 8000844:	2101      	movs	r1, #1
 8000846:	2007      	movs	r0, #7
 8000848:	f004 ff54 	bl	80056f4 <triggerTaskflag>

			// Send WAKEUP command for Sensor
			wake_sensorflag = 1;
 800084c:	4b31      	ldr	r3, [pc, #196]	; (8000914 <processApp_MCU+0xe0>)
 800084e:	2201      	movs	r2, #1
 8000850:	701a      	strb	r2, [r3, #0]
			// Start timer 100s
			NWRDtick = HAL_GetTick();
 8000852:	f007 f9b1 	bl	8007bb8 <HAL_GetTick>
 8000856:	4603      	mov	r3, r0
 8000858:	4a2f      	ldr	r2, [pc, #188]	; (8000918 <processApp_MCU+0xe4>)
 800085a:	6013      	str	r3, [r2, #0]
			// Trigger send NETWORK READY message to Server
			triggerTaskflag(TASK_SEND_NWREADY, FLAG_EN);
 800085c:	2101      	movs	r1, #1
 800085e:	2008      	movs	r0, #8
 8000860:	f004 ff48 	bl	80056f4 <triggerTaskflag>

			triggerTaskflag(TASK_PREPARE_CALIB, FLAG_DIS);
 8000864:	2100      	movs	r1, #0
 8000866:	2002      	movs	r0, #2
 8000868:	f004 ff44 	bl	80056f4 <triggerTaskflag>
		}
		// Wake up sensor nodes
		if (wake_sensorflag)	{
 800086c:	4b29      	ldr	r3, [pc, #164]	; (8000914 <processApp_MCU+0xe0>)
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	2b00      	cmp	r3, #0
 8000872:	d019      	beq.n	80008a8 <processApp_MCU+0x74>
			if (checkSensorMode(SLEEP) + checkSensorState(SENSOR_DEACTIVE) >= myStation.ssNode_list->length )	{
 8000874:	2000      	movs	r0, #0
 8000876:	f000 f8b9 	bl	80009ec <checkSensorMode>
 800087a:	4603      	mov	r3, r0
 800087c:	461c      	mov	r4, r3
 800087e:	2002      	movs	r0, #2
 8000880:	f000 f88e 	bl	80009a0 <checkSensorState>
 8000884:	4603      	mov	r3, r0
 8000886:	4423      	add	r3, r4
 8000888:	461a      	mov	r2, r3
 800088a:	4b24      	ldr	r3, [pc, #144]	; (800091c <processApp_MCU+0xe8>)
 800088c:	68db      	ldr	r3, [r3, #12]
 800088e:	689b      	ldr	r3, [r3, #8]
 8000890:	429a      	cmp	r2, r3
 8000892:	d309      	bcc.n	80008a8 <processApp_MCU+0x74>
				if (Lora_Setmode(WAKE , 1)){
 8000894:	2101      	movs	r1, #1
 8000896:	2001      	movs	r0, #1
 8000898:	f004 f878 	bl	800498c <Lora_Setmode>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d002      	beq.n	80008a8 <processApp_MCU+0x74>
					wake_sensorflag = 0;
 80008a2:	4b1c      	ldr	r3, [pc, #112]	; (8000914 <processApp_MCU+0xe0>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	701a      	strb	r2, [r3, #0]
				}
			}
		}
		if ((HAL_GetTick() - NWRDtick > 100000) && checkTaskflag(TASK_SEND_NWREADY))	{
 80008a8:	f007 f986 	bl	8007bb8 <HAL_GetTick>
 80008ac:	4602      	mov	r2, r0
 80008ae:	4b1a      	ldr	r3, [pc, #104]	; (8000918 <processApp_MCU+0xe4>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	1ad3      	subs	r3, r2, r3
 80008b4:	4a1a      	ldr	r2, [pc, #104]	; (8000920 <processApp_MCU+0xec>)
 80008b6:	4293      	cmp	r3, r2
 80008b8:	d908      	bls.n	80008cc <processApp_MCU+0x98>
 80008ba:	2008      	movs	r0, #8
 80008bc:	f004 fe18 	bl	80054f0 <checkTaskflag>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d002      	beq.n	80008cc <processApp_MCU+0x98>
			sendData2Server(DATA_NETWREADY);
 80008c6:	2002      	movs	r0, #2
 80008c8:	f001 f8cc 	bl	8001a64 <sendData2Server>
		}
		// Calibration Mode
//		if (checkStationMode() == STATION_MODE_CALIB)	{
		// Start calib
		if( checkTaskflag(TASK_START_CALIB) ) {
 80008cc:	2003      	movs	r0, #3
 80008ce:	f004 fe0f 	bl	80054f0 <checkTaskflag>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d007      	beq.n	80008e8 <processApp_MCU+0xb4>
			// Receive Sensor DATA CALIBRATION

			// Send DATA CALIBRATION to Server
			triggerTaskflag(TASK_SEND_DATACALIB, FLAG_EN);
 80008d8:	2101      	movs	r1, #1
 80008da:	200a      	movs	r0, #10
 80008dc:	f004 ff0a 	bl	80056f4 <triggerTaskflag>
			triggerTaskflag(TASK_START_CALIB, FLAG_DIS);
 80008e0:	2100      	movs	r1, #0
 80008e2:	2003      	movs	r0, #3
 80008e4:	f004 ff06 	bl	80056f4 <triggerTaskflag>

	// Normal Mode
//	if (checkStationMode() == STATION_MODE_NORMAL)	{

		// Send data period
		if (HAL_GetTick() - tick >= UPDATE_DATA_PERIOD *1000)	{
 80008e8:	f007 f966 	bl	8007bb8 <HAL_GetTick>
 80008ec:	4602      	mov	r2, r0
 80008ee:	4b0d      	ldr	r3, [pc, #52]	; (8000924 <processApp_MCU+0xf0>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	1ad3      	subs	r3, r2, r3
 80008f4:	f242 720f 	movw	r2, #9999	; 0x270f
 80008f8:	4293      	cmp	r3, r2
 80008fa:	d908      	bls.n	800090e <processApp_MCU+0xda>
			triggerTaskflag(TASK_SEND_DATAPERIOD, FLAG_EN);
 80008fc:	2101      	movs	r1, #1
 80008fe:	2009      	movs	r0, #9
 8000900:	f004 fef8 	bl	80056f4 <triggerTaskflag>
			tick = HAL_GetTick();
 8000904:	f007 f958 	bl	8007bb8 <HAL_GetTick>
 8000908:	4603      	mov	r3, r0
 800090a:	4a06      	ldr	r2, [pc, #24]	; (8000924 <processApp_MCU+0xf0>)
 800090c:	6013      	str	r3, [r2, #0]
		}
//	}



}
 800090e:	bf00      	nop
 8000910:	bd98      	pop	{r3, r4, r7, pc}
 8000912:	bf00      	nop
 8000914:	200005e0 	.word	0x200005e0
 8000918:	200005dc 	.word	0x200005dc
 800091c:	20000474 	.word	0x20000474
 8000920:	000186a0 	.word	0x000186a0
 8000924:	200005d8 	.word	0x200005d8

08000928 <initApp_MQTT>:
//uint8_t stIDbuffer[] = {1,2,3,4,5};
uint32_t tickconnect =0;
uint32_t tickreg = 0;
uint32_t ticksend = 0;
void initApp_MQTT()
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af02      	add	r7, sp, #8
//	myStation = station;
//	mySim = sim;
	init_MQTT();
 800092e:	f004 f871 	bl	8004a14 <init_MQTT>
	initServerMsg();
 8000932:	f000 fc99 	bl	8001268 <initServerMsg>
	SIM_sendCMD((uint8_t*)"ATE0",(uint8_t*)"OK", ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, 1000);
 8000936:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800093a:	9300      	str	r3, [sp, #0]
 800093c:	2301      	movs	r3, #1
 800093e:	2201      	movs	r2, #1
 8000940:	4903      	ldr	r1, [pc, #12]	; (8000950 <initApp_MQTT+0x28>)
 8000942:	4804      	ldr	r0, [pc, #16]	; (8000954 <initApp_MQTT+0x2c>)
 8000944:	f001 ff38 	bl	80027b8 <SIM_sendCMD>
}
 8000948:	bf00      	nop
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	0800eb1c 	.word	0x0800eb1c
 8000954:	0800eb20 	.word	0x0800eb20

08000958 <dataCalibavailble>:

uint8_t dataCalibavailble()
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
	Node * current =myStation.ssNode_list->head->next;
 800095e:	4b0f      	ldr	r3, [pc, #60]	; (800099c <dataCalibavailble+0x44>)
 8000960:	68db      	ldr	r3, [r3, #12]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000966:	607b      	str	r3, [r7, #4]
		while (current != myStation.ssNode_list->tail)	{
 8000968:	e00c      	b.n	8000984 <dataCalibavailble+0x2c>
			if (current->SSnode.dataCalibAvailable) 	{
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	79db      	ldrb	r3, [r3, #7]
 800096e:	2b00      	cmp	r3, #0
 8000970:	d005      	beq.n	800097e <dataCalibavailble+0x26>
				triggerTaskflag(TASK_SEND_DATACALIB, FLAG_EN);
 8000972:	2101      	movs	r1, #1
 8000974:	200a      	movs	r0, #10
 8000976:	f004 febd 	bl	80056f4 <triggerTaskflag>
				return 1;
 800097a:	2301      	movs	r3, #1
 800097c:	e009      	b.n	8000992 <dataCalibavailble+0x3a>
			}
			current = current->next;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000982:	607b      	str	r3, [r7, #4]
		while (current != myStation.ssNode_list->tail)	{
 8000984:	4b05      	ldr	r3, [pc, #20]	; (800099c <dataCalibavailble+0x44>)
 8000986:	68db      	ldr	r3, [r3, #12]
 8000988:	685b      	ldr	r3, [r3, #4]
 800098a:	687a      	ldr	r2, [r7, #4]
 800098c:	429a      	cmp	r2, r3
 800098e:	d1ec      	bne.n	800096a <dataCalibavailble+0x12>
		}
	return 0;
 8000990:	2300      	movs	r3, #0
}
 8000992:	4618      	mov	r0, r3
 8000994:	3708      	adds	r7, #8
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	20000474 	.word	0x20000474

080009a0 <checkSensorState>:

uint8_t checkSensorState(sensor_state_t state)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b085      	sub	sp, #20
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	4603      	mov	r3, r0
 80009a8:	71fb      	strb	r3, [r7, #7]
	uint8_t count = 0;
 80009aa:	2300      	movs	r3, #0
 80009ac:	73fb      	strb	r3, [r7, #15]
	Node * current =myStation.ssNode_list->head->next;
 80009ae:	4b0e      	ldr	r3, [pc, #56]	; (80009e8 <checkSensorState+0x48>)
 80009b0:	68db      	ldr	r3, [r3, #12]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80009b6:	60bb      	str	r3, [r7, #8]
		while (current != myStation.ssNode_list->tail)	{
 80009b8:	e00a      	b.n	80009d0 <checkSensorState+0x30>
			if (current->SSnode.Sensor_state == state ) 	{
 80009ba:	68bb      	ldr	r3, [r7, #8]
 80009bc:	799b      	ldrb	r3, [r3, #6]
 80009be:	79fa      	ldrb	r2, [r7, #7]
 80009c0:	429a      	cmp	r2, r3
 80009c2:	d102      	bne.n	80009ca <checkSensorState+0x2a>
				count++;
 80009c4:	7bfb      	ldrb	r3, [r7, #15]
 80009c6:	3301      	adds	r3, #1
 80009c8:	73fb      	strb	r3, [r7, #15]
			}
			current = current->next;
 80009ca:	68bb      	ldr	r3, [r7, #8]
 80009cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80009ce:	60bb      	str	r3, [r7, #8]
		while (current != myStation.ssNode_list->tail)	{
 80009d0:	4b05      	ldr	r3, [pc, #20]	; (80009e8 <checkSensorState+0x48>)
 80009d2:	68db      	ldr	r3, [r3, #12]
 80009d4:	685b      	ldr	r3, [r3, #4]
 80009d6:	68ba      	ldr	r2, [r7, #8]
 80009d8:	429a      	cmp	r2, r3
 80009da:	d1ee      	bne.n	80009ba <checkSensorState+0x1a>
		}
	return count;
 80009dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80009de:	4618      	mov	r0, r3
 80009e0:	3714      	adds	r7, #20
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bc80      	pop	{r7}
 80009e6:	4770      	bx	lr
 80009e8:	20000474 	.word	0x20000474

080009ec <checkSensorMode>:

uint8_t checkSensorMode(sensor_mode_t mode)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b085      	sub	sp, #20
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	4603      	mov	r3, r0
 80009f4:	71fb      	strb	r3, [r7, #7]
	uint8_t count = 0;
 80009f6:	2300      	movs	r3, #0
 80009f8:	73fb      	strb	r3, [r7, #15]
	Node * current =myStation.ssNode_list->head->next;
 80009fa:	4b0e      	ldr	r3, [pc, #56]	; (8000a34 <checkSensorMode+0x48>)
 80009fc:	68db      	ldr	r3, [r3, #12]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000a02:	60bb      	str	r3, [r7, #8]
		while (current != myStation.ssNode_list->tail)	{
 8000a04:	e00a      	b.n	8000a1c <checkSensorMode+0x30>
			if (current->SSnode.sensorMode == mode ) 	{
 8000a06:	68bb      	ldr	r3, [r7, #8]
 8000a08:	7a5b      	ldrb	r3, [r3, #9]
 8000a0a:	79fa      	ldrb	r2, [r7, #7]
 8000a0c:	429a      	cmp	r2, r3
 8000a0e:	d102      	bne.n	8000a16 <checkSensorMode+0x2a>
				count++;
 8000a10:	7bfb      	ldrb	r3, [r7, #15]
 8000a12:	3301      	adds	r3, #1
 8000a14:	73fb      	strb	r3, [r7, #15]
			}
			current = current->next;
 8000a16:	68bb      	ldr	r3, [r7, #8]
 8000a18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000a1a:	60bb      	str	r3, [r7, #8]
		while (current != myStation.ssNode_list->tail)	{
 8000a1c:	4b05      	ldr	r3, [pc, #20]	; (8000a34 <checkSensorMode+0x48>)
 8000a1e:	68db      	ldr	r3, [r3, #12]
 8000a20:	685b      	ldr	r3, [r3, #4]
 8000a22:	68ba      	ldr	r2, [r7, #8]
 8000a24:	429a      	cmp	r2, r3
 8000a26:	d1ee      	bne.n	8000a06 <checkSensorMode+0x1a>
		}
	return count;
 8000a28:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	3714      	adds	r7, #20
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bc80      	pop	{r7}
 8000a32:	4770      	bx	lr
 8000a34:	20000474 	.word	0x20000474

08000a38 <sendNWready>:
void sendNWready()
{
 8000a38:	b598      	push	{r3, r4, r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
	if ( checkSensorMode(WAKE) + checkSensorState(SENSOR_DEACTIVE) >= myStation.ssNode_list->length  )	{
 8000a3c:	2001      	movs	r0, #1
 8000a3e:	f7ff ffd5 	bl	80009ec <checkSensorMode>
 8000a42:	4603      	mov	r3, r0
 8000a44:	461c      	mov	r4, r3
 8000a46:	2002      	movs	r0, #2
 8000a48:	f7ff ffaa 	bl	80009a0 <checkSensorState>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	4423      	add	r3, r4
 8000a50:	461a      	mov	r2, r3
 8000a52:	4b05      	ldr	r3, [pc, #20]	; (8000a68 <sendNWready+0x30>)
 8000a54:	68db      	ldr	r3, [r3, #12]
 8000a56:	689b      	ldr	r3, [r3, #8]
 8000a58:	429a      	cmp	r2, r3
 8000a5a:	d302      	bcc.n	8000a62 <sendNWready+0x2a>
		sendData2Server(DATA_NETWREADY);
 8000a5c:	2002      	movs	r0, #2
 8000a5e:	f001 f801 	bl	8001a64 <sendData2Server>
	}
}
 8000a62:	bf00      	nop
 8000a64:	bd98      	pop	{r3, r4, r7, pc}
 8000a66:	bf00      	nop
 8000a68:	20000474 	.word	0x20000474

08000a6c <processApp_MQTT>:
void processApp_MQTT(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af02      	add	r7, sp, #8
//	 Check for connection to MQTT broker
	if (HAL_GetTick() - tickconnect > 30000)	{
 8000a72:	f007 f8a1 	bl	8007bb8 <HAL_GetTick>
 8000a76:	4602      	mov	r2, r0
 8000a78:	4bb7      	ldr	r3, [pc, #732]	; (8000d58 <processApp_MQTT+0x2ec>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	1ad3      	subs	r3, r2, r3
 8000a7e:	f247 5230 	movw	r2, #30000	; 0x7530
 8000a82:	4293      	cmp	r3, r2
 8000a84:	d910      	bls.n	8000aa8 <processApp_MQTT+0x3c>
		MQTT_connected();
 8000a86:	f004 f925 	bl	8004cd4 <MQTT_connected>
		if (!checkSubcribe((uint8_t*)TOPIC_SUB))	{
 8000a8a:	48b4      	ldr	r0, [pc, #720]	; (8000d5c <processApp_MQTT+0x2f0>)
 8000a8c:	f004 fc10 	bl	80052b0 <checkSubcribe>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d103      	bne.n	8000a9e <processApp_MQTT+0x32>
			triggerTaskflag(TASK_SUBSCRIBE, FLAG_EN);
 8000a96:	2101      	movs	r1, #1
 8000a98:	2001      	movs	r0, #1
 8000a9a:	f004 fe2b 	bl	80056f4 <triggerTaskflag>
		}
		tickconnect = HAL_GetTick();
 8000a9e:	f007 f88b 	bl	8007bb8 <HAL_GetTick>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	4aac      	ldr	r2, [pc, #688]	; (8000d58 <processApp_MQTT+0x2ec>)
 8000aa6:	6013      	str	r3, [r2, #0]
	}
	if ( !mySIM.mqttServer.connect  ) {
 8000aa8:	4bad      	ldr	r3, [pc, #692]	; (8000d60 <processApp_MQTT+0x2f4>)
 8000aaa:	7b9b      	ldrb	r3, [r3, #14]
 8000aac:	b2db      	uxtb	r3, r3
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d108      	bne.n	8000ac4 <processApp_MQTT+0x58>
			if (MQTT_connect())	{
 8000ab2:	f004 fa95 	bl	8004fe0 <MQTT_connect>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d003      	beq.n	8000ac4 <processApp_MQTT+0x58>
				triggerTaskflag(TASK_SUBSCRIBE, FLAG_EN);
 8000abc:	2101      	movs	r1, #1
 8000abe:	2001      	movs	r0, #1
 8000ac0:	f004 fe18 	bl	80056f4 <triggerTaskflag>
			}
		}
	if (mySIM.mqttServer.connect)	{
 8000ac4:	4ba6      	ldr	r3, [pc, #664]	; (8000d60 <processApp_MQTT+0x2f4>)
 8000ac6:	7b9b      	ldrb	r3, [r3, #14]
 8000ac8:	b2db      	uxtb	r3, r3
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	f000 8131 	beq.w	8000d32 <processApp_MQTT+0x2c6>

		// Check for subscribe to broker
		if (  checkTaskflag(TASK_SUBSCRIBE) ) {
 8000ad0:	2001      	movs	r0, #1
 8000ad2:	f004 fd0d 	bl	80054f0 <checkTaskflag>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d009      	beq.n	8000af0 <processApp_MQTT+0x84>

			if ( MQTT_subcribe( (uint8_t*)TOPIC_SUB ) ) {
 8000adc:	489f      	ldr	r0, [pc, #636]	; (8000d5c <processApp_MQTT+0x2f0>)
 8000ade:	f004 fb9d 	bl	800521c <MQTT_subcribe>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d003      	beq.n	8000af0 <processApp_MQTT+0x84>
				triggerTaskflag(TASK_SUBSCRIBE, FLAG_DIS);
 8000ae8:	2100      	movs	r1, #0
 8000aea:	2001      	movs	r0, #1
 8000aec:	f004 fe02 	bl	80056f4 <triggerTaskflag>
			}
		}
		// Check for register to Server
		if ( checkTaskflag(TASK_REGISTER) )	{
 8000af0:	2000      	movs	r0, #0
 8000af2:	f004 fcfd 	bl	80054f0 <checkTaskflag>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d010      	beq.n	8000b1e <processApp_MQTT+0xb2>
			if (HAL_GetTick() - tickreg > 10000)	{
 8000afc:	f007 f85c 	bl	8007bb8 <HAL_GetTick>
 8000b00:	4602      	mov	r2, r0
 8000b02:	4b98      	ldr	r3, [pc, #608]	; (8000d64 <processApp_MQTT+0x2f8>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	1ad3      	subs	r3, r2, r3
 8000b08:	f242 7210 	movw	r2, #10000	; 0x2710
 8000b0c:	4293      	cmp	r3, r2
 8000b0e:	d906      	bls.n	8000b1e <processApp_MQTT+0xb2>
				Register2Server();
 8000b10:	f000 fec2 	bl	8001898 <Register2Server>
				tickreg = HAL_GetTick();
 8000b14:	f007 f850 	bl	8007bb8 <HAL_GetTick>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	4a92      	ldr	r2, [pc, #584]	; (8000d64 <processApp_MQTT+0x2f8>)
 8000b1c:	6013      	str	r3, [r2, #0]
			}
		}
		// Send NETWORK READY message to Server
		if ( checkTaskflag(TASK_SEND_NWREADY))	{
 8000b1e:	2008      	movs	r0, #8
 8000b20:	f004 fce6 	bl	80054f0 <checkTaskflag>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <processApp_MQTT+0xc2>
			sendNWready();
 8000b2a:	f7ff ff85 	bl	8000a38 <sendNWready>
		}
		// Send DATA CALIB
		if(checkTaskflag(TASK_SEND_DATACALIB) && dataCalibavailble())	{
 8000b2e:	200a      	movs	r0, #10
 8000b30:	f004 fcde 	bl	80054f0 <checkTaskflag>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d007      	beq.n	8000b4a <processApp_MQTT+0xde>
 8000b3a:	f7ff ff0d 	bl	8000958 <dataCalibavailble>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d002      	beq.n	8000b4a <processApp_MQTT+0xde>
			sendData2Server(DATA_CALIB);
 8000b44:	2005      	movs	r0, #5
 8000b46:	f000 ff8d 	bl	8001a64 <sendData2Server>
		}
		// Send DATA AFTER CALIB
		if (checkTaskflag(TASK_SEND_DATAAFTERCALIB) )	{
 8000b4a:	200b      	movs	r0, #11
 8000b4c:	f004 fcd0 	bl	80054f0 <checkTaskflag>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d006      	beq.n	8000b64 <processApp_MQTT+0xf8>
			triggerTaskflag(TASK_SEND_DATACALIB, FLAG_DIS);
 8000b56:	2100      	movs	r1, #0
 8000b58:	200a      	movs	r0, #10
 8000b5a:	f004 fdcb 	bl	80056f4 <triggerTaskflag>
			sendData2Server(DATA_AFTERCALIB);
 8000b5e:	2007      	movs	r0, #7
 8000b60:	f000 ff80 	bl	8001a64 <sendData2Server>
		}

		// Send DATA PERIOD
		if (checkTaskflag(TASK_SEND_DATAPERIOD))	{
 8000b64:	2009      	movs	r0, #9
 8000b66:	f004 fcc3 	bl	80054f0 <checkTaskflag>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d010      	beq.n	8000b92 <processApp_MQTT+0x126>
			if (HAL_GetTick() - ticksend > 2000)	{
 8000b70:	f007 f822 	bl	8007bb8 <HAL_GetTick>
 8000b74:	4602      	mov	r2, r0
 8000b76:	4b7c      	ldr	r3, [pc, #496]	; (8000d68 <processApp_MQTT+0x2fc>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	1ad3      	subs	r3, r2, r3
 8000b7c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000b80:	d907      	bls.n	8000b92 <processApp_MQTT+0x126>
				sendData2Server(DATA_PERIOD);
 8000b82:	2001      	movs	r0, #1
 8000b84:	f000 ff6e 	bl	8001a64 <sendData2Server>
				ticksend = HAL_GetTick();
 8000b88:	f007 f816 	bl	8007bb8 <HAL_GetTick>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	4a76      	ldr	r2, [pc, #472]	; (8000d68 <processApp_MQTT+0x2fc>)
 8000b90:	6013      	str	r3, [r2, #0]
			}

		}
		// Send MBA status
		if (checkTaskflag(TASK_SEND_MBA_STATUS))	{
 8000b92:	2004      	movs	r0, #4
 8000b94:	f004 fcac 	bl	80054f0 <checkTaskflag>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d006      	beq.n	8000bac <processApp_MQTT+0x140>
			sendData2Server(DATA_MBA_STATE);
 8000b9e:	2008      	movs	r0, #8
 8000ba0:	f000 ff60 	bl	8001a64 <sendData2Server>
			triggerTaskflag(TASK_SEND_MBA_STATUS, FLAG_DIS);
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	2004      	movs	r0, #4
 8000ba8:	f004 fda4 	bl	80056f4 <triggerTaskflag>
		}
		// Send step Reach Limit
		if (checkTaskflag(TASK_SEND_STEP_LIMIT))	{
 8000bac:	2005      	movs	r0, #5
 8000bae:	f004 fc9f 	bl	80054f0 <checkTaskflag>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d006      	beq.n	8000bc6 <processApp_MQTT+0x15a>
			sendData2Server(DATA_STEP_REACH_LIMIT);
 8000bb8:	2009      	movs	r0, #9
 8000bba:	f000 ff53 	bl	8001a64 <sendData2Server>
			triggerTaskflag(TASK_SEND_STEP_LIMIT, FLAG_DIS);
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	2005      	movs	r0, #5
 8000bc2:	f004 fd97 	bl	80056f4 <triggerTaskflag>
		}
		// SMS control MBA
		if(checkTaskflag(TASK_SEND_CTRLMBA))	{
 8000bc6:	200c      	movs	r0, #12
 8000bc8:	f004 fc92 	bl	80054f0 <checkTaskflag>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d028      	beq.n	8000c24 <processApp_MQTT+0x1b8>
			if (checkSMSrequest(SMS_CMD_CTRL_ON) )	{
 8000bd2:	2000      	movs	r0, #0
 8000bd4:	f002 fb46 	bl	8003264 <checkSMSrequest>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d00c      	beq.n	8000bf8 <processApp_MQTT+0x18c>
				CMD_SMS_Ctrl_MBA(mySIM.sms.CtrlON.data, mySIM.sms.CtrlON.datalength, MBA_ON);
 8000bde:	4b60      	ldr	r3, [pc, #384]	; (8000d60 <processApp_MQTT+0x2f4>)
 8000be0:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
 8000be4:	2201      	movs	r2, #1
 8000be6:	4619      	mov	r1, r3
 8000be8:	4860      	ldr	r0, [pc, #384]	; (8000d6c <processApp_MQTT+0x300>)
 8000bea:	f001 fb81 	bl	80022f0 <CMD_SMS_Ctrl_MBA>
				triggerSMSrequest(SMS_CMD_CTRL_ON, SMS_CMD_DISABLE);
 8000bee:	2100      	movs	r1, #0
 8000bf0:	2000      	movs	r0, #0
 8000bf2:	f002 fbbf 	bl	8003374 <triggerSMSrequest>
 8000bf6:	e011      	b.n	8000c1c <processApp_MQTT+0x1b0>
			}
			else if (checkSMSrequest(SMS_CMD_CTRL_OFF))	{
 8000bf8:	2001      	movs	r0, #1
 8000bfa:	f002 fb33 	bl	8003264 <checkSMSrequest>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d00b      	beq.n	8000c1c <processApp_MQTT+0x1b0>
				CMD_SMS_Ctrl_MBA(mySIM.sms.CtrlOFF.data, mySIM.sms.CtrlOFF.datalength, MBA_OFF);
 8000c04:	4b56      	ldr	r3, [pc, #344]	; (8000d60 <processApp_MQTT+0x2f4>)
 8000c06:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8000c0a:	2202      	movs	r2, #2
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	4858      	ldr	r0, [pc, #352]	; (8000d70 <processApp_MQTT+0x304>)
 8000c10:	f001 fb6e 	bl	80022f0 <CMD_SMS_Ctrl_MBA>
				triggerSMSrequest(SMS_CMD_CTRL_OFF, SMS_CMD_DISABLE);
 8000c14:	2100      	movs	r1, #0
 8000c16:	2001      	movs	r0, #1
 8000c18:	f002 fbac 	bl	8003374 <triggerSMSrequest>
			}
			triggerTaskflag(TASK_SEND_CTRLMBA, FLAG_DIS);
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	200c      	movs	r0, #12
 8000c20:	f004 fd68 	bl	80056f4 <triggerTaskflag>
		}
		// SMS control step motor
		if(checkTaskflag(TASK_SEND_CTRLSTEPMOR))	{
 8000c24:	200d      	movs	r0, #13
 8000c26:	f004 fc63 	bl	80054f0 <checkTaskflag>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d02c      	beq.n	8000c8a <processApp_MQTT+0x21e>
			if (checkSMSrequest(SMS_CMD_CTRL_INC) )	{
 8000c30:	2003      	movs	r0, #3
 8000c32:	f002 fb17 	bl	8003264 <checkSMSrequest>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d00e      	beq.n	8000c5a <processApp_MQTT+0x1ee>
				CMD_SMS_Ctrl_StepM(mySIM.sms.CtrlINC.data, mySIM.sms.CtrlINC.datalength, STEPM_DIR_INC, STEPM_MODE_STEP, 2);
 8000c3c:	4b48      	ldr	r3, [pc, #288]	; (8000d60 <processApp_MQTT+0x2f4>)
 8000c3e:	f8b3 1488 	ldrh.w	r1, [r3, #1160]	; 0x488
 8000c42:	2302      	movs	r3, #2
 8000c44:	9300      	str	r3, [sp, #0]
 8000c46:	2302      	movs	r3, #2
 8000c48:	2201      	movs	r2, #1
 8000c4a:	484a      	ldr	r0, [pc, #296]	; (8000d74 <processApp_MQTT+0x308>)
 8000c4c:	f001 fb74 	bl	8002338 <CMD_SMS_Ctrl_StepM>
				triggerSMSrequest(SMS_CMD_CTRL_INC, SMS_CMD_DISABLE);
 8000c50:	2100      	movs	r1, #0
 8000c52:	2003      	movs	r0, #3
 8000c54:	f002 fb8e 	bl	8003374 <triggerSMSrequest>
 8000c58:	e013      	b.n	8000c82 <processApp_MQTT+0x216>
			}
			else if (checkSMSrequest(SMS_CMD_CTRL_DEC))	{
 8000c5a:	2004      	movs	r0, #4
 8000c5c:	f002 fb02 	bl	8003264 <checkSMSrequest>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d00d      	beq.n	8000c82 <processApp_MQTT+0x216>
				CMD_SMS_Ctrl_StepM(mySIM.sms.CtrlDEC.data, mySIM.sms.CtrlDEC.datalength, STEPM_DIR_DEC, STEPM_MODE_STEP, 2);
 8000c66:	4b3e      	ldr	r3, [pc, #248]	; (8000d60 <processApp_MQTT+0x2f4>)
 8000c68:	f8b3 159a 	ldrh.w	r1, [r3, #1434]	; 0x59a
 8000c6c:	2302      	movs	r3, #2
 8000c6e:	9300      	str	r3, [sp, #0]
 8000c70:	2302      	movs	r3, #2
 8000c72:	2202      	movs	r2, #2
 8000c74:	4840      	ldr	r0, [pc, #256]	; (8000d78 <processApp_MQTT+0x30c>)
 8000c76:	f001 fb5f 	bl	8002338 <CMD_SMS_Ctrl_StepM>
				triggerSMSrequest(SMS_CMD_CTRL_DEC, SMS_CMD_DISABLE);
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	2004      	movs	r0, #4
 8000c7e:	f002 fb79 	bl	8003374 <triggerSMSrequest>
			}
			triggerTaskflag(TASK_SEND_CTRLSTEPMOR, FLAG_DIS);
 8000c82:	2100      	movs	r1, #0
 8000c84:	200d      	movs	r0, #13
 8000c86:	f004 fd35 	bl	80056f4 <triggerTaskflag>
		}
		// SMS calib
		if(checkTaskflag(TASK_SEND_CALIB))	{
 8000c8a:	200e      	movs	r0, #14
 8000c8c:	f004 fc30 	bl	80054f0 <checkTaskflag>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d00e      	beq.n	8000cb4 <processApp_MQTT+0x248>
			CMD_SMS_calib(mySIM.sms.CtrlCALIB.data, mySIM.sms.CtrlCALIB.datalength);
 8000c96:	4b32      	ldr	r3, [pc, #200]	; (8000d60 <processApp_MQTT+0x2f4>)
 8000c98:	f8b3 3376 	ldrh.w	r3, [r3, #886]	; 0x376
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	4837      	ldr	r0, [pc, #220]	; (8000d7c <processApp_MQTT+0x310>)
 8000ca0:	f001 fae2 	bl	8002268 <CMD_SMS_calib>
			triggerSMSrequest(SMS_CMD_CTRL_CALIB, SMS_CMD_DISABLE);
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	2002      	movs	r0, #2
 8000ca8:	f002 fb64 	bl	8003374 <triggerSMSrequest>
			triggerTaskflag(TASK_SEND_CALIB, FLAG_DIS);
 8000cac:	2100      	movs	r1, #0
 8000cae:	200e      	movs	r0, #14
 8000cb0:	f004 fd20 	bl	80056f4 <triggerTaskflag>
		}
		// SMS get status
		if(checkTaskflag(TASK_SEND_GETSTATUS))	{
 8000cb4:	200f      	movs	r0, #15
 8000cb6:	f004 fc1b 	bl	80054f0 <checkTaskflag>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d00e      	beq.n	8000cde <processApp_MQTT+0x272>
			CMD_SMS_getStatus(mySIM.sms.GetStatus.data, mySIM.sms.GetStatus.datalength);
 8000cc0:	4b27      	ldr	r3, [pc, #156]	; (8000d60 <processApp_MQTT+0x2f4>)
 8000cc2:	f8b3 36ac 	ldrh.w	r3, [r3, #1708]	; 0x6ac
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	482d      	ldr	r0, [pc, #180]	; (8000d80 <processApp_MQTT+0x314>)
 8000cca:	f001 faef 	bl	80022ac <CMD_SMS_getStatus>
			triggerSMSrequest(SMS_CMD_GET_STATUS, SMS_CMD_DISABLE);
 8000cce:	2100      	movs	r1, #0
 8000cd0:	2005      	movs	r0, #5
 8000cd2:	f002 fb4f 	bl	8003374 <triggerSMSrequest>
			triggerTaskflag(TASK_SEND_GETSTATUS, FLAG_DIS);
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	200f      	movs	r0, #15
 8000cda:	f004 fd0b 	bl	80056f4 <triggerTaskflag>
		}
		//SMS get station latest data
		if(checkTaskflag(TASK_SEND_GETSTATION))	{
 8000cde:	2010      	movs	r0, #16
 8000ce0:	f004 fc06 	bl	80054f0 <checkTaskflag>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d00e      	beq.n	8000d08 <processApp_MQTT+0x29c>
			CMD_SMS_getStationLatestData(mySIM.sms.GetStation.data, mySIM.sms.GetStation.datalength);
 8000cea:	4b1d      	ldr	r3, [pc, #116]	; (8000d60 <processApp_MQTT+0x2f4>)
 8000cec:	f8b3 38d0 	ldrh.w	r3, [r3, #2256]	; 0x8d0
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	4824      	ldr	r0, [pc, #144]	; (8000d84 <processApp_MQTT+0x318>)
 8000cf4:	f001 fb48 	bl	8002388 <CMD_SMS_getStationLatestData>
			triggerSMSrequest(SMS_CMD_GET_STATION, SMS_CMD_DISABLE);
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	2007      	movs	r0, #7
 8000cfc:	f002 fb3a 	bl	8003374 <triggerSMSrequest>
			triggerTaskflag(TASK_SEND_GETSTATION, FLAG_DIS);
 8000d00:	2100      	movs	r1, #0
 8000d02:	2010      	movs	r0, #16
 8000d04:	f004 fcf6 	bl	80056f4 <triggerTaskflag>
		}
		// SMS get sensor lastest data
		if(checkTaskflag(TASK_SEND_GETSENSOR))	{
 8000d08:	2011      	movs	r0, #17
 8000d0a:	f004 fbf1 	bl	80054f0 <checkTaskflag>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d00e      	beq.n	8000d32 <processApp_MQTT+0x2c6>
			CMD_SMS_getSensorLatestData(mySIM.sms.GetSensor.data, mySIM.sms.GetSensor.datalength);
 8000d14:	4b12      	ldr	r3, [pc, #72]	; (8000d60 <processApp_MQTT+0x2f4>)
 8000d16:	f8b3 37be 	ldrh.w	r3, [r3, #1982]	; 0x7be
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	481a      	ldr	r0, [pc, #104]	; (8000d88 <processApp_MQTT+0x31c>)
 8000d1e:	f001 fb55 	bl	80023cc <CMD_SMS_getSensorLatestData>
			triggerSMSrequest(SMS_CMD_GET_SENSOR, SMS_CMD_DISABLE);
 8000d22:	2100      	movs	r1, #0
 8000d24:	2006      	movs	r0, #6
 8000d26:	f002 fb25 	bl	8003374 <triggerSMSrequest>
			triggerTaskflag(TASK_SEND_GETSENSOR, FLAG_DIS);
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	2011      	movs	r0, #17
 8000d2e:	f004 fce1 	bl	80056f4 <triggerTaskflag>
		}
	}
	// Processing new coming MQTT message
	if ( mySIM.mqttReceive.newEvent == 1)
 8000d32:	4b0b      	ldr	r3, [pc, #44]	; (8000d60 <processApp_MQTT+0x2f4>)
 8000d34:	7e1b      	ldrb	r3, [r3, #24]
 8000d36:	2b01      	cmp	r3, #1
 8000d38:	d10b      	bne.n	8000d52 <processApp_MQTT+0x2e6>
	{
		mySIM.mqttReceive.newEvent = 0;
 8000d3a:	4b09      	ldr	r3, [pc, #36]	; (8000d60 <processApp_MQTT+0x2f4>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	761a      	strb	r2, [r3, #24]
		// call process Server message function
		processingComingMsg(mySIM.mqttReceive.payload, mySIM.mqttReceive.payloadLen,
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <processApp_MQTT+0x2f4>)
 8000d42:	f8b3 3124 	ldrh.w	r3, [r3, #292]	; 0x124
 8000d46:	4a11      	ldr	r2, [pc, #68]	; (8000d8c <processApp_MQTT+0x320>)
 8000d48:	7852      	ldrb	r2, [r2, #1]
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	4810      	ldr	r0, [pc, #64]	; (8000d90 <processApp_MQTT+0x324>)
 8000d4e:	f001 f917 	bl	8001f80 <processingComingMsg>
				myStation.stID );
	}
}
 8000d52:	bf00      	nop
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	200005e4 	.word	0x200005e4
 8000d5c:	0800eb28 	.word	0x0800eb28
 8000d60:	20001770 	.word	0x20001770
 8000d64:	200005e8 	.word	0x200005e8
 8000d68:	200005ec 	.word	0x200005ec
 8000d6c:	200018c4 	.word	0x200018c4
 8000d70:	200019d6 	.word	0x200019d6
 8000d74:	20001bfa 	.word	0x20001bfa
 8000d78:	20001d0c 	.word	0x20001d0c
 8000d7c:	20001ae8 	.word	0x20001ae8
 8000d80:	20001e1e 	.word	0x20001e1e
 8000d84:	20002042 	.word	0x20002042
 8000d88:	20001f30 	.word	0x20001f30
 8000d8c:	20000474 	.word	0x20000474
 8000d90:	20001794 	.word	0x20001794

08000d94 <initApp_SMS>:
#include "Task.h"

static SMS_t *__MY_SMS;

void initApp_SMS(SMS_t *mySMS)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b083      	sub	sp, #12
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
	__MY_SMS = mySMS;
 8000d9c:	4a03      	ldr	r2, [pc, #12]	; (8000dac <initApp_SMS+0x18>)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	6013      	str	r3, [r2, #0]
}
 8000da2:	bf00      	nop
 8000da4:	370c      	adds	r7, #12
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bc80      	pop	{r7}
 8000daa:	4770      	bx	lr
 8000dac:	200005f0 	.word	0x200005f0

08000db0 <SMSreturn>:

uint8_t SMSreturn (SMS_CMD_t smsCMD)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b084      	sub	sp, #16
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	4603      	mov	r3, r0
 8000db8:	71fb      	strb	r3, [r7, #7]
	SMS_request_t *tmpSMScmd;
	switch (smsCMD) 	{
 8000dba:	79fb      	ldrb	r3, [r7, #7]
 8000dbc:	2b07      	cmp	r3, #7
 8000dbe:	d841      	bhi.n	8000e44 <SMSreturn+0x94>
 8000dc0:	a201      	add	r2, pc, #4	; (adr r2, 8000dc8 <SMSreturn+0x18>)
 8000dc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dc6:	bf00      	nop
 8000dc8:	08000de9 	.word	0x08000de9
 8000dcc:	08000df1 	.word	0x08000df1
 8000dd0:	08000e15 	.word	0x08000e15
 8000dd4:	08000dfd 	.word	0x08000dfd
 8000dd8:	08000e09 	.word	0x08000e09
 8000ddc:	08000e21 	.word	0x08000e21
 8000de0:	08000e39 	.word	0x08000e39
 8000de4:	08000e2d 	.word	0x08000e2d
	case SMS_CMD_CTRL_ON:
		tmpSMScmd = &__MY_SMS->CtrlON;
 8000de8:	4b21      	ldr	r3, [pc, #132]	; (8000e70 <SMSreturn+0xc0>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	60fb      	str	r3, [r7, #12]
		break;
 8000dee:	e02a      	b.n	8000e46 <SMSreturn+0x96>
	case SMS_CMD_CTRL_OFF:
		tmpSMScmd = &__MY_SMS->CtrlOFF;
 8000df0:	4b1f      	ldr	r3, [pc, #124]	; (8000e70 <SMSreturn+0xc0>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f503 7389 	add.w	r3, r3, #274	; 0x112
 8000df8:	60fb      	str	r3, [r7, #12]
		break;
 8000dfa:	e024      	b.n	8000e46 <SMSreturn+0x96>
	case SMS_CMD_CTRL_INC:
		tmpSMScmd = &__MY_SMS->CtrlINC;
 8000dfc:	4b1c      	ldr	r3, [pc, #112]	; (8000e70 <SMSreturn+0xc0>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	f203 3336 	addw	r3, r3, #822	; 0x336
 8000e04:	60fb      	str	r3, [r7, #12]
		break;
 8000e06:	e01e      	b.n	8000e46 <SMSreturn+0x96>
	case SMS_CMD_CTRL_DEC:
		tmpSMScmd = &__MY_SMS->CtrlDEC;
 8000e08:	4b19      	ldr	r3, [pc, #100]	; (8000e70 <SMSreturn+0xc0>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f503 6389 	add.w	r3, r3, #1096	; 0x448
 8000e10:	60fb      	str	r3, [r7, #12]
		break;
 8000e12:	e018      	b.n	8000e46 <SMSreturn+0x96>
	case SMS_CMD_CTRL_CALIB:
		tmpSMScmd = &__MY_SMS->CtrlCALIB;
 8000e14:	4b16      	ldr	r3, [pc, #88]	; (8000e70 <SMSreturn+0xc0>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f503 7309 	add.w	r3, r3, #548	; 0x224
 8000e1c:	60fb      	str	r3, [r7, #12]
		break;
 8000e1e:	e012      	b.n	8000e46 <SMSreturn+0x96>
	case SMS_CMD_GET_STATUS:
		tmpSMScmd = &__MY_SMS->GetStatus;
 8000e20:	4b13      	ldr	r3, [pc, #76]	; (8000e70 <SMSreturn+0xc0>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f203 535a 	addw	r3, r3, #1370	; 0x55a
 8000e28:	60fb      	str	r3, [r7, #12]
		break;
 8000e2a:	e00c      	b.n	8000e46 <SMSreturn+0x96>
	case SMS_CMD_GET_STATION:
		tmpSMScmd = &__MY_SMS->GetStation;
 8000e2c:	4b10      	ldr	r3, [pc, #64]	; (8000e70 <SMSreturn+0xc0>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	f203 737e 	addw	r3, r3, #1918	; 0x77e
 8000e34:	60fb      	str	r3, [r7, #12]
		break;
 8000e36:	e006      	b.n	8000e46 <SMSreturn+0x96>
	case SMS_CMD_GET_SENSOR:
		tmpSMScmd = &__MY_SMS->GetSensor;
 8000e38:	4b0d      	ldr	r3, [pc, #52]	; (8000e70 <SMSreturn+0xc0>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f203 636c 	addw	r3, r3, #1644	; 0x66c
 8000e40:	60fb      	str	r3, [r7, #12]
		break;
 8000e42:	e000      	b.n	8000e46 <SMSreturn+0x96>
	default:
		break;
 8000e44:	bf00      	nop
	}
	if (tmpSMScmd == NULL) 	return 0;
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d101      	bne.n	8000e50 <SMSreturn+0xa0>
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	e00a      	b.n	8000e66 <SMSreturn+0xb6>
	SMS_sendMsg(tmpSMScmd->data, tmpSMScmd->datalength, tmpSMScmd->phonenumb);
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	1d18      	adds	r0, r3, #4
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	8859      	ldrh	r1, [r3, #2]
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8000e5e:	461a      	mov	r2, r3
 8000e60:	f002 fc46 	bl	80036f0 <SMS_sendMsg>
	return 1;
 8000e64:	2301      	movs	r3, #1
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	3710      	adds	r7, #16
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	200005f0 	.word	0x200005f0

08000e74 <processApp_SMS>:
void processApp_SMS(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
	processingSMS();
 8000e78:	f002 f94c 	bl	8003114 <processingSMS>
	// check for new SMS request
	if (checkSMSrequest(SMS_CMD_CTRL_ON) || checkSMSrequest(SMS_CMD_CTRL_OFF) )	{
 8000e7c:	2000      	movs	r0, #0
 8000e7e:	f002 f9f1 	bl	8003264 <checkSMSrequest>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d105      	bne.n	8000e94 <processApp_SMS+0x20>
 8000e88:	2001      	movs	r0, #1
 8000e8a:	f002 f9eb 	bl	8003264 <checkSMSrequest>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d003      	beq.n	8000e9c <processApp_SMS+0x28>
		triggerTaskflag(TASK_SEND_CTRLMBA, FLAG_EN);
 8000e94:	2101      	movs	r1, #1
 8000e96:	200c      	movs	r0, #12
 8000e98:	f004 fc2c 	bl	80056f4 <triggerTaskflag>
	}
	if (checkSMSrequest(SMS_CMD_CTRL_INC) || checkSMSrequest(SMS_CMD_CTRL_DEC) ) {
 8000e9c:	2003      	movs	r0, #3
 8000e9e:	f002 f9e1 	bl	8003264 <checkSMSrequest>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d105      	bne.n	8000eb4 <processApp_SMS+0x40>
 8000ea8:	2004      	movs	r0, #4
 8000eaa:	f002 f9db 	bl	8003264 <checkSMSrequest>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d003      	beq.n	8000ebc <processApp_SMS+0x48>
		triggerTaskflag(TASK_SEND_CTRLSTEPMOR, FLAG_EN);
 8000eb4:	2101      	movs	r1, #1
 8000eb6:	200d      	movs	r0, #13
 8000eb8:	f004 fc1c 	bl	80056f4 <triggerTaskflag>
	}
	if (checkSMSrequest(SMS_CMD_CTRL_CALIB))	{
 8000ebc:	2002      	movs	r0, #2
 8000ebe:	f002 f9d1 	bl	8003264 <checkSMSrequest>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d003      	beq.n	8000ed0 <processApp_SMS+0x5c>
		triggerTaskflag(TASK_SEND_CALIB, FLAG_EN);
 8000ec8:	2101      	movs	r1, #1
 8000eca:	200e      	movs	r0, #14
 8000ecc:	f004 fc12 	bl	80056f4 <triggerTaskflag>
	}
	if (checkSMSrequest(SMS_CMD_GET_STATUS))	{
 8000ed0:	2005      	movs	r0, #5
 8000ed2:	f002 f9c7 	bl	8003264 <checkSMSrequest>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d003      	beq.n	8000ee4 <processApp_SMS+0x70>
		triggerTaskflag(TASK_SEND_GETSTATUS, FLAG_EN);
 8000edc:	2101      	movs	r1, #1
 8000ede:	200f      	movs	r0, #15
 8000ee0:	f004 fc08 	bl	80056f4 <triggerTaskflag>
	}
	if (checkSMSrequest(SMS_CMD_GET_STATION))	{
 8000ee4:	2007      	movs	r0, #7
 8000ee6:	f002 f9bd 	bl	8003264 <checkSMSrequest>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d003      	beq.n	8000ef8 <processApp_SMS+0x84>
		triggerTaskflag(TASK_SEND_GETSTATION, FLAG_EN);
 8000ef0:	2101      	movs	r1, #1
 8000ef2:	2010      	movs	r0, #16
 8000ef4:	f004 fbfe 	bl	80056f4 <triggerTaskflag>
	}
	if (checkSMSrequest(SMS_CMD_GET_SENSOR))	{
 8000ef8:	2006      	movs	r0, #6
 8000efa:	f002 f9b3 	bl	8003264 <checkSMSrequest>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d003      	beq.n	8000f0c <processApp_SMS+0x98>
		triggerTaskflag(TASK_SEND_GETSENSOR, FLAG_EN);
 8000f04:	2101      	movs	r1, #1
 8000f06:	2011      	movs	r0, #17
 8000f08:	f004 fbf4 	bl	80056f4 <triggerTaskflag>
	}
// Check for return SMS
	if (checkSMSreturn(SMS_CMD_CTRL_ON))	{
 8000f0c:	2000      	movs	r0, #0
 8000f0e:	f002 fab7 	bl	8003480 <checkSMSreturn>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d006      	beq.n	8000f26 <processApp_SMS+0xb2>
		SMSreturn(SMS_CMD_CTRL_ON);
 8000f18:	2000      	movs	r0, #0
 8000f1a:	f7ff ff49 	bl	8000db0 <SMSreturn>
		triggerSMSreturn(SMS_CMD_CTRL_ON, SMS_CMD_DISABLE);
 8000f1e:	2100      	movs	r1, #0
 8000f20:	2000      	movs	r0, #0
 8000f22:	f002 fb35 	bl	8003590 <triggerSMSreturn>
//		SMSreturn(SMS_CMD_CTRL_OFF);
//	}
//	if (checkSMSreturn(SMS_CMD_CTRL_INC))	{
//		SMSreturn(SMS_CMD_CTRL_INC);
//	}
	if (checkSMSreturn(SMS_CMD_CTRL_DEC))	{
 8000f26:	2004      	movs	r0, #4
 8000f28:	f002 faaa 	bl	8003480 <checkSMSreturn>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d006      	beq.n	8000f40 <processApp_SMS+0xcc>
		SMSreturn(SMS_CMD_CTRL_DEC);
 8000f32:	2004      	movs	r0, #4
 8000f34:	f7ff ff3c 	bl	8000db0 <SMSreturn>
		triggerSMSreturn(SMS_CMD_CTRL_DEC, SMS_CMD_DISABLE);
 8000f38:	2100      	movs	r1, #0
 8000f3a:	2004      	movs	r0, #4
 8000f3c:	f002 fb28 	bl	8003590 <triggerSMSreturn>
	}
//	if (checkSMSreturn(SMS_CMD_CTRL_CALIB))	{
//		SMSreturn(SMS_CMD_CTRL_CALIB);
//	}
	if (checkSMSreturn(SMS_CMD_GET_STATUS))	{
 8000f40:	2005      	movs	r0, #5
 8000f42:	f002 fa9d 	bl	8003480 <checkSMSreturn>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d006      	beq.n	8000f5a <processApp_SMS+0xe6>
		SMSreturn(SMS_CMD_GET_STATUS);
 8000f4c:	2005      	movs	r0, #5
 8000f4e:	f7ff ff2f 	bl	8000db0 <SMSreturn>
		triggerSMSreturn(SMS_CMD_GET_STATUS, SMS_CMD_DISABLE);
 8000f52:	2100      	movs	r1, #0
 8000f54:	2005      	movs	r0, #5
 8000f56:	f002 fb1b 	bl	8003590 <triggerSMSreturn>
	}
	if (checkSMSreturn(SMS_CMD_GET_STATION))	{
 8000f5a:	2007      	movs	r0, #7
 8000f5c:	f002 fa90 	bl	8003480 <checkSMSreturn>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d006      	beq.n	8000f74 <processApp_SMS+0x100>
		SMSreturn(SMS_CMD_GET_STATION);
 8000f66:	2007      	movs	r0, #7
 8000f68:	f7ff ff22 	bl	8000db0 <SMSreturn>
		triggerSMSreturn(SMS_CMD_GET_STATION, SMS_CMD_DISABLE);
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	2007      	movs	r0, #7
 8000f70:	f002 fb0e 	bl	8003590 <triggerSMSreturn>
	}
	if (checkSMSreturn(SMS_CMD_GET_SENSOR))	{
 8000f74:	2006      	movs	r0, #6
 8000f76:	f002 fa83 	bl	8003480 <checkSMSreturn>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d006      	beq.n	8000f8e <processApp_SMS+0x11a>
		SMSreturn(SMS_CMD_GET_SENSOR);
 8000f80:	2006      	movs	r0, #6
 8000f82:	f7ff ff15 	bl	8000db0 <SMSreturn>
		triggerSMSreturn(SMS_CMD_GET_SENSOR, SMS_CMD_DISABLE);
 8000f86:	2100      	movs	r1, #0
 8000f88:	2006      	movs	r0, #6
 8000f8a:	f002 fb01 	bl	8003590 <triggerSMSreturn>
	}
}
 8000f8e:	bf00      	nop
 8000f90:	bd80      	pop	{r7, pc}

08000f92 <initSerial_CFG>:
_RTC *__MY_RTC;

uint8_t alarmflag = 0;

void initSerial_CFG()
{
 8000f92:	b580      	push	{r7, lr}
 8000f94:	af00      	add	r7, sp, #0
//	__SCFG_UART = huart;
//	__SCFG_DMA_UART = hdma;
	enableReceiveDMAtoIdle_CFG();
 8000f96:	f000 f811 	bl	8000fbc <enableReceiveDMAtoIdle_CFG>
}
 8000f9a:	bf00      	nop
 8000f9c:	bd80      	pop	{r7, pc}
	...

08000fa0 <initGPS>:

void initGPS(_RTC *rtc)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
//	myStation = station;
	__MY_RTC = rtc;
 8000fa8:	4a03      	ldr	r2, [pc, #12]	; (8000fb8 <initGPS+0x18>)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6013      	str	r3, [r2, #0]
}
 8000fae:	bf00      	nop
 8000fb0:	370c      	adds	r7, #12
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bc80      	pop	{r7}
 8000fb6:	4770      	bx	lr
 8000fb8:	20000d00 	.word	0x20000d00

08000fbc <enableReceiveDMAtoIdle_CFG>:

void enableReceiveDMAtoIdle_CFG(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
	  HAL_UARTEx_ReceiveToIdle_DMA(__SCFG_UART, Rxbuff_CFG, Rx_SIZE_CFG);
 8000fc0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fc4:	4906      	ldr	r1, [pc, #24]	; (8000fe0 <enableReceiveDMAtoIdle_CFG+0x24>)
 8000fc6:	4807      	ldr	r0, [pc, #28]	; (8000fe4 <enableReceiveDMAtoIdle_CFG+0x28>)
 8000fc8:	f009 ffef 	bl	800afaa <HAL_UARTEx_ReceiveToIdle_DMA>
	  __HAL_DMA_DISABLE_IT(__SCFG_DMA_UART,DMA_IT_HT);
 8000fcc:	4b06      	ldr	r3, [pc, #24]	; (8000fe8 <enableReceiveDMAtoIdle_CFG+0x2c>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	681a      	ldr	r2, [r3, #0]
 8000fd2:	4b05      	ldr	r3, [pc, #20]	; (8000fe8 <enableReceiveDMAtoIdle_CFG+0x2c>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f022 0204 	bic.w	r2, r2, #4
 8000fda:	601a      	str	r2, [r3, #0]
}
 8000fdc:	bf00      	nop
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	200005f4 	.word	0x200005f4
 8000fe4:	20002aa0 	.word	0x20002aa0
 8000fe8:	20002b74 	.word	0x20002b74

08000fec <Serial_CFG_Callback>:
void Serial_CFG_Callback(uint16_t Size)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	80fb      	strh	r3, [r7, #6]

	oldPos_CFG = newPos_CFG;  // Update the last position before copying new data
 8000ff6:	4b43      	ldr	r3, [pc, #268]	; (8001104 <Serial_CFG_Callback+0x118>)
 8000ff8:	881a      	ldrh	r2, [r3, #0]
 8000ffa:	4b43      	ldr	r3, [pc, #268]	; (8001108 <Serial_CFG_Callback+0x11c>)
 8000ffc:	801a      	strh	r2, [r3, #0]

	/* If the data in large and it is about to exceed the buffer size, we have to route it to the start of the buffer
	 * This is to maintain the circular buffer
	 * The old data in the main buffer will be overlapped
	 */
	if (oldPos_CFG+Size > Main_SIZE_CFG)  // If the current position + new data size is greater than the main buffer
 8000ffe:	4b42      	ldr	r3, [pc, #264]	; (8001108 <Serial_CFG_Callback+0x11c>)
 8001000:	881b      	ldrh	r3, [r3, #0]
 8001002:	461a      	mov	r2, r3
 8001004:	88fb      	ldrh	r3, [r7, #6]
 8001006:	4413      	add	r3, r2
 8001008:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800100c:	dd23      	ble.n	8001056 <Serial_CFG_Callback+0x6a>
	{
		uint8_t datatocopy = Main_SIZE_CFG-oldPos_CFG;  // find out how much space is left in the main buffer
 800100e:	4b3e      	ldr	r3, [pc, #248]	; (8001108 <Serial_CFG_Callback+0x11c>)
 8001010:	881b      	ldrh	r3, [r3, #0]
 8001012:	b2db      	uxtb	r3, r3
 8001014:	425b      	negs	r3, r3
 8001016:	73fb      	strb	r3, [r7, #15]
		memcpy ((uint8_t *)Mainbuff_CFG+oldPos_CFG, (uint8_t *)Rxbuff_CFG, datatocopy);  // copy data in that remaining space
 8001018:	4b3b      	ldr	r3, [pc, #236]	; (8001108 <Serial_CFG_Callback+0x11c>)
 800101a:	881b      	ldrh	r3, [r3, #0]
 800101c:	461a      	mov	r2, r3
 800101e:	4b3b      	ldr	r3, [pc, #236]	; (800110c <Serial_CFG_Callback+0x120>)
 8001020:	4413      	add	r3, r2
 8001022:	7bfa      	ldrb	r2, [r7, #15]
 8001024:	493a      	ldr	r1, [pc, #232]	; (8001110 <Serial_CFG_Callback+0x124>)
 8001026:	4618      	mov	r0, r3
 8001028:	f00b f886 	bl	800c138 <memcpy>

		oldPos_CFG = 0;  // point to the start of the buffer
 800102c:	4b36      	ldr	r3, [pc, #216]	; (8001108 <Serial_CFG_Callback+0x11c>)
 800102e:	2200      	movs	r2, #0
 8001030:	801a      	strh	r2, [r3, #0]
		memcpy ((uint8_t *)Mainbuff_CFG, (uint8_t *)Rxbuff_CFG+datatocopy, (Size-datatocopy));  // copy the remaining data
 8001032:	7bfb      	ldrb	r3, [r7, #15]
 8001034:	4a36      	ldr	r2, [pc, #216]	; (8001110 <Serial_CFG_Callback+0x124>)
 8001036:	1899      	adds	r1, r3, r2
 8001038:	88fa      	ldrh	r2, [r7, #6]
 800103a:	7bfb      	ldrb	r3, [r7, #15]
 800103c:	1ad3      	subs	r3, r2, r3
 800103e:	461a      	mov	r2, r3
 8001040:	4832      	ldr	r0, [pc, #200]	; (800110c <Serial_CFG_Callback+0x120>)
 8001042:	f00b f879 	bl	800c138 <memcpy>
		newPos_CFG = (Size-datatocopy);  // update the position
 8001046:	7bfb      	ldrb	r3, [r7, #15]
 8001048:	b29b      	uxth	r3, r3
 800104a:	88fa      	ldrh	r2, [r7, #6]
 800104c:	1ad3      	subs	r3, r2, r3
 800104e:	b29a      	uxth	r2, r3
 8001050:	4b2c      	ldr	r3, [pc, #176]	; (8001104 <Serial_CFG_Callback+0x118>)
 8001052:	801a      	strh	r2, [r3, #0]
 8001054:	e010      	b.n	8001078 <Serial_CFG_Callback+0x8c>
	/* if the current position + new data size is less than the main buffer
	 * we will simply copy the data into the buffer and update the position
	 */
	else
	{
		memcpy ((uint8_t *)Mainbuff_CFG+oldPos_CFG, (uint8_t *)Rxbuff_CFG, Size);
 8001056:	4b2c      	ldr	r3, [pc, #176]	; (8001108 <Serial_CFG_Callback+0x11c>)
 8001058:	881b      	ldrh	r3, [r3, #0]
 800105a:	461a      	mov	r2, r3
 800105c:	4b2b      	ldr	r3, [pc, #172]	; (800110c <Serial_CFG_Callback+0x120>)
 800105e:	4413      	add	r3, r2
 8001060:	88fa      	ldrh	r2, [r7, #6]
 8001062:	492b      	ldr	r1, [pc, #172]	; (8001110 <Serial_CFG_Callback+0x124>)
 8001064:	4618      	mov	r0, r3
 8001066:	f00b f867 	bl	800c138 <memcpy>
		newPos_CFG = Size+oldPos_CFG;
 800106a:	4b27      	ldr	r3, [pc, #156]	; (8001108 <Serial_CFG_Callback+0x11c>)
 800106c:	881a      	ldrh	r2, [r3, #0]
 800106e:	88fb      	ldrh	r3, [r7, #6]
 8001070:	4413      	add	r3, r2
 8001072:	b29a      	uxth	r2, r3
 8001074:	4b23      	ldr	r3, [pc, #140]	; (8001104 <Serial_CFG_Callback+0x118>)
 8001076:	801a      	strh	r2, [r3, #0]

	/* Update the position of the Head
	 * If the current position + new size is less then the buffer size, Head will update normally
	 * Or else the head will be at the new position from the beginning
	 */
	if (head_CFG+Size < Main_SIZE_CFG) head_CFG = head_CFG+Size;
 8001078:	4b26      	ldr	r3, [pc, #152]	; (8001114 <Serial_CFG_Callback+0x128>)
 800107a:	881b      	ldrh	r3, [r3, #0]
 800107c:	461a      	mov	r2, r3
 800107e:	88fb      	ldrh	r3, [r7, #6]
 8001080:	4413      	add	r3, r2
 8001082:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001086:	da07      	bge.n	8001098 <Serial_CFG_Callback+0xac>
 8001088:	4b22      	ldr	r3, [pc, #136]	; (8001114 <Serial_CFG_Callback+0x128>)
 800108a:	881a      	ldrh	r2, [r3, #0]
 800108c:	88fb      	ldrh	r3, [r7, #6]
 800108e:	4413      	add	r3, r2
 8001090:	b29a      	uxth	r2, r3
 8001092:	4b20      	ldr	r3, [pc, #128]	; (8001114 <Serial_CFG_Callback+0x128>)
 8001094:	801a      	strh	r2, [r3, #0]
 8001096:	e009      	b.n	80010ac <Serial_CFG_Callback+0xc0>
	else head_CFG = head_CFG + Size - Main_SIZE_CFG;
 8001098:	4b1e      	ldr	r3, [pc, #120]	; (8001114 <Serial_CFG_Callback+0x128>)
 800109a:	881a      	ldrh	r2, [r3, #0]
 800109c:	88fb      	ldrh	r3, [r7, #6]
 800109e:	4413      	add	r3, r2
 80010a0:	b29b      	uxth	r3, r3
 80010a2:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80010a6:	b29a      	uxth	r2, r3
 80010a8:	4b1a      	ldr	r3, [pc, #104]	; (8001114 <Serial_CFG_Callback+0x128>)
 80010aa:	801a      	strh	r2, [r3, #0]

	if ( checkTaskflag(TASK_GET_GPS_TIME) )	{
 80010ac:	2007      	movs	r0, #7
 80010ae:	f004 fa1f 	bl	80054f0 <checkTaskflag>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d013      	beq.n	80010e0 <Serial_CFG_Callback+0xf4>
		memset(GPS_rxbuffer, 0, GPS_RXBUFF_MAXLEN);
 80010b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010bc:	2100      	movs	r1, #0
 80010be:	4816      	ldr	r0, [pc, #88]	; (8001118 <Serial_CFG_Callback+0x12c>)
 80010c0:	f00b f848 	bl	800c154 <memset>
		memcpy(GPS_rxbuffer, Rxbuff_CFG, Size);
 80010c4:	88fb      	ldrh	r3, [r7, #6]
 80010c6:	461a      	mov	r2, r3
 80010c8:	4911      	ldr	r1, [pc, #68]	; (8001110 <Serial_CFG_Callback+0x124>)
 80010ca:	4813      	ldr	r0, [pc, #76]	; (8001118 <Serial_CFG_Callback+0x12c>)
 80010cc:	f00b f834 	bl	800c138 <memcpy>
		GPS_size = Size;
 80010d0:	4a12      	ldr	r2, [pc, #72]	; (800111c <Serial_CFG_Callback+0x130>)
 80010d2:	88fb      	ldrh	r3, [r7, #6]
 80010d4:	8013      	strh	r3, [r2, #0]
		getGPS_time(__MY_RTC);
 80010d6:	4b12      	ldr	r3, [pc, #72]	; (8001120 <Serial_CFG_Callback+0x134>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4618      	mov	r0, r3
 80010dc:	f000 f826 	bl	800112c <getGPS_time>
	}

	enableReceiveDMAtoIdle_CFG();
 80010e0:	f7ff ff6c 	bl	8000fbc <enableReceiveDMAtoIdle_CFG>
	/*
	 * Processing data
	 */

	if (isWordinBuff(Rxbuff_CFG, Size, (uint8_t*)"MCFG+")) {
 80010e4:	88fb      	ldrh	r3, [r7, #6]
 80010e6:	4a0f      	ldr	r2, [pc, #60]	; (8001124 <Serial_CFG_Callback+0x138>)
 80010e8:	4619      	mov	r1, r3
 80010ea:	4809      	ldr	r0, [pc, #36]	; (8001110 <Serial_CFG_Callback+0x124>)
 80010ec:	f004 f8fa 	bl	80052e4 <isWordinBuff>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d002      	beq.n	80010fc <Serial_CFG_Callback+0x110>
		isSerialConfig = 1;
 80010f6:	4b0c      	ldr	r3, [pc, #48]	; (8001128 <Serial_CFG_Callback+0x13c>)
 80010f8:	2201      	movs	r2, #1
 80010fa:	701a      	strb	r2, [r3, #0]
	}
}
 80010fc:	bf00      	nop
 80010fe:	3710      	adds	r7, #16
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	20000cf6 	.word	0x20000cf6
 8001108:	20000cf4 	.word	0x20000cf4
 800110c:	200006f4 	.word	0x200006f4
 8001110:	200005f4 	.word	0x200005f4
 8001114:	20000cf8 	.word	0x20000cf8
 8001118:	20000af4 	.word	0x20000af4
 800111c:	20000cfa 	.word	0x20000cfa
 8001120:	20000d00 	.word	0x20000d00
 8001124:	0800eb3c 	.word	0x0800eb3c
 8001128:	20000cfc 	.word	0x20000cfc

0800112c <getGPS_time>:
{
	tail_CFG = head_CFG;
}

uint8_t getGPS_time(_RTC *myRTC)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b08c      	sub	sp, #48	; 0x30
 8001130:	af02      	add	r7, sp, #8
 8001132:	6078      	str	r0, [r7, #4]
//	if (__MY_GPS->getFlag) return 0;
	if ( !DS3231_GetTime(myRTC) )		return 0;
 8001134:	6878      	ldr	r0, [r7, #4]
 8001136:	f002 ffb5 	bl	80040a4 <DS3231_GetTime>
 800113a:	4603      	mov	r3, r0
 800113c:	f083 0301 	eor.w	r3, r3, #1
 8001140:	b2db      	uxtb	r3, r3
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <getGPS_time+0x1e>
 8001146:	2300      	movs	r3, #0
 8001148:	e065      	b.n	8001216 <getGPS_time+0xea>
	uint16_t gpslen = GPS_size;
 800114a:	4b35      	ldr	r3, [pc, #212]	; (8001220 <getGPS_time+0xf4>)
 800114c:	881b      	ldrh	r3, [r3, #0]
 800114e:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint8_t *currPos = isWordinBuff(GPS_rxbuffer, gpslen, (uint8_t*)"$GPRMC");
 8001150:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001152:	4a34      	ldr	r2, [pc, #208]	; (8001224 <getGPS_time+0xf8>)
 8001154:	4619      	mov	r1, r3
 8001156:	4834      	ldr	r0, [pc, #208]	; (8001228 <getGPS_time+0xfc>)
 8001158:	f004 f8c4 	bl	80052e4 <isWordinBuff>
 800115c:	6238      	str	r0, [r7, #32]
	if ( currPos == NULL )	{
 800115e:	6a3b      	ldr	r3, [r7, #32]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d101      	bne.n	8001168 <getGPS_time+0x3c>
		return 0;
 8001164:	2300      	movs	r3, #0
 8001166:	e056      	b.n	8001216 <getGPS_time+0xea>
	}
	uint16_t remainlen = getRemainsize(currPos, GPS_rxbuffer, gpslen);
 8001168:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800116a:	461a      	mov	r2, r3
 800116c:	492e      	ldr	r1, [pc, #184]	; (8001228 <getGPS_time+0xfc>)
 800116e:	6a38      	ldr	r0, [r7, #32]
 8001170:	f004 f937 	bl	80053e2 <getRemainsize>
 8001174:	4603      	mov	r3, r0
 8001176:	83fb      	strh	r3, [r7, #30]
	// Get time to buffer
	uint8_t timebuffer [10];
	if ( getBetween((uint8_t*)",", (uint8_t*)".", currPos, remainlen, timebuffer) != 6 )	{
 8001178:	8bfa      	ldrh	r2, [r7, #30]
 800117a:	f107 0314 	add.w	r3, r7, #20
 800117e:	9300      	str	r3, [sp, #0]
 8001180:	4613      	mov	r3, r2
 8001182:	6a3a      	ldr	r2, [r7, #32]
 8001184:	4929      	ldr	r1, [pc, #164]	; (800122c <getGPS_time+0x100>)
 8001186:	482a      	ldr	r0, [pc, #168]	; (8001230 <getGPS_time+0x104>)
 8001188:	f004 f8d8 	bl	800533c <getBetween>
 800118c:	4603      	mov	r3, r0
 800118e:	2b06      	cmp	r3, #6
 8001190:	d001      	beq.n	8001196 <getGPS_time+0x6a>
		return 0;
 8001192:	2300      	movs	r3, #0
 8001194:	e03f      	b.n	8001216 <getGPS_time+0xea>
 8001196:	8abb      	ldrh	r3, [r7, #20]
	}
	// Convert time from buffer and save to myRTC
	uint8_t tmphour[3];
	uint8_t tmpmin[3];
	uint8_t tmpsec[3];
	memcpy(tmphour, timebuffer, 2);
 8001198:	823b      	strh	r3, [r7, #16]
	memcpy(tmpmin, timebuffer + 2, 2);
 800119a:	f107 0314 	add.w	r3, r7, #20
 800119e:	3302      	adds	r3, #2
 80011a0:	881b      	ldrh	r3, [r3, #0]
 80011a2:	b29b      	uxth	r3, r3
 80011a4:	81bb      	strh	r3, [r7, #12]
	memcpy(tmpsec, timebuffer + 4, 2);
 80011a6:	f107 0314 	add.w	r3, r7, #20
 80011aa:	3304      	adds	r3, #4
 80011ac:	881b      	ldrh	r3, [r3, #0]
 80011ae:	b29b      	uxth	r3, r3
 80011b0:	813b      	strh	r3, [r7, #8]
	myRTC->Hour = atoi((char*)tmphour) + (uint8_t)MY_TIME_ZONE;
 80011b2:	f107 0310 	add.w	r3, r7, #16
 80011b6:	4618      	mov	r0, r3
 80011b8:	f00a fe60 	bl	800be7c <atoi>
 80011bc:	4603      	mov	r3, r0
 80011be:	b2db      	uxtb	r3, r3
 80011c0:	3307      	adds	r3, #7
 80011c2:	b2da      	uxtb	r2, r3
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	711a      	strb	r2, [r3, #4]
	myRTC->Min = atoi((char*)tmpmin);
 80011c8:	f107 030c 	add.w	r3, r7, #12
 80011cc:	4618      	mov	r0, r3
 80011ce:	f00a fe55 	bl	800be7c <atoi>
 80011d2:	4603      	mov	r3, r0
 80011d4:	b2da      	uxtb	r2, r3
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	715a      	strb	r2, [r3, #5]
	myRTC->Sec = atoi((char*)tmpsec);
 80011da:	f107 0308 	add.w	r3, r7, #8
 80011de:	4618      	mov	r0, r3
 80011e0:	f00a fe4c 	bl	800be7c <atoi>
 80011e4:	4603      	mov	r3, r0
 80011e6:	b2da      	uxtb	r2, r3
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	719a      	strb	r2, [r3, #6]
	if ( !DS3231_SetTime(myRTC) )	return 0;
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	f002 ffd5 	bl	800419c <DS3231_SetTime>
 80011f2:	4603      	mov	r3, r0
 80011f4:	f083 0301 	eor.w	r3, r3, #1
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <getGPS_time+0xd6>
 80011fe:	2300      	movs	r3, #0
 8001200:	e009      	b.n	8001216 <getGPS_time+0xea>
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001202:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001206:	480b      	ldr	r0, [pc, #44]	; (8001234 <getGPS_time+0x108>)
 8001208:	f007 fe65 	bl	8008ed6 <HAL_GPIO_TogglePin>
	triggerTaskflag(TASK_GET_GPS_TIME, FLAG_DIS);
 800120c:	2100      	movs	r1, #0
 800120e:	2007      	movs	r0, #7
 8001210:	f004 fa70 	bl	80056f4 <triggerTaskflag>
	return 1;
 8001214:	2301      	movs	r3, #1
}
 8001216:	4618      	mov	r0, r3
 8001218:	3728      	adds	r7, #40	; 0x28
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	20000cfa 	.word	0x20000cfa
 8001224:	0800eb44 	.word	0x0800eb44
 8001228:	20000af4 	.word	0x20000af4
 800122c:	0800eb4c 	.word	0x0800eb4c
 8001230:	0800eb50 	.word	0x0800eb50
 8001234:	40010800 	.word	0x40010800

08001238 <Serial_log_string>:
{
	__SERIAL_LOG_UART = huart;
}

void Serial_log_string(char *string)
{
 8001238:	b590      	push	{r4, r7, lr}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(__SERIAL_LOG_UART, (uint8_t*)string, strlen(string), LOG_TIMEOUT);
 8001240:	4b08      	ldr	r3, [pc, #32]	; (8001264 <Serial_log_string+0x2c>)
 8001242:	681c      	ldr	r4, [r3, #0]
 8001244:	6878      	ldr	r0, [r7, #4]
 8001246:	f7fe ff81 	bl	800014c <strlen>
 800124a:	4603      	mov	r3, r0
 800124c:	b29a      	uxth	r2, r3
 800124e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001252:	6879      	ldr	r1, [r7, #4]
 8001254:	4620      	mov	r0, r4
 8001256:	f009 fe25 	bl	800aea4 <HAL_UART_Transmit>
}
 800125a:	bf00      	nop
 800125c:	370c      	adds	r7, #12
 800125e:	46bd      	mov	sp, r7
 8001260:	bd90      	pop	{r4, r7, pc}
 8001262:	bf00      	nop
 8001264:	20000d04 	.word	0x20000d04

08001268 <initServerMsg>:
//static Station_t *myStation;
//static SMS_t *mySIM.sms;
//static SIM_t *mySIM;

void initServerMsg ()
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
//	myStation = Station;
//	mySIM.sms = mySMS;
//	mySIM = mySIM;
}
 800126c:	bf00      	nop
 800126e:	46bd      	mov	sp, r7
 8001270:	bc80      	pop	{r7}
 8001272:	4770      	bx	lr

08001274 <buffer2num>:

uint32_t buffer2num(uint8_t *buffer)
{
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
	return (buffer[0] << 24) | (buffer[1] << 16) | (buffer[2] << 8) | buffer[3];
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	061a      	lsls	r2, r3, #24
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	3301      	adds	r3, #1
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	041b      	lsls	r3, r3, #16
 800128a:	431a      	orrs	r2, r3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	3302      	adds	r3, #2
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	021b      	lsls	r3, r3, #8
 8001294:	4313      	orrs	r3, r2
 8001296:	687a      	ldr	r2, [r7, #4]
 8001298:	3203      	adds	r2, #3
 800129a:	7812      	ldrb	r2, [r2, #0]
 800129c:	4313      	orrs	r3, r2
}
 800129e:	4618      	mov	r0, r3
 80012a0:	370c      	adds	r7, #12
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bc80      	pop	{r7}
 80012a6:	4770      	bx	lr

080012a8 <addCRCtoPack>:

uint8_t addCRCtoPack(uint8_t *dataBuff, uint8_t bufflen)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	460b      	mov	r3, r1
 80012b2:	70fb      	strb	r3, [r7, #3]
	uint32_t crc;
//	MQTT_publish( (uint8_t*)TOPIC_PUB, dataBuff, bufflen);
	crc= crc32( (char*)dataBuff, bufflen);
 80012b4:	78fb      	ldrb	r3, [r7, #3]
 80012b6:	4619      	mov	r1, r3
 80012b8:	6878      	ldr	r0, [r7, #4]
 80012ba:	f004 fbd9 	bl	8005a70 <crc32>
 80012be:	60f8      	str	r0, [r7, #12]

	uint8_t crc_buff[4];
	FourbytenumbertoBuff( crc, crc_buff);
 80012c0:	f107 0308 	add.w	r3, r7, #8
 80012c4:	4619      	mov	r1, r3
 80012c6:	68f8      	ldr	r0, [r7, #12]
 80012c8:	f004 f8cb 	bl	8005462 <FourbytenumbertoBuff>

//	MQTT_publish( (uint8_t*)TOPIC_PUB, crc_buff, 4);

	memcpy(dataBuff+bufflen,crc_buff,4);
 80012cc:	78fb      	ldrb	r3, [r7, #3]
 80012ce:	687a      	ldr	r2, [r7, #4]
 80012d0:	4413      	add	r3, r2
 80012d2:	68ba      	ldr	r2, [r7, #8]
 80012d4:	601a      	str	r2, [r3, #0]

	return 4;    // crc length
 80012d6:	2304      	movs	r3, #4
}
 80012d8:	4618      	mov	r0, r3
 80012da:	3710      	adds	r7, #16
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}

080012e0 <addTimetobuff>:
uint8_t addTimetobuff(uint8_t *buff, uint16_t position)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b088      	sub	sp, #32
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	460b      	mov	r3, r1
 80012ea:	807b      	strh	r3, [r7, #2]
//	RTCtime.Month=11;
//	RTCtime.Date = 15;
//	RTCtime.Hour = 7;
//	RTCtime.Min = 56;
//	RTCtime.Sec = 35;
	if (DS3231_GetTime(&RTCtime))
 80012ec:	f107 0310 	add.w	r3, r7, #16
 80012f0:	4618      	mov	r0, r3
 80012f2:	f002 fed7 	bl	80040a4 <DS3231_GetTime>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d014      	beq.n	8001326 <addTimetobuff+0x46>
	{
		time_t epochtime = RTC2epochtime(&RTCtime);
 80012fc:	f107 0310 	add.w	r3, r7, #16
 8001300:	4618      	mov	r0, r3
 8001302:	f002 fea4 	bl	800404e <RTC2epochtime>
 8001306:	e9c7 0106 	strd	r0, r1, [r7, #24]
		uint8_t time_buff[4];
		FourbytenumbertoBuff((uint32_t)epochtime,time_buff);
 800130a:	69bb      	ldr	r3, [r7, #24]
 800130c:	f107 020c 	add.w	r2, r7, #12
 8001310:	4611      	mov	r1, r2
 8001312:	4618      	mov	r0, r3
 8001314:	f004 f8a5 	bl	8005462 <FourbytenumbertoBuff>
		memcpy(buff+position,time_buff,4);
 8001318:	887b      	ldrh	r3, [r7, #2]
 800131a:	687a      	ldr	r2, [r7, #4]
 800131c:	4413      	add	r3, r2
 800131e:	68fa      	ldr	r2, [r7, #12]
 8001320:	601a      	str	r2, [r3, #0]
		return 1;
 8001322:	2301      	movs	r3, #1
 8001324:	e000      	b.n	8001328 <addTimetobuff+0x48>
	}
	return 0;
 8001326:	2300      	movs	r3, #0
}
 8001328:	4618      	mov	r0, r3
 800132a:	3720      	adds	r7, #32
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}

08001330 <createPack>:

uint8_t createPack(PACK_t PackType, DATA_t DataType, CMD_t CMDType )
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
 8001336:	4603      	mov	r3, r0
 8001338:	71fb      	strb	r3, [r7, #7]
 800133a:	460b      	mov	r3, r1
 800133c:	71bb      	strb	r3, [r7, #6]
 800133e:	4613      	mov	r3, r2
 8001340:	717b      	strb	r3, [r7, #5]
	memset(Pack_buff, 0, PACKBUFF_MAXLEN);
 8001342:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001346:	2100      	movs	r1, #0
 8001348:	4816      	ldr	r0, [pc, #88]	; (80013a4 <createPack+0x74>)
 800134a:	f00a ff03 	bl	800c154 <memset>
	uint8_t pack_len = 0;
 800134e:	2300      	movs	r3, #0
 8001350:	73fb      	strb	r3, [r7, #15]

	Pack_buff[pack_len++] = myStation.stID;
 8001352:	7bfb      	ldrb	r3, [r7, #15]
 8001354:	1c5a      	adds	r2, r3, #1
 8001356:	73fa      	strb	r2, [r7, #15]
 8001358:	461a      	mov	r2, r3
 800135a:	4b13      	ldr	r3, [pc, #76]	; (80013a8 <createPack+0x78>)
 800135c:	7859      	ldrb	r1, [r3, #1]
 800135e:	4b11      	ldr	r3, [pc, #68]	; (80013a4 <createPack+0x74>)
 8001360:	5499      	strb	r1, [r3, r2]
	Pack_buff[pack_len++] = PackType;
 8001362:	7bfb      	ldrb	r3, [r7, #15]
 8001364:	1c5a      	adds	r2, r3, #1
 8001366:	73fa      	strb	r2, [r7, #15]
 8001368:	4619      	mov	r1, r3
 800136a:	4a0e      	ldr	r2, [pc, #56]	; (80013a4 <createPack+0x74>)
 800136c:	79fb      	ldrb	r3, [r7, #7]
 800136e:	5453      	strb	r3, [r2, r1]

	if ( DataType != DATA_NONE )
 8001370:	79bb      	ldrb	r3, [r7, #6]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d007      	beq.n	8001386 <createPack+0x56>
	{
		Pack_buff[pack_len++] = DataType;
 8001376:	7bfb      	ldrb	r3, [r7, #15]
 8001378:	1c5a      	adds	r2, r3, #1
 800137a:	73fa      	strb	r2, [r7, #15]
 800137c:	4619      	mov	r1, r3
 800137e:	4a09      	ldr	r2, [pc, #36]	; (80013a4 <createPack+0x74>)
 8001380:	79bb      	ldrb	r3, [r7, #6]
 8001382:	5453      	strb	r3, [r2, r1]
 8001384:	e009      	b.n	800139a <createPack+0x6a>
	}
	else if ( CMDType != CMD_NONE )
 8001386:	797b      	ldrb	r3, [r7, #5]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d006      	beq.n	800139a <createPack+0x6a>
	{
		Pack_buff[pack_len++] = CMDType;
 800138c:	7bfb      	ldrb	r3, [r7, #15]
 800138e:	1c5a      	adds	r2, r3, #1
 8001390:	73fa      	strb	r2, [r7, #15]
 8001392:	4619      	mov	r1, r3
 8001394:	4a03      	ldr	r2, [pc, #12]	; (80013a4 <createPack+0x74>)
 8001396:	797b      	ldrb	r3, [r7, #5]
 8001398:	5453      	strb	r3, [r2, r1]
	}
	return pack_len;
 800139a:	7bfb      	ldrb	r3, [r7, #15]
}
 800139c:	4618      	mov	r0, r3
 800139e:	3710      	adds	r7, #16
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	20000d08 	.word	0x20000d08
 80013a8:	20000474 	.word	0x20000474

080013ac <Serialize_SSnodedata>:

uint16_t Serialize_SSnodedata(uint8_t* Serial_buff, DATA_t dataType)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b084      	sub	sp, #16
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	460b      	mov	r3, r1
 80013b6:	70fb      	strb	r3, [r7, #3]

	uint16_t buff_len = 0;
 80013b8:	2300      	movs	r3, #0
 80013ba:	81fb      	strh	r3, [r7, #14]
	Node * current =myStation.ssNode_list->head->next;
 80013bc:	4b53      	ldr	r3, [pc, #332]	; (800150c <Serialize_SSnodedata+0x160>)
 80013be:	68db      	ldr	r3, [r3, #12]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013c4:	60bb      	str	r3, [r7, #8]
	while (current != myStation.ssNode_list->tail)
 80013c6:	e095      	b.n	80014f4 <Serialize_SSnodedata+0x148>
	{
		switch ( dataType ) {
 80013c8:	78fb      	ldrb	r3, [r7, #3]
 80013ca:	3b01      	subs	r3, #1
 80013cc:	2b04      	cmp	r3, #4
 80013ce:	f200 808b 	bhi.w	80014e8 <Serialize_SSnodedata+0x13c>
 80013d2:	a201      	add	r2, pc, #4	; (adr r2, 80013d8 <Serialize_SSnodedata+0x2c>)
 80013d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013d8:	08001425 	.word	0x08001425
 80013dc:	0800147b 	.word	0x0800147b
 80013e0:	080014e9 	.word	0x080014e9
 80013e4:	080013ed 	.word	0x080013ed
 80013e8:	080014af 	.word	0x080014af
		case DATA_REGISTER:
			Serial_buff[buff_len++] = current->SSnode.SSnode_ID;
 80013ec:	89fb      	ldrh	r3, [r7, #14]
 80013ee:	1c5a      	adds	r2, r3, #1
 80013f0:	81fa      	strh	r2, [r7, #14]
 80013f2:	461a      	mov	r2, r3
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	4413      	add	r3, r2
 80013f8:	68ba      	ldr	r2, [r7, #8]
 80013fa:	7812      	ldrb	r2, [r2, #0]
 80013fc:	701a      	strb	r2, [r3, #0]
			Serial_buff[buff_len++]= current->SSnode.Battery;
 80013fe:	89fb      	ldrh	r3, [r7, #14]
 8001400:	1c5a      	adds	r2, r3, #1
 8001402:	81fa      	strh	r2, [r7, #14]
 8001404:	461a      	mov	r2, r3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4413      	add	r3, r2
 800140a:	68ba      	ldr	r2, [r7, #8]
 800140c:	7852      	ldrb	r2, [r2, #1]
 800140e:	701a      	strb	r2, [r3, #0]
			Serial_buff[buff_len++]= current->SSnode.V_type;
 8001410:	89fb      	ldrh	r3, [r7, #14]
 8001412:	1c5a      	adds	r2, r3, #1
 8001414:	81fa      	strh	r2, [r7, #14]
 8001416:	461a      	mov	r2, r3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	4413      	add	r3, r2
 800141c:	68ba      	ldr	r2, [r7, #8]
 800141e:	7892      	ldrb	r2, [r2, #2]
 8001420:	701a      	strb	r2, [r3, #0]
			break;
 8001422:	e064      	b.n	80014ee <Serialize_SSnodedata+0x142>
		case DATA_PERIOD:
			Serial_buff[buff_len++] = current->SSnode.SSnode_ID;
 8001424:	89fb      	ldrh	r3, [r7, #14]
 8001426:	1c5a      	adds	r2, r3, #1
 8001428:	81fa      	strh	r2, [r7, #14]
 800142a:	461a      	mov	r2, r3
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	4413      	add	r3, r2
 8001430:	68ba      	ldr	r2, [r7, #8]
 8001432:	7812      	ldrb	r2, [r2, #0]
 8001434:	701a      	strb	r2, [r3, #0]
			Serial_buff[buff_len++] = current->SSnode.Battery;
 8001436:	89fb      	ldrh	r3, [r7, #14]
 8001438:	1c5a      	adds	r2, r3, #1
 800143a:	81fa      	strh	r2, [r7, #14]
 800143c:	461a      	mov	r2, r3
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	4413      	add	r3, r2
 8001442:	68ba      	ldr	r2, [r7, #8]
 8001444:	7852      	ldrb	r2, [r2, #1]
 8001446:	701a      	strb	r2, [r3, #0]
			Serial_buff[buff_len++] = ( current->SSnode.V_value >> 8 ) & 0xFF;
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	889b      	ldrh	r3, [r3, #4]
 800144c:	b29b      	uxth	r3, r3
 800144e:	0a1b      	lsrs	r3, r3, #8
 8001450:	b29a      	uxth	r2, r3
 8001452:	89fb      	ldrh	r3, [r7, #14]
 8001454:	1c59      	adds	r1, r3, #1
 8001456:	81f9      	strh	r1, [r7, #14]
 8001458:	4619      	mov	r1, r3
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	440b      	add	r3, r1
 800145e:	b2d2      	uxtb	r2, r2
 8001460:	701a      	strb	r2, [r3, #0]
			Serial_buff[buff_len++] = current->SSnode.V_value & 0xFF;
 8001462:	68bb      	ldr	r3, [r7, #8]
 8001464:	889b      	ldrh	r3, [r3, #4]
 8001466:	b29a      	uxth	r2, r3
 8001468:	89fb      	ldrh	r3, [r7, #14]
 800146a:	1c59      	adds	r1, r3, #1
 800146c:	81f9      	strh	r1, [r7, #14]
 800146e:	4619      	mov	r1, r3
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	440b      	add	r3, r1
 8001474:	b2d2      	uxtb	r2, r2
 8001476:	701a      	strb	r2, [r3, #0]
//			Serial_buff[buff_len++] = current->SSnode.sensorMode;
			break;
 8001478:	e039      	b.n	80014ee <Serialize_SSnodedata+0x142>
		case DATA_NETWREADY:
			if (current->SSnode.sensorMode == SLEEP) 	{
 800147a:	68bb      	ldr	r3, [r7, #8]
 800147c:	7a5b      	ldrb	r3, [r3, #9]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d102      	bne.n	8001488 <Serialize_SSnodedata+0xdc>
				current->SSnode.Sensor_state = SENSOR_DEACTIVE;
 8001482:	68bb      	ldr	r3, [r7, #8]
 8001484:	2202      	movs	r2, #2
 8001486:	719a      	strb	r2, [r3, #6]
			}
			Serial_buff[buff_len++] = current->SSnode.SSnode_ID;
 8001488:	89fb      	ldrh	r3, [r7, #14]
 800148a:	1c5a      	adds	r2, r3, #1
 800148c:	81fa      	strh	r2, [r7, #14]
 800148e:	461a      	mov	r2, r3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	4413      	add	r3, r2
 8001494:	68ba      	ldr	r2, [r7, #8]
 8001496:	7812      	ldrb	r2, [r2, #0]
 8001498:	701a      	strb	r2, [r3, #0]
			Serial_buff[buff_len++]= current->SSnode.Sensor_state;
 800149a:	89fb      	ldrh	r3, [r7, #14]
 800149c:	1c5a      	adds	r2, r3, #1
 800149e:	81fa      	strh	r2, [r7, #14]
 80014a0:	461a      	mov	r2, r3
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4413      	add	r3, r2
 80014a6:	68ba      	ldr	r2, [r7, #8]
 80014a8:	7992      	ldrb	r2, [r2, #6]
 80014aa:	701a      	strb	r2, [r3, #0]
			break;
 80014ac:	e01f      	b.n	80014ee <Serialize_SSnodedata+0x142>
		case DATA_CALIB:
			if (current->SSnode.dataCalibAvailable)	{
 80014ae:	68bb      	ldr	r3, [r7, #8]
 80014b0:	79db      	ldrb	r3, [r3, #7]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d01a      	beq.n	80014ec <Serialize_SSnodedata+0x140>
				Serial_buff[buff_len++] = current->SSnode.SSnode_ID;
 80014b6:	89fb      	ldrh	r3, [r7, #14]
 80014b8:	1c5a      	adds	r2, r3, #1
 80014ba:	81fa      	strh	r2, [r7, #14]
 80014bc:	461a      	mov	r2, r3
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4413      	add	r3, r2
 80014c2:	68ba      	ldr	r2, [r7, #8]
 80014c4:	7812      	ldrb	r2, [r2, #0]
 80014c6:	701a      	strb	r2, [r3, #0]
				memcpy(Serial_buff + buff_len, current->SSnode.dataCalibBuffer, 100);
 80014c8:	89fb      	ldrh	r3, [r7, #14]
 80014ca:	687a      	ldr	r2, [r7, #4]
 80014cc:	18d0      	adds	r0, r2, r3
 80014ce:	68bb      	ldr	r3, [r7, #8]
 80014d0:	330a      	adds	r3, #10
 80014d2:	2264      	movs	r2, #100	; 0x64
 80014d4:	4619      	mov	r1, r3
 80014d6:	f00a fe2f 	bl	800c138 <memcpy>
				buff_len += 100;
 80014da:	89fb      	ldrh	r3, [r7, #14]
 80014dc:	3364      	adds	r3, #100	; 0x64
 80014de:	81fb      	strh	r3, [r7, #14]
				current->SSnode.dataCalibAvailable = 0;
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	2200      	movs	r2, #0
 80014e4:	71da      	strb	r2, [r3, #7]
//				current->SSnode.sentDatacalib = 1;
			}
			break;
 80014e6:	e001      	b.n	80014ec <Serialize_SSnodedata+0x140>
//		case DATA_AFTERCALIB:
//			break;
		default:
			break;
 80014e8:	bf00      	nop
 80014ea:	e000      	b.n	80014ee <Serialize_SSnodedata+0x142>
			break;
 80014ec:	bf00      	nop
		}
		current = current->next;
 80014ee:	68bb      	ldr	r3, [r7, #8]
 80014f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014f2:	60bb      	str	r3, [r7, #8]
	while (current != myStation.ssNode_list->tail)
 80014f4:	4b05      	ldr	r3, [pc, #20]	; (800150c <Serialize_SSnodedata+0x160>)
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	68ba      	ldr	r2, [r7, #8]
 80014fc:	429a      	cmp	r2, r3
 80014fe:	f47f af63 	bne.w	80013c8 <Serialize_SSnodedata+0x1c>
	}
//	Serial_buff[buff_len] = '\0';
	return buff_len;
 8001502:	89fb      	ldrh	r3, [r7, #14]
}
 8001504:	4618      	mov	r0, r3
 8001506:	3710      	adds	r7, #16
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	20000474 	.word	0x20000474

08001510 <Serialize_Stationdata>:

uint8_t Serialize_Stationdata( uint8_t *Buffer, DATA_t dataType)
{
 8001510:	b590      	push	{r4, r7, lr}
 8001512:	b085      	sub	sp, #20
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	460b      	mov	r3, r1
 800151a:	70fb      	strb	r3, [r7, #3]
	uint8_t buff_len = 0;
 800151c:	2300      	movs	r3, #0
 800151e:	73fb      	strb	r3, [r7, #15]
	switch (dataType) {
 8001520:	78fb      	ldrb	r3, [r7, #3]
 8001522:	3b01      	subs	r3, #1
 8001524:	2b08      	cmp	r3, #8
 8001526:	f200 80c3 	bhi.w	80016b0 <Serialize_Stationdata+0x1a0>
 800152a:	a201      	add	r2, pc, #4	; (adr r2, 8001530 <Serialize_Stationdata+0x20>)
 800152c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001530:	080015cb 	.word	0x080015cb
 8001534:	080015a7 	.word	0x080015a7
 8001538:	080016b1 	.word	0x080016b1
 800153c:	08001555 	.word	0x08001555
 8001540:	0800161d 	.word	0x0800161d
 8001544:	080016b1 	.word	0x080016b1
 8001548:	080016b1 	.word	0x080016b1
 800154c:	08001689 	.word	0x08001689
 8001550:	0800169b 	.word	0x0800169b
		case DATA_REGISTER:
			Buffer[buff_len++] = myStation.stID;
 8001554:	7bfb      	ldrb	r3, [r7, #15]
 8001556:	1c5a      	adds	r2, r3, #1
 8001558:	73fa      	strb	r2, [r7, #15]
 800155a:	461a      	mov	r2, r3
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	4413      	add	r3, r2
 8001560:	4a56      	ldr	r2, [pc, #344]	; (80016bc <Serialize_Stationdata+0x1ac>)
 8001562:	7852      	ldrb	r2, [r2, #1]
 8001564:	701a      	strb	r2, [r3, #0]
			Buffer[buff_len++] = (uint8_t)( ( myStation.stCurrent >> 8 ) & 0xFF);
 8001566:	4b55      	ldr	r3, [pc, #340]	; (80016bc <Serialize_Stationdata+0x1ac>)
 8001568:	885b      	ldrh	r3, [r3, #2]
 800156a:	0a1b      	lsrs	r3, r3, #8
 800156c:	b29a      	uxth	r2, r3
 800156e:	7bfb      	ldrb	r3, [r7, #15]
 8001570:	1c59      	adds	r1, r3, #1
 8001572:	73f9      	strb	r1, [r7, #15]
 8001574:	4619      	mov	r1, r3
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	440b      	add	r3, r1
 800157a:	b2d2      	uxtb	r2, r2
 800157c:	701a      	strb	r2, [r3, #0]
			Buffer[buff_len++] = (uint8_t)( myStation.stCurrent & 0xFF );
 800157e:	4b4f      	ldr	r3, [pc, #316]	; (80016bc <Serialize_Stationdata+0x1ac>)
 8001580:	885a      	ldrh	r2, [r3, #2]
 8001582:	7bfb      	ldrb	r3, [r7, #15]
 8001584:	1c59      	adds	r1, r3, #1
 8001586:	73f9      	strb	r1, [r7, #15]
 8001588:	4619      	mov	r1, r3
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	440b      	add	r3, r1
 800158e:	b2d2      	uxtb	r2, r2
 8001590:	701a      	strb	r2, [r3, #0]
			Buffer[buff_len++] = (uint8_t) (myStation.MBAstate);
 8001592:	7bfb      	ldrb	r3, [r7, #15]
 8001594:	1c5a      	adds	r2, r3, #1
 8001596:	73fa      	strb	r2, [r7, #15]
 8001598:	461a      	mov	r2, r3
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4413      	add	r3, r2
 800159e:	4a47      	ldr	r2, [pc, #284]	; (80016bc <Serialize_Stationdata+0x1ac>)
 80015a0:	7992      	ldrb	r2, [r2, #6]
 80015a2:	701a      	strb	r2, [r3, #0]
//			Buffer[buff_len++] = (uint8_t)( ( myStation.stVoltage >> 8 ) & 0xFF );
//			Buffer[buff_len++] = (uint8_t)( myStation.stVoltage & 0xFF );
			break;
 80015a4:	e085      	b.n	80016b2 <Serialize_Stationdata+0x1a2>
		case DATA_NETWREADY:
			Buffer[buff_len++] = myStation.stID;
 80015a6:	7bfb      	ldrb	r3, [r7, #15]
 80015a8:	1c5a      	adds	r2, r3, #1
 80015aa:	73fa      	strb	r2, [r7, #15]
 80015ac:	461a      	mov	r2, r3
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	4413      	add	r3, r2
 80015b2:	4a42      	ldr	r2, [pc, #264]	; (80016bc <Serialize_Stationdata+0x1ac>)
 80015b4:	7852      	ldrb	r2, [r2, #1]
 80015b6:	701a      	strb	r2, [r3, #0]
			Buffer[buff_len++] = (uint8_t) ACTIVE;
 80015b8:	7bfb      	ldrb	r3, [r7, #15]
 80015ba:	1c5a      	adds	r2, r3, #1
 80015bc:	73fa      	strb	r2, [r7, #15]
 80015be:	461a      	mov	r2, r3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	4413      	add	r3, r2
 80015c4:	2201      	movs	r2, #1
 80015c6:	701a      	strb	r2, [r3, #0]
			break;
 80015c8:	e073      	b.n	80016b2 <Serialize_Stationdata+0x1a2>
		case DATA_PERIOD:
			Buffer[buff_len++] = myStation.stID;
 80015ca:	7bfb      	ldrb	r3, [r7, #15]
 80015cc:	1c5a      	adds	r2, r3, #1
 80015ce:	73fa      	strb	r2, [r7, #15]
 80015d0:	461a      	mov	r2, r3
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	4413      	add	r3, r2
 80015d6:	4a39      	ldr	r2, [pc, #228]	; (80016bc <Serialize_Stationdata+0x1ac>)
 80015d8:	7852      	ldrb	r2, [r2, #1]
 80015da:	701a      	strb	r2, [r3, #0]
			Buffer[buff_len++] = (uint8_t)( ( myStation.stCurrent >> 8 ) & 0xFF);
 80015dc:	4b37      	ldr	r3, [pc, #220]	; (80016bc <Serialize_Stationdata+0x1ac>)
 80015de:	885b      	ldrh	r3, [r3, #2]
 80015e0:	0a1b      	lsrs	r3, r3, #8
 80015e2:	b29a      	uxth	r2, r3
 80015e4:	7bfb      	ldrb	r3, [r7, #15]
 80015e6:	1c59      	adds	r1, r3, #1
 80015e8:	73f9      	strb	r1, [r7, #15]
 80015ea:	4619      	mov	r1, r3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	440b      	add	r3, r1
 80015f0:	b2d2      	uxtb	r2, r2
 80015f2:	701a      	strb	r2, [r3, #0]
			Buffer[buff_len++] = (uint8_t)( myStation.stCurrent & 0xFF );
 80015f4:	4b31      	ldr	r3, [pc, #196]	; (80016bc <Serialize_Stationdata+0x1ac>)
 80015f6:	885a      	ldrh	r2, [r3, #2]
 80015f8:	7bfb      	ldrb	r3, [r7, #15]
 80015fa:	1c59      	adds	r1, r3, #1
 80015fc:	73f9      	strb	r1, [r7, #15]
 80015fe:	4619      	mov	r1, r3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	440b      	add	r3, r1
 8001604:	b2d2      	uxtb	r2, r2
 8001606:	701a      	strb	r2, [r3, #0]
			Buffer[buff_len++] = (uint8_t)(myStation.MBAstate);
 8001608:	7bfb      	ldrb	r3, [r7, #15]
 800160a:	1c5a      	adds	r2, r3, #1
 800160c:	73fa      	strb	r2, [r7, #15]
 800160e:	461a      	mov	r2, r3
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	4413      	add	r3, r2
 8001614:	4a29      	ldr	r2, [pc, #164]	; (80016bc <Serialize_Stationdata+0x1ac>)
 8001616:	7992      	ldrb	r2, [r2, #6]
 8001618:	701a      	strb	r2, [r3, #0]
//			Buffer[buff_len++] = (uint8_t)( ( myStation.stVoltage >> 8 ) & 0xFF );
//			Buffer[buff_len++] = (uint8_t)( myStation.stVoltage & 0xFF );
			break;
 800161a:	e04a      	b.n	80016b2 <Serialize_Stationdata+0x1a2>
		case DATA_CALIB:
			Buffer[buff_len++] = myStation.stID;
 800161c:	7bfb      	ldrb	r3, [r7, #15]
 800161e:	1c5a      	adds	r2, r3, #1
 8001620:	73fa      	strb	r2, [r7, #15]
 8001622:	461a      	mov	r2, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	4413      	add	r3, r2
 8001628:	4a24      	ldr	r2, [pc, #144]	; (80016bc <Serialize_Stationdata+0x1ac>)
 800162a:	7852      	ldrb	r2, [r2, #1]
 800162c:	701a      	strb	r2, [r3, #0]
			Buffer[buff_len++] = (uint8_t)( ( myStation.stCurrent >> 8 ) & 0xFF);
 800162e:	4b23      	ldr	r3, [pc, #140]	; (80016bc <Serialize_Stationdata+0x1ac>)
 8001630:	885b      	ldrh	r3, [r3, #2]
 8001632:	0a1b      	lsrs	r3, r3, #8
 8001634:	b29a      	uxth	r2, r3
 8001636:	7bfb      	ldrb	r3, [r7, #15]
 8001638:	1c59      	adds	r1, r3, #1
 800163a:	73f9      	strb	r1, [r7, #15]
 800163c:	4619      	mov	r1, r3
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	440b      	add	r3, r1
 8001642:	b2d2      	uxtb	r2, r2
 8001644:	701a      	strb	r2, [r3, #0]
			Buffer[buff_len++] = (uint8_t)( myStation.stCurrent & 0xFF );
 8001646:	4b1d      	ldr	r3, [pc, #116]	; (80016bc <Serialize_Stationdata+0x1ac>)
 8001648:	885a      	ldrh	r2, [r3, #2]
 800164a:	7bfb      	ldrb	r3, [r7, #15]
 800164c:	1c59      	adds	r1, r3, #1
 800164e:	73f9      	strb	r1, [r7, #15]
 8001650:	4619      	mov	r1, r3
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	440b      	add	r3, r1
 8001656:	b2d2      	uxtb	r2, r2
 8001658:	701a      	strb	r2, [r3, #0]
			Buffer[buff_len++] = (uint8_t)( ( myStation.stVoltage >> 8 ) & 0xFF );
 800165a:	4b18      	ldr	r3, [pc, #96]	; (80016bc <Serialize_Stationdata+0x1ac>)
 800165c:	889b      	ldrh	r3, [r3, #4]
 800165e:	0a1b      	lsrs	r3, r3, #8
 8001660:	b29a      	uxth	r2, r3
 8001662:	7bfb      	ldrb	r3, [r7, #15]
 8001664:	1c59      	adds	r1, r3, #1
 8001666:	73f9      	strb	r1, [r7, #15]
 8001668:	4619      	mov	r1, r3
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	440b      	add	r3, r1
 800166e:	b2d2      	uxtb	r2, r2
 8001670:	701a      	strb	r2, [r3, #0]
			Buffer[buff_len++] = (uint8_t)( myStation.stVoltage & 0xFF );
 8001672:	4b12      	ldr	r3, [pc, #72]	; (80016bc <Serialize_Stationdata+0x1ac>)
 8001674:	889a      	ldrh	r2, [r3, #4]
 8001676:	7bfb      	ldrb	r3, [r7, #15]
 8001678:	1c59      	adds	r1, r3, #1
 800167a:	73f9      	strb	r1, [r7, #15]
 800167c:	4619      	mov	r1, r3
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	440b      	add	r3, r1
 8001682:	b2d2      	uxtb	r2, r2
 8001684:	701a      	strb	r2, [r3, #0]
			break;
 8001686:	e014      	b.n	80016b2 <Serialize_Stationdata+0x1a2>
//		case DATA_AFTERCALIB:
//			Buffer[buff_len++] = (uint8_t)( ( myStation.stCurrent >> 8 ) & 0xFF);
//			Buffer[buff_len++] = (uint8_t)( myStation.stCurrent & 0xFF );
//			break;
		case DATA_MBA_STATE:
			Buffer[buff_len++] = (uint8_t) (myStation.MBAstate);
 8001688:	7bfb      	ldrb	r3, [r7, #15]
 800168a:	1c5a      	adds	r2, r3, #1
 800168c:	73fa      	strb	r2, [r7, #15]
 800168e:	461a      	mov	r2, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	4413      	add	r3, r2
 8001694:	4a09      	ldr	r2, [pc, #36]	; (80016bc <Serialize_Stationdata+0x1ac>)
 8001696:	7992      	ldrb	r2, [r2, #6]
 8001698:	701a      	strb	r2, [r3, #0]
		case DATA_STEP_REACH_LIMIT:
			Buffer[buff_len++] = (uint8_t)getLimit();
 800169a:	7bfb      	ldrb	r3, [r7, #15]
 800169c:	1c5a      	adds	r2, r3, #1
 800169e:	73fa      	strb	r2, [r7, #15]
 80016a0:	461a      	mov	r2, r3
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	189c      	adds	r4, r3, r2
 80016a6:	f002 f881 	bl	80037ac <getLimit>
 80016aa:	4603      	mov	r3, r0
 80016ac:	7023      	strb	r3, [r4, #0]
			break;
 80016ae:	e000      	b.n	80016b2 <Serialize_Stationdata+0x1a2>
		default:
			break;
 80016b0:	bf00      	nop
	}

	return buff_len;
 80016b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	3714      	adds	r7, #20
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd90      	pop	{r4, r7, pc}
 80016bc:	20000474 	.word	0x20000474

080016c0 <Serialize_Data>:
uint8_t Serialize_Data(uint8_t *databuff, DATA_t dataType)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	460b      	mov	r3, r1
 80016ca:	70fb      	strb	r3, [r7, #3]
	uint16_t data_len = 0 ;
 80016cc:	2300      	movs	r3, #0
 80016ce:	81fb      	strh	r3, [r7, #14]
	data_len = Serialize_Stationdata(databuff, dataType );
 80016d0:	78fb      	ldrb	r3, [r7, #3]
 80016d2:	4619      	mov	r1, r3
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f7ff ff1b 	bl	8001510 <Serialize_Stationdata>
 80016da:	4603      	mov	r3, r0
 80016dc:	81fb      	strh	r3, [r7, #14]
	data_len += Serialize_SSnodedata(databuff + data_len, dataType);
 80016de:	89fb      	ldrh	r3, [r7, #14]
 80016e0:	687a      	ldr	r2, [r7, #4]
 80016e2:	4413      	add	r3, r2
 80016e4:	78fa      	ldrb	r2, [r7, #3]
 80016e6:	4611      	mov	r1, r2
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7ff fe5f 	bl	80013ac <Serialize_SSnodedata>
 80016ee:	4603      	mov	r3, r0
 80016f0:	461a      	mov	r2, r3
 80016f2:	89fb      	ldrh	r3, [r7, #14]
 80016f4:	4413      	add	r3, r2
 80016f6:	81fb      	strh	r3, [r7, #14]
	if ( !addTimetobuff( databuff, data_len ) )		return 0;
 80016f8:	89fb      	ldrh	r3, [r7, #14]
 80016fa:	4619      	mov	r1, r3
 80016fc:	6878      	ldr	r0, [r7, #4]
 80016fe:	f7ff fdef 	bl	80012e0 <addTimetobuff>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d101      	bne.n	800170c <Serialize_Data+0x4c>
 8001708:	2300      	movs	r3, #0
 800170a:	e004      	b.n	8001716 <Serialize_Data+0x56>
	data_len += 4;      // 4 bytes of time + buffer length
 800170c:	89fb      	ldrh	r3, [r7, #14]
 800170e:	3304      	adds	r3, #4
 8001710:	81fb      	strh	r3, [r7, #14]
	return data_len;
 8001712:	89fb      	ldrh	r3, [r7, #14]
 8001714:	b2db      	uxtb	r3, r3
}
 8001716:	4618      	mov	r0, r3
 8001718:	3710      	adds	r7, #16
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}

0800171e <addDatatoPack>:

uint8_t addDatatoPack(uint8_t *Pack, uint16_t Pack_len, uint8_t *Databuff, uint16_t dataLen)
{
 800171e:	b580      	push	{r7, lr}
 8001720:	b084      	sub	sp, #16
 8001722:	af00      	add	r7, sp, #0
 8001724:	60f8      	str	r0, [r7, #12]
 8001726:	607a      	str	r2, [r7, #4]
 8001728:	461a      	mov	r2, r3
 800172a:	460b      	mov	r3, r1
 800172c:	817b      	strh	r3, [r7, #10]
 800172e:	4613      	mov	r3, r2
 8001730:	813b      	strh	r3, [r7, #8]
	memcpy(Pack+ Pack_len, Databuff, dataLen);
 8001732:	897b      	ldrh	r3, [r7, #10]
 8001734:	68fa      	ldr	r2, [r7, #12]
 8001736:	4413      	add	r3, r2
 8001738:	893a      	ldrh	r2, [r7, #8]
 800173a:	6879      	ldr	r1, [r7, #4]
 800173c:	4618      	mov	r0, r3
 800173e:	f00a fcfb 	bl	800c138 <memcpy>
	return dataLen ;
 8001742:	893b      	ldrh	r3, [r7, #8]
 8001744:	b2db      	uxtb	r3, r3
}
 8001746:	4618      	mov	r0, r3
 8001748:	3710      	adds	r7, #16
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
	...

08001750 <Serialize_addtionaldata>:

uint8_t Serialize_addtionaldata( CMD_t CMDtype, uint8_t *Getbuffer, uint8_t *databuffer, uint16_t datalen, MBA_state_t MBAstate, Stepmotor_dir_t Stepm_DIR,
							Stepmotor_change_mode_t Stepm_changeMode, uint8_t Stepm_changeValue )
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b086      	sub	sp, #24
 8001754:	af00      	add	r7, sp, #0
 8001756:	60b9      	str	r1, [r7, #8]
 8001758:	607a      	str	r2, [r7, #4]
 800175a:	461a      	mov	r2, r3
 800175c:	4603      	mov	r3, r0
 800175e:	73fb      	strb	r3, [r7, #15]
 8001760:	4613      	mov	r3, r2
 8001762:	81bb      	strh	r3, [r7, #12]
	uint8_t buff_len = 0;
 8001764:	2300      	movs	r3, #0
 8001766:	75fb      	strb	r3, [r7, #23]
	switch ( CMDtype ) {
 8001768:	7bfb      	ldrb	r3, [r7, #15]
 800176a:	3b03      	subs	r3, #3
 800176c:	2b08      	cmp	r3, #8
 800176e:	f200 808d 	bhi.w	800188c <Serialize_addtionaldata+0x13c>
 8001772:	a201      	add	r2, pc, #4	; (adr r2, 8001778 <Serialize_addtionaldata+0x28>)
 8001774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001778:	0800179d 	.word	0x0800179d
 800177c:	080017b9 	.word	0x080017b9
 8001780:	0800188d 	.word	0x0800188d
 8001784:	0800188d 	.word	0x0800188d
 8001788:	080017d5 	.word	0x080017d5
 800178c:	08001803 	.word	0x08001803
 8001790:	0800188d 	.word	0x0800188d
 8001794:	08001855 	.word	0x08001855
 8001798:	08001871 	.word	0x08001871
		case CMD_SMS_CALIB:
			// Time delay + Phone number
			memcpy(Getbuffer + buff_len, databuffer, datalen);
 800179c:	7dfb      	ldrb	r3, [r7, #23]
 800179e:	68ba      	ldr	r2, [r7, #8]
 80017a0:	4413      	add	r3, r2
 80017a2:	89ba      	ldrh	r2, [r7, #12]
 80017a4:	6879      	ldr	r1, [r7, #4]
 80017a6:	4618      	mov	r0, r3
 80017a8:	f00a fcc6 	bl	800c138 <memcpy>
			buff_len += datalen;
 80017ac:	89bb      	ldrh	r3, [r7, #12]
 80017ae:	b2da      	uxtb	r2, r3
 80017b0:	7dfb      	ldrb	r3, [r7, #23]
 80017b2:	4413      	add	r3, r2
 80017b4:	75fb      	strb	r3, [r7, #23]
			break;
 80017b6:	e06a      	b.n	800188e <Serialize_addtionaldata+0x13e>
		case CMD_SMS_GETSTATUS:
			// Phone number	(11 byte)
			memcpy(Getbuffer + buff_len, databuffer, datalen);
 80017b8:	7dfb      	ldrb	r3, [r7, #23]
 80017ba:	68ba      	ldr	r2, [r7, #8]
 80017bc:	4413      	add	r3, r2
 80017be:	89ba      	ldrh	r2, [r7, #12]
 80017c0:	6879      	ldr	r1, [r7, #4]
 80017c2:	4618      	mov	r0, r3
 80017c4:	f00a fcb8 	bl	800c138 <memcpy>
			buff_len += datalen;
 80017c8:	89bb      	ldrh	r3, [r7, #12]
 80017ca:	b2da      	uxtb	r2, r3
 80017cc:	7dfb      	ldrb	r3, [r7, #23]
 80017ce:	4413      	add	r3, r2
 80017d0:	75fb      	strb	r3, [r7, #23]
			break;
 80017d2:	e05c      	b.n	800188e <Serialize_addtionaldata+0x13e>
		case CMD_CTRL_MBA:
			// First byte: ON/OFF
			Getbuffer[buff_len++] = MBAstate;
 80017d4:	7dfb      	ldrb	r3, [r7, #23]
 80017d6:	1c5a      	adds	r2, r3, #1
 80017d8:	75fa      	strb	r2, [r7, #23]
 80017da:	461a      	mov	r2, r3
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	4413      	add	r3, r2
 80017e0:	f897 2020 	ldrb.w	r2, [r7, #32]
 80017e4:	701a      	strb	r2, [r3, #0]
			// Station ID list + time delay + phone number
			memcpy(Getbuffer + buff_len, databuffer, datalen);
 80017e6:	7dfb      	ldrb	r3, [r7, #23]
 80017e8:	68ba      	ldr	r2, [r7, #8]
 80017ea:	4413      	add	r3, r2
 80017ec:	89ba      	ldrh	r2, [r7, #12]
 80017ee:	6879      	ldr	r1, [r7, #4]
 80017f0:	4618      	mov	r0, r3
 80017f2:	f00a fca1 	bl	800c138 <memcpy>
			buff_len += datalen;
 80017f6:	89bb      	ldrh	r3, [r7, #12]
 80017f8:	b2da      	uxtb	r2, r3
 80017fa:	7dfb      	ldrb	r3, [r7, #23]
 80017fc:	4413      	add	r3, r2
 80017fe:	75fb      	strb	r3, [r7, #23]
			break;
 8001800:	e045      	b.n	800188e <Serialize_addtionaldata+0x13e>
		case CMD_CTRL_STEP_MOTOR:
			// First byte: Increase/Decrease (1 byte)
			Getbuffer[buff_len++] = Stepm_DIR ;
 8001802:	7dfb      	ldrb	r3, [r7, #23]
 8001804:	1c5a      	adds	r2, r3, #1
 8001806:	75fa      	strb	r2, [r7, #23]
 8001808:	461a      	mov	r2, r3
 800180a:	68bb      	ldr	r3, [r7, #8]
 800180c:	4413      	add	r3, r2
 800180e:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001812:	701a      	strb	r2, [r3, #0]
			// Second byte: Change Percentage/Step (1 byte)
			Getbuffer[buff_len++] = Stepm_changeMode;
 8001814:	7dfb      	ldrb	r3, [r7, #23]
 8001816:	1c5a      	adds	r2, r3, #1
 8001818:	75fa      	strb	r2, [r7, #23]
 800181a:	461a      	mov	r2, r3
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	4413      	add	r3, r2
 8001820:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001824:	701a      	strb	r2, [r3, #0]
			// Third byte : Value
			Getbuffer[buff_len++] = Stepm_changeValue;
 8001826:	7dfb      	ldrb	r3, [r7, #23]
 8001828:	1c5a      	adds	r2, r3, #1
 800182a:	75fa      	strb	r2, [r7, #23]
 800182c:	461a      	mov	r2, r3
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	4413      	add	r3, r2
 8001832:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8001836:	701a      	strb	r2, [r3, #0]
			// Station ID list + time delay + phone number
			memcpy(Getbuffer + buff_len, databuffer, datalen);
 8001838:	7dfb      	ldrb	r3, [r7, #23]
 800183a:	68ba      	ldr	r2, [r7, #8]
 800183c:	4413      	add	r3, r2
 800183e:	89ba      	ldrh	r2, [r7, #12]
 8001840:	6879      	ldr	r1, [r7, #4]
 8001842:	4618      	mov	r0, r3
 8001844:	f00a fc78 	bl	800c138 <memcpy>
			buff_len += datalen;
 8001848:	89bb      	ldrh	r3, [r7, #12]
 800184a:	b2da      	uxtb	r2, r3
 800184c:	7dfb      	ldrb	r3, [r7, #23]
 800184e:	4413      	add	r3, r2
 8001850:	75fb      	strb	r3, [r7, #23]
			break;
 8001852:	e01c      	b.n	800188e <Serialize_addtionaldata+0x13e>
		case CMD_GET_LATEST_DATA_SENSOR:
			// Sensor ID list + phone number
			memcpy(Getbuffer + buff_len, databuffer, datalen);
 8001854:	7dfb      	ldrb	r3, [r7, #23]
 8001856:	68ba      	ldr	r2, [r7, #8]
 8001858:	4413      	add	r3, r2
 800185a:	89ba      	ldrh	r2, [r7, #12]
 800185c:	6879      	ldr	r1, [r7, #4]
 800185e:	4618      	mov	r0, r3
 8001860:	f00a fc6a 	bl	800c138 <memcpy>
			buff_len += datalen;
 8001864:	89bb      	ldrh	r3, [r7, #12]
 8001866:	b2da      	uxtb	r2, r3
 8001868:	7dfb      	ldrb	r3, [r7, #23]
 800186a:	4413      	add	r3, r2
 800186c:	75fb      	strb	r3, [r7, #23]
			break;
 800186e:	e00e      	b.n	800188e <Serialize_addtionaldata+0x13e>
		case CMD_GET_LASTEST_DATA_STATION:
			// Station ID list + phone number
			memcpy(Getbuffer + buff_len, databuffer, datalen);
 8001870:	7dfb      	ldrb	r3, [r7, #23]
 8001872:	68ba      	ldr	r2, [r7, #8]
 8001874:	4413      	add	r3, r2
 8001876:	89ba      	ldrh	r2, [r7, #12]
 8001878:	6879      	ldr	r1, [r7, #4]
 800187a:	4618      	mov	r0, r3
 800187c:	f00a fc5c 	bl	800c138 <memcpy>
			buff_len += datalen;
 8001880:	89bb      	ldrh	r3, [r7, #12]
 8001882:	b2da      	uxtb	r2, r3
 8001884:	7dfb      	ldrb	r3, [r7, #23]
 8001886:	4413      	add	r3, r2
 8001888:	75fb      	strb	r3, [r7, #23]
			break;
 800188a:	e000      	b.n	800188e <Serialize_addtionaldata+0x13e>
		default:
			break;
 800188c:	bf00      	nop
	}
	return buff_len;
 800188e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001890:	4618      	mov	r0, r3
 8001892:	3718      	adds	r7, #24
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}

08001898 <Register2Server>:

uint8_t Register2Server()
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b0a2      	sub	sp, #136	; 0x88
 800189c:	af00      	add	r7, sp, #0
	uint8_t tmp_databuff[128] ;
	uint16_t pack_len = 0;
 800189e:	2300      	movs	r3, #0
 80018a0:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
	// Create package
	pack_len = createPack(PACKT_REGISTER, DATA_REGISTER, CMD_NONE );
 80018a4:	2200      	movs	r2, #0
 80018a6:	2104      	movs	r1, #4
 80018a8:	20f5      	movs	r0, #245	; 0xf5
 80018aa:	f7ff fd41 	bl	8001330 <createPack>
 80018ae:	4603      	mov	r3, r0
 80018b0:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
	if ( !pack_len ) {
 80018b4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d101      	bne.n	80018c0 <Register2Server+0x28>
//		free(tmp_databuff);
		return 0;
 80018bc:	2300      	movs	r3, #0
 80018be:	e038      	b.n	8001932 <Register2Server+0x9a>
		}
	 //Convert Register data to temp buffer
	uint8_t datalen= Serialize_Data(tmp_databuff, DATA_REGISTER );
 80018c0:	1d3b      	adds	r3, r7, #4
 80018c2:	2104      	movs	r1, #4
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7ff fefb 	bl	80016c0 <Serialize_Data>
 80018ca:	4603      	mov	r3, r0
 80018cc:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
	if ( !datalen )	{
 80018d0:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d101      	bne.n	80018dc <Register2Server+0x44>
//		free(tmp_databuff);
		return 0;
 80018d8:	2300      	movs	r3, #0
 80018da:	e02a      	b.n	8001932 <Register2Server+0x9a>
	}
	// Add Register data  temp buffer to package
	pack_len += addDatatoPack( Pack_buff, pack_len, tmp_databuff, datalen );
 80018dc:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 80018e0:	b29b      	uxth	r3, r3
 80018e2:	1d3a      	adds	r2, r7, #4
 80018e4:	f8b7 1086 	ldrh.w	r1, [r7, #134]	; 0x86
 80018e8:	4814      	ldr	r0, [pc, #80]	; (800193c <Register2Server+0xa4>)
 80018ea:	f7ff ff18 	bl	800171e <addDatatoPack>
 80018ee:	4603      	mov	r3, r0
 80018f0:	b29a      	uxth	r2, r3
 80018f2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80018f6:	4413      	add	r3, r2
 80018f8:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
	// Add CRC to package
	pack_len += addCRCtoPack( Pack_buff, pack_len );
 80018fc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001900:	b2db      	uxtb	r3, r3
 8001902:	4619      	mov	r1, r3
 8001904:	480d      	ldr	r0, [pc, #52]	; (800193c <Register2Server+0xa4>)
 8001906:	f7ff fccf 	bl	80012a8 <addCRCtoPack>
 800190a:	4603      	mov	r3, r0
 800190c:	b29a      	uxth	r2, r3
 800190e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001912:	4413      	add	r3, r2
 8001914:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
	// Publish
	if ( MQTT_publish((uint8_t*)TOPIC_PUB, Pack_buff, pack_len) )	{
 8001918:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800191c:	461a      	mov	r2, r3
 800191e:	4907      	ldr	r1, [pc, #28]	; (800193c <Register2Server+0xa4>)
 8001920:	4807      	ldr	r0, [pc, #28]	; (8001940 <Register2Server+0xa8>)
 8001922:	f003 fbf7 	bl	8005114 <MQTT_publish>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <Register2Server+0x98>
//		Serial_log_string(" Sent \"Register\" message to server\r\n");
//		free(tmp_databuff);
		return 1;
 800192c:	2301      	movs	r3, #1
 800192e:	e000      	b.n	8001932 <Register2Server+0x9a>
	}
//	free(tmp_databuff);
	return 0;
 8001930:	2300      	movs	r3, #0
}
 8001932:	4618      	mov	r0, r3
 8001934:	3788      	adds	r7, #136	; 0x88
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	20000d08 	.word	0x20000d08
 8001940:	0800eb54 	.word	0x0800eb54

08001944 <sendCMDtoServer>:

uint8_t sendCMDtoServer(CMD_t CMDtype, uint8_t *SMSdatabuffer, uint16_t datalen, MBA_state_t MBAstate,
		Stepmotor_dir_t Stepm_DIR, Stepmotor_change_mode_t Stepm_changeMode,
		uint8_t Stepm_changeValue)
{
 8001944:	b590      	push	{r4, r7, lr}
 8001946:	b0c9      	sub	sp, #292	; 0x124
 8001948:	af04      	add	r7, sp, #16
 800194a:	4604      	mov	r4, r0
 800194c:	f507 7088 	add.w	r0, r7, #272	; 0x110
 8001950:	f5a0 7088 	sub.w	r0, r0, #272	; 0x110
 8001954:	6001      	str	r1, [r0, #0]
 8001956:	4610      	mov	r0, r2
 8001958:	4619      	mov	r1, r3
 800195a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800195e:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001962:	4622      	mov	r2, r4
 8001964:	701a      	strb	r2, [r3, #0]
 8001966:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800196a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800196e:	4602      	mov	r2, r0
 8001970:	801a      	strh	r2, [r3, #0]
 8001972:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001976:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 800197a:	460a      	mov	r2, r1
 800197c:	701a      	strb	r2, [r3, #0]
	uint8_t  pack_len = 0;
 800197e:	2300      	movs	r3, #0
 8001980:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
	pack_len = createPack(PACKT_CMD, DATA_NONE, CMDtype );
 8001984:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001988:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	461a      	mov	r2, r3
 8001990:	2100      	movs	r1, #0
 8001992:	20f2      	movs	r0, #242	; 0xf2
 8001994:	f7ff fccc 	bl	8001330 <createPack>
 8001998:	4603      	mov	r3, r0
 800199a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
	if ( !pack_len )	return 0; // Create package
 800199e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d101      	bne.n	80019aa <sendCMDtoServer+0x66>
 80019a6:	2300      	movs	r3, #0
 80019a8:	e052      	b.n	8001a50 <sendCMDtoServer+0x10c>

	uint8_t tmpAbuff [256];
	uint8_t Abuff_len = Serialize_addtionaldata(CMDtype, tmpAbuff, SMSdatabuffer, datalen, MBAstate, Stepm_DIR, Stepm_changeMode, Stepm_changeValue);
 80019aa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80019ae:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80019b2:	881c      	ldrh	r4, [r3, #0]
 80019b4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80019b8:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 80019bc:	f107 010c 	add.w	r1, r7, #12
 80019c0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80019c4:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80019c8:	7818      	ldrb	r0, [r3, #0]
 80019ca:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
 80019ce:	9303      	str	r3, [sp, #12]
 80019d0:	f897 3124 	ldrb.w	r3, [r7, #292]	; 0x124
 80019d4:	9302      	str	r3, [sp, #8]
 80019d6:	f897 3120 	ldrb.w	r3, [r7, #288]	; 0x120
 80019da:	9301      	str	r3, [sp, #4]
 80019dc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80019e0:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	9300      	str	r3, [sp, #0]
 80019e8:	4623      	mov	r3, r4
 80019ea:	6812      	ldr	r2, [r2, #0]
 80019ec:	f7ff feb0 	bl	8001750 <Serialize_addtionaldata>
 80019f0:	4603      	mov	r3, r0
 80019f2:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
	pack_len += addDatatoPack(Pack_buff, pack_len, tmpAbuff, Abuff_len);    // Add additional data to package
 80019f6:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80019fa:	b299      	uxth	r1, r3
 80019fc:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 8001a00:	b29b      	uxth	r3, r3
 8001a02:	f107 020c 	add.w	r2, r7, #12
 8001a06:	4815      	ldr	r0, [pc, #84]	; (8001a5c <sendCMDtoServer+0x118>)
 8001a08:	f7ff fe89 	bl	800171e <addDatatoPack>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	461a      	mov	r2, r3
 8001a10:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001a14:	4413      	add	r3, r2
 8001a16:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f

	pack_len += addCRCtoPack( Pack_buff, pack_len );		// Add CRC to package
 8001a1a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001a1e:	4619      	mov	r1, r3
 8001a20:	480e      	ldr	r0, [pc, #56]	; (8001a5c <sendCMDtoServer+0x118>)
 8001a22:	f7ff fc41 	bl	80012a8 <addCRCtoPack>
 8001a26:	4603      	mov	r3, r0
 8001a28:	461a      	mov	r2, r3
 8001a2a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001a2e:	4413      	add	r3, r2
 8001a30:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f

	if ( !MQTT_publish( (uint8_t*)TOPIC_PUB, Pack_buff , pack_len ) )	return 0;
 8001a34:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001a38:	b29b      	uxth	r3, r3
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	4907      	ldr	r1, [pc, #28]	; (8001a5c <sendCMDtoServer+0x118>)
 8001a3e:	4808      	ldr	r0, [pc, #32]	; (8001a60 <sendCMDtoServer+0x11c>)
 8001a40:	f003 fb68 	bl	8005114 <MQTT_publish>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d101      	bne.n	8001a4e <sendCMDtoServer+0x10a>
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	e000      	b.n	8001a50 <sendCMDtoServer+0x10c>
	return 1;
 8001a4e:	2301      	movs	r3, #1
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd90      	pop	{r4, r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	20000d08 	.word	0x20000d08
 8001a60:	0800eb54 	.word	0x0800eb54

08001a64 <sendData2Server>:

uint8_t sendData2Server( DATA_t dataType)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001a72:	f2a3 2309 	subw	r3, r3, #521	; 0x209
 8001a76:	701a      	strb	r2, [r3, #0]
	uint8_t databuff[DATABUFF_MAXLEN];
	uint16_t data_len = 0;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
	memset(databuff, 0, DATABUFF_MAXLEN);
 8001a7e:	f107 030c 	add.w	r3, r7, #12
 8001a82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a86:	2100      	movs	r1, #0
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f00a fb63 	bl	800c154 <memset>
	memset(Pack_buff, 0, PACKBUFF_MAXLEN);
 8001a8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a92:	2100      	movs	r1, #0
 8001a94:	4826      	ldr	r0, [pc, #152]	; (8001b30 <sendData2Server+0xcc>)
 8001a96:	f00a fb5d 	bl	800c154 <memset>
	// Creat package
	uint16_t pack_len = createPack(PACKT_DATA, dataType, CMD_NONE );
 8001a9a:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001a9e:	f2a3 2309 	subw	r3, r3, #521	; 0x209
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	20f1      	movs	r0, #241	; 0xf1
 8001aaa:	f7ff fc41 	bl	8001330 <createPack>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	f8a7 320c 	strh.w	r3, [r7, #524]	; 0x20c
	// Add data to package
	data_len = Serialize_Data(databuff, dataType );
 8001ab4:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001ab8:	f2a3 2309 	subw	r3, r3, #521	; 0x209
 8001abc:	781a      	ldrb	r2, [r3, #0]
 8001abe:	f107 030c 	add.w	r3, r7, #12
 8001ac2:	4611      	mov	r1, r2
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f7ff fdfb 	bl	80016c0 <Serialize_Data>
 8001aca:	4603      	mov	r3, r0
 8001acc:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
	pack_len += addDatatoPack(Pack_buff, pack_len, databuff, data_len);
 8001ad0:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8001ad4:	f107 020c 	add.w	r2, r7, #12
 8001ad8:	f8b7 120c 	ldrh.w	r1, [r7, #524]	; 0x20c
 8001adc:	4814      	ldr	r0, [pc, #80]	; (8001b30 <sendData2Server+0xcc>)
 8001ade:	f7ff fe1e 	bl	800171e <addDatatoPack>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	b29a      	uxth	r2, r3
 8001ae6:	f8b7 320c 	ldrh.w	r3, [r7, #524]	; 0x20c
 8001aea:	4413      	add	r3, r2
 8001aec:	f8a7 320c 	strh.w	r3, [r7, #524]	; 0x20c
	// Add CRC to package
	pack_len += addCRCtoPack(Pack_buff, pack_len);
 8001af0:	f8b7 320c 	ldrh.w	r3, [r7, #524]	; 0x20c
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	4619      	mov	r1, r3
 8001af8:	480d      	ldr	r0, [pc, #52]	; (8001b30 <sendData2Server+0xcc>)
 8001afa:	f7ff fbd5 	bl	80012a8 <addCRCtoPack>
 8001afe:	4603      	mov	r3, r0
 8001b00:	b29a      	uxth	r2, r3
 8001b02:	f8b7 320c 	ldrh.w	r3, [r7, #524]	; 0x20c
 8001b06:	4413      	add	r3, r2
 8001b08:	f8a7 320c 	strh.w	r3, [r7, #524]	; 0x20c
	// Publish
	if ( !MQTT_publish( (uint8_t*)TOPIC_PUB, Pack_buff, pack_len) ) return 0;
 8001b0c:	f8b7 320c 	ldrh.w	r3, [r7, #524]	; 0x20c
 8001b10:	461a      	mov	r2, r3
 8001b12:	4907      	ldr	r1, [pc, #28]	; (8001b30 <sendData2Server+0xcc>)
 8001b14:	4807      	ldr	r0, [pc, #28]	; (8001b34 <sendData2Server+0xd0>)
 8001b16:	f003 fafd 	bl	8005114 <MQTT_publish>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d101      	bne.n	8001b24 <sendData2Server+0xc0>
 8001b20:	2300      	movs	r3, #0
 8001b22:	e000      	b.n	8001b26 <sendData2Server+0xc2>
	return 1;
 8001b24:	2301      	movs	r3, #1
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	f507 7704 	add.w	r7, r7, #528	; 0x210
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	20000d08 	.word	0x20000d08
 8001b34:	0800eb54 	.word	0x0800eb54

08001b38 <checkCRC>:

	if ( !MQTT_publish( (uint8_t*)TOPIC_PUB, Pack_buff, packlen) ) return 0;
	return 1;
}
uint8_t checkCRC(uint8_t *buffer, uint16_t bufferlen)
{
 8001b38:	b590      	push	{r4, r7, lr}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	460b      	mov	r3, r1
 8001b42:	807b      	strh	r3, [r7, #2]
	if ( buffer2num(buffer + bufferlen - 4) != crc32( (char*)buffer, bufferlen - 4) ) return 0;
 8001b44:	887b      	ldrh	r3, [r7, #2]
 8001b46:	3b04      	subs	r3, #4
 8001b48:	687a      	ldr	r2, [r7, #4]
 8001b4a:	4413      	add	r3, r2
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7ff fb91 	bl	8001274 <buffer2num>
 8001b52:	4604      	mov	r4, r0
 8001b54:	887b      	ldrh	r3, [r7, #2]
 8001b56:	3b04      	subs	r3, #4
 8001b58:	4619      	mov	r1, r3
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f003 ff88 	bl	8005a70 <crc32>
 8001b60:	4603      	mov	r3, r0
 8001b62:	429c      	cmp	r4, r3
 8001b64:	d001      	beq.n	8001b6a <checkCRC+0x32>
 8001b66:	2300      	movs	r3, #0
 8001b68:	e000      	b.n	8001b6c <checkCRC+0x34>
	return 1;
 8001b6a:	2301      	movs	r3, #1
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	370c      	adds	r7, #12
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd90      	pop	{r4, r7, pc}

08001b74 <checkNodeID>:

uint8_t checkNodeID(uint8_t *Msg, uint8_t nodeID)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	460b      	mov	r3, r1
 8001b7e:	70fb      	strb	r3, [r7, #3]
	if ( Msg[NODEID_POS] != nodeID && Msg[NODEID_POS] != BROADCAST_ID )		return 0;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	78fa      	ldrb	r2, [r7, #3]
 8001b86:	429a      	cmp	r2, r3
 8001b88:	d005      	beq.n	8001b96 <checkNodeID+0x22>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	2bff      	cmp	r3, #255	; 0xff
 8001b90:	d001      	beq.n	8001b96 <checkNodeID+0x22>
 8001b92:	2300      	movs	r3, #0
 8001b94:	e000      	b.n	8001b98 <checkNodeID+0x24>
	return 1;
 8001b96:	2301      	movs	r3, #1
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	370c      	adds	r7, #12
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bc80      	pop	{r7}
 8001ba0:	4770      	bx	lr

08001ba2 <checkPacktype>:

PACK_t checkPacktype(uint8_t *Msg)
{
 8001ba2:	b480      	push	{r7}
 8001ba4:	b083      	sub	sp, #12
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	6078      	str	r0, [r7, #4]
	return Msg[PACKT_POS];
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	3301      	adds	r3, #1
 8001bae:	781b      	ldrb	r3, [r3, #0]
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	370c      	adds	r7, #12
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bc80      	pop	{r7}
 8001bb8:	4770      	bx	lr

08001bba <checkDatatype>:

DATA_t checkDatatype(uint8_t *Msg)
{
 8001bba:	b480      	push	{r7}
 8001bbc:	b083      	sub	sp, #12
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	6078      	str	r0, [r7, #4]
	return Msg[DATAT_POS];
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	3302      	adds	r3, #2
 8001bc6:	781b      	ldrb	r3, [r3, #0]
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	370c      	adds	r7, #12
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bc80      	pop	{r7}
 8001bd0:	4770      	bx	lr

08001bd2 <checkDataREStype>:
DATA_t checkDataREStype(uint8_t *Msg)
{
 8001bd2:	b480      	push	{r7}
 8001bd4:	b083      	sub	sp, #12
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	6078      	str	r0, [r7, #4]
	return Msg[DATAREST_POS];
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	3303      	adds	r3, #3
 8001bde:	781b      	ldrb	r3, [r3, #0]
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	370c      	adds	r7, #12
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bc80      	pop	{r7}
 8001be8:	4770      	bx	lr

08001bea <checkCMDtype>:
CMD_t checkCmdREStype( uint8_t *Msg)
{
	return Msg[CMDREST_POS];
}
CMD_t checkCMDtype (uint8_t *Msg)
{
 8001bea:	b480      	push	{r7}
 8001bec:	b083      	sub	sp, #12
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	6078      	str	r0, [r7, #4]
	return Msg[CMD_POS];
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	3302      	adds	r3, #2
 8001bf6:	781b      	ldrb	r3, [r3, #0]
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	370c      	adds	r7, #12
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bc80      	pop	{r7}
 8001c00:	4770      	bx	lr
	...

08001c04 <getDataStatus>:


void getDataStatus(uint8_t *Msg, uint16_t Msglen)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b08a      	sub	sp, #40	; 0x28
 8001c08:	af06      	add	r7, sp, #24
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	460b      	mov	r3, r1
 8001c0e:	807b      	strh	r3, [r7, #2]
	uint8_t numbofActiveStation;
	uint8_t numbofActiveSensor;
	uint8_t numbofFailStation;
	uint8_t numbofFailSensor;
	uint8_t datapos = DATA_POS;
 8001c10:	2303      	movs	r3, #3
 8001c12:	73fb      	strb	r3, [r7, #15]
	numbofActiveStation = Msg[datapos++];
 8001c14:	7bfb      	ldrb	r3, [r7, #15]
 8001c16:	1c5a      	adds	r2, r3, #1
 8001c18:	73fa      	strb	r2, [r7, #15]
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	4413      	add	r3, r2
 8001c20:	781b      	ldrb	r3, [r3, #0]
 8001c22:	73bb      	strb	r3, [r7, #14]
	numbofFailStation = Msg[datapos++];
 8001c24:	7bfb      	ldrb	r3, [r7, #15]
 8001c26:	1c5a      	adds	r2, r3, #1
 8001c28:	73fa      	strb	r2, [r7, #15]
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	4413      	add	r3, r2
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	737b      	strb	r3, [r7, #13]
	numbofActiveSensor = Msg[datapos++];
 8001c34:	7bfb      	ldrb	r3, [r7, #15]
 8001c36:	1c5a      	adds	r2, r3, #1
 8001c38:	73fa      	strb	r2, [r7, #15]
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	4413      	add	r3, r2
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	733b      	strb	r3, [r7, #12]
	numbofFailSensor = Msg[datapos++];
 8001c44:	7bfb      	ldrb	r3, [r7, #15]
 8001c46:	1c5a      	adds	r2, r3, #1
 8001c48:	73fa      	strb	r2, [r7, #15]
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	4413      	add	r3, r2
 8001c50:	781b      	ldrb	r3, [r3, #0]
 8001c52:	72fb      	strb	r3, [r7, #11]
	memset(mySIM.sms.GetStatus.data, 0, SMS_DATA_MAXLEN);
 8001c54:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c58:	2100      	movs	r1, #0
 8001c5a:	4810      	ldr	r0, [pc, #64]	; (8001c9c <getDataStatus+0x98>)
 8001c5c:	f00a fa7a 	bl	800c154 <memset>
	uint16_t len = sprintf((char*)mySIM.sms.GetStatus.data,"%s: %d,%s: %d,%s: %d,%s: %d.",
 8001c60:	7bb8      	ldrb	r0, [r7, #14]
 8001c62:	7b7b      	ldrb	r3, [r7, #13]
 8001c64:	7b3a      	ldrb	r2, [r7, #12]
 8001c66:	7af9      	ldrb	r1, [r7, #11]
 8001c68:	9105      	str	r1, [sp, #20]
 8001c6a:	490d      	ldr	r1, [pc, #52]	; (8001ca0 <getDataStatus+0x9c>)
 8001c6c:	9104      	str	r1, [sp, #16]
 8001c6e:	9203      	str	r2, [sp, #12]
 8001c70:	4a0c      	ldr	r2, [pc, #48]	; (8001ca4 <getDataStatus+0xa0>)
 8001c72:	9202      	str	r2, [sp, #8]
 8001c74:	9301      	str	r3, [sp, #4]
 8001c76:	4b0c      	ldr	r3, [pc, #48]	; (8001ca8 <getDataStatus+0xa4>)
 8001c78:	9300      	str	r3, [sp, #0]
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	4a0b      	ldr	r2, [pc, #44]	; (8001cac <getDataStatus+0xa8>)
 8001c7e:	490c      	ldr	r1, [pc, #48]	; (8001cb0 <getDataStatus+0xac>)
 8001c80:	4806      	ldr	r0, [pc, #24]	; (8001c9c <getDataStatus+0x98>)
 8001c82:	f00a fdcd 	bl	800c820 <siprintf>
 8001c86:	4603      	mov	r3, r0
 8001c88:	813b      	strh	r3, [r7, #8]
			USER_MSG_HEADER_NUMBOF_ACT_STATION, numbofActiveStation,
			USER_MSG_HEADER_NUMBOF_FAIL_STATION, numbofFailStation,
			USER_MSG_HEADER_NUMBOF_ACT_SENSOR, numbofActiveSensor,
			USER_MSG_HEADER_NUMBOF_FAIL_SENSOR, numbofFailSensor);
	mySIM.sms.GetStatus.datalength = len;
 8001c8a:	4a0a      	ldr	r2, [pc, #40]	; (8001cb4 <getDataStatus+0xb0>)
 8001c8c:	893b      	ldrh	r3, [r7, #8]
 8001c8e:	f8a2 36ac 	strh.w	r3, [r2, #1708]	; 0x6ac
}
 8001c92:	bf00      	nop
 8001c94:	3710      	adds	r7, #16
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	20001e1e 	.word	0x20001e1e
 8001ca0:	0800ebb0 	.word	0x0800ebb0
 8001ca4:	0800ebcc 	.word	0x0800ebcc
 8001ca8:	0800ebf0 	.word	0x0800ebf0
 8001cac:	0800eb68 	.word	0x0800eb68
 8001cb0:	0800eb90 	.word	0x0800eb90
 8001cb4:	20001770 	.word	0x20001770

08001cb8 <getDatalatest>:

ID_t getDatalatest(uint8_t *Msg, uint16_t Msg_len)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b084      	sub	sp, #16
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	460b      	mov	r3, r1
 8001cc2:	807b      	strh	r3, [r7, #2]
	uint8_t datapos = DATA_POS;
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	73fb      	strb	r3, [r7, #15]
	uint16_t crcpos = Msg_len - 4;
 8001cc8:	887b      	ldrh	r3, [r7, #2]
 8001cca:	3b04      	subs	r3, #4
 8001ccc:	81bb      	strh	r3, [r7, #12]
	uint8_t len ;
	uint16_t tmpvalue;

	// get ID type ( Station or Sensor)
	ID_t IDtype = Msg[datapos++];
 8001cce:	7bfb      	ldrb	r3, [r7, #15]
 8001cd0:	1c5a      	adds	r2, r3, #1
 8001cd2:	73fa      	strb	r2, [r7, #15]
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4413      	add	r3, r2
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	72fb      	strb	r3, [r7, #11]

	switch (IDtype){
 8001cde:	7afb      	ldrb	r3, [r7, #11]
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d002      	beq.n	8001cea <getDatalatest+0x32>
 8001ce4:	2b02      	cmp	r3, #2
 8001ce6:	d04a      	beq.n	8001d7e <getDatalatest+0xc6>
		mySIM.sms.GetStation.datalength += len;
		datapos += 2;
		}
		break;
	default:
		break;
 8001ce8:	e0cd      	b.n	8001e86 <getDatalatest+0x1ce>
		mySIM.sms.GetStation.datalength = 0;
 8001cea:	4b69      	ldr	r3, [pc, #420]	; (8001e90 <getDatalatest+0x1d8>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	f8a3 28d0 	strh.w	r2, [r3, #2256]	; 0x8d0
		while (datapos < crcpos)
 8001cf2:	e03e      	b.n	8001d72 <getDatalatest+0xba>
			len = sprintf((char*)(mySIM.sms.GetStation.data + mySIM.sms.GetStation.datalength), "I%d:", Msg[datapos]);
 8001cf4:	4b66      	ldr	r3, [pc, #408]	; (8001e90 <getDatalatest+0x1d8>)
 8001cf6:	f8b3 38d0 	ldrh.w	r3, [r3, #2256]	; 0x8d0
 8001cfa:	461a      	mov	r2, r3
 8001cfc:	4b65      	ldr	r3, [pc, #404]	; (8001e94 <getDatalatest+0x1dc>)
 8001cfe:	18d0      	adds	r0, r2, r3
 8001d00:	7bfb      	ldrb	r3, [r7, #15]
 8001d02:	687a      	ldr	r2, [r7, #4]
 8001d04:	4413      	add	r3, r2
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	461a      	mov	r2, r3
 8001d0a:	4963      	ldr	r1, [pc, #396]	; (8001e98 <getDatalatest+0x1e0>)
 8001d0c:	f00a fd88 	bl	800c820 <siprintf>
 8001d10:	4603      	mov	r3, r0
 8001d12:	72bb      	strb	r3, [r7, #10]
			mySIM.sms.GetStation.datalength += len;
 8001d14:	4b5e      	ldr	r3, [pc, #376]	; (8001e90 <getDatalatest+0x1d8>)
 8001d16:	f8b3 28d0 	ldrh.w	r2, [r3, #2256]	; 0x8d0
 8001d1a:	7abb      	ldrb	r3, [r7, #10]
 8001d1c:	b29b      	uxth	r3, r3
 8001d1e:	4413      	add	r3, r2
 8001d20:	b29a      	uxth	r2, r3
 8001d22:	4b5b      	ldr	r3, [pc, #364]	; (8001e90 <getDatalatest+0x1d8>)
 8001d24:	f8a3 28d0 	strh.w	r2, [r3, #2256]	; 0x8d0
			datapos++;
 8001d28:	7bfb      	ldrb	r3, [r7, #15]
 8001d2a:	3301      	adds	r3, #1
 8001d2c:	73fb      	strb	r3, [r7, #15]
			tmpvalue = buff2twobyte(Msg+ datapos);
 8001d2e:	7bfb      	ldrb	r3, [r7, #15]
 8001d30:	687a      	ldr	r2, [r7, #4]
 8001d32:	4413      	add	r3, r2
 8001d34:	4618      	mov	r0, r3
 8001d36:	f003 fb7d 	bl	8005434 <buff2twobyte>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	813b      	strh	r3, [r7, #8]
			len = sprintf((char*)(mySIM.sms.GetStation.data + mySIM.sms.GetStation.datalength), "%d;", tmpvalue);
 8001d3e:	4b54      	ldr	r3, [pc, #336]	; (8001e90 <getDatalatest+0x1d8>)
 8001d40:	f8b3 38d0 	ldrh.w	r3, [r3, #2256]	; 0x8d0
 8001d44:	461a      	mov	r2, r3
 8001d46:	4b53      	ldr	r3, [pc, #332]	; (8001e94 <getDatalatest+0x1dc>)
 8001d48:	4413      	add	r3, r2
 8001d4a:	893a      	ldrh	r2, [r7, #8]
 8001d4c:	4953      	ldr	r1, [pc, #332]	; (8001e9c <getDatalatest+0x1e4>)
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f00a fd66 	bl	800c820 <siprintf>
 8001d54:	4603      	mov	r3, r0
 8001d56:	72bb      	strb	r3, [r7, #10]
			mySIM.sms.GetStation.datalength += len;
 8001d58:	4b4d      	ldr	r3, [pc, #308]	; (8001e90 <getDatalatest+0x1d8>)
 8001d5a:	f8b3 28d0 	ldrh.w	r2, [r3, #2256]	; 0x8d0
 8001d5e:	7abb      	ldrb	r3, [r7, #10]
 8001d60:	b29b      	uxth	r3, r3
 8001d62:	4413      	add	r3, r2
 8001d64:	b29a      	uxth	r2, r3
 8001d66:	4b4a      	ldr	r3, [pc, #296]	; (8001e90 <getDatalatest+0x1d8>)
 8001d68:	f8a3 28d0 	strh.w	r2, [r3, #2256]	; 0x8d0
			datapos += 2;
 8001d6c:	7bfb      	ldrb	r3, [r7, #15]
 8001d6e:	3302      	adds	r3, #2
 8001d70:	73fb      	strb	r3, [r7, #15]
		while (datapos < crcpos)
 8001d72:	7bfb      	ldrb	r3, [r7, #15]
 8001d74:	b29b      	uxth	r3, r3
 8001d76:	89ba      	ldrh	r2, [r7, #12]
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d8bb      	bhi.n	8001cf4 <getDatalatest+0x3c>
		break;
 8001d7c:	e083      	b.n	8001e86 <getDatalatest+0x1ce>
		mySIM.sms.GetSensor.datalength = 0;
 8001d7e:	4b44      	ldr	r3, [pc, #272]	; (8001e90 <getDatalatest+0x1d8>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	f8a3 27be 	strh.w	r2, [r3, #1982]	; 0x7be
		while (datapos < crcpos){
 8001d86:	e078      	b.n	8001e7a <getDatalatest+0x1c2>
		len = sprintf((char*)(mySIM.sms.GetSensor.data + mySIM.sms.GetSensor.datalength), "V%d", Msg[datapos]);
 8001d88:	4b41      	ldr	r3, [pc, #260]	; (8001e90 <getDatalatest+0x1d8>)
 8001d8a:	f8b3 37be 	ldrh.w	r3, [r3, #1982]	; 0x7be
 8001d8e:	461a      	mov	r2, r3
 8001d90:	4b43      	ldr	r3, [pc, #268]	; (8001ea0 <getDatalatest+0x1e8>)
 8001d92:	18d0      	adds	r0, r2, r3
 8001d94:	7bfb      	ldrb	r3, [r7, #15]
 8001d96:	687a      	ldr	r2, [r7, #4]
 8001d98:	4413      	add	r3, r2
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	4941      	ldr	r1, [pc, #260]	; (8001ea4 <getDatalatest+0x1ec>)
 8001da0:	f00a fd3e 	bl	800c820 <siprintf>
 8001da4:	4603      	mov	r3, r0
 8001da6:	72bb      	strb	r3, [r7, #10]
		mySIM.sms.GetSensor.datalength += len;
 8001da8:	4b39      	ldr	r3, [pc, #228]	; (8001e90 <getDatalatest+0x1d8>)
 8001daa:	f8b3 27be 	ldrh.w	r2, [r3, #1982]	; 0x7be
 8001dae:	7abb      	ldrb	r3, [r7, #10]
 8001db0:	b29b      	uxth	r3, r3
 8001db2:	4413      	add	r3, r2
 8001db4:	b29a      	uxth	r2, r3
 8001db6:	4b36      	ldr	r3, [pc, #216]	; (8001e90 <getDatalatest+0x1d8>)
 8001db8:	f8a3 27be 	strh.w	r2, [r3, #1982]	; 0x7be
		datapos++;
 8001dbc:	7bfb      	ldrb	r3, [r7, #15]
 8001dbe:	3301      	adds	r3, #1
 8001dc0:	73fb      	strb	r3, [r7, #15]
		switch (Msg[datapos++])	{
 8001dc2:	7bfb      	ldrb	r3, [r7, #15]
 8001dc4:	1c5a      	adds	r2, r3, #1
 8001dc6:	73fa      	strb	r2, [r7, #15]
 8001dc8:	461a      	mov	r2, r3
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4413      	add	r3, r2
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d002      	beq.n	8001dda <getDatalatest+0x122>
 8001dd4:	2b02      	cmp	r3, #2
 8001dd6:	d017      	beq.n	8001e08 <getDatalatest+0x150>
			break;
 8001dd8:	e02d      	b.n	8001e36 <getDatalatest+0x17e>
			len = sprintf((char*)(mySIM.sms.GetSensor.data + mySIM.sms.GetSensor.datalength), "p:");
 8001dda:	4b2d      	ldr	r3, [pc, #180]	; (8001e90 <getDatalatest+0x1d8>)
 8001ddc:	f8b3 37be 	ldrh.w	r3, [r3, #1982]	; 0x7be
 8001de0:	461a      	mov	r2, r3
 8001de2:	4b2f      	ldr	r3, [pc, #188]	; (8001ea0 <getDatalatest+0x1e8>)
 8001de4:	4413      	add	r3, r2
 8001de6:	4930      	ldr	r1, [pc, #192]	; (8001ea8 <getDatalatest+0x1f0>)
 8001de8:	4618      	mov	r0, r3
 8001dea:	f00a fd19 	bl	800c820 <siprintf>
 8001dee:	4603      	mov	r3, r0
 8001df0:	72bb      	strb	r3, [r7, #10]
			mySIM.sms.GetSensor.datalength += len;
 8001df2:	4b27      	ldr	r3, [pc, #156]	; (8001e90 <getDatalatest+0x1d8>)
 8001df4:	f8b3 27be 	ldrh.w	r2, [r3, #1982]	; 0x7be
 8001df8:	7abb      	ldrb	r3, [r7, #10]
 8001dfa:	b29b      	uxth	r3, r3
 8001dfc:	4413      	add	r3, r2
 8001dfe:	b29a      	uxth	r2, r3
 8001e00:	4b23      	ldr	r3, [pc, #140]	; (8001e90 <getDatalatest+0x1d8>)
 8001e02:	f8a3 27be 	strh.w	r2, [r3, #1982]	; 0x7be
			break;
 8001e06:	e016      	b.n	8001e36 <getDatalatest+0x17e>
			len = sprintf((char*)(mySIM.sms.GetSensor.data + mySIM.sms.GetSensor.datalength), "na:");
 8001e08:	4b21      	ldr	r3, [pc, #132]	; (8001e90 <getDatalatest+0x1d8>)
 8001e0a:	f8b3 37be 	ldrh.w	r3, [r3, #1982]	; 0x7be
 8001e0e:	461a      	mov	r2, r3
 8001e10:	4b23      	ldr	r3, [pc, #140]	; (8001ea0 <getDatalatest+0x1e8>)
 8001e12:	4413      	add	r3, r2
 8001e14:	4925      	ldr	r1, [pc, #148]	; (8001eac <getDatalatest+0x1f4>)
 8001e16:	4618      	mov	r0, r3
 8001e18:	f00a fd02 	bl	800c820 <siprintf>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	72bb      	strb	r3, [r7, #10]
			mySIM.sms.GetSensor.datalength += len;
 8001e20:	4b1b      	ldr	r3, [pc, #108]	; (8001e90 <getDatalatest+0x1d8>)
 8001e22:	f8b3 27be 	ldrh.w	r2, [r3, #1982]	; 0x7be
 8001e26:	7abb      	ldrb	r3, [r7, #10]
 8001e28:	b29b      	uxth	r3, r3
 8001e2a:	4413      	add	r3, r2
 8001e2c:	b29a      	uxth	r2, r3
 8001e2e:	4b18      	ldr	r3, [pc, #96]	; (8001e90 <getDatalatest+0x1d8>)
 8001e30:	f8a3 27be 	strh.w	r2, [r3, #1982]	; 0x7be
			break;
 8001e34:	bf00      	nop
		tmpvalue = buff2twobyte(Msg+ datapos);
 8001e36:	7bfb      	ldrb	r3, [r7, #15]
 8001e38:	687a      	ldr	r2, [r7, #4]
 8001e3a:	4413      	add	r3, r2
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f003 faf9 	bl	8005434 <buff2twobyte>
 8001e42:	4603      	mov	r3, r0
 8001e44:	813b      	strh	r3, [r7, #8]
		len = sprintf((char*)(mySIM.sms.GetSensor.data + mySIM.sms.GetSensor.datalength), "%d,", tmpvalue);
 8001e46:	4b12      	ldr	r3, [pc, #72]	; (8001e90 <getDatalatest+0x1d8>)
 8001e48:	f8b3 37be 	ldrh.w	r3, [r3, #1982]	; 0x7be
 8001e4c:	461a      	mov	r2, r3
 8001e4e:	4b14      	ldr	r3, [pc, #80]	; (8001ea0 <getDatalatest+0x1e8>)
 8001e50:	4413      	add	r3, r2
 8001e52:	893a      	ldrh	r2, [r7, #8]
 8001e54:	4916      	ldr	r1, [pc, #88]	; (8001eb0 <getDatalatest+0x1f8>)
 8001e56:	4618      	mov	r0, r3
 8001e58:	f00a fce2 	bl	800c820 <siprintf>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	72bb      	strb	r3, [r7, #10]
		mySIM.sms.GetStation.datalength += len;
 8001e60:	4b0b      	ldr	r3, [pc, #44]	; (8001e90 <getDatalatest+0x1d8>)
 8001e62:	f8b3 28d0 	ldrh.w	r2, [r3, #2256]	; 0x8d0
 8001e66:	7abb      	ldrb	r3, [r7, #10]
 8001e68:	b29b      	uxth	r3, r3
 8001e6a:	4413      	add	r3, r2
 8001e6c:	b29a      	uxth	r2, r3
 8001e6e:	4b08      	ldr	r3, [pc, #32]	; (8001e90 <getDatalatest+0x1d8>)
 8001e70:	f8a3 28d0 	strh.w	r2, [r3, #2256]	; 0x8d0
		datapos += 2;
 8001e74:	7bfb      	ldrb	r3, [r7, #15]
 8001e76:	3302      	adds	r3, #2
 8001e78:	73fb      	strb	r3, [r7, #15]
		while (datapos < crcpos){
 8001e7a:	7bfb      	ldrb	r3, [r7, #15]
 8001e7c:	b29b      	uxth	r3, r3
 8001e7e:	89ba      	ldrh	r2, [r7, #12]
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d881      	bhi.n	8001d88 <getDatalatest+0xd0>
		break;
 8001e84:	bf00      	nop
	}
	return IDtype;
 8001e86:	7afb      	ldrb	r3, [r7, #11]
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3710      	adds	r7, #16
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	20001770 	.word	0x20001770
 8001e94:	20002042 	.word	0x20002042
 8001e98:	0800ec10 	.word	0x0800ec10
 8001e9c:	0800ec18 	.word	0x0800ec18
 8001ea0:	20001f30 	.word	0x20001f30
 8001ea4:	0800ec1c 	.word	0x0800ec1c
 8001ea8:	0800ec20 	.word	0x0800ec20
 8001eac:	0800ec24 	.word	0x0800ec24
 8001eb0:	0800ec28 	.word	0x0800ec28

08001eb4 <getMBAstate>:

static MBA_state_t getMBAstate(uint8_t *Msg)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b085      	sub	sp, #20
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
	MBA_state_t res = MBA_NULL;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	73fb      	strb	r3, [r7, #15]
	switch (Msg[MBA_STATE_POS])		{
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	3303      	adds	r3, #3
 8001ec4:	781b      	ldrb	r3, [r3, #0]
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d004      	beq.n	8001ed4 <getMBAstate+0x20>
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d105      	bne.n	8001eda <getMBAstate+0x26>
	case MBA_OFF:
		res = MBA_OFF;
 8001ece:	2302      	movs	r3, #2
 8001ed0:	73fb      	strb	r3, [r7, #15]
		break;
 8001ed2:	e003      	b.n	8001edc <getMBAstate+0x28>
	case MBA_ON:
		res = MBA_ON;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	73fb      	strb	r3, [r7, #15]
		break;
 8001ed8:	e000      	b.n	8001edc <getMBAstate+0x28>
	default:
		break;
 8001eda:	bf00      	nop
	}
	myStation.MBAstate = res;
 8001edc:	4a04      	ldr	r2, [pc, #16]	; (8001ef0 <getMBAstate+0x3c>)
 8001ede:	7bfb      	ldrb	r3, [r7, #15]
 8001ee0:	7193      	strb	r3, [r2, #6]
	return res;
 8001ee2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3714      	adds	r7, #20
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bc80      	pop	{r7}
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop
 8001ef0:	20000474 	.word	0x20000474

08001ef4 <getCtrlStepinfor>:
static void  getCtrlStepinfor(uint8_t *Msg)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b084      	sub	sp, #16
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
	Stepmotor_dir_t dir = Msg[DIR_POS];
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	78db      	ldrb	r3, [r3, #3]
 8001f00:	73fb      	strb	r3, [r7, #15]
	if (dir < STEPM_DIR_INC && dir > STEPM_DIR_DEFAULT )	return;
 8001f02:	7bfb      	ldrb	r3, [r7, #15]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d102      	bne.n	8001f0e <getCtrlStepinfor+0x1a>
 8001f08:	7bfb      	ldrb	r3, [r7, #15]
 8001f0a:	2b03      	cmp	r3, #3
 8001f0c:	d831      	bhi.n	8001f72 <getCtrlStepinfor+0x7e>
	Stepmotor_change_mode_t changemode = Msg[CHANGE_MODEPOS];
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	791b      	ldrb	r3, [r3, #4]
 8001f12:	73bb      	strb	r3, [r7, #14]
	if (changemode < STEPM_MODE_PERCENTAGE && changemode > STEPM_MODE_DEFAULT) return;
 8001f14:	7bbb      	ldrb	r3, [r7, #14]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d102      	bne.n	8001f20 <getCtrlStepinfor+0x2c>
 8001f1a:	7bbb      	ldrb	r3, [r7, #14]
 8001f1c:	2b03      	cmp	r3, #3
 8001f1e:	d82a      	bhi.n	8001f76 <getCtrlStepinfor+0x82>
	uint8_t valuebuff[3] ;
	memset(valuebuff, 0, 3);
 8001f20:	f107 0308 	add.w	r3, r7, #8
 8001f24:	2203      	movs	r2, #3
 8001f26:	2100      	movs	r1, #0
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f00a f913 	bl	800c154 <memset>
	memcpy(valuebuff, Msg + CHANGE_VALUE, 2);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	3305      	adds	r3, #5
 8001f32:	881b      	ldrh	r3, [r3, #0]
 8001f34:	b29b      	uxth	r3, r3
 8001f36:	813b      	strh	r3, [r7, #8]
	uint16_t value = buff2twobyte(valuebuff);
 8001f38:	f107 0308 	add.w	r3, r7, #8
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f003 fa79 	bl	8005434 <buff2twobyte>
 8001f42:	4603      	mov	r3, r0
 8001f44:	81bb      	strh	r3, [r7, #12]

	Step_setDir(dir);
 8001f46:	7bfb      	ldrb	r3, [r7, #15]
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f001 fc43 	bl	80037d4 <Step_setDir>
	Step_setChangeMode(changemode);
 8001f4e:	7bbb      	ldrb	r3, [r7, #14]
 8001f50:	4618      	mov	r0, r3
 8001f52:	f001 fccd 	bl	80038f0 <Step_setChangeMode>
	if (changemode == STEPM_MODE_PERCENTAGE)	{
 8001f56:	7bbb      	ldrb	r3, [r7, #14]
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d105      	bne.n	8001f68 <getCtrlStepinfor+0x74>
		Step_setPercentChange(value);
 8001f5c:	89bb      	ldrh	r3, [r7, #12]
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	4618      	mov	r0, r3
 8001f62:	f001 fcb5 	bl	80038d0 <Step_setPercentChange>
 8001f66:	e007      	b.n	8001f78 <getCtrlStepinfor+0x84>
	}
	else {
		Step_setStepChange(value);
 8001f68:	89bb      	ldrh	r3, [r7, #12]
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f001 fc96 	bl	800389c <Step_setStepChange>
 8001f70:	e002      	b.n	8001f78 <getCtrlStepinfor+0x84>
	if (dir < STEPM_DIR_INC && dir > STEPM_DIR_DEFAULT )	return;
 8001f72:	bf00      	nop
 8001f74:	e000      	b.n	8001f78 <getCtrlStepinfor+0x84>
	if (changemode < STEPM_MODE_PERCENTAGE && changemode > STEPM_MODE_DEFAULT) return;
 8001f76:	bf00      	nop
	}

}
 8001f78:	3710      	adds	r7, #16
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
	...

08001f80 <processingComingMsg>:
			}
			current = current->next;
		}
}
void processingComingMsg(uint8_t *Msg, uint16_t Msg_len, uint8_t stID)
{
 8001f80:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001f84:	b08a      	sub	sp, #40	; 0x28
 8001f86:	af02      	add	r7, sp, #8
 8001f88:	6078      	str	r0, [r7, #4]
 8001f8a:	460b      	mov	r3, r1
 8001f8c:	807b      	strh	r3, [r7, #2]
 8001f8e:	4613      	mov	r3, r2
 8001f90:	707b      	strb	r3, [r7, #1]
	if ( !checkCRC(Msg, Msg_len) )	return;
 8001f92:	887b      	ldrh	r3, [r7, #2]
 8001f94:	4619      	mov	r1, r3
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f7ff fdce 	bl	8001b38 <checkCRC>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	f000 8149 	beq.w	8002236 <processingComingMsg+0x2b6>

	if ( !checkNodeID(Msg, stID) )	return;
 8001fa4:	787b      	ldrb	r3, [r7, #1]
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	f7ff fde3 	bl	8001b74 <checkNodeID>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	f000 8142 	beq.w	800223a <processingComingMsg+0x2ba>

	PACK_t packageType = checkPacktype(Msg);
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f7ff fdf3 	bl	8001ba2 <checkPacktype>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	77fb      	strb	r3, [r7, #31]
	DATA_t dataREStype;
	ID_t idType;
	uint32_t tmptime;
	_RTC tmpRTC;

	switch (packageType) {
 8001fc0:	7ffb      	ldrb	r3, [r7, #31]
 8001fc2:	3bf1      	subs	r3, #241	; 0xf1
 8001fc4:	2b05      	cmp	r3, #5
 8001fc6:	f200 813a 	bhi.w	800223e <processingComingMsg+0x2be>
 8001fca:	a201      	add	r2, pc, #4	; (adr r2, 8001fd0 <processingComingMsg+0x50>)
 8001fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fd0:	08001fe9 	.word	0x08001fe9
 8001fd4:	08002043 	.word	0x08002043
 8001fd8:	08002147 	.word	0x08002147
 8001fdc:	080021b1 	.word	0x080021b1
 8001fe0:	0800223f 	.word	0x0800223f
 8001fe4:	08002223 	.word	0x08002223
		case PACKT_DATA:
			// Check data type
			dataType = checkDatatype(Msg);
 8001fe8:	6878      	ldr	r0, [r7, #4]
 8001fea:	f7ff fde6 	bl	8001bba <checkDatatype>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	74fb      	strb	r3, [r7, #19]
			switch (dataType) {
 8001ff2:	7cfb      	ldrb	r3, [r7, #19]
 8001ff4:	2b03      	cmp	r3, #3
 8001ff6:	d002      	beq.n	8001ffe <processingComingMsg+0x7e>
 8001ff8:	2b06      	cmp	r3, #6
 8001ffa:	d00a      	beq.n	8002012 <processingComingMsg+0x92>
//					default:
//						break;
//					}
					break;
				default:
					break;
 8001ffc:	e020      	b.n	8002040 <processingComingMsg+0xc0>
					getDataStatus(Msg, Msg_len);
 8001ffe:	887b      	ldrh	r3, [r7, #2]
 8002000:	4619      	mov	r1, r3
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f7ff fdfe 	bl	8001c04 <getDataStatus>
					triggerSMSreturn(SMS_CMD_GET_STATUS, SMS_CMD_ENABLE);
 8002008:	2101      	movs	r1, #1
 800200a:	2005      	movs	r0, #5
 800200c:	f001 fac0 	bl	8003590 <triggerSMSreturn>
					break;
 8002010:	e016      	b.n	8002040 <processingComingMsg+0xc0>
					idType = getDatalatest(Msg, Msg_len);
 8002012:	887b      	ldrh	r3, [r7, #2]
 8002014:	4619      	mov	r1, r3
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f7ff fe4e 	bl	8001cb8 <getDatalatest>
 800201c:	4603      	mov	r3, r0
 800201e:	74bb      	strb	r3, [r7, #18]
						if (idType == ID_SENSOR)	{
 8002020:	7cbb      	ldrb	r3, [r7, #18]
 8002022:	2b02      	cmp	r3, #2
 8002024:	d104      	bne.n	8002030 <processingComingMsg+0xb0>
							triggerSMSreturn(SMS_CMD_GET_SENSOR, SMS_CMD_ENABLE);
 8002026:	2101      	movs	r1, #1
 8002028:	2006      	movs	r0, #6
 800202a:	f001 fab1 	bl	8003590 <triggerSMSreturn>
					break;
 800202e:	e006      	b.n	800203e <processingComingMsg+0xbe>
						else if (idType == ID_STATION)	{
 8002030:	7cbb      	ldrb	r3, [r7, #18]
 8002032:	2b01      	cmp	r3, #1
 8002034:	d103      	bne.n	800203e <processingComingMsg+0xbe>
							triggerSMSreturn(SMS_CMD_GET_STATION, SMS_CMD_DISABLE);
 8002036:	2100      	movs	r1, #0
 8002038:	2007      	movs	r0, #7
 800203a:	f001 faa9 	bl	8003590 <triggerSMSreturn>
					break;
 800203e:	bf00      	nop
			}
			break;
 8002040:	e100      	b.n	8002244 <processingComingMsg+0x2c4>
		case PACKT_CMD:
			cmdType = checkCMDtype(Msg);
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f7ff fdd1 	bl	8001bea <checkCMDtype>
 8002048:	4603      	mov	r3, r0
 800204a:	77bb      	strb	r3, [r7, #30]
			switch (cmdType) {
 800204c:	7fbb      	ldrb	r3, [r7, #30]
 800204e:	3b01      	subs	r3, #1
 8002050:	2b0b      	cmp	r3, #11
 8002052:	d876      	bhi.n	8002142 <processingComingMsg+0x1c2>
 8002054:	a201      	add	r2, pc, #4	; (adr r2, 800205c <processingComingMsg+0xdc>)
 8002056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800205a:	bf00      	nop
 800205c:	0800208d 	.word	0x0800208d
 8002060:	08002097 	.word	0x08002097
 8002064:	08002143 	.word	0x08002143
 8002068:	08002143 	.word	0x08002143
 800206c:	08002143 	.word	0x08002143
 8002070:	08002143 	.word	0x08002143
 8002074:	080020e3 	.word	0x080020e3
 8002078:	080020f3 	.word	0x080020f3
 800207c:	08002143 	.word	0x08002143
 8002080:	08002143 	.word	0x08002143
 8002084:	08002143 	.word	0x08002143
 8002088:	08002103 	.word	0x08002103
				case CMD_PREPARE_CALIB:
					triggerTaskflag(TASK_PREPARE_CALIB, FLAG_EN);
 800208c:	2101      	movs	r1, #1
 800208e:	2002      	movs	r0, #2
 8002090:	f003 fb30 	bl	80056f4 <triggerTaskflag>
					break;
 8002094:	e056      	b.n	8002144 <processingComingMsg+0x1c4>
				case CMD_START_CALIB:
					// Get time in package
					 tmptime = buff2Fourbyte( Msg+ (uint8_t)ADDDATA_POS );
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	3303      	adds	r3, #3
 800209a:	4618      	mov	r0, r3
 800209c:	f003 fa03 	bl	80054a6 <buff2Fourbyte>
 80020a0:	6178      	str	r0, [r7, #20]

					epochtine2RTC(tmptime, &tmpRTC);
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	2200      	movs	r2, #0
 80020a6:	4698      	mov	r8, r3
 80020a8:	4691      	mov	r9, r2
 80020aa:	f107 0308 	add.w	r3, r7, #8
 80020ae:	461a      	mov	r2, r3
 80020b0:	4640      	mov	r0, r8
 80020b2:	4649      	mov	r1, r9
 80020b4:	f001 ff90 	bl	8003fd8 <epochtine2RTC>
					// Save Calib time
					myStation.calibTime.hour = tmpRTC.Hour;
 80020b8:	7b3a      	ldrb	r2, [r7, #12]
 80020ba:	4b64      	ldr	r3, [pc, #400]	; (800224c <processingComingMsg+0x2cc>)
 80020bc:	74da      	strb	r2, [r3, #19]
					myStation.calibTime.min = tmpRTC.Min;
 80020be:	7b7a      	ldrb	r2, [r7, #13]
 80020c0:	4b62      	ldr	r3, [pc, #392]	; (800224c <processingComingMsg+0x2cc>)
 80020c2:	751a      	strb	r2, [r3, #20]
					myStation.calibTime.sec = tmpRTC.Sec;
 80020c4:	7bba      	ldrb	r2, [r7, #14]
 80020c6:	4b61      	ldr	r3, [pc, #388]	; (800224c <processingComingMsg+0x2cc>)
 80020c8:	755a      	strb	r2, [r3, #21]
					// Set alarm for Calib
					DS3231_ClearAlarm1();
 80020ca:	f002 f953 	bl	8004374 <DS3231_ClearAlarm1>
					DS3231_SetAlarm1(ALARM_MODE_ALL_MATCHED, tmpRTC.Date, tmpRTC.Hour, tmpRTC.Min, tmpRTC.Sec);
 80020ce:	7ab9      	ldrb	r1, [r7, #10]
 80020d0:	7b3a      	ldrb	r2, [r7, #12]
 80020d2:	7b78      	ldrb	r0, [r7, #13]
 80020d4:	7bbb      	ldrb	r3, [r7, #14]
 80020d6:	9300      	str	r3, [sp, #0]
 80020d8:	4603      	mov	r3, r0
 80020da:	2000      	movs	r0, #0
 80020dc:	f002 f8aa 	bl	8004234 <DS3231_SetAlarm1>

					break;
 80020e0:	e030      	b.n	8002144 <processingComingMsg+0x1c4>
				case CMD_CTRL_MBA:
					//Get MBA state from package and switch contactor
					switchContactor(getMBAstate(Msg));
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f7ff fee6 	bl	8001eb4 <getMBAstate>
 80020e8:	4603      	mov	r3, r0
 80020ea:	4618      	mov	r0, r3
 80020ec:	f000 f98a 	bl	8002404 <switchContactor>
					break;
 80020f0:	e028      	b.n	8002144 <processingComingMsg+0x1c4>
				case CMD_CTRL_STEP_MOTOR:
					//Get data to control step motor
					getCtrlStepinfor(Msg);
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f7ff fefe 	bl	8001ef4 <getCtrlStepinfor>
					triggerTaskflag(TASK_CTRL_STEPMOR, FLAG_EN);
 80020f8:	2101      	movs	r1, #1
 80020fa:	2006      	movs	r0, #6
 80020fc:	f003 fafa 	bl	80056f4 <triggerTaskflag>
					break;
 8002100:	e020      	b.n	8002144 <processingComingMsg+0x1c4>
				case CMD_SYN_SENSOR:
					// get synchronize time and set
					tmptime = buff2Fourbyte( Msg+ (uint8_t)ADDDATA_POS );
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	3303      	adds	r3, #3
 8002106:	4618      	mov	r0, r3
 8002108:	f003 f9cd 	bl	80054a6 <buff2Fourbyte>
 800210c:	6178      	str	r0, [r7, #20]

					epochtine2RTC(tmptime, &tmpRTC);
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	2200      	movs	r2, #0
 8002112:	461c      	mov	r4, r3
 8002114:	4615      	mov	r5, r2
 8002116:	f107 0308 	add.w	r3, r7, #8
 800211a:	461a      	mov	r2, r3
 800211c:	4620      	mov	r0, r4
 800211e:	4629      	mov	r1, r5
 8002120:	f001 ff5a 	bl	8003fd8 <epochtine2RTC>
//					// Save Calib time
//					myStation.calibTime.hour = tmpRTC.Hour;
//					myStation.calibTime.min = tmpRTC.Min;
//					myStation.calibTime.sec = tmpRTC.Sec;
					// Set alarm for Calib
					sync_flag = 1;
 8002124:	4b4a      	ldr	r3, [pc, #296]	; (8002250 <processingComingMsg+0x2d0>)
 8002126:	2201      	movs	r2, #1
 8002128:	701a      	strb	r2, [r3, #0]
					DS3231_ClearAlarm1();
 800212a:	f002 f923 	bl	8004374 <DS3231_ClearAlarm1>
					DS3231_SetAlarm1(ALARM_MODE_ALL_MATCHED, tmpRTC.Date, tmpRTC.Hour, tmpRTC.Min, tmpRTC.Sec);
 800212e:	7ab9      	ldrb	r1, [r7, #10]
 8002130:	7b3a      	ldrb	r2, [r7, #12]
 8002132:	7b78      	ldrb	r0, [r7, #13]
 8002134:	7bbb      	ldrb	r3, [r7, #14]
 8002136:	9300      	str	r3, [sp, #0]
 8002138:	4603      	mov	r3, r0
 800213a:	2000      	movs	r0, #0
 800213c:	f002 f87a 	bl	8004234 <DS3231_SetAlarm1>
					break;
 8002140:	e000      	b.n	8002144 <processingComingMsg+0x1c4>
				default:
					break;
 8002142:	bf00      	nop
			}
			break;
 8002144:	e07e      	b.n	8002244 <processingComingMsg+0x2c4>
		case PACKT_RESDATA:
			dataREStype = checkDataREStype(Msg);
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f7ff fd43 	bl	8001bd2 <checkDataREStype>
 800214c:	4603      	mov	r3, r0
 800214e:	76fb      	strb	r3, [r7, #27]
			switch (dataREStype) {
 8002150:	7efb      	ldrb	r3, [r7, #27]
 8002152:	2b05      	cmp	r3, #5
 8002154:	d01a      	beq.n	800218c <processingComingMsg+0x20c>
 8002156:	2b05      	cmp	r3, #5
 8002158:	dc22      	bgt.n	80021a0 <processingComingMsg+0x220>
 800215a:	2b01      	cmp	r3, #1
 800215c:	d002      	beq.n	8002164 <processingComingMsg+0x1e4>
 800215e:	2b02      	cmp	r3, #2
 8002160:	d00a      	beq.n	8002178 <processingComingMsg+0x1f8>
//					triggerTaskflag(TASK_SEND_DATAAFTERCALIB, FLAG_DIS);
////					setStationMode(STATION_MODE_NORMAL);
//				}
//				break;
			default:
				break;
 8002162:	e01d      	b.n	80021a0 <processingComingMsg+0x220>
				if ( Msg[RESSTATUS_POS] == RES_OK)	{
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	3302      	adds	r3, #2
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	2b01      	cmp	r3, #1
 800216c:	d11a      	bne.n	80021a4 <processingComingMsg+0x224>
					triggerTaskflag(TASK_SEND_DATAPERIOD, FLAG_DIS);
 800216e:	2100      	movs	r1, #0
 8002170:	2009      	movs	r0, #9
 8002172:	f003 fabf 	bl	80056f4 <triggerTaskflag>
				break;
 8002176:	e015      	b.n	80021a4 <processingComingMsg+0x224>
				if ( Msg[RESSTATUS_POS] == RES_OK)	{
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	3302      	adds	r3, #2
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	2b01      	cmp	r3, #1
 8002180:	d112      	bne.n	80021a8 <processingComingMsg+0x228>
					triggerTaskflag(TASK_SEND_NWREADY, FLAG_DIS);
 8002182:	2100      	movs	r1, #0
 8002184:	2008      	movs	r0, #8
 8002186:	f003 fab5 	bl	80056f4 <triggerTaskflag>
				break;
 800218a:	e00d      	b.n	80021a8 <processingComingMsg+0x228>
				if ( Msg[RESSTATUS_POS] == RES_OK)	{
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	3302      	adds	r3, #2
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	2b01      	cmp	r3, #1
 8002194:	d10a      	bne.n	80021ac <processingComingMsg+0x22c>
					triggerTaskflag(TASK_SEND_DATACALIB, FLAG_DIS);
 8002196:	2100      	movs	r1, #0
 8002198:	200a      	movs	r0, #10
 800219a:	f003 faab 	bl	80056f4 <triggerTaskflag>
				break;
 800219e:	e005      	b.n	80021ac <processingComingMsg+0x22c>
				break;
 80021a0:	bf00      	nop
 80021a2:	e04f      	b.n	8002244 <processingComingMsg+0x2c4>
				break;
 80021a4:	bf00      	nop
 80021a6:	e04d      	b.n	8002244 <processingComingMsg+0x2c4>
				break;
 80021a8:	bf00      	nop
 80021aa:	e04b      	b.n	8002244 <processingComingMsg+0x2c4>
				break;
 80021ac:	bf00      	nop
			}
			break;
 80021ae:	e049      	b.n	8002244 <processingComingMsg+0x2c4>
		case PACKT_RESCMD:
			cmdType = checkCMDtype(Msg);
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	f7ff fd1a 	bl	8001bea <checkCMDtype>
 80021b6:	4603      	mov	r3, r0
 80021b8:	77bb      	strb	r3, [r7, #30]
			switch (cmdType)	{
 80021ba:	7fbb      	ldrb	r3, [r7, #30]
 80021bc:	2b07      	cmp	r3, #7
 80021be:	d002      	beq.n	80021c6 <processingComingMsg+0x246>
 80021c0:	2b08      	cmp	r3, #8
 80021c2:	d015      	beq.n	80021f0 <processingComingMsg+0x270>
					mySIM.sms.CtrlDEC.datalength = len;
					triggerSMSreturn(SMS_CMD_CTRL_DEC, ENABLE);
				}
				break;
			default:
				break;
 80021c4:	e02c      	b.n	8002220 <processingComingMsg+0x2a0>
				if (Msg[RESSTATUS_POS] == RES_OK)	{
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	3302      	adds	r3, #2
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d124      	bne.n	800221a <processingComingMsg+0x29a>
					uint8_t len= sprintf((char*)mySIM.sms.CtrlON.data,"Ctrl MBA success");
 80021d0:	4920      	ldr	r1, [pc, #128]	; (8002254 <processingComingMsg+0x2d4>)
 80021d2:	4821      	ldr	r0, [pc, #132]	; (8002258 <processingComingMsg+0x2d8>)
 80021d4:	f00a fb24 	bl	800c820 <siprintf>
 80021d8:	4603      	mov	r3, r0
 80021da:	773b      	strb	r3, [r7, #28]
					mySIM.sms.CtrlON.datalength = len;
 80021dc:	7f3b      	ldrb	r3, [r7, #28]
 80021de:	b29a      	uxth	r2, r3
 80021e0:	4b1e      	ldr	r3, [pc, #120]	; (800225c <processingComingMsg+0x2dc>)
 80021e2:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152
					triggerSMSreturn(SMS_CMD_CTRL_ON, ENABLE);
 80021e6:	2101      	movs	r1, #1
 80021e8:	2000      	movs	r0, #0
 80021ea:	f001 f9d1 	bl	8003590 <triggerSMSreturn>
				break;
 80021ee:	e014      	b.n	800221a <processingComingMsg+0x29a>
				if (Msg[RESSTATUS_POS] == RES_OK)	{
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	3302      	adds	r3, #2
 80021f4:	781b      	ldrb	r3, [r3, #0]
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d111      	bne.n	800221e <processingComingMsg+0x29e>
					uint8_t len= sprintf((char*)mySIM.sms.CtrlDEC.data,"Ctrl StepMor success");
 80021fa:	4919      	ldr	r1, [pc, #100]	; (8002260 <processingComingMsg+0x2e0>)
 80021fc:	4819      	ldr	r0, [pc, #100]	; (8002264 <processingComingMsg+0x2e4>)
 80021fe:	f00a fb0f 	bl	800c820 <siprintf>
 8002202:	4603      	mov	r3, r0
 8002204:	777b      	strb	r3, [r7, #29]
					mySIM.sms.CtrlDEC.datalength = len;
 8002206:	7f7b      	ldrb	r3, [r7, #29]
 8002208:	b29a      	uxth	r2, r3
 800220a:	4b14      	ldr	r3, [pc, #80]	; (800225c <processingComingMsg+0x2dc>)
 800220c:	f8a3 259a 	strh.w	r2, [r3, #1434]	; 0x59a
					triggerSMSreturn(SMS_CMD_CTRL_DEC, ENABLE);
 8002210:	2101      	movs	r1, #1
 8002212:	2004      	movs	r0, #4
 8002214:	f001 f9bc 	bl	8003590 <triggerSMSreturn>
				break;
 8002218:	e001      	b.n	800221e <processingComingMsg+0x29e>
				break;
 800221a:	bf00      	nop
 800221c:	e012      	b.n	8002244 <processingComingMsg+0x2c4>
				break;
 800221e:	bf00      	nop
			}
			break;
 8002220:	e010      	b.n	8002244 <processingComingMsg+0x2c4>
		case PACKT_RESREGISTER:
			// Get Register status
			if (Msg[RESSTATUS_POS] == RES_OK)	{
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	3302      	adds	r3, #2
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	2b01      	cmp	r3, #1
 800222a:	d10a      	bne.n	8002242 <processingComingMsg+0x2c2>
				triggerTaskflag(TASK_REGISTER, FLAG_DIS);
 800222c:	2100      	movs	r1, #0
 800222e:	2000      	movs	r0, #0
 8002230:	f003 fa60 	bl	80056f4 <triggerTaskflag>
			}
			break;
 8002234:	e005      	b.n	8002242 <processingComingMsg+0x2c2>
	if ( !checkCRC(Msg, Msg_len) )	return;
 8002236:	bf00      	nop
 8002238:	e004      	b.n	8002244 <processingComingMsg+0x2c4>
	if ( !checkNodeID(Msg, stID) )	return;
 800223a:	bf00      	nop
 800223c:	e002      	b.n	8002244 <processingComingMsg+0x2c4>
		default:
			break;
 800223e:	bf00      	nop
 8002240:	e000      	b.n	8002244 <processingComingMsg+0x2c4>
			break;
 8002242:	bf00      	nop
	}
}
 8002244:	3720      	adds	r7, #32
 8002246:	46bd      	mov	sp, r7
 8002248:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800224c:	20000474 	.word	0x20000474
 8002250:	200029f5 	.word	0x200029f5
 8002254:	0800ec2c 	.word	0x0800ec2c
 8002258:	200018c4 	.word	0x200018c4
 800225c:	20001770 	.word	0x20001770
 8002260:	0800ec40 	.word	0x0800ec40
 8002264:	20001d0c 	.word	0x20001d0c

08002268 <CMD_SMS_calib>:
#include "stationCMD.h"
#include "Serial_log.h"


uint8_t CMD_SMS_calib (uint8_t *cmddata, uint16_t datalen)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b086      	sub	sp, #24
 800226c:	af04      	add	r7, sp, #16
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	460b      	mov	r3, r1
 8002272:	807b      	strh	r3, [r7, #2]
	if (sendCMDtoServer( CMD_SMS_CALIB, cmddata, datalen, MBA_NULL,
 8002274:	887a      	ldrh	r2, [r7, #2]
 8002276:	2300      	movs	r3, #0
 8002278:	9302      	str	r3, [sp, #8]
 800227a:	2303      	movs	r3, #3
 800227c:	9301      	str	r3, [sp, #4]
 800227e:	2303      	movs	r3, #3
 8002280:	9300      	str	r3, [sp, #0]
 8002282:	2300      	movs	r3, #0
 8002284:	6879      	ldr	r1, [r7, #4]
 8002286:	2003      	movs	r0, #3
 8002288:	f7ff fb5c 	bl	8001944 <sendCMDtoServer>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d004      	beq.n	800229c <CMD_SMS_calib+0x34>
			STEPM_DIR_DEFAULT , STEPM_MODE_DEFAULT, 0) )	{
		Serial_log_string("Sent \"Calibration\" message to server\r\n");
 8002292:	4805      	ldr	r0, [pc, #20]	; (80022a8 <CMD_SMS_calib+0x40>)
 8002294:	f7fe ffd0 	bl	8001238 <Serial_log_string>
		return 1;
 8002298:	2301      	movs	r3, #1
 800229a:	e000      	b.n	800229e <CMD_SMS_calib+0x36>
	}
	return 0;
 800229c:	2300      	movs	r3, #0
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3708      	adds	r7, #8
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	0800ec60 	.word	0x0800ec60

080022ac <CMD_SMS_getStatus>:

uint8_t CMD_SMS_getStatus ( uint8_t *cmddata, uint16_t datalen)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b086      	sub	sp, #24
 80022b0:	af04      	add	r7, sp, #16
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	460b      	mov	r3, r1
 80022b6:	807b      	strh	r3, [r7, #2]
	if (sendCMDtoServer(CMD_SMS_GETSTATUS, cmddata, datalen, MBA_NULL,
 80022b8:	887a      	ldrh	r2, [r7, #2]
 80022ba:	2300      	movs	r3, #0
 80022bc:	9302      	str	r3, [sp, #8]
 80022be:	2303      	movs	r3, #3
 80022c0:	9301      	str	r3, [sp, #4]
 80022c2:	2303      	movs	r3, #3
 80022c4:	9300      	str	r3, [sp, #0]
 80022c6:	2300      	movs	r3, #0
 80022c8:	6879      	ldr	r1, [r7, #4]
 80022ca:	2004      	movs	r0, #4
 80022cc:	f7ff fb3a 	bl	8001944 <sendCMDtoServer>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d004      	beq.n	80022e0 <CMD_SMS_getStatus+0x34>
			STEPM_DIR_DEFAULT , STEPM_MODE_DEFAULT, 0) )	{
		Serial_log_string("Sent \"Get status\" message to server\r\n");
 80022d6:	4805      	ldr	r0, [pc, #20]	; (80022ec <CMD_SMS_getStatus+0x40>)
 80022d8:	f7fe ffae 	bl	8001238 <Serial_log_string>
		return 1;
 80022dc:	2301      	movs	r3, #1
 80022de:	e000      	b.n	80022e2 <CMD_SMS_getStatus+0x36>
	}
	return 0;
 80022e0:	2300      	movs	r3, #0
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3708      	adds	r7, #8
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	0800ec88 	.word	0x0800ec88

080022f0 <CMD_SMS_Ctrl_MBA>:

uint8_t CMD_SMS_Ctrl_MBA ( uint8_t *cmddata, uint16_t datalen, MBA_state_t MBAstate)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b086      	sub	sp, #24
 80022f4:	af04      	add	r7, sp, #16
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	460b      	mov	r3, r1
 80022fa:	807b      	strh	r3, [r7, #2]
 80022fc:	4613      	mov	r3, r2
 80022fe:	707b      	strb	r3, [r7, #1]
	if (sendCMDtoServer(CMD_CTRL_MBA, cmddata, datalen, MBAstate,
 8002300:	787b      	ldrb	r3, [r7, #1]
 8002302:	887a      	ldrh	r2, [r7, #2]
 8002304:	2100      	movs	r1, #0
 8002306:	9102      	str	r1, [sp, #8]
 8002308:	2103      	movs	r1, #3
 800230a:	9101      	str	r1, [sp, #4]
 800230c:	2103      	movs	r1, #3
 800230e:	9100      	str	r1, [sp, #0]
 8002310:	6879      	ldr	r1, [r7, #4]
 8002312:	2007      	movs	r0, #7
 8002314:	f7ff fb16 	bl	8001944 <sendCMDtoServer>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d004      	beq.n	8002328 <CMD_SMS_Ctrl_MBA+0x38>
			STEPM_DIR_DEFAULT , STEPM_MODE_DEFAULT, 0) )	{
		Serial_log_string("Sent \"Control MBA\" message to server\r\n");
 800231e:	4805      	ldr	r0, [pc, #20]	; (8002334 <CMD_SMS_Ctrl_MBA+0x44>)
 8002320:	f7fe ff8a 	bl	8001238 <Serial_log_string>
		return 1;
 8002324:	2301      	movs	r3, #1
 8002326:	e000      	b.n	800232a <CMD_SMS_Ctrl_MBA+0x3a>
	}
	return 0;
 8002328:	2300      	movs	r3, #0


}
 800232a:	4618      	mov	r0, r3
 800232c:	3708      	adds	r7, #8
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	0800ecb0 	.word	0x0800ecb0

08002338 <CMD_SMS_Ctrl_StepM>:

uint8_t CMD_SMS_Ctrl_StepM ( uint8_t *cmddata, uint16_t datalen, Stepmotor_dir_t stepDIR, Stepmotor_change_mode_t stepMode, uint8_t changeValue)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b086      	sub	sp, #24
 800233c:	af04      	add	r7, sp, #16
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	4608      	mov	r0, r1
 8002342:	4611      	mov	r1, r2
 8002344:	461a      	mov	r2, r3
 8002346:	4603      	mov	r3, r0
 8002348:	807b      	strh	r3, [r7, #2]
 800234a:	460b      	mov	r3, r1
 800234c:	707b      	strb	r3, [r7, #1]
 800234e:	4613      	mov	r3, r2
 8002350:	703b      	strb	r3, [r7, #0]
	if (sendCMDtoServer(CMD_CTRL_STEP_MOTOR, cmddata, datalen, MBA_NULL,stepDIR , stepMode, changeValue) )	{
 8002352:	887a      	ldrh	r2, [r7, #2]
 8002354:	7c3b      	ldrb	r3, [r7, #16]
 8002356:	9302      	str	r3, [sp, #8]
 8002358:	783b      	ldrb	r3, [r7, #0]
 800235a:	9301      	str	r3, [sp, #4]
 800235c:	787b      	ldrb	r3, [r7, #1]
 800235e:	9300      	str	r3, [sp, #0]
 8002360:	2300      	movs	r3, #0
 8002362:	6879      	ldr	r1, [r7, #4]
 8002364:	2008      	movs	r0, #8
 8002366:	f7ff faed 	bl	8001944 <sendCMDtoServer>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d004      	beq.n	800237a <CMD_SMS_Ctrl_StepM+0x42>
		Serial_log_string("Sent \"Control Step motor\" message to server\r\n");
 8002370:	4804      	ldr	r0, [pc, #16]	; (8002384 <CMD_SMS_Ctrl_StepM+0x4c>)
 8002372:	f7fe ff61 	bl	8001238 <Serial_log_string>
		return 1;
 8002376:	2301      	movs	r3, #1
 8002378:	e000      	b.n	800237c <CMD_SMS_Ctrl_StepM+0x44>
	}
	return 0;
 800237a:	2300      	movs	r3, #0
}
 800237c:	4618      	mov	r0, r3
 800237e:	3708      	adds	r7, #8
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}
 8002384:	0800ecd8 	.word	0x0800ecd8

08002388 <CMD_SMS_getStationLatestData>:

uint8_t CMD_SMS_getStationLatestData ( uint8_t *cmddata, uint16_t datalen)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b086      	sub	sp, #24
 800238c:	af04      	add	r7, sp, #16
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	460b      	mov	r3, r1
 8002392:	807b      	strh	r3, [r7, #2]
	if (sendCMDtoServer(CMD_SMS_GETSTATUS, cmddata, datalen, MBA_NULL,
 8002394:	887a      	ldrh	r2, [r7, #2]
 8002396:	2300      	movs	r3, #0
 8002398:	9302      	str	r3, [sp, #8]
 800239a:	2303      	movs	r3, #3
 800239c:	9301      	str	r3, [sp, #4]
 800239e:	2303      	movs	r3, #3
 80023a0:	9300      	str	r3, [sp, #0]
 80023a2:	2300      	movs	r3, #0
 80023a4:	6879      	ldr	r1, [r7, #4]
 80023a6:	2004      	movs	r0, #4
 80023a8:	f7ff facc 	bl	8001944 <sendCMDtoServer>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d004      	beq.n	80023bc <CMD_SMS_getStationLatestData+0x34>
			STEPM_DIR_DEFAULT , STEPM_MODE_DEFAULT, 0) )	{
		Serial_log_string("Sent \"Get latest station data\" message to server\r\n");
 80023b2:	4805      	ldr	r0, [pc, #20]	; (80023c8 <CMD_SMS_getStationLatestData+0x40>)
 80023b4:	f7fe ff40 	bl	8001238 <Serial_log_string>
		return 1;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e000      	b.n	80023be <CMD_SMS_getStationLatestData+0x36>
	}
	return 0;
 80023bc:	2300      	movs	r3, #0
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3708      	adds	r7, #8
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	0800ed08 	.word	0x0800ed08

080023cc <CMD_SMS_getSensorLatestData>:

uint8_t CMD_SMS_getSensorLatestData ( uint8_t *cmddata, uint16_t datalen)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b086      	sub	sp, #24
 80023d0:	af04      	add	r7, sp, #16
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	460b      	mov	r3, r1
 80023d6:	807b      	strh	r3, [r7, #2]
	if (sendCMDtoServer( CMD_SMS_GETSTATUS, cmddata, datalen, MBA_NULL,STEPM_DIR_DEFAULT , STEPM_MODE_DEFAULT, 0) )
 80023d8:	887a      	ldrh	r2, [r7, #2]
 80023da:	2300      	movs	r3, #0
 80023dc:	9302      	str	r3, [sp, #8]
 80023de:	2303      	movs	r3, #3
 80023e0:	9301      	str	r3, [sp, #4]
 80023e2:	2303      	movs	r3, #3
 80023e4:	9300      	str	r3, [sp, #0]
 80023e6:	2300      	movs	r3, #0
 80023e8:	6879      	ldr	r1, [r7, #4]
 80023ea:	2004      	movs	r0, #4
 80023ec:	f7ff faaa 	bl	8001944 <sendCMDtoServer>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d001      	beq.n	80023fa <CMD_SMS_getSensorLatestData+0x2e>
		return 1;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e000      	b.n	80023fc <CMD_SMS_getSensorLatestData+0x30>
	return 0;
 80023fa:	2300      	movs	r3, #0
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3708      	adds	r7, #8
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}

08002404 <switchContactor>:
#include  "gpio.h"
#include "Task.h"


MBA_state_t switchContactor (MBA_state_t ONofOFF)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
 800240a:	4603      	mov	r3, r0
 800240c:	71fb      	strb	r3, [r7, #7]
	switch (ONofOFF)	{
 800240e:	79fb      	ldrb	r3, [r7, #7]
 8002410:	2b01      	cmp	r3, #1
 8002412:	d002      	beq.n	800241a <switchContactor+0x16>
 8002414:	2b02      	cmp	r3, #2
 8002416:	d006      	beq.n	8002426 <switchContactor+0x22>
		break;
	case MBA_OFF:
		HAL_GPIO_WritePin(MBA_CONTACTOR_GPIO_Port, MBA_CONTACTOR_Pin, GPIO_PIN_RESET);
		break;
	default:
		break;
 8002418:	e00b      	b.n	8002432 <switchContactor+0x2e>
		HAL_GPIO_WritePin(MBA_CONTACTOR_GPIO_Port, MBA_CONTACTOR_Pin, GPIO_PIN_SET);
 800241a:	2201      	movs	r2, #1
 800241c:	2110      	movs	r1, #16
 800241e:	4809      	ldr	r0, [pc, #36]	; (8002444 <switchContactor+0x40>)
 8002420:	f006 fd41 	bl	8008ea6 <HAL_GPIO_WritePin>
		break;
 8002424:	e005      	b.n	8002432 <switchContactor+0x2e>
		HAL_GPIO_WritePin(MBA_CONTACTOR_GPIO_Port, MBA_CONTACTOR_Pin, GPIO_PIN_RESET);
 8002426:	2200      	movs	r2, #0
 8002428:	2110      	movs	r1, #16
 800242a:	4806      	ldr	r0, [pc, #24]	; (8002444 <switchContactor+0x40>)
 800242c:	f006 fd3b 	bl	8008ea6 <HAL_GPIO_WritePin>
		break;
 8002430:	bf00      	nop
	}
	// send MBA status to Server
	triggerTaskflag(TASK_SEND_MBA_STATUS, FLAG_EN);
 8002432:	2101      	movs	r1, #1
 8002434:	2004      	movs	r0, #4
 8002436:	f003 f95d 	bl	80056f4 <triggerTaskflag>
	return ONofOFF;
 800243a:	79fb      	ldrb	r3, [r7, #7]
}
 800243c:	4618      	mov	r0, r3
 800243e:	3708      	adds	r7, #8
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}
 8002444:	40010800 	.word	0x40010800

08002448 <initSIM>:
//uint8_t connlost = 0;



void initSIM()
{
 8002448:	b580      	push	{r7, lr}
 800244a:	af00      	add	r7, sp, #0
	enableReceiveDMAtoIdle_SIM();
 800244c:	f000 f802 	bl	8002454 <enableReceiveDMAtoIdle_SIM>
//	SIM_sendCMD((uint8_t*)"ATE0",(uint8_t*)"OK", ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, 1000);
}
 8002450:	bf00      	nop
 8002452:	bd80      	pop	{r7, pc}

08002454 <enableReceiveDMAtoIdle_SIM>:
void enableReceiveDMAtoIdle_SIM(void)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	af00      	add	r7, sp, #0
	 HAL_UARTEx_ReceiveToIdle_DMA(SIM_UART, SIMRxbuff, SIM_RXBUFF_SIZE);
 8002458:	2296      	movs	r2, #150	; 0x96
 800245a:	4907      	ldr	r1, [pc, #28]	; (8002478 <enableReceiveDMAtoIdle_SIM+0x24>)
 800245c:	4807      	ldr	r0, [pc, #28]	; (800247c <enableReceiveDMAtoIdle_SIM+0x28>)
 800245e:	f008 fda4 	bl	800afaa <HAL_UARTEx_ReceiveToIdle_DMA>
	  __HAL_DMA_DISABLE_IT(SIM_DMA_UART,DMA_IT_HT);
 8002462:	4b07      	ldr	r3, [pc, #28]	; (8002480 <enableReceiveDMAtoIdle_SIM+0x2c>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	4b05      	ldr	r3, [pc, #20]	; (8002480 <enableReceiveDMAtoIdle_SIM+0x2c>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f022 0204 	bic.w	r2, r2, #4
 8002470:	601a      	str	r2, [r3, #0]
}
 8002472:	bf00      	nop
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	2000110c 	.word	0x2000110c
 800247c:	20002a58 	.word	0x20002a58
 8002480:	20002b30 	.word	0x20002b30

08002484 <SIM_callback>:

void SIM_callback(uint16_t Size)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0
 800248a:	4603      	mov	r3, r0
 800248c:	80fb      	strh	r3, [r7, #6]


		oldPos = newPos;  // Update the last position before copying new data
 800248e:	4b5c      	ldr	r3, [pc, #368]	; (8002600 <SIM_callback+0x17c>)
 8002490:	881a      	ldrh	r2, [r3, #0]
 8002492:	4b5c      	ldr	r3, [pc, #368]	; (8002604 <SIM_callback+0x180>)
 8002494:	801a      	strh	r2, [r3, #0]

		/* If the data in large and it is about to exceed the buffer size, we have to route it to the start of the buffer
		 * This is to maintain the circular buffer
		 * The old data in the main buffer will be overlapped
		 */
		if (oldPos+Size > SIM_BUFF_SIZE)  // If the current position + new data size is greater than the main buffer
 8002496:	4b5b      	ldr	r3, [pc, #364]	; (8002604 <SIM_callback+0x180>)
 8002498:	881b      	ldrh	r3, [r3, #0]
 800249a:	461a      	mov	r2, r3
 800249c:	88fb      	ldrh	r3, [r7, #6]
 800249e:	4413      	add	r3, r2
 80024a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024a4:	dd22      	ble.n	80024ec <SIM_callback+0x68>
		{
			uint16_t datatocopy = SIM_BUFF_SIZE-oldPos;  // find out how much space is left in the main buffer
 80024a6:	4b57      	ldr	r3, [pc, #348]	; (8002604 <SIM_callback+0x180>)
 80024a8:	881b      	ldrh	r3, [r3, #0]
 80024aa:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80024ae:	81fb      	strh	r3, [r7, #14]
			memcpy ((uint8_t *)SIMbuff+oldPos, (uint8_t *)SIMRxbuff, datatocopy);  // copy data in that remaining space
 80024b0:	4b54      	ldr	r3, [pc, #336]	; (8002604 <SIM_callback+0x180>)
 80024b2:	881b      	ldrh	r3, [r3, #0]
 80024b4:	461a      	mov	r2, r3
 80024b6:	4b54      	ldr	r3, [pc, #336]	; (8002608 <SIM_callback+0x184>)
 80024b8:	4413      	add	r3, r2
 80024ba:	89fa      	ldrh	r2, [r7, #14]
 80024bc:	4953      	ldr	r1, [pc, #332]	; (800260c <SIM_callback+0x188>)
 80024be:	4618      	mov	r0, r3
 80024c0:	f009 fe3a 	bl	800c138 <memcpy>

			oldPos = 0;  // point to the start of the buffer
 80024c4:	4b4f      	ldr	r3, [pc, #316]	; (8002604 <SIM_callback+0x180>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	801a      	strh	r2, [r3, #0]
			memcpy ((uint8_t *)SIMbuff, (uint8_t *)SIMRxbuff+datatocopy, (Size-datatocopy));  // copy the remaining data
 80024ca:	89fb      	ldrh	r3, [r7, #14]
 80024cc:	4a4f      	ldr	r2, [pc, #316]	; (800260c <SIM_callback+0x188>)
 80024ce:	1899      	adds	r1, r3, r2
 80024d0:	88fa      	ldrh	r2, [r7, #6]
 80024d2:	89fb      	ldrh	r3, [r7, #14]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	461a      	mov	r2, r3
 80024d8:	484b      	ldr	r0, [pc, #300]	; (8002608 <SIM_callback+0x184>)
 80024da:	f009 fe2d 	bl	800c138 <memcpy>
			newPos = (Size-datatocopy);  // update the position
 80024de:	88fa      	ldrh	r2, [r7, #6]
 80024e0:	89fb      	ldrh	r3, [r7, #14]
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	b29a      	uxth	r2, r3
 80024e6:	4b46      	ldr	r3, [pc, #280]	; (8002600 <SIM_callback+0x17c>)
 80024e8:	801a      	strh	r2, [r3, #0]
 80024ea:	e010      	b.n	800250e <SIM_callback+0x8a>
		/* if the current position + new data size is less than the main buffer
		 * we will simply copy the data into the buffer and update the position
		 */
		else
		{
			memcpy ((uint8_t *)SIMbuff+oldPos, (uint8_t *)SIMRxbuff, Size);
 80024ec:	4b45      	ldr	r3, [pc, #276]	; (8002604 <SIM_callback+0x180>)
 80024ee:	881b      	ldrh	r3, [r3, #0]
 80024f0:	461a      	mov	r2, r3
 80024f2:	4b45      	ldr	r3, [pc, #276]	; (8002608 <SIM_callback+0x184>)
 80024f4:	4413      	add	r3, r2
 80024f6:	88fa      	ldrh	r2, [r7, #6]
 80024f8:	4944      	ldr	r1, [pc, #272]	; (800260c <SIM_callback+0x188>)
 80024fa:	4618      	mov	r0, r3
 80024fc:	f009 fe1c 	bl	800c138 <memcpy>
			newPos = Size+oldPos;
 8002500:	4b40      	ldr	r3, [pc, #256]	; (8002604 <SIM_callback+0x180>)
 8002502:	881a      	ldrh	r2, [r3, #0]
 8002504:	88fb      	ldrh	r3, [r7, #6]
 8002506:	4413      	add	r3, r2
 8002508:	b29a      	uxth	r2, r3
 800250a:	4b3d      	ldr	r3, [pc, #244]	; (8002600 <SIM_callback+0x17c>)
 800250c:	801a      	strh	r2, [r3, #0]

		/* Update the position of the Head
		 * If the current position + new size is less then the buffer size, Head will update normally
		 * Or else the head will be at the new position from the beginning
		 */
		if (head + Size < SIM_BUFF_SIZE ) head = head + Size;
 800250e:	4b40      	ldr	r3, [pc, #256]	; (8002610 <SIM_callback+0x18c>)
 8002510:	881b      	ldrh	r3, [r3, #0]
 8002512:	461a      	mov	r2, r3
 8002514:	88fb      	ldrh	r3, [r7, #6]
 8002516:	4413      	add	r3, r2
 8002518:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800251c:	da07      	bge.n	800252e <SIM_callback+0xaa>
 800251e:	4b3c      	ldr	r3, [pc, #240]	; (8002610 <SIM_callback+0x18c>)
 8002520:	881a      	ldrh	r2, [r3, #0]
 8002522:	88fb      	ldrh	r3, [r7, #6]
 8002524:	4413      	add	r3, r2
 8002526:	b29a      	uxth	r2, r3
 8002528:	4b39      	ldr	r3, [pc, #228]	; (8002610 <SIM_callback+0x18c>)
 800252a:	801a      	strh	r2, [r3, #0]
 800252c:	e009      	b.n	8002542 <SIM_callback+0xbe>
		else head = head + Size - SIM_BUFF_SIZE;
 800252e:	4b38      	ldr	r3, [pc, #224]	; (8002610 <SIM_callback+0x18c>)
 8002530:	881a      	ldrh	r2, [r3, #0]
 8002532:	88fb      	ldrh	r3, [r7, #6]
 8002534:	4413      	add	r3, r2
 8002536:	b29b      	uxth	r3, r3
 8002538:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 800253c:	b29a      	uxth	r2, r3
 800253e:	4b34      	ldr	r3, [pc, #208]	; (8002610 <SIM_callback+0x18c>)
 8002540:	801a      	strh	r2, [r3, #0]

		/* start the DMA again */
		enableReceiveDMAtoIdle_SIM();
 8002542:	f7ff ff87 	bl	8002454 <enableReceiveDMAtoIdle_SIM>

		// New SMS coming
		if (isWordinBuff(SIMRxbuff, Size, (uint8_t*)"+CMTI: \"SM\"") != NULL)
 8002546:	88fb      	ldrh	r3, [r7, #6]
 8002548:	4a32      	ldr	r2, [pc, #200]	; (8002614 <SIM_callback+0x190>)
 800254a:	4619      	mov	r1, r3
 800254c:	482f      	ldr	r0, [pc, #188]	; (800260c <SIM_callback+0x188>)
 800254e:	f002 fec9 	bl	80052e4 <isWordinBuff>
 8002552:	4603      	mov	r3, r0
 8002554:	2b00      	cmp	r3, #0
 8002556:	d002      	beq.n	800255e <SIM_callback+0xda>
		{
			newSMS = 1;
 8002558:	4b2f      	ldr	r3, [pc, #188]	; (8002618 <SIM_callback+0x194>)
 800255a:	2201      	movs	r2, #1
 800255c:	701a      	strb	r2, [r3, #0]
		}

		// Read SMS
		if (isWordinBuff(SIMRxbuff, Size, (uint8_t*)"+CMGR:") != NULL)	{
 800255e:	88fb      	ldrh	r3, [r7, #6]
 8002560:	4a2e      	ldr	r2, [pc, #184]	; (800261c <SIM_callback+0x198>)
 8002562:	4619      	mov	r1, r3
 8002564:	4829      	ldr	r0, [pc, #164]	; (800260c <SIM_callback+0x188>)
 8002566:	f002 febd 	bl	80052e4 <isWordinBuff>
 800256a:	4603      	mov	r3, r0
 800256c:	2b00      	cmp	r3, #0
 800256e:	d008      	beq.n	8002582 <SIM_callback+0xfe>
			memcpy(SMS_Rxbuff, SIMRxbuff, Size);
 8002570:	88fb      	ldrh	r3, [r7, #6]
 8002572:	461a      	mov	r2, r3
 8002574:	4925      	ldr	r1, [pc, #148]	; (800260c <SIM_callback+0x188>)
 8002576:	482a      	ldr	r0, [pc, #168]	; (8002620 <SIM_callback+0x19c>)
 8002578:	f009 fdde 	bl	800c138 <memcpy>
			SMS_len = Size;
 800257c:	4a29      	ldr	r2, [pc, #164]	; (8002624 <SIM_callback+0x1a0>)
 800257e:	88fb      	ldrh	r3, [r7, #6]
 8002580:	8013      	strh	r3, [r2, #0]
		}
		if (isWordinBuff(SIMRxbuff, Size, (uint8_t*)"+CMGL: ") != NULL)	{
 8002582:	88fb      	ldrh	r3, [r7, #6]
 8002584:	4a28      	ldr	r2, [pc, #160]	; (8002628 <SIM_callback+0x1a4>)
 8002586:	4619      	mov	r1, r3
 8002588:	4820      	ldr	r0, [pc, #128]	; (800260c <SIM_callback+0x188>)
 800258a:	f002 feab 	bl	80052e4 <isWordinBuff>
 800258e:	4603      	mov	r3, r0
 8002590:	2b00      	cmp	r3, #0
 8002592:	d008      	beq.n	80025a6 <SIM_callback+0x122>
			memcpy(SMS_Rxbuff, SIMRxbuff, Size);
 8002594:	88fb      	ldrh	r3, [r7, #6]
 8002596:	461a      	mov	r2, r3
 8002598:	491c      	ldr	r1, [pc, #112]	; (800260c <SIM_callback+0x188>)
 800259a:	4821      	ldr	r0, [pc, #132]	; (8002620 <SIM_callback+0x19c>)
 800259c:	f009 fdcc 	bl	800c138 <memcpy>
			SMS_len = Size;
 80025a0:	4a20      	ldr	r2, [pc, #128]	; (8002624 <SIM_callback+0x1a0>)
 80025a2:	88fb      	ldrh	r3, [r7, #6]
 80025a4:	8013      	strh	r3, [r2, #0]
		}
		// New MQTT message
		if ( (isWordinBuff(SIMRxbuff, Size, (uint8_t*) "+CMQTTRXSTART:") != NULL)
 80025a6:	88fb      	ldrh	r3, [r7, #6]
 80025a8:	4a20      	ldr	r2, [pc, #128]	; (800262c <SIM_callback+0x1a8>)
 80025aa:	4619      	mov	r1, r3
 80025ac:	4817      	ldr	r0, [pc, #92]	; (800260c <SIM_callback+0x188>)
 80025ae:	f002 fe99 	bl	80052e4 <isWordinBuff>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d013      	beq.n	80025e0 <SIM_callback+0x15c>
				&& ( isWordinBuff(SIMRxbuff, Size,(uint8_t*) "+CMQTTRXEND:") != NULL ) )  	{
 80025b8:	88fb      	ldrh	r3, [r7, #6]
 80025ba:	4a1d      	ldr	r2, [pc, #116]	; (8002630 <SIM_callback+0x1ac>)
 80025bc:	4619      	mov	r1, r3
 80025be:	4813      	ldr	r0, [pc, #76]	; (800260c <SIM_callback+0x188>)
 80025c0:	f002 fe90 	bl	80052e4 <isWordinBuff>
 80025c4:	4603      	mov	r3, r0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d00a      	beq.n	80025e0 <SIM_callback+0x15c>
			memcpy(MQTT_Rxbuff, SIMRxbuff, Size);
 80025ca:	88fb      	ldrh	r3, [r7, #6]
 80025cc:	461a      	mov	r2, r3
 80025ce:	490f      	ldr	r1, [pc, #60]	; (800260c <SIM_callback+0x188>)
 80025d0:	4818      	ldr	r0, [pc, #96]	; (8002634 <SIM_callback+0x1b0>)
 80025d2:	f009 fdb1 	bl	800c138 <memcpy>
			MQTT_receive(MQTT_Rxbuff, Size);
 80025d6:	88fb      	ldrh	r3, [r7, #6]
 80025d8:	4619      	mov	r1, r3
 80025da:	4816      	ldr	r0, [pc, #88]	; (8002634 <SIM_callback+0x1b0>)
 80025dc:	f002 fb3c 	bl	8004c58 <MQTT_receive>
		}

		if  (isWordinBuff(SIMRxbuff, Size, (uint8_t*)"+CMQTTCONNLOST:") != NULL) 	{
 80025e0:	88fb      	ldrh	r3, [r7, #6]
 80025e2:	4a15      	ldr	r2, [pc, #84]	; (8002638 <SIM_callback+0x1b4>)
 80025e4:	4619      	mov	r1, r3
 80025e6:	4809      	ldr	r0, [pc, #36]	; (800260c <SIM_callback+0x188>)
 80025e8:	f002 fe7c 	bl	80052e4 <isWordinBuff>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d002      	beq.n	80025f8 <SIM_callback+0x174>
			mySIM.mqttServer.connect = 0;
 80025f2:	4b12      	ldr	r3, [pc, #72]	; (800263c <SIM_callback+0x1b8>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	739a      	strb	r2, [r3, #14]
		}
//		Serial_log_string("Rx: ");
//		Serial_log_buffer(SIMRxbuff, Size);
//		Serial_log_string(" ");

}
 80025f8:	bf00      	nop
 80025fa:	3710      	adds	r7, #16
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	20000f0a 	.word	0x20000f0a
 8002604:	20000f08 	.word	0x20000f08
 8002608:	20000f0c 	.word	0x20000f0c
 800260c:	2000110c 	.word	0x2000110c
 8002610:	20001368 	.word	0x20001368
 8002614:	0800ed3c 	.word	0x0800ed3c
 8002618:	2000136c 	.word	0x2000136c
 800261c:	0800ed48 	.word	0x0800ed48
 8002620:	200011a4 	.word	0x200011a4
 8002624:	2000136e 	.word	0x2000136e
 8002628:	0800ed50 	.word	0x0800ed50
 800262c:	0800ed58 	.word	0x0800ed58
 8002630:	0800ed68 	.word	0x0800ed68
 8002634:	2000123c 	.word	0x2000123c
 8002638:	0800ed78 	.word	0x0800ed78
 800263c:	20001770 	.word	0x20001770

08002640 <SIM_checkMsg>:

SIM_res_t SIM_checkMsg(uint8_t *Msg, uint16_t timeout)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 8002646:	af00      	add	r7, sp, #0
 8002648:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800264c:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8002650:	6018      	str	r0, [r3, #0]
 8002652:	460a      	mov	r2, r1
 8002654:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8002658:	f2a3 230e 	subw	r3, r3, #526	; 0x20e
 800265c:	801a      	strh	r2, [r3, #0]
	SIM_res_t res= SIM_NO_RES;
 800265e:	2302      	movs	r3, #2
 8002660:	f887 320b 	strb.w	r3, [r7, #523]	; 0x20b
	uint8_t dataSize = 0;
 8002664:	2300      	movs	r3, #0
 8002666:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
	uint8_t tmpdbuff[SIM_BUFF_SIZE];
	memset( (char*)tmpdbuff, 0, SIM_BUFF_SIZE );
 800266a:	f107 0308 	add.w	r3, r7, #8
 800266e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002672:	2100      	movs	r1, #0
 8002674:	4618      	mov	r0, r3
 8002676:	f009 fd6d 	bl	800c154 <memset>
//	HAL_Delay(timeout);
	timeout /= 10;
 800267a:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800267e:	f2a3 230e 	subw	r3, r3, #526	; 0x20e
 8002682:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8002686:	f2a2 220e 	subw	r2, r2, #526	; 0x20e
 800268a:	8812      	ldrh	r2, [r2, #0]
 800268c:	4945      	ldr	r1, [pc, #276]	; (80027a4 <SIM_checkMsg+0x164>)
 800268e:	fba1 1202 	umull	r1, r2, r1, r2
 8002692:	08d2      	lsrs	r2, r2, #3
 8002694:	801a      	strh	r2, [r3, #0]
	for (uint16_t i = 0; i < 10 ; i++)
 8002696:	2300      	movs	r3, #0
 8002698:	f8a7 320c 	strh.w	r3, [r7, #524]	; 0x20c
 800269c:	e076      	b.n	800278c <SIM_checkMsg+0x14c>
	{
		HAL_Delay(timeout);
 800269e:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80026a2:	f2a3 230e 	subw	r3, r3, #526	; 0x20e
 80026a6:	881b      	ldrh	r3, [r3, #0]
 80026a8:	4618      	mov	r0, r3
 80026aa:	f005 fa8f 	bl	8007bcc <HAL_Delay>

		if (head > tail)
 80026ae:	4b3e      	ldr	r3, [pc, #248]	; (80027a8 <SIM_checkMsg+0x168>)
 80026b0:	881a      	ldrh	r2, [r3, #0]
 80026b2:	4b3e      	ldr	r3, [pc, #248]	; (80027ac <SIM_checkMsg+0x16c>)
 80026b4:	881b      	ldrh	r3, [r3, #0]
 80026b6:	429a      	cmp	r2, r3
 80026b8:	d915      	bls.n	80026e6 <SIM_checkMsg+0xa6>
		{
			dataSize = head - tail ;
 80026ba:	4b3b      	ldr	r3, [pc, #236]	; (80027a8 <SIM_checkMsg+0x168>)
 80026bc:	881b      	ldrh	r3, [r3, #0]
 80026be:	b2da      	uxtb	r2, r3
 80026c0:	4b3a      	ldr	r3, [pc, #232]	; (80027ac <SIM_checkMsg+0x16c>)
 80026c2:	881b      	ldrh	r3, [r3, #0]
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	1ad3      	subs	r3, r2, r3
 80026c8:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
//			tmpdbuff = (uint8_t*)malloc(dataSize*sizeof(uint8_t));

			memcpy(tmpdbuff, SIMbuff + tail, dataSize);
 80026cc:	4b37      	ldr	r3, [pc, #220]	; (80027ac <SIM_checkMsg+0x16c>)
 80026ce:	881b      	ldrh	r3, [r3, #0]
 80026d0:	461a      	mov	r2, r3
 80026d2:	4b37      	ldr	r3, [pc, #220]	; (80027b0 <SIM_checkMsg+0x170>)
 80026d4:	18d1      	adds	r1, r2, r3
 80026d6:	f897 220f 	ldrb.w	r2, [r7, #527]	; 0x20f
 80026da:	f107 0308 	add.w	r3, r7, #8
 80026de:	4618      	mov	r0, r3
 80026e0:	f009 fd2a 	bl	800c138 <memcpy>
 80026e4:	e02e      	b.n	8002744 <SIM_checkMsg+0x104>
		}
		else if ( head < tail )
 80026e6:	4b30      	ldr	r3, [pc, #192]	; (80027a8 <SIM_checkMsg+0x168>)
 80026e8:	881a      	ldrh	r2, [r3, #0]
 80026ea:	4b30      	ldr	r3, [pc, #192]	; (80027ac <SIM_checkMsg+0x16c>)
 80026ec:	881b      	ldrh	r3, [r3, #0]
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d225      	bcs.n	800273e <SIM_checkMsg+0xfe>
		{
			dataSize = SIM_BUFF_SIZE - tail + head ;
 80026f2:	4b2d      	ldr	r3, [pc, #180]	; (80027a8 <SIM_checkMsg+0x168>)
 80026f4:	881b      	ldrh	r3, [r3, #0]
 80026f6:	b2da      	uxtb	r2, r3
 80026f8:	4b2c      	ldr	r3, [pc, #176]	; (80027ac <SIM_checkMsg+0x16c>)
 80026fa:	881b      	ldrh	r3, [r3, #0]
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
//		 	tmpdbuff = (uint8_t*)malloc(dataSize*sizeof(uint8_t));
			memcpy(tmpdbuff, SIMbuff + tail, SIM_BUFF_SIZE - tail);
 8002704:	4b29      	ldr	r3, [pc, #164]	; (80027ac <SIM_checkMsg+0x16c>)
 8002706:	881b      	ldrh	r3, [r3, #0]
 8002708:	461a      	mov	r2, r3
 800270a:	4b29      	ldr	r3, [pc, #164]	; (80027b0 <SIM_checkMsg+0x170>)
 800270c:	18d1      	adds	r1, r2, r3
 800270e:	4b27      	ldr	r3, [pc, #156]	; (80027ac <SIM_checkMsg+0x16c>)
 8002710:	881b      	ldrh	r3, [r3, #0]
 8002712:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8002716:	461a      	mov	r2, r3
 8002718:	f107 0308 	add.w	r3, r7, #8
 800271c:	4618      	mov	r0, r3
 800271e:	f009 fd0b 	bl	800c138 <memcpy>
			memcpy(tmpdbuff + SIM_BUFF_SIZE - tail, SIMbuff, head);
 8002722:	4b22      	ldr	r3, [pc, #136]	; (80027ac <SIM_checkMsg+0x16c>)
 8002724:	881b      	ldrh	r3, [r3, #0]
 8002726:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800272a:	f107 0208 	add.w	r2, r7, #8
 800272e:	4413      	add	r3, r2
 8002730:	4a1d      	ldr	r2, [pc, #116]	; (80027a8 <SIM_checkMsg+0x168>)
 8002732:	8812      	ldrh	r2, [r2, #0]
 8002734:	491e      	ldr	r1, [pc, #120]	; (80027b0 <SIM_checkMsg+0x170>)
 8002736:	4618      	mov	r0, r3
 8002738:	f009 fcfe 	bl	800c138 <memcpy>
 800273c:	e002      	b.n	8002744 <SIM_checkMsg+0x104>
		}
		else {
			return res;
 800273e:	f897 320b 	ldrb.w	r3, [r7, #523]	; 0x20b
 8002742:	e029      	b.n	8002798 <SIM_checkMsg+0x158>
//			continue;
		}

		if ( isWordinBuff(tmpdbuff, dataSize, Msg) != NULL )	{
 8002744:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8002748:	b299      	uxth	r1, r3
 800274a:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800274e:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8002752:	f107 0008 	add.w	r0, r7, #8
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	f002 fdc4 	bl	80052e4 <isWordinBuff>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d001      	beq.n	8002766 <SIM_checkMsg+0x126>
//			Serial_log_number(tail);
//			Serial_log_string(" ");
//			Serial_log_string("\nhead: ");
//			Serial_log_number(head);
//			Serial_log_string(" ");
			return SIM_RES_MSG ;
 8002762:	2301      	movs	r3, #1
 8002764:	e018      	b.n	8002798 <SIM_checkMsg+0x158>
		}

		if ( isWordinBuff(tmpdbuff, dataSize, (uint8_t*)"ERROR") != NULL )	{
 8002766:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 800276a:	b299      	uxth	r1, r3
 800276c:	f107 0308 	add.w	r3, r7, #8
 8002770:	4a10      	ldr	r2, [pc, #64]	; (80027b4 <SIM_checkMsg+0x174>)
 8002772:	4618      	mov	r0, r3
 8002774:	f002 fdb6 	bl	80052e4 <isWordinBuff>
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d001      	beq.n	8002782 <SIM_checkMsg+0x142>
//			Serial_log_string("err: ");
//			Serial_log_buffer(tmpdbuff, dataSize);
//			Serial_log_string(";");
			return SIM_ERROR ;
 800277e:	2300      	movs	r3, #0
 8002780:	e00a      	b.n	8002798 <SIM_checkMsg+0x158>
	for (uint16_t i = 0; i < 10 ; i++)
 8002782:	f8b7 320c 	ldrh.w	r3, [r7, #524]	; 0x20c
 8002786:	3301      	adds	r3, #1
 8002788:	f8a7 320c 	strh.w	r3, [r7, #524]	; 0x20c
 800278c:	f8b7 320c 	ldrh.w	r3, [r7, #524]	; 0x20c
 8002790:	2b09      	cmp	r3, #9
 8002792:	d984      	bls.n	800269e <SIM_checkMsg+0x5e>
//	Serial_log_number(tail);
//	Serial_log_string(" ");
//	Serial_log_string("\nhead: ");
//	Serial_log_number(head);
//	Serial_log_string(" ");
 	return res;
 8002794:	f897 320b 	ldrb.w	r3, [r7, #523]	; 0x20b

}
 8002798:	4618      	mov	r0, r3
 800279a:	f507 7704 	add.w	r7, r7, #528	; 0x210
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	cccccccd 	.word	0xcccccccd
 80027a8:	20001368 	.word	0x20001368
 80027ac:	2000136a 	.word	0x2000136a
 80027b0:	20000f0c 	.word	0x20000f0c
 80027b4:	0800ed88 	.word	0x0800ed88

080027b8 <SIM_sendCMD>:

SIM_res_t SIM_sendCMD(uint8_t *cmd, uint8_t *checkResMsg, uint8_t CheckResENorDIS, uint8_t ENorDISmarkasread, uint32_t timeout)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b0a6      	sub	sp, #152	; 0x98
 80027bc:	af00      	add	r7, sp, #0
 80027be:	60f8      	str	r0, [r7, #12]
 80027c0:	60b9      	str	r1, [r7, #8]
 80027c2:	4611      	mov	r1, r2
 80027c4:	461a      	mov	r2, r3
 80027c6:	460b      	mov	r3, r1
 80027c8:	71fb      	strb	r3, [r7, #7]
 80027ca:	4613      	mov	r3, r2
 80027cc:	71bb      	strb	r3, [r7, #6]
	uint8_t SIM_Txbuff[128];
	uint8_t len = sprintf( (char*)SIM_Txbuff, "%s\r\n", cmd);
 80027ce:	f107 0314 	add.w	r3, r7, #20
 80027d2:	68fa      	ldr	r2, [r7, #12]
 80027d4:	4915      	ldr	r1, [pc, #84]	; (800282c <SIM_sendCMD+0x74>)
 80027d6:	4618      	mov	r0, r3
 80027d8:	f00a f822 	bl	800c820 <siprintf>
 80027dc:	4603      	mov	r3, r0
 80027de:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	HAL_UART_Transmit(SIM_UART, SIM_Txbuff, len, 0xFFFF) ;
 80027e2:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80027e6:	b29a      	uxth	r2, r3
 80027e8:	f107 0114 	add.w	r1, r7, #20
 80027ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80027f0:	480f      	ldr	r0, [pc, #60]	; (8002830 <SIM_sendCMD+0x78>)
 80027f2:	f008 fb57 	bl	800aea4 <HAL_UART_Transmit>

	if (CheckResENorDIS == ENABLE_SIM_CHECKRES)
 80027f6:	79fb      	ldrb	r3, [r7, #7]
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d111      	bne.n	8002820 <SIM_sendCMD+0x68>
	{
		SIM_res_t res = SIM_checkMsg(checkResMsg, timeout);
 80027fc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002800:	b29b      	uxth	r3, r3
 8002802:	4619      	mov	r1, r3
 8002804:	68b8      	ldr	r0, [r7, #8]
 8002806:	f7ff ff1b 	bl	8002640 <SIM_checkMsg>
 800280a:	4603      	mov	r3, r0
 800280c:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
		if (ENorDISmarkasread == ENABLE_MARKASREAD)
 8002810:	79bb      	ldrb	r3, [r7, #6]
 8002812:	2b01      	cmp	r3, #1
 8002814:	d101      	bne.n	800281a <SIM_sendCMD+0x62>
		{
			MarkAsReadData_SIM();
 8002816:	f000 f87f 	bl	8002918 <MarkAsReadData_SIM>
		}
//		Serial_log_string("Res of CMD: ");
//		Serial_log_buffer(cmd, len);
//		Serial_log_number(res);
		return res;
 800281a:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 800281e:	e000      	b.n	8002822 <SIM_sendCMD+0x6a>
	}
	return SIM_NO_RES;
 8002820:	2302      	movs	r3, #2
}
 8002822:	4618      	mov	r0, r3
 8002824:	3798      	adds	r7, #152	; 0x98
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	0800ed90 	.word	0x0800ed90
 8002830:	20002a58 	.word	0x20002a58

08002834 <SIM_checkCMD>:
/*
 * Return : 1 success
 * 			0 fail
 */
uint8_t SIM_checkCMD (SIM_CMD_t cmd)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b086      	sub	sp, #24
 8002838:	af02      	add	r7, sp, #8
 800283a:	4603      	mov	r3, r0
 800283c:	71fb      	strb	r3, [r7, #7]
	uint8_t res = 0;
 800283e:	2300      	movs	r3, #0
 8002840:	73fb      	strb	r3, [r7, #15]
//	SIM_res_t check;
	switch (cmd) {
 8002842:	79fb      	ldrb	r3, [r7, #7]
 8002844:	2b04      	cmp	r3, #4
 8002846:	d849      	bhi.n	80028dc <SIM_checkCMD+0xa8>
 8002848:	a201      	add	r2, pc, #4	; (adr r2, 8002850 <SIM_checkCMD+0x1c>)
 800284a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800284e:	bf00      	nop
 8002850:	08002865 	.word	0x08002865
 8002854:	080028bf 	.word	0x080028bf
 8002858:	080028a1 	.word	0x080028a1
 800285c:	08002883 	.word	0x08002883
 8002860:	080028dd 	.word	0x080028dd
		case SIM_CMD_SIMCARD_PIN:
			if ( SIM_sendCMD( (uint8_t*)"AT+CPIN?", (uint8_t*)"+CPIN: READY", ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, SIM_TIMEOUT_SHORT) == SIM_RES_MSG ) {
 8002864:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002868:	9300      	str	r3, [sp, #0]
 800286a:	2301      	movs	r3, #1
 800286c:	2201      	movs	r2, #1
 800286e:	4922      	ldr	r1, [pc, #136]	; (80028f8 <SIM_checkCMD+0xc4>)
 8002870:	4822      	ldr	r0, [pc, #136]	; (80028fc <SIM_checkCMD+0xc8>)
 8002872:	f7ff ffa1 	bl	80027b8 <SIM_sendCMD>
 8002876:	4603      	mov	r3, r0
 8002878:	2b01      	cmp	r3, #1
 800287a:	d131      	bne.n	80028e0 <SIM_checkCMD+0xac>
				res = 1;
 800287c:	2301      	movs	r3, #1
 800287e:	73fb      	strb	r3, [r7, #15]
//				Serial_log_string("SIM card READY\r\n");
			}
			break;
 8002880:	e02e      	b.n	80028e0 <SIM_checkCMD+0xac>
		case SIM_CMD_NW_CPSI:
			if ( SIM_sendCMD( (uint8_t*)"AT+CPSI?", (uint8_t*)"+CPSI: NO SERVICE", ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, SIM_TIMEOUT_SHORT) == SIM_RES_MSG ) {
 8002882:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002886:	9300      	str	r3, [sp, #0]
 8002888:	2301      	movs	r3, #1
 800288a:	2201      	movs	r2, #1
 800288c:	491c      	ldr	r1, [pc, #112]	; (8002900 <SIM_checkCMD+0xcc>)
 800288e:	481d      	ldr	r0, [pc, #116]	; (8002904 <SIM_checkCMD+0xd0>)
 8002890:	f7ff ff92 	bl	80027b8 <SIM_sendCMD>
 8002894:	4603      	mov	r3, r0
 8002896:	2b01      	cmp	r3, #1
 8002898:	d024      	beq.n	80028e4 <SIM_checkCMD+0xb0>
//				Serial_log_string("NO SERVICE, network status has some problem");
			}
			else {
				res = 1;
 800289a:	2301      	movs	r3, #1
 800289c:	73fb      	strb	r3, [r7, #15]
//				Serial_log_string("SERVICE available\r\n");
			}
			break;
 800289e:	e021      	b.n	80028e4 <SIM_checkCMD+0xb0>
		case SIM_CMD_NW_CREG:
			if ( SIM_sendCMD( (uint8_t*)"AT+CREG?", (uint8_t*)"+CREG: 0,1", ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, SIM_TIMEOUT_SHORT) == SIM_RES_MSG ) {
 80028a0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80028a4:	9300      	str	r3, [sp, #0]
 80028a6:	2301      	movs	r3, #1
 80028a8:	2201      	movs	r2, #1
 80028aa:	4917      	ldr	r1, [pc, #92]	; (8002908 <SIM_checkCMD+0xd4>)
 80028ac:	4817      	ldr	r0, [pc, #92]	; (800290c <SIM_checkCMD+0xd8>)
 80028ae:	f7ff ff83 	bl	80027b8 <SIM_sendCMD>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d117      	bne.n	80028e8 <SIM_checkCMD+0xb4>
				res = 1;
 80028b8:	2301      	movs	r3, #1
 80028ba:	73fb      	strb	r3, [r7, #15]
//				Serial_log_string("Module is registered to CS domain\r\n");
			}
			break;
 80028bc:	e014      	b.n	80028e8 <SIM_checkCMD+0xb4>
		case SIM_CMD_PACKDOM_CGREG:

			break;
		case SIM_CMD_STA_CSQ:
			if ( SIM_sendCMD( (uint8_t*)"AT+CSQ", (uint8_t*)"+CSQ: 99", ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, SIM_TIMEOUT_SHORT) == SIM_RES_MSG ) {
 80028be:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80028c2:	9300      	str	r3, [sp, #0]
 80028c4:	2301      	movs	r3, #1
 80028c6:	2201      	movs	r2, #1
 80028c8:	4911      	ldr	r1, [pc, #68]	; (8002910 <SIM_checkCMD+0xdc>)
 80028ca:	4812      	ldr	r0, [pc, #72]	; (8002914 <SIM_checkCMD+0xe0>)
 80028cc:	f7ff ff74 	bl	80027b8 <SIM_sendCMD>
 80028d0:	4603      	mov	r3, r0
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d00a      	beq.n	80028ec <SIM_checkCMD+0xb8>
//				Serial_log_string("Signal quality is bad, please check SIM card or reboot the module\r\n");
			}
			else {
				res = 1;
 80028d6:	2301      	movs	r3, #1
 80028d8:	73fb      	strb	r3, [r7, #15]
//				Serial_log_string("Signal quality is good\r\n");
			}
			break;
 80028da:	e007      	b.n	80028ec <SIM_checkCMD+0xb8>
		default :
			break;
 80028dc:	bf00      	nop
 80028de:	e006      	b.n	80028ee <SIM_checkCMD+0xba>
			break;
 80028e0:	bf00      	nop
 80028e2:	e004      	b.n	80028ee <SIM_checkCMD+0xba>
			break;
 80028e4:	bf00      	nop
 80028e6:	e002      	b.n	80028ee <SIM_checkCMD+0xba>
			break;
 80028e8:	bf00      	nop
 80028ea:	e000      	b.n	80028ee <SIM_checkCMD+0xba>
			break;
 80028ec:	bf00      	nop
	}
	return res;
 80028ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3710      	adds	r7, #16
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	0800ed98 	.word	0x0800ed98
 80028fc:	0800eda8 	.word	0x0800eda8
 8002900:	0800edb4 	.word	0x0800edb4
 8002904:	0800edc8 	.word	0x0800edc8
 8002908:	0800edd4 	.word	0x0800edd4
 800290c:	0800ede0 	.word	0x0800ede0
 8002910:	0800edec 	.word	0x0800edec
 8002914:	0800edf8 	.word	0x0800edf8

08002918 <MarkAsReadData_SIM>:


}

void MarkAsReadData_SIM(void)
{
 8002918:	b480      	push	{r7}
 800291a:	af00      	add	r7, sp, #0
	tail = head;
 800291c:	4b03      	ldr	r3, [pc, #12]	; (800292c <MarkAsReadData_SIM+0x14>)
 800291e:	881a      	ldrh	r2, [r3, #0]
 8002920:	4b03      	ldr	r3, [pc, #12]	; (8002930 <MarkAsReadData_SIM+0x18>)
 8002922:	801a      	strh	r2, [r3, #0]
}
 8002924:	bf00      	nop
 8002926:	46bd      	mov	sp, r7
 8002928:	bc80      	pop	{r7}
 800292a:	4770      	bx	lr
 800292c:	20001368 	.word	0x20001368
 8002930:	2000136a 	.word	0x2000136a

08002934 <getAfterword>:

uint16_t getAfterword(uint8_t *srcBuffer, uint16_t srcBufferlen, uint8_t *word, uint8_t *getBuffer)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b086      	sub	sp, #24
 8002938:	af00      	add	r7, sp, #0
 800293a:	60f8      	str	r0, [r7, #12]
 800293c:	607a      	str	r2, [r7, #4]
 800293e:	603b      	str	r3, [r7, #0]
 8002940:	460b      	mov	r3, r1
 8002942:	817b      	strh	r3, [r7, #10]
	uint16_t remainlen = 0;
 8002944:	2300      	movs	r3, #0
 8002946:	82fb      	strh	r3, [r7, #22]
	uint8_t *currPOS = isWordinBuff(srcBuffer, srcBufferlen, word);
 8002948:	897b      	ldrh	r3, [r7, #10]
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	4619      	mov	r1, r3
 800294e:	68f8      	ldr	r0, [r7, #12]
 8002950:	f002 fcc8 	bl	80052e4 <isWordinBuff>
 8002954:	6138      	str	r0, [r7, #16]
	if ( currPOS == NULL ) return	0;
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d101      	bne.n	8002960 <getAfterword+0x2c>
 800295c:	2300      	movs	r3, #0
 800295e:	e015      	b.n	800298c <getAfterword+0x58>
	currPOS += strlen((char*)word);
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	f7fd fbf3 	bl	800014c <strlen>
 8002966:	4602      	mov	r2, r0
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	4413      	add	r3, r2
 800296c:	613b      	str	r3, [r7, #16]
	remainlen = getRemainsize(currPOS, srcBuffer, srcBufferlen);
 800296e:	897b      	ldrh	r3, [r7, #10]
 8002970:	461a      	mov	r2, r3
 8002972:	68f9      	ldr	r1, [r7, #12]
 8002974:	6938      	ldr	r0, [r7, #16]
 8002976:	f002 fd34 	bl	80053e2 <getRemainsize>
 800297a:	4603      	mov	r3, r0
 800297c:	82fb      	strh	r3, [r7, #22]
	memcpy(getBuffer, currPOS, remainlen);
 800297e:	8afb      	ldrh	r3, [r7, #22]
 8002980:	461a      	mov	r2, r3
 8002982:	6939      	ldr	r1, [r7, #16]
 8002984:	6838      	ldr	r0, [r7, #0]
 8002986:	f009 fbd7 	bl	800c138 <memcpy>
	return remainlen;
 800298a:	8afb      	ldrh	r3, [r7, #22]
}
 800298c:	4618      	mov	r0, r3
 800298e:	3718      	adds	r7, #24
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}

08002994 <stringIDtoHexID>:

uint16_t stringIDtoHexID (uint8_t *stringIDbuffer, uint8_t *hexIDbuffer, const char *separator, ID_t idtype)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b086      	sub	sp, #24
 8002998:	af00      	add	r7, sp, #0
 800299a:	60f8      	str	r0, [r7, #12]
 800299c:	60b9      	str	r1, [r7, #8]
 800299e:	607a      	str	r2, [r7, #4]
 80029a0:	70fb      	strb	r3, [r7, #3]
	uint8_t *token = (uint8_t*)strtok((char*)stringIDbuffer, separator);
 80029a2:	6879      	ldr	r1, [r7, #4]
 80029a4:	68f8      	ldr	r0, [r7, #12]
 80029a6:	f009 ff5b 	bl	800c860 <strtok>
 80029aa:	6178      	str	r0, [r7, #20]
	uint16_t hexbufferlen = 0;
 80029ac:	2300      	movs	r3, #0
 80029ae:	827b      	strh	r3, [r7, #18]

	while (token != NULL)	{
 80029b0:	e01b      	b.n	80029ea <stringIDtoHexID+0x56>
		uint16_t tmp = atoi((char*)token);
 80029b2:	6978      	ldr	r0, [r7, #20]
 80029b4:	f009 fa62 	bl	800be7c <atoi>
 80029b8:	4603      	mov	r3, r0
 80029ba:	823b      	strh	r3, [r7, #16]
		if ( validationID(tmp, idtype) )	{
 80029bc:	78fa      	ldrb	r2, [r7, #3]
 80029be:	8a3b      	ldrh	r3, [r7, #16]
 80029c0:	4611      	mov	r1, r2
 80029c2:	4618      	mov	r0, r3
 80029c4:	f002 ff86 	bl	80058d4 <validationID>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d008      	beq.n	80029e0 <stringIDtoHexID+0x4c>
			hexIDbuffer[hexbufferlen++] = tmp;
 80029ce:	8a7b      	ldrh	r3, [r7, #18]
 80029d0:	1c5a      	adds	r2, r3, #1
 80029d2:	827a      	strh	r2, [r7, #18]
 80029d4:	461a      	mov	r2, r3
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	4413      	add	r3, r2
 80029da:	8a3a      	ldrh	r2, [r7, #16]
 80029dc:	b2d2      	uxtb	r2, r2
 80029de:	701a      	strb	r2, [r3, #0]
		}
		token = (uint8_t*)strtok(NULL, separator);
 80029e0:	6879      	ldr	r1, [r7, #4]
 80029e2:	2000      	movs	r0, #0
 80029e4:	f009 ff3c 	bl	800c860 <strtok>
 80029e8:	6178      	str	r0, [r7, #20]
	while (token != NULL)	{
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d1e0      	bne.n	80029b2 <stringIDtoHexID+0x1e>
	}
	return hexbufferlen;
 80029f0:	8a7b      	ldrh	r3, [r7, #18]
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3718      	adds	r7, #24
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
	...

080029fc <SMS_getPhonenumb>:
	getBetween((uint8_t*)" ", (uint8_t*)",", contentbuffer, contentlen, indexbuffer);
	return atoi((char*)indexbuffer);
}

uint8_t SMS_getPhonenumb (uint8_t *SMSbuffer, uint16_t SMS_bufferlen, uint8_t *Phonenumb_buffer )
{
 80029fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002a00:	b08b      	sub	sp, #44	; 0x2c
 8002a02:	af02      	add	r7, sp, #8
 8002a04:	60f8      	str	r0, [r7, #12]
 8002a06:	460b      	mov	r3, r1
 8002a08:	607a      	str	r2, [r7, #4]
 8002a0a:	817b      	strh	r3, [r7, #10]
 8002a0c:	466b      	mov	r3, sp
 8002a0e:	461e      	mov	r6, r3
	uint8_t contentbuffer[SMS_bufferlen];
 8002a10:	8979      	ldrh	r1, [r7, #10]
 8002a12:	460b      	mov	r3, r1
 8002a14:	3b01      	subs	r3, #1
 8002a16:	61bb      	str	r3, [r7, #24]
 8002a18:	b28b      	uxth	r3, r1
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	4698      	mov	r8, r3
 8002a1e:	4691      	mov	r9, r2
 8002a20:	f04f 0200 	mov.w	r2, #0
 8002a24:	f04f 0300 	mov.w	r3, #0
 8002a28:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a2c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a30:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a34:	b28b      	uxth	r3, r1
 8002a36:	2200      	movs	r2, #0
 8002a38:	461c      	mov	r4, r3
 8002a3a:	4615      	mov	r5, r2
 8002a3c:	f04f 0200 	mov.w	r2, #0
 8002a40:	f04f 0300 	mov.w	r3, #0
 8002a44:	00eb      	lsls	r3, r5, #3
 8002a46:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a4a:	00e2      	lsls	r2, r4, #3
 8002a4c:	460b      	mov	r3, r1
 8002a4e:	3307      	adds	r3, #7
 8002a50:	08db      	lsrs	r3, r3, #3
 8002a52:	00db      	lsls	r3, r3, #3
 8002a54:	ebad 0d03 	sub.w	sp, sp, r3
 8002a58:	ab02      	add	r3, sp, #8
 8002a5a:	3300      	adds	r3, #0
 8002a5c:	617b      	str	r3, [r7, #20]
	uint16_t contentlen = getAfterword(SMSbuffer, SMS_bufferlen, (uint8_t*)"+CMGL: ", contentbuffer);
 8002a5e:	8979      	ldrh	r1, [r7, #10]
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	4a13      	ldr	r2, [pc, #76]	; (8002ab0 <SMS_getPhonenumb+0xb4>)
 8002a64:	68f8      	ldr	r0, [r7, #12]
 8002a66:	f7ff ff65 	bl	8002934 <getAfterword>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	83fb      	strh	r3, [r7, #30]
	if (!contentlen) {
 8002a6e:	8bfb      	ldrh	r3, [r7, #30]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d107      	bne.n	8002a84 <SMS_getPhonenumb+0x88>
		contentlen = getAfterword(SMSbuffer, SMS_bufferlen, (uint8_t*)"+CMGR: ", contentbuffer);
 8002a74:	8979      	ldrh	r1, [r7, #10]
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	4a0e      	ldr	r2, [pc, #56]	; (8002ab4 <SMS_getPhonenumb+0xb8>)
 8002a7a:	68f8      	ldr	r0, [r7, #12]
 8002a7c:	f7ff ff5a 	bl	8002934 <getAfterword>
 8002a80:	4603      	mov	r3, r0
 8002a82:	83fb      	strh	r3, [r7, #30]
	}
	if (!contentlen) return 0;
 8002a84:	8bfb      	ldrh	r3, [r7, #30]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d101      	bne.n	8002a8e <SMS_getPhonenumb+0x92>
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	e00a      	b.n	8002aa4 <SMS_getPhonenumb+0xa8>
//		currPOS = isWordinBuff(contentbuffer, contentlen, (uint8_t*)",");
//		if ( currPOS == NULL ) return	0;
//		remainlen = getRemainsize(currPOS, contentbuffer, contentlen);
//		currPOS++;
//	}
	return getBetween((uint8_t*)"+", (uint8_t*)"\"", contentbuffer, contentlen, Phonenumb_buffer);
 8002a8e:	8bfa      	ldrh	r2, [r7, #30]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	9300      	str	r3, [sp, #0]
 8002a94:	4613      	mov	r3, r2
 8002a96:	697a      	ldr	r2, [r7, #20]
 8002a98:	4907      	ldr	r1, [pc, #28]	; (8002ab8 <SMS_getPhonenumb+0xbc>)
 8002a9a:	4808      	ldr	r0, [pc, #32]	; (8002abc <SMS_getPhonenumb+0xc0>)
 8002a9c:	f002 fc4e 	bl	800533c <getBetween>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	46b5      	mov	sp, r6
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3724      	adds	r7, #36	; 0x24
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002ab0:	0800ed50 	.word	0x0800ed50
 8002ab4:	0800ee2c 	.word	0x0800ee2c
 8002ab8:	0800ee34 	.word	0x0800ee34
 8002abc:	0800ee38 	.word	0x0800ee38

08002ac0 <SMS_getContent>:

uint16_t SMS_getContent (uint8_t *SMSbuffer, uint16_t SMS_bufferlen, uint8_t *Content_buffer )
{
 8002ac0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002ac4:	b08b      	sub	sp, #44	; 0x2c
 8002ac6:	af02      	add	r7, sp, #8
 8002ac8:	60f8      	str	r0, [r7, #12]
 8002aca:	460b      	mov	r3, r1
 8002acc:	607a      	str	r2, [r7, #4]
 8002ace:	817b      	strh	r3, [r7, #10]
 8002ad0:	466b      	mov	r3, sp
 8002ad2:	461e      	mov	r6, r3
	uint8_t contentbuffer[SMS_bufferlen];
 8002ad4:	8979      	ldrh	r1, [r7, #10]
 8002ad6:	460b      	mov	r3, r1
 8002ad8:	3b01      	subs	r3, #1
 8002ada:	61bb      	str	r3, [r7, #24]
 8002adc:	b28b      	uxth	r3, r1
 8002ade:	2200      	movs	r2, #0
 8002ae0:	4698      	mov	r8, r3
 8002ae2:	4691      	mov	r9, r2
 8002ae4:	f04f 0200 	mov.w	r2, #0
 8002ae8:	f04f 0300 	mov.w	r3, #0
 8002aec:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002af0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002af4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002af8:	b28b      	uxth	r3, r1
 8002afa:	2200      	movs	r2, #0
 8002afc:	461c      	mov	r4, r3
 8002afe:	4615      	mov	r5, r2
 8002b00:	f04f 0200 	mov.w	r2, #0
 8002b04:	f04f 0300 	mov.w	r3, #0
 8002b08:	00eb      	lsls	r3, r5, #3
 8002b0a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b0e:	00e2      	lsls	r2, r4, #3
 8002b10:	460b      	mov	r3, r1
 8002b12:	3307      	adds	r3, #7
 8002b14:	08db      	lsrs	r3, r3, #3
 8002b16:	00db      	lsls	r3, r3, #3
 8002b18:	ebad 0d03 	sub.w	sp, sp, r3
 8002b1c:	ab02      	add	r3, sp, #8
 8002b1e:	3300      	adds	r3, #0
 8002b20:	617b      	str	r3, [r7, #20]
	uint16_t contentlen = getAfterword(SMSbuffer, SMS_bufferlen, (uint8_t*)"+CMGL: ", contentbuffer);
 8002b22:	8979      	ldrh	r1, [r7, #10]
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	4a13      	ldr	r2, [pc, #76]	; (8002b74 <SMS_getContent+0xb4>)
 8002b28:	68f8      	ldr	r0, [r7, #12]
 8002b2a:	f7ff ff03 	bl	8002934 <getAfterword>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	83fb      	strh	r3, [r7, #30]
	if (!contentlen) {
 8002b32:	8bfb      	ldrh	r3, [r7, #30]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d107      	bne.n	8002b48 <SMS_getContent+0x88>
		contentlen = getAfterword(SMSbuffer, SMS_bufferlen, (uint8_t*)"+CMGR: ", contentbuffer);
 8002b38:	8979      	ldrh	r1, [r7, #10]
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	4a0e      	ldr	r2, [pc, #56]	; (8002b78 <SMS_getContent+0xb8>)
 8002b3e:	68f8      	ldr	r0, [r7, #12]
 8002b40:	f7ff fef8 	bl	8002934 <getAfterword>
 8002b44:	4603      	mov	r3, r0
 8002b46:	83fb      	strh	r3, [r7, #30]
	}
	if (!contentlen) return 0;
 8002b48:	8bfb      	ldrh	r3, [r7, #30]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d101      	bne.n	8002b52 <SMS_getContent+0x92>
 8002b4e:	2300      	movs	r3, #0
 8002b50:	e009      	b.n	8002b66 <SMS_getContent+0xa6>

	return getBetween((uint8_t*)"\n", (uint8_t*)"\r", contentbuffer, contentlen, Content_buffer);
 8002b52:	8bfa      	ldrh	r2, [r7, #30]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	9300      	str	r3, [sp, #0]
 8002b58:	4613      	mov	r3, r2
 8002b5a:	697a      	ldr	r2, [r7, #20]
 8002b5c:	4907      	ldr	r1, [pc, #28]	; (8002b7c <SMS_getContent+0xbc>)
 8002b5e:	4808      	ldr	r0, [pc, #32]	; (8002b80 <SMS_getContent+0xc0>)
 8002b60:	f002 fbec 	bl	800533c <getBetween>
 8002b64:	4603      	mov	r3, r0
 8002b66:	46b5      	mov	sp, r6
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3724      	adds	r7, #36	; 0x24
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002b72:	bf00      	nop
 8002b74:	0800ed50 	.word	0x0800ed50
 8002b78:	0800ee2c 	.word	0x0800ee2c
 8002b7c:	0800ee3c 	.word	0x0800ee3c
 8002b80:	0800ee40 	.word	0x0800ee40

08002b84 <SMSaddData>:




uint8_t SMSaddData(SMS_CMD_t smsCMD, uint8_t *contentbuffer, uint16_t contentlen, uint8_t *phonenumb)
{
 8002b84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002b88:	b093      	sub	sp, #76	; 0x4c
 8002b8a:	af02      	add	r7, sp, #8
 8002b8c:	60b9      	str	r1, [r7, #8]
 8002b8e:	607b      	str	r3, [r7, #4]
 8002b90:	4603      	mov	r3, r0
 8002b92:	73fb      	strb	r3, [r7, #15]
 8002b94:	4613      	mov	r3, r2
 8002b96:	81bb      	strh	r3, [r7, #12]
 8002b98:	466b      	mov	r3, sp
 8002b9a:	461e      	mov	r6, r3
	uint8_t *currPOS;
	uint16_t remainlen;
	uint8_t IDbuffer[contentlen];
 8002b9c:	89b9      	ldrh	r1, [r7, #12]
 8002b9e:	460b      	mov	r3, r1
 8002ba0:	3b01      	subs	r3, #1
 8002ba2:	627b      	str	r3, [r7, #36]	; 0x24
 8002ba4:	b28b      	uxth	r3, r1
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	4698      	mov	r8, r3
 8002baa:	4691      	mov	r9, r2
 8002bac:	f04f 0200 	mov.w	r2, #0
 8002bb0:	f04f 0300 	mov.w	r3, #0
 8002bb4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002bb8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002bbc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002bc0:	b28b      	uxth	r3, r1
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	461c      	mov	r4, r3
 8002bc6:	4615      	mov	r5, r2
 8002bc8:	f04f 0200 	mov.w	r2, #0
 8002bcc:	f04f 0300 	mov.w	r3, #0
 8002bd0:	00eb      	lsls	r3, r5, #3
 8002bd2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002bd6:	00e2      	lsls	r2, r4, #3
 8002bd8:	460b      	mov	r3, r1
 8002bda:	3307      	adds	r3, #7
 8002bdc:	08db      	lsrs	r3, r3, #3
 8002bde:	00db      	lsls	r3, r3, #3
 8002be0:	ebad 0d03 	sub.w	sp, sp, r3
 8002be4:	ab02      	add	r3, sp, #8
 8002be6:	3300      	adds	r3, #0
 8002be8:	623b      	str	r3, [r7, #32]
	uint8_t Timebuffer[10];
	uint16_t time_delay;
	uint16_t datalen = 0;
 8002bea:	2300      	movs	r3, #0
 8002bec:	877b      	strh	r3, [r7, #58]	; 0x3a
	uint8_t phonenumblen = strlen((char*)phonenumb);
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f7fd faac 	bl	800014c <strlen>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	77fb      	strb	r3, [r7, #31]

	uint8_t *Detect_msgType;
	SMS_request_t *Detect_Request;
	uint8_t getIDflag = 0;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t getTimeflag = 0;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint8_t getSflag = 0;
 8002c04:	2300      	movs	r3, #0
 8002c06:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	ID_t idtype = ID_STATION;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	switch (smsCMD)	{
 8002c10:	7bfb      	ldrb	r3, [r7, #15]
 8002c12:	2b07      	cmp	r3, #7
 8002c14:	d864      	bhi.n	8002ce0 <SMSaddData+0x15c>
 8002c16:	a201      	add	r2, pc, #4	; (adr r2, 8002c1c <SMSaddData+0x98>)
 8002c18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c1c:	08002c3d 	.word	0x08002c3d
 8002c20:	08002c53 	.word	0x08002c53
 8002c24:	08002c95 	.word	0x08002c95
 8002c28:	08002c7f 	.word	0x08002c7f
 8002c2c:	08002c69 	.word	0x08002c69
 8002c30:	08002ca5 	.word	0x08002ca5
 8002c34:	08002cc5 	.word	0x08002cc5
 8002c38:	08002caf 	.word	0x08002caf
		case SMS_CMD_CTRL_ON:
			Detect_msgType = (uint8_t*)SMS_MSG_CTRL_ON;
 8002c3c:	4b75      	ldr	r3, [pc, #468]	; (8002e14 <SMSaddData+0x290>)
 8002c3e:	63fb      	str	r3, [r7, #60]	; 0x3c
			Detect_Request = &mySIM.sms.CtrlON;
 8002c40:	4b75      	ldr	r3, [pc, #468]	; (8002e18 <SMSaddData+0x294>)
 8002c42:	633b      	str	r3, [r7, #48]	; 0x30
			getIDflag = 1;
 8002c44:	2301      	movs	r3, #1
 8002c46:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			getTimeflag = 1;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			break;
 8002c50:	e047      	b.n	8002ce2 <SMSaddData+0x15e>
		case SMS_CMD_CTRL_OFF:
			Detect_msgType = (uint8_t*)SMS_MSG_CTRL_OFF;
 8002c52:	4b72      	ldr	r3, [pc, #456]	; (8002e1c <SMSaddData+0x298>)
 8002c54:	63fb      	str	r3, [r7, #60]	; 0x3c
			Detect_Request = &mySIM.sms.CtrlOFF;
 8002c56:	4b72      	ldr	r3, [pc, #456]	; (8002e20 <SMSaddData+0x29c>)
 8002c58:	633b      	str	r3, [r7, #48]	; 0x30
			getIDflag = 1;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			getTimeflag = 1;
 8002c60:	2301      	movs	r3, #1
 8002c62:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			break;
 8002c66:	e03c      	b.n	8002ce2 <SMSaddData+0x15e>
		case SMS_CMD_CTRL_DEC:
			Detect_msgType = (uint8_t*)SMS_MSG_CTRL_DEC;
 8002c68:	4b6e      	ldr	r3, [pc, #440]	; (8002e24 <SMSaddData+0x2a0>)
 8002c6a:	63fb      	str	r3, [r7, #60]	; 0x3c
			Detect_Request = &mySIM.sms.CtrlDEC;
 8002c6c:	4b6e      	ldr	r3, [pc, #440]	; (8002e28 <SMSaddData+0x2a4>)
 8002c6e:	633b      	str	r3, [r7, #48]	; 0x30
			getIDflag = 1;
 8002c70:	2301      	movs	r3, #1
 8002c72:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			getTimeflag = 1;
 8002c76:	2301      	movs	r3, #1
 8002c78:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			break;
 8002c7c:	e031      	b.n	8002ce2 <SMSaddData+0x15e>
		case SMS_CMD_CTRL_INC:
			Detect_msgType = (uint8_t*)SMS_MSG_CTRL_INC;
 8002c7e:	4b6b      	ldr	r3, [pc, #428]	; (8002e2c <SMSaddData+0x2a8>)
 8002c80:	63fb      	str	r3, [r7, #60]	; 0x3c
			Detect_Request = &mySIM.sms.CtrlINC;
 8002c82:	4b6b      	ldr	r3, [pc, #428]	; (8002e30 <SMSaddData+0x2ac>)
 8002c84:	633b      	str	r3, [r7, #48]	; 0x30
			getIDflag = 1;
 8002c86:	2301      	movs	r3, #1
 8002c88:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			getTimeflag = 1;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			break;
 8002c92:	e026      	b.n	8002ce2 <SMSaddData+0x15e>
		case SMS_CMD_CTRL_CALIB:
			Detect_msgType = (uint8_t*)SMS_MSG_CTRL_CALIB;
 8002c94:	4b67      	ldr	r3, [pc, #412]	; (8002e34 <SMSaddData+0x2b0>)
 8002c96:	63fb      	str	r3, [r7, #60]	; 0x3c
			Detect_Request = &mySIM.sms.CtrlCALIB;
 8002c98:	4b67      	ldr	r3, [pc, #412]	; (8002e38 <SMSaddData+0x2b4>)
 8002c9a:	633b      	str	r3, [r7, #48]	; 0x30
			getTimeflag = 1;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			break;
 8002ca2:	e01e      	b.n	8002ce2 <SMSaddData+0x15e>
		case SMS_CMD_GET_STATUS:
			Detect_msgType = (uint8_t*)SMS_MSG_GET_STATUS;
 8002ca4:	4b65      	ldr	r3, [pc, #404]	; (8002e3c <SMSaddData+0x2b8>)
 8002ca6:	63fb      	str	r3, [r7, #60]	; 0x3c
			Detect_Request = &mySIM.sms.GetStatus;
 8002ca8:	4b65      	ldr	r3, [pc, #404]	; (8002e40 <SMSaddData+0x2bc>)
 8002caa:	633b      	str	r3, [r7, #48]	; 0x30
			break;
 8002cac:	e019      	b.n	8002ce2 <SMSaddData+0x15e>
		case SMS_CMD_GET_STATION:
			Detect_msgType = (uint8_t*)SMS_MSG_GET_STATION;
 8002cae:	4b65      	ldr	r3, [pc, #404]	; (8002e44 <SMSaddData+0x2c0>)
 8002cb0:	63fb      	str	r3, [r7, #60]	; 0x3c
			Detect_Request = &mySIM.sms.GetStation;
 8002cb2:	4b65      	ldr	r3, [pc, #404]	; (8002e48 <SMSaddData+0x2c4>)
 8002cb4:	633b      	str	r3, [r7, #48]	; 0x30
			getIDflag = 1;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			getSflag = 1;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			break;
 8002cc2:	e00e      	b.n	8002ce2 <SMSaddData+0x15e>
		case SMS_CMD_GET_SENSOR:
			Detect_msgType = (uint8_t*)SMS_MSG_GET_SENSOR;
 8002cc4:	4b61      	ldr	r3, [pc, #388]	; (8002e4c <SMSaddData+0x2c8>)
 8002cc6:	63fb      	str	r3, [r7, #60]	; 0x3c
			Detect_Request = &mySIM.sms.GetSensor;
 8002cc8:	4b61      	ldr	r3, [pc, #388]	; (8002e50 <SMSaddData+0x2cc>)
 8002cca:	633b      	str	r3, [r7, #48]	; 0x30
			getIDflag = 1;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			getSflag = 1;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			idtype = ID_SENSOR;
 8002cd8:	2302      	movs	r3, #2
 8002cda:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
			break;
 8002cde:	e000      	b.n	8002ce2 <SMSaddData+0x15e>
		default:
			break;
 8002ce0:	bf00      	nop
		}
	if (Detect_msgType == NULL)	return 0;
 8002ce2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d101      	bne.n	8002cec <SMSaddData+0x168>
 8002ce8:	2300      	movs	r3, #0
 8002cea:	e08c      	b.n	8002e06 <SMSaddData+0x282>

	currPOS = isWordinBuff(contentbuffer, contentlen, (uint8_t*)Detect_msgType);
 8002cec:	89bb      	ldrh	r3, [r7, #12]
 8002cee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002cf0:	4619      	mov	r1, r3
 8002cf2:	68b8      	ldr	r0, [r7, #8]
 8002cf4:	f002 faf6 	bl	80052e4 <isWordinBuff>
 8002cf8:	6378      	str	r0, [r7, #52]	; 0x34
	if (currPOS == NULL) 	return 0;
 8002cfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d101      	bne.n	8002d04 <SMSaddData+0x180>
 8002d00:	2300      	movs	r3, #0
 8002d02:	e080      	b.n	8002e06 <SMSaddData+0x282>

	remainlen = getRemainsize(currPOS, contentbuffer, contentlen);
 8002d04:	89bb      	ldrh	r3, [r7, #12]
 8002d06:	461a      	mov	r2, r3
 8002d08:	68b9      	ldr	r1, [r7, #8]
 8002d0a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002d0c:	f002 fb69 	bl	80053e2 <getRemainsize>
 8002d10:	4603      	mov	r3, r0
 8002d12:	873b      	strh	r3, [r7, #56]	; 0x38

	/* Get ID list */
	if (getIDflag)	{
 8002d14:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d039      	beq.n	8002d90 <SMSaddData+0x20c>
		uint8_t tmplen;
		if (getSflag)	{
 8002d1c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d00c      	beq.n	8002d3e <SMSaddData+0x1ba>
			tmplen = getBetween((uint8_t*)":", (uint8_t*)";", currPOS, remainlen, IDbuffer);
 8002d24:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8002d26:	6a3b      	ldr	r3, [r7, #32]
 8002d28:	9300      	str	r3, [sp, #0]
 8002d2a:	4613      	mov	r3, r2
 8002d2c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d2e:	4949      	ldr	r1, [pc, #292]	; (8002e54 <SMSaddData+0x2d0>)
 8002d30:	4849      	ldr	r0, [pc, #292]	; (8002e58 <SMSaddData+0x2d4>)
 8002d32:	f002 fb03 	bl	800533c <getBetween>
 8002d36:	4603      	mov	r3, r0
 8002d38:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002d3c:	e00b      	b.n	8002d56 <SMSaddData+0x1d2>
		}
		else {
			tmplen = getBetween((uint8_t*)":", (uint8_t*)":", currPOS, remainlen, IDbuffer);
 8002d3e:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8002d40:	6a3b      	ldr	r3, [r7, #32]
 8002d42:	9300      	str	r3, [sp, #0]
 8002d44:	4613      	mov	r3, r2
 8002d46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d48:	4943      	ldr	r1, [pc, #268]	; (8002e58 <SMSaddData+0x2d4>)
 8002d4a:	4843      	ldr	r0, [pc, #268]	; (8002e58 <SMSaddData+0x2d4>)
 8002d4c:	f002 faf6 	bl	800533c <getBetween>
 8002d50:	4603      	mov	r3, r0
 8002d52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		}
		currPOS += strlen((char*)Detect_msgType) + tmplen + 1;
 8002d56:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002d58:	f7fd f9f8 	bl	800014c <strlen>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002d62:	4413      	add	r3, r2
 8002d64:	3301      	adds	r3, #1
 8002d66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d68:	4413      	add	r3, r2
 8002d6a:	637b      	str	r3, [r7, #52]	; 0x34
		remainlen = getRemainsize(currPOS, contentbuffer, contentlen);
 8002d6c:	89bb      	ldrh	r3, [r7, #12]
 8002d6e:	461a      	mov	r2, r3
 8002d70:	68b9      	ldr	r1, [r7, #8]
 8002d72:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002d74:	f002 fb35 	bl	80053e2 <getRemainsize>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	873b      	strh	r3, [r7, #56]	; 0x38
		datalen = stringIDtoHexID(IDbuffer, Detect_Request->data, ",", idtype);
 8002d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d7e:	1d19      	adds	r1, r3, #4
 8002d80:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002d84:	4a35      	ldr	r2, [pc, #212]	; (8002e5c <SMSaddData+0x2d8>)
 8002d86:	6a38      	ldr	r0, [r7, #32]
 8002d88:	f7ff fe04 	bl	8002994 <stringIDtoHexID>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	877b      	strh	r3, [r7, #58]	; 0x3a
	}

	/* Get time delay*/
	if (getTimeflag)	{
 8002d90:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d01c      	beq.n	8002dd2 <SMSaddData+0x24e>
		getBetween((uint8_t*)":", (uint8_t*)";", currPOS, remainlen, Timebuffer);
 8002d98:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8002d9a:	f107 0310 	add.w	r3, r7, #16
 8002d9e:	9300      	str	r3, [sp, #0]
 8002da0:	4613      	mov	r3, r2
 8002da2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002da4:	492b      	ldr	r1, [pc, #172]	; (8002e54 <SMSaddData+0x2d0>)
 8002da6:	482c      	ldr	r0, [pc, #176]	; (8002e58 <SMSaddData+0x2d4>)
 8002da8:	f002 fac8 	bl	800533c <getBetween>
		time_delay = atoi((char*)Timebuffer);
 8002dac:	f107 0310 	add.w	r3, r7, #16
 8002db0:	4618      	mov	r0, r3
 8002db2:	f009 f863 	bl	800be7c <atoi>
 8002db6:	4603      	mov	r3, r0
 8002db8:	83bb      	strh	r3, [r7, #28]
		twobyte2buff(Detect_Request->data +datalen, time_delay);
 8002dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dbc:	1d1a      	adds	r2, r3, #4
 8002dbe:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8002dc0:	4413      	add	r3, r2
 8002dc2:	8bba      	ldrh	r2, [r7, #28]
 8002dc4:	4611      	mov	r1, r2
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f002 fb1e 	bl	8005408 <twobyte2buff>
		datalen += 2;
 8002dcc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8002dce:	3302      	adds	r3, #2
 8002dd0:	877b      	strh	r3, [r7, #58]	; 0x3a
	}
	memcpy(Detect_Request->phonenumb, phonenumb, phonenumblen);
 8002dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dd4:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8002dd8:	7ffa      	ldrb	r2, [r7, #31]
 8002dda:	6879      	ldr	r1, [r7, #4]
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f009 f9ab 	bl	800c138 <memcpy>
	memcpy(Detect_Request->data + datalen, phonenumb, phonenumblen);
 8002de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002de4:	1d1a      	adds	r2, r3, #4
 8002de6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8002de8:	4413      	add	r3, r2
 8002dea:	7ffa      	ldrb	r2, [r7, #31]
 8002dec:	6879      	ldr	r1, [r7, #4]
 8002dee:	4618      	mov	r0, r3
 8002df0:	f009 f9a2 	bl	800c138 <memcpy>
	datalen += phonenumblen;
 8002df4:	7ffb      	ldrb	r3, [r7, #31]
 8002df6:	b29a      	uxth	r2, r3
 8002df8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8002dfa:	4413      	add	r3, r2
 8002dfc:	877b      	strh	r3, [r7, #58]	; 0x3a
	Detect_Request->datalength = datalen;
 8002dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e00:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8002e02:	805a      	strh	r2, [r3, #2]
	return 1;
 8002e04:	2301      	movs	r3, #1
 8002e06:	46b5      	mov	sp, r6
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	3744      	adds	r7, #68	; 0x44
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002e12:	bf00      	nop
 8002e14:	0800ee44 	.word	0x0800ee44
 8002e18:	200018c0 	.word	0x200018c0
 8002e1c:	0800ee4c 	.word	0x0800ee4c
 8002e20:	200019d2 	.word	0x200019d2
 8002e24:	0800ee58 	.word	0x0800ee58
 8002e28:	20001d08 	.word	0x20001d08
 8002e2c:	0800ee64 	.word	0x0800ee64
 8002e30:	20001bf6 	.word	0x20001bf6
 8002e34:	0800ee70 	.word	0x0800ee70
 8002e38:	20001ae4 	.word	0x20001ae4
 8002e3c:	0800ee7c 	.word	0x0800ee7c
 8002e40:	20001e1a 	.word	0x20001e1a
 8002e44:	0800ee8c 	.word	0x0800ee8c
 8002e48:	2000203e 	.word	0x2000203e
 8002e4c:	0800ee98 	.word	0x0800ee98
 8002e50:	20001f2c 	.word	0x20001f2c
 8002e54:	0800eea4 	.word	0x0800eea4
 8002e58:	0800eea8 	.word	0x0800eea8
 8002e5c:	0800ee24 	.word	0x0800ee24

08002e60 <SMS_checkCMD>:
static uint8_t SMS_checkCMD(uint8_t *contentbuffer, uint16_t contentlen, uint8_t *phonenumb)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b086      	sub	sp, #24
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	60f8      	str	r0, [r7, #12]
 8002e68:	460b      	mov	r3, r1
 8002e6a:	607a      	str	r2, [r7, #4]
 8002e6c:	817b      	strh	r3, [r7, #10]
	uint8_t *currPOS;

	currPOS = isWordinBuff(contentbuffer, contentlen, (uint8_t*)SMS_MSG_CTRL_ON);
 8002e6e:	897b      	ldrh	r3, [r7, #10]
 8002e70:	4a8b      	ldr	r2, [pc, #556]	; (80030a0 <SMS_checkCMD+0x240>)
 8002e72:	4619      	mov	r1, r3
 8002e74:	68f8      	ldr	r0, [r7, #12]
 8002e76:	f002 fa35 	bl	80052e4 <isWordinBuff>
 8002e7a:	6178      	str	r0, [r7, #20]
	if (currPOS != NULL) 	{
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d018      	beq.n	8002eb4 <SMS_checkCMD+0x54>
		if (checkSMSrequest(SMS_CMD_CTRL_ON)) return 2;
 8002e82:	2000      	movs	r0, #0
 8002e84:	f000 f9ee 	bl	8003264 <checkSMSrequest>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d001      	beq.n	8002e92 <SMS_checkCMD+0x32>
 8002e8e:	2302      	movs	r3, #2
 8002e90:	e101      	b.n	8003096 <SMS_checkCMD+0x236>
		if ( !SMSaddData(SMS_CMD_CTRL_ON, contentbuffer, contentlen, phonenumb) ) return 0;
 8002e92:	897a      	ldrh	r2, [r7, #10]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	68f9      	ldr	r1, [r7, #12]
 8002e98:	2000      	movs	r0, #0
 8002e9a:	f7ff fe73 	bl	8002b84 <SMSaddData>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d101      	bne.n	8002ea8 <SMS_checkCMD+0x48>
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	e0f6      	b.n	8003096 <SMS_checkCMD+0x236>
		// Trigger cmd flag
		triggerSMSrequest(SMS_CMD_CTRL_ON, FLAG_EN);
 8002ea8:	2101      	movs	r1, #1
 8002eaa:	2000      	movs	r0, #0
 8002eac:	f000 fa62 	bl	8003374 <triggerSMSrequest>
		return 1;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e0f0      	b.n	8003096 <SMS_checkCMD+0x236>
	}

	currPOS = isWordinBuff(contentbuffer, contentlen, (uint8_t*)SMS_MSG_CTRL_OFF);
 8002eb4:	897b      	ldrh	r3, [r7, #10]
 8002eb6:	4a7b      	ldr	r2, [pc, #492]	; (80030a4 <SMS_checkCMD+0x244>)
 8002eb8:	4619      	mov	r1, r3
 8002eba:	68f8      	ldr	r0, [r7, #12]
 8002ebc:	f002 fa12 	bl	80052e4 <isWordinBuff>
 8002ec0:	6178      	str	r0, [r7, #20]
	if (currPOS != NULL) 	{
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d018      	beq.n	8002efa <SMS_checkCMD+0x9a>
		if (checkSMSrequest(SMS_CMD_CTRL_OFF)) return 2;
 8002ec8:	2001      	movs	r0, #1
 8002eca:	f000 f9cb 	bl	8003264 <checkSMSrequest>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d001      	beq.n	8002ed8 <SMS_checkCMD+0x78>
 8002ed4:	2302      	movs	r3, #2
 8002ed6:	e0de      	b.n	8003096 <SMS_checkCMD+0x236>
		if ( !SMSaddData(SMS_CMD_CTRL_OFF, contentbuffer, contentlen, phonenumb) )	return 0;
 8002ed8:	897a      	ldrh	r2, [r7, #10]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	68f9      	ldr	r1, [r7, #12]
 8002ede:	2001      	movs	r0, #1
 8002ee0:	f7ff fe50 	bl	8002b84 <SMSaddData>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d101      	bne.n	8002eee <SMS_checkCMD+0x8e>
 8002eea:	2300      	movs	r3, #0
 8002eec:	e0d3      	b.n	8003096 <SMS_checkCMD+0x236>
		// Trigger cmd flag
		triggerSMSrequest(SMS_CMD_CTRL_OFF, FLAG_EN);
 8002eee:	2101      	movs	r1, #1
 8002ef0:	2001      	movs	r0, #1
 8002ef2:	f000 fa3f 	bl	8003374 <triggerSMSrequest>
		return 1;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e0cd      	b.n	8003096 <SMS_checkCMD+0x236>
	}

	currPOS = isWordinBuff(contentbuffer, contentlen, (uint8_t*)SMS_MSG_CTRL_DEC);
 8002efa:	897b      	ldrh	r3, [r7, #10]
 8002efc:	4a6a      	ldr	r2, [pc, #424]	; (80030a8 <SMS_checkCMD+0x248>)
 8002efe:	4619      	mov	r1, r3
 8002f00:	68f8      	ldr	r0, [r7, #12]
 8002f02:	f002 f9ef 	bl	80052e4 <isWordinBuff>
 8002f06:	6178      	str	r0, [r7, #20]
	if (currPOS != NULL) 	{
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d018      	beq.n	8002f40 <SMS_checkCMD+0xe0>
		if (checkSMSrequest(SMS_CMD_CTRL_DEC)) return 2;
 8002f0e:	2004      	movs	r0, #4
 8002f10:	f000 f9a8 	bl	8003264 <checkSMSrequest>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d001      	beq.n	8002f1e <SMS_checkCMD+0xbe>
 8002f1a:	2302      	movs	r3, #2
 8002f1c:	e0bb      	b.n	8003096 <SMS_checkCMD+0x236>
		if ( !SMSaddData(SMS_CMD_CTRL_DEC, contentbuffer, contentlen, phonenumb) )	return 0;
 8002f1e:	897a      	ldrh	r2, [r7, #10]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	68f9      	ldr	r1, [r7, #12]
 8002f24:	2004      	movs	r0, #4
 8002f26:	f7ff fe2d 	bl	8002b84 <SMSaddData>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d101      	bne.n	8002f34 <SMS_checkCMD+0xd4>
 8002f30:	2300      	movs	r3, #0
 8002f32:	e0b0      	b.n	8003096 <SMS_checkCMD+0x236>
		// Trigger cmd flag
		triggerSMSrequest(SMS_CMD_CTRL_DEC, FLAG_EN);
 8002f34:	2101      	movs	r1, #1
 8002f36:	2004      	movs	r0, #4
 8002f38:	f000 fa1c 	bl	8003374 <triggerSMSrequest>
		return 1;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e0aa      	b.n	8003096 <SMS_checkCMD+0x236>
	}

	currPOS = isWordinBuff(contentbuffer, contentlen, (uint8_t*)SMS_MSG_CTRL_INC);
 8002f40:	897b      	ldrh	r3, [r7, #10]
 8002f42:	4a5a      	ldr	r2, [pc, #360]	; (80030ac <SMS_checkCMD+0x24c>)
 8002f44:	4619      	mov	r1, r3
 8002f46:	68f8      	ldr	r0, [r7, #12]
 8002f48:	f002 f9cc 	bl	80052e4 <isWordinBuff>
 8002f4c:	6178      	str	r0, [r7, #20]
	if (currPOS != NULL) 	{
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d013      	beq.n	8002f7c <SMS_checkCMD+0x11c>
		if (checkSMSrequest(SMS_CMD_CTRL_INC)) return 2;
 8002f54:	2003      	movs	r0, #3
 8002f56:	f000 f985 	bl	8003264 <checkSMSrequest>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d001      	beq.n	8002f64 <SMS_checkCMD+0x104>
 8002f60:	2302      	movs	r3, #2
 8002f62:	e098      	b.n	8003096 <SMS_checkCMD+0x236>
		SMSaddData(SMS_CMD_CTRL_INC, contentbuffer, contentlen, phonenumb);
 8002f64:	897a      	ldrh	r2, [r7, #10]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	68f9      	ldr	r1, [r7, #12]
 8002f6a:	2003      	movs	r0, #3
 8002f6c:	f7ff fe0a 	bl	8002b84 <SMSaddData>
		// Trigger cmd flag
		triggerSMSrequest(SMS_CMD_CTRL_INC, FLAG_EN);
 8002f70:	2101      	movs	r1, #1
 8002f72:	2003      	movs	r0, #3
 8002f74:	f000 f9fe 	bl	8003374 <triggerSMSrequest>
		return 1;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e08c      	b.n	8003096 <SMS_checkCMD+0x236>
	}

	currPOS = isWordinBuff(contentbuffer, contentlen, (uint8_t*)SMS_MSG_CTRL_CALIB);
 8002f7c:	897b      	ldrh	r3, [r7, #10]
 8002f7e:	4a4c      	ldr	r2, [pc, #304]	; (80030b0 <SMS_checkCMD+0x250>)
 8002f80:	4619      	mov	r1, r3
 8002f82:	68f8      	ldr	r0, [r7, #12]
 8002f84:	f002 f9ae 	bl	80052e4 <isWordinBuff>
 8002f88:	6178      	str	r0, [r7, #20]
	if (currPOS != NULL) 	{
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d018      	beq.n	8002fc2 <SMS_checkCMD+0x162>
		if (checkSMSrequest(SMS_CMD_CTRL_CALIB)) return 2;
 8002f90:	2002      	movs	r0, #2
 8002f92:	f000 f967 	bl	8003264 <checkSMSrequest>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d001      	beq.n	8002fa0 <SMS_checkCMD+0x140>
 8002f9c:	2302      	movs	r3, #2
 8002f9e:	e07a      	b.n	8003096 <SMS_checkCMD+0x236>
		if ( !SMSaddData(SMS_CMD_CTRL_CALIB, contentbuffer, contentlen, phonenumb) )	return 0;
 8002fa0:	897a      	ldrh	r2, [r7, #10]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	68f9      	ldr	r1, [r7, #12]
 8002fa6:	2002      	movs	r0, #2
 8002fa8:	f7ff fdec 	bl	8002b84 <SMSaddData>
 8002fac:	4603      	mov	r3, r0
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d101      	bne.n	8002fb6 <SMS_checkCMD+0x156>
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	e06f      	b.n	8003096 <SMS_checkCMD+0x236>
		// Trigger cmd flag
		triggerSMSrequest(SMS_CMD_CTRL_CALIB, FLAG_EN);
 8002fb6:	2101      	movs	r1, #1
 8002fb8:	2002      	movs	r0, #2
 8002fba:	f000 f9db 	bl	8003374 <triggerSMSrequest>
		return 1;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e069      	b.n	8003096 <SMS_checkCMD+0x236>
	}

	currPOS = isWordinBuff(contentbuffer, contentlen, (uint8_t*)SMS_MSG_GET_STATUS);
 8002fc2:	897b      	ldrh	r3, [r7, #10]
 8002fc4:	4a3b      	ldr	r2, [pc, #236]	; (80030b4 <SMS_checkCMD+0x254>)
 8002fc6:	4619      	mov	r1, r3
 8002fc8:	68f8      	ldr	r0, [r7, #12]
 8002fca:	f002 f98b 	bl	80052e4 <isWordinBuff>
 8002fce:	6178      	str	r0, [r7, #20]
	if (currPOS != NULL) 	{
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d018      	beq.n	8003008 <SMS_checkCMD+0x1a8>
		if (checkSMSrequest(SMS_CMD_GET_STATUS)) return 2;
 8002fd6:	2005      	movs	r0, #5
 8002fd8:	f000 f944 	bl	8003264 <checkSMSrequest>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d001      	beq.n	8002fe6 <SMS_checkCMD+0x186>
 8002fe2:	2302      	movs	r3, #2
 8002fe4:	e057      	b.n	8003096 <SMS_checkCMD+0x236>
		if ( !SMSaddData(SMS_CMD_GET_STATUS, contentbuffer, contentlen, phonenumb) )	return 0;
 8002fe6:	897a      	ldrh	r2, [r7, #10]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	68f9      	ldr	r1, [r7, #12]
 8002fec:	2005      	movs	r0, #5
 8002fee:	f7ff fdc9 	bl	8002b84 <SMSaddData>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d101      	bne.n	8002ffc <SMS_checkCMD+0x19c>
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	e04c      	b.n	8003096 <SMS_checkCMD+0x236>
		// Trigger cmd flag
		triggerSMSrequest(SMS_CMD_GET_STATUS, FLAG_EN);
 8002ffc:	2101      	movs	r1, #1
 8002ffe:	2005      	movs	r0, #5
 8003000:	f000 f9b8 	bl	8003374 <triggerSMSrequest>
//		triggerSMSreturn(SMS_CMD_GET_STATUS, FLAG_EN);
		return 1;
 8003004:	2301      	movs	r3, #1
 8003006:	e046      	b.n	8003096 <SMS_checkCMD+0x236>
	}

	currPOS = isWordinBuff(contentbuffer, contentlen, (uint8_t*)SMS_MSG_GET_STATION);
 8003008:	897b      	ldrh	r3, [r7, #10]
 800300a:	4a2b      	ldr	r2, [pc, #172]	; (80030b8 <SMS_checkCMD+0x258>)
 800300c:	4619      	mov	r1, r3
 800300e:	68f8      	ldr	r0, [r7, #12]
 8003010:	f002 f968 	bl	80052e4 <isWordinBuff>
 8003014:	6178      	str	r0, [r7, #20]
	if (currPOS != NULL) 	{
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d018      	beq.n	800304e <SMS_checkCMD+0x1ee>
		if (checkSMSrequest(SMS_CMD_GET_STATION)) return 2;
 800301c:	2007      	movs	r0, #7
 800301e:	f000 f921 	bl	8003264 <checkSMSrequest>
 8003022:	4603      	mov	r3, r0
 8003024:	2b00      	cmp	r3, #0
 8003026:	d001      	beq.n	800302c <SMS_checkCMD+0x1cc>
 8003028:	2302      	movs	r3, #2
 800302a:	e034      	b.n	8003096 <SMS_checkCMD+0x236>
		if ( !SMSaddData(SMS_CMD_GET_STATION, contentbuffer, contentlen, phonenumb) ) return 0;
 800302c:	897a      	ldrh	r2, [r7, #10]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	68f9      	ldr	r1, [r7, #12]
 8003032:	2007      	movs	r0, #7
 8003034:	f7ff fda6 	bl	8002b84 <SMSaddData>
 8003038:	4603      	mov	r3, r0
 800303a:	2b00      	cmp	r3, #0
 800303c:	d101      	bne.n	8003042 <SMS_checkCMD+0x1e2>
 800303e:	2300      	movs	r3, #0
 8003040:	e029      	b.n	8003096 <SMS_checkCMD+0x236>
		// Trigger cmd flag
		triggerSMSrequest(SMS_CMD_GET_STATION, FLAG_EN);
 8003042:	2101      	movs	r1, #1
 8003044:	2007      	movs	r0, #7
 8003046:	f000 f995 	bl	8003374 <triggerSMSrequest>
//		triggerSMSreturn(SMS_CMD_GET_STATION, FLAG_EN);
		return 1;
 800304a:	2301      	movs	r3, #1
 800304c:	e023      	b.n	8003096 <SMS_checkCMD+0x236>
	}

	currPOS = isWordinBuff(contentbuffer, contentlen, (uint8_t*)SMS_MSG_GET_SENSOR);
 800304e:	897b      	ldrh	r3, [r7, #10]
 8003050:	4a1a      	ldr	r2, [pc, #104]	; (80030bc <SMS_checkCMD+0x25c>)
 8003052:	4619      	mov	r1, r3
 8003054:	68f8      	ldr	r0, [r7, #12]
 8003056:	f002 f945 	bl	80052e4 <isWordinBuff>
 800305a:	6178      	str	r0, [r7, #20]
	if (currPOS != NULL) 	{
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d018      	beq.n	8003094 <SMS_checkCMD+0x234>
		if (checkSMSrequest(SMS_CMD_GET_SENSOR)) return 2;
 8003062:	2006      	movs	r0, #6
 8003064:	f000 f8fe 	bl	8003264 <checkSMSrequest>
 8003068:	4603      	mov	r3, r0
 800306a:	2b00      	cmp	r3, #0
 800306c:	d001      	beq.n	8003072 <SMS_checkCMD+0x212>
 800306e:	2302      	movs	r3, #2
 8003070:	e011      	b.n	8003096 <SMS_checkCMD+0x236>
		if ( !SMSaddData(SMS_CMD_GET_SENSOR, contentbuffer, contentlen, phonenumb) ) return 0;
 8003072:	897a      	ldrh	r2, [r7, #10]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	68f9      	ldr	r1, [r7, #12]
 8003078:	2006      	movs	r0, #6
 800307a:	f7ff fd83 	bl	8002b84 <SMSaddData>
 800307e:	4603      	mov	r3, r0
 8003080:	2b00      	cmp	r3, #0
 8003082:	d101      	bne.n	8003088 <SMS_checkCMD+0x228>
 8003084:	2300      	movs	r3, #0
 8003086:	e006      	b.n	8003096 <SMS_checkCMD+0x236>
		// Trigger cmd flag
		triggerSMSrequest(SMS_CMD_GET_SENSOR, FLAG_EN);
 8003088:	2101      	movs	r1, #1
 800308a:	2006      	movs	r0, #6
 800308c:	f000 f972 	bl	8003374 <triggerSMSrequest>
//		triggerSMSreturn(SMS_CMD_GET_SENSOR, FLAG_EN);
		return 1;
 8003090:	2301      	movs	r3, #1
 8003092:	e000      	b.n	8003096 <SMS_checkCMD+0x236>
	}
	return 0;
 8003094:	2300      	movs	r3, #0
}
 8003096:	4618      	mov	r0, r3
 8003098:	3718      	adds	r7, #24
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
 800309e:	bf00      	nop
 80030a0:	0800ee44 	.word	0x0800ee44
 80030a4:	0800ee4c 	.word	0x0800ee4c
 80030a8:	0800ee58 	.word	0x0800ee58
 80030ac:	0800ee64 	.word	0x0800ee64
 80030b0:	0800ee70 	.word	0x0800ee70
 80030b4:	0800ee7c 	.word	0x0800ee7c
 80030b8:	0800ee8c 	.word	0x0800ee8c
 80030bc:	0800ee98 	.word	0x0800ee98

080030c0 <SMS_read>:

uint8_t SMS_read()
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b082      	sub	sp, #8
 80030c4:	af02      	add	r7, sp, #8
	if ( SIM_sendCMD((uint8_t*)"AT+CMGL=\"REC UNREAD\"", (uint8_t*)"OK",ENABLE_SIM_CHECKRES,
 80030c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80030ca:	9300      	str	r3, [sp, #0]
 80030cc:	2301      	movs	r3, #1
 80030ce:	2201      	movs	r2, #1
 80030d0:	490d      	ldr	r1, [pc, #52]	; (8003108 <SMS_read+0x48>)
 80030d2:	480e      	ldr	r0, [pc, #56]	; (800310c <SMS_read+0x4c>)
 80030d4:	f7ff fb70 	bl	80027b8 <SIM_sendCMD>
 80030d8:	4603      	mov	r3, r0
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d010      	beq.n	8003100 <SMS_read+0x40>
			ENABLE_MARKASREAD, 1000) != SIM_RES_MSG )	{
		if ( SIM_sendCMD((uint8_t*)"AT+CMGL=\"REC UNREAD\"", (uint8_t*)"OK",ENABLE_SIM_CHECKRES,
 80030de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80030e2:	9300      	str	r3, [sp, #0]
 80030e4:	2301      	movs	r3, #1
 80030e6:	2201      	movs	r2, #1
 80030e8:	4907      	ldr	r1, [pc, #28]	; (8003108 <SMS_read+0x48>)
 80030ea:	4808      	ldr	r0, [pc, #32]	; (800310c <SMS_read+0x4c>)
 80030ec:	f7ff fb64 	bl	80027b8 <SIM_sendCMD>
 80030f0:	4603      	mov	r3, r0
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d002      	beq.n	80030fc <SMS_read+0x3c>
					ENABLE_MARKASREAD, 1000) != SIM_RES_MSG )
		newSMS = 0;
 80030f6:	4b06      	ldr	r3, [pc, #24]	; (8003110 <SMS_read+0x50>)
 80030f8:	2200      	movs	r2, #0
 80030fa:	701a      	strb	r2, [r3, #0]
		return 0;
 80030fc:	2300      	movs	r3, #0
 80030fe:	e000      	b.n	8003102 <SMS_read+0x42>
	}
	return 1;
 8003100:	2301      	movs	r3, #1
}
 8003102:	4618      	mov	r0, r3
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}
 8003108:	0800ee00 	.word	0x0800ee00
 800310c:	0800ee04 	.word	0x0800ee04
 8003110:	2000136c 	.word	0x2000136c

08003114 <processingSMS>:
		return 0;
	}
	return 1;
}
uint8_t processingSMS(void)
{
 8003114:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003118:	b089      	sub	sp, #36	; 0x24
 800311a:	af02      	add	r7, sp, #8
 800311c:	466b      	mov	r3, sp
 800311e:	461e      	mov	r6, r3

	if (!newSMS) return 0;
 8003120:	4b4b      	ldr	r3, [pc, #300]	; (8003250 <processingSMS+0x13c>)
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	b2db      	uxtb	r3, r3
 8003126:	2b00      	cmp	r3, #0
 8003128:	d101      	bne.n	800312e <processingSMS+0x1a>
 800312a:	2300      	movs	r3, #0
 800312c:	e08a      	b.n	8003244 <processingSMS+0x130>

//	static uint8_t readagain = 0;
//	static uint16_t SMSindex = 0;

	MarkAsReadData_SIM();
 800312e:	f7ff fbf3 	bl	8002918 <MarkAsReadData_SIM>
//	if ( readagain ) 	{
//		SMS_readAgain(SMSindex);
//	}
//	else 	{
		SMS_read();
 8003132:	f7ff ffc5 	bl	80030c0 <SMS_read>
//		newSMS = 0;
//		return 0;
//	}
	//Get phone number
	uint8_t phonenumb[PHONENUMB_LEN];
	if ( !SMS_getPhonenumb(SMS_Rxbuff, SMS_len, phonenumb) ) {
 8003136:	4b47      	ldr	r3, [pc, #284]	; (8003254 <processingSMS+0x140>)
 8003138:	881b      	ldrh	r3, [r3, #0]
 800313a:	463a      	mov	r2, r7
 800313c:	4619      	mov	r1, r3
 800313e:	4846      	ldr	r0, [pc, #280]	; (8003258 <processingSMS+0x144>)
 8003140:	f7ff fc5c 	bl	80029fc <SMS_getPhonenumb>
 8003144:	4603      	mov	r3, r0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d10d      	bne.n	8003166 <processingSMS+0x52>
		SIM_sendCMD((uint8_t*)"AT+CMGD=1,1", (uint8_t*)"OK",
 800314a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800314e:	9300      	str	r3, [sp, #0]
 8003150:	2301      	movs	r3, #1
 8003152:	2201      	movs	r2, #1
 8003154:	4941      	ldr	r1, [pc, #260]	; (800325c <processingSMS+0x148>)
 8003156:	4842      	ldr	r0, [pc, #264]	; (8003260 <processingSMS+0x14c>)
 8003158:	f7ff fb2e 	bl	80027b8 <SIM_sendCMD>
					ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, 1000);
		newSMS = 0;
 800315c:	4b3c      	ldr	r3, [pc, #240]	; (8003250 <processingSMS+0x13c>)
 800315e:	2200      	movs	r2, #0
 8003160:	701a      	strb	r2, [r3, #0]
		return 0;
 8003162:	2300      	movs	r3, #0
 8003164:	e06e      	b.n	8003244 <processingSMS+0x130>
	}
	//Get SMS content
	uint8_t tmpSMSdatabuffer[SMS_len];
 8003166:	4b3b      	ldr	r3, [pc, #236]	; (8003254 <processingSMS+0x140>)
 8003168:	8819      	ldrh	r1, [r3, #0]
 800316a:	460b      	mov	r3, r1
 800316c:	3b01      	subs	r3, #1
 800316e:	617b      	str	r3, [r7, #20]
 8003170:	b28b      	uxth	r3, r1
 8003172:	2200      	movs	r2, #0
 8003174:	4698      	mov	r8, r3
 8003176:	4691      	mov	r9, r2
 8003178:	f04f 0200 	mov.w	r2, #0
 800317c:	f04f 0300 	mov.w	r3, #0
 8003180:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003184:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003188:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800318c:	b28b      	uxth	r3, r1
 800318e:	2200      	movs	r2, #0
 8003190:	461c      	mov	r4, r3
 8003192:	4615      	mov	r5, r2
 8003194:	f04f 0200 	mov.w	r2, #0
 8003198:	f04f 0300 	mov.w	r3, #0
 800319c:	00eb      	lsls	r3, r5, #3
 800319e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80031a2:	00e2      	lsls	r2, r4, #3
 80031a4:	460b      	mov	r3, r1
 80031a6:	3307      	adds	r3, #7
 80031a8:	08db      	lsrs	r3, r3, #3
 80031aa:	00db      	lsls	r3, r3, #3
 80031ac:	ebad 0d03 	sub.w	sp, sp, r3
 80031b0:	ab02      	add	r3, sp, #8
 80031b2:	3300      	adds	r3, #0
 80031b4:	613b      	str	r3, [r7, #16]
	memset(tmpSMSdatabuffer, 0, SMS_len);
 80031b6:	4b27      	ldr	r3, [pc, #156]	; (8003254 <processingSMS+0x140>)
 80031b8:	881b      	ldrh	r3, [r3, #0]
 80031ba:	461a      	mov	r2, r3
 80031bc:	2100      	movs	r1, #0
 80031be:	6938      	ldr	r0, [r7, #16]
 80031c0:	f008 ffc8 	bl	800c154 <memset>
	uint16_t contentlen = SMS_getContent(SMS_Rxbuff, SMS_len, tmpSMSdatabuffer);
 80031c4:	4b23      	ldr	r3, [pc, #140]	; (8003254 <processingSMS+0x140>)
 80031c6:	881b      	ldrh	r3, [r3, #0]
 80031c8:	693a      	ldr	r2, [r7, #16]
 80031ca:	4619      	mov	r1, r3
 80031cc:	4822      	ldr	r0, [pc, #136]	; (8003258 <processingSMS+0x144>)
 80031ce:	f7ff fc77 	bl	8002ac0 <SMS_getContent>
 80031d2:	4603      	mov	r3, r0
 80031d4:	81fb      	strh	r3, [r7, #14]
//	MQTT_publish((uint8_t*)TOPIC_PUB , tmpSMSdatabuffer, contentlen);
	if ( !contentlen)	{
 80031d6:	89fb      	ldrh	r3, [r7, #14]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d10d      	bne.n	80031f8 <processingSMS+0xe4>
		SIM_sendCMD((uint8_t*)"AT+CMGD=1,1", (uint8_t*)"OK",
 80031dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80031e0:	9300      	str	r3, [sp, #0]
 80031e2:	2301      	movs	r3, #1
 80031e4:	2201      	movs	r2, #1
 80031e6:	491d      	ldr	r1, [pc, #116]	; (800325c <processingSMS+0x148>)
 80031e8:	481d      	ldr	r0, [pc, #116]	; (8003260 <processingSMS+0x14c>)
 80031ea:	f7ff fae5 	bl	80027b8 <SIM_sendCMD>
					ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, 1000);
		newSMS = 0;
 80031ee:	4b18      	ldr	r3, [pc, #96]	; (8003250 <processingSMS+0x13c>)
 80031f0:	2200      	movs	r2, #0
 80031f2:	701a      	strb	r2, [r3, #0]
		return 0;
 80031f4:	2300      	movs	r3, #0
 80031f6:	e025      	b.n	8003244 <processingSMS+0x130>
	}
	//Check SMS command
	uint8_t checkres = SMS_checkCMD(tmpSMSdatabuffer, contentlen, phonenumb);
 80031f8:	463a      	mov	r2, r7
 80031fa:	89fb      	ldrh	r3, [r7, #14]
 80031fc:	4619      	mov	r1, r3
 80031fe:	6938      	ldr	r0, [r7, #16]
 8003200:	f7ff fe2e 	bl	8002e60 <SMS_checkCMD>
 8003204:	4603      	mov	r3, r0
 8003206:	737b      	strb	r3, [r7, #13]
	if ( !checkres ) 	{
 8003208:	7b7b      	ldrb	r3, [r7, #13]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d10d      	bne.n	800322a <processingSMS+0x116>
		SIM_sendCMD((uint8_t*)"AT+CMGD=1,1", (uint8_t*)"OK",
 800320e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003212:	9300      	str	r3, [sp, #0]
 8003214:	2301      	movs	r3, #1
 8003216:	2201      	movs	r2, #1
 8003218:	4910      	ldr	r1, [pc, #64]	; (800325c <processingSMS+0x148>)
 800321a:	4811      	ldr	r0, [pc, #68]	; (8003260 <processingSMS+0x14c>)
 800321c:	f7ff facc 	bl	80027b8 <SIM_sendCMD>
					ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, 1000);
		newSMS = 0;
 8003220:	4b0b      	ldr	r3, [pc, #44]	; (8003250 <processingSMS+0x13c>)
 8003222:	2200      	movs	r2, #0
 8003224:	701a      	strb	r2, [r3, #0]
		return 0;
 8003226:	2300      	movs	r3, #0
 8003228:	e00c      	b.n	8003244 <processingSMS+0x130>
	}
//	if ( checkres == 2 )	{
//		readagain = 1;
//	}
	SIM_sendCMD((uint8_t*)"AT+CMGD=1,1", (uint8_t*)"OK",
 800322a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800322e:	9300      	str	r3, [sp, #0]
 8003230:	2301      	movs	r3, #1
 8003232:	2201      	movs	r2, #1
 8003234:	4909      	ldr	r1, [pc, #36]	; (800325c <processingSMS+0x148>)
 8003236:	480a      	ldr	r0, [pc, #40]	; (8003260 <processingSMS+0x14c>)
 8003238:	f7ff fabe 	bl	80027b8 <SIM_sendCMD>
				ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, 1000);
	newSMS = 0;
 800323c:	4b04      	ldr	r3, [pc, #16]	; (8003250 <processingSMS+0x13c>)
 800323e:	2200      	movs	r2, #0
 8003240:	701a      	strb	r2, [r3, #0]

	return 1;
 8003242:	2301      	movs	r3, #1
 8003244:	46b5      	mov	sp, r6
}
 8003246:	4618      	mov	r0, r3
 8003248:	371c      	adds	r7, #28
 800324a:	46bd      	mov	sp, r7
 800324c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003250:	2000136c 	.word	0x2000136c
 8003254:	2000136e 	.word	0x2000136e
 8003258:	200011a4 	.word	0x200011a4
 800325c:	0800ee00 	.word	0x0800ee00
 8003260:	0800eeb8 	.word	0x0800eeb8

08003264 <checkSMSrequest>:



bool checkSMSrequest (SMS_CMD_t smsCMD)
{
 8003264:	b480      	push	{r7}
 8003266:	b085      	sub	sp, #20
 8003268:	af00      	add	r7, sp, #0
 800326a:	4603      	mov	r3, r0
 800326c:	71fb      	strb	r3, [r7, #7]
	bool res = false;
 800326e:	2300      	movs	r3, #0
 8003270:	73fb      	strb	r3, [r7, #15]
	switch (smsCMD)	{
 8003272:	79fb      	ldrb	r3, [r7, #7]
 8003274:	2b07      	cmp	r3, #7
 8003276:	d873      	bhi.n	8003360 <checkSMSrequest+0xfc>
 8003278:	a201      	add	r2, pc, #4	; (adr r2, 8003280 <checkSMSrequest+0x1c>)
 800327a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800327e:	bf00      	nop
 8003280:	080032a1 	.word	0x080032a1
 8003284:	080032b9 	.word	0x080032b9
 8003288:	08003301 	.word	0x08003301
 800328c:	080032e9 	.word	0x080032e9
 8003290:	080032d1 	.word	0x080032d1
 8003294:	08003319 	.word	0x08003319
 8003298:	08003349 	.word	0x08003349
 800329c:	08003331 	.word	0x08003331
		case SMS_CMD_CTRL_ON:
			res = mySIM.sms.CtrlON.requestflag ;
 80032a0:	4b33      	ldr	r3, [pc, #204]	; (8003370 <checkSMSrequest+0x10c>)
 80032a2:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 80032a6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	bf14      	ite	ne
 80032b0:	2301      	movne	r3, #1
 80032b2:	2300      	moveq	r3, #0
 80032b4:	73fb      	strb	r3, [r7, #15]
			break;
 80032b6:	e054      	b.n	8003362 <checkSMSrequest+0xfe>
		case SMS_CMD_CTRL_OFF:
			res = mySIM.sms.CtrlOFF.requestflag ;
 80032b8:	4b2d      	ldr	r3, [pc, #180]	; (8003370 <checkSMSrequest+0x10c>)
 80032ba:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 80032be:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	bf14      	ite	ne
 80032c8:	2301      	movne	r3, #1
 80032ca:	2300      	moveq	r3, #0
 80032cc:	73fb      	strb	r3, [r7, #15]
			break;
 80032ce:	e048      	b.n	8003362 <checkSMSrequest+0xfe>
		case SMS_CMD_CTRL_DEC:
			res = mySIM.sms.CtrlDEC.requestflag ;
 80032d0:	4b27      	ldr	r3, [pc, #156]	; (8003370 <checkSMSrequest+0x10c>)
 80032d2:	f893 3598 	ldrb.w	r3, [r3, #1432]	; 0x598
 80032d6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	2b00      	cmp	r3, #0
 80032de:	bf14      	ite	ne
 80032e0:	2301      	movne	r3, #1
 80032e2:	2300      	moveq	r3, #0
 80032e4:	73fb      	strb	r3, [r7, #15]
			break;
 80032e6:	e03c      	b.n	8003362 <checkSMSrequest+0xfe>
		case SMS_CMD_CTRL_INC:
			res = mySIM.sms.CtrlINC.requestflag ;
 80032e8:	4b21      	ldr	r3, [pc, #132]	; (8003370 <checkSMSrequest+0x10c>)
 80032ea:	f893 3486 	ldrb.w	r3, [r3, #1158]	; 0x486
 80032ee:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	bf14      	ite	ne
 80032f8:	2301      	movne	r3, #1
 80032fa:	2300      	moveq	r3, #0
 80032fc:	73fb      	strb	r3, [r7, #15]
			break;
 80032fe:	e030      	b.n	8003362 <checkSMSrequest+0xfe>
		case SMS_CMD_CTRL_CALIB:
			res = mySIM.sms.CtrlCALIB.requestflag ;
 8003300:	4b1b      	ldr	r3, [pc, #108]	; (8003370 <checkSMSrequest+0x10c>)
 8003302:	f893 3374 	ldrb.w	r3, [r3, #884]	; 0x374
 8003306:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800330a:	b2db      	uxtb	r3, r3
 800330c:	2b00      	cmp	r3, #0
 800330e:	bf14      	ite	ne
 8003310:	2301      	movne	r3, #1
 8003312:	2300      	moveq	r3, #0
 8003314:	73fb      	strb	r3, [r7, #15]
			break;
 8003316:	e024      	b.n	8003362 <checkSMSrequest+0xfe>
		case SMS_CMD_GET_STATUS:
			res = mySIM.sms.GetStatus.requestflag ;
 8003318:	4b15      	ldr	r3, [pc, #84]	; (8003370 <checkSMSrequest+0x10c>)
 800331a:	f893 36aa 	ldrb.w	r3, [r3, #1706]	; 0x6aa
 800331e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003322:	b2db      	uxtb	r3, r3
 8003324:	2b00      	cmp	r3, #0
 8003326:	bf14      	ite	ne
 8003328:	2301      	movne	r3, #1
 800332a:	2300      	moveq	r3, #0
 800332c:	73fb      	strb	r3, [r7, #15]
			break;
 800332e:	e018      	b.n	8003362 <checkSMSrequest+0xfe>
		case SMS_CMD_GET_STATION:
			res = mySIM.sms.GetStation.requestflag ;
 8003330:	4b0f      	ldr	r3, [pc, #60]	; (8003370 <checkSMSrequest+0x10c>)
 8003332:	f893 38ce 	ldrb.w	r3, [r3, #2254]	; 0x8ce
 8003336:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800333a:	b2db      	uxtb	r3, r3
 800333c:	2b00      	cmp	r3, #0
 800333e:	bf14      	ite	ne
 8003340:	2301      	movne	r3, #1
 8003342:	2300      	moveq	r3, #0
 8003344:	73fb      	strb	r3, [r7, #15]
			break;
 8003346:	e00c      	b.n	8003362 <checkSMSrequest+0xfe>
		case SMS_CMD_GET_SENSOR:
			res = mySIM.sms.GetSensor.requestflag ;
 8003348:	4b09      	ldr	r3, [pc, #36]	; (8003370 <checkSMSrequest+0x10c>)
 800334a:	f893 37bc 	ldrb.w	r3, [r3, #1980]	; 0x7bc
 800334e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003352:	b2db      	uxtb	r3, r3
 8003354:	2b00      	cmp	r3, #0
 8003356:	bf14      	ite	ne
 8003358:	2301      	movne	r3, #1
 800335a:	2300      	moveq	r3, #0
 800335c:	73fb      	strb	r3, [r7, #15]
			break;
 800335e:	e000      	b.n	8003362 <checkSMSrequest+0xfe>
		default:
			break;
 8003360:	bf00      	nop
	}
	return res;
 8003362:	7bfb      	ldrb	r3, [r7, #15]
}
 8003364:	4618      	mov	r0, r3
 8003366:	3714      	adds	r7, #20
 8003368:	46bd      	mov	sp, r7
 800336a:	bc80      	pop	{r7}
 800336c:	4770      	bx	lr
 800336e:	bf00      	nop
 8003370:	20001770 	.word	0x20001770

08003374 <triggerSMSrequest>:

void triggerSMSrequest (SMS_CMD_t smsCMD, SMS_CMD_FLAG_t ENorDIS)
{
 8003374:	b480      	push	{r7}
 8003376:	b083      	sub	sp, #12
 8003378:	af00      	add	r7, sp, #0
 800337a:	4603      	mov	r3, r0
 800337c:	460a      	mov	r2, r1
 800337e:	71fb      	strb	r3, [r7, #7]
 8003380:	4613      	mov	r3, r2
 8003382:	71bb      	strb	r3, [r7, #6]
	switch (smsCMD)	{
 8003384:	79fb      	ldrb	r3, [r7, #7]
 8003386:	2b07      	cmp	r3, #7
 8003388:	d872      	bhi.n	8003470 <triggerSMSrequest+0xfc>
 800338a:	a201      	add	r2, pc, #4	; (adr r2, 8003390 <triggerSMSrequest+0x1c>)
 800338c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003390:	080033b1 	.word	0x080033b1
 8003394:	080033c9 	.word	0x080033c9
 8003398:	08003411 	.word	0x08003411
 800339c:	080033f9 	.word	0x080033f9
 80033a0:	080033e1 	.word	0x080033e1
 80033a4:	08003429 	.word	0x08003429
 80033a8:	08003459 	.word	0x08003459
 80033ac:	08003441 	.word	0x08003441
	case SMS_CMD_CTRL_ON:
		mySIM.sms.CtrlON.requestflag = ENorDIS;
 80033b0:	79bb      	ldrb	r3, [r7, #6]
 80033b2:	f003 0301 	and.w	r3, r3, #1
 80033b6:	b2d9      	uxtb	r1, r3
 80033b8:	4a30      	ldr	r2, [pc, #192]	; (800347c <triggerSMSrequest+0x108>)
 80033ba:	f892 3150 	ldrb.w	r3, [r2, #336]	; 0x150
 80033be:	f361 0300 	bfi	r3, r1, #0, #1
 80033c2:	f882 3150 	strb.w	r3, [r2, #336]	; 0x150
		break;
 80033c6:	e054      	b.n	8003472 <triggerSMSrequest+0xfe>
	case SMS_CMD_CTRL_OFF:
		mySIM.sms.CtrlOFF.requestflag = ENorDIS;
 80033c8:	79bb      	ldrb	r3, [r7, #6]
 80033ca:	f003 0301 	and.w	r3, r3, #1
 80033ce:	b2d9      	uxtb	r1, r3
 80033d0:	4a2a      	ldr	r2, [pc, #168]	; (800347c <triggerSMSrequest+0x108>)
 80033d2:	f892 3262 	ldrb.w	r3, [r2, #610]	; 0x262
 80033d6:	f361 0300 	bfi	r3, r1, #0, #1
 80033da:	f882 3262 	strb.w	r3, [r2, #610]	; 0x262
		break;
 80033de:	e048      	b.n	8003472 <triggerSMSrequest+0xfe>
	case SMS_CMD_CTRL_DEC:
		mySIM.sms.CtrlDEC.requestflag = ENorDIS;
 80033e0:	79bb      	ldrb	r3, [r7, #6]
 80033e2:	f003 0301 	and.w	r3, r3, #1
 80033e6:	b2d9      	uxtb	r1, r3
 80033e8:	4a24      	ldr	r2, [pc, #144]	; (800347c <triggerSMSrequest+0x108>)
 80033ea:	f892 3598 	ldrb.w	r3, [r2, #1432]	; 0x598
 80033ee:	f361 0300 	bfi	r3, r1, #0, #1
 80033f2:	f882 3598 	strb.w	r3, [r2, #1432]	; 0x598
		break;
 80033f6:	e03c      	b.n	8003472 <triggerSMSrequest+0xfe>
	case SMS_CMD_CTRL_INC:
		mySIM.sms.CtrlINC.requestflag = ENorDIS;
 80033f8:	79bb      	ldrb	r3, [r7, #6]
 80033fa:	f003 0301 	and.w	r3, r3, #1
 80033fe:	b2d9      	uxtb	r1, r3
 8003400:	4a1e      	ldr	r2, [pc, #120]	; (800347c <triggerSMSrequest+0x108>)
 8003402:	f892 3486 	ldrb.w	r3, [r2, #1158]	; 0x486
 8003406:	f361 0300 	bfi	r3, r1, #0, #1
 800340a:	f882 3486 	strb.w	r3, [r2, #1158]	; 0x486
		break;
 800340e:	e030      	b.n	8003472 <triggerSMSrequest+0xfe>
	case SMS_CMD_CTRL_CALIB:
		mySIM.sms.CtrlCALIB.requestflag = ENorDIS;
 8003410:	79bb      	ldrb	r3, [r7, #6]
 8003412:	f003 0301 	and.w	r3, r3, #1
 8003416:	b2d9      	uxtb	r1, r3
 8003418:	4a18      	ldr	r2, [pc, #96]	; (800347c <triggerSMSrequest+0x108>)
 800341a:	f892 3374 	ldrb.w	r3, [r2, #884]	; 0x374
 800341e:	f361 0300 	bfi	r3, r1, #0, #1
 8003422:	f882 3374 	strb.w	r3, [r2, #884]	; 0x374
		break;
 8003426:	e024      	b.n	8003472 <triggerSMSrequest+0xfe>
	case SMS_CMD_GET_STATUS:
		mySIM.sms.GetStatus.requestflag = ENorDIS;
 8003428:	79bb      	ldrb	r3, [r7, #6]
 800342a:	f003 0301 	and.w	r3, r3, #1
 800342e:	b2d9      	uxtb	r1, r3
 8003430:	4a12      	ldr	r2, [pc, #72]	; (800347c <triggerSMSrequest+0x108>)
 8003432:	f892 36aa 	ldrb.w	r3, [r2, #1706]	; 0x6aa
 8003436:	f361 0300 	bfi	r3, r1, #0, #1
 800343a:	f882 36aa 	strb.w	r3, [r2, #1706]	; 0x6aa
		break;
 800343e:	e018      	b.n	8003472 <triggerSMSrequest+0xfe>
	case SMS_CMD_GET_STATION:
		mySIM.sms.GetStation.requestflag = ENorDIS;
 8003440:	79bb      	ldrb	r3, [r7, #6]
 8003442:	f003 0301 	and.w	r3, r3, #1
 8003446:	b2d9      	uxtb	r1, r3
 8003448:	4a0c      	ldr	r2, [pc, #48]	; (800347c <triggerSMSrequest+0x108>)
 800344a:	f892 38ce 	ldrb.w	r3, [r2, #2254]	; 0x8ce
 800344e:	f361 0300 	bfi	r3, r1, #0, #1
 8003452:	f882 38ce 	strb.w	r3, [r2, #2254]	; 0x8ce
		break;
 8003456:	e00c      	b.n	8003472 <triggerSMSrequest+0xfe>
	case SMS_CMD_GET_SENSOR:
		mySIM.sms.GetSensor.requestflag = ENorDIS;
 8003458:	79bb      	ldrb	r3, [r7, #6]
 800345a:	f003 0301 	and.w	r3, r3, #1
 800345e:	b2d9      	uxtb	r1, r3
 8003460:	4a06      	ldr	r2, [pc, #24]	; (800347c <triggerSMSrequest+0x108>)
 8003462:	f892 37bc 	ldrb.w	r3, [r2, #1980]	; 0x7bc
 8003466:	f361 0300 	bfi	r3, r1, #0, #1
 800346a:	f882 37bc 	strb.w	r3, [r2, #1980]	; 0x7bc
		break;
 800346e:	e000      	b.n	8003472 <triggerSMSrequest+0xfe>
	default:
		break;
 8003470:	bf00      	nop
	}
}
 8003472:	bf00      	nop
 8003474:	370c      	adds	r7, #12
 8003476:	46bd      	mov	sp, r7
 8003478:	bc80      	pop	{r7}
 800347a:	4770      	bx	lr
 800347c:	20001770 	.word	0x20001770

08003480 <checkSMSreturn>:

bool checkSMSreturn (SMS_CMD_t smsCMD)
{
 8003480:	b480      	push	{r7}
 8003482:	b085      	sub	sp, #20
 8003484:	af00      	add	r7, sp, #0
 8003486:	4603      	mov	r3, r0
 8003488:	71fb      	strb	r3, [r7, #7]
	bool res = false;
 800348a:	2300      	movs	r3, #0
 800348c:	73fb      	strb	r3, [r7, #15]
	switch (smsCMD)	{
 800348e:	79fb      	ldrb	r3, [r7, #7]
 8003490:	2b07      	cmp	r3, #7
 8003492:	d873      	bhi.n	800357c <checkSMSreturn+0xfc>
 8003494:	a201      	add	r2, pc, #4	; (adr r2, 800349c <checkSMSreturn+0x1c>)
 8003496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800349a:	bf00      	nop
 800349c:	080034bd 	.word	0x080034bd
 80034a0:	080034d5 	.word	0x080034d5
 80034a4:	0800351d 	.word	0x0800351d
 80034a8:	08003505 	.word	0x08003505
 80034ac:	080034ed 	.word	0x080034ed
 80034b0:	08003535 	.word	0x08003535
 80034b4:	08003565 	.word	0x08003565
 80034b8:	0800354d 	.word	0x0800354d
		case SMS_CMD_CTRL_ON:
			res = mySIM.sms.CtrlON.returnflag ;
 80034bc:	4b33      	ldr	r3, [pc, #204]	; (800358c <checkSMSreturn+0x10c>)
 80034be:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 80034c2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	bf14      	ite	ne
 80034cc:	2301      	movne	r3, #1
 80034ce:	2300      	moveq	r3, #0
 80034d0:	73fb      	strb	r3, [r7, #15]
			break;
 80034d2:	e054      	b.n	800357e <checkSMSreturn+0xfe>
		case SMS_CMD_CTRL_OFF:
			res = mySIM.sms.CtrlOFF.returnflag ;
 80034d4:	4b2d      	ldr	r3, [pc, #180]	; (800358c <checkSMSreturn+0x10c>)
 80034d6:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 80034da:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	bf14      	ite	ne
 80034e4:	2301      	movne	r3, #1
 80034e6:	2300      	moveq	r3, #0
 80034e8:	73fb      	strb	r3, [r7, #15]
			break;
 80034ea:	e048      	b.n	800357e <checkSMSreturn+0xfe>
		case SMS_CMD_CTRL_DEC:
			res = mySIM.sms.CtrlDEC.returnflag ;
 80034ec:	4b27      	ldr	r3, [pc, #156]	; (800358c <checkSMSreturn+0x10c>)
 80034ee:	f893 3598 	ldrb.w	r3, [r3, #1432]	; 0x598
 80034f2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	bf14      	ite	ne
 80034fc:	2301      	movne	r3, #1
 80034fe:	2300      	moveq	r3, #0
 8003500:	73fb      	strb	r3, [r7, #15]
			break;
 8003502:	e03c      	b.n	800357e <checkSMSreturn+0xfe>
		case SMS_CMD_CTRL_INC:
			res = mySIM.sms.CtrlINC.returnflag ;
 8003504:	4b21      	ldr	r3, [pc, #132]	; (800358c <checkSMSreturn+0x10c>)
 8003506:	f893 3486 	ldrb.w	r3, [r3, #1158]	; 0x486
 800350a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800350e:	b2db      	uxtb	r3, r3
 8003510:	2b00      	cmp	r3, #0
 8003512:	bf14      	ite	ne
 8003514:	2301      	movne	r3, #1
 8003516:	2300      	moveq	r3, #0
 8003518:	73fb      	strb	r3, [r7, #15]
			break;
 800351a:	e030      	b.n	800357e <checkSMSreturn+0xfe>
		case SMS_CMD_CTRL_CALIB:
			res = mySIM.sms.CtrlCALIB.returnflag ;
 800351c:	4b1b      	ldr	r3, [pc, #108]	; (800358c <checkSMSreturn+0x10c>)
 800351e:	f893 3374 	ldrb.w	r3, [r3, #884]	; 0x374
 8003522:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003526:	b2db      	uxtb	r3, r3
 8003528:	2b00      	cmp	r3, #0
 800352a:	bf14      	ite	ne
 800352c:	2301      	movne	r3, #1
 800352e:	2300      	moveq	r3, #0
 8003530:	73fb      	strb	r3, [r7, #15]
			break;
 8003532:	e024      	b.n	800357e <checkSMSreturn+0xfe>
		case SMS_CMD_GET_STATUS:
			res = mySIM.sms.GetStatus.returnflag ;
 8003534:	4b15      	ldr	r3, [pc, #84]	; (800358c <checkSMSreturn+0x10c>)
 8003536:	f893 36aa 	ldrb.w	r3, [r3, #1706]	; 0x6aa
 800353a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800353e:	b2db      	uxtb	r3, r3
 8003540:	2b00      	cmp	r3, #0
 8003542:	bf14      	ite	ne
 8003544:	2301      	movne	r3, #1
 8003546:	2300      	moveq	r3, #0
 8003548:	73fb      	strb	r3, [r7, #15]
			break;
 800354a:	e018      	b.n	800357e <checkSMSreturn+0xfe>
		case SMS_CMD_GET_STATION:
			res = mySIM.sms.GetStation.returnflag ;
 800354c:	4b0f      	ldr	r3, [pc, #60]	; (800358c <checkSMSreturn+0x10c>)
 800354e:	f893 38ce 	ldrb.w	r3, [r3, #2254]	; 0x8ce
 8003552:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003556:	b2db      	uxtb	r3, r3
 8003558:	2b00      	cmp	r3, #0
 800355a:	bf14      	ite	ne
 800355c:	2301      	movne	r3, #1
 800355e:	2300      	moveq	r3, #0
 8003560:	73fb      	strb	r3, [r7, #15]
			break;
 8003562:	e00c      	b.n	800357e <checkSMSreturn+0xfe>
		case SMS_CMD_GET_SENSOR:
			res = mySIM.sms.GetSensor.returnflag ;
 8003564:	4b09      	ldr	r3, [pc, #36]	; (800358c <checkSMSreturn+0x10c>)
 8003566:	f893 37bc 	ldrb.w	r3, [r3, #1980]	; 0x7bc
 800356a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800356e:	b2db      	uxtb	r3, r3
 8003570:	2b00      	cmp	r3, #0
 8003572:	bf14      	ite	ne
 8003574:	2301      	movne	r3, #1
 8003576:	2300      	moveq	r3, #0
 8003578:	73fb      	strb	r3, [r7, #15]
			break;
 800357a:	e000      	b.n	800357e <checkSMSreturn+0xfe>
		default:
			break;
 800357c:	bf00      	nop
		}
	return res;
 800357e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003580:	4618      	mov	r0, r3
 8003582:	3714      	adds	r7, #20
 8003584:	46bd      	mov	sp, r7
 8003586:	bc80      	pop	{r7}
 8003588:	4770      	bx	lr
 800358a:	bf00      	nop
 800358c:	20001770 	.word	0x20001770

08003590 <triggerSMSreturn>:
void triggerSMSreturn (SMS_CMD_t smsCMD, SMS_CMD_FLAG_t ENorDIS)
{
 8003590:	b480      	push	{r7}
 8003592:	b083      	sub	sp, #12
 8003594:	af00      	add	r7, sp, #0
 8003596:	4603      	mov	r3, r0
 8003598:	460a      	mov	r2, r1
 800359a:	71fb      	strb	r3, [r7, #7]
 800359c:	4613      	mov	r3, r2
 800359e:	71bb      	strb	r3, [r7, #6]
	switch (smsCMD)	{
 80035a0:	79fb      	ldrb	r3, [r7, #7]
 80035a2:	2b07      	cmp	r3, #7
 80035a4:	d872      	bhi.n	800368c <triggerSMSreturn+0xfc>
 80035a6:	a201      	add	r2, pc, #4	; (adr r2, 80035ac <triggerSMSreturn+0x1c>)
 80035a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035ac:	080035cd 	.word	0x080035cd
 80035b0:	080035e5 	.word	0x080035e5
 80035b4:	0800362d 	.word	0x0800362d
 80035b8:	08003615 	.word	0x08003615
 80035bc:	080035fd 	.word	0x080035fd
 80035c0:	08003645 	.word	0x08003645
 80035c4:	08003675 	.word	0x08003675
 80035c8:	0800365d 	.word	0x0800365d
	case SMS_CMD_CTRL_ON:
		mySIM.sms.CtrlON.returnflag = ENorDIS;
 80035cc:	79bb      	ldrb	r3, [r7, #6]
 80035ce:	f003 0301 	and.w	r3, r3, #1
 80035d2:	b2d9      	uxtb	r1, r3
 80035d4:	4a30      	ldr	r2, [pc, #192]	; (8003698 <triggerSMSreturn+0x108>)
 80035d6:	f892 3150 	ldrb.w	r3, [r2, #336]	; 0x150
 80035da:	f361 0341 	bfi	r3, r1, #1, #1
 80035de:	f882 3150 	strb.w	r3, [r2, #336]	; 0x150
		break;
 80035e2:	e054      	b.n	800368e <triggerSMSreturn+0xfe>
	case SMS_CMD_CTRL_OFF:
		mySIM.sms.CtrlOFF.returnflag = ENorDIS;
 80035e4:	79bb      	ldrb	r3, [r7, #6]
 80035e6:	f003 0301 	and.w	r3, r3, #1
 80035ea:	b2d9      	uxtb	r1, r3
 80035ec:	4a2a      	ldr	r2, [pc, #168]	; (8003698 <triggerSMSreturn+0x108>)
 80035ee:	f892 3262 	ldrb.w	r3, [r2, #610]	; 0x262
 80035f2:	f361 0341 	bfi	r3, r1, #1, #1
 80035f6:	f882 3262 	strb.w	r3, [r2, #610]	; 0x262
		break;
 80035fa:	e048      	b.n	800368e <triggerSMSreturn+0xfe>
	case SMS_CMD_CTRL_DEC:
		mySIM.sms.CtrlDEC.returnflag = ENorDIS;
 80035fc:	79bb      	ldrb	r3, [r7, #6]
 80035fe:	f003 0301 	and.w	r3, r3, #1
 8003602:	b2d9      	uxtb	r1, r3
 8003604:	4a24      	ldr	r2, [pc, #144]	; (8003698 <triggerSMSreturn+0x108>)
 8003606:	f892 3598 	ldrb.w	r3, [r2, #1432]	; 0x598
 800360a:	f361 0341 	bfi	r3, r1, #1, #1
 800360e:	f882 3598 	strb.w	r3, [r2, #1432]	; 0x598
		break;
 8003612:	e03c      	b.n	800368e <triggerSMSreturn+0xfe>
	case SMS_CMD_CTRL_INC:
		mySIM.sms.CtrlINC.returnflag = ENorDIS;
 8003614:	79bb      	ldrb	r3, [r7, #6]
 8003616:	f003 0301 	and.w	r3, r3, #1
 800361a:	b2d9      	uxtb	r1, r3
 800361c:	4a1e      	ldr	r2, [pc, #120]	; (8003698 <triggerSMSreturn+0x108>)
 800361e:	f892 3486 	ldrb.w	r3, [r2, #1158]	; 0x486
 8003622:	f361 0341 	bfi	r3, r1, #1, #1
 8003626:	f882 3486 	strb.w	r3, [r2, #1158]	; 0x486
		break;
 800362a:	e030      	b.n	800368e <triggerSMSreturn+0xfe>
	case SMS_CMD_CTRL_CALIB:
		mySIM.sms.CtrlCALIB.returnflag = ENorDIS;
 800362c:	79bb      	ldrb	r3, [r7, #6]
 800362e:	f003 0301 	and.w	r3, r3, #1
 8003632:	b2d9      	uxtb	r1, r3
 8003634:	4a18      	ldr	r2, [pc, #96]	; (8003698 <triggerSMSreturn+0x108>)
 8003636:	f892 3374 	ldrb.w	r3, [r2, #884]	; 0x374
 800363a:	f361 0341 	bfi	r3, r1, #1, #1
 800363e:	f882 3374 	strb.w	r3, [r2, #884]	; 0x374
		break;
 8003642:	e024      	b.n	800368e <triggerSMSreturn+0xfe>
	case SMS_CMD_GET_STATUS:
		mySIM.sms.GetStatus.returnflag = ENorDIS;
 8003644:	79bb      	ldrb	r3, [r7, #6]
 8003646:	f003 0301 	and.w	r3, r3, #1
 800364a:	b2d9      	uxtb	r1, r3
 800364c:	4a12      	ldr	r2, [pc, #72]	; (8003698 <triggerSMSreturn+0x108>)
 800364e:	f892 36aa 	ldrb.w	r3, [r2, #1706]	; 0x6aa
 8003652:	f361 0341 	bfi	r3, r1, #1, #1
 8003656:	f882 36aa 	strb.w	r3, [r2, #1706]	; 0x6aa
		break;
 800365a:	e018      	b.n	800368e <triggerSMSreturn+0xfe>
	case SMS_CMD_GET_STATION:
		mySIM.sms.GetStation.returnflag = ENorDIS;
 800365c:	79bb      	ldrb	r3, [r7, #6]
 800365e:	f003 0301 	and.w	r3, r3, #1
 8003662:	b2d9      	uxtb	r1, r3
 8003664:	4a0c      	ldr	r2, [pc, #48]	; (8003698 <triggerSMSreturn+0x108>)
 8003666:	f892 38ce 	ldrb.w	r3, [r2, #2254]	; 0x8ce
 800366a:	f361 0341 	bfi	r3, r1, #1, #1
 800366e:	f882 38ce 	strb.w	r3, [r2, #2254]	; 0x8ce
		break;
 8003672:	e00c      	b.n	800368e <triggerSMSreturn+0xfe>
	case SMS_CMD_GET_SENSOR:
		mySIM.sms.GetSensor.returnflag = ENorDIS;
 8003674:	79bb      	ldrb	r3, [r7, #6]
 8003676:	f003 0301 	and.w	r3, r3, #1
 800367a:	b2d9      	uxtb	r1, r3
 800367c:	4a06      	ldr	r2, [pc, #24]	; (8003698 <triggerSMSreturn+0x108>)
 800367e:	f892 37bc 	ldrb.w	r3, [r2, #1980]	; 0x7bc
 8003682:	f361 0341 	bfi	r3, r1, #1, #1
 8003686:	f882 37bc 	strb.w	r3, [r2, #1980]	; 0x7bc
		break;
 800368a:	e000      	b.n	800368e <triggerSMSreturn+0xfe>
	default:
		break;
 800368c:	bf00      	nop
	}
}
 800368e:	bf00      	nop
 8003690:	370c      	adds	r7, #12
 8003692:	46bd      	mov	sp, r7
 8003694:	bc80      	pop	{r7}
 8003696:	4770      	bx	lr
 8003698:	20001770 	.word	0x20001770

0800369c <SMS_config>:

uint8_t SMS_config()
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b082      	sub	sp, #8
 80036a0:	af02      	add	r7, sp, #8
	if ( SIM_sendCMD((uint8_t*)"AT+CMGF=1", (uint8_t*)"OK", ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, SIM_TIMEOUT_SHORT) != SIM_RES_MSG ) return 0;
 80036a2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80036a6:	9300      	str	r3, [sp, #0]
 80036a8:	2301      	movs	r3, #1
 80036aa:	2201      	movs	r2, #1
 80036ac:	490d      	ldr	r1, [pc, #52]	; (80036e4 <SMS_config+0x48>)
 80036ae:	480e      	ldr	r0, [pc, #56]	; (80036e8 <SMS_config+0x4c>)
 80036b0:	f7ff f882 	bl	80027b8 <SIM_sendCMD>
 80036b4:	4603      	mov	r3, r0
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	d001      	beq.n	80036be <SMS_config+0x22>
 80036ba:	2300      	movs	r3, #0
 80036bc:	e00e      	b.n	80036dc <SMS_config+0x40>

	if ( SIM_sendCMD((uint8_t*)"AT+CSCS=\"GSM\"", (uint8_t*)"OK", ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, SIM_TIMEOUT_SHORT) != SIM_RES_MSG)		return 0;
 80036be:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80036c2:	9300      	str	r3, [sp, #0]
 80036c4:	2301      	movs	r3, #1
 80036c6:	2201      	movs	r2, #1
 80036c8:	4906      	ldr	r1, [pc, #24]	; (80036e4 <SMS_config+0x48>)
 80036ca:	4808      	ldr	r0, [pc, #32]	; (80036ec <SMS_config+0x50>)
 80036cc:	f7ff f874 	bl	80027b8 <SIM_sendCMD>
 80036d0:	4603      	mov	r3, r0
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d001      	beq.n	80036da <SMS_config+0x3e>
 80036d6:	2300      	movs	r3, #0
 80036d8:	e000      	b.n	80036dc <SMS_config+0x40>

	return 1;
 80036da:	2301      	movs	r3, #1
}
 80036dc:	4618      	mov	r0, r3
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}
 80036e2:	bf00      	nop
 80036e4:	0800ee00 	.word	0x0800ee00
 80036e8:	0800eec4 	.word	0x0800eec4
 80036ec:	0800eed0 	.word	0x0800eed0

080036f0 <SMS_sendMsg>:

uint8_t SMS_sendMsg(uint8_t *Msg, uint16_t msglen, uint8_t *phonenumber )
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b0a6      	sub	sp, #152	; 0x98
 80036f4:	af02      	add	r7, sp, #8
 80036f6:	60f8      	str	r0, [r7, #12]
 80036f8:	460b      	mov	r3, r1
 80036fa:	607a      	str	r2, [r7, #4]
 80036fc:	817b      	strh	r3, [r7, #10]
	if ( !SMS_config() )	return 0;
 80036fe:	f7ff ffcd 	bl	800369c <SMS_config>
 8003702:	4603      	mov	r3, r0
 8003704:	2b00      	cmp	r3, #0
 8003706:	d101      	bne.n	800370c <SMS_sendMsg+0x1c>
 8003708:	2300      	movs	r3, #0
 800370a:	e033      	b.n	8003774 <SMS_sendMsg+0x84>
	uint8_t SIM_Txbuff[128];
	sprintf((char*)SIM_Txbuff, "AT+CMGS=\"%s\"", phonenumber);
 800370c:	f107 0310 	add.w	r3, r7, #16
 8003710:	687a      	ldr	r2, [r7, #4]
 8003712:	491a      	ldr	r1, [pc, #104]	; (800377c <SMS_sendMsg+0x8c>)
 8003714:	4618      	mov	r0, r3
 8003716:	f009 f883 	bl	800c820 <siprintf>
	if ( SIM_sendCMD(SIM_Txbuff, (uint8_t*)">", ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, SIM_TIMEOUT_MEDIUM) != SIM_RES_MSG)	return 0;
 800371a:	f107 0010 	add.w	r0, r7, #16
 800371e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003722:	9300      	str	r3, [sp, #0]
 8003724:	2301      	movs	r3, #1
 8003726:	2201      	movs	r2, #1
 8003728:	4915      	ldr	r1, [pc, #84]	; (8003780 <SMS_sendMsg+0x90>)
 800372a:	f7ff f845 	bl	80027b8 <SIM_sendCMD>
 800372e:	4603      	mov	r3, r0
 8003730:	2b01      	cmp	r3, #1
 8003732:	d001      	beq.n	8003738 <SMS_sendMsg+0x48>
 8003734:	2300      	movs	r3, #0
 8003736:	e01d      	b.n	8003774 <SMS_sendMsg+0x84>

	Msg[msglen++] = 0x1A;
 8003738:	897b      	ldrh	r3, [r7, #10]
 800373a:	1c5a      	adds	r2, r3, #1
 800373c:	817a      	strh	r2, [r7, #10]
 800373e:	461a      	mov	r2, r3
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	4413      	add	r3, r2
 8003744:	221a      	movs	r2, #26
 8003746:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(SIM_UART, Msg, msglen, 0xFFFF);
 8003748:	897a      	ldrh	r2, [r7, #10]
 800374a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800374e:	68f9      	ldr	r1, [r7, #12]
 8003750:	480c      	ldr	r0, [pc, #48]	; (8003784 <SMS_sendMsg+0x94>)
 8003752:	f007 fba7 	bl	800aea4 <HAL_UART_Transmit>
	if ( SIM_checkMsg((uint8_t*)"OK", SIM_TIMEOUT_SHORT) != SIM_RES_MSG)	{
 8003756:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800375a:	480b      	ldr	r0, [pc, #44]	; (8003788 <SMS_sendMsg+0x98>)
 800375c:	f7fe ff70 	bl	8002640 <SIM_checkMsg>
 8003760:	4603      	mov	r3, r0
 8003762:	2b01      	cmp	r3, #1
 8003764:	d003      	beq.n	800376e <SMS_sendMsg+0x7e>
		MarkAsReadData_SIM();
 8003766:	f7ff f8d7 	bl	8002918 <MarkAsReadData_SIM>
		return 0;
 800376a:	2300      	movs	r3, #0
 800376c:	e002      	b.n	8003774 <SMS_sendMsg+0x84>
	}
//	HAL_UART_Transmit(SIM_UART, (uint8_t*), Size, Timeout)
	MarkAsReadData_SIM();
 800376e:	f7ff f8d3 	bl	8002918 <MarkAsReadData_SIM>
	return 1;
 8003772:	2301      	movs	r3, #1
}
 8003774:	4618      	mov	r0, r3
 8003776:	3790      	adds	r7, #144	; 0x90
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}
 800377c:	0800eee0 	.word	0x0800eee0
 8003780:	0800eef0 	.word	0x0800eef0
 8003784:	20002a58 	.word	0x20002a58
 8003788:	0800ee00 	.word	0x0800ee00

0800378c <setLimit>:
static uint8_t steppercentChange = 0;
static Stepmotor_change_mode_t stepMode = STEPM_MODE_STEP;


void setLimit(LIMIT_t Limit)
{
 800378c:	b480      	push	{r7}
 800378e:	b083      	sub	sp, #12
 8003790:	af00      	add	r7, sp, #0
 8003792:	4603      	mov	r3, r0
 8003794:	71fb      	strb	r3, [r7, #7]
	limit = Limit;
 8003796:	4a04      	ldr	r2, [pc, #16]	; (80037a8 <setLimit+0x1c>)
 8003798:	79fb      	ldrb	r3, [r7, #7]
 800379a:	7013      	strb	r3, [r2, #0]
}
 800379c:	bf00      	nop
 800379e:	370c      	adds	r7, #12
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bc80      	pop	{r7}
 80037a4:	4770      	bx	lr
 80037a6:	bf00      	nop
 80037a8:	20000000 	.word	0x20000000

080037ac <getLimit>:

LIMIT_t getLimit ()
{
 80037ac:	b480      	push	{r7}
 80037ae:	af00      	add	r7, sp, #0
	return limit;
 80037b0:	4b02      	ldr	r3, [pc, #8]	; (80037bc <getLimit+0x10>)
 80037b2:	781b      	ldrb	r3, [r3, #0]
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bc80      	pop	{r7}
 80037ba:	4770      	bx	lr
 80037bc:	20000000 	.word	0x20000000

080037c0 <Step_getDir>:

Stepmotor_dir_t Step_getDir()
{
 80037c0:	b480      	push	{r7}
 80037c2:	af00      	add	r7, sp, #0
	return step_dir;
 80037c4:	4b02      	ldr	r3, [pc, #8]	; (80037d0 <Step_getDir+0x10>)
 80037c6:	781b      	ldrb	r3, [r3, #0]
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bc80      	pop	{r7}
 80037ce:	4770      	bx	lr
 80037d0:	20000001 	.word	0x20000001

080037d4 <Step_setDir>:

void Step_setDir(Stepmotor_dir_t dir)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b083      	sub	sp, #12
 80037d8:	af00      	add	r7, sp, #0
 80037da:	4603      	mov	r3, r0
 80037dc:	71fb      	strb	r3, [r7, #7]
	step_dir = dir;
 80037de:	4a04      	ldr	r2, [pc, #16]	; (80037f0 <Step_setDir+0x1c>)
 80037e0:	79fb      	ldrb	r3, [r7, #7]
 80037e2:	7013      	strb	r3, [r2, #0]
}
 80037e4:	bf00      	nop
 80037e6:	370c      	adds	r7, #12
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bc80      	pop	{r7}
 80037ec:	4770      	bx	lr
 80037ee:	bf00      	nop
 80037f0:	20000001 	.word	0x20000001

080037f4 <Step_toggleDir>:

void Step_toggleDir()
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	af00      	add	r7, sp, #0
	switch (Step_getDir())	{
 80037f8:	f7ff ffe2 	bl	80037c0 <Step_getDir>
 80037fc:	4603      	mov	r3, r0
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d002      	beq.n	8003808 <Step_toggleDir+0x14>
 8003802:	2b02      	cmp	r3, #2
 8003804:	d004      	beq.n	8003810 <Step_toggleDir+0x1c>
		break;
	case STEPM_DIR_DEC:
		Step_setDir(STEPM_DIR_INC);
		break;
	default:
		break;
 8003806:	e007      	b.n	8003818 <Step_toggleDir+0x24>
		Step_setDir(STEPM_DIR_DEC);
 8003808:	2002      	movs	r0, #2
 800380a:	f7ff ffe3 	bl	80037d4 <Step_setDir>
		break;
 800380e:	e003      	b.n	8003818 <Step_toggleDir+0x24>
		Step_setDir(STEPM_DIR_INC);
 8003810:	2001      	movs	r0, #1
 8003812:	f7ff ffdf 	bl	80037d4 <Step_setDir>
		break;
 8003816:	bf00      	nop
	}
}
 8003818:	bf00      	nop
 800381a:	bd80      	pop	{r7, pc}

0800381c <increaseStepchange>:

void increaseStepchange()
{
 800381c:	b480      	push	{r7}
 800381e:	af00      	add	r7, sp, #0
	if (stepChange >= MAX_STEP )	{
 8003820:	4b0a      	ldr	r3, [pc, #40]	; (800384c <increaseStepchange+0x30>)
 8003822:	881b      	ldrh	r3, [r3, #0]
 8003824:	b29b      	uxth	r3, r3
 8003826:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800382a:	d303      	bcc.n	8003834 <increaseStepchange+0x18>
		stepChange = 0;
 800382c:	4b07      	ldr	r3, [pc, #28]	; (800384c <increaseStepchange+0x30>)
 800382e:	2200      	movs	r2, #0
 8003830:	801a      	strh	r2, [r3, #0]
	}
	else {
		stepChange ++;
	}
}
 8003832:	e006      	b.n	8003842 <increaseStepchange+0x26>
		stepChange ++;
 8003834:	4b05      	ldr	r3, [pc, #20]	; (800384c <increaseStepchange+0x30>)
 8003836:	881b      	ldrh	r3, [r3, #0]
 8003838:	b29b      	uxth	r3, r3
 800383a:	3301      	adds	r3, #1
 800383c:	b29a      	uxth	r2, r3
 800383e:	4b03      	ldr	r3, [pc, #12]	; (800384c <increaseStepchange+0x30>)
 8003840:	801a      	strh	r2, [r3, #0]
}
 8003842:	bf00      	nop
 8003844:	46bd      	mov	sp, r7
 8003846:	bc80      	pop	{r7}
 8003848:	4770      	bx	lr
 800384a:	bf00      	nop
 800384c:	20001370 	.word	0x20001370

08003850 <decreaseStepchange>:

void decreaseStepchange()
{
 8003850:	b480      	push	{r7}
 8003852:	af00      	add	r7, sp, #0
	if (stepChange == 0  )	{
 8003854:	4b0a      	ldr	r3, [pc, #40]	; (8003880 <decreaseStepchange+0x30>)
 8003856:	881b      	ldrh	r3, [r3, #0]
 8003858:	b29b      	uxth	r3, r3
 800385a:	2b00      	cmp	r3, #0
 800385c:	d104      	bne.n	8003868 <decreaseStepchange+0x18>
		stepChange = MAX_STEP;
 800385e:	4b08      	ldr	r3, [pc, #32]	; (8003880 <decreaseStepchange+0x30>)
 8003860:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8003864:	801a      	strh	r2, [r3, #0]
	}
	else {
		stepChange--;
	}
}
 8003866:	e006      	b.n	8003876 <decreaseStepchange+0x26>
		stepChange--;
 8003868:	4b05      	ldr	r3, [pc, #20]	; (8003880 <decreaseStepchange+0x30>)
 800386a:	881b      	ldrh	r3, [r3, #0]
 800386c:	b29b      	uxth	r3, r3
 800386e:	3b01      	subs	r3, #1
 8003870:	b29a      	uxth	r2, r3
 8003872:	4b03      	ldr	r3, [pc, #12]	; (8003880 <decreaseStepchange+0x30>)
 8003874:	801a      	strh	r2, [r3, #0]
}
 8003876:	bf00      	nop
 8003878:	46bd      	mov	sp, r7
 800387a:	bc80      	pop	{r7}
 800387c:	4770      	bx	lr
 800387e:	bf00      	nop
 8003880:	20001370 	.word	0x20001370

08003884 <getStepchange>:

uint16_t getStepchange()
{
 8003884:	b480      	push	{r7}
 8003886:	af00      	add	r7, sp, #0
	return stepChange;
 8003888:	4b03      	ldr	r3, [pc, #12]	; (8003898 <getStepchange+0x14>)
 800388a:	881b      	ldrh	r3, [r3, #0]
 800388c:	b29b      	uxth	r3, r3
}
 800388e:	4618      	mov	r0, r3
 8003890:	46bd      	mov	sp, r7
 8003892:	bc80      	pop	{r7}
 8003894:	4770      	bx	lr
 8003896:	bf00      	nop
 8003898:	20001370 	.word	0x20001370

0800389c <Step_setStepChange>:
void Step_setStepChange(uint16_t value)
{
 800389c:	b480      	push	{r7}
 800389e:	b083      	sub	sp, #12
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	4603      	mov	r3, r0
 80038a4:	80fb      	strh	r3, [r7, #6]
	stepChange = value;
 80038a6:	4a04      	ldr	r2, [pc, #16]	; (80038b8 <Step_setStepChange+0x1c>)
 80038a8:	88fb      	ldrh	r3, [r7, #6]
 80038aa:	8013      	strh	r3, [r2, #0]
}
 80038ac:	bf00      	nop
 80038ae:	370c      	adds	r7, #12
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bc80      	pop	{r7}
 80038b4:	4770      	bx	lr
 80038b6:	bf00      	nop
 80038b8:	20001370 	.word	0x20001370

080038bc <Step_getPercentChange>:
uint8_t Step_getPercentChange()
{
 80038bc:	b480      	push	{r7}
 80038be:	af00      	add	r7, sp, #0
	return steppercentChange;
 80038c0:	4b02      	ldr	r3, [pc, #8]	; (80038cc <Step_getPercentChange+0x10>)
 80038c2:	781b      	ldrb	r3, [r3, #0]
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bc80      	pop	{r7}
 80038ca:	4770      	bx	lr
 80038cc:	20001372 	.word	0x20001372

080038d0 <Step_setPercentChange>:

void Step_setPercentChange(uint8_t percent)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b083      	sub	sp, #12
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	4603      	mov	r3, r0
 80038d8:	71fb      	strb	r3, [r7, #7]
	steppercentChange = percent;
 80038da:	4a04      	ldr	r2, [pc, #16]	; (80038ec <Step_setPercentChange+0x1c>)
 80038dc:	79fb      	ldrb	r3, [r7, #7]
 80038de:	7013      	strb	r3, [r2, #0]
}
 80038e0:	bf00      	nop
 80038e2:	370c      	adds	r7, #12
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bc80      	pop	{r7}
 80038e8:	4770      	bx	lr
 80038ea:	bf00      	nop
 80038ec:	20001372 	.word	0x20001372

080038f0 <Step_setChangeMode>:

void Step_setChangeMode(Stepmotor_change_mode_t mode)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	4603      	mov	r3, r0
 80038f8:	71fb      	strb	r3, [r7, #7]
	stepMode = mode;
 80038fa:	4a04      	ldr	r2, [pc, #16]	; (800390c <Step_setChangeMode+0x1c>)
 80038fc:	79fb      	ldrb	r3, [r7, #7]
 80038fe:	7013      	strb	r3, [r2, #0]
}
 8003900:	bf00      	nop
 8003902:	370c      	adds	r7, #12
 8003904:	46bd      	mov	sp, r7
 8003906:	bc80      	pop	{r7}
 8003908:	4770      	bx	lr
 800390a:	bf00      	nop
 800390c:	20000002 	.word	0x20000002

08003910 <Step_getChangemode>:

Stepmotor_change_mode_t Step_getChangemode()
{
 8003910:	b480      	push	{r7}
 8003912:	af00      	add	r7, sp, #0
	return stepMode;
 8003914:	4b02      	ldr	r3, [pc, #8]	; (8003920 <Step_getChangemode+0x10>)
 8003916:	781b      	ldrb	r3, [r3, #0]
}
 8003918:	4618      	mov	r0, r3
 800391a:	46bd      	mov	sp, r7
 800391c:	bc80      	pop	{r7}
 800391e:	4770      	bx	lr
 8003920:	20000002 	.word	0x20000002

08003924 <Step_step>:

void Step_step()
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b082      	sub	sp, #8
 8003928:	af00      	add	r7, sp, #0
	uint8_t dir = Step_getDir();
 800392a:	f7ff ff49 	bl	80037c0 <Step_getDir>
 800392e:	4603      	mov	r3, r0
 8003930:	71fb      	strb	r3, [r7, #7]
	if (HAL_GPIO_ReadPin(LIMIT_SWITCH_MAX_GPIO_Port, LIMIT_SWITCH_MAX_Pin) == 0 && dir == STEPM_DIR_INC )	return ;
 8003932:	2120      	movs	r1, #32
 8003934:	4813      	ldr	r0, [pc, #76]	; (8003984 <Step_step+0x60>)
 8003936:	f005 fa9f 	bl	8008e78 <HAL_GPIO_ReadPin>
 800393a:	4603      	mov	r3, r0
 800393c:	2b00      	cmp	r3, #0
 800393e:	d102      	bne.n	8003946 <Step_step+0x22>
 8003940:	79fb      	ldrb	r3, [r7, #7]
 8003942:	2b01      	cmp	r3, #1
 8003944:	d017      	beq.n	8003976 <Step_step+0x52>
	if (HAL_GPIO_ReadPin(LIMIT_SWITCH_MIN_GPIO_Port, LIMIT_SWITCH_MIN_Pin) == 0 && dir == STEPM_DIR_DEC )  return;
 8003946:	2104      	movs	r1, #4
 8003948:	480f      	ldr	r0, [pc, #60]	; (8003988 <Step_step+0x64>)
 800394a:	f005 fa95 	bl	8008e78 <HAL_GPIO_ReadPin>
 800394e:	4603      	mov	r3, r0
 8003950:	2b00      	cmp	r3, #0
 8003952:	d102      	bne.n	800395a <Step_step+0x36>
 8003954:	79fb      	ldrb	r3, [r7, #7]
 8003956:	2b02      	cmp	r3, #2
 8003958:	d00f      	beq.n	800397a <Step_step+0x56>
	A4988_EnableDriver();
 800395a:	f003 f8e7 	bl	8006b2c <A4988_EnableDriver>
	A4988_StepByStep(getStepchange(), dir );
 800395e:	f7ff ff91 	bl	8003884 <getStepchange>
 8003962:	4603      	mov	r3, r0
 8003964:	461a      	mov	r2, r3
 8003966:	79fb      	ldrb	r3, [r7, #7]
 8003968:	4619      	mov	r1, r3
 800396a:	4610      	mov	r0, r2
 800396c:	f003 f91a 	bl	8006ba4 <A4988_StepByStep>
	A4988_DisableDriver();
 8003970:	f003 f8fa 	bl	8006b68 <A4988_DisableDriver>
 8003974:	e002      	b.n	800397c <Step_step+0x58>
	if (HAL_GPIO_ReadPin(LIMIT_SWITCH_MAX_GPIO_Port, LIMIT_SWITCH_MAX_Pin) == 0 && dir == STEPM_DIR_INC )	return ;
 8003976:	bf00      	nop
 8003978:	e000      	b.n	800397c <Step_step+0x58>
	if (HAL_GPIO_ReadPin(LIMIT_SWITCH_MIN_GPIO_Port, LIMIT_SWITCH_MIN_Pin) == 0 && dir == STEPM_DIR_DEC )  return;
 800397a:	bf00      	nop

}
 800397c:	3708      	adds	r7, #8
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	40010800 	.word	0x40010800
 8003988:	40010c00 	.word	0x40010c00

0800398c <Step_percent>:

void Step_percent()
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b082      	sub	sp, #8
 8003990:	af00      	add	r7, sp, #0
	uint8_t dir = Step_getDir();
 8003992:	f7ff ff15 	bl	80037c0 <Step_getDir>
 8003996:	4603      	mov	r3, r0
 8003998:	71fb      	strb	r3, [r7, #7]
	if (HAL_GPIO_ReadPin(LIMIT_SWITCH_MAX_GPIO_Port, LIMIT_SWITCH_MAX_Pin) == 0 && dir == STEPM_DIR_INC )	return ;
 800399a:	2120      	movs	r1, #32
 800399c:	4814      	ldr	r0, [pc, #80]	; (80039f0 <Step_percent+0x64>)
 800399e:	f005 fa6b 	bl	8008e78 <HAL_GPIO_ReadPin>
 80039a2:	4603      	mov	r3, r0
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d102      	bne.n	80039ae <Step_percent+0x22>
 80039a8:	79fb      	ldrb	r3, [r7, #7]
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d01a      	beq.n	80039e4 <Step_percent+0x58>
	if (HAL_GPIO_ReadPin(LIMIT_SWITCH_MIN_GPIO_Port, LIMIT_SWITCH_MIN_Pin) && dir == STEPM_DIR_DEC )  return;
 80039ae:	2104      	movs	r1, #4
 80039b0:	4810      	ldr	r0, [pc, #64]	; (80039f4 <Step_percent+0x68>)
 80039b2:	f005 fa61 	bl	8008e78 <HAL_GPIO_ReadPin>
 80039b6:	4603      	mov	r3, r0
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d002      	beq.n	80039c2 <Step_percent+0x36>
 80039bc:	79fb      	ldrb	r3, [r7, #7]
 80039be:	2b02      	cmp	r3, #2
 80039c0:	d012      	beq.n	80039e8 <Step_percent+0x5c>
	uint16_t stepChange = (uint16_t)(Step_getPercentChange() * MAX_STEP / 100);
 80039c2:	f7ff ff7b 	bl	80038bc <Step_getPercentChange>
 80039c6:	4603      	mov	r3, r0
 80039c8:	b29b      	uxth	r3, r3
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	80bb      	strh	r3, [r7, #4]
	A4988_EnableDriver();
 80039ce:	f003 f8ad 	bl	8006b2c <A4988_EnableDriver>
	A4988_StepByStep(stepChange, dir);
 80039d2:	88bb      	ldrh	r3, [r7, #4]
 80039d4:	79fa      	ldrb	r2, [r7, #7]
 80039d6:	4611      	mov	r1, r2
 80039d8:	4618      	mov	r0, r3
 80039da:	f003 f8e3 	bl	8006ba4 <A4988_StepByStep>
	A4988_DisableDriver();
 80039de:	f003 f8c3 	bl	8006b68 <A4988_DisableDriver>
 80039e2:	e002      	b.n	80039ea <Step_percent+0x5e>
	if (HAL_GPIO_ReadPin(LIMIT_SWITCH_MAX_GPIO_Port, LIMIT_SWITCH_MAX_Pin) == 0 && dir == STEPM_DIR_INC )	return ;
 80039e4:	bf00      	nop
 80039e6:	e000      	b.n	80039ea <Step_percent+0x5e>
	if (HAL_GPIO_ReadPin(LIMIT_SWITCH_MIN_GPIO_Port, LIMIT_SWITCH_MIN_Pin) && dir == STEPM_DIR_DEC )  return;
 80039e8:	bf00      	nop
}
 80039ea:	3708      	adds	r7, #8
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}
 80039f0:	40010800 	.word	0x40010800
 80039f4:	40010c00 	.word	0x40010c00

080039f8 <initButton>:
static STEP_t stepValorDir = STEP_VAL;

//, s_list *mylist, Station_t *myStation

void initButton(DISPLAY_MODE_t *displaymode)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b083      	sub	sp, #12
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
	__MY_DISPLAY_MODE = displaymode;
 8003a00:	4a03      	ldr	r2, [pc, #12]	; (8003a10 <initButton+0x18>)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6013      	str	r3, [r2, #0]
//	myStation.ssNode_list = mylist;
//	myStation = myStation;
}
 8003a06:	bf00      	nop
 8003a08:	370c      	adds	r7, #12
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bc80      	pop	{r7}
 8003a0e:	4770      	bx	lr
 8003a10:	20001374 	.word	0x20001374

08003a14 <setStepValorDir>:

void setStepValorDir (STEP_t ValorDir)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b083      	sub	sp, #12
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	71fb      	strb	r3, [r7, #7]
	stepValorDir = ValorDir;
 8003a1e:	4a04      	ldr	r2, [pc, #16]	; (8003a30 <setStepValorDir+0x1c>)
 8003a20:	79fb      	ldrb	r3, [r7, #7]
 8003a22:	7013      	strb	r3, [r2, #0]
}
 8003a24:	bf00      	nop
 8003a26:	370c      	adds	r7, #12
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bc80      	pop	{r7}
 8003a2c:	4770      	bx	lr
 8003a2e:	bf00      	nop
 8003a30:	2000137b 	.word	0x2000137b

08003a34 <getStepValorDir>:

STEP_t getStepValorDir()
{
 8003a34:	b480      	push	{r7}
 8003a36:	af00      	add	r7, sp, #0
	return stepValorDir;
 8003a38:	4b02      	ldr	r3, [pc, #8]	; (8003a44 <getStepValorDir+0x10>)
 8003a3a:	781b      	ldrb	r3, [r3, #0]
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bc80      	pop	{r7}
 8003a42:	4770      	bx	lr
 8003a44:	2000137b 	.word	0x2000137b

08003a48 <getCurswitch>:
//		return clearPosY;
//	}
//}

SWITCH_t getCurswitch()
{
 8003a48:	b480      	push	{r7}
 8003a4a:	af00      	add	r7, sp, #0
	return curSwitch;
 8003a4c:	4b02      	ldr	r3, [pc, #8]	; (8003a58 <getCurswitch+0x10>)
 8003a4e:	781b      	ldrb	r3, [r3, #0]
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bc80      	pop	{r7}
 8003a56:	4770      	bx	lr
 8003a58:	20000003 	.word	0x20000003

08003a5c <getClearflag>:
	curSwitch = ONorOFF;
}


uint8_t getClearflag()
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	af00      	add	r7, sp, #0
	return clearflag;
 8003a60:	4b03      	ldr	r3, [pc, #12]	; (8003a70 <getClearflag+0x14>)
 8003a62:	781b      	ldrb	r3, [r3, #0]
 8003a64:	b2db      	uxtb	r3, r3
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bc80      	pop	{r7}
 8003a6c:	4770      	bx	lr
 8003a6e:	bf00      	nop
 8003a70:	2000137a 	.word	0x2000137a

08003a74 <setClearflag>:

void setClearflag(uint8_t ENorDIS)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b083      	sub	sp, #12
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	71fb      	strb	r3, [r7, #7]
	clearflag = ENorDIS;
 8003a7e:	4a04      	ldr	r2, [pc, #16]	; (8003a90 <setClearflag+0x1c>)
 8003a80:	79fb      	ldrb	r3, [r7, #7]
 8003a82:	7013      	strb	r3, [r2, #0]
}
 8003a84:	bf00      	nop
 8003a86:	370c      	adds	r7, #12
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bc80      	pop	{r7}
 8003a8c:	4770      	bx	lr
 8003a8e:	bf00      	nop
 8003a90:	2000137a 	.word	0x2000137a

08003a94 <switchcurControl>:


void switchcurControl()
{
 8003a94:	b480      	push	{r7}
 8003a96:	af00      	add	r7, sp, #0
	switch (curControl)	{
 8003a98:	4b09      	ldr	r3, [pc, #36]	; (8003ac0 <switchcurControl+0x2c>)
 8003a9a:	781b      	ldrb	r3, [r3, #0]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d005      	beq.n	8003aac <switchcurControl+0x18>
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d107      	bne.n	8003ab4 <switchcurControl+0x20>
	case CONTROL_TRANS:
		curControl = CONTROL_STEP;
 8003aa4:	4b06      	ldr	r3, [pc, #24]	; (8003ac0 <switchcurControl+0x2c>)
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	701a      	strb	r2, [r3, #0]
		break;
 8003aaa:	e004      	b.n	8003ab6 <switchcurControl+0x22>
	case CONTROL_STEP:
		curControl = CONTROL_TRANS;
 8003aac:	4b04      	ldr	r3, [pc, #16]	; (8003ac0 <switchcurControl+0x2c>)
 8003aae:	2201      	movs	r2, #1
 8003ab0:	701a      	strb	r2, [r3, #0]
		break;
 8003ab2:	e000      	b.n	8003ab6 <switchcurControl+0x22>
	default:
		break;
 8003ab4:	bf00      	nop
	}
}
 8003ab6:	bf00      	nop
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bc80      	pop	{r7}
 8003abc:	4770      	bx	lr
 8003abe:	bf00      	nop
 8003ac0:	20001378 	.word	0x20001378

08003ac4 <getcurControl>:

CONTROL_t getcurControl()
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	af00      	add	r7, sp, #0
	return curControl;
 8003ac8:	4b02      	ldr	r3, [pc, #8]	; (8003ad4 <getcurControl+0x10>)
 8003aca:	781b      	ldrb	r3, [r3, #0]
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bc80      	pop	{r7}
 8003ad2:	4770      	bx	lr
 8003ad4:	20001378 	.word	0x20001378

08003ad8 <nextMonitor>:

void nextMonitor(uint8_t volatile  * curMonitor, uint8_t max)	{
 8003ad8:	b480      	push	{r7}
 8003ada:	b083      	sub	sp, #12
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
 8003ae0:	460b      	mov	r3, r1
 8003ae2:	70fb      	strb	r3, [r7, #3]
	if (*curMonitor >= max )		{
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	781b      	ldrb	r3, [r3, #0]
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	78fa      	ldrb	r2, [r7, #3]
 8003aec:	429a      	cmp	r2, r3
 8003aee:	d803      	bhi.n	8003af8 <nextMonitor+0x20>
		*curMonitor = 0;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2200      	movs	r2, #0
 8003af4:	701a      	strb	r2, [r3, #0]
	}
	else {
		(*curMonitor)++;
	}
}
 8003af6:	e006      	b.n	8003b06 <nextMonitor+0x2e>
		(*curMonitor)++;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	781b      	ldrb	r3, [r3, #0]
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	3301      	adds	r3, #1
 8003b00:	b2da      	uxtb	r2, r3
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	701a      	strb	r2, [r3, #0]
}
 8003b06:	bf00      	nop
 8003b08:	370c      	adds	r7, #12
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bc80      	pop	{r7}
 8003b0e:	4770      	bx	lr

08003b10 <previousMonitor>:

void previousMonitor(uint8_t volatile  * curMonitor, uint8_t max)	{
 8003b10:	b480      	push	{r7}
 8003b12:	b083      	sub	sp, #12
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
 8003b18:	460b      	mov	r3, r1
 8003b1a:	70fb      	strb	r3, [r7, #3]
	if (*curMonitor == 0 )		{
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	781b      	ldrb	r3, [r3, #0]
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d103      	bne.n	8003b2e <previousMonitor+0x1e>
		*curMonitor = max ;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	78fa      	ldrb	r2, [r7, #3]
 8003b2a:	701a      	strb	r2, [r3, #0]
	}
	else {
		(*curMonitor)--;
	}
}
 8003b2c:	e006      	b.n	8003b3c <previousMonitor+0x2c>
		(*curMonitor)--;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	781b      	ldrb	r3, [r3, #0]
 8003b32:	b2db      	uxtb	r3, r3
 8003b34:	3b01      	subs	r3, #1
 8003b36:	b2da      	uxtb	r2, r3
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	701a      	strb	r2, [r3, #0]
}
 8003b3c:	bf00      	nop
 8003b3e:	370c      	adds	r7, #12
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bc80      	pop	{r7}
 8003b44:	4770      	bx	lr
	...

08003b48 <get_curMonitor>:

uint8_t get_curMonitor(void)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	af00      	add	r7, sp, #0
	return curMonitor;
 8003b4c:	4b03      	ldr	r3, [pc, #12]	; (8003b5c <get_curMonitor+0x14>)
 8003b4e:	781b      	ldrb	r3, [r3, #0]
 8003b50:	b2db      	uxtb	r3, r3
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bc80      	pop	{r7}
 8003b58:	4770      	bx	lr
 8003b5a:	bf00      	nop
 8003b5c:	20001379 	.word	0x20001379

08003b60 <setcurMonitor>:
void setcurMonitor(uint8_t index)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b083      	sub	sp, #12
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	4603      	mov	r3, r0
 8003b68:	71fb      	strb	r3, [r7, #7]
	curMonitor = index;
 8003b6a:	4a04      	ldr	r2, [pc, #16]	; (8003b7c <setcurMonitor+0x1c>)
 8003b6c:	79fb      	ldrb	r3, [r7, #7]
 8003b6e:	7013      	strb	r3, [r2, #0]
}
 8003b70:	bf00      	nop
 8003b72:	370c      	adds	r7, #12
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bc80      	pop	{r7}
 8003b78:	4770      	bx	lr
 8003b7a:	bf00      	nop
 8003b7c:	20001379 	.word	0x20001379

08003b80 <buttonMENU_handler>:



void buttonMENU_handler()
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	af00      	add	r7, sp, #0
	switch(*__MY_DISPLAY_MODE)	{
 8003b84:	4b38      	ldr	r3, [pc, #224]	; (8003c68 <buttonMENU_handler+0xe8>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	781b      	ldrb	r3, [r3, #0]
 8003b8a:	2b09      	cmp	r3, #9
 8003b8c:	d869      	bhi.n	8003c62 <buttonMENU_handler+0xe2>
 8003b8e:	a201      	add	r2, pc, #4	; (adr r2, 8003b94 <buttonMENU_handler+0x14>)
 8003b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b94:	08003bbd 	.word	0x08003bbd
 8003b98:	08003bd3 	.word	0x08003bd3
 8003b9c:	08003be3 	.word	0x08003be3
 8003ba0:	08003bf3 	.word	0x08003bf3
 8003ba4:	08003c03 	.word	0x08003c03
 8003ba8:	08003c13 	.word	0x08003c13
 8003bac:	08003c43 	.word	0x08003c43
 8003bb0:	08003c53 	.word	0x08003c53
 8003bb4:	08003c23 	.word	0x08003c23
 8003bb8:	08003c33 	.word	0x08003c33
	case HOME:
		*__MY_DISPLAY_MODE = MONITOR;
 8003bbc:	4b2a      	ldr	r3, [pc, #168]	; (8003c68 <buttonMENU_handler+0xe8>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	2203      	movs	r2, #3
 8003bc2:	701a      	strb	r2, [r3, #0]
		setcurMonitor(0);
 8003bc4:	2000      	movs	r0, #0
 8003bc6:	f7ff ffcb 	bl	8003b60 <setcurMonitor>
		setClearflag(ENABLE);
 8003bca:	2001      	movs	r0, #1
 8003bcc:	f7ff ff52 	bl	8003a74 <setClearflag>
		break;
 8003bd0:	e048      	b.n	8003c64 <buttonMENU_handler+0xe4>
	case COUNTDOWN_SW_OFF:
		*__MY_DISPLAY_MODE = MONITOR;
 8003bd2:	4b25      	ldr	r3, [pc, #148]	; (8003c68 <buttonMENU_handler+0xe8>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	2203      	movs	r2, #3
 8003bd8:	701a      	strb	r2, [r3, #0]
		setClearflag(ENABLE);
 8003bda:	2001      	movs	r0, #1
 8003bdc:	f7ff ff4a 	bl	8003a74 <setClearflag>
		break;
 8003be0:	e040      	b.n	8003c64 <buttonMENU_handler+0xe4>
	case AFTER_SW_OFF:
		*__MY_DISPLAY_MODE = MONITOR;
 8003be2:	4b21      	ldr	r3, [pc, #132]	; (8003c68 <buttonMENU_handler+0xe8>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	2203      	movs	r2, #3
 8003be8:	701a      	strb	r2, [r3, #0]
		setClearflag(ENABLE);
 8003bea:	2001      	movs	r0, #1
 8003bec:	f7ff ff42 	bl	8003a74 <setClearflag>
		break;
 8003bf0:	e038      	b.n	8003c64 <buttonMENU_handler+0xe4>
	case MONITOR:
		*__MY_DISPLAY_MODE = MENU_CONTROL;
 8003bf2:	4b1d      	ldr	r3, [pc, #116]	; (8003c68 <buttonMENU_handler+0xe8>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	2204      	movs	r2, #4
 8003bf8:	701a      	strb	r2, [r3, #0]
		setClearflag(ENABLE);
 8003bfa:	2001      	movs	r0, #1
 8003bfc:	f7ff ff3a 	bl	8003a74 <setClearflag>
		break;
 8003c00:	e030      	b.n	8003c64 <buttonMENU_handler+0xe4>
	case MENU_CONTROL:
		*__MY_DISPLAY_MODE = HOME;
 8003c02:	4b19      	ldr	r3, [pc, #100]	; (8003c68 <buttonMENU_handler+0xe8>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	2200      	movs	r2, #0
 8003c08:	701a      	strb	r2, [r3, #0]
		setClearflag(ENABLE);
 8003c0a:	2001      	movs	r0, #1
 8003c0c:	f7ff ff32 	bl	8003a74 <setClearflag>
		break;
 8003c10:	e028      	b.n	8003c64 <buttonMENU_handler+0xe4>
	case VOLTAGE_CONTROL:
		*__MY_DISPLAY_MODE = HOME;
 8003c12:	4b15      	ldr	r3, [pc, #84]	; (8003c68 <buttonMENU_handler+0xe8>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	2200      	movs	r2, #0
 8003c18:	701a      	strb	r2, [r3, #0]
		setClearflag(ENABLE);
 8003c1a:	2001      	movs	r0, #1
 8003c1c:	f7ff ff2a 	bl	8003a74 <setClearflag>
		break;
 8003c20:	e020      	b.n	8003c64 <buttonMENU_handler+0xe4>
	case STEP_VAL_CONTROL:
		*__MY_DISPLAY_MODE = HOME;
 8003c22:	4b11      	ldr	r3, [pc, #68]	; (8003c68 <buttonMENU_handler+0xe8>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	2200      	movs	r2, #0
 8003c28:	701a      	strb	r2, [r3, #0]
		setClearflag(ENABLE);
 8003c2a:	2001      	movs	r0, #1
 8003c2c:	f7ff ff22 	bl	8003a74 <setClearflag>
		break;
 8003c30:	e018      	b.n	8003c64 <buttonMENU_handler+0xe4>
	case STEP_DIR_CONTROL:
		*__MY_DISPLAY_MODE = HOME;
 8003c32:	4b0d      	ldr	r3, [pc, #52]	; (8003c68 <buttonMENU_handler+0xe8>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	2200      	movs	r2, #0
 8003c38:	701a      	strb	r2, [r3, #0]
		setClearflag(ENABLE);
 8003c3a:	2001      	movs	r0, #1
 8003c3c:	f7ff ff1a 	bl	8003a74 <setClearflag>
			break;
 8003c40:	e010      	b.n	8003c64 <buttonMENU_handler+0xe4>
	case ON_OFF_CONTROL:
		*__MY_DISPLAY_MODE = HOME;
 8003c42:	4b09      	ldr	r3, [pc, #36]	; (8003c68 <buttonMENU_handler+0xe8>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	2200      	movs	r2, #0
 8003c48:	701a      	strb	r2, [r3, #0]
		setClearflag(ENABLE);
 8003c4a:	2001      	movs	r0, #1
 8003c4c:	f7ff ff12 	bl	8003a74 <setClearflag>
		break;
 8003c50:	e008      	b.n	8003c64 <buttonMENU_handler+0xe4>
	case COMPLETE_CONTROL:
		*__MY_DISPLAY_MODE = HOME;
 8003c52:	4b05      	ldr	r3, [pc, #20]	; (8003c68 <buttonMENU_handler+0xe8>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	2200      	movs	r2, #0
 8003c58:	701a      	strb	r2, [r3, #0]
		setClearflag(ENABLE);
 8003c5a:	2001      	movs	r0, #1
 8003c5c:	f7ff ff0a 	bl	8003a74 <setClearflag>
		break;
 8003c60:	e000      	b.n	8003c64 <buttonMENU_handler+0xe4>
	default:
		break;
 8003c62:	bf00      	nop
	}
}
 8003c64:	bf00      	nop
 8003c66:	bd80      	pop	{r7, pc}
 8003c68:	20001374 	.word	0x20001374

08003c6c <buttonOK_handler>:
void buttonOK_handler()
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	af00      	add	r7, sp, #0
	switch(*__MY_DISPLAY_MODE)	{
 8003c70:	4b49      	ldr	r3, [pc, #292]	; (8003d98 <buttonOK_handler+0x12c>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	781b      	ldrb	r3, [r3, #0]
 8003c76:	2b09      	cmp	r3, #9
 8003c78:	f200 8088 	bhi.w	8003d8c <buttonOK_handler+0x120>
 8003c7c:	a201      	add	r2, pc, #4	; (adr r2, 8003c84 <buttonOK_handler+0x18>)
 8003c7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c82:	bf00      	nop
 8003c84:	08003d8d 	.word	0x08003d8d
 8003c88:	08003d8d 	.word	0x08003d8d
 8003c8c:	08003d8d 	.word	0x08003d8d
 8003c90:	08003d8d 	.word	0x08003d8d
 8003c94:	08003cad 	.word	0x08003cad
 8003c98:	08003ce1 	.word	0x08003ce1
 8003c9c:	08003d41 	.word	0x08003d41
 8003ca0:	08003d7d 	.word	0x08003d7d
 8003ca4:	08003d21 	.word	0x08003d21
 8003ca8:	08003d31 	.word	0x08003d31
	case AFTER_SW_OFF:
		break;
	case MONITOR:
		break;
	case MENU_CONTROL:
		if (getcurControl() == CONTROL_TRANS)	{
 8003cac:	f7ff ff0a 	bl	8003ac4 <getcurControl>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	2b01      	cmp	r3, #1
 8003cb4:	d107      	bne.n	8003cc6 <buttonOK_handler+0x5a>
			*__MY_DISPLAY_MODE = ON_OFF_CONTROL;
 8003cb6:	4b38      	ldr	r3, [pc, #224]	; (8003d98 <buttonOK_handler+0x12c>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	2206      	movs	r2, #6
 8003cbc:	701a      	strb	r2, [r3, #0]
			setClearflag(ENABLE);
 8003cbe:	2001      	movs	r0, #1
 8003cc0:	f7ff fed8 	bl	8003a74 <setClearflag>
		}
		else if (getcurControl() == CONTROL_STEP)	{
			*__MY_DISPLAY_MODE = VOLTAGE_CONTROL;
			setClearflag(ENABLE);
		}
		break;
 8003cc4:	e064      	b.n	8003d90 <buttonOK_handler+0x124>
		else if (getcurControl() == CONTROL_STEP)	{
 8003cc6:	f7ff fefd 	bl	8003ac4 <getcurControl>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d15f      	bne.n	8003d90 <buttonOK_handler+0x124>
			*__MY_DISPLAY_MODE = VOLTAGE_CONTROL;
 8003cd0:	4b31      	ldr	r3, [pc, #196]	; (8003d98 <buttonOK_handler+0x12c>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	2205      	movs	r2, #5
 8003cd6:	701a      	strb	r2, [r3, #0]
			setClearflag(ENABLE);
 8003cd8:	2001      	movs	r0, #1
 8003cda:	f7ff fecb 	bl	8003a74 <setClearflag>
		break;
 8003cde:	e057      	b.n	8003d90 <buttonOK_handler+0x124>
	case VOLTAGE_CONTROL:
		switch (getStepValorDir())	{
 8003ce0:	f7ff fea8 	bl	8003a34 <getStepValorDir>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	2b02      	cmp	r3, #2
 8003ce8:	d010      	beq.n	8003d0c <buttonOK_handler+0xa0>
 8003cea:	2b02      	cmp	r3, #2
 8003cec:	dc13      	bgt.n	8003d16 <buttonOK_handler+0xaa>
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d002      	beq.n	8003cf8 <buttonOK_handler+0x8c>
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d005      	beq.n	8003d02 <buttonOK_handler+0x96>
			break;
		case STEP_CONFIRM:
			triggerTaskflag(TASK_CTRL_STEPMOR, FLAG_EN);
			break;
		default:
			break;
 8003cf6:	e00e      	b.n	8003d16 <buttonOK_handler+0xaa>
			*__MY_DISPLAY_MODE = STEP_VAL_CONTROL;
 8003cf8:	4b27      	ldr	r3, [pc, #156]	; (8003d98 <buttonOK_handler+0x12c>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	2208      	movs	r2, #8
 8003cfe:	701a      	strb	r2, [r3, #0]
			break;
 8003d00:	e00a      	b.n	8003d18 <buttonOK_handler+0xac>
			*__MY_DISPLAY_MODE = STEP_DIR_CONTROL;
 8003d02:	4b25      	ldr	r3, [pc, #148]	; (8003d98 <buttonOK_handler+0x12c>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	2209      	movs	r2, #9
 8003d08:	701a      	strb	r2, [r3, #0]
			break;
 8003d0a:	e005      	b.n	8003d18 <buttonOK_handler+0xac>
			triggerTaskflag(TASK_CTRL_STEPMOR, FLAG_EN);
 8003d0c:	2101      	movs	r1, #1
 8003d0e:	2006      	movs	r0, #6
 8003d10:	f001 fcf0 	bl	80056f4 <triggerTaskflag>
			break;
 8003d14:	e000      	b.n	8003d18 <buttonOK_handler+0xac>
			break;
 8003d16:	bf00      	nop
		}
		setClearflag(ENABLE);
 8003d18:	2001      	movs	r0, #1
 8003d1a:	f7ff feab 	bl	8003a74 <setClearflag>
		break;
 8003d1e:	e038      	b.n	8003d92 <buttonOK_handler+0x126>
	case STEP_VAL_CONTROL:
		*__MY_DISPLAY_MODE = VOLTAGE_CONTROL;
 8003d20:	4b1d      	ldr	r3, [pc, #116]	; (8003d98 <buttonOK_handler+0x12c>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	2205      	movs	r2, #5
 8003d26:	701a      	strb	r2, [r3, #0]
		setClearflag(ENABLE);
 8003d28:	2001      	movs	r0, #1
 8003d2a:	f7ff fea3 	bl	8003a74 <setClearflag>
		break;
 8003d2e:	e030      	b.n	8003d92 <buttonOK_handler+0x126>
	case STEP_DIR_CONTROL:
		*__MY_DISPLAY_MODE = VOLTAGE_CONTROL;
 8003d30:	4b19      	ldr	r3, [pc, #100]	; (8003d98 <buttonOK_handler+0x12c>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	2205      	movs	r2, #5
 8003d36:	701a      	strb	r2, [r3, #0]
		setClearflag(ENABLE);
 8003d38:	2001      	movs	r0, #1
 8003d3a:	f7ff fe9b 	bl	8003a74 <setClearflag>
		break;
 8003d3e:	e028      	b.n	8003d92 <buttonOK_handler+0x126>
	case ON_OFF_CONTROL:
		// switch MBA
		if(getCurswitch() == SW_ON)	{
 8003d40:	f7ff fe82 	bl	8003a48 <getCurswitch>
 8003d44:	4603      	mov	r3, r0
 8003d46:	2b01      	cmp	r3, #1
 8003d48:	d107      	bne.n	8003d5a <buttonOK_handler+0xee>
			myStation.MBAstate = switchContactor(MBA_ON);
 8003d4a:	2001      	movs	r0, #1
 8003d4c:	f7fe fb5a 	bl	8002404 <switchContactor>
 8003d50:	4603      	mov	r3, r0
 8003d52:	461a      	mov	r2, r3
 8003d54:	4b11      	ldr	r3, [pc, #68]	; (8003d9c <buttonOK_handler+0x130>)
 8003d56:	719a      	strb	r2, [r3, #6]
 8003d58:	e006      	b.n	8003d68 <buttonOK_handler+0xfc>


		}
		else {
			myStation.MBAstate = switchContactor(MBA_OFF);
 8003d5a:	2002      	movs	r0, #2
 8003d5c:	f7fe fb52 	bl	8002404 <switchContactor>
 8003d60:	4603      	mov	r3, r0
 8003d62:	461a      	mov	r2, r3
 8003d64:	4b0d      	ldr	r3, [pc, #52]	; (8003d9c <buttonOK_handler+0x130>)
 8003d66:	719a      	strb	r2, [r3, #6]
		}

		setSwitchtime();
 8003d68:	f7fc fc32 	bl	80005d0 <setSwitchtime>
		*__MY_DISPLAY_MODE = COMPLETE_CONTROL;
 8003d6c:	4b0a      	ldr	r3, [pc, #40]	; (8003d98 <buttonOK_handler+0x12c>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	2207      	movs	r2, #7
 8003d72:	701a      	strb	r2, [r3, #0]
		setClearflag(ENABLE);
 8003d74:	2001      	movs	r0, #1
 8003d76:	f7ff fe7d 	bl	8003a74 <setClearflag>
		break;
 8003d7a:	e00a      	b.n	8003d92 <buttonOK_handler+0x126>
	case COMPLETE_CONTROL:
		*__MY_DISPLAY_MODE = ON_OFF_CONTROL;
 8003d7c:	4b06      	ldr	r3, [pc, #24]	; (8003d98 <buttonOK_handler+0x12c>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	2206      	movs	r2, #6
 8003d82:	701a      	strb	r2, [r3, #0]
		setClearflag(ENABLE);
 8003d84:	2001      	movs	r0, #1
 8003d86:	f7ff fe75 	bl	8003a74 <setClearflag>
		break;
 8003d8a:	e002      	b.n	8003d92 <buttonOK_handler+0x126>
	default:
		break;
 8003d8c:	bf00      	nop
 8003d8e:	e000      	b.n	8003d92 <buttonOK_handler+0x126>
		break;
 8003d90:	bf00      	nop
	}
}
 8003d92:	bf00      	nop
 8003d94:	bd80      	pop	{r7, pc}
 8003d96:	bf00      	nop
 8003d98:	20001374 	.word	0x20001374
 8003d9c:	20000474 	.word	0x20000474

08003da0 <buttonDOWN_handler>:
void buttonDOWN_handler()
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	af00      	add	r7, sp, #0
	switch(*__MY_DISPLAY_MODE)	{
 8003da4:	4b36      	ldr	r3, [pc, #216]	; (8003e80 <buttonDOWN_handler+0xe0>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	781b      	ldrb	r3, [r3, #0]
 8003daa:	2b09      	cmp	r3, #9
 8003dac:	d864      	bhi.n	8003e78 <buttonDOWN_handler+0xd8>
 8003dae:	a201      	add	r2, pc, #4	; (adr r2, 8003db4 <buttonDOWN_handler+0x14>)
 8003db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003db4:	08003e79 	.word	0x08003e79
 8003db8:	08003e79 	.word	0x08003e79
 8003dbc:	08003e79 	.word	0x08003e79
 8003dc0:	08003ddd 	.word	0x08003ddd
 8003dc4:	08003df5 	.word	0x08003df5
 8003dc8:	08003e01 	.word	0x08003e01
 8003dcc:	08003e53 	.word	0x08003e53
 8003dd0:	08003e79 	.word	0x08003e79
 8003dd4:	08003e3b 	.word	0x08003e3b
 8003dd8:	08003e47 	.word	0x08003e47
		break;
	case AFTER_SW_OFF:
		break;
	case MONITOR:
		// move to next sensor ID
		nextMonitor(&curMonitor, myStation.ssNode_list->length);
 8003ddc:	4b29      	ldr	r3, [pc, #164]	; (8003e84 <buttonDOWN_handler+0xe4>)
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	b2db      	uxtb	r3, r3
 8003de4:	4619      	mov	r1, r3
 8003de6:	4828      	ldr	r0, [pc, #160]	; (8003e88 <buttonDOWN_handler+0xe8>)
 8003de8:	f7ff fe76 	bl	8003ad8 <nextMonitor>
		setClearflag(ENABLE);
 8003dec:	2001      	movs	r0, #1
 8003dee:	f7ff fe41 	bl	8003a74 <setClearflag>
		break;
 8003df2:	e042      	b.n	8003e7a <buttonDOWN_handler+0xda>
	case MENU_CONTROL:
		switchcurControl();
 8003df4:	f7ff fe4e 	bl	8003a94 <switchcurControl>
		setClearflag(ENABLE);
 8003df8:	2001      	movs	r0, #1
 8003dfa:	f7ff fe3b 	bl	8003a74 <setClearflag>
		break;
 8003dfe:	e03c      	b.n	8003e7a <buttonDOWN_handler+0xda>
	case VOLTAGE_CONTROL:
		switch(getStepValorDir())	{
 8003e00:	f7ff fe18 	bl	8003a34 <getStepValorDir>
 8003e04:	4603      	mov	r3, r0
 8003e06:	2b02      	cmp	r3, #2
 8003e08:	d00e      	beq.n	8003e28 <buttonDOWN_handler+0x88>
 8003e0a:	2b02      	cmp	r3, #2
 8003e0c:	dc10      	bgt.n	8003e30 <buttonDOWN_handler+0x90>
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d002      	beq.n	8003e18 <buttonDOWN_handler+0x78>
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d004      	beq.n	8003e20 <buttonDOWN_handler+0x80>
			break;
		case STEP_CONFIRM:
			setStepValorDir(STEP_VAL);
			break;
		default:
			break;
 8003e16:	e00b      	b.n	8003e30 <buttonDOWN_handler+0x90>
			setStepValorDir(STEP_DIR);
 8003e18:	2001      	movs	r0, #1
 8003e1a:	f7ff fdfb 	bl	8003a14 <setStepValorDir>
			break;
 8003e1e:	e008      	b.n	8003e32 <buttonDOWN_handler+0x92>
			setStepValorDir(STEP_CONFIRM);
 8003e20:	2002      	movs	r0, #2
 8003e22:	f7ff fdf7 	bl	8003a14 <setStepValorDir>
			break;
 8003e26:	e004      	b.n	8003e32 <buttonDOWN_handler+0x92>
			setStepValorDir(STEP_VAL);
 8003e28:	2000      	movs	r0, #0
 8003e2a:	f7ff fdf3 	bl	8003a14 <setStepValorDir>
			break;
 8003e2e:	e000      	b.n	8003e32 <buttonDOWN_handler+0x92>
			break;
 8003e30:	bf00      	nop
		}
		setClearflag(ENABLE);
 8003e32:	2001      	movs	r0, #1
 8003e34:	f7ff fe1e 	bl	8003a74 <setClearflag>
		break;
 8003e38:	e01f      	b.n	8003e7a <buttonDOWN_handler+0xda>
	case STEP_VAL_CONTROL:
		// decrease step value
		decreaseStepchange();
 8003e3a:	f7ff fd09 	bl	8003850 <decreaseStepchange>
		setClearflag(ENABLE);
 8003e3e:	2001      	movs	r0, #1
 8003e40:	f7ff fe18 	bl	8003a74 <setClearflag>
		break;
 8003e44:	e019      	b.n	8003e7a <buttonDOWN_handler+0xda>
	case STEP_DIR_CONTROL:
		Step_toggleDir();
 8003e46:	f7ff fcd5 	bl	80037f4 <Step_toggleDir>
		setClearflag(ENABLE);
 8003e4a:	2001      	movs	r0, #1
 8003e4c:	f7ff fe12 	bl	8003a74 <setClearflag>
		break;
 8003e50:	e013      	b.n	8003e7a <buttonDOWN_handler+0xda>
	case ON_OFF_CONTROL:
		//  switch ON/OFF
		switch (curSwitch) {
 8003e52:	4b0e      	ldr	r3, [pc, #56]	; (8003e8c <buttonDOWN_handler+0xec>)
 8003e54:	781b      	ldrb	r3, [r3, #0]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d005      	beq.n	8003e66 <buttonDOWN_handler+0xc6>
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d107      	bne.n	8003e6e <buttonDOWN_handler+0xce>
		case SW_ON:
			curSwitch = SW_OFF;
 8003e5e:	4b0b      	ldr	r3, [pc, #44]	; (8003e8c <buttonDOWN_handler+0xec>)
 8003e60:	2200      	movs	r2, #0
 8003e62:	701a      	strb	r2, [r3, #0]
			break;
 8003e64:	e004      	b.n	8003e70 <buttonDOWN_handler+0xd0>
		case SW_OFF:
			curSwitch = SW_ON;
 8003e66:	4b09      	ldr	r3, [pc, #36]	; (8003e8c <buttonDOWN_handler+0xec>)
 8003e68:	2201      	movs	r2, #1
 8003e6a:	701a      	strb	r2, [r3, #0]
			break;
 8003e6c:	e000      	b.n	8003e70 <buttonDOWN_handler+0xd0>
		default:
			break;
 8003e6e:	bf00      	nop
		}
		setClearflag(ENABLE);
 8003e70:	2001      	movs	r0, #1
 8003e72:	f7ff fdff 	bl	8003a74 <setClearflag>
		break;
 8003e76:	e000      	b.n	8003e7a <buttonDOWN_handler+0xda>
	case COMPLETE_CONTROL:
		break;
	default:
		break;
 8003e78:	bf00      	nop
	}
}
 8003e7a:	bf00      	nop
 8003e7c:	bd80      	pop	{r7, pc}
 8003e7e:	bf00      	nop
 8003e80:	20001374 	.word	0x20001374
 8003e84:	20000474 	.word	0x20000474
 8003e88:	20001379 	.word	0x20001379
 8003e8c:	20000003 	.word	0x20000003

08003e90 <buttonUP_handler>:
void buttonUP_handler()
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	af00      	add	r7, sp, #0
	switch(*__MY_DISPLAY_MODE)	{
 8003e94:	4b34      	ldr	r3, [pc, #208]	; (8003f68 <buttonUP_handler+0xd8>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	781b      	ldrb	r3, [r3, #0]
 8003e9a:	2b09      	cmp	r3, #9
 8003e9c:	d860      	bhi.n	8003f60 <buttonUP_handler+0xd0>
 8003e9e:	a201      	add	r2, pc, #4	; (adr r2, 8003ea4 <buttonUP_handler+0x14>)
 8003ea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ea4:	08003f61 	.word	0x08003f61
 8003ea8:	08003f61 	.word	0x08003f61
 8003eac:	08003f61 	.word	0x08003f61
 8003eb0:	08003ecd 	.word	0x08003ecd
 8003eb4:	08003ee5 	.word	0x08003ee5
 8003eb8:	08003ef1 	.word	0x08003ef1
 8003ebc:	08003f3b 	.word	0x08003f3b
 8003ec0:	08003f61 	.word	0x08003f61
 8003ec4:	08003f29 	.word	0x08003f29
 8003ec8:	08003f35 	.word	0x08003f35
	case COUNTDOWN_SW_OFF:
		break;
	case AFTER_SW_OFF:
		break;
	case MONITOR:
		previousMonitor(&curMonitor, myStation.ssNode_list->length);
 8003ecc:	4b27      	ldr	r3, [pc, #156]	; (8003f6c <buttonUP_handler+0xdc>)
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	b2db      	uxtb	r3, r3
 8003ed4:	4619      	mov	r1, r3
 8003ed6:	4826      	ldr	r0, [pc, #152]	; (8003f70 <buttonUP_handler+0xe0>)
 8003ed8:	f7ff fe1a 	bl	8003b10 <previousMonitor>
		setClearflag(ENABLE);
 8003edc:	2001      	movs	r0, #1
 8003ede:	f7ff fdc9 	bl	8003a74 <setClearflag>
		break;
 8003ee2:	e03e      	b.n	8003f62 <buttonUP_handler+0xd2>
	case MENU_CONTROL:
		switchcurControl();
 8003ee4:	f7ff fdd6 	bl	8003a94 <switchcurControl>
		setClearflag(ENABLE);
 8003ee8:	2001      	movs	r0, #1
 8003eea:	f7ff fdc3 	bl	8003a74 <setClearflag>
		break;
 8003eee:	e038      	b.n	8003f62 <buttonUP_handler+0xd2>
	case VOLTAGE_CONTROL:
		switch (getStepValorDir())	{
 8003ef0:	f7ff fda0 	bl	8003a34 <getStepValorDir>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	2b02      	cmp	r3, #2
 8003ef8:	d00d      	beq.n	8003f16 <buttonUP_handler+0x86>
 8003efa:	2b02      	cmp	r3, #2
 8003efc:	dc0f      	bgt.n	8003f1e <buttonUP_handler+0x8e>
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d005      	beq.n	8003f0e <buttonUP_handler+0x7e>
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d10b      	bne.n	8003f1e <buttonUP_handler+0x8e>
		case STEP_DIR:
			setStepValorDir(STEP_VAL);
 8003f06:	2000      	movs	r0, #0
 8003f08:	f7ff fd84 	bl	8003a14 <setStepValorDir>
			break;
 8003f0c:	e008      	b.n	8003f20 <buttonUP_handler+0x90>
		case STEP_VAL:
			setStepValorDir(STEP_CONFIRM);
 8003f0e:	2002      	movs	r0, #2
 8003f10:	f7ff fd80 	bl	8003a14 <setStepValorDir>
			break;
 8003f14:	e004      	b.n	8003f20 <buttonUP_handler+0x90>
		case STEP_CONFIRM:
			setStepValorDir(STEP_DIR);
 8003f16:	2001      	movs	r0, #1
 8003f18:	f7ff fd7c 	bl	8003a14 <setStepValorDir>
			break;
 8003f1c:	e000      	b.n	8003f20 <buttonUP_handler+0x90>
		default:
			break;
 8003f1e:	bf00      	nop
		}
		setClearflag(ENABLE);
 8003f20:	2001      	movs	r0, #1
 8003f22:	f7ff fda7 	bl	8003a74 <setClearflag>
		break;
 8003f26:	e01c      	b.n	8003f62 <buttonUP_handler+0xd2>
	case STEP_VAL_CONTROL:
		// increase step value
		increaseStepchange();
 8003f28:	f7ff fc78 	bl	800381c <increaseStepchange>
		setClearflag(ENABLE);
 8003f2c:	2001      	movs	r0, #1
 8003f2e:	f7ff fda1 	bl	8003a74 <setClearflag>
		break;
 8003f32:	e016      	b.n	8003f62 <buttonUP_handler+0xd2>
	case STEP_DIR_CONTROL:
		Step_toggleDir();
 8003f34:	f7ff fc5e 	bl	80037f4 <Step_toggleDir>
		break;
 8003f38:	e013      	b.n	8003f62 <buttonUP_handler+0xd2>
	case ON_OFF_CONTROL:
		switch (curSwitch) {
 8003f3a:	4b0e      	ldr	r3, [pc, #56]	; (8003f74 <buttonUP_handler+0xe4>)
 8003f3c:	781b      	ldrb	r3, [r3, #0]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d005      	beq.n	8003f4e <buttonUP_handler+0xbe>
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d107      	bne.n	8003f56 <buttonUP_handler+0xc6>
		case SW_ON:
			curSwitch = SW_OFF;
 8003f46:	4b0b      	ldr	r3, [pc, #44]	; (8003f74 <buttonUP_handler+0xe4>)
 8003f48:	2200      	movs	r2, #0
 8003f4a:	701a      	strb	r2, [r3, #0]
			break;
 8003f4c:	e004      	b.n	8003f58 <buttonUP_handler+0xc8>
		case SW_OFF:
			curSwitch = SW_ON;
 8003f4e:	4b09      	ldr	r3, [pc, #36]	; (8003f74 <buttonUP_handler+0xe4>)
 8003f50:	2201      	movs	r2, #1
 8003f52:	701a      	strb	r2, [r3, #0]
			break;
 8003f54:	e000      	b.n	8003f58 <buttonUP_handler+0xc8>
		default:
			break;
 8003f56:	bf00      	nop
		}
		setClearflag(ENABLE);
 8003f58:	2001      	movs	r0, #1
 8003f5a:	f7ff fd8b 	bl	8003a74 <setClearflag>
		break;
 8003f5e:	e000      	b.n	8003f62 <buttonUP_handler+0xd2>
	case COMPLETE_CONTROL:
		break;
	default:
		break;
 8003f60:	bf00      	nop
	}
}
 8003f62:	bf00      	nop
 8003f64:	bd80      	pop	{r7, pc}
 8003f66:	bf00      	nop
 8003f68:	20001374 	.word	0x20001374
 8003f6c:	20000474 	.word	0x20000474
 8003f70:	20001379 	.word	0x20001379
 8003f74:	20000003 	.word	0x20000003

08003f78 <SW_LIMIT_MAX_handler>:
void SW_LIMIT_MAX_handler()
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	af00      	add	r7, sp, #0
	setClearflag(ENABLE);
 8003f7c:	2001      	movs	r0, #1
 8003f7e:	f7ff fd79 	bl	8003a74 <setClearflag>
	A4988_DisableDriver();
 8003f82:	f002 fdf1 	bl	8006b68 <A4988_DisableDriver>
	setLimit(LIMIT_MAX);
 8003f86:	2001      	movs	r0, #1
 8003f88:	f7ff fc00 	bl	800378c <setLimit>
	triggerTaskflag(TASK_SEND_STEP_LIMIT, FLAG_EN);
 8003f8c:	2101      	movs	r1, #1
 8003f8e:	2005      	movs	r0, #5
 8003f90:	f001 fbb0 	bl	80056f4 <triggerTaskflag>
}
 8003f94:	bf00      	nop
 8003f96:	bd80      	pop	{r7, pc}

08003f98 <SW_LIMIT_MIN_handler>:
void SW_LIMIT_MIN_handler()
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	af00      	add	r7, sp, #0
	setClearflag(ENABLE);
 8003f9c:	2001      	movs	r0, #1
 8003f9e:	f7ff fd69 	bl	8003a74 <setClearflag>
	A4988_DisableDriver();
 8003fa2:	f002 fde1 	bl	8006b68 <A4988_DisableDriver>
	setLimit(LIMIT_MIN);
 8003fa6:	2000      	movs	r0, #0
 8003fa8:	f7ff fbf0 	bl	800378c <setLimit>
	triggerTaskflag(TASK_SEND_STEP_LIMIT, FLAG_EN);
 8003fac:	2101      	movs	r1, #1
 8003fae:	2005      	movs	r0, #5
 8003fb0:	f001 fba0 	bl	80056f4 <triggerTaskflag>
}
 8003fb4:	bf00      	nop
 8003fb6:	bd80      	pop	{r7, pc}

08003fb8 <DS3231_Init>:

static uint8_t B2D(uint8_t bcd);
static uint8_t D2B(uint8_t decimal);

void DS3231_Init(I2C_HandleTypeDef *handle)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b082      	sub	sp, #8
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  i2c = handle;
 8003fc0:	4a04      	ldr	r2, [pc, #16]	; (8003fd4 <DS3231_Init+0x1c>)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6013      	str	r3, [r2, #0]
  DS3231_ClearAlarm1();
 8003fc6:	f000 f9d5 	bl	8004374 <DS3231_ClearAlarm1>
}
 8003fca:	bf00      	nop
 8003fcc:	3708      	adds	r7, #8
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}
 8003fd2:	bf00      	nop
 8003fd4:	2000137c 	.word	0x2000137c

08003fd8 <epochtine2RTC>:
void epochtine2RTC(time_t epochtime,  _RTC *myRTC)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b086      	sub	sp, #24
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8003fe2:	607a      	str	r2, [r7, #4]
	struct tm *info;
	info = localtime(&epochtime);
 8003fe4:	f107 0308 	add.w	r3, r7, #8
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f007 ff75 	bl	800bed8 <localtime>
 8003fee:	6178      	str	r0, [r7, #20]
	myRTC->Year = info->tm_year -100;
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	695b      	ldr	r3, [r3, #20]
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	3b64      	subs	r3, #100	; 0x64
 8003ff8:	b2da      	uxtb	r2, r3
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	701a      	strb	r2, [r3, #0]
	myRTC->Month =  info->tm_mon +1;
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	691b      	ldr	r3, [r3, #16]
 8004002:	b2db      	uxtb	r3, r3
 8004004:	3301      	adds	r3, #1
 8004006:	b2da      	uxtb	r2, r3
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	705a      	strb	r2, [r3, #1]
	myRTC->Date = info->tm_mday;
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	b2da      	uxtb	r2, r3
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	709a      	strb	r2, [r3, #2]
	myRTC->DaysOfWeek = info->tm_wday + 1;
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	699b      	ldr	r3, [r3, #24]
 800401a:	b2db      	uxtb	r3, r3
 800401c:	3301      	adds	r3, #1
 800401e:	b2da      	uxtb	r2, r3
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	70da      	strb	r2, [r3, #3]
	myRTC->Hour = info->tm_hour + 7;
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	b2db      	uxtb	r3, r3
 800402a:	3307      	adds	r3, #7
 800402c:	b2da      	uxtb	r2, r3
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	711a      	strb	r2, [r3, #4]
	myRTC->Min = info->tm_min;
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	b2da      	uxtb	r2, r3
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	715a      	strb	r2, [r3, #5]
	myRTC->Sec = info->tm_sec;
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	b2da      	uxtb	r2, r3
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	719a      	strb	r2, [r3, #6]
}
 8004046:	bf00      	nop
 8004048:	3718      	adds	r7, #24
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}

0800404e <RTC2epochtime>:

time_t RTC2epochtime (_RTC *RTCtime)
{
 800404e:	b580      	push	{r7, lr}
 8004050:	b08e      	sub	sp, #56	; 0x38
 8004052:	af00      	add	r7, sp, #0
 8004054:	6078      	str	r0, [r7, #4]
	struct tm t;
	time_t epochtime;
	t.tm_year = 2000 + RTCtime->Year -1900;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	781b      	ldrb	r3, [r3, #0]
 800405a:	3364      	adds	r3, #100	; 0x64
 800405c:	623b      	str	r3, [r7, #32]
	t.tm_mon = RTCtime->Month - 1;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	785b      	ldrb	r3, [r3, #1]
 8004062:	3b01      	subs	r3, #1
 8004064:	61fb      	str	r3, [r7, #28]
	t.tm_mday = RTCtime->Date;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	789b      	ldrb	r3, [r3, #2]
 800406a:	61bb      	str	r3, [r7, #24]
	t.tm_hour = RTCtime->Hour - 7;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	791b      	ldrb	r3, [r3, #4]
 8004070:	3b07      	subs	r3, #7
 8004072:	617b      	str	r3, [r7, #20]
	t.tm_min = RTCtime->Min;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	795b      	ldrb	r3, [r3, #5]
 8004078:	613b      	str	r3, [r7, #16]
	t.tm_sec = RTCtime->Sec;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	799b      	ldrb	r3, [r3, #6]
 800407e:	60fb      	str	r3, [r7, #12]
	t.tm_isdst = -1;
 8004080:	f04f 33ff 	mov.w	r3, #4294967295
 8004084:	62fb      	str	r3, [r7, #44]	; 0x2c
	epochtime = mktime(&t);
 8004086:	f107 030c 	add.w	r3, r7, #12
 800408a:	4618      	mov	r0, r3
 800408c:	f008 f942 	bl	800c314 <mktime>
 8004090:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
	return epochtime;
 8004094:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
}
 8004098:	4610      	mov	r0, r2
 800409a:	4619      	mov	r1, r3
 800409c:	3738      	adds	r7, #56	; 0x38
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}
	...

080040a4 <DS3231_GetTime>:
	if ( (rtc.Min < 0) || (rtc.Min >59 ) )	return false;
	if ( (rtc.Hour < 0) || (rtc.Sec >23 ) )	return false;
	return true;
}
bool DS3231_GetTime(_RTC *rtc)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b086      	sub	sp, #24
 80040a8:	af02      	add	r7, sp, #8
 80040aa:	6078      	str	r0, [r7, #4]
  uint8_t startAddr = DS3231_REG_TIME;
 80040ac:	2300      	movs	r3, #0
 80040ae:	73fb      	strb	r3, [r7, #15]
  uint8_t buffer[7] = {0,};
 80040b0:	2300      	movs	r3, #0
 80040b2:	60bb      	str	r3, [r7, #8]
 80040b4:	f107 030c 	add.w	r3, r7, #12
 80040b8:	2100      	movs	r1, #0
 80040ba:	460a      	mov	r2, r1
 80040bc:	801a      	strh	r2, [r3, #0]
 80040be:	460a      	mov	r2, r1
 80040c0:	709a      	strb	r2, [r3, #2]

  if(HAL_I2C_Master_Transmit(i2c, DS3231_ADDR, &startAddr, 1, HAL_MAX_DELAY) != HAL_OK) return false;
 80040c2:	4b35      	ldr	r3, [pc, #212]	; (8004198 <DS3231_GetTime+0xf4>)
 80040c4:	6818      	ldr	r0, [r3, #0]
 80040c6:	f107 020f 	add.w	r2, r7, #15
 80040ca:	f04f 33ff 	mov.w	r3, #4294967295
 80040ce:	9300      	str	r3, [sp, #0]
 80040d0:	2301      	movs	r3, #1
 80040d2:	21d0      	movs	r1, #208	; 0xd0
 80040d4:	f005 f874 	bl	80091c0 <HAL_I2C_Master_Transmit>
 80040d8:	4603      	mov	r3, r0
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d001      	beq.n	80040e2 <DS3231_GetTime+0x3e>
 80040de:	2300      	movs	r3, #0
 80040e0:	e055      	b.n	800418e <DS3231_GetTime+0xea>
  if(HAL_I2C_Master_Receive(i2c, DS3231_ADDR, buffer, sizeof(buffer), HAL_MAX_DELAY) != HAL_OK) return false;
 80040e2:	4b2d      	ldr	r3, [pc, #180]	; (8004198 <DS3231_GetTime+0xf4>)
 80040e4:	6818      	ldr	r0, [r3, #0]
 80040e6:	f107 0208 	add.w	r2, r7, #8
 80040ea:	f04f 33ff 	mov.w	r3, #4294967295
 80040ee:	9300      	str	r3, [sp, #0]
 80040f0:	2307      	movs	r3, #7
 80040f2:	21d0      	movs	r1, #208	; 0xd0
 80040f4:	f005 f962 	bl	80093bc <HAL_I2C_Master_Receive>
 80040f8:	4603      	mov	r3, r0
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d001      	beq.n	8004102 <DS3231_GetTime+0x5e>
 80040fe:	2300      	movs	r3, #0
 8004100:	e045      	b.n	800418e <DS3231_GetTime+0xea>

  rtc->Sec = B2D(buffer[0] & 0x7F);
 8004102:	7a3b      	ldrb	r3, [r7, #8]
 8004104:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004108:	b2db      	uxtb	r3, r3
 800410a:	4618      	mov	r0, r3
 800410c:	f000 f9a8 	bl	8004460 <B2D>
 8004110:	4603      	mov	r3, r0
 8004112:	461a      	mov	r2, r3
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	719a      	strb	r2, [r3, #6]
  rtc->Min = B2D(buffer[1] & 0x7F);
 8004118:	7a7b      	ldrb	r3, [r7, #9]
 800411a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800411e:	b2db      	uxtb	r3, r3
 8004120:	4618      	mov	r0, r3
 8004122:	f000 f99d 	bl	8004460 <B2D>
 8004126:	4603      	mov	r3, r0
 8004128:	461a      	mov	r2, r3
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	715a      	strb	r2, [r3, #5]
  rtc->Hour = B2D(buffer[2] & 0x3F);
 800412e:	7abb      	ldrb	r3, [r7, #10]
 8004130:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004134:	b2db      	uxtb	r3, r3
 8004136:	4618      	mov	r0, r3
 8004138:	f000 f992 	bl	8004460 <B2D>
 800413c:	4603      	mov	r3, r0
 800413e:	461a      	mov	r2, r3
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	711a      	strb	r2, [r3, #4]
  rtc->DaysOfWeek = buffer[3] & 0x07;
 8004144:	7afb      	ldrb	r3, [r7, #11]
 8004146:	f003 0307 	and.w	r3, r3, #7
 800414a:	b2da      	uxtb	r2, r3
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	70da      	strb	r2, [r3, #3]
  rtc->Date = B2D(buffer[4] & 0x3F);
 8004150:	7b3b      	ldrb	r3, [r7, #12]
 8004152:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004156:	b2db      	uxtb	r3, r3
 8004158:	4618      	mov	r0, r3
 800415a:	f000 f981 	bl	8004460 <B2D>
 800415e:	4603      	mov	r3, r0
 8004160:	461a      	mov	r2, r3
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	709a      	strb	r2, [r3, #2]
  rtc->Month = B2D(buffer[5] & 0x1F);
 8004166:	7b7b      	ldrb	r3, [r7, #13]
 8004168:	f003 031f 	and.w	r3, r3, #31
 800416c:	b2db      	uxtb	r3, r3
 800416e:	4618      	mov	r0, r3
 8004170:	f000 f976 	bl	8004460 <B2D>
 8004174:	4603      	mov	r3, r0
 8004176:	461a      	mov	r2, r3
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	705a      	strb	r2, [r3, #1]
  rtc->Year = B2D(buffer[6]);
 800417c:	7bbb      	ldrb	r3, [r7, #14]
 800417e:	4618      	mov	r0, r3
 8004180:	f000 f96e 	bl	8004460 <B2D>
 8004184:	4603      	mov	r3, r0
 8004186:	461a      	mov	r2, r3
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	701a      	strb	r2, [r3, #0]

  return true;
 800418c:	2301      	movs	r3, #1
}
 800418e:	4618      	mov	r0, r3
 8004190:	3710      	adds	r7, #16
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}
 8004196:	bf00      	nop
 8004198:	2000137c 	.word	0x2000137c

0800419c <DS3231_SetTime>:

bool DS3231_SetTime(_RTC *rtc)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b088      	sub	sp, #32
 80041a0:	af02      	add	r7, sp, #8
 80041a2:	6078      	str	r0, [r7, #4]
  uint8_t startAddr = DS3231_REG_TIME;
 80041a4:	2300      	movs	r3, #0
 80041a6:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[8] = {startAddr, D2B(rtc->Sec), D2B(rtc->Min), D2B(rtc->Hour), rtc->DaysOfWeek, D2B(rtc->Date), D2B(rtc->Month), D2B(rtc->Year)};
 80041a8:	7dfb      	ldrb	r3, [r7, #23]
 80041aa:	733b      	strb	r3, [r7, #12]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	799b      	ldrb	r3, [r3, #6]
 80041b0:	4618      	mov	r0, r3
 80041b2:	f000 f96d 	bl	8004490 <D2B>
 80041b6:	4603      	mov	r3, r0
 80041b8:	737b      	strb	r3, [r7, #13]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	795b      	ldrb	r3, [r3, #5]
 80041be:	4618      	mov	r0, r3
 80041c0:	f000 f966 	bl	8004490 <D2B>
 80041c4:	4603      	mov	r3, r0
 80041c6:	73bb      	strb	r3, [r7, #14]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	791b      	ldrb	r3, [r3, #4]
 80041cc:	4618      	mov	r0, r3
 80041ce:	f000 f95f 	bl	8004490 <D2B>
 80041d2:	4603      	mov	r3, r0
 80041d4:	73fb      	strb	r3, [r7, #15]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	78db      	ldrb	r3, [r3, #3]
 80041da:	743b      	strb	r3, [r7, #16]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	789b      	ldrb	r3, [r3, #2]
 80041e0:	4618      	mov	r0, r3
 80041e2:	f000 f955 	bl	8004490 <D2B>
 80041e6:	4603      	mov	r3, r0
 80041e8:	747b      	strb	r3, [r7, #17]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	785b      	ldrb	r3, [r3, #1]
 80041ee:	4618      	mov	r0, r3
 80041f0:	f000 f94e 	bl	8004490 <D2B>
 80041f4:	4603      	mov	r3, r0
 80041f6:	74bb      	strb	r3, [r7, #18]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	781b      	ldrb	r3, [r3, #0]
 80041fc:	4618      	mov	r0, r3
 80041fe:	f000 f947 	bl	8004490 <D2B>
 8004202:	4603      	mov	r3, r0
 8004204:	74fb      	strb	r3, [r7, #19]
  if(HAL_I2C_Master_Transmit(i2c, DS3231_ADDR, buffer, sizeof(buffer), HAL_MAX_DELAY) != HAL_OK) return false;
 8004206:	4b0a      	ldr	r3, [pc, #40]	; (8004230 <DS3231_SetTime+0x94>)
 8004208:	6818      	ldr	r0, [r3, #0]
 800420a:	f107 020c 	add.w	r2, r7, #12
 800420e:	f04f 33ff 	mov.w	r3, #4294967295
 8004212:	9300      	str	r3, [sp, #0]
 8004214:	2308      	movs	r3, #8
 8004216:	21d0      	movs	r1, #208	; 0xd0
 8004218:	f004 ffd2 	bl	80091c0 <HAL_I2C_Master_Transmit>
 800421c:	4603      	mov	r3, r0
 800421e:	2b00      	cmp	r3, #0
 8004220:	d001      	beq.n	8004226 <DS3231_SetTime+0x8a>
 8004222:	2300      	movs	r3, #0
 8004224:	e000      	b.n	8004228 <DS3231_SetTime+0x8c>

  return true;
 8004226:	2301      	movs	r3, #1
}
 8004228:	4618      	mov	r0, r3
 800422a:	3718      	adds	r7, #24
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}
 8004230:	2000137c 	.word	0x2000137c

08004234 <DS3231_SetAlarm1>:
  *temp = value / 4.0f;
  return true;
}

bool DS3231_SetAlarm1(uint8_t mode, uint8_t date, uint8_t hour, uint8_t min, uint8_t sec)
{
 8004234:	b590      	push	{r4, r7, lr}
 8004236:	b089      	sub	sp, #36	; 0x24
 8004238:	af02      	add	r7, sp, #8
 800423a:	4604      	mov	r4, r0
 800423c:	4608      	mov	r0, r1
 800423e:	4611      	mov	r1, r2
 8004240:	461a      	mov	r2, r3
 8004242:	4623      	mov	r3, r4
 8004244:	71fb      	strb	r3, [r7, #7]
 8004246:	4603      	mov	r3, r0
 8004248:	71bb      	strb	r3, [r7, #6]
 800424a:	460b      	mov	r3, r1
 800424c:	717b      	strb	r3, [r7, #5]
 800424e:	4613      	mov	r3, r2
 8004250:	713b      	strb	r3, [r7, #4]
  uint8_t alarmSecond = D2B(sec);
 8004252:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004256:	4618      	mov	r0, r3
 8004258:	f000 f91a 	bl	8004490 <D2B>
 800425c:	4603      	mov	r3, r0
 800425e:	75fb      	strb	r3, [r7, #23]
  uint8_t alarmMinute = D2B(min);
 8004260:	793b      	ldrb	r3, [r7, #4]
 8004262:	4618      	mov	r0, r3
 8004264:	f000 f914 	bl	8004490 <D2B>
 8004268:	4603      	mov	r3, r0
 800426a:	75bb      	strb	r3, [r7, #22]
  uint8_t alarmHour = D2B(hour);
 800426c:	797b      	ldrb	r3, [r7, #5]
 800426e:	4618      	mov	r0, r3
 8004270:	f000 f90e 	bl	8004490 <D2B>
 8004274:	4603      	mov	r3, r0
 8004276:	757b      	strb	r3, [r7, #21]
  uint8_t alarmDate = D2B(date);
 8004278:	79bb      	ldrb	r3, [r7, #6]
 800427a:	4618      	mov	r0, r3
 800427c:	f000 f908 	bl	8004490 <D2B>
 8004280:	4603      	mov	r3, r0
 8004282:	753b      	strb	r3, [r7, #20]

  switch(mode)
 8004284:	79fb      	ldrb	r3, [r7, #7]
 8004286:	2b04      	cmp	r3, #4
 8004288:	d838      	bhi.n	80042fc <DS3231_SetAlarm1+0xc8>
 800428a:	a201      	add	r2, pc, #4	; (adr r2, 8004290 <DS3231_SetAlarm1+0x5c>)
 800428c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004290:	080042fd 	.word	0x080042fd
 8004294:	080042a5 	.word	0x080042a5
 8004298:	080042af 	.word	0x080042af
 800429c:	080042c1 	.word	0x080042c1
 80042a0:	080042db 	.word	0x080042db
  {
  case ALARM_MODE_ALL_MATCHED:
    break;
  case ALARM_MODE_HOUR_MIN_SEC_MATCHED:
    alarmDate |= 0x80;
 80042a4:	7d3b      	ldrb	r3, [r7, #20]
 80042a6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80042aa:	753b      	strb	r3, [r7, #20]
    break;
 80042ac:	e027      	b.n	80042fe <DS3231_SetAlarm1+0xca>
  case ALARM_MODE_MIN_SEC_MATCHED:
    alarmDate |= 0x80;
 80042ae:	7d3b      	ldrb	r3, [r7, #20]
 80042b0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80042b4:	753b      	strb	r3, [r7, #20]
    alarmHour |= 0x80;
 80042b6:	7d7b      	ldrb	r3, [r7, #21]
 80042b8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80042bc:	757b      	strb	r3, [r7, #21]
    break;
 80042be:	e01e      	b.n	80042fe <DS3231_SetAlarm1+0xca>
  case ALARM_MODE_SEC_MATCHED:
    alarmDate |= 0x80;
 80042c0:	7d3b      	ldrb	r3, [r7, #20]
 80042c2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80042c6:	753b      	strb	r3, [r7, #20]
    alarmHour |= 0x80;
 80042c8:	7d7b      	ldrb	r3, [r7, #21]
 80042ca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80042ce:	757b      	strb	r3, [r7, #21]
    alarmMinute |= 0x80;
 80042d0:	7dbb      	ldrb	r3, [r7, #22]
 80042d2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80042d6:	75bb      	strb	r3, [r7, #22]
    break;
 80042d8:	e011      	b.n	80042fe <DS3231_SetAlarm1+0xca>
  case ALARM_MODE_ONCE_PER_SECOND:
    alarmDate |= 0x80;
 80042da:	7d3b      	ldrb	r3, [r7, #20]
 80042dc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80042e0:	753b      	strb	r3, [r7, #20]
    alarmHour |= 0x80;
 80042e2:	7d7b      	ldrb	r3, [r7, #21]
 80042e4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80042e8:	757b      	strb	r3, [r7, #21]
    alarmMinute |= 0x80;
 80042ea:	7dbb      	ldrb	r3, [r7, #22]
 80042ec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80042f0:	75bb      	strb	r3, [r7, #22]
    alarmSecond |= 0x80;
 80042f2:	7dfb      	ldrb	r3, [r7, #23]
 80042f4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80042f8:	75fb      	strb	r3, [r7, #23]
    break;
 80042fa:	e000      	b.n	80042fe <DS3231_SetAlarm1+0xca>
  default:
    break;
 80042fc:	bf00      	nop
  }

  /* Write Alarm Registers */
  uint8_t startAddr = DS3231_REG_ALARM1;
 80042fe:	2307      	movs	r3, #7
 8004300:	74fb      	strb	r3, [r7, #19]
  uint8_t buffer[5] = {startAddr, alarmSecond, alarmMinute, alarmHour, alarmDate};
 8004302:	7cfb      	ldrb	r3, [r7, #19]
 8004304:	733b      	strb	r3, [r7, #12]
 8004306:	7dfb      	ldrb	r3, [r7, #23]
 8004308:	737b      	strb	r3, [r7, #13]
 800430a:	7dbb      	ldrb	r3, [r7, #22]
 800430c:	73bb      	strb	r3, [r7, #14]
 800430e:	7d7b      	ldrb	r3, [r7, #21]
 8004310:	73fb      	strb	r3, [r7, #15]
 8004312:	7d3b      	ldrb	r3, [r7, #20]
 8004314:	743b      	strb	r3, [r7, #16]
  if(HAL_I2C_Master_Transmit(i2c, DS3231_ADDR, buffer, sizeof(buffer), HAL_MAX_DELAY) != HAL_OK) return false;
 8004316:	4b16      	ldr	r3, [pc, #88]	; (8004370 <DS3231_SetAlarm1+0x13c>)
 8004318:	6818      	ldr	r0, [r3, #0]
 800431a:	f107 020c 	add.w	r2, r7, #12
 800431e:	f04f 33ff 	mov.w	r3, #4294967295
 8004322:	9300      	str	r3, [sp, #0]
 8004324:	2305      	movs	r3, #5
 8004326:	21d0      	movs	r1, #208	; 0xd0
 8004328:	f004 ff4a 	bl	80091c0 <HAL_I2C_Master_Transmit>
 800432c:	4603      	mov	r3, r0
 800432e:	2b00      	cmp	r3, #0
 8004330:	d001      	beq.n	8004336 <DS3231_SetAlarm1+0x102>
 8004332:	2300      	movs	r3, #0
 8004334:	e017      	b.n	8004366 <DS3231_SetAlarm1+0x132>

  /* Enable Alarm1 at Control Register */
  uint8_t ctrlReg = 0x00;
 8004336:	2300      	movs	r3, #0
 8004338:	72fb      	strb	r3, [r7, #11]
  ReadRegister(DS3231_REG_CONTROL, &ctrlReg);
 800433a:	f107 030b 	add.w	r3, r7, #11
 800433e:	4619      	mov	r1, r3
 8004340:	200e      	movs	r0, #14
 8004342:	f000 f83d 	bl	80043c0 <ReadRegister>
  ctrlReg |= DS3231_CON_A1IE;
 8004346:	7afb      	ldrb	r3, [r7, #11]
 8004348:	f043 0301 	orr.w	r3, r3, #1
 800434c:	b2db      	uxtb	r3, r3
 800434e:	72fb      	strb	r3, [r7, #11]
  ctrlReg |= DS3231_CON_INTCN;
 8004350:	7afb      	ldrb	r3, [r7, #11]
 8004352:	f043 0304 	orr.w	r3, r3, #4
 8004356:	b2db      	uxtb	r3, r3
 8004358:	72fb      	strb	r3, [r7, #11]
  WriteRegister(DS3231_REG_CONTROL, ctrlReg);
 800435a:	7afb      	ldrb	r3, [r7, #11]
 800435c:	4619      	mov	r1, r3
 800435e:	200e      	movs	r0, #14
 8004360:	f000 f85a 	bl	8004418 <WriteRegister>

  return true;
 8004364:	2301      	movs	r3, #1
}
 8004366:	4618      	mov	r0, r3
 8004368:	371c      	adds	r7, #28
 800436a:	46bd      	mov	sp, r7
 800436c:	bd90      	pop	{r4, r7, pc}
 800436e:	bf00      	nop
 8004370:	2000137c 	.word	0x2000137c

08004374 <DS3231_ClearAlarm1>:

bool DS3231_ClearAlarm1()
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b082      	sub	sp, #8
 8004378:	af00      	add	r7, sp, #0
  uint8_t ctrlReg;
  uint8_t statusReg;

  /* Clear Control Register */
  ReadRegister(DS3231_REG_CONTROL, &ctrlReg);
 800437a:	1dfb      	adds	r3, r7, #7
 800437c:	4619      	mov	r1, r3
 800437e:	200e      	movs	r0, #14
 8004380:	f000 f81e 	bl	80043c0 <ReadRegister>
  ctrlReg &= ~DS3231_CON_A1IE;
 8004384:	79fb      	ldrb	r3, [r7, #7]
 8004386:	f023 0301 	bic.w	r3, r3, #1
 800438a:	b2db      	uxtb	r3, r3
 800438c:	71fb      	strb	r3, [r7, #7]
  WriteRegister(DS3231_REG_CONTROL, ctrlReg);
 800438e:	79fb      	ldrb	r3, [r7, #7]
 8004390:	4619      	mov	r1, r3
 8004392:	200e      	movs	r0, #14
 8004394:	f000 f840 	bl	8004418 <WriteRegister>

  /* Clear Status Register */
  ReadRegister(DS3231_REG_STATUS, &statusReg);
 8004398:	1dbb      	adds	r3, r7, #6
 800439a:	4619      	mov	r1, r3
 800439c:	200f      	movs	r0, #15
 800439e:	f000 f80f 	bl	80043c0 <ReadRegister>
  statusReg &= ~DS3231_STA_A1F;
 80043a2:	79bb      	ldrb	r3, [r7, #6]
 80043a4:	f023 0301 	bic.w	r3, r3, #1
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	71bb      	strb	r3, [r7, #6]
  WriteRegister(DS3231_REG_STATUS, statusReg);
 80043ac:	79bb      	ldrb	r3, [r7, #6]
 80043ae:	4619      	mov	r1, r3
 80043b0:	200f      	movs	r0, #15
 80043b2:	f000 f831 	bl	8004418 <WriteRegister>

  return true;
 80043b6:	2301      	movs	r3, #1
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	3708      	adds	r7, #8
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}

080043c0 <ReadRegister>:

bool ReadRegister(uint8_t regAddr, uint8_t *value)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b084      	sub	sp, #16
 80043c4:	af02      	add	r7, sp, #8
 80043c6:	4603      	mov	r3, r0
 80043c8:	6039      	str	r1, [r7, #0]
 80043ca:	71fb      	strb	r3, [r7, #7]
  if(HAL_I2C_Master_Transmit(i2c, DS3231_ADDR, &regAddr, 1, HAL_MAX_DELAY) != HAL_OK) return false;
 80043cc:	4b11      	ldr	r3, [pc, #68]	; (8004414 <ReadRegister+0x54>)
 80043ce:	6818      	ldr	r0, [r3, #0]
 80043d0:	1dfa      	adds	r2, r7, #7
 80043d2:	f04f 33ff 	mov.w	r3, #4294967295
 80043d6:	9300      	str	r3, [sp, #0]
 80043d8:	2301      	movs	r3, #1
 80043da:	21d0      	movs	r1, #208	; 0xd0
 80043dc:	f004 fef0 	bl	80091c0 <HAL_I2C_Master_Transmit>
 80043e0:	4603      	mov	r3, r0
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d001      	beq.n	80043ea <ReadRegister+0x2a>
 80043e6:	2300      	movs	r3, #0
 80043e8:	e00f      	b.n	800440a <ReadRegister+0x4a>
  if(HAL_I2C_Master_Receive(i2c, DS3231_ADDR, value, 1, HAL_MAX_DELAY) != HAL_OK) return false;
 80043ea:	4b0a      	ldr	r3, [pc, #40]	; (8004414 <ReadRegister+0x54>)
 80043ec:	6818      	ldr	r0, [r3, #0]
 80043ee:	f04f 33ff 	mov.w	r3, #4294967295
 80043f2:	9300      	str	r3, [sp, #0]
 80043f4:	2301      	movs	r3, #1
 80043f6:	683a      	ldr	r2, [r7, #0]
 80043f8:	21d0      	movs	r1, #208	; 0xd0
 80043fa:	f004 ffdf 	bl	80093bc <HAL_I2C_Master_Receive>
 80043fe:	4603      	mov	r3, r0
 8004400:	2b00      	cmp	r3, #0
 8004402:	d001      	beq.n	8004408 <ReadRegister+0x48>
 8004404:	2300      	movs	r3, #0
 8004406:	e000      	b.n	800440a <ReadRegister+0x4a>

  return true;
 8004408:	2301      	movs	r3, #1
}
 800440a:	4618      	mov	r0, r3
 800440c:	3708      	adds	r7, #8
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}
 8004412:	bf00      	nop
 8004414:	2000137c 	.word	0x2000137c

08004418 <WriteRegister>:

bool WriteRegister(uint8_t regAddr, uint8_t value)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b086      	sub	sp, #24
 800441c:	af02      	add	r7, sp, #8
 800441e:	4603      	mov	r3, r0
 8004420:	460a      	mov	r2, r1
 8004422:	71fb      	strb	r3, [r7, #7]
 8004424:	4613      	mov	r3, r2
 8004426:	71bb      	strb	r3, [r7, #6]
  uint8_t buffer[2] = {regAddr, value};
 8004428:	79fb      	ldrb	r3, [r7, #7]
 800442a:	733b      	strb	r3, [r7, #12]
 800442c:	79bb      	ldrb	r3, [r7, #6]
 800442e:	737b      	strb	r3, [r7, #13]
  if(HAL_I2C_Master_Transmit(i2c, DS3231_ADDR, buffer, sizeof(buffer), HAL_MAX_DELAY) != HAL_OK) return false;
 8004430:	4b0a      	ldr	r3, [pc, #40]	; (800445c <WriteRegister+0x44>)
 8004432:	6818      	ldr	r0, [r3, #0]
 8004434:	f107 020c 	add.w	r2, r7, #12
 8004438:	f04f 33ff 	mov.w	r3, #4294967295
 800443c:	9300      	str	r3, [sp, #0]
 800443e:	2302      	movs	r3, #2
 8004440:	21d0      	movs	r1, #208	; 0xd0
 8004442:	f004 febd 	bl	80091c0 <HAL_I2C_Master_Transmit>
 8004446:	4603      	mov	r3, r0
 8004448:	2b00      	cmp	r3, #0
 800444a:	d001      	beq.n	8004450 <WriteRegister+0x38>
 800444c:	2300      	movs	r3, #0
 800444e:	e000      	b.n	8004452 <WriteRegister+0x3a>

  return true;
 8004450:	2301      	movs	r3, #1
}
 8004452:	4618      	mov	r0, r3
 8004454:	3710      	adds	r7, #16
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}
 800445a:	bf00      	nop
 800445c:	2000137c 	.word	0x2000137c

08004460 <B2D>:

static uint8_t B2D(uint8_t bcd)
{
 8004460:	b480      	push	{r7}
 8004462:	b083      	sub	sp, #12
 8004464:	af00      	add	r7, sp, #0
 8004466:	4603      	mov	r3, r0
 8004468:	71fb      	strb	r3, [r7, #7]
  return (bcd >> 4) * 10 + (bcd & 0x0F);
 800446a:	79fb      	ldrb	r3, [r7, #7]
 800446c:	091b      	lsrs	r3, r3, #4
 800446e:	b2db      	uxtb	r3, r3
 8004470:	461a      	mov	r2, r3
 8004472:	0092      	lsls	r2, r2, #2
 8004474:	4413      	add	r3, r2
 8004476:	005b      	lsls	r3, r3, #1
 8004478:	b2da      	uxtb	r2, r3
 800447a:	79fb      	ldrb	r3, [r7, #7]
 800447c:	f003 030f 	and.w	r3, r3, #15
 8004480:	b2db      	uxtb	r3, r3
 8004482:	4413      	add	r3, r2
 8004484:	b2db      	uxtb	r3, r3
}
 8004486:	4618      	mov	r0, r3
 8004488:	370c      	adds	r7, #12
 800448a:	46bd      	mov	sp, r7
 800448c:	bc80      	pop	{r7}
 800448e:	4770      	bx	lr

08004490 <D2B>:

static uint8_t D2B(uint8_t decimal)
{
 8004490:	b480      	push	{r7}
 8004492:	b083      	sub	sp, #12
 8004494:	af00      	add	r7, sp, #0
 8004496:	4603      	mov	r3, r0
 8004498:	71fb      	strb	r3, [r7, #7]
  return (((decimal / 10) << 4) | (decimal % 10));
 800449a:	79fb      	ldrb	r3, [r7, #7]
 800449c:	4a0d      	ldr	r2, [pc, #52]	; (80044d4 <D2B+0x44>)
 800449e:	fba2 2303 	umull	r2, r3, r2, r3
 80044a2:	08db      	lsrs	r3, r3, #3
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	011b      	lsls	r3, r3, #4
 80044a8:	b258      	sxtb	r0, r3
 80044aa:	79fa      	ldrb	r2, [r7, #7]
 80044ac:	4b09      	ldr	r3, [pc, #36]	; (80044d4 <D2B+0x44>)
 80044ae:	fba3 1302 	umull	r1, r3, r3, r2
 80044b2:	08d9      	lsrs	r1, r3, #3
 80044b4:	460b      	mov	r3, r1
 80044b6:	009b      	lsls	r3, r3, #2
 80044b8:	440b      	add	r3, r1
 80044ba:	005b      	lsls	r3, r3, #1
 80044bc:	1ad3      	subs	r3, r2, r3
 80044be:	b2db      	uxtb	r3, r3
 80044c0:	b25b      	sxtb	r3, r3
 80044c2:	4303      	orrs	r3, r0
 80044c4:	b25b      	sxtb	r3, r3
 80044c6:	b2db      	uxtb	r3, r3
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	370c      	adds	r7, #12
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bc80      	pop	{r7}
 80044d0:	4770      	bx	lr
 80044d2:	bf00      	nop
 80044d4:	cccccccd 	.word	0xcccccccd

080044d8 <getCountdowntime>:

uint16_t getCountdowntime(uint8_t hour, uint8_t min, uint8_t sec)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b084      	sub	sp, #16
 80044dc:	af00      	add	r7, sp, #0
 80044de:	4603      	mov	r3, r0
 80044e0:	71fb      	strb	r3, [r7, #7]
 80044e2:	460b      	mov	r3, r1
 80044e4:	71bb      	strb	r3, [r7, #6]
 80044e6:	4613      	mov	r3, r2
 80044e8:	717b      	strb	r3, [r7, #5]
	_RTC curRTC;
	if (!DS3231_GetTime(&curRTC))	return 0;
 80044ea:	f107 0308 	add.w	r3, r7, #8
 80044ee:	4618      	mov	r0, r3
 80044f0:	f7ff fdd8 	bl	80040a4 <DS3231_GetTime>
 80044f4:	4603      	mov	r3, r0
 80044f6:	f083 0301 	eor.w	r3, r3, #1
 80044fa:	b2db      	uxtb	r3, r3
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d001      	beq.n	8004504 <getCountdowntime+0x2c>
 8004500:	2300      	movs	r3, #0
 8004502:	e041      	b.n	8004588 <getCountdowntime+0xb0>
	if ( hour < curRTC.Hour || hour - curRTC.Hour > 18 )	return 0;
 8004504:	7b3b      	ldrb	r3, [r7, #12]
 8004506:	79fa      	ldrb	r2, [r7, #7]
 8004508:	429a      	cmp	r2, r3
 800450a:	d304      	bcc.n	8004516 <getCountdowntime+0x3e>
 800450c:	79fb      	ldrb	r3, [r7, #7]
 800450e:	7b3a      	ldrb	r2, [r7, #12]
 8004510:	1a9b      	subs	r3, r3, r2
 8004512:	2b12      	cmp	r3, #18
 8004514:	dd01      	ble.n	800451a <getCountdowntime+0x42>
 8004516:	2300      	movs	r3, #0
 8004518:	e036      	b.n	8004588 <getCountdowntime+0xb0>
	if ( hour == curRTC.Hour && min < curRTC.Min ) return 0;
 800451a:	7b3b      	ldrb	r3, [r7, #12]
 800451c:	79fa      	ldrb	r2, [r7, #7]
 800451e:	429a      	cmp	r2, r3
 8004520:	d105      	bne.n	800452e <getCountdowntime+0x56>
 8004522:	7b7b      	ldrb	r3, [r7, #13]
 8004524:	79ba      	ldrb	r2, [r7, #6]
 8004526:	429a      	cmp	r2, r3
 8004528:	d201      	bcs.n	800452e <getCountdowntime+0x56>
 800452a:	2300      	movs	r3, #0
 800452c:	e02c      	b.n	8004588 <getCountdowntime+0xb0>
	if ( hour == curRTC.Hour && min == curRTC.Min && sec < curRTC.Sec )	return 0;
 800452e:	7b3b      	ldrb	r3, [r7, #12]
 8004530:	79fa      	ldrb	r2, [r7, #7]
 8004532:	429a      	cmp	r2, r3
 8004534:	d109      	bne.n	800454a <getCountdowntime+0x72>
 8004536:	7b7b      	ldrb	r3, [r7, #13]
 8004538:	79ba      	ldrb	r2, [r7, #6]
 800453a:	429a      	cmp	r2, r3
 800453c:	d105      	bne.n	800454a <getCountdowntime+0x72>
 800453e:	7bbb      	ldrb	r3, [r7, #14]
 8004540:	797a      	ldrb	r2, [r7, #5]
 8004542:	429a      	cmp	r2, r3
 8004544:	d201      	bcs.n	800454a <getCountdowntime+0x72>
 8004546:	2300      	movs	r3, #0
 8004548:	e01e      	b.n	8004588 <getCountdowntime+0xb0>
	return (hour- curRTC.Hour)*3600 + (min - curRTC.Min)*60 + (sec - curRTC.Sec);
 800454a:	79fb      	ldrb	r3, [r7, #7]
 800454c:	7b3a      	ldrb	r2, [r7, #12]
 800454e:	1a9b      	subs	r3, r3, r2
 8004550:	b29b      	uxth	r3, r3
 8004552:	461a      	mov	r2, r3
 8004554:	0112      	lsls	r2, r2, #4
 8004556:	1ad3      	subs	r3, r2, r3
 8004558:	461a      	mov	r2, r3
 800455a:	0112      	lsls	r2, r2, #4
 800455c:	1ad3      	subs	r3, r2, r3
 800455e:	011b      	lsls	r3, r3, #4
 8004560:	b29a      	uxth	r2, r3
 8004562:	79bb      	ldrb	r3, [r7, #6]
 8004564:	7b79      	ldrb	r1, [r7, #13]
 8004566:	1a5b      	subs	r3, r3, r1
 8004568:	b29b      	uxth	r3, r3
 800456a:	4619      	mov	r1, r3
 800456c:	0109      	lsls	r1, r1, #4
 800456e:	1acb      	subs	r3, r1, r3
 8004570:	009b      	lsls	r3, r3, #2
 8004572:	b29b      	uxth	r3, r3
 8004574:	4413      	add	r3, r2
 8004576:	b29a      	uxth	r2, r3
 8004578:	797b      	ldrb	r3, [r7, #5]
 800457a:	b299      	uxth	r1, r3
 800457c:	7bbb      	ldrb	r3, [r7, #14]
 800457e:	b29b      	uxth	r3, r3
 8004580:	1acb      	subs	r3, r1, r3
 8004582:	b29b      	uxth	r3, r3
 8004584:	4413      	add	r3, r2
 8004586:	b29b      	uxth	r3, r3
}
 8004588:	4618      	mov	r0, r3
 800458a:	3710      	adds	r7, #16
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}

08004590 <initmyLora>:
//	__LORA_DMA_UART = hdma;
	enableReceiveDMAtoIdle_Lora();
}

void initmyLora()
{
 8004590:	b480      	push	{r7}
 8004592:	af00      	add	r7, sp, #0
//	initLora(huart, hdma);
//	myStation = myStation;
}
 8004594:	bf00      	nop
 8004596:	46bd      	mov	sp, r7
 8004598:	bc80      	pop	{r7}
 800459a:	4770      	bx	lr

0800459c <enableReceiveDMAtoIdle_Lora>:
void enableReceiveDMAtoIdle_Lora(void)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	af00      	add	r7, sp, #0
	  HAL_UARTEx_ReceiveToIdle_DMA(__LORA_UART, LoraRxbuff, LORARXBUFF_MAXLEN);
 80045a0:	2280      	movs	r2, #128	; 0x80
 80045a2:	4907      	ldr	r1, [pc, #28]	; (80045c0 <enableReceiveDMAtoIdle_Lora+0x24>)
 80045a4:	4807      	ldr	r0, [pc, #28]	; (80045c4 <enableReceiveDMAtoIdle_Lora+0x28>)
 80045a6:	f006 fd00 	bl	800afaa <HAL_UARTEx_ReceiveToIdle_DMA>
	  __HAL_DMA_DISABLE_IT(__LORA_DMA_UART,DMA_IT_HT);
 80045aa:	4b07      	ldr	r3, [pc, #28]	; (80045c8 <enableReceiveDMAtoIdle_Lora+0x2c>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	681a      	ldr	r2, [r3, #0]
 80045b0:	4b05      	ldr	r3, [pc, #20]	; (80045c8 <enableReceiveDMAtoIdle_Lora+0x2c>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f022 0204 	bic.w	r2, r2, #4
 80045b8:	601a      	str	r2, [r3, #0]
}
 80045ba:	bf00      	nop
 80045bc:	bd80      	pop	{r7, pc}
 80045be:	bf00      	nop
 80045c0:	20001380 	.word	0x20001380
 80045c4:	20002ae8 	.word	0x20002ae8
 80045c8:	20002bb8 	.word	0x20002bb8

080045cc <Lora_callback>:

void Lora_callback(uint16_t Size)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b082      	sub	sp, #8
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	4603      	mov	r3, r0
 80045d4:	80fb      	strh	r3, [r7, #6]
	/* if the current position + new data size is less than the main buffer
	 * we will Loraply copy the data into the buffer and update the position
	 */
//	else
//	{
		memcpy ((uint8_t *)Lorabuff, (uint8_t *)LoraRxbuff, Size);
 80045d6:	88fb      	ldrh	r3, [r7, #6]
 80045d8:	461a      	mov	r2, r3
 80045da:	490e      	ldr	r1, [pc, #56]	; (8004614 <Lora_callback+0x48>)
 80045dc:	480e      	ldr	r0, [pc, #56]	; (8004618 <Lora_callback+0x4c>)
 80045de:	f007 fdab 	bl	800c138 <memcpy>
//	if (head + Size < LORABUFF_MAXLEN ) head = head + Size;
//	else head = head + Size - LORABUFF_MAXLEN;

//	memset(LoraRxbuff, 0, LORARXBUFF_MAXLEN);
	/* start the DMA again */
	enableReceiveDMAtoIdle_Lora();
 80045e2:	f7ff ffdb 	bl	800459c <enableReceiveDMAtoIdle_Lora>


	//Processing data
	if (isWordinBuff(Lorabuff, Size, (uint8_t*)"OK")) {
 80045e6:	88fb      	ldrh	r3, [r7, #6]
 80045e8:	4a0c      	ldr	r2, [pc, #48]	; (800461c <Lora_callback+0x50>)
 80045ea:	4619      	mov	r1, r3
 80045ec:	480a      	ldr	r0, [pc, #40]	; (8004618 <Lora_callback+0x4c>)
 80045ee:	f000 fe79 	bl	80052e4 <isWordinBuff>
 80045f2:	4603      	mov	r3, r0
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d002      	beq.n	80045fe <Lora_callback+0x32>
		isOK = 1;
 80045f8:	4b09      	ldr	r3, [pc, #36]	; (8004620 <Lora_callback+0x54>)
 80045fa:	2201      	movs	r2, #1
 80045fc:	701a      	strb	r2, [r3, #0]
	}
	Lora_receive(Lorabuff, Size);
 80045fe:	88fb      	ldrh	r3, [r7, #6]
 8004600:	b2db      	uxtb	r3, r3
 8004602:	4619      	mov	r1, r3
 8004604:	4804      	ldr	r0, [pc, #16]	; (8004618 <Lora_callback+0x4c>)
 8004606:	f000 f831 	bl	800466c <Lora_receive>

}
 800460a:	bf00      	nop
 800460c:	3708      	adds	r7, #8
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}
 8004612:	bf00      	nop
 8004614:	20001380 	.word	0x20001380
 8004618:	20001400 	.word	0x20001400
 800461c:	0800ef0c 	.word	0x0800ef0c
 8004620:	200014e4 	.word	0x200014e4

08004624 <isIDExist>:
{
	tail = head;
}

bool isIDExist (uint8_t ID)
{
 8004624:	b480      	push	{r7}
 8004626:	b085      	sub	sp, #20
 8004628:	af00      	add	r7, sp, #0
 800462a:	4603      	mov	r3, r0
 800462c:	71fb      	strb	r3, [r7, #7]
	Node * current = myStation.ssNode_list->head->next;
 800462e:	4b0e      	ldr	r3, [pc, #56]	; (8004668 <isIDExist+0x44>)
 8004630:	68db      	ldr	r3, [r3, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004636:	60fb      	str	r3, [r7, #12]
	while (current != myStation.ssNode_list->tail)
 8004638:	e009      	b.n	800464e <isIDExist+0x2a>
	{
		if ( ID == current->SSnode.SSnode_ID)	return true;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	781b      	ldrb	r3, [r3, #0]
 800463e:	79fa      	ldrb	r2, [r7, #7]
 8004640:	429a      	cmp	r2, r3
 8004642:	d101      	bne.n	8004648 <isIDExist+0x24>
 8004644:	2301      	movs	r3, #1
 8004646:	e009      	b.n	800465c <isIDExist+0x38>
		current = current->next;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800464c:	60fb      	str	r3, [r7, #12]
	while (current != myStation.ssNode_list->tail)
 800464e:	4b06      	ldr	r3, [pc, #24]	; (8004668 <isIDExist+0x44>)
 8004650:	68db      	ldr	r3, [r3, #12]
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	68fa      	ldr	r2, [r7, #12]
 8004656:	429a      	cmp	r2, r3
 8004658:	d1ef      	bne.n	800463a <isIDExist+0x16>
	}
	return false;
 800465a:	2300      	movs	r3, #0
}
 800465c:	4618      	mov	r0, r3
 800465e:	3714      	adds	r7, #20
 8004660:	46bd      	mov	sp, r7
 8004662:	bc80      	pop	{r7}
 8004664:	4770      	bx	lr
 8004666:	bf00      	nop
 8004668:	20000474 	.word	0x20000474

0800466c <Lora_receive>:
void Lora_receive(uint8_t *Msg, uint8_t msglen)
{
 800466c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004670:	b0d9      	sub	sp, #356	; 0x164
 8004672:	af1a      	add	r7, sp, #104	; 0x68
 8004674:	6078      	str	r0, [r7, #4]
 8004676:	460b      	mov	r3, r1
 8004678:	70fb      	strb	r3, [r7, #3]
 800467a:	466b      	mov	r3, sp
 800467c:	461e      	mov	r6, r3
	if (Msg[START_POS] != START_VALUE)	return ;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	781b      	ldrb	r3, [r3, #0]
 8004682:	2b01      	cmp	r3, #1
 8004684:	f040 8175 	bne.w	8004972 <Lora_receive+0x306>
	uint8_t id_len = Msg[ID_LENGTH_POS] - 1;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	3301      	adds	r3, #1
 800468c:	781b      	ldrb	r3, [r3, #0]
 800468e:	3b01      	subs	r3, #1
 8004690:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
	// Get sensor ID
	uint8_t tmpidbuff[id_len+1] ;
 8004694:	f897 30eb 	ldrb.w	r3, [r7, #235]	; 0xeb
 8004698:	1c59      	adds	r1, r3, #1
 800469a:	1e4b      	subs	r3, r1, #1
 800469c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80046a0:	460a      	mov	r2, r1
 80046a2:	2300      	movs	r3, #0
 80046a4:	4690      	mov	r8, r2
 80046a6:	4699      	mov	r9, r3
 80046a8:	f04f 0200 	mov.w	r2, #0
 80046ac:	f04f 0300 	mov.w	r3, #0
 80046b0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80046b4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80046b8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80046bc:	460a      	mov	r2, r1
 80046be:	2300      	movs	r3, #0
 80046c0:	4614      	mov	r4, r2
 80046c2:	461d      	mov	r5, r3
 80046c4:	f04f 0200 	mov.w	r2, #0
 80046c8:	f04f 0300 	mov.w	r3, #0
 80046cc:	00eb      	lsls	r3, r5, #3
 80046ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80046d2:	00e2      	lsls	r2, r4, #3
 80046d4:	460b      	mov	r3, r1
 80046d6:	3307      	adds	r3, #7
 80046d8:	08db      	lsrs	r3, r3, #3
 80046da:	00db      	lsls	r3, r3, #3
 80046dc:	ebad 0d03 	sub.w	sp, sp, r3
 80046e0:	ab1a      	add	r3, sp, #104	; 0x68
 80046e2:	3300      	adds	r3, #0
 80046e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
	memset(tmpidbuff, 0, id_len+1);
 80046e8:	f897 30eb 	ldrb.w	r3, [r7, #235]	; 0xeb
 80046ec:	3301      	adds	r3, #1
 80046ee:	461a      	mov	r2, r3
 80046f0:	2100      	movs	r1, #0
 80046f2:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 80046f6:	f007 fd2d 	bl	800c154 <memset>
	memcpy(tmpidbuff, Msg +ID_STARTPOS, id_len);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	3303      	adds	r3, #3
 80046fe:	f897 20eb 	ldrb.w	r2, [r7, #235]	; 0xeb
 8004702:	4619      	mov	r1, r3
 8004704:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 8004708:	f007 fd16 	bl	800c138 <memcpy>
	uint8_t id = atoi((char*)tmpidbuff);
 800470c:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 8004710:	f007 fbb4 	bl	800be7c <atoi>
 8004714:	4603      	mov	r3, r0
 8004716:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
	if ( !sensorID_validation(id) )	return;
 800471a:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 800471e:	4618      	mov	r0, r3
 8004720:	f001 f910 	bl	8005944 <sensorID_validation>
 8004724:	4603      	mov	r3, r0
 8004726:	f083 0301 	eor.w	r3, r3, #1
 800472a:	b2db      	uxtb	r3, r3
 800472c:	2b00      	cmp	r3, #0
 800472e:	f040 8122 	bne.w	8004976 <Lora_receive+0x30a>

	// Get voltage type or mode
	uint8_t flag = 0;
 8004732:	2300      	movs	r3, #0
 8004734:	f887 30f1 	strb.w	r3, [r7, #241]	; 0xf1
	voltage_t vtype = 0;
 8004738:	2300      	movs	r3, #0
 800473a:	f887 30f2 	strb.w	r3, [r7, #242]	; 0xf2
	uint8_t modevalue = 0;
 800473e:	2300      	movs	r3, #0
 8004740:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
	uint16_t Vperiod = 0;
 8004744:	2300      	movs	r3, #0
 8004746:	f8a7 30f4 	strh.w	r3, [r7, #244]	; 0xf4
	uint8_t Vcalib[101];
	uint8_t vbat = 0;
 800474a:	2300      	movs	r3, #0
 800474c:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
	uint8_t mode = 0;
 8004750:	2300      	movs	r3, #0
 8004752:	f887 30f0 	strb.w	r3, [r7, #240]	; 0xf0
	uint8_t tmp = Msg[ID_STARTPOS+id_len];
 8004756:	f897 30eb 	ldrb.w	r3, [r7, #235]	; 0xeb
 800475a:	3303      	adds	r3, #3
 800475c:	461a      	mov	r2, r3
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	4413      	add	r3, r2
 8004762:	781b      	ldrb	r3, [r3, #0]
 8004764:	f887 30de 	strb.w	r3, [r7, #222]	; 0xde
	switch (tmp)	{
 8004768:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 800476c:	2b08      	cmp	r3, #8
 800476e:	d009      	beq.n	8004784 <Lora_receive+0x118>
 8004770:	2b08      	cmp	r3, #8
 8004772:	dc0f      	bgt.n	8004794 <Lora_receive+0x128>
 8004774:	2b04      	cmp	r3, #4
 8004776:	d009      	beq.n	800478c <Lora_receive+0x120>
 8004778:	2b07      	cmp	r3, #7
 800477a:	d10b      	bne.n	8004794 <Lora_receive+0x128>
	case 7:
		vtype = V_na;
 800477c:	2302      	movs	r3, #2
 800477e:	f887 30f2 	strb.w	r3, [r7, #242]	; 0xf2
		break;
 8004782:	e008      	b.n	8004796 <Lora_receive+0x12a>
	case 8:
		vtype = V_p;
 8004784:	2301      	movs	r3, #1
 8004786:	f887 30f2 	strb.w	r3, [r7, #242]	; 0xf2
		break;
 800478a:	e004      	b.n	8004796 <Lora_receive+0x12a>
	case 4:
		mode = 1;
 800478c:	2301      	movs	r3, #1
 800478e:	f887 30f0 	strb.w	r3, [r7, #240]	; 0xf0
		break;
 8004792:	e000      	b.n	8004796 <Lora_receive+0x12a>
	default:
		break;
 8004794:	bf00      	nop
	}
	if (!vtype && !mode)	return;
 8004796:	f897 30f2 	ldrb.w	r3, [r7, #242]	; 0xf2
 800479a:	2b00      	cmp	r3, #0
 800479c:	d104      	bne.n	80047a8 <Lora_receive+0x13c>
 800479e:	f897 30f0 	ldrb.w	r3, [r7, #240]	; 0xf0
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	f000 80e9 	beq.w	800497a <Lora_receive+0x30e>
	if (mode)	{
 80047a8:	f897 30f0 	ldrb.w	r3, [r7, #240]	; 0xf0
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d00b      	beq.n	80047c8 <Lora_receive+0x15c>
		// Get mode
		modevalue = Msg[ID_STARTPOS+id_len +2];
 80047b0:	f897 30eb 	ldrb.w	r3, [r7, #235]	; 0xeb
 80047b4:	3305      	adds	r3, #5
 80047b6:	687a      	ldr	r2, [r7, #4]
 80047b8:	4413      	add	r3, r2
 80047ba:	781b      	ldrb	r3, [r3, #0]
 80047bc:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
		flag = 1;
 80047c0:	2301      	movs	r3, #1
 80047c2:	f887 30f1 	strb.w	r3, [r7, #241]	; 0xf1
 80047c6:	e030      	b.n	800482a <Lora_receive+0x1be>
	}
	else {
		// check whether Data Period or Data Calib
		switch	(Msg[ID_STARTPOS +id_len +1]) {
 80047c8:	f897 30eb 	ldrb.w	r3, [r7, #235]	; 0xeb
 80047cc:	3304      	adds	r3, #4
 80047ce:	687a      	ldr	r2, [r7, #4]
 80047d0:	4413      	add	r3, r2
 80047d2:	781b      	ldrb	r3, [r3, #0]
 80047d4:	2b02      	cmp	r3, #2
 80047d6:	d002      	beq.n	80047de <Lora_receive+0x172>
 80047d8:	2b64      	cmp	r3, #100	; 0x64
 80047da:	d017      	beq.n	800480c <Lora_receive+0x1a0>
			// Get data calib value
			memcpy(Vcalib , Msg + ID_STARTPOS +id_len +2, 100);
			flag = 3;
			break;
		default:
			break;
 80047dc:	e025      	b.n	800482a <Lora_receive+0x1be>
			Vperiod = buff2twobyte(Msg + ID_STARTPOS +id_len +2);
 80047de:	f897 30eb 	ldrb.w	r3, [r7, #235]	; 0xeb
 80047e2:	3305      	adds	r3, #5
 80047e4:	687a      	ldr	r2, [r7, #4]
 80047e6:	4413      	add	r3, r2
 80047e8:	4618      	mov	r0, r3
 80047ea:	f000 fe23 	bl	8005434 <buff2twobyte>
 80047ee:	4603      	mov	r3, r0
 80047f0:	f8a7 30f4 	strh.w	r3, [r7, #244]	; 0xf4
			vbat = Msg[ID_STARTPOS +id_len +6];
 80047f4:	f897 30eb 	ldrb.w	r3, [r7, #235]	; 0xeb
 80047f8:	3309      	adds	r3, #9
 80047fa:	687a      	ldr	r2, [r7, #4]
 80047fc:	4413      	add	r3, r2
 80047fe:	781b      	ldrb	r3, [r3, #0]
 8004800:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
			flag = 2;
 8004804:	2302      	movs	r3, #2
 8004806:	f887 30f1 	strb.w	r3, [r7, #241]	; 0xf1
			break;
 800480a:	e00e      	b.n	800482a <Lora_receive+0x1be>
			memcpy(Vcalib , Msg + ID_STARTPOS +id_len +2, 100);
 800480c:	f897 30eb 	ldrb.w	r3, [r7, #235]	; 0xeb
 8004810:	3305      	adds	r3, #5
 8004812:	687a      	ldr	r2, [r7, #4]
 8004814:	18d1      	adds	r1, r2, r3
 8004816:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800481a:	2264      	movs	r2, #100	; 0x64
 800481c:	4618      	mov	r0, r3
 800481e:	f007 fc8b 	bl	800c138 <memcpy>
			flag = 3;
 8004822:	2303      	movs	r3, #3
 8004824:	f887 30f1 	strb.w	r3, [r7, #241]	; 0xf1
			break;
 8004828:	bf00      	nop
		}

	}

	// If Sensor ID is  not already saved in the Sensor node list
	if ( !isIDExist(id) )		{
 800482a:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 800482e:	4618      	mov	r0, r3
 8004830:	f7ff fef8 	bl	8004624 <isIDExist>
 8004834:	4603      	mov	r3, r0
 8004836:	f083 0301 	eor.w	r3, r3, #1
 800483a:	b2db      	uxtb	r3, r3
 800483c:	2b00      	cmp	r3, #0
 800483e:	d046      	beq.n	80048ce <Lora_receive+0x262>
		SensorNode_t newSensor = SENSORNODE_T_INIT;
 8004840:	f107 0308 	add.w	r3, r7, #8
 8004844:	2270      	movs	r2, #112	; 0x70
 8004846:	2100      	movs	r1, #0
 8004848:	4618      	mov	r0, r3
 800484a:	f007 fc83 	bl	800c154 <memset>
 800484e:	2301      	movs	r3, #1
 8004850:	72bb      	strb	r3, [r7, #10]
 8004852:	2301      	movs	r3, #1
 8004854:	73bb      	strb	r3, [r7, #14]
		newSensor.SSnode_ID = id;
 8004856:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 800485a:	723b      	strb	r3, [r7, #8]
		switch (flag)	{
 800485c:	f897 30f1 	ldrb.w	r3, [r7, #241]	; 0xf1
 8004860:	2b03      	cmp	r3, #3
 8004862:	d014      	beq.n	800488e <Lora_receive+0x222>
 8004864:	2b03      	cmp	r3, #3
 8004866:	dc21      	bgt.n	80048ac <Lora_receive+0x240>
 8004868:	2b01      	cmp	r3, #1
 800486a:	d002      	beq.n	8004872 <Lora_receive+0x206>
 800486c:	2b02      	cmp	r3, #2
 800486e:	d004      	beq.n	800487a <Lora_receive+0x20e>
			newSensor.V_type = vtype;
			memcpy(newSensor.dataCalibBuffer, Vcalib, 100);
			newSensor.dataCalibAvailable = 1;
			break;
		default:
			break;
 8004870:	e01c      	b.n	80048ac <Lora_receive+0x240>
			newSensor.sensorMode = modevalue;
 8004872:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 8004876:	747b      	strb	r3, [r7, #17]
			break;
 8004878:	e019      	b.n	80048ae <Lora_receive+0x242>
			newSensor.V_type = vtype;
 800487a:	f897 30f2 	ldrb.w	r3, [r7, #242]	; 0xf2
 800487e:	72bb      	strb	r3, [r7, #10]
			newSensor.V_value = Vperiod;
 8004880:	f8b7 30f4 	ldrh.w	r3, [r7, #244]	; 0xf4
 8004884:	81bb      	strh	r3, [r7, #12]
			newSensor.Battery = vbat;
 8004886:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
 800488a:	727b      	strb	r3, [r7, #9]
			break;
 800488c:	e00f      	b.n	80048ae <Lora_receive+0x242>
			newSensor.V_type = vtype;
 800488e:	f897 30f2 	ldrb.w	r3, [r7, #242]	; 0xf2
 8004892:	72bb      	strb	r3, [r7, #10]
			memcpy(newSensor.dataCalibBuffer, Vcalib, 100);
 8004894:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8004898:	f107 0308 	add.w	r3, r7, #8
 800489c:	330a      	adds	r3, #10
 800489e:	2264      	movs	r2, #100	; 0x64
 80048a0:	4618      	mov	r0, r3
 80048a2:	f007 fc49 	bl	800c138 <memcpy>
			newSensor.dataCalibAvailable = 1;
 80048a6:	2301      	movs	r3, #1
 80048a8:	73fb      	strb	r3, [r7, #15]
			break;
 80048aa:	e000      	b.n	80048ae <Lora_receive+0x242>
			break;
 80048ac:	bf00      	nop
		}
		list_append(myStation.ssNode_list, newSensor);
 80048ae:	4b36      	ldr	r3, [pc, #216]	; (8004988 <Lora_receive+0x31c>)
 80048b0:	68dc      	ldr	r4, [r3, #12]
 80048b2:	4668      	mov	r0, sp
 80048b4:	f107 0314 	add.w	r3, r7, #20
 80048b8:	2264      	movs	r2, #100	; 0x64
 80048ba:	4619      	mov	r1, r3
 80048bc:	f007 fc3c 	bl	800c138 <memcpy>
 80048c0:	f107 0308 	add.w	r3, r7, #8
 80048c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80048c6:	4620      	mov	r0, r4
 80048c8:	f001 fb26 	bl	8005f18 <list_append>
 80048cc:	e04f      	b.n	800496e <Lora_receive+0x302>
	}
	// If Sensor ID is already saved in the Sensor node list
	else {
		Node * current = myStation.ssNode_list->head->next;
 80048ce:	4b2e      	ldr	r3, [pc, #184]	; (8004988 <Lora_receive+0x31c>)
 80048d0:	68db      	ldr	r3, [r3, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048d6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
		while (current != myStation.ssNode_list->tail)	{
 80048da:	e041      	b.n	8004960 <Lora_receive+0x2f4>
			if (current->SSnode.SSnode_ID == id) {
 80048dc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80048e0:	781b      	ldrb	r3, [r3, #0]
 80048e2:	f897 20df 	ldrb.w	r2, [r7, #223]	; 0xdf
 80048e6:	429a      	cmp	r2, r3
 80048e8:	d135      	bne.n	8004956 <Lora_receive+0x2ea>
				switch (flag)	{
 80048ea:	f897 30f1 	ldrb.w	r3, [r7, #241]	; 0xf1
 80048ee:	2b03      	cmp	r3, #3
 80048f0:	d01c      	beq.n	800492c <Lora_receive+0x2c0>
 80048f2:	2b03      	cmp	r3, #3
 80048f4:	dc2d      	bgt.n	8004952 <Lora_receive+0x2e6>
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d002      	beq.n	8004900 <Lora_receive+0x294>
 80048fa:	2b02      	cmp	r3, #2
 80048fc:	d006      	beq.n	800490c <Lora_receive+0x2a0>
					current->SSnode.V_type = vtype;
					memcpy(current->SSnode.dataCalibBuffer, Vcalib, 100);
					current->SSnode.dataCalibAvailable = 1;
					break;
				default:
					break;
 80048fe:	e028      	b.n	8004952 <Lora_receive+0x2e6>
					current->SSnode.sensorMode = modevalue;
 8004900:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004904:	f897 20f3 	ldrb.w	r2, [r7, #243]	; 0xf3
 8004908:	725a      	strb	r2, [r3, #9]
					break;
 800490a:	e023      	b.n	8004954 <Lora_receive+0x2e8>
					current->SSnode.V_type = vtype;
 800490c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004910:	f897 20f2 	ldrb.w	r2, [r7, #242]	; 0xf2
 8004914:	709a      	strb	r2, [r3, #2]
					current->SSnode.V_value = Vperiod;
 8004916:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800491a:	f8b7 20f4 	ldrh.w	r2, [r7, #244]	; 0xf4
 800491e:	809a      	strh	r2, [r3, #4]
					current->SSnode.Battery = vbat;
 8004920:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004924:	f897 20f7 	ldrb.w	r2, [r7, #247]	; 0xf7
 8004928:	705a      	strb	r2, [r3, #1]
					break;
 800492a:	e013      	b.n	8004954 <Lora_receive+0x2e8>
					current->SSnode.V_type = vtype;
 800492c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004930:	f897 20f2 	ldrb.w	r2, [r7, #242]	; 0xf2
 8004934:	709a      	strb	r2, [r3, #2]
					memcpy(current->SSnode.dataCalibBuffer, Vcalib, 100);
 8004936:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800493a:	330a      	adds	r3, #10
 800493c:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8004940:	2264      	movs	r2, #100	; 0x64
 8004942:	4618      	mov	r0, r3
 8004944:	f007 fbf8 	bl	800c138 <memcpy>
					current->SSnode.dataCalibAvailable = 1;
 8004948:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800494c:	2201      	movs	r2, #1
 800494e:	71da      	strb	r2, [r3, #7]
					break;
 8004950:	e000      	b.n	8004954 <Lora_receive+0x2e8>
					break;
 8004952:	bf00      	nop
				}
				return;
 8004954:	e012      	b.n	800497c <Lora_receive+0x310>
			}
			current = current->next;
 8004956:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800495a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800495c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
		while (current != myStation.ssNode_list->tail)	{
 8004960:	4b09      	ldr	r3, [pc, #36]	; (8004988 <Lora_receive+0x31c>)
 8004962:	68db      	ldr	r3, [r3, #12]
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800496a:	429a      	cmp	r2, r3
 800496c:	d1b6      	bne.n	80048dc <Lora_receive+0x270>
 800496e:	46b5      	mov	sp, r6
 8004970:	e005      	b.n	800497e <Lora_receive+0x312>
	if (Msg[START_POS] != START_VALUE)	return ;
 8004972:	bf00      	nop
 8004974:	e002      	b.n	800497c <Lora_receive+0x310>
	if ( !sensorID_validation(id) )	return;
 8004976:	bf00      	nop
 8004978:	e000      	b.n	800497c <Lora_receive+0x310>
	if (!vtype && !mode)	return;
 800497a:	bf00      	nop
 800497c:	46b5      	mov	sp, r6
		}
	}
}
 800497e:	37fc      	adds	r7, #252	; 0xfc
 8004980:	46bd      	mov	sp, r7
 8004982:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004986:	bf00      	nop
 8004988:	20000474 	.word	0x20000474

0800498c <Lora_Setmode>:
/*
 *  @para: checkres : 0 no check
 *  				  1 check
 */
uint8_t Lora_Setmode(sensor_mode_t mode, uint8_t checkres)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b084      	sub	sp, #16
 8004990:	af00      	add	r7, sp, #0
 8004992:	4603      	mov	r3, r0
 8004994:	460a      	mov	r2, r1
 8004996:	71fb      	strb	r3, [r7, #7]
 8004998:	4613      	mov	r3, r2
 800499a:	71bb      	strb	r3, [r7, #6]
	uint8_t len = sprintf((char*)LoraTxbuff, "AT+MODE=%d", mode);
 800499c:	79fb      	ldrb	r3, [r7, #7]
 800499e:	461a      	mov	r2, r3
 80049a0:	4918      	ldr	r1, [pc, #96]	; (8004a04 <Lora_Setmode+0x78>)
 80049a2:	4819      	ldr	r0, [pc, #100]	; (8004a08 <Lora_Setmode+0x7c>)
 80049a4:	f007 ff3c 	bl	800c820 <siprintf>
 80049a8:	4603      	mov	r3, r0
 80049aa:	737b      	strb	r3, [r7, #13]
	isOK = 0;
 80049ac:	4b17      	ldr	r3, [pc, #92]	; (8004a0c <Lora_Setmode+0x80>)
 80049ae:	2200      	movs	r2, #0
 80049b0:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(__LORA_UART, LoraTxbuff, len, LORA_TIMEOUT);
 80049b2:	7b7b      	ldrb	r3, [r7, #13]
 80049b4:	b29a      	uxth	r2, r3
 80049b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80049ba:	4913      	ldr	r1, [pc, #76]	; (8004a08 <Lora_Setmode+0x7c>)
 80049bc:	4814      	ldr	r0, [pc, #80]	; (8004a10 <Lora_Setmode+0x84>)
 80049be:	f006 fa71 	bl	800aea4 <HAL_UART_Transmit>
	// Wait for responding
	switch (checkres)	{
 80049c2:	79bb      	ldrb	r3, [r7, #6]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d016      	beq.n	80049f6 <Lora_Setmode+0x6a>
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d000      	beq.n	80049ce <Lora_Setmode+0x42>
				return 1;
			}
		}
		break;
	default :
		break;
 80049cc:	e014      	b.n	80049f8 <Lora_Setmode+0x6c>
		for (uint16_t i = 0; i < 500; i++)	{
 80049ce:	2300      	movs	r3, #0
 80049d0:	81fb      	strh	r3, [r7, #14]
 80049d2:	e00b      	b.n	80049ec <Lora_Setmode+0x60>
			HAL_Delay(2);
 80049d4:	2002      	movs	r0, #2
 80049d6:	f003 f8f9 	bl	8007bcc <HAL_Delay>
			if (isOK) {
 80049da:	4b0c      	ldr	r3, [pc, #48]	; (8004a0c <Lora_Setmode+0x80>)
 80049dc:	781b      	ldrb	r3, [r3, #0]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d001      	beq.n	80049e6 <Lora_Setmode+0x5a>
				return 1;
 80049e2:	2301      	movs	r3, #1
 80049e4:	e009      	b.n	80049fa <Lora_Setmode+0x6e>
		for (uint16_t i = 0; i < 500; i++)	{
 80049e6:	89fb      	ldrh	r3, [r7, #14]
 80049e8:	3301      	adds	r3, #1
 80049ea:	81fb      	strh	r3, [r7, #14]
 80049ec:	89fb      	ldrh	r3, [r7, #14]
 80049ee:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80049f2:	d3ef      	bcc.n	80049d4 <Lora_Setmode+0x48>
		break;
 80049f4:	e000      	b.n	80049f8 <Lora_Setmode+0x6c>
		break;
 80049f6:	bf00      	nop
	}


	return 0;
 80049f8:	2300      	movs	r3, #0
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3710      	adds	r7, #16
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}
 8004a02:	bf00      	nop
 8004a04:	0800ef10 	.word	0x0800ef10
 8004a08:	20001480 	.word	0x20001480
 8004a0c:	200014e4 	.word	0x200014e4
 8004a10:	20002ae8 	.word	0x20002ae8

08004a14 <init_MQTT>:

uint8_t MQTT_Txbuff [MQTT_TXBUFF_SIZE];


void init_MQTT()
{
 8004a14:	b480      	push	{r7}
 8004a16:	af00      	add	r7, sp, #0
//	mySIM = SIM;
}
 8004a18:	bf00      	nop
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bc80      	pop	{r7}
 8004a1e:	4770      	bx	lr

08004a20 <MQTT_getConnectflag>:

uint8_t MQTT_getConnectflag()
{
 8004a20:	b480      	push	{r7}
 8004a22:	af00      	add	r7, sp, #0
	return mySIM.mqttServer.connect;
 8004a24:	4b03      	ldr	r3, [pc, #12]	; (8004a34 <MQTT_getConnectflag+0x14>)
 8004a26:	7b9b      	ldrb	r3, [r3, #14]
 8004a28:	b2db      	uxtb	r3, r3
}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bc80      	pop	{r7}
 8004a30:	4770      	bx	lr
 8004a32:	bf00      	nop
 8004a34:	20001770 	.word	0x20001770

08004a38 <getContent>:

}


static uint8_t getContent(content_t contentType, uint8_t *databuffer, uint16_t datalen, uint8_t *getbuffer, uint16_t contentlen)
{
 8004a38:	b5b0      	push	{r4, r5, r7, lr}
 8004a3a:	b092      	sub	sp, #72	; 0x48
 8004a3c:	af02      	add	r7, sp, #8
 8004a3e:	60b9      	str	r1, [r7, #8]
 8004a40:	607b      	str	r3, [r7, #4]
 8004a42:	4603      	mov	r3, r0
 8004a44:	73fb      	strb	r3, [r7, #15]
 8004a46:	4613      	mov	r3, r2
 8004a48:	81bb      	strh	r3, [r7, #12]
	uint16_t gotcontent_len = 0;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	87fb      	strh	r3, [r7, #62]	; 0x3e

	uint8_t *currentPOS ;
	uint16_t databuffer_Remainlen = datalen;
 8004a4e:	89bb      	ldrh	r3, [r7, #12]
 8004a50:	86fb      	strh	r3, [r7, #54]	; 0x36

	uint16_t subcontent_len;
	uint8_t subContentlen_buff[10];
	uint8_t contentsignature[20];
	if (contentType == CONTENT_PAYLOAD) {
 8004a52:	7bfb      	ldrb	r3, [r7, #15]
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	d109      	bne.n	8004a6c <getContent+0x34>
		strcpy( (char*)contentsignature, "+CMQTTRXPAYLOAD:");
 8004a58:	f107 0314 	add.w	r3, r7, #20
 8004a5c:	4a36      	ldr	r2, [pc, #216]	; (8004b38 <getContent+0x100>)
 8004a5e:	461c      	mov	r4, r3
 8004a60:	4615      	mov	r5, r2
 8004a62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004a64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004a66:	682b      	ldr	r3, [r5, #0]
 8004a68:	7023      	strb	r3, [r4, #0]
 8004a6a:	e05b      	b.n	8004b24 <getContent+0xec>
 	}
	else if (contentType == CONTENT_TOPIC) {
 8004a6c:	7bfb      	ldrb	r3, [r7, #15]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d10b      	bne.n	8004a8a <getContent+0x52>
		strcpy( (char*)contentsignature, "+CMQTTRXTOPIC:");
 8004a72:	f107 0314 	add.w	r3, r7, #20
 8004a76:	4a31      	ldr	r2, [pc, #196]	; (8004b3c <getContent+0x104>)
 8004a78:	461c      	mov	r4, r3
 8004a7a:	4613      	mov	r3, r2
 8004a7c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004a7e:	c407      	stmia	r4!, {r0, r1, r2}
 8004a80:	8023      	strh	r3, [r4, #0]
 8004a82:	3402      	adds	r4, #2
 8004a84:	0c1b      	lsrs	r3, r3, #16
 8004a86:	7023      	strb	r3, [r4, #0]
 8004a88:	e04c      	b.n	8004b24 <getContent+0xec>
	}
	else return 0;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	e050      	b.n	8004b30 <getContent+0xf8>

	while ( gotcontent_len < contentlen )
	{
		currentPOS = isWordinBuff(databuffer, databuffer_Remainlen, contentsignature);
 8004a8e:	f107 0214 	add.w	r2, r7, #20
 8004a92:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004a94:	4619      	mov	r1, r3
 8004a96:	68b8      	ldr	r0, [r7, #8]
 8004a98:	f000 fc24 	bl	80052e4 <isWordinBuff>
 8004a9c:	63b8      	str	r0, [r7, #56]	; 0x38
		if (currentPOS == NULL)		return  0;
 8004a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d101      	bne.n	8004aa8 <getContent+0x70>
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	e043      	b.n	8004b30 <getContent+0xf8>
		databuffer_Remainlen = getRemainsize( currentPOS, databuffer, databuffer_Remainlen );
 8004aa8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004aaa:	461a      	mov	r2, r3
 8004aac:	68b9      	ldr	r1, [r7, #8]
 8004aae:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004ab0:	f000 fc97 	bl	80053e2 <getRemainsize>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	86fb      	strh	r3, [r7, #54]	; 0x36

		// Get subcontent length
		getBetween( (uint8_t*)",", (uint8_t*) "\r", currentPOS, databuffer_Remainlen, subContentlen_buff);
 8004ab8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8004aba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004abe:	9300      	str	r3, [sp, #0]
 8004ac0:	4613      	mov	r3, r2
 8004ac2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ac4:	491e      	ldr	r1, [pc, #120]	; (8004b40 <getContent+0x108>)
 8004ac6:	481f      	ldr	r0, [pc, #124]	; (8004b44 <getContent+0x10c>)
 8004ac8:	f000 fc38 	bl	800533c <getBetween>
		subcontent_len = atoi( (char*)subContentlen_buff );
 8004acc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	f007 f9d3 	bl	800be7c <atoi>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	867b      	strh	r3, [r7, #50]	; 0x32

		// Get subcontent
		while ( *currentPOS != '\n'){
 8004ada:	e002      	b.n	8004ae2 <getContent+0xaa>
			currentPOS++;
 8004adc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ade:	3301      	adds	r3, #1
 8004ae0:	63bb      	str	r3, [r7, #56]	; 0x38
		while ( *currentPOS != '\n'){
 8004ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ae4:	781b      	ldrb	r3, [r3, #0]
 8004ae6:	2b0a      	cmp	r3, #10
 8004ae8:	d1f8      	bne.n	8004adc <getContent+0xa4>
		}
		currentPOS++;
 8004aea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aec:	3301      	adds	r3, #1
 8004aee:	63bb      	str	r3, [r7, #56]	; 0x38
		for (uint16_t i = 0; i< subcontent_len; i++)
 8004af0:	2300      	movs	r3, #0
 8004af2:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004af4:	e00d      	b.n	8004b12 <getContent+0xda>
		{
			getbuffer[gotcontent_len++] = currentPOS[i];
 8004af6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004af8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004afa:	441a      	add	r2, r3
 8004afc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004afe:	1c59      	adds	r1, r3, #1
 8004b00:	87f9      	strh	r1, [r7, #62]	; 0x3e
 8004b02:	4619      	mov	r1, r3
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	440b      	add	r3, r1
 8004b08:	7812      	ldrb	r2, [r2, #0]
 8004b0a:	701a      	strb	r2, [r3, #0]
		for (uint16_t i = 0; i< subcontent_len; i++)
 8004b0c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004b0e:	3301      	adds	r3, #1
 8004b10:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004b12:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004b14:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004b16:	429a      	cmp	r2, r3
 8004b18:	d3ed      	bcc.n	8004af6 <getContent+0xbe>
		}

		// Update databuffer
		databuffer = ++currentPOS;
 8004b1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b1c:	3301      	adds	r3, #1
 8004b1e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b22:	60bb      	str	r3, [r7, #8]
	while ( gotcontent_len < contentlen )
 8004b24:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8004b26:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	d3af      	bcc.n	8004a8e <getContent+0x56>
	}
	return 1;
 8004b2e:	2301      	movs	r3, #1
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	3740      	adds	r7, #64	; 0x40
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bdb0      	pop	{r4, r5, r7, pc}
 8004b38:	0800ef1c 	.word	0x0800ef1c
 8004b3c:	0800ef30 	.word	0x0800ef30
 8004b40:	0800ef40 	.word	0x0800ef40
 8004b44:	0800ef44 	.word	0x0800ef44

08004b48 <MQTT_receiveGetTopicandPayloadLength>:

uint8_t MQTT_receiveGetTopicandPayloadLength( uint8_t *MQTTbuff, uint16_t buffsize)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b08c      	sub	sp, #48	; 0x30
 8004b4c:	af02      	add	r7, sp, #8
 8004b4e:	6078      	str	r0, [r7, #4]
 8004b50:	460b      	mov	r3, r1
 8004b52:	807b      	strh	r3, [r7, #2]
	uint8_t topiclen_buff[10];
	uint8_t payloadlen_buff[10];
//	Serial_log_string("MQTTbuffer: ");
//	Serial_log_buffer(MQTTbuff, buffsize);
//	Serial_log_string(" ");
	uint8_t * currentPos = isWordinBuff(MQTTbuff, buffsize, (uint8_t*)"+CMQTTRXSTART:");
 8004b54:	887b      	ldrh	r3, [r7, #2]
 8004b56:	4a22      	ldr	r2, [pc, #136]	; (8004be0 <MQTT_receiveGetTopicandPayloadLength+0x98>)
 8004b58:	4619      	mov	r1, r3
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f000 fbc2 	bl	80052e4 <isWordinBuff>
 8004b60:	6278      	str	r0, [r7, #36]	; 0x24

	uint16_t remainlen = getRemainsize(currentPos, MQTTbuff, buffsize);
 8004b62:	887b      	ldrh	r3, [r7, #2]
 8004b64:	461a      	mov	r2, r3
 8004b66:	6879      	ldr	r1, [r7, #4]
 8004b68:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004b6a:	f000 fc3a 	bl	80053e2 <getRemainsize>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	847b      	strh	r3, [r7, #34]	; 0x22

	getBetween( (uint8_t*)",", (uint8_t*)",", currentPos, remainlen, topiclen_buff);
 8004b72:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8004b74:	f107 0318 	add.w	r3, r7, #24
 8004b78:	9300      	str	r3, [sp, #0]
 8004b7a:	4613      	mov	r3, r2
 8004b7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b7e:	4919      	ldr	r1, [pc, #100]	; (8004be4 <MQTT_receiveGetTopicandPayloadLength+0x9c>)
 8004b80:	4818      	ldr	r0, [pc, #96]	; (8004be4 <MQTT_receiveGetTopicandPayloadLength+0x9c>)
 8004b82:	f000 fbdb 	bl	800533c <getBetween>
	mySIM.mqttReceive.topicLen = atoi( (char*)topiclen_buff );
 8004b86:	f107 0318 	add.w	r3, r7, #24
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f007 f976 	bl	800be7c <atoi>
 8004b90:	4603      	mov	r3, r0
 8004b92:	b29a      	uxth	r2, r3
 8004b94:	4b14      	ldr	r3, [pc, #80]	; (8004be8 <MQTT_receiveGetTopicandPayloadLength+0xa0>)
 8004b96:	f8a3 214e 	strh.w	r2, [r3, #334]	; 0x14e

	currentPos = isWordinBuff(currentPos, remainlen,(uint8_t*)",");
 8004b9a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004b9c:	4a11      	ldr	r2, [pc, #68]	; (8004be4 <MQTT_receiveGetTopicandPayloadLength+0x9c>)
 8004b9e:	4619      	mov	r1, r3
 8004ba0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004ba2:	f000 fb9f 	bl	80052e4 <isWordinBuff>
 8004ba6:	6278      	str	r0, [r7, #36]	; 0x24
	currentPos ++;
 8004ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004baa:	3301      	adds	r3, #1
 8004bac:	627b      	str	r3, [r7, #36]	; 0x24

	getBetween( (uint8_t*)",", (uint8_t*)"\r", currentPos, remainlen, payloadlen_buff);
 8004bae:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8004bb0:	f107 030c 	add.w	r3, r7, #12
 8004bb4:	9300      	str	r3, [sp, #0]
 8004bb6:	4613      	mov	r3, r2
 8004bb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bba:	490c      	ldr	r1, [pc, #48]	; (8004bec <MQTT_receiveGetTopicandPayloadLength+0xa4>)
 8004bbc:	4809      	ldr	r0, [pc, #36]	; (8004be4 <MQTT_receiveGetTopicandPayloadLength+0x9c>)
 8004bbe:	f000 fbbd 	bl	800533c <getBetween>
	mySIM.mqttReceive.payloadLen = atoi( (char*)payloadlen_buff );
 8004bc2:	f107 030c 	add.w	r3, r7, #12
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f007 f958 	bl	800be7c <atoi>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	b29a      	uxth	r2, r3
 8004bd0:	4b05      	ldr	r3, [pc, #20]	; (8004be8 <MQTT_receiveGetTopicandPayloadLength+0xa0>)
 8004bd2:	f8a3 2124 	strh.w	r2, [r3, #292]	; 0x124

	return 1;
 8004bd6:	2301      	movs	r3, #1
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	3728      	adds	r7, #40	; 0x28
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}
 8004be0:	0800ef48 	.word	0x0800ef48
 8004be4:	0800ef44 	.word	0x0800ef44
 8004be8:	20001770 	.word	0x20001770
 8004bec:	0800ef40 	.word	0x0800ef40

08004bf0 <MQTT_receiveGetTopic>:

uint8_t MQTT_receiveGetTopic (uint8_t *MQTTbuff,uint16_t buffsize)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b084      	sub	sp, #16
 8004bf4:	af02      	add	r7, sp, #8
 8004bf6:	6078      	str	r0, [r7, #4]
 8004bf8:	460b      	mov	r3, r1
 8004bfa:	807b      	strh	r3, [r7, #2]
	return getContent(CONTENT_TOPIC, MQTTbuff, buffsize, mySIM.mqttReceive.topic, mySIM.mqttReceive.topicLen);
 8004bfc:	4b07      	ldr	r3, [pc, #28]	; (8004c1c <MQTT_receiveGetTopic+0x2c>)
 8004bfe:	f8b3 314e 	ldrh.w	r3, [r3, #334]	; 0x14e
 8004c02:	887a      	ldrh	r2, [r7, #2]
 8004c04:	9300      	str	r3, [sp, #0]
 8004c06:	4b06      	ldr	r3, [pc, #24]	; (8004c20 <MQTT_receiveGetTopic+0x30>)
 8004c08:	6879      	ldr	r1, [r7, #4]
 8004c0a:	2000      	movs	r0, #0
 8004c0c:	f7ff ff14 	bl	8004a38 <getContent>
 8004c10:	4603      	mov	r3, r0
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	3708      	adds	r7, #8
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}
 8004c1a:	bf00      	nop
 8004c1c:	20001770 	.word	0x20001770
 8004c20:	20001896 	.word	0x20001896

08004c24 <MQTT_receiveGetPayload>:

uint8_t MQTT_receiveGetPayload (uint8_t *MQTTbuff,uint16_t buffsize)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b084      	sub	sp, #16
 8004c28:	af02      	add	r7, sp, #8
 8004c2a:	6078      	str	r0, [r7, #4]
 8004c2c:	460b      	mov	r3, r1
 8004c2e:	807b      	strh	r3, [r7, #2]
	return getContent(CONTENT_PAYLOAD, MQTTbuff, buffsize, mySIM.mqttReceive.payload, mySIM.mqttReceive.payloadLen);
 8004c30:	4b07      	ldr	r3, [pc, #28]	; (8004c50 <MQTT_receiveGetPayload+0x2c>)
 8004c32:	f8b3 3124 	ldrh.w	r3, [r3, #292]	; 0x124
 8004c36:	887a      	ldrh	r2, [r7, #2]
 8004c38:	9300      	str	r3, [sp, #0]
 8004c3a:	4b06      	ldr	r3, [pc, #24]	; (8004c54 <MQTT_receiveGetPayload+0x30>)
 8004c3c:	6879      	ldr	r1, [r7, #4]
 8004c3e:	2001      	movs	r0, #1
 8004c40:	f7ff fefa 	bl	8004a38 <getContent>
 8004c44:	4603      	mov	r3, r0
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3708      	adds	r7, #8
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}
 8004c4e:	bf00      	nop
 8004c50:	20001770 	.word	0x20001770
 8004c54:	20001794 	.word	0x20001794

08004c58 <MQTT_receive>:
uint8_t MQTT_receive(uint8_t *MQTTbuff,uint16_t buffsize)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b082      	sub	sp, #8
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
 8004c60:	460b      	mov	r3, r1
 8004c62:	807b      	strh	r3, [r7, #2]
	if ( !MQTT_receiveGetTopicandPayloadLength(MQTTbuff, buffsize) ) return 0;
 8004c64:	887b      	ldrh	r3, [r7, #2]
 8004c66:	4619      	mov	r1, r3
 8004c68:	6878      	ldr	r0, [r7, #4]
 8004c6a:	f7ff ff6d 	bl	8004b48 <MQTT_receiveGetTopicandPayloadLength>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d101      	bne.n	8004c78 <MQTT_receive+0x20>
 8004c74:	2300      	movs	r3, #0
 8004c76:	e022      	b.n	8004cbe <MQTT_receive+0x66>

	memset( mySIM.mqttReceive.payload, 0, MAX_PAYLOAD_LEN );
 8004c78:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004c7c:	2100      	movs	r1, #0
 8004c7e:	4812      	ldr	r0, [pc, #72]	; (8004cc8 <MQTT_receive+0x70>)
 8004c80:	f007 fa68 	bl	800c154 <memset>
	memset( mySIM.mqttReceive.topic, 0, MAX_TOPIC_LEN );
 8004c84:	2228      	movs	r2, #40	; 0x28
 8004c86:	2100      	movs	r1, #0
 8004c88:	4810      	ldr	r0, [pc, #64]	; (8004ccc <MQTT_receive+0x74>)
 8004c8a:	f007 fa63 	bl	800c154 <memset>

	if (! MQTT_receiveGetTopic(MQTTbuff, buffsize))		return 0;
 8004c8e:	887b      	ldrh	r3, [r7, #2]
 8004c90:	4619      	mov	r1, r3
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f7ff ffac 	bl	8004bf0 <MQTT_receiveGetTopic>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d101      	bne.n	8004ca2 <MQTT_receive+0x4a>
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	e00d      	b.n	8004cbe <MQTT_receive+0x66>

	if (! MQTT_receiveGetPayload(MQTTbuff, buffsize))	return 0;
 8004ca2:	887b      	ldrh	r3, [r7, #2]
 8004ca4:	4619      	mov	r1, r3
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f7ff ffbc 	bl	8004c24 <MQTT_receiveGetPayload>
 8004cac:	4603      	mov	r3, r0
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d101      	bne.n	8004cb6 <MQTT_receive+0x5e>
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	e003      	b.n	8004cbe <MQTT_receive+0x66>

	mySIM.mqttReceive.newEvent = 1;
 8004cb6:	4b06      	ldr	r3, [pc, #24]	; (8004cd0 <MQTT_receive+0x78>)
 8004cb8:	2201      	movs	r2, #1
 8004cba:	761a      	strb	r2, [r3, #24]
	return 1;
 8004cbc:	2301      	movs	r3, #1
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3708      	adds	r7, #8
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}
 8004cc6:	bf00      	nop
 8004cc8:	20001794 	.word	0x20001794
 8004ccc:	20001896 	.word	0x20001896
 8004cd0:	20001770 	.word	0x20001770

08004cd4 <MQTT_connected>:

uint8_t MQTT_connected(void)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b082      	sub	sp, #8
 8004cd8:	af02      	add	r7, sp, #8
	if ( SIM_sendCMD((uint8_t*)"AT+CMQTTDISC?", (uint8_t*)"+CMQTTDISC: 0,0", ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, 1000) == SIM_RES_MSG )
 8004cda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004cde:	9300      	str	r3, [sp, #0]
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	4907      	ldr	r1, [pc, #28]	; (8004d04 <MQTT_connected+0x30>)
 8004ce6:	4808      	ldr	r0, [pc, #32]	; (8004d08 <MQTT_connected+0x34>)
 8004ce8:	f7fd fd66 	bl	80027b8 <SIM_sendCMD>
 8004cec:	4603      	mov	r3, r0
 8004cee:	2b01      	cmp	r3, #1
 8004cf0:	d101      	bne.n	8004cf6 <MQTT_connected+0x22>
	{
//		mySIM.mqttServer.connect = 1;
//		Serial_log_string("MQTT is connected to broker\r\n");
		return 1;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e003      	b.n	8004cfe <MQTT_connected+0x2a>
	}
//	Serial_log_string("MQTT is disconnected to broker\r\n");
	mySIM.mqttServer.connect = 0;
 8004cf6:	4b05      	ldr	r3, [pc, #20]	; (8004d0c <MQTT_connected+0x38>)
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	739a      	strb	r2, [r3, #14]
	return 0;
 8004cfc:	2300      	movs	r3, #0
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}
 8004d04:	0800ef58 	.word	0x0800ef58
 8004d08:	0800ef68 	.word	0x0800ef68
 8004d0c:	20001770 	.word	0x20001770

08004d10 <startMQTT>:
//    // Check network availability
//    // Implement your network check logic here
//    return 1; // Replace with your logic
//}
//
uint8_t startMQTT(void) {
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b084      	sub	sp, #16
 8004d14:	af02      	add	r7, sp, #8
    // Implement starting MQTT logic
	// Return 1 on success, 0 on failure

	uint8_t check = SIM_sendCMD((uint8_t*)"AT+CMQTTSTART", (uint8_t*)"+CMQTTSTART: 0", ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, MQTT_TIMEOUT_SHORT);
 8004d16:	f44f 7348 	mov.w	r3, #800	; 0x320
 8004d1a:	9300      	str	r3, [sp, #0]
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	2201      	movs	r2, #1
 8004d20:	490a      	ldr	r1, [pc, #40]	; (8004d4c <startMQTT+0x3c>)
 8004d22:	480b      	ldr	r0, [pc, #44]	; (8004d50 <startMQTT+0x40>)
 8004d24:	f7fd fd48 	bl	80027b8 <SIM_sendCMD>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	71fb      	strb	r3, [r7, #7]
	if ( check == SIM_RES_MSG )	{
 8004d2c:	79fb      	ldrb	r3, [r7, #7]
 8004d2e:	2b01      	cmp	r3, #1
 8004d30:	d101      	bne.n	8004d36 <startMQTT+0x26>
//		Serial_log_string("start MQTT success\r\n");
		return 1;
 8004d32:	2301      	movs	r3, #1
 8004d34:	e005      	b.n	8004d42 <startMQTT+0x32>
	}

//	check = SIM_sendCMD((uint8_t*)"AT+CMQTTSTART", (uint8_t*)"ERROR", ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, 2000);
	else if ( check == SIM_ERROR )	{
 8004d36:	79fb      	ldrb	r3, [r7, #7]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d101      	bne.n	8004d40 <startMQTT+0x30>
//		Serial_log_string("start MQTT success\r\n");
		return 1;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	e000      	b.n	8004d42 <startMQTT+0x32>
	}
//	Serial_log_number(check);
//	Serial_log_string("\r\nstart MQTT fail\r\n");
	return 0;
 8004d40:	2300      	movs	r3, #0
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3708      	adds	r7, #8
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}
 8004d4a:	bf00      	nop
 8004d4c:	0800ef78 	.word	0x0800ef78
 8004d50:	0800ef88 	.word	0x0800ef88

08004d54 <acquireMQTTclient>:

uint8_t acquireMQTTclient (uint8_t *clientID){
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b084      	sub	sp, #16
 8004d58:	af02      	add	r7, sp, #8
 8004d5a:	6078      	str	r0, [r7, #4]
	sprintf((char*)MQTT_Txbuff,"AT+CMQTTACCQ=0,\"%s\"", clientID);
 8004d5c:	687a      	ldr	r2, [r7, #4]
 8004d5e:	490b      	ldr	r1, [pc, #44]	; (8004d8c <acquireMQTTclient+0x38>)
 8004d60:	480b      	ldr	r0, [pc, #44]	; (8004d90 <acquireMQTTclient+0x3c>)
 8004d62:	f007 fd5d 	bl	800c820 <siprintf>
	if (SIM_sendCMD(MQTT_Txbuff, (uint8_t*)"OK", ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, MQTT_TIMEOUT_MEDIUM)== SIM_RES_MSG)	{
 8004d66:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8004d6a:	9300      	str	r3, [sp, #0]
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	2201      	movs	r2, #1
 8004d70:	4908      	ldr	r1, [pc, #32]	; (8004d94 <acquireMQTTclient+0x40>)
 8004d72:	4807      	ldr	r0, [pc, #28]	; (8004d90 <acquireMQTTclient+0x3c>)
 8004d74:	f7fd fd20 	bl	80027b8 <SIM_sendCMD>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	2b01      	cmp	r3, #1
 8004d7c:	d101      	bne.n	8004d82 <acquireMQTTclient+0x2e>
//		Serial_log_string("acquire MQTT client success\r\n");
		return 1;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e000      	b.n	8004d84 <acquireMQTTclient+0x30>
	}
//	Serial_log_string("acquire MQTT client fail\r\n");
    return 0;
 8004d82:	2300      	movs	r3, #0
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	3708      	adds	r7, #8
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}
 8004d8c:	0800ef98 	.word	0x0800ef98
 8004d90:	200014e8 	.word	0x200014e8
 8004d94:	0800efac 	.word	0x0800efac

08004d98 <releaseMQTTclient>:
//	}
////	Serial_log_string("acquire MQTT client fail\r\n");
//    return 0;
//}
uint8_t releaseMQTTclient (void)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b082      	sub	sp, #8
 8004d9c:	af02      	add	r7, sp, #8
	if (SIM_sendCMD((uint8_t*)"AT+CMQTTREL=0", (uint8_t*)"OK", ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, MQTT_TIMEOUT_SHORT) == SIM_RES_MSG) {
 8004d9e:	f44f 7348 	mov.w	r3, #800	; 0x320
 8004da2:	9300      	str	r3, [sp, #0]
 8004da4:	2301      	movs	r3, #1
 8004da6:	2201      	movs	r2, #1
 8004da8:	4906      	ldr	r1, [pc, #24]	; (8004dc4 <releaseMQTTclient+0x2c>)
 8004daa:	4807      	ldr	r0, [pc, #28]	; (8004dc8 <releaseMQTTclient+0x30>)
 8004dac:	f7fd fd04 	bl	80027b8 <SIM_sendCMD>
 8004db0:	4603      	mov	r3, r0
 8004db2:	2b01      	cmp	r3, #1
 8004db4:	d101      	bne.n	8004dba <releaseMQTTclient+0x22>
//		Serial_log_string("release MQTT client success\r\n");
		return 1;
 8004db6:	2301      	movs	r3, #1
 8004db8:	e000      	b.n	8004dbc <releaseMQTTclient+0x24>
	}
//	Serial_log_string("release MQTT client fail\r\n");
	return 0;
 8004dba:	2300      	movs	r3, #0
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}
 8004dc2:	bf00      	nop
 8004dc4:	0800efac 	.word	0x0800efac
 8004dc8:	0800efb0 	.word	0x0800efb0

08004dcc <configureMQTT>:
uint8_t configureMQTT() {
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b084      	sub	sp, #16
 8004dd0:	af02      	add	r7, sp, #8
    // Implement MQTT configuration logic
    // Return 1 on success, 0 on failure
	uint8_t wtplen = strlen(mySIM.mqttServer.willtopic);
 8004dd2:	4b3b      	ldr	r3, [pc, #236]	; (8004ec0 <configureMQTT+0xf4>)
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f7fb f9b8 	bl	800014c <strlen>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	71fb      	strb	r3, [r7, #7]
	sprintf((char*)MQTT_Txbuff,"AT+CMQTTWILLTOPIC=0,%d",wtplen);
 8004de0:	79fb      	ldrb	r3, [r7, #7]
 8004de2:	461a      	mov	r2, r3
 8004de4:	4937      	ldr	r1, [pc, #220]	; (8004ec4 <configureMQTT+0xf8>)
 8004de6:	4838      	ldr	r0, [pc, #224]	; (8004ec8 <configureMQTT+0xfc>)
 8004de8:	f007 fd1a 	bl	800c820 <siprintf>
	if (SIM_sendCMD(MQTT_Txbuff, (uint8_t*)">", ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, MQTT_TIMEOUT_SHORT) != SIM_RES_MSG)	return 0;
 8004dec:	f44f 7348 	mov.w	r3, #800	; 0x320
 8004df0:	9300      	str	r3, [sp, #0]
 8004df2:	2301      	movs	r3, #1
 8004df4:	2201      	movs	r2, #1
 8004df6:	4935      	ldr	r1, [pc, #212]	; (8004ecc <configureMQTT+0x100>)
 8004df8:	4833      	ldr	r0, [pc, #204]	; (8004ec8 <configureMQTT+0xfc>)
 8004dfa:	f7fd fcdd 	bl	80027b8 <SIM_sendCMD>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	d001      	beq.n	8004e08 <configureMQTT+0x3c>
 8004e04:	2300      	movs	r3, #0
 8004e06:	e057      	b.n	8004eb8 <configureMQTT+0xec>

	sprintf((char*)MQTT_Txbuff,"%s",mySIM.mqttServer.willtopic);
 8004e08:	4b2d      	ldr	r3, [pc, #180]	; (8004ec0 <configureMQTT+0xf4>)
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	461a      	mov	r2, r3
 8004e0e:	4930      	ldr	r1, [pc, #192]	; (8004ed0 <configureMQTT+0x104>)
 8004e10:	482d      	ldr	r0, [pc, #180]	; (8004ec8 <configureMQTT+0xfc>)
 8004e12:	f007 fd05 	bl	800c820 <siprintf>
	if (SIM_sendCMD(MQTT_Txbuff, (uint8_t*)"OK", ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, MQTT_TIMEOUT_SHORT) != SIM_RES_MSG)	return 0;
 8004e16:	f44f 7348 	mov.w	r3, #800	; 0x320
 8004e1a:	9300      	str	r3, [sp, #0]
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	2201      	movs	r2, #1
 8004e20:	492c      	ldr	r1, [pc, #176]	; (8004ed4 <configureMQTT+0x108>)
 8004e22:	4829      	ldr	r0, [pc, #164]	; (8004ec8 <configureMQTT+0xfc>)
 8004e24:	f7fd fcc8 	bl	80027b8 <SIM_sendCMD>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	2b01      	cmp	r3, #1
 8004e2c:	d001      	beq.n	8004e32 <configureMQTT+0x66>
 8004e2e:	2300      	movs	r3, #0
 8004e30:	e042      	b.n	8004eb8 <configureMQTT+0xec>

	uint8_t wmsglen = strlen((char*)mySIM.mqttServer.willmsg);
 8004e32:	4b23      	ldr	r3, [pc, #140]	; (8004ec0 <configureMQTT+0xf4>)
 8004e34:	689b      	ldr	r3, [r3, #8]
 8004e36:	4618      	mov	r0, r3
 8004e38:	f7fb f988 	bl	800014c <strlen>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	71bb      	strb	r3, [r7, #6]
	sprintf((char*)MQTT_Txbuff,"AT+CMQTTWILLMSG=0,%d,1",wmsglen);
 8004e40:	79bb      	ldrb	r3, [r7, #6]
 8004e42:	461a      	mov	r2, r3
 8004e44:	4924      	ldr	r1, [pc, #144]	; (8004ed8 <configureMQTT+0x10c>)
 8004e46:	4820      	ldr	r0, [pc, #128]	; (8004ec8 <configureMQTT+0xfc>)
 8004e48:	f007 fcea 	bl	800c820 <siprintf>
	if (SIM_sendCMD(MQTT_Txbuff, (uint8_t*)">", ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, MQTT_TIMEOUT_SHORT)!= SIM_RES_MSG)	return 0;
 8004e4c:	f44f 7348 	mov.w	r3, #800	; 0x320
 8004e50:	9300      	str	r3, [sp, #0]
 8004e52:	2301      	movs	r3, #1
 8004e54:	2201      	movs	r2, #1
 8004e56:	491d      	ldr	r1, [pc, #116]	; (8004ecc <configureMQTT+0x100>)
 8004e58:	481b      	ldr	r0, [pc, #108]	; (8004ec8 <configureMQTT+0xfc>)
 8004e5a:	f7fd fcad 	bl	80027b8 <SIM_sendCMD>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	d001      	beq.n	8004e68 <configureMQTT+0x9c>
 8004e64:	2300      	movs	r3, #0
 8004e66:	e027      	b.n	8004eb8 <configureMQTT+0xec>

	sprintf((char*)MQTT_Txbuff,"%s",mySIM.mqttServer.willmsg);
 8004e68:	4b15      	ldr	r3, [pc, #84]	; (8004ec0 <configureMQTT+0xf4>)
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	461a      	mov	r2, r3
 8004e6e:	4918      	ldr	r1, [pc, #96]	; (8004ed0 <configureMQTT+0x104>)
 8004e70:	4815      	ldr	r0, [pc, #84]	; (8004ec8 <configureMQTT+0xfc>)
 8004e72:	f007 fcd5 	bl	800c820 <siprintf>
	if (SIM_sendCMD(MQTT_Txbuff, (uint8_t*)"OK", ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, MQTT_TIMEOUT_SHORT)!= SIM_RES_MSG)	return 0;
 8004e76:	f44f 7348 	mov.w	r3, #800	; 0x320
 8004e7a:	9300      	str	r3, [sp, #0]
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	2201      	movs	r2, #1
 8004e80:	4914      	ldr	r1, [pc, #80]	; (8004ed4 <configureMQTT+0x108>)
 8004e82:	4811      	ldr	r0, [pc, #68]	; (8004ec8 <configureMQTT+0xfc>)
 8004e84:	f7fd fc98 	bl	80027b8 <SIM_sendCMD>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	2b01      	cmp	r3, #1
 8004e8c:	d001      	beq.n	8004e92 <configureMQTT+0xc6>
 8004e8e:	2300      	movs	r3, #0
 8004e90:	e012      	b.n	8004eb8 <configureMQTT+0xec>

//	if (! SIM_sendCMD((uint8_t*)"AT+CMQTTCFG?", (uint8_t*)"+CMQTTCFG: 0,0", ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, MQTT_TIMEOUT_SHORT))	{

		sprintf((char*)MQTT_Txbuff,"AT+CMQTTCFG=\"checkUTF8\",0,0");
 8004e92:	4912      	ldr	r1, [pc, #72]	; (8004edc <configureMQTT+0x110>)
 8004e94:	480c      	ldr	r0, [pc, #48]	; (8004ec8 <configureMQTT+0xfc>)
 8004e96:	f007 fcc3 	bl	800c820 <siprintf>
		if (! SIM_sendCMD(MQTT_Txbuff, (uint8_t*)"OK", ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, MQTT_TIMEOUT_SHORT))	return 0;
 8004e9a:	f44f 7348 	mov.w	r3, #800	; 0x320
 8004e9e:	9300      	str	r3, [sp, #0]
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	490b      	ldr	r1, [pc, #44]	; (8004ed4 <configureMQTT+0x108>)
 8004ea6:	4808      	ldr	r0, [pc, #32]	; (8004ec8 <configureMQTT+0xfc>)
 8004ea8:	f7fd fc86 	bl	80027b8 <SIM_sendCMD>
 8004eac:	4603      	mov	r3, r0
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d101      	bne.n	8004eb6 <configureMQTT+0xea>
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	e000      	b.n	8004eb8 <configureMQTT+0xec>
//	}



//	Serial_log_string("config MQTT success\r\n");
    return 1;
 8004eb6:	2301      	movs	r3, #1
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	3708      	adds	r7, #8
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}
 8004ec0:	20001770 	.word	0x20001770
 8004ec4:	0800efc0 	.word	0x0800efc0
 8004ec8:	200014e8 	.word	0x200014e8
 8004ecc:	0800efd8 	.word	0x0800efd8
 8004ed0:	0800efdc 	.word	0x0800efdc
 8004ed4:	0800efac 	.word	0x0800efac
 8004ed8:	0800efe0 	.word	0x0800efe0
 8004edc:	0800eff8 	.word	0x0800eff8

08004ee0 <sendConnectMessage>:

uint8_t sendConnectMessage() {
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b082      	sub	sp, #8
 8004ee4:	af02      	add	r7, sp, #8
    // Implement sending the CONNECT message
    // Return 1 on success, 0 on failure
	sprintf((char*)MQTT_Txbuff,"AT+CMQTTCONNECT=0,\"%s:%d\",%d,1",mySIM.mqttServer.host,mySIM.mqttServer.port,mySIM.mqttClient.keepAliveInterval);
 8004ee6:	4b0f      	ldr	r3, [pc, #60]	; (8004f24 <sendConnectMessage+0x44>)
 8004ee8:	681a      	ldr	r2, [r3, #0]
 8004eea:	4b0e      	ldr	r3, [pc, #56]	; (8004f24 <sendConnectMessage+0x44>)
 8004eec:	899b      	ldrh	r3, [r3, #12]
 8004eee:	4619      	mov	r1, r3
 8004ef0:	4b0c      	ldr	r3, [pc, #48]	; (8004f24 <sendConnectMessage+0x44>)
 8004ef2:	8a9b      	ldrh	r3, [r3, #20]
 8004ef4:	9300      	str	r3, [sp, #0]
 8004ef6:	460b      	mov	r3, r1
 8004ef8:	490b      	ldr	r1, [pc, #44]	; (8004f28 <sendConnectMessage+0x48>)
 8004efa:	480c      	ldr	r0, [pc, #48]	; (8004f2c <sendConnectMessage+0x4c>)
 8004efc:	f007 fc90 	bl	800c820 <siprintf>
	if (SIM_sendCMD(MQTT_Txbuff, (uint8_t*)"+CMQTTCONNECT: 0,0", ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, MQTT_TIMEOUT_LONG) == SIM_RES_MSG)
 8004f00:	f241 3388 	movw	r3, #5000	; 0x1388
 8004f04:	9300      	str	r3, [sp, #0]
 8004f06:	2301      	movs	r3, #1
 8004f08:	2201      	movs	r2, #1
 8004f0a:	4909      	ldr	r1, [pc, #36]	; (8004f30 <sendConnectMessage+0x50>)
 8004f0c:	4807      	ldr	r0, [pc, #28]	; (8004f2c <sendConnectMessage+0x4c>)
 8004f0e:	f7fd fc53 	bl	80027b8 <SIM_sendCMD>
 8004f12:	4603      	mov	r3, r0
 8004f14:	2b01      	cmp	r3, #1
 8004f16:	d101      	bne.n	8004f1c <sendConnectMessage+0x3c>
	{
//		Serial_log_string("Connect to broker success\r\n");
		return 1;
 8004f18:	2301      	movs	r3, #1
 8004f1a:	e000      	b.n	8004f1e <sendConnectMessage+0x3e>
	}
//	Serial_log_string("Connect to broker fail\r\n");
    return 0;
 8004f1c:	2300      	movs	r3, #0
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}
 8004f24:	20001770 	.word	0x20001770
 8004f28:	0800f014 	.word	0x0800f014
 8004f2c:	200014e8 	.word	0x200014e8
 8004f30:	0800f034 	.word	0x0800f034

08004f34 <MQTT_checkNWavailable>:


uint8_t MQTT_checkNWavailable (void)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b082      	sub	sp, #8
 8004f38:	af02      	add	r7, sp, #8
	static uint8_t count = 0;
	if ( !SIM_checkCMD(SIM_CMD_SIMCARD_PIN) ) {
 8004f3a:	2000      	movs	r0, #0
 8004f3c:	f7fd fc7a 	bl	8002834 <SIM_checkCMD>
 8004f40:	4603      	mov	r3, r0
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d124      	bne.n	8004f90 <MQTT_checkNWavailable+0x5c>
		count++;
 8004f46:	4b22      	ldr	r3, [pc, #136]	; (8004fd0 <MQTT_checkNWavailable+0x9c>)
 8004f48:	781b      	ldrb	r3, [r3, #0]
 8004f4a:	3301      	adds	r3, #1
 8004f4c:	b2da      	uxtb	r2, r3
 8004f4e:	4b20      	ldr	r3, [pc, #128]	; (8004fd0 <MQTT_checkNWavailable+0x9c>)
 8004f50:	701a      	strb	r2, [r3, #0]
		if (count == 10)	{
 8004f52:	4b1f      	ldr	r3, [pc, #124]	; (8004fd0 <MQTT_checkNWavailable+0x9c>)
 8004f54:	781b      	ldrb	r3, [r3, #0]
 8004f56:	2b0a      	cmp	r3, #10
 8004f58:	d118      	bne.n	8004f8c <MQTT_checkNWavailable+0x58>
			count = 0;
 8004f5a:	4b1d      	ldr	r3, [pc, #116]	; (8004fd0 <MQTT_checkNWavailable+0x9c>)
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	701a      	strb	r2, [r3, #0]
			LCD_Clear();
 8004f60:	f002 f900 	bl	8007164 <LCD_Clear>
			LCD_GotoXY(3,0);
 8004f64:	2100      	movs	r1, #0
 8004f66:	2003      	movs	r0, #3
 8004f68:	f002 f8bc 	bl	80070e4 <LCD_GotoXY>
			LCD_Print("NO SIM");
 8004f6c:	4819      	ldr	r0, [pc, #100]	; (8004fd4 <MQTT_checkNWavailable+0xa0>)
 8004f6e:	f002 f8e4 	bl	800713a <LCD_Print>

			SIM_sendCMD( (uint8_t*)"AT+CRESET", (uint8_t*)"OK", ENABLE_SIM_CHECKRES,
 8004f72:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8004f76:	9300      	str	r3, [sp, #0]
 8004f78:	2301      	movs	r3, #1
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	4916      	ldr	r1, [pc, #88]	; (8004fd8 <MQTT_checkNWavailable+0xa4>)
 8004f7e:	4817      	ldr	r0, [pc, #92]	; (8004fdc <MQTT_checkNWavailable+0xa8>)
 8004f80:	f7fd fc1a 	bl	80027b8 <SIM_sendCMD>
						ENABLE_MARKASREAD, SIM_TIMEOUT_LONG);
//			Serial_log_string("Reset Module\r\n");
			HAL_Delay(10000);
 8004f84:	f242 7010 	movw	r0, #10000	; 0x2710
 8004f88:	f002 fe20 	bl	8007bcc <HAL_Delay>
		}
		return 1;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	e01b      	b.n	8004fc8 <MQTT_checkNWavailable+0x94>
	}
	count = 0;
 8004f90:	4b0f      	ldr	r3, [pc, #60]	; (8004fd0 <MQTT_checkNWavailable+0x9c>)
 8004f92:	2200      	movs	r2, #0
 8004f94:	701a      	strb	r2, [r3, #0]

	if ( !SIM_checkCMD(SIM_CMD_STA_CSQ) ) {
 8004f96:	2001      	movs	r0, #1
 8004f98:	f7fd fc4c 	bl	8002834 <SIM_checkCMD>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d101      	bne.n	8004fa6 <MQTT_checkNWavailable+0x72>
		return 2;
 8004fa2:	2302      	movs	r3, #2
 8004fa4:	e010      	b.n	8004fc8 <MQTT_checkNWavailable+0x94>
	}

	if ( !SIM_checkCMD(SIM_CMD_NW_CREG) ) {
 8004fa6:	2002      	movs	r0, #2
 8004fa8:	f7fd fc44 	bl	8002834 <SIM_checkCMD>
 8004fac:	4603      	mov	r3, r0
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d101      	bne.n	8004fb6 <MQTT_checkNWavailable+0x82>
		return 3;
 8004fb2:	2303      	movs	r3, #3
 8004fb4:	e008      	b.n	8004fc8 <MQTT_checkNWavailable+0x94>
	}

	if ( !SIM_checkCMD(SIM_CMD_NW_CPSI) ) {
 8004fb6:	2003      	movs	r0, #3
 8004fb8:	f7fd fc3c 	bl	8002834 <SIM_checkCMD>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d101      	bne.n	8004fc6 <MQTT_checkNWavailable+0x92>
		return 4;
 8004fc2:	2304      	movs	r3, #4
 8004fc4:	e000      	b.n	8004fc8 <MQTT_checkNWavailable+0x94>
	}
	return 0;
 8004fc6:	2300      	movs	r3, #0
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}
 8004fce:	bf00      	nop
 8004fd0:	200016e8 	.word	0x200016e8
 8004fd4:	0800f048 	.word	0x0800f048
 8004fd8:	0800efac 	.word	0x0800efac
 8004fdc:	0800f050 	.word	0x0800f050

08004fe0 <MQTT_connect>:
uint8_t MQTT_connect()
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b082      	sub	sp, #8
 8004fe4:	af02      	add	r7, sp, #8
	if ( SIM_sendCMD((uint8_t*)"AT+CMQTTCONNECT?", (uint8_t*)mySIM.mqttServer.host, ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, MQTT_TIMEOUT_MEDIUM) == SIM_RES_MSG )	{
 8004fe6:	4b2b      	ldr	r3, [pc, #172]	; (8005094 <MQTT_connect+0xb4>)
 8004fe8:	6819      	ldr	r1, [r3, #0]
 8004fea:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8004fee:	9300      	str	r3, [sp, #0]
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	4828      	ldr	r0, [pc, #160]	; (8005098 <MQTT_connect+0xb8>)
 8004ff6:	f7fd fbdf 	bl	80027b8 <SIM_sendCMD>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	d104      	bne.n	800500a <MQTT_connect+0x2a>
		mySIM.mqttServer.connect = 1;
 8005000:	4b24      	ldr	r3, [pc, #144]	; (8005094 <MQTT_connect+0xb4>)
 8005002:	2201      	movs	r2, #1
 8005004:	739a      	strb	r2, [r3, #14]
		return 1;
 8005006:	2301      	movs	r3, #1
 8005008:	e040      	b.n	800508c <MQTT_connect+0xac>
	}
	if ( MQTT_checkNWavailable() )  return 0;
 800500a:	f7ff ff93 	bl	8004f34 <MQTT_checkNWavailable>
 800500e:	4603      	mov	r3, r0
 8005010:	2b00      	cmp	r3, #0
 8005012:	d001      	beq.n	8005018 <MQTT_connect+0x38>
 8005014:	2300      	movs	r3, #0
 8005016:	e039      	b.n	800508c <MQTT_connect+0xac>

	if ( !startMQTT() )		return 0;
 8005018:	f7ff fe7a 	bl	8004d10 <startMQTT>
 800501c:	4603      	mov	r3, r0
 800501e:	2b00      	cmp	r3, #0
 8005020:	d101      	bne.n	8005026 <MQTT_connect+0x46>
 8005022:	2300      	movs	r3, #0
 8005024:	e032      	b.n	800508c <MQTT_connect+0xac>

	if ( !acquireMQTTclient( (uint8_t*)mySIM.mqttClient.clientID) )
 8005026:	4b1b      	ldr	r3, [pc, #108]	; (8005094 <MQTT_connect+0xb4>)
 8005028:	691b      	ldr	r3, [r3, #16]
 800502a:	4618      	mov	r0, r3
 800502c:	f7ff fe92 	bl	8004d54 <acquireMQTTclient>
 8005030:	4603      	mov	r3, r0
 8005032:	2b00      	cmp	r3, #0
 8005034:	d114      	bne.n	8005060 <MQTT_connect+0x80>
	{
		if (MQTT_connected())
 8005036:	f7ff fe4d 	bl	8004cd4 <MQTT_connected>
 800503a:	4603      	mov	r3, r0
 800503c:	2b00      	cmp	r3, #0
 800503e:	d002      	beq.n	8005046 <MQTT_connect+0x66>
		{
			MQTT_disconnect();
 8005040:	f000 f830 	bl	80050a4 <MQTT_disconnect>
 8005044:	e00a      	b.n	800505c <MQTT_connect+0x7c>
		}
		else
		{
			releaseMQTTclient();
 8005046:	f7ff fea7 	bl	8004d98 <releaseMQTTclient>
			SIM_sendCMD((uint8_t*)"AT+CMQTTSTOP", (uint8_t*)"+CMQTTSTOP: 0",
 800504a:	f44f 7348 	mov.w	r3, #800	; 0x320
 800504e:	9300      	str	r3, [sp, #0]
 8005050:	2301      	movs	r3, #1
 8005052:	2201      	movs	r2, #1
 8005054:	4911      	ldr	r1, [pc, #68]	; (800509c <MQTT_connect+0xbc>)
 8005056:	4812      	ldr	r0, [pc, #72]	; (80050a0 <MQTT_connect+0xc0>)
 8005058:	f7fd fbae 	bl	80027b8 <SIM_sendCMD>
						ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, MQTT_TIMEOUT_SHORT);
		}
		return 0;
 800505c:	2300      	movs	r3, #0
 800505e:	e015      	b.n	800508c <MQTT_connect+0xac>

	}
	if ( !(configureMQTT()) )		return 0;
 8005060:	f7ff feb4 	bl	8004dcc <configureMQTT>
 8005064:	4603      	mov	r3, r0
 8005066:	2b00      	cmp	r3, #0
 8005068:	d101      	bne.n	800506e <MQTT_connect+0x8e>
 800506a:	2300      	movs	r3, #0
 800506c:	e00e      	b.n	800508c <MQTT_connect+0xac>

	if ( !sendConnectMessage() )	{
 800506e:	f7ff ff37 	bl	8004ee0 <sendConnectMessage>
 8005072:	4603      	mov	r3, r0
 8005074:	2b00      	cmp	r3, #0
 8005076:	d105      	bne.n	8005084 <MQTT_connect+0xa4>
		HAL_Delay(500);
 8005078:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800507c:	f002 fda6 	bl	8007bcc <HAL_Delay>
		return 0;
 8005080:	2300      	movs	r3, #0
 8005082:	e003      	b.n	800508c <MQTT_connect+0xac>
	}

	mySIM.mqttServer.connect = 1;
 8005084:	4b03      	ldr	r3, [pc, #12]	; (8005094 <MQTT_connect+0xb4>)
 8005086:	2201      	movs	r2, #1
 8005088:	739a      	strb	r2, [r3, #14]
	return 1;
 800508a:	2301      	movs	r3, #1

}
 800508c:	4618      	mov	r0, r3
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}
 8005092:	bf00      	nop
 8005094:	20001770 	.word	0x20001770
 8005098:	0800f05c 	.word	0x0800f05c
 800509c:	0800f070 	.word	0x0800f070
 80050a0:	0800f080 	.word	0x0800f080

080050a4 <MQTT_disconnect>:

uint8_t MQTT_disconnect ()
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b082      	sub	sp, #8
 80050a8:	af02      	add	r7, sp, #8
	if (SIM_sendCMD((uint8_t*)"AT+CMQTTDISC=0,120", (uint8_t*)"+CMQTTDISC: 0,0",
 80050aa:	f44f 7348 	mov.w	r3, #800	; 0x320
 80050ae:	9300      	str	r3, [sp, #0]
 80050b0:	2301      	movs	r3, #1
 80050b2:	2201      	movs	r2, #1
 80050b4:	4912      	ldr	r1, [pc, #72]	; (8005100 <MQTT_disconnect+0x5c>)
 80050b6:	4813      	ldr	r0, [pc, #76]	; (8005104 <MQTT_disconnect+0x60>)
 80050b8:	f7fd fb7e 	bl	80027b8 <SIM_sendCMD>
 80050bc:	4603      	mov	r3, r0
 80050be:	2b01      	cmp	r3, #1
 80050c0:	d001      	beq.n	80050c6 <MQTT_disconnect+0x22>
			ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, MQTT_TIMEOUT_SHORT) != SIM_RES_MSG )		return 0;
 80050c2:	2300      	movs	r3, #0
 80050c4:	e018      	b.n	80050f8 <MQTT_disconnect+0x54>

	if ( !releaseMQTTclient() )		return 0;
 80050c6:	f7ff fe67 	bl	8004d98 <releaseMQTTclient>
 80050ca:	4603      	mov	r3, r0
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d101      	bne.n	80050d4 <MQTT_disconnect+0x30>
 80050d0:	2300      	movs	r3, #0
 80050d2:	e011      	b.n	80050f8 <MQTT_disconnect+0x54>

	if (SIM_sendCMD((uint8_t*)"AT+CMQTTSTOP", (uint8_t*)"+CMQTTSTOP: 0",
 80050d4:	f44f 7348 	mov.w	r3, #800	; 0x320
 80050d8:	9300      	str	r3, [sp, #0]
 80050da:	2301      	movs	r3, #1
 80050dc:	2201      	movs	r2, #1
 80050de:	490a      	ldr	r1, [pc, #40]	; (8005108 <MQTT_disconnect+0x64>)
 80050e0:	480a      	ldr	r0, [pc, #40]	; (800510c <MQTT_disconnect+0x68>)
 80050e2:	f7fd fb69 	bl	80027b8 <SIM_sendCMD>
 80050e6:	4603      	mov	r3, r0
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d001      	beq.n	80050f0 <MQTT_disconnect+0x4c>
			ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, MQTT_TIMEOUT_SHORT) != SIM_RES_MSG )		return 0;
 80050ec:	2300      	movs	r3, #0
 80050ee:	e003      	b.n	80050f8 <MQTT_disconnect+0x54>

	mySIM.mqttServer.connect = 0;
 80050f0:	4b07      	ldr	r3, [pc, #28]	; (8005110 <MQTT_disconnect+0x6c>)
 80050f2:	2200      	movs	r2, #0
 80050f4:	739a      	strb	r2, [r3, #14]
	return 1;
 80050f6:	2301      	movs	r3, #1
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}
 80050fe:	bf00      	nop
 8005100:	0800ef58 	.word	0x0800ef58
 8005104:	0800f090 	.word	0x0800f090
 8005108:	0800f070 	.word	0x0800f070
 800510c:	0800f080 	.word	0x0800f080
 8005110:	20001770 	.word	0x20001770

08005114 <MQTT_publish>:
uint8_t MQTT_publish(uint8_t *topic, uint8_t *msg, uint16_t msglen)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b088      	sub	sp, #32
 8005118:	af02      	add	r7, sp, #8
 800511a:	60f8      	str	r0, [r7, #12]
 800511c:	60b9      	str	r1, [r7, #8]
 800511e:	4613      	mov	r3, r2
 8005120:	80fb      	strh	r3, [r7, #6]
	uint8_t check =0;
 8005122:	2300      	movs	r3, #0
 8005124:	75fb      	strb	r3, [r7, #23]
	uint8_t topiclen= (uint8_t) strlen((char*)topic);
 8005126:	68f8      	ldr	r0, [r7, #12]
 8005128:	f7fb f810 	bl	800014c <strlen>
 800512c:	4603      	mov	r3, r0
 800512e:	75bb      	strb	r3, [r7, #22]
	sprintf((char*)MQTT_Txbuff,"AT+CMQTTTOPIC=0,%d", topiclen);
 8005130:	7dbb      	ldrb	r3, [r7, #22]
 8005132:	461a      	mov	r2, r3
 8005134:	4931      	ldr	r1, [pc, #196]	; (80051fc <MQTT_publish+0xe8>)
 8005136:	4832      	ldr	r0, [pc, #200]	; (8005200 <MQTT_publish+0xec>)
 8005138:	f007 fb72 	bl	800c820 <siprintf>

	if (SIM_sendCMD(MQTT_Txbuff, (uint8_t*)">", ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, MQTT_TIMEOUT_SHORT)!= SIM_RES_MSG)	return 0;
 800513c:	f44f 7348 	mov.w	r3, #800	; 0x320
 8005140:	9300      	str	r3, [sp, #0]
 8005142:	2301      	movs	r3, #1
 8005144:	2201      	movs	r2, #1
 8005146:	492f      	ldr	r1, [pc, #188]	; (8005204 <MQTT_publish+0xf0>)
 8005148:	482d      	ldr	r0, [pc, #180]	; (8005200 <MQTT_publish+0xec>)
 800514a:	f7fd fb35 	bl	80027b8 <SIM_sendCMD>
 800514e:	4603      	mov	r3, r0
 8005150:	2b01      	cmp	r3, #1
 8005152:	d001      	beq.n	8005158 <MQTT_publish+0x44>
 8005154:	2300      	movs	r3, #0
 8005156:	e04d      	b.n	80051f4 <MQTT_publish+0xe0>

	HAL_UART_Transmit(&huart1, topic , topiclen, 0xFFFF);
 8005158:	7dbb      	ldrb	r3, [r7, #22]
 800515a:	b29a      	uxth	r2, r3
 800515c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005160:	68f9      	ldr	r1, [r7, #12]
 8005162:	4829      	ldr	r0, [pc, #164]	; (8005208 <MQTT_publish+0xf4>)
 8005164:	f005 fe9e 	bl	800aea4 <HAL_UART_Transmit>
	check = SIM_checkMsg((uint8_t*)"OK", MQTT_TIMEOUT_VERYSHORT);
 8005168:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800516c:	4827      	ldr	r0, [pc, #156]	; (800520c <MQTT_publish+0xf8>)
 800516e:	f7fd fa67 	bl	8002640 <SIM_checkMsg>
 8005172:	4603      	mov	r3, r0
 8005174:	75fb      	strb	r3, [r7, #23]
	MarkAsReadData_SIM();
 8005176:	f7fd fbcf 	bl	8002918 <MarkAsReadData_SIM>
	if (check != SIM_RES_MSG)	return 0;
 800517a:	7dfb      	ldrb	r3, [r7, #23]
 800517c:	2b01      	cmp	r3, #1
 800517e:	d001      	beq.n	8005184 <MQTT_publish+0x70>
 8005180:	2300      	movs	r3, #0
 8005182:	e037      	b.n	80051f4 <MQTT_publish+0xe0>
//	if (SIM_sendCMD(topic, (uint8_t*)"OK", ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, 2000) != SIM_RES_MSG)		return 0;

	sprintf((char*)MQTT_Txbuff,"AT+CMQTTPAYLOAD=0,%d",msglen);
 8005184:	88fb      	ldrh	r3, [r7, #6]
 8005186:	461a      	mov	r2, r3
 8005188:	4921      	ldr	r1, [pc, #132]	; (8005210 <MQTT_publish+0xfc>)
 800518a:	481d      	ldr	r0, [pc, #116]	; (8005200 <MQTT_publish+0xec>)
 800518c:	f007 fb48 	bl	800c820 <siprintf>

	if (SIM_sendCMD(MQTT_Txbuff, (uint8_t*)">", ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, MQTT_TIMEOUT_SHORT)!= SIM_RES_MSG)	return 0;
 8005190:	f44f 7348 	mov.w	r3, #800	; 0x320
 8005194:	9300      	str	r3, [sp, #0]
 8005196:	2301      	movs	r3, #1
 8005198:	2201      	movs	r2, #1
 800519a:	491a      	ldr	r1, [pc, #104]	; (8005204 <MQTT_publish+0xf0>)
 800519c:	4818      	ldr	r0, [pc, #96]	; (8005200 <MQTT_publish+0xec>)
 800519e:	f7fd fb0b 	bl	80027b8 <SIM_sendCMD>
 80051a2:	4603      	mov	r3, r0
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	d001      	beq.n	80051ac <MQTT_publish+0x98>
 80051a8:	2300      	movs	r3, #0
 80051aa:	e023      	b.n	80051f4 <MQTT_publish+0xe0>

	HAL_UART_Transmit(&huart1, msg, msglen, 0xFFFF);
 80051ac:	88fa      	ldrh	r2, [r7, #6]
 80051ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80051b2:	68b9      	ldr	r1, [r7, #8]
 80051b4:	4814      	ldr	r0, [pc, #80]	; (8005208 <MQTT_publish+0xf4>)
 80051b6:	f005 fe75 	bl	800aea4 <HAL_UART_Transmit>
	check = SIM_checkMsg((uint8_t*)"OK", MQTT_TIMEOUT_VERYSHORT);
 80051ba:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80051be:	4813      	ldr	r0, [pc, #76]	; (800520c <MQTT_publish+0xf8>)
 80051c0:	f7fd fa3e 	bl	8002640 <SIM_checkMsg>
 80051c4:	4603      	mov	r3, r0
 80051c6:	75fb      	strb	r3, [r7, #23]
	MarkAsReadData_SIM();
 80051c8:	f7fd fba6 	bl	8002918 <MarkAsReadData_SIM>
	if (check != SIM_RES_MSG)	return 0;
 80051cc:	7dfb      	ldrb	r3, [r7, #23]
 80051ce:	2b01      	cmp	r3, #1
 80051d0:	d001      	beq.n	80051d6 <MQTT_publish+0xc2>
 80051d2:	2300      	movs	r3, #0
 80051d4:	e00e      	b.n	80051f4 <MQTT_publish+0xe0>

	if (SIM_sendCMD((uint8_t*)"AT+CMQTTPUB=0,1,60", (uint8_t*)"+CMQTTPUB: 0,0",
 80051d6:	f44f 7348 	mov.w	r3, #800	; 0x320
 80051da:	9300      	str	r3, [sp, #0]
 80051dc:	2301      	movs	r3, #1
 80051de:	2201      	movs	r2, #1
 80051e0:	490c      	ldr	r1, [pc, #48]	; (8005214 <MQTT_publish+0x100>)
 80051e2:	480d      	ldr	r0, [pc, #52]	; (8005218 <MQTT_publish+0x104>)
 80051e4:	f7fd fae8 	bl	80027b8 <SIM_sendCMD>
 80051e8:	4603      	mov	r3, r0
 80051ea:	2b01      	cmp	r3, #1
 80051ec:	d001      	beq.n	80051f2 <MQTT_publish+0xde>
			ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, MQTT_TIMEOUT_SHORT)!= SIM_RES_MSG)	return 0;
 80051ee:	2300      	movs	r3, #0
 80051f0:	e000      	b.n	80051f4 <MQTT_publish+0xe0>

	return 1;
 80051f2:	2301      	movs	r3, #1
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	3718      	adds	r7, #24
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}
 80051fc:	0800f0a4 	.word	0x0800f0a4
 8005200:	200014e8 	.word	0x200014e8
 8005204:	0800efd8 	.word	0x0800efd8
 8005208:	20002a58 	.word	0x20002a58
 800520c:	0800efac 	.word	0x0800efac
 8005210:	0800f0b8 	.word	0x0800f0b8
 8005214:	0800f0d0 	.word	0x0800f0d0
 8005218:	0800f0e0 	.word	0x0800f0e0

0800521c <MQTT_subcribe>:
uint8_t MQTT_subcribe (uint8_t *topic)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b086      	sub	sp, #24
 8005220:	af02      	add	r7, sp, #8
 8005222:	6078      	str	r0, [r7, #4]
	uint8_t topiclen = strlen ((char*)topic);
 8005224:	6878      	ldr	r0, [r7, #4]
 8005226:	f7fa ff91 	bl	800014c <strlen>
 800522a:	4603      	mov	r3, r0
 800522c:	73fb      	strb	r3, [r7, #15]

	sprintf((char*)MQTT_Txbuff,"AT+CMQTTSUBTOPIC=0,%d,1",topiclen);
 800522e:	7bfb      	ldrb	r3, [r7, #15]
 8005230:	461a      	mov	r2, r3
 8005232:	4919      	ldr	r1, [pc, #100]	; (8005298 <MQTT_subcribe+0x7c>)
 8005234:	4819      	ldr	r0, [pc, #100]	; (800529c <MQTT_subcribe+0x80>)
 8005236:	f007 faf3 	bl	800c820 <siprintf>
	if (SIM_sendCMD(MQTT_Txbuff, (uint8_t*)">", ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, MQTT_TIMEOUT_SHORT)!= SIM_RES_MSG)	return 0;
 800523a:	f44f 7348 	mov.w	r3, #800	; 0x320
 800523e:	9300      	str	r3, [sp, #0]
 8005240:	2301      	movs	r3, #1
 8005242:	2201      	movs	r2, #1
 8005244:	4916      	ldr	r1, [pc, #88]	; (80052a0 <MQTT_subcribe+0x84>)
 8005246:	4815      	ldr	r0, [pc, #84]	; (800529c <MQTT_subcribe+0x80>)
 8005248:	f7fd fab6 	bl	80027b8 <SIM_sendCMD>
 800524c:	4603      	mov	r3, r0
 800524e:	2b01      	cmp	r3, #1
 8005250:	d001      	beq.n	8005256 <MQTT_subcribe+0x3a>
 8005252:	2300      	movs	r3, #0
 8005254:	e01c      	b.n	8005290 <MQTT_subcribe+0x74>

	if (SIM_sendCMD(topic, (uint8_t*)"OK", ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, MQTT_TIMEOUT_VERYSHORT) != SIM_RES_MSG)		return 0;
 8005256:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800525a:	9300      	str	r3, [sp, #0]
 800525c:	2301      	movs	r3, #1
 800525e:	2201      	movs	r2, #1
 8005260:	4910      	ldr	r1, [pc, #64]	; (80052a4 <MQTT_subcribe+0x88>)
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f7fd faa8 	bl	80027b8 <SIM_sendCMD>
 8005268:	4603      	mov	r3, r0
 800526a:	2b01      	cmp	r3, #1
 800526c:	d001      	beq.n	8005272 <MQTT_subcribe+0x56>
 800526e:	2300      	movs	r3, #0
 8005270:	e00e      	b.n	8005290 <MQTT_subcribe+0x74>

	if (SIM_sendCMD((uint8_t*)"AT+CMQTTSUB=0", (uint8_t*)"+CMQTTSUB: 0,0", ENABLE_SIM_CHECKRES,ENABLE_MARKASREAD, MQTT_TIMEOUT_SHORT)!= SIM_RES_MSG) 	return 0;
 8005272:	f44f 7348 	mov.w	r3, #800	; 0x320
 8005276:	9300      	str	r3, [sp, #0]
 8005278:	2301      	movs	r3, #1
 800527a:	2201      	movs	r2, #1
 800527c:	490a      	ldr	r1, [pc, #40]	; (80052a8 <MQTT_subcribe+0x8c>)
 800527e:	480b      	ldr	r0, [pc, #44]	; (80052ac <MQTT_subcribe+0x90>)
 8005280:	f7fd fa9a 	bl	80027b8 <SIM_sendCMD>
 8005284:	4603      	mov	r3, r0
 8005286:	2b01      	cmp	r3, #1
 8005288:	d001      	beq.n	800528e <MQTT_subcribe+0x72>
 800528a:	2300      	movs	r3, #0
 800528c:	e000      	b.n	8005290 <MQTT_subcribe+0x74>

	return 1;
 800528e:	2301      	movs	r3, #1
}
 8005290:	4618      	mov	r0, r3
 8005292:	3710      	adds	r7, #16
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}
 8005298:	0800f0f4 	.word	0x0800f0f4
 800529c:	200014e8 	.word	0x200014e8
 80052a0:	0800efd8 	.word	0x0800efd8
 80052a4:	0800efac 	.word	0x0800efac
 80052a8:	0800f10c 	.word	0x0800f10c
 80052ac:	0800f11c 	.word	0x0800f11c

080052b0 <checkSubcribe>:

uint8_t checkSubcribe(uint8_t *topic)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b084      	sub	sp, #16
 80052b4:	af02      	add	r7, sp, #8
 80052b6:	6078      	str	r0, [r7, #4]
	if (SIM_sendCMD((uint8_t*)"AT+CMQTTSUB?", topic,
 80052b8:	f44f 7348 	mov.w	r3, #800	; 0x320
 80052bc:	9300      	str	r3, [sp, #0]
 80052be:	2301      	movs	r3, #1
 80052c0:	2201      	movs	r2, #1
 80052c2:	6879      	ldr	r1, [r7, #4]
 80052c4:	4806      	ldr	r0, [pc, #24]	; (80052e0 <checkSubcribe+0x30>)
 80052c6:	f7fd fa77 	bl	80027b8 <SIM_sendCMD>
 80052ca:	4603      	mov	r3, r0
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	d001      	beq.n	80052d4 <checkSubcribe+0x24>
			ENABLE_SIM_CHECKRES,ENABLE_MARKASREAD, MQTT_TIMEOUT_SHORT) != SIM_RES_MSG) 	return 0;
 80052d0:	2300      	movs	r3, #0
 80052d2:	e000      	b.n	80052d6 <checkSubcribe+0x26>
	return 1;
 80052d4:	2301      	movs	r3, #1
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	3708      	adds	r7, #8
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd80      	pop	{r7, pc}
 80052de:	bf00      	nop
 80052e0:	0800f12c 	.word	0x0800f12c

080052e4 <isWordinBuff>:
#include "String_process.h"
#include <string.h>


uint8_t* isWordinBuff(uint8_t *databuff,uint16_t buff_size, uint8_t *word)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b086      	sub	sp, #24
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	60f8      	str	r0, [r7, #12]
 80052ec:	460b      	mov	r3, r1
 80052ee:	607a      	str	r2, [r7, #4]
 80052f0:	817b      	strh	r3, [r7, #10]
	uint8_t wordlen = strlen((char*)word);
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f7fa ff2a 	bl	800014c <strlen>
 80052f8:	4603      	mov	r3, r0
 80052fa:	757b      	strb	r3, [r7, #21]
	for (uint16_t i = 0; i< buff_size - wordlen + 1; i++)
 80052fc:	2300      	movs	r3, #0
 80052fe:	82fb      	strh	r3, [r7, #22]
 8005300:	e011      	b.n	8005326 <isWordinBuff+0x42>
	{
		if (!memcmp(databuff +i,word,wordlen))
 8005302:	8afb      	ldrh	r3, [r7, #22]
 8005304:	68fa      	ldr	r2, [r7, #12]
 8005306:	4413      	add	r3, r2
 8005308:	7d7a      	ldrb	r2, [r7, #21]
 800530a:	6879      	ldr	r1, [r7, #4]
 800530c:	4618      	mov	r0, r3
 800530e:	f006 ff03 	bl	800c118 <memcmp>
 8005312:	4603      	mov	r3, r0
 8005314:	2b00      	cmp	r3, #0
 8005316:	d103      	bne.n	8005320 <isWordinBuff+0x3c>
		{
			return databuff+ i;
 8005318:	8afb      	ldrh	r3, [r7, #22]
 800531a:	68fa      	ldr	r2, [r7, #12]
 800531c:	4413      	add	r3, r2
 800531e:	e009      	b.n	8005334 <isWordinBuff+0x50>
	for (uint16_t i = 0; i< buff_size - wordlen + 1; i++)
 8005320:	8afb      	ldrh	r3, [r7, #22]
 8005322:	3301      	adds	r3, #1
 8005324:	82fb      	strh	r3, [r7, #22]
 8005326:	897a      	ldrh	r2, [r7, #10]
 8005328:	7d7b      	ldrb	r3, [r7, #21]
 800532a:	1ad2      	subs	r2, r2, r3
 800532c:	8afb      	ldrh	r3, [r7, #22]
 800532e:	429a      	cmp	r2, r3
 8005330:	dae7      	bge.n	8005302 <isWordinBuff+0x1e>
		}
	}
	return NULL;
 8005332:	2300      	movs	r3, #0
}
 8005334:	4618      	mov	r0, r3
 8005336:	3718      	adds	r7, #24
 8005338:	46bd      	mov	sp, r7
 800533a:	bd80      	pop	{r7, pc}

0800533c <getBetween>:

uint16_t getBetween(uint8_t *firstWord,uint8_t *lastWord, uint8_t *buff, uint16_t size, uint8_t *getBuff)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b088      	sub	sp, #32
 8005340:	af00      	add	r7, sp, #0
 8005342:	60f8      	str	r0, [r7, #12]
 8005344:	60b9      	str	r1, [r7, #8]
 8005346:	607a      	str	r2, [r7, #4]
 8005348:	807b      	strh	r3, [r7, #2]
	uint8_t fWlen = strlen((char*)firstWord);
 800534a:	68f8      	ldr	r0, [r7, #12]
 800534c:	f7fa fefe 	bl	800014c <strlen>
 8005350:	4603      	mov	r3, r0
 8005352:	76bb      	strb	r3, [r7, #26]

	uint8_t *Fp =isWordinBuff(buff, size, firstWord);
 8005354:	887b      	ldrh	r3, [r7, #2]
 8005356:	68fa      	ldr	r2, [r7, #12]
 8005358:	4619      	mov	r1, r3
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f7ff ffc2 	bl	80052e4 <isWordinBuff>
 8005360:	61f8      	str	r0, [r7, #28]

	if (Fp == NULL ) return 0;
 8005362:	69fb      	ldr	r3, [r7, #28]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d101      	bne.n	800536c <getBetween+0x30>
 8005368:	2300      	movs	r3, #0
 800536a:	e036      	b.n	80053da <getBetween+0x9e>
	Fp += fWlen;
 800536c:	7ebb      	ldrb	r3, [r7, #26]
 800536e:	69fa      	ldr	r2, [r7, #28]
 8005370:	4413      	add	r3, r2
 8005372:	61fb      	str	r3, [r7, #28]
	uint8_t remainSize = getRemainsize(Fp, buff, size);
 8005374:	887b      	ldrh	r3, [r7, #2]
 8005376:	461a      	mov	r2, r3
 8005378:	6879      	ldr	r1, [r7, #4]
 800537a:	69f8      	ldr	r0, [r7, #28]
 800537c:	f000 f831 	bl	80053e2 <getRemainsize>
 8005380:	4603      	mov	r3, r0
 8005382:	767b      	strb	r3, [r7, #25]
	uint8_t *Lp = isWordinBuff(Fp, remainSize, lastWord);
 8005384:	7e7b      	ldrb	r3, [r7, #25]
 8005386:	b29b      	uxth	r3, r3
 8005388:	68ba      	ldr	r2, [r7, #8]
 800538a:	4619      	mov	r1, r3
 800538c:	69f8      	ldr	r0, [r7, #28]
 800538e:	f7ff ffa9 	bl	80052e4 <isWordinBuff>
 8005392:	6178      	str	r0, [r7, #20]
	if (Lp == NULL || Fp >= Lp) return 0;
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d003      	beq.n	80053a2 <getBetween+0x66>
 800539a:	69fa      	ldr	r2, [r7, #28]
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	429a      	cmp	r2, r3
 80053a0:	d301      	bcc.n	80053a6 <getBetween+0x6a>
 80053a2:	2300      	movs	r3, #0
 80053a4:	e019      	b.n	80053da <getBetween+0x9e>

	uint8_t getBuffindex =0;
 80053a6:	2300      	movs	r3, #0
 80053a8:	76fb      	strb	r3, [r7, #27]
	while (Fp != Lp)
 80053aa:	e00b      	b.n	80053c4 <getBetween+0x88>
	{
		getBuff[getBuffindex++] = *Fp;
 80053ac:	7efb      	ldrb	r3, [r7, #27]
 80053ae:	1c5a      	adds	r2, r3, #1
 80053b0:	76fa      	strb	r2, [r7, #27]
 80053b2:	461a      	mov	r2, r3
 80053b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053b6:	4413      	add	r3, r2
 80053b8:	69fa      	ldr	r2, [r7, #28]
 80053ba:	7812      	ldrb	r2, [r2, #0]
 80053bc:	701a      	strb	r2, [r3, #0]
		Fp ++;
 80053be:	69fb      	ldr	r3, [r7, #28]
 80053c0:	3301      	adds	r3, #1
 80053c2:	61fb      	str	r3, [r7, #28]
	while (Fp != Lp)
 80053c4:	69fa      	ldr	r2, [r7, #28]
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	429a      	cmp	r2, r3
 80053ca:	d1ef      	bne.n	80053ac <getBetween+0x70>
	}
	getBuff[getBuffindex]= '\0';
 80053cc:	7efb      	ldrb	r3, [r7, #27]
 80053ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053d0:	4413      	add	r3, r2
 80053d2:	2200      	movs	r2, #0
 80053d4:	701a      	strb	r2, [r3, #0]
	return getBuffindex;           // length of getBuff
 80053d6:	7efb      	ldrb	r3, [r7, #27]
 80053d8:	b29b      	uxth	r3, r3
}
 80053da:	4618      	mov	r0, r3
 80053dc:	3720      	adds	r7, #32
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}

080053e2 <getRemainsize>:

uint16_t getRemainsize(uint8_t *Remainbuff, uint8_t *Originbuff, uint16_t originSize)
{
 80053e2:	b480      	push	{r7}
 80053e4:	b085      	sub	sp, #20
 80053e6:	af00      	add	r7, sp, #0
 80053e8:	60f8      	str	r0, [r7, #12]
 80053ea:	60b9      	str	r1, [r7, #8]
 80053ec:	4613      	mov	r3, r2
 80053ee:	80fb      	strh	r3, [r7, #6]
	return originSize-(Remainbuff - Originbuff)/sizeof(uint8_t);
 80053f0:	68fa      	ldr	r2, [r7, #12]
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	1ad3      	subs	r3, r2, r3
 80053f6:	b29b      	uxth	r3, r3
 80053f8:	88fa      	ldrh	r2, [r7, #6]
 80053fa:	1ad3      	subs	r3, r2, r3
 80053fc:	b29b      	uxth	r3, r3
}
 80053fe:	4618      	mov	r0, r3
 8005400:	3714      	adds	r7, #20
 8005402:	46bd      	mov	sp, r7
 8005404:	bc80      	pop	{r7}
 8005406:	4770      	bx	lr

08005408 <twobyte2buff>:
	}
	return count;
}

void twobyte2buff(uint8_t *buffer, uint16_t number)
{
 8005408:	b480      	push	{r7}
 800540a:	b083      	sub	sp, #12
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
 8005410:	460b      	mov	r3, r1
 8005412:	807b      	strh	r3, [r7, #2]
	buffer[0] = ( number >> 8 ) & 0xFF;
 8005414:	887b      	ldrh	r3, [r7, #2]
 8005416:	0a1b      	lsrs	r3, r3, #8
 8005418:	b29b      	uxth	r3, r3
 800541a:	b2da      	uxtb	r2, r3
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	701a      	strb	r2, [r3, #0]
	buffer[1] = number & 0xFF;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	3301      	adds	r3, #1
 8005424:	887a      	ldrh	r2, [r7, #2]
 8005426:	b2d2      	uxtb	r2, r2
 8005428:	701a      	strb	r2, [r3, #0]
}
 800542a:	bf00      	nop
 800542c:	370c      	adds	r7, #12
 800542e:	46bd      	mov	sp, r7
 8005430:	bc80      	pop	{r7}
 8005432:	4770      	bx	lr

08005434 <buff2twobyte>:
uint16_t buff2twobyte (uint8_t *buff)
{
 8005434:	b480      	push	{r7}
 8005436:	b085      	sub	sp, #20
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
	uint16_t value = 0;
 800543c:	2300      	movs	r3, #0
 800543e:	81fb      	strh	r3, [r7, #14]
	value = buff[0] << 8 | buff[1];
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	781b      	ldrb	r3, [r3, #0]
 8005444:	021b      	lsls	r3, r3, #8
 8005446:	b21a      	sxth	r2, r3
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	3301      	adds	r3, #1
 800544c:	781b      	ldrb	r3, [r3, #0]
 800544e:	b21b      	sxth	r3, r3
 8005450:	4313      	orrs	r3, r2
 8005452:	b21b      	sxth	r3, r3
 8005454:	81fb      	strh	r3, [r7, #14]
	return value;
 8005456:	89fb      	ldrh	r3, [r7, #14]
}
 8005458:	4618      	mov	r0, r3
 800545a:	3714      	adds	r7, #20
 800545c:	46bd      	mov	sp, r7
 800545e:	bc80      	pop	{r7}
 8005460:	4770      	bx	lr

08005462 <FourbytenumbertoBuff>:

void FourbytenumbertoBuff(uint32_t inputNumber, uint8_t *Buff)
{
 8005462:	b480      	push	{r7}
 8005464:	b085      	sub	sp, #20
 8005466:	af00      	add	r7, sp, #0
 8005468:	6078      	str	r0, [r7, #4]
 800546a:	6039      	str	r1, [r7, #0]
    uint32_t tmp =inputNumber;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	60fb      	str	r3, [r7, #12]
	for (uint8_t i=0 ;i< 4;i++)
 8005470:	2300      	movs	r3, #0
 8005472:	72fb      	strb	r3, [r7, #11]
 8005474:	e00e      	b.n	8005494 <FourbytenumbertoBuff+0x32>
	{
		Buff[3-i] = tmp & (0xFF);
 8005476:	7afb      	ldrb	r3, [r7, #11]
 8005478:	f1c3 0303 	rsb	r3, r3, #3
 800547c:	461a      	mov	r2, r3
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	4413      	add	r3, r2
 8005482:	68fa      	ldr	r2, [r7, #12]
 8005484:	b2d2      	uxtb	r2, r2
 8005486:	701a      	strb	r2, [r3, #0]
 		tmp = tmp >>8;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	0a1b      	lsrs	r3, r3, #8
 800548c:	60fb      	str	r3, [r7, #12]
	for (uint8_t i=0 ;i< 4;i++)
 800548e:	7afb      	ldrb	r3, [r7, #11]
 8005490:	3301      	adds	r3, #1
 8005492:	72fb      	strb	r3, [r7, #11]
 8005494:	7afb      	ldrb	r3, [r7, #11]
 8005496:	2b03      	cmp	r3, #3
 8005498:	d9ed      	bls.n	8005476 <FourbytenumbertoBuff+0x14>
	}
}
 800549a:	bf00      	nop
 800549c:	bf00      	nop
 800549e:	3714      	adds	r7, #20
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bc80      	pop	{r7}
 80054a4:	4770      	bx	lr

080054a6 <buff2Fourbyte>:

uint32_t buff2Fourbyte(uint8_t *buff)
{
 80054a6:	b480      	push	{r7}
 80054a8:	b085      	sub	sp, #20
 80054aa:	af00      	add	r7, sp, #0
 80054ac:	6078      	str	r0, [r7, #4]
	uint32_t value = 0;
 80054ae:	2300      	movs	r3, #0
 80054b0:	60fb      	str	r3, [r7, #12]
	value = buff[0] << 24 | buff[1] << 16 | buff[2] << 8 | buff[3];
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	781b      	ldrb	r3, [r3, #0]
 80054b6:	061a      	lsls	r2, r3, #24
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	3301      	adds	r3, #1
 80054bc:	781b      	ldrb	r3, [r3, #0]
 80054be:	041b      	lsls	r3, r3, #16
 80054c0:	431a      	orrs	r2, r3
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	3302      	adds	r3, #2
 80054c6:	781b      	ldrb	r3, [r3, #0]
 80054c8:	021b      	lsls	r3, r3, #8
 80054ca:	4313      	orrs	r3, r2
 80054cc:	687a      	ldr	r2, [r7, #4]
 80054ce:	3203      	adds	r2, #3
 80054d0:	7812      	ldrb	r2, [r2, #0]
 80054d2:	4313      	orrs	r3, r2
 80054d4:	60fb      	str	r3, [r7, #12]
	return value;
 80054d6:	68fb      	ldr	r3, [r7, #12]
}
 80054d8:	4618      	mov	r0, r3
 80054da:	3714      	adds	r7, #20
 80054dc:	46bd      	mov	sp, r7
 80054de:	bc80      	pop	{r7}
 80054e0:	4770      	bx	lr

080054e2 <initTask>:


//static Station_t *myStation;

void initTask()
{
 80054e2:	b480      	push	{r7}
 80054e4:	af00      	add	r7, sp, #0
//	myStation = station;
}
 80054e6:	bf00      	nop
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bc80      	pop	{r7}
 80054ec:	4770      	bx	lr
	...

080054f0 <checkTaskflag>:

bool checkTaskflag (Task_t task)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b085      	sub	sp, #20
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	4603      	mov	r3, r0
 80054f8:	71fb      	strb	r3, [r7, #7]
	bool res = false;
 80054fa:	2300      	movs	r3, #0
 80054fc:	73fb      	strb	r3, [r7, #15]
	switch (task) {
 80054fe:	79fb      	ldrb	r3, [r7, #7]
 8005500:	2b11      	cmp	r3, #17
 8005502:	f200 80ed 	bhi.w	80056e0 <checkTaskflag+0x1f0>
 8005506:	a201      	add	r2, pc, #4	; (adr r2, 800550c <checkTaskflag+0x1c>)
 8005508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800550c:	08005555 	.word	0x08005555
 8005510:	0800556b 	.word	0x0800556b
 8005514:	080055ad 	.word	0x080055ad
 8005518:	080055c3 	.word	0x080055c3
 800551c:	08005581 	.word	0x08005581
 8005520:	080056cb 	.word	0x080056cb
 8005524:	08005597 	.word	0x08005597
 8005528:	080055d9 	.word	0x080055d9
 800552c:	080055ef 	.word	0x080055ef
 8005530:	0800561b 	.word	0x0800561b
 8005534:	08005605 	.word	0x08005605
 8005538:	08005631 	.word	0x08005631
 800553c:	08005647 	.word	0x08005647
 8005540:	0800565d 	.word	0x0800565d
 8005544:	08005673 	.word	0x08005673
 8005548:	08005689 	.word	0x08005689
 800554c:	0800569f 	.word	0x0800569f
 8005550:	080056b5 	.word	0x080056b5
	case TASK_REGISTER:
		res = (bool)myStation.task.register2server ;
 8005554:	4b66      	ldr	r3, [pc, #408]	; (80056f0 <checkTaskflag+0x200>)
 8005556:	7c1b      	ldrb	r3, [r3, #16]
 8005558:	f003 0301 	and.w	r3, r3, #1
 800555c:	b2db      	uxtb	r3, r3
 800555e:	2b00      	cmp	r3, #0
 8005560:	bf14      	ite	ne
 8005562:	2301      	movne	r3, #1
 8005564:	2300      	moveq	r3, #0
 8005566:	73fb      	strb	r3, [r7, #15]
		break;
 8005568:	e0bb      	b.n	80056e2 <checkTaskflag+0x1f2>
	case TASK_SUBSCRIBE:
		res = (bool)myStation.task.subscribe;
 800556a:	4b61      	ldr	r3, [pc, #388]	; (80056f0 <checkTaskflag+0x200>)
 800556c:	7c1b      	ldrb	r3, [r3, #16]
 800556e:	f003 0302 	and.w	r3, r3, #2
 8005572:	b2db      	uxtb	r3, r3
 8005574:	2b00      	cmp	r3, #0
 8005576:	bf14      	ite	ne
 8005578:	2301      	movne	r3, #1
 800557a:	2300      	moveq	r3, #0
 800557c:	73fb      	strb	r3, [r7, #15]
		break;
 800557e:	e0b0      	b.n	80056e2 <checkTaskflag+0x1f2>
	case TASK_SEND_MBA_STATUS:
		res = (bool)myStation.task.sendMBAstatus;
 8005580:	4b5b      	ldr	r3, [pc, #364]	; (80056f0 <checkTaskflag+0x200>)
 8005582:	7c1b      	ldrb	r3, [r3, #16]
 8005584:	f003 0310 	and.w	r3, r3, #16
 8005588:	b2db      	uxtb	r3, r3
 800558a:	2b00      	cmp	r3, #0
 800558c:	bf14      	ite	ne
 800558e:	2301      	movne	r3, #1
 8005590:	2300      	moveq	r3, #0
 8005592:	73fb      	strb	r3, [r7, #15]
		break;
 8005594:	e0a5      	b.n	80056e2 <checkTaskflag+0x1f2>
	case TASK_CTRL_STEPMOR:
		res = (bool)myStation.task.CtrlStepmotor;
 8005596:	4b56      	ldr	r3, [pc, #344]	; (80056f0 <checkTaskflag+0x200>)
 8005598:	7c1b      	ldrb	r3, [r3, #16]
 800559a:	f003 0320 	and.w	r3, r3, #32
 800559e:	b2db      	uxtb	r3, r3
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	bf14      	ite	ne
 80055a4:	2301      	movne	r3, #1
 80055a6:	2300      	moveq	r3, #0
 80055a8:	73fb      	strb	r3, [r7, #15]
		break;
 80055aa:	e09a      	b.n	80056e2 <checkTaskflag+0x1f2>
	case TASK_PREPARE_CALIB:
		res = (bool)myStation.task.PrepareCalib;
 80055ac:	4b50      	ldr	r3, [pc, #320]	; (80056f0 <checkTaskflag+0x200>)
 80055ae:	7c1b      	ldrb	r3, [r3, #16]
 80055b0:	f003 0304 	and.w	r3, r3, #4
 80055b4:	b2db      	uxtb	r3, r3
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	bf14      	ite	ne
 80055ba:	2301      	movne	r3, #1
 80055bc:	2300      	moveq	r3, #0
 80055be:	73fb      	strb	r3, [r7, #15]
		break;
 80055c0:	e08f      	b.n	80056e2 <checkTaskflag+0x1f2>
	case TASK_START_CALIB:
		res = (bool)myStation.task.StartCalib;
 80055c2:	4b4b      	ldr	r3, [pc, #300]	; (80056f0 <checkTaskflag+0x200>)
 80055c4:	7c1b      	ldrb	r3, [r3, #16]
 80055c6:	f003 0308 	and.w	r3, r3, #8
 80055ca:	b2db      	uxtb	r3, r3
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	bf14      	ite	ne
 80055d0:	2301      	movne	r3, #1
 80055d2:	2300      	moveq	r3, #0
 80055d4:	73fb      	strb	r3, [r7, #15]
		break;
 80055d6:	e084      	b.n	80056e2 <checkTaskflag+0x1f2>
	case TASK_GET_GPS_TIME:
		res = (bool)myStation.task.getGPStimeflag;
 80055d8:	4b45      	ldr	r3, [pc, #276]	; (80056f0 <checkTaskflag+0x200>)
 80055da:	7c1b      	ldrb	r3, [r3, #16]
 80055dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055e0:	b2db      	uxtb	r3, r3
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	bf14      	ite	ne
 80055e6:	2301      	movne	r3, #1
 80055e8:	2300      	moveq	r3, #0
 80055ea:	73fb      	strb	r3, [r7, #15]
		break;
 80055ec:	e079      	b.n	80056e2 <checkTaskflag+0x1f2>
	case TASK_SEND_NWREADY:
		res = (bool)myStation.task.sendNWready;
 80055ee:	4b40      	ldr	r3, [pc, #256]	; (80056f0 <checkTaskflag+0x200>)
 80055f0:	7c5b      	ldrb	r3, [r3, #17]
 80055f2:	f003 0301 	and.w	r3, r3, #1
 80055f6:	b2db      	uxtb	r3, r3
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	bf14      	ite	ne
 80055fc:	2301      	movne	r3, #1
 80055fe:	2300      	moveq	r3, #0
 8005600:	73fb      	strb	r3, [r7, #15]
		break;
 8005602:	e06e      	b.n	80056e2 <checkTaskflag+0x1f2>
	case TASK_SEND_DATACALIB:
		res = (bool)myStation.task.sendDATACALIB;
 8005604:	4b3a      	ldr	r3, [pc, #232]	; (80056f0 <checkTaskflag+0x200>)
 8005606:	7c5b      	ldrb	r3, [r3, #17]
 8005608:	f003 0302 	and.w	r3, r3, #2
 800560c:	b2db      	uxtb	r3, r3
 800560e:	2b00      	cmp	r3, #0
 8005610:	bf14      	ite	ne
 8005612:	2301      	movne	r3, #1
 8005614:	2300      	moveq	r3, #0
 8005616:	73fb      	strb	r3, [r7, #15]
		break;
 8005618:	e063      	b.n	80056e2 <checkTaskflag+0x1f2>
	case TASK_SEND_DATAPERIOD:
		res = (bool)myStation.task.sendDataPeriod;
 800561a:	4b35      	ldr	r3, [pc, #212]	; (80056f0 <checkTaskflag+0x200>)
 800561c:	7c1b      	ldrb	r3, [r3, #16]
 800561e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005622:	b2db      	uxtb	r3, r3
 8005624:	2b00      	cmp	r3, #0
 8005626:	bf14      	ite	ne
 8005628:	2301      	movne	r3, #1
 800562a:	2300      	moveq	r3, #0
 800562c:	73fb      	strb	r3, [r7, #15]
		break;
 800562e:	e058      	b.n	80056e2 <checkTaskflag+0x1f2>
	case TASK_SEND_DATAAFTERCALIB:
		res = (bool)myStation.task.sendDATAafterCALIB;
 8005630:	4b2f      	ldr	r3, [pc, #188]	; (80056f0 <checkTaskflag+0x200>)
 8005632:	7c5b      	ldrb	r3, [r3, #17]
 8005634:	f003 0304 	and.w	r3, r3, #4
 8005638:	b2db      	uxtb	r3, r3
 800563a:	2b00      	cmp	r3, #0
 800563c:	bf14      	ite	ne
 800563e:	2301      	movne	r3, #1
 8005640:	2300      	moveq	r3, #0
 8005642:	73fb      	strb	r3, [r7, #15]
		break;
 8005644:	e04d      	b.n	80056e2 <checkTaskflag+0x1f2>
	case TASK_SEND_CTRLMBA:
		res = (bool)myStation.task.sendcmdCtrlMBA;
 8005646:	4b2a      	ldr	r3, [pc, #168]	; (80056f0 <checkTaskflag+0x200>)
 8005648:	7c5b      	ldrb	r3, [r3, #17]
 800564a:	f003 0308 	and.w	r3, r3, #8
 800564e:	b2db      	uxtb	r3, r3
 8005650:	2b00      	cmp	r3, #0
 8005652:	bf14      	ite	ne
 8005654:	2301      	movne	r3, #1
 8005656:	2300      	moveq	r3, #0
 8005658:	73fb      	strb	r3, [r7, #15]
		break;
 800565a:	e042      	b.n	80056e2 <checkTaskflag+0x1f2>
	case TASK_SEND_CTRLSTEPMOR:
		res = (bool)myStation.task.sendcmdCtrlStepmotor;
 800565c:	4b24      	ldr	r3, [pc, #144]	; (80056f0 <checkTaskflag+0x200>)
 800565e:	7c5b      	ldrb	r3, [r3, #17]
 8005660:	f003 0310 	and.w	r3, r3, #16
 8005664:	b2db      	uxtb	r3, r3
 8005666:	2b00      	cmp	r3, #0
 8005668:	bf14      	ite	ne
 800566a:	2301      	movne	r3, #1
 800566c:	2300      	moveq	r3, #0
 800566e:	73fb      	strb	r3, [r7, #15]
		break;
 8005670:	e037      	b.n	80056e2 <checkTaskflag+0x1f2>
	case TASK_SEND_CALIB:
		res = (bool)myStation.task.sendcmdCalib;
 8005672:	4b1f      	ldr	r3, [pc, #124]	; (80056f0 <checkTaskflag+0x200>)
 8005674:	7c5b      	ldrb	r3, [r3, #17]
 8005676:	f003 0320 	and.w	r3, r3, #32
 800567a:	b2db      	uxtb	r3, r3
 800567c:	2b00      	cmp	r3, #0
 800567e:	bf14      	ite	ne
 8005680:	2301      	movne	r3, #1
 8005682:	2300      	moveq	r3, #0
 8005684:	73fb      	strb	r3, [r7, #15]
		break;
 8005686:	e02c      	b.n	80056e2 <checkTaskflag+0x1f2>
	case TASK_SEND_GETSTATUS:
		res = (bool)myStation.task.sendcmdGetstatus;
 8005688:	4b19      	ldr	r3, [pc, #100]	; (80056f0 <checkTaskflag+0x200>)
 800568a:	7c5b      	ldrb	r3, [r3, #17]
 800568c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005690:	b2db      	uxtb	r3, r3
 8005692:	2b00      	cmp	r3, #0
 8005694:	bf14      	ite	ne
 8005696:	2301      	movne	r3, #1
 8005698:	2300      	moveq	r3, #0
 800569a:	73fb      	strb	r3, [r7, #15]
		break;
 800569c:	e021      	b.n	80056e2 <checkTaskflag+0x1f2>
	case TASK_SEND_GETSTATION:
		res = (bool)myStation.task.sendcmdGetstation;
 800569e:	4b14      	ldr	r3, [pc, #80]	; (80056f0 <checkTaskflag+0x200>)
 80056a0:	7c5b      	ldrb	r3, [r3, #17]
 80056a2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80056a6:	b2db      	uxtb	r3, r3
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	bf14      	ite	ne
 80056ac:	2301      	movne	r3, #1
 80056ae:	2300      	moveq	r3, #0
 80056b0:	73fb      	strb	r3, [r7, #15]
		break;
 80056b2:	e016      	b.n	80056e2 <checkTaskflag+0x1f2>
	case TASK_SEND_GETSENSOR:
		res = (bool)myStation.task.sendcmdGetsensor;
 80056b4:	4b0e      	ldr	r3, [pc, #56]	; (80056f0 <checkTaskflag+0x200>)
 80056b6:	7c9b      	ldrb	r3, [r3, #18]
 80056b8:	f003 0301 	and.w	r3, r3, #1
 80056bc:	b2db      	uxtb	r3, r3
 80056be:	2b00      	cmp	r3, #0
 80056c0:	bf14      	ite	ne
 80056c2:	2301      	movne	r3, #1
 80056c4:	2300      	moveq	r3, #0
 80056c6:	73fb      	strb	r3, [r7, #15]
		break;
 80056c8:	e00b      	b.n	80056e2 <checkTaskflag+0x1f2>
	case TASK_SEND_STEP_LIMIT:
		res = (bool)myStation.task.sendSTEPLIMIT;
 80056ca:	4b09      	ldr	r3, [pc, #36]	; (80056f0 <checkTaskflag+0x200>)
 80056cc:	7c9b      	ldrb	r3, [r3, #18]
 80056ce:	f003 0302 	and.w	r3, r3, #2
 80056d2:	b2db      	uxtb	r3, r3
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	bf14      	ite	ne
 80056d8:	2301      	movne	r3, #1
 80056da:	2300      	moveq	r3, #0
 80056dc:	73fb      	strb	r3, [r7, #15]
		break;
 80056de:	e000      	b.n	80056e2 <checkTaskflag+0x1f2>
	default:
		break;
 80056e0:	bf00      	nop
	}
	return res;
 80056e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80056e4:	4618      	mov	r0, r3
 80056e6:	3714      	adds	r7, #20
 80056e8:	46bd      	mov	sp, r7
 80056ea:	bc80      	pop	{r7}
 80056ec:	4770      	bx	lr
 80056ee:	bf00      	nop
 80056f0:	20000474 	.word	0x20000474

080056f4 <triggerTaskflag>:



void triggerTaskflag (Task_t task, Flag_t ENorDIS)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b083      	sub	sp, #12
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	4603      	mov	r3, r0
 80056fc:	460a      	mov	r2, r1
 80056fe:	71fb      	strb	r3, [r7, #7]
 8005700:	4613      	mov	r3, r2
 8005702:	71bb      	strb	r3, [r7, #6]
	switch (task) {
 8005704:	79fb      	ldrb	r3, [r7, #7]
 8005706:	2b11      	cmp	r3, #17
 8005708:	f200 80db 	bhi.w	80058c2 <triggerTaskflag+0x1ce>
 800570c:	a201      	add	r2, pc, #4	; (adr r2, 8005714 <triggerTaskflag+0x20>)
 800570e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005712:	bf00      	nop
 8005714:	0800575d 	.word	0x0800575d
 8005718:	08005771 	.word	0x08005771
 800571c:	080057ad 	.word	0x080057ad
 8005720:	080057c1 	.word	0x080057c1
 8005724:	08005785 	.word	0x08005785
 8005728:	080058b1 	.word	0x080058b1
 800572c:	08005799 	.word	0x08005799
 8005730:	080057d5 	.word	0x080057d5
 8005734:	080057e9 	.word	0x080057e9
 8005738:	08005811 	.word	0x08005811
 800573c:	080057fd 	.word	0x080057fd
 8005740:	08005825 	.word	0x08005825
 8005744:	08005839 	.word	0x08005839
 8005748:	0800584d 	.word	0x0800584d
 800574c:	08005861 	.word	0x08005861
 8005750:	08005875 	.word	0x08005875
 8005754:	08005889 	.word	0x08005889
 8005758:	0800589d 	.word	0x0800589d
	case TASK_REGISTER:
		myStation.task.register2server = ENorDIS;
 800575c:	79bb      	ldrb	r3, [r7, #6]
 800575e:	f003 0301 	and.w	r3, r3, #1
 8005762:	b2d9      	uxtb	r1, r3
 8005764:	4a5a      	ldr	r2, [pc, #360]	; (80058d0 <triggerTaskflag+0x1dc>)
 8005766:	7c13      	ldrb	r3, [r2, #16]
 8005768:	f361 0300 	bfi	r3, r1, #0, #1
 800576c:	7413      	strb	r3, [r2, #16]
		break;
 800576e:	e0a9      	b.n	80058c4 <triggerTaskflag+0x1d0>
	case TASK_SUBSCRIBE:
		myStation.task.subscribe = ENorDIS;
 8005770:	79bb      	ldrb	r3, [r7, #6]
 8005772:	f003 0301 	and.w	r3, r3, #1
 8005776:	b2d9      	uxtb	r1, r3
 8005778:	4a55      	ldr	r2, [pc, #340]	; (80058d0 <triggerTaskflag+0x1dc>)
 800577a:	7c13      	ldrb	r3, [r2, #16]
 800577c:	f361 0341 	bfi	r3, r1, #1, #1
 8005780:	7413      	strb	r3, [r2, #16]
		break;
 8005782:	e09f      	b.n	80058c4 <triggerTaskflag+0x1d0>
	case TASK_SEND_MBA_STATUS:
		myStation.task.sendMBAstatus = ENorDIS;
 8005784:	79bb      	ldrb	r3, [r7, #6]
 8005786:	f003 0301 	and.w	r3, r3, #1
 800578a:	b2d9      	uxtb	r1, r3
 800578c:	4a50      	ldr	r2, [pc, #320]	; (80058d0 <triggerTaskflag+0x1dc>)
 800578e:	7c13      	ldrb	r3, [r2, #16]
 8005790:	f361 1304 	bfi	r3, r1, #4, #1
 8005794:	7413      	strb	r3, [r2, #16]
		break;
 8005796:	e095      	b.n	80058c4 <triggerTaskflag+0x1d0>
	case TASK_CTRL_STEPMOR:
		myStation.task.CtrlStepmotor = ENorDIS;
 8005798:	79bb      	ldrb	r3, [r7, #6]
 800579a:	f003 0301 	and.w	r3, r3, #1
 800579e:	b2d9      	uxtb	r1, r3
 80057a0:	4a4b      	ldr	r2, [pc, #300]	; (80058d0 <triggerTaskflag+0x1dc>)
 80057a2:	7c13      	ldrb	r3, [r2, #16]
 80057a4:	f361 1345 	bfi	r3, r1, #5, #1
 80057a8:	7413      	strb	r3, [r2, #16]
		break;
 80057aa:	e08b      	b.n	80058c4 <triggerTaskflag+0x1d0>
	case TASK_PREPARE_CALIB:
		myStation.task.PrepareCalib = ENorDIS;
 80057ac:	79bb      	ldrb	r3, [r7, #6]
 80057ae:	f003 0301 	and.w	r3, r3, #1
 80057b2:	b2d9      	uxtb	r1, r3
 80057b4:	4a46      	ldr	r2, [pc, #280]	; (80058d0 <triggerTaskflag+0x1dc>)
 80057b6:	7c13      	ldrb	r3, [r2, #16]
 80057b8:	f361 0382 	bfi	r3, r1, #2, #1
 80057bc:	7413      	strb	r3, [r2, #16]
		break;
 80057be:	e081      	b.n	80058c4 <triggerTaskflag+0x1d0>
	case TASK_START_CALIB:
		myStation.task.StartCalib = ENorDIS;
 80057c0:	79bb      	ldrb	r3, [r7, #6]
 80057c2:	f003 0301 	and.w	r3, r3, #1
 80057c6:	b2d9      	uxtb	r1, r3
 80057c8:	4a41      	ldr	r2, [pc, #260]	; (80058d0 <triggerTaskflag+0x1dc>)
 80057ca:	7c13      	ldrb	r3, [r2, #16]
 80057cc:	f361 03c3 	bfi	r3, r1, #3, #1
 80057d0:	7413      	strb	r3, [r2, #16]
		break;
 80057d2:	e077      	b.n	80058c4 <triggerTaskflag+0x1d0>
	case TASK_GET_GPS_TIME:
		myStation.task.getGPStimeflag = ENorDIS;
 80057d4:	79bb      	ldrb	r3, [r7, #6]
 80057d6:	f003 0301 	and.w	r3, r3, #1
 80057da:	b2d9      	uxtb	r1, r3
 80057dc:	4a3c      	ldr	r2, [pc, #240]	; (80058d0 <triggerTaskflag+0x1dc>)
 80057de:	7c13      	ldrb	r3, [r2, #16]
 80057e0:	f361 1386 	bfi	r3, r1, #6, #1
 80057e4:	7413      	strb	r3, [r2, #16]
		break;
 80057e6:	e06d      	b.n	80058c4 <triggerTaskflag+0x1d0>
	case TASK_SEND_NWREADY:
		myStation.task.sendNWready = ENorDIS;
 80057e8:	79bb      	ldrb	r3, [r7, #6]
 80057ea:	f003 0301 	and.w	r3, r3, #1
 80057ee:	b2d9      	uxtb	r1, r3
 80057f0:	4a37      	ldr	r2, [pc, #220]	; (80058d0 <triggerTaskflag+0x1dc>)
 80057f2:	7c53      	ldrb	r3, [r2, #17]
 80057f4:	f361 0300 	bfi	r3, r1, #0, #1
 80057f8:	7453      	strb	r3, [r2, #17]
		break;
 80057fa:	e063      	b.n	80058c4 <triggerTaskflag+0x1d0>
	case TASK_SEND_DATACALIB:
		myStation.task.sendDATACALIB = ENorDIS;
 80057fc:	79bb      	ldrb	r3, [r7, #6]
 80057fe:	f003 0301 	and.w	r3, r3, #1
 8005802:	b2d9      	uxtb	r1, r3
 8005804:	4a32      	ldr	r2, [pc, #200]	; (80058d0 <triggerTaskflag+0x1dc>)
 8005806:	7c53      	ldrb	r3, [r2, #17]
 8005808:	f361 0341 	bfi	r3, r1, #1, #1
 800580c:	7453      	strb	r3, [r2, #17]
		break;
 800580e:	e059      	b.n	80058c4 <triggerTaskflag+0x1d0>
	case TASK_SEND_DATAPERIOD:
		myStation.task.sendDataPeriod = ENorDIS;
 8005810:	79bb      	ldrb	r3, [r7, #6]
 8005812:	f003 0301 	and.w	r3, r3, #1
 8005816:	b2d9      	uxtb	r1, r3
 8005818:	4a2d      	ldr	r2, [pc, #180]	; (80058d0 <triggerTaskflag+0x1dc>)
 800581a:	7c13      	ldrb	r3, [r2, #16]
 800581c:	f361 13c7 	bfi	r3, r1, #7, #1
 8005820:	7413      	strb	r3, [r2, #16]
		break;
 8005822:	e04f      	b.n	80058c4 <triggerTaskflag+0x1d0>
	case TASK_SEND_DATAAFTERCALIB:
		myStation.task.sendDATAafterCALIB = ENorDIS;
 8005824:	79bb      	ldrb	r3, [r7, #6]
 8005826:	f003 0301 	and.w	r3, r3, #1
 800582a:	b2d9      	uxtb	r1, r3
 800582c:	4a28      	ldr	r2, [pc, #160]	; (80058d0 <triggerTaskflag+0x1dc>)
 800582e:	7c53      	ldrb	r3, [r2, #17]
 8005830:	f361 0382 	bfi	r3, r1, #2, #1
 8005834:	7453      	strb	r3, [r2, #17]
		break;
 8005836:	e045      	b.n	80058c4 <triggerTaskflag+0x1d0>
	case TASK_SEND_CTRLMBA:
		myStation.task.sendcmdCtrlMBA = ENorDIS;
 8005838:	79bb      	ldrb	r3, [r7, #6]
 800583a:	f003 0301 	and.w	r3, r3, #1
 800583e:	b2d9      	uxtb	r1, r3
 8005840:	4a23      	ldr	r2, [pc, #140]	; (80058d0 <triggerTaskflag+0x1dc>)
 8005842:	7c53      	ldrb	r3, [r2, #17]
 8005844:	f361 03c3 	bfi	r3, r1, #3, #1
 8005848:	7453      	strb	r3, [r2, #17]
		break;
 800584a:	e03b      	b.n	80058c4 <triggerTaskflag+0x1d0>
	case TASK_SEND_CTRLSTEPMOR:
		myStation.task.sendcmdCtrlStepmotor = ENorDIS;
 800584c:	79bb      	ldrb	r3, [r7, #6]
 800584e:	f003 0301 	and.w	r3, r3, #1
 8005852:	b2d9      	uxtb	r1, r3
 8005854:	4a1e      	ldr	r2, [pc, #120]	; (80058d0 <triggerTaskflag+0x1dc>)
 8005856:	7c53      	ldrb	r3, [r2, #17]
 8005858:	f361 1304 	bfi	r3, r1, #4, #1
 800585c:	7453      	strb	r3, [r2, #17]
		break;
 800585e:	e031      	b.n	80058c4 <triggerTaskflag+0x1d0>
	case TASK_SEND_CALIB:
		myStation.task.sendcmdCalib = ENorDIS;
 8005860:	79bb      	ldrb	r3, [r7, #6]
 8005862:	f003 0301 	and.w	r3, r3, #1
 8005866:	b2d9      	uxtb	r1, r3
 8005868:	4a19      	ldr	r2, [pc, #100]	; (80058d0 <triggerTaskflag+0x1dc>)
 800586a:	7c53      	ldrb	r3, [r2, #17]
 800586c:	f361 1345 	bfi	r3, r1, #5, #1
 8005870:	7453      	strb	r3, [r2, #17]
		break;
 8005872:	e027      	b.n	80058c4 <triggerTaskflag+0x1d0>
	case TASK_SEND_GETSTATUS:
		myStation.task.sendcmdGetstatus = ENorDIS;
 8005874:	79bb      	ldrb	r3, [r7, #6]
 8005876:	f003 0301 	and.w	r3, r3, #1
 800587a:	b2d9      	uxtb	r1, r3
 800587c:	4a14      	ldr	r2, [pc, #80]	; (80058d0 <triggerTaskflag+0x1dc>)
 800587e:	7c53      	ldrb	r3, [r2, #17]
 8005880:	f361 1386 	bfi	r3, r1, #6, #1
 8005884:	7453      	strb	r3, [r2, #17]
		break;
 8005886:	e01d      	b.n	80058c4 <triggerTaskflag+0x1d0>
	case TASK_SEND_GETSTATION:
		myStation.task.sendcmdGetstation = ENorDIS;
 8005888:	79bb      	ldrb	r3, [r7, #6]
 800588a:	f003 0301 	and.w	r3, r3, #1
 800588e:	b2d9      	uxtb	r1, r3
 8005890:	4a0f      	ldr	r2, [pc, #60]	; (80058d0 <triggerTaskflag+0x1dc>)
 8005892:	7c53      	ldrb	r3, [r2, #17]
 8005894:	f361 13c7 	bfi	r3, r1, #7, #1
 8005898:	7453      	strb	r3, [r2, #17]
		break;
 800589a:	e013      	b.n	80058c4 <triggerTaskflag+0x1d0>
	case TASK_SEND_GETSENSOR:
		myStation.task.sendcmdGetsensor = ENorDIS;
 800589c:	79bb      	ldrb	r3, [r7, #6]
 800589e:	f003 0301 	and.w	r3, r3, #1
 80058a2:	b2d9      	uxtb	r1, r3
 80058a4:	4a0a      	ldr	r2, [pc, #40]	; (80058d0 <triggerTaskflag+0x1dc>)
 80058a6:	7c93      	ldrb	r3, [r2, #18]
 80058a8:	f361 0300 	bfi	r3, r1, #0, #1
 80058ac:	7493      	strb	r3, [r2, #18]
		break;
 80058ae:	e009      	b.n	80058c4 <triggerTaskflag+0x1d0>
	case TASK_SEND_STEP_LIMIT:
		myStation.task.sendSTEPLIMIT = ENorDIS;
 80058b0:	79bb      	ldrb	r3, [r7, #6]
 80058b2:	f003 0301 	and.w	r3, r3, #1
 80058b6:	b2d9      	uxtb	r1, r3
 80058b8:	4a05      	ldr	r2, [pc, #20]	; (80058d0 <triggerTaskflag+0x1dc>)
 80058ba:	7c93      	ldrb	r3, [r2, #18]
 80058bc:	f361 0341 	bfi	r3, r1, #1, #1
 80058c0:	7493      	strb	r3, [r2, #18]
	default:
		break;
 80058c2:	bf00      	nop
	}
	return ;
 80058c4:	bf00      	nop
}
 80058c6:	370c      	adds	r7, #12
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bc80      	pop	{r7}
 80058cc:	4770      	bx	lr
 80058ce:	bf00      	nop
 80058d0:	20000474 	.word	0x20000474

080058d4 <validationID>:

#define MAX_SENSOR_ID		0xFE
#define MIN_SENSOR_ID		0x51

bool validationID(uint16_t ID, ID_t idtype)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b084      	sub	sp, #16
 80058d8:	af00      	add	r7, sp, #0
 80058da:	4603      	mov	r3, r0
 80058dc:	460a      	mov	r2, r1
 80058de:	80fb      	strh	r3, [r7, #6]
 80058e0:	4613      	mov	r3, r2
 80058e2:	717b      	strb	r3, [r7, #5]
	bool res = false;
 80058e4:	2300      	movs	r3, #0
 80058e6:	73fb      	strb	r3, [r7, #15]
	switch (idtype)	{
 80058e8:	797b      	ldrb	r3, [r7, #5]
 80058ea:	2b01      	cmp	r3, #1
 80058ec:	d009      	beq.n	8005902 <validationID+0x2e>
 80058ee:	2b02      	cmp	r3, #2
 80058f0:	d10f      	bne.n	8005912 <validationID+0x3e>
	case ID_SENSOR:
		res = sensorID_validation(ID);
 80058f2:	88fb      	ldrh	r3, [r7, #6]
 80058f4:	b2db      	uxtb	r3, r3
 80058f6:	4618      	mov	r0, r3
 80058f8:	f000 f824 	bl	8005944 <sensorID_validation>
 80058fc:	4603      	mov	r3, r0
 80058fe:	73fb      	strb	r3, [r7, #15]
		break;
 8005900:	e008      	b.n	8005914 <validationID+0x40>
	case ID_STATION:
		res = stationID_validation(ID);
 8005902:	88fb      	ldrh	r3, [r7, #6]
 8005904:	b2db      	uxtb	r3, r3
 8005906:	4618      	mov	r0, r3
 8005908:	f000 f809 	bl	800591e <stationID_validation>
 800590c:	4603      	mov	r3, r0
 800590e:	73fb      	strb	r3, [r7, #15]
		break;
 8005910:	e000      	b.n	8005914 <validationID+0x40>
	default:
		break;
 8005912:	bf00      	nop
	}
	return res;
 8005914:	7bfb      	ldrb	r3, [r7, #15]
}
 8005916:	4618      	mov	r0, r3
 8005918:	3710      	adds	r7, #16
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}

0800591e <stationID_validation>:

bool stationID_validation(uint8_t ID)
{
 800591e:	b480      	push	{r7}
 8005920:	b083      	sub	sp, #12
 8005922:	af00      	add	r7, sp, #0
 8005924:	4603      	mov	r3, r0
 8005926:	71fb      	strb	r3, [r7, #7]
	if (ID >= MIN_STATION_ID && ID <= MAX_STATION_ID)	return true;
 8005928:	79fb      	ldrb	r3, [r7, #7]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d004      	beq.n	8005938 <stationID_validation+0x1a>
 800592e:	79fb      	ldrb	r3, [r7, #7]
 8005930:	2b50      	cmp	r3, #80	; 0x50
 8005932:	d801      	bhi.n	8005938 <stationID_validation+0x1a>
 8005934:	2301      	movs	r3, #1
 8005936:	e000      	b.n	800593a <stationID_validation+0x1c>
	return false;
 8005938:	2300      	movs	r3, #0
}
 800593a:	4618      	mov	r0, r3
 800593c:	370c      	adds	r7, #12
 800593e:	46bd      	mov	sp, r7
 8005940:	bc80      	pop	{r7}
 8005942:	4770      	bx	lr

08005944 <sensorID_validation>:

bool sensorID_validation(uint8_t ID)
{
 8005944:	b480      	push	{r7}
 8005946:	b083      	sub	sp, #12
 8005948:	af00      	add	r7, sp, #0
 800594a:	4603      	mov	r3, r0
 800594c:	71fb      	strb	r3, [r7, #7]
	if (ID >= MIN_SENSOR_ID && ID <= MAX_SENSOR_ID)	return true;
 800594e:	79fb      	ldrb	r3, [r7, #7]
 8005950:	2b50      	cmp	r3, #80	; 0x50
 8005952:	d904      	bls.n	800595e <sensorID_validation+0x1a>
 8005954:	79fb      	ldrb	r3, [r7, #7]
 8005956:	2bff      	cmp	r3, #255	; 0xff
 8005958:	d001      	beq.n	800595e <sensorID_validation+0x1a>
 800595a:	2301      	movs	r3, #1
 800595c:	e000      	b.n	8005960 <sensorID_validation+0x1c>
	return false;
 800595e:	2300      	movs	r3, #0
}
 8005960:	4618      	mov	r0, r3
 8005962:	370c      	adds	r7, #12
 8005964:	46bd      	mov	sp, r7
 8005966:	bc80      	pop	{r7}
 8005968:	4770      	bx	lr
	...

0800596c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b084      	sub	sp, #16
 8005970:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8005972:	1d3b      	adds	r3, r7, #4
 8005974:	2200      	movs	r2, #0
 8005976:	601a      	str	r2, [r3, #0]
 8005978:	605a      	str	r2, [r3, #4]
 800597a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800597c:	4b18      	ldr	r3, [pc, #96]	; (80059e0 <MX_ADC1_Init+0x74>)
 800597e:	4a19      	ldr	r2, [pc, #100]	; (80059e4 <MX_ADC1_Init+0x78>)
 8005980:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8005982:	4b17      	ldr	r3, [pc, #92]	; (80059e0 <MX_ADC1_Init+0x74>)
 8005984:	2200      	movs	r2, #0
 8005986:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8005988:	4b15      	ldr	r3, [pc, #84]	; (80059e0 <MX_ADC1_Init+0x74>)
 800598a:	2201      	movs	r2, #1
 800598c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800598e:	4b14      	ldr	r3, [pc, #80]	; (80059e0 <MX_ADC1_Init+0x74>)
 8005990:	2200      	movs	r2, #0
 8005992:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005994:	4b12      	ldr	r3, [pc, #72]	; (80059e0 <MX_ADC1_Init+0x74>)
 8005996:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800599a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800599c:	4b10      	ldr	r3, [pc, #64]	; (80059e0 <MX_ADC1_Init+0x74>)
 800599e:	2200      	movs	r2, #0
 80059a0:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80059a2:	4b0f      	ldr	r3, [pc, #60]	; (80059e0 <MX_ADC1_Init+0x74>)
 80059a4:	2201      	movs	r2, #1
 80059a6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80059a8:	480d      	ldr	r0, [pc, #52]	; (80059e0 <MX_ADC1_Init+0x74>)
 80059aa:	f002 f933 	bl	8007c14 <HAL_ADC_Init>
 80059ae:	4603      	mov	r3, r0
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d001      	beq.n	80059b8 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80059b4:	f000 fcd4 	bl	8006360 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80059b8:	2306      	movs	r3, #6
 80059ba:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80059bc:	2301      	movs	r3, #1
 80059be:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80059c0:	2307      	movs	r3, #7
 80059c2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80059c4:	1d3b      	adds	r3, r7, #4
 80059c6:	4619      	mov	r1, r3
 80059c8:	4805      	ldr	r0, [pc, #20]	; (80059e0 <MX_ADC1_Init+0x74>)
 80059ca:	f002 fb85 	bl	80080d8 <HAL_ADC_ConfigChannel>
 80059ce:	4603      	mov	r3, r0
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d001      	beq.n	80059d8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80059d4:	f000 fcc4 	bl	8006360 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80059d8:	bf00      	nop
 80059da:	3710      	adds	r7, #16
 80059dc:	46bd      	mov	sp, r7
 80059de:	bd80      	pop	{r7, pc}
 80059e0:	200016ec 	.word	0x200016ec
 80059e4:	40012400 	.word	0x40012400

080059e8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b088      	sub	sp, #32
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80059f0:	f107 0310 	add.w	r3, r7, #16
 80059f4:	2200      	movs	r2, #0
 80059f6:	601a      	str	r2, [r3, #0]
 80059f8:	605a      	str	r2, [r3, #4]
 80059fa:	609a      	str	r2, [r3, #8]
 80059fc:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a18      	ldr	r2, [pc, #96]	; (8005a64 <HAL_ADC_MspInit+0x7c>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d129      	bne.n	8005a5c <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005a08:	4b17      	ldr	r3, [pc, #92]	; (8005a68 <HAL_ADC_MspInit+0x80>)
 8005a0a:	699b      	ldr	r3, [r3, #24]
 8005a0c:	4a16      	ldr	r2, [pc, #88]	; (8005a68 <HAL_ADC_MspInit+0x80>)
 8005a0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005a12:	6193      	str	r3, [r2, #24]
 8005a14:	4b14      	ldr	r3, [pc, #80]	; (8005a68 <HAL_ADC_MspInit+0x80>)
 8005a16:	699b      	ldr	r3, [r3, #24]
 8005a18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a1c:	60fb      	str	r3, [r7, #12]
 8005a1e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005a20:	4b11      	ldr	r3, [pc, #68]	; (8005a68 <HAL_ADC_MspInit+0x80>)
 8005a22:	699b      	ldr	r3, [r3, #24]
 8005a24:	4a10      	ldr	r2, [pc, #64]	; (8005a68 <HAL_ADC_MspInit+0x80>)
 8005a26:	f043 0304 	orr.w	r3, r3, #4
 8005a2a:	6193      	str	r3, [r2, #24]
 8005a2c:	4b0e      	ldr	r3, [pc, #56]	; (8005a68 <HAL_ADC_MspInit+0x80>)
 8005a2e:	699b      	ldr	r3, [r3, #24]
 8005a30:	f003 0304 	and.w	r3, r3, #4
 8005a34:	60bb      	str	r3, [r7, #8]
 8005a36:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8005a38:	2340      	movs	r3, #64	; 0x40
 8005a3a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005a3c:	2303      	movs	r3, #3
 8005a3e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005a40:	f107 0310 	add.w	r3, r7, #16
 8005a44:	4619      	mov	r1, r3
 8005a46:	4809      	ldr	r0, [pc, #36]	; (8005a6c <HAL_ADC_MspInit+0x84>)
 8005a48:	f003 f892 	bl	8008b70 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	2100      	movs	r1, #0
 8005a50:	2012      	movs	r0, #18
 8005a52:	f002 fdb4 	bl	80085be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8005a56:	2012      	movs	r0, #18
 8005a58:	f002 fdcd 	bl	80085f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8005a5c:	bf00      	nop
 8005a5e:	3720      	adds	r7, #32
 8005a60:	46bd      	mov	sp, r7
 8005a62:	bd80      	pop	{r7, pc}
 8005a64:	40012400 	.word	0x40012400
 8005a68:	40021000 	.word	0x40021000
 8005a6c:	40010800 	.word	0x40010800

08005a70 <crc32>:
    0x2d02ef8dL
};

/* crc32 hash */
uint32_t crc32(const char* s, int len)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b085      	sub	sp, #20
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
 8005a78:	6039      	str	r1, [r7, #0]
    int i;
    uint32_t crc32val = 0;
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	60bb      	str	r3, [r7, #8]
    crc32val ^= 0xFFFFFFFF;
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	43db      	mvns	r3, r3
 8005a82:	60bb      	str	r3, [r7, #8]

    for (i = 0;  i < len;  i++) {
 8005a84:	2300      	movs	r3, #0
 8005a86:	60fb      	str	r3, [r7, #12]
 8005a88:	e011      	b.n	8005aae <crc32+0x3e>
        crc32val = crc32_tab[(crc32val ^ s[i]) & 0xFF] ^ ((crc32val >> 8) & 0x00FFFFFF);
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	687a      	ldr	r2, [r7, #4]
 8005a8e:	4413      	add	r3, r2
 8005a90:	781b      	ldrb	r3, [r3, #0]
 8005a92:	461a      	mov	r2, r3
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	4053      	eors	r3, r2
 8005a98:	b2db      	uxtb	r3, r3
 8005a9a:	4a0a      	ldr	r2, [pc, #40]	; (8005ac4 <crc32+0x54>)
 8005a9c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	0a1b      	lsrs	r3, r3, #8
 8005aa4:	4053      	eors	r3, r2
 8005aa6:	60bb      	str	r3, [r7, #8]
    for (i = 0;  i < len;  i++) {
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	3301      	adds	r3, #1
 8005aac:	60fb      	str	r3, [r7, #12]
 8005aae:	68fa      	ldr	r2, [r7, #12]
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	429a      	cmp	r2, r3
 8005ab4:	dbe9      	blt.n	8005a8a <crc32+0x1a>
    }

    return crc32val ^ 0xFFFFFFFF;
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	43db      	mvns	r3, r3
}
 8005aba:	4618      	mov	r0, r3
 8005abc:	3714      	adds	r7, #20
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	bc80      	pop	{r7}
 8005ac2:	4770      	bx	lr
 8005ac4:	20000004 	.word	0x20000004

08005ac8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b082      	sub	sp, #8
 8005acc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005ace:	4b14      	ldr	r3, [pc, #80]	; (8005b20 <MX_DMA_Init+0x58>)
 8005ad0:	695b      	ldr	r3, [r3, #20]
 8005ad2:	4a13      	ldr	r2, [pc, #76]	; (8005b20 <MX_DMA_Init+0x58>)
 8005ad4:	f043 0301 	orr.w	r3, r3, #1
 8005ad8:	6153      	str	r3, [r2, #20]
 8005ada:	4b11      	ldr	r3, [pc, #68]	; (8005b20 <MX_DMA_Init+0x58>)
 8005adc:	695b      	ldr	r3, [r3, #20]
 8005ade:	f003 0301 	and.w	r3, r3, #1
 8005ae2:	607b      	str	r3, [r7, #4]
 8005ae4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	2100      	movs	r1, #0
 8005aea:	200d      	movs	r0, #13
 8005aec:	f002 fd67 	bl	80085be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8005af0:	200d      	movs	r0, #13
 8005af2:	f002 fd80 	bl	80085f6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8005af6:	2200      	movs	r2, #0
 8005af8:	2100      	movs	r1, #0
 8005afa:	200f      	movs	r0, #15
 8005afc:	f002 fd5f 	bl	80085be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8005b00:	200f      	movs	r0, #15
 8005b02:	f002 fd78 	bl	80085f6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8005b06:	2200      	movs	r2, #0
 8005b08:	2100      	movs	r1, #0
 8005b0a:	2010      	movs	r0, #16
 8005b0c:	f002 fd57 	bl	80085be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8005b10:	2010      	movs	r0, #16
 8005b12:	f002 fd70 	bl	80085f6 <HAL_NVIC_EnableIRQ>

}
 8005b16:	bf00      	nop
 8005b18:	3708      	adds	r7, #8
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bd80      	pop	{r7, pc}
 8005b1e:	bf00      	nop
 8005b20:	40021000 	.word	0x40021000

08005b24 <Bytes2float>:
    }

}

float Bytes2float(uint8_t * ftoa_bytes_temp)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b087      	sub	sp, #28
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
    union {
      float a;
      uint8_t bytes[4];
    } thing;

    for (uint8_t i = 0; i < 4; i++) {
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	75fb      	strb	r3, [r7, #23]
 8005b30:	e00b      	b.n	8005b4a <Bytes2float+0x26>
    	thing.bytes[i] = ftoa_bytes_temp[i];
 8005b32:	7dfb      	ldrb	r3, [r7, #23]
 8005b34:	687a      	ldr	r2, [r7, #4]
 8005b36:	441a      	add	r2, r3
 8005b38:	7dfb      	ldrb	r3, [r7, #23]
 8005b3a:	7812      	ldrb	r2, [r2, #0]
 8005b3c:	3318      	adds	r3, #24
 8005b3e:	443b      	add	r3, r7
 8005b40:	f803 2c0c 	strb.w	r2, [r3, #-12]
    for (uint8_t i = 0; i < 4; i++) {
 8005b44:	7dfb      	ldrb	r3, [r7, #23]
 8005b46:	3301      	adds	r3, #1
 8005b48:	75fb      	strb	r3, [r7, #23]
 8005b4a:	7dfb      	ldrb	r3, [r7, #23]
 8005b4c:	2b03      	cmp	r3, #3
 8005b4e:	d9f0      	bls.n	8005b32 <Bytes2float+0xe>
    }

   float float_variable =  thing.a;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	613b      	str	r3, [r7, #16]
   return float_variable;
 8005b54:	693b      	ldr	r3, [r7, #16]
}
 8005b56:	4618      	mov	r0, r3
 8005b58:	371c      	adds	r7, #28
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bc80      	pop	{r7}
 8005b5e:	4770      	bx	lr

08005b60 <Flash_Read_Data>:
	   return 0;
}


void Flash_Read_Data (uint32_t StartPageAddress, uint32_t *RxBuf, uint16_t numberofwords)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b085      	sub	sp, #20
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	60f8      	str	r0, [r7, #12]
 8005b68:	60b9      	str	r1, [r7, #8]
 8005b6a:	4613      	mov	r3, r2
 8005b6c:	80fb      	strh	r3, [r7, #6]
	while (1)
	{

		*RxBuf = *(__IO uint32_t *)StartPageAddress;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681a      	ldr	r2, [r3, #0]
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	601a      	str	r2, [r3, #0]
		StartPageAddress += 4;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	3304      	adds	r3, #4
 8005b7a:	60fb      	str	r3, [r7, #12]
		RxBuf++;
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	3304      	adds	r3, #4
 8005b80:	60bb      	str	r3, [r7, #8]
		if (!(numberofwords--)) break;
 8005b82:	88fb      	ldrh	r3, [r7, #6]
 8005b84:	1e5a      	subs	r2, r3, #1
 8005b86:	80fa      	strh	r2, [r7, #6]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d000      	beq.n	8005b8e <Flash_Read_Data+0x2e>
		*RxBuf = *(__IO uint32_t *)StartPageAddress;
 8005b8c:	e7ef      	b.n	8005b6e <Flash_Read_Data+0xe>
		if (!(numberofwords--)) break;
 8005b8e:	bf00      	nop
	}
}
 8005b90:	bf00      	nop
 8005b92:	3714      	adds	r7, #20
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bc80      	pop	{r7}
 8005b98:	4770      	bx	lr

08005b9a <Flash_Read_NUM>:
	Flash_Write_Data (StartSectorAddress, (uint32_t *)bytes_temp, 1);
}


float Flash_Read_NUM (uint32_t StartSectorAddress)
{
 8005b9a:	b580      	push	{r7, lr}
 8005b9c:	b084      	sub	sp, #16
 8005b9e:	af00      	add	r7, sp, #0
 8005ba0:	6078      	str	r0, [r7, #4]
	uint8_t buffer[4];
	float value;

	Flash_Read_Data(StartSectorAddress, (uint32_t *)buffer, 1);
 8005ba2:	f107 0308 	add.w	r3, r7, #8
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	4619      	mov	r1, r3
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f7ff ffd8 	bl	8005b60 <Flash_Read_Data>
	value = Bytes2float(buffer);
 8005bb0:	f107 0308 	add.w	r3, r7, #8
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	f7ff ffb5 	bl	8005b24 <Bytes2float>
 8005bba:	60f8      	str	r0, [r7, #12]
	return value;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
}
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	3710      	adds	r7, #16
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}
	...

08005bc8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b088      	sub	sp, #32
 8005bcc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005bce:	f107 0310 	add.w	r3, r7, #16
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	601a      	str	r2, [r3, #0]
 8005bd6:	605a      	str	r2, [r3, #4]
 8005bd8:	609a      	str	r2, [r3, #8]
 8005bda:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005bdc:	4b5e      	ldr	r3, [pc, #376]	; (8005d58 <MX_GPIO_Init+0x190>)
 8005bde:	699b      	ldr	r3, [r3, #24]
 8005be0:	4a5d      	ldr	r2, [pc, #372]	; (8005d58 <MX_GPIO_Init+0x190>)
 8005be2:	f043 0310 	orr.w	r3, r3, #16
 8005be6:	6193      	str	r3, [r2, #24]
 8005be8:	4b5b      	ldr	r3, [pc, #364]	; (8005d58 <MX_GPIO_Init+0x190>)
 8005bea:	699b      	ldr	r3, [r3, #24]
 8005bec:	f003 0310 	and.w	r3, r3, #16
 8005bf0:	60fb      	str	r3, [r7, #12]
 8005bf2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005bf4:	4b58      	ldr	r3, [pc, #352]	; (8005d58 <MX_GPIO_Init+0x190>)
 8005bf6:	699b      	ldr	r3, [r3, #24]
 8005bf8:	4a57      	ldr	r2, [pc, #348]	; (8005d58 <MX_GPIO_Init+0x190>)
 8005bfa:	f043 0320 	orr.w	r3, r3, #32
 8005bfe:	6193      	str	r3, [r2, #24]
 8005c00:	4b55      	ldr	r3, [pc, #340]	; (8005d58 <MX_GPIO_Init+0x190>)
 8005c02:	699b      	ldr	r3, [r3, #24]
 8005c04:	f003 0320 	and.w	r3, r3, #32
 8005c08:	60bb      	str	r3, [r7, #8]
 8005c0a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005c0c:	4b52      	ldr	r3, [pc, #328]	; (8005d58 <MX_GPIO_Init+0x190>)
 8005c0e:	699b      	ldr	r3, [r3, #24]
 8005c10:	4a51      	ldr	r2, [pc, #324]	; (8005d58 <MX_GPIO_Init+0x190>)
 8005c12:	f043 0304 	orr.w	r3, r3, #4
 8005c16:	6193      	str	r3, [r2, #24]
 8005c18:	4b4f      	ldr	r3, [pc, #316]	; (8005d58 <MX_GPIO_Init+0x190>)
 8005c1a:	699b      	ldr	r3, [r3, #24]
 8005c1c:	f003 0304 	and.w	r3, r3, #4
 8005c20:	607b      	str	r3, [r7, #4]
 8005c22:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005c24:	4b4c      	ldr	r3, [pc, #304]	; (8005d58 <MX_GPIO_Init+0x190>)
 8005c26:	699b      	ldr	r3, [r3, #24]
 8005c28:	4a4b      	ldr	r2, [pc, #300]	; (8005d58 <MX_GPIO_Init+0x190>)
 8005c2a:	f043 0308 	orr.w	r3, r3, #8
 8005c2e:	6193      	str	r3, [r2, #24]
 8005c30:	4b49      	ldr	r3, [pc, #292]	; (8005d58 <MX_GPIO_Init+0x190>)
 8005c32:	699b      	ldr	r3, [r3, #24]
 8005c34:	f003 0308 	and.w	r3, r3, #8
 8005c38:	603b      	str	r3, [r7, #0]
 8005c3a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_DB7_Pin|LCD_DB6_Pin|LCD_DB5_Pin, GPIO_PIN_RESET);
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8005c42:	4846      	ldr	r0, [pc, #280]	; (8005d5c <MX_GPIO_Init+0x194>)
 8005c44:	f003 f92f 	bl	8008ea6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MBA_CONTACTOR_GPIO_Port, MBA_CONTACTOR_Pin, GPIO_PIN_SET);
 8005c48:	2201      	movs	r2, #1
 8005c4a:	2110      	movs	r1, #16
 8005c4c:	4844      	ldr	r0, [pc, #272]	; (8005d60 <MX_GPIO_Init+0x198>)
 8005c4e:	f003 f92a 	bl	8008ea6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MOTOR_DIR_Pin|LED_Pin|LCD_RS_Pin|LCD_EN_Pin
 8005c52:	2200      	movs	r2, #0
 8005c54:	f649 4180 	movw	r1, #40064	; 0x9c80
 8005c58:	4841      	ldr	r0, [pc, #260]	; (8005d60 <MX_GPIO_Init+0x198>)
 8005c5a:	f003 f924 	bl	8008ea6 <HAL_GPIO_WritePin>
                          |LCD_DB4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOTOR_STEP_Pin|MOTOR_SLEEP_Pin|MOTOR_RST_Pin|MOTOR_EN_Pin, GPIO_PIN_RESET);
 8005c5e:	2200      	movs	r2, #0
 8005c60:	f243 0103 	movw	r1, #12291	; 0x3003
 8005c64:	483f      	ldr	r0, [pc, #252]	; (8005d64 <MX_GPIO_Init+0x19c>)
 8005c66:	f003 f91e 	bl	8008ea6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LCD_DB7_Pin|LCD_DB6_Pin|LCD_DB5_Pin;
 8005c6a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8005c6e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005c70:	2301      	movs	r3, #1
 8005c72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c74:	2300      	movs	r3, #0
 8005c76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c78:	2302      	movs	r3, #2
 8005c7a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005c7c:	f107 0310 	add.w	r3, r7, #16
 8005c80:	4619      	mov	r1, r3
 8005c82:	4836      	ldr	r0, [pc, #216]	; (8005d5c <MX_GPIO_Init+0x194>)
 8005c84:	f002 ff74 	bl	8008b70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RTC_ALARM_TRIGGER_Pin|LIMIT_SWITCH_MAX_Pin|BUTTON_DOWN_Pin|BUTTON_UP_Pin;
 8005c88:	f240 3321 	movw	r3, #801	; 0x321
 8005c8c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8005c8e:	4b36      	ldr	r3, [pc, #216]	; (8005d68 <MX_GPIO_Init+0x1a0>)
 8005c90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c92:	2300      	movs	r3, #0
 8005c94:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005c96:	f107 0310 	add.w	r3, r7, #16
 8005c9a:	4619      	mov	r1, r3
 8005c9c:	4830      	ldr	r0, [pc, #192]	; (8005d60 <MX_GPIO_Init+0x198>)
 8005c9e:	f002 ff67 	bl	8008b70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin */
  GPIO_InitStruct.Pin = MBA_CONTACTOR_Pin|MOTOR_DIR_Pin|LED_Pin|LCD_RS_Pin
 8005ca2:	f649 4390 	movw	r3, #40080	; 0x9c90
 8005ca6:	613b      	str	r3, [r7, #16]
                          |LCD_EN_Pin|LCD_DB4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005ca8:	2301      	movs	r3, #1
 8005caa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cac:	2300      	movs	r3, #0
 8005cae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005cb0:	2302      	movs	r3, #2
 8005cb2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005cb4:	f107 0310 	add.w	r3, r7, #16
 8005cb8:	4619      	mov	r1, r3
 8005cba:	4829      	ldr	r0, [pc, #164]	; (8005d60 <MX_GPIO_Init+0x198>)
 8005cbc:	f002 ff58 	bl	8008b70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MOTOR_STEP_Pin|MOTOR_SLEEP_Pin|MOTOR_RST_Pin|MOTOR_EN_Pin;
 8005cc0:	f243 0303 	movw	r3, #12291	; 0x3003
 8005cc4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cca:	2300      	movs	r3, #0
 8005ccc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005cce:	2302      	movs	r3, #2
 8005cd0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005cd2:	f107 0310 	add.w	r3, r7, #16
 8005cd6:	4619      	mov	r1, r3
 8005cd8:	4822      	ldr	r0, [pc, #136]	; (8005d64 <MX_GPIO_Init+0x19c>)
 8005cda:	f002 ff49 	bl	8008b70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LIMIT_SWITCH_MIN_Pin;
 8005cde:	2304      	movs	r3, #4
 8005ce0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005ce2:	4b22      	ldr	r3, [pc, #136]	; (8005d6c <MX_GPIO_Init+0x1a4>)
 8005ce4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LIMIT_SWITCH_MIN_GPIO_Port, &GPIO_InitStruct);
 8005cea:	f107 0310 	add.w	r3, r7, #16
 8005cee:	4619      	mov	r1, r3
 8005cf0:	481c      	ldr	r0, [pc, #112]	; (8005d64 <MX_GPIO_Init+0x19c>)
 8005cf2:	f002 ff3d 	bl	8008b70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = BUTTON_MENU_Pin|BUTTON_OK_Pin;
 8005cf6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8005cfa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8005cfc:	4b1a      	ldr	r3, [pc, #104]	; (8005d68 <MX_GPIO_Init+0x1a0>)
 8005cfe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d00:	2300      	movs	r3, #0
 8005d02:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005d04:	f107 0310 	add.w	r3, r7, #16
 8005d08:	4619      	mov	r1, r3
 8005d0a:	4816      	ldr	r0, [pc, #88]	; (8005d64 <MX_GPIO_Init+0x19c>)
 8005d0c:	f002 ff30 	bl	8008b70 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8005d10:	2200      	movs	r2, #0
 8005d12:	2100      	movs	r1, #0
 8005d14:	2006      	movs	r0, #6
 8005d16:	f002 fc52 	bl	80085be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8005d1a:	2006      	movs	r0, #6
 8005d1c:	f002 fc6b 	bl	80085f6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8005d20:	2200      	movs	r2, #0
 8005d22:	2100      	movs	r1, #0
 8005d24:	2008      	movs	r0, #8
 8005d26:	f002 fc4a 	bl	80085be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8005d2a:	2008      	movs	r0, #8
 8005d2c:	f002 fc63 	bl	80085f6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8005d30:	2200      	movs	r2, #0
 8005d32:	2100      	movs	r1, #0
 8005d34:	2017      	movs	r0, #23
 8005d36:	f002 fc42 	bl	80085be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8005d3a:	2017      	movs	r0, #23
 8005d3c:	f002 fc5b 	bl	80085f6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8005d40:	2200      	movs	r2, #0
 8005d42:	2100      	movs	r1, #0
 8005d44:	2028      	movs	r0, #40	; 0x28
 8005d46:	f002 fc3a 	bl	80085be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8005d4a:	2028      	movs	r0, #40	; 0x28
 8005d4c:	f002 fc53 	bl	80085f6 <HAL_NVIC_EnableIRQ>

}
 8005d50:	bf00      	nop
 8005d52:	3720      	adds	r7, #32
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bd80      	pop	{r7, pc}
 8005d58:	40021000 	.word	0x40021000
 8005d5c:	40011000 	.word	0x40011000
 8005d60:	40010800 	.word	0x40010800
 8005d64:	40010c00 	.word	0x40010c00
 8005d68:	10210000 	.word	0x10210000
 8005d6c:	10110000 	.word	0x10110000

08005d70 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8005d74:	4b12      	ldr	r3, [pc, #72]	; (8005dc0 <MX_I2C1_Init+0x50>)
 8005d76:	4a13      	ldr	r2, [pc, #76]	; (8005dc4 <MX_I2C1_Init+0x54>)
 8005d78:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8005d7a:	4b11      	ldr	r3, [pc, #68]	; (8005dc0 <MX_I2C1_Init+0x50>)
 8005d7c:	4a12      	ldr	r2, [pc, #72]	; (8005dc8 <MX_I2C1_Init+0x58>)
 8005d7e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005d80:	4b0f      	ldr	r3, [pc, #60]	; (8005dc0 <MX_I2C1_Init+0x50>)
 8005d82:	2200      	movs	r2, #0
 8005d84:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8005d86:	4b0e      	ldr	r3, [pc, #56]	; (8005dc0 <MX_I2C1_Init+0x50>)
 8005d88:	2200      	movs	r2, #0
 8005d8a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005d8c:	4b0c      	ldr	r3, [pc, #48]	; (8005dc0 <MX_I2C1_Init+0x50>)
 8005d8e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005d92:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005d94:	4b0a      	ldr	r3, [pc, #40]	; (8005dc0 <MX_I2C1_Init+0x50>)
 8005d96:	2200      	movs	r2, #0
 8005d98:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8005d9a:	4b09      	ldr	r3, [pc, #36]	; (8005dc0 <MX_I2C1_Init+0x50>)
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005da0:	4b07      	ldr	r3, [pc, #28]	; (8005dc0 <MX_I2C1_Init+0x50>)
 8005da2:	2200      	movs	r2, #0
 8005da4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005da6:	4b06      	ldr	r3, [pc, #24]	; (8005dc0 <MX_I2C1_Init+0x50>)
 8005da8:	2200      	movs	r2, #0
 8005daa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005dac:	4804      	ldr	r0, [pc, #16]	; (8005dc0 <MX_I2C1_Init+0x50>)
 8005dae:	f003 f8c3 	bl	8008f38 <HAL_I2C_Init>
 8005db2:	4603      	mov	r3, r0
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d001      	beq.n	8005dbc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8005db8:	f000 fad2 	bl	8006360 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8005dbc:	bf00      	nop
 8005dbe:	bd80      	pop	{r7, pc}
 8005dc0:	2000171c 	.word	0x2000171c
 8005dc4:	40005400 	.word	0x40005400
 8005dc8:	00061a80 	.word	0x00061a80

08005dcc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b08a      	sub	sp, #40	; 0x28
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005dd4:	f107 0314 	add.w	r3, r7, #20
 8005dd8:	2200      	movs	r2, #0
 8005dda:	601a      	str	r2, [r3, #0]
 8005ddc:	605a      	str	r2, [r3, #4]
 8005dde:	609a      	str	r2, [r3, #8]
 8005de0:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4a1d      	ldr	r2, [pc, #116]	; (8005e5c <HAL_I2C_MspInit+0x90>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d132      	bne.n	8005e52 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005dec:	4b1c      	ldr	r3, [pc, #112]	; (8005e60 <HAL_I2C_MspInit+0x94>)
 8005dee:	699b      	ldr	r3, [r3, #24]
 8005df0:	4a1b      	ldr	r2, [pc, #108]	; (8005e60 <HAL_I2C_MspInit+0x94>)
 8005df2:	f043 0308 	orr.w	r3, r3, #8
 8005df6:	6193      	str	r3, [r2, #24]
 8005df8:	4b19      	ldr	r3, [pc, #100]	; (8005e60 <HAL_I2C_MspInit+0x94>)
 8005dfa:	699b      	ldr	r3, [r3, #24]
 8005dfc:	f003 0308 	and.w	r3, r3, #8
 8005e00:	613b      	str	r3, [r7, #16]
 8005e02:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8005e04:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005e08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005e0a:	2312      	movs	r3, #18
 8005e0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005e0e:	2303      	movs	r3, #3
 8005e10:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005e12:	f107 0314 	add.w	r3, r7, #20
 8005e16:	4619      	mov	r1, r3
 8005e18:	4812      	ldr	r0, [pc, #72]	; (8005e64 <HAL_I2C_MspInit+0x98>)
 8005e1a:	f002 fea9 	bl	8008b70 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8005e1e:	4b12      	ldr	r3, [pc, #72]	; (8005e68 <HAL_I2C_MspInit+0x9c>)
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	627b      	str	r3, [r7, #36]	; 0x24
 8005e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e26:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8005e2a:	627b      	str	r3, [r7, #36]	; 0x24
 8005e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e2e:	f043 0302 	orr.w	r3, r3, #2
 8005e32:	627b      	str	r3, [r7, #36]	; 0x24
 8005e34:	4a0c      	ldr	r2, [pc, #48]	; (8005e68 <HAL_I2C_MspInit+0x9c>)
 8005e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e38:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005e3a:	4b09      	ldr	r3, [pc, #36]	; (8005e60 <HAL_I2C_MspInit+0x94>)
 8005e3c:	69db      	ldr	r3, [r3, #28]
 8005e3e:	4a08      	ldr	r2, [pc, #32]	; (8005e60 <HAL_I2C_MspInit+0x94>)
 8005e40:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005e44:	61d3      	str	r3, [r2, #28]
 8005e46:	4b06      	ldr	r3, [pc, #24]	; (8005e60 <HAL_I2C_MspInit+0x94>)
 8005e48:	69db      	ldr	r3, [r3, #28]
 8005e4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005e4e:	60fb      	str	r3, [r7, #12]
 8005e50:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8005e52:	bf00      	nop
 8005e54:	3728      	adds	r7, #40	; 0x28
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}
 8005e5a:	bf00      	nop
 8005e5c:	40005400 	.word	0x40005400
 8005e60:	40021000 	.word	0x40021000
 8005e64:	40010c00 	.word	0x40010c00
 8005e68:	40010000 	.word	0x40010000

08005e6c <create_node>:
#include "linkedlist.h"

SensorNode_t SSnode_default = SENSORNODE_T_INIT;

Node* create_node(SensorNode_t  SSnode)
{
 8005e6c:	b084      	sub	sp, #16
 8005e6e:	b580      	push	{r7, lr}
 8005e70:	b082      	sub	sp, #8
 8005e72:	af00      	add	r7, sp, #0
 8005e74:	f107 0c10 	add.w	ip, r7, #16
 8005e78:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    Node* node = (Node*)malloc(sizeof(Node));
 8005e7c:	2074      	movs	r0, #116	; 0x74
 8005e7e:	f006 f93b 	bl	800c0f8 <malloc>
 8005e82:	4603      	mov	r3, r0
 8005e84:	607b      	str	r3, [r7, #4]
    node->SSnode= SSnode;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	4618      	mov	r0, r3
 8005e8a:	f107 0310 	add.w	r3, r7, #16
 8005e8e:	2270      	movs	r2, #112	; 0x70
 8005e90:	4619      	mov	r1, r3
 8005e92:	f006 f951 	bl	800c138 <memcpy>
    node->next = NULL;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	671a      	str	r2, [r3, #112]	; 0x70
    return node;
 8005e9c:	687b      	ldr	r3, [r7, #4]
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	3708      	adds	r7, #8
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005ea8:	b004      	add	sp, #16
 8005eaa:	4770      	bx	lr

08005eac <list_create>:

s_list * list_create(void)
{
 8005eac:	b590      	push	{r4, r7, lr}
 8005eae:	b09b      	sub	sp, #108	; 0x6c
 8005eb0:	af18      	add	r7, sp, #96	; 0x60
    s_list *list = (s_list*)malloc(sizeof(s_list));
 8005eb2:	200c      	movs	r0, #12
 8005eb4:	f006 f920 	bl	800c0f8 <malloc>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	607b      	str	r3, [r7, #4]
//    assert(list != NULL);
    list->head = create_node(SSnode_default);
 8005ebc:	4c15      	ldr	r4, [pc, #84]	; (8005f14 <list_create+0x68>)
 8005ebe:	4668      	mov	r0, sp
 8005ec0:	f104 0310 	add.w	r3, r4, #16
 8005ec4:	2260      	movs	r2, #96	; 0x60
 8005ec6:	4619      	mov	r1, r3
 8005ec8:	f006 f936 	bl	800c138 <memcpy>
 8005ecc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8005ed0:	f7ff ffcc 	bl	8005e6c <create_node>
 8005ed4:	4602      	mov	r2, r0
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	601a      	str	r2, [r3, #0]
    list->tail = create_node(SSnode_default);
 8005eda:	4c0e      	ldr	r4, [pc, #56]	; (8005f14 <list_create+0x68>)
 8005edc:	4668      	mov	r0, sp
 8005ede:	f104 0310 	add.w	r3, r4, #16
 8005ee2:	2260      	movs	r2, #96	; 0x60
 8005ee4:	4619      	mov	r1, r3
 8005ee6:	f006 f927 	bl	800c138 <memcpy>
 8005eea:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8005eee:	f7ff ffbd 	bl	8005e6c <create_node>
 8005ef2:	4602      	mov	r2, r0
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	605a      	str	r2, [r3, #4]
    list->head->next = list->tail;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	687a      	ldr	r2, [r7, #4]
 8005efe:	6852      	ldr	r2, [r2, #4]
 8005f00:	671a      	str	r2, [r3, #112]	; 0x70
    list->length = 0;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2200      	movs	r2, #0
 8005f06:	609a      	str	r2, [r3, #8]
    return list;
 8005f08:	687b      	ldr	r3, [r7, #4]
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	370c      	adds	r7, #12
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd90      	pop	{r4, r7, pc}
 8005f12:	bf00      	nop
 8005f14:	20000404 	.word	0x20000404

08005f18 <list_append>:

void list_append (s_list* list, SensorNode_t SSnode_data)
{
 8005f18:	b084      	sub	sp, #16
 8005f1a:	b590      	push	{r4, r7, lr}
 8005f1c:	b09d      	sub	sp, #116	; 0x74
 8005f1e:	af18      	add	r7, sp, #96	; 0x60
 8005f20:	6078      	str	r0, [r7, #4]
 8005f22:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005f26:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	list->tail->SSnode = SSnode_data;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	4618      	mov	r0, r3
 8005f30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005f34:	2270      	movs	r2, #112	; 0x70
 8005f36:	4619      	mov	r1, r3
 8005f38:	f006 f8fe 	bl	800c138 <memcpy>
	Node *new_tail = create_node(SSnode_default);
 8005f3c:	4c0f      	ldr	r4, [pc, #60]	; (8005f7c <list_append+0x64>)
 8005f3e:	4668      	mov	r0, sp
 8005f40:	f104 0310 	add.w	r3, r4, #16
 8005f44:	2260      	movs	r2, #96	; 0x60
 8005f46:	4619      	mov	r1, r3
 8005f48:	f006 f8f6 	bl	800c138 <memcpy>
 8005f4c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8005f50:	f7ff ff8c 	bl	8005e6c <create_node>
 8005f54:	60f8      	str	r0, [r7, #12]
	list->tail->next = new_tail;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	685b      	ldr	r3, [r3, #4]
 8005f5a:	68fa      	ldr	r2, [r7, #12]
 8005f5c:	671a      	str	r2, [r3, #112]	; 0x70
	list->tail = new_tail;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	68fa      	ldr	r2, [r7, #12]
 8005f62:	605a      	str	r2, [r3, #4]
	list->length += 1;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	689b      	ldr	r3, [r3, #8]
 8005f68:	1c5a      	adds	r2, r3, #1
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	609a      	str	r2, [r3, #8]
}
 8005f6e:	bf00      	nop
 8005f70:	3714      	adds	r7, #20
 8005f72:	46bd      	mov	sp, r7
 8005f74:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8005f78:	b004      	add	sp, #16
 8005f7a:	4770      	bx	lr
 8005f7c:	20000404 	.word	0x20000404

08005f80 <HAL_UARTEx_RxEventCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static void currentConvert(uint32_t volatile *adcval);
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b082      	sub	sp, #8
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
 8005f88:	460b      	mov	r3, r1
 8005f8a:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART1 )
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a0e      	ldr	r2, [pc, #56]	; (8005fcc <HAL_UARTEx_RxEventCallback+0x4c>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d103      	bne.n	8005f9e <HAL_UARTEx_RxEventCallback+0x1e>
	{
		SIM_callback(Size);
 8005f96:	887b      	ldrh	r3, [r7, #2]
 8005f98:	4618      	mov	r0, r3
 8005f9a:	f7fc fa73 	bl	8002484 <SIM_callback>
	}
	if (huart->Instance== USART2)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a0b      	ldr	r2, [pc, #44]	; (8005fd0 <HAL_UARTEx_RxEventCallback+0x50>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d103      	bne.n	8005fb0 <HAL_UARTEx_RxEventCallback+0x30>
	{
		Serial_CFG_Callback(Size);
 8005fa8:	887b      	ldrh	r3, [r7, #2]
 8005faa:	4618      	mov	r0, r3
 8005fac:	f7fb f81e 	bl	8000fec <Serial_CFG_Callback>
	}

	if (huart->Instance == USART3) {
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a07      	ldr	r2, [pc, #28]	; (8005fd4 <HAL_UARTEx_RxEventCallback+0x54>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d103      	bne.n	8005fc2 <HAL_UARTEx_RxEventCallback+0x42>
		Lora_callback(Size);
 8005fba:	887b      	ldrh	r3, [r7, #2]
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	f7fe fb05 	bl	80045cc <Lora_callback>
	}
}
 8005fc2:	bf00      	nop
 8005fc4:	3708      	adds	r7, #8
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bd80      	pop	{r7, pc}
 8005fca:	bf00      	nop
 8005fcc:	40013800 	.word	0x40013800
 8005fd0:	40004400 	.word	0x40004400
 8005fd4:	40004800 	.word	0x40004800

08005fd8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b082      	sub	sp, #8
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	4603      	mov	r3, r0
 8005fe0:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == RTC_ALARM_TRIGGER_Pin)	{
 8005fe2:	88fb      	ldrh	r3, [r7, #6]
 8005fe4:	2b01      	cmp	r3, #1
 8005fe6:	d11c      	bne.n	8006022 <HAL_GPIO_EXTI_Callback+0x4a>
//		alarmflag = 0;
		// turn OFF MBA
		if(!sync_flag)	{
 8005fe8:	4b29      	ldr	r3, [pc, #164]	; (8006090 <HAL_GPIO_EXTI_Callback+0xb8>)
 8005fea:	781b      	ldrb	r3, [r3, #0]
 8005fec:	b2db      	uxtb	r3, r3
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d111      	bne.n	8006016 <HAL_GPIO_EXTI_Callback+0x3e>
			myStation.MBAstate = switchContactor(MBA_OFF);
 8005ff2:	2002      	movs	r0, #2
 8005ff4:	f7fc fa06 	bl	8002404 <switchContactor>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	461a      	mov	r2, r3
 8005ffc:	4b25      	ldr	r3, [pc, #148]	; (8006094 <HAL_GPIO_EXTI_Callback+0xbc>)
 8005ffe:	719a      	strb	r2, [r3, #6]
//			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
			DS3231_ClearAlarm1();
 8006000:	f7fe f9b8 	bl	8004374 <DS3231_ClearAlarm1>
			// Set Mode Measure for Sensor node
			Lora_Setmode(MEASURE, 0);
 8006004:	2100      	movs	r1, #0
 8006006:	2002      	movs	r0, #2
 8006008:	f7fe fcc0 	bl	800498c <Lora_Setmode>
			// Change to Calib mode
//			setStationMode(STATION_MODE_CALIB);
			triggerTaskflag(TASK_START_CALIB, FLAG_EN);
 800600c:	2101      	movs	r1, #1
 800600e:	2003      	movs	r0, #3
 8006010:	f7ff fb70 	bl	80056f4 <triggerTaskflag>
 8006014:	e005      	b.n	8006022 <HAL_GPIO_EXTI_Callback+0x4a>
		}
		else {
			Lora_Setmode(SLEEP, 0);
 8006016:	2100      	movs	r1, #0
 8006018:	2000      	movs	r0, #0
 800601a:	f7fe fcb7 	bl	800498c <Lora_Setmode>
			DS3231_ClearAlarm1();
 800601e:	f7fe f9a9 	bl	8004374 <DS3231_ClearAlarm1>
		}

	}
	curtick = HAL_GetTick();
 8006022:	f001 fdc9 	bl	8007bb8 <HAL_GetTick>
 8006026:	4603      	mov	r3, r0
 8006028:	4a1b      	ldr	r2, [pc, #108]	; (8006098 <HAL_GPIO_EXTI_Callback+0xc0>)
 800602a:	6013      	str	r3, [r2, #0]

	if (curtick - pretick > 20)	{
 800602c:	4b1a      	ldr	r3, [pc, #104]	; (8006098 <HAL_GPIO_EXTI_Callback+0xc0>)
 800602e:	681a      	ldr	r2, [r3, #0]
 8006030:	4b1a      	ldr	r3, [pc, #104]	; (800609c <HAL_GPIO_EXTI_Callback+0xc4>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	1ad3      	subs	r3, r2, r3
 8006036:	2b14      	cmp	r3, #20
 8006038:	d925      	bls.n	8006086 <HAL_GPIO_EXTI_Callback+0xae>
		pretick = curtick;
 800603a:	4b17      	ldr	r3, [pc, #92]	; (8006098 <HAL_GPIO_EXTI_Callback+0xc0>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4a17      	ldr	r2, [pc, #92]	; (800609c <HAL_GPIO_EXTI_Callback+0xc4>)
 8006040:	6013      	str	r3, [r2, #0]

		if (GPIO_Pin == BUTTON_MENU_Pin) {
 8006042:	88fb      	ldrh	r3, [r7, #6]
 8006044:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006048:	d101      	bne.n	800604e <HAL_GPIO_EXTI_Callback+0x76>
			// Button Menu handler
			buttonMENU_handler();
 800604a:	f7fd fd99 	bl	8003b80 <buttonMENU_handler>
		}

		if (GPIO_Pin == BUTTON_OK_Pin) {
 800604e:	88fb      	ldrh	r3, [r7, #6]
 8006050:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006054:	d101      	bne.n	800605a <HAL_GPIO_EXTI_Callback+0x82>
			// Button OK handler
			buttonOK_handler();
 8006056:	f7fd fe09 	bl	8003c6c <buttonOK_handler>
		}

		if (GPIO_Pin == BUTTON_UP_Pin) {
 800605a:	88fb      	ldrh	r3, [r7, #6]
 800605c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006060:	d101      	bne.n	8006066 <HAL_GPIO_EXTI_Callback+0x8e>
			// Button UP handler
			buttonUP_handler();
 8006062:	f7fd ff15 	bl	8003e90 <buttonUP_handler>
		}

		if (GPIO_Pin == BUTTON_DOWN_Pin) {
 8006066:	88fb      	ldrh	r3, [r7, #6]
 8006068:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800606c:	d101      	bne.n	8006072 <HAL_GPIO_EXTI_Callback+0x9a>
			// Button DOWN handler
			buttonDOWN_handler();
 800606e:	f7fd fe97 	bl	8003da0 <buttonDOWN_handler>
		}

		if (GPIO_Pin == LIMIT_SWITCH_MAX_Pin) {
 8006072:	88fb      	ldrh	r3, [r7, #6]
 8006074:	2b20      	cmp	r3, #32
 8006076:	d101      	bne.n	800607c <HAL_GPIO_EXTI_Callback+0xa4>
			// Button Limit MAX handler
			SW_LIMIT_MAX_handler();
 8006078:	f7fd ff7e 	bl	8003f78 <SW_LIMIT_MAX_handler>
		}

		if (GPIO_Pin == LIMIT_SWITCH_MIN_Pin) {
 800607c:	88fb      	ldrh	r3, [r7, #6]
 800607e:	2b04      	cmp	r3, #4
 8006080:	d101      	bne.n	8006086 <HAL_GPIO_EXTI_Callback+0xae>
			// Button Limit MIN handler
			SW_LIMIT_MIN_handler();
 8006082:	f7fd ff89 	bl	8003f98 <SW_LIMIT_MIN_handler>
		}
	}
}
 8006086:	bf00      	nop
 8006088:	3708      	adds	r7, #8
 800608a:	46bd      	mov	sp, r7
 800608c:	bd80      	pop	{r7, pc}
 800608e:	bf00      	nop
 8006090:	200029f5 	.word	0x200029f5
 8006094:	20000474 	.word	0x20000474
 8006098:	20002a00 	.word	0x20002a00
 800609c:	20002a04 	.word	0x20002a04

080060a0 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b082      	sub	sp, #8
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == hadc1.Instance)	{
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681a      	ldr	r2, [r3, #0]
 80060ac:	4b0d      	ldr	r3, [pc, #52]	; (80060e4 <HAL_ADC_ConvCpltCallback+0x44>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	429a      	cmp	r2, r3
 80060b2:	d112      	bne.n	80060da <HAL_ADC_ConvCpltCallback+0x3a>
		tmpadc += HAL_ADC_GetValue(hadc);
 80060b4:	6878      	ldr	r0, [r7, #4]
 80060b6:	f001 ff3b 	bl	8007f30 <HAL_ADC_GetValue>
 80060ba:	4602      	mov	r2, r0
 80060bc:	4b0a      	ldr	r3, [pc, #40]	; (80060e8 <HAL_ADC_ConvCpltCallback+0x48>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4413      	add	r3, r2
 80060c2:	4a09      	ldr	r2, [pc, #36]	; (80060e8 <HAL_ADC_ConvCpltCallback+0x48>)
 80060c4:	6013      	str	r3, [r2, #0]
		adccount++;
 80060c6:	4b09      	ldr	r3, [pc, #36]	; (80060ec <HAL_ADC_ConvCpltCallback+0x4c>)
 80060c8:	881b      	ldrh	r3, [r3, #0]
 80060ca:	b29b      	uxth	r3, r3
 80060cc:	3301      	adds	r3, #1
 80060ce:	b29a      	uxth	r2, r3
 80060d0:	4b06      	ldr	r3, [pc, #24]	; (80060ec <HAL_ADC_ConvCpltCallback+0x4c>)
 80060d2:	801a      	strh	r2, [r3, #0]
		currentConvert(&tmpadc);
 80060d4:	4804      	ldr	r0, [pc, #16]	; (80060e8 <HAL_ADC_ConvCpltCallback+0x48>)
 80060d6:	f000 f911 	bl	80062fc <currentConvert>
	}
}
 80060da:	bf00      	nop
 80060dc:	3708      	adds	r7, #8
 80060de:	46bd      	mov	sp, r7
 80060e0:	bd80      	pop	{r7, pc}
 80060e2:	bf00      	nop
 80060e4:	200016ec 	.word	0x200016ec
 80060e8:	200029f8 	.word	0x200029f8
 80060ec:	200029fc 	.word	0x200029fc

080060f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80060f4:	f001 fd08 	bl	8007b08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80060f8:	f000 f8a4 	bl	8006244 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80060fc:	f7ff fd64 	bl	8005bc8 <MX_GPIO_Init>
  MX_DMA_Init();
 8006100:	f7ff fce2 	bl	8005ac8 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8006104:	f000 fb30 	bl	8006768 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8006108:	f000 fb58 	bl	80067bc <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800610c:	f7ff fe30 	bl	8005d70 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8006110:	f000 fb7e 	bl	8006810 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8006114:	f000 faba 	bl	800668c <MX_TIM1_Init>
  MX_ADC1_Init();
 8006118:	f7ff fc28 	bl	800596c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  SSnode_list =list_create();
 800611c:	f7ff fec6 	bl	8005eac <list_create>
 8006120:	4603      	mov	r3, r0
 8006122:	4a39      	ldr	r2, [pc, #228]	; (8006208 <main+0x118>)
 8006124:	6013      	str	r3, [r2, #0]
//  SensorNode_t secondSensornode = {0x52, 0, V_p, 10, SENSOR_ACTIVE , 1};
//  memcpy(secondSensornode.dataCalibBuffer, Sensorcalibvalue2, 100);
//  list_append(SSnode_list, secondSensornode);
  /**********************************************************************/

  myStation.ssNode_list = SSnode_list;
 8006126:	4b38      	ldr	r3, [pc, #224]	; (8006208 <main+0x118>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4a38      	ldr	r2, [pc, #224]	; (800620c <main+0x11c>)
 800612c:	60d3      	str	r3, [r2, #12]

  // Get station ID from flash
//  Flash_Write_NUM(FLASH_PAGE_127, 0x04);
  myStation.stID = (uint8_t)Flash_Read_NUM(FLASH_PAGE_127);
 800612e:	4838      	ldr	r0, [pc, #224]	; (8006210 <main+0x120>)
 8006130:	f7ff fd33 	bl	8005b9a <Flash_Read_NUM>
 8006134:	4603      	mov	r3, r0
 8006136:	4618      	mov	r0, r3
 8006138:	f7fa f81a 	bl	8000170 <__aeabi_f2uiz>
 800613c:	4603      	mov	r3, r0
 800613e:	b2da      	uxtb	r2, r3
 8006140:	4b32      	ldr	r3, [pc, #200]	; (800620c <main+0x11c>)
 8006142:	705a      	strb	r2, [r3, #1]

	mySIM.mqttServer.host = "tcp://broker.hivemq.com";
 8006144:	4b33      	ldr	r3, [pc, #204]	; (8006214 <main+0x124>)
 8006146:	4a34      	ldr	r2, [pc, #208]	; (8006218 <main+0x128>)
 8006148:	601a      	str	r2, [r3, #0]
	mySIM.mqttServer.port = 1883;
 800614a:	4b32      	ldr	r3, [pc, #200]	; (8006214 <main+0x124>)
 800614c:	f240 725b 	movw	r2, #1883	; 0x75b
 8006150:	819a      	strh	r2, [r3, #12]
	mySIM.mqttServer.willtopic = "unnormal_disconnect";
 8006152:	4b30      	ldr	r3, [pc, #192]	; (8006214 <main+0x124>)
 8006154:	4a31      	ldr	r2, [pc, #196]	; (800621c <main+0x12c>)
 8006156:	605a      	str	r2, [r3, #4]
	mySIM.mqttServer.willmsg = (uint8_t*)malloc(sizeof(myStation.stID));
 8006158:	2001      	movs	r0, #1
 800615a:	f005 ffcd 	bl	800c0f8 <malloc>
 800615e:	4603      	mov	r3, r0
 8006160:	461a      	mov	r2, r3
 8006162:	4b2c      	ldr	r3, [pc, #176]	; (8006214 <main+0x124>)
 8006164:	609a      	str	r2, [r3, #8]
	sprintf((char*)mySIM.mqttServer.willmsg,"%d",myStation.stID);
 8006166:	4b2b      	ldr	r3, [pc, #172]	; (8006214 <main+0x124>)
 8006168:	689b      	ldr	r3, [r3, #8]
 800616a:	4a28      	ldr	r2, [pc, #160]	; (800620c <main+0x11c>)
 800616c:	7852      	ldrb	r2, [r2, #1]
 800616e:	492c      	ldr	r1, [pc, #176]	; (8006220 <main+0x130>)
 8006170:	4618      	mov	r0, r3
 8006172:	f006 fb55 	bl	800c820 <siprintf>
	mySIM.mqttClient.keepAliveInterval = 180;
 8006176:	4b27      	ldr	r3, [pc, #156]	; (8006214 <main+0x124>)
 8006178:	22b4      	movs	r2, #180	; 0xb4
 800617a:	829a      	strh	r2, [r3, #20]
	mySIM.mqttClient.clientID = "clienthehe";
 800617c:	4b25      	ldr	r3, [pc, #148]	; (8006214 <main+0x124>)
 800617e:	4a29      	ldr	r2, [pc, #164]	; (8006224 <main+0x134>)
 8006180:	611a      	str	r2, [r3, #16]
//	sprintf((char*)mySIM.mqttClient.clientID,"%d",myStation.stID);
	mySIM.mqttReceive.qos =1;
 8006182:	4b24      	ldr	r3, [pc, #144]	; (8006214 <main+0x124>)
 8006184:	2201      	movs	r2, #1
 8006186:	61da      	str	r2, [r3, #28]
	mySIM.mqttServer.connect=0;
 8006188:	4b22      	ldr	r3, [pc, #136]	; (8006214 <main+0x124>)
 800618a:	2200      	movs	r2, #0
 800618c:	739a      	strb	r2, [r3, #14]

	mySIM.sms = mySMS;
 800618e:	4b21      	ldr	r3, [pc, #132]	; (8006214 <main+0x124>)
 8006190:	4a25      	ldr	r2, [pc, #148]	; (8006228 <main+0x138>)
 8006192:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006196:	4611      	mov	r1, r2
 8006198:	f44f 6209 	mov.w	r2, #2192	; 0x890
 800619c:	4618      	mov	r0, r3
 800619e:	f005 ffcb 	bl	800c138 <memcpy>

	myGPS.getFlag = 0;
 80061a2:	4a22      	ldr	r2, [pc, #136]	; (800622c <main+0x13c>)
 80061a4:	79d3      	ldrb	r3, [r2, #7]
 80061a6:	f36f 0300 	bfc	r3, #0, #1
 80061aa:	71d3      	strb	r3, [r2, #7]

	// ADC
	HAL_ADC_Start_IT(&hadc1);
 80061ac:	4820      	ldr	r0, [pc, #128]	; (8006230 <main+0x140>)
 80061ae:	f001 fe09 	bl	8007dc4 <HAL_ADC_Start_IT>


	initTask();
 80061b2:	f7ff f996 	bl	80054e2 <initTask>

	// MBA and Step motor
	initApp_MBA_stepmor();
 80061b6:	f7fa faf1 	bl	800079c <initApp_MBA_stepmor>
	// Lora
//	initLora(&huart2, &hdma_usart2_rx);
	initmyLora();
 80061ba:	f7fe f9e9 	bl	8004590 <initmyLora>
	// GPS
	initSerial_CFG();
 80061be:	f7fa fee8 	bl	8000f92 <initSerial_CFG>
//	myGPS.getFlag = 0;
	initGPS(&myRTC);
 80061c2:	481c      	ldr	r0, [pc, #112]	; (8006234 <main+0x144>)
 80061c4:	f7fa feec 	bl	8000fa0 <initGPS>

	initSIM();
 80061c8:	f7fc f93e 	bl	8002448 <initSIM>

	// Init Serial log
//	init_Serial_log(&huart2);

	// Init MQTT app
	initApp_MQTT();
 80061cc:	f7fa fbac 	bl	8000928 <initApp_MQTT>

//	initApp_MCU(&mySIM);

	initApp_SMS(&mySIM.sms);
 80061d0:	4819      	ldr	r0, [pc, #100]	; (8006238 <main+0x148>)
 80061d2:	f7fa fddf 	bl	8000d94 <initApp_SMS>

//	init_App_Serial();

	// Init RTC module (DS3231)
	DS3231_Init(&hi2c1);
 80061d6:	4819      	ldr	r0, [pc, #100]	; (800623c <main+0x14c>)
 80061d8:	f7fd feee 	bl	8003fb8 <DS3231_Init>



	initButton(&myDisplayMode);
 80061dc:	4818      	ldr	r0, [pc, #96]	; (8006240 <main+0x150>)
 80061de:	f7fd fc0b 	bl	80039f8 <initButton>


	initApp_Display(&myDisplayMode, &myRTC);
 80061e2:	4914      	ldr	r1, [pc, #80]	; (8006234 <main+0x144>)
 80061e4:	4816      	ldr	r0, [pc, #88]	; (8006240 <main+0x150>)
 80061e6:	f7fa f99f 	bl	8000528 <initApp_Display>
//	  if (flag < 3)	{
//			  flag ++;
//			  SIM_sendCMD((uint8_t*)"AT+CMGD=1,1", (uint8_t*)"OK",
//			  					ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, 1000);
//	  }
	  processApp_MCU();
 80061ea:	f7fa fb23 	bl	8000834 <processApp_MCU>
	  processingApp_display();
 80061ee:	f7fa fa0d 	bl	800060c <processingApp_display>
	  processApp_MQTT();
 80061f2:	f7fa fc3b 	bl	8000a6c <processApp_MQTT>
	  processingApp_MBA_stepmor();
 80061f6:	f7fa fad7 	bl	80007a8 <processingApp_MBA_stepmor>
	  processApp_SMS();
 80061fa:	f7fa fe3b 	bl	8000e74 <processApp_SMS>
//	  DS3231_GetTime(&myRTC);

//	  testSMS();
//	  myStation.getGPStimeflag = 1;
//	  HAL_GPIO_TogglePin(MBA_CONTACTOR_GPIO_Port, MBA_CONTACTOR_Pin);
	  HAL_Delay(50);
 80061fe:	2032      	movs	r0, #50	; 0x32
 8006200:	f001 fce4 	bl	8007bcc <HAL_Delay>
	  processApp_MCU();
 8006204:	e7f1      	b.n	80061ea <main+0xfa>
 8006206:	bf00      	nop
 8006208:	200029e0 	.word	0x200029e0
 800620c:	20000474 	.word	0x20000474
 8006210:	0801fc00 	.word	0x0801fc00
 8006214:	20001770 	.word	0x20001770
 8006218:	0800f13c 	.word	0x0800f13c
 800621c:	0800f154 	.word	0x0800f154
 8006220:	0800f168 	.word	0x0800f168
 8006224:	0800f16c 	.word	0x0800f16c
 8006228:	20002150 	.word	0x20002150
 800622c:	200029ec 	.word	0x200029ec
 8006230:	200016ec 	.word	0x200016ec
 8006234:	200029e4 	.word	0x200029e4
 8006238:	200018c0 	.word	0x200018c0
 800623c:	2000171c 	.word	0x2000171c
 8006240:	200029f4 	.word	0x200029f4

08006244 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b094      	sub	sp, #80	; 0x50
 8006248:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800624a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800624e:	2228      	movs	r2, #40	; 0x28
 8006250:	2100      	movs	r1, #0
 8006252:	4618      	mov	r0, r3
 8006254:	f005 ff7e 	bl	800c154 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006258:	f107 0314 	add.w	r3, r7, #20
 800625c:	2200      	movs	r2, #0
 800625e:	601a      	str	r2, [r3, #0]
 8006260:	605a      	str	r2, [r3, #4]
 8006262:	609a      	str	r2, [r3, #8]
 8006264:	60da      	str	r2, [r3, #12]
 8006266:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006268:	1d3b      	adds	r3, r7, #4
 800626a:	2200      	movs	r2, #0
 800626c:	601a      	str	r2, [r3, #0]
 800626e:	605a      	str	r2, [r3, #4]
 8006270:	609a      	str	r2, [r3, #8]
 8006272:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8006274:	2301      	movs	r3, #1
 8006276:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8006278:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800627c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800627e:	2300      	movs	r3, #0
 8006280:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006282:	2301      	movs	r3, #1
 8006284:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006286:	2302      	movs	r3, #2
 8006288:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800628a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800628e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8006290:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8006294:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006296:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800629a:	4618      	mov	r0, r3
 800629c:	f003 fe80 	bl	8009fa0 <HAL_RCC_OscConfig>
 80062a0:	4603      	mov	r3, r0
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d001      	beq.n	80062aa <SystemClock_Config+0x66>
  {
    Error_Handler();
 80062a6:	f000 f85b 	bl	8006360 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80062aa:	230f      	movs	r3, #15
 80062ac:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80062ae:	2302      	movs	r3, #2
 80062b0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80062b2:	2300      	movs	r3, #0
 80062b4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80062b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80062ba:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80062bc:	2300      	movs	r3, #0
 80062be:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80062c0:	f107 0314 	add.w	r3, r7, #20
 80062c4:	2102      	movs	r1, #2
 80062c6:	4618      	mov	r0, r3
 80062c8:	f004 f8ec 	bl	800a4a4 <HAL_RCC_ClockConfig>
 80062cc:	4603      	mov	r3, r0
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d001      	beq.n	80062d6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80062d2:	f000 f845 	bl	8006360 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80062d6:	2302      	movs	r3, #2
 80062d8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80062da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062de:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80062e0:	1d3b      	adds	r3, r7, #4
 80062e2:	4618      	mov	r0, r3
 80062e4:	f004 fa6c 	bl	800a7c0 <HAL_RCCEx_PeriphCLKConfig>
 80062e8:	4603      	mov	r3, r0
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d001      	beq.n	80062f2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80062ee:	f000 f837 	bl	8006360 <Error_Handler>
  }
}
 80062f2:	bf00      	nop
 80062f4:	3750      	adds	r7, #80	; 0x50
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bd80      	pop	{r7, pc}
	...

080062fc <currentConvert>:

/* USER CODE BEGIN 4 */

static void currentConvert(uint32_t volatile *adcval)
{
 80062fc:	b480      	push	{r7}
 80062fe:	b083      	sub	sp, #12
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
	if (adccount == 1000)	{
 8006304:	4b12      	ldr	r3, [pc, #72]	; (8006350 <currentConvert+0x54>)
 8006306:	881b      	ldrh	r3, [r3, #0]
 8006308:	b29b      	uxth	r3, r3
 800630a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800630e:	d119      	bne.n	8006344 <currentConvert+0x48>
		myStation.stCurrent = (uint16_t)( ( ( (*adcval)*3/4095) + 50)/6);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681a      	ldr	r2, [r3, #0]
 8006314:	4613      	mov	r3, r2
 8006316:	005b      	lsls	r3, r3, #1
 8006318:	441a      	add	r2, r3
 800631a:	4b0e      	ldr	r3, [pc, #56]	; (8006354 <currentConvert+0x58>)
 800631c:	fba3 1302 	umull	r1, r3, r3, r2
 8006320:	1ad2      	subs	r2, r2, r3
 8006322:	0852      	lsrs	r2, r2, #1
 8006324:	4413      	add	r3, r2
 8006326:	0adb      	lsrs	r3, r3, #11
 8006328:	3332      	adds	r3, #50	; 0x32
 800632a:	4a0b      	ldr	r2, [pc, #44]	; (8006358 <currentConvert+0x5c>)
 800632c:	fba2 2303 	umull	r2, r3, r2, r3
 8006330:	089b      	lsrs	r3, r3, #2
 8006332:	b29a      	uxth	r2, r3
 8006334:	4b09      	ldr	r3, [pc, #36]	; (800635c <currentConvert+0x60>)
 8006336:	805a      	strh	r2, [r3, #2]
		*adcval = 0;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2200      	movs	r2, #0
 800633c:	601a      	str	r2, [r3, #0]
		adccount = 0;
 800633e:	4b04      	ldr	r3, [pc, #16]	; (8006350 <currentConvert+0x54>)
 8006340:	2200      	movs	r2, #0
 8006342:	801a      	strh	r2, [r3, #0]
	}
}
 8006344:	bf00      	nop
 8006346:	370c      	adds	r7, #12
 8006348:	46bd      	mov	sp, r7
 800634a:	bc80      	pop	{r7}
 800634c:	4770      	bx	lr
 800634e:	bf00      	nop
 8006350:	200029fc 	.word	0x200029fc
 8006354:	00100101 	.word	0x00100101
 8006358:	aaaaaaab 	.word	0xaaaaaaab
 800635c:	20000474 	.word	0x20000474

08006360 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006360:	b480      	push	{r7}
 8006362:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006364:	b672      	cpsid	i
}
 8006366:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006368:	e7fe      	b.n	8006368 <Error_Handler+0x8>
	...

0800636c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800636c:	b480      	push	{r7}
 800636e:	b085      	sub	sp, #20
 8006370:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8006372:	4b15      	ldr	r3, [pc, #84]	; (80063c8 <HAL_MspInit+0x5c>)
 8006374:	699b      	ldr	r3, [r3, #24]
 8006376:	4a14      	ldr	r2, [pc, #80]	; (80063c8 <HAL_MspInit+0x5c>)
 8006378:	f043 0301 	orr.w	r3, r3, #1
 800637c:	6193      	str	r3, [r2, #24]
 800637e:	4b12      	ldr	r3, [pc, #72]	; (80063c8 <HAL_MspInit+0x5c>)
 8006380:	699b      	ldr	r3, [r3, #24]
 8006382:	f003 0301 	and.w	r3, r3, #1
 8006386:	60bb      	str	r3, [r7, #8]
 8006388:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800638a:	4b0f      	ldr	r3, [pc, #60]	; (80063c8 <HAL_MspInit+0x5c>)
 800638c:	69db      	ldr	r3, [r3, #28]
 800638e:	4a0e      	ldr	r2, [pc, #56]	; (80063c8 <HAL_MspInit+0x5c>)
 8006390:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006394:	61d3      	str	r3, [r2, #28]
 8006396:	4b0c      	ldr	r3, [pc, #48]	; (80063c8 <HAL_MspInit+0x5c>)
 8006398:	69db      	ldr	r3, [r3, #28]
 800639a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800639e:	607b      	str	r3, [r7, #4]
 80063a0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80063a2:	4b0a      	ldr	r3, [pc, #40]	; (80063cc <HAL_MspInit+0x60>)
 80063a4:	685b      	ldr	r3, [r3, #4]
 80063a6:	60fb      	str	r3, [r7, #12]
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80063ae:	60fb      	str	r3, [r7, #12]
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80063b6:	60fb      	str	r3, [r7, #12]
 80063b8:	4a04      	ldr	r2, [pc, #16]	; (80063cc <HAL_MspInit+0x60>)
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80063be:	bf00      	nop
 80063c0:	3714      	adds	r7, #20
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bc80      	pop	{r7}
 80063c6:	4770      	bx	lr
 80063c8:	40021000 	.word	0x40021000
 80063cc:	40010000 	.word	0x40010000

080063d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80063d0:	b480      	push	{r7}
 80063d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80063d4:	e7fe      	b.n	80063d4 <NMI_Handler+0x4>

080063d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80063d6:	b480      	push	{r7}
 80063d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80063da:	e7fe      	b.n	80063da <HardFault_Handler+0x4>

080063dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80063dc:	b480      	push	{r7}
 80063de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80063e0:	e7fe      	b.n	80063e0 <MemManage_Handler+0x4>

080063e2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80063e2:	b480      	push	{r7}
 80063e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80063e6:	e7fe      	b.n	80063e6 <BusFault_Handler+0x4>

080063e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80063e8:	b480      	push	{r7}
 80063ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80063ec:	e7fe      	b.n	80063ec <UsageFault_Handler+0x4>

080063ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80063ee:	b480      	push	{r7}
 80063f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80063f2:	bf00      	nop
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bc80      	pop	{r7}
 80063f8:	4770      	bx	lr

080063fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80063fa:	b480      	push	{r7}
 80063fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80063fe:	bf00      	nop
 8006400:	46bd      	mov	sp, r7
 8006402:	bc80      	pop	{r7}
 8006404:	4770      	bx	lr

08006406 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006406:	b480      	push	{r7}
 8006408:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800640a:	bf00      	nop
 800640c:	46bd      	mov	sp, r7
 800640e:	bc80      	pop	{r7}
 8006410:	4770      	bx	lr

08006412 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006412:	b580      	push	{r7, lr}
 8006414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006416:	f001 fbbd 	bl	8007b94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800641a:	bf00      	nop
 800641c:	bd80      	pop	{r7, pc}

0800641e <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800641e:	b580      	push	{r7, lr}
 8006420:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RTC_ALARM_TRIGGER_Pin);
 8006422:	2001      	movs	r0, #1
 8006424:	f002 fd70 	bl	8008f08 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8006428:	bf00      	nop
 800642a:	bd80      	pop	{r7, pc}

0800642c <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LIMIT_SWITCH_MIN_Pin);
 8006430:	2004      	movs	r0, #4
 8006432:	f002 fd69 	bl	8008f08 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8006436:	bf00      	nop
 8006438:	bd80      	pop	{r7, pc}
	...

0800643c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8006440:	4802      	ldr	r0, [pc, #8]	; (800644c <DMA1_Channel3_IRQHandler+0x10>)
 8006442:	f002 fa61 	bl	8008908 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8006446:	bf00      	nop
 8006448:	bd80      	pop	{r7, pc}
 800644a:	bf00      	nop
 800644c:	20002bb8 	.word	0x20002bb8

08006450 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8006454:	4802      	ldr	r0, [pc, #8]	; (8006460 <DMA1_Channel5_IRQHandler+0x10>)
 8006456:	f002 fa57 	bl	8008908 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800645a:	bf00      	nop
 800645c:	bd80      	pop	{r7, pc}
 800645e:	bf00      	nop
 8006460:	20002b30 	.word	0x20002b30

08006464 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8006468:	4802      	ldr	r0, [pc, #8]	; (8006474 <DMA1_Channel6_IRQHandler+0x10>)
 800646a:	f002 fa4d 	bl	8008908 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800646e:	bf00      	nop
 8006470:	bd80      	pop	{r7, pc}
 8006472:	bf00      	nop
 8006474:	20002b74 	.word	0x20002b74

08006478 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800647c:	4802      	ldr	r0, [pc, #8]	; (8006488 <ADC1_2_IRQHandler+0x10>)
 800647e:	f001 fd63 	bl	8007f48 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8006482:	bf00      	nop
 8006484:	bd80      	pop	{r7, pc}
 8006486:	bf00      	nop
 8006488:	200016ec 	.word	0x200016ec

0800648c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LIMIT_SWITCH_MAX_Pin);
 8006490:	2020      	movs	r0, #32
 8006492:	f002 fd39 	bl	8008f08 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_DOWN_Pin);
 8006496:	f44f 7080 	mov.w	r0, #256	; 0x100
 800649a:	f002 fd35 	bl	8008f08 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_UP_Pin);
 800649e:	f44f 7000 	mov.w	r0, #512	; 0x200
 80064a2:	f002 fd31 	bl	8008f08 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80064a6:	bf00      	nop
 80064a8:	bd80      	pop	{r7, pc}
	...

080064ac <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80064b0:	4802      	ldr	r0, [pc, #8]	; (80064bc <USART1_IRQHandler+0x10>)
 80064b2:	f004 fdd7 	bl	800b064 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80064b6:	bf00      	nop
 80064b8:	bd80      	pop	{r7, pc}
 80064ba:	bf00      	nop
 80064bc:	20002a58 	.word	0x20002a58

080064c0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80064c4:	4802      	ldr	r0, [pc, #8]	; (80064d0 <USART2_IRQHandler+0x10>)
 80064c6:	f004 fdcd 	bl	800b064 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80064ca:	bf00      	nop
 80064cc:	bd80      	pop	{r7, pc}
 80064ce:	bf00      	nop
 80064d0:	20002aa0 	.word	0x20002aa0

080064d4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80064d8:	4802      	ldr	r0, [pc, #8]	; (80064e4 <USART3_IRQHandler+0x10>)
 80064da:	f004 fdc3 	bl	800b064 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80064de:	bf00      	nop
 80064e0:	bd80      	pop	{r7, pc}
 80064e2:	bf00      	nop
 80064e4:	20002ae8 	.word	0x20002ae8

080064e8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_MENU_Pin);
 80064ec:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80064f0:	f002 fd0a 	bl	8008f08 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_OK_Pin);
 80064f4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80064f8:	f002 fd06 	bl	8008f08 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80064fc:	bf00      	nop
 80064fe:	bd80      	pop	{r7, pc}

08006500 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006500:	b480      	push	{r7}
 8006502:	af00      	add	r7, sp, #0
	return 1;
 8006504:	2301      	movs	r3, #1
}
 8006506:	4618      	mov	r0, r3
 8006508:	46bd      	mov	sp, r7
 800650a:	bc80      	pop	{r7}
 800650c:	4770      	bx	lr

0800650e <_kill>:

int _kill(int pid, int sig)
{
 800650e:	b580      	push	{r7, lr}
 8006510:	b082      	sub	sp, #8
 8006512:	af00      	add	r7, sp, #0
 8006514:	6078      	str	r0, [r7, #4]
 8006516:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8006518:	f005 fcb4 	bl	800be84 <__errno>
 800651c:	4603      	mov	r3, r0
 800651e:	2216      	movs	r2, #22
 8006520:	601a      	str	r2, [r3, #0]
	return -1;
 8006522:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006526:	4618      	mov	r0, r3
 8006528:	3708      	adds	r7, #8
 800652a:	46bd      	mov	sp, r7
 800652c:	bd80      	pop	{r7, pc}

0800652e <_exit>:

void _exit (int status)
{
 800652e:	b580      	push	{r7, lr}
 8006530:	b082      	sub	sp, #8
 8006532:	af00      	add	r7, sp, #0
 8006534:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8006536:	f04f 31ff 	mov.w	r1, #4294967295
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f7ff ffe7 	bl	800650e <_kill>
	while (1) {}		/* Make sure we hang here */
 8006540:	e7fe      	b.n	8006540 <_exit+0x12>

08006542 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006542:	b580      	push	{r7, lr}
 8006544:	b086      	sub	sp, #24
 8006546:	af00      	add	r7, sp, #0
 8006548:	60f8      	str	r0, [r7, #12]
 800654a:	60b9      	str	r1, [r7, #8]
 800654c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800654e:	2300      	movs	r3, #0
 8006550:	617b      	str	r3, [r7, #20]
 8006552:	e00a      	b.n	800656a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8006554:	f3af 8000 	nop.w
 8006558:	4601      	mov	r1, r0
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	1c5a      	adds	r2, r3, #1
 800655e:	60ba      	str	r2, [r7, #8]
 8006560:	b2ca      	uxtb	r2, r1
 8006562:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006564:	697b      	ldr	r3, [r7, #20]
 8006566:	3301      	adds	r3, #1
 8006568:	617b      	str	r3, [r7, #20]
 800656a:	697a      	ldr	r2, [r7, #20]
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	429a      	cmp	r2, r3
 8006570:	dbf0      	blt.n	8006554 <_read+0x12>
	}

return len;
 8006572:	687b      	ldr	r3, [r7, #4]
}
 8006574:	4618      	mov	r0, r3
 8006576:	3718      	adds	r7, #24
 8006578:	46bd      	mov	sp, r7
 800657a:	bd80      	pop	{r7, pc}

0800657c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b086      	sub	sp, #24
 8006580:	af00      	add	r7, sp, #0
 8006582:	60f8      	str	r0, [r7, #12]
 8006584:	60b9      	str	r1, [r7, #8]
 8006586:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006588:	2300      	movs	r3, #0
 800658a:	617b      	str	r3, [r7, #20]
 800658c:	e009      	b.n	80065a2 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	1c5a      	adds	r2, r3, #1
 8006592:	60ba      	str	r2, [r7, #8]
 8006594:	781b      	ldrb	r3, [r3, #0]
 8006596:	4618      	mov	r0, r3
 8006598:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	3301      	adds	r3, #1
 80065a0:	617b      	str	r3, [r7, #20]
 80065a2:	697a      	ldr	r2, [r7, #20]
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	429a      	cmp	r2, r3
 80065a8:	dbf1      	blt.n	800658e <_write+0x12>
	}
	return len;
 80065aa:	687b      	ldr	r3, [r7, #4]
}
 80065ac:	4618      	mov	r0, r3
 80065ae:	3718      	adds	r7, #24
 80065b0:	46bd      	mov	sp, r7
 80065b2:	bd80      	pop	{r7, pc}

080065b4 <_close>:

int _close(int file)
{
 80065b4:	b480      	push	{r7}
 80065b6:	b083      	sub	sp, #12
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
	return -1;
 80065bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80065c0:	4618      	mov	r0, r3
 80065c2:	370c      	adds	r7, #12
 80065c4:	46bd      	mov	sp, r7
 80065c6:	bc80      	pop	{r7}
 80065c8:	4770      	bx	lr

080065ca <_fstat>:


int _fstat(int file, struct stat *st)
{
 80065ca:	b480      	push	{r7}
 80065cc:	b083      	sub	sp, #12
 80065ce:	af00      	add	r7, sp, #0
 80065d0:	6078      	str	r0, [r7, #4]
 80065d2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80065da:	605a      	str	r2, [r3, #4]
	return 0;
 80065dc:	2300      	movs	r3, #0
}
 80065de:	4618      	mov	r0, r3
 80065e0:	370c      	adds	r7, #12
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bc80      	pop	{r7}
 80065e6:	4770      	bx	lr

080065e8 <_isatty>:

int _isatty(int file)
{
 80065e8:	b480      	push	{r7}
 80065ea:	b083      	sub	sp, #12
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
	return 1;
 80065f0:	2301      	movs	r3, #1
}
 80065f2:	4618      	mov	r0, r3
 80065f4:	370c      	adds	r7, #12
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bc80      	pop	{r7}
 80065fa:	4770      	bx	lr

080065fc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80065fc:	b480      	push	{r7}
 80065fe:	b085      	sub	sp, #20
 8006600:	af00      	add	r7, sp, #0
 8006602:	60f8      	str	r0, [r7, #12]
 8006604:	60b9      	str	r1, [r7, #8]
 8006606:	607a      	str	r2, [r7, #4]
	return 0;
 8006608:	2300      	movs	r3, #0
}
 800660a:	4618      	mov	r0, r3
 800660c:	3714      	adds	r7, #20
 800660e:	46bd      	mov	sp, r7
 8006610:	bc80      	pop	{r7}
 8006612:	4770      	bx	lr

08006614 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b086      	sub	sp, #24
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800661c:	4a14      	ldr	r2, [pc, #80]	; (8006670 <_sbrk+0x5c>)
 800661e:	4b15      	ldr	r3, [pc, #84]	; (8006674 <_sbrk+0x60>)
 8006620:	1ad3      	subs	r3, r2, r3
 8006622:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006624:	697b      	ldr	r3, [r7, #20]
 8006626:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006628:	4b13      	ldr	r3, [pc, #76]	; (8006678 <_sbrk+0x64>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d102      	bne.n	8006636 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006630:	4b11      	ldr	r3, [pc, #68]	; (8006678 <_sbrk+0x64>)
 8006632:	4a12      	ldr	r2, [pc, #72]	; (800667c <_sbrk+0x68>)
 8006634:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006636:	4b10      	ldr	r3, [pc, #64]	; (8006678 <_sbrk+0x64>)
 8006638:	681a      	ldr	r2, [r3, #0]
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	4413      	add	r3, r2
 800663e:	693a      	ldr	r2, [r7, #16]
 8006640:	429a      	cmp	r2, r3
 8006642:	d207      	bcs.n	8006654 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006644:	f005 fc1e 	bl	800be84 <__errno>
 8006648:	4603      	mov	r3, r0
 800664a:	220c      	movs	r2, #12
 800664c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800664e:	f04f 33ff 	mov.w	r3, #4294967295
 8006652:	e009      	b.n	8006668 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006654:	4b08      	ldr	r3, [pc, #32]	; (8006678 <_sbrk+0x64>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800665a:	4b07      	ldr	r3, [pc, #28]	; (8006678 <_sbrk+0x64>)
 800665c:	681a      	ldr	r2, [r3, #0]
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	4413      	add	r3, r2
 8006662:	4a05      	ldr	r2, [pc, #20]	; (8006678 <_sbrk+0x64>)
 8006664:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006666:	68fb      	ldr	r3, [r7, #12]
}
 8006668:	4618      	mov	r0, r3
 800666a:	3718      	adds	r7, #24
 800666c:	46bd      	mov	sp, r7
 800666e:	bd80      	pop	{r7, pc}
 8006670:	20005000 	.word	0x20005000
 8006674:	00000400 	.word	0x00000400
 8006678:	20002a0c 	.word	0x20002a0c
 800667c:	20002c40 	.word	0x20002c40

08006680 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8006680:	b480      	push	{r7}
 8006682:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006684:	bf00      	nop
 8006686:	46bd      	mov	sp, r7
 8006688:	bc80      	pop	{r7}
 800668a:	4770      	bx	lr

0800668c <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b086      	sub	sp, #24
 8006690:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006692:	f107 0308 	add.w	r3, r7, #8
 8006696:	2200      	movs	r2, #0
 8006698:	601a      	str	r2, [r3, #0]
 800669a:	605a      	str	r2, [r3, #4]
 800669c:	609a      	str	r2, [r3, #8]
 800669e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80066a0:	463b      	mov	r3, r7
 80066a2:	2200      	movs	r2, #0
 80066a4:	601a      	str	r2, [r3, #0]
 80066a6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80066a8:	4b1e      	ldr	r3, [pc, #120]	; (8006724 <MX_TIM1_Init+0x98>)
 80066aa:	4a1f      	ldr	r2, [pc, #124]	; (8006728 <MX_TIM1_Init+0x9c>)
 80066ac:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 80066ae:	4b1d      	ldr	r3, [pc, #116]	; (8006724 <MX_TIM1_Init+0x98>)
 80066b0:	2247      	movs	r2, #71	; 0x47
 80066b2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80066b4:	4b1b      	ldr	r3, [pc, #108]	; (8006724 <MX_TIM1_Init+0x98>)
 80066b6:	2200      	movs	r2, #0
 80066b8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xFFFF-1;
 80066ba:	4b1a      	ldr	r3, [pc, #104]	; (8006724 <MX_TIM1_Init+0x98>)
 80066bc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80066c0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80066c2:	4b18      	ldr	r3, [pc, #96]	; (8006724 <MX_TIM1_Init+0x98>)
 80066c4:	2200      	movs	r2, #0
 80066c6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80066c8:	4b16      	ldr	r3, [pc, #88]	; (8006724 <MX_TIM1_Init+0x98>)
 80066ca:	2200      	movs	r2, #0
 80066cc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80066ce:	4b15      	ldr	r3, [pc, #84]	; (8006724 <MX_TIM1_Init+0x98>)
 80066d0:	2200      	movs	r2, #0
 80066d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80066d4:	4813      	ldr	r0, [pc, #76]	; (8006724 <MX_TIM1_Init+0x98>)
 80066d6:	f004 f929 	bl	800a92c <HAL_TIM_Base_Init>
 80066da:	4603      	mov	r3, r0
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d001      	beq.n	80066e4 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80066e0:	f7ff fe3e 	bl	8006360 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80066e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80066e8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80066ea:	f107 0308 	add.w	r3, r7, #8
 80066ee:	4619      	mov	r1, r3
 80066f0:	480c      	ldr	r0, [pc, #48]	; (8006724 <MX_TIM1_Init+0x98>)
 80066f2:	f004 f96a 	bl	800a9ca <HAL_TIM_ConfigClockSource>
 80066f6:	4603      	mov	r3, r0
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d001      	beq.n	8006700 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80066fc:	f7ff fe30 	bl	8006360 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006700:	2300      	movs	r3, #0
 8006702:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006704:	2300      	movs	r3, #0
 8006706:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8006708:	463b      	mov	r3, r7
 800670a:	4619      	mov	r1, r3
 800670c:	4805      	ldr	r0, [pc, #20]	; (8006724 <MX_TIM1_Init+0x98>)
 800670e:	f004 fb1b 	bl	800ad48 <HAL_TIMEx_MasterConfigSynchronization>
 8006712:	4603      	mov	r3, r0
 8006714:	2b00      	cmp	r3, #0
 8006716:	d001      	beq.n	800671c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8006718:	f7ff fe22 	bl	8006360 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800671c:	bf00      	nop
 800671e:	3718      	adds	r7, #24
 8006720:	46bd      	mov	sp, r7
 8006722:	bd80      	pop	{r7, pc}
 8006724:	20002a10 	.word	0x20002a10
 8006728:	40012c00 	.word	0x40012c00

0800672c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800672c:	b480      	push	{r7}
 800672e:	b085      	sub	sp, #20
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	4a09      	ldr	r2, [pc, #36]	; (8006760 <HAL_TIM_Base_MspInit+0x34>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d10b      	bne.n	8006756 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800673e:	4b09      	ldr	r3, [pc, #36]	; (8006764 <HAL_TIM_Base_MspInit+0x38>)
 8006740:	699b      	ldr	r3, [r3, #24]
 8006742:	4a08      	ldr	r2, [pc, #32]	; (8006764 <HAL_TIM_Base_MspInit+0x38>)
 8006744:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006748:	6193      	str	r3, [r2, #24]
 800674a:	4b06      	ldr	r3, [pc, #24]	; (8006764 <HAL_TIM_Base_MspInit+0x38>)
 800674c:	699b      	ldr	r3, [r3, #24]
 800674e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006752:	60fb      	str	r3, [r7, #12]
 8006754:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8006756:	bf00      	nop
 8006758:	3714      	adds	r7, #20
 800675a:	46bd      	mov	sp, r7
 800675c:	bc80      	pop	{r7}
 800675e:	4770      	bx	lr
 8006760:	40012c00 	.word	0x40012c00
 8006764:	40021000 	.word	0x40021000

08006768 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800676c:	4b11      	ldr	r3, [pc, #68]	; (80067b4 <MX_USART1_UART_Init+0x4c>)
 800676e:	4a12      	ldr	r2, [pc, #72]	; (80067b8 <MX_USART1_UART_Init+0x50>)
 8006770:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8006772:	4b10      	ldr	r3, [pc, #64]	; (80067b4 <MX_USART1_UART_Init+0x4c>)
 8006774:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006778:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800677a:	4b0e      	ldr	r3, [pc, #56]	; (80067b4 <MX_USART1_UART_Init+0x4c>)
 800677c:	2200      	movs	r2, #0
 800677e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006780:	4b0c      	ldr	r3, [pc, #48]	; (80067b4 <MX_USART1_UART_Init+0x4c>)
 8006782:	2200      	movs	r2, #0
 8006784:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8006786:	4b0b      	ldr	r3, [pc, #44]	; (80067b4 <MX_USART1_UART_Init+0x4c>)
 8006788:	2200      	movs	r2, #0
 800678a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800678c:	4b09      	ldr	r3, [pc, #36]	; (80067b4 <MX_USART1_UART_Init+0x4c>)
 800678e:	220c      	movs	r2, #12
 8006790:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006792:	4b08      	ldr	r3, [pc, #32]	; (80067b4 <MX_USART1_UART_Init+0x4c>)
 8006794:	2200      	movs	r2, #0
 8006796:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006798:	4b06      	ldr	r3, [pc, #24]	; (80067b4 <MX_USART1_UART_Init+0x4c>)
 800679a:	2200      	movs	r2, #0
 800679c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800679e:	4805      	ldr	r0, [pc, #20]	; (80067b4 <MX_USART1_UART_Init+0x4c>)
 80067a0:	f004 fb30 	bl	800ae04 <HAL_UART_Init>
 80067a4:	4603      	mov	r3, r0
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d001      	beq.n	80067ae <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80067aa:	f7ff fdd9 	bl	8006360 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80067ae:	bf00      	nop
 80067b0:	bd80      	pop	{r7, pc}
 80067b2:	bf00      	nop
 80067b4:	20002a58 	.word	0x20002a58
 80067b8:	40013800 	.word	0x40013800

080067bc <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80067c0:	4b11      	ldr	r3, [pc, #68]	; (8006808 <MX_USART2_UART_Init+0x4c>)
 80067c2:	4a12      	ldr	r2, [pc, #72]	; (800680c <MX_USART2_UART_Init+0x50>)
 80067c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80067c6:	4b10      	ldr	r3, [pc, #64]	; (8006808 <MX_USART2_UART_Init+0x4c>)
 80067c8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80067cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80067ce:	4b0e      	ldr	r3, [pc, #56]	; (8006808 <MX_USART2_UART_Init+0x4c>)
 80067d0:	2200      	movs	r2, #0
 80067d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80067d4:	4b0c      	ldr	r3, [pc, #48]	; (8006808 <MX_USART2_UART_Init+0x4c>)
 80067d6:	2200      	movs	r2, #0
 80067d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80067da:	4b0b      	ldr	r3, [pc, #44]	; (8006808 <MX_USART2_UART_Init+0x4c>)
 80067dc:	2200      	movs	r2, #0
 80067de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80067e0:	4b09      	ldr	r3, [pc, #36]	; (8006808 <MX_USART2_UART_Init+0x4c>)
 80067e2:	220c      	movs	r2, #12
 80067e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80067e6:	4b08      	ldr	r3, [pc, #32]	; (8006808 <MX_USART2_UART_Init+0x4c>)
 80067e8:	2200      	movs	r2, #0
 80067ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80067ec:	4b06      	ldr	r3, [pc, #24]	; (8006808 <MX_USART2_UART_Init+0x4c>)
 80067ee:	2200      	movs	r2, #0
 80067f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80067f2:	4805      	ldr	r0, [pc, #20]	; (8006808 <MX_USART2_UART_Init+0x4c>)
 80067f4:	f004 fb06 	bl	800ae04 <HAL_UART_Init>
 80067f8:	4603      	mov	r3, r0
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d001      	beq.n	8006802 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80067fe:	f7ff fdaf 	bl	8006360 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8006802:	bf00      	nop
 8006804:	bd80      	pop	{r7, pc}
 8006806:	bf00      	nop
 8006808:	20002aa0 	.word	0x20002aa0
 800680c:	40004400 	.word	0x40004400

08006810 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8006814:	4b11      	ldr	r3, [pc, #68]	; (800685c <MX_USART3_UART_Init+0x4c>)
 8006816:	4a12      	ldr	r2, [pc, #72]	; (8006860 <MX_USART3_UART_Init+0x50>)
 8006818:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800681a:	4b10      	ldr	r3, [pc, #64]	; (800685c <MX_USART3_UART_Init+0x4c>)
 800681c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006820:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8006822:	4b0e      	ldr	r3, [pc, #56]	; (800685c <MX_USART3_UART_Init+0x4c>)
 8006824:	2200      	movs	r2, #0
 8006826:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8006828:	4b0c      	ldr	r3, [pc, #48]	; (800685c <MX_USART3_UART_Init+0x4c>)
 800682a:	2200      	movs	r2, #0
 800682c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800682e:	4b0b      	ldr	r3, [pc, #44]	; (800685c <MX_USART3_UART_Init+0x4c>)
 8006830:	2200      	movs	r2, #0
 8006832:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8006834:	4b09      	ldr	r3, [pc, #36]	; (800685c <MX_USART3_UART_Init+0x4c>)
 8006836:	220c      	movs	r2, #12
 8006838:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800683a:	4b08      	ldr	r3, [pc, #32]	; (800685c <MX_USART3_UART_Init+0x4c>)
 800683c:	2200      	movs	r2, #0
 800683e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8006840:	4b06      	ldr	r3, [pc, #24]	; (800685c <MX_USART3_UART_Init+0x4c>)
 8006842:	2200      	movs	r2, #0
 8006844:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8006846:	4805      	ldr	r0, [pc, #20]	; (800685c <MX_USART3_UART_Init+0x4c>)
 8006848:	f004 fadc 	bl	800ae04 <HAL_UART_Init>
 800684c:	4603      	mov	r3, r0
 800684e:	2b00      	cmp	r3, #0
 8006850:	d001      	beq.n	8006856 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8006852:	f7ff fd85 	bl	8006360 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8006856:	bf00      	nop
 8006858:	bd80      	pop	{r7, pc}
 800685a:	bf00      	nop
 800685c:	20002ae8 	.word	0x20002ae8
 8006860:	40004800 	.word	0x40004800

08006864 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b08e      	sub	sp, #56	; 0x38
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800686c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006870:	2200      	movs	r2, #0
 8006872:	601a      	str	r2, [r3, #0]
 8006874:	605a      	str	r2, [r3, #4]
 8006876:	609a      	str	r2, [r3, #8]
 8006878:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4a9e      	ldr	r2, [pc, #632]	; (8006af8 <HAL_UART_MspInit+0x294>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d16c      	bne.n	800695e <HAL_UART_MspInit+0xfa>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006884:	4b9d      	ldr	r3, [pc, #628]	; (8006afc <HAL_UART_MspInit+0x298>)
 8006886:	699b      	ldr	r3, [r3, #24]
 8006888:	4a9c      	ldr	r2, [pc, #624]	; (8006afc <HAL_UART_MspInit+0x298>)
 800688a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800688e:	6193      	str	r3, [r2, #24]
 8006890:	4b9a      	ldr	r3, [pc, #616]	; (8006afc <HAL_UART_MspInit+0x298>)
 8006892:	699b      	ldr	r3, [r3, #24]
 8006894:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006898:	623b      	str	r3, [r7, #32]
 800689a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800689c:	4b97      	ldr	r3, [pc, #604]	; (8006afc <HAL_UART_MspInit+0x298>)
 800689e:	699b      	ldr	r3, [r3, #24]
 80068a0:	4a96      	ldr	r2, [pc, #600]	; (8006afc <HAL_UART_MspInit+0x298>)
 80068a2:	f043 0308 	orr.w	r3, r3, #8
 80068a6:	6193      	str	r3, [r2, #24]
 80068a8:	4b94      	ldr	r3, [pc, #592]	; (8006afc <HAL_UART_MspInit+0x298>)
 80068aa:	699b      	ldr	r3, [r3, #24]
 80068ac:	f003 0308 	and.w	r3, r3, #8
 80068b0:	61fb      	str	r3, [r7, #28]
 80068b2:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = SIM_TX_Pin;
 80068b4:	2340      	movs	r3, #64	; 0x40
 80068b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80068b8:	2302      	movs	r3, #2
 80068ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80068bc:	2303      	movs	r3, #3
 80068be:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(SIM_TX_GPIO_Port, &GPIO_InitStruct);
 80068c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80068c4:	4619      	mov	r1, r3
 80068c6:	488e      	ldr	r0, [pc, #568]	; (8006b00 <HAL_UART_MspInit+0x29c>)
 80068c8:	f002 f952 	bl	8008b70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SIM_RX_Pin;
 80068cc:	2380      	movs	r3, #128	; 0x80
 80068ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80068d0:	2300      	movs	r3, #0
 80068d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068d4:	2300      	movs	r3, #0
 80068d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SIM_RX_GPIO_Port, &GPIO_InitStruct);
 80068d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80068dc:	4619      	mov	r1, r3
 80068de:	4888      	ldr	r0, [pc, #544]	; (8006b00 <HAL_UART_MspInit+0x29c>)
 80068e0:	f002 f946 	bl	8008b70 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 80068e4:	4b87      	ldr	r3, [pc, #540]	; (8006b04 <HAL_UART_MspInit+0x2a0>)
 80068e6:	685b      	ldr	r3, [r3, #4]
 80068e8:	637b      	str	r3, [r7, #52]	; 0x34
 80068ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068ec:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80068f0:	637b      	str	r3, [r7, #52]	; 0x34
 80068f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068f4:	f043 0304 	orr.w	r3, r3, #4
 80068f8:	637b      	str	r3, [r7, #52]	; 0x34
 80068fa:	4a82      	ldr	r2, [pc, #520]	; (8006b04 <HAL_UART_MspInit+0x2a0>)
 80068fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068fe:	6053      	str	r3, [r2, #4]

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8006900:	4b81      	ldr	r3, [pc, #516]	; (8006b08 <HAL_UART_MspInit+0x2a4>)
 8006902:	4a82      	ldr	r2, [pc, #520]	; (8006b0c <HAL_UART_MspInit+0x2a8>)
 8006904:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006906:	4b80      	ldr	r3, [pc, #512]	; (8006b08 <HAL_UART_MspInit+0x2a4>)
 8006908:	2200      	movs	r2, #0
 800690a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800690c:	4b7e      	ldr	r3, [pc, #504]	; (8006b08 <HAL_UART_MspInit+0x2a4>)
 800690e:	2200      	movs	r2, #0
 8006910:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006912:	4b7d      	ldr	r3, [pc, #500]	; (8006b08 <HAL_UART_MspInit+0x2a4>)
 8006914:	2280      	movs	r2, #128	; 0x80
 8006916:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006918:	4b7b      	ldr	r3, [pc, #492]	; (8006b08 <HAL_UART_MspInit+0x2a4>)
 800691a:	2200      	movs	r2, #0
 800691c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800691e:	4b7a      	ldr	r3, [pc, #488]	; (8006b08 <HAL_UART_MspInit+0x2a4>)
 8006920:	2200      	movs	r2, #0
 8006922:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8006924:	4b78      	ldr	r3, [pc, #480]	; (8006b08 <HAL_UART_MspInit+0x2a4>)
 8006926:	2200      	movs	r2, #0
 8006928:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800692a:	4b77      	ldr	r3, [pc, #476]	; (8006b08 <HAL_UART_MspInit+0x2a4>)
 800692c:	2200      	movs	r2, #0
 800692e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8006930:	4875      	ldr	r0, [pc, #468]	; (8006b08 <HAL_UART_MspInit+0x2a4>)
 8006932:	f001 fe7b 	bl	800862c <HAL_DMA_Init>
 8006936:	4603      	mov	r3, r0
 8006938:	2b00      	cmp	r3, #0
 800693a:	d001      	beq.n	8006940 <HAL_UART_MspInit+0xdc>
    {
      Error_Handler();
 800693c:	f7ff fd10 	bl	8006360 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	4a71      	ldr	r2, [pc, #452]	; (8006b08 <HAL_UART_MspInit+0x2a4>)
 8006944:	63da      	str	r2, [r3, #60]	; 0x3c
 8006946:	4a70      	ldr	r2, [pc, #448]	; (8006b08 <HAL_UART_MspInit+0x2a4>)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 800694c:	2200      	movs	r2, #0
 800694e:	2101      	movs	r1, #1
 8006950:	2025      	movs	r0, #37	; 0x25
 8006952:	f001 fe34 	bl	80085be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8006956:	2025      	movs	r0, #37	; 0x25
 8006958:	f001 fe4d 	bl	80085f6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800695c:	e0c8      	b.n	8006af0 <HAL_UART_MspInit+0x28c>
  else if(uartHandle->Instance==USART2)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4a6b      	ldr	r2, [pc, #428]	; (8006b10 <HAL_UART_MspInit+0x2ac>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d15e      	bne.n	8006a26 <HAL_UART_MspInit+0x1c2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8006968:	4b64      	ldr	r3, [pc, #400]	; (8006afc <HAL_UART_MspInit+0x298>)
 800696a:	69db      	ldr	r3, [r3, #28]
 800696c:	4a63      	ldr	r2, [pc, #396]	; (8006afc <HAL_UART_MspInit+0x298>)
 800696e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006972:	61d3      	str	r3, [r2, #28]
 8006974:	4b61      	ldr	r3, [pc, #388]	; (8006afc <HAL_UART_MspInit+0x298>)
 8006976:	69db      	ldr	r3, [r3, #28]
 8006978:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800697c:	61bb      	str	r3, [r7, #24]
 800697e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006980:	4b5e      	ldr	r3, [pc, #376]	; (8006afc <HAL_UART_MspInit+0x298>)
 8006982:	699b      	ldr	r3, [r3, #24]
 8006984:	4a5d      	ldr	r2, [pc, #372]	; (8006afc <HAL_UART_MspInit+0x298>)
 8006986:	f043 0304 	orr.w	r3, r3, #4
 800698a:	6193      	str	r3, [r2, #24]
 800698c:	4b5b      	ldr	r3, [pc, #364]	; (8006afc <HAL_UART_MspInit+0x298>)
 800698e:	699b      	ldr	r3, [r3, #24]
 8006990:	f003 0304 	and.w	r3, r3, #4
 8006994:	617b      	str	r3, [r7, #20]
 8006996:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006998:	2304      	movs	r3, #4
 800699a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800699c:	2302      	movs	r3, #2
 800699e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80069a0:	2303      	movs	r3, #3
 80069a2:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80069a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80069a8:	4619      	mov	r1, r3
 80069aa:	485a      	ldr	r0, [pc, #360]	; (8006b14 <HAL_UART_MspInit+0x2b0>)
 80069ac:	f002 f8e0 	bl	8008b70 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80069b0:	2308      	movs	r3, #8
 80069b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80069b4:	2300      	movs	r3, #0
 80069b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069b8:	2300      	movs	r3, #0
 80069ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80069bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80069c0:	4619      	mov	r1, r3
 80069c2:	4854      	ldr	r0, [pc, #336]	; (8006b14 <HAL_UART_MspInit+0x2b0>)
 80069c4:	f002 f8d4 	bl	8008b70 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80069c8:	4b53      	ldr	r3, [pc, #332]	; (8006b18 <HAL_UART_MspInit+0x2b4>)
 80069ca:	4a54      	ldr	r2, [pc, #336]	; (8006b1c <HAL_UART_MspInit+0x2b8>)
 80069cc:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80069ce:	4b52      	ldr	r3, [pc, #328]	; (8006b18 <HAL_UART_MspInit+0x2b4>)
 80069d0:	2200      	movs	r2, #0
 80069d2:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80069d4:	4b50      	ldr	r3, [pc, #320]	; (8006b18 <HAL_UART_MspInit+0x2b4>)
 80069d6:	2200      	movs	r2, #0
 80069d8:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80069da:	4b4f      	ldr	r3, [pc, #316]	; (8006b18 <HAL_UART_MspInit+0x2b4>)
 80069dc:	2280      	movs	r2, #128	; 0x80
 80069de:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80069e0:	4b4d      	ldr	r3, [pc, #308]	; (8006b18 <HAL_UART_MspInit+0x2b4>)
 80069e2:	2200      	movs	r2, #0
 80069e4:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80069e6:	4b4c      	ldr	r3, [pc, #304]	; (8006b18 <HAL_UART_MspInit+0x2b4>)
 80069e8:	2200      	movs	r2, #0
 80069ea:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80069ec:	4b4a      	ldr	r3, [pc, #296]	; (8006b18 <HAL_UART_MspInit+0x2b4>)
 80069ee:	2200      	movs	r2, #0
 80069f0:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80069f2:	4b49      	ldr	r3, [pc, #292]	; (8006b18 <HAL_UART_MspInit+0x2b4>)
 80069f4:	2200      	movs	r2, #0
 80069f6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80069f8:	4847      	ldr	r0, [pc, #284]	; (8006b18 <HAL_UART_MspInit+0x2b4>)
 80069fa:	f001 fe17 	bl	800862c <HAL_DMA_Init>
 80069fe:	4603      	mov	r3, r0
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d001      	beq.n	8006a08 <HAL_UART_MspInit+0x1a4>
      Error_Handler();
 8006a04:	f7ff fcac 	bl	8006360 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	4a43      	ldr	r2, [pc, #268]	; (8006b18 <HAL_UART_MspInit+0x2b4>)
 8006a0c:	63da      	str	r2, [r3, #60]	; 0x3c
 8006a0e:	4a42      	ldr	r2, [pc, #264]	; (8006b18 <HAL_UART_MspInit+0x2b4>)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 8006a14:	2200      	movs	r2, #0
 8006a16:	2101      	movs	r1, #1
 8006a18:	2026      	movs	r0, #38	; 0x26
 8006a1a:	f001 fdd0 	bl	80085be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8006a1e:	2026      	movs	r0, #38	; 0x26
 8006a20:	f001 fde9 	bl	80085f6 <HAL_NVIC_EnableIRQ>
}
 8006a24:	e064      	b.n	8006af0 <HAL_UART_MspInit+0x28c>
  else if(uartHandle->Instance==USART3)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4a3d      	ldr	r2, [pc, #244]	; (8006b20 <HAL_UART_MspInit+0x2bc>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d15f      	bne.n	8006af0 <HAL_UART_MspInit+0x28c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8006a30:	4b32      	ldr	r3, [pc, #200]	; (8006afc <HAL_UART_MspInit+0x298>)
 8006a32:	69db      	ldr	r3, [r3, #28]
 8006a34:	4a31      	ldr	r2, [pc, #196]	; (8006afc <HAL_UART_MspInit+0x298>)
 8006a36:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006a3a:	61d3      	str	r3, [r2, #28]
 8006a3c:	4b2f      	ldr	r3, [pc, #188]	; (8006afc <HAL_UART_MspInit+0x298>)
 8006a3e:	69db      	ldr	r3, [r3, #28]
 8006a40:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006a44:	613b      	str	r3, [r7, #16]
 8006a46:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006a48:	4b2c      	ldr	r3, [pc, #176]	; (8006afc <HAL_UART_MspInit+0x298>)
 8006a4a:	699b      	ldr	r3, [r3, #24]
 8006a4c:	4a2b      	ldr	r2, [pc, #172]	; (8006afc <HAL_UART_MspInit+0x298>)
 8006a4e:	f043 0308 	orr.w	r3, r3, #8
 8006a52:	6193      	str	r3, [r2, #24]
 8006a54:	4b29      	ldr	r3, [pc, #164]	; (8006afc <HAL_UART_MspInit+0x298>)
 8006a56:	699b      	ldr	r3, [r3, #24]
 8006a58:	f003 0308 	and.w	r3, r3, #8
 8006a5c:	60fb      	str	r3, [r7, #12]
 8006a5e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006a60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a64:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a66:	2302      	movs	r3, #2
 8006a68:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006a6a:	2303      	movs	r3, #3
 8006a6c:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006a6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006a72:	4619      	mov	r1, r3
 8006a74:	4822      	ldr	r0, [pc, #136]	; (8006b00 <HAL_UART_MspInit+0x29c>)
 8006a76:	f002 f87b 	bl	8008b70 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8006a7a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006a7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006a80:	2300      	movs	r3, #0
 8006a82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a84:	2300      	movs	r3, #0
 8006a86:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006a88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006a8c:	4619      	mov	r1, r3
 8006a8e:	481c      	ldr	r0, [pc, #112]	; (8006b00 <HAL_UART_MspInit+0x29c>)
 8006a90:	f002 f86e 	bl	8008b70 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8006a94:	4b23      	ldr	r3, [pc, #140]	; (8006b24 <HAL_UART_MspInit+0x2c0>)
 8006a96:	4a24      	ldr	r2, [pc, #144]	; (8006b28 <HAL_UART_MspInit+0x2c4>)
 8006a98:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006a9a:	4b22      	ldr	r3, [pc, #136]	; (8006b24 <HAL_UART_MspInit+0x2c0>)
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006aa0:	4b20      	ldr	r3, [pc, #128]	; (8006b24 <HAL_UART_MspInit+0x2c0>)
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006aa6:	4b1f      	ldr	r3, [pc, #124]	; (8006b24 <HAL_UART_MspInit+0x2c0>)
 8006aa8:	2280      	movs	r2, #128	; 0x80
 8006aaa:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006aac:	4b1d      	ldr	r3, [pc, #116]	; (8006b24 <HAL_UART_MspInit+0x2c0>)
 8006aae:	2200      	movs	r2, #0
 8006ab0:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006ab2:	4b1c      	ldr	r3, [pc, #112]	; (8006b24 <HAL_UART_MspInit+0x2c0>)
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8006ab8:	4b1a      	ldr	r3, [pc, #104]	; (8006b24 <HAL_UART_MspInit+0x2c0>)
 8006aba:	2200      	movs	r2, #0
 8006abc:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006abe:	4b19      	ldr	r3, [pc, #100]	; (8006b24 <HAL_UART_MspInit+0x2c0>)
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8006ac4:	4817      	ldr	r0, [pc, #92]	; (8006b24 <HAL_UART_MspInit+0x2c0>)
 8006ac6:	f001 fdb1 	bl	800862c <HAL_DMA_Init>
 8006aca:	4603      	mov	r3, r0
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d001      	beq.n	8006ad4 <HAL_UART_MspInit+0x270>
      Error_Handler();
 8006ad0:	f7ff fc46 	bl	8006360 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	4a13      	ldr	r2, [pc, #76]	; (8006b24 <HAL_UART_MspInit+0x2c0>)
 8006ad8:	63da      	str	r2, [r3, #60]	; 0x3c
 8006ada:	4a12      	ldr	r2, [pc, #72]	; (8006b24 <HAL_UART_MspInit+0x2c0>)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	2101      	movs	r1, #1
 8006ae4:	2027      	movs	r0, #39	; 0x27
 8006ae6:	f001 fd6a 	bl	80085be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8006aea:	2027      	movs	r0, #39	; 0x27
 8006aec:	f001 fd83 	bl	80085f6 <HAL_NVIC_EnableIRQ>
}
 8006af0:	bf00      	nop
 8006af2:	3738      	adds	r7, #56	; 0x38
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bd80      	pop	{r7, pc}
 8006af8:	40013800 	.word	0x40013800
 8006afc:	40021000 	.word	0x40021000
 8006b00:	40010c00 	.word	0x40010c00
 8006b04:	40010000 	.word	0x40010000
 8006b08:	20002b30 	.word	0x20002b30
 8006b0c:	40020058 	.word	0x40020058
 8006b10:	40004400 	.word	0x40004400
 8006b14:	40010800 	.word	0x40010800
 8006b18:	20002b74 	.word	0x20002b74
 8006b1c:	4002006c 	.word	0x4002006c
 8006b20:	40004800 	.word	0x40004800
 8006b24:	20002bb8 	.word	0x20002bb8
 8006b28:	40020030 	.word	0x40020030

08006b2c <A4988_EnableDriver>:
{

}

void A4988_EnableDriver()
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(myMotor.PENABLE, myMotor.ENABLE, GPIO_PIN_RESET);
 8006b30:	4b0c      	ldr	r3, [pc, #48]	; (8006b64 <A4988_EnableDriver+0x38>)
 8006b32:	695b      	ldr	r3, [r3, #20]
 8006b34:	4a0b      	ldr	r2, [pc, #44]	; (8006b64 <A4988_EnableDriver+0x38>)
 8006b36:	8891      	ldrh	r1, [r2, #4]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	f002 f9b3 	bl	8008ea6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(myMotor.PSLEEP, myMotor.SLEEP, GPIO_PIN_SET);
 8006b40:	4b08      	ldr	r3, [pc, #32]	; (8006b64 <A4988_EnableDriver+0x38>)
 8006b42:	699b      	ldr	r3, [r3, #24]
 8006b44:	4a07      	ldr	r2, [pc, #28]	; (8006b64 <A4988_EnableDriver+0x38>)
 8006b46:	88d1      	ldrh	r1, [r2, #6]
 8006b48:	2201      	movs	r2, #1
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	f002 f9ab 	bl	8008ea6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(myMotor.PRESET, myMotor.RESET, GPIO_PIN_SET);
 8006b50:	4b04      	ldr	r3, [pc, #16]	; (8006b64 <A4988_EnableDriver+0x38>)
 8006b52:	69db      	ldr	r3, [r3, #28]
 8006b54:	4a03      	ldr	r2, [pc, #12]	; (8006b64 <A4988_EnableDriver+0x38>)
 8006b56:	8911      	ldrh	r1, [r2, #8]
 8006b58:	2201      	movs	r2, #1
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	f002 f9a3 	bl	8008ea6 <HAL_GPIO_WritePin>
}
 8006b60:	bf00      	nop
 8006b62:	bd80      	pop	{r7, pc}
 8006b64:	20000494 	.word	0x20000494

08006b68 <A4988_DisableDriver>:

void A4988_DisableDriver()
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(myMotor.PENABLE, myMotor.ENABLE, GPIO_PIN_SET);
 8006b6c:	4b0c      	ldr	r3, [pc, #48]	; (8006ba0 <A4988_DisableDriver+0x38>)
 8006b6e:	695b      	ldr	r3, [r3, #20]
 8006b70:	4a0b      	ldr	r2, [pc, #44]	; (8006ba0 <A4988_DisableDriver+0x38>)
 8006b72:	8891      	ldrh	r1, [r2, #4]
 8006b74:	2201      	movs	r2, #1
 8006b76:	4618      	mov	r0, r3
 8006b78:	f002 f995 	bl	8008ea6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(myMotor.PSLEEP, myMotor.SLEEP, GPIO_PIN_RESET);
 8006b7c:	4b08      	ldr	r3, [pc, #32]	; (8006ba0 <A4988_DisableDriver+0x38>)
 8006b7e:	699b      	ldr	r3, [r3, #24]
 8006b80:	4a07      	ldr	r2, [pc, #28]	; (8006ba0 <A4988_DisableDriver+0x38>)
 8006b82:	88d1      	ldrh	r1, [r2, #6]
 8006b84:	2200      	movs	r2, #0
 8006b86:	4618      	mov	r0, r3
 8006b88:	f002 f98d 	bl	8008ea6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(myMotor.PRESET, myMotor.RESET, GPIO_PIN_RESET);
 8006b8c:	4b04      	ldr	r3, [pc, #16]	; (8006ba0 <A4988_DisableDriver+0x38>)
 8006b8e:	69db      	ldr	r3, [r3, #28]
 8006b90:	4a03      	ldr	r2, [pc, #12]	; (8006ba0 <A4988_DisableDriver+0x38>)
 8006b92:	8911      	ldrh	r1, [r2, #8]
 8006b94:	2200      	movs	r2, #0
 8006b96:	4618      	mov	r0, r3
 8006b98:	f002 f985 	bl	8008ea6 <HAL_GPIO_WritePin>
}
 8006b9c:	bf00      	nop
 8006b9e:	bd80      	pop	{r7, pc}
 8006ba0:	20000494 	.word	0x20000494

08006ba4 <A4988_StepByStep>:
	HAL_GPIO_WritePin(myMotor.PSTEP, myMotor.STEP, GPIO_PIN_SET);
	HAL_GPIO_WritePin(myMotor.PSTEP, myMotor.STEP, GPIO_PIN_RESET);
}

void A4988_StepByStep(int steps, int direction)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b084      	sub	sp, #16
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
 8006bac:	6039      	str	r1, [r7, #0]
	if (direction == 1) {
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	2b01      	cmp	r3, #1
 8006bb2:	d108      	bne.n	8006bc6 <A4988_StepByStep+0x22>
		HAL_GPIO_WritePin(myMotor.PDIR, myMotor.DIR, GPIO_PIN_SET);
 8006bb4:	4b1a      	ldr	r3, [pc, #104]	; (8006c20 <A4988_StepByStep+0x7c>)
 8006bb6:	68db      	ldr	r3, [r3, #12]
 8006bb8:	4a19      	ldr	r2, [pc, #100]	; (8006c20 <A4988_StepByStep+0x7c>)
 8006bba:	8811      	ldrh	r1, [r2, #0]
 8006bbc:	2201      	movs	r2, #1
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	f002 f971 	bl	8008ea6 <HAL_GPIO_WritePin>
 8006bc4:	e007      	b.n	8006bd6 <A4988_StepByStep+0x32>
	} else {
		HAL_GPIO_WritePin(myMotor.PDIR, myMotor.DIR, GPIO_PIN_RESET);
 8006bc6:	4b16      	ldr	r3, [pc, #88]	; (8006c20 <A4988_StepByStep+0x7c>)
 8006bc8:	68db      	ldr	r3, [r3, #12]
 8006bca:	4a15      	ldr	r2, [pc, #84]	; (8006c20 <A4988_StepByStep+0x7c>)
 8006bcc:	8811      	ldrh	r1, [r2, #0]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	f002 f968 	bl	8008ea6 <HAL_GPIO_WritePin>
	}

	// Step the motor
	for (int i = 0; i < steps; i++) {
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	60fb      	str	r3, [r7, #12]
 8006bda:	e018      	b.n	8006c0e <A4988_StepByStep+0x6a>
		HAL_GPIO_WritePin(myMotor.PSTEP, myMotor.STEP, GPIO_PIN_SET);
 8006bdc:	4b10      	ldr	r3, [pc, #64]	; (8006c20 <A4988_StepByStep+0x7c>)
 8006bde:	691b      	ldr	r3, [r3, #16]
 8006be0:	4a0f      	ldr	r2, [pc, #60]	; (8006c20 <A4988_StepByStep+0x7c>)
 8006be2:	8851      	ldrh	r1, [r2, #2]
 8006be4:	2201      	movs	r2, #1
 8006be6:	4618      	mov	r0, r3
 8006be8:	f002 f95d 	bl	8008ea6 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8006bec:	2001      	movs	r0, #1
 8006bee:	f000 ffed 	bl	8007bcc <HAL_Delay>
		HAL_GPIO_WritePin(myMotor.PSTEP, myMotor.STEP, GPIO_PIN_RESET);
 8006bf2:	4b0b      	ldr	r3, [pc, #44]	; (8006c20 <A4988_StepByStep+0x7c>)
 8006bf4:	691b      	ldr	r3, [r3, #16]
 8006bf6:	4a0a      	ldr	r2, [pc, #40]	; (8006c20 <A4988_StepByStep+0x7c>)
 8006bf8:	8851      	ldrh	r1, [r2, #2]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	f002 f952 	bl	8008ea6 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8006c02:	2001      	movs	r0, #1
 8006c04:	f000 ffe2 	bl	8007bcc <HAL_Delay>
	for (int i = 0; i < steps; i++) {
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	3301      	adds	r3, #1
 8006c0c:	60fb      	str	r3, [r7, #12]
 8006c0e:	68fa      	ldr	r2, [r7, #12]
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	429a      	cmp	r2, r3
 8006c14:	dbe2      	blt.n	8006bdc <A4988_StepByStep+0x38>
	}
}
 8006c16:	bf00      	nop
 8006c18:	bf00      	nop
 8006c1a:	3710      	adds	r7, #16
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bd80      	pop	{r7, pc}
 8006c20:	20000494 	.word	0x20000494

08006c24 <LCD_SpecialChar>:

/* GLOBAL VARIABLES ----------------------------------------------------------*/

/* STATIC FUNCTION PROTOTYPES --- --------------------------------------------*/
static void LCD_SpecialChar(void)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b098      	sub	sp, #96	; 0x60
 8006c28:	af00      	add	r7, sp, #0
	uint8_t Right[] = {0x00, 0x04, 0x06, 0x1F, 0x1F, 0x06, 0x04, 0x00}; // Go to right
 8006c2a:	4a6d      	ldr	r2, [pc, #436]	; (8006de0 <LCD_SpecialChar+0x1bc>)
 8006c2c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006c30:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006c34:	e883 0003 	stmia.w	r3, {r0, r1}
	LCD_SendCommand(0x40);
 8006c38:	2040      	movs	r0, #64	; 0x40
 8006c3a:	f000 f91b 	bl	8006e74 <LCD_SendCommand>
	for (int i=0; i<8; i++) LCD_SendData(Right[i]);
 8006c3e:	2300      	movs	r3, #0
 8006c40:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006c42:	e00a      	b.n	8006c5a <LCD_SpecialChar+0x36>
 8006c44:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8006c48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c4a:	4413      	add	r3, r2
 8006c4c:	781b      	ldrb	r3, [r3, #0]
 8006c4e:	4618      	mov	r0, r3
 8006c50:	f000 f9ac 	bl	8006fac <LCD_SendData>
 8006c54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c56:	3301      	adds	r3, #1
 8006c58:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006c5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c5c:	2b07      	cmp	r3, #7
 8006c5e:	ddf1      	ble.n	8006c44 <LCD_SpecialChar+0x20>
	uint8_t RightInvert[] = {0x1F, 0x1B, 0x19, 0x00, 0x00, 0x19, 0x1B, 0x1F};
 8006c60:	4a60      	ldr	r2, [pc, #384]	; (8006de4 <LCD_SpecialChar+0x1c0>)
 8006c62:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006c66:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006c6a:	e883 0003 	stmia.w	r3, {r0, r1}
	LCD_SendCommand(0x40+8);
 8006c6e:	2048      	movs	r0, #72	; 0x48
 8006c70:	f000 f900 	bl	8006e74 <LCD_SendCommand>
	for (int i=0; i<8; i++) LCD_SendData(RightInvert[i]);
 8006c74:	2300      	movs	r3, #0
 8006c76:	65bb      	str	r3, [r7, #88]	; 0x58
 8006c78:	e00a      	b.n	8006c90 <LCD_SpecialChar+0x6c>
 8006c7a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006c7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006c80:	4413      	add	r3, r2
 8006c82:	781b      	ldrb	r3, [r3, #0]
 8006c84:	4618      	mov	r0, r3
 8006c86:	f000 f991 	bl	8006fac <LCD_SendData>
 8006c8a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006c8c:	3301      	adds	r3, #1
 8006c8e:	65bb      	str	r3, [r7, #88]	; 0x58
 8006c90:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006c92:	2b07      	cmp	r3, #7
 8006c94:	ddf1      	ble.n	8006c7a <LCD_SpecialChar+0x56>
	uint8_t Left[] = {0x00, 0x04, 0x0C, 0x1F, 0x1F, 0x0C, 0x04, 0x00};
 8006c96:	4a54      	ldr	r2, [pc, #336]	; (8006de8 <LCD_SpecialChar+0x1c4>)
 8006c98:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006c9c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006ca0:	e883 0003 	stmia.w	r3, {r0, r1}
	LCD_SendCommand(0x40+16);
 8006ca4:	2050      	movs	r0, #80	; 0x50
 8006ca6:	f000 f8e5 	bl	8006e74 <LCD_SendCommand>
	for (int i=0; i<8; i++) LCD_SendData(Left[i]);
 8006caa:	2300      	movs	r3, #0
 8006cac:	657b      	str	r3, [r7, #84]	; 0x54
 8006cae:	e00a      	b.n	8006cc6 <LCD_SpecialChar+0xa2>
 8006cb0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006cb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006cb6:	4413      	add	r3, r2
 8006cb8:	781b      	ldrb	r3, [r3, #0]
 8006cba:	4618      	mov	r0, r3
 8006cbc:	f000 f976 	bl	8006fac <LCD_SendData>
 8006cc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006cc2:	3301      	adds	r3, #1
 8006cc4:	657b      	str	r3, [r7, #84]	; 0x54
 8006cc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006cc8:	2b07      	cmp	r3, #7
 8006cca:	ddf1      	ble.n	8006cb0 <LCD_SpecialChar+0x8c>
	uint8_t LeftInvert[] = {0x1F, 0x1B, 0x13, 0x00, 0x00, 0x13, 0x1B, 0x1F};
 8006ccc:	4a47      	ldr	r2, [pc, #284]	; (8006dec <LCD_SpecialChar+0x1c8>)
 8006cce:	f107 0320 	add.w	r3, r7, #32
 8006cd2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006cd6:	e883 0003 	stmia.w	r3, {r0, r1}
	LCD_SendCommand(0x40+24);
 8006cda:	2058      	movs	r0, #88	; 0x58
 8006cdc:	f000 f8ca 	bl	8006e74 <LCD_SendCommand>
	for (int i=0; i<8; i++) LCD_SendData(LeftInvert[i]);
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	653b      	str	r3, [r7, #80]	; 0x50
 8006ce4:	e00a      	b.n	8006cfc <LCD_SpecialChar+0xd8>
 8006ce6:	f107 0220 	add.w	r2, r7, #32
 8006cea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006cec:	4413      	add	r3, r2
 8006cee:	781b      	ldrb	r3, [r3, #0]
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	f000 f95b 	bl	8006fac <LCD_SendData>
 8006cf6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006cf8:	3301      	adds	r3, #1
 8006cfa:	653b      	str	r3, [r7, #80]	; 0x50
 8006cfc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006cfe:	2b07      	cmp	r3, #7
 8006d00:	ddf1      	ble.n	8006ce6 <LCD_SpecialChar+0xc2>
	uint8_t Empty[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8006d02:	4a3b      	ldr	r2, [pc, #236]	; (8006df0 <LCD_SpecialChar+0x1cc>)
 8006d04:	f107 0318 	add.w	r3, r7, #24
 8006d08:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006d0c:	e883 0003 	stmia.w	r3, {r0, r1}
	LCD_SendCommand(0x40+32);
 8006d10:	2060      	movs	r0, #96	; 0x60
 8006d12:	f000 f8af 	bl	8006e74 <LCD_SendCommand>
	for (int i=0; i<8; i++) LCD_SendData(Empty[i]);
 8006d16:	2300      	movs	r3, #0
 8006d18:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d1a:	e00a      	b.n	8006d32 <LCD_SpecialChar+0x10e>
 8006d1c:	f107 0218 	add.w	r2, r7, #24
 8006d20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d22:	4413      	add	r3, r2
 8006d24:	781b      	ldrb	r3, [r3, #0]
 8006d26:	4618      	mov	r0, r3
 8006d28:	f000 f940 	bl	8006fac <LCD_SendData>
 8006d2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d2e:	3301      	adds	r3, #1
 8006d30:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d34:	2b07      	cmp	r3, #7
 8006d36:	ddf1      	ble.n	8006d1c <LCD_SpecialChar+0xf8>
	uint8_t Full[] = {0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F};
 8006d38:	4a2e      	ldr	r2, [pc, #184]	; (8006df4 <LCD_SpecialChar+0x1d0>)
 8006d3a:	f107 0310 	add.w	r3, r7, #16
 8006d3e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006d42:	e883 0003 	stmia.w	r3, {r0, r1}
	LCD_SendCommand(0x40+40);
 8006d46:	2068      	movs	r0, #104	; 0x68
 8006d48:	f000 f894 	bl	8006e74 <LCD_SendCommand>
	for (int i=0; i<8; i++) LCD_SendData(Full[i]);
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006d50:	e00a      	b.n	8006d68 <LCD_SpecialChar+0x144>
 8006d52:	f107 0210 	add.w	r2, r7, #16
 8006d56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d58:	4413      	add	r3, r2
 8006d5a:	781b      	ldrb	r3, [r3, #0]
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	f000 f925 	bl	8006fac <LCD_SendData>
 8006d62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d64:	3301      	adds	r3, #1
 8006d66:	64bb      	str	r3, [r7, #72]	; 0x48
 8006d68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d6a:	2b07      	cmp	r3, #7
 8006d6c:	ddf1      	ble.n	8006d52 <LCD_SpecialChar+0x12e>
	uint8_t Up[] = {0x00, 0x00, 0x04, 0x0E, 0x1F, 0x00, 0x00, 0x00};
 8006d6e:	4a22      	ldr	r2, [pc, #136]	; (8006df8 <LCD_SpecialChar+0x1d4>)
 8006d70:	f107 0308 	add.w	r3, r7, #8
 8006d74:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006d78:	e883 0003 	stmia.w	r3, {r0, r1}
	LCD_SendCommand(0x40+48);
 8006d7c:	2070      	movs	r0, #112	; 0x70
 8006d7e:	f000 f879 	bl	8006e74 <LCD_SendCommand>
	for (int i=0; i<8; i++) LCD_SendData(Up[i]);
 8006d82:	2300      	movs	r3, #0
 8006d84:	647b      	str	r3, [r7, #68]	; 0x44
 8006d86:	e00a      	b.n	8006d9e <LCD_SpecialChar+0x17a>
 8006d88:	f107 0208 	add.w	r2, r7, #8
 8006d8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d8e:	4413      	add	r3, r2
 8006d90:	781b      	ldrb	r3, [r3, #0]
 8006d92:	4618      	mov	r0, r3
 8006d94:	f000 f90a 	bl	8006fac <LCD_SendData>
 8006d98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d9a:	3301      	adds	r3, #1
 8006d9c:	647b      	str	r3, [r7, #68]	; 0x44
 8006d9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006da0:	2b07      	cmp	r3, #7
 8006da2:	ddf1      	ble.n	8006d88 <LCD_SpecialChar+0x164>
	uint8_t Down[] = {0x00, 0x00, 0x00, 0x1F, 0x0E, 0x04, 0x00, 0x00};
 8006da4:	4a15      	ldr	r2, [pc, #84]	; (8006dfc <LCD_SpecialChar+0x1d8>)
 8006da6:	463b      	mov	r3, r7
 8006da8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006dac:	e883 0003 	stmia.w	r3, {r0, r1}
	LCD_SendCommand(0x40+56);
 8006db0:	2078      	movs	r0, #120	; 0x78
 8006db2:	f000 f85f 	bl	8006e74 <LCD_SendCommand>
	for (int i=0; i<8; i++) LCD_SendData(Down[i]);
 8006db6:	2300      	movs	r3, #0
 8006db8:	643b      	str	r3, [r7, #64]	; 0x40
 8006dba:	e009      	b.n	8006dd0 <LCD_SpecialChar+0x1ac>
 8006dbc:	463a      	mov	r2, r7
 8006dbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006dc0:	4413      	add	r3, r2
 8006dc2:	781b      	ldrb	r3, [r3, #0]
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	f000 f8f1 	bl	8006fac <LCD_SendData>
 8006dca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006dcc:	3301      	adds	r3, #1
 8006dce:	643b      	str	r3, [r7, #64]	; 0x40
 8006dd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006dd2:	2b07      	cmp	r3, #7
 8006dd4:	ddf2      	ble.n	8006dbc <LCD_SpecialChar+0x198>
}
 8006dd6:	bf00      	nop
 8006dd8:	bf00      	nop
 8006dda:	3760      	adds	r7, #96	; 0x60
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	bd80      	pop	{r7, pc}
 8006de0:	0800f178 	.word	0x0800f178
 8006de4:	0800f180 	.word	0x0800f180
 8006de8:	0800f188 	.word	0x0800f188
 8006dec:	0800f190 	.word	0x0800f190
 8006df0:	0800f198 	.word	0x0800f198
 8006df4:	0800f1a0 	.word	0x0800f1a0
 8006df8:	0800f1a8 	.word	0x0800f1a8
 8006dfc:	0800f1b0 	.word	0x0800f1b0

08006e00 <LCD_Init>:
/* STATIC FUNCTIONS ----------------------------------------------------------*/

/* GLOBAL FUNCTIONS ----------------------------------------------------------*/
void LCD_Init(void){
 8006e00:	b580      	push	{r7, lr}
 8006e02:	af00      	add	r7, sp, #0
	  HAL_Delay(50);
 8006e04:	2032      	movs	r0, #50	; 0x32
 8006e06:	f000 fee1 	bl	8007bcc <HAL_Delay>
	  LCD_SendCommand(0x03);
 8006e0a:	2003      	movs	r0, #3
 8006e0c:	f000 f832 	bl	8006e74 <LCD_SendCommand>
	  HAL_Delay(5);
 8006e10:	2005      	movs	r0, #5
 8006e12:	f000 fedb 	bl	8007bcc <HAL_Delay>
	  LCD_SendCommand(0x03);
 8006e16:	2003      	movs	r0, #3
 8006e18:	f000 f82c 	bl	8006e74 <LCD_SendCommand>
	  HAL_Delay(1);
 8006e1c:	2001      	movs	r0, #1
 8006e1e:	f000 fed5 	bl	8007bcc <HAL_Delay>
	  LCD_SendCommand(0x03);
 8006e22:	2003      	movs	r0, #3
 8006e24:	f000 f826 	bl	8006e74 <LCD_SendCommand>
	  HAL_Delay(1);
 8006e28:	2001      	movs	r0, #1
 8006e2a:	f000 fecf 	bl	8007bcc <HAL_Delay>
	  LCD_SendCommand(0x02);
 8006e2e:	2002      	movs	r0, #2
 8006e30:	f000 f820 	bl	8006e74 <LCD_SendCommand>
	  HAL_Delay(1);
 8006e34:	2001      	movs	r0, #1
 8006e36:	f000 fec9 	bl	8007bcc <HAL_Delay>

	  LCD_SendCommand(0x28);
 8006e3a:	2028      	movs	r0, #40	; 0x28
 8006e3c:	f000 f81a 	bl	8006e74 <LCD_SendCommand>
	  HAL_Delay(1);
 8006e40:	2001      	movs	r0, #1
 8006e42:	f000 fec3 	bl	8007bcc <HAL_Delay>

	  LCD_SendCommand(0x0C);
 8006e46:	200c      	movs	r0, #12
 8006e48:	f000 f814 	bl	8006e74 <LCD_SendCommand>
	  HAL_Delay(1);
 8006e4c:	2001      	movs	r0, #1
 8006e4e:	f000 febd 	bl	8007bcc <HAL_Delay>

	  LCD_SendCommand(0x01);
 8006e52:	2001      	movs	r0, #1
 8006e54:	f000 f80e 	bl	8006e74 <LCD_SendCommand>
	  HAL_Delay(2);
 8006e58:	2002      	movs	r0, #2
 8006e5a:	f000 feb7 	bl	8007bcc <HAL_Delay>

	  LCD_SendCommand(0x06);
 8006e5e:	2006      	movs	r0, #6
 8006e60:	f000 f808 	bl	8006e74 <LCD_SendCommand>
	  HAL_Delay(1);
 8006e64:	2001      	movs	r0, #1
 8006e66:	f000 feb1 	bl	8007bcc <HAL_Delay>
	  LCD_SpecialChar();
 8006e6a:	f7ff fedb 	bl	8006c24 <LCD_SpecialChar>
}
 8006e6e:	bf00      	nop
 8006e70:	bd80      	pop	{r7, pc}
	...

08006e74 <LCD_SendCommand>:

void LCD_SendCommand(uint8_t cmd){
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b082      	sub	sp, #8
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	71fb      	strb	r3, [r7, #7]
	  // Send high nibble
	  HAL_GPIO_WritePin(myLCD.RSP, myLCD.RS, GPIO_PIN_RESET);
 8006e7e:	4b4a      	ldr	r3, [pc, #296]	; (8006fa8 <LCD_SendCommand+0x134>)
 8006e80:	6a1b      	ldr	r3, [r3, #32]
 8006e82:	4a49      	ldr	r2, [pc, #292]	; (8006fa8 <LCD_SendCommand+0x134>)
 8006e84:	8951      	ldrh	r1, [r2, #10]
 8006e86:	2200      	movs	r2, #0
 8006e88:	4618      	mov	r0, r3
 8006e8a:	f002 f80c 	bl	8008ea6 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(myLCD.D4P, myLCD.D4, (cmd & 0x10) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8006e8e:	4b46      	ldr	r3, [pc, #280]	; (8006fa8 <LCD_SendCommand+0x134>)
 8006e90:	68d8      	ldr	r0, [r3, #12]
 8006e92:	4b45      	ldr	r3, [pc, #276]	; (8006fa8 <LCD_SendCommand+0x134>)
 8006e94:	8819      	ldrh	r1, [r3, #0]
 8006e96:	79fb      	ldrb	r3, [r7, #7]
 8006e98:	111b      	asrs	r3, r3, #4
 8006e9a:	b2db      	uxtb	r3, r3
 8006e9c:	f003 0301 	and.w	r3, r3, #1
 8006ea0:	b2db      	uxtb	r3, r3
 8006ea2:	461a      	mov	r2, r3
 8006ea4:	f001 ffff 	bl	8008ea6 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(myLCD.D5P, myLCD.D5, (cmd & 0x20) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8006ea8:	4b3f      	ldr	r3, [pc, #252]	; (8006fa8 <LCD_SendCommand+0x134>)
 8006eaa:	6918      	ldr	r0, [r3, #16]
 8006eac:	4b3e      	ldr	r3, [pc, #248]	; (8006fa8 <LCD_SendCommand+0x134>)
 8006eae:	8859      	ldrh	r1, [r3, #2]
 8006eb0:	79fb      	ldrb	r3, [r7, #7]
 8006eb2:	115b      	asrs	r3, r3, #5
 8006eb4:	b2db      	uxtb	r3, r3
 8006eb6:	f003 0301 	and.w	r3, r3, #1
 8006eba:	b2db      	uxtb	r3, r3
 8006ebc:	461a      	mov	r2, r3
 8006ebe:	f001 fff2 	bl	8008ea6 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(myLCD.D6P, myLCD.D6, (cmd & 0x40) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8006ec2:	4b39      	ldr	r3, [pc, #228]	; (8006fa8 <LCD_SendCommand+0x134>)
 8006ec4:	6958      	ldr	r0, [r3, #20]
 8006ec6:	4b38      	ldr	r3, [pc, #224]	; (8006fa8 <LCD_SendCommand+0x134>)
 8006ec8:	8899      	ldrh	r1, [r3, #4]
 8006eca:	79fb      	ldrb	r3, [r7, #7]
 8006ecc:	119b      	asrs	r3, r3, #6
 8006ece:	b2db      	uxtb	r3, r3
 8006ed0:	f003 0301 	and.w	r3, r3, #1
 8006ed4:	b2db      	uxtb	r3, r3
 8006ed6:	461a      	mov	r2, r3
 8006ed8:	f001 ffe5 	bl	8008ea6 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(myLCD.D7P, myLCD.D7, (cmd & 0x80) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8006edc:	4b32      	ldr	r3, [pc, #200]	; (8006fa8 <LCD_SendCommand+0x134>)
 8006ede:	6998      	ldr	r0, [r3, #24]
 8006ee0:	4b31      	ldr	r3, [pc, #196]	; (8006fa8 <LCD_SendCommand+0x134>)
 8006ee2:	88d9      	ldrh	r1, [r3, #6]
 8006ee4:	79fb      	ldrb	r3, [r7, #7]
 8006ee6:	09db      	lsrs	r3, r3, #7
 8006ee8:	b2db      	uxtb	r3, r3
 8006eea:	461a      	mov	r2, r3
 8006eec:	f001 ffdb 	bl	8008ea6 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(myLCD.ENP, myLCD.EN, GPIO_PIN_SET);
 8006ef0:	4b2d      	ldr	r3, [pc, #180]	; (8006fa8 <LCD_SendCommand+0x134>)
 8006ef2:	69db      	ldr	r3, [r3, #28]
 8006ef4:	4a2c      	ldr	r2, [pc, #176]	; (8006fa8 <LCD_SendCommand+0x134>)
 8006ef6:	8911      	ldrh	r1, [r2, #8]
 8006ef8:	2201      	movs	r2, #1
 8006efa:	4618      	mov	r0, r3
 8006efc:	f001 ffd3 	bl	8008ea6 <HAL_GPIO_WritePin>
	  HAL_Delay(1);
 8006f00:	2001      	movs	r0, #1
 8006f02:	f000 fe63 	bl	8007bcc <HAL_Delay>
	  HAL_GPIO_WritePin(myLCD.ENP, myLCD.EN, GPIO_PIN_RESET);
 8006f06:	4b28      	ldr	r3, [pc, #160]	; (8006fa8 <LCD_SendCommand+0x134>)
 8006f08:	69db      	ldr	r3, [r3, #28]
 8006f0a:	4a27      	ldr	r2, [pc, #156]	; (8006fa8 <LCD_SendCommand+0x134>)
 8006f0c:	8911      	ldrh	r1, [r2, #8]
 8006f0e:	2200      	movs	r2, #0
 8006f10:	4618      	mov	r0, r3
 8006f12:	f001 ffc8 	bl	8008ea6 <HAL_GPIO_WritePin>

	  // Send low nibble
	  HAL_GPIO_WritePin(myLCD.D4P, myLCD.D4, (cmd & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8006f16:	4b24      	ldr	r3, [pc, #144]	; (8006fa8 <LCD_SendCommand+0x134>)
 8006f18:	68d8      	ldr	r0, [r3, #12]
 8006f1a:	4b23      	ldr	r3, [pc, #140]	; (8006fa8 <LCD_SendCommand+0x134>)
 8006f1c:	8819      	ldrh	r1, [r3, #0]
 8006f1e:	79fb      	ldrb	r3, [r7, #7]
 8006f20:	f003 0301 	and.w	r3, r3, #1
 8006f24:	b2db      	uxtb	r3, r3
 8006f26:	461a      	mov	r2, r3
 8006f28:	f001 ffbd 	bl	8008ea6 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(myLCD.D5P, myLCD.D5, (cmd & 0x02) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8006f2c:	4b1e      	ldr	r3, [pc, #120]	; (8006fa8 <LCD_SendCommand+0x134>)
 8006f2e:	6918      	ldr	r0, [r3, #16]
 8006f30:	4b1d      	ldr	r3, [pc, #116]	; (8006fa8 <LCD_SendCommand+0x134>)
 8006f32:	8859      	ldrh	r1, [r3, #2]
 8006f34:	79fb      	ldrb	r3, [r7, #7]
 8006f36:	105b      	asrs	r3, r3, #1
 8006f38:	b2db      	uxtb	r3, r3
 8006f3a:	f003 0301 	and.w	r3, r3, #1
 8006f3e:	b2db      	uxtb	r3, r3
 8006f40:	461a      	mov	r2, r3
 8006f42:	f001 ffb0 	bl	8008ea6 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(myLCD.D6P, myLCD.D6, (cmd & 0x04) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8006f46:	4b18      	ldr	r3, [pc, #96]	; (8006fa8 <LCD_SendCommand+0x134>)
 8006f48:	6958      	ldr	r0, [r3, #20]
 8006f4a:	4b17      	ldr	r3, [pc, #92]	; (8006fa8 <LCD_SendCommand+0x134>)
 8006f4c:	8899      	ldrh	r1, [r3, #4]
 8006f4e:	79fb      	ldrb	r3, [r7, #7]
 8006f50:	109b      	asrs	r3, r3, #2
 8006f52:	b2db      	uxtb	r3, r3
 8006f54:	f003 0301 	and.w	r3, r3, #1
 8006f58:	b2db      	uxtb	r3, r3
 8006f5a:	461a      	mov	r2, r3
 8006f5c:	f001 ffa3 	bl	8008ea6 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(myLCD.D7P, myLCD.D7, (cmd & 0x08) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8006f60:	4b11      	ldr	r3, [pc, #68]	; (8006fa8 <LCD_SendCommand+0x134>)
 8006f62:	6998      	ldr	r0, [r3, #24]
 8006f64:	4b10      	ldr	r3, [pc, #64]	; (8006fa8 <LCD_SendCommand+0x134>)
 8006f66:	88d9      	ldrh	r1, [r3, #6]
 8006f68:	79fb      	ldrb	r3, [r7, #7]
 8006f6a:	10db      	asrs	r3, r3, #3
 8006f6c:	b2db      	uxtb	r3, r3
 8006f6e:	f003 0301 	and.w	r3, r3, #1
 8006f72:	b2db      	uxtb	r3, r3
 8006f74:	461a      	mov	r2, r3
 8006f76:	f001 ff96 	bl	8008ea6 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(myLCD.ENP, myLCD.EN, GPIO_PIN_SET);
 8006f7a:	4b0b      	ldr	r3, [pc, #44]	; (8006fa8 <LCD_SendCommand+0x134>)
 8006f7c:	69db      	ldr	r3, [r3, #28]
 8006f7e:	4a0a      	ldr	r2, [pc, #40]	; (8006fa8 <LCD_SendCommand+0x134>)
 8006f80:	8911      	ldrh	r1, [r2, #8]
 8006f82:	2201      	movs	r2, #1
 8006f84:	4618      	mov	r0, r3
 8006f86:	f001 ff8e 	bl	8008ea6 <HAL_GPIO_WritePin>
	  HAL_Delay(1);
 8006f8a:	2001      	movs	r0, #1
 8006f8c:	f000 fe1e 	bl	8007bcc <HAL_Delay>
	  HAL_GPIO_WritePin(myLCD.ENP, myLCD.EN, GPIO_PIN_RESET);
 8006f90:	4b05      	ldr	r3, [pc, #20]	; (8006fa8 <LCD_SendCommand+0x134>)
 8006f92:	69db      	ldr	r3, [r3, #28]
 8006f94:	4a04      	ldr	r2, [pc, #16]	; (8006fa8 <LCD_SendCommand+0x134>)
 8006f96:	8911      	ldrh	r1, [r2, #8]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	f001 ff83 	bl	8008ea6 <HAL_GPIO_WritePin>
}
 8006fa0:	bf00      	nop
 8006fa2:	3708      	adds	r7, #8
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	bd80      	pop	{r7, pc}
 8006fa8:	200004b4 	.word	0x200004b4

08006fac <LCD_SendData>:

void LCD_SendData(uint8_t data){
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b082      	sub	sp, #8
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	71fb      	strb	r3, [r7, #7]
	  // Send high nibble
	  HAL_GPIO_WritePin(myLCD.RSP, myLCD.RS, GPIO_PIN_SET);
 8006fb6:	4b4a      	ldr	r3, [pc, #296]	; (80070e0 <LCD_SendData+0x134>)
 8006fb8:	6a1b      	ldr	r3, [r3, #32]
 8006fba:	4a49      	ldr	r2, [pc, #292]	; (80070e0 <LCD_SendData+0x134>)
 8006fbc:	8951      	ldrh	r1, [r2, #10]
 8006fbe:	2201      	movs	r2, #1
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	f001 ff70 	bl	8008ea6 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(myLCD.D4P, myLCD.D4, (data & 0x10) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8006fc6:	4b46      	ldr	r3, [pc, #280]	; (80070e0 <LCD_SendData+0x134>)
 8006fc8:	68d8      	ldr	r0, [r3, #12]
 8006fca:	4b45      	ldr	r3, [pc, #276]	; (80070e0 <LCD_SendData+0x134>)
 8006fcc:	8819      	ldrh	r1, [r3, #0]
 8006fce:	79fb      	ldrb	r3, [r7, #7]
 8006fd0:	111b      	asrs	r3, r3, #4
 8006fd2:	b2db      	uxtb	r3, r3
 8006fd4:	f003 0301 	and.w	r3, r3, #1
 8006fd8:	b2db      	uxtb	r3, r3
 8006fda:	461a      	mov	r2, r3
 8006fdc:	f001 ff63 	bl	8008ea6 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(myLCD.D5P, myLCD.D5, (data & 0x20) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8006fe0:	4b3f      	ldr	r3, [pc, #252]	; (80070e0 <LCD_SendData+0x134>)
 8006fe2:	6918      	ldr	r0, [r3, #16]
 8006fe4:	4b3e      	ldr	r3, [pc, #248]	; (80070e0 <LCD_SendData+0x134>)
 8006fe6:	8859      	ldrh	r1, [r3, #2]
 8006fe8:	79fb      	ldrb	r3, [r7, #7]
 8006fea:	115b      	asrs	r3, r3, #5
 8006fec:	b2db      	uxtb	r3, r3
 8006fee:	f003 0301 	and.w	r3, r3, #1
 8006ff2:	b2db      	uxtb	r3, r3
 8006ff4:	461a      	mov	r2, r3
 8006ff6:	f001 ff56 	bl	8008ea6 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(myLCD.D6P, myLCD.D6, (data & 0x40) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8006ffa:	4b39      	ldr	r3, [pc, #228]	; (80070e0 <LCD_SendData+0x134>)
 8006ffc:	6958      	ldr	r0, [r3, #20]
 8006ffe:	4b38      	ldr	r3, [pc, #224]	; (80070e0 <LCD_SendData+0x134>)
 8007000:	8899      	ldrh	r1, [r3, #4]
 8007002:	79fb      	ldrb	r3, [r7, #7]
 8007004:	119b      	asrs	r3, r3, #6
 8007006:	b2db      	uxtb	r3, r3
 8007008:	f003 0301 	and.w	r3, r3, #1
 800700c:	b2db      	uxtb	r3, r3
 800700e:	461a      	mov	r2, r3
 8007010:	f001 ff49 	bl	8008ea6 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(myLCD.D7P, myLCD.D7, (data & 0x80) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8007014:	4b32      	ldr	r3, [pc, #200]	; (80070e0 <LCD_SendData+0x134>)
 8007016:	6998      	ldr	r0, [r3, #24]
 8007018:	4b31      	ldr	r3, [pc, #196]	; (80070e0 <LCD_SendData+0x134>)
 800701a:	88d9      	ldrh	r1, [r3, #6]
 800701c:	79fb      	ldrb	r3, [r7, #7]
 800701e:	09db      	lsrs	r3, r3, #7
 8007020:	b2db      	uxtb	r3, r3
 8007022:	461a      	mov	r2, r3
 8007024:	f001 ff3f 	bl	8008ea6 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(myLCD.ENP, myLCD.EN, GPIO_PIN_SET);
 8007028:	4b2d      	ldr	r3, [pc, #180]	; (80070e0 <LCD_SendData+0x134>)
 800702a:	69db      	ldr	r3, [r3, #28]
 800702c:	4a2c      	ldr	r2, [pc, #176]	; (80070e0 <LCD_SendData+0x134>)
 800702e:	8911      	ldrh	r1, [r2, #8]
 8007030:	2201      	movs	r2, #1
 8007032:	4618      	mov	r0, r3
 8007034:	f001 ff37 	bl	8008ea6 <HAL_GPIO_WritePin>
	  HAL_Delay(1);
 8007038:	2001      	movs	r0, #1
 800703a:	f000 fdc7 	bl	8007bcc <HAL_Delay>
	  HAL_GPIO_WritePin(myLCD.ENP, myLCD.EN, GPIO_PIN_RESET);
 800703e:	4b28      	ldr	r3, [pc, #160]	; (80070e0 <LCD_SendData+0x134>)
 8007040:	69db      	ldr	r3, [r3, #28]
 8007042:	4a27      	ldr	r2, [pc, #156]	; (80070e0 <LCD_SendData+0x134>)
 8007044:	8911      	ldrh	r1, [r2, #8]
 8007046:	2200      	movs	r2, #0
 8007048:	4618      	mov	r0, r3
 800704a:	f001 ff2c 	bl	8008ea6 <HAL_GPIO_WritePin>

	  // Send low nibble
	  HAL_GPIO_WritePin(myLCD.D4P, myLCD.D4, (data & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800704e:	4b24      	ldr	r3, [pc, #144]	; (80070e0 <LCD_SendData+0x134>)
 8007050:	68d8      	ldr	r0, [r3, #12]
 8007052:	4b23      	ldr	r3, [pc, #140]	; (80070e0 <LCD_SendData+0x134>)
 8007054:	8819      	ldrh	r1, [r3, #0]
 8007056:	79fb      	ldrb	r3, [r7, #7]
 8007058:	f003 0301 	and.w	r3, r3, #1
 800705c:	b2db      	uxtb	r3, r3
 800705e:	461a      	mov	r2, r3
 8007060:	f001 ff21 	bl	8008ea6 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(myLCD.D5P, myLCD.D5, (data & 0x02) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8007064:	4b1e      	ldr	r3, [pc, #120]	; (80070e0 <LCD_SendData+0x134>)
 8007066:	6918      	ldr	r0, [r3, #16]
 8007068:	4b1d      	ldr	r3, [pc, #116]	; (80070e0 <LCD_SendData+0x134>)
 800706a:	8859      	ldrh	r1, [r3, #2]
 800706c:	79fb      	ldrb	r3, [r7, #7]
 800706e:	105b      	asrs	r3, r3, #1
 8007070:	b2db      	uxtb	r3, r3
 8007072:	f003 0301 	and.w	r3, r3, #1
 8007076:	b2db      	uxtb	r3, r3
 8007078:	461a      	mov	r2, r3
 800707a:	f001 ff14 	bl	8008ea6 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(myLCD.D6P, myLCD.D6, (data & 0x04) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800707e:	4b18      	ldr	r3, [pc, #96]	; (80070e0 <LCD_SendData+0x134>)
 8007080:	6958      	ldr	r0, [r3, #20]
 8007082:	4b17      	ldr	r3, [pc, #92]	; (80070e0 <LCD_SendData+0x134>)
 8007084:	8899      	ldrh	r1, [r3, #4]
 8007086:	79fb      	ldrb	r3, [r7, #7]
 8007088:	109b      	asrs	r3, r3, #2
 800708a:	b2db      	uxtb	r3, r3
 800708c:	f003 0301 	and.w	r3, r3, #1
 8007090:	b2db      	uxtb	r3, r3
 8007092:	461a      	mov	r2, r3
 8007094:	f001 ff07 	bl	8008ea6 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(myLCD.D7P, myLCD.D7, (data & 0x08) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8007098:	4b11      	ldr	r3, [pc, #68]	; (80070e0 <LCD_SendData+0x134>)
 800709a:	6998      	ldr	r0, [r3, #24]
 800709c:	4b10      	ldr	r3, [pc, #64]	; (80070e0 <LCD_SendData+0x134>)
 800709e:	88d9      	ldrh	r1, [r3, #6]
 80070a0:	79fb      	ldrb	r3, [r7, #7]
 80070a2:	10db      	asrs	r3, r3, #3
 80070a4:	b2db      	uxtb	r3, r3
 80070a6:	f003 0301 	and.w	r3, r3, #1
 80070aa:	b2db      	uxtb	r3, r3
 80070ac:	461a      	mov	r2, r3
 80070ae:	f001 fefa 	bl	8008ea6 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(myLCD.ENP, myLCD.EN, GPIO_PIN_SET);
 80070b2:	4b0b      	ldr	r3, [pc, #44]	; (80070e0 <LCD_SendData+0x134>)
 80070b4:	69db      	ldr	r3, [r3, #28]
 80070b6:	4a0a      	ldr	r2, [pc, #40]	; (80070e0 <LCD_SendData+0x134>)
 80070b8:	8911      	ldrh	r1, [r2, #8]
 80070ba:	2201      	movs	r2, #1
 80070bc:	4618      	mov	r0, r3
 80070be:	f001 fef2 	bl	8008ea6 <HAL_GPIO_WritePin>
	  HAL_Delay(1);
 80070c2:	2001      	movs	r0, #1
 80070c4:	f000 fd82 	bl	8007bcc <HAL_Delay>
	  HAL_GPIO_WritePin(myLCD.ENP, myLCD.EN, GPIO_PIN_RESET);
 80070c8:	4b05      	ldr	r3, [pc, #20]	; (80070e0 <LCD_SendData+0x134>)
 80070ca:	69db      	ldr	r3, [r3, #28]
 80070cc:	4a04      	ldr	r2, [pc, #16]	; (80070e0 <LCD_SendData+0x134>)
 80070ce:	8911      	ldrh	r1, [r2, #8]
 80070d0:	2200      	movs	r2, #0
 80070d2:	4618      	mov	r0, r3
 80070d4:	f001 fee7 	bl	8008ea6 <HAL_GPIO_WritePin>
}
 80070d8:	bf00      	nop
 80070da:	3708      	adds	r7, #8
 80070dc:	46bd      	mov	sp, r7
 80070de:	bd80      	pop	{r7, pc}
 80070e0:	200004b4 	.word	0x200004b4

080070e4 <LCD_GotoXY>:

void LCD_GotoXY(uint8_t x, uint8_t y){
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b084      	sub	sp, #16
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	4603      	mov	r3, r0
 80070ec:	460a      	mov	r2, r1
 80070ee:	71fb      	strb	r3, [r7, #7]
 80070f0:	4613      	mov	r3, r2
 80070f2:	71bb      	strb	r3, [r7, #6]
    uint8_t address;
    if (y == 0) {
 80070f4:	79bb      	ldrb	r3, [r7, #6]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d103      	bne.n	8007102 <LCD_GotoXY+0x1e>
        address = 0x80 + x;
 80070fa:	79fb      	ldrb	r3, [r7, #7]
 80070fc:	3b80      	subs	r3, #128	; 0x80
 80070fe:	73fb      	strb	r3, [r7, #15]
 8007100:	e013      	b.n	800712a <LCD_GotoXY+0x46>
    } else if (y == 1) {
 8007102:	79bb      	ldrb	r3, [r7, #6]
 8007104:	2b01      	cmp	r3, #1
 8007106:	d103      	bne.n	8007110 <LCD_GotoXY+0x2c>
        address = 0xC0 + x;
 8007108:	79fb      	ldrb	r3, [r7, #7]
 800710a:	3b40      	subs	r3, #64	; 0x40
 800710c:	73fb      	strb	r3, [r7, #15]
 800710e:	e00c      	b.n	800712a <LCD_GotoXY+0x46>
    } else if (y == 2){
 8007110:	79bb      	ldrb	r3, [r7, #6]
 8007112:	2b02      	cmp	r3, #2
 8007114:	d103      	bne.n	800711e <LCD_GotoXY+0x3a>
        address = 0x80 + x + 16;
 8007116:	79fb      	ldrb	r3, [r7, #7]
 8007118:	3b70      	subs	r3, #112	; 0x70
 800711a:	73fb      	strb	r3, [r7, #15]
 800711c:	e005      	b.n	800712a <LCD_GotoXY+0x46>
    } else if (y == 3){
 800711e:	79bb      	ldrb	r3, [r7, #6]
 8007120:	2b03      	cmp	r3, #3
 8007122:	d102      	bne.n	800712a <LCD_GotoXY+0x46>
        address = 0xC0 + x + 16;
 8007124:	79fb      	ldrb	r3, [r7, #7]
 8007126:	3b30      	subs	r3, #48	; 0x30
 8007128:	73fb      	strb	r3, [r7, #15]
    }
    LCD_SendCommand(address);
 800712a:	7bfb      	ldrb	r3, [r7, #15]
 800712c:	4618      	mov	r0, r3
 800712e:	f7ff fea1 	bl	8006e74 <LCD_SendCommand>
}
 8007132:	bf00      	nop
 8007134:	3710      	adds	r7, #16
 8007136:	46bd      	mov	sp, r7
 8007138:	bd80      	pop	{r7, pc}

0800713a <LCD_Print>:

void LCD_Print(char *str){
 800713a:	b580      	push	{r7, lr}
 800713c:	b082      	sub	sp, #8
 800713e:	af00      	add	r7, sp, #0
 8007140:	6078      	str	r0, [r7, #4]
    while (*str) {
 8007142:	e006      	b.n	8007152 <LCD_Print+0x18>
        LCD_SendData(*str++);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	1c5a      	adds	r2, r3, #1
 8007148:	607a      	str	r2, [r7, #4]
 800714a:	781b      	ldrb	r3, [r3, #0]
 800714c:	4618      	mov	r0, r3
 800714e:	f7ff ff2d 	bl	8006fac <LCD_SendData>
    while (*str) {
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	781b      	ldrb	r3, [r3, #0]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d1f4      	bne.n	8007144 <LCD_Print+0xa>
    }
}
 800715a:	bf00      	nop
 800715c:	bf00      	nop
 800715e:	3708      	adds	r7, #8
 8007160:	46bd      	mov	sp, r7
 8007162:	bd80      	pop	{r7, pc}

08007164 <LCD_Clear>:
	memset(tmpbuffer, 0, 10);
	sprintf((char*)tmpbuffer, "%d", number);
	LCD_Print((char*)tmpbuffer);
}

void LCD_Clear(){
 8007164:	b580      	push	{r7, lr}
 8007166:	af00      	add	r7, sp, #0
	LCD_SendCommand(0x01);
 8007168:	2001      	movs	r0, #1
 800716a:	f7ff fe83 	bl	8006e74 <LCD_SendCommand>
}
 800716e:	bf00      	nop
 8007170:	bd80      	pop	{r7, pc}
	...

08007174 <Screen_Init>:

/* STATIC FUNCTIONS ----------------------------------------------------------*/

/* GLOBAL FUNCTIONS ----------------------------------------------------------*/
void Screen_Init(_RTC *myRTC)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b082      	sub	sp, #8
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
	__MY_RTC = myRTC;
 800717c:	4a05      	ldr	r2, [pc, #20]	; (8007194 <Screen_Init+0x20>)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6013      	str	r3, [r2, #0]
//	__MY_RTC->Date = 1;
//	__MY_RTC->Hour = 15;
//	__MY_RTC->Min = 17;
//	__MY_RTC->Sec = 0;
//	DS3231_SetTime(__MY_RTC);
	LCD_Init();
 8007182:	f7ff fe3d 	bl	8006e00 <LCD_Init>
	LCD_Clear();
 8007186:	f7ff ffed 	bl	8007164 <LCD_Clear>
//	HAL_Delay(1000);
//	LCD_GotoXY(0, 0);
//	LCD_Print("Hello!");
}
 800718a:	bf00      	nop
 800718c:	3708      	adds	r7, #8
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}
 8007192:	bf00      	nop
 8007194:	20002bfc 	.word	0x20002bfc

08007198 <Screen_Home_Origin>:

void Screen_Home_Origin(uint8_t ID, uint8_t connectflag)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b08a      	sub	sp, #40	; 0x28
 800719c:	af02      	add	r7, sp, #8
 800719e:	4603      	mov	r3, r0
 80071a0:	460a      	mov	r2, r1
 80071a2:	71fb      	strb	r3, [r7, #7]
 80071a4:	4613      	mov	r3, r2
 80071a6:	71bb      	strb	r3, [r7, #6]
    char buffer[20];
    DS3231_GetTime(__MY_RTC);
 80071a8:	4b3c      	ldr	r3, [pc, #240]	; (800729c <Screen_Home_Origin+0x104>)
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	4618      	mov	r0, r3
 80071ae:	f7fc ff79 	bl	80040a4 <DS3231_GetTime>
//	LCD_Clear();
    LCD_GotoXY(11, 1);
 80071b2:	2101      	movs	r1, #1
 80071b4:	200b      	movs	r0, #11
 80071b6:	f7ff ff95 	bl	80070e4 <LCD_GotoXY>
    LCD_Print("NETW");
 80071ba:	4839      	ldr	r0, [pc, #228]	; (80072a0 <Screen_Home_Origin+0x108>)
 80071bc:	f7ff ffbd 	bl	800713a <LCD_Print>
    LCD_GotoXY(12, 2);
 80071c0:	2102      	movs	r1, #2
 80071c2:	200c      	movs	r0, #12
 80071c4:	f7ff ff8e 	bl	80070e4 <LCD_GotoXY>
    if (connectflag)	{
 80071c8:	79bb      	ldrb	r3, [r7, #6]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d003      	beq.n	80071d6 <Screen_Home_Origin+0x3e>
    	LCD_Print("ONL");
 80071ce:	4835      	ldr	r0, [pc, #212]	; (80072a4 <Screen_Home_Origin+0x10c>)
 80071d0:	f7ff ffb3 	bl	800713a <LCD_Print>
 80071d4:	e002      	b.n	80071dc <Screen_Home_Origin+0x44>
    }
    else {
    	LCD_Print("OFF");
 80071d6:	4834      	ldr	r0, [pc, #208]	; (80072a8 <Screen_Home_Origin+0x110>)
 80071d8:	f7ff ffaf 	bl	800713a <LCD_Print>
    }

	LCD_GotoXY(0, 0);
 80071dc:	2100      	movs	r1, #0
 80071de:	2000      	movs	r0, #0
 80071e0:	f7ff ff80 	bl	80070e4 <LCD_GotoXY>
//	LCD_Print("Station Node");
//    LCD_GotoXY(0, 1);
    sprintf(buffer,"Station ID: 0x%02X", ID);
 80071e4:	79fa      	ldrb	r2, [r7, #7]
 80071e6:	f107 030c 	add.w	r3, r7, #12
 80071ea:	4930      	ldr	r1, [pc, #192]	; (80072ac <Screen_Home_Origin+0x114>)
 80071ec:	4618      	mov	r0, r3
 80071ee:	f005 fb17 	bl	800c820 <siprintf>
    LCD_Print(buffer);
 80071f2:	f107 030c 	add.w	r3, r7, #12
 80071f6:	4618      	mov	r0, r3
 80071f8:	f7ff ff9f 	bl	800713a <LCD_Print>
    LCD_GotoXY(0, 1);
 80071fc:	2101      	movs	r1, #1
 80071fe:	2000      	movs	r0, #0
 8007200:	f7ff ff70 	bl	80070e4 <LCD_GotoXY>
    sprintf(buffer,"%02d/%02d/%d", __MY_RTC->Date, __MY_RTC->Month, __MY_RTC->Year);
 8007204:	4b25      	ldr	r3, [pc, #148]	; (800729c <Screen_Home_Origin+0x104>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	789b      	ldrb	r3, [r3, #2]
 800720a:	461a      	mov	r2, r3
 800720c:	4b23      	ldr	r3, [pc, #140]	; (800729c <Screen_Home_Origin+0x104>)
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	785b      	ldrb	r3, [r3, #1]
 8007212:	4619      	mov	r1, r3
 8007214:	4b21      	ldr	r3, [pc, #132]	; (800729c <Screen_Home_Origin+0x104>)
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	781b      	ldrb	r3, [r3, #0]
 800721a:	f107 000c 	add.w	r0, r7, #12
 800721e:	9300      	str	r3, [sp, #0]
 8007220:	460b      	mov	r3, r1
 8007222:	4923      	ldr	r1, [pc, #140]	; (80072b0 <Screen_Home_Origin+0x118>)
 8007224:	f005 fafc 	bl	800c820 <siprintf>
    LCD_Print(buffer);
 8007228:	f107 030c 	add.w	r3, r7, #12
 800722c:	4618      	mov	r0, r3
 800722e:	f7ff ff84 	bl	800713a <LCD_Print>
    LCD_GotoXY(0, 2);
 8007232:	2102      	movs	r1, #2
 8007234:	2000      	movs	r0, #0
 8007236:	f7ff ff55 	bl	80070e4 <LCD_GotoXY>
    sprintf(buffer,"%02d:%02d:%02d", __MY_RTC->Hour, __MY_RTC->Min, __MY_RTC->Sec);
 800723a:	4b18      	ldr	r3, [pc, #96]	; (800729c <Screen_Home_Origin+0x104>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	791b      	ldrb	r3, [r3, #4]
 8007240:	461a      	mov	r2, r3
 8007242:	4b16      	ldr	r3, [pc, #88]	; (800729c <Screen_Home_Origin+0x104>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	795b      	ldrb	r3, [r3, #5]
 8007248:	4619      	mov	r1, r3
 800724a:	4b14      	ldr	r3, [pc, #80]	; (800729c <Screen_Home_Origin+0x104>)
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	799b      	ldrb	r3, [r3, #6]
 8007250:	f107 000c 	add.w	r0, r7, #12
 8007254:	9300      	str	r3, [sp, #0]
 8007256:	460b      	mov	r3, r1
 8007258:	4916      	ldr	r1, [pc, #88]	; (80072b4 <Screen_Home_Origin+0x11c>)
 800725a:	f005 fae1 	bl	800c820 <siprintf>
    LCD_Print(buffer);
 800725e:	f107 030c 	add.w	r3, r7, #12
 8007262:	4618      	mov	r0, r3
 8007264:	f7ff ff69 	bl	800713a <LCD_Print>
    LCD_GotoXY(5, 3);
 8007268:	2103      	movs	r1, #3
 800726a:	2005      	movs	r0, #5
 800726c:	f7ff ff3a 	bl	80070e4 <LCD_GotoXY>
    LCD_SendData(_LCD_CHAR_LEFT);
 8007270:	2002      	movs	r0, #2
 8007272:	f7ff fe9b 	bl	8006fac <LCD_SendData>
    LCD_GotoXY(6, 3);
 8007276:	2103      	movs	r1, #3
 8007278:	2006      	movs	r0, #6
 800727a:	f7ff ff33 	bl	80070e4 <LCD_GotoXY>
    LCD_Print("HOME");
 800727e:	480e      	ldr	r0, [pc, #56]	; (80072b8 <Screen_Home_Origin+0x120>)
 8007280:	f7ff ff5b 	bl	800713a <LCD_Print>
    LCD_GotoXY(10,3);
 8007284:	2103      	movs	r1, #3
 8007286:	200a      	movs	r0, #10
 8007288:	f7ff ff2c 	bl	80070e4 <LCD_GotoXY>
    LCD_SendData(_LCD_CHAR_RIGHT);
 800728c:	2000      	movs	r0, #0
 800728e:	f7ff fe8d 	bl	8006fac <LCD_SendData>
}
 8007292:	bf00      	nop
 8007294:	3720      	adds	r7, #32
 8007296:	46bd      	mov	sp, r7
 8007298:	bd80      	pop	{r7, pc}
 800729a:	bf00      	nop
 800729c:	20002bfc 	.word	0x20002bfc
 80072a0:	0800f1bc 	.word	0x0800f1bc
 80072a4:	0800f1c4 	.word	0x0800f1c4
 80072a8:	0800f1c8 	.word	0x0800f1c8
 80072ac:	0800f1cc 	.word	0x0800f1cc
 80072b0:	0800f1e0 	.word	0x0800f1e0
 80072b4:	0800f1f0 	.word	0x0800f1f0
 80072b8:	0800f200 	.word	0x0800f200

080072bc <Screen_Home_Sync>:

void Screen_Home_Sync(uint8_t time)
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b088      	sub	sp, #32
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	4603      	mov	r3, r0
 80072c4:	71fb      	strb	r3, [r7, #7]
    char buffer[20];
//	LCD_Clear();
	LCD_GotoXY(1, 0);
 80072c6:	2100      	movs	r1, #0
 80072c8:	2001      	movs	r0, #1
 80072ca:	f7ff ff0b 	bl	80070e4 <LCD_GotoXY>
	LCD_Print("Received Order");
 80072ce:	4819      	ldr	r0, [pc, #100]	; (8007334 <Screen_Home_Sync+0x78>)
 80072d0:	f7ff ff33 	bl	800713a <LCD_Print>

    LCD_GotoXY(1, 1);
 80072d4:	2101      	movs	r1, #1
 80072d6:	2001      	movs	r0, #1
 80072d8:	f7ff ff04 	bl	80070e4 <LCD_GotoXY>
    LCD_Print("OFF after:");
 80072dc:	4816      	ldr	r0, [pc, #88]	; (8007338 <Screen_Home_Sync+0x7c>)
 80072de:	f7ff ff2c 	bl	800713a <LCD_Print>
    LCD_GotoXY(6, 2);
 80072e2:	2102      	movs	r1, #2
 80072e4:	2006      	movs	r0, #6
 80072e6:	f7ff fefd 	bl	80070e4 <LCD_GotoXY>
    sprintf(buffer, "%03ds", time);
 80072ea:	79fa      	ldrb	r2, [r7, #7]
 80072ec:	f107 030c 	add.w	r3, r7, #12
 80072f0:	4912      	ldr	r1, [pc, #72]	; (800733c <Screen_Home_Sync+0x80>)
 80072f2:	4618      	mov	r0, r3
 80072f4:	f005 fa94 	bl	800c820 <siprintf>
    LCD_Print(buffer);
 80072f8:	f107 030c 	add.w	r3, r7, #12
 80072fc:	4618      	mov	r0, r3
 80072fe:	f7ff ff1c 	bl	800713a <LCD_Print>
    LCD_GotoXY(5, 3);
 8007302:	2103      	movs	r1, #3
 8007304:	2005      	movs	r0, #5
 8007306:	f7ff feed 	bl	80070e4 <LCD_GotoXY>
    LCD_SendData(_LCD_CHAR_LEFT);
 800730a:	2002      	movs	r0, #2
 800730c:	f7ff fe4e 	bl	8006fac <LCD_SendData>
    LCD_GotoXY(6, 3);
 8007310:	2103      	movs	r1, #3
 8007312:	2006      	movs	r0, #6
 8007314:	f7ff fee6 	bl	80070e4 <LCD_GotoXY>
    LCD_Print("HOME");
 8007318:	4809      	ldr	r0, [pc, #36]	; (8007340 <Screen_Home_Sync+0x84>)
 800731a:	f7ff ff0e 	bl	800713a <LCD_Print>
    LCD_GotoXY(10,3);
 800731e:	2103      	movs	r1, #3
 8007320:	200a      	movs	r0, #10
 8007322:	f7ff fedf 	bl	80070e4 <LCD_GotoXY>
    LCD_SendData(_LCD_CHAR_RIGHT);
 8007326:	2000      	movs	r0, #0
 8007328:	f7ff fe40 	bl	8006fac <LCD_SendData>
}
 800732c:	bf00      	nop
 800732e:	3720      	adds	r7, #32
 8007330:	46bd      	mov	sp, r7
 8007332:	bd80      	pop	{r7, pc}
 8007334:	0800f208 	.word	0x0800f208
 8007338:	0800f218 	.word	0x0800f218
 800733c:	0800f224 	.word	0x0800f224
 8007340:	0800f200 	.word	0x0800f200

08007344 <Screen_Home_Calib>:
		LCD_Print(buffer);
	}
}

void Screen_Home_Calib(void)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b088      	sub	sp, #32
 8007348:	af02      	add	r7, sp, #8
    char buffer[20];
//    DS3231_GetTime(&__MY_RTC);
//	LCD_Clear();
	LCD_GotoXY(1, 0);
 800734a:	2100      	movs	r1, #0
 800734c:	2001      	movs	r0, #1
 800734e:	f7ff fec9 	bl	80070e4 <LCD_GotoXY>
	LCD_Print("Received Order");
 8007352:	4827      	ldr	r0, [pc, #156]	; (80073f0 <Screen_Home_Calib+0xac>)
 8007354:	f7ff fef1 	bl	800713a <LCD_Print>
    LCD_GotoXY(0, 1);
 8007358:	2101      	movs	r1, #1
 800735a:	2000      	movs	r0, #0
 800735c:	f7ff fec2 	bl	80070e4 <LCD_GotoXY>
    sprintf(buffer,"SWoff: %02dh%02dm%02ds", __MY_RTC->Hour, __MY_RTC->Min, __MY_RTC->Sec);
 8007360:	4b24      	ldr	r3, [pc, #144]	; (80073f4 <Screen_Home_Calib+0xb0>)
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	791b      	ldrb	r3, [r3, #4]
 8007366:	461a      	mov	r2, r3
 8007368:	4b22      	ldr	r3, [pc, #136]	; (80073f4 <Screen_Home_Calib+0xb0>)
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	795b      	ldrb	r3, [r3, #5]
 800736e:	4619      	mov	r1, r3
 8007370:	4b20      	ldr	r3, [pc, #128]	; (80073f4 <Screen_Home_Calib+0xb0>)
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	799b      	ldrb	r3, [r3, #6]
 8007376:	1d38      	adds	r0, r7, #4
 8007378:	9300      	str	r3, [sp, #0]
 800737a:	460b      	mov	r3, r1
 800737c:	491e      	ldr	r1, [pc, #120]	; (80073f8 <Screen_Home_Calib+0xb4>)
 800737e:	f005 fa4f 	bl	800c820 <siprintf>
    LCD_Print(buffer);
 8007382:	1d3b      	adds	r3, r7, #4
 8007384:	4618      	mov	r0, r3
 8007386:	f7ff fed8 	bl	800713a <LCD_Print>
    LCD_GotoXY(0, 2);
 800738a:	2102      	movs	r1, #2
 800738c:	2000      	movs	r0, #0
 800738e:	f7ff fea9 	bl	80070e4 <LCD_GotoXY>
    sprintf(buffer,"Date:  %02d/%02d/%d", __MY_RTC->Date, __MY_RTC->Month, __MY_RTC->Year);
 8007392:	4b18      	ldr	r3, [pc, #96]	; (80073f4 <Screen_Home_Calib+0xb0>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	789b      	ldrb	r3, [r3, #2]
 8007398:	461a      	mov	r2, r3
 800739a:	4b16      	ldr	r3, [pc, #88]	; (80073f4 <Screen_Home_Calib+0xb0>)
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	785b      	ldrb	r3, [r3, #1]
 80073a0:	4619      	mov	r1, r3
 80073a2:	4b14      	ldr	r3, [pc, #80]	; (80073f4 <Screen_Home_Calib+0xb0>)
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	781b      	ldrb	r3, [r3, #0]
 80073a8:	1d38      	adds	r0, r7, #4
 80073aa:	9300      	str	r3, [sp, #0]
 80073ac:	460b      	mov	r3, r1
 80073ae:	4913      	ldr	r1, [pc, #76]	; (80073fc <Screen_Home_Calib+0xb8>)
 80073b0:	f005 fa36 	bl	800c820 <siprintf>
    LCD_Print(buffer);
 80073b4:	1d3b      	adds	r3, r7, #4
 80073b6:	4618      	mov	r0, r3
 80073b8:	f7ff febf 	bl	800713a <LCD_Print>
    LCD_GotoXY(5, 3);
 80073bc:	2103      	movs	r1, #3
 80073be:	2005      	movs	r0, #5
 80073c0:	f7ff fe90 	bl	80070e4 <LCD_GotoXY>
    LCD_SendData(_LCD_CHAR_LEFT);
 80073c4:	2002      	movs	r0, #2
 80073c6:	f7ff fdf1 	bl	8006fac <LCD_SendData>
    LCD_GotoXY(6, 3);
 80073ca:	2103      	movs	r1, #3
 80073cc:	2006      	movs	r0, #6
 80073ce:	f7ff fe89 	bl	80070e4 <LCD_GotoXY>
    LCD_Print("HOME");
 80073d2:	480b      	ldr	r0, [pc, #44]	; (8007400 <Screen_Home_Calib+0xbc>)
 80073d4:	f7ff feb1 	bl	800713a <LCD_Print>
    LCD_GotoXY(10,3);
 80073d8:	2103      	movs	r1, #3
 80073da:	200a      	movs	r0, #10
 80073dc:	f7ff fe82 	bl	80070e4 <LCD_GotoXY>
    LCD_SendData(_LCD_CHAR_RIGHT);
 80073e0:	2000      	movs	r0, #0
 80073e2:	f7ff fde3 	bl	8006fac <LCD_SendData>
}
 80073e6:	bf00      	nop
 80073e8:	3718      	adds	r7, #24
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bd80      	pop	{r7, pc}
 80073ee:	bf00      	nop
 80073f0:	0800f208 	.word	0x0800f208
 80073f4:	20002bfc 	.word	0x20002bfc
 80073f8:	0800f22c 	.word	0x0800f22c
 80073fc:	0800f244 	.word	0x0800f244
 8007400:	0800f200 	.word	0x0800f200

08007404 <Screen_Monitor_Station>:

void Screen_Monitor_Station(uint8_t mode, uint16_t current)
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b088      	sub	sp, #32
 8007408:	af00      	add	r7, sp, #0
 800740a:	4603      	mov	r3, r0
 800740c:	460a      	mov	r2, r1
 800740e:	71fb      	strb	r3, [r7, #7]
 8007410:	4613      	mov	r3, r2
 8007412:	80bb      	strh	r3, [r7, #4]
    char buffer[20];
	LCD_GotoXY(0, 0);
 8007414:	2100      	movs	r1, #0
 8007416:	2000      	movs	r0, #0
 8007418:	f7ff fe64 	bl	80070e4 <LCD_GotoXY>
    LCD_SendData(_LCD_CHAR_UP);
 800741c:	2006      	movs	r0, #6
 800741e:	f7ff fdc5 	bl	8006fac <LCD_SendData>
	LCD_GotoXY(1, 0);
 8007422:	2100      	movs	r1, #0
 8007424:	2001      	movs	r0, #1
 8007426:	f7ff fe5d 	bl	80070e4 <LCD_GotoXY>
	LCD_Print("Station Status");
 800742a:	4822      	ldr	r0, [pc, #136]	; (80074b4 <Screen_Monitor_Station+0xb0>)
 800742c:	f7ff fe85 	bl	800713a <LCD_Print>
    LCD_GotoXY(1, 1);
 8007430:	2101      	movs	r1, #1
 8007432:	2001      	movs	r0, #1
 8007434:	f7ff fe56 	bl	80070e4 <LCD_GotoXY>
    if (mode == 2)
 8007438:	79fb      	ldrb	r3, [r7, #7]
 800743a:	2b02      	cmp	r3, #2
 800743c:	d103      	bne.n	8007446 <Screen_Monitor_Station+0x42>
    {
        LCD_Print("Contactor: OFF");
 800743e:	481e      	ldr	r0, [pc, #120]	; (80074b8 <Screen_Monitor_Station+0xb4>)
 8007440:	f7ff fe7b 	bl	800713a <LCD_Print>
 8007444:	e005      	b.n	8007452 <Screen_Monitor_Station+0x4e>
    } else if (mode == 1){
 8007446:	79fb      	ldrb	r3, [r7, #7]
 8007448:	2b01      	cmp	r3, #1
 800744a:	d102      	bne.n	8007452 <Screen_Monitor_Station+0x4e>
        LCD_Print("Contactor: ON");
 800744c:	481b      	ldr	r0, [pc, #108]	; (80074bc <Screen_Monitor_Station+0xb8>)
 800744e:	f7ff fe74 	bl	800713a <LCD_Print>
    }
    LCD_GotoXY(1, 2);
 8007452:	2102      	movs	r1, #2
 8007454:	2001      	movs	r0, #1
 8007456:	f7ff fe45 	bl	80070e4 <LCD_GotoXY>
    sprintf(buffer,"Current: %04dmA", current);
 800745a:	88ba      	ldrh	r2, [r7, #4]
 800745c:	f107 030c 	add.w	r3, r7, #12
 8007460:	4917      	ldr	r1, [pc, #92]	; (80074c0 <Screen_Monitor_Station+0xbc>)
 8007462:	4618      	mov	r0, r3
 8007464:	f005 f9dc 	bl	800c820 <siprintf>
    LCD_Print(buffer);
 8007468:	f107 030c 	add.w	r3, r7, #12
 800746c:	4618      	mov	r0, r3
 800746e:	f7ff fe64 	bl	800713a <LCD_Print>
    LCD_GotoXY(0, 2);
 8007472:	2102      	movs	r1, #2
 8007474:	2000      	movs	r0, #0
 8007476:	f7ff fe35 	bl	80070e4 <LCD_GotoXY>
	LCD_SendData(_LCD_CHAR_DOWN);
 800747a:	2007      	movs	r0, #7
 800747c:	f7ff fd96 	bl	8006fac <LCD_SendData>
    LCD_GotoXY(4, 3);
 8007480:	2103      	movs	r1, #3
 8007482:	2004      	movs	r0, #4
 8007484:	f7ff fe2e 	bl	80070e4 <LCD_GotoXY>
    LCD_SendData(_LCD_CHAR_LEFT);
 8007488:	2002      	movs	r0, #2
 800748a:	f7ff fd8f 	bl	8006fac <LCD_SendData>
    LCD_GotoXY(5, 3);
 800748e:	2103      	movs	r1, #3
 8007490:	2005      	movs	r0, #5
 8007492:	f7ff fe27 	bl	80070e4 <LCD_GotoXY>
    LCD_Print("MONITOR");
 8007496:	480b      	ldr	r0, [pc, #44]	; (80074c4 <Screen_Monitor_Station+0xc0>)
 8007498:	f7ff fe4f 	bl	800713a <LCD_Print>
    LCD_GotoXY(12,3);
 800749c:	2103      	movs	r1, #3
 800749e:	200c      	movs	r0, #12
 80074a0:	f7ff fe20 	bl	80070e4 <LCD_GotoXY>
    LCD_SendData(_LCD_CHAR_RIGHT);
 80074a4:	2000      	movs	r0, #0
 80074a6:	f7ff fd81 	bl	8006fac <LCD_SendData>
}
 80074aa:	bf00      	nop
 80074ac:	3720      	adds	r7, #32
 80074ae:	46bd      	mov	sp, r7
 80074b0:	bd80      	pop	{r7, pc}
 80074b2:	bf00      	nop
 80074b4:	0800f258 	.word	0x0800f258
 80074b8:	0800f268 	.word	0x0800f268
 80074bc:	0800f278 	.word	0x0800f278
 80074c0:	0800f288 	.word	0x0800f288
 80074c4:	0800f298 	.word	0x0800f298

080074c8 <Screen_Monitor_Node>:

void Screen_Monitor_Node(uint8_t ID, uint8_t mode, uint16_t battery, uint8_t type, uint16_t voltage)
{
 80074c8:	b590      	push	{r4, r7, lr}
 80074ca:	b089      	sub	sp, #36	; 0x24
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	4604      	mov	r4, r0
 80074d0:	4608      	mov	r0, r1
 80074d2:	4611      	mov	r1, r2
 80074d4:	461a      	mov	r2, r3
 80074d6:	4623      	mov	r3, r4
 80074d8:	71fb      	strb	r3, [r7, #7]
 80074da:	4603      	mov	r3, r0
 80074dc:	71bb      	strb	r3, [r7, #6]
 80074de:	460b      	mov	r3, r1
 80074e0:	80bb      	strh	r3, [r7, #4]
 80074e2:	4613      	mov	r3, r2
 80074e4:	70fb      	strb	r3, [r7, #3]
    char buffer[20];
//	LCD_Clear();
	LCD_GotoXY(0, 0);
 80074e6:	2100      	movs	r1, #0
 80074e8:	2000      	movs	r0, #0
 80074ea:	f7ff fdfb 	bl	80070e4 <LCD_GotoXY>
    LCD_SendData(_LCD_CHAR_UP);
 80074ee:	2006      	movs	r0, #6
 80074f0:	f7ff fd5c 	bl	8006fac <LCD_SendData>
    LCD_GotoXY(1, 0);
 80074f4:	2100      	movs	r1, #0
 80074f6:	2001      	movs	r0, #1
 80074f8:	f7ff fdf4 	bl	80070e4 <LCD_GotoXY>
    sprintf(buffer,"Sensor ID: 0x%02X", ID);
 80074fc:	79fa      	ldrb	r2, [r7, #7]
 80074fe:	f107 030c 	add.w	r3, r7, #12
 8007502:	4940      	ldr	r1, [pc, #256]	; (8007604 <Screen_Monitor_Node+0x13c>)
 8007504:	4618      	mov	r0, r3
 8007506:	f005 f98b 	bl	800c820 <siprintf>
    LCD_Print(buffer);
 800750a:	f107 030c 	add.w	r3, r7, #12
 800750e:	4618      	mov	r0, r3
 8007510:	f7ff fe13 	bl	800713a <LCD_Print>
    LCD_GotoXY(1, 1);
 8007514:	2101      	movs	r1, #1
 8007516:	2001      	movs	r0, #1
 8007518:	f7ff fde4 	bl	80070e4 <LCD_GotoXY>
    if (mode == 2)
 800751c:	79bb      	ldrb	r3, [r7, #6]
 800751e:	2b02      	cmp	r3, #2
 8007520:	d103      	bne.n	800752a <Screen_Monitor_Node+0x62>
    {
        LCD_Print("Status: OFF");
 8007522:	4839      	ldr	r0, [pc, #228]	; (8007608 <Screen_Monitor_Node+0x140>)
 8007524:	f7ff fe09 	bl	800713a <LCD_Print>
 8007528:	e005      	b.n	8007536 <Screen_Monitor_Node+0x6e>
    } else if (mode == 1){
 800752a:	79bb      	ldrb	r3, [r7, #6]
 800752c:	2b01      	cmp	r3, #1
 800752e:	d102      	bne.n	8007536 <Screen_Monitor_Node+0x6e>
        LCD_Print("Status: ON");
 8007530:	4836      	ldr	r0, [pc, #216]	; (800760c <Screen_Monitor_Node+0x144>)
 8007532:	f7ff fe02 	bl	800713a <LCD_Print>
    }
    LCD_GotoXY(1, 2);
 8007536:	2102      	movs	r1, #2
 8007538:	2001      	movs	r0, #1
 800753a:	f7ff fdd3 	bl	80070e4 <LCD_GotoXY>
    sprintf(buffer,"Battery: %01d.%02dV", battery/100, battery%100);
 800753e:	88bb      	ldrh	r3, [r7, #4]
 8007540:	4a33      	ldr	r2, [pc, #204]	; (8007610 <Screen_Monitor_Node+0x148>)
 8007542:	fba2 2303 	umull	r2, r3, r2, r3
 8007546:	095b      	lsrs	r3, r3, #5
 8007548:	b29b      	uxth	r3, r3
 800754a:	461c      	mov	r4, r3
 800754c:	88bb      	ldrh	r3, [r7, #4]
 800754e:	4a30      	ldr	r2, [pc, #192]	; (8007610 <Screen_Monitor_Node+0x148>)
 8007550:	fba2 1203 	umull	r1, r2, r2, r3
 8007554:	0952      	lsrs	r2, r2, #5
 8007556:	2164      	movs	r1, #100	; 0x64
 8007558:	fb01 f202 	mul.w	r2, r1, r2
 800755c:	1a9b      	subs	r3, r3, r2
 800755e:	b29b      	uxth	r3, r3
 8007560:	f107 000c 	add.w	r0, r7, #12
 8007564:	4622      	mov	r2, r4
 8007566:	492b      	ldr	r1, [pc, #172]	; (8007614 <Screen_Monitor_Node+0x14c>)
 8007568:	f005 f95a 	bl	800c820 <siprintf>
    LCD_Print(buffer);
 800756c:	f107 030c 	add.w	r3, r7, #12
 8007570:	4618      	mov	r0, r3
 8007572:	f7ff fde2 	bl	800713a <LCD_Print>
    LCD_GotoXY(0, 3);
 8007576:	2103      	movs	r1, #3
 8007578:	2000      	movs	r0, #0
 800757a:	f7ff fdb3 	bl	80070e4 <LCD_GotoXY>
	LCD_SendData(_LCD_CHAR_DOWN);
 800757e:	2007      	movs	r0, #7
 8007580:	f7ff fd14 	bl	8006fac <LCD_SendData>
    LCD_GotoXY(1, 3);
 8007584:	2103      	movs	r1, #3
 8007586:	2001      	movs	r0, #1
 8007588:	f7ff fdac 	bl	80070e4 <LCD_GotoXY>
    if (type == 1)
 800758c:	78fb      	ldrb	r3, [r7, #3]
 800758e:	2b01      	cmp	r3, #1
 8007590:	d117      	bne.n	80075c2 <Screen_Monitor_Node+0xfa>
    {
        sprintf(buffer,"VP: %01d.%02dV", voltage/100, voltage%100);
 8007592:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8007594:	4a1e      	ldr	r2, [pc, #120]	; (8007610 <Screen_Monitor_Node+0x148>)
 8007596:	fba2 2303 	umull	r2, r3, r2, r3
 800759a:	095b      	lsrs	r3, r3, #5
 800759c:	b29b      	uxth	r3, r3
 800759e:	461c      	mov	r4, r3
 80075a0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80075a2:	4a1b      	ldr	r2, [pc, #108]	; (8007610 <Screen_Monitor_Node+0x148>)
 80075a4:	fba2 1203 	umull	r1, r2, r2, r3
 80075a8:	0952      	lsrs	r2, r2, #5
 80075aa:	2164      	movs	r1, #100	; 0x64
 80075ac:	fb01 f202 	mul.w	r2, r1, r2
 80075b0:	1a9b      	subs	r3, r3, r2
 80075b2:	b29b      	uxth	r3, r3
 80075b4:	f107 000c 	add.w	r0, r7, #12
 80075b8:	4622      	mov	r2, r4
 80075ba:	4917      	ldr	r1, [pc, #92]	; (8007618 <Screen_Monitor_Node+0x150>)
 80075bc:	f005 f930 	bl	800c820 <siprintf>
 80075c0:	e016      	b.n	80075f0 <Screen_Monitor_Node+0x128>
    } else {
        sprintf(buffer,"VNA: %01d.%02dV", voltage/100, voltage%100);
 80075c2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80075c4:	4a12      	ldr	r2, [pc, #72]	; (8007610 <Screen_Monitor_Node+0x148>)
 80075c6:	fba2 2303 	umull	r2, r3, r2, r3
 80075ca:	095b      	lsrs	r3, r3, #5
 80075cc:	b29b      	uxth	r3, r3
 80075ce:	461c      	mov	r4, r3
 80075d0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80075d2:	4a0f      	ldr	r2, [pc, #60]	; (8007610 <Screen_Monitor_Node+0x148>)
 80075d4:	fba2 1203 	umull	r1, r2, r2, r3
 80075d8:	0952      	lsrs	r2, r2, #5
 80075da:	2164      	movs	r1, #100	; 0x64
 80075dc:	fb01 f202 	mul.w	r2, r1, r2
 80075e0:	1a9b      	subs	r3, r3, r2
 80075e2:	b29b      	uxth	r3, r3
 80075e4:	f107 000c 	add.w	r0, r7, #12
 80075e8:	4622      	mov	r2, r4
 80075ea:	490c      	ldr	r1, [pc, #48]	; (800761c <Screen_Monitor_Node+0x154>)
 80075ec:	f005 f918 	bl	800c820 <siprintf>
    }
    LCD_Print(buffer);
 80075f0:	f107 030c 	add.w	r3, r7, #12
 80075f4:	4618      	mov	r0, r3
 80075f6:	f7ff fda0 	bl	800713a <LCD_Print>
}
 80075fa:	bf00      	nop
 80075fc:	3724      	adds	r7, #36	; 0x24
 80075fe:	46bd      	mov	sp, r7
 8007600:	bd90      	pop	{r4, r7, pc}
 8007602:	bf00      	nop
 8007604:	0800f2a0 	.word	0x0800f2a0
 8007608:	0800f2b4 	.word	0x0800f2b4
 800760c:	0800f2c0 	.word	0x0800f2c0
 8007610:	51eb851f 	.word	0x51eb851f
 8007614:	0800f2cc 	.word	0x0800f2cc
 8007618:	0800f2e0 	.word	0x0800f2e0
 800761c:	0800f2f0 	.word	0x0800f2f0

08007620 <Screen_Function>:

void Screen_Function(uint8_t position)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b082      	sub	sp, #8
 8007624:	af00      	add	r7, sp, #0
 8007626:	4603      	mov	r3, r0
 8007628:	71fb      	strb	r3, [r7, #7]
//	LCD_Clear();
	LCD_GotoXY(0, position);
 800762a:	79fb      	ldrb	r3, [r7, #7]
 800762c:	4619      	mov	r1, r3
 800762e:	2000      	movs	r0, #0
 8007630:	f7ff fd58 	bl	80070e4 <LCD_GotoXY>
	LCD_SendData(_LCD_CHAR_RIGHT_INVERT);
 8007634:	2001      	movs	r0, #1
 8007636:	f7ff fcb9 	bl	8006fac <LCD_SendData>
    LCD_GotoXY(1, 0);
 800763a:	2100      	movs	r1, #0
 800763c:	2001      	movs	r0, #1
 800763e:	f7ff fd51 	bl	80070e4 <LCD_GotoXY>
    LCD_Print("Control Voltage");
 8007642:	4811      	ldr	r0, [pc, #68]	; (8007688 <Screen_Function+0x68>)
 8007644:	f7ff fd79 	bl	800713a <LCD_Print>
    LCD_GotoXY(1, 1);
 8007648:	2101      	movs	r1, #1
 800764a:	2001      	movs	r0, #1
 800764c:	f7ff fd4a 	bl	80070e4 <LCD_GotoXY>
    LCD_Print("Control ON/OFF");
 8007650:	480e      	ldr	r0, [pc, #56]	; (800768c <Screen_Function+0x6c>)
 8007652:	f7ff fd72 	bl	800713a <LCD_Print>
    LCD_GotoXY(3, 3);
 8007656:	2103      	movs	r1, #3
 8007658:	2003      	movs	r0, #3
 800765a:	f7ff fd43 	bl	80070e4 <LCD_GotoXY>
    LCD_SendData(_LCD_CHAR_LEFT);
 800765e:	2002      	movs	r0, #2
 8007660:	f7ff fca4 	bl	8006fac <LCD_SendData>
    LCD_GotoXY(4, 3);
 8007664:	2103      	movs	r1, #3
 8007666:	2004      	movs	r0, #4
 8007668:	f7ff fd3c 	bl	80070e4 <LCD_GotoXY>
    LCD_Print("FUNCTION");
 800766c:	4808      	ldr	r0, [pc, #32]	; (8007690 <Screen_Function+0x70>)
 800766e:	f7ff fd64 	bl	800713a <LCD_Print>
    LCD_GotoXY(12,3);
 8007672:	2103      	movs	r1, #3
 8007674:	200c      	movs	r0, #12
 8007676:	f7ff fd35 	bl	80070e4 <LCD_GotoXY>
    LCD_SendData(_LCD_CHAR_RIGHT);
 800767a:	2000      	movs	r0, #0
 800767c:	f7ff fc96 	bl	8006fac <LCD_SendData>
}
 8007680:	bf00      	nop
 8007682:	3708      	adds	r7, #8
 8007684:	46bd      	mov	sp, r7
 8007686:	bd80      	pop	{r7, pc}
 8007688:	0800f300 	.word	0x0800f300
 800768c:	0800f310 	.word	0x0800f310
 8007690:	0800f320 	.word	0x0800f320

08007694 <Screen_Voltage_Control>:
 * @argument :
 * 	- limit : 0 MIN, 1 MAX, other NONE
 * 	- ValorDir: 0 Value, 1 Direction
 */
void Screen_Voltage_Control(uint8_t limit , uint8_t ValorDir)
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b082      	sub	sp, #8
 8007698:	af00      	add	r7, sp, #0
 800769a:	4603      	mov	r3, r0
 800769c:	460a      	mov	r2, r1
 800769e:	71fb      	strb	r3, [r7, #7]
 80076a0:	4613      	mov	r3, r2
 80076a2:	71bb      	strb	r3, [r7, #6]
//	LCD_Clear();
	LCD_GotoXY(0, 0);
 80076a4:	2100      	movs	r1, #0
 80076a6:	2000      	movs	r0, #0
 80076a8:	f7ff fd1c 	bl	80070e4 <LCD_GotoXY>
	LCD_Print("Voltage Control");
 80076ac:	4823      	ldr	r0, [pc, #140]	; (800773c <Screen_Voltage_Control+0xa8>)
 80076ae:	f7ff fd44 	bl	800713a <LCD_Print>
	if (ValorDir == 0)	{
 80076b2:	79bb      	ldrb	r3, [r7, #6]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d104      	bne.n	80076c2 <Screen_Voltage_Control+0x2e>
		LCD_GotoXY(0, 1);
 80076b8:	2101      	movs	r1, #1
 80076ba:	2000      	movs	r0, #0
 80076bc:	f7ff fd12 	bl	80070e4 <LCD_GotoXY>
 80076c0:	e00b      	b.n	80076da <Screen_Voltage_Control+0x46>
	}
	else if (ValorDir == 1)  {
 80076c2:	79bb      	ldrb	r3, [r7, #6]
 80076c4:	2b01      	cmp	r3, #1
 80076c6:	d104      	bne.n	80076d2 <Screen_Voltage_Control+0x3e>
		LCD_GotoXY(0, 2);
 80076c8:	2102      	movs	r1, #2
 80076ca:	2000      	movs	r0, #0
 80076cc:	f7ff fd0a 	bl	80070e4 <LCD_GotoXY>
 80076d0:	e003      	b.n	80076da <Screen_Voltage_Control+0x46>
	}
	else {
		LCD_GotoXY(0, 3);
 80076d2:	2103      	movs	r1, #3
 80076d4:	2000      	movs	r0, #0
 80076d6:	f7ff fd05 	bl	80070e4 <LCD_GotoXY>
	}
	LCD_SendData(_LCD_CHAR_RIGHT);
 80076da:	2000      	movs	r0, #0
 80076dc:	f7ff fc66 	bl	8006fac <LCD_SendData>

    LCD_GotoXY(1, 1);
 80076e0:	2101      	movs	r1, #1
 80076e2:	2001      	movs	r0, #1
 80076e4:	f7ff fcfe 	bl	80070e4 <LCD_GotoXY>
    LCD_Print("Step: ");
 80076e8:	4815      	ldr	r0, [pc, #84]	; (8007740 <Screen_Voltage_Control+0xac>)
 80076ea:	f7ff fd26 	bl	800713a <LCD_Print>

    LCD_GotoXY(1, 2);
 80076ee:	2102      	movs	r1, #2
 80076f0:	2001      	movs	r0, #1
 80076f2:	f7ff fcf7 	bl	80070e4 <LCD_GotoXY>
    LCD_Print("Direction: ");
 80076f6:	4813      	ldr	r0, [pc, #76]	; (8007744 <Screen_Voltage_Control+0xb0>)
 80076f8:	f7ff fd1f 	bl	800713a <LCD_Print>

    LCD_GotoXY(1, 3);
 80076fc:	2103      	movs	r1, #3
 80076fe:	2001      	movs	r0, #1
 8007700:	f7ff fcf0 	bl	80070e4 <LCD_GotoXY>
    LCD_Print("Confirm");
 8007704:	4810      	ldr	r0, [pc, #64]	; (8007748 <Screen_Voltage_Control+0xb4>)
 8007706:	f7ff fd18 	bl	800713a <LCD_Print>

    LCD_GotoXY(12, 3);
 800770a:	2103      	movs	r1, #3
 800770c:	200c      	movs	r0, #12
 800770e:	f7ff fce9 	bl	80070e4 <LCD_GotoXY>
    if (limit == 0){
 8007712:	79fb      	ldrb	r3, [r7, #7]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d103      	bne.n	8007720 <Screen_Voltage_Control+0x8c>
        LCD_Print("MIN");
 8007718:	480c      	ldr	r0, [pc, #48]	; (800774c <Screen_Voltage_Control+0xb8>)
 800771a:	f7ff fd0e 	bl	800713a <LCD_Print>
//    LCD_SendData(_LCD_CHAR_LEFT);
//    LCD_GotoXY(4, 3);
//    LCD_Print("FUNCTION");
//    LCD_GotoXY(12,3);
//    LCD_SendData(_LCD_CHAR_RIGHT);
}
 800771e:	e009      	b.n	8007734 <Screen_Voltage_Control+0xa0>
    } else if (limit == 1) {
 8007720:	79fb      	ldrb	r3, [r7, #7]
 8007722:	2b01      	cmp	r3, #1
 8007724:	d103      	bne.n	800772e <Screen_Voltage_Control+0x9a>
        LCD_Print("MAX");
 8007726:	480a      	ldr	r0, [pc, #40]	; (8007750 <Screen_Voltage_Control+0xbc>)
 8007728:	f7ff fd07 	bl	800713a <LCD_Print>
}
 800772c:	e002      	b.n	8007734 <Screen_Voltage_Control+0xa0>
        LCD_Print("NONE");
 800772e:	4809      	ldr	r0, [pc, #36]	; (8007754 <Screen_Voltage_Control+0xc0>)
 8007730:	f7ff fd03 	bl	800713a <LCD_Print>
}
 8007734:	bf00      	nop
 8007736:	3708      	adds	r7, #8
 8007738:	46bd      	mov	sp, r7
 800773a:	bd80      	pop	{r7, pc}
 800773c:	0800f32c 	.word	0x0800f32c
 8007740:	0800f33c 	.word	0x0800f33c
 8007744:	0800f344 	.word	0x0800f344
 8007748:	0800f350 	.word	0x0800f350
 800774c:	0800f358 	.word	0x0800f358
 8007750:	0800f35c 	.word	0x0800f35c
 8007754:	0800f360 	.word	0x0800f360

08007758 <Screen_Dir_Control>:

void Screen_Dir_Control(uint8_t limit)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b082      	sub	sp, #8
 800775c:	af00      	add	r7, sp, #0
 800775e:	4603      	mov	r3, r0
 8007760:	71fb      	strb	r3, [r7, #7]
//	LCD_Clear();
	LCD_GotoXY(0, 0);
 8007762:	2100      	movs	r1, #0
 8007764:	2000      	movs	r0, #0
 8007766:	f7ff fcbd 	bl	80070e4 <LCD_GotoXY>
	LCD_Print("Voltage Control");
 800776a:	481c      	ldr	r0, [pc, #112]	; (80077dc <Screen_Dir_Control+0x84>)
 800776c:	f7ff fce5 	bl	800713a <LCD_Print>
//		LCD_GotoXY(0, 2);
//	}
//	else {
//		LCD_GotoXY(0, 2);
//	}
	LCD_GotoXY(15, 2);
 8007770:	2102      	movs	r1, #2
 8007772:	200f      	movs	r0, #15
 8007774:	f7ff fcb6 	bl	80070e4 <LCD_GotoXY>
	LCD_SendData(_LCD_CHAR_LEFT);
 8007778:	2002      	movs	r0, #2
 800777a:	f7ff fc17 	bl	8006fac <LCD_SendData>

    LCD_GotoXY(1, 1);
 800777e:	2101      	movs	r1, #1
 8007780:	2001      	movs	r0, #1
 8007782:	f7ff fcaf 	bl	80070e4 <LCD_GotoXY>
    LCD_Print("Step: ");
 8007786:	4816      	ldr	r0, [pc, #88]	; (80077e0 <Screen_Dir_Control+0x88>)
 8007788:	f7ff fcd7 	bl	800713a <LCD_Print>

    LCD_GotoXY(1, 2);
 800778c:	2102      	movs	r1, #2
 800778e:	2001      	movs	r0, #1
 8007790:	f7ff fca8 	bl	80070e4 <LCD_GotoXY>
    LCD_Print("Direction: ");
 8007794:	4813      	ldr	r0, [pc, #76]	; (80077e4 <Screen_Dir_Control+0x8c>)
 8007796:	f7ff fcd0 	bl	800713a <LCD_Print>

    LCD_GotoXY(1, 3);
 800779a:	2103      	movs	r1, #3
 800779c:	2001      	movs	r0, #1
 800779e:	f7ff fca1 	bl	80070e4 <LCD_GotoXY>
    LCD_Print("Confirm");
 80077a2:	4811      	ldr	r0, [pc, #68]	; (80077e8 <Screen_Dir_Control+0x90>)
 80077a4:	f7ff fcc9 	bl	800713a <LCD_Print>

    LCD_GotoXY(12, 3);
 80077a8:	2103      	movs	r1, #3
 80077aa:	200c      	movs	r0, #12
 80077ac:	f7ff fc9a 	bl	80070e4 <LCD_GotoXY>
    if (limit == 0){
 80077b0:	79fb      	ldrb	r3, [r7, #7]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d103      	bne.n	80077be <Screen_Dir_Control+0x66>
        LCD_Print("MIN");
 80077b6:	480d      	ldr	r0, [pc, #52]	; (80077ec <Screen_Dir_Control+0x94>)
 80077b8:	f7ff fcbf 	bl	800713a <LCD_Print>
//    LCD_SendData(_LCD_CHAR_LEFT);
//    LCD_GotoXY(4, 3);
//    LCD_Print("FUNCTION");
//    LCD_GotoXY(12,3);
//    LCD_SendData(_LCD_CHAR_RIGHT);
}
 80077bc:	e009      	b.n	80077d2 <Screen_Dir_Control+0x7a>
    } else if (limit == 1) {
 80077be:	79fb      	ldrb	r3, [r7, #7]
 80077c0:	2b01      	cmp	r3, #1
 80077c2:	d103      	bne.n	80077cc <Screen_Dir_Control+0x74>
        LCD_Print("MAX");
 80077c4:	480a      	ldr	r0, [pc, #40]	; (80077f0 <Screen_Dir_Control+0x98>)
 80077c6:	f7ff fcb8 	bl	800713a <LCD_Print>
}
 80077ca:	e002      	b.n	80077d2 <Screen_Dir_Control+0x7a>
        LCD_Print("NONE");
 80077cc:	4809      	ldr	r0, [pc, #36]	; (80077f4 <Screen_Dir_Control+0x9c>)
 80077ce:	f7ff fcb4 	bl	800713a <LCD_Print>
}
 80077d2:	bf00      	nop
 80077d4:	3708      	adds	r7, #8
 80077d6:	46bd      	mov	sp, r7
 80077d8:	bd80      	pop	{r7, pc}
 80077da:	bf00      	nop
 80077dc:	0800f32c 	.word	0x0800f32c
 80077e0:	0800f33c 	.word	0x0800f33c
 80077e4:	0800f344 	.word	0x0800f344
 80077e8:	0800f350 	.word	0x0800f350
 80077ec:	0800f358 	.word	0x0800f358
 80077f0:	0800f35c 	.word	0x0800f35c
 80077f4:	0800f360 	.word	0x0800f360

080077f8 <Screen_StepVal_Control>:

void Screen_StepVal_Control(uint8_t limit)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b082      	sub	sp, #8
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	4603      	mov	r3, r0
 8007800:	71fb      	strb	r3, [r7, #7]
//	LCD_Clear();
	LCD_GotoXY(0, 0);
 8007802:	2100      	movs	r1, #0
 8007804:	2000      	movs	r0, #0
 8007806:	f7ff fc6d 	bl	80070e4 <LCD_GotoXY>
	LCD_Print("Voltage Control");
 800780a:	481c      	ldr	r0, [pc, #112]	; (800787c <Screen_StepVal_Control+0x84>)
 800780c:	f7ff fc95 	bl	800713a <LCD_Print>

	LCD_GotoXY(12, 1);
 8007810:	2101      	movs	r1, #1
 8007812:	200c      	movs	r0, #12
 8007814:	f7ff fc66 	bl	80070e4 <LCD_GotoXY>
	LCD_SendData(_LCD_CHAR_LEFT);
 8007818:	2002      	movs	r0, #2
 800781a:	f7ff fbc7 	bl	8006fac <LCD_SendData>
//	else {
//		LCD_GotoXY(0, 2);
//	}
//	LCD_SendData(_LCD_CHAR_RIGHT);

    LCD_GotoXY(1, 1);
 800781e:	2101      	movs	r1, #1
 8007820:	2001      	movs	r0, #1
 8007822:	f7ff fc5f 	bl	80070e4 <LCD_GotoXY>
    LCD_Print("Step: ");
 8007826:	4816      	ldr	r0, [pc, #88]	; (8007880 <Screen_StepVal_Control+0x88>)
 8007828:	f7ff fc87 	bl	800713a <LCD_Print>

    LCD_GotoXY(1, 2);
 800782c:	2102      	movs	r1, #2
 800782e:	2001      	movs	r0, #1
 8007830:	f7ff fc58 	bl	80070e4 <LCD_GotoXY>
    LCD_Print("Direction: ");
 8007834:	4813      	ldr	r0, [pc, #76]	; (8007884 <Screen_StepVal_Control+0x8c>)
 8007836:	f7ff fc80 	bl	800713a <LCD_Print>

    LCD_GotoXY(1, 3);
 800783a:	2103      	movs	r1, #3
 800783c:	2001      	movs	r0, #1
 800783e:	f7ff fc51 	bl	80070e4 <LCD_GotoXY>
    LCD_Print("Confirm");
 8007842:	4811      	ldr	r0, [pc, #68]	; (8007888 <Screen_StepVal_Control+0x90>)
 8007844:	f7ff fc79 	bl	800713a <LCD_Print>

    LCD_GotoXY(12, 3);
 8007848:	2103      	movs	r1, #3
 800784a:	200c      	movs	r0, #12
 800784c:	f7ff fc4a 	bl	80070e4 <LCD_GotoXY>
    if (limit == 0){
 8007850:	79fb      	ldrb	r3, [r7, #7]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d103      	bne.n	800785e <Screen_StepVal_Control+0x66>
        LCD_Print("MIN");
 8007856:	480d      	ldr	r0, [pc, #52]	; (800788c <Screen_StepVal_Control+0x94>)
 8007858:	f7ff fc6f 	bl	800713a <LCD_Print>
//    LCD_SendData(_LCD_CHAR_LEFT);
//    LCD_GotoXY(4, 3);
//    LCD_Print("FUNCTION");
//    LCD_GotoXY(12,3);
//    LCD_SendData(_LCD_CHAR_RIGHT);
}
 800785c:	e009      	b.n	8007872 <Screen_StepVal_Control+0x7a>
    } else if (limit == 1) {
 800785e:	79fb      	ldrb	r3, [r7, #7]
 8007860:	2b01      	cmp	r3, #1
 8007862:	d103      	bne.n	800786c <Screen_StepVal_Control+0x74>
        LCD_Print("MAX");
 8007864:	480a      	ldr	r0, [pc, #40]	; (8007890 <Screen_StepVal_Control+0x98>)
 8007866:	f7ff fc68 	bl	800713a <LCD_Print>
}
 800786a:	e002      	b.n	8007872 <Screen_StepVal_Control+0x7a>
        LCD_Print("NONE");
 800786c:	4809      	ldr	r0, [pc, #36]	; (8007894 <Screen_StepVal_Control+0x9c>)
 800786e:	f7ff fc64 	bl	800713a <LCD_Print>
}
 8007872:	bf00      	nop
 8007874:	3708      	adds	r7, #8
 8007876:	46bd      	mov	sp, r7
 8007878:	bd80      	pop	{r7, pc}
 800787a:	bf00      	nop
 800787c:	0800f32c 	.word	0x0800f32c
 8007880:	0800f33c 	.word	0x0800f33c
 8007884:	0800f344 	.word	0x0800f344
 8007888:	0800f350 	.word	0x0800f350
 800788c:	0800f358 	.word	0x0800f358
 8007890:	0800f35c 	.word	0x0800f35c
 8007894:	0800f360 	.word	0x0800f360

08007898 <Screen_Voltage_Control_Control_Motor>:
void Screen_Voltage_Control_Control_Motor(uint16_t step, uint8_t dir)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b088      	sub	sp, #32
 800789c:	af00      	add	r7, sp, #0
 800789e:	4603      	mov	r3, r0
 80078a0:	460a      	mov	r2, r1
 80078a2:	80fb      	strh	r3, [r7, #6]
 80078a4:	4613      	mov	r3, r2
 80078a6:	717b      	strb	r3, [r7, #5]
//        // Motor go to left
//    } else {
//        // Motor go to left
//    }
//    // Read ADC
	LCD_GotoXY(7, 1);
 80078a8:	2101      	movs	r1, #1
 80078aa:	2007      	movs	r0, #7
 80078ac:	f7ff fc1a 	bl	80070e4 <LCD_GotoXY>
	sprintf(buffer,"%d", step);
 80078b0:	88fa      	ldrh	r2, [r7, #6]
 80078b2:	f107 030c 	add.w	r3, r7, #12
 80078b6:	490f      	ldr	r1, [pc, #60]	; (80078f4 <Screen_Voltage_Control_Control_Motor+0x5c>)
 80078b8:	4618      	mov	r0, r3
 80078ba:	f004 ffb1 	bl	800c820 <siprintf>
//	sprintf(buffer,"%01d.%02dV", adc_value/100, adc_value%100);
	LCD_Print(buffer);
 80078be:	f107 030c 	add.w	r3, r7, #12
 80078c2:	4618      	mov	r0, r3
 80078c4:	f7ff fc39 	bl	800713a <LCD_Print>
	LCD_GotoXY(12, 2);
 80078c8:	2102      	movs	r1, #2
 80078ca:	200c      	movs	r0, #12
 80078cc:	f7ff fc0a 	bl	80070e4 <LCD_GotoXY>
	if (dir == 0x01) {
 80078d0:	797b      	ldrb	r3, [r7, #5]
 80078d2:	2b01      	cmp	r3, #1
 80078d4:	d103      	bne.n	80078de <Screen_Voltage_Control_Control_Motor+0x46>
		LCD_Print("INC");
 80078d6:	4808      	ldr	r0, [pc, #32]	; (80078f8 <Screen_Voltage_Control_Control_Motor+0x60>)
 80078d8:	f7ff fc2f 	bl	800713a <LCD_Print>
		LCD_Print("DEC");
	}



}
 80078dc:	e005      	b.n	80078ea <Screen_Voltage_Control_Control_Motor+0x52>
	else if (dir == 0x02) {
 80078de:	797b      	ldrb	r3, [r7, #5]
 80078e0:	2b02      	cmp	r3, #2
 80078e2:	d102      	bne.n	80078ea <Screen_Voltage_Control_Control_Motor+0x52>
		LCD_Print("DEC");
 80078e4:	4805      	ldr	r0, [pc, #20]	; (80078fc <Screen_Voltage_Control_Control_Motor+0x64>)
 80078e6:	f7ff fc28 	bl	800713a <LCD_Print>
}
 80078ea:	bf00      	nop
 80078ec:	3720      	adds	r7, #32
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bd80      	pop	{r7, pc}
 80078f2:	bf00      	nop
 80078f4:	0800f368 	.word	0x0800f368
 80078f8:	0800f36c 	.word	0x0800f36c
 80078fc:	0800f370 	.word	0x0800f370

08007900 <Screen_Control_Relay>:

void Screen_Control_Relay(uint8_t position)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b082      	sub	sp, #8
 8007904:	af00      	add	r7, sp, #0
 8007906:	4603      	mov	r3, r0
 8007908:	71fb      	strb	r3, [r7, #7]
//	LCD_Clear();
	LCD_GotoXY(0, position+1);
 800790a:	79fb      	ldrb	r3, [r7, #7]
 800790c:	3301      	adds	r3, #1
 800790e:	b2db      	uxtb	r3, r3
 8007910:	4619      	mov	r1, r3
 8007912:	2000      	movs	r0, #0
 8007914:	f7ff fbe6 	bl	80070e4 <LCD_GotoXY>
	LCD_SendData(_LCD_CHAR_RIGHT_INVERT);
 8007918:	2001      	movs	r0, #1
 800791a:	f7ff fb47 	bl	8006fac <LCD_SendData>
    LCD_GotoXY(1, 0);
 800791e:	2100      	movs	r1, #0
 8007920:	2001      	movs	r0, #1
 8007922:	f7ff fbdf 	bl	80070e4 <LCD_GotoXY>
    LCD_Print("Output Control");
 8007926:	4815      	ldr	r0, [pc, #84]	; (800797c <Screen_Control_Relay+0x7c>)
 8007928:	f7ff fc07 	bl	800713a <LCD_Print>
    LCD_GotoXY(1, 1);
 800792c:	2101      	movs	r1, #1
 800792e:	2001      	movs	r0, #1
 8007930:	f7ff fbd8 	bl	80070e4 <LCD_GotoXY>
    LCD_Print("Trans. is: ");
 8007934:	4812      	ldr	r0, [pc, #72]	; (8007980 <Screen_Control_Relay+0x80>)
 8007936:	f7ff fc00 	bl	800713a <LCD_Print>
    LCD_GotoXY(1, 2);
 800793a:	2102      	movs	r1, #2
 800793c:	2001      	movs	r0, #1
 800793e:	f7ff fbd1 	bl	80070e4 <LCD_GotoXY>
    LCD_Print("Confirm: ");
 8007942:	4810      	ldr	r0, [pc, #64]	; (8007984 <Screen_Control_Relay+0x84>)
 8007944:	f7ff fbf9 	bl	800713a <LCD_Print>
    LCD_GotoXY(3, 3);
 8007948:	2103      	movs	r1, #3
 800794a:	2003      	movs	r0, #3
 800794c:	f7ff fbca 	bl	80070e4 <LCD_GotoXY>
    LCD_SendData(_LCD_CHAR_LEFT);
 8007950:	2002      	movs	r0, #2
 8007952:	f7ff fb2b 	bl	8006fac <LCD_SendData>
    LCD_GotoXY(4, 3);
 8007956:	2103      	movs	r1, #3
 8007958:	2004      	movs	r0, #4
 800795a:	f7ff fbc3 	bl	80070e4 <LCD_GotoXY>
    LCD_Print("FUNCTION");
 800795e:	480a      	ldr	r0, [pc, #40]	; (8007988 <Screen_Control_Relay+0x88>)
 8007960:	f7ff fbeb 	bl	800713a <LCD_Print>
    LCD_GotoXY(12,3);
 8007964:	2103      	movs	r1, #3
 8007966:	200c      	movs	r0, #12
 8007968:	f7ff fbbc 	bl	80070e4 <LCD_GotoXY>
    LCD_SendData(_LCD_CHAR_RIGHT);
 800796c:	2000      	movs	r0, #0
 800796e:	f7ff fb1d 	bl	8006fac <LCD_SendData>
}
 8007972:	bf00      	nop
 8007974:	3708      	adds	r7, #8
 8007976:	46bd      	mov	sp, r7
 8007978:	bd80      	pop	{r7, pc}
 800797a:	bf00      	nop
 800797c:	0800f374 	.word	0x0800f374
 8007980:	0800f384 	.word	0x0800f384
 8007984:	0800f390 	.word	0x0800f390
 8007988:	0800f320 	.word	0x0800f320

0800798c <Screen_Control_Relay_Change_Mode>:

void Screen_Control_Relay_Change_Mode(uint8_t curStatus,uint8_t status)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b082      	sub	sp, #8
 8007990:	af00      	add	r7, sp, #0
 8007992:	4603      	mov	r3, r0
 8007994:	460a      	mov	r2, r1
 8007996:	71fb      	strb	r3, [r7, #7]
 8007998:	4613      	mov	r3, r2
 800799a:	71bb      	strb	r3, [r7, #6]
	LCD_GotoXY(12, 1);
 800799c:	2101      	movs	r1, #1
 800799e:	200c      	movs	r0, #12
 80079a0:	f7ff fba0 	bl	80070e4 <LCD_GotoXY>
	if (curStatus == 2){
 80079a4:	79fb      	ldrb	r3, [r7, #7]
 80079a6:	2b02      	cmp	r3, #2
 80079a8:	d103      	bne.n	80079b2 <Screen_Control_Relay_Change_Mode+0x26>
		LCD_Print("OFF");
 80079aa:	480e      	ldr	r0, [pc, #56]	; (80079e4 <Screen_Control_Relay_Change_Mode+0x58>)
 80079ac:	f7ff fbc5 	bl	800713a <LCD_Print>
 80079b0:	e005      	b.n	80079be <Screen_Control_Relay_Change_Mode+0x32>
	} else if (curStatus == 1){
 80079b2:	79fb      	ldrb	r3, [r7, #7]
 80079b4:	2b01      	cmp	r3, #1
 80079b6:	d102      	bne.n	80079be <Screen_Control_Relay_Change_Mode+0x32>
		LCD_Print("ON");
 80079b8:	480b      	ldr	r0, [pc, #44]	; (80079e8 <Screen_Control_Relay_Change_Mode+0x5c>)
 80079ba:	f7ff fbbe 	bl	800713a <LCD_Print>
	}
	LCD_GotoXY(10, 2);
 80079be:	2102      	movs	r1, #2
 80079c0:	200a      	movs	r0, #10
 80079c2:	f7ff fb8f 	bl	80070e4 <LCD_GotoXY>
	if (status == 0){
 80079c6:	79bb      	ldrb	r3, [r7, #6]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d103      	bne.n	80079d4 <Screen_Control_Relay_Change_Mode+0x48>
		LCD_Print("OFF");
 80079cc:	4805      	ldr	r0, [pc, #20]	; (80079e4 <Screen_Control_Relay_Change_Mode+0x58>)
 80079ce:	f7ff fbb4 	bl	800713a <LCD_Print>
	} else {
		LCD_Print("ON");
	}
}
 80079d2:	e002      	b.n	80079da <Screen_Control_Relay_Change_Mode+0x4e>
		LCD_Print("ON");
 80079d4:	4804      	ldr	r0, [pc, #16]	; (80079e8 <Screen_Control_Relay_Change_Mode+0x5c>)
 80079d6:	f7ff fbb0 	bl	800713a <LCD_Print>
}
 80079da:	bf00      	nop
 80079dc:	3708      	adds	r7, #8
 80079de:	46bd      	mov	sp, r7
 80079e0:	bd80      	pop	{r7, pc}
 80079e2:	bf00      	nop
 80079e4:	0800f1c8 	.word	0x0800f1c8
 80079e8:	0800f39c 	.word	0x0800f39c

080079ec <Screen_Accept_Relay>:

void Screen_Accept_Relay(_RTC switchtime, uint8_t status)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b08c      	sub	sp, #48	; 0x30
 80079f0:	af02      	add	r7, sp, #8
 80079f2:	f107 0308 	add.w	r3, r7, #8
 80079f6:	e883 0003 	stmia.w	r3, {r0, r1}
 80079fa:	4613      	mov	r3, r2
 80079fc:	71fb      	strb	r3, [r7, #7]
    char buffer[20];
//    DS3231_GetTime(__MY_RTC);
//	LCD_Clear();
	LCD_GotoXY(1, 0);
 80079fe:	2100      	movs	r1, #0
 8007a00:	2001      	movs	r0, #1
 8007a02:	f7ff fb6f 	bl	80070e4 <LCD_GotoXY>
	LCD_Print("Output Control");
 8007a06:	4826      	ldr	r0, [pc, #152]	; (8007aa0 <Screen_Accept_Relay+0xb4>)
 8007a08:	f7ff fb97 	bl	800713a <LCD_Print>
	LCD_GotoXY(0, 1);
 8007a0c:	2101      	movs	r1, #1
 8007a0e:	2000      	movs	r0, #0
 8007a10:	f7ff fb68 	bl	80070e4 <LCD_GotoXY>
	LCD_Print("SWITCH");
 8007a14:	4823      	ldr	r0, [pc, #140]	; (8007aa4 <Screen_Accept_Relay+0xb8>)
 8007a16:	f7ff fb90 	bl	800713a <LCD_Print>
	LCD_GotoXY(7, 1);
 8007a1a:	2101      	movs	r1, #1
 8007a1c:	2007      	movs	r0, #7
 8007a1e:	f7ff fb61 	bl	80070e4 <LCD_GotoXY>
	if (status == 0){
 8007a22:	79fb      	ldrb	r3, [r7, #7]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d103      	bne.n	8007a30 <Screen_Accept_Relay+0x44>
		LCD_Print("OFF");
 8007a28:	481f      	ldr	r0, [pc, #124]	; (8007aa8 <Screen_Accept_Relay+0xbc>)
 8007a2a:	f7ff fb86 	bl	800713a <LCD_Print>
 8007a2e:	e002      	b.n	8007a36 <Screen_Accept_Relay+0x4a>
	} else {
		LCD_Print("ON");
 8007a30:	481e      	ldr	r0, [pc, #120]	; (8007aac <Screen_Accept_Relay+0xc0>)
 8007a32:	f7ff fb82 	bl	800713a <LCD_Print>
	}
	LCD_GotoXY(11, 1);
 8007a36:	2101      	movs	r1, #1
 8007a38:	200b      	movs	r0, #11
 8007a3a:	f7ff fb53 	bl	80070e4 <LCD_GotoXY>
	LCD_Print("AT:");
 8007a3e:	481c      	ldr	r0, [pc, #112]	; (8007ab0 <Screen_Accept_Relay+0xc4>)
 8007a40:	f7ff fb7b 	bl	800713a <LCD_Print>
    LCD_GotoXY(4, 2);
 8007a44:	2102      	movs	r1, #2
 8007a46:	2004      	movs	r0, #4
 8007a48:	f7ff fb4c 	bl	80070e4 <LCD_GotoXY>
    sprintf(buffer,"%02d:%02d:%02d", switchtime.Hour, switchtime.Min, switchtime.Sec);
 8007a4c:	7b3b      	ldrb	r3, [r7, #12]
 8007a4e:	461a      	mov	r2, r3
 8007a50:	7b7b      	ldrb	r3, [r7, #13]
 8007a52:	4619      	mov	r1, r3
 8007a54:	7bbb      	ldrb	r3, [r7, #14]
 8007a56:	f107 0014 	add.w	r0, r7, #20
 8007a5a:	9300      	str	r3, [sp, #0]
 8007a5c:	460b      	mov	r3, r1
 8007a5e:	4915      	ldr	r1, [pc, #84]	; (8007ab4 <Screen_Accept_Relay+0xc8>)
 8007a60:	f004 fede 	bl	800c820 <siprintf>
    LCD_Print(buffer);
 8007a64:	f107 0314 	add.w	r3, r7, #20
 8007a68:	4618      	mov	r0, r3
 8007a6a:	f7ff fb66 	bl	800713a <LCD_Print>
    LCD_GotoXY(4, 3);
 8007a6e:	2103      	movs	r1, #3
 8007a70:	2004      	movs	r0, #4
 8007a72:	f7ff fb37 	bl	80070e4 <LCD_GotoXY>
    sprintf(buffer,"%02d/%02d/%d", switchtime.Date, switchtime.Month, switchtime.Year);
 8007a76:	7abb      	ldrb	r3, [r7, #10]
 8007a78:	461a      	mov	r2, r3
 8007a7a:	7a7b      	ldrb	r3, [r7, #9]
 8007a7c:	4619      	mov	r1, r3
 8007a7e:	7a3b      	ldrb	r3, [r7, #8]
 8007a80:	f107 0014 	add.w	r0, r7, #20
 8007a84:	9300      	str	r3, [sp, #0]
 8007a86:	460b      	mov	r3, r1
 8007a88:	490b      	ldr	r1, [pc, #44]	; (8007ab8 <Screen_Accept_Relay+0xcc>)
 8007a8a:	f004 fec9 	bl	800c820 <siprintf>
    LCD_Print(buffer);
 8007a8e:	f107 0314 	add.w	r3, r7, #20
 8007a92:	4618      	mov	r0, r3
 8007a94:	f7ff fb51 	bl	800713a <LCD_Print>
//    LCD_SendData(_LCD_CHAR_LEFT);
//    LCD_GotoXY(4, 3);
//    LCD_Print("FUNCTION");
//    LCD_GotoXY(12,3);
//    LCD_SendData(_LCD_CHAR_RIGHT);
}
 8007a98:	bf00      	nop
 8007a9a:	3728      	adds	r7, #40	; 0x28
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bd80      	pop	{r7, pc}
 8007aa0:	0800f374 	.word	0x0800f374
 8007aa4:	0800f3a0 	.word	0x0800f3a0
 8007aa8:	0800f1c8 	.word	0x0800f1c8
 8007aac:	0800f39c 	.word	0x0800f39c
 8007ab0:	0800f3a8 	.word	0x0800f3a8
 8007ab4:	0800f1f0 	.word	0x0800f1f0
 8007ab8:	0800f1e0 	.word	0x0800f1e0

08007abc <Reset_Handler>:
 8007abc:	f7fe fde0 	bl	8006680 <SystemInit>
 8007ac0:	480b      	ldr	r0, [pc, #44]	; (8007af0 <LoopFillZerobss+0xe>)
 8007ac2:	490c      	ldr	r1, [pc, #48]	; (8007af4 <LoopFillZerobss+0x12>)
 8007ac4:	4a0c      	ldr	r2, [pc, #48]	; (8007af8 <LoopFillZerobss+0x16>)
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	e002      	b.n	8007ad0 <LoopCopyDataInit>

08007aca <CopyDataInit>:
 8007aca:	58d4      	ldr	r4, [r2, r3]
 8007acc:	50c4      	str	r4, [r0, r3]
 8007ace:	3304      	adds	r3, #4

08007ad0 <LoopCopyDataInit>:
 8007ad0:	18c4      	adds	r4, r0, r3
 8007ad2:	428c      	cmp	r4, r1
 8007ad4:	d3f9      	bcc.n	8007aca <CopyDataInit>
 8007ad6:	4a09      	ldr	r2, [pc, #36]	; (8007afc <LoopFillZerobss+0x1a>)
 8007ad8:	4c09      	ldr	r4, [pc, #36]	; (8007b00 <LoopFillZerobss+0x1e>)
 8007ada:	2300      	movs	r3, #0
 8007adc:	e001      	b.n	8007ae2 <LoopFillZerobss>

08007ade <FillZerobss>:
 8007ade:	6013      	str	r3, [r2, #0]
 8007ae0:	3204      	adds	r2, #4

08007ae2 <LoopFillZerobss>:
 8007ae2:	42a2      	cmp	r2, r4
 8007ae4:	d3fb      	bcc.n	8007ade <FillZerobss>
 8007ae6:	f004 f9d3 	bl	800be90 <__libc_init_array>
 8007aea:	f7fe fb01 	bl	80060f0 <main>
 8007aee:	4770      	bx	lr
 8007af0:	20000000 	.word	0x20000000
 8007af4:	200005a8 	.word	0x200005a8
 8007af8:	0800f7e8 	.word	0x0800f7e8
 8007afc:	200005a8 	.word	0x200005a8
 8007b00:	20002c3c 	.word	0x20002c3c

08007b04 <CAN1_RX1_IRQHandler>:
 8007b04:	e7fe      	b.n	8007b04 <CAN1_RX1_IRQHandler>
	...

08007b08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007b0c:	4b08      	ldr	r3, [pc, #32]	; (8007b30 <HAL_Init+0x28>)
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	4a07      	ldr	r2, [pc, #28]	; (8007b30 <HAL_Init+0x28>)
 8007b12:	f043 0310 	orr.w	r3, r3, #16
 8007b16:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007b18:	2003      	movs	r0, #3
 8007b1a:	f000 fd45 	bl	80085a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007b1e:	200f      	movs	r0, #15
 8007b20:	f000 f808 	bl	8007b34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007b24:	f7fe fc22 	bl	800636c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007b28:	2300      	movs	r3, #0
}
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	bd80      	pop	{r7, pc}
 8007b2e:	bf00      	nop
 8007b30:	40022000 	.word	0x40022000

08007b34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b082      	sub	sp, #8
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007b3c:	4b12      	ldr	r3, [pc, #72]	; (8007b88 <HAL_InitTick+0x54>)
 8007b3e:	681a      	ldr	r2, [r3, #0]
 8007b40:	4b12      	ldr	r3, [pc, #72]	; (8007b8c <HAL_InitTick+0x58>)
 8007b42:	781b      	ldrb	r3, [r3, #0]
 8007b44:	4619      	mov	r1, r3
 8007b46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007b4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8007b4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b52:	4618      	mov	r0, r3
 8007b54:	f000 fd5d 	bl	8008612 <HAL_SYSTICK_Config>
 8007b58:	4603      	mov	r3, r0
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d001      	beq.n	8007b62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8007b5e:	2301      	movs	r3, #1
 8007b60:	e00e      	b.n	8007b80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2b0f      	cmp	r3, #15
 8007b66:	d80a      	bhi.n	8007b7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007b68:	2200      	movs	r2, #0
 8007b6a:	6879      	ldr	r1, [r7, #4]
 8007b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8007b70:	f000 fd25 	bl	80085be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007b74:	4a06      	ldr	r2, [pc, #24]	; (8007b90 <HAL_InitTick+0x5c>)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	e000      	b.n	8007b80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8007b7e:	2301      	movs	r3, #1
}
 8007b80:	4618      	mov	r0, r3
 8007b82:	3708      	adds	r7, #8
 8007b84:	46bd      	mov	sp, r7
 8007b86:	bd80      	pop	{r7, pc}
 8007b88:	20000490 	.word	0x20000490
 8007b8c:	200004dc 	.word	0x200004dc
 8007b90:	200004d8 	.word	0x200004d8

08007b94 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007b94:	b480      	push	{r7}
 8007b96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007b98:	4b05      	ldr	r3, [pc, #20]	; (8007bb0 <HAL_IncTick+0x1c>)
 8007b9a:	781b      	ldrb	r3, [r3, #0]
 8007b9c:	461a      	mov	r2, r3
 8007b9e:	4b05      	ldr	r3, [pc, #20]	; (8007bb4 <HAL_IncTick+0x20>)
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	4413      	add	r3, r2
 8007ba4:	4a03      	ldr	r2, [pc, #12]	; (8007bb4 <HAL_IncTick+0x20>)
 8007ba6:	6013      	str	r3, [r2, #0]
}
 8007ba8:	bf00      	nop
 8007baa:	46bd      	mov	sp, r7
 8007bac:	bc80      	pop	{r7}
 8007bae:	4770      	bx	lr
 8007bb0:	200004dc 	.word	0x200004dc
 8007bb4:	20002c00 	.word	0x20002c00

08007bb8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007bb8:	b480      	push	{r7}
 8007bba:	af00      	add	r7, sp, #0
  return uwTick;
 8007bbc:	4b02      	ldr	r3, [pc, #8]	; (8007bc8 <HAL_GetTick+0x10>)
 8007bbe:	681b      	ldr	r3, [r3, #0]
}
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	bc80      	pop	{r7}
 8007bc6:	4770      	bx	lr
 8007bc8:	20002c00 	.word	0x20002c00

08007bcc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b084      	sub	sp, #16
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007bd4:	f7ff fff0 	bl	8007bb8 <HAL_GetTick>
 8007bd8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007be4:	d005      	beq.n	8007bf2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007be6:	4b0a      	ldr	r3, [pc, #40]	; (8007c10 <HAL_Delay+0x44>)
 8007be8:	781b      	ldrb	r3, [r3, #0]
 8007bea:	461a      	mov	r2, r3
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	4413      	add	r3, r2
 8007bf0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007bf2:	bf00      	nop
 8007bf4:	f7ff ffe0 	bl	8007bb8 <HAL_GetTick>
 8007bf8:	4602      	mov	r2, r0
 8007bfa:	68bb      	ldr	r3, [r7, #8]
 8007bfc:	1ad3      	subs	r3, r2, r3
 8007bfe:	68fa      	ldr	r2, [r7, #12]
 8007c00:	429a      	cmp	r2, r3
 8007c02:	d8f7      	bhi.n	8007bf4 <HAL_Delay+0x28>
  {
  }
}
 8007c04:	bf00      	nop
 8007c06:	bf00      	nop
 8007c08:	3710      	adds	r7, #16
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	bd80      	pop	{r7, pc}
 8007c0e:	bf00      	nop
 8007c10:	200004dc 	.word	0x200004dc

08007c14 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b086      	sub	sp, #24
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8007c20:	2300      	movs	r3, #0
 8007c22:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8007c24:	2300      	movs	r3, #0
 8007c26:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8007c28:	2300      	movs	r3, #0
 8007c2a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d101      	bne.n	8007c36 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8007c32:	2301      	movs	r3, #1
 8007c34:	e0be      	b.n	8007db4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	689b      	ldr	r3, [r3, #8]
 8007c3a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d109      	bne.n	8007c58 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2200      	movs	r2, #0
 8007c48:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	f7fd fec8 	bl	80059e8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8007c58:	6878      	ldr	r0, [r7, #4]
 8007c5a:	f000 fb8f 	bl	800837c <ADC_ConversionStop_Disable>
 8007c5e:	4603      	mov	r3, r0
 8007c60:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c66:	f003 0310 	and.w	r3, r3, #16
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	f040 8099 	bne.w	8007da2 <HAL_ADC_Init+0x18e>
 8007c70:	7dfb      	ldrb	r3, [r7, #23]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	f040 8095 	bne.w	8007da2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c7c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8007c80:	f023 0302 	bic.w	r3, r3, #2
 8007c84:	f043 0202 	orr.w	r2, r3, #2
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8007c94:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	7b1b      	ldrb	r3, [r3, #12]
 8007c9a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8007c9c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8007c9e:	68ba      	ldr	r2, [r7, #8]
 8007ca0:	4313      	orrs	r3, r2
 8007ca2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	689b      	ldr	r3, [r3, #8]
 8007ca8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007cac:	d003      	beq.n	8007cb6 <HAL_ADC_Init+0xa2>
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	689b      	ldr	r3, [r3, #8]
 8007cb2:	2b01      	cmp	r3, #1
 8007cb4:	d102      	bne.n	8007cbc <HAL_ADC_Init+0xa8>
 8007cb6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007cba:	e000      	b.n	8007cbe <HAL_ADC_Init+0xaa>
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	693a      	ldr	r2, [r7, #16]
 8007cc0:	4313      	orrs	r3, r2
 8007cc2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	7d1b      	ldrb	r3, [r3, #20]
 8007cc8:	2b01      	cmp	r3, #1
 8007cca:	d119      	bne.n	8007d00 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	7b1b      	ldrb	r3, [r3, #12]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d109      	bne.n	8007ce8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	699b      	ldr	r3, [r3, #24]
 8007cd8:	3b01      	subs	r3, #1
 8007cda:	035a      	lsls	r2, r3, #13
 8007cdc:	693b      	ldr	r3, [r7, #16]
 8007cde:	4313      	orrs	r3, r2
 8007ce0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007ce4:	613b      	str	r3, [r7, #16]
 8007ce6:	e00b      	b.n	8007d00 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cec:	f043 0220 	orr.w	r2, r3, #32
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cf8:	f043 0201 	orr.w	r2, r3, #1
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	685b      	ldr	r3, [r3, #4]
 8007d06:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	693a      	ldr	r2, [r7, #16]
 8007d10:	430a      	orrs	r2, r1
 8007d12:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	689a      	ldr	r2, [r3, #8]
 8007d1a:	4b28      	ldr	r3, [pc, #160]	; (8007dbc <HAL_ADC_Init+0x1a8>)
 8007d1c:	4013      	ands	r3, r2
 8007d1e:	687a      	ldr	r2, [r7, #4]
 8007d20:	6812      	ldr	r2, [r2, #0]
 8007d22:	68b9      	ldr	r1, [r7, #8]
 8007d24:	430b      	orrs	r3, r1
 8007d26:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	689b      	ldr	r3, [r3, #8]
 8007d2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d30:	d003      	beq.n	8007d3a <HAL_ADC_Init+0x126>
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	689b      	ldr	r3, [r3, #8]
 8007d36:	2b01      	cmp	r3, #1
 8007d38:	d104      	bne.n	8007d44 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	691b      	ldr	r3, [r3, #16]
 8007d3e:	3b01      	subs	r3, #1
 8007d40:	051b      	lsls	r3, r3, #20
 8007d42:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d4a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	68fa      	ldr	r2, [r7, #12]
 8007d54:	430a      	orrs	r2, r1
 8007d56:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	689a      	ldr	r2, [r3, #8]
 8007d5e:	4b18      	ldr	r3, [pc, #96]	; (8007dc0 <HAL_ADC_Init+0x1ac>)
 8007d60:	4013      	ands	r3, r2
 8007d62:	68ba      	ldr	r2, [r7, #8]
 8007d64:	429a      	cmp	r2, r3
 8007d66:	d10b      	bne.n	8007d80 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d72:	f023 0303 	bic.w	r3, r3, #3
 8007d76:	f043 0201 	orr.w	r2, r3, #1
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8007d7e:	e018      	b.n	8007db2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d84:	f023 0312 	bic.w	r3, r3, #18
 8007d88:	f043 0210 	orr.w	r2, r3, #16
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d94:	f043 0201 	orr.w	r2, r3, #1
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8007d9c:	2301      	movs	r3, #1
 8007d9e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8007da0:	e007      	b.n	8007db2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007da6:	f043 0210 	orr.w	r2, r3, #16
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8007dae:	2301      	movs	r3, #1
 8007db0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8007db2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007db4:	4618      	mov	r0, r3
 8007db6:	3718      	adds	r7, #24
 8007db8:	46bd      	mov	sp, r7
 8007dba:	bd80      	pop	{r7, pc}
 8007dbc:	ffe1f7fd 	.word	0xffe1f7fd
 8007dc0:	ff1f0efe 	.word	0xff1f0efe

08007dc4 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b084      	sub	sp, #16
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007dcc:	2300      	movs	r3, #0
 8007dce:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007dd6:	2b01      	cmp	r3, #1
 8007dd8:	d101      	bne.n	8007dde <HAL_ADC_Start_IT+0x1a>
 8007dda:	2302      	movs	r3, #2
 8007ddc:	e0a0      	b.n	8007f20 <HAL_ADC_Start_IT+0x15c>
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2201      	movs	r2, #1
 8007de2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8007de6:	6878      	ldr	r0, [r7, #4]
 8007de8:	f000 fa6e 	bl	80082c8 <ADC_Enable>
 8007dec:	4603      	mov	r3, r0
 8007dee:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8007df0:	7bfb      	ldrb	r3, [r7, #15]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	f040 808f 	bne.w	8007f16 <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dfc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007e00:	f023 0301 	bic.w	r3, r3, #1
 8007e04:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	4a45      	ldr	r2, [pc, #276]	; (8007f28 <HAL_ADC_Start_IT+0x164>)
 8007e12:	4293      	cmp	r3, r2
 8007e14:	d105      	bne.n	8007e22 <HAL_ADC_Start_IT+0x5e>
 8007e16:	4b45      	ldr	r3, [pc, #276]	; (8007f2c <HAL_ADC_Start_IT+0x168>)
 8007e18:	685b      	ldr	r3, [r3, #4]
 8007e1a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d115      	bne.n	8007e4e <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e26:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	685b      	ldr	r3, [r3, #4]
 8007e34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d026      	beq.n	8007e8a <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e40:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007e44:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8007e4c:	e01d      	b.n	8007e8a <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e52:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	4a33      	ldr	r2, [pc, #204]	; (8007f2c <HAL_ADC_Start_IT+0x168>)
 8007e60:	4293      	cmp	r3, r2
 8007e62:	d004      	beq.n	8007e6e <HAL_ADC_Start_IT+0xaa>
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	4a2f      	ldr	r2, [pc, #188]	; (8007f28 <HAL_ADC_Start_IT+0x164>)
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	d10d      	bne.n	8007e8a <HAL_ADC_Start_IT+0xc6>
 8007e6e:	4b2f      	ldr	r3, [pc, #188]	; (8007f2c <HAL_ADC_Start_IT+0x168>)
 8007e70:	685b      	ldr	r3, [r3, #4]
 8007e72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d007      	beq.n	8007e8a <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e7e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007e82:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e8e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d006      	beq.n	8007ea4 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e9a:	f023 0206 	bic.w	r2, r3, #6
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	62da      	str	r2, [r3, #44]	; 0x2c
 8007ea2:	e002      	b.n	8007eaa <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2200      	movs	r2, #0
 8007eae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f06f 0202 	mvn.w	r2, #2
 8007eba:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	685a      	ldr	r2, [r3, #4]
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f042 0220 	orr.w	r2, r2, #32
 8007eca:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	689b      	ldr	r3, [r3, #8]
 8007ed2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8007ed6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8007eda:	d113      	bne.n	8007f04 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8007ee0:	4a11      	ldr	r2, [pc, #68]	; (8007f28 <HAL_ADC_Start_IT+0x164>)
 8007ee2:	4293      	cmp	r3, r2
 8007ee4:	d105      	bne.n	8007ef2 <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8007ee6:	4b11      	ldr	r3, [pc, #68]	; (8007f2c <HAL_ADC_Start_IT+0x168>)
 8007ee8:	685b      	ldr	r3, [r3, #4]
 8007eea:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d108      	bne.n	8007f04 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	689a      	ldr	r2, [r3, #8]
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8007f00:	609a      	str	r2, [r3, #8]
 8007f02:	e00c      	b.n	8007f1e <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	689a      	ldr	r2, [r3, #8]
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007f12:	609a      	str	r2, [r3, #8]
 8007f14:	e003      	b.n	8007f1e <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	2200      	movs	r2, #0
 8007f1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8007f1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f20:	4618      	mov	r0, r3
 8007f22:	3710      	adds	r7, #16
 8007f24:	46bd      	mov	sp, r7
 8007f26:	bd80      	pop	{r7, pc}
 8007f28:	40012800 	.word	0x40012800
 8007f2c:	40012400 	.word	0x40012400

08007f30 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8007f30:	b480      	push	{r7}
 8007f32:	b083      	sub	sp, #12
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8007f3e:	4618      	mov	r0, r3
 8007f40:	370c      	adds	r7, #12
 8007f42:	46bd      	mov	sp, r7
 8007f44:	bc80      	pop	{r7}
 8007f46:	4770      	bx	lr

08007f48 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b084      	sub	sp, #16
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	685b      	ldr	r3, [r3, #4]
 8007f5e:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	f003 0320 	and.w	r3, r3, #32
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d03e      	beq.n	8007fe8 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	f003 0302 	and.w	r3, r3, #2
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d039      	beq.n	8007fe8 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f78:	f003 0310 	and.w	r3, r3, #16
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d105      	bne.n	8007f8c <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f84:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	689b      	ldr	r3, [r3, #8]
 8007f92:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8007f96:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8007f9a:	d11d      	bne.n	8007fd8 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d119      	bne.n	8007fd8 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	685a      	ldr	r2, [r3, #4]
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f022 0220 	bic.w	r2, r2, #32
 8007fb2:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fb8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fc4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d105      	bne.n	8007fd8 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fd0:	f043 0201 	orr.w	r2, r3, #1
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8007fd8:	6878      	ldr	r0, [r7, #4]
 8007fda:	f7fe f861 	bl	80060a0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	f06f 0212 	mvn.w	r2, #18
 8007fe6:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8007fe8:	68bb      	ldr	r3, [r7, #8]
 8007fea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d04d      	beq.n	800808e <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	f003 0304 	and.w	r3, r3, #4
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d048      	beq.n	800808e <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008000:	f003 0310 	and.w	r3, r3, #16
 8008004:	2b00      	cmp	r3, #0
 8008006:	d105      	bne.n	8008014 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800800c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	689b      	ldr	r3, [r3, #8]
 800801a:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800801e:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8008022:	d012      	beq.n	800804a <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	685b      	ldr	r3, [r3, #4]
 800802a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800802e:	2b00      	cmp	r3, #0
 8008030:	d125      	bne.n	800807e <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	689b      	ldr	r3, [r3, #8]
 8008038:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 800803c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8008040:	d11d      	bne.n	800807e <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8008046:	2b00      	cmp	r3, #0
 8008048:	d119      	bne.n	800807e <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	685a      	ldr	r2, [r3, #4]
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008058:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800805e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800806a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800806e:	2b00      	cmp	r3, #0
 8008070:	d105      	bne.n	800807e <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008076:	f043 0201 	orr.w	r2, r3, #1
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800807e:	6878      	ldr	r0, [r7, #4]
 8008080:	f000 f9bd 	bl	80083fe <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f06f 020c 	mvn.w	r2, #12
 800808c:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 800808e:	68bb      	ldr	r3, [r7, #8]
 8008090:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008094:	2b00      	cmp	r3, #0
 8008096:	d012      	beq.n	80080be <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	f003 0301 	and.w	r3, r3, #1
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d00d      	beq.n	80080be <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080a6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f000 f809 	bl	80080c6 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	f06f 0201 	mvn.w	r2, #1
 80080bc:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 80080be:	bf00      	nop
 80080c0:	3710      	adds	r7, #16
 80080c2:	46bd      	mov	sp, r7
 80080c4:	bd80      	pop	{r7, pc}

080080c6 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80080c6:	b480      	push	{r7}
 80080c8:	b083      	sub	sp, #12
 80080ca:	af00      	add	r7, sp, #0
 80080cc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80080ce:	bf00      	nop
 80080d0:	370c      	adds	r7, #12
 80080d2:	46bd      	mov	sp, r7
 80080d4:	bc80      	pop	{r7}
 80080d6:	4770      	bx	lr

080080d8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80080d8:	b480      	push	{r7}
 80080da:	b085      	sub	sp, #20
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
 80080e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80080e2:	2300      	movs	r3, #0
 80080e4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80080e6:	2300      	movs	r3, #0
 80080e8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80080f0:	2b01      	cmp	r3, #1
 80080f2:	d101      	bne.n	80080f8 <HAL_ADC_ConfigChannel+0x20>
 80080f4:	2302      	movs	r3, #2
 80080f6:	e0dc      	b.n	80082b2 <HAL_ADC_ConfigChannel+0x1da>
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2201      	movs	r2, #1
 80080fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	685b      	ldr	r3, [r3, #4]
 8008104:	2b06      	cmp	r3, #6
 8008106:	d81c      	bhi.n	8008142 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	685a      	ldr	r2, [r3, #4]
 8008112:	4613      	mov	r3, r2
 8008114:	009b      	lsls	r3, r3, #2
 8008116:	4413      	add	r3, r2
 8008118:	3b05      	subs	r3, #5
 800811a:	221f      	movs	r2, #31
 800811c:	fa02 f303 	lsl.w	r3, r2, r3
 8008120:	43db      	mvns	r3, r3
 8008122:	4019      	ands	r1, r3
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	6818      	ldr	r0, [r3, #0]
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	685a      	ldr	r2, [r3, #4]
 800812c:	4613      	mov	r3, r2
 800812e:	009b      	lsls	r3, r3, #2
 8008130:	4413      	add	r3, r2
 8008132:	3b05      	subs	r3, #5
 8008134:	fa00 f203 	lsl.w	r2, r0, r3
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	430a      	orrs	r2, r1
 800813e:	635a      	str	r2, [r3, #52]	; 0x34
 8008140:	e03c      	b.n	80081bc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	685b      	ldr	r3, [r3, #4]
 8008146:	2b0c      	cmp	r3, #12
 8008148:	d81c      	bhi.n	8008184 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	685a      	ldr	r2, [r3, #4]
 8008154:	4613      	mov	r3, r2
 8008156:	009b      	lsls	r3, r3, #2
 8008158:	4413      	add	r3, r2
 800815a:	3b23      	subs	r3, #35	; 0x23
 800815c:	221f      	movs	r2, #31
 800815e:	fa02 f303 	lsl.w	r3, r2, r3
 8008162:	43db      	mvns	r3, r3
 8008164:	4019      	ands	r1, r3
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	6818      	ldr	r0, [r3, #0]
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	685a      	ldr	r2, [r3, #4]
 800816e:	4613      	mov	r3, r2
 8008170:	009b      	lsls	r3, r3, #2
 8008172:	4413      	add	r3, r2
 8008174:	3b23      	subs	r3, #35	; 0x23
 8008176:	fa00 f203 	lsl.w	r2, r0, r3
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	430a      	orrs	r2, r1
 8008180:	631a      	str	r2, [r3, #48]	; 0x30
 8008182:	e01b      	b.n	80081bc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	685a      	ldr	r2, [r3, #4]
 800818e:	4613      	mov	r3, r2
 8008190:	009b      	lsls	r3, r3, #2
 8008192:	4413      	add	r3, r2
 8008194:	3b41      	subs	r3, #65	; 0x41
 8008196:	221f      	movs	r2, #31
 8008198:	fa02 f303 	lsl.w	r3, r2, r3
 800819c:	43db      	mvns	r3, r3
 800819e:	4019      	ands	r1, r3
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	6818      	ldr	r0, [r3, #0]
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	685a      	ldr	r2, [r3, #4]
 80081a8:	4613      	mov	r3, r2
 80081aa:	009b      	lsls	r3, r3, #2
 80081ac:	4413      	add	r3, r2
 80081ae:	3b41      	subs	r3, #65	; 0x41
 80081b0:	fa00 f203 	lsl.w	r2, r0, r3
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	430a      	orrs	r2, r1
 80081ba:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	2b09      	cmp	r3, #9
 80081c2:	d91c      	bls.n	80081fe <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	68d9      	ldr	r1, [r3, #12]
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	681a      	ldr	r2, [r3, #0]
 80081ce:	4613      	mov	r3, r2
 80081d0:	005b      	lsls	r3, r3, #1
 80081d2:	4413      	add	r3, r2
 80081d4:	3b1e      	subs	r3, #30
 80081d6:	2207      	movs	r2, #7
 80081d8:	fa02 f303 	lsl.w	r3, r2, r3
 80081dc:	43db      	mvns	r3, r3
 80081de:	4019      	ands	r1, r3
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	6898      	ldr	r0, [r3, #8]
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	681a      	ldr	r2, [r3, #0]
 80081e8:	4613      	mov	r3, r2
 80081ea:	005b      	lsls	r3, r3, #1
 80081ec:	4413      	add	r3, r2
 80081ee:	3b1e      	subs	r3, #30
 80081f0:	fa00 f203 	lsl.w	r2, r0, r3
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	430a      	orrs	r2, r1
 80081fa:	60da      	str	r2, [r3, #12]
 80081fc:	e019      	b.n	8008232 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	6919      	ldr	r1, [r3, #16]
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	681a      	ldr	r2, [r3, #0]
 8008208:	4613      	mov	r3, r2
 800820a:	005b      	lsls	r3, r3, #1
 800820c:	4413      	add	r3, r2
 800820e:	2207      	movs	r2, #7
 8008210:	fa02 f303 	lsl.w	r3, r2, r3
 8008214:	43db      	mvns	r3, r3
 8008216:	4019      	ands	r1, r3
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	6898      	ldr	r0, [r3, #8]
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	681a      	ldr	r2, [r3, #0]
 8008220:	4613      	mov	r3, r2
 8008222:	005b      	lsls	r3, r3, #1
 8008224:	4413      	add	r3, r2
 8008226:	fa00 f203 	lsl.w	r2, r0, r3
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	430a      	orrs	r2, r1
 8008230:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	2b10      	cmp	r3, #16
 8008238:	d003      	beq.n	8008242 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800823e:	2b11      	cmp	r3, #17
 8008240:	d132      	bne.n	80082a8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	4a1d      	ldr	r2, [pc, #116]	; (80082bc <HAL_ADC_ConfigChannel+0x1e4>)
 8008248:	4293      	cmp	r3, r2
 800824a:	d125      	bne.n	8008298 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	689b      	ldr	r3, [r3, #8]
 8008252:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008256:	2b00      	cmp	r3, #0
 8008258:	d126      	bne.n	80082a8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	689a      	ldr	r2, [r3, #8]
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8008268:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	2b10      	cmp	r3, #16
 8008270:	d11a      	bne.n	80082a8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8008272:	4b13      	ldr	r3, [pc, #76]	; (80082c0 <HAL_ADC_ConfigChannel+0x1e8>)
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	4a13      	ldr	r2, [pc, #76]	; (80082c4 <HAL_ADC_ConfigChannel+0x1ec>)
 8008278:	fba2 2303 	umull	r2, r3, r2, r3
 800827c:	0c9a      	lsrs	r2, r3, #18
 800827e:	4613      	mov	r3, r2
 8008280:	009b      	lsls	r3, r3, #2
 8008282:	4413      	add	r3, r2
 8008284:	005b      	lsls	r3, r3, #1
 8008286:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8008288:	e002      	b.n	8008290 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800828a:	68bb      	ldr	r3, [r7, #8]
 800828c:	3b01      	subs	r3, #1
 800828e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d1f9      	bne.n	800828a <HAL_ADC_ConfigChannel+0x1b2>
 8008296:	e007      	b.n	80082a8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800829c:	f043 0220 	orr.w	r2, r3, #32
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80082a4:	2301      	movs	r3, #1
 80082a6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2200      	movs	r2, #0
 80082ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80082b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80082b2:	4618      	mov	r0, r3
 80082b4:	3714      	adds	r7, #20
 80082b6:	46bd      	mov	sp, r7
 80082b8:	bc80      	pop	{r7}
 80082ba:	4770      	bx	lr
 80082bc:	40012400 	.word	0x40012400
 80082c0:	20000490 	.word	0x20000490
 80082c4:	431bde83 	.word	0x431bde83

080082c8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b084      	sub	sp, #16
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80082d0:	2300      	movs	r3, #0
 80082d2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80082d4:	2300      	movs	r3, #0
 80082d6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	689b      	ldr	r3, [r3, #8]
 80082de:	f003 0301 	and.w	r3, r3, #1
 80082e2:	2b01      	cmp	r3, #1
 80082e4:	d040      	beq.n	8008368 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	689a      	ldr	r2, [r3, #8]
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f042 0201 	orr.w	r2, r2, #1
 80082f4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80082f6:	4b1f      	ldr	r3, [pc, #124]	; (8008374 <ADC_Enable+0xac>)
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	4a1f      	ldr	r2, [pc, #124]	; (8008378 <ADC_Enable+0xb0>)
 80082fc:	fba2 2303 	umull	r2, r3, r2, r3
 8008300:	0c9b      	lsrs	r3, r3, #18
 8008302:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8008304:	e002      	b.n	800830c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8008306:	68bb      	ldr	r3, [r7, #8]
 8008308:	3b01      	subs	r3, #1
 800830a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800830c:	68bb      	ldr	r3, [r7, #8]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d1f9      	bne.n	8008306 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8008312:	f7ff fc51 	bl	8007bb8 <HAL_GetTick>
 8008316:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8008318:	e01f      	b.n	800835a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800831a:	f7ff fc4d 	bl	8007bb8 <HAL_GetTick>
 800831e:	4602      	mov	r2, r0
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	1ad3      	subs	r3, r2, r3
 8008324:	2b02      	cmp	r3, #2
 8008326:	d918      	bls.n	800835a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	689b      	ldr	r3, [r3, #8]
 800832e:	f003 0301 	and.w	r3, r3, #1
 8008332:	2b01      	cmp	r3, #1
 8008334:	d011      	beq.n	800835a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800833a:	f043 0210 	orr.w	r2, r3, #16
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008346:	f043 0201 	orr.w	r2, r3, #1
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	2200      	movs	r2, #0
 8008352:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8008356:	2301      	movs	r3, #1
 8008358:	e007      	b.n	800836a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	689b      	ldr	r3, [r3, #8]
 8008360:	f003 0301 	and.w	r3, r3, #1
 8008364:	2b01      	cmp	r3, #1
 8008366:	d1d8      	bne.n	800831a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8008368:	2300      	movs	r3, #0
}
 800836a:	4618      	mov	r0, r3
 800836c:	3710      	adds	r7, #16
 800836e:	46bd      	mov	sp, r7
 8008370:	bd80      	pop	{r7, pc}
 8008372:	bf00      	nop
 8008374:	20000490 	.word	0x20000490
 8008378:	431bde83 	.word	0x431bde83

0800837c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b084      	sub	sp, #16
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008384:	2300      	movs	r3, #0
 8008386:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	689b      	ldr	r3, [r3, #8]
 800838e:	f003 0301 	and.w	r3, r3, #1
 8008392:	2b01      	cmp	r3, #1
 8008394:	d12e      	bne.n	80083f4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	689a      	ldr	r2, [r3, #8]
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f022 0201 	bic.w	r2, r2, #1
 80083a4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80083a6:	f7ff fc07 	bl	8007bb8 <HAL_GetTick>
 80083aa:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80083ac:	e01b      	b.n	80083e6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80083ae:	f7ff fc03 	bl	8007bb8 <HAL_GetTick>
 80083b2:	4602      	mov	r2, r0
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	1ad3      	subs	r3, r2, r3
 80083b8:	2b02      	cmp	r3, #2
 80083ba:	d914      	bls.n	80083e6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	689b      	ldr	r3, [r3, #8]
 80083c2:	f003 0301 	and.w	r3, r3, #1
 80083c6:	2b01      	cmp	r3, #1
 80083c8:	d10d      	bne.n	80083e6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083ce:	f043 0210 	orr.w	r2, r3, #16
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083da:	f043 0201 	orr.w	r2, r3, #1
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80083e2:	2301      	movs	r3, #1
 80083e4:	e007      	b.n	80083f6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	689b      	ldr	r3, [r3, #8]
 80083ec:	f003 0301 	and.w	r3, r3, #1
 80083f0:	2b01      	cmp	r3, #1
 80083f2:	d0dc      	beq.n	80083ae <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80083f4:	2300      	movs	r3, #0
}
 80083f6:	4618      	mov	r0, r3
 80083f8:	3710      	adds	r7, #16
 80083fa:	46bd      	mov	sp, r7
 80083fc:	bd80      	pop	{r7, pc}

080083fe <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80083fe:	b480      	push	{r7}
 8008400:	b083      	sub	sp, #12
 8008402:	af00      	add	r7, sp, #0
 8008404:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8008406:	bf00      	nop
 8008408:	370c      	adds	r7, #12
 800840a:	46bd      	mov	sp, r7
 800840c:	bc80      	pop	{r7}
 800840e:	4770      	bx	lr

08008410 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008410:	b480      	push	{r7}
 8008412:	b085      	sub	sp, #20
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	f003 0307 	and.w	r3, r3, #7
 800841e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008420:	4b0c      	ldr	r3, [pc, #48]	; (8008454 <__NVIC_SetPriorityGrouping+0x44>)
 8008422:	68db      	ldr	r3, [r3, #12]
 8008424:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008426:	68ba      	ldr	r2, [r7, #8]
 8008428:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800842c:	4013      	ands	r3, r2
 800842e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008434:	68bb      	ldr	r3, [r7, #8]
 8008436:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008438:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800843c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008440:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008442:	4a04      	ldr	r2, [pc, #16]	; (8008454 <__NVIC_SetPriorityGrouping+0x44>)
 8008444:	68bb      	ldr	r3, [r7, #8]
 8008446:	60d3      	str	r3, [r2, #12]
}
 8008448:	bf00      	nop
 800844a:	3714      	adds	r7, #20
 800844c:	46bd      	mov	sp, r7
 800844e:	bc80      	pop	{r7}
 8008450:	4770      	bx	lr
 8008452:	bf00      	nop
 8008454:	e000ed00 	.word	0xe000ed00

08008458 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008458:	b480      	push	{r7}
 800845a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800845c:	4b04      	ldr	r3, [pc, #16]	; (8008470 <__NVIC_GetPriorityGrouping+0x18>)
 800845e:	68db      	ldr	r3, [r3, #12]
 8008460:	0a1b      	lsrs	r3, r3, #8
 8008462:	f003 0307 	and.w	r3, r3, #7
}
 8008466:	4618      	mov	r0, r3
 8008468:	46bd      	mov	sp, r7
 800846a:	bc80      	pop	{r7}
 800846c:	4770      	bx	lr
 800846e:	bf00      	nop
 8008470:	e000ed00 	.word	0xe000ed00

08008474 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008474:	b480      	push	{r7}
 8008476:	b083      	sub	sp, #12
 8008478:	af00      	add	r7, sp, #0
 800847a:	4603      	mov	r3, r0
 800847c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800847e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008482:	2b00      	cmp	r3, #0
 8008484:	db0b      	blt.n	800849e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008486:	79fb      	ldrb	r3, [r7, #7]
 8008488:	f003 021f 	and.w	r2, r3, #31
 800848c:	4906      	ldr	r1, [pc, #24]	; (80084a8 <__NVIC_EnableIRQ+0x34>)
 800848e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008492:	095b      	lsrs	r3, r3, #5
 8008494:	2001      	movs	r0, #1
 8008496:	fa00 f202 	lsl.w	r2, r0, r2
 800849a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800849e:	bf00      	nop
 80084a0:	370c      	adds	r7, #12
 80084a2:	46bd      	mov	sp, r7
 80084a4:	bc80      	pop	{r7}
 80084a6:	4770      	bx	lr
 80084a8:	e000e100 	.word	0xe000e100

080084ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80084ac:	b480      	push	{r7}
 80084ae:	b083      	sub	sp, #12
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	4603      	mov	r3, r0
 80084b4:	6039      	str	r1, [r7, #0]
 80084b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80084b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	db0a      	blt.n	80084d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	b2da      	uxtb	r2, r3
 80084c4:	490c      	ldr	r1, [pc, #48]	; (80084f8 <__NVIC_SetPriority+0x4c>)
 80084c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80084ca:	0112      	lsls	r2, r2, #4
 80084cc:	b2d2      	uxtb	r2, r2
 80084ce:	440b      	add	r3, r1
 80084d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80084d4:	e00a      	b.n	80084ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	b2da      	uxtb	r2, r3
 80084da:	4908      	ldr	r1, [pc, #32]	; (80084fc <__NVIC_SetPriority+0x50>)
 80084dc:	79fb      	ldrb	r3, [r7, #7]
 80084de:	f003 030f 	and.w	r3, r3, #15
 80084e2:	3b04      	subs	r3, #4
 80084e4:	0112      	lsls	r2, r2, #4
 80084e6:	b2d2      	uxtb	r2, r2
 80084e8:	440b      	add	r3, r1
 80084ea:	761a      	strb	r2, [r3, #24]
}
 80084ec:	bf00      	nop
 80084ee:	370c      	adds	r7, #12
 80084f0:	46bd      	mov	sp, r7
 80084f2:	bc80      	pop	{r7}
 80084f4:	4770      	bx	lr
 80084f6:	bf00      	nop
 80084f8:	e000e100 	.word	0xe000e100
 80084fc:	e000ed00 	.word	0xe000ed00

08008500 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008500:	b480      	push	{r7}
 8008502:	b089      	sub	sp, #36	; 0x24
 8008504:	af00      	add	r7, sp, #0
 8008506:	60f8      	str	r0, [r7, #12]
 8008508:	60b9      	str	r1, [r7, #8]
 800850a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	f003 0307 	and.w	r3, r3, #7
 8008512:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008514:	69fb      	ldr	r3, [r7, #28]
 8008516:	f1c3 0307 	rsb	r3, r3, #7
 800851a:	2b04      	cmp	r3, #4
 800851c:	bf28      	it	cs
 800851e:	2304      	movcs	r3, #4
 8008520:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008522:	69fb      	ldr	r3, [r7, #28]
 8008524:	3304      	adds	r3, #4
 8008526:	2b06      	cmp	r3, #6
 8008528:	d902      	bls.n	8008530 <NVIC_EncodePriority+0x30>
 800852a:	69fb      	ldr	r3, [r7, #28]
 800852c:	3b03      	subs	r3, #3
 800852e:	e000      	b.n	8008532 <NVIC_EncodePriority+0x32>
 8008530:	2300      	movs	r3, #0
 8008532:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008534:	f04f 32ff 	mov.w	r2, #4294967295
 8008538:	69bb      	ldr	r3, [r7, #24]
 800853a:	fa02 f303 	lsl.w	r3, r2, r3
 800853e:	43da      	mvns	r2, r3
 8008540:	68bb      	ldr	r3, [r7, #8]
 8008542:	401a      	ands	r2, r3
 8008544:	697b      	ldr	r3, [r7, #20]
 8008546:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008548:	f04f 31ff 	mov.w	r1, #4294967295
 800854c:	697b      	ldr	r3, [r7, #20]
 800854e:	fa01 f303 	lsl.w	r3, r1, r3
 8008552:	43d9      	mvns	r1, r3
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008558:	4313      	orrs	r3, r2
         );
}
 800855a:	4618      	mov	r0, r3
 800855c:	3724      	adds	r7, #36	; 0x24
 800855e:	46bd      	mov	sp, r7
 8008560:	bc80      	pop	{r7}
 8008562:	4770      	bx	lr

08008564 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b082      	sub	sp, #8
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	3b01      	subs	r3, #1
 8008570:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008574:	d301      	bcc.n	800857a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008576:	2301      	movs	r3, #1
 8008578:	e00f      	b.n	800859a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800857a:	4a0a      	ldr	r2, [pc, #40]	; (80085a4 <SysTick_Config+0x40>)
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	3b01      	subs	r3, #1
 8008580:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008582:	210f      	movs	r1, #15
 8008584:	f04f 30ff 	mov.w	r0, #4294967295
 8008588:	f7ff ff90 	bl	80084ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800858c:	4b05      	ldr	r3, [pc, #20]	; (80085a4 <SysTick_Config+0x40>)
 800858e:	2200      	movs	r2, #0
 8008590:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008592:	4b04      	ldr	r3, [pc, #16]	; (80085a4 <SysTick_Config+0x40>)
 8008594:	2207      	movs	r2, #7
 8008596:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008598:	2300      	movs	r3, #0
}
 800859a:	4618      	mov	r0, r3
 800859c:	3708      	adds	r7, #8
 800859e:	46bd      	mov	sp, r7
 80085a0:	bd80      	pop	{r7, pc}
 80085a2:	bf00      	nop
 80085a4:	e000e010 	.word	0xe000e010

080085a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b082      	sub	sp, #8
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80085b0:	6878      	ldr	r0, [r7, #4]
 80085b2:	f7ff ff2d 	bl	8008410 <__NVIC_SetPriorityGrouping>
}
 80085b6:	bf00      	nop
 80085b8:	3708      	adds	r7, #8
 80085ba:	46bd      	mov	sp, r7
 80085bc:	bd80      	pop	{r7, pc}

080085be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80085be:	b580      	push	{r7, lr}
 80085c0:	b086      	sub	sp, #24
 80085c2:	af00      	add	r7, sp, #0
 80085c4:	4603      	mov	r3, r0
 80085c6:	60b9      	str	r1, [r7, #8]
 80085c8:	607a      	str	r2, [r7, #4]
 80085ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80085cc:	2300      	movs	r3, #0
 80085ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80085d0:	f7ff ff42 	bl	8008458 <__NVIC_GetPriorityGrouping>
 80085d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80085d6:	687a      	ldr	r2, [r7, #4]
 80085d8:	68b9      	ldr	r1, [r7, #8]
 80085da:	6978      	ldr	r0, [r7, #20]
 80085dc:	f7ff ff90 	bl	8008500 <NVIC_EncodePriority>
 80085e0:	4602      	mov	r2, r0
 80085e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80085e6:	4611      	mov	r1, r2
 80085e8:	4618      	mov	r0, r3
 80085ea:	f7ff ff5f 	bl	80084ac <__NVIC_SetPriority>
}
 80085ee:	bf00      	nop
 80085f0:	3718      	adds	r7, #24
 80085f2:	46bd      	mov	sp, r7
 80085f4:	bd80      	pop	{r7, pc}

080085f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80085f6:	b580      	push	{r7, lr}
 80085f8:	b082      	sub	sp, #8
 80085fa:	af00      	add	r7, sp, #0
 80085fc:	4603      	mov	r3, r0
 80085fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008600:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008604:	4618      	mov	r0, r3
 8008606:	f7ff ff35 	bl	8008474 <__NVIC_EnableIRQ>
}
 800860a:	bf00      	nop
 800860c:	3708      	adds	r7, #8
 800860e:	46bd      	mov	sp, r7
 8008610:	bd80      	pop	{r7, pc}

08008612 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008612:	b580      	push	{r7, lr}
 8008614:	b082      	sub	sp, #8
 8008616:	af00      	add	r7, sp, #0
 8008618:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800861a:	6878      	ldr	r0, [r7, #4]
 800861c:	f7ff ffa2 	bl	8008564 <SysTick_Config>
 8008620:	4603      	mov	r3, r0
}
 8008622:	4618      	mov	r0, r3
 8008624:	3708      	adds	r7, #8
 8008626:	46bd      	mov	sp, r7
 8008628:	bd80      	pop	{r7, pc}
	...

0800862c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800862c:	b480      	push	{r7}
 800862e:	b085      	sub	sp, #20
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8008634:	2300      	movs	r3, #0
 8008636:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d101      	bne.n	8008642 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800863e:	2301      	movs	r3, #1
 8008640:	e043      	b.n	80086ca <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	461a      	mov	r2, r3
 8008648:	4b22      	ldr	r3, [pc, #136]	; (80086d4 <HAL_DMA_Init+0xa8>)
 800864a:	4413      	add	r3, r2
 800864c:	4a22      	ldr	r2, [pc, #136]	; (80086d8 <HAL_DMA_Init+0xac>)
 800864e:	fba2 2303 	umull	r2, r3, r2, r3
 8008652:	091b      	lsrs	r3, r3, #4
 8008654:	009a      	lsls	r2, r3, #2
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	4a1f      	ldr	r2, [pc, #124]	; (80086dc <HAL_DMA_Init+0xb0>)
 800865e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2202      	movs	r2, #2
 8008664:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8008676:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800867a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8008684:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	68db      	ldr	r3, [r3, #12]
 800868a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008690:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	695b      	ldr	r3, [r3, #20]
 8008696:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800869c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	69db      	ldr	r3, [r3, #28]
 80086a2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80086a4:	68fa      	ldr	r2, [r7, #12]
 80086a6:	4313      	orrs	r3, r2
 80086a8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	68fa      	ldr	r2, [r7, #12]
 80086b0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	2200      	movs	r2, #0
 80086b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2201      	movs	r2, #1
 80086bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2200      	movs	r2, #0
 80086c4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80086c8:	2300      	movs	r3, #0
}
 80086ca:	4618      	mov	r0, r3
 80086cc:	3714      	adds	r7, #20
 80086ce:	46bd      	mov	sp, r7
 80086d0:	bc80      	pop	{r7}
 80086d2:	4770      	bx	lr
 80086d4:	bffdfff8 	.word	0xbffdfff8
 80086d8:	cccccccd 	.word	0xcccccccd
 80086dc:	40020000 	.word	0x40020000

080086e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b086      	sub	sp, #24
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	60f8      	str	r0, [r7, #12]
 80086e8:	60b9      	str	r1, [r7, #8]
 80086ea:	607a      	str	r2, [r7, #4]
 80086ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80086ee:	2300      	movs	r3, #0
 80086f0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80086f8:	2b01      	cmp	r3, #1
 80086fa:	d101      	bne.n	8008700 <HAL_DMA_Start_IT+0x20>
 80086fc:	2302      	movs	r3, #2
 80086fe:	e04b      	b.n	8008798 <HAL_DMA_Start_IT+0xb8>
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	2201      	movs	r2, #1
 8008704:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800870e:	b2db      	uxtb	r3, r3
 8008710:	2b01      	cmp	r3, #1
 8008712:	d13a      	bne.n	800878a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	2202      	movs	r2, #2
 8008718:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	2200      	movs	r2, #0
 8008720:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	681a      	ldr	r2, [r3, #0]
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	f022 0201 	bic.w	r2, r2, #1
 8008730:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	687a      	ldr	r2, [r7, #4]
 8008736:	68b9      	ldr	r1, [r7, #8]
 8008738:	68f8      	ldr	r0, [r7, #12]
 800873a:	f000 f9eb 	bl	8008b14 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008742:	2b00      	cmp	r3, #0
 8008744:	d008      	beq.n	8008758 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	681a      	ldr	r2, [r3, #0]
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	f042 020e 	orr.w	r2, r2, #14
 8008754:	601a      	str	r2, [r3, #0]
 8008756:	e00f      	b.n	8008778 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	681a      	ldr	r2, [r3, #0]
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	f022 0204 	bic.w	r2, r2, #4
 8008766:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	681a      	ldr	r2, [r3, #0]
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	f042 020a 	orr.w	r2, r2, #10
 8008776:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	681a      	ldr	r2, [r3, #0]
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	f042 0201 	orr.w	r2, r2, #1
 8008786:	601a      	str	r2, [r3, #0]
 8008788:	e005      	b.n	8008796 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	2200      	movs	r2, #0
 800878e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8008792:	2302      	movs	r3, #2
 8008794:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8008796:	7dfb      	ldrb	r3, [r7, #23]
}
 8008798:	4618      	mov	r0, r3
 800879a:	3718      	adds	r7, #24
 800879c:	46bd      	mov	sp, r7
 800879e:	bd80      	pop	{r7, pc}

080087a0 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80087a0:	b480      	push	{r7}
 80087a2:	b085      	sub	sp, #20
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80087a8:	2300      	movs	r3, #0
 80087aa:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80087b2:	b2db      	uxtb	r3, r3
 80087b4:	2b02      	cmp	r3, #2
 80087b6:	d008      	beq.n	80087ca <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2204      	movs	r2, #4
 80087bc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	2200      	movs	r2, #0
 80087c2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80087c6:	2301      	movs	r3, #1
 80087c8:	e020      	b.n	800880c <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	681a      	ldr	r2, [r3, #0]
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	f022 020e 	bic.w	r2, r2, #14
 80087d8:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	681a      	ldr	r2, [r3, #0]
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	f022 0201 	bic.w	r2, r2, #1
 80087e8:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087f2:	2101      	movs	r1, #1
 80087f4:	fa01 f202 	lsl.w	r2, r1, r2
 80087f8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2201      	movs	r2, #1
 80087fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	2200      	movs	r2, #0
 8008806:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800880a:	7bfb      	ldrb	r3, [r7, #15]
}
 800880c:	4618      	mov	r0, r3
 800880e:	3714      	adds	r7, #20
 8008810:	46bd      	mov	sp, r7
 8008812:	bc80      	pop	{r7}
 8008814:	4770      	bx	lr
	...

08008818 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8008818:	b580      	push	{r7, lr}
 800881a:	b084      	sub	sp, #16
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008820:	2300      	movs	r3, #0
 8008822:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800882a:	b2db      	uxtb	r3, r3
 800882c:	2b02      	cmp	r3, #2
 800882e:	d005      	beq.n	800883c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2204      	movs	r2, #4
 8008834:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8008836:	2301      	movs	r3, #1
 8008838:	73fb      	strb	r3, [r7, #15]
 800883a:	e051      	b.n	80088e0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	681a      	ldr	r2, [r3, #0]
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f022 020e 	bic.w	r2, r2, #14
 800884a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	681a      	ldr	r2, [r3, #0]
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	f022 0201 	bic.w	r2, r2, #1
 800885a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	4a22      	ldr	r2, [pc, #136]	; (80088ec <HAL_DMA_Abort_IT+0xd4>)
 8008862:	4293      	cmp	r3, r2
 8008864:	d029      	beq.n	80088ba <HAL_DMA_Abort_IT+0xa2>
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	4a21      	ldr	r2, [pc, #132]	; (80088f0 <HAL_DMA_Abort_IT+0xd8>)
 800886c:	4293      	cmp	r3, r2
 800886e:	d022      	beq.n	80088b6 <HAL_DMA_Abort_IT+0x9e>
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	4a1f      	ldr	r2, [pc, #124]	; (80088f4 <HAL_DMA_Abort_IT+0xdc>)
 8008876:	4293      	cmp	r3, r2
 8008878:	d01a      	beq.n	80088b0 <HAL_DMA_Abort_IT+0x98>
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	4a1e      	ldr	r2, [pc, #120]	; (80088f8 <HAL_DMA_Abort_IT+0xe0>)
 8008880:	4293      	cmp	r3, r2
 8008882:	d012      	beq.n	80088aa <HAL_DMA_Abort_IT+0x92>
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	4a1c      	ldr	r2, [pc, #112]	; (80088fc <HAL_DMA_Abort_IT+0xe4>)
 800888a:	4293      	cmp	r3, r2
 800888c:	d00a      	beq.n	80088a4 <HAL_DMA_Abort_IT+0x8c>
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	4a1b      	ldr	r2, [pc, #108]	; (8008900 <HAL_DMA_Abort_IT+0xe8>)
 8008894:	4293      	cmp	r3, r2
 8008896:	d102      	bne.n	800889e <HAL_DMA_Abort_IT+0x86>
 8008898:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800889c:	e00e      	b.n	80088bc <HAL_DMA_Abort_IT+0xa4>
 800889e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80088a2:	e00b      	b.n	80088bc <HAL_DMA_Abort_IT+0xa4>
 80088a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80088a8:	e008      	b.n	80088bc <HAL_DMA_Abort_IT+0xa4>
 80088aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80088ae:	e005      	b.n	80088bc <HAL_DMA_Abort_IT+0xa4>
 80088b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80088b4:	e002      	b.n	80088bc <HAL_DMA_Abort_IT+0xa4>
 80088b6:	2310      	movs	r3, #16
 80088b8:	e000      	b.n	80088bc <HAL_DMA_Abort_IT+0xa4>
 80088ba:	2301      	movs	r3, #1
 80088bc:	4a11      	ldr	r2, [pc, #68]	; (8008904 <HAL_DMA_Abort_IT+0xec>)
 80088be:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2201      	movs	r2, #1
 80088c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2200      	movs	r2, #0
 80088cc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d003      	beq.n	80088e0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088dc:	6878      	ldr	r0, [r7, #4]
 80088de:	4798      	blx	r3
    } 
  }
  return status;
 80088e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80088e2:	4618      	mov	r0, r3
 80088e4:	3710      	adds	r7, #16
 80088e6:	46bd      	mov	sp, r7
 80088e8:	bd80      	pop	{r7, pc}
 80088ea:	bf00      	nop
 80088ec:	40020008 	.word	0x40020008
 80088f0:	4002001c 	.word	0x4002001c
 80088f4:	40020030 	.word	0x40020030
 80088f8:	40020044 	.word	0x40020044
 80088fc:	40020058 	.word	0x40020058
 8008900:	4002006c 	.word	0x4002006c
 8008904:	40020000 	.word	0x40020000

08008908 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b084      	sub	sp, #16
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008924:	2204      	movs	r2, #4
 8008926:	409a      	lsls	r2, r3
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	4013      	ands	r3, r2
 800892c:	2b00      	cmp	r3, #0
 800892e:	d04f      	beq.n	80089d0 <HAL_DMA_IRQHandler+0xc8>
 8008930:	68bb      	ldr	r3, [r7, #8]
 8008932:	f003 0304 	and.w	r3, r3, #4
 8008936:	2b00      	cmp	r3, #0
 8008938:	d04a      	beq.n	80089d0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	f003 0320 	and.w	r3, r3, #32
 8008944:	2b00      	cmp	r3, #0
 8008946:	d107      	bne.n	8008958 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	681a      	ldr	r2, [r3, #0]
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	f022 0204 	bic.w	r2, r2, #4
 8008956:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	4a66      	ldr	r2, [pc, #408]	; (8008af8 <HAL_DMA_IRQHandler+0x1f0>)
 800895e:	4293      	cmp	r3, r2
 8008960:	d029      	beq.n	80089b6 <HAL_DMA_IRQHandler+0xae>
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	4a65      	ldr	r2, [pc, #404]	; (8008afc <HAL_DMA_IRQHandler+0x1f4>)
 8008968:	4293      	cmp	r3, r2
 800896a:	d022      	beq.n	80089b2 <HAL_DMA_IRQHandler+0xaa>
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	4a63      	ldr	r2, [pc, #396]	; (8008b00 <HAL_DMA_IRQHandler+0x1f8>)
 8008972:	4293      	cmp	r3, r2
 8008974:	d01a      	beq.n	80089ac <HAL_DMA_IRQHandler+0xa4>
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	4a62      	ldr	r2, [pc, #392]	; (8008b04 <HAL_DMA_IRQHandler+0x1fc>)
 800897c:	4293      	cmp	r3, r2
 800897e:	d012      	beq.n	80089a6 <HAL_DMA_IRQHandler+0x9e>
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	4a60      	ldr	r2, [pc, #384]	; (8008b08 <HAL_DMA_IRQHandler+0x200>)
 8008986:	4293      	cmp	r3, r2
 8008988:	d00a      	beq.n	80089a0 <HAL_DMA_IRQHandler+0x98>
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	4a5f      	ldr	r2, [pc, #380]	; (8008b0c <HAL_DMA_IRQHandler+0x204>)
 8008990:	4293      	cmp	r3, r2
 8008992:	d102      	bne.n	800899a <HAL_DMA_IRQHandler+0x92>
 8008994:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008998:	e00e      	b.n	80089b8 <HAL_DMA_IRQHandler+0xb0>
 800899a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800899e:	e00b      	b.n	80089b8 <HAL_DMA_IRQHandler+0xb0>
 80089a0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80089a4:	e008      	b.n	80089b8 <HAL_DMA_IRQHandler+0xb0>
 80089a6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80089aa:	e005      	b.n	80089b8 <HAL_DMA_IRQHandler+0xb0>
 80089ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80089b0:	e002      	b.n	80089b8 <HAL_DMA_IRQHandler+0xb0>
 80089b2:	2340      	movs	r3, #64	; 0x40
 80089b4:	e000      	b.n	80089b8 <HAL_DMA_IRQHandler+0xb0>
 80089b6:	2304      	movs	r3, #4
 80089b8:	4a55      	ldr	r2, [pc, #340]	; (8008b10 <HAL_DMA_IRQHandler+0x208>)
 80089ba:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	f000 8094 	beq.w	8008aee <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80089ce:	e08e      	b.n	8008aee <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089d4:	2202      	movs	r2, #2
 80089d6:	409a      	lsls	r2, r3
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	4013      	ands	r3, r2
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d056      	beq.n	8008a8e <HAL_DMA_IRQHandler+0x186>
 80089e0:	68bb      	ldr	r3, [r7, #8]
 80089e2:	f003 0302 	and.w	r3, r3, #2
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d051      	beq.n	8008a8e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	f003 0320 	and.w	r3, r3, #32
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d10b      	bne.n	8008a10 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	681a      	ldr	r2, [r3, #0]
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	f022 020a 	bic.w	r2, r2, #10
 8008a06:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	2201      	movs	r2, #1
 8008a0c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	4a38      	ldr	r2, [pc, #224]	; (8008af8 <HAL_DMA_IRQHandler+0x1f0>)
 8008a16:	4293      	cmp	r3, r2
 8008a18:	d029      	beq.n	8008a6e <HAL_DMA_IRQHandler+0x166>
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	4a37      	ldr	r2, [pc, #220]	; (8008afc <HAL_DMA_IRQHandler+0x1f4>)
 8008a20:	4293      	cmp	r3, r2
 8008a22:	d022      	beq.n	8008a6a <HAL_DMA_IRQHandler+0x162>
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	4a35      	ldr	r2, [pc, #212]	; (8008b00 <HAL_DMA_IRQHandler+0x1f8>)
 8008a2a:	4293      	cmp	r3, r2
 8008a2c:	d01a      	beq.n	8008a64 <HAL_DMA_IRQHandler+0x15c>
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	4a34      	ldr	r2, [pc, #208]	; (8008b04 <HAL_DMA_IRQHandler+0x1fc>)
 8008a34:	4293      	cmp	r3, r2
 8008a36:	d012      	beq.n	8008a5e <HAL_DMA_IRQHandler+0x156>
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	4a32      	ldr	r2, [pc, #200]	; (8008b08 <HAL_DMA_IRQHandler+0x200>)
 8008a3e:	4293      	cmp	r3, r2
 8008a40:	d00a      	beq.n	8008a58 <HAL_DMA_IRQHandler+0x150>
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	4a31      	ldr	r2, [pc, #196]	; (8008b0c <HAL_DMA_IRQHandler+0x204>)
 8008a48:	4293      	cmp	r3, r2
 8008a4a:	d102      	bne.n	8008a52 <HAL_DMA_IRQHandler+0x14a>
 8008a4c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008a50:	e00e      	b.n	8008a70 <HAL_DMA_IRQHandler+0x168>
 8008a52:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008a56:	e00b      	b.n	8008a70 <HAL_DMA_IRQHandler+0x168>
 8008a58:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008a5c:	e008      	b.n	8008a70 <HAL_DMA_IRQHandler+0x168>
 8008a5e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008a62:	e005      	b.n	8008a70 <HAL_DMA_IRQHandler+0x168>
 8008a64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008a68:	e002      	b.n	8008a70 <HAL_DMA_IRQHandler+0x168>
 8008a6a:	2320      	movs	r3, #32
 8008a6c:	e000      	b.n	8008a70 <HAL_DMA_IRQHandler+0x168>
 8008a6e:	2302      	movs	r3, #2
 8008a70:	4a27      	ldr	r2, [pc, #156]	; (8008b10 <HAL_DMA_IRQHandler+0x208>)
 8008a72:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	2200      	movs	r2, #0
 8008a78:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d034      	beq.n	8008aee <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a88:	6878      	ldr	r0, [r7, #4]
 8008a8a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8008a8c:	e02f      	b.n	8008aee <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a92:	2208      	movs	r2, #8
 8008a94:	409a      	lsls	r2, r3
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	4013      	ands	r3, r2
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d028      	beq.n	8008af0 <HAL_DMA_IRQHandler+0x1e8>
 8008a9e:	68bb      	ldr	r3, [r7, #8]
 8008aa0:	f003 0308 	and.w	r3, r3, #8
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d023      	beq.n	8008af0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	681a      	ldr	r2, [r3, #0]
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	f022 020e 	bic.w	r2, r2, #14
 8008ab6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ac0:	2101      	movs	r1, #1
 8008ac2:	fa01 f202 	lsl.w	r2, r1, r2
 8008ac6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	2201      	movs	r2, #1
 8008acc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2201      	movs	r2, #1
 8008ad2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	2200      	movs	r2, #0
 8008ada:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d004      	beq.n	8008af0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008aea:	6878      	ldr	r0, [r7, #4]
 8008aec:	4798      	blx	r3
    }
  }
  return;
 8008aee:	bf00      	nop
 8008af0:	bf00      	nop
}
 8008af2:	3710      	adds	r7, #16
 8008af4:	46bd      	mov	sp, r7
 8008af6:	bd80      	pop	{r7, pc}
 8008af8:	40020008 	.word	0x40020008
 8008afc:	4002001c 	.word	0x4002001c
 8008b00:	40020030 	.word	0x40020030
 8008b04:	40020044 	.word	0x40020044
 8008b08:	40020058 	.word	0x40020058
 8008b0c:	4002006c 	.word	0x4002006c
 8008b10:	40020000 	.word	0x40020000

08008b14 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008b14:	b480      	push	{r7}
 8008b16:	b085      	sub	sp, #20
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	60f8      	str	r0, [r7, #12]
 8008b1c:	60b9      	str	r1, [r7, #8]
 8008b1e:	607a      	str	r2, [r7, #4]
 8008b20:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b2a:	2101      	movs	r1, #1
 8008b2c:	fa01 f202 	lsl.w	r2, r1, r2
 8008b30:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	683a      	ldr	r2, [r7, #0]
 8008b38:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	685b      	ldr	r3, [r3, #4]
 8008b3e:	2b10      	cmp	r3, #16
 8008b40:	d108      	bne.n	8008b54 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	687a      	ldr	r2, [r7, #4]
 8008b48:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	68ba      	ldr	r2, [r7, #8]
 8008b50:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8008b52:	e007      	b.n	8008b64 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	68ba      	ldr	r2, [r7, #8]
 8008b5a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	687a      	ldr	r2, [r7, #4]
 8008b62:	60da      	str	r2, [r3, #12]
}
 8008b64:	bf00      	nop
 8008b66:	3714      	adds	r7, #20
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	bc80      	pop	{r7}
 8008b6c:	4770      	bx	lr
	...

08008b70 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008b70:	b480      	push	{r7}
 8008b72:	b08b      	sub	sp, #44	; 0x2c
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
 8008b78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8008b7e:	2300      	movs	r3, #0
 8008b80:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008b82:	e169      	b.n	8008e58 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8008b84:	2201      	movs	r2, #1
 8008b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b88:	fa02 f303 	lsl.w	r3, r2, r3
 8008b8c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	69fa      	ldr	r2, [r7, #28]
 8008b94:	4013      	ands	r3, r2
 8008b96:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8008b98:	69ba      	ldr	r2, [r7, #24]
 8008b9a:	69fb      	ldr	r3, [r7, #28]
 8008b9c:	429a      	cmp	r2, r3
 8008b9e:	f040 8158 	bne.w	8008e52 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8008ba2:	683b      	ldr	r3, [r7, #0]
 8008ba4:	685b      	ldr	r3, [r3, #4]
 8008ba6:	4a9a      	ldr	r2, [pc, #616]	; (8008e10 <HAL_GPIO_Init+0x2a0>)
 8008ba8:	4293      	cmp	r3, r2
 8008baa:	d05e      	beq.n	8008c6a <HAL_GPIO_Init+0xfa>
 8008bac:	4a98      	ldr	r2, [pc, #608]	; (8008e10 <HAL_GPIO_Init+0x2a0>)
 8008bae:	4293      	cmp	r3, r2
 8008bb0:	d875      	bhi.n	8008c9e <HAL_GPIO_Init+0x12e>
 8008bb2:	4a98      	ldr	r2, [pc, #608]	; (8008e14 <HAL_GPIO_Init+0x2a4>)
 8008bb4:	4293      	cmp	r3, r2
 8008bb6:	d058      	beq.n	8008c6a <HAL_GPIO_Init+0xfa>
 8008bb8:	4a96      	ldr	r2, [pc, #600]	; (8008e14 <HAL_GPIO_Init+0x2a4>)
 8008bba:	4293      	cmp	r3, r2
 8008bbc:	d86f      	bhi.n	8008c9e <HAL_GPIO_Init+0x12e>
 8008bbe:	4a96      	ldr	r2, [pc, #600]	; (8008e18 <HAL_GPIO_Init+0x2a8>)
 8008bc0:	4293      	cmp	r3, r2
 8008bc2:	d052      	beq.n	8008c6a <HAL_GPIO_Init+0xfa>
 8008bc4:	4a94      	ldr	r2, [pc, #592]	; (8008e18 <HAL_GPIO_Init+0x2a8>)
 8008bc6:	4293      	cmp	r3, r2
 8008bc8:	d869      	bhi.n	8008c9e <HAL_GPIO_Init+0x12e>
 8008bca:	4a94      	ldr	r2, [pc, #592]	; (8008e1c <HAL_GPIO_Init+0x2ac>)
 8008bcc:	4293      	cmp	r3, r2
 8008bce:	d04c      	beq.n	8008c6a <HAL_GPIO_Init+0xfa>
 8008bd0:	4a92      	ldr	r2, [pc, #584]	; (8008e1c <HAL_GPIO_Init+0x2ac>)
 8008bd2:	4293      	cmp	r3, r2
 8008bd4:	d863      	bhi.n	8008c9e <HAL_GPIO_Init+0x12e>
 8008bd6:	4a92      	ldr	r2, [pc, #584]	; (8008e20 <HAL_GPIO_Init+0x2b0>)
 8008bd8:	4293      	cmp	r3, r2
 8008bda:	d046      	beq.n	8008c6a <HAL_GPIO_Init+0xfa>
 8008bdc:	4a90      	ldr	r2, [pc, #576]	; (8008e20 <HAL_GPIO_Init+0x2b0>)
 8008bde:	4293      	cmp	r3, r2
 8008be0:	d85d      	bhi.n	8008c9e <HAL_GPIO_Init+0x12e>
 8008be2:	2b12      	cmp	r3, #18
 8008be4:	d82a      	bhi.n	8008c3c <HAL_GPIO_Init+0xcc>
 8008be6:	2b12      	cmp	r3, #18
 8008be8:	d859      	bhi.n	8008c9e <HAL_GPIO_Init+0x12e>
 8008bea:	a201      	add	r2, pc, #4	; (adr r2, 8008bf0 <HAL_GPIO_Init+0x80>)
 8008bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bf0:	08008c6b 	.word	0x08008c6b
 8008bf4:	08008c45 	.word	0x08008c45
 8008bf8:	08008c57 	.word	0x08008c57
 8008bfc:	08008c99 	.word	0x08008c99
 8008c00:	08008c9f 	.word	0x08008c9f
 8008c04:	08008c9f 	.word	0x08008c9f
 8008c08:	08008c9f 	.word	0x08008c9f
 8008c0c:	08008c9f 	.word	0x08008c9f
 8008c10:	08008c9f 	.word	0x08008c9f
 8008c14:	08008c9f 	.word	0x08008c9f
 8008c18:	08008c9f 	.word	0x08008c9f
 8008c1c:	08008c9f 	.word	0x08008c9f
 8008c20:	08008c9f 	.word	0x08008c9f
 8008c24:	08008c9f 	.word	0x08008c9f
 8008c28:	08008c9f 	.word	0x08008c9f
 8008c2c:	08008c9f 	.word	0x08008c9f
 8008c30:	08008c9f 	.word	0x08008c9f
 8008c34:	08008c4d 	.word	0x08008c4d
 8008c38:	08008c61 	.word	0x08008c61
 8008c3c:	4a79      	ldr	r2, [pc, #484]	; (8008e24 <HAL_GPIO_Init+0x2b4>)
 8008c3e:	4293      	cmp	r3, r2
 8008c40:	d013      	beq.n	8008c6a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8008c42:	e02c      	b.n	8008c9e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	68db      	ldr	r3, [r3, #12]
 8008c48:	623b      	str	r3, [r7, #32]
          break;
 8008c4a:	e029      	b.n	8008ca0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8008c4c:	683b      	ldr	r3, [r7, #0]
 8008c4e:	68db      	ldr	r3, [r3, #12]
 8008c50:	3304      	adds	r3, #4
 8008c52:	623b      	str	r3, [r7, #32]
          break;
 8008c54:	e024      	b.n	8008ca0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8008c56:	683b      	ldr	r3, [r7, #0]
 8008c58:	68db      	ldr	r3, [r3, #12]
 8008c5a:	3308      	adds	r3, #8
 8008c5c:	623b      	str	r3, [r7, #32]
          break;
 8008c5e:	e01f      	b.n	8008ca0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	68db      	ldr	r3, [r3, #12]
 8008c64:	330c      	adds	r3, #12
 8008c66:	623b      	str	r3, [r7, #32]
          break;
 8008c68:	e01a      	b.n	8008ca0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	689b      	ldr	r3, [r3, #8]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d102      	bne.n	8008c78 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8008c72:	2304      	movs	r3, #4
 8008c74:	623b      	str	r3, [r7, #32]
          break;
 8008c76:	e013      	b.n	8008ca0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	689b      	ldr	r3, [r3, #8]
 8008c7c:	2b01      	cmp	r3, #1
 8008c7e:	d105      	bne.n	8008c8c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008c80:	2308      	movs	r3, #8
 8008c82:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	69fa      	ldr	r2, [r7, #28]
 8008c88:	611a      	str	r2, [r3, #16]
          break;
 8008c8a:	e009      	b.n	8008ca0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008c8c:	2308      	movs	r3, #8
 8008c8e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	69fa      	ldr	r2, [r7, #28]
 8008c94:	615a      	str	r2, [r3, #20]
          break;
 8008c96:	e003      	b.n	8008ca0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8008c98:	2300      	movs	r3, #0
 8008c9a:	623b      	str	r3, [r7, #32]
          break;
 8008c9c:	e000      	b.n	8008ca0 <HAL_GPIO_Init+0x130>
          break;
 8008c9e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8008ca0:	69bb      	ldr	r3, [r7, #24]
 8008ca2:	2bff      	cmp	r3, #255	; 0xff
 8008ca4:	d801      	bhi.n	8008caa <HAL_GPIO_Init+0x13a>
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	e001      	b.n	8008cae <HAL_GPIO_Init+0x13e>
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	3304      	adds	r3, #4
 8008cae:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8008cb0:	69bb      	ldr	r3, [r7, #24]
 8008cb2:	2bff      	cmp	r3, #255	; 0xff
 8008cb4:	d802      	bhi.n	8008cbc <HAL_GPIO_Init+0x14c>
 8008cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cb8:	009b      	lsls	r3, r3, #2
 8008cba:	e002      	b.n	8008cc2 <HAL_GPIO_Init+0x152>
 8008cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cbe:	3b08      	subs	r3, #8
 8008cc0:	009b      	lsls	r3, r3, #2
 8008cc2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8008cc4:	697b      	ldr	r3, [r7, #20]
 8008cc6:	681a      	ldr	r2, [r3, #0]
 8008cc8:	210f      	movs	r1, #15
 8008cca:	693b      	ldr	r3, [r7, #16]
 8008ccc:	fa01 f303 	lsl.w	r3, r1, r3
 8008cd0:	43db      	mvns	r3, r3
 8008cd2:	401a      	ands	r2, r3
 8008cd4:	6a39      	ldr	r1, [r7, #32]
 8008cd6:	693b      	ldr	r3, [r7, #16]
 8008cd8:	fa01 f303 	lsl.w	r3, r1, r3
 8008cdc:	431a      	orrs	r2, r3
 8008cde:	697b      	ldr	r3, [r7, #20]
 8008ce0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008ce2:	683b      	ldr	r3, [r7, #0]
 8008ce4:	685b      	ldr	r3, [r3, #4]
 8008ce6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	f000 80b1 	beq.w	8008e52 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8008cf0:	4b4d      	ldr	r3, [pc, #308]	; (8008e28 <HAL_GPIO_Init+0x2b8>)
 8008cf2:	699b      	ldr	r3, [r3, #24]
 8008cf4:	4a4c      	ldr	r2, [pc, #304]	; (8008e28 <HAL_GPIO_Init+0x2b8>)
 8008cf6:	f043 0301 	orr.w	r3, r3, #1
 8008cfa:	6193      	str	r3, [r2, #24]
 8008cfc:	4b4a      	ldr	r3, [pc, #296]	; (8008e28 <HAL_GPIO_Init+0x2b8>)
 8008cfe:	699b      	ldr	r3, [r3, #24]
 8008d00:	f003 0301 	and.w	r3, r3, #1
 8008d04:	60bb      	str	r3, [r7, #8]
 8008d06:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8008d08:	4a48      	ldr	r2, [pc, #288]	; (8008e2c <HAL_GPIO_Init+0x2bc>)
 8008d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d0c:	089b      	lsrs	r3, r3, #2
 8008d0e:	3302      	adds	r3, #2
 8008d10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d14:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8008d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d18:	f003 0303 	and.w	r3, r3, #3
 8008d1c:	009b      	lsls	r3, r3, #2
 8008d1e:	220f      	movs	r2, #15
 8008d20:	fa02 f303 	lsl.w	r3, r2, r3
 8008d24:	43db      	mvns	r3, r3
 8008d26:	68fa      	ldr	r2, [r7, #12]
 8008d28:	4013      	ands	r3, r2
 8008d2a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	4a40      	ldr	r2, [pc, #256]	; (8008e30 <HAL_GPIO_Init+0x2c0>)
 8008d30:	4293      	cmp	r3, r2
 8008d32:	d013      	beq.n	8008d5c <HAL_GPIO_Init+0x1ec>
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	4a3f      	ldr	r2, [pc, #252]	; (8008e34 <HAL_GPIO_Init+0x2c4>)
 8008d38:	4293      	cmp	r3, r2
 8008d3a:	d00d      	beq.n	8008d58 <HAL_GPIO_Init+0x1e8>
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	4a3e      	ldr	r2, [pc, #248]	; (8008e38 <HAL_GPIO_Init+0x2c8>)
 8008d40:	4293      	cmp	r3, r2
 8008d42:	d007      	beq.n	8008d54 <HAL_GPIO_Init+0x1e4>
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	4a3d      	ldr	r2, [pc, #244]	; (8008e3c <HAL_GPIO_Init+0x2cc>)
 8008d48:	4293      	cmp	r3, r2
 8008d4a:	d101      	bne.n	8008d50 <HAL_GPIO_Init+0x1e0>
 8008d4c:	2303      	movs	r3, #3
 8008d4e:	e006      	b.n	8008d5e <HAL_GPIO_Init+0x1ee>
 8008d50:	2304      	movs	r3, #4
 8008d52:	e004      	b.n	8008d5e <HAL_GPIO_Init+0x1ee>
 8008d54:	2302      	movs	r3, #2
 8008d56:	e002      	b.n	8008d5e <HAL_GPIO_Init+0x1ee>
 8008d58:	2301      	movs	r3, #1
 8008d5a:	e000      	b.n	8008d5e <HAL_GPIO_Init+0x1ee>
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d60:	f002 0203 	and.w	r2, r2, #3
 8008d64:	0092      	lsls	r2, r2, #2
 8008d66:	4093      	lsls	r3, r2
 8008d68:	68fa      	ldr	r2, [r7, #12]
 8008d6a:	4313      	orrs	r3, r2
 8008d6c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8008d6e:	492f      	ldr	r1, [pc, #188]	; (8008e2c <HAL_GPIO_Init+0x2bc>)
 8008d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d72:	089b      	lsrs	r3, r3, #2
 8008d74:	3302      	adds	r3, #2
 8008d76:	68fa      	ldr	r2, [r7, #12]
 8008d78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	685b      	ldr	r3, [r3, #4]
 8008d80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d006      	beq.n	8008d96 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8008d88:	4b2d      	ldr	r3, [pc, #180]	; (8008e40 <HAL_GPIO_Init+0x2d0>)
 8008d8a:	689a      	ldr	r2, [r3, #8]
 8008d8c:	492c      	ldr	r1, [pc, #176]	; (8008e40 <HAL_GPIO_Init+0x2d0>)
 8008d8e:	69bb      	ldr	r3, [r7, #24]
 8008d90:	4313      	orrs	r3, r2
 8008d92:	608b      	str	r3, [r1, #8]
 8008d94:	e006      	b.n	8008da4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8008d96:	4b2a      	ldr	r3, [pc, #168]	; (8008e40 <HAL_GPIO_Init+0x2d0>)
 8008d98:	689a      	ldr	r2, [r3, #8]
 8008d9a:	69bb      	ldr	r3, [r7, #24]
 8008d9c:	43db      	mvns	r3, r3
 8008d9e:	4928      	ldr	r1, [pc, #160]	; (8008e40 <HAL_GPIO_Init+0x2d0>)
 8008da0:	4013      	ands	r3, r2
 8008da2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	685b      	ldr	r3, [r3, #4]
 8008da8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d006      	beq.n	8008dbe <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8008db0:	4b23      	ldr	r3, [pc, #140]	; (8008e40 <HAL_GPIO_Init+0x2d0>)
 8008db2:	68da      	ldr	r2, [r3, #12]
 8008db4:	4922      	ldr	r1, [pc, #136]	; (8008e40 <HAL_GPIO_Init+0x2d0>)
 8008db6:	69bb      	ldr	r3, [r7, #24]
 8008db8:	4313      	orrs	r3, r2
 8008dba:	60cb      	str	r3, [r1, #12]
 8008dbc:	e006      	b.n	8008dcc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8008dbe:	4b20      	ldr	r3, [pc, #128]	; (8008e40 <HAL_GPIO_Init+0x2d0>)
 8008dc0:	68da      	ldr	r2, [r3, #12]
 8008dc2:	69bb      	ldr	r3, [r7, #24]
 8008dc4:	43db      	mvns	r3, r3
 8008dc6:	491e      	ldr	r1, [pc, #120]	; (8008e40 <HAL_GPIO_Init+0x2d0>)
 8008dc8:	4013      	ands	r3, r2
 8008dca:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	685b      	ldr	r3, [r3, #4]
 8008dd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d006      	beq.n	8008de6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8008dd8:	4b19      	ldr	r3, [pc, #100]	; (8008e40 <HAL_GPIO_Init+0x2d0>)
 8008dda:	685a      	ldr	r2, [r3, #4]
 8008ddc:	4918      	ldr	r1, [pc, #96]	; (8008e40 <HAL_GPIO_Init+0x2d0>)
 8008dde:	69bb      	ldr	r3, [r7, #24]
 8008de0:	4313      	orrs	r3, r2
 8008de2:	604b      	str	r3, [r1, #4]
 8008de4:	e006      	b.n	8008df4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8008de6:	4b16      	ldr	r3, [pc, #88]	; (8008e40 <HAL_GPIO_Init+0x2d0>)
 8008de8:	685a      	ldr	r2, [r3, #4]
 8008dea:	69bb      	ldr	r3, [r7, #24]
 8008dec:	43db      	mvns	r3, r3
 8008dee:	4914      	ldr	r1, [pc, #80]	; (8008e40 <HAL_GPIO_Init+0x2d0>)
 8008df0:	4013      	ands	r3, r2
 8008df2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008df4:	683b      	ldr	r3, [r7, #0]
 8008df6:	685b      	ldr	r3, [r3, #4]
 8008df8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d021      	beq.n	8008e44 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8008e00:	4b0f      	ldr	r3, [pc, #60]	; (8008e40 <HAL_GPIO_Init+0x2d0>)
 8008e02:	681a      	ldr	r2, [r3, #0]
 8008e04:	490e      	ldr	r1, [pc, #56]	; (8008e40 <HAL_GPIO_Init+0x2d0>)
 8008e06:	69bb      	ldr	r3, [r7, #24]
 8008e08:	4313      	orrs	r3, r2
 8008e0a:	600b      	str	r3, [r1, #0]
 8008e0c:	e021      	b.n	8008e52 <HAL_GPIO_Init+0x2e2>
 8008e0e:	bf00      	nop
 8008e10:	10320000 	.word	0x10320000
 8008e14:	10310000 	.word	0x10310000
 8008e18:	10220000 	.word	0x10220000
 8008e1c:	10210000 	.word	0x10210000
 8008e20:	10120000 	.word	0x10120000
 8008e24:	10110000 	.word	0x10110000
 8008e28:	40021000 	.word	0x40021000
 8008e2c:	40010000 	.word	0x40010000
 8008e30:	40010800 	.word	0x40010800
 8008e34:	40010c00 	.word	0x40010c00
 8008e38:	40011000 	.word	0x40011000
 8008e3c:	40011400 	.word	0x40011400
 8008e40:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8008e44:	4b0b      	ldr	r3, [pc, #44]	; (8008e74 <HAL_GPIO_Init+0x304>)
 8008e46:	681a      	ldr	r2, [r3, #0]
 8008e48:	69bb      	ldr	r3, [r7, #24]
 8008e4a:	43db      	mvns	r3, r3
 8008e4c:	4909      	ldr	r1, [pc, #36]	; (8008e74 <HAL_GPIO_Init+0x304>)
 8008e4e:	4013      	ands	r3, r2
 8008e50:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8008e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e54:	3301      	adds	r3, #1
 8008e56:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	681a      	ldr	r2, [r3, #0]
 8008e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e5e:	fa22 f303 	lsr.w	r3, r2, r3
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	f47f ae8e 	bne.w	8008b84 <HAL_GPIO_Init+0x14>
  }
}
 8008e68:	bf00      	nop
 8008e6a:	bf00      	nop
 8008e6c:	372c      	adds	r7, #44	; 0x2c
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	bc80      	pop	{r7}
 8008e72:	4770      	bx	lr
 8008e74:	40010400 	.word	0x40010400

08008e78 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008e78:	b480      	push	{r7}
 8008e7a:	b085      	sub	sp, #20
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
 8008e80:	460b      	mov	r3, r1
 8008e82:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	689a      	ldr	r2, [r3, #8]
 8008e88:	887b      	ldrh	r3, [r7, #2]
 8008e8a:	4013      	ands	r3, r2
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d002      	beq.n	8008e96 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008e90:	2301      	movs	r3, #1
 8008e92:	73fb      	strb	r3, [r7, #15]
 8008e94:	e001      	b.n	8008e9a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008e96:	2300      	movs	r3, #0
 8008e98:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008e9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	3714      	adds	r7, #20
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	bc80      	pop	{r7}
 8008ea4:	4770      	bx	lr

08008ea6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008ea6:	b480      	push	{r7}
 8008ea8:	b083      	sub	sp, #12
 8008eaa:	af00      	add	r7, sp, #0
 8008eac:	6078      	str	r0, [r7, #4]
 8008eae:	460b      	mov	r3, r1
 8008eb0:	807b      	strh	r3, [r7, #2]
 8008eb2:	4613      	mov	r3, r2
 8008eb4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008eb6:	787b      	ldrb	r3, [r7, #1]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d003      	beq.n	8008ec4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008ebc:	887a      	ldrh	r2, [r7, #2]
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8008ec2:	e003      	b.n	8008ecc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8008ec4:	887b      	ldrh	r3, [r7, #2]
 8008ec6:	041a      	lsls	r2, r3, #16
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	611a      	str	r2, [r3, #16]
}
 8008ecc:	bf00      	nop
 8008ece:	370c      	adds	r7, #12
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	bc80      	pop	{r7}
 8008ed4:	4770      	bx	lr

08008ed6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008ed6:	b480      	push	{r7}
 8008ed8:	b085      	sub	sp, #20
 8008eda:	af00      	add	r7, sp, #0
 8008edc:	6078      	str	r0, [r7, #4]
 8008ede:	460b      	mov	r3, r1
 8008ee0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	68db      	ldr	r3, [r3, #12]
 8008ee6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008ee8:	887a      	ldrh	r2, [r7, #2]
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	4013      	ands	r3, r2
 8008eee:	041a      	lsls	r2, r3, #16
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	43d9      	mvns	r1, r3
 8008ef4:	887b      	ldrh	r3, [r7, #2]
 8008ef6:	400b      	ands	r3, r1
 8008ef8:	431a      	orrs	r2, r3
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	611a      	str	r2, [r3, #16]
}
 8008efe:	bf00      	nop
 8008f00:	3714      	adds	r7, #20
 8008f02:	46bd      	mov	sp, r7
 8008f04:	bc80      	pop	{r7}
 8008f06:	4770      	bx	lr

08008f08 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b082      	sub	sp, #8
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	4603      	mov	r3, r0
 8008f10:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8008f12:	4b08      	ldr	r3, [pc, #32]	; (8008f34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008f14:	695a      	ldr	r2, [r3, #20]
 8008f16:	88fb      	ldrh	r3, [r7, #6]
 8008f18:	4013      	ands	r3, r2
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d006      	beq.n	8008f2c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008f1e:	4a05      	ldr	r2, [pc, #20]	; (8008f34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008f20:	88fb      	ldrh	r3, [r7, #6]
 8008f22:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008f24:	88fb      	ldrh	r3, [r7, #6]
 8008f26:	4618      	mov	r0, r3
 8008f28:	f7fd f856 	bl	8005fd8 <HAL_GPIO_EXTI_Callback>
  }
}
 8008f2c:	bf00      	nop
 8008f2e:	3708      	adds	r7, #8
 8008f30:	46bd      	mov	sp, r7
 8008f32:	bd80      	pop	{r7, pc}
 8008f34:	40010400 	.word	0x40010400

08008f38 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b084      	sub	sp, #16
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d101      	bne.n	8008f4a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008f46:	2301      	movs	r3, #1
 8008f48:	e12b      	b.n	80091a2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f50:	b2db      	uxtb	r3, r3
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d106      	bne.n	8008f64 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	2200      	movs	r2, #0
 8008f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8008f5e:	6878      	ldr	r0, [r7, #4]
 8008f60:	f7fc ff34 	bl	8005dcc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2224      	movs	r2, #36	; 0x24
 8008f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	681a      	ldr	r2, [r3, #0]
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	f022 0201 	bic.w	r2, r2, #1
 8008f7a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	681a      	ldr	r2, [r3, #0]
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008f8a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	681a      	ldr	r2, [r3, #0]
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008f9a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008f9c:	f001 fbca 	bl	800a734 <HAL_RCC_GetPCLK1Freq>
 8008fa0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	685b      	ldr	r3, [r3, #4]
 8008fa6:	4a81      	ldr	r2, [pc, #516]	; (80091ac <HAL_I2C_Init+0x274>)
 8008fa8:	4293      	cmp	r3, r2
 8008faa:	d807      	bhi.n	8008fbc <HAL_I2C_Init+0x84>
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	4a80      	ldr	r2, [pc, #512]	; (80091b0 <HAL_I2C_Init+0x278>)
 8008fb0:	4293      	cmp	r3, r2
 8008fb2:	bf94      	ite	ls
 8008fb4:	2301      	movls	r3, #1
 8008fb6:	2300      	movhi	r3, #0
 8008fb8:	b2db      	uxtb	r3, r3
 8008fba:	e006      	b.n	8008fca <HAL_I2C_Init+0x92>
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	4a7d      	ldr	r2, [pc, #500]	; (80091b4 <HAL_I2C_Init+0x27c>)
 8008fc0:	4293      	cmp	r3, r2
 8008fc2:	bf94      	ite	ls
 8008fc4:	2301      	movls	r3, #1
 8008fc6:	2300      	movhi	r3, #0
 8008fc8:	b2db      	uxtb	r3, r3
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d001      	beq.n	8008fd2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8008fce:	2301      	movs	r3, #1
 8008fd0:	e0e7      	b.n	80091a2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	4a78      	ldr	r2, [pc, #480]	; (80091b8 <HAL_I2C_Init+0x280>)
 8008fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8008fda:	0c9b      	lsrs	r3, r3, #18
 8008fdc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	685b      	ldr	r3, [r3, #4]
 8008fe4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	68ba      	ldr	r2, [r7, #8]
 8008fee:	430a      	orrs	r2, r1
 8008ff0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	6a1b      	ldr	r3, [r3, #32]
 8008ff8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	685b      	ldr	r3, [r3, #4]
 8009000:	4a6a      	ldr	r2, [pc, #424]	; (80091ac <HAL_I2C_Init+0x274>)
 8009002:	4293      	cmp	r3, r2
 8009004:	d802      	bhi.n	800900c <HAL_I2C_Init+0xd4>
 8009006:	68bb      	ldr	r3, [r7, #8]
 8009008:	3301      	adds	r3, #1
 800900a:	e009      	b.n	8009020 <HAL_I2C_Init+0xe8>
 800900c:	68bb      	ldr	r3, [r7, #8]
 800900e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8009012:	fb02 f303 	mul.w	r3, r2, r3
 8009016:	4a69      	ldr	r2, [pc, #420]	; (80091bc <HAL_I2C_Init+0x284>)
 8009018:	fba2 2303 	umull	r2, r3, r2, r3
 800901c:	099b      	lsrs	r3, r3, #6
 800901e:	3301      	adds	r3, #1
 8009020:	687a      	ldr	r2, [r7, #4]
 8009022:	6812      	ldr	r2, [r2, #0]
 8009024:	430b      	orrs	r3, r1
 8009026:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	69db      	ldr	r3, [r3, #28]
 800902e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8009032:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	685b      	ldr	r3, [r3, #4]
 800903a:	495c      	ldr	r1, [pc, #368]	; (80091ac <HAL_I2C_Init+0x274>)
 800903c:	428b      	cmp	r3, r1
 800903e:	d819      	bhi.n	8009074 <HAL_I2C_Init+0x13c>
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	1e59      	subs	r1, r3, #1
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	685b      	ldr	r3, [r3, #4]
 8009048:	005b      	lsls	r3, r3, #1
 800904a:	fbb1 f3f3 	udiv	r3, r1, r3
 800904e:	1c59      	adds	r1, r3, #1
 8009050:	f640 73fc 	movw	r3, #4092	; 0xffc
 8009054:	400b      	ands	r3, r1
 8009056:	2b00      	cmp	r3, #0
 8009058:	d00a      	beq.n	8009070 <HAL_I2C_Init+0x138>
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	1e59      	subs	r1, r3, #1
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	685b      	ldr	r3, [r3, #4]
 8009062:	005b      	lsls	r3, r3, #1
 8009064:	fbb1 f3f3 	udiv	r3, r1, r3
 8009068:	3301      	adds	r3, #1
 800906a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800906e:	e051      	b.n	8009114 <HAL_I2C_Init+0x1dc>
 8009070:	2304      	movs	r3, #4
 8009072:	e04f      	b.n	8009114 <HAL_I2C_Init+0x1dc>
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	689b      	ldr	r3, [r3, #8]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d111      	bne.n	80090a0 <HAL_I2C_Init+0x168>
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	1e58      	subs	r0, r3, #1
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	6859      	ldr	r1, [r3, #4]
 8009084:	460b      	mov	r3, r1
 8009086:	005b      	lsls	r3, r3, #1
 8009088:	440b      	add	r3, r1
 800908a:	fbb0 f3f3 	udiv	r3, r0, r3
 800908e:	3301      	adds	r3, #1
 8009090:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009094:	2b00      	cmp	r3, #0
 8009096:	bf0c      	ite	eq
 8009098:	2301      	moveq	r3, #1
 800909a:	2300      	movne	r3, #0
 800909c:	b2db      	uxtb	r3, r3
 800909e:	e012      	b.n	80090c6 <HAL_I2C_Init+0x18e>
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	1e58      	subs	r0, r3, #1
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	6859      	ldr	r1, [r3, #4]
 80090a8:	460b      	mov	r3, r1
 80090aa:	009b      	lsls	r3, r3, #2
 80090ac:	440b      	add	r3, r1
 80090ae:	0099      	lsls	r1, r3, #2
 80090b0:	440b      	add	r3, r1
 80090b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80090b6:	3301      	adds	r3, #1
 80090b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80090bc:	2b00      	cmp	r3, #0
 80090be:	bf0c      	ite	eq
 80090c0:	2301      	moveq	r3, #1
 80090c2:	2300      	movne	r3, #0
 80090c4:	b2db      	uxtb	r3, r3
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d001      	beq.n	80090ce <HAL_I2C_Init+0x196>
 80090ca:	2301      	movs	r3, #1
 80090cc:	e022      	b.n	8009114 <HAL_I2C_Init+0x1dc>
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	689b      	ldr	r3, [r3, #8]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d10e      	bne.n	80090f4 <HAL_I2C_Init+0x1bc>
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	1e58      	subs	r0, r3, #1
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	6859      	ldr	r1, [r3, #4]
 80090de:	460b      	mov	r3, r1
 80090e0:	005b      	lsls	r3, r3, #1
 80090e2:	440b      	add	r3, r1
 80090e4:	fbb0 f3f3 	udiv	r3, r0, r3
 80090e8:	3301      	adds	r3, #1
 80090ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80090ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80090f2:	e00f      	b.n	8009114 <HAL_I2C_Init+0x1dc>
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	1e58      	subs	r0, r3, #1
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	6859      	ldr	r1, [r3, #4]
 80090fc:	460b      	mov	r3, r1
 80090fe:	009b      	lsls	r3, r3, #2
 8009100:	440b      	add	r3, r1
 8009102:	0099      	lsls	r1, r3, #2
 8009104:	440b      	add	r3, r1
 8009106:	fbb0 f3f3 	udiv	r3, r0, r3
 800910a:	3301      	adds	r3, #1
 800910c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009110:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009114:	6879      	ldr	r1, [r7, #4]
 8009116:	6809      	ldr	r1, [r1, #0]
 8009118:	4313      	orrs	r3, r2
 800911a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	69da      	ldr	r2, [r3, #28]
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	6a1b      	ldr	r3, [r3, #32]
 800912e:	431a      	orrs	r2, r3
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	430a      	orrs	r2, r1
 8009136:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	689b      	ldr	r3, [r3, #8]
 800913e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8009142:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009146:	687a      	ldr	r2, [r7, #4]
 8009148:	6911      	ldr	r1, [r2, #16]
 800914a:	687a      	ldr	r2, [r7, #4]
 800914c:	68d2      	ldr	r2, [r2, #12]
 800914e:	4311      	orrs	r1, r2
 8009150:	687a      	ldr	r2, [r7, #4]
 8009152:	6812      	ldr	r2, [r2, #0]
 8009154:	430b      	orrs	r3, r1
 8009156:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	68db      	ldr	r3, [r3, #12]
 800915e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	695a      	ldr	r2, [r3, #20]
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	699b      	ldr	r3, [r3, #24]
 800916a:	431a      	orrs	r2, r3
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	430a      	orrs	r2, r1
 8009172:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	681a      	ldr	r2, [r3, #0]
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	f042 0201 	orr.w	r2, r2, #1
 8009182:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	2200      	movs	r2, #0
 8009188:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	2220      	movs	r2, #32
 800918e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	2200      	movs	r2, #0
 8009196:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	2200      	movs	r2, #0
 800919c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80091a0:	2300      	movs	r3, #0
}
 80091a2:	4618      	mov	r0, r3
 80091a4:	3710      	adds	r7, #16
 80091a6:	46bd      	mov	sp, r7
 80091a8:	bd80      	pop	{r7, pc}
 80091aa:	bf00      	nop
 80091ac:	000186a0 	.word	0x000186a0
 80091b0:	001e847f 	.word	0x001e847f
 80091b4:	003d08ff 	.word	0x003d08ff
 80091b8:	431bde83 	.word	0x431bde83
 80091bc:	10624dd3 	.word	0x10624dd3

080091c0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b088      	sub	sp, #32
 80091c4:	af02      	add	r7, sp, #8
 80091c6:	60f8      	str	r0, [r7, #12]
 80091c8:	607a      	str	r2, [r7, #4]
 80091ca:	461a      	mov	r2, r3
 80091cc:	460b      	mov	r3, r1
 80091ce:	817b      	strh	r3, [r7, #10]
 80091d0:	4613      	mov	r3, r2
 80091d2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80091d4:	f7fe fcf0 	bl	8007bb8 <HAL_GetTick>
 80091d8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80091e0:	b2db      	uxtb	r3, r3
 80091e2:	2b20      	cmp	r3, #32
 80091e4:	f040 80e0 	bne.w	80093a8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80091e8:	697b      	ldr	r3, [r7, #20]
 80091ea:	9300      	str	r3, [sp, #0]
 80091ec:	2319      	movs	r3, #25
 80091ee:	2201      	movs	r2, #1
 80091f0:	4970      	ldr	r1, [pc, #448]	; (80093b4 <HAL_I2C_Master_Transmit+0x1f4>)
 80091f2:	68f8      	ldr	r0, [r7, #12]
 80091f4:	f000 fc9e 	bl	8009b34 <I2C_WaitOnFlagUntilTimeout>
 80091f8:	4603      	mov	r3, r0
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d001      	beq.n	8009202 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80091fe:	2302      	movs	r3, #2
 8009200:	e0d3      	b.n	80093aa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009208:	2b01      	cmp	r3, #1
 800920a:	d101      	bne.n	8009210 <HAL_I2C_Master_Transmit+0x50>
 800920c:	2302      	movs	r3, #2
 800920e:	e0cc      	b.n	80093aa <HAL_I2C_Master_Transmit+0x1ea>
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	2201      	movs	r2, #1
 8009214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	f003 0301 	and.w	r3, r3, #1
 8009222:	2b01      	cmp	r3, #1
 8009224:	d007      	beq.n	8009236 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	681a      	ldr	r2, [r3, #0]
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	f042 0201 	orr.w	r2, r2, #1
 8009234:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	681a      	ldr	r2, [r3, #0]
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009244:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	2221      	movs	r2, #33	; 0x21
 800924a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	2210      	movs	r2, #16
 8009252:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	2200      	movs	r2, #0
 800925a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	687a      	ldr	r2, [r7, #4]
 8009260:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	893a      	ldrh	r2, [r7, #8]
 8009266:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800926c:	b29a      	uxth	r2, r3
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	4a50      	ldr	r2, [pc, #320]	; (80093b8 <HAL_I2C_Master_Transmit+0x1f8>)
 8009276:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8009278:	8979      	ldrh	r1, [r7, #10]
 800927a:	697b      	ldr	r3, [r7, #20]
 800927c:	6a3a      	ldr	r2, [r7, #32]
 800927e:	68f8      	ldr	r0, [r7, #12]
 8009280:	f000 fb08 	bl	8009894 <I2C_MasterRequestWrite>
 8009284:	4603      	mov	r3, r0
 8009286:	2b00      	cmp	r3, #0
 8009288:	d001      	beq.n	800928e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800928a:	2301      	movs	r3, #1
 800928c:	e08d      	b.n	80093aa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800928e:	2300      	movs	r3, #0
 8009290:	613b      	str	r3, [r7, #16]
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	695b      	ldr	r3, [r3, #20]
 8009298:	613b      	str	r3, [r7, #16]
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	699b      	ldr	r3, [r3, #24]
 80092a0:	613b      	str	r3, [r7, #16]
 80092a2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80092a4:	e066      	b.n	8009374 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80092a6:	697a      	ldr	r2, [r7, #20]
 80092a8:	6a39      	ldr	r1, [r7, #32]
 80092aa:	68f8      	ldr	r0, [r7, #12]
 80092ac:	f000 fd5c 	bl	8009d68 <I2C_WaitOnTXEFlagUntilTimeout>
 80092b0:	4603      	mov	r3, r0
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d00d      	beq.n	80092d2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092ba:	2b04      	cmp	r3, #4
 80092bc:	d107      	bne.n	80092ce <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	681a      	ldr	r2, [r3, #0]
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80092cc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80092ce:	2301      	movs	r3, #1
 80092d0:	e06b      	b.n	80093aa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092d6:	781a      	ldrb	r2, [r3, #0]
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092e2:	1c5a      	adds	r2, r3, #1
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092ec:	b29b      	uxth	r3, r3
 80092ee:	3b01      	subs	r3, #1
 80092f0:	b29a      	uxth	r2, r3
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80092fa:	3b01      	subs	r3, #1
 80092fc:	b29a      	uxth	r2, r3
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	695b      	ldr	r3, [r3, #20]
 8009308:	f003 0304 	and.w	r3, r3, #4
 800930c:	2b04      	cmp	r3, #4
 800930e:	d11b      	bne.n	8009348 <HAL_I2C_Master_Transmit+0x188>
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009314:	2b00      	cmp	r3, #0
 8009316:	d017      	beq.n	8009348 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800931c:	781a      	ldrb	r2, [r3, #0]
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009328:	1c5a      	adds	r2, r3, #1
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009332:	b29b      	uxth	r3, r3
 8009334:	3b01      	subs	r3, #1
 8009336:	b29a      	uxth	r2, r3
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009340:	3b01      	subs	r3, #1
 8009342:	b29a      	uxth	r2, r3
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009348:	697a      	ldr	r2, [r7, #20]
 800934a:	6a39      	ldr	r1, [r7, #32]
 800934c:	68f8      	ldr	r0, [r7, #12]
 800934e:	f000 fd53 	bl	8009df8 <I2C_WaitOnBTFFlagUntilTimeout>
 8009352:	4603      	mov	r3, r0
 8009354:	2b00      	cmp	r3, #0
 8009356:	d00d      	beq.n	8009374 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800935c:	2b04      	cmp	r3, #4
 800935e:	d107      	bne.n	8009370 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	681a      	ldr	r2, [r3, #0]
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800936e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009370:	2301      	movs	r3, #1
 8009372:	e01a      	b.n	80093aa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009378:	2b00      	cmp	r3, #0
 800937a:	d194      	bne.n	80092a6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	681a      	ldr	r2, [r3, #0]
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800938a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	2220      	movs	r2, #32
 8009390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	2200      	movs	r2, #0
 8009398:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	2200      	movs	r2, #0
 80093a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80093a4:	2300      	movs	r3, #0
 80093a6:	e000      	b.n	80093aa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80093a8:	2302      	movs	r3, #2
  }
}
 80093aa:	4618      	mov	r0, r3
 80093ac:	3718      	adds	r7, #24
 80093ae:	46bd      	mov	sp, r7
 80093b0:	bd80      	pop	{r7, pc}
 80093b2:	bf00      	nop
 80093b4:	00100002 	.word	0x00100002
 80093b8:	ffff0000 	.word	0xffff0000

080093bc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b08c      	sub	sp, #48	; 0x30
 80093c0:	af02      	add	r7, sp, #8
 80093c2:	60f8      	str	r0, [r7, #12]
 80093c4:	607a      	str	r2, [r7, #4]
 80093c6:	461a      	mov	r2, r3
 80093c8:	460b      	mov	r3, r1
 80093ca:	817b      	strh	r3, [r7, #10]
 80093cc:	4613      	mov	r3, r2
 80093ce:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80093d0:	2300      	movs	r3, #0
 80093d2:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80093d4:	f7fe fbf0 	bl	8007bb8 <HAL_GetTick>
 80093d8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80093e0:	b2db      	uxtb	r3, r3
 80093e2:	2b20      	cmp	r3, #32
 80093e4:	f040 824b 	bne.w	800987e <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80093e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ea:	9300      	str	r3, [sp, #0]
 80093ec:	2319      	movs	r3, #25
 80093ee:	2201      	movs	r2, #1
 80093f0:	497f      	ldr	r1, [pc, #508]	; (80095f0 <HAL_I2C_Master_Receive+0x234>)
 80093f2:	68f8      	ldr	r0, [r7, #12]
 80093f4:	f000 fb9e 	bl	8009b34 <I2C_WaitOnFlagUntilTimeout>
 80093f8:	4603      	mov	r3, r0
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d001      	beq.n	8009402 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80093fe:	2302      	movs	r3, #2
 8009400:	e23e      	b.n	8009880 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009408:	2b01      	cmp	r3, #1
 800940a:	d101      	bne.n	8009410 <HAL_I2C_Master_Receive+0x54>
 800940c:	2302      	movs	r3, #2
 800940e:	e237      	b.n	8009880 <HAL_I2C_Master_Receive+0x4c4>
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	2201      	movs	r2, #1
 8009414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	f003 0301 	and.w	r3, r3, #1
 8009422:	2b01      	cmp	r3, #1
 8009424:	d007      	beq.n	8009436 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	681a      	ldr	r2, [r3, #0]
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	f042 0201 	orr.w	r2, r2, #1
 8009434:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	681a      	ldr	r2, [r3, #0]
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009444:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	2222      	movs	r2, #34	; 0x22
 800944a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	2210      	movs	r2, #16
 8009452:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	2200      	movs	r2, #0
 800945a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	687a      	ldr	r2, [r7, #4]
 8009460:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	893a      	ldrh	r2, [r7, #8]
 8009466:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800946c:	b29a      	uxth	r2, r3
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	4a5f      	ldr	r2, [pc, #380]	; (80095f4 <HAL_I2C_Master_Receive+0x238>)
 8009476:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8009478:	8979      	ldrh	r1, [r7, #10]
 800947a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800947c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800947e:	68f8      	ldr	r0, [r7, #12]
 8009480:	f000 fa8a 	bl	8009998 <I2C_MasterRequestRead>
 8009484:	4603      	mov	r3, r0
 8009486:	2b00      	cmp	r3, #0
 8009488:	d001      	beq.n	800948e <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 800948a:	2301      	movs	r3, #1
 800948c:	e1f8      	b.n	8009880 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009492:	2b00      	cmp	r3, #0
 8009494:	d113      	bne.n	80094be <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009496:	2300      	movs	r3, #0
 8009498:	61fb      	str	r3, [r7, #28]
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	695b      	ldr	r3, [r3, #20]
 80094a0:	61fb      	str	r3, [r7, #28]
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	699b      	ldr	r3, [r3, #24]
 80094a8:	61fb      	str	r3, [r7, #28]
 80094aa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	681a      	ldr	r2, [r3, #0]
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80094ba:	601a      	str	r2, [r3, #0]
 80094bc:	e1cc      	b.n	8009858 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094c2:	2b01      	cmp	r3, #1
 80094c4:	d11e      	bne.n	8009504 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	681a      	ldr	r2, [r3, #0]
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80094d4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80094d6:	b672      	cpsid	i
}
 80094d8:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80094da:	2300      	movs	r3, #0
 80094dc:	61bb      	str	r3, [r7, #24]
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	695b      	ldr	r3, [r3, #20]
 80094e4:	61bb      	str	r3, [r7, #24]
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	699b      	ldr	r3, [r3, #24]
 80094ec:	61bb      	str	r3, [r7, #24]
 80094ee:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	681a      	ldr	r2, [r3, #0]
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80094fe:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8009500:	b662      	cpsie	i
}
 8009502:	e035      	b.n	8009570 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009508:	2b02      	cmp	r3, #2
 800950a:	d11e      	bne.n	800954a <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	681a      	ldr	r2, [r3, #0]
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800951a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800951c:	b672      	cpsid	i
}
 800951e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009520:	2300      	movs	r3, #0
 8009522:	617b      	str	r3, [r7, #20]
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	695b      	ldr	r3, [r3, #20]
 800952a:	617b      	str	r3, [r7, #20]
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	699b      	ldr	r3, [r3, #24]
 8009532:	617b      	str	r3, [r7, #20]
 8009534:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	681a      	ldr	r2, [r3, #0]
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009544:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8009546:	b662      	cpsie	i
}
 8009548:	e012      	b.n	8009570 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	681a      	ldr	r2, [r3, #0]
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009558:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800955a:	2300      	movs	r3, #0
 800955c:	613b      	str	r3, [r7, #16]
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	695b      	ldr	r3, [r3, #20]
 8009564:	613b      	str	r3, [r7, #16]
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	699b      	ldr	r3, [r3, #24]
 800956c:	613b      	str	r3, [r7, #16]
 800956e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8009570:	e172      	b.n	8009858 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009576:	2b03      	cmp	r3, #3
 8009578:	f200 811f 	bhi.w	80097ba <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009580:	2b01      	cmp	r3, #1
 8009582:	d123      	bne.n	80095cc <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009584:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009586:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009588:	68f8      	ldr	r0, [r7, #12]
 800958a:	f000 fc7d 	bl	8009e88 <I2C_WaitOnRXNEFlagUntilTimeout>
 800958e:	4603      	mov	r3, r0
 8009590:	2b00      	cmp	r3, #0
 8009592:	d001      	beq.n	8009598 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8009594:	2301      	movs	r3, #1
 8009596:	e173      	b.n	8009880 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	691a      	ldr	r2, [r3, #16]
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095a2:	b2d2      	uxtb	r2, r2
 80095a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095aa:	1c5a      	adds	r2, r3, #1
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095b4:	3b01      	subs	r3, #1
 80095b6:	b29a      	uxth	r2, r3
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095c0:	b29b      	uxth	r3, r3
 80095c2:	3b01      	subs	r3, #1
 80095c4:	b29a      	uxth	r2, r3
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80095ca:	e145      	b.n	8009858 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095d0:	2b02      	cmp	r3, #2
 80095d2:	d152      	bne.n	800967a <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80095d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095d6:	9300      	str	r3, [sp, #0]
 80095d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095da:	2200      	movs	r2, #0
 80095dc:	4906      	ldr	r1, [pc, #24]	; (80095f8 <HAL_I2C_Master_Receive+0x23c>)
 80095de:	68f8      	ldr	r0, [r7, #12]
 80095e0:	f000 faa8 	bl	8009b34 <I2C_WaitOnFlagUntilTimeout>
 80095e4:	4603      	mov	r3, r0
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d008      	beq.n	80095fc <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 80095ea:	2301      	movs	r3, #1
 80095ec:	e148      	b.n	8009880 <HAL_I2C_Master_Receive+0x4c4>
 80095ee:	bf00      	nop
 80095f0:	00100002 	.word	0x00100002
 80095f4:	ffff0000 	.word	0xffff0000
 80095f8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80095fc:	b672      	cpsid	i
}
 80095fe:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	681a      	ldr	r2, [r3, #0]
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800960e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	691a      	ldr	r2, [r3, #16]
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800961a:	b2d2      	uxtb	r2, r2
 800961c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009622:	1c5a      	adds	r2, r3, #1
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800962c:	3b01      	subs	r3, #1
 800962e:	b29a      	uxth	r2, r3
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009638:	b29b      	uxth	r3, r3
 800963a:	3b01      	subs	r3, #1
 800963c:	b29a      	uxth	r2, r3
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8009642:	b662      	cpsie	i
}
 8009644:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	691a      	ldr	r2, [r3, #16]
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009650:	b2d2      	uxtb	r2, r2
 8009652:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009658:	1c5a      	adds	r2, r3, #1
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009662:	3b01      	subs	r3, #1
 8009664:	b29a      	uxth	r2, r3
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800966e:	b29b      	uxth	r3, r3
 8009670:	3b01      	subs	r3, #1
 8009672:	b29a      	uxth	r2, r3
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009678:	e0ee      	b.n	8009858 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800967a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800967c:	9300      	str	r3, [sp, #0]
 800967e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009680:	2200      	movs	r2, #0
 8009682:	4981      	ldr	r1, [pc, #516]	; (8009888 <HAL_I2C_Master_Receive+0x4cc>)
 8009684:	68f8      	ldr	r0, [r7, #12]
 8009686:	f000 fa55 	bl	8009b34 <I2C_WaitOnFlagUntilTimeout>
 800968a:	4603      	mov	r3, r0
 800968c:	2b00      	cmp	r3, #0
 800968e:	d001      	beq.n	8009694 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8009690:	2301      	movs	r3, #1
 8009692:	e0f5      	b.n	8009880 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	681a      	ldr	r2, [r3, #0]
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80096a2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80096a4:	b672      	cpsid	i
}
 80096a6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	691a      	ldr	r2, [r3, #16]
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096b2:	b2d2      	uxtb	r2, r2
 80096b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096ba:	1c5a      	adds	r2, r3, #1
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096c4:	3b01      	subs	r3, #1
 80096c6:	b29a      	uxth	r2, r3
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80096d0:	b29b      	uxth	r3, r3
 80096d2:	3b01      	subs	r3, #1
 80096d4:	b29a      	uxth	r2, r3
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80096da:	4b6c      	ldr	r3, [pc, #432]	; (800988c <HAL_I2C_Master_Receive+0x4d0>)
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	08db      	lsrs	r3, r3, #3
 80096e0:	4a6b      	ldr	r2, [pc, #428]	; (8009890 <HAL_I2C_Master_Receive+0x4d4>)
 80096e2:	fba2 2303 	umull	r2, r3, r2, r3
 80096e6:	0a1a      	lsrs	r2, r3, #8
 80096e8:	4613      	mov	r3, r2
 80096ea:	009b      	lsls	r3, r3, #2
 80096ec:	4413      	add	r3, r2
 80096ee:	00da      	lsls	r2, r3, #3
 80096f0:	1ad3      	subs	r3, r2, r3
 80096f2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80096f4:	6a3b      	ldr	r3, [r7, #32]
 80096f6:	3b01      	subs	r3, #1
 80096f8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80096fa:	6a3b      	ldr	r3, [r7, #32]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d118      	bne.n	8009732 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	2200      	movs	r2, #0
 8009704:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	2220      	movs	r2, #32
 800970a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	2200      	movs	r2, #0
 8009712:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800971a:	f043 0220 	orr.w	r2, r3, #32
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8009722:	b662      	cpsie	i
}
 8009724:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	2200      	movs	r2, #0
 800972a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800972e:	2301      	movs	r3, #1
 8009730:	e0a6      	b.n	8009880 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	695b      	ldr	r3, [r3, #20]
 8009738:	f003 0304 	and.w	r3, r3, #4
 800973c:	2b04      	cmp	r3, #4
 800973e:	d1d9      	bne.n	80096f4 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	681a      	ldr	r2, [r3, #0]
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800974e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	691a      	ldr	r2, [r3, #16]
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800975a:	b2d2      	uxtb	r2, r2
 800975c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009762:	1c5a      	adds	r2, r3, #1
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800976c:	3b01      	subs	r3, #1
 800976e:	b29a      	uxth	r2, r3
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009778:	b29b      	uxth	r3, r3
 800977a:	3b01      	subs	r3, #1
 800977c:	b29a      	uxth	r2, r3
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8009782:	b662      	cpsie	i
}
 8009784:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	691a      	ldr	r2, [r3, #16]
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009790:	b2d2      	uxtb	r2, r2
 8009792:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009798:	1c5a      	adds	r2, r3, #1
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80097a2:	3b01      	subs	r3, #1
 80097a4:	b29a      	uxth	r2, r3
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097ae:	b29b      	uxth	r3, r3
 80097b0:	3b01      	subs	r3, #1
 80097b2:	b29a      	uxth	r2, r3
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80097b8:	e04e      	b.n	8009858 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80097ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097bc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80097be:	68f8      	ldr	r0, [r7, #12]
 80097c0:	f000 fb62 	bl	8009e88 <I2C_WaitOnRXNEFlagUntilTimeout>
 80097c4:	4603      	mov	r3, r0
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d001      	beq.n	80097ce <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 80097ca:	2301      	movs	r3, #1
 80097cc:	e058      	b.n	8009880 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	691a      	ldr	r2, [r3, #16]
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097d8:	b2d2      	uxtb	r2, r2
 80097da:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097e0:	1c5a      	adds	r2, r3, #1
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80097ea:	3b01      	subs	r3, #1
 80097ec:	b29a      	uxth	r2, r3
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097f6:	b29b      	uxth	r3, r3
 80097f8:	3b01      	subs	r3, #1
 80097fa:	b29a      	uxth	r2, r3
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	695b      	ldr	r3, [r3, #20]
 8009806:	f003 0304 	and.w	r3, r3, #4
 800980a:	2b04      	cmp	r3, #4
 800980c:	d124      	bne.n	8009858 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009812:	2b03      	cmp	r3, #3
 8009814:	d107      	bne.n	8009826 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	681a      	ldr	r2, [r3, #0]
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009824:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	691a      	ldr	r2, [r3, #16]
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009830:	b2d2      	uxtb	r2, r2
 8009832:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009838:	1c5a      	adds	r2, r3, #1
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009842:	3b01      	subs	r3, #1
 8009844:	b29a      	uxth	r2, r3
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800984e:	b29b      	uxth	r3, r3
 8009850:	3b01      	subs	r3, #1
 8009852:	b29a      	uxth	r2, r3
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800985c:	2b00      	cmp	r3, #0
 800985e:	f47f ae88 	bne.w	8009572 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	2220      	movs	r2, #32
 8009866:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	2200      	movs	r2, #0
 800986e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	2200      	movs	r2, #0
 8009876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800987a:	2300      	movs	r3, #0
 800987c:	e000      	b.n	8009880 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 800987e:	2302      	movs	r3, #2
  }
}
 8009880:	4618      	mov	r0, r3
 8009882:	3728      	adds	r7, #40	; 0x28
 8009884:	46bd      	mov	sp, r7
 8009886:	bd80      	pop	{r7, pc}
 8009888:	00010004 	.word	0x00010004
 800988c:	20000490 	.word	0x20000490
 8009890:	14f8b589 	.word	0x14f8b589

08009894 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b088      	sub	sp, #32
 8009898:	af02      	add	r7, sp, #8
 800989a:	60f8      	str	r0, [r7, #12]
 800989c:	607a      	str	r2, [r7, #4]
 800989e:	603b      	str	r3, [r7, #0]
 80098a0:	460b      	mov	r3, r1
 80098a2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098a8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80098aa:	697b      	ldr	r3, [r7, #20]
 80098ac:	2b08      	cmp	r3, #8
 80098ae:	d006      	beq.n	80098be <I2C_MasterRequestWrite+0x2a>
 80098b0:	697b      	ldr	r3, [r7, #20]
 80098b2:	2b01      	cmp	r3, #1
 80098b4:	d003      	beq.n	80098be <I2C_MasterRequestWrite+0x2a>
 80098b6:	697b      	ldr	r3, [r7, #20]
 80098b8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80098bc:	d108      	bne.n	80098d0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	681a      	ldr	r2, [r3, #0]
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80098cc:	601a      	str	r2, [r3, #0]
 80098ce:	e00b      	b.n	80098e8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098d4:	2b12      	cmp	r3, #18
 80098d6:	d107      	bne.n	80098e8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	681a      	ldr	r2, [r3, #0]
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80098e6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80098e8:	683b      	ldr	r3, [r7, #0]
 80098ea:	9300      	str	r3, [sp, #0]
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	2200      	movs	r2, #0
 80098f0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80098f4:	68f8      	ldr	r0, [r7, #12]
 80098f6:	f000 f91d 	bl	8009b34 <I2C_WaitOnFlagUntilTimeout>
 80098fa:	4603      	mov	r3, r0
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d00d      	beq.n	800991c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800990a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800990e:	d103      	bne.n	8009918 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009916:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009918:	2303      	movs	r3, #3
 800991a:	e035      	b.n	8009988 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	691b      	ldr	r3, [r3, #16]
 8009920:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009924:	d108      	bne.n	8009938 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009926:	897b      	ldrh	r3, [r7, #10]
 8009928:	b2db      	uxtb	r3, r3
 800992a:	461a      	mov	r2, r3
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009934:	611a      	str	r2, [r3, #16]
 8009936:	e01b      	b.n	8009970 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009938:	897b      	ldrh	r3, [r7, #10]
 800993a:	11db      	asrs	r3, r3, #7
 800993c:	b2db      	uxtb	r3, r3
 800993e:	f003 0306 	and.w	r3, r3, #6
 8009942:	b2db      	uxtb	r3, r3
 8009944:	f063 030f 	orn	r3, r3, #15
 8009948:	b2da      	uxtb	r2, r3
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8009950:	683b      	ldr	r3, [r7, #0]
 8009952:	687a      	ldr	r2, [r7, #4]
 8009954:	490e      	ldr	r1, [pc, #56]	; (8009990 <I2C_MasterRequestWrite+0xfc>)
 8009956:	68f8      	ldr	r0, [r7, #12]
 8009958:	f000 f966 	bl	8009c28 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800995c:	4603      	mov	r3, r0
 800995e:	2b00      	cmp	r3, #0
 8009960:	d001      	beq.n	8009966 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8009962:	2301      	movs	r3, #1
 8009964:	e010      	b.n	8009988 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8009966:	897b      	ldrh	r3, [r7, #10]
 8009968:	b2da      	uxtb	r2, r3
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009970:	683b      	ldr	r3, [r7, #0]
 8009972:	687a      	ldr	r2, [r7, #4]
 8009974:	4907      	ldr	r1, [pc, #28]	; (8009994 <I2C_MasterRequestWrite+0x100>)
 8009976:	68f8      	ldr	r0, [r7, #12]
 8009978:	f000 f956 	bl	8009c28 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800997c:	4603      	mov	r3, r0
 800997e:	2b00      	cmp	r3, #0
 8009980:	d001      	beq.n	8009986 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8009982:	2301      	movs	r3, #1
 8009984:	e000      	b.n	8009988 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8009986:	2300      	movs	r3, #0
}
 8009988:	4618      	mov	r0, r3
 800998a:	3718      	adds	r7, #24
 800998c:	46bd      	mov	sp, r7
 800998e:	bd80      	pop	{r7, pc}
 8009990:	00010008 	.word	0x00010008
 8009994:	00010002 	.word	0x00010002

08009998 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8009998:	b580      	push	{r7, lr}
 800999a:	b088      	sub	sp, #32
 800999c:	af02      	add	r7, sp, #8
 800999e:	60f8      	str	r0, [r7, #12]
 80099a0:	607a      	str	r2, [r7, #4]
 80099a2:	603b      	str	r3, [r7, #0]
 80099a4:	460b      	mov	r3, r1
 80099a6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099ac:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	681a      	ldr	r2, [r3, #0]
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80099bc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80099be:	697b      	ldr	r3, [r7, #20]
 80099c0:	2b08      	cmp	r3, #8
 80099c2:	d006      	beq.n	80099d2 <I2C_MasterRequestRead+0x3a>
 80099c4:	697b      	ldr	r3, [r7, #20]
 80099c6:	2b01      	cmp	r3, #1
 80099c8:	d003      	beq.n	80099d2 <I2C_MasterRequestRead+0x3a>
 80099ca:	697b      	ldr	r3, [r7, #20]
 80099cc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80099d0:	d108      	bne.n	80099e4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	681a      	ldr	r2, [r3, #0]
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80099e0:	601a      	str	r2, [r3, #0]
 80099e2:	e00b      	b.n	80099fc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099e8:	2b11      	cmp	r3, #17
 80099ea:	d107      	bne.n	80099fc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	681a      	ldr	r2, [r3, #0]
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80099fa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80099fc:	683b      	ldr	r3, [r7, #0]
 80099fe:	9300      	str	r3, [sp, #0]
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	2200      	movs	r2, #0
 8009a04:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009a08:	68f8      	ldr	r0, [r7, #12]
 8009a0a:	f000 f893 	bl	8009b34 <I2C_WaitOnFlagUntilTimeout>
 8009a0e:	4603      	mov	r3, r0
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d00d      	beq.n	8009a30 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a22:	d103      	bne.n	8009a2c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009a2a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009a2c:	2303      	movs	r3, #3
 8009a2e:	e079      	b.n	8009b24 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	691b      	ldr	r3, [r3, #16]
 8009a34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009a38:	d108      	bne.n	8009a4c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8009a3a:	897b      	ldrh	r3, [r7, #10]
 8009a3c:	b2db      	uxtb	r3, r3
 8009a3e:	f043 0301 	orr.w	r3, r3, #1
 8009a42:	b2da      	uxtb	r2, r3
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	611a      	str	r2, [r3, #16]
 8009a4a:	e05f      	b.n	8009b0c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009a4c:	897b      	ldrh	r3, [r7, #10]
 8009a4e:	11db      	asrs	r3, r3, #7
 8009a50:	b2db      	uxtb	r3, r3
 8009a52:	f003 0306 	and.w	r3, r3, #6
 8009a56:	b2db      	uxtb	r3, r3
 8009a58:	f063 030f 	orn	r3, r3, #15
 8009a5c:	b2da      	uxtb	r2, r3
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8009a64:	683b      	ldr	r3, [r7, #0]
 8009a66:	687a      	ldr	r2, [r7, #4]
 8009a68:	4930      	ldr	r1, [pc, #192]	; (8009b2c <I2C_MasterRequestRead+0x194>)
 8009a6a:	68f8      	ldr	r0, [r7, #12]
 8009a6c:	f000 f8dc 	bl	8009c28 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009a70:	4603      	mov	r3, r0
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d001      	beq.n	8009a7a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8009a76:	2301      	movs	r3, #1
 8009a78:	e054      	b.n	8009b24 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8009a7a:	897b      	ldrh	r3, [r7, #10]
 8009a7c:	b2da      	uxtb	r2, r3
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009a84:	683b      	ldr	r3, [r7, #0]
 8009a86:	687a      	ldr	r2, [r7, #4]
 8009a88:	4929      	ldr	r1, [pc, #164]	; (8009b30 <I2C_MasterRequestRead+0x198>)
 8009a8a:	68f8      	ldr	r0, [r7, #12]
 8009a8c:	f000 f8cc 	bl	8009c28 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009a90:	4603      	mov	r3, r0
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d001      	beq.n	8009a9a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8009a96:	2301      	movs	r3, #1
 8009a98:	e044      	b.n	8009b24 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	613b      	str	r3, [r7, #16]
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	695b      	ldr	r3, [r3, #20]
 8009aa4:	613b      	str	r3, [r7, #16]
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	699b      	ldr	r3, [r3, #24]
 8009aac:	613b      	str	r3, [r7, #16]
 8009aae:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	681a      	ldr	r2, [r3, #0]
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009abe:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009ac0:	683b      	ldr	r3, [r7, #0]
 8009ac2:	9300      	str	r3, [sp, #0]
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	2200      	movs	r2, #0
 8009ac8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009acc:	68f8      	ldr	r0, [r7, #12]
 8009ace:	f000 f831 	bl	8009b34 <I2C_WaitOnFlagUntilTimeout>
 8009ad2:	4603      	mov	r3, r0
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d00d      	beq.n	8009af4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ae2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009ae6:	d103      	bne.n	8009af0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009aee:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8009af0:	2303      	movs	r3, #3
 8009af2:	e017      	b.n	8009b24 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8009af4:	897b      	ldrh	r3, [r7, #10]
 8009af6:	11db      	asrs	r3, r3, #7
 8009af8:	b2db      	uxtb	r3, r3
 8009afa:	f003 0306 	and.w	r3, r3, #6
 8009afe:	b2db      	uxtb	r3, r3
 8009b00:	f063 030e 	orn	r3, r3, #14
 8009b04:	b2da      	uxtb	r2, r3
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009b0c:	683b      	ldr	r3, [r7, #0]
 8009b0e:	687a      	ldr	r2, [r7, #4]
 8009b10:	4907      	ldr	r1, [pc, #28]	; (8009b30 <I2C_MasterRequestRead+0x198>)
 8009b12:	68f8      	ldr	r0, [r7, #12]
 8009b14:	f000 f888 	bl	8009c28 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009b18:	4603      	mov	r3, r0
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d001      	beq.n	8009b22 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8009b1e:	2301      	movs	r3, #1
 8009b20:	e000      	b.n	8009b24 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8009b22:	2300      	movs	r3, #0
}
 8009b24:	4618      	mov	r0, r3
 8009b26:	3718      	adds	r7, #24
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	bd80      	pop	{r7, pc}
 8009b2c:	00010008 	.word	0x00010008
 8009b30:	00010002 	.word	0x00010002

08009b34 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009b34:	b580      	push	{r7, lr}
 8009b36:	b084      	sub	sp, #16
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	60f8      	str	r0, [r7, #12]
 8009b3c:	60b9      	str	r1, [r7, #8]
 8009b3e:	603b      	str	r3, [r7, #0]
 8009b40:	4613      	mov	r3, r2
 8009b42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009b44:	e048      	b.n	8009bd8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009b46:	683b      	ldr	r3, [r7, #0]
 8009b48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b4c:	d044      	beq.n	8009bd8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009b4e:	f7fe f833 	bl	8007bb8 <HAL_GetTick>
 8009b52:	4602      	mov	r2, r0
 8009b54:	69bb      	ldr	r3, [r7, #24]
 8009b56:	1ad3      	subs	r3, r2, r3
 8009b58:	683a      	ldr	r2, [r7, #0]
 8009b5a:	429a      	cmp	r2, r3
 8009b5c:	d302      	bcc.n	8009b64 <I2C_WaitOnFlagUntilTimeout+0x30>
 8009b5e:	683b      	ldr	r3, [r7, #0]
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d139      	bne.n	8009bd8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8009b64:	68bb      	ldr	r3, [r7, #8]
 8009b66:	0c1b      	lsrs	r3, r3, #16
 8009b68:	b2db      	uxtb	r3, r3
 8009b6a:	2b01      	cmp	r3, #1
 8009b6c:	d10d      	bne.n	8009b8a <I2C_WaitOnFlagUntilTimeout+0x56>
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	695b      	ldr	r3, [r3, #20]
 8009b74:	43da      	mvns	r2, r3
 8009b76:	68bb      	ldr	r3, [r7, #8]
 8009b78:	4013      	ands	r3, r2
 8009b7a:	b29b      	uxth	r3, r3
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	bf0c      	ite	eq
 8009b80:	2301      	moveq	r3, #1
 8009b82:	2300      	movne	r3, #0
 8009b84:	b2db      	uxtb	r3, r3
 8009b86:	461a      	mov	r2, r3
 8009b88:	e00c      	b.n	8009ba4 <I2C_WaitOnFlagUntilTimeout+0x70>
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	699b      	ldr	r3, [r3, #24]
 8009b90:	43da      	mvns	r2, r3
 8009b92:	68bb      	ldr	r3, [r7, #8]
 8009b94:	4013      	ands	r3, r2
 8009b96:	b29b      	uxth	r3, r3
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	bf0c      	ite	eq
 8009b9c:	2301      	moveq	r3, #1
 8009b9e:	2300      	movne	r3, #0
 8009ba0:	b2db      	uxtb	r3, r3
 8009ba2:	461a      	mov	r2, r3
 8009ba4:	79fb      	ldrb	r3, [r7, #7]
 8009ba6:	429a      	cmp	r2, r3
 8009ba8:	d116      	bne.n	8009bd8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	2200      	movs	r2, #0
 8009bae:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	2220      	movs	r2, #32
 8009bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	2200      	movs	r2, #0
 8009bbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bc4:	f043 0220 	orr.w	r2, r3, #32
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	2200      	movs	r2, #0
 8009bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8009bd4:	2301      	movs	r3, #1
 8009bd6:	e023      	b.n	8009c20 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009bd8:	68bb      	ldr	r3, [r7, #8]
 8009bda:	0c1b      	lsrs	r3, r3, #16
 8009bdc:	b2db      	uxtb	r3, r3
 8009bde:	2b01      	cmp	r3, #1
 8009be0:	d10d      	bne.n	8009bfe <I2C_WaitOnFlagUntilTimeout+0xca>
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	695b      	ldr	r3, [r3, #20]
 8009be8:	43da      	mvns	r2, r3
 8009bea:	68bb      	ldr	r3, [r7, #8]
 8009bec:	4013      	ands	r3, r2
 8009bee:	b29b      	uxth	r3, r3
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	bf0c      	ite	eq
 8009bf4:	2301      	moveq	r3, #1
 8009bf6:	2300      	movne	r3, #0
 8009bf8:	b2db      	uxtb	r3, r3
 8009bfa:	461a      	mov	r2, r3
 8009bfc:	e00c      	b.n	8009c18 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	699b      	ldr	r3, [r3, #24]
 8009c04:	43da      	mvns	r2, r3
 8009c06:	68bb      	ldr	r3, [r7, #8]
 8009c08:	4013      	ands	r3, r2
 8009c0a:	b29b      	uxth	r3, r3
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	bf0c      	ite	eq
 8009c10:	2301      	moveq	r3, #1
 8009c12:	2300      	movne	r3, #0
 8009c14:	b2db      	uxtb	r3, r3
 8009c16:	461a      	mov	r2, r3
 8009c18:	79fb      	ldrb	r3, [r7, #7]
 8009c1a:	429a      	cmp	r2, r3
 8009c1c:	d093      	beq.n	8009b46 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009c1e:	2300      	movs	r3, #0
}
 8009c20:	4618      	mov	r0, r3
 8009c22:	3710      	adds	r7, #16
 8009c24:	46bd      	mov	sp, r7
 8009c26:	bd80      	pop	{r7, pc}

08009c28 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	b084      	sub	sp, #16
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	60f8      	str	r0, [r7, #12]
 8009c30:	60b9      	str	r1, [r7, #8]
 8009c32:	607a      	str	r2, [r7, #4]
 8009c34:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009c36:	e071      	b.n	8009d1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	695b      	ldr	r3, [r3, #20]
 8009c3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009c42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009c46:	d123      	bne.n	8009c90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	681a      	ldr	r2, [r3, #0]
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009c56:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009c60:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	2200      	movs	r2, #0
 8009c66:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	2220      	movs	r2, #32
 8009c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	2200      	movs	r2, #0
 8009c74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c7c:	f043 0204 	orr.w	r2, r3, #4
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	2200      	movs	r2, #0
 8009c88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009c8c:	2301      	movs	r3, #1
 8009c8e:	e067      	b.n	8009d60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c96:	d041      	beq.n	8009d1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009c98:	f7fd ff8e 	bl	8007bb8 <HAL_GetTick>
 8009c9c:	4602      	mov	r2, r0
 8009c9e:	683b      	ldr	r3, [r7, #0]
 8009ca0:	1ad3      	subs	r3, r2, r3
 8009ca2:	687a      	ldr	r2, [r7, #4]
 8009ca4:	429a      	cmp	r2, r3
 8009ca6:	d302      	bcc.n	8009cae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d136      	bne.n	8009d1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8009cae:	68bb      	ldr	r3, [r7, #8]
 8009cb0:	0c1b      	lsrs	r3, r3, #16
 8009cb2:	b2db      	uxtb	r3, r3
 8009cb4:	2b01      	cmp	r3, #1
 8009cb6:	d10c      	bne.n	8009cd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	695b      	ldr	r3, [r3, #20]
 8009cbe:	43da      	mvns	r2, r3
 8009cc0:	68bb      	ldr	r3, [r7, #8]
 8009cc2:	4013      	ands	r3, r2
 8009cc4:	b29b      	uxth	r3, r3
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	bf14      	ite	ne
 8009cca:	2301      	movne	r3, #1
 8009ccc:	2300      	moveq	r3, #0
 8009cce:	b2db      	uxtb	r3, r3
 8009cd0:	e00b      	b.n	8009cea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	699b      	ldr	r3, [r3, #24]
 8009cd8:	43da      	mvns	r2, r3
 8009cda:	68bb      	ldr	r3, [r7, #8]
 8009cdc:	4013      	ands	r3, r2
 8009cde:	b29b      	uxth	r3, r3
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	bf14      	ite	ne
 8009ce4:	2301      	movne	r3, #1
 8009ce6:	2300      	moveq	r3, #0
 8009ce8:	b2db      	uxtb	r3, r3
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d016      	beq.n	8009d1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	2200      	movs	r2, #0
 8009cf2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	2220      	movs	r2, #32
 8009cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	2200      	movs	r2, #0
 8009d00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d08:	f043 0220 	orr.w	r2, r3, #32
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	2200      	movs	r2, #0
 8009d14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8009d18:	2301      	movs	r3, #1
 8009d1a:	e021      	b.n	8009d60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009d1c:	68bb      	ldr	r3, [r7, #8]
 8009d1e:	0c1b      	lsrs	r3, r3, #16
 8009d20:	b2db      	uxtb	r3, r3
 8009d22:	2b01      	cmp	r3, #1
 8009d24:	d10c      	bne.n	8009d40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	695b      	ldr	r3, [r3, #20]
 8009d2c:	43da      	mvns	r2, r3
 8009d2e:	68bb      	ldr	r3, [r7, #8]
 8009d30:	4013      	ands	r3, r2
 8009d32:	b29b      	uxth	r3, r3
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	bf14      	ite	ne
 8009d38:	2301      	movne	r3, #1
 8009d3a:	2300      	moveq	r3, #0
 8009d3c:	b2db      	uxtb	r3, r3
 8009d3e:	e00b      	b.n	8009d58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	699b      	ldr	r3, [r3, #24]
 8009d46:	43da      	mvns	r2, r3
 8009d48:	68bb      	ldr	r3, [r7, #8]
 8009d4a:	4013      	ands	r3, r2
 8009d4c:	b29b      	uxth	r3, r3
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	bf14      	ite	ne
 8009d52:	2301      	movne	r3, #1
 8009d54:	2300      	moveq	r3, #0
 8009d56:	b2db      	uxtb	r3, r3
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	f47f af6d 	bne.w	8009c38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8009d5e:	2300      	movs	r3, #0
}
 8009d60:	4618      	mov	r0, r3
 8009d62:	3710      	adds	r7, #16
 8009d64:	46bd      	mov	sp, r7
 8009d66:	bd80      	pop	{r7, pc}

08009d68 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	b084      	sub	sp, #16
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	60f8      	str	r0, [r7, #12]
 8009d70:	60b9      	str	r1, [r7, #8]
 8009d72:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009d74:	e034      	b.n	8009de0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009d76:	68f8      	ldr	r0, [r7, #12]
 8009d78:	f000 f8e3 	bl	8009f42 <I2C_IsAcknowledgeFailed>
 8009d7c:	4603      	mov	r3, r0
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d001      	beq.n	8009d86 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009d82:	2301      	movs	r3, #1
 8009d84:	e034      	b.n	8009df0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009d86:	68bb      	ldr	r3, [r7, #8]
 8009d88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d8c:	d028      	beq.n	8009de0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009d8e:	f7fd ff13 	bl	8007bb8 <HAL_GetTick>
 8009d92:	4602      	mov	r2, r0
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	1ad3      	subs	r3, r2, r3
 8009d98:	68ba      	ldr	r2, [r7, #8]
 8009d9a:	429a      	cmp	r2, r3
 8009d9c:	d302      	bcc.n	8009da4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8009d9e:	68bb      	ldr	r3, [r7, #8]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d11d      	bne.n	8009de0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	695b      	ldr	r3, [r3, #20]
 8009daa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009dae:	2b80      	cmp	r3, #128	; 0x80
 8009db0:	d016      	beq.n	8009de0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	2200      	movs	r2, #0
 8009db6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	2220      	movs	r2, #32
 8009dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dcc:	f043 0220 	orr.w	r2, r3, #32
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	2200      	movs	r2, #0
 8009dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8009ddc:	2301      	movs	r3, #1
 8009dde:	e007      	b.n	8009df0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	695b      	ldr	r3, [r3, #20]
 8009de6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009dea:	2b80      	cmp	r3, #128	; 0x80
 8009dec:	d1c3      	bne.n	8009d76 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009dee:	2300      	movs	r3, #0
}
 8009df0:	4618      	mov	r0, r3
 8009df2:	3710      	adds	r7, #16
 8009df4:	46bd      	mov	sp, r7
 8009df6:	bd80      	pop	{r7, pc}

08009df8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	b084      	sub	sp, #16
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	60f8      	str	r0, [r7, #12]
 8009e00:	60b9      	str	r1, [r7, #8]
 8009e02:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009e04:	e034      	b.n	8009e70 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009e06:	68f8      	ldr	r0, [r7, #12]
 8009e08:	f000 f89b 	bl	8009f42 <I2C_IsAcknowledgeFailed>
 8009e0c:	4603      	mov	r3, r0
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d001      	beq.n	8009e16 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009e12:	2301      	movs	r3, #1
 8009e14:	e034      	b.n	8009e80 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009e16:	68bb      	ldr	r3, [r7, #8]
 8009e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e1c:	d028      	beq.n	8009e70 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009e1e:	f7fd fecb 	bl	8007bb8 <HAL_GetTick>
 8009e22:	4602      	mov	r2, r0
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	1ad3      	subs	r3, r2, r3
 8009e28:	68ba      	ldr	r2, [r7, #8]
 8009e2a:	429a      	cmp	r2, r3
 8009e2c:	d302      	bcc.n	8009e34 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8009e2e:	68bb      	ldr	r3, [r7, #8]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d11d      	bne.n	8009e70 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	695b      	ldr	r3, [r3, #20]
 8009e3a:	f003 0304 	and.w	r3, r3, #4
 8009e3e:	2b04      	cmp	r3, #4
 8009e40:	d016      	beq.n	8009e70 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	2200      	movs	r2, #0
 8009e46:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	2220      	movs	r2, #32
 8009e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	2200      	movs	r2, #0
 8009e54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e5c:	f043 0220 	orr.w	r2, r3, #32
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	2200      	movs	r2, #0
 8009e68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8009e6c:	2301      	movs	r3, #1
 8009e6e:	e007      	b.n	8009e80 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	695b      	ldr	r3, [r3, #20]
 8009e76:	f003 0304 	and.w	r3, r3, #4
 8009e7a:	2b04      	cmp	r3, #4
 8009e7c:	d1c3      	bne.n	8009e06 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009e7e:	2300      	movs	r3, #0
}
 8009e80:	4618      	mov	r0, r3
 8009e82:	3710      	adds	r7, #16
 8009e84:	46bd      	mov	sp, r7
 8009e86:	bd80      	pop	{r7, pc}

08009e88 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b084      	sub	sp, #16
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	60f8      	str	r0, [r7, #12]
 8009e90:	60b9      	str	r1, [r7, #8]
 8009e92:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009e94:	e049      	b.n	8009f2a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	695b      	ldr	r3, [r3, #20]
 8009e9c:	f003 0310 	and.w	r3, r3, #16
 8009ea0:	2b10      	cmp	r3, #16
 8009ea2:	d119      	bne.n	8009ed8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	f06f 0210 	mvn.w	r2, #16
 8009eac:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	2200      	movs	r2, #0
 8009eb2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	2220      	movs	r2, #32
 8009eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	2200      	movs	r2, #0
 8009ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009ed4:	2301      	movs	r3, #1
 8009ed6:	e030      	b.n	8009f3a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009ed8:	f7fd fe6e 	bl	8007bb8 <HAL_GetTick>
 8009edc:	4602      	mov	r2, r0
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	1ad3      	subs	r3, r2, r3
 8009ee2:	68ba      	ldr	r2, [r7, #8]
 8009ee4:	429a      	cmp	r2, r3
 8009ee6:	d302      	bcc.n	8009eee <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8009ee8:	68bb      	ldr	r3, [r7, #8]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d11d      	bne.n	8009f2a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	695b      	ldr	r3, [r3, #20]
 8009ef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ef8:	2b40      	cmp	r3, #64	; 0x40
 8009efa:	d016      	beq.n	8009f2a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	2200      	movs	r2, #0
 8009f00:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	2220      	movs	r2, #32
 8009f06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	2200      	movs	r2, #0
 8009f0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f16:	f043 0220 	orr.w	r2, r3, #32
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	2200      	movs	r2, #0
 8009f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009f26:	2301      	movs	r3, #1
 8009f28:	e007      	b.n	8009f3a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	695b      	ldr	r3, [r3, #20]
 8009f30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f34:	2b40      	cmp	r3, #64	; 0x40
 8009f36:	d1ae      	bne.n	8009e96 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009f38:	2300      	movs	r3, #0
}
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	3710      	adds	r7, #16
 8009f3e:	46bd      	mov	sp, r7
 8009f40:	bd80      	pop	{r7, pc}

08009f42 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8009f42:	b480      	push	{r7}
 8009f44:	b083      	sub	sp, #12
 8009f46:	af00      	add	r7, sp, #0
 8009f48:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	695b      	ldr	r3, [r3, #20]
 8009f50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009f54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009f58:	d11b      	bne.n	8009f92 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009f62:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	2200      	movs	r2, #0
 8009f68:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	2220      	movs	r2, #32
 8009f6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	2200      	movs	r2, #0
 8009f76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f7e:	f043 0204 	orr.w	r2, r3, #4
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	2200      	movs	r2, #0
 8009f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8009f8e:	2301      	movs	r3, #1
 8009f90:	e000      	b.n	8009f94 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8009f92:	2300      	movs	r3, #0
}
 8009f94:	4618      	mov	r0, r3
 8009f96:	370c      	adds	r7, #12
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	bc80      	pop	{r7}
 8009f9c:	4770      	bx	lr
	...

08009fa0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009fa0:	b580      	push	{r7, lr}
 8009fa2:	b086      	sub	sp, #24
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d101      	bne.n	8009fb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009fae:	2301      	movs	r3, #1
 8009fb0:	e272      	b.n	800a498 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	f003 0301 	and.w	r3, r3, #1
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	f000 8087 	beq.w	800a0ce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8009fc0:	4b92      	ldr	r3, [pc, #584]	; (800a20c <HAL_RCC_OscConfig+0x26c>)
 8009fc2:	685b      	ldr	r3, [r3, #4]
 8009fc4:	f003 030c 	and.w	r3, r3, #12
 8009fc8:	2b04      	cmp	r3, #4
 8009fca:	d00c      	beq.n	8009fe6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8009fcc:	4b8f      	ldr	r3, [pc, #572]	; (800a20c <HAL_RCC_OscConfig+0x26c>)
 8009fce:	685b      	ldr	r3, [r3, #4]
 8009fd0:	f003 030c 	and.w	r3, r3, #12
 8009fd4:	2b08      	cmp	r3, #8
 8009fd6:	d112      	bne.n	8009ffe <HAL_RCC_OscConfig+0x5e>
 8009fd8:	4b8c      	ldr	r3, [pc, #560]	; (800a20c <HAL_RCC_OscConfig+0x26c>)
 8009fda:	685b      	ldr	r3, [r3, #4]
 8009fdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009fe0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009fe4:	d10b      	bne.n	8009ffe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009fe6:	4b89      	ldr	r3, [pc, #548]	; (800a20c <HAL_RCC_OscConfig+0x26c>)
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d06c      	beq.n	800a0cc <HAL_RCC_OscConfig+0x12c>
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	685b      	ldr	r3, [r3, #4]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d168      	bne.n	800a0cc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8009ffa:	2301      	movs	r3, #1
 8009ffc:	e24c      	b.n	800a498 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	685b      	ldr	r3, [r3, #4]
 800a002:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a006:	d106      	bne.n	800a016 <HAL_RCC_OscConfig+0x76>
 800a008:	4b80      	ldr	r3, [pc, #512]	; (800a20c <HAL_RCC_OscConfig+0x26c>)
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	4a7f      	ldr	r2, [pc, #508]	; (800a20c <HAL_RCC_OscConfig+0x26c>)
 800a00e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a012:	6013      	str	r3, [r2, #0]
 800a014:	e02e      	b.n	800a074 <HAL_RCC_OscConfig+0xd4>
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	685b      	ldr	r3, [r3, #4]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d10c      	bne.n	800a038 <HAL_RCC_OscConfig+0x98>
 800a01e:	4b7b      	ldr	r3, [pc, #492]	; (800a20c <HAL_RCC_OscConfig+0x26c>)
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	4a7a      	ldr	r2, [pc, #488]	; (800a20c <HAL_RCC_OscConfig+0x26c>)
 800a024:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a028:	6013      	str	r3, [r2, #0]
 800a02a:	4b78      	ldr	r3, [pc, #480]	; (800a20c <HAL_RCC_OscConfig+0x26c>)
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	4a77      	ldr	r2, [pc, #476]	; (800a20c <HAL_RCC_OscConfig+0x26c>)
 800a030:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a034:	6013      	str	r3, [r2, #0]
 800a036:	e01d      	b.n	800a074 <HAL_RCC_OscConfig+0xd4>
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	685b      	ldr	r3, [r3, #4]
 800a03c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a040:	d10c      	bne.n	800a05c <HAL_RCC_OscConfig+0xbc>
 800a042:	4b72      	ldr	r3, [pc, #456]	; (800a20c <HAL_RCC_OscConfig+0x26c>)
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	4a71      	ldr	r2, [pc, #452]	; (800a20c <HAL_RCC_OscConfig+0x26c>)
 800a048:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a04c:	6013      	str	r3, [r2, #0]
 800a04e:	4b6f      	ldr	r3, [pc, #444]	; (800a20c <HAL_RCC_OscConfig+0x26c>)
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	4a6e      	ldr	r2, [pc, #440]	; (800a20c <HAL_RCC_OscConfig+0x26c>)
 800a054:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a058:	6013      	str	r3, [r2, #0]
 800a05a:	e00b      	b.n	800a074 <HAL_RCC_OscConfig+0xd4>
 800a05c:	4b6b      	ldr	r3, [pc, #428]	; (800a20c <HAL_RCC_OscConfig+0x26c>)
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	4a6a      	ldr	r2, [pc, #424]	; (800a20c <HAL_RCC_OscConfig+0x26c>)
 800a062:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a066:	6013      	str	r3, [r2, #0]
 800a068:	4b68      	ldr	r3, [pc, #416]	; (800a20c <HAL_RCC_OscConfig+0x26c>)
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	4a67      	ldr	r2, [pc, #412]	; (800a20c <HAL_RCC_OscConfig+0x26c>)
 800a06e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a072:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	685b      	ldr	r3, [r3, #4]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d013      	beq.n	800a0a4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a07c:	f7fd fd9c 	bl	8007bb8 <HAL_GetTick>
 800a080:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a082:	e008      	b.n	800a096 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a084:	f7fd fd98 	bl	8007bb8 <HAL_GetTick>
 800a088:	4602      	mov	r2, r0
 800a08a:	693b      	ldr	r3, [r7, #16]
 800a08c:	1ad3      	subs	r3, r2, r3
 800a08e:	2b64      	cmp	r3, #100	; 0x64
 800a090:	d901      	bls.n	800a096 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800a092:	2303      	movs	r3, #3
 800a094:	e200      	b.n	800a498 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a096:	4b5d      	ldr	r3, [pc, #372]	; (800a20c <HAL_RCC_OscConfig+0x26c>)
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d0f0      	beq.n	800a084 <HAL_RCC_OscConfig+0xe4>
 800a0a2:	e014      	b.n	800a0ce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a0a4:	f7fd fd88 	bl	8007bb8 <HAL_GetTick>
 800a0a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a0aa:	e008      	b.n	800a0be <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a0ac:	f7fd fd84 	bl	8007bb8 <HAL_GetTick>
 800a0b0:	4602      	mov	r2, r0
 800a0b2:	693b      	ldr	r3, [r7, #16]
 800a0b4:	1ad3      	subs	r3, r2, r3
 800a0b6:	2b64      	cmp	r3, #100	; 0x64
 800a0b8:	d901      	bls.n	800a0be <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800a0ba:	2303      	movs	r3, #3
 800a0bc:	e1ec      	b.n	800a498 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a0be:	4b53      	ldr	r3, [pc, #332]	; (800a20c <HAL_RCC_OscConfig+0x26c>)
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d1f0      	bne.n	800a0ac <HAL_RCC_OscConfig+0x10c>
 800a0ca:	e000      	b.n	800a0ce <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a0cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	f003 0302 	and.w	r3, r3, #2
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d063      	beq.n	800a1a2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a0da:	4b4c      	ldr	r3, [pc, #304]	; (800a20c <HAL_RCC_OscConfig+0x26c>)
 800a0dc:	685b      	ldr	r3, [r3, #4]
 800a0de:	f003 030c 	and.w	r3, r3, #12
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d00b      	beq.n	800a0fe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800a0e6:	4b49      	ldr	r3, [pc, #292]	; (800a20c <HAL_RCC_OscConfig+0x26c>)
 800a0e8:	685b      	ldr	r3, [r3, #4]
 800a0ea:	f003 030c 	and.w	r3, r3, #12
 800a0ee:	2b08      	cmp	r3, #8
 800a0f0:	d11c      	bne.n	800a12c <HAL_RCC_OscConfig+0x18c>
 800a0f2:	4b46      	ldr	r3, [pc, #280]	; (800a20c <HAL_RCC_OscConfig+0x26c>)
 800a0f4:	685b      	ldr	r3, [r3, #4]
 800a0f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d116      	bne.n	800a12c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a0fe:	4b43      	ldr	r3, [pc, #268]	; (800a20c <HAL_RCC_OscConfig+0x26c>)
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	f003 0302 	and.w	r3, r3, #2
 800a106:	2b00      	cmp	r3, #0
 800a108:	d005      	beq.n	800a116 <HAL_RCC_OscConfig+0x176>
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	691b      	ldr	r3, [r3, #16]
 800a10e:	2b01      	cmp	r3, #1
 800a110:	d001      	beq.n	800a116 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800a112:	2301      	movs	r3, #1
 800a114:	e1c0      	b.n	800a498 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a116:	4b3d      	ldr	r3, [pc, #244]	; (800a20c <HAL_RCC_OscConfig+0x26c>)
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	695b      	ldr	r3, [r3, #20]
 800a122:	00db      	lsls	r3, r3, #3
 800a124:	4939      	ldr	r1, [pc, #228]	; (800a20c <HAL_RCC_OscConfig+0x26c>)
 800a126:	4313      	orrs	r3, r2
 800a128:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a12a:	e03a      	b.n	800a1a2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	691b      	ldr	r3, [r3, #16]
 800a130:	2b00      	cmp	r3, #0
 800a132:	d020      	beq.n	800a176 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a134:	4b36      	ldr	r3, [pc, #216]	; (800a210 <HAL_RCC_OscConfig+0x270>)
 800a136:	2201      	movs	r2, #1
 800a138:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a13a:	f7fd fd3d 	bl	8007bb8 <HAL_GetTick>
 800a13e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a140:	e008      	b.n	800a154 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a142:	f7fd fd39 	bl	8007bb8 <HAL_GetTick>
 800a146:	4602      	mov	r2, r0
 800a148:	693b      	ldr	r3, [r7, #16]
 800a14a:	1ad3      	subs	r3, r2, r3
 800a14c:	2b02      	cmp	r3, #2
 800a14e:	d901      	bls.n	800a154 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800a150:	2303      	movs	r3, #3
 800a152:	e1a1      	b.n	800a498 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a154:	4b2d      	ldr	r3, [pc, #180]	; (800a20c <HAL_RCC_OscConfig+0x26c>)
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	f003 0302 	and.w	r3, r3, #2
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d0f0      	beq.n	800a142 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a160:	4b2a      	ldr	r3, [pc, #168]	; (800a20c <HAL_RCC_OscConfig+0x26c>)
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	695b      	ldr	r3, [r3, #20]
 800a16c:	00db      	lsls	r3, r3, #3
 800a16e:	4927      	ldr	r1, [pc, #156]	; (800a20c <HAL_RCC_OscConfig+0x26c>)
 800a170:	4313      	orrs	r3, r2
 800a172:	600b      	str	r3, [r1, #0]
 800a174:	e015      	b.n	800a1a2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a176:	4b26      	ldr	r3, [pc, #152]	; (800a210 <HAL_RCC_OscConfig+0x270>)
 800a178:	2200      	movs	r2, #0
 800a17a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a17c:	f7fd fd1c 	bl	8007bb8 <HAL_GetTick>
 800a180:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a182:	e008      	b.n	800a196 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a184:	f7fd fd18 	bl	8007bb8 <HAL_GetTick>
 800a188:	4602      	mov	r2, r0
 800a18a:	693b      	ldr	r3, [r7, #16]
 800a18c:	1ad3      	subs	r3, r2, r3
 800a18e:	2b02      	cmp	r3, #2
 800a190:	d901      	bls.n	800a196 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800a192:	2303      	movs	r3, #3
 800a194:	e180      	b.n	800a498 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a196:	4b1d      	ldr	r3, [pc, #116]	; (800a20c <HAL_RCC_OscConfig+0x26c>)
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	f003 0302 	and.w	r3, r3, #2
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d1f0      	bne.n	800a184 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	f003 0308 	and.w	r3, r3, #8
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d03a      	beq.n	800a224 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	699b      	ldr	r3, [r3, #24]
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d019      	beq.n	800a1ea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a1b6:	4b17      	ldr	r3, [pc, #92]	; (800a214 <HAL_RCC_OscConfig+0x274>)
 800a1b8:	2201      	movs	r2, #1
 800a1ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a1bc:	f7fd fcfc 	bl	8007bb8 <HAL_GetTick>
 800a1c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a1c2:	e008      	b.n	800a1d6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a1c4:	f7fd fcf8 	bl	8007bb8 <HAL_GetTick>
 800a1c8:	4602      	mov	r2, r0
 800a1ca:	693b      	ldr	r3, [r7, #16]
 800a1cc:	1ad3      	subs	r3, r2, r3
 800a1ce:	2b02      	cmp	r3, #2
 800a1d0:	d901      	bls.n	800a1d6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800a1d2:	2303      	movs	r3, #3
 800a1d4:	e160      	b.n	800a498 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a1d6:	4b0d      	ldr	r3, [pc, #52]	; (800a20c <HAL_RCC_OscConfig+0x26c>)
 800a1d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1da:	f003 0302 	and.w	r3, r3, #2
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d0f0      	beq.n	800a1c4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800a1e2:	2001      	movs	r0, #1
 800a1e4:	f000 face 	bl	800a784 <RCC_Delay>
 800a1e8:	e01c      	b.n	800a224 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a1ea:	4b0a      	ldr	r3, [pc, #40]	; (800a214 <HAL_RCC_OscConfig+0x274>)
 800a1ec:	2200      	movs	r2, #0
 800a1ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a1f0:	f7fd fce2 	bl	8007bb8 <HAL_GetTick>
 800a1f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a1f6:	e00f      	b.n	800a218 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a1f8:	f7fd fcde 	bl	8007bb8 <HAL_GetTick>
 800a1fc:	4602      	mov	r2, r0
 800a1fe:	693b      	ldr	r3, [r7, #16]
 800a200:	1ad3      	subs	r3, r2, r3
 800a202:	2b02      	cmp	r3, #2
 800a204:	d908      	bls.n	800a218 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800a206:	2303      	movs	r3, #3
 800a208:	e146      	b.n	800a498 <HAL_RCC_OscConfig+0x4f8>
 800a20a:	bf00      	nop
 800a20c:	40021000 	.word	0x40021000
 800a210:	42420000 	.word	0x42420000
 800a214:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a218:	4b92      	ldr	r3, [pc, #584]	; (800a464 <HAL_RCC_OscConfig+0x4c4>)
 800a21a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a21c:	f003 0302 	and.w	r3, r3, #2
 800a220:	2b00      	cmp	r3, #0
 800a222:	d1e9      	bne.n	800a1f8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	f003 0304 	and.w	r3, r3, #4
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	f000 80a6 	beq.w	800a37e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a232:	2300      	movs	r3, #0
 800a234:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a236:	4b8b      	ldr	r3, [pc, #556]	; (800a464 <HAL_RCC_OscConfig+0x4c4>)
 800a238:	69db      	ldr	r3, [r3, #28]
 800a23a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d10d      	bne.n	800a25e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a242:	4b88      	ldr	r3, [pc, #544]	; (800a464 <HAL_RCC_OscConfig+0x4c4>)
 800a244:	69db      	ldr	r3, [r3, #28]
 800a246:	4a87      	ldr	r2, [pc, #540]	; (800a464 <HAL_RCC_OscConfig+0x4c4>)
 800a248:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a24c:	61d3      	str	r3, [r2, #28]
 800a24e:	4b85      	ldr	r3, [pc, #532]	; (800a464 <HAL_RCC_OscConfig+0x4c4>)
 800a250:	69db      	ldr	r3, [r3, #28]
 800a252:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a256:	60bb      	str	r3, [r7, #8]
 800a258:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a25a:	2301      	movs	r3, #1
 800a25c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a25e:	4b82      	ldr	r3, [pc, #520]	; (800a468 <HAL_RCC_OscConfig+0x4c8>)
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a266:	2b00      	cmp	r3, #0
 800a268:	d118      	bne.n	800a29c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a26a:	4b7f      	ldr	r3, [pc, #508]	; (800a468 <HAL_RCC_OscConfig+0x4c8>)
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	4a7e      	ldr	r2, [pc, #504]	; (800a468 <HAL_RCC_OscConfig+0x4c8>)
 800a270:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a274:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a276:	f7fd fc9f 	bl	8007bb8 <HAL_GetTick>
 800a27a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a27c:	e008      	b.n	800a290 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a27e:	f7fd fc9b 	bl	8007bb8 <HAL_GetTick>
 800a282:	4602      	mov	r2, r0
 800a284:	693b      	ldr	r3, [r7, #16]
 800a286:	1ad3      	subs	r3, r2, r3
 800a288:	2b64      	cmp	r3, #100	; 0x64
 800a28a:	d901      	bls.n	800a290 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800a28c:	2303      	movs	r3, #3
 800a28e:	e103      	b.n	800a498 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a290:	4b75      	ldr	r3, [pc, #468]	; (800a468 <HAL_RCC_OscConfig+0x4c8>)
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d0f0      	beq.n	800a27e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	68db      	ldr	r3, [r3, #12]
 800a2a0:	2b01      	cmp	r3, #1
 800a2a2:	d106      	bne.n	800a2b2 <HAL_RCC_OscConfig+0x312>
 800a2a4:	4b6f      	ldr	r3, [pc, #444]	; (800a464 <HAL_RCC_OscConfig+0x4c4>)
 800a2a6:	6a1b      	ldr	r3, [r3, #32]
 800a2a8:	4a6e      	ldr	r2, [pc, #440]	; (800a464 <HAL_RCC_OscConfig+0x4c4>)
 800a2aa:	f043 0301 	orr.w	r3, r3, #1
 800a2ae:	6213      	str	r3, [r2, #32]
 800a2b0:	e02d      	b.n	800a30e <HAL_RCC_OscConfig+0x36e>
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	68db      	ldr	r3, [r3, #12]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d10c      	bne.n	800a2d4 <HAL_RCC_OscConfig+0x334>
 800a2ba:	4b6a      	ldr	r3, [pc, #424]	; (800a464 <HAL_RCC_OscConfig+0x4c4>)
 800a2bc:	6a1b      	ldr	r3, [r3, #32]
 800a2be:	4a69      	ldr	r2, [pc, #420]	; (800a464 <HAL_RCC_OscConfig+0x4c4>)
 800a2c0:	f023 0301 	bic.w	r3, r3, #1
 800a2c4:	6213      	str	r3, [r2, #32]
 800a2c6:	4b67      	ldr	r3, [pc, #412]	; (800a464 <HAL_RCC_OscConfig+0x4c4>)
 800a2c8:	6a1b      	ldr	r3, [r3, #32]
 800a2ca:	4a66      	ldr	r2, [pc, #408]	; (800a464 <HAL_RCC_OscConfig+0x4c4>)
 800a2cc:	f023 0304 	bic.w	r3, r3, #4
 800a2d0:	6213      	str	r3, [r2, #32]
 800a2d2:	e01c      	b.n	800a30e <HAL_RCC_OscConfig+0x36e>
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	68db      	ldr	r3, [r3, #12]
 800a2d8:	2b05      	cmp	r3, #5
 800a2da:	d10c      	bne.n	800a2f6 <HAL_RCC_OscConfig+0x356>
 800a2dc:	4b61      	ldr	r3, [pc, #388]	; (800a464 <HAL_RCC_OscConfig+0x4c4>)
 800a2de:	6a1b      	ldr	r3, [r3, #32]
 800a2e0:	4a60      	ldr	r2, [pc, #384]	; (800a464 <HAL_RCC_OscConfig+0x4c4>)
 800a2e2:	f043 0304 	orr.w	r3, r3, #4
 800a2e6:	6213      	str	r3, [r2, #32]
 800a2e8:	4b5e      	ldr	r3, [pc, #376]	; (800a464 <HAL_RCC_OscConfig+0x4c4>)
 800a2ea:	6a1b      	ldr	r3, [r3, #32]
 800a2ec:	4a5d      	ldr	r2, [pc, #372]	; (800a464 <HAL_RCC_OscConfig+0x4c4>)
 800a2ee:	f043 0301 	orr.w	r3, r3, #1
 800a2f2:	6213      	str	r3, [r2, #32]
 800a2f4:	e00b      	b.n	800a30e <HAL_RCC_OscConfig+0x36e>
 800a2f6:	4b5b      	ldr	r3, [pc, #364]	; (800a464 <HAL_RCC_OscConfig+0x4c4>)
 800a2f8:	6a1b      	ldr	r3, [r3, #32]
 800a2fa:	4a5a      	ldr	r2, [pc, #360]	; (800a464 <HAL_RCC_OscConfig+0x4c4>)
 800a2fc:	f023 0301 	bic.w	r3, r3, #1
 800a300:	6213      	str	r3, [r2, #32]
 800a302:	4b58      	ldr	r3, [pc, #352]	; (800a464 <HAL_RCC_OscConfig+0x4c4>)
 800a304:	6a1b      	ldr	r3, [r3, #32]
 800a306:	4a57      	ldr	r2, [pc, #348]	; (800a464 <HAL_RCC_OscConfig+0x4c4>)
 800a308:	f023 0304 	bic.w	r3, r3, #4
 800a30c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	68db      	ldr	r3, [r3, #12]
 800a312:	2b00      	cmp	r3, #0
 800a314:	d015      	beq.n	800a342 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a316:	f7fd fc4f 	bl	8007bb8 <HAL_GetTick>
 800a31a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a31c:	e00a      	b.n	800a334 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a31e:	f7fd fc4b 	bl	8007bb8 <HAL_GetTick>
 800a322:	4602      	mov	r2, r0
 800a324:	693b      	ldr	r3, [r7, #16]
 800a326:	1ad3      	subs	r3, r2, r3
 800a328:	f241 3288 	movw	r2, #5000	; 0x1388
 800a32c:	4293      	cmp	r3, r2
 800a32e:	d901      	bls.n	800a334 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800a330:	2303      	movs	r3, #3
 800a332:	e0b1      	b.n	800a498 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a334:	4b4b      	ldr	r3, [pc, #300]	; (800a464 <HAL_RCC_OscConfig+0x4c4>)
 800a336:	6a1b      	ldr	r3, [r3, #32]
 800a338:	f003 0302 	and.w	r3, r3, #2
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d0ee      	beq.n	800a31e <HAL_RCC_OscConfig+0x37e>
 800a340:	e014      	b.n	800a36c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a342:	f7fd fc39 	bl	8007bb8 <HAL_GetTick>
 800a346:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a348:	e00a      	b.n	800a360 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a34a:	f7fd fc35 	bl	8007bb8 <HAL_GetTick>
 800a34e:	4602      	mov	r2, r0
 800a350:	693b      	ldr	r3, [r7, #16]
 800a352:	1ad3      	subs	r3, r2, r3
 800a354:	f241 3288 	movw	r2, #5000	; 0x1388
 800a358:	4293      	cmp	r3, r2
 800a35a:	d901      	bls.n	800a360 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800a35c:	2303      	movs	r3, #3
 800a35e:	e09b      	b.n	800a498 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a360:	4b40      	ldr	r3, [pc, #256]	; (800a464 <HAL_RCC_OscConfig+0x4c4>)
 800a362:	6a1b      	ldr	r3, [r3, #32]
 800a364:	f003 0302 	and.w	r3, r3, #2
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d1ee      	bne.n	800a34a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800a36c:	7dfb      	ldrb	r3, [r7, #23]
 800a36e:	2b01      	cmp	r3, #1
 800a370:	d105      	bne.n	800a37e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a372:	4b3c      	ldr	r3, [pc, #240]	; (800a464 <HAL_RCC_OscConfig+0x4c4>)
 800a374:	69db      	ldr	r3, [r3, #28]
 800a376:	4a3b      	ldr	r2, [pc, #236]	; (800a464 <HAL_RCC_OscConfig+0x4c4>)
 800a378:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a37c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	69db      	ldr	r3, [r3, #28]
 800a382:	2b00      	cmp	r3, #0
 800a384:	f000 8087 	beq.w	800a496 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a388:	4b36      	ldr	r3, [pc, #216]	; (800a464 <HAL_RCC_OscConfig+0x4c4>)
 800a38a:	685b      	ldr	r3, [r3, #4]
 800a38c:	f003 030c 	and.w	r3, r3, #12
 800a390:	2b08      	cmp	r3, #8
 800a392:	d061      	beq.n	800a458 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	69db      	ldr	r3, [r3, #28]
 800a398:	2b02      	cmp	r3, #2
 800a39a:	d146      	bne.n	800a42a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a39c:	4b33      	ldr	r3, [pc, #204]	; (800a46c <HAL_RCC_OscConfig+0x4cc>)
 800a39e:	2200      	movs	r2, #0
 800a3a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a3a2:	f7fd fc09 	bl	8007bb8 <HAL_GetTick>
 800a3a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a3a8:	e008      	b.n	800a3bc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a3aa:	f7fd fc05 	bl	8007bb8 <HAL_GetTick>
 800a3ae:	4602      	mov	r2, r0
 800a3b0:	693b      	ldr	r3, [r7, #16]
 800a3b2:	1ad3      	subs	r3, r2, r3
 800a3b4:	2b02      	cmp	r3, #2
 800a3b6:	d901      	bls.n	800a3bc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800a3b8:	2303      	movs	r3, #3
 800a3ba:	e06d      	b.n	800a498 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a3bc:	4b29      	ldr	r3, [pc, #164]	; (800a464 <HAL_RCC_OscConfig+0x4c4>)
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d1f0      	bne.n	800a3aa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	6a1b      	ldr	r3, [r3, #32]
 800a3cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a3d0:	d108      	bne.n	800a3e4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800a3d2:	4b24      	ldr	r3, [pc, #144]	; (800a464 <HAL_RCC_OscConfig+0x4c4>)
 800a3d4:	685b      	ldr	r3, [r3, #4]
 800a3d6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	689b      	ldr	r3, [r3, #8]
 800a3de:	4921      	ldr	r1, [pc, #132]	; (800a464 <HAL_RCC_OscConfig+0x4c4>)
 800a3e0:	4313      	orrs	r3, r2
 800a3e2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a3e4:	4b1f      	ldr	r3, [pc, #124]	; (800a464 <HAL_RCC_OscConfig+0x4c4>)
 800a3e6:	685b      	ldr	r3, [r3, #4]
 800a3e8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	6a19      	ldr	r1, [r3, #32]
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3f4:	430b      	orrs	r3, r1
 800a3f6:	491b      	ldr	r1, [pc, #108]	; (800a464 <HAL_RCC_OscConfig+0x4c4>)
 800a3f8:	4313      	orrs	r3, r2
 800a3fa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a3fc:	4b1b      	ldr	r3, [pc, #108]	; (800a46c <HAL_RCC_OscConfig+0x4cc>)
 800a3fe:	2201      	movs	r2, #1
 800a400:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a402:	f7fd fbd9 	bl	8007bb8 <HAL_GetTick>
 800a406:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800a408:	e008      	b.n	800a41c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a40a:	f7fd fbd5 	bl	8007bb8 <HAL_GetTick>
 800a40e:	4602      	mov	r2, r0
 800a410:	693b      	ldr	r3, [r7, #16]
 800a412:	1ad3      	subs	r3, r2, r3
 800a414:	2b02      	cmp	r3, #2
 800a416:	d901      	bls.n	800a41c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800a418:	2303      	movs	r3, #3
 800a41a:	e03d      	b.n	800a498 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800a41c:	4b11      	ldr	r3, [pc, #68]	; (800a464 <HAL_RCC_OscConfig+0x4c4>)
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a424:	2b00      	cmp	r3, #0
 800a426:	d0f0      	beq.n	800a40a <HAL_RCC_OscConfig+0x46a>
 800a428:	e035      	b.n	800a496 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a42a:	4b10      	ldr	r3, [pc, #64]	; (800a46c <HAL_RCC_OscConfig+0x4cc>)
 800a42c:	2200      	movs	r2, #0
 800a42e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a430:	f7fd fbc2 	bl	8007bb8 <HAL_GetTick>
 800a434:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a436:	e008      	b.n	800a44a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a438:	f7fd fbbe 	bl	8007bb8 <HAL_GetTick>
 800a43c:	4602      	mov	r2, r0
 800a43e:	693b      	ldr	r3, [r7, #16]
 800a440:	1ad3      	subs	r3, r2, r3
 800a442:	2b02      	cmp	r3, #2
 800a444:	d901      	bls.n	800a44a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800a446:	2303      	movs	r3, #3
 800a448:	e026      	b.n	800a498 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a44a:	4b06      	ldr	r3, [pc, #24]	; (800a464 <HAL_RCC_OscConfig+0x4c4>)
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a452:	2b00      	cmp	r3, #0
 800a454:	d1f0      	bne.n	800a438 <HAL_RCC_OscConfig+0x498>
 800a456:	e01e      	b.n	800a496 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	69db      	ldr	r3, [r3, #28]
 800a45c:	2b01      	cmp	r3, #1
 800a45e:	d107      	bne.n	800a470 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800a460:	2301      	movs	r3, #1
 800a462:	e019      	b.n	800a498 <HAL_RCC_OscConfig+0x4f8>
 800a464:	40021000 	.word	0x40021000
 800a468:	40007000 	.word	0x40007000
 800a46c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800a470:	4b0b      	ldr	r3, [pc, #44]	; (800a4a0 <HAL_RCC_OscConfig+0x500>)
 800a472:	685b      	ldr	r3, [r3, #4]
 800a474:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	6a1b      	ldr	r3, [r3, #32]
 800a480:	429a      	cmp	r2, r3
 800a482:	d106      	bne.n	800a492 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a48e:	429a      	cmp	r2, r3
 800a490:	d001      	beq.n	800a496 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800a492:	2301      	movs	r3, #1
 800a494:	e000      	b.n	800a498 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800a496:	2300      	movs	r3, #0
}
 800a498:	4618      	mov	r0, r3
 800a49a:	3718      	adds	r7, #24
 800a49c:	46bd      	mov	sp, r7
 800a49e:	bd80      	pop	{r7, pc}
 800a4a0:	40021000 	.word	0x40021000

0800a4a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a4a4:	b580      	push	{r7, lr}
 800a4a6:	b084      	sub	sp, #16
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	6078      	str	r0, [r7, #4]
 800a4ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d101      	bne.n	800a4b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a4b4:	2301      	movs	r3, #1
 800a4b6:	e0d0      	b.n	800a65a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a4b8:	4b6a      	ldr	r3, [pc, #424]	; (800a664 <HAL_RCC_ClockConfig+0x1c0>)
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	f003 0307 	and.w	r3, r3, #7
 800a4c0:	683a      	ldr	r2, [r7, #0]
 800a4c2:	429a      	cmp	r2, r3
 800a4c4:	d910      	bls.n	800a4e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a4c6:	4b67      	ldr	r3, [pc, #412]	; (800a664 <HAL_RCC_ClockConfig+0x1c0>)
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	f023 0207 	bic.w	r2, r3, #7
 800a4ce:	4965      	ldr	r1, [pc, #404]	; (800a664 <HAL_RCC_ClockConfig+0x1c0>)
 800a4d0:	683b      	ldr	r3, [r7, #0]
 800a4d2:	4313      	orrs	r3, r2
 800a4d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a4d6:	4b63      	ldr	r3, [pc, #396]	; (800a664 <HAL_RCC_ClockConfig+0x1c0>)
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	f003 0307 	and.w	r3, r3, #7
 800a4de:	683a      	ldr	r2, [r7, #0]
 800a4e0:	429a      	cmp	r2, r3
 800a4e2:	d001      	beq.n	800a4e8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800a4e4:	2301      	movs	r3, #1
 800a4e6:	e0b8      	b.n	800a65a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	f003 0302 	and.w	r3, r3, #2
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d020      	beq.n	800a536 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	f003 0304 	and.w	r3, r3, #4
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d005      	beq.n	800a50c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a500:	4b59      	ldr	r3, [pc, #356]	; (800a668 <HAL_RCC_ClockConfig+0x1c4>)
 800a502:	685b      	ldr	r3, [r3, #4]
 800a504:	4a58      	ldr	r2, [pc, #352]	; (800a668 <HAL_RCC_ClockConfig+0x1c4>)
 800a506:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800a50a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	f003 0308 	and.w	r3, r3, #8
 800a514:	2b00      	cmp	r3, #0
 800a516:	d005      	beq.n	800a524 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a518:	4b53      	ldr	r3, [pc, #332]	; (800a668 <HAL_RCC_ClockConfig+0x1c4>)
 800a51a:	685b      	ldr	r3, [r3, #4]
 800a51c:	4a52      	ldr	r2, [pc, #328]	; (800a668 <HAL_RCC_ClockConfig+0x1c4>)
 800a51e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800a522:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a524:	4b50      	ldr	r3, [pc, #320]	; (800a668 <HAL_RCC_ClockConfig+0x1c4>)
 800a526:	685b      	ldr	r3, [r3, #4]
 800a528:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	689b      	ldr	r3, [r3, #8]
 800a530:	494d      	ldr	r1, [pc, #308]	; (800a668 <HAL_RCC_ClockConfig+0x1c4>)
 800a532:	4313      	orrs	r3, r2
 800a534:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	f003 0301 	and.w	r3, r3, #1
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d040      	beq.n	800a5c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	685b      	ldr	r3, [r3, #4]
 800a546:	2b01      	cmp	r3, #1
 800a548:	d107      	bne.n	800a55a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a54a:	4b47      	ldr	r3, [pc, #284]	; (800a668 <HAL_RCC_ClockConfig+0x1c4>)
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a552:	2b00      	cmp	r3, #0
 800a554:	d115      	bne.n	800a582 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a556:	2301      	movs	r3, #1
 800a558:	e07f      	b.n	800a65a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	685b      	ldr	r3, [r3, #4]
 800a55e:	2b02      	cmp	r3, #2
 800a560:	d107      	bne.n	800a572 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a562:	4b41      	ldr	r3, [pc, #260]	; (800a668 <HAL_RCC_ClockConfig+0x1c4>)
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d109      	bne.n	800a582 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a56e:	2301      	movs	r3, #1
 800a570:	e073      	b.n	800a65a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a572:	4b3d      	ldr	r3, [pc, #244]	; (800a668 <HAL_RCC_ClockConfig+0x1c4>)
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	f003 0302 	and.w	r3, r3, #2
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d101      	bne.n	800a582 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a57e:	2301      	movs	r3, #1
 800a580:	e06b      	b.n	800a65a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a582:	4b39      	ldr	r3, [pc, #228]	; (800a668 <HAL_RCC_ClockConfig+0x1c4>)
 800a584:	685b      	ldr	r3, [r3, #4]
 800a586:	f023 0203 	bic.w	r2, r3, #3
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	685b      	ldr	r3, [r3, #4]
 800a58e:	4936      	ldr	r1, [pc, #216]	; (800a668 <HAL_RCC_ClockConfig+0x1c4>)
 800a590:	4313      	orrs	r3, r2
 800a592:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a594:	f7fd fb10 	bl	8007bb8 <HAL_GetTick>
 800a598:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a59a:	e00a      	b.n	800a5b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a59c:	f7fd fb0c 	bl	8007bb8 <HAL_GetTick>
 800a5a0:	4602      	mov	r2, r0
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	1ad3      	subs	r3, r2, r3
 800a5a6:	f241 3288 	movw	r2, #5000	; 0x1388
 800a5aa:	4293      	cmp	r3, r2
 800a5ac:	d901      	bls.n	800a5b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a5ae:	2303      	movs	r3, #3
 800a5b0:	e053      	b.n	800a65a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a5b2:	4b2d      	ldr	r3, [pc, #180]	; (800a668 <HAL_RCC_ClockConfig+0x1c4>)
 800a5b4:	685b      	ldr	r3, [r3, #4]
 800a5b6:	f003 020c 	and.w	r2, r3, #12
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	685b      	ldr	r3, [r3, #4]
 800a5be:	009b      	lsls	r3, r3, #2
 800a5c0:	429a      	cmp	r2, r3
 800a5c2:	d1eb      	bne.n	800a59c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a5c4:	4b27      	ldr	r3, [pc, #156]	; (800a664 <HAL_RCC_ClockConfig+0x1c0>)
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	f003 0307 	and.w	r3, r3, #7
 800a5cc:	683a      	ldr	r2, [r7, #0]
 800a5ce:	429a      	cmp	r2, r3
 800a5d0:	d210      	bcs.n	800a5f4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a5d2:	4b24      	ldr	r3, [pc, #144]	; (800a664 <HAL_RCC_ClockConfig+0x1c0>)
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	f023 0207 	bic.w	r2, r3, #7
 800a5da:	4922      	ldr	r1, [pc, #136]	; (800a664 <HAL_RCC_ClockConfig+0x1c0>)
 800a5dc:	683b      	ldr	r3, [r7, #0]
 800a5de:	4313      	orrs	r3, r2
 800a5e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a5e2:	4b20      	ldr	r3, [pc, #128]	; (800a664 <HAL_RCC_ClockConfig+0x1c0>)
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	f003 0307 	and.w	r3, r3, #7
 800a5ea:	683a      	ldr	r2, [r7, #0]
 800a5ec:	429a      	cmp	r2, r3
 800a5ee:	d001      	beq.n	800a5f4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800a5f0:	2301      	movs	r3, #1
 800a5f2:	e032      	b.n	800a65a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	f003 0304 	and.w	r3, r3, #4
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d008      	beq.n	800a612 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a600:	4b19      	ldr	r3, [pc, #100]	; (800a668 <HAL_RCC_ClockConfig+0x1c4>)
 800a602:	685b      	ldr	r3, [r3, #4]
 800a604:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	68db      	ldr	r3, [r3, #12]
 800a60c:	4916      	ldr	r1, [pc, #88]	; (800a668 <HAL_RCC_ClockConfig+0x1c4>)
 800a60e:	4313      	orrs	r3, r2
 800a610:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	f003 0308 	and.w	r3, r3, #8
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d009      	beq.n	800a632 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800a61e:	4b12      	ldr	r3, [pc, #72]	; (800a668 <HAL_RCC_ClockConfig+0x1c4>)
 800a620:	685b      	ldr	r3, [r3, #4]
 800a622:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	691b      	ldr	r3, [r3, #16]
 800a62a:	00db      	lsls	r3, r3, #3
 800a62c:	490e      	ldr	r1, [pc, #56]	; (800a668 <HAL_RCC_ClockConfig+0x1c4>)
 800a62e:	4313      	orrs	r3, r2
 800a630:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800a632:	f000 f821 	bl	800a678 <HAL_RCC_GetSysClockFreq>
 800a636:	4602      	mov	r2, r0
 800a638:	4b0b      	ldr	r3, [pc, #44]	; (800a668 <HAL_RCC_ClockConfig+0x1c4>)
 800a63a:	685b      	ldr	r3, [r3, #4]
 800a63c:	091b      	lsrs	r3, r3, #4
 800a63e:	f003 030f 	and.w	r3, r3, #15
 800a642:	490a      	ldr	r1, [pc, #40]	; (800a66c <HAL_RCC_ClockConfig+0x1c8>)
 800a644:	5ccb      	ldrb	r3, [r1, r3]
 800a646:	fa22 f303 	lsr.w	r3, r2, r3
 800a64a:	4a09      	ldr	r2, [pc, #36]	; (800a670 <HAL_RCC_ClockConfig+0x1cc>)
 800a64c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800a64e:	4b09      	ldr	r3, [pc, #36]	; (800a674 <HAL_RCC_ClockConfig+0x1d0>)
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	4618      	mov	r0, r3
 800a654:	f7fd fa6e 	bl	8007b34 <HAL_InitTick>

  return HAL_OK;
 800a658:	2300      	movs	r3, #0
}
 800a65a:	4618      	mov	r0, r3
 800a65c:	3710      	adds	r7, #16
 800a65e:	46bd      	mov	sp, r7
 800a660:	bd80      	pop	{r7, pc}
 800a662:	bf00      	nop
 800a664:	40022000 	.word	0x40022000
 800a668:	40021000 	.word	0x40021000
 800a66c:	0800f3ec 	.word	0x0800f3ec
 800a670:	20000490 	.word	0x20000490
 800a674:	200004d8 	.word	0x200004d8

0800a678 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a678:	b480      	push	{r7}
 800a67a:	b087      	sub	sp, #28
 800a67c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800a67e:	2300      	movs	r3, #0
 800a680:	60fb      	str	r3, [r7, #12]
 800a682:	2300      	movs	r3, #0
 800a684:	60bb      	str	r3, [r7, #8]
 800a686:	2300      	movs	r3, #0
 800a688:	617b      	str	r3, [r7, #20]
 800a68a:	2300      	movs	r3, #0
 800a68c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800a68e:	2300      	movs	r3, #0
 800a690:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800a692:	4b1e      	ldr	r3, [pc, #120]	; (800a70c <HAL_RCC_GetSysClockFreq+0x94>)
 800a694:	685b      	ldr	r3, [r3, #4]
 800a696:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	f003 030c 	and.w	r3, r3, #12
 800a69e:	2b04      	cmp	r3, #4
 800a6a0:	d002      	beq.n	800a6a8 <HAL_RCC_GetSysClockFreq+0x30>
 800a6a2:	2b08      	cmp	r3, #8
 800a6a4:	d003      	beq.n	800a6ae <HAL_RCC_GetSysClockFreq+0x36>
 800a6a6:	e027      	b.n	800a6f8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800a6a8:	4b19      	ldr	r3, [pc, #100]	; (800a710 <HAL_RCC_GetSysClockFreq+0x98>)
 800a6aa:	613b      	str	r3, [r7, #16]
      break;
 800a6ac:	e027      	b.n	800a6fe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	0c9b      	lsrs	r3, r3, #18
 800a6b2:	f003 030f 	and.w	r3, r3, #15
 800a6b6:	4a17      	ldr	r2, [pc, #92]	; (800a714 <HAL_RCC_GetSysClockFreq+0x9c>)
 800a6b8:	5cd3      	ldrb	r3, [r2, r3]
 800a6ba:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d010      	beq.n	800a6e8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800a6c6:	4b11      	ldr	r3, [pc, #68]	; (800a70c <HAL_RCC_GetSysClockFreq+0x94>)
 800a6c8:	685b      	ldr	r3, [r3, #4]
 800a6ca:	0c5b      	lsrs	r3, r3, #17
 800a6cc:	f003 0301 	and.w	r3, r3, #1
 800a6d0:	4a11      	ldr	r2, [pc, #68]	; (800a718 <HAL_RCC_GetSysClockFreq+0xa0>)
 800a6d2:	5cd3      	ldrb	r3, [r2, r3]
 800a6d4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	4a0d      	ldr	r2, [pc, #52]	; (800a710 <HAL_RCC_GetSysClockFreq+0x98>)
 800a6da:	fb03 f202 	mul.w	r2, r3, r2
 800a6de:	68bb      	ldr	r3, [r7, #8]
 800a6e0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a6e4:	617b      	str	r3, [r7, #20]
 800a6e6:	e004      	b.n	800a6f2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	4a0c      	ldr	r2, [pc, #48]	; (800a71c <HAL_RCC_GetSysClockFreq+0xa4>)
 800a6ec:	fb02 f303 	mul.w	r3, r2, r3
 800a6f0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800a6f2:	697b      	ldr	r3, [r7, #20]
 800a6f4:	613b      	str	r3, [r7, #16]
      break;
 800a6f6:	e002      	b.n	800a6fe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800a6f8:	4b05      	ldr	r3, [pc, #20]	; (800a710 <HAL_RCC_GetSysClockFreq+0x98>)
 800a6fa:	613b      	str	r3, [r7, #16]
      break;
 800a6fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a6fe:	693b      	ldr	r3, [r7, #16]
}
 800a700:	4618      	mov	r0, r3
 800a702:	371c      	adds	r7, #28
 800a704:	46bd      	mov	sp, r7
 800a706:	bc80      	pop	{r7}
 800a708:	4770      	bx	lr
 800a70a:	bf00      	nop
 800a70c:	40021000 	.word	0x40021000
 800a710:	007a1200 	.word	0x007a1200
 800a714:	0800f404 	.word	0x0800f404
 800a718:	0800f414 	.word	0x0800f414
 800a71c:	003d0900 	.word	0x003d0900

0800a720 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a720:	b480      	push	{r7}
 800a722:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a724:	4b02      	ldr	r3, [pc, #8]	; (800a730 <HAL_RCC_GetHCLKFreq+0x10>)
 800a726:	681b      	ldr	r3, [r3, #0]
}
 800a728:	4618      	mov	r0, r3
 800a72a:	46bd      	mov	sp, r7
 800a72c:	bc80      	pop	{r7}
 800a72e:	4770      	bx	lr
 800a730:	20000490 	.word	0x20000490

0800a734 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a734:	b580      	push	{r7, lr}
 800a736:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800a738:	f7ff fff2 	bl	800a720 <HAL_RCC_GetHCLKFreq>
 800a73c:	4602      	mov	r2, r0
 800a73e:	4b05      	ldr	r3, [pc, #20]	; (800a754 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a740:	685b      	ldr	r3, [r3, #4]
 800a742:	0a1b      	lsrs	r3, r3, #8
 800a744:	f003 0307 	and.w	r3, r3, #7
 800a748:	4903      	ldr	r1, [pc, #12]	; (800a758 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a74a:	5ccb      	ldrb	r3, [r1, r3]
 800a74c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a750:	4618      	mov	r0, r3
 800a752:	bd80      	pop	{r7, pc}
 800a754:	40021000 	.word	0x40021000
 800a758:	0800f3fc 	.word	0x0800f3fc

0800a75c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a75c:	b580      	push	{r7, lr}
 800a75e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800a760:	f7ff ffde 	bl	800a720 <HAL_RCC_GetHCLKFreq>
 800a764:	4602      	mov	r2, r0
 800a766:	4b05      	ldr	r3, [pc, #20]	; (800a77c <HAL_RCC_GetPCLK2Freq+0x20>)
 800a768:	685b      	ldr	r3, [r3, #4]
 800a76a:	0adb      	lsrs	r3, r3, #11
 800a76c:	f003 0307 	and.w	r3, r3, #7
 800a770:	4903      	ldr	r1, [pc, #12]	; (800a780 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a772:	5ccb      	ldrb	r3, [r1, r3]
 800a774:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a778:	4618      	mov	r0, r3
 800a77a:	bd80      	pop	{r7, pc}
 800a77c:	40021000 	.word	0x40021000
 800a780:	0800f3fc 	.word	0x0800f3fc

0800a784 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800a784:	b480      	push	{r7}
 800a786:	b085      	sub	sp, #20
 800a788:	af00      	add	r7, sp, #0
 800a78a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800a78c:	4b0a      	ldr	r3, [pc, #40]	; (800a7b8 <RCC_Delay+0x34>)
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	4a0a      	ldr	r2, [pc, #40]	; (800a7bc <RCC_Delay+0x38>)
 800a792:	fba2 2303 	umull	r2, r3, r2, r3
 800a796:	0a5b      	lsrs	r3, r3, #9
 800a798:	687a      	ldr	r2, [r7, #4]
 800a79a:	fb02 f303 	mul.w	r3, r2, r3
 800a79e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800a7a0:	bf00      	nop
  }
  while (Delay --);
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	1e5a      	subs	r2, r3, #1
 800a7a6:	60fa      	str	r2, [r7, #12]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d1f9      	bne.n	800a7a0 <RCC_Delay+0x1c>
}
 800a7ac:	bf00      	nop
 800a7ae:	bf00      	nop
 800a7b0:	3714      	adds	r7, #20
 800a7b2:	46bd      	mov	sp, r7
 800a7b4:	bc80      	pop	{r7}
 800a7b6:	4770      	bx	lr
 800a7b8:	20000490 	.word	0x20000490
 800a7bc:	10624dd3 	.word	0x10624dd3

0800a7c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a7c0:	b580      	push	{r7, lr}
 800a7c2:	b086      	sub	sp, #24
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	613b      	str	r3, [r7, #16]
 800a7cc:	2300      	movs	r3, #0
 800a7ce:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	f003 0301 	and.w	r3, r3, #1
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d07d      	beq.n	800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800a7dc:	2300      	movs	r3, #0
 800a7de:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a7e0:	4b4f      	ldr	r3, [pc, #316]	; (800a920 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a7e2:	69db      	ldr	r3, [r3, #28]
 800a7e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d10d      	bne.n	800a808 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a7ec:	4b4c      	ldr	r3, [pc, #304]	; (800a920 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a7ee:	69db      	ldr	r3, [r3, #28]
 800a7f0:	4a4b      	ldr	r2, [pc, #300]	; (800a920 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a7f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a7f6:	61d3      	str	r3, [r2, #28]
 800a7f8:	4b49      	ldr	r3, [pc, #292]	; (800a920 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a7fa:	69db      	ldr	r3, [r3, #28]
 800a7fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a800:	60bb      	str	r3, [r7, #8]
 800a802:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a804:	2301      	movs	r3, #1
 800a806:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a808:	4b46      	ldr	r3, [pc, #280]	; (800a924 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a810:	2b00      	cmp	r3, #0
 800a812:	d118      	bne.n	800a846 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a814:	4b43      	ldr	r3, [pc, #268]	; (800a924 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	4a42      	ldr	r2, [pc, #264]	; (800a924 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800a81a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a81e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a820:	f7fd f9ca 	bl	8007bb8 <HAL_GetTick>
 800a824:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a826:	e008      	b.n	800a83a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a828:	f7fd f9c6 	bl	8007bb8 <HAL_GetTick>
 800a82c:	4602      	mov	r2, r0
 800a82e:	693b      	ldr	r3, [r7, #16]
 800a830:	1ad3      	subs	r3, r2, r3
 800a832:	2b64      	cmp	r3, #100	; 0x64
 800a834:	d901      	bls.n	800a83a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800a836:	2303      	movs	r3, #3
 800a838:	e06d      	b.n	800a916 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a83a:	4b3a      	ldr	r3, [pc, #232]	; (800a924 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a842:	2b00      	cmp	r3, #0
 800a844:	d0f0      	beq.n	800a828 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800a846:	4b36      	ldr	r3, [pc, #216]	; (800a920 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a848:	6a1b      	ldr	r3, [r3, #32]
 800a84a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a84e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	2b00      	cmp	r3, #0
 800a854:	d02e      	beq.n	800a8b4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	685b      	ldr	r3, [r3, #4]
 800a85a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a85e:	68fa      	ldr	r2, [r7, #12]
 800a860:	429a      	cmp	r2, r3
 800a862:	d027      	beq.n	800a8b4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a864:	4b2e      	ldr	r3, [pc, #184]	; (800a920 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a866:	6a1b      	ldr	r3, [r3, #32]
 800a868:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a86c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800a86e:	4b2e      	ldr	r3, [pc, #184]	; (800a928 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800a870:	2201      	movs	r2, #1
 800a872:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800a874:	4b2c      	ldr	r3, [pc, #176]	; (800a928 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800a876:	2200      	movs	r2, #0
 800a878:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800a87a:	4a29      	ldr	r2, [pc, #164]	; (800a920 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	f003 0301 	and.w	r3, r3, #1
 800a886:	2b00      	cmp	r3, #0
 800a888:	d014      	beq.n	800a8b4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a88a:	f7fd f995 	bl	8007bb8 <HAL_GetTick>
 800a88e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a890:	e00a      	b.n	800a8a8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a892:	f7fd f991 	bl	8007bb8 <HAL_GetTick>
 800a896:	4602      	mov	r2, r0
 800a898:	693b      	ldr	r3, [r7, #16]
 800a89a:	1ad3      	subs	r3, r2, r3
 800a89c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a8a0:	4293      	cmp	r3, r2
 800a8a2:	d901      	bls.n	800a8a8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800a8a4:	2303      	movs	r3, #3
 800a8a6:	e036      	b.n	800a916 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a8a8:	4b1d      	ldr	r3, [pc, #116]	; (800a920 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a8aa:	6a1b      	ldr	r3, [r3, #32]
 800a8ac:	f003 0302 	and.w	r3, r3, #2
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d0ee      	beq.n	800a892 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a8b4:	4b1a      	ldr	r3, [pc, #104]	; (800a920 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a8b6:	6a1b      	ldr	r3, [r3, #32]
 800a8b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	685b      	ldr	r3, [r3, #4]
 800a8c0:	4917      	ldr	r1, [pc, #92]	; (800a920 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a8c2:	4313      	orrs	r3, r2
 800a8c4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800a8c6:	7dfb      	ldrb	r3, [r7, #23]
 800a8c8:	2b01      	cmp	r3, #1
 800a8ca:	d105      	bne.n	800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a8cc:	4b14      	ldr	r3, [pc, #80]	; (800a920 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a8ce:	69db      	ldr	r3, [r3, #28]
 800a8d0:	4a13      	ldr	r2, [pc, #76]	; (800a920 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a8d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a8d6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	f003 0302 	and.w	r3, r3, #2
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d008      	beq.n	800a8f6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a8e4:	4b0e      	ldr	r3, [pc, #56]	; (800a920 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a8e6:	685b      	ldr	r3, [r3, #4]
 800a8e8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	689b      	ldr	r3, [r3, #8]
 800a8f0:	490b      	ldr	r1, [pc, #44]	; (800a920 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a8f2:	4313      	orrs	r3, r2
 800a8f4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	f003 0310 	and.w	r3, r3, #16
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d008      	beq.n	800a914 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a902:	4b07      	ldr	r3, [pc, #28]	; (800a920 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a904:	685b      	ldr	r3, [r3, #4]
 800a906:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	68db      	ldr	r3, [r3, #12]
 800a90e:	4904      	ldr	r1, [pc, #16]	; (800a920 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a910:	4313      	orrs	r3, r2
 800a912:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800a914:	2300      	movs	r3, #0
}
 800a916:	4618      	mov	r0, r3
 800a918:	3718      	adds	r7, #24
 800a91a:	46bd      	mov	sp, r7
 800a91c:	bd80      	pop	{r7, pc}
 800a91e:	bf00      	nop
 800a920:	40021000 	.word	0x40021000
 800a924:	40007000 	.word	0x40007000
 800a928:	42420440 	.word	0x42420440

0800a92c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a92c:	b580      	push	{r7, lr}
 800a92e:	b082      	sub	sp, #8
 800a930:	af00      	add	r7, sp, #0
 800a932:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	2b00      	cmp	r3, #0
 800a938:	d101      	bne.n	800a93e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a93a:	2301      	movs	r3, #1
 800a93c:	e041      	b.n	800a9c2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a944:	b2db      	uxtb	r3, r3
 800a946:	2b00      	cmp	r3, #0
 800a948:	d106      	bne.n	800a958 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	2200      	movs	r2, #0
 800a94e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a952:	6878      	ldr	r0, [r7, #4]
 800a954:	f7fb feea 	bl	800672c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	2202      	movs	r2, #2
 800a95c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681a      	ldr	r2, [r3, #0]
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	3304      	adds	r3, #4
 800a968:	4619      	mov	r1, r3
 800a96a:	4610      	mov	r0, r2
 800a96c:	f000 f8f4 	bl	800ab58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	2201      	movs	r2, #1
 800a974:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	2201      	movs	r2, #1
 800a97c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	2201      	movs	r2, #1
 800a984:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	2201      	movs	r2, #1
 800a98c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	2201      	movs	r2, #1
 800a994:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	2201      	movs	r2, #1
 800a99c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	2201      	movs	r2, #1
 800a9a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	2201      	movs	r2, #1
 800a9ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	2201      	movs	r2, #1
 800a9b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	2201      	movs	r2, #1
 800a9bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a9c0:	2300      	movs	r3, #0
}
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	3708      	adds	r7, #8
 800a9c6:	46bd      	mov	sp, r7
 800a9c8:	bd80      	pop	{r7, pc}

0800a9ca <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a9ca:	b580      	push	{r7, lr}
 800a9cc:	b084      	sub	sp, #16
 800a9ce:	af00      	add	r7, sp, #0
 800a9d0:	6078      	str	r0, [r7, #4]
 800a9d2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a9d4:	2300      	movs	r3, #0
 800a9d6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a9de:	2b01      	cmp	r3, #1
 800a9e0:	d101      	bne.n	800a9e6 <HAL_TIM_ConfigClockSource+0x1c>
 800a9e2:	2302      	movs	r3, #2
 800a9e4:	e0b4      	b.n	800ab50 <HAL_TIM_ConfigClockSource+0x186>
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	2201      	movs	r2, #1
 800a9ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	2202      	movs	r2, #2
 800a9f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	689b      	ldr	r3, [r3, #8]
 800a9fc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a9fe:	68bb      	ldr	r3, [r7, #8]
 800aa00:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800aa04:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800aa06:	68bb      	ldr	r3, [r7, #8]
 800aa08:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800aa0c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	68ba      	ldr	r2, [r7, #8]
 800aa14:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800aa16:	683b      	ldr	r3, [r7, #0]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aa1e:	d03e      	beq.n	800aa9e <HAL_TIM_ConfigClockSource+0xd4>
 800aa20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aa24:	f200 8087 	bhi.w	800ab36 <HAL_TIM_ConfigClockSource+0x16c>
 800aa28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa2c:	f000 8086 	beq.w	800ab3c <HAL_TIM_ConfigClockSource+0x172>
 800aa30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa34:	d87f      	bhi.n	800ab36 <HAL_TIM_ConfigClockSource+0x16c>
 800aa36:	2b70      	cmp	r3, #112	; 0x70
 800aa38:	d01a      	beq.n	800aa70 <HAL_TIM_ConfigClockSource+0xa6>
 800aa3a:	2b70      	cmp	r3, #112	; 0x70
 800aa3c:	d87b      	bhi.n	800ab36 <HAL_TIM_ConfigClockSource+0x16c>
 800aa3e:	2b60      	cmp	r3, #96	; 0x60
 800aa40:	d050      	beq.n	800aae4 <HAL_TIM_ConfigClockSource+0x11a>
 800aa42:	2b60      	cmp	r3, #96	; 0x60
 800aa44:	d877      	bhi.n	800ab36 <HAL_TIM_ConfigClockSource+0x16c>
 800aa46:	2b50      	cmp	r3, #80	; 0x50
 800aa48:	d03c      	beq.n	800aac4 <HAL_TIM_ConfigClockSource+0xfa>
 800aa4a:	2b50      	cmp	r3, #80	; 0x50
 800aa4c:	d873      	bhi.n	800ab36 <HAL_TIM_ConfigClockSource+0x16c>
 800aa4e:	2b40      	cmp	r3, #64	; 0x40
 800aa50:	d058      	beq.n	800ab04 <HAL_TIM_ConfigClockSource+0x13a>
 800aa52:	2b40      	cmp	r3, #64	; 0x40
 800aa54:	d86f      	bhi.n	800ab36 <HAL_TIM_ConfigClockSource+0x16c>
 800aa56:	2b30      	cmp	r3, #48	; 0x30
 800aa58:	d064      	beq.n	800ab24 <HAL_TIM_ConfigClockSource+0x15a>
 800aa5a:	2b30      	cmp	r3, #48	; 0x30
 800aa5c:	d86b      	bhi.n	800ab36 <HAL_TIM_ConfigClockSource+0x16c>
 800aa5e:	2b20      	cmp	r3, #32
 800aa60:	d060      	beq.n	800ab24 <HAL_TIM_ConfigClockSource+0x15a>
 800aa62:	2b20      	cmp	r3, #32
 800aa64:	d867      	bhi.n	800ab36 <HAL_TIM_ConfigClockSource+0x16c>
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d05c      	beq.n	800ab24 <HAL_TIM_ConfigClockSource+0x15a>
 800aa6a:	2b10      	cmp	r3, #16
 800aa6c:	d05a      	beq.n	800ab24 <HAL_TIM_ConfigClockSource+0x15a>
 800aa6e:	e062      	b.n	800ab36 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	6818      	ldr	r0, [r3, #0]
 800aa74:	683b      	ldr	r3, [r7, #0]
 800aa76:	6899      	ldr	r1, [r3, #8]
 800aa78:	683b      	ldr	r3, [r7, #0]
 800aa7a:	685a      	ldr	r2, [r3, #4]
 800aa7c:	683b      	ldr	r3, [r7, #0]
 800aa7e:	68db      	ldr	r3, [r3, #12]
 800aa80:	f000 f943 	bl	800ad0a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	689b      	ldr	r3, [r3, #8]
 800aa8a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800aa8c:	68bb      	ldr	r3, [r7, #8]
 800aa8e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800aa92:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	68ba      	ldr	r2, [r7, #8]
 800aa9a:	609a      	str	r2, [r3, #8]
      break;
 800aa9c:	e04f      	b.n	800ab3e <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	6818      	ldr	r0, [r3, #0]
 800aaa2:	683b      	ldr	r3, [r7, #0]
 800aaa4:	6899      	ldr	r1, [r3, #8]
 800aaa6:	683b      	ldr	r3, [r7, #0]
 800aaa8:	685a      	ldr	r2, [r3, #4]
 800aaaa:	683b      	ldr	r3, [r7, #0]
 800aaac:	68db      	ldr	r3, [r3, #12]
 800aaae:	f000 f92c 	bl	800ad0a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	689a      	ldr	r2, [r3, #8]
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800aac0:	609a      	str	r2, [r3, #8]
      break;
 800aac2:	e03c      	b.n	800ab3e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	6818      	ldr	r0, [r3, #0]
 800aac8:	683b      	ldr	r3, [r7, #0]
 800aaca:	6859      	ldr	r1, [r3, #4]
 800aacc:	683b      	ldr	r3, [r7, #0]
 800aace:	68db      	ldr	r3, [r3, #12]
 800aad0:	461a      	mov	r2, r3
 800aad2:	f000 f8a3 	bl	800ac1c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	2150      	movs	r1, #80	; 0x50
 800aadc:	4618      	mov	r0, r3
 800aade:	f000 f8fa 	bl	800acd6 <TIM_ITRx_SetConfig>
      break;
 800aae2:	e02c      	b.n	800ab3e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	6818      	ldr	r0, [r3, #0]
 800aae8:	683b      	ldr	r3, [r7, #0]
 800aaea:	6859      	ldr	r1, [r3, #4]
 800aaec:	683b      	ldr	r3, [r7, #0]
 800aaee:	68db      	ldr	r3, [r3, #12]
 800aaf0:	461a      	mov	r2, r3
 800aaf2:	f000 f8c1 	bl	800ac78 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	2160      	movs	r1, #96	; 0x60
 800aafc:	4618      	mov	r0, r3
 800aafe:	f000 f8ea 	bl	800acd6 <TIM_ITRx_SetConfig>
      break;
 800ab02:	e01c      	b.n	800ab3e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	6818      	ldr	r0, [r3, #0]
 800ab08:	683b      	ldr	r3, [r7, #0]
 800ab0a:	6859      	ldr	r1, [r3, #4]
 800ab0c:	683b      	ldr	r3, [r7, #0]
 800ab0e:	68db      	ldr	r3, [r3, #12]
 800ab10:	461a      	mov	r2, r3
 800ab12:	f000 f883 	bl	800ac1c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	2140      	movs	r1, #64	; 0x40
 800ab1c:	4618      	mov	r0, r3
 800ab1e:	f000 f8da 	bl	800acd6 <TIM_ITRx_SetConfig>
      break;
 800ab22:	e00c      	b.n	800ab3e <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	681a      	ldr	r2, [r3, #0]
 800ab28:	683b      	ldr	r3, [r7, #0]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	4619      	mov	r1, r3
 800ab2e:	4610      	mov	r0, r2
 800ab30:	f000 f8d1 	bl	800acd6 <TIM_ITRx_SetConfig>
      break;
 800ab34:	e003      	b.n	800ab3e <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800ab36:	2301      	movs	r3, #1
 800ab38:	73fb      	strb	r3, [r7, #15]
      break;
 800ab3a:	e000      	b.n	800ab3e <HAL_TIM_ConfigClockSource+0x174>
      break;
 800ab3c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	2201      	movs	r2, #1
 800ab42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	2200      	movs	r2, #0
 800ab4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ab4e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab50:	4618      	mov	r0, r3
 800ab52:	3710      	adds	r7, #16
 800ab54:	46bd      	mov	sp, r7
 800ab56:	bd80      	pop	{r7, pc}

0800ab58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ab58:	b480      	push	{r7}
 800ab5a:	b085      	sub	sp, #20
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	6078      	str	r0, [r7, #4]
 800ab60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	4a29      	ldr	r2, [pc, #164]	; (800ac10 <TIM_Base_SetConfig+0xb8>)
 800ab6c:	4293      	cmp	r3, r2
 800ab6e:	d00b      	beq.n	800ab88 <TIM_Base_SetConfig+0x30>
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab76:	d007      	beq.n	800ab88 <TIM_Base_SetConfig+0x30>
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	4a26      	ldr	r2, [pc, #152]	; (800ac14 <TIM_Base_SetConfig+0xbc>)
 800ab7c:	4293      	cmp	r3, r2
 800ab7e:	d003      	beq.n	800ab88 <TIM_Base_SetConfig+0x30>
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	4a25      	ldr	r2, [pc, #148]	; (800ac18 <TIM_Base_SetConfig+0xc0>)
 800ab84:	4293      	cmp	r3, r2
 800ab86:	d108      	bne.n	800ab9a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ab90:	683b      	ldr	r3, [r7, #0]
 800ab92:	685b      	ldr	r3, [r3, #4]
 800ab94:	68fa      	ldr	r2, [r7, #12]
 800ab96:	4313      	orrs	r3, r2
 800ab98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	4a1c      	ldr	r2, [pc, #112]	; (800ac10 <TIM_Base_SetConfig+0xb8>)
 800ab9e:	4293      	cmp	r3, r2
 800aba0:	d00b      	beq.n	800abba <TIM_Base_SetConfig+0x62>
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aba8:	d007      	beq.n	800abba <TIM_Base_SetConfig+0x62>
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	4a19      	ldr	r2, [pc, #100]	; (800ac14 <TIM_Base_SetConfig+0xbc>)
 800abae:	4293      	cmp	r3, r2
 800abb0:	d003      	beq.n	800abba <TIM_Base_SetConfig+0x62>
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	4a18      	ldr	r2, [pc, #96]	; (800ac18 <TIM_Base_SetConfig+0xc0>)
 800abb6:	4293      	cmp	r3, r2
 800abb8:	d108      	bne.n	800abcc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800abc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800abc2:	683b      	ldr	r3, [r7, #0]
 800abc4:	68db      	ldr	r3, [r3, #12]
 800abc6:	68fa      	ldr	r2, [r7, #12]
 800abc8:	4313      	orrs	r3, r2
 800abca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800abd2:	683b      	ldr	r3, [r7, #0]
 800abd4:	695b      	ldr	r3, [r3, #20]
 800abd6:	4313      	orrs	r3, r2
 800abd8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	68fa      	ldr	r2, [r7, #12]
 800abde:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800abe0:	683b      	ldr	r3, [r7, #0]
 800abe2:	689a      	ldr	r2, [r3, #8]
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800abe8:	683b      	ldr	r3, [r7, #0]
 800abea:	681a      	ldr	r2, [r3, #0]
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	4a07      	ldr	r2, [pc, #28]	; (800ac10 <TIM_Base_SetConfig+0xb8>)
 800abf4:	4293      	cmp	r3, r2
 800abf6:	d103      	bne.n	800ac00 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800abf8:	683b      	ldr	r3, [r7, #0]
 800abfa:	691a      	ldr	r2, [r3, #16]
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	2201      	movs	r2, #1
 800ac04:	615a      	str	r2, [r3, #20]
}
 800ac06:	bf00      	nop
 800ac08:	3714      	adds	r7, #20
 800ac0a:	46bd      	mov	sp, r7
 800ac0c:	bc80      	pop	{r7}
 800ac0e:	4770      	bx	lr
 800ac10:	40012c00 	.word	0x40012c00
 800ac14:	40000400 	.word	0x40000400
 800ac18:	40000800 	.word	0x40000800

0800ac1c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ac1c:	b480      	push	{r7}
 800ac1e:	b087      	sub	sp, #28
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	60f8      	str	r0, [r7, #12]
 800ac24:	60b9      	str	r1, [r7, #8]
 800ac26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	6a1b      	ldr	r3, [r3, #32]
 800ac2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	6a1b      	ldr	r3, [r3, #32]
 800ac32:	f023 0201 	bic.w	r2, r3, #1
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	699b      	ldr	r3, [r3, #24]
 800ac3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ac40:	693b      	ldr	r3, [r7, #16]
 800ac42:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ac46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	011b      	lsls	r3, r3, #4
 800ac4c:	693a      	ldr	r2, [r7, #16]
 800ac4e:	4313      	orrs	r3, r2
 800ac50:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ac52:	697b      	ldr	r3, [r7, #20]
 800ac54:	f023 030a 	bic.w	r3, r3, #10
 800ac58:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ac5a:	697a      	ldr	r2, [r7, #20]
 800ac5c:	68bb      	ldr	r3, [r7, #8]
 800ac5e:	4313      	orrs	r3, r2
 800ac60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	693a      	ldr	r2, [r7, #16]
 800ac66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	697a      	ldr	r2, [r7, #20]
 800ac6c:	621a      	str	r2, [r3, #32]
}
 800ac6e:	bf00      	nop
 800ac70:	371c      	adds	r7, #28
 800ac72:	46bd      	mov	sp, r7
 800ac74:	bc80      	pop	{r7}
 800ac76:	4770      	bx	lr

0800ac78 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ac78:	b480      	push	{r7}
 800ac7a:	b087      	sub	sp, #28
 800ac7c:	af00      	add	r7, sp, #0
 800ac7e:	60f8      	str	r0, [r7, #12]
 800ac80:	60b9      	str	r1, [r7, #8]
 800ac82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	6a1b      	ldr	r3, [r3, #32]
 800ac88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	6a1b      	ldr	r3, [r3, #32]
 800ac8e:	f023 0210 	bic.w	r2, r3, #16
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	699b      	ldr	r3, [r3, #24]
 800ac9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ac9c:	693b      	ldr	r3, [r7, #16]
 800ac9e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800aca2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	031b      	lsls	r3, r3, #12
 800aca8:	693a      	ldr	r2, [r7, #16]
 800acaa:	4313      	orrs	r3, r2
 800acac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800acae:	697b      	ldr	r3, [r7, #20]
 800acb0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800acb4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800acb6:	68bb      	ldr	r3, [r7, #8]
 800acb8:	011b      	lsls	r3, r3, #4
 800acba:	697a      	ldr	r2, [r7, #20]
 800acbc:	4313      	orrs	r3, r2
 800acbe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	693a      	ldr	r2, [r7, #16]
 800acc4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	697a      	ldr	r2, [r7, #20]
 800acca:	621a      	str	r2, [r3, #32]
}
 800accc:	bf00      	nop
 800acce:	371c      	adds	r7, #28
 800acd0:	46bd      	mov	sp, r7
 800acd2:	bc80      	pop	{r7}
 800acd4:	4770      	bx	lr

0800acd6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800acd6:	b480      	push	{r7}
 800acd8:	b085      	sub	sp, #20
 800acda:	af00      	add	r7, sp, #0
 800acdc:	6078      	str	r0, [r7, #4]
 800acde:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	689b      	ldr	r3, [r3, #8]
 800ace4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800acec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800acee:	683a      	ldr	r2, [r7, #0]
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	4313      	orrs	r3, r2
 800acf4:	f043 0307 	orr.w	r3, r3, #7
 800acf8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	68fa      	ldr	r2, [r7, #12]
 800acfe:	609a      	str	r2, [r3, #8]
}
 800ad00:	bf00      	nop
 800ad02:	3714      	adds	r7, #20
 800ad04:	46bd      	mov	sp, r7
 800ad06:	bc80      	pop	{r7}
 800ad08:	4770      	bx	lr

0800ad0a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ad0a:	b480      	push	{r7}
 800ad0c:	b087      	sub	sp, #28
 800ad0e:	af00      	add	r7, sp, #0
 800ad10:	60f8      	str	r0, [r7, #12]
 800ad12:	60b9      	str	r1, [r7, #8]
 800ad14:	607a      	str	r2, [r7, #4]
 800ad16:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	689b      	ldr	r3, [r3, #8]
 800ad1c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ad1e:	697b      	ldr	r3, [r7, #20]
 800ad20:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ad24:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ad26:	683b      	ldr	r3, [r7, #0]
 800ad28:	021a      	lsls	r2, r3, #8
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	431a      	orrs	r2, r3
 800ad2e:	68bb      	ldr	r3, [r7, #8]
 800ad30:	4313      	orrs	r3, r2
 800ad32:	697a      	ldr	r2, [r7, #20]
 800ad34:	4313      	orrs	r3, r2
 800ad36:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	697a      	ldr	r2, [r7, #20]
 800ad3c:	609a      	str	r2, [r3, #8]
}
 800ad3e:	bf00      	nop
 800ad40:	371c      	adds	r7, #28
 800ad42:	46bd      	mov	sp, r7
 800ad44:	bc80      	pop	{r7}
 800ad46:	4770      	bx	lr

0800ad48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ad48:	b480      	push	{r7}
 800ad4a:	b085      	sub	sp, #20
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	6078      	str	r0, [r7, #4]
 800ad50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ad58:	2b01      	cmp	r3, #1
 800ad5a:	d101      	bne.n	800ad60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ad5c:	2302      	movs	r3, #2
 800ad5e:	e046      	b.n	800adee <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	2201      	movs	r2, #1
 800ad64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	2202      	movs	r2, #2
 800ad6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	685b      	ldr	r3, [r3, #4]
 800ad76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	689b      	ldr	r3, [r3, #8]
 800ad7e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad86:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ad88:	683b      	ldr	r3, [r7, #0]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	68fa      	ldr	r2, [r7, #12]
 800ad8e:	4313      	orrs	r3, r2
 800ad90:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	68fa      	ldr	r2, [r7, #12]
 800ad98:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	4a16      	ldr	r2, [pc, #88]	; (800adf8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800ada0:	4293      	cmp	r3, r2
 800ada2:	d00e      	beq.n	800adc2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800adac:	d009      	beq.n	800adc2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	4a12      	ldr	r2, [pc, #72]	; (800adfc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800adb4:	4293      	cmp	r3, r2
 800adb6:	d004      	beq.n	800adc2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	4a10      	ldr	r2, [pc, #64]	; (800ae00 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800adbe:	4293      	cmp	r3, r2
 800adc0:	d10c      	bne.n	800addc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800adc2:	68bb      	ldr	r3, [r7, #8]
 800adc4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800adc8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800adca:	683b      	ldr	r3, [r7, #0]
 800adcc:	685b      	ldr	r3, [r3, #4]
 800adce:	68ba      	ldr	r2, [r7, #8]
 800add0:	4313      	orrs	r3, r2
 800add2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	68ba      	ldr	r2, [r7, #8]
 800adda:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	2201      	movs	r2, #1
 800ade0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	2200      	movs	r2, #0
 800ade8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800adec:	2300      	movs	r3, #0
}
 800adee:	4618      	mov	r0, r3
 800adf0:	3714      	adds	r7, #20
 800adf2:	46bd      	mov	sp, r7
 800adf4:	bc80      	pop	{r7}
 800adf6:	4770      	bx	lr
 800adf8:	40012c00 	.word	0x40012c00
 800adfc:	40000400 	.word	0x40000400
 800ae00:	40000800 	.word	0x40000800

0800ae04 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ae04:	b580      	push	{r7, lr}
 800ae06:	b082      	sub	sp, #8
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d101      	bne.n	800ae16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ae12:	2301      	movs	r3, #1
 800ae14:	e042      	b.n	800ae9c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ae1c:	b2db      	uxtb	r3, r3
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d106      	bne.n	800ae30 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	2200      	movs	r2, #0
 800ae26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ae2a:	6878      	ldr	r0, [r7, #4]
 800ae2c:	f7fb fd1a 	bl	8006864 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	2224      	movs	r2, #36	; 0x24
 800ae34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	68da      	ldr	r2, [r3, #12]
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ae46:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800ae48:	6878      	ldr	r0, [r7, #4]
 800ae4a:	f000 ff89 	bl	800bd60 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	691a      	ldr	r2, [r3, #16]
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ae5c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	695a      	ldr	r2, [r3, #20]
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ae6c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	68da      	ldr	r2, [r3, #12]
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ae7c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	2200      	movs	r2, #0
 800ae82:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	2220      	movs	r2, #32
 800ae88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	2220      	movs	r2, #32
 800ae90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	2200      	movs	r2, #0
 800ae98:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800ae9a:	2300      	movs	r3, #0
}
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	3708      	adds	r7, #8
 800aea0:	46bd      	mov	sp, r7
 800aea2:	bd80      	pop	{r7, pc}

0800aea4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800aea4:	b580      	push	{r7, lr}
 800aea6:	b08a      	sub	sp, #40	; 0x28
 800aea8:	af02      	add	r7, sp, #8
 800aeaa:	60f8      	str	r0, [r7, #12]
 800aeac:	60b9      	str	r1, [r7, #8]
 800aeae:	603b      	str	r3, [r7, #0]
 800aeb0:	4613      	mov	r3, r2
 800aeb2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800aebe:	b2db      	uxtb	r3, r3
 800aec0:	2b20      	cmp	r3, #32
 800aec2:	d16d      	bne.n	800afa0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800aec4:	68bb      	ldr	r3, [r7, #8]
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d002      	beq.n	800aed0 <HAL_UART_Transmit+0x2c>
 800aeca:	88fb      	ldrh	r3, [r7, #6]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d101      	bne.n	800aed4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800aed0:	2301      	movs	r3, #1
 800aed2:	e066      	b.n	800afa2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	2200      	movs	r2, #0
 800aed8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	2221      	movs	r2, #33	; 0x21
 800aede:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800aee2:	f7fc fe69 	bl	8007bb8 <HAL_GetTick>
 800aee6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	88fa      	ldrh	r2, [r7, #6]
 800aeec:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	88fa      	ldrh	r2, [r7, #6]
 800aef2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	689b      	ldr	r3, [r3, #8]
 800aef8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aefc:	d108      	bne.n	800af10 <HAL_UART_Transmit+0x6c>
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	691b      	ldr	r3, [r3, #16]
 800af02:	2b00      	cmp	r3, #0
 800af04:	d104      	bne.n	800af10 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800af06:	2300      	movs	r3, #0
 800af08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800af0a:	68bb      	ldr	r3, [r7, #8]
 800af0c:	61bb      	str	r3, [r7, #24]
 800af0e:	e003      	b.n	800af18 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800af10:	68bb      	ldr	r3, [r7, #8]
 800af12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800af14:	2300      	movs	r3, #0
 800af16:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800af18:	e02a      	b.n	800af70 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800af1a:	683b      	ldr	r3, [r7, #0]
 800af1c:	9300      	str	r3, [sp, #0]
 800af1e:	697b      	ldr	r3, [r7, #20]
 800af20:	2200      	movs	r2, #0
 800af22:	2180      	movs	r1, #128	; 0x80
 800af24:	68f8      	ldr	r0, [r7, #12]
 800af26:	f000 fc51 	bl	800b7cc <UART_WaitOnFlagUntilTimeout>
 800af2a:	4603      	mov	r3, r0
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d001      	beq.n	800af34 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800af30:	2303      	movs	r3, #3
 800af32:	e036      	b.n	800afa2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800af34:	69fb      	ldr	r3, [r7, #28]
 800af36:	2b00      	cmp	r3, #0
 800af38:	d10b      	bne.n	800af52 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800af3a:	69bb      	ldr	r3, [r7, #24]
 800af3c:	881b      	ldrh	r3, [r3, #0]
 800af3e:	461a      	mov	r2, r3
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800af48:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800af4a:	69bb      	ldr	r3, [r7, #24]
 800af4c:	3302      	adds	r3, #2
 800af4e:	61bb      	str	r3, [r7, #24]
 800af50:	e007      	b.n	800af62 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800af52:	69fb      	ldr	r3, [r7, #28]
 800af54:	781a      	ldrb	r2, [r3, #0]
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800af5c:	69fb      	ldr	r3, [r7, #28]
 800af5e:	3301      	adds	r3, #1
 800af60:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800af66:	b29b      	uxth	r3, r3
 800af68:	3b01      	subs	r3, #1
 800af6a:	b29a      	uxth	r2, r3
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800af74:	b29b      	uxth	r3, r3
 800af76:	2b00      	cmp	r3, #0
 800af78:	d1cf      	bne.n	800af1a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800af7a:	683b      	ldr	r3, [r7, #0]
 800af7c:	9300      	str	r3, [sp, #0]
 800af7e:	697b      	ldr	r3, [r7, #20]
 800af80:	2200      	movs	r2, #0
 800af82:	2140      	movs	r1, #64	; 0x40
 800af84:	68f8      	ldr	r0, [r7, #12]
 800af86:	f000 fc21 	bl	800b7cc <UART_WaitOnFlagUntilTimeout>
 800af8a:	4603      	mov	r3, r0
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d001      	beq.n	800af94 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800af90:	2303      	movs	r3, #3
 800af92:	e006      	b.n	800afa2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	2220      	movs	r2, #32
 800af98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800af9c:	2300      	movs	r3, #0
 800af9e:	e000      	b.n	800afa2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800afa0:	2302      	movs	r3, #2
  }
}
 800afa2:	4618      	mov	r0, r3
 800afa4:	3720      	adds	r7, #32
 800afa6:	46bd      	mov	sp, r7
 800afa8:	bd80      	pop	{r7, pc}

0800afaa <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800afaa:	b580      	push	{r7, lr}
 800afac:	b08c      	sub	sp, #48	; 0x30
 800afae:	af00      	add	r7, sp, #0
 800afb0:	60f8      	str	r0, [r7, #12]
 800afb2:	60b9      	str	r1, [r7, #8]
 800afb4:	4613      	mov	r3, r2
 800afb6:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800afbe:	b2db      	uxtb	r3, r3
 800afc0:	2b20      	cmp	r3, #32
 800afc2:	d14a      	bne.n	800b05a <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 800afc4:	68bb      	ldr	r3, [r7, #8]
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d002      	beq.n	800afd0 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800afca:	88fb      	ldrh	r3, [r7, #6]
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d101      	bne.n	800afd4 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800afd0:	2301      	movs	r3, #1
 800afd2:	e043      	b.n	800b05c <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	2201      	movs	r2, #1
 800afd8:	631a      	str	r2, [r3, #48]	; 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	2200      	movs	r2, #0
 800afde:	635a      	str	r2, [r3, #52]	; 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800afe0:	88fb      	ldrh	r3, [r7, #6]
 800afe2:	461a      	mov	r2, r3
 800afe4:	68b9      	ldr	r1, [r7, #8]
 800afe6:	68f8      	ldr	r0, [r7, #12]
 800afe8:	f000 fc5e 	bl	800b8a8 <UART_Start_Receive_DMA>
 800afec:	4603      	mov	r3, r0
 800afee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800aff2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d12c      	bne.n	800b054 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800affe:	2b01      	cmp	r3, #1
 800b000:	d125      	bne.n	800b04e <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b002:	2300      	movs	r3, #0
 800b004:	613b      	str	r3, [r7, #16]
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	613b      	str	r3, [r7, #16]
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	685b      	ldr	r3, [r3, #4]
 800b014:	613b      	str	r3, [r7, #16]
 800b016:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	330c      	adds	r3, #12
 800b01e:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b020:	69bb      	ldr	r3, [r7, #24]
 800b022:	e853 3f00 	ldrex	r3, [r3]
 800b026:	617b      	str	r3, [r7, #20]
   return(result);
 800b028:	697b      	ldr	r3, [r7, #20]
 800b02a:	f043 0310 	orr.w	r3, r3, #16
 800b02e:	62bb      	str	r3, [r7, #40]	; 0x28
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	330c      	adds	r3, #12
 800b036:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b038:	627a      	str	r2, [r7, #36]	; 0x24
 800b03a:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b03c:	6a39      	ldr	r1, [r7, #32]
 800b03e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b040:	e841 2300 	strex	r3, r2, [r1]
 800b044:	61fb      	str	r3, [r7, #28]
   return(result);
 800b046:	69fb      	ldr	r3, [r7, #28]
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d1e5      	bne.n	800b018 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 800b04c:	e002      	b.n	800b054 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800b04e:	2301      	movs	r3, #1
 800b050:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800b054:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b058:	e000      	b.n	800b05c <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 800b05a:	2302      	movs	r3, #2
  }
}
 800b05c:	4618      	mov	r0, r3
 800b05e:	3730      	adds	r7, #48	; 0x30
 800b060:	46bd      	mov	sp, r7
 800b062:	bd80      	pop	{r7, pc}

0800b064 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b064:	b580      	push	{r7, lr}
 800b066:	b0ba      	sub	sp, #232	; 0xe8
 800b068:	af00      	add	r7, sp, #0
 800b06a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	68db      	ldr	r3, [r3, #12]
 800b07c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	695b      	ldr	r3, [r3, #20]
 800b086:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800b08a:	2300      	movs	r3, #0
 800b08c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800b090:	2300      	movs	r3, #0
 800b092:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b096:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b09a:	f003 030f 	and.w	r3, r3, #15
 800b09e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800b0a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d10f      	bne.n	800b0ca <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b0aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b0ae:	f003 0320 	and.w	r3, r3, #32
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d009      	beq.n	800b0ca <HAL_UART_IRQHandler+0x66>
 800b0b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b0ba:	f003 0320 	and.w	r3, r3, #32
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d003      	beq.n	800b0ca <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800b0c2:	6878      	ldr	r0, [r7, #4]
 800b0c4:	f000 fd8e 	bl	800bbe4 <UART_Receive_IT>
      return;
 800b0c8:	e25b      	b.n	800b582 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800b0ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	f000 80de 	beq.w	800b290 <HAL_UART_IRQHandler+0x22c>
 800b0d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b0d8:	f003 0301 	and.w	r3, r3, #1
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d106      	bne.n	800b0ee <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b0e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b0e4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	f000 80d1 	beq.w	800b290 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b0ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b0f2:	f003 0301 	and.w	r3, r3, #1
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d00b      	beq.n	800b112 <HAL_UART_IRQHandler+0xae>
 800b0fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b0fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b102:	2b00      	cmp	r3, #0
 800b104:	d005      	beq.n	800b112 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b10a:	f043 0201 	orr.w	r2, r3, #1
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b112:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b116:	f003 0304 	and.w	r3, r3, #4
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d00b      	beq.n	800b136 <HAL_UART_IRQHandler+0xd2>
 800b11e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b122:	f003 0301 	and.w	r3, r3, #1
 800b126:	2b00      	cmp	r3, #0
 800b128:	d005      	beq.n	800b136 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b12e:	f043 0202 	orr.w	r2, r3, #2
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b136:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b13a:	f003 0302 	and.w	r3, r3, #2
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d00b      	beq.n	800b15a <HAL_UART_IRQHandler+0xf6>
 800b142:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b146:	f003 0301 	and.w	r3, r3, #1
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d005      	beq.n	800b15a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b152:	f043 0204 	orr.w	r2, r3, #4
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800b15a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b15e:	f003 0308 	and.w	r3, r3, #8
 800b162:	2b00      	cmp	r3, #0
 800b164:	d011      	beq.n	800b18a <HAL_UART_IRQHandler+0x126>
 800b166:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b16a:	f003 0320 	and.w	r3, r3, #32
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d105      	bne.n	800b17e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800b172:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b176:	f003 0301 	and.w	r3, r3, #1
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d005      	beq.n	800b18a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b182:	f043 0208 	orr.w	r2, r3, #8
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b18e:	2b00      	cmp	r3, #0
 800b190:	f000 81f2 	beq.w	800b578 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b194:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b198:	f003 0320 	and.w	r3, r3, #32
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d008      	beq.n	800b1b2 <HAL_UART_IRQHandler+0x14e>
 800b1a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b1a4:	f003 0320 	and.w	r3, r3, #32
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d002      	beq.n	800b1b2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800b1ac:	6878      	ldr	r0, [r7, #4]
 800b1ae:	f000 fd19 	bl	800bbe4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	695b      	ldr	r3, [r3, #20]
 800b1b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	bf14      	ite	ne
 800b1c0:	2301      	movne	r3, #1
 800b1c2:	2300      	moveq	r3, #0
 800b1c4:	b2db      	uxtb	r3, r3
 800b1c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b1ce:	f003 0308 	and.w	r3, r3, #8
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d103      	bne.n	800b1de <HAL_UART_IRQHandler+0x17a>
 800b1d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d04f      	beq.n	800b27e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b1de:	6878      	ldr	r0, [r7, #4]
 800b1e0:	f000 fc23 	bl	800ba2a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	695b      	ldr	r3, [r3, #20]
 800b1ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d041      	beq.n	800b276 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	3314      	adds	r3, #20
 800b1f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b200:	e853 3f00 	ldrex	r3, [r3]
 800b204:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b208:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b20c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b210:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	3314      	adds	r3, #20
 800b21a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b21e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b222:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b226:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b22a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b22e:	e841 2300 	strex	r3, r2, [r1]
 800b232:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b236:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d1d9      	bne.n	800b1f2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b242:	2b00      	cmp	r3, #0
 800b244:	d013      	beq.n	800b26e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b24a:	4a7e      	ldr	r2, [pc, #504]	; (800b444 <HAL_UART_IRQHandler+0x3e0>)
 800b24c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b252:	4618      	mov	r0, r3
 800b254:	f7fd fae0 	bl	8008818 <HAL_DMA_Abort_IT>
 800b258:	4603      	mov	r3, r0
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d016      	beq.n	800b28c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b262:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b264:	687a      	ldr	r2, [r7, #4]
 800b266:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800b268:	4610      	mov	r0, r2
 800b26a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b26c:	e00e      	b.n	800b28c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b26e:	6878      	ldr	r0, [r7, #4]
 800b270:	f000 f9a5 	bl	800b5be <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b274:	e00a      	b.n	800b28c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b276:	6878      	ldr	r0, [r7, #4]
 800b278:	f000 f9a1 	bl	800b5be <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b27c:	e006      	b.n	800b28c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b27e:	6878      	ldr	r0, [r7, #4]
 800b280:	f000 f99d 	bl	800b5be <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	2200      	movs	r2, #0
 800b288:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800b28a:	e175      	b.n	800b578 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b28c:	bf00      	nop
    return;
 800b28e:	e173      	b.n	800b578 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b294:	2b01      	cmp	r3, #1
 800b296:	f040 814f 	bne.w	800b538 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800b29a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b29e:	f003 0310 	and.w	r3, r3, #16
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	f000 8148 	beq.w	800b538 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800b2a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b2ac:	f003 0310 	and.w	r3, r3, #16
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	f000 8141 	beq.w	800b538 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b2b6:	2300      	movs	r3, #0
 800b2b8:	60bb      	str	r3, [r7, #8]
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	60bb      	str	r3, [r7, #8]
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	685b      	ldr	r3, [r3, #4]
 800b2c8:	60bb      	str	r3, [r7, #8]
 800b2ca:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	695b      	ldr	r3, [r3, #20]
 800b2d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	f000 80b6 	beq.w	800b448 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	685b      	ldr	r3, [r3, #4]
 800b2e4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b2e8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	f000 8145 	beq.w	800b57c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b2f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b2fa:	429a      	cmp	r2, r3
 800b2fc:	f080 813e 	bcs.w	800b57c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b306:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b30c:	699b      	ldr	r3, [r3, #24]
 800b30e:	2b20      	cmp	r3, #32
 800b310:	f000 8088 	beq.w	800b424 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	330c      	adds	r3, #12
 800b31a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b31e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b322:	e853 3f00 	ldrex	r3, [r3]
 800b326:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b32a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b32e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b332:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	330c      	adds	r3, #12
 800b33c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800b340:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b344:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b348:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b34c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b350:	e841 2300 	strex	r3, r2, [r1]
 800b354:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b358:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d1d9      	bne.n	800b314 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	3314      	adds	r3, #20
 800b366:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b368:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b36a:	e853 3f00 	ldrex	r3, [r3]
 800b36e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b370:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b372:	f023 0301 	bic.w	r3, r3, #1
 800b376:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	3314      	adds	r3, #20
 800b380:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b384:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b388:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b38a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b38c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b390:	e841 2300 	strex	r3, r2, [r1]
 800b394:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b396:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d1e1      	bne.n	800b360 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	3314      	adds	r3, #20
 800b3a2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b3a6:	e853 3f00 	ldrex	r3, [r3]
 800b3aa:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b3ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b3ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b3b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	3314      	adds	r3, #20
 800b3bc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b3c0:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b3c2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3c4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b3c6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b3c8:	e841 2300 	strex	r3, r2, [r1]
 800b3cc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b3ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d1e3      	bne.n	800b39c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	2220      	movs	r2, #32
 800b3d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	2200      	movs	r2, #0
 800b3e0:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	330c      	adds	r3, #12
 800b3e8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b3ec:	e853 3f00 	ldrex	r3, [r3]
 800b3f0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b3f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b3f4:	f023 0310 	bic.w	r3, r3, #16
 800b3f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	330c      	adds	r3, #12
 800b402:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b406:	65ba      	str	r2, [r7, #88]	; 0x58
 800b408:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b40a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b40c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b40e:	e841 2300 	strex	r3, r2, [r1]
 800b412:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b414:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b416:	2b00      	cmp	r3, #0
 800b418:	d1e3      	bne.n	800b3e2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b41e:	4618      	mov	r0, r3
 800b420:	f7fd f9be 	bl	80087a0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	2202      	movs	r2, #2
 800b428:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b432:	b29b      	uxth	r3, r3
 800b434:	1ad3      	subs	r3, r2, r3
 800b436:	b29b      	uxth	r3, r3
 800b438:	4619      	mov	r1, r3
 800b43a:	6878      	ldr	r0, [r7, #4]
 800b43c:	f7fa fda0 	bl	8005f80 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b440:	e09c      	b.n	800b57c <HAL_UART_IRQHandler+0x518>
 800b442:	bf00      	nop
 800b444:	0800baef 	.word	0x0800baef
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b450:	b29b      	uxth	r3, r3
 800b452:	1ad3      	subs	r3, r2, r3
 800b454:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b45c:	b29b      	uxth	r3, r3
 800b45e:	2b00      	cmp	r3, #0
 800b460:	f000 808e 	beq.w	800b580 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800b464:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b468:	2b00      	cmp	r3, #0
 800b46a:	f000 8089 	beq.w	800b580 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	330c      	adds	r3, #12
 800b474:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b478:	e853 3f00 	ldrex	r3, [r3]
 800b47c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b47e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b480:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b484:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	330c      	adds	r3, #12
 800b48e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800b492:	647a      	str	r2, [r7, #68]	; 0x44
 800b494:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b496:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b498:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b49a:	e841 2300 	strex	r3, r2, [r1]
 800b49e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b4a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d1e3      	bne.n	800b46e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	3314      	adds	r3, #20
 800b4ac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4b0:	e853 3f00 	ldrex	r3, [r3]
 800b4b4:	623b      	str	r3, [r7, #32]
   return(result);
 800b4b6:	6a3b      	ldr	r3, [r7, #32]
 800b4b8:	f023 0301 	bic.w	r3, r3, #1
 800b4bc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	3314      	adds	r3, #20
 800b4c6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b4ca:	633a      	str	r2, [r7, #48]	; 0x30
 800b4cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b4d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b4d2:	e841 2300 	strex	r3, r2, [r1]
 800b4d6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b4d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d1e3      	bne.n	800b4a6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	2220      	movs	r2, #32
 800b4e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	2200      	movs	r2, #0
 800b4ea:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	330c      	adds	r3, #12
 800b4f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4f4:	693b      	ldr	r3, [r7, #16]
 800b4f6:	e853 3f00 	ldrex	r3, [r3]
 800b4fa:	60fb      	str	r3, [r7, #12]
   return(result);
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	f023 0310 	bic.w	r3, r3, #16
 800b502:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	330c      	adds	r3, #12
 800b50c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800b510:	61fa      	str	r2, [r7, #28]
 800b512:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b514:	69b9      	ldr	r1, [r7, #24]
 800b516:	69fa      	ldr	r2, [r7, #28]
 800b518:	e841 2300 	strex	r3, r2, [r1]
 800b51c:	617b      	str	r3, [r7, #20]
   return(result);
 800b51e:	697b      	ldr	r3, [r7, #20]
 800b520:	2b00      	cmp	r3, #0
 800b522:	d1e3      	bne.n	800b4ec <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	2202      	movs	r2, #2
 800b528:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b52a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b52e:	4619      	mov	r1, r3
 800b530:	6878      	ldr	r0, [r7, #4]
 800b532:	f7fa fd25 	bl	8005f80 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b536:	e023      	b.n	800b580 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b538:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b53c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b540:	2b00      	cmp	r3, #0
 800b542:	d009      	beq.n	800b558 <HAL_UART_IRQHandler+0x4f4>
 800b544:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b548:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d003      	beq.n	800b558 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800b550:	6878      	ldr	r0, [r7, #4]
 800b552:	f000 fae0 	bl	800bb16 <UART_Transmit_IT>
    return;
 800b556:	e014      	b.n	800b582 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b558:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b55c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b560:	2b00      	cmp	r3, #0
 800b562:	d00e      	beq.n	800b582 <HAL_UART_IRQHandler+0x51e>
 800b564:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b568:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d008      	beq.n	800b582 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800b570:	6878      	ldr	r0, [r7, #4]
 800b572:	f000 fb1f 	bl	800bbb4 <UART_EndTransmit_IT>
    return;
 800b576:	e004      	b.n	800b582 <HAL_UART_IRQHandler+0x51e>
    return;
 800b578:	bf00      	nop
 800b57a:	e002      	b.n	800b582 <HAL_UART_IRQHandler+0x51e>
      return;
 800b57c:	bf00      	nop
 800b57e:	e000      	b.n	800b582 <HAL_UART_IRQHandler+0x51e>
      return;
 800b580:	bf00      	nop
  }
}
 800b582:	37e8      	adds	r7, #232	; 0xe8
 800b584:	46bd      	mov	sp, r7
 800b586:	bd80      	pop	{r7, pc}

0800b588 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b588:	b480      	push	{r7}
 800b58a:	b083      	sub	sp, #12
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800b590:	bf00      	nop
 800b592:	370c      	adds	r7, #12
 800b594:	46bd      	mov	sp, r7
 800b596:	bc80      	pop	{r7}
 800b598:	4770      	bx	lr

0800b59a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800b59a:	b480      	push	{r7}
 800b59c:	b083      	sub	sp, #12
 800b59e:	af00      	add	r7, sp, #0
 800b5a0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800b5a2:	bf00      	nop
 800b5a4:	370c      	adds	r7, #12
 800b5a6:	46bd      	mov	sp, r7
 800b5a8:	bc80      	pop	{r7}
 800b5aa:	4770      	bx	lr

0800b5ac <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b5ac:	b480      	push	{r7}
 800b5ae:	b083      	sub	sp, #12
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800b5b4:	bf00      	nop
 800b5b6:	370c      	adds	r7, #12
 800b5b8:	46bd      	mov	sp, r7
 800b5ba:	bc80      	pop	{r7}
 800b5bc:	4770      	bx	lr

0800b5be <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b5be:	b480      	push	{r7}
 800b5c0:	b083      	sub	sp, #12
 800b5c2:	af00      	add	r7, sp, #0
 800b5c4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b5c6:	bf00      	nop
 800b5c8:	370c      	adds	r7, #12
 800b5ca:	46bd      	mov	sp, r7
 800b5cc:	bc80      	pop	{r7}
 800b5ce:	4770      	bx	lr

0800b5d0 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b5d0:	b580      	push	{r7, lr}
 800b5d2:	b09c      	sub	sp, #112	; 0x70
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5dc:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	f003 0320 	and.w	r3, r3, #32
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d172      	bne.n	800b6d2 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800b5ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b5ee:	2200      	movs	r2, #0
 800b5f0:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b5f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	330c      	adds	r3, #12
 800b5f8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b5fc:	e853 3f00 	ldrex	r3, [r3]
 800b600:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b602:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b604:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b608:	66bb      	str	r3, [r7, #104]	; 0x68
 800b60a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	330c      	adds	r3, #12
 800b610:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b612:	65ba      	str	r2, [r7, #88]	; 0x58
 800b614:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b616:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b618:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b61a:	e841 2300 	strex	r3, r2, [r1]
 800b61e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b620:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b622:	2b00      	cmp	r3, #0
 800b624:	d1e5      	bne.n	800b5f2 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b626:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	3314      	adds	r3, #20
 800b62c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b62e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b630:	e853 3f00 	ldrex	r3, [r3]
 800b634:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b636:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b638:	f023 0301 	bic.w	r3, r3, #1
 800b63c:	667b      	str	r3, [r7, #100]	; 0x64
 800b63e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	3314      	adds	r3, #20
 800b644:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b646:	647a      	str	r2, [r7, #68]	; 0x44
 800b648:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b64a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b64c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b64e:	e841 2300 	strex	r3, r2, [r1]
 800b652:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b654:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b656:	2b00      	cmp	r3, #0
 800b658:	d1e5      	bne.n	800b626 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b65a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	3314      	adds	r3, #20
 800b660:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b664:	e853 3f00 	ldrex	r3, [r3]
 800b668:	623b      	str	r3, [r7, #32]
   return(result);
 800b66a:	6a3b      	ldr	r3, [r7, #32]
 800b66c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b670:	663b      	str	r3, [r7, #96]	; 0x60
 800b672:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	3314      	adds	r3, #20
 800b678:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b67a:	633a      	str	r2, [r7, #48]	; 0x30
 800b67c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b67e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b680:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b682:	e841 2300 	strex	r3, r2, [r1]
 800b686:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d1e5      	bne.n	800b65a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b68e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b690:	2220      	movs	r2, #32
 800b692:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b696:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b69a:	2b01      	cmp	r3, #1
 800b69c:	d119      	bne.n	800b6d2 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b69e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	330c      	adds	r3, #12
 800b6a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6a6:	693b      	ldr	r3, [r7, #16]
 800b6a8:	e853 3f00 	ldrex	r3, [r3]
 800b6ac:	60fb      	str	r3, [r7, #12]
   return(result);
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	f023 0310 	bic.w	r3, r3, #16
 800b6b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b6b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	330c      	adds	r3, #12
 800b6bc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b6be:	61fa      	str	r2, [r7, #28]
 800b6c0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6c2:	69b9      	ldr	r1, [r7, #24]
 800b6c4:	69fa      	ldr	r2, [r7, #28]
 800b6c6:	e841 2300 	strex	r3, r2, [r1]
 800b6ca:	617b      	str	r3, [r7, #20]
   return(result);
 800b6cc:	697b      	ldr	r3, [r7, #20]
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d1e5      	bne.n	800b69e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b6d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b6d4:	2200      	movs	r2, #0
 800b6d6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b6d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b6da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6dc:	2b01      	cmp	r3, #1
 800b6de:	d106      	bne.n	800b6ee <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b6e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b6e2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b6e4:	4619      	mov	r1, r3
 800b6e6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b6e8:	f7fa fc4a 	bl	8005f80 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b6ec:	e002      	b.n	800b6f4 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800b6ee:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b6f0:	f7ff ff53 	bl	800b59a <HAL_UART_RxCpltCallback>
}
 800b6f4:	bf00      	nop
 800b6f6:	3770      	adds	r7, #112	; 0x70
 800b6f8:	46bd      	mov	sp, r7
 800b6fa:	bd80      	pop	{r7, pc}

0800b6fc <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b6fc:	b580      	push	{r7, lr}
 800b6fe:	b084      	sub	sp, #16
 800b700:	af00      	add	r7, sp, #0
 800b702:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b708:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	2201      	movs	r2, #1
 800b70e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b714:	2b01      	cmp	r3, #1
 800b716:	d108      	bne.n	800b72a <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b71c:	085b      	lsrs	r3, r3, #1
 800b71e:	b29b      	uxth	r3, r3
 800b720:	4619      	mov	r1, r3
 800b722:	68f8      	ldr	r0, [r7, #12]
 800b724:	f7fa fc2c 	bl	8005f80 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b728:	e002      	b.n	800b730 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800b72a:	68f8      	ldr	r0, [r7, #12]
 800b72c:	f7ff ff3e 	bl	800b5ac <HAL_UART_RxHalfCpltCallback>
}
 800b730:	bf00      	nop
 800b732:	3710      	adds	r7, #16
 800b734:	46bd      	mov	sp, r7
 800b736:	bd80      	pop	{r7, pc}

0800b738 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b738:	b580      	push	{r7, lr}
 800b73a:	b084      	sub	sp, #16
 800b73c:	af00      	add	r7, sp, #0
 800b73e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800b740:	2300      	movs	r3, #0
 800b742:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b748:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800b74a:	68bb      	ldr	r3, [r7, #8]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	695b      	ldr	r3, [r3, #20]
 800b750:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b754:	2b00      	cmp	r3, #0
 800b756:	bf14      	ite	ne
 800b758:	2301      	movne	r3, #1
 800b75a:	2300      	moveq	r3, #0
 800b75c:	b2db      	uxtb	r3, r3
 800b75e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800b760:	68bb      	ldr	r3, [r7, #8]
 800b762:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b766:	b2db      	uxtb	r3, r3
 800b768:	2b21      	cmp	r3, #33	; 0x21
 800b76a:	d108      	bne.n	800b77e <UART_DMAError+0x46>
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d005      	beq.n	800b77e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800b772:	68bb      	ldr	r3, [r7, #8]
 800b774:	2200      	movs	r2, #0
 800b776:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800b778:	68b8      	ldr	r0, [r7, #8]
 800b77a:	f000 f92f 	bl	800b9dc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b77e:	68bb      	ldr	r3, [r7, #8]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	695b      	ldr	r3, [r3, #20]
 800b784:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b788:	2b00      	cmp	r3, #0
 800b78a:	bf14      	ite	ne
 800b78c:	2301      	movne	r3, #1
 800b78e:	2300      	moveq	r3, #0
 800b790:	b2db      	uxtb	r3, r3
 800b792:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800b794:	68bb      	ldr	r3, [r7, #8]
 800b796:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b79a:	b2db      	uxtb	r3, r3
 800b79c:	2b22      	cmp	r3, #34	; 0x22
 800b79e:	d108      	bne.n	800b7b2 <UART_DMAError+0x7a>
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d005      	beq.n	800b7b2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800b7a6:	68bb      	ldr	r3, [r7, #8]
 800b7a8:	2200      	movs	r2, #0
 800b7aa:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800b7ac:	68b8      	ldr	r0, [r7, #8]
 800b7ae:	f000 f93c 	bl	800ba2a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b7b2:	68bb      	ldr	r3, [r7, #8]
 800b7b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b7b6:	f043 0210 	orr.w	r2, r3, #16
 800b7ba:	68bb      	ldr	r3, [r7, #8]
 800b7bc:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b7be:	68b8      	ldr	r0, [r7, #8]
 800b7c0:	f7ff fefd 	bl	800b5be <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b7c4:	bf00      	nop
 800b7c6:	3710      	adds	r7, #16
 800b7c8:	46bd      	mov	sp, r7
 800b7ca:	bd80      	pop	{r7, pc}

0800b7cc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800b7cc:	b580      	push	{r7, lr}
 800b7ce:	b090      	sub	sp, #64	; 0x40
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	60f8      	str	r0, [r7, #12]
 800b7d4:	60b9      	str	r1, [r7, #8]
 800b7d6:	603b      	str	r3, [r7, #0]
 800b7d8:	4613      	mov	r3, r2
 800b7da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b7dc:	e050      	b.n	800b880 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b7de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b7e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7e4:	d04c      	beq.n	800b880 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800b7e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d007      	beq.n	800b7fc <UART_WaitOnFlagUntilTimeout+0x30>
 800b7ec:	f7fc f9e4 	bl	8007bb8 <HAL_GetTick>
 800b7f0:	4602      	mov	r2, r0
 800b7f2:	683b      	ldr	r3, [r7, #0]
 800b7f4:	1ad3      	subs	r3, r2, r3
 800b7f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b7f8:	429a      	cmp	r2, r3
 800b7fa:	d241      	bcs.n	800b880 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	330c      	adds	r3, #12
 800b802:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b806:	e853 3f00 	ldrex	r3, [r3]
 800b80a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b80c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b80e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b812:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	330c      	adds	r3, #12
 800b81a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b81c:	637a      	str	r2, [r7, #52]	; 0x34
 800b81e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b820:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b822:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b824:	e841 2300 	strex	r3, r2, [r1]
 800b828:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b82a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d1e5      	bne.n	800b7fc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	3314      	adds	r3, #20
 800b836:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b838:	697b      	ldr	r3, [r7, #20]
 800b83a:	e853 3f00 	ldrex	r3, [r3]
 800b83e:	613b      	str	r3, [r7, #16]
   return(result);
 800b840:	693b      	ldr	r3, [r7, #16]
 800b842:	f023 0301 	bic.w	r3, r3, #1
 800b846:	63bb      	str	r3, [r7, #56]	; 0x38
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	3314      	adds	r3, #20
 800b84e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b850:	623a      	str	r2, [r7, #32]
 800b852:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b854:	69f9      	ldr	r1, [r7, #28]
 800b856:	6a3a      	ldr	r2, [r7, #32]
 800b858:	e841 2300 	strex	r3, r2, [r1]
 800b85c:	61bb      	str	r3, [r7, #24]
   return(result);
 800b85e:	69bb      	ldr	r3, [r7, #24]
 800b860:	2b00      	cmp	r3, #0
 800b862:	d1e5      	bne.n	800b830 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	2220      	movs	r2, #32
 800b868:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	2220      	movs	r2, #32
 800b870:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	2200      	movs	r2, #0
 800b878:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800b87c:	2303      	movs	r3, #3
 800b87e:	e00f      	b.n	800b8a0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	681a      	ldr	r2, [r3, #0]
 800b886:	68bb      	ldr	r3, [r7, #8]
 800b888:	4013      	ands	r3, r2
 800b88a:	68ba      	ldr	r2, [r7, #8]
 800b88c:	429a      	cmp	r2, r3
 800b88e:	bf0c      	ite	eq
 800b890:	2301      	moveq	r3, #1
 800b892:	2300      	movne	r3, #0
 800b894:	b2db      	uxtb	r3, r3
 800b896:	461a      	mov	r2, r3
 800b898:	79fb      	ldrb	r3, [r7, #7]
 800b89a:	429a      	cmp	r2, r3
 800b89c:	d09f      	beq.n	800b7de <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b89e:	2300      	movs	r3, #0
}
 800b8a0:	4618      	mov	r0, r3
 800b8a2:	3740      	adds	r7, #64	; 0x40
 800b8a4:	46bd      	mov	sp, r7
 800b8a6:	bd80      	pop	{r7, pc}

0800b8a8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b8a8:	b580      	push	{r7, lr}
 800b8aa:	b098      	sub	sp, #96	; 0x60
 800b8ac:	af00      	add	r7, sp, #0
 800b8ae:	60f8      	str	r0, [r7, #12]
 800b8b0:	60b9      	str	r1, [r7, #8]
 800b8b2:	4613      	mov	r3, r2
 800b8b4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800b8b6:	68ba      	ldr	r2, [r7, #8]
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	88fa      	ldrh	r2, [r7, #6]
 800b8c0:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	2200      	movs	r2, #0
 800b8c6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	2222      	movs	r2, #34	; 0x22
 800b8cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b8d4:	4a3e      	ldr	r2, [pc, #248]	; (800b9d0 <UART_Start_Receive_DMA+0x128>)
 800b8d6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b8dc:	4a3d      	ldr	r2, [pc, #244]	; (800b9d4 <UART_Start_Receive_DMA+0x12c>)
 800b8de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b8e4:	4a3c      	ldr	r2, [pc, #240]	; (800b9d8 <UART_Start_Receive_DMA+0x130>)
 800b8e6:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b8ec:	2200      	movs	r2, #0
 800b8ee:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800b8f0:	f107 0308 	add.w	r3, r7, #8
 800b8f4:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	3304      	adds	r3, #4
 800b900:	4619      	mov	r1, r3
 800b902:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b904:	681a      	ldr	r2, [r3, #0]
 800b906:	88fb      	ldrh	r3, [r7, #6]
 800b908:	f7fc feea 	bl	80086e0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800b90c:	2300      	movs	r3, #0
 800b90e:	613b      	str	r3, [r7, #16]
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	613b      	str	r3, [r7, #16]
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	685b      	ldr	r3, [r3, #4]
 800b91e:	613b      	str	r3, [r7, #16]
 800b920:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	691b      	ldr	r3, [r3, #16]
 800b926:	2b00      	cmp	r3, #0
 800b928:	d019      	beq.n	800b95e <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	330c      	adds	r3, #12
 800b930:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b932:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b934:	e853 3f00 	ldrex	r3, [r3]
 800b938:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b93a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b93c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b940:	65bb      	str	r3, [r7, #88]	; 0x58
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	330c      	adds	r3, #12
 800b948:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b94a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800b94c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b94e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800b950:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b952:	e841 2300 	strex	r3, r2, [r1]
 800b956:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800b958:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d1e5      	bne.n	800b92a <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	3314      	adds	r3, #20
 800b964:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b968:	e853 3f00 	ldrex	r3, [r3]
 800b96c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b96e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b970:	f043 0301 	orr.w	r3, r3, #1
 800b974:	657b      	str	r3, [r7, #84]	; 0x54
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	3314      	adds	r3, #20
 800b97c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b97e:	63ba      	str	r2, [r7, #56]	; 0x38
 800b980:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b982:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b984:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b986:	e841 2300 	strex	r3, r2, [r1]
 800b98a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b98c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d1e5      	bne.n	800b95e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	3314      	adds	r3, #20
 800b998:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b99a:	69bb      	ldr	r3, [r7, #24]
 800b99c:	e853 3f00 	ldrex	r3, [r3]
 800b9a0:	617b      	str	r3, [r7, #20]
   return(result);
 800b9a2:	697b      	ldr	r3, [r7, #20]
 800b9a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b9a8:	653b      	str	r3, [r7, #80]	; 0x50
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	3314      	adds	r3, #20
 800b9b0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b9b2:	627a      	str	r2, [r7, #36]	; 0x24
 800b9b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9b6:	6a39      	ldr	r1, [r7, #32]
 800b9b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b9ba:	e841 2300 	strex	r3, r2, [r1]
 800b9be:	61fb      	str	r3, [r7, #28]
   return(result);
 800b9c0:	69fb      	ldr	r3, [r7, #28]
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d1e5      	bne.n	800b992 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800b9c6:	2300      	movs	r3, #0
}
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	3760      	adds	r7, #96	; 0x60
 800b9cc:	46bd      	mov	sp, r7
 800b9ce:	bd80      	pop	{r7, pc}
 800b9d0:	0800b5d1 	.word	0x0800b5d1
 800b9d4:	0800b6fd 	.word	0x0800b6fd
 800b9d8:	0800b739 	.word	0x0800b739

0800b9dc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b9dc:	b480      	push	{r7}
 800b9de:	b089      	sub	sp, #36	; 0x24
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	330c      	adds	r3, #12
 800b9ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	e853 3f00 	ldrex	r3, [r3]
 800b9f2:	60bb      	str	r3, [r7, #8]
   return(result);
 800b9f4:	68bb      	ldr	r3, [r7, #8]
 800b9f6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b9fa:	61fb      	str	r3, [r7, #28]
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	330c      	adds	r3, #12
 800ba02:	69fa      	ldr	r2, [r7, #28]
 800ba04:	61ba      	str	r2, [r7, #24]
 800ba06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba08:	6979      	ldr	r1, [r7, #20]
 800ba0a:	69ba      	ldr	r2, [r7, #24]
 800ba0c:	e841 2300 	strex	r3, r2, [r1]
 800ba10:	613b      	str	r3, [r7, #16]
   return(result);
 800ba12:	693b      	ldr	r3, [r7, #16]
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d1e5      	bne.n	800b9e4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	2220      	movs	r2, #32
 800ba1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 800ba20:	bf00      	nop
 800ba22:	3724      	adds	r7, #36	; 0x24
 800ba24:	46bd      	mov	sp, r7
 800ba26:	bc80      	pop	{r7}
 800ba28:	4770      	bx	lr

0800ba2a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ba2a:	b480      	push	{r7}
 800ba2c:	b095      	sub	sp, #84	; 0x54
 800ba2e:	af00      	add	r7, sp, #0
 800ba30:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	330c      	adds	r3, #12
 800ba38:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba3c:	e853 3f00 	ldrex	r3, [r3]
 800ba40:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ba42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba44:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ba48:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	330c      	adds	r3, #12
 800ba50:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ba52:	643a      	str	r2, [r7, #64]	; 0x40
 800ba54:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba56:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ba58:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ba5a:	e841 2300 	strex	r3, r2, [r1]
 800ba5e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ba60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d1e5      	bne.n	800ba32 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	3314      	adds	r3, #20
 800ba6c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba6e:	6a3b      	ldr	r3, [r7, #32]
 800ba70:	e853 3f00 	ldrex	r3, [r3]
 800ba74:	61fb      	str	r3, [r7, #28]
   return(result);
 800ba76:	69fb      	ldr	r3, [r7, #28]
 800ba78:	f023 0301 	bic.w	r3, r3, #1
 800ba7c:	64bb      	str	r3, [r7, #72]	; 0x48
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	3314      	adds	r3, #20
 800ba84:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ba86:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ba88:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba8a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ba8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ba8e:	e841 2300 	strex	r3, r2, [r1]
 800ba92:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ba94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d1e5      	bne.n	800ba66 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba9e:	2b01      	cmp	r3, #1
 800baa0:	d119      	bne.n	800bad6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	330c      	adds	r3, #12
 800baa8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	e853 3f00 	ldrex	r3, [r3]
 800bab0:	60bb      	str	r3, [r7, #8]
   return(result);
 800bab2:	68bb      	ldr	r3, [r7, #8]
 800bab4:	f023 0310 	bic.w	r3, r3, #16
 800bab8:	647b      	str	r3, [r7, #68]	; 0x44
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	330c      	adds	r3, #12
 800bac0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bac2:	61ba      	str	r2, [r7, #24]
 800bac4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bac6:	6979      	ldr	r1, [r7, #20]
 800bac8:	69ba      	ldr	r2, [r7, #24]
 800baca:	e841 2300 	strex	r3, r2, [r1]
 800bace:	613b      	str	r3, [r7, #16]
   return(result);
 800bad0:	693b      	ldr	r3, [r7, #16]
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d1e5      	bne.n	800baa2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	2220      	movs	r2, #32
 800bada:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	2200      	movs	r2, #0
 800bae2:	631a      	str	r2, [r3, #48]	; 0x30
}
 800bae4:	bf00      	nop
 800bae6:	3754      	adds	r7, #84	; 0x54
 800bae8:	46bd      	mov	sp, r7
 800baea:	bc80      	pop	{r7}
 800baec:	4770      	bx	lr

0800baee <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800baee:	b580      	push	{r7, lr}
 800baf0:	b084      	sub	sp, #16
 800baf2:	af00      	add	r7, sp, #0
 800baf4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bafa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	2200      	movs	r2, #0
 800bb00:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	2200      	movs	r2, #0
 800bb06:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bb08:	68f8      	ldr	r0, [r7, #12]
 800bb0a:	f7ff fd58 	bl	800b5be <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bb0e:	bf00      	nop
 800bb10:	3710      	adds	r7, #16
 800bb12:	46bd      	mov	sp, r7
 800bb14:	bd80      	pop	{r7, pc}

0800bb16 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800bb16:	b480      	push	{r7}
 800bb18:	b085      	sub	sp, #20
 800bb1a:	af00      	add	r7, sp, #0
 800bb1c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bb24:	b2db      	uxtb	r3, r3
 800bb26:	2b21      	cmp	r3, #33	; 0x21
 800bb28:	d13e      	bne.n	800bba8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	689b      	ldr	r3, [r3, #8]
 800bb2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bb32:	d114      	bne.n	800bb5e <UART_Transmit_IT+0x48>
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	691b      	ldr	r3, [r3, #16]
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d110      	bne.n	800bb5e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	6a1b      	ldr	r3, [r3, #32]
 800bb40:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	881b      	ldrh	r3, [r3, #0]
 800bb46:	461a      	mov	r2, r3
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bb50:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	6a1b      	ldr	r3, [r3, #32]
 800bb56:	1c9a      	adds	r2, r3, #2
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	621a      	str	r2, [r3, #32]
 800bb5c:	e008      	b.n	800bb70 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	6a1b      	ldr	r3, [r3, #32]
 800bb62:	1c59      	adds	r1, r3, #1
 800bb64:	687a      	ldr	r2, [r7, #4]
 800bb66:	6211      	str	r1, [r2, #32]
 800bb68:	781a      	ldrb	r2, [r3, #0]
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800bb74:	b29b      	uxth	r3, r3
 800bb76:	3b01      	subs	r3, #1
 800bb78:	b29b      	uxth	r3, r3
 800bb7a:	687a      	ldr	r2, [r7, #4]
 800bb7c:	4619      	mov	r1, r3
 800bb7e:	84d1      	strh	r1, [r2, #38]	; 0x26
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d10f      	bne.n	800bba4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	68da      	ldr	r2, [r3, #12]
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bb92:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	68da      	ldr	r2, [r3, #12]
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bba2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800bba4:	2300      	movs	r3, #0
 800bba6:	e000      	b.n	800bbaa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800bba8:	2302      	movs	r3, #2
  }
}
 800bbaa:	4618      	mov	r0, r3
 800bbac:	3714      	adds	r7, #20
 800bbae:	46bd      	mov	sp, r7
 800bbb0:	bc80      	pop	{r7}
 800bbb2:	4770      	bx	lr

0800bbb4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bbb4:	b580      	push	{r7, lr}
 800bbb6:	b082      	sub	sp, #8
 800bbb8:	af00      	add	r7, sp, #0
 800bbba:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	68da      	ldr	r2, [r3, #12]
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bbca:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	2220      	movs	r2, #32
 800bbd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bbd4:	6878      	ldr	r0, [r7, #4]
 800bbd6:	f7ff fcd7 	bl	800b588 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800bbda:	2300      	movs	r3, #0
}
 800bbdc:	4618      	mov	r0, r3
 800bbde:	3708      	adds	r7, #8
 800bbe0:	46bd      	mov	sp, r7
 800bbe2:	bd80      	pop	{r7, pc}

0800bbe4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800bbe4:	b580      	push	{r7, lr}
 800bbe6:	b08c      	sub	sp, #48	; 0x30
 800bbe8:	af00      	add	r7, sp, #0
 800bbea:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bbf2:	b2db      	uxtb	r3, r3
 800bbf4:	2b22      	cmp	r3, #34	; 0x22
 800bbf6:	f040 80ae 	bne.w	800bd56 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	689b      	ldr	r3, [r3, #8]
 800bbfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bc02:	d117      	bne.n	800bc34 <UART_Receive_IT+0x50>
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	691b      	ldr	r3, [r3, #16]
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d113      	bne.n	800bc34 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800bc0c:	2300      	movs	r3, #0
 800bc0e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc14:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	685b      	ldr	r3, [r3, #4]
 800bc1c:	b29b      	uxth	r3, r3
 800bc1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc22:	b29a      	uxth	r2, r3
 800bc24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc26:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc2c:	1c9a      	adds	r2, r3, #2
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	629a      	str	r2, [r3, #40]	; 0x28
 800bc32:	e026      	b.n	800bc82 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc38:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800bc3a:	2300      	movs	r3, #0
 800bc3c:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	689b      	ldr	r3, [r3, #8]
 800bc42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bc46:	d007      	beq.n	800bc58 <UART_Receive_IT+0x74>
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	689b      	ldr	r3, [r3, #8]
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d10a      	bne.n	800bc66 <UART_Receive_IT+0x82>
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	691b      	ldr	r3, [r3, #16]
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d106      	bne.n	800bc66 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	685b      	ldr	r3, [r3, #4]
 800bc5e:	b2da      	uxtb	r2, r3
 800bc60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc62:	701a      	strb	r2, [r3, #0]
 800bc64:	e008      	b.n	800bc78 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	685b      	ldr	r3, [r3, #4]
 800bc6c:	b2db      	uxtb	r3, r3
 800bc6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bc72:	b2da      	uxtb	r2, r3
 800bc74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc76:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc7c:	1c5a      	adds	r2, r3, #1
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bc86:	b29b      	uxth	r3, r3
 800bc88:	3b01      	subs	r3, #1
 800bc8a:	b29b      	uxth	r3, r3
 800bc8c:	687a      	ldr	r2, [r7, #4]
 800bc8e:	4619      	mov	r1, r3
 800bc90:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d15d      	bne.n	800bd52 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	68da      	ldr	r2, [r3, #12]
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	f022 0220 	bic.w	r2, r2, #32
 800bca4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	68da      	ldr	r2, [r3, #12]
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bcb4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	695a      	ldr	r2, [r3, #20]
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	f022 0201 	bic.w	r2, r2, #1
 800bcc4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	2220      	movs	r2, #32
 800bcca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	2200      	movs	r2, #0
 800bcd2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bcd8:	2b01      	cmp	r3, #1
 800bcda:	d135      	bne.n	800bd48 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	2200      	movs	r2, #0
 800bce0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	330c      	adds	r3, #12
 800bce8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcea:	697b      	ldr	r3, [r7, #20]
 800bcec:	e853 3f00 	ldrex	r3, [r3]
 800bcf0:	613b      	str	r3, [r7, #16]
   return(result);
 800bcf2:	693b      	ldr	r3, [r7, #16]
 800bcf4:	f023 0310 	bic.w	r3, r3, #16
 800bcf8:	627b      	str	r3, [r7, #36]	; 0x24
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	330c      	adds	r3, #12
 800bd00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bd02:	623a      	str	r2, [r7, #32]
 800bd04:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd06:	69f9      	ldr	r1, [r7, #28]
 800bd08:	6a3a      	ldr	r2, [r7, #32]
 800bd0a:	e841 2300 	strex	r3, r2, [r1]
 800bd0e:	61bb      	str	r3, [r7, #24]
   return(result);
 800bd10:	69bb      	ldr	r3, [r7, #24]
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d1e5      	bne.n	800bce2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	f003 0310 	and.w	r3, r3, #16
 800bd20:	2b10      	cmp	r3, #16
 800bd22:	d10a      	bne.n	800bd3a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800bd24:	2300      	movs	r3, #0
 800bd26:	60fb      	str	r3, [r7, #12]
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	60fb      	str	r3, [r7, #12]
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	685b      	ldr	r3, [r3, #4]
 800bd36:	60fb      	str	r3, [r7, #12]
 800bd38:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800bd3e:	4619      	mov	r1, r3
 800bd40:	6878      	ldr	r0, [r7, #4]
 800bd42:	f7fa f91d 	bl	8005f80 <HAL_UARTEx_RxEventCallback>
 800bd46:	e002      	b.n	800bd4e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800bd48:	6878      	ldr	r0, [r7, #4]
 800bd4a:	f7ff fc26 	bl	800b59a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800bd4e:	2300      	movs	r3, #0
 800bd50:	e002      	b.n	800bd58 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800bd52:	2300      	movs	r3, #0
 800bd54:	e000      	b.n	800bd58 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800bd56:	2302      	movs	r3, #2
  }
}
 800bd58:	4618      	mov	r0, r3
 800bd5a:	3730      	adds	r7, #48	; 0x30
 800bd5c:	46bd      	mov	sp, r7
 800bd5e:	bd80      	pop	{r7, pc}

0800bd60 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bd60:	b580      	push	{r7, lr}
 800bd62:	b084      	sub	sp, #16
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	691b      	ldr	r3, [r3, #16]
 800bd6e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	68da      	ldr	r2, [r3, #12]
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	430a      	orrs	r2, r1
 800bd7c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	689a      	ldr	r2, [r3, #8]
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	691b      	ldr	r3, [r3, #16]
 800bd86:	431a      	orrs	r2, r3
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	695b      	ldr	r3, [r3, #20]
 800bd8c:	4313      	orrs	r3, r2
 800bd8e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	68db      	ldr	r3, [r3, #12]
 800bd96:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800bd9a:	f023 030c 	bic.w	r3, r3, #12
 800bd9e:	687a      	ldr	r2, [r7, #4]
 800bda0:	6812      	ldr	r2, [r2, #0]
 800bda2:	68b9      	ldr	r1, [r7, #8]
 800bda4:	430b      	orrs	r3, r1
 800bda6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	695b      	ldr	r3, [r3, #20]
 800bdae:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	699a      	ldr	r2, [r3, #24]
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	430a      	orrs	r2, r1
 800bdbc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	4a2c      	ldr	r2, [pc, #176]	; (800be74 <UART_SetConfig+0x114>)
 800bdc4:	4293      	cmp	r3, r2
 800bdc6:	d103      	bne.n	800bdd0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800bdc8:	f7fe fcc8 	bl	800a75c <HAL_RCC_GetPCLK2Freq>
 800bdcc:	60f8      	str	r0, [r7, #12]
 800bdce:	e002      	b.n	800bdd6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800bdd0:	f7fe fcb0 	bl	800a734 <HAL_RCC_GetPCLK1Freq>
 800bdd4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800bdd6:	68fa      	ldr	r2, [r7, #12]
 800bdd8:	4613      	mov	r3, r2
 800bdda:	009b      	lsls	r3, r3, #2
 800bddc:	4413      	add	r3, r2
 800bdde:	009a      	lsls	r2, r3, #2
 800bde0:	441a      	add	r2, r3
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	685b      	ldr	r3, [r3, #4]
 800bde6:	009b      	lsls	r3, r3, #2
 800bde8:	fbb2 f3f3 	udiv	r3, r2, r3
 800bdec:	4a22      	ldr	r2, [pc, #136]	; (800be78 <UART_SetConfig+0x118>)
 800bdee:	fba2 2303 	umull	r2, r3, r2, r3
 800bdf2:	095b      	lsrs	r3, r3, #5
 800bdf4:	0119      	lsls	r1, r3, #4
 800bdf6:	68fa      	ldr	r2, [r7, #12]
 800bdf8:	4613      	mov	r3, r2
 800bdfa:	009b      	lsls	r3, r3, #2
 800bdfc:	4413      	add	r3, r2
 800bdfe:	009a      	lsls	r2, r3, #2
 800be00:	441a      	add	r2, r3
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	685b      	ldr	r3, [r3, #4]
 800be06:	009b      	lsls	r3, r3, #2
 800be08:	fbb2 f2f3 	udiv	r2, r2, r3
 800be0c:	4b1a      	ldr	r3, [pc, #104]	; (800be78 <UART_SetConfig+0x118>)
 800be0e:	fba3 0302 	umull	r0, r3, r3, r2
 800be12:	095b      	lsrs	r3, r3, #5
 800be14:	2064      	movs	r0, #100	; 0x64
 800be16:	fb00 f303 	mul.w	r3, r0, r3
 800be1a:	1ad3      	subs	r3, r2, r3
 800be1c:	011b      	lsls	r3, r3, #4
 800be1e:	3332      	adds	r3, #50	; 0x32
 800be20:	4a15      	ldr	r2, [pc, #84]	; (800be78 <UART_SetConfig+0x118>)
 800be22:	fba2 2303 	umull	r2, r3, r2, r3
 800be26:	095b      	lsrs	r3, r3, #5
 800be28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800be2c:	4419      	add	r1, r3
 800be2e:	68fa      	ldr	r2, [r7, #12]
 800be30:	4613      	mov	r3, r2
 800be32:	009b      	lsls	r3, r3, #2
 800be34:	4413      	add	r3, r2
 800be36:	009a      	lsls	r2, r3, #2
 800be38:	441a      	add	r2, r3
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	685b      	ldr	r3, [r3, #4]
 800be3e:	009b      	lsls	r3, r3, #2
 800be40:	fbb2 f2f3 	udiv	r2, r2, r3
 800be44:	4b0c      	ldr	r3, [pc, #48]	; (800be78 <UART_SetConfig+0x118>)
 800be46:	fba3 0302 	umull	r0, r3, r3, r2
 800be4a:	095b      	lsrs	r3, r3, #5
 800be4c:	2064      	movs	r0, #100	; 0x64
 800be4e:	fb00 f303 	mul.w	r3, r0, r3
 800be52:	1ad3      	subs	r3, r2, r3
 800be54:	011b      	lsls	r3, r3, #4
 800be56:	3332      	adds	r3, #50	; 0x32
 800be58:	4a07      	ldr	r2, [pc, #28]	; (800be78 <UART_SetConfig+0x118>)
 800be5a:	fba2 2303 	umull	r2, r3, r2, r3
 800be5e:	095b      	lsrs	r3, r3, #5
 800be60:	f003 020f 	and.w	r2, r3, #15
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	440a      	add	r2, r1
 800be6a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800be6c:	bf00      	nop
 800be6e:	3710      	adds	r7, #16
 800be70:	46bd      	mov	sp, r7
 800be72:	bd80      	pop	{r7, pc}
 800be74:	40013800 	.word	0x40013800
 800be78:	51eb851f 	.word	0x51eb851f

0800be7c <atoi>:
 800be7c:	220a      	movs	r2, #10
 800be7e:	2100      	movs	r1, #0
 800be80:	f000 bdc8 	b.w	800ca14 <strtol>

0800be84 <__errno>:
 800be84:	4b01      	ldr	r3, [pc, #4]	; (800be8c <__errno+0x8>)
 800be86:	6818      	ldr	r0, [r3, #0]
 800be88:	4770      	bx	lr
 800be8a:	bf00      	nop
 800be8c:	200004e0 	.word	0x200004e0

0800be90 <__libc_init_array>:
 800be90:	b570      	push	{r4, r5, r6, lr}
 800be92:	2600      	movs	r6, #0
 800be94:	4d0c      	ldr	r5, [pc, #48]	; (800bec8 <__libc_init_array+0x38>)
 800be96:	4c0d      	ldr	r4, [pc, #52]	; (800becc <__libc_init_array+0x3c>)
 800be98:	1b64      	subs	r4, r4, r5
 800be9a:	10a4      	asrs	r4, r4, #2
 800be9c:	42a6      	cmp	r6, r4
 800be9e:	d109      	bne.n	800beb4 <__libc_init_array+0x24>
 800bea0:	f002 fe30 	bl	800eb04 <_init>
 800bea4:	2600      	movs	r6, #0
 800bea6:	4d0a      	ldr	r5, [pc, #40]	; (800bed0 <__libc_init_array+0x40>)
 800bea8:	4c0a      	ldr	r4, [pc, #40]	; (800bed4 <__libc_init_array+0x44>)
 800beaa:	1b64      	subs	r4, r4, r5
 800beac:	10a4      	asrs	r4, r4, #2
 800beae:	42a6      	cmp	r6, r4
 800beb0:	d105      	bne.n	800bebe <__libc_init_array+0x2e>
 800beb2:	bd70      	pop	{r4, r5, r6, pc}
 800beb4:	f855 3b04 	ldr.w	r3, [r5], #4
 800beb8:	4798      	blx	r3
 800beba:	3601      	adds	r6, #1
 800bebc:	e7ee      	b.n	800be9c <__libc_init_array+0xc>
 800bebe:	f855 3b04 	ldr.w	r3, [r5], #4
 800bec2:	4798      	blx	r3
 800bec4:	3601      	adds	r6, #1
 800bec6:	e7f2      	b.n	800beae <__libc_init_array+0x1e>
 800bec8:	0800f7e0 	.word	0x0800f7e0
 800becc:	0800f7e0 	.word	0x0800f7e0
 800bed0:	0800f7e0 	.word	0x0800f7e0
 800bed4:	0800f7e4 	.word	0x0800f7e4

0800bed8 <localtime>:
 800bed8:	b538      	push	{r3, r4, r5, lr}
 800beda:	4b0b      	ldr	r3, [pc, #44]	; (800bf08 <localtime+0x30>)
 800bedc:	4604      	mov	r4, r0
 800bede:	681d      	ldr	r5, [r3, #0]
 800bee0:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800bee2:	b953      	cbnz	r3, 800befa <localtime+0x22>
 800bee4:	2024      	movs	r0, #36	; 0x24
 800bee6:	f000 f907 	bl	800c0f8 <malloc>
 800beea:	4602      	mov	r2, r0
 800beec:	63e8      	str	r0, [r5, #60]	; 0x3c
 800beee:	b920      	cbnz	r0, 800befa <localtime+0x22>
 800bef0:	2132      	movs	r1, #50	; 0x32
 800bef2:	4b06      	ldr	r3, [pc, #24]	; (800bf0c <localtime+0x34>)
 800bef4:	4806      	ldr	r0, [pc, #24]	; (800bf10 <localtime+0x38>)
 800bef6:	f000 ffd5 	bl	800cea4 <__assert_func>
 800befa:	4620      	mov	r0, r4
 800befc:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 800befe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bf02:	f000 b807 	b.w	800bf14 <localtime_r>
 800bf06:	bf00      	nop
 800bf08:	200004e0 	.word	0x200004e0
 800bf0c:	0800f41c 	.word	0x0800f41c
 800bf10:	0800f433 	.word	0x0800f433

0800bf14 <localtime_r>:
 800bf14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf18:	460c      	mov	r4, r1
 800bf1a:	4680      	mov	r8, r0
 800bf1c:	f001 f84a 	bl	800cfb4 <__gettzinfo>
 800bf20:	4621      	mov	r1, r4
 800bf22:	4605      	mov	r5, r0
 800bf24:	4640      	mov	r0, r8
 800bf26:	f001 f849 	bl	800cfbc <gmtime_r>
 800bf2a:	6943      	ldr	r3, [r0, #20]
 800bf2c:	4604      	mov	r4, r0
 800bf2e:	0799      	lsls	r1, r3, #30
 800bf30:	f203 776c 	addw	r7, r3, #1900	; 0x76c
 800bf34:	d105      	bne.n	800bf42 <localtime_r+0x2e>
 800bf36:	2264      	movs	r2, #100	; 0x64
 800bf38:	fb97 f3f2 	sdiv	r3, r7, r2
 800bf3c:	fb02 7313 	mls	r3, r2, r3, r7
 800bf40:	bb73      	cbnz	r3, 800bfa0 <localtime_r+0x8c>
 800bf42:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800bf46:	fb97 f6f3 	sdiv	r6, r7, r3
 800bf4a:	fb03 7616 	mls	r6, r3, r6, r7
 800bf4e:	fab6 f386 	clz	r3, r6
 800bf52:	095b      	lsrs	r3, r3, #5
 800bf54:	2230      	movs	r2, #48	; 0x30
 800bf56:	4e66      	ldr	r6, [pc, #408]	; (800c0f0 <localtime_r+0x1dc>)
 800bf58:	fb02 6603 	mla	r6, r2, r3, r6
 800bf5c:	f000 fe0e 	bl	800cb7c <__tz_lock>
 800bf60:	f000 fe18 	bl	800cb94 <_tzset_unlocked>
 800bf64:	4b63      	ldr	r3, [pc, #396]	; (800c0f4 <localtime_r+0x1e0>)
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	b34b      	cbz	r3, 800bfbe <localtime_r+0xaa>
 800bf6a:	686b      	ldr	r3, [r5, #4]
 800bf6c:	42bb      	cmp	r3, r7
 800bf6e:	d119      	bne.n	800bfa4 <localtime_r+0x90>
 800bf70:	e9d8 2300 	ldrd	r2, r3, [r8]
 800bf74:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 800bf78:	682f      	ldr	r7, [r5, #0]
 800bf7a:	b9df      	cbnz	r7, 800bfb4 <localtime_r+0xa0>
 800bf7c:	4282      	cmp	r2, r0
 800bf7e:	eb73 0101 	sbcs.w	r1, r3, r1
 800bf82:	da23      	bge.n	800bfcc <localtime_r+0xb8>
 800bf84:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
 800bf88:	4282      	cmp	r2, r0
 800bf8a:	eb73 0701 	sbcs.w	r7, r3, r1
 800bf8e:	bfb4      	ite	lt
 800bf90:	2701      	movlt	r7, #1
 800bf92:	2700      	movge	r7, #0
 800bf94:	4282      	cmp	r2, r0
 800bf96:	418b      	sbcs	r3, r1
 800bf98:	6227      	str	r7, [r4, #32]
 800bf9a:	db19      	blt.n	800bfd0 <localtime_r+0xbc>
 800bf9c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800bf9e:	e018      	b.n	800bfd2 <localtime_r+0xbe>
 800bfa0:	2301      	movs	r3, #1
 800bfa2:	e7d7      	b.n	800bf54 <localtime_r+0x40>
 800bfa4:	4638      	mov	r0, r7
 800bfa6:	f000 fd3f 	bl	800ca28 <__tzcalc_limits>
 800bfaa:	2800      	cmp	r0, #0
 800bfac:	d1e0      	bne.n	800bf70 <localtime_r+0x5c>
 800bfae:	f04f 33ff 	mov.w	r3, #4294967295
 800bfb2:	e004      	b.n	800bfbe <localtime_r+0xaa>
 800bfb4:	4282      	cmp	r2, r0
 800bfb6:	eb73 0101 	sbcs.w	r1, r3, r1
 800bfba:	da02      	bge.n	800bfc2 <localtime_r+0xae>
 800bfbc:	2300      	movs	r3, #0
 800bfbe:	6223      	str	r3, [r4, #32]
 800bfc0:	e7ec      	b.n	800bf9c <localtime_r+0x88>
 800bfc2:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
 800bfc6:	4282      	cmp	r2, r0
 800bfc8:	418b      	sbcs	r3, r1
 800bfca:	daf7      	bge.n	800bfbc <localtime_r+0xa8>
 800bfcc:	2301      	movs	r3, #1
 800bfce:	6223      	str	r3, [r4, #32]
 800bfd0:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800bfd2:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 800bfd6:	fb93 f5f2 	sdiv	r5, r3, r2
 800bfda:	203c      	movs	r0, #60	; 0x3c
 800bfdc:	fb02 3315 	mls	r3, r2, r5, r3
 800bfe0:	fb93 f2f0 	sdiv	r2, r3, r0
 800bfe4:	fb00 3012 	mls	r0, r0, r2, r3
 800bfe8:	6861      	ldr	r1, [r4, #4]
 800bfea:	6823      	ldr	r3, [r4, #0]
 800bfec:	1a89      	subs	r1, r1, r2
 800bfee:	68a2      	ldr	r2, [r4, #8]
 800bff0:	1a1b      	subs	r3, r3, r0
 800bff2:	1b52      	subs	r2, r2, r5
 800bff4:	2b3b      	cmp	r3, #59	; 0x3b
 800bff6:	6023      	str	r3, [r4, #0]
 800bff8:	6061      	str	r1, [r4, #4]
 800bffa:	60a2      	str	r2, [r4, #8]
 800bffc:	dd34      	ble.n	800c068 <localtime_r+0x154>
 800bffe:	3101      	adds	r1, #1
 800c000:	6061      	str	r1, [r4, #4]
 800c002:	3b3c      	subs	r3, #60	; 0x3c
 800c004:	6023      	str	r3, [r4, #0]
 800c006:	6863      	ldr	r3, [r4, #4]
 800c008:	2b3b      	cmp	r3, #59	; 0x3b
 800c00a:	dd33      	ble.n	800c074 <localtime_r+0x160>
 800c00c:	3201      	adds	r2, #1
 800c00e:	60a2      	str	r2, [r4, #8]
 800c010:	3b3c      	subs	r3, #60	; 0x3c
 800c012:	6063      	str	r3, [r4, #4]
 800c014:	68a3      	ldr	r3, [r4, #8]
 800c016:	2b17      	cmp	r3, #23
 800c018:	dd32      	ble.n	800c080 <localtime_r+0x16c>
 800c01a:	69e2      	ldr	r2, [r4, #28]
 800c01c:	3b18      	subs	r3, #24
 800c01e:	3201      	adds	r2, #1
 800c020:	61e2      	str	r2, [r4, #28]
 800c022:	69a2      	ldr	r2, [r4, #24]
 800c024:	60a3      	str	r3, [r4, #8]
 800c026:	3201      	adds	r2, #1
 800c028:	2a06      	cmp	r2, #6
 800c02a:	bfc8      	it	gt
 800c02c:	2200      	movgt	r2, #0
 800c02e:	61a2      	str	r2, [r4, #24]
 800c030:	68e2      	ldr	r2, [r4, #12]
 800c032:	6923      	ldr	r3, [r4, #16]
 800c034:	3201      	adds	r2, #1
 800c036:	60e2      	str	r2, [r4, #12]
 800c038:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 800c03c:	428a      	cmp	r2, r1
 800c03e:	dd0e      	ble.n	800c05e <localtime_r+0x14a>
 800c040:	2b0b      	cmp	r3, #11
 800c042:	eba2 0201 	sub.w	r2, r2, r1
 800c046:	60e2      	str	r2, [r4, #12]
 800c048:	f103 0201 	add.w	r2, r3, #1
 800c04c:	bf05      	ittet	eq
 800c04e:	2200      	moveq	r2, #0
 800c050:	6963      	ldreq	r3, [r4, #20]
 800c052:	6122      	strne	r2, [r4, #16]
 800c054:	3301      	addeq	r3, #1
 800c056:	bf02      	ittt	eq
 800c058:	6122      	streq	r2, [r4, #16]
 800c05a:	6163      	streq	r3, [r4, #20]
 800c05c:	61e2      	streq	r2, [r4, #28]
 800c05e:	f000 fd93 	bl	800cb88 <__tz_unlock>
 800c062:	4620      	mov	r0, r4
 800c064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c068:	2b00      	cmp	r3, #0
 800c06a:	dacc      	bge.n	800c006 <localtime_r+0xf2>
 800c06c:	3901      	subs	r1, #1
 800c06e:	6061      	str	r1, [r4, #4]
 800c070:	333c      	adds	r3, #60	; 0x3c
 800c072:	e7c7      	b.n	800c004 <localtime_r+0xf0>
 800c074:	2b00      	cmp	r3, #0
 800c076:	dacd      	bge.n	800c014 <localtime_r+0x100>
 800c078:	3a01      	subs	r2, #1
 800c07a:	60a2      	str	r2, [r4, #8]
 800c07c:	333c      	adds	r3, #60	; 0x3c
 800c07e:	e7c8      	b.n	800c012 <localtime_r+0xfe>
 800c080:	2b00      	cmp	r3, #0
 800c082:	daec      	bge.n	800c05e <localtime_r+0x14a>
 800c084:	69e2      	ldr	r2, [r4, #28]
 800c086:	3318      	adds	r3, #24
 800c088:	3a01      	subs	r2, #1
 800c08a:	61e2      	str	r2, [r4, #28]
 800c08c:	69a2      	ldr	r2, [r4, #24]
 800c08e:	60a3      	str	r3, [r4, #8]
 800c090:	3a01      	subs	r2, #1
 800c092:	bf48      	it	mi
 800c094:	2206      	movmi	r2, #6
 800c096:	61a2      	str	r2, [r4, #24]
 800c098:	68e2      	ldr	r2, [r4, #12]
 800c09a:	3a01      	subs	r2, #1
 800c09c:	60e2      	str	r2, [r4, #12]
 800c09e:	2a00      	cmp	r2, #0
 800c0a0:	d1dd      	bne.n	800c05e <localtime_r+0x14a>
 800c0a2:	6923      	ldr	r3, [r4, #16]
 800c0a4:	3b01      	subs	r3, #1
 800c0a6:	d405      	bmi.n	800c0b4 <localtime_r+0x1a0>
 800c0a8:	6123      	str	r3, [r4, #16]
 800c0aa:	6923      	ldr	r3, [r4, #16]
 800c0ac:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 800c0b0:	60e3      	str	r3, [r4, #12]
 800c0b2:	e7d4      	b.n	800c05e <localtime_r+0x14a>
 800c0b4:	230b      	movs	r3, #11
 800c0b6:	6123      	str	r3, [r4, #16]
 800c0b8:	6963      	ldr	r3, [r4, #20]
 800c0ba:	1e5a      	subs	r2, r3, #1
 800c0bc:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 800c0c0:	6162      	str	r2, [r4, #20]
 800c0c2:	079a      	lsls	r2, r3, #30
 800c0c4:	d105      	bne.n	800c0d2 <localtime_r+0x1be>
 800c0c6:	2164      	movs	r1, #100	; 0x64
 800c0c8:	fb93 f2f1 	sdiv	r2, r3, r1
 800c0cc:	fb01 3212 	mls	r2, r1, r2, r3
 800c0d0:	b962      	cbnz	r2, 800c0ec <localtime_r+0x1d8>
 800c0d2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800c0d6:	fb93 f1f2 	sdiv	r1, r3, r2
 800c0da:	fb02 3311 	mls	r3, r2, r1, r3
 800c0de:	fab3 f383 	clz	r3, r3
 800c0e2:	095b      	lsrs	r3, r3, #5
 800c0e4:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 800c0e8:	61e3      	str	r3, [r4, #28]
 800c0ea:	e7de      	b.n	800c0aa <localtime_r+0x196>
 800c0ec:	2301      	movs	r3, #1
 800c0ee:	e7f9      	b.n	800c0e4 <localtime_r+0x1d0>
 800c0f0:	0800f4f0 	.word	0x0800f4f0
 800c0f4:	20002c28 	.word	0x20002c28

0800c0f8 <malloc>:
 800c0f8:	4b02      	ldr	r3, [pc, #8]	; (800c104 <malloc+0xc>)
 800c0fa:	4601      	mov	r1, r0
 800c0fc:	6818      	ldr	r0, [r3, #0]
 800c0fe:	f000 bb0b 	b.w	800c718 <_malloc_r>
 800c102:	bf00      	nop
 800c104:	200004e0 	.word	0x200004e0

0800c108 <free>:
 800c108:	4b02      	ldr	r3, [pc, #8]	; (800c114 <free+0xc>)
 800c10a:	4601      	mov	r1, r0
 800c10c:	6818      	ldr	r0, [r3, #0]
 800c10e:	f000 ba9b 	b.w	800c648 <_free_r>
 800c112:	bf00      	nop
 800c114:	200004e0 	.word	0x200004e0

0800c118 <memcmp>:
 800c118:	b510      	push	{r4, lr}
 800c11a:	3901      	subs	r1, #1
 800c11c:	4402      	add	r2, r0
 800c11e:	4290      	cmp	r0, r2
 800c120:	d101      	bne.n	800c126 <memcmp+0xe>
 800c122:	2000      	movs	r0, #0
 800c124:	e005      	b.n	800c132 <memcmp+0x1a>
 800c126:	7803      	ldrb	r3, [r0, #0]
 800c128:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c12c:	42a3      	cmp	r3, r4
 800c12e:	d001      	beq.n	800c134 <memcmp+0x1c>
 800c130:	1b18      	subs	r0, r3, r4
 800c132:	bd10      	pop	{r4, pc}
 800c134:	3001      	adds	r0, #1
 800c136:	e7f2      	b.n	800c11e <memcmp+0x6>

0800c138 <memcpy>:
 800c138:	440a      	add	r2, r1
 800c13a:	4291      	cmp	r1, r2
 800c13c:	f100 33ff 	add.w	r3, r0, #4294967295
 800c140:	d100      	bne.n	800c144 <memcpy+0xc>
 800c142:	4770      	bx	lr
 800c144:	b510      	push	{r4, lr}
 800c146:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c14a:	4291      	cmp	r1, r2
 800c14c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c150:	d1f9      	bne.n	800c146 <memcpy+0xe>
 800c152:	bd10      	pop	{r4, pc}

0800c154 <memset>:
 800c154:	4603      	mov	r3, r0
 800c156:	4402      	add	r2, r0
 800c158:	4293      	cmp	r3, r2
 800c15a:	d100      	bne.n	800c15e <memset+0xa>
 800c15c:	4770      	bx	lr
 800c15e:	f803 1b01 	strb.w	r1, [r3], #1
 800c162:	e7f9      	b.n	800c158 <memset+0x4>

0800c164 <validate_structure>:
 800c164:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c166:	6801      	ldr	r1, [r0, #0]
 800c168:	4604      	mov	r4, r0
 800c16a:	293b      	cmp	r1, #59	; 0x3b
 800c16c:	d911      	bls.n	800c192 <validate_structure+0x2e>
 800c16e:	223c      	movs	r2, #60	; 0x3c
 800c170:	4668      	mov	r0, sp
 800c172:	f000 feb5 	bl	800cee0 <div>
 800c176:	9a01      	ldr	r2, [sp, #4]
 800c178:	6863      	ldr	r3, [r4, #4]
 800c17a:	9900      	ldr	r1, [sp, #0]
 800c17c:	2a00      	cmp	r2, #0
 800c17e:	440b      	add	r3, r1
 800c180:	6063      	str	r3, [r4, #4]
 800c182:	bfbb      	ittet	lt
 800c184:	323c      	addlt	r2, #60	; 0x3c
 800c186:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800c18a:	6022      	strge	r2, [r4, #0]
 800c18c:	6022      	strlt	r2, [r4, #0]
 800c18e:	bfb8      	it	lt
 800c190:	6063      	strlt	r3, [r4, #4]
 800c192:	6861      	ldr	r1, [r4, #4]
 800c194:	293b      	cmp	r1, #59	; 0x3b
 800c196:	d911      	bls.n	800c1bc <validate_structure+0x58>
 800c198:	223c      	movs	r2, #60	; 0x3c
 800c19a:	4668      	mov	r0, sp
 800c19c:	f000 fea0 	bl	800cee0 <div>
 800c1a0:	9a01      	ldr	r2, [sp, #4]
 800c1a2:	68a3      	ldr	r3, [r4, #8]
 800c1a4:	9900      	ldr	r1, [sp, #0]
 800c1a6:	2a00      	cmp	r2, #0
 800c1a8:	440b      	add	r3, r1
 800c1aa:	60a3      	str	r3, [r4, #8]
 800c1ac:	bfbb      	ittet	lt
 800c1ae:	323c      	addlt	r2, #60	; 0x3c
 800c1b0:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800c1b4:	6062      	strge	r2, [r4, #4]
 800c1b6:	6062      	strlt	r2, [r4, #4]
 800c1b8:	bfb8      	it	lt
 800c1ba:	60a3      	strlt	r3, [r4, #8]
 800c1bc:	68a1      	ldr	r1, [r4, #8]
 800c1be:	2917      	cmp	r1, #23
 800c1c0:	d911      	bls.n	800c1e6 <validate_structure+0x82>
 800c1c2:	2218      	movs	r2, #24
 800c1c4:	4668      	mov	r0, sp
 800c1c6:	f000 fe8b 	bl	800cee0 <div>
 800c1ca:	9a01      	ldr	r2, [sp, #4]
 800c1cc:	68e3      	ldr	r3, [r4, #12]
 800c1ce:	9900      	ldr	r1, [sp, #0]
 800c1d0:	2a00      	cmp	r2, #0
 800c1d2:	440b      	add	r3, r1
 800c1d4:	60e3      	str	r3, [r4, #12]
 800c1d6:	bfbb      	ittet	lt
 800c1d8:	3218      	addlt	r2, #24
 800c1da:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800c1de:	60a2      	strge	r2, [r4, #8]
 800c1e0:	60a2      	strlt	r2, [r4, #8]
 800c1e2:	bfb8      	it	lt
 800c1e4:	60e3      	strlt	r3, [r4, #12]
 800c1e6:	6921      	ldr	r1, [r4, #16]
 800c1e8:	290b      	cmp	r1, #11
 800c1ea:	d911      	bls.n	800c210 <validate_structure+0xac>
 800c1ec:	220c      	movs	r2, #12
 800c1ee:	4668      	mov	r0, sp
 800c1f0:	f000 fe76 	bl	800cee0 <div>
 800c1f4:	9a01      	ldr	r2, [sp, #4]
 800c1f6:	6963      	ldr	r3, [r4, #20]
 800c1f8:	9900      	ldr	r1, [sp, #0]
 800c1fa:	2a00      	cmp	r2, #0
 800c1fc:	440b      	add	r3, r1
 800c1fe:	6163      	str	r3, [r4, #20]
 800c200:	bfbb      	ittet	lt
 800c202:	320c      	addlt	r2, #12
 800c204:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800c208:	6122      	strge	r2, [r4, #16]
 800c20a:	6122      	strlt	r2, [r4, #16]
 800c20c:	bfb8      	it	lt
 800c20e:	6163      	strlt	r3, [r4, #20]
 800c210:	6963      	ldr	r3, [r4, #20]
 800c212:	0798      	lsls	r0, r3, #30
 800c214:	d120      	bne.n	800c258 <validate_structure+0xf4>
 800c216:	2164      	movs	r1, #100	; 0x64
 800c218:	fb93 f2f1 	sdiv	r2, r3, r1
 800c21c:	fb01 3212 	mls	r2, r1, r2, r3
 800c220:	b9e2      	cbnz	r2, 800c25c <validate_structure+0xf8>
 800c222:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800c226:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 800c22a:	fb93 f1f2 	sdiv	r1, r3, r2
 800c22e:	fb02 3311 	mls	r3, r2, r1, r3
 800c232:	2b00      	cmp	r3, #0
 800c234:	bf14      	ite	ne
 800c236:	231c      	movne	r3, #28
 800c238:	231d      	moveq	r3, #29
 800c23a:	68e2      	ldr	r2, [r4, #12]
 800c23c:	2a00      	cmp	r2, #0
 800c23e:	dc0f      	bgt.n	800c260 <validate_structure+0xfc>
 800c240:	260b      	movs	r6, #11
 800c242:	2064      	movs	r0, #100	; 0x64
 800c244:	f44f 75c8 	mov.w	r5, #400	; 0x190
 800c248:	4f31      	ldr	r7, [pc, #196]	; (800c310 <validate_structure+0x1ac>)
 800c24a:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 800c24e:	f1bc 0f00 	cmp.w	ip, #0
 800c252:	dd31      	ble.n	800c2b8 <validate_structure+0x154>
 800c254:	b003      	add	sp, #12
 800c256:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c258:	231c      	movs	r3, #28
 800c25a:	e7ee      	b.n	800c23a <validate_structure+0xd6>
 800c25c:	231d      	movs	r3, #29
 800c25e:	e7ec      	b.n	800c23a <validate_structure+0xd6>
 800c260:	2700      	movs	r7, #0
 800c262:	2064      	movs	r0, #100	; 0x64
 800c264:	f44f 75c8 	mov.w	r5, #400	; 0x190
 800c268:	4e29      	ldr	r6, [pc, #164]	; (800c310 <validate_structure+0x1ac>)
 800c26a:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 800c26e:	2a01      	cmp	r2, #1
 800c270:	bf0c      	ite	eq
 800c272:	469c      	moveq	ip, r3
 800c274:	f856 c022 	ldrne.w	ip, [r6, r2, lsl #2]
 800c278:	4561      	cmp	r1, ip
 800c27a:	ddeb      	ble.n	800c254 <validate_structure+0xf0>
 800c27c:	3201      	adds	r2, #1
 800c27e:	eba1 010c 	sub.w	r1, r1, ip
 800c282:	2a0c      	cmp	r2, #12
 800c284:	60e1      	str	r1, [r4, #12]
 800c286:	6122      	str	r2, [r4, #16]
 800c288:	d1ef      	bne.n	800c26a <validate_structure+0x106>
 800c28a:	6963      	ldr	r3, [r4, #20]
 800c28c:	1c5a      	adds	r2, r3, #1
 800c28e:	0791      	lsls	r1, r2, #30
 800c290:	e9c4 7204 	strd	r7, r2, [r4, #16]
 800c294:	d137      	bne.n	800c306 <validate_structure+0x1a2>
 800c296:	fb92 f1f0 	sdiv	r1, r2, r0
 800c29a:	fb00 2211 	mls	r2, r0, r1, r2
 800c29e:	2a00      	cmp	r2, #0
 800c2a0:	d133      	bne.n	800c30a <validate_structure+0x1a6>
 800c2a2:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 800c2a6:	fb93 f2f5 	sdiv	r2, r3, r5
 800c2aa:	fb05 3312 	mls	r3, r5, r2, r3
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	bf14      	ite	ne
 800c2b2:	231c      	movne	r3, #28
 800c2b4:	231d      	moveq	r3, #29
 800c2b6:	e7d8      	b.n	800c26a <validate_structure+0x106>
 800c2b8:	6921      	ldr	r1, [r4, #16]
 800c2ba:	3901      	subs	r1, #1
 800c2bc:	6121      	str	r1, [r4, #16]
 800c2be:	3101      	adds	r1, #1
 800c2c0:	d114      	bne.n	800c2ec <validate_structure+0x188>
 800c2c2:	6963      	ldr	r3, [r4, #20]
 800c2c4:	1e5a      	subs	r2, r3, #1
 800c2c6:	0791      	lsls	r1, r2, #30
 800c2c8:	e9c4 6204 	strd	r6, r2, [r4, #16]
 800c2cc:	d117      	bne.n	800c2fe <validate_structure+0x19a>
 800c2ce:	fb92 f1f0 	sdiv	r1, r2, r0
 800c2d2:	fb00 2211 	mls	r2, r0, r1, r2
 800c2d6:	b9a2      	cbnz	r2, 800c302 <validate_structure+0x19e>
 800c2d8:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 800c2dc:	fb93 f2f5 	sdiv	r2, r3, r5
 800c2e0:	fb05 3312 	mls	r3, r5, r2, r3
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	bf14      	ite	ne
 800c2e8:	231c      	movne	r3, #28
 800c2ea:	231d      	moveq	r3, #29
 800c2ec:	6922      	ldr	r2, [r4, #16]
 800c2ee:	2a01      	cmp	r2, #1
 800c2f0:	bf0c      	ite	eq
 800c2f2:	461a      	moveq	r2, r3
 800c2f4:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 800c2f8:	4462      	add	r2, ip
 800c2fa:	60e2      	str	r2, [r4, #12]
 800c2fc:	e7a5      	b.n	800c24a <validate_structure+0xe6>
 800c2fe:	231c      	movs	r3, #28
 800c300:	e7f4      	b.n	800c2ec <validate_structure+0x188>
 800c302:	231d      	movs	r3, #29
 800c304:	e7f2      	b.n	800c2ec <validate_structure+0x188>
 800c306:	231c      	movs	r3, #28
 800c308:	e7af      	b.n	800c26a <validate_structure+0x106>
 800c30a:	231d      	movs	r3, #29
 800c30c:	e7ad      	b.n	800c26a <validate_structure+0x106>
 800c30e:	bf00      	nop
 800c310:	0800f490 	.word	0x0800f490

0800c314 <mktime>:
 800c314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c318:	b085      	sub	sp, #20
 800c31a:	4607      	mov	r7, r0
 800c31c:	f000 fe4a 	bl	800cfb4 <__gettzinfo>
 800c320:	4681      	mov	r9, r0
 800c322:	4638      	mov	r0, r7
 800c324:	f7ff ff1e 	bl	800c164 <validate_structure>
 800c328:	e9d7 4000 	ldrd	r4, r0, [r7]
 800c32c:	233c      	movs	r3, #60	; 0x3c
 800c32e:	fb03 4400 	mla	r4, r3, r0, r4
 800c332:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800c336:	68b8      	ldr	r0, [r7, #8]
 800c338:	4abc      	ldr	r2, [pc, #752]	; (800c62c <mktime+0x318>)
 800c33a:	fb03 4400 	mla	r4, r3, r0, r4
 800c33e:	e9d7 5303 	ldrd	r5, r3, [r7, #12]
 800c342:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800c346:	3d01      	subs	r5, #1
 800c348:	2b01      	cmp	r3, #1
 800c34a:	697e      	ldr	r6, [r7, #20]
 800c34c:	4415      	add	r5, r2
 800c34e:	dd11      	ble.n	800c374 <mktime+0x60>
 800c350:	07b1      	lsls	r1, r6, #30
 800c352:	d10f      	bne.n	800c374 <mktime+0x60>
 800c354:	2264      	movs	r2, #100	; 0x64
 800c356:	fb96 f3f2 	sdiv	r3, r6, r2
 800c35a:	fb02 6313 	mls	r3, r2, r3, r6
 800c35e:	b943      	cbnz	r3, 800c372 <mktime+0x5e>
 800c360:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800c364:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 800c368:	fb93 f1f2 	sdiv	r1, r3, r2
 800c36c:	fb02 3311 	mls	r3, r2, r1, r3
 800c370:	b903      	cbnz	r3, 800c374 <mktime+0x60>
 800c372:	3501      	adds	r5, #1
 800c374:	f644 6220 	movw	r2, #20000	; 0x4e20
 800c378:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
 800c37c:	3310      	adds	r3, #16
 800c37e:	4293      	cmp	r3, r2
 800c380:	61fd      	str	r5, [r7, #28]
 800c382:	f200 815c 	bhi.w	800c63e <mktime+0x32a>
 800c386:	2e46      	cmp	r6, #70	; 0x46
 800c388:	dd71      	ble.n	800c46e <mktime+0x15a>
 800c38a:	2346      	movs	r3, #70	; 0x46
 800c38c:	f240 1c6d 	movw	ip, #365	; 0x16d
 800c390:	2164      	movs	r1, #100	; 0x64
 800c392:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800c396:	079a      	lsls	r2, r3, #30
 800c398:	d163      	bne.n	800c462 <mktime+0x14e>
 800c39a:	fb93 f2f1 	sdiv	r2, r3, r1
 800c39e:	fb01 3212 	mls	r2, r1, r2, r3
 800c3a2:	2a00      	cmp	r2, #0
 800c3a4:	d160      	bne.n	800c468 <mktime+0x154>
 800c3a6:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 800c3aa:	fb92 fef0 	sdiv	lr, r2, r0
 800c3ae:	fb00 221e 	mls	r2, r0, lr, r2
 800c3b2:	2a00      	cmp	r2, #0
 800c3b4:	bf14      	ite	ne
 800c3b6:	4662      	movne	r2, ip
 800c3b8:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 800c3bc:	3301      	adds	r3, #1
 800c3be:	429e      	cmp	r6, r3
 800c3c0:	4415      	add	r5, r2
 800c3c2:	d1e8      	bne.n	800c396 <mktime+0x82>
 800c3c4:	4b9a      	ldr	r3, [pc, #616]	; (800c630 <mktime+0x31c>)
 800c3c6:	ea4f 78e4 	mov.w	r8, r4, asr #31
 800c3ca:	fbc5 4803 	smlal	r4, r8, r5, r3
 800c3ce:	f000 fbd5 	bl	800cb7c <__tz_lock>
 800c3d2:	f000 fbdf 	bl	800cb94 <_tzset_unlocked>
 800c3d6:	4b97      	ldr	r3, [pc, #604]	; (800c634 <mktime+0x320>)
 800c3d8:	f8d3 b000 	ldr.w	fp, [r3]
 800c3dc:	f1bb 0f00 	cmp.w	fp, #0
 800c3e0:	d039      	beq.n	800c456 <mktime+0x142>
 800c3e2:	f8d7 b020 	ldr.w	fp, [r7, #32]
 800c3e6:	6978      	ldr	r0, [r7, #20]
 800c3e8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800c3ec:	f1bb 0f01 	cmp.w	fp, #1
 800c3f0:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 800c3f4:	46da      	mov	sl, fp
 800c3f6:	bfa8      	it	ge
 800c3f8:	f04f 0a01 	movge.w	sl, #1
 800c3fc:	4283      	cmp	r3, r0
 800c3fe:	d178      	bne.n	800c4f2 <mktime+0x1de>
 800c400:	e9d9 3208 	ldrd	r3, r2, [r9, #32]
 800c404:	f8d9 1050 	ldr.w	r1, [r9, #80]	; 0x50
 800c408:	f8d9 e04c 	ldr.w	lr, [r9, #76]	; 0x4c
 800c40c:	1a5b      	subs	r3, r3, r1
 800c40e:	9302      	str	r3, [sp, #8]
 800c410:	eb62 73e1 	sbc.w	r3, r2, r1, asr #31
 800c414:	9303      	str	r3, [sp, #12]
 800c416:	f8d9 2028 	ldr.w	r2, [r9, #40]	; 0x28
 800c41a:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 800c41e:	ebb3 0c02 	subs.w	ip, r3, r2
 800c422:	eb6e 70e2 	sbc.w	r0, lr, r2, asr #31
 800c426:	4564      	cmp	r4, ip
 800c428:	9301      	str	r3, [sp, #4]
 800c42a:	eb78 0300 	sbcs.w	r3, r8, r0
 800c42e:	da66      	bge.n	800c4fe <mktime+0x1ea>
 800c430:	f8d9 3000 	ldr.w	r3, [r9]
 800c434:	2b00      	cmp	r3, #0
 800c436:	d06f      	beq.n	800c518 <mktime+0x204>
 800c438:	9b02      	ldr	r3, [sp, #8]
 800c43a:	429c      	cmp	r4, r3
 800c43c:	9b03      	ldr	r3, [sp, #12]
 800c43e:	eb78 0303 	sbcs.w	r3, r8, r3
 800c442:	db03      	blt.n	800c44c <mktime+0x138>
 800c444:	4564      	cmp	r4, ip
 800c446:	eb78 0300 	sbcs.w	r3, r8, r0
 800c44a:	db6b      	blt.n	800c524 <mktime+0x210>
 800c44c:	f1bb 0f00 	cmp.w	fp, #0
 800c450:	f04f 0b00 	mov.w	fp, #0
 800c454:	da6b      	bge.n	800c52e <mktime+0x21a>
 800c456:	f8d9 1028 	ldr.w	r1, [r9, #40]	; 0x28
 800c45a:	190c      	adds	r4, r1, r4
 800c45c:	eb48 78e1 	adc.w	r8, r8, r1, asr #31
 800c460:	e0a9      	b.n	800c5b6 <mktime+0x2a2>
 800c462:	f240 126d 	movw	r2, #365	; 0x16d
 800c466:	e7a9      	b.n	800c3bc <mktime+0xa8>
 800c468:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 800c46c:	e7a6      	b.n	800c3bc <mktime+0xa8>
 800c46e:	d0a9      	beq.n	800c3c4 <mktime+0xb0>
 800c470:	2345      	movs	r3, #69	; 0x45
 800c472:	f240 1c6d 	movw	ip, #365	; 0x16d
 800c476:	2164      	movs	r1, #100	; 0x64
 800c478:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800c47c:	e012      	b.n	800c4a4 <mktime+0x190>
 800c47e:	bb62      	cbnz	r2, 800c4da <mktime+0x1c6>
 800c480:	fb93 f2f1 	sdiv	r2, r3, r1
 800c484:	fb01 3212 	mls	r2, r1, r2, r3
 800c488:	bb52      	cbnz	r2, 800c4e0 <mktime+0x1cc>
 800c48a:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 800c48e:	fb92 fef0 	sdiv	lr, r2, r0
 800c492:	fb00 221e 	mls	r2, r0, lr, r2
 800c496:	2a00      	cmp	r2, #0
 800c498:	bf14      	ite	ne
 800c49a:	4662      	movne	r2, ip
 800c49c:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 800c4a0:	1aad      	subs	r5, r5, r2
 800c4a2:	3b01      	subs	r3, #1
 800c4a4:	429e      	cmp	r6, r3
 800c4a6:	f003 0203 	and.w	r2, r3, #3
 800c4aa:	dbe8      	blt.n	800c47e <mktime+0x16a>
 800c4ac:	b9da      	cbnz	r2, 800c4e6 <mktime+0x1d2>
 800c4ae:	2264      	movs	r2, #100	; 0x64
 800c4b0:	fb96 f3f2 	sdiv	r3, r6, r2
 800c4b4:	fb02 6313 	mls	r3, r2, r3, r6
 800c4b8:	b9c3      	cbnz	r3, 800c4ec <mktime+0x1d8>
 800c4ba:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800c4be:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 800c4c2:	fb93 f1f2 	sdiv	r1, r3, r2
 800c4c6:	fb02 3311 	mls	r3, r2, r1, r3
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	f240 136d 	movw	r3, #365	; 0x16d
 800c4d0:	bf08      	it	eq
 800c4d2:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 800c4d6:	1aed      	subs	r5, r5, r3
 800c4d8:	e774      	b.n	800c3c4 <mktime+0xb0>
 800c4da:	f240 126d 	movw	r2, #365	; 0x16d
 800c4de:	e7df      	b.n	800c4a0 <mktime+0x18c>
 800c4e0:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 800c4e4:	e7dc      	b.n	800c4a0 <mktime+0x18c>
 800c4e6:	f240 136d 	movw	r3, #365	; 0x16d
 800c4ea:	e7f4      	b.n	800c4d6 <mktime+0x1c2>
 800c4ec:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 800c4f0:	e7f1      	b.n	800c4d6 <mktime+0x1c2>
 800c4f2:	f000 fa99 	bl	800ca28 <__tzcalc_limits>
 800c4f6:	2800      	cmp	r0, #0
 800c4f8:	d182      	bne.n	800c400 <mktime+0xec>
 800c4fa:	46d3      	mov	fp, sl
 800c4fc:	e050      	b.n	800c5a0 <mktime+0x28c>
 800c4fe:	9b01      	ldr	r3, [sp, #4]
 800c500:	1a5b      	subs	r3, r3, r1
 800c502:	9301      	str	r3, [sp, #4]
 800c504:	ea4f 73e1 	mov.w	r3, r1, asr #31
 800c508:	eb6e 0e03 	sbc.w	lr, lr, r3
 800c50c:	9b01      	ldr	r3, [sp, #4]
 800c50e:	429c      	cmp	r4, r3
 800c510:	eb78 030e 	sbcs.w	r3, r8, lr
 800c514:	dbf1      	blt.n	800c4fa <mktime+0x1e6>
 800c516:	e78b      	b.n	800c430 <mktime+0x11c>
 800c518:	9b02      	ldr	r3, [sp, #8]
 800c51a:	429c      	cmp	r4, r3
 800c51c:	9b03      	ldr	r3, [sp, #12]
 800c51e:	eb78 0303 	sbcs.w	r3, r8, r3
 800c522:	db8f      	blt.n	800c444 <mktime+0x130>
 800c524:	f1bb 0f00 	cmp.w	fp, #0
 800c528:	db3e      	blt.n	800c5a8 <mktime+0x294>
 800c52a:	f04f 0b01 	mov.w	fp, #1
 800c52e:	ea8a 0a0b 	eor.w	sl, sl, fp
 800c532:	f1ba 0f01 	cmp.w	sl, #1
 800c536:	d133      	bne.n	800c5a0 <mktime+0x28c>
 800c538:	f1bb 0f00 	cmp.w	fp, #0
 800c53c:	d04e      	beq.n	800c5dc <mktime+0x2c8>
 800c53e:	1a52      	subs	r2, r2, r1
 800c540:	683b      	ldr	r3, [r7, #0]
 800c542:	1914      	adds	r4, r2, r4
 800c544:	4413      	add	r3, r2
 800c546:	4638      	mov	r0, r7
 800c548:	603b      	str	r3, [r7, #0]
 800c54a:	eb48 78e2 	adc.w	r8, r8, r2, asr #31
 800c54e:	f8d7 a00c 	ldr.w	sl, [r7, #12]
 800c552:	f7ff fe07 	bl	800c164 <validate_structure>
 800c556:	68fa      	ldr	r2, [r7, #12]
 800c558:	ebb2 020a 	subs.w	r2, r2, sl
 800c55c:	d020      	beq.n	800c5a0 <mktime+0x28c>
 800c55e:	2a01      	cmp	r2, #1
 800c560:	dc3e      	bgt.n	800c5e0 <mktime+0x2cc>
 800c562:	1c90      	adds	r0, r2, #2
 800c564:	bfd8      	it	le
 800c566:	2201      	movle	r2, #1
 800c568:	69fb      	ldr	r3, [r7, #28]
 800c56a:	4415      	add	r5, r2
 800c56c:	18d3      	adds	r3, r2, r3
 800c56e:	d540      	bpl.n	800c5f2 <mktime+0x2de>
 800c570:	1e73      	subs	r3, r6, #1
 800c572:	0799      	lsls	r1, r3, #30
 800c574:	d137      	bne.n	800c5e6 <mktime+0x2d2>
 800c576:	2264      	movs	r2, #100	; 0x64
 800c578:	fb93 f1f2 	sdiv	r1, r3, r2
 800c57c:	fb02 3311 	mls	r3, r2, r1, r3
 800c580:	bba3      	cbnz	r3, 800c5ec <mktime+0x2d8>
 800c582:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800c586:	f206 766b 	addw	r6, r6, #1899	; 0x76b
 800c58a:	fb96 f2f3 	sdiv	r2, r6, r3
 800c58e:	fb03 6612 	mls	r6, r3, r2, r6
 800c592:	2e00      	cmp	r6, #0
 800c594:	f240 136d 	movw	r3, #365	; 0x16d
 800c598:	bf18      	it	ne
 800c59a:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 800c59e:	61fb      	str	r3, [r7, #28]
 800c5a0:	f1bb 0f01 	cmp.w	fp, #1
 800c5a4:	f47f af57 	bne.w	800c456 <mktime+0x142>
 800c5a8:	f04f 0b01 	mov.w	fp, #1
 800c5ac:	f8d9 1050 	ldr.w	r1, [r9, #80]	; 0x50
 800c5b0:	190c      	adds	r4, r1, r4
 800c5b2:	eb48 78e1 	adc.w	r8, r8, r1, asr #31
 800c5b6:	f000 fae7 	bl	800cb88 <__tz_unlock>
 800c5ba:	2307      	movs	r3, #7
 800c5bc:	3504      	adds	r5, #4
 800c5be:	fb95 f3f3 	sdiv	r3, r5, r3
 800c5c2:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800c5c6:	1aed      	subs	r5, r5, r3
 800c5c8:	bf48      	it	mi
 800c5ca:	3507      	addmi	r5, #7
 800c5cc:	f8c7 b020 	str.w	fp, [r7, #32]
 800c5d0:	61bd      	str	r5, [r7, #24]
 800c5d2:	4620      	mov	r0, r4
 800c5d4:	4641      	mov	r1, r8
 800c5d6:	b005      	add	sp, #20
 800c5d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5dc:	1a8a      	subs	r2, r1, r2
 800c5de:	e7af      	b.n	800c540 <mktime+0x22c>
 800c5e0:	f04f 32ff 	mov.w	r2, #4294967295
 800c5e4:	e7c0      	b.n	800c568 <mktime+0x254>
 800c5e6:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 800c5ea:	e7d8      	b.n	800c59e <mktime+0x28a>
 800c5ec:	f240 136d 	movw	r3, #365	; 0x16d
 800c5f0:	e7d5      	b.n	800c59e <mktime+0x28a>
 800c5f2:	07b2      	lsls	r2, r6, #30
 800c5f4:	d117      	bne.n	800c626 <mktime+0x312>
 800c5f6:	2164      	movs	r1, #100	; 0x64
 800c5f8:	fb96 f2f1 	sdiv	r2, r6, r1
 800c5fc:	fb01 6212 	mls	r2, r1, r2, r6
 800c600:	b9d2      	cbnz	r2, 800c638 <mktime+0x324>
 800c602:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800c606:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 800c60a:	fb96 f1f2 	sdiv	r1, r6, r2
 800c60e:	fb02 6611 	mls	r6, r2, r1, r6
 800c612:	2e00      	cmp	r6, #0
 800c614:	f240 126d 	movw	r2, #365	; 0x16d
 800c618:	bf08      	it	eq
 800c61a:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 800c61e:	4293      	cmp	r3, r2
 800c620:	bfa8      	it	ge
 800c622:	1a9b      	subge	r3, r3, r2
 800c624:	e7bb      	b.n	800c59e <mktime+0x28a>
 800c626:	f240 126d 	movw	r2, #365	; 0x16d
 800c62a:	e7f8      	b.n	800c61e <mktime+0x30a>
 800c62c:	0800f4c0 	.word	0x0800f4c0
 800c630:	00015180 	.word	0x00015180
 800c634:	20002c28 	.word	0x20002c28
 800c638:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 800c63c:	e7ef      	b.n	800c61e <mktime+0x30a>
 800c63e:	f04f 34ff 	mov.w	r4, #4294967295
 800c642:	46a0      	mov	r8, r4
 800c644:	e7c5      	b.n	800c5d2 <mktime+0x2be>
 800c646:	bf00      	nop

0800c648 <_free_r>:
 800c648:	b538      	push	{r3, r4, r5, lr}
 800c64a:	4605      	mov	r5, r0
 800c64c:	2900      	cmp	r1, #0
 800c64e:	d040      	beq.n	800c6d2 <_free_r+0x8a>
 800c650:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c654:	1f0c      	subs	r4, r1, #4
 800c656:	2b00      	cmp	r3, #0
 800c658:	bfb8      	it	lt
 800c65a:	18e4      	addlt	r4, r4, r3
 800c65c:	f000 fd62 	bl	800d124 <__malloc_lock>
 800c660:	4a1c      	ldr	r2, [pc, #112]	; (800c6d4 <_free_r+0x8c>)
 800c662:	6813      	ldr	r3, [r2, #0]
 800c664:	b933      	cbnz	r3, 800c674 <_free_r+0x2c>
 800c666:	6063      	str	r3, [r4, #4]
 800c668:	6014      	str	r4, [r2, #0]
 800c66a:	4628      	mov	r0, r5
 800c66c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c670:	f000 bd5e 	b.w	800d130 <__malloc_unlock>
 800c674:	42a3      	cmp	r3, r4
 800c676:	d908      	bls.n	800c68a <_free_r+0x42>
 800c678:	6820      	ldr	r0, [r4, #0]
 800c67a:	1821      	adds	r1, r4, r0
 800c67c:	428b      	cmp	r3, r1
 800c67e:	bf01      	itttt	eq
 800c680:	6819      	ldreq	r1, [r3, #0]
 800c682:	685b      	ldreq	r3, [r3, #4]
 800c684:	1809      	addeq	r1, r1, r0
 800c686:	6021      	streq	r1, [r4, #0]
 800c688:	e7ed      	b.n	800c666 <_free_r+0x1e>
 800c68a:	461a      	mov	r2, r3
 800c68c:	685b      	ldr	r3, [r3, #4]
 800c68e:	b10b      	cbz	r3, 800c694 <_free_r+0x4c>
 800c690:	42a3      	cmp	r3, r4
 800c692:	d9fa      	bls.n	800c68a <_free_r+0x42>
 800c694:	6811      	ldr	r1, [r2, #0]
 800c696:	1850      	adds	r0, r2, r1
 800c698:	42a0      	cmp	r0, r4
 800c69a:	d10b      	bne.n	800c6b4 <_free_r+0x6c>
 800c69c:	6820      	ldr	r0, [r4, #0]
 800c69e:	4401      	add	r1, r0
 800c6a0:	1850      	adds	r0, r2, r1
 800c6a2:	4283      	cmp	r3, r0
 800c6a4:	6011      	str	r1, [r2, #0]
 800c6a6:	d1e0      	bne.n	800c66a <_free_r+0x22>
 800c6a8:	6818      	ldr	r0, [r3, #0]
 800c6aa:	685b      	ldr	r3, [r3, #4]
 800c6ac:	4401      	add	r1, r0
 800c6ae:	6011      	str	r1, [r2, #0]
 800c6b0:	6053      	str	r3, [r2, #4]
 800c6b2:	e7da      	b.n	800c66a <_free_r+0x22>
 800c6b4:	d902      	bls.n	800c6bc <_free_r+0x74>
 800c6b6:	230c      	movs	r3, #12
 800c6b8:	602b      	str	r3, [r5, #0]
 800c6ba:	e7d6      	b.n	800c66a <_free_r+0x22>
 800c6bc:	6820      	ldr	r0, [r4, #0]
 800c6be:	1821      	adds	r1, r4, r0
 800c6c0:	428b      	cmp	r3, r1
 800c6c2:	bf01      	itttt	eq
 800c6c4:	6819      	ldreq	r1, [r3, #0]
 800c6c6:	685b      	ldreq	r3, [r3, #4]
 800c6c8:	1809      	addeq	r1, r1, r0
 800c6ca:	6021      	streq	r1, [r4, #0]
 800c6cc:	6063      	str	r3, [r4, #4]
 800c6ce:	6054      	str	r4, [r2, #4]
 800c6d0:	e7cb      	b.n	800c66a <_free_r+0x22>
 800c6d2:	bd38      	pop	{r3, r4, r5, pc}
 800c6d4:	20002c04 	.word	0x20002c04

0800c6d8 <sbrk_aligned>:
 800c6d8:	b570      	push	{r4, r5, r6, lr}
 800c6da:	4e0e      	ldr	r6, [pc, #56]	; (800c714 <sbrk_aligned+0x3c>)
 800c6dc:	460c      	mov	r4, r1
 800c6de:	6831      	ldr	r1, [r6, #0]
 800c6e0:	4605      	mov	r5, r0
 800c6e2:	b911      	cbnz	r1, 800c6ea <sbrk_aligned+0x12>
 800c6e4:	f000 f88c 	bl	800c800 <_sbrk_r>
 800c6e8:	6030      	str	r0, [r6, #0]
 800c6ea:	4621      	mov	r1, r4
 800c6ec:	4628      	mov	r0, r5
 800c6ee:	f000 f887 	bl	800c800 <_sbrk_r>
 800c6f2:	1c43      	adds	r3, r0, #1
 800c6f4:	d00a      	beq.n	800c70c <sbrk_aligned+0x34>
 800c6f6:	1cc4      	adds	r4, r0, #3
 800c6f8:	f024 0403 	bic.w	r4, r4, #3
 800c6fc:	42a0      	cmp	r0, r4
 800c6fe:	d007      	beq.n	800c710 <sbrk_aligned+0x38>
 800c700:	1a21      	subs	r1, r4, r0
 800c702:	4628      	mov	r0, r5
 800c704:	f000 f87c 	bl	800c800 <_sbrk_r>
 800c708:	3001      	adds	r0, #1
 800c70a:	d101      	bne.n	800c710 <sbrk_aligned+0x38>
 800c70c:	f04f 34ff 	mov.w	r4, #4294967295
 800c710:	4620      	mov	r0, r4
 800c712:	bd70      	pop	{r4, r5, r6, pc}
 800c714:	20002c08 	.word	0x20002c08

0800c718 <_malloc_r>:
 800c718:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c71c:	1ccd      	adds	r5, r1, #3
 800c71e:	f025 0503 	bic.w	r5, r5, #3
 800c722:	3508      	adds	r5, #8
 800c724:	2d0c      	cmp	r5, #12
 800c726:	bf38      	it	cc
 800c728:	250c      	movcc	r5, #12
 800c72a:	2d00      	cmp	r5, #0
 800c72c:	4607      	mov	r7, r0
 800c72e:	db01      	blt.n	800c734 <_malloc_r+0x1c>
 800c730:	42a9      	cmp	r1, r5
 800c732:	d905      	bls.n	800c740 <_malloc_r+0x28>
 800c734:	230c      	movs	r3, #12
 800c736:	2600      	movs	r6, #0
 800c738:	603b      	str	r3, [r7, #0]
 800c73a:	4630      	mov	r0, r6
 800c73c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c740:	4e2e      	ldr	r6, [pc, #184]	; (800c7fc <_malloc_r+0xe4>)
 800c742:	f000 fcef 	bl	800d124 <__malloc_lock>
 800c746:	6833      	ldr	r3, [r6, #0]
 800c748:	461c      	mov	r4, r3
 800c74a:	bb34      	cbnz	r4, 800c79a <_malloc_r+0x82>
 800c74c:	4629      	mov	r1, r5
 800c74e:	4638      	mov	r0, r7
 800c750:	f7ff ffc2 	bl	800c6d8 <sbrk_aligned>
 800c754:	1c43      	adds	r3, r0, #1
 800c756:	4604      	mov	r4, r0
 800c758:	d14d      	bne.n	800c7f6 <_malloc_r+0xde>
 800c75a:	6834      	ldr	r4, [r6, #0]
 800c75c:	4626      	mov	r6, r4
 800c75e:	2e00      	cmp	r6, #0
 800c760:	d140      	bne.n	800c7e4 <_malloc_r+0xcc>
 800c762:	6823      	ldr	r3, [r4, #0]
 800c764:	4631      	mov	r1, r6
 800c766:	4638      	mov	r0, r7
 800c768:	eb04 0803 	add.w	r8, r4, r3
 800c76c:	f000 f848 	bl	800c800 <_sbrk_r>
 800c770:	4580      	cmp	r8, r0
 800c772:	d13a      	bne.n	800c7ea <_malloc_r+0xd2>
 800c774:	6821      	ldr	r1, [r4, #0]
 800c776:	3503      	adds	r5, #3
 800c778:	1a6d      	subs	r5, r5, r1
 800c77a:	f025 0503 	bic.w	r5, r5, #3
 800c77e:	3508      	adds	r5, #8
 800c780:	2d0c      	cmp	r5, #12
 800c782:	bf38      	it	cc
 800c784:	250c      	movcc	r5, #12
 800c786:	4638      	mov	r0, r7
 800c788:	4629      	mov	r1, r5
 800c78a:	f7ff ffa5 	bl	800c6d8 <sbrk_aligned>
 800c78e:	3001      	adds	r0, #1
 800c790:	d02b      	beq.n	800c7ea <_malloc_r+0xd2>
 800c792:	6823      	ldr	r3, [r4, #0]
 800c794:	442b      	add	r3, r5
 800c796:	6023      	str	r3, [r4, #0]
 800c798:	e00e      	b.n	800c7b8 <_malloc_r+0xa0>
 800c79a:	6822      	ldr	r2, [r4, #0]
 800c79c:	1b52      	subs	r2, r2, r5
 800c79e:	d41e      	bmi.n	800c7de <_malloc_r+0xc6>
 800c7a0:	2a0b      	cmp	r2, #11
 800c7a2:	d916      	bls.n	800c7d2 <_malloc_r+0xba>
 800c7a4:	1961      	adds	r1, r4, r5
 800c7a6:	42a3      	cmp	r3, r4
 800c7a8:	6025      	str	r5, [r4, #0]
 800c7aa:	bf18      	it	ne
 800c7ac:	6059      	strne	r1, [r3, #4]
 800c7ae:	6863      	ldr	r3, [r4, #4]
 800c7b0:	bf08      	it	eq
 800c7b2:	6031      	streq	r1, [r6, #0]
 800c7b4:	5162      	str	r2, [r4, r5]
 800c7b6:	604b      	str	r3, [r1, #4]
 800c7b8:	4638      	mov	r0, r7
 800c7ba:	f104 060b 	add.w	r6, r4, #11
 800c7be:	f000 fcb7 	bl	800d130 <__malloc_unlock>
 800c7c2:	f026 0607 	bic.w	r6, r6, #7
 800c7c6:	1d23      	adds	r3, r4, #4
 800c7c8:	1af2      	subs	r2, r6, r3
 800c7ca:	d0b6      	beq.n	800c73a <_malloc_r+0x22>
 800c7cc:	1b9b      	subs	r3, r3, r6
 800c7ce:	50a3      	str	r3, [r4, r2]
 800c7d0:	e7b3      	b.n	800c73a <_malloc_r+0x22>
 800c7d2:	6862      	ldr	r2, [r4, #4]
 800c7d4:	42a3      	cmp	r3, r4
 800c7d6:	bf0c      	ite	eq
 800c7d8:	6032      	streq	r2, [r6, #0]
 800c7da:	605a      	strne	r2, [r3, #4]
 800c7dc:	e7ec      	b.n	800c7b8 <_malloc_r+0xa0>
 800c7de:	4623      	mov	r3, r4
 800c7e0:	6864      	ldr	r4, [r4, #4]
 800c7e2:	e7b2      	b.n	800c74a <_malloc_r+0x32>
 800c7e4:	4634      	mov	r4, r6
 800c7e6:	6876      	ldr	r6, [r6, #4]
 800c7e8:	e7b9      	b.n	800c75e <_malloc_r+0x46>
 800c7ea:	230c      	movs	r3, #12
 800c7ec:	4638      	mov	r0, r7
 800c7ee:	603b      	str	r3, [r7, #0]
 800c7f0:	f000 fc9e 	bl	800d130 <__malloc_unlock>
 800c7f4:	e7a1      	b.n	800c73a <_malloc_r+0x22>
 800c7f6:	6025      	str	r5, [r4, #0]
 800c7f8:	e7de      	b.n	800c7b8 <_malloc_r+0xa0>
 800c7fa:	bf00      	nop
 800c7fc:	20002c04 	.word	0x20002c04

0800c800 <_sbrk_r>:
 800c800:	b538      	push	{r3, r4, r5, lr}
 800c802:	2300      	movs	r3, #0
 800c804:	4d05      	ldr	r5, [pc, #20]	; (800c81c <_sbrk_r+0x1c>)
 800c806:	4604      	mov	r4, r0
 800c808:	4608      	mov	r0, r1
 800c80a:	602b      	str	r3, [r5, #0]
 800c80c:	f7f9 ff02 	bl	8006614 <_sbrk>
 800c810:	1c43      	adds	r3, r0, #1
 800c812:	d102      	bne.n	800c81a <_sbrk_r+0x1a>
 800c814:	682b      	ldr	r3, [r5, #0]
 800c816:	b103      	cbz	r3, 800c81a <_sbrk_r+0x1a>
 800c818:	6023      	str	r3, [r4, #0]
 800c81a:	bd38      	pop	{r3, r4, r5, pc}
 800c81c:	20002c38 	.word	0x20002c38

0800c820 <siprintf>:
 800c820:	b40e      	push	{r1, r2, r3}
 800c822:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c826:	b500      	push	{lr}
 800c828:	b09c      	sub	sp, #112	; 0x70
 800c82a:	ab1d      	add	r3, sp, #116	; 0x74
 800c82c:	9002      	str	r0, [sp, #8]
 800c82e:	9006      	str	r0, [sp, #24]
 800c830:	9107      	str	r1, [sp, #28]
 800c832:	9104      	str	r1, [sp, #16]
 800c834:	4808      	ldr	r0, [pc, #32]	; (800c858 <siprintf+0x38>)
 800c836:	4909      	ldr	r1, [pc, #36]	; (800c85c <siprintf+0x3c>)
 800c838:	f853 2b04 	ldr.w	r2, [r3], #4
 800c83c:	9105      	str	r1, [sp, #20]
 800c83e:	6800      	ldr	r0, [r0, #0]
 800c840:	a902      	add	r1, sp, #8
 800c842:	9301      	str	r3, [sp, #4]
 800c844:	f000 fcd6 	bl	800d1f4 <_svfiprintf_r>
 800c848:	2200      	movs	r2, #0
 800c84a:	9b02      	ldr	r3, [sp, #8]
 800c84c:	701a      	strb	r2, [r3, #0]
 800c84e:	b01c      	add	sp, #112	; 0x70
 800c850:	f85d eb04 	ldr.w	lr, [sp], #4
 800c854:	b003      	add	sp, #12
 800c856:	4770      	bx	lr
 800c858:	200004e0 	.word	0x200004e0
 800c85c:	ffff0208 	.word	0xffff0208

0800c860 <strtok>:
 800c860:	4b16      	ldr	r3, [pc, #88]	; (800c8bc <strtok+0x5c>)
 800c862:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c866:	681f      	ldr	r7, [r3, #0]
 800c868:	4605      	mov	r5, r0
 800c86a:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 800c86c:	460e      	mov	r6, r1
 800c86e:	b9ec      	cbnz	r4, 800c8ac <strtok+0x4c>
 800c870:	2050      	movs	r0, #80	; 0x50
 800c872:	f7ff fc41 	bl	800c0f8 <malloc>
 800c876:	4602      	mov	r2, r0
 800c878:	65b8      	str	r0, [r7, #88]	; 0x58
 800c87a:	b920      	cbnz	r0, 800c886 <strtok+0x26>
 800c87c:	2157      	movs	r1, #87	; 0x57
 800c87e:	4b10      	ldr	r3, [pc, #64]	; (800c8c0 <strtok+0x60>)
 800c880:	4810      	ldr	r0, [pc, #64]	; (800c8c4 <strtok+0x64>)
 800c882:	f000 fb0f 	bl	800cea4 <__assert_func>
 800c886:	e9c0 4400 	strd	r4, r4, [r0]
 800c88a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800c88e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800c892:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800c896:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800c89a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800c89e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800c8a2:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800c8a6:	6184      	str	r4, [r0, #24]
 800c8a8:	7704      	strb	r4, [r0, #28]
 800c8aa:	6244      	str	r4, [r0, #36]	; 0x24
 800c8ac:	4631      	mov	r1, r6
 800c8ae:	4628      	mov	r0, r5
 800c8b0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c8b2:	2301      	movs	r3, #1
 800c8b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c8b8:	f000 b806 	b.w	800c8c8 <__strtok_r>
 800c8bc:	200004e0 	.word	0x200004e0
 800c8c0:	0800f41c 	.word	0x0800f41c
 800c8c4:	0800f550 	.word	0x0800f550

0800c8c8 <__strtok_r>:
 800c8c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c8ca:	b908      	cbnz	r0, 800c8d0 <__strtok_r+0x8>
 800c8cc:	6810      	ldr	r0, [r2, #0]
 800c8ce:	b188      	cbz	r0, 800c8f4 <__strtok_r+0x2c>
 800c8d0:	4604      	mov	r4, r0
 800c8d2:	460f      	mov	r7, r1
 800c8d4:	4620      	mov	r0, r4
 800c8d6:	f814 5b01 	ldrb.w	r5, [r4], #1
 800c8da:	f817 6b01 	ldrb.w	r6, [r7], #1
 800c8de:	b91e      	cbnz	r6, 800c8e8 <__strtok_r+0x20>
 800c8e0:	b965      	cbnz	r5, 800c8fc <__strtok_r+0x34>
 800c8e2:	4628      	mov	r0, r5
 800c8e4:	6015      	str	r5, [r2, #0]
 800c8e6:	e005      	b.n	800c8f4 <__strtok_r+0x2c>
 800c8e8:	42b5      	cmp	r5, r6
 800c8ea:	d1f6      	bne.n	800c8da <__strtok_r+0x12>
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d1f0      	bne.n	800c8d2 <__strtok_r+0xa>
 800c8f0:	6014      	str	r4, [r2, #0]
 800c8f2:	7003      	strb	r3, [r0, #0]
 800c8f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c8f6:	461c      	mov	r4, r3
 800c8f8:	e00c      	b.n	800c914 <__strtok_r+0x4c>
 800c8fa:	b915      	cbnz	r5, 800c902 <__strtok_r+0x3a>
 800c8fc:	460e      	mov	r6, r1
 800c8fe:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c902:	f816 5b01 	ldrb.w	r5, [r6], #1
 800c906:	42ab      	cmp	r3, r5
 800c908:	d1f7      	bne.n	800c8fa <__strtok_r+0x32>
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d0f3      	beq.n	800c8f6 <__strtok_r+0x2e>
 800c90e:	2300      	movs	r3, #0
 800c910:	f804 3c01 	strb.w	r3, [r4, #-1]
 800c914:	6014      	str	r4, [r2, #0]
 800c916:	e7ed      	b.n	800c8f4 <__strtok_r+0x2c>

0800c918 <_strtol_l.constprop.0>:
 800c918:	2b01      	cmp	r3, #1
 800c91a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c91e:	4680      	mov	r8, r0
 800c920:	d001      	beq.n	800c926 <_strtol_l.constprop.0+0xe>
 800c922:	2b24      	cmp	r3, #36	; 0x24
 800c924:	d906      	bls.n	800c934 <_strtol_l.constprop.0+0x1c>
 800c926:	f7ff faad 	bl	800be84 <__errno>
 800c92a:	2316      	movs	r3, #22
 800c92c:	6003      	str	r3, [r0, #0]
 800c92e:	2000      	movs	r0, #0
 800c930:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c934:	460d      	mov	r5, r1
 800c936:	4f35      	ldr	r7, [pc, #212]	; (800ca0c <_strtol_l.constprop.0+0xf4>)
 800c938:	4628      	mov	r0, r5
 800c93a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c93e:	5de6      	ldrb	r6, [r4, r7]
 800c940:	f016 0608 	ands.w	r6, r6, #8
 800c944:	d1f8      	bne.n	800c938 <_strtol_l.constprop.0+0x20>
 800c946:	2c2d      	cmp	r4, #45	; 0x2d
 800c948:	d12f      	bne.n	800c9aa <_strtol_l.constprop.0+0x92>
 800c94a:	2601      	movs	r6, #1
 800c94c:	782c      	ldrb	r4, [r5, #0]
 800c94e:	1c85      	adds	r5, r0, #2
 800c950:	2b00      	cmp	r3, #0
 800c952:	d057      	beq.n	800ca04 <_strtol_l.constprop.0+0xec>
 800c954:	2b10      	cmp	r3, #16
 800c956:	d109      	bne.n	800c96c <_strtol_l.constprop.0+0x54>
 800c958:	2c30      	cmp	r4, #48	; 0x30
 800c95a:	d107      	bne.n	800c96c <_strtol_l.constprop.0+0x54>
 800c95c:	7828      	ldrb	r0, [r5, #0]
 800c95e:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800c962:	2858      	cmp	r0, #88	; 0x58
 800c964:	d149      	bne.n	800c9fa <_strtol_l.constprop.0+0xe2>
 800c966:	2310      	movs	r3, #16
 800c968:	786c      	ldrb	r4, [r5, #1]
 800c96a:	3502      	adds	r5, #2
 800c96c:	2700      	movs	r7, #0
 800c96e:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800c972:	f10e 3eff 	add.w	lr, lr, #4294967295
 800c976:	fbbe f9f3 	udiv	r9, lr, r3
 800c97a:	4638      	mov	r0, r7
 800c97c:	fb03 ea19 	mls	sl, r3, r9, lr
 800c980:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800c984:	f1bc 0f09 	cmp.w	ip, #9
 800c988:	d814      	bhi.n	800c9b4 <_strtol_l.constprop.0+0x9c>
 800c98a:	4664      	mov	r4, ip
 800c98c:	42a3      	cmp	r3, r4
 800c98e:	dd22      	ble.n	800c9d6 <_strtol_l.constprop.0+0xbe>
 800c990:	2f00      	cmp	r7, #0
 800c992:	db1d      	blt.n	800c9d0 <_strtol_l.constprop.0+0xb8>
 800c994:	4581      	cmp	r9, r0
 800c996:	d31b      	bcc.n	800c9d0 <_strtol_l.constprop.0+0xb8>
 800c998:	d101      	bne.n	800c99e <_strtol_l.constprop.0+0x86>
 800c99a:	45a2      	cmp	sl, r4
 800c99c:	db18      	blt.n	800c9d0 <_strtol_l.constprop.0+0xb8>
 800c99e:	2701      	movs	r7, #1
 800c9a0:	fb00 4003 	mla	r0, r0, r3, r4
 800c9a4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c9a8:	e7ea      	b.n	800c980 <_strtol_l.constprop.0+0x68>
 800c9aa:	2c2b      	cmp	r4, #43	; 0x2b
 800c9ac:	bf04      	itt	eq
 800c9ae:	782c      	ldrbeq	r4, [r5, #0]
 800c9b0:	1c85      	addeq	r5, r0, #2
 800c9b2:	e7cd      	b.n	800c950 <_strtol_l.constprop.0+0x38>
 800c9b4:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800c9b8:	f1bc 0f19 	cmp.w	ip, #25
 800c9bc:	d801      	bhi.n	800c9c2 <_strtol_l.constprop.0+0xaa>
 800c9be:	3c37      	subs	r4, #55	; 0x37
 800c9c0:	e7e4      	b.n	800c98c <_strtol_l.constprop.0+0x74>
 800c9c2:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800c9c6:	f1bc 0f19 	cmp.w	ip, #25
 800c9ca:	d804      	bhi.n	800c9d6 <_strtol_l.constprop.0+0xbe>
 800c9cc:	3c57      	subs	r4, #87	; 0x57
 800c9ce:	e7dd      	b.n	800c98c <_strtol_l.constprop.0+0x74>
 800c9d0:	f04f 37ff 	mov.w	r7, #4294967295
 800c9d4:	e7e6      	b.n	800c9a4 <_strtol_l.constprop.0+0x8c>
 800c9d6:	2f00      	cmp	r7, #0
 800c9d8:	da07      	bge.n	800c9ea <_strtol_l.constprop.0+0xd2>
 800c9da:	2322      	movs	r3, #34	; 0x22
 800c9dc:	4670      	mov	r0, lr
 800c9de:	f8c8 3000 	str.w	r3, [r8]
 800c9e2:	2a00      	cmp	r2, #0
 800c9e4:	d0a4      	beq.n	800c930 <_strtol_l.constprop.0+0x18>
 800c9e6:	1e69      	subs	r1, r5, #1
 800c9e8:	e005      	b.n	800c9f6 <_strtol_l.constprop.0+0xde>
 800c9ea:	b106      	cbz	r6, 800c9ee <_strtol_l.constprop.0+0xd6>
 800c9ec:	4240      	negs	r0, r0
 800c9ee:	2a00      	cmp	r2, #0
 800c9f0:	d09e      	beq.n	800c930 <_strtol_l.constprop.0+0x18>
 800c9f2:	2f00      	cmp	r7, #0
 800c9f4:	d1f7      	bne.n	800c9e6 <_strtol_l.constprop.0+0xce>
 800c9f6:	6011      	str	r1, [r2, #0]
 800c9f8:	e79a      	b.n	800c930 <_strtol_l.constprop.0+0x18>
 800c9fa:	2430      	movs	r4, #48	; 0x30
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d1b5      	bne.n	800c96c <_strtol_l.constprop.0+0x54>
 800ca00:	2308      	movs	r3, #8
 800ca02:	e7b3      	b.n	800c96c <_strtol_l.constprop.0+0x54>
 800ca04:	2c30      	cmp	r4, #48	; 0x30
 800ca06:	d0a9      	beq.n	800c95c <_strtol_l.constprop.0+0x44>
 800ca08:	230a      	movs	r3, #10
 800ca0a:	e7af      	b.n	800c96c <_strtol_l.constprop.0+0x54>
 800ca0c:	0800f626 	.word	0x0800f626

0800ca10 <_strtol_r>:
 800ca10:	f7ff bf82 	b.w	800c918 <_strtol_l.constprop.0>

0800ca14 <strtol>:
 800ca14:	4613      	mov	r3, r2
 800ca16:	460a      	mov	r2, r1
 800ca18:	4601      	mov	r1, r0
 800ca1a:	4802      	ldr	r0, [pc, #8]	; (800ca24 <strtol+0x10>)
 800ca1c:	6800      	ldr	r0, [r0, #0]
 800ca1e:	f7ff bf7b 	b.w	800c918 <_strtol_l.constprop.0>
 800ca22:	bf00      	nop
 800ca24:	200004e0 	.word	0x200004e0

0800ca28 <__tzcalc_limits>:
 800ca28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca2c:	4605      	mov	r5, r0
 800ca2e:	f000 fac1 	bl	800cfb4 <__gettzinfo>
 800ca32:	f240 73b1 	movw	r3, #1969	; 0x7b1
 800ca36:	429d      	cmp	r5, r3
 800ca38:	f340 809a 	ble.w	800cb70 <__tzcalc_limits+0x148>
 800ca3c:	f46f 62f6 	mvn.w	r2, #1968	; 0x7b0
 800ca40:	18ac      	adds	r4, r5, r2
 800ca42:	f240 126d 	movw	r2, #365	; 0x16d
 800ca46:	f2a5 73b2 	subw	r3, r5, #1970	; 0x7b2
 800ca4a:	10a4      	asrs	r4, r4, #2
 800ca4c:	fb02 4403 	mla	r4, r2, r3, r4
 800ca50:	f06f 0263 	mvn.w	r2, #99	; 0x63
 800ca54:	f2a5 736d 	subw	r3, r5, #1901	; 0x76d
 800ca58:	fb93 f3f2 	sdiv	r3, r3, r2
 800ca5c:	f46f 61c8 	mvn.w	r1, #1600	; 0x640
 800ca60:	441c      	add	r4, r3
 800ca62:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800ca66:	186a      	adds	r2, r5, r1
 800ca68:	fbb2 f2f3 	udiv	r2, r2, r3
 800ca6c:	fb95 fcf3 	sdiv	ip, r5, r3
 800ca70:	4414      	add	r4, r2
 800ca72:	2264      	movs	r2, #100	; 0x64
 800ca74:	fb03 5c1c 	mls	ip, r3, ip, r5
 800ca78:	fb95 f7f2 	sdiv	r7, r5, r2
 800ca7c:	fabc f68c 	clz	r6, ip
 800ca80:	4601      	mov	r1, r0
 800ca82:	fb02 5717 	mls	r7, r2, r7, r5
 800ca86:	6045      	str	r5, [r0, #4]
 800ca88:	0976      	lsrs	r6, r6, #5
 800ca8a:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 800ca8e:	f005 0203 	and.w	r2, r5, #3
 800ca92:	7a0d      	ldrb	r5, [r1, #8]
 800ca94:	694b      	ldr	r3, [r1, #20]
 800ca96:	2d4a      	cmp	r5, #74	; 0x4a
 800ca98:	d12d      	bne.n	800caf6 <__tzcalc_limits+0xce>
 800ca9a:	eb04 0e03 	add.w	lr, r4, r3
 800ca9e:	b902      	cbnz	r2, 800caa2 <__tzcalc_limits+0x7a>
 800caa0:	b917      	cbnz	r7, 800caa8 <__tzcalc_limits+0x80>
 800caa2:	f1bc 0f00 	cmp.w	ip, #0
 800caa6:	d124      	bne.n	800caf2 <__tzcalc_limits+0xca>
 800caa8:	2b3b      	cmp	r3, #59	; 0x3b
 800caaa:	bfd4      	ite	le
 800caac:	2300      	movle	r3, #0
 800caae:	2301      	movgt	r3, #1
 800cab0:	4473      	add	r3, lr
 800cab2:	3b01      	subs	r3, #1
 800cab4:	698d      	ldr	r5, [r1, #24]
 800cab6:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 800cb74 <__tzcalc_limits+0x14c>
 800caba:	ea4f 7ee5 	mov.w	lr, r5, asr #31
 800cabe:	fbc3 5e08 	smlal	r5, lr, r3, r8
 800cac2:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800cac4:	18ed      	adds	r5, r5, r3
 800cac6:	eb4e 73e3 	adc.w	r3, lr, r3, asr #31
 800caca:	e9c1 5308 	strd	r5, r3, [r1, #32]
 800cace:	3128      	adds	r1, #40	; 0x28
 800cad0:	458b      	cmp	fp, r1
 800cad2:	d1de      	bne.n	800ca92 <__tzcalc_limits+0x6a>
 800cad4:	e9d0 1312 	ldrd	r1, r3, [r0, #72]	; 0x48
 800cad8:	e9d0 4208 	ldrd	r4, r2, [r0, #32]
 800cadc:	428c      	cmp	r4, r1
 800cade:	eb72 0303 	sbcs.w	r3, r2, r3
 800cae2:	bfb4      	ite	lt
 800cae4:	2301      	movlt	r3, #1
 800cae6:	2300      	movge	r3, #0
 800cae8:	6003      	str	r3, [r0, #0]
 800caea:	2001      	movs	r0, #1
 800caec:	b003      	add	sp, #12
 800caee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800caf2:	2300      	movs	r3, #0
 800caf4:	e7dc      	b.n	800cab0 <__tzcalc_limits+0x88>
 800caf6:	2d44      	cmp	r5, #68	; 0x44
 800caf8:	d101      	bne.n	800cafe <__tzcalc_limits+0xd6>
 800cafa:	4423      	add	r3, r4
 800cafc:	e7da      	b.n	800cab4 <__tzcalc_limits+0x8c>
 800cafe:	bb8a      	cbnz	r2, 800cb64 <__tzcalc_limits+0x13c>
 800cb00:	2f00      	cmp	r7, #0
 800cb02:	bf0c      	ite	eq
 800cb04:	4635      	moveq	r5, r6
 800cb06:	2501      	movne	r5, #1
 800cb08:	f04f 0a30 	mov.w	sl, #48	; 0x30
 800cb0c:	f8d1 e00c 	ldr.w	lr, [r1, #12]
 800cb10:	f04f 0800 	mov.w	r8, #0
 800cb14:	f8cd e004 	str.w	lr, [sp, #4]
 800cb18:	46a6      	mov	lr, r4
 800cb1a:	f8df 905c 	ldr.w	r9, [pc, #92]	; 800cb78 <__tzcalc_limits+0x150>
 800cb1e:	fb0a 9505 	mla	r5, sl, r5, r9
 800cb22:	3d04      	subs	r5, #4
 800cb24:	f8dd a004 	ldr.w	sl, [sp, #4]
 800cb28:	f108 0801 	add.w	r8, r8, #1
 800cb2c:	45c2      	cmp	sl, r8
 800cb2e:	f855 9028 	ldr.w	r9, [r5, r8, lsl #2]
 800cb32:	dc19      	bgt.n	800cb68 <__tzcalc_limits+0x140>
 800cb34:	f04f 0807 	mov.w	r8, #7
 800cb38:	f10e 0504 	add.w	r5, lr, #4
 800cb3c:	fb95 f8f8 	sdiv	r8, r5, r8
 800cb40:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
 800cb44:	eba5 0808 	sub.w	r8, r5, r8
 800cb48:	ebb3 0808 	subs.w	r8, r3, r8
 800cb4c:	690b      	ldr	r3, [r1, #16]
 800cb4e:	bf48      	it	mi
 800cb50:	f108 0807 	addmi.w	r8, r8, #7
 800cb54:	3b01      	subs	r3, #1
 800cb56:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800cb5a:	4443      	add	r3, r8
 800cb5c:	454b      	cmp	r3, r9
 800cb5e:	da05      	bge.n	800cb6c <__tzcalc_limits+0x144>
 800cb60:	4473      	add	r3, lr
 800cb62:	e7a7      	b.n	800cab4 <__tzcalc_limits+0x8c>
 800cb64:	4635      	mov	r5, r6
 800cb66:	e7cf      	b.n	800cb08 <__tzcalc_limits+0xe0>
 800cb68:	44ce      	add	lr, r9
 800cb6a:	e7db      	b.n	800cb24 <__tzcalc_limits+0xfc>
 800cb6c:	3b07      	subs	r3, #7
 800cb6e:	e7f5      	b.n	800cb5c <__tzcalc_limits+0x134>
 800cb70:	2000      	movs	r0, #0
 800cb72:	e7bb      	b.n	800caec <__tzcalc_limits+0xc4>
 800cb74:	00015180 	.word	0x00015180
 800cb78:	0800f4f0 	.word	0x0800f4f0

0800cb7c <__tz_lock>:
 800cb7c:	4801      	ldr	r0, [pc, #4]	; (800cb84 <__tz_lock+0x8>)
 800cb7e:	f000 bacc 	b.w	800d11a <__retarget_lock_acquire>
 800cb82:	bf00      	nop
 800cb84:	20002c34 	.word	0x20002c34

0800cb88 <__tz_unlock>:
 800cb88:	4801      	ldr	r0, [pc, #4]	; (800cb90 <__tz_unlock+0x8>)
 800cb8a:	f000 bac8 	b.w	800d11e <__retarget_lock_release>
 800cb8e:	bf00      	nop
 800cb90:	20002c34 	.word	0x20002c34

0800cb94 <_tzset_unlocked>:
 800cb94:	4b01      	ldr	r3, [pc, #4]	; (800cb9c <_tzset_unlocked+0x8>)
 800cb96:	6818      	ldr	r0, [r3, #0]
 800cb98:	f000 b802 	b.w	800cba0 <_tzset_unlocked_r>
 800cb9c:	200004e0 	.word	0x200004e0

0800cba0 <_tzset_unlocked_r>:
 800cba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cba4:	b08d      	sub	sp, #52	; 0x34
 800cba6:	4607      	mov	r7, r0
 800cba8:	f000 fa04 	bl	800cfb4 <__gettzinfo>
 800cbac:	49b1      	ldr	r1, [pc, #708]	; (800ce74 <_tzset_unlocked_r+0x2d4>)
 800cbae:	4605      	mov	r5, r0
 800cbb0:	4638      	mov	r0, r7
 800cbb2:	f000 f9f7 	bl	800cfa4 <_getenv_r>
 800cbb6:	4eb0      	ldr	r6, [pc, #704]	; (800ce78 <_tzset_unlocked_r+0x2d8>)
 800cbb8:	4604      	mov	r4, r0
 800cbba:	b970      	cbnz	r0, 800cbda <_tzset_unlocked_r+0x3a>
 800cbbc:	4baf      	ldr	r3, [pc, #700]	; (800ce7c <_tzset_unlocked_r+0x2dc>)
 800cbbe:	4ab0      	ldr	r2, [pc, #704]	; (800ce80 <_tzset_unlocked_r+0x2e0>)
 800cbc0:	6018      	str	r0, [r3, #0]
 800cbc2:	4bb0      	ldr	r3, [pc, #704]	; (800ce84 <_tzset_unlocked_r+0x2e4>)
 800cbc4:	6018      	str	r0, [r3, #0]
 800cbc6:	4bb0      	ldr	r3, [pc, #704]	; (800ce88 <_tzset_unlocked_r+0x2e8>)
 800cbc8:	6830      	ldr	r0, [r6, #0]
 800cbca:	e9c3 2200 	strd	r2, r2, [r3]
 800cbce:	f7ff fa9b 	bl	800c108 <free>
 800cbd2:	6034      	str	r4, [r6, #0]
 800cbd4:	b00d      	add	sp, #52	; 0x34
 800cbd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbda:	6831      	ldr	r1, [r6, #0]
 800cbdc:	2900      	cmp	r1, #0
 800cbde:	d162      	bne.n	800cca6 <_tzset_unlocked_r+0x106>
 800cbe0:	6830      	ldr	r0, [r6, #0]
 800cbe2:	f7ff fa91 	bl	800c108 <free>
 800cbe6:	4620      	mov	r0, r4
 800cbe8:	f7f3 fab0 	bl	800014c <strlen>
 800cbec:	1c41      	adds	r1, r0, #1
 800cbee:	4638      	mov	r0, r7
 800cbf0:	f7ff fd92 	bl	800c718 <_malloc_r>
 800cbf4:	6030      	str	r0, [r6, #0]
 800cbf6:	2800      	cmp	r0, #0
 800cbf8:	d15a      	bne.n	800ccb0 <_tzset_unlocked_r+0x110>
 800cbfa:	7823      	ldrb	r3, [r4, #0]
 800cbfc:	ae0a      	add	r6, sp, #40	; 0x28
 800cbfe:	2b3a      	cmp	r3, #58	; 0x3a
 800cc00:	bf08      	it	eq
 800cc02:	3401      	addeq	r4, #1
 800cc04:	4633      	mov	r3, r6
 800cc06:	4620      	mov	r0, r4
 800cc08:	4aa0      	ldr	r2, [pc, #640]	; (800ce8c <_tzset_unlocked_r+0x2ec>)
 800cc0a:	49a1      	ldr	r1, [pc, #644]	; (800ce90 <_tzset_unlocked_r+0x2f0>)
 800cc0c:	f000 fee0 	bl	800d9d0 <siscanf>
 800cc10:	2800      	cmp	r0, #0
 800cc12:	dddf      	ble.n	800cbd4 <_tzset_unlocked_r+0x34>
 800cc14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc16:	18e7      	adds	r7, r4, r3
 800cc18:	5ce3      	ldrb	r3, [r4, r3]
 800cc1a:	2b2d      	cmp	r3, #45	; 0x2d
 800cc1c:	d14c      	bne.n	800ccb8 <_tzset_unlocked_r+0x118>
 800cc1e:	f04f 38ff 	mov.w	r8, #4294967295
 800cc22:	3701      	adds	r7, #1
 800cc24:	2400      	movs	r4, #0
 800cc26:	f10d 0a20 	add.w	sl, sp, #32
 800cc2a:	f10d 0b1e 	add.w	fp, sp, #30
 800cc2e:	4633      	mov	r3, r6
 800cc30:	4638      	mov	r0, r7
 800cc32:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 800cc36:	4997      	ldr	r1, [pc, #604]	; (800ce94 <_tzset_unlocked_r+0x2f4>)
 800cc38:	9603      	str	r6, [sp, #12]
 800cc3a:	f8cd b000 	str.w	fp, [sp]
 800cc3e:	aa07      	add	r2, sp, #28
 800cc40:	f8ad 401e 	strh.w	r4, [sp, #30]
 800cc44:	f8ad 4020 	strh.w	r4, [sp, #32]
 800cc48:	f000 fec2 	bl	800d9d0 <siscanf>
 800cc4c:	42a0      	cmp	r0, r4
 800cc4e:	ddc1      	ble.n	800cbd4 <_tzset_unlocked_r+0x34>
 800cc50:	213c      	movs	r1, #60	; 0x3c
 800cc52:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800cc56:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800cc5a:	f8df 923c 	ldr.w	r9, [pc, #572]	; 800ce98 <_tzset_unlocked_r+0x2f8>
 800cc5e:	fb01 3302 	mla	r3, r1, r2, r3
 800cc62:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800cc66:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800cc6a:	fb01 3302 	mla	r3, r1, r2, r3
 800cc6e:	fb08 f303 	mul.w	r3, r8, r3
 800cc72:	f8df 8214 	ldr.w	r8, [pc, #532]	; 800ce88 <_tzset_unlocked_r+0x2e8>
 800cc76:	62ab      	str	r3, [r5, #40]	; 0x28
 800cc78:	4b84      	ldr	r3, [pc, #528]	; (800ce8c <_tzset_unlocked_r+0x2ec>)
 800cc7a:	464a      	mov	r2, r9
 800cc7c:	f8c8 3000 	str.w	r3, [r8]
 800cc80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc82:	4983      	ldr	r1, [pc, #524]	; (800ce90 <_tzset_unlocked_r+0x2f0>)
 800cc84:	441f      	add	r7, r3
 800cc86:	4638      	mov	r0, r7
 800cc88:	4633      	mov	r3, r6
 800cc8a:	f000 fea1 	bl	800d9d0 <siscanf>
 800cc8e:	42a0      	cmp	r0, r4
 800cc90:	dc18      	bgt.n	800ccc4 <_tzset_unlocked_r+0x124>
 800cc92:	f8d8 3000 	ldr.w	r3, [r8]
 800cc96:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800cc98:	f8c8 3004 	str.w	r3, [r8, #4]
 800cc9c:	4b77      	ldr	r3, [pc, #476]	; (800ce7c <_tzset_unlocked_r+0x2dc>)
 800cc9e:	601a      	str	r2, [r3, #0]
 800cca0:	4b78      	ldr	r3, [pc, #480]	; (800ce84 <_tzset_unlocked_r+0x2e4>)
 800cca2:	601c      	str	r4, [r3, #0]
 800cca4:	e796      	b.n	800cbd4 <_tzset_unlocked_r+0x34>
 800cca6:	f7f3 fa59 	bl	800015c <strcmp>
 800ccaa:	2800      	cmp	r0, #0
 800ccac:	d198      	bne.n	800cbe0 <_tzset_unlocked_r+0x40>
 800ccae:	e791      	b.n	800cbd4 <_tzset_unlocked_r+0x34>
 800ccb0:	4621      	mov	r1, r4
 800ccb2:	f000 fefc 	bl	800daae <strcpy>
 800ccb6:	e7a0      	b.n	800cbfa <_tzset_unlocked_r+0x5a>
 800ccb8:	2b2b      	cmp	r3, #43	; 0x2b
 800ccba:	f04f 0801 	mov.w	r8, #1
 800ccbe:	bf08      	it	eq
 800ccc0:	3701      	addeq	r7, #1
 800ccc2:	e7af      	b.n	800cc24 <_tzset_unlocked_r+0x84>
 800ccc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ccc6:	f8c8 9004 	str.w	r9, [r8, #4]
 800ccca:	18fc      	adds	r4, r7, r3
 800cccc:	5cfb      	ldrb	r3, [r7, r3]
 800ccce:	2b2d      	cmp	r3, #45	; 0x2d
 800ccd0:	f040 808c 	bne.w	800cdec <_tzset_unlocked_r+0x24c>
 800ccd4:	f04f 37ff 	mov.w	r7, #4294967295
 800ccd8:	3401      	adds	r4, #1
 800ccda:	2300      	movs	r3, #0
 800ccdc:	4620      	mov	r0, r4
 800ccde:	f8ad 301c 	strh.w	r3, [sp, #28]
 800cce2:	f8ad 301e 	strh.w	r3, [sp, #30]
 800cce6:	f8ad 3020 	strh.w	r3, [sp, #32]
 800ccea:	930a      	str	r3, [sp, #40]	; 0x28
 800ccec:	e9cd a602 	strd	sl, r6, [sp, #8]
 800ccf0:	4633      	mov	r3, r6
 800ccf2:	e9cd b600 	strd	fp, r6, [sp]
 800ccf6:	4967      	ldr	r1, [pc, #412]	; (800ce94 <_tzset_unlocked_r+0x2f4>)
 800ccf8:	aa07      	add	r2, sp, #28
 800ccfa:	f000 fe69 	bl	800d9d0 <siscanf>
 800ccfe:	2800      	cmp	r0, #0
 800cd00:	dc7a      	bgt.n	800cdf8 <_tzset_unlocked_r+0x258>
 800cd02:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800cd04:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 800cd08:	462f      	mov	r7, r5
 800cd0a:	f04f 0900 	mov.w	r9, #0
 800cd0e:	652b      	str	r3, [r5, #80]	; 0x50
 800cd10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cd12:	441c      	add	r4, r3
 800cd14:	7823      	ldrb	r3, [r4, #0]
 800cd16:	2b2c      	cmp	r3, #44	; 0x2c
 800cd18:	bf08      	it	eq
 800cd1a:	3401      	addeq	r4, #1
 800cd1c:	f894 8000 	ldrb.w	r8, [r4]
 800cd20:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 800cd24:	d17a      	bne.n	800ce1c <_tzset_unlocked_r+0x27c>
 800cd26:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 800cd2a:	e9cd 6301 	strd	r6, r3, [sp, #4]
 800cd2e:	ab09      	add	r3, sp, #36	; 0x24
 800cd30:	9300      	str	r3, [sp, #0]
 800cd32:	4620      	mov	r0, r4
 800cd34:	4633      	mov	r3, r6
 800cd36:	4959      	ldr	r1, [pc, #356]	; (800ce9c <_tzset_unlocked_r+0x2fc>)
 800cd38:	9603      	str	r6, [sp, #12]
 800cd3a:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 800cd3e:	f000 fe47 	bl	800d9d0 <siscanf>
 800cd42:	2803      	cmp	r0, #3
 800cd44:	f47f af46 	bne.w	800cbd4 <_tzset_unlocked_r+0x34>
 800cd48:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 800cd4c:	1e4b      	subs	r3, r1, #1
 800cd4e:	2b0b      	cmp	r3, #11
 800cd50:	f63f af40 	bhi.w	800cbd4 <_tzset_unlocked_r+0x34>
 800cd54:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 800cd58:	1e53      	subs	r3, r2, #1
 800cd5a:	2b04      	cmp	r3, #4
 800cd5c:	f63f af3a 	bhi.w	800cbd4 <_tzset_unlocked_r+0x34>
 800cd60:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 800cd64:	2b06      	cmp	r3, #6
 800cd66:	f63f af35 	bhi.w	800cbd4 <_tzset_unlocked_r+0x34>
 800cd6a:	e9c7 1203 	strd	r1, r2, [r7, #12]
 800cd6e:	f887 8008 	strb.w	r8, [r7, #8]
 800cd72:	617b      	str	r3, [r7, #20]
 800cd74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cd76:	eb04 0803 	add.w	r8, r4, r3
 800cd7a:	2302      	movs	r3, #2
 800cd7c:	f8ad 301c 	strh.w	r3, [sp, #28]
 800cd80:	2300      	movs	r3, #0
 800cd82:	f8ad 301e 	strh.w	r3, [sp, #30]
 800cd86:	f8ad 3020 	strh.w	r3, [sp, #32]
 800cd8a:	930a      	str	r3, [sp, #40]	; 0x28
 800cd8c:	f898 3000 	ldrb.w	r3, [r8]
 800cd90:	2b2f      	cmp	r3, #47	; 0x2f
 800cd92:	d109      	bne.n	800cda8 <_tzset_unlocked_r+0x208>
 800cd94:	4633      	mov	r3, r6
 800cd96:	4640      	mov	r0, r8
 800cd98:	e9cd a602 	strd	sl, r6, [sp, #8]
 800cd9c:	e9cd b600 	strd	fp, r6, [sp]
 800cda0:	493f      	ldr	r1, [pc, #252]	; (800cea0 <_tzset_unlocked_r+0x300>)
 800cda2:	aa07      	add	r2, sp, #28
 800cda4:	f000 fe14 	bl	800d9d0 <siscanf>
 800cda8:	213c      	movs	r1, #60	; 0x3c
 800cdaa:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800cdae:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800cdb2:	3728      	adds	r7, #40	; 0x28
 800cdb4:	fb01 3302 	mla	r3, r1, r2, r3
 800cdb8:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800cdbc:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800cdc0:	fb01 3302 	mla	r3, r1, r2, r3
 800cdc4:	f847 3c10 	str.w	r3, [r7, #-16]
 800cdc8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800cdca:	4444      	add	r4, r8
 800cdcc:	f1b9 0f00 	cmp.w	r9, #0
 800cdd0:	d021      	beq.n	800ce16 <_tzset_unlocked_r+0x276>
 800cdd2:	6868      	ldr	r0, [r5, #4]
 800cdd4:	f7ff fe28 	bl	800ca28 <__tzcalc_limits>
 800cdd8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800cdda:	4b28      	ldr	r3, [pc, #160]	; (800ce7c <_tzset_unlocked_r+0x2dc>)
 800cddc:	601a      	str	r2, [r3, #0]
 800cdde:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800cde0:	1a9b      	subs	r3, r3, r2
 800cde2:	bf18      	it	ne
 800cde4:	2301      	movne	r3, #1
 800cde6:	4a27      	ldr	r2, [pc, #156]	; (800ce84 <_tzset_unlocked_r+0x2e4>)
 800cde8:	6013      	str	r3, [r2, #0]
 800cdea:	e6f3      	b.n	800cbd4 <_tzset_unlocked_r+0x34>
 800cdec:	2b2b      	cmp	r3, #43	; 0x2b
 800cdee:	f04f 0701 	mov.w	r7, #1
 800cdf2:	bf08      	it	eq
 800cdf4:	3401      	addeq	r4, #1
 800cdf6:	e770      	b.n	800ccda <_tzset_unlocked_r+0x13a>
 800cdf8:	213c      	movs	r1, #60	; 0x3c
 800cdfa:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800cdfe:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800ce02:	fb01 3302 	mla	r3, r1, r2, r3
 800ce06:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800ce0a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800ce0e:	fb01 3302 	mla	r3, r1, r2, r3
 800ce12:	437b      	muls	r3, r7
 800ce14:	e778      	b.n	800cd08 <_tzset_unlocked_r+0x168>
 800ce16:	f04f 0901 	mov.w	r9, #1
 800ce1a:	e77b      	b.n	800cd14 <_tzset_unlocked_r+0x174>
 800ce1c:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 800ce20:	bf0a      	itet	eq
 800ce22:	4643      	moveq	r3, r8
 800ce24:	2344      	movne	r3, #68	; 0x44
 800ce26:	3401      	addeq	r4, #1
 800ce28:	220a      	movs	r2, #10
 800ce2a:	4620      	mov	r0, r4
 800ce2c:	a90b      	add	r1, sp, #44	; 0x2c
 800ce2e:	9305      	str	r3, [sp, #20]
 800ce30:	f000 fece 	bl	800dbd0 <strtoul>
 800ce34:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800ce38:	9b05      	ldr	r3, [sp, #20]
 800ce3a:	45a0      	cmp	r8, r4
 800ce3c:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 800ce40:	d114      	bne.n	800ce6c <_tzset_unlocked_r+0x2cc>
 800ce42:	234d      	movs	r3, #77	; 0x4d
 800ce44:	f1b9 0f00 	cmp.w	r9, #0
 800ce48:	d107      	bne.n	800ce5a <_tzset_unlocked_r+0x2ba>
 800ce4a:	2103      	movs	r1, #3
 800ce4c:	722b      	strb	r3, [r5, #8]
 800ce4e:	2302      	movs	r3, #2
 800ce50:	f8c5 9014 	str.w	r9, [r5, #20]
 800ce54:	e9c5 1303 	strd	r1, r3, [r5, #12]
 800ce58:	e78f      	b.n	800cd7a <_tzset_unlocked_r+0x1da>
 800ce5a:	220b      	movs	r2, #11
 800ce5c:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 800ce60:	2301      	movs	r3, #1
 800ce62:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 800ce66:	2300      	movs	r3, #0
 800ce68:	63eb      	str	r3, [r5, #60]	; 0x3c
 800ce6a:	e786      	b.n	800cd7a <_tzset_unlocked_r+0x1da>
 800ce6c:	b280      	uxth	r0, r0
 800ce6e:	723b      	strb	r3, [r7, #8]
 800ce70:	6178      	str	r0, [r7, #20]
 800ce72:	e782      	b.n	800cd7a <_tzset_unlocked_r+0x1da>
 800ce74:	0800f5ad 	.word	0x0800f5ad
 800ce78:	20002c24 	.word	0x20002c24
 800ce7c:	20002c2c 	.word	0x20002c2c
 800ce80:	0800f5b0 	.word	0x0800f5b0
 800ce84:	20002c28 	.word	0x20002c28
 800ce88:	20000544 	.word	0x20000544
 800ce8c:	20002c17 	.word	0x20002c17
 800ce90:	0800f5b4 	.word	0x0800f5b4
 800ce94:	0800f5d7 	.word	0x0800f5d7
 800ce98:	20002c0c 	.word	0x20002c0c
 800ce9c:	0800f5c3 	.word	0x0800f5c3
 800cea0:	0800f5d6 	.word	0x0800f5d6

0800cea4 <__assert_func>:
 800cea4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cea6:	4614      	mov	r4, r2
 800cea8:	461a      	mov	r2, r3
 800ceaa:	4b09      	ldr	r3, [pc, #36]	; (800ced0 <__assert_func+0x2c>)
 800ceac:	4605      	mov	r5, r0
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	68d8      	ldr	r0, [r3, #12]
 800ceb2:	b14c      	cbz	r4, 800cec8 <__assert_func+0x24>
 800ceb4:	4b07      	ldr	r3, [pc, #28]	; (800ced4 <__assert_func+0x30>)
 800ceb6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ceba:	9100      	str	r1, [sp, #0]
 800cebc:	462b      	mov	r3, r5
 800cebe:	4906      	ldr	r1, [pc, #24]	; (800ced8 <__assert_func+0x34>)
 800cec0:	f000 f822 	bl	800cf08 <fiprintf>
 800cec4:	f000 ff60 	bl	800dd88 <abort>
 800cec8:	4b04      	ldr	r3, [pc, #16]	; (800cedc <__assert_func+0x38>)
 800ceca:	461c      	mov	r4, r3
 800cecc:	e7f3      	b.n	800ceb6 <__assert_func+0x12>
 800cece:	bf00      	nop
 800ced0:	200004e0 	.word	0x200004e0
 800ced4:	0800f5e9 	.word	0x0800f5e9
 800ced8:	0800f5f6 	.word	0x0800f5f6
 800cedc:	0800f624 	.word	0x0800f624

0800cee0 <div>:
 800cee0:	b510      	push	{r4, lr}
 800cee2:	fb91 f4f2 	sdiv	r4, r1, r2
 800cee6:	2900      	cmp	r1, #0
 800cee8:	fb02 1314 	mls	r3, r2, r4, r1
 800ceec:	db06      	blt.n	800cefc <div+0x1c>
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	da01      	bge.n	800cef6 <div+0x16>
 800cef2:	3401      	adds	r4, #1
 800cef4:	1a9b      	subs	r3, r3, r2
 800cef6:	e9c0 4300 	strd	r4, r3, [r0]
 800cefa:	bd10      	pop	{r4, pc}
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	bfc4      	itt	gt
 800cf00:	f104 34ff 	addgt.w	r4, r4, #4294967295
 800cf04:	189b      	addgt	r3, r3, r2
 800cf06:	e7f6      	b.n	800cef6 <div+0x16>

0800cf08 <fiprintf>:
 800cf08:	b40e      	push	{r1, r2, r3}
 800cf0a:	b503      	push	{r0, r1, lr}
 800cf0c:	4601      	mov	r1, r0
 800cf0e:	ab03      	add	r3, sp, #12
 800cf10:	4805      	ldr	r0, [pc, #20]	; (800cf28 <fiprintf+0x20>)
 800cf12:	f853 2b04 	ldr.w	r2, [r3], #4
 800cf16:	6800      	ldr	r0, [r0, #0]
 800cf18:	9301      	str	r3, [sp, #4]
 800cf1a:	f000 fa93 	bl	800d444 <_vfiprintf_r>
 800cf1e:	b002      	add	sp, #8
 800cf20:	f85d eb04 	ldr.w	lr, [sp], #4
 800cf24:	b003      	add	sp, #12
 800cf26:	4770      	bx	lr
 800cf28:	200004e0 	.word	0x200004e0

0800cf2c <_findenv_r>:
 800cf2c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf30:	f8df a06c 	ldr.w	sl, [pc, #108]	; 800cfa0 <_findenv_r+0x74>
 800cf34:	4607      	mov	r7, r0
 800cf36:	4689      	mov	r9, r1
 800cf38:	4616      	mov	r6, r2
 800cf3a:	f000 ff3d 	bl	800ddb8 <__env_lock>
 800cf3e:	f8da 4000 	ldr.w	r4, [sl]
 800cf42:	b134      	cbz	r4, 800cf52 <_findenv_r+0x26>
 800cf44:	464b      	mov	r3, r9
 800cf46:	4698      	mov	r8, r3
 800cf48:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cf4c:	b13a      	cbz	r2, 800cf5e <_findenv_r+0x32>
 800cf4e:	2a3d      	cmp	r2, #61	; 0x3d
 800cf50:	d1f9      	bne.n	800cf46 <_findenv_r+0x1a>
 800cf52:	4638      	mov	r0, r7
 800cf54:	f000 ff36 	bl	800ddc4 <__env_unlock>
 800cf58:	2000      	movs	r0, #0
 800cf5a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf5e:	eba8 0809 	sub.w	r8, r8, r9
 800cf62:	46a3      	mov	fp, r4
 800cf64:	f854 0b04 	ldr.w	r0, [r4], #4
 800cf68:	2800      	cmp	r0, #0
 800cf6a:	d0f2      	beq.n	800cf52 <_findenv_r+0x26>
 800cf6c:	4642      	mov	r2, r8
 800cf6e:	4649      	mov	r1, r9
 800cf70:	f000 fda5 	bl	800dabe <strncmp>
 800cf74:	2800      	cmp	r0, #0
 800cf76:	d1f4      	bne.n	800cf62 <_findenv_r+0x36>
 800cf78:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800cf7c:	eb03 0508 	add.w	r5, r3, r8
 800cf80:	f813 3008 	ldrb.w	r3, [r3, r8]
 800cf84:	2b3d      	cmp	r3, #61	; 0x3d
 800cf86:	d1ec      	bne.n	800cf62 <_findenv_r+0x36>
 800cf88:	f8da 3000 	ldr.w	r3, [sl]
 800cf8c:	4638      	mov	r0, r7
 800cf8e:	ebab 0303 	sub.w	r3, fp, r3
 800cf92:	109b      	asrs	r3, r3, #2
 800cf94:	6033      	str	r3, [r6, #0]
 800cf96:	f000 ff15 	bl	800ddc4 <__env_unlock>
 800cf9a:	1c68      	adds	r0, r5, #1
 800cf9c:	e7dd      	b.n	800cf5a <_findenv_r+0x2e>
 800cf9e:	bf00      	nop
 800cfa0:	2000048c 	.word	0x2000048c

0800cfa4 <_getenv_r>:
 800cfa4:	b507      	push	{r0, r1, r2, lr}
 800cfa6:	aa01      	add	r2, sp, #4
 800cfa8:	f7ff ffc0 	bl	800cf2c <_findenv_r>
 800cfac:	b003      	add	sp, #12
 800cfae:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800cfb4 <__gettzinfo>:
 800cfb4:	4800      	ldr	r0, [pc, #0]	; (800cfb8 <__gettzinfo+0x4>)
 800cfb6:	4770      	bx	lr
 800cfb8:	20000550 	.word	0x20000550

0800cfbc <gmtime_r>:
 800cfbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cfc0:	e9d0 6700 	ldrd	r6, r7, [r0]
 800cfc4:	460c      	mov	r4, r1
 800cfc6:	2300      	movs	r3, #0
 800cfc8:	4630      	mov	r0, r6
 800cfca:	4639      	mov	r1, r7
 800cfcc:	4a4e      	ldr	r2, [pc, #312]	; (800d108 <gmtime_r+0x14c>)
 800cfce:	f7f3 f8ef 	bl	80001b0 <__aeabi_ldivmod>
 800cfd2:	4639      	mov	r1, r7
 800cfd4:	4605      	mov	r5, r0
 800cfd6:	2300      	movs	r3, #0
 800cfd8:	4630      	mov	r0, r6
 800cfda:	4a4b      	ldr	r2, [pc, #300]	; (800d108 <gmtime_r+0x14c>)
 800cfdc:	f7f3 f8e8 	bl	80001b0 <__aeabi_ldivmod>
 800cfe0:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 800cfe4:	2a00      	cmp	r2, #0
 800cfe6:	bfbc      	itt	lt
 800cfe8:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 800cfec:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 800cff0:	fbb2 f1f0 	udiv	r1, r2, r0
 800cff4:	fb00 2211 	mls	r2, r0, r1, r2
 800cff8:	f04f 003c 	mov.w	r0, #60	; 0x3c
 800cffc:	60a1      	str	r1, [r4, #8]
 800cffe:	fbb2 f1f0 	udiv	r1, r2, r0
 800d002:	fb00 2211 	mls	r2, r0, r1, r2
 800d006:	6061      	str	r1, [r4, #4]
 800d008:	f04f 0107 	mov.w	r1, #7
 800d00c:	f505 232f 	add.w	r3, r5, #716800	; 0xaf000
 800d010:	bfac      	ite	ge
 800d012:	f603 236c 	addwge	r3, r3, #2668	; 0xa6c
 800d016:	f603 236b 	addwlt	r3, r3, #2667	; 0xa6b
 800d01a:	6022      	str	r2, [r4, #0]
 800d01c:	1cda      	adds	r2, r3, #3
 800d01e:	fb92 f1f1 	sdiv	r1, r2, r1
 800d022:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800d026:	1a52      	subs	r2, r2, r1
 800d028:	bf48      	it	mi
 800d02a:	3207      	addmi	r2, #7
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	4d37      	ldr	r5, [pc, #220]	; (800d10c <gmtime_r+0x150>)
 800d030:	61a2      	str	r2, [r4, #24]
 800d032:	bfbd      	ittte	lt
 800d034:	f5a3 320e 	sublt.w	r2, r3, #145408	; 0x23800
 800d038:	f5a2 722c 	sublt.w	r2, r2, #688	; 0x2b0
 800d03c:	fb92 f5f5 	sdivlt	r5, r2, r5
 800d040:	fb93 f5f5 	sdivge	r5, r3, r5
 800d044:	4832      	ldr	r0, [pc, #200]	; (800d110 <gmtime_r+0x154>)
 800d046:	f648 62ac 	movw	r2, #36524	; 0x8eac
 800d04a:	fb00 3005 	mla	r0, r0, r5, r3
 800d04e:	f240 53b4 	movw	r3, #1460	; 0x5b4
 800d052:	fbb0 f2f2 	udiv	r2, r0, r2
 800d056:	fbb0 f1f3 	udiv	r1, r0, r3
 800d05a:	4402      	add	r2, r0
 800d05c:	1a52      	subs	r2, r2, r1
 800d05e:	492d      	ldr	r1, [pc, #180]	; (800d114 <gmtime_r+0x158>)
 800d060:	f240 1c6d 	movw	ip, #365	; 0x16d
 800d064:	fbb0 f1f1 	udiv	r1, r0, r1
 800d068:	1a52      	subs	r2, r2, r1
 800d06a:	fbb2 f1fc 	udiv	r1, r2, ip
 800d06e:	2764      	movs	r7, #100	; 0x64
 800d070:	fbb2 f3f3 	udiv	r3, r2, r3
 800d074:	fbb1 f6f7 	udiv	r6, r1, r7
 800d078:	2299      	movs	r2, #153	; 0x99
 800d07a:	1af3      	subs	r3, r6, r3
 800d07c:	4403      	add	r3, r0
 800d07e:	fb0c 3311 	mls	r3, ip, r1, r3
 800d082:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
 800d086:	f10e 0e02 	add.w	lr, lr, #2
 800d08a:	fbbe f0f2 	udiv	r0, lr, r2
 800d08e:	f04f 0805 	mov.w	r8, #5
 800d092:	4342      	muls	r2, r0
 800d094:	3202      	adds	r2, #2
 800d096:	fbb2 f2f8 	udiv	r2, r2, r8
 800d09a:	f103 0c01 	add.w	ip, r3, #1
 800d09e:	ebac 0c02 	sub.w	ip, ip, r2
 800d0a2:	f240 52f9 	movw	r2, #1529	; 0x5f9
 800d0a6:	4596      	cmp	lr, r2
 800d0a8:	bf94      	ite	ls
 800d0aa:	2202      	movls	r2, #2
 800d0ac:	f06f 0209 	mvnhi.w	r2, #9
 800d0b0:	4410      	add	r0, r2
 800d0b2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800d0b6:	fb02 1505 	mla	r5, r2, r5, r1
 800d0ba:	2801      	cmp	r0, #1
 800d0bc:	bf98      	it	ls
 800d0be:	3501      	addls	r5, #1
 800d0c0:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 800d0c4:	d30d      	bcc.n	800d0e2 <gmtime_r+0x126>
 800d0c6:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800d0ca:	61e3      	str	r3, [r4, #28]
 800d0cc:	2300      	movs	r3, #0
 800d0ce:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 800d0d2:	e9c4 0504 	strd	r0, r5, [r4, #16]
 800d0d6:	f8c4 c00c 	str.w	ip, [r4, #12]
 800d0da:	4620      	mov	r0, r4
 800d0dc:	6223      	str	r3, [r4, #32]
 800d0de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d0e2:	078a      	lsls	r2, r1, #30
 800d0e4:	d102      	bne.n	800d0ec <gmtime_r+0x130>
 800d0e6:	fb07 1616 	mls	r6, r7, r6, r1
 800d0ea:	b95e      	cbnz	r6, 800d104 <gmtime_r+0x148>
 800d0ec:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800d0f0:	fbb1 f6f2 	udiv	r6, r1, r2
 800d0f4:	fb02 1216 	mls	r2, r2, r6, r1
 800d0f8:	fab2 f282 	clz	r2, r2
 800d0fc:	0952      	lsrs	r2, r2, #5
 800d0fe:	333b      	adds	r3, #59	; 0x3b
 800d100:	4413      	add	r3, r2
 800d102:	e7e2      	b.n	800d0ca <gmtime_r+0x10e>
 800d104:	2201      	movs	r2, #1
 800d106:	e7fa      	b.n	800d0fe <gmtime_r+0x142>
 800d108:	00015180 	.word	0x00015180
 800d10c:	00023ab1 	.word	0x00023ab1
 800d110:	fffdc54f 	.word	0xfffdc54f
 800d114:	00023ab0 	.word	0x00023ab0

0800d118 <__retarget_lock_init_recursive>:
 800d118:	4770      	bx	lr

0800d11a <__retarget_lock_acquire>:
 800d11a:	4770      	bx	lr

0800d11c <__retarget_lock_acquire_recursive>:
 800d11c:	4770      	bx	lr

0800d11e <__retarget_lock_release>:
 800d11e:	4770      	bx	lr

0800d120 <__retarget_lock_release_recursive>:
 800d120:	4770      	bx	lr
	...

0800d124 <__malloc_lock>:
 800d124:	4801      	ldr	r0, [pc, #4]	; (800d12c <__malloc_lock+0x8>)
 800d126:	f7ff bff9 	b.w	800d11c <__retarget_lock_acquire_recursive>
 800d12a:	bf00      	nop
 800d12c:	20002c31 	.word	0x20002c31

0800d130 <__malloc_unlock>:
 800d130:	4801      	ldr	r0, [pc, #4]	; (800d138 <__malloc_unlock+0x8>)
 800d132:	f7ff bff5 	b.w	800d120 <__retarget_lock_release_recursive>
 800d136:	bf00      	nop
 800d138:	20002c31 	.word	0x20002c31

0800d13c <__ssputs_r>:
 800d13c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d140:	688e      	ldr	r6, [r1, #8]
 800d142:	4682      	mov	sl, r0
 800d144:	429e      	cmp	r6, r3
 800d146:	460c      	mov	r4, r1
 800d148:	4690      	mov	r8, r2
 800d14a:	461f      	mov	r7, r3
 800d14c:	d838      	bhi.n	800d1c0 <__ssputs_r+0x84>
 800d14e:	898a      	ldrh	r2, [r1, #12]
 800d150:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d154:	d032      	beq.n	800d1bc <__ssputs_r+0x80>
 800d156:	6825      	ldr	r5, [r4, #0]
 800d158:	6909      	ldr	r1, [r1, #16]
 800d15a:	3301      	adds	r3, #1
 800d15c:	eba5 0901 	sub.w	r9, r5, r1
 800d160:	6965      	ldr	r5, [r4, #20]
 800d162:	444b      	add	r3, r9
 800d164:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d168:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d16c:	106d      	asrs	r5, r5, #1
 800d16e:	429d      	cmp	r5, r3
 800d170:	bf38      	it	cc
 800d172:	461d      	movcc	r5, r3
 800d174:	0553      	lsls	r3, r2, #21
 800d176:	d531      	bpl.n	800d1dc <__ssputs_r+0xa0>
 800d178:	4629      	mov	r1, r5
 800d17a:	f7ff facd 	bl	800c718 <_malloc_r>
 800d17e:	4606      	mov	r6, r0
 800d180:	b950      	cbnz	r0, 800d198 <__ssputs_r+0x5c>
 800d182:	230c      	movs	r3, #12
 800d184:	f04f 30ff 	mov.w	r0, #4294967295
 800d188:	f8ca 3000 	str.w	r3, [sl]
 800d18c:	89a3      	ldrh	r3, [r4, #12]
 800d18e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d192:	81a3      	strh	r3, [r4, #12]
 800d194:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d198:	464a      	mov	r2, r9
 800d19a:	6921      	ldr	r1, [r4, #16]
 800d19c:	f7fe ffcc 	bl	800c138 <memcpy>
 800d1a0:	89a3      	ldrh	r3, [r4, #12]
 800d1a2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d1a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d1aa:	81a3      	strh	r3, [r4, #12]
 800d1ac:	6126      	str	r6, [r4, #16]
 800d1ae:	444e      	add	r6, r9
 800d1b0:	6026      	str	r6, [r4, #0]
 800d1b2:	463e      	mov	r6, r7
 800d1b4:	6165      	str	r5, [r4, #20]
 800d1b6:	eba5 0509 	sub.w	r5, r5, r9
 800d1ba:	60a5      	str	r5, [r4, #8]
 800d1bc:	42be      	cmp	r6, r7
 800d1be:	d900      	bls.n	800d1c2 <__ssputs_r+0x86>
 800d1c0:	463e      	mov	r6, r7
 800d1c2:	4632      	mov	r2, r6
 800d1c4:	4641      	mov	r1, r8
 800d1c6:	6820      	ldr	r0, [r4, #0]
 800d1c8:	f001 f83c 	bl	800e244 <memmove>
 800d1cc:	68a3      	ldr	r3, [r4, #8]
 800d1ce:	2000      	movs	r0, #0
 800d1d0:	1b9b      	subs	r3, r3, r6
 800d1d2:	60a3      	str	r3, [r4, #8]
 800d1d4:	6823      	ldr	r3, [r4, #0]
 800d1d6:	4433      	add	r3, r6
 800d1d8:	6023      	str	r3, [r4, #0]
 800d1da:	e7db      	b.n	800d194 <__ssputs_r+0x58>
 800d1dc:	462a      	mov	r2, r5
 800d1de:	f001 f84b 	bl	800e278 <_realloc_r>
 800d1e2:	4606      	mov	r6, r0
 800d1e4:	2800      	cmp	r0, #0
 800d1e6:	d1e1      	bne.n	800d1ac <__ssputs_r+0x70>
 800d1e8:	4650      	mov	r0, sl
 800d1ea:	6921      	ldr	r1, [r4, #16]
 800d1ec:	f7ff fa2c 	bl	800c648 <_free_r>
 800d1f0:	e7c7      	b.n	800d182 <__ssputs_r+0x46>
	...

0800d1f4 <_svfiprintf_r>:
 800d1f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1f8:	4698      	mov	r8, r3
 800d1fa:	898b      	ldrh	r3, [r1, #12]
 800d1fc:	4607      	mov	r7, r0
 800d1fe:	061b      	lsls	r3, r3, #24
 800d200:	460d      	mov	r5, r1
 800d202:	4614      	mov	r4, r2
 800d204:	b09d      	sub	sp, #116	; 0x74
 800d206:	d50e      	bpl.n	800d226 <_svfiprintf_r+0x32>
 800d208:	690b      	ldr	r3, [r1, #16]
 800d20a:	b963      	cbnz	r3, 800d226 <_svfiprintf_r+0x32>
 800d20c:	2140      	movs	r1, #64	; 0x40
 800d20e:	f7ff fa83 	bl	800c718 <_malloc_r>
 800d212:	6028      	str	r0, [r5, #0]
 800d214:	6128      	str	r0, [r5, #16]
 800d216:	b920      	cbnz	r0, 800d222 <_svfiprintf_r+0x2e>
 800d218:	230c      	movs	r3, #12
 800d21a:	603b      	str	r3, [r7, #0]
 800d21c:	f04f 30ff 	mov.w	r0, #4294967295
 800d220:	e0d1      	b.n	800d3c6 <_svfiprintf_r+0x1d2>
 800d222:	2340      	movs	r3, #64	; 0x40
 800d224:	616b      	str	r3, [r5, #20]
 800d226:	2300      	movs	r3, #0
 800d228:	9309      	str	r3, [sp, #36]	; 0x24
 800d22a:	2320      	movs	r3, #32
 800d22c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d230:	2330      	movs	r3, #48	; 0x30
 800d232:	f04f 0901 	mov.w	r9, #1
 800d236:	f8cd 800c 	str.w	r8, [sp, #12]
 800d23a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800d3e0 <_svfiprintf_r+0x1ec>
 800d23e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d242:	4623      	mov	r3, r4
 800d244:	469a      	mov	sl, r3
 800d246:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d24a:	b10a      	cbz	r2, 800d250 <_svfiprintf_r+0x5c>
 800d24c:	2a25      	cmp	r2, #37	; 0x25
 800d24e:	d1f9      	bne.n	800d244 <_svfiprintf_r+0x50>
 800d250:	ebba 0b04 	subs.w	fp, sl, r4
 800d254:	d00b      	beq.n	800d26e <_svfiprintf_r+0x7a>
 800d256:	465b      	mov	r3, fp
 800d258:	4622      	mov	r2, r4
 800d25a:	4629      	mov	r1, r5
 800d25c:	4638      	mov	r0, r7
 800d25e:	f7ff ff6d 	bl	800d13c <__ssputs_r>
 800d262:	3001      	adds	r0, #1
 800d264:	f000 80aa 	beq.w	800d3bc <_svfiprintf_r+0x1c8>
 800d268:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d26a:	445a      	add	r2, fp
 800d26c:	9209      	str	r2, [sp, #36]	; 0x24
 800d26e:	f89a 3000 	ldrb.w	r3, [sl]
 800d272:	2b00      	cmp	r3, #0
 800d274:	f000 80a2 	beq.w	800d3bc <_svfiprintf_r+0x1c8>
 800d278:	2300      	movs	r3, #0
 800d27a:	f04f 32ff 	mov.w	r2, #4294967295
 800d27e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d282:	f10a 0a01 	add.w	sl, sl, #1
 800d286:	9304      	str	r3, [sp, #16]
 800d288:	9307      	str	r3, [sp, #28]
 800d28a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d28e:	931a      	str	r3, [sp, #104]	; 0x68
 800d290:	4654      	mov	r4, sl
 800d292:	2205      	movs	r2, #5
 800d294:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d298:	4851      	ldr	r0, [pc, #324]	; (800d3e0 <_svfiprintf_r+0x1ec>)
 800d29a:	f000 ffc5 	bl	800e228 <memchr>
 800d29e:	9a04      	ldr	r2, [sp, #16]
 800d2a0:	b9d8      	cbnz	r0, 800d2da <_svfiprintf_r+0xe6>
 800d2a2:	06d0      	lsls	r0, r2, #27
 800d2a4:	bf44      	itt	mi
 800d2a6:	2320      	movmi	r3, #32
 800d2a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d2ac:	0711      	lsls	r1, r2, #28
 800d2ae:	bf44      	itt	mi
 800d2b0:	232b      	movmi	r3, #43	; 0x2b
 800d2b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d2b6:	f89a 3000 	ldrb.w	r3, [sl]
 800d2ba:	2b2a      	cmp	r3, #42	; 0x2a
 800d2bc:	d015      	beq.n	800d2ea <_svfiprintf_r+0xf6>
 800d2be:	4654      	mov	r4, sl
 800d2c0:	2000      	movs	r0, #0
 800d2c2:	f04f 0c0a 	mov.w	ip, #10
 800d2c6:	9a07      	ldr	r2, [sp, #28]
 800d2c8:	4621      	mov	r1, r4
 800d2ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d2ce:	3b30      	subs	r3, #48	; 0x30
 800d2d0:	2b09      	cmp	r3, #9
 800d2d2:	d94e      	bls.n	800d372 <_svfiprintf_r+0x17e>
 800d2d4:	b1b0      	cbz	r0, 800d304 <_svfiprintf_r+0x110>
 800d2d6:	9207      	str	r2, [sp, #28]
 800d2d8:	e014      	b.n	800d304 <_svfiprintf_r+0x110>
 800d2da:	eba0 0308 	sub.w	r3, r0, r8
 800d2de:	fa09 f303 	lsl.w	r3, r9, r3
 800d2e2:	4313      	orrs	r3, r2
 800d2e4:	46a2      	mov	sl, r4
 800d2e6:	9304      	str	r3, [sp, #16]
 800d2e8:	e7d2      	b.n	800d290 <_svfiprintf_r+0x9c>
 800d2ea:	9b03      	ldr	r3, [sp, #12]
 800d2ec:	1d19      	adds	r1, r3, #4
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	9103      	str	r1, [sp, #12]
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	bfbb      	ittet	lt
 800d2f6:	425b      	neglt	r3, r3
 800d2f8:	f042 0202 	orrlt.w	r2, r2, #2
 800d2fc:	9307      	strge	r3, [sp, #28]
 800d2fe:	9307      	strlt	r3, [sp, #28]
 800d300:	bfb8      	it	lt
 800d302:	9204      	strlt	r2, [sp, #16]
 800d304:	7823      	ldrb	r3, [r4, #0]
 800d306:	2b2e      	cmp	r3, #46	; 0x2e
 800d308:	d10c      	bne.n	800d324 <_svfiprintf_r+0x130>
 800d30a:	7863      	ldrb	r3, [r4, #1]
 800d30c:	2b2a      	cmp	r3, #42	; 0x2a
 800d30e:	d135      	bne.n	800d37c <_svfiprintf_r+0x188>
 800d310:	9b03      	ldr	r3, [sp, #12]
 800d312:	3402      	adds	r4, #2
 800d314:	1d1a      	adds	r2, r3, #4
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	9203      	str	r2, [sp, #12]
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	bfb8      	it	lt
 800d31e:	f04f 33ff 	movlt.w	r3, #4294967295
 800d322:	9305      	str	r3, [sp, #20]
 800d324:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800d3e4 <_svfiprintf_r+0x1f0>
 800d328:	2203      	movs	r2, #3
 800d32a:	4650      	mov	r0, sl
 800d32c:	7821      	ldrb	r1, [r4, #0]
 800d32e:	f000 ff7b 	bl	800e228 <memchr>
 800d332:	b140      	cbz	r0, 800d346 <_svfiprintf_r+0x152>
 800d334:	2340      	movs	r3, #64	; 0x40
 800d336:	eba0 000a 	sub.w	r0, r0, sl
 800d33a:	fa03 f000 	lsl.w	r0, r3, r0
 800d33e:	9b04      	ldr	r3, [sp, #16]
 800d340:	3401      	adds	r4, #1
 800d342:	4303      	orrs	r3, r0
 800d344:	9304      	str	r3, [sp, #16]
 800d346:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d34a:	2206      	movs	r2, #6
 800d34c:	4826      	ldr	r0, [pc, #152]	; (800d3e8 <_svfiprintf_r+0x1f4>)
 800d34e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d352:	f000 ff69 	bl	800e228 <memchr>
 800d356:	2800      	cmp	r0, #0
 800d358:	d038      	beq.n	800d3cc <_svfiprintf_r+0x1d8>
 800d35a:	4b24      	ldr	r3, [pc, #144]	; (800d3ec <_svfiprintf_r+0x1f8>)
 800d35c:	bb1b      	cbnz	r3, 800d3a6 <_svfiprintf_r+0x1b2>
 800d35e:	9b03      	ldr	r3, [sp, #12]
 800d360:	3307      	adds	r3, #7
 800d362:	f023 0307 	bic.w	r3, r3, #7
 800d366:	3308      	adds	r3, #8
 800d368:	9303      	str	r3, [sp, #12]
 800d36a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d36c:	4433      	add	r3, r6
 800d36e:	9309      	str	r3, [sp, #36]	; 0x24
 800d370:	e767      	b.n	800d242 <_svfiprintf_r+0x4e>
 800d372:	460c      	mov	r4, r1
 800d374:	2001      	movs	r0, #1
 800d376:	fb0c 3202 	mla	r2, ip, r2, r3
 800d37a:	e7a5      	b.n	800d2c8 <_svfiprintf_r+0xd4>
 800d37c:	2300      	movs	r3, #0
 800d37e:	f04f 0c0a 	mov.w	ip, #10
 800d382:	4619      	mov	r1, r3
 800d384:	3401      	adds	r4, #1
 800d386:	9305      	str	r3, [sp, #20]
 800d388:	4620      	mov	r0, r4
 800d38a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d38e:	3a30      	subs	r2, #48	; 0x30
 800d390:	2a09      	cmp	r2, #9
 800d392:	d903      	bls.n	800d39c <_svfiprintf_r+0x1a8>
 800d394:	2b00      	cmp	r3, #0
 800d396:	d0c5      	beq.n	800d324 <_svfiprintf_r+0x130>
 800d398:	9105      	str	r1, [sp, #20]
 800d39a:	e7c3      	b.n	800d324 <_svfiprintf_r+0x130>
 800d39c:	4604      	mov	r4, r0
 800d39e:	2301      	movs	r3, #1
 800d3a0:	fb0c 2101 	mla	r1, ip, r1, r2
 800d3a4:	e7f0      	b.n	800d388 <_svfiprintf_r+0x194>
 800d3a6:	ab03      	add	r3, sp, #12
 800d3a8:	9300      	str	r3, [sp, #0]
 800d3aa:	462a      	mov	r2, r5
 800d3ac:	4638      	mov	r0, r7
 800d3ae:	4b10      	ldr	r3, [pc, #64]	; (800d3f0 <_svfiprintf_r+0x1fc>)
 800d3b0:	a904      	add	r1, sp, #16
 800d3b2:	f3af 8000 	nop.w
 800d3b6:	1c42      	adds	r2, r0, #1
 800d3b8:	4606      	mov	r6, r0
 800d3ba:	d1d6      	bne.n	800d36a <_svfiprintf_r+0x176>
 800d3bc:	89ab      	ldrh	r3, [r5, #12]
 800d3be:	065b      	lsls	r3, r3, #25
 800d3c0:	f53f af2c 	bmi.w	800d21c <_svfiprintf_r+0x28>
 800d3c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d3c6:	b01d      	add	sp, #116	; 0x74
 800d3c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3cc:	ab03      	add	r3, sp, #12
 800d3ce:	9300      	str	r3, [sp, #0]
 800d3d0:	462a      	mov	r2, r5
 800d3d2:	4638      	mov	r0, r7
 800d3d4:	4b06      	ldr	r3, [pc, #24]	; (800d3f0 <_svfiprintf_r+0x1fc>)
 800d3d6:	a904      	add	r1, sp, #16
 800d3d8:	f000 f9d4 	bl	800d784 <_printf_i>
 800d3dc:	e7eb      	b.n	800d3b6 <_svfiprintf_r+0x1c2>
 800d3de:	bf00      	nop
 800d3e0:	0800f726 	.word	0x0800f726
 800d3e4:	0800f72c 	.word	0x0800f72c
 800d3e8:	0800f730 	.word	0x0800f730
 800d3ec:	00000000 	.word	0x00000000
 800d3f0:	0800d13d 	.word	0x0800d13d

0800d3f4 <__sfputc_r>:
 800d3f4:	6893      	ldr	r3, [r2, #8]
 800d3f6:	b410      	push	{r4}
 800d3f8:	3b01      	subs	r3, #1
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	6093      	str	r3, [r2, #8]
 800d3fe:	da07      	bge.n	800d410 <__sfputc_r+0x1c>
 800d400:	6994      	ldr	r4, [r2, #24]
 800d402:	42a3      	cmp	r3, r4
 800d404:	db01      	blt.n	800d40a <__sfputc_r+0x16>
 800d406:	290a      	cmp	r1, #10
 800d408:	d102      	bne.n	800d410 <__sfputc_r+0x1c>
 800d40a:	bc10      	pop	{r4}
 800d40c:	f000 bbea 	b.w	800dbe4 <__swbuf_r>
 800d410:	6813      	ldr	r3, [r2, #0]
 800d412:	1c58      	adds	r0, r3, #1
 800d414:	6010      	str	r0, [r2, #0]
 800d416:	7019      	strb	r1, [r3, #0]
 800d418:	4608      	mov	r0, r1
 800d41a:	bc10      	pop	{r4}
 800d41c:	4770      	bx	lr

0800d41e <__sfputs_r>:
 800d41e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d420:	4606      	mov	r6, r0
 800d422:	460f      	mov	r7, r1
 800d424:	4614      	mov	r4, r2
 800d426:	18d5      	adds	r5, r2, r3
 800d428:	42ac      	cmp	r4, r5
 800d42a:	d101      	bne.n	800d430 <__sfputs_r+0x12>
 800d42c:	2000      	movs	r0, #0
 800d42e:	e007      	b.n	800d440 <__sfputs_r+0x22>
 800d430:	463a      	mov	r2, r7
 800d432:	4630      	mov	r0, r6
 800d434:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d438:	f7ff ffdc 	bl	800d3f4 <__sfputc_r>
 800d43c:	1c43      	adds	r3, r0, #1
 800d43e:	d1f3      	bne.n	800d428 <__sfputs_r+0xa>
 800d440:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d444 <_vfiprintf_r>:
 800d444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d448:	460d      	mov	r5, r1
 800d44a:	4614      	mov	r4, r2
 800d44c:	4698      	mov	r8, r3
 800d44e:	4606      	mov	r6, r0
 800d450:	b09d      	sub	sp, #116	; 0x74
 800d452:	b118      	cbz	r0, 800d45c <_vfiprintf_r+0x18>
 800d454:	6983      	ldr	r3, [r0, #24]
 800d456:	b90b      	cbnz	r3, 800d45c <_vfiprintf_r+0x18>
 800d458:	f000 fdd0 	bl	800dffc <__sinit>
 800d45c:	4b89      	ldr	r3, [pc, #548]	; (800d684 <_vfiprintf_r+0x240>)
 800d45e:	429d      	cmp	r5, r3
 800d460:	d11b      	bne.n	800d49a <_vfiprintf_r+0x56>
 800d462:	6875      	ldr	r5, [r6, #4]
 800d464:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d466:	07d9      	lsls	r1, r3, #31
 800d468:	d405      	bmi.n	800d476 <_vfiprintf_r+0x32>
 800d46a:	89ab      	ldrh	r3, [r5, #12]
 800d46c:	059a      	lsls	r2, r3, #22
 800d46e:	d402      	bmi.n	800d476 <_vfiprintf_r+0x32>
 800d470:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d472:	f7ff fe53 	bl	800d11c <__retarget_lock_acquire_recursive>
 800d476:	89ab      	ldrh	r3, [r5, #12]
 800d478:	071b      	lsls	r3, r3, #28
 800d47a:	d501      	bpl.n	800d480 <_vfiprintf_r+0x3c>
 800d47c:	692b      	ldr	r3, [r5, #16]
 800d47e:	b9eb      	cbnz	r3, 800d4bc <_vfiprintf_r+0x78>
 800d480:	4629      	mov	r1, r5
 800d482:	4630      	mov	r0, r6
 800d484:	f000 fc12 	bl	800dcac <__swsetup_r>
 800d488:	b1c0      	cbz	r0, 800d4bc <_vfiprintf_r+0x78>
 800d48a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d48c:	07dc      	lsls	r4, r3, #31
 800d48e:	d50e      	bpl.n	800d4ae <_vfiprintf_r+0x6a>
 800d490:	f04f 30ff 	mov.w	r0, #4294967295
 800d494:	b01d      	add	sp, #116	; 0x74
 800d496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d49a:	4b7b      	ldr	r3, [pc, #492]	; (800d688 <_vfiprintf_r+0x244>)
 800d49c:	429d      	cmp	r5, r3
 800d49e:	d101      	bne.n	800d4a4 <_vfiprintf_r+0x60>
 800d4a0:	68b5      	ldr	r5, [r6, #8]
 800d4a2:	e7df      	b.n	800d464 <_vfiprintf_r+0x20>
 800d4a4:	4b79      	ldr	r3, [pc, #484]	; (800d68c <_vfiprintf_r+0x248>)
 800d4a6:	429d      	cmp	r5, r3
 800d4a8:	bf08      	it	eq
 800d4aa:	68f5      	ldreq	r5, [r6, #12]
 800d4ac:	e7da      	b.n	800d464 <_vfiprintf_r+0x20>
 800d4ae:	89ab      	ldrh	r3, [r5, #12]
 800d4b0:	0598      	lsls	r0, r3, #22
 800d4b2:	d4ed      	bmi.n	800d490 <_vfiprintf_r+0x4c>
 800d4b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d4b6:	f7ff fe33 	bl	800d120 <__retarget_lock_release_recursive>
 800d4ba:	e7e9      	b.n	800d490 <_vfiprintf_r+0x4c>
 800d4bc:	2300      	movs	r3, #0
 800d4be:	9309      	str	r3, [sp, #36]	; 0x24
 800d4c0:	2320      	movs	r3, #32
 800d4c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d4c6:	2330      	movs	r3, #48	; 0x30
 800d4c8:	f04f 0901 	mov.w	r9, #1
 800d4cc:	f8cd 800c 	str.w	r8, [sp, #12]
 800d4d0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800d690 <_vfiprintf_r+0x24c>
 800d4d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d4d8:	4623      	mov	r3, r4
 800d4da:	469a      	mov	sl, r3
 800d4dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d4e0:	b10a      	cbz	r2, 800d4e6 <_vfiprintf_r+0xa2>
 800d4e2:	2a25      	cmp	r2, #37	; 0x25
 800d4e4:	d1f9      	bne.n	800d4da <_vfiprintf_r+0x96>
 800d4e6:	ebba 0b04 	subs.w	fp, sl, r4
 800d4ea:	d00b      	beq.n	800d504 <_vfiprintf_r+0xc0>
 800d4ec:	465b      	mov	r3, fp
 800d4ee:	4622      	mov	r2, r4
 800d4f0:	4629      	mov	r1, r5
 800d4f2:	4630      	mov	r0, r6
 800d4f4:	f7ff ff93 	bl	800d41e <__sfputs_r>
 800d4f8:	3001      	adds	r0, #1
 800d4fa:	f000 80aa 	beq.w	800d652 <_vfiprintf_r+0x20e>
 800d4fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d500:	445a      	add	r2, fp
 800d502:	9209      	str	r2, [sp, #36]	; 0x24
 800d504:	f89a 3000 	ldrb.w	r3, [sl]
 800d508:	2b00      	cmp	r3, #0
 800d50a:	f000 80a2 	beq.w	800d652 <_vfiprintf_r+0x20e>
 800d50e:	2300      	movs	r3, #0
 800d510:	f04f 32ff 	mov.w	r2, #4294967295
 800d514:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d518:	f10a 0a01 	add.w	sl, sl, #1
 800d51c:	9304      	str	r3, [sp, #16]
 800d51e:	9307      	str	r3, [sp, #28]
 800d520:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d524:	931a      	str	r3, [sp, #104]	; 0x68
 800d526:	4654      	mov	r4, sl
 800d528:	2205      	movs	r2, #5
 800d52a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d52e:	4858      	ldr	r0, [pc, #352]	; (800d690 <_vfiprintf_r+0x24c>)
 800d530:	f000 fe7a 	bl	800e228 <memchr>
 800d534:	9a04      	ldr	r2, [sp, #16]
 800d536:	b9d8      	cbnz	r0, 800d570 <_vfiprintf_r+0x12c>
 800d538:	06d1      	lsls	r1, r2, #27
 800d53a:	bf44      	itt	mi
 800d53c:	2320      	movmi	r3, #32
 800d53e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d542:	0713      	lsls	r3, r2, #28
 800d544:	bf44      	itt	mi
 800d546:	232b      	movmi	r3, #43	; 0x2b
 800d548:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d54c:	f89a 3000 	ldrb.w	r3, [sl]
 800d550:	2b2a      	cmp	r3, #42	; 0x2a
 800d552:	d015      	beq.n	800d580 <_vfiprintf_r+0x13c>
 800d554:	4654      	mov	r4, sl
 800d556:	2000      	movs	r0, #0
 800d558:	f04f 0c0a 	mov.w	ip, #10
 800d55c:	9a07      	ldr	r2, [sp, #28]
 800d55e:	4621      	mov	r1, r4
 800d560:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d564:	3b30      	subs	r3, #48	; 0x30
 800d566:	2b09      	cmp	r3, #9
 800d568:	d94e      	bls.n	800d608 <_vfiprintf_r+0x1c4>
 800d56a:	b1b0      	cbz	r0, 800d59a <_vfiprintf_r+0x156>
 800d56c:	9207      	str	r2, [sp, #28]
 800d56e:	e014      	b.n	800d59a <_vfiprintf_r+0x156>
 800d570:	eba0 0308 	sub.w	r3, r0, r8
 800d574:	fa09 f303 	lsl.w	r3, r9, r3
 800d578:	4313      	orrs	r3, r2
 800d57a:	46a2      	mov	sl, r4
 800d57c:	9304      	str	r3, [sp, #16]
 800d57e:	e7d2      	b.n	800d526 <_vfiprintf_r+0xe2>
 800d580:	9b03      	ldr	r3, [sp, #12]
 800d582:	1d19      	adds	r1, r3, #4
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	9103      	str	r1, [sp, #12]
 800d588:	2b00      	cmp	r3, #0
 800d58a:	bfbb      	ittet	lt
 800d58c:	425b      	neglt	r3, r3
 800d58e:	f042 0202 	orrlt.w	r2, r2, #2
 800d592:	9307      	strge	r3, [sp, #28]
 800d594:	9307      	strlt	r3, [sp, #28]
 800d596:	bfb8      	it	lt
 800d598:	9204      	strlt	r2, [sp, #16]
 800d59a:	7823      	ldrb	r3, [r4, #0]
 800d59c:	2b2e      	cmp	r3, #46	; 0x2e
 800d59e:	d10c      	bne.n	800d5ba <_vfiprintf_r+0x176>
 800d5a0:	7863      	ldrb	r3, [r4, #1]
 800d5a2:	2b2a      	cmp	r3, #42	; 0x2a
 800d5a4:	d135      	bne.n	800d612 <_vfiprintf_r+0x1ce>
 800d5a6:	9b03      	ldr	r3, [sp, #12]
 800d5a8:	3402      	adds	r4, #2
 800d5aa:	1d1a      	adds	r2, r3, #4
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	9203      	str	r2, [sp, #12]
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	bfb8      	it	lt
 800d5b4:	f04f 33ff 	movlt.w	r3, #4294967295
 800d5b8:	9305      	str	r3, [sp, #20]
 800d5ba:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800d694 <_vfiprintf_r+0x250>
 800d5be:	2203      	movs	r2, #3
 800d5c0:	4650      	mov	r0, sl
 800d5c2:	7821      	ldrb	r1, [r4, #0]
 800d5c4:	f000 fe30 	bl	800e228 <memchr>
 800d5c8:	b140      	cbz	r0, 800d5dc <_vfiprintf_r+0x198>
 800d5ca:	2340      	movs	r3, #64	; 0x40
 800d5cc:	eba0 000a 	sub.w	r0, r0, sl
 800d5d0:	fa03 f000 	lsl.w	r0, r3, r0
 800d5d4:	9b04      	ldr	r3, [sp, #16]
 800d5d6:	3401      	adds	r4, #1
 800d5d8:	4303      	orrs	r3, r0
 800d5da:	9304      	str	r3, [sp, #16]
 800d5dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d5e0:	2206      	movs	r2, #6
 800d5e2:	482d      	ldr	r0, [pc, #180]	; (800d698 <_vfiprintf_r+0x254>)
 800d5e4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d5e8:	f000 fe1e 	bl	800e228 <memchr>
 800d5ec:	2800      	cmp	r0, #0
 800d5ee:	d03f      	beq.n	800d670 <_vfiprintf_r+0x22c>
 800d5f0:	4b2a      	ldr	r3, [pc, #168]	; (800d69c <_vfiprintf_r+0x258>)
 800d5f2:	bb1b      	cbnz	r3, 800d63c <_vfiprintf_r+0x1f8>
 800d5f4:	9b03      	ldr	r3, [sp, #12]
 800d5f6:	3307      	adds	r3, #7
 800d5f8:	f023 0307 	bic.w	r3, r3, #7
 800d5fc:	3308      	adds	r3, #8
 800d5fe:	9303      	str	r3, [sp, #12]
 800d600:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d602:	443b      	add	r3, r7
 800d604:	9309      	str	r3, [sp, #36]	; 0x24
 800d606:	e767      	b.n	800d4d8 <_vfiprintf_r+0x94>
 800d608:	460c      	mov	r4, r1
 800d60a:	2001      	movs	r0, #1
 800d60c:	fb0c 3202 	mla	r2, ip, r2, r3
 800d610:	e7a5      	b.n	800d55e <_vfiprintf_r+0x11a>
 800d612:	2300      	movs	r3, #0
 800d614:	f04f 0c0a 	mov.w	ip, #10
 800d618:	4619      	mov	r1, r3
 800d61a:	3401      	adds	r4, #1
 800d61c:	9305      	str	r3, [sp, #20]
 800d61e:	4620      	mov	r0, r4
 800d620:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d624:	3a30      	subs	r2, #48	; 0x30
 800d626:	2a09      	cmp	r2, #9
 800d628:	d903      	bls.n	800d632 <_vfiprintf_r+0x1ee>
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d0c5      	beq.n	800d5ba <_vfiprintf_r+0x176>
 800d62e:	9105      	str	r1, [sp, #20]
 800d630:	e7c3      	b.n	800d5ba <_vfiprintf_r+0x176>
 800d632:	4604      	mov	r4, r0
 800d634:	2301      	movs	r3, #1
 800d636:	fb0c 2101 	mla	r1, ip, r1, r2
 800d63a:	e7f0      	b.n	800d61e <_vfiprintf_r+0x1da>
 800d63c:	ab03      	add	r3, sp, #12
 800d63e:	9300      	str	r3, [sp, #0]
 800d640:	462a      	mov	r2, r5
 800d642:	4630      	mov	r0, r6
 800d644:	4b16      	ldr	r3, [pc, #88]	; (800d6a0 <_vfiprintf_r+0x25c>)
 800d646:	a904      	add	r1, sp, #16
 800d648:	f3af 8000 	nop.w
 800d64c:	4607      	mov	r7, r0
 800d64e:	1c78      	adds	r0, r7, #1
 800d650:	d1d6      	bne.n	800d600 <_vfiprintf_r+0x1bc>
 800d652:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d654:	07d9      	lsls	r1, r3, #31
 800d656:	d405      	bmi.n	800d664 <_vfiprintf_r+0x220>
 800d658:	89ab      	ldrh	r3, [r5, #12]
 800d65a:	059a      	lsls	r2, r3, #22
 800d65c:	d402      	bmi.n	800d664 <_vfiprintf_r+0x220>
 800d65e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d660:	f7ff fd5e 	bl	800d120 <__retarget_lock_release_recursive>
 800d664:	89ab      	ldrh	r3, [r5, #12]
 800d666:	065b      	lsls	r3, r3, #25
 800d668:	f53f af12 	bmi.w	800d490 <_vfiprintf_r+0x4c>
 800d66c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d66e:	e711      	b.n	800d494 <_vfiprintf_r+0x50>
 800d670:	ab03      	add	r3, sp, #12
 800d672:	9300      	str	r3, [sp, #0]
 800d674:	462a      	mov	r2, r5
 800d676:	4630      	mov	r0, r6
 800d678:	4b09      	ldr	r3, [pc, #36]	; (800d6a0 <_vfiprintf_r+0x25c>)
 800d67a:	a904      	add	r1, sp, #16
 800d67c:	f000 f882 	bl	800d784 <_printf_i>
 800d680:	e7e4      	b.n	800d64c <_vfiprintf_r+0x208>
 800d682:	bf00      	nop
 800d684:	0800f77c 	.word	0x0800f77c
 800d688:	0800f79c 	.word	0x0800f79c
 800d68c:	0800f75c 	.word	0x0800f75c
 800d690:	0800f726 	.word	0x0800f726
 800d694:	0800f72c 	.word	0x0800f72c
 800d698:	0800f730 	.word	0x0800f730
 800d69c:	00000000 	.word	0x00000000
 800d6a0:	0800d41f 	.word	0x0800d41f

0800d6a4 <_printf_common>:
 800d6a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d6a8:	4616      	mov	r6, r2
 800d6aa:	4699      	mov	r9, r3
 800d6ac:	688a      	ldr	r2, [r1, #8]
 800d6ae:	690b      	ldr	r3, [r1, #16]
 800d6b0:	4607      	mov	r7, r0
 800d6b2:	4293      	cmp	r3, r2
 800d6b4:	bfb8      	it	lt
 800d6b6:	4613      	movlt	r3, r2
 800d6b8:	6033      	str	r3, [r6, #0]
 800d6ba:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d6be:	460c      	mov	r4, r1
 800d6c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d6c4:	b10a      	cbz	r2, 800d6ca <_printf_common+0x26>
 800d6c6:	3301      	adds	r3, #1
 800d6c8:	6033      	str	r3, [r6, #0]
 800d6ca:	6823      	ldr	r3, [r4, #0]
 800d6cc:	0699      	lsls	r1, r3, #26
 800d6ce:	bf42      	ittt	mi
 800d6d0:	6833      	ldrmi	r3, [r6, #0]
 800d6d2:	3302      	addmi	r3, #2
 800d6d4:	6033      	strmi	r3, [r6, #0]
 800d6d6:	6825      	ldr	r5, [r4, #0]
 800d6d8:	f015 0506 	ands.w	r5, r5, #6
 800d6dc:	d106      	bne.n	800d6ec <_printf_common+0x48>
 800d6de:	f104 0a19 	add.w	sl, r4, #25
 800d6e2:	68e3      	ldr	r3, [r4, #12]
 800d6e4:	6832      	ldr	r2, [r6, #0]
 800d6e6:	1a9b      	subs	r3, r3, r2
 800d6e8:	42ab      	cmp	r3, r5
 800d6ea:	dc28      	bgt.n	800d73e <_printf_common+0x9a>
 800d6ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d6f0:	1e13      	subs	r3, r2, #0
 800d6f2:	6822      	ldr	r2, [r4, #0]
 800d6f4:	bf18      	it	ne
 800d6f6:	2301      	movne	r3, #1
 800d6f8:	0692      	lsls	r2, r2, #26
 800d6fa:	d42d      	bmi.n	800d758 <_printf_common+0xb4>
 800d6fc:	4649      	mov	r1, r9
 800d6fe:	4638      	mov	r0, r7
 800d700:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d704:	47c0      	blx	r8
 800d706:	3001      	adds	r0, #1
 800d708:	d020      	beq.n	800d74c <_printf_common+0xa8>
 800d70a:	6823      	ldr	r3, [r4, #0]
 800d70c:	68e5      	ldr	r5, [r4, #12]
 800d70e:	f003 0306 	and.w	r3, r3, #6
 800d712:	2b04      	cmp	r3, #4
 800d714:	bf18      	it	ne
 800d716:	2500      	movne	r5, #0
 800d718:	6832      	ldr	r2, [r6, #0]
 800d71a:	f04f 0600 	mov.w	r6, #0
 800d71e:	68a3      	ldr	r3, [r4, #8]
 800d720:	bf08      	it	eq
 800d722:	1aad      	subeq	r5, r5, r2
 800d724:	6922      	ldr	r2, [r4, #16]
 800d726:	bf08      	it	eq
 800d728:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d72c:	4293      	cmp	r3, r2
 800d72e:	bfc4      	itt	gt
 800d730:	1a9b      	subgt	r3, r3, r2
 800d732:	18ed      	addgt	r5, r5, r3
 800d734:	341a      	adds	r4, #26
 800d736:	42b5      	cmp	r5, r6
 800d738:	d11a      	bne.n	800d770 <_printf_common+0xcc>
 800d73a:	2000      	movs	r0, #0
 800d73c:	e008      	b.n	800d750 <_printf_common+0xac>
 800d73e:	2301      	movs	r3, #1
 800d740:	4652      	mov	r2, sl
 800d742:	4649      	mov	r1, r9
 800d744:	4638      	mov	r0, r7
 800d746:	47c0      	blx	r8
 800d748:	3001      	adds	r0, #1
 800d74a:	d103      	bne.n	800d754 <_printf_common+0xb0>
 800d74c:	f04f 30ff 	mov.w	r0, #4294967295
 800d750:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d754:	3501      	adds	r5, #1
 800d756:	e7c4      	b.n	800d6e2 <_printf_common+0x3e>
 800d758:	2030      	movs	r0, #48	; 0x30
 800d75a:	18e1      	adds	r1, r4, r3
 800d75c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d760:	1c5a      	adds	r2, r3, #1
 800d762:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d766:	4422      	add	r2, r4
 800d768:	3302      	adds	r3, #2
 800d76a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d76e:	e7c5      	b.n	800d6fc <_printf_common+0x58>
 800d770:	2301      	movs	r3, #1
 800d772:	4622      	mov	r2, r4
 800d774:	4649      	mov	r1, r9
 800d776:	4638      	mov	r0, r7
 800d778:	47c0      	blx	r8
 800d77a:	3001      	adds	r0, #1
 800d77c:	d0e6      	beq.n	800d74c <_printf_common+0xa8>
 800d77e:	3601      	adds	r6, #1
 800d780:	e7d9      	b.n	800d736 <_printf_common+0x92>
	...

0800d784 <_printf_i>:
 800d784:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d788:	7e0f      	ldrb	r7, [r1, #24]
 800d78a:	4691      	mov	r9, r2
 800d78c:	2f78      	cmp	r7, #120	; 0x78
 800d78e:	4680      	mov	r8, r0
 800d790:	460c      	mov	r4, r1
 800d792:	469a      	mov	sl, r3
 800d794:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d796:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d79a:	d807      	bhi.n	800d7ac <_printf_i+0x28>
 800d79c:	2f62      	cmp	r7, #98	; 0x62
 800d79e:	d80a      	bhi.n	800d7b6 <_printf_i+0x32>
 800d7a0:	2f00      	cmp	r7, #0
 800d7a2:	f000 80d9 	beq.w	800d958 <_printf_i+0x1d4>
 800d7a6:	2f58      	cmp	r7, #88	; 0x58
 800d7a8:	f000 80a4 	beq.w	800d8f4 <_printf_i+0x170>
 800d7ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d7b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d7b4:	e03a      	b.n	800d82c <_printf_i+0xa8>
 800d7b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d7ba:	2b15      	cmp	r3, #21
 800d7bc:	d8f6      	bhi.n	800d7ac <_printf_i+0x28>
 800d7be:	a101      	add	r1, pc, #4	; (adr r1, 800d7c4 <_printf_i+0x40>)
 800d7c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d7c4:	0800d81d 	.word	0x0800d81d
 800d7c8:	0800d831 	.word	0x0800d831
 800d7cc:	0800d7ad 	.word	0x0800d7ad
 800d7d0:	0800d7ad 	.word	0x0800d7ad
 800d7d4:	0800d7ad 	.word	0x0800d7ad
 800d7d8:	0800d7ad 	.word	0x0800d7ad
 800d7dc:	0800d831 	.word	0x0800d831
 800d7e0:	0800d7ad 	.word	0x0800d7ad
 800d7e4:	0800d7ad 	.word	0x0800d7ad
 800d7e8:	0800d7ad 	.word	0x0800d7ad
 800d7ec:	0800d7ad 	.word	0x0800d7ad
 800d7f0:	0800d93f 	.word	0x0800d93f
 800d7f4:	0800d861 	.word	0x0800d861
 800d7f8:	0800d921 	.word	0x0800d921
 800d7fc:	0800d7ad 	.word	0x0800d7ad
 800d800:	0800d7ad 	.word	0x0800d7ad
 800d804:	0800d961 	.word	0x0800d961
 800d808:	0800d7ad 	.word	0x0800d7ad
 800d80c:	0800d861 	.word	0x0800d861
 800d810:	0800d7ad 	.word	0x0800d7ad
 800d814:	0800d7ad 	.word	0x0800d7ad
 800d818:	0800d929 	.word	0x0800d929
 800d81c:	682b      	ldr	r3, [r5, #0]
 800d81e:	1d1a      	adds	r2, r3, #4
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	602a      	str	r2, [r5, #0]
 800d824:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d828:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d82c:	2301      	movs	r3, #1
 800d82e:	e0a4      	b.n	800d97a <_printf_i+0x1f6>
 800d830:	6820      	ldr	r0, [r4, #0]
 800d832:	6829      	ldr	r1, [r5, #0]
 800d834:	0606      	lsls	r6, r0, #24
 800d836:	f101 0304 	add.w	r3, r1, #4
 800d83a:	d50a      	bpl.n	800d852 <_printf_i+0xce>
 800d83c:	680e      	ldr	r6, [r1, #0]
 800d83e:	602b      	str	r3, [r5, #0]
 800d840:	2e00      	cmp	r6, #0
 800d842:	da03      	bge.n	800d84c <_printf_i+0xc8>
 800d844:	232d      	movs	r3, #45	; 0x2d
 800d846:	4276      	negs	r6, r6
 800d848:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d84c:	230a      	movs	r3, #10
 800d84e:	485e      	ldr	r0, [pc, #376]	; (800d9c8 <_printf_i+0x244>)
 800d850:	e019      	b.n	800d886 <_printf_i+0x102>
 800d852:	680e      	ldr	r6, [r1, #0]
 800d854:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d858:	602b      	str	r3, [r5, #0]
 800d85a:	bf18      	it	ne
 800d85c:	b236      	sxthne	r6, r6
 800d85e:	e7ef      	b.n	800d840 <_printf_i+0xbc>
 800d860:	682b      	ldr	r3, [r5, #0]
 800d862:	6820      	ldr	r0, [r4, #0]
 800d864:	1d19      	adds	r1, r3, #4
 800d866:	6029      	str	r1, [r5, #0]
 800d868:	0601      	lsls	r1, r0, #24
 800d86a:	d501      	bpl.n	800d870 <_printf_i+0xec>
 800d86c:	681e      	ldr	r6, [r3, #0]
 800d86e:	e002      	b.n	800d876 <_printf_i+0xf2>
 800d870:	0646      	lsls	r6, r0, #25
 800d872:	d5fb      	bpl.n	800d86c <_printf_i+0xe8>
 800d874:	881e      	ldrh	r6, [r3, #0]
 800d876:	2f6f      	cmp	r7, #111	; 0x6f
 800d878:	bf0c      	ite	eq
 800d87a:	2308      	moveq	r3, #8
 800d87c:	230a      	movne	r3, #10
 800d87e:	4852      	ldr	r0, [pc, #328]	; (800d9c8 <_printf_i+0x244>)
 800d880:	2100      	movs	r1, #0
 800d882:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d886:	6865      	ldr	r5, [r4, #4]
 800d888:	2d00      	cmp	r5, #0
 800d88a:	bfa8      	it	ge
 800d88c:	6821      	ldrge	r1, [r4, #0]
 800d88e:	60a5      	str	r5, [r4, #8]
 800d890:	bfa4      	itt	ge
 800d892:	f021 0104 	bicge.w	r1, r1, #4
 800d896:	6021      	strge	r1, [r4, #0]
 800d898:	b90e      	cbnz	r6, 800d89e <_printf_i+0x11a>
 800d89a:	2d00      	cmp	r5, #0
 800d89c:	d04d      	beq.n	800d93a <_printf_i+0x1b6>
 800d89e:	4615      	mov	r5, r2
 800d8a0:	fbb6 f1f3 	udiv	r1, r6, r3
 800d8a4:	fb03 6711 	mls	r7, r3, r1, r6
 800d8a8:	5dc7      	ldrb	r7, [r0, r7]
 800d8aa:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d8ae:	4637      	mov	r7, r6
 800d8b0:	42bb      	cmp	r3, r7
 800d8b2:	460e      	mov	r6, r1
 800d8b4:	d9f4      	bls.n	800d8a0 <_printf_i+0x11c>
 800d8b6:	2b08      	cmp	r3, #8
 800d8b8:	d10b      	bne.n	800d8d2 <_printf_i+0x14e>
 800d8ba:	6823      	ldr	r3, [r4, #0]
 800d8bc:	07de      	lsls	r6, r3, #31
 800d8be:	d508      	bpl.n	800d8d2 <_printf_i+0x14e>
 800d8c0:	6923      	ldr	r3, [r4, #16]
 800d8c2:	6861      	ldr	r1, [r4, #4]
 800d8c4:	4299      	cmp	r1, r3
 800d8c6:	bfde      	ittt	le
 800d8c8:	2330      	movle	r3, #48	; 0x30
 800d8ca:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d8ce:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d8d2:	1b52      	subs	r2, r2, r5
 800d8d4:	6122      	str	r2, [r4, #16]
 800d8d6:	464b      	mov	r3, r9
 800d8d8:	4621      	mov	r1, r4
 800d8da:	4640      	mov	r0, r8
 800d8dc:	f8cd a000 	str.w	sl, [sp]
 800d8e0:	aa03      	add	r2, sp, #12
 800d8e2:	f7ff fedf 	bl	800d6a4 <_printf_common>
 800d8e6:	3001      	adds	r0, #1
 800d8e8:	d14c      	bne.n	800d984 <_printf_i+0x200>
 800d8ea:	f04f 30ff 	mov.w	r0, #4294967295
 800d8ee:	b004      	add	sp, #16
 800d8f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d8f4:	4834      	ldr	r0, [pc, #208]	; (800d9c8 <_printf_i+0x244>)
 800d8f6:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d8fa:	6829      	ldr	r1, [r5, #0]
 800d8fc:	6823      	ldr	r3, [r4, #0]
 800d8fe:	f851 6b04 	ldr.w	r6, [r1], #4
 800d902:	6029      	str	r1, [r5, #0]
 800d904:	061d      	lsls	r5, r3, #24
 800d906:	d514      	bpl.n	800d932 <_printf_i+0x1ae>
 800d908:	07df      	lsls	r7, r3, #31
 800d90a:	bf44      	itt	mi
 800d90c:	f043 0320 	orrmi.w	r3, r3, #32
 800d910:	6023      	strmi	r3, [r4, #0]
 800d912:	b91e      	cbnz	r6, 800d91c <_printf_i+0x198>
 800d914:	6823      	ldr	r3, [r4, #0]
 800d916:	f023 0320 	bic.w	r3, r3, #32
 800d91a:	6023      	str	r3, [r4, #0]
 800d91c:	2310      	movs	r3, #16
 800d91e:	e7af      	b.n	800d880 <_printf_i+0xfc>
 800d920:	6823      	ldr	r3, [r4, #0]
 800d922:	f043 0320 	orr.w	r3, r3, #32
 800d926:	6023      	str	r3, [r4, #0]
 800d928:	2378      	movs	r3, #120	; 0x78
 800d92a:	4828      	ldr	r0, [pc, #160]	; (800d9cc <_printf_i+0x248>)
 800d92c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d930:	e7e3      	b.n	800d8fa <_printf_i+0x176>
 800d932:	0659      	lsls	r1, r3, #25
 800d934:	bf48      	it	mi
 800d936:	b2b6      	uxthmi	r6, r6
 800d938:	e7e6      	b.n	800d908 <_printf_i+0x184>
 800d93a:	4615      	mov	r5, r2
 800d93c:	e7bb      	b.n	800d8b6 <_printf_i+0x132>
 800d93e:	682b      	ldr	r3, [r5, #0]
 800d940:	6826      	ldr	r6, [r4, #0]
 800d942:	1d18      	adds	r0, r3, #4
 800d944:	6961      	ldr	r1, [r4, #20]
 800d946:	6028      	str	r0, [r5, #0]
 800d948:	0635      	lsls	r5, r6, #24
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	d501      	bpl.n	800d952 <_printf_i+0x1ce>
 800d94e:	6019      	str	r1, [r3, #0]
 800d950:	e002      	b.n	800d958 <_printf_i+0x1d4>
 800d952:	0670      	lsls	r0, r6, #25
 800d954:	d5fb      	bpl.n	800d94e <_printf_i+0x1ca>
 800d956:	8019      	strh	r1, [r3, #0]
 800d958:	2300      	movs	r3, #0
 800d95a:	4615      	mov	r5, r2
 800d95c:	6123      	str	r3, [r4, #16]
 800d95e:	e7ba      	b.n	800d8d6 <_printf_i+0x152>
 800d960:	682b      	ldr	r3, [r5, #0]
 800d962:	2100      	movs	r1, #0
 800d964:	1d1a      	adds	r2, r3, #4
 800d966:	602a      	str	r2, [r5, #0]
 800d968:	681d      	ldr	r5, [r3, #0]
 800d96a:	6862      	ldr	r2, [r4, #4]
 800d96c:	4628      	mov	r0, r5
 800d96e:	f000 fc5b 	bl	800e228 <memchr>
 800d972:	b108      	cbz	r0, 800d978 <_printf_i+0x1f4>
 800d974:	1b40      	subs	r0, r0, r5
 800d976:	6060      	str	r0, [r4, #4]
 800d978:	6863      	ldr	r3, [r4, #4]
 800d97a:	6123      	str	r3, [r4, #16]
 800d97c:	2300      	movs	r3, #0
 800d97e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d982:	e7a8      	b.n	800d8d6 <_printf_i+0x152>
 800d984:	462a      	mov	r2, r5
 800d986:	4649      	mov	r1, r9
 800d988:	4640      	mov	r0, r8
 800d98a:	6923      	ldr	r3, [r4, #16]
 800d98c:	47d0      	blx	sl
 800d98e:	3001      	adds	r0, #1
 800d990:	d0ab      	beq.n	800d8ea <_printf_i+0x166>
 800d992:	6823      	ldr	r3, [r4, #0]
 800d994:	079b      	lsls	r3, r3, #30
 800d996:	d413      	bmi.n	800d9c0 <_printf_i+0x23c>
 800d998:	68e0      	ldr	r0, [r4, #12]
 800d99a:	9b03      	ldr	r3, [sp, #12]
 800d99c:	4298      	cmp	r0, r3
 800d99e:	bfb8      	it	lt
 800d9a0:	4618      	movlt	r0, r3
 800d9a2:	e7a4      	b.n	800d8ee <_printf_i+0x16a>
 800d9a4:	2301      	movs	r3, #1
 800d9a6:	4632      	mov	r2, r6
 800d9a8:	4649      	mov	r1, r9
 800d9aa:	4640      	mov	r0, r8
 800d9ac:	47d0      	blx	sl
 800d9ae:	3001      	adds	r0, #1
 800d9b0:	d09b      	beq.n	800d8ea <_printf_i+0x166>
 800d9b2:	3501      	adds	r5, #1
 800d9b4:	68e3      	ldr	r3, [r4, #12]
 800d9b6:	9903      	ldr	r1, [sp, #12]
 800d9b8:	1a5b      	subs	r3, r3, r1
 800d9ba:	42ab      	cmp	r3, r5
 800d9bc:	dcf2      	bgt.n	800d9a4 <_printf_i+0x220>
 800d9be:	e7eb      	b.n	800d998 <_printf_i+0x214>
 800d9c0:	2500      	movs	r5, #0
 800d9c2:	f104 0619 	add.w	r6, r4, #25
 800d9c6:	e7f5      	b.n	800d9b4 <_printf_i+0x230>
 800d9c8:	0800f737 	.word	0x0800f737
 800d9cc:	0800f748 	.word	0x0800f748

0800d9d0 <siscanf>:
 800d9d0:	b40e      	push	{r1, r2, r3}
 800d9d2:	f44f 7201 	mov.w	r2, #516	; 0x204
 800d9d6:	b530      	push	{r4, r5, lr}
 800d9d8:	b09c      	sub	sp, #112	; 0x70
 800d9da:	ac1f      	add	r4, sp, #124	; 0x7c
 800d9dc:	f854 5b04 	ldr.w	r5, [r4], #4
 800d9e0:	f8ad 2014 	strh.w	r2, [sp, #20]
 800d9e4:	9002      	str	r0, [sp, #8]
 800d9e6:	9006      	str	r0, [sp, #24]
 800d9e8:	f7f2 fbb0 	bl	800014c <strlen>
 800d9ec:	4b0b      	ldr	r3, [pc, #44]	; (800da1c <siscanf+0x4c>)
 800d9ee:	9003      	str	r0, [sp, #12]
 800d9f0:	930b      	str	r3, [sp, #44]	; 0x2c
 800d9f2:	2300      	movs	r3, #0
 800d9f4:	930f      	str	r3, [sp, #60]	; 0x3c
 800d9f6:	9314      	str	r3, [sp, #80]	; 0x50
 800d9f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d9fc:	9007      	str	r0, [sp, #28]
 800d9fe:	4808      	ldr	r0, [pc, #32]	; (800da20 <siscanf+0x50>)
 800da00:	f8ad 3016 	strh.w	r3, [sp, #22]
 800da04:	462a      	mov	r2, r5
 800da06:	4623      	mov	r3, r4
 800da08:	a902      	add	r1, sp, #8
 800da0a:	6800      	ldr	r0, [r0, #0]
 800da0c:	9401      	str	r4, [sp, #4]
 800da0e:	f000 fcbd 	bl	800e38c <__ssvfiscanf_r>
 800da12:	b01c      	add	sp, #112	; 0x70
 800da14:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800da18:	b003      	add	sp, #12
 800da1a:	4770      	bx	lr
 800da1c:	0800da47 	.word	0x0800da47
 800da20:	200004e0 	.word	0x200004e0

0800da24 <__sread>:
 800da24:	b510      	push	{r4, lr}
 800da26:	460c      	mov	r4, r1
 800da28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da2c:	f000 ff7a 	bl	800e924 <_read_r>
 800da30:	2800      	cmp	r0, #0
 800da32:	bfab      	itete	ge
 800da34:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800da36:	89a3      	ldrhlt	r3, [r4, #12]
 800da38:	181b      	addge	r3, r3, r0
 800da3a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800da3e:	bfac      	ite	ge
 800da40:	6563      	strge	r3, [r4, #84]	; 0x54
 800da42:	81a3      	strhlt	r3, [r4, #12]
 800da44:	bd10      	pop	{r4, pc}

0800da46 <__seofread>:
 800da46:	2000      	movs	r0, #0
 800da48:	4770      	bx	lr

0800da4a <__swrite>:
 800da4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da4e:	461f      	mov	r7, r3
 800da50:	898b      	ldrh	r3, [r1, #12]
 800da52:	4605      	mov	r5, r0
 800da54:	05db      	lsls	r3, r3, #23
 800da56:	460c      	mov	r4, r1
 800da58:	4616      	mov	r6, r2
 800da5a:	d505      	bpl.n	800da68 <__swrite+0x1e>
 800da5c:	2302      	movs	r3, #2
 800da5e:	2200      	movs	r2, #0
 800da60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da64:	f000 fb68 	bl	800e138 <_lseek_r>
 800da68:	89a3      	ldrh	r3, [r4, #12]
 800da6a:	4632      	mov	r2, r6
 800da6c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800da70:	81a3      	strh	r3, [r4, #12]
 800da72:	4628      	mov	r0, r5
 800da74:	463b      	mov	r3, r7
 800da76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800da7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800da7e:	f000 b903 	b.w	800dc88 <_write_r>

0800da82 <__sseek>:
 800da82:	b510      	push	{r4, lr}
 800da84:	460c      	mov	r4, r1
 800da86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da8a:	f000 fb55 	bl	800e138 <_lseek_r>
 800da8e:	1c43      	adds	r3, r0, #1
 800da90:	89a3      	ldrh	r3, [r4, #12]
 800da92:	bf15      	itete	ne
 800da94:	6560      	strne	r0, [r4, #84]	; 0x54
 800da96:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800da9a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800da9e:	81a3      	strheq	r3, [r4, #12]
 800daa0:	bf18      	it	ne
 800daa2:	81a3      	strhne	r3, [r4, #12]
 800daa4:	bd10      	pop	{r4, pc}

0800daa6 <__sclose>:
 800daa6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800daaa:	f000 b975 	b.w	800dd98 <_close_r>

0800daae <strcpy>:
 800daae:	4603      	mov	r3, r0
 800dab0:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dab4:	f803 2b01 	strb.w	r2, [r3], #1
 800dab8:	2a00      	cmp	r2, #0
 800daba:	d1f9      	bne.n	800dab0 <strcpy+0x2>
 800dabc:	4770      	bx	lr

0800dabe <strncmp>:
 800dabe:	4603      	mov	r3, r0
 800dac0:	b510      	push	{r4, lr}
 800dac2:	b172      	cbz	r2, 800dae2 <strncmp+0x24>
 800dac4:	3901      	subs	r1, #1
 800dac6:	1884      	adds	r4, r0, r2
 800dac8:	f813 0b01 	ldrb.w	r0, [r3], #1
 800dacc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800dad0:	4290      	cmp	r0, r2
 800dad2:	d101      	bne.n	800dad8 <strncmp+0x1a>
 800dad4:	42a3      	cmp	r3, r4
 800dad6:	d101      	bne.n	800dadc <strncmp+0x1e>
 800dad8:	1a80      	subs	r0, r0, r2
 800dada:	bd10      	pop	{r4, pc}
 800dadc:	2800      	cmp	r0, #0
 800dade:	d1f3      	bne.n	800dac8 <strncmp+0xa>
 800dae0:	e7fa      	b.n	800dad8 <strncmp+0x1a>
 800dae2:	4610      	mov	r0, r2
 800dae4:	e7f9      	b.n	800dada <strncmp+0x1c>
	...

0800dae8 <_strtoul_l.constprop.0>:
 800dae8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800daec:	4686      	mov	lr, r0
 800daee:	460d      	mov	r5, r1
 800daf0:	4f35      	ldr	r7, [pc, #212]	; (800dbc8 <_strtoul_l.constprop.0+0xe0>)
 800daf2:	4628      	mov	r0, r5
 800daf4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800daf8:	5de6      	ldrb	r6, [r4, r7]
 800dafa:	f016 0608 	ands.w	r6, r6, #8
 800dafe:	d1f8      	bne.n	800daf2 <_strtoul_l.constprop.0+0xa>
 800db00:	2c2d      	cmp	r4, #45	; 0x2d
 800db02:	d12f      	bne.n	800db64 <_strtoul_l.constprop.0+0x7c>
 800db04:	2601      	movs	r6, #1
 800db06:	782c      	ldrb	r4, [r5, #0]
 800db08:	1c85      	adds	r5, r0, #2
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d057      	beq.n	800dbbe <_strtoul_l.constprop.0+0xd6>
 800db0e:	2b10      	cmp	r3, #16
 800db10:	d109      	bne.n	800db26 <_strtoul_l.constprop.0+0x3e>
 800db12:	2c30      	cmp	r4, #48	; 0x30
 800db14:	d107      	bne.n	800db26 <_strtoul_l.constprop.0+0x3e>
 800db16:	7828      	ldrb	r0, [r5, #0]
 800db18:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800db1c:	2858      	cmp	r0, #88	; 0x58
 800db1e:	d149      	bne.n	800dbb4 <_strtoul_l.constprop.0+0xcc>
 800db20:	2310      	movs	r3, #16
 800db22:	786c      	ldrb	r4, [r5, #1]
 800db24:	3502      	adds	r5, #2
 800db26:	f04f 38ff 	mov.w	r8, #4294967295
 800db2a:	fbb8 f8f3 	udiv	r8, r8, r3
 800db2e:	2700      	movs	r7, #0
 800db30:	fb03 f908 	mul.w	r9, r3, r8
 800db34:	4638      	mov	r0, r7
 800db36:	ea6f 0909 	mvn.w	r9, r9
 800db3a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800db3e:	f1bc 0f09 	cmp.w	ip, #9
 800db42:	d814      	bhi.n	800db6e <_strtoul_l.constprop.0+0x86>
 800db44:	4664      	mov	r4, ip
 800db46:	42a3      	cmp	r3, r4
 800db48:	dd22      	ble.n	800db90 <_strtoul_l.constprop.0+0xa8>
 800db4a:	2f00      	cmp	r7, #0
 800db4c:	db1d      	blt.n	800db8a <_strtoul_l.constprop.0+0xa2>
 800db4e:	4580      	cmp	r8, r0
 800db50:	d31b      	bcc.n	800db8a <_strtoul_l.constprop.0+0xa2>
 800db52:	d101      	bne.n	800db58 <_strtoul_l.constprop.0+0x70>
 800db54:	45a1      	cmp	r9, r4
 800db56:	db18      	blt.n	800db8a <_strtoul_l.constprop.0+0xa2>
 800db58:	2701      	movs	r7, #1
 800db5a:	fb00 4003 	mla	r0, r0, r3, r4
 800db5e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800db62:	e7ea      	b.n	800db3a <_strtoul_l.constprop.0+0x52>
 800db64:	2c2b      	cmp	r4, #43	; 0x2b
 800db66:	bf04      	itt	eq
 800db68:	782c      	ldrbeq	r4, [r5, #0]
 800db6a:	1c85      	addeq	r5, r0, #2
 800db6c:	e7cd      	b.n	800db0a <_strtoul_l.constprop.0+0x22>
 800db6e:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800db72:	f1bc 0f19 	cmp.w	ip, #25
 800db76:	d801      	bhi.n	800db7c <_strtoul_l.constprop.0+0x94>
 800db78:	3c37      	subs	r4, #55	; 0x37
 800db7a:	e7e4      	b.n	800db46 <_strtoul_l.constprop.0+0x5e>
 800db7c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800db80:	f1bc 0f19 	cmp.w	ip, #25
 800db84:	d804      	bhi.n	800db90 <_strtoul_l.constprop.0+0xa8>
 800db86:	3c57      	subs	r4, #87	; 0x57
 800db88:	e7dd      	b.n	800db46 <_strtoul_l.constprop.0+0x5e>
 800db8a:	f04f 37ff 	mov.w	r7, #4294967295
 800db8e:	e7e6      	b.n	800db5e <_strtoul_l.constprop.0+0x76>
 800db90:	2f00      	cmp	r7, #0
 800db92:	da07      	bge.n	800dba4 <_strtoul_l.constprop.0+0xbc>
 800db94:	2322      	movs	r3, #34	; 0x22
 800db96:	f04f 30ff 	mov.w	r0, #4294967295
 800db9a:	f8ce 3000 	str.w	r3, [lr]
 800db9e:	b932      	cbnz	r2, 800dbae <_strtoul_l.constprop.0+0xc6>
 800dba0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dba4:	b106      	cbz	r6, 800dba8 <_strtoul_l.constprop.0+0xc0>
 800dba6:	4240      	negs	r0, r0
 800dba8:	2a00      	cmp	r2, #0
 800dbaa:	d0f9      	beq.n	800dba0 <_strtoul_l.constprop.0+0xb8>
 800dbac:	b107      	cbz	r7, 800dbb0 <_strtoul_l.constprop.0+0xc8>
 800dbae:	1e69      	subs	r1, r5, #1
 800dbb0:	6011      	str	r1, [r2, #0]
 800dbb2:	e7f5      	b.n	800dba0 <_strtoul_l.constprop.0+0xb8>
 800dbb4:	2430      	movs	r4, #48	; 0x30
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d1b5      	bne.n	800db26 <_strtoul_l.constprop.0+0x3e>
 800dbba:	2308      	movs	r3, #8
 800dbbc:	e7b3      	b.n	800db26 <_strtoul_l.constprop.0+0x3e>
 800dbbe:	2c30      	cmp	r4, #48	; 0x30
 800dbc0:	d0a9      	beq.n	800db16 <_strtoul_l.constprop.0+0x2e>
 800dbc2:	230a      	movs	r3, #10
 800dbc4:	e7af      	b.n	800db26 <_strtoul_l.constprop.0+0x3e>
 800dbc6:	bf00      	nop
 800dbc8:	0800f626 	.word	0x0800f626

0800dbcc <_strtoul_r>:
 800dbcc:	f7ff bf8c 	b.w	800dae8 <_strtoul_l.constprop.0>

0800dbd0 <strtoul>:
 800dbd0:	4613      	mov	r3, r2
 800dbd2:	460a      	mov	r2, r1
 800dbd4:	4601      	mov	r1, r0
 800dbd6:	4802      	ldr	r0, [pc, #8]	; (800dbe0 <strtoul+0x10>)
 800dbd8:	6800      	ldr	r0, [r0, #0]
 800dbda:	f7ff bf85 	b.w	800dae8 <_strtoul_l.constprop.0>
 800dbde:	bf00      	nop
 800dbe0:	200004e0 	.word	0x200004e0

0800dbe4 <__swbuf_r>:
 800dbe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbe6:	460e      	mov	r6, r1
 800dbe8:	4614      	mov	r4, r2
 800dbea:	4605      	mov	r5, r0
 800dbec:	b118      	cbz	r0, 800dbf6 <__swbuf_r+0x12>
 800dbee:	6983      	ldr	r3, [r0, #24]
 800dbf0:	b90b      	cbnz	r3, 800dbf6 <__swbuf_r+0x12>
 800dbf2:	f000 fa03 	bl	800dffc <__sinit>
 800dbf6:	4b21      	ldr	r3, [pc, #132]	; (800dc7c <__swbuf_r+0x98>)
 800dbf8:	429c      	cmp	r4, r3
 800dbfa:	d12b      	bne.n	800dc54 <__swbuf_r+0x70>
 800dbfc:	686c      	ldr	r4, [r5, #4]
 800dbfe:	69a3      	ldr	r3, [r4, #24]
 800dc00:	60a3      	str	r3, [r4, #8]
 800dc02:	89a3      	ldrh	r3, [r4, #12]
 800dc04:	071a      	lsls	r2, r3, #28
 800dc06:	d52f      	bpl.n	800dc68 <__swbuf_r+0x84>
 800dc08:	6923      	ldr	r3, [r4, #16]
 800dc0a:	b36b      	cbz	r3, 800dc68 <__swbuf_r+0x84>
 800dc0c:	6923      	ldr	r3, [r4, #16]
 800dc0e:	6820      	ldr	r0, [r4, #0]
 800dc10:	b2f6      	uxtb	r6, r6
 800dc12:	1ac0      	subs	r0, r0, r3
 800dc14:	6963      	ldr	r3, [r4, #20]
 800dc16:	4637      	mov	r7, r6
 800dc18:	4283      	cmp	r3, r0
 800dc1a:	dc04      	bgt.n	800dc26 <__swbuf_r+0x42>
 800dc1c:	4621      	mov	r1, r4
 800dc1e:	4628      	mov	r0, r5
 800dc20:	f000 f958 	bl	800ded4 <_fflush_r>
 800dc24:	bb30      	cbnz	r0, 800dc74 <__swbuf_r+0x90>
 800dc26:	68a3      	ldr	r3, [r4, #8]
 800dc28:	3001      	adds	r0, #1
 800dc2a:	3b01      	subs	r3, #1
 800dc2c:	60a3      	str	r3, [r4, #8]
 800dc2e:	6823      	ldr	r3, [r4, #0]
 800dc30:	1c5a      	adds	r2, r3, #1
 800dc32:	6022      	str	r2, [r4, #0]
 800dc34:	701e      	strb	r6, [r3, #0]
 800dc36:	6963      	ldr	r3, [r4, #20]
 800dc38:	4283      	cmp	r3, r0
 800dc3a:	d004      	beq.n	800dc46 <__swbuf_r+0x62>
 800dc3c:	89a3      	ldrh	r3, [r4, #12]
 800dc3e:	07db      	lsls	r3, r3, #31
 800dc40:	d506      	bpl.n	800dc50 <__swbuf_r+0x6c>
 800dc42:	2e0a      	cmp	r6, #10
 800dc44:	d104      	bne.n	800dc50 <__swbuf_r+0x6c>
 800dc46:	4621      	mov	r1, r4
 800dc48:	4628      	mov	r0, r5
 800dc4a:	f000 f943 	bl	800ded4 <_fflush_r>
 800dc4e:	b988      	cbnz	r0, 800dc74 <__swbuf_r+0x90>
 800dc50:	4638      	mov	r0, r7
 800dc52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dc54:	4b0a      	ldr	r3, [pc, #40]	; (800dc80 <__swbuf_r+0x9c>)
 800dc56:	429c      	cmp	r4, r3
 800dc58:	d101      	bne.n	800dc5e <__swbuf_r+0x7a>
 800dc5a:	68ac      	ldr	r4, [r5, #8]
 800dc5c:	e7cf      	b.n	800dbfe <__swbuf_r+0x1a>
 800dc5e:	4b09      	ldr	r3, [pc, #36]	; (800dc84 <__swbuf_r+0xa0>)
 800dc60:	429c      	cmp	r4, r3
 800dc62:	bf08      	it	eq
 800dc64:	68ec      	ldreq	r4, [r5, #12]
 800dc66:	e7ca      	b.n	800dbfe <__swbuf_r+0x1a>
 800dc68:	4621      	mov	r1, r4
 800dc6a:	4628      	mov	r0, r5
 800dc6c:	f000 f81e 	bl	800dcac <__swsetup_r>
 800dc70:	2800      	cmp	r0, #0
 800dc72:	d0cb      	beq.n	800dc0c <__swbuf_r+0x28>
 800dc74:	f04f 37ff 	mov.w	r7, #4294967295
 800dc78:	e7ea      	b.n	800dc50 <__swbuf_r+0x6c>
 800dc7a:	bf00      	nop
 800dc7c:	0800f77c 	.word	0x0800f77c
 800dc80:	0800f79c 	.word	0x0800f79c
 800dc84:	0800f75c 	.word	0x0800f75c

0800dc88 <_write_r>:
 800dc88:	b538      	push	{r3, r4, r5, lr}
 800dc8a:	4604      	mov	r4, r0
 800dc8c:	4608      	mov	r0, r1
 800dc8e:	4611      	mov	r1, r2
 800dc90:	2200      	movs	r2, #0
 800dc92:	4d05      	ldr	r5, [pc, #20]	; (800dca8 <_write_r+0x20>)
 800dc94:	602a      	str	r2, [r5, #0]
 800dc96:	461a      	mov	r2, r3
 800dc98:	f7f8 fc70 	bl	800657c <_write>
 800dc9c:	1c43      	adds	r3, r0, #1
 800dc9e:	d102      	bne.n	800dca6 <_write_r+0x1e>
 800dca0:	682b      	ldr	r3, [r5, #0]
 800dca2:	b103      	cbz	r3, 800dca6 <_write_r+0x1e>
 800dca4:	6023      	str	r3, [r4, #0]
 800dca6:	bd38      	pop	{r3, r4, r5, pc}
 800dca8:	20002c38 	.word	0x20002c38

0800dcac <__swsetup_r>:
 800dcac:	4b32      	ldr	r3, [pc, #200]	; (800dd78 <__swsetup_r+0xcc>)
 800dcae:	b570      	push	{r4, r5, r6, lr}
 800dcb0:	681d      	ldr	r5, [r3, #0]
 800dcb2:	4606      	mov	r6, r0
 800dcb4:	460c      	mov	r4, r1
 800dcb6:	b125      	cbz	r5, 800dcc2 <__swsetup_r+0x16>
 800dcb8:	69ab      	ldr	r3, [r5, #24]
 800dcba:	b913      	cbnz	r3, 800dcc2 <__swsetup_r+0x16>
 800dcbc:	4628      	mov	r0, r5
 800dcbe:	f000 f99d 	bl	800dffc <__sinit>
 800dcc2:	4b2e      	ldr	r3, [pc, #184]	; (800dd7c <__swsetup_r+0xd0>)
 800dcc4:	429c      	cmp	r4, r3
 800dcc6:	d10f      	bne.n	800dce8 <__swsetup_r+0x3c>
 800dcc8:	686c      	ldr	r4, [r5, #4]
 800dcca:	89a3      	ldrh	r3, [r4, #12]
 800dccc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dcd0:	0719      	lsls	r1, r3, #28
 800dcd2:	d42c      	bmi.n	800dd2e <__swsetup_r+0x82>
 800dcd4:	06dd      	lsls	r5, r3, #27
 800dcd6:	d411      	bmi.n	800dcfc <__swsetup_r+0x50>
 800dcd8:	2309      	movs	r3, #9
 800dcda:	6033      	str	r3, [r6, #0]
 800dcdc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800dce0:	f04f 30ff 	mov.w	r0, #4294967295
 800dce4:	81a3      	strh	r3, [r4, #12]
 800dce6:	e03e      	b.n	800dd66 <__swsetup_r+0xba>
 800dce8:	4b25      	ldr	r3, [pc, #148]	; (800dd80 <__swsetup_r+0xd4>)
 800dcea:	429c      	cmp	r4, r3
 800dcec:	d101      	bne.n	800dcf2 <__swsetup_r+0x46>
 800dcee:	68ac      	ldr	r4, [r5, #8]
 800dcf0:	e7eb      	b.n	800dcca <__swsetup_r+0x1e>
 800dcf2:	4b24      	ldr	r3, [pc, #144]	; (800dd84 <__swsetup_r+0xd8>)
 800dcf4:	429c      	cmp	r4, r3
 800dcf6:	bf08      	it	eq
 800dcf8:	68ec      	ldreq	r4, [r5, #12]
 800dcfa:	e7e6      	b.n	800dcca <__swsetup_r+0x1e>
 800dcfc:	0758      	lsls	r0, r3, #29
 800dcfe:	d512      	bpl.n	800dd26 <__swsetup_r+0x7a>
 800dd00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dd02:	b141      	cbz	r1, 800dd16 <__swsetup_r+0x6a>
 800dd04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dd08:	4299      	cmp	r1, r3
 800dd0a:	d002      	beq.n	800dd12 <__swsetup_r+0x66>
 800dd0c:	4630      	mov	r0, r6
 800dd0e:	f7fe fc9b 	bl	800c648 <_free_r>
 800dd12:	2300      	movs	r3, #0
 800dd14:	6363      	str	r3, [r4, #52]	; 0x34
 800dd16:	89a3      	ldrh	r3, [r4, #12]
 800dd18:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800dd1c:	81a3      	strh	r3, [r4, #12]
 800dd1e:	2300      	movs	r3, #0
 800dd20:	6063      	str	r3, [r4, #4]
 800dd22:	6923      	ldr	r3, [r4, #16]
 800dd24:	6023      	str	r3, [r4, #0]
 800dd26:	89a3      	ldrh	r3, [r4, #12]
 800dd28:	f043 0308 	orr.w	r3, r3, #8
 800dd2c:	81a3      	strh	r3, [r4, #12]
 800dd2e:	6923      	ldr	r3, [r4, #16]
 800dd30:	b94b      	cbnz	r3, 800dd46 <__swsetup_r+0x9a>
 800dd32:	89a3      	ldrh	r3, [r4, #12]
 800dd34:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800dd38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dd3c:	d003      	beq.n	800dd46 <__swsetup_r+0x9a>
 800dd3e:	4621      	mov	r1, r4
 800dd40:	4630      	mov	r0, r6
 800dd42:	f000 fa31 	bl	800e1a8 <__smakebuf_r>
 800dd46:	89a0      	ldrh	r0, [r4, #12]
 800dd48:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dd4c:	f010 0301 	ands.w	r3, r0, #1
 800dd50:	d00a      	beq.n	800dd68 <__swsetup_r+0xbc>
 800dd52:	2300      	movs	r3, #0
 800dd54:	60a3      	str	r3, [r4, #8]
 800dd56:	6963      	ldr	r3, [r4, #20]
 800dd58:	425b      	negs	r3, r3
 800dd5a:	61a3      	str	r3, [r4, #24]
 800dd5c:	6923      	ldr	r3, [r4, #16]
 800dd5e:	b943      	cbnz	r3, 800dd72 <__swsetup_r+0xc6>
 800dd60:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800dd64:	d1ba      	bne.n	800dcdc <__swsetup_r+0x30>
 800dd66:	bd70      	pop	{r4, r5, r6, pc}
 800dd68:	0781      	lsls	r1, r0, #30
 800dd6a:	bf58      	it	pl
 800dd6c:	6963      	ldrpl	r3, [r4, #20]
 800dd6e:	60a3      	str	r3, [r4, #8]
 800dd70:	e7f4      	b.n	800dd5c <__swsetup_r+0xb0>
 800dd72:	2000      	movs	r0, #0
 800dd74:	e7f7      	b.n	800dd66 <__swsetup_r+0xba>
 800dd76:	bf00      	nop
 800dd78:	200004e0 	.word	0x200004e0
 800dd7c:	0800f77c 	.word	0x0800f77c
 800dd80:	0800f79c 	.word	0x0800f79c
 800dd84:	0800f75c 	.word	0x0800f75c

0800dd88 <abort>:
 800dd88:	2006      	movs	r0, #6
 800dd8a:	b508      	push	{r3, lr}
 800dd8c:	f000 fe3c 	bl	800ea08 <raise>
 800dd90:	2001      	movs	r0, #1
 800dd92:	f7f8 fbcc 	bl	800652e <_exit>
	...

0800dd98 <_close_r>:
 800dd98:	b538      	push	{r3, r4, r5, lr}
 800dd9a:	2300      	movs	r3, #0
 800dd9c:	4d05      	ldr	r5, [pc, #20]	; (800ddb4 <_close_r+0x1c>)
 800dd9e:	4604      	mov	r4, r0
 800dda0:	4608      	mov	r0, r1
 800dda2:	602b      	str	r3, [r5, #0]
 800dda4:	f7f8 fc06 	bl	80065b4 <_close>
 800dda8:	1c43      	adds	r3, r0, #1
 800ddaa:	d102      	bne.n	800ddb2 <_close_r+0x1a>
 800ddac:	682b      	ldr	r3, [r5, #0]
 800ddae:	b103      	cbz	r3, 800ddb2 <_close_r+0x1a>
 800ddb0:	6023      	str	r3, [r4, #0]
 800ddb2:	bd38      	pop	{r3, r4, r5, pc}
 800ddb4:	20002c38 	.word	0x20002c38

0800ddb8 <__env_lock>:
 800ddb8:	4801      	ldr	r0, [pc, #4]	; (800ddc0 <__env_lock+0x8>)
 800ddba:	f7ff b9af 	b.w	800d11c <__retarget_lock_acquire_recursive>
 800ddbe:	bf00      	nop
 800ddc0:	20002c30 	.word	0x20002c30

0800ddc4 <__env_unlock>:
 800ddc4:	4801      	ldr	r0, [pc, #4]	; (800ddcc <__env_unlock+0x8>)
 800ddc6:	f7ff b9ab 	b.w	800d120 <__retarget_lock_release_recursive>
 800ddca:	bf00      	nop
 800ddcc:	20002c30 	.word	0x20002c30

0800ddd0 <__sflush_r>:
 800ddd0:	898a      	ldrh	r2, [r1, #12]
 800ddd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ddd4:	4605      	mov	r5, r0
 800ddd6:	0710      	lsls	r0, r2, #28
 800ddd8:	460c      	mov	r4, r1
 800ddda:	d457      	bmi.n	800de8c <__sflush_r+0xbc>
 800dddc:	684b      	ldr	r3, [r1, #4]
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	dc04      	bgt.n	800ddec <__sflush_r+0x1c>
 800dde2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	dc01      	bgt.n	800ddec <__sflush_r+0x1c>
 800dde8:	2000      	movs	r0, #0
 800ddea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ddec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ddee:	2e00      	cmp	r6, #0
 800ddf0:	d0fa      	beq.n	800dde8 <__sflush_r+0x18>
 800ddf2:	2300      	movs	r3, #0
 800ddf4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ddf8:	682f      	ldr	r7, [r5, #0]
 800ddfa:	602b      	str	r3, [r5, #0]
 800ddfc:	d032      	beq.n	800de64 <__sflush_r+0x94>
 800ddfe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800de00:	89a3      	ldrh	r3, [r4, #12]
 800de02:	075a      	lsls	r2, r3, #29
 800de04:	d505      	bpl.n	800de12 <__sflush_r+0x42>
 800de06:	6863      	ldr	r3, [r4, #4]
 800de08:	1ac0      	subs	r0, r0, r3
 800de0a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800de0c:	b10b      	cbz	r3, 800de12 <__sflush_r+0x42>
 800de0e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800de10:	1ac0      	subs	r0, r0, r3
 800de12:	2300      	movs	r3, #0
 800de14:	4602      	mov	r2, r0
 800de16:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800de18:	4628      	mov	r0, r5
 800de1a:	6a21      	ldr	r1, [r4, #32]
 800de1c:	47b0      	blx	r6
 800de1e:	1c43      	adds	r3, r0, #1
 800de20:	89a3      	ldrh	r3, [r4, #12]
 800de22:	d106      	bne.n	800de32 <__sflush_r+0x62>
 800de24:	6829      	ldr	r1, [r5, #0]
 800de26:	291d      	cmp	r1, #29
 800de28:	d82c      	bhi.n	800de84 <__sflush_r+0xb4>
 800de2a:	4a29      	ldr	r2, [pc, #164]	; (800ded0 <__sflush_r+0x100>)
 800de2c:	40ca      	lsrs	r2, r1
 800de2e:	07d6      	lsls	r6, r2, #31
 800de30:	d528      	bpl.n	800de84 <__sflush_r+0xb4>
 800de32:	2200      	movs	r2, #0
 800de34:	6062      	str	r2, [r4, #4]
 800de36:	6922      	ldr	r2, [r4, #16]
 800de38:	04d9      	lsls	r1, r3, #19
 800de3a:	6022      	str	r2, [r4, #0]
 800de3c:	d504      	bpl.n	800de48 <__sflush_r+0x78>
 800de3e:	1c42      	adds	r2, r0, #1
 800de40:	d101      	bne.n	800de46 <__sflush_r+0x76>
 800de42:	682b      	ldr	r3, [r5, #0]
 800de44:	b903      	cbnz	r3, 800de48 <__sflush_r+0x78>
 800de46:	6560      	str	r0, [r4, #84]	; 0x54
 800de48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800de4a:	602f      	str	r7, [r5, #0]
 800de4c:	2900      	cmp	r1, #0
 800de4e:	d0cb      	beq.n	800dde8 <__sflush_r+0x18>
 800de50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800de54:	4299      	cmp	r1, r3
 800de56:	d002      	beq.n	800de5e <__sflush_r+0x8e>
 800de58:	4628      	mov	r0, r5
 800de5a:	f7fe fbf5 	bl	800c648 <_free_r>
 800de5e:	2000      	movs	r0, #0
 800de60:	6360      	str	r0, [r4, #52]	; 0x34
 800de62:	e7c2      	b.n	800ddea <__sflush_r+0x1a>
 800de64:	6a21      	ldr	r1, [r4, #32]
 800de66:	2301      	movs	r3, #1
 800de68:	4628      	mov	r0, r5
 800de6a:	47b0      	blx	r6
 800de6c:	1c41      	adds	r1, r0, #1
 800de6e:	d1c7      	bne.n	800de00 <__sflush_r+0x30>
 800de70:	682b      	ldr	r3, [r5, #0]
 800de72:	2b00      	cmp	r3, #0
 800de74:	d0c4      	beq.n	800de00 <__sflush_r+0x30>
 800de76:	2b1d      	cmp	r3, #29
 800de78:	d001      	beq.n	800de7e <__sflush_r+0xae>
 800de7a:	2b16      	cmp	r3, #22
 800de7c:	d101      	bne.n	800de82 <__sflush_r+0xb2>
 800de7e:	602f      	str	r7, [r5, #0]
 800de80:	e7b2      	b.n	800dde8 <__sflush_r+0x18>
 800de82:	89a3      	ldrh	r3, [r4, #12]
 800de84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800de88:	81a3      	strh	r3, [r4, #12]
 800de8a:	e7ae      	b.n	800ddea <__sflush_r+0x1a>
 800de8c:	690f      	ldr	r7, [r1, #16]
 800de8e:	2f00      	cmp	r7, #0
 800de90:	d0aa      	beq.n	800dde8 <__sflush_r+0x18>
 800de92:	0793      	lsls	r3, r2, #30
 800de94:	bf18      	it	ne
 800de96:	2300      	movne	r3, #0
 800de98:	680e      	ldr	r6, [r1, #0]
 800de9a:	bf08      	it	eq
 800de9c:	694b      	ldreq	r3, [r1, #20]
 800de9e:	1bf6      	subs	r6, r6, r7
 800dea0:	600f      	str	r7, [r1, #0]
 800dea2:	608b      	str	r3, [r1, #8]
 800dea4:	2e00      	cmp	r6, #0
 800dea6:	dd9f      	ble.n	800dde8 <__sflush_r+0x18>
 800dea8:	4633      	mov	r3, r6
 800deaa:	463a      	mov	r2, r7
 800deac:	4628      	mov	r0, r5
 800deae:	6a21      	ldr	r1, [r4, #32]
 800deb0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800deb4:	47e0      	blx	ip
 800deb6:	2800      	cmp	r0, #0
 800deb8:	dc06      	bgt.n	800dec8 <__sflush_r+0xf8>
 800deba:	89a3      	ldrh	r3, [r4, #12]
 800debc:	f04f 30ff 	mov.w	r0, #4294967295
 800dec0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dec4:	81a3      	strh	r3, [r4, #12]
 800dec6:	e790      	b.n	800ddea <__sflush_r+0x1a>
 800dec8:	4407      	add	r7, r0
 800deca:	1a36      	subs	r6, r6, r0
 800decc:	e7ea      	b.n	800dea4 <__sflush_r+0xd4>
 800dece:	bf00      	nop
 800ded0:	20400001 	.word	0x20400001

0800ded4 <_fflush_r>:
 800ded4:	b538      	push	{r3, r4, r5, lr}
 800ded6:	690b      	ldr	r3, [r1, #16]
 800ded8:	4605      	mov	r5, r0
 800deda:	460c      	mov	r4, r1
 800dedc:	b913      	cbnz	r3, 800dee4 <_fflush_r+0x10>
 800dede:	2500      	movs	r5, #0
 800dee0:	4628      	mov	r0, r5
 800dee2:	bd38      	pop	{r3, r4, r5, pc}
 800dee4:	b118      	cbz	r0, 800deee <_fflush_r+0x1a>
 800dee6:	6983      	ldr	r3, [r0, #24]
 800dee8:	b90b      	cbnz	r3, 800deee <_fflush_r+0x1a>
 800deea:	f000 f887 	bl	800dffc <__sinit>
 800deee:	4b14      	ldr	r3, [pc, #80]	; (800df40 <_fflush_r+0x6c>)
 800def0:	429c      	cmp	r4, r3
 800def2:	d11b      	bne.n	800df2c <_fflush_r+0x58>
 800def4:	686c      	ldr	r4, [r5, #4]
 800def6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800defa:	2b00      	cmp	r3, #0
 800defc:	d0ef      	beq.n	800dede <_fflush_r+0xa>
 800defe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800df00:	07d0      	lsls	r0, r2, #31
 800df02:	d404      	bmi.n	800df0e <_fflush_r+0x3a>
 800df04:	0599      	lsls	r1, r3, #22
 800df06:	d402      	bmi.n	800df0e <_fflush_r+0x3a>
 800df08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800df0a:	f7ff f907 	bl	800d11c <__retarget_lock_acquire_recursive>
 800df0e:	4628      	mov	r0, r5
 800df10:	4621      	mov	r1, r4
 800df12:	f7ff ff5d 	bl	800ddd0 <__sflush_r>
 800df16:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800df18:	4605      	mov	r5, r0
 800df1a:	07da      	lsls	r2, r3, #31
 800df1c:	d4e0      	bmi.n	800dee0 <_fflush_r+0xc>
 800df1e:	89a3      	ldrh	r3, [r4, #12]
 800df20:	059b      	lsls	r3, r3, #22
 800df22:	d4dd      	bmi.n	800dee0 <_fflush_r+0xc>
 800df24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800df26:	f7ff f8fb 	bl	800d120 <__retarget_lock_release_recursive>
 800df2a:	e7d9      	b.n	800dee0 <_fflush_r+0xc>
 800df2c:	4b05      	ldr	r3, [pc, #20]	; (800df44 <_fflush_r+0x70>)
 800df2e:	429c      	cmp	r4, r3
 800df30:	d101      	bne.n	800df36 <_fflush_r+0x62>
 800df32:	68ac      	ldr	r4, [r5, #8]
 800df34:	e7df      	b.n	800def6 <_fflush_r+0x22>
 800df36:	4b04      	ldr	r3, [pc, #16]	; (800df48 <_fflush_r+0x74>)
 800df38:	429c      	cmp	r4, r3
 800df3a:	bf08      	it	eq
 800df3c:	68ec      	ldreq	r4, [r5, #12]
 800df3e:	e7da      	b.n	800def6 <_fflush_r+0x22>
 800df40:	0800f77c 	.word	0x0800f77c
 800df44:	0800f79c 	.word	0x0800f79c
 800df48:	0800f75c 	.word	0x0800f75c

0800df4c <std>:
 800df4c:	2300      	movs	r3, #0
 800df4e:	b510      	push	{r4, lr}
 800df50:	4604      	mov	r4, r0
 800df52:	e9c0 3300 	strd	r3, r3, [r0]
 800df56:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800df5a:	6083      	str	r3, [r0, #8]
 800df5c:	8181      	strh	r1, [r0, #12]
 800df5e:	6643      	str	r3, [r0, #100]	; 0x64
 800df60:	81c2      	strh	r2, [r0, #14]
 800df62:	6183      	str	r3, [r0, #24]
 800df64:	4619      	mov	r1, r3
 800df66:	2208      	movs	r2, #8
 800df68:	305c      	adds	r0, #92	; 0x5c
 800df6a:	f7fe f8f3 	bl	800c154 <memset>
 800df6e:	4b05      	ldr	r3, [pc, #20]	; (800df84 <std+0x38>)
 800df70:	6224      	str	r4, [r4, #32]
 800df72:	6263      	str	r3, [r4, #36]	; 0x24
 800df74:	4b04      	ldr	r3, [pc, #16]	; (800df88 <std+0x3c>)
 800df76:	62a3      	str	r3, [r4, #40]	; 0x28
 800df78:	4b04      	ldr	r3, [pc, #16]	; (800df8c <std+0x40>)
 800df7a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800df7c:	4b04      	ldr	r3, [pc, #16]	; (800df90 <std+0x44>)
 800df7e:	6323      	str	r3, [r4, #48]	; 0x30
 800df80:	bd10      	pop	{r4, pc}
 800df82:	bf00      	nop
 800df84:	0800da25 	.word	0x0800da25
 800df88:	0800da4b 	.word	0x0800da4b
 800df8c:	0800da83 	.word	0x0800da83
 800df90:	0800daa7 	.word	0x0800daa7

0800df94 <_cleanup_r>:
 800df94:	4901      	ldr	r1, [pc, #4]	; (800df9c <_cleanup_r+0x8>)
 800df96:	f000 b8af 	b.w	800e0f8 <_fwalk_reent>
 800df9a:	bf00      	nop
 800df9c:	0800ded5 	.word	0x0800ded5

0800dfa0 <__sfmoreglue>:
 800dfa0:	2268      	movs	r2, #104	; 0x68
 800dfa2:	b570      	push	{r4, r5, r6, lr}
 800dfa4:	1e4d      	subs	r5, r1, #1
 800dfa6:	4355      	muls	r5, r2
 800dfa8:	460e      	mov	r6, r1
 800dfaa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800dfae:	f7fe fbb3 	bl	800c718 <_malloc_r>
 800dfb2:	4604      	mov	r4, r0
 800dfb4:	b140      	cbz	r0, 800dfc8 <__sfmoreglue+0x28>
 800dfb6:	2100      	movs	r1, #0
 800dfb8:	e9c0 1600 	strd	r1, r6, [r0]
 800dfbc:	300c      	adds	r0, #12
 800dfbe:	60a0      	str	r0, [r4, #8]
 800dfc0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800dfc4:	f7fe f8c6 	bl	800c154 <memset>
 800dfc8:	4620      	mov	r0, r4
 800dfca:	bd70      	pop	{r4, r5, r6, pc}

0800dfcc <__sfp_lock_acquire>:
 800dfcc:	4801      	ldr	r0, [pc, #4]	; (800dfd4 <__sfp_lock_acquire+0x8>)
 800dfce:	f7ff b8a5 	b.w	800d11c <__retarget_lock_acquire_recursive>
 800dfd2:	bf00      	nop
 800dfd4:	20002c32 	.word	0x20002c32

0800dfd8 <__sfp_lock_release>:
 800dfd8:	4801      	ldr	r0, [pc, #4]	; (800dfe0 <__sfp_lock_release+0x8>)
 800dfda:	f7ff b8a1 	b.w	800d120 <__retarget_lock_release_recursive>
 800dfde:	bf00      	nop
 800dfe0:	20002c32 	.word	0x20002c32

0800dfe4 <__sinit_lock_acquire>:
 800dfe4:	4801      	ldr	r0, [pc, #4]	; (800dfec <__sinit_lock_acquire+0x8>)
 800dfe6:	f7ff b899 	b.w	800d11c <__retarget_lock_acquire_recursive>
 800dfea:	bf00      	nop
 800dfec:	20002c33 	.word	0x20002c33

0800dff0 <__sinit_lock_release>:
 800dff0:	4801      	ldr	r0, [pc, #4]	; (800dff8 <__sinit_lock_release+0x8>)
 800dff2:	f7ff b895 	b.w	800d120 <__retarget_lock_release_recursive>
 800dff6:	bf00      	nop
 800dff8:	20002c33 	.word	0x20002c33

0800dffc <__sinit>:
 800dffc:	b510      	push	{r4, lr}
 800dffe:	4604      	mov	r4, r0
 800e000:	f7ff fff0 	bl	800dfe4 <__sinit_lock_acquire>
 800e004:	69a3      	ldr	r3, [r4, #24]
 800e006:	b11b      	cbz	r3, 800e010 <__sinit+0x14>
 800e008:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e00c:	f7ff bff0 	b.w	800dff0 <__sinit_lock_release>
 800e010:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e014:	6523      	str	r3, [r4, #80]	; 0x50
 800e016:	4b13      	ldr	r3, [pc, #76]	; (800e064 <__sinit+0x68>)
 800e018:	4a13      	ldr	r2, [pc, #76]	; (800e068 <__sinit+0x6c>)
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	62a2      	str	r2, [r4, #40]	; 0x28
 800e01e:	42a3      	cmp	r3, r4
 800e020:	bf08      	it	eq
 800e022:	2301      	moveq	r3, #1
 800e024:	4620      	mov	r0, r4
 800e026:	bf08      	it	eq
 800e028:	61a3      	streq	r3, [r4, #24]
 800e02a:	f000 f81f 	bl	800e06c <__sfp>
 800e02e:	6060      	str	r0, [r4, #4]
 800e030:	4620      	mov	r0, r4
 800e032:	f000 f81b 	bl	800e06c <__sfp>
 800e036:	60a0      	str	r0, [r4, #8]
 800e038:	4620      	mov	r0, r4
 800e03a:	f000 f817 	bl	800e06c <__sfp>
 800e03e:	2200      	movs	r2, #0
 800e040:	2104      	movs	r1, #4
 800e042:	60e0      	str	r0, [r4, #12]
 800e044:	6860      	ldr	r0, [r4, #4]
 800e046:	f7ff ff81 	bl	800df4c <std>
 800e04a:	2201      	movs	r2, #1
 800e04c:	2109      	movs	r1, #9
 800e04e:	68a0      	ldr	r0, [r4, #8]
 800e050:	f7ff ff7c 	bl	800df4c <std>
 800e054:	2202      	movs	r2, #2
 800e056:	2112      	movs	r1, #18
 800e058:	68e0      	ldr	r0, [r4, #12]
 800e05a:	f7ff ff77 	bl	800df4c <std>
 800e05e:	2301      	movs	r3, #1
 800e060:	61a3      	str	r3, [r4, #24]
 800e062:	e7d1      	b.n	800e008 <__sinit+0xc>
 800e064:	0800f418 	.word	0x0800f418
 800e068:	0800df95 	.word	0x0800df95

0800e06c <__sfp>:
 800e06c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e06e:	4607      	mov	r7, r0
 800e070:	f7ff ffac 	bl	800dfcc <__sfp_lock_acquire>
 800e074:	4b1e      	ldr	r3, [pc, #120]	; (800e0f0 <__sfp+0x84>)
 800e076:	681e      	ldr	r6, [r3, #0]
 800e078:	69b3      	ldr	r3, [r6, #24]
 800e07a:	b913      	cbnz	r3, 800e082 <__sfp+0x16>
 800e07c:	4630      	mov	r0, r6
 800e07e:	f7ff ffbd 	bl	800dffc <__sinit>
 800e082:	3648      	adds	r6, #72	; 0x48
 800e084:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e088:	3b01      	subs	r3, #1
 800e08a:	d503      	bpl.n	800e094 <__sfp+0x28>
 800e08c:	6833      	ldr	r3, [r6, #0]
 800e08e:	b30b      	cbz	r3, 800e0d4 <__sfp+0x68>
 800e090:	6836      	ldr	r6, [r6, #0]
 800e092:	e7f7      	b.n	800e084 <__sfp+0x18>
 800e094:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e098:	b9d5      	cbnz	r5, 800e0d0 <__sfp+0x64>
 800e09a:	4b16      	ldr	r3, [pc, #88]	; (800e0f4 <__sfp+0x88>)
 800e09c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e0a0:	60e3      	str	r3, [r4, #12]
 800e0a2:	6665      	str	r5, [r4, #100]	; 0x64
 800e0a4:	f7ff f838 	bl	800d118 <__retarget_lock_init_recursive>
 800e0a8:	f7ff ff96 	bl	800dfd8 <__sfp_lock_release>
 800e0ac:	2208      	movs	r2, #8
 800e0ae:	4629      	mov	r1, r5
 800e0b0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e0b4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e0b8:	6025      	str	r5, [r4, #0]
 800e0ba:	61a5      	str	r5, [r4, #24]
 800e0bc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e0c0:	f7fe f848 	bl	800c154 <memset>
 800e0c4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e0c8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e0cc:	4620      	mov	r0, r4
 800e0ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e0d0:	3468      	adds	r4, #104	; 0x68
 800e0d2:	e7d9      	b.n	800e088 <__sfp+0x1c>
 800e0d4:	2104      	movs	r1, #4
 800e0d6:	4638      	mov	r0, r7
 800e0d8:	f7ff ff62 	bl	800dfa0 <__sfmoreglue>
 800e0dc:	4604      	mov	r4, r0
 800e0de:	6030      	str	r0, [r6, #0]
 800e0e0:	2800      	cmp	r0, #0
 800e0e2:	d1d5      	bne.n	800e090 <__sfp+0x24>
 800e0e4:	f7ff ff78 	bl	800dfd8 <__sfp_lock_release>
 800e0e8:	230c      	movs	r3, #12
 800e0ea:	603b      	str	r3, [r7, #0]
 800e0ec:	e7ee      	b.n	800e0cc <__sfp+0x60>
 800e0ee:	bf00      	nop
 800e0f0:	0800f418 	.word	0x0800f418
 800e0f4:	ffff0001 	.word	0xffff0001

0800e0f8 <_fwalk_reent>:
 800e0f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e0fc:	4606      	mov	r6, r0
 800e0fe:	4688      	mov	r8, r1
 800e100:	2700      	movs	r7, #0
 800e102:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e106:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e10a:	f1b9 0901 	subs.w	r9, r9, #1
 800e10e:	d505      	bpl.n	800e11c <_fwalk_reent+0x24>
 800e110:	6824      	ldr	r4, [r4, #0]
 800e112:	2c00      	cmp	r4, #0
 800e114:	d1f7      	bne.n	800e106 <_fwalk_reent+0xe>
 800e116:	4638      	mov	r0, r7
 800e118:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e11c:	89ab      	ldrh	r3, [r5, #12]
 800e11e:	2b01      	cmp	r3, #1
 800e120:	d907      	bls.n	800e132 <_fwalk_reent+0x3a>
 800e122:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e126:	3301      	adds	r3, #1
 800e128:	d003      	beq.n	800e132 <_fwalk_reent+0x3a>
 800e12a:	4629      	mov	r1, r5
 800e12c:	4630      	mov	r0, r6
 800e12e:	47c0      	blx	r8
 800e130:	4307      	orrs	r7, r0
 800e132:	3568      	adds	r5, #104	; 0x68
 800e134:	e7e9      	b.n	800e10a <_fwalk_reent+0x12>
	...

0800e138 <_lseek_r>:
 800e138:	b538      	push	{r3, r4, r5, lr}
 800e13a:	4604      	mov	r4, r0
 800e13c:	4608      	mov	r0, r1
 800e13e:	4611      	mov	r1, r2
 800e140:	2200      	movs	r2, #0
 800e142:	4d05      	ldr	r5, [pc, #20]	; (800e158 <_lseek_r+0x20>)
 800e144:	602a      	str	r2, [r5, #0]
 800e146:	461a      	mov	r2, r3
 800e148:	f7f8 fa58 	bl	80065fc <_lseek>
 800e14c:	1c43      	adds	r3, r0, #1
 800e14e:	d102      	bne.n	800e156 <_lseek_r+0x1e>
 800e150:	682b      	ldr	r3, [r5, #0]
 800e152:	b103      	cbz	r3, 800e156 <_lseek_r+0x1e>
 800e154:	6023      	str	r3, [r4, #0]
 800e156:	bd38      	pop	{r3, r4, r5, pc}
 800e158:	20002c38 	.word	0x20002c38

0800e15c <__swhatbuf_r>:
 800e15c:	b570      	push	{r4, r5, r6, lr}
 800e15e:	460e      	mov	r6, r1
 800e160:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e164:	4614      	mov	r4, r2
 800e166:	2900      	cmp	r1, #0
 800e168:	461d      	mov	r5, r3
 800e16a:	b096      	sub	sp, #88	; 0x58
 800e16c:	da08      	bge.n	800e180 <__swhatbuf_r+0x24>
 800e16e:	2200      	movs	r2, #0
 800e170:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800e174:	602a      	str	r2, [r5, #0]
 800e176:	061a      	lsls	r2, r3, #24
 800e178:	d410      	bmi.n	800e19c <__swhatbuf_r+0x40>
 800e17a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e17e:	e00e      	b.n	800e19e <__swhatbuf_r+0x42>
 800e180:	466a      	mov	r2, sp
 800e182:	f000 fc95 	bl	800eab0 <_fstat_r>
 800e186:	2800      	cmp	r0, #0
 800e188:	dbf1      	blt.n	800e16e <__swhatbuf_r+0x12>
 800e18a:	9a01      	ldr	r2, [sp, #4]
 800e18c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e190:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e194:	425a      	negs	r2, r3
 800e196:	415a      	adcs	r2, r3
 800e198:	602a      	str	r2, [r5, #0]
 800e19a:	e7ee      	b.n	800e17a <__swhatbuf_r+0x1e>
 800e19c:	2340      	movs	r3, #64	; 0x40
 800e19e:	2000      	movs	r0, #0
 800e1a0:	6023      	str	r3, [r4, #0]
 800e1a2:	b016      	add	sp, #88	; 0x58
 800e1a4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e1a8 <__smakebuf_r>:
 800e1a8:	898b      	ldrh	r3, [r1, #12]
 800e1aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e1ac:	079d      	lsls	r5, r3, #30
 800e1ae:	4606      	mov	r6, r0
 800e1b0:	460c      	mov	r4, r1
 800e1b2:	d507      	bpl.n	800e1c4 <__smakebuf_r+0x1c>
 800e1b4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e1b8:	6023      	str	r3, [r4, #0]
 800e1ba:	6123      	str	r3, [r4, #16]
 800e1bc:	2301      	movs	r3, #1
 800e1be:	6163      	str	r3, [r4, #20]
 800e1c0:	b002      	add	sp, #8
 800e1c2:	bd70      	pop	{r4, r5, r6, pc}
 800e1c4:	466a      	mov	r2, sp
 800e1c6:	ab01      	add	r3, sp, #4
 800e1c8:	f7ff ffc8 	bl	800e15c <__swhatbuf_r>
 800e1cc:	9900      	ldr	r1, [sp, #0]
 800e1ce:	4605      	mov	r5, r0
 800e1d0:	4630      	mov	r0, r6
 800e1d2:	f7fe faa1 	bl	800c718 <_malloc_r>
 800e1d6:	b948      	cbnz	r0, 800e1ec <__smakebuf_r+0x44>
 800e1d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e1dc:	059a      	lsls	r2, r3, #22
 800e1de:	d4ef      	bmi.n	800e1c0 <__smakebuf_r+0x18>
 800e1e0:	f023 0303 	bic.w	r3, r3, #3
 800e1e4:	f043 0302 	orr.w	r3, r3, #2
 800e1e8:	81a3      	strh	r3, [r4, #12]
 800e1ea:	e7e3      	b.n	800e1b4 <__smakebuf_r+0xc>
 800e1ec:	4b0d      	ldr	r3, [pc, #52]	; (800e224 <__smakebuf_r+0x7c>)
 800e1ee:	62b3      	str	r3, [r6, #40]	; 0x28
 800e1f0:	89a3      	ldrh	r3, [r4, #12]
 800e1f2:	6020      	str	r0, [r4, #0]
 800e1f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e1f8:	81a3      	strh	r3, [r4, #12]
 800e1fa:	9b00      	ldr	r3, [sp, #0]
 800e1fc:	6120      	str	r0, [r4, #16]
 800e1fe:	6163      	str	r3, [r4, #20]
 800e200:	9b01      	ldr	r3, [sp, #4]
 800e202:	b15b      	cbz	r3, 800e21c <__smakebuf_r+0x74>
 800e204:	4630      	mov	r0, r6
 800e206:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e20a:	f000 fc63 	bl	800ead4 <_isatty_r>
 800e20e:	b128      	cbz	r0, 800e21c <__smakebuf_r+0x74>
 800e210:	89a3      	ldrh	r3, [r4, #12]
 800e212:	f023 0303 	bic.w	r3, r3, #3
 800e216:	f043 0301 	orr.w	r3, r3, #1
 800e21a:	81a3      	strh	r3, [r4, #12]
 800e21c:	89a0      	ldrh	r0, [r4, #12]
 800e21e:	4305      	orrs	r5, r0
 800e220:	81a5      	strh	r5, [r4, #12]
 800e222:	e7cd      	b.n	800e1c0 <__smakebuf_r+0x18>
 800e224:	0800df95 	.word	0x0800df95

0800e228 <memchr>:
 800e228:	4603      	mov	r3, r0
 800e22a:	b510      	push	{r4, lr}
 800e22c:	b2c9      	uxtb	r1, r1
 800e22e:	4402      	add	r2, r0
 800e230:	4293      	cmp	r3, r2
 800e232:	4618      	mov	r0, r3
 800e234:	d101      	bne.n	800e23a <memchr+0x12>
 800e236:	2000      	movs	r0, #0
 800e238:	e003      	b.n	800e242 <memchr+0x1a>
 800e23a:	7804      	ldrb	r4, [r0, #0]
 800e23c:	3301      	adds	r3, #1
 800e23e:	428c      	cmp	r4, r1
 800e240:	d1f6      	bne.n	800e230 <memchr+0x8>
 800e242:	bd10      	pop	{r4, pc}

0800e244 <memmove>:
 800e244:	4288      	cmp	r0, r1
 800e246:	b510      	push	{r4, lr}
 800e248:	eb01 0402 	add.w	r4, r1, r2
 800e24c:	d902      	bls.n	800e254 <memmove+0x10>
 800e24e:	4284      	cmp	r4, r0
 800e250:	4623      	mov	r3, r4
 800e252:	d807      	bhi.n	800e264 <memmove+0x20>
 800e254:	1e43      	subs	r3, r0, #1
 800e256:	42a1      	cmp	r1, r4
 800e258:	d008      	beq.n	800e26c <memmove+0x28>
 800e25a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e25e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e262:	e7f8      	b.n	800e256 <memmove+0x12>
 800e264:	4601      	mov	r1, r0
 800e266:	4402      	add	r2, r0
 800e268:	428a      	cmp	r2, r1
 800e26a:	d100      	bne.n	800e26e <memmove+0x2a>
 800e26c:	bd10      	pop	{r4, pc}
 800e26e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e272:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e276:	e7f7      	b.n	800e268 <memmove+0x24>

0800e278 <_realloc_r>:
 800e278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e27c:	4680      	mov	r8, r0
 800e27e:	4614      	mov	r4, r2
 800e280:	460e      	mov	r6, r1
 800e282:	b921      	cbnz	r1, 800e28e <_realloc_r+0x16>
 800e284:	4611      	mov	r1, r2
 800e286:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e28a:	f7fe ba45 	b.w	800c718 <_malloc_r>
 800e28e:	b92a      	cbnz	r2, 800e29c <_realloc_r+0x24>
 800e290:	f7fe f9da 	bl	800c648 <_free_r>
 800e294:	4625      	mov	r5, r4
 800e296:	4628      	mov	r0, r5
 800e298:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e29c:	f000 fc2a 	bl	800eaf4 <_malloc_usable_size_r>
 800e2a0:	4284      	cmp	r4, r0
 800e2a2:	4607      	mov	r7, r0
 800e2a4:	d802      	bhi.n	800e2ac <_realloc_r+0x34>
 800e2a6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e2aa:	d812      	bhi.n	800e2d2 <_realloc_r+0x5a>
 800e2ac:	4621      	mov	r1, r4
 800e2ae:	4640      	mov	r0, r8
 800e2b0:	f7fe fa32 	bl	800c718 <_malloc_r>
 800e2b4:	4605      	mov	r5, r0
 800e2b6:	2800      	cmp	r0, #0
 800e2b8:	d0ed      	beq.n	800e296 <_realloc_r+0x1e>
 800e2ba:	42bc      	cmp	r4, r7
 800e2bc:	4622      	mov	r2, r4
 800e2be:	4631      	mov	r1, r6
 800e2c0:	bf28      	it	cs
 800e2c2:	463a      	movcs	r2, r7
 800e2c4:	f7fd ff38 	bl	800c138 <memcpy>
 800e2c8:	4631      	mov	r1, r6
 800e2ca:	4640      	mov	r0, r8
 800e2cc:	f7fe f9bc 	bl	800c648 <_free_r>
 800e2d0:	e7e1      	b.n	800e296 <_realloc_r+0x1e>
 800e2d2:	4635      	mov	r5, r6
 800e2d4:	e7df      	b.n	800e296 <_realloc_r+0x1e>

0800e2d6 <_sungetc_r>:
 800e2d6:	b538      	push	{r3, r4, r5, lr}
 800e2d8:	1c4b      	adds	r3, r1, #1
 800e2da:	4614      	mov	r4, r2
 800e2dc:	d103      	bne.n	800e2e6 <_sungetc_r+0x10>
 800e2de:	f04f 35ff 	mov.w	r5, #4294967295
 800e2e2:	4628      	mov	r0, r5
 800e2e4:	bd38      	pop	{r3, r4, r5, pc}
 800e2e6:	8993      	ldrh	r3, [r2, #12]
 800e2e8:	b2cd      	uxtb	r5, r1
 800e2ea:	f023 0320 	bic.w	r3, r3, #32
 800e2ee:	8193      	strh	r3, [r2, #12]
 800e2f0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e2f2:	6852      	ldr	r2, [r2, #4]
 800e2f4:	b18b      	cbz	r3, 800e31a <_sungetc_r+0x44>
 800e2f6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e2f8:	4293      	cmp	r3, r2
 800e2fa:	dd08      	ble.n	800e30e <_sungetc_r+0x38>
 800e2fc:	6823      	ldr	r3, [r4, #0]
 800e2fe:	1e5a      	subs	r2, r3, #1
 800e300:	6022      	str	r2, [r4, #0]
 800e302:	f803 5c01 	strb.w	r5, [r3, #-1]
 800e306:	6863      	ldr	r3, [r4, #4]
 800e308:	3301      	adds	r3, #1
 800e30a:	6063      	str	r3, [r4, #4]
 800e30c:	e7e9      	b.n	800e2e2 <_sungetc_r+0xc>
 800e30e:	4621      	mov	r1, r4
 800e310:	f000 fb96 	bl	800ea40 <__submore>
 800e314:	2800      	cmp	r0, #0
 800e316:	d0f1      	beq.n	800e2fc <_sungetc_r+0x26>
 800e318:	e7e1      	b.n	800e2de <_sungetc_r+0x8>
 800e31a:	6921      	ldr	r1, [r4, #16]
 800e31c:	6823      	ldr	r3, [r4, #0]
 800e31e:	b151      	cbz	r1, 800e336 <_sungetc_r+0x60>
 800e320:	4299      	cmp	r1, r3
 800e322:	d208      	bcs.n	800e336 <_sungetc_r+0x60>
 800e324:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800e328:	42a9      	cmp	r1, r5
 800e32a:	d104      	bne.n	800e336 <_sungetc_r+0x60>
 800e32c:	3b01      	subs	r3, #1
 800e32e:	3201      	adds	r2, #1
 800e330:	6023      	str	r3, [r4, #0]
 800e332:	6062      	str	r2, [r4, #4]
 800e334:	e7d5      	b.n	800e2e2 <_sungetc_r+0xc>
 800e336:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800e33a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e33e:	6363      	str	r3, [r4, #52]	; 0x34
 800e340:	2303      	movs	r3, #3
 800e342:	63a3      	str	r3, [r4, #56]	; 0x38
 800e344:	4623      	mov	r3, r4
 800e346:	f803 5f46 	strb.w	r5, [r3, #70]!
 800e34a:	6023      	str	r3, [r4, #0]
 800e34c:	2301      	movs	r3, #1
 800e34e:	e7dc      	b.n	800e30a <_sungetc_r+0x34>

0800e350 <__ssrefill_r>:
 800e350:	b510      	push	{r4, lr}
 800e352:	460c      	mov	r4, r1
 800e354:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800e356:	b169      	cbz	r1, 800e374 <__ssrefill_r+0x24>
 800e358:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e35c:	4299      	cmp	r1, r3
 800e35e:	d001      	beq.n	800e364 <__ssrefill_r+0x14>
 800e360:	f7fe f972 	bl	800c648 <_free_r>
 800e364:	2000      	movs	r0, #0
 800e366:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e368:	6360      	str	r0, [r4, #52]	; 0x34
 800e36a:	6063      	str	r3, [r4, #4]
 800e36c:	b113      	cbz	r3, 800e374 <__ssrefill_r+0x24>
 800e36e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e370:	6023      	str	r3, [r4, #0]
 800e372:	bd10      	pop	{r4, pc}
 800e374:	6923      	ldr	r3, [r4, #16]
 800e376:	f04f 30ff 	mov.w	r0, #4294967295
 800e37a:	6023      	str	r3, [r4, #0]
 800e37c:	2300      	movs	r3, #0
 800e37e:	6063      	str	r3, [r4, #4]
 800e380:	89a3      	ldrh	r3, [r4, #12]
 800e382:	f043 0320 	orr.w	r3, r3, #32
 800e386:	81a3      	strh	r3, [r4, #12]
 800e388:	e7f3      	b.n	800e372 <__ssrefill_r+0x22>
	...

0800e38c <__ssvfiscanf_r>:
 800e38c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e390:	460c      	mov	r4, r1
 800e392:	2100      	movs	r1, #0
 800e394:	4606      	mov	r6, r0
 800e396:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800e39a:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800e39e:	49a7      	ldr	r1, [pc, #668]	; (800e63c <__ssvfiscanf_r+0x2b0>)
 800e3a0:	f10d 0804 	add.w	r8, sp, #4
 800e3a4:	91a0      	str	r1, [sp, #640]	; 0x280
 800e3a6:	49a6      	ldr	r1, [pc, #664]	; (800e640 <__ssvfiscanf_r+0x2b4>)
 800e3a8:	4fa6      	ldr	r7, [pc, #664]	; (800e644 <__ssvfiscanf_r+0x2b8>)
 800e3aa:	f8df 929c 	ldr.w	r9, [pc, #668]	; 800e648 <__ssvfiscanf_r+0x2bc>
 800e3ae:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800e3b2:	91a1      	str	r1, [sp, #644]	; 0x284
 800e3b4:	9300      	str	r3, [sp, #0]
 800e3b6:	7813      	ldrb	r3, [r2, #0]
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	f000 815c 	beq.w	800e676 <__ssvfiscanf_r+0x2ea>
 800e3be:	5dd9      	ldrb	r1, [r3, r7]
 800e3c0:	1c55      	adds	r5, r2, #1
 800e3c2:	f011 0108 	ands.w	r1, r1, #8
 800e3c6:	d019      	beq.n	800e3fc <__ssvfiscanf_r+0x70>
 800e3c8:	6863      	ldr	r3, [r4, #4]
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	dd0f      	ble.n	800e3ee <__ssvfiscanf_r+0x62>
 800e3ce:	6823      	ldr	r3, [r4, #0]
 800e3d0:	781a      	ldrb	r2, [r3, #0]
 800e3d2:	5cba      	ldrb	r2, [r7, r2]
 800e3d4:	0712      	lsls	r2, r2, #28
 800e3d6:	d401      	bmi.n	800e3dc <__ssvfiscanf_r+0x50>
 800e3d8:	462a      	mov	r2, r5
 800e3da:	e7ec      	b.n	800e3b6 <__ssvfiscanf_r+0x2a>
 800e3dc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800e3de:	3301      	adds	r3, #1
 800e3e0:	3201      	adds	r2, #1
 800e3e2:	9245      	str	r2, [sp, #276]	; 0x114
 800e3e4:	6862      	ldr	r2, [r4, #4]
 800e3e6:	6023      	str	r3, [r4, #0]
 800e3e8:	3a01      	subs	r2, #1
 800e3ea:	6062      	str	r2, [r4, #4]
 800e3ec:	e7ec      	b.n	800e3c8 <__ssvfiscanf_r+0x3c>
 800e3ee:	4621      	mov	r1, r4
 800e3f0:	4630      	mov	r0, r6
 800e3f2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e3f4:	4798      	blx	r3
 800e3f6:	2800      	cmp	r0, #0
 800e3f8:	d0e9      	beq.n	800e3ce <__ssvfiscanf_r+0x42>
 800e3fa:	e7ed      	b.n	800e3d8 <__ssvfiscanf_r+0x4c>
 800e3fc:	2b25      	cmp	r3, #37	; 0x25
 800e3fe:	d012      	beq.n	800e426 <__ssvfiscanf_r+0x9a>
 800e400:	469a      	mov	sl, r3
 800e402:	6863      	ldr	r3, [r4, #4]
 800e404:	2b00      	cmp	r3, #0
 800e406:	f340 8094 	ble.w	800e532 <__ssvfiscanf_r+0x1a6>
 800e40a:	6822      	ldr	r2, [r4, #0]
 800e40c:	7813      	ldrb	r3, [r2, #0]
 800e40e:	4553      	cmp	r3, sl
 800e410:	f040 8131 	bne.w	800e676 <__ssvfiscanf_r+0x2ea>
 800e414:	6863      	ldr	r3, [r4, #4]
 800e416:	3201      	adds	r2, #1
 800e418:	3b01      	subs	r3, #1
 800e41a:	6063      	str	r3, [r4, #4]
 800e41c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800e41e:	6022      	str	r2, [r4, #0]
 800e420:	3301      	adds	r3, #1
 800e422:	9345      	str	r3, [sp, #276]	; 0x114
 800e424:	e7d8      	b.n	800e3d8 <__ssvfiscanf_r+0x4c>
 800e426:	9141      	str	r1, [sp, #260]	; 0x104
 800e428:	9143      	str	r1, [sp, #268]	; 0x10c
 800e42a:	7853      	ldrb	r3, [r2, #1]
 800e42c:	2b2a      	cmp	r3, #42	; 0x2a
 800e42e:	bf04      	itt	eq
 800e430:	2310      	moveq	r3, #16
 800e432:	1c95      	addeq	r5, r2, #2
 800e434:	f04f 020a 	mov.w	r2, #10
 800e438:	bf08      	it	eq
 800e43a:	9341      	streq	r3, [sp, #260]	; 0x104
 800e43c:	46aa      	mov	sl, r5
 800e43e:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800e442:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800e446:	2b09      	cmp	r3, #9
 800e448:	d91d      	bls.n	800e486 <__ssvfiscanf_r+0xfa>
 800e44a:	2203      	movs	r2, #3
 800e44c:	487e      	ldr	r0, [pc, #504]	; (800e648 <__ssvfiscanf_r+0x2bc>)
 800e44e:	f7ff feeb 	bl	800e228 <memchr>
 800e452:	b140      	cbz	r0, 800e466 <__ssvfiscanf_r+0xda>
 800e454:	2301      	movs	r3, #1
 800e456:	4655      	mov	r5, sl
 800e458:	eba0 0009 	sub.w	r0, r0, r9
 800e45c:	fa03 f000 	lsl.w	r0, r3, r0
 800e460:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e462:	4318      	orrs	r0, r3
 800e464:	9041      	str	r0, [sp, #260]	; 0x104
 800e466:	f815 3b01 	ldrb.w	r3, [r5], #1
 800e46a:	2b78      	cmp	r3, #120	; 0x78
 800e46c:	d806      	bhi.n	800e47c <__ssvfiscanf_r+0xf0>
 800e46e:	2b57      	cmp	r3, #87	; 0x57
 800e470:	d810      	bhi.n	800e494 <__ssvfiscanf_r+0x108>
 800e472:	2b25      	cmp	r3, #37	; 0x25
 800e474:	d0c4      	beq.n	800e400 <__ssvfiscanf_r+0x74>
 800e476:	d857      	bhi.n	800e528 <__ssvfiscanf_r+0x19c>
 800e478:	2b00      	cmp	r3, #0
 800e47a:	d065      	beq.n	800e548 <__ssvfiscanf_r+0x1bc>
 800e47c:	2303      	movs	r3, #3
 800e47e:	9347      	str	r3, [sp, #284]	; 0x11c
 800e480:	230a      	movs	r3, #10
 800e482:	9342      	str	r3, [sp, #264]	; 0x108
 800e484:	e072      	b.n	800e56c <__ssvfiscanf_r+0x1e0>
 800e486:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800e488:	4655      	mov	r5, sl
 800e48a:	fb02 1103 	mla	r1, r2, r3, r1
 800e48e:	3930      	subs	r1, #48	; 0x30
 800e490:	9143      	str	r1, [sp, #268]	; 0x10c
 800e492:	e7d3      	b.n	800e43c <__ssvfiscanf_r+0xb0>
 800e494:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800e498:	2a20      	cmp	r2, #32
 800e49a:	d8ef      	bhi.n	800e47c <__ssvfiscanf_r+0xf0>
 800e49c:	a101      	add	r1, pc, #4	; (adr r1, 800e4a4 <__ssvfiscanf_r+0x118>)
 800e49e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800e4a2:	bf00      	nop
 800e4a4:	0800e557 	.word	0x0800e557
 800e4a8:	0800e47d 	.word	0x0800e47d
 800e4ac:	0800e47d 	.word	0x0800e47d
 800e4b0:	0800e5b5 	.word	0x0800e5b5
 800e4b4:	0800e47d 	.word	0x0800e47d
 800e4b8:	0800e47d 	.word	0x0800e47d
 800e4bc:	0800e47d 	.word	0x0800e47d
 800e4c0:	0800e47d 	.word	0x0800e47d
 800e4c4:	0800e47d 	.word	0x0800e47d
 800e4c8:	0800e47d 	.word	0x0800e47d
 800e4cc:	0800e47d 	.word	0x0800e47d
 800e4d0:	0800e5cb 	.word	0x0800e5cb
 800e4d4:	0800e5a1 	.word	0x0800e5a1
 800e4d8:	0800e52f 	.word	0x0800e52f
 800e4dc:	0800e52f 	.word	0x0800e52f
 800e4e0:	0800e52f 	.word	0x0800e52f
 800e4e4:	0800e47d 	.word	0x0800e47d
 800e4e8:	0800e5a5 	.word	0x0800e5a5
 800e4ec:	0800e47d 	.word	0x0800e47d
 800e4f0:	0800e47d 	.word	0x0800e47d
 800e4f4:	0800e47d 	.word	0x0800e47d
 800e4f8:	0800e47d 	.word	0x0800e47d
 800e4fc:	0800e5db 	.word	0x0800e5db
 800e500:	0800e5ad 	.word	0x0800e5ad
 800e504:	0800e54f 	.word	0x0800e54f
 800e508:	0800e47d 	.word	0x0800e47d
 800e50c:	0800e47d 	.word	0x0800e47d
 800e510:	0800e5d7 	.word	0x0800e5d7
 800e514:	0800e47d 	.word	0x0800e47d
 800e518:	0800e5a1 	.word	0x0800e5a1
 800e51c:	0800e47d 	.word	0x0800e47d
 800e520:	0800e47d 	.word	0x0800e47d
 800e524:	0800e557 	.word	0x0800e557
 800e528:	3b45      	subs	r3, #69	; 0x45
 800e52a:	2b02      	cmp	r3, #2
 800e52c:	d8a6      	bhi.n	800e47c <__ssvfiscanf_r+0xf0>
 800e52e:	2305      	movs	r3, #5
 800e530:	e01b      	b.n	800e56a <__ssvfiscanf_r+0x1de>
 800e532:	4621      	mov	r1, r4
 800e534:	4630      	mov	r0, r6
 800e536:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e538:	4798      	blx	r3
 800e53a:	2800      	cmp	r0, #0
 800e53c:	f43f af65 	beq.w	800e40a <__ssvfiscanf_r+0x7e>
 800e540:	9844      	ldr	r0, [sp, #272]	; 0x110
 800e542:	2800      	cmp	r0, #0
 800e544:	f040 808d 	bne.w	800e662 <__ssvfiscanf_r+0x2d6>
 800e548:	f04f 30ff 	mov.w	r0, #4294967295
 800e54c:	e08f      	b.n	800e66e <__ssvfiscanf_r+0x2e2>
 800e54e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800e550:	f042 0220 	orr.w	r2, r2, #32
 800e554:	9241      	str	r2, [sp, #260]	; 0x104
 800e556:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800e558:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e55c:	9241      	str	r2, [sp, #260]	; 0x104
 800e55e:	2210      	movs	r2, #16
 800e560:	2b6f      	cmp	r3, #111	; 0x6f
 800e562:	bf34      	ite	cc
 800e564:	2303      	movcc	r3, #3
 800e566:	2304      	movcs	r3, #4
 800e568:	9242      	str	r2, [sp, #264]	; 0x108
 800e56a:	9347      	str	r3, [sp, #284]	; 0x11c
 800e56c:	6863      	ldr	r3, [r4, #4]
 800e56e:	2b00      	cmp	r3, #0
 800e570:	dd42      	ble.n	800e5f8 <__ssvfiscanf_r+0x26c>
 800e572:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e574:	0659      	lsls	r1, r3, #25
 800e576:	d404      	bmi.n	800e582 <__ssvfiscanf_r+0x1f6>
 800e578:	6823      	ldr	r3, [r4, #0]
 800e57a:	781a      	ldrb	r2, [r3, #0]
 800e57c:	5cba      	ldrb	r2, [r7, r2]
 800e57e:	0712      	lsls	r2, r2, #28
 800e580:	d441      	bmi.n	800e606 <__ssvfiscanf_r+0x27a>
 800e582:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800e584:	2b02      	cmp	r3, #2
 800e586:	dc50      	bgt.n	800e62a <__ssvfiscanf_r+0x29e>
 800e588:	466b      	mov	r3, sp
 800e58a:	4622      	mov	r2, r4
 800e58c:	4630      	mov	r0, r6
 800e58e:	a941      	add	r1, sp, #260	; 0x104
 800e590:	f000 f876 	bl	800e680 <_scanf_chars>
 800e594:	2801      	cmp	r0, #1
 800e596:	d06e      	beq.n	800e676 <__ssvfiscanf_r+0x2ea>
 800e598:	2802      	cmp	r0, #2
 800e59a:	f47f af1d 	bne.w	800e3d8 <__ssvfiscanf_r+0x4c>
 800e59e:	e7cf      	b.n	800e540 <__ssvfiscanf_r+0x1b4>
 800e5a0:	220a      	movs	r2, #10
 800e5a2:	e7dd      	b.n	800e560 <__ssvfiscanf_r+0x1d4>
 800e5a4:	2300      	movs	r3, #0
 800e5a6:	9342      	str	r3, [sp, #264]	; 0x108
 800e5a8:	2303      	movs	r3, #3
 800e5aa:	e7de      	b.n	800e56a <__ssvfiscanf_r+0x1de>
 800e5ac:	2308      	movs	r3, #8
 800e5ae:	9342      	str	r3, [sp, #264]	; 0x108
 800e5b0:	2304      	movs	r3, #4
 800e5b2:	e7da      	b.n	800e56a <__ssvfiscanf_r+0x1de>
 800e5b4:	4629      	mov	r1, r5
 800e5b6:	4640      	mov	r0, r8
 800e5b8:	f000 f9c6 	bl	800e948 <__sccl>
 800e5bc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e5be:	4605      	mov	r5, r0
 800e5c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e5c4:	9341      	str	r3, [sp, #260]	; 0x104
 800e5c6:	2301      	movs	r3, #1
 800e5c8:	e7cf      	b.n	800e56a <__ssvfiscanf_r+0x1de>
 800e5ca:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e5cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e5d0:	9341      	str	r3, [sp, #260]	; 0x104
 800e5d2:	2300      	movs	r3, #0
 800e5d4:	e7c9      	b.n	800e56a <__ssvfiscanf_r+0x1de>
 800e5d6:	2302      	movs	r3, #2
 800e5d8:	e7c7      	b.n	800e56a <__ssvfiscanf_r+0x1de>
 800e5da:	9841      	ldr	r0, [sp, #260]	; 0x104
 800e5dc:	06c3      	lsls	r3, r0, #27
 800e5de:	f53f aefb 	bmi.w	800e3d8 <__ssvfiscanf_r+0x4c>
 800e5e2:	9b00      	ldr	r3, [sp, #0]
 800e5e4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800e5e6:	1d19      	adds	r1, r3, #4
 800e5e8:	9100      	str	r1, [sp, #0]
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	f010 0f01 	tst.w	r0, #1
 800e5f0:	bf14      	ite	ne
 800e5f2:	801a      	strhne	r2, [r3, #0]
 800e5f4:	601a      	streq	r2, [r3, #0]
 800e5f6:	e6ef      	b.n	800e3d8 <__ssvfiscanf_r+0x4c>
 800e5f8:	4621      	mov	r1, r4
 800e5fa:	4630      	mov	r0, r6
 800e5fc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e5fe:	4798      	blx	r3
 800e600:	2800      	cmp	r0, #0
 800e602:	d0b6      	beq.n	800e572 <__ssvfiscanf_r+0x1e6>
 800e604:	e79c      	b.n	800e540 <__ssvfiscanf_r+0x1b4>
 800e606:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800e608:	3201      	adds	r2, #1
 800e60a:	9245      	str	r2, [sp, #276]	; 0x114
 800e60c:	6862      	ldr	r2, [r4, #4]
 800e60e:	3a01      	subs	r2, #1
 800e610:	2a00      	cmp	r2, #0
 800e612:	6062      	str	r2, [r4, #4]
 800e614:	dd02      	ble.n	800e61c <__ssvfiscanf_r+0x290>
 800e616:	3301      	adds	r3, #1
 800e618:	6023      	str	r3, [r4, #0]
 800e61a:	e7ad      	b.n	800e578 <__ssvfiscanf_r+0x1ec>
 800e61c:	4621      	mov	r1, r4
 800e61e:	4630      	mov	r0, r6
 800e620:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e622:	4798      	blx	r3
 800e624:	2800      	cmp	r0, #0
 800e626:	d0a7      	beq.n	800e578 <__ssvfiscanf_r+0x1ec>
 800e628:	e78a      	b.n	800e540 <__ssvfiscanf_r+0x1b4>
 800e62a:	2b04      	cmp	r3, #4
 800e62c:	dc0e      	bgt.n	800e64c <__ssvfiscanf_r+0x2c0>
 800e62e:	466b      	mov	r3, sp
 800e630:	4622      	mov	r2, r4
 800e632:	4630      	mov	r0, r6
 800e634:	a941      	add	r1, sp, #260	; 0x104
 800e636:	f000 f87d 	bl	800e734 <_scanf_i>
 800e63a:	e7ab      	b.n	800e594 <__ssvfiscanf_r+0x208>
 800e63c:	0800e2d7 	.word	0x0800e2d7
 800e640:	0800e351 	.word	0x0800e351
 800e644:	0800f626 	.word	0x0800f626
 800e648:	0800f72c 	.word	0x0800f72c
 800e64c:	4b0b      	ldr	r3, [pc, #44]	; (800e67c <__ssvfiscanf_r+0x2f0>)
 800e64e:	2b00      	cmp	r3, #0
 800e650:	f43f aec2 	beq.w	800e3d8 <__ssvfiscanf_r+0x4c>
 800e654:	466b      	mov	r3, sp
 800e656:	4622      	mov	r2, r4
 800e658:	4630      	mov	r0, r6
 800e65a:	a941      	add	r1, sp, #260	; 0x104
 800e65c:	f3af 8000 	nop.w
 800e660:	e798      	b.n	800e594 <__ssvfiscanf_r+0x208>
 800e662:	89a3      	ldrh	r3, [r4, #12]
 800e664:	f013 0f40 	tst.w	r3, #64	; 0x40
 800e668:	bf18      	it	ne
 800e66a:	f04f 30ff 	movne.w	r0, #4294967295
 800e66e:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800e672:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e676:	9844      	ldr	r0, [sp, #272]	; 0x110
 800e678:	e7f9      	b.n	800e66e <__ssvfiscanf_r+0x2e2>
 800e67a:	bf00      	nop
 800e67c:	00000000 	.word	0x00000000

0800e680 <_scanf_chars>:
 800e680:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e684:	4615      	mov	r5, r2
 800e686:	688a      	ldr	r2, [r1, #8]
 800e688:	4680      	mov	r8, r0
 800e68a:	460c      	mov	r4, r1
 800e68c:	b932      	cbnz	r2, 800e69c <_scanf_chars+0x1c>
 800e68e:	698a      	ldr	r2, [r1, #24]
 800e690:	2a00      	cmp	r2, #0
 800e692:	bf0c      	ite	eq
 800e694:	2201      	moveq	r2, #1
 800e696:	f04f 32ff 	movne.w	r2, #4294967295
 800e69a:	608a      	str	r2, [r1, #8]
 800e69c:	2700      	movs	r7, #0
 800e69e:	6822      	ldr	r2, [r4, #0]
 800e6a0:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800e730 <_scanf_chars+0xb0>
 800e6a4:	06d1      	lsls	r1, r2, #27
 800e6a6:	bf5f      	itttt	pl
 800e6a8:	681a      	ldrpl	r2, [r3, #0]
 800e6aa:	1d11      	addpl	r1, r2, #4
 800e6ac:	6019      	strpl	r1, [r3, #0]
 800e6ae:	6816      	ldrpl	r6, [r2, #0]
 800e6b0:	69a0      	ldr	r0, [r4, #24]
 800e6b2:	b188      	cbz	r0, 800e6d8 <_scanf_chars+0x58>
 800e6b4:	2801      	cmp	r0, #1
 800e6b6:	d107      	bne.n	800e6c8 <_scanf_chars+0x48>
 800e6b8:	682b      	ldr	r3, [r5, #0]
 800e6ba:	781a      	ldrb	r2, [r3, #0]
 800e6bc:	6963      	ldr	r3, [r4, #20]
 800e6be:	5c9b      	ldrb	r3, [r3, r2]
 800e6c0:	b953      	cbnz	r3, 800e6d8 <_scanf_chars+0x58>
 800e6c2:	2f00      	cmp	r7, #0
 800e6c4:	d031      	beq.n	800e72a <_scanf_chars+0xaa>
 800e6c6:	e022      	b.n	800e70e <_scanf_chars+0x8e>
 800e6c8:	2802      	cmp	r0, #2
 800e6ca:	d120      	bne.n	800e70e <_scanf_chars+0x8e>
 800e6cc:	682b      	ldr	r3, [r5, #0]
 800e6ce:	781b      	ldrb	r3, [r3, #0]
 800e6d0:	f813 3009 	ldrb.w	r3, [r3, r9]
 800e6d4:	071b      	lsls	r3, r3, #28
 800e6d6:	d41a      	bmi.n	800e70e <_scanf_chars+0x8e>
 800e6d8:	6823      	ldr	r3, [r4, #0]
 800e6da:	3701      	adds	r7, #1
 800e6dc:	06da      	lsls	r2, r3, #27
 800e6de:	bf5e      	ittt	pl
 800e6e0:	682b      	ldrpl	r3, [r5, #0]
 800e6e2:	781b      	ldrbpl	r3, [r3, #0]
 800e6e4:	f806 3b01 	strbpl.w	r3, [r6], #1
 800e6e8:	682a      	ldr	r2, [r5, #0]
 800e6ea:	686b      	ldr	r3, [r5, #4]
 800e6ec:	3201      	adds	r2, #1
 800e6ee:	602a      	str	r2, [r5, #0]
 800e6f0:	68a2      	ldr	r2, [r4, #8]
 800e6f2:	3b01      	subs	r3, #1
 800e6f4:	3a01      	subs	r2, #1
 800e6f6:	606b      	str	r3, [r5, #4]
 800e6f8:	60a2      	str	r2, [r4, #8]
 800e6fa:	b142      	cbz	r2, 800e70e <_scanf_chars+0x8e>
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	dcd7      	bgt.n	800e6b0 <_scanf_chars+0x30>
 800e700:	4629      	mov	r1, r5
 800e702:	4640      	mov	r0, r8
 800e704:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800e708:	4798      	blx	r3
 800e70a:	2800      	cmp	r0, #0
 800e70c:	d0d0      	beq.n	800e6b0 <_scanf_chars+0x30>
 800e70e:	6823      	ldr	r3, [r4, #0]
 800e710:	f013 0310 	ands.w	r3, r3, #16
 800e714:	d105      	bne.n	800e722 <_scanf_chars+0xa2>
 800e716:	68e2      	ldr	r2, [r4, #12]
 800e718:	3201      	adds	r2, #1
 800e71a:	60e2      	str	r2, [r4, #12]
 800e71c:	69a2      	ldr	r2, [r4, #24]
 800e71e:	b102      	cbz	r2, 800e722 <_scanf_chars+0xa2>
 800e720:	7033      	strb	r3, [r6, #0]
 800e722:	2000      	movs	r0, #0
 800e724:	6923      	ldr	r3, [r4, #16]
 800e726:	443b      	add	r3, r7
 800e728:	6123      	str	r3, [r4, #16]
 800e72a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e72e:	bf00      	nop
 800e730:	0800f626 	.word	0x0800f626

0800e734 <_scanf_i>:
 800e734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e738:	460c      	mov	r4, r1
 800e73a:	4698      	mov	r8, r3
 800e73c:	4b75      	ldr	r3, [pc, #468]	; (800e914 <_scanf_i+0x1e0>)
 800e73e:	b087      	sub	sp, #28
 800e740:	4682      	mov	sl, r0
 800e742:	4616      	mov	r6, r2
 800e744:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e748:	ab03      	add	r3, sp, #12
 800e74a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800e74e:	4b72      	ldr	r3, [pc, #456]	; (800e918 <_scanf_i+0x1e4>)
 800e750:	69a1      	ldr	r1, [r4, #24]
 800e752:	4a72      	ldr	r2, [pc, #456]	; (800e91c <_scanf_i+0x1e8>)
 800e754:	4627      	mov	r7, r4
 800e756:	2903      	cmp	r1, #3
 800e758:	bf18      	it	ne
 800e75a:	461a      	movne	r2, r3
 800e75c:	68a3      	ldr	r3, [r4, #8]
 800e75e:	9201      	str	r2, [sp, #4]
 800e760:	1e5a      	subs	r2, r3, #1
 800e762:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800e766:	bf81      	itttt	hi
 800e768:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800e76c:	eb03 0905 	addhi.w	r9, r3, r5
 800e770:	f240 135d 	movwhi	r3, #349	; 0x15d
 800e774:	60a3      	strhi	r3, [r4, #8]
 800e776:	f857 3b1c 	ldr.w	r3, [r7], #28
 800e77a:	bf98      	it	ls
 800e77c:	f04f 0900 	movls.w	r9, #0
 800e780:	463d      	mov	r5, r7
 800e782:	f04f 0b00 	mov.w	fp, #0
 800e786:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800e78a:	6023      	str	r3, [r4, #0]
 800e78c:	6831      	ldr	r1, [r6, #0]
 800e78e:	ab03      	add	r3, sp, #12
 800e790:	2202      	movs	r2, #2
 800e792:	7809      	ldrb	r1, [r1, #0]
 800e794:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800e798:	f7ff fd46 	bl	800e228 <memchr>
 800e79c:	b328      	cbz	r0, 800e7ea <_scanf_i+0xb6>
 800e79e:	f1bb 0f01 	cmp.w	fp, #1
 800e7a2:	d159      	bne.n	800e858 <_scanf_i+0x124>
 800e7a4:	6862      	ldr	r2, [r4, #4]
 800e7a6:	b92a      	cbnz	r2, 800e7b4 <_scanf_i+0x80>
 800e7a8:	2308      	movs	r3, #8
 800e7aa:	6822      	ldr	r2, [r4, #0]
 800e7ac:	6063      	str	r3, [r4, #4]
 800e7ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e7b2:	6022      	str	r2, [r4, #0]
 800e7b4:	6822      	ldr	r2, [r4, #0]
 800e7b6:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800e7ba:	6022      	str	r2, [r4, #0]
 800e7bc:	68a2      	ldr	r2, [r4, #8]
 800e7be:	1e51      	subs	r1, r2, #1
 800e7c0:	60a1      	str	r1, [r4, #8]
 800e7c2:	b192      	cbz	r2, 800e7ea <_scanf_i+0xb6>
 800e7c4:	6832      	ldr	r2, [r6, #0]
 800e7c6:	1c51      	adds	r1, r2, #1
 800e7c8:	6031      	str	r1, [r6, #0]
 800e7ca:	7812      	ldrb	r2, [r2, #0]
 800e7cc:	f805 2b01 	strb.w	r2, [r5], #1
 800e7d0:	6872      	ldr	r2, [r6, #4]
 800e7d2:	3a01      	subs	r2, #1
 800e7d4:	2a00      	cmp	r2, #0
 800e7d6:	6072      	str	r2, [r6, #4]
 800e7d8:	dc07      	bgt.n	800e7ea <_scanf_i+0xb6>
 800e7da:	4631      	mov	r1, r6
 800e7dc:	4650      	mov	r0, sl
 800e7de:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800e7e2:	4790      	blx	r2
 800e7e4:	2800      	cmp	r0, #0
 800e7e6:	f040 8085 	bne.w	800e8f4 <_scanf_i+0x1c0>
 800e7ea:	f10b 0b01 	add.w	fp, fp, #1
 800e7ee:	f1bb 0f03 	cmp.w	fp, #3
 800e7f2:	d1cb      	bne.n	800e78c <_scanf_i+0x58>
 800e7f4:	6863      	ldr	r3, [r4, #4]
 800e7f6:	b90b      	cbnz	r3, 800e7fc <_scanf_i+0xc8>
 800e7f8:	230a      	movs	r3, #10
 800e7fa:	6063      	str	r3, [r4, #4]
 800e7fc:	6863      	ldr	r3, [r4, #4]
 800e7fe:	4948      	ldr	r1, [pc, #288]	; (800e920 <_scanf_i+0x1ec>)
 800e800:	6960      	ldr	r0, [r4, #20]
 800e802:	1ac9      	subs	r1, r1, r3
 800e804:	f000 f8a0 	bl	800e948 <__sccl>
 800e808:	f04f 0b00 	mov.w	fp, #0
 800e80c:	68a3      	ldr	r3, [r4, #8]
 800e80e:	6822      	ldr	r2, [r4, #0]
 800e810:	2b00      	cmp	r3, #0
 800e812:	d03d      	beq.n	800e890 <_scanf_i+0x15c>
 800e814:	6831      	ldr	r1, [r6, #0]
 800e816:	6960      	ldr	r0, [r4, #20]
 800e818:	f891 c000 	ldrb.w	ip, [r1]
 800e81c:	f810 000c 	ldrb.w	r0, [r0, ip]
 800e820:	2800      	cmp	r0, #0
 800e822:	d035      	beq.n	800e890 <_scanf_i+0x15c>
 800e824:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800e828:	d124      	bne.n	800e874 <_scanf_i+0x140>
 800e82a:	0510      	lsls	r0, r2, #20
 800e82c:	d522      	bpl.n	800e874 <_scanf_i+0x140>
 800e82e:	f10b 0b01 	add.w	fp, fp, #1
 800e832:	f1b9 0f00 	cmp.w	r9, #0
 800e836:	d003      	beq.n	800e840 <_scanf_i+0x10c>
 800e838:	3301      	adds	r3, #1
 800e83a:	f109 39ff 	add.w	r9, r9, #4294967295
 800e83e:	60a3      	str	r3, [r4, #8]
 800e840:	6873      	ldr	r3, [r6, #4]
 800e842:	3b01      	subs	r3, #1
 800e844:	2b00      	cmp	r3, #0
 800e846:	6073      	str	r3, [r6, #4]
 800e848:	dd1b      	ble.n	800e882 <_scanf_i+0x14e>
 800e84a:	6833      	ldr	r3, [r6, #0]
 800e84c:	3301      	adds	r3, #1
 800e84e:	6033      	str	r3, [r6, #0]
 800e850:	68a3      	ldr	r3, [r4, #8]
 800e852:	3b01      	subs	r3, #1
 800e854:	60a3      	str	r3, [r4, #8]
 800e856:	e7d9      	b.n	800e80c <_scanf_i+0xd8>
 800e858:	f1bb 0f02 	cmp.w	fp, #2
 800e85c:	d1ae      	bne.n	800e7bc <_scanf_i+0x88>
 800e85e:	6822      	ldr	r2, [r4, #0]
 800e860:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800e864:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800e868:	d1bf      	bne.n	800e7ea <_scanf_i+0xb6>
 800e86a:	2310      	movs	r3, #16
 800e86c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e870:	6063      	str	r3, [r4, #4]
 800e872:	e7a2      	b.n	800e7ba <_scanf_i+0x86>
 800e874:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800e878:	6022      	str	r2, [r4, #0]
 800e87a:	780b      	ldrb	r3, [r1, #0]
 800e87c:	f805 3b01 	strb.w	r3, [r5], #1
 800e880:	e7de      	b.n	800e840 <_scanf_i+0x10c>
 800e882:	4631      	mov	r1, r6
 800e884:	4650      	mov	r0, sl
 800e886:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800e88a:	4798      	blx	r3
 800e88c:	2800      	cmp	r0, #0
 800e88e:	d0df      	beq.n	800e850 <_scanf_i+0x11c>
 800e890:	6823      	ldr	r3, [r4, #0]
 800e892:	05db      	lsls	r3, r3, #23
 800e894:	d50d      	bpl.n	800e8b2 <_scanf_i+0x17e>
 800e896:	42bd      	cmp	r5, r7
 800e898:	d909      	bls.n	800e8ae <_scanf_i+0x17a>
 800e89a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800e89e:	4632      	mov	r2, r6
 800e8a0:	4650      	mov	r0, sl
 800e8a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e8a6:	f105 39ff 	add.w	r9, r5, #4294967295
 800e8aa:	4798      	blx	r3
 800e8ac:	464d      	mov	r5, r9
 800e8ae:	42bd      	cmp	r5, r7
 800e8b0:	d02d      	beq.n	800e90e <_scanf_i+0x1da>
 800e8b2:	6822      	ldr	r2, [r4, #0]
 800e8b4:	f012 0210 	ands.w	r2, r2, #16
 800e8b8:	d113      	bne.n	800e8e2 <_scanf_i+0x1ae>
 800e8ba:	702a      	strb	r2, [r5, #0]
 800e8bc:	4639      	mov	r1, r7
 800e8be:	6863      	ldr	r3, [r4, #4]
 800e8c0:	4650      	mov	r0, sl
 800e8c2:	9e01      	ldr	r6, [sp, #4]
 800e8c4:	47b0      	blx	r6
 800e8c6:	6821      	ldr	r1, [r4, #0]
 800e8c8:	f8d8 3000 	ldr.w	r3, [r8]
 800e8cc:	f011 0f20 	tst.w	r1, #32
 800e8d0:	d013      	beq.n	800e8fa <_scanf_i+0x1c6>
 800e8d2:	1d1a      	adds	r2, r3, #4
 800e8d4:	f8c8 2000 	str.w	r2, [r8]
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	6018      	str	r0, [r3, #0]
 800e8dc:	68e3      	ldr	r3, [r4, #12]
 800e8de:	3301      	adds	r3, #1
 800e8e0:	60e3      	str	r3, [r4, #12]
 800e8e2:	2000      	movs	r0, #0
 800e8e4:	1bed      	subs	r5, r5, r7
 800e8e6:	44ab      	add	fp, r5
 800e8e8:	6925      	ldr	r5, [r4, #16]
 800e8ea:	445d      	add	r5, fp
 800e8ec:	6125      	str	r5, [r4, #16]
 800e8ee:	b007      	add	sp, #28
 800e8f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8f4:	f04f 0b00 	mov.w	fp, #0
 800e8f8:	e7ca      	b.n	800e890 <_scanf_i+0x15c>
 800e8fa:	1d1a      	adds	r2, r3, #4
 800e8fc:	f8c8 2000 	str.w	r2, [r8]
 800e900:	681b      	ldr	r3, [r3, #0]
 800e902:	f011 0f01 	tst.w	r1, #1
 800e906:	bf14      	ite	ne
 800e908:	8018      	strhne	r0, [r3, #0]
 800e90a:	6018      	streq	r0, [r3, #0]
 800e90c:	e7e6      	b.n	800e8dc <_scanf_i+0x1a8>
 800e90e:	2001      	movs	r0, #1
 800e910:	e7ed      	b.n	800e8ee <_scanf_i+0x1ba>
 800e912:	bf00      	nop
 800e914:	0800f3e0 	.word	0x0800f3e0
 800e918:	0800dbcd 	.word	0x0800dbcd
 800e91c:	0800ca11 	.word	0x0800ca11
 800e920:	0800f7d5 	.word	0x0800f7d5

0800e924 <_read_r>:
 800e924:	b538      	push	{r3, r4, r5, lr}
 800e926:	4604      	mov	r4, r0
 800e928:	4608      	mov	r0, r1
 800e92a:	4611      	mov	r1, r2
 800e92c:	2200      	movs	r2, #0
 800e92e:	4d05      	ldr	r5, [pc, #20]	; (800e944 <_read_r+0x20>)
 800e930:	602a      	str	r2, [r5, #0]
 800e932:	461a      	mov	r2, r3
 800e934:	f7f7 fe05 	bl	8006542 <_read>
 800e938:	1c43      	adds	r3, r0, #1
 800e93a:	d102      	bne.n	800e942 <_read_r+0x1e>
 800e93c:	682b      	ldr	r3, [r5, #0]
 800e93e:	b103      	cbz	r3, 800e942 <_read_r+0x1e>
 800e940:	6023      	str	r3, [r4, #0]
 800e942:	bd38      	pop	{r3, r4, r5, pc}
 800e944:	20002c38 	.word	0x20002c38

0800e948 <__sccl>:
 800e948:	b570      	push	{r4, r5, r6, lr}
 800e94a:	780b      	ldrb	r3, [r1, #0]
 800e94c:	4604      	mov	r4, r0
 800e94e:	2b5e      	cmp	r3, #94	; 0x5e
 800e950:	bf13      	iteet	ne
 800e952:	2200      	movne	r2, #0
 800e954:	2201      	moveq	r2, #1
 800e956:	784b      	ldrbeq	r3, [r1, #1]
 800e958:	1c48      	addne	r0, r1, #1
 800e95a:	bf08      	it	eq
 800e95c:	1c88      	addeq	r0, r1, #2
 800e95e:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800e962:	1e61      	subs	r1, r4, #1
 800e964:	f801 2f01 	strb.w	r2, [r1, #1]!
 800e968:	42a9      	cmp	r1, r5
 800e96a:	d1fb      	bne.n	800e964 <__sccl+0x1c>
 800e96c:	b90b      	cbnz	r3, 800e972 <__sccl+0x2a>
 800e96e:	3801      	subs	r0, #1
 800e970:	bd70      	pop	{r4, r5, r6, pc}
 800e972:	f082 0201 	eor.w	r2, r2, #1
 800e976:	4605      	mov	r5, r0
 800e978:	54e2      	strb	r2, [r4, r3]
 800e97a:	4628      	mov	r0, r5
 800e97c:	f810 1b01 	ldrb.w	r1, [r0], #1
 800e980:	292d      	cmp	r1, #45	; 0x2d
 800e982:	d006      	beq.n	800e992 <__sccl+0x4a>
 800e984:	295d      	cmp	r1, #93	; 0x5d
 800e986:	d0f3      	beq.n	800e970 <__sccl+0x28>
 800e988:	b909      	cbnz	r1, 800e98e <__sccl+0x46>
 800e98a:	4628      	mov	r0, r5
 800e98c:	e7f0      	b.n	800e970 <__sccl+0x28>
 800e98e:	460b      	mov	r3, r1
 800e990:	e7f1      	b.n	800e976 <__sccl+0x2e>
 800e992:	786e      	ldrb	r6, [r5, #1]
 800e994:	2e5d      	cmp	r6, #93	; 0x5d
 800e996:	d0fa      	beq.n	800e98e <__sccl+0x46>
 800e998:	42b3      	cmp	r3, r6
 800e99a:	dcf8      	bgt.n	800e98e <__sccl+0x46>
 800e99c:	4619      	mov	r1, r3
 800e99e:	3502      	adds	r5, #2
 800e9a0:	3101      	adds	r1, #1
 800e9a2:	428e      	cmp	r6, r1
 800e9a4:	5462      	strb	r2, [r4, r1]
 800e9a6:	dcfb      	bgt.n	800e9a0 <__sccl+0x58>
 800e9a8:	1af1      	subs	r1, r6, r3
 800e9aa:	3901      	subs	r1, #1
 800e9ac:	42b3      	cmp	r3, r6
 800e9ae:	bfa8      	it	ge
 800e9b0:	2100      	movge	r1, #0
 800e9b2:	1c58      	adds	r0, r3, #1
 800e9b4:	1843      	adds	r3, r0, r1
 800e9b6:	e7e0      	b.n	800e97a <__sccl+0x32>

0800e9b8 <_raise_r>:
 800e9b8:	291f      	cmp	r1, #31
 800e9ba:	b538      	push	{r3, r4, r5, lr}
 800e9bc:	4604      	mov	r4, r0
 800e9be:	460d      	mov	r5, r1
 800e9c0:	d904      	bls.n	800e9cc <_raise_r+0x14>
 800e9c2:	2316      	movs	r3, #22
 800e9c4:	6003      	str	r3, [r0, #0]
 800e9c6:	f04f 30ff 	mov.w	r0, #4294967295
 800e9ca:	bd38      	pop	{r3, r4, r5, pc}
 800e9cc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e9ce:	b112      	cbz	r2, 800e9d6 <_raise_r+0x1e>
 800e9d0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e9d4:	b94b      	cbnz	r3, 800e9ea <_raise_r+0x32>
 800e9d6:	4620      	mov	r0, r4
 800e9d8:	f000 f830 	bl	800ea3c <_getpid_r>
 800e9dc:	462a      	mov	r2, r5
 800e9de:	4601      	mov	r1, r0
 800e9e0:	4620      	mov	r0, r4
 800e9e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e9e6:	f000 b817 	b.w	800ea18 <_kill_r>
 800e9ea:	2b01      	cmp	r3, #1
 800e9ec:	d00a      	beq.n	800ea04 <_raise_r+0x4c>
 800e9ee:	1c59      	adds	r1, r3, #1
 800e9f0:	d103      	bne.n	800e9fa <_raise_r+0x42>
 800e9f2:	2316      	movs	r3, #22
 800e9f4:	6003      	str	r3, [r0, #0]
 800e9f6:	2001      	movs	r0, #1
 800e9f8:	e7e7      	b.n	800e9ca <_raise_r+0x12>
 800e9fa:	2400      	movs	r4, #0
 800e9fc:	4628      	mov	r0, r5
 800e9fe:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ea02:	4798      	blx	r3
 800ea04:	2000      	movs	r0, #0
 800ea06:	e7e0      	b.n	800e9ca <_raise_r+0x12>

0800ea08 <raise>:
 800ea08:	4b02      	ldr	r3, [pc, #8]	; (800ea14 <raise+0xc>)
 800ea0a:	4601      	mov	r1, r0
 800ea0c:	6818      	ldr	r0, [r3, #0]
 800ea0e:	f7ff bfd3 	b.w	800e9b8 <_raise_r>
 800ea12:	bf00      	nop
 800ea14:	200004e0 	.word	0x200004e0

0800ea18 <_kill_r>:
 800ea18:	b538      	push	{r3, r4, r5, lr}
 800ea1a:	2300      	movs	r3, #0
 800ea1c:	4d06      	ldr	r5, [pc, #24]	; (800ea38 <_kill_r+0x20>)
 800ea1e:	4604      	mov	r4, r0
 800ea20:	4608      	mov	r0, r1
 800ea22:	4611      	mov	r1, r2
 800ea24:	602b      	str	r3, [r5, #0]
 800ea26:	f7f7 fd72 	bl	800650e <_kill>
 800ea2a:	1c43      	adds	r3, r0, #1
 800ea2c:	d102      	bne.n	800ea34 <_kill_r+0x1c>
 800ea2e:	682b      	ldr	r3, [r5, #0]
 800ea30:	b103      	cbz	r3, 800ea34 <_kill_r+0x1c>
 800ea32:	6023      	str	r3, [r4, #0]
 800ea34:	bd38      	pop	{r3, r4, r5, pc}
 800ea36:	bf00      	nop
 800ea38:	20002c38 	.word	0x20002c38

0800ea3c <_getpid_r>:
 800ea3c:	f7f7 bd60 	b.w	8006500 <_getpid>

0800ea40 <__submore>:
 800ea40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea44:	460c      	mov	r4, r1
 800ea46:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800ea48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ea4c:	4299      	cmp	r1, r3
 800ea4e:	d11b      	bne.n	800ea88 <__submore+0x48>
 800ea50:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800ea54:	f7fd fe60 	bl	800c718 <_malloc_r>
 800ea58:	b918      	cbnz	r0, 800ea62 <__submore+0x22>
 800ea5a:	f04f 30ff 	mov.w	r0, #4294967295
 800ea5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ea66:	63a3      	str	r3, [r4, #56]	; 0x38
 800ea68:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800ea6c:	6360      	str	r0, [r4, #52]	; 0x34
 800ea6e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800ea72:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800ea76:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800ea7a:	7043      	strb	r3, [r0, #1]
 800ea7c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800ea80:	7003      	strb	r3, [r0, #0]
 800ea82:	6020      	str	r0, [r4, #0]
 800ea84:	2000      	movs	r0, #0
 800ea86:	e7ea      	b.n	800ea5e <__submore+0x1e>
 800ea88:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800ea8a:	0077      	lsls	r7, r6, #1
 800ea8c:	463a      	mov	r2, r7
 800ea8e:	f7ff fbf3 	bl	800e278 <_realloc_r>
 800ea92:	4605      	mov	r5, r0
 800ea94:	2800      	cmp	r0, #0
 800ea96:	d0e0      	beq.n	800ea5a <__submore+0x1a>
 800ea98:	eb00 0806 	add.w	r8, r0, r6
 800ea9c:	4601      	mov	r1, r0
 800ea9e:	4632      	mov	r2, r6
 800eaa0:	4640      	mov	r0, r8
 800eaa2:	f7fd fb49 	bl	800c138 <memcpy>
 800eaa6:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800eaaa:	f8c4 8000 	str.w	r8, [r4]
 800eaae:	e7e9      	b.n	800ea84 <__submore+0x44>

0800eab0 <_fstat_r>:
 800eab0:	b538      	push	{r3, r4, r5, lr}
 800eab2:	2300      	movs	r3, #0
 800eab4:	4d06      	ldr	r5, [pc, #24]	; (800ead0 <_fstat_r+0x20>)
 800eab6:	4604      	mov	r4, r0
 800eab8:	4608      	mov	r0, r1
 800eaba:	4611      	mov	r1, r2
 800eabc:	602b      	str	r3, [r5, #0]
 800eabe:	f7f7 fd84 	bl	80065ca <_fstat>
 800eac2:	1c43      	adds	r3, r0, #1
 800eac4:	d102      	bne.n	800eacc <_fstat_r+0x1c>
 800eac6:	682b      	ldr	r3, [r5, #0]
 800eac8:	b103      	cbz	r3, 800eacc <_fstat_r+0x1c>
 800eaca:	6023      	str	r3, [r4, #0]
 800eacc:	bd38      	pop	{r3, r4, r5, pc}
 800eace:	bf00      	nop
 800ead0:	20002c38 	.word	0x20002c38

0800ead4 <_isatty_r>:
 800ead4:	b538      	push	{r3, r4, r5, lr}
 800ead6:	2300      	movs	r3, #0
 800ead8:	4d05      	ldr	r5, [pc, #20]	; (800eaf0 <_isatty_r+0x1c>)
 800eada:	4604      	mov	r4, r0
 800eadc:	4608      	mov	r0, r1
 800eade:	602b      	str	r3, [r5, #0]
 800eae0:	f7f7 fd82 	bl	80065e8 <_isatty>
 800eae4:	1c43      	adds	r3, r0, #1
 800eae6:	d102      	bne.n	800eaee <_isatty_r+0x1a>
 800eae8:	682b      	ldr	r3, [r5, #0]
 800eaea:	b103      	cbz	r3, 800eaee <_isatty_r+0x1a>
 800eaec:	6023      	str	r3, [r4, #0]
 800eaee:	bd38      	pop	{r3, r4, r5, pc}
 800eaf0:	20002c38 	.word	0x20002c38

0800eaf4 <_malloc_usable_size_r>:
 800eaf4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eaf8:	1f18      	subs	r0, r3, #4
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	bfbc      	itt	lt
 800eafe:	580b      	ldrlt	r3, [r1, r0]
 800eb00:	18c0      	addlt	r0, r0, r3
 800eb02:	4770      	bx	lr

0800eb04 <_init>:
 800eb04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb06:	bf00      	nop
 800eb08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eb0a:	bc08      	pop	{r3}
 800eb0c:	469e      	mov	lr, r3
 800eb0e:	4770      	bx	lr

0800eb10 <_fini>:
 800eb10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb12:	bf00      	nop
 800eb14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eb16:	bc08      	pop	{r3}
 800eb18:	469e      	mov	lr, r3
 800eb1a:	4770      	bx	lr

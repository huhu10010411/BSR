
Station.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004db4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007b8  08004ec0  08004ec0  00014ec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005678  08005678  0002008c  2**0
                  CONTENTS
  4 .ARM          00000000  08005678  08005678  0002008c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005678  08005678  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005678  08005678  00015678  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800567c  0800567c  0001567c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08005680  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000eec  2000008c  0800570c  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000f78  0800570c  00020f78  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011555  00000000  00000000  000200b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000335f  00000000  00000000  0003160a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000df0  00000000  00000000  00034970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c90  00000000  00000000  00035760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a86a  00000000  00000000  000363f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000186b2  00000000  00000000  00050c5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b344  00000000  00000000  0006930c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f4650  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c5c  00000000  00000000  000f46a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000008c 	.word	0x2000008c
 8000128:	00000000 	.word	0x00000000
 800012c:	08004ea8 	.word	0x08004ea8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000090 	.word	0x20000090
 8000148:	08004ea8 	.word	0x08004ea8

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <initApp_MQTT>:
#include "main.h"
#include "Serial_log.h"
#include "stationCMD.h"

void initApp_MQTT(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af02      	add	r7, sp, #8
//	initSIM(__SIM_UART, __SIM_DMA_UART, __MY_SIM);
	init_MQTT(&mySIM);
 8000162:	4807      	ldr	r0, [pc, #28]	; (8000180 <initApp_MQTT+0x24>)
 8000164:	f000 fd3a 	bl	8000bdc <init_MQTT>

	SIM_sendCMD((uint8_t*)"ATE0",(uint8_t*)"OK", ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, 1000);
 8000168:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800016c:	9300      	str	r3, [sp, #0]
 800016e:	2301      	movs	r3, #1
 8000170:	2201      	movs	r2, #1
 8000172:	4904      	ldr	r1, [pc, #16]	; (8000184 <initApp_MQTT+0x28>)
 8000174:	4804      	ldr	r0, [pc, #16]	; (8000188 <initApp_MQTT+0x2c>)
 8000176:	f000 fa4f 	bl	8000618 <SIM_sendCMD>
}
 800017a:	bf00      	nop
 800017c:	46bd      	mov	sp, r7
 800017e:	bd80      	pop	{r7, pc}
 8000180:	200008f8 	.word	0x200008f8
 8000184:	08004ec0 	.word	0x08004ec0
 8000188:	08004ec4 	.word	0x08004ec4

0800018c <enableReceiveDMAtoIdle_CFG>:
	__SCFG_UART = huart;
	__SCFG_DMA_UART = hdma;
	enableReceiveDMAtoIdle_CFG();
}
void enableReceiveDMAtoIdle_CFG(void)
{
 800018c:	b580      	push	{r7, lr}
 800018e:	af00      	add	r7, sp, #0
	  HAL_UARTEx_ReceiveToIdle_DMA(__SCFG_UART, Rxbuff_CFG, Rx_SIZE_CFG);
 8000190:	4b09      	ldr	r3, [pc, #36]	; (80001b8 <enableReceiveDMAtoIdle_CFG+0x2c>)
 8000192:	681b      	ldr	r3, [r3, #0]
 8000194:	2214      	movs	r2, #20
 8000196:	4909      	ldr	r1, [pc, #36]	; (80001bc <enableReceiveDMAtoIdle_CFG+0x30>)
 8000198:	4618      	mov	r0, r3
 800019a:	f003 f9ce 	bl	800353a <HAL_UARTEx_ReceiveToIdle_DMA>
	  __HAL_DMA_DISABLE_IT(__SCFG_DMA_UART,DMA_IT_HT);
 800019e:	4b08      	ldr	r3, [pc, #32]	; (80001c0 <enableReceiveDMAtoIdle_CFG+0x34>)
 80001a0:	681b      	ldr	r3, [r3, #0]
 80001a2:	681b      	ldr	r3, [r3, #0]
 80001a4:	681a      	ldr	r2, [r3, #0]
 80001a6:	4b06      	ldr	r3, [pc, #24]	; (80001c0 <enableReceiveDMAtoIdle_CFG+0x34>)
 80001a8:	681b      	ldr	r3, [r3, #0]
 80001aa:	681b      	ldr	r3, [r3, #0]
 80001ac:	f022 0204 	bic.w	r2, r2, #4
 80001b0:	601a      	str	r2, [r3, #0]
}
 80001b2:	bf00      	nop
 80001b4:	bd80      	pop	{r7, pc}
 80001b6:	bf00      	nop
 80001b8:	200000a8 	.word	0x200000a8
 80001bc:	200000b0 	.word	0x200000b0
 80001c0:	200000ac 	.word	0x200000ac

080001c4 <Serial_CFG_Callback>:
void Serial_CFG_Callback(uint16_t Size)
{
 80001c4:	b580      	push	{r7, lr}
 80001c6:	b084      	sub	sp, #16
 80001c8:	af00      	add	r7, sp, #0
 80001ca:	4603      	mov	r3, r0
 80001cc:	80fb      	strh	r3, [r7, #6]

	oldPos_CFG = newPos_CFG;  // Update the last position before copying new data
 80001ce:	4b30      	ldr	r3, [pc, #192]	; (8000290 <Serial_CFG_Callback+0xcc>)
 80001d0:	881a      	ldrh	r2, [r3, #0]
 80001d2:	4b30      	ldr	r3, [pc, #192]	; (8000294 <Serial_CFG_Callback+0xd0>)
 80001d4:	801a      	strh	r2, [r3, #0]

	/* If the data in large and it is about to exceed the buffer size, we have to route it to the start of the buffer
	 * This is to maintain the circular buffer
	 * The old data in the main buffer will be overlapped
	 */
	if (oldPos_CFG+Size > Main_SIZE_CFG)  // If the current position + new data size is greater than the main buffer
 80001d6:	4b2f      	ldr	r3, [pc, #188]	; (8000294 <Serial_CFG_Callback+0xd0>)
 80001d8:	881b      	ldrh	r3, [r3, #0]
 80001da:	461a      	mov	r2, r3
 80001dc:	88fb      	ldrh	r3, [r7, #6]
 80001de:	4413      	add	r3, r2
 80001e0:	2b19      	cmp	r3, #25
 80001e2:	dd24      	ble.n	800022e <Serial_CFG_Callback+0x6a>
	{
		uint8_t datatocopy = Main_SIZE_CFG-oldPos_CFG;  // find out how much space is left in the main buffer
 80001e4:	4b2b      	ldr	r3, [pc, #172]	; (8000294 <Serial_CFG_Callback+0xd0>)
 80001e6:	881b      	ldrh	r3, [r3, #0]
 80001e8:	b2db      	uxtb	r3, r3
 80001ea:	f1c3 0319 	rsb	r3, r3, #25
 80001ee:	73fb      	strb	r3, [r7, #15]
		memcpy ((uint8_t *)Mainbuff_CFG+oldPos_CFG, (uint8_t *)Rxbuff_CFG, datatocopy);  // copy data in that remaining space
 80001f0:	4b28      	ldr	r3, [pc, #160]	; (8000294 <Serial_CFG_Callback+0xd0>)
 80001f2:	881b      	ldrh	r3, [r3, #0]
 80001f4:	461a      	mov	r2, r3
 80001f6:	4b28      	ldr	r3, [pc, #160]	; (8000298 <Serial_CFG_Callback+0xd4>)
 80001f8:	4413      	add	r3, r2
 80001fa:	7bfa      	ldrb	r2, [r7, #15]
 80001fc:	4927      	ldr	r1, [pc, #156]	; (800029c <Serial_CFG_Callback+0xd8>)
 80001fe:	4618      	mov	r0, r3
 8000200:	f004 f94a 	bl	8004498 <memcpy>

		oldPos_CFG = 0;  // point to the start of the buffer
 8000204:	4b23      	ldr	r3, [pc, #140]	; (8000294 <Serial_CFG_Callback+0xd0>)
 8000206:	2200      	movs	r2, #0
 8000208:	801a      	strh	r2, [r3, #0]
		memcpy ((uint8_t *)Mainbuff_CFG, (uint8_t *)Rxbuff_CFG+datatocopy, (Size-datatocopy));  // copy the remaining data
 800020a:	7bfb      	ldrb	r3, [r7, #15]
 800020c:	4a23      	ldr	r2, [pc, #140]	; (800029c <Serial_CFG_Callback+0xd8>)
 800020e:	1899      	adds	r1, r3, r2
 8000210:	88fa      	ldrh	r2, [r7, #6]
 8000212:	7bfb      	ldrb	r3, [r7, #15]
 8000214:	1ad3      	subs	r3, r2, r3
 8000216:	461a      	mov	r2, r3
 8000218:	481f      	ldr	r0, [pc, #124]	; (8000298 <Serial_CFG_Callback+0xd4>)
 800021a:	f004 f93d 	bl	8004498 <memcpy>
		newPos_CFG = (Size-datatocopy);  // update the position
 800021e:	7bfb      	ldrb	r3, [r7, #15]
 8000220:	b29b      	uxth	r3, r3
 8000222:	88fa      	ldrh	r2, [r7, #6]
 8000224:	1ad3      	subs	r3, r2, r3
 8000226:	b29a      	uxth	r2, r3
 8000228:	4b19      	ldr	r3, [pc, #100]	; (8000290 <Serial_CFG_Callback+0xcc>)
 800022a:	801a      	strh	r2, [r3, #0]
 800022c:	e010      	b.n	8000250 <Serial_CFG_Callback+0x8c>
	/* if the current position + new data size is less than the main buffer
	 * we will simply copy the data into the buffer and update the position
	 */
	else
	{
		memcpy ((uint8_t *)Mainbuff_CFG+oldPos_CFG, (uint8_t *)Rxbuff_CFG, Size);
 800022e:	4b19      	ldr	r3, [pc, #100]	; (8000294 <Serial_CFG_Callback+0xd0>)
 8000230:	881b      	ldrh	r3, [r3, #0]
 8000232:	461a      	mov	r2, r3
 8000234:	4b18      	ldr	r3, [pc, #96]	; (8000298 <Serial_CFG_Callback+0xd4>)
 8000236:	4413      	add	r3, r2
 8000238:	88fa      	ldrh	r2, [r7, #6]
 800023a:	4918      	ldr	r1, [pc, #96]	; (800029c <Serial_CFG_Callback+0xd8>)
 800023c:	4618      	mov	r0, r3
 800023e:	f004 f92b 	bl	8004498 <memcpy>
		newPos_CFG = Size+oldPos_CFG;
 8000242:	4b14      	ldr	r3, [pc, #80]	; (8000294 <Serial_CFG_Callback+0xd0>)
 8000244:	881a      	ldrh	r2, [r3, #0]
 8000246:	88fb      	ldrh	r3, [r7, #6]
 8000248:	4413      	add	r3, r2
 800024a:	b29a      	uxth	r2, r3
 800024c:	4b10      	ldr	r3, [pc, #64]	; (8000290 <Serial_CFG_Callback+0xcc>)
 800024e:	801a      	strh	r2, [r3, #0]

	/* Update the position of the Head
	 * If the current position + new size is less then the buffer size, Head will update normally
	 * Or else the head will be at the new position from the beginning
	 */
	if (head_CFG+Size < Main_SIZE_CFG) head_CFG = head_CFG+Size;
 8000250:	4b13      	ldr	r3, [pc, #76]	; (80002a0 <Serial_CFG_Callback+0xdc>)
 8000252:	781b      	ldrb	r3, [r3, #0]
 8000254:	461a      	mov	r2, r3
 8000256:	88fb      	ldrh	r3, [r7, #6]
 8000258:	4413      	add	r3, r2
 800025a:	2b18      	cmp	r3, #24
 800025c:	dc08      	bgt.n	8000270 <Serial_CFG_Callback+0xac>
 800025e:	88fb      	ldrh	r3, [r7, #6]
 8000260:	b2da      	uxtb	r2, r3
 8000262:	4b0f      	ldr	r3, [pc, #60]	; (80002a0 <Serial_CFG_Callback+0xdc>)
 8000264:	781b      	ldrb	r3, [r3, #0]
 8000266:	4413      	add	r3, r2
 8000268:	b2da      	uxtb	r2, r3
 800026a:	4b0d      	ldr	r3, [pc, #52]	; (80002a0 <Serial_CFG_Callback+0xdc>)
 800026c:	701a      	strb	r2, [r3, #0]
 800026e:	e009      	b.n	8000284 <Serial_CFG_Callback+0xc0>
	else head_CFG = head_CFG+Size - Main_SIZE_CFG;
 8000270:	88fb      	ldrh	r3, [r7, #6]
 8000272:	b2da      	uxtb	r2, r3
 8000274:	4b0a      	ldr	r3, [pc, #40]	; (80002a0 <Serial_CFG_Callback+0xdc>)
 8000276:	781b      	ldrb	r3, [r3, #0]
 8000278:	4413      	add	r3, r2
 800027a:	b2db      	uxtb	r3, r3
 800027c:	3b19      	subs	r3, #25
 800027e:	b2da      	uxtb	r2, r3
 8000280:	4b07      	ldr	r3, [pc, #28]	; (80002a0 <Serial_CFG_Callback+0xdc>)
 8000282:	701a      	strb	r2, [r3, #0]


	enableReceiveDMAtoIdle_CFG();
 8000284:	f7ff ff82 	bl	800018c <enableReceiveDMAtoIdle_CFG>
	/*
	 * Processing data
	 */

}
 8000288:	bf00      	nop
 800028a:	3710      	adds	r7, #16
 800028c:	46bd      	mov	sp, r7
 800028e:	bd80      	pop	{r7, pc}
 8000290:	200000e0 	.word	0x200000e0
 8000294:	200000de 	.word	0x200000de
 8000298:	200000c4 	.word	0x200000c4
 800029c:	200000b0 	.word	0x200000b0
 80002a0:	200000e2 	.word	0x200000e2

080002a4 <init_Serial_log>:
#define LOG_TIMEOUT		1000

UART_HandleTypeDef *__SERIAL_LOG_UART;

void init_Serial_log (UART_HandleTypeDef *huart)
{
 80002a4:	b480      	push	{r7}
 80002a6:	b083      	sub	sp, #12
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	6078      	str	r0, [r7, #4]
	__SERIAL_LOG_UART = huart;
 80002ac:	4a03      	ldr	r2, [pc, #12]	; (80002bc <init_Serial_log+0x18>)
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	6013      	str	r3, [r2, #0]
}
 80002b2:	bf00      	nop
 80002b4:	370c      	adds	r7, #12
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bc80      	pop	{r7}
 80002ba:	4770      	bx	lr
 80002bc:	200000e4 	.word	0x200000e4

080002c0 <Serial_log_string>:

void Serial_log_string(char *string)
{
 80002c0:	b590      	push	{r4, r7, lr}
 80002c2:	b083      	sub	sp, #12
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(__SERIAL_LOG_UART, (uint8_t*)string, strlen(string), LOG_TIMEOUT);
 80002c8:	4b08      	ldr	r3, [pc, #32]	; (80002ec <Serial_log_string+0x2c>)
 80002ca:	681c      	ldr	r4, [r3, #0]
 80002cc:	6878      	ldr	r0, [r7, #4]
 80002ce:	f7ff ff3d 	bl	800014c <strlen>
 80002d2:	4603      	mov	r3, r0
 80002d4:	b29a      	uxth	r2, r3
 80002d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002da:	6879      	ldr	r1, [r7, #4]
 80002dc:	4620      	mov	r0, r4
 80002de:	f003 f8a9 	bl	8003434 <HAL_UART_Transmit>

}
 80002e2:	bf00      	nop
 80002e4:	370c      	adds	r7, #12
 80002e6:	46bd      	mov	sp, r7
 80002e8:	bd90      	pop	{r4, r7, pc}
 80002ea:	bf00      	nop
 80002ec:	200000e4 	.word	0x200000e4

080002f0 <Serial_log_buffer>:

void Serial_log_buffer(uint8_t *buffer, uint16_t buffersize)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b082      	sub	sp, #8
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	6078      	str	r0, [r7, #4]
 80002f8:	460b      	mov	r3, r1
 80002fa:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(__SERIAL_LOG_UART, buffer, buffersize, LOG_TIMEOUT);
 80002fc:	4b05      	ldr	r3, [pc, #20]	; (8000314 <Serial_log_buffer+0x24>)
 80002fe:	6818      	ldr	r0, [r3, #0]
 8000300:	887a      	ldrh	r2, [r7, #2]
 8000302:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000306:	6879      	ldr	r1, [r7, #4]
 8000308:	f003 f894 	bl	8003434 <HAL_UART_Transmit>
}
 800030c:	bf00      	nop
 800030e:	3708      	adds	r7, #8
 8000310:	46bd      	mov	sp, r7
 8000312:	bd80      	pop	{r7, pc}
 8000314:	200000e4 	.word	0x200000e4

08000318 <initSIM>:
uint8_t newMQTTmsgReceiving=0;

uint8_t getSMS = 0;

void initSIM(UART_HandleTypeDef *huart, DMA_HandleTypeDef  *hdma , SIM_t *mySIM)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b084      	sub	sp, #16
 800031c:	af00      	add	r7, sp, #0
 800031e:	60f8      	str	r0, [r7, #12]
 8000320:	60b9      	str	r1, [r7, #8]
 8000322:	607a      	str	r2, [r7, #4]
	__SIM = mySIM;
 8000324:	4a07      	ldr	r2, [pc, #28]	; (8000344 <initSIM+0x2c>)
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	6013      	str	r3, [r2, #0]
	__SIM_UART = huart;
 800032a:	4a07      	ldr	r2, [pc, #28]	; (8000348 <initSIM+0x30>)
 800032c:	68fb      	ldr	r3, [r7, #12]
 800032e:	6013      	str	r3, [r2, #0]
	__SIM_DMA_UART = hdma;
 8000330:	4a06      	ldr	r2, [pc, #24]	; (800034c <initSIM+0x34>)
 8000332:	68bb      	ldr	r3, [r7, #8]
 8000334:	6013      	str	r3, [r2, #0]
	enableReceiveDMAtoIdle_SIM();
 8000336:	f000 f80b 	bl	8000350 <enableReceiveDMAtoIdle_SIM>
//	SIM_sendCMD((uint8_t*)"ATE0",(uint8_t*)"OK", ENABLE_SIM_CHECKRES, ENABLE_MARKASREAD, 1000);
}
 800033a:	bf00      	nop
 800033c:	3710      	adds	r7, #16
 800033e:	46bd      	mov	sp, r7
 8000340:	bd80      	pop	{r7, pc}
 8000342:	bf00      	nop
 8000344:	200000f0 	.word	0x200000f0
 8000348:	200000e8 	.word	0x200000e8
 800034c:	200000ec 	.word	0x200000ec

08000350 <enableReceiveDMAtoIdle_SIM>:
void enableReceiveDMAtoIdle_SIM(void)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	af00      	add	r7, sp, #0
	  HAL_UARTEx_ReceiveToIdle_DMA(__SIM_UART, SIMRxbuff, SIM_RXBUFF_SIZE);
 8000354:	4b09      	ldr	r3, [pc, #36]	; (800037c <enableReceiveDMAtoIdle_SIM+0x2c>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	f44f 7280 	mov.w	r2, #256	; 0x100
 800035c:	4908      	ldr	r1, [pc, #32]	; (8000380 <enableReceiveDMAtoIdle_SIM+0x30>)
 800035e:	4618      	mov	r0, r3
 8000360:	f003 f8eb 	bl	800353a <HAL_UARTEx_ReceiveToIdle_DMA>
	  __HAL_DMA_DISABLE_IT(__SIM_DMA_UART,DMA_IT_HT);
 8000364:	4b07      	ldr	r3, [pc, #28]	; (8000384 <enableReceiveDMAtoIdle_SIM+0x34>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	681a      	ldr	r2, [r3, #0]
 800036c:	4b05      	ldr	r3, [pc, #20]	; (8000384 <enableReceiveDMAtoIdle_SIM+0x34>)
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	f022 0204 	bic.w	r2, r2, #4
 8000376:	601a      	str	r2, [r3, #0]
}
 8000378:	bf00      	nop
 800037a:	bd80      	pop	{r7, pc}
 800037c:	200000e8 	.word	0x200000e8
 8000380:	200002fc 	.word	0x200002fc
 8000384:	200000ec 	.word	0x200000ec

08000388 <isWordinBuff>:
 *  			function return the pointer point to the first element
 *  			of "word" in "databuff"
 *  		else return NULL
 */
uint8_t* isWordinBuff(uint8_t *databuff,uint16_t buff_size, uint8_t *word)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b086      	sub	sp, #24
 800038c:	af00      	add	r7, sp, #0
 800038e:	60f8      	str	r0, [r7, #12]
 8000390:	460b      	mov	r3, r1
 8000392:	607a      	str	r2, [r7, #4]
 8000394:	817b      	strh	r3, [r7, #10]
	uint8_t wordlen = strlen((char*)word);
 8000396:	6878      	ldr	r0, [r7, #4]
 8000398:	f7ff fed8 	bl	800014c <strlen>
 800039c:	4603      	mov	r3, r0
 800039e:	757b      	strb	r3, [r7, #21]
	for (uint16_t i = 0; i< buff_size - wordlen; i++)
 80003a0:	2300      	movs	r3, #0
 80003a2:	82fb      	strh	r3, [r7, #22]
 80003a4:	e011      	b.n	80003ca <isWordinBuff+0x42>
	{
		if (!memcmp(databuff +i,word,wordlen))
 80003a6:	8afb      	ldrh	r3, [r7, #22]
 80003a8:	68fa      	ldr	r2, [r7, #12]
 80003aa:	4413      	add	r3, r2
 80003ac:	7d7a      	ldrb	r2, [r7, #21]
 80003ae:	6879      	ldr	r1, [r7, #4]
 80003b0:	4618      	mov	r0, r3
 80003b2:	f004 f861 	bl	8004478 <memcmp>
 80003b6:	4603      	mov	r3, r0
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d103      	bne.n	80003c4 <isWordinBuff+0x3c>
		{
			return databuff+ i;
 80003bc:	8afb      	ldrh	r3, [r7, #22]
 80003be:	68fa      	ldr	r2, [r7, #12]
 80003c0:	4413      	add	r3, r2
 80003c2:	e009      	b.n	80003d8 <isWordinBuff+0x50>
	for (uint16_t i = 0; i< buff_size - wordlen; i++)
 80003c4:	8afb      	ldrh	r3, [r7, #22]
 80003c6:	3301      	adds	r3, #1
 80003c8:	82fb      	strh	r3, [r7, #22]
 80003ca:	8afa      	ldrh	r2, [r7, #22]
 80003cc:	8979      	ldrh	r1, [r7, #10]
 80003ce:	7d7b      	ldrb	r3, [r7, #21]
 80003d0:	1acb      	subs	r3, r1, r3
 80003d2:	429a      	cmp	r2, r3
 80003d4:	dbe7      	blt.n	80003a6 <isWordinBuff+0x1e>
		}
	}
	return NULL;
 80003d6:	2300      	movs	r3, #0
}
 80003d8:	4618      	mov	r0, r3
 80003da:	3718      	adds	r7, #24
 80003dc:	46bd      	mov	sp, r7
 80003de:	bd80      	pop	{r7, pc}

080003e0 <cpyBuff2Buff>:
uint16_t cpyBuff2Buff(uint8_t *Destbuff, uint8_t *SourceBuff,uint16_t Sourcebuff_maxsize, uint16_t head, uint16_t tail)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b086      	sub	sp, #24
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	60f8      	str	r0, [r7, #12]
 80003e8:	60b9      	str	r1, [r7, #8]
 80003ea:	4611      	mov	r1, r2
 80003ec:	461a      	mov	r2, r3
 80003ee:	460b      	mov	r3, r1
 80003f0:	80fb      	strh	r3, [r7, #6]
 80003f2:	4613      	mov	r3, r2
 80003f4:	80bb      	strh	r3, [r7, #4]
	uint16_t size = 0;
 80003f6:	2300      	movs	r3, #0
 80003f8:	82fb      	strh	r3, [r7, #22]
	if (head == tail )
 80003fa:	88ba      	ldrh	r2, [r7, #4]
 80003fc:	8c3b      	ldrh	r3, [r7, #32]
 80003fe:	429a      	cmp	r2, r3
 8000400:	d101      	bne.n	8000406 <cpyBuff2Buff+0x26>
	{
		return 0;
 8000402:	2300      	movs	r3, #0
 8000404:	e02c      	b.n	8000460 <cpyBuff2Buff+0x80>
	}
	else if (head > tail)
 8000406:	88ba      	ldrh	r2, [r7, #4]
 8000408:	8c3b      	ldrh	r3, [r7, #32]
 800040a:	429a      	cmp	r2, r3
 800040c:	d90c      	bls.n	8000428 <cpyBuff2Buff+0x48>
	{
		size = head -tail;
 800040e:	88ba      	ldrh	r2, [r7, #4]
 8000410:	8c3b      	ldrh	r3, [r7, #32]
 8000412:	1ad3      	subs	r3, r2, r3
 8000414:	82fb      	strh	r3, [r7, #22]
		memcpy(Destbuff, SourceBuff+tail, size);
 8000416:	8c3b      	ldrh	r3, [r7, #32]
 8000418:	68ba      	ldr	r2, [r7, #8]
 800041a:	4413      	add	r3, r2
 800041c:	8afa      	ldrh	r2, [r7, #22]
 800041e:	4619      	mov	r1, r3
 8000420:	68f8      	ldr	r0, [r7, #12]
 8000422:	f004 f839 	bl	8004498 <memcpy>
 8000426:	e01a      	b.n	800045e <cpyBuff2Buff+0x7e>
	}
	else
	{
		size = Sourcebuff_maxsize - tail + head;
 8000428:	88fa      	ldrh	r2, [r7, #6]
 800042a:	8c3b      	ldrh	r3, [r7, #32]
 800042c:	1ad3      	subs	r3, r2, r3
 800042e:	b29a      	uxth	r2, r3
 8000430:	88bb      	ldrh	r3, [r7, #4]
 8000432:	4413      	add	r3, r2
 8000434:	82fb      	strh	r3, [r7, #22]
		memcpy(Destbuff, SourceBuff + tail, Sourcebuff_maxsize - tail);
 8000436:	8c3b      	ldrh	r3, [r7, #32]
 8000438:	68ba      	ldr	r2, [r7, #8]
 800043a:	18d1      	adds	r1, r2, r3
 800043c:	88fa      	ldrh	r2, [r7, #6]
 800043e:	8c3b      	ldrh	r3, [r7, #32]
 8000440:	1ad3      	subs	r3, r2, r3
 8000442:	461a      	mov	r2, r3
 8000444:	68f8      	ldr	r0, [r7, #12]
 8000446:	f004 f827 	bl	8004498 <memcpy>
		memcpy (Destbuff+ Sourcebuff_maxsize - tail, SourceBuff, head);
 800044a:	88fa      	ldrh	r2, [r7, #6]
 800044c:	8c3b      	ldrh	r3, [r7, #32]
 800044e:	1ad3      	subs	r3, r2, r3
 8000450:	68fa      	ldr	r2, [r7, #12]
 8000452:	4413      	add	r3, r2
 8000454:	88ba      	ldrh	r2, [r7, #4]
 8000456:	68b9      	ldr	r1, [r7, #8]
 8000458:	4618      	mov	r0, r3
 800045a:	f004 f81d 	bl	8004498 <memcpy>
	}
	return size;
 800045e:	8afb      	ldrh	r3, [r7, #22]
}
 8000460:	4618      	mov	r0, r3
 8000462:	3718      	adds	r7, #24
 8000464:	46bd      	mov	sp, r7
 8000466:	bd80      	pop	{r7, pc}

08000468 <SIM_callback>:
void SIM_callback(uint16_t Size)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b086      	sub	sp, #24
 800046c:	af02      	add	r7, sp, #8
 800046e:	4603      	mov	r3, r0
 8000470:	80fb      	strh	r3, [r7, #6]

	SIM_DataAvailable = 1;
 8000472:	4b5b      	ldr	r3, [pc, #364]	; (80005e0 <SIM_callback+0x178>)
 8000474:	2201      	movs	r2, #1
 8000476:	701a      	strb	r2, [r3, #0]

		oldPos = newPos;  // Update the last position before copying new data
 8000478:	4b5a      	ldr	r3, [pc, #360]	; (80005e4 <SIM_callback+0x17c>)
 800047a:	881a      	ldrh	r2, [r3, #0]
 800047c:	4b5a      	ldr	r3, [pc, #360]	; (80005e8 <SIM_callback+0x180>)
 800047e:	801a      	strh	r2, [r3, #0]

		/* If the data in large and it is about to exceed the buffer size, we have to route it to the start of the buffer
		 * This is to maintain the circular buffer
		 * The old data in the main buffer will be overlapped
		 */
		if (oldPos+Size > SIM_BUFF_SIZE)  // If the current position + new data size is greater than the main buffer
 8000480:	4b59      	ldr	r3, [pc, #356]	; (80005e8 <SIM_callback+0x180>)
 8000482:	881b      	ldrh	r3, [r3, #0]
 8000484:	461a      	mov	r2, r3
 8000486:	88fb      	ldrh	r3, [r7, #6]
 8000488:	4413      	add	r3, r2
 800048a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800048e:	dd22      	ble.n	80004d6 <SIM_callback+0x6e>
		{
			uint16_t datatocopy = SIM_BUFF_SIZE-oldPos;  // find out how much space is left in the main buffer
 8000490:	4b55      	ldr	r3, [pc, #340]	; (80005e8 <SIM_callback+0x180>)
 8000492:	881b      	ldrh	r3, [r3, #0]
 8000494:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8000498:	81fb      	strh	r3, [r7, #14]
			memcpy ((uint8_t *)SIMbuff+oldPos, (uint8_t *)SIMRxbuff, datatocopy);  // copy data in that remaining space
 800049a:	4b53      	ldr	r3, [pc, #332]	; (80005e8 <SIM_callback+0x180>)
 800049c:	881b      	ldrh	r3, [r3, #0]
 800049e:	461a      	mov	r2, r3
 80004a0:	4b52      	ldr	r3, [pc, #328]	; (80005ec <SIM_callback+0x184>)
 80004a2:	4413      	add	r3, r2
 80004a4:	89fa      	ldrh	r2, [r7, #14]
 80004a6:	4952      	ldr	r1, [pc, #328]	; (80005f0 <SIM_callback+0x188>)
 80004a8:	4618      	mov	r0, r3
 80004aa:	f003 fff5 	bl	8004498 <memcpy>

			oldPos = 0;  // point to the start of the buffer
 80004ae:	4b4e      	ldr	r3, [pc, #312]	; (80005e8 <SIM_callback+0x180>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	801a      	strh	r2, [r3, #0]
			memcpy ((uint8_t *)SIMbuff, (uint8_t *)SIMRxbuff+datatocopy, (Size-datatocopy));  // copy the remaining data
 80004b4:	89fb      	ldrh	r3, [r7, #14]
 80004b6:	4a4e      	ldr	r2, [pc, #312]	; (80005f0 <SIM_callback+0x188>)
 80004b8:	1899      	adds	r1, r3, r2
 80004ba:	88fa      	ldrh	r2, [r7, #6]
 80004bc:	89fb      	ldrh	r3, [r7, #14]
 80004be:	1ad3      	subs	r3, r2, r3
 80004c0:	461a      	mov	r2, r3
 80004c2:	484a      	ldr	r0, [pc, #296]	; (80005ec <SIM_callback+0x184>)
 80004c4:	f003 ffe8 	bl	8004498 <memcpy>
			newPos = (Size-datatocopy);  // update the position
 80004c8:	88fa      	ldrh	r2, [r7, #6]
 80004ca:	89fb      	ldrh	r3, [r7, #14]
 80004cc:	1ad3      	subs	r3, r2, r3
 80004ce:	b29a      	uxth	r2, r3
 80004d0:	4b44      	ldr	r3, [pc, #272]	; (80005e4 <SIM_callback+0x17c>)
 80004d2:	801a      	strh	r2, [r3, #0]
 80004d4:	e010      	b.n	80004f8 <SIM_callback+0x90>
		/* if the current position + new data size is less than the main buffer
		 * we will simply copy the data into the buffer and update the position
		 */
		else
		{
			memcpy ((uint8_t *)SIMbuff+oldPos, (uint8_t *)SIMRxbuff, Size);
 80004d6:	4b44      	ldr	r3, [pc, #272]	; (80005e8 <SIM_callback+0x180>)
 80004d8:	881b      	ldrh	r3, [r3, #0]
 80004da:	461a      	mov	r2, r3
 80004dc:	4b43      	ldr	r3, [pc, #268]	; (80005ec <SIM_callback+0x184>)
 80004de:	4413      	add	r3, r2
 80004e0:	88fa      	ldrh	r2, [r7, #6]
 80004e2:	4943      	ldr	r1, [pc, #268]	; (80005f0 <SIM_callback+0x188>)
 80004e4:	4618      	mov	r0, r3
 80004e6:	f003 ffd7 	bl	8004498 <memcpy>
			newPos = Size+oldPos;
 80004ea:	4b3f      	ldr	r3, [pc, #252]	; (80005e8 <SIM_callback+0x180>)
 80004ec:	881a      	ldrh	r2, [r3, #0]
 80004ee:	88fb      	ldrh	r3, [r7, #6]
 80004f0:	4413      	add	r3, r2
 80004f2:	b29a      	uxth	r2, r3
 80004f4:	4b3b      	ldr	r3, [pc, #236]	; (80005e4 <SIM_callback+0x17c>)
 80004f6:	801a      	strh	r2, [r3, #0]

		/* Update the position of the Head
		 * If the current position + new size is less then the buffer size, Head will update normally
		 * Or else the head will be at the new position from the beginning
		 */
		if (head + Size < SIM_BUFF_SIZE ) head = head + Size;
 80004f8:	4b3e      	ldr	r3, [pc, #248]	; (80005f4 <SIM_callback+0x18c>)
 80004fa:	881b      	ldrh	r3, [r3, #0]
 80004fc:	461a      	mov	r2, r3
 80004fe:	88fb      	ldrh	r3, [r7, #6]
 8000500:	4413      	add	r3, r2
 8000502:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000506:	da07      	bge.n	8000518 <SIM_callback+0xb0>
 8000508:	4b3a      	ldr	r3, [pc, #232]	; (80005f4 <SIM_callback+0x18c>)
 800050a:	881a      	ldrh	r2, [r3, #0]
 800050c:	88fb      	ldrh	r3, [r7, #6]
 800050e:	4413      	add	r3, r2
 8000510:	b29a      	uxth	r2, r3
 8000512:	4b38      	ldr	r3, [pc, #224]	; (80005f4 <SIM_callback+0x18c>)
 8000514:	801a      	strh	r2, [r3, #0]
 8000516:	e009      	b.n	800052c <SIM_callback+0xc4>
		else head = head + Size - SIM_BUFF_SIZE;
 8000518:	4b36      	ldr	r3, [pc, #216]	; (80005f4 <SIM_callback+0x18c>)
 800051a:	881a      	ldrh	r2, [r3, #0]
 800051c:	88fb      	ldrh	r3, [r7, #6]
 800051e:	4413      	add	r3, r2
 8000520:	b29b      	uxth	r3, r3
 8000522:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8000526:	b29a      	uxth	r2, r3
 8000528:	4b32      	ldr	r3, [pc, #200]	; (80005f4 <SIM_callback+0x18c>)
 800052a:	801a      	strh	r2, [r3, #0]

		/* start the DMA again */
		enableReceiveDMAtoIdle_SIM();
 800052c:	f7ff ff10 	bl	8000350 <enableReceiveDMAtoIdle_SIM>

		/* Check OK within incoming data*/
		if (isWordinBuff(SIMRxbuff, Size, (uint8_t*)"+CMTI:SM") !=NULL)
 8000530:	88fb      	ldrh	r3, [r7, #6]
 8000532:	4a31      	ldr	r2, [pc, #196]	; (80005f8 <SIM_callback+0x190>)
 8000534:	4619      	mov	r1, r3
 8000536:	482e      	ldr	r0, [pc, #184]	; (80005f0 <SIM_callback+0x188>)
 8000538:	f7ff ff26 	bl	8000388 <isWordinBuff>
 800053c:	4603      	mov	r3, r0
 800053e:	2b00      	cmp	r3, #0
 8000540:	d002      	beq.n	8000548 <SIM_callback+0xe0>
		{
			newSMS =1;
 8000542:	4b2e      	ldr	r3, [pc, #184]	; (80005fc <SIM_callback+0x194>)
 8000544:	2201      	movs	r2, #1
 8000546:	701a      	strb	r2, [r3, #0]
		}
		if ( newMQTTmsgReceiving || ( isWordinBuff(SIMRxbuff, Size, (uint8_t*) "+CMQTTRXSTART:") != NULL) )
 8000548:	4b2d      	ldr	r3, [pc, #180]	; (8000600 <SIM_callback+0x198>)
 800054a:	781b      	ldrb	r3, [r3, #0]
 800054c:	2b00      	cmp	r3, #0
 800054e:	d108      	bne.n	8000562 <SIM_callback+0xfa>
 8000550:	88fb      	ldrh	r3, [r7, #6]
 8000552:	4a2c      	ldr	r2, [pc, #176]	; (8000604 <SIM_callback+0x19c>)
 8000554:	4619      	mov	r1, r3
 8000556:	4826      	ldr	r0, [pc, #152]	; (80005f0 <SIM_callback+0x188>)
 8000558:	f7ff ff16 	bl	8000388 <isWordinBuff>
 800055c:	4603      	mov	r3, r0
 800055e:	2b00      	cmp	r3, #0
 8000560:	d00d      	beq.n	800057e <SIM_callback+0x116>
		{
			if( !newMQTTmsgReceiving )
 8000562:	4b27      	ldr	r3, [pc, #156]	; (8000600 <SIM_callback+0x198>)
 8000564:	781b      	ldrb	r3, [r3, #0]
 8000566:	2b00      	cmp	r3, #0
 8000568:	d106      	bne.n	8000578 <SIM_callback+0x110>
			{
				mqtttail = head- Size;
 800056a:	4b22      	ldr	r3, [pc, #136]	; (80005f4 <SIM_callback+0x18c>)
 800056c:	881a      	ldrh	r2, [r3, #0]
 800056e:	88fb      	ldrh	r3, [r7, #6]
 8000570:	1ad3      	subs	r3, r2, r3
 8000572:	b29a      	uxth	r2, r3
 8000574:	4b24      	ldr	r3, [pc, #144]	; (8000608 <SIM_callback+0x1a0>)
 8000576:	801a      	strh	r2, [r3, #0]
			}
			//receive MQTT sub message
			newMQTTmsgReceiving = 1;
 8000578:	4b21      	ldr	r3, [pc, #132]	; (8000600 <SIM_callback+0x198>)
 800057a:	2201      	movs	r2, #1
 800057c:	701a      	strb	r2, [r3, #0]
		}
		if ( newMQTTmsgReceiving && ( isWordinBuff(SIMRxbuff, Size,(uint8_t*) "+CMQTTRXEND:") != NULL ) )
 800057e:	4b20      	ldr	r3, [pc, #128]	; (8000600 <SIM_callback+0x198>)
 8000580:	781b      	ldrb	r3, [r3, #0]
 8000582:	2b00      	cmp	r3, #0
 8000584:	d028      	beq.n	80005d8 <SIM_callback+0x170>
 8000586:	88fb      	ldrh	r3, [r7, #6]
 8000588:	4a20      	ldr	r2, [pc, #128]	; (800060c <SIM_callback+0x1a4>)
 800058a:	4619      	mov	r1, r3
 800058c:	4818      	ldr	r0, [pc, #96]	; (80005f0 <SIM_callback+0x188>)
 800058e:	f7ff fefb 	bl	8000388 <isWordinBuff>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d01f      	beq.n	80005d8 <SIM_callback+0x170>
		{
			newMQTTmsgReceiving = 0;
 8000598:	4b19      	ldr	r3, [pc, #100]	; (8000600 <SIM_callback+0x198>)
 800059a:	2200      	movs	r2, #0
 800059c:	701a      	strb	r2, [r3, #0]
//			newMQTTmsg =1;
			mqtthead = head;
 800059e:	4b15      	ldr	r3, [pc, #84]	; (80005f4 <SIM_callback+0x18c>)
 80005a0:	881a      	ldrh	r2, [r3, #0]
 80005a2:	4b1b      	ldr	r3, [pc, #108]	; (8000610 <SIM_callback+0x1a8>)
 80005a4:	801a      	strh	r2, [r3, #0]
			memset(MQTT_Rxbuff, 0, MQTT_RXBUFF_SIZE);
 80005a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80005aa:	2100      	movs	r1, #0
 80005ac:	4819      	ldr	r0, [pc, #100]	; (8000614 <SIM_callback+0x1ac>)
 80005ae:	f003 ff81 	bl	80044b4 <memset>
			uint16_t cpy_len = cpyBuff2Buff (MQTT_Rxbuff, SIMbuff, SIM_BUFF_SIZE, mqtthead, mqtttail);
 80005b2:	4b17      	ldr	r3, [pc, #92]	; (8000610 <SIM_callback+0x1a8>)
 80005b4:	881a      	ldrh	r2, [r3, #0]
 80005b6:	4b14      	ldr	r3, [pc, #80]	; (8000608 <SIM_callback+0x1a0>)
 80005b8:	881b      	ldrh	r3, [r3, #0]
 80005ba:	9300      	str	r3, [sp, #0]
 80005bc:	4613      	mov	r3, r2
 80005be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80005c2:	490a      	ldr	r1, [pc, #40]	; (80005ec <SIM_callback+0x184>)
 80005c4:	4813      	ldr	r0, [pc, #76]	; (8000614 <SIM_callback+0x1ac>)
 80005c6:	f7ff ff0b 	bl	80003e0 <cpyBuff2Buff>
 80005ca:	4603      	mov	r3, r0
 80005cc:	81bb      	strh	r3, [r7, #12]
			MQTT_receive(MQTT_Rxbuff, cpy_len);
 80005ce:	89bb      	ldrh	r3, [r7, #12]
 80005d0:	4619      	mov	r1, r3
 80005d2:	4810      	ldr	r0, [pc, #64]	; (8000614 <SIM_callback+0x1ac>)
 80005d4:	f000 fac0 	bl	8000b58 <MQTT_receive>
//			if ((SIMRxbuff[i] == '+') && (SIMRxbuff[i+1] == 'C')&& (SIMRxbuff[i+2] == 'M')&& (SIMRxbuff[i+3] == 'T')&& (SIMRxbuff[i+4] == 'I')&& (SIMRxbuff[i+5] == ':')&& (SIMRxbuff[i+8] == 'S')&& (SIMRxbuff[i+9] == 'M'))
//			{
//				newSMS = 1;
//			}
//		}
}
 80005d8:	bf00      	nop
 80005da:	3710      	adds	r7, #16
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	200000f4 	.word	0x200000f4
 80005e4:	200000f8 	.word	0x200000f8
 80005e8:	200000f6 	.word	0x200000f6
 80005ec:	200000fc 	.word	0x200000fc
 80005f0:	200002fc 	.word	0x200002fc
 80005f4:	20000860 	.word	0x20000860
 80005f8:	08004eec 	.word	0x08004eec
 80005fc:	20000868 	.word	0x20000868
 8000600:	20000869 	.word	0x20000869
 8000604:	08004ef8 	.word	0x08004ef8
 8000608:	20000864 	.word	0x20000864
 800060c:	08004f08 	.word	0x08004f08
 8000610:	20000866 	.word	0x20000866
 8000614:	20000460 	.word	0x20000460

08000618 <SIM_sendCMD>:

SIM_res_t SIM_sendCMD(uint8_t *cmd, uint8_t *checkResMsg, uint8_t CheckResENorDIS, uint8_t ENorDISmarkasread, uint32_t timeout)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b086      	sub	sp, #24
 800061c:	af00      	add	r7, sp, #0
 800061e:	60f8      	str	r0, [r7, #12]
 8000620:	60b9      	str	r1, [r7, #8]
 8000622:	4611      	mov	r1, r2
 8000624:	461a      	mov	r2, r3
 8000626:	460b      	mov	r3, r1
 8000628:	71fb      	strb	r3, [r7, #7]
 800062a:	4613      	mov	r3, r2
 800062c:	71bb      	strb	r3, [r7, #6]
	uint8_t len = sprintf( (char*)SIM_Txbuff, "%s\r\n", cmd);
 800062e:	68fa      	ldr	r2, [r7, #12]
 8000630:	4912      	ldr	r1, [pc, #72]	; (800067c <SIM_sendCMD+0x64>)
 8000632:	4813      	ldr	r0, [pc, #76]	; (8000680 <SIM_sendCMD+0x68>)
 8000634:	f004 f832 	bl	800469c <siprintf>
 8000638:	4603      	mov	r3, r0
 800063a:	75fb      	strb	r3, [r7, #23]
	HAL_UART_Transmit(__SIM_UART, SIM_Txbuff, len, 0xFFFF);
 800063c:	4b11      	ldr	r3, [pc, #68]	; (8000684 <SIM_sendCMD+0x6c>)
 800063e:	6818      	ldr	r0, [r3, #0]
 8000640:	7dfb      	ldrb	r3, [r7, #23]
 8000642:	b29a      	uxth	r2, r3
 8000644:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000648:	490d      	ldr	r1, [pc, #52]	; (8000680 <SIM_sendCMD+0x68>)
 800064a:	f002 fef3 	bl	8003434 <HAL_UART_Transmit>
	if (CheckResENorDIS == ENABLE_SIM_CHECKRES)
 800064e:	79fb      	ldrb	r3, [r7, #7]
 8000650:	2b01      	cmp	r3, #1
 8000652:	d10e      	bne.n	8000672 <SIM_sendCMD+0x5a>
	{
		SIM_res_t res = SIM_checkMsg(checkResMsg, timeout);
 8000654:	6a3b      	ldr	r3, [r7, #32]
 8000656:	b29b      	uxth	r3, r3
 8000658:	4619      	mov	r1, r3
 800065a:	68b8      	ldr	r0, [r7, #8]
 800065c:	f000 f814 	bl	8000688 <SIM_checkMsg>
 8000660:	4603      	mov	r3, r0
 8000662:	75bb      	strb	r3, [r7, #22]
		if (ENorDISmarkasread == ENABLE_MARKASREAD)
 8000664:	79bb      	ldrb	r3, [r7, #6]
 8000666:	2b01      	cmp	r3, #1
 8000668:	d101      	bne.n	800066e <SIM_sendCMD+0x56>
		{
			MarkAsReadData_SIM();
 800066a:	f000 f8cb 	bl	8000804 <MarkAsReadData_SIM>
		}
//		Serial_log_string("Res of CMD: ");
//		Serial_log_buffer(cmd, len);
//		Serial_log_number(res);
		return res;
 800066e:	7dbb      	ldrb	r3, [r7, #22]
 8000670:	e000      	b.n	8000674 <SIM_sendCMD+0x5c>
	}
	return SIM_NO_RES;
 8000672:	2302      	movs	r3, #2
}
 8000674:	4618      	mov	r0, r3
 8000676:	3718      	adds	r7, #24
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	08004f18 	.word	0x08004f18
 8000680:	200003fc 	.word	0x200003fc
 8000684:	200000e8 	.word	0x200000e8

08000688 <SIM_checkMsg>:
		}
	}
}

SIM_res_t SIM_checkMsg(uint8_t *Msg, uint16_t timeout)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b0c4      	sub	sp, #272	; 0x110
 800068c:	af00      	add	r7, sp, #0
 800068e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000692:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000696:	6018      	str	r0, [r3, #0]
 8000698:	460a      	mov	r2, r1
 800069a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800069e:	f5a3 7387 	sub.w	r3, r3, #270	; 0x10e
 80006a2:	801a      	strh	r2, [r3, #0]
	SIM_res_t res= SIM_NO_RES;
 80006a4:	2302      	movs	r3, #2
 80006a6:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
	timeout /= 500;
 80006aa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80006ae:	f5a3 7387 	sub.w	r3, r3, #270	; 0x10e
 80006b2:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80006b6:	f5a2 7287 	sub.w	r2, r2, #270	; 0x10e
 80006ba:	8812      	ldrh	r2, [r2, #0]
 80006bc:	494c      	ldr	r1, [pc, #304]	; (80007f0 <SIM_checkMsg+0x168>)
 80006be:	fba1 1202 	umull	r1, r2, r1, r2
 80006c2:	0952      	lsrs	r2, r2, #5
 80006c4:	801a      	strh	r2, [r3, #0]
	uint8_t dataSize;
	uint8_t tmpdbuff[256];

	for (uint16_t i = 0; i < 500 ; i++)
 80006c6:	2300      	movs	r3, #0
 80006c8:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
 80006cc:	e082      	b.n	80007d4 <SIM_checkMsg+0x14c>
	{
		HAL_Delay(timeout);
 80006ce:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80006d2:	f5a3 7387 	sub.w	r3, r3, #270	; 0x10e
 80006d6:	881b      	ldrh	r3, [r3, #0]
 80006d8:	4618      	mov	r0, r3
 80006da:	f001 f8cf 	bl	800187c <HAL_Delay>

		if (head > tail)
 80006de:	4b45      	ldr	r3, [pc, #276]	; (80007f4 <SIM_checkMsg+0x16c>)
 80006e0:	881a      	ldrh	r2, [r3, #0]
 80006e2:	4b45      	ldr	r3, [pc, #276]	; (80007f8 <SIM_checkMsg+0x170>)
 80006e4:	881b      	ldrh	r3, [r3, #0]
 80006e6:	429a      	cmp	r2, r3
 80006e8:	d91d      	bls.n	8000726 <SIM_checkMsg+0x9e>
		{
			dataSize = head - tail ;
 80006ea:	4b42      	ldr	r3, [pc, #264]	; (80007f4 <SIM_checkMsg+0x16c>)
 80006ec:	881b      	ldrh	r3, [r3, #0]
 80006ee:	b2da      	uxtb	r2, r3
 80006f0:	4b41      	ldr	r3, [pc, #260]	; (80007f8 <SIM_checkMsg+0x170>)
 80006f2:	881b      	ldrh	r3, [r3, #0]
 80006f4:	b2db      	uxtb	r3, r3
 80006f6:	1ad3      	subs	r3, r2, r3
 80006f8:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
			memset( (char*)tmpdbuff, 0, 256 );
 80006fc:	f107 0308 	add.w	r3, r7, #8
 8000700:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000704:	2100      	movs	r1, #0
 8000706:	4618      	mov	r0, r3
 8000708:	f003 fed4 	bl	80044b4 <memset>
			memcpy(tmpdbuff, SIMbuff + tail, dataSize);
 800070c:	4b3a      	ldr	r3, [pc, #232]	; (80007f8 <SIM_checkMsg+0x170>)
 800070e:	881b      	ldrh	r3, [r3, #0]
 8000710:	461a      	mov	r2, r3
 8000712:	4b3a      	ldr	r3, [pc, #232]	; (80007fc <SIM_checkMsg+0x174>)
 8000714:	18d1      	adds	r1, r2, r3
 8000716:	f897 210f 	ldrb.w	r2, [r7, #271]	; 0x10f
 800071a:	f107 0308 	add.w	r3, r7, #8
 800071e:	4618      	mov	r0, r3
 8000720:	f003 feba 	bl	8004498 <memcpy>
 8000724:	e032      	b.n	800078c <SIM_checkMsg+0x104>
		}
		else if ( head < tail )
 8000726:	4b33      	ldr	r3, [pc, #204]	; (80007f4 <SIM_checkMsg+0x16c>)
 8000728:	881a      	ldrh	r2, [r3, #0]
 800072a:	4b33      	ldr	r3, [pc, #204]	; (80007f8 <SIM_checkMsg+0x170>)
 800072c:	881b      	ldrh	r3, [r3, #0]
 800072e:	429a      	cmp	r2, r3
 8000730:	d22c      	bcs.n	800078c <SIM_checkMsg+0x104>
		{
			dataSize = SIM_BUFF_SIZE - tail + head ;
 8000732:	4b30      	ldr	r3, [pc, #192]	; (80007f4 <SIM_checkMsg+0x16c>)
 8000734:	881b      	ldrh	r3, [r3, #0]
 8000736:	b2da      	uxtb	r2, r3
 8000738:	4b2f      	ldr	r3, [pc, #188]	; (80007f8 <SIM_checkMsg+0x170>)
 800073a:	881b      	ldrh	r3, [r3, #0]
 800073c:	b2db      	uxtb	r3, r3
 800073e:	1ad3      	subs	r3, r2, r3
 8000740:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
			memset( (char*)tmpdbuff, 0, 256 );
 8000744:	f107 0308 	add.w	r3, r7, #8
 8000748:	f44f 7280 	mov.w	r2, #256	; 0x100
 800074c:	2100      	movs	r1, #0
 800074e:	4618      	mov	r0, r3
 8000750:	f003 feb0 	bl	80044b4 <memset>
			memcpy(tmpdbuff, SIMbuff + tail, SIM_BUFF_SIZE - tail);
 8000754:	4b28      	ldr	r3, [pc, #160]	; (80007f8 <SIM_checkMsg+0x170>)
 8000756:	881b      	ldrh	r3, [r3, #0]
 8000758:	461a      	mov	r2, r3
 800075a:	4b28      	ldr	r3, [pc, #160]	; (80007fc <SIM_checkMsg+0x174>)
 800075c:	18d1      	adds	r1, r2, r3
 800075e:	4b26      	ldr	r3, [pc, #152]	; (80007f8 <SIM_checkMsg+0x170>)
 8000760:	881b      	ldrh	r3, [r3, #0]
 8000762:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8000766:	461a      	mov	r2, r3
 8000768:	f107 0308 	add.w	r3, r7, #8
 800076c:	4618      	mov	r0, r3
 800076e:	f003 fe93 	bl	8004498 <memcpy>
			memcpy(tmpdbuff + SIM_BUFF_SIZE - tail, SIMbuff, head);
 8000772:	4b21      	ldr	r3, [pc, #132]	; (80007f8 <SIM_checkMsg+0x170>)
 8000774:	881b      	ldrh	r3, [r3, #0]
 8000776:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800077a:	f107 0208 	add.w	r2, r7, #8
 800077e:	4413      	add	r3, r2
 8000780:	4a1c      	ldr	r2, [pc, #112]	; (80007f4 <SIM_checkMsg+0x16c>)
 8000782:	8812      	ldrh	r2, [r2, #0]
 8000784:	491d      	ldr	r1, [pc, #116]	; (80007fc <SIM_checkMsg+0x174>)
 8000786:	4618      	mov	r0, r3
 8000788:	f003 fe86 	bl	8004498 <memcpy>
		}

//		RemoveNULLinbuff(tmpbuff, Size);

		if ( isWordinBuff(tmpdbuff, dataSize, Msg) != NULL )	{
 800078c:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000790:	b299      	uxth	r1, r3
 8000792:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000796:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800079a:	f107 0008 	add.w	r0, r7, #8
 800079e:	681a      	ldr	r2, [r3, #0]
 80007a0:	f7ff fdf2 	bl	8000388 <isWordinBuff>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <SIM_checkMsg+0x126>
//			Serial_log_number(tail);
//			Serial_log_string(" ");
//			Serial_log_string("\nhead: ");
//			Serial_log_number(head);
//			Serial_log_string(" ");
			return SIM_RES_MSG ;
 80007aa:	2301      	movs	r3, #1
 80007ac:	e01a      	b.n	80007e4 <SIM_checkMsg+0x15c>
		}

		if ( isWordinBuff(tmpdbuff, dataSize, (uint8_t*)"ERROR") != NULL )	{
 80007ae:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80007b2:	b299      	uxth	r1, r3
 80007b4:	f107 0308 	add.w	r3, r7, #8
 80007b8:	4a11      	ldr	r2, [pc, #68]	; (8000800 <SIM_checkMsg+0x178>)
 80007ba:	4618      	mov	r0, r3
 80007bc:	f7ff fde4 	bl	8000388 <isWordinBuff>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <SIM_checkMsg+0x142>
//			Serial_log_string("err: ");
//			Serial_log_buffer(tmpdbuff, dataSize);
//			Serial_log_string(";");
			return SIM_ERROR ;
 80007c6:	2300      	movs	r3, #0
 80007c8:	e00c      	b.n	80007e4 <SIM_checkMsg+0x15c>
	for (uint16_t i = 0; i < 500 ; i++)
 80007ca:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 80007ce:	3301      	adds	r3, #1
 80007d0:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
 80007d4:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 80007d8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80007dc:	f4ff af77 	bcc.w	80006ce <SIM_checkMsg+0x46>
//	Serial_log_string(" ");
//	Serial_log_string("\nhead: ");
//	Serial_log_number(head);
//	Serial_log_string(" ");

 	return res;
 80007e0:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b

}
 80007e4:	4618      	mov	r0, r3
 80007e6:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	10624dd3 	.word	0x10624dd3
 80007f4:	20000860 	.word	0x20000860
 80007f8:	20000862 	.word	0x20000862
 80007fc:	200000fc 	.word	0x200000fc
 8000800:	08004f20 	.word	0x08004f20

08000804 <MarkAsReadData_SIM>:

void MarkAsReadData_SIM(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
	tail = head;
 8000808:	4b03      	ldr	r3, [pc, #12]	; (8000818 <MarkAsReadData_SIM+0x14>)
 800080a:	881a      	ldrh	r2, [r3, #0]
 800080c:	4b03      	ldr	r3, [pc, #12]	; (800081c <MarkAsReadData_SIM+0x18>)
 800080e:	801a      	strh	r2, [r3, #0]
}
 8000810:	bf00      	nop
 8000812:	46bd      	mov	sp, r7
 8000814:	bc80      	pop	{r7}
 8000816:	4770      	bx	lr
 8000818:	20000860 	.word	0x20000860
 800081c:	20000862 	.word	0x20000862

08000820 <DS3231_Init>:

static uint8_t B2D(uint8_t bcd);
static uint8_t D2B(uint8_t decimal);

void DS3231_Init(I2C_HandleTypeDef *handle)
{
 8000820:	b480      	push	{r7}
 8000822:	b083      	sub	sp, #12
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  i2c = handle;
 8000828:	4a03      	ldr	r2, [pc, #12]	; (8000838 <DS3231_Init+0x18>)
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	6013      	str	r3, [r2, #0]
}
 800082e:	bf00      	nop
 8000830:	370c      	adds	r7, #12
 8000832:	46bd      	mov	sp, r7
 8000834:	bc80      	pop	{r7}
 8000836:	4770      	bx	lr
 8000838:	2000086c 	.word	0x2000086c

0800083c <getRemainsize>:
SIM_t *__MY_SIM;

uint8_t MQTT_Txbuff [MQTT_TXBUFF_SIZE];

uint16_t getRemainsize(uint8_t *Remainbuff, uint8_t *Originbuff, uint16_t originSize)
{
 800083c:	b480      	push	{r7}
 800083e:	b085      	sub	sp, #20
 8000840:	af00      	add	r7, sp, #0
 8000842:	60f8      	str	r0, [r7, #12]
 8000844:	60b9      	str	r1, [r7, #8]
 8000846:	4613      	mov	r3, r2
 8000848:	80fb      	strh	r3, [r7, #6]
	return originSize-(Remainbuff - Originbuff)/sizeof(uint8_t);
 800084a:	68fa      	ldr	r2, [r7, #12]
 800084c:	68bb      	ldr	r3, [r7, #8]
 800084e:	1ad3      	subs	r3, r2, r3
 8000850:	b29b      	uxth	r3, r3
 8000852:	88fa      	ldrh	r2, [r7, #6]
 8000854:	1ad3      	subs	r3, r2, r3
 8000856:	b29b      	uxth	r3, r3
}
 8000858:	4618      	mov	r0, r3
 800085a:	3714      	adds	r7, #20
 800085c:	46bd      	mov	sp, r7
 800085e:	bc80      	pop	{r7}
 8000860:	4770      	bx	lr

08000862 <getBetween>:
	}
	return sum;

}
uint8_t getBetween(uint8_t *firstWord,uint8_t *lastWord, uint8_t *buff, uint16_t size, uint8_t *getBuff)
{
 8000862:	b580      	push	{r7, lr}
 8000864:	b088      	sub	sp, #32
 8000866:	af00      	add	r7, sp, #0
 8000868:	60f8      	str	r0, [r7, #12]
 800086a:	60b9      	str	r1, [r7, #8]
 800086c:	607a      	str	r2, [r7, #4]
 800086e:	807b      	strh	r3, [r7, #2]
	uint8_t fWlen = strlen((char*)firstWord);
 8000870:	68f8      	ldr	r0, [r7, #12]
 8000872:	f7ff fc6b 	bl	800014c <strlen>
 8000876:	4603      	mov	r3, r0
 8000878:	76bb      	strb	r3, [r7, #26]

	uint8_t *Fp =isWordinBuff(buff, size, firstWord);
 800087a:	887b      	ldrh	r3, [r7, #2]
 800087c:	68fa      	ldr	r2, [r7, #12]
 800087e:	4619      	mov	r1, r3
 8000880:	6878      	ldr	r0, [r7, #4]
 8000882:	f7ff fd81 	bl	8000388 <isWordinBuff>
 8000886:	61f8      	str	r0, [r7, #28]

	if (Fp == NULL ) return 0;
 8000888:	69fb      	ldr	r3, [r7, #28]
 800088a:	2b00      	cmp	r3, #0
 800088c:	d101      	bne.n	8000892 <getBetween+0x30>
 800088e:	2300      	movs	r3, #0
 8000890:	e038      	b.n	8000904 <getBetween+0xa2>
	Fp += fWlen;
 8000892:	7ebb      	ldrb	r3, [r7, #26]
 8000894:	69fa      	ldr	r2, [r7, #28]
 8000896:	4413      	add	r3, r2
 8000898:	61fb      	str	r3, [r7, #28]
	uint8_t remainSize = getRemainsize(Fp, buff, size);
 800089a:	887b      	ldrh	r3, [r7, #2]
 800089c:	461a      	mov	r2, r3
 800089e:	6879      	ldr	r1, [r7, #4]
 80008a0:	69f8      	ldr	r0, [r7, #28]
 80008a2:	f7ff ffcb 	bl	800083c <getRemainsize>
 80008a6:	4603      	mov	r3, r0
 80008a8:	767b      	strb	r3, [r7, #25]
	uint8_t *Lp = isWordinBuff(Fp, remainSize, lastWord);
 80008aa:	7e7b      	ldrb	r3, [r7, #25]
 80008ac:	b29b      	uxth	r3, r3
 80008ae:	68ba      	ldr	r2, [r7, #8]
 80008b0:	4619      	mov	r1, r3
 80008b2:	69f8      	ldr	r0, [r7, #28]
 80008b4:	f7ff fd68 	bl	8000388 <isWordinBuff>
 80008b8:	6178      	str	r0, [r7, #20]
	if (Lp == NULL || Fp >= Lp) return 0;
 80008ba:	697b      	ldr	r3, [r7, #20]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d003      	beq.n	80008c8 <getBetween+0x66>
 80008c0:	69fa      	ldr	r2, [r7, #28]
 80008c2:	697b      	ldr	r3, [r7, #20]
 80008c4:	429a      	cmp	r2, r3
 80008c6:	d301      	bcc.n	80008cc <getBetween+0x6a>
 80008c8:	2300      	movs	r3, #0
 80008ca:	e01b      	b.n	8000904 <getBetween+0xa2>

	uint8_t getBuffindex =0;
 80008cc:	2300      	movs	r3, #0
 80008ce:	76fb      	strb	r3, [r7, #27]
	while (Fp != Lp)
 80008d0:	e00b      	b.n	80008ea <getBetween+0x88>
	{
		getBuff[getBuffindex++] = *Fp;
 80008d2:	7efb      	ldrb	r3, [r7, #27]
 80008d4:	1c5a      	adds	r2, r3, #1
 80008d6:	76fa      	strb	r2, [r7, #27]
 80008d8:	461a      	mov	r2, r3
 80008da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008dc:	4413      	add	r3, r2
 80008de:	69fa      	ldr	r2, [r7, #28]
 80008e0:	7812      	ldrb	r2, [r2, #0]
 80008e2:	701a      	strb	r2, [r3, #0]
		Fp ++;
 80008e4:	69fb      	ldr	r3, [r7, #28]
 80008e6:	3301      	adds	r3, #1
 80008e8:	61fb      	str	r3, [r7, #28]
	while (Fp != Lp)
 80008ea:	69fa      	ldr	r2, [r7, #28]
 80008ec:	697b      	ldr	r3, [r7, #20]
 80008ee:	429a      	cmp	r2, r3
 80008f0:	d1ef      	bne.n	80008d2 <getBetween+0x70>
	}
	getBuff[getBuffindex++]= '\0';
 80008f2:	7efb      	ldrb	r3, [r7, #27]
 80008f4:	1c5a      	adds	r2, r3, #1
 80008f6:	76fa      	strb	r2, [r7, #27]
 80008f8:	461a      	mov	r2, r3
 80008fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008fc:	4413      	add	r3, r2
 80008fe:	2200      	movs	r2, #0
 8000900:	701a      	strb	r2, [r3, #0]
	return getBuffindex;           // length of getBuff
 8000902:	7efb      	ldrb	r3, [r7, #27]
}
 8000904:	4618      	mov	r0, r3
 8000906:	3720      	adds	r7, #32
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}

0800090c <getContent>:

uint8_t getContent(content_t contentType, uint8_t *databuffer, uint16_t datalen, uint8_t *getbuffer, uint16_t contentlen)
{
 800090c:	b5b0      	push	{r4, r5, r7, lr}
 800090e:	b092      	sub	sp, #72	; 0x48
 8000910:	af02      	add	r7, sp, #8
 8000912:	60b9      	str	r1, [r7, #8]
 8000914:	607b      	str	r3, [r7, #4]
 8000916:	4603      	mov	r3, r0
 8000918:	73fb      	strb	r3, [r7, #15]
 800091a:	4613      	mov	r3, r2
 800091c:	81bb      	strh	r3, [r7, #12]
	uint16_t gotcontent_len = 0;
 800091e:	2300      	movs	r3, #0
 8000920:	87fb      	strh	r3, [r7, #62]	; 0x3e

	uint8_t *currentPOS ;
	uint16_t databuffer_Remainlen = datalen;
 8000922:	89bb      	ldrh	r3, [r7, #12]
 8000924:	86fb      	strh	r3, [r7, #54]	; 0x36

	uint16_t subcontent_len;
	uint8_t subContentlen_buff[10];
	uint8_t contentsignature[20];
	if (contentType == CONTENT_PAYLOAD) {
 8000926:	7bfb      	ldrb	r3, [r7, #15]
 8000928:	2b01      	cmp	r3, #1
 800092a:	d109      	bne.n	8000940 <getContent+0x34>
		strcpy( (char*)contentsignature, "+CMQTTRXPAYLOAD:");
 800092c:	f107 0314 	add.w	r3, r7, #20
 8000930:	4a36      	ldr	r2, [pc, #216]	; (8000a0c <getContent+0x100>)
 8000932:	461c      	mov	r4, r3
 8000934:	4615      	mov	r5, r2
 8000936:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000938:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800093a:	682b      	ldr	r3, [r5, #0]
 800093c:	7023      	strb	r3, [r4, #0]
 800093e:	e05b      	b.n	80009f8 <getContent+0xec>
 	}
	else if (contentType == CONTENT_TOPIC) {
 8000940:	7bfb      	ldrb	r3, [r7, #15]
 8000942:	2b00      	cmp	r3, #0
 8000944:	d10b      	bne.n	800095e <getContent+0x52>
		strcpy( (char*)contentsignature, "+CMQTTRXTOPIC:");
 8000946:	f107 0314 	add.w	r3, r7, #20
 800094a:	4a31      	ldr	r2, [pc, #196]	; (8000a10 <getContent+0x104>)
 800094c:	461c      	mov	r4, r3
 800094e:	4613      	mov	r3, r2
 8000950:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000952:	c407      	stmia	r4!, {r0, r1, r2}
 8000954:	8023      	strh	r3, [r4, #0]
 8000956:	3402      	adds	r4, #2
 8000958:	0c1b      	lsrs	r3, r3, #16
 800095a:	7023      	strb	r3, [r4, #0]
 800095c:	e04c      	b.n	80009f8 <getContent+0xec>
	}
	else return 0;
 800095e:	2300      	movs	r3, #0
 8000960:	e050      	b.n	8000a04 <getContent+0xf8>

	while ( gotcontent_len < contentlen )
	{
		currentPOS = isWordinBuff(databuffer, databuffer_Remainlen, contentsignature);
 8000962:	f107 0214 	add.w	r2, r7, #20
 8000966:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000968:	4619      	mov	r1, r3
 800096a:	68b8      	ldr	r0, [r7, #8]
 800096c:	f7ff fd0c 	bl	8000388 <isWordinBuff>
 8000970:	63b8      	str	r0, [r7, #56]	; 0x38
		if (currentPOS == NULL)		return  0;
 8000972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000974:	2b00      	cmp	r3, #0
 8000976:	d101      	bne.n	800097c <getContent+0x70>
 8000978:	2300      	movs	r3, #0
 800097a:	e043      	b.n	8000a04 <getContent+0xf8>
		databuffer_Remainlen = getRemainsize( currentPOS, databuffer, databuffer_Remainlen );
 800097c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800097e:	461a      	mov	r2, r3
 8000980:	68b9      	ldr	r1, [r7, #8]
 8000982:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000984:	f7ff ff5a 	bl	800083c <getRemainsize>
 8000988:	4603      	mov	r3, r0
 800098a:	86fb      	strh	r3, [r7, #54]	; 0x36

		// Get subcontent length
		getBetween( (uint8_t*)",", (uint8_t*) "\r", currentPOS, databuffer_Remainlen, subContentlen_buff);
 800098c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800098e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000992:	9300      	str	r3, [sp, #0]
 8000994:	4613      	mov	r3, r2
 8000996:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000998:	491e      	ldr	r1, [pc, #120]	; (8000a14 <getContent+0x108>)
 800099a:	481f      	ldr	r0, [pc, #124]	; (8000a18 <getContent+0x10c>)
 800099c:	f7ff ff61 	bl	8000862 <getBetween>
		subcontent_len = atoi( (char*)subContentlen_buff );
 80009a0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009a4:	4618      	mov	r0, r3
 80009a6:	f003 fd31 	bl	800440c <atoi>
 80009aa:	4603      	mov	r3, r0
 80009ac:	867b      	strh	r3, [r7, #50]	; 0x32

		// Get subcontent
		while ( *currentPOS != '\n'){
 80009ae:	e002      	b.n	80009b6 <getContent+0xaa>
			currentPOS++;
 80009b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80009b2:	3301      	adds	r3, #1
 80009b4:	63bb      	str	r3, [r7, #56]	; 0x38
		while ( *currentPOS != '\n'){
 80009b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	2b0a      	cmp	r3, #10
 80009bc:	d1f8      	bne.n	80009b0 <getContent+0xa4>
		}
		currentPOS++;
 80009be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80009c0:	3301      	adds	r3, #1
 80009c2:	63bb      	str	r3, [r7, #56]	; 0x38
		for (uint16_t i = 0; i< subcontent_len; i++)
 80009c4:	2300      	movs	r3, #0
 80009c6:	86bb      	strh	r3, [r7, #52]	; 0x34
 80009c8:	e00d      	b.n	80009e6 <getContent+0xda>
		{
			getbuffer[gotcontent_len++] = currentPOS[i];
 80009ca:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80009cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80009ce:	441a      	add	r2, r3
 80009d0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80009d2:	1c59      	adds	r1, r3, #1
 80009d4:	87f9      	strh	r1, [r7, #62]	; 0x3e
 80009d6:	4619      	mov	r1, r3
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	440b      	add	r3, r1
 80009dc:	7812      	ldrb	r2, [r2, #0]
 80009de:	701a      	strb	r2, [r3, #0]
		for (uint16_t i = 0; i< subcontent_len; i++)
 80009e0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80009e2:	3301      	adds	r3, #1
 80009e4:	86bb      	strh	r3, [r7, #52]	; 0x34
 80009e6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80009e8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80009ea:	429a      	cmp	r2, r3
 80009ec:	d3ed      	bcc.n	80009ca <getContent+0xbe>
		}

		// Update databuffer
		databuffer = ++currentPOS;
 80009ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80009f0:	3301      	adds	r3, #1
 80009f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80009f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80009f6:	60bb      	str	r3, [r7, #8]
	while ( gotcontent_len < contentlen )
 80009f8:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80009fa:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80009fe:	429a      	cmp	r2, r3
 8000a00:	d3af      	bcc.n	8000962 <getContent+0x56>
	}
	return 1;
 8000a02:	2301      	movs	r3, #1
}
 8000a04:	4618      	mov	r0, r3
 8000a06:	3740      	adds	r7, #64	; 0x40
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bdb0      	pop	{r4, r5, r7, pc}
 8000a0c:	0800510c 	.word	0x0800510c
 8000a10:	08005120 	.word	0x08005120
 8000a14:	08005130 	.word	0x08005130
 8000a18:	08005134 	.word	0x08005134

08000a1c <MQTT_receiveGetTopicandPayloadLength>:

uint8_t MQTT_receiveGetTopicandPayloadLength( uint8_t *MQTTbuff, uint16_t buffsize)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b08c      	sub	sp, #48	; 0x30
 8000a20:	af02      	add	r7, sp, #8
 8000a22:	6078      	str	r0, [r7, #4]
 8000a24:	460b      	mov	r3, r1
 8000a26:	807b      	strh	r3, [r7, #2]
	uint8_t topiclen_buff[10];
	uint8_t payloadlen_buff[10];
	Serial_log_string("MQTTbuffer: ");
 8000a28:	4829      	ldr	r0, [pc, #164]	; (8000ad0 <MQTT_receiveGetTopicandPayloadLength+0xb4>)
 8000a2a:	f7ff fc49 	bl	80002c0 <Serial_log_string>
	Serial_log_buffer(MQTTbuff, buffsize);
 8000a2e:	887b      	ldrh	r3, [r7, #2]
 8000a30:	4619      	mov	r1, r3
 8000a32:	6878      	ldr	r0, [r7, #4]
 8000a34:	f7ff fc5c 	bl	80002f0 <Serial_log_buffer>
	Serial_log_string(" ");
 8000a38:	4826      	ldr	r0, [pc, #152]	; (8000ad4 <MQTT_receiveGetTopicandPayloadLength+0xb8>)
 8000a3a:	f7ff fc41 	bl	80002c0 <Serial_log_string>
	uint8_t * currentPos = isWordinBuff(MQTTbuff, buffsize, (uint8_t*)"+CMQTTRXSTART:");
 8000a3e:	887b      	ldrh	r3, [r7, #2]
 8000a40:	4a25      	ldr	r2, [pc, #148]	; (8000ad8 <MQTT_receiveGetTopicandPayloadLength+0xbc>)
 8000a42:	4619      	mov	r1, r3
 8000a44:	6878      	ldr	r0, [r7, #4]
 8000a46:	f7ff fc9f 	bl	8000388 <isWordinBuff>
 8000a4a:	6278      	str	r0, [r7, #36]	; 0x24

	uint16_t remainlen = getRemainsize(currentPos, MQTTbuff, buffsize);
 8000a4c:	887b      	ldrh	r3, [r7, #2]
 8000a4e:	461a      	mov	r2, r3
 8000a50:	6879      	ldr	r1, [r7, #4]
 8000a52:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000a54:	f7ff fef2 	bl	800083c <getRemainsize>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	847b      	strh	r3, [r7, #34]	; 0x22

	getBetween( (uint8_t*)",", (uint8_t*)",", currentPos, remainlen, topiclen_buff);
 8000a5c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8000a5e:	f107 0318 	add.w	r3, r7, #24
 8000a62:	9300      	str	r3, [sp, #0]
 8000a64:	4613      	mov	r3, r2
 8000a66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a68:	491c      	ldr	r1, [pc, #112]	; (8000adc <MQTT_receiveGetTopicandPayloadLength+0xc0>)
 8000a6a:	481c      	ldr	r0, [pc, #112]	; (8000adc <MQTT_receiveGetTopicandPayloadLength+0xc0>)
 8000a6c:	f7ff fef9 	bl	8000862 <getBetween>
	__MY_SIM->mqttReceive.topicLen = atoi( (char*)topiclen_buff );
 8000a70:	f107 0318 	add.w	r3, r7, #24
 8000a74:	4618      	mov	r0, r3
 8000a76:	f003 fcc9 	bl	800440c <atoi>
 8000a7a:	4602      	mov	r2, r0
 8000a7c:	4b18      	ldr	r3, [pc, #96]	; (8000ae0 <MQTT_receiveGetTopicandPayloadLength+0xc4>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	b292      	uxth	r2, r2
 8000a82:	f8a3 24ba 	strh.w	r2, [r3, #1210]	; 0x4ba

	currentPos = isWordinBuff(currentPos, remainlen,(uint8_t*)",");
 8000a86:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000a88:	4a14      	ldr	r2, [pc, #80]	; (8000adc <MQTT_receiveGetTopicandPayloadLength+0xc0>)
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000a8e:	f7ff fc7b 	bl	8000388 <isWordinBuff>
 8000a92:	6278      	str	r0, [r7, #36]	; 0x24
	currentPos ++;
 8000a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a96:	3301      	adds	r3, #1
 8000a98:	627b      	str	r3, [r7, #36]	; 0x24

	getBetween( (uint8_t*)",", (uint8_t*)"\r", currentPos, remainlen, payloadlen_buff);
 8000a9a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8000a9c:	f107 030c 	add.w	r3, r7, #12
 8000aa0:	9300      	str	r3, [sp, #0]
 8000aa2:	4613      	mov	r3, r2
 8000aa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000aa6:	490f      	ldr	r1, [pc, #60]	; (8000ae4 <MQTT_receiveGetTopicandPayloadLength+0xc8>)
 8000aa8:	480c      	ldr	r0, [pc, #48]	; (8000adc <MQTT_receiveGetTopicandPayloadLength+0xc0>)
 8000aaa:	f7ff feda 	bl	8000862 <getBetween>
	__MY_SIM->mqttReceive.payloadLen = atoi( (char*)payloadlen_buff );
 8000aae:	f107 030c 	add.w	r3, r7, #12
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f003 fcaa 	bl	800440c <atoi>
 8000ab8:	4602      	mov	r2, r0
 8000aba:	4b09      	ldr	r3, [pc, #36]	; (8000ae0 <MQTT_receiveGetTopicandPayloadLength+0xc4>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	b292      	uxth	r2, r2
 8000ac0:	f8a3 2438 	strh.w	r2, [r3, #1080]	; 0x438

	return 1;
 8000ac4:	2301      	movs	r3, #1
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	3728      	adds	r7, #40	; 0x28
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	08005138 	.word	0x08005138
 8000ad4:	08005148 	.word	0x08005148
 8000ad8:	0800514c 	.word	0x0800514c
 8000adc:	08005134 	.word	0x08005134
 8000ae0:	20000870 	.word	0x20000870
 8000ae4:	08005130 	.word	0x08005130

08000ae8 <MQTT_receiveGetTopic>:

uint8_t MQTT_receiveGetTopic (uint8_t *MQTTbuff,uint16_t buffsize)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b084      	sub	sp, #16
 8000aec:	af02      	add	r7, sp, #8
 8000aee:	6078      	str	r0, [r7, #4]
 8000af0:	460b      	mov	r3, r1
 8000af2:	807b      	strh	r3, [r7, #2]
	return getContent(CONTENT_TOPIC, MQTTbuff, buffsize, __MY_SIM->mqttReceive.topic, __MY_SIM->mqttReceive.topicLen);
 8000af4:	4b09      	ldr	r3, [pc, #36]	; (8000b1c <MQTT_receiveGetTopic+0x34>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	f203 413a 	addw	r1, r3, #1082	; 0x43a
 8000afc:	4b07      	ldr	r3, [pc, #28]	; (8000b1c <MQTT_receiveGetTopic+0x34>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	f8b3 34ba 	ldrh.w	r3, [r3, #1210]	; 0x4ba
 8000b04:	887a      	ldrh	r2, [r7, #2]
 8000b06:	9300      	str	r3, [sp, #0]
 8000b08:	460b      	mov	r3, r1
 8000b0a:	6879      	ldr	r1, [r7, #4]
 8000b0c:	2000      	movs	r0, #0
 8000b0e:	f7ff fefd 	bl	800090c <getContent>
 8000b12:	4603      	mov	r3, r0
}
 8000b14:	4618      	mov	r0, r3
 8000b16:	3708      	adds	r7, #8
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	20000870 	.word	0x20000870

08000b20 <MQTT_receiveGetPayload>:

uint8_t MQTT_receiveGetPayload (uint8_t *MQTTbuff,uint16_t buffsize)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b084      	sub	sp, #16
 8000b24:	af02      	add	r7, sp, #8
 8000b26:	6078      	str	r0, [r7, #4]
 8000b28:	460b      	mov	r3, r1
 8000b2a:	807b      	strh	r3, [r7, #2]
	return getContent(CONTENT_PAYLOAD, MQTTbuff, buffsize, __MY_SIM->mqttReceive.payload, __MY_SIM->mqttReceive.payloadLen);
 8000b2c:	4b09      	ldr	r3, [pc, #36]	; (8000b54 <MQTT_receiveGetPayload+0x34>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8000b34:	4b07      	ldr	r3, [pc, #28]	; (8000b54 <MQTT_receiveGetPayload+0x34>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	f8b3 3438 	ldrh.w	r3, [r3, #1080]	; 0x438
 8000b3c:	887a      	ldrh	r2, [r7, #2]
 8000b3e:	9300      	str	r3, [sp, #0]
 8000b40:	460b      	mov	r3, r1
 8000b42:	6879      	ldr	r1, [r7, #4]
 8000b44:	2001      	movs	r0, #1
 8000b46:	f7ff fee1 	bl	800090c <getContent>
 8000b4a:	4603      	mov	r3, r0
}
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	3708      	adds	r7, #8
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	20000870 	.word	0x20000870

08000b58 <MQTT_receive>:
uint8_t MQTT_receive(uint8_t *MQTTbuff,uint16_t buffsize)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
 8000b60:	460b      	mov	r3, r1
 8000b62:	807b      	strh	r3, [r7, #2]
	if ( !MQTT_receiveGetTopicandPayloadLength(MQTTbuff, buffsize) ) return 0;
 8000b64:	887b      	ldrh	r3, [r7, #2]
 8000b66:	4619      	mov	r1, r3
 8000b68:	6878      	ldr	r0, [r7, #4]
 8000b6a:	f7ff ff57 	bl	8000a1c <MQTT_receiveGetTopicandPayloadLength>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d101      	bne.n	8000b78 <MQTT_receive+0x20>
 8000b74:	2300      	movs	r3, #0
 8000b76:	e02b      	b.n	8000bd0 <MQTT_receive+0x78>

	memset( __MY_SIM->mqttReceive.payload, 0, MAX_PAYLOAD_LEN );
 8000b78:	4b17      	ldr	r3, [pc, #92]	; (8000bd8 <MQTT_receive+0x80>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	3338      	adds	r3, #56	; 0x38
 8000b7e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b82:	2100      	movs	r1, #0
 8000b84:	4618      	mov	r0, r3
 8000b86:	f003 fc95 	bl	80044b4 <memset>
	memset( __MY_SIM->mqttReceive.topic, 0, MAX_TOPIC_LEN );
 8000b8a:	4b13      	ldr	r3, [pc, #76]	; (8000bd8 <MQTT_receive+0x80>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	f203 433a 	addw	r3, r3, #1082	; 0x43a
 8000b92:	2280      	movs	r2, #128	; 0x80
 8000b94:	2100      	movs	r1, #0
 8000b96:	4618      	mov	r0, r3
 8000b98:	f003 fc8c 	bl	80044b4 <memset>

	if (! MQTT_receiveGetTopic(MQTTbuff, buffsize))		return 0;
 8000b9c:	887b      	ldrh	r3, [r7, #2]
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	6878      	ldr	r0, [r7, #4]
 8000ba2:	f7ff ffa1 	bl	8000ae8 <MQTT_receiveGetTopic>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d101      	bne.n	8000bb0 <MQTT_receive+0x58>
 8000bac:	2300      	movs	r3, #0
 8000bae:	e00f      	b.n	8000bd0 <MQTT_receive+0x78>

	if (! MQTT_receiveGetPayload(MQTTbuff, buffsize))	return 0;
 8000bb0:	887b      	ldrh	r3, [r7, #2]
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	6878      	ldr	r0, [r7, #4]
 8000bb6:	f7ff ffb3 	bl	8000b20 <MQTT_receiveGetPayload>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d101      	bne.n	8000bc4 <MQTT_receive+0x6c>
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	e005      	b.n	8000bd0 <MQTT_receive+0x78>

	__MY_SIM->mqttReceive.newEvent = 1;
 8000bc4:	4b04      	ldr	r3, [pc, #16]	; (8000bd8 <MQTT_receive+0x80>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	2201      	movs	r2, #1
 8000bca:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	return 1;
 8000bce:	2301      	movs	r3, #1
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	3708      	adds	r7, #8
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	20000870 	.word	0x20000870

08000bdc <init_MQTT>:
	}
	Serial_log_string("Connect to broker fail\r\n");
    return 0;
}
void init_MQTT(SIM_t *SIM)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
	__MY_SIM = SIM;
 8000be4:	4a03      	ldr	r2, [pc, #12]	; (8000bf4 <init_MQTT+0x18>)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	6013      	str	r3, [r2, #0]
}
 8000bea:	bf00      	nop
 8000bec:	370c      	adds	r7, #12
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bc80      	pop	{r7}
 8000bf2:	4770      	bx	lr
 8000bf4:	20000870 	.word	0x20000870

08000bf8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b084      	sub	sp, #16
 8000bfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000bfe:	1d3b      	adds	r3, r7, #4
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	605a      	str	r2, [r3, #4]
 8000c06:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c08:	4b18      	ldr	r3, [pc, #96]	; (8000c6c <MX_ADC1_Init+0x74>)
 8000c0a:	4a19      	ldr	r2, [pc, #100]	; (8000c70 <MX_ADC1_Init+0x78>)
 8000c0c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c0e:	4b17      	ldr	r3, [pc, #92]	; (8000c6c <MX_ADC1_Init+0x74>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c14:	4b15      	ldr	r3, [pc, #84]	; (8000c6c <MX_ADC1_Init+0x74>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c1a:	4b14      	ldr	r3, [pc, #80]	; (8000c6c <MX_ADC1_Init+0x74>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c20:	4b12      	ldr	r3, [pc, #72]	; (8000c6c <MX_ADC1_Init+0x74>)
 8000c22:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000c26:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c28:	4b10      	ldr	r3, [pc, #64]	; (8000c6c <MX_ADC1_Init+0x74>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000c2e:	4b0f      	ldr	r3, [pc, #60]	; (8000c6c <MX_ADC1_Init+0x74>)
 8000c30:	2201      	movs	r2, #1
 8000c32:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c34:	480d      	ldr	r0, [pc, #52]	; (8000c6c <MX_ADC1_Init+0x74>)
 8000c36:	f000 fe45 	bl	80018c4 <HAL_ADC_Init>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000c40:	f000 fadb 	bl	80011fa <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000c44:	2300      	movs	r3, #0
 8000c46:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c48:	2301      	movs	r3, #1
 8000c4a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c50:	1d3b      	adds	r3, r7, #4
 8000c52:	4619      	mov	r1, r3
 8000c54:	4805      	ldr	r0, [pc, #20]	; (8000c6c <MX_ADC1_Init+0x74>)
 8000c56:	f000 ff0d 	bl	8001a74 <HAL_ADC_ConfigChannel>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000c60:	f000 facb 	bl	80011fa <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c64:	bf00      	nop
 8000c66:	3710      	adds	r7, #16
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	20000874 	.word	0x20000874
 8000c70:	40012400 	.word	0x40012400

08000c74 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b088      	sub	sp, #32
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c7c:	f107 0310 	add.w	r3, r7, #16
 8000c80:	2200      	movs	r2, #0
 8000c82:	601a      	str	r2, [r3, #0]
 8000c84:	605a      	str	r2, [r3, #4]
 8000c86:	609a      	str	r2, [r3, #8]
 8000c88:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	4a14      	ldr	r2, [pc, #80]	; (8000ce0 <HAL_ADC_MspInit+0x6c>)
 8000c90:	4293      	cmp	r3, r2
 8000c92:	d121      	bne.n	8000cd8 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c94:	4b13      	ldr	r3, [pc, #76]	; (8000ce4 <HAL_ADC_MspInit+0x70>)
 8000c96:	699b      	ldr	r3, [r3, #24]
 8000c98:	4a12      	ldr	r2, [pc, #72]	; (8000ce4 <HAL_ADC_MspInit+0x70>)
 8000c9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c9e:	6193      	str	r3, [r2, #24]
 8000ca0:	4b10      	ldr	r3, [pc, #64]	; (8000ce4 <HAL_ADC_MspInit+0x70>)
 8000ca2:	699b      	ldr	r3, [r3, #24]
 8000ca4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ca8:	60fb      	str	r3, [r7, #12]
 8000caa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cac:	4b0d      	ldr	r3, [pc, #52]	; (8000ce4 <HAL_ADC_MspInit+0x70>)
 8000cae:	699b      	ldr	r3, [r3, #24]
 8000cb0:	4a0c      	ldr	r2, [pc, #48]	; (8000ce4 <HAL_ADC_MspInit+0x70>)
 8000cb2:	f043 0304 	orr.w	r3, r3, #4
 8000cb6:	6193      	str	r3, [r2, #24]
 8000cb8:	4b0a      	ldr	r3, [pc, #40]	; (8000ce4 <HAL_ADC_MspInit+0x70>)
 8000cba:	699b      	ldr	r3, [r3, #24]
 8000cbc:	f003 0304 	and.w	r3, r3, #4
 8000cc0:	60bb      	str	r3, [r7, #8]
 8000cc2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = MOTOR_SENSE1_Pin|MOTOR_SENSE2_Pin;
 8000cc4:	2303      	movs	r3, #3
 8000cc6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cc8:	2303      	movs	r3, #3
 8000cca:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ccc:	f107 0310 	add.w	r3, r7, #16
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	4805      	ldr	r0, [pc, #20]	; (8000ce8 <HAL_ADC_MspInit+0x74>)
 8000cd4:	f001 fbb8 	bl	8002448 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000cd8:	bf00      	nop
 8000cda:	3720      	adds	r7, #32
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	40012400 	.word	0x40012400
 8000ce4:	40021000 	.word	0x40021000
 8000ce8:	40010800 	.word	0x40010800

08000cec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cf2:	4b14      	ldr	r3, [pc, #80]	; (8000d44 <MX_DMA_Init+0x58>)
 8000cf4:	695b      	ldr	r3, [r3, #20]
 8000cf6:	4a13      	ldr	r2, [pc, #76]	; (8000d44 <MX_DMA_Init+0x58>)
 8000cf8:	f043 0301 	orr.w	r3, r3, #1
 8000cfc:	6153      	str	r3, [r2, #20]
 8000cfe:	4b11      	ldr	r3, [pc, #68]	; (8000d44 <MX_DMA_Init+0x58>)
 8000d00:	695b      	ldr	r3, [r3, #20]
 8000d02:	f003 0301 	and.w	r3, r3, #1
 8000d06:	607b      	str	r3, [r7, #4]
 8000d08:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	200d      	movs	r0, #13
 8000d10:	f001 f8c1 	bl	8001e96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000d14:	200d      	movs	r0, #13
 8000d16:	f001 f8da 	bl	8001ece <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	200f      	movs	r0, #15
 8000d20:	f001 f8b9 	bl	8001e96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000d24:	200f      	movs	r0, #15
 8000d26:	f001 f8d2 	bl	8001ece <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	2010      	movs	r0, #16
 8000d30:	f001 f8b1 	bl	8001e96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000d34:	2010      	movs	r0, #16
 8000d36:	f001 f8ca 	bl	8001ece <HAL_NVIC_EnableIRQ>

}
 8000d3a:	bf00      	nop
 8000d3c:	3708      	adds	r7, #8
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	40021000 	.word	0x40021000

08000d48 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b088      	sub	sp, #32
 8000d4c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d4e:	f107 0310 	add.w	r3, r7, #16
 8000d52:	2200      	movs	r2, #0
 8000d54:	601a      	str	r2, [r3, #0]
 8000d56:	605a      	str	r2, [r3, #4]
 8000d58:	609a      	str	r2, [r3, #8]
 8000d5a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d5c:	4b24      	ldr	r3, [pc, #144]	; (8000df0 <MX_GPIO_Init+0xa8>)
 8000d5e:	699b      	ldr	r3, [r3, #24]
 8000d60:	4a23      	ldr	r2, [pc, #140]	; (8000df0 <MX_GPIO_Init+0xa8>)
 8000d62:	f043 0310 	orr.w	r3, r3, #16
 8000d66:	6193      	str	r3, [r2, #24]
 8000d68:	4b21      	ldr	r3, [pc, #132]	; (8000df0 <MX_GPIO_Init+0xa8>)
 8000d6a:	699b      	ldr	r3, [r3, #24]
 8000d6c:	f003 0310 	and.w	r3, r3, #16
 8000d70:	60fb      	str	r3, [r7, #12]
 8000d72:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d74:	4b1e      	ldr	r3, [pc, #120]	; (8000df0 <MX_GPIO_Init+0xa8>)
 8000d76:	699b      	ldr	r3, [r3, #24]
 8000d78:	4a1d      	ldr	r2, [pc, #116]	; (8000df0 <MX_GPIO_Init+0xa8>)
 8000d7a:	f043 0320 	orr.w	r3, r3, #32
 8000d7e:	6193      	str	r3, [r2, #24]
 8000d80:	4b1b      	ldr	r3, [pc, #108]	; (8000df0 <MX_GPIO_Init+0xa8>)
 8000d82:	699b      	ldr	r3, [r3, #24]
 8000d84:	f003 0320 	and.w	r3, r3, #32
 8000d88:	60bb      	str	r3, [r7, #8]
 8000d8a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d8c:	4b18      	ldr	r3, [pc, #96]	; (8000df0 <MX_GPIO_Init+0xa8>)
 8000d8e:	699b      	ldr	r3, [r3, #24]
 8000d90:	4a17      	ldr	r2, [pc, #92]	; (8000df0 <MX_GPIO_Init+0xa8>)
 8000d92:	f043 0304 	orr.w	r3, r3, #4
 8000d96:	6193      	str	r3, [r2, #24]
 8000d98:	4b15      	ldr	r3, [pc, #84]	; (8000df0 <MX_GPIO_Init+0xa8>)
 8000d9a:	699b      	ldr	r3, [r3, #24]
 8000d9c:	f003 0304 	and.w	r3, r3, #4
 8000da0:	607b      	str	r3, [r7, #4]
 8000da2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000da4:	4b12      	ldr	r3, [pc, #72]	; (8000df0 <MX_GPIO_Init+0xa8>)
 8000da6:	699b      	ldr	r3, [r3, #24]
 8000da8:	4a11      	ldr	r2, [pc, #68]	; (8000df0 <MX_GPIO_Init+0xa8>)
 8000daa:	f043 0308 	orr.w	r3, r3, #8
 8000dae:	6193      	str	r3, [r2, #24]
 8000db0:	4b0f      	ldr	r3, [pc, #60]	; (8000df0 <MX_GPIO_Init+0xa8>)
 8000db2:	699b      	ldr	r3, [r3, #24]
 8000db4:	f003 0308 	and.w	r3, r3, #8
 8000db8:	603b      	str	r3, [r7, #0]
 8000dba:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dc2:	480c      	ldr	r0, [pc, #48]	; (8000df4 <MX_GPIO_Init+0xac>)
 8000dc4:	f001 fcc4 	bl	8002750 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000dc8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dcc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd6:	2302      	movs	r3, #2
 8000dd8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000dda:	f107 0310 	add.w	r3, r7, #16
 8000dde:	4619      	mov	r1, r3
 8000de0:	4804      	ldr	r0, [pc, #16]	; (8000df4 <MX_GPIO_Init+0xac>)
 8000de2:	f001 fb31 	bl	8002448 <HAL_GPIO_Init>

}
 8000de6:	bf00      	nop
 8000de8:	3720      	adds	r7, #32
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	40021000 	.word	0x40021000
 8000df4:	40011000 	.word	0x40011000

08000df8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000dfc:	4b12      	ldr	r3, [pc, #72]	; (8000e48 <MX_I2C1_Init+0x50>)
 8000dfe:	4a13      	ldr	r2, [pc, #76]	; (8000e4c <MX_I2C1_Init+0x54>)
 8000e00:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000e02:	4b11      	ldr	r3, [pc, #68]	; (8000e48 <MX_I2C1_Init+0x50>)
 8000e04:	4a12      	ldr	r2, [pc, #72]	; (8000e50 <MX_I2C1_Init+0x58>)
 8000e06:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e08:	4b0f      	ldr	r3, [pc, #60]	; (8000e48 <MX_I2C1_Init+0x50>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000e0e:	4b0e      	ldr	r3, [pc, #56]	; (8000e48 <MX_I2C1_Init+0x50>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e14:	4b0c      	ldr	r3, [pc, #48]	; (8000e48 <MX_I2C1_Init+0x50>)
 8000e16:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e1a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e1c:	4b0a      	ldr	r3, [pc, #40]	; (8000e48 <MX_I2C1_Init+0x50>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000e22:	4b09      	ldr	r3, [pc, #36]	; (8000e48 <MX_I2C1_Init+0x50>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e28:	4b07      	ldr	r3, [pc, #28]	; (8000e48 <MX_I2C1_Init+0x50>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e2e:	4b06      	ldr	r3, [pc, #24]	; (8000e48 <MX_I2C1_Init+0x50>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e34:	4804      	ldr	r0, [pc, #16]	; (8000e48 <MX_I2C1_Init+0x50>)
 8000e36:	f001 fca3 	bl	8002780 <HAL_I2C_Init>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000e40:	f000 f9db 	bl	80011fa <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e44:	bf00      	nop
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	200008a4 	.word	0x200008a4
 8000e4c:	40005400 	.word	0x40005400
 8000e50:	00061a80 	.word	0x00061a80

08000e54 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b08a      	sub	sp, #40	; 0x28
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e5c:	f107 0314 	add.w	r3, r7, #20
 8000e60:	2200      	movs	r2, #0
 8000e62:	601a      	str	r2, [r3, #0]
 8000e64:	605a      	str	r2, [r3, #4]
 8000e66:	609a      	str	r2, [r3, #8]
 8000e68:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4a1d      	ldr	r2, [pc, #116]	; (8000ee4 <HAL_I2C_MspInit+0x90>)
 8000e70:	4293      	cmp	r3, r2
 8000e72:	d132      	bne.n	8000eda <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e74:	4b1c      	ldr	r3, [pc, #112]	; (8000ee8 <HAL_I2C_MspInit+0x94>)
 8000e76:	699b      	ldr	r3, [r3, #24]
 8000e78:	4a1b      	ldr	r2, [pc, #108]	; (8000ee8 <HAL_I2C_MspInit+0x94>)
 8000e7a:	f043 0308 	orr.w	r3, r3, #8
 8000e7e:	6193      	str	r3, [r2, #24]
 8000e80:	4b19      	ldr	r3, [pc, #100]	; (8000ee8 <HAL_I2C_MspInit+0x94>)
 8000e82:	699b      	ldr	r3, [r3, #24]
 8000e84:	f003 0308 	and.w	r3, r3, #8
 8000e88:	613b      	str	r3, [r7, #16]
 8000e8a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e8c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e92:	2312      	movs	r3, #18
 8000e94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e96:	2303      	movs	r3, #3
 8000e98:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e9a:	f107 0314 	add.w	r3, r7, #20
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	4812      	ldr	r0, [pc, #72]	; (8000eec <HAL_I2C_MspInit+0x98>)
 8000ea2:	f001 fad1 	bl	8002448 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8000ea6:	4b12      	ldr	r3, [pc, #72]	; (8000ef0 <HAL_I2C_MspInit+0x9c>)
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	627b      	str	r3, [r7, #36]	; 0x24
 8000eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eae:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000eb2:	627b      	str	r3, [r7, #36]	; 0x24
 8000eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eb6:	f043 0302 	orr.w	r3, r3, #2
 8000eba:	627b      	str	r3, [r7, #36]	; 0x24
 8000ebc:	4a0c      	ldr	r2, [pc, #48]	; (8000ef0 <HAL_I2C_MspInit+0x9c>)
 8000ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ec0:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ec2:	4b09      	ldr	r3, [pc, #36]	; (8000ee8 <HAL_I2C_MspInit+0x94>)
 8000ec4:	69db      	ldr	r3, [r3, #28]
 8000ec6:	4a08      	ldr	r2, [pc, #32]	; (8000ee8 <HAL_I2C_MspInit+0x94>)
 8000ec8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ecc:	61d3      	str	r3, [r2, #28]
 8000ece:	4b06      	ldr	r3, [pc, #24]	; (8000ee8 <HAL_I2C_MspInit+0x94>)
 8000ed0:	69db      	ldr	r3, [r3, #28]
 8000ed2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ed6:	60fb      	str	r3, [r7, #12]
 8000ed8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000eda:	bf00      	nop
 8000edc:	3728      	adds	r7, #40	; 0x28
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	40005400 	.word	0x40005400
 8000ee8:	40021000 	.word	0x40021000
 8000eec:	40010c00 	.word	0x40010c00
 8000ef0:	40010000 	.word	0x40010000

08000ef4 <create_node>:
#include "linkedlist.h"

SensorNode_t SSnode_default = SENSORNODE_T_INIT;

Node* create_node(SensorNode_t  SSnode)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b086      	sub	sp, #24
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	1d3b      	adds	r3, r7, #4
 8000efc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    Node* node = (Node*)malloc(sizeof(Node));
 8000f00:	2010      	movs	r0, #16
 8000f02:	f003 fab1 	bl	8004468 <malloc>
 8000f06:	4603      	mov	r3, r0
 8000f08:	617b      	str	r3, [r7, #20]
    node->SSnode= SSnode;
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	1d3a      	adds	r2, r7, #4
 8000f0e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f10:	c303      	stmia	r3!, {r0, r1}
 8000f12:	801a      	strh	r2, [r3, #0]
    node->next = NULL;
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	2200      	movs	r2, #0
 8000f18:	60da      	str	r2, [r3, #12]
    return node;
 8000f1a:	697b      	ldr	r3, [r7, #20]
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	3718      	adds	r7, #24
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}

08000f24 <list_create>:

s_list * list_create(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
    s_list *list = (s_list*)malloc(sizeof(s_list));
 8000f2a:	200c      	movs	r0, #12
 8000f2c:	f003 fa9c 	bl	8004468 <malloc>
 8000f30:	4603      	mov	r3, r0
 8000f32:	607b      	str	r3, [r7, #4]
//    assert(list != NULL);
    list->head = create_node(SSnode_default);
 8000f34:	4b0e      	ldr	r3, [pc, #56]	; (8000f70 <list_create+0x4c>)
 8000f36:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000f3a:	f7ff ffdb 	bl	8000ef4 <create_node>
 8000f3e:	4602      	mov	r2, r0
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	601a      	str	r2, [r3, #0]
    list->tail = create_node(SSnode_default);
 8000f44:	4b0a      	ldr	r3, [pc, #40]	; (8000f70 <list_create+0x4c>)
 8000f46:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000f4a:	f7ff ffd3 	bl	8000ef4 <create_node>
 8000f4e:	4602      	mov	r2, r0
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	605a      	str	r2, [r3, #4]
    list->head->next = list->tail;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	687a      	ldr	r2, [r7, #4]
 8000f5a:	6852      	ldr	r2, [r2, #4]
 8000f5c:	60da      	str	r2, [r3, #12]
    list->length = 0;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	2200      	movs	r2, #0
 8000f62:	609a      	str	r2, [r3, #8]
    return list;
 8000f64:	687b      	ldr	r3, [r7, #4]
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	3708      	adds	r7, #8
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	20000000 	.word	0x20000000

08000f74 <list_append>:

void list_append (s_list* list, SensorNode_t SSnode_data)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b086      	sub	sp, #24
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	60f8      	str	r0, [r7, #12]
 8000f7c:	4638      	mov	r0, r7
 8000f7e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	list->tail->SSnode = SSnode_data;
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	463a      	mov	r2, r7
 8000f88:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f8a:	c303      	stmia	r3!, {r0, r1}
 8000f8c:	801a      	strh	r2, [r3, #0]
	Node *new_tail = create_node(SSnode_default);
 8000f8e:	4b0b      	ldr	r3, [pc, #44]	; (8000fbc <list_append+0x48>)
 8000f90:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000f94:	f7ff ffae 	bl	8000ef4 <create_node>
 8000f98:	6178      	str	r0, [r7, #20]
	list->tail->next = new_tail;
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	697a      	ldr	r2, [r7, #20]
 8000fa0:	60da      	str	r2, [r3, #12]
	list->tail = new_tail;
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	697a      	ldr	r2, [r7, #20]
 8000fa6:	605a      	str	r2, [r3, #4]
	list->length += 1;
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	689b      	ldr	r3, [r3, #8]
 8000fac:	1c5a      	adds	r2, r3, #1
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	609a      	str	r2, [r3, #8]
}
 8000fb2:	bf00      	nop
 8000fb4:	3718      	adds	r7, #24
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	20000000 	.word	0x20000000

08000fc0 <HAL_UARTEx_RxEventCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	460b      	mov	r3, r1
 8000fca:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == __SIM_UART->Instance )
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681a      	ldr	r2, [r3, #0]
 8000fd0:	4b0d      	ldr	r3, [pc, #52]	; (8001008 <HAL_UARTEx_RxEventCallback+0x48>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	429a      	cmp	r2, r3
 8000fd8:	d103      	bne.n	8000fe2 <HAL_UARTEx_RxEventCallback+0x22>
	{
		SIM_callback(Size);
 8000fda:	887b      	ldrh	r3, [r7, #2]
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f7ff fa43 	bl	8000468 <SIM_callback>
	}
	if (huart->Instance== __SCFG_UART->Instance)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681a      	ldr	r2, [r3, #0]
 8000fe6:	4b09      	ldr	r3, [pc, #36]	; (800100c <HAL_UARTEx_RxEventCallback+0x4c>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	429a      	cmp	r2, r3
 8000fee:	d106      	bne.n	8000ffe <HAL_UARTEx_RxEventCallback+0x3e>
	{
		isDataAvailable_CFG =1;
 8000ff0:	4b07      	ldr	r3, [pc, #28]	; (8001010 <HAL_UARTEx_RxEventCallback+0x50>)
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	701a      	strb	r2, [r3, #0]
		Serial_CFG_Callback(Size);
 8000ff6:	887b      	ldrh	r3, [r7, #2]
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f7ff f8e3 	bl	80001c4 <Serial_CFG_Callback>
	}
}
 8000ffe:	bf00      	nop
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	200000e8 	.word	0x200000e8
 800100c:	200000a8 	.word	0x200000a8
 8001010:	20000db4 	.word	0x20000db4

08001014 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b086      	sub	sp, #24
 8001018:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800101a:	f000 fbcd 	bl	80017b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800101e:	f000 f891 	bl	8001144 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001022:	f7ff fe91 	bl	8000d48 <MX_GPIO_Init>
  MX_DMA_Init();
 8001026:	f7ff fe61 	bl	8000cec <MX_DMA_Init>
  MX_USART1_UART_Init();
 800102a:	f000 f9bd 	bl	80013a8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800102e:	f000 f9e5 	bl	80013fc <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001032:	f7ff fee1 	bl	8000df8 <MX_I2C1_Init>
  MX_ADC1_Init();
 8001036:	f7ff fddf 	bl	8000bf8 <MX_ADC1_Init>
  MX_USART3_UART_Init();
 800103a:	f000 fa09 	bl	8001450 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  SSnode_list =list_create();
 800103e:	f7ff ff71 	bl	8000f24 <list_create>
 8001042:	4603      	mov	r3, r0
 8001044:	4a34      	ldr	r2, [pc, #208]	; (8001118 <main+0x104>)
 8001046:	6013      	str	r3, [r2, #0]
  SensorNode_t firstSensornode = {0x51, 0, V_p, 0, SENSOR_ACTIVE};
 8001048:	4a34      	ldr	r2, [pc, #208]	; (800111c <main+0x108>)
 800104a:	f107 030c 	add.w	r3, r7, #12
 800104e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001050:	c303      	stmia	r3!, {r0, r1}
 8001052:	801a      	strh	r2, [r3, #0]
  list_append(SSnode_list, firstSensornode);
 8001054:	4b30      	ldr	r3, [pc, #192]	; (8001118 <main+0x104>)
 8001056:	6818      	ldr	r0, [r3, #0]
 8001058:	f107 030c 	add.w	r3, r7, #12
 800105c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800105e:	f7ff ff89 	bl	8000f74 <list_append>
  myStation.ssNode_list = SSnode_list;
 8001062:	4b2d      	ldr	r3, [pc, #180]	; (8001118 <main+0x104>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4a2e      	ldr	r2, [pc, #184]	; (8001120 <main+0x10c>)
 8001068:	6093      	str	r3, [r2, #8]
//   ReadIDfromFlash(&myStation.stID);

   mySIM.mqttServer.host = "tcp://broker.hivemq.com";
 800106a:	4b2e      	ldr	r3, [pc, #184]	; (8001124 <main+0x110>)
 800106c:	4a2e      	ldr	r2, [pc, #184]	; (8001128 <main+0x114>)
 800106e:	60da      	str	r2, [r3, #12]
   mySIM.mqttServer.port = 1883;
 8001070:	4b2c      	ldr	r3, [pc, #176]	; (8001124 <main+0x110>)
 8001072:	f240 725b 	movw	r2, #1883	; 0x75b
 8001076:	831a      	strh	r2, [r3, #24]
   mySIM.mqttServer.willtopic = "unnormal_disconnect";
 8001078:	4b2a      	ldr	r3, [pc, #168]	; (8001124 <main+0x110>)
 800107a:	4a2c      	ldr	r2, [pc, #176]	; (800112c <main+0x118>)
 800107c:	611a      	str	r2, [r3, #16]
   mySIM.mqttServer.willmsg = (uint8_t*)malloc(sizeof(myStation.stID));
 800107e:	2001      	movs	r0, #1
 8001080:	f003 f9f2 	bl	8004468 <malloc>
 8001084:	4603      	mov	r3, r0
 8001086:	461a      	mov	r2, r3
 8001088:	4b26      	ldr	r3, [pc, #152]	; (8001124 <main+0x110>)
 800108a:	615a      	str	r2, [r3, #20]
   sprintf((char*)mySIM.mqttServer.willmsg,"%d",myStation.stID);
 800108c:	4b25      	ldr	r3, [pc, #148]	; (8001124 <main+0x110>)
 800108e:	695b      	ldr	r3, [r3, #20]
 8001090:	4a23      	ldr	r2, [pc, #140]	; (8001120 <main+0x10c>)
 8001092:	7812      	ldrb	r2, [r2, #0]
 8001094:	4926      	ldr	r1, [pc, #152]	; (8001130 <main+0x11c>)
 8001096:	4618      	mov	r0, r3
 8001098:	f003 fb00 	bl	800469c <siprintf>
   mySIM.mqttClient.keepAliveInterval = 120;
 800109c:	4b21      	ldr	r3, [pc, #132]	; (8001124 <main+0x110>)
 800109e:	2278      	movs	r2, #120	; 0x78
 80010a0:	851a      	strh	r2, [r3, #40]	; 0x28
   mySIM.mqttClient.clientID = (char*)malloc(sizeof(myStation.stID));
 80010a2:	2001      	movs	r0, #1
 80010a4:	f003 f9e0 	bl	8004468 <malloc>
 80010a8:	4603      	mov	r3, r0
 80010aa:	461a      	mov	r2, r3
 80010ac:	4b1d      	ldr	r3, [pc, #116]	; (8001124 <main+0x110>)
 80010ae:	625a      	str	r2, [r3, #36]	; 0x24
   sprintf((char*)mySIM.mqttClient.clientID,"%d",myStation.stID);
 80010b0:	4b1c      	ldr	r3, [pc, #112]	; (8001124 <main+0x110>)
 80010b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010b4:	4a1a      	ldr	r2, [pc, #104]	; (8001120 <main+0x10c>)
 80010b6:	7812      	ldrb	r2, [r2, #0]
 80010b8:	491d      	ldr	r1, [pc, #116]	; (8001130 <main+0x11c>)
 80010ba:	4618      	mov	r0, r3
 80010bc:	f003 faee 	bl	800469c <siprintf>
   mySIM.mqttReceive.qos =1;
 80010c0:	4b18      	ldr	r3, [pc, #96]	; (8001124 <main+0x110>)
 80010c2:	2201      	movs	r2, #1
 80010c4:	631a      	str	r2, [r3, #48]	; 0x30
   mySIM.mqttServer.connect=0;
 80010c6:	4b17      	ldr	r3, [pc, #92]	; (8001124 <main+0x110>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	769a      	strb	r2, [r3, #26]

//  initSerial_CFG(&huart2,&hdma_usart2_rx);
  initSIM(&huart1, &hdma_usart1_rx, &mySIM);
 80010cc:	4a15      	ldr	r2, [pc, #84]	; (8001124 <main+0x110>)
 80010ce:	4919      	ldr	r1, [pc, #100]	; (8001134 <main+0x120>)
 80010d0:	4819      	ldr	r0, [pc, #100]	; (8001138 <main+0x124>)
 80010d2:	f7ff f921 	bl	8000318 <initSIM>

  // Init Serial log
  init_Serial_log(&huart2);
 80010d6:	4819      	ldr	r0, [pc, #100]	; (800113c <main+0x128>)
 80010d8:	f7ff f8e4 	bl	80002a4 <init_Serial_log>

  // Init MQTT app
  initApp_MQTT();
 80010dc:	f7ff f83e 	bl	800015c <initApp_MQTT>

  // Init RTC module (DS3231)
  DS3231_Init(&hi2c1);
 80010e0:	4817      	ldr	r0, [pc, #92]	; (8001140 <main+0x12c>)
 80010e2:	f7ff fb9d 	bl	8000820 <DS3231_Init>
//  myRTC.Min = 21;
//  myRTC.Sec = 0;
//  DS3231_SetTime(&myRTC);

  uint8_t crcbuffer [10];
  crcbuffer[0] = 0xF1;
 80010e6:	23f1      	movs	r3, #241	; 0xf1
 80010e8:	703b      	strb	r3, [r7, #0]
  crcbuffer[1] = 0x12;
 80010ea:	2312      	movs	r3, #18
 80010ec:	707b      	strb	r3, [r7, #1]
  crcbuffer[2] = 0x02;
 80010ee:	2302      	movs	r3, #2
 80010f0:	70bb      	strb	r3, [r7, #2]
  crcbuffer[3] = 0x8A;
 80010f2:	238a      	movs	r3, #138	; 0x8a
 80010f4:	70fb      	strb	r3, [r7, #3]
  crcbuffer[4] = 0x32;
 80010f6:	2332      	movs	r3, #50	; 0x32
 80010f8:	713b      	strb	r3, [r7, #4]
  crcbuffer[5] = 0x47;
 80010fa:	2347      	movs	r3, #71	; 0x47
 80010fc:	717b      	strb	r3, [r7, #5]
  crcbuffer[6] = 0x2F;
 80010fe:	232f      	movs	r3, #47	; 0x2f
 8001100:	71bb      	strb	r3, [r7, #6]
  crcbuffer[7] = 0x54;
 8001102:	2354      	movs	r3, #84	; 0x54
 8001104:	71fb      	strb	r3, [r7, #7]
  crcbuffer[8] = 0x8F;
 8001106:	238f      	movs	r3, #143	; 0x8f
 8001108:	723b      	strb	r3, [r7, #8]
  crcbuffer[9] = 0x05;
 800110a:	2305      	movs	r3, #5
 800110c:	727b      	strb	r3, [r7, #9]
//	 }
//	  uint8_t len = sprintf( (char*)RTC_buffer, "%d/%d/%d %d:%d:%d\r\n",
//			  myRTC.Date, myRTC.Month, myRTC.Year, myRTC.Hour, myRTC.Min, myRTC.Sec);
//	  Serial_log_buffer(RTC_buffer, len);
//	  processApp_MQTT();
	  HAL_Delay(5000);
 800110e:	f241 3088 	movw	r0, #5000	; 0x1388
 8001112:	f000 fbb3 	bl	800187c <HAL_Delay>
 8001116:	e7fa      	b.n	800110e <main+0xfa>
 8001118:	20000db8 	.word	0x20000db8
 800111c:	080054ac 	.word	0x080054ac
 8001120:	2000000c 	.word	0x2000000c
 8001124:	200008f8 	.word	0x200008f8
 8001128:	0800547c 	.word	0x0800547c
 800112c:	08005494 	.word	0x08005494
 8001130:	080054a8 	.word	0x080054a8
 8001134:	20000e98 	.word	0x20000e98
 8001138:	20000dc0 	.word	0x20000dc0
 800113c:	20000e08 	.word	0x20000e08
 8001140:	200008a4 	.word	0x200008a4

08001144 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b094      	sub	sp, #80	; 0x50
 8001148:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800114a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800114e:	2228      	movs	r2, #40	; 0x28
 8001150:	2100      	movs	r1, #0
 8001152:	4618      	mov	r0, r3
 8001154:	f003 f9ae 	bl	80044b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001158:	f107 0314 	add.w	r3, r7, #20
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	605a      	str	r2, [r3, #4]
 8001162:	609a      	str	r2, [r3, #8]
 8001164:	60da      	str	r2, [r3, #12]
 8001166:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001168:	1d3b      	adds	r3, r7, #4
 800116a:	2200      	movs	r2, #0
 800116c:	601a      	str	r2, [r3, #0]
 800116e:	605a      	str	r2, [r3, #4]
 8001170:	609a      	str	r2, [r3, #8]
 8001172:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001174:	2301      	movs	r3, #1
 8001176:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001178:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800117c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800117e:	2300      	movs	r3, #0
 8001180:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001182:	2301      	movs	r3, #1
 8001184:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001186:	2302      	movs	r3, #2
 8001188:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800118a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800118e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001190:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001194:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001196:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800119a:	4618      	mov	r0, r3
 800119c:	f001 fc34 	bl	8002a08 <HAL_RCC_OscConfig>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <SystemClock_Config+0x66>
  {
    Error_Handler();
 80011a6:	f000 f828 	bl	80011fa <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011aa:	230f      	movs	r3, #15
 80011ac:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011ae:	2302      	movs	r3, #2
 80011b0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011b2:	2300      	movs	r3, #0
 80011b4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011ba:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011bc:	2300      	movs	r3, #0
 80011be:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011c0:	f107 0314 	add.w	r3, r7, #20
 80011c4:	2102      	movs	r1, #2
 80011c6:	4618      	mov	r0, r3
 80011c8:	f001 fea0 	bl	8002f0c <HAL_RCC_ClockConfig>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80011d2:	f000 f812 	bl	80011fa <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80011d6:	2302      	movs	r3, #2
 80011d8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80011da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80011de:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011e0:	1d3b      	adds	r3, r7, #4
 80011e2:	4618      	mov	r0, r3
 80011e4:	f002 f820 	bl	8003228 <HAL_RCCEx_PeriphCLKConfig>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80011ee:	f000 f804 	bl	80011fa <Error_Handler>
  }
}
 80011f2:	bf00      	nop
 80011f4:	3750      	adds	r7, #80	; 0x50
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}

080011fa <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011fa:	b480      	push	{r7}
 80011fc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011fe:	b672      	cpsid	i
}
 8001200:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001202:	e7fe      	b.n	8001202 <Error_Handler+0x8>

08001204 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001204:	b480      	push	{r7}
 8001206:	b085      	sub	sp, #20
 8001208:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800120a:	4b15      	ldr	r3, [pc, #84]	; (8001260 <HAL_MspInit+0x5c>)
 800120c:	699b      	ldr	r3, [r3, #24]
 800120e:	4a14      	ldr	r2, [pc, #80]	; (8001260 <HAL_MspInit+0x5c>)
 8001210:	f043 0301 	orr.w	r3, r3, #1
 8001214:	6193      	str	r3, [r2, #24]
 8001216:	4b12      	ldr	r3, [pc, #72]	; (8001260 <HAL_MspInit+0x5c>)
 8001218:	699b      	ldr	r3, [r3, #24]
 800121a:	f003 0301 	and.w	r3, r3, #1
 800121e:	60bb      	str	r3, [r7, #8]
 8001220:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001222:	4b0f      	ldr	r3, [pc, #60]	; (8001260 <HAL_MspInit+0x5c>)
 8001224:	69db      	ldr	r3, [r3, #28]
 8001226:	4a0e      	ldr	r2, [pc, #56]	; (8001260 <HAL_MspInit+0x5c>)
 8001228:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800122c:	61d3      	str	r3, [r2, #28]
 800122e:	4b0c      	ldr	r3, [pc, #48]	; (8001260 <HAL_MspInit+0x5c>)
 8001230:	69db      	ldr	r3, [r3, #28]
 8001232:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001236:	607b      	str	r3, [r7, #4]
 8001238:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800123a:	4b0a      	ldr	r3, [pc, #40]	; (8001264 <HAL_MspInit+0x60>)
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	60fb      	str	r3, [r7, #12]
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001246:	60fb      	str	r3, [r7, #12]
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800124e:	60fb      	str	r3, [r7, #12]
 8001250:	4a04      	ldr	r2, [pc, #16]	; (8001264 <HAL_MspInit+0x60>)
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001256:	bf00      	nop
 8001258:	3714      	adds	r7, #20
 800125a:	46bd      	mov	sp, r7
 800125c:	bc80      	pop	{r7}
 800125e:	4770      	bx	lr
 8001260:	40021000 	.word	0x40021000
 8001264:	40010000 	.word	0x40010000

08001268 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800126c:	e7fe      	b.n	800126c <NMI_Handler+0x4>

0800126e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800126e:	b480      	push	{r7}
 8001270:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001272:	e7fe      	b.n	8001272 <HardFault_Handler+0x4>

08001274 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001278:	e7fe      	b.n	8001278 <MemManage_Handler+0x4>

0800127a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800127a:	b480      	push	{r7}
 800127c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800127e:	e7fe      	b.n	800127e <BusFault_Handler+0x4>

08001280 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001284:	e7fe      	b.n	8001284 <UsageFault_Handler+0x4>

08001286 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001286:	b480      	push	{r7}
 8001288:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800128a:	bf00      	nop
 800128c:	46bd      	mov	sp, r7
 800128e:	bc80      	pop	{r7}
 8001290:	4770      	bx	lr

08001292 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001292:	b480      	push	{r7}
 8001294:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001296:	bf00      	nop
 8001298:	46bd      	mov	sp, r7
 800129a:	bc80      	pop	{r7}
 800129c:	4770      	bx	lr

0800129e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800129e:	b480      	push	{r7}
 80012a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012a2:	bf00      	nop
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bc80      	pop	{r7}
 80012a8:	4770      	bx	lr

080012aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012aa:	b580      	push	{r7, lr}
 80012ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012ae:	f000 fac9 	bl	8001844 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012b2:	bf00      	nop
 80012b4:	bd80      	pop	{r7, pc}
	...

080012b8 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80012bc:	4802      	ldr	r0, [pc, #8]	; (80012c8 <DMA1_Channel3_IRQHandler+0x10>)
 80012be:	f000 ff8f 	bl	80021e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80012c2:	bf00      	nop
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	20000f20 	.word	0x20000f20

080012cc <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80012d0:	4802      	ldr	r0, [pc, #8]	; (80012dc <DMA1_Channel5_IRQHandler+0x10>)
 80012d2:	f000 ff85 	bl	80021e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80012d6:	bf00      	nop
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	20000e98 	.word	0x20000e98

080012e0 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80012e4:	4802      	ldr	r0, [pc, #8]	; (80012f0 <DMA1_Channel6_IRQHandler+0x10>)
 80012e6:	f000 ff7b 	bl	80021e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80012ea:	bf00      	nop
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	20000edc 	.word	0x20000edc

080012f4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80012f8:	4802      	ldr	r0, [pc, #8]	; (8001304 <USART1_IRQHandler+0x10>)
 80012fa:	f002 f97b 	bl	80035f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80012fe:	bf00      	nop
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	20000dc0 	.word	0x20000dc0

08001308 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800130c:	4802      	ldr	r0, [pc, #8]	; (8001318 <USART2_IRQHandler+0x10>)
 800130e:	f002 f971 	bl	80035f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001312:	bf00      	nop
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	20000e08 	.word	0x20000e08

0800131c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001320:	4802      	ldr	r0, [pc, #8]	; (800132c <USART3_IRQHandler+0x10>)
 8001322:	f002 f967 	bl	80035f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001326:	bf00      	nop
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	20000e50 	.word	0x20000e50

08001330 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b086      	sub	sp, #24
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001338:	4a14      	ldr	r2, [pc, #80]	; (800138c <_sbrk+0x5c>)
 800133a:	4b15      	ldr	r3, [pc, #84]	; (8001390 <_sbrk+0x60>)
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001344:	4b13      	ldr	r3, [pc, #76]	; (8001394 <_sbrk+0x64>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d102      	bne.n	8001352 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800134c:	4b11      	ldr	r3, [pc, #68]	; (8001394 <_sbrk+0x64>)
 800134e:	4a12      	ldr	r2, [pc, #72]	; (8001398 <_sbrk+0x68>)
 8001350:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001352:	4b10      	ldr	r3, [pc, #64]	; (8001394 <_sbrk+0x64>)
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4413      	add	r3, r2
 800135a:	693a      	ldr	r2, [r7, #16]
 800135c:	429a      	cmp	r2, r3
 800135e:	d207      	bcs.n	8001370 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001360:	f003 f858 	bl	8004414 <__errno>
 8001364:	4603      	mov	r3, r0
 8001366:	220c      	movs	r2, #12
 8001368:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800136a:	f04f 33ff 	mov.w	r3, #4294967295
 800136e:	e009      	b.n	8001384 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001370:	4b08      	ldr	r3, [pc, #32]	; (8001394 <_sbrk+0x64>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001376:	4b07      	ldr	r3, [pc, #28]	; (8001394 <_sbrk+0x64>)
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4413      	add	r3, r2
 800137e:	4a05      	ldr	r2, [pc, #20]	; (8001394 <_sbrk+0x64>)
 8001380:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001382:	68fb      	ldr	r3, [r7, #12]
}
 8001384:	4618      	mov	r0, r3
 8001386:	3718      	adds	r7, #24
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	20005000 	.word	0x20005000
 8001390:	00000400 	.word	0x00000400
 8001394:	20000dbc 	.word	0x20000dbc
 8001398:	20000f78 	.word	0x20000f78

0800139c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013a0:	bf00      	nop
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bc80      	pop	{r7}
 80013a6:	4770      	bx	lr

080013a8 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80013ac:	4b11      	ldr	r3, [pc, #68]	; (80013f4 <MX_USART1_UART_Init+0x4c>)
 80013ae:	4a12      	ldr	r2, [pc, #72]	; (80013f8 <MX_USART1_UART_Init+0x50>)
 80013b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80013b2:	4b10      	ldr	r3, [pc, #64]	; (80013f4 <MX_USART1_UART_Init+0x4c>)
 80013b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013ba:	4b0e      	ldr	r3, [pc, #56]	; (80013f4 <MX_USART1_UART_Init+0x4c>)
 80013bc:	2200      	movs	r2, #0
 80013be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013c0:	4b0c      	ldr	r3, [pc, #48]	; (80013f4 <MX_USART1_UART_Init+0x4c>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013c6:	4b0b      	ldr	r3, [pc, #44]	; (80013f4 <MX_USART1_UART_Init+0x4c>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013cc:	4b09      	ldr	r3, [pc, #36]	; (80013f4 <MX_USART1_UART_Init+0x4c>)
 80013ce:	220c      	movs	r2, #12
 80013d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013d2:	4b08      	ldr	r3, [pc, #32]	; (80013f4 <MX_USART1_UART_Init+0x4c>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013d8:	4b06      	ldr	r3, [pc, #24]	; (80013f4 <MX_USART1_UART_Init+0x4c>)
 80013da:	2200      	movs	r2, #0
 80013dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013de:	4805      	ldr	r0, [pc, #20]	; (80013f4 <MX_USART1_UART_Init+0x4c>)
 80013e0:	f001 ffd8 	bl	8003394 <HAL_UART_Init>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80013ea:	f7ff ff06 	bl	80011fa <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80013ee:	bf00      	nop
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	20000dc0 	.word	0x20000dc0
 80013f8:	40013800 	.word	0x40013800

080013fc <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001400:	4b11      	ldr	r3, [pc, #68]	; (8001448 <MX_USART2_UART_Init+0x4c>)
 8001402:	4a12      	ldr	r2, [pc, #72]	; (800144c <MX_USART2_UART_Init+0x50>)
 8001404:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001406:	4b10      	ldr	r3, [pc, #64]	; (8001448 <MX_USART2_UART_Init+0x4c>)
 8001408:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800140c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800140e:	4b0e      	ldr	r3, [pc, #56]	; (8001448 <MX_USART2_UART_Init+0x4c>)
 8001410:	2200      	movs	r2, #0
 8001412:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001414:	4b0c      	ldr	r3, [pc, #48]	; (8001448 <MX_USART2_UART_Init+0x4c>)
 8001416:	2200      	movs	r2, #0
 8001418:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800141a:	4b0b      	ldr	r3, [pc, #44]	; (8001448 <MX_USART2_UART_Init+0x4c>)
 800141c:	2200      	movs	r2, #0
 800141e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001420:	4b09      	ldr	r3, [pc, #36]	; (8001448 <MX_USART2_UART_Init+0x4c>)
 8001422:	220c      	movs	r2, #12
 8001424:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001426:	4b08      	ldr	r3, [pc, #32]	; (8001448 <MX_USART2_UART_Init+0x4c>)
 8001428:	2200      	movs	r2, #0
 800142a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800142c:	4b06      	ldr	r3, [pc, #24]	; (8001448 <MX_USART2_UART_Init+0x4c>)
 800142e:	2200      	movs	r2, #0
 8001430:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001432:	4805      	ldr	r0, [pc, #20]	; (8001448 <MX_USART2_UART_Init+0x4c>)
 8001434:	f001 ffae 	bl	8003394 <HAL_UART_Init>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800143e:	f7ff fedc 	bl	80011fa <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001442:	bf00      	nop
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	20000e08 	.word	0x20000e08
 800144c:	40004400 	.word	0x40004400

08001450 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001454:	4b11      	ldr	r3, [pc, #68]	; (800149c <MX_USART3_UART_Init+0x4c>)
 8001456:	4a12      	ldr	r2, [pc, #72]	; (80014a0 <MX_USART3_UART_Init+0x50>)
 8001458:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800145a:	4b10      	ldr	r3, [pc, #64]	; (800149c <MX_USART3_UART_Init+0x4c>)
 800145c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001460:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001462:	4b0e      	ldr	r3, [pc, #56]	; (800149c <MX_USART3_UART_Init+0x4c>)
 8001464:	2200      	movs	r2, #0
 8001466:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001468:	4b0c      	ldr	r3, [pc, #48]	; (800149c <MX_USART3_UART_Init+0x4c>)
 800146a:	2200      	movs	r2, #0
 800146c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800146e:	4b0b      	ldr	r3, [pc, #44]	; (800149c <MX_USART3_UART_Init+0x4c>)
 8001470:	2200      	movs	r2, #0
 8001472:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001474:	4b09      	ldr	r3, [pc, #36]	; (800149c <MX_USART3_UART_Init+0x4c>)
 8001476:	220c      	movs	r2, #12
 8001478:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800147a:	4b08      	ldr	r3, [pc, #32]	; (800149c <MX_USART3_UART_Init+0x4c>)
 800147c:	2200      	movs	r2, #0
 800147e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001480:	4b06      	ldr	r3, [pc, #24]	; (800149c <MX_USART3_UART_Init+0x4c>)
 8001482:	2200      	movs	r2, #0
 8001484:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001486:	4805      	ldr	r0, [pc, #20]	; (800149c <MX_USART3_UART_Init+0x4c>)
 8001488:	f001 ff84 	bl	8003394 <HAL_UART_Init>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001492:	f7ff feb2 	bl	80011fa <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001496:	bf00      	nop
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	20000e50 	.word	0x20000e50
 80014a0:	40004800 	.word	0x40004800

080014a4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b08e      	sub	sp, #56	; 0x38
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014b0:	2200      	movs	r2, #0
 80014b2:	601a      	str	r2, [r3, #0]
 80014b4:	605a      	str	r2, [r3, #4]
 80014b6:	609a      	str	r2, [r3, #8]
 80014b8:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a9e      	ldr	r2, [pc, #632]	; (8001738 <HAL_UART_MspInit+0x294>)
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d16c      	bne.n	800159e <HAL_UART_MspInit+0xfa>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80014c4:	4b9d      	ldr	r3, [pc, #628]	; (800173c <HAL_UART_MspInit+0x298>)
 80014c6:	699b      	ldr	r3, [r3, #24]
 80014c8:	4a9c      	ldr	r2, [pc, #624]	; (800173c <HAL_UART_MspInit+0x298>)
 80014ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014ce:	6193      	str	r3, [r2, #24]
 80014d0:	4b9a      	ldr	r3, [pc, #616]	; (800173c <HAL_UART_MspInit+0x298>)
 80014d2:	699b      	ldr	r3, [r3, #24]
 80014d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014d8:	623b      	str	r3, [r7, #32]
 80014da:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014dc:	4b97      	ldr	r3, [pc, #604]	; (800173c <HAL_UART_MspInit+0x298>)
 80014de:	699b      	ldr	r3, [r3, #24]
 80014e0:	4a96      	ldr	r2, [pc, #600]	; (800173c <HAL_UART_MspInit+0x298>)
 80014e2:	f043 0308 	orr.w	r3, r3, #8
 80014e6:	6193      	str	r3, [r2, #24]
 80014e8:	4b94      	ldr	r3, [pc, #592]	; (800173c <HAL_UART_MspInit+0x298>)
 80014ea:	699b      	ldr	r3, [r3, #24]
 80014ec:	f003 0308 	and.w	r3, r3, #8
 80014f0:	61fb      	str	r3, [r7, #28]
 80014f2:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = SIM_TX_Pin;
 80014f4:	2340      	movs	r3, #64	; 0x40
 80014f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f8:	2302      	movs	r3, #2
 80014fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014fc:	2303      	movs	r3, #3
 80014fe:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(SIM_TX_GPIO_Port, &GPIO_InitStruct);
 8001500:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001504:	4619      	mov	r1, r3
 8001506:	488e      	ldr	r0, [pc, #568]	; (8001740 <HAL_UART_MspInit+0x29c>)
 8001508:	f000 ff9e 	bl	8002448 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SIM_RX_Pin;
 800150c:	2380      	movs	r3, #128	; 0x80
 800150e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001510:	2300      	movs	r3, #0
 8001512:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001514:	2300      	movs	r3, #0
 8001516:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SIM_RX_GPIO_Port, &GPIO_InitStruct);
 8001518:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800151c:	4619      	mov	r1, r3
 800151e:	4888      	ldr	r0, [pc, #544]	; (8001740 <HAL_UART_MspInit+0x29c>)
 8001520:	f000 ff92 	bl	8002448 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8001524:	4b87      	ldr	r3, [pc, #540]	; (8001744 <HAL_UART_MspInit+0x2a0>)
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	637b      	str	r3, [r7, #52]	; 0x34
 800152a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800152c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001530:	637b      	str	r3, [r7, #52]	; 0x34
 8001532:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001534:	f043 0304 	orr.w	r3, r3, #4
 8001538:	637b      	str	r3, [r7, #52]	; 0x34
 800153a:	4a82      	ldr	r2, [pc, #520]	; (8001744 <HAL_UART_MspInit+0x2a0>)
 800153c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800153e:	6053      	str	r3, [r2, #4]

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8001540:	4b81      	ldr	r3, [pc, #516]	; (8001748 <HAL_UART_MspInit+0x2a4>)
 8001542:	4a82      	ldr	r2, [pc, #520]	; (800174c <HAL_UART_MspInit+0x2a8>)
 8001544:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001546:	4b80      	ldr	r3, [pc, #512]	; (8001748 <HAL_UART_MspInit+0x2a4>)
 8001548:	2200      	movs	r2, #0
 800154a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800154c:	4b7e      	ldr	r3, [pc, #504]	; (8001748 <HAL_UART_MspInit+0x2a4>)
 800154e:	2200      	movs	r2, #0
 8001550:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001552:	4b7d      	ldr	r3, [pc, #500]	; (8001748 <HAL_UART_MspInit+0x2a4>)
 8001554:	2280      	movs	r2, #128	; 0x80
 8001556:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001558:	4b7b      	ldr	r3, [pc, #492]	; (8001748 <HAL_UART_MspInit+0x2a4>)
 800155a:	2200      	movs	r2, #0
 800155c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800155e:	4b7a      	ldr	r3, [pc, #488]	; (8001748 <HAL_UART_MspInit+0x2a4>)
 8001560:	2200      	movs	r2, #0
 8001562:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001564:	4b78      	ldr	r3, [pc, #480]	; (8001748 <HAL_UART_MspInit+0x2a4>)
 8001566:	2200      	movs	r2, #0
 8001568:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800156a:	4b77      	ldr	r3, [pc, #476]	; (8001748 <HAL_UART_MspInit+0x2a4>)
 800156c:	2200      	movs	r2, #0
 800156e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001570:	4875      	ldr	r0, [pc, #468]	; (8001748 <HAL_UART_MspInit+0x2a4>)
 8001572:	f000 fcc7 	bl	8001f04 <HAL_DMA_Init>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <HAL_UART_MspInit+0xdc>
    {
      Error_Handler();
 800157c:	f7ff fe3d 	bl	80011fa <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	4a71      	ldr	r2, [pc, #452]	; (8001748 <HAL_UART_MspInit+0x2a4>)
 8001584:	63da      	str	r2, [r3, #60]	; 0x3c
 8001586:	4a70      	ldr	r2, [pc, #448]	; (8001748 <HAL_UART_MspInit+0x2a4>)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800158c:	2200      	movs	r2, #0
 800158e:	2100      	movs	r1, #0
 8001590:	2025      	movs	r0, #37	; 0x25
 8001592:	f000 fc80 	bl	8001e96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001596:	2025      	movs	r0, #37	; 0x25
 8001598:	f000 fc99 	bl	8001ece <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800159c:	e0c8      	b.n	8001730 <HAL_UART_MspInit+0x28c>
  else if(uartHandle->Instance==USART2)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a6b      	ldr	r2, [pc, #428]	; (8001750 <HAL_UART_MspInit+0x2ac>)
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d15e      	bne.n	8001666 <HAL_UART_MspInit+0x1c2>
    __HAL_RCC_USART2_CLK_ENABLE();
 80015a8:	4b64      	ldr	r3, [pc, #400]	; (800173c <HAL_UART_MspInit+0x298>)
 80015aa:	69db      	ldr	r3, [r3, #28]
 80015ac:	4a63      	ldr	r2, [pc, #396]	; (800173c <HAL_UART_MspInit+0x298>)
 80015ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015b2:	61d3      	str	r3, [r2, #28]
 80015b4:	4b61      	ldr	r3, [pc, #388]	; (800173c <HAL_UART_MspInit+0x298>)
 80015b6:	69db      	ldr	r3, [r3, #28]
 80015b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015bc:	61bb      	str	r3, [r7, #24]
 80015be:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015c0:	4b5e      	ldr	r3, [pc, #376]	; (800173c <HAL_UART_MspInit+0x298>)
 80015c2:	699b      	ldr	r3, [r3, #24]
 80015c4:	4a5d      	ldr	r2, [pc, #372]	; (800173c <HAL_UART_MspInit+0x298>)
 80015c6:	f043 0304 	orr.w	r3, r3, #4
 80015ca:	6193      	str	r3, [r2, #24]
 80015cc:	4b5b      	ldr	r3, [pc, #364]	; (800173c <HAL_UART_MspInit+0x298>)
 80015ce:	699b      	ldr	r3, [r3, #24]
 80015d0:	f003 0304 	and.w	r3, r3, #4
 80015d4:	617b      	str	r3, [r7, #20]
 80015d6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80015d8:	2304      	movs	r3, #4
 80015da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015dc:	2302      	movs	r3, #2
 80015de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015e0:	2303      	movs	r3, #3
 80015e2:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015e8:	4619      	mov	r1, r3
 80015ea:	485a      	ldr	r0, [pc, #360]	; (8001754 <HAL_UART_MspInit+0x2b0>)
 80015ec:	f000 ff2c 	bl	8002448 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80015f0:	2308      	movs	r3, #8
 80015f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015f4:	2300      	movs	r3, #0
 80015f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f8:	2300      	movs	r3, #0
 80015fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001600:	4619      	mov	r1, r3
 8001602:	4854      	ldr	r0, [pc, #336]	; (8001754 <HAL_UART_MspInit+0x2b0>)
 8001604:	f000 ff20 	bl	8002448 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8001608:	4b53      	ldr	r3, [pc, #332]	; (8001758 <HAL_UART_MspInit+0x2b4>)
 800160a:	4a54      	ldr	r2, [pc, #336]	; (800175c <HAL_UART_MspInit+0x2b8>)
 800160c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800160e:	4b52      	ldr	r3, [pc, #328]	; (8001758 <HAL_UART_MspInit+0x2b4>)
 8001610:	2200      	movs	r2, #0
 8001612:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001614:	4b50      	ldr	r3, [pc, #320]	; (8001758 <HAL_UART_MspInit+0x2b4>)
 8001616:	2200      	movs	r2, #0
 8001618:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800161a:	4b4f      	ldr	r3, [pc, #316]	; (8001758 <HAL_UART_MspInit+0x2b4>)
 800161c:	2280      	movs	r2, #128	; 0x80
 800161e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001620:	4b4d      	ldr	r3, [pc, #308]	; (8001758 <HAL_UART_MspInit+0x2b4>)
 8001622:	2200      	movs	r2, #0
 8001624:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001626:	4b4c      	ldr	r3, [pc, #304]	; (8001758 <HAL_UART_MspInit+0x2b4>)
 8001628:	2200      	movs	r2, #0
 800162a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800162c:	4b4a      	ldr	r3, [pc, #296]	; (8001758 <HAL_UART_MspInit+0x2b4>)
 800162e:	2200      	movs	r2, #0
 8001630:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001632:	4b49      	ldr	r3, [pc, #292]	; (8001758 <HAL_UART_MspInit+0x2b4>)
 8001634:	2200      	movs	r2, #0
 8001636:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001638:	4847      	ldr	r0, [pc, #284]	; (8001758 <HAL_UART_MspInit+0x2b4>)
 800163a:	f000 fc63 	bl	8001f04 <HAL_DMA_Init>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <HAL_UART_MspInit+0x1a4>
      Error_Handler();
 8001644:	f7ff fdd9 	bl	80011fa <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	4a43      	ldr	r2, [pc, #268]	; (8001758 <HAL_UART_MspInit+0x2b4>)
 800164c:	63da      	str	r2, [r3, #60]	; 0x3c
 800164e:	4a42      	ldr	r2, [pc, #264]	; (8001758 <HAL_UART_MspInit+0x2b4>)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001654:	2200      	movs	r2, #0
 8001656:	2100      	movs	r1, #0
 8001658:	2026      	movs	r0, #38	; 0x26
 800165a:	f000 fc1c 	bl	8001e96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800165e:	2026      	movs	r0, #38	; 0x26
 8001660:	f000 fc35 	bl	8001ece <HAL_NVIC_EnableIRQ>
}
 8001664:	e064      	b.n	8001730 <HAL_UART_MspInit+0x28c>
  else if(uartHandle->Instance==USART3)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a3d      	ldr	r2, [pc, #244]	; (8001760 <HAL_UART_MspInit+0x2bc>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d15f      	bne.n	8001730 <HAL_UART_MspInit+0x28c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001670:	4b32      	ldr	r3, [pc, #200]	; (800173c <HAL_UART_MspInit+0x298>)
 8001672:	69db      	ldr	r3, [r3, #28]
 8001674:	4a31      	ldr	r2, [pc, #196]	; (800173c <HAL_UART_MspInit+0x298>)
 8001676:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800167a:	61d3      	str	r3, [r2, #28]
 800167c:	4b2f      	ldr	r3, [pc, #188]	; (800173c <HAL_UART_MspInit+0x298>)
 800167e:	69db      	ldr	r3, [r3, #28]
 8001680:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001684:	613b      	str	r3, [r7, #16]
 8001686:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001688:	4b2c      	ldr	r3, [pc, #176]	; (800173c <HAL_UART_MspInit+0x298>)
 800168a:	699b      	ldr	r3, [r3, #24]
 800168c:	4a2b      	ldr	r2, [pc, #172]	; (800173c <HAL_UART_MspInit+0x298>)
 800168e:	f043 0308 	orr.w	r3, r3, #8
 8001692:	6193      	str	r3, [r2, #24]
 8001694:	4b29      	ldr	r3, [pc, #164]	; (800173c <HAL_UART_MspInit+0x298>)
 8001696:	699b      	ldr	r3, [r3, #24]
 8001698:	f003 0308 	and.w	r3, r3, #8
 800169c:	60fb      	str	r3, [r7, #12]
 800169e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80016a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a6:	2302      	movs	r3, #2
 80016a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016aa:	2303      	movs	r3, #3
 80016ac:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016b2:	4619      	mov	r1, r3
 80016b4:	4822      	ldr	r0, [pc, #136]	; (8001740 <HAL_UART_MspInit+0x29c>)
 80016b6:	f000 fec7 	bl	8002448 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80016ba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80016be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016c0:	2300      	movs	r3, #0
 80016c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c4:	2300      	movs	r3, #0
 80016c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016cc:	4619      	mov	r1, r3
 80016ce:	481c      	ldr	r0, [pc, #112]	; (8001740 <HAL_UART_MspInit+0x29c>)
 80016d0:	f000 feba 	bl	8002448 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 80016d4:	4b23      	ldr	r3, [pc, #140]	; (8001764 <HAL_UART_MspInit+0x2c0>)
 80016d6:	4a24      	ldr	r2, [pc, #144]	; (8001768 <HAL_UART_MspInit+0x2c4>)
 80016d8:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016da:	4b22      	ldr	r3, [pc, #136]	; (8001764 <HAL_UART_MspInit+0x2c0>)
 80016dc:	2200      	movs	r2, #0
 80016de:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016e0:	4b20      	ldr	r3, [pc, #128]	; (8001764 <HAL_UART_MspInit+0x2c0>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80016e6:	4b1f      	ldr	r3, [pc, #124]	; (8001764 <HAL_UART_MspInit+0x2c0>)
 80016e8:	2280      	movs	r2, #128	; 0x80
 80016ea:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016ec:	4b1d      	ldr	r3, [pc, #116]	; (8001764 <HAL_UART_MspInit+0x2c0>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016f2:	4b1c      	ldr	r3, [pc, #112]	; (8001764 <HAL_UART_MspInit+0x2c0>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80016f8:	4b1a      	ldr	r3, [pc, #104]	; (8001764 <HAL_UART_MspInit+0x2c0>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80016fe:	4b19      	ldr	r3, [pc, #100]	; (8001764 <HAL_UART_MspInit+0x2c0>)
 8001700:	2200      	movs	r2, #0
 8001702:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001704:	4817      	ldr	r0, [pc, #92]	; (8001764 <HAL_UART_MspInit+0x2c0>)
 8001706:	f000 fbfd 	bl	8001f04 <HAL_DMA_Init>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d001      	beq.n	8001714 <HAL_UART_MspInit+0x270>
      Error_Handler();
 8001710:	f7ff fd73 	bl	80011fa <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	4a13      	ldr	r2, [pc, #76]	; (8001764 <HAL_UART_MspInit+0x2c0>)
 8001718:	63da      	str	r2, [r3, #60]	; 0x3c
 800171a:	4a12      	ldr	r2, [pc, #72]	; (8001764 <HAL_UART_MspInit+0x2c0>)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001720:	2200      	movs	r2, #0
 8001722:	2100      	movs	r1, #0
 8001724:	2027      	movs	r0, #39	; 0x27
 8001726:	f000 fbb6 	bl	8001e96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800172a:	2027      	movs	r0, #39	; 0x27
 800172c:	f000 fbcf 	bl	8001ece <HAL_NVIC_EnableIRQ>
}
 8001730:	bf00      	nop
 8001732:	3738      	adds	r7, #56	; 0x38
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	40013800 	.word	0x40013800
 800173c:	40021000 	.word	0x40021000
 8001740:	40010c00 	.word	0x40010c00
 8001744:	40010000 	.word	0x40010000
 8001748:	20000e98 	.word	0x20000e98
 800174c:	40020058 	.word	0x40020058
 8001750:	40004400 	.word	0x40004400
 8001754:	40010800 	.word	0x40010800
 8001758:	20000edc 	.word	0x20000edc
 800175c:	4002006c 	.word	0x4002006c
 8001760:	40004800 	.word	0x40004800
 8001764:	20000f20 	.word	0x20000f20
 8001768:	40020030 	.word	0x40020030

0800176c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800176c:	f7ff fe16 	bl	800139c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001770:	480b      	ldr	r0, [pc, #44]	; (80017a0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001772:	490c      	ldr	r1, [pc, #48]	; (80017a4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001774:	4a0c      	ldr	r2, [pc, #48]	; (80017a8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001776:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001778:	e002      	b.n	8001780 <LoopCopyDataInit>

0800177a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800177a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800177c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800177e:	3304      	adds	r3, #4

08001780 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001780:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001782:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001784:	d3f9      	bcc.n	800177a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001786:	4a09      	ldr	r2, [pc, #36]	; (80017ac <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001788:	4c09      	ldr	r4, [pc, #36]	; (80017b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800178a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800178c:	e001      	b.n	8001792 <LoopFillZerobss>

0800178e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800178e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001790:	3204      	adds	r2, #4

08001792 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001792:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001794:	d3fb      	bcc.n	800178e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001796:	f002 fe43 	bl	8004420 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800179a:	f7ff fc3b 	bl	8001014 <main>
  bx lr
 800179e:	4770      	bx	lr
  ldr r0, =_sdata
 80017a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017a4:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 80017a8:	08005680 	.word	0x08005680
  ldr r2, =_sbss
 80017ac:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 80017b0:	20000f78 	.word	0x20000f78

080017b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80017b4:	e7fe      	b.n	80017b4 <ADC1_2_IRQHandler>
	...

080017b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017bc:	4b08      	ldr	r3, [pc, #32]	; (80017e0 <HAL_Init+0x28>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a07      	ldr	r2, [pc, #28]	; (80017e0 <HAL_Init+0x28>)
 80017c2:	f043 0310 	orr.w	r3, r3, #16
 80017c6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017c8:	2003      	movs	r0, #3
 80017ca:	f000 fb59 	bl	8001e80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017ce:	200f      	movs	r0, #15
 80017d0:	f000 f808 	bl	80017e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017d4:	f7ff fd16 	bl	8001204 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017d8:	2300      	movs	r3, #0
}
 80017da:	4618      	mov	r0, r3
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	40022000 	.word	0x40022000

080017e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017ec:	4b12      	ldr	r3, [pc, #72]	; (8001838 <HAL_InitTick+0x54>)
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	4b12      	ldr	r3, [pc, #72]	; (800183c <HAL_InitTick+0x58>)
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	4619      	mov	r1, r3
 80017f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80017fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001802:	4618      	mov	r0, r3
 8001804:	f000 fb71 	bl	8001eea <HAL_SYSTICK_Config>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e00e      	b.n	8001830 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2b0f      	cmp	r3, #15
 8001816:	d80a      	bhi.n	800182e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001818:	2200      	movs	r2, #0
 800181a:	6879      	ldr	r1, [r7, #4]
 800181c:	f04f 30ff 	mov.w	r0, #4294967295
 8001820:	f000 fb39 	bl	8001e96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001824:	4a06      	ldr	r2, [pc, #24]	; (8001840 <HAL_InitTick+0x5c>)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800182a:	2300      	movs	r3, #0
 800182c:	e000      	b.n	8001830 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
}
 8001830:	4618      	mov	r0, r3
 8001832:	3708      	adds	r7, #8
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	2000001c 	.word	0x2000001c
 800183c:	20000024 	.word	0x20000024
 8001840:	20000020 	.word	0x20000020

08001844 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001848:	4b05      	ldr	r3, [pc, #20]	; (8001860 <HAL_IncTick+0x1c>)
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	461a      	mov	r2, r3
 800184e:	4b05      	ldr	r3, [pc, #20]	; (8001864 <HAL_IncTick+0x20>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4413      	add	r3, r2
 8001854:	4a03      	ldr	r2, [pc, #12]	; (8001864 <HAL_IncTick+0x20>)
 8001856:	6013      	str	r3, [r2, #0]
}
 8001858:	bf00      	nop
 800185a:	46bd      	mov	sp, r7
 800185c:	bc80      	pop	{r7}
 800185e:	4770      	bx	lr
 8001860:	20000024 	.word	0x20000024
 8001864:	20000f64 	.word	0x20000f64

08001868 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  return uwTick;
 800186c:	4b02      	ldr	r3, [pc, #8]	; (8001878 <HAL_GetTick+0x10>)
 800186e:	681b      	ldr	r3, [r3, #0]
}
 8001870:	4618      	mov	r0, r3
 8001872:	46bd      	mov	sp, r7
 8001874:	bc80      	pop	{r7}
 8001876:	4770      	bx	lr
 8001878:	20000f64 	.word	0x20000f64

0800187c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b084      	sub	sp, #16
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001884:	f7ff fff0 	bl	8001868 <HAL_GetTick>
 8001888:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001894:	d005      	beq.n	80018a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001896:	4b0a      	ldr	r3, [pc, #40]	; (80018c0 <HAL_Delay+0x44>)
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	461a      	mov	r2, r3
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	4413      	add	r3, r2
 80018a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018a2:	bf00      	nop
 80018a4:	f7ff ffe0 	bl	8001868 <HAL_GetTick>
 80018a8:	4602      	mov	r2, r0
 80018aa:	68bb      	ldr	r3, [r7, #8]
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	68fa      	ldr	r2, [r7, #12]
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d8f7      	bhi.n	80018a4 <HAL_Delay+0x28>
  {
  }
}
 80018b4:	bf00      	nop
 80018b6:	bf00      	nop
 80018b8:	3710      	adds	r7, #16
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	20000024 	.word	0x20000024

080018c4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b086      	sub	sp, #24
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018cc:	2300      	movs	r3, #0
 80018ce:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80018d0:	2300      	movs	r3, #0
 80018d2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80018d4:	2300      	movs	r3, #0
 80018d6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80018d8:	2300      	movs	r3, #0
 80018da:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d101      	bne.n	80018e6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	e0be      	b.n	8001a64 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d109      	bne.n	8001908 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2200      	movs	r2, #0
 80018f8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2200      	movs	r2, #0
 80018fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001902:	6878      	ldr	r0, [r7, #4]
 8001904:	f7ff f9b6 	bl	8000c74 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001908:	6878      	ldr	r0, [r7, #4]
 800190a:	f000 f9ab 	bl	8001c64 <ADC_ConversionStop_Disable>
 800190e:	4603      	mov	r3, r0
 8001910:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001916:	f003 0310 	and.w	r3, r3, #16
 800191a:	2b00      	cmp	r3, #0
 800191c:	f040 8099 	bne.w	8001a52 <HAL_ADC_Init+0x18e>
 8001920:	7dfb      	ldrb	r3, [r7, #23]
 8001922:	2b00      	cmp	r3, #0
 8001924:	f040 8095 	bne.w	8001a52 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800192c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001930:	f023 0302 	bic.w	r3, r3, #2
 8001934:	f043 0202 	orr.w	r2, r3, #2
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001944:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	7b1b      	ldrb	r3, [r3, #12]
 800194a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800194c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800194e:	68ba      	ldr	r2, [r7, #8]
 8001950:	4313      	orrs	r3, r2
 8001952:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800195c:	d003      	beq.n	8001966 <HAL_ADC_Init+0xa2>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	2b01      	cmp	r3, #1
 8001964:	d102      	bne.n	800196c <HAL_ADC_Init+0xa8>
 8001966:	f44f 7380 	mov.w	r3, #256	; 0x100
 800196a:	e000      	b.n	800196e <HAL_ADC_Init+0xaa>
 800196c:	2300      	movs	r3, #0
 800196e:	693a      	ldr	r2, [r7, #16]
 8001970:	4313      	orrs	r3, r2
 8001972:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	7d1b      	ldrb	r3, [r3, #20]
 8001978:	2b01      	cmp	r3, #1
 800197a:	d119      	bne.n	80019b0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	7b1b      	ldrb	r3, [r3, #12]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d109      	bne.n	8001998 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	699b      	ldr	r3, [r3, #24]
 8001988:	3b01      	subs	r3, #1
 800198a:	035a      	lsls	r2, r3, #13
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	4313      	orrs	r3, r2
 8001990:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001994:	613b      	str	r3, [r7, #16]
 8001996:	e00b      	b.n	80019b0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800199c:	f043 0220 	orr.w	r2, r3, #32
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019a8:	f043 0201 	orr.w	r2, r3, #1
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	693a      	ldr	r2, [r7, #16]
 80019c0:	430a      	orrs	r2, r1
 80019c2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	689a      	ldr	r2, [r3, #8]
 80019ca:	4b28      	ldr	r3, [pc, #160]	; (8001a6c <HAL_ADC_Init+0x1a8>)
 80019cc:	4013      	ands	r3, r2
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	6812      	ldr	r2, [r2, #0]
 80019d2:	68b9      	ldr	r1, [r7, #8]
 80019d4:	430b      	orrs	r3, r1
 80019d6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80019e0:	d003      	beq.n	80019ea <HAL_ADC_Init+0x126>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d104      	bne.n	80019f4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	691b      	ldr	r3, [r3, #16]
 80019ee:	3b01      	subs	r3, #1
 80019f0:	051b      	lsls	r3, r3, #20
 80019f2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019fa:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	68fa      	ldr	r2, [r7, #12]
 8001a04:	430a      	orrs	r2, r1
 8001a06:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	689a      	ldr	r2, [r3, #8]
 8001a0e:	4b18      	ldr	r3, [pc, #96]	; (8001a70 <HAL_ADC_Init+0x1ac>)
 8001a10:	4013      	ands	r3, r2
 8001a12:	68ba      	ldr	r2, [r7, #8]
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d10b      	bne.n	8001a30 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a22:	f023 0303 	bic.w	r3, r3, #3
 8001a26:	f043 0201 	orr.w	r2, r3, #1
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001a2e:	e018      	b.n	8001a62 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a34:	f023 0312 	bic.w	r3, r3, #18
 8001a38:	f043 0210 	orr.w	r2, r3, #16
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a44:	f043 0201 	orr.w	r2, r3, #1
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001a50:	e007      	b.n	8001a62 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a56:	f043 0210 	orr.w	r2, r3, #16
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001a62:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3718      	adds	r7, #24
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	ffe1f7fd 	.word	0xffe1f7fd
 8001a70:	ff1f0efe 	.word	0xff1f0efe

08001a74 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001a74:	b480      	push	{r7}
 8001a76:	b085      	sub	sp, #20
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001a82:	2300      	movs	r3, #0
 8001a84:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d101      	bne.n	8001a94 <HAL_ADC_ConfigChannel+0x20>
 8001a90:	2302      	movs	r3, #2
 8001a92:	e0dc      	b.n	8001c4e <HAL_ADC_ConfigChannel+0x1da>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2201      	movs	r2, #1
 8001a98:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	2b06      	cmp	r3, #6
 8001aa2:	d81c      	bhi.n	8001ade <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	685a      	ldr	r2, [r3, #4]
 8001aae:	4613      	mov	r3, r2
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	4413      	add	r3, r2
 8001ab4:	3b05      	subs	r3, #5
 8001ab6:	221f      	movs	r2, #31
 8001ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8001abc:	43db      	mvns	r3, r3
 8001abe:	4019      	ands	r1, r3
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	6818      	ldr	r0, [r3, #0]
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	685a      	ldr	r2, [r3, #4]
 8001ac8:	4613      	mov	r3, r2
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	4413      	add	r3, r2
 8001ace:	3b05      	subs	r3, #5
 8001ad0:	fa00 f203 	lsl.w	r2, r0, r3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	430a      	orrs	r2, r1
 8001ada:	635a      	str	r2, [r3, #52]	; 0x34
 8001adc:	e03c      	b.n	8001b58 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	2b0c      	cmp	r3, #12
 8001ae4:	d81c      	bhi.n	8001b20 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	685a      	ldr	r2, [r3, #4]
 8001af0:	4613      	mov	r3, r2
 8001af2:	009b      	lsls	r3, r3, #2
 8001af4:	4413      	add	r3, r2
 8001af6:	3b23      	subs	r3, #35	; 0x23
 8001af8:	221f      	movs	r2, #31
 8001afa:	fa02 f303 	lsl.w	r3, r2, r3
 8001afe:	43db      	mvns	r3, r3
 8001b00:	4019      	ands	r1, r3
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	6818      	ldr	r0, [r3, #0]
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	685a      	ldr	r2, [r3, #4]
 8001b0a:	4613      	mov	r3, r2
 8001b0c:	009b      	lsls	r3, r3, #2
 8001b0e:	4413      	add	r3, r2
 8001b10:	3b23      	subs	r3, #35	; 0x23
 8001b12:	fa00 f203 	lsl.w	r2, r0, r3
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	430a      	orrs	r2, r1
 8001b1c:	631a      	str	r2, [r3, #48]	; 0x30
 8001b1e:	e01b      	b.n	8001b58 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	685a      	ldr	r2, [r3, #4]
 8001b2a:	4613      	mov	r3, r2
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	4413      	add	r3, r2
 8001b30:	3b41      	subs	r3, #65	; 0x41
 8001b32:	221f      	movs	r2, #31
 8001b34:	fa02 f303 	lsl.w	r3, r2, r3
 8001b38:	43db      	mvns	r3, r3
 8001b3a:	4019      	ands	r1, r3
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	6818      	ldr	r0, [r3, #0]
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	685a      	ldr	r2, [r3, #4]
 8001b44:	4613      	mov	r3, r2
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	4413      	add	r3, r2
 8001b4a:	3b41      	subs	r3, #65	; 0x41
 8001b4c:	fa00 f203 	lsl.w	r2, r0, r3
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	430a      	orrs	r2, r1
 8001b56:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	2b09      	cmp	r3, #9
 8001b5e:	d91c      	bls.n	8001b9a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	68d9      	ldr	r1, [r3, #12]
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	4613      	mov	r3, r2
 8001b6c:	005b      	lsls	r3, r3, #1
 8001b6e:	4413      	add	r3, r2
 8001b70:	3b1e      	subs	r3, #30
 8001b72:	2207      	movs	r2, #7
 8001b74:	fa02 f303 	lsl.w	r3, r2, r3
 8001b78:	43db      	mvns	r3, r3
 8001b7a:	4019      	ands	r1, r3
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	6898      	ldr	r0, [r3, #8]
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	4613      	mov	r3, r2
 8001b86:	005b      	lsls	r3, r3, #1
 8001b88:	4413      	add	r3, r2
 8001b8a:	3b1e      	subs	r3, #30
 8001b8c:	fa00 f203 	lsl.w	r2, r0, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	430a      	orrs	r2, r1
 8001b96:	60da      	str	r2, [r3, #12]
 8001b98:	e019      	b.n	8001bce <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	6919      	ldr	r1, [r3, #16]
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	4613      	mov	r3, r2
 8001ba6:	005b      	lsls	r3, r3, #1
 8001ba8:	4413      	add	r3, r2
 8001baa:	2207      	movs	r2, #7
 8001bac:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb0:	43db      	mvns	r3, r3
 8001bb2:	4019      	ands	r1, r3
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	6898      	ldr	r0, [r3, #8]
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	4613      	mov	r3, r2
 8001bbe:	005b      	lsls	r3, r3, #1
 8001bc0:	4413      	add	r3, r2
 8001bc2:	fa00 f203 	lsl.w	r2, r0, r3
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	430a      	orrs	r2, r1
 8001bcc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	2b10      	cmp	r3, #16
 8001bd4:	d003      	beq.n	8001bde <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001bda:	2b11      	cmp	r3, #17
 8001bdc:	d132      	bne.n	8001c44 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a1d      	ldr	r2, [pc, #116]	; (8001c58 <HAL_ADC_ConfigChannel+0x1e4>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d125      	bne.n	8001c34 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d126      	bne.n	8001c44 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	689a      	ldr	r2, [r3, #8]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001c04:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	2b10      	cmp	r3, #16
 8001c0c:	d11a      	bne.n	8001c44 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001c0e:	4b13      	ldr	r3, [pc, #76]	; (8001c5c <HAL_ADC_ConfigChannel+0x1e8>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a13      	ldr	r2, [pc, #76]	; (8001c60 <HAL_ADC_ConfigChannel+0x1ec>)
 8001c14:	fba2 2303 	umull	r2, r3, r2, r3
 8001c18:	0c9a      	lsrs	r2, r3, #18
 8001c1a:	4613      	mov	r3, r2
 8001c1c:	009b      	lsls	r3, r3, #2
 8001c1e:	4413      	add	r3, r2
 8001c20:	005b      	lsls	r3, r3, #1
 8001c22:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c24:	e002      	b.n	8001c2c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	3b01      	subs	r3, #1
 8001c2a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d1f9      	bne.n	8001c26 <HAL_ADC_ConfigChannel+0x1b2>
 8001c32:	e007      	b.n	8001c44 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c38:	f043 0220 	orr.w	r2, r3, #32
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2200      	movs	r2, #0
 8001c48:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001c4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3714      	adds	r7, #20
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bc80      	pop	{r7}
 8001c56:	4770      	bx	lr
 8001c58:	40012400 	.word	0x40012400
 8001c5c:	2000001c 	.word	0x2000001c
 8001c60:	431bde83 	.word	0x431bde83

08001c64 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b084      	sub	sp, #16
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	f003 0301 	and.w	r3, r3, #1
 8001c7a:	2b01      	cmp	r3, #1
 8001c7c:	d12e      	bne.n	8001cdc <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	689a      	ldr	r2, [r3, #8]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f022 0201 	bic.w	r2, r2, #1
 8001c8c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001c8e:	f7ff fdeb 	bl	8001868 <HAL_GetTick>
 8001c92:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001c94:	e01b      	b.n	8001cce <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001c96:	f7ff fde7 	bl	8001868 <HAL_GetTick>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	1ad3      	subs	r3, r2, r3
 8001ca0:	2b02      	cmp	r3, #2
 8001ca2:	d914      	bls.n	8001cce <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	f003 0301 	and.w	r3, r3, #1
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d10d      	bne.n	8001cce <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cb6:	f043 0210 	orr.w	r2, r3, #16
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cc2:	f043 0201 	orr.w	r2, r3, #1
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e007      	b.n	8001cde <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	f003 0301 	and.w	r3, r3, #1
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d0dc      	beq.n	8001c96 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001cdc:	2300      	movs	r3, #0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3710      	adds	r7, #16
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
	...

08001ce8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b085      	sub	sp, #20
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	f003 0307 	and.w	r3, r3, #7
 8001cf6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cf8:	4b0c      	ldr	r3, [pc, #48]	; (8001d2c <__NVIC_SetPriorityGrouping+0x44>)
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cfe:	68ba      	ldr	r2, [r7, #8]
 8001d00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d04:	4013      	ands	r3, r2
 8001d06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d1a:	4a04      	ldr	r2, [pc, #16]	; (8001d2c <__NVIC_SetPriorityGrouping+0x44>)
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	60d3      	str	r3, [r2, #12]
}
 8001d20:	bf00      	nop
 8001d22:	3714      	adds	r7, #20
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bc80      	pop	{r7}
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	e000ed00 	.word	0xe000ed00

08001d30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d34:	4b04      	ldr	r3, [pc, #16]	; (8001d48 <__NVIC_GetPriorityGrouping+0x18>)
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	0a1b      	lsrs	r3, r3, #8
 8001d3a:	f003 0307 	and.w	r3, r3, #7
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bc80      	pop	{r7}
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	e000ed00 	.word	0xe000ed00

08001d4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	4603      	mov	r3, r0
 8001d54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	db0b      	blt.n	8001d76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d5e:	79fb      	ldrb	r3, [r7, #7]
 8001d60:	f003 021f 	and.w	r2, r3, #31
 8001d64:	4906      	ldr	r1, [pc, #24]	; (8001d80 <__NVIC_EnableIRQ+0x34>)
 8001d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d6a:	095b      	lsrs	r3, r3, #5
 8001d6c:	2001      	movs	r0, #1
 8001d6e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d76:	bf00      	nop
 8001d78:	370c      	adds	r7, #12
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bc80      	pop	{r7}
 8001d7e:	4770      	bx	lr
 8001d80:	e000e100 	.word	0xe000e100

08001d84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	6039      	str	r1, [r7, #0]
 8001d8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	db0a      	blt.n	8001dae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	b2da      	uxtb	r2, r3
 8001d9c:	490c      	ldr	r1, [pc, #48]	; (8001dd0 <__NVIC_SetPriority+0x4c>)
 8001d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da2:	0112      	lsls	r2, r2, #4
 8001da4:	b2d2      	uxtb	r2, r2
 8001da6:	440b      	add	r3, r1
 8001da8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dac:	e00a      	b.n	8001dc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	b2da      	uxtb	r2, r3
 8001db2:	4908      	ldr	r1, [pc, #32]	; (8001dd4 <__NVIC_SetPriority+0x50>)
 8001db4:	79fb      	ldrb	r3, [r7, #7]
 8001db6:	f003 030f 	and.w	r3, r3, #15
 8001dba:	3b04      	subs	r3, #4
 8001dbc:	0112      	lsls	r2, r2, #4
 8001dbe:	b2d2      	uxtb	r2, r2
 8001dc0:	440b      	add	r3, r1
 8001dc2:	761a      	strb	r2, [r3, #24]
}
 8001dc4:	bf00      	nop
 8001dc6:	370c      	adds	r7, #12
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bc80      	pop	{r7}
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	e000e100 	.word	0xe000e100
 8001dd4:	e000ed00 	.word	0xe000ed00

08001dd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b089      	sub	sp, #36	; 0x24
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	60f8      	str	r0, [r7, #12]
 8001de0:	60b9      	str	r1, [r7, #8]
 8001de2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	f003 0307 	and.w	r3, r3, #7
 8001dea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	f1c3 0307 	rsb	r3, r3, #7
 8001df2:	2b04      	cmp	r3, #4
 8001df4:	bf28      	it	cs
 8001df6:	2304      	movcs	r3, #4
 8001df8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	3304      	adds	r3, #4
 8001dfe:	2b06      	cmp	r3, #6
 8001e00:	d902      	bls.n	8001e08 <NVIC_EncodePriority+0x30>
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	3b03      	subs	r3, #3
 8001e06:	e000      	b.n	8001e0a <NVIC_EncodePriority+0x32>
 8001e08:	2300      	movs	r3, #0
 8001e0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e0c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e10:	69bb      	ldr	r3, [r7, #24]
 8001e12:	fa02 f303 	lsl.w	r3, r2, r3
 8001e16:	43da      	mvns	r2, r3
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	401a      	ands	r2, r3
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e20:	f04f 31ff 	mov.w	r1, #4294967295
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	fa01 f303 	lsl.w	r3, r1, r3
 8001e2a:	43d9      	mvns	r1, r3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e30:	4313      	orrs	r3, r2
         );
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3724      	adds	r7, #36	; 0x24
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bc80      	pop	{r7}
 8001e3a:	4770      	bx	lr

08001e3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	3b01      	subs	r3, #1
 8001e48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e4c:	d301      	bcc.n	8001e52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e00f      	b.n	8001e72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e52:	4a0a      	ldr	r2, [pc, #40]	; (8001e7c <SysTick_Config+0x40>)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	3b01      	subs	r3, #1
 8001e58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e5a:	210f      	movs	r1, #15
 8001e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e60:	f7ff ff90 	bl	8001d84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e64:	4b05      	ldr	r3, [pc, #20]	; (8001e7c <SysTick_Config+0x40>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e6a:	4b04      	ldr	r3, [pc, #16]	; (8001e7c <SysTick_Config+0x40>)
 8001e6c:	2207      	movs	r2, #7
 8001e6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e70:	2300      	movs	r3, #0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3708      	adds	r7, #8
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	e000e010 	.word	0xe000e010

08001e80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	f7ff ff2d 	bl	8001ce8 <__NVIC_SetPriorityGrouping>
}
 8001e8e:	bf00      	nop
 8001e90:	3708      	adds	r7, #8
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}

08001e96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e96:	b580      	push	{r7, lr}
 8001e98:	b086      	sub	sp, #24
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	60b9      	str	r1, [r7, #8]
 8001ea0:	607a      	str	r2, [r7, #4]
 8001ea2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ea8:	f7ff ff42 	bl	8001d30 <__NVIC_GetPriorityGrouping>
 8001eac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	68b9      	ldr	r1, [r7, #8]
 8001eb2:	6978      	ldr	r0, [r7, #20]
 8001eb4:	f7ff ff90 	bl	8001dd8 <NVIC_EncodePriority>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ebe:	4611      	mov	r1, r2
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f7ff ff5f 	bl	8001d84 <__NVIC_SetPriority>
}
 8001ec6:	bf00      	nop
 8001ec8:	3718      	adds	r7, #24
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}

08001ece <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ece:	b580      	push	{r7, lr}
 8001ed0:	b082      	sub	sp, #8
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ed8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001edc:	4618      	mov	r0, r3
 8001ede:	f7ff ff35 	bl	8001d4c <__NVIC_EnableIRQ>
}
 8001ee2:	bf00      	nop
 8001ee4:	3708      	adds	r7, #8
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}

08001eea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eea:	b580      	push	{r7, lr}
 8001eec:	b082      	sub	sp, #8
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f7ff ffa2 	bl	8001e3c <SysTick_Config>
 8001ef8:	4603      	mov	r3, r0
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3708      	adds	r7, #8
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
	...

08001f04 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b085      	sub	sp, #20
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d101      	bne.n	8001f1a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e043      	b.n	8001fa2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	461a      	mov	r2, r3
 8001f20:	4b22      	ldr	r3, [pc, #136]	; (8001fac <HAL_DMA_Init+0xa8>)
 8001f22:	4413      	add	r3, r2
 8001f24:	4a22      	ldr	r2, [pc, #136]	; (8001fb0 <HAL_DMA_Init+0xac>)
 8001f26:	fba2 2303 	umull	r2, r3, r2, r3
 8001f2a:	091b      	lsrs	r3, r3, #4
 8001f2c:	009a      	lsls	r2, r3, #2
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4a1f      	ldr	r2, [pc, #124]	; (8001fb4 <HAL_DMA_Init+0xb0>)
 8001f36:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2202      	movs	r2, #2
 8001f3c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001f4e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001f52:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001f5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	68db      	ldr	r3, [r3, #12]
 8001f62:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f68:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	695b      	ldr	r3, [r3, #20]
 8001f6e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f74:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	69db      	ldr	r3, [r3, #28]
 8001f7a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001f7c:	68fa      	ldr	r2, [r7, #12]
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	68fa      	ldr	r2, [r7, #12]
 8001f88:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2201      	movs	r2, #1
 8001f94:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001fa0:	2300      	movs	r3, #0
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3714      	adds	r7, #20
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bc80      	pop	{r7}
 8001faa:	4770      	bx	lr
 8001fac:	bffdfff8 	.word	0xbffdfff8
 8001fb0:	cccccccd 	.word	0xcccccccd
 8001fb4:	40020000 	.word	0x40020000

08001fb8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b086      	sub	sp, #24
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	60f8      	str	r0, [r7, #12]
 8001fc0:	60b9      	str	r1, [r7, #8]
 8001fc2:	607a      	str	r2, [r7, #4]
 8001fc4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d101      	bne.n	8001fd8 <HAL_DMA_Start_IT+0x20>
 8001fd4:	2302      	movs	r3, #2
 8001fd6:	e04b      	b.n	8002070 <HAL_DMA_Start_IT+0xb8>
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	2201      	movs	r2, #1
 8001fdc:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d13a      	bne.n	8002062 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	2202      	movs	r2, #2
 8001ff0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f022 0201 	bic.w	r2, r2, #1
 8002008:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	687a      	ldr	r2, [r7, #4]
 800200e:	68b9      	ldr	r1, [r7, #8]
 8002010:	68f8      	ldr	r0, [r7, #12]
 8002012:	f000 f9eb 	bl	80023ec <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800201a:	2b00      	cmp	r3, #0
 800201c:	d008      	beq.n	8002030 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f042 020e 	orr.w	r2, r2, #14
 800202c:	601a      	str	r2, [r3, #0]
 800202e:	e00f      	b.n	8002050 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f022 0204 	bic.w	r2, r2, #4
 800203e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f042 020a 	orr.w	r2, r2, #10
 800204e:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f042 0201 	orr.w	r2, r2, #1
 800205e:	601a      	str	r2, [r3, #0]
 8002060:	e005      	b.n	800206e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	2200      	movs	r2, #0
 8002066:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800206a:	2302      	movs	r3, #2
 800206c:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800206e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002070:	4618      	mov	r0, r3
 8002072:	3718      	adds	r7, #24
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}

08002078 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002078:	b480      	push	{r7}
 800207a:	b085      	sub	sp, #20
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002080:	2300      	movs	r3, #0
 8002082:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800208a:	b2db      	uxtb	r3, r3
 800208c:	2b02      	cmp	r3, #2
 800208e:	d008      	beq.n	80020a2 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2204      	movs	r2, #4
 8002094:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2200      	movs	r2, #0
 800209a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e020      	b.n	80020e4 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f022 020e 	bic.w	r2, r2, #14
 80020b0:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f022 0201 	bic.w	r2, r2, #1
 80020c0:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020ca:	2101      	movs	r1, #1
 80020cc:	fa01 f202 	lsl.w	r2, r1, r2
 80020d0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2201      	movs	r2, #1
 80020d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2200      	movs	r2, #0
 80020de:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80020e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	3714      	adds	r7, #20
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bc80      	pop	{r7}
 80020ec:	4770      	bx	lr
	...

080020f0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b084      	sub	sp, #16
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020f8:	2300      	movs	r3, #0
 80020fa:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002102:	b2db      	uxtb	r3, r3
 8002104:	2b02      	cmp	r3, #2
 8002106:	d005      	beq.n	8002114 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2204      	movs	r2, #4
 800210c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	73fb      	strb	r3, [r7, #15]
 8002112:	e051      	b.n	80021b8 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f022 020e 	bic.w	r2, r2, #14
 8002122:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f022 0201 	bic.w	r2, r2, #1
 8002132:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a22      	ldr	r2, [pc, #136]	; (80021c4 <HAL_DMA_Abort_IT+0xd4>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d029      	beq.n	8002192 <HAL_DMA_Abort_IT+0xa2>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a21      	ldr	r2, [pc, #132]	; (80021c8 <HAL_DMA_Abort_IT+0xd8>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d022      	beq.n	800218e <HAL_DMA_Abort_IT+0x9e>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a1f      	ldr	r2, [pc, #124]	; (80021cc <HAL_DMA_Abort_IT+0xdc>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d01a      	beq.n	8002188 <HAL_DMA_Abort_IT+0x98>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a1e      	ldr	r2, [pc, #120]	; (80021d0 <HAL_DMA_Abort_IT+0xe0>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d012      	beq.n	8002182 <HAL_DMA_Abort_IT+0x92>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a1c      	ldr	r2, [pc, #112]	; (80021d4 <HAL_DMA_Abort_IT+0xe4>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d00a      	beq.n	800217c <HAL_DMA_Abort_IT+0x8c>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a1b      	ldr	r2, [pc, #108]	; (80021d8 <HAL_DMA_Abort_IT+0xe8>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d102      	bne.n	8002176 <HAL_DMA_Abort_IT+0x86>
 8002170:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002174:	e00e      	b.n	8002194 <HAL_DMA_Abort_IT+0xa4>
 8002176:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800217a:	e00b      	b.n	8002194 <HAL_DMA_Abort_IT+0xa4>
 800217c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002180:	e008      	b.n	8002194 <HAL_DMA_Abort_IT+0xa4>
 8002182:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002186:	e005      	b.n	8002194 <HAL_DMA_Abort_IT+0xa4>
 8002188:	f44f 7380 	mov.w	r3, #256	; 0x100
 800218c:	e002      	b.n	8002194 <HAL_DMA_Abort_IT+0xa4>
 800218e:	2310      	movs	r3, #16
 8002190:	e000      	b.n	8002194 <HAL_DMA_Abort_IT+0xa4>
 8002192:	2301      	movs	r3, #1
 8002194:	4a11      	ldr	r2, [pc, #68]	; (80021dc <HAL_DMA_Abort_IT+0xec>)
 8002196:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2201      	movs	r2, #1
 800219c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2200      	movs	r2, #0
 80021a4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d003      	beq.n	80021b8 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	4798      	blx	r3
    } 
  }
  return status;
 80021b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3710      	adds	r7, #16
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	40020008 	.word	0x40020008
 80021c8:	4002001c 	.word	0x4002001c
 80021cc:	40020030 	.word	0x40020030
 80021d0:	40020044 	.word	0x40020044
 80021d4:	40020058 	.word	0x40020058
 80021d8:	4002006c 	.word	0x4002006c
 80021dc:	40020000 	.word	0x40020000

080021e0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b084      	sub	sp, #16
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fc:	2204      	movs	r2, #4
 80021fe:	409a      	lsls	r2, r3
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	4013      	ands	r3, r2
 8002204:	2b00      	cmp	r3, #0
 8002206:	d04f      	beq.n	80022a8 <HAL_DMA_IRQHandler+0xc8>
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	f003 0304 	and.w	r3, r3, #4
 800220e:	2b00      	cmp	r3, #0
 8002210:	d04a      	beq.n	80022a8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 0320 	and.w	r3, r3, #32
 800221c:	2b00      	cmp	r3, #0
 800221e:	d107      	bne.n	8002230 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f022 0204 	bic.w	r2, r2, #4
 800222e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a66      	ldr	r2, [pc, #408]	; (80023d0 <HAL_DMA_IRQHandler+0x1f0>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d029      	beq.n	800228e <HAL_DMA_IRQHandler+0xae>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a65      	ldr	r2, [pc, #404]	; (80023d4 <HAL_DMA_IRQHandler+0x1f4>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d022      	beq.n	800228a <HAL_DMA_IRQHandler+0xaa>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a63      	ldr	r2, [pc, #396]	; (80023d8 <HAL_DMA_IRQHandler+0x1f8>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d01a      	beq.n	8002284 <HAL_DMA_IRQHandler+0xa4>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a62      	ldr	r2, [pc, #392]	; (80023dc <HAL_DMA_IRQHandler+0x1fc>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d012      	beq.n	800227e <HAL_DMA_IRQHandler+0x9e>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a60      	ldr	r2, [pc, #384]	; (80023e0 <HAL_DMA_IRQHandler+0x200>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d00a      	beq.n	8002278 <HAL_DMA_IRQHandler+0x98>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a5f      	ldr	r2, [pc, #380]	; (80023e4 <HAL_DMA_IRQHandler+0x204>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d102      	bne.n	8002272 <HAL_DMA_IRQHandler+0x92>
 800226c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002270:	e00e      	b.n	8002290 <HAL_DMA_IRQHandler+0xb0>
 8002272:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002276:	e00b      	b.n	8002290 <HAL_DMA_IRQHandler+0xb0>
 8002278:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800227c:	e008      	b.n	8002290 <HAL_DMA_IRQHandler+0xb0>
 800227e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002282:	e005      	b.n	8002290 <HAL_DMA_IRQHandler+0xb0>
 8002284:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002288:	e002      	b.n	8002290 <HAL_DMA_IRQHandler+0xb0>
 800228a:	2340      	movs	r3, #64	; 0x40
 800228c:	e000      	b.n	8002290 <HAL_DMA_IRQHandler+0xb0>
 800228e:	2304      	movs	r3, #4
 8002290:	4a55      	ldr	r2, [pc, #340]	; (80023e8 <HAL_DMA_IRQHandler+0x208>)
 8002292:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002298:	2b00      	cmp	r3, #0
 800229a:	f000 8094 	beq.w	80023c6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80022a6:	e08e      	b.n	80023c6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ac:	2202      	movs	r2, #2
 80022ae:	409a      	lsls	r2, r3
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	4013      	ands	r3, r2
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d056      	beq.n	8002366 <HAL_DMA_IRQHandler+0x186>
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	f003 0302 	and.w	r3, r3, #2
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d051      	beq.n	8002366 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 0320 	and.w	r3, r3, #32
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d10b      	bne.n	80022e8 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f022 020a 	bic.w	r2, r2, #10
 80022de:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2201      	movs	r2, #1
 80022e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a38      	ldr	r2, [pc, #224]	; (80023d0 <HAL_DMA_IRQHandler+0x1f0>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d029      	beq.n	8002346 <HAL_DMA_IRQHandler+0x166>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a37      	ldr	r2, [pc, #220]	; (80023d4 <HAL_DMA_IRQHandler+0x1f4>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d022      	beq.n	8002342 <HAL_DMA_IRQHandler+0x162>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a35      	ldr	r2, [pc, #212]	; (80023d8 <HAL_DMA_IRQHandler+0x1f8>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d01a      	beq.n	800233c <HAL_DMA_IRQHandler+0x15c>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a34      	ldr	r2, [pc, #208]	; (80023dc <HAL_DMA_IRQHandler+0x1fc>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d012      	beq.n	8002336 <HAL_DMA_IRQHandler+0x156>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a32      	ldr	r2, [pc, #200]	; (80023e0 <HAL_DMA_IRQHandler+0x200>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d00a      	beq.n	8002330 <HAL_DMA_IRQHandler+0x150>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a31      	ldr	r2, [pc, #196]	; (80023e4 <HAL_DMA_IRQHandler+0x204>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d102      	bne.n	800232a <HAL_DMA_IRQHandler+0x14a>
 8002324:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002328:	e00e      	b.n	8002348 <HAL_DMA_IRQHandler+0x168>
 800232a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800232e:	e00b      	b.n	8002348 <HAL_DMA_IRQHandler+0x168>
 8002330:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002334:	e008      	b.n	8002348 <HAL_DMA_IRQHandler+0x168>
 8002336:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800233a:	e005      	b.n	8002348 <HAL_DMA_IRQHandler+0x168>
 800233c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002340:	e002      	b.n	8002348 <HAL_DMA_IRQHandler+0x168>
 8002342:	2320      	movs	r3, #32
 8002344:	e000      	b.n	8002348 <HAL_DMA_IRQHandler+0x168>
 8002346:	2302      	movs	r3, #2
 8002348:	4a27      	ldr	r2, [pc, #156]	; (80023e8 <HAL_DMA_IRQHandler+0x208>)
 800234a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2200      	movs	r2, #0
 8002350:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002358:	2b00      	cmp	r3, #0
 800235a:	d034      	beq.n	80023c6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002360:	6878      	ldr	r0, [r7, #4]
 8002362:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002364:	e02f      	b.n	80023c6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236a:	2208      	movs	r2, #8
 800236c:	409a      	lsls	r2, r3
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	4013      	ands	r3, r2
 8002372:	2b00      	cmp	r3, #0
 8002374:	d028      	beq.n	80023c8 <HAL_DMA_IRQHandler+0x1e8>
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	f003 0308 	and.w	r3, r3, #8
 800237c:	2b00      	cmp	r3, #0
 800237e:	d023      	beq.n	80023c8 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f022 020e 	bic.w	r2, r2, #14
 800238e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002398:	2101      	movs	r1, #1
 800239a:	fa01 f202 	lsl.w	r2, r1, r2
 800239e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2201      	movs	r2, #1
 80023a4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2201      	movs	r2, #1
 80023aa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2200      	movs	r2, #0
 80023b2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d004      	beq.n	80023c8 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	4798      	blx	r3
    }
  }
  return;
 80023c6:	bf00      	nop
 80023c8:	bf00      	nop
}
 80023ca:	3710      	adds	r7, #16
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	40020008 	.word	0x40020008
 80023d4:	4002001c 	.word	0x4002001c
 80023d8:	40020030 	.word	0x40020030
 80023dc:	40020044 	.word	0x40020044
 80023e0:	40020058 	.word	0x40020058
 80023e4:	4002006c 	.word	0x4002006c
 80023e8:	40020000 	.word	0x40020000

080023ec <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b085      	sub	sp, #20
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	60f8      	str	r0, [r7, #12]
 80023f4:	60b9      	str	r1, [r7, #8]
 80023f6:	607a      	str	r2, [r7, #4]
 80023f8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002402:	2101      	movs	r1, #1
 8002404:	fa01 f202 	lsl.w	r2, r1, r2
 8002408:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	683a      	ldr	r2, [r7, #0]
 8002410:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	2b10      	cmp	r3, #16
 8002418:	d108      	bne.n	800242c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	68ba      	ldr	r2, [r7, #8]
 8002428:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800242a:	e007      	b.n	800243c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	68ba      	ldr	r2, [r7, #8]
 8002432:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	687a      	ldr	r2, [r7, #4]
 800243a:	60da      	str	r2, [r3, #12]
}
 800243c:	bf00      	nop
 800243e:	3714      	adds	r7, #20
 8002440:	46bd      	mov	sp, r7
 8002442:	bc80      	pop	{r7}
 8002444:	4770      	bx	lr
	...

08002448 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002448:	b480      	push	{r7}
 800244a:	b08b      	sub	sp, #44	; 0x2c
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002452:	2300      	movs	r3, #0
 8002454:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002456:	2300      	movs	r3, #0
 8002458:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800245a:	e169      	b.n	8002730 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800245c:	2201      	movs	r2, #1
 800245e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002460:	fa02 f303 	lsl.w	r3, r2, r3
 8002464:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	69fa      	ldr	r2, [r7, #28]
 800246c:	4013      	ands	r3, r2
 800246e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002470:	69ba      	ldr	r2, [r7, #24]
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	429a      	cmp	r2, r3
 8002476:	f040 8158 	bne.w	800272a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	4a9a      	ldr	r2, [pc, #616]	; (80026e8 <HAL_GPIO_Init+0x2a0>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d05e      	beq.n	8002542 <HAL_GPIO_Init+0xfa>
 8002484:	4a98      	ldr	r2, [pc, #608]	; (80026e8 <HAL_GPIO_Init+0x2a0>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d875      	bhi.n	8002576 <HAL_GPIO_Init+0x12e>
 800248a:	4a98      	ldr	r2, [pc, #608]	; (80026ec <HAL_GPIO_Init+0x2a4>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d058      	beq.n	8002542 <HAL_GPIO_Init+0xfa>
 8002490:	4a96      	ldr	r2, [pc, #600]	; (80026ec <HAL_GPIO_Init+0x2a4>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d86f      	bhi.n	8002576 <HAL_GPIO_Init+0x12e>
 8002496:	4a96      	ldr	r2, [pc, #600]	; (80026f0 <HAL_GPIO_Init+0x2a8>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d052      	beq.n	8002542 <HAL_GPIO_Init+0xfa>
 800249c:	4a94      	ldr	r2, [pc, #592]	; (80026f0 <HAL_GPIO_Init+0x2a8>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d869      	bhi.n	8002576 <HAL_GPIO_Init+0x12e>
 80024a2:	4a94      	ldr	r2, [pc, #592]	; (80026f4 <HAL_GPIO_Init+0x2ac>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d04c      	beq.n	8002542 <HAL_GPIO_Init+0xfa>
 80024a8:	4a92      	ldr	r2, [pc, #584]	; (80026f4 <HAL_GPIO_Init+0x2ac>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d863      	bhi.n	8002576 <HAL_GPIO_Init+0x12e>
 80024ae:	4a92      	ldr	r2, [pc, #584]	; (80026f8 <HAL_GPIO_Init+0x2b0>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d046      	beq.n	8002542 <HAL_GPIO_Init+0xfa>
 80024b4:	4a90      	ldr	r2, [pc, #576]	; (80026f8 <HAL_GPIO_Init+0x2b0>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d85d      	bhi.n	8002576 <HAL_GPIO_Init+0x12e>
 80024ba:	2b12      	cmp	r3, #18
 80024bc:	d82a      	bhi.n	8002514 <HAL_GPIO_Init+0xcc>
 80024be:	2b12      	cmp	r3, #18
 80024c0:	d859      	bhi.n	8002576 <HAL_GPIO_Init+0x12e>
 80024c2:	a201      	add	r2, pc, #4	; (adr r2, 80024c8 <HAL_GPIO_Init+0x80>)
 80024c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024c8:	08002543 	.word	0x08002543
 80024cc:	0800251d 	.word	0x0800251d
 80024d0:	0800252f 	.word	0x0800252f
 80024d4:	08002571 	.word	0x08002571
 80024d8:	08002577 	.word	0x08002577
 80024dc:	08002577 	.word	0x08002577
 80024e0:	08002577 	.word	0x08002577
 80024e4:	08002577 	.word	0x08002577
 80024e8:	08002577 	.word	0x08002577
 80024ec:	08002577 	.word	0x08002577
 80024f0:	08002577 	.word	0x08002577
 80024f4:	08002577 	.word	0x08002577
 80024f8:	08002577 	.word	0x08002577
 80024fc:	08002577 	.word	0x08002577
 8002500:	08002577 	.word	0x08002577
 8002504:	08002577 	.word	0x08002577
 8002508:	08002577 	.word	0x08002577
 800250c:	08002525 	.word	0x08002525
 8002510:	08002539 	.word	0x08002539
 8002514:	4a79      	ldr	r2, [pc, #484]	; (80026fc <HAL_GPIO_Init+0x2b4>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d013      	beq.n	8002542 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800251a:	e02c      	b.n	8002576 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	623b      	str	r3, [r7, #32]
          break;
 8002522:	e029      	b.n	8002578 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	3304      	adds	r3, #4
 800252a:	623b      	str	r3, [r7, #32]
          break;
 800252c:	e024      	b.n	8002578 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	68db      	ldr	r3, [r3, #12]
 8002532:	3308      	adds	r3, #8
 8002534:	623b      	str	r3, [r7, #32]
          break;
 8002536:	e01f      	b.n	8002578 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	330c      	adds	r3, #12
 800253e:	623b      	str	r3, [r7, #32]
          break;
 8002540:	e01a      	b.n	8002578 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d102      	bne.n	8002550 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800254a:	2304      	movs	r3, #4
 800254c:	623b      	str	r3, [r7, #32]
          break;
 800254e:	e013      	b.n	8002578 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	2b01      	cmp	r3, #1
 8002556:	d105      	bne.n	8002564 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002558:	2308      	movs	r3, #8
 800255a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	69fa      	ldr	r2, [r7, #28]
 8002560:	611a      	str	r2, [r3, #16]
          break;
 8002562:	e009      	b.n	8002578 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002564:	2308      	movs	r3, #8
 8002566:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	69fa      	ldr	r2, [r7, #28]
 800256c:	615a      	str	r2, [r3, #20]
          break;
 800256e:	e003      	b.n	8002578 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002570:	2300      	movs	r3, #0
 8002572:	623b      	str	r3, [r7, #32]
          break;
 8002574:	e000      	b.n	8002578 <HAL_GPIO_Init+0x130>
          break;
 8002576:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002578:	69bb      	ldr	r3, [r7, #24]
 800257a:	2bff      	cmp	r3, #255	; 0xff
 800257c:	d801      	bhi.n	8002582 <HAL_GPIO_Init+0x13a>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	e001      	b.n	8002586 <HAL_GPIO_Init+0x13e>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	3304      	adds	r3, #4
 8002586:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002588:	69bb      	ldr	r3, [r7, #24]
 800258a:	2bff      	cmp	r3, #255	; 0xff
 800258c:	d802      	bhi.n	8002594 <HAL_GPIO_Init+0x14c>
 800258e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	e002      	b.n	800259a <HAL_GPIO_Init+0x152>
 8002594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002596:	3b08      	subs	r3, #8
 8002598:	009b      	lsls	r3, r3, #2
 800259a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	210f      	movs	r1, #15
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	fa01 f303 	lsl.w	r3, r1, r3
 80025a8:	43db      	mvns	r3, r3
 80025aa:	401a      	ands	r2, r3
 80025ac:	6a39      	ldr	r1, [r7, #32]
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	fa01 f303 	lsl.w	r3, r1, r3
 80025b4:	431a      	orrs	r2, r3
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	f000 80b1 	beq.w	800272a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80025c8:	4b4d      	ldr	r3, [pc, #308]	; (8002700 <HAL_GPIO_Init+0x2b8>)
 80025ca:	699b      	ldr	r3, [r3, #24]
 80025cc:	4a4c      	ldr	r2, [pc, #304]	; (8002700 <HAL_GPIO_Init+0x2b8>)
 80025ce:	f043 0301 	orr.w	r3, r3, #1
 80025d2:	6193      	str	r3, [r2, #24]
 80025d4:	4b4a      	ldr	r3, [pc, #296]	; (8002700 <HAL_GPIO_Init+0x2b8>)
 80025d6:	699b      	ldr	r3, [r3, #24]
 80025d8:	f003 0301 	and.w	r3, r3, #1
 80025dc:	60bb      	str	r3, [r7, #8]
 80025de:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80025e0:	4a48      	ldr	r2, [pc, #288]	; (8002704 <HAL_GPIO_Init+0x2bc>)
 80025e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e4:	089b      	lsrs	r3, r3, #2
 80025e6:	3302      	adds	r3, #2
 80025e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025ec:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80025ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f0:	f003 0303 	and.w	r3, r3, #3
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	220f      	movs	r2, #15
 80025f8:	fa02 f303 	lsl.w	r3, r2, r3
 80025fc:	43db      	mvns	r3, r3
 80025fe:	68fa      	ldr	r2, [r7, #12]
 8002600:	4013      	ands	r3, r2
 8002602:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	4a40      	ldr	r2, [pc, #256]	; (8002708 <HAL_GPIO_Init+0x2c0>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d013      	beq.n	8002634 <HAL_GPIO_Init+0x1ec>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	4a3f      	ldr	r2, [pc, #252]	; (800270c <HAL_GPIO_Init+0x2c4>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d00d      	beq.n	8002630 <HAL_GPIO_Init+0x1e8>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	4a3e      	ldr	r2, [pc, #248]	; (8002710 <HAL_GPIO_Init+0x2c8>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d007      	beq.n	800262c <HAL_GPIO_Init+0x1e4>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	4a3d      	ldr	r2, [pc, #244]	; (8002714 <HAL_GPIO_Init+0x2cc>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d101      	bne.n	8002628 <HAL_GPIO_Init+0x1e0>
 8002624:	2303      	movs	r3, #3
 8002626:	e006      	b.n	8002636 <HAL_GPIO_Init+0x1ee>
 8002628:	2304      	movs	r3, #4
 800262a:	e004      	b.n	8002636 <HAL_GPIO_Init+0x1ee>
 800262c:	2302      	movs	r3, #2
 800262e:	e002      	b.n	8002636 <HAL_GPIO_Init+0x1ee>
 8002630:	2301      	movs	r3, #1
 8002632:	e000      	b.n	8002636 <HAL_GPIO_Init+0x1ee>
 8002634:	2300      	movs	r3, #0
 8002636:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002638:	f002 0203 	and.w	r2, r2, #3
 800263c:	0092      	lsls	r2, r2, #2
 800263e:	4093      	lsls	r3, r2
 8002640:	68fa      	ldr	r2, [r7, #12]
 8002642:	4313      	orrs	r3, r2
 8002644:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002646:	492f      	ldr	r1, [pc, #188]	; (8002704 <HAL_GPIO_Init+0x2bc>)
 8002648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264a:	089b      	lsrs	r3, r3, #2
 800264c:	3302      	adds	r3, #2
 800264e:	68fa      	ldr	r2, [r7, #12]
 8002650:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800265c:	2b00      	cmp	r3, #0
 800265e:	d006      	beq.n	800266e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002660:	4b2d      	ldr	r3, [pc, #180]	; (8002718 <HAL_GPIO_Init+0x2d0>)
 8002662:	689a      	ldr	r2, [r3, #8]
 8002664:	492c      	ldr	r1, [pc, #176]	; (8002718 <HAL_GPIO_Init+0x2d0>)
 8002666:	69bb      	ldr	r3, [r7, #24]
 8002668:	4313      	orrs	r3, r2
 800266a:	608b      	str	r3, [r1, #8]
 800266c:	e006      	b.n	800267c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800266e:	4b2a      	ldr	r3, [pc, #168]	; (8002718 <HAL_GPIO_Init+0x2d0>)
 8002670:	689a      	ldr	r2, [r3, #8]
 8002672:	69bb      	ldr	r3, [r7, #24]
 8002674:	43db      	mvns	r3, r3
 8002676:	4928      	ldr	r1, [pc, #160]	; (8002718 <HAL_GPIO_Init+0x2d0>)
 8002678:	4013      	ands	r3, r2
 800267a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002684:	2b00      	cmp	r3, #0
 8002686:	d006      	beq.n	8002696 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002688:	4b23      	ldr	r3, [pc, #140]	; (8002718 <HAL_GPIO_Init+0x2d0>)
 800268a:	68da      	ldr	r2, [r3, #12]
 800268c:	4922      	ldr	r1, [pc, #136]	; (8002718 <HAL_GPIO_Init+0x2d0>)
 800268e:	69bb      	ldr	r3, [r7, #24]
 8002690:	4313      	orrs	r3, r2
 8002692:	60cb      	str	r3, [r1, #12]
 8002694:	e006      	b.n	80026a4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002696:	4b20      	ldr	r3, [pc, #128]	; (8002718 <HAL_GPIO_Init+0x2d0>)
 8002698:	68da      	ldr	r2, [r3, #12]
 800269a:	69bb      	ldr	r3, [r7, #24]
 800269c:	43db      	mvns	r3, r3
 800269e:	491e      	ldr	r1, [pc, #120]	; (8002718 <HAL_GPIO_Init+0x2d0>)
 80026a0:	4013      	ands	r3, r2
 80026a2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d006      	beq.n	80026be <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80026b0:	4b19      	ldr	r3, [pc, #100]	; (8002718 <HAL_GPIO_Init+0x2d0>)
 80026b2:	685a      	ldr	r2, [r3, #4]
 80026b4:	4918      	ldr	r1, [pc, #96]	; (8002718 <HAL_GPIO_Init+0x2d0>)
 80026b6:	69bb      	ldr	r3, [r7, #24]
 80026b8:	4313      	orrs	r3, r2
 80026ba:	604b      	str	r3, [r1, #4]
 80026bc:	e006      	b.n	80026cc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80026be:	4b16      	ldr	r3, [pc, #88]	; (8002718 <HAL_GPIO_Init+0x2d0>)
 80026c0:	685a      	ldr	r2, [r3, #4]
 80026c2:	69bb      	ldr	r3, [r7, #24]
 80026c4:	43db      	mvns	r3, r3
 80026c6:	4914      	ldr	r1, [pc, #80]	; (8002718 <HAL_GPIO_Init+0x2d0>)
 80026c8:	4013      	ands	r3, r2
 80026ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d021      	beq.n	800271c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80026d8:	4b0f      	ldr	r3, [pc, #60]	; (8002718 <HAL_GPIO_Init+0x2d0>)
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	490e      	ldr	r1, [pc, #56]	; (8002718 <HAL_GPIO_Init+0x2d0>)
 80026de:	69bb      	ldr	r3, [r7, #24]
 80026e0:	4313      	orrs	r3, r2
 80026e2:	600b      	str	r3, [r1, #0]
 80026e4:	e021      	b.n	800272a <HAL_GPIO_Init+0x2e2>
 80026e6:	bf00      	nop
 80026e8:	10320000 	.word	0x10320000
 80026ec:	10310000 	.word	0x10310000
 80026f0:	10220000 	.word	0x10220000
 80026f4:	10210000 	.word	0x10210000
 80026f8:	10120000 	.word	0x10120000
 80026fc:	10110000 	.word	0x10110000
 8002700:	40021000 	.word	0x40021000
 8002704:	40010000 	.word	0x40010000
 8002708:	40010800 	.word	0x40010800
 800270c:	40010c00 	.word	0x40010c00
 8002710:	40011000 	.word	0x40011000
 8002714:	40011400 	.word	0x40011400
 8002718:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800271c:	4b0b      	ldr	r3, [pc, #44]	; (800274c <HAL_GPIO_Init+0x304>)
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	69bb      	ldr	r3, [r7, #24]
 8002722:	43db      	mvns	r3, r3
 8002724:	4909      	ldr	r1, [pc, #36]	; (800274c <HAL_GPIO_Init+0x304>)
 8002726:	4013      	ands	r3, r2
 8002728:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800272a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272c:	3301      	adds	r3, #1
 800272e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002736:	fa22 f303 	lsr.w	r3, r2, r3
 800273a:	2b00      	cmp	r3, #0
 800273c:	f47f ae8e 	bne.w	800245c <HAL_GPIO_Init+0x14>
  }
}
 8002740:	bf00      	nop
 8002742:	bf00      	nop
 8002744:	372c      	adds	r7, #44	; 0x2c
 8002746:	46bd      	mov	sp, r7
 8002748:	bc80      	pop	{r7}
 800274a:	4770      	bx	lr
 800274c:	40010400 	.word	0x40010400

08002750 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002750:	b480      	push	{r7}
 8002752:	b083      	sub	sp, #12
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
 8002758:	460b      	mov	r3, r1
 800275a:	807b      	strh	r3, [r7, #2]
 800275c:	4613      	mov	r3, r2
 800275e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002760:	787b      	ldrb	r3, [r7, #1]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d003      	beq.n	800276e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002766:	887a      	ldrh	r2, [r7, #2]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800276c:	e003      	b.n	8002776 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800276e:	887b      	ldrh	r3, [r7, #2]
 8002770:	041a      	lsls	r2, r3, #16
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	611a      	str	r2, [r3, #16]
}
 8002776:	bf00      	nop
 8002778:	370c      	adds	r7, #12
 800277a:	46bd      	mov	sp, r7
 800277c:	bc80      	pop	{r7}
 800277e:	4770      	bx	lr

08002780 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b084      	sub	sp, #16
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d101      	bne.n	8002792 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e12b      	b.n	80029ea <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002798:	b2db      	uxtb	r3, r3
 800279a:	2b00      	cmp	r3, #0
 800279c:	d106      	bne.n	80027ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2200      	movs	r2, #0
 80027a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f7fe fb54 	bl	8000e54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2224      	movs	r2, #36	; 0x24
 80027b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f022 0201 	bic.w	r2, r2, #1
 80027c2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80027d2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80027e2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80027e4:	f000 fcda 	bl	800319c <HAL_RCC_GetPCLK1Freq>
 80027e8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	4a81      	ldr	r2, [pc, #516]	; (80029f4 <HAL_I2C_Init+0x274>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d807      	bhi.n	8002804 <HAL_I2C_Init+0x84>
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	4a80      	ldr	r2, [pc, #512]	; (80029f8 <HAL_I2C_Init+0x278>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	bf94      	ite	ls
 80027fc:	2301      	movls	r3, #1
 80027fe:	2300      	movhi	r3, #0
 8002800:	b2db      	uxtb	r3, r3
 8002802:	e006      	b.n	8002812 <HAL_I2C_Init+0x92>
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	4a7d      	ldr	r2, [pc, #500]	; (80029fc <HAL_I2C_Init+0x27c>)
 8002808:	4293      	cmp	r3, r2
 800280a:	bf94      	ite	ls
 800280c:	2301      	movls	r3, #1
 800280e:	2300      	movhi	r3, #0
 8002810:	b2db      	uxtb	r3, r3
 8002812:	2b00      	cmp	r3, #0
 8002814:	d001      	beq.n	800281a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e0e7      	b.n	80029ea <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	4a78      	ldr	r2, [pc, #480]	; (8002a00 <HAL_I2C_Init+0x280>)
 800281e:	fba2 2303 	umull	r2, r3, r2, r3
 8002822:	0c9b      	lsrs	r3, r3, #18
 8002824:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	68ba      	ldr	r2, [r7, #8]
 8002836:	430a      	orrs	r2, r1
 8002838:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	6a1b      	ldr	r3, [r3, #32]
 8002840:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	4a6a      	ldr	r2, [pc, #424]	; (80029f4 <HAL_I2C_Init+0x274>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d802      	bhi.n	8002854 <HAL_I2C_Init+0xd4>
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	3301      	adds	r3, #1
 8002852:	e009      	b.n	8002868 <HAL_I2C_Init+0xe8>
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800285a:	fb02 f303 	mul.w	r3, r2, r3
 800285e:	4a69      	ldr	r2, [pc, #420]	; (8002a04 <HAL_I2C_Init+0x284>)
 8002860:	fba2 2303 	umull	r2, r3, r2, r3
 8002864:	099b      	lsrs	r3, r3, #6
 8002866:	3301      	adds	r3, #1
 8002868:	687a      	ldr	r2, [r7, #4]
 800286a:	6812      	ldr	r2, [r2, #0]
 800286c:	430b      	orrs	r3, r1
 800286e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	69db      	ldr	r3, [r3, #28]
 8002876:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800287a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	495c      	ldr	r1, [pc, #368]	; (80029f4 <HAL_I2C_Init+0x274>)
 8002884:	428b      	cmp	r3, r1
 8002886:	d819      	bhi.n	80028bc <HAL_I2C_Init+0x13c>
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	1e59      	subs	r1, r3, #1
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	005b      	lsls	r3, r3, #1
 8002892:	fbb1 f3f3 	udiv	r3, r1, r3
 8002896:	1c59      	adds	r1, r3, #1
 8002898:	f640 73fc 	movw	r3, #4092	; 0xffc
 800289c:	400b      	ands	r3, r1
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d00a      	beq.n	80028b8 <HAL_I2C_Init+0x138>
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	1e59      	subs	r1, r3, #1
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	005b      	lsls	r3, r3, #1
 80028ac:	fbb1 f3f3 	udiv	r3, r1, r3
 80028b0:	3301      	adds	r3, #1
 80028b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028b6:	e051      	b.n	800295c <HAL_I2C_Init+0x1dc>
 80028b8:	2304      	movs	r3, #4
 80028ba:	e04f      	b.n	800295c <HAL_I2C_Init+0x1dc>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d111      	bne.n	80028e8 <HAL_I2C_Init+0x168>
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	1e58      	subs	r0, r3, #1
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6859      	ldr	r1, [r3, #4]
 80028cc:	460b      	mov	r3, r1
 80028ce:	005b      	lsls	r3, r3, #1
 80028d0:	440b      	add	r3, r1
 80028d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80028d6:	3301      	adds	r3, #1
 80028d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028dc:	2b00      	cmp	r3, #0
 80028de:	bf0c      	ite	eq
 80028e0:	2301      	moveq	r3, #1
 80028e2:	2300      	movne	r3, #0
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	e012      	b.n	800290e <HAL_I2C_Init+0x18e>
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	1e58      	subs	r0, r3, #1
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6859      	ldr	r1, [r3, #4]
 80028f0:	460b      	mov	r3, r1
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	440b      	add	r3, r1
 80028f6:	0099      	lsls	r1, r3, #2
 80028f8:	440b      	add	r3, r1
 80028fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80028fe:	3301      	adds	r3, #1
 8002900:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002904:	2b00      	cmp	r3, #0
 8002906:	bf0c      	ite	eq
 8002908:	2301      	moveq	r3, #1
 800290a:	2300      	movne	r3, #0
 800290c:	b2db      	uxtb	r3, r3
 800290e:	2b00      	cmp	r3, #0
 8002910:	d001      	beq.n	8002916 <HAL_I2C_Init+0x196>
 8002912:	2301      	movs	r3, #1
 8002914:	e022      	b.n	800295c <HAL_I2C_Init+0x1dc>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d10e      	bne.n	800293c <HAL_I2C_Init+0x1bc>
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	1e58      	subs	r0, r3, #1
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6859      	ldr	r1, [r3, #4]
 8002926:	460b      	mov	r3, r1
 8002928:	005b      	lsls	r3, r3, #1
 800292a:	440b      	add	r3, r1
 800292c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002930:	3301      	adds	r3, #1
 8002932:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002936:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800293a:	e00f      	b.n	800295c <HAL_I2C_Init+0x1dc>
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	1e58      	subs	r0, r3, #1
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6859      	ldr	r1, [r3, #4]
 8002944:	460b      	mov	r3, r1
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	440b      	add	r3, r1
 800294a:	0099      	lsls	r1, r3, #2
 800294c:	440b      	add	r3, r1
 800294e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002952:	3301      	adds	r3, #1
 8002954:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002958:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800295c:	6879      	ldr	r1, [r7, #4]
 800295e:	6809      	ldr	r1, [r1, #0]
 8002960:	4313      	orrs	r3, r2
 8002962:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	69da      	ldr	r2, [r3, #28]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6a1b      	ldr	r3, [r3, #32]
 8002976:	431a      	orrs	r2, r3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	430a      	orrs	r2, r1
 800297e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800298a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	6911      	ldr	r1, [r2, #16]
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	68d2      	ldr	r2, [r2, #12]
 8002996:	4311      	orrs	r1, r2
 8002998:	687a      	ldr	r2, [r7, #4]
 800299a:	6812      	ldr	r2, [r2, #0]
 800299c:	430b      	orrs	r3, r1
 800299e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	68db      	ldr	r3, [r3, #12]
 80029a6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	695a      	ldr	r2, [r3, #20]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	699b      	ldr	r3, [r3, #24]
 80029b2:	431a      	orrs	r2, r3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	430a      	orrs	r2, r1
 80029ba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f042 0201 	orr.w	r2, r2, #1
 80029ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2200      	movs	r2, #0
 80029d0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2220      	movs	r2, #32
 80029d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2200      	movs	r2, #0
 80029de:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2200      	movs	r2, #0
 80029e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80029e8:	2300      	movs	r3, #0
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3710      	adds	r7, #16
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	000186a0 	.word	0x000186a0
 80029f8:	001e847f 	.word	0x001e847f
 80029fc:	003d08ff 	.word	0x003d08ff
 8002a00:	431bde83 	.word	0x431bde83
 8002a04:	10624dd3 	.word	0x10624dd3

08002a08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b086      	sub	sp, #24
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d101      	bne.n	8002a1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e272      	b.n	8002f00 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0301 	and.w	r3, r3, #1
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	f000 8087 	beq.w	8002b36 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a28:	4b92      	ldr	r3, [pc, #584]	; (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f003 030c 	and.w	r3, r3, #12
 8002a30:	2b04      	cmp	r3, #4
 8002a32:	d00c      	beq.n	8002a4e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a34:	4b8f      	ldr	r3, [pc, #572]	; (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f003 030c 	and.w	r3, r3, #12
 8002a3c:	2b08      	cmp	r3, #8
 8002a3e:	d112      	bne.n	8002a66 <HAL_RCC_OscConfig+0x5e>
 8002a40:	4b8c      	ldr	r3, [pc, #560]	; (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a4c:	d10b      	bne.n	8002a66 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a4e:	4b89      	ldr	r3, [pc, #548]	; (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d06c      	beq.n	8002b34 <HAL_RCC_OscConfig+0x12c>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d168      	bne.n	8002b34 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e24c      	b.n	8002f00 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a6e:	d106      	bne.n	8002a7e <HAL_RCC_OscConfig+0x76>
 8002a70:	4b80      	ldr	r3, [pc, #512]	; (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a7f      	ldr	r2, [pc, #508]	; (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002a76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a7a:	6013      	str	r3, [r2, #0]
 8002a7c:	e02e      	b.n	8002adc <HAL_RCC_OscConfig+0xd4>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d10c      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x98>
 8002a86:	4b7b      	ldr	r3, [pc, #492]	; (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a7a      	ldr	r2, [pc, #488]	; (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002a8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a90:	6013      	str	r3, [r2, #0]
 8002a92:	4b78      	ldr	r3, [pc, #480]	; (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a77      	ldr	r2, [pc, #476]	; (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002a98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a9c:	6013      	str	r3, [r2, #0]
 8002a9e:	e01d      	b.n	8002adc <HAL_RCC_OscConfig+0xd4>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002aa8:	d10c      	bne.n	8002ac4 <HAL_RCC_OscConfig+0xbc>
 8002aaa:	4b72      	ldr	r3, [pc, #456]	; (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a71      	ldr	r2, [pc, #452]	; (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002ab0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ab4:	6013      	str	r3, [r2, #0]
 8002ab6:	4b6f      	ldr	r3, [pc, #444]	; (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a6e      	ldr	r2, [pc, #440]	; (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002abc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ac0:	6013      	str	r3, [r2, #0]
 8002ac2:	e00b      	b.n	8002adc <HAL_RCC_OscConfig+0xd4>
 8002ac4:	4b6b      	ldr	r3, [pc, #428]	; (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a6a      	ldr	r2, [pc, #424]	; (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002aca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ace:	6013      	str	r3, [r2, #0]
 8002ad0:	4b68      	ldr	r3, [pc, #416]	; (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a67      	ldr	r2, [pc, #412]	; (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002ad6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ada:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d013      	beq.n	8002b0c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ae4:	f7fe fec0 	bl	8001868 <HAL_GetTick>
 8002ae8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aea:	e008      	b.n	8002afe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002aec:	f7fe febc 	bl	8001868 <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	2b64      	cmp	r3, #100	; 0x64
 8002af8:	d901      	bls.n	8002afe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e200      	b.n	8002f00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002afe:	4b5d      	ldr	r3, [pc, #372]	; (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d0f0      	beq.n	8002aec <HAL_RCC_OscConfig+0xe4>
 8002b0a:	e014      	b.n	8002b36 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b0c:	f7fe feac 	bl	8001868 <HAL_GetTick>
 8002b10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b12:	e008      	b.n	8002b26 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b14:	f7fe fea8 	bl	8001868 <HAL_GetTick>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	2b64      	cmp	r3, #100	; 0x64
 8002b20:	d901      	bls.n	8002b26 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	e1ec      	b.n	8002f00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b26:	4b53      	ldr	r3, [pc, #332]	; (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d1f0      	bne.n	8002b14 <HAL_RCC_OscConfig+0x10c>
 8002b32:	e000      	b.n	8002b36 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0302 	and.w	r3, r3, #2
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d063      	beq.n	8002c0a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b42:	4b4c      	ldr	r3, [pc, #304]	; (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	f003 030c 	and.w	r3, r3, #12
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d00b      	beq.n	8002b66 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002b4e:	4b49      	ldr	r3, [pc, #292]	; (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	f003 030c 	and.w	r3, r3, #12
 8002b56:	2b08      	cmp	r3, #8
 8002b58:	d11c      	bne.n	8002b94 <HAL_RCC_OscConfig+0x18c>
 8002b5a:	4b46      	ldr	r3, [pc, #280]	; (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d116      	bne.n	8002b94 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b66:	4b43      	ldr	r3, [pc, #268]	; (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0302 	and.w	r3, r3, #2
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d005      	beq.n	8002b7e <HAL_RCC_OscConfig+0x176>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	691b      	ldr	r3, [r3, #16]
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d001      	beq.n	8002b7e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e1c0      	b.n	8002f00 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b7e:	4b3d      	ldr	r3, [pc, #244]	; (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	695b      	ldr	r3, [r3, #20]
 8002b8a:	00db      	lsls	r3, r3, #3
 8002b8c:	4939      	ldr	r1, [pc, #228]	; (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b92:	e03a      	b.n	8002c0a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	691b      	ldr	r3, [r3, #16]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d020      	beq.n	8002bde <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b9c:	4b36      	ldr	r3, [pc, #216]	; (8002c78 <HAL_RCC_OscConfig+0x270>)
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ba2:	f7fe fe61 	bl	8001868 <HAL_GetTick>
 8002ba6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ba8:	e008      	b.n	8002bbc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002baa:	f7fe fe5d 	bl	8001868 <HAL_GetTick>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	1ad3      	subs	r3, r2, r3
 8002bb4:	2b02      	cmp	r3, #2
 8002bb6:	d901      	bls.n	8002bbc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002bb8:	2303      	movs	r3, #3
 8002bba:	e1a1      	b.n	8002f00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bbc:	4b2d      	ldr	r3, [pc, #180]	; (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 0302 	and.w	r3, r3, #2
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d0f0      	beq.n	8002baa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bc8:	4b2a      	ldr	r3, [pc, #168]	; (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	695b      	ldr	r3, [r3, #20]
 8002bd4:	00db      	lsls	r3, r3, #3
 8002bd6:	4927      	ldr	r1, [pc, #156]	; (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	600b      	str	r3, [r1, #0]
 8002bdc:	e015      	b.n	8002c0a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bde:	4b26      	ldr	r3, [pc, #152]	; (8002c78 <HAL_RCC_OscConfig+0x270>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002be4:	f7fe fe40 	bl	8001868 <HAL_GetTick>
 8002be8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bea:	e008      	b.n	8002bfe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bec:	f7fe fe3c 	bl	8001868 <HAL_GetTick>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d901      	bls.n	8002bfe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	e180      	b.n	8002f00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bfe:	4b1d      	ldr	r3, [pc, #116]	; (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0302 	and.w	r3, r3, #2
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d1f0      	bne.n	8002bec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0308 	and.w	r3, r3, #8
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d03a      	beq.n	8002c8c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	699b      	ldr	r3, [r3, #24]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d019      	beq.n	8002c52 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c1e:	4b17      	ldr	r3, [pc, #92]	; (8002c7c <HAL_RCC_OscConfig+0x274>)
 8002c20:	2201      	movs	r2, #1
 8002c22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c24:	f7fe fe20 	bl	8001868 <HAL_GetTick>
 8002c28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c2a:	e008      	b.n	8002c3e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c2c:	f7fe fe1c 	bl	8001868 <HAL_GetTick>
 8002c30:	4602      	mov	r2, r0
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	2b02      	cmp	r3, #2
 8002c38:	d901      	bls.n	8002c3e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	e160      	b.n	8002f00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c3e:	4b0d      	ldr	r3, [pc, #52]	; (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c42:	f003 0302 	and.w	r3, r3, #2
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d0f0      	beq.n	8002c2c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002c4a:	2001      	movs	r0, #1
 8002c4c:	f000 face 	bl	80031ec <RCC_Delay>
 8002c50:	e01c      	b.n	8002c8c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c52:	4b0a      	ldr	r3, [pc, #40]	; (8002c7c <HAL_RCC_OscConfig+0x274>)
 8002c54:	2200      	movs	r2, #0
 8002c56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c58:	f7fe fe06 	bl	8001868 <HAL_GetTick>
 8002c5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c5e:	e00f      	b.n	8002c80 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c60:	f7fe fe02 	bl	8001868 <HAL_GetTick>
 8002c64:	4602      	mov	r2, r0
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	2b02      	cmp	r3, #2
 8002c6c:	d908      	bls.n	8002c80 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	e146      	b.n	8002f00 <HAL_RCC_OscConfig+0x4f8>
 8002c72:	bf00      	nop
 8002c74:	40021000 	.word	0x40021000
 8002c78:	42420000 	.word	0x42420000
 8002c7c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c80:	4b92      	ldr	r3, [pc, #584]	; (8002ecc <HAL_RCC_OscConfig+0x4c4>)
 8002c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c84:	f003 0302 	and.w	r3, r3, #2
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d1e9      	bne.n	8002c60 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 0304 	and.w	r3, r3, #4
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	f000 80a6 	beq.w	8002de6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c9e:	4b8b      	ldr	r3, [pc, #556]	; (8002ecc <HAL_RCC_OscConfig+0x4c4>)
 8002ca0:	69db      	ldr	r3, [r3, #28]
 8002ca2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d10d      	bne.n	8002cc6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002caa:	4b88      	ldr	r3, [pc, #544]	; (8002ecc <HAL_RCC_OscConfig+0x4c4>)
 8002cac:	69db      	ldr	r3, [r3, #28]
 8002cae:	4a87      	ldr	r2, [pc, #540]	; (8002ecc <HAL_RCC_OscConfig+0x4c4>)
 8002cb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cb4:	61d3      	str	r3, [r2, #28]
 8002cb6:	4b85      	ldr	r3, [pc, #532]	; (8002ecc <HAL_RCC_OscConfig+0x4c4>)
 8002cb8:	69db      	ldr	r3, [r3, #28]
 8002cba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cbe:	60bb      	str	r3, [r7, #8]
 8002cc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cc6:	4b82      	ldr	r3, [pc, #520]	; (8002ed0 <HAL_RCC_OscConfig+0x4c8>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d118      	bne.n	8002d04 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cd2:	4b7f      	ldr	r3, [pc, #508]	; (8002ed0 <HAL_RCC_OscConfig+0x4c8>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a7e      	ldr	r2, [pc, #504]	; (8002ed0 <HAL_RCC_OscConfig+0x4c8>)
 8002cd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cdc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cde:	f7fe fdc3 	bl	8001868 <HAL_GetTick>
 8002ce2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ce4:	e008      	b.n	8002cf8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ce6:	f7fe fdbf 	bl	8001868 <HAL_GetTick>
 8002cea:	4602      	mov	r2, r0
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	2b64      	cmp	r3, #100	; 0x64
 8002cf2:	d901      	bls.n	8002cf8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002cf4:	2303      	movs	r3, #3
 8002cf6:	e103      	b.n	8002f00 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cf8:	4b75      	ldr	r3, [pc, #468]	; (8002ed0 <HAL_RCC_OscConfig+0x4c8>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d0f0      	beq.n	8002ce6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d106      	bne.n	8002d1a <HAL_RCC_OscConfig+0x312>
 8002d0c:	4b6f      	ldr	r3, [pc, #444]	; (8002ecc <HAL_RCC_OscConfig+0x4c4>)
 8002d0e:	6a1b      	ldr	r3, [r3, #32]
 8002d10:	4a6e      	ldr	r2, [pc, #440]	; (8002ecc <HAL_RCC_OscConfig+0x4c4>)
 8002d12:	f043 0301 	orr.w	r3, r3, #1
 8002d16:	6213      	str	r3, [r2, #32]
 8002d18:	e02d      	b.n	8002d76 <HAL_RCC_OscConfig+0x36e>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	68db      	ldr	r3, [r3, #12]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d10c      	bne.n	8002d3c <HAL_RCC_OscConfig+0x334>
 8002d22:	4b6a      	ldr	r3, [pc, #424]	; (8002ecc <HAL_RCC_OscConfig+0x4c4>)
 8002d24:	6a1b      	ldr	r3, [r3, #32]
 8002d26:	4a69      	ldr	r2, [pc, #420]	; (8002ecc <HAL_RCC_OscConfig+0x4c4>)
 8002d28:	f023 0301 	bic.w	r3, r3, #1
 8002d2c:	6213      	str	r3, [r2, #32]
 8002d2e:	4b67      	ldr	r3, [pc, #412]	; (8002ecc <HAL_RCC_OscConfig+0x4c4>)
 8002d30:	6a1b      	ldr	r3, [r3, #32]
 8002d32:	4a66      	ldr	r2, [pc, #408]	; (8002ecc <HAL_RCC_OscConfig+0x4c4>)
 8002d34:	f023 0304 	bic.w	r3, r3, #4
 8002d38:	6213      	str	r3, [r2, #32]
 8002d3a:	e01c      	b.n	8002d76 <HAL_RCC_OscConfig+0x36e>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	2b05      	cmp	r3, #5
 8002d42:	d10c      	bne.n	8002d5e <HAL_RCC_OscConfig+0x356>
 8002d44:	4b61      	ldr	r3, [pc, #388]	; (8002ecc <HAL_RCC_OscConfig+0x4c4>)
 8002d46:	6a1b      	ldr	r3, [r3, #32]
 8002d48:	4a60      	ldr	r2, [pc, #384]	; (8002ecc <HAL_RCC_OscConfig+0x4c4>)
 8002d4a:	f043 0304 	orr.w	r3, r3, #4
 8002d4e:	6213      	str	r3, [r2, #32]
 8002d50:	4b5e      	ldr	r3, [pc, #376]	; (8002ecc <HAL_RCC_OscConfig+0x4c4>)
 8002d52:	6a1b      	ldr	r3, [r3, #32]
 8002d54:	4a5d      	ldr	r2, [pc, #372]	; (8002ecc <HAL_RCC_OscConfig+0x4c4>)
 8002d56:	f043 0301 	orr.w	r3, r3, #1
 8002d5a:	6213      	str	r3, [r2, #32]
 8002d5c:	e00b      	b.n	8002d76 <HAL_RCC_OscConfig+0x36e>
 8002d5e:	4b5b      	ldr	r3, [pc, #364]	; (8002ecc <HAL_RCC_OscConfig+0x4c4>)
 8002d60:	6a1b      	ldr	r3, [r3, #32]
 8002d62:	4a5a      	ldr	r2, [pc, #360]	; (8002ecc <HAL_RCC_OscConfig+0x4c4>)
 8002d64:	f023 0301 	bic.w	r3, r3, #1
 8002d68:	6213      	str	r3, [r2, #32]
 8002d6a:	4b58      	ldr	r3, [pc, #352]	; (8002ecc <HAL_RCC_OscConfig+0x4c4>)
 8002d6c:	6a1b      	ldr	r3, [r3, #32]
 8002d6e:	4a57      	ldr	r2, [pc, #348]	; (8002ecc <HAL_RCC_OscConfig+0x4c4>)
 8002d70:	f023 0304 	bic.w	r3, r3, #4
 8002d74:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	68db      	ldr	r3, [r3, #12]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d015      	beq.n	8002daa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d7e:	f7fe fd73 	bl	8001868 <HAL_GetTick>
 8002d82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d84:	e00a      	b.n	8002d9c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d86:	f7fe fd6f 	bl	8001868 <HAL_GetTick>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	1ad3      	subs	r3, r2, r3
 8002d90:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d901      	bls.n	8002d9c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002d98:	2303      	movs	r3, #3
 8002d9a:	e0b1      	b.n	8002f00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d9c:	4b4b      	ldr	r3, [pc, #300]	; (8002ecc <HAL_RCC_OscConfig+0x4c4>)
 8002d9e:	6a1b      	ldr	r3, [r3, #32]
 8002da0:	f003 0302 	and.w	r3, r3, #2
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d0ee      	beq.n	8002d86 <HAL_RCC_OscConfig+0x37e>
 8002da8:	e014      	b.n	8002dd4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002daa:	f7fe fd5d 	bl	8001868 <HAL_GetTick>
 8002dae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002db0:	e00a      	b.n	8002dc8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002db2:	f7fe fd59 	bl	8001868 <HAL_GetTick>
 8002db6:	4602      	mov	r2, r0
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	1ad3      	subs	r3, r2, r3
 8002dbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d901      	bls.n	8002dc8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002dc4:	2303      	movs	r3, #3
 8002dc6:	e09b      	b.n	8002f00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dc8:	4b40      	ldr	r3, [pc, #256]	; (8002ecc <HAL_RCC_OscConfig+0x4c4>)
 8002dca:	6a1b      	ldr	r3, [r3, #32]
 8002dcc:	f003 0302 	and.w	r3, r3, #2
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d1ee      	bne.n	8002db2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002dd4:	7dfb      	ldrb	r3, [r7, #23]
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d105      	bne.n	8002de6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dda:	4b3c      	ldr	r3, [pc, #240]	; (8002ecc <HAL_RCC_OscConfig+0x4c4>)
 8002ddc:	69db      	ldr	r3, [r3, #28]
 8002dde:	4a3b      	ldr	r2, [pc, #236]	; (8002ecc <HAL_RCC_OscConfig+0x4c4>)
 8002de0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002de4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	69db      	ldr	r3, [r3, #28]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	f000 8087 	beq.w	8002efe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002df0:	4b36      	ldr	r3, [pc, #216]	; (8002ecc <HAL_RCC_OscConfig+0x4c4>)
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	f003 030c 	and.w	r3, r3, #12
 8002df8:	2b08      	cmp	r3, #8
 8002dfa:	d061      	beq.n	8002ec0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	69db      	ldr	r3, [r3, #28]
 8002e00:	2b02      	cmp	r3, #2
 8002e02:	d146      	bne.n	8002e92 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e04:	4b33      	ldr	r3, [pc, #204]	; (8002ed4 <HAL_RCC_OscConfig+0x4cc>)
 8002e06:	2200      	movs	r2, #0
 8002e08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e0a:	f7fe fd2d 	bl	8001868 <HAL_GetTick>
 8002e0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e10:	e008      	b.n	8002e24 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e12:	f7fe fd29 	bl	8001868 <HAL_GetTick>
 8002e16:	4602      	mov	r2, r0
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	1ad3      	subs	r3, r2, r3
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	d901      	bls.n	8002e24 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002e20:	2303      	movs	r3, #3
 8002e22:	e06d      	b.n	8002f00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e24:	4b29      	ldr	r3, [pc, #164]	; (8002ecc <HAL_RCC_OscConfig+0x4c4>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d1f0      	bne.n	8002e12 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6a1b      	ldr	r3, [r3, #32]
 8002e34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e38:	d108      	bne.n	8002e4c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002e3a:	4b24      	ldr	r3, [pc, #144]	; (8002ecc <HAL_RCC_OscConfig+0x4c4>)
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	4921      	ldr	r1, [pc, #132]	; (8002ecc <HAL_RCC_OscConfig+0x4c4>)
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e4c:	4b1f      	ldr	r3, [pc, #124]	; (8002ecc <HAL_RCC_OscConfig+0x4c4>)
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6a19      	ldr	r1, [r3, #32]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e5c:	430b      	orrs	r3, r1
 8002e5e:	491b      	ldr	r1, [pc, #108]	; (8002ecc <HAL_RCC_OscConfig+0x4c4>)
 8002e60:	4313      	orrs	r3, r2
 8002e62:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e64:	4b1b      	ldr	r3, [pc, #108]	; (8002ed4 <HAL_RCC_OscConfig+0x4cc>)
 8002e66:	2201      	movs	r2, #1
 8002e68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e6a:	f7fe fcfd 	bl	8001868 <HAL_GetTick>
 8002e6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e70:	e008      	b.n	8002e84 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e72:	f7fe fcf9 	bl	8001868 <HAL_GetTick>
 8002e76:	4602      	mov	r2, r0
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	1ad3      	subs	r3, r2, r3
 8002e7c:	2b02      	cmp	r3, #2
 8002e7e:	d901      	bls.n	8002e84 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002e80:	2303      	movs	r3, #3
 8002e82:	e03d      	b.n	8002f00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e84:	4b11      	ldr	r3, [pc, #68]	; (8002ecc <HAL_RCC_OscConfig+0x4c4>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d0f0      	beq.n	8002e72 <HAL_RCC_OscConfig+0x46a>
 8002e90:	e035      	b.n	8002efe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e92:	4b10      	ldr	r3, [pc, #64]	; (8002ed4 <HAL_RCC_OscConfig+0x4cc>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e98:	f7fe fce6 	bl	8001868 <HAL_GetTick>
 8002e9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e9e:	e008      	b.n	8002eb2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ea0:	f7fe fce2 	bl	8001868 <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d901      	bls.n	8002eb2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e026      	b.n	8002f00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002eb2:	4b06      	ldr	r3, [pc, #24]	; (8002ecc <HAL_RCC_OscConfig+0x4c4>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d1f0      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x498>
 8002ebe:	e01e      	b.n	8002efe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	69db      	ldr	r3, [r3, #28]
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d107      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e019      	b.n	8002f00 <HAL_RCC_OscConfig+0x4f8>
 8002ecc:	40021000 	.word	0x40021000
 8002ed0:	40007000 	.word	0x40007000
 8002ed4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ed8:	4b0b      	ldr	r3, [pc, #44]	; (8002f08 <HAL_RCC_OscConfig+0x500>)
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6a1b      	ldr	r3, [r3, #32]
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d106      	bne.n	8002efa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d001      	beq.n	8002efe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e000      	b.n	8002f00 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002efe:	2300      	movs	r3, #0
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3718      	adds	r7, #24
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	40021000 	.word	0x40021000

08002f0c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b084      	sub	sp, #16
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
 8002f14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d101      	bne.n	8002f20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e0d0      	b.n	80030c2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f20:	4b6a      	ldr	r3, [pc, #424]	; (80030cc <HAL_RCC_ClockConfig+0x1c0>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 0307 	and.w	r3, r3, #7
 8002f28:	683a      	ldr	r2, [r7, #0]
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d910      	bls.n	8002f50 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f2e:	4b67      	ldr	r3, [pc, #412]	; (80030cc <HAL_RCC_ClockConfig+0x1c0>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f023 0207 	bic.w	r2, r3, #7
 8002f36:	4965      	ldr	r1, [pc, #404]	; (80030cc <HAL_RCC_ClockConfig+0x1c0>)
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f3e:	4b63      	ldr	r3, [pc, #396]	; (80030cc <HAL_RCC_ClockConfig+0x1c0>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 0307 	and.w	r3, r3, #7
 8002f46:	683a      	ldr	r2, [r7, #0]
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d001      	beq.n	8002f50 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e0b8      	b.n	80030c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 0302 	and.w	r3, r3, #2
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d020      	beq.n	8002f9e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 0304 	and.w	r3, r3, #4
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d005      	beq.n	8002f74 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f68:	4b59      	ldr	r3, [pc, #356]	; (80030d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	4a58      	ldr	r2, [pc, #352]	; (80030d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f6e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002f72:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 0308 	and.w	r3, r3, #8
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d005      	beq.n	8002f8c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f80:	4b53      	ldr	r3, [pc, #332]	; (80030d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	4a52      	ldr	r2, [pc, #328]	; (80030d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f86:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002f8a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f8c:	4b50      	ldr	r3, [pc, #320]	; (80030d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	494d      	ldr	r1, [pc, #308]	; (80030d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0301 	and.w	r3, r3, #1
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d040      	beq.n	800302c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d107      	bne.n	8002fc2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fb2:	4b47      	ldr	r3, [pc, #284]	; (80030d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d115      	bne.n	8002fea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e07f      	b.n	80030c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	2b02      	cmp	r3, #2
 8002fc8:	d107      	bne.n	8002fda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fca:	4b41      	ldr	r3, [pc, #260]	; (80030d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d109      	bne.n	8002fea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e073      	b.n	80030c2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fda:	4b3d      	ldr	r3, [pc, #244]	; (80030d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 0302 	and.w	r3, r3, #2
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d101      	bne.n	8002fea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e06b      	b.n	80030c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fea:	4b39      	ldr	r3, [pc, #228]	; (80030d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	f023 0203 	bic.w	r2, r3, #3
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	4936      	ldr	r1, [pc, #216]	; (80030d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ffc:	f7fe fc34 	bl	8001868 <HAL_GetTick>
 8003000:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003002:	e00a      	b.n	800301a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003004:	f7fe fc30 	bl	8001868 <HAL_GetTick>
 8003008:	4602      	mov	r2, r0
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003012:	4293      	cmp	r3, r2
 8003014:	d901      	bls.n	800301a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	e053      	b.n	80030c2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800301a:	4b2d      	ldr	r3, [pc, #180]	; (80030d0 <HAL_RCC_ClockConfig+0x1c4>)
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	f003 020c 	and.w	r2, r3, #12
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	429a      	cmp	r2, r3
 800302a:	d1eb      	bne.n	8003004 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800302c:	4b27      	ldr	r3, [pc, #156]	; (80030cc <HAL_RCC_ClockConfig+0x1c0>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 0307 	and.w	r3, r3, #7
 8003034:	683a      	ldr	r2, [r7, #0]
 8003036:	429a      	cmp	r2, r3
 8003038:	d210      	bcs.n	800305c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800303a:	4b24      	ldr	r3, [pc, #144]	; (80030cc <HAL_RCC_ClockConfig+0x1c0>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f023 0207 	bic.w	r2, r3, #7
 8003042:	4922      	ldr	r1, [pc, #136]	; (80030cc <HAL_RCC_ClockConfig+0x1c0>)
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	4313      	orrs	r3, r2
 8003048:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800304a:	4b20      	ldr	r3, [pc, #128]	; (80030cc <HAL_RCC_ClockConfig+0x1c0>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 0307 	and.w	r3, r3, #7
 8003052:	683a      	ldr	r2, [r7, #0]
 8003054:	429a      	cmp	r2, r3
 8003056:	d001      	beq.n	800305c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	e032      	b.n	80030c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 0304 	and.w	r3, r3, #4
 8003064:	2b00      	cmp	r3, #0
 8003066:	d008      	beq.n	800307a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003068:	4b19      	ldr	r3, [pc, #100]	; (80030d0 <HAL_RCC_ClockConfig+0x1c4>)
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	4916      	ldr	r1, [pc, #88]	; (80030d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003076:	4313      	orrs	r3, r2
 8003078:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 0308 	and.w	r3, r3, #8
 8003082:	2b00      	cmp	r3, #0
 8003084:	d009      	beq.n	800309a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003086:	4b12      	ldr	r3, [pc, #72]	; (80030d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	691b      	ldr	r3, [r3, #16]
 8003092:	00db      	lsls	r3, r3, #3
 8003094:	490e      	ldr	r1, [pc, #56]	; (80030d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003096:	4313      	orrs	r3, r2
 8003098:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800309a:	f000 f821 	bl	80030e0 <HAL_RCC_GetSysClockFreq>
 800309e:	4602      	mov	r2, r0
 80030a0:	4b0b      	ldr	r3, [pc, #44]	; (80030d0 <HAL_RCC_ClockConfig+0x1c4>)
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	091b      	lsrs	r3, r3, #4
 80030a6:	f003 030f 	and.w	r3, r3, #15
 80030aa:	490a      	ldr	r1, [pc, #40]	; (80030d4 <HAL_RCC_ClockConfig+0x1c8>)
 80030ac:	5ccb      	ldrb	r3, [r1, r3]
 80030ae:	fa22 f303 	lsr.w	r3, r2, r3
 80030b2:	4a09      	ldr	r2, [pc, #36]	; (80030d8 <HAL_RCC_ClockConfig+0x1cc>)
 80030b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80030b6:	4b09      	ldr	r3, [pc, #36]	; (80030dc <HAL_RCC_ClockConfig+0x1d0>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4618      	mov	r0, r3
 80030bc:	f7fe fb92 	bl	80017e4 <HAL_InitTick>

  return HAL_OK;
 80030c0:	2300      	movs	r3, #0
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3710      	adds	r7, #16
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	40022000 	.word	0x40022000
 80030d0:	40021000 	.word	0x40021000
 80030d4:	080054b8 	.word	0x080054b8
 80030d8:	2000001c 	.word	0x2000001c
 80030dc:	20000020 	.word	0x20000020

080030e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b087      	sub	sp, #28
 80030e4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80030e6:	2300      	movs	r3, #0
 80030e8:	60fb      	str	r3, [r7, #12]
 80030ea:	2300      	movs	r3, #0
 80030ec:	60bb      	str	r3, [r7, #8]
 80030ee:	2300      	movs	r3, #0
 80030f0:	617b      	str	r3, [r7, #20]
 80030f2:	2300      	movs	r3, #0
 80030f4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80030f6:	2300      	movs	r3, #0
 80030f8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80030fa:	4b1e      	ldr	r3, [pc, #120]	; (8003174 <HAL_RCC_GetSysClockFreq+0x94>)
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	f003 030c 	and.w	r3, r3, #12
 8003106:	2b04      	cmp	r3, #4
 8003108:	d002      	beq.n	8003110 <HAL_RCC_GetSysClockFreq+0x30>
 800310a:	2b08      	cmp	r3, #8
 800310c:	d003      	beq.n	8003116 <HAL_RCC_GetSysClockFreq+0x36>
 800310e:	e027      	b.n	8003160 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003110:	4b19      	ldr	r3, [pc, #100]	; (8003178 <HAL_RCC_GetSysClockFreq+0x98>)
 8003112:	613b      	str	r3, [r7, #16]
      break;
 8003114:	e027      	b.n	8003166 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	0c9b      	lsrs	r3, r3, #18
 800311a:	f003 030f 	and.w	r3, r3, #15
 800311e:	4a17      	ldr	r2, [pc, #92]	; (800317c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003120:	5cd3      	ldrb	r3, [r2, r3]
 8003122:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d010      	beq.n	8003150 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800312e:	4b11      	ldr	r3, [pc, #68]	; (8003174 <HAL_RCC_GetSysClockFreq+0x94>)
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	0c5b      	lsrs	r3, r3, #17
 8003134:	f003 0301 	and.w	r3, r3, #1
 8003138:	4a11      	ldr	r2, [pc, #68]	; (8003180 <HAL_RCC_GetSysClockFreq+0xa0>)
 800313a:	5cd3      	ldrb	r3, [r2, r3]
 800313c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	4a0d      	ldr	r2, [pc, #52]	; (8003178 <HAL_RCC_GetSysClockFreq+0x98>)
 8003142:	fb03 f202 	mul.w	r2, r3, r2
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	fbb2 f3f3 	udiv	r3, r2, r3
 800314c:	617b      	str	r3, [r7, #20]
 800314e:	e004      	b.n	800315a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	4a0c      	ldr	r2, [pc, #48]	; (8003184 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003154:	fb02 f303 	mul.w	r3, r2, r3
 8003158:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	613b      	str	r3, [r7, #16]
      break;
 800315e:	e002      	b.n	8003166 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003160:	4b05      	ldr	r3, [pc, #20]	; (8003178 <HAL_RCC_GetSysClockFreq+0x98>)
 8003162:	613b      	str	r3, [r7, #16]
      break;
 8003164:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003166:	693b      	ldr	r3, [r7, #16]
}
 8003168:	4618      	mov	r0, r3
 800316a:	371c      	adds	r7, #28
 800316c:	46bd      	mov	sp, r7
 800316e:	bc80      	pop	{r7}
 8003170:	4770      	bx	lr
 8003172:	bf00      	nop
 8003174:	40021000 	.word	0x40021000
 8003178:	007a1200 	.word	0x007a1200
 800317c:	080054d0 	.word	0x080054d0
 8003180:	080054e0 	.word	0x080054e0
 8003184:	003d0900 	.word	0x003d0900

08003188 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003188:	b480      	push	{r7}
 800318a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800318c:	4b02      	ldr	r3, [pc, #8]	; (8003198 <HAL_RCC_GetHCLKFreq+0x10>)
 800318e:	681b      	ldr	r3, [r3, #0]
}
 8003190:	4618      	mov	r0, r3
 8003192:	46bd      	mov	sp, r7
 8003194:	bc80      	pop	{r7}
 8003196:	4770      	bx	lr
 8003198:	2000001c 	.word	0x2000001c

0800319c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80031a0:	f7ff fff2 	bl	8003188 <HAL_RCC_GetHCLKFreq>
 80031a4:	4602      	mov	r2, r0
 80031a6:	4b05      	ldr	r3, [pc, #20]	; (80031bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	0a1b      	lsrs	r3, r3, #8
 80031ac:	f003 0307 	and.w	r3, r3, #7
 80031b0:	4903      	ldr	r1, [pc, #12]	; (80031c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031b2:	5ccb      	ldrb	r3, [r1, r3]
 80031b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	bd80      	pop	{r7, pc}
 80031bc:	40021000 	.word	0x40021000
 80031c0:	080054c8 	.word	0x080054c8

080031c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80031c8:	f7ff ffde 	bl	8003188 <HAL_RCC_GetHCLKFreq>
 80031cc:	4602      	mov	r2, r0
 80031ce:	4b05      	ldr	r3, [pc, #20]	; (80031e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	0adb      	lsrs	r3, r3, #11
 80031d4:	f003 0307 	and.w	r3, r3, #7
 80031d8:	4903      	ldr	r1, [pc, #12]	; (80031e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031da:	5ccb      	ldrb	r3, [r1, r3]
 80031dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	40021000 	.word	0x40021000
 80031e8:	080054c8 	.word	0x080054c8

080031ec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b085      	sub	sp, #20
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80031f4:	4b0a      	ldr	r3, [pc, #40]	; (8003220 <RCC_Delay+0x34>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a0a      	ldr	r2, [pc, #40]	; (8003224 <RCC_Delay+0x38>)
 80031fa:	fba2 2303 	umull	r2, r3, r2, r3
 80031fe:	0a5b      	lsrs	r3, r3, #9
 8003200:	687a      	ldr	r2, [r7, #4]
 8003202:	fb02 f303 	mul.w	r3, r2, r3
 8003206:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003208:	bf00      	nop
  }
  while (Delay --);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	1e5a      	subs	r2, r3, #1
 800320e:	60fa      	str	r2, [r7, #12]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d1f9      	bne.n	8003208 <RCC_Delay+0x1c>
}
 8003214:	bf00      	nop
 8003216:	bf00      	nop
 8003218:	3714      	adds	r7, #20
 800321a:	46bd      	mov	sp, r7
 800321c:	bc80      	pop	{r7}
 800321e:	4770      	bx	lr
 8003220:	2000001c 	.word	0x2000001c
 8003224:	10624dd3 	.word	0x10624dd3

08003228 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b086      	sub	sp, #24
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003230:	2300      	movs	r3, #0
 8003232:	613b      	str	r3, [r7, #16]
 8003234:	2300      	movs	r3, #0
 8003236:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 0301 	and.w	r3, r3, #1
 8003240:	2b00      	cmp	r3, #0
 8003242:	d07d      	beq.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003244:	2300      	movs	r3, #0
 8003246:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003248:	4b4f      	ldr	r3, [pc, #316]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800324a:	69db      	ldr	r3, [r3, #28]
 800324c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003250:	2b00      	cmp	r3, #0
 8003252:	d10d      	bne.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003254:	4b4c      	ldr	r3, [pc, #304]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003256:	69db      	ldr	r3, [r3, #28]
 8003258:	4a4b      	ldr	r2, [pc, #300]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800325a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800325e:	61d3      	str	r3, [r2, #28]
 8003260:	4b49      	ldr	r3, [pc, #292]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003262:	69db      	ldr	r3, [r3, #28]
 8003264:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003268:	60bb      	str	r3, [r7, #8]
 800326a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800326c:	2301      	movs	r3, #1
 800326e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003270:	4b46      	ldr	r3, [pc, #280]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003278:	2b00      	cmp	r3, #0
 800327a:	d118      	bne.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800327c:	4b43      	ldr	r3, [pc, #268]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a42      	ldr	r2, [pc, #264]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003282:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003286:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003288:	f7fe faee 	bl	8001868 <HAL_GetTick>
 800328c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800328e:	e008      	b.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003290:	f7fe faea 	bl	8001868 <HAL_GetTick>
 8003294:	4602      	mov	r2, r0
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	2b64      	cmp	r3, #100	; 0x64
 800329c:	d901      	bls.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e06d      	b.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032a2:	4b3a      	ldr	r3, [pc, #232]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d0f0      	beq.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80032ae:	4b36      	ldr	r3, [pc, #216]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032b0:	6a1b      	ldr	r3, [r3, #32]
 80032b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032b6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d02e      	beq.n	800331c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032c6:	68fa      	ldr	r2, [r7, #12]
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d027      	beq.n	800331c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80032cc:	4b2e      	ldr	r3, [pc, #184]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032ce:	6a1b      	ldr	r3, [r3, #32]
 80032d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032d4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80032d6:	4b2e      	ldr	r3, [pc, #184]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80032d8:	2201      	movs	r2, #1
 80032da:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80032dc:	4b2c      	ldr	r3, [pc, #176]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80032de:	2200      	movs	r2, #0
 80032e0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80032e2:	4a29      	ldr	r2, [pc, #164]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	f003 0301 	and.w	r3, r3, #1
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d014      	beq.n	800331c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032f2:	f7fe fab9 	bl	8001868 <HAL_GetTick>
 80032f6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032f8:	e00a      	b.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032fa:	f7fe fab5 	bl	8001868 <HAL_GetTick>
 80032fe:	4602      	mov	r2, r0
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	1ad3      	subs	r3, r2, r3
 8003304:	f241 3288 	movw	r2, #5000	; 0x1388
 8003308:	4293      	cmp	r3, r2
 800330a:	d901      	bls.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800330c:	2303      	movs	r3, #3
 800330e:	e036      	b.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003310:	4b1d      	ldr	r3, [pc, #116]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003312:	6a1b      	ldr	r3, [r3, #32]
 8003314:	f003 0302 	and.w	r3, r3, #2
 8003318:	2b00      	cmp	r3, #0
 800331a:	d0ee      	beq.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800331c:	4b1a      	ldr	r3, [pc, #104]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800331e:	6a1b      	ldr	r3, [r3, #32]
 8003320:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	4917      	ldr	r1, [pc, #92]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800332a:	4313      	orrs	r3, r2
 800332c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800332e:	7dfb      	ldrb	r3, [r7, #23]
 8003330:	2b01      	cmp	r3, #1
 8003332:	d105      	bne.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003334:	4b14      	ldr	r3, [pc, #80]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003336:	69db      	ldr	r3, [r3, #28]
 8003338:	4a13      	ldr	r2, [pc, #76]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800333a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800333e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 0302 	and.w	r3, r3, #2
 8003348:	2b00      	cmp	r3, #0
 800334a:	d008      	beq.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800334c:	4b0e      	ldr	r3, [pc, #56]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	490b      	ldr	r1, [pc, #44]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800335a:	4313      	orrs	r3, r2
 800335c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 0310 	and.w	r3, r3, #16
 8003366:	2b00      	cmp	r3, #0
 8003368:	d008      	beq.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800336a:	4b07      	ldr	r3, [pc, #28]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	68db      	ldr	r3, [r3, #12]
 8003376:	4904      	ldr	r1, [pc, #16]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003378:	4313      	orrs	r3, r2
 800337a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800337c:	2300      	movs	r3, #0
}
 800337e:	4618      	mov	r0, r3
 8003380:	3718      	adds	r7, #24
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	40021000 	.word	0x40021000
 800338c:	40007000 	.word	0x40007000
 8003390:	42420440 	.word	0x42420440

08003394 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b082      	sub	sp, #8
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d101      	bne.n	80033a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e042      	b.n	800342c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d106      	bne.n	80033c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f7fe f872 	bl	80014a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2224      	movs	r2, #36	; 0x24
 80033c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	68da      	ldr	r2, [r3, #12]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80033d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80033d8:	6878      	ldr	r0, [r7, #4]
 80033da:	f000 ff89 	bl	80042f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	691a      	ldr	r2, [r3, #16]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80033ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	695a      	ldr	r2, [r3, #20]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80033fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	68da      	ldr	r2, [r3, #12]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800340c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2220      	movs	r2, #32
 8003418:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2220      	movs	r2, #32
 8003420:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2200      	movs	r2, #0
 8003428:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800342a:	2300      	movs	r3, #0
}
 800342c:	4618      	mov	r0, r3
 800342e:	3708      	adds	r7, #8
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}

08003434 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b08a      	sub	sp, #40	; 0x28
 8003438:	af02      	add	r7, sp, #8
 800343a:	60f8      	str	r0, [r7, #12]
 800343c:	60b9      	str	r1, [r7, #8]
 800343e:	603b      	str	r3, [r7, #0]
 8003440:	4613      	mov	r3, r2
 8003442:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003444:	2300      	movs	r3, #0
 8003446:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800344e:	b2db      	uxtb	r3, r3
 8003450:	2b20      	cmp	r3, #32
 8003452:	d16d      	bne.n	8003530 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d002      	beq.n	8003460 <HAL_UART_Transmit+0x2c>
 800345a:	88fb      	ldrh	r3, [r7, #6]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d101      	bne.n	8003464 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e066      	b.n	8003532 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2200      	movs	r2, #0
 8003468:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2221      	movs	r2, #33	; 0x21
 800346e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003472:	f7fe f9f9 	bl	8001868 <HAL_GetTick>
 8003476:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	88fa      	ldrh	r2, [r7, #6]
 800347c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	88fa      	ldrh	r2, [r7, #6]
 8003482:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800348c:	d108      	bne.n	80034a0 <HAL_UART_Transmit+0x6c>
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	691b      	ldr	r3, [r3, #16]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d104      	bne.n	80034a0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003496:	2300      	movs	r3, #0
 8003498:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	61bb      	str	r3, [r7, #24]
 800349e:	e003      	b.n	80034a8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80034a4:	2300      	movs	r3, #0
 80034a6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80034a8:	e02a      	b.n	8003500 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	9300      	str	r3, [sp, #0]
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	2200      	movs	r2, #0
 80034b2:	2180      	movs	r1, #128	; 0x80
 80034b4:	68f8      	ldr	r0, [r7, #12]
 80034b6:	f000 fc51 	bl	8003d5c <UART_WaitOnFlagUntilTimeout>
 80034ba:	4603      	mov	r3, r0
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d001      	beq.n	80034c4 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80034c0:	2303      	movs	r3, #3
 80034c2:	e036      	b.n	8003532 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80034c4:	69fb      	ldr	r3, [r7, #28]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d10b      	bne.n	80034e2 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80034ca:	69bb      	ldr	r3, [r7, #24]
 80034cc:	881b      	ldrh	r3, [r3, #0]
 80034ce:	461a      	mov	r2, r3
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80034d8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80034da:	69bb      	ldr	r3, [r7, #24]
 80034dc:	3302      	adds	r3, #2
 80034de:	61bb      	str	r3, [r7, #24]
 80034e0:	e007      	b.n	80034f2 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80034e2:	69fb      	ldr	r3, [r7, #28]
 80034e4:	781a      	ldrb	r2, [r3, #0]
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80034ec:	69fb      	ldr	r3, [r7, #28]
 80034ee:	3301      	adds	r3, #1
 80034f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80034f6:	b29b      	uxth	r3, r3
 80034f8:	3b01      	subs	r3, #1
 80034fa:	b29a      	uxth	r2, r3
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003504:	b29b      	uxth	r3, r3
 8003506:	2b00      	cmp	r3, #0
 8003508:	d1cf      	bne.n	80034aa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	9300      	str	r3, [sp, #0]
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	2200      	movs	r2, #0
 8003512:	2140      	movs	r1, #64	; 0x40
 8003514:	68f8      	ldr	r0, [r7, #12]
 8003516:	f000 fc21 	bl	8003d5c <UART_WaitOnFlagUntilTimeout>
 800351a:	4603      	mov	r3, r0
 800351c:	2b00      	cmp	r3, #0
 800351e:	d001      	beq.n	8003524 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003520:	2303      	movs	r3, #3
 8003522:	e006      	b.n	8003532 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2220      	movs	r2, #32
 8003528:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800352c:	2300      	movs	r3, #0
 800352e:	e000      	b.n	8003532 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003530:	2302      	movs	r3, #2
  }
}
 8003532:	4618      	mov	r0, r3
 8003534:	3720      	adds	r7, #32
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}

0800353a <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800353a:	b580      	push	{r7, lr}
 800353c:	b08c      	sub	sp, #48	; 0x30
 800353e:	af00      	add	r7, sp, #0
 8003540:	60f8      	str	r0, [r7, #12]
 8003542:	60b9      	str	r1, [r7, #8]
 8003544:	4613      	mov	r3, r2
 8003546:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800354e:	b2db      	uxtb	r3, r3
 8003550:	2b20      	cmp	r3, #32
 8003552:	d14a      	bne.n	80035ea <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d002      	beq.n	8003560 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800355a:	88fb      	ldrh	r3, [r7, #6]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d101      	bne.n	8003564 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	e043      	b.n	80035ec <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2201      	movs	r2, #1
 8003568:	631a      	str	r2, [r3, #48]	; 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2200      	movs	r2, #0
 800356e:	635a      	str	r2, [r3, #52]	; 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8003570:	88fb      	ldrh	r3, [r7, #6]
 8003572:	461a      	mov	r2, r3
 8003574:	68b9      	ldr	r1, [r7, #8]
 8003576:	68f8      	ldr	r0, [r7, #12]
 8003578:	f000 fc5e 	bl	8003e38 <UART_Start_Receive_DMA>
 800357c:	4603      	mov	r3, r0
 800357e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8003582:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003586:	2b00      	cmp	r3, #0
 8003588:	d12c      	bne.n	80035e4 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800358e:	2b01      	cmp	r3, #1
 8003590:	d125      	bne.n	80035de <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003592:	2300      	movs	r3, #0
 8003594:	613b      	str	r3, [r7, #16]
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	613b      	str	r3, [r7, #16]
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	613b      	str	r3, [r7, #16]
 80035a6:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	330c      	adds	r3, #12
 80035ae:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035b0:	69bb      	ldr	r3, [r7, #24]
 80035b2:	e853 3f00 	ldrex	r3, [r3]
 80035b6:	617b      	str	r3, [r7, #20]
   return(result);
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	f043 0310 	orr.w	r3, r3, #16
 80035be:	62bb      	str	r3, [r7, #40]	; 0x28
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	330c      	adds	r3, #12
 80035c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80035c8:	627a      	str	r2, [r7, #36]	; 0x24
 80035ca:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035cc:	6a39      	ldr	r1, [r7, #32]
 80035ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035d0:	e841 2300 	strex	r3, r2, [r1]
 80035d4:	61fb      	str	r3, [r7, #28]
   return(result);
 80035d6:	69fb      	ldr	r3, [r7, #28]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d1e5      	bne.n	80035a8 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 80035dc:	e002      	b.n	80035e4 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 80035e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80035e8:	e000      	b.n	80035ec <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 80035ea:	2302      	movs	r3, #2
  }
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	3730      	adds	r7, #48	; 0x30
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}

080035f4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b0ba      	sub	sp, #232	; 0xe8
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	695b      	ldr	r3, [r3, #20]
 8003616:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800361a:	2300      	movs	r3, #0
 800361c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003620:	2300      	movs	r3, #0
 8003622:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003626:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800362a:	f003 030f 	and.w	r3, r3, #15
 800362e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003632:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003636:	2b00      	cmp	r3, #0
 8003638:	d10f      	bne.n	800365a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800363a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800363e:	f003 0320 	and.w	r3, r3, #32
 8003642:	2b00      	cmp	r3, #0
 8003644:	d009      	beq.n	800365a <HAL_UART_IRQHandler+0x66>
 8003646:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800364a:	f003 0320 	and.w	r3, r3, #32
 800364e:	2b00      	cmp	r3, #0
 8003650:	d003      	beq.n	800365a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f000 fd8e 	bl	8004174 <UART_Receive_IT>
      return;
 8003658:	e25b      	b.n	8003b12 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800365a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800365e:	2b00      	cmp	r3, #0
 8003660:	f000 80de 	beq.w	8003820 <HAL_UART_IRQHandler+0x22c>
 8003664:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003668:	f003 0301 	and.w	r3, r3, #1
 800366c:	2b00      	cmp	r3, #0
 800366e:	d106      	bne.n	800367e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003670:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003674:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003678:	2b00      	cmp	r3, #0
 800367a:	f000 80d1 	beq.w	8003820 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800367e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003682:	f003 0301 	and.w	r3, r3, #1
 8003686:	2b00      	cmp	r3, #0
 8003688:	d00b      	beq.n	80036a2 <HAL_UART_IRQHandler+0xae>
 800368a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800368e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003692:	2b00      	cmp	r3, #0
 8003694:	d005      	beq.n	80036a2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800369a:	f043 0201 	orr.w	r2, r3, #1
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80036a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036a6:	f003 0304 	and.w	r3, r3, #4
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d00b      	beq.n	80036c6 <HAL_UART_IRQHandler+0xd2>
 80036ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80036b2:	f003 0301 	and.w	r3, r3, #1
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d005      	beq.n	80036c6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036be:	f043 0202 	orr.w	r2, r3, #2
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80036c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036ca:	f003 0302 	and.w	r3, r3, #2
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d00b      	beq.n	80036ea <HAL_UART_IRQHandler+0xf6>
 80036d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80036d6:	f003 0301 	and.w	r3, r3, #1
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d005      	beq.n	80036ea <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036e2:	f043 0204 	orr.w	r2, r3, #4
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80036ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036ee:	f003 0308 	and.w	r3, r3, #8
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d011      	beq.n	800371a <HAL_UART_IRQHandler+0x126>
 80036f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036fa:	f003 0320 	and.w	r3, r3, #32
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d105      	bne.n	800370e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003702:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003706:	f003 0301 	and.w	r3, r3, #1
 800370a:	2b00      	cmp	r3, #0
 800370c:	d005      	beq.n	800371a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003712:	f043 0208 	orr.w	r2, r3, #8
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800371e:	2b00      	cmp	r3, #0
 8003720:	f000 81f2 	beq.w	8003b08 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003724:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003728:	f003 0320 	and.w	r3, r3, #32
 800372c:	2b00      	cmp	r3, #0
 800372e:	d008      	beq.n	8003742 <HAL_UART_IRQHandler+0x14e>
 8003730:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003734:	f003 0320 	and.w	r3, r3, #32
 8003738:	2b00      	cmp	r3, #0
 800373a:	d002      	beq.n	8003742 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f000 fd19 	bl	8004174 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	695b      	ldr	r3, [r3, #20]
 8003748:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800374c:	2b00      	cmp	r3, #0
 800374e:	bf14      	ite	ne
 8003750:	2301      	movne	r3, #1
 8003752:	2300      	moveq	r3, #0
 8003754:	b2db      	uxtb	r3, r3
 8003756:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800375e:	f003 0308 	and.w	r3, r3, #8
 8003762:	2b00      	cmp	r3, #0
 8003764:	d103      	bne.n	800376e <HAL_UART_IRQHandler+0x17a>
 8003766:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800376a:	2b00      	cmp	r3, #0
 800376c:	d04f      	beq.n	800380e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f000 fc23 	bl	8003fba <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	695b      	ldr	r3, [r3, #20]
 800377a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800377e:	2b00      	cmp	r3, #0
 8003780:	d041      	beq.n	8003806 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	3314      	adds	r3, #20
 8003788:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800378c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003790:	e853 3f00 	ldrex	r3, [r3]
 8003794:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003798:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800379c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	3314      	adds	r3, #20
 80037aa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80037ae:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80037b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037b6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80037ba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80037be:	e841 2300 	strex	r3, r2, [r1]
 80037c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80037c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d1d9      	bne.n	8003782 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d013      	beq.n	80037fe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037da:	4a7e      	ldr	r2, [pc, #504]	; (80039d4 <HAL_UART_IRQHandler+0x3e0>)
 80037dc:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037e2:	4618      	mov	r0, r3
 80037e4:	f7fe fc84 	bl	80020f0 <HAL_DMA_Abort_IT>
 80037e8:	4603      	mov	r3, r0
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d016      	beq.n	800381c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037f4:	687a      	ldr	r2, [r7, #4]
 80037f6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80037f8:	4610      	mov	r0, r2
 80037fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037fc:	e00e      	b.n	800381c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f000 f9a5 	bl	8003b4e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003804:	e00a      	b.n	800381c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f000 f9a1 	bl	8003b4e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800380c:	e006      	b.n	800381c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f000 f99d 	bl	8003b4e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800381a:	e175      	b.n	8003b08 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800381c:	bf00      	nop
    return;
 800381e:	e173      	b.n	8003b08 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003824:	2b01      	cmp	r3, #1
 8003826:	f040 814f 	bne.w	8003ac8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800382a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800382e:	f003 0310 	and.w	r3, r3, #16
 8003832:	2b00      	cmp	r3, #0
 8003834:	f000 8148 	beq.w	8003ac8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003838:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800383c:	f003 0310 	and.w	r3, r3, #16
 8003840:	2b00      	cmp	r3, #0
 8003842:	f000 8141 	beq.w	8003ac8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003846:	2300      	movs	r3, #0
 8003848:	60bb      	str	r3, [r7, #8]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	60bb      	str	r3, [r7, #8]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	60bb      	str	r3, [r7, #8]
 800385a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	695b      	ldr	r3, [r3, #20]
 8003862:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003866:	2b00      	cmp	r3, #0
 8003868:	f000 80b6 	beq.w	80039d8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003878:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800387c:	2b00      	cmp	r3, #0
 800387e:	f000 8145 	beq.w	8003b0c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003886:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800388a:	429a      	cmp	r2, r3
 800388c:	f080 813e 	bcs.w	8003b0c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003896:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800389c:	699b      	ldr	r3, [r3, #24]
 800389e:	2b20      	cmp	r3, #32
 80038a0:	f000 8088 	beq.w	80039b4 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	330c      	adds	r3, #12
 80038aa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038ae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80038b2:	e853 3f00 	ldrex	r3, [r3]
 80038b6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80038ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80038be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038c2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	330c      	adds	r3, #12
 80038cc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80038d0:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80038d4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038d8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80038dc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80038e0:	e841 2300 	strex	r3, r2, [r1]
 80038e4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80038e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d1d9      	bne.n	80038a4 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	3314      	adds	r3, #20
 80038f6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038fa:	e853 3f00 	ldrex	r3, [r3]
 80038fe:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003900:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003902:	f023 0301 	bic.w	r3, r3, #1
 8003906:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	3314      	adds	r3, #20
 8003910:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003914:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003918:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800391a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800391c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003920:	e841 2300 	strex	r3, r2, [r1]
 8003924:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003926:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003928:	2b00      	cmp	r3, #0
 800392a:	d1e1      	bne.n	80038f0 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	3314      	adds	r3, #20
 8003932:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003934:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003936:	e853 3f00 	ldrex	r3, [r3]
 800393a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800393c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800393e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003942:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	3314      	adds	r3, #20
 800394c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003950:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003952:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003954:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003956:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003958:	e841 2300 	strex	r3, r2, [r1]
 800395c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800395e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003960:	2b00      	cmp	r3, #0
 8003962:	d1e3      	bne.n	800392c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2220      	movs	r2, #32
 8003968:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2200      	movs	r2, #0
 8003970:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	330c      	adds	r3, #12
 8003978:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800397a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800397c:	e853 3f00 	ldrex	r3, [r3]
 8003980:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003982:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003984:	f023 0310 	bic.w	r3, r3, #16
 8003988:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	330c      	adds	r3, #12
 8003992:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003996:	65ba      	str	r2, [r7, #88]	; 0x58
 8003998:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800399a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800399c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800399e:	e841 2300 	strex	r3, r2, [r1]
 80039a2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80039a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d1e3      	bne.n	8003972 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039ae:	4618      	mov	r0, r3
 80039b0:	f7fe fb62 	bl	8002078 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2202      	movs	r2, #2
 80039b8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80039c2:	b29b      	uxth	r3, r3
 80039c4:	1ad3      	subs	r3, r2, r3
 80039c6:	b29b      	uxth	r3, r3
 80039c8:	4619      	mov	r1, r3
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f7fd faf8 	bl	8000fc0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80039d0:	e09c      	b.n	8003b0c <HAL_UART_IRQHandler+0x518>
 80039d2:	bf00      	nop
 80039d4:	0800407f 	.word	0x0800407f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	1ad3      	subs	r3, r2, r3
 80039e4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80039ec:	b29b      	uxth	r3, r3
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	f000 808e 	beq.w	8003b10 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80039f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	f000 8089 	beq.w	8003b10 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	330c      	adds	r3, #12
 8003a04:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a08:	e853 3f00 	ldrex	r3, [r3]
 8003a0c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003a0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a10:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003a14:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	330c      	adds	r3, #12
 8003a1e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003a22:	647a      	str	r2, [r7, #68]	; 0x44
 8003a24:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a26:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003a28:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003a2a:	e841 2300 	strex	r3, r2, [r1]
 8003a2e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003a30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d1e3      	bne.n	80039fe <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	3314      	adds	r3, #20
 8003a3c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a40:	e853 3f00 	ldrex	r3, [r3]
 8003a44:	623b      	str	r3, [r7, #32]
   return(result);
 8003a46:	6a3b      	ldr	r3, [r7, #32]
 8003a48:	f023 0301 	bic.w	r3, r3, #1
 8003a4c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	3314      	adds	r3, #20
 8003a56:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003a5a:	633a      	str	r2, [r7, #48]	; 0x30
 8003a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a5e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003a60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a62:	e841 2300 	strex	r3, r2, [r1]
 8003a66:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d1e3      	bne.n	8003a36 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2220      	movs	r2, #32
 8003a72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	330c      	adds	r3, #12
 8003a82:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	e853 3f00 	ldrex	r3, [r3]
 8003a8a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f023 0310 	bic.w	r3, r3, #16
 8003a92:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	330c      	adds	r3, #12
 8003a9c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003aa0:	61fa      	str	r2, [r7, #28]
 8003aa2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aa4:	69b9      	ldr	r1, [r7, #24]
 8003aa6:	69fa      	ldr	r2, [r7, #28]
 8003aa8:	e841 2300 	strex	r3, r2, [r1]
 8003aac:	617b      	str	r3, [r7, #20]
   return(result);
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d1e3      	bne.n	8003a7c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2202      	movs	r2, #2
 8003ab8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003aba:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003abe:	4619      	mov	r1, r3
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	f7fd fa7d 	bl	8000fc0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003ac6:	e023      	b.n	8003b10 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003ac8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003acc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d009      	beq.n	8003ae8 <HAL_UART_IRQHandler+0x4f4>
 8003ad4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ad8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d003      	beq.n	8003ae8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f000 fae0 	bl	80040a6 <UART_Transmit_IT>
    return;
 8003ae6:	e014      	b.n	8003b12 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003ae8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003aec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d00e      	beq.n	8003b12 <HAL_UART_IRQHandler+0x51e>
 8003af4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003af8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d008      	beq.n	8003b12 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	f000 fb1f 	bl	8004144 <UART_EndTransmit_IT>
    return;
 8003b06:	e004      	b.n	8003b12 <HAL_UART_IRQHandler+0x51e>
    return;
 8003b08:	bf00      	nop
 8003b0a:	e002      	b.n	8003b12 <HAL_UART_IRQHandler+0x51e>
      return;
 8003b0c:	bf00      	nop
 8003b0e:	e000      	b.n	8003b12 <HAL_UART_IRQHandler+0x51e>
      return;
 8003b10:	bf00      	nop
  }
}
 8003b12:	37e8      	adds	r7, #232	; 0xe8
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}

08003b18 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b083      	sub	sp, #12
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003b20:	bf00      	nop
 8003b22:	370c      	adds	r7, #12
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bc80      	pop	{r7}
 8003b28:	4770      	bx	lr

08003b2a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b2a:	b480      	push	{r7}
 8003b2c:	b083      	sub	sp, #12
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003b32:	bf00      	nop
 8003b34:	370c      	adds	r7, #12
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bc80      	pop	{r7}
 8003b3a:	4770      	bx	lr

08003b3c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b083      	sub	sp, #12
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003b44:	bf00      	nop
 8003b46:	370c      	adds	r7, #12
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bc80      	pop	{r7}
 8003b4c:	4770      	bx	lr

08003b4e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003b4e:	b480      	push	{r7}
 8003b50:	b083      	sub	sp, #12
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003b56:	bf00      	nop
 8003b58:	370c      	adds	r7, #12
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bc80      	pop	{r7}
 8003b5e:	4770      	bx	lr

08003b60 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b09c      	sub	sp, #112	; 0x70
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b6c:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 0320 	and.w	r3, r3, #32
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d172      	bne.n	8003c62 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8003b7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b7e:	2200      	movs	r2, #0
 8003b80:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	330c      	adds	r3, #12
 8003b88:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b8c:	e853 3f00 	ldrex	r3, [r3]
 8003b90:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003b92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b98:	66bb      	str	r3, [r7, #104]	; 0x68
 8003b9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	330c      	adds	r3, #12
 8003ba0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003ba2:	65ba      	str	r2, [r7, #88]	; 0x58
 8003ba4:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ba6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003ba8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003baa:	e841 2300 	strex	r3, r2, [r1]
 8003bae:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003bb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d1e5      	bne.n	8003b82 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	3314      	adds	r3, #20
 8003bbc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bc0:	e853 3f00 	ldrex	r3, [r3]
 8003bc4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003bc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bc8:	f023 0301 	bic.w	r3, r3, #1
 8003bcc:	667b      	str	r3, [r7, #100]	; 0x64
 8003bce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	3314      	adds	r3, #20
 8003bd4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003bd6:	647a      	str	r2, [r7, #68]	; 0x44
 8003bd8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bda:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003bdc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003bde:	e841 2300 	strex	r3, r2, [r1]
 8003be2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003be4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d1e5      	bne.n	8003bb6 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	3314      	adds	r3, #20
 8003bf0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf4:	e853 3f00 	ldrex	r3, [r3]
 8003bf8:	623b      	str	r3, [r7, #32]
   return(result);
 8003bfa:	6a3b      	ldr	r3, [r7, #32]
 8003bfc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c00:	663b      	str	r3, [r7, #96]	; 0x60
 8003c02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	3314      	adds	r3, #20
 8003c08:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003c0a:	633a      	str	r2, [r7, #48]	; 0x30
 8003c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c0e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003c10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c12:	e841 2300 	strex	r3, r2, [r1]
 8003c16:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d1e5      	bne.n	8003bea <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003c1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c20:	2220      	movs	r2, #32
 8003c22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d119      	bne.n	8003c62 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	330c      	adds	r3, #12
 8003c34:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	e853 3f00 	ldrex	r3, [r3]
 8003c3c:	60fb      	str	r3, [r7, #12]
   return(result);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	f023 0310 	bic.w	r3, r3, #16
 8003c44:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	330c      	adds	r3, #12
 8003c4c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003c4e:	61fa      	str	r2, [r7, #28]
 8003c50:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c52:	69b9      	ldr	r1, [r7, #24]
 8003c54:	69fa      	ldr	r2, [r7, #28]
 8003c56:	e841 2300 	strex	r3, r2, [r1]
 8003c5a:	617b      	str	r3, [r7, #20]
   return(result);
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d1e5      	bne.n	8003c2e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c64:	2200      	movs	r2, #0
 8003c66:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d106      	bne.n	8003c7e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003c70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c72:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003c74:	4619      	mov	r1, r3
 8003c76:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003c78:	f7fd f9a2 	bl	8000fc0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003c7c:	e002      	b.n	8003c84 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8003c7e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003c80:	f7ff ff53 	bl	8003b2a <HAL_UART_RxCpltCallback>
}
 8003c84:	bf00      	nop
 8003c86:	3770      	adds	r7, #112	; 0x70
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}

08003c8c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b084      	sub	sp, #16
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c98:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d108      	bne.n	8003cba <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003cac:	085b      	lsrs	r3, r3, #1
 8003cae:	b29b      	uxth	r3, r3
 8003cb0:	4619      	mov	r1, r3
 8003cb2:	68f8      	ldr	r0, [r7, #12]
 8003cb4:	f7fd f984 	bl	8000fc0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003cb8:	e002      	b.n	8003cc0 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8003cba:	68f8      	ldr	r0, [r7, #12]
 8003cbc:	f7ff ff3e 	bl	8003b3c <HAL_UART_RxHalfCpltCallback>
}
 8003cc0:	bf00      	nop
 8003cc2:	3710      	adds	r7, #16
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}

08003cc8 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b084      	sub	sp, #16
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd8:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	695b      	ldr	r3, [r3, #20]
 8003ce0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	bf14      	ite	ne
 8003ce8:	2301      	movne	r3, #1
 8003cea:	2300      	moveq	r3, #0
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	2b21      	cmp	r3, #33	; 0x21
 8003cfa:	d108      	bne.n	8003d0e <UART_DMAError+0x46>
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d005      	beq.n	8003d0e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	2200      	movs	r2, #0
 8003d06:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003d08:	68b8      	ldr	r0, [r7, #8]
 8003d0a:	f000 f92f 	bl	8003f6c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	695b      	ldr	r3, [r3, #20]
 8003d14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	bf14      	ite	ne
 8003d1c:	2301      	movne	r3, #1
 8003d1e:	2300      	moveq	r3, #0
 8003d20:	b2db      	uxtb	r3, r3
 8003d22:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003d2a:	b2db      	uxtb	r3, r3
 8003d2c:	2b22      	cmp	r3, #34	; 0x22
 8003d2e:	d108      	bne.n	8003d42 <UART_DMAError+0x7a>
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d005      	beq.n	8003d42 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003d3c:	68b8      	ldr	r0, [r7, #8]
 8003d3e:	f000 f93c 	bl	8003fba <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d46:	f043 0210 	orr.w	r2, r3, #16
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003d4e:	68b8      	ldr	r0, [r7, #8]
 8003d50:	f7ff fefd 	bl	8003b4e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d54:	bf00      	nop
 8003d56:	3710      	adds	r7, #16
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}

08003d5c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b090      	sub	sp, #64	; 0x40
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	60f8      	str	r0, [r7, #12]
 8003d64:	60b9      	str	r1, [r7, #8]
 8003d66:	603b      	str	r3, [r7, #0]
 8003d68:	4613      	mov	r3, r2
 8003d6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d6c:	e050      	b.n	8003e10 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d74:	d04c      	beq.n	8003e10 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003d76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d007      	beq.n	8003d8c <UART_WaitOnFlagUntilTimeout+0x30>
 8003d7c:	f7fd fd74 	bl	8001868 <HAL_GetTick>
 8003d80:	4602      	mov	r2, r0
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	1ad3      	subs	r3, r2, r3
 8003d86:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d241      	bcs.n	8003e10 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	330c      	adds	r3, #12
 8003d92:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d96:	e853 3f00 	ldrex	r3, [r3]
 8003d9a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d9e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003da2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	330c      	adds	r3, #12
 8003daa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003dac:	637a      	str	r2, [r7, #52]	; 0x34
 8003dae:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003db0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003db2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003db4:	e841 2300 	strex	r3, r2, [r1]
 8003db8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d1e5      	bne.n	8003d8c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	3314      	adds	r3, #20
 8003dc6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	e853 3f00 	ldrex	r3, [r3]
 8003dce:	613b      	str	r3, [r7, #16]
   return(result);
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	f023 0301 	bic.w	r3, r3, #1
 8003dd6:	63bb      	str	r3, [r7, #56]	; 0x38
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	3314      	adds	r3, #20
 8003dde:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003de0:	623a      	str	r2, [r7, #32]
 8003de2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003de4:	69f9      	ldr	r1, [r7, #28]
 8003de6:	6a3a      	ldr	r2, [r7, #32]
 8003de8:	e841 2300 	strex	r3, r2, [r1]
 8003dec:	61bb      	str	r3, [r7, #24]
   return(result);
 8003dee:	69bb      	ldr	r3, [r7, #24]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d1e5      	bne.n	8003dc0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2220      	movs	r2, #32
 8003df8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2220      	movs	r2, #32
 8003e00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2200      	movs	r2, #0
 8003e08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003e0c:	2303      	movs	r3, #3
 8003e0e:	e00f      	b.n	8003e30 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	4013      	ands	r3, r2
 8003e1a:	68ba      	ldr	r2, [r7, #8]
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	bf0c      	ite	eq
 8003e20:	2301      	moveq	r3, #1
 8003e22:	2300      	movne	r3, #0
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	461a      	mov	r2, r3
 8003e28:	79fb      	ldrb	r3, [r7, #7]
 8003e2a:	429a      	cmp	r2, r3
 8003e2c:	d09f      	beq.n	8003d6e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003e2e:	2300      	movs	r3, #0
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	3740      	adds	r7, #64	; 0x40
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}

08003e38 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b098      	sub	sp, #96	; 0x60
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	60f8      	str	r0, [r7, #12]
 8003e40:	60b9      	str	r1, [r7, #8]
 8003e42:	4613      	mov	r3, r2
 8003e44:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8003e46:	68ba      	ldr	r2, [r7, #8]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	88fa      	ldrh	r2, [r7, #6]
 8003e50:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2200      	movs	r2, #0
 8003e56:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2222      	movs	r2, #34	; 0x22
 8003e5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e64:	4a3e      	ldr	r2, [pc, #248]	; (8003f60 <UART_Start_Receive_DMA+0x128>)
 8003e66:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e6c:	4a3d      	ldr	r2, [pc, #244]	; (8003f64 <UART_Start_Receive_DMA+0x12c>)
 8003e6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e74:	4a3c      	ldr	r2, [pc, #240]	; (8003f68 <UART_Start_Receive_DMA+0x130>)
 8003e76:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8003e80:	f107 0308 	add.w	r3, r7, #8
 8003e84:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	3304      	adds	r3, #4
 8003e90:	4619      	mov	r1, r3
 8003e92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	88fb      	ldrh	r3, [r7, #6]
 8003e98:	f7fe f88e 	bl	8001fb8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	613b      	str	r3, [r7, #16]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	613b      	str	r3, [r7, #16]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	613b      	str	r3, [r7, #16]
 8003eb0:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	691b      	ldr	r3, [r3, #16]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d019      	beq.n	8003eee <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	330c      	adds	r3, #12
 8003ec0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ec2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ec4:	e853 3f00 	ldrex	r3, [r3]
 8003ec8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003eca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ecc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ed0:	65bb      	str	r3, [r7, #88]	; 0x58
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	330c      	adds	r3, #12
 8003ed8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003eda:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003edc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ede:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003ee0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003ee2:	e841 2300 	strex	r3, r2, [r1]
 8003ee6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8003ee8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d1e5      	bne.n	8003eba <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	3314      	adds	r3, #20
 8003ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ef8:	e853 3f00 	ldrex	r3, [r3]
 8003efc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f00:	f043 0301 	orr.w	r3, r3, #1
 8003f04:	657b      	str	r3, [r7, #84]	; 0x54
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	3314      	adds	r3, #20
 8003f0c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003f0e:	63ba      	str	r2, [r7, #56]	; 0x38
 8003f10:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f12:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003f14:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003f16:	e841 2300 	strex	r3, r2, [r1]
 8003f1a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d1e5      	bne.n	8003eee <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	3314      	adds	r3, #20
 8003f28:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f2a:	69bb      	ldr	r3, [r7, #24]
 8003f2c:	e853 3f00 	ldrex	r3, [r3]
 8003f30:	617b      	str	r3, [r7, #20]
   return(result);
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f38:	653b      	str	r3, [r7, #80]	; 0x50
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	3314      	adds	r3, #20
 8003f40:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003f42:	627a      	str	r2, [r7, #36]	; 0x24
 8003f44:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f46:	6a39      	ldr	r1, [r7, #32]
 8003f48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f4a:	e841 2300 	strex	r3, r2, [r1]
 8003f4e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f50:	69fb      	ldr	r3, [r7, #28]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d1e5      	bne.n	8003f22 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8003f56:	2300      	movs	r3, #0
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	3760      	adds	r7, #96	; 0x60
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}
 8003f60:	08003b61 	.word	0x08003b61
 8003f64:	08003c8d 	.word	0x08003c8d
 8003f68:	08003cc9 	.word	0x08003cc9

08003f6c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b089      	sub	sp, #36	; 0x24
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	330c      	adds	r3, #12
 8003f7a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	e853 3f00 	ldrex	r3, [r3]
 8003f82:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003f8a:	61fb      	str	r3, [r7, #28]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	330c      	adds	r3, #12
 8003f92:	69fa      	ldr	r2, [r7, #28]
 8003f94:	61ba      	str	r2, [r7, #24]
 8003f96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f98:	6979      	ldr	r1, [r7, #20]
 8003f9a:	69ba      	ldr	r2, [r7, #24]
 8003f9c:	e841 2300 	strex	r3, r2, [r1]
 8003fa0:	613b      	str	r3, [r7, #16]
   return(result);
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d1e5      	bne.n	8003f74 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2220      	movs	r2, #32
 8003fac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8003fb0:	bf00      	nop
 8003fb2:	3724      	adds	r7, #36	; 0x24
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bc80      	pop	{r7}
 8003fb8:	4770      	bx	lr

08003fba <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003fba:	b480      	push	{r7}
 8003fbc:	b095      	sub	sp, #84	; 0x54
 8003fbe:	af00      	add	r7, sp, #0
 8003fc0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	330c      	adds	r3, #12
 8003fc8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fcc:	e853 3f00 	ldrex	r3, [r3]
 8003fd0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fd4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003fd8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	330c      	adds	r3, #12
 8003fe0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003fe2:	643a      	str	r2, [r7, #64]	; 0x40
 8003fe4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fe6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003fe8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003fea:	e841 2300 	strex	r3, r2, [r1]
 8003fee:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d1e5      	bne.n	8003fc2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	3314      	adds	r3, #20
 8003ffc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ffe:	6a3b      	ldr	r3, [r7, #32]
 8004000:	e853 3f00 	ldrex	r3, [r3]
 8004004:	61fb      	str	r3, [r7, #28]
   return(result);
 8004006:	69fb      	ldr	r3, [r7, #28]
 8004008:	f023 0301 	bic.w	r3, r3, #1
 800400c:	64bb      	str	r3, [r7, #72]	; 0x48
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	3314      	adds	r3, #20
 8004014:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004016:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004018:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800401a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800401c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800401e:	e841 2300 	strex	r3, r2, [r1]
 8004022:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004026:	2b00      	cmp	r3, #0
 8004028:	d1e5      	bne.n	8003ff6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800402e:	2b01      	cmp	r3, #1
 8004030:	d119      	bne.n	8004066 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	330c      	adds	r3, #12
 8004038:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	e853 3f00 	ldrex	r3, [r3]
 8004040:	60bb      	str	r3, [r7, #8]
   return(result);
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	f023 0310 	bic.w	r3, r3, #16
 8004048:	647b      	str	r3, [r7, #68]	; 0x44
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	330c      	adds	r3, #12
 8004050:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004052:	61ba      	str	r2, [r7, #24]
 8004054:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004056:	6979      	ldr	r1, [r7, #20]
 8004058:	69ba      	ldr	r2, [r7, #24]
 800405a:	e841 2300 	strex	r3, r2, [r1]
 800405e:	613b      	str	r3, [r7, #16]
   return(result);
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d1e5      	bne.n	8004032 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2220      	movs	r2, #32
 800406a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2200      	movs	r2, #0
 8004072:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004074:	bf00      	nop
 8004076:	3754      	adds	r7, #84	; 0x54
 8004078:	46bd      	mov	sp, r7
 800407a:	bc80      	pop	{r7}
 800407c:	4770      	bx	lr

0800407e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800407e:	b580      	push	{r7, lr}
 8004080:	b084      	sub	sp, #16
 8004082:	af00      	add	r7, sp, #0
 8004084:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2200      	movs	r2, #0
 8004090:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2200      	movs	r2, #0
 8004096:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004098:	68f8      	ldr	r0, [r7, #12]
 800409a:	f7ff fd58 	bl	8003b4e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800409e:	bf00      	nop
 80040a0:	3710      	adds	r7, #16
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}

080040a6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80040a6:	b480      	push	{r7}
 80040a8:	b085      	sub	sp, #20
 80040aa:	af00      	add	r7, sp, #0
 80040ac:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	2b21      	cmp	r3, #33	; 0x21
 80040b8:	d13e      	bne.n	8004138 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040c2:	d114      	bne.n	80040ee <UART_Transmit_IT+0x48>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	691b      	ldr	r3, [r3, #16]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d110      	bne.n	80040ee <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6a1b      	ldr	r3, [r3, #32]
 80040d0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	881b      	ldrh	r3, [r3, #0]
 80040d6:	461a      	mov	r2, r3
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040e0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6a1b      	ldr	r3, [r3, #32]
 80040e6:	1c9a      	adds	r2, r3, #2
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	621a      	str	r2, [r3, #32]
 80040ec:	e008      	b.n	8004100 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6a1b      	ldr	r3, [r3, #32]
 80040f2:	1c59      	adds	r1, r3, #1
 80040f4:	687a      	ldr	r2, [r7, #4]
 80040f6:	6211      	str	r1, [r2, #32]
 80040f8:	781a      	ldrb	r2, [r3, #0]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004104:	b29b      	uxth	r3, r3
 8004106:	3b01      	subs	r3, #1
 8004108:	b29b      	uxth	r3, r3
 800410a:	687a      	ldr	r2, [r7, #4]
 800410c:	4619      	mov	r1, r3
 800410e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004110:	2b00      	cmp	r3, #0
 8004112:	d10f      	bne.n	8004134 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	68da      	ldr	r2, [r3, #12]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004122:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	68da      	ldr	r2, [r3, #12]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004132:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004134:	2300      	movs	r3, #0
 8004136:	e000      	b.n	800413a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004138:	2302      	movs	r3, #2
  }
}
 800413a:	4618      	mov	r0, r3
 800413c:	3714      	adds	r7, #20
 800413e:	46bd      	mov	sp, r7
 8004140:	bc80      	pop	{r7}
 8004142:	4770      	bx	lr

08004144 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b082      	sub	sp, #8
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	68da      	ldr	r2, [r3, #12]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800415a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2220      	movs	r2, #32
 8004160:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	f7ff fcd7 	bl	8003b18 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800416a:	2300      	movs	r3, #0
}
 800416c:	4618      	mov	r0, r3
 800416e:	3708      	adds	r7, #8
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}

08004174 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b08c      	sub	sp, #48	; 0x30
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004182:	b2db      	uxtb	r3, r3
 8004184:	2b22      	cmp	r3, #34	; 0x22
 8004186:	f040 80ae 	bne.w	80042e6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004192:	d117      	bne.n	80041c4 <UART_Receive_IT+0x50>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	691b      	ldr	r3, [r3, #16]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d113      	bne.n	80041c4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800419c:	2300      	movs	r3, #0
 800419e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041a4:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	b29b      	uxth	r3, r3
 80041ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041b2:	b29a      	uxth	r2, r3
 80041b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041b6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041bc:	1c9a      	adds	r2, r3, #2
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	629a      	str	r2, [r3, #40]	; 0x28
 80041c2:	e026      	b.n	8004212 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041c8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80041ca:	2300      	movs	r3, #0
 80041cc:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041d6:	d007      	beq.n	80041e8 <UART_Receive_IT+0x74>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d10a      	bne.n	80041f6 <UART_Receive_IT+0x82>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	691b      	ldr	r3, [r3, #16]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d106      	bne.n	80041f6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	b2da      	uxtb	r2, r3
 80041f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041f2:	701a      	strb	r2, [r3, #0]
 80041f4:	e008      	b.n	8004208 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	b2db      	uxtb	r3, r3
 80041fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004202:	b2da      	uxtb	r2, r3
 8004204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004206:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800420c:	1c5a      	adds	r2, r3, #1
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004216:	b29b      	uxth	r3, r3
 8004218:	3b01      	subs	r3, #1
 800421a:	b29b      	uxth	r3, r3
 800421c:	687a      	ldr	r2, [r7, #4]
 800421e:	4619      	mov	r1, r3
 8004220:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004222:	2b00      	cmp	r3, #0
 8004224:	d15d      	bne.n	80042e2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	68da      	ldr	r2, [r3, #12]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f022 0220 	bic.w	r2, r2, #32
 8004234:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	68da      	ldr	r2, [r3, #12]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004244:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	695a      	ldr	r2, [r3, #20]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f022 0201 	bic.w	r2, r2, #1
 8004254:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2220      	movs	r2, #32
 800425a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2200      	movs	r2, #0
 8004262:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004268:	2b01      	cmp	r3, #1
 800426a:	d135      	bne.n	80042d8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2200      	movs	r2, #0
 8004270:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	330c      	adds	r3, #12
 8004278:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	e853 3f00 	ldrex	r3, [r3]
 8004280:	613b      	str	r3, [r7, #16]
   return(result);
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	f023 0310 	bic.w	r3, r3, #16
 8004288:	627b      	str	r3, [r7, #36]	; 0x24
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	330c      	adds	r3, #12
 8004290:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004292:	623a      	str	r2, [r7, #32]
 8004294:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004296:	69f9      	ldr	r1, [r7, #28]
 8004298:	6a3a      	ldr	r2, [r7, #32]
 800429a:	e841 2300 	strex	r3, r2, [r1]
 800429e:	61bb      	str	r3, [r7, #24]
   return(result);
 80042a0:	69bb      	ldr	r3, [r7, #24]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d1e5      	bne.n	8004272 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f003 0310 	and.w	r3, r3, #16
 80042b0:	2b10      	cmp	r3, #16
 80042b2:	d10a      	bne.n	80042ca <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80042b4:	2300      	movs	r3, #0
 80042b6:	60fb      	str	r3, [r7, #12]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	60fb      	str	r3, [r7, #12]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	60fb      	str	r3, [r7, #12]
 80042c8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80042ce:	4619      	mov	r1, r3
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	f7fc fe75 	bl	8000fc0 <HAL_UARTEx_RxEventCallback>
 80042d6:	e002      	b.n	80042de <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80042d8:	6878      	ldr	r0, [r7, #4]
 80042da:	f7ff fc26 	bl	8003b2a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80042de:	2300      	movs	r3, #0
 80042e0:	e002      	b.n	80042e8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80042e2:	2300      	movs	r3, #0
 80042e4:	e000      	b.n	80042e8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80042e6:	2302      	movs	r3, #2
  }
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	3730      	adds	r7, #48	; 0x30
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}

080042f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b084      	sub	sp, #16
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	691b      	ldr	r3, [r3, #16]
 80042fe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	68da      	ldr	r2, [r3, #12]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	430a      	orrs	r2, r1
 800430c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	689a      	ldr	r2, [r3, #8]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	691b      	ldr	r3, [r3, #16]
 8004316:	431a      	orrs	r2, r3
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	695b      	ldr	r3, [r3, #20]
 800431c:	4313      	orrs	r3, r2
 800431e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	68db      	ldr	r3, [r3, #12]
 8004326:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800432a:	f023 030c 	bic.w	r3, r3, #12
 800432e:	687a      	ldr	r2, [r7, #4]
 8004330:	6812      	ldr	r2, [r2, #0]
 8004332:	68b9      	ldr	r1, [r7, #8]
 8004334:	430b      	orrs	r3, r1
 8004336:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	695b      	ldr	r3, [r3, #20]
 800433e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	699a      	ldr	r2, [r3, #24]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	430a      	orrs	r2, r1
 800434c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a2c      	ldr	r2, [pc, #176]	; (8004404 <UART_SetConfig+0x114>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d103      	bne.n	8004360 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004358:	f7fe ff34 	bl	80031c4 <HAL_RCC_GetPCLK2Freq>
 800435c:	60f8      	str	r0, [r7, #12]
 800435e:	e002      	b.n	8004366 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004360:	f7fe ff1c 	bl	800319c <HAL_RCC_GetPCLK1Freq>
 8004364:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004366:	68fa      	ldr	r2, [r7, #12]
 8004368:	4613      	mov	r3, r2
 800436a:	009b      	lsls	r3, r3, #2
 800436c:	4413      	add	r3, r2
 800436e:	009a      	lsls	r2, r3, #2
 8004370:	441a      	add	r2, r3
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	009b      	lsls	r3, r3, #2
 8004378:	fbb2 f3f3 	udiv	r3, r2, r3
 800437c:	4a22      	ldr	r2, [pc, #136]	; (8004408 <UART_SetConfig+0x118>)
 800437e:	fba2 2303 	umull	r2, r3, r2, r3
 8004382:	095b      	lsrs	r3, r3, #5
 8004384:	0119      	lsls	r1, r3, #4
 8004386:	68fa      	ldr	r2, [r7, #12]
 8004388:	4613      	mov	r3, r2
 800438a:	009b      	lsls	r3, r3, #2
 800438c:	4413      	add	r3, r2
 800438e:	009a      	lsls	r2, r3, #2
 8004390:	441a      	add	r2, r3
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	009b      	lsls	r3, r3, #2
 8004398:	fbb2 f2f3 	udiv	r2, r2, r3
 800439c:	4b1a      	ldr	r3, [pc, #104]	; (8004408 <UART_SetConfig+0x118>)
 800439e:	fba3 0302 	umull	r0, r3, r3, r2
 80043a2:	095b      	lsrs	r3, r3, #5
 80043a4:	2064      	movs	r0, #100	; 0x64
 80043a6:	fb00 f303 	mul.w	r3, r0, r3
 80043aa:	1ad3      	subs	r3, r2, r3
 80043ac:	011b      	lsls	r3, r3, #4
 80043ae:	3332      	adds	r3, #50	; 0x32
 80043b0:	4a15      	ldr	r2, [pc, #84]	; (8004408 <UART_SetConfig+0x118>)
 80043b2:	fba2 2303 	umull	r2, r3, r2, r3
 80043b6:	095b      	lsrs	r3, r3, #5
 80043b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043bc:	4419      	add	r1, r3
 80043be:	68fa      	ldr	r2, [r7, #12]
 80043c0:	4613      	mov	r3, r2
 80043c2:	009b      	lsls	r3, r3, #2
 80043c4:	4413      	add	r3, r2
 80043c6:	009a      	lsls	r2, r3, #2
 80043c8:	441a      	add	r2, r3
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	009b      	lsls	r3, r3, #2
 80043d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80043d4:	4b0c      	ldr	r3, [pc, #48]	; (8004408 <UART_SetConfig+0x118>)
 80043d6:	fba3 0302 	umull	r0, r3, r3, r2
 80043da:	095b      	lsrs	r3, r3, #5
 80043dc:	2064      	movs	r0, #100	; 0x64
 80043de:	fb00 f303 	mul.w	r3, r0, r3
 80043e2:	1ad3      	subs	r3, r2, r3
 80043e4:	011b      	lsls	r3, r3, #4
 80043e6:	3332      	adds	r3, #50	; 0x32
 80043e8:	4a07      	ldr	r2, [pc, #28]	; (8004408 <UART_SetConfig+0x118>)
 80043ea:	fba2 2303 	umull	r2, r3, r2, r3
 80043ee:	095b      	lsrs	r3, r3, #5
 80043f0:	f003 020f 	and.w	r2, r3, #15
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	440a      	add	r2, r1
 80043fa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80043fc:	bf00      	nop
 80043fe:	3710      	adds	r7, #16
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}
 8004404:	40013800 	.word	0x40013800
 8004408:	51eb851f 	.word	0x51eb851f

0800440c <atoi>:
 800440c:	220a      	movs	r2, #10
 800440e:	2100      	movs	r1, #0
 8004410:	f000 b9e0 	b.w	80047d4 <strtol>

08004414 <__errno>:
 8004414:	4b01      	ldr	r3, [pc, #4]	; (800441c <__errno+0x8>)
 8004416:	6818      	ldr	r0, [r3, #0]
 8004418:	4770      	bx	lr
 800441a:	bf00      	nop
 800441c:	20000028 	.word	0x20000028

08004420 <__libc_init_array>:
 8004420:	b570      	push	{r4, r5, r6, lr}
 8004422:	2600      	movs	r6, #0
 8004424:	4d0c      	ldr	r5, [pc, #48]	; (8004458 <__libc_init_array+0x38>)
 8004426:	4c0d      	ldr	r4, [pc, #52]	; (800445c <__libc_init_array+0x3c>)
 8004428:	1b64      	subs	r4, r4, r5
 800442a:	10a4      	asrs	r4, r4, #2
 800442c:	42a6      	cmp	r6, r4
 800442e:	d109      	bne.n	8004444 <__libc_init_array+0x24>
 8004430:	f000 fd3a 	bl	8004ea8 <_init>
 8004434:	2600      	movs	r6, #0
 8004436:	4d0a      	ldr	r5, [pc, #40]	; (8004460 <__libc_init_array+0x40>)
 8004438:	4c0a      	ldr	r4, [pc, #40]	; (8004464 <__libc_init_array+0x44>)
 800443a:	1b64      	subs	r4, r4, r5
 800443c:	10a4      	asrs	r4, r4, #2
 800443e:	42a6      	cmp	r6, r4
 8004440:	d105      	bne.n	800444e <__libc_init_array+0x2e>
 8004442:	bd70      	pop	{r4, r5, r6, pc}
 8004444:	f855 3b04 	ldr.w	r3, [r5], #4
 8004448:	4798      	blx	r3
 800444a:	3601      	adds	r6, #1
 800444c:	e7ee      	b.n	800442c <__libc_init_array+0xc>
 800444e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004452:	4798      	blx	r3
 8004454:	3601      	adds	r6, #1
 8004456:	e7f2      	b.n	800443e <__libc_init_array+0x1e>
 8004458:	08005678 	.word	0x08005678
 800445c:	08005678 	.word	0x08005678
 8004460:	08005678 	.word	0x08005678
 8004464:	0800567c 	.word	0x0800567c

08004468 <malloc>:
 8004468:	4b02      	ldr	r3, [pc, #8]	; (8004474 <malloc+0xc>)
 800446a:	4601      	mov	r1, r0
 800446c:	6818      	ldr	r0, [r3, #0]
 800446e:	f000 b891 	b.w	8004594 <_malloc_r>
 8004472:	bf00      	nop
 8004474:	20000028 	.word	0x20000028

08004478 <memcmp>:
 8004478:	b510      	push	{r4, lr}
 800447a:	3901      	subs	r1, #1
 800447c:	4402      	add	r2, r0
 800447e:	4290      	cmp	r0, r2
 8004480:	d101      	bne.n	8004486 <memcmp+0xe>
 8004482:	2000      	movs	r0, #0
 8004484:	e005      	b.n	8004492 <memcmp+0x1a>
 8004486:	7803      	ldrb	r3, [r0, #0]
 8004488:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800448c:	42a3      	cmp	r3, r4
 800448e:	d001      	beq.n	8004494 <memcmp+0x1c>
 8004490:	1b18      	subs	r0, r3, r4
 8004492:	bd10      	pop	{r4, pc}
 8004494:	3001      	adds	r0, #1
 8004496:	e7f2      	b.n	800447e <memcmp+0x6>

08004498 <memcpy>:
 8004498:	440a      	add	r2, r1
 800449a:	4291      	cmp	r1, r2
 800449c:	f100 33ff 	add.w	r3, r0, #4294967295
 80044a0:	d100      	bne.n	80044a4 <memcpy+0xc>
 80044a2:	4770      	bx	lr
 80044a4:	b510      	push	{r4, lr}
 80044a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80044aa:	4291      	cmp	r1, r2
 80044ac:	f803 4f01 	strb.w	r4, [r3, #1]!
 80044b0:	d1f9      	bne.n	80044a6 <memcpy+0xe>
 80044b2:	bd10      	pop	{r4, pc}

080044b4 <memset>:
 80044b4:	4603      	mov	r3, r0
 80044b6:	4402      	add	r2, r0
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d100      	bne.n	80044be <memset+0xa>
 80044bc:	4770      	bx	lr
 80044be:	f803 1b01 	strb.w	r1, [r3], #1
 80044c2:	e7f9      	b.n	80044b8 <memset+0x4>

080044c4 <_free_r>:
 80044c4:	b538      	push	{r3, r4, r5, lr}
 80044c6:	4605      	mov	r5, r0
 80044c8:	2900      	cmp	r1, #0
 80044ca:	d040      	beq.n	800454e <_free_r+0x8a>
 80044cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80044d0:	1f0c      	subs	r4, r1, #4
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	bfb8      	it	lt
 80044d6:	18e4      	addlt	r4, r4, r3
 80044d8:	f000 f988 	bl	80047ec <__malloc_lock>
 80044dc:	4a1c      	ldr	r2, [pc, #112]	; (8004550 <_free_r+0x8c>)
 80044de:	6813      	ldr	r3, [r2, #0]
 80044e0:	b933      	cbnz	r3, 80044f0 <_free_r+0x2c>
 80044e2:	6063      	str	r3, [r4, #4]
 80044e4:	6014      	str	r4, [r2, #0]
 80044e6:	4628      	mov	r0, r5
 80044e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80044ec:	f000 b984 	b.w	80047f8 <__malloc_unlock>
 80044f0:	42a3      	cmp	r3, r4
 80044f2:	d908      	bls.n	8004506 <_free_r+0x42>
 80044f4:	6820      	ldr	r0, [r4, #0]
 80044f6:	1821      	adds	r1, r4, r0
 80044f8:	428b      	cmp	r3, r1
 80044fa:	bf01      	itttt	eq
 80044fc:	6819      	ldreq	r1, [r3, #0]
 80044fe:	685b      	ldreq	r3, [r3, #4]
 8004500:	1809      	addeq	r1, r1, r0
 8004502:	6021      	streq	r1, [r4, #0]
 8004504:	e7ed      	b.n	80044e2 <_free_r+0x1e>
 8004506:	461a      	mov	r2, r3
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	b10b      	cbz	r3, 8004510 <_free_r+0x4c>
 800450c:	42a3      	cmp	r3, r4
 800450e:	d9fa      	bls.n	8004506 <_free_r+0x42>
 8004510:	6811      	ldr	r1, [r2, #0]
 8004512:	1850      	adds	r0, r2, r1
 8004514:	42a0      	cmp	r0, r4
 8004516:	d10b      	bne.n	8004530 <_free_r+0x6c>
 8004518:	6820      	ldr	r0, [r4, #0]
 800451a:	4401      	add	r1, r0
 800451c:	1850      	adds	r0, r2, r1
 800451e:	4283      	cmp	r3, r0
 8004520:	6011      	str	r1, [r2, #0]
 8004522:	d1e0      	bne.n	80044e6 <_free_r+0x22>
 8004524:	6818      	ldr	r0, [r3, #0]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	4401      	add	r1, r0
 800452a:	6011      	str	r1, [r2, #0]
 800452c:	6053      	str	r3, [r2, #4]
 800452e:	e7da      	b.n	80044e6 <_free_r+0x22>
 8004530:	d902      	bls.n	8004538 <_free_r+0x74>
 8004532:	230c      	movs	r3, #12
 8004534:	602b      	str	r3, [r5, #0]
 8004536:	e7d6      	b.n	80044e6 <_free_r+0x22>
 8004538:	6820      	ldr	r0, [r4, #0]
 800453a:	1821      	adds	r1, r4, r0
 800453c:	428b      	cmp	r3, r1
 800453e:	bf01      	itttt	eq
 8004540:	6819      	ldreq	r1, [r3, #0]
 8004542:	685b      	ldreq	r3, [r3, #4]
 8004544:	1809      	addeq	r1, r1, r0
 8004546:	6021      	streq	r1, [r4, #0]
 8004548:	6063      	str	r3, [r4, #4]
 800454a:	6054      	str	r4, [r2, #4]
 800454c:	e7cb      	b.n	80044e6 <_free_r+0x22>
 800454e:	bd38      	pop	{r3, r4, r5, pc}
 8004550:	20000f68 	.word	0x20000f68

08004554 <sbrk_aligned>:
 8004554:	b570      	push	{r4, r5, r6, lr}
 8004556:	4e0e      	ldr	r6, [pc, #56]	; (8004590 <sbrk_aligned+0x3c>)
 8004558:	460c      	mov	r4, r1
 800455a:	6831      	ldr	r1, [r6, #0]
 800455c:	4605      	mov	r5, r0
 800455e:	b911      	cbnz	r1, 8004566 <sbrk_aligned+0x12>
 8004560:	f000 f88c 	bl	800467c <_sbrk_r>
 8004564:	6030      	str	r0, [r6, #0]
 8004566:	4621      	mov	r1, r4
 8004568:	4628      	mov	r0, r5
 800456a:	f000 f887 	bl	800467c <_sbrk_r>
 800456e:	1c43      	adds	r3, r0, #1
 8004570:	d00a      	beq.n	8004588 <sbrk_aligned+0x34>
 8004572:	1cc4      	adds	r4, r0, #3
 8004574:	f024 0403 	bic.w	r4, r4, #3
 8004578:	42a0      	cmp	r0, r4
 800457a:	d007      	beq.n	800458c <sbrk_aligned+0x38>
 800457c:	1a21      	subs	r1, r4, r0
 800457e:	4628      	mov	r0, r5
 8004580:	f000 f87c 	bl	800467c <_sbrk_r>
 8004584:	3001      	adds	r0, #1
 8004586:	d101      	bne.n	800458c <sbrk_aligned+0x38>
 8004588:	f04f 34ff 	mov.w	r4, #4294967295
 800458c:	4620      	mov	r0, r4
 800458e:	bd70      	pop	{r4, r5, r6, pc}
 8004590:	20000f6c 	.word	0x20000f6c

08004594 <_malloc_r>:
 8004594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004598:	1ccd      	adds	r5, r1, #3
 800459a:	f025 0503 	bic.w	r5, r5, #3
 800459e:	3508      	adds	r5, #8
 80045a0:	2d0c      	cmp	r5, #12
 80045a2:	bf38      	it	cc
 80045a4:	250c      	movcc	r5, #12
 80045a6:	2d00      	cmp	r5, #0
 80045a8:	4607      	mov	r7, r0
 80045aa:	db01      	blt.n	80045b0 <_malloc_r+0x1c>
 80045ac:	42a9      	cmp	r1, r5
 80045ae:	d905      	bls.n	80045bc <_malloc_r+0x28>
 80045b0:	230c      	movs	r3, #12
 80045b2:	2600      	movs	r6, #0
 80045b4:	603b      	str	r3, [r7, #0]
 80045b6:	4630      	mov	r0, r6
 80045b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80045bc:	4e2e      	ldr	r6, [pc, #184]	; (8004678 <_malloc_r+0xe4>)
 80045be:	f000 f915 	bl	80047ec <__malloc_lock>
 80045c2:	6833      	ldr	r3, [r6, #0]
 80045c4:	461c      	mov	r4, r3
 80045c6:	bb34      	cbnz	r4, 8004616 <_malloc_r+0x82>
 80045c8:	4629      	mov	r1, r5
 80045ca:	4638      	mov	r0, r7
 80045cc:	f7ff ffc2 	bl	8004554 <sbrk_aligned>
 80045d0:	1c43      	adds	r3, r0, #1
 80045d2:	4604      	mov	r4, r0
 80045d4:	d14d      	bne.n	8004672 <_malloc_r+0xde>
 80045d6:	6834      	ldr	r4, [r6, #0]
 80045d8:	4626      	mov	r6, r4
 80045da:	2e00      	cmp	r6, #0
 80045dc:	d140      	bne.n	8004660 <_malloc_r+0xcc>
 80045de:	6823      	ldr	r3, [r4, #0]
 80045e0:	4631      	mov	r1, r6
 80045e2:	4638      	mov	r0, r7
 80045e4:	eb04 0803 	add.w	r8, r4, r3
 80045e8:	f000 f848 	bl	800467c <_sbrk_r>
 80045ec:	4580      	cmp	r8, r0
 80045ee:	d13a      	bne.n	8004666 <_malloc_r+0xd2>
 80045f0:	6821      	ldr	r1, [r4, #0]
 80045f2:	3503      	adds	r5, #3
 80045f4:	1a6d      	subs	r5, r5, r1
 80045f6:	f025 0503 	bic.w	r5, r5, #3
 80045fa:	3508      	adds	r5, #8
 80045fc:	2d0c      	cmp	r5, #12
 80045fe:	bf38      	it	cc
 8004600:	250c      	movcc	r5, #12
 8004602:	4638      	mov	r0, r7
 8004604:	4629      	mov	r1, r5
 8004606:	f7ff ffa5 	bl	8004554 <sbrk_aligned>
 800460a:	3001      	adds	r0, #1
 800460c:	d02b      	beq.n	8004666 <_malloc_r+0xd2>
 800460e:	6823      	ldr	r3, [r4, #0]
 8004610:	442b      	add	r3, r5
 8004612:	6023      	str	r3, [r4, #0]
 8004614:	e00e      	b.n	8004634 <_malloc_r+0xa0>
 8004616:	6822      	ldr	r2, [r4, #0]
 8004618:	1b52      	subs	r2, r2, r5
 800461a:	d41e      	bmi.n	800465a <_malloc_r+0xc6>
 800461c:	2a0b      	cmp	r2, #11
 800461e:	d916      	bls.n	800464e <_malloc_r+0xba>
 8004620:	1961      	adds	r1, r4, r5
 8004622:	42a3      	cmp	r3, r4
 8004624:	6025      	str	r5, [r4, #0]
 8004626:	bf18      	it	ne
 8004628:	6059      	strne	r1, [r3, #4]
 800462a:	6863      	ldr	r3, [r4, #4]
 800462c:	bf08      	it	eq
 800462e:	6031      	streq	r1, [r6, #0]
 8004630:	5162      	str	r2, [r4, r5]
 8004632:	604b      	str	r3, [r1, #4]
 8004634:	4638      	mov	r0, r7
 8004636:	f104 060b 	add.w	r6, r4, #11
 800463a:	f000 f8dd 	bl	80047f8 <__malloc_unlock>
 800463e:	f026 0607 	bic.w	r6, r6, #7
 8004642:	1d23      	adds	r3, r4, #4
 8004644:	1af2      	subs	r2, r6, r3
 8004646:	d0b6      	beq.n	80045b6 <_malloc_r+0x22>
 8004648:	1b9b      	subs	r3, r3, r6
 800464a:	50a3      	str	r3, [r4, r2]
 800464c:	e7b3      	b.n	80045b6 <_malloc_r+0x22>
 800464e:	6862      	ldr	r2, [r4, #4]
 8004650:	42a3      	cmp	r3, r4
 8004652:	bf0c      	ite	eq
 8004654:	6032      	streq	r2, [r6, #0]
 8004656:	605a      	strne	r2, [r3, #4]
 8004658:	e7ec      	b.n	8004634 <_malloc_r+0xa0>
 800465a:	4623      	mov	r3, r4
 800465c:	6864      	ldr	r4, [r4, #4]
 800465e:	e7b2      	b.n	80045c6 <_malloc_r+0x32>
 8004660:	4634      	mov	r4, r6
 8004662:	6876      	ldr	r6, [r6, #4]
 8004664:	e7b9      	b.n	80045da <_malloc_r+0x46>
 8004666:	230c      	movs	r3, #12
 8004668:	4638      	mov	r0, r7
 800466a:	603b      	str	r3, [r7, #0]
 800466c:	f000 f8c4 	bl	80047f8 <__malloc_unlock>
 8004670:	e7a1      	b.n	80045b6 <_malloc_r+0x22>
 8004672:	6025      	str	r5, [r4, #0]
 8004674:	e7de      	b.n	8004634 <_malloc_r+0xa0>
 8004676:	bf00      	nop
 8004678:	20000f68 	.word	0x20000f68

0800467c <_sbrk_r>:
 800467c:	b538      	push	{r3, r4, r5, lr}
 800467e:	2300      	movs	r3, #0
 8004680:	4d05      	ldr	r5, [pc, #20]	; (8004698 <_sbrk_r+0x1c>)
 8004682:	4604      	mov	r4, r0
 8004684:	4608      	mov	r0, r1
 8004686:	602b      	str	r3, [r5, #0]
 8004688:	f7fc fe52 	bl	8001330 <_sbrk>
 800468c:	1c43      	adds	r3, r0, #1
 800468e:	d102      	bne.n	8004696 <_sbrk_r+0x1a>
 8004690:	682b      	ldr	r3, [r5, #0]
 8004692:	b103      	cbz	r3, 8004696 <_sbrk_r+0x1a>
 8004694:	6023      	str	r3, [r4, #0]
 8004696:	bd38      	pop	{r3, r4, r5, pc}
 8004698:	20000f74 	.word	0x20000f74

0800469c <siprintf>:
 800469c:	b40e      	push	{r1, r2, r3}
 800469e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80046a2:	b500      	push	{lr}
 80046a4:	b09c      	sub	sp, #112	; 0x70
 80046a6:	ab1d      	add	r3, sp, #116	; 0x74
 80046a8:	9002      	str	r0, [sp, #8]
 80046aa:	9006      	str	r0, [sp, #24]
 80046ac:	9107      	str	r1, [sp, #28]
 80046ae:	9104      	str	r1, [sp, #16]
 80046b0:	4808      	ldr	r0, [pc, #32]	; (80046d4 <siprintf+0x38>)
 80046b2:	4909      	ldr	r1, [pc, #36]	; (80046d8 <siprintf+0x3c>)
 80046b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80046b8:	9105      	str	r1, [sp, #20]
 80046ba:	6800      	ldr	r0, [r0, #0]
 80046bc:	a902      	add	r1, sp, #8
 80046be:	9301      	str	r3, [sp, #4]
 80046c0:	f000 f8fc 	bl	80048bc <_svfiprintf_r>
 80046c4:	2200      	movs	r2, #0
 80046c6:	9b02      	ldr	r3, [sp, #8]
 80046c8:	701a      	strb	r2, [r3, #0]
 80046ca:	b01c      	add	sp, #112	; 0x70
 80046cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80046d0:	b003      	add	sp, #12
 80046d2:	4770      	bx	lr
 80046d4:	20000028 	.word	0x20000028
 80046d8:	ffff0208 	.word	0xffff0208

080046dc <_strtol_l.constprop.0>:
 80046dc:	2b01      	cmp	r3, #1
 80046de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046e2:	4680      	mov	r8, r0
 80046e4:	d001      	beq.n	80046ea <_strtol_l.constprop.0+0xe>
 80046e6:	2b24      	cmp	r3, #36	; 0x24
 80046e8:	d906      	bls.n	80046f8 <_strtol_l.constprop.0+0x1c>
 80046ea:	f7ff fe93 	bl	8004414 <__errno>
 80046ee:	2316      	movs	r3, #22
 80046f0:	6003      	str	r3, [r0, #0]
 80046f2:	2000      	movs	r0, #0
 80046f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046f8:	460d      	mov	r5, r1
 80046fa:	4f35      	ldr	r7, [pc, #212]	; (80047d0 <_strtol_l.constprop.0+0xf4>)
 80046fc:	4628      	mov	r0, r5
 80046fe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004702:	5de6      	ldrb	r6, [r4, r7]
 8004704:	f016 0608 	ands.w	r6, r6, #8
 8004708:	d1f8      	bne.n	80046fc <_strtol_l.constprop.0+0x20>
 800470a:	2c2d      	cmp	r4, #45	; 0x2d
 800470c:	d12f      	bne.n	800476e <_strtol_l.constprop.0+0x92>
 800470e:	2601      	movs	r6, #1
 8004710:	782c      	ldrb	r4, [r5, #0]
 8004712:	1c85      	adds	r5, r0, #2
 8004714:	2b00      	cmp	r3, #0
 8004716:	d057      	beq.n	80047c8 <_strtol_l.constprop.0+0xec>
 8004718:	2b10      	cmp	r3, #16
 800471a:	d109      	bne.n	8004730 <_strtol_l.constprop.0+0x54>
 800471c:	2c30      	cmp	r4, #48	; 0x30
 800471e:	d107      	bne.n	8004730 <_strtol_l.constprop.0+0x54>
 8004720:	7828      	ldrb	r0, [r5, #0]
 8004722:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8004726:	2858      	cmp	r0, #88	; 0x58
 8004728:	d149      	bne.n	80047be <_strtol_l.constprop.0+0xe2>
 800472a:	2310      	movs	r3, #16
 800472c:	786c      	ldrb	r4, [r5, #1]
 800472e:	3502      	adds	r5, #2
 8004730:	2700      	movs	r7, #0
 8004732:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8004736:	f10e 3eff 	add.w	lr, lr, #4294967295
 800473a:	fbbe f9f3 	udiv	r9, lr, r3
 800473e:	4638      	mov	r0, r7
 8004740:	fb03 ea19 	mls	sl, r3, r9, lr
 8004744:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8004748:	f1bc 0f09 	cmp.w	ip, #9
 800474c:	d814      	bhi.n	8004778 <_strtol_l.constprop.0+0x9c>
 800474e:	4664      	mov	r4, ip
 8004750:	42a3      	cmp	r3, r4
 8004752:	dd22      	ble.n	800479a <_strtol_l.constprop.0+0xbe>
 8004754:	2f00      	cmp	r7, #0
 8004756:	db1d      	blt.n	8004794 <_strtol_l.constprop.0+0xb8>
 8004758:	4581      	cmp	r9, r0
 800475a:	d31b      	bcc.n	8004794 <_strtol_l.constprop.0+0xb8>
 800475c:	d101      	bne.n	8004762 <_strtol_l.constprop.0+0x86>
 800475e:	45a2      	cmp	sl, r4
 8004760:	db18      	blt.n	8004794 <_strtol_l.constprop.0+0xb8>
 8004762:	2701      	movs	r7, #1
 8004764:	fb00 4003 	mla	r0, r0, r3, r4
 8004768:	f815 4b01 	ldrb.w	r4, [r5], #1
 800476c:	e7ea      	b.n	8004744 <_strtol_l.constprop.0+0x68>
 800476e:	2c2b      	cmp	r4, #43	; 0x2b
 8004770:	bf04      	itt	eq
 8004772:	782c      	ldrbeq	r4, [r5, #0]
 8004774:	1c85      	addeq	r5, r0, #2
 8004776:	e7cd      	b.n	8004714 <_strtol_l.constprop.0+0x38>
 8004778:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800477c:	f1bc 0f19 	cmp.w	ip, #25
 8004780:	d801      	bhi.n	8004786 <_strtol_l.constprop.0+0xaa>
 8004782:	3c37      	subs	r4, #55	; 0x37
 8004784:	e7e4      	b.n	8004750 <_strtol_l.constprop.0+0x74>
 8004786:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800478a:	f1bc 0f19 	cmp.w	ip, #25
 800478e:	d804      	bhi.n	800479a <_strtol_l.constprop.0+0xbe>
 8004790:	3c57      	subs	r4, #87	; 0x57
 8004792:	e7dd      	b.n	8004750 <_strtol_l.constprop.0+0x74>
 8004794:	f04f 37ff 	mov.w	r7, #4294967295
 8004798:	e7e6      	b.n	8004768 <_strtol_l.constprop.0+0x8c>
 800479a:	2f00      	cmp	r7, #0
 800479c:	da07      	bge.n	80047ae <_strtol_l.constprop.0+0xd2>
 800479e:	2322      	movs	r3, #34	; 0x22
 80047a0:	4670      	mov	r0, lr
 80047a2:	f8c8 3000 	str.w	r3, [r8]
 80047a6:	2a00      	cmp	r2, #0
 80047a8:	d0a4      	beq.n	80046f4 <_strtol_l.constprop.0+0x18>
 80047aa:	1e69      	subs	r1, r5, #1
 80047ac:	e005      	b.n	80047ba <_strtol_l.constprop.0+0xde>
 80047ae:	b106      	cbz	r6, 80047b2 <_strtol_l.constprop.0+0xd6>
 80047b0:	4240      	negs	r0, r0
 80047b2:	2a00      	cmp	r2, #0
 80047b4:	d09e      	beq.n	80046f4 <_strtol_l.constprop.0+0x18>
 80047b6:	2f00      	cmp	r7, #0
 80047b8:	d1f7      	bne.n	80047aa <_strtol_l.constprop.0+0xce>
 80047ba:	6011      	str	r1, [r2, #0]
 80047bc:	e79a      	b.n	80046f4 <_strtol_l.constprop.0+0x18>
 80047be:	2430      	movs	r4, #48	; 0x30
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d1b5      	bne.n	8004730 <_strtol_l.constprop.0+0x54>
 80047c4:	2308      	movs	r3, #8
 80047c6:	e7b3      	b.n	8004730 <_strtol_l.constprop.0+0x54>
 80047c8:	2c30      	cmp	r4, #48	; 0x30
 80047ca:	d0a9      	beq.n	8004720 <_strtol_l.constprop.0+0x44>
 80047cc:	230a      	movs	r3, #10
 80047ce:	e7af      	b.n	8004730 <_strtol_l.constprop.0+0x54>
 80047d0:	080054e3 	.word	0x080054e3

080047d4 <strtol>:
 80047d4:	4613      	mov	r3, r2
 80047d6:	460a      	mov	r2, r1
 80047d8:	4601      	mov	r1, r0
 80047da:	4802      	ldr	r0, [pc, #8]	; (80047e4 <strtol+0x10>)
 80047dc:	6800      	ldr	r0, [r0, #0]
 80047de:	f7ff bf7d 	b.w	80046dc <_strtol_l.constprop.0>
 80047e2:	bf00      	nop
 80047e4:	20000028 	.word	0x20000028

080047e8 <__retarget_lock_acquire_recursive>:
 80047e8:	4770      	bx	lr

080047ea <__retarget_lock_release_recursive>:
 80047ea:	4770      	bx	lr

080047ec <__malloc_lock>:
 80047ec:	4801      	ldr	r0, [pc, #4]	; (80047f4 <__malloc_lock+0x8>)
 80047ee:	f7ff bffb 	b.w	80047e8 <__retarget_lock_acquire_recursive>
 80047f2:	bf00      	nop
 80047f4:	20000f70 	.word	0x20000f70

080047f8 <__malloc_unlock>:
 80047f8:	4801      	ldr	r0, [pc, #4]	; (8004800 <__malloc_unlock+0x8>)
 80047fa:	f7ff bff6 	b.w	80047ea <__retarget_lock_release_recursive>
 80047fe:	bf00      	nop
 8004800:	20000f70 	.word	0x20000f70

08004804 <__ssputs_r>:
 8004804:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004808:	688e      	ldr	r6, [r1, #8]
 800480a:	4682      	mov	sl, r0
 800480c:	429e      	cmp	r6, r3
 800480e:	460c      	mov	r4, r1
 8004810:	4690      	mov	r8, r2
 8004812:	461f      	mov	r7, r3
 8004814:	d838      	bhi.n	8004888 <__ssputs_r+0x84>
 8004816:	898a      	ldrh	r2, [r1, #12]
 8004818:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800481c:	d032      	beq.n	8004884 <__ssputs_r+0x80>
 800481e:	6825      	ldr	r5, [r4, #0]
 8004820:	6909      	ldr	r1, [r1, #16]
 8004822:	3301      	adds	r3, #1
 8004824:	eba5 0901 	sub.w	r9, r5, r1
 8004828:	6965      	ldr	r5, [r4, #20]
 800482a:	444b      	add	r3, r9
 800482c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004830:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004834:	106d      	asrs	r5, r5, #1
 8004836:	429d      	cmp	r5, r3
 8004838:	bf38      	it	cc
 800483a:	461d      	movcc	r5, r3
 800483c:	0553      	lsls	r3, r2, #21
 800483e:	d531      	bpl.n	80048a4 <__ssputs_r+0xa0>
 8004840:	4629      	mov	r1, r5
 8004842:	f7ff fea7 	bl	8004594 <_malloc_r>
 8004846:	4606      	mov	r6, r0
 8004848:	b950      	cbnz	r0, 8004860 <__ssputs_r+0x5c>
 800484a:	230c      	movs	r3, #12
 800484c:	f04f 30ff 	mov.w	r0, #4294967295
 8004850:	f8ca 3000 	str.w	r3, [sl]
 8004854:	89a3      	ldrh	r3, [r4, #12]
 8004856:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800485a:	81a3      	strh	r3, [r4, #12]
 800485c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004860:	464a      	mov	r2, r9
 8004862:	6921      	ldr	r1, [r4, #16]
 8004864:	f7ff fe18 	bl	8004498 <memcpy>
 8004868:	89a3      	ldrh	r3, [r4, #12]
 800486a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800486e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004872:	81a3      	strh	r3, [r4, #12]
 8004874:	6126      	str	r6, [r4, #16]
 8004876:	444e      	add	r6, r9
 8004878:	6026      	str	r6, [r4, #0]
 800487a:	463e      	mov	r6, r7
 800487c:	6165      	str	r5, [r4, #20]
 800487e:	eba5 0509 	sub.w	r5, r5, r9
 8004882:	60a5      	str	r5, [r4, #8]
 8004884:	42be      	cmp	r6, r7
 8004886:	d900      	bls.n	800488a <__ssputs_r+0x86>
 8004888:	463e      	mov	r6, r7
 800488a:	4632      	mov	r2, r6
 800488c:	4641      	mov	r1, r8
 800488e:	6820      	ldr	r0, [r4, #0]
 8004890:	f000 fab8 	bl	8004e04 <memmove>
 8004894:	68a3      	ldr	r3, [r4, #8]
 8004896:	2000      	movs	r0, #0
 8004898:	1b9b      	subs	r3, r3, r6
 800489a:	60a3      	str	r3, [r4, #8]
 800489c:	6823      	ldr	r3, [r4, #0]
 800489e:	4433      	add	r3, r6
 80048a0:	6023      	str	r3, [r4, #0]
 80048a2:	e7db      	b.n	800485c <__ssputs_r+0x58>
 80048a4:	462a      	mov	r2, r5
 80048a6:	f000 fac7 	bl	8004e38 <_realloc_r>
 80048aa:	4606      	mov	r6, r0
 80048ac:	2800      	cmp	r0, #0
 80048ae:	d1e1      	bne.n	8004874 <__ssputs_r+0x70>
 80048b0:	4650      	mov	r0, sl
 80048b2:	6921      	ldr	r1, [r4, #16]
 80048b4:	f7ff fe06 	bl	80044c4 <_free_r>
 80048b8:	e7c7      	b.n	800484a <__ssputs_r+0x46>
	...

080048bc <_svfiprintf_r>:
 80048bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048c0:	4698      	mov	r8, r3
 80048c2:	898b      	ldrh	r3, [r1, #12]
 80048c4:	4607      	mov	r7, r0
 80048c6:	061b      	lsls	r3, r3, #24
 80048c8:	460d      	mov	r5, r1
 80048ca:	4614      	mov	r4, r2
 80048cc:	b09d      	sub	sp, #116	; 0x74
 80048ce:	d50e      	bpl.n	80048ee <_svfiprintf_r+0x32>
 80048d0:	690b      	ldr	r3, [r1, #16]
 80048d2:	b963      	cbnz	r3, 80048ee <_svfiprintf_r+0x32>
 80048d4:	2140      	movs	r1, #64	; 0x40
 80048d6:	f7ff fe5d 	bl	8004594 <_malloc_r>
 80048da:	6028      	str	r0, [r5, #0]
 80048dc:	6128      	str	r0, [r5, #16]
 80048de:	b920      	cbnz	r0, 80048ea <_svfiprintf_r+0x2e>
 80048e0:	230c      	movs	r3, #12
 80048e2:	603b      	str	r3, [r7, #0]
 80048e4:	f04f 30ff 	mov.w	r0, #4294967295
 80048e8:	e0d1      	b.n	8004a8e <_svfiprintf_r+0x1d2>
 80048ea:	2340      	movs	r3, #64	; 0x40
 80048ec:	616b      	str	r3, [r5, #20]
 80048ee:	2300      	movs	r3, #0
 80048f0:	9309      	str	r3, [sp, #36]	; 0x24
 80048f2:	2320      	movs	r3, #32
 80048f4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80048f8:	2330      	movs	r3, #48	; 0x30
 80048fa:	f04f 0901 	mov.w	r9, #1
 80048fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8004902:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004aa8 <_svfiprintf_r+0x1ec>
 8004906:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800490a:	4623      	mov	r3, r4
 800490c:	469a      	mov	sl, r3
 800490e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004912:	b10a      	cbz	r2, 8004918 <_svfiprintf_r+0x5c>
 8004914:	2a25      	cmp	r2, #37	; 0x25
 8004916:	d1f9      	bne.n	800490c <_svfiprintf_r+0x50>
 8004918:	ebba 0b04 	subs.w	fp, sl, r4
 800491c:	d00b      	beq.n	8004936 <_svfiprintf_r+0x7a>
 800491e:	465b      	mov	r3, fp
 8004920:	4622      	mov	r2, r4
 8004922:	4629      	mov	r1, r5
 8004924:	4638      	mov	r0, r7
 8004926:	f7ff ff6d 	bl	8004804 <__ssputs_r>
 800492a:	3001      	adds	r0, #1
 800492c:	f000 80aa 	beq.w	8004a84 <_svfiprintf_r+0x1c8>
 8004930:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004932:	445a      	add	r2, fp
 8004934:	9209      	str	r2, [sp, #36]	; 0x24
 8004936:	f89a 3000 	ldrb.w	r3, [sl]
 800493a:	2b00      	cmp	r3, #0
 800493c:	f000 80a2 	beq.w	8004a84 <_svfiprintf_r+0x1c8>
 8004940:	2300      	movs	r3, #0
 8004942:	f04f 32ff 	mov.w	r2, #4294967295
 8004946:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800494a:	f10a 0a01 	add.w	sl, sl, #1
 800494e:	9304      	str	r3, [sp, #16]
 8004950:	9307      	str	r3, [sp, #28]
 8004952:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004956:	931a      	str	r3, [sp, #104]	; 0x68
 8004958:	4654      	mov	r4, sl
 800495a:	2205      	movs	r2, #5
 800495c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004960:	4851      	ldr	r0, [pc, #324]	; (8004aa8 <_svfiprintf_r+0x1ec>)
 8004962:	f000 fa41 	bl	8004de8 <memchr>
 8004966:	9a04      	ldr	r2, [sp, #16]
 8004968:	b9d8      	cbnz	r0, 80049a2 <_svfiprintf_r+0xe6>
 800496a:	06d0      	lsls	r0, r2, #27
 800496c:	bf44      	itt	mi
 800496e:	2320      	movmi	r3, #32
 8004970:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004974:	0711      	lsls	r1, r2, #28
 8004976:	bf44      	itt	mi
 8004978:	232b      	movmi	r3, #43	; 0x2b
 800497a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800497e:	f89a 3000 	ldrb.w	r3, [sl]
 8004982:	2b2a      	cmp	r3, #42	; 0x2a
 8004984:	d015      	beq.n	80049b2 <_svfiprintf_r+0xf6>
 8004986:	4654      	mov	r4, sl
 8004988:	2000      	movs	r0, #0
 800498a:	f04f 0c0a 	mov.w	ip, #10
 800498e:	9a07      	ldr	r2, [sp, #28]
 8004990:	4621      	mov	r1, r4
 8004992:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004996:	3b30      	subs	r3, #48	; 0x30
 8004998:	2b09      	cmp	r3, #9
 800499a:	d94e      	bls.n	8004a3a <_svfiprintf_r+0x17e>
 800499c:	b1b0      	cbz	r0, 80049cc <_svfiprintf_r+0x110>
 800499e:	9207      	str	r2, [sp, #28]
 80049a0:	e014      	b.n	80049cc <_svfiprintf_r+0x110>
 80049a2:	eba0 0308 	sub.w	r3, r0, r8
 80049a6:	fa09 f303 	lsl.w	r3, r9, r3
 80049aa:	4313      	orrs	r3, r2
 80049ac:	46a2      	mov	sl, r4
 80049ae:	9304      	str	r3, [sp, #16]
 80049b0:	e7d2      	b.n	8004958 <_svfiprintf_r+0x9c>
 80049b2:	9b03      	ldr	r3, [sp, #12]
 80049b4:	1d19      	adds	r1, r3, #4
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	9103      	str	r1, [sp, #12]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	bfbb      	ittet	lt
 80049be:	425b      	neglt	r3, r3
 80049c0:	f042 0202 	orrlt.w	r2, r2, #2
 80049c4:	9307      	strge	r3, [sp, #28]
 80049c6:	9307      	strlt	r3, [sp, #28]
 80049c8:	bfb8      	it	lt
 80049ca:	9204      	strlt	r2, [sp, #16]
 80049cc:	7823      	ldrb	r3, [r4, #0]
 80049ce:	2b2e      	cmp	r3, #46	; 0x2e
 80049d0:	d10c      	bne.n	80049ec <_svfiprintf_r+0x130>
 80049d2:	7863      	ldrb	r3, [r4, #1]
 80049d4:	2b2a      	cmp	r3, #42	; 0x2a
 80049d6:	d135      	bne.n	8004a44 <_svfiprintf_r+0x188>
 80049d8:	9b03      	ldr	r3, [sp, #12]
 80049da:	3402      	adds	r4, #2
 80049dc:	1d1a      	adds	r2, r3, #4
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	9203      	str	r2, [sp, #12]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	bfb8      	it	lt
 80049e6:	f04f 33ff 	movlt.w	r3, #4294967295
 80049ea:	9305      	str	r3, [sp, #20]
 80049ec:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8004aac <_svfiprintf_r+0x1f0>
 80049f0:	2203      	movs	r2, #3
 80049f2:	4650      	mov	r0, sl
 80049f4:	7821      	ldrb	r1, [r4, #0]
 80049f6:	f000 f9f7 	bl	8004de8 <memchr>
 80049fa:	b140      	cbz	r0, 8004a0e <_svfiprintf_r+0x152>
 80049fc:	2340      	movs	r3, #64	; 0x40
 80049fe:	eba0 000a 	sub.w	r0, r0, sl
 8004a02:	fa03 f000 	lsl.w	r0, r3, r0
 8004a06:	9b04      	ldr	r3, [sp, #16]
 8004a08:	3401      	adds	r4, #1
 8004a0a:	4303      	orrs	r3, r0
 8004a0c:	9304      	str	r3, [sp, #16]
 8004a0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a12:	2206      	movs	r2, #6
 8004a14:	4826      	ldr	r0, [pc, #152]	; (8004ab0 <_svfiprintf_r+0x1f4>)
 8004a16:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004a1a:	f000 f9e5 	bl	8004de8 <memchr>
 8004a1e:	2800      	cmp	r0, #0
 8004a20:	d038      	beq.n	8004a94 <_svfiprintf_r+0x1d8>
 8004a22:	4b24      	ldr	r3, [pc, #144]	; (8004ab4 <_svfiprintf_r+0x1f8>)
 8004a24:	bb1b      	cbnz	r3, 8004a6e <_svfiprintf_r+0x1b2>
 8004a26:	9b03      	ldr	r3, [sp, #12]
 8004a28:	3307      	adds	r3, #7
 8004a2a:	f023 0307 	bic.w	r3, r3, #7
 8004a2e:	3308      	adds	r3, #8
 8004a30:	9303      	str	r3, [sp, #12]
 8004a32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a34:	4433      	add	r3, r6
 8004a36:	9309      	str	r3, [sp, #36]	; 0x24
 8004a38:	e767      	b.n	800490a <_svfiprintf_r+0x4e>
 8004a3a:	460c      	mov	r4, r1
 8004a3c:	2001      	movs	r0, #1
 8004a3e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004a42:	e7a5      	b.n	8004990 <_svfiprintf_r+0xd4>
 8004a44:	2300      	movs	r3, #0
 8004a46:	f04f 0c0a 	mov.w	ip, #10
 8004a4a:	4619      	mov	r1, r3
 8004a4c:	3401      	adds	r4, #1
 8004a4e:	9305      	str	r3, [sp, #20]
 8004a50:	4620      	mov	r0, r4
 8004a52:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004a56:	3a30      	subs	r2, #48	; 0x30
 8004a58:	2a09      	cmp	r2, #9
 8004a5a:	d903      	bls.n	8004a64 <_svfiprintf_r+0x1a8>
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d0c5      	beq.n	80049ec <_svfiprintf_r+0x130>
 8004a60:	9105      	str	r1, [sp, #20]
 8004a62:	e7c3      	b.n	80049ec <_svfiprintf_r+0x130>
 8004a64:	4604      	mov	r4, r0
 8004a66:	2301      	movs	r3, #1
 8004a68:	fb0c 2101 	mla	r1, ip, r1, r2
 8004a6c:	e7f0      	b.n	8004a50 <_svfiprintf_r+0x194>
 8004a6e:	ab03      	add	r3, sp, #12
 8004a70:	9300      	str	r3, [sp, #0]
 8004a72:	462a      	mov	r2, r5
 8004a74:	4638      	mov	r0, r7
 8004a76:	4b10      	ldr	r3, [pc, #64]	; (8004ab8 <_svfiprintf_r+0x1fc>)
 8004a78:	a904      	add	r1, sp, #16
 8004a7a:	f3af 8000 	nop.w
 8004a7e:	1c42      	adds	r2, r0, #1
 8004a80:	4606      	mov	r6, r0
 8004a82:	d1d6      	bne.n	8004a32 <_svfiprintf_r+0x176>
 8004a84:	89ab      	ldrh	r3, [r5, #12]
 8004a86:	065b      	lsls	r3, r3, #25
 8004a88:	f53f af2c 	bmi.w	80048e4 <_svfiprintf_r+0x28>
 8004a8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004a8e:	b01d      	add	sp, #116	; 0x74
 8004a90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a94:	ab03      	add	r3, sp, #12
 8004a96:	9300      	str	r3, [sp, #0]
 8004a98:	462a      	mov	r2, r5
 8004a9a:	4638      	mov	r0, r7
 8004a9c:	4b06      	ldr	r3, [pc, #24]	; (8004ab8 <_svfiprintf_r+0x1fc>)
 8004a9e:	a904      	add	r1, sp, #16
 8004aa0:	f000 f87c 	bl	8004b9c <_printf_i>
 8004aa4:	e7eb      	b.n	8004a7e <_svfiprintf_r+0x1c2>
 8004aa6:	bf00      	nop
 8004aa8:	080055e3 	.word	0x080055e3
 8004aac:	080055e9 	.word	0x080055e9
 8004ab0:	080055ed 	.word	0x080055ed
 8004ab4:	00000000 	.word	0x00000000
 8004ab8:	08004805 	.word	0x08004805

08004abc <_printf_common>:
 8004abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ac0:	4616      	mov	r6, r2
 8004ac2:	4699      	mov	r9, r3
 8004ac4:	688a      	ldr	r2, [r1, #8]
 8004ac6:	690b      	ldr	r3, [r1, #16]
 8004ac8:	4607      	mov	r7, r0
 8004aca:	4293      	cmp	r3, r2
 8004acc:	bfb8      	it	lt
 8004ace:	4613      	movlt	r3, r2
 8004ad0:	6033      	str	r3, [r6, #0]
 8004ad2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004ad6:	460c      	mov	r4, r1
 8004ad8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004adc:	b10a      	cbz	r2, 8004ae2 <_printf_common+0x26>
 8004ade:	3301      	adds	r3, #1
 8004ae0:	6033      	str	r3, [r6, #0]
 8004ae2:	6823      	ldr	r3, [r4, #0]
 8004ae4:	0699      	lsls	r1, r3, #26
 8004ae6:	bf42      	ittt	mi
 8004ae8:	6833      	ldrmi	r3, [r6, #0]
 8004aea:	3302      	addmi	r3, #2
 8004aec:	6033      	strmi	r3, [r6, #0]
 8004aee:	6825      	ldr	r5, [r4, #0]
 8004af0:	f015 0506 	ands.w	r5, r5, #6
 8004af4:	d106      	bne.n	8004b04 <_printf_common+0x48>
 8004af6:	f104 0a19 	add.w	sl, r4, #25
 8004afa:	68e3      	ldr	r3, [r4, #12]
 8004afc:	6832      	ldr	r2, [r6, #0]
 8004afe:	1a9b      	subs	r3, r3, r2
 8004b00:	42ab      	cmp	r3, r5
 8004b02:	dc28      	bgt.n	8004b56 <_printf_common+0x9a>
 8004b04:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004b08:	1e13      	subs	r3, r2, #0
 8004b0a:	6822      	ldr	r2, [r4, #0]
 8004b0c:	bf18      	it	ne
 8004b0e:	2301      	movne	r3, #1
 8004b10:	0692      	lsls	r2, r2, #26
 8004b12:	d42d      	bmi.n	8004b70 <_printf_common+0xb4>
 8004b14:	4649      	mov	r1, r9
 8004b16:	4638      	mov	r0, r7
 8004b18:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004b1c:	47c0      	blx	r8
 8004b1e:	3001      	adds	r0, #1
 8004b20:	d020      	beq.n	8004b64 <_printf_common+0xa8>
 8004b22:	6823      	ldr	r3, [r4, #0]
 8004b24:	68e5      	ldr	r5, [r4, #12]
 8004b26:	f003 0306 	and.w	r3, r3, #6
 8004b2a:	2b04      	cmp	r3, #4
 8004b2c:	bf18      	it	ne
 8004b2e:	2500      	movne	r5, #0
 8004b30:	6832      	ldr	r2, [r6, #0]
 8004b32:	f04f 0600 	mov.w	r6, #0
 8004b36:	68a3      	ldr	r3, [r4, #8]
 8004b38:	bf08      	it	eq
 8004b3a:	1aad      	subeq	r5, r5, r2
 8004b3c:	6922      	ldr	r2, [r4, #16]
 8004b3e:	bf08      	it	eq
 8004b40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b44:	4293      	cmp	r3, r2
 8004b46:	bfc4      	itt	gt
 8004b48:	1a9b      	subgt	r3, r3, r2
 8004b4a:	18ed      	addgt	r5, r5, r3
 8004b4c:	341a      	adds	r4, #26
 8004b4e:	42b5      	cmp	r5, r6
 8004b50:	d11a      	bne.n	8004b88 <_printf_common+0xcc>
 8004b52:	2000      	movs	r0, #0
 8004b54:	e008      	b.n	8004b68 <_printf_common+0xac>
 8004b56:	2301      	movs	r3, #1
 8004b58:	4652      	mov	r2, sl
 8004b5a:	4649      	mov	r1, r9
 8004b5c:	4638      	mov	r0, r7
 8004b5e:	47c0      	blx	r8
 8004b60:	3001      	adds	r0, #1
 8004b62:	d103      	bne.n	8004b6c <_printf_common+0xb0>
 8004b64:	f04f 30ff 	mov.w	r0, #4294967295
 8004b68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b6c:	3501      	adds	r5, #1
 8004b6e:	e7c4      	b.n	8004afa <_printf_common+0x3e>
 8004b70:	2030      	movs	r0, #48	; 0x30
 8004b72:	18e1      	adds	r1, r4, r3
 8004b74:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004b78:	1c5a      	adds	r2, r3, #1
 8004b7a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004b7e:	4422      	add	r2, r4
 8004b80:	3302      	adds	r3, #2
 8004b82:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004b86:	e7c5      	b.n	8004b14 <_printf_common+0x58>
 8004b88:	2301      	movs	r3, #1
 8004b8a:	4622      	mov	r2, r4
 8004b8c:	4649      	mov	r1, r9
 8004b8e:	4638      	mov	r0, r7
 8004b90:	47c0      	blx	r8
 8004b92:	3001      	adds	r0, #1
 8004b94:	d0e6      	beq.n	8004b64 <_printf_common+0xa8>
 8004b96:	3601      	adds	r6, #1
 8004b98:	e7d9      	b.n	8004b4e <_printf_common+0x92>
	...

08004b9c <_printf_i>:
 8004b9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ba0:	7e0f      	ldrb	r7, [r1, #24]
 8004ba2:	4691      	mov	r9, r2
 8004ba4:	2f78      	cmp	r7, #120	; 0x78
 8004ba6:	4680      	mov	r8, r0
 8004ba8:	460c      	mov	r4, r1
 8004baa:	469a      	mov	sl, r3
 8004bac:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004bae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004bb2:	d807      	bhi.n	8004bc4 <_printf_i+0x28>
 8004bb4:	2f62      	cmp	r7, #98	; 0x62
 8004bb6:	d80a      	bhi.n	8004bce <_printf_i+0x32>
 8004bb8:	2f00      	cmp	r7, #0
 8004bba:	f000 80d9 	beq.w	8004d70 <_printf_i+0x1d4>
 8004bbe:	2f58      	cmp	r7, #88	; 0x58
 8004bc0:	f000 80a4 	beq.w	8004d0c <_printf_i+0x170>
 8004bc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004bc8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004bcc:	e03a      	b.n	8004c44 <_printf_i+0xa8>
 8004bce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004bd2:	2b15      	cmp	r3, #21
 8004bd4:	d8f6      	bhi.n	8004bc4 <_printf_i+0x28>
 8004bd6:	a101      	add	r1, pc, #4	; (adr r1, 8004bdc <_printf_i+0x40>)
 8004bd8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004bdc:	08004c35 	.word	0x08004c35
 8004be0:	08004c49 	.word	0x08004c49
 8004be4:	08004bc5 	.word	0x08004bc5
 8004be8:	08004bc5 	.word	0x08004bc5
 8004bec:	08004bc5 	.word	0x08004bc5
 8004bf0:	08004bc5 	.word	0x08004bc5
 8004bf4:	08004c49 	.word	0x08004c49
 8004bf8:	08004bc5 	.word	0x08004bc5
 8004bfc:	08004bc5 	.word	0x08004bc5
 8004c00:	08004bc5 	.word	0x08004bc5
 8004c04:	08004bc5 	.word	0x08004bc5
 8004c08:	08004d57 	.word	0x08004d57
 8004c0c:	08004c79 	.word	0x08004c79
 8004c10:	08004d39 	.word	0x08004d39
 8004c14:	08004bc5 	.word	0x08004bc5
 8004c18:	08004bc5 	.word	0x08004bc5
 8004c1c:	08004d79 	.word	0x08004d79
 8004c20:	08004bc5 	.word	0x08004bc5
 8004c24:	08004c79 	.word	0x08004c79
 8004c28:	08004bc5 	.word	0x08004bc5
 8004c2c:	08004bc5 	.word	0x08004bc5
 8004c30:	08004d41 	.word	0x08004d41
 8004c34:	682b      	ldr	r3, [r5, #0]
 8004c36:	1d1a      	adds	r2, r3, #4
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	602a      	str	r2, [r5, #0]
 8004c3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c40:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004c44:	2301      	movs	r3, #1
 8004c46:	e0a4      	b.n	8004d92 <_printf_i+0x1f6>
 8004c48:	6820      	ldr	r0, [r4, #0]
 8004c4a:	6829      	ldr	r1, [r5, #0]
 8004c4c:	0606      	lsls	r6, r0, #24
 8004c4e:	f101 0304 	add.w	r3, r1, #4
 8004c52:	d50a      	bpl.n	8004c6a <_printf_i+0xce>
 8004c54:	680e      	ldr	r6, [r1, #0]
 8004c56:	602b      	str	r3, [r5, #0]
 8004c58:	2e00      	cmp	r6, #0
 8004c5a:	da03      	bge.n	8004c64 <_printf_i+0xc8>
 8004c5c:	232d      	movs	r3, #45	; 0x2d
 8004c5e:	4276      	negs	r6, r6
 8004c60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c64:	230a      	movs	r3, #10
 8004c66:	485e      	ldr	r0, [pc, #376]	; (8004de0 <_printf_i+0x244>)
 8004c68:	e019      	b.n	8004c9e <_printf_i+0x102>
 8004c6a:	680e      	ldr	r6, [r1, #0]
 8004c6c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004c70:	602b      	str	r3, [r5, #0]
 8004c72:	bf18      	it	ne
 8004c74:	b236      	sxthne	r6, r6
 8004c76:	e7ef      	b.n	8004c58 <_printf_i+0xbc>
 8004c78:	682b      	ldr	r3, [r5, #0]
 8004c7a:	6820      	ldr	r0, [r4, #0]
 8004c7c:	1d19      	adds	r1, r3, #4
 8004c7e:	6029      	str	r1, [r5, #0]
 8004c80:	0601      	lsls	r1, r0, #24
 8004c82:	d501      	bpl.n	8004c88 <_printf_i+0xec>
 8004c84:	681e      	ldr	r6, [r3, #0]
 8004c86:	e002      	b.n	8004c8e <_printf_i+0xf2>
 8004c88:	0646      	lsls	r6, r0, #25
 8004c8a:	d5fb      	bpl.n	8004c84 <_printf_i+0xe8>
 8004c8c:	881e      	ldrh	r6, [r3, #0]
 8004c8e:	2f6f      	cmp	r7, #111	; 0x6f
 8004c90:	bf0c      	ite	eq
 8004c92:	2308      	moveq	r3, #8
 8004c94:	230a      	movne	r3, #10
 8004c96:	4852      	ldr	r0, [pc, #328]	; (8004de0 <_printf_i+0x244>)
 8004c98:	2100      	movs	r1, #0
 8004c9a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004c9e:	6865      	ldr	r5, [r4, #4]
 8004ca0:	2d00      	cmp	r5, #0
 8004ca2:	bfa8      	it	ge
 8004ca4:	6821      	ldrge	r1, [r4, #0]
 8004ca6:	60a5      	str	r5, [r4, #8]
 8004ca8:	bfa4      	itt	ge
 8004caa:	f021 0104 	bicge.w	r1, r1, #4
 8004cae:	6021      	strge	r1, [r4, #0]
 8004cb0:	b90e      	cbnz	r6, 8004cb6 <_printf_i+0x11a>
 8004cb2:	2d00      	cmp	r5, #0
 8004cb4:	d04d      	beq.n	8004d52 <_printf_i+0x1b6>
 8004cb6:	4615      	mov	r5, r2
 8004cb8:	fbb6 f1f3 	udiv	r1, r6, r3
 8004cbc:	fb03 6711 	mls	r7, r3, r1, r6
 8004cc0:	5dc7      	ldrb	r7, [r0, r7]
 8004cc2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004cc6:	4637      	mov	r7, r6
 8004cc8:	42bb      	cmp	r3, r7
 8004cca:	460e      	mov	r6, r1
 8004ccc:	d9f4      	bls.n	8004cb8 <_printf_i+0x11c>
 8004cce:	2b08      	cmp	r3, #8
 8004cd0:	d10b      	bne.n	8004cea <_printf_i+0x14e>
 8004cd2:	6823      	ldr	r3, [r4, #0]
 8004cd4:	07de      	lsls	r6, r3, #31
 8004cd6:	d508      	bpl.n	8004cea <_printf_i+0x14e>
 8004cd8:	6923      	ldr	r3, [r4, #16]
 8004cda:	6861      	ldr	r1, [r4, #4]
 8004cdc:	4299      	cmp	r1, r3
 8004cde:	bfde      	ittt	le
 8004ce0:	2330      	movle	r3, #48	; 0x30
 8004ce2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004ce6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004cea:	1b52      	subs	r2, r2, r5
 8004cec:	6122      	str	r2, [r4, #16]
 8004cee:	464b      	mov	r3, r9
 8004cf0:	4621      	mov	r1, r4
 8004cf2:	4640      	mov	r0, r8
 8004cf4:	f8cd a000 	str.w	sl, [sp]
 8004cf8:	aa03      	add	r2, sp, #12
 8004cfa:	f7ff fedf 	bl	8004abc <_printf_common>
 8004cfe:	3001      	adds	r0, #1
 8004d00:	d14c      	bne.n	8004d9c <_printf_i+0x200>
 8004d02:	f04f 30ff 	mov.w	r0, #4294967295
 8004d06:	b004      	add	sp, #16
 8004d08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d0c:	4834      	ldr	r0, [pc, #208]	; (8004de0 <_printf_i+0x244>)
 8004d0e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004d12:	6829      	ldr	r1, [r5, #0]
 8004d14:	6823      	ldr	r3, [r4, #0]
 8004d16:	f851 6b04 	ldr.w	r6, [r1], #4
 8004d1a:	6029      	str	r1, [r5, #0]
 8004d1c:	061d      	lsls	r5, r3, #24
 8004d1e:	d514      	bpl.n	8004d4a <_printf_i+0x1ae>
 8004d20:	07df      	lsls	r7, r3, #31
 8004d22:	bf44      	itt	mi
 8004d24:	f043 0320 	orrmi.w	r3, r3, #32
 8004d28:	6023      	strmi	r3, [r4, #0]
 8004d2a:	b91e      	cbnz	r6, 8004d34 <_printf_i+0x198>
 8004d2c:	6823      	ldr	r3, [r4, #0]
 8004d2e:	f023 0320 	bic.w	r3, r3, #32
 8004d32:	6023      	str	r3, [r4, #0]
 8004d34:	2310      	movs	r3, #16
 8004d36:	e7af      	b.n	8004c98 <_printf_i+0xfc>
 8004d38:	6823      	ldr	r3, [r4, #0]
 8004d3a:	f043 0320 	orr.w	r3, r3, #32
 8004d3e:	6023      	str	r3, [r4, #0]
 8004d40:	2378      	movs	r3, #120	; 0x78
 8004d42:	4828      	ldr	r0, [pc, #160]	; (8004de4 <_printf_i+0x248>)
 8004d44:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004d48:	e7e3      	b.n	8004d12 <_printf_i+0x176>
 8004d4a:	0659      	lsls	r1, r3, #25
 8004d4c:	bf48      	it	mi
 8004d4e:	b2b6      	uxthmi	r6, r6
 8004d50:	e7e6      	b.n	8004d20 <_printf_i+0x184>
 8004d52:	4615      	mov	r5, r2
 8004d54:	e7bb      	b.n	8004cce <_printf_i+0x132>
 8004d56:	682b      	ldr	r3, [r5, #0]
 8004d58:	6826      	ldr	r6, [r4, #0]
 8004d5a:	1d18      	adds	r0, r3, #4
 8004d5c:	6961      	ldr	r1, [r4, #20]
 8004d5e:	6028      	str	r0, [r5, #0]
 8004d60:	0635      	lsls	r5, r6, #24
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	d501      	bpl.n	8004d6a <_printf_i+0x1ce>
 8004d66:	6019      	str	r1, [r3, #0]
 8004d68:	e002      	b.n	8004d70 <_printf_i+0x1d4>
 8004d6a:	0670      	lsls	r0, r6, #25
 8004d6c:	d5fb      	bpl.n	8004d66 <_printf_i+0x1ca>
 8004d6e:	8019      	strh	r1, [r3, #0]
 8004d70:	2300      	movs	r3, #0
 8004d72:	4615      	mov	r5, r2
 8004d74:	6123      	str	r3, [r4, #16]
 8004d76:	e7ba      	b.n	8004cee <_printf_i+0x152>
 8004d78:	682b      	ldr	r3, [r5, #0]
 8004d7a:	2100      	movs	r1, #0
 8004d7c:	1d1a      	adds	r2, r3, #4
 8004d7e:	602a      	str	r2, [r5, #0]
 8004d80:	681d      	ldr	r5, [r3, #0]
 8004d82:	6862      	ldr	r2, [r4, #4]
 8004d84:	4628      	mov	r0, r5
 8004d86:	f000 f82f 	bl	8004de8 <memchr>
 8004d8a:	b108      	cbz	r0, 8004d90 <_printf_i+0x1f4>
 8004d8c:	1b40      	subs	r0, r0, r5
 8004d8e:	6060      	str	r0, [r4, #4]
 8004d90:	6863      	ldr	r3, [r4, #4]
 8004d92:	6123      	str	r3, [r4, #16]
 8004d94:	2300      	movs	r3, #0
 8004d96:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d9a:	e7a8      	b.n	8004cee <_printf_i+0x152>
 8004d9c:	462a      	mov	r2, r5
 8004d9e:	4649      	mov	r1, r9
 8004da0:	4640      	mov	r0, r8
 8004da2:	6923      	ldr	r3, [r4, #16]
 8004da4:	47d0      	blx	sl
 8004da6:	3001      	adds	r0, #1
 8004da8:	d0ab      	beq.n	8004d02 <_printf_i+0x166>
 8004daa:	6823      	ldr	r3, [r4, #0]
 8004dac:	079b      	lsls	r3, r3, #30
 8004dae:	d413      	bmi.n	8004dd8 <_printf_i+0x23c>
 8004db0:	68e0      	ldr	r0, [r4, #12]
 8004db2:	9b03      	ldr	r3, [sp, #12]
 8004db4:	4298      	cmp	r0, r3
 8004db6:	bfb8      	it	lt
 8004db8:	4618      	movlt	r0, r3
 8004dba:	e7a4      	b.n	8004d06 <_printf_i+0x16a>
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	4632      	mov	r2, r6
 8004dc0:	4649      	mov	r1, r9
 8004dc2:	4640      	mov	r0, r8
 8004dc4:	47d0      	blx	sl
 8004dc6:	3001      	adds	r0, #1
 8004dc8:	d09b      	beq.n	8004d02 <_printf_i+0x166>
 8004dca:	3501      	adds	r5, #1
 8004dcc:	68e3      	ldr	r3, [r4, #12]
 8004dce:	9903      	ldr	r1, [sp, #12]
 8004dd0:	1a5b      	subs	r3, r3, r1
 8004dd2:	42ab      	cmp	r3, r5
 8004dd4:	dcf2      	bgt.n	8004dbc <_printf_i+0x220>
 8004dd6:	e7eb      	b.n	8004db0 <_printf_i+0x214>
 8004dd8:	2500      	movs	r5, #0
 8004dda:	f104 0619 	add.w	r6, r4, #25
 8004dde:	e7f5      	b.n	8004dcc <_printf_i+0x230>
 8004de0:	080055f4 	.word	0x080055f4
 8004de4:	08005605 	.word	0x08005605

08004de8 <memchr>:
 8004de8:	4603      	mov	r3, r0
 8004dea:	b510      	push	{r4, lr}
 8004dec:	b2c9      	uxtb	r1, r1
 8004dee:	4402      	add	r2, r0
 8004df0:	4293      	cmp	r3, r2
 8004df2:	4618      	mov	r0, r3
 8004df4:	d101      	bne.n	8004dfa <memchr+0x12>
 8004df6:	2000      	movs	r0, #0
 8004df8:	e003      	b.n	8004e02 <memchr+0x1a>
 8004dfa:	7804      	ldrb	r4, [r0, #0]
 8004dfc:	3301      	adds	r3, #1
 8004dfe:	428c      	cmp	r4, r1
 8004e00:	d1f6      	bne.n	8004df0 <memchr+0x8>
 8004e02:	bd10      	pop	{r4, pc}

08004e04 <memmove>:
 8004e04:	4288      	cmp	r0, r1
 8004e06:	b510      	push	{r4, lr}
 8004e08:	eb01 0402 	add.w	r4, r1, r2
 8004e0c:	d902      	bls.n	8004e14 <memmove+0x10>
 8004e0e:	4284      	cmp	r4, r0
 8004e10:	4623      	mov	r3, r4
 8004e12:	d807      	bhi.n	8004e24 <memmove+0x20>
 8004e14:	1e43      	subs	r3, r0, #1
 8004e16:	42a1      	cmp	r1, r4
 8004e18:	d008      	beq.n	8004e2c <memmove+0x28>
 8004e1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004e1e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004e22:	e7f8      	b.n	8004e16 <memmove+0x12>
 8004e24:	4601      	mov	r1, r0
 8004e26:	4402      	add	r2, r0
 8004e28:	428a      	cmp	r2, r1
 8004e2a:	d100      	bne.n	8004e2e <memmove+0x2a>
 8004e2c:	bd10      	pop	{r4, pc}
 8004e2e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004e32:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004e36:	e7f7      	b.n	8004e28 <memmove+0x24>

08004e38 <_realloc_r>:
 8004e38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e3c:	4680      	mov	r8, r0
 8004e3e:	4614      	mov	r4, r2
 8004e40:	460e      	mov	r6, r1
 8004e42:	b921      	cbnz	r1, 8004e4e <_realloc_r+0x16>
 8004e44:	4611      	mov	r1, r2
 8004e46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004e4a:	f7ff bba3 	b.w	8004594 <_malloc_r>
 8004e4e:	b92a      	cbnz	r2, 8004e5c <_realloc_r+0x24>
 8004e50:	f7ff fb38 	bl	80044c4 <_free_r>
 8004e54:	4625      	mov	r5, r4
 8004e56:	4628      	mov	r0, r5
 8004e58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e5c:	f000 f81b 	bl	8004e96 <_malloc_usable_size_r>
 8004e60:	4284      	cmp	r4, r0
 8004e62:	4607      	mov	r7, r0
 8004e64:	d802      	bhi.n	8004e6c <_realloc_r+0x34>
 8004e66:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004e6a:	d812      	bhi.n	8004e92 <_realloc_r+0x5a>
 8004e6c:	4621      	mov	r1, r4
 8004e6e:	4640      	mov	r0, r8
 8004e70:	f7ff fb90 	bl	8004594 <_malloc_r>
 8004e74:	4605      	mov	r5, r0
 8004e76:	2800      	cmp	r0, #0
 8004e78:	d0ed      	beq.n	8004e56 <_realloc_r+0x1e>
 8004e7a:	42bc      	cmp	r4, r7
 8004e7c:	4622      	mov	r2, r4
 8004e7e:	4631      	mov	r1, r6
 8004e80:	bf28      	it	cs
 8004e82:	463a      	movcs	r2, r7
 8004e84:	f7ff fb08 	bl	8004498 <memcpy>
 8004e88:	4631      	mov	r1, r6
 8004e8a:	4640      	mov	r0, r8
 8004e8c:	f7ff fb1a 	bl	80044c4 <_free_r>
 8004e90:	e7e1      	b.n	8004e56 <_realloc_r+0x1e>
 8004e92:	4635      	mov	r5, r6
 8004e94:	e7df      	b.n	8004e56 <_realloc_r+0x1e>

08004e96 <_malloc_usable_size_r>:
 8004e96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e9a:	1f18      	subs	r0, r3, #4
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	bfbc      	itt	lt
 8004ea0:	580b      	ldrlt	r3, [r1, r0]
 8004ea2:	18c0      	addlt	r0, r0, r3
 8004ea4:	4770      	bx	lr
	...

08004ea8 <_init>:
 8004ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eaa:	bf00      	nop
 8004eac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004eae:	bc08      	pop	{r3}
 8004eb0:	469e      	mov	lr, r3
 8004eb2:	4770      	bx	lr

08004eb4 <_fini>:
 8004eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eb6:	bf00      	nop
 8004eb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004eba:	bc08      	pop	{r3}
 8004ebc:	469e      	mov	lr, r3
 8004ebe:	4770      	bx	lr
